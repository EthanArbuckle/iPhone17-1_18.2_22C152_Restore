void sub_2980()
{
  off_254DF40();
}

uint64_t sub_29A4()
{
  uint64_t result = std::thread::hardware_concurrency();
  qword_254DF80 = result;
  return result;
}

uint64_t sub_29C8()
{
  return 1;
}

void *sub_29D0@<X0>(unsigned int **a1@<X0>, int a2@<W1>, unsigned int **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v50 = a1[1];
  if (*a1 == v50 || ((v52 = -a2, -a2 <= a2 + 1) ? (int v5 = a2 + 1) : (int v5 = -a2), v54 = v5, a2 < 0))
  {
    v7 = 0;
    v38 = 0;
    goto LABEL_51;
  }
  v6 = 0;
  v53 = 0;
  v7 = 0;
  while (2)
  {
    v51 = v4;
    unsigned int v8 = *v4;
    int v55 = v52;
    while (2)
    {
      int v9 = v52;
      do
      {
        unsigned int v11 = sub_511FC(v8);
        unsigned int v12 = v8 & ~(-1 << (v11 & 0xFE));
        int v13 = sub_51938(v12);
        int v14 = sub_51938(v12 >> 1);
        int v15 = 1 << (v11 >> 1);
        unsigned int v16 = (int)(((((((v13 + v55) & ~((v13 + v55) >> 31)) - (v13 + v55) + ((v13 + v55) >> 31)) >> (v11 >> 1))
                    + ((v13 + v55) >> 31)) << (v11 >> 1))
                  + v13
                  + v55)
            % v15;
        unsigned int v17 = (int)(((((((v14 + v9) & ~((v14 + v9) >> 31)) - (v14 + v9) + ((v14 + v9) >> 31)) >> (v11 >> 1))
                    + ((v14 + v9) >> 31)) << (v11 >> 1))
                  + v14
                  + v9)
            % v15;
        int v18 = -1 << (v11 >> 1);
        if (~v18 < v16) {
          unsigned int v19 = ~v18;
        }
        else {
          unsigned int v19 = v16;
        }
        if (~v18 < v17) {
          unsigned int v20 = ~v18;
        }
        else {
          unsigned int v20 = v17;
        }
        sub_518C8(v19, v20);
        int v22 = v21 | (1 << (v11 & 0xFE));
        if (v22 != v8)
        {
          if (v7 < (char *)v53)
          {
            *(_DWORD *)v7 = v22;
            uint64_t v10 = (uint64_t)(v7 + 4);
LABEL_12:
            a3[1] = (unsigned int *)v10;
            v7 = (char *)v10;
            goto LABEL_13;
          }
          uint64_t v23 = (v7 - v6) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_2E00();
          }
          if (((char *)v53 - v6) >> 1 > v24) {
            unint64_t v24 = ((char *)v53 - v6) >> 1;
          }
          if ((unint64_t)((char *)v53 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            if (v25 >> 62) {
              sub_188D718();
            }
            unint64_t v26 = v25;
            v27 = operator new(4 * v25);
            unint64_t v25 = v26;
            v28 = (int *)&v27[4 * v23];
            int *v28 = v22;
            uint64_t v10 = (uint64_t)(v28 + 1);
            if (v7 == v6) {
              goto LABEL_36;
            }
          }
          else
          {
            v27 = 0;
            v28 = (int *)(4 * v23);
            *(_DWORD *)(4 * v23) = v22;
            uint64_t v10 = 4 * v23 + 4;
            if (v7 == v6) {
              goto LABEL_36;
            }
          }
          unint64_t v29 = v7 - 4 - v6;
          if (v29 >= 0xBC)
          {
            if (&v27[v7 - v6 - 4 - (v29 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[v7 - v6 - 4])
            {
              v30 = v7;
            }
            else if (&v7[-(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
            {
              v30 = v7;
            }
            else if ((unint64_t)(v6 - v27) >= 0x20)
            {
              uint64_t v32 = (v29 >> 2) + 1;
              uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
              v30 = &v7[-v33];
              v28 = (int *)((char *)v28 - v33);
              v34 = &v27[4 * v23 - 16];
              v35 = v7 - 16;
              uint64_t v36 = v32 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                _OWORD *v34 = v37;
                v34 -= 2;
                v35 -= 32;
                v36 -= 8;
              }
              while (v36);
              if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_36;
              }
            }
            else
            {
              v30 = v7;
            }
          }
          else
          {
            v30 = v7;
          }
          do
          {
            int v31 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *--v28 = v31;
          }
          while (v30 != v6);
LABEL_36:
          *a3 = (unsigned int *)v28;
          a3[1] = (unsigned int *)v10;
          v53 = (unsigned int *)&v27[4 * v25];
          a3[2] = v53;
          if (v6) {
            operator delete(v6);
          }
          v6 = (char *)v28;
          goto LABEL_12;
        }
LABEL_13:
        ++v9;
      }
      while (v9 != v54);
      if (++v55 != v54) {
        continue;
      }
      break;
    }
    v4 = v51 + 1;
    if (v51 + 1 != v50) {
      continue;
    }
    break;
  }
  v38 = *a3;
LABEL_51:
  unint64_t v39 = 126 - 2 * __clz((v7 - (char *)v38) >> 2);
  if (v7 == (char *)v38) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v39;
  }
  uint64_t result = sub_2E4C(v38, v7, (uint64_t)&v56, v40, 1);
  v42 = a3[1];
  if (*a3 != v42)
  {
    v43 = *a3 + 1;
    while (v43 != v42)
    {
      int v45 = *(v43 - 1);
      unsigned int v44 = *v43++;
      if (v45 == v44)
      {
        v46 = v43 - 2;
        while (v43 != v42)
        {
          unsigned int v47 = v44;
          unsigned int v44 = *v43;
          if (v47 != *v43)
          {
            v46[1] = v44;
            ++v46;
          }
          ++v43;
        }
        v48 = v46 + 1;
        int64_t v49 = (char *)v42 - (char *)(v46 + 1);
        if (v42 != v46 + 1)
        {
          if (v42 != (unsigned int *)((char *)v48 + v49)) {
            uint64_t result = memmove(v46 + 1, (char *)v48 + v49, 0);
          }
          a3[1] = v48;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_2DDC(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E00()
{
}

std::logic_error *sub_2E18(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

unsigned int *sub_2E4C(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v11 = result;
LABEL_2:
  unsigned int v12 = v11;
  while (1)
  {
    unsigned int v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v71 = *v12;
          unsigned int v72 = *((_DWORD *)a2 - 1);
          if (v72 >= *v12) {
            return result;
          }
          *unsigned int v12 = v72;
          goto LABEL_155;
        case 3uLL:
          unsigned int v71 = *v12;
          unsigned int v73 = v12[1];
          unsigned int v74 = *((_DWORD *)a2 - 1);
          if (v73 >= *v12)
          {
            if (v74 < v73)
            {
              v12[1] = v74;
              *((_DWORD *)a2 - 1) = v73;
              unsigned int v91 = *v12;
              unsigned int v92 = v12[1];
              if (v92 < *v12)
              {
                *unsigned int v12 = v92;
                v12[1] = v91;
              }
            }
          }
          else
          {
            if (v74 >= v73)
            {
              *unsigned int v12 = v73;
              v12[1] = v71;
              unsigned int v99 = *((_DWORD *)a2 - 1);
              if (v99 >= v71) {
                return result;
              }
              v12[1] = v99;
            }
            else
            {
              *unsigned int v12 = v74;
            }
LABEL_155:
            *((_DWORD *)a2 - 1) = v71;
          }
          return result;
        case 4uLL:
          v75 = v12 + 1;
          v76 = (unsigned int *)v12[1];
          v77 = v12 + 2;
          unsigned int v78 = v12[2];
          v79 = (unsigned int *)*v12;
          if (v76 >= v79)
          {
            if (v78 >= v76)
            {
LABEL_149:
              LODWORD(v76) = v78;
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
LABEL_150:
              unsigned int *v77 = v93;
              *((_DWORD *)a2 - 1) = v76;
              unsigned int v96 = *v75;
              unsigned int v97 = *v77;
              if (*v77 < v96)
              {
                v12[1] = v97;
                v12[2] = v96;
                unsigned int v98 = *v12;
                if (v97 < *v12)
                {
                  *unsigned int v12 = v97;
                  v12[1] = v98;
                }
              }
              return result;
            }
            unsigned int *v75 = v78;
            unsigned int *v77 = v76;
            v80 = v12;
            v81 = v12 + 1;
            uint64_t result = v76;
            if (v78 >= v79)
            {
LABEL_141:
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            v80 = v12;
            v81 = v12 + 2;
            uint64_t result = (unsigned int *)*v12;
            if (v78 >= v76)
            {
              *unsigned int v12 = v76;
              v12[1] = v79;
              v80 = v12 + 1;
              v81 = v12 + 2;
              uint64_t result = v79;
              if (v78 >= v79) {
                goto LABEL_149;
              }
            }
          }
          unsigned int *v80 = v78;
          _DWORD *v81 = v79;
          LODWORD(v76) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_3948(v12, v12 + 1, v12 + 2, v12 + 3, (unsigned int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (unsigned int *)a2)
      {
        return (unsigned int *)sub_3A84((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unsigned int v16 = &v12[v14 >> 1];
    unsigned int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      unsigned int v20 = *v16;
      unsigned int v21 = *v12;
      if (*v12 < *v16)
      {
        if (v17 < v21)
        {
          *unsigned int v16 = v17;
          goto LABEL_32;
        }
        *unsigned int v16 = v21;
        *unsigned int v12 = v20;
        unsigned int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v20)
        {
          *unsigned int v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v21) {
        goto LABEL_33;
      }
      *unsigned int v12 = v17;
      *((_DWORD *)a2 - 1) = v21;
      unsigned int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *unsigned int v16 = *v12;
      *unsigned int v12 = v23;
      --a4;
      unsigned int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          unsigned int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        v63 = v12 + 1;
        do
        {
          unsigned int v12 = v63;
          if (v63 >= (unsigned int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      v64 = (unsigned int *)a2;
      if (v12 < (unsigned int *)a2)
      {
        v64 = (unsigned int *)a2;
        do
          unsigned int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        unsigned int v66 = *v12;
        unsigned int v67 = *v64;
        do
        {
          *unsigned int v12 = v67;
          unsigned int *v64 = v66;
          do
          {
            unsigned int v68 = v12[1];
            ++v12;
            unsigned int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            unsigned int v69 = *--v64;
            unsigned int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *unsigned int v11 = *v70;
      }
      a5 = 0;
      unsigned int *v70 = v24;
    }
    else
    {
      unsigned int v18 = *v12;
      unsigned int v19 = *v16;
      if (*v16 >= *v12)
      {
        if (v17 < v19)
        {
          *unsigned int v16 = v17;
          *((_DWORD *)a2 - 1) = v19;
          unsigned int v22 = *v12;
          if (*v16 < *v12)
          {
            *unsigned int v12 = *v16;
            *unsigned int v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          *unsigned int v12 = v19;
          *unsigned int v16 = v18;
          unsigned int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v18) {
            goto LABEL_24;
          }
          *unsigned int v16 = v25;
        }
        else
        {
          *unsigned int v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v18;
      }
LABEL_24:
      unint64_t v26 = &v12[v15];
      unsigned int v29 = *(v26 - 1);
      v27 = v26 - 1;
      unsigned int v28 = v29;
      unsigned int v30 = v12[1];
      unsigned int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          unsigned int *v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          unsigned int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            unsigned int *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          unsigned int *v27 = v30;
          unsigned int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          unsigned int *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      v35 = &v12[v15];
      unsigned int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *uint64_t v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          unsigned int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *uint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *uint64_t v36 = v39;
          unsigned int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *uint64_t v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v43 = *v27;
      unsigned int v44 = *v16;
      unsigned int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v44) {
          goto LABEL_55;
        }
        *unsigned int v16 = v45;
        *uint64_t v36 = v44;
        uint64_t v36 = &v12[v14 >> 1];
        unsigned int v44 = v43;
        if (v45 < v43)
        {
LABEL_54:
          unsigned int *v27 = v45;
          *uint64_t v36 = v43;
LABEL_55:
          unsigned int v47 = *v12;
          *unsigned int v12 = v44;
          *unsigned int v16 = v47;
          --a4;
          unsigned int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v61 = *v12;
        *unsigned int v12 = v45;
        *unsigned int v16 = v61;
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v44) {
        goto LABEL_54;
      }
      unsigned int *v27 = v44;
      *unsigned int v16 = v43;
      v27 = &v12[v14 >> 1];
      unsigned int v44 = v45;
      if (v45 < v43) {
        goto LABEL_54;
      }
      unsigned int v46 = *v12;
      *unsigned int v12 = v43;
      *unsigned int v16 = v46;
      --a4;
      unsigned int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        unsigned int v49 = v12[++v48];
      while (v49 < v24);
      v50 = &v12[v48];
      v51 = a2;
      if (v48 == 1)
      {
        v51 = a2;
        do
        {
          if (v50 >= (unsigned int *)v51) {
            break;
          }
          unsigned int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          unsigned int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (unsigned int *)v51)
      {
        v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unsigned int v12 = *v59;
        goto LABEL_75;
      }
      unsigned int v54 = *(_DWORD *)v51;
      int v55 = &v12[v48];
      char v56 = (unsigned int *)v51;
      do
      {
        *int v55 = v54;
        *char v56 = v49;
        do
        {
          unsigned int v57 = v55[1];
          ++v55;
          unsigned int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          unsigned int v58 = *--v56;
          unsigned int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      unsigned int *v59 = v24;
      if (v50 < (unsigned int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_361C(v12, v59);
      unsigned int v12 = v59 + 1;
      uint64_t result = (unsigned int *)sub_361C(v59 + 1, (unsigned int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (unsigned int *)sub_2E4C(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v12 = v59 + 1;
      }
    }
  }
  v82 = (char *)(v12 + 1);
  BOOL v84 = v12 == (unsigned int *)a2 || v82 == a2;
  if (a5)
  {
    if (!v84)
    {
      uint64_t v85 = 0;
      v86 = v12;
      do
      {
        unsigned int v89 = *v86;
        unsigned int v88 = v86[1];
        v86 = (unsigned int *)v82;
        if (v88 < v89)
        {
          uint64_t v90 = v85;
          do
          {
            *(unsigned int *)((char *)v12 + v90 + 4) = v89;
            if (!v90)
            {
              v87 = v12;
              goto LABEL_124;
            }
            unsigned int v89 = *(unsigned int *)((char *)v12 + v90 - 4);
            v90 -= 4;
          }
          while (v88 < v89);
          v87 = (unsigned int *)((char *)v12 + v90 + 4);
LABEL_124:
          unsigned int *v87 = v88;
        }
        v82 = (char *)(v86 + 1);
        v85 += 4;
      }
      while (v86 + 1 != (unsigned int *)a2);
    }
  }
  else if (!v84)
  {
    do
    {
      unsigned int v95 = *v11;
      unsigned int v94 = v11[1];
      unsigned int v11 = (unsigned int *)v82;
      if (v94 < v95)
      {
        do
        {
          *(_DWORD *)v82 = v95;
          unsigned int v95 = *((_DWORD *)v82 - 2);
          v82 -= 4;
        }
        while (v94 < v95);
        *(_DWORD *)v82 = v94;
      }
      v82 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (unsigned int *)a2);
  }
  return result;
}

BOOL sub_361C(unsigned int *a1, unsigned int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *a1;
      unsigned int v10 = *(a2 - 1);
      if (v10 >= *a1) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unsigned int v29 = *a1;
        unsigned int v30 = a1[1];
        if (v30 >= *a1) {
          return 1;
        }
        *a1 = v30;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      unsigned int v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < *a1)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unsigned int v19 = v17;
        *unsigned int v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *unsigned int v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *unsigned int v16 = v31;
      *(a2 - 1) = v15;
      unsigned int v32 = *v14;
      unsigned int v33 = *v16;
      if (*v16 >= v32) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v32;
      unsigned int v34 = *a1;
      if (v33 >= *a1) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v34;
      return 1;
    case 5:
      sub_3948(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        unsigned int *v4 = v5;
        v7 = a1;
        unsigned int v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        unsigned int v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        unsigned int v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      unsigned int *v7 = v3;
      *unsigned int v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        unsigned int v25 = *v4;
        unsigned int v26 = *v22;
        if (*v22 < v25) {
          break;
        }
LABEL_23:
        v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v25;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v26;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v25 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v26 < v25);
      *(unsigned int *)((char *)a1 + v28) = v26;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

unsigned int *sub_3948(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = *result;
  unsigned int v6 = *a2;
  unsigned int v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v6)
    {
      unsigned int v6 = *a3;
      unsigned int v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v6;
    unsigned int v8 = *result;
    if (*a2 < *result)
    {
      *uint64_t result = *a2;
      *a2 = v8;
      unsigned int v6 = *a3;
      unsigned int v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v6)
    {
      *uint64_t result = v6;
      *a2 = v5;
      unsigned int v6 = *a3;
      if (*a3 >= v5) {
        goto LABEL_11;
      }
      *a2 = v6;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v5;
    unsigned int v6 = v5;
  }
LABEL_11:
  unsigned int v9 = *a4;
  if (*a4 >= v6) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v6;
  unsigned int v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    unsigned int v11 = *result;
    if (*a2 < *result)
    {
      *uint64_t result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  unsigned int v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    unsigned int v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      unsigned int v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        unsigned int v15 = *result;
        if (*a2 < *result)
        {
          *uint64_t result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_3A84(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v35 = (unint64_t)(v4 - 2) >> 1;
    int64_t v36 = v35;
    do
    {
      if (v35 >= v36)
      {
        uint64_t v37 = (2 * v36) | 1;
        unsigned int v38 = &a1[4 * v37];
        if (2 * v36 + 2 >= v4)
        {
          unsigned int v39 = *(_DWORD *)v38;
          unsigned int v41 = &a1[4 * v36];
          unsigned int v42 = *(_DWORD *)v41;
          if (*(_DWORD *)v38 >= *(_DWORD *)v41) {
            goto LABEL_78;
          }
        }
        else
        {
          unsigned int v39 = *((_DWORD *)v38 + 1);
          BOOL v40 = *(_DWORD *)v38 >= v39;
          if (*(_DWORD *)v38 > v39) {
            unsigned int v39 = *(_DWORD *)v38;
          }
          if (!v40)
          {
            v38 += 4;
            uint64_t v37 = 2 * v36 + 2;
          }
          unsigned int v41 = &a1[4 * v36];
          unsigned int v42 = *(_DWORD *)v41;
          if (v39 >= *(_DWORD *)v41)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)unsigned int v41 = v39;
              unsigned int v41 = v38;
              if (v35 < v37) {
                break;
              }
              uint64_t v44 = (2 * v37) | 1;
              unsigned int v38 = &a1[4 * v44];
              uint64_t v37 = 2 * v37 + 2;
              if (v37 < v4)
              {
                unsigned int v39 = *((_DWORD *)v38 + 1);
                BOOL v43 = *(_DWORD *)v38 >= v39;
                if (*(_DWORD *)v38 > v39) {
                  unsigned int v39 = *(_DWORD *)v38;
                }
                if (v43) {
                  uint64_t v37 = v44;
                }
                else {
                  v38 += 4;
                }
                if (v39 < v42) {
                  break;
                }
              }
              else
              {
                unsigned int v39 = *(_DWORD *)v38;
                uint64_t v37 = v44;
                if (*(_DWORD *)v38 < v42) {
                  break;
                }
              }
            }
            *(_DWORD *)unsigned int v41 = v42;
          }
        }
      }
      BOOL v21 = v36-- <= 0;
    }
    while (!v21);
  }
  unsigned int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      unsigned int v6 = *(_DWORD *)a1;
      unsigned int v7 = a2;
      do
      {
        unsigned int v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)unsigned int v7 = v6;
          *(_DWORD *)a1 = v8;
          unsigned int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      unsigned int v5 = a3;
      goto LABEL_38;
    }
    unsigned int v9 = (unsigned int *)(a1 + 4);
    unsigned int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(_DWORD *)v10;
      if (*(_DWORD *)v10 < *(_DWORD *)a1)
      {
        *(_DWORD *)unsigned int v10 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v11;
        if (v3 == 8)
        {
          unsigned int v12 = *v9;
          unsigned int v13 = a1 + 4;
          uint64_t v14 = 1;
          if (*v9 >= v11) {
            goto LABEL_26;
          }
        }
        else
        {
          unsigned int v15 = *((_DWORD *)a1 + 2);
          unsigned int v12 = *v9;
          BOOL v16 = *v9 >= v15;
          if (*v9 <= v15) {
            unsigned int v12 = *((_DWORD *)a1 + 2);
          }
          if (*v9 >= v15) {
            unsigned int v13 = a1 + 4;
          }
          else {
            unsigned int v13 = a1 + 8;
          }
          if (v16) {
            uint64_t v14 = 1;
          }
          else {
            uint64_t v14 = 2;
          }
          if (v12 >= v11)
          {
LABEL_26:
            unsigned int v17 = a1;
            while (1)
            {
              *(_DWORD *)unsigned int v17 = v12;
              unsigned int v17 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v19 = (2 * v14) | 1;
              unsigned int v13 = &a1[4 * v19];
              uint64_t v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                unsigned int v12 = *((_DWORD *)v13 + 1);
                BOOL v18 = *(_DWORD *)v13 >= v12;
                if (*(_DWORD *)v13 > v12) {
                  unsigned int v12 = *(_DWORD *)v13;
                }
                if (v18) {
                  uint64_t v14 = v19;
                }
                else {
                  v13 += 4;
                }
                if (v12 < v11) {
                  break;
                }
              }
              else
              {
                unsigned int v12 = *(_DWORD *)v13;
                uint64_t v14 = v19;
                if (*(_DWORD *)v13 < v11) {
                  break;
                }
              }
            }
            *(_DWORD *)unsigned int v17 = v11;
          }
        }
      }
      v10 += 4;
      if (v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    uint64_t v20 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v22 = 0;
      unsigned int v23 = *(_DWORD *)a1;
      int64_t v24 = (unint64_t)(v20 - 2) >> 1;
      unsigned int v25 = a1;
      do
      {
        while (1)
        {
          uint64_t v28 = &v25[4 * v22 + 4];
          uint64_t v29 = (2 * v22) | 1;
          uint64_t v22 = 2 * v22 + 2;
          if (v22 < v20) {
            break;
          }
          uint64_t v22 = v29;
          *(_DWORD *)unsigned int v25 = *(_DWORD *)v28;
          unsigned int v25 = v28;
          if (v29 > v24) {
            goto LABEL_51;
          }
        }
        unsigned int v26 = *((_DWORD *)v28 + 1);
        BOOL v27 = *(_DWORD *)v28 >= v26;
        if (*(_DWORD *)v28 > v26) {
          unsigned int v26 = *(_DWORD *)v28;
        }
        if (v27) {
          uint64_t v22 = v29;
        }
        else {
          v28 += 4;
        }
        *(_DWORD *)unsigned int v25 = v26;
        unsigned int v25 = v28;
      }
      while (v22 <= v24);
LABEL_51:
      a2 -= 4;
      if (v28 != a2)
      {
        *(_DWORD *)uint64_t v28 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v23;
        uint64_t v30 = v28 - a1 + 4;
        if (v30 < 5) {
          goto LABEL_41;
        }
        unint64_t v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
        unsigned int v32 = &a1[4 * v31];
        unsigned int v23 = *(_DWORD *)v28;
        int v33 = *(_DWORD *)v32;
        if (*(_DWORD *)v32 >= *(_DWORD *)v28) {
          goto LABEL_41;
        }
        do
        {
          *(_DWORD *)uint64_t v28 = v33;
          uint64_t v28 = v32;
          if (!v31) {
            break;
          }
          unint64_t v31 = (v31 - 1) >> 1;
          unsigned int v32 = &a1[4 * v31];
          int v33 = *(_DWORD *)v32;
        }
        while (*(_DWORD *)v32 < v23);
      }
      *(_DWORD *)uint64_t v28 = v23;
LABEL_41:
      BOOL v21 = v20-- <= 2;
    }
    while (!v21);
  }
  return v5;
}

void sub_3DF0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a3;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a1 + 23))
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      a3[2] = a1[2];
      return;
    }
LABEL_5:
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v5 = a2;
    }
    else {
      unsigned int v5 = (uint64_t *)*a2;
    }
    unsigned int v6 = +[NSString stringWithUTF8String:v5];
    id v22 = +[NSLocale localeWithLocaleIdentifier:v6];

    if (*((char *)a1 + 23) >= 0) {
      unsigned int v7 = a1;
    }
    else {
      unsigned int v7 = (uint64_t *)*a1;
    }
    unsigned int v8 = +[NSMutableString stringWithUTF8String:v7];
    id v9 = [v8 rangeOfComposedCharacterSequenceAtIndex:0];
    uint64_t v11 = v10;
    unsigned int v12 = objc_msgSend(v8, "substringWithRange:", v9, v10);
    unsigned int v13 = [v12 lowercaseStringWithLocale:v22];

    objc_msgSend(v8, "replaceCharactersInRange:withString:", v9, v11, v13);
    id v14 = v8;
    id v15 = [v14 UTF8String];
    unint64_t v16 = (unint64_t)[v14 lengthOfBytesUsingEncoding:4];
    size_t v17 = v16;
    if (v16 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v20 = operator new(v18 + 1);
      v4[1] = v17;
      v4[2] = v19 | 0x8000000000000000;
      void *v4 = v20;
      uint64_t v4 = v20;
    }
    else
    {
      *((unsigned char *)v4 + 23) = v16;
      if (!v16) {
        goto LABEL_19;
      }
    }
    memmove(v4, v15, v17);
LABEL_19:
    *((unsigned char *)v4 + v17) = 0;

    return;
  }
  if (a1[1]) {
    goto LABEL_5;
  }
  BOOL v21 = (void *)*a1;
  sub_4200(a3, v21, 0);
}

void sub_4018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_4034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_4050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_4068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_4080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_4094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_40AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_40CC(uint64_t *a1)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  v2 = +[NSString stringWithUTF8String:v1];
  uint64_t v6 = 0;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3254779904;
  v5[2] = sub_41CC;
  v5[3] = &unk_23FD620;
  v5[4] = &v6;
  objc_msgSend(v2, "enumerateSubstringsInRange:options:usingBlock:", 0, objc_msgSend(v2, "length"), 2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_41CC(uint64_t result)
{
  return result;
}

void sub_41E4(uint64_t a1, uint64_t a2)
{
}

void sub_41F4(uint64_t a1)
{
}

void *sub_4200(unsigned char *__dst, void *__src, unint64_t a3)
{
  unsigned int v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *unsigned int v5 = v8;
    unsigned int v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

double sub_42A0(uint64_t a1)
{
  *(void *)&double result = 0x8000000080000000;
  *(void *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 14) = -1;
  *(_DWORD *)(a1 + 17) = -1;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_42CC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(void *)(a2 + 40)) {
    operator new();
  }
  uint64_t result = *(void *)(a2 + 32);
  if (result)
  {
    nullsub_1(result);
    *(void *)(a1 + 4) = 0x8000000080000000;
    operator new();
  }
  return result;
}

void sub_4404()
{
}

void sub_4434()
{
}

const void ***sub_4458(const void ***a1)
{
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_26C4C(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_44A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_5BFC(v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_44E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 14) = -1;
  *(_DWORD *)(a1 + 17) = -1;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_42CC(a1, a2);
  return a1;
}

void sub_4548(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void ***)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    sub_20A62BC(v4);
  }
  sub_20A6280(v2);
  _Unwind_Resume(a1);
}

double sub_456C(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)&double result = 0x8000000080000000;
  *(void *)(a1 + 4) = 0x8000000080000000;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 14) = -1;
  *(_DWORD *)(a1 + 17) = -1;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_4594(uint64_t a1)
{
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 14) = -1;
  *(_DWORD *)(a1 + 17) = -1;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  operator new();
}

void sub_46A8()
{
}

void sub_46DC(_Unwind_Exception *a1)
{
  sub_4458((const void ***)(v1 + 40));
  sub_44A0(v2);
  _Unwind_Resume(a1);
}

void sub_46FC(uint64_t a1)
{
}

void sub_4718(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 14) = -1;
  *(_DWORD *)(a1 + 17) = -1;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4) = 0x8000000080000000;
  operator new();
}

void sub_47BC()
{
}

void sub_47F0(_Unwind_Exception *a1)
{
  sub_4458((const void ***)(v1 + 40));
  sub_44A0(v2);
  _Unwind_Resume(a1);
}

void sub_480C(uint64_t a1, int a2)
{
}

uint64_t sub_4814(uint64_t a1)
{
  uint64_t v2 = *(const void ***)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    sub_26C4C(v2);
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    sub_5BFC(v3);
    operator delete();
  }
  return a1;
}

_DWORD *sub_4880(_DWORD *result)
{
  *double result = 0x7FFFFFFF;
  return result;
}

BOOL sub_488C(_DWORD *a1)
{
  return *a1 != 0x7FFFFFFF;
}

_DWORD *sub_48A0(_DWORD *result, int a2)
{
  if (*result != a2) {
    *double result = a2;
  }
  return result;
}

void sub_48B4(uint64_t a1, CFTimeZoneRef *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    *(void *)(a1 + 4) = 0x8000000080000000;
    operator new();
  }
  unsigned int v5 = (CFTimeZoneRef *)nullsub_1(v4);
  if (sub_2AA08(a2, v5)) {
    sub_5C7C(*(void *)(a1 + 32), a2);
  }
  *(_DWORD *)(a1 + 4) = 0x7FFFFFFF;
}

void sub_4978()
{
}

uint64_t sub_499C(uint64_t a1)
{
  sub_49D4(a1);
  uint64_t v2 = *(void *)(a1 + 32);

  return nullsub_1(v2);
}

uint64_t sub_49D4(uint64_t result)
{
  if (*(_DWORD *)result != 0x7FFFFFFF)
  {
    uint64_t v1 = (_DWORD *)result;
    if (*(_DWORD *)(result + 8) != *(_DWORD *)result)
    {
      uint64_t v2 = *(void *)(result + 32);
      if (!v2) {
        operator new();
      }
      double result = sub_5CE4(v2, *(_DWORD *)result);
      v1[2] = *v1;
    }
  }
  return result;
}

void sub_4AD0()
{
}

void sub_4AF4()
{
}

_DWORD *sub_4B18(_DWORD *result, unsigned __int16 a2)
{
  if (*result != 0x7FFFFFFF)
  {
    uint64_t v3 = result;
    sub_49D4((uint64_t)result);
    sub_6164(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

uint64_t sub_4B6C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 14);
}

uint64_t sub_4B94(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)result;
  if (*(_DWORD *)result == 0x7FFFFFFF)
  {
    *(_DWORD *)(result + 14) = -1;
    *(_WORD *)(result + 18) = -1;
    *(unsigned char *)(result + 12) = 0;
    *(unsigned char *)(result + 20) = -1;
  }
  else
  {
    int v3 = *(_DWORD *)(result + 4);
    if (v2 != v3)
    {
      if (v3 == 0x7FFFFFFF || (unsigned int v4 = *(_DWORD *)(result + 24) + v2 - v3, *(_DWORD *)(result + 24) = v4, v4 > 0xE0F))
      {
        sub_49D4(result);
        *(_WORD *)(v1 + 14) = sub_61B8(*(void *)(v1 + 32));
        *(_WORD *)(v1 + 16) = sub_6228(*(void *)(v1 + 32));
        *(_WORD *)(v1 + 18) = sub_6298(*(void *)(v1 + 32));
        *(unsigned char *)(v1 + 12) = sub_63B0(*(void *)(v1 + 32));
        *(unsigned char *)(v1 + 20) = sub_6308(*(void *)(v1 + 32));
        int v5 = (unsigned __int16)sub_6378(*(void *)(v1 + 32));
        double result = sub_6394(*(void *)(v1 + 32));
        *(_DWORD *)(v1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 60 * v5 + result;
        int v2 = *(_DWORD *)v1;
      }
      *(_DWORD *)(v1 + 4) = v2;
    }
  }
  return result;
}

_DWORD *sub_4C88(_DWORD *result, unsigned __int16 a2)
{
  if (*result != 0x7FFFFFFF)
  {
    int v3 = result;
    sub_49D4((uint64_t)result);
    sub_61D4(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

uint64_t sub_4CDC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t sub_4D04(uint64_t a1)
{
  int v2 = (CFTimeZoneRef *)nullsub_1(*(void *)(a1 + 32));
  int v3 = *(_DWORD *)a1;

  return sub_2A9B8(v2, v3);
}

_DWORD *sub_4D40(_DWORD *result, uint64_t a2)
{
  if (*result != 0x7FFFFFFF)
  {
    int v3 = result;
    sub_49D4((uint64_t)result);
    sub_65BC(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

_DWORD *sub_4D94(_DWORD *result, unsigned __int16 a2)
{
  if (*result != 0x7FFFFFFF)
  {
    int v3 = result;
    sub_49D4((uint64_t)result);
    sub_6244(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

uint64_t sub_4DE8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 18);
}

_DWORD *sub_4E10(_DWORD *result, unsigned __int8 a2)
{
  if (*result != 0x7FFFFFFF)
  {
    int v3 = result;
    sub_49D4((uint64_t)result);
    sub_62B4(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

uint64_t sub_4E64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

_DWORD *sub_4E8C(_DWORD *result, unsigned __int16 a2)
{
  if (*result != 0x7FFFFFFF)
  {
    int v3 = result;
    sub_49D4((uint64_t)result);
    sub_6324(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

uint64_t sub_4EE0(_DWORD *a1)
{
  if (*a1 == 0x7FFFFFFF) {
    return 0xFFFFLL;
  }
  sub_4B94((uint64_t)a1);
  return (a1[6] / 60);
}

uint64_t sub_4F44(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_4F4C(uint64_t a1)
{
  sub_4B94(a1);
  sub_4B94(a1);
  int v2 = *(unsigned __int8 *)(a1 + 12);
  sub_4B94(a1);
  int v3 = *(unsigned __int8 *)(a1 + 20);
  if (*(_DWORD *)a1 == 0x7FFFFFFF)
  {
    int v4 = 2550;
    int v5 = 0xFFFF;
  }
  else
  {
    sub_4B94(a1);
    int v5 = (unsigned __int16)(*(_DWORD *)(a1 + 24) / 60);
    if (*(_DWORD *)a1 == 0x7FFFFFFF)
    {
      int v4 = 2550;
    }
    else
    {
      sub_4B94(a1);
      int v4 = 10 * ((char)*(_DWORD *)(a1 + 24) % 60);
    }
  }
  unsigned int v6 = 864000 * v2 + 36000 * v3 + 600 * v5 + v4;
  return v6 - 6048000 * (((2978571183u * (unint64_t)v6) >> 32) >> 22);
}

uint64_t sub_506C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_5094(uint64_t a1)
{
  if (*(_DWORD *)a1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  sub_4B94(a1);
  return 10000 * *(unsigned __int16 *)(a1 + 14)
       + 100 * *(unsigned __int16 *)(a1 + 16)
       + *(unsigned __int16 *)(a1 + 18);
}

_DWORD *sub_50F8(_DWORD *result, int a2, uint64_t a3)
{
  if (*result != 0x7FFFFFFF)
  {
    int v5 = result;
    sub_49D4((uint64_t)result);
    sub_63CC(*((void *)v5 + 4), a2, a3);
    double result = (_DWORD *)sub_5D2C(*((void *)v5 + 4));
    *int v5 = result;
    v5[2] = result;
  }
  return result;
}

CFIndex sub_515C(uint64_t a1)
{
  if (*(_DWORD *)a1 == 0x7FFFFFFF) {
    return 0xFFFFLL;
  }
  sub_49D4(a1);
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_6500(v3);
}

uint64_t sub_51B4(uint64_t a1)
{
  if (*(_DWORD *)a1 == 0x7FFFFFFF) {
    return 0xFFFFLL;
  }
  sub_4B94(a1);
  return *(_DWORD *)(a1 + 24) / 60 + 60 * *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_5224(int a1, int a2, CFTimeZoneRef *a3)
{
  return sub_69F8(a1, a2, a3);
}

void *sub_5230(void *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    sub_188FC78(a1, (uint64_t)"INVALID Calendar", 16);
    return a1;
  }
  sub_49D4(a2);
  int v5 = sub_188FC78(a1, (uint64_t)"{", 1);
  unsigned int v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B5EB0;
  strcpy((char *)v12, "HH:mm:ss EEE YYYY-MM-dd VV");
  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    memset(&v14, 0, sizeof(v14));
  }
  else
  {
    sub_49D4(a2);
    sub_66BC(*(void *)(a2 + 32), (uint64_t)&v12, &v14);
  }
  unsigned int v6 = std::string::append(&v14, ",utc=");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v16 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v16 >= 0) {
    uint64_t v9 = HIBYTE(v16);
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = sub_188FC78(v5, (uint64_t)v8, v9);
  uint64_t v11 = (void *)sub_266E4((uint64_t)v10);
  sub_188FC78(v11, (uint64_t)"}", 1);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  if ((SHIBYTE(v13) & 0x80000000) == 0) {
    return a1;
  }
LABEL_19:
  operator delete(v12);
  return a1;
}

void sub_53D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_5444(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)a1 == 0x7FFFFFFF)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    sub_49D4(a1);
    uint64_t v6 = *(void *)(a1 + 32);
    sub_66BC(v6, a2, a3);
  }
}

void sub_54BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_49D4(a1);
  int v4 = (CFTimeZoneRef *)nullsub_1(*(void *)(a1 + 32));

  sub_26CC0(v4, a2);
}

_DWORD *sub_5500(_DWORD *result, uint64_t a2)
{
  if (*result != 0x7FFFFFFF)
  {
    uint64_t v3 = result;
    sub_49D4((uint64_t)result);
    sub_6628(*((void *)v3 + 4), a2);
    double result = (_DWORD *)sub_5D2C(*((void *)v3 + 4));
    _DWORD *v3 = result;
    v3[2] = result;
  }
  return result;
}

BOOL sub_5554(uint64_t a1, uint64_t a2)
{
  sub_49D4(a1);
  sub_49D4(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);

  return sub_6694(v4, v5);
}

BOOL sub_559C(uint64_t a1, uint64_t a2)
{
  sub_49D4(a1);
  sub_49D4(a2);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);

  return sub_66A8(v4, v5);
}

uint64_t sub_55E4(uint64_t a1, uint64_t a2)
{
  return a1;
}

_DWORD *sub_560C(_DWORD *result, int *a2)
{
  if (*a2 < 0) {
    char v2 = -5;
  }
  else {
    char v2 = 5;
  }
  *result += *a2 / 10
           + (((103 * (char)(v2 + *a2 % 10)) >> 15) & 1)
           + ((103 * (char)(v2 + *a2 % 10)) >> 10);
  return result;
}

uint64_t sub_566C@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0x8000000080000000;
  *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 14) = -1;
  *(_DWORD *)(a3 + 17) = -1;
  *(_DWORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  uint64_t result = sub_42CC(a3, a1);
  if (*a2 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  *(_DWORD *)a3 += *a2 / 10
                 + (((103 * (char)(v6 + *a2 % 10)) >> 15) & 1)
                 + ((103 * (char)(v6 + *a2 % 10)) >> 10);
  return result;
}

void sub_5730(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void ***)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    sub_20A62BC(v4);
  }
  sub_20A6280(v2);
  _Unwind_Resume(a1);
}

_DWORD *sub_5754(_DWORD *result, int *a2)
{
  if (*a2 < 0) {
    char v2 = -5;
  }
  else {
    char v2 = 5;
  }
  *result += *a2 / -10
           + (((-103 * (char)(v2 + *a2 % 10)) >> 15) & 1)
           + ((-103 * (char)(v2 + *a2 % 10)) >> 10);
  return result;
}

uint64_t sub_57CC@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0x8000000080000000;
  *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 14) = -1;
  *(_DWORD *)(a3 + 17) = -1;
  *(_DWORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  uint64_t result = sub_42CC(a3, a1);
  if (*a2 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  *(_DWORD *)a3 += *a2 / -10
                 + (((-103 * (char)(v6 + *a2 % 10)) >> 15) & 1)
                 + ((-103 * (char)(v6 + *a2 % 10)) >> 10);
  return result;
}

void sub_58A8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void ***)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    sub_20A62BC(v4);
  }
  sub_20A6280(v2);
  _Unwind_Resume(a1);
}

void sub_58CC(void *a1)
{
}

uint64_t sub_58E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        long long v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        long long v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        int64_t v16 = __b;
      }
      else {
        int64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_5AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5AD0()
{
}

void sub_5AE8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_188D9E0(exception, a1);
}

void sub_5B30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5B6C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

uint64_t sub_5B7C(uint64_t a1, uint64_t a2)
{
  sub_26C08(a1, a2);
  uint64_t v3 = CFCalendarCreateWithIdentifier(0, kCFGregorianCalendar);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_DWORD *)(a1 + 35) = -1;
  *(_WORD *)(a1 + 39) = -256;
  *(_WORD *)(a1 + 42) = -1;
  *(unsigned char *)(a1 + 44) = -1;
  CFCalendarSetTimeZone(v3, *(CFTimeZoneRef *)a1);
  return a1;
}

void sub_5BE8(_Unwind_Exception *a1)
{
  sub_26C4C(v1);
  _Unwind_Resume(a1);
}

const void **sub_5BFC(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }

  return sub_26C4C((const void **)a1);
}

uint64_t sub_5C40(uint64_t result)
{
  if (*(double *)(result + 24) != 0.0)
  {
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(_DWORD *)(result + 32) = -1;
    *(_DWORD *)(result + 35) = -1;
    *(_WORD *)(result + 39) = -256;
    *(_WORD *)(result + 42) = -1;
    *(unsigned char *)(result + 44) = -1;
  }
  return result;
}

void sub_5C7C(uint64_t a1, CFTimeZoneRef *a2)
{
  if (sub_2AA08((CFTimeZoneRef *)a1, a2))
  {
    sub_26C80((const void **)a1, (uint64_t)a2);
    CFCalendarSetTimeZone(*(CFCalendarRef *)(a1 + 16), *(CFTimeZoneRef *)a1);
    *(_DWORD *)(a1 + 35) = -1;
    *(_DWORD *)(a1 + 32) = -1;
    *(_WORD *)(a1 + 39) = -256;
    *(_WORD *)(a1 + 42) = -1;
    *(unsigned char *)(a1 + 44) = -1;
  }
}

uint64_t sub_5CE4(uint64_t result, int a2)
{
  double v2 = (double)a2 + -978307200.0;
  if (*(double *)(result + 24) != v2)
  {
    *(double *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
    *(_DWORD *)(result + 32) = -1;
    *(_DWORD *)(result + 35) = -1;
    *(_WORD *)(result + 39) = -256;
    *(_WORD *)(result + 42) = -1;
    *(unsigned char *)(result + 44) = -1;
  }
  return result;
}

uint64_t sub_5D2C(uint64_t a1)
{
  return *(double *)(a1 + 24) + 978307200;
}

uint64_t sub_5D44(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned __int8 a5, unsigned __int16 a6, unsigned __int8 a7)
{
  CFAbsoluteTime at = 0.0;
  uint64_t result = CFCalendarComposeAbsoluteTime(*(CFCalendarRef *)(a1 + 16), &at, "yMdHms", a2, a3, a4, a5, a6, a7);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v11, "Failure in set");
    uint64_t v10 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  if (*(double *)(a1 + 24) != at)
  {
    *(CFAbsoluteTime *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = at;
    *(_DWORD *)(a1 + 32) = -1;
    *(_DWORD *)(a1 + 35) = -1;
    *(_WORD *)(a1 + 39) = -256;
    *(_WORD *)(a1 + 42) = -1;
    *(unsigned char *)(a1 + 44) = -1;
  }
  return result;
}

void sub_5E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5E5C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_5F10(std::exception *this)
{
  if (SHIBYTE(this[6].__vftable) < 0)
  {
    operator delete(this[4].__vftable);
    if ((SHIBYTE(this[3].__vftable) & 0x80000000) == 0)
    {
LABEL_3:
      double v2 = this;
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(this[3].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1].__vftable);
  double v2 = this;

LABEL_5:
  std::exception::~exception(v2);
}

uint64_t sub_5F8C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  if (*(__int16 *)(a1 + 32) != -1) {
    return a1 + 32;
  }
  int v7 = 0;
  if (!CFCalendarDecomposeAbsoluteTime(*(CFCalendarRef *)(a1 + 16), *(CFAbsoluteTime *)(a1 + 24), "yMdWEHms", v1, a1 + 34, a1 + 36, a1 + 38, &v7, a1 + 40, a1 + 42, a1 + 44))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "Failure in CFCalendarDecomposeAbsoluteTime");
    size_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  *(unsigned char *)(a1 + 39) = v7 - 1;
  return v1;
}

void sub_6078(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0)
  {
    operator delete(*(void **)(v1 - 48));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFAbsoluteTime sub_60A8(__CFCalendar *a1, char *componentDesc, uint64_t a3, CFAbsoluteTime a4)
{
  CFAbsoluteTime at = a4;
  if (!CFCalendarAddComponents(a1, &at, 0, componentDesc, a3))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v7, "Failure in CFCalendarAddComponents");
    long long v6 = (void *)sub_2F404((uint64_t)exception, &v7);
  }
  return at;
}

void sub_6134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6164(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4 = sub_5F8C(a1);
  unsigned __int16 v5 = *(_WORD *)(v4 + 2);
  unsigned __int16 v6 = *(_WORD *)(v4 + 4);
  unsigned __int8 v7 = *(unsigned char *)(v4 + 8);
  unsigned __int16 v8 = *(_WORD *)(v4 + 10);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 12);

  return sub_5D44(a1, a2, v5, v6, v7, v8, v9);
}

uint64_t sub_61B8(uint64_t a1)
{
  return *(unsigned __int16 *)sub_5F8C(a1);
}

uint64_t sub_61D4(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4 = sub_5F8C(a1);
  unsigned __int16 v5 = *(_WORD *)v4;
  unsigned __int16 v6 = *(_WORD *)(v4 + 4);
  unsigned __int8 v7 = *(unsigned char *)(v4 + 8);
  unsigned __int16 v8 = *(_WORD *)(v4 + 10);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 12);

  return sub_5D44(a1, v5, a2, v6, v7, v8, v9);
}

uint64_t sub_6228(uint64_t a1)
{
  return *(unsigned __int16 *)(sub_5F8C(a1) + 2);
}

uint64_t sub_6244(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4 = sub_5F8C(a1);
  unsigned __int16 v5 = *(_WORD *)v4;
  unsigned __int16 v6 = *(_WORD *)(v4 + 2);
  unsigned __int8 v7 = *(unsigned char *)(v4 + 8);
  unsigned __int16 v8 = *(_WORD *)(v4 + 10);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 12);

  return sub_5D44(a1, v5, v6, a2, v7, v8, v9);
}

uint64_t sub_6298(uint64_t a1)
{
  return *(unsigned __int16 *)(sub_5F8C(a1) + 4);
}

uint64_t sub_62B4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = sub_5F8C(a1);
  unsigned __int16 v5 = *(_WORD *)v4;
  unsigned __int16 v6 = *(_WORD *)(v4 + 2);
  unsigned __int16 v7 = *(_WORD *)(v4 + 4);
  unsigned __int16 v8 = *(_WORD *)(v4 + 10);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 12);

  return sub_5D44(a1, v5, v6, v7, a2, v8, v9);
}

uint64_t sub_6308(uint64_t a1)
{
  return *(unsigned __int8 *)(sub_5F8C(a1) + 8);
}

uint64_t sub_6324(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4 = sub_5F8C(a1);
  unsigned __int16 v5 = *(_WORD *)v4;
  unsigned __int16 v6 = *(_WORD *)(v4 + 2);
  unsigned __int16 v7 = *(_WORD *)(v4 + 4);
  unsigned __int8 v8 = *(unsigned char *)(v4 + 8);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 12);

  return sub_5D44(a1, v5, v6, v7, v8, a2, v9);
}

uint64_t sub_6378(uint64_t a1)
{
  return *(unsigned __int16 *)(sub_5F8C(a1) + 10);
}

uint64_t sub_6394(uint64_t a1)
{
  return *(unsigned __int8 *)(sub_5F8C(a1) + 12);
}

uint64_t sub_63B0(uint64_t a1)
{
  return *(unsigned __int8 *)(sub_5F8C(a1) + 7);
}

uint64_t sub_63CC(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int16 v6 = (unsigned __int16 *)sub_5F8C(a1);
  CFAbsoluteTime at = 0.0;
  uint64_t result = CFCalendarComposeAbsoluteTime(*(CFCalendarRef *)(a1 + 16), &at, "yMEFHms", *v6, v6[1], (a2 + 1), a3, *((unsigned __int8 *)v6 + 8), v6[5], *((unsigned __int8 *)v6 + 12));
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v10, "Failure in set_day_of_week_in_month");
    unsigned __int8 v9 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  if (*(double *)(a1 + 24) != at)
  {
    *(CFAbsoluteTime *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = at;
    *(_DWORD *)(a1 + 32) = -1;
    *(_DWORD *)(a1 + 35) = -1;
    *(_WORD *)(a1 + 39) = -256;
    *(_WORD *)(a1 + 42) = -1;
    *(unsigned char *)(a1 + 44) = -1;
  }
  return result;
}

void sub_64D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFIndex sub_6500(uint64_t a1)
{
  CFIndex result = CFCalendarGetOrdinalityOfUnit(*(CFCalendarRef *)(a1 + 16), 0x10uLL, 4uLL, *(CFAbsoluteTime *)(a1 + 24));
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Failure in CFCalendarGetOrdinalityOfUnit");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_65BC(uint64_t a1, uint64_t a2)
{
  double v3 = sub_60A8(*(__CFCalendar **)(a1 + 16), "M", a2, *(CFAbsoluteTime *)(a1 + 24));
  if (*(double *)(a1 + 24) != v3)
  {
    *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
    *(_DWORD *)(a1 + 32) = -1;
    *(_DWORD *)(a1 + 35) = -1;
    *(_WORD *)(a1 + 39) = -256;
    *(_WORD *)(a1 + 42) = -1;
    *(unsigned char *)(a1 + 44) = -1;
  }
}

void sub_6628(uint64_t a1, uint64_t a2)
{
  double v3 = sub_60A8(*(__CFCalendar **)(a1 + 16), "d", a2, *(CFAbsoluteTime *)(a1 + 24));
  if (*(double *)(a1 + 24) != v3)
  {
    *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
    *(_DWORD *)(a1 + 32) = -1;
    *(_DWORD *)(a1 + 35) = -1;
    *(_WORD *)(a1 + 39) = -256;
    *(_WORD *)(a1 + 42) = -1;
    *(unsigned char *)(a1 + 44) = -1;
  }
}

BOOL sub_6694(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) < *(double *)(a2 + 24);
}

BOOL sub_66A8(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) > *(double *)(a2 + 24);
}

void sub_66BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned __int16 v6 = CFDateFormatterCreate(0, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  if (*(char *)(a2 + 23) >= 0) {
    unsigned __int16 v7 = (const char *)a2;
  }
  else {
    unsigned __int16 v7 = *(const char **)a2;
  }
  CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  CFDateFormatterSetFormat(v6, v8);
  CFRelease(v8);
  CFTimeZoneRef v9 = CFCalendarCopyTimeZone(*(CFCalendarRef *)(a1 + 16));
  CFDateFormatterSetProperty(v6, kCFDateFormatterTimeZone, v9);
  CFRelease(v9);
  CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0, v6, *(CFAbsoluteTime *)(a1 + 24));
  CFRelease(v6);
  if (StringWithAbsoluteTime)
  {
    sub_67D0(StringWithAbsoluteTime, a3);
    CFRelease(StringWithAbsoluteTime);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_67B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_67D0(const __CFString *a1@<X0>, void *a2@<X8>)
{
  double v2 = a2;
  if (!a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  unsigned __int16 v5 = (void *)CStringPtr;
  if (CStringPtr)
  {
    size_t v6 = strlen(CStringPtr);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v13 = v6 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v15 = operator new(v13 + 1);
      v2[1] = v7;
      v2[2] = v14 | 0x8000000000000000;
      void *v2 = v15;
      double v2 = v15;
    }
    else
    {
      *((unsigned char *)v2 + 23) = v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
    memmove(v2, v5, v7);
LABEL_21:
    *((unsigned char *)v2 + v7) = 0;
    return;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  uint64_t v19 = 0;
  size_t v10 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding != -1)
  {
    if (MaximumSizeForEncoding <= -2) {
      sub_2E00();
    }
    unsigned __int16 v5 = operator new(MaximumSizeForEncoding + 1);
    bzero(v5, v10);
    uint64_t v19 = v5;
  }
  if (CFStringGetCString(a1, (char *)v5, v10, 0x8000100u))
  {
    size_t v11 = strlen((const char *)v5);
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v16 = v11 | 7;
      }
      uint64_t v17 = v16 + 1;
      uint64_t v18 = operator new(v16 + 1);
      v2[1] = v12;
      v2[2] = v17 | 0x8000000000000000;
      void *v2 = v18;
      double v2 = v18;
    }
    else
    {
      *((unsigned char *)v2 + 23) = v11;
      if (!v11)
      {
LABEL_28:
        *((unsigned char *)v2 + v12) = 0;
        unsigned __int16 v5 = v19;
        if (v19) {
          goto LABEL_29;
        }
        return;
      }
    }
    memcpy(v2, v5, v12);
    goto LABEL_28;
  }
  void *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  if (v5) {
LABEL_29:
  }
    operator delete(v5);
}

void sub_69DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_69F8(int a1, int a2, CFTimeZoneRef *a3)
{
  size_t v6 = CFCalendarCreateWithIdentifier(0, kCFGregorianCalendar);
  CFCalendarSetTimeZone(v6, *a3);
  CFAbsoluteTime v15 = 0.0;
  CFAbsoluteTime startp = 0.0;
  if (!CFCalendarGetTimeRangeOfUnit(v6, 0x10uLL, (double)a1 + -978307200.0, &startp, 0)
    || !CFCalendarGetTimeRangeOfUnit(v6, 0x10uLL, (double)a2 + -978307200.0, &v15, 0))
  {
    CFRelease(v6);
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v14, "Failure in CFCalendarGetTimeRangeOfUnit");
    size_t v10 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  unsigned int v13 = 0;
  int ComponentDifference = CFCalendarGetComponentDifference(v6, startp, v15, 0, "d", &v13);
  CFRelease(v6);
  if (!ComponentDifference)
  {
    size_t v11 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v14, "Failure in CFCalendarGetComponentDifference");
    size_t v12 = (void *)sub_2F404((uint64_t)v11, &v14);
  }
  return v13;
}

void sub_6B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6BAC(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  long long v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_6D1C(_Unwind_Exception *a1)
{
}

void sub_6D3C(_Unwind_Exception *a1)
{
}

void sub_6D50(void *a1@<X8>)
{
  strcpy((char *)v2, "New Year");
  char v3 = 8;
  long long v4 = xmmword_20B5ED0;
  char v5 = 0;
  int v6 = 0;
  strcpy((char *)v7, "Australia Day");
  char v8 = 13;
  long long v9 = xmmword_20B5EE0;
  char v10 = 0;
  int v11 = 0;
  sub_7128();
  if (byte_2550347 < 0)
  {
    sub_4200(&v12, (void *)xmmword_2550330, *((unint64_t *)&xmmword_2550330 + 1));
  }
  else
  {
    long long v12 = xmmword_2550330;
    uint64_t v13 = unk_2550340;
  }
  long long v14 = xmmword_2550348;
  uint64_t v15 = qword_2550358;
  sub_724C();
  if (byte_2550377 < 0)
  {
    sub_4200(&v16, (void *)xmmword_2550360, *((unint64_t *)&xmmword_2550360 + 1));
  }
  else
  {
    long long v16 = xmmword_2550360;
    uint64_t v17 = unk_2550370;
  }
  long long v18 = xmmword_2550378;
  uint64_t v19 = qword_2550388;
  strcpy((char *)v20, "ANZAC Day");
  char v21 = 9;
  long long v22 = xmmword_20B5EF0;
  char v23 = 0;
  int v24 = 0;
  strcpy((char *)v25, "Christmas day");
  char v26 = 13;
  long long v27 = xmmword_20B5F00;
  char v28 = 0;
  int v29 = 0;
  strcpy((char *)__p, "Christmas day");
  char v31 = 13;
  long long v32 = xmmword_20B5F10;
  char v33 = 0;
  int v34 = 0;
  sub_A9A4(a1, (uint64_t)v2, 7uLL);
  if (v31 < 0)
  {
    operator delete(__p[0]);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v25[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v20[0]);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete((void *)v16);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_12:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)v12);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v2[0]);
    return;
  }
LABEL_20:
  operator delete(v7[0]);
  if (v3 < 0) {
    goto LABEL_21;
  }
}

void sub_7048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69 < 0)
  {
    operator delete(__p);
    if ((a60 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a51 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a60 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
LABEL_15:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_14:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_7128()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25502F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25502F8))
  {
    sub_5E5C(__p, "Good Friday");
    if (SHIBYTE(v1) < 0)
    {
      sub_4200(&xmmword_2550330, __p[0], (unint64_t)__p[1]);
      xmmword_2550348 = xmmword_20B5F20;
      LOBYTE(qword_2550358) = 0;
      HIDWORD(qword_2550358) = 0;
      if (SHIBYTE(v1) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      xmmword_2550330 = *(_OWORD *)__p;
      unk_2550340 = v1;
      xmmword_2550348 = xmmword_20B5F20;
      LOBYTE(qword_2550358) = 0;
      HIDWORD(qword_2550358) = 0;
    }
    __cxa_guard_release(&qword_25502F8);
  }
}

void sub_720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25502F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25502F8);
  _Unwind_Resume(a1);
}

void sub_724C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550300, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2550300))
  {
    sub_5E5C(__p, "Easter Monday");
    if (SHIBYTE(v1) < 0)
    {
      sub_4200(&xmmword_2550360, __p[0], (unint64_t)__p[1]);
      xmmword_2550378 = xmmword_20B5F30;
      LOBYTE(qword_2550388) = 0;
      HIDWORD(qword_2550388) = 0;
      if (SHIBYTE(v1) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      xmmword_2550360 = *(_OWORD *)__p;
      unk_2550370 = v1;
      xmmword_2550378 = xmmword_20B5F30;
      LOBYTE(qword_2550388) = 0;
      HIDWORD(qword_2550388) = 0;
    }
    __cxa_guard_release(&qword_2550300);
  }
}

void sub_7330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2550300);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2550300);
  _Unwind_Resume(a1);
}

void sub_7370(void *a1@<X8>)
{
  strcpy((char *)v1, "New Year");
  char v2 = 8;
  long long v3 = xmmword_20B5F40;
  char v4 = 0;
  int v5 = 0;
  strcpy((char *)v6, "Martin L King Day");
  HIBYTE(v6[2]) = 17;
  v6[3] = (void *)0x100000000;
  int v7 = 0;
  uint64_t v8 = 0x100000003;
  int v9 = 0;
  strcpy((char *)v10, "Presidents' Day");
  char v11 = 15;
  uint64_t v12 = 0x200000000;
  uint64_t v14 = 0x100000003;
  int v13 = 0;
  int v15 = 0;
  strcpy((char *)v16, "Memorial Day");
  char v17 = 12;
  uint64_t v18 = 0x500000000;
  uint64_t v20 = 0x1FFFFFFFFLL;
  int v19 = 0;
  int v21 = 0;
  strcpy((char *)v22, "Juneteenth");
  char v23 = 10;
  long long v24 = xmmword_20B5F50;
  char v25 = 0;
  int v26 = 0;
  strcpy((char *)v27, "Independence Day");
  HIBYTE(v27[2]) = 16;
  long long v28 = xmmword_20B5F60;
  char v29 = 0;
  int v30 = 0;
  strcpy((char *)v31, "Labor Day");
  char v32 = 9;
  uint64_t v33 = 0x900000000;
  int v34 = 0;
  uint64_t v35 = 0x100000001;
  int v36 = 0;
  strcpy((char *)v37, "Veterans Day");
  char v38 = 12;
  long long v39 = xmmword_20B5F70;
  char v40 = 0;
  int v41 = 0;
  strcpy((char *)v42, "Thanksgiving");
  char v43 = 12;
  uint64_t v44 = 0xB00000000;
  int v45 = 0;
  uint64_t v46 = 0x400000004;
  int v47 = 0;
  strcpy((char *)v48, "Day After Thanksgiving");
  HIBYTE(v48[2]) = 22;
  v48[3] = (void *)0xB00000000;
  int v49 = 0;
  uint64_t v50 = 0x400000004;
  int v51 = 1;
  strcpy((char *)__p, "Christmas day");
  char v53 = 13;
  long long v54 = xmmword_20B5F80;
  char v55 = 0;
  int v56 = 0;
  sub_A9A4(a1, (uint64_t)v1, 0xBuLL);
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v48[0]);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v42[0]);
  if ((v38 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v37[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v27[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v31[0]);
  if ((SHIBYTE(v27[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v27[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v22[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v16[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v6[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v10[0]);
  if ((SHIBYTE(v6[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete(v1[0]);
    return;
  }
LABEL_22:
  operator delete(v6[0]);
  if (v2 < 0) {
    goto LABEL_23;
  }
}

void sub_77C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a79 < 0)
  {
    operator delete(__p);
    if ((a77 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a75 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a77 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a76);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a74);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a72);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a64);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
LABEL_12:
  }
    _Unwind_Resume(a1);
LABEL_23:
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_78D4(void *a1@<X8>)
{
  strcpy((char *)v2, "New Year");
  char v3 = 8;
  long long v4 = xmmword_20B5ED0;
  char v5 = 0;
  int v6 = 0;
  sub_7128();
  if (byte_2550347 < 0)
  {
    sub_4200(&v7, (void *)xmmword_2550330, *((unint64_t *)&xmmword_2550330 + 1));
  }
  else
  {
    long long v7 = xmmword_2550330;
    uint64_t v8 = unk_2550340;
  }
  long long v9 = xmmword_2550348;
  uint64_t v10 = qword_2550358;
  sub_724C();
  if (byte_2550377 < 0)
  {
    sub_4200(&v11, (void *)xmmword_2550360, *((unint64_t *)&xmmword_2550360 + 1));
  }
  else
  {
    long long v11 = xmmword_2550360;
    uint64_t v12 = unk_2550370;
  }
  long long v13 = xmmword_2550378;
  uint64_t v14 = qword_2550388;
  int v15 = (void *)0x7961442079614DLL;
  char v16 = 7;
  uint64_t v17 = 0x500000000;
  uint64_t v19 = 0x100000001;
  int v18 = 0;
  int v20 = 0;
  strcpy((char *)v21, "Spring Bank Holiday");
  HIBYTE(v21[2]) = 19;
  v21[3] = (void *)0x500000000;
  uint64_t v23 = 0x1FFFFFFFFLL;
  int v22 = 0;
  int v24 = 0;
  strcpy((char *)v25, "Summer Bank Holiday");
  HIBYTE(v25[2]) = 19;
  v25[3] = (void *)0x800000000;
  int v26 = 0;
  uint64_t v27 = 0x1FFFFFFFFLL;
  int v28 = 0;
  strcpy((char *)v29, "Christmas day");
  char v30 = 13;
  long long v31 = xmmword_20B5F00;
  char v32 = 0;
  int v33 = 0;
  strcpy((char *)__p, "Christmas day");
  char v35 = 13;
  long long v36 = xmmword_20B5F10;
  char v37 = 0;
  int v38 = 0;
  sub_A9A4(a1, (uint64_t)v2, 8uLL);
  if (v35 < 0)
  {
    operator delete(__p[0]);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v25[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  else if ((v30 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v29[0]);
  if ((SHIBYTE(v25[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v21[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v25[0]);
  if ((SHIBYTE(v21[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v21[0]);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v15);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)v11);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete(v2[0]);
    return;
  }
LABEL_22:
  operator delete((void *)v7);
  if (v3 < 0) {
    goto LABEL_23;
  }
}

void sub_7C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0)
  {
    operator delete(__p);
    if ((a69 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a60 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a69 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a64);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a15 & 0x80000000) == 0) {
LABEL_18:
    }
      _Unwind_Resume(a1);
LABEL_17:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_16:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void sub_7D2C(void *a1@<X8>)
{
  strcpy((char *)v2, "New Year");
  char v3 = 8;
  long long v4 = xmmword_20B5ED0;
  char v5 = 0;
  int v6 = 0;
  sub_7128();
  if (byte_2550347 < 0)
  {
    sub_4200(&v7, (void *)xmmword_2550330, *((unint64_t *)&xmmword_2550330 + 1));
  }
  else
  {
    long long v7 = xmmword_2550330;
    uint64_t v8 = unk_2550340;
  }
  long long v9 = xmmword_2550348;
  uint64_t v10 = qword_2550358;
  strcpy((char *)v11, "Canada Day");
  char v12 = 10;
  long long v13 = xmmword_20B5F90;
  char v14 = 0;
  int v15 = 0;
  strcpy((char *)v16, "Labour Day");
  char v17 = 10;
  uint64_t v18 = 0x900000000;
  uint64_t v20 = 0x100000001;
  int v19 = 0;
  int v21 = 0;
  strcpy((char *)v22, "Thanksgiving");
  char v23 = 12;
  uint64_t v24 = 0xA00000000;
  uint64_t v26 = 0x100000002;
  int v25 = 0;
  int v27 = 0;
  strcpy((char *)__p, "Christmas day");
  char v29 = 13;
  long long v30 = xmmword_20B5FA0;
  char v31 = 0;
  int v32 = 0;
  sub_A9A4(a1, (uint64_t)v2, 6uLL);
  if (v29 < 0)
  {
    operator delete(__p[0]);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_6:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v22[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v16[0]);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v11[0]);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_16:
    operator delete(v2[0]);
    return;
  }
LABEL_15:
  operator delete((void *)v7);
  if (v3 < 0) {
    goto LABEL_16;
  }
}

void sub_7FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    if ((a51 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a42 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a51 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_8080(void *a1@<X8>)
{
  strcpy((char *)v2, "New Year");
  char v3 = 8;
  long long v4 = xmmword_20B5FB0;
  char v5 = 0;
  int v6 = 0;
  sub_7128();
  if (byte_2550347 < 0)
  {
    sub_4200(&v7, (void *)xmmword_2550330, *((unint64_t *)&xmmword_2550330 + 1));
  }
  else
  {
    long long v7 = xmmword_2550330;
    uint64_t v8 = unk_2550340;
  }
  long long v9 = xmmword_2550348;
  uint64_t v10 = qword_2550358;
  sub_724C();
  if (byte_2550377 < 0)
  {
    sub_4200(&v11, (void *)xmmword_2550360, *((unint64_t *)&xmmword_2550360 + 1));
  }
  else
  {
    long long v11 = xmmword_2550360;
    uint64_t v12 = unk_2550370;
  }
  long long v13 = xmmword_2550378;
  uint64_t v14 = qword_2550388;
  strcpy((char *)v15, "Ascension Day");
  char v16 = 13;
  long long v17 = xmmword_20B5FC0;
  char v18 = 0;
  int v19 = 0;
  strcpy((char *)v20, "Whit Monday");
  char v21 = 11;
  long long v22 = xmmword_20B5FD0;
  char v23 = 0;
  int v24 = 0;
  strcpy((char *)v25, "Labour Day");
  char v26 = 10;
  long long v27 = xmmword_20B5FE0;
  char v28 = 0;
  int v29 = 0;
  strcpy((char *)v30, "German Unity Day");
  HIBYTE(v30[2]) = 16;
  long long v31 = xmmword_20B5FF0;
  char v32 = 0;
  int v33 = 0;
  strcpy((char *)v34, "Christmas day");
  char v35 = 13;
  long long v36 = xmmword_20B6000;
  char v37 = 0;
  int v38 = 0;
  strcpy((char *)__p, "Christmas day");
  char v40 = 13;
  long long v41 = xmmword_20B6010;
  char v42 = 0;
  int v43 = 0;
  sub_A9A4(a1, (uint64_t)v2, 9uLL);
  if (v40 < 0)
  {
    operator delete(__p[0]);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v30[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v30[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v25[0]);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v20[0]);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v15[0]);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)v11);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_15:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v2[0]);
    return;
  }
LABEL_24:
  operator delete((void *)v7);
  if (v3 < 0) {
    goto LABEL_25;
  }
}

void sub_8428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a75 < 0)
  {
    operator delete(__p);
    if ((a73 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a69 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((a73 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a72);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a64);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a15 & 0x80000000) == 0) {
LABEL_20:
    }
      _Unwind_Resume(a1);
LABEL_19:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_18:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_20;
  }
  goto LABEL_19;
}

void sub_8538(void *a1@<X8>)
{
  strcpy((char *)v2, "New Year");
  char v3 = 8;
  long long v4 = xmmword_20B5FB0;
  char v5 = 0;
  int v6 = 0;
  sub_724C();
  if (byte_2550377 < 0)
  {
    sub_4200(&v7, (void *)xmmword_2550360, *((unint64_t *)&xmmword_2550360 + 1));
  }
  else
  {
    long long v7 = xmmword_2550360;
    uint64_t v8 = unk_2550370;
  }
  long long v9 = xmmword_2550378;
  uint64_t v10 = qword_2550388;
  strcpy((char *)v11, "Ascension Day");
  char v12 = 13;
  long long v13 = xmmword_20B5FC0;
  char v14 = 0;
  int v15 = 0;
  strcpy((char *)v16, "Whit Monday");
  char v17 = 11;
  long long v18 = xmmword_20B5FD0;
  char v19 = 0;
  int v20 = 0;
  strcpy((char *)v21, "Labour Day");
  char v22 = 10;
  long long v23 = xmmword_20B5FE0;
  char v24 = 0;
  int v25 = 0;
  strcpy((char *)v26, "Victory Day");
  char v27 = 11;
  long long v28 = xmmword_20B6020;
  char v29 = 0;
  int v30 = 0;
  strcpy((char *)v31, "Bastille Day");
  char v32 = 12;
  long long v33 = xmmword_20B6030;
  char v34 = 0;
  int v35 = 0;
  strcpy((char *)v36, "Assumption of Mary");
  HIBYTE(v36[2]) = 18;
  long long v37 = xmmword_20B6040;
  char v38 = 0;
  int v39 = 0;
  strcpy((char *)v40, "All Saint's Day");
  char v41 = 15;
  long long v42 = xmmword_20B6050;
  char v43 = 0;
  int v44 = 0;
  strcpy((char *)v45, "Armistice 1918");
  char v46 = 14;
  long long v47 = xmmword_20B6060;
  char v48 = 0;
  int v49 = 0;
  strcpy((char *)__p, "Christmas day");
  char v51 = 13;
  long long v52 = xmmword_20B6000;
  char v53 = 0;
  int v54 = 0;
  sub_A9A4(a1, (uint64_t)v2, 0xBuLL);
  if (v51 < 0)
  {
    operator delete(__p[0]);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_6:
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v45[0]);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v36[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v40[0]);
  if ((SHIBYTE(v36[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v36[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v31[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v26[0]);
  if ((v22 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v21[0]);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16[0]);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v11[0]);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_26:
    operator delete(v2[0]);
    return;
  }
LABEL_25:
  operator delete((void *)v7);
  if (v3 < 0) {
    goto LABEL_26;
  }
}

void sub_899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a79 < 0)
  {
    operator delete(__p);
    if ((a77 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a75 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a77 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a76);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a74);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a72);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a64);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0) {
LABEL_12:
  }
    _Unwind_Resume(a1);
LABEL_23:
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_8AC0(void *a1@<X8>)
{
  strcpy((char *)v4, "New Year");
  char v5 = 8;
  long long v6 = xmmword_20B5FB0;
  char v7 = 0;
  int v8 = 0;
  strcpy((char *)v9, "Coming of age");
  char v10 = 13;
  uint64_t v11 = 0x200000000;
  int v12 = 0;
  uint64_t v13 = 0x100000002;
  int v14 = 0;
  char v2 = (char *)operator new(0x19uLL);
  strcpy(v2, "National Foundation Day");
  sub_4200(&v15, v2, 0x17uLL);
  long long v17 = xmmword_20B6070;
  char v18 = 0;
  int v19 = 0;
  strcpy((char *)v20, "Emperor's birthday");
  HIBYTE(v20[2]) = 18;
  long long v21 = xmmword_20B6080;
  char v22 = 0;
  int v23 = 0;
  strcpy((char *)v24, "Showa Day");
  char v25 = 9;
  long long v26 = xmmword_20B6090;
  char v27 = 0;
  int v28 = 0;
  strcpy((char *)v29, "Constitution Memorial");
  HIBYTE(v29[2]) = 21;
  long long v30 = xmmword_20B60A0;
  char v31 = 0;
  int v32 = 0;
  strcpy((char *)v33, "Greenery Day");
  char v34 = 12;
  long long v35 = xmmword_20B60B0;
  char v36 = 0;
  int v37 = 0;
  strcpy((char *)v38, "Children's Day");
  char v39 = 14;
  long long v40 = xmmword_20B60C0;
  char v41 = 0;
  int v42 = 0;
  strcpy((char *)v43, "Marine Day");
  char v44 = 10;
  uint64_t v45 = 0x700000000;
  int v46 = 0;
  uint64_t v47 = 0x100000003;
  int v48 = 0;
  char v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "Respect for the Aged Day");
  sub_4200(&v49, v3, 0x18uLL);
  uint64_t v51 = 0x900000000;
  int v52 = 0;
  uint64_t v53 = 0x100000003;
  int v54 = 0;
  strcpy((char *)v55, "HealthAndSportsDay");
  HIBYTE(v55[2]) = 18;
  v55[3] = (void *)0xA00000000;
  int v56 = 0;
  uint64_t v57 = 0x100000002;
  int v58 = 0;
  strcpy((char *)v59, "Culture Day");
  char v60 = 11;
  long long v61 = xmmword_20B60D0;
  char v62 = 0;
  int v63 = 0;
  strcpy(__p, "Labor Thanksgiving Day");
  char v65 = 22;
  long long v66 = xmmword_20B60E0;
  char v67 = 0;
  int v68 = 0;
  sub_A9A4(a1, (uint64_t)v4, 0xDuLL);
  if (v65 < 0)
  {
    operator delete(*(void **)__p);
    if ((v60 & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v60 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v59[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v55[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v49);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v43[0]);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v38[0]);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v29[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v33[0]);
  if ((SHIBYTE(v29[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v29[0]);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v24[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v20[0]);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    operator delete(v9[0]);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_27:
    operator delete(v4[0]);
    goto LABEL_14;
  }
LABEL_25:
  operator delete(v15);
  if (v10 < 0) {
    goto LABEL_26;
  }
LABEL_13:
  if (v5 < 0) {
    goto LABEL_27;
  }
LABEL_14:
  operator delete(v3);
  operator delete(v2);
}

void sub_901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x25F]) < 0)
  {
    operator delete((void *)STACK[0x248]);
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a79 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x218]);
  if ((a79 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a77 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a78);
  if ((a77 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a75 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a76);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a74);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a72);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a64);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a55);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a46);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a37);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a28);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_27:
  operator delete(a19);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_15:
    operator delete(v80);
    operator delete(v79);
    _Unwind_Resume(a1);
  }
LABEL_14:
  operator delete(__p);
  goto LABEL_15;
}

void sub_91C4(void *a1@<X8>)
{
  strcpy((char *)v3, "New Year");
  char v4 = 8;
  long long v5 = xmmword_20B5FB0;
  char v6 = 0;
  int v7 = 0;
  strcpy((char *)v8, "Epiphany");
  char v9 = 8;
  long long v10 = xmmword_20B60F0;
  char v11 = 0;
  int v12 = 0;
  uint64_t v13 = (void *)0x726574736145;
  char v14 = 6;
  uint64_t v15 = 0xD00000000;
  int v18 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  sub_724C();
  if (byte_2550377 < 0)
  {
    sub_4200(&v19, (void *)xmmword_2550360, *((unint64_t *)&xmmword_2550360 + 1));
  }
  else
  {
    long long v19 = xmmword_2550360;
    uint64_t v20 = unk_2550370;
  }
  long long v21 = xmmword_2550378;
  uint64_t v22 = qword_2550388;
  strcpy((char *)v23, "Liberation Day");
  char v24 = 14;
  long long v25 = xmmword_20B5EF0;
  char v26 = 0;
  int v27 = 0;
  strcpy((char *)v28, "Labor Day");
  char v29 = 9;
  long long v30 = xmmword_20B5FE0;
  char v31 = 0;
  int v32 = 0;
  strcpy((char *)v33, "Republic Day");
  char v34 = 12;
  long long v35 = xmmword_20B6100;
  char v36 = 0;
  int v37 = 0;
  strcpy((char *)v38, "Feast of Assumption");
  HIBYTE(v38[2]) = 19;
  long long v39 = xmmword_20B6040;
  char v40 = 0;
  int v41 = 0;
  strcpy((char *)v42, "All Saints' Day");
  char v43 = 15;
  long long v44 = xmmword_20B6050;
  char v45 = 0;
  int v46 = 0;
  char v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "Feast of Immaculate Conception");
  sub_4200(&v47, v2, 0x1EuLL);
  long long v49 = xmmword_20B6110;
  char v50 = 0;
  int v51 = 0;
  strcpy((char *)v52, "Christmas day");
  char v53 = 13;
  long long v54 = xmmword_20B6000;
  char v55 = 0;
  int v56 = 0;
  strcpy((char *)__p, "Christmas day");
  char v58 = 13;
  long long v59 = xmmword_20B6010;
  char v60 = 0;
  int v61 = 0;
  sub_A9A4(a1, (uint64_t)v3, 0xCuLL);
  if (v58 < 0)
  {
    operator delete(__p[0]);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_6:
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v52[0]);
  if ((v48 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v47);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v38[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v42[0]);
  if ((SHIBYTE(v38[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v38[0]);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v33[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v28[0]);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v23[0]);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_13:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)v19);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_27:
    operator delete(v8[0]);
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_28:
    operator delete(v3[0]);
    goto LABEL_16;
  }
LABEL_26:
  operator delete(v13);
  if (v9 < 0) {
    goto LABEL_27;
  }
LABEL_15:
  if (v4 < 0) {
    goto LABEL_28;
  }
LABEL_16:
  operator delete(v2);
}

void sub_9664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x22F]) < 0)
  {
    operator delete((void *)STACK[0x218]);
    if ((a79 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a79 & 0x80000000) == 0)
  {
LABEL_3:
    if (a77 < 0) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  operator delete(a78);
  if (a77 < 0)
  {
LABEL_4:
    operator delete(a76);
    if ((a75 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  if ((a75 & 0x80000000) == 0)
  {
LABEL_5:
    if (a73 < 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a74);
  if (a73 < 0)
  {
LABEL_6:
    operator delete(a72);
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((a69 & 0x80000000) == 0)
  {
LABEL_7:
    if (a60 < 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a64);
  if (a60 < 0)
  {
LABEL_8:
    operator delete(a55);
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_9:
    if (a42 < 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a46);
  if (a42 < 0)
  {
LABEL_10:
    operator delete(a37);
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if (a24 < 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a28);
  if (a24 < 0)
  {
LABEL_12:
    operator delete(a19);
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((a15 & 0x80000000) == 0)
  {
LABEL_13:
    operator delete(v79);
    _Unwind_Resume(a1);
  }
LABEL_25:
  operator delete(a10);
  operator delete(v79);
  _Unwind_Resume(a1);
}

void sub_97A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  while (1)
  {
    if (*(v11 - 25) < 0) {
      operator delete(*((void **)v11 - 6));
    }
    v11 -= 48;
    if (v11 == &a10) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_97E8(void *a1@<X8>)
{
  strcpy((char *)v3, "New Year");
  char v4 = 8;
  long long v5 = xmmword_20B5FB0;
  char v6 = 0;
  int v7 = 0;
  strcpy((char *)v8, "Epiphany");
  char v9 = 8;
  long long v10 = xmmword_20B60F0;
  char v11 = 0;
  int v12 = 0;
  strcpy((char *)v13, "Maundy Thursday");
  char v14 = 15;
  long long v15 = xmmword_20B6120;
  char v16 = 0;
  int v17 = 0;
  sub_7128();
  if (byte_2550347 < 0)
  {
    sub_4200(&v18, (void *)xmmword_2550330, *((unint64_t *)&xmmword_2550330 + 1));
  }
  else
  {
    long long v18 = xmmword_2550330;
    uint64_t v19 = unk_2550340;
  }
  long long v20 = xmmword_2550348;
  uint64_t v21 = qword_2550358;
  strcpy((char *)v22, "Labor Day");
  char v23 = 9;
  long long v24 = xmmword_20B5FE0;
  char v25 = 0;
  int v26 = 0;
  strcpy((char *)v27, "Feast of Assumption");
  HIBYTE(v27[2]) = 19;
  long long v28 = xmmword_20B6040;
  char v29 = 0;
  int v30 = 0;
  strcpy((char *)v31, "Spain Day");
  char v32 = 9;
  long long v33 = xmmword_20B6130;
  char v34 = 0;
  int v35 = 0;
  strcpy((char *)v36, "All Saints' Day");
  char v37 = 15;
  long long v38 = xmmword_20B6050;
  char v39 = 0;
  int v40 = 0;
  strcpy((char *)v41, "Constitution Day");
  HIBYTE(v41[2]) = 16;
  long long v42 = xmmword_20B6140;
  char v43 = 0;
  int v44 = 0;
  char v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "Feast of Immaculate Conception");
  sub_4200(&v45, v2, 0x1EuLL);
  long long v47 = xmmword_20B6110;
  char v48 = 0;
  int v49 = 0;
  strcpy((char *)__p, "Christmas day");
  char v51 = 13;
  long long v52 = xmmword_20B6000;
  char v53 = 0;
  int v54 = 0;
  sub_A9A4(a1, (uint64_t)v3, 0xBuLL);
  if (v51 < 0)
  {
    operator delete(__p[0]);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v45);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v41[0]);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v36[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v27[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v31[0]);
  if ((SHIBYTE(v27[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v27[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v22[0]);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
LABEL_12:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)v18);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_25:
    operator delete(v8[0]);
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    operator delete(v3[0]);
    goto LABEL_15;
  }
LABEL_24:
  operator delete(v13[0]);
  if (v9 < 0) {
    goto LABEL_25;
  }
LABEL_14:
  if (v4 < 0) {
    goto LABEL_26;
  }
LABEL_15:
  operator delete(v2);
}

void sub_9C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a79 < 0)
  {
    operator delete(__p);
    if ((a77 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a77 & 0x80000000) == 0)
  {
LABEL_3:
    if (a75 < 0) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  operator delete(a76);
  if (a75 < 0)
  {
LABEL_4:
    operator delete(a74);
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  if ((a73 & 0x80000000) == 0)
  {
LABEL_5:
    if (a69 < 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a72);
  if (a69 < 0)
  {
LABEL_6:
    operator delete(a64);
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a60 & 0x80000000) == 0)
  {
LABEL_7:
    if (a51 < 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a55);
  if (a51 < 0)
  {
LABEL_8:
    operator delete(a46);
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  if ((a42 & 0x80000000) == 0)
  {
LABEL_9:
    if (a33 < 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a37);
  if (a33 < 0)
  {
LABEL_10:
    operator delete(a28);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  if ((a24 & 0x80000000) == 0)
  {
LABEL_11:
    if (a15 < 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a19);
  if (a15 < 0)
  {
LABEL_12:
    operator delete(a10);
    operator delete(v79);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(v79);
  _Unwind_Resume(a1);
}

void sub_9D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete(v10);
  while (1)
  {
    if (*(v11 - 25) < 0) {
      operator delete(*((void **)v11 - 6));
    }
    v11 -= 48;
    if (v11 == &a10) {
      _Unwind_Resume(a1);
    }
  }
}

void *sub_9DC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25502F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25502F0))
  {
    sub_6D50(v9);
    sub_A250(v10, "au", (uint64_t)v9);
    sub_7D2C(v8);
    sub_A250(v11, "ca", (uint64_t)v8);
    sub_8080(v7);
    sub_A250(v12, "de", (uint64_t)v7);
    sub_97E8(v6);
    sub_A250(v13, "es", (uint64_t)v6);
    sub_8538(v5);
    sub_A250(v14, "fr", (uint64_t)v5);
    sub_78D4(v4);
    sub_A250(v15, "gb", (uint64_t)v4);
    sub_91C4(v3);
    sub_A250(v16, "it", (uint64_t)v3);
    sub_8AC0(v2);
    sub_A250(v17, "jp", (uint64_t)v2);
    sub_7370(v1);
    sub_A250(v18, "us", (uint64_t)v1);
    sub_A328((uint64_t)&unk_2550308, (uint64_t)v10, 9);
    sub_A3A4((uint64_t)v18);
    sub_A3A4((uint64_t)v17);
    sub_A3A4((uint64_t)v16);
    sub_A3A4((uint64_t)v15);
    sub_A3A4((uint64_t)v14);
    sub_A3A4((uint64_t)v13);
    sub_A3A4((uint64_t)v12);
    sub_A3A4((uint64_t)v11);
    sub_A3A4((uint64_t)v10);
    sub_A43C(v1);
    sub_A43C(v2);
    sub_A43C(v3);
    sub_A43C(v4);
    sub_A43C(v5);
    sub_A43C(v6);
    sub_A43C(v7);
    sub_A43C(v8);
    sub_A43C(v9);
    __cxa_guard_release(&qword_25502F0);
  }
  return &unk_2550308;
}

void sub_A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_A3A4(v44);
  sub_A3A4(v43);
  sub_A3A4(v42);
  sub_A3A4(v41);
  sub_A3A4(v40);
  sub_A3A4(v39);
  sub_A3A4(v38);
  sub_A3A4(v37);
  sub_A3A4((uint64_t)&a37);
  sub_A43C(&a10);
  sub_A43C(&a13);
  sub_A43C(&a16);
  sub_A43C(&a19);
  sub_A43C(&a22);
  sub_A43C(&a25);
  sub_A43C(&a28);
  sub_A43C(&a31);
  sub_A43C(&a34);
  __cxa_guard_abort(&qword_25502F0);
  _Unwind_Resume(a1);
}

void sub_A170()
{
}

void sub_A17C()
{
}

void sub_A188()
{
}

void sub_A194()
{
}

void sub_A1A0()
{
}

void sub_A1AC()
{
}

void sub_A1B8()
{
}

void sub_A1C4()
{
}

void sub_A1D0()
{
}

void sub_A1DC()
{
}

void sub_A1E8()
{
}

void sub_A1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
}

void sub_A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
}

void sub_A238(_Unwind_Exception *a1)
{
}

void *sub_A250(void *a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    a1[1] = v7;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    int v8 = a1;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v8, __s, v7);
LABEL_9:
  *((unsigned char *)v8 + v7) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a3;
  a1[5] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return a1;
}

uint64_t sub_A328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_AB80(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_A390(_Unwind_Exception *a1)
{
  sub_B870(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A3A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    char v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      char v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_A43C(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0) {
          operator delete(*(v3 - 6));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_A4B0(_DWORD *a1)
{
  if (!sub_488C(a1)) {
    return 0;
  }
  uint64_t v2 = (CFTimeZoneRef *)sub_499C((uint64_t)a1);
  sub_26CFC(v2, (uint64_t)__p);
  if ((v24 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    unint64_t v4 = v24;
  }
  else {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    v25[1] = (void *)v4;
    int64_t v26 = v7 | 0x8000000000000000;
    v25[0] = v5;
    if (v4 >= 0x20 && (unint64_t)((char *)v5 - (char *)v3) >= 0x20)
    {
      int v8 = (void **)((char *)v3 + (v4 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v9 = (char *)v5 + (v4 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v10 = v5 + 1;
      char v11 = (long long *)(v3 + 2);
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v13 = *v11;
        *(v10 - 1) = *(v11 - 1);
        *uint64_t v10 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 32;
      }
      while (v12);
      if (v4 == (v4 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else
  {
    HIBYTE(v26) = v4;
    if (!v4)
    {
      LOBYTE(v25[0]) = 0;
      if ((v24 & 0x80) == 0) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    uint64_t v5 = v25;
  }
  int v8 = v3;
  uint64_t v9 = v5;
  do
  {
LABEL_22:
    char v14 = *(unsigned char *)v8;
    int v8 = (void **)((char *)v8 + 1);
    *v9++ = v14;
  }
  while (v8 != (void **)((char *)v3 + v4));
LABEL_23:
  *uint64_t v9 = 0;
  if (v26 >= 0) {
    long long v15 = v25;
  }
  else {
    long long v15 = (void **)v25[0];
  }
  do
  {
    *(unsigned char *)long long v15 = __tolower(*(char *)v3);
    long long v15 = (void **)((char *)v15 + 1);
    uint64_t v3 = (void **)((char *)v3 + 1);
    --v4;
  }
  while (v4);
  if ((v24 & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_28:
  operator delete(__p[0]);
LABEL_29:
  sub_9DC4();
  if (sub_B92C(qword_2550308, (uint64_t)v25))
  {
    char v16 = sub_B92C(qword_2550308, (uint64_t)v25);
    if (!v16) {
      sub_5AE8("unordered_map::at: key not found");
    }
    uint64_t v17 = v16[5];
    for (uint64_t i = v16[6]; v17 != i; v17 += 48)
    {
      int v19 = *(_DWORD *)(v17 + 28);
      if (v19 > 12 || v19 == (unsigned __int16)sub_4CDC((uint64_t)a1))
      {
        sub_54BC((uint64_t)a1, v21);
        sub_26A18((uint64_t)v22, v21);
        sub_4B6C((uint64_t)a1);
        sub_46FC((uint64_t)__p);
      }
    }
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  return 0;
}

void sub_A904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_A9A4(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v5 = 48 * a3;
    uint64_t v6 = (char *)operator new(48 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      char v11 = &v6[v7];
      unint64_t v12 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_4200(v11, *(void **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v8 = *v12;
        *((void *)v11 + 2) = *((void *)v12 + 2);
        *(_OWORD *)char v11 = v8;
      }
      uint64_t v9 = &v6[v7];
      long long v10 = *(_OWORD *)(a2 + v7 + 24);
      *((void *)v9 + 5) = *(void *)(a2 + v7 + 40);
      *(_OWORD *)(v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      v7 += 48;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 25) < 0) {
      operator delete(*(void **)(v10 + v11 - 48));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_AAE8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_AAE8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 25) < 0) {
            operator delete(*(v4 - 6));
          }
          v4 -= 6;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_AB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_AFA0(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      int v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  int v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  void *v27 = v39[0];
LABEL_89:
  char v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_AF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B088((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_AFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v8 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 7) = 0;
  CFIndex result = sub_B574(v9 + 40, *(void *)(a3 + 24), *(void *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_B050(_Unwind_Exception *a1)
{
  sub_B088(v1);
  _Unwind_Resume(a1);
}

void sub_B064(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_B088(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B088(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 48);
        uint64_t v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 25) < 0) {
              operator delete(*(void **)(v4 - 48));
            }
            v4 -= 48;
          }
          while (v4 != v3);
          uint64_t v5 = *(void **)(v2 + 40);
        }
        *(void *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_B128(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      uint64_t v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

char *sub_B574(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    unint64_t result = (char *)operator new(48 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t result = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          unint64_t result = (char *)sub_4200(result, *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)unint64_t result = *(_OWORD *)v11;
          *((void *)result + 2) = *(void *)(v11 + 16);
        }
        uint64_t v10 = &v8[v9];
        *(_OWORD *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + v9 + 24);
        *((void *)v10 + 5) = *(void *)(a2 + v9 + 40);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_B684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 25) < 0) {
      operator delete(*(void **)(v10 + v11 - 48));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_AAE8(&a9);
  _Unwind_Resume(a1);
}

void sub_B6C0(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_188D718();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          uint64_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

uint64_t sub_B870(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      if (v6)
      {
        uint64_t v7 = *((void *)v2 + 6);
        uint64_t v8 = (void *)*((void *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 25) < 0) {
              operator delete(*(void **)(v7 - 48));
            }
            v7 -= 48;
          }
          while (v7 != v6);
          uint64_t v8 = (void *)*((void *)v2 + 5);
        }
        *((void *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_B92C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

_DWORD *sub_BB5C(_DWORD *result, int a2, int a3)
{
  *unint64_t result = a2;
  result[1] = a3;
  return result;
}

_DWORD *sub_BB64(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  result[1] = a2;
  return result;
}

_DWORD *sub_BB6C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_BB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

BOOL sub_BB7C(_DWORD *a1)
{
  return (*a1 - 1) <= 0x7FFFFFFD && (a1[1] - 1) < 0x7FFFFFFE;
}

uint64_t sub_BBB4(uint64_t a1)
{
  return a1 + 4;
}

void *sub_BBBC(void *a1)
{
  uint64_t v1 = sub_188FC78(a1, (uint64_t)"min: ", 5);
  std::ostream::operator<<();
  uint64_t v2 = sub_188FC78(v1, (uint64_t)", max: ", 7);
  std::ostream::operator<<();
  return v2;
}

unint64_t sub_BC28(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  unint64_t v121 = 0x8000000080000000;
  if (*(void *)(a1 + 8) - *(void *)a1 >= 8uLL)
  {
    if (a3) {
      unint64_t v6 = a3 - 1;
    }
    else {
      unint64_t v6 = 0;
    }
    sub_C600(&v119, (int **)a1, a2, v6, a5);
    unint64_t v8 = v119;
    int8x8_t v7 = v120;
    int64_t v9 = (char *)v120 - (char *)v119;
    if ((unint64_t)((char *)v120 - (char *)v119) >= 0x10)
    {
      if (v119 == v120)
      {
        double v16 = 0.0;
      }
      else
      {
        double v10 = 0.0;
        uint64_t v11 = v119;
        if ((unint64_t)(v9 - 8) < 8) {
          goto LABEL_143;
        }
        unint64_t v12 = ((unint64_t)(v9 - 8) >> 3) + 1;
        uint64_t v11 = &v119[v12 & 0x3FFFFFFFFFFFFFFELL];
        uint64_t v13 = v119 + 1;
        uint64_t v14 = v12 & 0x3FFFFFFFFFFFFFFELL;
        do
        {
          double v10 = v10 + *(v13 - 1) + *v13;
          v13 += 2;
          v14 -= 2;
        }
        while (v14);
        if (v12 != (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_143:
          do
          {
            double v15 = *v11++;
            double v10 = v10 + v15;
          }
          while (v11 != v120);
        }
        double v16 = v10 / (double)(unint64_t)(v9 >> 3);
      }
      sub_CA04(&v119);
      if (erf(v16 * 0.1 / ((v17 + 0.0005) * 1.41421356)) <= 0.7) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = (int)v16 | ((unint64_t)(int)v16 << 32);
      }
      if (!(v18 | HIDWORD(v18)))
      {
        v135 = 0;
        v136 = 0;
        v137 = 0;
        if (v8 == v7)
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
        }
        else
        {
          if (v9 < 0) {
            sub_2E00();
          }
          uint64_t v19 = (char *)operator new(v9);
          uint64_t v20 = &v19[8 * (v9 >> 3)];
          v135 = v19;
          v137 = v20;
          memcpy(v19, v8, v9);
          v136 = v20;
        }
        std::__sort<std::__less<double,double> &,double *>();
        int v112 = a4;
        v134 = off_23FD660;
        v133 = off_23FD6B0;
        if ((unint64_t)(v20 - v19) < 9)
        {
          unint64_t v117 = 0;
          double v115 = -1.0;
          double v116 = -1.0;
          double v113 = -1.0;
          double v114 = -1.0;
        }
        else
        {
          unint64_t v117 = 0;
          double v116 = -1.0;
          unint64_t v21 = 1;
          double v118 = 1.79769313e308;
          uint64_t v22 = 8;
          double v113 = -1.0;
          double v114 = -1.0;
          double v115 = -1.0;
          do
          {
            v130 = 0;
            v131 = 0;
            v132 = 0;
            if (v21 == 0x8000000000000000) {
              sub_2E00();
            }
            uint64_t v23 = (char *)operator new(8 * v21);
            v130 = v23;
            v131 = v23;
            v132 = &v23[8 * v21];
            memmove(v23, v19, 8 * v21);
            uint64_t v24 = 0;
            v131 = &v23[8 * v21];
            double v25 = 0.0;
            do
            {
              double v25 = v25 + *(double *)&v23[v24];
              v24 += 8;
            }
            while (v22 != v24);
            sub_CA04((double **)&v130);
            double v27 = v26;
            uint64_t v28 = &v19[8 * v21];
            __p = 0;
            v128 = 0;
            v129 = 0;
            int64_t v29 = v20 - v28;
            if (v29)
            {
              if (v29 < 0) {
                sub_2E00();
              }
              unint64_t v30 = (char *)operator new(v29);
              __p = v30;
              v128 = v30;
              uint64_t v31 = 8 * (v29 >> 3);
              v129 = &v30[v31];
              memmove(v30, v28, v29);
              uint64_t v32 = 0;
              v128 = &v30[v31];
              double v33 = 0.0;
              do
              {
                double v33 = v33 + *(double *)&v30[v32];
                v32 += 8;
              }
              while (v31 != v32);
              double v34 = v33 / (double)(unint64_t)(v29 >> 3);
            }
            else
            {
              double v34 = 0.0;
            }
            sub_CA04((double **)&__p);
            unint64_t v35 = 0;
            double v122 = v25 / (double)v21;
            double v123 = v27;
            double v124 = v34;
            double v125 = v36;
            uint64_t v126 = 0;
            double v37 = -1.0;
            double v38 = 1.79769313e308;
            uint64_t v39 = 9280;
            uint64_t v40 = &qword_20B63C0;
            double v41 = -1.0;
            double v42 = -1.0;
            double v43 = -1.0;
            do
            {
              if (((double (*)(uint64_t (***)(), double *, uint64_t *))*v134)(&v134, &v122, v40 - 2) < 0.05&& ((double (*)(uint64_t (***)(), double *, uint64_t *))*v134)(&v134, &v124, v40) < 0.05)
              {
                double v44 = ((double (*)(uint64_t (***)(), double *, uint64_t *))*v133)(&v133, &v122, v40 - 2);
                double v45 = v44
                    + ((double (*)(uint64_t (***)(), double *, uint64_t *))*v133)(&v133, &v124, v40);
                if (v45 < v38)
                {
                  double v37 = *((double *)v40 - 2);
                  double v41 = *((double *)v40 - 1);
                  double v42 = *(double *)v40;
                  double v43 = *((double *)v40 + 1);
                  double v38 = v45;
                  unint64_t v35 = v40[2];
                }
              }
              v40 += 5;
              v39 -= 40;
            }
            while (v39);
            double v46 = fabs(v41 + 1.0);
            BOOL v47 = fabs(v37 + 1.0) < 2.22044605e-16 && v46 < 2.22044605e-16;
            double v48 = fabs(v42 + 1.0);
            double v49 = fabs(v43 + 1.0);
            if (!v47 || v48 >= 2.22044605e-16 || v49 >= 2.22044605e-16 || v35 != 0 || HIDWORD(v35) != 0)
            {
              double v54 = v123 + 0.0025;
              double v55 = (v41 + 0.0025) * (v41 + 0.0025) + v54 * v54 + 0.005;
              double v56 = sqrt(1.0- sqrt((v41 + 0.0025) * (v54 + v54) / v55)* exp((v122 + 0.0025 - (v37 + 0.0025)) * (v122 + 0.0025 - (v37 + 0.0025)) * -0.25 / v55));
              double v57 = v125 + 0.0025;
              double v58 = (v43 + 0.0025) * (v43 + 0.0025) + v57 * v57 + 0.005;
              double v59 = v56
                  + sqrt(1.0- sqrt((v43 + 0.0025) * (v57 + v57) / v58)* exp((v124 + 0.0025 - (v42 + 0.0025)) * (v124 + 0.0025 - (v42 + 0.0025)) * -0.25 / v58));
              if (v59 < v118)
              {
                double v115 = v42;
                double v116 = v37;
                double v113 = v41;
                double v114 = v43;
                unint64_t v117 = v35;
                double v118 = v59;
              }
            }
            if (__p) {
              operator delete(__p);
            }
            if (v130) {
              operator delete(v130);
            }
            ++v21;
            uint64_t v19 = v135;
            uint64_t v20 = v136;
            v22 += 8;
          }
          while (v21 < (v136 - v135) >> 3);
        }
        if (v19)
        {
          v136 = v19;
          operator delete(v19);
        }
        double v60 = fabs(v113 + 1.0);
        BOOL v61 = fabs(v116 + 1.0) < 2.22044605e-16 && v60 < 2.22044605e-16;
        double v62 = fabs(v115 + 1.0);
        double v63 = fabs(v114 + 1.0);
        unint64_t v18 = v117;
        if (v61 && v62 < 2.22044605e-16 && v63 < 2.22044605e-16 && v117 == 0 && HIDWORD(v117) == 0)
        {
          v70 = v119;
          if (v119 == v120)
          {
            unint64_t v18 = 0;
            double v83 = -1.0;
            double v86 = -1.0;
            double v87 = -1.0;
            double v88 = -1.0;
          }
          else
          {
            unsigned int v71 = v119 + 1;
            double v72 = *v119;
            double v73 = *v119;
            if (v119 + 1 != v120)
            {
              unsigned int v74 = v119 + 1;
              v75 = v119;
              v76 = v119 + 1;
              do
              {
                double v77 = *v76++;
                double v78 = v77;
                if (v77 < v73)
                {
                  double v73 = v78;
                  v75 = v74;
                }
                unsigned int v74 = v76;
              }
              while (v76 != v120);
              double v73 = *v75;
              v79 = v119;
              v80 = v119 + 1;
              do
              {
                double v81 = *v80++;
                double v82 = v81;
                if (v72 < v81)
                {
                  double v72 = v82;
                  v79 = v71;
                }
                unsigned int v71 = v80;
              }
              while (v80 != v120);
              double v72 = *v79;
            }
            unint64_t v18 = 0;
            double v83 = -1.0;
            unint64_t v84 = 0x1FFFFFFFFFFFFB78uLL;
            double v85 = 1.79769313e308;
            double v86 = -1.0;
            double v87 = -1.0;
            double v88 = -1.0;
            do
            {
              double v89 = vabdd_f64(*(double *)&qword_20B63B0[v84 + 1160], v73);
              if (v89 <= v73 * 0.2)
              {
                double v90 = vabdd_f64(*(double *)&qword_20B63B0[v84 + 1162], v72);
                double v91 = v89 + v90;
                if (v90 <= v72 * 0.2 && v91 < v85)
                {
                  double v87 = *(double *)&qword_20B63B0[v84 + 1161];
                  double v83 = *(double *)&qword_20B63B0[v84 + 1163];
                  unint64_t v18 = qword_20B63B0[v84 + 1164];
                  double v86 = *(double *)&qword_20B63B0[v84 + 1162];
                  double v88 = *(double *)&qword_20B63B0[v84 + 1160];
                  double v85 = v91;
                }
              }
              v84 += 5;
            }
            while (v84 * 8);
          }
          double v93 = fabs(v87 + 1.0);
          BOOL v94 = fabs(v88 + 1.0) < 2.22044605e-16 && v93 < 2.22044605e-16;
          double v95 = fabs(v86 + 1.0);
          double v96 = fabs(v83 + 1.0);
          if (v94 && v95 < 2.22044605e-16 && v96 < 2.22044605e-16 && v18 == 0 && HIDWORD(v18) == 0)
          {
            unint64_t v18 = 0;
            if (v119 != v120)
            {
              if (v112)
              {
                v101 = v119 + 1;
                double v102 = *v119;
                double v103 = *v119;
                if (v119 + 1 != v120)
                {
                  v104 = v119 + 1;
                  v105 = v119;
                  v106 = v119 + 1;
                  do
                  {
                    double v107 = *v106++;
                    double v108 = v107;
                    if (v107 < v103)
                    {
                      double v103 = v108;
                      v105 = v104;
                    }
                    v104 = v106;
                  }
                  while (v106 != v120);
                  double v103 = *v105;
                  v109 = v119 + 1;
                  do
                  {
                    double v110 = *v109++;
                    double v111 = v110;
                    if (v102 < v110)
                    {
                      double v102 = v111;
                      v70 = v101;
                    }
                    v101 = v109;
                  }
                  while (v109 != v120);
                  double v102 = *v70;
                }
                unint64_t v18 = llround(v103) | ((unint64_t)llround(v102) << 32);
              }
            }
          }
        }
      }
      unint64_t v68 = HIDWORD(v18);
      if (v18 | HIDWORD(v18))
      {
        sub_BB6C(&v121, 10 * v18);
        sub_BB74((uint64_t)&v121, 10 * v68);
      }
      unint64_t v8 = v119;
    }
    if (v8) {
      operator delete(v8);
    }
  }
  return v121;
}

void sub_C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (v33)
  {
    *(void *)(v34 - 168) = v33;
    operator delete(v33);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_C600(double **a1, int **a2, int a3, unint64_t a4, char a5)
{
  unint64_t v5 = *a2;
  uint64_t v6 = (char *)a2[1] - (char *)*a2;
  if ((unint64_t)v6 <= 0xB)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  char v7 = a5;
  unint64_t v8 = a4;
  int v9 = a3;
  double v10 = a2;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  double v15 = 0;
  int v16 = *v5;
  uint64_t v17 = v6 >> 2;
  uint64_t v18 = 1;
  int v46 = *v5;
  uint64_t v45 = v6 >> 2;
  while (1)
  {
    int v21 = (*v10)[v18];
    if (v21 - v16 > 7200)
    {
LABEL_48:
      BOOL v47 = v11;
LABEL_49:
      *a1 = v47;
      a1[1] = v14;
      a1[2] = v15;
      return;
    }
    int v22 = (*v10)[v18 - 1];
    int v23 = v21 - v22;
    if (v21 - v22 < 0) {
      break;
    }
    if (v21 == v22 && (v7 & 1) != 0)
    {
      if (++v18 == v17) {
        goto LABEL_48;
      }
    }
    else
    {
      if (10 * v23 > v9) {
        goto LABEL_48;
      }
      if (v14 >= v15)
      {
        uint64_t v24 = v14 - v13;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_2E00();
        }
        if (((char *)v15 - (char *)v13) >> 2 > v25) {
          unint64_t v25 = ((char *)v15 - (char *)v13) >> 2;
        }
        if ((unint64_t)((char *)v15 - (char *)v13) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          if (v26 >> 61) {
            sub_188D718();
          }
          unint64_t v27 = v26;
          uint64_t v28 = operator new(8 * v26);
          unint64_t v26 = v27;
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v11 = (double *)&v28[8 * v24];
        if (v23 <= 60) {
          int v29 = 60;
        }
        else {
          int v29 = v23;
        }
        *uint64_t v11 = (double)v29;
        uint64_t v20 = v11 + 1;
        if (v14 != v13)
        {
          unint64_t v30 = (char *)(v14 - 1) - (char *)v13;
          if (v30 < 0x168
            || &v28[(char *)v14 - (char *)v13 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[(char *)v14 - (char *)v13 - 8]
            || (double *)((char *)v14 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1
            || (unint64_t)((char *)v13 - v28) < 0x20)
          {
            uint64_t v31 = v14;
            char v7 = a5;
            unint64_t v8 = a4;
            double v10 = a2;
            int v9 = a3;
          }
          else
          {
            uint64_t v34 = (v30 >> 3) + 1;
            uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v31 = &v14[v35 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v11 = (double *)((char *)v11 - v35);
            double v36 = &v28[8 * v24 - 16];
            double v37 = v14 - 2;
            uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            char v7 = a5;
            do
            {
              long long v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *double v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            unint64_t v8 = a4;
            double v10 = a2;
            int v9 = a3;
            if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_34:
              double v15 = (double *)&v28[8 * v26];
              if (v13) {
                goto LABEL_35;
              }
              goto LABEL_36;
            }
          }
          do
          {
            uint64_t v32 = *((void *)v31-- - 1);
            *((void *)v11-- - 1) = v32;
          }
          while (v31 != v13);
          goto LABEL_34;
        }
        char v7 = a5;
        unint64_t v8 = a4;
        double v10 = a2;
        int v9 = a3;
        double v15 = (double *)&v28[8 * v26];
        if (v13)
        {
LABEL_35:
          double v33 = v15;
          operator delete(v13);
          double v15 = v33;
        }
LABEL_36:
        unint64_t v12 = v11;
        int v16 = v46;
        uint64_t v17 = v45;
        if (v8 <= v20 - v11) {
          goto LABEL_55;
        }
        goto LABEL_37;
      }
      if (v23 <= 60) {
        int v19 = 60;
      }
      else {
        int v19 = v21 - v22;
      }
      *uint64_t v14 = (double)v19;
      uint64_t v20 = v14 + 1;
      if (v8 <= v14 + 1 - v12)
      {
LABEL_55:
        BOOL v47 = v11;
        uint64_t v14 = v20;
        goto LABEL_49;
      }
LABEL_37:
      uint64_t v13 = v12;
      uint64_t v14 = v20;
      if (++v18 == v17) {
        goto LABEL_48;
      }
    }
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_C974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_C9A8(int **a1, int a2, char a3)
{
  sub_C600(v6, a1, a2, 2uLL, a3);
  uint64_t v3 = v6[0];
  unint64_t v4 = v6[1];
  if (v6[0]) {
    operator delete(v6[0]);
  }
  return (unint64_t)((char *)v4 - (char *)v3) > 8;
}

void sub_CA04(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  int64_t v3 = (char *)v1 - (char *)*a1;
  if ((unint64_t)v3 >= 0x10)
  {
    if (v2 == v1)
    {
      unint64_t v12 = 0;
      int v22 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
    }
    else
    {
      double v4 = 0.0;
      unint64_t v5 = *a1;
      if ((unint64_t)(v3 - 8) < 8) {
        goto LABEL_25;
      }
      unint64_t v6 = ((unint64_t)(v3 - 8) >> 3) + 1;
      unint64_t v5 = &v2[v6 & 0x3FFFFFFFFFFFFFFELL];
      char v7 = v2 + 1;
      uint64_t v8 = v6 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        double v4 = v4 + *(v7 - 1) + *v7;
        v7 += 2;
        v8 -= 2;
      }
      while (v8);
      if (v6 != (v6 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_25:
        do
        {
          double v9 = *v5++;
          double v4 = v4 + v9;
        }
        while (v5 != v1);
      }
      int v22 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      if (v3 < 0) {
        sub_2E00();
      }
      double v10 = (char *)operator new(v3);
      double v11 = v4 / (double)(unint64_t)(v3 >> 3);
      int v22 = (float64x2_t *)v10;
      int v23 = (double *)v10;
      uint64_t v24 = &v10[8 * (v3 >> 3)];
      do
      {
        double v25 = *v2 - v11;
        double v10 = sub_CC00((void **)&v22, v10, &v25) + 8;
        ++v2;
      }
      while (v2 != v1);
      unint64_t v12 = v22;
      if (v22 != (float64x2_t *)v23)
      {
        unint64_t v13 = (char *)v23 - (char *)v22 - 8;
        double v14 = 0.0;
        double v15 = (double *)v22;
        if (v13 < 0x18) {
          goto LABEL_26;
        }
        uint64_t v16 = (v13 >> 3) + 1;
        double v15 = &v22->f64[v16 & 0x3FFFFFFFFFFFFFFCLL];
        uint64_t v17 = v22 + 1;
        uint64_t v18 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v19 = vmulq_f64(v17[-1], v17[-1]);
          float64x2_t v20 = vmulq_f64(*v17, *v17);
          double v14 = v14 + v19.f64[0] + v19.f64[1] + v20.f64[0] + v20.f64[1];
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_26:
          do
          {
            double v21 = *v15++;
            double v14 = v14 + v21 * v21;
          }
          while (v15 != v23);
        }
      }
    }
    if (v12)
    {
      int v23 = (double *)v12;
      operator delete(v12);
    }
  }
}

void sub_CBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_CC00(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  double v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)double v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      float64x2_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      double v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        float64x2_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        float64x2_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          float64x2_t v19 = (void *)(v5 + v21);
          int v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *int v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)double v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    uint64_t v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    uint64_t v32 = &v53[8 * v52];
    if (v30)
    {
      double v54 = &v53[8 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      double v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  double v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    double v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    double v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    double v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    double v36 = &v31[-v41];
    double v42 = v31 - 16;
    double v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)double v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  BOOL v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    double v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_CF58(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_CF70(uint64_t a1, double *a2, double *a3)
{
  double v3 = a2[1] + 0.0025;
  double v4 = a3[1] + 0.0025;
  double v5 = *a2 + 0.0025 - (*a3 + 0.0025);
  return sqrt(1.0 - sqrt((v3 + v3) * v4 / (v3 * v3 + v4 * v4 + 0.005))
                  * exp(v5 * v5 * -0.25 / (v3 * v3 + v4 * v4 + 0.005)));
}

double sub_D004(uint64_t a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = *a2 - v3 + -0.0025;
  double v5 = *a2 + v3 + 0.0025;
  double v6 = a3[1];
  double v7 = *a3 - v6 + -0.0025;
  if (v4 >= v7) {
    double v7 = v4;
  }
  if (*a3 + v6 + 0.0025 >= v5) {
    double v8 = v5;
  }
  else {
    double v8 = *a3 + v6 + 0.0025;
  }
  double result = 1.0;
  if (v7 < v8) {
    return 1.0 - fabs((v8 - v7) / (v5 - v4));
  }
  return result;
}

void sub_D074()
{
}

void sub_D088()
{
}

void *sub_D09C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550390, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2550390))
  {
    uint64_t v1 = 0x3300000001;
    int v2 = 2;
    uint64_t v3 = 0x3400000002;
    int v4 = 2;
    uint64_t v5 = 0x3500000003;
    int v6 = 5;
    uint64_t v7 = 0x3600000004;
    int v8 = 5;
    uint64_t v9 = 0x3700000005;
    int v10 = 9;
    uint64_t v11 = 0x3800000006;
    int v12 = 1;
    uint64_t v13 = 0x3900000007;
    int v14 = 8;
    uint64_t v15 = 0x3A00000008;
    int v16 = 1;
    uint64_t v17 = 0x3B00000009;
    int v18 = 4;
    uint64_t v19 = 0x3C0000000ALL;
    int v20 = 4;
    uint64_t v21 = 0x3D0000000BLL;
    uint64_t v23 = 0x3E0000000CLL;
    int v22 = 4;
    int v24 = 4;
    uint64_t v25 = 0x3F0000000DLL;
    uint64_t v27 = 0x400000000ELL;
    int v26 = 1;
    int v28 = 1;
    uint64_t v29 = 0x4200000010;
    uint64_t v31 = 0x4300000011;
    int v30 = 6;
    int v32 = 4;
    uint64_t v33 = 0x4400000012;
    uint64_t v35 = 0x4500000013;
    int v34 = 4;
    int v36 = 4;
    uint64_t v37 = 0x4700000015;
    uint64_t v39 = 0x4800000016;
    int v38 = 2;
    int v40 = 2;
    uint64_t v41 = 0x4900000017;
    uint64_t v43 = 0x4A00000018;
    int v42 = 2;
    int v44 = 2;
    uint64_t v45 = 0x4B00000019;
    int v46 = 5;
    uint64_t v47 = 0x4C0000001ALL;
    int v48 = 7;
    uint64_t v49 = 0x4D0000001BLL;
    int v50 = 10;
    uint64_t v51 = 0x4E0000001CLL;
    int v52 = 7;
    uint64_t v53 = 0x500000001ELL;
    int v54 = 6;
    uint64_t v55 = 0x510000001FLL;
    int v56 = 6;
    uint64_t v57 = 0x5200000020;
    int v58 = 2;
    uint64_t v59 = 0x5300000021;
    int v60 = 2;
    uint64_t v61 = 0x5400000022;
    int v62 = 4;
    uint64_t v63 = 0x5500000023;
    int v64 = 5;
    uint64_t v65 = 0x5600000024;
    int v66 = 5;
    uint64_t v67 = 0x5700000025;
    int v68 = 5;
    uint64_t v69 = 0x5800000026;
    int v70 = 5;
    uint64_t v71 = 0x5900000027;
    int v72 = 5;
    uint64_t v73 = 0x5A00000028;
    int v74 = 4;
    uint64_t v75 = 0x5B00000029;
    int v76 = 5;
    uint64_t v77 = 0x5C0000002ALL;
    int v78 = 1;
    uint64_t v79 = 0x5D0000002BLL;
    int v80 = 5;
    uint64_t v81 = 0x5E0000002CLL;
    int v82 = 5;
    uint64_t v83 = 0x5F0000002DLL;
    int v84 = 2;
    uint64_t v85 = 0x600000002ELL;
    int v86 = 5;
    uint64_t v87 = 0x610000002FLL;
    int v88 = 1;
    uint64_t v89 = 0x6200000030;
    int v90 = 5;
    uint64_t v91 = 0x6300000031;
    int v92 = 4;
    sub_D460((uint64_t)&unk_25503C0, (int *)&v1, 46);
    __cxa_guard_release(&qword_2550390);
  }
  return &unk_25503C0;
}

void sub_D448(_Unwind_Exception *a1)
{
}

uint64_t sub_D460(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 12 * a3;
    do
    {
      sub_24794(a1, a2, (uint64_t)a2);
      a2 += 3;
      v5 -= 12;
    }
    while (v5);
  }
  return a1;
}

void sub_D4C8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    do
    {
      int v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_D4F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2550398))
  {
    sub_5E5C(v1, "BR");
    sub_5E5C(&v3, "NZ");
    sub_5E5C(&v5, "AU");
    sub_5E5C(&v7, "ZA");
    sub_5E5C(&v9, "AR");
    sub_5E5C(&v11, "CL");
    sub_5E5C(&__p, "PE");
    sub_D7D4((uint64_t)&unk_25503E8, (uint64_t)v1, 7);
    if (v14 < 0)
    {
      operator delete(__p);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }
    else if ((v12 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v11);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
LABEL_14:
    operator delete(v9);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_15:
    operator delete(v7);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
LABEL_16:
    operator delete(v5);
    if ((v4 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v2 & 0x80000000) == 0)
      {
LABEL_11:
        __cxa_guard_release(&qword_2550398);
        return &unk_25503E8;
      }
LABEL_18:
      operator delete(v1[0]);
      goto LABEL_11;
    }
LABEL_17:
    operator delete(v3);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
  return &unk_25503E8;
}

void sub_D6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if ((a44 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a38 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a44 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a39);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a14 & 0x80000000) == 0)
    {
LABEL_16:
      __cxa_guard_abort(&qword_2550398);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(a9);
    __cxa_guard_abort(&qword_2550398);
    _Unwind_Resume(a1);
  }
LABEL_14:
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_D7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  while (1)
  {
    if (*((char *)v9 - 1) < 0) {
      operator delete((void *)*(v9 - 3));
    }
    v9 -= 3;
    if (v9 == &a9) {
      JUMPOUT(0xD794);
    }
  }
}

uint64_t sub_D7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_24AFC(a1, a2, a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_D83C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D85C(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = sub_DAC8((void *)(a1 + 88), a4);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int **)(v7 + 120);
  if (v9 == *(unsigned int **)(v7 + 128))
  {
    uint64_t v15 = v7 + 8;
    return sub_DD08(v15, a2, a3, (_DWORD *)(a1 + 72));
  }
  else
  {
    uint64_t result = sub_D85C(a1, a2, a3, *v9);
    uint64_t v11 = *(void *)(v8 + 120);
    if ((unint64_t)(*(void *)(v8 + 128) - v11) >= 5)
    {
      unsigned int v12 = 2;
      unint64_t v13 = 1;
      while (1)
      {
        int v14 = *(_DWORD *)(v8 + 112);
        if (v14 == 42) {
          break;
        }
        if (v14 == 45)
        {
          if (result)
          {
            uint64_t result = sub_D85C(a1, a2, a3, *(unsigned int *)(v11 + 4 * v13)) ^ 1;
            goto LABEL_5;
          }
          goto LABEL_4;
        }
        if (v14 != 43)
        {
          sub_5E5C(v23, "unexpected operation");
          sub_E1B4((uint64_t)v21);
          if ((v24 & 0x80u) == 0) {
            int v16 = v23;
          }
          else {
            int v16 = (void *)v23[0];
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v17 = v24;
          }
          else {
            uint64_t v17 = v23[1];
          }
          int v18 = sub_188FC78(v22, (uint64_t)v16, v17);
          v20.__r_.__value_.__s.__data_[0] = *(_DWORD *)(v8 + 112);
          sub_188FC78(v18, (uint64_t)&v20, 1);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &v20);
        }
        if ((result & 1) == 0)
        {
LABEL_14:
          uint64_t result = sub_D85C(a1, a2, a3, *(unsigned int *)(v11 + 4 * v13));
          goto LABEL_5;
        }
        uint64_t result = 1;
LABEL_5:
        unint64_t v13 = v12;
        uint64_t v11 = *(void *)(v8 + 120);
        ++v12;
        if (v13 >= (*(void *)(v8 + 128) - v11) >> 2) {
          return result;
        }
      }
      if (result) {
        goto LABEL_14;
      }
LABEL_4:
      uint64_t result = 0;
      goto LABEL_5;
    }
  }
  return result;
}

void sub_DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1C02990((uint64_t)&a16);
      if (*(char *)(v18 - 49) < 0) {
        operator delete(*(void **)(v18 - 72));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_DAC8(void *a1, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    char v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v15;
    }
    else {
      char v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unsigned int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 144 * a2;
}

void sub_DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_DD08(uint64_t a1, unsigned int *a2, int a3, _DWORD *a4)
{
  BOOL v4 = 0;
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      return sub_F0E0(a1, a1 + 48, a2, a3);
    case 1:
      if (*(_DWORD *)(a1 + 88) == 51) {
        goto LABEL_8;
      }
      return 0;
    case 2:
      if (*(_DWORD *)(a1 + 88) != 52) {
        return 0;
      }
LABEL_8:
      int v26 = 0x7FFFFFFF;
      sub_42A0((uint64_t)v25);
      if (*a4 == -1 && a4[1] == -1)
      {
        sub_55E4(v10, (uint64_t)a2);
        sub_4E10(v25, 8u);
        sub_4E8C(v25, 0);
        int v26 = 324000;
        if (*(_DWORD *)(a1 + 40) != 1) {
          goto LABEL_31;
        }
      }
      else
      {
        sub_26290((uint64_t)a2, a4, &v26, v24);
        sub_55E4((uint64_t)v25, (uint64_t)v24);
        sub_4814((uint64_t)v24);
        if (*(_DWORD *)(a1 + 40) != 1) {
          goto LABEL_31;
        }
      }
      if (*(_DWORD *)(a1 + 88) == 51)
      {
        sub_44E8((uint64_t)v24, (uint64_t)v25);
        goto LABEL_32;
      }
LABEL_31:
      sub_566C((uint64_t)v25, &v26, (uint64_t)v24);
LABEL_32:
      if (*(_DWORD *)(a1 + 40) == 1 && *(_DWORD *)(a1 + 88) == 51) {
        int v13 = v26;
      }
      else {
        int v13 = 864000 - v26;
      }
      memset(v23, 0, 26);
      if (v13 < 0) {
        int v14 = 65236;
      }
      else {
        int v14 = 300;
      }
      long long v22 = 0uLL;
      memset(v20, 0, 26);
      long long v19 = 0uLL;
      unsigned __int8 v15 = sub_4E64((uint64_t)v24);
      unsigned __int16 v16 = sub_4EE0(v24);
      signed int v17 = v13 / 600
          + ((__int16)((55925 * (__int16)(v14 + v13 % 600)) >> 16) >> 9)
          + (((v14 + v13 % 600 + ((-9611 * (__int16)(v14 + v13 % 600)) >> 16)) & 0x8000) >> 15);
      HIDWORD(v22) = v15;
      v23[0] = v16;
      BYTE1(v23[6]) = 1;
      v21[0] = 0;
      HIDWORD(v19) = v17 / 60;
      v20[0] = v17 % 60;
      BYTE1(v20[6]) = 1;
      v18[0] = 1;
      BOOL v4 = sub_F0E0((uint64_t)v21, (uint64_t)v18, a2, a3);
      sub_4814((uint64_t)v24);
      sub_4814((uint64_t)v25);
      return v4;
    case 4:
      if (*(_DWORD *)(a1 + 88) != 54) {
        return 0;
      }
      return sub_A4B0(a2);
    case 5:
      if (*(_DWORD *)(a1 + 88) != 55) {
        return 0;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25503A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_25503A0))
      {
        byte_2550410 = 0;
        *(_OWORD *)&algn_2550411[3] = 0u;
        *(_OWORD *)&algn_2550420[4] = 0u;
        *(_OWORD *)&algn_2550420[14] = 0u;
        byte_2550440 = 0;
        *(_OWORD *)&algn_2550441[3] = 0u;
        unk_2550454 = 0u;
        unk_255045E = 0u;
        dword_2550470 = 0;
        qword_2550418 = 0x10000000CLL;
        qword_2550448 = 0x100000004;
        __cxa_guard_release(&qword_25503A0);
      }
      unsigned int v12 = &byte_2550410;
      goto LABEL_24;
    case 7:
      if (*(_DWORD *)(a1 + 88) == 57)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25503A8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_25503A8))
        {
          byte_2550478 = 0;
          *(_OWORD *)&algn_2550479[3] = 0u;
          unk_255048C = 0u;
          unk_2550496 = 0u;
          byte_25504A8 = 0;
          *(_OWORD *)&algn_25504A9[3] = 0u;
          unk_25504BC = 0u;
          unk_25504C6 = 0u;
          dword_25504D8 = 0;
          qword_2550480 = 0x100000006;
          qword_25504B0 = 0x100000009;
          __cxa_guard_release(&qword_25503A8);
        }
        unsigned int v12 = &byte_2550478;
LABEL_24:
        return sub_F328(a2, v12);
      }
      else
      {
        return 0;
      }
    default:
      return v4;
  }
}

void sub_E130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_4814((uint64_t)va);
  sub_4814(v14 - 104);
  _Unwind_Resume(a1);
}

void sub_E16C(_Unwind_Exception *a1)
{
  sub_4814(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_E180(_Unwind_Exception *a1)
{
  sub_4814(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_E1B4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_E464(_Unwind_Exception *a1)
{
}

void sub_E484(_Unwind_Exception *a1)
{
}

uint64_t sub_E498(void *a1, unsigned int a2)
{
  unint64_t v3 = a1[12];
  uint64_t v4 = a1 + 11;
  unint64_t v5 = (v3 - a1[11]) >> 4;
  if (v3 < a1[13])
  {
    *(void *)(v3 + 112) = 0;
    *(void *)(v3 + 120) = 0;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)unint64_t v3 = 0u;
    *(_DWORD *)(v3 + 112) = 32;
    *(void *)(v3 + 128) = 0;
    *(void *)(v3 + 136) = 0;
    uint64_t v6 = (954437177 * v5);
    a1[12] = v3 + 144;
    unsigned int v7 = a2;
    if (a2 == 0xFFFFFFFFLL) {
      return v6;
    }
LABEL_5:
    uint64_t v8 = *v4 + 144 * v7;
    uint64_t v9 = v8 + 120;
    uint64_t v11 = *(char **)(v8 + 128);
    unint64_t v10 = *(void *)(v8 + 136);
    if ((unint64_t)v11 < v10)
    {
      *(_DWORD *)uint64_t v11 = v6;
      uint64_t v12 = (uint64_t)(v11 + 4);
LABEL_26:
      *(void *)(v9 + 8) = v12;
      return v6;
    }
    int v13 = *(char **)v9;
    uint64_t v14 = (uint64_t)&v11[-*(void *)v9];
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      sub_2E00();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_188D718();
      }
      long long v19 = operator new(4 * v18);
      std::string::size_type v20 = &v19[4 * v15];
      uint64_t v21 = &v19[4 * v18];
      *std::string::size_type v20 = v6;
      uint64_t v12 = (uint64_t)(v20 + 1);
      int64_t v22 = v11 - v13;
      if (v11 == v13) {
        goto LABEL_24;
      }
    }
    else
    {
      long long v19 = 0;
      std::string::size_type v20 = (_DWORD *)(4 * v15);
      uint64_t v21 = 0;
      *(_DWORD *)(4 * v15) = v6;
      uint64_t v12 = 4 * v15 + 4;
      int64_t v22 = v11 - v13;
      if (v11 == v13)
      {
LABEL_24:
        *(void *)uint64_t v9 = v20;
        *(void *)(v9 + 8) = v12;
        *(void *)(v9 + 16) = v21;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_26;
      }
    }
    unint64_t v23 = v22 - 4;
    if (v23 < 0x2C) {
      goto LABEL_32;
    }
    if ((unint64_t)(v11 - v19 - v14) < 0x20) {
      goto LABEL_32;
    }
    uint64_t v24 = (v23 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    int v26 = &v11[-v25];
    std::string::size_type v20 = (_DWORD *)((char *)v20 - v25);
    uint64_t v27 = &v19[4 * v15 - 16];
    int v28 = v11 - 16;
    uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      _OWORD *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    uint64_t v11 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        int v31 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--std::string::size_type v20 = v31;
      }
      while (v11 != v13);
    }
    goto LABEL_24;
  }
  uint64_t v6 = (954437177 * v5);
  a1[12] = sub_24FB4((void **)a1 + 11);
  unsigned int v7 = a2;
  if (a2 != 0xFFFFFFFFLL) {
    goto LABEL_5;
  }
  return v6;
}

uint64_t sub_E6A8(uint64_t result, unsigned int a2, int a3)
{
  std::string::value_type v3 = a3;
  uint64_t v4 = *(void *)(result + 88) + 144 * a2;
  int v7 = *(_DWORD *)(v4 + 112);
  uint64_t v6 = (_DWORD *)(v4 + 112);
  int v5 = v7;
  if (v7 != 32 && v5 != a3)
  {
    sub_E1B4((uint64_t)v14);
    uint64_t v9 = sub_188FC78(v15, (uint64_t)"mismatched ops within brackets: ", 32);
    v13.__r_.__value_.__s.__data_[0] = *v6;
    unint64_t v10 = sub_188FC78(v9, (uint64_t)&v13, 1);
    uint64_t v11 = sub_188FC78(v10, (uint64_t)" and ", 5);
    v13.__r_.__value_.__s.__data_[0] = v3;
    sub_188FC78(v11, (uint64_t)&v13, 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v13);
  }
  _DWORD *v6 = a3;
  return result;
}

void sub_E7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1C02990((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_DWORD *sub_E814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  if ((*(unsigned char *)(a1 + 24) & 0x7F) == 0)
  {
    if (!*(unsigned char *)(a1 + 45)
      || ((int32x4_t v8 = *(int32x4_t *)(a1 + 4),
           v8.i32[2] = *(_DWORD *)(a1 + 12),
           v8.i32[3] = *(_DWORD *)(a1 + 32),
           (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtzq_s32(v8), (int8x16_t)xmmword_20B8880)) & 0xF) == 0)
        ? (BOOL v9 = *(_DWORD *)(a1 + 36) <= 0)
        : (BOOL v9 = 0),
          !v9))
    {
      sub_54BC(a2, __p);
      sub_26A18((uint64_t)v37, (const char *)__p);
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (*(_DWORD *)(a1 + 4))
        {
LABEL_83:
          if (*(_DWORD *)(a1 + 8)) {
            goto LABEL_89;
          }
LABEL_87:
          if (!*(_DWORD *)(a1 + 4)) {
            sub_4CDC(a2);
          }
LABEL_89:
          LODWORD(__p[0]) = 864000 * (-*(_DWORD *)(a1 + 12) & ~(-*(_DWORD *)(a1 + 12) >> 31))
                          + 36000 * (-*(_DWORD *)(a1 + 16) & ~(-*(_DWORD *)(a1 + 16) >> 31))
                          + 600 * (-*(_DWORD *)(a1 + 20) & ~(-*(_DWORD *)(a1 + 20) >> 31));
          sub_46FC((uint64_t)a4);
        }
      }
      else if (*(_DWORD *)(a1 + 4))
      {
        goto LABEL_83;
      }
      sub_4B6C(a2);
      if (*(_DWORD *)(a1 + 8)) {
        goto LABEL_89;
      }
      goto LABEL_87;
    }
  }
  unint64_t v10 = (_DWORD *)sub_44E8((uint64_t)a4, a2);
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a1 + 20);
  char v13 = v11 - 1;
  unsigned __int16 v14 = v12 + 60;
  if (v11 < 1)
  {
    unsigned __int16 v14 = 0;
    char v13 = *(_DWORD *)(a1 + 16);
  }
  if (v12 < 0) {
    unsigned __int16 v15 = v14;
  }
  else {
    unsigned __int16 v15 = *(_DWORD *)(a1 + 20);
  }
  if (v12 < 0) {
    LOBYTE(v11) = v13;
  }
  sub_4E10(v10, v11);
  sub_4E8C(a4, v15);
  if ((*(void *)(a1 + 24) & 0x7FLL) != 0) {
    unint64_t v16 = *(void *)(a1 + 24);
  }
  else {
    unint64_t v16 = 127;
  }
  if (!a3)
  {
    unsigned int v27 = sub_506C((uint64_t)a4);
    if (v27 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v27))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v28 = sub_506C((uint64_t)a4);
    if (v28 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v28))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v29 = sub_506C((uint64_t)a4);
    if (v29 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v29))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v30 = sub_506C((uint64_t)a4);
    if (v30 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v30))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v31 = sub_506C((uint64_t)a4);
    if (v31 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v31))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v32 = sub_506C((uint64_t)a4);
    if (v32 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v32))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v33 = sub_506C((uint64_t)a4);
    if (v33 > 6) {
      goto LABEL_90;
    }
    if ((v16 >> v33))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if (!result) {
        return result;
      }
    }
    sub_5500(a4, 1);
    unsigned int v34 = sub_506C((uint64_t)a4);
    if (v34 > 6) {
LABEL_90:
    }
      sub_5AE8("bitset test argument out of range");
    if ((v16 >> v34))
    {
      uint64_t result = (_DWORD *)sub_5554((uint64_t)a4, a2);
      if ((result & 1) == 0) {
        return result;
      }
    }
LABEL_78:
    uint64_t v26 = 1;
    return sub_5500(a4, v26);
  }
  if (a3 != 1)
  {
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    sub_5500(a4, 1);
    if (sub_506C((uint64_t)a4) > 6) {
      goto LABEL_90;
    }
    goto LABEL_78;
  }
  unsigned int v17 = sub_506C((uint64_t)a4);
  if (v17 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v17))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v19 = sub_506C((uint64_t)a4);
  if (v19 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v19))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v20 = sub_506C((uint64_t)a4);
  if (v20 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v20))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v21 = sub_506C((uint64_t)a4);
  if (v21 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v21))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v22 = sub_506C((uint64_t)a4);
  if (v22 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v22))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v23 = sub_506C((uint64_t)a4);
  if (v23 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v23))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v24 = sub_506C((uint64_t)a4);
  if (v24 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v24))
  {
    uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2);
    if (!result) {
      return result;
    }
  }
  sub_5500(a4, 0xFFFFFFFFLL);
  unsigned int v25 = sub_506C((uint64_t)a4);
  if (v25 > 6) {
    goto LABEL_90;
  }
  if ((v16 >> v25) & 1) == 0 || (uint64_t result = (_DWORD *)sub_559C((uint64_t)a4, a2), (result))
  {
    uint64_t v26 = 0xFFFFFFFFLL;
    return sub_5500(a4, v26);
  }
  return result;
}

void sub_F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4814(v5);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_F09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_F0E0(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  int v19 = a4;
  if (a4 == 0x7FFFFFFF) {
    sub_44E8((uint64_t)v18, (uint64_t)a3);
  }
  else {
    sub_566C((uint64_t)a3, &v19, (uint64_t)v18);
  }
  sub_E814(a1, (uint64_t)v18, 1, v17);
  int v7 = sub_4F44(v17);
  if (v7 <= (int)sub_4F44(v18))
  {
    *(int32x2_t *)v9.i8 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    v9.i32[2] = *(_DWORD *)(a2 + 12);
    v9.i32[3] = *(_DWORD *)(a2 + 32);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtzq_s32(v9))) & 1) != 0
      || *(int *)(a2 + 36) > 0
      || *(int *)(a2 + 40) > 0
      || *(unsigned char *)(a2 + 45)
      || (*(unsigned char *)(a2 + 24) & 0x7F) != 0)
    {
      int v10 = sub_4F44(a3);
      if (*(unsigned char *)a2)
      {
        sub_44E8((uint64_t)v16, (uint64_t)v17);
        if (*(_DWORD *)(a2 + 4))
        {
          int v11 = *(_DWORD *)(a2 + 4) + (unsigned __int16)sub_4B6C((uint64_t)v16);
          if (v11 >= 2037) {
            LOWORD(v11) = 2037;
          }
          sub_4B18(v16, v11);
        }
        uint64_t v12 = *(unsigned int *)(a2 + 8);
        if (v12) {
          sub_4D40(v16, v12);
        }
        int v15 = 36000 * (*(_DWORD *)(a2 + 16) + 24 * *(_DWORD *)(a2 + 12)) + 600 * *(_DWORD *)(a2 + 20);
        sub_560C(v16, &v15);
        int v13 = sub_4F44(v16);
      }
      else
      {
        sub_E814(a2, (uint64_t)v17, 0, v16);
        int v13 = sub_4F44(v16);
      }
      BOOL v8 = v10 < v13;
      sub_4814((uint64_t)v16);
    }
    else
    {
      BOOL v8 = *(_DWORD *)(a1 + 4) > 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_4814((uint64_t)v17);
  sub_4814((uint64_t)v18);
  return v8;
}

void sub_F2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_4814((uint64_t)va);
  sub_4814((uint64_t)va1);
  sub_4814(v2 - 88);
  _Unwind_Resume(a1);
}

void sub_F314(_Unwind_Exception *a1)
{
  sub_4814(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL sub_F328(unsigned int *a1, _OWORD *a2)
{
  uint64_t v4 = (CFTimeZoneRef *)sub_499C((uint64_t)a1);
  sub_26CFC(v4, (uint64_t)v13);
  sub_D4F4();
  if (sub_13A8C(qword_25503E8, (uint64_t)v13))
  {
    long long v5 = a2[1];
    v12[0] = *a2;
    v12[1] = v5;
    long long v6 = a2[3];
    v12[2] = a2[2];
    long long v7 = a2[4];
    long long v8 = a2[5];
    v11[0] = v6;
    v11[1] = v7;
    DWORD2(v12[0]) = (DWORD2(v12[0]) + 5) % 12 + 1;
    v11[2] = v8;
    DWORD2(v11[0]) = (DWORD2(v6) + 5) % 12 + 1;
    BOOL result = sub_F0E0((uint64_t)v12, (uint64_t)v11, a1, 0x7FFFFFFF);
  }
  else
  {
    BOOL result = sub_F0E0((uint64_t)a2, (uint64_t)(a2 + 3), a1, 0x7FFFFFFF);
  }
  BOOL v10 = result;
  if (v14 < 0)
  {
    operator delete(v13[0]);
    return v10;
  }
  return result;
}

void sub_F440(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F460(void *a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  int v15 = 0;
  *(_OWORD *)unint64_t v16 = 0u;
  *(_OWORD *)unsigned int v17 = 0u;
  *(_OWORD *)unint64_t v18 = 0u;
  uint64_t v19 = 0;
  int v20 = 1065353216;
  uint64_t v21 = -1;
  int v22 = 0x7FFFFFFF;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  __p = 0;
  if (sub_F5D0(a1, a2, (uint64_t)&v15) && !v15)
  {
    long long v7 = (char *)__p;
    if (__p == v24)
    {
      uint64_t v6 = 1;
      if (!__p) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v6 = sub_D85C((uint64_t)&v15, a3, a4, 0);
      long long v7 = (char *)__p;
      if (!__p) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    long long v7 = (char *)__p;
    if (!__p) {
      goto LABEL_11;
    }
  }
  long long v8 = v24;
  uint64_t v9 = v7;
  if (v24 != v7)
  {
    do
    {
      BOOL v10 = (void *)*((void *)v8 - 3);
      if (v10)
      {
        *((void *)v8 - 2) = v10;
        operator delete(v10);
      }
      v8 -= 144;
    }
    while (v8 != v7);
    uint64_t v9 = __p;
  }
  unsigned int v24 = v7;
  operator delete(v9);
LABEL_11:
  int v11 = v18[1];
  if (v18[1])
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      int v11 = v12;
    }
    while (v12);
  }
  int v13 = v17[1];
  v17[1] = 0;
  if (v13) {
    operator delete(v13);
  }
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(v16[0]);
  }
  return v6;
}

void sub_F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_F5D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25824(a1, a2);
  if (v6)
  {
    long long v7 = v6;
    long long v8 = v6 + 5;
    *(_DWORD *)a3 = *((_DWORD *)v6 + 10);
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)v6 + 2);
    if (v8 == (uint64_t *)a3)
    {
      uint64_t v10 = v7[14];
      *(_DWORD *)(a3 + 80) = *((_DWORD *)v7 + 30);
      *(void *)(a3 + 72) = v10;
    }
    else
    {
      *(_DWORD *)(a3 + 64) = *((_DWORD *)v7 + 26);
      sub_13CBC((void *)(a3 + 32), (uint64_t *)v7[11], 0);
      uint64_t v9 = v7[14];
      *(_DWORD *)(a3 + 80) = *((_DWORD *)v7 + 30);
      *(void *)(a3 + 72) = v9;
      sub_1436C((uint64_t *)(a3 + 88), (long long *)v7[16], (long long *)v7[17], 0x8E38E38E38E38E39 * ((v7[17] - v7[16]) >> 4));
    }
    return *(_DWORD *)a3 == 0;
  }
  else
  {
    uint64_t v87 = a3;
    if (*(char *)(a2 + 23) < 0) {
      sub_4200(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __dst = *(std::string *)a2;
    }
    *(_DWORD *)a3 = 0;
    uint64_t v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v14 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v17 = __dst.__r_.__value_.__l.__size_;
    }
    unint64_t v18 = memchr(p_dst, 9, v17);
    if (v18) {
      unint64_t v19 = (unint64_t)v18;
    }
    else {
      unint64_t v19 = (unint64_t)p_dst + v17;
    }
    int v20 = (std::string *)(v19 + 1);
    if (v19 - (void)p_dst != v17 && v20 != (std::string *)((char *)p_dst + v17))
    {
      int v22 = (char *)p_dst + v17 + ~v19;
      do
      {
        int v23 = v20->__r_.__value_.__s.__data_[0];
        if (v23 != 9) {
          *(unsigned char *)v19++ = v23;
        }
        int v20 = (std::string *)((char *)v20 + 1);
        --v22;
      }
      while (v22);
      uint64_t v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v14 = __dst.__r_.__value_.__r.__words[0];
      char v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v13 >= 0) {
      unsigned int v24 = (char *)&__dst + v12;
    }
    else {
      unsigned int v24 = (char *)(v14 + size);
    }
    if (v13 >= 0) {
      uint64_t v25 = &__dst;
    }
    else {
      uint64_t v25 = (std::string *)v14;
    }
    std::string::erase(&__dst, v19 - (void)v25, (std::string::size_type)&v24[-v19]);
    uint64_t v26 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v28 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v30 = &__dst;
    }
    else {
      unsigned int v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v31 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v31 = __dst.__r_.__value_.__l.__size_;
    }
    unsigned int v32 = memchr(v30, 13, v31);
    if (v32) {
      unint64_t v33 = (unint64_t)v32;
    }
    else {
      unint64_t v33 = (unint64_t)v30 + v31;
    }
    unsigned int v34 = (std::string *)(v33 + 1);
    if (v33 - (void)v30 != v31 && v34 != (std::string *)((char *)v30 + v31))
    {
      char v36 = (char *)v30 + v31 + ~v33;
      do
      {
        int v37 = v34->__r_.__value_.__s.__data_[0];
        if (v37 != 13) {
          *(unsigned char *)v33++ = v37;
        }
        unsigned int v34 = (std::string *)((char *)v34 + 1);
        --v36;
      }
      while (v36);
      uint64_t v26 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      std::string::size_type v29 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v28 = __dst.__r_.__value_.__r.__words[0];
      char v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v27 >= 0) {
      int v38 = (char *)&__dst + v26;
    }
    else {
      int v38 = (char *)(v28 + v29);
    }
    if (v27 >= 0) {
      uint64_t v39 = &__dst;
    }
    else {
      uint64_t v39 = (std::string *)v28;
    }
    std::string::erase(&__dst, v33 - (void)v39, (std::string::size_type)&v38[-v33]);
    uint64_t v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v43 = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v42 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v44 = &__dst;
    }
    else {
      int v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v45 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v45 = __dst.__r_.__value_.__l.__size_;
    }
    int v46 = memchr(v44, 10, v45);
    if (v46) {
      unint64_t v47 = (unint64_t)v46;
    }
    else {
      unint64_t v47 = (unint64_t)v44 + v45;
    }
    int v48 = (std::string *)(v47 + 1);
    if (v47 - (void)v44 != v45 && v48 != (std::string *)((char *)v44 + v45))
    {
      int v50 = (char *)v44 + v45 + ~v47;
      do
      {
        int v51 = v48->__r_.__value_.__s.__data_[0];
        if (v51 != 10) {
          *(unsigned char *)v47++ = v51;
        }
        int v48 = (std::string *)((char *)v48 + 1);
        --v50;
      }
      while (v50);
      uint64_t v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      std::string::size_type v43 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v42 = __dst.__r_.__value_.__r.__words[0];
      char v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v41 >= 0) {
      int v52 = (char *)&__dst + v40;
    }
    else {
      int v52 = (char *)(v42 + v43);
    }
    if (v41 >= 0) {
      uint64_t v53 = &__dst;
    }
    else {
      uint64_t v53 = (std::string *)v42;
    }
    std::string::erase(&__dst, v47 - (void)v53, (std::string::size_type)&v52[-v47]);
    uint64_t v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v55 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v57 = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v56 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v58 = &__dst;
    }
    else {
      int v58 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v59 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v59 = __dst.__r_.__value_.__l.__size_;
    }
    int v60 = memchr(v58, 32, v59);
    if (v60) {
      unint64_t v61 = (unint64_t)v60;
    }
    else {
      unint64_t v61 = (unint64_t)v58 + v59;
    }
    int v62 = (std::string *)(v61 + 1);
    if (v61 - (void)v58 != v59 && v62 != (std::string *)((char *)v58 + v59))
    {
      int v64 = (char *)v58 + v59 + ~v61;
      do
      {
        int v65 = v62->__r_.__value_.__s.__data_[0];
        if (v65 != 32) {
          *(unsigned char *)v61++ = v65;
        }
        int v62 = (std::string *)((char *)v62 + 1);
        --v64;
      }
      while (v64);
      uint64_t v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      std::string::size_type v57 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v56 = __dst.__r_.__value_.__r.__words[0];
      char v55 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v55 >= 0) {
      int v66 = (char *)&__dst + v54;
    }
    else {
      int v66 = (char *)(v56 + v57);
    }
    if (v55 >= 0) {
      uint64_t v67 = &__dst;
    }
    else {
      uint64_t v67 = (std::string *)v56;
    }
    std::string::erase(&__dst, v61 - (void)v67, (std::string::size_type)&v66[-v61]);
    uint64_t v68 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v69 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v71 = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v70 = __dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v72 = &__dst;
    }
    else {
      int v72 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v73 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v73 = __dst.__r_.__value_.__l.__size_;
    }
    int v74 = memchr(v72, 0, v73);
    if (v74) {
      unint64_t v75 = (unint64_t)v74;
    }
    else {
      unint64_t v75 = (unint64_t)v72 + v73;
    }
    int v76 = (unsigned char *)(v75 + 1);
    if (v75 - (void)v72 != v73 && v76 != (char *)v72 + v73)
    {
      int v78 = (char *)v72 + v73 + ~v75;
      do
      {
        if (*v76) {
          *(unsigned char *)v75++ = *v76;
        }
        ++v76;
        --v78;
      }
      while (v78);
      uint64_t v68 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      std::string::size_type v71 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v70 = __dst.__r_.__value_.__r.__words[0];
      char v69 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v69 >= 0) {
      uint64_t v79 = (char *)&__dst + v68;
    }
    else {
      uint64_t v79 = (char *)(v70 + v71);
    }
    if (v69 >= 0) {
      int v80 = &__dst;
    }
    else {
      int v80 = (std::string *)v70;
    }
    std::string::erase(&__dst, v75 - (void)v80, (std::string::size_type)&v79[-v75]);
    std::string::size_type v81 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v82 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v81 = __dst.__r_.__value_.__l.__size_;
    }
    BOOL v11 = v81 != 0;
    if (v81) {
      sub_149B4((uint64_t)&v88, "\\[\\(((t[0-9])+)\\)\\]", 0);
    }
    *(_DWORD *)uint64_t v87 = 1;
    if (v82 < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v88.__locale_ = (std::locale::__imp *)a2;
    uint64_t v83 = sub_25A54((uint64_t)a1, a2, (uint64_t)&unk_20F06E0, (long long **)&v88);
    *((_DWORD *)v83 + 10) = *(_DWORD *)v87;
    std::string::operator=((std::string *)v83 + 2, (const std::string *)(v87 + 8));
    if (v83 + 5 == (uint64_t *)v87)
    {
      uint64_t v85 = *(void *)(v87 + 72);
      *((_DWORD *)v83 + 30) = *(_DWORD *)(v87 + 80);
      v83[14] = v85;
    }
    else
    {
      *((_DWORD *)v83 + 26) = *(_DWORD *)(v87 + 64);
      sub_13CBC(v83 + 9, *(uint64_t **)(v87 + 48), 0);
      uint64_t v84 = *(void *)(v87 + 72);
      *((_DWORD *)v83 + 30) = *(_DWORD *)(v87 + 80);
      v83[14] = v84;
      sub_1436C(v83 + 16, *(long long **)(v87 + 88), *(long long **)(v87 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v87 + 96) - *(void *)(v87 + 88)) >> 4));
    }
  }
  return v11;
}

void sub_10FB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((v68 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v68)
  {
LABEL_6:
    *(void **)((char *)&a52
    a54 = v72;
    if (a68 < 0) {
      operator delete(a63);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    size_t v73 = a46;
    if (a46)
    {
      uint64_t v74 = a47;
      unint64_t v75 = a46;
      if ((void *)a47 != a46)
      {
        do
        {
          if (*(char *)(v74 - 1) < 0) {
            operator delete(*(void **)(v74 - 24));
          }
          v74 -= 24;
        }
        while ((void *)v74 != v73);
        unint64_t v75 = a46;
      }
      a47 = (uint64_t)v73;
      operator delete(v75);
    }
    int v76 = (std::__shared_weak_count *)a25;
    if (a25 && !atomic_fetch_add((atomic_ullong *volatile)(a25 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
    std::locale::~locale(&a19);
    if (a32 < 0) {
      operator delete(a27);
    }
    if (a2 == 1)
    {
      uint64_t v77 = __cxa_begin_catch(a1);
      (*(void (**)(void *))(*(void *)v77 + 16))(v77);
      *(_DWORD *)a13 = 4;
      int v78 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v77 + 16))(v77);
      std::string::assign((std::string *)(a13 + 8), v78);
      __cxa_end_catch();
      JUMPOUT(0x10410);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v69);
  goto LABEL_6;
}

uint64_t sub_119CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 96);
    uint64_t v4 = *(void **)(a1 + 88);
    if (v3 != v2)
    {
      do
      {
        long long v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 144;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    do
    {
      long long v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  long long v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v8) {
    operator delete(v8);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_11A8C(void *a1, uint64_t *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  do
  {
    uint64_t result = sub_F460(a1, v4, a3, a4);
    if (result) {
      break;
    }
    v4 += 24;
  }
  while (v4 != v5);
  return result;
}

uint64_t sub_11B0C(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  int v14 = 0;
  *(_OWORD *)int v15 = 0u;
  *(_OWORD *)unint64_t v16 = 0u;
  *(_OWORD *)size_t v17 = 0u;
  uint64_t v18 = 0;
  int v19 = 1065353216;
  uint64_t v20 = -1;
  int v21 = 0x7FFFFFFF;
  int v23 = 0;
  uint64_t v24 = 0;
  __p = 0;
  if (sub_F5D0(a1, a3, (uint64_t)&v14))
  {
    if (a4)
    {
      *(_DWORD *)a4 = v14;
      std::string::operator=((std::string *)(a4 + 8), (const std::string *)v15);
      if (&v14 == (int *)a4)
      {
        *(void *)(a4 + 72) = v20;
        *(_DWORD *)(a4 + 80) = v21;
        if (!v14) {
          goto LABEL_6;
        }
        goto LABEL_10;
      }
      *(_DWORD *)(a4 + 64) = v19;
      sub_13CBC((void *)(a4 + 32), (uint64_t *)v17[1], 0);
      *(void *)(a4 + 72) = v20;
      *(_DWORD *)(a4 + 80) = v21;
      sub_1436C((uint64_t *)(a4 + 88), (long long *)__p, v23, 0x8E38E38E38E38E39 * (((char *)v23 - (unsigned char *)__p) >> 4));
    }
    if (!v14)
    {
LABEL_6:
      uint64_t v6 = (long long *)__p;
      if (__p == v23)
      {
        a4 = 1;
        if (!__p) {
          goto LABEL_20;
        }
        goto LABEL_13;
      }
      a4 = sub_D85C((uint64_t)&v14, a2, 0x7FFFFFFFu, 0);
      goto LABEL_12;
    }
LABEL_10:
    a4 = 0;
    uint64_t v6 = (long long *)__p;
    if (!__p) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  if (a4)
  {
    *(_DWORD *)a4 = v14;
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)v15);
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v6 = (long long *)__p;
  if (!__p) {
    goto LABEL_20;
  }
LABEL_13:
  long long v7 = v23;
  long long v8 = v6;
  if (v23 != v6)
  {
    do
    {
      uint64_t v9 = (void *)*((void *)v7 - 3);
      if (v9)
      {
        *((void *)v7 - 2) = v9;
        operator delete(v9);
      }
      v7 -= 9;
    }
    while (v7 != v6);
    long long v8 = __p;
  }
  int v23 = v6;
  operator delete(v8);
LABEL_20:
  uint64_t v10 = v17[1];
  if (v17[1])
  {
    do
    {
      BOOL v11 = (void *)*v10;
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = v16[1];
  v16[1] = 0;
  if (v12) {
    operator delete(v12);
  }
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(v15[0]);
  }
  return a4;
}

void sub_11D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  sub_119CC((uint64_t)&a15);
  if (a2 == 1)
  {
    int v19 = __cxa_begin_catch(a1);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&a15);
      uint64_t v20 = sub_188FC78(&a15, (uint64_t)"exception when applying: ", 25);
      int v21 = *(char *)(v16 + 23);
      if (v21 >= 0) {
        uint64_t v22 = v16;
      }
      else {
        uint64_t v22 = *(void *)v16;
      }
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v23 = *(void *)(v16 + 8);
      }
      uint64_t v24 = sub_188FC78(v20, v22, v23);
      uint64_t v25 = sub_188FC78(v24, (uint64_t)" to ", 4);
      uint64_t v26 = sub_5230(v25, v15);
      char v27 = sub_188FC78(v26, (uint64_t)":", 1);
      std::string::size_type v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      size_t v29 = strlen(v28);
      sub_188FC78(v27, (uint64_t)v28, v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (a14 < 0) {
        operator delete(__p);
      }
      sub_111ECAC((uint64_t)&a15);
    }
    __cxa_end_catch();
    JUMPOUT(0x11CC8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_11E64(void *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 == v4) {
    return 0;
  }
  do
  {
    uint64_t result = sub_11B0C(a1, a2, v3, 0);
    if (result) {
      break;
    }
    v3 += 24;
  }
  while (v3 != v4);
  return result;
}

void sub_11ED4(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  int v14 = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)size_t v17 = 0u;
  uint64_t v18 = 0;
  int v19 = 1065353216;
  uint64_t v20 = -1;
  int v21 = 0x7FFFFFFF;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  __p = 0;
  sub_F5D0(a1, a2, (uint64_t)&v14);
  sub_25494((uint64_t)a4, (uint64_t)&v16[1]);
  if (a3 && a4[3])
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25503B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_25503B0))
    {
      byte_25504E0 = 0;
      *(_OWORD *)&algn_25504E1[3] = 0u;
      unk_25504F4 = 0u;
      unk_25504FE = 0u;
      byte_2550510 = 0;
      *(_OWORD *)&algn_2550511[3] = 0u;
      *(_OWORD *)&algn_2550520[4] = 0u;
      *(_OWORD *)&algn_2550520[14] = 0u;
      dword_2550540 = 0;
      qword_25504E8 = 0x100000005;
      qword_2550518 = 0x10000000ALL;
      __cxa_guard_release(&qword_25503B0);
    }
    if (!sub_F328(a3, &byte_25504E0))
    {
      int v13 = 8;
      sub_255D8(a4, &v13);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25503B8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_25503B8))
    {
      byte_2550548 = 0;
      *(_OWORD *)&algn_2550549[3] = 0u;
      unk_255055C = 0u;
      unk_2550566 = 0u;
      byte_2550578 = 0;
      *(_OWORD *)&algn_2550579[3] = 0u;
      unk_255058C = 0u;
      unk_2550596 = 0u;
      dword_25505A8 = 0;
      qword_2550550 = 0x10000000BLL;
      qword_2550580 = 0x100000005;
      __cxa_guard_release(&qword_25503B8);
    }
    if (!sub_F328(a3, &byte_2550548))
    {
      int v13 = 9;
      sub_255D8(a4, &v13);
    }
  }
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    long long v7 = v23;
    long long v8 = __p;
    if (v23 != __p)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 3);
        if (v9)
        {
          *((void *)v7 - 2) = v9;
          operator delete(v9);
        }
        v7 -= 144;
      }
      while (v7 != v6);
      long long v8 = __p;
    }
    uint64_t v23 = v6;
    operator delete(v8);
  }
  uint64_t v10 = v17[1];
  if (v17[1])
  {
    do
    {
      BOOL v11 = (void *)*v10;
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = v16[1];
  v16[1] = 0;
  if (v12) {
    operator delete(v12);
  }
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(v15[0]);
  }
}

void sub_12130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168(v3);
  sub_119CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_12154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_119CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_12168(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_121B4(void *a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      sub_11ED4(a1, v5, a3, &v13);
      uint64_t v9 = (int *)__p;
      if (__p)
      {
        do
        {
          sub_25170(a4, v9 + 4, v9 + 4);
          uint64_t v9 = *(int **)v9;
        }
        while (v9);
        uint64_t v10 = __p;
        if (__p)
        {
          do
          {
            BOOL v11 = (void *)*v10;
            operator delete(v10);
            uint64_t v10 = v11;
          }
          while (v11);
        }
      }
      uint64_t v12 = v13;
      int v13 = 0;
      if (v12) {
        operator delete(v12);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
}

void sub_12280(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_12294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_12168((uint64_t)va);
  sub_12168(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_122B0(uint64_t result)
{
  if (*(unsigned char *)result)
  {
    if (*(void *)(result + 32))
    {
      sub_E1B4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)"first/last cannot appear in durations", 37);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v11);
    }
    v11.__r_.__value_.__s.__data_[0] = 1;
    uint64_t result = sub_2601C((void *)(result + 24), 0, result + 24, 7u, &v11);
    if (result)
    {
      sub_E1B4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)"day_of_week cannot be set in duration", 37);
      uint64_t v1 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v1, &v11);
    }
  }
  else
  {
    if ((*(_DWORD *)(result + 20) - 60) <= 0xFFFFFF87)
    {
      sub_E1B4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)"minutes out of range ", 21);
      std::ostream::operator<<();
      long long v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v7, &v11);
    }
    int v2 = *(_DWORD *)(result + 32);
    int v3 = *(_DWORD *)(result + 36);
    if (v2) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      sub_E1B4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)"td f/l  cannot be both set in one term", 38);
      long long v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v8, &v11);
    }
    BOOL v5 = (v2 | v3) == 0;
    if (*(_DWORD *)(result + 12) && !v5)
    {
      sub_E1B4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)"day-of-month cannot be combined with first/last", 47);
      uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v9, &v11);
    }
    if (*(int *)(result + 8) >= 1)
    {
      v11.__r_.__value_.__s.__data_[0] = 1;
      uint64_t result = sub_2601C((void *)(result + 24), 0, result + 24, 7u, &v11);
      if (result)
      {
        sub_E1B4((uint64_t)v12);
        sub_188FC78(v13, (uint64_t)"td 't' component cannot be combined with month", 46);
        uint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::logic_error::logic_error(v10, &v11);
      }
    }
  }
  return result;
}

void sub_126DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v16)
  {
LABEL_6:
    sub_1C02990((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_127FC(uint64_t result, int a2, int a3)
{
  std::string::value_type v3 = a2;
  switch(a2)
  {
    case 'M':
      *(_DWORD *)(result + 8) = a3;
      break;
    case 'd':
      *(_DWORD *)(result + 12) = a3;
      break;
    case 'f':
      *(_DWORD *)(result + 32) = a3;
      break;
    case 'h':
      *(unsigned char *)(result + 45) = 1;
      *(_DWORD *)(result + 16) = a3;
      break;
    case 'l':
      *(_DWORD *)(result + 36) = a3;
      break;
    case 'm':
      *(unsigned char *)(result + 45) = 1;
      *(_DWORD *)(result + 20) = a3;
      break;
    case 's':
      return result;
    case 't':
      if ((a3 - 9) >= 0xFFFFFFF8)
      {
        if (a3 == 8) {
          *(unsigned char *)(result + 44) = 1;
        }
        else {
          *(void *)(result + 24) |= 1 << (a3 - 1);
        }
      }
      break;
    case 'y':
      *(_DWORD *)(result + 4) = a3;
      break;
    case 'z':
      *(_DWORD *)(result + 40) = a3;
      break;
    default:
      sub_E1B4((uint64_t)v7);
      BOOL v4 = sub_188FC78(v8, (uint64_t)"unexpected time unit ", 21);
      v6.__r_.__value_.__s.__data_[0] = v3;
      sub_188FC78(v4, (uint64_t)&v6, 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v6);
  }
  return result;
}

void sub_12A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1C02990((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_12B1C(void *a1, uint64_t a2)
{
  BOOL v4 = *(unsigned char *)a2 == 0;
  if (*(unsigned char *)a2) {
    BOOL v5 = "duration:";
  }
  else {
    BOOL v5 = "timepoint:";
  }
  if (v4) {
    size_t v6 = 10;
  }
  else {
    size_t v6 = 9;
  }
  unsigned __int8 v79 = v6;
  memcpy(__dst, v5, v6);
  *((unsigned char *)__dst + v6) = 0;
  if ((*(unsigned char *)(a2 + 24) & 0x7F) != 0)
  {
    sub_13368("t", (uint64_t *)(a2 + 24));
    if (*(unsigned char *)(a2 + 45))
    {
LABEL_9:
      sub_13520("h");
      goto LABEL_12;
    }
  }
  else
  {
    unsigned __int8 v77 = 0;
    LOBYTE(v76[0]) = 0;
    if (*(unsigned char *)(a2 + 45)) {
      goto LABEL_9;
    }
  }
  unsigned __int8 v75 = 0;
  LOBYTE(v74[0]) = 0;
LABEL_12:
  long long v7 = sub_188FC78(a1, (uint64_t)"(", 1);
  if ((v79 & 0x80u) == 0) {
    long long v8 = __dst;
  }
  else {
    long long v8 = (void **)__dst[0];
  }
  if ((v79 & 0x80u) == 0) {
    uint64_t v9 = v79;
  }
  else {
    uint64_t v9 = (uint64_t)__dst[1];
  }
  uint64_t v10 = sub_188FC78(v7, (uint64_t)v8, v9);
  char v71 = 1;
  LOWORD(v70) = 121;
  unsigned int v11 = *(_DWORD *)(a2 + 4);
  LODWORD(v68[0]) = v11;
  if (v11)
  {
    sub_138CC((uint64_t)&v70);
    unsigned int v11 = v73;
  }
  else
  {
    unsigned __int8 v73 = 0;
    LOBYTE(v72[0]) = 0;
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v72;
  }
  else {
    uint64_t v12 = (void **)v72[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = (uint64_t)v72[1];
  }
  int v14 = sub_188FC78(v10, (uint64_t)v12, v13);
  char v67 = 1;
  LOWORD(v66) = 77;
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  LODWORD(v64[0]) = v15;
  if (v15)
  {
    sub_138CC((uint64_t)&v66);
    unsigned int v15 = v69;
  }
  else
  {
    unsigned __int8 v69 = 0;
    LOBYTE(v68[0]) = 0;
  }
  if ((v15 & 0x80u) == 0) {
    int v16 = v68;
  }
  else {
    int v16 = (void **)v68[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = (uint64_t)v68[1];
  }
  uint64_t v18 = sub_188FC78(v14, (uint64_t)v16, v17);
  char v63 = 1;
  LOWORD(v62) = 100;
  unsigned int v19 = *(_DWORD *)(a2 + 12);
  LODWORD(v60[0]) = v19;
  if (v19)
  {
    sub_138CC((uint64_t)&v62);
    unsigned int v19 = v65;
  }
  else
  {
    unsigned __int8 v65 = 0;
    LOBYTE(v64[0]) = 0;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v64;
  }
  else {
    uint64_t v20 = (void **)v64[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = (uint64_t)v64[1];
  }
  uint64_t v22 = sub_188FC78(v18, (uint64_t)v20, v21);
  char v59 = 1;
  LOWORD(v58) = 108;
  unsigned int v23 = *(_DWORD *)(a2 + 36);
  LODWORD(v56[0]) = v23;
  if (v23)
  {
    sub_138CC((uint64_t)&v58);
    unsigned int v23 = v61;
  }
  else
  {
    unsigned __int8 v61 = 0;
    LOBYTE(v60[0]) = 0;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = v60;
  }
  else {
    uint64_t v24 = (void **)v60[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = (uint64_t)v60[1];
  }
  uint64_t v26 = sub_188FC78(v22, (uint64_t)v24, v25);
  char v55 = 1;
  LOWORD(v54) = 102;
  unsigned int v27 = *(_DWORD *)(a2 + 32);
  LODWORD(v52[0]) = v27;
  if (v27)
  {
    sub_138CC((uint64_t)&v54);
    unsigned int v27 = v57;
  }
  else
  {
    unsigned __int8 v57 = 0;
    LOBYTE(v56[0]) = 0;
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v28 = v56;
  }
  else {
    std::string::size_type v28 = (void **)v56[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = (uint64_t)v56[1];
  }
  unsigned int v30 = sub_188FC78(v26, (uint64_t)v28, v29);
  char v51 = 1;
  LOWORD(v50) = 122;
  unsigned int v31 = *(_DWORD *)(a2 + 40);
  LODWORD(__p[0]) = v31;
  if (v31)
  {
    sub_138CC((uint64_t)&v50);
    unsigned int v31 = v53;
  }
  else
  {
    unsigned __int8 v53 = 0;
    LOBYTE(v52[0]) = 0;
  }
  if ((v31 & 0x80u) == 0) {
    unsigned int v32 = v52;
  }
  else {
    unsigned int v32 = (void **)v52[0];
  }
  if ((v31 & 0x80u) == 0) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = (uint64_t)v52[1];
  }
  unsigned int v34 = sub_188FC78(v30, (uint64_t)v32, v33);
  if ((v77 & 0x80u) == 0) {
    uint64_t v35 = v76;
  }
  else {
    uint64_t v35 = (void **)v76[0];
  }
  if ((v77 & 0x80u) == 0) {
    uint64_t v36 = v77;
  }
  else {
    uint64_t v36 = (uint64_t)v76[1];
  }
  int v37 = sub_188FC78(v34, (uint64_t)v35, v36);
  if ((v75 & 0x80u) == 0) {
    int v38 = v74;
  }
  else {
    int v38 = (void **)v74[0];
  }
  if ((v75 & 0x80u) == 0) {
    uint64_t v39 = v75;
  }
  else {
    uint64_t v39 = (uint64_t)v74[1];
  }
  uint64_t v40 = sub_188FC78(v37, (uint64_t)v38, v39);
  char v47 = 1;
  LOWORD(v46) = 109;
  unsigned int v41 = *(_DWORD *)(a2 + 20);
  unsigned int v80 = v41;
  if (v41)
  {
    sub_138CC((uint64_t)&v46);
    unsigned int v41 = v49;
  }
  else
  {
    unsigned __int8 v49 = 0;
    LOBYTE(__p[0]) = 0;
  }
  if ((v41 & 0x80u) == 0) {
    std::string::size_type v42 = __p;
  }
  else {
    std::string::size_type v42 = (void **)__p[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v43 = v41;
  }
  else {
    uint64_t v43 = (uint64_t)__p[1];
  }
  int v44 = sub_188FC78(v40, (uint64_t)v42, v43);
  sub_188FC78(v44, (uint64_t)")", 1);
  if ((char)v49 < 0)
  {
    operator delete(__p[0]);
    if ((v47 & 0x80000000) == 0)
    {
LABEL_95:
      if (((char)v53 & 0x80000000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_113;
    }
  }
  else if ((v47 & 0x80000000) == 0)
  {
    goto LABEL_95;
  }
  operator delete(v46);
  if (((char)v53 & 0x80000000) == 0)
  {
LABEL_96:
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_114;
  }
LABEL_113:
  operator delete(v52[0]);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_97:
    if (((char)v57 & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_115;
  }
LABEL_114:
  operator delete(v50);
  if (((char)v57 & 0x80000000) == 0)
  {
LABEL_98:
    if ((v55 & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v56[0]);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_99:
    if (((char)v61 & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v54);
  if (((char)v61 & 0x80000000) == 0)
  {
LABEL_100:
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v60[0]);
  if ((v59 & 0x80000000) == 0)
  {
LABEL_101:
    if (((char)v65 & 0x80000000) == 0) {
      goto LABEL_102;
    }
    goto LABEL_119;
  }
LABEL_118:
  operator delete(v58);
  if (((char)v65 & 0x80000000) == 0)
  {
LABEL_102:
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v64[0]);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_103:
    if (((char)v69 & 0x80000000) == 0) {
      goto LABEL_104;
    }
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v62);
  if (((char)v69 & 0x80000000) == 0)
  {
LABEL_104:
    if ((v67 & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v68[0]);
  if ((v67 & 0x80000000) == 0)
  {
LABEL_105:
    if (((char)v73 & 0x80000000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v66);
  if (((char)v73 & 0x80000000) == 0)
  {
LABEL_106:
    if ((v71 & 0x80000000) == 0) {
      goto LABEL_107;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v72[0]);
  if ((v71 & 0x80000000) == 0)
  {
LABEL_107:
    if (((char)v75 & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_125;
  }
LABEL_124:
  operator delete(v70);
  if (((char)v75 & 0x80000000) == 0)
  {
LABEL_108:
    if (((char)v77 & 0x80000000) == 0) {
      goto LABEL_109;
    }
LABEL_126:
    operator delete(v76[0]);
    if (((char)v79 & 0x80000000) == 0) {
      return a1;
    }
LABEL_127:
    operator delete(__dst[0]);
    return a1;
  }
LABEL_125:
  operator delete(v74[0]);
  if ((char)v77 < 0) {
    goto LABEL_126;
  }
LABEL_109:
  if ((char)v79 < 0) {
    goto LABEL_127;
  }
  return a1;
}

void sub_130C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a23 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a41 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a18);
  if ((a41 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a35 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a36);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a53 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a30);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a48);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a65 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a42);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a60);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v65 - 177) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a54);
  if ((*(char *)(v65 - 177) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v65 - 201) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(*(void **)(v65 - 200));
  if ((*(char *)(v65 - 201) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(v65 - 129) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(*(void **)(v65 - 224));
  if ((*(char *)(v65 - 129) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*(char *)(v65 - 153) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(*(void **)(v65 - 152));
  if ((*(char *)(v65 - 153) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(v65 - 105) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)(v65 - 176));
  if ((*(char *)(v65 - 105) & 0x80000000) == 0)
  {
LABEL_15:
    if ((*(char *)(v65 - 81) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(*(void **)(v65 - 128));
  if ((*(char *)(v65 - 81) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(v65 - 57) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(*(void **)(v65 - 104));
  if ((*(char *)(v65 - 57) & 0x80000000) == 0) {
LABEL_17:
  }
    _Unwind_Resume(a1);
LABEL_33:
  operator delete(*(void **)(v65 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_13368(const char *a1, uint64_t *a2)
{
  sub_E1B4((uint64_t)v7);
  size_t v4 = strlen(a1);
  sub_188FC78(v8, (uint64_t)a1, v4);
  sub_136D8(v8, a2);
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_134F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1350C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_13520(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_136B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_136C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_136D8(void *a1, uint64_t *a2)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  size_t v4 = std::locale::use_facet(&v12, &std::ctype<char>::id);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 48);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  size_t v6 = std::locale::use_facet(&v11, &std::ctype<char>::id);
  char v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 49);
  char v14 = 7;
  LODWORD(__p) = 16843009 * v5;
  *(_DWORD *)((char *)&__p + 3) = __p;
  HIBYTE(__p) = 0;
  uint64_t v8 = *a2;
  if (*a2)
  {
    BYTE6(__p) = v7;
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_3;
  }
  BYTE5(__p) = v7;
  if ((v8 & 4) == 0)
  {
LABEL_4:
    if ((v8 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  BYTE4(__p) = v7;
  if ((v8 & 8) == 0)
  {
LABEL_5:
    if ((v8 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  BYTE3(__p) = v7;
  if ((v8 & 0x10) == 0)
  {
LABEL_6:
    if ((v8 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  BYTE2(__p) = v7;
  if ((v8 & 0x20) == 0)
  {
LABEL_7:
    if ((v8 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  BYTE1(__p) = v7;
  if ((v8 & 0x40) != 0) {
LABEL_8:
  }
    LOBYTE(__p) = v7;
LABEL_9:
  char v9 = sub_188FC78(a1, (uint64_t)&__p, 7);
  if (v14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&v11);
  std::locale::~locale(&v12);
  return v9;
}

void sub_13870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a10);
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void sub_138B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
}

uint64_t sub_138CC(uint64_t a1)
{
  sub_E1B4((uint64_t)v7);
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  sub_188FC78(v8, v3, v4);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_13A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_13A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_13A8C(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  std::locale v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_13CBC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      uint8x8_t v9 = *(int **)v8;
      sub_13DE4(a1, v8);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      std::locale v12 = *(int **)v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x18uLL);
      *(void *)unint64_t v10 = 0;
      uint64_t v11 = *((int *)a2 + 4);
      v10[4] = v11;
      *((void *)v10 + 1) = v11;
      sub_13DE4(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_13D9C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_13DBC(_Unwind_Exception *a1)
{
}

void sub_13DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_13DE4(void *a1, int *a2)
{
  unint64_t v5 = a2 + 4;
  unint64_t v4 = a2[4];
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_13F0C((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v6;
  uint64_t *v6 = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_13F0C(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_36;
  }
  BOOL v16 = 1;
  if (v6 >= 3) {
    BOOL v16 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v6);
  unint64_t v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_22;
  }
  if (prime < v6)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          size_t prime = v20;
        }
        if (prime >= v6) {
          goto LABEL_35;
        }
LABEL_22:
        sub_14198(a1, prime);
        goto LABEL_35;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      size_t prime = v23;
    }
    if (prime < v6) {
      goto LABEL_22;
    }
  }
LABEL_35:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    unint64_t v10 = *(uint64_t **)(*(void *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      char v11 = 0;
      int v12 = *a3;
      while (1)
      {
        uint64_t result = v10;
        unint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        uint64_t v15 = v10[1];
        if ((v15 & v9) != (v9 & a2)) {
          break;
        }
        if (v15 == a2)
        {
          char v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if (v13) {
            return result;
          }
        }
        else if (v11)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  unint64_t v24 = a2;
  if (v6 <= a2) {
    unint64_t v24 = a2 % v6;
  }
  char v25 = *(uint64_t **)(*(void *)a1 + 8 * v24);
  if (!v25) {
    return 0;
  }
  unsigned __int8 v26 = 0;
  int v27 = *a3;
  while (1)
  {
    uint64_t result = v25;
    char v25 = (uint64_t *)*v25;
    if (!v25) {
      break;
    }
    unint64_t v29 = v25[1];
    unint64_t v30 = v29;
    if (v29 >= v6) {
      unint64_t v30 = v29 % v6;
    }
    if (v30 != v24) {
      break;
    }
    if (v29 == a2)
    {
      int v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1) {
        return result;
      }
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_14198(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_188D718();
    }
    unint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v8 = a1 + 16;
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v9 = v7[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v8;
        while (1)
        {
          unint64_t v18 = (void *)*v7;
          if (!*v7) {
            break;
          }
          unint64_t v19 = v18[1];
          if (v19 >= a2) {
            v19 %= a2;
          }
          if (v19 == v9)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            size_t v20 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v19))
            {
              do
              {
                uint8x8_t v21 = v20;
                size_t v20 = (void *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              void *v7 = v20;
              uint64_t v22 = 8 * v19;
              *uint8x8_t v21 = **(void **)(*(void *)a1 + v22);
              **(void **)(*(void *)a1 + v22) = v18;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v19) = v7;
              float v7 = v18;
              unint64_t v9 = v19;
            }
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v8;
        while (1)
        {
          int v12 = (void *)*v7;
          if (!*v7) {
            break;
          }
          uint64_t v13 = v12[1] & v10;
          if (v13 == v11)
          {
            float v7 = (void *)*v7;
          }
          else
          {
            char v14 = (void *)*v7;
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              do
              {
                uint64_t v15 = v14;
                char v14 = (void *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              void *v7 = v14;
              uint64_t v16 = 8 * v13;
              *uint64_t v15 = **(void **)(*(void *)a1 + v16);
              **(void **)(*(void *)a1 + v16) = v12;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              float v7 = v12;
              uint64_t v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    unint64_t v17 = *(void **)a1;
    *(void *)a1 = 0;
    if (v17) {
      operator delete(v17);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1436C(uint64_t *a1, long long *a2, long long *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - *a1) >> 4) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      int v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(void *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 144;
        }
        while (v11 != v10);
        int v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x1C71C71C71C71C7) {
      goto LABEL_39;
    }
    unint64_t v30 = 0x8E38E38E38E38E39 * (v8 >> 4);
    uint64_t v31 = 2 * v30;
    if (2 * v30 <= __sz) {
      uint64_t v31 = __sz;
    }
    unint64_t v32 = v30 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v31;
    if (v32 > 0x1C71C71C71C71C7) {
LABEL_39:
    }
      sub_2E00();
    uint64_t v33 = 144 * v32;
    unsigned int v34 = operator new(144 * v32);
    *a1 = (uint64_t)v34;
    a1[1] = (uint64_t)v34;
    a1[2] = (uint64_t)v34 + v33;
    uint64_t v35 = sub_1463C(v9, v6, a3, (uint64_t)v34);
LABEL_31:
    a1[1] = (uint64_t)v35;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x8E38E38E38E38E39 * ((v14 - v10) >> 4) < __sz)
  {
    uint64_t v15 = &a2[(v14 - v10) >> 4];
    if (v14 != v10)
    {
      uint64_t v16 = 16 * ((v14 - v10) >> 4);
      do
      {
        long long v17 = *v6;
        long long v18 = v6[1];
        long long v19 = v6[3];
        *(_OWORD *)(v10 + 32) = v6[2];
        *(_OWORD *)(v10 + 48) = v19;
        *(_OWORD *)uint64_t v10 = v17;
        *(_OWORD *)(v10 + 16) = v18;
        long long v20 = v6[4];
        long long v21 = v6[5];
        long long v22 = v6[6];
        *(_DWORD *)(v10 + 112) = *((_DWORD *)v6 + 28);
        *(_OWORD *)(v10 + 80) = v21;
        *(_OWORD *)(v10 + 96) = v22;
        *(_OWORD *)(v10 + 64) = v20;
        if (v6 != (long long *)v10) {
          sub_147D0((void *)(v10 + 120), *((char **)v6 + 15), *((char **)v6 + 16), (uint64_t)(*((void *)v6 + 16) - *((void *)v6 + 15)) >> 2);
        }
        v6 += 9;
        v10 += 144;
        v16 -= 144;
      }
      while (v16);
      uint64_t v10 = a1[1];
    }
    uint64_t v35 = sub_1463C(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    uint64_t v23 = *a1;
  }
  else
  {
    uint64_t v23 = *a1;
    do
    {
      long long v24 = *v6;
      long long v25 = v6[1];
      long long v26 = v6[3];
      *(_OWORD *)(v10 + 32) = v6[2];
      *(_OWORD *)(v10 + 48) = v26;
      *(_OWORD *)uint64_t v10 = v24;
      *(_OWORD *)(v10 + 16) = v25;
      long long v27 = v6[4];
      long long v28 = v6[5];
      long long v29 = v6[6];
      *(_DWORD *)(v10 + 112) = *((_DWORD *)v6 + 28);
      *(_OWORD *)(v10 + 80) = v28;
      *(_OWORD *)(v10 + 96) = v29;
      *(_OWORD *)(v10 + 64) = v27;
      if (v6 != (long long *)v10) {
        sub_147D0((void *)(v10 + 120), *((char **)v6 + 15), *((char **)v6 + 16), (uint64_t)(*((void *)v6 + 16) - *((void *)v6 + 15)) >> 2);
      }
      v6 += 9;
      v10 += 144;
      v23 += 144;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v23)
  {
    uint64_t v36 = *(void **)(v14 - 24);
    if (v36)
    {
      *(void *)(v14 - 16) = v36;
      operator delete(v36);
    }
    v14 -= 144;
  }
  a1[1] = v23;
}

void sub_1462C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_14634(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1463C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    uint64_t v6 = (void *)(a4 + 120);
    do
    {
      long long v8 = *v5;
      long long v9 = v5[1];
      long long v10 = v5[2];
      *(_OWORD *)(v6 - 9) = v5[3];
      *(_OWORD *)(v6 - 11) = v10;
      *(_OWORD *)(v6 - 13) = v9;
      *(_OWORD *)(v6 - 15) = v8;
      long long v11 = v5[4];
      long long v12 = v5[5];
      long long v13 = v5[6];
      *((_DWORD *)v6 - 2) = *((_DWORD *)v5 + 28);
      *(_OWORD *)(v6 - 3) = v13;
      *(_OWORD *)(v6 - 5) = v12;
      *(_OWORD *)(v6 - 7) = v11;
      v6[1] = 0;
      v6[2] = 0;
      void *v6 = 0;
      uint64_t v15 = (unsigned char *)*((void *)v5 + 15);
      uint64_t v14 = (unsigned char *)*((void *)v5 + 16);
      int64_t v16 = v14 - v15;
      if (v14 != v15)
      {
        if (v16 < 0) {
          sub_2E00();
        }
        long long v17 = (char *)operator new(v14 - v15);
        void *v6 = v17;
        v6[1] = v17;
        float v7 = &v17[4 * (v16 >> 2)];
        v6[2] = v7;
        memcpy(v17, v15, v16);
        v6[1] = v7;
      }
      v6 += 18;
      v5 += 9;
    }
    while (v5 != a3);
    return v6 - 15;
  }
  return (void *)a4;
}

void sub_14744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1476C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1476C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 144;
    }
  }
  return a1;
}

void *sub_147D0(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  float v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  int64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    long long v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  long long v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    long long v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void sub_14918(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

void sub_149B4(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = std::locale::locale((std::locale *)a1);
  *(void *)(a1 + 8) = std::locale::use_facet(v6, &std::ctype<char>::id);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, &std::collate<char>::id);
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  strlen(a2);
  sub_14B00();
}

void sub_14A54(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_14A70(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_14A84(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_14B00()
{
}

void sub_14F84()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_14FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_14FDC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = a2;
  do
  {
    float v7 = v6;
    uint64_t v6 = sub_15E34(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != a3)
  {
    if (*v7 == 124)
    {
      uint64_t v8 = v7 + 1;
      uint64_t v9 = v7 + 1;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = sub_15E34(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8) {
        operator new();
      }
      operator new();
    }
    return v7;
  }
  return a3;
}

unsigned __int8 *sub_151FC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != a3)
    {
      uint64_t v6 = v3;
      float v7 = sub_1F044(a1, v3, a3);
      if (v7 != v3)
      {
        uint64_t v3 = sub_1F2A4(a1, v7, a3);
        if (v3 != v6) {
          continue;
        }
      }
      if (v6 + 1 == a3 && *v6 == 36) {
        operator new();
      }
      sub_1EFEC();
    }
  }
  return a3;
}

char *sub_153B0(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = sub_1F828(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    float v7 = v6;
    uint64_t v6 = sub_1F828(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (*v7 == 124)
  {
    uint64_t v8 = v7 + 1;
    uint64_t v9 = sub_1F828(a1, v7 + 1, a3);
    if (v9 != v7 + 1)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = sub_1F828(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    sub_1EFEC();
  }
  return v7;
}

unsigned __int8 *sub_15578(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    float v7 = v6;
  }
  else {
    float v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_151FC(a1, __s, v7);
  if (v7 == a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (v8 != a3)
  {
    uint64_t v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = a3;
    }
    if (v10 != v8)
    {
      sub_151FC(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

char *sub_157C8(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6) {
    float v7 = v6;
  }
  else {
    float v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_153B0(a1, __s, v7);
  if (v7 == a3) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (v8 != a3)
  {
    uint64_t v9 = (char *)memchr(v8, 10, a3 - v8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = a3;
    }
    if (v10 != v8)
    {
      sub_153B0(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

void sub_15A18()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_15A5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_15A74()
{
}

void sub_15A88(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_15AA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_15AD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_15B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000000020B8951) {
    return a1 + 24;
  }
  if (((v3 & 0x80000000020B8951 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000000020B8951)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000000020B8951 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *sub_15B8C(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_15BF8(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_15C84(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_15C98(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_15D04(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

char *sub_15D90(uint64_t a1, char *a2, char *a3)
{
  do
  {
    unint64_t v5 = a2;
    a2 = sub_15EDC(a1, a2, a3);
    if (a2 != v5) {
      continue;
    }
    uint64_t v6 = sub_16290(a1, v5, a3);
    if (v6 == (unsigned __int8 *)v5) {
      break;
    }
    a2 = sub_16640(a1, (char *)v6, a3);
  }
  while (a2 != v5);
  return v5;
}

char *sub_15E34(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_15EDC(a1, a2, a3);
  if (result == a2)
  {
    float v7 = (char *)sub_16290(a1, a2, a3);
    uint64_t result = a2;
    if (v7 != a2)
    {
      return sub_16640(a1, v7, a3);
    }
  }
  return result;
}

char *sub_15EDC(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v10 = a2[1];
          if (v10 == 66) {
            operator new();
          }
          if (v10 == 98) {
            operator new();
          }
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36) {
        operator new();
      }
      BOOL v8 = v6 == 40;
      float v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        BOOL v11 = a2 + 2;
        if (v8 && v11 != a3)
        {
          int v13 = *v11;
          if (v13 == 33)
          {
            sub_16A38((uint64_t)v14);
            int v15 = *(_DWORD *)(a1 + 24);
            sub_14B00(v14, a2 + 3, a3);
            sub_16AA8();
          }
          if (v13 == 61)
          {
            sub_16A38((uint64_t)v14);
            int v15 = *(_DWORD *)(a1 + 24);
            sub_14B00(v14, a2 + 3, a3);
            sub_16AA8();
          }
        }
      }
    }
  }
  return a2;
}

void sub_16240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_16254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_16268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_1627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_16290(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '(':
        if (a2 + 1 == a3) {
          goto LABEL_30;
        }
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          int v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          float v7 = sub_14FDC(a1, a2 + 3, a3);
          if (v7 == a3) {
            goto LABEL_30;
          }
          BOOL v8 = v7;
          if (*v7 != 41) {
            goto LABEL_30;
          }
        }
        else
        {
          if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
            operator new();
          }
          int v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          int v10 = sub_14FDC(a1, a2 + 1, a3);
          if (v10 == a3 || (BOOL v8 = v10, *v10 != 41)) {
LABEL_30:
          }
            sub_16B78();
          if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
            operator new();
          }
        }
        --*v6;
        uint64_t v3 = v8 + 1;
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_29;
      case '.':
        operator new();
      case '[':
        return sub_184A4(a1, a2, a3);
      case '\\':
        return sub_18328(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (*a2 == 123) {
LABEL_29:
        }
          sub_18618();
LABEL_20:
        return sub_18670(a1, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

char *sub_16640(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v4 = *a2;
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      int64_t v16 = a2 + 1;
      if (v3) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v16 == a3;
      }
      if (!v17 && *v16 == 63) {
        sub_1E5E0();
      }
      sub_1E5E0();
    }
    if (v4 != 123) {
      return a2;
    }
    int v6 = a2 + 1;
    if (a2 + 1 != a3)
    {
      int v7 = *v6;
      if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38)
      {
        int v8 = v7 - 48;
        uint64_t v9 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_19:
          uint64_t v9 = a3;
        }
        else
        {
          while (1)
          {
            int v10 = *v9;
            if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
              break;
            }
            if (v8 >= 214748364) {
              goto LABEL_68;
            }
            int v8 = v10 + 10 * v8 - 48;
            if (++v9 == a3) {
              goto LABEL_19;
            }
          }
        }
        if (v9 != v6)
        {
          if (v9 == a3) {
            goto LABEL_69;
          }
          int v11 = *v9;
          if (v11 != 44)
          {
            if (v11 == 125)
            {
              unint64_t v12 = v9 + 1;
              if (!v3 && v12 != a3 && *v12 == 63) {
                sub_1E5E0();
              }
              sub_1E5E0();
            }
            goto LABEL_68;
          }
          long long v18 = v9 + 1;
          if (v9 + 1 == a3) {
            goto LABEL_68;
          }
          int v19 = *v18;
          if (v19 == 125)
          {
            long long v20 = v9 + 2;
            if (v3 || v20 == a3 || *v20 != 63) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
          if ((v19 & 0xF8) != 0x30 && (v19 & 0xFE) != 0x38) {
            goto LABEL_69;
          }
          int v21 = v19 - 48;
          long long v22 = v9 + 2;
          if (v22 == a3)
          {
LABEL_57:
            long long v22 = a3;
          }
          else
          {
            while (1)
            {
              int v23 = *v22;
              if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38) {
                break;
              }
              if (v21 >= 214748364) {
                goto LABEL_68;
              }
              int v21 = v23 + 10 * v21 - 48;
              if (++v22 == a3) {
                goto LABEL_57;
              }
            }
          }
          if (v22 == v18 || v22 == a3 || *v22 != 125) {
LABEL_69:
          }
            sub_1E7C8();
          if (v21 >= v8)
          {
            long long v24 = v22 + 1;
            if (!v3 && v24 != a3 && *v24 == 63) {
              sub_1E5E0();
            }
            sub_1E5E0();
          }
        }
      }
    }
LABEL_68:
    sub_1E770();
  }
  if (v4 == 42)
  {
    size_t v14 = a2 + 1;
    if (v3) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v14 == a3;
    }
    if (v15 || *v14 != 63) {
      goto LABEL_41;
    }
LABEL_34:
    sub_1E5E0();
  }
  if (v4 == 43)
  {
    unint64_t v5 = a2 + 1;
    if (!v3 && v5 != a3 && *v5 == 63) {
      goto LABEL_34;
    }
LABEL_41:
    sub_1E5E0();
  }
  return a2;
}

uint64_t sub_16A38(uint64_t a1)
{
  uint64_t v2 = std::locale::locale((std::locale *)a1);
  *(void *)(a1 + 8) = std::locale::use_facet(v2, &std::ctype<char>::id);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, &std::collate<char>::id);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_16A94(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_16AA8()
{
}

void sub_16B78()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_16BBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_16BD0(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_16C3C(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_16CC8(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void *sub_16D28(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_16D94(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_16E20(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_16E70(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD8D0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_16EFC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD8D0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_16FA8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_170FC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD918;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    a1->__locale_ = (std::locale::__imp *)off_23FD810;
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void sub_17210(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD918;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    a1->__locale_ = (std::locale::__imp *)off_23FD810;
    BOOL v4 = a1[1].__locale_;
    if (!v4)
    {
LABEL_5:
      operator delete();
    }
  }
  else
  {
    std::locale::~locale(a1 + 2);
    a1->__locale_ = (std::locale::__imp *)off_23FD810;
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
  }
  (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  goto LABEL_5;
}

void sub_17344(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  __p = 0;
  int v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_179C0((uint64_t)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_174D0(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    uint64_t v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  uint64_t v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int64_t v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  int v19 = v10;
  operator delete(v10);
}

void sub_174B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_174D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  int v50 = 0;
  char v51 = 0;
  unint64_t v52 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  *(void *)&long long v48 = a3;
  *((void *)&v48 + 1) = a3;
  char v49 = 0;
  *(_DWORD *)size_t v45 = 0;
  memset(&v45[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v47, 0, 21);
  char v51 = sub_17CD4((void **)&v50, (uint64_t)v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v45[32])
  {
    *(void *)&v45[40] = *(void *)&v45[32];
    operator delete(*(void **)&v45[32]);
  }
  int v13 = v51;
  *((_DWORD *)v51 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    sub_17EBC((void **)v13 - 8, v15 - v16, &v48);
    int v13 = v51;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    sub_18070((char **)v13 - 5, v19 - v20);
    int v13 = v51;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      sub_17BA0();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        uint64_t v24 = *((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v36 = *a4;
        *(void *)uint64_t v36 = a2;
        *(void *)(v36 + 8) = v24;
        *(unsigned char *)(v36 + 16) = 1;
        uint64_t v37 = *((void *)v13 - 8);
        uint64_t v38 = *((void *)v13 - 7) - v37;
        if (v38)
        {
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
          uint64_t v40 = (unsigned char *)(v37 + 16);
          unsigned int v41 = 1;
          do
          {
            uint64_t v42 = v36 + 24 * v41;
            *(_OWORD *)uint64_t v42 = *((_OWORD *)v40 - 1);
            char v43 = *v40;
            v40 += 24;
            *(unsigned char *)(v42 + 16) = v43;
          }
          while (v39 > v41++);
        }
        uint64_t v17 = 1;
        char v22 = v50;
        if (!v50) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        char v25 = v51;
        long long v26 = (void *)*((void *)v51 - 5);
        if (v26)
        {
          *((void *)v51 - 4) = v26;
          operator delete(v26);
        }
        char v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        char v51 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        sub_181AC((uint64_t)v45, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v47[1] + 24))(v47[1], 0, v45);
        char v28 = v51;
        if ((unint64_t)v51 >= v52)
        {
          char v51 = sub_17CD4((void **)&v50, (uint64_t)v45);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v29 = *(_OWORD *)&v45[16];
          *(_OWORD *)char v51 = *(_OWORD *)v45;
          *((_OWORD *)v28 + 1) = v29;
          *((void *)v28 + 4) = 0;
          *((void *)v28 + 5) = 0;
          *((void *)v28 + 6) = 0;
          *((void *)v28 + 7) = 0;
          *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
          *((void *)v28 + 6) = *(void *)&v45[48];
          memset(&v45[32], 0, 24);
          *((void *)v28 + 8) = 0;
          *((void *)v28 + 9) = 0;
          *(_OWORD *)(v28 + 56) = *(_OWORD *)__p;
          *((void *)v28 + 9) = v47[0];
          __p[0] = 0;
          __p[1] = 0;
          v47[0] = 0;
          uint64_t v30 = v47[1];
          *(void *)(v28 + 85) = *(void *)((char *)&v47[1] + 5);
          *((void *)v28 + 10) = v30;
          char v51 = v28 + 96;
        }
        if (*(void *)&v45[32])
        {
          *(void *)&v45[40] = *(void *)&v45[32];
          operator delete(*(void **)&v45[32]);
        }
LABEL_17:
        char v22 = v50;
        int v13 = v51;
        ++v21;
        if (v50 != v51) {
          continue;
        }
        uint64_t v17 = 0;
        if (v50)
        {
LABEL_38:
          uint64_t v31 = v51;
          unint64_t v32 = v22;
          if (v51 != v22)
          {
            do
            {
              uint64_t v33 = (void *)*((void *)v31 - 5);
              if (v33)
              {
                *((void *)v31 - 4) = v33;
                operator delete(v33);
              }
              unsigned int v34 = (void *)*((void *)v31 - 8);
              if (v34)
              {
                *((void *)v31 - 7) = v34;
                operator delete(v34);
              }
              v31 -= 96;
            }
            while (v31 != v22);
            unint64_t v32 = v50;
          }
          char v51 = v22;
          operator delete(v32);
        }
        break;
      default:
        sub_17BF8();
    }
    return v17;
  }
}

void sub_17914(_Unwind_Exception *a1)
{
  sub_17C50((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_17928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_17B5C((uint64_t *)va);
  sub_17C50((void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_17970(_Unwind_Exception *a1)
{
  sub_17C50((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_17984(_Unwind_Exception *a1)
{
  sub_17C50((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void *sub_179C0(uint64_t a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      sub_2E00();
    uint64_t v11 = 3 * v10;
    uint64_t result = operator new(24 * v10);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v11];
    uint64_t v12 = 24 * a2;
    int v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)uint64_t result = *a3;
      result[2] = *((void *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  unint64_t v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (v14 - (uint64_t)result) / 24;
  }
  if (v16)
  {
    uint64_t v17 = result;
    do
    {
      *(_OWORD *)uint64_t v17 = *a3;
      *((unsigned char *)v17 + 16) = *((unsigned char *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    int v13 = &result[3 * a2];
LABEL_25:
    *(void *)(a1 + 8) = v13;
    return result;
  }
  uint64_t v18 = v14 + 24 * (a2 - v15);
  uint64_t v19 = 24 * a2 - 24 * v15;
  do
  {
    long long v20 = *a3;
    *(void *)(v14 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(void *)(a1 + 8) = v18;
  return result;
}

void *sub_17B5C(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_17BA0()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_17BE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_17BF8()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_17C3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_17C50(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_17CD4(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v9 = &v7[96 * v3];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15) {
      return v13;
    }
    goto LABEL_23;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v15[v16];
    long long v19 = *(_OWORD *)&v15[v16 - 80];
    *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
    *((_OWORD *)v17 - 5) = v19;
    *((void *)v17 - 7) = 0;
    *((void *)v17 - 6) = 0;
    *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
    *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
    *((void *)v18 - 8) = 0;
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
    *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
    *((void *)v18 - 5) = 0;
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    uint64_t v20 = *(void *)&v15[v16 - 16];
    *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
    *((void *)v17 - 2) = v20;
    v16 -= 96;
  }
  while (&v15[v16] != v14);
  unsigned int v21 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v21)
  {
    do
    {
      char v22 = (void *)*((void *)v15 - 5);
      if (v22)
      {
        *((void *)v15 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v15 - 8);
      if (v23)
      {
        *((void *)v15 - 7) = v23;
        operator delete(v23);
      }
      v15 -= 96;
    }
    while (v15 != v21);
    unint64_t v15 = v21;
  }
  if (v15) {
LABEL_23:
  }
    operator delete(v15);
  return v13;
}

void sub_17EBC(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v7 = (char *)a1[1];
  unint64_t v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        long long v15 = *a3;
        *((void *)v7 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = &v12[24 * v8];
    uint64_t v17 = 24 * a2;
    uint64_t v18 = &v16[24 * a2];
    long long v19 = v16;
    do
    {
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    unsigned int v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v7 - 24);
        *((void *)v16 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v16 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      uint64_t v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_18070(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_188D718();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    int v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    long long v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_181AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_182F4(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_18328(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_1894C();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48) {
    sub_191E8(a1);
  }
  if ((v7 - 49) <= 8)
  {
    size_t v10 = a2 + 2;
    if (a2 + 2 == a3) {
      goto LABEL_13;
    }
    do
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_20;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
    }
    while (v10 != a3);
    if (v8)
    {
LABEL_13:
      if (v8 <= *(_DWORD *)(a1 + 28)) {
        sub_1940C(a1);
      }
    }
LABEL_20:
    sub_193B4();
  }
  uint64_t v12 = sub_189A4(a1, a2 + 1, a3);
  if (v12 == v5)
  {
    uint64_t v13 = sub_18CE8(a1, a2 + 1, a3, 0);
    if (v13 == v5) {
      return a2;
    }
    else {
      return v13;
    }
  }
  return v12;
}

unsigned char *sub_184A4(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    sub_1B95C();
  }
  return a2;
}

void sub_185F4()
{
}

void sub_18618()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_1865C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_18670(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case ')':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '{':
      case '|':
      case '}':
        return a2;
      default:
        sub_191E8(a1);
    }
  }
  return a2;
}

void *sub_18854(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_188C0(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_1894C()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_18990(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_189A4(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        operator new();
      case 'S':
        operator new();
      case 'W':
        operator new();
      case 'd':
        operator new();
      case 's':
        operator new();
      case 'w':
        operator new();
      default:
        return a2;
    }
  }
  return a2;
}

void sub_18BE0()
{
}

unsigned __int8 *sub_18CE8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  char v5 = 0;
  switch(*a2)
  {
    case '0':
      if (!this) {
        goto LABEL_48;
      }
      std::string::operator=(this, 0);
      return v4 + 1;
    case 'c':
      if (a2 + 1 == a3) {
        goto LABEL_55;
      }
      unsigned __int8 v8 = a2[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_55;
      }
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v8 & 0x1F);
      v4 += 2;
      return v4;
    case 'f':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 12);
      return v4 + 1;
    case 'n':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 10);
      return v4 + 1;
    case 'r':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 13);
      return v4 + 1;
    case 't':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 == a3) {
        goto LABEL_55;
      }
      int v9 = a2[1];
      if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
        goto LABEL_55;
      }
      long long v4 = a2 + 2;
      if (a2 + 2 == a3) {
        goto LABEL_55;
      }
      int v10 = *v4;
      char v11 = -48;
      if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
        goto LABEL_32;
      }
      v10 |= 0x20u;
      if ((v10 - 97) >= 6) {
        goto LABEL_55;
      }
      char v11 = -87;
LABEL_32:
      char v5 = 16 * (v11 + v10);
LABEL_33:
      if (v4 + 1 == a3) {
        goto LABEL_55;
      }
      int v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_38;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6) {
        goto LABEL_55;
      }
      char v13 = -87;
LABEL_38:
      if (v4 + 2 == a3) {
        goto LABEL_55;
      }
      int v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6) {
LABEL_55:
        }
          sub_1894C();
        char v15 = -87;
      }
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v5));
      uint64_t result = v4 + 3;
      break;
    case 'v':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 11);
      return v4 + 1;
    case 'x':
      goto LABEL_33;
    default:
      uint64_t v7 = *a2;
      if (*a2 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v7) & 0x500) != 0) {
        goto LABEL_55;
      }
      if (!this) {
LABEL_48:
      }
        sub_191E8(a1);
      std::string::operator=(this, v7);
      return v4 + 1;
  }
  return result;
}

void sub_191E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1935C()
{
  std::locale::~locale(v1);
  void *v0 = off_23FD810;
  uint64_t v2 = v0[1];
  if (v2) {
    sub_20A6344(v2);
  }
  operator delete();
}

void sub_193B4()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_193F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1940C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *sub_1953C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD9A8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_195C8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD9A8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_19674(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *sub_19714(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD9F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_197A0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FD9F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_1984C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void *sub_19894(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19900(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_1998C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *sub_199D4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FDA80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19A60(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FDA80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_19B0C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (v4 = *(void *)(v3 + 8) - *(void *)v3, uint64_t v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *sub_19C38(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FDAC8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19CC4(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FDAC8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete();
}

uint64_t sub_19D70(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    int v8 = *(unsigned __int8 **)(a2 + 16);
    uint64_t v9 = v6;
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v8++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v9);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_19E00(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19E6C(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

unsigned int *sub_19EF8(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_193B4();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void sub_19FC8(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          int v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          int v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v42 = &v5[-v28 - 8];
          char v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        std::string::size_type v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_2E00();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      int v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      int v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        int v46 = (long long *)(v5 - 16);
        char v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *char v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      int v50 = &v5[-v29 - 8];
      char v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    int v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    int v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    int v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v34 = &v5[-v22 - 8];
    uint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    uint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t sub_1A45C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = off_23FDB58;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1A5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  sub_1A668((void **)(v9 + 136));
  std::string v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    sub_1A6DC(v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      uint64_t v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    sub_1A6DC(v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  uint64_t v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **sub_1A668(void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1A6DC(void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_1A770(std::locale *a1)
{
  sub_1B298(a1);

  operator delete();
}

void sub_1A7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(char **)(a2 + 16);
  unsigned int v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0;
    int v35 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_215;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  char v6 = *v4;
  LOBYTE(__src[0]) = *v4;
  char v7 = v4[1];
  BYTE1(__src[0]) = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    LOBYTE(__src[0]) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    BYTE1(__src[0]) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  uint64_t v8 = a1 + 16;
  sub_1B554(__src, a1 + 16, (unsigned char *)__src + 2, (uint64_t)&__p);
  if ((v138 & 0x80000000) == 0)
  {
    if (v138) {
      goto LABEL_8;
    }
LABEL_58:
    int v35 = 0;
    uint64_t v37 = 1;
    unsigned __int8 v39 = **(unsigned char **)(v2 + 16);
    unsigned __int8 v135 = v39;
    if (!*(unsigned char *)(a1 + 169)) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  size_t v38 = __n;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unsigned __int8 *)(v9 + 1);
    while (LOBYTE(__src[0]) != *(v12 - 1) || BYTE1(__src[0]) != *v12)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_212;
  }
LABEL_17:
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v35 = 0;
    goto LABEL_166;
  }
  sub_1B40C(a1 + 16, __src, (unsigned char *)__src + 2);
  uint64_t v14 = *(void *)(a1 + 88);
  char v15 = v138;
  uint64_t v16 = *(void *)(a1 + 96) - v14;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 48;
    char v124 = v138;
    if (v138 >= 0) {
      size_t v19 = v138;
    }
    else {
      size_t v19 = __n;
    }
    if (v138 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v18 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v16 / 48;
    }
    BOOL v22 = 1;
    do
    {
      int v23 = *(char *)(v14 + 23);
      if (v23 >= 0) {
        size_t v24 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        size_t v24 = *(void *)(v14 + 8);
      }
      if (v23 >= 0) {
        unint64_t v25 = (const void *)v14;
      }
      else {
        unint64_t v25 = *(const void **)v14;
      }
      if (v24 >= v19) {
        size_t v26 = v19;
      }
      else {
        size_t v26 = v24;
      }
      int v27 = memcmp(p_p, v25, v26);
      BOOL v28 = v19 >= v24;
      if (v27) {
        BOOL v28 = v27 >= 0;
      }
      if (v28)
      {
        int v29 = *(char *)(v14 + 47);
        if (v29 >= 0) {
          size_t v30 = *(unsigned __int8 *)(v14 + 47);
        }
        else {
          size_t v30 = *(void *)(v14 + 32);
        }
        if (v29 >= 0) {
          uint64_t v31 = (const void *)(v14 + 24);
        }
        else {
          uint64_t v31 = *(const void **)(v14 + 24);
        }
        if (v19 >= v30) {
          size_t v32 = v30;
        }
        else {
          size_t v32 = v19;
        }
        int v33 = memcmp(v31, p_p, v32);
        BOOL v34 = v30 >= v19;
        if (v33) {
          BOOL v34 = v33 >= 0;
        }
        if (v34)
        {
          int v35 = 1;
          int v36 = 5;
          goto LABEL_161;
        }
      }
      BOOL v22 = ++v17 < v18;
      v14 += 48;
    }
    while (v21 != v17);
    int v36 = 0;
    int v35 = 0;
LABEL_161:
    uint64_t v8 = a1 + 16;
    char v15 = v124;
  }
  else
  {
    BOOL v22 = 0;
    int v36 = 0;
    int v35 = 0;
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  if (!v22)
  {
LABEL_166:
    if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
      goto LABEL_194;
    }
    int v132 = v35;
    sub_1B7AC(__src, v8, (unsigned char *)__src + 2, (uint64_t)&__p);
    uint64_t v89 = *(void *)(a1 + 136);
    uint64_t v90 = *(void *)(a1 + 144) - v89;
    if (v90)
    {
      unint64_t v91 = v90 / 24;
      size_t v92 = __n;
      if (v138 >= 0) {
        size_t v93 = v138;
      }
      else {
        size_t v93 = __n;
      }
      if (v138 < 0)
      {
        int v129 = v138;
        uint64_t v109 = 0;
        double v110 = __p;
        if (v91 <= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = v90 / 24;
        }
        BOOL v96 = 1;
        do
        {
          uint64_t v112 = *(unsigned __int8 *)(v89 + 23);
          int v113 = (char)v112;
          if ((v112 & 0x80u) != 0) {
            uint64_t v112 = *(void *)(v89 + 8);
          }
          if (v93 == v112)
          {
            double v114 = v113 >= 0 ? (const void *)v89 : *(const void **)v89;
            if (!memcmp(v110, v114, v92))
            {
              int v35 = 1;
              int v36 = 5;
              if ((v129 & 0x80000000) == 0) {
                goto LABEL_190;
              }
              goto LABEL_189;
            }
          }
          BOOL v96 = ++v109 < v91;
          v89 += 24;
        }
        while (v111 != v109);
        int v36 = 0;
        int v35 = v132;
        if ((v129 & 0x80000000) == 0) {
          goto LABEL_190;
        }
LABEL_189:
        operator delete(__p);
        goto LABEL_190;
      }
      if (!v138)
      {
        uint64_t v115 = *(unsigned __int8 *)(v89 + 23);
        if ((v115 & 0x80u) != 0) {
          uint64_t v115 = *(void *)(v89 + 8);
        }
        if (v115 == v138)
        {
          int v35 = 1;
          goto LABEL_214;
        }
        unint64_t v116 = 0;
        if (v91 <= 1) {
          uint64_t v117 = 1;
        }
        else {
          uint64_t v117 = v91;
        }
        uint64_t v118 = v117 - 1;
        v119 = (uint64_t *)(v89 + 32);
        while (v118 != v116)
        {
          ++v116;
          uint64_t v120 = *((unsigned __int8 *)v119 + 15);
          uint64_t v122 = *v119;
          v119 += 3;
          uint64_t v121 = v122;
          if ((v120 & 0x80u) != 0) {
            uint64_t v120 = v121;
          }
          if (v93 == v120)
          {
            BOOL v96 = v116 < v91;
            int v35 = 1;
            int v36 = 5;
            goto LABEL_190;
          }
        }
        BOOL v96 = 0;
        int v36 = 0;
LABEL_190:
        if (v96) {
          goto LABEL_191;
        }
LABEL_194:
        if (SLOBYTE(__src[0]) < 0)
        {
          int v105 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          int v102 = *(_DWORD *)(a1 + 160);
          uint64_t v103 = *(void *)(*(void *)(a1 + 24) + 16);
          int v104 = *(_DWORD *)(v103 + 4 * LOBYTE(__src[0]));
          if (((v104 & v102) != 0 || LOBYTE(__src[0]) == 95 && (v102 & 0x80) != 0)
            && (SBYTE1(__src[0]) & 0x80000000) == 0
            && ((*(_DWORD *)(v103 + 4 * BYTE1(__src[0])) & v102) != 0 || (v102 & 0x80) != 0 && BYTE1(__src[0]) == 95))
          {
            goto LABEL_212;
          }
          int v105 = *(_DWORD *)(a1 + 164);
          if ((v104 & v105) != 0 || LOBYTE(__src[0]) == 95 && (v105 & 0x80) != 0)
          {
LABEL_211:
            int v106 = v35;
LABEL_213:
            int v35 = v106;
            goto LABEL_214;
          }
        }
        if ((SBYTE1(__src[0]) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * BYTE1(__src[0])) & v105) == 0)
          {
            int v106 = 1;
            if (BYTE1(__src[0]) != 95 || (v105 & 0x80) == 0) {
              goto LABEL_213;
            }
          }
          goto LABEL_211;
        }
LABEL_212:
        int v106 = 1;
        goto LABEL_213;
      }
      uint64_t v94 = 0;
      if (v91 <= 1) {
        uint64_t v95 = 1;
      }
      else {
        uint64_t v95 = v90 / 24;
      }
      BOOL v96 = 1;
      do
      {
        unsigned int v97 = (unsigned __int8 *)(v89 + 24 * v94);
        uint64_t v98 = v97[23];
        int v99 = (char)v98;
        if ((v98 & 0x80u) != 0) {
          uint64_t v98 = *((void *)v97 + 1);
        }
        if (v93 == v98)
        {
          if (v99 < 0) {
            unsigned int v97 = *(unsigned __int8 **)v97;
          }
          v100 = &__p;
          uint64_t v101 = v138;
          while (*(unsigned __int8 *)v100 == *v97)
          {
            v100 = (void **)((char *)v100 + 1);
            ++v97;
            if (!--v101)
            {
              int v35 = 1;
              int v36 = 5;
              if ((v138 & 0x80000000) == 0) {
                goto LABEL_190;
              }
              goto LABEL_189;
            }
          }
        }
        BOOL v96 = ++v94 < v91;
      }
      while (v94 != v95);
    }
    BOOL v96 = 0;
    int v36 = 0;
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_189;
  }
LABEL_191:
  if (v36)
  {
LABEL_214:
    uint64_t v37 = 2;
    goto LABEL_215;
  }
  uint64_t v37 = 2;
  unsigned __int8 v39 = **(unsigned char **)(v2 + 16);
  unsigned __int8 v135 = v39;
  if (*(unsigned char *)(a1 + 169))
  {
LABEL_59:
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v39);
    unsigned __int8 v135 = v39;
  }
LABEL_60:
  unint64_t v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_65;
      }
    }
LABEL_76:
    int v35 = 1;
    goto LABEL_215;
  }
LABEL_65:
  unsigned int v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    uint64_t v45 = *(void **)(a1 + 72);
    int v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    char v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_76;
    }
  }
  uint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(unsigned char *)(a1 + 170))
    {
      char v138 = 1;
      LOWORD(__p) = v39;
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 32) + 32))(__src);
      if (v138 < 0) {
        operator delete(__p);
      }
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v50 = v134;
      uint64_t v51 = *(void *)(a1 + 96) - v49;
      if (v51)
      {
LABEL_82:
        uint64_t v125 = v2;
        uint64_t v127 = v37;
        int v130 = v35;
        uint64_t v52 = 0;
        unint64_t v53 = v51 / 48;
        char v123 = v50;
        if ((v50 & 0x80u) == 0) {
          uint64_t v54 = (void *)v50;
        }
        else {
          uint64_t v54 = __src[1];
        }
        if ((v50 & 0x80u) == 0) {
          char v55 = __src;
        }
        else {
          char v55 = (void **)__src[0];
        }
        if (v53 <= 1) {
          uint64_t v56 = 1;
        }
        else {
          uint64_t v56 = v51 / 48;
        }
        BOOL v57 = 1;
        do
        {
          int v58 = *(char *)(v49 + 23);
          if (v58 >= 0) {
            size_t v59 = *(unsigned __int8 *)(v49 + 23);
          }
          else {
            size_t v59 = *(void *)(v49 + 8);
          }
          if (v58 >= 0) {
            int v60 = (const void *)v49;
          }
          else {
            int v60 = *(const void **)v49;
          }
          if (v59 >= (unint64_t)v54) {
            size_t v61 = (size_t)v54;
          }
          else {
            size_t v61 = v59;
          }
          int v62 = memcmp(v55, v60, v61);
          BOOL v63 = (unint64_t)v54 >= v59;
          if (v62) {
            BOOL v63 = v62 >= 0;
          }
          if (v63)
          {
            int v64 = *(char *)(v49 + 47);
            if (v64 >= 0) {
              size_t v65 = *(unsigned __int8 *)(v49 + 47);
            }
            else {
              size_t v65 = *(void *)(v49 + 32);
            }
            if (v64 >= 0) {
              int v66 = (const void *)(v49 + 24);
            }
            else {
              int v66 = *(const void **)(v49 + 24);
            }
            if ((unint64_t)v54 >= v65) {
              size_t v67 = v65;
            }
            else {
              size_t v67 = (size_t)v54;
            }
            int v68 = memcmp(v66, v55, v67);
            BOOL v69 = v65 >= (unint64_t)v54;
            if (v68) {
              BOOL v69 = v68 >= 0;
            }
            if (v69)
            {
              int v35 = 1;
              uint64_t v2 = v125;
              uint64_t v37 = v127;
              if ((v123 & 0x80) == 0) {
                goto LABEL_122;
              }
              goto LABEL_121;
            }
          }
          BOOL v57 = ++v52 < v53;
          v49 += 48;
        }
        while (v56 != v52);
        uint64_t v2 = v125;
        uint64_t v37 = v127;
        int v35 = v130;
        if ((v123 & 0x80) == 0) {
          goto LABEL_122;
        }
        goto LABEL_121;
      }
    }
    else
    {
      unsigned __int8 v134 = 1;
      LOWORD(__src[0]) = v39;
      uint64_t v50 = 1;
      uint64_t v51 = v48 - v49;
      if (v51) {
        goto LABEL_82;
      }
    }
    BOOL v57 = 0;
    if ((v50 & 0x80) == 0)
    {
LABEL_122:
      if (v57) {
        goto LABEL_215;
      }
      goto LABEL_123;
    }
LABEL_121:
    operator delete(__src[0]);
    goto LABEL_122;
  }
LABEL_123:
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
  {
LABEL_154:
    if ((v39 & 0x80) != 0) {
      goto LABEL_215;
    }
    unsigned int v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v39 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_215;
      }
    }
    goto LABEL_76;
  }
  sub_1B7AC(&v135, a1 + 16, &__p, (uint64_t)&__p);
  uint64_t v70 = *(void *)(a1 + 136);
  uint64_t v71 = v138;
  uint64_t v72 = *(void *)(a1 + 144) - v70;
  if (v72)
  {
    uint64_t v128 = v37;
    int v131 = v35;
    uint64_t v73 = 0;
    unint64_t v74 = v72 / 24;
    int v76 = __p;
    size_t v75 = __n;
    if (v138 >= 0) {
      size_t v77 = v138;
    }
    else {
      size_t v77 = __n;
    }
    if (v74 <= 1) {
      uint64_t v78 = 1;
    }
    else {
      uint64_t v78 = v72 / 24;
    }
    BOOL v79 = 1;
    while (1)
    {
      std::string::size_type v81 = (unsigned __int8 **)(v70 + 24 * v73);
      char v82 = (unsigned __int8 *)*((unsigned __int8 *)v81 + 23);
      int v83 = (char)v82;
      if ((char)v82 < 0) {
        char v82 = v81[1];
      }
      if ((unsigned __int8 *)v77 == v82)
      {
        if (v83 >= 0) {
          uint64_t v84 = (unsigned __int8 *)(v70 + 24 * v73);
        }
        else {
          uint64_t v84 = *v81;
        }
        if ((v71 & 0x80) != 0)
        {
          uint64_t v126 = v70;
          int v80 = memcmp(v76, v84, v75);
          uint64_t v70 = v126;
          if (!v80)
          {
            int v35 = 1;
            uint64_t v37 = v128;
            goto LABEL_151;
          }
        }
        else
        {
          if (!v71)
          {
            int v35 = 1;
            uint64_t v37 = v128;
            if (!v79) {
              goto LABEL_153;
            }
            goto LABEL_215;
          }
          uint64_t v85 = &__p;
          uint64_t v86 = v71;
          while (*(unsigned __int8 *)v85 == *v84)
          {
            uint64_t v85 = (void **)((char *)v85 + 1);
            ++v84;
            if (!--v86)
            {
              int v35 = 1;
              uint64_t v37 = v128;
              if ((v71 & 0x80) == 0) {
                goto LABEL_152;
              }
              goto LABEL_151;
            }
          }
        }
      }
      BOOL v79 = ++v73 < v74;
      if (v73 == v78)
      {
        int v35 = v131;
        uint64_t v37 = v128;
        if ((v71 & 0x80) == 0) {
          goto LABEL_152;
        }
        goto LABEL_151;
      }
    }
  }
  BOOL v79 = 0;
  if (v138 < 0) {
LABEL_151:
  }
    operator delete(__p);
LABEL_152:
  if (!v79)
  {
LABEL_153:
    unsigned __int8 v39 = v135;
    goto LABEL_154;
  }
LABEL_215:
  if (v35 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v107 = 0;
    int v108 = -993;
  }
  else
  {
    *(void *)(v2 + 16) += v37;
    uint64_t v107 = *(void *)(a1 + 8);
    int v108 = -995;
  }
  *(_DWORD *)uint64_t v2 = v108;
  *(void *)(v2 + 80) = v107;
}

void sub_1B220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B23C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *sub_1B298(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_23FDB58;
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    uint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        uint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_23FD810;
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void sub_1B40C(uint64_t a1, unsigned char *__src, unsigned char *a3)
{
  size_t v3 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v3 <= 0x16)
  {
    HIBYTE(v14) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v3);
    p_dst = (void **)((char *)p_dst + v3);
    goto LABEL_9;
  }
  uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17) {
    uint64_t v8 = v3 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v13 = v3;
  int64_t v14 = v9 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v10 = HIBYTE(v14);
  if (v14 >= 0) {
    uint64_t v11 = (void **)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  if (v14 < 0) {
    size_t v10 = v13;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v11, (char *)v11 + v10);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_1B538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B554(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    BOOL v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    BOOL v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_17;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__dst.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_17;
    }
  }
  else if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v17;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v15 = *(unsigned __int8 *)(a4 + 23);
    if (v15 != 12 && v15 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 == 1 || v16 == 12)
  {
LABEL_31:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B7AC(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v5;
  int64_t v19 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    unint64_t v13 = (void **)&__dst;
  }
  else {
    unint64_t v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, (char *)v13 + v12);
  uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = (unsigned char *)a4;
    }
    else {
      uint64_t v16 = *(unsigned char **)a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0) {
LABEL_26:
  }
    operator delete(__dst);
}

void sub_1B940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B95C()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_1B9A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1B9B4(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  memset(&v33, 0, sizeof(v33));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_10:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_11;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 != 58)
    {
      if (v9 == 61)
      {
        char v6 = sub_1BEF0(a1, a2 + 2, a3, a4);
        char v10 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      goto LABEL_10;
    }
    int64_t v19 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = (unsigned __int8 *)v4;
      if (v4[2] != 58) {
        goto LABEL_37;
      }
LABEL_36:
      if (v21[3] == 93)
      {
        int v27 = &v4[v20 + 2];
        if (v27 != a3)
        {
          int v28 = sub_1D9D8(a1, v19, v27, *(_DWORD *)(a1 + 24) & 1);
          if (!v28) {
            sub_1D980();
          }
          char v10 = 0;
          *((_DWORD *)v6 + 40) |= v28;
          char v6 = &v4[v20 + 4];
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_61;
          }
          goto LABEL_62;
        }
      }
      else
      {
LABEL_37:
        while (a3 - v4 - 4 != v20)
        {
          uint64_t v21 = (unsigned __int8 *)&v4[++v20];
          if (v4[v20 + 2] == 58) {
            goto LABEL_36;
          }
        }
      }
    }
LABEL_83:
    sub_1B95C();
  }
  BOOL v22 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_83;
  }
  uint64_t v23 = a3 - v4 - 4;
  size_t v24 = v4 + 2;
  unint64_t v25 = v22 + 1;
  if (*v22 != 46) {
    goto LABEL_43;
  }
LABEL_42:
  if (*v25 != 93)
  {
LABEL_43:
    while (v23)
    {
      --v23;
      size_t v24 = v25;
      int v26 = *v25++;
      if (v26 == 46) {
        goto LABEL_42;
      }
    }
    goto LABEL_83;
  }
  if (v24 == a3) {
    goto LABEL_83;
  }
  sub_1D2D8(v22, a1, v24, (uint64_t)&v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string v33 = v34;
  std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  if (size - 1 >= 2) {
    sub_1D280();
  }
  unint64_t v4 = v24 + 2;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  uint64_t v14 = v4;
  if (!size)
  {
LABEL_11:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_1C4A8(a1, v13, a3, &v33);
        }
        else
        {
          uint64_t v14 = (char *)sub_1C260(a1, (unsigned __int8 *)v13, (unsigned __int8 *)a3, &v33, (uint64_t)v6);
          int v11 = 0;
        }
        goto LABEL_17;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v33, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_17:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v33.__r_.__value_.__l.__size_) {
        goto LABEL_60;
      }
      if (v33.__r_.__value_.__l.__size_ != 1)
      {
        uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
LABEL_59:
        sub_1CE84((uint64_t)v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
LABEL_60:
        char v10 = 1;
        unint64_t v4 = v14;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v33.__r_.__value_.__s + 23)) {
        goto LABEL_60;
      }
      uint64_t v16 = &v33;
      if (HIBYTE(v33.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_59;
      }
    }
    sub_19FC8((uint64_t)v6, v16->__r_.__value_.__s.__data_[0]);
    goto LABEL_60;
  }
  memset(&v34, 0, sizeof(v34));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 == a3 || *v17 != 91 || *v4 != 46)
  {
    if ((v11 | 0x40) == 0x40)
    {
      LODWORD(v17) = *v17;
      if (v17 == 92)
      {
        if (v11) {
          size_t v18 = sub_1C4A8(a1, v14 + 2, a3, &v34);
        }
        else {
          size_t v18 = (char *)sub_1C260(a1, (unsigned __int8 *)v14 + 2, (unsigned __int8 *)a3, &v34, (uint64_t)v6);
        }
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v17) = *v17;
    }
    std::string::operator=(&v34, (std::string::value_type)v17);
    goto LABEL_74;
  }
  size_t v18 = sub_1C160(a1, v14 + 3, a3, (uint64_t)&v34);
LABEL_73:
  unint64_t v4 = v18;
LABEL_74:
  std::string v32 = v33;
  memset(&v33, 0, sizeof(v33));
  std::string __p = v34;
  memset(&v34, 0, sizeof(v34));
  sub_1C8F4((uint64_t)v6, (char *)&v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
LABEL_81:
      operator delete(v34.__r_.__value_.__l.__data_);
      char v10 = 1;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_81;
  }
LABEL_77:
  char v10 = 1;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
LABEL_61:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_62:
  if (v10) {
    return v4;
  }
  return v6;
}

void sub_1BE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(v28 - 72));
  if ((a28 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

char *sub_1BEF0(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  uint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      uint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    sub_1B95C();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  sub_1D2D8(__src, a1, &__src[v7], (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v9 = v22;
    if (v22)
    {
      char v10 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_40:
    sub_1D280();
  }
  uint64_t v9 = v21;
  if (!v21) {
    goto LABEL_40;
  }
  char v10 = (char *)v20;
LABEL_14:
  sub_1D530(a1, (uint64_t)v10, &v10[v9], (uint64_t)__p);
  int v11 = (void *)HIBYTE(v19);
  if (v19 < 0) {
    int v11 = __p[1];
  }
  if (v11)
  {
    unint64_t v12 = *(void *)(a4 + 144);
    if (v12 >= *(void *)(a4 + 152))
    {
      *(void *)(a4 + 144) = sub_1D740((char **)(a4 + 136), (uint64_t)__p);
      if (SHIBYTE(v19) < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        sub_4200(*(unsigned char **)(a4 + 144), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v19;
        *(_OWORD *)unint64_t v12 = v13;
      }
      *(void *)(a4 + 144) = v12 + 24;
      *(void *)(a4 + 144) = v12 + 24;
      if (SHIBYTE(v19) < 0) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      uint64_t v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        uint64_t v16 = (char *)v20;
      }
      sub_1CE84(a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        sub_1D280();
      }
      int v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        int v15 = (char *)v20;
      }
      sub_19FC8(a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__p[0]);
      if ((char)v22 < 0) {
        goto LABEL_38;
      }
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0) {
LABEL_38:
  }
    operator delete(v20);
  return &__src[v7 + 2];
}

void sub_1C104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_1C160(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    sub_1B95C();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  sub_1D2D8(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    sub_1D280();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *sub_1C260(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_1894C();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_1DB3C(a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      std::string::operator=(this, 8);
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_19FC8(a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_6:
        uint64_t result = sub_18CE8(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_1C4A8(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_43:
  }
    sub_1894C();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v5);
      return a2 + 1;
    case 'a':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 7);
      return a2 + 1;
    case 'b':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 8);
      return a2 + 1;
    case 'f':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 12);
      return a2 + 1;
    case 'n':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 10);
      return a2 + 1;
    case 'r':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 13);
      return a2 + 1;
    case 't':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 9);
      return a2 + 1;
    case 'v':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_43;
      }
      uint64_t v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        uint64_t v7 = a3;
LABEL_32:
        std::string::value_type v12 = v5 - 48;
        if (!this) {
          goto LABEL_42;
        }
        goto LABEL_33;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_32;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 == a3)
      {
        uint64_t v7 = a3;
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_42;
        }
      }
      else
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          uint64_t v7 = a2 + 3;
        }
        else {
          uint64_t v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
LABEL_42:
        }
          sub_191E8(a1);
      }
LABEL_33:
      std::string::operator=(this, v12);
      return v7;
  }
}

void sub_1C8F4(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      sub_1E17C();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::string __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      int v42 = sub_1E1D4((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    std::string v34 = a2;
    if ((v16 & 0x80) != 0) {
      std::string v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      int v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      int v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        size_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          size_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    int v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    size_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      size_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_1DFD0(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  sub_1DFD0(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::string __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    std::string v32 = sub_1E1D4((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_1CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1B23C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1CE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1CE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          size_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          std::string v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          size_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        sub_188D718();
      }
LABEL_67:
      sub_2E00();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      size_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      size_t v18 = 0;
      *(_WORD *)(2 * v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    uint64_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      _OWORD *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    size_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    int v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  size_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  int v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    size_t v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    int v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *int v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void sub_1D280()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_1D2C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D2D8(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    uint64_t v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_17;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__dst.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_17;
    }
  }
  else if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v17;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v15 = *(unsigned __int8 *)(a4 + 23);
    if (v15 != 12 && v15 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 == 1 || v16 == 12)
  {
LABEL_31:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1D4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D530(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    unint64_t v25 = v5;
    int64_t v26 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    uint64_t v10 = p_p;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = p_p + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  unint64_t v19 = HIBYTE(v26);
  if (v26 >= 0) {
    uint64_t v20 = (char *)&__p;
  }
  else {
    uint64_t v20 = (char *)__p;
  }
  if (v26 < 0) {
    unint64_t v19 = v25;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v20[v19]);
  uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21 == 1) {
    goto LABEL_32;
  }
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p);
      return;
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = (unsigned char *)a4;
  }
  else {
    uint64_t v23 = *(unsigned char **)a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0) {
    goto LABEL_35;
  }
}

void sub_1D724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D740(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    char v9 = (char *)operator new(24 * v8);
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_1D904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D918(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1D980()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_1D9C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9D8(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v4;
  int64_t v19 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    unint64_t v13 = (void **)&__dst;
  }
  else {
    unint64_t v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0) {
    unint64_t v14 = (const char *)&__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst;
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
  return classname;
}

void sub_1DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DB3C(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          size_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          size_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_2E00();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      size_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      size_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        int v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unint64_t v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  unint64_t v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    size_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    size_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    std::string v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void sub_1DFD0(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    unint64_t v20 = v3;
    int64_t v21 = v15 | 0x8000000000000000;
    std::string __p = p_p;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    unint64_t v8 = p_p;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = p_p + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *size_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *unint64_t v8 = 0;
  unint64_t v17 = HIBYTE(v21);
  if (v21 >= 0) {
    unint64_t v18 = (char *)&__p;
  }
  else {
    unint64_t v18 = (char *)__p;
  }
  if (v21 < 0) {
    unint64_t v17 = v20;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_1E160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E17C()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_1E1C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1E1D4(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (char *)*a1;
  long long v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_23;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 3);
    *((void *)v8 - 4) = *((void *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 6) = 0;
    long long v15 = *(_OWORD *)(v13 - 24);
    *((void *)v8 - 1) = *((void *)v13 - 1);
    *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
    v8 -= 48;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    *((void *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  char v16 = (char *)*a1;
  long long v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0) {
LABEL_20:
        }
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        long long v13 = v16;
        break;
      }
    }
  }
  if (v13) {
LABEL_23:
  }
    operator delete(v13);
  return v11;
}

void *sub_1E388(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1E3F4(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_1E480(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1E4B0(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1E51C(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_1E5A8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1E5E0()
{
}

void sub_1E738(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1E770()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_1E7B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1E7C8()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_1E80C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1E820(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1E8D4(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

uint64_t sub_1E9A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      unsigned char *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1EB8C(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *uint64_t v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void *sub_1EC54(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1ED08(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

void sub_1EDE0()
{
}

uint64_t sub_1EDF4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_1EE08(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1EEBC(void *a1)
{
  *a1 = off_23FDC90;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_23FD810;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

void sub_1EF90(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1EF9C(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_1EFC4()
{
}

uint64_t sub_1EFD8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1EFEC()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_1F030(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1F044(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_1F51C(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 != a2 || v6 == a3) {
    return v7;
  }
  if (a2 + 1 == a3) {
    return a2;
  }
  if (*a2 == 92)
  {
    int v8 = a2[1];
    if (v8 == 40)
    {
      uint64_t v9 = a2 + 2;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      do
      {
        if (v9 == a3) {
          goto LABEL_24;
        }
        uint64_t v11 = v9;
        unint64_t v12 = (unsigned __int8 *)sub_1F044(a1, v9, a3);
        if (v12 == v9) {
          break;
        }
        uint64_t v9 = sub_1F2A4(a1, v12, a3);
      }
      while (v9 != v11);
      if (v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
LABEL_24:
      }
        sub_16B78();
      uint64_t v7 = &v11[2 * (v11[1] == 41)];
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      return v7;
    }
    if (((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38) && (v8 - 49) <= 8)
    {
      if ((v8 - 48) <= *(_DWORD *)(a1 + 28)) {
        sub_1940C(a1);
      }
      sub_193B4();
    }
  }
  return a2;
}

unsigned __int8 *sub_1F2A4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    if (v3 == 42) {
      sub_1E5E0();
    }
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      uint64_t v5 = &a2[2 * (a2[1] == 123)];
      if (v5 == a3) {
        goto LABEL_43;
      }
      int v6 = *v5;
      if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
        goto LABEL_43;
      }
      int v7 = v6 - 48;
      int v8 = v5 + 1;
      if (v5 + 1 == a3)
      {
LABEL_16:
        int v8 = a3;
      }
      else
      {
        while (1)
        {
          int v9 = *v8;
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38) {
            break;
          }
          if (v7 >= 214748364) {
            goto LABEL_43;
          }
          int v7 = v9 + 10 * v7 - 48;
          if (++v8 == a3) {
            goto LABEL_16;
          }
        }
      }
      if (v8 == v5) {
LABEL_43:
      }
        sub_1E770();
      if (v8 != a3)
      {
        uint64_t v10 = v8 + 1;
        int v11 = *v8;
        if (v11 == 44)
        {
          if (v10 == a3) {
            goto LABEL_41;
          }
          int v12 = *v10;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          {
            uint64_t v10 = v8 + 2;
            if (v8 + 2 == a3) {
              goto LABEL_41;
            }
            int v13 = v12 - 48;
            while (1)
            {
              int v14 = *v10;
              if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
                break;
              }
              if (v13 >= 214748364) {
                goto LABEL_43;
              }
              int v13 = v14 + 10 * v13 - 48;
              if (++v10 == a3) {
                goto LABEL_41;
              }
            }
          }
          else
          {
            int v13 = -1;
          }
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v13 == -1) {
              sub_1E5E0();
            }
            if (v13 >= v7) {
              sub_1E5E0();
            }
            goto LABEL_43;
          }
        }
        else if (v10 != a3 && v11 == 92 && *v10 == 125)
        {
          sub_1E5E0();
        }
      }
LABEL_41:
      sub_1E7C8();
    }
  }
  return a2;
}

unsigned char *sub_1F51C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    int v3 = *a2;
    if (a2 + 1 != a3 || v3 != 36)
    {
      if ((v3 - 46) > 0x2E || ((1 << (v3 - 46)) & 0x600000000001) == 0) {
        sub_191E8(a1);
      }
      if (v4 != a3 && v3 == 92)
      {
        unsigned int v7 = (char)*v4 - 36;
        if (v7 <= 0x3A && ((1 << v7) & 0x580000000000441) != 0) {
          sub_191E8(a1);
        }
      }
      if (*a2 == 46) {
        operator new();
      }
    }
  }

  return sub_184A4(a1, a2, a3);
}

void *sub_1F68C(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1F6F8(void *a1)
{
  *a1 = off_23FD810;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_1F784(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1F7C4(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_1940C(a1);
    }
    sub_193B4();
  }
  return 0;
}

char *sub_1F828(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_1FB5C(a1, a2, a3);
  if (v6 == a2 && (int v6 = sub_1FD44(a1, a2, a3), v6 == a2))
  {
    if (a2 != a3 && *a2 == 46) {
      operator new();
    }
    int v6 = sub_184A4(a1, a2, a3);
    if (v6 != a2) {
      goto LABEL_22;
    }
  }
  else if (v6 != a2)
  {
    goto LABEL_22;
  }
  if (v6 != a3)
  {
    int v7 = *a2;
    if (v7 == 36) {
      operator new();
    }
    if (v7 != 40)
    {
      if (v7 == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    int v8 = (char *)sub_153B0(a1, a2 + 1, a3);
    if (v8 == a3 || *v8 != 41) {
      sub_16B78();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    int v6 = v8 + 1;
  }
LABEL_22:
  if (v6 == a2) {
    return a2;
  }

  return sub_16640(a1, v6, a3);
}

unsigned char *sub_1FB5C(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        return a2;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_5;
        }
        return a2;
      default:
LABEL_5:
        sub_191E8(a1);
    }
  }
  return a2;
}

char *sub_1FD44(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = a2 + 1;
  if (a2 + 1 == a3 || *a2 != 92) {
    return a2;
  }
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_191E8(a1);
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = sub_1C4A8(a1, v4, a3, 0);
      }
      else
      {
        int v6 = sub_1F7C4(a1, *v4);
        uint64_t v7 = 2;
        if (!v6) {
          uint64_t v7 = 0;
        }
        uint64_t result = &a2[v7];
      }
      break;
  }
  return result;
}

std::string *sub_1FF88(std::string *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, int a6)
{
  __int16 v6 = a6;
  int v9 = (std::string::value_type *)a2;
  sub_20610((uint64_t)v20, a2, a3, a4, a6);
  int v11 = v22;
  if (v22 == __p)
  {
    if ((v6 & 0x200) != 0) {
      goto LABEL_20;
    }
    for (; v9 != a3; ++v9)
      std::string::push_back(a1, *v9);
  }
  else
  {
    int v12 = (unsigned __int8 *)&a5[strlen(a5)];
    if ((v6 & 0x200) != 0)
    {
      if ((v6 & 0x400) != 0)
      {
        a1 = sub_201AC((uint64_t)&__p, a1, (unsigned __int8 *)a5, v12, v6);
        goto LABEL_19;
      }
      do
      {
        a1 = sub_201AC((uint64_t)&__p, a1, (unsigned __int8 *)a5, v12, v6);
        int v13 = v25;
        int v14 = v26;
        sub_20448((uint64_t)v20);
      }
      while (v22 != __p);
    }
    else
    {
      if ((v6 & 0x400) != 0)
      {
        uint64_t v18 = v23;
        for (unint64_t i = v24; v18 != i; ++v18)
          std::string::push_back(a1, *v18);
        a1 = sub_201AC((uint64_t)&__p, a1, (unsigned __int8 *)a5, v12, v6);
        int v13 = v25;
        int v14 = v26;
        if ((v6 & 0x200) != 0) {
          goto LABEL_19;
        }
        goto LABEL_15;
      }
      do
      {
        uint64_t v15 = v23;
        for (unint64_t j = v24; v15 != j; ++v15)
          std::string::push_back(a1, *v15);
        a1 = sub_201AC((uint64_t)&__p, a1, (unsigned __int8 *)a5, v12, v6);
        int v13 = v25;
        int v14 = v26;
        sub_20448((uint64_t)v20);
      }
      while (v22 != __p);
    }
    if ((v6 & 0x200) == 0)
    {
LABEL_15:
      while (v13 != v14)
        std::string::push_back(a1, *v13++);
    }
  }
LABEL_19:
  int v11 = __p;
LABEL_20:
  if (v11)
  {
    uint64_t v22 = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_2016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_201AC(uint64_t a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  __int16 v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      int v10 = *v6;
      if (v10 == 92)
      {
        int v9 = v6 + 1;
        if (v6 + 1 != a4)
        {
          int v10 = *v9;
          if ((v10 - 48) <= 9u)
          {
            unint64_t v14 = (v10 - 48);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= v14) {
              uint64_t v15 = a1 + 24;
            }
            else {
              uint64_t v15 = *(void *)a1 + 24 * v14;
            }
            uint64_t v16 = *(std::string::value_type **)v15;
            uint64_t v17 = *(std::string::value_type **)(v15 + 8);
            if (*(std::string::value_type **)v15 != v17)
            {
              do
              {
                std::string::value_type v18 = *v16++;
                std::string::push_back(this, v18);
              }
              while (v16 != v17);
            }
            goto LABEL_9;
          }
          ++v6;
        }
      }
      else if (v10 == 38)
      {
        int v11 = **(std::string::value_type ***)a1;
        int v12 = *(std::string::value_type **)(*(void *)a1 + 8);
        while (v11 != v12)
        {
          std::string::value_type v13 = *v11++;
          std::string::push_back(this, v13);
        }
        goto LABEL_8;
      }
      std::string::push_back(this, v10);
LABEL_8:
      int v9 = v6;
LABEL_9:
      __int16 v6 = v9 + 1;
      if (v9 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      int v19 = *v6;
      int v20 = v6 + 1;
      if (v19 == 36 && v20 != a4)
      {
        int v22 = (char)*v20;
        int v19 = *v20;
        if (v22 > 38)
        {
          if (v22 == 39)
          {
            unint64_t v29 = *(std::string::value_type **)(a1 + 72);
            uint64_t v30 = *(std::string::value_type **)(a1 + 80);
            while (v29 != v30)
            {
              std::string::value_type v31 = *v29++;
              std::string::push_back(this, v31);
            }
            goto LABEL_26;
          }
          if (v22 == 96)
          {
            uint64_t v26 = *(std::string::value_type **)(a1 + 48);
            uint64_t v27 = *(std::string::value_type **)(a1 + 56);
            while (v26 != v27)
            {
              std::string::value_type v28 = *v26++;
              std::string::push_back(this, v28);
            }
            goto LABEL_26;
          }
        }
        else
        {
          if (v22 == 36) {
            goto LABEL_25;
          }
          if (v22 == 38)
          {
            uint64_t v23 = **(std::string::value_type ***)a1;
            uint64_t v24 = *(std::string::value_type **)(*(void *)a1 + 8);
            while (v23 != v24)
            {
              std::string::value_type v25 = *v23++;
              std::string::push_back(this, v25);
            }
            goto LABEL_26;
          }
        }
        if ((v19 - 48) <= 9)
        {
          unint64_t v32 = *v20 - 48;
          if (v6 + 2 != a4)
          {
            uint64_t v33 = v6[2];
            unsigned int v34 = v33 - 48;
            uint64_t v35 = v33 + 10 * (int)v32 - 48;
            if (v34 > 9)
            {
              int v20 = v6 + 1;
            }
            else
            {
              unint64_t v32 = v35;
              int v20 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= v32) {
            uint64_t v36 = a1 + 24;
          }
          else {
            uint64_t v36 = *(void *)a1 + 24 * (int)v32;
          }
          uint64_t v37 = *(std::string::value_type **)v36;
          __int16 v38 = *(std::string::value_type **)(v36 + 8);
          if (*(std::string::value_type **)v36 != v38)
          {
            do
            {
              std::string::value_type v39 = *v37++;
              std::string::push_back(this, v39);
            }
            while (v37 != v38);
          }
          goto LABEL_26;
        }
        LOBYTE(v19) = 36;
      }
      int v20 = v6;
LABEL_25:
      std::string::push_back(this, v19);
LABEL_26:
      __int16 v6 = v20 + 1;
    }
    while (v20 + 1 != a4);
  }
  return this;
}

uint64_t sub_20448(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void **)(a1 + 32);
  int v4 = *(_DWORD *)(v3 - 8);
  int v5 = v4 | 0x800;
  *(_DWORD *)(v3 - 8) = v4 | 0x800;
  if (*(void **)(v3 + 8) == v2) {
    __int16 v6 = (void *)(v3 + 24);
  }
  else {
    __int16 v6 = v2;
  }
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
LABEL_5:
    *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5 | 0x80;
    int v9 = *(char **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v22 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v16, 0, sizeof(v16));
    char v10 = sub_20724(v8, v7, (uint64_t)v9, (uint64_t)__p, v5 | 0x80u);
    sub_20A34((void **)v3, v7, v9, (uint64_t *)__p, (v5 & 0x800) != 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v10 & 1) == 0)
    {
      uint64_t v2 = *(void **)v3;
      if (!*(void *)v3)
      {
LABEL_10:
        *(unsigned char *)(a1 + 128) = 0;
        *(_OWORD *)uint64_t v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 25) = 0u;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(unsigned char *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0;
        *(void *)(a1 + 112) = 0;
        *(unsigned char *)(a1 + 120) = 0;
        *(void *)(a1 + 136) = 0;
        return a1;
      }
LABEL_9:
      *(void *)(a1 + 40) = v2;
      operator delete(v2);
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      goto LABEL_10;
    }
    return a1;
  }
  int v12 = *(char **)(a1 + 8);
  if (v12 == (char *)v7)
  {
    if (!v2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v14 = sub_20724(v13, v7, (uint64_t)v12, (uint64_t)__p, v4 | 0x860u);
  sub_20A34((void **)v3, v7, v12, (uint64_t *)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v14 & 1) == 0)
  {
    ++v7;
    int v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_5;
  }
  return a1;
}

void sub_205F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20610(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  int v9 = (void **)(a1 + 32);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  sub_20724(a4, a2, (uint64_t)a3, (uint64_t)__p, a5);
  sub_20A34(v9, a2, a3, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_206E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v13 = *v11;
    if (!*v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v13 = *v11;
    if (!*v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 40) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  *(void *)(a4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  int v11 = (long long *)(a4 + 24);
  *(void *)(a4 + 32) = a3;
  *(unsigned char *)(a4 + 40) = 0;
  sub_179C0(a4, (v10 + 1), (long long *)(a4 + 24));
  *(void *)(a4 + 48) = a2;
  *(void *)(a4 + 56) = a2;
  *(unsigned char *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(unsigned char *)(a4 + 88) = *(unsigned char *)(a4 + 40);
  if ((v9 & 0x800) == 0) {
    *(void *)(a4 + 104) = a2;
  }
  *(unsigned char *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (sub_174D0(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0)) {
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_21574(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0)) {
      goto LABEL_28;
    }
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (uint64_t i = a2 + 1; i != a3; ++i)
      {
        sub_179C0(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_21574(a1, i, a3, (uint64_t *)a4, v12, 0)) {
              goto LABEL_28;
            }
          }
          else if (sub_20BF4(a1, i, a3, (uint64_t *)a4, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (sub_174D0(a1, i, a3, (uint64_t *)a4, v12, 0))
        {
          goto LABEL_28;
        }
        sub_179C0(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
      }
      sub_179C0(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_21574(a1, a3, a3, (uint64_t *)a4, v12, 0)) {
            goto LABEL_28;
          }
        }
        else if (sub_20BF4(a1, a3, a3, (uint64_t *)a4, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (sub_174D0(a1, a3, a3, (uint64_t *)a4, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    *(void *)(a4 + 8) = *(void *)a4;
    return result;
  }
  if ((sub_20BF4(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_28:
  if (*(void *)(a4 + 8) == *(void *)a4) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = *(long long **)a4;
  }
  uint64_t v15 = *(void *)v14;
  *(void *)(a4 + 56) = *(void *)v14;
  *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v15;
  uint64_t v16 = *((void *)v14 + 1);
  *(void *)(a4 + 72) = v16;
  *(unsigned char *)(a4 + 88) = v16 != *(void *)(a4 + 80);
  return 1;
}

void sub_20A34(void **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  int v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a1) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      uint64_t v13 = &v12[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v13;
    }
  }
  else
  {
    sub_22F40(a1, v11 - v14);
    int v12 = (char *)*a1;
    uint64_t v13 = (char *)a1[1];
  }
  if (v13 != v12)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15);
      if (v19 <= v16) {
        uint64_t v21 = a4 + 3;
      }
      else {
        uint64_t v21 = v20;
      }
      *(void *)&v12[v15] = a2 + *v21 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        char v22 = a4 + 3;
      }
      else {
        char v22 = (uint64_t *)(*a4 + v15);
      }
      *(void *)((char *)*a1 + v15 + 8) = a2 + v22[1] - v10;
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        char v23 = a4 + 3;
      }
      else {
        char v23 = (uint64_t *)(*a4 + v15);
      }
      char v24 = *((unsigned char *)v23 + 16);
      int v12 = (char *)*a1;
      std::string::value_type v25 = (char *)a1[1];
      *((unsigned char *)*a1 + v15 + 16) = v24;
      ++v16;
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v25 - v12) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  uint64_t v26 = (char *)(a2 + a4[6] - v10);
  a1[6] = v26;
  a1[7] = (void *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (void *)(a2 + a4[9] - v10);
  a1[10] = (void *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v26;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_20BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v101 = 0u;
  long long v102 = 0u;
  long long v100 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v84 = (void **)*((void *)&v100 + 1);
    uint64_t v85 = (void **)v101;
    *((void *)&v102 + 1) = 0;
    unint64_t v86 = v101 - *((void *)&v100 + 1);
    if ((void)v101 - *((void *)&v100 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v84);
      uint64_t v85 = (void **)v101;
      uint64_t v84 = (void **)(*((void *)&v100 + 1) + 8);
      *((void *)&v100 + 1) = v84;
      unint64_t v86 = v101 - (void)v84;
    }
    while ((void)v101 - (void)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)unsigned int v97 = 0;
  memset(&v97[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v99, 0, 21);
  sub_21D98((uint64_t)&v100);
  unint64_t v11 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
      + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v99[0] = 0;
  uint64_t v13 = v99[1];
  *(void *)(v11 + 85) = *(void *)((char *)&v99[1] + 5);
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v102 + 1);
  uint64_t v14 = v102;
  uint64_t v16 = ++*((void *)&v102 + 1);
  uint64_t v17 = *((void *)&v100 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v15 + v102;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v100 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  unint64_t v24 = v23 + 56;
  uint64_t v25 = v26;
  unint64_t v27 = (*(void *)(v24 + 8) - v26) >> 4;
  unint64_t v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      *(void *)(v24 + 8) = v25 + 16 * v18;
    }
  }
  else
  {
    sub_18070((char **)v24, v18 - v27);
    uint64_t v16 = *((void *)&v102 + 1);
    uint64_t v14 = v102;
    uint64_t v17 = *((void *)&v100 + 1);
  }
  char v94 = 0;
  unsigned int v28 = 0;
  uint64_t v92 = a3;
  uint64_t v93 = 0;
  unint64_t v29 = v16 + v14 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      sub_17BA0();
    }
    unint64_t v35 = v16 + v102 - 1;
    uint64_t v36 = *(void *)(*((void *)&v100 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v92) {
          goto LABEL_21;
        }
        uint64_t v64 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v65 = v93;
        if ((v94 & (v93 >= v64)) == 0) {
          uint64_t v65 = v64;
        }
        if (v65 == v32)
        {
          int v66 = (void **)*((void *)&v100 + 1);
          uint64_t v67 = v101;
          if ((void)v101 == *((void *)&v100 + 1))
          {
            *((void *)&v102 + 1) = 0;
            unint64_t v81 = 0;
          }
          else
          {
            int v68 = (void *)(*((void *)&v100 + 1) + 8 * ((unint64_t)v102 / 0x2A));
            BOOL v69 = (void *)(*v68 + 96 * ((unint64_t)v102 % 0x2A));
            unint64_t v70 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
                + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
            if (v69 != (void *)v70)
            {
              do
              {
                uint64_t v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                uint64_t v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((uint32_t *)((char *)v69 - *v68) == &stru_FB8.dylib.name.offset)
                {
                  uint64_t v73 = (void *)v68[1];
                  ++v68;
                  BOOL v69 = v73;
                }
              }
              while (v69 != (void *)v70);
              int v66 = (void **)*((void *)&v100 + 1);
              uint64_t v67 = v101;
            }
            *((void *)&v102 + 1) = 0;
            unint64_t v81 = v67 - (void)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                int v66 = (void **)(*((void *)&v100 + 1) + 8);
                *((void *)&v100 + 1) = v66;
                unint64_t v81 = v101 - (void)v66;
              }
              while ((void)v101 - (void)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            uint64_t v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              char v94 = 1;
              uint64_t v93 = v32;
              goto LABEL_8;
            }
            uint64_t v82 = 42;
          }
          *(void *)&long long v102 = v82;
          goto LABEL_76;
        }
        uint64_t v93 = v65;
        unint64_t v74 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v75 = *(void *)(*((void *)&v100 + 1) + 8 * (v74 / 0x2A));
        unint64_t v76 = v74 % 0x2A;
        size_t v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(void *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        uint64_t v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(void *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        uint64_t v79 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v80 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v79 = 0;
        }
        if ((unint64_t)(v79 - (*((void *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        char v94 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v102 + 1);
        if (*((void *)&v102 + 1)) {
          continue;
        }
        if (v94)
        {
          uint64_t v83 = *v91;
          *(void *)uint64_t v83 = a2;
          *(void *)(v83 + 8) = a2 + v93;
          uint64_t v6 = 1;
          *(unsigned char *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v84 = (void **)*((void *)&v100 + 1);
        uint64_t v85 = (void **)v101;
        *((void *)&v102 + 1) = 0;
        unint64_t v86 = v101 - *((void *)&v100 + 1);
        if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v87 = v86 >> 3;
        if (v87 == 1)
        {
          uint64_t v88 = 21;
LABEL_85:
          *(void *)&long long v102 = v88;
        }
        else if (v87 == 2)
        {
          uint64_t v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            uint64_t v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((void)v101 != *((void *)&v100 + 1)) {
            *(void *)&long long v101 = v101 + ((*((void *)&v100 + 1) - v101 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v100) {
          operator delete((void *)v100);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v102;
        if (!(void)v102)
        {
          sub_22694((uint64_t)&v100);
          unint64_t v49 = v102;
        }
        uint64_t v50 = (void *)(*((void *)&v100 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v102 + 1);
        *(void *)&long long v102 = v102 - 1;
        ++*((void *)&v102 + 1);
        uint64_t v56 = v55 + v102;
        unint64_t v57 = (v55 + (uint64_t)v102) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        int v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v48 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_181AC((uint64_t)v97, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(*(void *)v99[1] + 24))(v99[1], 0, v97);
        uint64_t v58 = *((void *)&v100 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        }
        unint64_t v60 = *((void *)&v102 + 1) + v102;
        if (v59 == *((void *)&v102 + 1) + (void)v102)
        {
          sub_21D98((uint64_t)&v100);
          uint64_t v58 = *((void *)&v100 + 1);
          unint64_t v60 = *((void *)&v102 + 1) + v102;
        }
        unint64_t v61 = *(void *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        long long v62 = *(_OWORD *)&v97[16];
        *(_OWORD *)unint64_t v61 = *(_OWORD *)v97;
        *(_OWORD *)(v61 + 16) = v62;
        *(void *)(v61 + 40) = 0;
        *(void *)(v61 + 48) = 0;
        *(void *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v97[32];
        *(void *)(v61 + 48) = *(void *)&v97[48];
        memset(&v97[32], 0, 24);
        *(void *)(v61 + 56) = 0;
        *(void *)(v61 + 64) = 0;
        *(void *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(void *)(v61 + 72) = v99[0];
        __p[0] = 0;
        __p[1] = 0;
        v99[0] = 0;
        uint64_t v63 = v99[1];
        *(void *)(v61 + 85) = *(void *)((char *)&v99[1] + 5);
        *(void *)(v61 + 80) = v63;
        ++*((void *)&v102 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(void *)&v97[32])
        {
          *(void *)&v97[40] = *(void *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        sub_17BF8();
    }
  }
}

void sub_214C8(_Unwind_Exception *a1)
{
  sub_21D20((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_214DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_17B5C((uint64_t *)va);
  sub_21D20((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_21524(_Unwind_Exception *a1)
{
  sub_21D20((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_21538(_Unwind_Exception *a1)
{
  sub_21D20((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_21574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  *(_DWORD *)uint64_t v67 = 0;
  memset(&v67[8], 0, 32);
  long long v68 = 0u;
  memset(v69, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  *(void *)&long long v65 = a3;
  *((void *)&v65 + 1) = a3;
  char v66 = 0;
  *(_DWORD *)long long v62 = 0;
  memset(&v62[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v64, 0, 21);
  uint64_t v71 = sub_17CD4((void **)&v70, (uint64_t)v62);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v71;
  *((_DWORD *)v71 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    sub_17EBC((void **)v13 - 8, v15 - v16, &v65);
    uint64_t v13 = v71;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  uint64_t v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    sub_18070((char **)v13 - 5, v18 - v19);
    uint64_t v13 = v71;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  uint64_t v21 = a3 - a2;
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      sub_17BA0();
    }
    unint64_t v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = *((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v33 = v26 - *((void *)v13 - 11);
        uint64_t v34 = v60;
        if ((v61 & (v60 >= v33)) == 0)
        {
          long long v35 = *(_OWORD *)v25;
          *(_OWORD *)&v67[16] = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v67 = v35;
          if (v67 != v25)
          {
            sub_22A60((char **)&v67[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            sub_22C60((uint64_t)v69, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v36 = *(void **)v24;
          *(void **)((char *)&v69[3] + 5) = *(void **)(v13 - 11);
          v69[3] = v36;
          uint64_t v34 = v33;
        }
        unint64_t v37 = v71;
        if (v34 == v21)
        {
          uint64_t v38 = v70;
          while (v37 != v38)
          {
            uint64_t v39 = (void *)*((void *)v37 - 5);
            if (v39)
            {
              *((void *)v37 - 4) = v39;
              operator delete(v39);
            }
            unint64_t v40 = (void *)*((void *)v37 - 8);
            if (v40)
            {
              *((void *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          uint64_t v71 = v38;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v41 = v34;
          unint64_t v42 = (void *)*((void *)v71 - 5);
          if (v42)
          {
            *((void *)v71 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v60 = v41;
          uint64_t v43 = (void *)*((void *)v37 - 8);
          if (v43)
          {
            *((void *)v37 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v71 = v37 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v71;
        unsigned int v28 = (void *)*((void *)v71 - 5);
        if (v28)
        {
          *((void *)v71 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v71 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_181AC((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v64[1] + 24))(v64[1], 0, v62);
        unint64_t v30 = v71;
        if ((unint64_t)v71 >= v72)
        {
          uint64_t v71 = sub_17CD4((void **)&v70, (uint64_t)v62);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v71 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((void *)v30 + 4) = 0;
          *((void *)v30 + 5) = 0;
          *((void *)v30 + 6) = 0;
          *((void *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((void *)v30 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v30 + 8) = 0;
          *((void *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((void *)v30 + 9) = v64[0];
          __p[0] = 0;
          __p[1] = 0;
          v64[0] = 0;
          uint64_t v32 = v64[1];
          *(void *)(v30 + 85) = *(void *)((char *)&v64[1] + 5);
          *((void *)v30 + 10) = v32;
          uint64_t v71 = v30 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        sub_17BF8();
    }
    uint64_t v13 = v71;
  }
  while (v70 != v71);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = v69[0];
    if (!v69[0]) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = a2 + v60;
  *(unsigned char *)(v44 + 16) = 1;
  if ((void)v68 != *(void *)&v67[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *(void *)&v67[32]) >> 3);
    int v46 = (unsigned char *)(*(void *)&v67[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = v69[0];
  if (v69[0])
  {
LABEL_64:
    v69[1] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v67[32])
  {
    *(void *)&long long v68 = *(void *)&v67[32];
    operator delete(*(void **)&v67[32]);
  }
  long long v52 = v70;
  if (v70)
  {
    uint64_t v53 = v71;
    uint64_t v54 = v70;
    if (v71 != v70)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v70;
    }
    uint64_t v71 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_21B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_17B5C(&a33);
  sub_17C50((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_21BC8(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v4 = a1[4];
  __int16 v5 = &v2[v4 / 0x2A];
  uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
  if (v6 != (char *)v7)
  {
    do
    {
      uint64_t v8 = (void *)*((void *)v6 + 7);
      if (v8)
      {
        *((void *)v6 + 8) = v8;
        operator delete(v8);
      }
      uint64_t v9 = (void *)*((void *)v6 + 4);
      if (v9)
      {
        *((void *)v6 + 5) = v9;
        operator delete(v9);
      }
      v6 += 96;
      if (v6 - (unsigned char *)*v5 == 4032)
      {
        uint64_t v10 = (char *)v5[1];
        ++v5;
        uint64_t v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    uint64_t v2 = (void **)a1[1];
    uint64_t v3 = (void **)a1[2];
  }
  a1[5] = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      uint64_t v12 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **sub_21D20(void **a1)
{
  sub_21BC8(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    __int16 v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21D98(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    __int16 v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)__int16 v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        long long v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        __int16 v5 = v35;
        if (!v37)
        {
          __int16 v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unint64_t v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              size_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    __int16 v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v91 = operator new(0xFC0uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unint64_t v91 = operator new(0xFC0uLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    __int16 v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        long long v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        __int16 v5 = v35;
        if (!v37)
        {
          __int16 v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          __int16 v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      char v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      unsigned int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            long long v65 = &v27[v68];
            BOOL v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unsigned int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  long long v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_22308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_22324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22338(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22368(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  __int16 v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_188D718();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_224F8(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        sub_188D718();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      __int16 v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        __int16 v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      __int16 v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    __int16 v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_22694(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v48 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    sub_224F8((void **)a1, &v48);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v48 = operator new(0xFC0uLL);
      sub_22368((char **)a1, &v48);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v48 = *(void **)(v18 - 8);
      *(void *)(a1 + 16) = v18 - 8;
      sub_224F8((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v48 = operator new(0xFC0uLL);
      sub_224F8((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_19:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    sub_188D718();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    uint64_t v17 = v12;
    if (v3 != v2) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  uint64_t v19 = (char *)operator new(8uLL);
  unint64_t v15 = v19 + 8;
  operator delete(v12);
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v20 = *(uint64_t **)(a1 + 16);
  BOOL v12 = v19;
  *(void *)uint64_t v19 = v14;
  uint64_t v16 = v19 + 8;
  uint64_t v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_29:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17) {
            unint64_t v32 = 1;
          }
          else {
            unint64_t v32 = (v16 - v17) >> 2;
          }
          if (v32 >> 61) {
            sub_188D718();
          }
          uint64_t v33 = (char *)operator new(8 * v32);
          uint64_t v34 = v33;
          unint64_t v35 = v32 >> 2;
          unint64_t v21 = &v33[8 * (v32 >> 2)];
          uint64_t v24 = v21;
          int64_t v36 = v16 - v12;
          if (v16 != v12)
          {
            uint64_t v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v37 = v36 - 8;
            if (v37 < 0x38 || (uint64_t v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              unint64_t v39 = &v33[8 * (v32 >> 2)];
              unint64_t v40 = v12;
              goto LABEL_45;
            }
            uint64_t v42 = (v37 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v39 = &v21[v43];
            unint64_t v40 = &v12[v43];
            uint64_t v44 = (long long *)(v12 + 16);
            int64_t v45 = &v33[v38 + 16];
            uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)int64_t v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_45:
                uint64_t v41 = *(void *)v40;
                v40 += 8;
                *(void *)unint64_t v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          uint64_t v16 = &v33[8 * v32];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v17 = v34;
          goto LABEL_28;
        }
        uint64_t v26 = (v12 - v17) >> 3;
        if (v26 >= -1) {
          uint64_t v27 = v26 + 1;
        }
        else {
          uint64_t v27 = v26 + 2;
        }
        uint64_t v28 = v27 >> 1;
        long long v29 = &v12[-8 * (v27 >> 1)];
        uint64_t v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          uint64_t v30 = v12;
        }
        uint64_t v31 = -v28;
        uint64_t v24 = &v29[v16 - v12];
        unint64_t v21 = &v30[8 * v31];
      }
      else
      {
        unint64_t v21 = v12;
        uint64_t v24 = v16;
        uint64_t v16 = v15;
      }
LABEL_28:
      unint64_t v15 = v16;
      uint64_t v25 = *v3++;
      *(void *)uint64_t v24 = v25;
      uint64_t v22 = v24 + 8;
      uint64_t v16 = v22;
      BOOL v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  unint64_t v21 = v12;
  uint64_t v22 = v16;
LABEL_22:
  uint64_t v23 = *(void **)a1;
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v23) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v23) {
      return;
    }
  }

  operator delete(v23);
}

void sub_22A24(_Unwind_Exception *a1)
{
  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_22A60(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      unint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      unint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      sub_2E00();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *sub_22C60(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      sub_2E00();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             unint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        uint64_t v30 = (char *)result;
        uint64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        uint64_t v30 = (char *)&result[v55];
        uint64_t v31 = &a2[v55];
        unint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          uint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)uint64_t v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  unint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      uint64_t v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        int64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        uint64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  uint64_t v26 = v13;
  if (v20 != a3)
  {
    uint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)uint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void sub_22F40(void **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = (char *)&v5[3 * a2];
      uint64_t v12 = 24 * a2;
      do
      {
        *uint64_t v5 = 0;
        v5[1] = 0;
        *((unsigned char *)v5 + 16) = 0;
        v5 += 3;
        v12 -= 24;
      }
      while (v12);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = &v10[24 * v6];
    uint64_t v14 = 24 * a2;
    int64_t v15 = &v13[24 * a2];
    int64_t v16 = v13;
    do
    {
      *(void *)int64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      v16[16] = 0;
      v16 += 24;
      v14 -= 24;
    }
    while (v14);
    uint64_t v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 3);
        *((void *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
        v13 -= 24;
        v5 -= 3;
      }
      while (v5 != v17);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[24 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

char *sub_230E8@<X0>(unsigned __int8 **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v6 = (unint64_t)a1[1];
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  unint64_t v7 = (int8x16_t *)*a1;
  if (v6 < 8)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *a1;
    goto LABEL_16;
  }
  if (v6 < 0x20)
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0;
    goto LABEL_11;
  }
  int8x16_t v11 = vdupq_n_s8(a2);
  int64x2_t v12 = 0uLL;
  int8x16_t v13 = (int8x16_t)vdupq_n_s64(1uLL);
  int64x2_t v14 = 0uLL;
  unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFE0;
  int64x2_t v15 = 0uLL;
  int64_t v16 = v7 + 1;
  int64x2_t v17 = 0uLL;
  unint64_t v18 = v6 & 0xFFFFFFFFFFFFFFE0;
  int64x2_t v19 = 0uLL;
  int64x2_t v20 = 0uLL;
  int64x2_t v21 = 0uLL;
  int64x2_t v22 = 0uLL;
  int64x2_t v23 = 0uLL;
  int64x2_t v24 = 0uLL;
  int64x2_t v25 = 0uLL;
  int64x2_t v26 = 0uLL;
  int64x2_t v27 = 0uLL;
  int64x2_t v28 = 0uLL;
  int64x2_t v29 = 0uLL;
  int64x2_t v30 = 0uLL;
  do
  {
    uint8x16_t v31 = (uint8x16_t)vceqq_s8(v16[-1], v11);
    uint16x8_t v32 = vmovl_u8(*(uint8x8_t *)v31.i8);
    uint16x8_t v33 = vmovl_high_u8(v31);
    uint32x4_t v34 = vmovl_high_u16(v33);
    v35.i64[0] = v34.u32[2];
    v35.i64[1] = v34.u32[3];
    int64x2_t v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v35, v13));
    uint32x4_t v36 = vmovl_high_u16(v32);
    uint32x4_t v37 = vmovl_u16(*(uint16x4_t *)v33.i8);
    v35.i64[0] = v34.u32[0];
    v35.i64[1] = v34.u32[1];
    int64x2_t v21 = vaddq_s64(v21, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v37.u32[2];
    v35.i64[1] = v37.u32[3];
    int64x2_t v20 = vaddq_s64(v20, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v36.u32[2];
    v35.i64[1] = v36.u32[3];
    int64x2_t v17 = vaddq_s64(v17, (int64x2_t)vandq_s8(v35, v13));
    int8x16_t v38 = *v16;
    v16 += 2;
    uint32x4_t v39 = vmovl_u16(*(uint16x4_t *)v32.i8);
    v35.i64[0] = v37.u32[0];
    v35.i64[1] = v37.u32[1];
    int64x2_t v19 = vaddq_s64(v19, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v39.u32[0];
    v35.i64[1] = v39.u32[1];
    int64x2_t v40 = (int64x2_t)vandq_s8(v35, v13);
    v35.i64[0] = v39.u32[2];
    v35.i64[1] = v39.u32[3];
    int64x2_t v41 = (int64x2_t)vandq_s8(v35, v13);
    v35.i64[0] = v36.u32[0];
    v35.i64[1] = v36.u32[1];
    uint8x16_t v42 = (uint8x16_t)vceqq_s8(v38, v11);
    int64x2_t v15 = vaddq_s64(v15, (int64x2_t)vandq_s8(v35, v13));
    uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)v42.i8);
    uint16x8_t v44 = vmovl_high_u8(v42);
    int64x2_t v14 = vaddq_s64(v14, v41);
    uint32x4_t v45 = vmovl_high_u16(v44);
    int64x2_t v12 = vaddq_s64(v12, v40);
    v35.i64[0] = v45.u32[2];
    v35.i64[1] = v45.u32[3];
    int64x2_t v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v35, v13));
    uint32x4_t v46 = vmovl_high_u16(v43);
    uint32x4_t v47 = vmovl_u16(*(uint16x4_t *)v44.i8);
    v35.i64[0] = v45.u32[0];
    v35.i64[1] = v45.u32[1];
    int64x2_t v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v47.u32[2];
    v35.i64[1] = v47.u32[3];
    int64x2_t v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v46.u32[2];
    v35.i64[1] = v46.u32[3];
    int64x2_t v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v47.u32[0];
    v35.i64[1] = v47.u32[1];
    int64x2_t v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v35, v13));
    uint32x4_t v48 = vmovl_u16(*(uint16x4_t *)v43.i8);
    v35.i64[0] = v46.u32[0];
    v35.i64[1] = v46.u32[1];
    int64x2_t v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v48.u32[2];
    v35.i64[1] = v48.u32[3];
    int64x2_t v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v35, v13));
    v35.i64[0] = v48.u32[0];
    v35.i64[1] = v48.u32[1];
    int64x2_t v23 = vaddq_s64(v23, (int64x2_t)vandq_s8(v35, v13));
    v18 -= 32;
  }
  while (v18);
  uint64_t v8 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v23, v12), vaddq_s64(v27, v19)), vaddq_s64(vaddq_s64(v25, v15), vaddq_s64(v29, v21))), vaddq_s64(vaddq_s64(vaddq_s64(v24, v14), vaddq_s64(v28, v20)), vaddq_s64(vaddq_s64(v26, v17), vaddq_s64(v30, v22)))));
  if (v6 != v10)
  {
    if ((v6 & 0x18) == 0)
    {
      unint64_t v9 = &v7->u8[v10];
      goto LABEL_16;
    }
LABEL_11:
    unint64_t v9 = &v7->u8[v6 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v49 = 0uLL;
    int64x2_t v50 = (int64x2_t)(unint64_t)v8;
    int8x8_t v51 = vdup_n_s8(a2);
    char v52 = (int8x8_t *)&v7->i8[v10];
    unint64_t v53 = v10 - (v6 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v54 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v55 = 0uLL;
    int64x2_t v56 = 0uLL;
    do
    {
      int8x8_t v57 = *v52++;
      uint16x8_t v58 = vmovl_u8((uint8x8_t)vceq_s8(v57, v51));
      uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)v58.i8);
      v60.i64[0] = v59.u32[0];
      v60.i64[1] = v59.u32[1];
      int64x2_t v61 = (int64x2_t)vandq_s8(v60, v54);
      v60.i64[0] = v59.u32[2];
      v60.i64[1] = v59.u32[3];
      int64x2_t v62 = (int64x2_t)vandq_s8(v60, v54);
      uint32x4_t v63 = vmovl_high_u16(v58);
      v60.i64[0] = v63.u32[0];
      v60.i64[1] = v63.u32[1];
      int64x2_t v64 = (int64x2_t)vandq_s8(v60, v54);
      v60.i64[0] = v63.u32[2];
      v60.i64[1] = v63.u32[3];
      int64x2_t v56 = vaddq_s64(v56, (int64x2_t)vandq_s8(v60, v54));
      int64x2_t v55 = vaddq_s64(v55, v64);
      int64x2_t v49 = vaddq_s64(v49, v62);
      int64x2_t v50 = vaddq_s64(v50, v61);
      v53 += 8;
    }
    while (v53);
    uint64_t v8 = vaddvq_s64(vaddq_s64(vaddq_s64(v50, v55), vaddq_s64(v49, v56)));
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_20;
    }
LABEL_16:
    long long v65 = &v7->u8[v6];
    do
    {
      int v66 = *v9++;
      if (v66 == a2) {
        ++v8;
      }
    }
    while (v9 != v65);
  }
LABEL_20:
  sub_23708(a3, v8 + 1);
  uint64_t v68 = (char *)*a1;
  size_t v67 = (size_t)a1[1];
  BOOL v69 = &v68[v67];
  uint64_t v90 = v68;
  uint64_t result = (char *)memchr(v68, a2, v67);
  if (result) {
    uint64_t v71 = result;
  }
  else {
    uint64_t v71 = &v68[v67];
  }
  uint64_t v72 = v71 - v68;
  if (v72 == v67)
  {
    if (v67)
    {
      size_t v88 = v67;
      size_t v89 = (size_t)v68;
      uint64_t v73 = *(char **)(a3 + 8);
      if ((unint64_t)v73 >= *(void *)(a3 + 16))
      {
        uint64_t result = sub_23850((void **)a3, (const void **)&v89, &v88);
      }
      else
      {
        if (v67 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v67 >= 0x17)
        {
          uint64_t v86 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v67 | 7) != 0x17) {
            uint64_t v86 = v67 | 7;
          }
          uint64_t v87 = v86 + 1;
          unint64_t v74 = operator new(v86 + 1);
          *((void *)v73 + 1) = v67;
          *((void *)v73 + 2) = v87 | 0x8000000000000000;
          *(void *)uint64_t v73 = v74;
        }
        else
        {
          v73[23] = v67;
          unint64_t v74 = v73;
        }
        memmove(v74, v68, v67);
        *((unsigned char *)v74 + v67) = 0;
        uint64_t result = v73 + 24;
LABEL_60:
        *(void *)(a3 + 8) = result;
      }
      goto LABEL_61;
    }
    return result;
  }
  uint64_t v75 = &v68[v72];
  uint64_t v76 = *(char **)(a3 + 8);
  do
  {
    unint64_t v80 = v75 - v68;
    size_t v89 = v75 - v68;
    if ((unint64_t)v76 < *(void *)(a3 + 16))
    {
      if (v80 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v80 < 0x17)
      {
        v76[23] = v80;
        size_t v77 = v76;
        if (v75 == v68)
        {
LABEL_32:
          v77[v80] = 0;
          v76 += 24;
          *(void *)(a3 + 8) = v76;
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v81 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v80 | 7) != 0x17) {
          uint64_t v81 = v80 | 7;
        }
        uint64_t v82 = v81 + 1;
        size_t v77 = operator new(v81 + 1);
        *((void *)v76 + 1) = v80;
        *((void *)v76 + 2) = v82 | 0x8000000000000000;
        *(void *)uint64_t v76 = v77;
      }
      memmove(v77, v68, v75 - v68);
      goto LABEL_32;
    }
    uint64_t v76 = sub_23A80((void **)a3, &v90, &v89);
LABEL_33:
    *(void *)(a3 + 8) = v76;
    uint64_t v68 = v75 + 1;
    uint64_t v90 = v75 + 1;
    size_t v78 = v69 - (v75 + 1);
    uint64_t v79 = (char *)memchr(v75 + 1, a2, v78);
    if (v79) {
      uint64_t v75 = v79;
    }
    else {
      uint64_t v75 = v69;
    }
  }
  while (v75 != v69);
  size_t v89 = v78;
  if ((unint64_t)v76 < *(void *)(a3 + 16))
  {
    if (v78 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v78 >= 0x17)
    {
      uint64_t v84 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v78 | 7) != 0x17) {
        uint64_t v84 = v78 | 7;
      }
      uint64_t v85 = v84 + 1;
      uint64_t v83 = operator new(v84 + 1);
      *((void *)v76 + 1) = v78;
      *((void *)v76 + 2) = v85 | 0x8000000000000000;
      *(void *)uint64_t v76 = v83;
    }
    else
    {
      v76[23] = v78;
      uint64_t v83 = v76;
      if (v69 == v68)
      {
LABEL_55:
        v83[v78] = 0;
        uint64_t result = v76 + 24;
        goto LABEL_60;
      }
    }
    memmove(v83, v68, v78);
    goto LABEL_55;
  }
  uint64_t result = sub_23A80((void **)a3, &v90, &v89);
LABEL_61:
  *(void *)(a3 + 8) = result;
  return result;
}

void sub_23658(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_2366C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23684(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_23698(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_236B0(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_236C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_236DC(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_236F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_23708(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 24 * a2;
  unint64_t v6 = (char *)operator new(24 * a2);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  unint64_t v9 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
    v9 -= 24;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 3;
  }
  while (v4 != v2);
  int8x16_t v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      if (*((char *)v2 - 1) < 0) {
        operator delete(*(v2 - 3));
      }
      v2 -= 3;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

char *sub_23850(void **a1, const void **a2, size_t *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v10 = &v9[24 * v4];
  int64x2_t v23 = v10;
  int64x2_t v24 = v10;
  int64x2_t v25 = &v9[24 * v8];
  size_t v11 = *a3;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  int64x2_t v12 = *a2;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64x2_t v19 = (char *)operator new(v17 + 1);
    *((void *)v10 + 1) = v11;
    *((void *)v10 + 2) = v18 | 0x8000000000000000;
    *(void *)long long v10 = v19;
    long long v10 = v19;
  }
  else
  {
    v10[23] = v11;
    if (!v11)
    {
      *long long v10 = 0;
      int8x16_t v13 = v10;
      int64x2_t v14 = v10 + 24;
      int64x2_t v15 = (char *)*a1;
      int64_t v16 = (char *)a1[1];
      if (v16 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v10, v12, v11);
  v10[v11] = 0;
  int8x16_t v13 = v23;
  int64x2_t v14 = v24 + 24;
  int64x2_t v15 = (char *)*a1;
  int64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
LABEL_23:
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v25;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v20 = *(_OWORD *)(v16 - 24);
    *((void *)v13 - 1) = *((void *)v16 - 1);
    *(_OWORD *)(v13 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
    v13 -= 24;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    *((void *)v16 - 3) = 0;
    v16 -= 24;
  }
  while (v16 != v15);
  int64x2_t v21 = (char *)*a1;
  int64_t v16 = (char *)a1[1];
  *a1 = v13;
  a1[1] = v14;
  a1[2] = v25;
  if (v16 != v21)
  {
    do
    {
      if (*(v16 - 1) < 0) {
        operator delete(*((void **)v16 - 3));
      }
      v16 -= 24;
    }
    while (v16 != v21);
    int64_t v16 = v21;
  }
LABEL_28:
  if (v16) {
    operator delete(v16);
  }
  return v14;
}

void sub_23A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23A80(void **a1, const void **a2, size_t *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v10 = &v9[24 * v4];
  int64x2_t v23 = v10;
  int64x2_t v24 = v10;
  int64x2_t v25 = &v9[24 * v8];
  size_t v11 = *a3;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  int64x2_t v12 = *a2;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64x2_t v19 = (char *)operator new(v17 + 1);
    *((void *)v10 + 1) = v11;
    *((void *)v10 + 2) = v18 | 0x8000000000000000;
    *(void *)long long v10 = v19;
    long long v10 = v19;
  }
  else
  {
    v10[23] = v11;
    if (!v11)
    {
      *long long v10 = 0;
      int8x16_t v13 = v10;
      int64x2_t v14 = v10 + 24;
      int64x2_t v15 = (char *)*a1;
      int64_t v16 = (char *)a1[1];
      if (v16 == *a1) {
        goto LABEL_23;
      }
      goto LABEL_20;
    }
  }
  memmove(v10, v12, v11);
  v10[v11] = 0;
  int8x16_t v13 = v23;
  int64x2_t v14 = v24 + 24;
  int64x2_t v15 = (char *)*a1;
  int64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
LABEL_23:
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v25;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    long long v20 = *(_OWORD *)(v16 - 24);
    *((void *)v13 - 1) = *((void *)v16 - 1);
    *(_OWORD *)(v13 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
    v13 -= 24;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    *((void *)v16 - 3) = 0;
    v16 -= 24;
  }
  while (v16 != v15);
  int64x2_t v21 = (char *)*a1;
  int64_t v16 = (char *)a1[1];
  *a1 = v13;
  a1[1] = v14;
  a1[2] = v25;
  if (v16 != v21)
  {
    do
    {
      if (*(v16 - 1) < 0) {
        operator delete(*((void **)v16 - 3));
      }
      v16 -= 24;
    }
    while (v16 != v21);
    int64_t v16 = v21;
  }
LABEL_28:
  if (v16) {
    operator delete(v16);
  }
  return v14;
}

void sub_23C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23CB0(char **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2;
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = &v5[a2];
  if (((*a1)[23] & 0x80000000) == 0)
  {
    uint64_t v8 = (*a1)[23];
    if (v7 < &v6[v8])
    {
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v29, "remaining:");
      unint64_t v9 = &v6[v8];
      unint64_t v10 = &v6[v8] - v7;
      if (v10 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_14:
      sub_188D690();
    }
LABEL_15:
    int64x2_t v19 = (char *)operator new(0x20uLL);
    *(void *)a3 = v19;
    *(_OWORD *)(a3 + 8) = xmmword_20B8890;
    strcpy(v19, "reached the end of the string");
    return;
  }
  if ((unint64_t)v7 >= *(void *)v6 + *((void *)v6 + 1)) {
    goto LABEL_15;
  }
  *((unsigned char *)&v29.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v29, "remaining:");
  uint64_t v18 = v6;
  unint64_t v6 = *(char **)v6;
  uint64_t v8 = *((void *)v18 + 1);
  unint64_t v9 = &v6[v8];
  unint64_t v10 = &v6[v8] - v7;
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_14;
  }
LABEL_4:
  if (v10 > 0x16)
  {
    uint64_t v20 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v20 = v10 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    std::string::size_type v27 = v10;
    int64_t v28 = v21 | 0x8000000000000000;
    std::string __p = p_p;
    if (v7 != v9) {
      goto LABEL_6;
    }
LABEL_19:
    int8x16_t v13 = p_p;
    goto LABEL_23;
  }
  HIBYTE(v28) = v10;
  p_p = &__p;
  if (v7 == v9) {
    goto LABEL_19;
  }
LABEL_6:
  unint64_t v12 = &v6[v8] - &v5[v4];
  if (v12 < 0x20)
  {
    int8x16_t v13 = p_p;
  }
  else if ((unint64_t)((char *)p_p - &v5[v4]) < 0x20)
  {
    int8x16_t v13 = p_p;
  }
  else
  {
    int8x16_t v13 = (char *)p_p + (v12 & 0xFFFFFFFFFFFFFFE0);
    v7 += v12 & 0xFFFFFFFFFFFFFFE0;
    int64x2_t v14 = (long long *)&v5[v4 + 16];
    int64x2_t v15 = p_p + 1;
    unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v17 = *v14;
      *(v15 - 1) = *(v14 - 1);
      *int64x2_t v15 = v17;
      v14 += 2;
      v15 += 2;
      v16 -= 32;
    }
    while (v16);
    if (v12 == (v12 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_23;
    }
  }
  do
  {
    char v22 = *v7++;
    *v13++ = v22;
  }
  while (v7 != v9);
LABEL_23:
  *int8x16_t v13 = 0;
  if (v28 >= 0) {
    int64x2_t v23 = (const std::string::value_type *)&__p;
  }
  else {
    int64x2_t v23 = (const std::string::value_type *)__p;
  }
  if (v28 >= 0) {
    std::string::size_type v24 = HIBYTE(v28);
  }
  else {
    std::string::size_type v24 = v27;
  }
  int64x2_t v25 = std::string::append(&v29, v23, v24);
  *(std::string *)a3 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_33:
    operator delete(v29.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
}

void sub_23F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23F6C(char **a1, int a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)unint64_t v5 = a2;
    v5[8] = 0;
    *(_OWORD *)(v5 + 12) = 0u;
    *(_OWORD *)(v5 + 28) = 0u;
    *(_OWORD *)(v5 + 38) = 0u;
    v5[56] = 0;
    *(_OWORD *)(v5 + 60) = 0u;
    *(_OWORD *)(v5 + 76) = 0u;
    *(_OWORD *)(v5 + 86) = 0u;
    unint64_t v6 = v5 + 112;
    *((_DWORD *)v5 + 26) = 0;
LABEL_3:
    a1[1] = v6;
    return;
  }
  unint64_t v7 = *a1;
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)v7) >> 4);
  if (2 * v10 > v9) {
    unint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x124924924924924) {
    unint64_t v11 = 0x249249249249249;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 > 0x249249249249249) {
    sub_188D718();
  }
  uint64_t v12 = 112 * v11;
  int8x16_t v13 = (char *)operator new(112 * v11);
  int64x2_t v14 = &v13[112 * v8];
  *(_DWORD *)int64x2_t v14 = a2;
  v14[8] = 0;
  int64x2_t v15 = &v13[v12];
  *(_OWORD *)(v14 + 12) = 0u;
  *(_OWORD *)(v14 + 28) = 0u;
  *(_OWORD *)(v14 + 38) = 0u;
  v14[56] = 0;
  *(_OWORD *)(v14 + 60) = 0u;
  *(_OWORD *)(v14 + 76) = 0u;
  *(_OWORD *)(v14 + 86) = 0u;
  *((_DWORD *)v14 + 26) = 0;
  unint64_t v6 = v14 + 112;
  if (v5 == v7)
  {
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
    if (!v7) {
      goto LABEL_3;
    }
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v5 - 7);
      long long v17 = *((_OWORD *)v5 - 5);
      *((_OWORD *)v14 - 6) = *((_OWORD *)v5 - 6);
      *((_OWORD *)v14 - 5) = v17;
      *((_OWORD *)v14 - 7) = v16;
      long long v18 = *((_OWORD *)v5 - 4);
      long long v19 = *((_OWORD *)v5 - 3);
      long long v20 = *((_OWORD *)v5 - 1);
      uint64_t v21 = v14 - 112;
      *((_OWORD *)v14 - 2) = *((_OWORD *)v5 - 2);
      *((_OWORD *)v14 - 1) = v20;
      *((_OWORD *)v14 - 4) = v18;
      *((_OWORD *)v14 - 3) = v19;
      v5 -= 112;
      v14 -= 112;
    }
    while (v5 != v7);
    *a1 = v21;
    a1[1] = v6;
    a1[2] = v15;
    if (!v7) {
      goto LABEL_3;
    }
  }
  operator delete(v7);
  a1[1] = v6;
}

void sub_24128(char ***a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = (char **)((char *)v4 + 1);
  LODWORD(v4) = *(unsigned __int8 *)v4;
  *(_WORD *)(a2 + 44) = 0;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFF80;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)a2 = v4 == 123;
  if (v4 == 123) {
    int v5 = 125;
  }
  else {
    int v5 = 41;
  }
  sub_23CB0((char **)a1, 0, (uint64_t)__p);
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(__p[0]);
  }
  while (1)
  {
    unint64_t v7 = (char *)*a1;
    if (*((char *)*a1 + 23) < 0)
    {
      unint64_t v10 = (char *)(*(void *)v7 + *((void *)v7 + 1));
      unint64_t v9 = (char *)a1[1];
      if (v9 == v10) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v8 = &v7[*((unsigned __int8 *)*a1 + 23)];
      unint64_t v9 = (char *)a1[1];
      if (v9 == v8) {
        goto LABEL_30;
      }
    }
    int v11 = *v9;
    if (v11 == 59)
    {
LABEL_30:
      sub_E1B4((uint64_t)__p);
      long long v18 = sub_188FC78(v34, (uint64_t)"closing curly/parenthesis not found?", 36);
      int v19 = *((char *)*a1 + 23);
      if (v19 >= 0) {
        long long v20 = (char *)*a1;
      }
      else {
        long long v20 = **a1;
      }
      if (v19 >= 0) {
        uint64_t v21 = *((unsigned __int8 *)*a1 + 23);
      }
      else {
        uint64_t v21 = (uint64_t)(*a1)[1];
      }
      sub_188FC78(v18, (uint64_t)v20, v21);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v32);
    }
    if (v5 == v11) {
      break;
    }
    if (v11 == 45) {
      a1[1] = (char **)++v9;
    }
    a1[1] = (char **)(v9 + 1);
    int v12 = *v9;
    if (v12 < 0)
    {
      if (!__maskrune(*v9, 0x100uLL))
      {
LABEL_48:
        sub_23CB0((char **)a1, 0, (uint64_t)__p);
        if (SHIBYTE(v34[0]) < 0) {
          operator delete(__p[0]);
        }
        sub_E1B4((uint64_t)__p);
        std::string::size_type v27 = sub_188FC78(v34, (uint64_t)"alpha expected, got: ", 21);
        v32.__r_.__value_.__s.__data_[0] = v12;
        int64_t v28 = sub_188FC78(v27, (uint64_t)&v32, 1);
        sub_23CB0((char **)a1, 0, (uint64_t)&v32);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v29 = &v32;
        }
        else {
          std::string v29 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v32.__r_.__value_.__l.__size_;
        }
        sub_188FC78(v28, (uint64_t)v29, size);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        uint8x16_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::logic_error::logic_error(v31, &v32);
      }
    }
    else if ((_DefaultRuneLocale.__runetype[v12] & 0x100) == 0)
    {
      goto LABEL_48;
    }
    int8x16_t v13 = (char *)a1[1];
    if (*v13 < 0 || (uint64_t v14 = *v13, (_DefaultRuneLocale.__runetype[v14] & 0x400) == 0))
    {
      sub_23CB0((char **)a1, 0, (uint64_t)__p);
      if (SHIBYTE(v34[0]) < 0) {
        operator delete(__p[0]);
      }
      sub_E1B4((uint64_t)__p);
      int64x2_t v23 = sub_188FC78(v34, (uint64_t)"digit expected, got: ", 21);
      sub_23CB0((char **)a1, 0, (uint64_t)&v32);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = &v32;
      }
      else {
        std::string::size_type v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = v32.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v23, (uint64_t)v24, v25);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      int64x2_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v26, &v32);
    }
    int v15 = 0;
    long long v16 = (char **)(v13 + 1);
    do
    {
      if ((_DefaultRuneLocale.__runetype[v14] & 0x400) == 0) {
        break;
      }
      a1[1] = v16;
      int v15 = *((char *)v16 - 1) + 10 * v15 - 48;
      int v17 = *(char *)v16;
      uint64_t v14 = *(unsigned __int8 *)v16;
      long long v16 = (char **)((char *)v16 + 1);
    }
    while ((v17 & 0x80000000) == 0);
    if (v11 == 45) {
      int v6 = -v15;
    }
    else {
      int v6 = v15;
    }
    sub_127FC(a2, v12, v6);
  }
  a1[1] = (char **)(v9 + 1);
}

void sub_2458C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v16)
  {
LABEL_6:
    sub_1C02990((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_2467C(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = (v4
        + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
        + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
        + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v5 == v14)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v5 == v12)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_24794(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7 + (((v6 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v6 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v6 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (v7
          + (((v6 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
          + (((v6 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
          + 2654435769u) ^ (v6 + 0x388152A534) ^ 0xDEADBEEFLL;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v6 && *((_DWORD *)v12 + 5) == v7) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            unint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v6 && *((_DWORD *)v12 + 5) == v7) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  long long v18 = operator new(0x20uLL);
  *long long v18 = 0;
  v18[1] = v8;
  v18[2] = *(void *)a3;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(a3 + 8);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    char v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *long long v18 = *v22;
LABEL_69:
      *char v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        char v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        char v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v21 = *(void *)a1;
      char v22 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *long long v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_24AE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_24AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *unint64_t v25 = 0;
  v25[1] = v10;
  int64x2_t v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)int64x2_t v26 = *(_OWORD *)a3;
    v26[2] = *(void *)(a3 + 16);
  }
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_24F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_24F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_24F64(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_24FB4(void **a1)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - v3) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[144 * v4];
  *((void *)v8 + 14) = 0;
  *((void *)v8 + 15) = 0;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  unint64_t v9 = &v7[144 * v6];
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)unint64_t v8 = 0u;
  *((_DWORD *)v8 + 28) = 32;
  *((void *)v8 + 16) = 0;
  *((void *)v8 + 17) = 0;
  unint64_t v10 = v8 + 144;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v11 = *((_OWORD *)v2 - 9);
    long long v12 = *((_OWORD *)v2 - 8);
    long long v13 = *((_OWORD *)v2 - 6);
    *((_OWORD *)v8 - 7) = *((_OWORD *)v2 - 7);
    *((_OWORD *)v8 - 6) = v13;
    *((_OWORD *)v8 - 9) = v11;
    *((_OWORD *)v8 - 8) = v12;
    long long v14 = *((_OWORD *)v2 - 5);
    long long v15 = *((_OWORD *)v2 - 4);
    long long v16 = *((_OWORD *)v2 - 3);
    *((_DWORD *)v8 - 8) = *((_DWORD *)v2 - 8);
    *((_OWORD *)v8 - 4) = v15;
    *((_OWORD *)v8 - 3) = v16;
    *((_OWORD *)v8 - 5) = v14;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v2 - 24);
    *((void *)v8 - 1) = *((void *)v2 - 1);
    v8 -= 144;
    *((void *)v2 - 3) = 0;
    *((void *)v2 - 2) = 0;
    *((void *)v2 - 1) = 0;
    v2 -= 144;
  }
  while (v2 != v3);
  unint64_t v17 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v17)
  {
    do
    {
      uint64_t v18 = (void *)*((void *)v2 - 3);
      if (v18)
      {
        *((void *)v2 - 2) = v18;
        operator delete(v18);
      }
      v2 -= 144;
    }
    while (v2 != v17);
    uint64_t v2 = v17;
  }
  if (v2) {
LABEL_20:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_25170(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v14 = operator new(0x18uLL);
  *long long v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *long long v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_25480(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25494(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_25170(a1, i + 4, i + 4);
  return a1;
}

void sub_255B0(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_255C4(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255D8(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  BOOL v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *v6;
  if (!*v6) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      unint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      return 0;
    }
LABEL_11:
    unint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      return 0;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
LABEL_22:
  sub_256F0(a1, v7, (uint64_t)&__p);
  uint64_t v12 = __p;
  std::string __p = 0;
  if (v12) {
    operator delete(v12);
  }
  return 1;
}

void *sub_256F0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  BOOL v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    BOOL v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_25824(void *a1, uint64_t a2)
{
  int8x8_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    long long v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int8x8_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          long long v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_25A54(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (char *)operator new(0x98uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  unint64_t v27 = v26 + 16;
  float v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)unint64_t v27 = v29;
  }
  *(_OWORD *)(v26 + 104) = 0u;
  *((void *)v26 + 15) = 0;
  *((void *)v26 + 16) = 0;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 26) = 1065353216;
  *((void *)v26 + 14) = -1;
  *((_DWORD *)v26 + 30) = 0x7FFFFFFF;
  *((void *)v26 + 17) = 0;
  *((void *)v26 + 18) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v33 = *v32;
  *unint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_25ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25EFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25EFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25EFC(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_25F44((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_25F44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 120);
    unint64_t v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 144;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 120) = v2;
    operator delete(v4);
  }
  unint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    do
    {
      int8x8_t v7 = (void *)*v6;
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  unint64_t v8 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v8) {
    operator delete(v8);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2601C(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = (int8x16_t *)a1;
  unint64_t v6 = a4 - (unint64_t)a2;
  unint64_t v7 = v6 + 8 * (a3 - (void)a1);
  if (*a5)
  {
    if (a2)
    {
      if (64 - a2 >= v7) {
        unint64_t v8 = v6 + 8 * (a3 - (void)a1);
      }
      else {
        unint64_t v8 = 64 - a2;
      }
      unint64_t v5 = (int8x16_t *)(a1 + 1);
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *a1));
      v9.i16[0] = vaddlv_u8(v9);
      uint64_t result = v9.u32[0];
      v7 -= v8;
      unint64_t v11 = v7 - 64;
      if (v7 >= 0x40) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = 0;
      unint64_t v11 = v7 - 64;
      if (v7 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          uint64_t v17 = (v11 >> 6) + 1;
          unint64_t v12 = (int8x8_t *)v5 + (v17 & 0x7FFFFFFFFFFFFFCLL);
          v7 -= (v17 & 0x7FFFFFFFFFFFFFCLL) << 6;
          int64x2_t v18 = 0uLL;
          int64x2_t v19 = (int64x2_t)(unint64_t)result;
          uint64_t v20 = v5 + 1;
          uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            int64x2_t v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20[-1]))));
            int64x2_t v18 = (int64x2_t)vpadalq_u32((uint64x2_t)v18, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v20))));
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          uint64_t result = vaddvq_s64(vaddq_s64(v18, v19));
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFCLL)) {
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v12 = (int8x8_t *)v5;
        }
        do
        {
          int8x8_t v22 = *v12++;
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          result += v23.u32[0];
          v7 -= 64;
        }
        while (v7 > 0x3F);
LABEL_22:
        if (!v7) {
          return result;
        }
        unint64_t v24 = *(void *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
        goto LABEL_32;
      }
    }
    unint64_t v12 = (int8x8_t *)v5;
    goto LABEL_22;
  }
  if (a2)
  {
    if (64 - a2 >= v7) {
      unint64_t v13 = v6 + 8 * (a3 - (void)a1);
    }
    else {
      unint64_t v13 = 64 - a2;
    }
    unint64_t v5 = (int8x16_t *)(a1 + 1);
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~*a1));
    v14.i16[0] = vaddlv_u8(v14);
    uint64_t result = v14.u32[0];
    v7 -= v13;
    unint64_t v15 = v7 - 64;
    if (v7 >= 0x40) {
      goto LABEL_14;
    }
LABEL_25:
    char v16 = (uint64_t *)v5;
    goto LABEL_30;
  }
  uint64_t result = 0;
  unint64_t v15 = v7 - 64;
  if (v7 < 0x40) {
    goto LABEL_25;
  }
LABEL_14:
  if (v15 >= 0xC0)
  {
    uint64_t v25 = (v15 >> 6) + 1;
    char v16 = &v5->i64[v25 & 0x7FFFFFFFFFFFFFCLL];
    v7 -= (v25 & 0x7FFFFFFFFFFFFFCLL) << 6;
    int64x2_t v26 = 0uLL;
    int64x2_t v27 = (int64x2_t)(unint64_t)result;
    float v28 = v5 + 1;
    uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v28[-1])))));
      int64x2_t v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v28)))));
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t result = vaddvq_s64(vaddq_s64(v26, v27));
    if (v25 == (v25 & 0x7FFFFFFFFFFFFFCLL)) {
      goto LABEL_30;
    }
  }
  else
  {
    char v16 = (uint64_t *)v5;
  }
  do
  {
    uint64_t v30 = *v16++;
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)~v30);
    v31.i16[0] = vaddlv_u8(v31);
    result += v31.u32[0];
    v7 -= 64;
  }
  while (v7 > 0x3F);
LABEL_30:
  if (!v7) {
    return result;
  }
  unint64_t v24 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v16;
LABEL_32:
  uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v32.i16[0] = vaddlv_u8(v32);
  result += v32.u32[0];
  return result;
}

_DWORD *sub_26290@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X8>)
{
  double v8 = (double)((unsigned __int16)sub_515C(a1) - 1) * 6.28318531 / 365.0;
  __double2 v9 = __sincos_stret(v8);
  __double2 v10 = __sincos_stret(v8 + v8);
  __double2 v11 = __sincos_stret(v8 * 3.0);
  long double v12 = v11.__sinval * 0.00148
      + v10.__sinval * 0.000907
      + v9.__sinval * 0.070257
      + v9.__cosval * -0.399912
      + 0.006918
      + v10.__cosval * -0.006758
      + v11.__cosval * -0.002697;
  int v13 = sub_4D04(a1);
  LODWORD(v14) = *a2;
  unint64_t v29 = v14;
  LODWORD(v14) = a2[1];
  long double v15 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
  long double v16 = atan((v15 + -1.0 / v15) * 0.5) * 57.2957795 * 3.14159265 / 180.0;
  double v17 = cos(v16);
  long double v18 = -0.0145380805 / (v17 * cos(v12));
  double v19 = tan(v16);
  long double v20 = tan(v12);
  double v21 = acos(v18 - v19 * v20) * 180.0 / 3.14159265 * 8.0 * 60.0 * 10.0;
  if (v21 >= 0.0)
  {
    if (v21 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v22 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    if (v21 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v22 = (uint64_t)(v21 + v21);
    if (v22 >= 1) {
      --v22;
    }
  }
  double v21 = (double)(v22 >> 1);
LABEL_9:
  *a3 = (int)v21;
  uint8x8_t v23 = (_DWORD *)sub_44E8((uint64_t)a4, a1);
  sub_4E10(v23, 0xCu);
  sub_4E8C(a4, 0);
  double v24 = (((double)v29 * 360.0 / 4294967300.0 + -180.0) * 4.0
       + (v9.__cosval * 0.001868
        + 0.000075
        + v9.__sinval * -0.032077
        + v10.__cosval * -0.014615
        + v10.__sinval * -0.040849)
       * 229.18
       + (double)v13 / -600.0)
      * 60.0
      * 10.0;
  if (v24 >= 0.0)
  {
    if (v24 >= 4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v25 = (uint64_t)(v24 + v24) + 1;
  }
  else
  {
    if (v24 <= -4.50359963e15) {
      goto LABEL_17;
    }
    uint64_t v25 = (uint64_t)(v24 + v24);
    if (v25 >= 1) {
      --v25;
    }
  }
  double v24 = (double)(v25 >> 1);
LABEL_17:
  int v31 = (int)v24;
  sub_5754(a4, &v31);
  double v26 = (double)*a3 * 0.5;
  if (v26 >= 0.0)
  {
    if (v26 < 4.50359963e15)
    {
      uint64_t v27 = (uint64_t)(v26 + v26) + 1;
LABEL_24:
      double v26 = (double)(v27 >> 1);
    }
  }
  else if (v26 > -4.50359963e15)
  {
    uint64_t v27 = (uint64_t)(v26 + v26);
    if (v27 >= 1) {
      --v27;
    }
    goto LABEL_24;
  }
  int v30 = (int)v26;
  return sub_5754(a4, &v30);
}

void sub_266A8(_Unwind_Exception *a1)
{
  sub_4814(v1);
  _Unwind_Resume(a1);
}

void sub_266BC(_Unwind_Exception *a1)
{
  sub_4814(v1);
  _Unwind_Resume(a1);
}

void sub_266D0(_Unwind_Exception *a1)
{
  sub_4814(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_266E4(uint64_t a1)
{
  return a1;
}

BOOL sub_26710(const char *a1, int *a2, const char *a3, int *a4)
{
  sub_26A18((uint64_t)v11, a1);
  sub_26A18((uint64_t)v10, a3);
  if (sub_2A9F8(v11) && sub_2A9F8(v10))
  {
    int v7 = sub_2A9B8(v11, *a2);
    BOOL v8 = v7 == sub_2A9B8((CFTimeZoneRef *)v10, *a4);
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_26C4C(v10);
  sub_26C4C((const void **)v11);
  return v8;
}

void sub_267B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_267CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11)
{
}

BOOL sub_267E8(CFTimeZoneRef *a1, int *a2, CFTimeZoneRef *a3, int *a4)
{
  BOOL result = sub_2A9F8(a1);
  if (result)
  {
    BOOL result = sub_2A9F8(a3);
    if (result)
    {
      int v9 = sub_2A9B8(a1, *a2);
      return v9 == sub_2A9B8(a3, *a4);
    }
  }
  return result;
}

uint64_t sub_26854(int *a1, int *a2, const char *a3)
{
  int v3 = *a1 - *a2;
  if (v3 < 0) {
    int v3 = *a2 - *a1;
  }
  if (v3 >> 6 < 0x2A3) {
    return 0;
  }
  sub_26A18((uint64_t)v8, a3);
  if (sub_2A9F8(v8)) {
    uint64_t v7 = sub_5224(*a1, *a2, (CFTimeZoneRef *)v8);
  }
  else {
    uint64_t v7 = 0;
  }
  sub_26C4C(v8);
  return v7;
}

void sub_268F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_26908(uint64_t a1)
{
  *(void *)a1 = CFTimeZoneCopyDefault();
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_26938(uint64_t a1, const char *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x8000100u);
  CFTimeZoneRef v4 = CFTimeZoneCreateWithName(0, v3, 1u);
  CFRelease(v3);
  *(void *)a1 = v4;
  if (v4) {
    return a1;
  }
  if (byte_25505C7 >= 0) {
    unint64_t v6 = (const char *)&qword_25505B0;
  }
  else {
    unint64_t v6 = (const char *)qword_25505B0;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  CFTimeZoneRef v8 = CFTimeZoneCreateWithName(0, v7, 1u);
  CFRelease(v7);
  *(void *)a1 = v8;
  *(unsigned char *)(a1 + 8) = 1;
  return a1;
}

CFTimeZoneRef sub_26A1C(uint64_t a1, uint64_t a2)
{
  CFStringRef Name = CFTimeZoneGetName(*(CFTimeZoneRef *)a2);
  if (Name)
  {
    CFTimeZoneRef result = CFTimeZoneCreateWithName(0, Name, 1u);
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  }
  else
  {
    CFTimeZoneRef result = (CFTimeZoneRef)sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v8);
      sub_188FC78(v8, (uint64_t)"Could not resolve a time zone name", 34);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v7 < 0) {
        operator delete(__p);
      }
      if (v9 < 0) {
        operator delete((void *)v8[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (CFTimeZoneRef)std::ios::~ios();
    }
  }
  return result;
}

void sub_26BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_26C08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  sub_26A1C(a1, a2);
  return a1;
}

uint64_t sub_26C34(uint64_t result, uint64_t a2)
{
  *(void *)CFTimeZoneRef result = *(void *)a2;
  *(void *)a2 = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

const void **sub_26C4C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **sub_26C80(const void **a1, uint64_t a2)
{
  CFTimeZoneRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  sub_26A1C((uint64_t)a1, a2);
  return a1;
}

void sub_26CC0(CFTimeZoneRef *a1@<X0>, void *a2@<X8>)
{
  CFStringRef Name = CFTimeZoneGetName(*a1);

  sub_67D0(Name, a2);
}

void sub_26CFC(CFTimeZoneRef *a1@<X0>, uint64_t a2@<X8>)
{
  CFStringRef Name = CFTimeZoneGetName(*a1);
  sub_67D0(Name, __p);
  sub_26DC4();
  CFTimeZoneRef v4 = sub_2D298(qword_25505F0, (uint64_t)__p);
  if (v4)
  {
    if (*((char *)v4 + 63) < 0)
    {
      sub_4200((unsigned char *)a2, (void *)v4[5], v4[6]);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 5);
      *(void *)(a2 + 16) = v4[7];
      *(_OWORD *)a2 = v5;
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_26DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_26DC4()
{
  __chkstk_darwin();
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_25505D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_25505D0))
  {
    sub_2AB2C((uint64_t)v2, "Africa/Abidjan", "CI");
    sub_2AB2C((uint64_t)&v3, "Africa/Algiers", "DZ");
    sub_2AC88((uint64_t)&v4, "Africa/Asmera", "KE");
    sub_2AC88((uint64_t)&v5, "Africa/Bissau", "GW");
    sub_2ADE4((uint64_t)&v6, "Africa/Cairo", "EG");
    sub_2AF40((uint64_t)&v7, "Africa/Casablanca", "MA");
    sub_2ADE4((uint64_t)&v8, "Africa/Ceuta", "ES");
    sub_2B09C((uint64_t)&v9, "Africa/El_Aaiun", "EH");
    sub_2B1F8((uint64_t)&v10, "Africa/Johannesburg", "ZA");
    sub_2B354((uint64_t)&v11, "Africa/Juba", "SS");
    sub_2B09C((uint64_t)&v12, "Africa/Khartoum", "SD");
    sub_2ADE4((uint64_t)&v13, "Africa/Lagos", "NG");
    sub_2AC88((uint64_t)&v14, "Africa/Maputo", "MZ");
    sub_2B09C((uint64_t)&v15, "Africa/Monrovia", "LR");
    sub_2AB2C((uint64_t)&v16, "Africa/Nairobi", "KE");
    sub_2B09C((uint64_t)&v17, "Africa/Ndjamena", "TD");
    sub_2B09C((uint64_t)&v18, "Africa/Sao_Tome", "ST");
    sub_2B09C((uint64_t)&v19, "Africa/Timbuktu", "CI");
    sub_2AB2C((uint64_t)&v20, "Africa/Tripoli", "LY");
    sub_2ADE4((uint64_t)&v21, "Africa/Tunis", "TN");
    sub_2B09C((uint64_t)&v22, "Africa/Windhoek", "NA");
    sub_2ADE4((uint64_t)&v23, "America/Adak", "US");
    sub_2AF40((uint64_t)&v24, "America/Anchorage", "US");
    sub_2AF40((uint64_t)&v25, "America/Araguaina", "BR");
    sub_2B4B0((uint64_t)&v26, "America/Argentina/Buenos_Aires", "AR");
    sub_2B60C((uint64_t)&v27, "America/Argentina/Catamarca", "AR");
    sub_2B768((uint64_t)&v28, "America/Argentina/ComodRivadavia", "AR");
    sub_2B8C4((uint64_t)&v29, "America/Argentina/Cordoba", "AR");
    sub_2BA20((uint64_t)&v30, "America/Argentina/Jujuy", "AR");
    sub_2BB7C((uint64_t)&v31, "America/Argentina/La_Rioja", "AR");
    sub_2B8C4((uint64_t)&v32, "America/Argentina/Mendoza", "AR");
    sub_2B4B0((uint64_t)&v33, "America/Argentina/Rio_Gallegos", "AR");
    sub_2BA20((uint64_t)&v34, "America/Argentina/Salta", "AR");
    sub_2BB7C((uint64_t)&v35, "America/Argentina/San_Juan", "AR");
    sub_2BB7C((uint64_t)&v36, "America/Argentina/San_Luis", "AR");
    sub_2B8C4((uint64_t)&v37, "America/Argentina/Tucuman", "AR");
    sub_2B8C4((uint64_t)&v38, "America/Argentina/Ushuaia", "AR");
    sub_2BCD8((uint64_t)&v39, "America/Asuncion", "PY");
    sub_2ADE4((uint64_t)&v40, "America/Atka", "US");
    sub_2AC88((uint64_t)&v41, "America/Bahia", "BR");
    sub_2BE34((uint64_t)&v42, "America/Bahia_Banderas", "MX");
    sub_2BCD8((uint64_t)&v43, "America/Barbados", "BB");
    sub_2AC88((uint64_t)&v44, "America/Belem", "BR");
    sub_2AB2C((uint64_t)&v45, "America/Belize", "BZ");
    sub_2AF40((uint64_t)&v46, "America/Boa_Vista", "BR");
    sub_2AB2C((uint64_t)&v47, "America/Bogota", "CO");
    sub_2AC88((uint64_t)&v48, "America/Boise", "US");
    sub_2BF90((uint64_t)&v49, "America/Buenos_Aires", "AR");
    sub_2C0EC((uint64_t)&v50, "America/Cambridge_Bay", "CA");
    sub_2BF90((uint64_t)&v51, "America/Campo_Grande", "BR");
    sub_2AB2C((uint64_t)&v52, "America/Cancun", "MX");
    sub_2B09C((uint64_t)&v53, "America/Caracas", "VE");
    sub_2AF40((uint64_t)&v54, "America/Catamarca", "AR");
    sub_2B09C((uint64_t)&v55, "America/Cayenne", "GF");
    sub_2B09C((uint64_t)&v56, "America/Chicago", "US");
    sub_2AF40((uint64_t)&v57, "America/Chihuahua", "MX");
    sub_2C0EC((uint64_t)&v58, "America/Coral_Harbour", "PA");
    sub_2B09C((uint64_t)&v59, "America/Cordoba", "AR");
    sub_2C248((uint64_t)&v60, "America/Costa_Rica", "CR");
    sub_2AB2C((uint64_t)&v61, "America/Cuiaba", "BR");
    sub_2BF90((uint64_t)&v62, "America/Danmarkshavn", "GL");
    sub_2AB2C((uint64_t)&v63, "America/Dawson", "CA");
    sub_2BF90((uint64_t)&v64, "America/Dawson_Creek", "CA");
    sub_2AB2C((uint64_t)&v65, "America/Denver", "US");
    sub_2B09C((uint64_t)&v66, "America/Detroit", "US");
    sub_2BCD8((uint64_t)&v67, "America/Edmonton", "CA");
    sub_2BCD8((uint64_t)&v68, "America/Eirunepe", "BR");
    sub_2B1F8((uint64_t)&v69, "America/El_Salvador", "SV");
    sub_2BCD8((uint64_t)&v70, "America/Ensenada", "MX");
    sub_2B1F8((uint64_t)&v71, "America/Fort_Nelson", "CA");
    sub_2C248((uint64_t)&v72, "America/Fort_Wayne", "US");
    sub_2AF40((uint64_t)&v73, "America/Fortaleza", "BR");
    sub_2AF40((uint64_t)&v74, "America/Glace_Bay", "CA");
    sub_2B09C((uint64_t)&v75, "America/Godthab", "GL");
    sub_2AF40((uint64_t)&v76, "America/Goose_Bay", "CA");
    sub_2C248((uint64_t)&v77, "America/Grand_Turk", "TC");
    sub_2AF40((uint64_t)&v78, "America/Guatemala", "GT");
    sub_2AF40((uint64_t)&v79, "America/Guayaquil", "EC");
    sub_2AB2C((uint64_t)&v80, "America/Guyana", "GY");
    sub_2B09C((uint64_t)&v81, "America/Halifax", "CA");
    sub_2AB2C((uint64_t)&v82, "America/Havana", "CU");
    sub_2C248((uint64_t)&v83, "America/Hermosillo", "MX");
    sub_2C3A4((uint64_t)&v84, "America/Indiana/Indianapolis", "US");
    sub_2BF90((uint64_t)&v85, "America/Indiana/Knox", "US");
    sub_2BA20((uint64_t)&v86, "America/Indiana/Marengo", "US");
    sub_2BB7C((uint64_t)&v87, "America/Indiana/Petersburg", "US");
    sub_2B8C4((uint64_t)&v88, "America/Indiana/Tell_City", "US");
    sub_2C0EC((uint64_t)&v89, "America/Indiana/Vevay", "US");
    sub_2B8C4((uint64_t)&v90, "America/Indiana/Vincennes", "US");
    sub_2BA20((uint64_t)&v91, "America/Indiana/Winamac", "US");
    sub_2BF90((uint64_t)&v92, "America/Indianapolis", "US");
    sub_2AB2C((uint64_t)&v93, "America/Inuvik", "CA");
    sub_2B09C((uint64_t)&v94, "America/Iqaluit", "CA");
    sub_2B09C((uint64_t)&v95, "America/Jamaica", "JM");
    sub_2AC88((uint64_t)&v96, "America/Jujuy", "AR");
    sub_2AB2C((uint64_t)&v97, "America/Juneau", "US");
    sub_2B60C((uint64_t)&v98, "America/Kentucky/Louisville", "US");
    sub_2B60C((uint64_t)&v99, "America/Kentucky/Monticello", "US");
    sub_2B09C((uint64_t)&v100, "America/Knox_IN", "US");
    sub_2AB2C((uint64_t)&v101, "America/La_Paz", "BO");
    sub_2ADE4((uint64_t)&v102, "America/Lima", "PE");
    sub_2B1F8((uint64_t)&v103, "America/Los_Angeles", "US");
    sub_2C248((uint64_t)&v104, "America/Louisville", "US");
    sub_2AB2C((uint64_t)&v105, "America/Maceio", "BR");
    sub_2B09C((uint64_t)&v106, "America/Managua", "NI");
    sub_2AB2C((uint64_t)&v107, "America/Manaus", "BR");
    sub_2C248((uint64_t)&v108, "America/Martinique", "MQ");
    sub_2AF40((uint64_t)&v109, "America/Matamoros", "MX");
    sub_2BCD8((uint64_t)&v110, "America/Mazatlan", "MX");
    sub_2B09C((uint64_t)&v111, "America/Mendoza", "AR");
    sub_2AF40((uint64_t)&v112, "America/Menominee", "US");
    sub_2AB2C((uint64_t)&v113, "America/Merida", "MX");
    sub_2C248((uint64_t)&v114, "America/Metlakatla", "US");
    sub_2B1F8((uint64_t)&v115, "America/Mexico_City", "MX");
    sub_2BCD8((uint64_t)&v116, "America/Miquelon", "PM");
    sub_2B09C((uint64_t)&v117, "America/Moncton", "CA");
    sub_2AF40((uint64_t)&v118, "America/Monterrey", "MX");
    sub_2C248((uint64_t)&v119, "America/Montevideo", "UY");
    sub_2BCD8((uint64_t)&v120, "America/Montreal", "CA");
    sub_2BCD8((uint64_t)&v121, "America/New_York", "US");
    sub_2B09C((uint64_t)&v122, "America/Nipigon", "CA");
    sub_2ADE4((uint64_t)&v123, "America/Nome", "US");
    sub_2B09C((uint64_t)&v124, "America/Noronha", "BR");
    sub_2B60C((uint64_t)&v125, "America/North_Dakota/Beulah", "US");
    sub_2B60C((uint64_t)&v126, "America/North_Dakota/Center", "US");
    sub_2B4B0((uint64_t)&v127, "America/North_Dakota/New_Salem", "US");
    sub_2ADE4((uint64_t)&v128, "America/Nuuk", "GL");
    sub_2B09C((uint64_t)&v129, "America/Ojinaga", "MX");
    sub_2AB2C((uint64_t)&v130, "America/Panama", "PA");
    sub_2B1F8((uint64_t)&v131, "America/Pangnirtung", "CA");
    sub_2C248((uint64_t)&v132, "America/Paramaribo", "SR");
    sub_2B09C((uint64_t)&v133, "America/Phoenix", "US");
    sub_2BE34((uint64_t)&v134, "America/Port-au-Prince", "HT");
    sub_2C248((uint64_t)&v135, "America/Porto_Acre", "BR");
    sub_2B1F8((uint64_t)&v136, "America/Porto_Velho", "BR");
    sub_2B1F8((uint64_t)&v137, "America/Puerto_Rico", "PR");
    sub_2BF90((uint64_t)&v138, "America/Punta_Arenas", "CL");
    sub_2B1F8((uint64_t)&v139, "America/Rainy_River", "CA");
    sub_2BF90((uint64_t)&v140, "America/Rankin_Inlet", "CA");
    sub_2AB2C((uint64_t)&v141, "America/Recife", "BR");
    sub_2AB2C((uint64_t)&v142, "America/Regina", "CA");
    sub_2BCD8((uint64_t)&v143, "America/Resolute", "CA");
    sub_2C248((uint64_t)&v144, "America/Rio_Branco", "BR");
    sub_2B09C((uint64_t)&v145, "America/Rosario", "AR");
    sub_2BF90((uint64_t)&v146, "America/Santa_Isabel", "MX");
    sub_2BCD8((uint64_t)&v147, "America/Santarem", "BR");
    sub_2BCD8((uint64_t)&v148, "America/Santiago", "CL");
    sub_2C0EC((uint64_t)&v149, "America/Santo_Domingo", "DO");
    sub_2AF40((uint64_t)&v150, "America/Sao_Paulo", "BR");
    sub_2BF90((uint64_t)&v151, "America/Scoresbysund", "GL");
    sub_2BCD8((uint64_t)&v152, "America/Shiprock", "US");
    sub_2AC88((uint64_t)&v153, "America/Sitka", "US");
    sub_2BCD8((uint64_t)&v154, "America/St_Johns", "CA");
    sub_2C0EC((uint64_t)&v155, "America/Swift_Current", "CA");
    sub_2B1F8((uint64_t)&v156, "America/Tegucigalpa", "HN");
    sub_2AC88((uint64_t)&v157, "America/Thule", "GL");
    sub_2B1F8((uint64_t)&v158, "America/Thunder_Bay", "CA");
    sub_2B09C((uint64_t)&v159, "America/Tijuana", "MX");
    sub_2B09C((uint64_t)&v160, "America/Toronto", "CA");
    sub_2AF40((uint64_t)&v161, "America/Vancouver", "CA");
    sub_2AB2C((uint64_t)&v162, "America/Virgin", "PR");
    sub_2C248((uint64_t)&v163, "America/Whitehorse", "CA");
    sub_2BCD8((uint64_t)&v164, "America/Winnipeg", "CA");
    sub_2B09C((uint64_t)&v165, "America/Yakutat", "US");
    sub_2B1F8((uint64_t)&v166, "America/Yellowknife", "CA");
    sub_2BCD8((uint64_t)&v167, "Antarctica/Casey", "AQ");
    sub_2BCD8((uint64_t)&v168, "Antarctica/Davis", "AQ");
    sub_2BF90((uint64_t)&v169, "Antarctica/Macquarie", "AU");
    sub_2AF40((uint64_t)&v170, "Antarctica/Mawson", "AQ");
    sub_2AF40((uint64_t)&v171, "Antarctica/Palmer", "AQ");
    sub_2C248((uint64_t)&v172, "Antarctica/Rothera", "AQ");
    sub_2C0EC((uint64_t)&v173, "Antarctica/South_Pole", "NZ");
    sub_2BCD8((uint64_t)&v174, "Antarctica/Troll", "AQ");
    sub_2AF40((uint64_t)&v175, "Antarctica/Vostok", "AQ");
    sub_2B354((uint64_t)&v176, "Asia/Almaty", "KZ");
    sub_2C500((uint64_t)&v177, "Asia/Amman", "JO");
    sub_2B354((uint64_t)&v178, "Asia/Anadyr", "RU");
    sub_2C500((uint64_t)&v179, "Asia/Aqtau", "KZ");
    sub_2B354((uint64_t)&v180, "Asia/Aqtobe", "KZ");
    sub_2AC88((uint64_t)&v181, "Asia/Ashgabat", "TM");
    sub_2AB2C((uint64_t)&v182, "Asia/Ashkhabad", "TM");
    sub_2B354((uint64_t)&v183, "Asia/Atyrau", "KZ");
    sub_2ADE4((uint64_t)&v184, "Asia/Baghdad", "IQ");
    sub_2C65C((uint64_t)&v185, "Asia/Baku", "AZ");
    sub_2ADE4((uint64_t)&v186, "Asia/Bangkok", "TH");
    sub_2ADE4((uint64_t)&v187, "Asia/Barnaul", "RU");
    sub_2B354((uint64_t)&v188, "Asia/Beirut", "LB");
    sub_2ADE4((uint64_t)&v189, "Asia/Bishkek", "KG");
    sub_2B354((uint64_t)&v190, "Asia/Brunei", "BN");
    sub_2AC88((uint64_t)&v191, "Asia/Calcutta", "IN");
    sub_2C500((uint64_t)&v192, "Asia/Chita", "RU");
    sub_2B09C((uint64_t)&v193, "Asia/Choibalsan", "MN");
    sub_2AB2C((uint64_t)&v194, "Asia/Chongqing", "CN");
    sub_2AB2C((uint64_t)&v195, "Asia/Chungking", "CN");
    sub_2ADE4((uint64_t)&v196, "Asia/Colombo", "LK");
    sub_2C500((uint64_t)&v197, "Asia/Dacca", "BD");
    sub_2AC88((uint64_t)&v198, "Asia/Damascus", "SY");
    sub_2C500((uint64_t)&v199, "Asia/Dhaka", "BD");
    sub_2C65C((uint64_t)&v200, "Asia/Dili", "TL");
    sub_2C500((uint64_t)&v201, "Asia/Dubai", "AE");
    sub_2AC88((uint64_t)&v202, "Asia/Dushanbe", "TJ");
    sub_2AB2C((uint64_t)&v203, "Asia/Famagusta", "CY");
    sub_2C65C((uint64_t)&v204, "Asia/Gaza", "PS");
    sub_2B354((uint64_t)&v205, "Asia/Harbin", "CN");
    sub_2B354((uint64_t)&v206, "Asia/Hebron", "PS");
    sub_2BCD8((uint64_t)&v207, "Asia/Ho_Chi_Minh", "VN");
    sub_2AB2C((uint64_t)&v208, "Asia/Hong_Kong", "HK");
    sub_2C65C((uint64_t)&v209, "Asia/Hovd", "MN");
    sub_2ADE4((uint64_t)&v210, "Asia/Irkutsk", "RU");
    sub_2ADE4((uint64_t)&v211, "Asia/Jakarta", "ID");
    sub_2AC88((uint64_t)&v212, "Asia/Jayapura", "ID");
    sub_2AB2C((uint64_t)&v213, "Asia/Jerusalem", "IL");
    sub_2C500((uint64_t)&v214, "Asia/Kabul", "AF");
    sub_2AB2C((uint64_t)&v215, "Asia/Kamchatka", "RU");
    sub_2ADE4((uint64_t)&v216, "Asia/Karachi", "PK");
    sub_2ADE4((uint64_t)&v217, "Asia/Kashgar", "CN");
    sub_2AB2C((uint64_t)&v218, "Asia/Kathmandu", "NP");
    sub_2AC88((uint64_t)&v219, "Asia/Katmandu", "NP");
    sub_2AC88((uint64_t)&v220, "Asia/Khandyga", "RU");
    sub_2ADE4((uint64_t)&v221, "Asia/Kolkata", "IN");
    sub_2BCD8((uint64_t)&v222, "Asia/Krasnoyarsk", "RU");
    sub_2AF40((uint64_t)&v223, "Asia/Kuala_Lumpur", "MY");
    sub_2ADE4((uint64_t)&v224, "Asia/Kuching", "MY");
    sub_2C500((uint64_t)&v225, "Asia/Macao", "MO");
    sub_2C500((uint64_t)&v226, "Asia/Macau", "MO");
    sub_2ADE4((uint64_t)&v227, "Asia/Magadan", "RU");
    sub_2AC88((uint64_t)&v228, "Asia/Makassar", "ID");
    sub_2B354((uint64_t)&v229, "Asia/Manila", "PH");
    sub_2ADE4((uint64_t)&v230, "Asia/Nicosia", "CY");
    sub_2AF40((uint64_t)&v231, "Asia/Novokuznetsk", "RU");
    sub_2BCD8((uint64_t)&v232, "Asia/Novosibirsk", "RU");
    sub_2C65C((uint64_t)&v233, "Asia/Omsk", "RU");
    sub_2C65C((uint64_t)&v234, "Asia/Oral", "KZ");
    sub_2AB2C((uint64_t)&v235, "Asia/Pontianak", "ID");
    sub_2AB2C((uint64_t)&v236, "Asia/Pyongyang", "KP");
    sub_2C500((uint64_t)&v237, "Asia/Qatar", "QA");
    sub_2AC88((uint64_t)&v238, "Asia/Qostanay", "KZ");
    sub_2AB2C((uint64_t)&v239, "Asia/Qyzylorda", "KZ");
    sub_2ADE4((uint64_t)&v240, "Asia/Rangoon", "MM");
    sub_2B354((uint64_t)&v241, "Asia/Riyadh", "SA");
    sub_2B354((uint64_t)&v242, "Asia/Saigon", "VN");
    sub_2AC88((uint64_t)&v243, "Asia/Sakhalin", "RU");
    sub_2AB2C((uint64_t)&v244, "Asia/Samarkand", "UZ");
    sub_2C500((uint64_t)&v245, "Asia/Seoul", "KR");
    sub_2AC88((uint64_t)&v246, "Asia/Shanghai", "CN");
    sub_2AB2C((uint64_t)&v247, "Asia/Singapore", "SG");
    sub_2C248((uint64_t)&v248, "Asia/Srednekolymsk", "RU");
    sub_2B354((uint64_t)&v249, "Asia/Taipei", "TW");
    sub_2AC88((uint64_t)&v250, "Asia/Tashkent", "UZ");
    sub_2ADE4((uint64_t)&v251, "Asia/Tbilisi", "GE");
    sub_2B354((uint64_t)&v252, "Asia/Tehran", "IR");
    sub_2AC88((uint64_t)&v253, "Asia/Tel_Aviv", "IL");
    sub_2B354((uint64_t)&v254, "Asia/Thimbu", "BT");
    sub_2ADE4((uint64_t)&v255, "Asia/Thimphu", "BT");
    sub_2C500((uint64_t)&v256, "Asia/Tokyo", "JP");
    sub_2C500((uint64_t)&v257, "Asia/Tomsk", "RU");
    sub_2C248((uint64_t)&v258, "Asia/Ujung_Pandang", "ID");
    sub_2BCD8((uint64_t)&v259, "Asia/Ulaanbaatar", "MN");
    sub_2B09C((uint64_t)&v260, "Asia/Ulan_Bator", "MN");
    sub_2B354((uint64_t)&v261, "Asia/Urumqi", "CN");
    sub_2AC88((uint64_t)&v262, "Asia/Ust-Nera", "RU");
    sub_2BCD8((uint64_t)&v263, "Asia/Vladivostok", "RU");
    sub_2ADE4((uint64_t)&v264, "Asia/Yakutsk", "RU");
    sub_2B354((uint64_t)&v265, "Asia/Yangon", "MM");
    sub_2C248((uint64_t)&v266, "Asia/Yekaterinburg", "RU");
    sub_2ADE4((uint64_t)&v267, "Asia/Yerevan", "AM");
    sub_2B09C((uint64_t)&v268, "Atlantic/Azores", "PT");
    sub_2BCD8((uint64_t)&v269, "Atlantic/Bermuda", "BM");
    sub_2B09C((uint64_t)&v270, "Atlantic/Canary", "ES");
    sub_2B1F8((uint64_t)&v271, "Atlantic/Cape_Verde", "CV");
    sub_2B09C((uint64_t)&v272, "Atlantic/Faeroe", "FO");
    sub_2AB2C((uint64_t)&v273, "Atlantic/Faroe", "FO");
    sub_2C248((uint64_t)&v274, "Atlantic/Jan_Mayen", "NO");
    sub_2BCD8((uint64_t)&v275, "Atlantic/Madeira", "PT");
    sub_2C248((uint64_t)&v276, "Atlantic/Reykjavik", "IS");
    sub_2BE34((uint64_t)&v277, "Atlantic/South_Georgia", "GS");
    sub_2BCD8((uint64_t)&v278, "Atlantic/Stanley", "FK");
    sub_2AC88((uint64_t)&v279, "Australia/ACT", "AU");
    sub_2C248((uint64_t)&v280, "Australia/Adelaide", "AU");
    sub_2C248((uint64_t)&v281, "Australia/Brisbane", "AU");
    sub_2C0EC((uint64_t)&v282, "Australia/Broken_Hill", "AU");
    sub_2C248((uint64_t)&v283, "Australia/Canberra", "AU");
    sub_2BCD8((uint64_t)&v284, "Australia/Currie", "AU");
    sub_2BCD8((uint64_t)&v285, "Australia/Darwin", "AU");
    sub_2B09C((uint64_t)&v286, "Australia/Eucla", "AU");
    sub_2BCD8((uint64_t)&v287, "Australia/Hobart", "AU");
    sub_2AC88((uint64_t)&v288, "Australia/LHI", "AU");
    sub_2C248((uint64_t)&v289, "Australia/Lindeman", "AU");
    sub_2B1F8((uint64_t)&v290, "Australia/Lord_Howe", "AU");
    sub_2B1F8((uint64_t)&v291, "Australia/Melbourne", "AU");
    sub_2AC88((uint64_t)&v292, "Australia/NSW", "AU");
    sub_2B09C((uint64_t)&v293, "Australia/North", "AU");
    sub_2B09C((uint64_t)&v294, "Australia/Perth", "AU");
    sub_2BF90((uint64_t)&v295, "Australia/Queensland", "AU");
    sub_2B09C((uint64_t)&v296, "Australia/South", "AU");
    sub_2BCD8((uint64_t)&v297, "Australia/Sydney", "AU");
    sub_2C248((uint64_t)&v298, "Australia/Tasmania", "AU");
    sub_2C248((uint64_t)&v299, "Australia/Victoria", "AU");
    sub_2AB2C((uint64_t)&v300, "Australia/West", "AU");
    sub_2BF90((uint64_t)&v301, "Australia/Yancowinna", "AU");
    sub_2B354((uint64_t)&v302, "Brazil/Acre", "BR");
    sub_2BCD8((uint64_t)&v303, "Brazil/DeNoronha", "BR");
    sub_2B354((uint64_t)&v304, "Brazil/East", "BR");
    sub_2B354((uint64_t)&v305, "Brazil/West", "BR");
    sub_2B09C((uint64_t)&v306, "Canada/Atlantic", "CA");
    sub_2AB2C((uint64_t)&v307, "Canada/Central", "CA");
    sub_2AB2C((uint64_t)&v308, "Canada/Eastern", "CA");
    sub_2B09C((uint64_t)&v309, "Canada/Mountain", "CA");
    sub_2B1F8((uint64_t)&v310, "Canada/Newfoundland", "CA");
    sub_2AB2C((uint64_t)&v311, "Canada/Pacific", "CA");
    sub_2B1F8((uint64_t)&v312, "Canada/Saskatchewan", "CA");
    sub_2ADE4((uint64_t)&v313, "Canada/Yukon", "CA");
    sub_2AF40((uint64_t)&v314, "Chile/Continental", "CL");
    sub_2C248((uint64_t)&v315, "Chile/EasterIsland", "CL");
    sub_2C7B8((uint64_t)&v316, "Cuba", "CU");
    sub_2C914((uint64_t)&v317, "Egypt", "EG");
    sub_2C7B8((uint64_t)&v318, "Eire", "IE");
    sub_2BCD8((uint64_t)&v319, "Europe/Amsterdam", "NL");
    sub_2AB2C((uint64_t)&v320, "Europe/Andorra", "AD");
    sub_2BCD8((uint64_t)&v321, "Europe/Astrakhan", "RU");
    sub_2AC88((uint64_t)&v322, "Europe/Athens", "GR");
    sub_2AB2C((uint64_t)&v323, "Europe/Belfast", "GB");
    sub_2B09C((uint64_t)&v324, "Europe/Belgrade", "RS");
    sub_2AC88((uint64_t)&v325, "Europe/Berlin", "DE");
    sub_2B09C((uint64_t)&v326, "Europe/Brussels", "BE");
    sub_2BCD8((uint64_t)&v327, "Europe/Bucharest", "RO");
    sub_2B09C((uint64_t)&v328, "Europe/Budapest", "HU");
    sub_2B09C((uint64_t)&v329, "Europe/Chisinau", "MD");
    sub_2AF40((uint64_t)&v330, "Europe/Copenhagen", "DK");
    sub_2AC88((uint64_t)&v331, "Europe/Dublin", "IE");
    sub_2BCD8((uint64_t)&v332, "Europe/Gibraltar", "GI");
    sub_2B09C((uint64_t)&v333, "Europe/Helsinki", "FI");
    sub_2B09C((uint64_t)&v334, "Europe/Istanbul", "TR");
    sub_2C248((uint64_t)&v335, "Europe/Kaliningrad", "RU");
    sub_2B354((uint64_t)&v336, "Europe/Kiev", "UA");
    sub_2ADE4((uint64_t)&v337, "Europe/Kirov", "RU");
    sub_2AC88((uint64_t)&v338, "Europe/Lisbon", "PT");
    sub_2AC88((uint64_t)&v339, "Europe/London", "GB");
    sub_2AF40((uint64_t)&v340, "Europe/Luxembourg", "LU");
    sub_2AC88((uint64_t)&v341, "Europe/Madrid", "ES");
    sub_2ADE4((uint64_t)&v342, "Europe/Malta", "MT");
    sub_2ADE4((uint64_t)&v343, "Europe/Minsk", "BY");
    sub_2AC88((uint64_t)&v344, "Europe/Monaco", "MC");
    sub_2AC88((uint64_t)&v345, "Europe/Moscow", "RU");
    sub_2B354((uint64_t)&v346, "Europe/Oslo", "NO");
    sub_2ADE4((uint64_t)&v347, "Europe/Paris", "FR");
    sub_2AC88((uint64_t)&v348, "Europe/Prague", "CZ");
    sub_2B354((uint64_t)&v349, "Europe/Riga", "LV");
    sub_2B354((uint64_t)&v350, "Europe/Rome", "IT");
    sub_2AC88((uint64_t)&v351, "Europe/Samara", "RU");
    sub_2AB2C((uint64_t)&v352, "Europe/Saratov", "RU");
    sub_2AF40((uint64_t)&v353, "Europe/Simferopol", "RU");
    sub_2ADE4((uint64_t)&v354, "Europe/Sofia", "BG");
    sub_2BCD8((uint64_t)&v355, "Europe/Stockholm", "SE");
    sub_2AB2C((uint64_t)&v356, "Europe/Tallinn", "EE");
    sub_2AC88((uint64_t)&v357, "Europe/Tirane", "AL");
    sub_2B09C((uint64_t)&v358, "Europe/Tiraspol", "MD");
    sub_2BCD8((uint64_t)&v359, "Europe/Ulyanovsk", "RU");
    sub_2B09C((uint64_t)&v360, "Europe/Uzhgorod", "UA");
    sub_2AC88((uint64_t)&v361, "Europe/Vienna", "AT");
    sub_2AB2C((uint64_t)&v362, "Europe/Vilnius", "LT");
    sub_2BCD8((uint64_t)&v363, "Europe/Volgograd", "RU");
    sub_2AC88((uint64_t)&v364, "Europe/Warsaw", "PL");
    sub_2AF40((uint64_t)&v365, "Europe/Zaporozhye", "UA");
    sub_2AC88((uint64_t)&v366, "Europe/Zurich", "CH");
    sub_2CA70((uint64_t)&v367, "GB", "GB");
    sub_2CBCC((uint64_t)&v368, "GB-Eire", "GB");
    sub_2CD28((uint64_t)&v369, "GMT", "001");
    sub_2CE84((uint64_t)&v370, "Hongkong", "HK");
    sub_2CBCC((uint64_t)&v371, "Iceland", "IS");
    sub_2AC88((uint64_t)&v372, "Indian/Chagos", "IO");
    sub_2BCD8((uint64_t)&v373, "Indian/Christmas", "CX");
    sub_2ADE4((uint64_t)&v374, "Indian/Cocos", "CC");
    sub_2BCD8((uint64_t)&v375, "Indian/Kerguelen", "TF");
    sub_2B354((uint64_t)&v376, "Indian/Mahe", "SC");
    sub_2B09C((uint64_t)&v377, "Indian/Maldives", "MV");
    sub_2BCD8((uint64_t)&v378, "Indian/Mauritius", "MU");
    sub_2AB2C((uint64_t)&v379, "Indian/Reunion", "RE");
    sub_2C7B8((uint64_t)&v380, "Iran", "IR");
    sub_2CFE0((uint64_t)&v381, "Israel", "IL");
    sub_2CBCC((uint64_t)&v382, "Jamaica", "JM");
    sub_2C914((uint64_t)&v383, "Japan", "JP");
    sub_2C65C((uint64_t)&v384, "Kwajalein", "MH");
    sub_2C914((uint64_t)&v385, "Libya", "LY");
    sub_2BCD8((uint64_t)&v386, "Mexico/BajaNorte", "MX");
    sub_2AB2C((uint64_t)&v387, "Mexico/BajaSur", "MX");
    sub_2AB2C((uint64_t)&v388, "Mexico/General", "MX");
    sub_2CA70((uint64_t)&v389, "NZ", "NZ");
    sub_2CBCC((uint64_t)&v390, "NZ-CHAT", "NZ");
    sub_2CFE0((uint64_t)&v391, "Navajo", "US");
    sub_2D13C((uint64_t)&v392, "PRC", "CN");
    sub_2ADE4((uint64_t)&v393, "Pacific/Apia", "WS");
    sub_2BCD8((uint64_t)&v394, "Pacific/Auckland", "NZ");
    sub_2BF90((uint64_t)&v395, "Pacific/Bougainville", "PG");
    sub_2B09C((uint64_t)&v396, "Pacific/Chatham", "NZ");
    sub_2AC88((uint64_t)&v397, "Pacific/Chuuk", "FM");
    sub_2AB2C((uint64_t)&v398, "Pacific/Easter", "CL");
    sub_2AC88((uint64_t)&v399, "Pacific/Efate", "VU");
    sub_2AF40((uint64_t)&v400, "Pacific/Enderbury", "KI");
    sub_2B09C((uint64_t)&v401, "Pacific/Fakaofo", "TK");
    sub_2ADE4((uint64_t)&v402, "Pacific/Fiji", "FJ");
    sub_2BCD8((uint64_t)&v403, "Pacific/Funafuti", "TV");
    sub_2AF40((uint64_t)&v404, "Pacific/Galapagos", "EC");
    sub_2B09C((uint64_t)&v405, "Pacific/Gambier", "PF");
    sub_2B1F8((uint64_t)&v406, "Pacific/Guadalcanal", "SB");
    sub_2ADE4((uint64_t)&v407, "Pacific/Guam", "GU");
    sub_2BCD8((uint64_t)&v408, "Pacific/Honolulu", "US");
    sub_2BCD8((uint64_t)&v409, "Pacific/Johnston", "US");
    sub_2AB2C((uint64_t)&v410, "Pacific/Kanton", "KI");
    sub_2C248((uint64_t)&v411, "Pacific/Kiritimati", "KI");
    sub_2AB2C((uint64_t)&v412, "Pacific/Kosrae", "FM");
    sub_2AF40((uint64_t)&v413, "Pacific/Kwajalein", "MH");
    sub_2AB2C((uint64_t)&v414, "Pacific/Majuro", "MH");
    sub_2AF40((uint64_t)&v415, "Pacific/Marquesas", "PF");
    sub_2AC88((uint64_t)&v416, "Pacific/Nauru", "NR");
    sub_2ADE4((uint64_t)&v417, "Pacific/Niue", "NU");
    sub_2B09C((uint64_t)&v418, "Pacific/Norfolk", "NF");
    sub_2AB2C((uint64_t)&v419, "Pacific/Noumea", "NC");
    sub_2AF40((uint64_t)&v420, "Pacific/Pago_Pago", "AS");
    sub_2AC88((uint64_t)&v421, "Pacific/Palau", "PW");
    sub_2BCD8((uint64_t)&v422, "Pacific/Pitcairn", "PN");
    sub_2B09C((uint64_t)&v423, "Pacific/Pohnpei", "FM");
    sub_2AB2C((uint64_t)&v424, "Pacific/Ponape", "FM");
    sub_2BF90((uint64_t)&v425, "Pacific/Port_Moresby", "PG");
    sub_2AF40((uint64_t)&v426, "Pacific/Rarotonga", "CK");
    sub_2AC88((uint64_t)&v427, "Pacific/Samoa", "AS");
    sub_2AB2C((uint64_t)&v428, "Pacific/Tahiti", "PF");
    sub_2AB2C((uint64_t)&v429, "Pacific/Tarawa", "KI");
    sub_2AF40((uint64_t)&v430, "Pacific/Tongatapu", "TO");
    sub_2ADE4((uint64_t)&v431, "Pacific/Truk", "FM");
    sub_2ADE4((uint64_t)&v432, "Pacific/Wake", "UM");
    sub_2AB2C((uint64_t)&v433, "Pacific/Wallis", "WF");
    sub_2B354((uint64_t)&v434, "Pacific/Yap", "FM");
    sub_2CFE0((uint64_t)&v435, "Poland", "PL");
    sub_2CE84((uint64_t)&v436, "Portugal", "PT");
    sub_2D13C((uint64_t)&v437, "ROC", "TW");
    sub_2D13C((uint64_t)&v438, "ROK", "KR");
    sub_2C65C((uint64_t)&v439, "Singapore", "SG");
    sub_2CFE0((uint64_t)&v440, "Turkey", "TR");
    sub_2C65C((uint64_t)&v441, "US/Alaska", "US");
    sub_2B354((uint64_t)&v442, "US/Aleutian", "US");
    sub_2C500((uint64_t)&v443, "US/Arizona", "US");
    sub_2C500((uint64_t)&v444, "US/Central", "US");
    sub_2B09C((uint64_t)&v445, "US/East-Indiana", "US");
    sub_2C500((uint64_t)&v446, "US/Eastern", "US");
    sub_2C65C((uint64_t)&v447, "US/Hawaii", "US");
    sub_2AF40((uint64_t)&v448, "US/Indiana-Starke", "US");
    sub_2B354((uint64_t)&v449, "US/Michigan", "US");
    sub_2B354((uint64_t)&v450, "US/Mountain", "US");
    sub_2C500((uint64_t)&v451, "US/Pacific", "US");
    sub_2CE84((uint64_t)&v452, "US/Samoa", "AS");
    sub_2C7B8((uint64_t)v453, "W-SU", "RU");
    sub_2AAA4((uint64_t)&unk_25505F0, (uint64_t)v2, 452);
    for (uint64_t i = 0; i != -21696; i -= 48)
      sub_1B23C((uint64_t)&v453[i]);
    __cxa_guard_release(qword_25505D0);
  }
  return &unk_25505F0;
}

void sub_2A94C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 21648;
  uint64_t v4 = -21696;
  do
  {
    uint64_t v3 = sub_1B23C(v3) - 48;
    v4 += 48;
  }
  while (v4);
  __cxa_guard_abort(qword_25505D0);
  _Unwind_Resume(a1);
}

uint64_t sub_2A9B8(CFTimeZoneRef *a1, int a2)
{
  return (10 * (int)CFTimeZoneGetSecondsFromGMT(*a1, (double)a2 + -978307200.0));
}

uint64_t sub_2A9F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

BOOL sub_2A9F8(void *a1)
{
  return *a1 != 0;
}

BOOL sub_2AA08(CFTimeZoneRef *a1, CFTimeZoneRef *a2)
{
  CFTimeZoneRef v3 = *a1;
  if (v3) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 1;
  }
  CFStringRef Name = CFTimeZoneGetName(v3);
  CFStringRef v7 = CFTimeZoneGetName(*a2);
  if (!CFEqual(Name, v7)) {
    return 1;
  }
  CFDataRef Data = CFTimeZoneGetData(*a1);
  CFDataRef v9 = CFTimeZoneGetData(*a2);
  return CFEqual(Data, v9) == 0;
}

uint64_t sub_2AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_2D4C8(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_2AB0C(_Unwind_Exception *a1)
{
  CFTimeZoneRef v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6368(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2AB2C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2AC6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AC88(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2ADC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2ADE4(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2AF24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2AF40(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B080(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B09C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B1DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B1F8(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B338(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B354(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B494(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B4B0(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B5F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B60C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B74C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B768(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2B8A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2B8C4(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2BA04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BA20(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2BB60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BB7C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2BCBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BCD8(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2BE18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BE34(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2BF74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2BF90(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C0D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C0EC(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C22C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C248(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C388(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C3A4(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C4E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C500(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C640(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C65C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C79C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C7B8(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2C8F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2C914(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2CA54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2CA70(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2CBB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2CBCC(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2CD0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2CD28(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2CE68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2CE84(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2CFC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2CFE0(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2D120(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2D13C(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  uint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_2D27C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2D298(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  size_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    size_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          CFTimeZoneRef result = 0;
          size_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        CFTimeZoneRef result = 0;
        size_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_2D4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    size_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_2D8E8(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      uint64_t v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  void *v27 = v39[0];
LABEL_89:
  char v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_2D8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_2D8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v8 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  CFTimeZoneRef result = v9 + 5;
  if (*(char *)(a3 + 47) < 0)
  {
    CFTimeZoneRef result = sub_4200(result, *(void **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)CFTimeZoneRef result = *(_OWORD *)(a3 + 24);
    v9[7] = *(void *)(a3 + 40);
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2D99C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    sub_2D9D4(v1);
    _Unwind_Resume(a1);
  }
  sub_2D9D4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2D9D4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_2DA40()
{
  byte_25505C7 = 3;
  LODWORD(qword_25505B0) = 4412501;
}

uint64_t *sub_2DA84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550618, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2550618))
  {
    return &qword_2550620;
  }
  qword_2550620 = 0;
  unk_2550628 = 0;
  qword_2550630 = 0;
  unk_2550638 = 850045863;
  unk_2550640 = 0u;
  unk_2550650 = 0u;
  unk_2550660 = 0u;
  qword_2550670 = 0;
  __cxa_guard_release(&qword_2550618);
  return &qword_2550620;
}

void sub_2DB0C(uint64_t a1)
{
}

void sub_2DCE0()
{
}

void sub_2DD0C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2DD20(uint64_t a1, size_t *a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v5 = *(size_t ***)a1;
  unint64_t v6 = *(size_t ***)(a1 + 8);
  if (*(size_t ***)a1 != v6)
  {
    while (*v5 != a2)
    {
      if (++v5 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v6)
  {
LABEL_10:
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v7 = *v5;
    *unint64_t v5 = *(v6 - 1);
    *(v6 - 1) = v7;
    *(void *)(a1 + 8) -= 8;
    if (a2)
    {
      for (uint64_t i = (void *)a2[2]; i; uint64_t i = v9)
      {
        unint64_t v9 = (void *)*i;
        munmap(i, *a2);
      }
      for (unint64_t j = (size_t *)a2[5]; j; unint64_t j = v12)
      {
        uint8x8_t v12 = (size_t *)*j;
        munmap(j, j[2]);
      }
      operator delete();
    }
    uint64_t v10 = 1;
  }
  std::mutex::unlock(v4);
  return v10;
}

uint64_t sub_2DE18(uint64_t a1, size_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 1;
  unint64_t v4 = mmap(0, a2, 3, 4162, -1, 0);
  if (v4 == (void *)-1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v19, *(void *)a1);
    unint64_t v8 = std::string::insert(&v19, 0, "Allocating memory chunk of size ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v20, " bytes failed with error code ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint8x8_t v12 = __error();
    std::to_string(&v18, *v12);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v13 = &v18;
    }
    else {
      size_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    char v15 = std::string::append(&v21, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v15->__r_.__value_.__r.__words[2];
    long long v22 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unint64_t v5 = *(void *)a1;
  void *v4 = 0;
  v4[2] = v4 + 4;
  v4[3] = (char *)v4 + v5;
  *(void *)(a1 + 16) = v4;
  v4[1] = v4 + 4;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  return a1;
}

void sub_2DFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

_OWORD *sub_2E0C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550678, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2550678))
  {
    return xmmword_2550680;
  }
  xmmword_2550680[3] = 0u;
  xmmword_2550680[2] = 0u;
  xmmword_2550680[1] = 0u;
  xmmword_2550680[0] = 0u;
  qword_25506C0 = 0;
  unk_25506C8 = 850045863;
  unk_25506D0 = 0u;
  unk_25506E0 = 0u;
  unk_25506F0 = 0u;
  qword_2550700 = 0;
  unk_2550708 = 1018212795;
  unk_2550710 = 0u;
  unk_2550720 = 0u;
  qword_2550730 = 0;
  unk_2550738 = 1018212795;
  unk_2550740 = 0u;
  unk_2550750 = 0u;
  unk_2550760 = 0u;
  unk_255076A = 0u;
  byte_255077A = 1;
  __cxa_guard_release(&qword_2550678);
  return xmmword_2550680;
}

void sub_2E184(unsigned int a1)
{
  exception = (std::future_error *)__cxa_allocate_exception(0x20uLL);
  v3.__cat_ = std::future_category();
  *(void *)&v3.__val_ = a1;
  std::future_error::future_error(exception, v3);
}

void sub_2E1D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2E1EC(int a1)
{
  if (a1 == 1)
  {
    CFTimeZoneRef result = &qword_25507D0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550788, memory_order_acquire) & 1) == 0)
    {
      unint64_t v6 = &qword_25507D0;
      uint64_t v7 = &qword_2550788;
      if (__cxa_guard_acquire(&qword_2550788))
      {
        xmmword_25507D8 = 0u;
        unk_25507E8 = 0u;
        dword_25507F8 = 1065353216;
        dword_2550800 = 50;
        std::error_code v3 = &qword_25507D0;
        unint64_t v4 = off_23FDE28;
LABEL_14:
        unint64_t v5 = v3;
        uint64_t *v3 = (uint64_t)v4;
        __cxa_guard_release(v7);
        return v5;
      }
      return v6;
    }
  }
  else if (a1)
  {
    CFTimeZoneRef result = &qword_2550808;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550790, memory_order_acquire) & 1) == 0)
    {
      unint64_t v6 = &qword_2550808;
      uint64_t v7 = &qword_2550790;
      if (__cxa_guard_acquire(&qword_2550790))
      {
        uint64_t v2 = &qword_2550808;
        xmmword_2550810 = 0u;
        unk_2550820 = 0u;
        dword_2550830 = 1065353216;
        dword_2550838 = 50;
        goto LABEL_13;
      }
      return v6;
    }
  }
  else
  {
    CFTimeZoneRef result = &qword_2550798;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550780, memory_order_acquire) & 1) == 0)
    {
      unint64_t v6 = &qword_2550798;
      uint64_t v7 = &qword_2550780;
      if (__cxa_guard_acquire(&qword_2550780))
      {
        uint64_t v2 = &qword_2550798;
        xmmword_25507A0 = 0u;
        unk_25507B0 = 0u;
        dword_25507C0 = 1065353216;
        dword_25507C8 = 50;
LABEL_13:
        std::error_code v3 = v2;
        unint64_t v4 = off_23FDDE0;
        goto LABEL_14;
      }
      return v6;
    }
  }
  return result;
}

void sub_2E36C(_DWORD *a1, const void **a2, uint64_t a3)
{
  std::mutex::lock(&stru_24F5AA8);
  __p[0] = a2;
  unint64_t v6 = sub_2EBAC((uint64_t)(a1 + 2), (uint64_t)a2, (uint64_t)&unk_20F06E0, (long long **)__p);
  int v7 = *((_DWORD *)v6 + 11);
  *((_DWORD *)v6 + 11) = v7 + 1;
  if (v7 >= a1[12]) {
    goto LABEL_45;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  unint64_t v10 = v9 + 1;
  if (v9 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v10 >= 0x17)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9 + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9 + 1;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (v8 >= 0) {
    char v14 = a2;
  }
  else {
    char v14 = *a2;
  }
  memmove(p_dst, v14, v9);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v9) = 58;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    long long v16 = (const std::string::value_type *)a3;
  }
  else {
    long long v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  std::string v18 = std::string::append(&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v30 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  (**(void (***)(_DWORD *, void **))a1)(a1, __p);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if (*((_DWORD *)v6 + 11) != a1[12]) {
        goto LABEL_45;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (*((_DWORD *)v6 + 11) != a1[12]) {
    goto LABEL_45;
  }
LABEL_28:
  if (!sub_723EC(1u)) {
    goto LABEL_45;
  }
  sub_6BAC((uint64_t)__p);
  std::string v20 = sub_188FC78(__p, (uint64_t)"Reporting limit reached for '", 29);
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    uint64_t v22 = (uint64_t)a2;
  }
  else {
    uint64_t v22 = (uint64_t)*a2;
  }
  if (v21 >= 0) {
    uint64_t v23 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v23 = (uint64_t)a2[1];
  }
  uint64_t v24 = sub_188FC78(v20, v22, v23);
  float v25 = sub_188FC78(v24, (uint64_t)"'. Further ", 11);
  int v26 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 8))(a1);
  if (!v26)
  {
    uint64_t v27 = "error";
    uint64_t v28 = 5;
    goto LABEL_39;
  }
  if (v26 == 1)
  {
    uint64_t v27 = "warning";
    uint64_t v28 = 7;
LABEL_39:
    float v25 = sub_188FC78(v25, (uint64_t)v27, v28);
  }
  sub_188FC78(v25, (uint64_t)"s of this type will still be counted but details will be suppressed", 67);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__dst, 1u);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_45:
  std::mutex::unlock(&stru_24F5AA8);
}

void sub_2E744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 81) < 0) {
    operator delete(*(void **)(v14 - 104));
  }
  sub_111ECAC((uint64_t)&__p);
  std::mutex::unlock(&stru_24F5AA8);
  _Unwind_Resume(a1);
}

void sub_2E7FC(_Unwind_Exception *a1)
{
}

void sub_2E814(_Unwind_Exception *a1)
{
}

uint64_t sub_2E82C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_2E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2E9E4()
{
  return 0;
}

uint64_t sub_2E9EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_2EB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2EBA4()
{
  return 1;
}

uint64_t *sub_2EBAC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *int v26 = 0;
  v26[1] = v11;
  uint64_t v27 = v26 + 2;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        char v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        char v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      char v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  char v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *char v32 = v45[0];
LABEL_92:
  int v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2EFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2F008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2F020(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2F020(a1, *(void *)a2);
    sub_2F020(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      unint64_t v4 = a2;
    }
    else
    {
      unint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

uint64_t *sub_2F0A4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    do
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v5;
        uint8x8_t v13 = (const void *)v5[4];
        unint64_t v11 = v5 + 4;
        unint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          char v16 = v11;
        }
        else {
          char v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return (uint64_t *)v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    uint64_t v6 = v10 + 1;
LABEL_26:
    uint64_t v22 = (uint64_t *)operator new(0x38uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
    uint64_t v22 = (uint64_t *)operator new(0x38uLL);
    uint64_t v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_4200(v23, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)a3;
  void v23[2] = *(void *)(a3 + 16);
LABEL_30:
  *uint64_t v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  unsigned char *v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  uint64_t v25 = v22;
  if (v24)
  {
    *a1 = v24;
    uint64_t v25 = *v6;
  }
  sub_2F250(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_2F23C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2F250(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    std::error_code v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        *((unsigned char *)v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          std::error_code v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *unint64_t v9 = v2;
        *(void *)(v2 + 16) = v9;
        std::error_code v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        *((unsigned char *)v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3 == result;
    *uint64_t v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      std::error_code v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    std::error_code v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *((unsigned char *)v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  uint8x8_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *uint8x8_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t sub_2F404(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_23FDE60;
  uint64_t v3 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200((unsigned char *)v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  sub_2F9F0(a1 + 32);
  *(_DWORD *)(a1 + 56) = 9;
  return a1;
}

uint64_t sub_2F480(uint64_t a1, unsigned int __val)
{
  *(void *)a1 = off_23FDE60;
  std::to_string(&v7, __val);
  long long v4 = std::string::insert(&v7, 0, "MSL error code: ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((void *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 8) = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  sub_2F9F0(a1 + 32);
  *(_DWORD *)(a1 + 56) = __val;
  return a1;
}

uint64_t sub_2F524(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_2F540(uint64_t a1)
{
  uint64_t result = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_2F55C(std::exception *this)
{
  if (SHIBYTE(this[6].__vftable) < 0)
  {
    operator delete(this[4].__vftable);
    if ((SHIBYTE(this[3].__vftable) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(this[3].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1].__vftable);
LABEL_3:
  std::exception::~exception(this);

  operator delete();
}

void sub_2F5D0(const char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void **)a1;
  int status = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  long long v4 = __cxa_demangle(a1, 0, 0, &status);
  long long v5 = v4;
  if (status) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (!v6)
  {
    size_t v7 = strlen(v4);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v9 = v7 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v11 = operator new(v9 + 1);
      a2[1] = v8;
      a2[2] = v10 | 0x8000000000000000;
      *a2 = v11;
      a2 = v11;
    }
    else
    {
      *((unsigned char *)a2 + 23) = v7;
      if (!v7) {
        goto LABEL_18;
      }
    }
    memmove(a2, v5, v8);
LABEL_18:
    *((unsigned char *)a2 + v8) = 0;
LABEL_21:
    free(v5);
    return;
  }
  if (*((char *)v2 + 23) < 0)
  {
    sub_4200(a2, *v2, (unint64_t)v2[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v2;
    a2[2] = v2[2];
  }
  if (v5) {
    goto LABEL_21;
  }
}

void sub_2F6F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F710(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (const std::string *)a1;
  uint64_t v4 = a1[23];
  BOOL v5 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  if (v5) {
    BOOL v6 = *(char **)a1;
  }
  else {
    BOOL v6 = a1;
  }
  size_t v7 = &v6[v4];
  if (v4 >= 2)
  {
    size_t v8 = v6;
    do
    {
      uint64_t v9 = (char *)memchr(v8, 32, v4 - 1);
      if (!v9) {
        break;
      }
      if (*(_WORD *)v9 == 24352) {
        goto LABEL_12;
      }
      size_t v8 = v9 + 1;
      uint64_t v4 = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 > 1);
  }
  uint64_t v9 = v7;
LABEL_12:
  if (v9 == v7) {
    unint64_t v10 = -1;
  }
  else {
    unint64_t v10 = v9 - v6;
  }
  std::string::size_type v11 = std::string::find(v2, 43, 0);
  if (v10 != -1 && v11 != -1 && v11 >= v10)
  {
    std::string::size_type v14 = v11;
    LODWORD(size) = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80000000) != 0)
    {
      sub_4200(a2, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
      LODWORD(size) = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
      if ((size & 0x80000000) != 0)
      {
        unint64_t size = v2->__r_.__value_.__l.__size_;
        if (size > v10)
        {
          uint64_t v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
LABEL_31:
          std::string::size_type v18 = v10 + 1;
          std::string::size_type v19 = v14 - v10 - 2;
          size_t v20 = size - (v10 + 1);
          if (v20 >= v19) {
            size_t v21 = v19;
          }
          else {
            size_t v21 = v20;
          }
          if (v21 >= 0x7FFFFFFFFFFFFFF8) {
            sub_188D690();
          }
          if (v21 >= 0x17)
          {
            uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17) {
              uint64_t v23 = v21 | 7;
            }
            uint64_t v24 = v23 + 1;
            uint64_t v22 = operator new(v23 + 1);
            v27[1] = (void *)v21;
            unint64_t v28 = v24 | 0x8000000000000000;
            v27[0] = v22;
          }
          else
          {
            HIBYTE(v28) = v21;
            uint64_t v22 = v27;
            if (!v21)
            {
LABEL_42:
              *((unsigned char *)v22 + v21) = 0;
              sub_2F5D0((const char *)v27, __p);
              if ((v30 & 0x80u) == 0) {
                uint64_t v25 = __p;
              }
              else {
                uint64_t v25 = (void **)__p[0];
              }
              if ((v30 & 0x80u) == 0) {
                std::string::size_type v26 = v30;
              }
              else {
                std::string::size_type v26 = (std::string::size_type)__p[1];
              }
              std::string::replace(a2, v18, v19, (const std::string::value_type *)v25, v26);
              if ((char)v30 < 0)
              {
                operator delete(__p[0]);
                if ((SHIBYTE(v28) & 0x80000000) == 0) {
                  return;
                }
              }
              else if ((SHIBYTE(v28) & 0x80000000) == 0)
              {
                return;
              }
              operator delete(v27[0]);
              return;
            }
          }
          memmove(v22, (char *)v2 + v18, v21);
          goto LABEL_42;
        }
LABEL_55:
        sub_5AD0();
      }
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
    }
    unint64_t size = size;
    if (v10 < size) {
      goto LABEL_31;
    }
    goto LABEL_55;
  }
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    char v16 = (void *)v2->__r_.__value_.__r.__words[0];
    unint64_t v17 = v2->__r_.__value_.__l.__size_;
    sub_4200(a2, v16, v17);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  }
}

void sub_2F97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F9F0@<X0>(uint64_t a1@<X8>)
{
  sub_E1B4((uint64_t)v36);
  memset(v40, 0, 512);
  int v2 = backtrace((void **)v40, 128);
  if (!v2)
  {
    size_t v8 = (char *)operator new(0x38uLL);
    *(void *)a1 = v8;
    *(_OWORD *)(a1 + 8) = xmmword_20B8DF0;
    strcpy(v8, "Stack is corrupted; no stack trace could be obtained.\n");
    goto LABEL_31;
  }
  float v31 = (const char **)backtrace_symbols((void *const *)v40, v2);
  if (v2 >= 1)
  {
    uint64_t v3 = v2 & ~(v2 >> 31);
    if (v31)
    {
      sub_188FC78(&v37, (uint64_t)"", 0);
      uint64_t v4 = *v31;
      size_t v5 = strlen(*v31);
      if (v5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_55:
      }
        sub_188D690();
      size_t v6 = v5;
      if (v5 >= 0x17)
      {
        uint64_t v13 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v13 = v5 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (void **)operator new(v13 + 1);
        size_t v33 = v6;
        unint64_t v34 = v14 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v34) = v5;
        p_dst = (void **)&__dst;
        if (!v5)
        {
LABEL_17:
          *((unsigned char *)p_dst + v6) = 0;
          sub_2F710((char *)&__dst, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          unint64_t v17 = sub_188FC78(&v37, (uint64_t)p_p, size);
          sub_188FC78(v17, (uint64_t)"\n", 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v34) & 0x80000000) == 0)
            {
LABEL_25:
              if (v3 != 1) {
                goto LABEL_34;
              }
              goto LABEL_29;
            }
          }
          else if ((SHIBYTE(v34) & 0x80000000) == 0)
          {
            goto LABEL_25;
          }
          operator delete(__dst);
          if (v3 != 1)
          {
LABEL_34:
            uint64_t v20 = v31 + 1;
            uint64_t v21 = v3 - 1;
            while (1)
            {
              sub_188FC78(&v37, (uint64_t)"\n", 1);
              uint64_t v22 = *v20;
              size_t v23 = strlen(*v20);
              if (v23 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_55;
              }
              size_t v24 = v23;
              if (v23 >= 0x17) {
                break;
              }
              HIBYTE(v34) = v23;
              uint64_t v25 = (void **)&__dst;
              if (v23) {
                goto LABEL_43;
              }
LABEL_44:
              *((unsigned char *)v25 + v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              sub_2F710((char *)&__dst, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v28 = &__p;
              }
              else {
                unint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
              }
              unsigned __int8 v30 = sub_188FC78(&v37, (uint64_t)v28, v29);
              sub_188FC78(v30, (uint64_t)"\n", 1);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v34) < 0) {
LABEL_54:
                }
                  operator delete(__dst);
              }
              else if (SHIBYTE(v34) < 0)
              {
                goto LABEL_54;
              }
              ++v20;
              if (!--v21) {
                goto LABEL_29;
              }
            }
            uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17) {
              uint64_t v26 = v23 | 7;
            }
            uint64_t v27 = v26 + 1;
            uint64_t v25 = (void **)operator new(v26 + 1);
            size_t v33 = v24;
            unint64_t v34 = v27 | 0x8000000000000000;
            std::string __dst = v25;
LABEL_43:
            memmove(v25, v22, v24);
            goto LABEL_44;
          }
          goto LABEL_29;
        }
      }
      memmove(p_dst, v4, v6);
      goto LABEL_17;
    }
    sub_188FC78(&v37, (uint64_t)"", 0);
    *(_DWORD *)((char *)v38 + *(void *)(v37 - 24)) = *(_DWORD *)((unsigned char *)v38 + *(void *)(v37 - 24)) & 0xFFFFFFB5 | 8;
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)"\n", 1);
    if (v3 != 1)
    {
      unint64_t v10 = (char *)v40 + 8;
      uint64_t v11 = v3 - 1;
      do
      {
        sub_188FC78(&v37, (uint64_t)"\n", 1);
        *(_DWORD *)((char *)v38 + *(void *)(v37 - 24)) = *(_DWORD *)((unsigned char *)v38 + *(void *)(v37 - 24)) & 0xFFFFFFB5 | 8;
        uint64_t v12 = (void *)std::ostream::operator<<();
        sub_188FC78(v12, (uint64_t)"\n", 1);
        v10 += 8;
        --v11;
      }
      while (v11);
    }
  }
LABEL_29:
  std::stringbuf::str();
  if (v31) {
    free(v31);
  }
LABEL_31:
  *(void *)((char *)v36
  uint64_t v37 = v18;
  if (v39 < 0) {
    operator delete((void *)v38[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_2FF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
}

void sub_30018(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>, double a7@<D0>)
{
  __p[0] = 0;
  __p[1] = 0;
  double v71 = 0.0;
  unint64_t v12 = a3 - a2;
  if (a3 - a2 == 1)
  {
    uint64_t v13 = *a1 + 32 * a2;
    uint64_t v14 = (double *)(*a1 + 32 * a3);
    double v15 = *v14;
    double v16 = v14[1];
    double v18 = *(double *)v13;
    double v17 = *(double *)(v13 + 8);
    double v19 = v14[2];
    double v20 = *(double *)(v13 + 16);
    sub_30F14((char **)__p, (_OWORD *)v13);
    double v21 = sqrt((v15 - v18) * (v15 - v18) + (v16 - v17) * (v16 - v17) + (v19 - v20) * (v19 - v20)) / 3.0;
    uint64_t v22 = *a1;
    uint64_t v23 = *a1 + 32 * a2;
    double v24 = *(double *)(v23 + 16) + v21 * *(double *)(a4 + 16);
    BOOL v25 = (*(unsigned __int8 *)(a4 + 24) | *(unsigned __int8 *)(v23 + 24)) != 0;
    float64x2_t v72 = vaddq_f64(*(float64x2_t *)v23, vmulq_n_f64(*(float64x2_t *)a4, v21));
    double v73 = v24;
    BOOL v74 = v25;
    unint64_t v26 = v22 + 32 * a3;
    double v27 = *(double *)(v26 + 16) + v21 * *(double *)(a5 + 16);
    LODWORD(v23) = *(unsigned __int8 *)(a5 + 24) | *(unsigned __int8 *)(v26 + 24);
    *(float64x2_t *)uint64_t v67 = vaddq_f64(*(float64x2_t *)v26, vmulq_n_f64(*(float64x2_t *)a5, v21));
    double v68 = v27;
    BOOL v69 = v23 != 0;
    sub_30F14((char **)__p, &v72);
    sub_30F14((char **)__p, v67);
    sub_30F14((char **)__p, (_OWORD *)(*a1 + 32 * a3));
    *(_OWORD *)a6 = *(_OWORD *)__p;
    a6[2] = v71;
    return;
  }
  sub_31024(a1, a2, a3, v67);
  sub_3113C(a1, a2, a3, (double **)v67, a4, a5, (uint64_t)&v72);
  uint64_t v61 = a6;
  std::string::size_type v29 = __p[0];
  double v30 = v71;
  *(float64x2_t *)std::string __p = v72;
  double v71 = v73;
  *(void *)&v72.f64[0] = v29;
  double v73 = v30;
  if (v29)
  {
    *(void *)&v72.f64[1] = v29;
    operator delete(v29);
  }
  double v31 = 0.0;
  unint64_t v32 = (v12 + 1) >> 1;
  if (a2 + 1 < a3)
  {
    uint64_t v33 = 32 * a2;
    uint64_t v34 = 1;
    unint64_t v32 = (v12 + 1) >> 1;
    do
    {
      sub_308DC((char **)a1, &v72, *((double *)v67[0] + v34), 1.0);
      unint64_t v35 = (float64x2_t *)(*a1 + v33);
      float64x2_t v36 = vaddq_f64(v72, v35[2]);
      double v37 = vaddvq_f64(vmulq_f64(v36, v36));
      if (v37 + (v73 + v35[3].f64[0]) * (v73 + v35[3].f64[0]) >= v31)
      {
        unint64_t v32 = a2 + v34;
        double v31 = v37 + (v73 + v35[3].f64[0]) * (v73 + v35[3].f64[0]);
      }
      ++v34;
      v33 += 32;
    }
    while (a2 - a3 + v34);
  }
  if (v31 >= a7)
  {
    if (v31 >= a7 * 4.0)
    {
LABEL_29:
      uint64_t v48 = (float64x2_t *)(*a1 + 32 * v32);
      double v49 = (v48[-1].f64[0] - v48[1].f64[0] + v48[1].f64[0] - v48[3].f64[0]) * 0.5;
      __asm { FMOV            V3.2D, #0.5 }
      float64x2_t v55 = vmulq_f64(vaddq_f64(vsubq_f64(v48[-2], *v48), vsubq_f64(*v48, v48[2])), _Q3);
      double v56 = sqrt(vaddvq_f64(vmulq_f64(v55, v55)) + v49 * v49);
      if (v56 < 2.22507386e-308) {
        double v56 = 2.22507386e-308;
      }
      float64x2_t v72 = vdivq_f64(v55, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v56, 0));
      double v73 = v49 / v56;
      BOOL v74 = 0;
      sub_30018(&v65, a1, a2, v32, a4, &v72, a7);
      float64x2_t v72 = vnegq_f64(v72);
      double v73 = -v73;
      sub_30018(&v63, a1, v32, a3, &v72, a5, a7);
      *uint64_t v61 = 0.0;
      v61[1] = 0.0;
      v61[2] = 0.0;
      uint64_t v57 = v65;
      uint64_t v58 = v66 - (unsigned char *)v65;
      if (v66 == v65)
      {
        uint64_t v60 = 0;
      }
      else
      {
        if (v58 < 0) {
          sub_2E00();
        }
        uint64_t v59 = (char *)operator new(v66 - (unsigned char *)v65);
        *(void *)uint64_t v61 = v59;
        uint64_t v60 = &v59[32 * (v58 >> 5)];
        *((void *)v61 + 2) = v60;
        memcpy(v59, v57, v58 - 7);
        *((void *)v61 + 1) = v60;
      }
      sub_32304((uint64_t)v61, v60, (char *)v63, v64, (v64 - (unsigned char *)v63) >> 5);
      if (v63)
      {
        uint64_t v64 = (char *)v63;
        operator delete(v63);
      }
      if (v65)
      {
        uint64_t v66 = (char *)v65;
        operator delete(v65);
      }
      goto LABEL_39;
    }
    uint64_t v38 = 0;
    while (1)
    {
      sub_3163C(a1, a2, a3, v67, (char **)__p, &v65);
      sub_3113C(a1, a2, a3, (double **)&v65, a4, a5, (uint64_t)&v72);
      char v39 = __p[0];
      double v40 = v71;
      *(float64x2_t *)std::string __p = v72;
      double v71 = v73;
      *(void *)&v72.f64[0] = v39;
      double v73 = v40;
      if (v39)
      {
        *(void *)&v72.f64[1] = v39;
        operator delete(v39);
      }
      double v41 = 0.0;
      unint64_t v32 = (v12 + 1) >> 1;
      if (a2 + 1 < a3)
      {
        uint64_t v42 = 32 * a2;
        uint64_t v43 = 1;
        unint64_t v32 = (v12 + 1) >> 1;
        do
        {
          sub_308DC((char **)a1, &v72, *((double *)v65 + v43), 1.0);
          uint64_t v44 = (float64x2_t *)(*a1 + v42);
          float64x2_t v45 = vaddq_f64(v72, v44[2]);
          double v46 = vaddvq_f64(vmulq_f64(v45, v45));
          if (v46 + (v73 + v44[3].f64[0]) * (v73 + v44[3].f64[0]) >= v41)
          {
            unint64_t v32 = a2 + v43;
            double v41 = v46 + (v73 + v44[3].f64[0]) * (v73 + v44[3].f64[0]);
          }
          ++v43;
          v42 += 32;
        }
        while (a2 - a3 + v43);
      }
      if (v41 < a7) {
        break;
      }
      sub_326C0(v67, (char *)v65, v66, (v66 - (unsigned char *)v65) >> 3);
      uint64_t v47 = (char *)v65;
      if (v65) {
        goto LABEL_23;
      }
LABEL_24:
      if (v41 < a7) {
        goto LABEL_39;
      }
      if (++v38 == 4) {
        goto LABEL_29;
      }
    }
    *(_OWORD *)uint64_t v61 = *(_OWORD *)__p;
    v61[2] = v71;
    __p[1] = 0;
    double v71 = 0.0;
    __p[0] = 0;
    uint64_t v47 = (char *)v65;
    if (!v65) {
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v66 = v47;
    operator delete(v47);
    goto LABEL_24;
  }
  *(_OWORD *)a6 = *(_OWORD *)__p;
  a6[2] = v71;
  __p[1] = 0;
  double v71 = 0.0;
  __p[0] = 0;
LABEL_39:
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_305EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  unint64_t v26 = *v24;
  if (*v24)
  {
    *(void *)(a10 + 8) = v26;
    operator delete(v26);
    double v27 = __p;
    if (!__p)
    {
LABEL_3:
      unint64_t v28 = a16;
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    double v27 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v27);
  unint64_t v28 = a16;
  if (!a16)
  {
LABEL_4:
    std::string::size_type v29 = a19;
    if (!a19) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v28);
  std::string::size_type v29 = a19;
  if (!a19)
  {
LABEL_5:
    double v30 = a23;
    if (!a23) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v29);
  double v30 = a23;
  if (!a23) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_306C8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    size_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    size_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 5);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 32 * a2;
}

void sub_307F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_308DC(char **a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v40 = 0;
  __src = 0;
  uint64_t v42 = 0;
  if (a4 >= 1.0)
  {
    double v14 = a3;
    if (&v40 != a1)
    {
      sub_337DC(&v40, *a1, a1[1], (a1[1] - *a1) >> 5);
      double v14 = a3;
    }
  }
  else
  {
    sub_329B8((uint64_t *)a1, (uint64_t)&__p);
    sub_31854((uint64_t *)&__p, 0, v43, fmax(a3 - a4, 0.0), fmin(a3 + a4, 1.0));
    if (__p)
    {
      *(void *)&long long v39 = __p;
      operator delete(__p);
    }
    size_t v6 = *(_DWORD **)v43;
    std::string __p = *(void **)v43;
    long long v39 = *(_OWORD *)&v43[8];
    long long v7 = *(_DWORD **)&v43[8];
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v43[8] - *(void *)v43) >> 2);
    long long v9 = v40;
    if (v8 <= (v42 - v40) >> 5)
    {
      double v14 = a3;
      if (*(void *)v43 == *(void *)&v43[8]) {
        goto LABEL_12;
      }
    }
    else
    {
      if (v8 >> 59) {
        sub_2E00();
      }
      unint64_t v10 = __src;
      uint64_t v11 = (char *)operator new(0x5555555555555560 * ((uint64_t)(*(void *)&v43[8] - *(void *)v43) >> 2));
      unint64_t v12 = &v11[v10 - v9];
      long long v13 = v12;
      double v14 = a3;
      if (v10 != v9)
      {
        std::string v15 = &v11[v10 - v9];
        do
        {
          long long v16 = *((_OWORD *)v10 - 2);
          long long v13 = v15 - 32;
          *(_OWORD *)(v15 - 23) = *(_OWORD *)(v10 - 23);
          *((_OWORD *)v15 - 2) = v16;
          v10 -= 32;
          v15 -= 32;
        }
        while (v10 != v9);
      }
      double v40 = v13;
      __src = v12;
      uint64_t v42 = &v11[32 * v8];
      if (v9)
      {
        operator delete(v9);
        double v14 = a3;
        size_t v6 = __p;
        long long v7 = (_DWORD *)v39;
      }
      if (v6 == v7)
      {
LABEL_12:
        if (!v7) {
          goto LABEL_23;
        }
LABEL_22:
        *(void *)&long long v39 = v7;
        operator delete(v7);
        double v14 = a3;
        goto LABEL_23;
      }
    }
    std::string v17 = (char *)__src;
    do
    {
      int v18 = v6[2];
      BOOL v44 = v18 == 0x7FFFFFFF;
      v19.i64[0] = *(void *)v6;
      v19.i64[1] = HIDWORD(*(void *)v6);
      *(float64x2_t *)uint64_t v43 = vcvtq_f64_u64(v19);
      double v20 = (double)v18;
      if (v18 == 0x7FFFFFFF) {
        double v20 = 0.0;
      }
      *(double *)&v43[16] = v20;
      std::string v17 = sub_33588(&v40, v17, v43) + 32;
      v6 += 3;
    }
    while (v6 != v7);
    long long v7 = __p;
    double v14 = a3;
    if (__p) {
      goto LABEL_22;
    }
  }
LABEL_23:
  double v21 = (float64x2_t *)v40;
  if ((unint64_t)((unsigned char *)__src - v40) >= 0x21)
  {
    unint64_t v22 = ((unsigned char *)__src - v40) >> 5;
    uint64_t v23 = 2;
    double v24 = 1.0 - v14;
    if (v22 > 2) {
      uint64_t v23 = ((unsigned char *)__src - v40) >> 5;
    }
    unint64_t v25 = v22 - 1;
    uint64_t v26 = 1;
    do
    {
      unint64_t v27 = v25 - 1;
      if (v25 <= 1) {
        unint64_t v25 = 1;
      }
      if (v22 != v26)
      {
        float64x2_t v28 = *v21;
        double v29 = v21[1].f64[0];
        double v30 = v21 + 2;
        char v31 = LOBYTE(v21[1].f64[1]);
        do
        {
          float64x2_t v32 = vmulq_n_f64(v28, v24);
          double v33 = v24 * v29;
          double v29 = v30[1].f64[0];
          char v34 = LOBYTE(v30[1].f64[1]);
          double v35 = v33 + v29 * v14;
          float64x2_t v28 = *v30;
          v30[-2] = vaddq_f64(v32, vmulq_n_f64(*v30, v14));
          v30[-1].f64[0] = v35;
          LOBYTE(v30[-1].f64[1]) = v34 | v31;
          v30 += 2;
          char v31 = v34;
          --v25;
        }
        while (v25);
      }
      ++v26;
      unint64_t v25 = v27;
    }
    while (v26 != v23);
  }
  float64x2_t v36 = v21[1];
  *a2 = *v21;
  a2[1] = v36;
  __src = v21;
  operator delete(v21);
}

void sub_30BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_30C0C(char **a1, uint64_t *a2)
{
  size_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        sub_188D718();
      }
      long long v13 = (char *)operator new(12 * v12);
    }
    else
    {
      long long v13 = 0;
    }
    double v14 = &v13[12 * v9];
    *(void *)double v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    long long v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        uint64_t v15 = *(void *)(v5 - 12);
        v5 -= 12;
        int v16 = *((_DWORD *)v5 + 2);
        *(void *)(v14 - 12) = v15;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v5 != v8);
      size_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)size_t v5 = v6;
    long long v7 = v5 + 12;
  }
  a1[1] = v7;
  return v7 - 12;
}

void sub_30D44(uint64_t *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  std::string __p = 0;
  double v20 = 0;
  double v21 = 0;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5 == *a1)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (v7 >> 59) {
      sub_2E00();
    }
    unint64_t v8 = (float64x2_t *)operator new(0x5555555555555560 * ((v5 - *a1) >> 2));
    std::string __p = v8;
    double v20 = v8;
    double v21 = &v8[2 * v7];
    unint64_t v9 = v8;
    if (v5 != v6)
    {
      do
      {
        float64_t v10 = *(double *)v6;
        LODWORD(v25.f64[1]) = *(_DWORD *)(v6 + 8);
        v25.f64[0] = v10;
        sub_32544((uint64_t)&__p, (uint64_t)&v25);
        v6 += 12;
      }
      while (v6 != v5);
      unint64_t v9 = (float64x2_t *)__p;
      unint64_t v8 = v20;
    }
  }
  double v11 = v9[3].f64[0] - v9[1].f64[0];
  float64x2_t v12 = vsubq_f64(v9[2], *v9);
  double v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)) + v11 * v11);
  if (v13 < 2.22507386e-308) {
    double v13 = 2.22507386e-308;
  }
  float64x2_t v25 = vdivq_f64(v12, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
  double v26 = v11 / v13;
  char v27 = 0;
  unint64_t v14 = (((char *)v8 - (char *)v9) >> 5) - 1;
  uint64_t v15 = &v9[2 * v14];
  double v16 = v8[-3].f64[0] - v15[1].f64[0];
  float64x2_t v17 = vsubq_f64(v8[-4], *v15);
  double v18 = sqrt(vaddvq_f64(vmulq_f64(v17, v17)) + v16 * v16);
  if (v18 < 2.22507386e-308) {
    double v18 = 2.22507386e-308;
  }
  float64x2_t v22 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
  double v23 = v16 / v18;
  char v24 = 0;
  sub_30018((uint64_t *)&__p, 0, v14, (uint64_t)&v25, (uint64_t)&v22, a2, a3);
  if (__p)
  {
    double v20 = (float64x2_t *)__p;
    operator delete(__p);
  }
}

void sub_30EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_30F14(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *a1;
    uint64_t v9 = (v5 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 59) {
        sub_188D718();
      }
      double v13 = (char *)operator new(32 * v12);
    }
    else
    {
      double v13 = 0;
    }
    unint64_t v14 = &v13[32 * v9];
    long long v15 = a2[1];
    *(_OWORD *)unint64_t v14 = *a2;
    *((_OWORD *)v14 + 1) = v15;
    unint64_t v7 = v14 + 32;
    if (v5 != v8)
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v14 - 23) = *(_OWORD *)(v5 - 23);
        *((_OWORD *)v14 - 2) = v16;
        v14 -= 32;
        v5 -= 32;
      }
      while (v5 != v8);
      uint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[32 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = a2[1];
    *(_OWORD *)uint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    unint64_t v7 = v5 + 32;
  }
  a1[1] = v7;
  return v7 - 32;
}

void sub_31024(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = a3 - a2;
  sub_32808((uint64_t)a4, a3 - a2 + 1);
  uint64_t v9 = (void *)*a4;
  *(void *)*a4 = 0;
  unint64_t v10 = a2 + 1;
  if (a2 + 1 <= a3)
  {
    uint64_t v11 = (double *)(v9 + 1);
    unint64_t v12 = (float64x2_t *)(*a1 + 32 * a2 + 32);
    double v13 = 0.0;
    unint64_t v14 = a2 + 1;
    do
    {
      float64x2_t v15 = vsubq_f64(v12[-2], *v12);
      double v13 = v13
          + sqrt(vaddvq_f64(vmulq_f64(v15, v15)) + (v12[-1].f64[0] - v12[1].f64[0]) * (v12[-1].f64[0] - v12[1].f64[0]));
      *v11++ = v13;
      ++v14;
      v12 += 2;
    }
    while (v14 <= a3);
    long long v16 = (double *)(v9 + 1);
    do
    {
      double v17 = *v16 / *(double *)&v9[v8];
      if (COERCE__INT64(fabs(v17)) >= 0x7FF0000000000000) {
        double v17 = 0.0;
      }
      *v16++ = v17;
      ++v10;
    }
    while (v10 <= a3);
  }
}

void sub_31120(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_3113C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  std::string __p = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = 0;
  float64x2_t v13 = 0uLL;
  double v14 = 0.0;
  float64x2_t v15 = 0uLL;
  unint64_t v16 = a3 - a2 + 1;
  if (a3 - a2 != -1)
  {
    if (v16 >> 58) {
      sub_2E00();
    }
    uint64_t v18 = 0;
    std::string __p = operator new(v16 << 6);
    uint64_t v87 = __p;
    uint64_t v88 = (char *)__p + 64 * v16;
    do
    {
      double v19 = (*a4)[v18];
      double v20 = v19 * 3.0 * ((1.0 - v19) * (1.0 - v19));
      double v21 = v20 * *(double *)(a5 + 16);
      char v22 = *(unsigned char *)(a5 + 24);
      double v23 = (1.0 - v19) * (v19 * (v19 * 3.0));
      double v24 = v23 * *(double *)(a6 + 16);
      char v25 = *(unsigned char *)(a6 + 24);
      float64x2_t v80 = vmulq_n_f64(*(float64x2_t *)a5, v20);
      double v81 = v21;
      BOOL v82 = v22;
      float64x2_t v83 = vmulq_n_f64(*(float64x2_t *)a6, v23);
      double v84 = v24;
      char v85 = v25;
      sub_31738((char **)&__p, &v80);
      ++v18;
    }
    while (v16 != v18);
    double v26 = (float64x2_t *)(*a1 + 32 * a3);
    char v27 = *a4;
    float64x2_t v28 = (double *)(*a1 + 32 * a2 + 16);
    double v30 = (double *)((char *)__p + 48);
    float64x2_t v13 = 0uLL;
    double v14 = 0.0;
    float64x2_t v15 = 0uLL;
    do
    {
      v31.f64[0] = *(v30 - 6);
      int64x2_t v32 = *(int64x2_t *)(v30 - 5);
      int64x2_t v33 = (int64x2_t)vmulq_f64((float64x2_t)v32, (float64x2_t)v32);
      float64_t v34 = v31.f64[0] * v31.f64[0] + *(double *)v33.i64;
      v33.i64[0] = *(uint64_t *)(v30 - 2);
      v35.f64[0] = *(v30 - 1);
      double v36 = *v27++;
      double v37 = v36;
      float64_t v38 = *v30;
      v30 += 8;
      double v39 = 1.0 - v37;
      double v40 = v37 * 3.0;
      double v41 = (1.0 - v37) * (v37 * (v37 * 3.0));
      double v42 = v37 * (v37 * v37);
      double v43 = v40 * (v39 * v39);
      double v44 = v39 * (v39 * v39);
      *(void *)&v45.f64[0] = v32.i64[0];
      v45.f64[1] = v35.f64[0];
      v35.f64[1] = v31.f64[0];
      double v14 = v14 + v34 + *(double *)&v33.i64[1];
      *(void *)&v31.f64[1] = v33.i64[0];
      *(void *)&v46.f64[0] = vdupq_laneq_s64(v32, 1).u64[0];
      v46.f64[1] = v38;
      float64x2_t v15 = vaddq_f64(v15, vaddq_f64(vaddq_f64(vmulq_n_f64(v31, *(double *)v33.i64), vmulq_laneq_f64(v45, v45, 1)), vmulq_laneq_f64(v46, v46, 1)));
      double v47 = v42 * v26[1].f64[0] + *v28 - v41 * v26[1].f64[0];
      float64x2_t v48 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*a1 + 32 * a2), v44), vaddq_f64(vaddq_f64(vmulq_n_f64(*v26, v42), vsubq_f64(*(float64x2_t *)(v28 - 2), vmulq_n_f64(*v26, v41))), vmulq_n_f64(*(float64x2_t *)(*a1 + 32 * a2), v43)));
      float64x2_t v49 = vmulq_f64((float64x2_t)vzip1q_s64(v33, v32), v48);
      *(float64_t *)v32.i64 = v38;
      double v29 = *(double *)(*a1 + 32 * a2 + 16);
      float64x2_t v13 = vaddq_f64(v13, vaddq_f64(vaddq_f64(v49, vmulq_f64(v35, (float64x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL))), vmulq_n_f64((float64x2_t)v32, v44 * v29 + v47 + v43 * v29)));
      v28 += 4;
      --v16;
    }
    while (v16);
  }
  double v50 = vmuld_lane_f64(v14, v15, 1) - vmulq_f64(v15, v15).f64[0];
  float64x2_t v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15.f64[0], 0);
  v51.f64[0] = v14;
  int64x2_t v52 = (int64x2_t)vmulq_f64(v13, v51);
  int64x2_t v53 = (int64x2_t)vmulq_f64(v13, v15);
  double v54 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v53, 1), (float64x2_t)v53).f64[0] / v50;
  double v55 = vsubq_f64((float64x2_t)v52, (float64x2_t)vdupq_laneq_s64(v52, 1)).f64[0] / v50;
  if (v50 == 0.0) {
    double v56 = 0.0;
  }
  else {
    double v56 = v54;
  }
  if (v50 == 0.0) {
    double v57 = 0.0;
  }
  else {
    double v57 = v55;
  }
  uint64_t v58 = (float64x2_t *)(*a1 + 32 * a3);
  uint64_t v59 = (float64x2_t *)(*a1 + 32 * a2);
  float64x2_t v60 = vsubq_f64(*v59, *v58);
  double v61 = sqrt(vaddvq_f64(vmulq_f64(v60, v60)) + (v59[1].f64[0] - v58[1].f64[0]) * (v59[1].f64[0] - v58[1].f64[0]));
  double v75 = v56;
  double v76 = v57;
  if (v56 < v61 * 0.000001 || v57 < v61 * 0.000001)
  {
    sub_30F14((char **)a7, v59);
    uint64_t v63 = *a1;
    uint64_t v64 = *a1 + 32 * a2;
    double v65 = *(double *)(v64 + 16) + v61 / 3.0 * *(double *)(a5 + 16);
    BOOL v66 = (*(unsigned __int8 *)(a5 + 24) | *(unsigned __int8 *)(v64 + 24)) != 0;
    float64x2_t v80 = vaddq_f64(*(float64x2_t *)v64, vmulq_n_f64(*(float64x2_t *)a5, v61 / 3.0));
    double v81 = v65;
    BOOL v82 = v66;
    uint64_t v67 = v63 + 32 * a3;
    double v68 = *(double *)(v67 + 16) + v61 / 3.0 * *(double *)(a6 + 16);
    LODWORD(v64) = *(unsigned __int8 *)(a6 + 24) | *(unsigned __int8 *)(v67 + 24);
    float64x2_t v77 = vaddq_f64(*(float64x2_t *)v67, vmulq_n_f64(*(float64x2_t *)a6, v61 / 3.0));
    double v78 = v68;
    BOOL v79 = v64 != 0;
  }
  else
  {
    sub_30F14((char **)a7, v59);
    uint64_t v69 = *a1;
    uint64_t v70 = *a1 + 32 * a2;
    double v71 = *(double *)(v70 + 16) + v75 * *(double *)(a5 + 16);
    BOOL v72 = (*(unsigned __int8 *)(a5 + 24) | *(unsigned __int8 *)(v70 + 24)) != 0;
    float64x2_t v80 = vaddq_f64(*(float64x2_t *)v70, vmulq_n_f64(*(float64x2_t *)a5, v75));
    double v81 = v71;
    BOOL v82 = v72;
    uint64_t v73 = v69 + 32 * a3;
    double v74 = *(double *)(v73 + 16) + v76 * *(double *)(a6 + 16);
    LOBYTE(v70) = (*(unsigned __int8 *)(a6 + 24) | *(unsigned __int8 *)(v73 + 24)) != 0;
    float64x2_t v77 = vaddq_f64(*(float64x2_t *)v73, vmulq_n_f64(*(float64x2_t *)a6, v76));
    double v78 = v74;
    BOOL v79 = v70;
  }
  sub_30F14((char **)a7, &v80);
  sub_30F14((char **)a7, &v77);
  sub_30F14((char **)a7, (_OWORD *)(*a1 + 32 * a3));
  if (__p)
  {
    uint64_t v87 = __p;
    operator delete(__p);
  }
}

void sub_315EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  double v29 = *(void **)v27;
  if (*(void *)v27)
  {
    *(void *)(v27 + 8) = v29;
    operator delete(v29);
    double v30 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v30 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

void *sub_3163C@<X0>(void *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, char **a5@<X4>, void *a6@<X8>)
{
  unint64_t v10 = result;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  unint64_t v12 = a3 - a2 + 1;
  if (a3 - a2 != -1)
  {
    if (v12 >> 61) {
      sub_2E00();
    }
    uint64_t result = operator new(8 * v12);
    *a6 = result;
    a6[1] = result;
    a6[2] = &result[v12];
  }
  if (a3 >= a2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 32 * a2;
    do
    {
      double v15 = sub_31B10(a5, (double *)(*v10 + v14), *(double *)(*a4 + 8 * v13));
      uint64_t result = sub_319A8((uint64_t)a6, &v15);
      ++v13;
      v14 += 32;
    }
    while (a2 + v13 <= a3);
  }
  return result;
}

void sub_31718(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_31738(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v10 = *a1;
    uint64_t v11 = (v5 - *a1) >> 6;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58) {
      sub_2E00();
    }
    uint64_t v13 = v4 - (void)v10;
    if (v13 >> 5 > v12) {
      unint64_t v12 = v13 >> 5;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 58) {
        sub_188D718();
      }
      double v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      double v15 = 0;
    }
    unint64_t v16 = &v15[64 * v11];
    long long v17 = a2[1];
    *(_OWORD *)unint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    long long v18 = a2[3];
    *((_OWORD *)v16 + 2) = a2[2];
    *((_OWORD *)v16 + 3) = v18;
    uint64_t v9 = v16 + 64;
    if (v5 != v10)
    {
      do
      {
        long long v19 = *((_OWORD *)v5 - 4);
        long long v20 = *((_OWORD *)v5 - 3);
        long long v21 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v16 - 1) = v21;
        *((_OWORD *)v16 - 4) = v19;
        *((_OWORD *)v16 - 3) = v20;
        v16 -= 64;
        v5 -= 64;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[64 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    uint64_t v9 = v5 + 64;
  }
  a1[1] = v9;
  return v9 - 64;
}

void sub_31854(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  sub_32F08(a1, 1, a2, &v13, a5);
  if (a5 == 0.0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v9 = v13;
    int64_t v10 = v14 - v13;
    if (v14 != v13)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      uint64_t v11 = (char *)operator new(v14 - v13);
      *a3 = v11;
      a3[1] = v11;
      unint64_t v12 = &v11[4 * (v10 >> 2)];
      a3[2] = v12;
      memcpy(v11, v9, v10);
      a3[1] = v12;
    }
    if (v9) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_32F08((uint64_t *)&v13, 0, a2, a3, fmin(a4 / a5, 1.0));
    uint64_t v9 = v13;
    if (v13)
    {
LABEL_6:
      unint64_t v14 = v9;
      operator delete(v9);
    }
  }
}

void sub_3195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_319A8(uint64_t a1, void *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  long long v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    long long v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    double v15 = &v14[8 * v10];
    *double v15 = *a2;
    long long v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      long long v6 = &v5[-v18];
      double v15 = (void *)((char *)v15 - v18);
      long long v19 = &v14[8 * v10 - 16];
      long long v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *long long v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--double v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    long long v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

double sub_31B10(char **a1, double *a2, double a3)
{
  double v3 = a3;
  double v42 = 0;
  double v43 = 0;
  uint64_t v44 = 0;
  double v39 = 0;
  double v40 = 0;
  uint64_t v41 = 0;
  sub_308DC(a1, &v37, a3, 1.0);
  double v6 = *(double *)sub_306C8(a1, 1uLL);
  v34.f64[0] = v6 + *(double *)sub_306C8(a1, 0) * -3.0;
  double v7 = *(double *)(sub_306C8(a1, 1uLL) + 8);
  v32.f64[0] = v7 + *(double *)(sub_306C8(a1, 0) + 8) * -3.0;
  double v8 = *(double *)(sub_306C8(a1, 1uLL) + 16);
  double v36 = v8 + *(double *)(sub_306C8(a1, 0) + 16) * -3.0;
  sub_31FA4(&v42, &v34, &v32, &v36);
  double v9 = *(double *)sub_306C8(a1, 2uLL);
  v34.f64[0] = v9 + *(double *)sub_306C8(a1, 1uLL) * -3.0;
  double v10 = *(double *)(sub_306C8(a1, 2uLL) + 8);
  v32.f64[0] = v10 + *(double *)(sub_306C8(a1, 1uLL) + 8) * -3.0;
  double v11 = *(double *)(sub_306C8(a1, 2uLL) + 16);
  double v36 = v11 + *(double *)(sub_306C8(a1, 1uLL) + 16) * -3.0;
  sub_31FA4(&v42, &v34, &v32, &v36);
  double v12 = *(double *)sub_306C8(a1, 3uLL);
  v34.f64[0] = v12 + *(double *)sub_306C8(a1, 2uLL) * -3.0;
  double v13 = *(double *)(sub_306C8(a1, 3uLL) + 8);
  v32.f64[0] = v13 + *(double *)(sub_306C8(a1, 2uLL) + 8) * -3.0;
  double v14 = *(double *)(sub_306C8(a1, 3uLL) + 16);
  double v36 = v14 + *(double *)(sub_306C8(a1, 2uLL) + 16) * -3.0;
  sub_31FA4(&v42, &v34, &v32, &v36);
  double v15 = *(double *)sub_320F4(&v42, 1uLL);
  unint64_t v16 = (double *)sub_320F4(&v42, 0);
  v34.f64[0] = v15 - (*v16 + *v16);
  double v17 = *(double *)(sub_320F4(&v42, 1uLL) + 8);
  uint64_t v18 = sub_320F4(&v42, 0);
  v32.f64[0] = v17 - (*(double *)(v18 + 8) + *(double *)(v18 + 8));
  double v19 = *(double *)(sub_320F4(&v42, 1uLL) + 16);
  uint64_t v20 = sub_320F4(&v42, 0);
  double v36 = v19 - (*(double *)(v20 + 16) + *(double *)(v20 + 16));
  sub_31FA4(&v39, &v34, &v32, &v36);
  double v21 = *(double *)sub_320F4(&v42, 2uLL);
  long long v22 = (double *)sub_320F4(&v42, 1uLL);
  v34.f64[0] = v21 - (*v22 + *v22);
  double v23 = *(double *)(sub_320F4(&v42, 2uLL) + 8);
  uint64_t v24 = sub_320F4(&v42, 1uLL);
  v32.f64[0] = v23 - (*(double *)(v24 + 8) + *(double *)(v24 + 8));
  double v25 = *(double *)(sub_320F4(&v42, 2uLL) + 16);
  uint64_t v26 = sub_320F4(&v42, 1uLL);
  double v36 = v25 - (*(double *)(v26 + 16) + *(double *)(v26 + 16));
  sub_31FA4(&v39, &v34, &v32, &v36);
  sub_308DC(&v42, &v34, v3, 1.0);
  sub_308DC(&v39, &v32, v3, 1.0);
  double v27 = v37.f64[0] - *a2;
  double v28 = v37.f64[1] - a2[1];
  double v29 = v38 - a2[2];
  double v30 = v34.f64[0] * v34.f64[0] + v34.f64[1] * v34.f64[1] + v35 * v35 + v27 * v32.f64[0] + v28 * v32.f64[1] + v29 * v33;
  if (v30 != 0.0) {
    double v3 = v3 - (v27 * v34.f64[0] + v28 * v34.f64[1] + v29 * v35) / v30;
  }
  if (v39)
  {
    double v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    double v43 = v42;
    operator delete(v42);
  }
  return v3;
}

void sub_31F48(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)(v1 - 80);
  if (v3)
  {
    *(void *)(v1 - 72) = v3;
    operator delete(v3);
    unint64_t v4 = *(void **)(v1 - 56);
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v4 = *(void **)(v1 - 56);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 - 48) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

char *sub_31FA4(char **a1, void *a2, void *a3, void *a4)
{
  double v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(void *)double v9 = *a2;
    *((void *)v9 + 1) = *a3;
    *((void *)v9 + 2) = *a4;
    v9[24] = 0;
    double v10 = v9 + 32;
    goto LABEL_13;
  }
  double v11 = *a1;
  uint64_t v12 = (v9 - *a1) >> 5;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v14 = v8 - (void)v11;
  if (v14 >> 4 > v13) {
    unint64_t v13 = v14 >> 4;
  }
  BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  if (!v15) {
    unint64_t v16 = v13;
  }
  if (v16 >> 59) {
    sub_188D718();
  }
  uint64_t v17 = 32 * v16;
  uint64_t v18 = (char *)operator new(32 * v16);
  double v19 = &v18[32 * v12];
  uint64_t v20 = &v18[v17];
  uint64_t v21 = *a3;
  *(void *)double v19 = *a2;
  *((void *)v19 + 1) = v21;
  *((void *)v19 + 2) = *a4;
  v19[24] = 0;
  double v10 = v19 + 32;
  if (v9 == v11)
  {
    *a1 = v19;
    a1[1] = v10;
    a1[2] = v20;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    long long v22 = *((_OWORD *)v9 - 2);
    double v23 = v19 - 32;
    *(_OWORD *)(v19 - 23) = *(_OWORD *)(v9 - 23);
    *((_OWORD *)v19 - 2) = v22;
    v9 -= 32;
    v19 -= 32;
  }
  while (v9 != v11);
  *a1 = v23;
  a1[1] = v10;
  a1[2] = v20;
  if (v11) {
LABEL_12:
  }
    operator delete(v11);
LABEL_13:
  a1[1] = v10;
  return v10 - 32;
}

uint64_t sub_320F4(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 5);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 32 * a2;
}

void sub_32224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_32304(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = __src;
  double v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (a5 > (v9 - (uint64_t)v10) >> 5)
  {
    double v11 = *(char **)a1;
    unint64_t v12 = a5 + ((uint64_t)&v10[-*(void *)a1] >> 5);
    if (v12 >> 59) {
      sub_2E00();
    }
    uint64_t v13 = v9 - (void)v11;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 59) {
        sub_188D718();
      }
      std::string v15 = (char *)operator new(32 * v14);
    }
    else
    {
      std::string v15 = 0;
    }
    uint64_t v26 = &v15[32 * ((v5 - v11) >> 5)];
    uint64_t v27 = 32 * a5;
    double v28 = &v26[32 * a5];
    double v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v7;
      long long v31 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)double v29 = v30;
      *((_OWORD *)v29 + 1) = v31;
      v29 += 32;
      v27 -= 32;
    }
    while (v27);
    float64x2_t v32 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      float64x2_t v34 = v26;
      float64x2_t v37 = &v15[32 * v14];
      int64_t v38 = v10 - v5;
      if (v10 == v5) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v33 = v5;
      float64x2_t v34 = v26;
      do
      {
        long long v35 = *((_OWORD *)v33 - 2);
        *(_OWORD *)(v34 - 23) = *(_OWORD *)(v33 - 23);
        *((_OWORD *)v34 - 2) = v35;
        v34 -= 32;
        v33 -= 32;
      }
      while (v33 != v32);
      double v36 = *(char **)(a1 + 8);
      float64x2_t v37 = &v15[32 * v14];
      int64_t v38 = v36 - v5;
      if (v36 == v5) {
        goto LABEL_33;
      }
    }
    memmove(v28, v5, v38 - 7);
LABEL_33:
    double v39 = *(char **)a1;
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = &v28[v38];
    *(void *)(a1 + 16) = v37;
    if (v39) {
      operator delete(v39);
    }
    return v26;
  }
  uint64_t v16 = v10 - __dst;
  uint64_t v17 = (v10 - __dst) >> 5;
  if (v17 >= a5)
  {
    std::string v18 = &__src[32 * a5];
    std::string::size_type v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[32 * a5];
    long long v22 = &v10[-32 * a5];
    double v23 = v20;
    if (v22 >= v10)
    {
LABEL_21:
      *(void *)(a1 + 8) = v23;
      if (v20 != v21) {
        memmove(&v20[-32 * ((v20 - v21) >> 5)], v5, v20 - v21 - 7);
      }
      if (v18 != v7) {
        memmove(v5, v7, v18 - v7 - 7);
      }
      return v5;
    }
LABEL_19:
    double v23 = v20;
    do
    {
      long long v24 = *(_OWORD *)v22;
      long long v25 = *((_OWORD *)v22 + 1);
      v22 += 32;
      *(_OWORD *)double v23 = v24;
      *((_OWORD *)v23 + 1) = v25;
      v23 += 32;
    }
    while (v22 < v10);
    goto LABEL_21;
  }
  std::string v18 = &__src[32 * v17];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[32 * v17], v19 - 7);
  }
  std::string::size_type v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v16 >= 1)
  {
    uint64_t v21 = &v5[32 * a5];
    long long v22 = &v20[-32 * a5];
    double v23 = &v10[v19];
    if (v22 >= v10) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  return v5;
}

char *sub_32544(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(float64x2_t **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    double v10 = *(float64x2_t **)a1;
    uint64_t v11 = ((uint64_t)v5 - *(void *)a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v13 = v4 - (void)v10;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 59) {
      sub_188D718();
    }
    uint64_t v16 = 32 * v15;
    uint64_t v17 = (char *)operator new(32 * v15);
    std::string v18 = (double *)&v17[32 * v11];
    int64_t v19 = &v17[v16];
    int v20 = *(_DWORD *)(a2 + 8);
    *((unsigned char *)v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20 == 0x7FFFFFFF;
    v21.i64[0] = *(void *)a2;
    v21.i64[1] = HIDWORD(*(void *)a2);
    *(float64x2_t *)std::string v18 = vcvtq_f64_u64(v21);
    double v22 = 0.0;
    if (v20 != 0x7FFFFFFF) {
      double v22 = (double)v20;
    }
    v18[2] = v22;
    uint64_t v9 = (char *)(v18 + 4);
    if (v5 == v10)
    {
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v19;
      if (!v10) {
        goto LABEL_17;
      }
    }
    else
    {
      do
      {
        float64x2_t v23 = v5[-2];
        long long v24 = (char *)(v18 - 4);
        *(float64x2_t *)((char *)v18 - 23) = *(float64x2_t *)((char *)v5 - 23);
        *((float64x2_t *)v18 - 2) = v23;
        v5 -= 2;
        v18 -= 4;
      }
      while (v5 != v10);
      *(void *)a1 = v24;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v19;
      if (!v10) {
        goto LABEL_17;
      }
    }
    operator delete(v10);
    goto LABEL_17;
  }
  BOOL v6 = *(_DWORD *)(a2 + 8) == 0x7FFFFFFF;
  LOBYTE(v5[1].f64[1]) = v6;
  v7.i64[0] = *(void *)a2;
  v7.i64[1] = HIDWORD(*(void *)a2);
  *uint64_t v5 = vcvtq_f64_u64(v7);
  double v8 = (double)*(int *)(a2 + 8);
  if (v6) {
    double v8 = 0.0;
  }
  v5[1].f64[0] = v8;
  uint64_t v9 = (char *)&v5[2];
LABEL_17:
  *(void *)(a1 + 8) = v9;
  return v9 - 32;
}

void *sub_326C0(void *result, char *__src, char *a3, size_t __sz)
{
  BOOL v6 = __src;
  uint64x2_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    void v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  std::string v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    int64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void sub_32808(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      BOOL v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64x2_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    size_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v6 = &v5[-v20];
      v14 -= v20;
      uint64x2_t v21 = &v13[8 * v9 - 16];
      double v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64x2_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t *sub_329B8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  uint64_t v5 = v3 - *result;
  if (v3 != *result)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t v6 = v5 >> 5;
    uint64_t result = (uint64_t *)operator new(12 * (v5 >> 5));
    uint64_t v7 = (uint64_t)result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = (char *)result + 12 * v6; v4 != v3; v4 += 32)
    {
      uint64_t v8 = *(double *)v4;
      LODWORD(v9) = *(double *)(v4 + 8);
      if (*(unsigned char *)(v4 + 24))
      {
        if (v9 >= 0xFFFFFFFE) {
          uint64_t v9 = 4294967294;
        }
        else {
          uint64_t v9 = v9;
        }
        uint64_t v10 = v8 | (v9 << 32);
        int v11 = 0x7FFFFFFF;
      }
      else
      {
        if (v9 >= 0xFFFFFFFE) {
          uint64_t v9 = 4294967294;
        }
        else {
          uint64_t v9 = v9;
        }
        uint64_t v10 = v8 | (v9 << 32);
        int v11 = (int)*(double *)(v4 + 16);
      }
      uint64_t v12 = v10;
      int v13 = v11;
      uint64_t result = (uint64_t *)sub_32ACC((char **)a2, v7, (uint64_t)&v12);
      uint64_t v7 = (uint64_t)result + 12;
    }
  }
  return result;
}

void sub_32AAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_32ACC(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  uint64_t v8 = &(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v15 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    double v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x1555555555555555) {
        sub_188D718();
      }
      unint64_t v18 = (char *)operator new(12 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    float64x2_t v32 = v18;
    uint64_t v33 = &v18[12 * v7];
    std::string __dst = v33;
    long long v35 = &v18[12 * v17];
    sub_32D80((uint64_t)&v32, (uint64_t *)a3);
    uint64_t v20 = v33;
    uint64x2_t v21 = *a1;
    double v22 = v33;
    if (*a1 != v8)
    {
      uint64_t v23 = v8;
      double v22 = v33;
      do
      {
        uint64_t v24 = *(void *)(v23 - 12);
        v23 -= 12;
        int v25 = *((_DWORD *)v23 + 2);
        *(void *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v23 != v21);
    }
    uint64_t v33 = v22;
    uint64_t v26 = a1[1];
    uint64_t v27 = (char *)__dst;
    int64_t v28 = v26 - v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, v26 - v8);
      double v22 = v33;
      uint64_t v8 = a1[1];
    }
    double v29 = *a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    long long v30 = a1[2];
    a1[2] = v35;
    std::string __dst = v8;
    long long v35 = v30;
    float64x2_t v32 = v29;
    uint64_t v33 = v29;
    if (v8 != v29) {
      std::string __dst = &v29[(v8 - v29 - 12) % 0xCuLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return v20;
  }
  else if (v8 == (char *)v5)
  {
    uint64_t v19 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v19;
    a1[1] = v8 + 12;
  }
  else
  {
    uint64_t v10 = v8 + 12;
    unint64_t v11 = v5 - 12;
    uint64_t v12 = a1[1];
    if (v5 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 + 8);
        *(void *)uint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((_DWORD *)v5 != v10) {
      memmove(v8 + 12, v8, v5 - (void)v10);
    }
    uint64_t v14 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v14;
  }
  return v8;
}

void sub_32D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_32D80(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    unint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * ((v4 - v6) >> 2);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x1555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 12 * v15;
      unint64_t v18 = (char *)operator new(12 * v15);
      uint64_t v19 = &v18[12 * v16];
      int64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      uint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 12;
        uint64_t v4 = &v19[12 * v22];
        uint64_t v23 = 12 * v22;
        uint64_t v24 = &v18[12 * v16];
        do
        {
          uint64_t v25 = *(void *)v5;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v5 + 2);
          *(void *)uint64_t v24 = v25;
          v24 += 12;
          v5 += 12;
          v23 -= 12;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -12 * v9;
      uint64_t v12 = &v5[v11];
      uint64_t v13 = (char *)(v4 - v5);
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), v4 - v5);
        uint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v14 = &v4[12 * v10];
      uint64_t v4 = &v13[(void)v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[(void)v12];
    }
  }
  uint64_t v26 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v4 = v26;
  *(void *)(a1 + 16) += 12;
}

void sub_32F08(uint64_t *a1@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X8>, double a5@<D0>)
{
  char v32 = a3;
  uint64_t v31 = 0;
  double v8 = 0.0;
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v27 = 0u;
  char v30 = 0;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 == v10 || *a1 + 12 == v10)
  {
    double v13 = 0.0;
  }
  else
  {
    double v13 = 0.0;
    do
    {
      sub_33150(v9, (unsigned int *)(v9 + 12), v8);
      double v13 = v13 + v8;
      uint64_t v14 = v9 + 24;
      v9 += 12;
    }
    while (v14 != v10);
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
  }
  double v29 = v13 * a5;
  v28[0] = &v30;
  v28[1] = v25;
  v28[2] = &v32;
  v28[3] = &v31;
  v28[4] = &v29;
  if (v9 != v10 && v9 + 12 != v10)
  {
    do
    {
      sub_33350((uint64_t)v28, v9, (unsigned int *)(v9 + 12));
      uint64_t v15 = v9 + 24;
      v9 += 12;
    }
    while (v15 != v10);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v16 = v25[0];
  uint64_t v17 = __p[1];
  BOOL v18 = a2 == 0;
  if (a2) {
    uint64_t v19 = v25[0];
  }
  else {
    uint64_t v19 = __p[1];
  }
  BOOL v20 = &v25[1];
  if (v18) {
    BOOL v20 = (void **)&v27;
  }
  int64_t v21 = *v20;
  int64_t v22 = v21 - v19;
  if (v21 != v19)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v23 = (char *)operator new(v22);
    *a4 = v23;
    uint64_t v24 = &v23[4 * (v22 >> 2)];
    a4[2] = v24;
    memcpy(v23, v19, v22);
    a4[1] = v24;
  }
  if (v17)
  {
    *(void *)&long long v27 = v17;
    operator delete(v17);
    unint64_t v16 = v25[0];
  }
  if (v16)
  {
    v25[1] = v16;
    operator delete(v16);
  }
}

void sub_330D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
    sub_3310C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_3310C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_3310C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_33150(uint64_t a1, unsigned int *a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 4);
  long double v5 = exp(3.14159265 - (double)*(unint64_t *)&a3 * 6.28318531 / 4294967300.0);
  long double v6 = atan((v5 - 1.0 / v5) * 0.5) * 57.2957795 * 0.0174532925;
  unint64_t v7 = *(void *)a1;
  unsigned int v17 = *(void *)a1;
  LODWORD(v7) = a2[1];
  long double v8 = exp(3.14159265 - (double)v7 * 6.28318531 / 4294967300.0);
  long double v9 = atan((v8 - 1.0 / v8) * 0.5) * 57.2957795 * 0.0174532925;
  v10.i64[0] = v17;
  v10.i64[1] = *a2;
  float64x2_t v11 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v10), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v18 = vsubq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0];
  long double v12 = sin((v6 - v9) * 0.5);
  long double v13 = v12 * v12;
  double v14 = cos(v6);
  long double v15 = v14 * cos(v9);
  long double v16 = sin(0.5 * v18);
  atan2(sqrt(v13 + v15 * (v16 * v16)), sqrt(1.0 - (v13 + v15 * (v16 * v16))));
}

void sub_33350(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (**(unsigned char **)a1) {
    goto LABEL_30;
  }
  sub_30C0C(*(char ***)(a1 + 8), (uint64_t *)a2);
  sub_33150(a2, a3, v6);
  double v9 = v8;
  uint64x2_t v10 = *(double **)(a1 + 24);
  double v11 = *v10;
  double v12 = v8 + *v10;
  double v13 = **(double **)(a1 + 32);
  if (v12 < v13)
  {
    double v14 = *(unsigned char **)a1;
    *uint64x2_t v10 = v12;
    if (!*v14) {
      return;
    }
LABEL_30:
    sub_30C0C((char **)(*(void *)(a1 + 8) + 24), (uint64_t *)a3);
    return;
  }
  double v15 = 0.0;
  if (v9 > 0.0)
  {
    double v12 = v13 - v11;
    double v15 = (v13 - v11) / v9;
  }
  LODWORD(v12) = *a3;
  LODWORD(v11) = a3[1];
  *(double *)&unint64_t v16 = (double)*(unint64_t *)&v12;
  double v17 = v15 * *(double *)&v16;
  LODWORD(v16) = *(_DWORD *)a2;
  LODWORD(v7) = *(_DWORD *)(a2 + 4);
  double v18 = (double)v16;
  double v19 = 1.0 - v15;
  uint64_t v20 = (v17 + (1.0 - v15) * v18 + 0.5);
  LODWORD(v21) = (v15 * (double)*(unint64_t *)&v11 + (1.0 - v15) * (double)v7 + 0.5);
  int v22 = *(_DWORD *)(a2 + 8);
  int v23 = 0x7FFFFFFF;
  if (v22 != 0x7FFFFFFF)
  {
    int v24 = a3[2];
    if (v24 != 0x7FFFFFFF)
    {
      double v25 = v15 * (double)v24;
      if (v25 >= 0.0)
      {
        if (v25 >= 4.50359963e15) {
          goto LABEL_17;
        }
        uint64_t v26 = (uint64_t)(v25 + v25) + 1;
      }
      else
      {
        if (v25 <= -4.50359963e15) {
          goto LABEL_17;
        }
        uint64_t v26 = (uint64_t)(v25 + v25);
        if (v26 >= 1) {
          --v26;
        }
      }
      double v25 = (double)(v26 >> 1);
LABEL_17:
      double v27 = v19 * (double)v22;
      if (v27 >= 0.0)
      {
        if (v27 < 4.50359963e15)
        {
          uint64_t v28 = (uint64_t)(v27 + v27) + 1;
LABEL_24:
          double v27 = (double)(v28 >> 1);
        }
      }
      else if (v27 > -4.50359963e15)
      {
        uint64_t v28 = (uint64_t)(v27 + v27);
        if (v28 >= 1) {
          --v28;
        }
        goto LABEL_24;
      }
      int v23 = (int)v27 + (int)v25;
    }
  }
  if (v21 >= 0xFFFFFFFE) {
    uint64_t v21 = 4294967294;
  }
  else {
    uint64_t v21 = v21;
  }
  uint64_t v30 = v20 | (v21 << 32);
  int v31 = v23;
  sub_30C0C(*(char ***)(a1 + 8), &v30);
  sub_30C0C((char **)(*(void *)(a1 + 8) + 24), &v30);
  double v29 = *(unsigned char **)a1;
  *double v29 = 1;
  **(double **)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9 + **(double **)(a1 + 24);
  if (*v29) {
    goto LABEL_30;
  }
}

char *sub_33588(void *a1, char *__src, _OWORD *a3)
{
  uint64_t v4 = __src;
  double v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      long long v23 = a3[1];
      *(_OWORD *)__src = *a3;
      *((_OWORD *)__src + 1) = v23;
      a1[1] = __src + 32;
    }
    else
    {
      double v8 = __src + 32;
      double v9 = v6 - 32;
      uint64x2_t v10 = (_OWORD *)a1[1];
      if ((unint64_t)v6 >= 0x20)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          long long v12 = *((_OWORD *)v9 + 1);
          v9 += 32;
          *uint64x2_t v10 = v11;
          v10[1] = v12;
          v10 += 2;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8) {
        memmove(&v6[-32 * ((v6 - v8) >> 5)], __src, v6 - v8 - 7);
      }
      long long v13 = *a3;
      *(_OWORD *)(v4 + 9) = *(_OWORD *)((char *)a3 + 9);
      *(_OWORD *)uint64_t v4 = v13;
    }
    return v4;
  }
  double v14 = (char *)*a1;
  unint64_t v15 = ((uint64_t)&v6[-*a1] >> 5) + 1;
  if (v15 >> 59) {
    sub_2E00();
  }
  uint64_t v16 = v7 - (void)v14;
  if (v16 >> 4 > v15) {
    unint64_t v15 = v16 >> 4;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 59) {
      sub_188D718();
    }
    double v18 = (char *)operator new(32 * v17);
    uint64_t v19 = v4 - v14;
    uint64_t v20 = (v4 - v14) >> 5;
    uint64_t v21 = &v18[32 * v20];
    int v22 = &v18[32 * v17];
    if (v20 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  double v18 = 0;
  uint64_t v19 = __src - v14;
  uint64_t v20 = (__src - v14) >> 5;
  uint64_t v21 = (char *)(32 * v20);
  int v22 = 0;
  if (!v20)
  {
LABEL_20:
    if (v19 < 1)
    {
      if (v14 == v4) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v19 >> 4;
      }
      if (v25 >> 59) {
        sub_188D718();
      }
      uint64_t v26 = (char *)operator new(32 * v25);
      uint64_t v21 = &v26[32 * (v25 >> 2)];
      int v22 = &v26[32 * v25];
      if (v18)
      {
        operator delete(v18);
        double v14 = (char *)*a1;
      }
    }
    else
    {
      if (v20 >= -1) {
        unint64_t v24 = v20 + 1;
      }
      else {
        unint64_t v24 = v20 + 2;
      }
      v21 -= 32 * (v24 >> 1);
    }
  }
LABEL_31:
  long long v27 = a3[1];
  *(_OWORD *)uint64_t v21 = *a3;
  *((_OWORD *)v21 + 1) = v27;
  uint64_t v28 = v21;
  if (v14 != v4)
  {
    double v29 = v4;
    uint64_t v30 = v21;
    do
    {
      long long v31 = *((_OWORD *)v29 - 2);
      uint64_t v28 = (char *)(v30 - 2);
      *(_OWORD *)((char *)v30 - 23) = *(_OWORD *)(v29 - 23);
      *(v30 - 2) = v31;
      v29 -= 32;
      v30 -= 2;
    }
    while (v29 != v14);
  }
  char v32 = (char *)a1[1];
  int64_t v33 = v32 - v4;
  if (v32 != v4) {
    memmove(v21 + 32, v4, v33 - 7);
  }
  float64x2_t v34 = (char *)*a1;
  *a1 = v28;
  a1[1] = &v21[v33 + 32];
  a1[2] = v22;
  if (v34) {
    operator delete(v34);
  }
  return v21;
}

void sub_337C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_337DC(void *result, char *__src, char *a3, size_t __sz)
{
  double v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  double v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(32 * v12);
    double v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    void v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 7);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 7;
    uint64_t v20 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  double v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 7);
    double v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 7;
    uint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t sub_3392C(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  *(_OWORD *)uint64_t result = xmmword_20B8E30;
  *(void *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  unsigned int v3 = *a2;
  unsigned int v4 = a2[1];
  if (*a2 != -1 || v4 != -1)
  {
    unsigned int v6 = a3[1];
    if (*a3 != -1 || v6 != -1)
    {
      if (*a3 < v3) {
        unsigned int v3 = *a3;
      }
      if (v4 <= v6) {
        unsigned int v4 = a3[1];
      }
      *(_DWORD *)uint64_t result = v3;
      *(_DWORD *)(result + 4) = v4;
      unsigned int v8 = *a2;
      unsigned int v9 = a2[1];
      if (*a2 <= *a3) {
        unsigned int v8 = *a3;
      }
      if (a3[1] < v9) {
        unsigned int v9 = a3[1];
      }
      *(_DWORD *)(result + 12) = v8;
      *(_DWORD *)(result + 16) = v9;
    }
  }
  return result;
}

__n128 sub_33998(uint64_t a1, uint64_t a2)
{
  LODWORD(v3) = *(_DWORD *)a2;
  LODWORD(v2) = *(_DWORD *)(a2 + 4);
  if ((*(_DWORD *)a2 != -1 || v2 != -1) && (*(_DWORD *)(a2 + 12) != -1 || *(_DWORD *)(a2 + 16) != -1))
  {
    unsigned int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 == -1 && *(_DWORD *)(a1 + 4) == -1
      || ((unsigned int v8 = *(_DWORD *)(a1 + 12), LODWORD(v7) = *(_DWORD *)(a1 + 16), v8 == -1) ? (v9 = v7 == -1) : (v9 = 0),
          v9))
    {
      __n128 result = *(__n128 *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(__n128 *)a1 = result;
    }
    else
    {
      if (v3 >= v6) {
        uint64_t v3 = v6;
      }
      else {
        uint64_t v3 = v3;
      }
      if (*(_DWORD *)(a1 + 4) > v2) {
        LODWORD(v2) = *(_DWORD *)(a1 + 4);
      }
      if (v2 >= 0xFFFFFFFE) {
        uint64_t v2 = 4294967294;
      }
      else {
        uint64_t v2 = v2;
      }
      *(void *)a1 = v3 | (v2 << 32);
      *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
      LODWORD(v3) = *(_DWORD *)(a2 + 12);
      if (v8 <= v3) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v8;
      }
      if (*(_DWORD *)(a2 + 16) < v7) {
        LODWORD(v7) = *(_DWORD *)(a2 + 16);
      }
      if (v7 >= 0xFFFFFFFE) {
        uint64_t v7 = 4294967294;
      }
      else {
        uint64_t v7 = v7;
      }
      *(void *)(a1 + 12) = v3 | (v7 << 32);
      *(_DWORD *)(a1 + 20) = 0x7FFFFFFF;
    }
  }
  return result;
}

uint64_t sub_33A50(uint64_t result, unsigned int *a2)
{
  LODWORD(v2) = *(_DWORD *)result;
  if (*(_DWORD *)result == -1 && *(_DWORD *)(result + 4) == -1
    || (LODWORD(v3) = *(_DWORD *)(result + 12), v3 == -1) && *(_DWORD *)(result + 16) == -1)
  {
    uint64_t v8 = *(void *)a2;
    *(_DWORD *)(result + 8) = a2[2];
    *(void *)__n128 result = v8;
    uint64_t v9 = *(void *)a2;
    *(_DWORD *)(result + 20) = a2[2];
    *(void *)(result + 12) = v9;
  }
  else
  {
    unsigned int v4 = *a2;
    unsigned int v5 = a2[1];
    if ((*a2 & v5) == 0xFFFFFFFF) {
      unsigned int v5 = -1;
    }
    if (v4 != -1 || v5 != -1)
    {
      if (v2 == -1 && *(_DWORD *)(result + 4) == -1
        || (unsigned int v7 = *(_DWORD *)(result + 16), v3 == -1) && v7 == -1)
      {
        *(_DWORD *)__n128 result = v4;
        *(_DWORD *)(result + 4) = v5;
        *(_DWORD *)(result + 8) = 0x7FFFFFFF;
        *(_DWORD *)(result + 12) = v4;
        *(_DWORD *)(result + 16) = v5;
        *(_DWORD *)(result + 20) = 0x7FFFFFFF;
      }
      else
      {
        if (v4 >= v2) {
          uint64_t v2 = v2;
        }
        else {
          uint64_t v2 = v4;
        }
        LODWORD(v10) = *(_DWORD *)(result + 4);
        if (v10 <= v5) {
          LODWORD(v10) = v5;
        }
        if (v10 >= 0xFFFFFFFE) {
          uint64_t v10 = 4294967294;
        }
        else {
          uint64_t v10 = v10;
        }
        *(void *)__n128 result = v2 | (v10 << 32);
        *(_DWORD *)(result + 8) = 0x7FFFFFFF;
        if (v3 <= v4) {
          uint64_t v3 = v4;
        }
        else {
          uint64_t v3 = v3;
        }
        if (v5 >= v7) {
          LODWORD(v11) = v7;
        }
        else {
          LODWORD(v11) = v5;
        }
        if (v11 >= 0xFFFFFFFE) {
          uint64_t v11 = 4294967294;
        }
        else {
          uint64_t v11 = v11;
        }
        *(void *)(result + 12) = v3 | (v11 << 32);
        *(_DWORD *)(result + 20) = 0x7FFFFFFF;
      }
    }
  }
  return result;
}

uint64_t sub_33B54(uint64_t result, unsigned int ***a2)
{
  *(_OWORD *)__n128 result = xmmword_20B8E30;
  *(void *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  if (v2 != v3)
  {
    unsigned int v4 = (void *)(result + 12);
    do
    {
      LODWORD(v7) = *(_DWORD *)result;
      if (*(_DWORD *)result == -1 && *(_DWORD *)(result + 4) == -1
        || (LODWORD(v8) = *(_DWORD *)v4, *(_DWORD *)v4 == -1) && *(_DWORD *)(result + 16) == -1)
      {
        uint64_t v5 = *(void *)v2;
        *(_DWORD *)(result + 8) = v2[2];
        *(void *)__n128 result = v5;
        uint64_t v6 = *(void *)v2;
        *(_DWORD *)(result + 20) = v2[2];
        void *v4 = v6;
      }
      else
      {
        unsigned int v9 = *v2;
        unsigned int v10 = v2[1];
        if ((*v2 & v10) == 0xFFFFFFFF) {
          unsigned int v10 = -1;
        }
        if (v9 != -1 || v10 != -1)
        {
          if (v7 == -1 && *(_DWORD *)(result + 4) == -1
            || (unsigned int v12 = *(_DWORD *)(result + 16), v8 == -1) && v12 == -1)
          {
            *(_DWORD *)__n128 result = v9;
            *(_DWORD *)(result + 4) = v10;
            *(_DWORD *)(result + 8) = 0x7FFFFFFF;
            *(_DWORD *)(result + 12) = v9;
            *(_DWORD *)(result + 16) = v10;
          }
          else
          {
            if (v9 >= v7) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = v9;
            }
            LODWORD(v13) = *(_DWORD *)(result + 4);
            if (v13 <= v10) {
              LODWORD(v13) = v10;
            }
            if (v13 >= 0xFFFFFFFE) {
              uint64_t v13 = 4294967294;
            }
            else {
              uint64_t v13 = v13;
            }
            *(void *)__n128 result = v7 | (v13 << 32);
            *(_DWORD *)(result + 8) = 0x7FFFFFFF;
            if (v8 <= v9) {
              uint64_t v8 = v9;
            }
            else {
              uint64_t v8 = v8;
            }
            if (v10 >= v12) {
              LODWORD(v14) = v12;
            }
            else {
              LODWORD(v14) = v10;
            }
            if (v14 >= 0xFFFFFFFE) {
              uint64_t v14 = 4294967294;
            }
            else {
              uint64_t v14 = v14;
            }
            *(void *)(result + 12) = v8 | (v14 << 32);
          }
          *(_DWORD *)(result + 20) = 0x7FFFFFFF;
        }
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_33C94(uint64_t result, unsigned int ****a2)
{
  *(_OWORD *)__n128 result = xmmword_20B8E30;
  *(void *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    unsigned int v4 = -1;
    unsigned int v5 = -1;
    unsigned int v6 = -1;
    int v7 = -1;
    unsigned int v8 = -1;
    do
    {
      unsigned int v9 = **v2;
      unsigned int v10 = (*v2)[1];
      int v11 = 0x7FFFFFFF;
      uint64_t v12 = 0xFFFFFFFFLL;
      LODWORD(v13) = -1;
      uint64_t v14 = 0xFFFFFFFFLL;
      unsigned int v15 = -1;
      int v16 = 0x7FFFFFFF;
      while (v9 != v10)
      {
        while (v13 == -1 && v12 == -1 || v15 == -1 && v14 == -1)
        {
          LODWORD(v13) = *v9;
          uint64_t v12 = v9[1];
          int v11 = v9[2];
          uint64_t v14 = v12;
          unsigned int v15 = *v9;
          int v16 = v11;
          v9 += 3;
          if (v9 == v10) {
            goto LABEL_43;
          }
        }
        unsigned int v17 = *v9;
        unsigned int v18 = v9[1];
        v9 += 3;
        if ((v17 & v18) == 0xFFFFFFFF) {
          unsigned int v18 = -1;
        }
        if (v17 >= v13) {
          unsigned int v19 = v13;
        }
        else {
          unsigned int v19 = v17;
        }
        if (v12 <= v18) {
          unsigned int v20 = v18;
        }
        else {
          unsigned int v20 = v12;
        }
        if (v20 >= 0xFFFFFFFE) {
          unsigned int v20 = -2;
        }
        if (v15 <= v17) {
          unsigned int v21 = v17;
        }
        else {
          unsigned int v21 = v15;
        }
        if (v18 >= v14) {
          unsigned int v22 = v14;
        }
        else {
          unsigned int v22 = v18;
        }
        if (v22 >= 0xFFFFFFFE) {
          unsigned int v22 = -2;
        }
        BOOL v23 = v17 == -1 && v18 == -1;
        if (v23) {
          uint64_t v12 = v12;
        }
        else {
          uint64_t v12 = v20;
        }
        if (v23)
        {
          uint64_t v14 = v14;
        }
        else
        {
          LODWORD(v13) = v19;
          uint64_t v14 = v22;
        }
        if (!v23)
        {
          unsigned int v15 = v21;
          int v11 = 0x7FFFFFFF;
          int v16 = 0x7FFFFFFF;
        }
      }
LABEL_43:
      if ((v13 != -1 || v12 != -1) && (v15 != -1 || v14 != -1))
      {
        if (v8 == -1 && v7 == -1 || v6 == -1 && v5 == -1)
        {
          *(void *)__n128 result = v13 | (unint64_t)(v12 << 32);
          *(_DWORD *)(result + 8) = v16;
        }
        else
        {
          if (v13 >= v8) {
            uint64_t v13 = v8;
          }
          else {
            uint64_t v13 = v13;
          }
          if (v4 <= v12) {
            unsigned int v4 = v12;
          }
          if (v4 >= 0xFFFFFFFE) {
            uint64_t v12 = 4294967294;
          }
          else {
            uint64_t v12 = v4;
          }
          *(void *)__n128 result = v13 | (v12 << 32);
          int v11 = 0x7FFFFFFF;
          *(_DWORD *)(result + 8) = 0x7FFFFFFF;
          if (v6 > v15) {
            unsigned int v15 = v6;
          }
          if (v14 < v5) {
            unsigned int v5 = v14;
          }
          if (v5 >= 0xFFFFFFFE) {
            uint64_t v14 = 4294967294;
          }
          else {
            uint64_t v14 = v5;
          }
        }
        unsigned int v4 = v12;
        *(void *)(result + 12) = v15 | (unint64_t)(v14 << 32);
        *(_DWORD *)(result + 20) = v11;
        unsigned int v5 = v14;
        unsigned int v6 = v15;
        int v7 = v12;
        unsigned int v8 = v13;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return result;
}

double sub_33E90@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_20B8E40;
  double result = NAN;
  *(void *)(a1 + 16) = 0x7FFFFFFF00000000;
  return result;
}

void sub_33EAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *((char *)a1 + 23);
  BOOL v4 = v3 < 0;
  unsigned int v5 = (uint64_t *)*a1;
  if (v3 >= 0) {
    unsigned int v5 = a1;
  }
  uint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if (v4) {
    uint64_t v6 = a1[1];
  }
  *(void *)&long long v40 = v5;
  *((void *)&v40 + 1) = v6;
  sub_230E8((unsigned __int8 **)&v40, 0x2Cu, (uint64_t)&__p);
  if ((char *)v43 - (unsigned char *)__p != 96)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)__p) >> 3));
    int64_t v33 = std::string::insert(&v38, 0, "Expected 4 comma-separated values, but parsed ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    long long v35 = std::string::append(&v39, " instead");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v35->__r_.__value_.__r.__words[2];
    long long v40 = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    float64x2_t v37 = (void *)sub_2F404((uint64_t)exception, &v40);
  }
  double v7 = std::stod((const std::string *)__p, 0);
  double v8 = std::stod((const std::string *)__p + 1, 0);
  unint64_t v9 = -1;
  if (v8 <= 180.0 && v7 >= -85.0511288 && v7 <= 85.0511288 && v8 >= -180.0)
  {
    double v10 = fmax(v7, -85.0511288);
    double v11 = v10 * 3.14159265 / 180.0;
    BOOL v4 = v10 < 85.0511288;
    double v12 = 1.48442223;
    if (v4) {
      double v12 = v11;
    }
    long double v13 = sin(v12);
    LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v14 >= 0xFFFFFFFE) {
      uint64_t v14 = 4294967294;
    }
    else {
      uint64_t v14 = v14;
    }
    unint64_t v9 = ((v8 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v14 << 32);
  }
  double v15 = std::stod((const std::string *)__p + 2, 0);
  double v16 = std::stod((const std::string *)__p + 3, 0);
  unint64_t v17 = -1;
  if (v16 <= 180.0 && v15 >= -85.0511288 && v15 <= 85.0511288 && v16 >= -180.0)
  {
    double v18 = fmax(v15, -85.0511288);
    double v19 = v18 * 3.14159265 / 180.0;
    BOOL v4 = v18 < 85.0511288;
    double v20 = 1.48442223;
    if (v4) {
      double v20 = v19;
    }
    long double v21 = sin(v20);
    LODWORD(v22) = ((log((v21 + 1.0) / (1.0 - v21)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v22 >= 0xFFFFFFFE) {
      uint64_t v22 = 4294967294;
    }
    else {
      uint64_t v22 = v22;
    }
    unint64_t v17 = ((v16 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v22 << 32);
  }
  if (v9 >= 0xFFFFFFFF00000000 && v9 == -1 || v17 >= 0xFFFFFFFF00000000 && v17 == -1)
  {
    uint64_t v30 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v40, "Parsed invalid coordinates for BoundingBox.");
    long long v31 = (void *)sub_2F404((uint64_t)v30, &v40);
  }
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v23 = HIDWORD(v9);
  unint64_t v24 = HIDWORD(v17);
  if (v17 >= v9) {
    int v25 = v9;
  }
  else {
    int v25 = v17;
  }
  if (HIDWORD(v9) <= HIDWORD(v17)) {
    int v26 = HIDWORD(v17);
  }
  else {
    int v26 = HIDWORD(v9);
  }
  *(_DWORD *)a2 = v25;
  *(_DWORD *)(a2 + 4) = v26;
  if (v9 > v17) {
    LODWORD(v17) = v9;
  }
  if (v24 < HIDWORD(v9)) {
    LODWORD(v23) = v24;
  }
  *(_DWORD *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = v23;
  long long v27 = (void **)__p;
  if (__p)
  {
    uint64_t v28 = v43;
    double v29 = __p;
    if (v43 != __p)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      double v29 = __p;
    }
    double v43 = v27;
    operator delete(v29);
  }
}

void sub_34310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_1A668(&a29);
  _Unwind_Resume(a1);
}

void sub_343D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::string *a13, uint64_t a14, long long a15, long long a16, std::string::size_type a17, void *a18)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    double v20 = std::string::append((std::string *)&a13, " cannot be converted to double values.");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    a17 = v20->__r_.__value_.__r.__words[2];
    a16 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t v22 = (void *)sub_2F404((uint64_t)exception, &a16);
  }
  sub_1A668(&a18);
  _Unwind_Resume(a1);
}

void sub_34460(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  __cxa_end_catch();
  JUMPOUT(0x344B0);
}

BOOL sub_344C4(_DWORD *a1)
{
  if (*a1 == -1 && a1[1] == -1) {
    return 0;
  }
  if (a1[3] == -1) {
    return a1[4] != -1;
  }
  return 1;
}

BOOL sub_34508(_DWORD *a1)
{
  if (*a1 != -1) {
    return 0;
  }
  if (a1[1] != -1) {
    return 0;
  }
  if (a1[3] == -1) {
    return a1[4] == -1;
  }
  return 0;
}

uint64_t sub_34554(_DWORD *a1, _DWORD *a2)
{
  if (*a2 >= *a1)
  {
    BOOL v2 = *a2 <= a1[3];
    unsigned int v3 = a2[1];
    if (v3 >= a1[4]) {
      return v2 & (v3 <= a1[1]);
    }
  }
  else
  {
    BOOL v2 = 0;
    unsigned int v3 = a2[1];
    if (v3 >= a1[4]) {
      return v2 & (v3 <= a1[1]);
    }
  }
  return 0;
}

BOOL sub_345AC(unsigned int *a1, unsigned int *a2)
{
  if (*a2 >= *a1)
  {
    BOOL v2 = *a2 <= a1[3];
    unsigned int v3 = a2[1];
    unsigned int v4 = a1[4];
    if (v3 >= v4) {
      goto LABEL_5;
    }
    return 0;
  }
  BOOL v2 = 0;
  unsigned int v3 = a2[1];
  unsigned int v4 = a1[4];
  if (v3 < v4) {
    return 0;
  }
LABEL_5:
  unsigned int v5 = a1[1];
  if (v3 > v5) {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  unsigned int v6 = a2[3];
  if (v6 < *a1) {
    return 0;
  }
  BOOL v8 = v6 <= a1[3];
  unsigned int v9 = a2[4];
  if (v9 < v4) {
    BOOL v8 = 0;
  }
  return v9 <= v5 && v8;
}

BOOL sub_34658(_DWORD *a1, _DWORD *a2)
{
  if (*a1 > a2[3]) {
    return 0;
  }
  if (a1[3] < *a2) {
    return 0;
  }
  if (a1[1] >= a2[4]) {
    return a1[4] <= a2[1];
  }
  return 0;
}

void sub_346B4(unsigned int *a1, uint64_t a2, double a3)
{
  LODWORD(a3) = a1[4];
  long double v5 = exp(3.14159265 - (double)*(unint64_t *)&a3 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v6 = atan((v5 - 1.0 / v5) * 0.5) * 57.2957795;
  double v29 = *(double *)&v6;
  LODWORD(v6) = a1[1];
  long double v7 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
  double v8 = atan((v7 - 1.0 / v7) * 0.5) * 57.2957795;
  double v28 = v8;
  if (a2 < 0) {
    __int16 v9 = -50;
  }
  else {
    __int16 v9 = 50;
  }
  double v10 = (double)(a2 / 100
               + (int)(((5243 * (__int16)(v9 + a2 % 100)) >> 19)
                     + ((5243 * (__int16)(v9 + a2 % 100)) >> 31)))
      / 6372797.56
      * 180.0
      / 3.14159265;
  double v11 = v8 - v10;
  if (v8 - v10 < -85.0511288) {
    double v11 = -85.0511288;
  }
  if (v11 >= 85.0511288) {
    double v12 = 1.48442223;
  }
  else {
    double v12 = v11 * 3.14159265 / 180.0;
  }
  long double v13 = sin(v12);
  unsigned int v14 = ((0.5 - log((v13 + 1.0) / (1.0 - v13)) / 12.5663706) * 4294967300.0);
  if (v14 >= 0xFFFFFFFE) {
    unsigned int v14 = -2;
  }
  a1[1] = v14;
  double v15 = v10 + v29;
  if (v10 + v29 > 85.0511288) {
    double v15 = 85.0511288;
  }
  double v16 = fmax(v15, -85.0511288);
  if (v16 >= 85.0511288) {
    double v17 = 1.48442223;
  }
  else {
    double v17 = v16 * 3.14159265 / 180.0;
  }
  long double v18 = sin(v17);
  unsigned int v19 = ((0.5 - log((v18 + 1.0) / (1.0 - v18)) / 12.5663706) * 4294967300.0);
  if (v19 >= 0xFFFFFFFE) {
    unsigned int v19 = -2;
  }
  a1[4] = v19;
  if (fabs(v29) <= fabs(v28)) {
    double v20 = v28;
  }
  else {
    double v20 = v29;
  }
  long double v21 = cos(v20 / 180.0 * 3.14159265);
  HIDWORD(v22) = 1065555935;
  double v23 = (double)a2 / 100.0 / (0.00932288077 / (1.0 / v21));
  LODWORD(v22) = *a1;
  double v24 = (double)v22;
  unsigned int v25 = (v24 - v23);
  if (v23 > v24) {
    unsigned int v25 = 0;
  }
  *a1 = v25;
  LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a1[3];
  double v26 = (double)*(unint64_t *)&v24;
  unsigned int v27 = (v23 + v26);
  if (4294967300.0 - v23 < v26) {
    unsigned int v27 = -1;
  }
  a1[3] = v27;
}

void sub_34978(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>, long double a4@<D0>)
{
  unsigned int v7 = *a2;
  unsigned int v8 = *a1;
  if (*a2 >= *a1)
  {
    unsigned int v11 = a1[4];
    BOOL v9 = v7 <= a1[3];
    unsigned int v10 = a2[1];
    if (v10 < v11) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v9 = 0;
    unsigned int v10 = a2[1];
    unsigned int v11 = a1[4];
    if (v10 < v11) {
      goto LABEL_9;
    }
  }
  if (v10 > a1[1]) {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = a2[2];
    return;
  }
LABEL_9:
  uint64_t v151 = a3;
  if (v8 >= v7 || v7 >= a1[3])
  {
    if (v8 >= (v7 ^ 0x80000000) || (v7 ^ 0x80000000) >= a1[3])
    {
      int v19 = 1;
      uint64_t v18 = 0xFFFFFFFFLL;
      double v16 = INFINITY;
    }
    else
    {
      long double v20 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
      long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795;
      long double v22 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
      double v23 = 90.0 - v21 + 90.0 - atan((v22 - 1.0 / v22) * 0.5) * 57.2957795;
      unsigned int v24 = a1[1];
      long double v25 = exp(3.14159265 - (double)v24 * 6.28318531 / 4294967300.0);
      a4 = v21 + 90.0 + atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 + 90.0;
      if (a4 >= v23) {
        double v26 = v23;
      }
      else {
        double v26 = a4;
      }
      double v16 = v26 / 360.0 * 40041468.0;
      if (v16 < INFINITY)
      {
        if (v23 >= a4) {
          unsigned int v27 = v24;
        }
        else {
          unsigned int v27 = v11;
        }
        if (v27 >= 0xFFFFFFFE) {
          uint64_t v18 = 4294967294;
        }
        else {
          uint64_t v18 = v27;
        }
        int v19 = 1;
        int v155 = v7;
        goto LABEL_32;
      }
      int v19 = 1;
      uint64_t v18 = 0xFFFFFFFFLL;
      double v16 = INFINITY;
    }
    int v155 = -1;
LABEL_32:
    int v17 = 1;
    goto LABEL_33;
  }
  if (v10 < v11)
  {
    long double v13 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
    long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795;
    long double v15 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
    double v16 = (v14 - atan((v15 - 1.0 / v15) * 0.5) * 57.2957795) / 360.0 * 40041468.0;
    HIDWORD(a4) = 2146435072;
    int v17 = 0;
    if (v16 < INFINITY)
    {
      if (v11 >= 0xFFFFFFFE) {
        uint64_t v18 = 4294967294;
      }
      else {
        uint64_t v18 = v11;
      }
      int v19 = 1;
      int v155 = v7;
      goto LABEL_33;
    }
    int v19 = 1;
LABEL_65:
    uint64_t v18 = 0xFFFFFFFFLL;
    double v16 = INFINITY;
    int v155 = -1;
    goto LABEL_33;
  }
  unsigned int v38 = a1[1];
  long double v39 = exp(3.14159265 - (double)v38 * 6.28318531 / 4294967300.0);
  long double v40 = atan((v39 - 1.0 / v39) * 0.5) * 57.2957795;
  long double v41 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  double v16 = (v40 - atan((v41 - 1.0 / v41) * 0.5) * 57.2957795) / 360.0 * 40041468.0;
  HIDWORD(a4) = 2146435072;
  int v19 = 0;
  if (v16 >= INFINITY)
  {
    int v17 = 1;
    goto LABEL_65;
  }
  if (v38 >= 0xFFFFFFFE) {
    uint64_t v18 = 4294967294;
  }
  else {
    uint64_t v18 = v38;
  }
  int v17 = 1;
  int v155 = v7;
LABEL_33:
  uint64_t v28 = v8 - 0x40000000;
  uint64_t v162 = v28 | 0x7FFFFFFF00000000;
  int v163 = 0x7FFFFFFF;
  uint64_t v153 = v18;
  int v152 = v19;
  if (v8 >> 30)
  {
    if (v7 > v8 || v28 > v7) {
      goto LABEL_41;
    }
  }
  else if (v7 > v8 && v28 > v7)
  {
    goto LABEL_41;
  }
  if (v28 == v7 && v10 == 0x7FFFFFFF)
  {
LABEL_41:
    int v29 = v17;
    goto LABEL_42;
  }
  sub_35A38((unsigned int *)&v162, a2);
  double v36 = 90.0 - *(double *)&v35;
  LODWORD(v35) = a1[1];
  long double v37 = exp((double)v35 * -6.28318531 / 4294967300.0 + 3.14159265);
  a4 = atan((v37 + -1.0 / v37) * 0.5) * 57.2957795;
  if (v36 >= a4)
  {
    LODWORD(a4) = a1[4];
    long double v43 = exp((double)*(unint64_t *)&a4 * -6.28318531 / 4294967300.0 + 3.14159265);
    a4 = atan((v43 + -1.0 / v43) * 0.5) * 57.2957795;
    unsigned int v7 = *a2;
    if (v36 <= a4)
    {
      double v63 = fmax(v36, -85.0511288);
      double v64 = v63 * 3.14159265 / 180.0;
      BOOL v46 = v63 < 85.0511288;
      double v65 = 1.48442223;
      if (v46) {
        double v65 = v64;
      }
      long double v66 = sin(v65);
      double v67 = (log((v66 + 1.0) / (1.0 - v66)) / -12.5663706 + 0.5) * 4294967300.0;
      if (v67 >= 0xFFFFFFFE) {
        uint64_t v68 = 4294967294;
      }
      else {
        uint64_t v68 = v67;
      }
      unsigned int v69 = *a1;
      LODWORD(v67) = a2[1];
      long double v70 = exp(3.14159265 - (double)*(unint64_t *)&v67 * 6.28318531 / 4294967300.0);
      long double v71 = atan((v70 - 1.0 / v70) * 0.5) * 57.2957795 * 0.0174532925;
      long double v72 = exp(3.14159265 - (double)v68 * 6.28318531 / 4294967300.0);
      long double v73 = atan((v72 - 1.0 / v72) * 0.5) * 57.2957795 * 0.0174532925;
      v74.i64[0] = v7;
      v74.i64[1] = v69;
      float64x2_t v75 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v74), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v157 = vsubq_f64(v75, (float64x2_t)vdupq_laneq_s64((int64x2_t)v75, 1)).f64[0];
      long double v76 = sin((v71 - v73) * 0.5);
      long double v77 = v76 * v76;
      double v78 = cos(v71);
      long double v79 = v78 * cos(v73);
      long double v80 = sin(0.5 * v157);
      long double v81 = atan2(sqrt(v77 + v79 * (v80 * v80)), sqrt(1.0 - (v77 + v79 * (v80 * v80))));
      a4 = (v81 + v81) * 6372797.56;
      int v19 = 0;
      int v29 = 0;
      if (v16 > a4)
      {
        double v16 = a4;
        uint64_t v153 = v68;
        int v155 = v69;
      }
    }
    else
    {
      int v19 = 0;
      int v29 = v17;
    }
  }
  else
  {
    int v29 = 0;
    unsigned int v7 = *a2;
  }
LABEL_42:
  unsigned int v30 = a1[3];
  uint64_t v31 = v30 + 0x40000000;
  uint64_t v160 = v31 | 0x7FFFFFFF00000000;
  int v161 = 0x7FFFFFFF;
  if (v30 >> 30 != 3)
  {
    if (v30 > v7) {
      goto LABEL_80;
    }
    goto LABEL_46;
  }
  if (v30 > v7)
  {
LABEL_46:
    if (v7 > v31) {
      goto LABEL_80;
    }
  }
  if (v31 != v7 || a2[1] != 0x7FFFFFFF)
  {
    sub_35A38((unsigned int *)&v160, a2);
    double v33 = *(double *)&v32 + 90.0;
    LODWORD(v32) = a1[1];
    long double v34 = exp((double)v32 * -6.28318531 / 4294967300.0 + 3.14159265);
    a4 = atan((v34 + -1.0 / v34) * 0.5) * 57.2957795;
    if (v33 >= a4)
    {
      LODWORD(a4) = a1[4];
      long double v42 = exp((double)*(unint64_t *)&a4 * -6.28318531 / 4294967300.0 + 3.14159265);
      a4 = atan((v42 + -1.0 / v42) * 0.5) * 57.2957795;
      unsigned int v30 = a1[3];
      unsigned int v7 = *a2;
      if (v33 <= a4)
      {
        double v44 = fmax(v33, -85.0511288);
        double v45 = v44 * 3.14159265 / 180.0;
        BOOL v46 = v44 < 85.0511288;
        double v47 = 1.48442223;
        if (v46) {
          double v47 = v45;
        }
        long double v48 = sin(v47);
        double v49 = (log((v48 + 1.0) / (1.0 - v48)) / -12.5663706 + 0.5) * 4294967300.0;
        if (v49 >= 0xFFFFFFFE) {
          uint64_t v50 = 4294967294;
        }
        else {
          uint64_t v50 = v49;
        }
        LODWORD(v49) = a2[1];
        long double v51 = exp(3.14159265 - (double)*(unint64_t *)&v49 * 6.28318531 / 4294967300.0);
        long double v52 = atan((v51 - 1.0 / v51) * 0.5) * 57.2957795 * 0.0174532925;
        v53.i64[0] = v7;
        v53.i64[1] = v30;
        long double v54 = exp(3.14159265 - (double)v50 * 6.28318531 / 4294967300.0);
        long double v55 = atan((v54 - 1.0 / v54) * 0.5) * 57.2957795 * 0.0174532925;
        float64x2_t v56 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v53), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
        double v156 = vsubq_f64(v56, (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1)).f64[0];
        long double v57 = sin((v52 - v55) * 0.5);
        long double v58 = v57 * v57;
        double v59 = cos(v52);
        long double v60 = v59 * cos(v55);
        long double v61 = sin(0.5 * v156);
        long double v62 = atan2(sqrt(v58 + v60 * (v61 * v61)), sqrt(1.0 - (v58 + v60 * (v61 * v61))));
        a4 = (v62 + v62) * 6372797.56;
        int v152 = 0;
        int v17 = 0;
        if (v16 > a4)
        {
          double v16 = a4;
          uint64_t v153 = v50;
          int v155 = v30;
        }
      }
      else
      {
        int v152 = 0;
      }
    }
    else
    {
      int v17 = 0;
      unsigned int v30 = a1[3];
      unsigned int v7 = *a2;
    }
  }
LABEL_80:
  unsigned int v82 = *a1;
  unsigned int v83 = v82 + ((v30 - v82) >> 1);
  unsigned int v84 = v83 ^ 0x80000000;
  BOOL v86 = v83 <= v7 || v7 <= v84;
  BOOL v88 = v83 <= v7 && v7 <= v84;
  if (v83 < v84) {
    BOOL v89 = v88;
  }
  else {
    BOOL v89 = v86;
  }
  int v90 = !v89;
  int v91 = v29 & !v89;
  if ((v17 & v89) == 1)
  {
    LODWORD(a4) = a2[1];
    long double v92 = exp(3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0);
    long double v93 = atan((v92 - 1.0 / v92) * 0.5) * 57.2957795 * 0.0174532925;
    *(double *)&unint64_t v94 = ((double)v7 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    LODWORD(v94) = a1[4];
    long double v95 = exp(3.14159265 - (double)v94 * 6.28318531 / 4294967300.0);
    long double v96 = atan((v95 - 1.0 / v95) * 0.5) * 57.2957795 * 0.0174532925;
    long double v97 = sin((v93 - v96) * 0.5);
    long double v98 = v97 * v97;
    double v99 = cos(v93);
    long double v100 = v99 * cos(v96);
    long double v101 = sin((((double)v7 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925- ((double)v30 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925)* 0.5);
    long double v102 = atan2(sqrt(v101 * v101 * v100 + v98), sqrt(1.0 - (v101 * v101 * v100 + v98)));
    a4 = (v102 + v102) * 6372797.56;
    if (v16 > a4)
    {
      int v155 = a1[3];
      int v103 = a1[5];
      uint64_t v153 = a1[4];
      double v16 = a4;
      int v104 = v19 & v90;
      if (!v91) {
        goto LABEL_98;
      }
LABEL_101:
      unsigned int v108 = a1[4];
      if (v108 >= 0xFFFFFFFE) {
        uint64_t v109 = 4294967294;
      }
      else {
        uint64_t v109 = v108;
      }
      LODWORD(a4) = a2[1];
      double v158 = v16;
      long double v110 = exp(3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0);
      long double v111 = atan((v110 - 1.0 / v110) * 0.5) * 57.2957795 * 0.0174532925;
      v112.i64[0] = v7;
      v112.i64[1] = v82;
      long double v113 = exp(3.14159265 - (double)v109 * 6.28318531 / 4294967300.0);
      long double v114 = atan((v113 - 1.0 / v113) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v115 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v112), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v150 = vsubq_f64(v115, (float64x2_t)vdupq_laneq_s64((int64x2_t)v115, 1)).f64[0];
      long double v116 = sin((v111 - v114) * 0.5);
      long double v117 = v116 * v116;
      double v118 = cos(v111);
      long double v119 = v118 * cos(v114);
      long double v120 = sin(0.5 * v150);
      double v121 = v120 * v120 * v119 + v117;
      double v16 = v158;
      long double v122 = atan2(sqrt(v121), sqrt(1.0 - v121));
      a4 = (v122 + v122) * 6372797.56;
      uint64_t v105 = v153;
      if (v158 > a4)
      {
        int v103 = 0x7FFFFFFF;
        double v16 = a4;
        uint64_t v105 = v109;
        int v155 = v82;
      }
      int v106 = v152 & v89;
      if (!v104) {
        goto LABEL_99;
      }
LABEL_107:
      LODWORD(a4) = a2[1];
      double v159 = v16;
      long double v123 = exp(3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0);
      long double v124 = atan((v123 - 1.0 / v123) * 0.5) * 57.2957795 * 0.0174532925;
      v125.i64[0] = v7;
      v125.i64[1] = v82;
      float64x2_t v126 = vcvtq_f64_u64(v125);
      float64x2_t v154 = v126;
      LODWORD(v126.f64[0]) = a1[1];
      long double v127 = exp(3.14159265 - (double)*(unint64_t *)&v126.f64[0] * 6.28318531 / 4294967300.0);
      long double v128 = atan((v127 - 1.0 / v127) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v129 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v154, (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      v154.f64[0] = vsubq_f64(v129, (float64x2_t)vdupq_laneq_s64((int64x2_t)v129, 1)).f64[0];
      long double v130 = sin((v124 - v128) * 0.5);
      long double v131 = v130 * v130;
      double v132 = cos(v124);
      long double v133 = v132 * cos(v128);
      long double v134 = sin(0.5 * v154.f64[0]);
      double v135 = v134 * v134 * v133 + v131;
      double v16 = v159;
      long double v136 = atan2(sqrt(v135), sqrt(1.0 - v135));
      a4 = (v136 + v136) * 6372797.56;
      unsigned int v107 = v155;
      if (v159 > a4)
      {
        unsigned int v107 = *a1;
        uint64_t v105 = a1[1];
        double v16 = a4;
        int v103 = a1[2];
      }
      goto LABEL_109;
    }
  }
  int v103 = 0x7FFFFFFF;
  int v104 = v19 & v90;
  if (v91) {
    goto LABEL_101;
  }
LABEL_98:
  uint64_t v105 = v153;
  int v106 = v152 & v89;
  if (v104) {
    goto LABEL_107;
  }
LABEL_99:
  unsigned int v107 = v155;
LABEL_109:
  if (v106)
  {
    unsigned int v137 = a1[1];
    if (v137 >= 0xFFFFFFFE) {
      uint64_t v138 = 4294967294;
    }
    else {
      uint64_t v138 = v137;
    }
    LODWORD(a4) = a2[1];
    long double v139 = exp(3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0);
    long double v140 = atan((v139 - 1.0 / v139) * 0.5) * 57.2957795 * 0.0174532925;
    long double v141 = exp(3.14159265 - (double)v138 * 6.28318531 / 4294967300.0);
    long double v142 = atan((v141 - 1.0 / v141) * 0.5) * 57.2957795 * 0.0174532925;
    long double v143 = sin((v140 - v142) * 0.5);
    long double v144 = v143 * v143;
    double v145 = cos(v140);
    long double v146 = v145 * cos(v142);
    long double v147 = sin((((double)v7 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925- ((double)v30 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925)* 0.5);
    long double v148 = atan2(sqrt(v147 * v147 * v146 + v144), sqrt(1.0 - (v147 * v147 * v146 + v144)));
    double v149 = (v148 + v148) * 6372797.56;
    if (v16 > v149)
    {
      int v103 = 0x7FFFFFFF;
      double v16 = v149;
      uint64_t v105 = v138;
      unsigned int v107 = v30;
    }
  }
  *(double *)uint64_t v151 = v16;
  *(void *)(v151 + 8) = v107 | (unint64_t)(v105 << 32);
  *(_DWORD *)(v151 + 16) = v103;
}

void sub_35A38(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = a1[1];
  unsigned int v3 = a2[1];
  if (*a1 != *a2 || v2 != v3)
  {
    long double v14 = ((double)*a2 - (double)*a1) * 0.00000000146291808;
    long double v5 = exp(3.14159265 - (double)v2 * 6.28318531 / 4294967300.0);
    double v6 = atan((v5 - 1.0 / v5) * 0.5) * 57.2957795 * 3.14159265 / 180.0;
    long double v7 = exp(3.14159265 - (double)v3 * 6.28318531 / 4294967300.0);
    double v8 = atan((v7 - 1.0 / v7) * 0.5) * 57.2957795 * 3.14159265 / 180.0;
    double v9 = sin(v14);
    __double2 v10 = __sincos_stret(v8);
    __double2 v11 = __sincos_stret(v6);
    long double v12 = tan(v14);
    for (double i = atan2(v9 * v10.__cosval, v11.__cosval * v10.__sinval - v9 * (v11.__sinval * v10.__cosval) / v12)
            * 180.0
            / 3.14159265; i >= 180.0; double i = i + -360.0)
      ;
    for (; i < -180.0; double i = i + 360.0)
      ;
  }
}

double sub_35C04(unsigned int *a1, unsigned int *a2, int a3, long double a4)
{
  if (a3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    LODWORD(v6) = a1[3];
    LODWORD(v7) = a1[4];
    if (v6 >= v4) {
      LODWORD(v6) = *a2;
    }
    if (v4 >= *a1) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = *a1;
    }
    if (a1[1] >= v5) {
      unsigned int v8 = a2[1];
    }
    else {
      unsigned int v8 = a1[1];
    }
    if (v5 >= v7) {
      LODWORD(v7) = v8;
    }
    if (v7 >= 0xFFFFFFFE) {
      uint64_t v7 = 4294967294;
    }
    else {
      uint64_t v7 = v7;
    }
    return sqrt((double)(unint64_t)((v4 - v6) * (v4 - v6) + (v5 - v7) * (v5 - v7))) / 100.0;
  }
  else
  {
    sub_34978(a1, a2, (uint64_t)v10, a4);
    return v10[0];
  }
}

long double sub_35C98(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 16);
  long double v3 = exp(3.14159265 - (double)*(unint64_t *)&a2 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v4 = atan((v3 - 1.0 / v3) * 0.5);
  double v5 = *(double *)&v4 * 57.2957795;
  LODWORD(v4) = *(_DWORD *)(a1 + 4);
  long double v6 = exp(3.14159265 - (double)v4 * 6.28318531 / 4294967300.0);
  return (v5 - atan((v6 - 1.0 / v6) * 0.5) * 57.2957795) / 360.0 * 40041468.0;
}

uint64_t sub_35D7C(_DWORD *a1, double a2)
{
  LODWORD(a2) = a1[1];
  long double v3 = exp(3.14159265 - (double)*(unint64_t *)&a2 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v4 = atan((v3 - 1.0 / v3) * 0.5);
  double v5 = *(double *)&v4;
  LODWORD(v4) = a1[4];
  long double v6 = exp(3.14159265 - (double)v4 * 6.28318531 / 4294967300.0);
  double v7 = atan((v6 - 1.0 / v6) * 0.5);
  LODWORD(v8) = *a1;
  LODWORD(v9) = a1[3];
  double v10 = ((double)v8 * 360.0 / 4294967300.0 + -180.0 + (double)v9 * 360.0 / 4294967300.0 + -180.0) * 0.5;
  uint64_t result = -1;
  if (v10 <= 180.0)
  {
    double v12 = (v5 * 57.2957795 + v7 * 57.2957795) * 0.5;
    if (v12 >= -85.0511288 && v12 <= 85.0511288 && v10 >= -180.0)
    {
      double v13 = fmax(v12, -85.0511288);
      double v14 = v13 * 3.14159265 / 180.0;
      BOOL v15 = v13 < 85.0511288;
      double v16 = 1.48442223;
      if (v15) {
        double v16 = v14;
      }
      long double v17 = sin(v16);
      LODWORD(v18) = ((log((v17 + 1.0) / (1.0 - v17)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v18 >= 0xFFFFFFFE) {
        uint64_t v18 = 4294967294;
      }
      else {
        uint64_t v18 = v18;
      }
      return ((v10 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v18 << 32);
    }
  }
  return result;
}

char *sub_35F78@<X0>(uint64_t *a1@<X0>, char ***a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (char **)operator new(0x18uLL);
  a2[1] = v4 + 3;
  a2[2] = v4 + 3;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  *a2 = v4;
  sub_30C0C(v4, a1);
  LODWORD(v5) = *((_DWORD *)a1 + 1);
  if (v5 >= 0xFFFFFFFE) {
    uint64_t v5 = 4294967294;
  }
  else {
    uint64_t v5 = v5;
  }
  unint64_t v8 = *((unsigned int *)a1 + 3) | (unint64_t)(v5 << 32);
  int v9 = 0x7FFFFFFF;
  sub_30C0C(v4, (uint64_t *)&v8);
  sub_30C0C(v4, (uint64_t *)((char *)a1 + 12));
  LODWORD(v6) = *((_DWORD *)a1 + 4);
  if (v6 >= 0xFFFFFFFE) {
    uint64_t v6 = 4294967294;
  }
  else {
    uint64_t v6 = v6;
  }
  unint64_t v8 = *(unsigned int *)a1 | (unint64_t)(v6 << 32);
  int v9 = 0x7FFFFFFF;
  sub_30C0C(v4, (uint64_t *)&v8);
  return sub_30C0C(v4, a1);
}

void sub_36058(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void sub_3606C(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void sub_36080(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void **sub_36094(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    long double v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        double v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        long double v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_3610C(_DWORD *a1@<X0>, std::string *a2@<X8>, unint64_t a3@<D0>)
{
  LODWORD(a3) = a1[1];
  long double v5 = exp((double)a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v6 = atan((v5 + -1.0 / v5) * 0.5);
  std::to_string(&v29, v6 * 57.2957795);
  double v7 = std::string::append(&v29, ",");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v8) = *a1;
  std::to_string(&v28, (double)(unint64_t)v8 * 360.0 / 4294967300.0 + -180.0);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = &v28;
  }
  else {
    int v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
  }
  __double2 v11 = std::string::append(&v30, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  double v13 = std::string::append(&v31, ",");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v14) = a1[4];
  long double v15 = exp((double)(unint64_t)v14 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v16 = atan((v15 + -1.0 / v15) * 0.5);
  std::to_string(&v27, v16 * 57.2957795);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long double v17 = &v27;
  }
  else {
    long double v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v27.__r_.__value_.__l.__size_;
  }
  int v19 = std::string::append(&v32, (const std::string::value_type *)v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  long double v21 = std::string::append(&v33, ",");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v22) = a1[3];
  std::to_string(&__p, (double)(unint64_t)v22 * 360.0 / 4294967300.0 + -180.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
  }
  long double v25 = std::string::append(&v34, (const std::string::value_type *)p_p, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v33.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_37:
    operator delete(v29.__r_.__value_.__l.__data_);
    return;
  }
LABEL_36:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
}

void sub_36478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v52 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v52 - 105) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v52 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v52 - 96));
  if ((*(char *)(v52 - 105) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v52 - 128));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a15);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a40);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a21);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0) {
LABEL_10:
  }
    _Unwind_Resume(exception_object);
LABEL_19:
  operator delete(a27);
  _Unwind_Resume(exception_object);
}

void sub_365DC(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  int v4 = *a1;
  int v5 = a1[1];
  BOOL v6 = *a1 == -1 && v5 == -1;
  if (v6 || (uint64_t v7 = *a2, v7 == 0x7FFFFFFFFFFFFFFFLL))
  {
    *(_OWORD *)a3 = xmmword_20B8E30;
    *(void *)(a3 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)a3 = v4;
    *(_DWORD *)(a3 + 4) = v5;
    *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 20) = 0x7FFFFFFF;
    sub_346B4((unsigned int *)a3, v7, a4);
  }
}

BOOL sub_36630(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t *sub_36644(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v4 = *a1;
  int v5 = (char *)a1 + *(void *)(*a1 - 24);
  int v6 = *((_DWORD *)v5 + 2);
  *((void *)v5 + 2) = 6;
  *(_DWORD *)((char *)a1 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 4;
  LODWORD(a3) = *(_DWORD *)(a2 + 4);
  long double v7 = exp((double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265);
  atan((v7 + -1.0 / v7) * 0.5);
  long long v8 = (void *)std::ostream::operator<<();
  sub_188FC78(v8, (uint64_t)",", 1);
  std::ostream::operator<<();
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v6;
  return a1;
}

void sub_367A8(uint64_t *a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  unsigned int v5 = a2;
  long long v221 = 0uLL;
  unint64_t v222 = 0;
  char v7 = 2 * a2;
  uint64_t v8 = a1[1] - *a1;
  uint64_t v200 = a4;
  if (v8)
  {
    int v209 = 2 << a2;
    unint64_t v205 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    char v9 = 32 - a2;
    unsigned int v10 = ~(-1 << a2);
    uint64_t v11 = 0;
    char v201 = 2 * a2;
    int v207 = 1 << v7;
    while (1)
    {
      uint64_t v212 = v11;
      if (v11)
      {
        int v12 = 0;
        while (1)
        {
          uint64_t v13 = *a1 + 12 * v212;
          uint64_t v14 = *(void *)v13;
          int v232 = *(_DWORD *)(v13 + 8);
          uint64_t v231 = v14;
          if (a2)
          {
            if (v10 >= v231 >> v9) {
              unsigned int v15 = v231 >> v9;
            }
            else {
              unsigned int v15 = v10;
            }
            if (v10 >= HIDWORD(v231) >> v9) {
              unsigned int v16 = HIDWORD(v231) >> v9;
            }
            else {
              unsigned int v16 = v10;
            }
            sub_518C8(v15, v16);
            int v18 = v17 | v207;
          }
          else
          {
            int v18 = 1;
          }
          uint64_t v19 = *((void *)&v221 + 1);
          long long v20 = (_DWORD *)(*((void *)&v221 + 1) - 32);
          sub_383CC((unsigned int *)(*((void *)&v221 + 1) - 32), (uint64_t)&v228);
          long double v21 = (char **)(v19 - 24);
          if (*v20 == v18 || sub_34554(&v228, &v231))
          {
            double v23 = *(char **)(v19 - 16);
            unint64_t v22 = *(void *)(v19 - 8);
            if ((unint64_t)v23 >= v22)
            {
              double v26 = *v21;
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *v21) >> 2);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0x1555555555555555) {
                goto LABEL_295;
              }
              unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v26) >> 2);
              if (2 * v29 > v28) {
                unint64_t v28 = 2 * v29;
              }
              if (v29 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v30 = 0x1555555555555555;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30)
              {
                if (v30 > 0x1555555555555555) {
                  goto LABEL_296;
                }
                std::string v31 = (char *)operator new(12 * v30);
              }
              else
              {
                std::string v31 = 0;
              }
              long double v42 = &v31[12 * v27];
              *(void *)long double v42 = v231;
              *((_DWORD *)v42 + 2) = v232;
              long double v43 = v42;
              if (v23 != v26)
              {
                do
                {
                  uint64_t v44 = *(void *)(v23 - 12);
                  v23 -= 12;
                  int v45 = *((_DWORD *)v23 + 2);
                  *(void *)(v43 - 12) = v44;
                  v43 -= 12;
                  *((_DWORD *)v43 + 2) = v45;
                }
                while (v23 != v26);
                double v23 = *v21;
              }
              BOOL v46 = &v31[12 * v30];
              long double v25 = v42 + 12;
              *(void *)(v19 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v43;
              *(void *)(v19 - 16) = v42 + 12;
              *(void *)(v19 - 8) = v46;
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              uint64_t v24 = v231;
              *((_DWORD *)v23 + 2) = v232;
              *(void *)double v23 = v24;
              long double v25 = v23 + 12;
            }
            BOOL v47 = 0;
            *(void *)(v19 - 16) = v25;
            goto LABEL_47;
          }
          uint64_t v32 = *(void *)(v19 - 16);
          uint64_t v33 = *(unsigned int *)(v32 - 12);
          uint64_t v34 = *(unsigned int *)(v32 - 8);
          unsigned int v35 = *(_DWORD *)(v32 - 4);
          uint64_t v36 = v231;
          uint64_t v37 = HIDWORD(v231);
          if (v231 == v33 && HIDWORD(v231) == v34 && v232 == v35)
          {
            BOOL v47 = 0;
            goto LABEL_47;
          }
          v227[0] = -1;
          LODWORD(v227[1]) = 0x7FFFFFFF;
          if (v231 > v229 || v231 < v228)
          {
            if (v33 >= v231) {
              uint64_t v48 = v228;
            }
            else {
              uint64_t v48 = v229;
            }
            double v41 = (double)(v48 - v33) / (double)(v231 - v33);
            unsigned int v40 = (v41 * (double)(HIDWORD(v231) - v34) + (double)v34);
            v227[0] = __PAIR64__(v40, v48);
            if (v48 != -1)
            {
LABEL_56:
              if (sub_34554(&v228, v227)) {
                goto LABEL_60;
              }
              goto LABEL_57;
            }
          }
          else
          {
            unsigned int v40 = -1;
            double v41 = 100.0;
          }
          if (v40 != -1) {
            goto LABEL_56;
          }
LABEL_57:
          double v49 = (char *)&v228 + 4;
          if (v34 >= v37) {
            double v49 = v230;
          }
          uint64_t v50 = *(unsigned int *)v49;
          double v41 = (double)(v50 - v34) / (double)(v37 - v34);
          LODWORD(v227[0]) = (v41 * (double)(v36 - v33) + (double)v33);
          HIDWORD(v227[0]) = v50;
LABEL_60:
          if (v35 != 0x7FFFFFFF && v232 != 0x7FFFFFFF)
          {
            double v51 = v41 * (double)(int)(v232 - v35);
            if (v51 >= 0.0)
            {
              if (v51 < 4.50359963e15)
              {
                uint64_t v52 = (uint64_t)(v51 + v51) + 1;
                goto LABEL_69;
              }
            }
            else if (v51 > -4.50359963e15)
            {
              uint64_t v52 = (uint64_t)(v51 + v51);
              if (v52 >= 1) {
                --v52;
              }
LABEL_69:
              double v51 = (double)(v52 >> 1);
            }
            LODWORD(v227[1]) = v35 + (int)v51;
          }
          long double v54 = *(char **)(v19 - 24);
          uint64x2_t v53 = *(char **)(v19 - 16);
          int64_t v55 = v53 - v54;
          if (v53 - v54 == 12
            || LODWORD(v227[0]) != v33
            || *(void *)((char *)v227 + 4) != __PAIR64__(v35, v34))
          {
            unint64_t v56 = *(void *)(v19 - 8);
            if ((unint64_t)v53 >= v56)
            {
              uint64_t v59 = v55 / 12;
              unint64_t v60 = v55 / 12 + 1;
              if (v60 > 0x1555555555555555) {
LABEL_295:
              }
                sub_2E00();
              unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v54) >> 2);
              if (2 * v61 > v60) {
                unint64_t v60 = 2 * v61;
              }
              if (v61 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v62 = 0x1555555555555555;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                if (v62 > 0x1555555555555555) {
LABEL_296:
                }
                  sub_188D718();
                double v63 = (char *)operator new(12 * v62);
              }
              else
              {
                double v63 = 0;
              }
              double v64 = &v63[12 * v59];
              *(void *)double v64 = v227[0];
              *((_DWORD *)v64 + 2) = v227[1];
              double v65 = v64;
              if (v53 != v54)
              {
                do
                {
                  uint64_t v66 = *(void *)(v53 - 12);
                  v53 -= 12;
                  int v67 = *((_DWORD *)v53 + 2);
                  *(void *)(v65 - 12) = v66;
                  v65 -= 12;
                  *((_DWORD *)v65 + 2) = v67;
                }
                while (v53 != v54);
                uint64x2_t v53 = *v21;
              }
              uint64_t v68 = &v63[12 * v62];
              long double v58 = v64 + 12;
              *(void *)(v19 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v65;
              *(void *)(v19 - 16) = v64 + 12;
              *(void *)(v19 - 8) = v68;
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              uint64_t v57 = v227[0];
              *((_DWORD *)v53 + 2) = v227[1];
              *(void *)uint64x2_t v53 = v57;
              long double v58 = v53 + 12;
            }
            *(void *)(v19 - 16) = v58;
          }
          unsigned int v69 = (char *)operator new(0xCuLL);
          uint64_t v225 = v69 + 12;
          uint64_t v226 = v69 + 12;
          *(void *)unsigned int v69 = v227[0];
          *((_DWORD *)v69 + 2) = v227[1];
          uint64_t v224 = v69;
          if (!a2)
          {
            int v73 = 1;
            int v223 = 1;
            uint64_t v77 = *((void *)&v221 + 1);
            if (*((void *)&v221 + 1) >= v222) {
              goto LABEL_113;
            }
            goto LABEL_118;
          }
          if (v10 >= LODWORD(v227[0]) >> v9) {
            unsigned int v70 = LODWORD(v227[0]) >> v9;
          }
          else {
            unsigned int v70 = v10;
          }
          if (v10 >= HIDWORD(v227[0]) >> v9) {
            unsigned int v71 = HIDWORD(v227[0]) >> v9;
          }
          else {
            unsigned int v71 = v10;
          }
          sub_518C8(v70, v71);
          int v73 = v72 | v207;
          int v234 = v72 | v207;
          if (v10 >= v231 >> v9) {
            unsigned int v74 = v231 >> v9;
          }
          else {
            unsigned int v74 = v10;
          }
          if (v10 >= HIDWORD(v231) >> v9) {
            unsigned int v75 = HIDWORD(v231) >> v9;
          }
          else {
            unsigned int v75 = v10;
          }
          sub_518C8(v74, v75);
          int v233 = v76 | v207;
          if (v73 == (v76 | v207)) {
            goto LABEL_117;
          }
          sub_383CC((unsigned int *)&v234, (uint64_t)&__p);
          if (__p < LODWORD(v227[0])
            && LODWORD(v227[0]) < HIDWORD(v217)
            && v218 < HIDWORD(v227[0])
            && HIDWORD(v227[0]) < HIDWORD(__p))
          {
            int v73 = v234;
            int v223 = v234;
            uint64_t v77 = *((void *)&v221 + 1);
            if (*((void *)&v221 + 1) >= v222) {
              goto LABEL_113;
            }
            goto LABEL_118;
          }
          sub_383CC((unsigned int *)&v233, (uint64_t)v235);
          if (sub_34554(v235, v227))
          {
            int v73 = v233;
LABEL_117:
            int v223 = v73;
            uint64_t v77 = *((void *)&v221 + 1);
            if (*((void *)&v221 + 1) >= v222) {
              goto LABEL_113;
            }
            goto LABEL_118;
          }
          if (LODWORD(v227[0]) == HIDWORD(v217) && LODWORD(v227[0]) < v231)
          {
            int v83 = 1;
            unsigned int v84 = HIDWORD(v227[0]);
            unsigned int v85 = HIDWORD(v231);
            if (HIDWORD(v227[0]) != v218) {
              goto LABEL_140;
            }
          }
          else
          {
            if (LODWORD(v227[0]) <= v231) {
              int v86 = 0;
            }
            else {
              int v86 = -1;
            }
            if (LODWORD(v227[0]) == __p) {
              int v83 = v86;
            }
            else {
              int v83 = 0;
            }
            unsigned int v84 = HIDWORD(v227[0]);
            unsigned int v85 = HIDWORD(v231);
            if (HIDWORD(v227[0]) != v218)
            {
LABEL_140:
              BOOL v88 = v84 < v85;
              int v87 = v84 == HIDWORD(__p) && v88;
              goto LABEL_143;
            }
          }
          if (v84 <= v85) {
            goto LABEL_140;
          }
          int v87 = -1;
LABEL_143:
          unsigned int v89 = sub_511FC(v234);
          unsigned int v90 = v234 & ~(-1 << (v89 & 0xFE));
          int v91 = sub_51938(v90);
          int v92 = sub_51938(v90 >> 1);
          int v93 = 1 << (v89 >> 1);
          unsigned int v94 = (int)(((((((v91 + v83) & ~((v91 + v83) >> 31)) - (v91 + v83) + ((v91 + v83) >> 31)) >> (v89 >> 1))
                      + ((v91 + v83) >> 31)) << (v89 >> 1))
                    + v91
                    + v83)
              % v93;
          unsigned int v95 = (int)(((((((v92 + v87) & ~((v92 + v87) >> 31)) - (v92 + v87) + ((v92 + v87) >> 31)) >> (v89 >> 1))
                      + ((v92 + v87) >> 31)) << (v89 >> 1))
                    + v92
                    + v87)
              % v93;
          int v96 = -1 << (v89 >> 1);
          if (~v96 < v94) {
            unsigned int v97 = ~v96;
          }
          else {
            unsigned int v97 = v94;
          }
          if (~v96 < v95) {
            unsigned int v98 = ~v96;
          }
          else {
            unsigned int v98 = v95;
          }
          sub_518C8(v97, v98);
          int v73 = v99 | (1 << (v89 & 0xFE));
          int v223 = v73;
          uint64_t v77 = *((void *)&v221 + 1);
          if (*((void *)&v221 + 1) >= v222)
          {
LABEL_113:
            *((void *)&v221 + 1) = sub_38870((void **)&v221, &v223, (uint64_t)&v224);
            if (LODWORD(v227[0]) == v231) {
              goto LABEL_122;
            }
            goto LABEL_125;
          }
LABEL_118:
          *(void *)(v77 + 8) = 0;
          *(_DWORD *)uint64_t v77 = v73;
          *(void *)(v77 + 16) = 0;
          *(void *)(v77 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          double v78 = v224;
          int64_t v79 = v225 - v224;
          if (v225 != v224)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v79 >> 2) > 0x1555555555555555) {
              sub_2E00();
            }
            long double v80 = (char *)operator new(v225 - v224);
            *(void *)(v77 + 8) = v80;
            *(void *)(v77 + 16) = v80;
            long double v81 = &v80[4 * (v79 >> 2)];
            *(void *)(v77 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
            memcpy(v80, v78, v79);
            *(void *)(v77 + 16) = v81;
          }
          *((void *)&v221 + 1) = v77 + 32;
          if (LODWORD(v227[0]) == v231)
          {
LABEL_122:
            if (HIDWORD(v227[0]) == HIDWORD(v231))
            {
              BOOL v47 = LODWORD(v227[1]) != v232;
              unsigned int v82 = v224;
              if (!v224) {
                goto LABEL_47;
              }
LABEL_126:
              uint64_t v225 = v82;
              operator delete(v82);
              goto LABEL_47;
            }
          }
LABEL_125:
          BOOL v47 = 1;
          unsigned int v82 = v224;
          if (v224) {
            goto LABEL_126;
          }
LABEL_47:
          if (v12 == v209) {
            goto LABEL_294;
          }
          ++v12;
          if (!v47) {
            goto LABEL_5;
          }
        }
      }
      uint64_t v100 = *(void *)*a1;
      int v232 = *(_DWORD *)(*a1 + 8);
      uint64_t v231 = v100;
      long double v101 = operator new(0xCuLL);
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v101 + 3);
      unint64_t v218 = (unint64_t)(v101 + 3);
      *(void *)long double v101 = v231;
      v101[2] = v232;
      std::string __p = v101;
      if (a2)
      {
        if (v10 >= v231 >> v9) {
          unsigned int v102 = v231 >> v9;
        }
        else {
          unsigned int v102 = v10;
        }
        if (v10 >= HIDWORD(v231) >> v9) {
          unsigned int v103 = HIDWORD(v231) >> v9;
        }
        else {
          unsigned int v103 = v10;
        }
        sub_518C8(v102, v103);
        int v105 = v104 | v207;
        *(_DWORD *)uint64_t v235 = v104 | v207;
        uint64_t v106 = *((void *)&v221 + 1);
        if (*((void *)&v221 + 1) >= v222)
        {
LABEL_165:
          long double v111 = sub_385C4((void **)&v221, v235, (uint64_t)&__p);
          unsigned int v107 = __p;
          *((void *)&v221 + 1) = v111;
          if (!__p) {
            goto LABEL_4;
          }
          goto LABEL_3;
        }
      }
      else
      {
        int v105 = 1;
        *(_DWORD *)uint64_t v235 = 1;
        uint64_t v106 = *((void *)&v221 + 1);
        if (*((void *)&v221 + 1) >= v222) {
          goto LABEL_165;
        }
      }
      *(void *)(v106 + 8) = 0;
      *(_DWORD *)uint64_t v106 = v105;
      *(void *)(v106 + 16) = 0;
      *(void *)(v106 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      unsigned int v107 = __p;
      int64_t v108 = (char *)v217 - (unsigned char *)__p;
      if (v217 != __p)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v108 >> 2) > 0x1555555555555555) {
          sub_2E00();
        }
        uint64_t v109 = (char *)operator new((char *)v217 - (unsigned char *)__p);
        *(void *)(v106 + 8) = v109;
        *(void *)(v106 + 16) = v109;
        long double v110 = &v109[4 * (v108 >> 2)];
        *(void *)(v106 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v110;
        memcpy(v109, v107, v108);
        *(void *)(v106 + 16) = v110;
      }
      *((void *)&v221 + 1) = v106 + 32;
      if (!v107) {
        goto LABEL_4;
      }
LABEL_3:
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))v107;
      operator delete(v107);
LABEL_4:
      if (a2 >= 0x1F)
      {
LABEL_294:
        uint64_t v196 = (void *)std::ostream::operator<<();
        sub_188FC78(v196, (uint64_t)", ", 2);
        uint64_t v197 = (void *)std::ostream::operator<<();
        sub_188FC78(v197, (uint64_t)",", 1);
        uint64_t v198 = (void *)std::ostream::operator<<();
        sub_188FC78(v198, (uint64_t)",", 1);
        uint64_t v199 = (void *)std::ostream::operator<<();
        sub_188FC78(v199, (uint64_t)"\n", 1);
        abort();
      }
LABEL_5:
      uint64_t v11 = v212 + 1;
      if (v212 + 1 == v205)
      {
        uint64_t v8 = *((void *)&v221 + 1);
        a4 = v200;
        char v4 = a3;
        char v7 = v201;
        unsigned int v5 = a2;
        break;
      }
    }
  }
  uint64x2_t v112 = *(void **)(v8 - 24);
  if (*(void *)(v8 - 16) - (void)v112 == 12)
  {
    uint64_t v113 = v8 - 32;
    if (v112)
    {
      *(void *)(v8 - 16) = v112;
      operator delete(v112);
    }
    *((void *)&v221 + 1) = v113;
    if (v5)
    {
LABEL_172:
      uint64_t v114 = a1[1];
      unsigned int v115 = *(_DWORD *)(v114 - 12) >> -(char)v5;
      unsigned int v116 = *(_DWORD *)(v114 - 8) >> -(char)v5;
      int v117 = -1 << v5;
      unsigned int v118 = ~(-1 << v5);
      if (v118 < v115) {
        unsigned int v119 = ~v117;
      }
      else {
        unsigned int v119 = v115;
      }
      if (v118 < v116) {
        unsigned int v120 = ~v117;
      }
      else {
        unsigned int v120 = v116;
      }
      sub_518C8(v119, v120);
      LODWORD(v2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v121 | (1 << v7);
      if (*(_DWORD *)(v113 - 32) == v224) {
        goto LABEL_184;
      }
LABEL_182:
      uint64_t v122 = a1[1];
      *(void *)uint64_t v235 = *(void *)(v122 - 12);
      LODWORD(v122) = *(_DWORD *)(v122 - 4);
      *(void *)&v235[12] = *(void *)v235;
      *(_DWORD *)&v235[8] = v122;
      *(_DWORD *)&v235[20] = v122;
      long double v123 = operator new(0x18uLL);
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v123 + 3);
      unint64_t v218 = (unint64_t)(v123 + 3);
      *(_OWORD *)long double v123 = *(_OWORD *)v235;
      v123[2] = *(void *)&v235[16];
      std::string __p = v123;
      sub_37D38((uint64_t)&v221, (int *)&v224, (const void **)&__p);
      if (__p)
      {
        uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))__p;
        operator delete(__p);
      }
      goto LABEL_184;
    }
  }
  else
  {
    uint64_t v113 = v8;
    if (v5) {
      goto LABEL_172;
    }
  }
  LODWORD(v2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  if (*(_DWORD *)(v113 - 32) != 1) {
    goto LABEL_182;
  }
LABEL_184:
  if ((v4 & 1) == 0)
  {
    *(_OWORD *)a4 = v221;
    *(void *)(a4 + 16) = v222;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (*((void *)&v221 + 1) == (void)v221) {
    goto LABEL_271;
  }
  uint64_t v124 = 0;
  uint64_t v202 = (uint64_t)(*((void *)&v221 + 1) - v221) >> 5;
  uint64x2_t v125 = (void *)v200;
  while (2)
  {
    uint64_t v126 = v221;
    long double v127 = (unsigned int *)(v221 + 32 * v124);
    unsigned int v128 = sub_511FC(*v127);
    unsigned int v129 = *v127 & ~(-1 << (v128 & 0xFE));
    int v130 = sub_51938(v129);
    int v131 = sub_51938(v129 >> 1);
    uint64_t v206 = v127;
    uint64_t v208 = v126;
    int v132 = 1 << -(v128 >> 1);
    if (v128 < 2) {
      int v132 = -2;
    }
    std::string __p = 0;
    uint64_t v217 = 0;
    unint64_t v218 = 0;
    uint64_t v133 = v126 + 32 * v124;
    long double v134 = *(_DWORD **)(v133 + 8);
    uint64_t v215 = v133 + 8;
    double v135 = *(_DWORD **)(v133 + 16);
    if (v134 == v135)
    {
      uint64_t v141 = v133 + 8;
      goto LABEL_260;
    }
    uint64_t v204 = v124;
    long double v136 = 0;
    unsigned int v137 = 0;
    unsigned int v138 = 0;
    int v139 = v130 * v132;
    int v140 = v131 * v132;
    uint64_t v141 = v133 + 8;
    int v213 = v130 * v132;
    int v210 = v131 * v132;
    do
    {
      while (1)
      {
        while (1)
        {
          int v143 = v134[1];
          unsigned int v144 = (*v134 - v139) >> 2;
          unsigned int v145 = (v143 - v140) >> 2;
          long double v146 = __p;
          if (__p == v136)
          {
            BOOL v151 = 0;
            double v150 = v136;
            goto LABEL_214;
          }
          uint64_t v147 = *(void *)(v141 + 8);
          if (*v134 == *(_DWORD *)(v147 - 12) && v143 == *(_DWORD *)(v147 - 8))
          {
            BOOL v148 = v134[2] == *(_DWORD *)(v147 - 4) && v144 == v138;
            if (v148 && v145 == v137) {
              break;
            }
          }
          double v150 = v136;
          long double v136 = __p;
          BOOL v151 = __p != v150;
          if (__p == v150 || v144 != v138 || v145 != v137) {
            goto LABEL_214;
          }
LABEL_211:
          long double v136 = v150;
          v134 += 3;
          if (v134 == v135) {
            goto LABEL_259;
          }
        }
        uint64_t v162 = (char *)(v136 - 3);
        uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v136 - 3);
        if ((unint64_t)(v136 - 3) < v218)
        {
          uint64_t v163 = *(void *)v134;
          *(v136 - 1) = v134[2];
          *(void *)uint64_t v162 = v163;
          goto LABEL_251;
        }
        unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((v162 - (unsigned char *)__p) >> 2) + 1;
        if (v164 > 0x1555555555555555) {
LABEL_297:
        }
          sub_2E00();
        if (0x5555555555555556 * ((uint64_t)(v218 - (void)__p) >> 2) > v164) {
          unint64_t v164 = 0x5555555555555556 * ((uint64_t)(v218 - (void)__p) >> 2);
        }
        unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL
             ? 0x1555555555555555
             : v164;
        if (v165)
        {
          if (v165 > 0x1555555555555555) {
LABEL_298:
          }
            sub_188D718();
          uint64_t v166 = (char *)operator new(12 * v165);
        }
        else
        {
          uint64_t v166 = 0;
        }
        uint64_t v167 = &v166[4 * ((v162 - v146) >> 2)];
        uint64_t v168 = *(void *)v134;
        *((_DWORD *)v167 + 2) = v134[2];
        *(void *)uint64_t v167 = v168;
        long double v136 = v167 + 12;
        if (v162 == v146)
        {
          std::string __p = &v166[4 * ((v162 - v146) >> 2)];
          uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v167 + 12);
          unint64_t v218 = (unint64_t)&v166[12 * v165];
        }
        else
        {
          do
          {
            uint64_t v169 = *(void *)(v162 - 12);
            v162 -= 12;
            int v170 = *((_DWORD *)v162 + 2);
            *(void *)(v167 - 12) = v169;
            v167 -= 12;
            *((_DWORD *)v167 + 2) = v170;
          }
          while (v162 != v146);
          long double v146 = __p;
          std::string __p = v167;
          uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))v136;
          unint64_t v218 = (unint64_t)&v166[12 * v165];
          if (!v146) {
            goto LABEL_250;
          }
        }
        operator delete(v146);
LABEL_250:
        uint64_t v141 = v215;
        int v139 = v213;
        int v140 = v210;
LABEL_251:
        uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))v136;
        double v150 = v136;
        long double v136 = __p;
        BOOL v151 = __p != v150;
        if (__p != v150 && v144 == v138 && v145 == v137) {
          goto LABEL_211;
        }
LABEL_214:
        if ((unint64_t)v150 >= v218) {
          break;
        }
        uint64_t v142 = *(void *)v134;
        v150[2] = v134[2];
        *(void *)double v150 = v142;
        long double v136 = v150 + 3;
        uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v150 + 3);
        unsigned int v138 = v144;
        unsigned int v137 = v145;
        v134 += 3;
        if (v134 == v135) {
          goto LABEL_259;
        }
      }
      unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * (v150 - v136) + 1;
      if (v154 > 0x1555555555555555) {
        goto LABEL_297;
      }
      if (0x5555555555555556 * ((uint64_t)(v218 - (void)v136) >> 2) > v154) {
        unint64_t v154 = 0x5555555555555556 * ((uint64_t)(v218 - (void)v136) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - (void)v136) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v155 = 0x1555555555555555;
      }
      else {
        unint64_t v155 = v154;
      }
      if (v155)
      {
        if (v155 > 0x1555555555555555) {
          goto LABEL_298;
        }
        double v156 = (char *)operator new(12 * v155);
      }
      else
      {
        double v156 = 0;
      }
      uint64_t v157 = *(void *)v134;
      double v158 = &v156[4 * (v150 - v136)];
      *((_DWORD *)v158 + 2) = v134[2];
      *(void *)double v158 = v157;
      double v159 = v158;
      if (v151)
      {
        do
        {
          uint64_t v160 = *(void *)(v150 - 3);
          v150 -= 3;
          int v161 = v150[2];
          *(void *)(v159 - 12) = v160;
          v159 -= 12;
          *((_DWORD *)v159 + 2) = v161;
        }
        while (v150 != v136);
        double v150 = __p;
      }
      long double v136 = v158 + 12;
      std::string __p = v159;
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))(v158 + 12);
      unint64_t v218 = (unint64_t)&v156[12 * v155];
      if (v150) {
        operator delete(v150);
      }
      uint64_t v141 = v215;
      int v139 = v213;
      int v140 = v210;
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))v136;
      unsigned int v138 = v144;
      unsigned int v137 = v145;
      v134 += 3;
    }
    while (v134 != v135);
LABEL_259:
    uint64x2_t v125 = (void *)v200;
    uint64_t v124 = v204;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v136 - (unsigned char *)__p) >> 2) >= 2)
    {
      uint64_t v174 = *(void **)v141;
      *(void *)uint64_t v141 = __p;
      std::string __p = v174;
      uint64_t v175 = *(void (__cdecl ***)(std::stringbuf *__hidden))(v141 + 8);
      *(void *)(v141 + 8) = v217;
      uint64_t v217 = v175;
      unint64_t v176 = *(void *)(v141 + 16);
      *(void *)(v141 + 16) = v218;
      unint64_t v218 = v176;
      unint64_t v177 = *(void *)(v200 + 8);
      if (v177 >= *(void *)(v200 + 16))
      {
        uint64_t v178 = sub_38CE8((void **)v200, (uint64_t)v206);
      }
      else
      {
        *(_DWORD *)unint64_t v177 = *v206;
        *(void *)(v177 + 16) = 0;
        *(void *)(v177 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v177 + 8) = 0;
        *(_OWORD *)(v177 + 8) = *(_OWORD *)v141;
        *(void *)(v177 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v208 + 32 * v204 + 24);
        *(void *)uint64_t v141 = 0;
        *(void *)(v141 + 8) = 0;
        *(void *)(v141 + 16) = 0;
        uint64_t v178 = (char *)(v177 + 32);
      }
      *(void *)(v200 + 8) = v178;
    }
    else
    {
LABEL_260:
      uint64_t v173 = v125[1];
      if (*v125 != v173) {
        *(_DWORD *)(*(void *)(v173 - 16) - 4) = *(_DWORD *)(*(void *)(v141 + 8) - 4);
      }
    }
    if (__p)
    {
      uint64_t v217 = (void (__cdecl **)(std::stringbuf *__hidden))__p;
      operator delete(__p);
    }
    if (++v124 != v202) {
      continue;
    }
    break;
  }
  if (*v125 == v125[1])
  {
LABEL_271:
    uint64_t v179 = sub_37F18(&v221, 0);
    sub_37E28(v200, v179);
    uint64_t v180 = *(void **)v200;
    uint64_t v181 = *(void *)(*(void *)v200 + 8);
    uint64_t v182 = *(void *)(*(void *)v200 + 16) - v181;
    unint64_t v183 = 0xAAAAAAAAAAAAAAABLL * (v182 >> 2);
    if (v183 > 1)
    {
      if (v182 != 24) {
        v180[2] = v181 + 24;
      }
    }
    else
    {
      sub_3907C((void **)(*(void *)v200 + 8), 2 - v183);
      uint64_t v180 = *(void **)v200;
    }
    uint64_t v184 = *(void *)(v221 + 16);
    uint64_t v185 = sub_38128(v180 + 1, 1uLL);
    uint64_t v186 = *(void *)(v184 - 12);
    *(_DWORD *)(v185 + 8) = *(_DWORD *)(v184 - 4);
    *(void *)uint64_t v185 = v186;
    uint64_t v187 = (_DWORD *)sub_38128((void *)(*(void *)v200 + 8), 0);
    uint64_t v188 = (_DWORD *)sub_38128((void *)(*(void *)v200 + 8), 1uLL);
    if (*v187 == *v188 && v187[1] == v188[1] && v187[2] == v188[2])
    {
      sub_6BAC((uint64_t)&__p);
      uint64_t v189 = sub_188FC78(&__p, (uint64_t)"Segment under 8cm:coordinate=", 29);
      sub_36644(v189, *a1, v190);
      uint64_t v191 = sub_2E1EC(1);
      *(void *)uint64_t v235 = operator new(0x20uLL);
      *(_OWORD *)&v235[8] = xmmword_20B8E90;
      strcpy(*(char **)v235, "Warn.HadronRoadSegment.Geometry");
      std::stringbuf::str();
      sub_2E36C(v191, (const void **)v235, (uint64_t)&v228);
      if ((v230[7] & 0x80000000) != 0) {
        operator delete(v228);
      }
      if ((v235[23] & 0x80000000) != 0) {
        operator delete(*(void **)v235);
      }
      if (v220 < 0) {
        operator delete(v219);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  uint64_t v192 = v221;
  if ((void)v221)
  {
    uint64_t v193 = *((void *)&v221 + 1);
    uint64_t v194 = (void *)v221;
    if (*((void *)&v221 + 1) != (void)v221)
    {
      do
      {
        uint64_t v195 = *(void **)(v193 - 24);
        if (v195)
        {
          *(void *)(v193 - 16) = v195;
          operator delete(v195);
        }
        v193 -= 32;
      }
      while (v193 != v192);
      uint64_t v194 = (void *)v221;
    }
    *((void *)&v221 + 1) = v192;
    operator delete(v194);
  }
}

void sub_37BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  if (*(char *)(v51 - 169) < 0) {
    operator delete(*(void **)(v51 - 192));
  }
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  sub_111ECAC((uint64_t)&a18);
  sub_38358(a9);
  sub_38358(&a51);
  _Unwind_Resume(a1);
}

void sub_37C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (__p)
  {
    operator delete(__p);
    sub_38358(&a51);
    _Unwind_Resume(a1);
  }
  sub_38358(&a51);
  _Unwind_Resume(a1);
}

char *sub_37D38(uint64_t a1, int *a2, const void **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v11 = sub_38AAC((void **)a1, a2, (uint64_t)a3);
  }
  else
  {
    int v5 = *a2;
    *(void *)(v4 + 8) = 0;
    *(_DWORD *)unint64_t v4 = v5;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    char v7 = *a3;
    int v6 = a3[1];
    int64_t v8 = v6 - (unsigned char *)*a3;
    if (v6 != *a3)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      char v9 = (char *)operator new(v8);
      *(void *)(v4 + 8) = v9;
      *(void *)(v4 + 16) = v9;
      unsigned int v10 = &v9[4 * (v8 >> 2)];
      *(void *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v10;
      memcpy(v9, v7, v8);
      *(void *)(v4 + 16) = v10;
    }
    uint64_t v11 = (char *)(v4 + 32);
    *(void *)(a1 + 8) = v4 + 32;
  }
  *(void *)(a1 + 8) = v11;
  return v11 - 32;
}

void sub_37E08(_Unwind_Exception *exception_object)
{
  int v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

char *sub_37E28(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    unsigned int v10 = sub_38E44((void **)a1, a2);
  }
  else
  {
    int v4 = *(_DWORD *)a2;
    *(void *)(v3 + 8) = 0;
    *(_DWORD *)unint64_t v3 = v4;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    int v6 = *(unsigned char **)(a2 + 8);
    int v5 = *(unsigned char **)(a2 + 16);
    int64_t v7 = v5 - v6;
    if (v5 != v6)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      int64_t v8 = (char *)operator new(v7);
      *(void *)(v3 + 8) = v8;
      *(void *)(v3 + 16) = v8;
      char v9 = &v8[4 * (v7 >> 2)];
      *(void *)(v3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
      memcpy(v8, v6, v7);
      *(void *)(v3 + 16) = v9;
    }
    unsigned int v10 = (char *)(v3 + 32);
    *(void *)(a1 + 8) = v3 + 32;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 32;
}

void sub_37EF8(_Unwind_Exception *exception_object)
{
  int v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_37F18(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 5);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v15;
    }
    else {
      unsigned int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 32 * a2;
}

void sub_38048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_38128(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v15;
    }
    else {
      unsigned int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 12 * a2;
}

void sub_38278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void **sub_38358(void **a1)
{
  unsigned int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_383CC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = ~(-1 << (sub_511FC(*a1) >> 1));
  char v5 = sub_511FC(*a1);
  int v6 = sub_51938(*a1 & ~(-1 << (v5 & 0xFE)));
  if (v6 + 1 < v4) {
    unsigned int v7 = v6 + 1;
  }
  else {
    unsigned int v7 = v4;
  }
  char v8 = sub_511FC(*a1);
  int v9 = sub_51938((*a1 & ~(-1 << (v8 & 0xFE))) >> 1);
  if (v9 + 1 < v4) {
    unsigned int v4 = v9 + 1;
  }
  unsigned int v10 = sub_511FC(*a1);
  int v11 = -1 << (v10 >> 1);
  if (~v11 < v7) {
    unsigned int v12 = ~v11;
  }
  else {
    unsigned int v12 = v7;
  }
  if (~v11 < v4) {
    unsigned int v13 = ~v11;
  }
  else {
    unsigned int v13 = v4;
  }
  int v14 = 1 << (v10 & 0xFE);
  sub_518C8(v12, v13);
  unsigned int v16 = v14 | v15;
  unsigned int v17 = sub_511FC(*a1);
  int v18 = -1 << (v17 & 0xFE);
  unsigned int v19 = *a1;
  unsigned int v20 = *a1 & ~v18;
  int v21 = sub_51938(v19 & ~v18);
  int v22 = sub_51938(v20 >> 1);
  int v23 = 1 << -(char)(v17 >> 1);
  if (v17 < 2) {
    int v23 = -2;
  }
  unsigned int v24 = v23 * v21;
  unsigned int v25 = v23 * v22;
  unsigned int v26 = sub_511FC(v16);
  unsigned int v27 = v16 & ~(-1 << (v26 & 0xFE));
  int v28 = sub_51938(v27);
  int v29 = sub_51938(v27 >> 1);
  int v30 = 1 << -(char)(v26 >> 1);
  if (v26 < 2) {
    int v30 = -2;
  }
  LODWORD(v31) = v30 * v28;
  LODWORD(v32) = v30 * v29;
  if (v24 == v31) {
    LODWORD(v31) = -1;
  }
  if (v25 == v32) {
    LODWORD(v32) = -2;
  }
  if (v31 >= v24) {
    uint64_t v33 = v24;
  }
  else {
    uint64_t v33 = v31;
  }
  if (v32 >= v25) {
    LODWORD(v34) = v25;
  }
  else {
    LODWORD(v34) = v32;
  }
  if (v34 >= 0xFFFFFFFE) {
    uint64_t v34 = 4294967294;
  }
  else {
    uint64_t v34 = v34;
  }
  uint64_t v38 = v33 | (v34 << 32);
  int v39 = 0x7FFFFFFF;
  if (v24 <= v31) {
    uint64_t v31 = v31;
  }
  else {
    uint64_t v31 = v24;
  }
  if (v25 > v32) {
    LODWORD(v32) = v25;
  }
  if (v32 >= 0xFFFFFFFE) {
    uint64_t v32 = 4294967294;
  }
  else {
    uint64_t v32 = v32;
  }
  uint64_t v36 = v31 | (v32 << 32);
  int v37 = 0x7FFFFFFF;
  return sub_3392C(a2, (unsigned int *)&v38, (unsigned int *)&v36);
}

char *sub_385C4(void **a1, _DWORD *a2, uint64_t a3)
{
  char v5 = (char *)*a1;
  unsigned int v4 = (char *)a1[1];
  uint64_t v6 = (v4 - (unsigned char *)*a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = (unsigned char *)a1[2] - v5;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    unsigned int v12 = (char *)operator new(32 * v11);
  }
  else
  {
    unsigned int v12 = 0;
  }
  unsigned int v13 = &v12[32 * v6];
  int v14 = &v12[32 * v11];
  int v28 = v14;
  *(_DWORD *)unsigned int v13 = *a2;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  int v15 = (char **)(v13 + 16);
  *((void *)v13 + 3) = 0;
  unsigned int v16 = *(const void **)a3;
  int64_t v17 = *(void *)(a3 + 8) - *(void *)a3;
  if (v17)
  {
    unsigned int v27 = &v12[32 * v11];
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int v18 = (char *)operator new(v17);
    *((void *)v13 + 1) = v18;
    *int v15 = v18;
    unsigned int v19 = &v18[4 * (v17 >> 2)];
    *((void *)v13 + 3) = v19;
    memcpy(v18, v16, v17);
    *int v15 = v19;
    int v14 = v27;
  }
  unsigned int v20 = v13 + 32;
  if (v4 == v5)
  {
    *a1 = v13;
    a1[1] = v20;
    a1[2] = v14;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      int v22 = &v13[v21];
      int v23 = &v4[v21];
      *((_DWORD *)v22 - 8) = *(_DWORD *)&v4[v21 - 32];
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      *(_OWORD *)(v22 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v4[v21 - 24];
      *((void *)v22 - 1) = *(void *)&v4[v21 - 8];
      *((void *)v23 - 3) = 0;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v4[v21] != v5);
    unsigned int v24 = (char *)*a1;
    unsigned int v4 = (char *)a1[1];
    unsigned int v20 = v13 + 32;
    *a1 = &v13[v21];
    a1[1] = v13 + 32;
    a1[2] = v28;
    if (v4 != v24)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v4 - 3);
        if (v25)
        {
          *((void *)v4 - 2) = v25;
          operator delete(v25);
        }
        v4 -= 32;
      }
      while (v4 != v24);
      unsigned int v4 = v24;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_387DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  char v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_38800(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 32;
        *(void *)(a1 + 16) = v2 - 32;
        char v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_38870(void **a1, _DWORD *a2, uint64_t a3)
{
  char v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  uint64_t v6 = (v4 - (unsigned char *)*a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = (unsigned char *)a1[2] - v5;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    unsigned int v12 = (char *)operator new(32 * v11);
  }
  else
  {
    unsigned int v12 = 0;
  }
  unsigned int v13 = &v12[32 * v6];
  int v14 = &v12[32 * v11];
  int v28 = v14;
  *(_DWORD *)unsigned int v13 = *a2;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  int v15 = (char **)(v13 + 16);
  *((void *)v13 + 3) = 0;
  unsigned int v16 = *(const void **)a3;
  int64_t v17 = *(void *)(a3 + 8) - *(void *)a3;
  if (v17)
  {
    unsigned int v27 = &v12[32 * v11];
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int v18 = (char *)operator new(v17);
    *((void *)v13 + 1) = v18;
    *int v15 = v18;
    unsigned int v19 = &v18[4 * (v17 >> 2)];
    *((void *)v13 + 3) = v19;
    memcpy(v18, v16, v17);
    *int v15 = v19;
    int v14 = v27;
  }
  unsigned int v20 = v13 + 32;
  if (v4 == v5)
  {
    *a1 = v13;
    a1[1] = v20;
    a1[2] = v14;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      int v22 = &v13[v21];
      int v23 = &v4[v21];
      *((_DWORD *)v22 - 8) = *(_DWORD *)&v4[v21 - 32];
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      *(_OWORD *)(v22 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v4[v21 - 24];
      *((void *)v22 - 1) = *(void *)&v4[v21 - 8];
      *((void *)v23 - 3) = 0;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v4[v21] != v5);
    unsigned int v24 = (char *)*a1;
    uint64_t v4 = (char *)a1[1];
    unsigned int v20 = v13 + 32;
    *a1 = &v13[v21];
    a1[1] = v13 + 32;
    a1[2] = v28;
    if (v4 != v24)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v4 - 3);
        if (v25)
        {
          *((void *)v4 - 2) = v25;
          operator delete(v25);
        }
        v4 -= 32;
      }
      while (v4 != v24);
      uint64_t v4 = v24;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_38A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  char v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_38AAC(void **a1, _DWORD *a2, uint64_t a3)
{
  char v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  uint64_t v6 = (v4 - (unsigned char *)*a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = (unsigned char *)a1[2] - v5;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    unsigned int v12 = (char *)operator new(32 * v11);
  }
  else
  {
    unsigned int v12 = 0;
  }
  unsigned int v13 = &v12[32 * v6];
  int v14 = &v12[32 * v11];
  int v28 = v14;
  *(_DWORD *)unsigned int v13 = *a2;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  int v15 = (char **)(v13 + 16);
  *((void *)v13 + 3) = 0;
  unsigned int v16 = *(const void **)a3;
  int64_t v17 = *(void *)(a3 + 8) - *(void *)a3;
  if (v17)
  {
    unsigned int v27 = &v12[32 * v11];
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int v18 = (char *)operator new(v17);
    *((void *)v13 + 1) = v18;
    *int v15 = v18;
    unsigned int v19 = &v18[4 * (v17 >> 2)];
    *((void *)v13 + 3) = v19;
    memcpy(v18, v16, v17);
    *int v15 = v19;
    int v14 = v27;
  }
  unsigned int v20 = v13 + 32;
  if (v4 == v5)
  {
    *a1 = v13;
    a1[1] = v20;
    a1[2] = v14;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      int v22 = &v13[v21];
      int v23 = &v4[v21];
      *((_DWORD *)v22 - 8) = *(_DWORD *)&v4[v21 - 32];
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      *(_OWORD *)(v22 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v4[v21 - 24];
      *((void *)v22 - 1) = *(void *)&v4[v21 - 8];
      *((void *)v23 - 3) = 0;
      *((void *)v23 - 2) = 0;
      *((void *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v4[v21] != v5);
    unsigned int v24 = (char *)*a1;
    uint64_t v4 = (char *)a1[1];
    unsigned int v20 = v13 + 32;
    *a1 = &v13[v21];
    a1[1] = v13 + 32;
    a1[2] = v28;
    if (v4 != v24)
    {
      do
      {
        unsigned int v25 = (void *)*((void *)v4 - 3);
        if (v25)
        {
          *((void *)v4 - 2) = v25;
          operator delete(v25);
        }
        v4 -= 32;
      }
      while (v4 != v24);
      uint64_t v4 = v24;
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v20;
}

void sub_38CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  char v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_38CE8(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  unint64_t v11 = &v10[32 * v3];
  unsigned int v12 = &v10[v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  unsigned int v13 = v11 + 32;
  int v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_17;
  }
  uint64_t v16 = 0;
  do
  {
    int64_t v17 = &v11[v16];
    int v18 = &v15[v16];
    *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
    *(_OWORD *)(v17 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v15[v16 - 24];
    *((void *)v17 - 1) = *(void *)&v15[v16 - 8];
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 1) = 0;
    v16 -= 32;
  }
  while (&v15[v16] != v14);
  unsigned int v19 = (char *)*a1;
  int v15 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v19)
  {
    do
    {
      unsigned int v20 = (void *)*((void *)v15 - 3);
      if (v20)
      {
        *((void *)v15 - 2) = v20;
        operator delete(v20);
      }
      v15 -= 32;
    }
    while (v15 != v19);
    int v15 = v19;
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v13;
}

char *sub_38E44(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v5];
  unsigned int v12 = &v10[32 * v9];
  unsigned int v27 = v12;
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  unsigned int v13 = (char **)(v11 + 16);
  *((void *)v11 + 3) = 0;
  int v15 = *(unsigned char **)(a2 + 8);
  int v14 = *(unsigned char **)(a2 + 16);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    unsigned int v26 = v12;
    if (0xAAAAAAAAAAAAAAABLL * (v16 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int64_t v17 = (char *)operator new(v16);
    *((void *)v11 + 1) = v17;
    *unsigned int v13 = v17;
    int v18 = &v17[4 * (v16 >> 2)];
    *((void *)v11 + 3) = v18;
    memcpy(v17, v15, v16);
    *unsigned int v13 = v18;
    unsigned int v12 = v26;
  }
  unsigned int v19 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = &v11[v20];
      int v22 = &v3[v20];
      *((_DWORD *)v21 - 8) = *(_DWORD *)&v3[v20 - 32];
      *((void *)v21 - 2) = 0;
      *((void *)v21 - 1) = 0;
      *(_OWORD *)(v21 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v3[v20 - 24];
      *((void *)v21 - 1) = *(void *)&v3[v20 - 8];
      *((void *)v22 - 3) = 0;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      v20 -= 32;
    }
    while (&v3[v20] != v4);
    int v23 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    unsigned int v19 = v11 + 32;
    *a1 = &v11[v20];
    a1[1] = v11 + 32;
    a1[2] = v27;
    if (v3 != v23)
    {
      do
      {
        unsigned int v24 = (void *)*((void *)v3 - 3);
        if (v24)
        {
          *((void *)v3 - 2) = v24;
          operator delete(v24);
        }
        v3 -= 32;
      }
      while (v3 != v23);
      uint64_t v3 = v23;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v19;
}

void sub_39058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3907C(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (!a2)
    {
LABEL_31:
      a1[1] = v5;
      return;
    }
    unsigned int v12 = &v5[12 * a2];
    unint64_t v13 = 12 * a2 - 12;
    if (v13 >= 0x54)
    {
      unint64_t v26 = v13 / 0xC + 1;
      int v14 = &v5[12 * (v26 & 0x3FFFFFFFFFFFFFF8)];
      uint64_t v27 = v26 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)uint64_t v5 = xmmword_20B8E30;
        *((_OWORD *)v5 + 1) = xmmword_20B8EB0;
        *((_OWORD *)v5 + 4) = xmmword_20B8EB0;
        *((_OWORD *)v5 + 5) = xmmword_20B8EA0;
        *((_OWORD *)v5 + 2) = xmmword_20B8EA0;
        *((_OWORD *)v5 + 3) = xmmword_20B8E30;
        v5 += 96;
        v27 -= 8;
      }
      while (v27);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFF8)) {
        goto LABEL_30;
      }
    }
    else
    {
      int v14 = (char *)a1[1];
    }
    do
    {
      *(void *)int v14 = -1;
      *((_DWORD *)v14 + 2) = 0x7FFFFFFF;
      v14 += 12;
    }
    while (v14 != v12);
LABEL_30:
    uint64_t v5 = v12;
    goto LABEL_31;
  }
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 2);
  unint64_t v8 = v7 + a2;
  if (v7 + a2 > 0x1555555555555555) {
    sub_2E00();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v8;
  }
  if (v10)
  {
    if (v10 > 0x1555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(12 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  int v15 = &v11[12 * v7];
  int64_t v16 = &v15[12 * a2];
  unint64_t v17 = 12 * a2 - 12;
  int v18 = v15;
  if (v17 < 0x54) {
    goto LABEL_37;
  }
  unint64_t v19 = v17 / 0xC + 1;
  int v18 = &v15[12 * (v19 & 0x3FFFFFFFFFFFFFF8)];
  uint64_t v20 = v19 & 0x3FFFFFFFFFFFFFF8;
  uint64_t v21 = &v11[12 * v7];
  do
  {
    *(_OWORD *)uint64_t v21 = xmmword_20B8E30;
    *((_OWORD *)v21 + 1) = xmmword_20B8EB0;
    *((_OWORD *)v21 + 4) = xmmword_20B8EB0;
    *((_OWORD *)v21 + 5) = xmmword_20B8EA0;
    *((_OWORD *)v21 + 2) = xmmword_20B8EA0;
    *((_OWORD *)v21 + 3) = xmmword_20B8E30;
    v21 += 96;
    v20 -= 8;
  }
  while (v20);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFF8))
  {
LABEL_37:
    do
    {
      *(void *)int v18 = -1;
      *((_DWORD *)v18 + 2) = 0x7FFFFFFF;
      v18 += 12;
    }
    while (v18 != v16);
  }
  for (double i = &v11[12 * v10]; v5 != v6; *((_DWORD *)v15 + 2) = v24)
  {
    uint64_t v23 = *(void *)(v5 - 12);
    v5 -= 12;
    int v24 = *((_DWORD *)v5 + 2);
    *(void *)(v15 - 12) = v23;
    v15 -= 12;
  }
  unsigned int v25 = *a1;
  *a1 = v15;
  a1[1] = v16;
  a1[2] = i;
  if (v25)
  {
    operator delete(v25);
  }
}

uint64_t sub_392FC()
{
  return -1;
}

uint64_t sub_39308(long double a1, long double a2, double a3)
{
  sub_39420(a1, a2, a3);
  double v5 = v4;
  uint64_t result = -1;
  if (v4 <= 180.0 && v4 >= -180.0 && v3 >= -85.0511288 && v3 <= 85.0511288)
  {
    double v7 = fmax(v3, -85.0511288);
    double v8 = v7 * 3.14159265 / 180.0;
    BOOL v9 = v7 < 85.0511288;
    double v10 = 1.48442223;
    if (v9) {
      double v10 = v8;
    }
    long double v11 = sin(v10);
    LODWORD(v12) = ((log((v11 + 1.0) / (1.0 - v11)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v12 >= 0xFFFFFFFE) {
      uint64_t v12 = 4294967294;
    }
    else {
      uint64_t v12 = v12;
    }
    return ((v5 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v12 << 32);
  }
  return result;
}

void sub_39420(long double a1, long double a2, double a3)
{
  double v5 = a1 * a1 + a2 * a2;
  double v6 = v5 * 2.45817226e-14;
  double v7 = a3 * a3 * 0.99330562 * 2.45817226e-14;
  double v8 = v5 * 2.45817226e-14 + v7;
  double v9 = (v8 + -0.0000448147235) * 0.166666667;
  double v10 = v5 * 2.45817226e-14 * v7 * 0.0000112036809;
  double v11 = v10 + v9 * (v9 * (v9 + v9));
  if (v11 >= 2.25010182e-14)
  {
    double v12 = v10 + v11;
    double v13 = sqrt(v10 * v11);
    long double v24 = a1;
    double v14 = cbrt(v12 + v13 + v13);
    long double v15 = cbrt(2.0);
    double v16 = -0.0000112036809 - v8 * 0.5;
    long double v17 = v16 * 0.333333333 - v14 * (1.0 / v15) - v9 * v9 / (v14 * (1.0 / v15));
    double v18 = (0.0000112036809 - v8) * 0.0000112036809;
    double v19 = sqrt(sqrt(v17 * v17 - v18) - (v16 + v17) * 0.5);
    double v20 = sqrt(fabs((v17 - v16) * 0.5));
    if (v6 >= v7) {
      double v20 = -v20;
    }
    double v21 = v19 + v20;
    double v22 = v21
        - (v18
         + ((v6 - v7) * 0.00334719 + (v6 - v7) * 0.00334719) * v21
         + v21 * v21 * (v21 * v21)
         + (v16 + v16) * (v21 * v21))
        / ((v6 - v7) * 0.00334719 + (v6 - v7) * 0.00334719 + v16 * 4.0 * v21 + v21 * (v21 * v21) * 4.0);
    atan2((v22 + 0.00334719) * a3, sqrt(v5) * (v22 + -0.00334719));
    atan2(a2, v24);
  }
  else
  {
    sub_396A4(a1, a2, a3);
  }
}

double sub_396A4(long double a1, long double a2, double a3)
{
  long double v4 = a2;
  long double v5 = a1;
  double v6 = sqrt(a1 * a1 + a2 * a2);
  double v7 = fabs(a3);
  if (v6 >= 0.00000001 && v6 >= v7 * 0.00000001)
  {
    double v48 = v5;
    double v10 = atan2(a3 * 6378137.0, v6 * 6356752.31);
    __double2 v11 = __sincos_stret(v10);
    double v12 = 6378137.0 / sqrt(1.0 - v11.__sinval * (v11.__sinval * 0.00669437999));
    double v13 = atan2((v12 + v6 / v11.__cosval - v12) * a3, v6 * (v12 * 0.99330562 + v6 / v11.__cosval - v12));
    __double2 v14 = __sincos_stret(v13);
    double v15 = 6378137.0 / sqrt(1.0 - v14.__sinval * (v14.__sinval * 0.00669437999));
    double v16 = atan2((v15 + v6 / v14.__cosval - v15) * a3, v6 * (v15 * 0.99330562 + v6 / v14.__cosval - v15));
    __double2 v17 = __sincos_stret(v16);
    double v18 = 6378137.0 / sqrt(1.0 - v17.__sinval * (v17.__sinval * 0.00669437999));
    double v19 = v6 / v17.__cosval - v18;
    double v20 = atan2((v18 + v19) * a3, v6 * (v18 * 0.99330562 + v19));
    __double2 v21 = __sincos_stret(v20);
    double v22 = 6378137.0 / sqrt(1.0 - v21.__sinval * (v21.__sinval * 0.00669437999));
    double v23 = v6 / v21.__cosval - v22;
    double v24 = atan2((v22 + v23) * a3, v6 * (v22 * 0.99330562 + v23));
    double v25 = v24;
    if (vabdd_f64(v23, v19) < 0.0007 && v22 * vabdd_f64(v24, v20) < 0.0007) {
      goto LABEL_16;
    }
    __double2 v26 = __sincos_stret(v24);
    double v27 = 6378137.0 / sqrt(v26.__sinval * (v26.__sinval * -0.00669437999) + 1.0);
    double v28 = v6 / v26.__cosval - v27;
    double v29 = atan2((v27 + v28) * a3, v6 * (v27 * 0.99330562 + v28));
    if (vabdd_f64(v28, v23) >= 0.0007 || v27 * vabdd_f64(v29, v25) >= 0.0007)
    {
      __double2 v30 = __sincos_stret(v29);
      double v31 = 6378137.0 / sqrt(v30.__sinval * (v30.__sinval * -0.00669437999) + 1.0);
      double v32 = v6 / v30.__cosval - v31;
      double v25 = atan2((v31 + v32) * a3, v6 * (v31 * 0.99330562 + v32));
      if (vabdd_f64(v32, v28) < 0.0007 && v31 * vabdd_f64(v25, v29) < 0.0007) {
        goto LABEL_16;
      }
      __double2 v35 = __sincos_stret(v25);
      double v36 = 6378137.0 / sqrt(v35.__sinval * (v35.__sinval * -0.00669437999) + 1.0);
      double v37 = v6 / v35.__cosval - v36;
      double v29 = atan2((v36 + v37) * a3, v6 * (v36 * 0.99330562 + v37));
      if (vabdd_f64(v37, v32) >= 0.0007 || v36 * vabdd_f64(v29, v25) >= 0.0007)
      {
        __double2 v38 = __sincos_stret(v29);
        double v39 = 6378137.0 / sqrt(v38.__sinval * (v38.__sinval * -0.00669437999) + 1.0);
        double v40 = v6 / v38.__cosval - v39;
        double v25 = atan2((v39 + v40) * a3, v6 * (v39 * 0.99330562 + v40));
        if (vabdd_f64(v40, v37) >= 0.0007 || v39 * vabdd_f64(v25, v29) >= 0.0007)
        {
          __double2 v41 = __sincos_stret(v25);
          double v42 = 6378137.0 / sqrt(v41.__sinval * (v41.__sinval * -0.00669437999) + 1.0);
          double v43 = v6 / v41.__cosval - v42;
          double v44 = atan2((v42 + v43) * a3, v6 * (v42 * 0.99330562 + v43));
          if (vabdd_f64(v43, v40) >= 0.0007 || v42 * vabdd_f64(v44, v25) >= 0.0007)
          {
            __double2 v45 = __sincos_stret(v44);
            double v46 = 6378137.0 / sqrt(v45.__sinval * (v45.__sinval * -0.00669437999) + 1.0);
            double v25 = atan2((v46 + v6 / v45.__cosval - v46) * a3, v6 * (v46 * 0.99330562 + v6 / v45.__cosval - v46));
          }
          else
          {
            double v25 = v44;
          }
        }
        goto LABEL_16;
      }
    }
    double v25 = v29;
LABEL_16:
    long double v4 = a2;
    long double v5 = v48;
    double v9 = v25 * 180.0 / 3.14159265;
    goto LABEL_17;
  }
  if (a3 <= 0.0) {
    double v9 = -90.0;
  }
  else {
    double v9 = 90.0;
  }
LABEL_17:
  long double v33 = atan2(v4, v5);
  remainder(v33, 6.28318531);
  return v9;
}

void sub_39B74(unsigned int **a1, unsigned int **a2, void *a3, uint64_t a4, int a5, uint64_t a6, void **a7)
{
  double v7 = *a1;
  uint64_t v66 = a1[1];
  if (*a1 != v66 && *a2 != a2[1])
  {
    int v10 = a5;
    float64x2_t v70 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v71 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v69 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v68 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    unsigned int v74 = a3;
    uint64_t v75 = a4;
    while (1)
    {
      double v12 = *a2;
      __double2 v11 = a2[1];
      int v76 = v11;
      uint64_t v77 = v7;
      if (*a2 != v11) {
        break;
      }
LABEL_4:
      if (++v7 == v66) {
        return;
      }
    }
    while (1)
    {
      unsigned int v15 = *v7;
      unsigned int v16 = *v12;
      if (*v12 < *v7) {
        char v17 = a6;
      }
      else {
        char v17 = 0;
      }
      if (v15 == v16 || (v17 & 1) != 0) {
        goto LABEL_9;
      }
      uint64_t v18 = *a3;
      double v19 = (unsigned int *)(*a3 + 12 * v15);
      double v20 = (unsigned int *)(*a3 + 12 * v16);
      uint64_t v22 = *v19;
      uint64_t v21 = v19[1];
      if (v10 != 1) {
        break;
      }
      if (v22 != -1 || v21 != -1)
      {
        unsigned int v24 = *v20;
        unsigned int v25 = *(_DWORD *)(v18 + 12 * v16 + 4);
        if (*v20 != -1 || v25 != -1)
        {
          long double v27 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
          long double v28 = atan((v27 - 1.0 / v27) * 0.5) * 57.2957795 * 0.0174532925;
          v29.i64[0] = v22;
          v29.i64[1] = v24;
          long double v30 = exp(3.14159265 - (double)v25 * 6.28318531 / 4294967300.0);
          long double v31 = atan((v30 - 1.0 / v30) * 0.5) * 57.2957795 * 0.0174532925;
          int64x2_t v32 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v71), v70), v69), v68);
          double v72 = vsubq_f64((float64x2_t)v32, (float64x2_t)vdupq_laneq_s64(v32, 1)).f64[0];
          long double v33 = sin((v28 - v31) * 0.5);
          long double v34 = v33 * v33;
          double v35 = cos(v28);
          long double v36 = v35 * cos(v31);
          long double v37 = sin(0.5 * v72);
          long double v38 = atan2(sqrt(v37 * v37 * v36 + v34), sqrt(1.0 - (v37 * v37 * v36 + v34)));
          double v39 = (v38 + v38) * 6372797.56 * 100.0;
          if (v39 >= 0.0)
          {
            double v40 = v39;
            if (v39 < 4.50359963e15)
            {
              uint64_t v41 = (uint64_t)(v39 + v39) + 1;
              goto LABEL_52;
            }
          }
          else
          {
            double v40 = v39;
            if (v39 > -4.50359963e15)
            {
              uint64_t v41 = (uint64_t)(v39 + v39);
              if (v41 >= 1) {
                --v41;
              }
LABEL_52:
              double v40 = (double)(v41 >> 1);
            }
          }
          a3 = v74;
          a4 = v75;
          __double2 v11 = v76;
          double v7 = v77;
          if (v40 >= 9.22337204e18)
          {
LABEL_54:
            uint64_t v45 = 0x7FFFFFFFFFFFFFFELL;
            if (a4 != 0x7FFFFFFFFFFFFFFFLL && a4 != 0x7FFFFFFFFFFFFFFELL) {
              goto LABEL_9;
            }
            goto LABEL_56;
          }
LABEL_40:
          if (v39 >= 0.0)
          {
            if (v39 < 4.50359963e15)
            {
              uint64_t v46 = (uint64_t)(v39 + v39) + 1;
              goto LABEL_47;
            }
          }
          else if (v39 > -4.50359963e15)
          {
            uint64_t v46 = (uint64_t)(v39 + v39);
            if (v46 >= 1) {
              --v46;
            }
LABEL_47:
            double v39 = (double)(v46 >> 1);
          }
          uint64_t v45 = (uint64_t)v39;
          if ((uint64_t)v39 > a4) {
            goto LABEL_9;
          }
          goto LABEL_56;
        }
      }
      uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
      if (a4 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_9;
      }
LABEL_56:
      if (v16 >= v15) {
        BOOL v47 = v7;
      }
      else {
        BOOL v47 = v12;
      }
      if (v15 >= v16) {
        double v48 = (int *)v7;
      }
      else {
        double v48 = (int *)v12;
      }
      uint64_t v50 = (char *)a7[1];
      double v49 = (char *)a7[2];
      if (v50 >= v49)
      {
        uint64_t v51 = a7;
        uint64_t v52 = a6;
        uint64x2_t v53 = v51;
        long double v54 = (char *)*v51;
        uint64_t v55 = (v50 - (unsigned char *)*v51) >> 4;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v57 = v49 - v54;
        if (v57 >> 3 > v56) {
          unint64_t v56 = v57 >> 3;
        }
        BOOL v58 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
        if (!v58) {
          unint64_t v59 = v56;
        }
        if (v59 >> 60) {
          sub_188D718();
        }
        uint64_t v60 = 16 * v59;
        unint64_t v61 = (char *)operator new(16 * v59);
        int v62 = *v48;
        double v63 = &v61[16 * v55];
        *(_DWORD *)double v63 = *v47;
        *((_DWORD *)v63 + 1) = v62;
        *((void *)v63 + 1) = v45;
        if (v50 == v54)
        {
          a6 = v52;
          __double2 v14 = v63 + 16;
          a7 = v53;
          char *v53 = v63;
          v53[1] = v63 + 16;
          v53[2] = &v61[v60];
          if (v54) {
            goto LABEL_73;
          }
        }
        else
        {
          double v64 = &v61[16 * v55];
          a6 = v52;
          do
          {
            double v65 = v64 - 16;
            *((_OWORD *)v64 - 1) = *((_OWORD *)v50 - 1);
            v50 -= 16;
            v64 -= 16;
          }
          while (v50 != v54);
          __double2 v14 = v63 + 16;
          a7 = v53;
          char *v53 = v65;
          v53[1] = v63 + 16;
          v53[2] = &v61[v60];
          if (v54) {
LABEL_73:
          }
            operator delete(v54);
        }
        int v10 = a5;
        a3 = v74;
        a4 = v75;
        __double2 v11 = v76;
        double v7 = v77;
        goto LABEL_8;
      }
      int v13 = *v48;
      *(_DWORD *)uint64_t v50 = *v47;
      *((_DWORD *)v50 + 1) = v13;
      *((void *)v50 + 1) = v45;
      __double2 v14 = v50 + 16;
LABEL_8:
      a7[1] = v14;
LABEL_9:
      if (++v12 == v11) {
        goto LABEL_4;
      }
    }
    uint64_t v42 = v21 - *(unsigned int *)(v18 + 12 * v16 + 4);
    double v39 = sqrt((double)((v22 - *v20) * (v22 - (unint64_t)*v20) + v42 * v42)) / 100.0 * 100.0;
    if (v39 >= 0.0)
    {
      double v43 = v39;
      if (v39 >= 4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v44 = (uint64_t)(v39 + v39) + 1;
    }
    else
    {
      double v43 = v39;
      if (v39 <= -4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v44 = (uint64_t)(v39 + v39);
      if (v44 >= 1) {
        --v44;
      }
    }
    double v43 = (double)(v44 >> 1);
LABEL_39:
    if (v43 >= 9.22337204e18) {
      goto LABEL_54;
    }
    goto LABEL_40;
  }
}

void sub_3A0F0(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void **a4@<X8>, unint64_t a5@<D0>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 2);
  if (v8 < 2) {
    return;
  }
  uint64_t v11 = v7 + 12;
  if (v7 == v6 || v11 == v6)
  {
    uint64_t v14 = *a1;
  }
  else
  {
    uint64_t v13 = v7 + 12;
    uint64_t v14 = *a1;
    do
    {
      if (*(_DWORD *)(v14 + 4) < *(_DWORD *)(v13 + 4)) {
        uint64_t v14 = v13;
      }
      v13 += 12;
    }
    while (v13 != v6);
    do
    {
      if (*(_DWORD *)(v11 + 4) < *(_DWORD *)(v7 + 4)) {
        uint64_t v7 = v11;
      }
      v11 += 12;
    }
    while (v11 != v6);
  }
  if (a3 == 1)
  {
    LODWORD(a5) = *(_DWORD *)(v14 + 4);
    long double v15 = exp((double)a5 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v16 = atan((v15 + -1.0 / v15) * 0.5);
    double v17 = cos(v16 * 57.2957795 * 3.14159265 / 180.0) * 4004146800.0;
    if (v17 >= 0.0)
    {
      if (v17 >= 4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v18 = (uint64_t)(v17 + v17) + 1;
    }
    else
    {
      if (v17 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v18 = (uint64_t)(v17 + v17);
      if (v18 >= 1) {
        --v18;
      }
    }
    double v17 = (double)(v18 >> 1);
LABEL_25:
    uint64_t v26 = (uint64_t)v17;
    LODWORD(v17) = *(_DWORD *)(v7 + 4);
    long double v27 = exp((double)*(unint64_t *)&v17 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v28 = atan((v27 + -1.0 / v27) * 0.5);
    double v29 = cos(v28 * 57.2957795 * 3.14159265 / 180.0) * 4004146800.0;
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_33;
      }
      uint64_t v30 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_33;
      }
      uint64_t v30 = (uint64_t)(v29 + v29);
      if (v30 >= 1) {
        --v30;
      }
    }
    double v29 = (double)(v30 >> 1);
LABEL_33:
    uint64_t v31 = (uint64_t)v29;
    if ((uint64_t)v29 >= v26) {
      uint64_t v31 = v26;
    }
    double v32 = (double)v31;
    long double v33 = (const double *)&unk_20B8F40;
    float64x2_t v19 = vld1q_dup_f64(v33);
    v19.f64[0] = v32;
    unsigned int v84 = a4;
    uint64_t v86 = a2;
    if (!a2) {
      goto LABEL_36;
    }
LABEL_21:
    __asm { FMOV            V1.2D, #1.0 }
    int8x16_t v24 = (int8x16_t)vcvtq_u64_f64(vaddq_f64(vdivq_f64(v19, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0)), _Q1));
    int8x16_t v25 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)xmmword_20B8F60, (uint64x2_t)v24), v24, (int8x16_t)xmmword_20B8F60);
    goto LABEL_37;
  }
  float64x2_t v19 = (float64x2_t)xmmword_20B8F50;
  unsigned int v84 = a4;
  uint64_t v86 = a2;
  if (a2) {
    goto LABEL_21;
  }
LABEL_36:
  int8x16_t v25 = (int8x16_t)xmmword_20B8F60;
LABEL_37:
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = v25.i64[0];
  double v37 = 4294967300.0 / (double)v25.u64[0];
  uint64_t v38 = v25.i64[1];
  *(double *)v25.i64 = (double)v25.u64[1];
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v91 = 0u;
  HIDWORD(v39) = 1106247679;
  int v92 = 1065353216;
  unint64_t v40 = v25.i64[1] - 1;
  double v41 = 4294967290.0 / (double)v25.u64[1];
  do
  {
    unint64_t v88 = 0;
    uint64_t v89 = v35;
    uint64_t v42 = (__int32 *)(*a1 + v34);
    v25.i32[0] = *v42;
    LODWORD(v39) = v42[1];
    unint64_t v43 = (unint64_t)((double)v25.u64[0] / v37);
    unint64_t v44 = (unint64_t)((double)v39 / v41);
    if (v36 - 1 < v43) {
      unint64_t v43 = v36 - 1;
    }
    if (v40 < v44) {
      unint64_t v44 = v40;
    }
    unint64_t v88 = v43 + v44 * v36;
    int v93 = &v88;
    uint64_t v45 = sub_3AB6C((uint64_t)__p, &v88, (uint64_t)&unk_20F06E0, (uint64_t **)&v93);
    sub_3A998((uint64_t)(v45 + 3), &v89);
    ++v35;
    v34 += 12;
  }
  while (v8 != v35);
  uint64_t v46 = v91[0];
  if (v91[0])
  {
    BOOL v47 = v36 == 1;
    BOOL v48 = v38 == 1 && v36 == 1;
    if (v38 == 1) {
      BOOL v47 = 1;
    }
    BOOL v85 = v47;
    while (1)
    {
      uint64_t v49 = *((void *)v46 + 2);
      sub_39B74((unsigned int **)v46 + 3, (unsigned int **)v46 + 3, a1, v86, a3, 1, v84);
      if (v48)
      {
        unint64_t v50 = -1;
        unint64_t v51 = -1;
        unint64_t v52 = -1;
        unint64_t v53 = -1;
        int8x8_t v54 = (int8x8_t)__p[1];
        if (!__p[1]) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v50 = v49 + 1;
        if (v85)
        {
          unint64_t v51 = -1;
          unint64_t v52 = -1;
          unint64_t v53 = -1;
          int8x8_t v54 = (int8x8_t)__p[1];
          if (!__p[1]) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v36 == 2) {
            unint64_t v51 = v49 + 2;
          }
          else {
            unint64_t v51 = v49 + v36 - 1;
          }
          if (v36 == 2) {
            unint64_t v52 = v49 + 3;
          }
          else {
            unint64_t v52 = v49 + v36;
          }
          if (v36 == 2) {
            unint64_t v53 = -1;
          }
          else {
            unint64_t v53 = v49 + v36 + 1;
          }
          int8x8_t v54 = (int8x8_t)__p[1];
          if (!__p[1]) {
            goto LABEL_51;
          }
        }
      }
      uint8x8_t v55 = (uint8x8_t)vcnt_s8(v54);
      v55.i16[0] = vaddlv_u8(v55);
      if (v55.u32[0] > 1uLL)
      {
        unint64_t v56 = v50;
        if (v50 >= *(void *)&v54) {
          unint64_t v56 = v50 % *(void *)&v54;
        }
      }
      else
      {
        unint64_t v56 = (*(void *)&v54 - 1) & v50;
      }
      uint64_t v57 = (unsigned int ***)*((void *)__p[0] + v56);
      if (!v57) {
        goto LABEL_90;
      }
      BOOL v58 = *v57;
      if (!v58) {
        goto LABEL_90;
      }
      if (v55.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v60 = v58[1];
          if (v60 == (unsigned int *)v50)
          {
            if (v58[2] == (unsigned int *)v50) {
              goto LABEL_88;
            }
          }
          else if (((unint64_t)v60 & (*(void *)&v54 - 1)) != v56)
          {
            goto LABEL_89;
          }
          BOOL v58 = (unsigned int **)*v58;
          if (!v58) {
            goto LABEL_89;
          }
        }
      }
      while (1)
      {
        unint64_t v59 = (unint64_t)v58[1];
        if (v59 == v50) {
          break;
        }
        if (v59 >= *(void *)&v54) {
          v59 %= *(void *)&v54;
        }
        if (v59 != v56) {
          goto LABEL_89;
        }
LABEL_77:
        BOOL v58 = (unsigned int **)*v58;
        if (!v58) {
          goto LABEL_89;
        }
      }
      if (v58[2] != (unsigned int *)v50) {
        goto LABEL_77;
      }
LABEL_88:
      sub_39B74((unsigned int **)v46 + 3, v58 + 3, a1, v86, a3, 0, v84);
      int8x8_t v54 = (int8x8_t)__p[1];
LABEL_89:
      if (!*(void *)&v54) {
        goto LABEL_51;
      }
LABEL_90:
      uint8x8_t v61 = (uint8x8_t)vcnt_s8(v54);
      v61.i16[0] = vaddlv_u8(v61);
      if (v61.u32[0] >= 2uLL)
      {
        unint64_t v62 = v51;
        if (v51 >= *(void *)&v54) {
          unint64_t v62 = v51 % *(void *)&v54;
        }
      }
      else
      {
        unint64_t v62 = (*(void *)&v54 - 1) & v51;
      }
      double v63 = (unsigned int ***)*((void *)__p[0] + v62);
      if (!v63) {
        goto LABEL_112;
      }
      double v64 = *v63;
      if (!v64) {
        goto LABEL_112;
      }
      if (v61.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v66 = v64[1];
          if (v66 == (unsigned int *)v51)
          {
            if (v64[2] == (unsigned int *)v51) {
              goto LABEL_110;
            }
          }
          else if (((unint64_t)v66 & (*(void *)&v54 - 1)) != v62)
          {
            goto LABEL_111;
          }
          double v64 = (unsigned int **)*v64;
          if (!v64) {
            goto LABEL_111;
          }
        }
      }
      while (2)
      {
        unint64_t v65 = (unint64_t)v64[1];
        if (v65 != v51)
        {
          if (v65 >= *(void *)&v54) {
            v65 %= *(void *)&v54;
          }
          if (v65 != v62) {
            goto LABEL_111;
          }
          goto LABEL_99;
        }
        if (v64[2] != (unsigned int *)v51)
        {
LABEL_99:
          double v64 = (unsigned int **)*v64;
          if (!v64) {
            goto LABEL_111;
          }
          continue;
        }
        break;
      }
LABEL_110:
      sub_39B74((unsigned int **)v46 + 3, v64 + 3, a1, v86, a3, 0, v84);
      int8x8_t v54 = (int8x8_t)__p[1];
LABEL_111:
      if (!*(void *)&v54) {
        goto LABEL_51;
      }
LABEL_112:
      uint8x8_t v67 = (uint8x8_t)vcnt_s8(v54);
      v67.i16[0] = vaddlv_u8(v67);
      if (v67.u32[0] >= 2uLL)
      {
        unint64_t v68 = v52;
        if (v52 >= *(void *)&v54) {
          unint64_t v68 = v52 % *(void *)&v54;
        }
      }
      else
      {
        unint64_t v68 = (*(void *)&v54 - 1) & v52;
      }
      float64x2_t v69 = (unsigned int ***)*((void *)__p[0] + v68);
      if (!v69) {
        goto LABEL_134;
      }
      float64x2_t v70 = *v69;
      if (!v70) {
        goto LABEL_134;
      }
      if (v67.u32[0] < 2uLL)
      {
        while (1)
        {
          double v72 = v70[1];
          if (v72 == (unsigned int *)v52)
          {
            if (v70[2] == (unsigned int *)v52) {
              goto LABEL_132;
            }
          }
          else if (((unint64_t)v72 & (*(void *)&v54 - 1)) != v68)
          {
            goto LABEL_133;
          }
          float64x2_t v70 = (unsigned int **)*v70;
          if (!v70) {
            goto LABEL_133;
          }
        }
      }
      while (2)
      {
        unint64_t v71 = (unint64_t)v70[1];
        if (v71 != v52)
        {
          if (v71 >= *(void *)&v54) {
            v71 %= *(void *)&v54;
          }
          if (v71 != v68) {
            goto LABEL_133;
          }
          goto LABEL_121;
        }
        if (v70[2] != (unsigned int *)v52)
        {
LABEL_121:
          float64x2_t v70 = (unsigned int **)*v70;
          if (!v70) {
            goto LABEL_133;
          }
          continue;
        }
        break;
      }
LABEL_132:
      sub_39B74((unsigned int **)v46 + 3, v70 + 3, a1, v86, a3, 0, v84);
      int8x8_t v54 = (int8x8_t)__p[1];
LABEL_133:
      if (v54)
      {
LABEL_134:
        uint8x8_t v73 = (uint8x8_t)vcnt_s8(v54);
        v73.i16[0] = vaddlv_u8(v73);
        if (v73.u32[0] >= 2uLL)
        {
          unint64_t v74 = v53;
          if (v53 >= *(void *)&v54) {
            unint64_t v74 = v53 % *(void *)&v54;
          }
        }
        else
        {
          unint64_t v74 = (*(void *)&v54 - 1) & v53;
        }
        uint64_t v75 = (unsigned int ***)*((void *)__p[0] + v74);
        if (v75)
        {
          int v76 = *v75;
          if (v76)
          {
            if (v73.u32[0] < 2uLL)
            {
              uint64_t v77 = *(void *)&v54 - 1;
              while (1)
              {
                int64_t v79 = v76[1];
                if (v79 == (unsigned int *)v53)
                {
                  if (v76[2] == (unsigned int *)v53) {
                    goto LABEL_50;
                  }
                }
                else if (((unint64_t)v79 & v77) != v74)
                {
                  goto LABEL_51;
                }
                int v76 = (unsigned int **)*v76;
                if (!v76) {
                  goto LABEL_51;
                }
              }
            }
            do
            {
              unint64_t v78 = (unint64_t)v76[1];
              if (v78 == v53)
              {
                if (v76[2] == (unsigned int *)v53)
                {
LABEL_50:
                  sub_39B74((unsigned int **)v46 + 3, v76 + 3, a1, v86, a3, 0, v84);
                  break;
                }
              }
              else
              {
                if (v78 >= *(void *)&v54) {
                  v78 %= *(void *)&v54;
                }
                if (v78 != v74) {
                  break;
                }
              }
              int v76 = (unsigned int **)*v76;
            }
            while (v76);
          }
        }
      }
LABEL_51:
      uint64_t v46 = *(void **)v46;
      if (!v46)
      {
        long double v80 = v91[0];
        if (v91[0])
        {
          do
          {
            unsigned int v82 = (void *)*v80;
            int v83 = (void *)v80[3];
            if (v83)
            {
              v80[4] = v83;
              operator delete(v83);
            }
            operator delete(v80);
            long double v80 = v82;
          }
          while (v82);
        }
        break;
      }
    }
  }
  long double v81 = __p[0];
  __p[0] = 0;
  if (v81) {
    operator delete(v81);
  }
}

void sub_3A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3AB00((uint64_t)va);
  unint64_t v8 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_3A998(uint64_t a1, void *a2)
{
  long double v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_188D718();
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    long double v15 = &v14[4 * v10];
    *long double v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      long double v15 = (_DWORD *)((char *)v15 - v18);
      float64x2_t v19 = &v14[4 * v10 - 16];
      double v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *float64x2_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--long double v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)long double v5 = *a2;
    uint64_t v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

uint64_t sub_3AB00(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long double v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  double v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_3AB6C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  CFTimeZoneRef v11[2] = v15;
  _OWORD v11[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    float64x2_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *unint64_t v11 = *v19;
LABEL_61:
      *float64x2_t v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        float64x2_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        float64x2_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      float64x2_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v11 = *v14;
  *uint64_t v14 = v11;
  *(void *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v28 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    float64x2_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_3AE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3AEA0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      double v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_3AEF0(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v7 = (double)a2 / 100.0;
  unsigned int v8 = a1[1];
  long double v9 = exp((double)v8 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5);
  double v11 = v7 / (0.00932288077 / (1.0 / cos(v10 * 57.2957795 / 180.0 * 3.14159265)));
  unsigned int v12 = *a1;
  if (*a1 >= ~*a1) {
    unsigned int v12 = ~v12;
  }
  if (v11 >= (double)v12) {
    goto LABEL_14;
  }
  unsigned int v13 = -2 - v8;
  if (-2 - v8 >= v8) {
    unsigned int v13 = v8;
  }
  if (v11 >= (double)v13)
  {
LABEL_14:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = sub_3B3B0((char **)a4);
    if (a3 >= 1)
    {
      int v14 = 0;
      int v15 = a3 & ~(a3 >> 31);
      double v16 = (double)a3;
      do
      {
        float v17 = (char **)sub_3B138((void *)a4, 0);
        LODWORD(v18) = *a1;
        double v19 = (double)v18;
        __double2 v20 = __sincos_stret((double)v14 * 6.28318531 / v16);
        *(double *)&unint64_t v21 = v11 * v20.__sinval + v19;
        uint64_t v22 = *(double *)&v21;
        LODWORD(v21) = a1[1];
        LODWORD(v23) = (v11 * v20.__cosval + (double)v21);
        if (v23 >= 0xFFFFFFFE) {
          uint64_t v23 = 4294967294;
        }
        else {
          uint64_t v23 = v23;
        }
        uint64_t v27 = v22 | (v23 << 32);
        int v28 = 0x7FFFFFFF;
        sub_30C0C(v17, &v27);
        ++v14;
      }
      while (v15 != v14);
    }
    unint64_t v24 = (char **)sub_3B138((void *)a4, 0);
    uint8x8_t v25 = (void *)sub_3B138((void *)a4, 0);
    uint64_t v26 = (uint64_t *)sub_38128(v25, 0);
    sub_30C0C(v24, v26);
  }
}

void sub_3B0FC(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void sub_3B110(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void sub_3B124(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3B138(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unsigned int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long double v10 = &v15;
    }
    else {
      long double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unsigned int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_3B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

unint64_t sub_3B368(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *a2;
  double v3 = a2[1];
  unint64_t result = 31337;
  if (*a2 != v3)
  {
    do
    {
      uint64_t v5 = *v2;
      uint64_t v6 = v2[1];
      v2 += 3;
      unint64_t v7 = ((result << 6) + 2654435769u + (result >> 2) + v5) ^ result;
      unint64_t result = (v6 + 2654435769 + (v7 << 6) + (v7 >> 2)) ^ v7;
    }
    while (v2 != v3);
  }
  return result;
}

char *sub_3B3B0(char **a1)
{
  double v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unsigned int v8 = &v7[24 * v4];
  long long v9 = &v7[24 * v6];
  *(void *)unsigned int v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  long double v10 = v8 + 24;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    double v11 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v12 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
    v8 -= 24;
    *((void *)v11 - 1) = *((void *)v2 + 2);
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    *((void *)v2 + 2) = 0;
  }
  while (v2 != v3);
  long long v13 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v13)
  {
    int v14 = v2;
    do
    {
      std::string v16 = (void *)*((void *)v14 - 3);
      v14 -= 24;
      std::string v15 = v16;
      if (v16)
      {
        *((void *)v2 - 2) = v15;
        operator delete(v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v13);
    uint64_t v2 = v13;
  }
  if (v2) {
LABEL_20:
  }
    operator delete(v2);
  return v10;
}

BOOL sub_3B50C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  unint64_t v6 = a5;
  unint64_t v7 = a1;
  double v8 = *a1;
  double v9 = *a2;
  if (*a1 == *a2)
  {
    while (1)
    {
      long double v10 = a3;
      double v11 = a4;
      long long v12 = a6;
      double v14 = v7[1];
      double v13 = a2[1];
      if (v14 != v13) {
        break;
      }
      if (*a3 == *a4)
      {
        double v40 = a3[1];
        if (v40 == a4[1])
        {
          BOOL v41 = v8 == *a3;
          double v42 = NAN;
          if (v41 && v14 == v40) {
            double v42 = 0.0;
          }
          *a6 = v42;
          double *v6 = v42;
          return *v7 == *a3 && v7[1] == a3[1];
        }
      }
      double v8 = *a3;
      double v9 = *a4;
      a3 = v7;
      a4 = a2;
      a6 = v6;
      unint64_t v6 = v12;
      a2 = v11;
      unint64_t v7 = v10;
      if (*v10 != *v11) {
        goto LABEL_3;
      }
    }
  }
  else
  {
    long double v10 = a1;
    double v11 = a2;
    long long v12 = a5;
LABEL_3:
    double v13 = v11[1];
    unint64_t v7 = v10;
    double v14 = v10[1];
    long double v10 = a3;
    double v11 = a4;
    unint64_t v6 = v12;
    long long v12 = a6;
  }
  double v15 = v9 - v8;
  double v16 = v13 - v14;
  double v17 = *v10;
  double v18 = *v11;
  double v19 = v11[1];
  double v20 = *v11 - *v10;
  double v21 = v10[1];
  double v22 = v19 - v21;
  double v23 = v8 - *v10;
  double v24 = v15 * (v14 - v21) - v16 * v23;
  double v25 = v15 * (v19 - v21) - v16 * v20;
  if (v24 == 0.0 && v25 == 0.0)
  {
    if (v17 == v18 && v21 == v19)
    {
      double v44 = (v21 - v14) / v16;
      double v45 = (v17 - v8) / v15;
      if (v15 == 0.0) {
        double v45 = v44;
      }
      double *v6 = v45;
      *long long v12 = 0.0;
    }
    else
    {
      double v27 = (v21 - v14) / v16;
      double v28 = (v19 - v14) / v16;
      double v29 = (v17 - v8) / v15;
      double v30 = v18 - v8;
      if (v15 == 0.0) {
        double v31 = v27;
      }
      else {
        double v31 = v29;
      }
      double v32 = v30 / v15;
      if (v15 == 0.0) {
        double v33 = v28;
      }
      else {
        double v33 = v32;
      }
      uint64_t v34 = (double *)operator new(0x20uLL);
      *(_OWORD *)uint64_t v34 = xmmword_20B8F70;
      v34[2] = v31;
      v34[3] = v33;
      std::__sort<std::__less<double,double> &,double *>();
      uint64_t v35 = v7 + 1;
      double v36 = (v34[1] + v34[2]) * 0.5;
      double *v6 = v36;
      if (v20 == 0.0)
      {
        double v37 = v16;
      }
      else
      {
        uint64_t v35 = v7;
        double v37 = v15;
      }
      if (v20 == 0.0) {
        uint64_t v38 = v10 + 1;
      }
      else {
        uint64_t v38 = v10;
      }
      if (v20 == 0.0) {
        double v39 = v22;
      }
      else {
        double v39 = v20;
      }
      *long long v12 = (v37 * v36 + *v35 - *v38) / v39;
      operator delete(v34);
    }
  }
  else
  {
    if (v25 == 0.0)
    {
      BOOL result = 0;
      *long long v12 = NAN;
      double *v6 = NAN;
      return result;
    }
    double *v6 = (v20 * (v14 - v21) - v23 * v22) / v25;
    *long long v12 = v24 / v25;
  }
  return 1;
}

void sub_3B7B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float64x2_t sub_3B7CC(float64x2_t *a1, float64x2_t *a2, double *a3, double *a4, float64x2_t *a5)
{
  uint64_t v9 = 0;
  double v10 = 0.0;
  if (sub_3B50C(a1->f64, a2->f64, a3, a4, &v10, (double *)&v9))
  {
    float64x2_t result = vaddq_f64(vmulq_n_f64(*a1, 1.0 - v10), vmulq_n_f64(*a2, v10));
    *a5 = result;
  }
  return result;
}

uint64_t sub_3B83C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  double v31 = 0.0;
  double v32 = 0.0;
  v8.i64[0] = *(void *)a1;
  v8.i64[1] = HIDWORD(*(void *)a1);
  float64x2_t v9 = vcvtq_f64_u64(v8);
  v8.i64[0] = *(void *)a2;
  v8.i64[1] = HIDWORD(*(void *)a2);
  float64x2_t v29 = vcvtq_f64_u64(v8);
  float64x2_t v30 = v9;
  v8.i64[0] = *a3;
  v8.i64[1] = HIDWORD(*a3);
  float64x2_t v10 = vcvtq_f64_u64(v8);
  v8.i64[0] = *a4;
  v8.i64[1] = HIDWORD(*a4);
  float64x2_t v27 = vcvtq_f64_u64(v8);
  float64x2_t v28 = v10;
  if (sub_3B50C(v30.f64, v29.f64, v28.f64, v27.f64, &v32, &v31)
    && (v32 >= 0.0 ? (BOOL v13 = v32 > 1.0) : (BOOL v13 = 1), !v13 && (HIDWORD(v14) = HIDWORD(v31), v31 >= 0.0)))
  {
    int v17 = 0x7FFFFFFF;
    if (v31 <= 1.0)
    {
      int v18 = *(_DWORD *)(a1 + 8);
      LODWORD(v14) = *(_DWORD *)a1;
      LODWORD(v11) = *(_DWORD *)(a1 + 4);
      double v19 = (double)v11;
      LODWORD(v11) = *(_DWORD *)a2;
      LODWORD(v12) = *(_DWORD *)(a2 + 4);
      double v20 = (1.0 - v32) * (double)v14 + v32 * (double)v11;
      double v21 = (1.0 - v32) * v19 + v32 * (double)v12;
      if (v18 == 0x7FFFFFFF || (int v22 = *(_DWORD *)(a2 + 8), v22 == 0x7FFFFFFF))
      {
        LODWORD(v26) = v21;
        if (v21 >= 0xFFFFFFFE) {
          uint64_t v26 = 4294967294;
        }
        else {
          uint64_t v26 = v26;
        }
        unint64_t v25 = v20 | (unint64_t)(v26 << 32);
        int v17 = 0x7FFFFFFF;
      }
      else
      {
        double v23 = (1.0 - v32) * (double)v18 + v32 * (double)v22;
        LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v21;
        if (v21 >= 0xFFFFFFFE) {
          uint64_t v24 = 4294967294;
        }
        else {
          uint64_t v24 = v24;
        }
        unint64_t v25 = v20 | (unint64_t)(v24 << 32);
        int v17 = (int)v23;
      }
      uint64_t v16 = v25;
      uint64_t result = 1;
    }
    else
    {
      uint64_t result = 0;
      uint64_t v16 = -1;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v16 = -1;
    int v17 = 0x7FFFFFFF;
  }
  *(void *)a5 = v16;
  *(_DWORD *)(a5 + 8) = v17;
  return result;
}

BOOL sub_3B9C8(void *a1, void *a2, void *a3, void *a4)
{
  double v9 = 0.0;
  double v10 = 0.0;
  v4.i64[0] = *a1;
  v4.i64[1] = HIDWORD(*a1);
  float64x2_t v5 = vcvtq_f64_u64(v4);
  v4.i64[0] = *a2;
  v4.i64[1] = HIDWORD(*a2);
  float64x2_t v13 = vcvtq_f64_u64(v4);
  float64x2_t v14 = v5;
  v4.i64[0] = *a3;
  v4.i64[1] = HIDWORD(*a3);
  float64x2_t v6 = vcvtq_f64_u64(v4);
  v4.i64[0] = *a4;
  v4.i64[1] = HIDWORD(*a4);
  float64x2_t v11 = vcvtq_f64_u64(v4);
  float64x2_t v12 = v6;
  BOOL result = sub_3B50C(v14.f64, v13.f64, v12.f64, v11.f64, &v10, &v9);
  if (result)
  {
    if (v10 < 0.0 || v10 > 1.0) {
      return 0;
    }
    else {
      return v9 >= 0.0 && v9 <= 1.0;
    }
  }
  return result;
}

BOOL sub_3BA88(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  uint64x2_t v4 = (void *)*a3;
  float64x2_t v5 = (void *)a3[1];
  if ((void *)*a3 != v5)
  {
    float64x2_t v6 = a4;
    int v9 = 0;
    BOOL v47 = (void *)a3[1];
    while (1)
    {
      float64x2_t v11 = (void *)*v4;
      double v10 = (void *)v4[1];
      float64x2_t v12 = (void *)(*v4 + 12);
      if ((void *)*v4 != v10 && v12 != v10) {
        break;
      }
LABEL_3:
      v4 += 3;
      if (v4 == v5) {
        return v9 != 0;
      }
    }
    while (1)
    {
      double v55 = 0.0;
      double v56 = 0.0;
      v15.i64[0] = *(void *)a1;
      v15.i64[1] = HIDWORD(*(void *)a1);
      float64x2_t v16 = vcvtq_f64_u64(v15);
      v15.i64[0] = *(void *)a2;
      v15.i64[1] = HIDWORD(*(void *)a2);
      float64x2_t v53 = vcvtq_f64_u64(v15);
      float64x2_t v54 = v16;
      v15.i64[0] = *v11;
      v15.i64[1] = HIDWORD(*v11);
      float64x2_t v52 = vcvtq_f64_u64(v15);
      v15.i64[0] = *v12;
      v15.i64[1] = HIDWORD(*v12);
      float64x2_t v51 = vcvtq_f64_u64(v15);
      if (!sub_3B50C(v54.f64, v53.f64, v52.f64, v51.f64, &v56, &v55)) {
        goto LABEL_12;
      }
      if (v56 < 0.0 || v56 > 1.0) {
        goto LABEL_12;
      }
      HIDWORD(v20) = HIDWORD(v55);
      if (v55 < 0.0 || v55 > 1.0) {
        goto LABEL_12;
      }
      int v21 = *(_DWORD *)(a1 + 8);
      LODWORD(v20) = *(_DWORD *)a1;
      LODWORD(v17) = *(_DWORD *)(a1 + 4);
      double v22 = (double)v20;
      LODWORD(v20) = *(_DWORD *)a2;
      LODWORD(v18) = *(_DWORD *)(a2 + 4);
      double v23 = (1.0 - v56) * v22 + v56 * (double)v20;
      double v24 = (1.0 - v56) * (double)v17 + v56 * (double)v18;
      if (v21 == 0x7FFFFFFF || (int v25 = *(_DWORD *)(a2 + 8), v25 == 0x7FFFFFFF))
      {
        LODWORD(v33) = v24;
        if (v24 >= 0xFFFFFFFE) {
          uint64_t v33 = 4294967294;
        }
        else {
          uint64_t v33 = v33;
        }
        unint64_t v29 = v23 | (unint64_t)(v33 << 32);
        int v30 = 0x7FFFFFFF;
        double v32 = (char *)v6[1];
        unint64_t v31 = (unint64_t)v6[2];
        if ((unint64_t)v32 < v31)
        {
LABEL_10:
          *(void *)double v32 = v29;
          *((_DWORD *)v32 + 2) = v30;
          float64x2_t v14 = v32 + 12;
          goto LABEL_11;
        }
      }
      else
      {
        double v26 = v56 * (double)v25;
        LODWORD(v27) = v24;
        double v28 = (1.0 - v56) * (double)v21 + v26;
        if (v24 >= 0xFFFFFFFE) {
          uint64_t v27 = 4294967294;
        }
        else {
          uint64_t v27 = v27;
        }
        unint64_t v29 = v23 | (unint64_t)(v27 << 32);
        int v30 = (int)v28;
        double v32 = (char *)v6[1];
        unint64_t v31 = (unint64_t)v6[2];
        if ((unint64_t)v32 < v31) {
          goto LABEL_10;
        }
      }
      uint64_t v34 = (char *)*v6;
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)*v6) >> 2);
      unint64_t v36 = v35 + 1;
      if (v35 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 2);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v38 = 0x1555555555555555;
      }
      else {
        unint64_t v38 = v36;
      }
      unint64_t v50 = v38;
      if (v38)
      {
        uint64_t v49 = v4;
        if (v38 > 0x1555555555555555) {
          sub_188D718();
        }
        int v39 = v30;
        unint64_t v40 = v29;
        BOOL v41 = (char *)operator new(12 * v38);
        unint64_t v29 = v40;
        int v30 = v39;
        uint64x2_t v4 = v49;
      }
      else
      {
        BOOL v41 = 0;
      }
      double v42 = &v41[12 * v35];
      *(void *)double v42 = v29;
      *((_DWORD *)v42 + 2) = v30;
      unint64_t v43 = v42;
      if (v32 != v34)
      {
        float64x2_t v6 = a4;
        do
        {
          uint64_t v44 = *(void *)(v32 - 12);
          v32 -= 12;
          int v45 = *((_DWORD *)v32 + 2);
          *(void *)(v43 - 12) = v44;
          v43 -= 12;
          *((_DWORD *)v43 + 2) = v45;
        }
        while (v32 != v34);
        double v32 = (char *)*a4;
        float64x2_t v5 = v47;
        float64x2_t v14 = v42 + 12;
        *a4 = v43;
        a4[1] = v42 + 12;
        a4[2] = &v41[12 * v50];
        if (!v32) {
          goto LABEL_11;
        }
LABEL_47:
        operator delete(v32);
        goto LABEL_11;
      }
      float64x2_t v5 = v47;
      float64x2_t v6 = a4;
      float64x2_t v14 = v42 + 12;
      *a4 = v42;
      a4[1] = v42 + 12;
      a4[2] = &v41[12 * v50];
      if (v32) {
        goto LABEL_47;
      }
LABEL_11:
      v6[1] = v14;
      int v9 = 1;
LABEL_12:
      float64x2_t v11 = (void *)((char *)v11 + 12);
      float64x2_t v12 = (void *)((char *)v12 + 12);
      if (v12 == v10) {
        goto LABEL_3;
      }
    }
  }
  int v9 = 0;
  return v9 != 0;
}

uint64_t sub_3BDC0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64x2_t v4 = *(void **)a3;
  float64x2_t v5 = *(void **)(a3 + 8);
  if (*(void **)a3 == v5) {
    return 0;
  }
  int v9 = 0;
  do
  {
    v9 |= sub_3BA88(a1, a2, v4, a4);
    v4 += 3;
  }
  while (v4 != v5);
  return v9 & 1;
}

char *sub_3BE4C@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64x2_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 4;
  unint64_t v6 = v5 + 2;
  if (v5 != -2)
  {
    if (v6 >> 60) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(16 * v6);
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = &v7[16 * v6];
  }
  sub_3BFF8((char **)a2, v4);
  sub_3DF60(a2, *(void *)(a2 + 8), *a1, a1[1], (a1[1] - *a1) >> 4);
  return sub_3BFF8((char **)a2, (_OWORD *)a1[1] - 1);
}

void sub_3BEF0(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BF0C(uint64_t a1, char **a2, char **a3, char a4)
{
  *(unsigned char *)(a1 + 48) = a4;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = xmmword_20B8F80;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_3BF7C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BF98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2) {
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  uint64x2_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

char *sub_3BFF8(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      float64x2_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      float64x2_t v12 = 0;
    }
    float64x2_t v13 = &v12[16 * v8];
    *(_OWORD *)float64x2_t v13 = *a2;
    unint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    unint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

double sub_3C100(void *a1, uint64_t a2)
{
  uint64_t v2 = (double *)(*a1 + 16 * *(void *)a2);
  if (*(unsigned char *)(a2 + 16)) {
    return *v2;
  }
  double v5 = v2[1];
  double result = v2[2];
  double v6 = v2[3];
  double v7 = result - *v2;
  double v8 = v7 * v7 + (v6 - v5) * (v6 - v5);
  BOOL v9 = fabs(v8) < 2.22044605e-16 || v8 == 0.0;
  unint64_t v4 = (double *)(a1[3] + 16 * *(void *)(a2 + 8));
  double v10 = (v7 * (*v4 - *v2) + (v6 - v5) * (v4[1] - v5)) / v8;
  if (v9) {
    double v10 = 1.79769313e308;
  }
  if (v10 <= 0.0) {
    return *v2;
  }
  if (v10 < 1.0) {
    return *v2 + v7 * v10;
  }
  return result;
}

double sub_3C1B8(void *a1, uint64_t a2)
{
  uint64_t v2 = (double *)(a1[3] + 16 * *(void *)(a2 + 8));
  if (!*(unsigned char *)(a2 + 16)) {
    return *v2;
  }
  double v3 = v2[1];
  double result = v2[2];
  double v5 = v2[3];
  double v6 = result - *v2;
  double v7 = v6 * v6 + (v5 - v3) * (v5 - v3);
  BOOL v8 = fabs(v7) < 2.22044605e-16 || v7 == 0.0;
  double v9 = (v6 * (*(double *)(*a1 + 16 * *(void *)a2) - *v2)
      + (v5 - v3) * (*(double *)(*a1 + 16 * *(void *)a2 + 8) - v3))
     / v7;
  if (v8) {
    double v9 = 1.79769313e308;
  }
  if (v9 <= 0.0) {
    return *v2;
  }
  if (v9 < 1.0) {
    return *v2 + v6 * v9;
  }
  return result;
}

uint64_t sub_3C270(uint64_t *a1)
{
  if (a1[11]) {
    return sub_3CA1C(a1);
  }
  else {
    return sub_3C280((uint64_t)a1);
  }
}

uint64_t sub_3C280(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if ((unint64_t)v6 >= 0x2492492492492491) {
      sub_2E00();
    }
    size_t v7 = 112 * (v6 >> 4);
    BOOL v8 = (char *)operator new(v7);
    double v9 = &v8[v7];
    double v10 = v8;
    do
    {
      *(void *)double v10 = 0;
      *((void *)v10 + 1) = 0;
      v10[16] = 1;
      *(_OWORD *)(v10 + 17) = *(_OWORD *)v103;
      *((void *)v10 + 4) = *(void *)&v103[15];
      *((void *)v10 + 5) = 0x7FF0000000000000;
      *((void *)v10 + 7) = 0;
      *((void *)v10 + 8) = 0;
      *((void *)v10 + 6) = 0;
      v10[72] = 1;
      *(_OWORD *)(v10 + 73) = *(_OWORD *)v102;
      *((void *)v10 + 11) = *(void *)&v102[15];
      *((_OWORD *)v10 + 6) = xmmword_20B8F90;
      v10 += 112;
    }
    while (v10 != v9);
    int v99 = 0;
    uint64_t v100 = 0;
    std::string __p = 0;
    if (v2 != v3)
    {
LABEL_6:
      uint64_t v11 = v2 - v3;
      if (v2 - v3 < 0) {
        sub_2E00();
      }
      uint64_t v12 = v11 >> 4;
      size_t v13 = 24 * (v11 >> 4);
      float64x2_t v14 = (uint64_t *)operator new(v13);
      uint64x2_t v15 = v14;
      std::string __p = v14;
      int v99 = (char *)v14;
      float64x2_t v16 = &v14[3 * v12];
      uint64_t v100 = v16;
      int64_t v17 = v9 - v8;
      if (v9 == v8)
      {
        bzero(v14, 24 * ((v13 - 24) / 0x18) + 24);
      }
      else
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v17 >> 4)) > 0x249249249249249)
        {
          *float64x2_t v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
          sub_2E00();
        }
        unint64_t v18 = v14;
        do
        {
          *unint64_t v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
          double v19 = (char *)operator new(v17);
          *unint64_t v18 = (uint64_t)v19;
          unint64_t v20 = &v19[16 * (v17 >> 4)];
          v18[2] = (uint64_t)v20;
          memcpy(v19, v8, v17);
          v18[1] = (uint64_t)v20;
          v18 += 3;
        }
        while (v18 != v16);
      }
      int v99 = (char *)v16;
      if (v8) {
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  else
  {
    double v9 = 0;
    BOOL v8 = 0;
    int v99 = 0;
    uint64_t v100 = 0;
    std::string __p = 0;
    if (v2 != v3) {
      goto LABEL_6;
    }
  }
  uint64x2_t v15 = 0;
  if (v8) {
LABEL_17:
  }
    operator delete(v8);
LABEL_18:
  p_p = &__p;
  uint64_t v21 = *v15;
  *(void *)(v21 + 56) = 0;
  *(void *)(v21 + 64) = 0;
  *(unsigned char *)(v21 + 72) = 1;
  int8x16_t v22 = (int8x16_t)xmmword_20B8F80;
  *(_OWORD *)(v21 + 80) = xmmword_20B8F80;
  *(void *)(v21 + 96) = 0;
  *(void *)(v21 + 104) = 0;
  uint64_t v23 = *v15;
  *(unsigned char *)(v23 + 16) = 0;
  *(void *)uint64_t v23 = 0;
  *(void *)(v23 + 8) = 0;
  *(_OWORD *)(v23 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = xmmword_20B8F80;
  *(void *)(v23 + 40) = 0;
  *(void *)(v23 + 48) = 0;
  v96[0] = (uint64_t *)a1;
  v96[1] = (uint64_t *)&p_p;
  uint64_t v24 = *(void *)(a1 + 8);
  if (v24 == *(void *)a1)
  {
    uint64_t v34 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = (v24 - *(void *)a1) >> 4;
    do
    {
      uint64_t v27 = v25 + 1;
      uint64_t v28 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
      if (v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v28 >> 4;
        do
        {
          *(void *)&long long v93 = v25;
          *((void *)&v93 + 1) = v29;
          unsigned __int8 v94 = 1;
          *(void *)unsigned int v103 = v25 + 1;
          *(void *)&v103[8] = v29;
          v103[16] = 1;
          ++v29;
          *(void *)unsigned int v102 = v25;
          *(void *)&v102[8] = v29;
          v102[16] = 0;
          int8x16_t v31 = sub_3DA90(v96, &v93, (uint64_t *)v103, v22);
          int8x16_t v32 = sub_3DA90(v96, &v93, (uint64_t *)v102, v31);
          *(void *)&long long v93 = v25;
          *((void *)&v93 + 1) = v29 - 1;
          unsigned __int8 v94 = 0;
          *(void *)unsigned int v103 = v25 + 1;
          *(void *)&v103[8] = v29 - 1;
          v103[16] = 1;
          *(void *)unsigned int v102 = v25;
          *(void *)&v102[8] = v29;
          v102[16] = 0;
          int8x16_t v33 = sub_3DA90(v96, &v93, (uint64_t *)v103, v32);
          int8x16_t v22 = sub_3DA90(v96, &v93, (uint64_t *)v102, v33);
        }
        while (v29 != v30);
      }
      ++v25;
    }
    while (v27 != v26);
    uint64_t v24 = *(void *)a1;
    uint64_t v34 = *(void *)(a1 + 8);
    uint64x2_t v15 = (uint64_t *)*p_p;
  }
  uint64_t v35 = ((v34 - v24) >> 4) - 2;
  uint64_t v36 = ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) - 2;
  unint64_t v37 = v103;
  unint64_t v38 = &v103[8];
  *(void *)&v103[8] = v36;
  v103[16] = 1;
  *(void *)&v102[8] = v36;
  v102[16] = 0;
  uint64_t v39 = v15[3 * v35];
  unint64_t v40 = (double *)(v39 + 112 * v36);
  double v41 = v40[13];
  if (v41 == 0.0) {
    double v41 = 1.0;
  }
  double v42 = v40[12] / v41;
  double v43 = v40[6];
  if (v43 == 0.0) {
    double v43 = 1.0;
  }
  double v44 = v40[5] / v43;
  if (v42 >= v44) {
    unint64_t v38 = &v102[8];
  }
  uint64_t v45 = *(void *)v38;
  if (v42 >= v44) {
    uint64_t v46 = &v102[16];
  }
  else {
    uint64_t v46 = &v103[16];
  }
  unsigned __int8 v47 = *v46;
  if (v42 >= v44) {
    unint64_t v37 = v102;
  }
  *(_DWORD *)int v92 = *(_DWORD *)(v37 + 17);
  *(_DWORD *)&v92[3] = *((_DWORD *)v37 + 5);
  uint64_t v48 = v39 + 112 * v45 + 56 * *v46;
  long long v49 = *(_OWORD *)(v48 + 40);
  unint64_t v50 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v48 + 24);
  *(_OWORD *)(a1 + 120) = v49;
  *(void *)(a1 + 64) = v50;
  unint64_t v51 = v36 + v35;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - (void)v50) >> 3) < v36 + v35)
  {
    if (v51 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    float64x2_t v52 = (char *)operator new(24 * v51);
    *(void *)(a1 + 56) = v52;
    *(void *)(a1 + 64) = v52;
    *(void *)(a1 + 72) = &v52[24 * v51];
    if (v50) {
      operator delete(v50);
    }
  }
  *(void *)&long long v93 = v35;
  *((void *)&v93 + 1) = v45;
  unsigned __int8 v94 = v47;
  v95[0] = *(_DWORD *)v92;
  *(_DWORD *)((char *)v95 + 3) = *(_DWORD *)&v92[3];
  char v53 = 1;
  if (v35 | v45)
  {
    do
    {
      uint64_t v54 = *(void *)(a1 + 64);
      if (*(void *)(a1 + 56) != v54)
      {
        if (v94 == *(unsigned __int8 *)(v54 - 8))
        {
          if (v94)
          {
            double v55 = (void *)(v54 - 24);
            double v56 = (double *)(*(void *)(a1 + 24) + 16 * v45);
            uint64_t v57 = v56 + 2;
            uint64_t v58 = *(void *)a1;
            unint64_t v59 = (double *)(*(void *)a1 + 16 * v35);
          }
          else
          {
            double v56 = (double *)(*(void *)a1 + 16 * v35);
            uint64_t v57 = v56 + 2;
            uint64_t v58 = *(void *)(a1 + 24);
            unint64_t v59 = (double *)(v58 + 16 * v45);
            double v55 = (void *)(v54 - 16);
          }
          uint8x8_t v61 = (double *)(v58 + 16 * *v55);
          double v62 = *v56;
          double v63 = v56[1];
          double v64 = *v57 - *v56;
          double v65 = v57[1] - v63;
          double v66 = v64 * (*v59 - *v56) + v65 * (v59[1] - v63);
          double v67 = v64 * v64 + v65 * v65;
          BOOL v68 = v67 == 0.0;
          if (fabs(v67) < 2.22044605e-16) {
            BOOL v68 = 1;
          }
          double v69 = v66 / v67;
          if (v68) {
            double v69 = 1.79769313e308;
          }
          double v70 = (v64 * (*v61 - v62) + v65 * (v61[1] - v63)) / v67;
          if (v68) {
            double v70 = 1.79769313e308;
          }
          BOOL v60 = v69 <= v70;
        }
        else
        {
          BOOL v60 = 1;
        }
        v53 &= v60;
      }
      sub_3CFCC((char **)(a1 + 56), &v93);
      uint64_t v71 = *((void *)*p_p + 3 * v93) + 112 * *((void *)&v93 + 1) + 56 * v94;
      unsigned __int8 v72 = *(unsigned char *)(v71 + 16);
      long long v93 = *(_OWORD *)v71;
      unsigned __int8 v94 = v72;
      uint64_t v45 = *((void *)&v93 + 1);
      uint64_t v35 = v93;
    }
    while (v93 != 0);
  }
  unint64_t v74 = *(void *)(a1 + 56);
  uint64_t v73 = *(void *)(a1 + 64);
  if (v74 != v73)
  {
    unint64_t v75 = v73 - 24;
    if (v75 > v74)
    {
      unint64_t v76 = v74 + 24;
      do
      {
        long long v77 = *(_OWORD *)(v76 - 24);
        uint64_t v78 = *(void *)(v76 - 8);
        char v79 = *(unsigned char *)(v75 + 16);
        *(_OWORD *)(v76 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)v75;
        *(unsigned char *)(v76 - 8) = v79;
        *(unsigned char *)(v75 + 16) = v78;
        *(_OWORD *)unint64_t v75 = v77;
        v75 -= 24;
        BOOL v80 = v76 >= v75;
        v76 += 24;
      }
      while (!v80);
    }
  }
  *(void *)(a1 + 88) = 0;
  sub_3D110(a1 + 80, ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4)+ ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)- 4);
  uint64_t v81 = *(void *)(a1 + 56);
  uint64_t v82 = *(void *)(a1 + 64);
  if (v81 != v82)
  {
    uint64_t v83 = *(void *)(a1 + 88) & 0x3FLL;
    unint64_t v84 = *(void *)(a1 + 80) + 8 * (*(void *)(a1 + 88) >> 6);
    do
    {
      char v101 = *(unsigned char *)(v81 + 16);
      sub_3E194((void **)(a1 + 80), v84, v83, &v101, (uint64_t)&v93);
      unint64_t v84 = v93 + 8 * (DWORD2(v93) == 63);
      if (DWORD2(v93) == 63) {
        LODWORD(v83) = 0;
      }
      else {
        LODWORD(v83) = DWORD2(v93) + 1;
      }
      v81 += 24;
    }
    while (v81 != v82);
  }
  BOOL v85 = (char *)__p;
  if (__p)
  {
    uint64_t v86 = v99;
    int v87 = __p;
    if (v99 != __p)
    {
      unint64_t v88 = v99;
      do
      {
        unsigned int v90 = (void *)*((void *)v88 - 3);
        v88 -= 24;
        uint64_t v89 = v90;
        if (v90)
        {
          *((void *)v86 - 2) = v89;
          operator delete(v89);
        }
        uint64_t v86 = v88;
      }
      while (v88 != v85);
      int v87 = __p;
    }
    int v99 = v85;
    operator delete(v87);
  }
  return v53 & 1;
}

void sub_3C9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (v18)
  {
    operator delete(v18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3CA1C(uint64_t *a1)
{
  *(_OWORD *)(a1 + 13) = xmmword_20B8F80;
  a1[15] = 0;
  a1[16] = 0;
  uint64_t v2 = (void *)a1[7];
  uint64_t v83 = (char **)(a1 + 7);
  a1[8] = (uint64_t)v2;
  unint64_t v3 = ((a1[1] - *a1) >> 4) + ((a1[4] - a1[3]) >> 4) - 4;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[9] - (uint64_t)v2) >> 3) < v3)
  {
    if (v3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v4 = 24 * v3;
    uint64_t v5 = (char *)operator new(24 * v3);
    a1[7] = (uint64_t)v5;
    a1[8] = (uint64_t)v5;
    a1[9] = (uint64_t)&v5[v4];
    if (v2) {
      operator delete(v2);
    }
  }
  size_t v7 = (void *)a1[10];
  unint64_t v6 = a1[11];
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v82 = v6 & 0x3F;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    LODWORD(v8) = 1;
    int v12 = 1;
    size_t v13 = &v7[v6 >> 6];
    while (1)
    {
      BOOL v14 = (*v7 & (1 << v11)) != 0;
      if ((*v7 & (1 << v11)) != 0) {
        uint64_t v15 = v10 + 1;
      }
      else {
        uint64_t v15 = v10;
      }
      if ((*v7 & (1 << v11)) != 0) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = v9 + 1;
      }
      *(void *)&long long v88 = v15;
      *((void *)&v88 + 1) = v16;
      BOOL v89 = v14;
      sub_3CFCC(v83, &v88);
      if (v12 == v89)
      {
        if (v12)
        {
          int64_t v17 = (double *)(a1[3] + 16 * v9);
          unint64_t v18 = v17 + 2;
          double v19 = *(double *)a1;
          unint64_t v20 = (double *)(*a1 + 16 * v10);
          uint64_t v21 = &v88;
          double v22 = *(double *)a1;
        }
        else
        {
          double v19 = *(double *)a1;
          int64_t v17 = (double *)(*a1 + 16 * v10);
          unint64_t v18 = v17 + 2;
          double v22 = *((double *)a1 + 3);
          unint64_t v20 = (double *)(*(void *)&v22 + 16 * v9);
          uint64_t v21 = (long long *)((char *)&v88 + 8);
        }
        uint64_t v27 = (double *)(*(void *)&v22 + 16 * *(void *)v21);
        double v28 = *v17;
        double v29 = v17[1];
        double v30 = *v18 - *v17;
        double v31 = v18[1] - v29;
        double v32 = v30 * (*v20 - *v17) + v31 * (v20[1] - v29);
        double v33 = v30 * v30 + v31 * v31;
        BOOL v34 = v33 == 0.0;
        if (fabs(v33) < 2.22044605e-16) {
          BOOL v34 = 1;
        }
        double v35 = v32 / v33;
        if (v34) {
          double v35 = 1.79769313e308;
        }
        double v36 = (v30 * (*v27 - v28) + v31 * (v27[1] - v29)) / v33;
        if (v34) {
          double v36 = 1.79769313e308;
        }
        BOOL v23 = v35 <= v36;
        uint64_t v24 = *(void *)&v19 + 16 * v10;
        if (v12)
        {
LABEL_19:
          float64x2_t v87 = *(float64x2_t *)v24;
          uint64_t v25 = (float64x2_t *)(*(void *)&v19 + 16 * v88);
          uint64_t v26 = a1[3];
          if (v89) {
            goto LABEL_38;
          }
          goto LABEL_41;
        }
      }
      else
      {
        double v19 = *(double *)a1;
        BOOL v23 = 1;
        uint64_t v24 = *a1 + 16 * v10;
        if (v12) {
          goto LABEL_19;
        }
      }
      unint64_t v37 = (double *)(a1[3] + 16 * v9);
      float64x2_t v38 = *(float64x2_t *)(v24 + 16);
      float64x2_t v39 = vsubq_f64(v38, *(float64x2_t *)v24);
      v40.f64[0] = v39.f64[0];
      v40.f64[1] = v37[1] - *(double *)(v24 + 8);
      int8x16_t v41 = (int8x16_t)vmulq_f64(v39, v40);
      v40.f64[1] = v39.f64[1];
      v40.f64[0] = *v37 - *(double *)v24;
      float64x2_t v42 = vaddq_f64((float64x2_t)vextq_s8(v41, v41, 8uLL), vmulq_f64(v39, v40));
      BOOL v43 = fabs(v42.f64[1]) < 2.22044605e-16 || v42.f64[1] == 0.0;
      double v44 = v42.f64[0] / v42.f64[1];
      if (v43) {
        double v44 = 1.79769313e308;
      }
      if (v44 <= 0.0)
      {
        float64x2_t v87 = *(float64x2_t *)v24;
        uint64_t v25 = (float64x2_t *)(*(void *)&v19 + 16 * v88);
        uint64_t v26 = a1[3];
        if (v89) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v44 < 1.0) {
          float64x2_t v38 = vaddq_f64(*(float64x2_t *)v24, vmulq_n_f64(v39, v44));
        }
        float64x2_t v87 = v38;
        uint64_t v25 = (float64x2_t *)(*(void *)&v19 + 16 * v88);
        uint64_t v26 = a1[3];
        if (v89)
        {
LABEL_38:
          float64x2_t v86 = *v25;
          if (!v12) {
            goto LABEL_71;
          }
          goto LABEL_50;
        }
      }
LABEL_41:
      uint64_t v45 = (double *)(v26 + 16 * *((void *)&v88 + 1));
      float64x2_t v46 = v25[1];
      float64x2_t v47 = vsubq_f64(v46, *v25);
      v48.f64[0] = v47.f64[0];
      v48.f64[1] = v45[1] - v25->f64[1];
      int8x16_t v49 = (int8x16_t)vmulq_f64(v47, v48);
      v48.f64[1] = v47.f64[1];
      v48.f64[0] = *v45 - v25->f64[0];
      float64x2_t v50 = vaddq_f64((float64x2_t)vextq_s8(v49, v49, 8uLL), vmulq_f64(v47, v48));
      BOOL v51 = fabs(v50.f64[1]) < 2.22044605e-16 || v50.f64[1] == 0.0;
      double v52 = v50.f64[0] / v50.f64[1];
      if (v51) {
        double v52 = 1.79769313e308;
      }
      if (v52 <= 0.0)
      {
        float64x2_t v86 = *v25;
        if (!v12) {
          goto LABEL_71;
        }
      }
      else
      {
        if (v52 < 1.0) {
          float64x2_t v46 = vaddq_f64(*v25, vmulq_n_f64(v47, v52));
        }
        float64x2_t v86 = v46;
        if (!v12)
        {
LABEL_71:
          float64x2_t v85 = *(float64x2_t *)(v26 + 16 * v9);
          uint64_t v63 = *((void *)&v88 + 1);
          if (v89)
          {
LABEL_61:
            double v64 = (float64x2_t *)(v26 + 16 * v63);
            float64x2_t v65 = v64[1];
            float64x2_t v66 = vsubq_f64(v65, *v64);
            v67.f64[0] = v66.f64[0];
            v67.f64[1] = v25->f64[1] - v64->f64[1];
            int8x16_t v68 = (int8x16_t)vmulq_f64(v66, v67);
            v67.f64[1] = v66.f64[1];
            v67.f64[0] = v25->f64[0] - v64->f64[0];
            float64x2_t v69 = vaddq_f64((float64x2_t)vextq_s8(v68, v68, 8uLL), vmulq_f64(v66, v67));
            BOOL v70 = fabs(v69.f64[1]) < 2.22044605e-16 || v69.f64[1] == 0.0;
            double v71 = v69.f64[0] / v69.f64[1];
            if (v70) {
              double v71 = 1.79769313e308;
            }
            if (v71 <= 0.0)
            {
              float64x2_t v65 = *v64;
            }
            else if (v71 < 1.0)
            {
              float64x2_t v65 = vaddq_f64(*v64, vmulq_n_f64(v66, v71));
            }
            goto LABEL_73;
          }
          goto LABEL_72;
        }
      }
LABEL_50:
      double v53 = *(double *)v24;
      double v54 = *(double *)(v24 + 8);
      double v55 = (float64x2_t *)(v26 + 16 * v9);
      float64x2_t v56 = v55[1];
      float64x2_t v57 = vsubq_f64(v56, *v55);
      v58.f64[0] = v57.f64[0];
      v58.f64[1] = v54 - v55->f64[1];
      int8x16_t v59 = (int8x16_t)vmulq_f64(v57, v58);
      v58.f64[1] = v57.f64[1];
      v58.f64[0] = v53 - v55->f64[0];
      float64x2_t v60 = vaddq_f64((float64x2_t)vextq_s8(v59, v59, 8uLL), vmulq_f64(v57, v58));
      BOOL v61 = fabs(v60.f64[1]) < 2.22044605e-16 || v60.f64[1] == 0.0;
      double v62 = v60.f64[0] / v60.f64[1];
      if (v61) {
        double v62 = 1.79769313e308;
      }
      if (v62 <= 0.0)
      {
        float64x2_t v56 = *v55;
      }
      else if (v62 < 1.0)
      {
        float64x2_t v85 = vaddq_f64(*v55, vmulq_n_f64(v57, v62));
        uint64_t v63 = *((void *)&v88 + 1);
        if (v89) {
          goto LABEL_61;
        }
        goto LABEL_72;
      }
      float64x2_t v85 = v56;
      uint64_t v63 = *((void *)&v88 + 1);
      if (v89) {
        goto LABEL_61;
      }
LABEL_72:
      float64x2_t v65 = *(float64x2_t *)(v26 + 16 * v63);
LABEL_73:
      uint64_t v8 = v8 & v23;
      float64x2_t v84 = v65;
      double v72 = sub_43C48(v87.f64, v86.f64, v85.f64, v84.f64);
      *(void *)&v73.f64[0] = a1[13];
      v73.f64[1] = v74;
      *(void *)&v75.f64[1] = a1[14];
      v75.f64[0] = v72;
      int8x16_t v76 = (int8x16_t)vcgtq_f64(v73, v75);
      v73.f64[0] = v72;
      double v77 = sqrt((v87.f64[0] - v86.f64[0]) * (v87.f64[0] - v86.f64[0])+ (v87.f64[1] - v86.f64[1]) * (v87.f64[1] - v86.f64[1]))+ sqrt((v85.f64[0] - v84.f64[0]) * (v85.f64[0] - v84.f64[0])+ (v85.f64[1] - v84.f64[1]) * (v85.f64[1] - v84.f64[1]));
      *(int8x16_t *)(a1 + 13) = vbslq_s8(v76, (int8x16_t)v73, *(int8x16_t *)(a1 + 13));
      double v79 = *((double *)a1 + 15) + v78 * v77;
      double v80 = v77 + *((double *)a1 + 16);
      *((double *)a1 + 15) = v79;
      *((double *)a1 + 16) = v80;
      uint64_t v9 = *((void *)&v88 + 1);
      uint64_t v10 = v88;
      int v12 = v89;
      v7 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
      if (v7 == v13 && v11 == v82) {
        return v8;
      }
    }
  }
  return 1;
}

char *sub_3CFCC(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      size_t v13 = (char *)operator new(24 * v12);
    }
    else
    {
      size_t v13 = 0;
    }
    BOOL v14 = &v13[24 * v9];
    *(_OWORD *)BOOL v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    size_t v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 24);
        *(v14 - 8) = *(v5 - 8);
        *(_OWORD *)(v14 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      uint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
    size_t v7 = v5 + 24;
  }
  a1[1] = v7;
  return v7 - 24;
}

void sub_3D110(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    unint64_t v4 = (uint64_t *)operator new(8 * v3);
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      unint64_t v12 = v4;
      size_t v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        *unint64_t v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_3D224(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v93 = 0;
  unsigned __int8 v94 = 0;
  uint64_t v95 = 0;
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[8];
  uint64_t v8 = v6 + 24;
  if (v6 != v7 && v8 != v7)
  {
    do
    {
      int v47 = *(unsigned __int8 *)(v8 - 8);
      if (v47 == *(unsigned __int8 *)(v8 + 16))
      {
        if (*(unsigned char *)(v8 - 8))
        {
          uint64_t v48 = a1[3];
          uint64_t v50 = *(void *)(v8 - 24);
          uint64_t v49 = *(void *)(v8 - 16);
          BOOL v51 = (double *)(v48 + 16 * v49);
          double v52 = v51 + 2;
          uint64_t v53 = *a1;
          double v54 = (double *)(*a1 + 16 * v50);
          uint64_t v55 = v49;
          float64x2_t v56 = (void *)v8;
          uint64_t v57 = *a1;
        }
        else
        {
          uint64_t v53 = *a1;
          uint64_t v49 = *(void *)(v8 - 24);
          uint64_t v55 = *(void *)(v8 - 16);
          BOOL v51 = (double *)(*a1 + 16 * v49);
          double v52 = v51 + 2;
          uint64_t v48 = a1[3];
          double v54 = (double *)(v48 + 16 * v55);
          float64x2_t v56 = (void *)(v6 + 32);
          uint64_t v50 = v49;
          uint64_t v57 = v48;
        }
        float64x2_t v58 = (double *)(v57 + 16 * *v56);
        double v59 = v51[1];
        double v60 = *v52 - *v51;
        double v61 = v52[1] - v59;
        double v62 = v60 * v60 + v61 * v61;
        BOOL v63 = v62 == 0.0;
        if (fabs(v62) < 2.22044605e-16) {
          BOOL v63 = 1;
        }
        double v64 = (v60 * (*v54 - *v51) + v61 * (v54[1] - v59)) / v62;
        if (v63) {
          double v64 = 1.79769313e308;
        }
        double v65 = (v60 * (*v58 - *v51) + v61 * (v58[1] - v59)) / v62;
        if (v63) {
          double v65 = 1.79769313e308;
        }
        if (v47 != a2 && v64 > v65)
        {
          uint64_t v100 = v49;
          float64x2_t v66 = (double *)(v48 + 16 * v55);
          float64x2_t v67 = (double *)(v53 + 16 * v50);
          BOOL v68 = v47 == 0;
          if (v47) {
            float64x2_t v69 = (void *)v8;
          }
          else {
            float64x2_t v69 = (void *)(v6 + 32);
          }
          if (v68) {
            uint64_t v70 = v48;
          }
          else {
            uint64_t v70 = v53;
          }
          if (v68)
          {
            double v71 = v66;
          }
          else
          {
            uint64_t v53 = v48;
            double v71 = v67;
          }
          double v72 = (double *)(v53 + 16 * (v49 + 1));
          float64x2_t v73 = (double *)(v53 + 16 * v49);
          float64_t v74 = (double *)(v70 + 16 * *v69);
          double v75 = v73[1];
          double v76 = *v72;
          double v77 = *v72 - *v73;
          double v78 = v72[1] - v75;
          double v79 = v77 * v77 + v78 * v78;
          BOOL v80 = fabs(v79) < 2.22044605e-16 || v79 == 0.0;
          double v81 = (v77 * (*v71 - *v73) + v78 * (v71[1] - v75)) / v79;
          if (v80) {
            double v81 = 1.79769313e308;
          }
          double v99 = v81;
          double v82 = v76 - *v73;
          double v83 = v82 * (*v74 - *v73) + v78 * (v74[1] - v75);
          double v84 = v78 * v78 + v82 * v82;
          BOOL v85 = fabs(v84) < 2.22044605e-16 || v84 == 0.0;
          double v86 = v83 / v84;
          if (v85) {
            double v87 = 1.79769313e308;
          }
          else {
            double v87 = v86;
          }
          double v98 = v87;
          uint64_t v96 = 0x3FF0000000000000;
          uint64_t v97 = 0;
          long long v88 = (uint64_t *)&v99;
          if (v81 > 1.0) {
            long long v88 = &v96;
          }
          if (v81 >= 0.0) {
            BOOL v89 = v88;
          }
          else {
            BOOL v89 = &v97;
          }
          sub_3E794((uint64_t)&v93, &v100, v89);
          uint64_t v96 = 0x3FF0000000000000;
          uint64_t v97 = 0;
          unsigned int v90 = (uint64_t *)&v98;
          if (v87 > 1.0) {
            unsigned int v90 = &v96;
          }
          if (v87 >= 0.0) {
            int v91 = v90;
          }
          else {
            int v91 = &v97;
          }
          sub_3E794((uint64_t)&v93, &v100, v91);
        }
      }
      v6 += 24;
      v8 += 24;
    }
    while (v8 != v7);
  }
  sub_3D860(&v93);
  unint64_t v11 = v93;
  int v10 = v94;
  unint64_t v12 = v94 - 2;
  if (v93 != v94 && v12 > v93)
  {
    uint64_t v14 = v93;
    do
    {
      uint64_t v15 = *(void *)v14;
      *uint64_t v14 = *v12;
      *(void *)unint64_t v12 = v15;
      uint64_t v16 = *((void *)v14 + 1);
      v14[1] = v12[1];
      *((void *)v12 + 1) = v16;
      v14 += 2;
      v12 -= 2;
    }
    while (v14 < v12);
  }
  if (a2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = 3;
  }
  if (a2) {
    unint64_t v18 = a1;
  }
  else {
    unint64_t v18 = a1 + 3;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v19 = v18[1];
  uint64_t v20 = a1[v17];
  uint64_t v21 = (v19 - v20) >> 4;
  unint64_t v22 = v21 + (((char *)v10 - (char *)v11) >> 4);
  if (v22)
  {
    if (v22 >> 60) {
      sub_2E00();
    }
    BOOL v23 = (char *)operator new(16 * v22);
    *(void *)a3 = v23;
    *(void *)(a3 + 8) = v23;
    *(void *)(a3 + 16) = &v23[16 * v22];
    uint64_t v19 = v18[1];
    uint64_t v21 = (v19 - v20) >> 4;
  }
  if (v19 != v20)
  {
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = v24;
      sub_3BFF8((char **)a3, (_OWORD *)(a1[v17] + 16 * v24));
      unint64_t v11 = v93;
      uint64_t v26 = v94;
      ++v24;
      if (v93 != v94 && *((void *)v94 - 2) == v25)
      {
        do
        {
          float64x2_t v27 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a1[v17] + 16 * v25), 1.0 - *(v26 - 1)), vmulq_n_f64(*(float64x2_t *)(a1[v17] + 16 * v24), *(v26 - 1)));
          double v29 = *(char **)(a3 + 8);
          unint64_t v28 = *(void *)(a3 + 16);
          if ((unint64_t)v29 < v28)
          {
            *(float64x2_t *)double v29 = v27;
            double v30 = v29 + 16;
            goto LABEL_45;
          }
          double v31 = *(char **)a3;
          uint64_t v32 = (uint64_t)&v29[-*(void *)a3] >> 4;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v34 = v28 - (void)v31;
          if (v34 >> 3 > v33) {
            unint64_t v33 = v34 >> 3;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            float64x2_t v92 = v27;
            if (v35 >> 60) {
              sub_188D718();
            }
            double v36 = (char *)operator new(16 * v35);
            unint64_t v37 = (float64x2_t *)&v36[16 * v32];
            *unint64_t v37 = v92;
            double v30 = (char *)&v37[1];
            if (v29 == v31) {
              goto LABEL_43;
            }
          }
          else
          {
            double v36 = 0;
            unint64_t v37 = (float64x2_t *)(16 * v32);
            float64x2_t v38 = (float64x2_t *)(16 * v32);
            float64x2_t *v38 = v27;
            double v30 = (char *)&v38[1];
            if (v29 == v31) {
              goto LABEL_43;
            }
          }
          do
          {
            v37[-1] = *((float64x2_t *)v29 - 1);
            --v37;
            v29 -= 16;
          }
          while (v29 != v31);
          double v29 = *(char **)a3;
LABEL_43:
          *(void *)a3 = v37;
          *(void *)(a3 + 8) = v30;
          *(void *)(a3 + 16) = &v36[16 * v35];
          if (v29) {
            operator delete(v29);
          }
LABEL_45:
          *(void *)(a3 + 8) = v30;
          unint64_t v11 = v93;
          float64x2_t v39 = v94;
          uint64_t v26 = v94 - 2;
          unsigned __int8 v94 = v26;
          if (v93 == v26)
          {
            unint64_t v11 = v26;
            break;
          }
        }
        while (*((void *)v39 - 4) == v25);
      }
    }
    while (v24 != v21);
    float64x2_t v40 = *(double **)(a3 + 8);
    if (*(double **)a3 != v40)
    {
      int8x16_t v41 = (double *)(*(void *)a3 - 16);
      do
      {
        if (v41 + 4 == v40) {
          goto LABEL_111;
        }
        double v42 = v41[2];
        v41 += 2;
      }
      while (v42 != v41[2] || v41[1] != v41[3]);
      double v44 = v41 + 4;
      if (v41 + 4 == v40)
      {
        uint64_t v45 = v41 + 2;
        if (v41 + 2 == v40) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }
      do
      {
        if (*v41 != *v44 || v41[1] != v44[1])
        {
          *((_OWORD *)v41 + 1) = *(_OWORD *)v44;
          v41 += 2;
        }
        v44 += 2;
      }
      while (v44 != v40);
      uint64_t v45 = v41 + 2;
      if (v41 + 2 != *(double **)(a3 + 8)) {
LABEL_110:
      }
        *(void *)(a3 + 8) = v45;
    }
  }
LABEL_111:
  if (v11)
  {
    unsigned __int8 v94 = v11;
    operator delete(v11);
  }
}

void sub_3D7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_3D860(double **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 4);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_3E8C4(v2, v3, (uint64_t)&v42, v5, 1);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v8 = *a1;
    do
    {
      int v9 = v8;
      v8 += 2;
      if (v8 == v6) {
        return;
      }
      double v10 = *v9;
    }
    while (*(void *)v9 != *((void *)v9 + 2) || v9[1] != v9[3]);
    if (v9 + 4 != v6)
    {
      uint64_t v12 = 2;
      do
      {
        double v13 = v10;
        uint64_t v14 = &v8[v12];
        double v10 = v8[v12];
        double v15 = v8[v12 + 1];
        if (*(void *)&v13 != *(void *)&v10 || v9[1] != v15)
        {
          v9[2] = v10;
          v9 += 2;
          v9[1] = v15;
        }
        v12 += 2;
      }
      while (v14 + 2 != v6);
    }
    BOOL v23 = v9 + 2;
    uint64_t v24 = (char *)v6 - (char *)v23;
    if (v6 != v23)
    {
      int64_t v17 = (char *)v23 - (char *)v7;
      unint64_t v18 = (double *)((char *)v7 + (((char *)v23 - (char *)v7) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v19 = (double *)((char *)v18 + v24);
      if ((double *)((char *)v18 + v24) == v6)
      {
        a1[1] = v18;
        return;
      }
      unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFF0;
      unint64_t v21 = (char *)v6 - ((char *)v7 + v24 + (v17 & 0xFFFFFFFFFFFFFFF0)) - 16;
      if (v21 >= 0x1D0)
      {
        unint64_t v25 = v20 + (v21 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v26 = (unint64_t)v7 + (v25 | 8);
        float64x2_t v27 = (char *)v7 + v24 + v20;
        unint64_t v28 = &v27[v21 & 0xFFFFFFFFFFFFFFF0];
        unint64_t v29 = (unint64_t)v7 + (v20 | 8);
        unint64_t v30 = (unint64_t)v7 + v25 + 16;
        BOOL v32 = v29 < (unint64_t)(v28 + 16) && (unint64_t)(v27 + 8) < v30;
        if ((unint64_t)v19 >= v26 || v18 >= (double *)v28 + 1)
        {
          if (v32)
          {
            unint64_t v22 = v18;
          }
          else
          {
            uint64_t v34 = v24 >> 4;
            uint64_t v35 = (v21 >> 4) + 1;
            uint64_t v36 = 2 * (v35 & 0x1FFFFFFFFFFFFFFCLL);
            unint64_t v22 = &v18[v36];
            uint64_t v19 = (double *)((char *)v19 + v36 * 8);
            uint64_t v37 = 2 * v34;
            uint64_t v38 = v35 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *(_OWORD *)&v18[v37 + 2];
              long long v41 = *(_OWORD *)&v18[v37 + 4];
              long long v40 = *(_OWORD *)&v18[v37 + 6];
              *(_OWORD *)unint64_t v18 = *(_OWORD *)&v18[v37];
              *((_OWORD *)v18 + 1) = v39;
              *((_OWORD *)v18 + 2) = v41;
              *((_OWORD *)v18 + 3) = v40;
              v18 += 8;
              v38 -= 4;
            }
            while (v38);
            if (v35 == (v35 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_45;
            }
          }
        }
        else
        {
          unint64_t v22 = v18;
        }
      }
      else
      {
        unint64_t v22 = v18;
      }
      do
      {
        *unint64_t v22 = *v19;
        v22[1] = v19[1];
        v22 += 2;
        v19 += 2;
      }
      while (v19 != v6);
LABEL_45:
      a1[1] = v22;
    }
  }
}

int8x16_t sub_3DA90(uint64_t **a1, long long *a2, uint64_t *a3, int8x16_t result)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *a3;
  uint64_t v6 = **a1;
  if (*a3 < (unint64_t)((((*a1)[1] - v6) >> 4) - 1))
  {
    unint64_t v8 = a3[1];
    uint64_t v9 = v4[3];
    if (v8 < ((v4[4] - v9) >> 4) - 1)
    {
      if (*((unsigned char *)v4 + 48) || *((unsigned __int8 *)a2 + 16) != *((unsigned __int8 *)a3 + 16)) {
        goto LABEL_18;
      }
      if (*((unsigned char *)a2 + 16))
      {
        double v13 = (double *)(v9 + 16 * *((void *)a2 + 1));
        uint64_t v14 = v13 + 2;
        double v15 = a2;
        uint64_t v16 = **a1;
        uint64_t v17 = *a3;
      }
      else
      {
        double v15 = (void *)a2 + 1;
        double v13 = (double *)(v6 + 16 * *(void *)a2);
        uint64_t v14 = v13 + 2;
        uint64_t v16 = v4[3];
        uint64_t v17 = a3[1];
      }
      unint64_t v18 = (double *)(v16 + 16 * *v15);
      uint64_t v19 = (double *)(v16 + 16 * v17);
      double v20 = *v13;
      double v21 = v13[1];
      double v22 = *v14 - *v13;
      double v23 = v14[1] - v21;
      double v24 = v22 * (*v18 - *v13) + v23 * (v18[1] - v21);
      double v25 = v22 * v22 + v23 * v23;
      BOOL v26 = v25 == 0.0;
      if (fabs(v25) < 2.22044605e-16) {
        BOOL v26 = 1;
      }
      double v27 = v24 / v25;
      if (v26) {
        double v27 = 1.79769313e308;
      }
      *(double *)result.i64 = (v22 * (*v19 - v20) + v23 * (v19[1] - v21)) / v25;
      if (v26) {
        *(double *)result.i64 = 1.79769313e308;
      }
      if (v27 <= *(double *)result.i64)
      {
LABEL_18:
        unint64_t v28 = (float64x2_t *)(v6 + 16 * *(void *)a2);
        if (*((unsigned char *)a2 + 16))
        {
          double v29 = v28->f64[1];
          v81.f64[0] = v28->f64[0];
          v81.f64[1] = v29;
          unint64_t v30 = (float64x2_t *)(v9 + 16 * *((void *)a2 + 1));
          float64x2_t v31 = v30[1];
          float64x2_t v32 = vsubq_f64(v31, *v30);
          v33.f64[0] = v32.f64[0];
          v33.f64[1] = v29 - v30->f64[1];
          int8x16_t v34 = (int8x16_t)vmulq_f64(v32, v33);
          v33.f64[1] = v32.f64[1];
          v33.f64[0] = v81.f64[0] - v30->f64[0];
          float64x2_t v35 = vaddq_f64((float64x2_t)vextq_s8(v34, v34, 8uLL), vmulq_f64(v32, v33));
          BOOL v36 = fabs(v35.f64[1]) < 2.22044605e-16 || v35.f64[1] == 0.0;
          double v37 = v35.f64[0] / v35.f64[1];
          if (v36) {
            double v37 = 1.79769313e308;
          }
          if (v37 <= 0.0)
          {
            float64x2_t v31 = *v30;
          }
          else if (v37 < 1.0)
          {
            float64x2_t v80 = vaddq_f64(*v30, vmulq_n_f64(v32, v37));
            uint64_t v38 = (float64x2_t *)(v6 + 16 * v5);
            if (!*((unsigned char *)a3 + 16)) {
              goto LABEL_50;
            }
LABEL_40:
            double v47 = v38->f64[1];
            v79.f64[0] = v38->f64[0];
            v79.f64[1] = v47;
            uint64_t v48 = (float64x2_t *)(v9 + 16 * v8);
            float64x2_t v49 = v48[1];
            float64x2_t v50 = vsubq_f64(v49, *v48);
            v51.f64[0] = v50.f64[0];
            v51.f64[1] = v47 - v48->f64[1];
            int8x16_t v52 = (int8x16_t)vmulq_f64(v50, v51);
            v51.f64[1] = v50.f64[1];
            v51.f64[0] = v79.f64[0] - v48->f64[0];
            float64x2_t v53 = vaddq_f64((float64x2_t)vextq_s8(v52, v52, 8uLL), vmulq_f64(v50, v51));
            BOOL v54 = fabs(v53.f64[1]) < 2.22044605e-16 || v53.f64[1] == 0.0;
            double v55 = v53.f64[0] / v53.f64[1];
            if (v54) {
              double v55 = 1.79769313e308;
            }
            if (v55 <= 0.0)
            {
              float64x2_t v49 = *v48;
            }
            else if (v55 < 1.0)
            {
              float64x2_t v49 = vaddq_f64(*v48, vmulq_n_f64(v50, v55));
            }
            goto LABEL_60;
          }
          float64x2_t v80 = v31;
          uint64_t v38 = (float64x2_t *)(v6 + 16 * v5);
          if (*((unsigned char *)a3 + 16)) {
            goto LABEL_40;
          }
        }
        else
        {
          float64x2_t v40 = *v28;
          float64x2_t v39 = v28[1];
          float64x2_t v41 = vsubq_f64(v39, *v28);
          float64x2_t v42 = vsubq_f64(*(float64x2_t *)(v9 + 16 * *((void *)a2 + 1)), *v28);
          float64x2_t v43 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v41, 8uLL));
          v42.f64[1] = v41.f64[1];
          float64x2_t v44 = vaddq_f64(v43, vmulq_f64(v41, v42));
          BOOL v45 = fabs(v44.f64[1]) < 2.22044605e-16 || v44.f64[1] == 0.0;
          double v46 = v44.f64[0] / v44.f64[1];
          if (v45) {
            double v46 = 1.79769313e308;
          }
          if (v46 > 0.0)
          {
            if (v46 < 1.0) {
              float64x2_t v39 = vaddq_f64(v40, vmulq_n_f64(v41, v46));
            }
            float64x2_t v80 = *(float64x2_t *)(v9 + 16 * *((void *)a2 + 1));
            float64x2_t v81 = v39;
            uint64_t v38 = (float64x2_t *)(v6 + 16 * v5);
            if (!*((unsigned char *)a3 + 16)) {
              goto LABEL_50;
            }
            goto LABEL_40;
          }
          float64x2_t v80 = *(float64x2_t *)(v9 + 16 * *((void *)a2 + 1));
          float64x2_t v81 = v40;
          uint64_t v38 = (float64x2_t *)(v6 + 16 * v5);
          if (*((unsigned char *)a3 + 16)) {
            goto LABEL_40;
          }
        }
LABEL_50:
        float64x2_t v49 = *(float64x2_t *)(v9 + 16 * v8);
        float64x2_t v56 = v38[1];
        float64x2_t v57 = vsubq_f64(v56, *v38);
        float64x2_t v58 = vsubq_f64(v49, *v38);
        float64x2_t v59 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v57, 8uLL));
        v58.f64[1] = v57.f64[1];
        float64x2_t v60 = vaddq_f64(v59, vmulq_f64(v57, v58));
        BOOL v61 = fabs(v60.f64[1]) < 2.22044605e-16 || v60.f64[1] == 0.0;
        double v62 = v60.f64[0] / v60.f64[1];
        if (v61) {
          double v62 = 1.79769313e308;
        }
        if (v62 <= 0.0)
        {
          float64x2_t v79 = *v38;
        }
        else
        {
          if (v62 < 1.0) {
            float64x2_t v56 = vaddq_f64(*v38, vmulq_n_f64(v57, v62));
          }
          float64x2_t v79 = v56;
        }
LABEL_60:
        float64x2_t v78 = v49;
        *(double *)result.i64 = sub_43C48(v81.f64, v79.f64, v80.f64, v78.f64);
        uint64_t v64 = *(void *)*a1[1];
        uint64_t v65 = *(void *)(v64 + 24 * *(void *)a2)
            + 112 * *((void *)a2 + 1)
            + 56 * *((unsigned __int8 *)a2 + 16);
        float64x2_t v66 = vsubq_f64(v80, v78);
        double v67 = sqrt((v81.f64[0] - v79.f64[0]) * (v81.f64[0] - v79.f64[0])+ (v81.f64[1] - v79.f64[1]) * (v81.f64[1] - v79.f64[1]))+ sqrt(vaddvq_f64(vmulq_f64(v66, v66)));
        double v69 = v68 * v67 + *(double *)(v65 + 40);
        uint64_t v70 = *(void *)(v64 + 24 * *a3) + 112 * a3[1];
        if (v69 < *(double *)(v70 + 56 * *((unsigned __int8 *)a3 + 16) + 40))
        {
          uint64_t v71 = v65 + 24;
          uint64_t v72 = v70 + 56 * *((unsigned __int8 *)a3 + 16);
          v73.f64[0] = *(float64_t *)v71;
          v73.f64[1] = v63;
          v74.f64[1] = *(float64_t *)(v71 + 8);
          *(void *)&v74.f64[0] = result.i64[0];
          double v75 = v67 + *(double *)(v71 + 24);
          int8x16_t v76 = (int8x16_t)vcgtq_f64(v73, v74);
          *(void *)&v73.f64[0] = result.i64[0];
          double result = vbslq_s8(v76, (int8x16_t)v73, *(int8x16_t *)v71);
          long long v77 = *a2;
          *(void *)(v72 + 16) = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v72 = v77;
          *(int8x16_t *)(v72 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
          *(double *)(v72 + 40) = v69;
          *(double *)(v72 + 48) = v75;
        }
      }
    }
  }
  return result;
}

char *sub_3DF60(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  uint64_t v12 = *(long long **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    unint64_t v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60) {
      sub_2E00();
    }
    uint64_t v14 = v11 - (void)v5;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= v13) {
      uint64_t v15 = v13;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 60) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(16 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    BOOL v26 = &v17[16 * (v6 >> 4)];
    uint64_t v27 = 16 * a5;
    unint64_t v28 = &v26[16 * a5];
    double v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)double v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    float64x2_t v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      float64x2_t v33 = v26;
      float64x2_t v35 = &v17[16 * v16];
      size_t v36 = (char *)v12 - v7;
      if (v12 == (long long *)v7) {
        goto LABEL_33;
      }
    }
    else
    {
      float64x2_t v32 = v7;
      float64x2_t v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      int8x16_t v34 = *(unsigned char **)(a1 + 8);
      float64x2_t v35 = &v17[16 * v16];
      size_t v36 = v34 - v7;
      if (v34 == v7) {
        goto LABEL_33;
      }
    }
    memmove(v28, v7, v36);
LABEL_33:
    double v37 = *(char **)a1;
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = &v28[v36];
    *(void *)(a1 + 16) = v35;
    if (v37) {
      operator delete(v37);
    }
    return v26;
  }
  uint64_t v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    uint64_t v19 = &__src[16 * a5];
    double v21 = *(char **)(a1 + 8);
    double v22 = &v7[16 * a5];
    double v23 = &v12[-a5];
    double v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      }
      if (v19 != v9) {
        memmove(v7, v9, v19 - v9);
      }
      return v7;
    }
LABEL_19:
    double v24 = v21;
    do
    {
      long long v25 = *v23++;
      *(_OWORD *)double v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  uint64_t v19 = &__src[16 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  }
  double v21 = (char *)v12 + v20;
  *(void *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    double v22 = &v7[16 * a5];
    double v23 = (long long *)&v21[-16 * a5];
    double v24 = (char *)v12 + v20;
    if (v23 >= v12) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  return v7;
}

void sub_3E194(void **a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  unint64_t v10 = (unint64_t)a1[1];
  uint64_t v11 = a1[2];
  unint64_t v12 = (void)v11 << 6;
  if (v10 < (void)v11 << 6)
  {
    unint64_t v13 = (char *)*a1;
    uint64_t v14 = (char *)*a1 + 8 * (v10 >> 6);
    unint64_t v15 = (unint64_t)a1[1] & 0x3F;
    unint64_t v16 = v10 + 1;
    a1[1] = (void *)v16;
    uint64_t v17 = (unint64_t *)&v13[8 * (v16 >> 6)];
    int v18 = v16 & 0x3F;
    if (v18 == v15)
    {
      uint64_t v19 = a3;
      uint64_t v20 = v15 - a3 + 8 * ((void)v14 - a2);
      if (v20 >= 1)
      {
        if (v15)
        {
          if (v20 >= v15) {
            uint64_t v21 = v15;
          }
          else {
            uint64_t v21 = v15 - a3 + 8 * ((void)v14 - a2);
          }
          v20 -= v21;
          unint64_t v22 = (-1 << (v15 - v21)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
          *uint64_t v17 = *v17 & ~v22 | *v14 & v22;
        }
        if (v20 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v20 + 63;
        }
        uint64_t v24 = v23 >> 6;
        size_t v25 = 8 * (v23 >> 6);
        BOOL v26 = &v17[v25 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v27 = &v14[v25 / 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v20 + 63) >= 0x7F) {
          memmove(&v17[v25 / 0xFFFFFFFFFFFFFFF8], &v14[v25 / 0xFFFFFFFFFFFFFFF8], v25);
        }
        if (v20 - (v24 << 6) >= 1) {
          *(v26 - 1) = *(v26 - 1) & ~(-1 << (((_BYTE)v24 << 6) - v20)) | *(v27 - 1) & (-1 << (((_BYTE)v24 << 6) - v20));
        }
      }
      unint64_t v28 = (char *)*a1;
      uint64_t v29 = v19 + 8 * (a2 - (void)*a1);
      if (v29 >= 0) {
        goto LABEL_17;
      }
    }
    else
    {
      std::string __dst = v17;
      LODWORD(v59) = v18;
      sub_3E594(a2, a3, v14, v15, (uint64_t)&__dst, (uint64_t)&v60);
      unint64_t v28 = (char *)*a1;
      uint64_t v29 = a3 + 8 * (a2 - (void)*a1);
      if (v29 >= 0)
      {
LABEL_17:
        unint64_t v30 = (unint64_t)v29 >> 6;
LABEL_48:
        float64x2_t v35 = &v28[8 * v30];
        LOBYTE(v39) = v29 & 0x3F;
        *(void *)a5 = v35;
        *(_DWORD *)(a5 + 8) = v29 & 0x3F;
        goto LABEL_52;
      }
    }
    uint64_t v52 = v29 - 63;
    if (v29 - 63 < 0) {
      uint64_t v52 = v29;
    }
    unint64_t v30 = v52 >> 6;
    goto LABEL_48;
  }
  std::string __dst = 0;
  long long v59 = 0uLL;
  if ((uint64_t)(v10 + 1) < 0) {
    sub_2E00();
  }
  unint64_t v31 = (void)v11 << 7;
  unint64_t v32 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v31 > v32) {
    unint64_t v32 = v31;
  }
  if (v12 <= 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v33 = v32;
  }
  else {
    unint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_3D110((uint64_t)&__dst, v33);
  int8x16_t v34 = *a1;
  *(void *)&long long v59 = (char *)a1[1] + 1;
  float64x2_t v35 = (char *)__dst;
  uint64_t v36 = a3;
  uint64_t v37 = a3 + 8 * (a2 - (void)v34);
  if (v37 < 1) {
    goto LABEL_29;
  }
  unint64_t v38 = (unint64_t)v37 >> 6;
  if ((unint64_t)v37 >= 0x40) {
    memmove(__dst, v34, 8 * v38);
  }
  v35 += 8 * v38;
  if ((v37 & 0x3F) != 0)
  {
    *(void *)float64x2_t v35 = *(void *)v35 & ~(0xFFFFFFFFFFFFFFFFLL >> -((a3 + 8 * (a2 - (_BYTE)v34)) & 0x3F)) | *((void *)v34 + v38) & (0xFFFFFFFFFFFFFFFFLL >> -((a3 + 8 * (a2 - (_BYTE)v34)) & 0x3F));
    int v39 = (a3 + 8 * (a2 - v34)) & 0x3F;
  }
  else
  {
LABEL_29:
    int v39 = 0;
  }
  *(void *)a5 = v35;
  *(_DWORD *)(a5 + 8) = v39;
  unint64_t v40 = (unint64_t)a1[1];
  float64x2_t v41 = (char *)*a1 + 8 * (v40 >> 6);
  unint64_t v42 = v40 & 0x3F;
  float64x2_t v43 = (unint64_t *)((char *)__dst + 8 * ((unint64_t)v59 >> 6));
  if ((v59 & 0x3F) == (v40 & 0x3F))
  {
    uint64_t v44 = v42 - a3 + 8 * ((void)v41 - a2);
    if (v44 >= 1)
    {
      if ((v40 & 0x3F) != 0)
      {
        if (v44 >= v42) {
          uint64_t v45 = v40 & 0x3F;
        }
        else {
          uint64_t v45 = v42 - v36 + 8 * ((void)v41 - a2);
        }
        v44 -= v45;
        unint64_t v46 = (-1 << (v42 - v45)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v42);
        unint64_t *v43 = *v43 & ~v46 | *v41 & v46;
      }
      if (v44 >= 0) {
        uint64_t v47 = v44;
      }
      else {
        uint64_t v47 = v44 + 63;
      }
      uint64_t v48 = v47 >> 6;
      size_t v49 = 8 * (v47 >> 6);
      float64x2_t v50 = &v43[v49 / 0xFFFFFFFFFFFFFFF8];
      float64x2_t v51 = &v41[v49 / 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v44 + 63) >= 0x7F) {
        memmove(&v43[v49 / 0xFFFFFFFFFFFFFFF8], &v41[v49 / 0xFFFFFFFFFFFFFFF8], v49);
      }
      if (v44 - (v48 << 6) >= 1) {
        *(v50 - 1) = *(v50 - 1) & ~(-1 << (((_BYTE)v48 << 6) - v44)) | *(v51 - 1) & (-1 << (((_BYTE)v48 << 6) - v44));
      }
    }
  }
  else
  {
    float64x2_t v60 = (char *)__dst + 8 * ((unint64_t)v59 >> 6);
    int v61 = v59 & 0x3F;
    sub_3E594(a2, a3, v41, v42, (uint64_t)&v60, (uint64_t)v57);
  }
  float64x2_t v53 = *a1;
  *a1 = __dst;
  std::string __dst = v53;
  long long v54 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a1 + 1) = v59;
  long long v59 = v54;
  if (v53) {
    operator delete(v53);
  }
LABEL_52:
  uint64_t v55 = 1 << v39;
  if (*a4) {
    uint64_t v56 = *(void *)v35 | v55;
  }
  else {
    uint64_t v56 = *(void *)v35 & ~v55;
  }
  *(void *)float64x2_t v35 = v56;
}

void sub_3E578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_3E594@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
  if (v6 <= 0)
  {
    uint64_t v11 = *(unint64_t **)a5;
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
LABEL_16:
    *(void *)a6 = v11;
    *(_DWORD *)(a6 + 8) = v9;
    return result;
  }
  if (a4)
  {
    if (v6 >= (unint64_t)a4) {
      int64_t v7 = a4;
    }
    else {
      int64_t v7 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
    }
    v6 -= v7;
    unint64_t v8 = (-1 << (a4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4) & *a3;
    unint64_t v9 = *(unsigned int *)(a5 + 8);
    if (v7 >= v9) {
      int64_t v10 = *(unsigned int *)(a5 + 8);
    }
    else {
      int64_t v10 = v7;
    }
    uint64_t v11 = *(unint64_t **)a5;
    if (v10)
    {
      unint64_t v12 = v8 >> (a4 - v9);
      if (v9 > a4) {
        unint64_t v12 = v8 << (v9 - a4);
      }
      *uint64_t v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      v7 -= v10;
    }
    if (v7 >= 1)
    {
      uint64_t v13 = *--v11;
      *(void *)a5 = v11;
      LODWORD(v9) = -(int)v7 & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      *uint64_t v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a4 + (-(char)v7 & 0x3F)));
    }
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
    uint64_t v11 = *(unint64_t **)a5;
  }
  char v14 = 64 - v9;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (v6 >= 64)
  {
    unint64_t v16 = *v11;
    do
    {
      unint64_t v17 = v6;
      unint64_t v19 = *--a3;
      unint64_t v18 = v19;
      double result = v19 >> v14;
      *uint64_t v11 = v16 & ~v15 | (v19 >> v14);
      uint64_t v20 = *--v11;
      unint64_t v16 = v20 & v15 | (v18 << v9);
      *uint64_t v11 = v16;
      int64_t v6 = v17 - 64;
    }
    while (v17 > 0x7F);
    *(void *)a5 = v11;
  }
  if (v6 < 1) {
    goto LABEL_16;
  }
  unint64_t v21 = *(a3 - 1) & (-1 << -(char)v6);
  int64_t v22 = v6 >= (unint64_t)v9 ? v9 : v6;
  *uint64_t v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
  LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
  *(_DWORD *)(a5 + 8) = v9;
  if (v6 - v22 < 1) {
    goto LABEL_16;
  }
  uint64_t v24 = *(v11 - 1);
  uint64_t v23 = v11 - 1;
  *(void *)a5 = v23;
  *(_DWORD *)(a5 + 8) = (v22 - v6) & 0x3F;
  *uint64_t v23 = v24 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
  *(void *)a6 = v23;
  *(_DWORD *)(a6 + 8) = (v22 - v6) & 0x3F;
  return result;
}

void *sub_3E794(uint64_t a1, void *a2, void *a3)
{
  int64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    void *v7 = *a2;
    v7[1] = *a3;
    unint64_t v8 = v7 + 2;
    goto LABEL_13;
  }
  unint64_t v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  unint64_t v16 = (char *)operator new(16 * v14);
  unint64_t v17 = &v16[16 * v10];
  unint64_t v18 = &v16[v15];
  *(void *)unint64_t v17 = *a2;
  *((void *)v17 + 1) = *a3;
  unint64_t v8 = v17 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    unint64_t v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v17 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

void sub_3E8C4(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5)
{
LABEL_1:
  unint64_t v11 = a2 - 2;
  uint64_t v12 = (unint64_t *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  int v68 = a5;
  while (1)
  {
    a1 = (double *)v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *((void *)a2 - 2);
          double v28 = *a1;
          if (v27 >= *(void *)a1)
          {
            if (*(void *)&v28 < v27) {
              return;
            }
            double v30 = *(a2 - 1);
            double v29 = a1[1];
            if (v30 >= v29) {
              return;
            }
          }
          else
          {
            double v29 = a1[1];
            double v30 = *(a2 - 1);
          }
          *(void *)a1 = v27;
          *(a2 - 2) = v28;
          a1[1] = v30;
          *(a2 - 1) = v29;
          return;
        case 3uLL:
          sub_3EEB0(a1, a1 + 2, v11);
          return;
        case 4uLL:
          sub_3EEB0(a1, a1 + 2, a1 + 4);
          unint64_t v31 = *((void *)a2 - 2);
          unint64_t v32 = *((void *)a1 + 4);
          if (v31 >= v32)
          {
            if (v32 < v31) {
              return;
            }
            double v34 = *(a2 - 1);
            double v33 = a1[5];
            if (v34 >= v33) {
              return;
            }
          }
          else
          {
            double v33 = a1[5];
            double v34 = *(a2 - 1);
          }
          *((void *)a1 + 4) = v31;
          *((void *)a2 - 2) = v32;
          a1[5] = v34;
          *(a2 - 1) = v33;
          unint64_t v35 = *((void *)a1 + 4);
          unint64_t v36 = *((void *)a1 + 2);
          if (v35 >= v36)
          {
            if (v36 < v35) {
              return;
            }
            double v38 = a1[5];
            double v37 = a1[3];
            if (v38 >= v37) {
              return;
            }
          }
          else
          {
            double v37 = a1[3];
            double v38 = a1[5];
          }
          *((void *)a1 + 2) = v35;
          *((void *)a1 + 4) = v36;
          a1[3] = v38;
          a1[5] = v37;
          double v39 = *a1;
          if (v35 >= *(void *)a1)
          {
            if (*(void *)&v39 < v35) {
              return;
            }
            double v40 = a1[1];
            if (v38 >= v40) {
              return;
            }
          }
          else
          {
            double v40 = a1[1];
          }
          *(void *)a1 = v35;
          a1[2] = v39;
          a1[1] = v38;
          a1[3] = v40;
          return;
        case 5uLL:
          sub_3F5F4(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)v11);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (a1 != a2)
      {
        unint64_t v56 = (v15 - 2) >> 1;
        unint64_t v57 = v56 + 1;
        float64x2_t v58 = (unint64_t *)&a1[2 * v56];
        do
        {
          sub_3F828((uint64_t)a1, a3, v14 >> 4, v58);
          v58 -= 2;
          --v57;
        }
        while (v57);
        unint64_t v60 = (unint64_t)v14 >> 4;
        do
        {
          double v59 = sub_3F974((unint64_t *)a1, (uint64_t)a2, v59, a3, v60);
          a2 -= 2;
        }
        while (v60-- > 2);
      }
      return;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = &a1[2 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x801)
    {
      sub_3EEB0(v18, a1, v11);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_3EEB0(a1, v18, v11);
      unint64_t v19 = v11;
      uint64_t v20 = &a1[2 * v17];
      sub_3EEB0(a1 + 2, v20 - 2, a2 - 4);
      sub_3EEB0(a1 + 4, &a1[2 * v17 + 2], a2 - 6);
      sub_3EEB0(v20 - 2, v18, &a1[2 * v17 + 2]);
      double v21 = *a1;
      *a1 = *v18;
      *unint64_t v18 = v21;
      uint64_t v22 = *((void *)a1 + 1);
      a1[1] = v20[1];
      *((void *)v20 + 1) = v22;
      unint64_t v11 = v19;
      a5 = v68;
      if (v68) {
        goto LABEL_14;
      }
    }
    unint64_t v23 = *((void *)a1 - 2);
    if (v23 >= *(void *)a1 && (*(void *)a1 < v23 || *(a1 - 1) >= a1[1]))
    {
      uint64_t v12 = sub_3F014((unint64_t *)a1, a2);
LABEL_19:
      a5 = 0;
      a4 = -v16;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v24 = sub_3F174(a1, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_3F2C4(a1, v24);
    uint64_t v12 = (unint64_t *)(v24 + 2);
    if (sub_3F2C4(v24 + 2, a2))
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_17:
      sub_3E8C4(a1, v24, a3, -v16, a5 & 1);
      uint64_t v12 = (unint64_t *)(v24 + 2);
      goto LABEL_19;
    }
  }
  float64x2_t v41 = a1 + 2;
  BOOL v43 = a1 == a2 || v41 == a2;
  if (a5)
  {
    if (v43) {
      return;
    }
    uint64_t v44 = 0;
    uint64_t v45 = a1;
LABEL_49:
    unint64_t v46 = v45;
    uint64_t v45 = v41;
    unint64_t v47 = *((void *)v46 + 2);
    double v48 = *v46;
    if (v47 >= *(void *)v46)
    {
      if (*(void *)&v48 < v47) {
        goto LABEL_48;
      }
      double v49 = v46[3];
      double v50 = v46[1];
      if (v49 >= v50) {
        goto LABEL_48;
      }
    }
    else
    {
      double v49 = v46[3];
      double v50 = v46[1];
    }
    v46[2] = v48;
    v45[1] = v50;
    float64x2_t v51 = a1;
    if (v46 == a1) {
      goto LABEL_47;
    }
    uint64_t v52 = v44;
    while (1)
    {
      unint64_t v55 = *(void *)((char *)a1 + v52 - 16);
      if (v47 >= v55)
      {
        if (v55 < v47)
        {
          float64x2_t v51 = (double *)((char *)a1 + v52);
          goto LABEL_47;
        }
        double v53 = *(double *)((char *)a1 + v52 - 8);
        if (v49 >= v53)
        {
          float64x2_t v51 = v46;
LABEL_47:
          *(void *)float64x2_t v51 = v47;
          v51[1] = v49;
LABEL_48:
          float64x2_t v41 = v45 + 2;
          v44 += 16;
          if (v45 + 2 == a2) {
            return;
          }
          goto LABEL_49;
        }
      }
      else
      {
        double v53 = *(double *)((char *)a1 + v52 - 8);
      }
      v46 -= 2;
      long long v54 = (double *)((char *)a1 + v52);
      *(void *)long long v54 = v55;
      v54[1] = v53;
      v52 -= 16;
      if (!v52)
      {
        float64x2_t v51 = a1;
        goto LABEL_47;
      }
    }
  }
  if (!v43)
  {
    for (double i = a1 + 1; ; i += 2)
    {
      float64_t v63 = a1;
      a1 = v41;
      unint64_t v64 = *((void *)v63 + 2);
      unint64_t v65 = *(void *)v63;
      if (v64 < *(void *)v63) {
        break;
      }
      if (v65 >= v64)
      {
        double v66 = v63[3];
        if (v66 < v63[1]) {
          goto LABEL_83;
        }
      }
LABEL_78:
      float64x2_t v41 = a1 + 2;
      if (a1 + 2 == a2) {
        return;
      }
    }
    double v66 = v63[3];
LABEL_83:
    for (unint64_t j = i; ; j -= 2)
    {
      *((void *)j + 1) = v65;
      j[2] = *j;
      unint64_t v65 = *((void *)j - 3);
      if (v64 >= v65 && (v65 < v64 || v66 >= *(j - 2))) {
        break;
      }
    }
    *((void *)j - 1) = v64;
    *unint64_t j = v66;
    goto LABEL_78;
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v25 = a2 - 32;
          BOOL v26 = *((_DWORD *)a2 - 8);
          if (v26 < *v11 || (*v11 >= v26 ? (unint64_t v27 = *((_DWORD *)a2 - 6) >= v11[2]) : (unint64_t v27 = 1), !v27))
          {
            *(_OWORD *)double v67 = *(_OWORD *)v11;
            *(_OWORD *)&v67[16] = *((_OWORD *)v11 + 1);
            double v28 = *(_OWORD *)v25;
            *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)(a2 - 23);
            *(_OWORD *)unint64_t v11 = v28;
            *(_OWORD *)char v25 = *(_OWORD *)v67;
            *(_OWORD *)(a2 - 23) = *(_OWORD *)&v67[9];
          }
          break;
        case 3uLL:
          sub_4F01C((long long *)v11, (int *)v11 + 8, (long long *)a2 - 2);
          break;
        case 4uLL:
          double v29 = v11 + 8;
          double v30 = v11 + 16;
          sub_4F01C((long long *)v11, (int *)v11 + 8, (long long *)v11 + 4);
          unint64_t v31 = a2 - 32;
          unint64_t v32 = *((_DWORD *)a2 - 8);
          double v33 = v11[16];
          if (v32 < v33 || (v33 >= v32 ? (double v34 = *((_DWORD *)a2 - 6) >= v11[18]) : (double v34 = 1), !v34))
          {
            *(_OWORD *)int v68 = *v30;
            unint64_t v35 = *v30;
            *(_OWORD *)&v68[16] = *((_OWORD *)v11 + 5);
            unint64_t v36 = *(_OWORD *)(a2 - 23);
            float64x2_t *v30 = *(_OWORD *)v31;
            *(_OWORD *)((char *)v11 + 73) = v36;
            *(_OWORD *)unint64_t v31 = v35;
            *(_OWORD *)(a2 - 23) = *(_OWORD *)&v68[9];
            if (*(_DWORD *)v30 < *(_DWORD *)v29 || *(_DWORD *)v29 >= *(_DWORD *)v30 && v11[18] < v11[10])
            {
              *(_OWORD *)double v69 = *v29;
              double v37 = *v29;
              *(_OWORD *)&v69[16] = *((_OWORD *)v11 + 3);
              *double v29 = *v30;
              *(_OWORD *)((char *)v11 + 41) = *(_OWORD *)((char *)v11 + 73);
              float64x2_t *v30 = v37;
              *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)&v69[9];
              double v38 = v11[8];
              if (v38 < *v11 || *v11 >= v38 && v11[10] < v11[2])
              {
                *(_OWORD *)uint64_t v70 = *(_OWORD *)v11;
                *(_OWORD *)&v70[16] = *((_OWORD *)v11 + 1);
                *(_OWORD *)unint64_t v11 = *v29;
                *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v11 + 41);
                *double v29 = *(_OWORD *)v70;
                *(_OWORD *)((char *)v11 + 41) = *(_OWORD *)&v70[9];
              }
            }
          }
          break;
        case 5uLL:
          sub_4F8F0((uint64_t)v11, (long long *)v11 + 2, (long long *)v11 + 4, (long long *)v11 + 6, (long long *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767)
    {
      double v39 = (char *)(v11 + 8);
      float64x2_t v41 = v11 == (unsigned int *)a2 || v39 == a2;
      if (a5)
      {
        if (v41) {
          return;
        }
        unint64_t v42 = 0;
        BOOL v43 = v11;
        while (2)
        {
          uint64_t v44 = v39;
          uint64_t v45 = v43[8];
          if (v45 < *v43)
          {
            unint64_t v46 = v43[10];
            goto LABEL_64;
          }
          unint64_t v46 = v43[10];
          if (*v43 >= v45 && v46 < v43[2])
          {
LABEL_64:
            double v48 = v43[9];
            uint64_t v71 = *(_OWORD *)(v43 + 11);
            *uint64_t v44 = *(_OWORD *)v43;
            *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v43 + 9);
            double v49 = v11;
            if (v43 != v11)
            {
              double v50 = v42;
              while (1)
              {
                float64x2_t v51 = (_OWORD *)((char *)v11 + v50);
                uint64_t v52 = *(unsigned int *)((char *)v11 + v50 - 32);
                if (v45 >= v52 && (v52 < v45 || v46 >= *((_DWORD *)v51 - 6))) {
                  break;
                }
                double *v51 = *(_OWORD *)((char *)v11 + v50 - 32);
                *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)((char *)v11 + v50 - 23);
                v50 -= 32;
                if (!v50)
                {
                  double v49 = v11;
                  goto LABEL_56;
                }
              }
              double v49 = (unsigned int *)((char *)v11 + v50);
            }
LABEL_56:
            *double v49 = v45;
            v49[1] = v48;
            v49[2] = v46;
            *(void *)(v49 + 3) = v71;
            *(void *)((char *)v49 + 17) = *(void *)((char *)&v71 + 5);
          }
          double v39 = (char *)(v44 + 2);
          v42 += 32;
          BOOL v43 = (unsigned int *)v44;
          if (v44 + 2 == (_OWORD *)a2) {
            return;
          }
          continue;
        }
      }
      if (v41) {
        return;
      }
      while (2)
      {
        unint64_t v57 = v39;
        float64x2_t v58 = a1[8];
        if (v58 >= *a1)
        {
          double v59 = a1[10];
          if (*a1 >= v58 && v59 < a1[2]) {
            goto LABEL_90;
          }
        }
        else
        {
          double v59 = a1[10];
LABEL_90:
          int v61 = a1[9];
          uint64_t v72 = *(_OWORD *)(a1 + 11);
          do
          {
            do
            {
              double v62 = a1;
              *((_OWORD *)a1 + 2) = *(_OWORD *)a1;
              *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a1 + 9);
              unint64_t v64 = *(a1 - 8);
              a1 -= 8;
              float64_t v63 = v64;
            }
            while (v58 < v64);
          }
          while (v63 >= v58 && v59 < *(v62 - 6));
          *double v62 = v58;
          v62[1] = v61;
          v62[2] = v59;
          *(void *)(v62 + 3) = v72;
          *(void *)((char *)v62 + 17) = *(void *)((char *)&v72 + 5);
        }
        double v39 = v57 + 32;
        a1 = (unsigned int *)v57;
        if (v57 + 32 == a2) {
          return;
        }
        continue;
      }
    }
    if (v13 == 1) {
      break;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)&v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 <= 0x1000)
    {
      sub_4F01C(v17, (int *)v11, (long long *)a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_4F01C((long long *)v11, (int *)v17, (long long *)a2 - 2);
      unint64_t v18 = 8 * v16;
      unint64_t v19 = (int *)&v11[8 * v16 - 8];
      sub_4F01C((long long *)v11 + 2, v19, (long long *)a2 - 4);
      sub_4F01C((long long *)v11 + 4, (int *)&v11[v18 + 8], (long long *)a2 - 6);
      sub_4F01C((long long *)v19, (int *)v17, (long long *)&v11[v18 + 8]);
      *(_OWORD *)double v66 = *(_OWORD *)v11;
      *(_OWORD *)&v66[16] = *((_OWORD *)v11 + 1);
      uint64_t v20 = *v17;
      *(_OWORD *)((char *)v11 + 9) = *(long long *)((char *)v17 + 9);
      *(_OWORD *)unint64_t v11 = v20;
      *(long long *)((char *)v17 + 9) = *(_OWORD *)&v66[9];
      *unint64_t v17 = *(_OWORD *)v66;
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(v11 - 8);
    if (v21 >= *v11 && (*v11 < v21 || *(v11 - 6) >= v11[2]))
    {
      unint64_t v11 = sub_4F1CC(v11, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_14:
    uint64_t v22 = sub_4F388((uint64_t *)v11, (uint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
    uint64_t v24 = sub_4F550((uint64_t)v11, v22);
    unint64_t v11 = (unsigned int *)(v22 + 32);
    if (sub_4F550(v22 + 32, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (char *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_17:
      sub_4E958(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = (unsigned int *)(v22 + 32);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != (unsigned int *)a2)
  {
    long long v54 = (v15 - 2) >> 1;
    unint64_t v55 = v54 + 1;
    unint64_t v56 = &v11[8 * v54];
    do
    {
      sub_4FB50((uint64_t)v11, a3, (a2 - (char *)v11) >> 5, v56);
      v56 -= 8;
      --v55;
    }
    while (v55);
    sub_4FCDC((char *)v11, a2);
  }
}

  unint64_t v11 = (const void **)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v35 = (const void **)*(a2 - 3);
          double v34 = a2 - 3;
          double v33 = v35;
          unint64_t v36 = *(char *)(a1 + 23);
          double v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            double v38 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            double v38 = (size_t)v34[1];
          }
          if (v37 >= 0) {
            double v39 = v34;
          }
          else {
            double v39 = v33;
          }
          if (v36 >= 0) {
            double v40 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            double v40 = *(void *)(a1 + 8);
          }
          if (v36 >= 0) {
            float64x2_t v41 = (const void *)a1;
          }
          else {
            float64x2_t v41 = *(const void **)a1;
          }
          if (v40 >= v38) {
            unint64_t v42 = v38;
          }
          else {
            unint64_t v42 = v40;
          }
          BOOL v43 = memcmp(v39, v41, v42);
          uint64_t v44 = v38 < v40;
          if (v43) {
            uint64_t v44 = v43 < 0;
          }
          if (v44)
          {
            long long v54 = *(const void **)(a1 + 16);
            uint64_t v52 = *(_OWORD *)a1;
            uint64_t v45 = *(_OWORD *)v34;
            *(void *)(a1 + 16) = v34[2];
            *(_OWORD *)a1 = v45;
            *(_OWORD *)double v34 = v52;
            v34[2] = v54;
          }
          break;
        case 3uLL:
          sub_6F234((const void **)a1, (const void **)(a1 + 24), a2 - 3);
          break;
        case 4uLL:
          sub_6FD74(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
          break;
        case 5uLL:
          sub_6FF28(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v12 == 1)
    {
      if ((const void **)a1 != a2)
      {
        unint64_t v46 = (v15 - 2) >> 1;
        unint64_t v47 = v46 + 1;
        double v48 = (__n128 *)(a1 + 24 * v46);
        do
        {
          sub_70160(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v14 >> 3), v48);
          double v48 = (__n128 *)((char *)v48 - 24);
          --v47;
        }
        while (v47);
        double v49 = v14 / 0x18uLL;
        do
        {
          sub_7042C(a1, (uint64_t)a2, a3, v49);
          a2 -= 3;
        }
        while (v49-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = a1 + 24 * (v15 >> 1);
    if ((unint64_t)v14 < 0xC01)
    {
      sub_6F234((const void **)v17, (const void **)a1, a2 - 3);
      if (a5) {
        goto LABEL_29;
      }
    }
    else
    {
      sub_6F234((const void **)a1, (const void **)v17, a2 - 3);
      unint64_t v18 = 24 * v16;
      unint64_t v19 = (const void **)(24 * v16 + a1 - 24);
      sub_6F234((const void **)(a1 + 24), v19, a2 - 6);
      sub_6F234((const void **)(a1 + 48), (const void **)(a1 + 24 + v18), a2 - 9);
      sub_6F234(v19, (const void **)v17, (const void **)(a1 + 24 + v18));
      double v53 = *(void *)(a1 + 16);
      float64x2_t v51 = *(_OWORD *)a1;
      uint64_t v20 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v20;
      *(void *)(v17 + 16) = v53;
      *(_OWORD *)unint64_t v17 = v51;
      if (a5) {
        goto LABEL_29;
      }
    }
    double v21 = *(char *)(a1 + 23);
    uint64_t v22 = *(char *)(a1 - 1);
    if (v22 >= 0) {
      unint64_t v23 = *(unsigned __int8 *)(a1 - 1);
    }
    else {
      unint64_t v23 = *(void *)(a1 - 16);
    }
    if (v22 >= 0) {
      uint64_t v24 = (const void *)(a1 - 24);
    }
    else {
      uint64_t v24 = *(const void **)(a1 - 24);
    }
    if (v21 >= 0) {
      char v25 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      char v25 = *(void *)(a1 + 8);
    }
    if (v21 >= 0) {
      BOOL v26 = (const void *)a1;
    }
    else {
      BOOL v26 = *(const void **)a1;
    }
    if (v25 >= v23) {
      unint64_t v27 = v23;
    }
    else {
      unint64_t v27 = v25;
    }
    double v28 = memcmp(v24, v26, v27);
    double v29 = v23 < v25;
    if (v28) {
      double v29 = v28 < 0;
    }
    if (!v29)
    {
      unint64_t v11 = sub_6F484((const void **)a1, a2);
      goto LABEL_34;
    }
LABEL_29:
    double v30 = (const void **)sub_6F78C((long long *)a1, (uint64_t)a2);
    if ((v31 & 1) == 0) {
      goto LABEL_32;
    }
    unint64_t v32 = sub_6FA80(a1, v30);
    unint64_t v11 = v30 + 3;
    if (sub_6FA80((uint64_t)(v30 + 3), a2))
    {
      a4 = -v13;
      a2 = v30;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v32)
    {
LABEL_32:
      sub_6EA30(a1, v30, a3, -v13, a5 & 1);
      unint64_t v11 = v30 + 3;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_6EF14(a1, a2);
  }
  else
  {
    sub_6F0B4((const void **)a1, a2);
  }
}

  long long v54 = (const void **)(a2 - 32);
  unint64_t v11 = (const void **)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = a2 - (char *)v11;
    uint64_t v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v35 = a2 - 32;
          unint64_t v36 = *(char *)(a1 + 23);
          double v37 = *(a2 - 9);
          if (v37 >= 0) {
            double v38 = *(a2 - 9);
          }
          else {
            double v38 = *((void *)a2 - 3);
          }
          if (v37 >= 0) {
            double v39 = a2 - 32;
          }
          else {
            double v39 = (char *)*((void *)a2 - 4);
          }
          if (v36 >= 0) {
            double v40 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            double v40 = *(void *)(a1 + 8);
          }
          if (v36 >= 0) {
            float64x2_t v41 = (const void *)a1;
          }
          else {
            float64x2_t v41 = *(const void **)a1;
          }
          if (v40 >= v38) {
            unint64_t v42 = v38;
          }
          else {
            unint64_t v42 = v40;
          }
          BOOL v43 = memcmp(v39, v41, v42);
          uint64_t v44 = v38 < v40;
          if (v43) {
            uint64_t v44 = v43 < 0;
          }
          if (v44) {
            goto LABEL_64;
          }
          uint64_t v45 = memcmp(v41, v39, v42);
          unint64_t v46 = v40 < v38;
          if (v45) {
            unint64_t v46 = v45 < 0;
          }
          if (!v46 && *((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
          {
LABEL_64:
            float64x2_t v58 = *(void *)(a1 + 16);
            unint64_t v56 = *(_OWORD *)a1;
            unint64_t v47 = *(_OWORD *)v35;
            *(void *)(a1 + 16) = *((void *)a2 - 2);
            *(_OWORD *)a1 = v47;
            *(_OWORD *)unint64_t v35 = v56;
            *((void *)a2 - 2) = v58;
            double v48 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v48;
          }
          break;
        case 3uLL:
          sub_AA798((const void **)a1, (const void **)(a1 + 32), v54);
          break;
        case 4uLL:
          sub_AB920((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), v54);
          break;
        case 5uLL:
          sub_ABBDC(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), v54);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 767) {
      break;
    }
    unint64_t v15 = v12;
    if (v12 == 1)
    {
      if ((char *)a1 != a2)
      {
        double v49 = (v14 - 2) >> 1;
        double v50 = v49 + 1;
        float64x2_t v51 = (__n128 *)(a1 + 32 * v49);
        do
        {
          sub_ABF6C((char *)a1, a3, v13 >> 5, v51);
          v51 -= 2;
          --v50;
        }
        while (v50);
        uint64_t v52 = (unint64_t)v13 >> 5;
        do
        {
          sub_AC34C(a1, (uint64_t)a2, a3, v52);
          a2 -= 32;
        }
        while (v52-- > 2);
      }
      return;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = a1 + 32 * (v14 >> 1);
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_AA798((const void **)v17, (const void **)a1, v54);
      if (a5) {
        goto LABEL_33;
      }
    }
    else
    {
      sub_AA798((const void **)a1, (const void **)v17, v54);
      unint64_t v18 = 32 * v16;
      sub_AA798((const void **)(a1 + 32), (const void **)(a1 + v18 - 32), (const void **)a2 - 8);
      sub_AA798((const void **)(a1 + 64), (const void **)(a1 + 32 + v18), (const void **)a2 - 12);
      sub_AA798((const void **)(a1 + v18 - 32), (const void **)v17, (const void **)(a1 + 32 + v18));
      unint64_t v57 = *(void *)(a1 + 16);
      unint64_t v55 = *(_OWORD *)a1;
      unint64_t v19 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v19;
      *(void *)(v17 + 16) = v57;
      *(_OWORD *)unint64_t v17 = v55;
      uint64_t v20 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(a1 + v18 + 24);
      *(_DWORD *)(a1 + v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
      if (a5) {
        goto LABEL_33;
      }
    }
    double v21 = *(char *)(a1 + 23);
    uint64_t v22 = *(char *)(a1 - 9);
    if (v22 >= 0) {
      unint64_t v23 = *(unsigned __int8 *)(a1 - 9);
    }
    else {
      unint64_t v23 = *(void *)(a1 - 24);
    }
    if (v22 >= 0) {
      uint64_t v24 = (const void *)(a1 - 32);
    }
    else {
      uint64_t v24 = *(const void **)(a1 - 32);
    }
    if (v21 >= 0) {
      char v25 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      char v25 = *(void *)(a1 + 8);
    }
    if (v21 >= 0) {
      BOOL v26 = (const void *)a1;
    }
    else {
      BOOL v26 = *(const void **)a1;
    }
    if (v25 >= v23) {
      unint64_t v27 = v23;
    }
    else {
      unint64_t v27 = v25;
    }
    double v28 = memcmp(v24, v26, v27);
    double v29 = v23 < v25;
    if (v28) {
      double v29 = v28 < 0;
    }
    if (!v29)
    {
      double v30 = memcmp(v26, v24, v27);
      unint64_t v31 = v25 < v23;
      if (v30) {
        unint64_t v31 = v30 < 0;
      }
      if (v31 || *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 24))
      {
        unint64_t v11 = sub_AABB8(a1, a2);
        goto LABEL_38;
      }
    }
LABEL_33:
    unint64_t v32 = sub_AB088(a1, (const void **)a2);
    if ((v33 & 1) == 0) {
      goto LABEL_36;
    }
    double v34 = sub_AB4CC(a1, v32);
    unint64_t v11 = v32 + 4;
    if (sub_AB4CC((uint64_t)(v32 + 4), (const void **)a2))
    {
      a4 = -v15;
      a2 = (char *)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v34)
    {
LABEL_36:
      sub_A9D5C(a1, v32, a3, -v15, a5 & 1);
      unint64_t v11 = v32 + 4;
LABEL_38:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_AA2D0((char *)a1, a2);
  }
  else
  {
    sub_AA544((const void **)a1, (const void **)a2);
  }
}

  uint64_t v10 = a2 - 12;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 5);
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v44 = (unint64_t)*(a2 - 5);
          uint64_t v45 = v11[7];
          if (v44 < (unint64_t)v45) {
            goto LABEL_48;
          }
          if (v44 <= (unint64_t)v45)
          {
            unint64_t v57 = (unint64_t)*(a2 - 7);
            float64x2_t v58 = v11[5];
            if (v57 < (unint64_t)v58) {
              goto LABEL_48;
            }
            if (v57 <= (unint64_t)v58)
            {
              double v59 = (unint64_t)*(a2 - 8);
              unint64_t v60 = v11[4];
              if (v59 < (unint64_t)v60) {
                goto LABEL_48;
              }
              if (v59 <= (unint64_t)v60)
              {
                int v61 = *((char *)v11 + 23);
                double v62 = *((char *)a2 - 73);
                if (v62 >= 0) {
                  float64_t v63 = *((unsigned __int8 *)a2 - 73);
                }
                else {
                  float64_t v63 = (size_t)*(a2 - 11);
                }
                if (v62 >= 0) {
                  unint64_t v64 = v10;
                }
                else {
                  unint64_t v64 = (const void **)*(a2 - 12);
                }
                if (v61 >= 0) {
                  unint64_t v65 = *((unsigned __int8 *)v11 + 23);
                }
                else {
                  unint64_t v65 = (size_t)v11[1];
                }
                if (v61 >= 0) {
                  double v66 = v11;
                }
                else {
                  double v66 = *v11;
                }
                if (v65 >= v63) {
                  double v67 = v63;
                }
                else {
                  double v67 = v65;
                }
                int v68 = memcmp(v64, v66, v67);
                double v69 = v63 < v65;
                if (v68) {
                  double v69 = v68 < 0;
                }
                if (v69)
                {
LABEL_48:
                  unint64_t v46 = *v11;
                  *(void *)double v82 = v11[1];
                  *(void *)&v82[7] = *(const void **)((char *)v11 + 15);
                  unint64_t v47 = *((unsigned char *)v11 + 23);
                  v11[1] = 0;
                  CFTimeZoneRef v11[2] = 0;
                  *unint64_t v11 = 0;
                  float64x2_t v74 = *(_OWORD *)(v11 + 5);
                  int8x16_t v76 = *(_OWORD *)(v11 + 7);
                  float64x2_t v78 = *(_OWORD *)(v11 + 9);
                  float64x2_t v80 = v11[11];
                  uint64_t v72 = *(_OWORD *)(v11 + 3);
                  double v48 = v10[2];
                  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
                  CFTimeZoneRef v11[2] = v48;
                  *((unsigned char *)a2 - 73) = 0;
                  *((unsigned char *)a2 - 96) = 0;
                  *(_OWORD *)(v11 + 3) = *(_OWORD *)(a2 - 9);
                  double v49 = *(_OWORD *)(a2 - 7);
                  double v50 = *(_OWORD *)(a2 - 5);
                  float64x2_t v51 = *(a2 - 1);
                  *(_OWORD *)(v11 + 9) = *(_OWORD *)(a2 - 3);
                  v11[11] = v51;
                  *(_OWORD *)(v11 + 7) = v50;
                  *(_OWORD *)(v11 + 5) = v49;
                  if (*((char *)a2 - 73) < 0) {
                    operator delete((void *)*v10);
                  }
                  *(a2 - 12) = v46;
                  *(a2 - 11) = *(const void **)v82;
                  *(const void **)((char *)a2 - 81) = *(const void **)&v82[7];
                  *((unsigned char *)a2 - 73) = v47;
                  *(_OWORD *)(a2 - 5) = v76;
                  *(_OWORD *)(a2 - 3) = v78;
                  *(a2 - 1) = v80;
                  *(_OWORD *)(a2 - 9) = v72;
                  *(_OWORD *)(a2 - 7) = v74;
                }
              }
            }
          }
          break;
        case 3uLL:
          sub_1C4C80(v11, v11 + 12, v10);
          break;
        case 4uLL:
          sub_1C6570((uint64_t)v11, (uint64_t)(v11 + 12), (uint64_t)(v11 + 24), v10);
          break;
        case 5uLL:
          sub_1C6A04((uint64_t)v11, (uint64_t)(v11 + 12), (uint64_t)(v11 + 24), (uint64_t)(v11 + 36), v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 2303) {
      break;
    }
    if (v12 == 1)
    {
      if (v11 != a2)
      {
        uint64_t v52 = (v15 - 2) >> 1;
        double v53 = v52 + 1;
        long long v54 = &v11[12 * v52];
        do
        {
          sub_1C7004((uint64_t)v11, a3, v15, v54);
          v54 -= 12;
          --v53;
        }
        while (v53);
        unint64_t v55 = v14 / 0x60uLL;
        do
        {
          sub_1C7468((uint64_t)v11, (uint64_t)a2, a3, v55);
          a2 -= 12;
        }
        while (v55-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[12 * (v15 >> 1)];
    if ((unint64_t)v14 <= 0x3000)
    {
      sub_1C4C80(v17, v11, v10);
      if (a5) {
        goto LABEL_38;
      }
    }
    else
    {
      sub_1C4C80(v11, v17, v10);
      unint64_t v18 = &v11[12 * v16];
      sub_1C4C80(v11 + 12, v18 - 12, a2 - 24);
      sub_1C4C80(v11 + 24, &v11[12 * v16 + 12], a2 - 36);
      sub_1C4C80(v18 - 12, v17, &v11[12 * v16 + 12]);
      unint64_t v19 = *v11;
      *(void *)&float64x2_t v81 = v11[1];
      *(void *)((char *)&v81 + 7) = *(const void **)((char *)v11 + 15);
      uint64_t v20 = *((unsigned char *)v11 + 23);
      v11[1] = 0;
      CFTimeZoneRef v11[2] = 0;
      *unint64_t v11 = 0;
      long long v77 = *(_OWORD *)(v11 + 9);
      uint64_t v71 = *(_OWORD *)(v11 + 3);
      float64x2_t v73 = *(_OWORD *)(v11 + 5);
      double v75 = *(_OWORD *)(v11 + 7);
      float64x2_t v79 = v11[11];
      double v21 = *(_OWORD *)v17;
      CFTimeZoneRef v11[2] = v17[2];
      *(_OWORD *)unint64_t v11 = v21;
      *((unsigned char *)v17 + 23) = 0;
      *(_OWORD *)(v11 + 3) = *(_OWORD *)(v18 + 3);
      uint64_t v22 = *(_OWORD *)(v18 + 5);
      unint64_t v23 = *(_OWORD *)(v18 + 7);
      uint64_t v24 = *(_OWORD *)(v18 + 9);
      v11[11] = v18[11];
      *(_OWORD *)(v11 + 9) = v24;
      *(_OWORD *)(v11 + 7) = v23;
      *(_OWORD *)(v11 + 5) = v22;
      *unint64_t v17 = v19;
      *(const void **)((char *)v17 + 15) = *(const void **)((char *)&v81 + 7);
      v17[1] = (const void *)v81;
      *((unsigned char *)v17 + 23) = v20;
      *(_OWORD *)(v18 + 3) = v71;
      v18[11] = v79;
      *(_OWORD *)(v18 + 9) = v77;
      *(_OWORD *)(v18 + 7) = v75;
      *(_OWORD *)(v18 + 5) = v73;
      if (a5) {
        goto LABEL_38;
      }
    }
    char v25 = (unint64_t)*(v11 - 5);
    BOOL v26 = v11[7];
    if (v25 >= (unint64_t)v26)
    {
      if (v25 > (unint64_t)v26) {
        goto LABEL_42;
      }
      unint64_t v27 = (unint64_t)*(v11 - 7);
      double v28 = v11[5];
      if (v27 >= (unint64_t)v28)
      {
        if (v27 > (unint64_t)v28) {
          goto LABEL_42;
        }
        double v29 = (unint64_t)*(v11 - 8);
        double v30 = v11[4];
        if (v29 >= (unint64_t)v30)
        {
          if (v29 > (unint64_t)v30) {
            goto LABEL_42;
          }
          unint64_t v31 = *((char *)v11 + 23);
          unint64_t v32 = *((char *)v11 - 73);
          double v33 = v10;
          if (v32 >= 0) {
            double v34 = *((unsigned __int8 *)v11 - 73);
          }
          else {
            double v34 = (size_t)*(v11 - 11);
          }
          if (v32 >= 0) {
            unint64_t v35 = v11 - 12;
          }
          else {
            unint64_t v35 = (const void **)*(v11 - 12);
          }
          if (v31 >= 0) {
            unint64_t v36 = *((unsigned __int8 *)v11 + 23);
          }
          else {
            unint64_t v36 = (size_t)v11[1];
          }
          if (v31 >= 0) {
            double v37 = v11;
          }
          else {
            double v37 = *v11;
          }
          if (v36 >= v34) {
            double v38 = v34;
          }
          else {
            double v38 = v36;
          }
          double v39 = memcmp(v35, v37, v38);
          char v5 = v34 >= v36;
          uint64_t v10 = v33;
          double v40 = !v5;
          if (v39) {
            double v40 = v39 < 0;
          }
          if (!v40)
          {
LABEL_42:
            unint64_t v11 = sub_1C53A8((uint64_t)v11, (unint64_t)a2);
            goto LABEL_43;
          }
        }
      }
    }
LABEL_38:
    float64x2_t v41 = sub_1C5A3C((uint64_t)v11, (unint64_t)a2);
    if ((v42 & 1) == 0) {
      goto LABEL_41;
    }
    BOOL v43 = sub_1C6040((uint64_t)v11, (const void **)v41);
    unint64_t v11 = (const void **)(v41 + 96);
    if (sub_1C6040((uint64_t)(v41 + 96), a2))
    {
      a4 = -v13;
      a2 = (const void **)v41;
      if (v43) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v43)
    {
LABEL_41:
      sub_1C3FC4(a1, v41, a3, -v13, a5 & 1);
      unint64_t v11 = (const void **)(v41 + 96);
LABEL_43:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1C470C((uint64_t)v11, a2);
  }
  else
  {
    sub_1C49E8(v11, a2);
  }
}

  uint64_t v10 = (uint64_t *)(a2 - 32);
  unint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = (uint64_t)(a2 - j) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v67 = (long long *)(a2 - 32);
          int v68 = *(void *)(a2 - 32);
          if (v68 < *(void *)j
            || *(void *)j >= v68
            && ((double v69 = *(void *)(a2 - 16), v70 = *(void *)(j + 16), v69 < v70)
             || v70 >= v69 && *(void *)(a2 - 8) < *(void *)(j + 24)))
          {
            uint64_t v153 = *(_OWORD *)j;
            double v158 = *(_OWORD *)(j + 16);
            uint64_t v71 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)unint64_t j = *v67;
            *(_OWORD *)(j + 16) = v71;
            *double v67 = v153;
            *(_OWORD *)(a2 - 16) = v158;
          }
          break;
        case 3uLL:
          sub_29F234((long long *)j, (uint64_t *)(j + 32), (long long *)(a2 - 32));
          break;
        case 4uLL:
          sub_29F698(j, (__n128 *)(j + 32), j + 64, a2 - 32);
          break;
        case 5uLL:
          sub_29F090(j, j + 32, j + 64, j + 96, a2 - 32);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if (j != a2)
      {
        unsigned int v90 = (v13 - 2) >> 1;
        int v91 = v90;
        while (2)
        {
          long long v93 = v91;
          if (v90 >= v91)
          {
            unsigned __int8 v94 = (2 * v91) | 1;
            float64x2_t v92 = (void *)(j + 32 * v94);
            if (2 * v93 + 2 < (uint64_t)v13)
            {
              uint64_t v95 = v92[4];
              if (*v92 < v95
                || v95 >= *v92 && ((uint64_t v96 = v92[2], v97 = v92[6], v96 < v97) || v97 >= v96 && v92[3] < v92[7]))
              {
                v92 += 4;
                unsigned __int8 v94 = 2 * v93 + 2;
              }
            }
            double v98 = (void *)(j + 32 * v93);
            double v99 = *v98;
            if (*v92 >= *v98)
            {
              uint64_t v100 = j + 32 * v93;
              char v101 = (uint64_t *)(v100 + 24);
              unsigned int v102 = *(void *)(v100 + 16);
              if (v99 >= *v92)
              {
                int v104 = v92[2];
                if (v104 >= v102)
                {
                  unsigned int v103 = *v101;
                  if (v102 < v104 || v92[3] >= v103) {
                    goto LABEL_175;
                  }
                }
              }
              else
              {
                unsigned int v103 = *v101;
LABEL_175:
                int v105 = v98[1];
                while (1)
                {
                  uint64_t v106 = *((_OWORD *)v92 + 1);
                  *(_OWORD *)double v98 = *(_OWORD *)v92;
                  *((_OWORD *)v98 + 1) = v106;
                  if (v90 < v94) {
                    goto LABEL_159;
                  }
                  double v98 = v92;
                  unsigned int v107 = 2 * v94;
                  unsigned __int8 v94 = (2 * v94) | 1;
                  float64x2_t v92 = (void *)(j + 32 * v94);
                  int64_t v108 = v107 + 2;
                  if (v108 < (uint64_t)v13)
                  {
                    uint64_t v109 = v92[4];
                    if (*v92 < v109
                      || v109 >= *v92
                      && ((long double v110 = v92[2], v111 = v92[6], v110 < v111) || v111 >= v110 && v92[3] < v92[7]))
                    {
                      v92 += 4;
                      unsigned __int8 v94 = v108;
                    }
                  }
                  if (*v92 < v99) {
                    break;
                  }
                  if (v99 >= *v92)
                  {
                    uint64x2_t v112 = v92[2];
                    if (v112 < v102 || v102 >= v112 && v92[3] < v103) {
                      break;
                    }
                  }
                }
                float64x2_t v92 = v98;
LABEL_159:
                *float64x2_t v92 = v99;
                v92[1] = v105;
                v92[2] = v102;
                v92[3] = v103;
              }
            }
          }
          int v91 = v93 - 1;
          if (v93) {
            continue;
          }
          break;
        }
        uint64_t v113 = (unint64_t)v12 >> 5;
        while (2)
        {
          unsigned int v115 = 0;
          unint64_t v154 = *(_OWORD *)j;
          double v159 = *(_OWORD *)(j + 16);
          unsigned int v116 = (void *)j;
          do
          {
            unsigned int v118 = v116;
            v116 += 4 * v115 + 4;
            unsigned int v119 = 2 * v115;
            unsigned int v115 = (2 * v115) | 1;
            unsigned int v120 = v119 + 2;
            if (v120 < v113)
            {
              int v121 = v116[4];
              if (*v116 < v121
                || v121 >= *v116 && ((uint64_t v122 = v116[2], v123 = v116[6], v122 < v123) || v123 >= v122 && v116[3] < v116[7]))
              {
                v116 += 4;
                unsigned int v115 = v120;
              }
            }
            int v117 = *((_OWORD *)v116 + 1);
            *unsigned int v118 = *(_OWORD *)v116;
            v118[1] = v117;
          }
          while (v115 <= (uint64_t)((unint64_t)(v113 - 2) >> 1));
          a2 -= 32;
          if (v116 == (void *)a2)
          {
            *(_OWORD *)unsigned int v116 = v154;
            *((_OWORD *)v116 + 1) = v159;
            goto LABEL_191;
          }
          uint64_t v124 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)unsigned int v116 = *(_OWORD *)a2;
          *((_OWORD *)v116 + 1) = v124;
          *(_OWORD *)a2 = v154;
          *(_OWORD *)(a2 + 16) = v159;
          uint64x2_t v125 = (uint64_t)v116 - j + 32;
          if (v125 >= 33)
          {
            uint64_t v126 = ((unint64_t)v125 >> 5) - 2;
            long double v127 = v126 >> 1;
            unsigned int v128 = (void *)(j + 32 * (v126 >> 1));
            unsigned int v129 = *v116;
            if (*v128 < *v116)
            {
              int v130 = v116[2];
              goto LABEL_207;
            }
            if (v129 >= *v128)
            {
              unsigned int v138 = v128[2];
              int v130 = v116[2];
              if (v138 < v130 || v130 >= v138 && v128[3] < v116[3])
              {
LABEL_207:
                int v131 = v116[1];
                int v132 = v116[3];
                uint64_t v133 = *((_OWORD *)v128 + 1);
                *(_OWORD *)unsigned int v116 = *(_OWORD *)v128;
                *((_OWORD *)v116 + 1) = v133;
                if (v126 >= 2)
                {
                  while (1)
                  {
                    long double v136 = v127 - 1;
                    long double v127 = (v127 - 1) >> 1;
                    long double v134 = (void *)(j + 32 * v127);
                    if (*v134 >= v129)
                    {
                      if (v129 < *v134) {
                        break;
                      }
                      unsigned int v137 = v134[2];
                      if (v137 >= v130 && (v130 < v137 || v134[3] >= v132)) {
                        break;
                      }
                    }
                    double v135 = *((_OWORD *)v134 + 1);
                    *(_OWORD *)unsigned int v128 = *(_OWORD *)v134;
                    *((_OWORD *)v128 + 1) = v135;
                    unsigned int v128 = (void *)(j + 32 * v127);
                    if (v136 <= 1) {
                      goto LABEL_209;
                    }
                  }
                }
                long double v134 = v128;
LABEL_209:
                *long double v134 = v129;
                v134[1] = v131;
                v134[2] = v130;
                v134[3] = v132;
              }
            }
          }
LABEL_191:
          if (v113-- <= 2) {
            return;
          }
          continue;
        }
      }
      return;
    }
    uint64_t v14 = v13 >> 1;
    unint64_t v15 = j + 32 * (v13 >> 1);
    if ((unint64_t)v12 > 0x1000)
    {
      sub_29F234((long long *)a1, (uint64_t *)(a1 + 32 * (v13 >> 1)), (long long *)(a2 - 32));
      uint64_t v16 = 32 * v14;
      unint64_t v17 = (uint64_t *)(32 * v14 + a1 - 32);
      sub_29F234((long long *)(a1 + 32), v17, (long long *)(a2 - 64));
      sub_29F234((long long *)(a1 + 64), (uint64_t *)(a1 + 32 + v16), (long long *)(a2 - 96));
      sub_29F234((long long *)v17, (uint64_t *)v15, (long long *)(a1 + 32 + v16));
      double v150 = *(_OWORD *)a1;
      unint64_t v155 = *(_OWORD *)(a1 + 16);
      unint64_t v18 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)(a1 + 16) = v18;
      *(_OWORD *)unint64_t v15 = v150;
      *(_OWORD *)(v15 + 16) = v155;
      --a3;
      unint64_t v19 = *(void *)a1;
      if (a4) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_29F234((long long *)(a1 + 32 * (v13 >> 1)), (uint64_t *)a1, (long long *)(a2 - 32));
      --a3;
      unint64_t v19 = *(void *)a1;
      if (a4) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = *(void *)(a1 - 32);
    if (v20 < v19)
    {
LABEL_16:
      uint64_t v24 = 0;
      char v25 = *(void *)(a1 + 8);
      BOOL v26 = *(void *)(a1 + 16);
      unint64_t v27 = *(void *)(a1 + 24);
      while (1)
      {
        double v28 = a1 + v24;
        double v29 = *(void *)(a1 + v24 + 32);
        if (v29 >= v19)
        {
          if (v19 < v29) {
            break;
          }
          double v30 = *(void *)(v28 + 48);
          if (v30 >= v26 && (v26 < v30 || *(void *)(v28 + 56) >= v27)) {
            break;
          }
        }
        v24 += 32;
      }
      unint64_t v31 = a1 + v24 + 32;
      if (v24)
      {
        unint64_t v32 = *v10;
        for (double i = a2 - 32; v32 >= v19; i -= 32)
        {
          if (v19 >= v32)
          {
            unint64_t v35 = *(void *)(i + 16);
            if (v35 < v26 || v26 >= v35 && *(void *)(i + 24) < v27) {
              break;
            }
          }
          double v34 = *(void *)(i - 32);
          unint64_t v32 = v34;
        }
      }
      else
      {
        double i = a2;
        if (v31 < a2)
        {
          unint64_t v36 = *v10;
          double i = a2 - 32;
          if (*v10 >= v19)
          {
            double i = a2 - 32;
            do
            {
              if (v19 < v36) {
                goto LABEL_56;
              }
              double v48 = *(void *)(i + 16);
              if (v48 < v26) {
                break;
              }
              if (v26 < v48)
              {
LABEL_56:
                if (v31 >= i) {
                  break;
                }
              }
              else if (v31 >= i || *(void *)(i + 24) < v27)
              {
                break;
              }
              unint64_t v47 = *(void *)(i - 32);
              i -= 32;
              unint64_t v36 = v47;
            }
            while (v47 >= v19);
          }
        }
      }
      unint64_t j = v31;
      if (v31 < i)
      {
        double v37 = i;
        do
        {
          BOOL v151 = *(_OWORD *)j;
          double v156 = *(_OWORD *)(j + 16);
          double v38 = *(_OWORD *)(v37 + 16);
          *(_OWORD *)unint64_t j = *(_OWORD *)v37;
          *(_OWORD *)(j + 16) = v38;
          *(_OWORD *)double v37 = v151;
          *(_OWORD *)(v37 + 16) = v156;
          do
          {
            do
            {
              double v40 = *(void *)(j + 32);
              j += 32;
              double v39 = v40;
            }
            while (v40 < v19);
            if (v19 < v39) {
              break;
            }
            float64x2_t v41 = *(void *)(j + 16);
          }
          while (v41 < v26 || v26 >= v41 && *(void *)(j + 24) < v27);
          while (1)
          {
            BOOL v43 = *(void *)(v37 - 32);
            v37 -= 32;
            unint64_t v42 = v43;
            if (v43 < v19) {
              break;
            }
            if (v19 >= v42)
            {
              uint64_t v44 = *(void *)(v37 + 16);
              if (v44 < v26 || v26 >= v44 && *(void *)(v37 + 24) < v27) {
                break;
              }
            }
          }
        }
        while (j < v37);
      }
      if (j - 32 != a1)
      {
        uint64_t v45 = *(_OWORD *)(j - 16);
        *(_OWORD *)a1 = *(_OWORD *)(j - 32);
        *(_OWORD *)(a1 + 16) = v45;
      }
      *(void *)(j - 32) = v19;
      *(void *)(j - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
      *(void *)(j - 16) = v26;
      *(void *)(j - 8) = v27;
      if (v31 < i) {
        goto LABEL_54;
      }
      unint64_t v46 = sub_29F3D4(a1, (void *)(j - 32));
      if (sub_29F3D4(j, (void *)a2))
      {
        a2 = j - 32;
        if (v46) {
          return;
        }
        goto LABEL_1;
      }
      if (!v46)
      {
LABEL_54:
        sub_29E490(a1, j - 32, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v21 = *(void *)(a1 + 16);
      if (v19 < v20)
      {
        unint64_t v23 = *(void *)(a1 + 24);
      }
      else
      {
        uint64_t v22 = *(void *)(a1 - 16);
        if (v22 < v21) {
          goto LABEL_16;
        }
        unint64_t v23 = *(void *)(a1 + 24);
        if (v21 >= v22 && *(void *)(a1 - 8) < v23) {
          goto LABEL_16;
        }
      }
      double v49 = *v10;
      if (v19 < *v10
        || v49 >= v19 && ((double v66 = *(void *)(a2 - 16), v21 < v66) || v66 >= v21 && v23 < *(void *)(a2 - 8)))
      {
        unint64_t j = a1;
        while (1)
        {
          float64x2_t v51 = *(void *)(j + 32);
          j += 32;
          double v50 = v51;
          if (v19 < v51) {
            break;
          }
          if (v50 >= v19)
          {
            uint64_t v52 = *(void *)(j + 16);
            if (v21 < v52 || v52 >= v21 && v23 < *(void *)(j + 24)) {
              break;
            }
          }
        }
      }
      else
      {
        for (unint64_t j = a1 + 32; j < a2; j += 32)
        {
          if (v19 < *(void *)j) {
            break;
          }
          if (*(void *)j >= v19)
          {
            unint64_t v65 = *(void *)(j + 16);
            if (v21 < v65 || v65 >= v21 && v23 < *(void *)(j + 24)) {
              break;
            }
          }
        }
      }
      double v53 = *(void *)(a1 + 8);
      unint64_t k = a2;
      if (j < a2)
      {
        for (unint64_t k = a2 - 32; ; k -= 32)
        {
          if (v19 >= v49)
          {
            if (v49 < v19) {
              break;
            }
            unint64_t v56 = *(void *)(k + 16);
            if (v21 >= v56 && (v56 < v21 || v23 >= *(void *)(k + 24))) {
              break;
            }
          }
          unint64_t v55 = *(void *)(k - 32);
          double v49 = v55;
        }
      }
      while (j < k)
      {
        int v152 = *(_OWORD *)j;
        uint64_t v157 = *(_OWORD *)(j + 16);
        unint64_t v57 = *(_OWORD *)(k + 16);
        *(_OWORD *)unint64_t j = *(_OWORD *)k;
        *(_OWORD *)(j + 16) = v57;
        *(_OWORD *)unint64_t k = v152;
        *(_OWORD *)(k + 16) = v157;
        while (1)
        {
          double v59 = *(void *)(j + 32);
          j += 32;
          float64x2_t v58 = v59;
          if (v19 < v59) {
            break;
          }
          if (v58 >= v19)
          {
            unint64_t v60 = *(void *)(j + 16);
            if (v21 < v60 || v60 >= v21 && v23 < *(void *)(j + 24)) {
              break;
            }
          }
        }
        do
        {
          do
          {
            double v62 = *(void *)(k - 32);
            k -= 32;
            int v61 = v62;
          }
          while (v19 < v62);
          if (v61 < v19) {
            break;
          }
          float64_t v63 = *(void *)(k + 16);
        }
        while (v21 < v63 || v63 >= v21 && v23 < *(void *)(k + 24));
      }
      unint64_t v4 = j - 32 >= a1;
      char v5 = j - 32 == a1;
      if (j - 32 != a1)
      {
        unint64_t v64 = *(_OWORD *)(j - 16);
        *(_OWORD *)a1 = *(_OWORD *)(j - 32);
        *(_OWORD *)(a1 + 16) = v64;
      }
      a4 = 0;
      *(void *)(j - 32) = v19;
      *(void *)(j - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v53;
      *(void *)(j - 16) = v21;
      *(void *)(j - 8) = v23;
    }
  }
  uint64_t v72 = (_OWORD *)(j + 32);
  float64x2_t v74 = j == a2 || v72 == (_OWORD *)a2;
  if (a4)
  {
    if (v74) {
      return;
    }
    double v75 = 0;
    int8x16_t v76 = (_OWORD *)j;
LABEL_140:
    float64x2_t v78 = v76;
    int8x16_t v76 = v72;
    float64x2_t v79 = v78[4];
    if (v79 >= *v78)
    {
      if (*v78 < v79) {
        goto LABEL_139;
      }
      float64x2_t v80 = v78[6];
      float64x2_t v81 = v78[2];
      if (v80 >= v81 && (v81 < v80 || v78[7] >= v78[3])) {
        goto LABEL_139;
      }
    }
    else
    {
      float64x2_t v80 = v78[6];
    }
    double v82 = v78[5];
    double v83 = v78[7];
    double v84 = *((_OWORD *)v78 + 1);
    unsigned int *v76 = *(_OWORD *)v78;
    v76[1] = v84;
    long long v77 = (void *)j;
    if (v78 == (void *)j) {
      goto LABEL_138;
    }
    BOOL v85 = v75;
    while (1)
    {
      double v87 = (_OWORD *)(j + v85);
      long long v88 = *(void *)(j + v85 - 32);
      if (v79 >= v88)
      {
        if (v88 < v79) {
          goto LABEL_154;
        }
        BOOL v89 = *((void *)v87 - 2);
        if (v80 >= v89)
        {
          if (v89 < v80)
          {
            long long v77 = (void *)(j + v85);
LABEL_138:
            unsigned int *v77 = v79;
            v77[1] = v82;
            v77[2] = v80;
            v77[3] = v83;
LABEL_139:
            uint64_t v72 = v76 + 2;
            v75 += 32;
            if (v76 + 2 == (_OWORD *)a2) {
              return;
            }
            goto LABEL_140;
          }
          if (v83 >= *((void *)v87 - 1))
          {
LABEL_154:
            long long v77 = v78;
            goto LABEL_138;
          }
        }
      }
      v78 -= 4;
      double v86 = *(_OWORD *)(j + v85 - 16);
      void *v87 = *(_OWORD *)(j + v85 - 32);
      v87[1] = v86;
      v85 -= 32;
      if (!v85)
      {
        long long v77 = (void *)j;
        goto LABEL_138;
      }
    }
  }
  if (!v74)
  {
    while (1)
    {
      int v139 = (void *)a1;
      a1 = (unint64_t)v72;
      int v140 = v139[4];
      if (v140 < *v139) {
        break;
      }
      if (*v139 >= v140)
      {
        uint64_t v141 = v139[6];
        uint64_t v142 = v139[2];
        if (v141 < v142 || v142 >= v141 && v139[7] < v139[3]) {
          goto LABEL_232;
        }
      }
LABEL_225:
      uint64_t v72 = (_OWORD *)(a1 + 32);
      if (a1 + 32 == a2) {
        return;
      }
    }
    uint64_t v141 = v139[6];
LABEL_232:
    int v143 = v139[5];
    unsigned int v144 = v139[7];
    do
    {
      do
      {
        unsigned int v145 = v139;
        long double v146 = *((_OWORD *)v139 + 1);
        *((_OWORD *)v139 + 2) = *(_OWORD *)v139;
        *((_OWORD *)v139 + 3) = v146;
        BOOL v148 = *(v139 - 4);
        v139 -= 4;
        uint64_t v147 = v148;
      }
      while (v140 < v148);
      if (v147 < v140) {
        break;
      }
      double v149 = *(v145 - 2);
    }
    while (v141 < v149 || v149 >= v141 && v144 < *(v145 - 1));
    *unsigned int v145 = v140;
    v145[1] = v143;
    v145[2] = v141;
    v145[3] = v144;
    goto LABEL_225;
  }
}

  unint64_t v11 = (__n128 *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v29 = &a2[-2].n128_i8[8];
          double v30 = (v11->n128_u64[0] >> 16) & 0xFFFF0000 | (v11->n128_u64[0] << 32) | ((v11->n128_u64[0] & 0xFF000000000000) == 0);
          if ((((unint64_t)a2[-2].n128_u32[2] << 32) | ((unint64_t)a2[-2].n128_u16[6] << 16) | (a2[-2].n128_u8[14] == 0)) < v30
            || v30 >= ((*(void *)v29 >> 16) & 0xFFFF0000 | (*(void *)v29 << 32) | (unint64_t)((*(void *)v29 & 0xFF000000000000) == 0))
            && ((unint64_t v31 = v11->n128_u32[2], v32 = a2[-1].n128_u32[0], v32 < v31)
             || v31 >= v32 && a2[-1].n128_u64[1] < v11[1].n128_u64[0]))
          {
            double v40 = v11[1].n128_u64[0];
            double v38 = *v11;
            double v33 = *(__n128 *)v29;
            v11[1].n128_u64[0] = a2[-1].n128_u64[1];
            *unint64_t v11 = v33;
            *(__n128 *)double v29 = v38;
            a2[-1].n128_u64[1] = v40;
          }
          break;
        case 3uLL:
          sub_2A0650((long long *)v11, &v11[1].n128_u32[2], &a2[-2].n128_u32[2]);
          break;
        case 4uLL:
          sub_2A1434((uint64_t)v11, &v11[1].n128_u32[2], (unsigned int *)&v11[3], &a2[-2].n128_u32[2]);
          break;
        case 5uLL:
          sub_2A1688((uint64_t)v11, &v11[1].n128_u32[2], (unsigned int *)&v11[3], &v11[4].n128_u32[2], &a2[-2].n128_u32[2]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        double v34 = (v15 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (uint64_t *)v11 + 3 * v34;
        do
        {
          sub_2A19B0((uint64_t)v11, a3, v15, v36);
          v36 -= 3;
          --v35;
        }
        while (v35);
        sub_2A1CC4((uint64_t)v11, a2, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 24 * (v15 >> 1));
    if ((unint64_t)v14 < 0xC01)
    {
      sub_2A0650(v17, (unsigned int *)v11, &a2[-2].n128_u32[2]);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_2A0650((long long *)v11, (unsigned int *)v17, &a2[-2].n128_u32[2]);
      unint64_t v18 = 6 * v16;
      unint64_t v19 = (unsigned int *)&v11[-1] + 6 * v16 - 2;
      sub_2A0650((long long *)&v11[1].n128_i8[8], v19, (unsigned int *)&a2[-3]);
      uint64_t v20 = (long long *)&v11[3];
      double v21 = &v11[1].n128_u32[v18 + 2];
      sub_2A0650(v20, v21, &a2[-5].n128_u32[2]);
      sub_2A0650((long long *)v19, (unsigned int *)v17, v21);
      double v39 = *(void *)(a1 + 16);
      double v37 = *(_OWORD *)a1;
      uint64_t v22 = *v17;
      *(void *)(a1 + 16) = *((void *)v17 + 2);
      *(_OWORD *)a1 = v22;
      *((void *)v17 + 2) = v39;
      *unint64_t v17 = v37;
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v23 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
    if ((((unint64_t)*(unsigned int *)(a1 - 24) << 32) | ((unint64_t)*(unsigned __int16 *)(a1 - 20) << 16) | (*(unsigned char *)(a1 - 18) == 0)) >= v23)
    {
      if (v23 < ((*(void *)(a1 - 24) >> 16) & 0xFFFF0000 | (*(void *)(a1 - 24) << 32) | (unint64_t)((*(void *)(a1 - 24) & 0xFF000000000000) == 0))
        || (uint64_t v24 = *(_DWORD *)(a1 + 8), v25 = *(_DWORD *)(a1 - 16), v25 >= v24)
        && (v24 < v25 || *(void *)(a1 - 8) >= *(void *)(a1 + 16)))
      {
        unint64_t v11 = (__n128 *)sub_2A0A30((uint64_t *)a1, (unint64_t)a2);
        goto LABEL_21;
      }
    }
LABEL_16:
    BOOL v26 = sub_2A0D50((unsigned int *)a1, (unint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_19;
    }
    double v28 = sub_2A1058(a1, v26);
    unint64_t v11 = (__n128 *)(v26 + 6);
    if (sub_2A1058((uint64_t)(v26 + 6), (unsigned int *)a2))
    {
      a4 = -v13;
      a2 = (__n128 *)v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_19:
      sub_29FDD0(a1, v26, a3, -v13, a5 & 1);
      unint64_t v11 = (__n128 *)(v26 + 6);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_2A032C((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    sub_2A04DC((uint64_t)v11, (uint64_t)a2);
  }
}

  double v40 = (unint64_t *)(a2 - 5);
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v29 = *(a2 - 5);
          double v30 = *(void *)a1;
          if (v29 >= *(void *)a1)
          {
            if (v29 != *(void *)a1) {
              return;
            }
            double v39 = *((_DWORD *)a2 - 2);
            unint64_t v31 = *(_DWORD *)(a1 + 32);
            if (v39 == v31) {
              return;
            }
            if (v39 && v31)
            {
              if (__clz(__rbit32(v39)) >= __clz(__rbit32(v31))) {
                return;
              }
            }
            else if (v31)
            {
              return;
            }
          }
          else
          {
            unint64_t v31 = *(_DWORD *)(a1 + 32);
          }
          unint64_t v32 = *(void *)(a1 + 24);
          double v33 = *(_OWORD *)(a1 + 8);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)a1 = *(a2 - 5);
          *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 - 2);
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(a2 - 2);
          *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
          *(a2 - 5) = v30;
          *((_OWORD *)a2 - 2) = v33;
          *(a2 - 2) = v32;
          *((_DWORD *)a2 - 2) = v31;
          return;
        case 3uLL:
          sub_3102EC((unint64_t *)a1, (unint64_t *)(a1 + 40), v40);
          return;
        case 4uLL:
          sub_311150(a1, a1 + 40, a1 + 80, (uint64_t)v40);
          return;
        case 5uLL:
          sub_311354(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)v40);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 959) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)a1 != a2)
      {
        double v34 = (v15 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (unint64_t *)(a1 + 40 * v34);
        do
        {
          sub_3115FC(a1, a3, v15, v36);
          v36 -= 5;
          --v35;
        }
        while (v35);
        double v37 = v14 / 0x28uLL;
        do
        {
          sub_311860(a1, (uint64_t)a2, a3, v37);
          a2 -= 5;
        }
        while (v37-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (unint64_t *)(a1 + 40 * (v15 >> 1));
    if ((unint64_t)v14 < 0x1401)
    {
      sub_3102EC(v17, (unint64_t *)a1, v40);
      if (a5) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_3102EC((unint64_t *)a1, v17, v40);
      unint64_t v18 = a1 + 40 * v16;
      sub_3102EC((unint64_t *)(a1 + 40), (unint64_t *)(v18 - 40), (unint64_t *)a2 - 10);
      sub_3102EC((unint64_t *)(a1 + 80), (unint64_t *)(a1 + 40 + 40 * v16), (unint64_t *)a2 - 15);
      sub_3102EC((unint64_t *)(v18 - 40), v17, (unint64_t *)(a1 + 40 + 40 * v16));
      unint64_t v19 = *(void *)a1;
      uint64_t v20 = *(void *)(a1 + 24);
      double v21 = *(_OWORD *)(a1 + 8);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      uint64_t v22 = *(_DWORD *)(a1 + 32);
      *(void *)a1 = *v17;
      *(void *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v18 + 8);
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v18 + 24);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *unint64_t v17 = v19;
      *(_OWORD *)(v18 + 8) = v21;
      *(void *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
      *(_DWORD *)(v18 + 32) = v22;
      if (a5) {
        goto LABEL_19;
      }
    }
    unint64_t v23 = *(void *)(a1 - 40);
    if (v23 >= *(void *)a1)
    {
      if (v23 != *(void *)a1 || (uint64_t v24 = *(_DWORD *)(a1 - 8), v25 = *(_DWORD *)(a1 + 32), v24 == v25))
      {
LABEL_23:
        unint64_t v11 = sub_3105E8((uint64_t *)a1, (unint64_t)a2);
        goto LABEL_24;
      }
      if (v24 && v25)
      {
        if (__clz(__rbit32(v24)) >= __clz(__rbit32(v25))) {
          goto LABEL_23;
        }
      }
      else if (v25)
      {
        goto LABEL_23;
      }
    }
LABEL_19:
    BOOL v26 = sub_3109A0((uint64_t *)a1, (unint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_22;
    }
    double v28 = sub_310D60(a1, v26);
    unint64_t v11 = v26 + 40;
    if (sub_310D60(v26 + 40, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_22:
      sub_30FA14(a1, v26, a3, -v13, a5 & 1);
      unint64_t v11 = v26 + 40;
LABEL_24:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_30FF18((uint64_t *)a1, a2);
  }
  else
  {
    sub_310110((uint64_t *)a1, a2);
  }
}

  long long v54 = a2 - 5;
  unint64_t v11 = (const void **)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v36 = (void **)(a2 - 5);
          double v37 = *(char *)(a1 + 23);
          double v38 = *(const void **)a1;
          double v39 = *((char *)a2 - 17);
          if (v39 >= 0) {
            double v40 = *((unsigned __int8 *)a2 - 17);
          }
          else {
            double v40 = (size_t)*(a2 - 4);
          }
          if (v39 >= 0) {
            float64x2_t v41 = a2 - 5;
          }
          else {
            float64x2_t v41 = (const void **)*(a2 - 5);
          }
          if (v37 >= 0) {
            unint64_t v42 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            unint64_t v42 = *(void *)(a1 + 8);
          }
          if (v37 >= 0) {
            BOOL v43 = (const void *)a1;
          }
          else {
            BOOL v43 = *(const void **)a1;
          }
          if (v42 >= v40) {
            uint64_t v44 = v40;
          }
          else {
            uint64_t v44 = v42;
          }
          uint64_t v45 = memcmp(v41, v43, v44);
          unint64_t v46 = v40 < v42;
          if (v45) {
            unint64_t v46 = v45 < 0;
          }
          if (v46)
          {
            *(void *)unint64_t v60 = *(void *)(a1 + 8);
            *(void *)&v60[7] = *(void *)(a1 + 15);
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            float64x2_t v58 = *(_DWORD *)(a1 + 32);
            unint64_t v56 = *(const void **)(a1 + 24);
            unint64_t v47 = *(_OWORD *)v36;
            *(void *)(a1 + 16) = *(a2 - 3);
            *(_OWORD *)a1 = v47;
            double v48 = (uint64_t)*(a2 - 2);
            *((unsigned char *)a2 - 17) = 0;
            *((unsigned char *)a2 - 40) = 0;
            *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
            *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v48;
            if (*((char *)a2 - 17) < 0) {
              operator delete(*v36);
            }
            *(a2 - 5) = v38;
            *(a2 - 4) = *(const void **)v60;
            *(const void **)((char *)a2 - 25) = *(const void **)&v60[7];
            *((unsigned char *)a2 - 17) = v37;
            *(a2 - 2) = v56;
            *((_DWORD *)a2 - 2) = v58;
          }
          break;
        case 3uLL:
          sub_314158(a1, a1 + 40, v54);
          break;
        case 4uLL:
          sub_315264(a1, a1 + 40, a1 + 80, v54);
          break;
        case 5uLL:
          sub_3155B8(a1, a1 + 40, a1 + 80, a1 + 120, v54);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v12 == 1)
    {
      if ((const void **)a1 != a2)
      {
        double v49 = (v15 - 2) >> 1;
        double v50 = v49 + 1;
        float64x2_t v51 = (__n128 *)(a1 + 40 * v49);
        do
        {
          sub_315A00(a1, a3, 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3), v51);
          float64x2_t v51 = (__n128 *)((char *)v51 - 40);
          --v50;
        }
        while (v50);
        uint64_t v52 = v14 / 0x28uLL;
        do
        {
          sub_315D24(a1, (uint64_t)a2, a3, v52);
          a2 -= 5;
        }
        while (v52-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = a1 + 40 * (v15 >> 1);
    if ((unint64_t)v14 < 0x1401)
    {
      sub_314158(v17, a1, v54);
      if (a5) {
        goto LABEL_29;
      }
    }
    else
    {
      sub_314158(a1, v17, v54);
      unint64_t v18 = a1 + 40 * v16;
      sub_314158(a1 + 40, v18 - 40, a2 - 10);
      sub_314158(a1 + 80, a1 + 40 + 40 * v16, a2 - 15);
      sub_314158(v18 - 40, v17, (const void **)(a1 + 40 + 40 * v16));
      unint64_t v19 = *(const void **)a1;
      *(void *)&double v59 = *(void *)(a1 + 8);
      *(void *)((char *)&v59 + 7) = *(void *)(a1 + 15);
      uint64_t v20 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      unint64_t v57 = *(_DWORD *)(a1 + 32);
      unint64_t v55 = *(void *)(a1 + 24);
      double v21 = *(void *)(v17 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v17;
      uint64_t v22 = *(void *)(v18 + 24);
      unint64_t v23 = *(_DWORD *)(v18 + 32);
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v22;
      *(unsigned char *)(v17 + 23) = 0;
      *(_DWORD *)(a1 + 32) = v23;
      *(void *)unint64_t v17 = v19;
      *(void *)(v17 + 8) = v59;
      *(void *)(v17 + 15) = *(void *)((char *)&v59 + 7);
      *(unsigned char *)(v17 + 23) = v20;
      *(_DWORD *)(v18 + 32) = v57;
      *(void *)(v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v55;
      if (a5) {
        goto LABEL_29;
      }
    }
    uint64_t v24 = *(char *)(a1 + 23);
    char v25 = *(char *)(a1 - 17);
    if (v25 >= 0) {
      BOOL v26 = *(unsigned __int8 *)(a1 - 17);
    }
    else {
      BOOL v26 = *(void *)(a1 - 32);
    }
    if (v25 >= 0) {
      unint64_t v27 = (const void *)(a1 - 40);
    }
    else {
      unint64_t v27 = *(const void **)(a1 - 40);
    }
    if (v24 >= 0) {
      double v28 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      double v28 = *(void *)(a1 + 8);
    }
    if (v24 >= 0) {
      double v29 = (const void *)a1;
    }
    else {
      double v29 = *(const void **)a1;
    }
    if (v28 >= v26) {
      double v30 = v26;
    }
    else {
      double v30 = v28;
    }
    unint64_t v31 = memcmp(v27, v29, v30);
    unint64_t v32 = v26 < v28;
    if (v31) {
      unint64_t v32 = v31 < 0;
    }
    if (!v32)
    {
      unint64_t v11 = sub_314678(a1, a2);
      goto LABEL_34;
    }
LABEL_29:
    double v33 = (const void **)sub_314A64(a1, (uint64_t)a2);
    if ((v34 & 1) == 0) {
      goto LABEL_32;
    }
    unint64_t v35 = sub_314E44(a1, v33);
    unint64_t v11 = v33 + 5;
    if (sub_314E44((uint64_t)(v33 + 5), a2))
    {
      a4 = -v13;
      a2 = v33;
      if (v35) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v35)
    {
LABEL_32:
      sub_313704(a1, v33, a3, -v13, a5 & 1);
      unint64_t v11 = v33 + 5;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_313D58(a1, (char *)a2);
  }
  else
  {
    sub_313F68((const void **)a1, a2);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = (uint64_t)((uint64_t)a2 - v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v25 = a2 - 2;
          BOOL v26 = *((void *)a2 - 4);
          if (v26 < *(void *)v11 || *(void *)v11 >= v26 && *((_DWORD *)a2 - 6) < *(_DWORD *)(v11 + 8))
          {
            *(_OWORD *)int v61 = *(_OWORD *)v11;
            *(_OWORD *)&v61[16] = *(_OWORD *)(v11 + 16);
            unint64_t v27 = *v25;
            *(_OWORD *)(v11 + 9) = *(long long *)((char *)a2 - 23);
            *(_OWORD *)unint64_t v11 = v27;
            *char v25 = *(_OWORD *)v61;
            *(long long *)((char *)a2 - 23) = *(_OWORD *)&v61[9];
          }
          break;
        case 3uLL:
          sub_33177C((long long *)v11, (uint64_t *)(v11 + 32), a2 - 2);
          break;
        case 4uLL:
          double v28 = (long long *)(v11 + 32);
          double v29 = (long long *)(v11 + 64);
          sub_33177C((long long *)v11, (uint64_t *)(v11 + 32), (long long *)(v11 + 64));
          double v30 = a2 - 2;
          unint64_t v31 = *((void *)a2 - 4);
          unint64_t v32 = *(void *)(v11 + 64);
          if (v31 < v32 || v32 >= v31 && *((_DWORD *)a2 - 6) < *(_DWORD *)(v11 + 72))
          {
            *(_OWORD *)double v62 = *v29;
            double v33 = *v29;
            *(_OWORD *)&v62[16] = *(_OWORD *)(v11 + 80);
            double v34 = *(long long *)((char *)a2 - 23);
            *double v29 = *v30;
            *(_OWORD *)(v11 + 73) = v34;
            float64x2_t *v30 = v33;
            *(long long *)((char *)a2 - 23) = *(_OWORD *)&v62[9];
            unint64_t v35 = *(void *)(v11 + 32);
            unint64_t v36 = *(void *)(v11 + 64);
            if (v36 < v35 || v35 >= v36 && *(_DWORD *)(v11 + 72) < *(_DWORD *)(v11 + 40))
            {
              *(_OWORD *)float64_t v63 = *v28;
              double v37 = *v28;
              *(_OWORD *)&v63[16] = *(_OWORD *)(v11 + 48);
              char *v28 = *v29;
              *(_OWORD *)(v11 + 41) = *(_OWORD *)(v11 + 73);
              *double v29 = v37;
              *(_OWORD *)(v11 + 73) = *(_OWORD *)&v63[9];
              double v38 = *(void *)(v11 + 32);
              if (v38 < *(void *)v11 || *(void *)v11 >= v38 && *(_DWORD *)(v11 + 40) < *(_DWORD *)(v11 + 8))
              {
                *(_OWORD *)unint64_t v64 = *(_OWORD *)v11;
                *(_OWORD *)&v64[16] = *(_OWORD *)(v11 + 16);
                *(_OWORD *)unint64_t v11 = *v28;
                *(_OWORD *)(v11 + 9) = *(_OWORD *)(v11 + 41);
                char *v28 = *(_OWORD *)v64;
                *(_OWORD *)(v11 + 41) = *(_OWORD *)&v64[9];
              }
            }
          }
          break;
        case 5uLL:
          sub_33200C(v11, (long long *)(v11 + 32), (long long *)(v11 + 64), (long long *)(v11 + 96), a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767)
    {
      double v39 = (long long *)(v11 + 32);
      float64x2_t v41 = (long long *)v11 == a2 || v39 == a2;
      if (a5)
      {
        if (v41) {
          return;
        }
        unint64_t v42 = 0;
        BOOL v43 = (_OWORD *)v11;
        while (2)
        {
          uint64_t v44 = v43;
          BOOL v43 = v39;
          uint64_t v45 = *((void *)v44 + 4);
          if (v45 < *(void *)v44)
          {
            unint64_t v46 = *((_DWORD *)v44 + 10);
            goto LABEL_52;
          }
          if (*(void *)v44 >= v45)
          {
            unint64_t v46 = *((_DWORD *)v44 + 10);
            if (v46 < *((_DWORD *)v44 + 2))
            {
LABEL_52:
              unint64_t v65 = *(_OWORD *)((char *)v44 + 44);
              unint64_t *v43 = *v44;
              *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)v44 + 9);
              unint64_t v47 = v11;
              if (v44 != (_OWORD *)v11)
              {
                double v48 = v42;
                while (1)
                {
                  double v49 = (_OWORD *)(v11 + v48);
                  double v50 = *(void *)(v11 + v48 - 32);
                  if (v45 >= v50)
                  {
                    if (v50 < v45)
                    {
                      unint64_t v47 = v11 + v48;
                      goto LABEL_46;
                    }
                    if (v46 >= *((_DWORD *)v49 - 6)) {
                      break;
                    }
                  }
                  v44 -= 2;
                  *double v49 = *(_OWORD *)(v11 + v48 - 32);
                  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)(v11 + v48 - 23);
                  v48 -= 32;
                  if (!v48)
                  {
                    unint64_t v47 = v11;
                    goto LABEL_46;
                  }
                }
                unint64_t v47 = (unint64_t)v44;
              }
LABEL_46:
              *(void *)unint64_t v47 = v45;
              *(_DWORD *)(v47 + 8) = v46;
              *(void *)(v47 + 12) = v65;
              *(void *)(v47 + 17) = *(void *)((char *)&v65 + 5);
            }
          }
          double v39 = v43 + 2;
          v42 += 32;
          if (v43 + 2 == a2) {
            return;
          }
          continue;
        }
      }
      if (v41) {
        return;
      }
      while (2)
      {
        long long v54 = a1;
        a1 = (unint64_t)v39;
        unint64_t v55 = *(void *)(v54 + 32);
        if (v55 >= *(void *)v54)
        {
          if (*(void *)v54 >= v55)
          {
            unint64_t v56 = *(_DWORD *)(v54 + 40);
            if (v56 < *(_DWORD *)(v54 + 8)) {
              goto LABEL_81;
            }
          }
        }
        else
        {
          unint64_t v56 = *(_DWORD *)(v54 + 40);
LABEL_81:
          double v66 = *(_OWORD *)(v54 + 44);
          do
          {
            do
            {
              unint64_t v57 = v54;
              *(_OWORD *)(v54 + 32) = *(_OWORD *)v54;
              *(_OWORD *)(v54 + 41) = *(_OWORD *)(v54 + 9);
              double v59 = *(void *)(v54 - 32);
              v54 -= 32;
              float64x2_t v58 = v59;
            }
            while (v55 < v59);
          }
          while (v58 >= v55 && v56 < *(_DWORD *)(v57 - 24));
          *(void *)unint64_t v57 = v55;
          *(_DWORD *)(v57 + 8) = v56;
          *(void *)(v57 + 12) = v66;
          *(void *)(v57 + 17) = *(void *)((char *)&v66 + 5);
        }
        double v39 = (long long *)(a1 + 32);
        if ((long long *)(a1 + 32) == a2) {
          return;
        }
        continue;
      }
    }
    if (v13 == 1) {
      break;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)(v11 + 32 * (v15 >> 1));
    if ((unint64_t)v14 <= 0x1000)
    {
      sub_33177C(v17, (uint64_t *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_33177C((long long *)v11, (uint64_t *)v17, a2 - 2);
      unint64_t v18 = 32 * v16;
      unint64_t v19 = (uint64_t *)(32 * v16 + v11 - 32);
      sub_33177C((long long *)(v11 + 32), v19, a2 - 4);
      sub_33177C((long long *)(v11 + 64), (uint64_t *)(v11 + 32 + v18), a2 - 6);
      sub_33177C((long long *)v19, (uint64_t *)v17, (long long *)(v11 + 32 + v18));
      *(_OWORD *)unint64_t v60 = *(_OWORD *)v11;
      *(_OWORD *)&v60[16] = *(_OWORD *)(v11 + 16);
      uint64_t v20 = *v17;
      *(_OWORD *)(v11 + 9) = *(long long *)((char *)v17 + 9);
      *(_OWORD *)unint64_t v11 = v20;
      *(long long *)((char *)v17 + 9) = *(_OWORD *)&v60[9];
      *unint64_t v17 = *(_OWORD *)v60;
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(void *)(v11 - 32);
    if (v21 >= *(void *)v11 && (*(void *)v11 < v21 || *(_DWORD *)(v11 - 24) >= *(_DWORD *)(v11 + 8)))
    {
      unint64_t v11 = sub_331960((uint64_t *)v11, a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v22 = sub_331AD8((uint64_t *)v11, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
    uint64_t v24 = sub_331C50(v11, v22);
    unint64_t v11 = v22 + 32;
    if (sub_331C50(v22 + 32, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (long long *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_17:
      sub_331104(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 32;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((long long *)v11 != a2)
  {
    float64x2_t v51 = (v15 - 2) >> 1;
    uint64_t v52 = v51 + 1;
    double v53 = (uint64_t *)(v11 + 32 * v51);
    do
    {
      sub_3322A0(v11, a3, (uint64_t)((uint64_t)a2 - v11) >> 5, v53);
      v53 -= 4;
      --v52;
    }
    while (v52);
    sub_332418((char *)v11, (char *)a2);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v33 = (long long *)((char *)a2 - 40);
          if (*((_DWORD *)a2 - 10))
          {
            if (*((_DWORD *)a2 - 8))
            {
              if (!*(_DWORD *)v11
                || !*(_DWORD *)(v11 + 8)
                || (*(void *)&double v38 = (char *)a2 - 40,
                    *((void *)&v38 + 1) = a2 - 2,
                    *(void *)&double v39 = (char *)a2 - 24,
                    float64x2_t v41 = v11,
                    unint64_t v42 = v11 + 8,
                    BOOL v43 = v11 + 16,
                    sub_333D90((uint64_t)&v44, (unsigned int **)&v38, (uint64_t)&v41)))
              {
                double v34 = *(_OWORD *)v11;
                unint64_t v35 = *(_OWORD *)(v11 + 16);
                double v40 = *(void *)(v11 + 32);
                double v38 = v34;
                double v39 = v35;
                unint64_t v36 = *v33;
                double v37 = *(long long *)((char *)a2 - 24);
                *(_WORD *)(v11 + 32) = *((_WORD *)a2 - 4);
                *(_OWORD *)unint64_t v11 = v36;
                *(_OWORD *)(v11 + 16) = v37;
                *double v33 = v38;
                *(long long *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v39;
                *((_WORD *)a2 - 4) = v40;
              }
            }
          }
          break;
        case 3uLL:
          sub_332EA0((long long *)v11, (long long *)(v11 + 40), (long long *)((char *)a2 - 40));
          break;
        case 4uLL:
          sub_333EAC(v11, v11 + 40, v11 + 80, (uint64_t)a2 - 40);
          break;
        case 5uLL:
          sub_33404C(v11, v11 + 40, v11 + 80, v11 + 120, (uint64_t)a2 - 40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959)
    {
      if (a5) {
        sub_332B10(v11, a2);
      }
      else {
        sub_332CD8(v11, (uint64_t *)a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 40 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x1401)
    {
      sub_332EA0((long long *)v11, (long long *)(v11 + 40 * (v15 >> 1)), (long long *)((char *)a2 - 40));
      unint64_t v18 = 40 * v16;
      unint64_t v19 = (long long *)(40 * v16 + v11 - 40);
      sub_332EA0((long long *)(v11 + 40), v19, a2 - 5);
      uint64_t v20 = (long long *)(v11 + 80);
      double v21 = (long long *)(v11 + 40 + v18);
      sub_332EA0(v20, v21, (long long *)((char *)a2 - 120));
      sub_332EA0(v19, (long long *)v17, v21);
      uint64_t v22 = *(_OWORD *)a1;
      unint64_t v23 = *(_OWORD *)(a1 + 16);
      double v40 = *(void *)(a1 + 32);
      double v38 = v22;
      double v39 = v23;
      uint64_t v24 = *(_OWORD *)v17;
      char v25 = *(_OWORD *)(v17 + 16);
      *(_WORD *)(a1 + 32) = *(_WORD *)(v17 + 32);
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v25;
      BOOL v26 = v38;
      unint64_t v27 = v39;
      *(_WORD *)(v17 + 32) = v40;
      *(_OWORD *)unint64_t v17 = v26;
      *(_OWORD *)(v17 + 16) = v27;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_332EA0((long long *)(v11 + 40 * (v15 >> 1)), (long long *)v11, (long long *)((char *)a2 - 40));
      if (a5) {
        goto LABEL_17;
      }
    }
    if (!*(_DWORD *)(a1 - 40)
      || !*(_DWORD *)(a1 - 32)
      || *(_DWORD *)a1
      && *(_DWORD *)(a1 + 8)
      && (*(void *)&double v38 = a1 - 40,
          *((void *)&v38 + 1) = a1 - 32,
          *(void *)&double v39 = a1 - 24,
          float64x2_t v41 = a1,
          unint64_t v42 = a1 + 8,
          BOOL v43 = a1 + 16,
          !sub_333D90((uint64_t)&v44, (unsigned int **)&v38, (uint64_t)&v41)))
    {
      unint64_t v11 = sub_333178((long long *)a1, (unint64_t)a2);
      goto LABEL_22;
    }
LABEL_17:
    double v29 = sub_333604(a1, a2);
    double v30 = (long long *)v28;
    if ((v31 & 1) == 0) {
      goto LABEL_20;
    }
    unint64_t v32 = sub_333A68(a1, v28);
    unint64_t v11 = (unint64_t)v30 + 40;
    if (sub_333A68((uint64_t)v30 + 40, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v30;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v32)
    {
LABEL_20:
      sub_332744(a1, v30, a3, -v13, a5 & 1, v29);
      unint64_t v11 = (unint64_t)v30 + 40;
LABEL_22:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((long long *)v11 != a2) {
    sub_334268(v11, (unint64_t)a2, (unint64_t)a2, a3);
  }
}

  unint64_t v11 = (void *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = a2 - (void)v11;
    uint64_t v14 = v13 >> 4;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          BOOL v26 = (uint64_t *)(a2 - 16);
          unint64_t v27 = (*(void *)(a2 - 16) >> 16) & 0xFFFF0000 | (*(void *)(a2 - 16) << 32) | ((*(void *)(a2 - 16) & 0xFF000000000000) == 0);
          double v28 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
          if (v27 < v28 || (v28 >= v27 ? (double v29 = *(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 8)) : (double v29 = 1), !v29))
          {
            unint64_t v64 = *(_OWORD *)a1;
            double v30 = *v26;
            *(void *)(a1 + 7) = *(void *)(a2 - 9);
            *(void *)a1 = v30;
            *BOOL v26 = v64;
            *(void *)(a2 - 9) = *(void *)((char *)&v64 + 7);
          }
          break;
        case 3uLL:
          sub_33CCA0((long long *)a1, (long long *)(a1 + 16), a2 - 16);
          break;
        case 4uLL:
          sub_33D640(a1, a1 + 16, a1 + 32, a2 - 16);
          break;
        case 5uLL:
          sub_33D800(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 383)
    {
      unint64_t v31 = (void *)(a1 + 16);
      double v33 = a1 == a2 || v31 == (void *)a2;
      if (a5)
      {
        if (v33) {
          return;
        }
        double v34 = 0;
        unint64_t v35 = (void *)a1;
        while (2)
        {
          unint64_t v36 = v31;
          double v37 = v35[2];
          double v38 = (v37 >> 16) & 0xFFFF0000 | (v37 << 32) | ((v37 & 0xFF000000000000) == 0);
          double v39 = (*v35 >> 16) & 0xFFFF0000 | (*v35 << 32) | ((*v35 & 0xFF000000000000) == 0);
          if (v38 < v39)
          {
            double v40 = *((_DWORD *)v35 + 6);
            goto LABEL_55;
          }
          double v40 = *((_DWORD *)v35 + 6);
          if (v39 >= v38 && v40 < *((_DWORD *)v35 + 2))
          {
LABEL_55:
            unint64_t v42 = *((_DWORD *)v35 + 7);
            *unint64_t v36 = *v35;
            *(void *)((char *)v36 + 7) = *(void *)((char *)v35 + 7);
            BOOL v43 = a1;
            if (v35 != (void *)a1)
            {
              uint64_t v44 = v34;
              while (1)
              {
                uint64_t v45 = (void *)(a1 + v44);
                unint64_t v46 = (*(void *)(a1 + v44 - 16) >> 16) & 0xFFFF0000 | (*(void *)(a1 + v44 - 16) << 32) | ((*(void *)(a1 + v44 - 16) & 0xFF000000000000) == 0);
                if (v38 >= v46 && (v46 < v38 || v40 >= *((_DWORD *)v45 - 2))) {
                  break;
                }
                *uint64_t v45 = *(void *)(a1 + v44 - 16);
                *(void *)((char *)v45 + 7) = *(void *)(a1 + v44 - 9);
                v44 -= 16;
                if (!v44)
                {
                  BOOL v43 = a1;
                  goto LABEL_47;
                }
              }
              BOOL v43 = a1 + v44;
            }
LABEL_47:
            *(void *)BOOL v43 = v37;
            *(_DWORD *)(v43 + 8) = v40;
            *(_WORD *)(v43 + 12) = v42;
            *(unsigned char *)(v43 + 14) = BYTE2(v42);
          }
          unint64_t v31 = v36 + 2;
          v34 += 16;
          unint64_t v35 = v36;
          if (v36 + 2 == (void *)a2) {
            return;
          }
          continue;
        }
      }
      if (v33) {
        return;
      }
      while (2)
      {
        double v53 = v31;
        long long v54 = *(void *)(a1 + 16);
        unint64_t v55 = (v54 >> 16) & 0xFFFF0000 | (v54 << 32) | ((v54 & 0xFF000000000000) == 0);
        unint64_t v56 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
        if (v55 >= v56)
        {
          unint64_t v57 = *(_DWORD *)(a1 + 24);
          if (v56 >= v55 && v57 < *(_DWORD *)(a1 + 8)) {
            goto LABEL_81;
          }
        }
        else
        {
          unint64_t v57 = *(_DWORD *)(a1 + 24);
LABEL_81:
          double v59 = *(_DWORD *)(a1 + 28);
          for (double i = v53; ; i -= 2)
          {
            *double i = *(i - 2);
            *(void *)((char *)i + 7) = *(void *)((char *)i - 9);
            int v61 = (*(i - 4) >> 16) & 0xFFFF0000 | (*(i - 4) << 32) | ((*(i - 4) & 0xFF000000000000) == 0);
            if (v55 >= v61 && (v61 < v55 || v57 >= *((_DWORD *)i - 6))) {
              break;
            }
          }
          *(i - 2) = v54;
          *((_DWORD *)i - 2) = v57;
          *((_WORD *)i - 2) = v59;
          *((unsigned char *)i - 2) = BYTE2(v59);
        }
        unint64_t v31 = v53 + 2;
        a1 = (uint64_t)v53;
        if (v53 + 2 == (void *)a2) {
          return;
        }
        continue;
      }
    }
    unint64_t v15 = v12;
    if (v12 == 1) {
      break;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = a1 + 16 * (v14 >> 1);
    if ((unint64_t)v13 < 0x801)
    {
      sub_33CCA0((long long *)v17, (long long *)a1, a2 - 16);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_33CCA0((long long *)a1, (long long *)v17, a2 - 16);
      unint64_t v18 = 16 * v16;
      unint64_t v19 = (long long *)(16 * v16 + a1 - 16);
      sub_33CCA0((long long *)(a1 + 16), v19, a2 - 32);
      sub_33CCA0((long long *)(a1 + 32), (long long *)(a1 + 16 + v18), a2 - 48);
      sub_33CCA0(v19, (long long *)v17, a1 + 16 + v18);
      float64_t v63 = *(_OWORD *)a1;
      uint64_t v20 = *(void *)v17;
      *(void *)(a1 + 7) = *(void *)(v17 + 7);
      *(void *)a1 = v20;
      *(void *)(v17 + 7) = *(void *)((char *)&v63 + 7);
      *(void *)unint64_t v17 = v63;
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = (*(void *)(a1 - 16) >> 16) & 0xFFFF0000 | (*(void *)(a1 - 16) << 32) | ((*(void *)(a1 - 16) & 0xFF000000000000) == 0);
    uint64_t v22 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
    if (v21 >= v22 && (v22 < v21 || *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 8)))
    {
      unint64_t v11 = sub_33CF10((uint64_t *)a1, a2);
      goto LABEL_18;
    }
LABEL_14:
    unint64_t v23 = sub_33D120((uint64_t *)a1, a2);
    if ((v24 & 1) == 0) {
      goto LABEL_17;
    }
    char v25 = sub_33D324(a1, v23);
    unint64_t v11 = (void *)(v23 + 16);
    if (sub_33D324(v23 + 16, a2))
    {
      a4 = -v15;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v25)
    {
LABEL_17:
      sub_33C650(a1, v23, a3, -v15, a5 & 1);
      unint64_t v11 = (void *)(v23 + 16);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a1 != a2)
  {
    double v48 = (v14 - 2) >> 1;
    double v49 = v48 + 1;
    double v50 = (unint64_t *)(a1 + 16 * v48);
    do
    {
      sub_33DA4C(a1, a3, v13 >> 4, v50);
      v50 -= 2;
      --v49;
    }
    while (v49);
    float64x2_t v51 = (unint64_t)v13 >> 4;
    do
    {
      sub_33DC28((_OWORD *)a1, a2, a3, v51);
      a2 -= 16;
    }
    while (v51-- > 2);
  }
}

  unint64_t v11 = (long long *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = a2 - (void)v11;
    uint64_t v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = (long long *)(a2 - 32);
          double v28 = *(void *)(a2 - 32);
          if (v28 < *(void *)a1
            || *(void *)a1 >= v28
            && ((double v29 = *(_DWORD *)(a1 + 8), v30 = *(_DWORD *)(a2 - 24), v30 < v29)
             || v29 >= v30 && *(void *)(a2 - 16) < *(void *)(a1 + 16)))
          {
            double v67 = *(_OWORD *)a1;
            double v69 = *(_OWORD *)(a1 + 16);
            unint64_t v31 = *(_OWORD *)(a2 - 16);
            *(_OWORD *)a1 = *v27;
            *(_OWORD *)(a1 + 16) = v31;
            void *v27 = v67;
            *(_OWORD *)(a2 - 16) = v69;
          }
          break;
        case 3uLL:
          sub_33E410((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a2 - 32));
          break;
        case 4uLL:
          sub_33ECD4(a1, (__n128 *)(a1 + 32), a1 + 64, a2 - 32);
          break;
        case 5uLL:
          sub_33EE08(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 767)
    {
      unint64_t v32 = (_OWORD *)(a1 + 32);
      double v34 = a1 == a2 || v32 == (_OWORD *)a2;
      if (a5)
      {
        if (v34) {
          return;
        }
        unint64_t v35 = 0;
        unint64_t v36 = (_OWORD *)a1;
        while (2)
        {
          double v37 = v36;
          unint64_t v36 = v32;
          double v38 = *((void *)v37 + 4);
          if (v38 < *(void *)v37)
          {
            double v39 = *((_DWORD *)v37 + 10);
            goto LABEL_53;
          }
          if (*(void *)v37 >= v38)
          {
            double v49 = *((_DWORD *)v37 + 2);
            double v39 = *((_DWORD *)v37 + 10);
            if (v39 < v49 || v49 >= v39 && *((void *)v37 + 6) < *((void *)v37 + 2))
            {
LABEL_53:
              double v40 = *((_DWORD *)v37 + 11);
              float64x2_t v41 = v37[3];
              unint64_t v42 = v37[1];
              *unint64_t v36 = *v37;
              v36[1] = v42;
              BOOL v43 = a1;
              if (v37 != (_OWORD *)a1)
              {
                uint64_t v44 = v35;
                while (1)
                {
                  unint64_t v46 = (_OWORD *)(a1 + v44);
                  unint64_t v47 = *(void *)(a1 + v44 - 32);
                  if (v38 >= v47)
                  {
                    if (v47 < v38) {
                      break;
                    }
                    double v48 = *((_DWORD *)v46 - 6);
                    if (v39 >= v48)
                    {
                      if (v48 < v39)
                      {
                        BOOL v43 = a1 + v44;
                        goto LABEL_49;
                      }
                      if ((unint64_t)v41 >= *((void *)v46 - 2)) {
                        break;
                      }
                    }
                  }
                  v37 -= 2;
                  uint64_t v45 = *(_OWORD *)(a1 + v44 - 16);
                  double *v46 = *(_OWORD *)(a1 + v44 - 32);
                  v46[1] = v45;
                  v44 -= 32;
                  if (!v44)
                  {
                    BOOL v43 = a1;
                    goto LABEL_49;
                  }
                }
                BOOL v43 = (uint64_t)v37;
              }
LABEL_49:
              *(void *)BOOL v43 = v38;
              *(_DWORD *)(v43 + 8) = v39;
              *(_DWORD *)(v43 + 12) = v40;
              *(_OWORD *)(v43 + 16) = v41;
            }
          }
          unint64_t v32 = v36 + 2;
          v35 += 32;
          if (v36 + 2 == (_OWORD *)a2) {
            return;
          }
          continue;
        }
      }
      if (v34) {
        return;
      }
      while (2)
      {
        unint64_t v55 = a1;
        a1 = (uint64_t)v32;
        unint64_t v56 = *(void *)(v55 + 32);
        if (v56 >= *(void *)v55)
        {
          if (*(void *)v55 >= v56)
          {
            unint64_t v65 = *(_DWORD *)(v55 + 8);
            unint64_t v57 = *(_DWORD *)(v55 + 40);
            if (v57 < v65 || v65 >= v57 && *(void *)(v55 + 48) < *(void *)(v55 + 16)) {
              goto LABEL_81;
            }
          }
        }
        else
        {
          unint64_t v57 = *(_DWORD *)(v55 + 40);
LABEL_81:
          float64x2_t v58 = *(_DWORD *)(v55 + 44);
          double v59 = *(_OWORD *)(v55 + 48);
          unint64_t v60 = *(void *)(v55 + 48);
          for (double i = (_OWORD *)a1; ; i -= 2)
          {
            double v62 = *(i - 1);
            *double i = *(i - 2);
            i[1] = v62;
            float64_t v63 = *((void *)i - 8);
            if (v56 >= v63)
            {
              if (v63 < v56) {
                break;
              }
              unint64_t v64 = *((_DWORD *)i - 14);
              if (v57 >= v64 && (v64 < v57 || v60 >= *((void *)i - 6))) {
                break;
              }
            }
          }
          *((void *)i - 4) = v56;
          *((_DWORD *)i - 6) = v57;
          *((_DWORD *)i - 5) = v58;
          *(i - 1) = v59;
        }
        unint64_t v32 = (_OWORD *)(a1 + 32);
        if (a1 + 32 == a2) {
          return;
        }
        continue;
      }
    }
    unint64_t v15 = v12;
    if (v12 == 1) {
      break;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = (long long *)(a1 + 32 * (v14 >> 1));
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_33E410(v17, (uint64_t *)a1, (long long *)(a2 - 32));
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_33E410((long long *)a1, (uint64_t *)v17, (long long *)(a2 - 32));
      unint64_t v18 = 32 * v16;
      unint64_t v19 = (uint64_t *)(32 * v16 + a1 - 32);
      sub_33E410((long long *)(a1 + 32), v19, (long long *)(a2 - 64));
      sub_33E410((long long *)(a1 + 64), (uint64_t *)(a1 + 32 + v18), (long long *)(a2 - 96));
      sub_33E410((long long *)v19, (uint64_t *)v17, (long long *)(a1 + 32 + v18));
      double v66 = *(_OWORD *)a1;
      int v68 = *(_OWORD *)(a1 + 16);
      uint64_t v20 = v17[1];
      *(_OWORD *)a1 = *v17;
      *(_OWORD *)(a1 + 16) = v20;
      *unint64_t v17 = v66;
      v17[1] = v68;
      if (a5) {
        goto LABEL_16;
      }
    }
    double v21 = *(void *)(a1 - 32);
    if (v21 >= *(void *)a1)
    {
      if (*(void *)a1 < v21
        || (uint64_t v22 = *(_DWORD *)(a1 + 8), v23 = *(_DWORD *)(a1 - 24), v23 >= v22)
        && (v22 < v23 || *(void *)(a1 - 16) >= *(void *)(a1 + 16)))
      {
        unint64_t v11 = sub_33E630((long long *)a1, a2);
        goto LABEL_21;
      }
    }
LABEL_16:
    uint64_t v24 = sub_33E840((uint64_t *)a1, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v26 = sub_33E9F8(a1, v24);
    unint64_t v11 = (long long *)(v24 + 32);
    if (sub_33E9F8(v24 + 32, a2))
    {
      a4 = -v15;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v26)
    {
LABEL_19:
      sub_33DE40(a1, v24, a3, -v15, a5 & 1);
      unint64_t v11 = (long long *)(v24 + 32);
LABEL_21:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a1 != a2)
  {
    double v50 = (v14 - 2) >> 1;
    float64x2_t v51 = v50 + 1;
    uint64_t v52 = (uint64_t *)(a1 + 32 * v50);
    do
    {
      sub_33EFB0(a1, a3, v13 >> 5, v52);
      v52 -= 4;
      --v51;
    }
    while (v51);
    double v53 = (unint64_t)v13 >> 5;
    do
    {
      sub_33F160((_OWORD *)a1, a2, a3, v53);
      a2 -= 32;
    }
    while (v53-- > 2);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x8E38E38E38E38E39 * (v14 >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v35 = (unsigned int *)a2 - 30;
          unint64_t v36 = a2 - 9;
          double v37 = (unsigned int *)a2 - 22;
          double v38 = a2 - 6;
          double v39 = a2 - 4;
          double v40 = (unsigned int *)a2 - 10;
          double v29 = a1 + 6;
          double v30 = a1;
          unint64_t v31 = a1 + 14;
          unint64_t v32 = a1 + 12;
          double v33 = a1 + 20;
          double v34 = a1 + 26;
          if (sub_341B84((uint64_t)&v41, (uint64_t)&v35, (uint64_t)&v29)) {
            sub_341ED4((uint64_t)a1, (uint64_t)(a2 - 9));
          }
          break;
        case 3uLL:
          sub_340254((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)(a2 - 9));
          break;
        case 4uLL:
          sub_3421CC((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)(a1 + 72), (uint64_t)(a2 - 9));
          break;
        case 5uLL:
          sub_342320((uint64_t)a1, (uint64_t)(a1 + 36), (uint64_t)(a1 + 72), (uint64_t)(a1 + 108), (uint64_t)(a2 - 9));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 3455)
    {
      if (a5) {
        sub_33F72C((uint64_t)a1, a2);
      }
      else {
        sub_33FCF0(a1, a2);
      }
      return;
    }
    if (v12 == 1) {
      break;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t)&a1[36 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x4801)
    {
      sub_340254(v17, (uint64_t)a1, (uint64_t)(a2 - 9));
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_340254((uint64_t)a1, v17, (uint64_t)(a2 - 9));
      unint64_t v18 = 36 * v16;
      unint64_t v19 = (uint64_t)&a1[36 * v16 - 36];
      sub_340254((uint64_t)(a1 + 36), v19, (uint64_t)(a2 - 18));
      uint64_t v20 = (uint64_t)&a1[v18 + 36];
      sub_340254((uint64_t)(a1 + 72), v20, (uint64_t)(a2 - 27));
      sub_340254(v19, v17, v20);
      sub_341ED4((uint64_t)a1, v17);
      if (a5) {
        goto LABEL_12;
      }
    }
    unint64_t v35 = a1 - 30;
    unint64_t v36 = (long long *)(a1 - 36);
    double v37 = a1 - 22;
    double v38 = (long long *)(a1 - 24);
    double v39 = (long long *)(a1 - 16);
    double v40 = a1 - 10;
    double v29 = a1 + 6;
    double v30 = a1;
    unint64_t v31 = a1 + 14;
    unint64_t v32 = a1 + 12;
    double v33 = a1 + 20;
    double v34 = a1 + 26;
    if (!sub_341B84((uint64_t)&v41, (uint64_t)&v35, (uint64_t)&v29))
    {
      unint64_t v11 = sub_340460((uint64_t)a1, (unint64_t)a2);
      goto LABEL_17;
    }
LABEL_12:
    double v21 = sub_340D98((uint64_t)a1, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v23 = sub_34168C((uint64_t)a1, v21);
    unint64_t v11 = (unsigned int *)(v21 + 9);
    if (sub_34168C((uint64_t)(v21 + 9), a2))
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_15:
      sub_33F340(a1, v21, a3, -v13, a5 & 1);
      unint64_t v11 = (unsigned int *)(v21 + 9);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a1 != (unsigned int *)a2)
  {
    uint64_t v24 = (v15 - 2) >> 1;
    char v25 = v24 + 1;
    BOOL v26 = (uint64_t)&a1[36 * v24];
    do
    {
      sub_3424C4((uint64_t)a1, a3, 0x8E38E38E38E38E39 * (v14 >> 4), v26);
      v26 -= 144;
      --v25;
    }
    while (v25);
    unint64_t v27 = v14 / 0x90uLL;
    do
    {
      sub_342978((uint64_t)a1, (uint64_t)a2, a3, v27);
      a2 -= 9;
    }
    while (v27-- > 2);
  }
}

  uint64_t v10 = a2 - 1;
  unint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v12 = (uint64_t)a2 - j;
    uint64_t v13 = (uint64_t)((uint64_t)a2 - j) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v60 = a2 - 1;
          int v61 = *((void *)a2 - 2);
          if (v61 < *(void *)j
            || *(void *)j >= v61
            && ((double v62 = *(_DWORD *)(j + 8), v63 = *((_DWORD *)a2 - 2), v63 < v62)
             || v62 >= v63 && *((_DWORD *)a2 - 1) < *(_DWORD *)(j + 12)))
          {
            int v132 = *(_OWORD *)j;
            *(_OWORD *)unint64_t j = *v60;
            *unint64_t v60 = v132;
          }
          break;
        case 3uLL:
          sub_344EFC((long long *)j, (uint64_t *)(j + 16), a2 - 1);
          break;
        case 4uLL:
          sub_34535C(j, j + 16, j + 32, (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          sub_344D58(j, j + 16, j + 32, j + 48, (uint64_t)(a2 - 1));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if ((long long *)j != a2)
      {
        float64x2_t v79 = (v13 - 2) >> 1;
        float64x2_t v80 = v79;
        do
        {
          double v82 = v80;
          if (v79 >= v80)
          {
            double v83 = (2 * v80) | 1;
            float64x2_t v81 = (void *)(j + 16 * v83);
            if (2 * v82 + 2 < (uint64_t)v13)
            {
              double v84 = v81[2];
              if (*v81 < v84
                || v84 >= *v81
                && ((BOOL v85 = *((_DWORD *)v81 + 6), v86 = *((_DWORD *)v81 + 2), v86 < v85)
                 || v85 >= v86 && *((_DWORD *)v81 + 3) < *((_DWORD *)v81 + 7)))
              {
                v81 += 2;
                double v83 = 2 * v82 + 2;
              }
            }
            double v87 = (void *)(j + 16 * v82);
            long long v88 = *v87;
            if (*v81 >= *v87)
            {
              BOOL v89 = j + 16 * v82;
              unsigned int v90 = (unsigned int *)(v89 + 12);
              int v91 = *(_DWORD *)(v89 + 8);
              if (v88 < *v81)
              {
                float64x2_t v92 = *v90;
                goto LABEL_175;
              }
              long long v93 = *((_DWORD *)v81 + 2);
              if (v93 >= v91)
              {
                float64x2_t v92 = *v90;
                if (v91 < v93 || *((_DWORD *)v81 + 3) >= v92)
                {
                  while (1)
                  {
LABEL_175:
                    *(_OWORD *)double v87 = *(_OWORD *)v81;
                    if (v79 < v83) {
                      goto LABEL_159;
                    }
                    double v87 = v81;
                    unsigned __int8 v94 = 2 * v83;
                    double v83 = (2 * v83) | 1;
                    float64x2_t v81 = (void *)(j + 16 * v83);
                    uint64_t v95 = v94 + 2;
                    if (v95 < (uint64_t)v13)
                    {
                      uint64_t v96 = v81[2];
                      if (*v81 < v96
                        || v96 >= *v81
                        && ((uint64_t v97 = *((_DWORD *)v81 + 6), v98 = *((_DWORD *)v81 + 2), v98 < v97)
                         || v97 >= v98 && *((_DWORD *)v81 + 3) < *((_DWORD *)v81 + 7)))
                      {
                        v81 += 2;
                        double v83 = v95;
                      }
                    }
                    if (*v81 < v88) {
                      break;
                    }
                    if (v88 >= *v81)
                    {
                      double v99 = *((_DWORD *)v81 + 2);
                      if (v99 < v91 || v91 >= v99 && *((_DWORD *)v81 + 3) < v92) {
                        break;
                      }
                    }
                  }
                  float64x2_t v81 = v87;
LABEL_159:
                  void *v81 = v88;
                  *((_DWORD *)v81 + 2) = v91;
                  *((_DWORD *)v81 + 3) = v92;
                }
              }
            }
          }
          float64x2_t v80 = v82 - 1;
        }
        while (v82);
        uint64_t v100 = (unint64_t)v12 >> 4;
        while (2)
        {
          unsigned int v102 = 0;
          uint64_t v133 = *(_OWORD *)j;
          unsigned int v103 = j;
          do
          {
            int v104 = (_OWORD *)v103;
            v103 += 16 * (v102 + 1);
            int v105 = 2 * v102;
            unsigned int v102 = (2 * v102) | 1;
            uint64_t v106 = v105 + 2;
            if (v106 < v100)
            {
              unsigned int v107 = *(void *)(v103 + 16);
              if (*(void *)v103 < v107
                || v107 >= *(void *)v103
                && ((int64_t v108 = *(_DWORD *)(v103 + 24), v109 = *(_DWORD *)(v103 + 8), v109 < v108)
                 || v108 >= v109 && *(_DWORD *)(v103 + 12) < *(_DWORD *)(v103 + 28)))
              {
                v103 += 16;
                unsigned int v102 = v106;
              }
            }
            double *v104 = *(_OWORD *)v103;
          }
          while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
          if ((long long *)v103 == --a2)
          {
            *(_OWORD *)unsigned int v103 = v133;
            goto LABEL_190;
          }
          *(_OWORD *)unsigned int v103 = *a2;
          *a2 = v133;
          long double v110 = v103 - j + 16;
          if (v110 >= 17)
          {
            long double v111 = ((unint64_t)v110 >> 4) - 2;
            uint64x2_t v112 = v111 >> 1;
            uint64_t v113 = j + 16 * (v111 >> 1);
            uint64_t v114 = *(void *)v103;
            if (*(void *)v113 < *(void *)v103)
            {
              unsigned int v115 = *(_DWORD *)(v103 + 8);
              goto LABEL_206;
            }
            if (v114 >= *(void *)v113)
            {
              unsigned int v115 = *(_DWORD *)(v103 + 8);
              unsigned int v120 = *(_DWORD *)(v113 + 8);
              if (v120 < v115 || v115 >= v120 && *(_DWORD *)(v113 + 12) < *(_DWORD *)(v103 + 12))
              {
LABEL_206:
                unsigned int v116 = *(_DWORD *)(v103 + 12);
                *(_OWORD *)unsigned int v103 = *(_OWORD *)v113;
                if (v111 >= 2)
                {
                  while (1)
                  {
                    unsigned int v118 = v112 - 1;
                    uint64x2_t v112 = (v112 - 1) >> 1;
                    int v117 = j + 16 * v112;
                    if (*(void *)v117 >= v114)
                    {
                      if (v114 < *(void *)v117) {
                        break;
                      }
                      unsigned int v119 = *(_DWORD *)(v117 + 8);
                      if (v119 >= v115 && (v115 < v119 || *(_DWORD *)(v117 + 12) >= v116)) {
                        break;
                      }
                    }
                    *(_OWORD *)uint64_t v113 = *(_OWORD *)v117;
                    uint64_t v113 = j + 16 * v112;
                    if (v118 <= 1) {
                      goto LABEL_208;
                    }
                  }
                }
                int v117 = v113;
LABEL_208:
                *(void *)int v117 = v114;
                *(_DWORD *)(v117 + 8) = v115;
                *(_DWORD *)(v117 + 12) = v116;
              }
            }
          }
LABEL_190:
          if (v100-- <= 2) {
            return;
          }
          continue;
        }
      }
      return;
    }
    uint64_t v14 = v13 >> 1;
    unint64_t v15 = (uint64_t *)(j + 16 * (v13 >> 1));
    if ((unint64_t)v12 >= 0x801)
    {
      sub_344EFC((long long *)a1, (uint64_t *)(a1 + 16 * (v13 >> 1)), a2 - 1);
      uint64_t v16 = 16 * v14;
      unint64_t v17 = (uint64_t *)(16 * v14 + a1 - 16);
      sub_344EFC((long long *)(a1 + 16), v17, a2 - 2);
      sub_344EFC((long long *)(a1 + 32), (uint64_t *)(a1 + 16 + v16), a2 - 3);
      sub_344EFC((long long *)v17, v15, (long long *)(a1 + 16 + v16));
      unsigned int v129 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = v129;
      --a3;
      unint64_t v18 = *(void *)a1;
      if (a4) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_344EFC((long long *)(a1 + 16 * (v13 >> 1)), (uint64_t *)a1, a2 - 1);
      --a3;
      unint64_t v18 = *(void *)a1;
      if (a4) {
        goto LABEL_16;
      }
    }
    unint64_t v19 = *(void *)(a1 - 16);
    if (v19 < v18)
    {
LABEL_16:
      unint64_t v23 = 0;
      uint64_t v24 = *(_DWORD *)(a1 + 8);
      char v25 = *(_DWORD *)(a1 + 12);
      while (1)
      {
        BOOL v26 = a1 + v23;
        unint64_t v27 = *(void *)(a1 + v23 + 16);
        if (v27 >= v18)
        {
          if (v18 < v27) {
            break;
          }
          double v28 = *(_DWORD *)(v26 + 24);
          if (v28 >= v24 && (v24 < v28 || *(_DWORD *)(v26 + 28) >= v25)) {
            break;
          }
        }
        v23 += 16;
      }
      double v29 = a1 + v23 + 16;
      if (v23)
      {
        double v30 = *(void *)v10;
        for (double i = a2 - 1; v30 >= v18; --i)
        {
          if (v18 >= v30)
          {
            double v33 = *((_DWORD *)i + 2);
            if (v33 < v24 || v24 >= v33 && *((_DWORD *)i + 3) < v25) {
              break;
            }
          }
          unint64_t v32 = *((void *)i - 2);
          double v30 = v32;
        }
      }
      else
      {
        double i = a2;
        if (v29 < (unint64_t)a2)
        {
          double v34 = *(void *)v10;
          double i = a2 - 1;
          if (*(void *)v10 >= v18)
          {
            double i = a2 - 1;
            do
            {
              if (v18 < v34) {
                goto LABEL_56;
              }
              uint64_t v44 = *((_DWORD *)i + 2);
              if (v44 < v24) {
                break;
              }
              if (v24 < v44)
              {
LABEL_56:
                if (v29 >= (unint64_t)i) {
                  break;
                }
              }
              else if (v29 >= (unint64_t)i || *((_DWORD *)i + 3) < v25)
              {
                break;
              }
              BOOL v43 = *((void *)i-- - 2);
              double v34 = v43;
            }
            while (v43 >= v18);
          }
        }
      }
      unint64_t j = v29;
      if (v29 < (unint64_t)i)
      {
        unint64_t v35 = (unint64_t)i;
        do
        {
          int v130 = *(_OWORD *)j;
          *(_OWORD *)unint64_t j = *(_OWORD *)v35;
          *(_OWORD *)unint64_t v35 = v130;
          do
          {
            do
            {
              double v37 = *(void *)(j + 16);
              j += 16;
              unint64_t v36 = v37;
            }
            while (v37 < v18);
            if (v18 < v36) {
              break;
            }
            double v38 = *(_DWORD *)(j + 8);
          }
          while (v38 < v24 || v24 >= v38 && *(_DWORD *)(j + 12) < v25);
          while (1)
          {
            double v40 = *(void *)(v35 - 16);
            v35 -= 16;
            double v39 = v40;
            if (v40 < v18) {
              break;
            }
            if (v18 >= v39)
            {
              float64x2_t v41 = *(_DWORD *)(v35 + 8);
              if (v41 < v24 || v24 >= v41 && *(_DWORD *)(v35 + 12) < v25) {
                break;
              }
            }
          }
        }
        while (j < v35);
      }
      if (j - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(j - 16);
      }
      *(void *)(j - 16) = v18;
      *(_DWORD *)(j - 8) = v24;
      *(_DWORD *)(j - 4) = v25;
      if (v29 < (unint64_t)i) {
        goto LABEL_54;
      }
      unint64_t v42 = sub_34509C(a1, j - 16);
      if (sub_34509C(j, (uint64_t)a2))
      {
        a2 = (long long *)(j - 16);
        if (v42) {
          return;
        }
        goto LABEL_1;
      }
      if (!v42)
      {
LABEL_54:
        sub_344168(a1, j - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v20 = *(_DWORD *)(a1 + 8);
      if (v18 < v19)
      {
        uint64_t v22 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        double v21 = *(_DWORD *)(a1 - 8);
        if (v21 < v20) {
          goto LABEL_16;
        }
        uint64_t v22 = *(_DWORD *)(a1 + 12);
        if (v20 >= v21 && *(_DWORD *)(a1 - 4) < v22) {
          goto LABEL_16;
        }
      }
      uint64_t v45 = *(void *)v10;
      if (v18 < *(void *)v10
        || v45 >= v18 && ((double v59 = *((_DWORD *)a2 - 2), v20 < v59) || v59 >= v20 && v22 < *((_DWORD *)a2 - 1)))
      {
        unint64_t j = a1;
        while (1)
        {
          unint64_t v47 = *(void *)(j + 16);
          j += 16;
          unint64_t v46 = v47;
          if (v18 < v47) {
            break;
          }
          if (v46 >= v18)
          {
            double v48 = *(_DWORD *)(j + 8);
            if (v20 < v48 || v48 >= v20 && v22 < *(_DWORD *)(j + 12)) {
              break;
            }
          }
        }
      }
      else
      {
        for (unint64_t j = a1 + 16; j < (unint64_t)a2; j += 16)
        {
          if (v18 < *(void *)j) {
            break;
          }
          if (*(void *)j >= v18)
          {
            float64x2_t v58 = *(_DWORD *)(j + 8);
            if (v20 < v58 || v58 >= v20 && v22 < *(_DWORD *)(j + 12)) {
              break;
            }
          }
        }
      }
      unint64_t k = a2;
      if (j < (unint64_t)a2)
      {
        for (unint64_t k = a2 - 1; ; --k)
        {
          if (v18 >= v45)
          {
            if (v45 < v18) {
              break;
            }
            float64x2_t v51 = *((_DWORD *)k + 2);
            if (v20 >= v51 && (v51 < v20 || v22 >= *((_DWORD *)k + 3))) {
              break;
            }
          }
          double v50 = *((void *)k - 2);
          uint64_t v45 = v50;
        }
      }
      while (j < (unint64_t)k)
      {
        int v131 = *(_OWORD *)j;
        *(_OWORD *)unint64_t j = *k;
        *unint64_t k = v131;
        while (1)
        {
          double v53 = *(void *)(j + 16);
          j += 16;
          uint64_t v52 = v53;
          if (v18 < v53) {
            break;
          }
          if (v52 >= v18)
          {
            long long v54 = *(_DWORD *)(j + 8);
            if (v20 < v54 || v54 >= v20 && v22 < *(_DWORD *)(j + 12)) {
              break;
            }
          }
        }
        do
        {
          do
          {
            unint64_t v56 = *((void *)k-- - 2);
            unint64_t v55 = v56;
          }
          while (v18 < v56);
          if (v55 < v18) {
            break;
          }
          unint64_t v57 = *((_DWORD *)k + 2);
        }
        while (v20 < v57 || v57 >= v20 && v22 < *((_DWORD *)k + 3));
      }
      unint64_t v4 = j - 16 >= a1;
      char v5 = j - 16 == a1;
      if (j - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(j - 16);
      }
      a4 = 0;
      *(void *)(j - 16) = v18;
      *(_DWORD *)(j - 8) = v20;
      *(_DWORD *)(j - 4) = v22;
    }
  }
  unint64_t v64 = (long long *)(j + 16);
  double v66 = (long long *)j == a2 || v64 == a2;
  if (a4)
  {
    if (v66) {
      return;
    }
    double v67 = 0;
    int v68 = (_OWORD *)j;
LABEL_140:
    uint64_t v70 = v68;
    int v68 = v64;
    uint64_t v71 = *((void *)v70 + 2);
    if (v71 >= *(void *)v70)
    {
      if (*(void *)v70 < v71) {
        goto LABEL_139;
      }
      float64x2_t v73 = *((_DWORD *)v70 + 2);
      uint64_t v72 = *((_DWORD *)v70 + 6);
      if (v72 >= v73 && (v73 < v72 || *((_DWORD *)v70 + 7) >= *((_DWORD *)v70 + 3))) {
        goto LABEL_139;
      }
    }
    else
    {
      uint64_t v72 = *((_DWORD *)v70 + 6);
    }
    float64x2_t v74 = *((_DWORD *)v70 + 7);
    *int v68 = *v70;
    double v69 = j;
    if (v70 == (_OWORD *)j) {
      goto LABEL_138;
    }
    double v75 = v67;
    while (1)
    {
      int8x16_t v76 = (_OWORD *)(j + v75);
      long long v77 = *(void *)(j + v75 - 16);
      if (v71 >= v77)
      {
        if (v77 < v71) {
          goto LABEL_154;
        }
        float64x2_t v78 = *((_DWORD *)v76 - 2);
        if (v72 >= v78)
        {
          if (v78 < v72)
          {
            double v69 = j + v75;
LABEL_138:
            *(void *)double v69 = v71;
            *(_DWORD *)(v69 + 8) = v72;
            *(_DWORD *)(v69 + 12) = v74;
LABEL_139:
            unint64_t v64 = v68 + 1;
            v67 += 16;
            if (v68 + 1 == a2) {
              return;
            }
            goto LABEL_140;
          }
          if (v74 >= *((_DWORD *)v76 - 1))
          {
LABEL_154:
            double v69 = (unint64_t)v70;
            goto LABEL_138;
          }
        }
      }
      --v70;
      unsigned int *v76 = *(_OWORD *)(j + v75 - 16);
      v75 -= 16;
      if (!v75)
      {
        double v69 = j;
        goto LABEL_138;
      }
    }
  }
  if (!v66)
  {
    while (1)
    {
      int v121 = a1;
      a1 = (unint64_t)v64;
      uint64_t v122 = *(void *)(v121 + 16);
      if (v122 < *(void *)v121) {
        break;
      }
      if (*(void *)v121 >= v122)
      {
        uint64_t v124 = *(_DWORD *)(v121 + 8);
        long double v123 = *(_DWORD *)(v121 + 24);
        if (v123 < v124 || v124 >= v123 && *(_DWORD *)(v121 + 28) < *(_DWORD *)(v121 + 12)) {
          goto LABEL_231;
        }
      }
LABEL_224:
      unint64_t v64 = (long long *)(a1 + 16);
      if ((long long *)(a1 + 16) == a2) {
        return;
      }
    }
    long double v123 = *(_DWORD *)(v121 + 24);
LABEL_231:
    uint64x2_t v125 = *(_DWORD *)(v121 + 28);
    for (unint64_t m = (_OWORD *)a1; ; --m)
    {
      *unint64_t m = *(m - 1);
      long double v127 = *((void *)m - 4);
      if (v122 >= v127)
      {
        if (v127 < v122) {
          break;
        }
        unsigned int v128 = *((_DWORD *)m - 6);
        if (v123 >= v128 && (v128 < v123 || v125 >= *((_DWORD *)m - 5))) {
          break;
        }
      }
    }
    *((void *)m - 2) = v122;
    *((_DWORD *)m - 2) = v123;
    *((_DWORD *)m - 1) = v125;
    goto LABEL_224;
  }
}

  unint64_t v9 = a2 - 18;
  uint64_t v206 = a2 - 54;
  uint64_t v208 = a2 - 36;
  uint64_t v10 = a1;
  int v233 = a2;
  uint64_t v211 = a2 - 18;
  while (1)
  {
    unint64_t v11 = (unint64_t)v10;
    uint64_t v12 = (char *)a2 - (char *)v10;
    uint64_t v13 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)v10) >> 3);
    if (v5 || !v4) {
      break;
    }
    uint64_t v236 = v11;
    if (v12 <= 1727)
    {
      double v98 = (int *)(v11 + 72);
      uint64_t v100 = (int *)v11 == a2 || v98 == a2;
      if (a4)
      {
        if (!v100)
        {
          char v101 = v11;
          do
          {
            unsigned int v103 = v98;
            int v104 = *(_DWORD *)(v101 + 72);
            if (v104 < *(_DWORD *)v101)
            {
              *(void *)&v246[7] = *(void *)(v101 + 95);
              int v105 = *(void **)(v101 + 80);
              *(void *)uint64_t v246 = *(void *)(v101 + 88);
              uint64_t v106 = *(unsigned char *)(v101 + 103);
              *(void *)(v101 + 88) = 0;
              *(void *)(v101 + 96) = 0;
              *(void *)(v101 + 80) = 0;
              uint64_t v240 = *(_OWORD *)(v101 + 104);
              unsigned int v229 = *(void **)(v101 + 120);
              uint64_t v224 = *(_OWORD *)(v101 + 128);
              *(void *)(v101 + 120) = 0;
              *(void *)(v101 + 128) = 0;
              *(void *)(v101 + 136) = 0;
              unsigned int v107 = (unint64_t)v98;
              int64_t v108 = *(_DWORD *)v101;
              do
              {
                uint64_t v109 = v101;
                *(_DWORD *)unsigned int v107 = v108;
                long double v110 = (void **)(v107 + 8);
                if (*(char *)(v107 + 31) < 0) {
                  operator delete(*v110);
                }
                long double v111 = (void **)(v109 + 8);
                *(_OWORD *)long double v110 = *(_OWORD *)(v109 + 8);
                *(void *)(v107 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v109 + 24);
                *(unsigned char *)(v109 + 31) = 0;
                *(unsigned char *)(v109 + 8) = 0;
                *(_OWORD *)(v107 + 32) = *(_OWORD *)(v109 + 32);
                uint64x2_t v112 = *(void *)(v107 + 48);
                if (v112)
                {
                  uint64_t v114 = (void *)(v107 + 56);
                  uint64_t v113 = *(void *)(v107 + 56);
                  unsigned int v115 = *(void **)(v107 + 48);
                  if (v113 != v112)
                  {
                    do
                    {
                      if (*(char *)(v113 - 1) < 0) {
                        operator delete(*(void **)(v113 - 24));
                      }
                      v113 -= 32;
                    }
                    while (v113 != v112);
                    unsigned int v115 = *(void **)(v107 + 48);
                  }
                  *uint64_t v114 = v112;
                  operator delete(v115);
                  *uint64_t v114 = 0;
                  *(void *)(v107 + 64) = 0;
                }
                unsigned int v116 = (void **)(v109 + 48);
                *(_OWORD *)(v107 + 48) = *(_OWORD *)(v109 + 48);
                *(void *)(v107 + 64) = *(void *)(v109 + 64);
                *(void *)(v109 + 48) = 0;
                *(void *)(v109 + 56) = 0;
                *(void *)(v109 + 64) = 0;
                if (v109 == v236)
                {
                  int v117 = v236;
                  *(_DWORD *)uint64_t v236 = v104;
                  if (*(char *)(v236 + 31) < 0) {
                    goto LABEL_180;
                  }
                  goto LABEL_182;
                }
                char v101 = v109 - 72;
                int64_t v108 = *(_DWORD *)(v109 - 72);
                unsigned int v107 = v109;
              }
              while (v104 < v108);
              int v117 = v109;
              *(_DWORD *)uint64_t v109 = v104;
              if (*(char *)(v109 + 31) < 0)
              {
LABEL_180:
                operator delete(*v111);
                unsigned int v118 = (void **)*v116;
                goto LABEL_183;
              }
LABEL_182:
              unsigned int v118 = 0;
LABEL_183:
              *long double v111 = v105;
              *(void *)(v117 + 16) = *(void *)v246;
              *(void *)(v117 + 23) = *(void *)&v246[7];
              *(unsigned char *)(v117 + 31) = v106;
              *(_OWORD *)(v109 + 32) = v240;
              if (v118)
              {
                unsigned int v119 = *(void ***)(v117 + 56);
                unsigned int v102 = v118;
                if (v119 != v118)
                {
                  do
                  {
                    if (*((char *)v119 - 1) < 0) {
                      operator delete(*(v119 - 3));
                    }
                    v119 -= 4;
                  }
                  while (v119 != v118);
                  unsigned int v102 = *v116;
                }
                *(void *)(v117 + 56) = v118;
                operator delete(v102);
              }
              *unsigned int v116 = v229;
              double result = *(double *)&v224;
              *(_OWORD *)(v117 + 56) = v224;
            }
            double v98 = v103 + 18;
            char v101 = (unint64_t)v103;
          }
          while (v103 + 18 != v233);
        }
      }
      else if (!v100)
      {
        do
        {
          uint64_t v186 = (unint64_t)v98;
          uint64_t v187 = v11;
          uint64_t v188 = *(_DWORD *)(v11 + 72);
          if (v188 < *(_DWORD *)v187)
          {
            *(void *)&v249[7] = *(void *)(v187 + 95);
            uint64_t v189 = *(void *)(v187 + 80);
            *(void *)uint64_t v249 = *(void *)(v187 + 88);
            double v190 = *(unsigned char *)(v187 + 103);
            *(void *)(v187 + 88) = 0;
            *(void *)(v187 + 96) = 0;
            *(void *)(v187 + 80) = 0;
            uint64_t v237 = *(_OWORD *)(v187 + 120);
            uint64_t v243 = *(_OWORD *)(v187 + 104);
            int v232 = *(void *)(v187 + 136);
            *(void *)(v187 + 120) = 0;
            *(void *)(v187 + 128) = 0;
            *(void *)(v187 + 136) = 0;
            uint64_t v191 = v98;
            uint64_t v192 = *(_DWORD *)v187;
            do
            {
              uint64_t v195 = v187;
              *uint64_t v191 = v192;
              uint64_t v196 = (void **)(v191 + 2);
              if (*((char *)v191 + 31) < 0) {
                operator delete(*v196);
              }
              *(_OWORD *)uint64_t v196 = *(_OWORD *)(v195 + 8);
              *((void *)v191 + 3) = *(void *)(v195 + 24);
              *(unsigned char *)(v195 + 31) = 0;
              *(unsigned char *)(v195 + 8) = 0;
              *((_OWORD *)v191 + 2) = *(_OWORD *)(v195 + 32);
              uint64_t v197 = *((void *)v191 + 6);
              if (v197)
              {
                uint64_t v199 = v191 + 14;
                uint64_t v198 = *((void *)v191 + 7);
                uint64_t v193 = (void *)*((void *)v191 + 6);
                if (v198 != v197)
                {
                  do
                  {
                    if (*(char *)(v198 - 1) < 0) {
                      operator delete(*(void **)(v198 - 24));
                    }
                    v198 -= 32;
                  }
                  while (v198 != v197);
                  uint64_t v193 = (void *)*((void *)v191 + 6);
                }
                *uint64_t v199 = v197;
                operator delete(v193);
                *uint64_t v199 = 0;
                *((void *)v191 + 8) = 0;
              }
              uint64_t v187 = v195 - 72;
              uint64_t v192 = *(_DWORD *)(v195 - 72);
              uint64_t v194 = (void **)(v195 + 48);
              *((_OWORD *)v191 + 3) = *(_OWORD *)(v195 + 48);
              *((void *)v191 + 8) = *(void *)(v195 + 64);
              *(void *)(v195 + 48) = 0;
              *(void *)(v195 + 56) = 0;
              *(void *)(v195 + 64) = 0;
              uint64_t v191 = (int *)v195;
            }
            while (v188 < v192);
            *(_DWORD *)uint64_t v195 = v188;
            if (*(char *)(v195 + 31) < 0)
            {
              operator delete(*(void **)(v195 + 8));
              uint64_t v200 = (void **)*v194;
            }
            else
            {
              uint64_t v200 = 0;
            }
            *(void *)(v195 + 8) = v189;
            *(void *)(v195 + 16) = *(void *)v249;
            *(void *)(v195 + 23) = *(void *)&v249[7];
            *(unsigned char *)(v195 + 31) = v190;
            *(_OWORD *)(v195 + 32) = v243;
            if (v200)
            {
              char v201 = *(void ***)(v195 + 56);
              uint64_t v185 = v200;
              if (v201 != v200)
              {
                do
                {
                  if (*((char *)v201 - 1) < 0) {
                    operator delete(*(v201 - 3));
                  }
                  v201 -= 4;
                }
                while (v201 != v200);
                uint64_t v185 = *v194;
              }
              *(void *)(v195 + 56) = v200;
              operator delete(v185);
            }
            double result = *(double *)&v237;
            *(_OWORD *)(v195 + 48) = v237;
            *(void *)(v195 + 64) = v232;
          }
          double v98 = (int *)(v186 + 72);
          unint64_t v11 = v186;
        }
        while ((int *)(v186 + 72) != v233);
      }
      return result;
    }
    if (!a3)
    {
      if ((int *)v11 == a2) {
        return result;
      }
      unsigned int v120 = (unint64_t)(v13 - 2) >> 1;
      uint64_t v230 = v120;
      while (2)
      {
        int v121 = v120;
        if (v230 >= v120)
        {
          uint64_t v122 = (2 * v120) | 1;
          long double v123 = (unsigned int *)(v11 + 72 * v122);
          if (2 * v121 + 2 >= v13)
          {
            uint64_t v126 = (unsigned int *)(v11 + 72 * v121);
            long double v127 = *v126;
            if (*v123 >= *v126)
            {
LABEL_203:
              uint64_t v225 = v121;
              unsigned int v128 = v11 + 72 * v121;
              uint64_t v212 = *(void *)(v128 + 8);
              *(void *)&v247[7] = *(void *)(v128 + 23);
              *(void *)uint64_t v247 = *(void *)(v128 + 16);
              int v209 = *((unsigned char *)v126 + 31);
              *(void *)(v128 + 8) = 0;
              *(void *)(v128 + 16) = 0;
              *(void *)(v128 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              uint64_t v241 = *(_OWORD *)(v128 + 32);
              uint64_t v219 = *(_OWORD *)(v128 + 48);
              uint64_t v215 = *(void *)(v128 + 64);
              *(void *)(v128 + 48) = 0;
              *(void *)(v128 + 56) = 0;
              *(void *)(v128 + 64) = 0;
              unsigned int v129 = *v123;
              while (1)
              {
                int v131 = v123;
                *uint64_t v126 = v129;
                int v132 = (void **)(v126 + 2);
                if (*((char *)v126 + 31) < 0) {
                  operator delete(*v132);
                }
                uint64_t v133 = *(_OWORD *)(v131 + 2);
                *((void *)v126 + 3) = *((void *)v131 + 3);
                *(_OWORD *)int v132 = v133;
                *((unsigned char *)v131 + 31) = 0;
                *((unsigned char *)v131 + 8) = 0;
                long double v134 = (void **)(v126 + 12);
                double v135 = (void **)*((void *)v126 + 6);
                *((_OWORD *)v126 + 2) = *((_OWORD *)v131 + 2);
                if (v135)
                {
                  long double v136 = (void **)*((void *)v126 + 7);
                  unsigned int v137 = v135;
                  if (v136 != v135)
                  {
                    do
                    {
                      if (*((char *)v136 - 1) < 0) {
                        operator delete(*(v136 - 3));
                      }
                      v136 -= 4;
                    }
                    while (v136 != v135);
                    unsigned int v137 = *v134;
                  }
                  *((void *)v126 + 7) = v135;
                  operator delete(v137);
                  *long double v134 = 0;
                  *((void *)v126 + 7) = 0;
                  *((void *)v126 + 8) = 0;
                  unint64_t v11 = v236;
                }
                unsigned int v138 = (void **)(v131 + 12);
                *((_OWORD *)v126 + 3) = *((_OWORD *)v131 + 3);
                *((void *)v126 + 8) = *((void *)v131 + 8);
                *((void *)v131 + 6) = 0;
                *((void *)v131 + 7) = 0;
                *((void *)v131 + 8) = 0;
                if (v230 < v122) {
                  break;
                }
                long double v123 = (unsigned int *)(v11 + 72 * ((2 * v122) | 1));
                if (2 * v122 + 2 < v13)
                {
                  unsigned int v129 = *v123;
                  int v130 = v123[18];
                  if (*v123 <= v130) {
                    unsigned int v129 = v123[18];
                  }
                  if (*v123 >= v130)
                  {
                    uint64_t v122 = (2 * v122) | 1;
                  }
                  else
                  {
                    v123 += 18;
                    uint64_t v122 = 2 * v122 + 2;
                  }
                  uint64_t v126 = v131;
                  if (v129 < v127) {
                    break;
                  }
                }
                else
                {
                  unsigned int v129 = *v123;
                  uint64_t v122 = (2 * v122) | 1;
                  uint64_t v126 = v131;
                  if (*v123 < v127) {
                    break;
                  }
                }
              }
              char *v131 = v127;
              if (*((char *)v131 + 31) < 0)
              {
                operator delete(*((void **)v131 + 1));
                int v139 = (void **)*v138;
              }
              else
              {
                int v139 = 0;
              }
              *((void *)v131 + 1) = v212;
              *((void *)v131 + 2) = *(void *)v247;
              *(void *)((char *)v131 + 23) = *(void *)&v247[7];
              *((unsigned char *)v131 + 31) = v209;
              *((_OWORD *)v131 + 2) = v241;
              if (v139)
              {
                int v140 = (void **)*((void *)v131 + 7);
                uint64_t v141 = v139;
                if (v140 != v139)
                {
                  do
                  {
                    if (*((char *)v140 - 1) < 0) {
                      operator delete(*(v140 - 3));
                    }
                    v140 -= 4;
                  }
                  while (v140 != v139);
                  uint64_t v141 = *v138;
                }
                *((void *)v131 + 7) = v139;
                operator delete(v141);
              }
              *((_OWORD *)v131 + 3) = v219;
              *((void *)v131 + 8) = v215;
              a2 = v233;
              int v121 = v225;
            }
          }
          else
          {
            uint64_t v124 = *v123;
            uint64x2_t v125 = v123[18];
            if (*v123 <= v125) {
              uint64_t v124 = v123[18];
            }
            if (*v123 < v125)
            {
              v123 += 18;
              uint64_t v122 = 2 * v121 + 2;
            }
            uint64_t v126 = (unsigned int *)(v11 + 72 * v121);
            long double v127 = *v126;
            if (v124 >= *v126) {
              goto LABEL_203;
            }
          }
        }
        unsigned int v120 = v121 - 1;
        if (v121) {
          continue;
        }
        break;
      }
      uint64_t v142 = v12 / 0x48uLL;
      uint64_t v204 = (void *)(v11 + 16);
      unint64_t v205 = (void *)(v11 + 8);
      uint64_t v202 = (void *)(v11 + 48);
      uint64_t v203 = (long long *)(v11 + 32);
      while (2)
      {
        int v234 = a2;
        unsigned int v144 = 0;
        int v207 = *(_DWORD *)v11;
        int v210 = *(void *)(v11 + 8);
        *(void *)&v250[7] = *(void *)((char *)v204 + 7);
        *(void *)uint64_t v250 = *v204;
        int v213 = *(unsigned char *)(v11 + 31);
        *unint64_t v205 = 0;
        v205[1] = 0;
        v205[2] = 0;
        uint64_t v248 = *v203;
        uint64_t v226 = *(void *)(v11 + 48);
        uint64_t v216 = *(void *)(v11 + 64);
        char v220 = *(void *)(v11 + 56);
        *uint64_t v202 = 0;
        v202[1] = 0;
        v202[2] = 0;
LABEL_241:
        uint64_t v147 = v11 + 72 * v144 + 72;
        if (2 * v144 + 2 >= v142)
        {
          unsigned int v144 = (2 * v144) | 1;
          *(_DWORD *)unint64_t v11 = *(_DWORD *)v147;
          double v150 = v11 + 8;
          if (*(char *)(v11 + 31) < 0) {
            goto LABEL_250;
          }
        }
        else
        {
          BOOL v148 = *(_DWORD *)v147;
          double v149 = *(_DWORD *)(v11 + 72 * v144 + 144);
          if (*(_DWORD *)v147 <= v149) {
            BOOL v148 = *(_DWORD *)(v11 + 72 * v144 + 144);
          }
          if (*(_DWORD *)v147 >= v149)
          {
            unsigned int v144 = (2 * v144) | 1;
          }
          else
          {
            uint64_t v147 = v11 + 72 * v144 + 144;
            unsigned int v144 = 2 * v144 + 2;
          }
          *(_DWORD *)unint64_t v11 = v148;
          double v150 = v11 + 8;
          if (*(char *)(v11 + 31) < 0) {
LABEL_250:
          }
            operator delete(*(void **)v150);
        }
        BOOL v151 = (void **)(v147 + 8);
        int v152 = *(_OWORD *)(v147 + 8);
        *(void *)(v150 + 16) = *(void *)(v147 + 24);
        *(_OWORD *)double v150 = v152;
        *(unsigned char *)(v147 + 31) = 0;
        *(unsigned char *)(v147 + 8) = 0;
        uint64_t v153 = (void **)(v11 + 48);
        unint64_t v154 = *(void ***)(v11 + 48);
        *(_OWORD *)(v11 + 32) = *(_OWORD *)(v147 + 32);
        if (v154)
        {
          unint64_t v155 = *(void ***)(v11 + 56);
          unsigned int v145 = v154;
          if (v155 != v154)
          {
            do
            {
              if (*((char *)v155 - 1) < 0) {
                operator delete(*(v155 - 3));
              }
              v155 -= 4;
            }
            while (v155 != v154);
            unsigned int v145 = *v153;
          }
          *(void *)(v11 + 56) = v154;
          operator delete(v145);
          *uint64_t v153 = 0;
          *(void *)(v11 + 56) = 0;
          *(void *)(v11 + 64) = 0;
        }
        long double v146 = (void **)(v147 + 48);
        *(_OWORD *)(v11 + 48) = *(_OWORD *)(v147 + 48);
        *(void *)(v11 + 64) = *(void *)(v147 + 64);
        *(void *)(v147 + 48) = 0;
        *(void *)(v147 + 56) = 0;
        *(void *)(v147 + 64) = 0;
        unint64_t v11 = v147;
        if (v144 > (uint64_t)((unint64_t)(v142 - 2) >> 1))
        {
          double v156 = (long long *)(v147 + 32);
          uint64_t v231 = v234 - 18;
          if ((int *)v147 == v234 - 18)
          {
            *(_DWORD *)uint64_t v147 = v207;
            unint64_t v11 = v236;
            if (*(char *)(v147 + 31) < 0)
            {
              operator delete(*v151);
              int v161 = (void **)*v146;
            }
            else
            {
              int v161 = 0;
            }
            *(void *)(v147 + 8) = v210;
            *(void *)(v147 + 23) = *(void *)&v250[7];
            *(void *)(v147 + 16) = *(void *)v250;
            *(unsigned char *)(v147 + 31) = v213;
            double result = *(double *)&v248;
            *double v156 = v248;
            if (v161)
            {
              uint64_t v181 = *(void ***)(v147 + 56);
              uint64_t v182 = v161;
              if (v181 != v161)
              {
                do
                {
                  if (*((char *)v181 - 1) < 0) {
                    operator delete(*(v181 - 3));
                  }
                  v181 -= 4;
                }
                while (v181 != v161);
                uint64_t v182 = *v146;
              }
              *(void *)(v147 + 56) = v161;
              operator delete(v182);
            }
            *(void *)(v147 + 48) = v226;
            *(void *)(v147 + 56) = v220;
            *(void *)(v147 + 64) = v216;
          }
          else
          {
            *(_DWORD *)uint64_t v147 = *(v234 - 18);
            if (*(char *)(v147 + 31) < 0) {
              operator delete(*v151);
            }
            uint64_t v157 = *((_OWORD *)v234 - 4);
            *(void *)(v147 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((void *)v234 - 6);
            *(_OWORD *)BOOL v151 = v157;
            *((unsigned char *)v234 - 41) = 0;
            *((unsigned char *)v234 - 64) = 0;
            *double v156 = *(_OWORD *)(v234 - 10);
            double v158 = (void **)*v146;
            if (*v146)
            {
              double v159 = *(void ***)(v147 + 56);
              uint64_t v160 = *v146;
              if (v159 != v158)
              {
                do
                {
                  if (*((char *)v159 - 1) < 0) {
                    operator delete(*(v159 - 3));
                  }
                  v159 -= 4;
                }
                while (v159 != v158);
                uint64_t v160 = *v146;
              }
              *(void *)(v147 + 56) = v158;
              operator delete(v160);
              *long double v146 = 0;
              *(void *)(v147 + 56) = 0;
              *(void *)(v147 + 64) = 0;
            }
            uint64_t v162 = 0;
            uint64_t v163 = v234;
            unint64_t v164 = (void **)(v234 - 6);
            *(_OWORD *)(v147 + 48) = *(_OWORD *)(v234 - 6);
            *(void *)(v147 + 64) = *((void *)v234 - 1);
            *unint64_t v164 = 0;
            v164[1] = 0;
            v164[2] = 0;
            *(v234 - 18) = v207;
            if (*((char *)v234 - 41) < 0)
            {
              operator delete(*((void **)v234 - 8));
              uint64_t v162 = (void **)*v164;
            }
            *((void *)v234 - 8) = v210;
            *(void *)((char *)v234 - 49) = *(void *)&v250[7];
            *((void *)v234 - 7) = *(void *)v250;
            *((unsigned char *)v234 - 41) = v213;
            double result = *(double *)&v248;
            *(_OWORD *)(v234 - 10) = v248;
            if (v162)
            {
              unint64_t v165 = (void **)*((void *)v234 - 2);
              uint64_t v166 = v162;
              if (v165 != v162)
              {
                do
                {
                  if (*((char *)v165 - 1) < 0) {
                    operator delete(*(v165 - 3));
                  }
                  v165 -= 4;
                }
                while (v165 != v162);
                uint64_t v166 = *v164;
              }
              uint64_t v163 = v234;
              *((void *)v234 - 2) = v162;
              operator delete(v166);
            }
            *((void *)v163 - 3) = v226;
            *((void *)v163 - 2) = v220;
            *((void *)v163 - 1) = v216;
            unint64_t v11 = v236;
            uint64_t v167 = v147 + 72 - v236;
            if (v167 >= 73)
            {
              uint64_t v168 = (v167 / 0x48uLL - 2) >> 1;
              uint64_t v169 = (unsigned int *)(v236 + 72 * v168);
              int v170 = *(_DWORD *)v147;
              if (*v169 < *(_DWORD *)v147)
              {
                long long v221 = *(void *)(v147 + 8);
                *(void *)&v251[7] = *(void *)(v147 + 23);
                *(void *)uint64_t v251 = *(void *)(v147 + 16);
                uint64_t v217 = *(unsigned char *)(v147 + 31);
                *BOOL v151 = 0;
                *(void *)(v147 + 16) = 0;
                *(void *)(v147 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                uint64_t v242 = *v156;
                uint64_t v235 = *(_OWORD *)(v147 + 48);
                uint64_t v227 = *(void *)(v147 + 64);
                *(void *)(v147 + 56) = 0;
                *(void *)(v147 + 64) = 0;
                *long double v146 = 0;
                uint64_t v171 = *v169;
                do
                {
                  uint64_t v172 = v169;
                  *(_DWORD *)uint64_t v147 = v171;
                  uint64_t v173 = (void **)(v147 + 8);
                  if (*(char *)(v147 + 31) < 0) {
                    operator delete(*v173);
                  }
                  uint64_t v174 = *(_OWORD *)(v172 + 2);
                  *(void *)(v147 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((void *)v172 + 3);
                  *(_OWORD *)uint64_t v173 = v174;
                  *((unsigned char *)v172 + 31) = 0;
                  *((unsigned char *)v172 + 8) = 0;
                  unint64_t v176 = (void **)(v147 + 48);
                  uint64_t v175 = *(void ***)(v147 + 48);
                  *(_OWORD *)(v147 + 32) = *((_OWORD *)v172 + 2);
                  if (v175)
                  {
                    unint64_t v177 = *(void ***)(v147 + 56);
                    uint64_t v178 = v175;
                    if (v177 != v175)
                    {
                      do
                      {
                        if (*((char *)v177 - 1) < 0) {
                          operator delete(*(v177 - 3));
                        }
                        v177 -= 4;
                      }
                      while (v177 != v175);
                      uint64_t v178 = *v176;
                    }
                    *(void *)(v147 + 56) = v175;
                    operator delete(v178);
                    *unint64_t v176 = 0;
                    *(void *)(v147 + 56) = 0;
                    *(void *)(v147 + 64) = 0;
                  }
                  uint64_t v179 = (void **)(v172 + 12);
                  *(_OWORD *)(v147 + 48) = *((_OWORD *)v172 + 3);
                  *(void *)(v147 + 64) = *((void *)v172 + 8);
                  *((void *)v172 + 6) = 0;
                  *((void *)v172 + 7) = 0;
                  *((void *)v172 + 8) = 0;
                  if (!v168) {
                    break;
                  }
                  uint64_t v168 = (v168 - 1) >> 1;
                  uint64_t v169 = (unsigned int *)(v236 + 72 * v168);
                  uint64_t v171 = *v169;
                  uint64_t v147 = (uint64_t)v172;
                }
                while (*v169 < v170);
                *uint64_t v172 = v170;
                if (*((char *)v172 + 31) < 0)
                {
                  operator delete(*((void **)v172 + 1));
                  uint64_t v180 = (void **)*v179;
                }
                else
                {
                  uint64_t v180 = 0;
                }
                *((void *)v172 + 1) = v221;
                *((void *)v172 + 2) = *(void *)v251;
                *(void *)((char *)v172 + 23) = *(void *)&v251[7];
                *((unsigned char *)v172 + 31) = v217;
                *((_OWORD *)v172 + 2) = v242;
                if (v180)
                {
                  unint64_t v183 = (void **)*((void *)v172 + 7);
                  uint64_t v184 = v180;
                  if (v183 != v180)
                  {
                    do
                    {
                      if (*((char *)v183 - 1) < 0) {
                        operator delete(*(v183 - 3));
                      }
                      v183 -= 4;
                    }
                    while (v183 != v180);
                    uint64_t v184 = *v179;
                  }
                  *((void *)v172 + 7) = v180;
                  operator delete(v184);
                }
                double result = *(double *)&v235;
                *((_OWORD *)v172 + 3) = v235;
                *((void *)v172 + 8) = v227;
                unint64_t v11 = v236;
              }
            }
          }
          a2 = v231;
          if (v142-- <= 2) {
            return result;
          }
          continue;
        }
        goto LABEL_241;
      }
    }
    uint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = (int *)(v11 + 72 * ((unint64_t)v13 >> 1));
    uint64_t v16 = *v9;
    if ((unint64_t)v12 >= 0x2401)
    {
      unint64_t v17 = *v15;
      if (*v15 >= *(_DWORD *)v11)
      {
        if (v16 < v17)
        {
          sub_36C728(v15, v9);
          if (*v15 < *(_DWORD *)v11)
          {
            unint64_t v18 = (int *)v11;
            unint64_t v19 = v15;
            goto LABEL_20;
          }
        }
      }
      else
      {
        unint64_t v18 = (int *)v11;
        if (v16 < v17) {
          goto LABEL_11;
        }
        sub_36C728((int *)v11, v15);
        if (*v9 < *v15)
        {
          unint64_t v18 = v15;
LABEL_11:
          unint64_t v19 = v9;
LABEL_20:
          sub_36C728(v18, v19);
        }
      }
      unint64_t v23 = v11 + 72 * v14;
      BOOL v26 = *(_DWORD *)(v23 - 72);
      char v25 = (int *)(v23 - 72);
      uint64_t v24 = v26;
      unint64_t v27 = *v208;
      if (v26 >= *(_DWORD *)(v11 + 72))
      {
        if (v27 < v24)
        {
          sub_36C728(v25, v208);
          if (*v25 < *(_DWORD *)(v11 + 72))
          {
            double v28 = (int *)(v11 + 72);
            double v29 = v25;
            goto LABEL_32;
          }
        }
      }
      else
      {
        double v28 = (int *)(v11 + 72);
        if (v27 < v24) {
          goto LABEL_25;
        }
        sub_36C728(v28, v25);
        if (*v208 < *v25)
        {
          double v28 = v25;
LABEL_25:
          double v29 = v208;
LABEL_32:
          sub_36C728(v28, v29);
        }
      }
      double v30 = v11 + 72 * v14;
      double v33 = *(_DWORD *)(v30 + 72);
      unint64_t v32 = (int *)(v30 + 72);
      unint64_t v31 = v33;
      double v34 = *v206;
      if (v33 >= *(_DWORD *)(v11 + 144))
      {
        if (v34 < v31)
        {
          sub_36C728(v32, v206);
          if (*v32 < *(_DWORD *)(v11 + 144))
          {
            unint64_t v35 = (int *)(v11 + 144);
            unint64_t v36 = v32;
            goto LABEL_41;
          }
        }
      }
      else
      {
        unint64_t v35 = (int *)(v11 + 144);
        if (v34 < v31) {
          goto LABEL_37;
        }
        sub_36C728(v35, v32);
        if (*v206 < *v32)
        {
          unint64_t v35 = v32;
LABEL_37:
          unint64_t v36 = v206;
LABEL_41:
          sub_36C728(v35, v36);
        }
      }
      double v37 = *v15;
      double v38 = *v32;
      if (*v15 >= *v25)
      {
        if (v38 < v37)
        {
          sub_36C728(v15, v32);
          if (*v15 < *v25)
          {
            double v39 = v25;
            double v40 = v15;
            goto LABEL_50;
          }
        }
      }
      else
      {
        double v39 = v25;
        if (v38 < v37) {
          goto LABEL_46;
        }
        sub_36C728(v25, v15);
        if (*v32 < *v15)
        {
          double v39 = v15;
LABEL_46:
          double v40 = v32;
LABEL_50:
          sub_36C728(v39, v40);
        }
      }
      double v21 = (int *)v11;
      uint64_t v22 = v15;
      goto LABEL_52;
    }
    uint64_t v20 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= *v15)
    {
      if (v16 >= v20) {
        goto LABEL_53;
      }
      sub_36C728((int *)v11, v9);
      if (*(_DWORD *)v11 >= *v15) {
        goto LABEL_53;
      }
      double v21 = v15;
      uint64_t v22 = (int *)v11;
    }
    else
    {
      double v21 = v15;
      if (v16 >= v20)
      {
        sub_36C728(v15, (int *)v11);
        if (*v9 >= *(_DWORD *)v11) {
          goto LABEL_53;
        }
        double v21 = (int *)v11;
      }
      uint64_t v22 = v9;
    }
LABEL_52:
    sub_36C728(v21, v22);
LABEL_53:
    uint64_t v228 = a3 - 1;
    float64x2_t v41 = *(_DWORD *)v11;
    if ((a4 & 1) != 0 || *(_DWORD *)(v11 - 72) < v41)
    {
      unint64_t v42 = 0;
      BOOL v43 = v11 + 8;
      uint64_t v44 = *(void *)(v11 + 8);
      *(void *)&v244[7] = *(void *)(v11 + 23);
      *(void *)uint64_t v244 = *(void *)(v11 + 16);
      uint64_t v45 = *(unsigned char *)(v11 + 31);
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      unint64_t v46 = (_OWORD *)(v11 + 32);
      uint64_t v238 = *(_OWORD *)(v11 + 32);
      unint64_t v47 = (void **)(v11 + 48);
      unint64_t v222 = *(_OWORD *)(v11 + 48);
      unint64_t v218 = *(void *)(v11 + 64);
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(void *)(v11 + 64) = 0;
      do
      {
        double v48 = *(_DWORD *)(v11 + v42 + 72);
        v42 += 72;
      }
      while (v48 < v41);
      double v49 = (int *)(v11 + v42);
      if (v42 == 72)
      {
        a2 = v233;
        do
        {
          if (v49 >= a2) {
            break;
          }
          float64x2_t v51 = *(a2 - 18);
          a2 -= 18;
        }
        while (v51 >= v41);
      }
      else
      {
        do
        {
          double v50 = *(a2 - 18);
          a2 -= 18;
        }
        while (v50 >= v41);
      }
      uint64_t v10 = v49;
      if (v49 < a2)
      {
        uint64_t v52 = a2;
        do
        {
          sub_36C728(v10, v52);
          do
          {
            double v53 = v10[18];
            v10 += 18;
          }
          while (v53 < v41);
          do
          {
            long long v54 = *(v52 - 18);
            v52 -= 18;
          }
          while (v54 >= v41);
        }
        while (v10 < v52);
      }
      if (v10 - 18 != (int *)v236)
      {
        *(_DWORD *)uint64_t v236 = *(v10 - 18);
        if (*(char *)(v236 + 31) < 0) {
          operator delete(*(void **)v43);
        }
        unint64_t v55 = *((_OWORD *)v10 - 4);
        *(void *)(v43 + 16) = *((void *)v10 - 6);
        *(_OWORD *)BOOL v43 = v55;
        *((unsigned char *)v10 - 41) = 0;
        *((unsigned char *)v10 - 64) = 0;
        double *v46 = *(_OWORD *)(v10 - 10);
        unint64_t v56 = (void **)*v47;
        unint64_t v57 = v236;
        if (*v47)
        {
          float64x2_t v58 = *(void ***)(v236 + 56);
          double v59 = *v47;
          if (v58 != v56)
          {
            do
            {
              if (*((char *)v58 - 1) < 0) {
                operator delete(*(v58 - 3));
              }
              v58 -= 4;
            }
            while (v58 != v56);
            double v59 = *v47;
          }
          unint64_t v57 = v236;
          *(void *)(v236 + 56) = v56;
          operator delete(v59);
          *unint64_t v47 = 0;
          v47[1] = 0;
          v47[2] = 0;
        }
        *(_OWORD *)(v57 + 48) = *(_OWORD *)(v10 - 6);
        *(void *)(v57 + 64) = *((void *)v10 - 1);
        *((void *)v10 - 3) = 0;
        *((void *)v10 - 2) = 0;
        *((void *)v10 - 1) = 0;
      }
      *(v10 - 18) = v41;
      if (*((char *)v10 - 41) < 0) {
        operator delete(*((void **)v10 - 8));
      }
      *((void *)v10 - 8) = v44;
      *(void *)((char *)v10 - 49) = *(void *)&v244[7];
      *((void *)v10 - 7) = *(void *)v244;
      *((unsigned char *)v10 - 41) = v45;
      *(_OWORD *)(v10 - 10) = v238;
      unint64_t v60 = *((void *)v10 - 3);
      unint64_t v9 = v211;
      if (v60)
      {
        int v61 = *((void *)v10 - 2);
        double v62 = (void *)*((void *)v10 - 3);
        if (v61 != v60)
        {
          do
          {
            if (*(char *)(v61 - 1) < 0) {
              operator delete(*(void **)(v61 - 24));
            }
            v61 -= 32;
          }
          while (v61 != v60);
          double v62 = (void *)*((void *)v10 - 3);
        }
        *((void *)v10 - 2) = v60;
        operator delete(v62);
      }
      *(_OWORD *)(v10 - 6) = v222;
      *((void *)v10 - 1) = v218;
      unint64_t v4 = v49 >= a2;
      a1 = (int *)v236;
      a3 = v228;
      a2 = v233;
      if (!v4) {
        goto LABEL_95;
      }
      float64_t v63 = sub_36C258((unsigned int *)v236, v10 - 18);
      if (sub_36C258((unsigned int *)v10, v233))
      {
        a2 = v10 - 18;
        if (v63) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v63)
      {
LABEL_95:
        sub_36AB9C(v236, v10 - 18, v228, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v66 = v11 + 8;
      unint64_t v65 = *(void *)(v11 + 8);
      *(void *)&v245[7] = *(void *)(v11 + 23);
      *(void *)uint64_t v245 = *(void *)(v11 + 16);
      uint64_t v10 = (int *)v11;
      double v67 = *(unsigned char *)(v11 + 31);
      *(void *)double v66 = 0;
      *(void *)(v66 + 8) = 0;
      *(void *)(v66 + 16) = 0;
      uint64_t v239 = *(_OWORD *)(v66 + 24);
      int v68 = (void **)(v66 + 40);
      int v223 = *(_OWORD *)(v66 + 40);
      double v69 = *(void *)(v66 + 56);
      *(void *)(v66 + 40) = 0;
      *(void *)(v66 + 48) = 0;
      *(void *)(v66 + 56) = 0;
      if (v41 >= *v9)
      {
        uint64_t v71 = v10 + 18;
        do
        {
          uint64_t v10 = v71;
          if (v71 >= v233) {
            break;
          }
          v71 += 18;
        }
        while (v41 >= *v10);
      }
      else
      {
        do
        {
          uint64_t v70 = v10[18];
          v10 += 18;
        }
        while (v41 >= v70);
      }
      uint64_t v72 = v9;
      float64x2_t v73 = v233;
      if (v10 < v233)
      {
        float64x2_t v73 = v233;
        do
        {
          float64x2_t v74 = *(v73 - 18);
          v73 -= 18;
        }
        while (v41 < v74);
      }
      while (v10 < v73)
      {
        sub_36C728(v10, v73);
        do
        {
          double v75 = v10[18];
          v10 += 18;
        }
        while (v41 >= v75);
        do
        {
          int8x16_t v76 = *(v73 - 18);
          v73 -= 18;
        }
        while (v41 < v76);
      }
      unint64_t v4 = (unint64_t)(v10 - 18) >= v236;
      char v5 = v10 - 18 == (int *)v236;
      unint64_t v9 = v72;
      if (v10 - 18 != (int *)v236)
      {
        *(_DWORD *)uint64_t v236 = *(v10 - 18);
        if (*(char *)(v236 + 31) < 0) {
          operator delete(*(void **)v66);
        }
        long long v77 = *((_OWORD *)v10 - 4);
        *(void *)(v66 + 16) = *((void *)v10 - 6);
        *(_OWORD *)double v66 = v77;
        *((unsigned char *)v10 - 41) = 0;
        *((unsigned char *)v10 - 64) = 0;
        *(_OWORD *)(v66 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v10 - 10);
        float64x2_t v78 = (void **)*v68;
        float64x2_t v79 = v236;
        if (*v68)
        {
          float64x2_t v80 = *(void ***)(v236 + 56);
          float64x2_t v81 = *v68;
          if (v80 != v78)
          {
            do
            {
              if (*((char *)v80 - 1) < 0) {
                operator delete(*(v80 - 3));
              }
              v80 -= 4;
            }
            while (v80 != v78);
            float64x2_t v81 = *v68;
          }
          float64x2_t v79 = v236;
          *(void *)(v236 + 56) = v78;
          operator delete(v81);
          *int v68 = 0;
          v68[1] = 0;
          v68[2] = 0;
        }
        *(_OWORD *)(v79 + 48) = *(_OWORD *)(v10 - 6);
        *(void *)(v79 + 64) = *((void *)v10 - 1);
        *((void *)v10 - 3) = 0;
        *((void *)v10 - 2) = 0;
        *((void *)v10 - 1) = 0;
      }
      *(v10 - 18) = v41;
      if (*((char *)v10 - 41) < 0) {
        operator delete(*((void **)v10 - 8));
      }
      *((void *)v10 - 8) = v65;
      *(void *)((char *)v10 - 49) = *(void *)&v245[7];
      *((void *)v10 - 7) = *(void *)v245;
      *((unsigned char *)v10 - 41) = v67;
      *(_OWORD *)(v10 - 10) = v239;
      double v82 = *((void *)v10 - 3);
      a3 = v228;
      if (v82)
      {
        double v83 = *((void *)v10 - 2);
        double v84 = (void *)*((void *)v10 - 3);
        if (v83 != v82)
        {
          do
          {
            if (*(char *)(v83 - 1) < 0) {
              operator delete(*(void **)(v83 - 24));
            }
            v83 -= 32;
          }
          while (v83 != v82);
          double v84 = (void *)*((void *)v10 - 3);
        }
        *((void *)v10 - 2) = v82;
        operator delete(v84);
      }
      a4 = 0;
      double result = *(double *)&v223;
      *(_OWORD *)(v10 - 6) = v223;
      *((void *)v10 - 1) = v69;
      a2 = v233;
    }
  }
  switch(v13)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v86 = *(a2 - 18);
      BOOL v85 = a2 - 18;
      if (v86 >= *(_DWORD *)v11) {
        return result;
      }
      goto LABEL_140;
    case 3:
      long long v88 = (int *)(v11 + 72);
      double v87 = *(_DWORD *)(v11 + 72);
      unsigned int v90 = *(a2 - 18);
      BOOL v85 = a2 - 18;
      BOOL v89 = v90;
      if (v87 < *(_DWORD *)v11)
      {
        if (v89 >= v87)
        {
          *(void *)&double result = sub_36C728((int *)v11, (int *)(v11 + 72)).n128_u64[0];
          if (*v85 >= *(_DWORD *)(v11 + 72)) {
            return result;
          }
          int v91 = (int *)(v11 + 72);
        }
        else
        {
LABEL_140:
          int v91 = (int *)v11;
        }
        float64x2_t v92 = v85;
        goto LABEL_142;
      }
      if (v89 < v87)
      {
        uint64_t v96 = (int *)(v11 + 72);
        uint64_t v97 = v85;
LABEL_317:
        *(void *)&double result = sub_36C728(v96, v97).n128_u64[0];
        if (*(_DWORD *)(v11 + 72) < *(_DWORD *)v11)
        {
          int v91 = (int *)v11;
          float64x2_t v92 = v88;
LABEL_142:
          *(void *)&double result = sub_36C728(v91, v92).n128_u64[0];
          return result;
        }
      }
      break;
    case 4:
      return sub_36C900((int *)v11, (int *)(v11 + 72), (int *)(v11 + 144), v9);
    case 5:
      long long v88 = (int *)(v11 + 72);
      long long v93 = (_DWORD *)(v11 + 144);
      double result = sub_36C900((int *)v11, (int *)(v11 + 72), (int *)(v11 + 144), (int *)(v11 + 216));
      uint64_t v95 = *(a2 - 18);
      unsigned __int8 v94 = a2 - 18;
      if (v95 >= *(_DWORD *)(v11 + 216)) {
        return result;
      }
      *(void *)&double result = sub_36C728((int *)(v11 + 216), v94).n128_u64[0];
      if (*(_DWORD *)(v11 + 216) >= *v93) {
        return result;
      }
      *(void *)&double result = sub_36C728((int *)(v11 + 144), (int *)(v11 + 216)).n128_u64[0];
      if (*v93 >= *v88) {
        return result;
      }
      uint64_t v96 = (int *)(v11 + 72);
      uint64_t v97 = (int *)(v11 + 144);
      goto LABEL_317;
    default:
      JUMPOUT(0);
  }
  return result;
}

  long long v54 = (const void **)(a2 - 32);
  unint64_t v11 = (const void **)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = a2 - (char *)v11;
    uint64_t v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v35 = a2 - 32;
          unint64_t v36 = *(char *)(a1 + 23);
          double v37 = *(a2 - 9);
          if (v37 >= 0) {
            double v38 = *(a2 - 9);
          }
          else {
            double v38 = *((void *)a2 - 3);
          }
          if (v37 >= 0) {
            double v39 = a2 - 32;
          }
          else {
            double v39 = (char *)*((void *)a2 - 4);
          }
          if (v36 >= 0) {
            double v40 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            double v40 = *(void *)(a1 + 8);
          }
          if (v36 >= 0) {
            float64x2_t v41 = (const void *)a1;
          }
          else {
            float64x2_t v41 = *(const void **)a1;
          }
          if (v40 >= v38) {
            unint64_t v42 = v38;
          }
          else {
            unint64_t v42 = v40;
          }
          BOOL v43 = memcmp(v39, v41, v42);
          uint64_t v44 = v38 < v40;
          if (v43) {
            uint64_t v44 = v43 < 0;
          }
          if (v44) {
            goto LABEL_64;
          }
          uint64_t v45 = memcmp(v41, v39, v42);
          unint64_t v46 = v40 < v38;
          if (v45) {
            unint64_t v46 = v45 < 0;
          }
          if (!v46 && *((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
          {
LABEL_64:
            float64x2_t v58 = *(void *)(a1 + 16);
            unint64_t v56 = *(_OWORD *)a1;
            unint64_t v47 = *(_OWORD *)v35;
            *(void *)(a1 + 16) = *((void *)a2 - 2);
            *(_OWORD *)a1 = v47;
            *(_OWORD *)unint64_t v35 = v56;
            *((void *)a2 - 2) = v58;
            double v48 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *((_DWORD *)a2 - 2);
            *((_DWORD *)a2 - 2) = v48;
          }
          break;
        case 3uLL:
          sub_AA798((const void **)a1, (const void **)(a1 + 32), v54);
          break;
        case 4uLL:
          sub_AB920((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), v54);
          break;
        case 5uLL:
          sub_ABBDC(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), v54);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 767) {
      break;
    }
    unint64_t v15 = v12;
    if (v12 == 1)
    {
      if ((char *)a1 != a2)
      {
        double v49 = (v14 - 2) >> 1;
        double v50 = v49 + 1;
        float64x2_t v51 = (__n128 *)(a1 + 32 * v49);
        do
        {
          sub_ABF6C((char *)a1, a3, v13 >> 5, v51);
          v51 -= 2;
          --v50;
        }
        while (v50);
        uint64_t v52 = (unint64_t)v13 >> 5;
        do
        {
          sub_3D765C(a1, (uint64_t)a2, a3, v52);
          a2 -= 32;
        }
        while (v52-- > 2);
      }
      return;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = a1 + 32 * (v14 >> 1);
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_AA798((const void **)v17, (const void **)a1, v54);
      if (a5) {
        goto LABEL_33;
      }
    }
    else
    {
      sub_AA798((const void **)a1, (const void **)v17, v54);
      unint64_t v18 = 32 * v16;
      sub_AA798((const void **)(a1 + 32), (const void **)(a1 + v18 - 32), (const void **)a2 - 8);
      sub_AA798((const void **)(a1 + 64), (const void **)(a1 + 32 + v18), (const void **)a2 - 12);
      sub_AA798((const void **)(a1 + v18 - 32), (const void **)v17, (const void **)(a1 + 32 + v18));
      unint64_t v57 = *(void *)(a1 + 16);
      unint64_t v55 = *(_OWORD *)a1;
      unint64_t v19 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v19;
      *(void *)(v17 + 16) = v57;
      *(_OWORD *)unint64_t v17 = v55;
      uint64_t v20 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(a1 + v18 + 24);
      *(_DWORD *)(a1 + v18 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v20;
      if (a5) {
        goto LABEL_33;
      }
    }
    double v21 = *(char *)(a1 + 23);
    uint64_t v22 = *(char *)(a1 - 9);
    if (v22 >= 0) {
      unint64_t v23 = *(unsigned __int8 *)(a1 - 9);
    }
    else {
      unint64_t v23 = *(void *)(a1 - 24);
    }
    if (v22 >= 0) {
      uint64_t v24 = (const void *)(a1 - 32);
    }
    else {
      uint64_t v24 = *(const void **)(a1 - 32);
    }
    if (v21 >= 0) {
      char v25 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      char v25 = *(void *)(a1 + 8);
    }
    if (v21 >= 0) {
      BOOL v26 = (const void *)a1;
    }
    else {
      BOOL v26 = *(const void **)a1;
    }
    if (v25 >= v23) {
      unint64_t v27 = v23;
    }
    else {
      unint64_t v27 = v25;
    }
    double v28 = memcmp(v24, v26, v27);
    double v29 = v23 < v25;
    if (v28) {
      double v29 = v28 < 0;
    }
    if (!v29)
    {
      double v30 = memcmp(v26, v24, v27);
      unint64_t v31 = v25 < v23;
      if (v30) {
        unint64_t v31 = v30 < 0;
      }
      if (v31 || *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 24))
      {
        unint64_t v11 = sub_AABB8(a1, a2);
        goto LABEL_38;
      }
    }
LABEL_33:
    unint64_t v32 = sub_AB088(a1, (const void **)a2);
    if ((v33 & 1) == 0) {
      goto LABEL_36;
    }
    double v34 = sub_3D7208(a1, v32);
    unint64_t v11 = v32 + 4;
    if (sub_3D7208((uint64_t)(v32 + 4), (const void **)a2))
    {
      a4 = -v15;
      a2 = (char *)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v34)
    {
LABEL_36:
      sub_3D6C94(a1, v32, a3, -v15, a5 & 1);
      unint64_t v11 = v32 + 4;
LABEL_38:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_AA2D0((char *)a1, a2);
  }
  else
  {
    sub_AA544((const void **)a1, (const void **)a2);
  }
}

  unint64_t v11 = a2 - 1;
  double v62 = a2 - 3;
  float64_t v63 = a2 - 2;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  int v61 = a5;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = a2 - v12;
    if (!(!v6 & v5)) {
      break;
    }
    if (v15 <= 383)
    {
      double v48 = v12 + 1;
      double v50 = v12 == a2 || v48 == a2;
      if (a5)
      {
        if (!v50)
        {
          float64x2_t v51 = 0;
          uint64_t v52 = v12;
          do
          {
            long long v54 = v52;
            uint64_t v52 = v48;
            if (sub_36630(v48, v54))
            {
              unint64_t v64 = *v52;
              unint64_t v55 = v51;
              do
              {
                *(__n128 *)((char *)v12 + v55 + 16) = *(__n128 *)((char *)v12 + v55);
                if (!v55)
                {
                  double v53 = v12;
                  goto LABEL_90;
                }
                v55 -= 16;
              }
              while (sub_36630(&v64, (__n128 *)((char *)v12 + v55)));
              double v53 = (__n128 *)((char *)v12 + v55 + 16);
LABEL_90:
              void *v53 = v64;
            }
            double v48 = v52 + 1;
            v51 += 16;
          }
          while (&v52[1] != a2);
        }
      }
      else if (!v50)
      {
        unint64_t v57 = v12 - 1;
        do
        {
          float64x2_t v58 = a1;
          a1 = v48;
          if (sub_36630(v48, v58))
          {
            unint64_t v64 = *a1;
            double v59 = v57;
            do
              v59[2] = v59[1];
            while (sub_36630(&v64, v59--));
            v59[2] = v64;
          }
          double v48 = a1 + 1;
          ++v57;
        }
        while (&a1[1] != a2);
      }
      return;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_3F79D0(v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x801)
    {
      unint64_t v19 = sub_36630(&a1[v16 >> 1], a1);
      uint64_t v20 = sub_36630(&a2[-1], v18);
      if (v19)
      {
        if (v20)
        {
          unint64_t v64 = *a1;
          *a1 = *v11;
          goto LABEL_24;
        }
        unint64_t v64 = *a1;
        *a1 = *v18;
        *unint64_t v18 = v64;
        if (sub_36630(&a2[-1], v18))
        {
          unint64_t v64 = *v18;
          *unint64_t v18 = *v11;
LABEL_24:
          *unint64_t v11 = v64;
        }
      }
      else if (v20)
      {
        unint64_t v64 = *v18;
        *unint64_t v18 = *v11;
        *unint64_t v11 = v64;
        if (sub_36630(v18, a1))
        {
          unint64_t v64 = *a1;
          *a1 = *v18;
          *unint64_t v18 = v64;
        }
      }
      unint64_t v23 = a1 + 1;
      uint64_t v24 = &a1[v17 - 1];
      char v25 = sub_36630(v24, &a1[1]);
      BOOL v26 = sub_36630(v63, v24);
      if (v25)
      {
        if (v26)
        {
          unint64_t v27 = *v23;
          double v28 = a2 - 2;
          *unint64_t v23 = *v63;
          goto LABEL_38;
        }
        unint64_t v64 = *v23;
        double v30 = v64;
        *unint64_t v23 = *v24;
        *uint64_t v24 = v30;
        if (sub_36630(v63, v24))
        {
          unint64_t v64 = *v24;
          double v28 = a2 - 2;
          *uint64_t v24 = *v63;
          unint64_t v27 = v64;
LABEL_38:
          char *v28 = v27;
        }
      }
      else if (v26)
      {
        unint64_t v64 = *v24;
        *uint64_t v24 = *v63;
        double *v63 = v64;
        if (sub_36630(v24, &a1[1]))
        {
          unint64_t v64 = *v23;
          double v29 = v64;
          *unint64_t v23 = *v24;
          *uint64_t v24 = v29;
        }
      }
      unint64_t v31 = a1 + 2;
      unint64_t v32 = &a1[v17 + 1];
      double v33 = sub_36630(v32, &a1[2]);
      double v34 = sub_36630(v62, v32);
      if (v33)
      {
        if (v34)
        {
          unint64_t v35 = *v31;
          unint64_t v36 = a2 - 3;
          *unint64_t v31 = *v62;
          goto LABEL_47;
        }
        unint64_t v64 = *v31;
        double v38 = v64;
        *unint64_t v31 = *v32;
        *unint64_t v32 = v38;
        if (sub_36630(v62, v32))
        {
          unint64_t v64 = *v32;
          unint64_t v36 = a2 - 3;
          *unint64_t v32 = *v62;
          unint64_t v35 = v64;
LABEL_47:
          *unint64_t v36 = v35;
        }
      }
      else if (v34)
      {
        unint64_t v64 = *v32;
        *unint64_t v32 = *v62;
        *double v62 = v64;
        if (sub_36630(v32, &a1[2]))
        {
          unint64_t v64 = *v31;
          double v37 = v64;
          *unint64_t v31 = *v32;
          *unint64_t v32 = v37;
        }
      }
      double v39 = sub_36630(v18, v24);
      double v40 = sub_36630(v32, v18);
      if (v39)
      {
        if (v40)
        {
          unint64_t v64 = *v24;
          *uint64_t v24 = *v32;
          goto LABEL_56;
        }
        unint64_t v64 = *v24;
        *uint64_t v24 = *v18;
        *unint64_t v18 = v64;
        if (sub_36630(v32, v18))
        {
          unint64_t v64 = *v18;
          *unint64_t v18 = *v32;
LABEL_56:
          *unint64_t v32 = v64;
        }
      }
      else if (v40)
      {
        unint64_t v64 = *v18;
        *unint64_t v18 = *v32;
        *unint64_t v32 = v64;
        if (sub_36630(v18, v24))
        {
          unint64_t v64 = *v24;
          *uint64_t v24 = *v18;
          *unint64_t v18 = v64;
        }
      }
      unint64_t v64 = *a1;
      *a1 = *v18;
      *unint64_t v18 = v64;
      a5 = v61;
      if (v61) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    double v21 = sub_36630(a1, &a1[v16 >> 1]);
    uint64_t v22 = sub_36630(&a2[-1], a1);
    if (v21)
    {
      if (v22)
      {
        unint64_t v64 = *v18;
        *unint64_t v18 = *v11;
      }
      else
      {
        unint64_t v64 = *v18;
        *unint64_t v18 = *a1;
        *a1 = v64;
        if (!sub_36630(&a2[-1], a1)) {
          goto LABEL_34;
        }
        unint64_t v64 = *a1;
        *a1 = *v11;
      }
      *unint64_t v11 = v64;
    }
    else if (v22)
    {
      unint64_t v64 = *a1;
      *a1 = *v11;
      *unint64_t v11 = v64;
      if (sub_36630(a1, v18))
      {
        unint64_t v64 = *v18;
        *unint64_t v18 = *a1;
        *a1 = v64;
        if (a5) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
    }
LABEL_34:
    if (a5) {
      goto LABEL_59;
    }
LABEL_58:
    if (!sub_36630(&a1[-1], a1))
    {
      uint64_t v12 = (__n128 *)sub_3F72A0(a1, a2);
      goto LABEL_64;
    }
LABEL_59:
    float64x2_t v41 = (__n128 *)sub_3F73B4((long long *)a1, (long long *)a2);
    if ((v42 & 1) == 0) {
      goto LABEL_62;
    }
    BOOL v43 = sub_3F74D0(a1, v41);
    uint64_t v12 = v41 + 1;
    if (sub_3F74D0(v41 + 1, a2))
    {
      a4 = -v14;
      a2 = v41;
      if (v43) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v43)
    {
LABEL_62:
      sub_3F6A74(a1, v41, a3, -v14, a5 & 1);
      uint64_t v12 = v41 + 1;
LABEL_64:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  switch(v16)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (!sub_36630(&a2[-1], v12)) {
        return;
      }
      goto LABEL_72;
    case 3uLL:
      uint64_t v44 = v12 + 1;
      uint64_t v45 = sub_36630(&v12[1], v12);
      unint64_t v46 = sub_36630(v11, &v12[1]);
      if (v45)
      {
        if (v46)
        {
LABEL_72:
          unint64_t v64 = *v12;
          *uint64_t v12 = *v11;
          unint64_t v47 = v64;
        }
        else
        {
          unint64_t v64 = *v12;
          *uint64_t v12 = *v44;
          *uint64_t v44 = v64;
          if (!sub_36630(v11, &v12[1])) {
            return;
          }
          unint64_t v47 = *v44;
          *uint64_t v44 = *v11;
        }
        *unint64_t v11 = v47;
        return;
      }
      if (v46)
      {
        unint64_t v56 = *v44;
        *uint64_t v44 = *v11;
        *unint64_t v11 = v56;
        if (sub_36630(&v12[1], v12))
        {
          unint64_t v64 = *v12;
          *uint64_t v12 = *v44;
          *uint64_t v44 = v64;
        }
      }
      break;
    case 4uLL:
      sub_3F77C0(v12, &v12[1], &v12[2], &a2[-1]);
      return;
    case 5uLL:
      sub_3F7900(v12, &v12[1], &v12[2], &v12[3], &a2[-1]);
      return;
    default:
      JUMPOUT(0);
  }
}

  unint64_t v11 = a2 - 8;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = ((char *)a2 - (char *)v12) >> 5;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v29 = *((double *)a2 - 2);
          double v30 = *((double *)v12 + 2);
          if (v29 < v30
            || v30 >= v29
            && ((unint64_t v31 = *(a2 - 2), v32 = v12[6], v31 < v32)
             || v32 >= v31
             && (((unint64_t)*(a2 - 8) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 14) << 16) | (*((unsigned char *)a2 - 26) == 0)) < ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0))))
          {
            *(_OWORD *)unint64_t v35 = *(_OWORD *)v12;
            *(_OWORD *)&v35[16] = *((_OWORD *)v12 + 1);
            double v33 = *(_OWORD *)v11;
            *(_OWORD *)(v12 + 3) = *(_OWORD *)(a2 - 5);
            *(_OWORD *)uint64_t v12 = v33;
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v35;
            *(_OWORD *)(a2 - 5) = *(_OWORD *)&v35[12];
          }
          break;
        case 3uLL:
          sub_41642C((long long *)v12, v12 + 8, a2 - 8);
          break;
        case 4uLL:
          sub_4171DC((uint64_t)v12, v12 + 8, v12 + 16, a2 - 8);
          break;
        case 5uLL:
          sub_4173E8((uint64_t)v12, v12 + 8, v12 + 16, v12 + 24, a2 - 8);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 767) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_4176B0((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[8 * (v16 >> 1)];
    if ((unint64_t)v15 > 0x1000)
    {
      sub_41642C((long long *)v12, &v12[8 * (v16 >> 1)], a2 - 8);
      unint64_t v19 = 8 * v17;
      uint64_t v20 = &v12[8 * v17 - 8];
      sub_41642C((long long *)v12 + 2, v20, a2 - 16);
      sub_41642C((long long *)v12 + 4, &v12[v19 + 8], a2 - 24);
      sub_41642C((long long *)v20, v18, &v12[v19 + 8]);
      *(_OWORD *)double v34 = *(_OWORD *)v12;
      *(_OWORD *)&v34[16] = *((_OWORD *)v12 + 1);
      double v21 = *(_OWORD *)v18;
      *(_OWORD *)(v12 + 3) = *(_OWORD *)(v18 + 3);
      *(_OWORD *)uint64_t v12 = v21;
      *(_OWORD *)(v18 + 3) = *(_OWORD *)&v34[12];
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v34;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_41642C((long long *)&v12[8 * (v16 >> 1)], v12, a2 - 8);
      if (a5) {
        goto LABEL_17;
      }
    }
    uint64_t v22 = *((double *)v12 - 2);
    unint64_t v23 = *((double *)v12 + 2);
    if (v22 >= v23)
    {
      if (v23 < v22
        || (uint64_t v24 = *(v12 - 2), v25 = v12[6], v24 >= v25)
        && (v25 < v24
         || (((unint64_t)*(v12 - 8) << 32) | ((unint64_t)*((unsigned __int16 *)v12 - 14) << 16) | (*((unsigned char *)v12 - 26) == 0)) >= ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0))))
      {
        uint64_t v12 = sub_4167B4(v12, (unint64_t)a2);
        goto LABEL_22;
      }
    }
LABEL_17:
    BOOL v26 = sub_416B64(v12, (unint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_20;
    }
    double v28 = sub_416E54((uint64_t)v12, v26);
    uint64_t v12 = v26 + 8;
    if (sub_416E54((uint64_t)(v26 + 8), a2))
    {
      a4 = -v14;
      a2 = v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v28)
    {
LABEL_20:
      sub_415BD4(a1, v26, a3, -v14, a5 & 1);
      uint64_t v12 = v26 + 8;
LABEL_22:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_416094(v12, a2);
  }
  else
  {
    sub_41628C(v12, a2);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1108B50(a2 - 1, v11[1]))
          {
            uint64_t v44 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v44;
          }
          break;
        case 3uLL:
          sub_454D88(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          unint64_t v23 = (long long *)(v11 + 2);
          uint64_t v24 = (long long *)(v11 + 4);
          sub_454D88(v11, v11 + 2, v11 + 4);
          if (sub_1108B50(a2 - 1, v11[5]))
          {
            char v25 = *v24;
            *uint64_t v24 = *((_OWORD *)a2 - 1);
            *((_OWORD *)a2 - 1) = v25;
            if (sub_1108B50(v11 + 5, v11[3]))
            {
              BOOL v26 = *v23;
              *unint64_t v23 = *v24;
              *uint64_t v24 = v26;
              if (sub_1108B50(v11 + 3, v11[1]))
              {
                uint64_t v44 = *(_OWORD *)v11;
                *(_OWORD *)unint64_t v11 = *v23;
                *unint64_t v23 = v44;
              }
            }
          }
          break;
        case 5uLL:
          sub_45535C(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v35 = (v15 - 2) >> 1;
        unint64_t v36 = v35 + 1;
        double v37 = (uint64_t)&v11[2 * v35];
        do
        {
          sub_4554A4((BOOL)v11, a3, ((char *)a2 - (char *)v11) >> 4, v37);
          v37 -= 16;
          --v36;
        }
        while (v36);
        sub_4555C0((BOOL)v11, a2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x801)
    {
      sub_454D88(v17, v11, a2 - 2);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_454D88(v11, v17, a2 - 2);
      unint64_t v18 = 2 * v16;
      unint64_t v19 = &v11[2 * v16 - 2];
      sub_454D88(v11 + 2, v19, a2 - 4);
      sub_454D88(v11 + 4, &v11[v18 + 2], a2 - 6);
      sub_454D88(v19, v17, &v11[v18 + 2]);
      uint64_t v44 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v44;
      if (a5) {
        goto LABEL_12;
      }
    }
    if (!sub_1108B50(v11 - 1, v11[1]))
    {
      unint64_t v11 = (double *)sub_454EAC(v11, a2);
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v20 = sub_454FE0(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v22 = sub_45510C(v11, v20);
    unint64_t v11 = v20 + 2;
    if (sub_45510C(v20 + 2, a2))
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_15:
      sub_454898(a1, v20, a3, -v13, a5 & 1);
      unint64_t v11 = v20 + 2;
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    if (v11 != a2)
    {
      unint64_t v27 = v11 + 2;
      if (v11 + 2 != a2)
      {
        double v28 = 0;
        double v29 = v11;
        do
        {
          unint64_t v31 = v29[1];
          unint64_t v32 = v29 + 3;
          double v29 = v27;
          if (sub_1108B50(v32, v31))
          {
            uint64_t v44 = *(_OWORD *)v29;
            double v33 = v28;
            do
            {
              double v34 = (double *)((char *)v11 + v33);
              *(_OWORD *)((char *)v11 + v33 + 16) = *(_OWORD *)((char *)v11 + v33);
              if (!v33)
              {
                double v30 = v11;
                goto LABEL_38;
              }
              v33 -= 16;
            }
            while (sub_1108B50((double *)&v44 + 1, *(v34 - 1)));
            double v30 = (double *)((char *)v11 + v33 + 16);
LABEL_38:
            *(_OWORD *)double v30 = v44;
          }
          unint64_t v27 = v29 + 2;
          v28 += 16;
        }
        while (v29 + 2 != a2);
      }
    }
  }
  else if (v11 != a2)
  {
    double v38 = v11 + 2;
    if (v11 + 2 != a2)
    {
      do
      {
        double v39 = a1[1];
        double v40 = a1 + 3;
        a1 = v38;
        if (sub_1108B50(v40, v39))
        {
          uint64_t v44 = *(_OWORD *)a1;
          float64x2_t v41 = a1;
          do
          {
            unint64_t v42 = v41 - 2;
            *(_OWORD *)float64x2_t v41 = *((_OWORD *)v41 - 1);
            BOOL v43 = sub_1108B50((double *)&v44 + 1, *(v41 - 3));
            float64x2_t v41 = v42;
          }
          while (v43);
          *(_OWORD *)unint64_t v42 = v44;
        }
        double v38 = a1 + 2;
      }
      while (a1 + 2 != a2);
    }
  }
}

  unint64_t v11 = a2 - 2;
  uint64_t v12 = a2 - 4;
  uint64_t v13 = a2 - 6;
  uint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    unint64_t v15 = (uint64_t)a2 - v14;
    uint64_t v16 = (uint64_t)((uint64_t)a2 - v14) >> 5;
    if (v6 || !v5)
    {
      switch(v16)
      {
        case 0:
        case 1:
          return result;
        case 2:
          long long v93 = a2[-2].n128_u32[0];
          float64x2_t v92 = a2 - 2;
          if (v93 >= *(_DWORD *)v14) {
            return result;
          }
          goto LABEL_101;
        case 3:
          unsigned __int8 v94 = (__n128 *)(v14 + 32);
          uint64_t v95 = *(_DWORD *)(v14 + 32);
          uint64_t v97 = a2[-2].n128_i32[0];
          float64x2_t v92 = a2 - 2;
          uint64_t v96 = v97;
          if (v95 < *(_DWORD *)v14)
          {
            if (v96 >= v95)
            {
              uint64_t v187 = *(__n128 *)v14;
              uint64_t v217 = *(_OWORD *)(v14 + 16);
              double v156 = *(_OWORD *)(v14 + 48);
              *(__n128 *)uint64_t v14 = *v94;
              *(_OWORD *)(v14 + 16) = v156;
              double result = v187;
              *unsigned __int8 v94 = v187;
              *(_OWORD *)(v14 + 48) = v217;
              if (v92->n128_u32[0] >= *(_DWORD *)(v14 + 32)) {
                return result;
              }
              double result = *v94;
              double v99 = *(__n128 *)(v14 + 48);
              uint64_t v157 = v92[1];
              *unsigned __int8 v94 = *v92;
              *(__n128 *)(v14 + 48) = v157;
            }
            else
            {
LABEL_101:
              uint64_t v180 = *(__n128 *)v14;
              uint64_t v211 = *(__n128 *)(v14 + 16);
              double v98 = v92[1];
              *(__n128 *)uint64_t v14 = *v92;
              *(__n128 *)(v14 + 16) = v98;
              double result = v180;
              double v99 = v211;
            }
            *float64x2_t v92 = result;
            v92[1] = v99;
            return result;
          }
          if (v96 < v95)
          {
            double result = *v94;
            uint64_t v215 = *(__n128 *)(v14 + 48);
            double v150 = v92[1];
            *unsigned __int8 v94 = *v92;
            *(__n128 *)(v14 + 48) = v150;
            *float64x2_t v92 = result;
            v92[1] = v215;
            if (*(_DWORD *)(v14 + 32) < *(_DWORD *)v14)
            {
              uint64_t v185 = *(__n128 *)v14;
              uint64_t v216 = *(_OWORD *)(v14 + 16);
              BOOL v151 = *(_OWORD *)(v14 + 48);
              *(__n128 *)uint64_t v14 = *v94;
              *(_OWORD *)(v14 + 16) = v151;
              double result = v185;
              *unsigned __int8 v94 = v185;
              *(_OWORD *)(v14 + 48) = v216;
            }
          }
          break;
        case 4:
          result.n128_u64[0] = sub_4907E4((__n128 *)v14, (__n128 *)(v14 + 32), (__n128 *)(v14 + 64), a2 - 2, result).n128_u64[0];
          return result;
        case 5:
          uint64_t v100 = (__n128 *)(v14 + 32);
          char v101 = (__n128 *)(v14 + 64);
          unsigned int v102 = (__n128 *)(v14 + 96);
          result.n128_u64[0] = sub_4907E4((__n128 *)v14, (__n128 *)(v14 + 32), (__n128 *)(v14 + 64), (__n128 *)(v14 + 96), result).n128_u64[0];
          int v104 = a2[-2].n128_u32[0];
          unsigned int v103 = a2 - 2;
          if (v104 < *(_DWORD *)(v14 + 96))
          {
            double result = *v102;
            uint64_t v212 = *(__n128 *)(v14 + 112);
            int v105 = v103[1];
            *unsigned int v102 = *v103;
            *(__n128 *)(v14 + 112) = v105;
            *unsigned int v103 = result;
            v103[1] = v212;
            if (v102->n128_u32[0] < v101->n128_u32[0])
            {
              uint64_t v106 = *v101;
              double result = *(__n128 *)(v14 + 80);
              unsigned int v107 = *(_OWORD *)(v14 + 112);
              _DWORD *v101 = *v102;
              *(_OWORD *)(v14 + 80) = v107;
              *unsigned int v102 = v106;
              *(__n128 *)(v14 + 112) = result;
              if (v101->n128_u32[0] < v100->n128_u32[0])
              {
                int64_t v108 = *v100;
                double result = *(__n128 *)(v14 + 48);
                uint64_t v109 = *(_OWORD *)(v14 + 80);
                *uint64_t v100 = *v101;
                *(_OWORD *)(v14 + 48) = v109;
                _DWORD *v101 = v108;
                *(__n128 *)(v14 + 80) = result;
                if (*(_DWORD *)(v14 + 32) < *(_DWORD *)v14)
                {
                  uint64_t v181 = *(__n128 *)v14;
                  int v213 = *(_OWORD *)(v14 + 16);
                  long double v110 = *(_OWORD *)(v14 + 48);
                  *(__n128 *)uint64_t v14 = *v100;
                  *(_OWORD *)(v14 + 16) = v110;
                  double result = v181;
                  *uint64_t v100 = v181;
                  *(_OWORD *)(v14 + 48) = v213;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((__n128 *)v14 == a2) {
        return result;
      }
      uint64_t v122 = (unint64_t)(v16 - 2) >> 1;
      long double v123 = v122;
      while (1)
      {
        if (v122 >= v123)
        {
          uint64x2_t v125 = (2 * v123) | 1;
          uint64_t v126 = v14 + 32 * v125;
          if (2 * v123 + 2 >= v16)
          {
            unsigned int v129 = (_OWORD *)(v14 + 32 * v123);
            int v130 = *(_DWORD *)v129;
            if (*(_DWORD *)v126 >= *(_DWORD *)v129) {
              goto LABEL_142;
            }
          }
          else
          {
            long double v127 = *(_DWORD *)(v126 + 32);
            unsigned int v128 = *(_DWORD *)v126 >= v127;
            if (*(_DWORD *)v126 > v127) {
              long double v127 = *(_DWORD *)v126;
            }
            if (!v128)
            {
              v126 += 32;
              uint64x2_t v125 = 2 * v123 + 2;
            }
            unsigned int v129 = (_OWORD *)(v14 + 32 * v123);
            int v130 = *(_DWORD *)v129;
            if (v127 >= *(_DWORD *)v129)
            {
LABEL_142:
              *(_OWORD *)&v183[12] = v129[1];
              *(_OWORD *)unint64_t v183 = *(_OWORD *)((char *)v129 + 4);
              while (1)
              {
                uint64_t v133 = v129;
                unsigned int v129 = (_OWORD *)v126;
                long double v134 = *(_OWORD *)(v126 + 16);
                *uint64_t v133 = *(_OWORD *)v126;
                v133[1] = v134;
                if (v122 < v125) {
                  break;
                }
                double v135 = (2 * v125) | 1;
                uint64_t v126 = v14 + 32 * v135;
                uint64x2_t v125 = 2 * v125 + 2;
                if (v125 < v16)
                {
                  int v131 = *(_DWORD *)v126;
                  int v132 = *(_DWORD *)(v126 + 32);
                  if (*(_DWORD *)v126 <= v132) {
                    int v131 = *(_DWORD *)(v126 + 32);
                  }
                  if (*(_DWORD *)v126 >= v132) {
                    uint64x2_t v125 = v135;
                  }
                  else {
                    v126 += 32;
                  }
                  if (v131 < v130) {
                    break;
                  }
                }
                else
                {
                  uint64x2_t v125 = v135;
                  if (*(_DWORD *)v126 < v130) {
                    break;
                  }
                }
              }
              *(_DWORD *)unsigned int v129 = v130;
              v129[1] = *(_OWORD *)&v183[12];
              *(_OWORD *)((char *)v129 + 4) = *(_OWORD *)v183;
            }
          }
        }
        uint64_t v124 = v123-- <= 0;
        if (v124)
        {
          long double v136 = (unint64_t)v15 >> 5;
          do
          {
            unsigned int v137 = 0;
            uint64_t v184 = *(__n128 *)v14;
            uint64_t v214 = *(__n128 *)(v14 + 16);
            unsigned int v138 = (_OWORD *)v14;
            do
            {
              int v140 = (uint64_t)&v138[2 * v137 + 2];
              uint64_t v141 = (2 * v137) | 1;
              uint64_t v142 = 2 * v137 + 2;
              if (v142 < v136 && *(_DWORD *)v140 < *(_DWORD *)(v140 + 32))
              {
                v140 += 32;
                uint64_t v141 = v142;
              }
              int v139 = *(_OWORD *)(v140 + 16);
              *unsigned int v138 = *(_OWORD *)v140;
              v138[1] = v139;
              unsigned int v138 = (_OWORD *)v140;
              unsigned int v137 = v141;
            }
            while (v141 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
            a2 -= 2;
            if ((__n128 *)v140 == a2)
            {
              double result = v184;
              *(__n128 *)int v140 = v184;
              *(__n128 *)(v140 + 16) = v214;
            }
            else
            {
              int v143 = a2[1];
              *(__n128 *)int v140 = *a2;
              *(__n128 *)(v140 + 16) = v143;
              double result = v184;
              *a2 = v184;
              a2[1] = v214;
              unsigned int v144 = v140 - v14 + 32;
              if (v144 >= 33)
              {
                unsigned int v145 = (((unint64_t)v144 >> 5) - 2) >> 1;
                long double v146 = (_OWORD *)(v14 + 32 * v145);
                uint64_t v147 = *(_DWORD *)v140;
                if (*(_DWORD *)v146 < *(_DWORD *)v140)
                {
                  *(_OWORD *)&v160[12] = *(_OWORD *)(v140 + 16);
                  *(_OWORD *)uint64_t v160 = *(_OWORD *)(v140 + 4);
                  do
                  {
                    BOOL v148 = (_OWORD *)v140;
                    int v140 = (uint64_t)v146;
                    double v149 = v146[1];
                    *BOOL v148 = *v146;
                    v148[1] = v149;
                    if (!v145) {
                      break;
                    }
                    unsigned int v145 = (v145 - 1) >> 1;
                    long double v146 = (_OWORD *)(v14 + 32 * v145);
                  }
                  while (*(_DWORD *)v146 < v147);
                  *(_DWORD *)int v140 = v147;
                  double result = *(__n128 *)v160;
                  *(_OWORD *)(v140 + 16) = *(_OWORD *)&v160[12];
                  *(_OWORD *)(v140 + 4) = *(_OWORD *)v160;
                }
              }
            }
            uint64_t v124 = v136-- <= 2;
          }
          while (!v124);
          return result;
        }
      }
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = (__n128 *)(v14 + 32 * ((unint64_t)v16 >> 1));
    unint64_t v19 = v11->n128_u32[0];
    if ((unint64_t)v15 <= 0x1000)
    {
      uint64_t v22 = *(_DWORD *)v14;
      if (*(_DWORD *)v14 < v18->n128_u32[0])
      {
        if (v19 >= v22)
        {
          uint64_t v169 = *v18;
          uint64_t v197 = v18[1];
          BOOL v43 = *(__n128 *)(v14 + 16);
          *unint64_t v18 = *(__n128 *)v14;
          v18[1] = v43;
          *(__n128 *)uint64_t v14 = v169;
          *(__n128 *)(v14 + 16) = v197;
          if (v11->n128_u32[0] >= *(_DWORD *)v14) {
            goto LABEL_32;
          }
          uint64_t v162 = *(__n128 *)v14;
          uint64_t v189 = *(__n128 *)(v14 + 16);
          uint64_t v44 = a2[-1];
          *(__n128 *)uint64_t v14 = *v11;
          *(__n128 *)(v14 + 16) = v44;
        }
        else
        {
          uint64_t v162 = *v18;
          uint64_t v189 = v18[1];
          unint64_t v23 = a2[-1];
          *unint64_t v18 = *v11;
          v18[1] = v23;
        }
        *unint64_t v11 = v162;
        a2[-1] = v189;
LABEL_32:
        --a3;
        double v28 = *(_DWORD *)v14;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v19 >= v22) {
        goto LABEL_32;
      }
      unint64_t v165 = *(__n128 *)v14;
      uint64_t v192 = *(__n128 *)(v14 + 16);
      BOOL v26 = a2[-1];
      *(__n128 *)uint64_t v14 = *v11;
      *(__n128 *)(v14 + 16) = v26;
      *unint64_t v11 = v165;
      a2[-1] = v192;
      if (*(_DWORD *)v14 >= v18->n128_u32[0]) {
        goto LABEL_32;
      }
      uint64_t v166 = *v18;
      uint64_t v193 = v18[1];
      unint64_t v27 = *(__n128 *)(v14 + 16);
      *unint64_t v18 = *(__n128 *)v14;
      v18[1] = v27;
      *(__n128 *)uint64_t v14 = v166;
      *(__n128 *)(v14 + 16) = v193;
      --a3;
      double v28 = *(_DWORD *)v14;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(_DWORD *)(v14 - 32) < v28) {
        goto LABEL_57;
      }
      *(_OWORD *)&v159[12] = *(_OWORD *)(v14 + 16);
      *(_OWORD *)double v159 = *(_OWORD *)(v14 + 4);
      if (v28 < v11->n128_u32[0])
      {
        do
        {
          double v84 = *(_DWORD *)(v14 + 32);
          v14 += 32;
        }
        while (v28 >= v84);
      }
      else
      {
        BOOL v85 = v14 + 32;
        do
        {
          uint64_t v14 = v85;
          if (v85 >= (unint64_t)a2) {
            break;
          }
          v85 += 32;
        }
        while (v28 >= *(_DWORD *)v14);
      }
      double v86 = a2;
      if (v14 < (unint64_t)a2)
      {
        double v86 = a2;
        do
        {
          double v87 = v86[-2].n128_u32[0];
          v86 -= 2;
        }
        while (v28 < v87);
      }
      while (v14 < (unint64_t)v86)
      {
        uint64_t v179 = *(__n128 *)v14;
        int v210 = *(__n128 *)(v14 + 16);
        long long v88 = v86[1];
        *(__n128 *)uint64_t v14 = *v86;
        *(__n128 *)(v14 + 16) = v88;
        char *v86 = v179;
        v86[1] = v210;
        do
        {
          BOOL v89 = *(_DWORD *)(v14 + 32);
          v14 += 32;
        }
        while (v28 >= v89);
        do
        {
          unsigned int v90 = v86[-2].n128_u32[0];
          v86 -= 2;
        }
        while (v28 < v90);
      }
      char v5 = v14 - 32 >= a1;
      char v6 = v14 - 32 == a1;
      if (v14 - 32 != a1)
      {
        int v91 = *(_OWORD *)(v14 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 16) = v91;
      }
      a4 = 0;
      *(_DWORD *)(v14 - 32) = v28;
      double result = *(__n128 *)v159;
      *(_OWORD *)(v14 - 16) = *(_OWORD *)&v159[12];
      *(_OWORD *)(v14 - 28) = *(_OWORD *)v159;
    }
    else
    {
      uint64_t v20 = v18->n128_u32[0];
      if (v18->n128_u32[0] >= *(_DWORD *)v14)
      {
        if (v19 < v20)
        {
          uint64_t v163 = *v18;
          double v190 = v18[1];
          uint64_t v24 = a2[-1];
          *unint64_t v18 = *v11;
          v18[1] = v24;
          *unint64_t v11 = v163;
          a2[-1] = v190;
          if (v18->n128_u32[0] < *(_DWORD *)v14)
          {
            unint64_t v164 = *(__n128 *)v14;
            uint64_t v191 = *(__n128 *)(v14 + 16);
            char v25 = v18[1];
            *(__n128 *)uint64_t v14 = *v18;
            *(__n128 *)(v14 + 16) = v25;
            *unint64_t v18 = v164;
            v18[1] = v191;
          }
        }
      }
      else
      {
        if (v19 >= v20)
        {
          uint64_t v167 = *(__n128 *)v14;
          uint64_t v194 = *(__n128 *)(v14 + 16);
          double v29 = v18[1];
          *(__n128 *)uint64_t v14 = *v18;
          *(__n128 *)(v14 + 16) = v29;
          *unint64_t v18 = v167;
          v18[1] = v194;
          if (v11->n128_u32[0] >= v18->n128_u32[0]) {
            goto LABEL_23;
          }
          int v161 = *v18;
          uint64_t v188 = v18[1];
          double v30 = a2[-1];
          *unint64_t v18 = *v11;
          v18[1] = v30;
        }
        else
        {
          int v161 = *(__n128 *)v14;
          uint64_t v188 = *(__n128 *)(v14 + 16);
          double v21 = a2[-1];
          *(__n128 *)uint64_t v14 = *v11;
          *(__n128 *)(v14 + 16) = v21;
        }
        *unint64_t v11 = v161;
        a2[-1] = v188;
      }
LABEL_23:
      unint64_t v31 = (__n128 *)(v14 + 32);
      unint64_t v32 = v14 + 32 * v17;
      unint64_t v35 = *(_DWORD *)(v32 - 32);
      double v33 = (__n128 *)(v32 - 32);
      double v34 = v35;
      unint64_t v36 = v12->n128_u32[0];
      if (v35 >= *(_DWORD *)(v14 + 32))
      {
        if (v36 < v34)
        {
          uint64_t v168 = *v33;
          uint64_t v195 = v33[1];
          double v40 = a2[-3];
          *double v33 = *v12;
          v33[1] = v40;
          *uint64_t v12 = v168;
          a2[-3] = v195;
          if (v33->n128_u32[0] < v31->n128_u32[0])
          {
            float64x2_t v41 = *v31;
            uint64_t v196 = *(__n128 *)(v14 + 48);
            unint64_t v42 = v33[1];
            *unint64_t v31 = *v33;
            *(__n128 *)(v14 + 48) = v42;
            *double v33 = v41;
            v33[1] = v196;
          }
        }
      }
      else
      {
        if (v36 >= v34)
        {
          uint64_t v45 = *v31;
          uint64_t v198 = *(__n128 *)(v14 + 48);
          unint64_t v46 = v33[1];
          *unint64_t v31 = *v33;
          *(__n128 *)(v14 + 48) = v46;
          *double v33 = v45;
          v33[1] = v198;
          if (v12->n128_u32[0] >= v33->n128_u32[0]) {
            goto LABEL_37;
          }
          int v170 = *v33;
          uint64_t v199 = v33[1];
          unint64_t v47 = a2[-3];
          *double v33 = *v12;
          v33[1] = v47;
          double v37 = v170;
          double v38 = v199;
        }
        else
        {
          double v37 = *v31;
          double v38 = *(__n128 *)(v14 + 48);
          double v39 = a2[-3];
          *unint64_t v31 = *v12;
          *(__n128 *)(v14 + 48) = v39;
        }
        *uint64_t v12 = v37;
        a2[-3] = v38;
      }
LABEL_37:
      double v48 = (__n128 *)(v14 + 64);
      double v49 = v14 + 32 * v17;
      uint64_t v52 = *(_DWORD *)(v49 + 32);
      double v50 = (__n128 *)(v49 + 32);
      float64x2_t v51 = v52;
      double v53 = v13->n128_u32[0];
      if (v52 >= *(_DWORD *)(v14 + 64))
      {
        if (v53 < v51)
        {
          uint64_t v171 = *v50;
          uint64_t v200 = v50[1];
          unint64_t v57 = a2[-5];
          unint64_t *v50 = *v13;
          v50[1] = v57;
          *uint64_t v13 = v171;
          a2[-5] = v200;
          if (v50->n128_u32[0] < v48->n128_u32[0])
          {
            float64x2_t v58 = *v48;
            char v201 = *(__n128 *)(v14 + 80);
            double v59 = v50[1];
            float64x2_t *v48 = *v50;
            *(__n128 *)(v14 + 80) = v59;
            unint64_t *v50 = v58;
            v50[1] = v201;
          }
        }
      }
      else
      {
        if (v53 >= v51)
        {
          unint64_t v60 = *v48;
          uint64_t v202 = *(__n128 *)(v14 + 80);
          int v61 = v50[1];
          float64x2_t *v48 = *v50;
          *(__n128 *)(v14 + 80) = v61;
          unint64_t *v50 = v60;
          v50[1] = v202;
          if (v13->n128_u32[0] >= v50->n128_u32[0]) {
            goto LABEL_46;
          }
          uint64_t v172 = *v50;
          uint64_t v203 = v50[1];
          double v62 = a2[-5];
          unint64_t *v50 = *v13;
          v50[1] = v62;
          long long v54 = v172;
          unint64_t v55 = v203;
        }
        else
        {
          long long v54 = *v48;
          unint64_t v55 = *(__n128 *)(v14 + 80);
          unint64_t v56 = a2[-5];
          float64x2_t *v48 = *v13;
          *(__n128 *)(v14 + 80) = v56;
        }
        *uint64_t v13 = v54;
        a2[-5] = v55;
      }
LABEL_46:
      float64_t v63 = v18->n128_u32[0];
      unint64_t v64 = v50->n128_u32[0];
      if (v18->n128_u32[0] >= v33->n128_u32[0])
      {
        if (v64 < v63)
        {
          uint64_t v174 = *v18;
          unint64_t v205 = v18[1];
          double v66 = v50[1];
          *unint64_t v18 = *v50;
          v18[1] = v66;
          unint64_t *v50 = v174;
          v50[1] = v205;
          if (v18->n128_u32[0] < v33->n128_u32[0])
          {
            uint64_t v175 = *v33;
            uint64_t v206 = v33[1];
            double v67 = v18[1];
            *double v33 = *v18;
            v33[1] = v67;
            *unint64_t v18 = v175;
            v18[1] = v206;
          }
        }
      }
      else
      {
        if (v64 >= v63)
        {
          unint64_t v176 = *v33;
          int v207 = v33[1];
          int v68 = v18[1];
          *double v33 = *v18;
          v33[1] = v68;
          *unint64_t v18 = v176;
          v18[1] = v207;
          if (v50->n128_u32[0] >= v18->n128_u32[0]) {
            goto LABEL_55;
          }
          uint64_t v173 = *v18;
          uint64_t v204 = v18[1];
          double v69 = v50[1];
          *unint64_t v18 = *v50;
          v18[1] = v69;
        }
        else
        {
          uint64_t v173 = *v33;
          uint64_t v204 = v33[1];
          unint64_t v65 = v50[1];
          *double v33 = *v50;
          v33[1] = v65;
        }
        unint64_t *v50 = v173;
        v50[1] = v204;
      }
LABEL_55:
      unint64_t v177 = *(__n128 *)v14;
      uint64_t v208 = *(__n128 *)(v14 + 16);
      uint64_t v70 = v18[1];
      *(__n128 *)uint64_t v14 = *v18;
      *(__n128 *)(v14 + 16) = v70;
      *unint64_t v18 = v177;
      v18[1] = v208;
      --a3;
      double v28 = *(_DWORD *)v14;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v71 = 0;
      *(_OWORD *)&v158[12] = *(_OWORD *)(v14 + 16);
      *(_OWORD *)double v158 = *(_OWORD *)(v14 + 4);
      do
      {
        uint64_t v72 = *(_DWORD *)(v14 + v71 + 32);
        v71 += 32;
      }
      while (v72 < v28);
      float64x2_t v73 = v14 + v71;
      float64x2_t v74 = a2;
      if (v71 == 32)
      {
        float64x2_t v74 = a2;
        do
        {
          if (v73 >= (unint64_t)v74) {
            break;
          }
          int8x16_t v76 = v74[-2].n128_u32[0];
          v74 -= 2;
        }
        while (v76 >= v28);
      }
      else
      {
        do
        {
          double v75 = v74[-2].n128_u32[0];
          v74 -= 2;
        }
        while (v75 >= v28);
      }
      v14 += v71;
      if (v73 < (unint64_t)v74)
      {
        long long v77 = v74;
        do
        {
          uint64_t v178 = *(__n128 *)v14;
          int v209 = *(__n128 *)(v14 + 16);
          float64x2_t v78 = v77[1];
          *(__n128 *)uint64_t v14 = *v77;
          *(__n128 *)(v14 + 16) = v78;
          unsigned int *v77 = v178;
          v77[1] = v209;
          do
          {
            float64x2_t v79 = *(_DWORD *)(v14 + 32);
            v14 += 32;
          }
          while (v79 < v28);
          do
          {
            float64x2_t v80 = v77[-2].n128_u32[0];
            v77 -= 2;
          }
          while (v80 >= v28);
        }
        while (v14 < (unint64_t)v77);
      }
      if (v14 - 32 != a1)
      {
        float64x2_t v81 = *(_OWORD *)(v14 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 16) = v81;
      }
      *(_DWORD *)(v14 - 32) = v28;
      *(_OWORD *)(v14 - 16) = *(_OWORD *)&v158[12];
      *(_OWORD *)(v14 - 28) = *(_OWORD *)v158;
      if (v73 < (unint64_t)v74)
      {
LABEL_76:
        sub_48F83C(a1, v14 - 32, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        double v82 = sub_490468(a1, (__n128 *)(v14 - 32), *(__n128 *)v158);
        if (sub_490468(v14, a2, v83))
        {
          a2 = (__n128 *)(v14 - 32);
          if (v82) {
            return result;
          }
          goto LABEL_1;
        }
        if (!v82) {
          goto LABEL_76;
        }
      }
    }
  }
  long double v111 = (__n128 *)(v14 + 32);
  uint64_t v113 = (__n128 *)v14 == a2 || v111 == a2;
  if (a4)
  {
    if (v113) {
      return result;
    }
    uint64_t v114 = 0;
    unsigned int v115 = v14;
    while (1)
    {
      int v117 = v111;
      unsigned int v118 = *(_DWORD *)(v115 + 32);
      if (v118 < *(_DWORD *)v115)
      {
        *(_OWORD *)uint64_t v182 = *(_OWORD *)(v115 + 36);
        *(_OWORD *)&v182[12] = *(_OWORD *)(v115 + 48);
        unsigned int v119 = v114;
        do
        {
          unsigned int v120 = v14 + v119;
          int v121 = *(_OWORD *)(v14 + v119 + 16);
          *(_OWORD *)(v120 + 32) = *(_OWORD *)(v14 + v119);
          *(_OWORD *)(v120 + 48) = v121;
          if (!v119)
          {
            unsigned int v116 = v14;
            goto LABEL_121;
          }
          v119 -= 32;
        }
        while (v118 < *(_DWORD *)(v120 - 32));
        unsigned int v116 = v14 + v119 + 32;
LABEL_121:
        *(_DWORD *)unsigned int v116 = v118;
        double result = *(__n128 *)v182;
        *(_OWORD *)(v116 + 16) = *(_OWORD *)&v182[12];
        *(_OWORD *)(v116 + 4) = *(_OWORD *)v182;
      }
      long double v111 = v117 + 2;
      v114 += 32;
      unsigned int v115 = (unint64_t)v117;
      if (&v117[2] == a2) {
        return result;
      }
    }
  }
  if (!v113)
  {
    do
    {
      int v152 = v111;
      uint64_t v153 = *(_DWORD *)(a1 + 32);
      if (v153 < *(_DWORD *)a1)
      {
        *(_OWORD *)uint64_t v186 = *(_OWORD *)(a1 + 36);
        *(_OWORD *)&v186[12] = *(_OWORD *)(a1 + 48);
        do
        {
          unint64_t v154 = v111[-1];
          *long double v111 = v111[-2];
          v111[1] = v154;
          unint64_t v155 = v111[-4].n128_u32[0];
          v111 -= 2;
        }
        while (v153 < v155);
        v111->n128_u32[0] = v153;
        double result = *(__n128 *)v186;
        v111[1] = *(__n128 *)&v186[12];
        *(__n128 *)((char *)v111 + 4) = *(__n128 *)v186;
      }
      long double v111 = v152 + 2;
      a1 = (unint64_t)v152;
    }
    while (&v152[2] != a2);
  }
  return result;
}

  double v33 = a2 - 76;
  unint64_t v11 = (uint64_t *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x86BCA1AF286BCA1BLL * (v14 >> 5);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *v33 < *(void *)a1;
          if (*v33 == *(void *)a1) {
            unint64_t v27 = *((_DWORD *)a2 - 122) > *(_DWORD *)(a1 + 120);
          }
          if (v27)
          {
            sub_5DF7E8((uint64_t *)a1, v33);
          }
          break;
        case 3uLL:
          sub_5DE2E4(a1, a1 + 608, (uint64_t)v33);
          break;
        case 4uLL:
          sub_5DFCD4(a1, a1 + 608, a1 + 1216, (uint64_t)v33);
          break;
        case 5uLL:
          sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, (uint64_t)v33);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 14591) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)a1 != a2)
      {
        double v28 = (v15 - 2) >> 1;
        double v29 = v28 + 1;
        double v30 = (uint64_t *)(a1 + 608 * v28);
        do
        {
          sub_5DFF1C(a1, a3, 0x86BCA1AF286BCA1BLL * (v14 >> 5), v30);
          v30 -= 76;
          --v29;
        }
        while (v29);
        unint64_t v31 = v14 / 0x260uLL;
        do
        {
          sub_5E0564(a1, (uint64_t)a2, a3, v31);
          a2 -= 76;
        }
        while (v31-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)(a1 + 608 * (v15 >> 1));
    if ((unint64_t)v14 <= 0x13000)
    {
      sub_5DE2E4((uint64_t)v17, a1, (uint64_t)v33);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_5DE2E4(a1, (uint64_t)v17, (uint64_t)v33);
      unint64_t v18 = 608 * v16;
      unint64_t v19 = 608 * v16 + a1 - 608;
      sub_5DE2E4(a1 + 608, v19, (uint64_t)(a2 - 152));
      uint64_t v20 = a1 + 608 + v18;
      sub_5DE2E4(a1 + 1216, v20, (uint64_t)(a2 - 228));
      sub_5DE2E4(v19, (uint64_t)v17, v20);
      sub_5DF7E8((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(void *)(a1 - 608);
    uint64_t v22 = *(_DWORD *)(a1 - 488) > *(_DWORD *)(a1 + 120);
    char v6 = v21 == *(void *)a1;
    unint64_t v23 = v21 < *(void *)a1;
    if (!v6) {
      uint64_t v22 = v23;
    }
    if (!v22)
    {
      unint64_t v11 = sub_5DE444(a1, a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = sub_5DEA6C(a1, (uint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_5DF09C(a1, v24);
    unint64_t v11 = (uint64_t *)(v24 + 608);
    if (sub_5DF09C(v24 + 608, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_17:
      sub_5DCEFC(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = (uint64_t *)(v24 + 608);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_5DD388(a1, (uint64_t)a2);
  }
  else
  {
    sub_5DDAF8((uint64_t *)a1, a2);
  }
}

  double v33 = a2 - 76;
  unint64_t v11 = (uint64_t *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x86BCA1AF286BCA1BLL * (v14 >> 5);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *v33 < *(void *)a1;
          if (*v33 == *(void *)a1) {
            unint64_t v27 = *((_DWORD *)a2 - 122) > *(_DWORD *)(a1 + 120);
          }
          if (v27)
          {
            sub_5DF7E8((uint64_t *)a1, v33);
          }
          break;
        case 3uLL:
          sub_5DE2E4(a1, a1 + 608, (uint64_t)v33);
          break;
        case 4uLL:
          sub_5DFCD4(a1, a1 + 608, a1 + 1216, (uint64_t)v33);
          break;
        case 5uLL:
          sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, (uint64_t)v33);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 14591) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)a1 != a2)
      {
        double v28 = (v15 - 2) >> 1;
        double v29 = v28 + 1;
        double v30 = (uint64_t *)(a1 + 608 * v28);
        do
        {
          sub_5E4934(a1, a3, 0x86BCA1AF286BCA1BLL * (v14 >> 5), v30);
          v30 -= 76;
          --v29;
        }
        while (v29);
        unint64_t v31 = v14 / 0x260uLL;
        do
        {
          sub_5E4F7C(a1, (uint64_t)a2, a3, v31);
          a2 -= 76;
        }
        while (v31-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)(a1 + 608 * (v15 >> 1));
    if ((unint64_t)v14 <= 0x13000)
    {
      sub_5DE2E4((uint64_t)v17, a1, (uint64_t)v33);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_5DE2E4(a1, (uint64_t)v17, (uint64_t)v33);
      unint64_t v18 = 608 * v16;
      unint64_t v19 = 608 * v16 + a1 - 608;
      sub_5DE2E4(a1 + 608, v19, (uint64_t)(a2 - 152));
      uint64_t v20 = a1 + 608 + v18;
      sub_5DE2E4(a1 + 1216, v20, (uint64_t)(a2 - 228));
      sub_5DE2E4(v19, (uint64_t)v17, v20);
      sub_5DF7E8((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(void *)(a1 - 608);
    uint64_t v22 = *(_DWORD *)(a1 - 488) > *(_DWORD *)(a1 + 120);
    char v6 = v21 == *(void *)a1;
    unint64_t v23 = v21 < *(void *)a1;
    if (!v6) {
      uint64_t v22 = v23;
    }
    if (!v22)
    {
      unint64_t v11 = sub_5E3590(a1, a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = sub_5E3BB8(a1, (uint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_5E41E8(a1, v24);
    unint64_t v11 = (uint64_t *)(v24 + 608);
    if (sub_5E41E8(v24 + 608, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_17:
      sub_5E21A8(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = (uint64_t *)(v24 + 608);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_5E2634(a1, (uint64_t)a2);
  }
  else
  {
    sub_5E2DA4((uint64_t *)a1, a2);
  }
}

  double v33 = a2 - 76;
  unint64_t v11 = (uint64_t *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x86BCA1AF286BCA1BLL * (v14 >> 5);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *v33 < *(void *)a1;
          if (*v33 == *(void *)a1) {
            unint64_t v27 = *((_DWORD *)a2 - 122) > *(_DWORD *)(a1 + 120);
          }
          if (v27)
          {
            sub_5DF7E8((uint64_t *)a1, v33);
          }
          break;
        case 3uLL:
          sub_5DE2E4(a1, a1 + 608, (uint64_t)v33);
          break;
        case 4uLL:
          sub_5DFCD4(a1, a1 + 608, a1 + 1216, (uint64_t)v33);
          break;
        case 5uLL:
          sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, (uint64_t)v33);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 14591) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)a1 != a2)
      {
        double v28 = (v15 - 2) >> 1;
        double v29 = v28 + 1;
        double v30 = (uint64_t *)(a1 + 608 * v28);
        do
        {
          sub_5E8590(a1, a3, 0x86BCA1AF286BCA1BLL * (v14 >> 5), v30);
          v30 -= 76;
          --v29;
        }
        while (v29);
        unint64_t v31 = v14 / 0x260uLL;
        do
        {
          sub_5E8BD8(a1, (uint64_t)a2, a3, v31);
          a2 -= 76;
        }
        while (v31-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)(a1 + 608 * (v15 >> 1));
    if ((unint64_t)v14 <= 0x13000)
    {
      sub_5DE2E4((uint64_t)v17, a1, (uint64_t)v33);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_5DE2E4(a1, (uint64_t)v17, (uint64_t)v33);
      unint64_t v18 = 608 * v16;
      unint64_t v19 = 608 * v16 + a1 - 608;
      sub_5DE2E4(a1 + 608, v19, (uint64_t)(a2 - 152));
      uint64_t v20 = a1 + 608 + v18;
      sub_5DE2E4(a1 + 1216, v20, (uint64_t)(a2 - 228));
      sub_5DE2E4(v19, (uint64_t)v17, v20);
      sub_5DF7E8((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(void *)(a1 - 608);
    uint64_t v22 = *(_DWORD *)(a1 - 488) > *(_DWORD *)(a1 + 120);
    char v6 = v21 == *(void *)a1;
    unint64_t v23 = v21 < *(void *)a1;
    if (!v6) {
      uint64_t v22 = v23;
    }
    if (!v22)
    {
      unint64_t v11 = sub_5E71EC(a1, a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = sub_5E7814(a1, (uint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_5E7E44(a1, v24);
    unint64_t v11 = (uint64_t *)(v24 + 608);
    if (sub_5E7E44(v24 + 608, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_17:
      sub_5E5E04(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = (uint64_t *)(v24 + 608);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_5E6290(a1, (uint64_t)a2);
  }
  else
  {
    sub_5E6A00((uint64_t *)a1, a2);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v36 = *a3;
          unint64_t v35 = (int **)a3[1];
          double v37 = sub_6D82EC(v36 + 1160, v35, a2 - 5);
          double v38 = sub_6D82EC(v36 + 1160, v35, (int **)v12);
          if (*(unsigned char *)(v36 + 857))
          {
            double v39 = sub_6A2704(*(void *)v36, v35, a2 - 5);
            double v40 = sub_6A2704(*(void *)v36, v35, (int **)v12);
            v41.i16[0] = *(_WORD *)(v36 + 748);
            unint64_t v42 = (double)vmovl_s16(v41).i32[0];
            if (vabdd_f64(v37, v38) <= v42)
            {
              LOWORD(v42) = *(_WORD *)(v36 + 750);
              if (vabdd_f64(v39, v40) >= (double)vmovl_s16(*(int16x4_t *)&v42).i32[0])
              {
                double v37 = v39;
                double v38 = v40;
              }
            }
          }
          if (fabs(v37) < fabs(v38))
          {
            unint64_t v60 = (int *)*((void *)v12 + 4);
            long long v54 = *v12;
            unint64_t v57 = v12[1];
            BOOL v43 = *(_OWORD *)v11;
            uint64_t v44 = *(_OWORD *)(a2 - 3);
            *((void *)v12 + 4) = *(a2 - 1);
            *uint64_t v12 = v43;
            v12[1] = v44;
            *(_OWORD *)unint64_t v11 = v54;
            *(_OWORD *)(a2 - 3) = v57;
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          sub_6D15B4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6D27D0((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6D2AA4((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959)
    {
      if (a5)
      {
        sub_6D1134((int **)v12, a2, a3);
      }
      else
      {
        sub_6D1388((int **)v12, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (char *)v12 + 40 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6D15B4((int **)v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_6D15B4((int **)v12, (int **)v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6D15B4((int **)v12 + 5, v20, a2 - 10, a3);
      sub_6D15B4((int **)v12 + 10, (int **)((char *)v12 + v19 + 40), a2 - 15, a3);
      sub_6D15B4(v20, (int **)v18, (int **)((char *)v12 + v19 + 40), a3);
      double v59 = *((void *)v12 + 4);
      double v53 = *v12;
      unint64_t v56 = v12[1];
      double v21 = *(_OWORD *)v18;
      uint64_t v22 = *((_OWORD *)v18 + 1);
      *((void *)v12 + 4) = *((void *)v18 + 4);
      *uint64_t v12 = v21;
      v12[1] = v22;
      *((void *)v18 + 4) = v59;
      *(_OWORD *)unint64_t v18 = v53;
      *((_OWORD *)v18 + 1) = v56;
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v23 = *a3;
    uint64_t v24 = (int **)a3[1];
    char v25 = *a3 + 1160;
    BOOL v26 = sub_6D82EC(v25, v24, (int **)v12 - 5);
    unint64_t v27 = sub_6D82EC(v25, v24, (int **)v12);
    if (*(unsigned char *)(v23 + 857))
    {
      double v28 = sub_6A2704(*(void *)v23, v24, (int **)v12 - 5);
      double v29 = sub_6A2704(*(void *)v23, v24, (int **)v12);
      v30.i16[0] = *(_WORD *)(v23 + 748);
      unint64_t v31 = (double)vmovl_s16(v30).i32[0];
      if (vabdd_f64(v26, v27) <= v31)
      {
        LOWORD(v31) = *(_WORD *)(v23 + 750);
        if (vabdd_f64(v28, v29) >= (double)vmovl_s16(*(int16x4_t *)&v31).i32[0])
        {
          BOOL v26 = v28;
          unint64_t v27 = v29;
        }
      }
    }
    if (fabs(v26) >= fabs(v27))
    {
      uint64_t v12 = sub_6D19F8(v12, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v32 = sub_6D1F24(v12, a2, a3);
    if ((v33 & 1) == 0) {
      goto LABEL_19;
    }
    double v34 = sub_6D23C4((uint64_t)v12, v32, a3);
    uint64_t v12 = (long long *)(v32 + 40);
    if (sub_6D23C4(v32 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v34)
    {
LABEL_19:
      sub_6D0AF4(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v32 + 40);
LABEL_21:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != (long long *)a2)
  {
    uint64_t v45 = (v16 - 2) >> 1;
    unint64_t v46 = v45 + 1;
    unint64_t v47 = (int **)v12 + 5 * v45;
    do
    {
      sub_6D2E48((uint64_t)v12, a3, v16, v47);
      v47 -= 5;
      --v46;
    }
    while (v46);
    double v48 = v15 / 0x28uLL;
    do
    {
      while (1)
      {
        int v61 = (int *)*((void *)v12 + 4);
        unint64_t v55 = *v12;
        float64x2_t v58 = v12[1];
        uint64_t v52 = sub_6D3240((int **)v12, a3, v48);
        if (v11 == v52) {
          break;
        }
        double v49 = *(_OWORD *)v11;
        double v50 = *((_OWORD *)v11 + 1);
        v52[4] = v11[4];
        *(_OWORD *)uint64_t v52 = v49;
        *((_OWORD *)v52 + 1) = v50;
        v11[4] = v61;
        *(_OWORD *)unint64_t v11 = v55;
        *((_OWORD *)v11 + 1) = v58;
        sub_6D33C4((uint64_t)v12, (uint64_t)(v52 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((char *)(v52 + 5) - (char *)v12) >> 3));
        v11 -= 5;
        float64x2_t v51 = v48-- <= 2;
        if (v51) {
          return;
        }
      }
      *(_OWORD *)uint64_t v52 = v55;
      *((_OWORD *)v52 + 1) = v58;
      v52[4] = v61;
      v11 -= 5;
      float64x2_t v51 = v48-- <= 2;
    }
    while (!v51);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v36 = *a3;
          unint64_t v35 = (int **)a3[1];
          double v37 = sub_6D82EC(v36 + 1160, v35, a2 - 5);
          double v38 = sub_6D82EC(v36 + 1160, v35, (int **)v12);
          if (*(unsigned char *)(v36 + 857))
          {
            double v39 = sub_6A2704(*(void *)v36, v35, a2 - 5);
            double v40 = sub_6A2704(*(void *)v36, v35, (int **)v12);
            v41.i16[0] = *(_WORD *)(v36 + 748);
            unint64_t v42 = (double)vmovl_s16(v41).i32[0];
            if (vabdd_f64(v37, v38) <= v42)
            {
              LOWORD(v42) = *(_WORD *)(v36 + 750);
              if (vabdd_f64(v39, v40) >= (double)vmovl_s16(*(int16x4_t *)&v42).i32[0])
              {
                double v37 = v39;
                double v38 = v40;
              }
            }
          }
          if (fabs(v37) < fabs(v38))
          {
            unint64_t v60 = (int *)*((void *)v12 + 4);
            long long v54 = *v12;
            unint64_t v57 = v12[1];
            BOOL v43 = *(_OWORD *)v11;
            uint64_t v44 = *(_OWORD *)(a2 - 3);
            *((void *)v12 + 4) = *(a2 - 1);
            *uint64_t v12 = v43;
            v12[1] = v44;
            *(_OWORD *)unint64_t v11 = v54;
            *(_OWORD *)(a2 - 3) = v57;
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          sub_6D15B4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6D27D0((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6D2AA4((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959)
    {
      if (a5)
      {
        sub_6D1134((int **)v12, a2, a3);
      }
      else
      {
        sub_6D1388((int **)v12, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (char *)v12 + 40 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6D15B4((int **)v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_6D15B4((int **)v12, (int **)v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6D15B4((int **)v12 + 5, v20, a2 - 10, a3);
      sub_6D15B4((int **)v12 + 10, (int **)((char *)v12 + v19 + 40), a2 - 15, a3);
      sub_6D15B4(v20, (int **)v18, (int **)((char *)v12 + v19 + 40), a3);
      double v59 = *((void *)v12 + 4);
      double v53 = *v12;
      unint64_t v56 = v12[1];
      double v21 = *(_OWORD *)v18;
      uint64_t v22 = *((_OWORD *)v18 + 1);
      *((void *)v12 + 4) = *((void *)v18 + 4);
      *uint64_t v12 = v21;
      v12[1] = v22;
      *((void *)v18 + 4) = v59;
      *(_OWORD *)unint64_t v18 = v53;
      *((_OWORD *)v18 + 1) = v56;
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v23 = *a3;
    uint64_t v24 = (int **)a3[1];
    char v25 = *a3 + 1160;
    BOOL v26 = sub_6D82EC(v25, v24, (int **)v12 - 5);
    unint64_t v27 = sub_6D82EC(v25, v24, (int **)v12);
    if (*(unsigned char *)(v23 + 857))
    {
      double v28 = sub_6A2704(*(void *)v23, v24, (int **)v12 - 5);
      double v29 = sub_6A2704(*(void *)v23, v24, (int **)v12);
      v30.i16[0] = *(_WORD *)(v23 + 748);
      unint64_t v31 = (double)vmovl_s16(v30).i32[0];
      if (vabdd_f64(v26, v27) <= v31)
      {
        LOWORD(v31) = *(_WORD *)(v23 + 750);
        if (vabdd_f64(v28, v29) >= (double)vmovl_s16(*(int16x4_t *)&v31).i32[0])
        {
          BOOL v26 = v28;
          unint64_t v27 = v29;
        }
      }
    }
    if (fabs(v26) >= fabs(v27))
    {
      uint64_t v12 = sub_6D19F8(v12, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v32 = sub_6D1F24(v12, a2, a3);
    if ((v33 & 1) == 0) {
      goto LABEL_19;
    }
    double v34 = sub_6D52EC((uint64_t)v12, v32, a3);
    uint64_t v12 = (long long *)(v32 + 40);
    if (sub_6D52EC(v32 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v34)
    {
LABEL_19:
      sub_6D4CAC(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v32 + 40);
LABEL_21:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != (long long *)a2)
  {
    uint64_t v45 = (v16 - 2) >> 1;
    unint64_t v46 = v45 + 1;
    unint64_t v47 = (int **)v12 + 5 * v45;
    do
    {
      sub_6D2E48((uint64_t)v12, a3, v16, v47);
      v47 -= 5;
      --v46;
    }
    while (v46);
    double v48 = v15 / 0x28uLL;
    do
    {
      while (1)
      {
        int v61 = (int *)*((void *)v12 + 4);
        unint64_t v55 = *v12;
        float64x2_t v58 = v12[1];
        uint64_t v52 = sub_6D3240((int **)v12, a3, v48);
        if (v11 == v52) {
          break;
        }
        double v49 = *(_OWORD *)v11;
        double v50 = *((_OWORD *)v11 + 1);
        v52[4] = v11[4];
        *(_OWORD *)uint64_t v52 = v49;
        *((_OWORD *)v52 + 1) = v50;
        v11[4] = v61;
        *(_OWORD *)unint64_t v11 = v55;
        *((_OWORD *)v11 + 1) = v58;
        sub_6D33C4((uint64_t)v12, (uint64_t)(v52 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((char *)(v52 + 5) - (char *)v12) >> 3));
        v11 -= 5;
        float64x2_t v51 = v48-- <= 2;
        if (v51) {
          return;
        }
      }
      *(_OWORD *)uint64_t v52 = v55;
      *((_OWORD *)v52 + 1) = v58;
      v52[4] = v61;
      v11 -= 5;
      float64x2_t v51 = v48-- <= 2;
    }
    while (!v51);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v36 = *a3;
          unint64_t v35 = (int **)a3[1];
          double v37 = sub_6D82EC(v36 + 1160, v35, a2 - 5);
          double v38 = sub_6D82EC(v36 + 1160, v35, (int **)v12);
          if (*(unsigned char *)(v36 + 857))
          {
            double v39 = sub_6A2704(*(void *)v36, v35, a2 - 5);
            double v40 = sub_6A2704(*(void *)v36, v35, (int **)v12);
            v41.i16[0] = *(_WORD *)(v36 + 748);
            unint64_t v42 = (double)vmovl_s16(v41).i32[0];
            if (vabdd_f64(v37, v38) <= v42)
            {
              LOWORD(v42) = *(_WORD *)(v36 + 750);
              if (vabdd_f64(v39, v40) >= (double)vmovl_s16(*(int16x4_t *)&v42).i32[0])
              {
                double v37 = v39;
                double v38 = v40;
              }
            }
          }
          if (fabs(v37) < fabs(v38))
          {
            unint64_t v60 = (int *)*((void *)v12 + 4);
            long long v54 = *v12;
            unint64_t v57 = v12[1];
            BOOL v43 = *(_OWORD *)v11;
            uint64_t v44 = *(_OWORD *)(a2 - 3);
            *((void *)v12 + 4) = *(a2 - 1);
            *uint64_t v12 = v43;
            v12[1] = v44;
            *(_OWORD *)unint64_t v11 = v54;
            *(_OWORD *)(a2 - 3) = v57;
            *(a2 - 1) = v60;
          }
          break;
        case 3uLL:
          sub_6D15B4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6D27D0((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6D2AA4((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959)
    {
      if (a5)
      {
        sub_6D1134((int **)v12, a2, a3);
      }
      else
      {
        sub_6D1388((int **)v12, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (char *)v12 + 40 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6D15B4((int **)v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_6D15B4((int **)v12, (int **)v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6D15B4((int **)v12 + 5, v20, a2 - 10, a3);
      sub_6D15B4((int **)v12 + 10, (int **)((char *)v12 + v19 + 40), a2 - 15, a3);
      sub_6D15B4(v20, (int **)v18, (int **)((char *)v12 + v19 + 40), a3);
      double v59 = *((void *)v12 + 4);
      double v53 = *v12;
      unint64_t v56 = v12[1];
      double v21 = *(_OWORD *)v18;
      uint64_t v22 = *((_OWORD *)v18 + 1);
      *((void *)v12 + 4) = *((void *)v18 + 4);
      *uint64_t v12 = v21;
      v12[1] = v22;
      *((void *)v18 + 4) = v59;
      *(_OWORD *)unint64_t v18 = v53;
      *((_OWORD *)v18 + 1) = v56;
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v23 = *a3;
    uint64_t v24 = (int **)a3[1];
    char v25 = *a3 + 1160;
    BOOL v26 = sub_6D82EC(v25, v24, (int **)v12 - 5);
    unint64_t v27 = sub_6D82EC(v25, v24, (int **)v12);
    if (*(unsigned char *)(v23 + 857))
    {
      double v28 = sub_6A2704(*(void *)v23, v24, (int **)v12 - 5);
      double v29 = sub_6A2704(*(void *)v23, v24, (int **)v12);
      v30.i16[0] = *(_WORD *)(v23 + 748);
      unint64_t v31 = (double)vmovl_s16(v30).i32[0];
      if (vabdd_f64(v26, v27) <= v31)
      {
        LOWORD(v31) = *(_WORD *)(v23 + 750);
        if (vabdd_f64(v28, v29) >= (double)vmovl_s16(*(int16x4_t *)&v31).i32[0])
        {
          BOOL v26 = v28;
          unint64_t v27 = v29;
        }
      }
    }
    if (fabs(v26) >= fabs(v27))
    {
      uint64_t v12 = sub_6D19F8(v12, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v32 = sub_6D1F24(v12, a2, a3);
    if ((v33 & 1) == 0) {
      goto LABEL_19;
    }
    double v34 = sub_6D7214((uint64_t)v12, v32, a3);
    uint64_t v12 = (long long *)(v32 + 40);
    if (sub_6D7214(v32 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v34)
    {
LABEL_19:
      sub_6D6BD4(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v32 + 40);
LABEL_21:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != (long long *)a2)
  {
    uint64_t v45 = (v16 - 2) >> 1;
    unint64_t v46 = v45 + 1;
    unint64_t v47 = (int **)v12 + 5 * v45;
    do
    {
      sub_6D2E48((uint64_t)v12, a3, v16, v47);
      v47 -= 5;
      --v46;
    }
    while (v46);
    double v48 = v15 / 0x28uLL;
    do
    {
      while (1)
      {
        int v61 = (int *)*((void *)v12 + 4);
        unint64_t v55 = *v12;
        float64x2_t v58 = v12[1];
        uint64_t v52 = sub_6D3240((int **)v12, a3, v48);
        if (v11 == v52) {
          break;
        }
        double v49 = *(_OWORD *)v11;
        double v50 = *((_OWORD *)v11 + 1);
        v52[4] = v11[4];
        *(_OWORD *)uint64_t v52 = v49;
        *((_OWORD *)v52 + 1) = v50;
        v11[4] = v61;
        *(_OWORD *)unint64_t v11 = v55;
        *((_OWORD *)v11 + 1) = v58;
        sub_6D33C4((uint64_t)v12, (uint64_t)(v52 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((char *)(v52 + 5) - (char *)v12) >> 3));
        v11 -= 5;
        float64x2_t v51 = v48-- <= 2;
        if (v51) {
          return;
        }
      }
      *(_OWORD *)uint64_t v52 = v55;
      *((_OWORD *)v52 + 1) = v58;
      v52[4] = v61;
      v11 -= 5;
      float64x2_t v51 = v48-- <= 2;
    }
    while (!v51);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v30 = *(void *)(a3 + 8);
          unint64_t v31 = sub_6D82EC(v30, *(int ***)a3, v11);
          if (fabs(v31) < fabs(sub_6D82EC(v30, *(int ***)a3, (int **)v12)))
          {
            unint64_t v42 = (int *)*((void *)v12 + 4);
            double v38 = *v12;
            double v40 = v12[1];
            unint64_t v32 = *(_OWORD *)v11;
            double v33 = *((_OWORD *)v11 + 1);
            *((void *)v12 + 4) = v11[4];
            *uint64_t v12 = v32;
            v12[1] = v33;
            *(_OWORD *)unint64_t v11 = v38;
            *((_OWORD *)v11 + 1) = v40;
            v11[4] = v42;
          }
          break;
        case 3uLL:
          sub_6E20C4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6E34DC((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6E3630((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        double v34 = (v16 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (long long *)((char *)v12 + 40 * v34);
        do
        {
          sub_6E37E4((uint64_t)v12, a3, v16, v36);
          unint64_t v36 = (long long *)((char *)v36 - 40);
          --v35;
        }
        while (v35);
        sub_6E39E4((uint64_t)v12, a2, (void *)a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (int **)v12 + 5 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6E20C4(v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_6E20C4((int **)v12, v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6E20C4((int **)v12 + 5, v20, a2 - 10, a3);
      double v21 = (int **)(v12 + 5);
      uint64_t v22 = (int **)((char *)v12 + v19 + 40);
      sub_6E20C4(v21, v22, a2 - 15, a3);
      sub_6E20C4(v20, v18, v22, a3);
      float64x2_t v41 = *(int **)(a1 + 32);
      double v37 = *(_OWORD *)a1;
      double v39 = *(_OWORD *)(a1 + 16);
      unint64_t v23 = *(_OWORD *)v18;
      uint64_t v24 = *((_OWORD *)v18 + 1);
      *(void *)(a1 + 32) = v18[4];
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v24;
      char v18[4] = v41;
      *(_OWORD *)unint64_t v18 = v37;
      *((_OWORD *)v18 + 1) = v39;
      if (a5) {
        goto LABEL_12;
      }
    }
    char v25 = *(void *)(a3 + 8);
    BOOL v26 = sub_6D82EC(v25, *(int ***)a3, (int **)(a1 - 40));
    if (fabs(v26) >= fabs(sub_6D82EC(v25, *(int ***)a3, (int **)a1)))
    {
      uint64_t v12 = sub_6E22B0((long long *)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    unint64_t v27 = sub_6E2A9C((long long *)a1, a2, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
    double v29 = sub_6E3250(a1, v27, a3);
    uint64_t v12 = (long long *)(v27 + 40);
    if (sub_6E3250(v27 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v27;
      if (v29) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v29)
    {
LABEL_15:
      sub_6E1308(a1, v27, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v27 + 40);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_6E17CC((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_6E1C30((int **)v12, a2, a3);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v30 = *(void *)(a3 + 8);
          unint64_t v31 = sub_6D82EC(v30, *(int ***)a3, v11);
          if (fabs(v31) < fabs(sub_6D82EC(v30, *(int ***)a3, (int **)v12)))
          {
            unint64_t v42 = (int *)*((void *)v12 + 4);
            double v38 = *v12;
            double v40 = v12[1];
            unint64_t v32 = *(_OWORD *)v11;
            double v33 = *((_OWORD *)v11 + 1);
            *((void *)v12 + 4) = v11[4];
            *uint64_t v12 = v32;
            v12[1] = v33;
            *(_OWORD *)unint64_t v11 = v38;
            *((_OWORD *)v11 + 1) = v40;
            v11[4] = v42;
          }
          break;
        case 3uLL:
          sub_6E20C4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6E34DC((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6E3630((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        double v34 = (v16 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (long long *)((char *)v12 + 40 * v34);
        do
        {
          sub_6E37E4((uint64_t)v12, a3, v16, v36);
          unint64_t v36 = (long long *)((char *)v36 - 40);
          --v35;
        }
        while (v35);
        sub_6E39E4((uint64_t)v12, a2, (void *)a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (int **)v12 + 5 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6E20C4(v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_6E20C4((int **)v12, v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6E20C4((int **)v12 + 5, v20, a2 - 10, a3);
      double v21 = (int **)(v12 + 5);
      uint64_t v22 = (int **)((char *)v12 + v19 + 40);
      sub_6E20C4(v21, v22, a2 - 15, a3);
      sub_6E20C4(v20, v18, v22, a3);
      float64x2_t v41 = *(int **)(a1 + 32);
      double v37 = *(_OWORD *)a1;
      double v39 = *(_OWORD *)(a1 + 16);
      unint64_t v23 = *(_OWORD *)v18;
      uint64_t v24 = *((_OWORD *)v18 + 1);
      *(void *)(a1 + 32) = v18[4];
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v24;
      char v18[4] = v41;
      *(_OWORD *)unint64_t v18 = v37;
      *((_OWORD *)v18 + 1) = v39;
      if (a5) {
        goto LABEL_12;
      }
    }
    char v25 = *(void *)(a3 + 8);
    BOOL v26 = sub_6D82EC(v25, *(int ***)a3, (int **)(a1 - 40));
    if (fabs(v26) >= fabs(sub_6D82EC(v25, *(int ***)a3, (int **)a1)))
    {
      uint64_t v12 = sub_6E22B0((long long *)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    unint64_t v27 = sub_6E2A9C((long long *)a1, a2, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
    double v29 = sub_6E53C0(a1, v27, a3);
    uint64_t v12 = (long long *)(v27 + 40);
    if (sub_6E53C0(v27 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v27;
      if (v29) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v29)
    {
LABEL_15:
      sub_6E4EFC(a1, v27, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v27 + 40);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_6E17CC((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_6E1C30((int **)v12, a2, a3);
  }
}

  unint64_t v11 = a2 - 5;
  uint64_t v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v30 = *(void *)(a3 + 8);
          unint64_t v31 = sub_6D82EC(v30, *(int ***)a3, v11);
          if (fabs(v31) < fabs(sub_6D82EC(v30, *(int ***)a3, (int **)v12)))
          {
            unint64_t v42 = (int *)*((void *)v12 + 4);
            double v38 = *v12;
            double v40 = v12[1];
            unint64_t v32 = *(_OWORD *)v11;
            double v33 = *((_OWORD *)v11 + 1);
            *((void *)v12 + 4) = v11[4];
            *uint64_t v12 = v32;
            v12[1] = v33;
            *(_OWORD *)unint64_t v11 = v38;
            *((_OWORD *)v11 + 1) = v40;
            v11[4] = v42;
          }
          break;
        case 3uLL:
          sub_6E20C4((int **)v12, (int **)v12 + 5, a2 - 5, a3);
          break;
        case 4uLL:
          sub_6E34DC((int **)v12, (int **)v12 + 5, (int **)v12 + 10, a2 - 5, a3);
          break;
        case 5uLL:
          sub_6E3630((int **)v12, (int **)v12 + 5, (int **)v12 + 10, (int **)v12 + 15, a2 - 5, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        double v34 = (v16 - 2) >> 1;
        unint64_t v35 = v34 + 1;
        unint64_t v36 = (long long *)((char *)v12 + 40 * v34);
        do
        {
          sub_6E37E4((uint64_t)v12, a3, v16, v36);
          unint64_t v36 = (long long *)((char *)v36 - 40);
          --v35;
        }
        while (v35);
        sub_6E39E4((uint64_t)v12, a2, (void *)a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (int **)v12 + 5 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1401)
    {
      sub_6E20C4(v18, (int **)v12, a2 - 5, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_6E20C4((int **)v12, v18, a2 - 5, a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (int **)v12 + 5 * v17 - 5;
      sub_6E20C4((int **)v12 + 5, v20, a2 - 10, a3);
      double v21 = (int **)(v12 + 5);
      uint64_t v22 = (int **)((char *)v12 + v19 + 40);
      sub_6E20C4(v21, v22, a2 - 15, a3);
      sub_6E20C4(v20, v18, v22, a3);
      float64x2_t v41 = *(int **)(a1 + 32);
      double v37 = *(_OWORD *)a1;
      double v39 = *(_OWORD *)(a1 + 16);
      unint64_t v23 = *(_OWORD *)v18;
      uint64_t v24 = *((_OWORD *)v18 + 1);
      *(void *)(a1 + 32) = v18[4];
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v24;
      char v18[4] = v41;
      *(_OWORD *)unint64_t v18 = v37;
      *((_OWORD *)v18 + 1) = v39;
      if (a5) {
        goto LABEL_12;
      }
    }
    char v25 = *(void *)(a3 + 8);
    BOOL v26 = sub_6D82EC(v25, *(int ***)a3, (int **)(a1 - 40));
    if (fabs(v26) >= fabs(sub_6D82EC(v25, *(int ***)a3, (int **)a1)))
    {
      uint64_t v12 = sub_6E22B0((long long *)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    unint64_t v27 = sub_6E2A9C((long long *)a1, a2, a3);
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
    double v29 = sub_6E61C0(a1, v27, a3);
    uint64_t v12 = (long long *)(v27 + 40);
    if (sub_6E61C0(v27 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (int **)v27;
      if (v29) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v29)
    {
LABEL_15:
      sub_6E5CFC(a1, v27, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v27 + 40);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_6E17CC((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_6E1C30((int **)v12, a2, a3);
  }
}

  uint64_t v10 = a2 - 3;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((void *)a2 - 5) > *((void *)v11 + 1))
          {
            int v68 = *((unsigned char *)v11 + 16);
            unint64_t v64 = *v11;
            *(void *)((char *)&v62 + 7) = *(void *)((char *)v11 + 39);
            unint64_t v27 = *((void *)v11 + 3);
            *(void *)&double v62 = *((void *)v11 + 4);
            double v28 = *((unsigned char *)v11 + 47);
            *((void *)v11 + 4) = 0;
            *((void *)v11 + 5) = 0;
            *((void *)v11 + 3) = 0;
            double v29 = *(a2 - 3);
            *((unsigned char *)v11 + 16) = *((unsigned char *)a2 - 32);
            *unint64_t v11 = v29;
            double v30 = *(long long *)((char *)a2 - 24);
            *((void *)v11 + 5) = *((void *)a2 - 1);
            *(long long *)((char *)v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v30;
            *(a2 - 3) = v64;
            *((unsigned char *)a2 - 32) = v68;
            *(void *)((char *)a2 - 9) = *(void *)((char *)&v62 + 7);
            *((void *)a2 - 3) = v27;
            *((void *)a2 - 2) = v62;
            *((unsigned char *)a2 - 1) = v28;
          }
          break;
        case 3uLL:
          sub_70DA6C(v11, v11 + 3, v10);
          break;
        case 4uLL:
          sub_70E484((uint64_t)v11, (uint64_t)(v11 + 3), (uint64_t)(v11 + 6), v10);
          break;
        case 5uLL:
          sub_70E69C((uint64_t)v11, (uint64_t)(v11 + 3), (uint64_t)(v11 + 6), (uint64_t)(v11 + 9), v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1151) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_70E954(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[3 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x1801)
    {
      sub_70DA6C(v11, &v11[3 * (v15 >> 1)], v10);
      unint64_t v18 = v10;
      unint64_t v19 = &v11[3 * v16];
      sub_70DA6C(v11 + 3, v19 - 3, a2 - 6);
      sub_70DA6C(v11 + 6, &v11[3 * v16 + 3], a2 - 9);
      sub_70DA6C(v19 - 3, v17, &v11[3 * v16 + 3]);
      double v67 = *((unsigned char *)v11 + 16);
      float64_t v63 = *v11;
      *(void *)((char *)&v61 + 7) = *(void *)((char *)v11 + 39);
      uint64_t v20 = *((void *)v11 + 3);
      *(void *)&int v61 = *((void *)v11 + 4);
      double v21 = *((unsigned char *)v11 + 47);
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 3) = 0;
      uint64_t v22 = *v17;
      *((unsigned char *)v11 + 16) = *((unsigned char *)v17 + 16);
      *unint64_t v11 = v22;
      unint64_t v23 = *((void *)v19 + 5);
      *(long long *)((char *)v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(long long *)((char *)v19 + 24);
      *((void *)v11 + 5) = v23;
      *((unsigned char *)v17 + 16) = v67;
      *unint64_t v17 = v63;
      *((void *)v19 + 3) = v20;
      *(void *)((char *)v19 + 39) = *(void *)((char *)&v61 + 7);
      *((void *)v19 + 4) = v61;
      uint64_t v10 = v18;
      *((unsigned char *)v17 + 47) = v21;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_70DA6C(&v11[3 * (v15 >> 1)], v11, v10);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*((void *)v11 - 5) <= *((void *)v11 + 1))
    {
      unint64_t v11 = sub_70DD74(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v24 = sub_70DF90(v11, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_70E1B8((uint64_t)v11, (uint64_t)v24);
    unint64_t v11 = v24 + 3;
    if (sub_70E1B8((uint64_t)(v24 + 3), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_16:
      sub_70D338(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = v24 + 3;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  unint64_t v31 = v11 + 3;
  double v33 = v11 == a2 || v31 == a2;
  if (a5)
  {
    if (!v33)
    {
      double v34 = 0;
      unint64_t v35 = v11;
      do
      {
        unint64_t v36 = v31;
        double v37 = *((void *)v35 + 7);
        if (v37 > *((void *)v35 + 1))
        {
          double v38 = *(void *)v31;
          double v39 = *((unsigned char *)v35 + 64);
          *(void *)&v65[7] = *(void *)((char *)v35 + 87);
          double v40 = *((void *)v35 + 9);
          *(void *)unint64_t v65 = *((void *)v35 + 10);
          float64x2_t v41 = *((unsigned char *)v35 + 95);
          *((void *)v35 + 10) = 0;
          *((void *)v35 + 11) = 0;
          *((void *)v35 + 9) = 0;
          unint64_t v42 = *((char *)v31 + 47);
          *((unsigned char *)v36 + 16) = *((unsigned char *)v35 + 16);
          *unint64_t v36 = *v35;
          BOOL v43 = (void **)v36 + 3;
          if (v42 < 0)
          {
            unint64_t v60 = v39;
            operator delete(*v43);
            double v39 = v60;
          }
          uint64_t v44 = (char *)v35 + 24;
          *(_OWORD *)BOOL v43 = *(long long *)((char *)v35 + 24);
          *((void *)v36 + 5) = *((void *)v35 + 5);
          *((unsigned char *)v35 + 47) = 0;
          *((unsigned char *)v35 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          if (v35 == a1)
          {
            unint64_t v35 = a1;
          }
          else if (v37 > *((void *)v35 - 5))
          {
            uint64_t v45 = v34;
            do
            {
              unint64_t v46 = (char *)a1 + v45;
              *(_OWORD *)unint64_t v46 = *(long long *)((char *)a1 + v45 - 48);
              v46[16] = *((unsigned char *)a1 + v45 - 32);
              *(_OWORD *)(v46 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(long long *)((char *)a1 + v45 - 24);
              *((void *)v46 + 5) = *(void *)((char *)a1 + v45 - 8);
              *(v46 - 1) = 0;
              *(v46 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              v45 -= 48;
              if (!v45)
              {
                unint64_t v35 = a1;
                goto LABEL_55;
              }
            }
            while (v37 > *((void *)v46 - 11));
            unint64_t v35 = (long long *)((char *)a1 + v45);
LABEL_55:
            uint64_t v44 = v46 - 24;
          }
          *(void *)unint64_t v35 = v38;
          *((void *)v35 + 1) = v37;
          *((unsigned char *)v35 + 16) = v39;
          *(void *)uint64_t v44 = v40;
          *((void *)v35 + 4) = *(void *)v65;
          *(void *)((char *)v35 + 39) = *(void *)&v65[7];
          *((unsigned char *)v35 + 47) = v41;
        }
        unint64_t v31 = v36 + 3;
        v34 += 48;
        unint64_t v35 = v36;
      }
      while (v36 + 3 != a2);
    }
  }
  else if (!v33)
  {
    unint64_t v47 = (char *)v11 - 88;
    do
    {
      double v49 = v31;
      double v50 = *((void *)a1 + 7);
      if (v50 > *((void *)a1 + 1))
      {
        float64x2_t v51 = *(void *)v31;
        uint64_t v52 = *((unsigned char *)a1 + 64);
        *(void *)&v66[7] = *(void *)((char *)a1 + 87);
        double v53 = *((void *)a1 + 9);
        *(void *)double v66 = *((void *)a1 + 10);
        long long v54 = *((unsigned char *)a1 + 95);
        *((void *)a1 + 10) = 0;
        *((void *)a1 + 11) = 0;
        *((void *)a1 + 9) = 0;
        unint64_t v55 = *((char *)v31 + 47);
        *((unsigned char *)v49 + 16) = *((unsigned char *)a1 + 16);
        *double v49 = *a1;
        unint64_t v56 = (void **)v49 + 3;
        if (v55 < 0) {
          operator delete(*v56);
        }
        *(_OWORD *)unint64_t v56 = *(long long *)((char *)a1 + 24);
        *((void *)v49 + 5) = *((void *)a1 + 5);
        *((unsigned char *)a1 + 47) = 0;
        *((unsigned char *)a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        if (v50 > *((void *)a1 - 5))
        {
          unint64_t v57 = v47;
          do
          {
            *(_OWORD *)(v57 + 88) = *(_OWORD *)(v57 + 40);
            v57[104] = v57[56];
            *((_OWORD *)v57 + 7) = *((_OWORD *)v57 + 4);
            *((void *)v57 + 16) = *((void *)v57 + 10);
            v57[87] = 0;
            v57[64] = 0;
            float64x2_t v58 = *(void *)v57;
            v57 -= 48;
          }
          while (v50 > v58);
          double v48 = v57 + 112;
          a1 = (long long *)(v57 + 88);
        }
        else
        {
          double v48 = (void *)a1 + 3;
        }
        *(void *)a1 = v51;
        *((void *)a1 + 1) = v50;
        *((unsigned char *)a1 + 16) = v52;
        float64x2_t *v48 = v53;
        *((void *)a1 + 4) = *(void *)v66;
        *(void *)((char *)a1 + 39) = *(void *)&v66[7];
        *((unsigned char *)a1 + 47) = v54;
      }
      unint64_t v31 = v49 + 3;
      v47 += 48;
      a1 = v49;
    }
    while (v49 + 3 != a2);
  }
}

  double v40 = (long long *)((char *)a2 - 104);
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((void *)a2 - 12) < *((void *)v11 + 1))
          {
            unint64_t v47 = *v11;
            double v49 = v11[1];
            double v28 = v11[2];
            double v29 = *((void *)v11 + 6);
            *((void *)v11 + 4) = 0;
            *((void *)v11 + 5) = 0;
            *((void *)v11 + 6) = 0;
            BOOL v43 = *(long long *)((char *)v11 + 56);
            *(_OWORD *)uint64_t v45 = *(long long *)((char *)v11 + 72);
            *(_OWORD *)&v45[9] = *(long long *)((char *)v11 + 81);
            double v30 = *(long long *)((char *)a2 - 104);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 22);
            *unint64_t v11 = v30;
            unint64_t v31 = *((_DWORD *)a2 - 19);
            *(void *)((char *)v11 + 20) = *(void *)((char *)a2 - 84);
            *((_DWORD *)v11 + 7) = v31;
            unint64_t v32 = (char *)a2 - 72;
            CFTimeZoneRef v11[2] = *(long long *)((char *)a2 - 72);
            *((void *)v11 + 6) = *((void *)a2 - 7);
            *(void *)unint64_t v32 = 0;
            *((void *)v32 + 1) = 0;
            *((void *)v32 + 2) = 0;
            double v33 = *(a2 - 3);
            double v34 = *(a2 - 2);
            *(long long *)((char *)v11 + 81) = *(long long *)((char *)a2 - 23);
            *(long long *)((char *)v11 + 72) = v34;
            *(long long *)((char *)v11 + 56) = v33;
            *(long long *)((char *)a2 - 104) = v47;
            *(long long *)((char *)a2 - 88) = v49;
            if (*((void *)a2 - 9))
            {
              float64x2_t v41 = v28;
              sub_52F808((uint64_t *)a2 - 9);
              operator delete(*(void **)v32);
              double v28 = v41;
            }
            *(long long *)((char *)a2 - 72) = v28;
            *((void *)a2 - 7) = v29;
            *(a2 - 3) = v43;
            *(a2 - 2) = *(_OWORD *)v45;
            *(long long *)((char *)a2 - 23) = *(_OWORD *)&v45[9];
          }
          break;
        case 3uLL:
          sub_7DD664(v11, (long long *)((char *)v11 + 104), v40);
          break;
        case 4uLL:
          sub_7DE500((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), v40);
          break;
        case 5uLL:
          sub_7DE820((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), (uint64_t)v11 + 312, v40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 2495) {
      break;
    }
    if (v12 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v35 = (v15 - 2) >> 1;
        unint64_t v36 = v35 + 1;
        double v37 = (uint64_t *)v11 + 13 * v35;
        do
        {
          sub_7DEC30((uint64_t)v11, a3, v15, v37);
          v37 -= 13;
          --v36;
        }
        while (v36);
        double v38 = v14 / 0x68uLL;
        do
        {
          sub_7DEE8C((uint64_t)v11, (uint64_t)a2, a3, v38);
          a2 = (long long *)((char *)a2 - 104);
        }
        while (v38-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 104 * (v15 >> 1));
    if ((unint64_t)v14 < 0x3401)
    {
      sub_7DD664(v17, v11, v40);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_7DD664(v11, v17, v40);
      unint64_t v18 = (char *)v11 + 104 * v16;
      sub_7DD664((long long *)((char *)v11 + 104), (long long *)(v18 - 104), a2 - 13);
      sub_7DD664(v11 + 13, (long long *)((char *)v11 + 104 * v16 + 104), (long long *)((char *)a2 - 312));
      sub_7DD664((long long *)(v18 - 104), v17, (long long *)((char *)v11 + 104 * v16 + 104));
      unint64_t v46 = *v11;
      double v48 = v11[1];
      unint64_t v19 = *((void *)v11 + 6);
      uint64_t v20 = v11[2];
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      unint64_t v42 = *(long long *)((char *)v11 + 56);
      *(_OWORD *)uint64_t v44 = *(long long *)((char *)v11 + 72);
      *(_OWORD *)&v44[9] = *(long long *)((char *)v11 + 81);
      double v21 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v17 + 4);
      *unint64_t v11 = v21;
      uint64_t v22 = *((_DWORD *)v18 + 7);
      *(void *)((char *)v11 + 20) = *(void *)(v18 + 20);
      *((_DWORD *)v11 + 7) = v22;
      CFTimeZoneRef v11[2] = *((_OWORD *)v18 + 2);
      *((void *)v11 + 6) = *((void *)v18 + 6);
      *((void *)v18 + 4) = 0;
      *((void *)v18 + 5) = 0;
      *((void *)v18 + 6) = 0;
      unint64_t v23 = *(_OWORD *)(v18 + 56);
      uint64_t v24 = *(_OWORD *)(v18 + 72);
      *(long long *)((char *)v11 + 81) = *(_OWORD *)(v18 + 81);
      *(long long *)((char *)v11 + 72) = v24;
      *(long long *)((char *)v11 + 56) = v23;
      *((_DWORD *)v17 + 4) = v48;
      *unint64_t v17 = v46;
      *((_DWORD *)v18 + 7) = HIDWORD(v48);
      *(void *)(v18 + 20) = *(void *)((char *)&v48 + 4);
      *((_OWORD *)v18 + 2) = v20;
      *((void *)v18 + 6) = v19;
      *(_OWORD *)(v18 + 81) = *(_OWORD *)&v44[9];
      *(_OWORD *)(v18 + 72) = *(_OWORD *)v44;
      *(_OWORD *)(v18 + 56) = v42;
      if (a5) {
        goto LABEL_12;
      }
    }
    if (*((void *)v11 - 12) >= *((void *)v11 + 1))
    {
      unint64_t v11 = sub_7DDB40((uint64_t *)v11, (unint64_t)a2);
      goto LABEL_17;
    }
LABEL_12:
    char v25 = sub_7DDE28((uint64_t *)v11, a2);
    if ((v26 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v27 = sub_7DE130((uint64_t)v11, (uint64_t)v25);
    unint64_t v11 = (long long *)((char *)v25 + 104);
    if (sub_7DE130((uint64_t)v25 + 104, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_15:
      sub_7DCC08(a1, v25, a3, -v13, a5 & 1);
      unint64_t v11 = (long long *)((char *)v25 + 104);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_7DD1C0((uint64_t *)v11, (uint64_t *)a2);
  }
  else
  {
    sub_7DD428((uint64_t *)v11, (uint64_t *)a2);
  }
}

  double v40 = (long long *)((char *)a2 - 104);
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((void *)a2 - 12) < *((void *)v11 + 1))
          {
            unint64_t v47 = *v11;
            double v49 = v11[1];
            double v28 = v11[2];
            double v29 = *((void *)v11 + 6);
            *((void *)v11 + 4) = 0;
            *((void *)v11 + 5) = 0;
            *((void *)v11 + 6) = 0;
            BOOL v43 = *(long long *)((char *)v11 + 56);
            *(_OWORD *)uint64_t v45 = *(long long *)((char *)v11 + 72);
            *(_OWORD *)&v45[9] = *(long long *)((char *)v11 + 81);
            double v30 = *(long long *)((char *)a2 - 104);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 22);
            *unint64_t v11 = v30;
            unint64_t v31 = *((_DWORD *)a2 - 19);
            *(void *)((char *)v11 + 20) = *(void *)((char *)a2 - 84);
            *((_DWORD *)v11 + 7) = v31;
            unint64_t v32 = (char *)a2 - 72;
            CFTimeZoneRef v11[2] = *(long long *)((char *)a2 - 72);
            *((void *)v11 + 6) = *((void *)a2 - 7);
            *(void *)unint64_t v32 = 0;
            *((void *)v32 + 1) = 0;
            *((void *)v32 + 2) = 0;
            double v33 = *(a2 - 3);
            double v34 = *(a2 - 2);
            *(long long *)((char *)v11 + 81) = *(long long *)((char *)a2 - 23);
            *(long long *)((char *)v11 + 72) = v34;
            *(long long *)((char *)v11 + 56) = v33;
            *(long long *)((char *)a2 - 104) = v47;
            *(long long *)((char *)a2 - 88) = v49;
            if (*((void *)a2 - 9))
            {
              float64x2_t v41 = v28;
              sub_52F808((uint64_t *)a2 - 9);
              operator delete(*(void **)v32);
              double v28 = v41;
            }
            *(long long *)((char *)a2 - 72) = v28;
            *((void *)a2 - 7) = v29;
            *(a2 - 3) = v43;
            *(a2 - 2) = *(_OWORD *)v45;
            *(long long *)((char *)a2 - 23) = *(_OWORD *)&v45[9];
          }
          break;
        case 3uLL:
          sub_7DD664(v11, (long long *)((char *)v11 + 104), v40);
          break;
        case 4uLL:
          sub_7DE500((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), v40);
          break;
        case 5uLL:
          sub_7DE820((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), (uint64_t)v11 + 312, v40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 2495) {
      break;
    }
    if (v12 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v35 = (v15 - 2) >> 1;
        unint64_t v36 = v35 + 1;
        double v37 = (uint64_t *)v11 + 13 * v35;
        do
        {
          sub_7DEC30((uint64_t)v11, a3, v15, v37);
          v37 -= 13;
          --v36;
        }
        while (v36);
        double v38 = v14 / 0x68uLL;
        do
        {
          sub_7E2BD4((uint64_t)v11, (uint64_t)a2, a3, v38);
          a2 = (long long *)((char *)a2 - 104);
        }
        while (v38-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 104 * (v15 >> 1));
    if ((unint64_t)v14 < 0x3401)
    {
      sub_7DD664(v17, v11, v40);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_7DD664(v11, v17, v40);
      unint64_t v18 = (char *)v11 + 104 * v16;
      sub_7DD664((long long *)((char *)v11 + 104), (long long *)(v18 - 104), a2 - 13);
      sub_7DD664(v11 + 13, (long long *)((char *)v11 + 104 * v16 + 104), (long long *)((char *)a2 - 312));
      sub_7DD664((long long *)(v18 - 104), v17, (long long *)((char *)v11 + 104 * v16 + 104));
      unint64_t v46 = *v11;
      double v48 = v11[1];
      unint64_t v19 = *((void *)v11 + 6);
      uint64_t v20 = v11[2];
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      unint64_t v42 = *(long long *)((char *)v11 + 56);
      *(_OWORD *)uint64_t v44 = *(long long *)((char *)v11 + 72);
      *(_OWORD *)&v44[9] = *(long long *)((char *)v11 + 81);
      double v21 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v17 + 4);
      *unint64_t v11 = v21;
      uint64_t v22 = *((_DWORD *)v18 + 7);
      *(void *)((char *)v11 + 20) = *(void *)(v18 + 20);
      *((_DWORD *)v11 + 7) = v22;
      CFTimeZoneRef v11[2] = *((_OWORD *)v18 + 2);
      *((void *)v11 + 6) = *((void *)v18 + 6);
      *((void *)v18 + 4) = 0;
      *((void *)v18 + 5) = 0;
      *((void *)v18 + 6) = 0;
      unint64_t v23 = *(_OWORD *)(v18 + 56);
      uint64_t v24 = *(_OWORD *)(v18 + 72);
      *(long long *)((char *)v11 + 81) = *(_OWORD *)(v18 + 81);
      *(long long *)((char *)v11 + 72) = v24;
      *(long long *)((char *)v11 + 56) = v23;
      *((_DWORD *)v17 + 4) = v48;
      *unint64_t v17 = v46;
      *((_DWORD *)v18 + 7) = HIDWORD(v48);
      *(void *)(v18 + 20) = *(void *)((char *)&v48 + 4);
      *((_OWORD *)v18 + 2) = v20;
      *((void *)v18 + 6) = v19;
      *(_OWORD *)(v18 + 81) = *(_OWORD *)&v44[9];
      *(_OWORD *)(v18 + 72) = *(_OWORD *)v44;
      *(_OWORD *)(v18 + 56) = v42;
      if (a5) {
        goto LABEL_12;
      }
    }
    if (*((void *)v11 - 12) >= *((void *)v11 + 1))
    {
      unint64_t v11 = sub_7DDB40((uint64_t *)v11, (unint64_t)a2);
      goto LABEL_17;
    }
LABEL_12:
    char v25 = sub_7DDE28((uint64_t *)v11, a2);
    if ((v26 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v27 = sub_7E2804((uint64_t)v11, (uint64_t)v25);
    unint64_t v11 = (long long *)((char *)v25 + 104);
    if (sub_7E2804((uint64_t)v25 + 104, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_15:
      sub_7E224C(a1, v25, a3, -v13, a5 & 1);
      unint64_t v11 = (long long *)((char *)v25 + 104);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_7DD1C0((uint64_t *)v11, (uint64_t *)a2);
  }
  else
  {
    sub_7DD428((uint64_t *)v11, (uint64_t *)a2);
  }
}

  double v40 = (long long *)((char *)a2 - 104);
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*((void *)a2 - 12) < *((void *)v11 + 1))
          {
            unint64_t v47 = *v11;
            double v49 = v11[1];
            double v28 = v11[2];
            double v29 = *((void *)v11 + 6);
            *((void *)v11 + 4) = 0;
            *((void *)v11 + 5) = 0;
            *((void *)v11 + 6) = 0;
            BOOL v43 = *(long long *)((char *)v11 + 56);
            *(_OWORD *)uint64_t v45 = *(long long *)((char *)v11 + 72);
            *(_OWORD *)&v45[9] = *(long long *)((char *)v11 + 81);
            double v30 = *(long long *)((char *)a2 - 104);
            *((_DWORD *)v11 + 4) = *((_DWORD *)a2 - 22);
            *unint64_t v11 = v30;
            unint64_t v31 = *((_DWORD *)a2 - 19);
            *(void *)((char *)v11 + 20) = *(void *)((char *)a2 - 84);
            *((_DWORD *)v11 + 7) = v31;
            unint64_t v32 = (char *)a2 - 72;
            CFTimeZoneRef v11[2] = *(long long *)((char *)a2 - 72);
            *((void *)v11 + 6) = *((void *)a2 - 7);
            *(void *)unint64_t v32 = 0;
            *((void *)v32 + 1) = 0;
            *((void *)v32 + 2) = 0;
            double v33 = *(a2 - 3);
            double v34 = *(a2 - 2);
            *(long long *)((char *)v11 + 81) = *(long long *)((char *)a2 - 23);
            *(long long *)((char *)v11 + 72) = v34;
            *(long long *)((char *)v11 + 56) = v33;
            *(long long *)((char *)a2 - 104) = v47;
            *(long long *)((char *)a2 - 88) = v49;
            if (*((void *)a2 - 9))
            {
              float64x2_t v41 = v28;
              sub_52F808((uint64_t *)a2 - 9);
              operator delete(*(void **)v32);
              double v28 = v41;
            }
            *(long long *)((char *)a2 - 72) = v28;
            *((void *)a2 - 7) = v29;
            *(a2 - 3) = v43;
            *(a2 - 2) = *(_OWORD *)v45;
            *(long long *)((char *)a2 - 23) = *(_OWORD *)&v45[9];
          }
          break;
        case 3uLL:
          sub_7DD664(v11, (long long *)((char *)v11 + 104), v40);
          break;
        case 4uLL:
          sub_7DE500((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), v40);
          break;
        case 5uLL:
          sub_7DE820((uint64_t)v11, (uint64_t)v11 + 104, (uint64_t)(v11 + 13), (uint64_t)v11 + 312, v40);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 2495) {
      break;
    }
    if (v12 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v35 = (v15 - 2) >> 1;
        unint64_t v36 = v35 + 1;
        double v37 = (uint64_t *)v11 + 13 * v35;
        do
        {
          sub_7DEC30((uint64_t)v11, a3, v15, v37);
          v37 -= 13;
          --v36;
        }
        while (v36);
        double v38 = v14 / 0x68uLL;
        do
        {
          sub_7E4020((uint64_t)v11, (uint64_t)a2, a3, v38);
          a2 = (long long *)((char *)a2 - 104);
        }
        while (v38-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 104 * (v15 >> 1));
    if ((unint64_t)v14 < 0x3401)
    {
      sub_7DD664(v17, v11, v40);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_7DD664(v11, v17, v40);
      unint64_t v18 = (char *)v11 + 104 * v16;
      sub_7DD664((long long *)((char *)v11 + 104), (long long *)(v18 - 104), a2 - 13);
      sub_7DD664(v11 + 13, (long long *)((char *)v11 + 104 * v16 + 104), (long long *)((char *)a2 - 312));
      sub_7DD664((long long *)(v18 - 104), v17, (long long *)((char *)v11 + 104 * v16 + 104));
      unint64_t v46 = *v11;
      double v48 = v11[1];
      unint64_t v19 = *((void *)v11 + 6);
      uint64_t v20 = v11[2];
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      unint64_t v42 = *(long long *)((char *)v11 + 56);
      *(_OWORD *)uint64_t v44 = *(long long *)((char *)v11 + 72);
      *(_OWORD *)&v44[9] = *(long long *)((char *)v11 + 81);
      double v21 = *v17;
      *((_DWORD *)v11 + 4) = *((_DWORD *)v17 + 4);
      *unint64_t v11 = v21;
      uint64_t v22 = *((_DWORD *)v18 + 7);
      *(void *)((char *)v11 + 20) = *(void *)(v18 + 20);
      *((_DWORD *)v11 + 7) = v22;
      CFTimeZoneRef v11[2] = *((_OWORD *)v18 + 2);
      *((void *)v11 + 6) = *((void *)v18 + 6);
      *((void *)v18 + 4) = 0;
      *((void *)v18 + 5) = 0;
      *((void *)v18 + 6) = 0;
      unint64_t v23 = *(_OWORD *)(v18 + 56);
      uint64_t v24 = *(_OWORD *)(v18 + 72);
      *(long long *)((char *)v11 + 81) = *(_OWORD *)(v18 + 81);
      *(long long *)((char *)v11 + 72) = v24;
      *(long long *)((char *)v11 + 56) = v23;
      *((_DWORD *)v17 + 4) = v48;
      *unint64_t v17 = v46;
      *((_DWORD *)v18 + 7) = HIDWORD(v48);
      *(void *)(v18 + 20) = *(void *)((char *)&v48 + 4);
      *((_OWORD *)v18 + 2) = v20;
      *((void *)v18 + 6) = v19;
      *(_OWORD *)(v18 + 81) = *(_OWORD *)&v44[9];
      *(_OWORD *)(v18 + 72) = *(_OWORD *)v44;
      *(_OWORD *)(v18 + 56) = v42;
      if (a5) {
        goto LABEL_12;
      }
    }
    if (*((void *)v11 - 12) >= *((void *)v11 + 1))
    {
      unint64_t v11 = sub_7DDB40((uint64_t *)v11, (unint64_t)a2);
      goto LABEL_17;
    }
LABEL_12:
    char v25 = sub_7DDE28((uint64_t *)v11, a2);
    if ((v26 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v27 = sub_7E3C50((uint64_t)v11, (uint64_t)v25);
    unint64_t v11 = (long long *)((char *)v25 + 104);
    if (sub_7E3C50((uint64_t)v25 + 104, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_15:
      sub_7E3698(a1, v25, a3, -v13, a5 & 1);
      unint64_t v11 = (long long *)((char *)v25 + 104);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_7DD1C0((uint64_t *)v11, (uint64_t *)a2);
  }
  else
  {
    sub_7DD428((uint64_t *)v11, (uint64_t *)a2);
  }
}

  unint64_t v31 = a2 - 11;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (v14 >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v25 = sub_63A050((uint64_t)v31, *a3);
          if (v25 < sub_63A050((uint64_t)a1, *a3))
          {
            sub_8D1408(a1, v31);
          }
          break;
        case 3uLL:
          sub_8D0560(a1, a1 + 11, v31, a3);
          break;
        case 4uLL:
          sub_8D16E4(a1, a1 + 11, a1 + 22, v31, a3);
          break;
        case 5uLL:
          sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, v31, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 4223) {
      break;
    }
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        BOOL v26 = (v15 - 2) >> 1;
        unint64_t v27 = v26 + 1;
        double v28 = (uint64_t)&a1[11 * v26];
        do
        {
          sub_8D1914((uint64_t)a1, a3, 0x2E8BA2E8BA2E8BA3 * (v14 >> 4), v28);
          v28 -= 176;
          --v27;
        }
        while (v27);
        double v29 = v14 / 0xB0uLL;
        do
        {
          sub_8D1D40((uint64_t)a1, (uint64_t)a2, a3, v29);
          a2 -= 11;
        }
        while (v29-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &a1[11 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x5801)
    {
      sub_8D0560(v17, a1, v31, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_8D0560(a1, v17, v31, a3);
      unint64_t v18 = 11 * v16;
      unint64_t v19 = &a1[11 * v16 - 11];
      sub_8D0560(a1 + 11, v19, a2 - 22, a3);
      uint64_t v20 = &a1[v18 + 11];
      sub_8D0560(a1 + 22, v20, a2 - 33, a3);
      sub_8D0560(v19, v17, v20, a3);
      sub_8D1408(a1, v17);
      if (a5) {
        goto LABEL_12;
      }
    }
    double v21 = sub_63A050((uint64_t)(a1 - 11), *a3);
    if (v21 >= sub_63A050((uint64_t)a1, *a3))
    {
      unint64_t v11 = sub_8D06BC((uint64_t)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v22 = sub_8D0AD8((uint64_t)a1, (unint64_t)a2, a3);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v24 = sub_8D0F00(a1, v22, a3);
    unint64_t v11 = v22 + 11;
    if (sub_8D0F00(v22 + 11, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      sub_8CF778(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 11;
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_8CFBF4((uint64_t)a1, a2, a3);
  }
  else
  {
    sub_8D0070((uint64_t)a1, a2, a3);
  }
}

  unint64_t v31 = a2 - 11;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (v14 >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v25 = sub_63A050((uint64_t)v31, *a3);
          if (v25 < sub_63A050((uint64_t)a1, *a3))
          {
            sub_8D1408(a1, v31);
          }
          break;
        case 3uLL:
          sub_8D0560(a1, a1 + 11, v31, a3);
          break;
        case 4uLL:
          sub_8D16E4(a1, a1 + 11, a1 + 22, v31, a3);
          break;
        case 5uLL:
          sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, v31, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 4223) {
      break;
    }
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        BOOL v26 = (v15 - 2) >> 1;
        unint64_t v27 = v26 + 1;
        double v28 = (uint64_t)&a1[11 * v26];
        do
        {
          sub_8D4144((uint64_t)a1, a3, 0x2E8BA2E8BA2E8BA3 * (v14 >> 4), v28);
          v28 -= 176;
          --v27;
        }
        while (v27);
        double v29 = v14 / 0xB0uLL;
        do
        {
          sub_8D4570((uint64_t)a1, (uint64_t)a2, a3, v29);
          a2 -= 11;
        }
        while (v29-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &a1[11 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x5801)
    {
      sub_8D0560(v17, a1, v31, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_8D0560(a1, v17, v31, a3);
      unint64_t v18 = 11 * v16;
      unint64_t v19 = &a1[11 * v16 - 11];
      sub_8D0560(a1 + 11, v19, a2 - 22, a3);
      uint64_t v20 = &a1[v18 + 11];
      sub_8D0560(a1 + 22, v20, a2 - 33, a3);
      sub_8D0560(v19, v17, v20, a3);
      sub_8D1408(a1, v17);
      if (a5) {
        goto LABEL_12;
      }
    }
    double v21 = sub_63A050((uint64_t)(a1 - 11), *a3);
    if (v21 >= sub_63A050((uint64_t)a1, *a3))
    {
      unint64_t v11 = sub_8D33F8((uint64_t)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v22 = sub_8D3814((uint64_t)a1, (unint64_t)a2, a3);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v24 = sub_8D3C3C(a1, v22, a3);
    unint64_t v11 = v22 + 11;
    if (sub_8D3C3C(v22 + 11, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      sub_8D2610(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 11;
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_8D2A8C((uint64_t)a1, a2, a3);
  }
  else
  {
    sub_8D2F08((uint64_t)a1, a2, a3);
  }
}

  unint64_t v31 = a2 - 11;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * (v14 >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          char v25 = sub_63A050((uint64_t)v31, *a3);
          if (v25 < sub_63A050((uint64_t)a1, *a3))
          {
            sub_8D1408(a1, v31);
          }
          break;
        case 3uLL:
          sub_8D0560(a1, a1 + 11, v31, a3);
          break;
        case 4uLL:
          sub_8D16E4(a1, a1 + 11, a1 + 22, v31, a3);
          break;
        case 5uLL:
          sub_8D17DC(a1, a1 + 11, a1 + 22, a1 + 33, v31, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 4223) {
      break;
    }
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        BOOL v26 = (v15 - 2) >> 1;
        unint64_t v27 = v26 + 1;
        double v28 = (uint64_t)&a1[11 * v26];
        do
        {
          sub_8D6808((uint64_t)a1, a3, 0x2E8BA2E8BA2E8BA3 * (v14 >> 4), v28);
          v28 -= 176;
          --v27;
        }
        while (v27);
        double v29 = v14 / 0xB0uLL;
        do
        {
          sub_8D6C34((uint64_t)a1, (uint64_t)a2, a3, v29);
          a2 -= 11;
        }
        while (v29-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &a1[11 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x5801)
    {
      sub_8D0560(v17, a1, v31, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_8D0560(a1, v17, v31, a3);
      unint64_t v18 = 11 * v16;
      unint64_t v19 = &a1[11 * v16 - 11];
      sub_8D0560(a1 + 11, v19, a2 - 22, a3);
      uint64_t v20 = &a1[v18 + 11];
      sub_8D0560(a1 + 22, v20, a2 - 33, a3);
      sub_8D0560(v19, v17, v20, a3);
      sub_8D1408(a1, v17);
      if (a5) {
        goto LABEL_12;
      }
    }
    double v21 = sub_63A050((uint64_t)(a1 - 11), *a3);
    if (v21 >= sub_63A050((uint64_t)a1, *a3))
    {
      unint64_t v11 = sub_8D5ABC((uint64_t)a1, a2, a3);
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v22 = sub_8D5ED8((uint64_t)a1, (unint64_t)a2, a3);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v24 = sub_8D6300(a1, v22, a3);
    unint64_t v11 = v22 + 11;
    if (sub_8D6300(v22 + 11, a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      sub_8D4CD4(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 11;
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_8D5150((uint64_t)a1, a2, a3);
  }
  else
  {
    sub_8D55CC((uint64_t)a1, a2, a3);
  }
}

  unint64_t v11 = (__n128 *)(a2 - 3);
  uint64_t v12 = (__n128 *)(a2 - 6);
  uint64_t v13 = (__n128 *)(a2 - 9);
  uint64_t v14 = (unint64_t)a1;
  while (1)
  {
    a1 = (void *)v14;
    unint64_t v15 = (uint64_t)a2 - v14;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 575)
    {
      uint64_t v241 = (uint64_t *)(v14 + 24);
      uint64_t v243 = (uint64_t *)v14 == a2 || v241 == a2;
      if (a4)
      {
        if (!v243)
        {
          uint64_t v244 = 0;
          uint64_t v245 = (uint64_t *)v14;
          do
          {
            uint64_t v247 = v245[4];
            uint64_t v248 = v245[5];
            uint64_t v249 = v245[1];
            uint64_t v250 = v245[2];
            uint64_t v245 = v241;
            uint64_t v251 = v247 < v249;
            if (v248 != v250) {
              uint64_t v251 = v248 > v250;
            }
            if (v251)
            {
              uint64_t v252 = *v245;
              uint64_t v253 = v244;
              do
              {
                uint64_t v254 = v14 + v253;
                *(_OWORD *)(v254 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v14 + v253);
                *(void *)(v254 + 40) = *(void *)(v14 + v253 + 16);
                if (!v253)
                {
                  uint64_t v246 = (void *)v14;
                  goto LABEL_201;
                }
                uint64_t v256 = *(void *)(v254 - 16);
                uint64_t v255 = *(void *)(v254 - 8);
                uint64_t v257 = v247 < v256;
                char v6 = v248 == v255;
                uint64_t v258 = v248 > v255;
                if (v6) {
                  uint64_t v258 = v257;
                }
                v253 -= 24;
              }
              while (v258);
              uint64_t v246 = (void *)(v14 + v253 + 24);
LABEL_201:
              *uint64_t v246 = v252;
              v246[1] = v247;
              v246[2] = v248;
            }
            uint64_t v241 = v245 + 3;
            v244 += 24;
          }
          while (v245 + 3 != a2);
        }
      }
      else if (!v243)
      {
        do
        {
          uint64_t v319 = a1[4];
          uint64_t v320 = a1[5];
          uint64_t v321 = a1[1];
          uint64_t v322 = a1[2];
          a1 = v241;
          uint64_t v323 = v319 < v321;
          if (v320 != v322) {
            uint64_t v323 = v320 > v322;
          }
          if (v323)
          {
            uint64_t v324 = *a1;
            uint64_t v325 = a1;
            do
            {
              *(_OWORD *)uint64_t v325 = *(_OWORD *)(v325 - 3);
              v325[2] = *(v325 - 1);
              uint64_t v326 = *(v325 - 5);
              uint64_t v327 = *(v325 - 4);
              v325 -= 3;
              uint64_t v328 = v319 < v326;
              char v6 = v320 == v327;
              uint64_t v329 = v320 > v327;
              if (!v6) {
                uint64_t v328 = v329;
              }
            }
            while (v328);
            *uint64_t v325 = v324;
            v325[1] = v319;
            v325[2] = v320;
          }
          uint64_t v241 = a1 + 3;
        }
        while (a1 + 3 != a2);
      }
      return;
    }
    if (!a3)
    {
      if ((uint64_t *)v14 != a2)
      {
        uint64_t v259 = (unint64_t)(v16 - 2) >> 1;
        uint64_t v260 = v259;
        do
        {
          uint64_t v261 = v260;
          if (v259 >= v260)
          {
            uint64_t v262 = (2 * v260) | 1;
            uint64_t v263 = (void *)(v14 + 24 * v262);
            if (2 * v261 + 2 < v16)
            {
              uint64_t v264 = v263[2];
              uint64_t v265 = v263[5];
              uint64_t v266 = v263[1] < v263[4];
              char v6 = v264 == v265;
              uint64_t v267 = v264 > v265;
              if (!v6) {
                uint64_t v266 = v267;
              }
              v263 += 3 * v266;
              if (v266) {
                uint64_t v262 = 2 * v261 + 2;
              }
            }
            uint64_t v268 = (void *)(v14 + 24 * v261);
            uint64_t v269 = v263[2];
            uint64_t v270 = v268[1];
            uint64_t v271 = v268[2];
            uint64_t v272 = v263[1] < v270;
            char v6 = v269 == v271;
            uint64_t v273 = v269 > v271;
            if (!v6) {
              uint64_t v272 = v273;
            }
            if (!v272)
            {
              uint64_t v274 = *v268;
              do
              {
                uint64_t v277 = v268;
                uint64_t v268 = v263;
                uint64_t v278 = *(_OWORD *)v263;
                v277[2] = v263[2];
                *(_OWORD *)uint64_t v277 = v278;
                if (v259 < v262) {
                  break;
                }
                uint64_t v279 = (2 * v262) | 1;
                uint64_t v263 = (void *)(v14 + 24 * v279);
                uint64_t v280 = 2 * v262 + 2;
                if (v280 < v16)
                {
                  uint64_t v281 = v263[2];
                  uint64_t v282 = v263[5];
                  uint64_t v283 = v263[1] < v263[4];
                  char v6 = v281 == v282;
                  uint64_t v284 = v281 > v282;
                  if (!v6) {
                    uint64_t v283 = v284;
                  }
                  v263 += 3 * v283;
                  if (v283) {
                    uint64_t v279 = v280;
                  }
                }
                uint64_t v275 = v263[2];
                char v6 = v275 == v271;
                uint64_t v276 = v275 > v271;
                if (v6) {
                  uint64_t v276 = v263[1] < v270;
                }
                uint64_t v262 = v279;
              }
              while (!v276);
              *uint64_t v268 = v274;
              v268[1] = v270;
              v268[2] = v271;
            }
          }
          uint64_t v260 = v261 - 1;
        }
        while (v261);
        uint64_t v285 = v15 / 0x18uLL;
        do
        {
          uint64_t v287 = 0;
          uint64_t v383 = *(void *)(v14 + 16);
          uint64_t v358 = *(__n128 *)v14;
          uint64_t v288 = v14;
          do
          {
            uint64_t v290 = v288 + 24 * v287 + 24;
            uint64_t v291 = (2 * v287) | 1;
            uint64_t v292 = 2 * v287 + 2;
            if (v292 < v285)
            {
              uint64_t v293 = *(void *)(v290 + 16);
              uint64_t v294 = *(void *)(v290 + 40);
              uint64_t v295 = *(void *)(v290 + 8) < *(void *)(v290 + 32);
              char v6 = v293 == v294;
              uint64_t v296 = v293 > v294;
              if (!v6) {
                uint64_t v295 = v296;
              }
              v290 += 24 * v295;
              if (v295) {
                uint64_t v291 = v292;
              }
            }
            uint64_t v289 = *(_OWORD *)v290;
            *(void *)(v288 + 16) = *(void *)(v290 + 16);
            *(_OWORD *)uint64_t v288 = v289;
            uint64_t v288 = v290;
            uint64_t v287 = v291;
          }
          while (v291 <= (uint64_t)((unint64_t)(v285 - 2) >> 1));
          a2 -= 3;
          if ((uint64_t *)v290 == a2)
          {
            *(void *)(v290 + 16) = v383;
            *(__n128 *)uint64_t v290 = v358;
          }
          else
          {
            uint64_t v297 = *(_OWORD *)a2;
            *(void *)(v290 + 16) = a2[2];
            *(_OWORD *)uint64_t v290 = v297;
            a2[2] = v383;
            *(__n128 *)a2 = v358;
            uint64_t v298 = v290 - v14 + 24;
            if (v298 >= 25)
            {
              uint64_t v299 = (v298 / 0x18uLL - 2) >> 1;
              uint64_t v300 = v14 + 24 * v299;
              uint64_t v301 = *(void *)(v300 + 16);
              uint64_t v302 = *(void *)(v290 + 8);
              uint64_t v303 = *(void *)(v290 + 16);
              uint64_t v304 = *(void *)(v300 + 8) < v302;
              char v6 = v301 == v303;
              uint64_t v305 = v301 > v303;
              if (!v6) {
                uint64_t v304 = v305;
              }
              if (v304)
              {
                uint64_t v306 = *(void *)v290;
                do
                {
                  uint64_t v307 = v290;
                  uint64_t v290 = v300;
                  uint64_t v308 = *(_OWORD *)v300;
                  *(void *)(v307 + 16) = *(void *)(v300 + 16);
                  *(_OWORD *)uint64_t v307 = v308;
                  if (!v299) {
                    break;
                  }
                  uint64_t v299 = (v299 - 1) >> 1;
                  uint64_t v300 = v14 + 24 * v299;
                  uint64_t v309 = *(void *)(v300 + 16);
                  uint64_t v310 = *(void *)(v300 + 8) < v302;
                  char v6 = v309 == v303;
                  uint64_t v311 = v309 > v303;
                  if (!v6) {
                    uint64_t v310 = v311;
                  }
                }
                while (v310);
                *(void *)uint64_t v290 = v306;
                *(void *)(v290 + 8) = v302;
                *(void *)(v290 + 16) = v303;
              }
            }
          }
        }
        while (v285-- > 2);
      }
      return;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = (__n128 *)(v14 + 24 * ((unint64_t)v16 >> 1));
    uint64_t v20 = *(a2 - 2);
    unint64_t v19 = *(a2 - 1);
    if ((unint64_t)v15 < 0xC01)
    {
      double v29 = *(void *)(v14 + 8);
      double v30 = *(void *)(v14 + 16);
      unint64_t v31 = v18[1].n128_u64[0];
      unint64_t v32 = v29 < v18->n128_u64[1];
      char v6 = v30 == v31;
      double v33 = v30 > v31;
      if (!v6) {
        unint64_t v32 = v33;
      }
      double v34 = v20 < v29;
      char v6 = v19 == v30;
      unint64_t v35 = v19 > v30;
      if (!v6) {
        double v34 = v35;
      }
      if (v32)
      {
        if (v34)
        {
          uint64_t v362 = v18[1].n128_u64[0];
          uint64_t v337 = *v18;
          unint64_t v36 = *v11;
          v18[1].n128_u64[0] = *(a2 - 1);
          *unint64_t v18 = v36;
          goto LABEL_53;
        }
        uint64_t v369 = v18[1].n128_u64[0];
        uint64_t v344 = *v18;
        long long v77 = *(__n128 *)v14;
        v18[1].n128_u64[0] = *(void *)(v14 + 16);
        *unint64_t v18 = v77;
        a5 = v344;
        *(void *)(v14 + 16) = v369;
        *(__n128 *)uint64_t v14 = v344;
        float64x2_t v78 = *(a2 - 1);
        float64x2_t v79 = *(void *)(v14 + 16);
        float64x2_t v80 = (unint64_t)*(a2 - 2) < *(void *)(v14 + 8);
        char v6 = v78 == v79;
        float64x2_t v81 = v78 > v79;
        if (!v6) {
          float64x2_t v80 = v81;
        }
        if (v80)
        {
          uint64_t v362 = *(void *)(v14 + 16);
          uint64_t v337 = *(__n128 *)v14;
          double v82 = *v11;
          *(void *)(v14 + 16) = *(a2 - 1);
          *(__n128 *)uint64_t v14 = v82;
LABEL_53:
          a5 = v337;
          *(a2 - 1) = v362;
          *unint64_t v11 = v337;
        }
      }
      else if (v34)
      {
        uint64_t v365 = *(void *)(v14 + 16);
        uint64_t v340 = *(__n128 *)v14;
        BOOL v43 = *v11;
        *(void *)(v14 + 16) = *(a2 - 1);
        *(__n128 *)uint64_t v14 = v43;
        a5 = v340;
        *(a2 - 1) = v365;
        *unint64_t v11 = v340;
        uint64_t v44 = *(void *)(v14 + 16);
        uint64_t v45 = v18[1].n128_u64[0];
        unint64_t v46 = *(void *)(v14 + 8) < v18->n128_u64[1];
        char v6 = v44 == v45;
        unint64_t v47 = v44 > v45;
        if (!v6) {
          unint64_t v46 = v47;
        }
        if (v46)
        {
          uint64_t v366 = v18[1].n128_u64[0];
          uint64_t v341 = *v18;
          double v48 = *(__n128 *)v14;
          v18[1].n128_u64[0] = *(void *)(v14 + 16);
          *unint64_t v18 = v48;
          a5 = v341;
          *(void *)(v14 + 16) = v366;
          *(__n128 *)uint64_t v14 = v341;
          --a3;
          if (a4) {
            goto LABEL_55;
          }
          goto LABEL_96;
        }
      }
      --a3;
      if (a4) {
        goto LABEL_55;
      }
      goto LABEL_96;
    }
    double v21 = v18->n128_u64[1];
    uint64_t v22 = v18[1].n128_u64[0];
    unint64_t v23 = *(void *)(v14 + 16);
    uint64_t v24 = v21 < *(void *)(v14 + 8);
    char v6 = v22 == v23;
    char v25 = v22 > v23;
    if (!v6) {
      uint64_t v24 = v25;
    }
    BOOL v26 = v20 < v21;
    char v6 = v19 == v22;
    unint64_t v27 = v19 > v22;
    if (!v6) {
      BOOL v26 = v27;
    }
    if (v24)
    {
      if (v26)
      {
        uint64_t v361 = *(void *)(v14 + 16);
        uint64_t v336 = *(__n128 *)v14;
        double v28 = *v11;
        *(void *)(v14 + 16) = *(a2 - 1);
        *(__n128 *)uint64_t v14 = v28;
LABEL_36:
        *(a2 - 1) = v361;
        *unint64_t v11 = v336;
        goto LABEL_37;
      }
      uint64_t v367 = *(void *)(v14 + 16);
      uint64_t v342 = *(__n128 *)v14;
      double v49 = *v18;
      *(void *)(v14 + 16) = v18[1].n128_u64[0];
      *(__n128 *)uint64_t v14 = v49;
      v18[1].n128_u64[0] = v367;
      *unint64_t v18 = v342;
      double v50 = *(a2 - 1);
      float64x2_t v51 = v18[1].n128_u64[0];
      uint64_t v52 = *(a2 - 2) < v18->n128_u64[1];
      char v6 = v50 == v51;
      double v53 = v50 > v51;
      if (!v6) {
        uint64_t v52 = v53;
      }
      if (v52)
      {
        uint64_t v361 = v18[1].n128_u64[0];
        uint64_t v336 = *v18;
        long long v54 = *v11;
        v18[1].n128_u64[0] = *(a2 - 1);
        *unint64_t v18 = v54;
        goto LABEL_36;
      }
    }
    else if (v26)
    {
      uint64_t v363 = v18[1].n128_u64[0];
      uint64_t v338 = *v18;
      double v37 = *v11;
      v18[1].n128_u64[0] = *(a2 - 1);
      *unint64_t v18 = v37;
      *(a2 - 1) = v363;
      *unint64_t v11 = v338;
      double v38 = v18[1].n128_u64[0];
      double v39 = *(void *)(v14 + 16);
      double v40 = v18->n128_u64[1] < *(void *)(v14 + 8);
      char v6 = v38 == v39;
      float64x2_t v41 = v38 > v39;
      if (!v6) {
        double v40 = v41;
      }
      if (v40)
      {
        uint64_t v364 = *(void *)(v14 + 16);
        uint64_t v339 = *(__n128 *)v14;
        unint64_t v42 = *v18;
        *(void *)(v14 + 16) = v18[1].n128_u64[0];
        *(__n128 *)uint64_t v14 = v42;
        v18[1].n128_u64[0] = v364;
        *unint64_t v18 = v339;
      }
    }
LABEL_37:
    unint64_t v55 = (__n128 *)(v14 + 24);
    unint64_t v56 = v14 + 24 * v17;
    unint64_t v57 = (__n128 *)(v56 - 24);
    double v59 = *(void *)(v56 - 16);
    float64x2_t v58 = *(void *)(v56 - 8);
    unint64_t v60 = *(void *)(v14 + 40);
    int v61 = v59 < *(void *)(v14 + 32);
    char v6 = v58 == v60;
    double v62 = v58 > v60;
    if (!v6) {
      int v61 = v62;
    }
    float64_t v63 = *(a2 - 4);
    unint64_t v64 = *(a2 - 5) < v59;
    char v6 = v63 == v58;
    unint64_t v65 = v63 > v58;
    if (v6) {
      unint64_t v65 = v64;
    }
    if (v61)
    {
      if (v65)
      {
        double v66 = *v55;
        double v67 = *(void *)(v14 + 40);
        int v68 = *(a2 - 4);
        *unint64_t v55 = *v12;
        *(void *)(v14 + 40) = v68;
        *(a2 - 4) = v67;
LABEL_60:
        *uint64_t v12 = v66;
        goto LABEL_61;
      }
      BOOL v85 = *v55;
      double v86 = *(void *)(v14 + 40);
      double v87 = v57[1].n128_i64[0];
      *unint64_t v55 = *v57;
      *(void *)(v14 + 40) = v87;
      v57[1].n128_u64[0] = v86;
      *unint64_t v57 = v85;
      long long v88 = *(a2 - 4);
      BOOL v89 = v57[1].n128_u64[0];
      unsigned int v90 = *(a2 - 5) < v57->n128_u64[1];
      char v6 = v88 == v89;
      int v91 = v88 > v89;
      if (!v6) {
        unsigned int v90 = v91;
      }
      if (v90)
      {
        uint64_t v370 = v57[1].n128_i64[0];
        uint64_t v345 = *v57;
        float64x2_t v92 = *v12;
        v57[1].n128_u64[0] = *(a2 - 4);
        *unint64_t v57 = v92;
        double v66 = v345;
        *(a2 - 4) = v370;
        goto LABEL_60;
      }
    }
    else if (v65)
    {
      uint64_t v368 = v57[1].n128_i64[0];
      uint64_t v343 = *v57;
      double v69 = *v12;
      v57[1].n128_u64[0] = *(a2 - 4);
      *unint64_t v57 = v69;
      *(a2 - 4) = v368;
      *uint64_t v12 = v343;
      uint64_t v70 = v57[1].n128_u64[0];
      uint64_t v71 = *(void *)(v14 + 40);
      uint64_t v72 = v57->n128_u64[1] < *(void *)(v14 + 32);
      char v6 = v70 == v71;
      float64x2_t v73 = v70 > v71;
      if (!v6) {
        uint64_t v72 = v73;
      }
      if (v72)
      {
        float64x2_t v74 = *v55;
        double v75 = *(void *)(v14 + 40);
        int8x16_t v76 = v57[1].n128_i64[0];
        *unint64_t v55 = *v57;
        *(void *)(v14 + 40) = v76;
        v57[1].n128_u64[0] = v75;
        *unint64_t v57 = v74;
      }
    }
LABEL_61:
    long long v93 = (__n128 *)(v14 + 48);
    unsigned __int8 v94 = v14 + 24 * v17;
    uint64_t v95 = (__n128 *)(v94 + 24);
    uint64_t v97 = *(void *)(v94 + 32);
    uint64_t v96 = *(void *)(v94 + 40);
    double v98 = *(void *)(v14 + 64);
    double v99 = v97 < *(void *)(v14 + 56);
    char v6 = v96 == v98;
    uint64_t v100 = v96 > v98;
    if (!v6) {
      double v99 = v100;
    }
    char v101 = *(a2 - 7);
    unsigned int v102 = *(a2 - 8) < v97;
    char v6 = v101 == v96;
    unsigned int v103 = v101 > v96;
    if (v6) {
      unsigned int v103 = v102;
    }
    if (v99)
    {
      if (v103)
      {
        int v104 = *v93;
        int v105 = *(void *)(v14 + 64);
        uint64_t v106 = *(a2 - 7);
        *long long v93 = *v13;
        *(void *)(v14 + 64) = v106;
        *(a2 - 7) = v105;
LABEL_77:
        *uint64_t v13 = v104;
        goto LABEL_78;
      }
      unsigned int v115 = *v93;
      unsigned int v116 = *(void *)(v14 + 64);
      int v117 = v95[1].n128_i64[0];
      *long long v93 = *v95;
      *(void *)(v14 + 64) = v117;
      v95[1].n128_u64[0] = v116;
      *uint64_t v95 = v115;
      unsigned int v118 = *(a2 - 7);
      unsigned int v119 = v95[1].n128_u64[0];
      unsigned int v120 = *(a2 - 8) < v95->n128_u64[1];
      char v6 = v118 == v119;
      int v121 = v118 > v119;
      if (!v6) {
        unsigned int v120 = v121;
      }
      if (v120)
      {
        uint64_t v372 = v95[1].n128_i64[0];
        uint64_t v347 = *v95;
        uint64_t v122 = *v13;
        v95[1].n128_u64[0] = *(a2 - 7);
        *uint64_t v95 = v122;
        int v104 = v347;
        *(a2 - 7) = v372;
        goto LABEL_77;
      }
    }
    else if (v103)
    {
      uint64_t v371 = v95[1].n128_i64[0];
      uint64_t v346 = *v95;
      unsigned int v107 = *v13;
      v95[1].n128_u64[0] = *(a2 - 7);
      *uint64_t v95 = v107;
      *(a2 - 7) = v371;
      *uint64_t v13 = v346;
      int64_t v108 = v95[1].n128_u64[0];
      uint64_t v109 = *(void *)(v14 + 64);
      long double v110 = v95->n128_u64[1] < *(void *)(v14 + 56);
      char v6 = v108 == v109;
      long double v111 = v108 > v109;
      if (!v6) {
        long double v110 = v111;
      }
      if (v110)
      {
        uint64x2_t v112 = *v93;
        uint64_t v113 = *(void *)(v14 + 64);
        uint64_t v114 = v95[1].n128_i64[0];
        *long long v93 = *v95;
        *(void *)(v14 + 64) = v114;
        v95[1].n128_u64[0] = v113;
        *uint64_t v95 = v112;
      }
    }
LABEL_78:
    long double v123 = v18->n128_u64[1];
    uint64_t v124 = v18[1].n128_u64[0];
    uint64x2_t v125 = v57[1].n128_u64[0];
    uint64_t v126 = v123 < v57->n128_u64[1];
    char v6 = v124 == v125;
    long double v127 = v124 > v125;
    if (!v6) {
      uint64_t v126 = v127;
    }
    unsigned int v128 = v95[1].n128_u64[0];
    unsigned int v129 = v95->n128_u64[1] < v123;
    char v6 = v128 == v124;
    int v130 = v128 > v124;
    if (!v6) {
      unsigned int v129 = v130;
    }
    if (v126)
    {
      if (v129)
      {
        uint64_t v373 = v57[1].n128_u64[0];
        uint64_t v348 = *v57;
        *unint64_t v57 = *v95;
        v57[1].n128_u64[0] = v95[1].n128_u64[0];
LABEL_94:
        v95[1].n128_u64[0] = v373;
        *uint64_t v95 = v348;
        goto LABEL_95;
      }
      uint64_t v376 = v57[1].n128_u64[0];
      uint64_t v351 = *v57;
      *unint64_t v57 = *v18;
      v57[1].n128_u64[0] = v18[1].n128_u64[0];
      v18[1].n128_u64[0] = v376;
      *unint64_t v18 = v351;
      double v135 = v95[1].n128_u64[0];
      long double v136 = v18[1].n128_u64[0];
      unsigned int v137 = v95->n128_u64[1] < v18->n128_u64[1];
      char v6 = v135 == v136;
      unsigned int v138 = v135 > v136;
      if (!v6) {
        unsigned int v137 = v138;
      }
      if (v137)
      {
        uint64_t v373 = v18[1].n128_u64[0];
        uint64_t v348 = *v18;
        *unint64_t v18 = *v95;
        v18[1].n128_u64[0] = v95[1].n128_u64[0];
        goto LABEL_94;
      }
    }
    else if (v129)
    {
      uint64_t v374 = v18[1].n128_u64[0];
      uint64_t v349 = *v18;
      *unint64_t v18 = *v95;
      v18[1].n128_u64[0] = v95[1].n128_u64[0];
      v95[1].n128_u64[0] = v374;
      *uint64_t v95 = v349;
      int v131 = v18[1].n128_u64[0];
      int v132 = v57[1].n128_u64[0];
      uint64_t v133 = v18->n128_u64[1] < v57->n128_u64[1];
      char v6 = v131 == v132;
      long double v134 = v131 > v132;
      if (!v6) {
        uint64_t v133 = v134;
      }
      if (v133)
      {
        uint64_t v375 = v57[1].n128_u64[0];
        uint64_t v350 = *v57;
        *unint64_t v57 = *v18;
        v57[1].n128_u64[0] = v18[1].n128_u64[0];
        v18[1].n128_u64[0] = v375;
        *unint64_t v18 = v350;
      }
    }
LABEL_95:
    uint64_t v377 = *(void *)(v14 + 16);
    uint64_t v352 = *(__n128 *)v14;
    int v139 = *v18;
    *(void *)(v14 + 16) = v18[1].n128_u64[0];
    *(__n128 *)uint64_t v14 = v139;
    a5 = v352;
    v18[1].n128_u64[0] = v377;
    *unint64_t v18 = v352;
    --a3;
    if (a4)
    {
LABEL_55:
      double v83 = *(void *)(v14 + 8);
      double v84 = *(void *)(v14 + 16);
      goto LABEL_99;
    }
LABEL_96:
    int v140 = *(void *)(v14 - 8);
    double v83 = *(void *)(v14 + 8);
    double v84 = *(void *)(v14 + 16);
    uint64_t v141 = *(void *)(v14 - 16) < v83;
    char v6 = v140 == v84;
    uint64_t v142 = v140 > v84;
    if (!v6) {
      uint64_t v141 = v142;
    }
    if (v141)
    {
LABEL_99:
      int v143 = 0;
      unsigned int v144 = *(void *)v14;
      do
      {
        unsigned int v145 = *(void *)(v14 + v143 + 40);
        char v6 = v145 == v84;
        long double v146 = v145 > v84;
        if (v6) {
          long double v146 = *(void *)(v14 + v143 + 32) < v83;
        }
        v143 += 24;
      }
      while (v146);
      uint64_t v147 = v14 + v143;
      BOOL v148 = a2;
      if (v143 == 24)
      {
        unint64_t v154 = a2;
        while (v147 < (unint64_t)v154)
        {
          double v149 = v154 - 3;
          double v156 = *(v154 - 2);
          unint64_t v155 = *(v154 - 1);
          uint64_t v157 = v156 < v83;
          char v6 = v155 == v84;
          double v158 = v155 > v84;
          if (!v6) {
            uint64_t v157 = v158;
          }
          unint64_t v154 = v149;
          if (v157) {
            goto LABEL_113;
          }
        }
        double v149 = v154;
        uint64_t v14 = v147;
      }
      else
      {
        do
        {
          double v149 = v148 - 3;
          BOOL v151 = *(v148 - 2);
          double v150 = *(v148 - 1);
          int v152 = v151 < v83;
          char v6 = v150 == v84;
          uint64_t v153 = v150 > v84;
          if (!v6) {
            int v152 = v153;
          }
          BOOL v148 = v149;
        }
        while (!v152);
LABEL_113:
        uint64_t v14 = v147;
        if (v147 < (unint64_t)v149)
        {
          double v159 = (unint64_t)v149;
          do
          {
            uint64_t v378 = *(void *)(v14 + 16);
            uint64_t v353 = *(__n128 *)v14;
            uint64_t v160 = *(__n128 *)v159;
            *(void *)(v14 + 16) = *(void *)(v159 + 16);
            *(__n128 *)uint64_t v14 = v160;
            a5 = v353;
            *(void *)(v159 + 16) = v378;
            *(__n128 *)double v159 = v353;
            do
            {
              int v161 = *(void *)(v14 + 32);
              uint64_t v162 = *(void *)(v14 + 40);
              v14 += 24;
              uint64_t v163 = v161 < v83;
              char v6 = v162 == v84;
              unint64_t v164 = v162 > v84;
              if (!v6) {
                uint64_t v163 = v164;
              }
            }
            while (v163);
            do
            {
              unint64_t v165 = *(void *)(v159 - 16);
              uint64_t v166 = *(void *)(v159 - 8);
              v159 -= 24;
              uint64_t v167 = v165 < v83;
              char v6 = v166 == v84;
              uint64_t v168 = v166 > v84;
              if (!v6) {
                uint64_t v167 = v168;
              }
            }
            while (!v167);
          }
          while (v14 < v159);
        }
      }
      if ((void *)(v14 - 24) != a1)
      {
        a5 = *(__n128 *)(v14 - 24);
        a1[2] = *(void *)(v14 - 8);
        *(__n128 *)a1 = a5;
      }
      *(void *)(v14 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v144;
      *(void *)(v14 - 16) = v83;
      *(void *)(v14 - 8) = v84;
      if (v147 < (unint64_t)v149) {
        goto LABEL_128;
      }
      uint64_t v169 = sub_94FBD8((uint64_t)a1, (void *)(v14 - 24), a5);
      if (sub_94FBD8(v14, a2, v170))
      {
        a2 = (uint64_t *)(v14 - 24);
        if (v169) {
          return;
        }
        goto LABEL_1;
      }
      if (!v169)
      {
LABEL_128:
        sub_94E8FC(a1, v14 - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      uint64_t v171 = *(a2 - 1);
      uint64_t v172 = v83 < *(a2 - 2);
      char v6 = v84 == v171;
      uint64_t v173 = v84 > v171;
      if (!v6) {
        uint64_t v172 = v173;
      }
      if (v172)
      {
        uint64_t v174 = v14;
        do
        {
          uint64_t v14 = v174 + 24;
          unint64_t v176 = *(void *)(v174 + 32);
          uint64_t v175 = *(void *)(v174 + 40);
          unint64_t v177 = v83 < v176;
          char v6 = v84 == v175;
          uint64_t v178 = v84 > v175;
          if (!v6) {
            unint64_t v177 = v178;
          }
          uint64_t v174 = v14;
        }
        while (!v177);
      }
      else
      {
        uint64_t v179 = v14 + 24;
        do
        {
          uint64_t v14 = v179;
          if (v179 >= (unint64_t)a2) {
            break;
          }
          uint64_t v180 = *(void *)(v179 + 16);
          uint64_t v181 = v83 < *(void *)(v179 + 8);
          char v6 = v84 == v180;
          uint64_t v182 = v84 > v180;
          if (v6) {
            uint64_t v182 = v181;
          }
          uint64_t v179 = v14 + 24;
        }
        while (!v182);
      }
      unint64_t v183 = a2;
      if (v14 < (unint64_t)a2)
      {
        uint64_t v184 = a2;
        do
        {
          unint64_t v183 = v184 - 3;
          uint64_t v186 = *(v184 - 2);
          uint64_t v185 = *(v184 - 1);
          uint64_t v187 = v83 < v186;
          char v6 = v84 == v185;
          uint64_t v188 = v84 > v185;
          if (!v6) {
            uint64_t v187 = v188;
          }
          uint64_t v184 = v183;
        }
        while (v187);
      }
      uint64_t v189 = *a1;
      while (v14 < (unint64_t)v183)
      {
        uint64_t v379 = *(void *)(v14 + 16);
        uint64_t v354 = *(__n128 *)v14;
        double v190 = *(__n128 *)v183;
        *(void *)(v14 + 16) = v183[2];
        *(__n128 *)uint64_t v14 = v190;
        a5 = v354;
        v183[2] = v379;
        *(__n128 *)unint64_t v183 = v354;
        do
        {
          uint64_t v191 = *(void *)(v14 + 32);
          uint64_t v192 = *(void *)(v14 + 40);
          v14 += 24;
          uint64_t v193 = v83 < v191;
          char v6 = v84 == v192;
          uint64_t v194 = v84 > v192;
          if (!v6) {
            uint64_t v193 = v194;
          }
        }
        while (!v193);
        do
        {
          uint64_t v195 = *(v183 - 2);
          uint64_t v196 = *(v183 - 1);
          v183 -= 3;
          uint64_t v197 = v83 < v195;
          char v6 = v84 == v196;
          uint64_t v198 = v84 > v196;
          if (!v6) {
            uint64_t v197 = v198;
          }
        }
        while (v197);
      }
      char v5 = v14 - 24 >= (unint64_t)a1;
      char v6 = v14 - 24 == (void)a1;
      if ((void *)(v14 - 24) != a1)
      {
        a5 = *(__n128 *)(v14 - 24);
        a1[2] = *(void *)(v14 - 8);
        *(__n128 *)a1 = a5;
      }
      a4 = 0;
      *(void *)(v14 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v189;
      *(void *)(v14 - 16) = v83;
      *(void *)(v14 - 8) = v84;
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return;
    case 2:
      uint64_t v199 = *(a2 - 1);
      uint64_t v200 = *(void *)(v14 + 16);
      char v201 = (unint64_t)*(a2 - 2) < *(void *)(v14 + 8);
      char v6 = v199 == v200;
      uint64_t v202 = v199 > v200;
      if (!v6) {
        char v201 = v202;
      }
      if (v201)
      {
        uint64_t v380 = *(void *)(v14 + 16);
        uint64_t v355 = *(__n128 *)v14;
        uint64_t v203 = *(_OWORD *)(a2 - 3);
        *(void *)(v14 + 16) = *(a2 - 1);
        *(_OWORD *)uint64_t v14 = v203;
        *(a2 - 1) = v380;
        *(__n128 *)(a2 - 3) = v355;
      }
      return;
    case 3:
      uint64_t v204 = (__n128 *)(v14 + 24);
      unint64_t v205 = *(void *)(v14 + 32);
      uint64_t v206 = *(void *)(v14 + 40);
      int v207 = *(void *)(v14 + 16);
      uint64_t v208 = v205 < *(void *)(v14 + 8);
      char v6 = v206 == v207;
      int v209 = v206 > v207;
      if (!v6) {
        uint64_t v208 = v209;
      }
      int v210 = *(a2 - 1);
      uint64_t v211 = *(a2 - 2) < v205;
      char v6 = v210 == v206;
      uint64_t v212 = v210 > v206;
      if (!v6) {
        uint64_t v211 = v212;
      }
      if (v208)
      {
        if (v211)
        {
          uint64_t v381 = *(void *)(v14 + 16);
          uint64_t v356 = *(__n128 *)v14;
          int v213 = *v11;
          *(void *)(v14 + 16) = *(a2 - 1);
          *(__n128 *)uint64_t v14 = v213;
          uint64_t v214 = v356;
          *(a2 - 1) = v381;
        }
        else
        {
          uint64_t v385 = *(void *)(v14 + 16);
          uint64_t v360 = *(__n128 *)v14;
          *(__n128 *)uint64_t v14 = *v204;
          *(void *)(v14 + 16) = *(void *)(v14 + 40);
          *uint64_t v204 = v360;
          *(void *)(v14 + 40) = v385;
          uint64_t v330 = *(a2 - 1);
          uint64_t v331 = *(void *)(v14 + 40);
          uint64_t v332 = (unint64_t)*(a2 - 2) < *(void *)(v14 + 32);
          char v6 = v330 == v331;
          uint64_t v333 = v330 > v331;
          if (!v6) {
            uint64_t v332 = v333;
          }
          if (!v332) {
            return;
          }
          uint64_t v214 = *v204;
          uint64_t v334 = *(void *)(v14 + 40);
          uint64_t v335 = *(a2 - 1);
          *uint64_t v204 = *v11;
          *(void *)(v14 + 40) = v335;
          *(a2 - 1) = v334;
        }
        *unint64_t v11 = v214;
        return;
      }
      if (v211)
      {
        uint64_t v312 = *v204;
        uint64_t v313 = *(void *)(v14 + 40);
        uint64_t v314 = *(a2 - 1);
        *uint64_t v204 = *v11;
        *(void *)(v14 + 40) = v314;
        *(a2 - 1) = v313;
        *unint64_t v11 = v312;
        uint64_t v315 = *(void *)(v14 + 40);
        uint64_t v316 = *(void *)(v14 + 16);
        uint64_t v317 = *(void *)(v14 + 32) < *(void *)(v14 + 8);
        char v6 = v315 == v316;
        uint64_t v318 = v315 > v316;
        if (!v6) {
          uint64_t v317 = v318;
        }
        if (v317)
        {
          uint64_t v384 = *(void *)(v14 + 16);
          uint64_t v359 = *(__n128 *)v14;
          *(__n128 *)uint64_t v14 = *v204;
          *(void *)(v14 + 16) = *(void *)(v14 + 40);
          *uint64_t v204 = v359;
          *(void *)(v14 + 40) = v384;
        }
      }
      break;
    case 4:
      sub_9501C8((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)(a2 - 3), a5);
      return;
    case 5:
      uint64_t v215 = (__n128 *)(v14 + 24);
      uint64_t v216 = (__n128 *)(v14 + 48);
      uint64_t v217 = (__n128 *)(v14 + 72);
      sub_9501C8((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)(v14 + 72), a5);
      unint64_t v218 = *(a2 - 1);
      uint64_t v219 = *(void *)(v14 + 88);
      char v220 = (unint64_t)*(a2 - 2) < *(void *)(v14 + 80);
      char v6 = v218 == v219;
      long long v221 = v218 > v219;
      if (!v6) {
        char v220 = v221;
      }
      if (v220)
      {
        unint64_t v222 = *v217;
        int v223 = *(void *)(v14 + 88);
        uint64_t v224 = *(a2 - 1);
        *uint64_t v217 = *(__n128 *)(a2 - 3);
        *(void *)(v14 + 88) = v224;
        *(a2 - 1) = v223;
        *(__n128 *)(a2 - 3) = v222;
        uint64_t v225 = *(void *)(v14 + 88);
        uint64_t v226 = *(void *)(v14 + 64);
        uint64_t v227 = *(void *)(v14 + 80) < *(void *)(v14 + 56);
        char v6 = v225 == v226;
        uint64_t v228 = v225 > v226;
        if (!v6) {
          uint64_t v227 = v228;
        }
        if (v227)
        {
          unsigned int v229 = *(void *)(v14 + 64);
          uint64_t v230 = *v216;
          *uint64_t v216 = *v217;
          *(void *)(v14 + 64) = *(void *)(v14 + 88);
          *uint64_t v217 = v230;
          *(void *)(v14 + 88) = v229;
          uint64_t v231 = *(void *)(v14 + 64);
          int v232 = *(void *)(v14 + 40);
          int v233 = *(void *)(v14 + 56) < *(void *)(v14 + 32);
          char v6 = v231 == v232;
          int v234 = v231 > v232;
          if (!v6) {
            int v233 = v234;
          }
          if (v233)
          {
            uint64_t v235 = *(void *)(v14 + 40);
            uint64_t v236 = *v215;
            *uint64_t v215 = *v216;
            *(void *)(v14 + 40) = *(void *)(v14 + 64);
            *uint64_t v216 = v236;
            *(void *)(v14 + 64) = v235;
            uint64_t v237 = *(void *)(v14 + 40);
            uint64_t v238 = *(void *)(v14 + 16);
            uint64_t v239 = *(void *)(v14 + 32) < *(void *)(v14 + 8);
            char v6 = v237 == v238;
            uint64_t v240 = v237 > v238;
            if (!v6) {
              uint64_t v239 = v240;
            }
            if (v239)
            {
              uint64_t v382 = *(void *)(v14 + 16);
              uint64_t v357 = *(__n128 *)v14;
              *(__n128 *)uint64_t v14 = *v215;
              *(void *)(v14 + 16) = *(void *)(v14 + 40);
              *uint64_t v215 = v357;
              *(void *)(v14 + 40) = v382;
            }
          }
        }
      }
      return;
    default:
      JUMPOUT(0);
  }
}

  uint64_t v10 = (long long *)(a2 - 40);
  double i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v12 = a2 - i;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - i) >> 3);
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 959)
    {
      unsigned int v138 = (unsigned int *)(i + 40);
      int v140 = i == a2 || v138 == (unsigned int *)a2;
      if (a4)
      {
        if (v140) {
          return;
        }
        uint64_t v141 = 0;
        uint64_t v142 = (unsigned int *)i;
LABEL_341:
        unsigned int v144 = v142;
        uint64_t v142 = v138;
        unsigned int v145 = v144[12];
        long double v146 = v144[2];
        uint64_t v147 = *v144;
        if (v145 == 0x7FFFFFFF)
        {
          BOOL v148 = v146 != 0x7FFFFFFF;
          double v149 = *v142;
          double v150 = v144[11];
          if (*v142 < v147) {
            goto LABEL_359;
          }
        }
        else
        {
          if (v146 != 0x7FFFFFFF)
          {
            double v149 = *v142;
            double v150 = v144[11];
            if (*v142 >= v147)
            {
              if (v147 < v149) {
                goto LABEL_340;
              }
              uint64_t v153 = v144[1];
              if (v150 >= v153 && (v145 >= v146 || v153 < v150)) {
                goto LABEL_340;
              }
            }
            goto LABEL_359;
          }
          BOOL v148 = 0;
          double v149 = *v142;
          double v150 = v144[11];
          if (*v142 < v147)
          {
LABEL_359:
            *(_OWORD *)uint64_t v312 = *(_OWORD *)(v144 + 13);
            *(_OWORD *)&v312[12] = *((_OWORD *)v144 + 4);
            unint64_t v154 = *((_OWORD *)v144 + 1);
            *(_OWORD *)uint64_t v142 = *(_OWORD *)v144;
            *((_OWORD *)v142 + 1) = v154;
            *((unsigned char *)v142 + 32) = *((unsigned char *)v144 + 32);
            int v143 = i;
            if (v144 == (unsigned int *)i) {
              goto LABEL_339;
            }
            unint64_t v155 = v141;
            if (v145 != 0x7FFFFFFF)
            {
              while (1)
              {
                uint64_t v157 = i + v155;
                double v158 = (unsigned int *)(i + v155 - 40);
                double v159 = *(_DWORD *)(i + v155 - 32);
                if (v159 == 0x7FFFFFFF)
                {
                  if (v149 >= *v158)
                  {
                    int v143 = i + v155;
                    if (*v158 < v149 || v150 >= *(_DWORD *)(i + v155 - 36)) {
                      goto LABEL_339;
                    }
                  }
                }
                else if (v149 >= *v158)
                {
                  if (*v158 < v149) {
                    goto LABEL_393;
                  }
                  int v161 = *(_DWORD *)(v157 - 36);
                  if (v150 >= v161 && (v145 >= v159 || v161 < v150)) {
                    goto LABEL_393;
                  }
                }
                v144 -= 10;
                double v156 = *(_OWORD *)(i + v155 - 24);
                *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
                *(_OWORD *)(v157 + 16) = v156;
                *(unsigned char *)(v157 + 32) = *(unsigned char *)(i + v155 - 8);
                v155 -= 40;
                if (!v155) {
                  goto LABEL_338;
                }
              }
            }
            while (1)
            {
              unint64_t v164 = i + v155;
              unint64_t v165 = *(_DWORD *)(i + v155 - 40);
              if (v149 >= v165)
              {
                if (v165 < v149)
                {
                  int v143 = i + v155;
LABEL_339:
                  *(_DWORD *)int v143 = v149;
                  *(_DWORD *)(v143 + 4) = v150;
                  *(_DWORD *)(v143 + 8) = v145;
                  *(void *)(v143 + 25) = *(void *)&v312[13];
                  *(_OWORD *)(v143 + 12) = *(_OWORD *)v312;
LABEL_340:
                  unsigned int v138 = v142 + 10;
                  v141 += 40;
                  if (v142 + 10 == (unsigned int *)a2) {
                    return;
                  }
                  goto LABEL_341;
                }
                uint64_t v166 = *(_DWORD *)(v164 - 36);
                uint64_t v168 = v166 >= v150 && *(_DWORD *)(v164 - 32) != 0x7FFFFFFF;
                if (v150 >= v166 && !v168)
                {
LABEL_393:
                  int v143 = (unint64_t)v144;
                  goto LABEL_339;
                }
              }
              v144 -= 10;
              uint64_t v163 = *(_OWORD *)(i + v155 - 24);
              *(_OWORD *)unint64_t v164 = *(_OWORD *)(i + v155 - 40);
              *(_OWORD *)(v164 + 16) = v163;
              *(unsigned char *)(v164 + 32) = *(unsigned char *)(i + v155 - 8);
              v155 -= 40;
              if (!v155)
              {
LABEL_338:
                int v143 = i;
                goto LABEL_339;
              }
            }
          }
        }
        if (v147 < v149) {
          goto LABEL_340;
        }
        BOOL v151 = v144[1];
        if (v150 >= v151)
        {
          int v152 = v145 == 0x7FFFFFFF && v148;
          if (v151 < v150 || !v152) {
            goto LABEL_340;
          }
        }
        goto LABEL_359;
      }
      if (v140) {
        return;
      }
      while (2)
      {
        uint64_t v279 = a1;
        a1 = (unint64_t)v138;
        uint64_t v280 = *(_DWORD *)(v279 + 48);
        uint64_t v281 = *(_DWORD *)(v279 + 8);
        uint64_t v282 = *(_DWORD *)v279;
        if (v280 == 0x7FFFFFFF)
        {
          uint64_t v283 = v281 != 0x7FFFFFFF;
          uint64_t v284 = *v138;
          uint64_t v285 = *(_DWORD *)(v279 + 44);
          if (v284 < v282) {
            goto LABEL_605;
          }
LABEL_603:
          if (v282 >= v284)
          {
            uint64_t v286 = *(_DWORD *)(v279 + 4);
            if (v285 < v286) {
              goto LABEL_605;
            }
            if (v280 != 0x7FFFFFFF) {
              uint64_t v283 = 0;
            }
            if (v286 >= v285 && v283)
            {
              *(_OWORD *)uint64_t v315 = *(_OWORD *)(v279 + 52);
              *(_OWORD *)&v315[12] = *(_OWORD *)(v279 + 64);
              goto LABEL_606;
            }
          }
LABEL_597:
          unsigned int v138 = (unsigned int *)(a1 + 40);
          if (a1 + 40 == a2) {
            return;
          }
          continue;
        }
        break;
      }
      if (v281 == 0x7FFFFFFF)
      {
        uint64_t v283 = 0;
        uint64_t v284 = *v138;
        uint64_t v285 = *(_DWORD *)(v279 + 44);
        if (v284 >= v282) {
          goto LABEL_603;
        }
LABEL_605:
        *(_OWORD *)uint64_t v315 = *(_OWORD *)(v279 + 52);
        *(_OWORD *)&v315[12] = *(_OWORD *)(v279 + 64);
        if (v280 != 0x7FFFFFFF) {
          goto LABEL_623;
        }
        do
        {
          do
          {
LABEL_606:
            uint64_t v287 = v279;
            uint64_t v288 = *(_OWORD *)(v279 + 16);
            *(_OWORD *)(v279 + 40) = *(_OWORD *)v279;
            *(_OWORD *)(v279 + 56) = v288;
            *(unsigned char *)(v279 + 72) = *(unsigned char *)(v279 + 32);
            uint64_t v290 = *(_DWORD *)(v279 - 40);
            v279 -= 40;
            uint64_t v289 = v290;
          }
          while (v284 < v290);
          if (v289 < v284) {
            break;
          }
          uint64_t v291 = *(_DWORD *)(v287 - 36);
          uint64_t v292 = v291 < v285 || *(_DWORD *)(v287 - 32) == 0x7FFFFFFF;
          uint64_t v293 = !v292;
        }
        while (v285 < v291 || v293);
      }
      else
      {
        uint64_t v284 = *v138;
        uint64_t v285 = *(_DWORD *)(v279 + 44);
        if (v284 >= v282)
        {
          if (v282 < v284) {
            goto LABEL_597;
          }
          uint64_t v294 = *(_DWORD *)(v279 + 4);
          if (v285 >= v294 && (v280 >= v281 || v294 < v285)) {
            goto LABEL_597;
          }
        }
        *(_OWORD *)uint64_t v315 = *(_OWORD *)(v279 + 52);
        *(_OWORD *)&v315[12] = *(_OWORD *)(v279 + 64);
        do
        {
LABEL_623:
          while (1)
          {
            uint64_t v287 = v279;
            uint64_t v295 = *(_OWORD *)(v279 + 16);
            *(_OWORD *)(v279 + 40) = *(_OWORD *)v279;
            *(_OWORD *)(v279 + 56) = v295;
            *(unsigned char *)(v279 + 72) = *(unsigned char *)(v279 + 32);
            v279 -= 40;
            uint64_t v296 = *(_DWORD *)(v287 - 32);
            if (v296 == 0x7FFFFFFF) {
              break;
            }
            uint64_t v299 = *(_DWORD *)(v287 - 40);
            if (v284 >= v299)
            {
              if (v299 < v284) {
                goto LABEL_596;
              }
              uint64_t v300 = *(_DWORD *)(v287 - 36);
              if (v285 >= v300 && (v280 >= v296 || v300 < v285)) {
                goto LABEL_596;
              }
            }
          }
          uint64_t v297 = *(_DWORD *)(v287 - 40);
        }
        while (v284 < v297 || v297 >= v284 && v285 < *(_DWORD *)(v287 - 36));
      }
LABEL_596:
      *(_DWORD *)uint64_t v287 = v284;
      *(_DWORD *)(v287 + 4) = v285;
      *(_DWORD *)(v287 + 8) = v280;
      *(void *)(v287 + 25) = *(void *)&v315[13];
      *(_OWORD *)(v287 + 12) = *(_OWORD *)v315;
      goto LABEL_597;
    }
    if (!a3)
    {
      if (i == a2) {
        return;
      }
      int v170 = (v13 - 2) >> 1;
      uint64_t v171 = v170;
      while (2)
      {
        uint64_t v173 = v171;
        if (v170 < v171) {
          goto LABEL_399;
        }
        uint64_t v174 = (2 * v171) | 1;
        uint64_t v172 = i + 40 * v174;
        if (2 * v173 + 2 < (uint64_t)v13)
        {
          uint64_t v175 = *(_DWORD *)(v172 + 8);
          unint64_t v176 = *(_DWORD *)(v172 + 48);
          if (v175 == 0x7FFFFFFF)
          {
            unint64_t v177 = v176 != 0x7FFFFFFF;
            uint64_t v178 = *(_DWORD *)v172;
            uint64_t v179 = *(_DWORD *)(v172 + 40);
            if (*(_DWORD *)v172 < v179) {
              goto LABEL_426;
            }
LABEL_407:
            if (v179 >= v178)
            {
              uint64_t v180 = *(_DWORD *)(v172 + 4);
              uint64_t v181 = *(_DWORD *)(v172 + 44);
              if (v180 < v181) {
                goto LABEL_426;
              }
              uint64_t v182 = v175 == 0x7FFFFFFF && v177;
              if (v181 >= v180 && v182) {
                goto LABEL_426;
              }
            }
          }
          else
          {
            if (v176 == 0x7FFFFFFF)
            {
              unint64_t v177 = 0;
              uint64_t v178 = *(_DWORD *)v172;
              uint64_t v179 = *(_DWORD *)(v172 + 40);
              if (*(_DWORD *)v172 < v179) {
                goto LABEL_426;
              }
              goto LABEL_407;
            }
            uint64_t v184 = *(_DWORD *)(v172 + 40);
            if (*(_DWORD *)v172 < v184
              || v184 >= *(_DWORD *)v172
              && ((uint64_t v185 = *(_DWORD *)(v172 + 4), v186 = *(_DWORD *)(v172 + 44), v185 < v186)
               || (v175 < v176 ? (uint64_t v187 = v186 >= v185) : (uint64_t v187 = 0), v187)))
            {
LABEL_426:
              v172 += 40;
              uint64_t v174 = 2 * v173 + 2;
            }
          }
        }
        uint64_t v188 = i + 40 * v173;
        uint64_t v189 = *(_DWORD *)(v172 + 8);
        double v190 = *(_DWORD *)(v188 + 8);
        uint64_t v191 = *(_DWORD *)v172;
        if (v189 == 0x7FFFFFFF)
        {
          uint64_t v192 = v190 != 0x7FFFFFFF;
          uint64_t v193 = *(_DWORD *)v188;
          if (v191 < *(_DWORD *)v188) {
            goto LABEL_399;
          }
LABEL_432:
          uint64_t v194 = *(_DWORD *)(v188 + 4);
          if (v193 >= v191)
          {
            uint64_t v195 = *(_DWORD *)(v172 + 4);
            if (v195 < v194) {
              goto LABEL_399;
            }
            uint64_t v196 = v189 == 0x7FFFFFFF && v192;
            if (v194 >= v195 && v196) {
              goto LABEL_399;
            }
          }
        }
        else
        {
          if (v190 == 0x7FFFFFFF)
          {
            uint64_t v192 = 0;
            uint64_t v193 = *(_DWORD *)v188;
            if (v191 < *(_DWORD *)v188) {
              goto LABEL_399;
            }
            goto LABEL_432;
          }
          uint64_t v193 = *(_DWORD *)v188;
          if (v191 < *(_DWORD *)v188) {
            goto LABEL_399;
          }
          uint64_t v194 = *(_DWORD *)(v188 + 4);
          if (v193 >= v191)
          {
            uint64_t v197 = *(_DWORD *)(v172 + 4);
            if (v197 < v194) {
              goto LABEL_399;
            }
            if (v189 < v190 && v194 >= v197) {
              goto LABEL_399;
            }
          }
        }
        *(_OWORD *)&v313[12] = *(_OWORD *)(v188 + 24);
        *(_OWORD *)uint64_t v313 = *(_OWORD *)(v188 + 12);
LABEL_448:
        uint64_t v199 = *(_OWORD *)v172;
        uint64_t v200 = *(_OWORD *)(v172 + 16);
        *(unsigned char *)(v188 + 32) = *(unsigned char *)(v172 + 32);
        *(_OWORD *)uint64_t v188 = v199;
        *(_OWORD *)(v188 + 16) = v200;
        if (v170 < v174) {
          goto LABEL_398;
        }
        uint64_t v188 = v172;
        char v201 = 2 * v174;
        uint64_t v174 = (2 * v174) | 1;
        uint64_t v172 = i + 40 * v174;
        uint64_t v202 = v201 + 2;
        if (v202 < (uint64_t)v13)
        {
          uint64_t v203 = *(_DWORD *)(v172 + 8);
          uint64_t v204 = *(_DWORD *)(v172 + 48);
          if (v203 == 0x7FFFFFFF)
          {
            unint64_t v205 = v204 != 0x7FFFFFFF;
            uint64_t v206 = *(_DWORD *)v172;
            int v207 = *(_DWORD *)(v172 + 40);
            if (*(_DWORD *)v172 < v207) {
              goto LABEL_467;
            }
LABEL_455:
            if (v207 >= v206)
            {
              uint64_t v208 = *(_DWORD *)(v172 + 4);
              int v209 = *(_DWORD *)(v172 + 44);
              if (v208 < v209) {
                goto LABEL_467;
              }
              int v210 = v203 == 0x7FFFFFFF && v205;
              if (v209 >= v208 && v210) {
                goto LABEL_467;
              }
            }
          }
          else
          {
            if (v204 == 0x7FFFFFFF)
            {
              unint64_t v205 = 0;
              uint64_t v206 = *(_DWORD *)v172;
              int v207 = *(_DWORD *)(v172 + 40);
              if (*(_DWORD *)v172 < v207) {
                goto LABEL_467;
              }
              goto LABEL_455;
            }
            uint64_t v212 = *(_DWORD *)(v172 + 40);
            if (*(_DWORD *)v172 < v212
              || v212 >= *(_DWORD *)v172
              && ((char v220 = *(_DWORD *)(v172 + 4), v221 = *(_DWORD *)(v172 + 44), v220 < v221)
               || (v203 < v204 ? (unint64_t v222 = v221 >= v220) : (unint64_t v222 = 0), v222)))
            {
LABEL_467:
              v172 += 40;
              uint64_t v174 = v202;
            }
          }
        }
        uint64_t v214 = *(_DWORD *)(v172 + 4);
        int v213 = *(_DWORD *)(v172 + 8);
        uint64_t v215 = *(_DWORD *)v172;
        if (v213 == 0x7FFFFFFF || v190 == 0x7FFFFFFF)
        {
          if (v215 < v193
            || v193 >= v215
            && (v214 < v194
             || (v213 == 0x7FFFFFFF ? (uint64_t v217 = v194 >= v214) : (uint64_t v217 = 0),
                 v217 ? (unint64_t v218 = v190 == 0x7FFFFFFF) : (unint64_t v218 = 1),
                 !v218)))
          {
LABEL_397:
            uint64_t v172 = v188;
LABEL_398:
            *(_DWORD *)uint64_t v172 = v193;
            *(_DWORD *)(v172 + 4) = v194;
            *(_DWORD *)(v172 + 8) = v190;
            *(void *)(v172 + 25) = *(void *)&v313[13];
            *(_OWORD *)(v172 + 12) = *(_OWORD *)v313;
LABEL_399:
            uint64_t v171 = v173 - 1;
            if (v173) {
              continue;
            }
            int v223 = v12 / 0x28uLL;
            while (2)
            {
              uint64_t v225 = 0;
              uint64_t v325 = *(void *)(i + 32);
              uint64_t v314 = *(_OWORD *)i;
              uint64_t v320 = *(_OWORD *)(i + 16);
              uint64_t v226 = i;
LABEL_506:
              unsigned int v229 = v226;
              v226 += 40 * v225 + 40;
              uint64_t v230 = 2 * v225;
              uint64_t v225 = (2 * v225) | 1;
              uint64_t v231 = v230 + 2;
              if (v231 < v223)
              {
                int v232 = *(_DWORD *)(v226 + 8);
                int v233 = *(_DWORD *)(v226 + 48);
                if (v232 == 0x7FFFFFFF)
                {
                  int v234 = v233 != 0x7FFFFFFF;
                  uint64_t v235 = *(_DWORD *)v226;
                  uint64_t v236 = *(_DWORD *)(v226 + 40);
                  if (*(_DWORD *)v226 >= v236) {
                    goto LABEL_512;
                  }
                  goto LABEL_504;
                }
                if (v233 == 0x7FFFFFFF)
                {
                  int v234 = 0;
                  uint64_t v235 = *(_DWORD *)v226;
                  uint64_t v236 = *(_DWORD *)(v226 + 40);
                  if (*(_DWORD *)v226 < v236) {
                    goto LABEL_504;
                  }
LABEL_512:
                  if (v236 >= v235)
                  {
                    uint64_t v237 = *(_DWORD *)(v226 + 4);
                    uint64_t v238 = *(_DWORD *)(v226 + 44);
                    if (v237 < v238
                      || (v232 == 0x7FFFFFFF ? (uint64_t v239 = v234) : (uint64_t v239 = 0),
                          v238 >= v237 ? (uint64_t v240 = !v239) : (uint64_t v240 = 1),
                          !v240))
                    {
LABEL_504:
                      v226 += 40;
                      uint64_t v225 = v231;
                    }
                  }
                }
                else
                {
                  uint64_t v241 = *(_DWORD *)(v226 + 40);
                  if (*(_DWORD *)v226 < v241) {
                    goto LABEL_504;
                  }
                  if (v241 >= *(_DWORD *)v226)
                  {
                    uint64_t v242 = *(_DWORD *)(v226 + 4);
                    uint64_t v243 = *(_DWORD *)(v226 + 44);
                    if (v242 < v243) {
                      goto LABEL_504;
                    }
                    if (v232 < v233 && v243 >= v242) {
                      goto LABEL_504;
                    }
                  }
                }
              }
              uint64_t v227 = *(_OWORD *)v226;
              uint64_t v228 = *(_OWORD *)(v226 + 16);
              *(unsigned char *)(v229 + 32) = *(unsigned char *)(v226 + 32);
              *(_OWORD *)unsigned int v229 = v227;
              *(_OWORD *)(v229 + 16) = v228;
              if (v225 > (uint64_t)((unint64_t)(v223 - 2) >> 1))
              {
                a2 -= 40;
                if (v226 == a2)
                {
                  *(unsigned char *)(v226 + 32) = v325;
                  *(_OWORD *)uint64_t v226 = v314;
                  *(_OWORD *)(v226 + 16) = v320;
                }
                else
                {
                  uint64_t v245 = *(_OWORD *)a2;
                  uint64_t v246 = *(_OWORD *)(a2 + 16);
                  *(unsigned char *)(v226 + 32) = *(unsigned char *)(a2 + 32);
                  *(_OWORD *)uint64_t v226 = v245;
                  *(_OWORD *)(v226 + 16) = v246;
                  *(unsigned char *)(a2 + 32) = v325;
                  *(_OWORD *)a2 = v314;
                  *(_OWORD *)(a2 + 16) = v320;
                  uint64_t v247 = v226 - i + 40;
                  if (v247 >= 41)
                  {
                    uint64_t v248 = v247 / 0x28uLL - 2;
                    uint64_t v249 = v248 >> 1;
                    uint64_t v250 = i + 40 * (v248 >> 1);
                    uint64_t v251 = *(_DWORD *)(v250 + 8);
                    uint64_t v252 = *(_DWORD *)(v226 + 8);
                    if (v251 == 0x7FFFFFFF)
                    {
                      uint64_t v253 = v252 != 0x7FFFFFFF;
                      uint64_t v254 = *(_DWORD *)v250;
                      uint64_t v255 = *(_DWORD *)v226;
                      uint64_t v256 = *(_DWORD *)(v226 + 4);
                      if (*(_DWORD *)v250 < *(_DWORD *)v226) {
                        goto LABEL_555;
                      }
LABEL_538:
                      if (v255 >= v254)
                      {
                        uint64_t v257 = *(_DWORD *)(v250 + 4);
                        if (v257 < v256) {
                          goto LABEL_555;
                        }
                        if (v256 < v257) {
                          uint64_t v253 = 0;
                        }
                        if (v251 == 0x7FFFFFFF && v253) {
                          goto LABEL_555;
                        }
                      }
                    }
                    else
                    {
                      if (v252 == 0x7FFFFFFF)
                      {
                        uint64_t v253 = 0;
                        uint64_t v254 = *(_DWORD *)v250;
                        uint64_t v255 = *(_DWORD *)v226;
                        uint64_t v256 = *(_DWORD *)(v226 + 4);
                        if (*(_DWORD *)v250 < *(_DWORD *)v226) {
                          goto LABEL_555;
                        }
                        goto LABEL_538;
                      }
                      uint64_t v255 = *(_DWORD *)v226;
                      uint64_t v256 = *(_DWORD *)(v226 + 4);
                      if (*(_DWORD *)v250 < *(_DWORD *)v226
                        || v255 >= *(_DWORD *)v250
                        && ((uint64_t v259 = *(_DWORD *)(v250 + 4), v259 < v256)
                         || (v251 < v252 ? (uint64_t v260 = v256 >= v259) : (uint64_t v260 = 0), v260)))
                      {
LABEL_555:
                        *(_OWORD *)&v308[12] = *(_OWORD *)(v226 + 24);
                        *(_OWORD *)uint64_t v308 = *(_OWORD *)(v226 + 12);
                        uint64_t v261 = *(_OWORD *)v250;
                        uint64_t v262 = *(_OWORD *)(v250 + 16);
                        *(unsigned char *)(v226 + 32) = *(unsigned char *)(v250 + 32);
                        *(_OWORD *)uint64_t v226 = v261;
                        *(_OWORD *)(v226 + 16) = v262;
                        if (v248 >= 2)
                        {
                          if (v252 != 0x7FFFFFFF)
                          {
                            while (1)
                            {
                              uint64_t v270 = v249 - 1;
                              uint64_t v249 = (v249 - 1) >> 1;
                              uint64_t v263 = i + 40 * v249;
                              uint64_t v271 = *(_DWORD *)(v263 + 4);
                              uint64_t v272 = *(_DWORD *)(v263 + 8);
                              uint64_t v273 = *(_DWORD *)v263;
                              if (v272 == 0x7FFFFFFF)
                              {
                                if (v273 >= v255 && (v255 < v273 || v256 < v271)) {
                                  goto LABEL_556;
                                }
                              }
                              else if (v273 >= v255)
                              {
                                if (v255 < v273) {
                                  goto LABEL_556;
                                }
                                if (v271 >= v256 && (v272 >= v252 || v256 < v271)) {
                                  goto LABEL_556;
                                }
                              }
                              uint64_t v268 = *(_OWORD *)v263;
                              uint64_t v269 = *(_OWORD *)(v263 + 16);
                              *(unsigned char *)(v250 + 32) = *(unsigned char *)(v263 + 32);
                              *(_OWORD *)uint64_t v250 = v268;
                              *(_OWORD *)(v250 + 16) = v269;
                              uint64_t v250 = i + 40 * v249;
                              if (v270 < 2) {
                                goto LABEL_557;
                              }
                            }
                          }
                          while (1)
                          {
                            uint64_t v266 = v249 - 1;
                            uint64_t v249 = (v249 - 1) >> 1;
                            uint64_t v263 = i + 40 * v249;
                            if (*(_DWORD *)v263 >= v255 && (v255 < *(_DWORD *)v263 || *(_DWORD *)(v263 + 4) >= v256)) {
                              break;
                            }
                            uint64_t v264 = *(_OWORD *)v263;
                            uint64_t v265 = *(_OWORD *)(v263 + 16);
                            *(unsigned char *)(v250 + 32) = *(unsigned char *)(v263 + 32);
                            *(_OWORD *)uint64_t v250 = v264;
                            *(_OWORD *)(v250 + 16) = v265;
                            uint64_t v250 = i + 40 * v249;
                            if (v266 < 2) {
                              goto LABEL_557;
                            }
                          }
                        }
LABEL_556:
                        uint64_t v263 = v250;
LABEL_557:
                        *(_DWORD *)uint64_t v263 = v255;
                        *(_DWORD *)(v263 + 4) = v256;
                        *(_DWORD *)(v263 + 8) = v252;
                        *(void *)(v263 + 25) = *(void *)&v308[13];
                        *(_OWORD *)(v263 + 12) = *(_OWORD *)v308;
                      }
                    }
                  }
                }
                if (v223-- <= 2) {
                  return;
                }
                continue;
              }
              goto LABEL_506;
            }
          }
        }
        else
        {
          if (v215 < v193) {
            goto LABEL_397;
          }
          if (v193 >= v215)
          {
            if (v214 < v194) {
              goto LABEL_397;
            }
            if (v213 < v190 && v194 >= v214) {
              goto LABEL_397;
            }
          }
        }
        goto LABEL_448;
      }
    }
    uint64_t v14 = v13 >> 1;
    unint64_t v15 = i + 40 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x1401)
    {
      sub_99E088((unsigned int *)a1, (unsigned int *)(a1 + 40 * (v13 >> 1)), (unsigned int *)(a2 - 40));
      uint64_t v16 = 40 * v14;
      unint64_t v17 = (unsigned int *)(40 * v14 + a1 - 40);
      sub_99E088((unsigned int *)(a1 + 40), v17, (unsigned int *)(a2 - 80));
      unint64_t v18 = (unsigned int *)(a1 + 40 + v16);
      sub_99E088((unsigned int *)(a1 + 80), v18, (unsigned int *)(a2 - 120));
      sub_99E088(v17, (unsigned int *)v15, v18);
      uint64_t v322 = *(void *)(a1 + 32);
      uint64_t v309 = *(_OWORD *)a1;
      uint64_t v317 = *(_OWORD *)(a1 + 16);
      unint64_t v19 = *(_OWORD *)v15;
      uint64_t v20 = *(_OWORD *)(v15 + 16);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(v15 + 32);
      *(_OWORD *)a1 = v19;
      *(_OWORD *)(a1 + 16) = v20;
      *(unsigned char *)(v15 + 32) = v322;
      *(_OWORD *)unint64_t v15 = v309;
      *(_OWORD *)(v15 + 16) = v317;
      --a3;
      if (a4) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_99E088((unsigned int *)(a1 + 40 * (v13 >> 1)), (unsigned int *)a1, (unsigned int *)(a2 - 40));
      --a3;
      if (a4)
      {
LABEL_13:
        char v25 = *(_DWORD *)a1;
        BOOL v26 = *(_DWORD *)(a1 + 4);
        uint64_t v22 = *(_DWORD *)(a1 + 8);
        goto LABEL_14;
      }
    }
    double v21 = *(_DWORD *)(a1 - 32);
    uint64_t v22 = *(_DWORD *)(a1 + 8);
    if (v21 == 0x7FFFFFFF)
    {
      unint64_t v23 = v22 != 0x7FFFFFFF;
      uint64_t v24 = *(_DWORD *)(a1 - 40);
      char v25 = *(_DWORD *)a1;
      BOOL v26 = *(_DWORD *)(a1 + 4);
      if (v24 >= *(_DWORD *)a1) {
        goto LABEL_138;
      }
LABEL_14:
      *(_OWORD *)&v306[12] = *(_OWORD *)(a1 + 24);
      *(_OWORD *)uint64_t v306 = *(_OWORD *)(a1 + 12);
      unint64_t v27 = (unsigned int *)(a1 + 40);
      if (v22 != 0x7FFFFFFF)
      {
        while (1)
        {
          unint64_t v35 = v27[1];
          unint64_t v36 = v27[2];
          double v37 = *v27;
          if (v36 == 0x7FFFFFFF)
          {
            if (v37 >= v25 && (v25 < v37 || v26 < v35)) {
              goto LABEL_23;
            }
          }
          else if (v37 >= v25 && (v25 < v37 || v35 >= v26 && (v36 >= v22 || v26 < v35)))
          {
            goto LABEL_23;
          }
          v27 += 10;
        }
      }
      while (*v27 < v25 || v25 >= *v27 && v27[1] < v26)
        v27 += 10;
LABEL_23:
      if (v27 - 10 == (unsigned int *)a1)
      {
        unint64_t v31 = (unsigned int *)a2;
        if ((unint64_t)v27 >= a2) {
          goto LABEL_91;
        }
        uint64_t v44 = (unsigned int *)(a2 - 40);
        while (1)
        {
          while (1)
          {
            unint64_t v31 = v44;
            unint64_t v46 = v44[1];
            uint64_t v45 = v44[2];
            double v48 = *v44;
            v44 -= 10;
            unint64_t v47 = v48;
            if (v22 == 0x7FFFFFFF || v45 == 0x7FFFFFFF) {
              break;
            }
            if (v47 < v25) {
              goto LABEL_91;
            }
            if (v25 < v47) {
              goto LABEL_62;
            }
            if (v46 >= v26)
            {
              double v49 = v45 < v22 && v26 >= v46;
              double v50 = !v49;
              if (v27 < v31 && v50) {
                continue;
              }
            }
            goto LABEL_91;
          }
          if (v47 < v25) {
            goto LABEL_91;
          }
          if (v25 < v47)
          {
LABEL_62:
            if (v27 >= v31) {
              goto LABEL_91;
            }
            continue;
          }
          if (v46 >= v26)
          {
            float64x2_t v51 = v22 != 0x7FFFFFFF && v26 >= v46;
            uint64_t v52 = v51 && v45 == 0x7FFFFFFF;
            double v53 = v52;
            if (v27 < v31 && !v53) {
              continue;
            }
          }
          goto LABEL_91;
        }
      }
      double v29 = (unsigned int *)(a2 - 40);
      if (v22 == 0x7FFFFFFF)
      {
        double v30 = (unsigned int *)(a2 - 40);
        do
        {
          unint64_t v31 = v30;
          unint64_t v32 = *v30;
          if (*v30 < v25) {
            break;
          }
          double v33 = v30[1];
          v30 -= 10;
        }
        while (v25 < v32 || v33 >= v26);
      }
      else
      {
        do
        {
          while (1)
          {
            unint64_t v31 = v29;
            double v39 = v29[1];
            double v40 = v29[2];
            unint64_t v42 = *v29;
            v29 -= 10;
            float64x2_t v41 = v42;
            if (v40 == 0x7FFFFFFF) {
              break;
            }
            if (v41 < v25 || v25 >= v41 && (v39 < v26 || v40 < v22 && v26 >= v39)) {
              goto LABEL_91;
            }
          }
          if (v41 < v25) {
            break;
          }
        }
        while (v25 < v41 || v26 < v39);
      }
LABEL_91:
      double i = (unint64_t)v27;
      if (v27 < v31)
      {
        double i = (unint64_t)v27;
        long long v54 = v31;
        do
        {
          uint64_t v323 = *(void *)(i + 32);
          uint64_t v310 = *(_OWORD *)i;
          uint64_t v318 = *(_OWORD *)(i + 16);
          unint64_t v55 = *(_OWORD *)v54;
          unint64_t v56 = *((_OWORD *)v54 + 1);
          *(unsigned char *)(i + 32) = *((unsigned char *)v54 + 32);
          *(_OWORD *)double i = v55;
          *(_OWORD *)(i + 16) = v56;
          *((unsigned char *)v54 + 32) = v323;
          *(_OWORD *)long long v54 = v310;
          *((_OWORD *)v54 + 1) = v318;
          if (v22 == 0x7FFFFFFF)
          {
            do
            {
              do
              {
                float64x2_t v58 = *(_DWORD *)(i + 40);
                i += 40;
                unint64_t v57 = v58;
              }
              while (v58 < v25);
            }
            while (v25 >= v57 && *(_DWORD *)(i + 4) < v26);
          }
          else
          {
            unint64_t v65 = (unsigned int *)(i + 40);
            do
            {
              while (1)
              {
                double i = (unint64_t)v65;
                double v66 = v65[1];
                double v67 = v65[2];
                double v69 = *v65;
                v65 += 10;
                int v68 = v69;
                if (v67 == 0x7FFFFFFF) {
                  break;
                }
                if (v68 >= v25 && (v25 < v68 || v66 >= v26 && (v67 >= v22 || v26 < v66))) {
                  goto LABEL_101;
                }
              }
            }
            while (v68 < v25 || v25 >= v68 && v26 >= v66);
          }
LABEL_101:
          unint64_t v60 = v54 - 10;
          while (1)
          {
            do
            {
              while (1)
              {
                long long v54 = v60;
                int v61 = v60[1];
                double v62 = v60[2];
                unint64_t v64 = *v60;
                v60 -= 10;
                float64_t v63 = v64;
                if (v22 == 0x7FFFFFFF || v62 == 0x7FFFFFFF) {
                  break;
                }
                if (v63 < v25) {
                  goto LABEL_93;
                }
                if (v25 >= v63)
                {
                  if (v61 < v26) {
                    goto LABEL_93;
                  }
                  if (v62 < v22)
                  {
LABEL_102:
                    if (v26 >= v61) {
                      goto LABEL_93;
                    }
                  }
                }
              }
              if (v63 < v25) {
                goto LABEL_93;
              }
            }
            while (v25 < v63);
            if (v61 < v26) {
              break;
            }
            if (v62 == 0x7FFFFFFF && v22 != 0x7FFFFFFF) {
              goto LABEL_102;
            }
          }
LABEL_93:
          ;
        }
        while (i < (unint64_t)v54);
      }
      if (i - 40 != a1)
      {
        uint64_t v71 = *(_OWORD *)(i - 40);
        uint64_t v72 = *(_OWORD *)(i - 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(i - 8);
        *(_OWORD *)a1 = v71;
        *(_OWORD *)(a1 + 16) = v72;
      }
      *(_DWORD *)(i - 40) = v25;
      *(_DWORD *)(i - 36) = v26;
      *(_DWORD *)(i - 32) = v22;
      float64x2_t v73 = *(__n128 *)v306;
      *(void *)(i - 15) = *(void *)&v306[13];
      *(_OWORD *)(i - 28) = *(_OWORD *)v306;
      if (v27 < v31)
      {
LABEL_135:
        sub_99C5C8(a1, i - 40, a3, a4 & 1, v73);
        a4 = 0;
      }
      else
      {
        sub_99E4C4(a1, i - 40);
        double v75 = v74;
        float64x2_t v73 = sub_99E4C4(i, a2);
        if (v76)
        {
          a2 = i - 40;
          if (v75) {
            return;
          }
          goto LABEL_1;
        }
        if ((v75 & 1) == 0) {
          goto LABEL_135;
        }
      }
    }
    else
    {
      if (v22 != 0x7FFFFFFF)
      {
        double v82 = *(_DWORD *)(a1 - 40);
        char v25 = *(_DWORD *)a1;
        BOOL v26 = *(_DWORD *)(a1 + 4);
        if (v82 < *(_DWORD *)a1) {
          goto LABEL_14;
        }
        if (v25 >= v82)
        {
          double v83 = *(_DWORD *)(a1 - 36);
          if (v83 < v26 || v21 < v22 && v26 >= v83) {
            goto LABEL_14;
          }
        }
        *(_OWORD *)&v307[12] = *(_OWORD *)(a1 + 24);
        *(_OWORD *)uint64_t v307 = *(_OWORD *)(a1 + 12);
        float64x2_t v79 = *(_DWORD *)(a2 - 32);
        goto LABEL_153;
      }
      unint64_t v23 = 0;
      uint64_t v24 = *(_DWORD *)(a1 - 40);
      char v25 = *(_DWORD *)a1;
      BOOL v26 = *(_DWORD *)(a1 + 4);
      if (v24 < *(_DWORD *)a1) {
        goto LABEL_14;
      }
LABEL_138:
      if (v25 >= v24)
      {
        long long v77 = *(_DWORD *)(a1 - 36);
        if (v77 < v26) {
          goto LABEL_14;
        }
        float64x2_t v78 = v21 == 0x7FFFFFFF && v23;
        if (v26 >= v77 && v78) {
          goto LABEL_14;
        }
      }
      *(_OWORD *)&v307[12] = *(_OWORD *)(a1 + 24);
      *(_OWORD *)uint64_t v307 = *(_OWORD *)(a1 + 12);
      float64x2_t v79 = *(_DWORD *)(a2 - 32);
      if (v22 == 0x7FFFFFFF)
      {
        float64x2_t v80 = v79 != 0x7FFFFFFF;
        float64x2_t v81 = 1;
        goto LABEL_155;
      }
LABEL_153:
      if (v79 != 0x7FFFFFFF)
      {
        double v84 = *(_DWORD *)(a2 - 40);
        if (v25 < v84) {
          goto LABEL_172;
        }
        if (v84 >= v25)
        {
          int v132 = *(_DWORD *)(a2 - 36);
          if (v26 < v132 || (LOBYTE(v81) = 0, v22 < v79) && v132 >= v26)
          {
LABEL_172:
            for (double i = a1 + 40; ; i += 40)
            {
              int v91 = *(_DWORD *)(i + 8);
              if (v91 == 0x7FFFFFFF)
              {
                if (v25 < *(_DWORD *)i || (*(_DWORD *)i >= v25 ? (float64x2_t v92 = v26 >= *(_DWORD *)(i + 4)) : (float64x2_t v92 = 1), !v92))
                {
LABEL_186:
                  LOBYTE(v81) = 0;
                  goto LABEL_217;
                }
              }
              else
              {
                if (v25 < *(_DWORD *)i) {
                  goto LABEL_186;
                }
                if (*(_DWORD *)i >= v25)
                {
                  long long v93 = *(_DWORD *)(i + 4);
                  if (v26 < v93 || v22 < v91 && v93 >= v26) {
                    goto LABEL_186;
                  }
                }
              }
            }
          }
        }
        else
        {
          LOBYTE(v81) = 0;
        }
        goto LABEL_189;
      }
      float64x2_t v81 = 0;
      float64x2_t v80 = 0;
      float64x2_t v79 = 0x7FFFFFFF;
LABEL_155:
      double v84 = *(_DWORD *)(a2 - 40);
      if (v25 < v84) {
        goto LABEL_158;
      }
      if (v84 >= v25)
      {
        BOOL v85 = *(_DWORD *)(a2 - 36);
        if (v26 < v85)
        {
LABEL_158:
          if ((v81 & 1) == 0) {
            goto LABEL_172;
          }
LABEL_159:
          double i = a1;
          while (1)
          {
            double v87 = *(_DWORD *)(i + 40);
            i += 40;
            double v86 = v87;
            if (v25 < v87) {
              break;
            }
            if (v86 >= v25)
            {
              long long v88 = *(_DWORD *)(i + 4);
              BOOL v89 = v88 < v26 || *(_DWORD *)(i + 8) == 0x7FFFFFFF;
              unsigned int v90 = !v89;
              if (v26 < v88 || v90) {
                break;
              }
            }
          }
          goto LABEL_217;
        }
        if (v85 >= v26 && (v81 & v80 & 1) != 0) {
          goto LABEL_159;
        }
      }
LABEL_189:
      double i = a1 + 40;
      if (a1 + 40 < a2)
      {
        if ((v81 & 1) == 0)
        {
          while (1)
          {
            uint64_t v97 = *(_DWORD *)(i + 8);
            if (v97 == 0x7FFFFFFF)
            {
              if (v25 < *(_DWORD *)i) {
                goto LABEL_217;
              }
              if (*(_DWORD *)i >= v25 && v26 < *(_DWORD *)(i + 4)) {
                goto LABEL_217;
              }
            }
            else
            {
              if (v25 < *(_DWORD *)i) {
                goto LABEL_217;
              }
              if (*(_DWORD *)i >= v25)
              {
                double v99 = *(_DWORD *)(i + 4);
                if (v26 < v99 || v22 < v97 && v99 >= v26) {
                  goto LABEL_217;
                }
              }
            }
            i += 40;
            if (i >= a2) {
              goto LABEL_217;
            }
          }
        }
        do
        {
          if (v25 < *(_DWORD *)i) {
            break;
          }
          if (*(_DWORD *)i >= v25)
          {
            unsigned __int8 v94 = *(_DWORD *)(i + 4);
            uint64_t v95 = v94 < v26 || *(_DWORD *)(i + 8) == 0x7FFFFFFF;
            uint64_t v96 = !v95;
            if (v26 < v94 || v96) {
              break;
            }
          }
          i += 40;
        }
        while (i < a2);
      }
LABEL_217:
      unint64_t k = (unsigned int *)a2;
      if (i >= a2) {
        goto LABEL_303;
      }
      if ((v81 & 1) == 0)
      {
        for (unint64_t j = (unsigned int *)(a2 - 36); ; j -= 10)
        {
          if (v79 == 0x7FFFFFFF)
          {
            unsigned int v107 = *(j - 1);
            if (v25 >= v107 && (v107 < v25 || v26 >= *j))
            {
LABEL_250:
              unint64_t k = j - 1;
              goto LABEL_303;
            }
          }
          else
          {
            uint64_t v109 = *(j - 1);
            if (v25 >= v109 && (v109 < v25 || v26 >= *j && (v22 >= v79 || *j < v26))) {
              goto LABEL_250;
            }
          }
          float64x2_t v79 = *(j - 9);
        }
      }
      for (k = (unsigned int *)(a2 - 40); ; float64x2_t v79 = k[2])
      {
        if (v25 >= v84)
        {
          if (v84 < v25) {
            break;
          }
          unsigned int v102 = k[1];
          unsigned int v103 = v102 < v26 || v79 == 0x7FFFFFFF;
          int v104 = !v103;
          if (v26 >= v102 && !v104) {
            break;
          }
        }
        char v101 = *(k - 10);
        k -= 10;
        double v84 = v101;
      }
LABEL_303:
      while (i < (unint64_t)k)
      {
        uint64_t v324 = *(void *)(i + 32);
        uint64_t v311 = *(_OWORD *)i;
        uint64_t v319 = *(_OWORD *)(i + 16);
        long double v110 = *(_OWORD *)k;
        long double v111 = *((_OWORD *)k + 1);
        *(unsigned char *)(i + 32) = *((unsigned char *)k + 32);
        *(_OWORD *)double i = v110;
        *(_OWORD *)(i + 16) = v111;
        *((unsigned char *)k + 32) = v324;
        *(_OWORD *)unint64_t k = v311;
        *((_OWORD *)k + 1) = v319;
        if (v81)
        {
          uint64_t v113 = *(_DWORD *)(i + 40);
          i += 40;
          uint64x2_t v112 = v113;
          if (v25 >= v113)
          {
            do
            {
              if (v112 >= v25)
              {
                unsigned int v118 = *(_DWORD *)(i + 4);
                unsigned int v119 = v118 < v26 || *(_DWORD *)(i + 8) == 0x7FFFFFFF;
                unsigned int v120 = !v119;
                if (v26 < v118 || v120) {
                  break;
                }
              }
              int v117 = *(_DWORD *)(i + 40);
              i += 40;
              uint64x2_t v112 = v117;
            }
            while (v25 >= v117);
LABEL_277:
            if ((v81 & 1) == 0) {
              goto LABEL_290;
            }
          }
          int v121 = k - 10;
          do
          {
            do
            {
              unint64_t k = v121;
              long double v123 = *v121;
              v121 -= 10;
              uint64_t v122 = v123;
            }
            while (v25 < v123);
            if (v122 < v25) {
              break;
            }
            uint64_t v124 = k[1];
            uint64x2_t v125 = v124 < v26 || k[2] == 0x7FFFFFFF;
            uint64_t v126 = !v125;
          }
          while (v26 < v124 || v126);
        }
        else
        {
          while (1)
          {
            while (1)
            {
              i += 40;
              uint64_t v114 = *(_DWORD *)(i + 8);
              if (v114 != 0x7FFFFFFF) {
                break;
              }
              if (v25 >= *(_DWORD *)i && (*(_DWORD *)i < v25 || v26 >= *(_DWORD *)(i + 4))) {
                continue;
              }
              goto LABEL_277;
            }
            if (v25 < *(_DWORD *)i) {
              goto LABEL_277;
            }
            if (*(_DWORD *)i >= v25)
            {
              unsigned int v116 = *(_DWORD *)(i + 4);
              if (v26 < v116) {
                goto LABEL_277;
              }
              if (v22 < v114 && v116 >= v26) {
                break;
              }
            }
          }
          do
          {
LABEL_290:
            while (1)
            {
              k -= 10;
              long double v127 = k[2];
              if (v127 == 0x7FFFFFFF) {
                break;
              }
              if (v25 >= *k)
              {
                if (*k < v25) {
                  goto LABEL_303;
                }
                unsigned int v129 = k[1];
                if (v26 >= v129 && (v22 >= v127 || v129 < v26)) {
                  goto LABEL_303;
                }
              }
            }
          }
          while (v25 < *k || *k >= v25 && v26 < k[1]);
        }
      }
      unint64_t v4 = i - 40 >= a1;
      char v5 = i - 40 == a1;
      if (i - 40 != a1)
      {
        int v130 = *(_OWORD *)(i - 40);
        int v131 = *(_OWORD *)(i - 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(i - 8);
        *(_OWORD *)a1 = v130;
        *(_OWORD *)(a1 + 16) = v131;
      }
      a4 = 0;
      *(_DWORD *)(i - 40) = v25;
      *(_DWORD *)(i - 36) = v26;
      *(_DWORD *)(i - 32) = v22;
      *(void *)(i - 15) = *(void *)&v307[13];
      *(_OWORD *)(i - 28) = *(_OWORD *)v307;
    }
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      uint64_t v133 = *(_DWORD *)(a2 - 32);
      long double v134 = *(_DWORD *)(i + 8);
      if (v133 == 0x7FFFFFFF)
      {
        double v135 = v134 != 0x7FFFFFFF;
        long double v136 = *(_DWORD *)(a2 - 40);
        unsigned int v137 = *(_DWORD *)i;
        if (v136 < *(_DWORD *)i) {
          goto LABEL_643;
        }
LABEL_586:
        if (v137 >= v136)
        {
          uint64_t v276 = *(_DWORD *)(a2 - 36);
          uint64_t v277 = *(_DWORD *)(i + 4);
          if (v276 < v277) {
            goto LABEL_643;
          }
          uint64_t v278 = v133 == 0x7FFFFFFF && v135;
          if (v277 >= v276 && v278) {
            goto LABEL_643;
          }
        }
        return;
      }
      if (v134 == 0x7FFFFFFF)
      {
        double v135 = 0;
        long double v136 = *(_DWORD *)(a2 - 40);
        unsigned int v137 = *(_DWORD *)i;
        if (v136 < *(_DWORD *)i)
        {
LABEL_643:
          uint64_t v326 = *(void *)(i + 32);
          uint64_t v316 = *(_OWORD *)i;
          uint64_t v321 = *(_OWORD *)(i + 16);
          uint64_t v302 = *v10;
          uint64_t v303 = *(_OWORD *)(a2 - 24);
          *(unsigned char *)(i + 32) = *(unsigned char *)(a2 - 8);
          *(_OWORD *)double i = v302;
          *(_OWORD *)(i + 16) = v303;
          *(unsigned char *)(a2 - 8) = v326;
          *uint64_t v10 = v316;
          *(_OWORD *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v321;
          return;
        }
        goto LABEL_586;
      }
      uint64_t v301 = *(_DWORD *)(a2 - 40);
      if (v301 < *(_DWORD *)i) {
        goto LABEL_643;
      }
      if (*(_DWORD *)i >= v301)
      {
        uint64_t v304 = *(_DWORD *)(a2 - 36);
        uint64_t v305 = *(_DWORD *)(i + 4);
        if (v304 < v305 || v133 < v134 && v305 >= v304) {
          goto LABEL_643;
        }
      }
      break;
    case 3uLL:
      sub_99E088((unsigned int *)i, (unsigned int *)(i + 40), (unsigned int *)(a2 - 40));
      return;
    case 4uLL:
      sub_99E928(i, i + 40, i + 80, a2 - 40);
      return;
    case 5uLL:
      sub_99DCB8(i, i + 40, i + 80, i + 120, (unsigned int *)(a2 - 40));
      return;
    default:
      JUMPOUT(0);
  }
}

  uint64_t v197 = (_OWORD *)(a2 - 72);
  int64_t v7 = a1;
  while (1)
  {
    a1 = v7;
    unint64_t v8 = a2 - v7;
    unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v7) >> 3);
    if (v5 || !v4)
    {
      switch(v9)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sub_9AF584((uint64_t)v197, v7))
          {
            uint64_t v96 = *(_OWORD *)(v7 + 16);
            *(_OWORD *)uint64_t v225 = *(_OWORD *)v7;
            *(_OWORD *)&v225[16] = v96;
            uint64_t v97 = *(_DWORD *)(v7 + 32);
            double v98 = *(void *)(v7 + 40);
            *(void *)int v233 = *(void *)(v7 + 48);
            *(void *)&v233[7] = *(void *)(v7 + 55);
            double v99 = *(unsigned char *)(v7 + 63);
            *(void *)(v7 + 48) = 0;
            *(void *)(v7 + 56) = 0;
            *(void *)(v7 + 40) = 0;
            uint64_t v100 = *(_DWORD *)(v7 + 64);
            char v101 = *(_OWORD *)(a2 - 56);
            *(_OWORD *)int64_t v7 = *v197;
            *(_OWORD *)(v7 + 16) = v101;
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(a2 - 40);
            unsigned int v102 = *(_OWORD *)(a2 - 32);
            *(void *)(v7 + 56) = *(void *)(a2 - 16);
            *(_OWORD *)(v7 + 40) = v102;
            *(unsigned char *)(a2 - 9) = 0;
            *(unsigned char *)(a2 - 32) = 0;
            *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 - 8);
            unsigned int v103 = *(_OWORD *)&v225[16];
            *uint64_t v197 = *(_OWORD *)v225;
            *(_OWORD *)(a2 - 56) = v103;
            *(_DWORD *)(a2 - 40) = v97;
            if (*(char *)(a2 - 9) < 0) {
              operator delete(*(void **)(a2 - 32));
            }
            *(void *)(a2 - 32) = v98;
            int v104 = *(void *)v233;
            *(void *)(a2 - 17) = *(void *)&v233[7];
            *(void *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v104;
            *(unsigned char *)(a2 - 9) = v99;
            *(_DWORD *)(a2 - 8) = v100;
          }
          break;
        case 3:
          sub_9AF9F8(v7, v7 + 72, (uint64_t)v197);
          break;
        case 4:
          sub_9B0140(v7, v7 + 72, v7 + 144, (uint64_t)v197);
          break;
        case 5:
          sub_9AF6A8(v7, v7 + 72, v7 + 144, v7 + 216, (uint64_t)v197);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v8 <= 1727) {
      break;
    }
    if (!a3)
    {
      if (v7 == a2) {
        return;
      }
      unsigned int v129 = (unint64_t)(v9 - 2) >> 1;
      int v130 = v129;
      do
      {
        int v132 = v130;
        if (v129 >= v130)
        {
          uint64_t v133 = (2 * v130) | 1;
          long double v134 = a1 + 72 * v133;
          if (2 * v130 + 2 < v9 && sub_9AF584(a1 + 72 * v133, v134 + 72))
          {
            v134 += 72;
            uint64_t v133 = 2 * v132 + 2;
          }
          double v135 = a1 + 72 * v132;
          if (!sub_9AF584(v134, v135))
          {
            long double v136 = *(_OWORD *)(v135 + 16);
            *(_OWORD *)uint64_t v225 = *(_OWORD *)v135;
            *(_OWORD *)&v225[16] = v136;
            unsigned int v137 = a1 + 72 * v132;
            uint64_t v226 = *(_DWORD *)(v137 + 32);
            unsigned int v138 = *(_OWORD *)(v137 + 40);
            uint64_t v228 = *(void *)(v137 + 56);
            std::string __p = v138;
            *(void *)(v137 + 48) = 0;
            *(void *)(v137 + 56) = 0;
            *(void *)(v137 + 40) = 0;
            unsigned int v229 = *(_DWORD *)(v137 + 64);
            do
            {
              int v139 = v134;
              int v140 = *(_OWORD *)(v134 + 16);
              *(_OWORD *)double v135 = *(_OWORD *)v134;
              *(_OWORD *)(v135 + 16) = v140;
              *(_DWORD *)(v135 + 32) = *(_DWORD *)(v134 + 32);
              uint64_t v141 = (void **)(v135 + 40);
              if (*(char *)(v135 + 63) < 0) {
                operator delete(*v141);
              }
              uint64_t v142 = *(_OWORD *)(v134 + 40);
              *(void *)(v135 + 56) = *(void *)(v134 + 56);
              *(_OWORD *)uint64_t v141 = v142;
              *(unsigned char *)(v134 + 63) = 0;
              *(unsigned char *)(v134 + 40) = 0;
              *(_DWORD *)(v135 + 64) = *(_DWORD *)(v134 + 64);
              if (v129 < v133) {
                break;
              }
              int v143 = (2 * v133) | 1;
              long double v134 = a1 + 72 * v143;
              uint64_t v133 = 2 * v133 + 2;
              if (v133 < v9)
              {
                if (sub_9AF584(a1 + 72 * v143, v134 + 72)) {
                  v134 += 72;
                }
                else {
                  uint64_t v133 = v143;
                }
              }
              else
              {
                uint64_t v133 = v143;
              }
              double v135 = v139;
            }
            while (!sub_9AF584(v134, (uint64_t)v225));
            unsigned int v144 = (void **)(v139 + 40);
            unsigned int v145 = *(_OWORD *)&v225[16];
            *(_OWORD *)int v139 = *(_OWORD *)v225;
            *(_OWORD *)(v139 + 16) = v145;
            *(_DWORD *)(v139 + 32) = v226;
            if (*(char *)(v139 + 63) < 0) {
              operator delete(*v144);
            }
            int v131 = __p;
            *(void *)(v139 + 56) = v228;
            *(_OWORD *)unsigned int v144 = v131;
            *(_DWORD *)(v139 + 64) = v229;
          }
        }
        int v130 = v132 - 1;
      }
      while (v132);
      long double v146 = v8 / 0x48uLL;
      while (1)
      {
        BOOL v148 = 0;
        unint64_t v205 = a2;
        long long v221 = *(_OWORD *)a1;
        int v223 = *(_OWORD *)(a1 + 16);
        uint64_t v199 = *(_DWORD *)(a1 + 32);
        int v210 = *(void *)(a1 + 40);
        v230[0] = *(void *)(a1 + 48);
        *(void *)((char *)v230 + 7) = *(void *)(a1 + 55);
        __srcc = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        double v149 = a1;
        uint64_t v202 = *(_DWORD *)(a1 + 64);
        do
        {
          unint64_t v154 = v148 + 1;
          double v150 = v149 + 72 * (v148 + 1);
          unint64_t v155 = 2 * v148;
          BOOL v148 = (2 * v148) | 1;
          double v156 = v155 + 2;
          if (v155 + 2 >= v146) {
            goto LABEL_183;
          }
          uint64_t v157 = v149 + 72 * v154;
          *(_DWORD *)uint64_t v225 = *(_DWORD *)(v157 + 32);
          double v158 = (long long *)(v157 + 40);
          if (*(char *)(v150 + 63) < 0)
          {
            sub_4200(&v225[8], *(void **)v158, *(void *)(v149 + 72 * v154 + 48));
          }
          else
          {
            double v159 = *v158;
            *(void *)&v225[24] = *((void *)v158 + 2);
            *(_OWORD *)&v225[8] = v159;
          }
          uint64_t v226 = *(_DWORD *)(v149 + 72 * v154 + 64);
          uint64_t v160 = *(_DWORD *)(v150 + 104);
          *(_DWORD *)int v233 = v160;
          if (*(char *)(v150 + 135) < 0)
          {
            sub_4200(&v233[8], *(void **)(v150 + 112), *(void *)(v150 + 120));
            uint64_t v160 = *(_DWORD *)v233;
            int v234 = *(_DWORD *)(v150 + 136);
            uint64_t v162 = *(_DWORD *)v225;
            if ((v233[31] & 0x80000000) == 0)
            {
LABEL_194:
              if ((v225[31] & 0x80000000) == 0) {
                goto LABEL_181;
              }
              goto LABEL_195;
            }
          }
          else
          {
            int v161 = *(_OWORD *)(v150 + 112);
            *(void *)&v233[24] = *(void *)(v150 + 128);
            *(_OWORD *)&v233[8] = v161;
            int v234 = *(_DWORD *)(v150 + 136);
            uint64_t v162 = *(_DWORD *)v225;
            if ((v233[31] & 0x80000000) == 0) {
              goto LABEL_194;
            }
          }
          operator delete(*(void **)&v233[8]);
          if ((v225[31] & 0x80000000) == 0) {
            goto LABEL_181;
          }
LABEL_195:
          operator delete(*(void **)&v225[8]);
LABEL_181:
          v150 += 72 * (v162 < v160);
          if (v162 < v160) {
            BOOL v148 = v156;
          }
LABEL_183:
          BOOL v151 = *(_OWORD *)(v150 + 16);
          *(_OWORD *)double v149 = *(_OWORD *)v150;
          *(_OWORD *)(v149 + 16) = v151;
          *(_DWORD *)(v149 + 32) = *(_DWORD *)(v150 + 32);
          int v152 = (void **)(v149 + 40);
          if (*(char *)(v149 + 63) < 0) {
            operator delete(*v152);
          }
          uint64_t v153 = *(_OWORD *)(v150 + 40);
          *(void *)(v149 + 56) = *(void *)(v150 + 56);
          *(_OWORD *)int v152 = v153;
          *(unsigned char *)(v150 + 63) = 0;
          *(unsigned char *)(v150 + 40) = 0;
          *(_DWORD *)(v149 + 64) = *(_DWORD *)(v150 + 64);
          double v149 = v150;
        }
        while (v148 <= (uint64_t)((unint64_t)(v146 - 2) >> 1));
        uint64_t v163 = (void **)(v150 + 40);
        unint64_t v164 = (_OWORD *)(a2 - 72);
        a2 -= 72;
        if (v150 == v205 - 72)
        {
          *(_OWORD *)double v150 = v221;
          *(_OWORD *)(v150 + 16) = v223;
          *(_DWORD *)(v150 + 32) = v199;
          if (*(char *)(v150 + 63) < 0) {
            operator delete(*v163);
          }
          *(void *)(v150 + 40) = v210;
          *(void *)(v150 + 48) = v230[0];
          *(void *)(v150 + 55) = *(void *)((char *)v230 + 7);
          *(unsigned char *)(v150 + 63) = __srcc;
          *(_DWORD *)(v150 + 64) = v202;
        }
        else
        {
          unint64_t v165 = *(_OWORD *)(v205 - 56);
          *(_OWORD *)double v150 = *v164;
          *(_OWORD *)(v150 + 16) = v165;
          *(_DWORD *)(v150 + 32) = *(_DWORD *)(v205 - 40);
          if (*(char *)(v150 + 63) < 0) {
            operator delete(*v163);
          }
          uint64_t v166 = *(_OWORD *)(v205 - 32);
          *(void *)(v150 + 56) = *(void *)(v205 - 16);
          *(_OWORD *)uint64_t v163 = v166;
          *(unsigned char *)(v205 - 9) = 0;
          *(unsigned char *)(v205 - 32) = 0;
          *(_DWORD *)(v150 + 64) = *(_DWORD *)(v205 - 8);
          *unint64_t v164 = v221;
          v164[1] = v223;
          *(_DWORD *)(v205 - 40) = v199;
          if (*(char *)(v205 - 9) < 0) {
            operator delete(*(void **)(v205 - 32));
          }
          *(void *)(v205 - 32) = v210;
          uint64_t v167 = v230[0];
          *(void *)(v205 - 17) = *(void *)((char *)v230 + 7);
          *(void *)(v205 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v167;
          *(unsigned char *)(v205 - 9) = __srcc;
          *(_DWORD *)(v205 - 8) = v202;
          uint64_t v168 = v150 + 72 - a1;
          if (v168 >= 73)
          {
            uint64_t v169 = (v168 / 0x48uLL - 2) >> 1;
            int v170 = a1 + 72 * v169;
            if (sub_9AF584(v170, v150))
            {
              uint64_t v171 = *(_OWORD *)(v150 + 16);
              *(_OWORD *)uint64_t v231 = *(_OWORD *)v150;
              *(_OWORD *)&v231[16] = v171;
              uint64_t v172 = *(_DWORD *)(v150 + 32);
              uint64_t v203 = *(void *)(v150 + 48);
              uint64_t v206 = *(void **)(v150 + 40);
              *(_DWORD *)&v224[3] = *(_DWORD *)(v150 + 59);
              *(_DWORD *)uint64_t v224 = *(_DWORD *)(v150 + 56);
              __srcd = *(char *)(v150 + 63);
              *uint64_t v163 = 0;
              *(void *)(v150 + 48) = 0;
              *(void *)(v150 + 56) = 0;
              uint64_t v200 = *(_DWORD *)(v150 + 64);
              uint64_t v211 = v172;
              while (1)
              {
                while (1)
                {
                  uint64_t v173 = v170;
                  uint64_t v174 = *(_OWORD *)(v170 + 16);
                  *(_OWORD *)double v150 = *(_OWORD *)v170;
                  *(_OWORD *)(v150 + 16) = v174;
                  *(_DWORD *)(v150 + 32) = *(_DWORD *)(v170 + 32);
                  uint64_t v175 = (void **)(v150 + 40);
                  if (*(char *)(v150 + 63) < 0) {
                    operator delete(*v175);
                  }
                  unint64_t v176 = *(_OWORD *)(v170 + 40);
                  *(void *)(v150 + 56) = *(void *)(v170 + 56);
                  *(_OWORD *)uint64_t v175 = v176;
                  *(unsigned char *)(v170 + 63) = 0;
                  *(unsigned char *)(v170 + 40) = 0;
                  *(_DWORD *)(v150 + 64) = *(_DWORD *)(v170 + 64);
                  if (!v169)
                  {
LABEL_220:
                    uint64_t v180 = *(_OWORD *)&v231[16];
                    *(_OWORD *)uint64_t v173 = *(_OWORD *)v231;
                    *(_OWORD *)(v173 + 16) = v180;
                    *(_DWORD *)(v173 + 32) = v172;
                    if (*(char *)(v173 + 63) < 0) {
                      operator delete(*(void **)(v173 + 40));
                    }
                    *(void *)(v173 + 40) = v206;
                    *(void *)(v173 + 48) = v203;
                    *(_DWORD *)(v173 + 56) = *(_DWORD *)v224;
                    *(_DWORD *)(v173 + 59) = *(_DWORD *)&v224[3];
                    *(unsigned char *)(v173 + 63) = __srcd;
                    *(_DWORD *)(v173 + 64) = v200;
                    goto LABEL_178;
                  }
                  uint64_t v169 = (v169 - 1) >> 1;
                  int v170 = a1 + 72 * v169;
                  *(_DWORD *)uint64_t v225 = *(_DWORD *)(v170 + 32);
                  unint64_t v177 = (void **)(v170 + 40);
                  if (*(char *)(v170 + 63) < 0)
                  {
                    sub_4200(&v225[8], *v177, *(void *)(a1 + 72 * v169 + 48));
                  }
                  else
                  {
                    uint64_t v178 = *(_OWORD *)v177;
                    *(void *)&v225[24] = *(void *)(v170 + 56);
                    *(_OWORD *)&v225[8] = v178;
                  }
                  uint64_t v226 = *(_DWORD *)(a1 + 72 * v169 + 64);
                  *(_DWORD *)int v233 = v172;
                  if (__srcd < 0) {
                    break;
                  }
                  uint64_t v179 = *(_DWORD *)v225;
                  if ((v225[31] & 0x80000000) != 0) {
                    goto LABEL_215;
                  }
LABEL_205:
                  double v150 = v173;
                  uint64_t v147 = v179 < v172;
                  uint64_t v172 = v211;
                  if (!v147) {
                    goto LABEL_220;
                  }
                }
                sub_4200(&v233[8], v206, v203);
                uint64_t v172 = *(_DWORD *)v233;
                int v234 = v200;
                uint64_t v179 = *(_DWORD *)v225;
                if ((v233[31] & 0x80000000) != 0)
                {
                  operator delete(*(void **)&v233[8]);
                  if ((v225[31] & 0x80000000) != 0) {
                    goto LABEL_215;
                  }
                  goto LABEL_205;
                }
                if ((v225[31] & 0x80000000) == 0) {
                  goto LABEL_205;
                }
LABEL_215:
                operator delete(*(void **)&v225[8]);
                double v150 = v173;
                uint64_t v147 = v179 < v172;
                uint64_t v172 = v211;
                if (!v147) {
                  goto LABEL_220;
                }
              }
            }
          }
        }
LABEL_178:
        uint64_t v147 = v146-- <= 2;
        if (v147) {
          return;
        }
      }
    }
    uint64_t v10 = (unint64_t)v9 >> 1;
    unint64_t v11 = v7 + 72 * ((unint64_t)v9 >> 1);
    if ((unint64_t)v8 < 0x2401)
    {
      sub_9AF9F8(v11, v7, (uint64_t)v197);
      uint64_t v12 = v7;
      uint64_t v204 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_11:
      uint64_t v24 = 0;
      char v25 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)uint64_t v225 = *(_OWORD *)v12;
      *(_OWORD *)&v225[16] = v25;
      BOOL v26 = *(_DWORD *)(v12 + 32);
      uint64_t v198 = v12 + 40;
      unint64_t v27 = *(void *)(v12 + 56);
      std::string __p = *(_OWORD *)(v12 + 40);
      uint64_t v228 = v27;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(void *)(v12 + 40) = 0;
      double v28 = *(_DWORD *)(v12 + 64);
      uint64_t v226 = v26;
      unsigned int v229 = v28;
      double v29 = SHIBYTE(v228);
      double v30 = *((void *)&__p + 1);
      __src = (void *)__p;
      do
      {
        while (1)
        {
          *(_DWORD *)int v233 = *(_DWORD *)(v12 + v24 + 104);
          unint64_t v31 = (void **)(v12 + v24 + 112);
          if (*(char *)(v12 + v24 + 135) < 0)
          {
            sub_4200(&v233[8], *v31, *(void *)(v12 + v24 + 120));
          }
          else
          {
            unint64_t v32 = *(_OWORD *)v31;
            *(void *)&v233[24] = *(void *)(v12 + v24 + 128);
            *(_OWORD *)&v233[8] = v32;
          }
          int v234 = *(_DWORD *)(v12 + v24 + 136);
          *(_DWORD *)uint64_t v231 = v26;
          if (v29 < 0) {
            break;
          }
          *(_OWORD *)&v231[8] = __p;
          *(void *)&v231[24] = v228;
          double v33 = v26;
          int v232 = v28;
          double v34 = *(_DWORD *)v233;
          if ((SHIBYTE(v228) & 0x80000000) == 0) {
            goto LABEL_21;
          }
LABEL_12:
          operator delete(*(void **)&v231[8]);
          if ((v233[31] & 0x80000000) != 0) {
            goto LABEL_22;
          }
LABEL_13:
          v24 += 72;
          uint64_t v12 = a1;
          if (v34 >= v33) {
            goto LABEL_23;
          }
        }
        sub_4200(&v231[8], __src, v30);
        double v33 = *(_DWORD *)v231;
        int v232 = v28;
        double v34 = *(_DWORD *)v233;
        if ((v231[31] & 0x80000000) != 0) {
          goto LABEL_12;
        }
LABEL_21:
        if ((v233[31] & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_22:
        operator delete(*(void **)&v233[8]);
        v24 += 72;
        uint64_t v12 = a1;
      }
      while (v34 < v33);
LABEL_23:
      int64_t v7 = v12 + v24;
      unint64_t v35 = a2;
      if (v24 == 72)
      {
        unint64_t v35 = a2;
        do
        {
          if (v7 >= v35) {
            break;
          }
          v35 -= 72;
        }
        while (!sub_9AF584(v35, (uint64_t)v225));
      }
      else
      {
        do
          v35 -= 72;
        while (!sub_9AF584(v35, (uint64_t)v225));
      }
      uint64_t v208 = v12 + v24;
      char v201 = v35;
      if (v7 >= v35) {
        goto LABEL_30;
      }
      while (2)
      {
        uint64_t v44 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)int v233 = *(_OWORD *)v7;
        *(_OWORD *)&v233[16] = v44;
        uint64_t v45 = *(_DWORD *)(v7 + 32);
        unint64_t v46 = *(void *)(v7 + 40);
        *(void *)uint64_t v231 = *(void *)(v7 + 48);
        *(void *)&v231[7] = *(void *)(v7 + 55);
        unint64_t v47 = *(unsigned char *)(v7 + 63);
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 56) = 0;
        *(void *)(v7 + 40) = 0;
        double v48 = *(_DWORD *)(v7 + 64);
        double v49 = *(_OWORD *)(v35 + 16);
        *(_OWORD *)int64_t v7 = *(_OWORD *)v35;
        *(_OWORD *)(v7 + 16) = v49;
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v35 + 32);
        double v50 = *(_OWORD *)(v35 + 40);
        *(void *)(v7 + 56) = *(void *)(v35 + 56);
        *(_OWORD *)(v7 + 40) = v50;
        *(unsigned char *)(v35 + 63) = 0;
        *(unsigned char *)(v35 + 40) = 0;
        *(_DWORD *)(v7 + 64) = *(_DWORD *)(v35 + 64);
        float64x2_t v51 = *(_OWORD *)&v233[16];
        *(_OWORD *)unint64_t v35 = *(_OWORD *)v233;
        *(_OWORD *)(v35 + 16) = v51;
        *(_DWORD *)(v35 + 32) = v45;
        if (*(char *)(v35 + 63) < 0) {
          operator delete(*(void **)(v35 + 40));
        }
        *(void *)(v35 + 55) = *(void *)&v231[7];
        uint64_t v52 = *(void *)v231;
        *(void *)(v35 + 40) = v46;
        *(void *)(v35 + 48) = v52;
        *(unsigned char *)(v35 + 63) = v47;
        *(_DWORD *)(v35 + 64) = v48;
        double v53 = v226;
        long long v54 = SHIBYTE(v228);
        unint64_t v55 = *((void *)&__p + 1);
        __srca = (void *)__p;
        unint64_t v56 = v229;
        while (2)
        {
          while (2)
          {
            *(_DWORD *)int v233 = *(_DWORD *)(v7 + 104);
            if (*(char *)(v7 + 135) < 0)
            {
              sub_4200(&v233[8], *(void **)(v7 + 112), *(void *)(v7 + 120));
            }
            else
            {
              unint64_t v57 = *(_OWORD *)(v7 + 112);
              *(void *)&v233[24] = *(void *)(v7 + 128);
              *(_OWORD *)&v233[8] = v57;
            }
            int v234 = *(_DWORD *)(v7 + 136);
            *(_DWORD *)uint64_t v231 = v53;
            if (v54 < 0)
            {
              sub_4200(&v231[8], __srca, v55);
              float64x2_t v58 = *(_DWORD *)v231;
              int v232 = v56;
              double v59 = *(_DWORD *)v233;
              if ((v231[31] & 0x80000000) == 0) {
                goto LABEL_55;
              }
LABEL_46:
              operator delete(*(void **)&v231[8]);
              if ((v233[31] & 0x80000000) != 0) {
                goto LABEL_56;
              }
LABEL_47:
              v7 += 72;
              if (v59 >= v58) {
                goto LABEL_60;
              }
              continue;
            }
            break;
          }
          *(_OWORD *)&v231[8] = __p;
          *(void *)&v231[24] = v228;
          float64x2_t v58 = v53;
          int v232 = v56;
          double v59 = *(_DWORD *)v233;
          if (SHIBYTE(v228) < 0) {
            goto LABEL_46;
          }
LABEL_55:
          if ((v233[31] & 0x80000000) == 0) {
            goto LABEL_47;
          }
LABEL_56:
          operator delete(*(void **)&v233[8]);
          v7 += 72;
          if (v59 < v58) {
            continue;
          }
          break;
        }
LABEL_60:
        while (2)
        {
          while (2)
          {
            *(_DWORD *)int v233 = *(_DWORD *)(v35 - 40);
            if (*(char *)(v35 - 9) < 0)
            {
              sub_4200(&v233[8], *(void **)(v35 - 32), *(void *)(v35 - 24));
            }
            else
            {
              unint64_t v60 = *(_OWORD *)(v35 - 32);
              *(void *)&v233[24] = *(void *)(v35 - 16);
              *(_OWORD *)&v233[8] = v60;
            }
            int v234 = *(_DWORD *)(v35 - 8);
            *(_DWORD *)uint64_t v231 = v53;
            if ((v54 & 0x80000000) == 0)
            {
              *(_OWORD *)&v231[8] = __p;
              *(void *)&v231[24] = v228;
              int v61 = v53;
              int v232 = v56;
              double v62 = *(_DWORD *)v233;
              if ((SHIBYTE(v228) & 0x80000000) == 0) {
                break;
              }
              goto LABEL_58;
            }
            sub_4200(&v231[8], __srca, v55);
            int v61 = *(_DWORD *)v231;
            int v232 = v56;
            double v62 = *(_DWORD *)v233;
            if ((v231[31] & 0x80000000) != 0)
            {
LABEL_58:
              operator delete(*(void **)&v231[8]);
              if ((v233[31] & 0x80000000) != 0) {
                goto LABEL_68;
              }
LABEL_59:
              v35 -= 72;
              if (v62 < v61) {
                goto LABEL_42;
              }
              continue;
            }
            break;
          }
          if ((v233[31] & 0x80000000) == 0) {
            goto LABEL_59;
          }
LABEL_68:
          operator delete(*(void **)&v233[8]);
          v35 -= 72;
          if (v62 >= v61) {
            continue;
          }
          break;
        }
LABEL_42:
        if (v7 < v35) {
          continue;
        }
        break;
      }
LABEL_30:
      unint64_t v36 = (_OWORD *)(v7 - 72);
      double v37 = a1;
      a3 = v204;
      if (v7 - 72 != a1)
      {
        double v38 = *(_OWORD *)(v7 - 56);
        *(_OWORD *)a1 = *v36;
        *(_OWORD *)(a1 + 16) = v38;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 - 40);
        if (*(char *)(a1 + 63) < 0) {
          operator delete(*(void **)v198);
        }
        double v39 = *(_OWORD *)(v7 - 32);
        *(void *)(v198 + 16) = *(void *)(v7 - 16);
        *(_OWORD *)uint64_t v198 = v39;
        *(unsigned char *)(v7 - 9) = 0;
        *(unsigned char *)(v7 - 32) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(v7 - 8);
      }
      double v40 = *(_OWORD *)&v225[16];
      *unint64_t v36 = *(_OWORD *)v225;
      *(_OWORD *)(v7 - 56) = v40;
      *(_DWORD *)(v7 - 40) = v226;
      float64x2_t v41 = (void **)(v7 - 32);
      if (*(char *)(v7 - 9) < 0) {
        operator delete(*v41);
      }
      unint64_t v42 = __p;
      *(void *)(v7 - 16) = v228;
      *(_OWORD *)float64x2_t v41 = v42;
      HIBYTE(v228) = 0;
      LOBYTE(__p) = 0;
      *(_DWORD *)(v7 - 8) = v229;
      if (SHIBYTE(v228) < 0) {
        operator delete((void *)__p);
      }
      if (v208 < v201)
      {
LABEL_41:
        sub_9ADC8C(v37, v7 - 72, v204, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v43 = sub_9AFDCC(a1, v7 - 72);
        if (sub_9AFDCC(v7, a2))
        {
          a2 = v7 - 72;
          if (v43) {
            return;
          }
          goto LABEL_1;
        }
        double v37 = a1;
        if (!v43) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      sub_9AF9F8(v7, v11, (uint64_t)v197);
      sub_9AF9F8(v7 + 72, v7 + 72 * v10 - 72, a2 - 144);
      sub_9AF9F8(v7 + 144, v7 + 72 * v10 + 72, a2 - 216);
      sub_9AF9F8(v7 + 72 * v10 - 72, v11, v7 + 72 * v10 + 72);
      uint64_t v12 = v7;
      uint64_t v13 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v225 = *(_OWORD *)v7;
      *(_OWORD *)&v225[16] = v13;
      uint64_t v14 = *(_DWORD *)(v7 + 32);
      *(void *)&v233[7] = *(void *)(v7 + 55);
      unint64_t v15 = *(void *)(v7 + 40);
      *(void *)int v233 = *(void *)(v7 + 48);
      uint64_t v16 = *(unsigned char *)(v7 + 63);
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 40) = 0;
      unint64_t v17 = *(_DWORD *)(v7 + 64);
      unint64_t v18 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)int64_t v7 = *(_OWORD *)v11;
      *(_OWORD *)(v7 + 16) = v18;
      unint64_t v19 = v7 + 72 * v10;
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(v19 + 32);
      uint64_t v20 = *(_OWORD *)(v19 + 40);
      *(void *)(v7 + 56) = *(void *)(v19 + 56);
      *(_OWORD *)(v7 + 40) = v20;
      *(unsigned char *)(v11 + 63) = 0;
      *(unsigned char *)(v19 + 40) = 0;
      *(_DWORD *)(v7 + 64) = *(_DWORD *)(v19 + 64);
      double v21 = *(_OWORD *)&v225[16];
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v225;
      *(_OWORD *)(v11 + 16) = v21;
      *(_DWORD *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v15;
      uint64_t v22 = *(void *)&v233[7];
      *(void *)(v19 + 48) = *(void *)v233;
      *(void *)(v19 + 55) = v22;
      *(unsigned char *)(v11 + 63) = v16;
      *(_DWORD *)(v19 + 64) = v17;
      uint64_t v204 = a3 - 1;
      if (a4) {
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v23 = sub_9AF584(v12 - 72, v12);
      uint64_t v12 = v7;
      if (v23) {
        goto LABEL_11;
      }
      float64_t v63 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v225 = *(_OWORD *)v7;
      *(_OWORD *)&v225[16] = v63;
      unint64_t v64 = *(_DWORD *)(v7 + 32);
      unint64_t v65 = *(_OWORD *)(v7 + 40);
      uint64_t v228 = *(void *)(v7 + 56);
      std::string __p = v65;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 40) = 0;
      double v66 = *(_DWORD *)(v7 + 64);
      uint64_t v226 = v64;
      unsigned int v229 = v66;
      if (sub_9AF584((uint64_t)v225, (uint64_t)v197))
      {
        do
          v7 += 72;
        while (!sub_9AF584((uint64_t)v225, v7));
      }
      else
      {
        double v67 = v7 + 72;
        do
        {
          int64_t v7 = v67;
          if (v67 >= a2) {
            break;
          }
          int v68 = sub_9AF584((uint64_t)v225, v67);
          double v67 = v7 + 72;
        }
        while (!v68);
      }
      double v69 = a2;
      if (v7 < a2)
      {
        double v69 = a2;
        do
          v69 -= 72;
        while (sub_9AF584((uint64_t)v225, v69));
      }
LABEL_106:
      if (v7 < v69)
      {
        uint64_t v70 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)int v233 = *(_OWORD *)v7;
        *(_OWORD *)&v233[16] = v70;
        uint64_t v71 = *(_DWORD *)(v7 + 32);
        uint64_t v72 = *(void *)(v7 + 40);
        *(void *)uint64_t v231 = *(void *)(v7 + 48);
        *(void *)&v231[7] = *(void *)(v7 + 55);
        float64x2_t v73 = *(unsigned char *)(v7 + 63);
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 56) = 0;
        *(void *)(v7 + 40) = 0;
        float64x2_t v74 = *(_DWORD *)(v7 + 64);
        double v75 = *(_OWORD *)(v69 + 16);
        *(_OWORD *)int64_t v7 = *(_OWORD *)v69;
        *(_OWORD *)(v7 + 16) = v75;
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v69 + 32);
        int8x16_t v76 = *(_OWORD *)(v69 + 40);
        *(void *)(v7 + 56) = *(void *)(v69 + 56);
        *(_OWORD *)(v7 + 40) = v76;
        *(unsigned char *)(v69 + 63) = 0;
        *(unsigned char *)(v69 + 40) = 0;
        *(_DWORD *)(v7 + 64) = *(_DWORD *)(v69 + 64);
        long long v77 = *(_OWORD *)&v233[16];
        *(_OWORD *)double v69 = *(_OWORD *)v233;
        *(_OWORD *)(v69 + 16) = v77;
        *(_DWORD *)(v69 + 32) = v71;
        if (*(char *)(v69 + 63) < 0) {
          operator delete(*(void **)(v69 + 40));
        }
        *(void *)(v69 + 55) = *(void *)&v231[7];
        float64x2_t v78 = *(void *)v231;
        *(void *)(v69 + 40) = v72;
        *(void *)(v69 + 48) = v78;
        *(unsigned char *)(v69 + 63) = v73;
        *(_DWORD *)(v69 + 64) = v74;
        float64x2_t v79 = v226;
        float64x2_t v80 = SHIBYTE(v228);
        float64x2_t v81 = __p;
        double v82 = v229;
        while (1)
        {
          *(_DWORD *)int v233 = v79;
          if (v80 < 0)
          {
            sub_4200(&v233[8], (void *)v81, *((unint64_t *)&v81 + 1));
          }
          else
          {
            *(_OWORD *)&v233[8] = __p;
            *(void *)&v233[24] = v228;
          }
          int v234 = v82;
          double v83 = *(_DWORD *)(v7 + 104);
          *(_DWORD *)uint64_t v231 = v83;
          if (*(char *)(v7 + 135) < 0)
          {
            sub_4200(&v231[8], *(void **)(v7 + 112), *(void *)(v7 + 120));
            double v83 = *(_DWORD *)v231;
            int v232 = *(_DWORD *)(v7 + 136);
            BOOL v85 = *(_DWORD *)v233;
            if ((v231[31] & 0x80000000) != 0)
            {
LABEL_83:
              operator delete(*(void **)&v231[8]);
              if ((v233[31] & 0x80000000) != 0) {
                goto LABEL_93;
              }
              goto LABEL_84;
            }
          }
          else
          {
            double v84 = *(_OWORD *)(v7 + 112);
            *(void *)&v231[24] = *(void *)(v7 + 128);
            *(_OWORD *)&v231[8] = v84;
            int v232 = *(_DWORD *)(v7 + 136);
            BOOL v85 = *(_DWORD *)v233;
            if ((v231[31] & 0x80000000) != 0) {
              goto LABEL_83;
            }
          }
          if ((v233[31] & 0x80000000) != 0)
          {
LABEL_93:
            operator delete(*(void **)&v233[8]);
            v7 += 72;
            if (v85 >= v83) {
              continue;
            }
LABEL_97:
            while (2)
            {
              while (2)
              {
                *(_DWORD *)int v233 = v79;
                if (v80 < 0)
                {
                  sub_4200(&v233[8], (void *)v81, *((unint64_t *)&v81 + 1));
                }
                else
                {
                  *(_OWORD *)&v233[8] = __p;
                  *(void *)&v233[24] = v228;
                }
                int v234 = v82;
                double v86 = *(_DWORD *)(v69 - 40);
                *(_DWORD *)uint64_t v231 = v86;
                if (*(char *)(v69 - 9) < 0)
                {
                  sub_4200(&v231[8], *(void **)(v69 - 32), *(void *)(v69 - 24));
                  double v86 = *(_DWORD *)v231;
                  int v232 = *(_DWORD *)(v69 - 8);
                  long long v88 = *(_DWORD *)v233;
                  if ((v231[31] & 0x80000000) == 0) {
                    goto LABEL_104;
                  }
LABEL_95:
                  operator delete(*(void **)&v231[8]);
                  if ((v233[31] & 0x80000000) == 0) {
                    goto LABEL_96;
                  }
                }
                else
                {
                  double v87 = *(_OWORD *)(v69 - 32);
                  *(void *)&v231[24] = *(void *)(v69 - 16);
                  *(_OWORD *)&v231[8] = v87;
                  int v232 = *(_DWORD *)(v69 - 8);
                  long long v88 = *(_DWORD *)v233;
                  if ((v231[31] & 0x80000000) != 0) {
                    goto LABEL_95;
                  }
LABEL_104:
                  if ((v233[31] & 0x80000000) == 0)
                  {
LABEL_96:
                    v69 -= 72;
                    uint64_t v12 = a1;
                    if (v88 >= v86) {
                      goto LABEL_106;
                    }
                    continue;
                  }
                }
                break;
              }
              operator delete(*(void **)&v233[8]);
              v69 -= 72;
              uint64_t v12 = a1;
              if (v88 >= v86) {
                goto LABEL_106;
              }
              continue;
            }
          }
LABEL_84:
          v7 += 72;
          if (v85 < v83) {
            goto LABEL_97;
          }
        }
      }
      BOOL v89 = (_OWORD *)(v7 - 72);
      unint64_t v4 = v7 - 72 >= v12;
      char v5 = v7 - 72 == v12;
      a3 = v204;
      if (v7 - 72 != v12)
      {
        unsigned int v90 = (void **)(v12 + 40);
        int v91 = *(_OWORD *)(v7 - 56);
        *(_OWORD *)uint64_t v12 = *v89;
        *(_OWORD *)(v12 + 16) = v91;
        *(_DWORD *)(v12 + 32) = *(_DWORD *)(v7 - 40);
        if (*(char *)(v12 + 63) < 0) {
          operator delete(*v90);
        }
        float64x2_t v92 = *(_OWORD *)(v7 - 32);
        *(void *)(v12 + 56) = *(void *)(v7 - 16);
        *(_OWORD *)unsigned int v90 = v92;
        *(unsigned char *)(v7 - 9) = 0;
        *(unsigned char *)(v7 - 32) = 0;
        *(_DWORD *)(v12 + 64) = *(_DWORD *)(v7 - 8);
      }
      long long v93 = *(_OWORD *)&v225[16];
      *BOOL v89 = *(_OWORD *)v225;
      *(_OWORD *)(v7 - 56) = v93;
      *(_DWORD *)(v7 - 40) = v226;
      unsigned __int8 v94 = (void **)(v7 - 32);
      if (*(char *)(v7 - 9) < 0) {
        operator delete(*v94);
      }
      uint64_t v95 = __p;
      *(void *)(v7 - 16) = v228;
      *(_OWORD *)unsigned __int8 v94 = v95;
      HIBYTE(v228) = 0;
      LOBYTE(__p) = 0;
      *(_DWORD *)(v7 - 8) = v229;
      if (SHIBYTE(v228) < 0) {
        operator delete((void *)__p);
      }
      a4 = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    if (v7 == a2) {
      return;
    }
    uint64_t v181 = v7 + 72;
    if (v7 + 72 == a2) {
      return;
    }
    for (double i = (_DWORD *)(v7 + 136); ; i += 18)
    {
      unint64_t v183 = (_OWORD *)v181;
      if (sub_9AF584(v181, a1)) {
        break;
      }
LABEL_227:
      uint64_t v181 = (uint64_t)v183 + 72;
      a1 = (uint64_t)v183;
      if ((_OWORD *)((char *)v183 + 72) == (_OWORD *)a2) {
        return;
      }
    }
    uint64_t v184 = v183[1];
    uint64_t v212 = v183;
    *(_OWORD *)uint64_t v231 = *v183;
    *(_OWORD *)&v231[16] = v184;
    uint64_t v185 = *(_DWORD *)(a1 + 104);
    uint64_t v186 = *(void **)(a1 + 112);
    uint64_t v187 = *(void *)(a1 + 120);
    *(_DWORD *)unint64_t v222 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)&v222[3] = *(_DWORD *)(a1 + 131);
    uint64_t v188 = *(char *)(a1 + 135);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    __srce = i;
    uint64_t v189 = *(_DWORD *)(a1 + 136);
    while (1)
    {
      while (1)
      {
        double v190 = *(_OWORD *)(i - 30);
        *((_OWORD *)i - 4) = *(_OWORD *)(i - 34);
        *((_OWORD *)i - 3) = v190;
        *(i - 8) = *(i - 26);
        uint64_t v191 = (void **)(i - 6);
        if (*((char *)i - 1) < 0) {
          operator delete(*v191);
        }
        *(_OWORD *)uint64_t v191 = *((_OWORD *)i - 6);
        *((void *)i - 1) = *((void *)i - 10);
        *((unsigned char *)i - 73) = 0;
        *((unsigned char *)i - 96) = 0;
        *double i = *(i - 18);
        *(_DWORD *)uint64_t v225 = v185;
        if (v188 < 0)
        {
          sub_4200(&v225[8], v186, v187);
        }
        else
        {
          *(void *)&v225[8] = v186;
          *(void *)&v225[16] = v187;
          *(_DWORD *)&v225[24] = *(_DWORD *)v222;
          *(_DWORD *)&v225[27] = *(_DWORD *)&v222[3];
          v225[31] = v188;
        }
        uint64_t v226 = v189;
        uint64_t v192 = *(i - 44);
        *(_DWORD *)int v233 = v192;
        if ((*((char *)i - 145) & 0x80000000) == 0) {
          break;
        }
        sub_4200(&v233[8], *((void **)i - 21), *((void *)i - 20));
        uint64_t v192 = *(_DWORD *)v233;
        int v234 = *(i - 36);
        uint64_t v194 = *(_DWORD *)v225;
        if ((v233[31] & 0x80000000) != 0) {
          goto LABEL_230;
        }
LABEL_241:
        if ((v225[31] & 0x80000000) == 0) {
          goto LABEL_231;
        }
LABEL_242:
        operator delete(*(void **)&v225[8]);
        i -= 18;
        if (v194 >= v192)
        {
LABEL_243:
          uint64_t v195 = *(_OWORD *)&v231[16];
          *((_OWORD *)i - 4) = *(_OWORD *)v231;
          *((_OWORD *)i - 3) = v195;
          *(i - 8) = v185;
          if (*((char *)i - 1) < 0) {
            operator delete(*((void **)i - 3));
          }
          *((void *)i - 3) = v186;
          *((void *)i - 2) = v187;
          *(_DWORD *)((char *)i - 5) = *(_DWORD *)&v222[3];
          *(i - 2) = *(_DWORD *)v222;
          *((unsigned char *)i - 1) = v188;
          *double i = v189;
          double i = __srce;
          unint64_t v183 = v212;
          goto LABEL_227;
        }
      }
      uint64_t v193 = *(_OWORD *)(i - 42);
      *(void *)&v233[24] = *((void *)i - 19);
      *(_OWORD *)&v233[8] = v193;
      int v234 = *(i - 36);
      uint64_t v194 = *(_DWORD *)v225;
      if ((v233[31] & 0x80000000) == 0) {
        goto LABEL_241;
      }
LABEL_230:
      operator delete(*(void **)&v233[8]);
      if ((v225[31] & 0x80000000) != 0) {
        goto LABEL_242;
      }
LABEL_231:
      i -= 18;
      if (v194 >= v192) {
        goto LABEL_243;
      }
    }
  }
  if (v7 == a2) {
    return;
  }
  int v105 = v7 + 72;
  if (v7 + 72 == a2) {
    return;
  }
  uint64_t v106 = 0;
  unsigned int v107 = v7;
  while (2)
  {
    int64_t v108 = (_OWORD *)v105;
    if (!sub_9AF584(v105, v107)) {
      goto LABEL_132;
    }
    uint64_t v109 = v108[1];
    int v209 = v108;
    *(_OWORD *)uint64_t v231 = *v108;
    *(_OWORD *)&v231[16] = v109;
    long double v110 = *(_DWORD *)(v107 + 104);
    long double v111 = *(void **)(v107 + 112);
    uint64x2_t v112 = *(void *)(v107 + 120);
    *(_DWORD *)char v220 = *(_DWORD *)(v107 + 128);
    *(_DWORD *)&v220[3] = *(_DWORD *)(v107 + 131);
    uint64_t v113 = *(char *)(v107 + 135);
    *(void *)(v107 + 112) = 0;
    *(void *)(v107 + 120) = 0;
    *(void *)(v107 + 128) = 0;
    __srcb = v106;
    uint64_t v114 = v106;
    unsigned int v115 = *(_DWORD *)(v107 + 136);
    while (2)
    {
      while (2)
      {
        unsigned int v116 = v114;
        int v117 = &v114[v7];
        unsigned int v118 = *(_OWORD *)&v114[v7 + 16];
        *(_OWORD *)(v117 + 72) = *(_OWORD *)&v114[v7];
        *(_OWORD *)(v117 + 88) = v118;
        *((_DWORD *)v117 + 26) = *((_DWORD *)v117 + 8);
        unsigned int v119 = (void **)&v114[v7 + 112];
        if (v114[v7 + 135] < 0) {
          operator delete(*v119);
        }
        *(_OWORD *)unsigned int v119 = *(_OWORD *)(v117 + 40);
        *((void *)v117 + 16) = *((void *)v117 + 7);
        v117[63] = 0;
        v117[40] = 0;
        *((_DWORD *)v117 + 34) = *((_DWORD *)v117 + 16);
        if (!v116)
        {
          uint64x2_t v125 = v7;
          unsigned int v128 = *(_OWORD *)&v231[16];
          *(_OWORD *)int64_t v7 = *(_OWORD *)v231;
          *(_OWORD *)(v7 + 16) = v128;
          *(_DWORD *)(v7 + 32) = v110;
          long double v127 = v7;
          if (*(char *)(v7 + 63) < 0) {
            goto LABEL_130;
          }
          goto LABEL_131;
        }
        *(_DWORD *)uint64_t v225 = v110;
        if (v113 < 0)
        {
          sub_4200(&v225[8], v111, v112);
        }
        else
        {
          *(void *)&v225[8] = v111;
          *(void *)&v225[16] = v112;
          *(_DWORD *)&v225[24] = *(_DWORD *)v220;
          *(_DWORD *)&v225[27] = *(_DWORD *)&v220[3];
          v225[31] = v113;
        }
        uint64_t v226 = v115;
        unsigned int v120 = &v116[v7];
        int v121 = *(_DWORD *)&v116[v7 - 40];
        *(_DWORD *)int v233 = v121;
        uint64_t v122 = (void **)&v116[v7 - 32];
        if (v116[v7 - 9] < 0)
        {
          sub_4200(&v233[8], *v122, *((void *)v120 - 3));
          int v121 = *(_DWORD *)v233;
        }
        else
        {
          long double v123 = *(_OWORD *)v122;
          *(void *)&v233[24] = *((void *)v120 - 2);
          *(_OWORD *)&v233[8] = v123;
        }
        int v234 = *(_DWORD *)&v116[v7 - 8];
        uint64_t v124 = *(_DWORD *)v225;
        if ((v233[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v233[8]);
          if ((v225[31] & 0x80000000) != 0) {
            break;
          }
          goto LABEL_136;
        }
        if ((v225[31] & 0x80000000) == 0)
        {
LABEL_136:
          uint64_t v114 = v116 - 72;
          if (v124 >= v121) {
            goto LABEL_149;
          }
          continue;
        }
        break;
      }
      operator delete(*(void **)&v225[8]);
      uint64_t v114 = v116 - 72;
      if (v124 < v121) {
        continue;
      }
      break;
    }
LABEL_149:
    uint64x2_t v125 = (uint64_t)&v114[v7 + 72];
    uint64_t v126 = *(_OWORD *)&v231[16];
    *(_OWORD *)uint64x2_t v125 = *(_OWORD *)v231;
    *(_OWORD *)(v125 + 16) = v126;
    *(_DWORD *)(v125 + 32) = v110;
    long double v127 = (unint64_t)&v116[v7];
    if (v114[v7 + 135] < 0) {
LABEL_130:
    }
      operator delete(*(void **)(v127 + 40));
LABEL_131:
    *(void *)(v127 + 40) = v111;
    *(void *)(v125 + 48) = v112;
    *(_DWORD *)(v125 + 56) = *(_DWORD *)v220;
    *(_DWORD *)(v125 + 59) = *(_DWORD *)&v220[3];
    *(unsigned char *)(v125 + 63) = v113;
    *(_DWORD *)(v125 + 64) = v115;
    uint64_t v106 = __srcb;
    int64_t v108 = v209;
LABEL_132:
    int v105 = (uint64_t)v108 + 72;
    v106 += 72;
    unsigned int v107 = (uint64_t)v108;
    if ((_OWORD *)((char *)v108 + 72) != (_OWORD *)a2) {
      continue;
    }
    break;
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0x8E38E38E38E38E39 * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *((_DWORD *)a2 - 4);
          double v28 = *(_DWORD *)(a1 + 56);
          char v6 = v27 == v28;
          double v29 = v27 > v28;
          if (v6) {
            double v29 = *((void *)a2 - 1) < *(void *)(a1 + 64);
          }
          if (v29)
          {
            sub_9C4E2C((uint64_t *)a1, (long long *)((char *)a2 - 72));
          }
          break;
        case 3uLL:
          sub_9C4390(a1, a1 + 72, (uint64_t)a2 - 72);
          break;
        case 4uLL:
          sub_9C4FB4(a1, a1 + 72, a1 + 144, (uint64_t)a2 - 72);
          break;
        case 5uLL:
          sub_9C50B4(a1, a1 + 72, a1 + 144, a1 + 216, (uint64_t)a2 - 72);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 1727) {
      break;
    }
    if (v12 == 1)
    {
      if ((long long *)a1 != a2)
      {
        double v30 = (v15 - 2) >> 1;
        unint64_t v31 = v30 + 1;
        unint64_t v32 = (uint64_t *)(a1 + 72 * v30);
        do
        {
          sub_9C51FC(a1, a3, 0x8E38E38E38E38E39 * (v14 >> 3), v32);
          v32 -= 9;
          --v31;
        }
        while (v31);
        double v33 = v14 / 0x48uLL;
        do
        {
          sub_9C54E8(a1, (uint64_t)a2, a3, v33);
          a2 = (long long *)((char *)a2 - 72);
        }
        while (v33-- > 2);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)(a1 + 72 * (v15 >> 1));
    if ((unint64_t)v14 < 0x2401)
    {
      sub_9C4390((uint64_t)v17, a1, (uint64_t)a2 - 72);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_9C4390(a1, (uint64_t)v17, (uint64_t)a2 - 72);
      unint64_t v18 = 72 * v16;
      unint64_t v19 = 72 * v16 + a1 - 72;
      sub_9C4390(a1 + 72, v19, (uint64_t)(a2 - 9));
      uint64_t v20 = a1 + 72 + v18;
      sub_9C4390(a1 + 144, v20, (uint64_t)a2 - 216);
      sub_9C4390(v19, (uint64_t)v17, v20);
      sub_9C4E2C((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = *(_DWORD *)(a1 - 16);
    uint64_t v22 = *(_DWORD *)(a1 + 56);
    char v6 = v21 == v22;
    unint64_t v23 = v21 > v22;
    if (v6) {
      unint64_t v23 = *(void *)(a1 - 8) < *(void *)(a1 + 64);
    }
    if (!v23)
    {
      unint64_t v11 = sub_9C44F0(a1, a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = sub_9C47AC(a1, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_9C4A68(a1, v24);
    unint64_t v11 = v24 + 72;
    if (sub_9C4A68(v24 + 72, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_17:
      sub_9C3A7C(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = v24 + 72;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_9C3F00((uint64_t *)a1, (uint64_t *)a2);
  }
  else
  {
    sub_9C4160((uint64_t *)a1, (uint64_t *)a2);
  }
}

  long double v110 = (unint64_t *)(a2 - 32);
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    unint64_t v11 = a2 - v10;
    uint64_t v12 = (uint64_t)(a2 - v10) >> 5;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return a5.n128_f64[0];
        case 2uLL:
          double v48 = *(void *)v10;
          if (*(void *)(a2 - 32) < *(void *)v10)
          {
            double v49 = *(void *)(v10 + 24);
            a5 = *(__n128 *)(v10 + 8);
            *(void *)(v10 + 16) = 0;
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(void *)(v10 + 8) = 0;
            *(void *)uint64_t v10 = *(void *)(a2 - 32);
            *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 - 24);
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
            *(void *)(a2 - 32) = v48;
            *(__n128 *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a5;
            *(void *)(a2 - 8) = v49;
          }
          break;
        case 3uLL:
          sub_9D0C1C((unint64_t *)v10, (unint64_t *)(v10 + 32), v110);
          break;
        case 4uLL:
          a5.n128_u64[0] = sub_9D0F98(v10, v10 + 32, v10 + 64, (uint64_t)v110).n128_u64[0];
          break;
        case 5uLL:
          a5.n128_u64[0] = sub_9D0AC8(v10, v10 + 32, v10 + 64, v10 + 96, (uint64_t)v110).n128_u64[0];
          break;
        default:
          JUMPOUT(0);
      }
      return a5.n128_f64[0];
    }
    if (v11 <= 767) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return a5.n128_f64[0];
      }
      unint64_t v65 = (v12 - 2) >> 1;
      double v66 = v65;
      while (1)
      {
        if (v65 >= v66)
        {
          int v68 = (2 * v66) | 1;
          double v69 = v10 + 32 * v68;
          if (2 * v66 + 2 >= (uint64_t)v12)
          {
            uint64_t v70 = *(void *)v69;
            uint64_t v72 = v10 + 32 * v66;
            float64x2_t v73 = *(void *)v72;
            if (*(void *)v69 >= *(void *)v72) {
              goto LABEL_111;
            }
          }
          else
          {
            uint64_t v70 = *(void *)(v69 + 32);
            uint64_t v71 = *(void *)v69 >= v70;
            if (*(void *)v69 > v70) {
              uint64_t v70 = *(void *)v69;
            }
            if (!v71)
            {
              v69 += 32;
              int v68 = 2 * v66 + 2;
            }
            uint64_t v72 = v10 + 32 * v66;
            float64x2_t v73 = *(void *)v72;
            if (v70 >= *(void *)v72)
            {
LABEL_111:
              float64x2_t v74 = v10 + 32 * v66;
              double v75 = *(_OWORD *)(v74 + 8);
              int8x16_t v76 = *(void *)(v74 + 24);
              *(void *)(v74 + 16) = 0;
              *(void *)(v74 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              *(void *)(v74 + 8) = 0;
              while (1)
              {
                float64x2_t v79 = v72;
                uint64_t v72 = v69;
                *(void *)float64x2_t v79 = v70;
                *(_OWORD *)(v79 + 8) = *(_OWORD *)(v69 + 8);
                *(void *)(v79 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v69 + 24);
                *(void *)(v69 + 8) = 0;
                *(void *)(v69 + 16) = 0;
                *(void *)(v69 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                if (v65 < v68) {
                  break;
                }
                float64x2_t v80 = (2 * v68) | 1;
                double v69 = v10 + 32 * v80;
                int v68 = 2 * v68 + 2;
                if (v68 < (uint64_t)v12)
                {
                  uint64_t v70 = *(void *)v69;
                  long long v77 = *(void *)(v69 + 32);
                  float64x2_t v78 = *(void *)v69 >= v77;
                  if (*(void *)v69 <= v77) {
                    uint64_t v70 = *(void *)(v69 + 32);
                  }
                  if (*(void *)v69 < v77) {
                    v69 += 32;
                  }
                  if (v78) {
                    int v68 = v80;
                  }
                  if (v70 < v73) {
                    break;
                  }
                }
                else
                {
                  uint64_t v70 = *(void *)v69;
                  int v68 = v80;
                  if (*(void *)v69 < v73) {
                    break;
                  }
                }
              }
              *(void *)uint64_t v72 = v73;
              *(_OWORD *)(v72 + 8) = v75;
              *(void *)(v72 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v76;
            }
          }
        }
        double v67 = v66-- <= 0;
        if (v67)
        {
          float64x2_t v81 = (unint64_t)v11 >> 5;
          do
          {
            double v82 = 0;
            double v83 = *(void *)v10;
            double v84 = *(void *)(v10 + 8);
            BOOL v85 = *(void *)(v10 + 16);
            double v86 = *(void *)(v10 + 24);
            *(void *)(v10 + 8) = 0;
            *(void *)(v10 + 16) = 0;
            double v87 = v10;
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            do
            {
              unsigned int v90 = v87 + 32 * v82 + 32;
              int v91 = (2 * v82) | 1;
              double v82 = 2 * v82 + 2;
              if (v82 < v81)
              {
                long long v88 = *(void *)v90;
                BOOL v89 = *(void *)(v90 + 32);
                if (*(void *)v90 <= v89) {
                  long long v88 = *(void *)(v90 + 32);
                }
                if (*(void *)v90 >= v89) {
                  double v82 = v91;
                }
                else {
                  v90 += 32;
                }
              }
              else
              {
                long long v88 = *(void *)v90;
                double v82 = v91;
              }
              *(void *)double v87 = v88;
              a5 = *(__n128 *)(v90 + 8);
              *(__n128 *)(v87 + 8) = a5;
              *(void *)(v87 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v90 + 24);
              *(void *)(v90 + 8) = 0;
              *(void *)(v90 + 16) = 0;
              *(void *)(v90 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              double v87 = v90;
            }
            while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
            if (v90 == a2 - 32)
            {
              *(void *)unsigned int v90 = v83;
              *(void *)(v90 + 8) = v84;
              *(void *)(v90 + 16) = v85;
              *(void *)(v90 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v86;
            }
            else
            {
              *(void *)unsigned int v90 = *(void *)(a2 - 32);
              a5 = *(__n128 *)(a2 - 24);
              *(__n128 *)(v90 + 8) = a5;
              *(void *)(v90 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
              *(void *)(a2 - 32) = v83;
              *(void *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v84;
              *(void *)(a2 - 16) = v85;
              *(void *)(a2 - 8) = v86;
              float64x2_t v92 = v90 - v10 + 32;
              if (v92 >= 33)
              {
                long long v93 = (((unint64_t)v92 >> 5) - 2) >> 1;
                unsigned __int8 v94 = v10 + 32 * v93;
                uint64_t v95 = *(void *)v90;
                if (*(void *)v94 < *(void *)v90)
                {
                  a5 = *(__n128 *)(v90 + 8);
                  uint64_t v96 = *(void *)(v90 + 24);
                  *(void *)(v90 + 8) = 0;
                  *(void *)(v90 + 16) = 0;
                  *(void *)(v90 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                  uint64_t v97 = *(void *)v94;
                  do
                  {
                    double v98 = v90;
                    unsigned int v90 = v94;
                    *(void *)double v98 = v97;
                    *(_OWORD *)(v98 + 8) = *(_OWORD *)(v94 + 8);
                    *(void *)(v98 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v94 + 24);
                    *(void *)(v94 + 8) = 0;
                    *(void *)(v94 + 16) = 0;
                    *(void *)(v94 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                    if (!v93) {
                      break;
                    }
                    long long v93 = (v93 - 1) >> 1;
                    unsigned __int8 v94 = v10 + 32 * v93;
                    uint64_t v97 = *(void *)v94;
                  }
                  while (*(void *)v94 < v95);
                  *(void *)unsigned int v90 = v95;
                  *(__n128 *)(v90 + 8) = a5;
                  *(void *)(v90 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v96;
                }
              }
            }
            a2 -= 32;
            double v67 = v81-- <= 2;
          }
          while (!v67);
          return a5.n128_f64[0];
        }
      }
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = (unint64_t *)(v10 + 32 * (v12 >> 1));
    if ((unint64_t)v11 > 0x1000)
    {
      sub_9D0C1C((unint64_t *)a1, (unint64_t *)(a1 + 32 * (v12 >> 1)), v110);
      unint64_t v15 = 32 * v13;
      uint64_t v16 = a1 + v15;
      sub_9D0C1C((unint64_t *)(a1 + 32), (unint64_t *)(a1 + v15 - 32), (unint64_t *)(a2 - 64));
      sub_9D0C1C((unint64_t *)(a1 + 64), (unint64_t *)(a1 + 32 + v15), (unint64_t *)(a2 - 96));
      sub_9D0C1C((unint64_t *)(a1 + v15 - 32), v14, (unint64_t *)(a1 + 32 + v15));
      unint64_t v17 = *(void *)a1;
      unint64_t v18 = *(void *)(a1 + 24);
      a5 = *(__n128 *)(a1 + 8);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)a1 = *v14;
      *(void *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + v15 + 8);
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + v15 + 24);
      *uint64_t v14 = v17;
      *(__n128 *)(v16 + 8) = a5;
      *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
      --a3;
      unint64_t v19 = *(void *)a1;
      if (a4) {
        goto LABEL_12;
      }
LABEL_11:
      if (*(void *)(a1 - 32) < v19) {
        goto LABEL_12;
      }
      unint64_t v36 = *(void *)(a1 + 8);
      double v37 = *(_OWORD *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(a1 + 8) = 0;
      if (v19 >= *v110)
      {
        double v39 = a1 + 32;
        do
        {
          uint64_t v10 = v39;
          if (v39 >= a2) {
            break;
          }
          v39 += 32;
        }
        while (v19 >= *(void *)v10);
      }
      else
      {
        uint64_t v10 = a1;
        do
        {
          double v38 = *(void *)(v10 + 32);
          v10 += 32;
        }
        while (v19 >= v38);
      }
      double v40 = a2;
      if (v10 < a2)
      {
        double v40 = a2;
        do
        {
          float64x2_t v41 = *(void *)(v40 - 32);
          v40 -= 32;
        }
        while (v19 < v41);
      }
      if (v10 < v40)
      {
        unint64_t v42 = *(void *)v10;
        do
        {
          BOOL v43 = *(void *)(v10 + 24);
          a5 = *(__n128 *)(v10 + 8);
          *(void *)(v10 + 16) = 0;
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(v10 + 8) = 0;
          *(void *)uint64_t v10 = *(void *)v40;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)(v40 + 8);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v40 + 24);
          *(void *)double v40 = v42;
          *(__n128 *)(v40 + 8) = a5;
          *(void *)(v40 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v43;
          do
          {
            uint64_t v44 = *(void *)(v10 + 32);
            v10 += 32;
            unint64_t v42 = v44;
          }
          while (v19 >= v44);
          do
          {
            uint64_t v45 = *(void *)(v40 - 32);
            v40 -= 32;
          }
          while (v19 < v45);
        }
        while (v10 < v40);
      }
      char v5 = v10 - 32 >= a1;
      char v6 = v10 - 32 == a1;
      if (v10 - 32 == a1)
      {
        unint64_t v47 = *(void **)(v10 - 24);
        *(void *)a1 = v19;
        if (v47)
        {
          *(void *)(v10 - 16) = v47;
          uint64_t v113 = v37;
          operator delete(v47);
          double v37 = v113;
          *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        }
      }
      else
      {
        *(void *)a1 = *(void *)(v10 - 32);
        unint64_t v46 = *(void **)(a1 + 8);
        if (v46)
        {
          *(void *)(a1 + 16) = v46;
          uint64x2_t v112 = v37;
          operator delete(v46);
          double v37 = v112;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        }
        a5 = *(__n128 *)(v10 - 24);
        *(__n128 *)(a1 + 8) = a5;
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 - 8);
        *(void *)(v10 - 32) = v19;
        *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      }
      a4 = 0;
      *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
      *(_OWORD *)(v10 - 16) = v37;
    }
    else
    {
      sub_9D0C1C((unint64_t *)(a1 + 32 * (v12 >> 1)), (unint64_t *)a1, v110);
      --a3;
      unint64_t v19 = *(void *)a1;
      if ((a4 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v20 = 0;
      double v21 = *(void *)(a1 + 8);
      uint64_t v22 = *(_OWORD *)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(a1 + 8) = 0;
      do
      {
        unint64_t v23 = *(void *)(a1 + v20 + 32);
        v20 += 32;
      }
      while (v23 < v19);
      uint64_t v24 = a1 + v20;
      char v25 = a2;
      if (v20 == 32)
      {
        char v25 = a2;
        do
        {
          if (v24 >= v25) {
            break;
          }
          unint64_t v27 = *(void *)(v25 - 32);
          v25 -= 32;
        }
        while (v27 >= v19);
      }
      else
      {
        do
        {
          BOOL v26 = *(void *)(v25 - 32);
          v25 -= 32;
        }
        while (v26 >= v19);
      }
      uint64_t v10 = a1 + v20;
      if (v24 < v25)
      {
        double v28 = v25;
        do
        {
          double v29 = *(void *)(v10 + 24);
          double v30 = *(_OWORD *)(v10 + 8);
          *(void *)(v10 + 16) = 0;
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(v10 + 8) = 0;
          *(void *)uint64_t v10 = *(void *)v28;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)(v28 + 8);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v28 + 24);
          *(void *)double v28 = v23;
          *(_OWORD *)(v28 + 8) = v30;
          *(void *)(v28 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
          do
          {
            unint64_t v31 = *(void *)(v10 + 32);
            v10 += 32;
            unint64_t v23 = v31;
          }
          while (v31 < v19);
          do
          {
            unint64_t v32 = *(void *)(v28 - 32);
            v28 -= 32;
          }
          while (v32 >= v19);
        }
        while (v10 < v28);
      }
      if (v10 - 32 == a1)
      {
        double v34 = *(void **)(v10 - 24);
        *(void *)a1 = v19;
        if (v34)
        {
          *(void *)(v10 - 16) = v34;
          uint64_t v109 = v22;
          operator delete(v34);
          uint64_t v22 = v109;
          *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        }
      }
      else
      {
        *(void *)a1 = *(void *)(v10 - 32);
        double v33 = *(void **)(a1 + 8);
        if (v33)
        {
          *(void *)(a1 + 16) = v33;
          int64_t v108 = v22;
          operator delete(v33);
          uint64_t v22 = v108;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        }
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 - 24);
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 - 8);
        *(void *)(v10 - 32) = v19;
        *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      }
      *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v21;
      *(_OWORD *)(v10 - 16) = v22;
      if (v24 < v25)
      {
LABEL_35:
        sub_9D00B8(a1, v10 - 32, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        unint64_t v35 = sub_9D0D48(a1, v10 - 32);
        if (sub_9D0D48(v10, a2))
        {
          a2 = v10 - 32;
          if (v35) {
            return a5.n128_f64[0];
          }
          goto LABEL_1;
        }
        if (!v35) {
          goto LABEL_35;
        }
      }
    }
  }
  double v50 = (unint64_t *)(v10 + 32);
  uint64_t v52 = v10 == a2 || v50 == (unint64_t *)a2;
  if (a4)
  {
    if (v52) {
      return a5.n128_f64[0];
    }
    double v53 = 0;
    long long v54 = (unint64_t *)v10;
    while (1)
    {
      unint64_t v55 = v50;
      unint64_t v56 = v54[4];
      unint64_t v57 = *v54;
      if (v56 < *v54)
      {
        float64x2_t v58 = v54[5];
        double v59 = *((_OWORD *)v54 + 3);
        v54[6] = 0;
        v54[7] = 0;
        v54[5] = 0;
        unint64_t v60 = (void *)v55[1];
        *unint64_t v55 = v57;
        if (v60)
        {
          v55[2] = (unint64_t)v60;
          uint64_t v114 = v59;
          operator delete(v60);
          double v59 = v114;
          v55[2] = 0;
          v55[3] = 0;
        }
        int v61 = v54 + 1;
        a5 = *(__n128 *)(v54 + 1);
        *(__n128 *)(v55 + 1) = a5;
        v55[3] = v54[3];
        v54[1] = 0;
        v54[2] = 0;
        v54[3] = 0;
        if (v54 == (unint64_t *)v10)
        {
          long long v54 = (unint64_t *)v10;
        }
        else
        {
          double v62 = *(v54 - 4);
          if (v56 < v62)
          {
            float64_t v63 = v53;
            do
            {
              unint64_t v64 = v10 + v63;
              *(void *)unint64_t v64 = v62;
              a5 = *(__n128 *)(v10 + v63 - 24);
              *(__n128 *)(v64 + 8) = a5;
              *(void *)(v64 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 + v63 - 8);
              *(void *)(v64 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              *(void *)(v64 - 16) = 0;
              *(void *)(v64 - 8) = 0;
              v63 -= 32;
              if (!v63)
              {
                long long v54 = (unint64_t *)v10;
                goto LABEL_96;
              }
              double v62 = *(void *)(v64 - 64);
            }
            while (v56 < v62);
            long long v54 = (unint64_t *)(v10 + v63);
LABEL_96:
            int v61 = (unint64_t *)(v64 - 24);
          }
        }
        *long long v54 = v56;
        *int v61 = v58;
        *((_OWORD *)v54 + 1) = v59;
      }
      double v50 = v55 + 4;
      v53 += 32;
      long long v54 = v55;
      if (v55 + 4 == (unint64_t *)a2) {
        return a5.n128_f64[0];
      }
    }
  }
  if (!v52)
  {
    do
    {
      double v99 = *v50;
      uint64_t v100 = *(void *)a1;
      if (*v50 < *(void *)a1)
      {
        char v101 = *(void *)(a1 + 40);
        unsigned int v102 = *(_OWORD *)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        unsigned int v103 = (void *)v50[1];
        unint64_t *v50 = v100;
        if (v103)
        {
          v50[2] = (unint64_t)v103;
          unsigned int v115 = v102;
          operator delete(v103);
          unsigned int v102 = v115;
          v50[2] = 0;
          v50[3] = 0;
        }
        int v104 = (void *)(a1 + 8);
        a5 = *(__n128 *)(a1 + 8);
        *(__n128 *)(v50 + 1) = a5;
        v50[3] = *(void *)(a1 + 24);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        int v105 = *(void *)(a1 - 32);
        uint64_t v106 = a1;
        if (v99 < v105)
        {
          uint64_t v106 = a1;
          do
          {
            *(void *)uint64_t v106 = v105;
            int v105 = *(void *)(v106 - 64);
            a5 = *(__n128 *)(v106 - 24);
            *(__n128 *)(v106 + 8) = a5;
            *(void *)(v106 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v106 - 8);
            *(void *)(v106 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(void *)(v106 - 16) = 0;
            *(void *)(v106 - 8) = 0;
            v106 -= 32;
          }
          while (v99 < v105);
          int v104 = (void *)(v106 + 8);
        }
        *(void *)uint64_t v106 = v99;
        double *v104 = v101;
        *(_OWORD *)(v106 + 16) = v102;
      }
      v50 += 4;
      a1 += 32;
    }
    while (v50 != (unint64_t *)a2);
  }
  return a5.n128_f64[0];
}

  uint64_t v12 = a1;
  while (1)
  {
    a1 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    uint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
    if (!(!v6 & v5)) {
      break;
    }
    if (v13 <= 191)
    {
      int v139 = (int32x2_t *)&v12[1];
      uint64_t v141 = v12 == (uint32x2_t *)a2 || v139 == a2;
      if (a5)
      {
        if (!v141)
        {
          uint64_t v142 = 0;
          int v143 = v12;
          do
          {
            unsigned int v145 = v143->i32[0];
            long double v146 = v143->u32[1];
            uint64_t v147 = v143[1].u32[0];
            BOOL v148 = v143[1].u32[1];
            int v143 = (uint32x2_t *)v139;
            double v149 = v148 < v146;
            char v6 = v147 == v145;
            double v150 = v147 < v145;
            if (!v6) {
              double v149 = v150;
            }
            if (v149)
            {
              BOOL v151 = *v143;
              int v152 = HIDWORD(*(unint64_t *)v143);
              uint64_t v153 = v142;
              do
              {
                unint64_t v154 = (char *)v12 + v153;
                *(uint32x2_t *)((char *)&v12[1] + v153) = *(uint32x2_t *)((char *)v12 + v153);
                if (!v153)
                {
                  unsigned int v144 = v12;
                  goto LABEL_168;
                }
                unint64_t v155 = *((_DWORD *)v154 - 2);
                double v156 = *((_DWORD *)v154 - 1) > v152;
                char v6 = v155 == v151.i32[0];
                uint64_t v157 = v155 > v151.i32[0];
                if (!v6) {
                  double v156 = v157;
                }
                v153 -= 8;
              }
              while (v156);
              unsigned int v144 = (uint32x2_t *)((char *)v12 + v153 + 8);
LABEL_168:
              *unsigned int v144 = v151;
            }
            int v139 = (int32x2_t *)&v143[1];
            v142 += 8;
          }
          while (&v143[1] != (uint32x2_t *)a2);
        }
      }
      else if (!v141)
      {
        do
        {
          int v161 = a1->i32[0];
          uint64_t v162 = a1->u32[1];
          uint64_t v163 = a1[1].u32[0];
          unint64_t v164 = a1[1].u32[1];
          a1 = (uint32x2_t *)v139;
          unint64_t v165 = v164 < v162;
          char v6 = v163 == v161;
          uint64_t v166 = v163 < v161;
          if (v6) {
            uint64_t v166 = v165;
          }
          if (v166)
          {
            uint64_t v167 = *v139;
            uint64_t v168 = HIDWORD(*(unint64_t *)v139);
            do
            {
              uint64_t v169 = v139;
              int v170 = v139[-1];
              --v139;
              *uint64_t v169 = v170;
              uint64_t v171 = v169[-2].u32[0];
              uint64_t v172 = v169[-2].i32[1] > v168;
              char v6 = v171 == v167.i32[0];
              uint64_t v173 = v171 > v167.i32[0];
              if (!v6) {
                uint64_t v172 = v173;
              }
            }
            while (v172);
            *int v139 = v167;
          }
          int v139 = (int32x2_t *)&a1[1];
        }
        while (&a1[1] != (uint32x2_t *)a2);
      }
      return result;
    }
    if (!a4)
    {
      if (v12 != (uint32x2_t *)a2)
      {
        sub_9EFDAC(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = &v12[v14 >> 1];
    unint64_t v17 = a2[-1].u32[0];
    unint64_t v18 = a2[-1].u32[1];
    if ((unint64_t)v13 >= 0x401)
    {
      unint64_t v19 = v16->i32[0];
      uint64_t v20 = (unsigned __int32 *)&v12[v15] + 1;
      double v21 = v16->i32[0] < (unsigned __int32)v12->i32[0];
      if (v16->i32[0] == v12->i32[0]) {
        double v21 = *v20 < v12->i32[1];
      }
      uint64_t v22 = v18 < *v20;
      char v6 = v17 == v19;
      unint64_t v23 = v17 < v19;
      if (!v6) {
        uint64_t v22 = v23;
      }
      if (v21)
      {
        uint64_t v24 = *v12;
        if (v22)
        {
          *uint64_t v12 = (uint32x2_t)a2[-1];
          goto LABEL_36;
        }
        *uint64_t v12 = *v16;
        *uint64_t v16 = v24;
        double v38 = a2[-1].u32[0];
        double v39 = a2[-1].i32[1] < (unsigned __int32)v24.i32[1];
        char v6 = v38 == v24.i32[0];
        double v40 = v38 < v24.i32[0];
        if (!v6) {
          double v39 = v40;
        }
        if (v39)
        {
          *uint64_t v16 = (uint32x2_t)a2[-1];
LABEL_36:
          a2[-1] = (int32x2_t)v24;
        }
      }
      else if (v22)
      {
        unint64_t v32 = (int32x2_t)*v16;
        *uint64_t v16 = (uint32x2_t)a2[-1];
        a2[-1] = v32;
        double v33 = v16->i32[0] < (unsigned __int32)v12->i32[0];
        if (v16->i32[0] == v12->i32[0]) {
          double v33 = *v20 < v12->i32[1];
        }
        if (v33)
        {
          double v34 = *v12;
          *uint64_t v12 = *v16;
          *uint64_t v16 = v34;
        }
      }
      float64x2_t v41 = &v12[v15];
      uint64_t v44 = v41[-1].u32[0];
      unint64_t v42 = (unsigned int *)&v41[-1];
      BOOL v43 = v44;
      uint64_t v45 = v42 + 1;
      unint64_t v46 = v42[1];
      unint64_t v47 = v12[1].u32[0];
      char v6 = v44 == v47;
      double v48 = v44 < v47;
      if (v6) {
        double v48 = v46 < v12[1].i32[1];
      }
      double v49 = a2[-2].u32[0];
      double v50 = a2[-2].i32[1] < v46;
      char v6 = v49 == v43;
      float64x2_t v51 = v49 < v43;
      if (!v6) {
        double v50 = v51;
      }
      if (v48)
      {
        uint64_t v52 = (int32x2_t)v12[1];
        if (v50)
        {
          v12[1] = (uint32x2_t)a2[-2];
          goto LABEL_60;
        }
        v12[1] = *(uint32x2_t *)v42;
        *(int32x2_t *)unint64_t v42 = v52;
        unint64_t v60 = a2[-2].u32[0];
        int v61 = a2[-2].i32[1] < (unsigned __int32)v52.i32[1];
        char v6 = v60 == v52.i32[0];
        double v62 = v60 < v52.i32[0];
        if (!v6) {
          int v61 = v62;
        }
        if (v61)
        {
          *(int32x2_t *)unint64_t v42 = a2[-2];
LABEL_60:
          a2[-2] = v52;
        }
      }
      else if (v50)
      {
        double v53 = *(int32x2_t *)v42;
        *(int32x2_t *)unint64_t v42 = a2[-2];
        a2[-2] = v53;
        long long v54 = v12[1].u32[0];
        unint64_t v55 = *v42 < v54;
        if (*v42 == v54) {
          unint64_t v55 = *v45 < v12[1].i32[1];
        }
        if (v55)
        {
          unint64_t v56 = v12[1];
          v12[1] = *(uint32x2_t *)v42;
          *(uint32x2_t *)unint64_t v42 = v56;
        }
      }
      float64_t v63 = &v12[v15];
      double v66 = v63[1].u32[0];
      unint64_t v64 = (unsigned int *)&v63[1];
      unint64_t v65 = v66;
      double v67 = v64 + 1;
      int v68 = v64[1];
      double v69 = v12[2].u32[0];
      char v6 = v66 == v69;
      uint64_t v70 = v66 < v69;
      if (v6) {
        uint64_t v70 = v68 < v12[2].i32[1];
      }
      uint64_t v71 = a2[-3].u32[0];
      uint64_t v72 = a2[-3].i32[1] < v68;
      char v6 = v71 == v65;
      float64x2_t v73 = v71 < v65;
      if (!v6) {
        uint64_t v72 = v73;
      }
      if (v70)
      {
        float64x2_t v74 = (int32x2_t)v12[2];
        if (v72)
        {
          v12[2] = (uint32x2_t)a2[-3];
          goto LABEL_77;
        }
        v12[2] = *(uint32x2_t *)v64;
        *(int32x2_t *)unint64_t v64 = v74;
        float64x2_t v79 = a2[-3].u32[0];
        float64x2_t v80 = a2[-3].i32[1] < (unsigned __int32)v74.i32[1];
        char v6 = v79 == v74.i32[0];
        float64x2_t v81 = v79 < v74.i32[0];
        if (!v6) {
          float64x2_t v80 = v81;
        }
        if (v80)
        {
          *(int32x2_t *)unint64_t v64 = a2[-3];
LABEL_77:
          a2[-3] = v74;
        }
      }
      else if (v72)
      {
        double v75 = *(int32x2_t *)v64;
        *(int32x2_t *)unint64_t v64 = a2[-3];
        a2[-3] = v75;
        int8x16_t v76 = v12[2].u32[0];
        long long v77 = *v64 < v76;
        if (*v64 == v76) {
          long long v77 = *v67 < v12[2].i32[1];
        }
        if (v77)
        {
          float64x2_t v78 = v12[2];
          v12[2] = *(uint32x2_t *)v64;
          *(uint32x2_t *)unint64_t v64 = v78;
        }
      }
      double v82 = v16->i32[0];
      double v83 = *v42;
      double v84 = *v45;
      BOOL v85 = v16->i32[0] < *v42;
      if (v16->i32[0] == *v42) {
        BOOL v85 = *v20 < *v45;
      }
      double v86 = *v64;
      double v87 = *v67;
      char v6 = *v64 == v82;
      long long v88 = *v64 < v82;
      if (v6) {
        long long v88 = v87 < *v20;
      }
      if (v85)
      {
        BOOL v89 = *(uint32x2_t *)v42;
        if (v88)
        {
          *(void *)unint64_t v42 = *(void *)v64;
          *(uint32x2_t *)unint64_t v64 = v89;
          BOOL v89 = *v16;
          goto LABEL_95;
        }
        *(uint32x2_t *)unint64_t v42 = *v16;
        *uint64_t v16 = v89;
        long long v93 = v87 < v89.i32[1];
        if (v86 != v89.i32[0]) {
          long long v93 = v86 < v89.i32[0];
        }
        if (v93)
        {
          float64x2_t v92 = *(uint32x2_t *)v64;
          *uint64_t v16 = *(uint32x2_t *)v64;
          *(uint32x2_t *)unint64_t v64 = v89;
LABEL_94:
          BOOL v89 = v92;
        }
      }
      else
      {
        BOOL v89 = *v16;
        if (v88)
        {
          unsigned int v90 = *(uint32x2_t *)v64;
          *uint64_t v16 = *(uint32x2_t *)v64;
          *(uint32x2_t *)unint64_t v64 = v89;
          int v91 = *v20 < v84;
          if (v83 != v90.i32[0]) {
            int v91 = v83 > v90.i32[0];
          }
          BOOL v89 = v90;
          if (v91)
          {
            float64x2_t v92 = *(uint32x2_t *)v42;
            *(uint32x2_t *)unint64_t v42 = v90;
            *uint64_t v16 = v92;
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned __int8 v94 = *v12;
      *uint64_t v12 = v89;
      *uint64_t v16 = v94;
      --a4;
      if (a5) {
        goto LABEL_99;
      }
      goto LABEL_96;
    }
    char v25 = v12->i32[0];
    BOOL v26 = v12->u32[1];
    unint64_t v27 = (unsigned __int32 *)&v12[v15] + 1;
    double v28 = v26 < *v27;
    if (v12->i32[0] != v16->i32[0]) {
      double v28 = v12->i32[0] < (unsigned __int32)v16->i32[0];
    }
    double v29 = v18 < v26;
    char v6 = v17 == v25;
    double v30 = v17 < v25;
    if (v6) {
      double v30 = v29;
    }
    if (v28)
    {
      unint64_t v31 = *v16;
      if (v30)
      {
        *uint64_t v16 = (uint32x2_t)a2[-1];
LABEL_53:
        a2[-1] = (int32x2_t)v31;
        goto LABEL_54;
      }
      *uint64_t v16 = *v12;
      *uint64_t v12 = v31;
      unint64_t v57 = a2[-1].u32[0];
      float64x2_t v58 = a2[-1].i32[1] < (unsigned __int32)v31.i32[1];
      char v6 = v57 == v31.i32[0];
      double v59 = v57 < v31.i32[0];
      if (!v6) {
        float64x2_t v58 = v59;
      }
      if (v58)
      {
        *uint64_t v12 = (uint32x2_t)a2[-1];
        goto LABEL_53;
      }
    }
    else if (v30)
    {
      unint64_t v35 = *v12;
      *uint64_t v12 = (uint32x2_t)a2[-1];
      a2[-1] = (int32x2_t)v35;
      unint64_t v36 = v12->i32[1] < *v27;
      if (v12->i32[0] != v16->i32[0]) {
        unint64_t v36 = v12->i32[0] < (unsigned __int32)v16->i32[0];
      }
      if (v36)
      {
        double v37 = *v16;
        *uint64_t v16 = *v12;
        *uint64_t v12 = v37;
        --a4;
        if (a5) {
          goto LABEL_99;
        }
        goto LABEL_96;
      }
    }
LABEL_54:
    --a4;
    if (a5) {
      goto LABEL_99;
    }
LABEL_96:
    uint64_t v95 = v12[-1].u32[0];
    uint64_t v96 = v95 < v12->i32[0];
    if (v95 == v12->i32[0]) {
      uint64_t v96 = v12[-1].i32[1] < (unsigned __int32)v12->i32[1];
    }
    if (v96)
    {
LABEL_99:
      uint64_t v97 = 0;
      double v98 = *v12;
      double v99 = HIDWORD(*(unint64_t *)v12);
      do
      {
        uint64_t v100 = v12[v97 + 1].u32[0];
        char v101 = v12[v97 + 1].i32[1] < v99;
        char v6 = v100 == v98.i32[0];
        unsigned int v102 = v100 < v98.i32[0];
        if (!v6) {
          char v101 = v102;
        }
        ++v97;
      }
      while (v101);
      unsigned int v103 = &v12[v97];
      int v104 = a2;
      if (v97 == 1)
      {
        int v104 = a2;
        do
        {
          if (v103 >= (uint32x2_t *)v104) {
            break;
          }
          uint64_t v109 = v104[-1].u32[0];
          long double v110 = v104[-1].u32[1];
          --v104;
          long double v111 = v110 < v99;
          char v6 = v109 == v98.i32[0];
          uint64x2_t v112 = v109 < v98.i32[0];
          if (v6) {
            uint64x2_t v112 = v111;
          }
        }
        while (!v112);
      }
      else
      {
        do
        {
          int v105 = v104[-1].u32[0];
          uint64_t v106 = v104[-1].u32[1];
          --v104;
          unsigned int v107 = v106 < v99;
          char v6 = v105 == v98.i32[0];
          int64_t v108 = v105 < v98.i32[0];
          if (v6) {
            int64_t v108 = v107;
          }
        }
        while (!v108);
      }
      if (v103 >= (uint32x2_t *)v104)
      {
        uint64_t v124 = v103 - 1;
        if (&v103[-1] == v12) {
          goto LABEL_127;
        }
LABEL_126:
        *uint64_t v12 = *v124;
        goto LABEL_127;
      }
      uint64_t v113 = (unint64_t)v103;
      uint64_t v114 = v104;
      do
      {
        unsigned int v115 = *(int32x2_t *)v113;
        *(int32x2_t *)uint64_t v113 = *v114;
        *uint64_t v114 = v115;
        do
        {
          unsigned int v116 = *(_DWORD *)(v113 + 8);
          int v117 = *(_DWORD *)(v113 + 12);
          v113 += 8;
          unsigned int v118 = v117 < v99;
          char v6 = v116 == v98.i32[0];
          unsigned int v119 = v116 < v98.i32[0];
          if (v6) {
            unsigned int v119 = v118;
          }
        }
        while (v119);
        do
        {
          unsigned int v120 = v114[-1].u32[0];
          int v121 = v114[-1].u32[1];
          --v114;
          uint64_t v122 = v121 < v99;
          char v6 = v120 == v98.i32[0];
          long double v123 = v120 < v98.i32[0];
          if (v6) {
            long double v123 = v122;
          }
        }
        while (!v123);
      }
      while (v113 < (unint64_t)v114);
      uint64_t v124 = (uint32x2_t *)(v113 - 8);
      if ((uint32x2_t *)(v113 - 8) != v12) {
        goto LABEL_126;
      }
LABEL_127:
      *uint64_t v124 = v98;
      if (v103 < (uint32x2_t *)v104) {
        goto LABEL_130;
      }
      uint64x2_t v125 = sub_9EF794((int8x16_t *)v12, (int8x16_t *)v124);
      uint64_t v12 = v124 + 1;
      if (sub_9EF794((int8x16_t *)&v124[1], (int8x16_t *)a2))
      {
        a2 = (int32x2_t *)v124;
        if (v125) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v125)
      {
LABEL_130:
        sub_9EEC6C(a1, v124, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v124 + 1;
      }
    }
    else
    {
      uint64_t v12 = (uint32x2_t *)sub_9EF67C((unsigned int *)v12, (unsigned int *)a2);
      a5 = 0;
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v137 = a2[-1].u32[0];
      unsigned int v138 = v137 < v12->i32[0];
      if (v137 == v12->i32[0]) {
        unsigned int v138 = a2[-1].i32[1] < (unsigned __int32)v12->i32[1];
      }
      if (!v138) {
        return result;
      }
      uint64_t v133 = *v12;
      goto LABEL_150;
    case 3uLL:
      long double v127 = v12[1].u32[0];
      unsigned int v128 = v12[1].u32[1];
      unsigned int v129 = v127 < v12->i32[0];
      if (v127 == v12->i32[0]) {
        unsigned int v129 = v128 < v12->i32[1];
      }
      int v130 = a2[-1].u32[0];
      int v131 = a2[-1].i32[1] < v128;
      char v6 = v130 == v127;
      int v132 = v130 < v127;
      if (v6) {
        int v132 = v131;
      }
      if (v129)
      {
        uint64_t v133 = *v12;
        if (v132)
        {
LABEL_150:
          *uint64_t v12 = (uint32x2_t)a2[-1];
        }
        else
        {
          *uint64_t v12 = v12[1];
          v12[1] = v133;
          long double v134 = a2[-1].u32[0];
          double v135 = a2[-1].i32[1] < (unsigned __int32)v133.i32[1];
          char v6 = v134 == v133.i32[0];
          long double v136 = v134 < v133.i32[0];
          if (!v6) {
            double v135 = v136;
          }
          if (!v135) {
            return result;
          }
          v12[1] = (uint32x2_t)a2[-1];
        }
        a2[-1] = (int32x2_t)v133;
        return result;
      }
      if (v132)
      {
        double v158 = (int32x2_t)v12[1];
        v12[1] = (uint32x2_t)a2[-1];
        a2[-1] = v158;
        double v159 = v12[1].u32[0];
        uint64_t v160 = v159 < v12->i32[0];
        if (v159 == v12->i32[0]) {
          uint64_t v160 = v12[1].i32[1] < (unsigned __int32)v12->i32[1];
        }
        if (v160)
        {
          double result = vextq_s8(*(int8x16_t *)v12->i8, *(int8x16_t *)v12->i8, 8uLL);
          *(int8x16_t *)v12->i8 = result;
        }
      }
      break;
    case 4uLL:
      sub_9EFB08((unsigned int *)v12, (unsigned int *)&v12[1], (unsigned int *)&v12[2], (unsigned int *)&a2[-1]);
      return result;
    case 5uLL:
      sub_9EFC94((unsigned int *)v12, (unsigned int *)&v12[1], (unsigned int *)&v12[2], (unsigned int *)&v12[3], (unsigned int *)&a2[-1]);
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  unint64_t v11 = a2 - 168;
  uint64_t v12 = a1;
  while (1)
  {
    a1 = v12;
    uint64_t v13 = a2 - v12;
    uint64_t v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2 - v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          if (sub_B57110(a3, v11, a1)) {
            sub_B578F4(a1, v11);
          }
          break;
        case 3:
          sub_B574D0(a1, a1 + 168, v11, a3);
          break;
        case 4:
          sub_B579DC(a1, a1 + 168, a1 + 336, v11, a3);
          break;
        case 5:
          sub_B573E4(a1, a1 + 168, a1 + 336, a1 + 504, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 4031) {
      break;
    }
    if (!a4)
    {
      if (a1 == a2) {
        return;
      }
      double v49 = (unint64_t)(v14 - 2) >> 1;
      uint64x2_t v112 = v49;
      do
      {
        double v50 = v49;
        if (v112 >= v49)
        {
          float64x2_t v51 = (2 * v49) | 1;
          uint64_t v52 = a1 + 168 * v51;
          if (2 * v49 + 2 < v14 && sub_B57110(a3, a1 + 168 * v51, v52 + 168))
          {
            v52 += 168;
            float64x2_t v51 = 2 * v50 + 2;
          }
          double v53 = (long long *)(a1 + 168 * v50);
          if (!sub_B57110(a3, v52, (uint64_t)v53))
          {
            long long v54 = *(_DWORD *)(a1 + 168 * v50 + 160);
            unsigned int v129 = v54;
            if (v54)
            {
              if (v54 == 1)
              {
                unint64_t v55 = *v53;
                *(_OWORD *)&v122[12] = *(long long *)((char *)v53 + 12);
                *(_OWORD *)uint64_t v122 = v55;
              }
            }
            else
            {
              sub_9F6FA0((uint64_t)v122, (long long *)(a1 + 168 * v50));
            }
            do
            {
              unint64_t v56 = v52;
              sub_B46394((uint64_t)v53, v52);
              if (v112 < v51) {
                break;
              }
              unint64_t v57 = (2 * v51) | 1;
              uint64_t v52 = a1 + 168 * v57;
              float64x2_t v51 = 2 * v51 + 2;
              if (v51 < v14)
              {
                if (sub_B57110(a3, a1 + 168 * v57, v52 + 168)) {
                  v52 += 168;
                }
                else {
                  float64x2_t v51 = v57;
                }
              }
              else
              {
                float64x2_t v51 = v57;
              }
              double v53 = (long long *)v56;
            }
            while (!sub_B57110(a3, v52, (uint64_t)v122));
            sub_B46394(v56, (uint64_t)v122);
            if (!v129)
            {
              if (__p)
              {
                unsigned int v128 = __p;
                operator delete(__p);
              }
              if (v125)
              {
                uint64_t v126 = v125;
                operator delete(v125);
              }
              if (v123)
              {
                uint64_t v124 = v123;
                operator delete(v123);
              }
            }
          }
        }
        double v49 = v50 - 1;
      }
      while (v50);
      float64x2_t v58 = v13 / 0xA8uLL;
      while (1)
      {
        unint64_t v60 = *(_DWORD *)(a1 + 160);
        int v121 = v60;
        if (v60 == 1)
        {
          int v61 = *(_OWORD *)a1;
          *(_OWORD *)&v114[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)uint64_t v114 = v61;
        }
        else if (!v60)
        {
          sub_9F6FA0((uint64_t)v114, (long long *)a1);
        }
        double v62 = 0;
        float64_t v63 = a1;
        do
        {
          unint64_t v65 = v63;
          v63 += 168 * v62 + 168;
          double v66 = 2 * v62;
          double v62 = (2 * v62) | 1;
          double v67 = v66 + 2;
          if (v66 + 2 < v58 && sub_B57110(a3, v63, v63 + 168))
          {
            v63 += 168;
            double v62 = v67;
          }
          if (v65 != v63)
          {
            int v68 = *(_DWORD *)(v65 + 160);
            double v69 = *(_DWORD *)(v63 + 160);
            if (v68 == v69)
            {
              if (v68 == 1)
              {
                float64x2_t v79 = *(_OWORD *)v63;
                *(_OWORD *)(v65 + 12) = *(_OWORD *)(v63 + 12);
                *(_OWORD *)unint64_t v65 = v79;
              }
              else if (!v68)
              {
                uint64_t v70 = *(_OWORD *)v63;
                uint64_t v71 = *(_OWORD *)(v63 + 16);
                uint64_t v72 = *(_OWORD *)(v63 + 32);
                *(_OWORD *)(v65 + 44) = *(_OWORD *)(v63 + 44);
                *(_OWORD *)(v65 + 16) = v71;
                *(_OWORD *)(v65 + 32) = v72;
                *(_OWORD *)unint64_t v65 = v70;
                float64x2_t v73 = *(void **)(v65 + 64);
                if (v73)
                {
                  *(void *)(v65 + 72) = v73;
                  operator delete(v73);
                  *(void *)(v65 + 64) = 0;
                  *(void *)(v65 + 72) = 0;
                  *(void *)(v65 + 80) = 0;
                }
                *(_OWORD *)(v65 + 64) = *(_OWORD *)(v63 + 64);
                *(void *)(v65 + 80) = *(void *)(v63 + 80);
                *(void *)(v63 + 64) = 0;
                *(void *)(v63 + 72) = 0;
                *(void *)(v63 + 80) = 0;
                float64x2_t v74 = *(void **)(v65 + 88);
                if (v74)
                {
                  *(void *)(v65 + 96) = v74;
                  operator delete(v74);
                  *(void *)(v65 + 88) = 0;
                  *(void *)(v65 + 96) = 0;
                  *(void *)(v65 + 104) = 0;
                }
                *(_OWORD *)(v65 + 88) = *(_OWORD *)(v63 + 88);
                *(void *)(v65 + 104) = *(void *)(v63 + 104);
                *(void *)(v63 + 88) = 0;
                *(void *)(v63 + 96) = 0;
                *(void *)(v63 + 104) = 0;
                double v75 = *(void **)(v65 + 120);
                *(_DWORD *)(v65 + 112) = *(_DWORD *)(v63 + 112);
                if (v75)
                {
                  *(void *)(v65 + 128) = v75;
                  operator delete(v75);
                  *(void *)(v65 + 120) = 0;
                  *(void *)(v65 + 128) = 0;
                  *(void *)(v65 + 136) = 0;
                }
                *(_OWORD *)(v65 + 120) = *(_OWORD *)(v63 + 120);
                *(void *)(v65 + 136) = *(void *)(v63 + 136);
                *(void *)(v63 + 120) = 0;
                *(void *)(v63 + 128) = 0;
                *(void *)(v63 + 136) = 0;
                *(_OWORD *)(v65 + 144) = *(_OWORD *)(v63 + 144);
              }
            }
            else
            {
              if (!v68)
              {
                int8x16_t v76 = *(void **)(v65 + 120);
                if (v76)
                {
                  *(void *)(v65 + 128) = v76;
                  operator delete(v76);
                }
                long long v77 = *(void **)(v65 + 88);
                if (v77)
                {
                  *(void *)(v65 + 96) = v77;
                  operator delete(v77);
                }
                float64x2_t v78 = *(void **)(v65 + 64);
                if (v78)
                {
                  *(void *)(v65 + 72) = v78;
                  operator delete(v78);
                }
                double v69 = *(_DWORD *)(v63 + 160);
              }
              if (v69 == 1)
              {
                unint64_t v64 = *(_OWORD *)v63;
                *(_OWORD *)(v65 + 12) = *(_OWORD *)(v63 + 12);
                *(_OWORD *)unint64_t v65 = v64;
              }
              else if (!v69)
              {
                sub_9F6FA0(v65, (long long *)v63);
              }
              *(_DWORD *)(v65 + 160) = *(_DWORD *)(v63 + 160);
            }
          }
        }
        while (v62 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
        if (v63 == a2 - 168)
        {
          sub_B46394(v63, (uint64_t)v114);
          goto LABEL_223;
        }
        sub_B46394(v63, a2 - 168);
        sub_B46394(a2 - 168, (uint64_t)v114);
        float64x2_t v80 = v63 - a1 + 168;
        if (v80 >= 169)
        {
          float64x2_t v81 = (v80 / 0xA8uLL - 2) >> 1;
          double v82 = a1 + 168 * v81;
          if (sub_B57110(a3, v82, v63)) {
            break;
          }
        }
LABEL_223:
        if (!v121)
        {
          if (v119)
          {
            unsigned int v120 = v119;
            operator delete(v119);
          }
          if (v117)
          {
            unsigned int v118 = v117;
            operator delete(v117);
          }
          if (v115)
          {
            unsigned int v116 = v115;
            operator delete(v115);
          }
        }
        a2 -= 168;
        if (v58-- <= 2) {
          return;
        }
      }
      double v83 = *(_DWORD *)(v63 + 160);
      unsigned int v129 = v83;
      if (v83)
      {
        if (v83 == 1)
        {
          double v84 = *(_OWORD *)v63;
          *(_OWORD *)&v122[12] = *(_OWORD *)(v63 + 12);
          *(_OWORD *)uint64_t v122 = v84;
        }
      }
      else
      {
        sub_9F6FA0((uint64_t)v122, (long long *)v63);
      }
      while (1)
      {
        BOOL v85 = v82;
        if (v63 == v82) {
          goto LABEL_212;
        }
        double v86 = *(_DWORD *)(v63 + 160);
        double v87 = *(_DWORD *)(v82 + 160);
        if (v86 != v87) {
          break;
        }
        if (v86 == 1)
        {
          float64x2_t v92 = *(_OWORD *)v82;
          *(_OWORD *)(v63 + 12) = *(_OWORD *)(v82 + 12);
          *(_OWORD *)float64_t v63 = v92;
          if (!v81)
          {
LABEL_216:
            sub_B46394(v85, (uint64_t)v122);
            if (!v129)
            {
              if (__p)
              {
                unsigned int v128 = __p;
                operator delete(__p);
              }
              if (v125)
              {
                uint64_t v126 = v125;
                operator delete(v125);
              }
              if (v123)
              {
                uint64_t v124 = v123;
                operator delete(v123);
              }
            }
            goto LABEL_223;
          }
        }
        else
        {
          if (v86) {
            goto LABEL_212;
          }
          sub_B464AC(v63, (long long *)v82);
          if (!v81) {
            goto LABEL_216;
          }
        }
LABEL_213:
        float64x2_t v81 = (v81 - 1) >> 1;
        double v82 = a1 + 168 * v81;
        float64_t v63 = v85;
        if (!sub_B57110(a3, v82, (uint64_t)v122)) {
          goto LABEL_216;
        }
      }
      if (v86)
      {
        if (v87 != 1)
        {
LABEL_201:
          if (!v87) {
            sub_9F6FA0(v63, (long long *)v82);
          }
          goto LABEL_211;
        }
      }
      else
      {
        long long v88 = *(void **)(v63 + 120);
        if (v88)
        {
          *(void *)(v63 + 128) = v88;
          operator delete(v88);
        }
        BOOL v89 = *(void **)(v63 + 88);
        if (v89)
        {
          *(void *)(v63 + 96) = v89;
          operator delete(v89);
        }
        unsigned int v90 = *(void **)(v63 + 64);
        if (v90)
        {
          *(void *)(v63 + 72) = v90;
          operator delete(v90);
        }
        double v87 = *(_DWORD *)(v82 + 160);
        if (v87 != 1) {
          goto LABEL_201;
        }
      }
      int v91 = *(_OWORD *)v82;
      *(_OWORD *)(v63 + 12) = *(_OWORD *)(v82 + 12);
      *(_OWORD *)float64_t v63 = v91;
LABEL_211:
      *(_DWORD *)(v63 + 160) = *(_DWORD *)(v82 + 160);
LABEL_212:
      if (!v81) {
        goto LABEL_216;
      }
      goto LABEL_213;
    }
    unint64_t v15 = (unint64_t)v14 >> 1;
    uint64_t v16 = a1 + 168 * ((unint64_t)v14 >> 1);
    if ((unint64_t)v13 < 0x5401)
    {
      sub_B574D0(v16, a1, v11, a3);
    }
    else
    {
      sub_B574D0(a1, v16, v11, a3);
      sub_B574D0(a1 + 168, a1 + 168 * v15 - 168, a2 - 336, a3);
      sub_B574D0(a1 + 336, a1 + 168 * v15 + 168, a2 - 504, a3);
      sub_B574D0(a1 + 168 * v15 - 168, v16, a1 + 168 * v15 + 168, a3);
      sub_B578F4(a1, v16);
    }
    --a4;
    if ((a5 & 1) != 0 || sub_B57110(a3, a1 - 168, a1))
    {
      unint64_t v17 = *(_DWORD *)(a1 + 160);
      unsigned int v129 = v17;
      if (v17)
      {
        if (v17 == 1)
        {
          unint64_t v18 = *(_OWORD *)a1;
          *(_OWORD *)&v122[12] = *(_OWORD *)(a1 + 12);
          *(_OWORD *)uint64_t v122 = v18;
        }
      }
      else
      {
        sub_9F6FA0((uint64_t)v122, (long long *)a1);
      }
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = sub_B57110(a3, a1 + v19 + 168, (uint64_t)v122);
        v19 += 168;
      }
      while (v20);
      double v21 = a1 + v19;
      uint64_t v22 = a2;
      if (v19 == 168)
      {
        uint64_t v22 = a2;
        do
        {
          if (v21 >= v22) {
            break;
          }
          v22 -= 168;
        }
        while (!sub_B57110(a3, v22, (uint64_t)v122));
      }
      else
      {
        do
          v22 -= 168;
        while (!sub_B57110(a3, v22, (uint64_t)v122));
      }
      if (v21 >= v22)
      {
        char v25 = v21 - 168;
        if (v21 - 168 == a1) {
          goto LABEL_33;
        }
LABEL_32:
        sub_B46394(a1, v25);
        goto LABEL_33;
      }
      unint64_t v23 = a1 + v19;
      uint64_t v24 = v22;
      do
      {
        sub_B578F4(v23, v24);
        do
          v23 += 168;
        while (sub_B57110(a3, v23, (uint64_t)v122));
        do
          v24 -= 168;
        while (!sub_B57110(a3, v24, (uint64_t)v122));
      }
      while (v23 < v24);
      char v25 = v23 - 168;
      if (v25 != a1) {
        goto LABEL_32;
      }
LABEL_33:
      sub_B46394(v25, (uint64_t)v122);
      if (!v129)
      {
        if (__p)
        {
          unsigned int v128 = __p;
          operator delete(__p);
        }
        if (v125)
        {
          uint64_t v126 = v125;
          operator delete(v125);
        }
        if (v123)
        {
          uint64_t v124 = v123;
          operator delete(v123);
        }
      }
      if (v21 < v22)
      {
LABEL_43:
        sub_B55FAC(a1, v25, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v25 + 168;
      }
      else
      {
        BOOL v26 = sub_B575D8(a1, v25, a3);
        uint64_t v12 = v25 + 168;
        if (sub_B575D8(v25 + 168, a2, a3))
        {
          a2 = v25;
          if (v26) {
            return;
          }
          goto LABEL_1;
        }
        if (!v26) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      unint64_t v27 = *(_DWORD *)(a1 + 160);
      unsigned int v129 = v27;
      if (v27 == 1)
      {
        double v29 = *(_OWORD *)a1;
        *(_OWORD *)&v122[12] = *(_OWORD *)(a1 + 12);
        *(_OWORD *)uint64_t v122 = v29;
        double v28 = a2;
      }
      else
      {
        double v28 = a2;
        if (!v27) {
          sub_9F6FA0((uint64_t)v122, (long long *)a1);
        }
      }
      if (sub_B57110(a3, (uint64_t)v122, v11))
      {
        uint64_t v12 = a1;
        do
          v12 += 168;
        while (!sub_B57110(a3, (uint64_t)v122, v12));
      }
      else
      {
        double v30 = a1 + 168;
        do
        {
          uint64_t v12 = v30;
          if (v30 >= v28) {
            break;
          }
          unint64_t v31 = sub_B57110(a3, (uint64_t)v122, v30);
          double v30 = v12 + 168;
        }
        while (!v31);
      }
      unint64_t v32 = v28;
      if (v12 < v28)
      {
        unint64_t v32 = a2;
        do
          v32 -= 168;
        while (sub_B57110(a3, (uint64_t)v122, v32));
      }
      while (v12 < v32)
      {
        sub_B578F4(v12, v32);
        do
          v12 += 168;
        while (!sub_B57110(a3, (uint64_t)v122, v12));
        do
          v32 -= 168;
        while (sub_B57110(a3, (uint64_t)v122, v32));
      }
      if (v12 - 168 != a1) {
        sub_B46394(a1, v12 - 168);
      }
      sub_B46394(v12 - 168, (uint64_t)v122);
      if (!v129)
      {
        if (__p)
        {
          unsigned int v128 = __p;
          operator delete(__p);
        }
        if (v125)
        {
          uint64_t v126 = v125;
          operator delete(v125);
        }
        if (v123)
        {
          uint64_t v124 = v123;
          operator delete(v123);
        }
      }
      a5 = 0;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (a1 == a2) {
      return;
    }
    long long v93 = a1 + 168;
    if (a1 + 168 == a2) {
      return;
    }
    for (double i = a1 + 80; ; i += 168)
    {
      uint64_t v95 = (long long *)v93;
      if (sub_B57110(a3, v93, a1)) {
        break;
      }
LABEL_233:
      long long v93 = (uint64_t)v95 + 168;
      a1 = (uint64_t)v95;
      if ((long long *)((char *)v95 + 168) == (long long *)a2) {
        return;
      }
    }
    uint64_t v96 = *(_DWORD *)(a1 + 328);
    unsigned int v129 = v96;
    if (v96)
    {
      uint64_t v97 = i;
      if (v96 != 1) {
        goto LABEL_240;
      }
      double v98 = *v95;
      *(_OWORD *)&v122[12] = *(long long *)((char *)v95 + 12);
      *(_OWORD *)uint64_t v122 = v98;
    }
    else
    {
      sub_9F6FA0((uint64_t)v122, v95);
    }
    uint64_t v97 = i;
    while (1)
    {
LABEL_240:
      double v99 = (_OWORD *)(v97 + 88);
      uint64_t v100 = (_OWORD *)(v97 - 80);
      char v101 = *(_DWORD *)(v97 + 248);
      unsigned int v102 = *(_DWORD *)(v97 + 80);
      if (v101 == v102)
      {
        if (v101 == 1)
        {
          *double v99 = *v100;
          *(_OWORD *)(v97 + 100) = *(_OWORD *)(v97 - 68);
        }
        else if (!v101)
        {
          unsigned int v103 = *(_OWORD *)(v97 - 64);
          *double v99 = *v100;
          *(_OWORD *)(v97 + 104) = v103;
          *(_OWORD *)(v97 + 120) = *(_OWORD *)(v97 - 48);
          *(_OWORD *)(v97 + 132) = *(_OWORD *)(v97 - 36);
          int v104 = *(void **)(v97 + 152);
          if (v104)
          {
            *(void *)(v97 + 160) = v104;
            operator delete(v104);
            *(void *)(v97 + 152) = 0;
            *(void *)(v97 + 160) = 0;
            *(void *)(v97 + 168) = 0;
          }
          int v105 = (void *)(v97 - 16);
          *(_OWORD *)(v97 + 152) = *(_OWORD *)(v97 - 16);
          *(void *)(v97 + 168) = *(void *)v97;
          v105[1] = 0;
          *(void *)uint64_t v97 = 0;
          double *v105 = 0;
          uint64_t v106 = *(void **)(v97 + 176);
          if (v106)
          {
            *(void *)(v97 + 184) = v106;
            operator delete(v106);
            *(void *)(v97 + 176) = 0;
            *(void *)(v97 + 184) = 0;
            *(void *)(v97 + 192) = 0;
          }
          unsigned int v107 = *(void **)(v97 + 208);
          *(_OWORD *)(v97 + 176) = *(_OWORD *)(v97 + 8);
          *(void *)(v97 + 192) = *(void *)(v97 + 24);
          *(void *)(v97 + 16) = 0;
          *(void *)(v97 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(v97 + 8) = 0;
          *(_DWORD *)(v97 + 200) = *(_DWORD *)(v97 + 32);
          if (v107)
          {
            *(void *)(v97 + 216) = v107;
            operator delete(v107);
            *(void *)(v97 + 208) = 0;
            *(void *)(v97 + 216) = 0;
            *(void *)(v97 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          }
          *(_OWORD *)(v97 + 208) = *(_OWORD *)(v97 + 40);
          *(void *)(v97 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v97 + 56);
          *(void *)(v97 + 48) = 0;
          *(void *)(v97 + 56) = 0;
          *(void *)(v97 + 40) = 0;
          *(_OWORD *)(v97 + 232) = *(_OWORD *)(v97 + 64);
        }
        goto LABEL_264;
      }
      if (v101)
      {
        if (v102 != 1) {
          goto LABEL_253;
        }
      }
      else
      {
        int64_t v108 = *(void **)(v97 + 208);
        if (v108)
        {
          *(void *)(v97 + 216) = v108;
          operator delete(v108);
        }
        uint64_t v109 = *(void **)(v97 + 176);
        if (v109)
        {
          *(void *)(v97 + 184) = v109;
          operator delete(v109);
        }
        long double v110 = *(void **)(v97 + 152);
        if (v110)
        {
          *(void *)(v97 + 160) = v110;
          operator delete(v110);
        }
        unsigned int v102 = *(_DWORD *)(v97 + 80);
        if (v102 != 1)
        {
LABEL_253:
          if (!v102) {
            sub_9F6FA0(v97 + 88, (long long *)(v97 - 80));
          }
          goto LABEL_263;
        }
      }
      *double v99 = *v100;
      *(_OWORD *)(v97 + 100) = *(_OWORD *)(v97 - 68);
LABEL_263:
      *(_DWORD *)(v97 + 248) = *(_DWORD *)(v97 + 80);
LABEL_264:
      long double v111 = sub_B57110(a3, (uint64_t)v122, v97 - 248);
      v97 -= 168;
      if (!v111)
      {
        sub_B46394(v97 + 88, (uint64_t)v122);
        if (!v129)
        {
          if (__p)
          {
            unsigned int v128 = __p;
            operator delete(__p);
          }
          if (v125)
          {
            uint64_t v126 = v125;
            operator delete(v125);
          }
          if (v123)
          {
            uint64_t v124 = v123;
            operator delete(v123);
          }
        }
        goto LABEL_233;
      }
    }
  }
  if (a1 == a2) {
    return;
  }
  double v33 = a1 + 168;
  if (a1 + 168 == a2) {
    return;
  }
  double v34 = 0;
  unint64_t v35 = a1;
  while (2)
  {
    unint64_t v36 = (long long *)v33;
    if (!sub_B57110(a3, v33, v35)) {
      goto LABEL_85;
    }
    double v37 = *(_DWORD *)(v35 + 328);
    unsigned int v129 = v37;
    if (v37)
    {
      double v38 = v34;
      if (v37 != 1) {
        goto LABEL_92;
      }
      double v39 = *v36;
      *(_OWORD *)&v122[12] = *(long long *)((char *)v36 + 12);
      *(_OWORD *)uint64_t v122 = v39;
    }
    else
    {
      sub_9F6FA0((uint64_t)v122, v36);
    }
    double v38 = v34;
LABEL_92:
    while (2)
    {
      double v40 = a1 + v38;
      float64x2_t v41 = (_OWORD *)(a1 + v38 + 168);
      unint64_t v42 = *(_DWORD *)(a1 + v38 + 328);
      BOOL v43 = *(_DWORD *)(a1 + v38 + 160);
      if (v42 != v43)
      {
        if (v42)
        {
          if (v43 != 1)
          {
LABEL_99:
            if (!v43) {
              sub_9F6FA0(a1 + v38 + 168, (long long *)(a1 + v38));
            }
            goto LABEL_109;
          }
        }
        else
        {
          uint64_t v44 = a1 + v38;
          uint64_t v45 = *(void **)(a1 + v38 + 288);
          if (v45)
          {
            *(void *)(v44 + 296) = v45;
            operator delete(v45);
          }
          unint64_t v46 = *(void **)(v44 + 256);
          if (v46)
          {
            *(void *)(a1 + v38 + 264) = v46;
            operator delete(v46);
          }
          unint64_t v47 = *(void **)(a1 + v38 + 232);
          if (v47)
          {
            *(void *)(a1 + v38 + 240) = v47;
            operator delete(v47);
          }
          BOOL v43 = *(_DWORD *)(v40 + 160);
          if (v43 != 1) {
            goto LABEL_99;
          }
        }
        *float64x2_t v41 = *(_OWORD *)v40;
        *(_OWORD *)(a1 + v38 + 180) = *(_OWORD *)(v40 + 12);
LABEL_109:
        *(_DWORD *)(v40 + 328) = *(_DWORD *)(v40 + 160);
        goto LABEL_110;
      }
      if (v42 == 1)
      {
        *float64x2_t v41 = *(_OWORD *)v40;
        *(_OWORD *)(a1 + v38 + 180) = *(_OWORD *)(v40 + 12);
        if (!v38)
        {
LABEL_114:
          sub_B46394(a1, (uint64_t)v122);
          if (v129) {
            goto LABEL_85;
          }
          goto LABEL_117;
        }
      }
      else
      {
        if (!v42)
        {
          sub_B464AC(a1 + v38 + 168, (long long *)(a1 + v38));
          if (!v38) {
            goto LABEL_114;
          }
          goto LABEL_111;
        }
LABEL_110:
        if (!v38) {
          goto LABEL_114;
        }
      }
LABEL_111:
      double v48 = sub_B57110(a3, (uint64_t)v122, a1 + v38 - 168);
      v38 -= 168;
      if (v48) {
        continue;
      }
      break;
    }
    sub_B46394(a1 + v38 + 168, (uint64_t)v122);
    if (v129) {
      goto LABEL_85;
    }
LABEL_117:
    if (__p)
    {
      unsigned int v128 = __p;
      operator delete(__p);
    }
    if (v125)
    {
      uint64_t v126 = v125;
      operator delete(v125);
    }
    if (v123)
    {
      uint64_t v124 = v123;
      operator delete(v123);
    }
LABEL_85:
    double v33 = (uint64_t)v36 + 168;
    v34 += 168;
    unint64_t v35 = (uint64_t)v36;
    if ((long long *)((char *)v36 + 168) != (long long *)a2) {
      continue;
    }
    break;
  }
}

  unint64_t v11 = (char *)a2 - 40;
  uint64_t v270 = (__n128 *)((char *)a2 - 120);
  uint64_t v271 = a2 - 5;
  uint64_t v12 = a1;
  while (1)
  {
    a1 = v12;
    uint64_t v13 = (uint64_t)a2 - v12;
    uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 959)
    {
      uint64_t v231 = (long long *)(v12 + 40);
      int v233 = (long long *)v12 == a2 || v231 == a2;
      if (a5)
      {
        if (!v233)
        {
          int v234 = 0;
          uint64_t v235 = v12;
          do
          {
            uint64_t v239 = (char *)v235;
            uint64_t v235 = (unint64_t)v231;
            if ((*a3)((uint64_t)v231, v239))
            {
              uint64_t v240 = *(__n128 *)v235;
              uint64_t v241 = *(_OWORD *)(v235 + 16);
              uint64_t v278 = *(void *)(v235 + 32);
              uint64_t v276 = v240;
              uint64_t v277 = v241;
              uint64_t v242 = v234;
              do
              {
                uint64_t v243 = v12 + v242;
                uint64_t v244 = *(_OWORD *)(v12 + v242 + 16);
                *(_OWORD *)(v243 + 40) = *(_OWORD *)(v12 + v242);
                *(_OWORD *)(v243 + 56) = v244;
                *(unsigned char *)(v243 + 72) = *(unsigned char *)(v12 + v242 + 32);
                if (!v242)
                {
                  uint64_t v236 = v12;
                  goto LABEL_120;
                }
                v242 -= 40;
              }
              while ((((uint64_t (*)(__n128 *, unint64_t))*a3)(&v276, v242 + v12) & 1) != 0);
              uint64_t v236 = v12 + v242 + 40;
LABEL_120:
              uint64_t v237 = v276;
              uint64_t v238 = v277;
              *(unsigned char *)(v236 + 32) = v278;
              *(__n128 *)uint64_t v236 = v237;
              *(_OWORD *)(v236 + 16) = v238;
            }
            uint64_t v231 = (long long *)(v235 + 40);
            v234 += 40;
          }
          while ((long long *)(v235 + 40) != a2);
        }
      }
      else if (!v233)
      {
        uint64_t v254 = v12 - 40;
        do
        {
          uint64_t v255 = (char *)a1;
          a1 = (unint64_t)v231;
          if ((*a3)((uint64_t)v231, v255))
          {
            uint64_t v256 = *(__n128 *)a1;
            uint64_t v257 = *(_OWORD *)(a1 + 16);
            uint64_t v278 = *(void *)(a1 + 32);
            uint64_t v276 = v256;
            uint64_t v277 = v257;
            uint64_t v258 = v254;
            do
            {
              uint64_t v259 = *(_OWORD *)(v258 + 56);
              *(_OWORD *)(v258 + 80) = *(_OWORD *)(v258 + 40);
              *(_OWORD *)(v258 + 96) = v259;
              *(unsigned char *)(v258 + 112) = *(unsigned char *)(v258 + 72);
              uint64_t v260 = (*a3)((uint64_t)&v276, (char *)v258);
              v258 -= 40;
            }
            while ((v260 & 1) != 0);
            uint64_t v261 = v276;
            uint64_t v262 = v277;
            *(unsigned char *)(v258 + 112) = v278;
            *(__n128 *)(v258 + 80) = v261;
            *(_OWORD *)(v258 + 96) = v262;
          }
          uint64_t v231 = (long long *)(a1 + 40);
          v254 += 40;
        }
        while ((long long *)(a1 + 40) != a2);
      }
      return;
    }
    if (!a4)
    {
      if ((long long *)v12 != a2) {
        sub_BA0080(v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = v12 + 40 * (v14 >> 1);
    unint64_t v17 = *a3;
    if ((unint64_t)v13 >= 0x1401)
    {
      unint64_t v18 = v17(v12 + 40 * (v14 >> 1), (char *)v12);
      unint64_t v19 = (*a3)((uint64_t)a2 - 40, (char *)v16);
      if (v18)
      {
        if (v19)
        {
          uint64_t v20 = *(__n128 *)v12;
          double v21 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v20;
          uint64_t v277 = v21;
          uint64_t v22 = *(_OWORD *)v11;
          unint64_t v23 = *(long long *)((char *)a2 - 24);
          *(unsigned char *)(v12 + 32) = *((unsigned char *)a2 - 8);
          *(_OWORD *)uint64_t v12 = v22;
          *(_OWORD *)(v12 + 16) = v23;
        }
        else
        {
          long long v54 = *(__n128 *)v12;
          unint64_t v55 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v54;
          uint64_t v277 = v55;
          unint64_t v56 = *(__n128 *)v16;
          unint64_t v57 = *(_OWORD *)(v16 + 16);
          *(unsigned char *)(v12 + 32) = *(unsigned char *)(v16 + 32);
          *(__n128 *)uint64_t v12 = v56;
          *(_OWORD *)(v12 + 16) = v57;
          float64x2_t v58 = v276;
          double v59 = v277;
          *(unsigned char *)(v16 + 32) = v278;
          *(__n128 *)uint64_t v16 = v58;
          *(_OWORD *)(v16 + 16) = v59;
          if (!(*a3)((uint64_t)a2 - 40, (char *)v16)) {
            goto LABEL_24;
          }
          unint64_t v60 = *(__n128 *)v16;
          int v61 = *(_OWORD *)(v16 + 16);
          uint64_t v278 = *(void *)(v16 + 32);
          uint64_t v276 = v60;
          uint64_t v277 = v61;
          double v62 = *(_OWORD *)v11;
          float64_t v63 = *(long long *)((char *)a2 - 24);
          *(unsigned char *)(v16 + 32) = *((unsigned char *)a2 - 8);
          *(_OWORD *)uint64_t v16 = v62;
          *(_OWORD *)(v16 + 16) = v63;
        }
        unint64_t v64 = v276;
        unint64_t v65 = v277;
        *((unsigned char *)a2 - 8) = v278;
        *(__n128 *)unint64_t v11 = v64;
        *(long long *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v65;
      }
      else if (v19)
      {
        double v30 = *(__n128 *)v16;
        unint64_t v31 = *(_OWORD *)(v16 + 16);
        uint64_t v278 = *(void *)(v16 + 32);
        uint64_t v276 = v30;
        uint64_t v277 = v31;
        unint64_t v32 = *(_OWORD *)v11;
        double v33 = *(long long *)((char *)a2 - 24);
        *(unsigned char *)(v16 + 32) = *((unsigned char *)a2 - 8);
        *(_OWORD *)uint64_t v16 = v32;
        *(_OWORD *)(v16 + 16) = v33;
        double v34 = v276;
        unint64_t v35 = v277;
        *((unsigned char *)a2 - 8) = v278;
        *(__n128 *)unint64_t v11 = v34;
        *(long long *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v35;
        if ((*a3)(v16, (char *)v12))
        {
          unint64_t v36 = *(__n128 *)v12;
          double v37 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v36;
          uint64_t v277 = v37;
          double v38 = *(__n128 *)v16;
          double v39 = *(_OWORD *)(v16 + 16);
          *(unsigned char *)(v12 + 32) = *(unsigned char *)(v16 + 32);
          *(__n128 *)uint64_t v12 = v38;
          *(_OWORD *)(v12 + 16) = v39;
          double v40 = v276;
          float64x2_t v41 = v277;
          *(unsigned char *)(v16 + 32) = v278;
          *(__n128 *)uint64_t v16 = v40;
          *(_OWORD *)(v16 + 16) = v41;
        }
      }
LABEL_24:
      double v66 = (__n128 *)(v12 + 40);
      double v67 = a1 + 40 * v15 - 40;
      int v68 = (*a3)(v67, (char *)(a1 + 40));
      double v69 = (*a3)((uint64_t)v271, (char *)v67);
      if (v68)
      {
        if (v69)
        {
          uint64_t v71 = *(_OWORD *)(a1 + 56);
          uint64_t v276 = *v66;
          uint64_t v70 = (__int128)v276;
          uint64_t v277 = v71;
          uint64_t v278 = *(void *)(a1 + 72);
          uint64_t v72 = v278;
          float64x2_t v74 = *v271;
          float64x2_t v73 = *(a2 - 4);
          *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 - 48);
          *double v66 = (__n128)v74;
          *(_OWORD *)(a1 + 56) = v73;
          *((unsigned char *)a2 - 48) = v72;
          *uint64_t v271 = v70;
          *(a2 - 4) = v71;
        }
        else
        {
          double v99 = *(_OWORD *)(a1 + 56);
          uint64_t v276 = *v66;
          double v98 = v276;
          uint64_t v277 = v99;
          uint64_t v278 = *(void *)(a1 + 72);
          uint64_t v100 = v278;
          unsigned int v102 = *(__n128 *)v67;
          char v101 = *(_OWORD *)(a1 + 40 * v15 - 24);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 40 * v15 - 8);
          *double v66 = v102;
          *(_OWORD *)(a1 + 56) = v101;
          *(unsigned char *)(a1 + 40 * v15 - 8) = v100;
          *(__n128 *)double v67 = v98;
          *(_OWORD *)(a1 + 40 * v15 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v99;
          if ((*a3)((uint64_t)v271, (char *)(a1 + 40 * v15 - 40)))
          {
            unsigned int v103 = *(__n128 *)v67;
            int v104 = *(_OWORD *)(a1 + 40 * v15 - 24);
            uint64_t v278 = *(void *)(a1 + 40 * v15 - 8);
            uint64_t v276 = v103;
            uint64_t v277 = v104;
            int v105 = *v271;
            uint64_t v106 = *(a2 - 4);
            *(unsigned char *)(a1 + 40 * v15 - 8) = *((unsigned char *)a2 - 48);
            *(_OWORD *)double v67 = v105;
            *(_OWORD *)(a1 + 40 * v15 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v106;
            unsigned int v107 = (__int128)v276;
            int64_t v108 = v277;
            *((unsigned char *)a2 - 48) = v278;
            *uint64_t v271 = v107;
            *(a2 - 4) = v108;
          }
        }
      }
      else if (v69)
      {
        double v75 = *(__n128 *)v67;
        int8x16_t v76 = *(_OWORD *)(a1 + 40 * v15 - 24);
        uint64_t v278 = *(void *)(a1 + 40 * v15 - 8);
        uint64_t v276 = v75;
        uint64_t v277 = v76;
        long long v77 = *v271;
        float64x2_t v78 = *(a2 - 4);
        *(unsigned char *)(a1 + 40 * v15 - 8) = *((unsigned char *)a2 - 48);
        *(_OWORD *)double v67 = v77;
        *(_OWORD *)(a1 + 40 * v15 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v78;
        float64x2_t v79 = (__int128)v276;
        float64x2_t v80 = v277;
        *((unsigned char *)a2 - 48) = v278;
        *uint64_t v271 = v79;
        *(a2 - 4) = v80;
        if ((*a3)(a1 + 40 * v15 - 40, (char *)(a1 + 40)))
        {
          double v82 = *(_OWORD *)(a1 + 56);
          uint64_t v276 = *v66;
          float64x2_t v81 = v276;
          uint64_t v277 = v82;
          uint64_t v278 = *(void *)(a1 + 72);
          double v83 = v278;
          BOOL v85 = *(__n128 *)v67;
          double v84 = *(_OWORD *)(a1 + 40 * v15 - 24);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 40 * v15 - 8);
          *double v66 = v85;
          *(_OWORD *)(a1 + 56) = v84;
          *(unsigned char *)(a1 + 40 * v15 - 8) = v83;
          *(__n128 *)double v67 = v81;
          *(_OWORD *)(a1 + 40 * v15 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v82;
        }
      }
      uint64_t v109 = (__n128 *)(a1 + 80);
      long double v110 = a1 + 40 * v15 + 40;
      long double v111 = (*a3)(v110, (char *)(a1 + 80));
      uint64x2_t v112 = (*a3)((uint64_t)v270, (char *)v110);
      if (v111)
      {
        if (v112)
        {
          uint64_t v114 = *(_OWORD *)(a1 + 96);
          uint64_t v276 = *v109;
          uint64_t v113 = v276;
          uint64_t v277 = v114;
          uint64_t v278 = *(void *)(a1 + 112);
          unsigned int v115 = v278;
          int v117 = *v270;
          unsigned int v116 = *(long long *)((char *)a2 - 104);
          *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 - 88);
          char *v109 = v117;
          *(_OWORD *)(a1 + 96) = v116;
          *((unsigned char *)a2 - 88) = v115;
          *uint64_t v270 = v113;
          *(long long *)((char *)a2 - 104) = v114;
        }
        else
        {
          int v130 = *(_OWORD *)(a1 + 96);
          uint64_t v276 = *v109;
          unsigned int v129 = v276;
          uint64_t v277 = v130;
          uint64_t v278 = *(void *)(a1 + 112);
          int v131 = v278;
          uint64_t v133 = *(__n128 *)v110;
          int v132 = *(_OWORD *)(v110 + 16);
          *(unsigned char *)(a1 + 112) = *(unsigned char *)(v110 + 32);
          char *v109 = v133;
          *(_OWORD *)(a1 + 96) = v132;
          *(unsigned char *)(v110 + 32) = v131;
          *(__n128 *)long double v110 = v129;
          *(_OWORD *)(v110 + 16) = v130;
          if ((*a3)((uint64_t)v270, (char *)v110))
          {
            long double v134 = *(__n128 *)v110;
            double v135 = *(_OWORD *)(v110 + 16);
            uint64_t v278 = *(void *)(v110 + 32);
            uint64_t v276 = v134;
            uint64_t v277 = v135;
            long double v136 = *v270;
            unsigned int v137 = *(long long *)((char *)a2 - 104);
            *(unsigned char *)(v110 + 32) = *((unsigned char *)a2 - 88);
            *(__n128 *)long double v110 = v136;
            *(_OWORD *)(v110 + 16) = v137;
            unsigned int v138 = v276;
            int v139 = v277;
            *((unsigned char *)a2 - 88) = v278;
            *uint64_t v270 = v138;
            *(long long *)((char *)a2 - 104) = v139;
          }
        }
      }
      else if (v112)
      {
        unsigned int v118 = *(__n128 *)v110;
        unsigned int v119 = *(_OWORD *)(v110 + 16);
        uint64_t v278 = *(void *)(v110 + 32);
        uint64_t v276 = v118;
        uint64_t v277 = v119;
        unsigned int v120 = *v270;
        int v121 = *(long long *)((char *)a2 - 104);
        *(unsigned char *)(v110 + 32) = *((unsigned char *)a2 - 88);
        *(__n128 *)long double v110 = v120;
        *(_OWORD *)(v110 + 16) = v121;
        uint64_t v122 = v276;
        long double v123 = v277;
        *((unsigned char *)a2 - 88) = v278;
        *uint64_t v270 = v122;
        *(long long *)((char *)a2 - 104) = v123;
        if ((*a3)(v110, (char *)(a1 + 80)))
        {
          uint64x2_t v125 = *(_OWORD *)(a1 + 96);
          uint64_t v276 = *v109;
          uint64_t v124 = v276;
          uint64_t v277 = v125;
          uint64_t v278 = *(void *)(a1 + 112);
          uint64_t v126 = v278;
          unsigned int v128 = *(__n128 *)v110;
          long double v127 = *(_OWORD *)(v110 + 16);
          *(unsigned char *)(a1 + 112) = *(unsigned char *)(v110 + 32);
          char *v109 = v128;
          *(_OWORD *)(a1 + 96) = v127;
          *(unsigned char *)(v110 + 32) = v126;
          *(__n128 *)long double v110 = v124;
          *(_OWORD *)(v110 + 16) = v125;
        }
      }
      int v140 = (*a3)(v16, (char *)v67);
      uint64_t v141 = (*a3)(v110, (char *)v16);
      if (v140)
      {
        if (v141)
        {
          uint64_t v142 = *(__n128 *)v67;
          int v143 = *(_OWORD *)(v67 + 16);
          uint64_t v278 = *(void *)(v67 + 32);
          uint64_t v276 = v142;
          uint64_t v277 = v143;
          unsigned int v144 = *(_OWORD *)(v110 + 16);
          *(_OWORD *)double v67 = *(_OWORD *)v110;
          *(_OWORD *)(v67 + 16) = v144;
          *(unsigned char *)(v67 + 32) = *(unsigned char *)(v110 + 32);
        }
        else
        {
          unint64_t v155 = *(__n128 *)v67;
          double v156 = *(_OWORD *)(v67 + 16);
          uint64_t v278 = *(void *)(v67 + 32);
          uint64_t v276 = v155;
          uint64_t v277 = v156;
          uint64_t v157 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)double v67 = *(_OWORD *)v16;
          *(_OWORD *)(v67 + 16) = v157;
          *(unsigned char *)(v67 + 32) = *(unsigned char *)(v16 + 32);
          double v158 = v276;
          double v159 = v277;
          *(unsigned char *)(v16 + 32) = v278;
          *(__n128 *)uint64_t v16 = v158;
          *(_OWORD *)(v16 + 16) = v159;
          if (!(*a3)(v110, (char *)v16)) {
            goto LABEL_54;
          }
          uint64_t v160 = *(__n128 *)v16;
          int v161 = *(_OWORD *)(v16 + 16);
          uint64_t v278 = *(void *)(v16 + 32);
          uint64_t v276 = v160;
          uint64_t v277 = v161;
          uint64_t v162 = *(_OWORD *)(v110 + 16);
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v110;
          *(_OWORD *)(v16 + 16) = v162;
          *(unsigned char *)(v16 + 32) = *(unsigned char *)(v110 + 32);
        }
        uint64_t v163 = v276;
        unint64_t v164 = v277;
        *(unsigned char *)(v110 + 32) = v278;
        *(__n128 *)long double v110 = v163;
        *(_OWORD *)(v110 + 16) = v164;
      }
      else if (v141)
      {
        unsigned int v145 = *(__n128 *)v16;
        long double v146 = *(_OWORD *)(v16 + 16);
        uint64_t v278 = *(void *)(v16 + 32);
        uint64_t v276 = v145;
        uint64_t v277 = v146;
        uint64_t v147 = *(_OWORD *)(v110 + 16);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v110;
        *(_OWORD *)(v16 + 16) = v147;
        *(unsigned char *)(v16 + 32) = *(unsigned char *)(v110 + 32);
        BOOL v148 = v276;
        double v149 = v277;
        *(unsigned char *)(v110 + 32) = v278;
        *(__n128 *)long double v110 = v148;
        *(_OWORD *)(v110 + 16) = v149;
        if ((*a3)(v16, (char *)v67))
        {
          double v150 = *(__n128 *)v67;
          BOOL v151 = *(_OWORD *)(v67 + 16);
          uint64_t v278 = *(void *)(v67 + 32);
          uint64_t v276 = v150;
          uint64_t v277 = v151;
          int v152 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)double v67 = *(_OWORD *)v16;
          *(_OWORD *)(v67 + 16) = v152;
          *(unsigned char *)(v67 + 32) = *(unsigned char *)(v16 + 32);
          uint64_t v153 = v276;
          unint64_t v154 = v277;
          *(unsigned char *)(v16 + 32) = v278;
          *(__n128 *)uint64_t v16 = v153;
          *(_OWORD *)(v16 + 16) = v154;
        }
      }
LABEL_54:
      unint64_t v165 = *(__n128 *)a1;
      uint64_t v166 = *(_OWORD *)(a1 + 16);
      uint64_t v278 = *(void *)(a1 + 32);
      uint64_t v276 = v165;
      uint64_t v277 = v166;
      uint64_t v167 = *(__n128 *)v16;
      uint64_t v168 = *(_OWORD *)(v16 + 16);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(v16 + 32);
      *(__n128 *)a1 = v167;
      *(_OWORD *)(a1 + 16) = v168;
      uint64_t v169 = v276;
      int v170 = v277;
      *(unsigned char *)(v16 + 32) = v278;
      *(__n128 *)uint64_t v16 = v169;
      *(_OWORD *)(v16 + 16) = v170;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v171 = 0;
      uint64_t v172 = *(_OWORD *)a1;
      uint64_t v173 = *(_OWORD *)(a1 + 16);
      uint64_t v275 = *(void *)(a1 + 32);
      uint64_t v273 = v172;
      uint64_t v274 = v173;
      do
        v171 += 40;
      while ((((uint64_t (*)(unint64_t, long long *))*a3)(v171 + a1, &v273) & 1) != 0);
      uint64_t v174 = a1 + v171;
      uint64_t v175 = a2;
      if (v171 == 40)
      {
        uint64_t v175 = a2;
        do
        {
          if (v174 >= (unint64_t)v175) {
            break;
          }
          uint64_t v175 = (long long *)((char *)v175 - 40);
        }
        while ((((uint64_t (*)(long long *, long long *))*a3)(v175, &v273) & 1) == 0);
      }
      else
      {
        do
          uint64_t v175 = (long long *)((char *)v175 - 40);
        while (!(*a3)((uint64_t)v175, (char *)&v273));
      }
      if (v174 >= (unint64_t)v175)
      {
        uint64_t v184 = v174 - 40;
        if (v174 - 40 == a1) {
          goto LABEL_74;
        }
LABEL_73:
        uint64_t v185 = *(_OWORD *)v184;
        uint64_t v186 = *(_OWORD *)(v184 + 16);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(v184 + 32);
        *(_OWORD *)a1 = v185;
        *(_OWORD *)(a1 + 16) = v186;
        goto LABEL_74;
      }
      unint64_t v176 = a1 + v171;
      unint64_t v177 = (unint64_t)v175;
      do
      {
        uint64_t v178 = *(__n128 *)v176;
        uint64_t v179 = *(_OWORD *)(v176 + 16);
        uint64_t v278 = *(void *)(v176 + 32);
        uint64_t v276 = v178;
        uint64_t v277 = v179;
        uint64_t v180 = *(_OWORD *)v177;
        uint64_t v181 = *(_OWORD *)(v177 + 16);
        *(unsigned char *)(v176 + 32) = *(unsigned char *)(v177 + 32);
        *(_OWORD *)unint64_t v176 = v180;
        *(_OWORD *)(v176 + 16) = v181;
        uint64_t v182 = v276;
        unint64_t v183 = v277;
        *(unsigned char *)(v177 + 32) = v278;
        *(__n128 *)unint64_t v177 = v182;
        *(_OWORD *)(v177 + 16) = v183;
        do
          v176 += 40;
        while ((((uint64_t (*)(unint64_t, long long *))*a3)(v176, &v273) & 1) != 0);
        do
          v177 -= 40;
        while (!(*a3)(v177, (char *)&v273));
      }
      while (v176 < v177);
      uint64_t v184 = v176 - 40;
      if (v184 != a1) {
        goto LABEL_73;
      }
LABEL_74:
      uint64_t v187 = v273;
      uint64_t v188 = v274;
      *(unsigned char *)(v184 + 32) = v275;
      *(_OWORD *)uint64_t v184 = v187;
      *(_OWORD *)(v184 + 16) = v188;
      if (v174 < (unint64_t)v175) {
        goto LABEL_77;
      }
      uint64_t v189 = sub_B9F9FC(a1, v184, (uint64_t (**)(__n128 *, __n128 *))a3);
      uint64_t v12 = v184 + 40;
      if (sub_B9F9FC(v184 + 40, (uint64_t)a2, (uint64_t (**)(__n128 *, __n128 *))a3))
      {
        a2 = (long long *)v184;
        if (v189) {
          return;
        }
        goto LABEL_1;
      }
      if (!v189)
      {
LABEL_77:
        sub_B9EBC8(a1, v184, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v184 + 40;
      }
    }
    else
    {
      uint64_t v24 = v17(v12, (char *)(v12 + 40 * (v14 >> 1)));
      char v25 = (*a3)((uint64_t)a2 - 40, (char *)v12);
      if (v24)
      {
        if (v25)
        {
          BOOL v26 = *(__n128 *)v16;
          unint64_t v27 = *(_OWORD *)(v16 + 16);
          uint64_t v278 = *(void *)(v16 + 32);
          uint64_t v276 = v26;
          uint64_t v277 = v27;
          double v28 = *(_OWORD *)v11;
          double v29 = *(long long *)((char *)a2 - 24);
          *(unsigned char *)(v16 + 32) = *((unsigned char *)a2 - 8);
          *(_OWORD *)uint64_t v16 = v28;
          *(_OWORD *)(v16 + 16) = v29;
          goto LABEL_32;
        }
        double v86 = *(__n128 *)v16;
        double v87 = *(_OWORD *)(v16 + 16);
        uint64_t v278 = *(void *)(v16 + 32);
        uint64_t v276 = v86;
        uint64_t v277 = v87;
        long long v88 = *(__n128 *)v12;
        BOOL v89 = *(_OWORD *)(v12 + 16);
        *(unsigned char *)(v16 + 32) = *(unsigned char *)(v12 + 32);
        *(__n128 *)uint64_t v16 = v88;
        *(_OWORD *)(v16 + 16) = v89;
        unsigned int v90 = v276;
        int v91 = v277;
        *(unsigned char *)(v12 + 32) = v278;
        *(__n128 *)uint64_t v12 = v90;
        *(_OWORD *)(v12 + 16) = v91;
        if ((*a3)((uint64_t)a2 - 40, (char *)v12))
        {
          float64x2_t v92 = *(__n128 *)v12;
          long long v93 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v92;
          uint64_t v277 = v93;
          unsigned __int8 v94 = *(_OWORD *)v11;
          uint64_t v95 = *(long long *)((char *)a2 - 24);
          *(unsigned char *)(v12 + 32) = *((unsigned char *)a2 - 8);
          *(_OWORD *)uint64_t v12 = v94;
          *(_OWORD *)(v12 + 16) = v95;
LABEL_32:
          uint64_t v96 = v276;
          uint64_t v97 = v277;
          *((unsigned char *)a2 - 8) = v278;
          *(__n128 *)unint64_t v11 = v96;
          *(long long *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v97;
        }
LABEL_33:
        --a4;
        if (a5) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      if (!v25) {
        goto LABEL_33;
      }
      unint64_t v42 = *(__n128 *)v12;
      BOOL v43 = *(_OWORD *)(v12 + 16);
      uint64_t v278 = *(void *)(v12 + 32);
      uint64_t v276 = v42;
      uint64_t v277 = v43;
      uint64_t v44 = *(_OWORD *)v11;
      uint64_t v45 = *(long long *)((char *)a2 - 24);
      *(unsigned char *)(v12 + 32) = *((unsigned char *)a2 - 8);
      *(_OWORD *)uint64_t v12 = v44;
      *(_OWORD *)(v12 + 16) = v45;
      unint64_t v46 = v276;
      unint64_t v47 = v277;
      *((unsigned char *)a2 - 8) = v278;
      *(__n128 *)unint64_t v11 = v46;
      *(long long *)((char *)a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v47;
      if (!(*a3)(v12, (char *)v16)) {
        goto LABEL_33;
      }
      double v48 = *(__n128 *)v16;
      double v49 = *(_OWORD *)(v16 + 16);
      uint64_t v278 = *(void *)(v16 + 32);
      uint64_t v276 = v48;
      uint64_t v277 = v49;
      double v50 = *(__n128 *)v12;
      float64x2_t v51 = *(_OWORD *)(v12 + 16);
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(v12 + 32);
      *(__n128 *)uint64_t v16 = v50;
      *(_OWORD *)(v16 + 16) = v51;
      uint64_t v52 = v276;
      double v53 = v277;
      *(unsigned char *)(v12 + 32) = v278;
      *(__n128 *)uint64_t v12 = v52;
      *(_OWORD *)(v12 + 16) = v53;
      --a4;
      if (a5) {
        goto LABEL_56;
      }
LABEL_55:
      if (((uint64_t (*)(unint64_t, unint64_t))*a3)(a1 - 40, a1)) {
        goto LABEL_56;
      }
      double v190 = *(_OWORD *)a1;
      uint64_t v191 = *(_OWORD *)(a1 + 16);
      uint64_t v275 = *(void *)(a1 + 32);
      uint64_t v273 = v190;
      uint64_t v274 = v191;
      if (((uint64_t (*)(long long *, uint64_t))*a3)(&v273, (uint64_t)a2 - 40))
      {
        uint64_t v12 = a1;
        do
          v12 += 40;
        while ((((uint64_t (*)(long long *, unint64_t))*a3)(&v273, v12) & 1) == 0);
      }
      else
      {
        uint64_t v192 = (char *)(a1 + 40);
        do
        {
          uint64_t v12 = (unint64_t)v192;
          if (v192 >= (char *)a2) {
            break;
          }
          uint64_t v193 = (*a3)((uint64_t)&v273, v192);
          uint64_t v192 = (char *)(v12 + 40);
        }
        while (!v193);
      }
      uint64_t v194 = a2;
      if (v12 < (unint64_t)a2)
      {
        uint64_t v194 = a2;
        do
          uint64_t v194 = (long long *)((char *)v194 - 40);
        while ((((uint64_t (*)(long long *, long long *))*a3)(&v273, v194) & 1) != 0);
      }
      while (v12 < (unint64_t)v194)
      {
        uint64_t v195 = *(__n128 *)v12;
        uint64_t v196 = *(_OWORD *)(v12 + 16);
        uint64_t v278 = *(void *)(v12 + 32);
        uint64_t v276 = v195;
        uint64_t v277 = v196;
        uint64_t v197 = *v194;
        uint64_t v198 = v194[1];
        *(unsigned char *)(v12 + 32) = *((unsigned char *)v194 + 32);
        *(_OWORD *)uint64_t v12 = v197;
        *(_OWORD *)(v12 + 16) = v198;
        uint64_t v199 = (__int128)v276;
        uint64_t v200 = v277;
        *((unsigned char *)v194 + 32) = v278;
        *uint64_t v194 = v199;
        v194[1] = v200;
        do
          v12 += 40;
        while (!(*a3)((uint64_t)&v273, (char *)v12));
        do
          uint64_t v194 = (long long *)((char *)v194 - 40);
        while ((((uint64_t (*)(long long *, long long *))*a3)(&v273, v194) & 1) != 0);
      }
      char v201 = (long long *)(v12 - 40);
      char v5 = v12 - 40 >= a1;
      char v6 = v12 - 40 == a1;
      if (v12 - 40 != a1)
      {
        uint64_t v202 = *v201;
        uint64_t v203 = *(_OWORD *)(v12 - 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(v12 - 8);
        *(_OWORD *)a1 = v202;
        *(_OWORD *)(a1 + 16) = v203;
      }
      a5 = 0;
      uint64_t v204 = v273;
      unint64_t v205 = v274;
      *(unsigned char *)(v12 - 8) = v275;
      *char v201 = v204;
      *(_OWORD *)(v12 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v205;
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if (!(*a3)((uint64_t)a2 - 40, (char *)v12)) {
        return;
      }
      goto LABEL_103;
    case 3uLL:
      uint64_t v206 = v12 + 40;
      int v207 = (*a3)(v12 + 40, (char *)v12);
      uint64_t v208 = (*a3)((uint64_t)v11, (char *)(v12 + 40));
      if (v207)
      {
        if (v208)
        {
LABEL_103:
          int v209 = *(__n128 *)v12;
          int v210 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v209;
          uint64_t v277 = v210;
          uint64_t v211 = *(_OWORD *)v11;
          uint64_t v212 = *((_OWORD *)v11 + 1);
          *(unsigned char *)(v12 + 32) = v11[32];
          *(_OWORD *)uint64_t v12 = v211;
          *(_OWORD *)(v12 + 16) = v212;
          int v213 = v276;
          uint64_t v214 = v277;
          v11[32] = v278;
        }
        else
        {
          uint64_t v263 = *(__n128 *)v12;
          uint64_t v264 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v263;
          uint64_t v277 = v264;
          uint64_t v265 = *(_OWORD *)(v12 + 56);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v206;
          *(_OWORD *)(v12 + 16) = v265;
          *(unsigned char *)(v12 + 32) = *(unsigned char *)(v12 + 72);
          uint64_t v266 = v277;
          *(__n128 *)uint64_t v206 = v276;
          *(_OWORD *)(v12 + 56) = v266;
          *(unsigned char *)(v12 + 72) = v278;
          if (!(*a3)((uint64_t)v11, (char *)(v12 + 40))) {
            return;
          }
          int v213 = *(__n128 *)v206;
          uint64_t v214 = *(_OWORD *)(v12 + 56);
          uint64_t v276 = *(__n128 *)v206;
          uint64_t v277 = v214;
          uint64_t v278 = *(void *)(v12 + 72);
          uint64_t v267 = v278;
          uint64_t v269 = *(_OWORD *)v11;
          uint64_t v268 = *((_OWORD *)v11 + 1);
          *(unsigned char *)(v12 + 72) = v11[32];
          *(_OWORD *)uint64_t v206 = v269;
          *(_OWORD *)(v12 + 56) = v268;
          v11[32] = v267;
        }
        *(__n128 *)unint64_t v11 = v213;
        *((_OWORD *)v11 + 1) = v214;
        return;
      }
      if (v208)
      {
        uint64_t v246 = *(_OWORD *)(v12 + 56);
        uint64_t v276 = *(__n128 *)v206;
        uint64_t v245 = v276;
        uint64_t v277 = v246;
        uint64_t v278 = *(void *)(v12 + 72);
        uint64_t v247 = v278;
        uint64_t v249 = *(_OWORD *)v11;
        uint64_t v248 = *((_OWORD *)v11 + 1);
        *(unsigned char *)(v12 + 72) = v11[32];
        *(_OWORD *)uint64_t v206 = v249;
        *(_OWORD *)(v12 + 56) = v248;
        v11[32] = v247;
        *(__n128 *)unint64_t v11 = v245;
        *((_OWORD *)v11 + 1) = v246;
LABEL_131:
        if ((*a3)(v206, (char *)v12))
        {
          uint64_t v250 = *(__n128 *)v12;
          uint64_t v251 = *(_OWORD *)(v12 + 16);
          uint64_t v278 = *(void *)(v12 + 32);
          uint64_t v276 = v250;
          uint64_t v277 = v251;
          uint64_t v252 = *(_OWORD *)(v206 + 16);
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v206;
          *(_OWORD *)(v12 + 16) = v252;
          *(unsigned char *)(v12 + 32) = *(unsigned char *)(v206 + 32);
          uint64_t v253 = v277;
          *(__n128 *)uint64_t v206 = v276;
          *(_OWORD *)(v206 + 16) = v253;
          *(unsigned char *)(v206 + 32) = v278;
        }
      }
      break;
    case 4uLL:
      sub_B9FE9C((__n128 *)v12, (__n128 *)(v12 + 40), (__n128 *)(v12 + 80), (__n128 *)((char *)a2 - 40), (uint64_t (**)(__n128 *, __n128 *))a3);
      return;
    case 5uLL:
      uint64_t v206 = v12 + 40;
      uint64_t v215 = (__n128 *)(v12 + 80);
      uint64_t v216 = (__n128 *)(v12 + 120);
      uint64_t v217 = sub_B9FE9C((__n128 *)v12, (__n128 *)(v12 + 40), (__n128 *)(v12 + 80), (__n128 *)(v12 + 120), (uint64_t (**)(__n128 *, __n128 *))a3);
      if (!((unsigned int (*)(char *, unint64_t, __n128))*a3)(v11, v12 + 120, v217)) {
        return;
      }
      uint64_t v219 = *(_OWORD *)(v12 + 136);
      uint64_t v276 = *v216;
      unint64_t v218 = v276;
      uint64_t v277 = v219;
      uint64_t v278 = *(void *)(v12 + 152);
      char v220 = v278;
      unint64_t v222 = *(__n128 *)v11;
      long long v221 = *((_OWORD *)v11 + 1);
      *(unsigned char *)(v12 + 152) = v11[32];
      *uint64_t v216 = v222;
      *(_OWORD *)(v12 + 136) = v221;
      v11[32] = v220;
      *(__n128 *)unint64_t v11 = v218;
      *((_OWORD *)v11 + 1) = v219;
      if (!(*a3)(v12 + 120, (char *)(v12 + 80))) {
        return;
      }
      int v223 = *(void *)(v12 + 112);
      uint64_t v225 = *v215;
      uint64_t v224 = *(_OWORD *)(v12 + 96);
      uint64_t v226 = *(_OWORD *)(v12 + 136);
      *uint64_t v215 = *v216;
      *(_OWORD *)(v12 + 96) = v226;
      *(unsigned char *)(v12 + 112) = *(unsigned char *)(v12 + 152);
      *uint64_t v216 = v225;
      *(_OWORD *)(v12 + 136) = v224;
      *(unsigned char *)(v12 + 152) = v223;
      if (!(*a3)(v12 + 80, (char *)(v12 + 40))) {
        return;
      }
      uint64_t v227 = *(void *)(v12 + 72);
      unsigned int v229 = *(__n128 *)v206;
      uint64_t v228 = *(_OWORD *)(v12 + 56);
      uint64_t v230 = *(_OWORD *)(v12 + 96);
      *(__n128 *)uint64_t v206 = *v215;
      *(_OWORD *)(v12 + 56) = v230;
      *(unsigned char *)(v12 + 72) = *(unsigned char *)(v12 + 112);
      *uint64_t v215 = v229;
      *(_OWORD *)(v12 + 96) = v228;
      *(unsigned char *)(v12 + 112) = v227;
      goto LABEL_131;
    default:
      JUMPOUT(0);
  }
}

  unint64_t v11 = a2 - 2;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = ((char *)a2 - (char *)v12) >> 4;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v30 = *((_DWORD *)a2 - 2);
          if (v30)
          {
            if (v30 == 1)
            {
              unint64_t v31 = **v11;
              unint64_t v32 = *((_DWORD *)v12 + 2);
              if (!v32)
              {
LABEL_64:
                double v33 = (*v12)[1];
                if (v31 < v33) {
                  goto LABEL_69;
                }
                goto LABEL_67;
              }
            }
            else
            {
              unint64_t v31 = 0x7FFFFFFF;
              unint64_t v32 = *((_DWORD *)v12 + 2);
              if (!v32) {
                goto LABEL_64;
              }
            }
          }
          else
          {
            unint64_t v31 = (*v11)[1];
            unint64_t v32 = *((_DWORD *)v12 + 2);
            if (!v32) {
              goto LABEL_64;
            }
          }
          if (v32 == 1)
          {
            double v33 = **v12;
            if (v31 < v33) {
              goto LABEL_69;
            }
          }
          else
          {
            double v33 = 0x7FFFFFFF;
            if (v31 != 0x7FFFFFFF) {
              goto LABEL_69;
            }
          }
LABEL_67:
          if (v30 >= v32 || v33 < v31) {
            return result;
          }
LABEL_69:
          double result = *(__n128 *)v12;
          unint64_t v36 = *(__n128 *)v12;
          double v34 = *v11;
          *((_DWORD *)v12 + 2) = *((_DWORD *)a2 - 2);
          *uint64_t v12 = v34;
          *unint64_t v11 = (int *)v36.n128_u64[0];
          *((_DWORD *)a2 - 2) = v36.n128_u32[2];
          return result;
        case 3uLL:
          sub_BA40E8((long long *)v12, v12 + 2, a2 - 2);
          return result;
        case 4uLL:
          result.n128_u64[0] = sub_BA5040((long long *)v12, v12 + 2, v12 + 4, (uint64_t)(a2 - 2)).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = sub_BA52A0((long long *)v12, v12 + 2, v12 + 4, (_DWORD *)v12 + 12, (uint64_t)(a2 - 2)).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_BA55C0(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[2 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x801)
    {
      sub_BA40E8((long long *)v12, &v12[2 * (v16 >> 1)], a2 - 2);
      unint64_t v19 = 2 * v17;
      uint64_t v20 = (long long *)&v12[2 * v17 - 2];
      sub_BA40E8((long long *)v12 + 1, (_DWORD **)v20, a2 - 4);
      sub_BA40E8((long long *)v12 + 2, &v12[v19 + 2], a2 - 6);
      sub_BA40E8(v20, v18, &v12[v19 + 2]);
      unint64_t v35 = *(_OWORD *)v12;
      double v21 = *v18;
      *((_DWORD *)v12 + 2) = *((_DWORD *)v18 + 2);
      *uint64_t v12 = v21;
      *((_DWORD *)v18 + 2) = DWORD2(v35);
      *unint64_t v18 = (int *)v35;
      if (a5) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_BA40E8((long long *)&v12[2 * (v16 >> 1)], v12, a2 - 2);
      if (a5) {
        goto LABEL_26;
      }
    }
    uint64_t v22 = *((_DWORD *)v12 - 2);
    if (v22)
    {
      if (v22 == 1)
      {
        unint64_t v23 = **(v12 - 2);
        uint64_t v24 = *((_DWORD *)v12 + 2);
        if (!v24) {
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v23 = 0x7FFFFFFF;
        uint64_t v24 = *((_DWORD *)v12 + 2);
        if (!v24)
        {
LABEL_21:
          char v25 = (*v12)[1];
          if (v23 < v25) {
            goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
    }
    else
    {
      unint64_t v23 = (*(v12 - 2))[1];
      uint64_t v24 = *((_DWORD *)v12 + 2);
      if (!v24) {
        goto LABEL_21;
      }
    }
    if (v24 == 1)
    {
      char v25 = **v12;
      if (v23 < v25) {
        goto LABEL_26;
      }
    }
    else
    {
      char v25 = 0x7FFFFFFF;
      if (v23 != 0x7FFFFFFF) {
        goto LABEL_26;
      }
    }
LABEL_24:
    if (v22 >= v24 || v25 < v23)
    {
      uint64_t v12 = (int **)sub_BA4494((uint64_t)v12, a2);
      goto LABEL_30;
    }
LABEL_26:
    BOOL v26 = (char *)sub_BA4844((uint64_t)v12, (uint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_29;
    }
    double v28 = sub_BA4B8C((char *)v12, v26);
    uint64_t v12 = (int **)(v26 + 16);
    if (sub_BA4B8C(v26 + 16, (char *)a2))
    {
      a4 = -v14;
      a2 = (int **)v26;
      if (v28) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v28)
    {
LABEL_29:
      sub_BA3744(a1, v26, a3, -v14, a5 & 1);
      uint64_t v12 = (int **)(v26 + 16);
LABEL_30:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_BA3C30(v12, a2);
  }
  else
  {
    sub_BA3EC0(v12, a2);
  }
  return result;
}

  unint64_t v11 = a2 - 8;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = (uint64_t)a2 - v12;
    unint64_t v15 = v14 >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v37 = *(_DWORD *)(a1 + 8);
          unint64_t v36 = *(_DWORD *)(a1 + 12);
          double v38 = *(a2 - 6);
          double v39 = *(a2 - 5);
          double v40 = v39 == v36 && v38 == v37;
          if (v40 && *(a2 - 4) == *(_DWORD *)(a1 + 16))
          {
            float64x2_t v41 = *(a2 - 3);
            unint64_t v42 = *(_DWORD *)(a1 + 20);
            if (v41 == v42)
            {
              if (*(a2 - 2) <= *(_DWORD *)(a1 + 24)) {
                return result;
              }
            }
            else if (v41 >= v42)
            {
              return result;
            }
          }
          else if (v39 >= v36 && (v39 > v36 || v38 >= v37))
          {
            double v49 = *((void *)a2 - 3);
            if (v36 < HIDWORD(v49) || v37 < v49 && v36 <= HIDWORD(v49)) {
              return result;
            }
            if (*(a2 - 4) >= *(_DWORD *)(a1 + 16)) {
              return result;
            }
          }
          *(_OWORD *)uint64_t v52 = *(_OWORD *)a1;
          *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 16);
          double v50 = *(_OWORD *)v11;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 - 5);
          *(_OWORD *)a1 = v50;
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v52;
          double result = *(__n128 *)&v52[12];
          *(_OWORD *)(a2 - 5) = *(_OWORD *)&v52[12];
          return result;
        case 3uLL:
          sub_BB54D4((long long *)a1, (long long *)(a1 + 32), (long long *)a2 - 2);
          return result;
        case 4uLL:
          result.n128_u64[0] = sub_BB6310(a1, a1 + 32, a1 + 64, (uint64_t)(a2 - 8)).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = sub_BB657C(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)(a2 - 8)).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 767) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if ((unsigned int *)a1 != a2)
      {
        BOOL v43 = (v15 - 2) >> 1;
        uint64_t v44 = v43 + 1;
        uint64_t v45 = (uint64_t *)(a1 + 32 * v43);
        do
        {
          sub_BB68AC(a1, a3, v14 >> 5, v45);
          v45 -= 4;
          --v44;
        }
        while (v44);
        unint64_t v46 = (unint64_t)v14 >> 5;
        do
        {
          result.n128_u64[0] = sub_BB6B9C((_OWORD *)a1, (uint64_t)a2, a3, v46).n128_u64[0];
          a2 -= 8;
        }
        while (v46-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = (long long *)(a1 + 32 * (v15 >> 1));
    if ((unint64_t)v14 <= 0x1000)
    {
      sub_BB54D4(v18, (long long *)a1, (long long *)a2 - 2);
      if (a5) {
        goto LABEL_25;
      }
    }
    else
    {
      sub_BB54D4((long long *)a1, v18, (long long *)a2 - 2);
      unint64_t v19 = 32 * v17;
      uint64_t v20 = (long long *)(32 * v17 + a1 - 32);
      sub_BB54D4((long long *)(a1 + 32), v20, (long long *)a2 - 4);
      sub_BB54D4((long long *)(a1 + 64), (long long *)(a1 + 32 + v19), (long long *)a2 - 6);
      sub_BB54D4(v20, v18, (long long *)(a1 + 32 + v19));
      *(_OWORD *)float64x2_t v51 = *(_OWORD *)a1;
      *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 16);
      double v21 = *v18;
      *(_OWORD *)(a1 + 12) = *(long long *)((char *)v18 + 12);
      *(_OWORD *)a1 = v21;
      *(long long *)((char *)v18 + 12) = *(_OWORD *)&v51[12];
      *unint64_t v18 = *(_OWORD *)v51;
      if (a5) {
        goto LABEL_25;
      }
    }
    unint64_t v23 = *(_DWORD *)(a1 + 8);
    uint64_t v22 = *(_DWORD *)(a1 + 12);
    uint64_t v24 = *(_DWORD *)(a1 - 24);
    char v25 = *(_DWORD *)(a1 - 20);
    if (v25 == v22 && v24 == v23 && *(_DWORD *)(a1 - 16) == *(_DWORD *)(a1 + 16))
    {
      BOOL v26 = *(_DWORD *)(a1 - 12);
      unint64_t v27 = *(_DWORD *)(a1 + 20);
      double v28 = v26 >= v27;
      if (v26 != v27) {
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 - 8) <= *(_DWORD *)(a1 + 24)) {
        goto LABEL_30;
      }
    }
    else if (v25 >= v22 && (v25 > v22 || v24 >= v23))
    {
      double v29 = *(void *)(a1 - 24);
      if (v22 < HIDWORD(v29) || v23 < v29 && v22 <= HIDWORD(v29))
      {
LABEL_30:
        uint64_t v12 = sub_BB58A0((uint64_t *)a1, a2);
        goto LABEL_29;
      }
      double v28 = *(_DWORD *)(a1 - 16) >= *(_DWORD *)(a1 + 16);
LABEL_24:
      if (v28) {
        goto LABEL_30;
      }
    }
LABEL_25:
    double v30 = sub_BB5BEC((uint64_t *)a1, a2);
    if ((v31 & 1) == 0) {
      goto LABEL_28;
    }
    sub_BB5F38(a1, v30);
    double v33 = v32;
    uint64_t v12 = v30 + 32;
    double result = sub_BB5F38(v30 + 32, (uint64_t)a2);
    if (v35)
    {
      a4 = -v16;
      a2 = (unsigned int *)v30;
      if (v33) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v16 + 1;
    if ((v33 & 1) == 0)
    {
LABEL_28:
      sub_BB4CC8(a1, v30, a3, -v16, a5 & 1);
      uint64_t v12 = v30 + 32;
LABEL_29:
      a5 = 0;
      a4 = -v16;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_BB51E0((_OWORD *)a1, a2);
  }
  else
  {
    sub_BB5384((void *)a1, a2);
  }
  return result;
}

  unint64_t v11 = a2 - 7;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 2);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v37 = a2 - 7;
          double v38 = *(a2 - 7);
          if (v38 < *a1) {
            goto LABEL_45;
          }
          if (*a1 < v38) {
            return;
          }
          double v39 = a1[1];
          double v40 = *(a2 - 6);
          if (v40 < v39) {
            goto LABEL_45;
          }
          if (v40 != v39)
          {
            if (v39 < v40) {
              return;
            }
            goto LABEL_84;
          }
          double v49 = *(a2 - 5);
          double v50 = a1[2];
          if (v49 == -1) {
            goto LABEL_81;
          }
          if (v49 < v50) {
            goto LABEL_45;
          }
          if (v49 != v50)
          {
LABEL_81:
            if (v50 == -1) {
              goto LABEL_84;
            }
            if (v50 < v49) {
              return;
            }
            if (v50 != v49) {
              goto LABEL_84;
            }
            uint64_t v52 = *(a2 - 4);
            float64x2_t v51 = a1[3];
          }
          else
          {
            float64x2_t v51 = a1[3];
            uint64_t v52 = *(a2 - 4);
            if (v52 < v51) {
              goto LABEL_45;
            }
          }
          if (v51 < v52) {
            return;
          }
LABEL_84:
          double v53 = a1[4];
          long long v54 = *(a2 - 3);
          if (v54 >= v53)
          {
            if (v54 != v53) {
              return;
            }
            unint64_t v55 = *(a2 - 2);
            if (v55 == -1) {
              return;
            }
            unint64_t v56 = a1[5];
            if (v55 >= v56 && (v55 != v56 || *(a2 - 1) >= a1[6])) {
              return;
            }
          }
LABEL_45:
          *(_OWORD *)&v58[12] = *(_OWORD *)(a1 + 3);
          *(_OWORD *)float64x2_t v58 = *(_OWORD *)a1;
          float64x2_t v41 = *(_OWORD *)v37;
          *(_OWORD *)(a1 + 3) = *((_OWORD *)a2 - 1);
          *(_OWORD *)a1 = v41;
          *(_OWORD *)double v37 = *(_OWORD *)v58;
          *((_OWORD *)a2 - 1) = *(_OWORD *)&v58[12];
          return;
        case 3uLL:
          sub_C308C8(a1, a1 + 7, (uint64_t)(a2 - 7));
          return;
        case 4uLL:
          sub_C31CE0(a1, a1 + 7, a1 + 14, a2 - 7);
          return;
        case 5uLL:
          sub_C32038(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 671)
    {
      if (a5)
      {
        sub_C30318(a1, a2);
      }
      else
      {
        sub_C30638(a1, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &a1[7 * (v16 >> 1)];
    if ((unint64_t)v15 < 0xE01)
    {
      sub_C308C8(v18, a1, (uint64_t)(a2 - 7));
      if (a5) {
        goto LABEL_27;
      }
    }
    else
    {
      sub_C308C8(a1, v18, (uint64_t)(a2 - 7));
      unint64_t v19 = 7 * v17;
      uint64_t v20 = &a1[7 * v17 - 7];
      sub_C308C8(a1 + 7, v20, (uint64_t)(a2 - 14));
      double v21 = &a1[v19 + 7];
      sub_C308C8(a1 + 14, v21, (uint64_t)(a2 - 21));
      sub_C308C8(v20, v18, (uint64_t)v21);
      *(_OWORD *)&v57[12] = *(_OWORD *)(a1 + 3);
      *(_OWORD *)unint64_t v57 = *(_OWORD *)a1;
      uint64_t v22 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(v18 + 3);
      *(_OWORD *)a1 = v22;
      *(_OWORD *)(v18 + 3) = *(_OWORD *)&v57[12];
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v57;
      if (a5) {
        goto LABEL_27;
      }
    }
    unint64_t v23 = *(a1 - 7);
    if (v23 < *a1) {
      goto LABEL_27;
    }
    if (*a1 < v23) {
      goto LABEL_36;
    }
    uint64_t v24 = a1[1];
    char v25 = *(a1 - 6);
    if (v25 < v24) {
      goto LABEL_27;
    }
    if (v25 != v24)
    {
      if (v24 < v25) {
        goto LABEL_36;
      }
      goto LABEL_21;
    }
    BOOL v26 = *(a1 - 5);
    unint64_t v27 = a1[2];
    if (v26 == -1) {
      goto LABEL_33;
    }
    if (v26 < v27) {
      goto LABEL_27;
    }
    if (v26 != v27)
    {
LABEL_33:
      if (v27 == -1) {
        goto LABEL_21;
      }
      if (v27 < v26) {
        goto LABEL_36;
      }
      if (v27 != v26) {
        goto LABEL_21;
      }
      double v29 = *(a1 - 4);
      double v28 = a1[3];
    }
    else
    {
      double v28 = a1[3];
      double v29 = *(a1 - 4);
      if (v29 < v28) {
        goto LABEL_27;
      }
    }
    if (v28 < v29) {
      goto LABEL_36;
    }
LABEL_21:
    double v30 = a1[4];
    unint64_t v31 = *(a1 - 3);
    if (v31 >= v30)
    {
      if (v31 != v30 || (unint64_t v32 = *(a1 - 2), v32 == -1) || (v33 = a1[5], v32 >= v33) && (v32 != v33 || *(a1 - 1) >= a1[6]))
      {
LABEL_36:
        uint64_t v12 = sub_C30E10(a1, (unint64_t)a2);
LABEL_38:
        a5 = 0;
        a4 = -v14;
        goto LABEL_2;
      }
    }
LABEL_27:
    double v34 = (unsigned int *)sub_C312F4(a1, a2);
    if ((v35 & 1) == 0) {
      goto LABEL_37;
    }
    unint64_t v36 = sub_C31750(a1, v34);
    uint64_t v12 = v34 + 7;
    if (sub_C31750(v34 + 7, a2))
    {
      a4 = -v14;
      a2 = v34;
      if (v36) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v36)
    {
LABEL_37:
      sub_C2FCA4(a1, v34, a3, -v14, a5 & 1);
      uint64_t v12 = v34 + 7;
      goto LABEL_38;
    }
  }
  if (a1 != a2)
  {
    unint64_t v42 = (v16 - 2) >> 1;
    BOOL v43 = v42 + 1;
    uint64_t v44 = &a1[7 * v42];
    do
    {
      sub_C3249C((uint64_t)a1, a3, 0x6DB6DB6DB6DB6DB7 * (v15 >> 2), v44);
      v44 -= 7;
      --v43;
    }
    while (v43);
    uint64_t v45 = v15 / 0x1CuLL;
    do
    {
      while (1)
      {
        *(_OWORD *)&v59[12] = *(_OWORD *)(a1 + 3);
        *(_OWORD *)double v59 = *(_OWORD *)a1;
        sub_C32908(a1, a3, v45);
        if (v11 == v48) {
          break;
        }
        unint64_t v46 = *(_OWORD *)v11;
        *(_OWORD *)(v48 + 3) = *(_OWORD *)(v11 + 3);
        *(_OWORD *)double v48 = v46;
        *(_OWORD *)(v11 + 3) = *(_OWORD *)&v59[12];
        *(_OWORD *)unint64_t v11 = *(_OWORD *)v59;
        v11 -= 7;
        sub_C32A68((uint64_t)a1, (uint64_t)(v48 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (v48 + 7 - a1));
        unint64_t v47 = v45-- <= 2;
        if (v47) {
          return;
        }
      }
      *(_OWORD *)double v48 = *(_OWORD *)v59;
      *(_OWORD *)(v48 + 3) = *(_OWORD *)&v59[12];
      v11 -= 7;
      unint64_t v47 = v45-- <= 2;
    }
    while (!v47);
  }
}

  uint64_t v231 = (long long *)(a2 - 56);
  int v232 = (__n128 *)(a2 - 24);
  uint64_t v230 = (long long *)(a2 - 88);
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    unint64_t v11 = a2 - v10;
    uint64_t v12 = (uint64_t)(a2 - v10) >> 5;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          long double v146 = *(void *)(a2 - 32);
          uint64_t v147 = *(void *)v10;
          if (v146 >= *(void *)v10) {
            return result;
          }
          *(void *)uint64_t v10 = v146;
          *(void *)(a2 - 32) = v147;
          uint64_t v284 = *(void *)(v10 + 24);
          uint64_t v256 = *(__n128 *)(v10 + 8);
          BOOL v148 = *(_OWORD *)(a2 - 24);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
          *(_OWORD *)(v10 + 8) = v148;
          goto LABEL_110;
        case 3:
          double v149 = *(void *)(v10 + 32);
          double v150 = *(void *)v10;
          BOOL v151 = *(void *)(a2 - 32);
          if (v149 < *(void *)v10)
          {
            int v152 = (__n128 *)(v10 + 8);
            if (v151 >= v149)
            {
              *(void *)uint64_t v10 = v149;
              *(void *)(v10 + 32) = v150;
              uint64_t v262 = *v152;
              uint64_t v286 = *(void *)(v10 + 24);
              *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 + 56);
              *int v152 = *(__n128 *)(v10 + 40);
              double result = v262;
              *(__n128 *)(v10 + 40) = v262;
              *(void *)(v10 + 56) = v286;
              uint64_t v228 = *(void *)(a2 - 32);
              if (v228 >= v150) {
                return result;
              }
              *(void *)(v10 + 32) = v228;
              *(void *)(a2 - 32) = v150;
              double result = *(__n128 *)(v10 + 40);
              unint64_t v154 = *(void *)(v10 + 56);
              unsigned int v229 = *(void *)(a2 - 8);
              *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 - 24);
              *(void *)(v10 + 56) = v229;
            }
            else
            {
              *(void *)uint64_t v10 = v151;
              *(void *)(a2 - 32) = v150;
              uint64_t v284 = *(void *)(v10 + 24);
              uint64_t v256 = *v152;
              uint64_t v153 = *(__n128 *)(a2 - 24);
              *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
              *int v152 = v153;
LABEL_110:
              double result = v256;
              unint64_t v154 = v284;
            }
            *(void *)(a2 - 8) = v154;
            *(__n128 *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
            return result;
          }
          if (v151 < v149)
          {
            *(void *)(v10 + 32) = v151;
            *(void *)(a2 - 32) = v149;
            double result = *(__n128 *)(v10 + 40);
            uint64_t v216 = *(void *)(v10 + 56);
            uint64_t v217 = *(void *)(a2 - 8);
            *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 - 24);
            *(void *)(v10 + 56) = v217;
            *(void *)(a2 - 8) = v216;
            *(__n128 *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
            unint64_t v218 = *(void *)(v10 + 32);
            uint64_t v219 = *(void *)v10;
            if (v218 < *(void *)v10)
            {
              unint64_t v165 = v10 + 40;
              *(void *)uint64_t v10 = v218;
              uint64_t v257 = *(__n128 *)(v10 + 8);
              uint64_t v285 = *(void *)(v10 + 24);
              *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 + 56);
              *(void *)(v10 + 32) = v219;
LABEL_193:
              *(_OWORD *)(v10 + 8) = *(_OWORD *)v165;
              double result = v257;
              *(__n128 *)unint64_t v165 = v257;
              *(void *)(v165 + 16) = v285;
            }
          }
          break;
        case 4:
          result.n128_u64[0] = sub_C78CCC((uint64_t *)v10, (uint64_t *)(v10 + 32), (uint64_t *)(v10 + 64), (uint64_t *)(a2 - 32), result).n128_u64[0];
          return result;
        case 5:
          result.n128_u64[0] = sub_C78CCC((uint64_t *)v10, (uint64_t *)(v10 + 32), (uint64_t *)(v10 + 64), (uint64_t *)(v10 + 96), result).n128_u64[0];
          unint64_t v155 = *(void *)(a2 - 32);
          double v156 = *(void *)(v10 + 96);
          if (v155 >= v156) {
            return result;
          }
          *(void *)(v10 + 96) = v155;
          *(void *)(a2 - 32) = v156;
          double result = *(__n128 *)(v10 + 104);
          uint64_t v157 = *(void *)(v10 + 120);
          double v158 = *(void *)(a2 - 8);
          *(_OWORD *)(v10 + 104) = *(_OWORD *)(a2 - 24);
          *(void *)(v10 + 120) = v158;
          *(void *)(a2 - 8) = v157;
          *(__n128 *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
          double v159 = *(void *)(v10 + 96);
          uint64_t v160 = *(void *)(v10 + 64);
          if (v159 >= v160) {
            return result;
          }
          *(void *)(v10 + 64) = v159;
          int v161 = *(void *)(v10 + 88);
          double result = *(__n128 *)(v10 + 72);
          *(_OWORD *)(v10 + 72) = *(_OWORD *)(v10 + 104);
          *(void *)(v10 + 88) = *(void *)(v10 + 120);
          *(void *)(v10 + 96) = v160;
          *(__n128 *)(v10 + 104) = result;
          *(void *)(v10 + 120) = v161;
          uint64_t v162 = *(void *)(v10 + 32);
          if (v159 >= v162) {
            return result;
          }
          *(void *)(v10 + 32) = v159;
          uint64_t v163 = *(void *)(v10 + 56);
          double result = *(__n128 *)(v10 + 40);
          *(_OWORD *)(v10 + 40) = *(_OWORD *)(v10 + 72);
          *(void *)(v10 + 56) = *(void *)(v10 + 88);
          *(void *)(v10 + 64) = v162;
          *(__n128 *)(v10 + 72) = result;
          *(void *)(v10 + 88) = v163;
          unint64_t v164 = *(void *)v10;
          if (v159 >= *(void *)v10) {
            return result;
          }
          unint64_t v165 = v10 + 40;
          *(void *)uint64_t v10 = v159;
          uint64_t v257 = *(__n128 *)(v10 + 8);
          uint64_t v285 = *(void *)(v10 + 24);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 + 56);
          *(void *)(v10 + 32) = v164;
          goto LABEL_193;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 767) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      uint64_t v181 = (unint64_t)(v12 - 2) >> 1;
      uint64_t v182 = v181;
      while (1)
      {
        if (v181 >= v182)
        {
          unint64_t v183 = (2 * v182) | 1;
          uint64_t v184 = v10 + 32 * v183;
          if (2 * v182 + 2 >= v12)
          {
            uint64_t v187 = *(void *)v184;
            uint64_t v188 = v10 + 32 * v182;
            uint64_t v189 = *(void *)v188;
            if (*(void *)v184 >= *(void *)v188) {
              goto LABEL_160;
            }
          }
          else
          {
            uint64_t v185 = *(void *)(v184 + 32);
            uint64_t v186 = *(void *)v184 < v185;
            if (*(void *)v184 <= v185) {
              uint64_t v187 = *(void *)(v184 + 32);
            }
            else {
              uint64_t v187 = *(void *)v184;
            }
            if (*(void *)v184 < v185) {
              v184 += 32;
            }
            if (v186) {
              unint64_t v183 = 2 * v182 + 2;
            }
            uint64_t v188 = v10 + 32 * v182;
            uint64_t v189 = *(void *)v188;
            if (v187 >= *(void *)v188)
            {
LABEL_160:
              double v190 = (void *)(v10 + 32 * v182);
              uint64_t v191 = v190[1];
              *(void *)&v259[7] = *(void *)((char *)v190 + 23);
              *(void *)uint64_t v259 = v190[2];
              uint64_t v192 = *(unsigned char *)(v188 + 31);
              v190[1] = 0;
              v190[2] = 0;
              v190[3] = 0;
              while (1)
              {
                uint64_t v195 = v188;
                uint64_t v188 = v184;
                *(void *)uint64_t v195 = v187;
                uint64_t v196 = *(_OWORD *)(v184 + 8);
                *(void *)(v195 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v184 + 24);
                *(_OWORD *)(v195 + 8) = v196;
                *(unsigned char *)(v184 + 31) = 0;
                *(unsigned char *)(v184 + 8) = 0;
                if (v181 < v183) {
                  break;
                }
                uint64_t v197 = (2 * v183) | 1;
                uint64_t v184 = v10 + 32 * v197;
                unint64_t v183 = 2 * v183 + 2;
                if (v183 < v12)
                {
                  uint64_t v187 = *(void *)v184;
                  uint64_t v193 = *(void *)(v184 + 32);
                  uint64_t v194 = *(void *)v184 < v193;
                  if (*(void *)v184 <= v193) {
                    uint64_t v187 = *(void *)(v184 + 32);
                  }
                  if (*(void *)v184 < v193) {
                    v184 += 32;
                  }
                  if (!v194) {
                    unint64_t v183 = v197;
                  }
                  if (v187 < v189) {
                    break;
                  }
                }
                else
                {
                  uint64_t v187 = *(void *)v184;
                  unint64_t v183 = v197;
                  if (*(void *)v184 < v189) {
                    break;
                  }
                }
              }
              *(void *)uint64_t v188 = v189;
              *(void *)(v188 + 8) = v191;
              *(void *)(v188 + 16) = *(void *)v259;
              *(void *)(v188 + 23) = *(void *)&v259[7];
              *(unsigned char *)(v188 + 31) = v192;
            }
          }
        }
        uint64_t v186 = v182-- <= 0;
        if (v186)
        {
          uint64_t v198 = (unint64_t)v11 >> 5;
          do
          {
            uint64_t v199 = 0;
            uint64_t v200 = *(void *)v10;
            char v201 = *(void *)(v10 + 8);
            *(void *)&v237[7] = *(void *)(v10 + 23);
            *(void *)uint64_t v237 = *(void *)(v10 + 16);
            uint64_t v202 = *(unsigned char *)(v10 + 31);
            *(void *)(v10 + 16) = 0;
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(void *)(v10 + 8) = 0;
            uint64_t v203 = v10;
            do
            {
              uint64_t v206 = v203 + 32 * v199 + 32;
              int v207 = (2 * v199) | 1;
              uint64_t v199 = 2 * v199 + 2;
              if (v199 < v198)
              {
                uint64_t v204 = *(void *)v206;
                unint64_t v205 = *(void *)(v206 + 32);
                if (*(void *)v206 <= v205) {
                  uint64_t v204 = *(void *)(v206 + 32);
                }
                if (*(void *)v206 >= v205) {
                  uint64_t v199 = v207;
                }
                else {
                  v206 += 32;
                }
              }
              else
              {
                uint64_t v204 = *(void *)v206;
                uint64_t v199 = v207;
              }
              *(void *)uint64_t v203 = v204;
              double result = *(__n128 *)(v206 + 8);
              *(void *)(v203 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v206 + 24);
              *(__n128 *)(v203 + 8) = result;
              *(unsigned char *)(v206 + 31) = 0;
              *(unsigned char *)(v206 + 8) = 0;
              uint64_t v203 = v206;
            }
            while (v199 <= (uint64_t)((unint64_t)(v198 - 2) >> 1));
            if (v206 == a2 - 32)
            {
              *(void *)uint64_t v206 = v200;
              *(void *)(v206 + 8) = v201;
              *(void *)(v206 + 16) = *(void *)v237;
              *(void *)(v206 + 23) = *(void *)&v237[7];
              *(unsigned char *)(v206 + 31) = v202;
            }
            else
            {
              *(void *)uint64_t v206 = *(void *)(a2 - 32);
              double result = *(__n128 *)(a2 - 24);
              *(void *)(v206 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
              *(__n128 *)(v206 + 8) = result;
              *(void *)(a2 - 32) = v200;
              *(void *)(a2 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v201;
              *(void *)(a2 - 9) = *(void *)&v237[7];
              *(void *)(a2 - 16) = *(void *)v237;
              *(unsigned char *)(a2 - 1) = v202;
              uint64_t v208 = v206 - v10 + 32;
              if (v208 >= 33)
              {
                int v209 = (((unint64_t)v208 >> 5) - 2) >> 1;
                int v210 = v10 + 32 * v209;
                uint64_t v211 = *(void *)v206;
                if (*(void *)v210 < *(void *)v206)
                {
                  uint64_t v212 = *(void *)(v206 + 8);
                  *(void *)&v260[7] = *(void *)(v206 + 23);
                  *(void *)uint64_t v260 = *(void *)(v206 + 16);
                  int v213 = *(unsigned char *)(v206 + 31);
                  *(void *)(v206 + 8) = 0;
                  *(void *)(v206 + 16) = 0;
                  *(void *)(v206 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                  uint64_t v214 = *(void *)v210;
                  do
                  {
                    uint64_t v215 = v206;
                    uint64_t v206 = v210;
                    *(void *)uint64_t v215 = v214;
                    double result = *(__n128 *)(v210 + 8);
                    *(void *)(v215 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v210 + 24);
                    *(__n128 *)(v215 + 8) = result;
                    *(unsigned char *)(v210 + 31) = 0;
                    *(unsigned char *)(v210 + 8) = 0;
                    if (!v209) {
                      break;
                    }
                    int v209 = (v209 - 1) >> 1;
                    int v210 = v10 + 32 * v209;
                    uint64_t v214 = *(void *)v210;
                  }
                  while (*(void *)v210 < v211);
                  *(void *)uint64_t v206 = v211;
                  *(void *)(v206 + 8) = v212;
                  *(void *)(v206 + 16) = *(void *)v260;
                  *(void *)(v206 + 23) = *(void *)&v260[7];
                  *(unsigned char *)(v206 + 31) = v213;
                }
              }
            }
            a2 -= 32;
            uint64_t v186 = v198-- <= 2;
          }
          while (!v186);
          return result;
        }
      }
    }
    uint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = (uint64_t *)(v10 + 32 * ((unint64_t)v12 >> 1));
    unint64_t v15 = *(void *)(a2 - 32);
    if ((unint64_t)v11 <= 0x1000)
    {
      double v21 = *(void *)v10;
      uint64_t v22 = *v14;
      if (*(void *)v10 >= *v14)
      {
        if (v15 >= v21) {
          goto LABEL_32;
        }
        *(void *)uint64_t v10 = v15;
        *(void *)(a2 - 32) = v21;
        uint64_t v267 = *(void *)(v10 + 24);
        uint64_t v242 = *(__n128 *)(v10 + 8);
        unint64_t v31 = *v232;
        *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
        *(__n128 *)(v10 + 8) = v31;
        double result = v242;
        *(void *)(a2 - 8) = v267;
        *int v232 = v242;
        unint64_t v32 = *v14;
        if (*(void *)v10 >= *v14) {
          goto LABEL_32;
        }
        *uint64_t v14 = *(void *)v10;
        *(void *)uint64_t v10 = v32;
        double v33 = v10 + 32 * v13;
        uint64_t v268 = *(void *)(v33 + 24);
        uint64_t v243 = *(__n128 *)(v33 + 8);
        double v34 = *(_OWORD *)(v10 + 8);
        *(void *)(v33 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 + 24);
        *(_OWORD *)(v33 + 8) = v34;
        double result = v243;
        *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v268;
        *(__n128 *)(v10 + 8) = v243;
        --a3;
        char v25 = *(void *)v10;
        if (a4) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v23 = v10 + 32 * v13 + 8;
        if (v15 >= v21)
        {
          *uint64_t v14 = v21;
          *(void *)uint64_t v10 = v22;
          uint64_t v271 = *(void *)(v23 + 16);
          uint64_t v246 = *(__n128 *)v23;
          float64x2_t v58 = *(_OWORD *)(v10 + 8);
          *(void *)(v23 + 16) = *(void *)(v10 + 24);
          *(_OWORD *)unint64_t v23 = v58;
          double result = v246;
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v271;
          *(__n128 *)(v10 + 8) = v246;
          double v59 = *(void *)(a2 - 32);
          unint64_t v60 = *(void *)v10;
          if (v59 < *(void *)v10)
          {
            *(void *)uint64_t v10 = v59;
            *(void *)(a2 - 32) = v60;
            uint64_t v272 = *(void *)(v10 + 24);
            uint64_t v247 = *(__n128 *)(v10 + 8);
            int v61 = *v232;
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
            *(__n128 *)(v10 + 8) = v61;
            double result = v247;
            *(void *)(a2 - 8) = v272;
            *int v232 = v247;
          }
LABEL_32:
          --a3;
          char v25 = *(void *)v10;
          if (a4) {
            goto LABEL_54;
          }
          goto LABEL_53;
        }
        *uint64_t v14 = v15;
        *(void *)(a2 - 32) = v22;
        uint64_t v264 = *(void *)(v23 + 16);
        uint64_t v239 = *(__n128 *)v23;
        uint64_t v24 = *v232;
        *(void *)(v23 + 16) = *(void *)(a2 - 8);
        *(__n128 *)unint64_t v23 = v24;
        double result = v239;
        *(void *)(a2 - 8) = v264;
        *int v232 = v239;
        --a3;
        char v25 = *(void *)v10;
        if (a4) {
          goto LABEL_54;
        }
      }
LABEL_53:
      if (*(void *)(v10 - 32) < v25) {
        goto LABEL_54;
      }
      uint64_t v133 = (void **)(v10 + 8);
      long double v134 = *(void *)(v10 + 8);
      *(void *)&v236[7] = *(void *)(v10 + 23);
      *(void *)uint64_t v236 = *(void *)(v10 + 16);
      double v135 = *(unsigned char *)(v10 + 31);
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v10 + 8) = 0;
      if (v25 < *(void *)(a2 - 32))
      {
        do
        {
          long double v136 = *(void *)(v10 + 32);
          v10 += 32;
        }
        while (v25 >= v136);
      }
      else
      {
        unsigned int v137 = v10 + 32;
        do
        {
          uint64_t v10 = v137;
          if (v137 >= a2) {
            break;
          }
          v137 += 32;
        }
        while (v25 >= *(void *)v10);
      }
      unsigned int v138 = a2;
      if (v10 < a2)
      {
        unsigned int v138 = a2;
        do
        {
          int v139 = *(void *)(v138 - 32);
          v138 -= 32;
        }
        while (v25 < v139);
      }
      if (v10 < v138)
      {
        int v140 = *(void *)v10;
        uint64_t v141 = *(void *)v138;
        do
        {
          *(void *)uint64_t v10 = v141;
          *(void *)unsigned int v138 = v140;
          uint64_t v283 = *(void *)(v10 + 24);
          uint64_t v255 = *(__n128 *)(v10 + 8);
          uint64_t v142 = *(_OWORD *)(v138 + 8);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v138 + 24);
          *(_OWORD *)(v10 + 8) = v142;
          double result = v255;
          *(void *)(v138 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v283;
          *(__n128 *)(v138 + 8) = v255;
          do
          {
            int v143 = *(void *)(v10 + 32);
            v10 += 32;
            int v140 = v143;
          }
          while (v25 >= v143);
          do
          {
            unsigned int v144 = *(void *)(v138 - 32);
            v138 -= 32;
            uint64_t v141 = v144;
          }
          while (v25 < v144);
        }
        while (v10 < v138);
      }
      char v5 = v10 - 32 >= a1;
      char v6 = v10 - 32 == a1;
      if (v10 - 32 == a1)
      {
        unsigned int v145 = *(char *)(v10 - 1);
        *(void *)a1 = v25;
        if (v145 < 0) {
          operator delete(*(void **)(v10 - 24));
        }
      }
      else
      {
        *(void *)a1 = *(void *)(v10 - 32);
        if (*(char *)(a1 + 31) < 0) {
          operator delete(*v133);
        }
        double result = *(__n128 *)(v10 - 24);
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 - 8);
        *(__n128 *)uint64_t v133 = result;
        *(unsigned char *)(v10 - 1) = 0;
        *(void *)(v10 - 32) = v25;
      }
      a4 = 0;
      *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v134;
      *(void *)(v10 - 9) = *(void *)&v236[7];
      *(void *)(v10 - 16) = *(void *)v236;
      *(unsigned char *)(v10 - 1) = v135;
    }
    else
    {
      uint64_t v16 = *v14;
      unint64_t v17 = *(void *)v10;
      if (*v14 >= *(void *)v10)
      {
        if (v15 < v16)
        {
          *uint64_t v14 = v15;
          *(void *)(a2 - 32) = v16;
          BOOL v26 = v10 + 32 * v13;
          uint64_t v265 = *(void *)(v26 + 24);
          uint64_t v240 = *(__n128 *)(v26 + 8);
          unint64_t v27 = *v232;
          *(void *)(v26 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
          *(__n128 *)(v26 + 8) = v27;
          *(void *)(a2 - 8) = v265;
          *int v232 = v240;
          double v28 = *(void *)v10;
          if (*v14 < *(void *)v10)
          {
            *(void *)uint64_t v10 = *v14;
            *uint64_t v14 = v28;
            uint64_t v266 = *(void *)(v10 + 24);
            uint64_t v241 = *(_OWORD *)(v10 + 8);
            double v30 = *(_OWORD *)(v26 + 8);
            double v29 = v26 + 8;
            *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v29 + 16);
            *(_OWORD *)(v10 + 8) = v30;
            *(void *)(v29 + 16) = v266;
            *(_OWORD *)double v29 = v241;
          }
        }
      }
      else
      {
        unint64_t v18 = (__n128 *)(v10 + 8);
        if (v15 >= v16)
        {
          *(void *)uint64_t v10 = v16;
          *uint64_t v14 = v17;
          unint64_t v35 = v10 + 32 * v13;
          uint64_t v269 = *(void *)(v10 + 24);
          uint64_t v244 = *v18;
          unint64_t v36 = *(__n128 *)(v35 + 8);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v35 + 24);
          *unint64_t v18 = v36;
          *(void *)(v35 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v269;
          *(__n128 *)(v35 + 8) = v244;
          double v37 = *(void *)(a2 - 32);
          double v38 = *v14;
          if (v37 >= *v14) {
            goto LABEL_24;
          }
          *uint64_t v14 = v37;
          *(void *)(a2 - 32) = v38;
          double v40 = *(__n128 *)(v35 + 8);
          double v39 = v35 + 8;
          uint64_t v263 = *(void *)(v39 + 16);
          uint64_t v238 = v40;
          unint64_t v19 = a2 - 24;
          float64x2_t v41 = *v232;
          *(void *)(v39 + 16) = *(void *)(a2 - 8);
          *(__n128 *)double v39 = v41;
        }
        else
        {
          *(void *)uint64_t v10 = v15;
          *(void *)(a2 - 32) = v17;
          uint64_t v263 = *(void *)(v10 + 24);
          uint64_t v238 = *v18;
          unint64_t v19 = a2 - 24;
          uint64_t v20 = *v232;
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 8);
          *unint64_t v18 = v20;
        }
        *(void *)(v19 + 16) = v263;
        *(__n128 *)unint64_t v19 = v238;
      }
LABEL_24:
      unint64_t v42 = v13 - 1;
      BOOL v43 = (uint64_t *)(v10 + 32 * (v13 - 1));
      uint64_t v44 = *v43;
      uint64_t v45 = *(void *)(v10 + 32);
      unint64_t v46 = *(void *)(a2 - 64);
      if (*v43 >= v45)
      {
        if (v46 < v44)
        {
          unint64_t *v43 = v46;
          *(void *)(a2 - 64) = v44;
          float64x2_t v51 = v10 + 32 * v42;
          uint64_t v270 = *(void *)(v51 + 24);
          uint64_t v245 = *(_OWORD *)(v51 + 8);
          uint64_t v52 = *v231;
          *(void *)(v51 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 40);
          *(_OWORD *)(v51 + 8) = v52;
          *(void *)(a2 - 40) = v270;
          *uint64_t v231 = v245;
          double v53 = *(void *)(v10 + 32);
          if (*v43 < v53)
          {
            long long v54 = v51 + 8;
            *(void *)(v10 + 32) = *v43;
            unint64_t *v43 = v53;
            unint64_t v55 = *(_OWORD *)(v10 + 40);
            unint64_t v56 = *(void *)(v10 + 56);
            unint64_t v57 = *(void *)(v54 + 16);
            *(_OWORD *)(v10 + 40) = *(_OWORD *)v54;
            *(void *)(v10 + 56) = v57;
            *(void *)(v54 + 16) = v56;
            *(_OWORD *)long long v54 = v55;
          }
        }
      }
      else
      {
        unint64_t v47 = (long long *)(v10 + 40);
        if (v46 >= v44)
        {
          *(void *)(v10 + 32) = v44;
          unint64_t *v43 = v45;
          double v62 = v10 + 32 * v42;
          float64_t v63 = *v47;
          unint64_t v64 = *(void *)(v10 + 56);
          unint64_t v65 = *(void *)(v62 + 24);
          *unint64_t v47 = *(_OWORD *)(v62 + 8);
          *(void *)(v10 + 56) = v65;
          *(void *)(v62 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v64;
          *(_OWORD *)(v62 + 8) = v63;
          double v66 = *(void *)(a2 - 64);
          double v67 = *v43;
          if (v66 < *v43)
          {
            unint64_t *v43 = v66;
            *(void *)(a2 - 64) = v67;
            double v69 = *(_OWORD *)(v62 + 8);
            int v68 = v62 + 8;
            uint64_t v273 = *(void *)(v68 + 16);
            uint64_t v70 = *v231;
            *(void *)(v68 + 16) = *(void *)(a2 - 40);
            *(_OWORD *)int v68 = v70;
            *(void *)(a2 - 40) = v273;
            *uint64_t v231 = v69;
          }
        }
        else
        {
          *(void *)(v10 + 32) = v46;
          *(void *)(a2 - 64) = v45;
          double v48 = *v47;
          double v49 = *(void *)(v10 + 56);
          double v50 = *(void *)(a2 - 40);
          *unint64_t v47 = *v231;
          *(void *)(v10 + 56) = v50;
          *(void *)(a2 - 40) = v49;
          *uint64_t v231 = v48;
        }
      }
      uint64_t v71 = v13 + 1;
      uint64_t v72 = (uint64_t *)(v10 + 32 * (v13 + 1));
      float64x2_t v73 = *v72;
      float64x2_t v74 = *(void *)(v10 + 64);
      double v75 = *(void *)(a2 - 96);
      if (*v72 >= v74)
      {
        if (v75 < v73)
        {
          *uint64_t v72 = v75;
          *(void *)(a2 - 96) = v73;
          float64x2_t v80 = v10 + 32 * v71;
          uint64_t v274 = *(void *)(v80 + 24);
          uint64_t v248 = *(_OWORD *)(v80 + 8);
          float64x2_t v81 = *v230;
          *(void *)(v80 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 - 72);
          *(_OWORD *)(v80 + 8) = v81;
          *(void *)(a2 - 72) = v274;
          *uint64_t v230 = v248;
          double v82 = *(void *)(v10 + 64);
          if (*v72 < v82)
          {
            double v83 = v80 + 8;
            *(void *)(v10 + 64) = *v72;
            *uint64_t v72 = v82;
            double v84 = *(_OWORD *)(v10 + 72);
            BOOL v85 = *(void *)(v10 + 88);
            double v86 = *(void *)(v83 + 16);
            *(_OWORD *)(v10 + 72) = *(_OWORD *)v83;
            *(void *)(v10 + 88) = v86;
            *(void *)(v83 + 16) = v85;
            *(_OWORD *)double v83 = v84;
          }
        }
      }
      else
      {
        int8x16_t v76 = (long long *)(v10 + 72);
        if (v75 >= v73)
        {
          *(void *)(v10 + 64) = v73;
          *uint64_t v72 = v74;
          double v87 = v10 + 32 * v71;
          long long v88 = *v76;
          BOOL v89 = *(void *)(v10 + 88);
          unsigned int v90 = *(void *)(v87 + 24);
          unsigned int *v76 = *(_OWORD *)(v87 + 8);
          *(void *)(v10 + 88) = v90;
          *(void *)(v87 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v89;
          *(_OWORD *)(v87 + 8) = v88;
          int v91 = *(void *)(a2 - 96);
          float64x2_t v92 = *v72;
          if (v91 < *v72)
          {
            *uint64_t v72 = v91;
            *(void *)(a2 - 96) = v92;
            unsigned __int8 v94 = *(_OWORD *)(v87 + 8);
            long long v93 = v87 + 8;
            uint64_t v275 = *(void *)(v93 + 16);
            uint64_t v95 = *v230;
            *(void *)(v93 + 16) = *(void *)(a2 - 72);
            *(_OWORD *)long long v93 = v95;
            *(void *)(a2 - 72) = v275;
            *uint64_t v230 = v94;
          }
        }
        else
        {
          *(void *)(v10 + 64) = v75;
          *(void *)(a2 - 96) = v74;
          long long v77 = *v76;
          float64x2_t v78 = *(void *)(v10 + 88);
          float64x2_t v79 = *(void *)(a2 - 72);
          unsigned int *v76 = *v230;
          *(void *)(v10 + 88) = v79;
          *(void *)(a2 - 72) = v78;
          *uint64_t v230 = v77;
        }
      }
      uint64_t v96 = *v14;
      uint64_t v97 = *v43;
      double v98 = *v72;
      if (*v14 >= *v43)
      {
        if (v98 < v96)
        {
          *uint64_t v14 = v98;
          *uint64_t v72 = v96;
          char v101 = v10 + 32 * v13;
          unsigned int v102 = v10 + 32 * v71;
          uint64_t v277 = *(void *)(v101 + 24);
          uint64_t v250 = *(_OWORD *)(v101 + 8);
          *(_OWORD *)(v101 + 8) = *(_OWORD *)(v102 + 8);
          *(void *)(v101 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v102 + 24);
          *(void *)(v102 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v277;
          *(_OWORD *)(v102 + 8) = v250;
          unsigned int v103 = *v43;
          if (*v14 < *v43)
          {
            unint64_t *v43 = *v14;
            *uint64_t v14 = v103;
            int v104 = v10 + 32 * v42;
            uint64_t v278 = *(void *)(v104 + 24);
            uint64_t v251 = *(_OWORD *)(v104 + 8);
            uint64_t v106 = *(_OWORD *)(v101 + 8);
            int v105 = v101 + 8;
            *(_OWORD *)(v104 + 8) = v106;
            *(void *)(v104 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v105 + 16);
            *(void *)(v105 + 16) = v278;
            *(_OWORD *)int v105 = v251;
          }
        }
      }
      else
      {
        double v99 = v10 + 32 * v42 + 8;
        if (v98 >= v96)
        {
          unint64_t *v43 = v96;
          *uint64_t v14 = v97;
          unsigned int v107 = v10 + 32 * v13;
          uint64_t v279 = *(void *)(v99 + 16);
          uint64_t v252 = *(_OWORD *)v99;
          *(_OWORD *)double v99 = *(_OWORD *)(v107 + 8);
          *(void *)(v99 + 16) = *(void *)(v107 + 24);
          *(void *)(v107 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v279;
          *(_OWORD *)(v107 + 8) = v252;
          int64_t v108 = *v14;
          if (*v72 < *v14)
          {
            *uint64_t v14 = *v72;
            *uint64_t v72 = v108;
            uint64_t v109 = v10 + 32 * v71;
            long double v111 = *(_OWORD *)(v107 + 8);
            long double v110 = v107 + 8;
            uint64_t v280 = *(void *)(v110 + 16);
            *(_OWORD *)long double v110 = *(_OWORD *)(v109 + 8);
            *(void *)(v110 + 16) = *(void *)(v109 + 24);
            *(void *)(v109 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v280;
            *(_OWORD *)(v109 + 8) = v111;
          }
        }
        else
        {
          unint64_t *v43 = v98;
          *uint64_t v72 = v97;
          uint64_t v100 = v10 + 32 * v71;
          uint64_t v276 = *(void *)(v99 + 16);
          uint64_t v249 = *(_OWORD *)v99;
          *(_OWORD *)double v99 = *(_OWORD *)(v100 + 8);
          *(void *)(v99 + 16) = *(void *)(v100 + 24);
          *(void *)(v100 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v276;
          *(_OWORD *)(v100 + 8) = v249;
        }
      }
      uint64x2_t v112 = *(void *)v10;
      *(void *)uint64_t v10 = *v14;
      *uint64_t v14 = v112;
      uint64_t v113 = v10 + 32 * v13;
      uint64_t v281 = *(void *)(v10 + 24);
      uint64_t v253 = *(__n128 *)(v10 + 8);
      uint64_t v114 = *(_OWORD *)(v113 + 8);
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v113 + 24);
      *(_OWORD *)(v10 + 8) = v114;
      double result = v253;
      *(void *)(v113 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v281;
      *(__n128 *)(v113 + 8) = v253;
      --a3;
      char v25 = *(void *)v10;
      if ((a4 & 1) == 0) {
        goto LABEL_53;
      }
LABEL_54:
      int v234 = a3;
      unsigned int v115 = 0;
      unsigned int v116 = (void **)(v10 + 8);
      int v117 = *(void *)(v10 + 8);
      *(void *)&v235[7] = *(void *)(v10 + 23);
      *(void *)uint64_t v235 = *(void *)(v10 + 16);
      unsigned int v118 = *(unsigned char *)(v10 + 31);
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)(v10 + 8) = 0;
      do
      {
        unsigned int v119 = *(void *)(v10 + v115 + 32);
        v115 += 32;
      }
      while (v119 < v25);
      unsigned int v120 = v10 + v115;
      int v121 = (uint64_t *)a2;
      if (v115 == 32)
      {
        int v121 = (uint64_t *)a2;
        do
        {
          if (v120 >= (unint64_t)v121) {
            break;
          }
          long double v123 = *(v121 - 4);
          v121 -= 4;
        }
        while (v123 >= v25);
      }
      else
      {
        do
        {
          uint64_t v122 = *(v121 - 4);
          v121 -= 4;
        }
        while (v122 >= v25);
      }
      if (v120 >= (unint64_t)v121)
      {
        v10 += v115;
        unsigned int v129 = (void *)(v120 - 32);
        if (v120 - 32 != a1) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v124 = *v121;
        v10 += v115;
        uint64x2_t v125 = v121;
        do
        {
          *(void *)uint64_t v10 = v124;
          *uint64x2_t v125 = v119;
          uint64_t v282 = *(void *)(v10 + 24);
          uint64_t v254 = *(__n128 *)(v10 + 8);
          uint64_t v126 = *(_OWORD *)(v125 + 1);
          *(void *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v125[3];
          *(_OWORD *)(v10 + 8) = v126;
          double result = v254;
          v125[3] = v282;
          *(__n128 *)(v125 + 1) = v254;
          do
          {
            long double v127 = *(void *)(v10 + 32);
            v10 += 32;
            unsigned int v119 = v127;
          }
          while (v127 < v25);
          do
          {
            unsigned int v128 = *(v125 - 4);
            v125 -= 4;
            uint64_t v124 = v128;
          }
          while (v128 >= v25);
        }
        while (v10 < (unint64_t)v125);
        unsigned int v129 = (void *)(v10 - 32);
        if (v10 - 32 != a1)
        {
LABEL_69:
          *(void *)a1 = *v129;
          if (*(char *)(a1 + 31) < 0) {
            operator delete(*v116);
          }
          double result = *(__n128 *)(v10 - 24);
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v10 - 8);
          *(__n128 *)unsigned int v116 = result;
          *(unsigned char *)(v10 - 1) = 0;
          *(void *)(v10 - 32) = v25;
          goto LABEL_75;
        }
      }
      int v130 = *(char *)(v10 - 1);
      *(void *)a1 = v25;
      if (v130 < 0) {
        operator delete(*(void **)(v10 - 24));
      }
LABEL_75:
      *(void *)(v10 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v117;
      *(void *)(v10 - 9) = *(void *)&v235[7];
      *(void *)(v10 - 16) = *(void *)v235;
      *(unsigned char *)(v10 - 1) = v118;
      char v5 = v120 >= (unint64_t)v121;
      a3 = v234;
      if (v5)
      {
        int v131 = sub_C787B8(a1, (uint64_t)v129, result);
        if (sub_C787B8(v10, a2, v132))
        {
          a2 = (unint64_t)v129;
          if (v131) {
            return result;
          }
          goto LABEL_1;
        }
        if (!v131) {
          goto LABEL_79;
        }
      }
      else
      {
LABEL_79:
        sub_C773C8(a1, v129, v234, a4 & 1);
        a4 = 0;
      }
    }
  }
  uint64_t v166 = v10 + 32;
  uint64_t v168 = v10 == a2 || v166 == a2;
  if (a4)
  {
    if (v168) {
      return result;
    }
    uint64_t v169 = 0;
    int v170 = v10;
    while (1)
    {
      uint64_t v171 = v166;
      uint64_t v172 = *(void *)(v170 + 32);
      if (v172 < *(void *)v170)
      {
        *(void *)&v258[7] = *(void *)(v170 + 55);
        uint64_t v173 = *(void *)(v170 + 40);
        *(void *)uint64_t v258 = *(void *)(v170 + 48);
        uint64_t v174 = *(unsigned char *)(v170 + 63);
        *(void *)(v170 + 48) = 0;
        *(void *)(v170 + 56) = 0;
        *(void *)(v170 + 40) = 0;
        uint64_t v175 = *(char *)(v171 + 31);
        *(void *)uint64_t v171 = *(void *)v170;
        unint64_t v176 = (void **)(v171 + 8);
        if (v175 < 0) {
          operator delete(*v176);
        }
        unint64_t v177 = (void *)(v170 + 8);
        double result = *(__n128 *)(v170 + 8);
        *(__n128 *)unint64_t v176 = result;
        *(void *)(v171 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v170 + 24);
        *(unsigned char *)(v170 + 31) = 0;
        *(unsigned char *)(v170 + 8) = 0;
        if (v170 == a1)
        {
          int v170 = a1;
        }
        else
        {
          uint64_t v178 = *(void *)(v170 - 32);
          if (v172 < v178)
          {
            uint64_t v179 = v169;
            do
            {
              uint64_t v180 = a1 + v179;
              *(void *)uint64_t v180 = v178;
              double result = *(__n128 *)(a1 + v179 - 24);
              *(__n128 *)(v180 + 8) = result;
              *(void *)(v180 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + v179 - 8);
              *(unsigned char *)(v180 - 1) = 0;
              *(unsigned char *)(v180 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              v179 -= 32;
              if (!v179)
              {
                int v170 = a1;
                goto LABEL_142;
              }
              uint64_t v178 = *(void *)(v180 - 64);
            }
            while (v172 < v178);
            int v170 = a1 + v179;
LABEL_142:
            unint64_t v177 = (void *)(v180 - 24);
          }
        }
        *(void *)int v170 = v172;
        *unint64_t v177 = v173;
        *(void *)(v170 + 16) = *(void *)v258;
        *(void *)(v170 + 23) = *(void *)&v258[7];
        *(unsigned char *)(v170 + 31) = v174;
      }
      uint64_t v166 = v171 + 32;
      v169 += 32;
      int v170 = v171;
      if (v171 + 32 == a2) {
        return result;
      }
    }
  }
  if (!v168)
  {
    do
    {
      unint64_t v222 = *(void *)v166;
      if (*(void *)v166 < *(void *)a1)
      {
        *(void *)&v261[7] = *(void *)(a1 + 55);
        int v223 = *(void *)(a1 + 40);
        *(void *)uint64_t v261 = *(void *)(a1 + 48);
        uint64_t v224 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        uint64_t v225 = *(char *)(v166 + 31);
        *(void *)uint64_t v166 = *(void *)a1;
        uint64_t v226 = (void **)(v166 + 8);
        if (v225 < 0) {
          operator delete(*v226);
        }
        double result = *(__n128 *)(a1 + 8);
        *(__n128 *)uint64_t v226 = result;
        *(void *)(v166 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + 24);
        *(unsigned char *)(a1 + 31) = 0;
        *(unsigned char *)(a1 + 8) = 0;
        uint64_t v227 = *(void *)(a1 - 32);
        if (v222 < v227)
        {
          long long v221 = a1;
          do
          {
            *(void *)long long v221 = v227;
            double result = *(__n128 *)(v221 - 24);
            *(__n128 *)(v221 + 8) = result;
            *(void *)(v221 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v221 - 8);
            *(unsigned char *)(v221 - 1) = 0;
            *(unsigned char *)(v221 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            uint64_t v227 = *(void *)(v221 - 64);
            v221 -= 32;
          }
          while (v222 < v227);
          char v220 = (void *)(v221 + 8);
        }
        else
        {
          char v220 = (void *)(a1 + 8);
          long long v221 = a1;
        }
        *(void *)long long v221 = v222;
        *char v220 = v223;
        *(void *)(v221 + 16) = *(void *)v261;
        *(void *)(v221 + 23) = *(void *)&v261[7];
        *(unsigned char *)(v221 + 31) = v224;
      }
      v166 += 32;
      a1 += 32;
    }
    while (v166 != a2);
  }
  return result;
}

  unint64_t v11 = (uint64_t)(a2 - 2);
  uint64_t v12 = (double *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  unint64_t v64 = a5;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          BOOL v26 = *(a2 - 2);
          unint64_t v27 = *(double *)a1;
          if (v26 < *(double *)a1 || v27 >= v26 && *(a2 - 1) < *(double *)(a1 + 8))
          {
            *(double *)a1 = v26;
            *(a2 - 2) = v27;
            double v28 = *(void *)(a1 + 8);
            *(double *)(a1 + 8) = *(a2 - 1);
            *((void *)a2 - 1) = v28;
          }
          return;
        case 3uLL:
          sub_EFEDA4((double *)a1, a1 + 16, v11);
          return;
        case 4uLL:
          sub_EFEDA4((double *)a1, a1 + 16, a1 + 32);
          double v29 = *(a2 - 2);
          double v30 = *(double *)(a1 + 32);
          if (v29 >= v30 && (v30 < v29 || *(a2 - 1) >= *(double *)(a1 + 40))) {
            return;
          }
          *(double *)(a1 + 32) = v29;
          *(a2 - 2) = v30;
          unint64_t v31 = *(void *)(a1 + 40);
          *(double *)(a1 + 40) = *(a2 - 1);
          *((void *)a2 - 1) = v31;
          unint64_t v32 = *(double *)(a1 + 32);
          double v33 = *(double *)(a1 + 16);
          if (v32 >= v33)
          {
            if (v33 < v32) {
              return;
            }
            unint64_t v35 = *(double *)(a1 + 40);
            double v34 = *(double *)(a1 + 24);
            if (v35 >= v34) {
              return;
            }
          }
          else
          {
            double v34 = *(double *)(a1 + 24);
            unint64_t v35 = *(double *)(a1 + 40);
          }
          *(double *)(a1 + 16) = v32;
          *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v35;
          *(double *)(a1 + 32) = v33;
          *(double *)(a1 + 40) = v34;
          unint64_t v36 = *(double *)a1;
          if (v32 >= *(double *)a1)
          {
            if (v36 < v32) {
              return;
            }
            double v37 = *(double *)(a1 + 8);
            if (v35 >= v37) {
              return;
            }
          }
          else
          {
            double v37 = *(double *)(a1 + 8);
          }
          *(double *)a1 = v32;
          *(double *)(a1 + 8) = v35;
          *(double *)(a1 + 16) = v36;
          *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v37;
          return;
        case 5uLL:
          sub_EFF4D8(a1, a1 + 16, a1 + 32, a1 + 48, v11);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if ((double *)a1 != a2)
      {
        uint64_t v52 = (v15 - 2) >> 1;
        double v53 = v52 + 1;
        long long v54 = (double *)(a1 + 16 * v52);
        do
        {
          sub_EFF70C(a1, a3, v14 >> 4, v54);
          v54 -= 2;
          --v53;
        }
        while (v53);
        unint64_t v55 = (unint64_t)v14 >> 4;
        do
        {
          sub_EFF858((void *)a1, (uint64_t)a2, a3, v55);
          a2 -= 2;
        }
        while (v55-- > 2);
      }
      return;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = (double *)(a1 + 16 * (v15 >> 1));
    if ((unint64_t)v14 < 0x801)
    {
      sub_EFEDA4(v18, a1, v11);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_EFEDA4((double *)a1, (uint64_t)v18, v11);
      unint64_t v19 = v11;
      uint64_t v20 = (double *)(a1 + 16 * v17);
      sub_EFEDA4((double *)(a1 + 16), (uint64_t)(v20 - 2), (uint64_t)(a2 - 4));
      sub_EFEDA4((double *)(a1 + 32), a1 + 16 + 16 * v17, (uint64_t)(a2 - 6));
      sub_EFEDA4(v20 - 2, (uint64_t)v18, a1 + 16 + 16 * v17);
      double v21 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v20;
      *(_OWORD *)uint64_t v20 = v21;
      unint64_t v11 = v19;
      a5 = v64;
      if (v64) {
        goto LABEL_14;
      }
    }
    uint64_t v22 = *(double *)(a1 - 16);
    if (v22 >= *(double *)a1 && (*(double *)a1 < v22 || *(double *)(a1 - 8) >= *(double *)(a1 + 8)))
    {
      uint64_t v12 = sub_EFEF24((double *)a1, a2);
LABEL_19:
      a5 = 0;
      a4 = -v16;
      goto LABEL_2;
    }
LABEL_14:
    unint64_t v23 = (double *)sub_EFF074((double *)a1, a2);
    if ((v24 & 1) == 0) {
      goto LABEL_17;
    }
    char v25 = sub_EFF1BC(a1, v23);
    uint64_t v12 = v23 + 2;
    if (sub_EFF1BC((uint64_t)(v23 + 2), a2))
    {
      a4 = -v16;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v16 + 1;
    if (!v25)
    {
LABEL_17:
      sub_EFE7E8(a1, v23, a3, -v16, a5 & 1);
      uint64_t v12 = v23 + 2;
      goto LABEL_19;
    }
  }
  double v38 = (double *)(a1 + 16);
  double v40 = (double *)a1 == a2 || v38 == a2;
  if (a5)
  {
    if (v40) {
      return;
    }
    float64x2_t v41 = 0;
    unint64_t v42 = (double *)a1;
LABEL_47:
    BOOL v43 = v42;
    unint64_t v42 = v38;
    uint64_t v44 = v43[2];
    uint64_t v45 = *v43;
    if (v44 >= *v43)
    {
      if (v45 < v44) {
        goto LABEL_46;
      }
      unint64_t v46 = v43[3];
      if (v46 >= v43[1]) {
        goto LABEL_46;
      }
    }
    else
    {
      unint64_t v46 = v43[3];
    }
    v43[2] = v45;
    v38[1] = v43[1];
    unint64_t v47 = (double *)a1;
    if (v43 == (double *)a1) {
      goto LABEL_45;
    }
    double v48 = v41;
    while (1)
    {
      float64x2_t v51 = *(double *)(a1 + v48 - 16);
      if (v44 >= v51)
      {
        if (v51 < v44)
        {
          unint64_t v47 = (double *)(a1 + v48);
          goto LABEL_45;
        }
        double v49 = *(double *)(a1 + v48 - 8);
        if (v46 >= v49)
        {
          unint64_t v47 = v43;
LABEL_45:
          *unint64_t v47 = v44;
          v47[1] = v46;
LABEL_46:
          double v38 = v42 + 2;
          v41 += 16;
          if (v42 + 2 == a2) {
            return;
          }
          goto LABEL_47;
        }
      }
      else
      {
        double v49 = *(double *)(a1 + v48 - 8);
      }
      v43 -= 2;
      double v50 = (double *)(a1 + v48);
      unint64_t *v50 = v51;
      v50[1] = v49;
      v48 -= 16;
      if (!v48)
      {
        unint64_t v47 = (double *)a1;
        goto LABEL_45;
      }
    }
  }
  if (!v40)
  {
    for (double i = a1 + 8; ; i += 16)
    {
      float64x2_t v58 = (double *)a1;
      a1 = (uint64_t)v38;
      double v59 = v58[2];
      unint64_t v60 = *v58;
      if (v59 < *v58) {
        break;
      }
      if (v60 >= v59)
      {
        int v61 = v58[3];
        if (v61 < v58[1]) {
          goto LABEL_81;
        }
      }
LABEL_76:
      v38 += 2;
      if ((double *)(a1 + 16) == a2) {
        return;
      }
    }
    int v61 = v58[3];
LABEL_81:
    for (unint64_t j = (double *)i; ; j -= 2)
    {
      float64_t v63 = *j;
      j[1] = v60;
      j[2] = v63;
      unint64_t v60 = *(j - 3);
      if (v59 >= v60 && (v60 < v59 || v61 >= *(j - 2))) {
        break;
      }
    }
    *(j - 1) = v59;
    *unint64_t j = v61;
    goto LABEL_76;
  }
}

  unint64_t v56 = a2 - 32;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = a2 - v11;
    uint64_t v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          double v38 = a1 + 8;
          double v37 = *a1;
          double v39 = *(a2 - 32);
          if (v39 >= v37)
          {
            if (v37 < v39) {
              return;
            }
            float64x2_t v41 = (char)a1[31];
            double v40 = *((void *)a1 + 1);
            double v48 = (char)*(a2 - 1);
            double v49 = v48 >= 0 ? *(a2 - 1) : *((void *)a2 - 2);
            double v50 = v48 >= 0 ? a2 - 24 : (unsigned __int8 *)*((void *)a2 - 3);
            float64x2_t v51 = v41 >= 0 ? a1[31] : *((void *)a1 + 2);
            uint64_t v52 = v41 >= 0 ? a1 + 8 : (unsigned __int8 *)*((void *)a1 + 1);
            double v53 = v51 >= v49 ? v49 : v51;
            long long v54 = memcmp(v50, v52, v53);
            unint64_t v55 = v49 < v51;
            if (v54) {
              unint64_t v55 = v54 < 0;
            }
            if (!v55) {
              return;
            }
          }
          else
          {
            double v40 = *((void *)a1 + 1);
            LOBYTE(v41) = a1[31];
          }
          *(void *)((char *)&v58 + 7) = *(void *)(a1 + 23);
          *(void *)&float64x2_t v58 = *((void *)a1 + 2);
          *((void *)a1 + 2) = 0;
          *((void *)a1 + 3) = 0;
          float64x2_t *v38 = 0;
          *a1 = *(a2 - 32);
          unint64_t v42 = *(_OWORD *)(a2 - 24);
          *((void *)a1 + 3) = *((void *)a2 - 1);
          *(_OWORD *)double v38 = v42;
          *(a2 - 32) = v37;
          *((void *)a2 - 3) = v40;
          *((void *)a2 - 2) = v58;
          *(void *)(a2 - 9) = *(void *)((char *)&v58 + 7);
          *(a2 - 1) = v41;
          return;
        case 3uLL:
          sub_F31F58(a1, a1 + 32, v56);
          return;
        case 4uLL:
          sub_F33098(a1, a1 + 32, a1 + 64, v56);
          return;
        case 5uLL:
          sub_F333A8(a1, a1 + 32, a1 + 64, a1 + 96, v56);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 767) {
      break;
    }
    unint64_t v15 = v12;
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        BOOL v43 = (v14 - 2) >> 1;
        uint64_t v44 = v43 + 1;
        uint64_t v45 = &a1[32 * v43];
        do
        {
          sub_F3379C((uint64_t)a1, a3, v13 >> 5, v45);
          v45 -= 32;
          --v44;
        }
        while (v44);
        unint64_t v46 = (unint64_t)v13 >> 5;
        do
        {
          sub_F33B18((uint64_t)a1, (uint64_t)a2, a3, v46);
          a2 -= 32;
        }
        while (v46-- > 2);
      }
      return;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = &a1[32 * (v14 >> 1)];
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_F31F58(v17, a1, v56);
      if (a5) {
        goto LABEL_31;
      }
    }
    else
    {
      sub_F31F58(a1, v17, v56);
      unint64_t v18 = &a1[32 * v16];
      sub_F31F58(a1 + 32, v18 - 32, a2 - 64);
      sub_F31F58(a1 + 64, &a1[32 * v16 + 32], a2 - 96);
      sub_F31F58(v18 - 32, v17, &a1[32 * v16 + 32]);
      unint64_t v19 = *a1;
      uint64_t v20 = *((void *)a1 + 1);
      *(void *)((char *)&v57 + 7) = *(void *)(a1 + 23);
      *(void *)&unint64_t v57 = *((void *)a1 + 2);
      double v21 = a1[31];
      *((void *)a1 + 2) = 0;
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 1) = 0;
      *a1 = *v17;
      uint64_t v22 = *((void *)v18 + 3);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(v18 + 8);
      *((void *)a1 + 3) = v22;
      *unint64_t v17 = v19;
      *((void *)v18 + 1) = v20;
      *(void *)(v18 + 23) = *(void *)((char *)&v57 + 7);
      *((void *)v18 + 2) = v57;
      v17[31] = v21;
      if (a5) {
        goto LABEL_31;
      }
    }
    unint64_t v23 = *(a1 - 32);
    uint64_t v24 = *a1;
    if (v23 >= v24)
    {
      if (v24 < v23) {
        goto LABEL_35;
      }
      char v25 = (char)a1[31];
      BOOL v26 = (char)*(a1 - 1);
      if (v26 >= 0) {
        unint64_t v27 = *(a1 - 1);
      }
      else {
        unint64_t v27 = *((void *)a1 - 2);
      }
      if (v26 >= 0) {
        double v28 = a1 - 24;
      }
      else {
        double v28 = (unsigned __int8 *)*((void *)a1 - 3);
      }
      if (v25 >= 0) {
        double v29 = a1[31];
      }
      else {
        double v29 = *((void *)a1 + 2);
      }
      if (v25 >= 0) {
        double v30 = a1 + 8;
      }
      else {
        double v30 = (const void *)*((void *)a1 + 1);
      }
      if (v29 >= v27) {
        unint64_t v31 = v27;
      }
      else {
        unint64_t v31 = v29;
      }
      unint64_t v32 = memcmp(v28, v30, v31);
      double v33 = v27 < v29;
      if (v32) {
        double v33 = v32 < 0;
      }
      if (!v33)
      {
LABEL_35:
        unint64_t v11 = sub_F323C0(a1, a2);
        goto LABEL_36;
      }
    }
LABEL_31:
    double v34 = sub_F32870(a1, (unint64_t)a2);
    if ((v35 & 1) == 0) {
      goto LABEL_34;
    }
    unint64_t v36 = sub_F32C50(a1, v34);
    unint64_t v11 = v34 + 32;
    if (sub_F32C50(v34 + 32, a2))
    {
      a4 = -v15;
      a2 = v34;
      if (v36) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v36)
    {
LABEL_34:
      sub_F31400(a1, v34, a3, -v15, a5 & 1);
      unint64_t v11 = v34 + 32;
LABEL_36:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_F319F8(a1, a2);
  }
  else
  {
    sub_F31CCC(a1, a2);
  }
}

  unint64_t v11 = (__n128 *)(a2 - 24);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (uint64_t)a2 - v12;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 5);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v38 = 0x7FFFFFFF;
          if (*(a2 - 13) == -1 || *(a2 - 12) == 0x7FFFFFFF) {
            goto LABEL_44;
          }
          double v40 = *(a2 - 11);
          if (v40 == -1) {
            goto LABEL_45;
          }
          float64x2_t v41 = *(a2 - 10);
          if (v41 == 0x7FFFFFFF)
          {
LABEL_44:
            double v40 = -1;
LABEL_45:
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1)
            {
LABEL_75:
              if (v40 < v42 || v42 >= v40 && v38 < v43)
              {
                unint64_t v55 = *(__n128 *)a1;
                unint64_t v57 = *(_OWORD *)(a1 + 16);
                *(_OWORD *)float64_t v63 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
                double v59 = *(_OWORD *)(a1 + 32);
                int v61 = *(_OWORD *)(a1 + 48);
                float64x2_t v51 = *((_OWORD *)a2 - 3);
                double v50 = *((_OWORD *)a2 - 2);
                uint64_t v52 = *((_OWORD *)a2 - 4);
                *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 5);
                *(_OWORD *)(a1 + 48) = v51;
                *(_OWORD *)(a1 + 64) = v50;
                *(_OWORD *)(a1 + 32) = v52;
                double v53 = *((_OWORD *)a2 - 5);
                *(__n128 *)a1 = *v11;
                *(_OWORD *)(a1 + 16) = v53;
                *((_OWORD *)a2 - 4) = v59;
                *((_OWORD *)a2 - 3) = v61;
                *((_OWORD *)a2 - 2) = *(_OWORD *)v63;
                *(_OWORD *)(a2 - 5) = *(_OWORD *)&v63[12];
                double result = v55;
                *unint64_t v11 = v55;
                *((_OWORD *)a2 - 5) = v57;
              }
              return result;
            }
          }
          else
          {
            v40 += *(a2 - 13);
            double v38 = v41 + *(a2 - 12);
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1) {
              goto LABEL_75;
            }
          }
          if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
          {
            unint64_t v42 = *(_DWORD *)(a1 + 52);
            if (v42 != -1)
            {
              uint64_t v44 = *(_DWORD *)(a1 + 56);
              if (v44 == 0x7FFFFFFF)
              {
                unint64_t v42 = -1;
              }
              else
              {
                v42 += *(_DWORD *)(a1 + 44);
                BOOL v43 = v44 + *(_DWORD *)(a1 + 48);
              }
            }
          }
          goto LABEL_75;
        case 3uLL:
          sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)a2 - 6);
          return result;
        case 4uLL:
          result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 2303) {
      break;
    }
    if (v13 == 1)
    {
      if ((_DWORD *)a1 != a2)
      {
        uint64_t v45 = (v16 - 2) >> 1;
        unint64_t v46 = v45 + 1;
        unint64_t v47 = (long long *)(a1 + 96 * v45);
        do
        {
          sub_FD9EF8(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v15 >> 5), v47);
          v47 -= 6;
          --v46;
        }
        while (v46);
        double v48 = v15 / 0x60uLL;
        do
        {
          result.n128_u64[0] = sub_FDA350((__n128 *)a1, (uint64_t)a2, a3, v48).n128_u64[0];
          a2 -= 24;
        }
        while (v48-- > 2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (long long *)(a1 + 96 * (v16 >> 1));
    if ((unint64_t)v15 <= 0x3000)
    {
      sub_FD8340(v18, (long long *)a1, (long long *)a2 - 6);
      if (a5) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_FD8340((long long *)a1, v18, (long long *)a2 - 6);
      unint64_t v19 = 96 * v17;
      uint64_t v20 = (long long *)(96 * v17 + a1 - 96);
      sub_FD8340((long long *)(a1 + 96), v20, (long long *)a2 - 12);
      double v21 = (long long *)(a1 + 96 + v19);
      sub_FD8340((long long *)(a1 + 192), v21, (long long *)a2 - 18);
      sub_FD8340(v20, v18, v21);
      long long v54 = *(_OWORD *)a1;
      unint64_t v56 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)double v62 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
      float64x2_t v58 = *(_OWORD *)(a1 + 32);
      unint64_t v60 = *(_OWORD *)(a1 + 48);
      unint64_t v23 = v18[3];
      uint64_t v22 = v18[4];
      uint64_t v24 = v18[2];
      *(_OWORD *)(a1 + 76) = *(long long *)((char *)v18 + 76);
      *(_OWORD *)(a1 + 48) = v23;
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 32) = v24;
      char v25 = v18[1];
      *(_OWORD *)a1 = *v18;
      *(_OWORD *)(a1 + 16) = v25;
      *unint64_t v18 = v54;
      v18[1] = v56;
      *(long long *)((char *)v18 + 76) = *(_OWORD *)&v62[12];
      v18[3] = v60;
      char v18[4] = *(_OWORD *)v62;
      v18[2] = v58;
      if (a5) {
        goto LABEL_26;
      }
    }
    BOOL v26 = -1;
    unint64_t v27 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 - 52) == -1) {
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 - 48) == 0x7FFFFFFF) {
      goto LABEL_16;
    }
    BOOL v26 = *(_DWORD *)(a1 - 44);
    if (v26 == -1) {
      goto LABEL_16;
    }
    double v28 = *(_DWORD *)(a1 - 40);
    if (v28 == 0x7FFFFFFF)
    {
      BOOL v26 = -1;
LABEL_16:
      double v29 = -1;
      double v30 = 0x7FFFFFFF;
      if (*(_DWORD *)(a1 + 44) == -1) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
    v26 += *(_DWORD *)(a1 - 52);
    unint64_t v27 = v28 + *(_DWORD *)(a1 - 48);
    double v29 = -1;
    double v30 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 + 44) == -1) {
      goto LABEL_23;
    }
LABEL_17:
    if (*(_DWORD *)(a1 + 48) == 0x7FFFFFFF || (double v29 = *(_DWORD *)(a1 + 52), v29 == -1))
    {
LABEL_23:
      if (v26 < v29) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    unint64_t v31 = *(_DWORD *)(a1 + 56);
    if (v31 == 0x7FFFFFFF)
    {
      double v29 = -1;
      if (v26 != -1) {
        goto LABEL_26;
      }
    }
    else
    {
      v29 += *(_DWORD *)(a1 + 44);
      double v30 = v31 + *(_DWORD *)(a1 + 48);
      if (v26 < v29) {
        goto LABEL_26;
      }
    }
LABEL_24:
    if (v29 < v26 || v27 >= v30)
    {
      uint64_t v12 = sub_FD88B0((long long *)a1, a2);
      goto LABEL_33;
    }
LABEL_26:
    unint64_t v32 = sub_FD8CFC((long long *)a1, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_32;
    }
    sub_FD9120(a1, v32);
    unint64_t v35 = v34;
    uint64_t v12 = v32 + 96;
    double result = sub_FD9120(v32 + 96, (uint64_t)a2);
    if (v37)
    {
      a4 = -v14;
      a2 = (_DWORD *)v32;
      if (v35) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if ((v35 & 1) == 0)
    {
LABEL_32:
      sub_FD7860(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = v32 + 96;
LABEL_33:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_FD7E7C((_OWORD *)a1, a2);
  }
  else
  {
    sub_FD810C((_OWORD *)a1, a2);
  }
  return result;
}

  unint64_t v11 = (__n128 *)(a2 - 24);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (uint64_t)a2 - v12;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 5);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v38 = 0x7FFFFFFF;
          if (*(a2 - 13) == -1 || *(a2 - 12) == 0x7FFFFFFF) {
            goto LABEL_44;
          }
          double v40 = *(a2 - 11);
          if (v40 == -1) {
            goto LABEL_45;
          }
          float64x2_t v41 = *(a2 - 10);
          if (v41 == 0x7FFFFFFF)
          {
LABEL_44:
            double v40 = -1;
LABEL_45:
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1)
            {
LABEL_75:
              if (v40 < v42 || v42 >= v40 && v38 < v43)
              {
                unint64_t v55 = *(__n128 *)a1;
                unint64_t v57 = *(_OWORD *)(a1 + 16);
                *(_OWORD *)float64_t v63 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
                double v59 = *(_OWORD *)(a1 + 32);
                int v61 = *(_OWORD *)(a1 + 48);
                float64x2_t v51 = *((_OWORD *)a2 - 3);
                double v50 = *((_OWORD *)a2 - 2);
                uint64_t v52 = *((_OWORD *)a2 - 4);
                *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 5);
                *(_OWORD *)(a1 + 48) = v51;
                *(_OWORD *)(a1 + 64) = v50;
                *(_OWORD *)(a1 + 32) = v52;
                double v53 = *((_OWORD *)a2 - 5);
                *(__n128 *)a1 = *v11;
                *(_OWORD *)(a1 + 16) = v53;
                *((_OWORD *)a2 - 4) = v59;
                *((_OWORD *)a2 - 3) = v61;
                *((_OWORD *)a2 - 2) = *(_OWORD *)v63;
                *(_OWORD *)(a2 - 5) = *(_OWORD *)&v63[12];
                double result = v55;
                *unint64_t v11 = v55;
                *((_OWORD *)a2 - 5) = v57;
              }
              return result;
            }
          }
          else
          {
            v40 += *(a2 - 13);
            double v38 = v41 + *(a2 - 12);
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1) {
              goto LABEL_75;
            }
          }
          if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
          {
            unint64_t v42 = *(_DWORD *)(a1 + 52);
            if (v42 != -1)
            {
              uint64_t v44 = *(_DWORD *)(a1 + 56);
              if (v44 == 0x7FFFFFFF)
              {
                unint64_t v42 = -1;
              }
              else
              {
                v42 += *(_DWORD *)(a1 + 44);
                BOOL v43 = v44 + *(_DWORD *)(a1 + 48);
              }
            }
          }
          goto LABEL_75;
        case 3uLL:
          sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)a2 - 6);
          return result;
        case 4uLL:
          result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 2303) {
      break;
    }
    if (v13 == 1)
    {
      if ((_DWORD *)a1 != a2)
      {
        uint64_t v45 = (v16 - 2) >> 1;
        unint64_t v46 = v45 + 1;
        unint64_t v47 = (long long *)(a1 + 96 * v45);
        do
        {
          sub_FD9EF8(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v15 >> 5), v47);
          v47 -= 6;
          --v46;
        }
        while (v46);
        double v48 = v15 / 0x60uLL;
        do
        {
          result.n128_u64[0] = sub_FDA350((__n128 *)a1, (uint64_t)a2, a3, v48).n128_u64[0];
          a2 -= 24;
        }
        while (v48-- > 2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (long long *)(a1 + 96 * (v16 >> 1));
    if ((unint64_t)v15 <= 0x3000)
    {
      sub_FD8340(v18, (long long *)a1, (long long *)a2 - 6);
      if (a5) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_FD8340((long long *)a1, v18, (long long *)a2 - 6);
      unint64_t v19 = 96 * v17;
      uint64_t v20 = (long long *)(96 * v17 + a1 - 96);
      sub_FD8340((long long *)(a1 + 96), v20, (long long *)a2 - 12);
      double v21 = (long long *)(a1 + 96 + v19);
      sub_FD8340((long long *)(a1 + 192), v21, (long long *)a2 - 18);
      sub_FD8340(v20, v18, v21);
      long long v54 = *(_OWORD *)a1;
      unint64_t v56 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)double v62 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
      float64x2_t v58 = *(_OWORD *)(a1 + 32);
      unint64_t v60 = *(_OWORD *)(a1 + 48);
      unint64_t v23 = v18[3];
      uint64_t v22 = v18[4];
      uint64_t v24 = v18[2];
      *(_OWORD *)(a1 + 76) = *(long long *)((char *)v18 + 76);
      *(_OWORD *)(a1 + 48) = v23;
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 32) = v24;
      char v25 = v18[1];
      *(_OWORD *)a1 = *v18;
      *(_OWORD *)(a1 + 16) = v25;
      *unint64_t v18 = v54;
      v18[1] = v56;
      *(long long *)((char *)v18 + 76) = *(_OWORD *)&v62[12];
      v18[3] = v60;
      char v18[4] = *(_OWORD *)v62;
      v18[2] = v58;
      if (a5) {
        goto LABEL_26;
      }
    }
    BOOL v26 = -1;
    unint64_t v27 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 - 52) == -1) {
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 - 48) == 0x7FFFFFFF) {
      goto LABEL_16;
    }
    BOOL v26 = *(_DWORD *)(a1 - 44);
    if (v26 == -1) {
      goto LABEL_16;
    }
    double v28 = *(_DWORD *)(a1 - 40);
    if (v28 == 0x7FFFFFFF)
    {
      BOOL v26 = -1;
LABEL_16:
      double v29 = -1;
      double v30 = 0x7FFFFFFF;
      if (*(_DWORD *)(a1 + 44) == -1) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
    v26 += *(_DWORD *)(a1 - 52);
    unint64_t v27 = v28 + *(_DWORD *)(a1 - 48);
    double v29 = -1;
    double v30 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 + 44) == -1) {
      goto LABEL_23;
    }
LABEL_17:
    if (*(_DWORD *)(a1 + 48) == 0x7FFFFFFF || (double v29 = *(_DWORD *)(a1 + 52), v29 == -1))
    {
LABEL_23:
      if (v26 < v29) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    unint64_t v31 = *(_DWORD *)(a1 + 56);
    if (v31 == 0x7FFFFFFF)
    {
      double v29 = -1;
      if (v26 != -1) {
        goto LABEL_26;
      }
    }
    else
    {
      v29 += *(_DWORD *)(a1 + 44);
      double v30 = v31 + *(_DWORD *)(a1 + 48);
      if (v26 < v29) {
        goto LABEL_26;
      }
    }
LABEL_24:
    if (v29 < v26 || v27 >= v30)
    {
      uint64_t v12 = sub_FD88B0((long long *)a1, a2);
      goto LABEL_33;
    }
LABEL_26:
    unint64_t v32 = sub_FD8CFC((long long *)a1, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_32;
    }
    sub_FDADD8(a1, v32);
    unint64_t v35 = v34;
    uint64_t v12 = v32 + 96;
    double result = sub_FDADD8(v32 + 96, (uint64_t)a2);
    if (v37)
    {
      a4 = -v14;
      a2 = (_DWORD *)v32;
      if (v35) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if ((v35 & 1) == 0)
    {
LABEL_32:
      sub_FDA7BC(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = v32 + 96;
LABEL_33:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_FD7E7C((_OWORD *)a1, a2);
  }
  else
  {
    sub_FD810C((_OWORD *)a1, a2);
  }
  return result;
}

  unint64_t v11 = (__n128 *)(a2 - 24);
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (uint64_t)a2 - v12;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 5);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v38 = 0x7FFFFFFF;
          if (*(a2 - 13) == -1 || *(a2 - 12) == 0x7FFFFFFF) {
            goto LABEL_44;
          }
          double v40 = *(a2 - 11);
          if (v40 == -1) {
            goto LABEL_45;
          }
          float64x2_t v41 = *(a2 - 10);
          if (v41 == 0x7FFFFFFF)
          {
LABEL_44:
            double v40 = -1;
LABEL_45:
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1)
            {
LABEL_75:
              if (v40 < v42 || v42 >= v40 && v38 < v43)
              {
                unint64_t v55 = *(__n128 *)a1;
                unint64_t v57 = *(_OWORD *)(a1 + 16);
                *(_OWORD *)float64_t v63 = *(_OWORD *)(a1 + 64);
                *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
                double v59 = *(_OWORD *)(a1 + 32);
                int v61 = *(_OWORD *)(a1 + 48);
                float64x2_t v51 = *((_OWORD *)a2 - 3);
                double v50 = *((_OWORD *)a2 - 2);
                uint64_t v52 = *((_OWORD *)a2 - 4);
                *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 5);
                *(_OWORD *)(a1 + 48) = v51;
                *(_OWORD *)(a1 + 64) = v50;
                *(_OWORD *)(a1 + 32) = v52;
                double v53 = *((_OWORD *)a2 - 5);
                *(__n128 *)a1 = *v11;
                *(_OWORD *)(a1 + 16) = v53;
                *((_OWORD *)a2 - 4) = v59;
                *((_OWORD *)a2 - 3) = v61;
                *((_OWORD *)a2 - 2) = *(_OWORD *)v63;
                *(_OWORD *)(a2 - 5) = *(_OWORD *)&v63[12];
                double result = v55;
                *unint64_t v11 = v55;
                *((_OWORD *)a2 - 5) = v57;
              }
              return result;
            }
          }
          else
          {
            v40 += *(a2 - 13);
            double v38 = v41 + *(a2 - 12);
            unint64_t v42 = -1;
            BOOL v43 = 0x7FFFFFFF;
            if (*(_DWORD *)(a1 + 44) == -1) {
              goto LABEL_75;
            }
          }
          if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
          {
            unint64_t v42 = *(_DWORD *)(a1 + 52);
            if (v42 != -1)
            {
              uint64_t v44 = *(_DWORD *)(a1 + 56);
              if (v44 == 0x7FFFFFFF)
              {
                unint64_t v42 = -1;
              }
              else
              {
                v42 += *(_DWORD *)(a1 + 44);
                BOOL v43 = v44 + *(_DWORD *)(a1 + 48);
              }
            }
          }
          goto LABEL_75;
        case 3uLL:
          sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)a2 - 6);
          return result;
        case 4uLL:
          result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, (uint64_t)(a2 - 24)).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 2303) {
      break;
    }
    if (v13 == 1)
    {
      if ((_DWORD *)a1 != a2)
      {
        uint64_t v45 = (v16 - 2) >> 1;
        unint64_t v46 = v45 + 1;
        unint64_t v47 = (long long *)(a1 + 96 * v45);
        do
        {
          sub_FD9EF8(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v15 >> 5), v47);
          v47 -= 6;
          --v46;
        }
        while (v46);
        double v48 = v15 / 0x60uLL;
        do
        {
          result.n128_u64[0] = sub_FDA350((__n128 *)a1, (uint64_t)a2, a3, v48).n128_u64[0];
          a2 -= 24;
        }
        while (v48-- > 2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (long long *)(a1 + 96 * (v16 >> 1));
    if ((unint64_t)v15 <= 0x3000)
    {
      sub_FD8340(v18, (long long *)a1, (long long *)a2 - 6);
      if (a5) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_FD8340((long long *)a1, v18, (long long *)a2 - 6);
      unint64_t v19 = 96 * v17;
      uint64_t v20 = (long long *)(96 * v17 + a1 - 96);
      sub_FD8340((long long *)(a1 + 96), v20, (long long *)a2 - 12);
      double v21 = (long long *)(a1 + 96 + v19);
      sub_FD8340((long long *)(a1 + 192), v21, (long long *)a2 - 18);
      sub_FD8340(v20, v18, v21);
      long long v54 = *(_OWORD *)a1;
      unint64_t v56 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)double v62 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
      float64x2_t v58 = *(_OWORD *)(a1 + 32);
      unint64_t v60 = *(_OWORD *)(a1 + 48);
      unint64_t v23 = v18[3];
      uint64_t v22 = v18[4];
      uint64_t v24 = v18[2];
      *(_OWORD *)(a1 + 76) = *(long long *)((char *)v18 + 76);
      *(_OWORD *)(a1 + 48) = v23;
      *(_OWORD *)(a1 + 64) = v22;
      *(_OWORD *)(a1 + 32) = v24;
      char v25 = v18[1];
      *(_OWORD *)a1 = *v18;
      *(_OWORD *)(a1 + 16) = v25;
      *unint64_t v18 = v54;
      v18[1] = v56;
      *(long long *)((char *)v18 + 76) = *(_OWORD *)&v62[12];
      v18[3] = v60;
      char v18[4] = *(_OWORD *)v62;
      v18[2] = v58;
      if (a5) {
        goto LABEL_26;
      }
    }
    BOOL v26 = -1;
    unint64_t v27 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 - 52) == -1) {
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 - 48) == 0x7FFFFFFF) {
      goto LABEL_16;
    }
    BOOL v26 = *(_DWORD *)(a1 - 44);
    if (v26 == -1) {
      goto LABEL_16;
    }
    double v28 = *(_DWORD *)(a1 - 40);
    if (v28 == 0x7FFFFFFF)
    {
      BOOL v26 = -1;
LABEL_16:
      double v29 = -1;
      double v30 = 0x7FFFFFFF;
      if (*(_DWORD *)(a1 + 44) == -1) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
    v26 += *(_DWORD *)(a1 - 52);
    unint64_t v27 = v28 + *(_DWORD *)(a1 - 48);
    double v29 = -1;
    double v30 = 0x7FFFFFFF;
    if (*(_DWORD *)(a1 + 44) == -1) {
      goto LABEL_23;
    }
LABEL_17:
    if (*(_DWORD *)(a1 + 48) == 0x7FFFFFFF || (double v29 = *(_DWORD *)(a1 + 52), v29 == -1))
    {
LABEL_23:
      if (v26 < v29) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
    unint64_t v31 = *(_DWORD *)(a1 + 56);
    if (v31 == 0x7FFFFFFF)
    {
      double v29 = -1;
      if (v26 != -1) {
        goto LABEL_26;
      }
    }
    else
    {
      v29 += *(_DWORD *)(a1 + 44);
      double v30 = v31 + *(_DWORD *)(a1 + 48);
      if (v26 < v29) {
        goto LABEL_26;
      }
    }
LABEL_24:
    if (v29 < v26 || v27 >= v30)
    {
      uint64_t v12 = sub_FD88B0((long long *)a1, a2);
      goto LABEL_33;
    }
LABEL_26:
    unint64_t v32 = sub_FD8CFC((long long *)a1, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_32;
    }
    sub_FDC220(a1, v32);
    unint64_t v35 = v34;
    uint64_t v12 = v32 + 96;
    double result = sub_FDC220(v32 + 96, (uint64_t)a2);
    if (v37)
    {
      a4 = -v14;
      a2 = (_DWORD *)v32;
      if (v35) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if ((v35 & 1) == 0)
    {
LABEL_32:
      sub_FDBC04(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = v32 + 96;
LABEL_33:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_FD7E7C((_OWORD *)a1, a2);
  }
  else
  {
    sub_FD810C((_OWORD *)a1, a2);
  }
  return result;
}

  unint64_t v11 = a2 - 56;
  uint64_t v12 = (int *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = a2 - (void)v12;
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(_DWORD *)(a2 - 40) <= *(_DWORD *)(a2 - 36)) {
            unint64_t v35 = *(_DWORD *)(a2 - 36);
          }
          else {
            unint64_t v35 = *(_DWORD *)(a2 - 40);
          }
          unint64_t v36 = sub_3F8970(*(char ***)(a2 - 48), v35);
          double v37 = a2 - 56;
          double v38 = *(_DWORD *)(a2 - 56) + v36;
          double v39 = sub_40A8CC((int *)(a2 - 36), SHIDWORD(v36));
          sub_52058(*(void *)(a2 - 48));
          if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(a1 + 20)) {
            double v40 = *(_DWORD *)(a1 + 20);
          }
          else {
            double v40 = *(_DWORD *)(a1 + 16);
          }
          float64x2_t v41 = sub_3F8970(*(char ***)(a1 + 8), v40);
          unint64_t v42 = *(_DWORD *)a1 + v41;
          BOOL v43 = sub_40A8CC((int *)(a1 + 20), SHIDWORD(v41));
          sub_52058(*(void *)(a1 + 8));
          if (v38 < v42 || (v38 == v42 ? (uint64_t v44 = v39 <= v43) : (uint64_t v44 = 1), !v44))
          {
            double v66 = *(void *)(a1 + 48);
            unint64_t v60 = *(_OWORD *)(a1 + 16);
            float64_t v63 = *(_OWORD *)(a1 + 32);
            unint64_t v57 = *(_OWORD *)a1;
            uint64_t v45 = *(_OWORD *)v37;
            unint64_t v46 = *(_OWORD *)(v37 + 16);
            unint64_t v47 = *(_OWORD *)(v37 + 32);
            *(void *)(a1 + 48) = *(void *)(v37 + 48);
            *(_OWORD *)(a1 + 16) = v46;
            *(_OWORD *)(a1 + 32) = v47;
            *(_OWORD *)a1 = v45;
            *(_OWORD *)double v37 = v57;
            *(_OWORD *)(v37 + 16) = v60;
            *(_OWORD *)(v37 + 32) = v63;
            *(void *)(v37 + 48) = v66;
          }
          break;
        case 3uLL:
          sub_FEDE58((long long *)a1, (long long *)(a1 + 56), (long long *)(a2 - 56));
          break;
        case 4uLL:
          sub_FEEE68(a1, a1 + 56, a1 + 112, (long long *)(a2 - 56));
          break;
        case 5uLL:
          sub_FEF0E4(a1, a1 + 56, a1 + 112, a1 + 168, (long long *)(a2 - 56));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1343)
    {
      if (a5)
      {
        sub_FEDA38(a1, a2);
      }
      else
      {
        sub_FEDC74(a1, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = a1 + 56 * (v16 >> 1);
    if ((unint64_t)v15 < 0x1C01)
    {
      sub_FEDE58((long long *)v18, (long long *)a1, (long long *)(a2 - 56));
      if (a5) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_FEDE58((long long *)a1, (long long *)v18, (long long *)(a2 - 56));
      unint64_t v19 = 56 * v17;
      uint64_t v20 = (long long *)(56 * v17 + a1 - 56);
      sub_FEDE58((long long *)(a1 + 56), v20, (long long *)(a2 - 112));
      sub_FEDE58((long long *)(a1 + 112), (long long *)(a1 + 56 + v19), (long long *)(a2 - 168));
      sub_FEDE58(v20, (long long *)v18, (long long *)(a1 + 56 + v19));
      unint64_t v65 = *(void *)(a1 + 48);
      double v59 = *(_OWORD *)(a1 + 16);
      double v62 = *(_OWORD *)(a1 + 32);
      unint64_t v56 = *(_OWORD *)a1;
      double v21 = *(_OWORD *)v18;
      uint64_t v22 = *(_OWORD *)(v18 + 16);
      unint64_t v23 = *(_OWORD *)(v18 + 32);
      *(void *)(a1 + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(a1 + 16) = v22;
      *(_OWORD *)(a1 + 32) = v23;
      *(_OWORD *)a1 = v21;
      *(void *)(v18 + 48) = v65;
      *(_OWORD *)(v18 + 16) = v59;
      *(_OWORD *)(v18 + 32) = v62;
      *(_OWORD *)unint64_t v18 = v56;
      if (a5) {
        goto LABEL_20;
      }
    }
    if (*(_DWORD *)(a1 - 40) <= *(_DWORD *)(a1 - 36)) {
      uint64_t v24 = *(_DWORD *)(a1 - 36);
    }
    else {
      uint64_t v24 = *(_DWORD *)(a1 - 40);
    }
    char v25 = sub_3F8970(*(char ***)(a1 - 48), v24);
    BOOL v26 = *(_DWORD *)(a1 - 56) + v25;
    unint64_t v27 = sub_40A8CC((int *)(a1 - 36), SHIDWORD(v25));
    sub_52058(*(void *)(a1 - 48));
    if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(a1 + 20)) {
      double v28 = *(_DWORD *)(a1 + 20);
    }
    else {
      double v28 = *(_DWORD *)(a1 + 16);
    }
    double v29 = sub_3F8970(*(char ***)(a1 + 8), v28);
    double v30 = *(_DWORD *)a1 + v29;
    unint64_t v31 = sub_40A8CC((int *)(a1 + 20), SHIDWORD(v29));
    sub_52058(*(void *)(a1 + 8));
    if (v26 >= v30 && (v26 != v30 || v27 <= v31))
    {
      uint64_t v12 = sub_FEE23C((int *)a1, a2);
      goto LABEL_24;
    }
LABEL_20:
    unint64_t v32 = sub_FEE674((int *)a1, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_23;
    }
    double v34 = sub_FEEA74(a1, (uint64_t)v32);
    uint64_t v12 = v32 + 14;
    if (sub_FEEA74((uint64_t)(v32 + 14), a2))
    {
      a4 = -v14;
      a2 = (unint64_t)v32;
      if (v34) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v34)
    {
LABEL_23:
      sub_FED40C(a1, v32, a3, -v14, a5 & 1);
      uint64_t v12 = v32 + 14;
LABEL_24:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a1 != a2)
  {
    double v48 = (v16 - 2) >> 1;
    double v49 = v48 + 1;
    double v50 = (int *)(a1 + 56 * v48);
    do
    {
      sub_FEF418(a1, a3, 0x6DB6DB6DB6DB6DB7 * (v15 >> 3), v50);
      v50 -= 14;
      --v49;
    }
    while (v49);
    float64x2_t v51 = v15 / 0x38uLL;
    do
    {
      while (1)
      {
        double v67 = *(void *)(a1 + 48);
        int v61 = *(_OWORD *)(a1 + 16);
        unint64_t v64 = *(_OWORD *)(a1 + 32);
        float64x2_t v58 = *(_OWORD *)a1;
        unint64_t v55 = sub_FEF798((int *)a1, a3, v51);
        if ((int *)v11 == v55) {
          break;
        }
        uint64_t v52 = *(_OWORD *)v11;
        double v53 = *(_OWORD *)(v11 + 16);
        long long v54 = *(_OWORD *)(v11 + 32);
        *((void *)v55 + 6) = *(void *)(v11 + 48);
        *((_OWORD *)v55 + 1) = v53;
        *((_OWORD *)v55 + 2) = v54;
        *(_OWORD *)unint64_t v55 = v52;
        *(void *)(v11 + 48) = v67;
        *(_OWORD *)(v11 + 16) = v61;
        *(_OWORD *)(v11 + 32) = v64;
        *(_OWORD *)unint64_t v11 = v58;
        v11 -= 56;
        sub_FEF8F0(a1, (uint64_t)(v55 + 14), a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v55 - a1 + 56) >> 3));
        uint64_t v44 = v51-- <= 2;
        if (v44) {
          return;
        }
      }
      *(_OWORD *)unint64_t v55 = v58;
      *((_OWORD *)v55 + 1) = v61;
      *((_OWORD *)v55 + 2) = v64;
      *((void *)v55 + 6) = v67;
      v11 -= 56;
      uint64_t v44 = v51-- <= 2;
    }
    while (!v44);
  }
}

  unint64_t v222 = a2 - 208;
  uint64_t v224 = a2 - 104;
  char v220 = a2 - 312;
  unint64_t v9 = a1;
  uint64_t v249 = a2;
  while (1)
  {
    a1 = v9;
    uint64_t v10 = a2 - v9;
    unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v9) >> 3);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return *(double *)&v60;
        case 2:
          if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 96)) {
            return *(double *)&v60;
          }
          goto LABEL_134;
        case 3:
          float64x2_t v81 = a1 + 104;
          double v82 = *(_DWORD *)(a1 + 200);
          double v83 = *(_DWORD *)(a2 - 8);
          if (v82 <= *(_DWORD *)(a1 + 96))
          {
            if (v83 <= v82) {
              return *(double *)&v60;
            }
            double v86 = (long long *)(a1 + 104);
            double v87 = v224;
LABEL_319:
            *(void *)&unint64_t v60 = sub_FFFD10(v86, v87).n128_u64[0];
            if (*(_DWORD *)(a1 + 200) <= *(_DWORD *)(a1 + 96)) {
              return *(double *)&v60;
            }
            double v84 = (long long *)a1;
            BOOL v85 = v81;
          }
          else
          {
            if (v83 <= v82)
            {
              *(void *)&unint64_t v60 = sub_FFFD10((long long *)a1, a1 + 104).n128_u64[0];
              if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 200)) {
                return *(double *)&v60;
              }
              double v84 = (long long *)(a1 + 104);
            }
            else
            {
LABEL_134:
              double v84 = (long long *)a1;
            }
            BOOL v85 = v224;
          }
          *(void *)&unint64_t v60 = sub_FFFD10(v84, v85).n128_u64[0];
          return *(double *)&v60;
        case 4:
          *(double *)&unint64_t v60 = sub_FFFEA0(a1, a1 + 104, a1 + 208, v224);
          return *(double *)&v60;
        case 5:
          float64x2_t v81 = a1 + 104;
          *(double *)&unint64_t v60 = sub_FFFEA0(a1, a1 + 104, a1 + 208, a1 + 312);
          if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 408)) {
            return *(double *)&v60;
          }
          *(void *)&unint64_t v60 = sub_FFFD10((long long *)(a1 + 312), v224).n128_u64[0];
          if (*(_DWORD *)(a1 + 408) <= *(_DWORD *)(a1 + 304)) {
            return *(double *)&v60;
          }
          *(void *)&unint64_t v60 = sub_FFFD10((long long *)(a1 + 208), a1 + 312).n128_u64[0];
          if (*(_DWORD *)(a1 + 304) <= *(_DWORD *)(a1 + 200)) {
            return *(double *)&v60;
          }
          double v86 = (long long *)(a1 + 104);
          double v87 = a1 + 208;
          goto LABEL_319;
        default:
          JUMPOUT(0);
      }
    }
    if (v10 <= 2495) {
      break;
    }
    if (!a3)
    {
      if (a1 != a2)
      {
        unsigned int v116 = (unint64_t)(v11 - 2) >> 1;
        int v117 = v116;
        do
        {
          unsigned int v118 = v117;
          if (v116 >= v117)
          {
            unsigned int v119 = (2 * v117) | 1;
            unsigned int v120 = a1 + 104 * v119;
            if (2 * v118 + 2 < v11)
            {
              int v121 = *(_DWORD *)(v120 + 96);
              uint64_t v122 = *(_DWORD *)(v120 + 200);
              v120 += 104 * (v121 > v122);
              if (v121 > v122) {
                unsigned int v119 = 2 * v118 + 2;
              }
            }
            long double v123 = a1 + 104 * v118;
            uint64_t v124 = *(_DWORD *)(v123 + 96);
            if (*(_DWORD *)(v120 + 96) <= v124)
            {
              uint64_t v231 = *(_OWORD *)v123;
              uint64_t v227 = *(void *)(v123 + 16);
              *(void *)long double v123 = 0;
              *(void *)(v123 + 8) = 0;
              uint64_t v243 = *(_OWORD *)(v123 + 24);
              *(void *)(v123 + 16) = 0;
              *(void *)(v123 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              uint64_t v237 = *(void *)(v123 + 40);
              *(void *)(v123 + 32) = 0;
              *(void *)(v123 + 40) = 0;
              *(_OWORD *)&v254[13] = *(_OWORD *)(v123 + 61);
              *(_OWORD *)uint64_t v254 = *(_OWORD *)(v123 + 48);
              *(_OWORD *)&v258[3] = *(_OWORD *)(v123 + 80);
              do
              {
                uint64x2_t v125 = v120;
                sub_40D678((char **)v123, v120);
                *(_OWORD *)(v123 + 80) = *(_OWORD *)(v125 + 80);
                *(_DWORD *)(v123 + 96) = *(_DWORD *)(v125 + 96);
                if (v116 < v119) {
                  break;
                }
                uint64_t v126 = (2 * v119) | 1;
                unsigned int v120 = a1 + 104 * v126;
                if (2 * v119 + 2 < v11)
                {
                  long double v127 = *(_DWORD *)(v120 + 96);
                  unsigned int v128 = *(_DWORD *)(v120 + 200);
                  v120 += 104 * (v127 > v128);
                  if (v127 > v128) {
                    uint64_t v126 = 2 * v119 + 2;
                  }
                }
                long double v123 = v125;
                unsigned int v119 = v126;
              }
              while (*(_DWORD *)(v120 + 96) <= v124);
              unsigned int v129 = *(char **)v125;
              if (*(void *)v125)
              {
                int v130 = *(char **)(v125 + 8);
                int v131 = *(char **)v125;
                if (v130 != v129)
                {
                  do
                  {
                    int v132 = (void *)*((void *)v130 - 3);
                    if (v132)
                    {
                      *((void *)v130 - 2) = v132;
                      operator delete(v132);
                    }
                    v130 -= 48;
                  }
                  while (v130 != v129);
                  int v131 = *(char **)v125;
                }
                *(void *)(v125 + 8) = v129;
                operator delete(v131);
              }
              *(_OWORD *)uint64x2_t v125 = v231;
              *(void *)(v125 + 16) = v227;
              uint64_t v133 = *(void *)(v125 + 24);
              if (v133)
              {
                long double v134 = *(void *)(v125 + 32);
                double v135 = *(void **)(v125 + 24);
                if (v134 != v133)
                {
                  do
                  {
                    if (*(char *)(v134 - 1) < 0) {
                      operator delete(*(void **)(v134 - 24));
                    }
                    v134 -= 48;
                  }
                  while (v134 != v133);
                  double v135 = *(void **)(v125 + 24);
                }
                *(void *)(v125 + 32) = v133;
                operator delete(v135);
              }
              *(_OWORD *)(v125 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v243;
              *(void *)(v125 + 40) = v237;
              *(_OWORD *)(v125 + 48) = *(_OWORD *)v254;
              *(_OWORD *)(v125 + 61) = *(_OWORD *)&v254[13];
              *(_OWORD *)(v125 + 80) = *(_OWORD *)&v258[3];
              *(_DWORD *)(v125 + 96) = v124;
            }
          }
          int v117 = v118 - 1;
        }
        while (v118);
        long double v136 = v10 / 0x68uLL;
        unsigned int v137 = v249;
        do
        {
          int v140 = 0;
          uint64_t v141 = v137;
          int v223 = *(void *)(a1 + 8);
          uint64_t v225 = *(void *)a1;
          long long v221 = *(void *)(a1 + 16);
          uint64_t v244 = *(void *)(a1 + 24);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          int v232 = *(void *)(a1 + 32);
          uint64_t v238 = *(void *)(a1 + 40);
          *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *(_OWORD *)uint64_t v258 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v258[13] = *(_OWORD *)(a1 + 61);
          uint64_t v257 = *(_OWORD *)(a1 + 80);
          uint64_t v142 = a1;
          uint64_t v228 = *(_DWORD *)(a1 + 96);
          do
          {
            long double v146 = v142 + 104 * v140 + 104;
            uint64_t v147 = 2 * v140;
            int v140 = (2 * v140) | 1;
            BOOL v148 = v147 + 2;
            if (v147 + 2 < v136)
            {
              double v149 = *(_DWORD *)(v146 + 96);
              double v150 = *(_DWORD *)(v146 + 200);
              v146 += 104 * (v149 > v150);
              if (v149 > v150) {
                int v140 = v148;
              }
            }
            BOOL v151 = *(char **)v142;
            if (*(void *)v142)
            {
              int v152 = *(char **)(v142 + 8);
              uint64_t v153 = *(char **)v142;
              if (v152 != v151)
              {
                do
                {
                  unint64_t v154 = (void *)*((void *)v152 - 3);
                  if (v154)
                  {
                    *((void *)v152 - 2) = v154;
                    operator delete(v154);
                  }
                  v152 -= 48;
                }
                while (v152 != v151);
                uint64_t v153 = *(char **)v142;
              }
              *(void *)(v142 + 8) = v151;
              operator delete(v153);
              *(void *)uint64_t v142 = 0;
              *(void *)(v142 + 8) = 0;
              *(void *)(v142 + 16) = 0;
            }
            *(_OWORD *)uint64_t v142 = *(_OWORD *)v146;
            *(void *)(v142 + 16) = *(void *)(v146 + 16);
            *(void *)long double v146 = 0;
            *(void *)(v146 + 8) = 0;
            *(void *)(v146 + 16) = 0;
            unint64_t v155 = (void **)(v142 + 24);
            double v156 = *(void *)(v142 + 24);
            if (v156)
            {
              uint64_t v157 = *(void *)(v142 + 32);
              int v143 = *(void **)(v142 + 24);
              if (v157 != v156)
              {
                do
                {
                  if (*(char *)(v157 - 1) < 0) {
                    operator delete(*(void **)(v157 - 24));
                  }
                  v157 -= 48;
                }
                while (v157 != v156);
                int v143 = *v155;
              }
              *(void *)(v142 + 32) = v156;
              operator delete(v143);
              *unint64_t v155 = 0;
              *(void *)(v142 + 32) = 0;
              *(void *)(v142 + 40) = 0;
            }
            unsigned int v144 = (void **)(v146 + 24);
            *(_OWORD *)(v142 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v146 + 24);
            *(void *)(v142 + 40) = *(void *)(v146 + 40);
            *(void *)(v146 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(void *)(v146 + 32) = 0;
            *(void *)(v146 + 40) = 0;
            unsigned int v145 = *(_OWORD *)(v146 + 48);
            *(_OWORD *)(v142 + 61) = *(_OWORD *)(v146 + 61);
            *(_OWORD *)(v142 + 48) = v145;
            *(_OWORD *)(v142 + 80) = *(_OWORD *)(v146 + 80);
            *(_DWORD *)(v142 + 96) = *(_DWORD *)(v146 + 96);
            uint64_t v142 = v146;
          }
          while (v140 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
          double v158 = (_OWORD *)(v146 + 48);
          double v159 = (long long *)(v146 + 80);
          v137 -= 104;
          if (v146 == v141 - 104)
          {
            unint64_t v164 = *(void *)v146;
            if (*(void *)v146)
            {
              unint64_t v165 = v137;
              uint64_t v166 = *(void *)(v146 + 8);
              uint64_t v167 = *(void **)v146;
              if (v166 != v164)
              {
                do
                {
                  uint64_t v168 = *(void **)(v166 - 24);
                  if (v168)
                  {
                    *(void *)(v166 - 16) = v168;
                    operator delete(v168);
                  }
                  v166 -= 48;
                }
                while (v166 != v164);
                uint64_t v167 = *(void **)v146;
              }
              *(void *)(v146 + 8) = v164;
              operator delete(v167);
              unsigned int v137 = v165;
            }
            *(void *)long double v146 = v225;
            *(void *)(v146 + 8) = v223;
            *(void *)(v146 + 16) = v221;
            double v190 = *(void *)(v146 + 24);
            if (v190)
            {
              uint64_t v191 = *(void *)(v146 + 32);
              unsigned int v138 = *(void **)(v146 + 24);
              if (v191 != v190)
              {
                do
                {
                  if (*(char *)(v191 - 1) < 0) {
                    operator delete(*(void **)(v191 - 24));
                  }
                  v191 -= 48;
                }
                while (v191 != v190);
                unsigned int v138 = *v144;
              }
              *(void *)(v146 + 32) = v190;
              operator delete(v138);
            }
            *(void *)(v146 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v244;
            *(void *)(v146 + 32) = v232;
            *(void *)(v146 + 40) = v238;
            unint64_t v60 = *(_OWORD *)&v258[13];
            *double v158 = *(_OWORD *)v258;
            *(_OWORD *)(v146 + 61) = v60;
            *(void *)&unint64_t v60 = v257;
            *double v159 = v257;
            *(_DWORD *)(v146 + 96) = v228;
          }
          else
          {
            uint64_t v250 = (void **)(v141 - 104);
            sub_40D678((char **)v146, v141 - 104);
            *double v159 = *(_OWORD *)(v141 - 24);
            *(_DWORD *)(v146 + 96) = *(_DWORD *)(v141 - 8);
            uint64_t v160 = *(void *)(v141 - 104);
            if (v160)
            {
              int v161 = *(void *)(v141 - 96);
              uint64_t v162 = *(void **)(v141 - 104);
              if (v161 != v160)
              {
                do
                {
                  uint64_t v163 = *(void **)(v161 - 24);
                  if (v163)
                  {
                    *(void *)(v161 - 16) = v163;
                    operator delete(v163);
                  }
                  v161 -= 48;
                }
                while (v161 != v160);
                uint64_t v162 = *v250;
              }
              *(void *)(v141 - 96) = v160;
              operator delete(v162);
            }
            *(void *)(v141 - 104) = v225;
            *(void *)(v141 - 96) = v223;
            *(void *)(v141 - 88) = v221;
            uint64_t v169 = *(void *)(v141 - 80);
            if (v169)
            {
              int v170 = *(void *)(v141 - 72);
              uint64_t v171 = *(void **)(v141 - 80);
              if (v170 != v169)
              {
                do
                {
                  if (*(char *)(v170 - 1) < 0) {
                    operator delete(*(void **)(v170 - 24));
                  }
                  v170 -= 48;
                }
                while (v170 != v169);
                uint64_t v171 = *(void **)(v141 - 80);
              }
              *(void *)(v141 - 72) = v169;
              operator delete(v171);
            }
            *(void *)(v141 - 80) = v244;
            *(void *)(v141 - 72) = v232;
            *(void *)(v141 - 64) = v238;
            unint64_t v60 = *(_OWORD *)&v258[13];
            *(_OWORD *)(v141 - 56) = *(_OWORD *)v258;
            *(_OWORD *)(v141 - 43) = v60;
            *(void *)&unint64_t v60 = v257;
            *(_OWORD *)(v141 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v257;
            *(_DWORD *)(v141 - 8) = v228;
            uint64_t v172 = v146 + 104 - a1;
            unsigned int v137 = v141 - 104;
            if (v172 >= 105)
            {
              uint64_t v173 = (v172 / 0x68uLL - 2) >> 1;
              uint64_t v174 = a1 + 104 * v173;
              uint64_t v175 = *(_DWORD *)(v146 + 96);
              if (*(_DWORD *)(v174 + 96) > v175)
              {
                int v233 = *(_OWORD *)v146;
                unsigned int v229 = *(void *)(v146 + 16);
                *(void *)(v146 + 8) = 0;
                *(void *)(v146 + 16) = 0;
                *(void *)long double v146 = 0;
                uint64_t v245 = *(_OWORD *)(v146 + 24);
                uint64_t v239 = *(void *)(v146 + 40);
                *(void *)(v146 + 32) = 0;
                *(void *)(v146 + 40) = 0;
                *unsigned int v144 = 0;
                *(_OWORD *)&v255[13] = *(_OWORD *)(v146 + 61);
                *(_OWORD *)uint64_t v255 = *v158;
                uint64_t v259 = *v159;
                do
                {
                  unint64_t v176 = v174;
                  unint64_t v177 = *(char **)v146;
                  if (*(void *)v146)
                  {
                    uint64_t v178 = *(char **)(v146 + 8);
                    uint64_t v179 = *(char **)v146;
                    if (v178 != v177)
                    {
                      do
                      {
                        uint64_t v180 = (void *)*((void *)v178 - 3);
                        if (v180)
                        {
                          *((void *)v178 - 2) = v180;
                          operator delete(v180);
                        }
                        v178 -= 48;
                      }
                      while (v178 != v177);
                      uint64_t v179 = *(char **)v146;
                    }
                    *(void *)(v146 + 8) = v177;
                    operator delete(v179);
                    *(void *)long double v146 = 0;
                    *(void *)(v146 + 8) = 0;
                    *(void *)(v146 + 16) = 0;
                  }
                  *(_OWORD *)long double v146 = *(_OWORD *)v176;
                  *(void *)(v146 + 16) = *(void *)(v176 + 16);
                  *(void *)unint64_t v176 = 0;
                  *(void *)(v176 + 8) = 0;
                  *(void *)(v176 + 16) = 0;
                  uint64_t v181 = (void **)(v146 + 24);
                  uint64_t v182 = *(void *)(v146 + 24);
                  if (v182)
                  {
                    unint64_t v183 = *(void *)(v146 + 32);
                    uint64_t v184 = *(void **)(v146 + 24);
                    if (v183 != v182)
                    {
                      do
                      {
                        if (*(char *)(v183 - 1) < 0) {
                          operator delete(*(void **)(v183 - 24));
                        }
                        v183 -= 48;
                      }
                      while (v183 != v182);
                      uint64_t v184 = *v181;
                    }
                    *(void *)(v146 + 32) = v182;
                    operator delete(v184);
                    *uint64_t v181 = 0;
                    *(void *)(v146 + 32) = 0;
                    *(void *)(v146 + 40) = 0;
                  }
                  *(_OWORD *)(v146 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v176 + 24);
                  *(void *)(v146 + 40) = *(void *)(v176 + 40);
                  *(void *)(v176 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                  *(void *)(v176 + 32) = 0;
                  *(void *)(v176 + 40) = 0;
                  uint64_t v185 = *(_OWORD *)(v176 + 48);
                  *(_OWORD *)(v146 + 61) = *(_OWORD *)(v176 + 61);
                  *(_OWORD *)(v146 + 48) = v185;
                  *(_OWORD *)(v146 + 80) = *(_OWORD *)(v176 + 80);
                  *(_DWORD *)(v146 + 96) = *(_DWORD *)(v176 + 96);
                  if (!v173) {
                    break;
                  }
                  uint64_t v173 = (v173 - 1) >> 1;
                  uint64_t v174 = a1 + 104 * v173;
                  long double v146 = v176;
                }
                while (*(_DWORD *)(v174 + 96) > v175);
                uint64_t v186 = *(void *)v176;
                if (*(void *)v176)
                {
                  uint64_t v187 = *(void *)(v176 + 8);
                  uint64_t v188 = *(void **)v176;
                  if (v187 != v186)
                  {
                    do
                    {
                      uint64_t v189 = *(void **)(v187 - 24);
                      if (v189)
                      {
                        *(void *)(v187 - 16) = v189;
                        operator delete(v189);
                      }
                      v187 -= 48;
                    }
                    while (v187 != v186);
                    uint64_t v188 = *(void **)v176;
                  }
                  *(void *)(v176 + 8) = v186;
                  operator delete(v188);
                }
                *(_OWORD *)unint64_t v176 = v233;
                *(void *)(v176 + 16) = v229;
                uint64_t v192 = *(void *)(v176 + 24);
                if (v192)
                {
                  uint64_t v193 = *(void *)(v176 + 32);
                  uint64_t v194 = *(void **)(v176 + 24);
                  if (v193 != v192)
                  {
                    do
                    {
                      if (*(char *)(v193 - 1) < 0) {
                        operator delete(*(void **)(v193 - 24));
                      }
                      v193 -= 48;
                    }
                    while (v193 != v192);
                    uint64_t v194 = *(void **)(v176 + 24);
                  }
                  *(void *)(v176 + 32) = v192;
                  operator delete(v194);
                }
                *(_OWORD *)(v176 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v245;
                *(void *)(v176 + 40) = v239;
                *(_OWORD *)(v176 + 48) = *(_OWORD *)v255;
                *(_OWORD *)(v176 + 61) = *(_OWORD *)&v255[13];
                *(void *)&unint64_t v60 = v259;
                *(_OWORD *)(v176 + 80) = v259;
                *(_DWORD *)(v176 + 96) = v175;
                unsigned int v137 = (uint64_t)v250;
              }
            }
          }
        }
        while (v136-- > 2);
      }
      return *(double *)&v60;
    }
    uint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = a1 + 104 * ((unint64_t)v11 >> 1);
    uint64_t v14 = *(_DWORD *)(a2 - 8);
    if ((unint64_t)v10 >= 0x3401)
    {
      unint64_t v15 = *(_DWORD *)(v13 + 96);
      if (v15 <= *(_DWORD *)(a1 + 96))
      {
        if (v14 > v15)
        {
          sub_FFFD10((long long *)v13, v224);
          if (*(_DWORD *)(v13 + 96) > *(_DWORD *)(a1 + 96))
          {
            uint64_t v16 = (long long *)a1;
            unint64_t v17 = v13;
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v16 = (long long *)a1;
        if (v14 > v15) {
          goto LABEL_11;
        }
        sub_FFFD10((long long *)a1, v13);
        if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(v13 + 96))
        {
          uint64_t v16 = (long long *)v13;
LABEL_11:
          unint64_t v17 = v224;
LABEL_20:
          sub_FFFD10(v16, v17);
        }
      }
      double v21 = a1 + 104 * v12;
      uint64_t v22 = v21 - 104;
      unint64_t v23 = *(_DWORD *)(v21 - 8);
      uint64_t v24 = *(_DWORD *)(a2 - 112);
      if (v23 <= *(_DWORD *)(a1 + 200))
      {
        if (v24 > v23)
        {
          sub_FFFD10((long long *)v22, v222);
          if (*(_DWORD *)(v22 + 96) > *(_DWORD *)(a1 + 200))
          {
            char v25 = (long long *)(a1 + 104);
            BOOL v26 = v22;
            goto LABEL_32;
          }
        }
      }
      else
      {
        char v25 = (long long *)(a1 + 104);
        if (v24 > v23) {
          goto LABEL_25;
        }
        sub_FFFD10(v25, v22);
        if (*(_DWORD *)(a2 - 112) > *(_DWORD *)(v22 + 96))
        {
          char v25 = (long long *)v22;
LABEL_25:
          BOOL v26 = v222;
LABEL_32:
          sub_FFFD10(v25, v26);
        }
      }
      unint64_t v27 = a1 + 104 * v12;
      double v28 = v27 + 104;
      double v29 = *(_DWORD *)(v27 + 200);
      double v30 = *(_DWORD *)(a2 - 216);
      if (v29 <= *(_DWORD *)(a1 + 304))
      {
        if (v30 > v29)
        {
          sub_FFFD10((long long *)v28, v220);
          if (*(_DWORD *)(v28 + 96) > *(_DWORD *)(a1 + 304))
          {
            unint64_t v31 = (long long *)(a1 + 208);
            unint64_t v32 = v28;
            goto LABEL_41;
          }
        }
      }
      else
      {
        unint64_t v31 = (long long *)(a1 + 208);
        if (v30 > v29) {
          goto LABEL_37;
        }
        sub_FFFD10(v31, v28);
        if (*(_DWORD *)(a2 - 216) > *(_DWORD *)(v28 + 96))
        {
          unint64_t v31 = (long long *)v28;
LABEL_37:
          unint64_t v32 = v220;
LABEL_41:
          sub_FFFD10(v31, v32);
        }
      }
      double v33 = *(_DWORD *)(v13 + 96);
      double v34 = *(_DWORD *)(v28 + 96);
      if (v33 <= *(_DWORD *)(v22 + 96))
      {
        if (v34 > v33)
        {
          sub_FFFD10((long long *)v13, v28);
          if (*(_DWORD *)(v13 + 96) > *(_DWORD *)(v22 + 96))
          {
            unint64_t v35 = (long long *)v22;
            unint64_t v36 = v13;
            goto LABEL_50;
          }
        }
      }
      else
      {
        unint64_t v35 = (long long *)v22;
        if (v34 > v33) {
          goto LABEL_46;
        }
        sub_FFFD10((long long *)v22, v13);
        if (*(_DWORD *)(v28 + 96) > *(_DWORD *)(v13 + 96))
        {
          unint64_t v35 = (long long *)v13;
LABEL_46:
          unint64_t v36 = v28;
LABEL_50:
          sub_FFFD10(v35, v36);
        }
      }
      unint64_t v19 = (long long *)a1;
      uint64_t v20 = v13;
      goto LABEL_52;
    }
    unint64_t v18 = *(_DWORD *)(a1 + 96);
    if (v18 <= *(_DWORD *)(v13 + 96))
    {
      if (v14 <= v18) {
        goto LABEL_53;
      }
      sub_FFFD10((long long *)a1, v224);
      if (*(_DWORD *)(a1 + 96) <= *(_DWORD *)(v13 + 96)) {
        goto LABEL_53;
      }
      unint64_t v19 = (long long *)v13;
      uint64_t v20 = a1;
      goto LABEL_52;
    }
    unint64_t v19 = (long long *)v13;
    if (v14 > v18) {
      goto LABEL_16;
    }
    sub_FFFD10((long long *)v13, a1);
    if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 96))
    {
      unint64_t v19 = (long long *)a1;
LABEL_16:
      uint64_t v20 = v224;
LABEL_52:
      sub_FFFD10(v19, v20);
    }
LABEL_53:
    --a3;
    if (a4)
    {
      double v37 = *(_DWORD *)(a1 + 96);
LABEL_56:
      uint64_t v240 = a3;
      double v38 = 0;
      double v39 = *(void *)(a1 + 16);
      uint64_t v230 = *(_OWORD *)a1;
      int v234 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      double v40 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(_OWORD *)uint64_t v251 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v251[13] = *(_OWORD *)(a1 + 61);
      *(_OWORD *)&v258[3] = *(_OWORD *)(a1 + 80);
      do
      {
        float64x2_t v41 = *(_DWORD *)(a1 + v38 + 200);
        v38 += 104;
      }
      while (v41 > v37);
      unint64_t v42 = a1 + v38;
      BOOL v43 = v249;
      if (v38 == 104)
      {
        unint64_t v46 = v249;
        while (v42 < v46)
        {
          uint64_t v44 = v46 - 104;
          unint64_t v47 = *(_DWORD *)(v46 - 8);
          v46 -= 104;
          if (v47 > v37) {
            goto LABEL_64;
          }
        }
        uint64_t v44 = v46;
        unint64_t v9 = v42;
      }
      else
      {
        do
        {
          uint64_t v44 = v43 - 104;
          uint64_t v45 = *(_DWORD *)(v43 - 8);
          v43 -= 104;
        }
        while (v45 <= v37);
LABEL_64:
        unint64_t v9 = v42;
        if (v42 < v44)
        {
          double v48 = v44;
          do
          {
            sub_FFFD10((long long *)v9, v48);
            do
            {
              double v49 = *(_DWORD *)(v9 + 200);
              v9 += 104;
            }
            while (v49 > v37);
            do
            {
              double v50 = *(_DWORD *)(v48 - 8);
              v48 -= 104;
            }
            while (v50 <= v37);
          }
          while (v9 < v48);
        }
      }
      float64x2_t v51 = (void **)(v9 - 104);
      if (v9 - 104 != a1)
      {
        sub_40D678((char **)a1, v9 - 104);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v9 - 24);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(v9 - 8);
      }
      uint64_t v52 = (char *)*v51;
      if (*v51)
      {
        double v53 = *(char **)(v9 - 96);
        long long v54 = *v51;
        if (v53 != v52)
        {
          do
          {
            unint64_t v55 = (void *)*((void *)v53 - 3);
            if (v55)
            {
              *((void *)v53 - 2) = v55;
              operator delete(v55);
            }
            v53 -= 48;
          }
          while (v53 != v52);
          long long v54 = *v51;
        }
        *(void *)(v9 - 96) = v52;
        operator delete(v54);
      }
      *(_OWORD *)(v9 - 104) = v230;
      *(void *)(v9 - 88) = v39;
      unint64_t v56 = *(void *)(v9 - 80);
      a2 = v249;
      if (v56)
      {
        unint64_t v57 = *(void *)(v9 - 72);
        float64x2_t v58 = *(void **)(v9 - 80);
        if (v57 != v56)
        {
          do
          {
            if (*(char *)(v57 - 1) < 0) {
              operator delete(*(void **)(v57 - 24));
            }
            v57 -= 48;
          }
          while (v57 != v56);
          float64x2_t v58 = *(void **)(v9 - 80);
        }
        *(void *)(v9 - 72) = v56;
        operator delete(v58);
      }
      *(_OWORD *)(v9 - 80) = v234;
      *(void *)(v9 - 64) = v40;
      *(_OWORD *)(v9 - 56) = *(_OWORD *)v251;
      *(_OWORD *)(v9 - 43) = *(_OWORD *)&v251[13];
      *(_OWORD *)(v9 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v258[3];
      *(_DWORD *)(v9 - 8) = v37;
      a3 = v240;
      if (v42 < v44) {
        goto LABEL_91;
      }
      double v59 = sub_FFF8AC(a1, v9 - 104);
      if (sub_FFF8AC(v9, v249))
      {
        a2 = v9 - 104;
        if (v59) {
          return *(double *)&v60;
        }
        goto LABEL_1;
      }
      if (!v59)
      {
LABEL_91:
        sub_FFE120(a1, v9 - 104, v240, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v37 = *(_DWORD *)(a1 + 96);
      if (*(_DWORD *)(a1 - 8) > v37) {
        goto LABEL_56;
      }
      int v61 = *(void *)(a1 + 16);
      uint64_t v235 = *(_OWORD *)a1;
      uint64_t v241 = *(_OWORD *)(a1 + 24);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      double v62 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(_OWORD *)uint64_t v252 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v252[13] = *(_OWORD *)(a1 + 61);
      *(_OWORD *)&v258[3] = *(_OWORD *)(a1 + 80);
      float64_t v63 = *(_DWORD *)(a1 + 96);
      if (v63 <= *(_DWORD *)(a2 - 8))
      {
        double v66 = a1 + 104;
        do
        {
          unint64_t v9 = v66;
          if (v66 >= a2) {
            break;
          }
          double v67 = *(_DWORD *)(v66 + 96);
          v66 += 104;
        }
        while (v63 <= v67);
      }
      else
      {
        unint64_t v64 = a1;
        do
        {
          unint64_t v9 = v64 + 104;
          unint64_t v65 = *(_DWORD *)(v64 + 200);
          v64 += 104;
        }
        while (v63 <= v65);
      }
      int v68 = a2;
      if (v9 < a2)
      {
        double v69 = a2;
        do
        {
          int v68 = v69 - 104;
          uint64_t v70 = *(_DWORD *)(v69 - 8);
          v69 -= 104;
        }
        while (v63 > v70);
      }
      while (v9 < v68)
      {
        sub_FFFD10((long long *)v9, v68);
        do
        {
          uint64_t v71 = *(_DWORD *)(v9 + 200);
          v9 += 104;
        }
        while (v63 <= v71);
        do
        {
          uint64_t v72 = *(_DWORD *)(v68 - 8);
          v68 -= 104;
        }
        while (v63 > v72);
      }
      float64x2_t v73 = (void **)(v9 - 104);
      unint64_t v4 = v9 - 104 >= a1;
      char v5 = v9 - 104 == a1;
      if (v9 - 104 != a1)
      {
        sub_40D678((char **)a1, v9 - 104);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v9 - 24);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(v9 - 8);
      }
      float64x2_t v74 = (char *)*v73;
      if (*v73)
      {
        double v75 = *(char **)(v9 - 96);
        int8x16_t v76 = *v73;
        if (v75 != v74)
        {
          do
          {
            long long v77 = (void *)*((void *)v75 - 3);
            if (v77)
            {
              *((void *)v75 - 2) = v77;
              operator delete(v77);
            }
            v75 -= 48;
          }
          while (v75 != v74);
          int8x16_t v76 = *v73;
        }
        *(void *)(v9 - 96) = v74;
        operator delete(v76);
      }
      *(_OWORD *)(v9 - 104) = v235;
      *(void *)(v9 - 88) = v61;
      float64x2_t v78 = *(void *)(v9 - 80);
      if (v78)
      {
        float64x2_t v79 = *(void *)(v9 - 72);
        float64x2_t v80 = *(void **)(v9 - 80);
        if (v79 != v78)
        {
          do
          {
            if (*(char *)(v79 - 1) < 0) {
              operator delete(*(void **)(v79 - 24));
            }
            v79 -= 48;
          }
          while (v79 != v78);
          float64x2_t v80 = *(void **)(v9 - 80);
        }
        *(void *)(v9 - 72) = v78;
        operator delete(v80);
      }
      a4 = 0;
      *(_OWORD *)(v9 - 80) = v241;
      *(void *)(v9 - 64) = v62;
      *(_OWORD *)(v9 - 56) = *(_OWORD *)v252;
      *(_OWORD *)(v9 - 43) = *(_OWORD *)&v252[13];
      *(void *)&unint64_t v60 = *(void *)&v258[3];
      *(_OWORD *)(v9 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)&v258[3];
      *(_DWORD *)(v9 - 8) = v63;
    }
  }
  if (a4)
  {
    if (a1 != a2)
    {
      long long v88 = a1 + 104;
      if (a1 + 104 != a2)
      {
        BOOL v89 = &v258[3];
        unsigned int v90 = a1;
        do
        {
          float64x2_t v92 = v88;
          if (*(_DWORD *)(v90 + 200) > *(_DWORD *)(v90 + 96))
          {
            long long v93 = *(_OWORD *)v88;
            unsigned __int8 v94 = *(void *)(v90 + 120);
            *(void *)(v88 + 8) = 0;
            *(void *)(v88 + 16) = 0;
            *(void *)long long v88 = 0;
            uint64_t v247 = *(void **)(v90 + 128);
            uint64_t v236 = v93;
            uint64_t v242 = *(_OWORD *)(v90 + 136);
            *(void *)(v90 + 136) = 0;
            *(void *)(v90 + 144) = 0;
            *(void *)(v90 + 128) = 0;
            *(_OWORD *)&v253[13] = *(_OWORD *)(v90 + 165);
            *(_OWORD *)uint64_t v253 = *(_OWORD *)(v90 + 152);
            uint64_t v95 = v89;
            *BOOL v89 = *(_OWORD *)(v90 + 184);
            uint64_t v96 = v88;
            uint64_t v97 = *(_DWORD *)(v90 + 200);
            while (1)
            {
              double v98 = v90;
              double v99 = *(char **)v96;
              if (*(void *)v96)
              {
                char v101 = (void *)(v96 + 8);
                uint64_t v100 = *(char **)(v96 + 8);
                unsigned int v102 = *(char **)v96;
                if (v100 != v99)
                {
                  do
                  {
                    unsigned int v103 = (void *)*((void *)v100 - 3);
                    if (v103)
                    {
                      *((void *)v100 - 2) = v103;
                      operator delete(v103);
                    }
                    v100 -= 48;
                  }
                  while (v100 != v99);
                  unsigned int v102 = *(char **)v96;
                }
                _DWORD *v101 = v99;
                operator delete(v102);
                _DWORD *v101 = 0;
                *(void *)(v96 + 16) = 0;
              }
              *(_OWORD *)uint64_t v96 = *(_OWORD *)v98;
              *(void *)(v96 + 16) = *(void *)(v98 + 16);
              *(void *)double v98 = 0;
              *(void *)(v98 + 8) = 0;
              *(void *)(v98 + 16) = 0;
              int v104 = *(void *)(v96 + 24);
              if (v104)
              {
                uint64_t v106 = (void *)(v96 + 32);
                int v105 = *(void *)(v96 + 32);
                unsigned int v107 = *(void **)(v96 + 24);
                if (v105 != v104)
                {
                  do
                  {
                    if (*(char *)(v105 - 1) < 0) {
                      operator delete(*(void **)(v105 - 24));
                    }
                    v105 -= 48;
                  }
                  while (v105 != v104);
                  unsigned int v107 = *(void **)(v96 + 24);
                }
                double *v106 = v104;
                operator delete(v107);
                double *v106 = 0;
                *(void *)(v96 + 40) = 0;
              }
              int64_t v108 = (void **)(v98 + 24);
              *(_OWORD *)(v96 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v98 + 24);
              *(void *)(v96 + 40) = *(void *)(v98 + 40);
              *(void *)(v98 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              *(void *)(v98 + 32) = 0;
              *(void *)(v98 + 40) = 0;
              *(_OWORD *)(v96 + 61) = *(_OWORD *)(v98 + 61);
              *(_OWORD *)(v96 + 48) = *(_OWORD *)(v98 + 48);
              *(_OWORD *)(v96 + 80) = *(_OWORD *)(v98 + 80);
              *(_DWORD *)(v96 + 96) = *(_DWORD *)(v98 + 96);
              if (v98 == a1) {
                break;
              }
              unsigned int v90 = v98 - 104;
              uint64_t v96 = v98;
              if (v97 <= *(_DWORD *)(v98 - 8))
              {
                uint64_t v109 = v98;
                long double v110 = *(char **)v98;
                if (!*(void *)v98) {
                  goto LABEL_184;
                }
                goto LABEL_177;
              }
            }
            uint64_t v109 = a1;
            long double v110 = *(char **)a1;
            if (!*(void *)a1) {
              goto LABEL_184;
            }
LABEL_177:
            long double v111 = *(char **)(v109 + 8);
            uint64x2_t v112 = v110;
            if (v111 != v110)
            {
              do
              {
                uint64_t v113 = (void *)*((void *)v111 - 3);
                if (v113)
                {
                  *((void *)v111 - 2) = v113;
                  operator delete(v113);
                }
                v111 -= 48;
              }
              while (v111 != v110);
              uint64x2_t v112 = *(char **)v109;
            }
            *(void *)(v109 + 8) = v110;
            operator delete(v112);
LABEL_184:
            *(_OWORD *)uint64_t v109 = v236;
            *(void *)(v109 + 16) = v94;
            uint64_t v114 = (void **)*v108;
            if (*v108)
            {
              unsigned int v115 = *(void ***)(v109 + 32);
              int v91 = *v108;
              if (v115 != v114)
              {
                do
                {
                  if (*((char *)v115 - 1) < 0) {
                    operator delete(*(v115 - 3));
                  }
                  v115 -= 6;
                }
                while (v115 != v114);
                int v91 = *v108;
              }
              *(void *)(v109 + 32) = v114;
              operator delete(v91);
            }
            *int64_t v108 = v247;
            *(_OWORD *)(v109 + 32) = v242;
            *(_OWORD *)(v98 + 48) = *(_OWORD *)v253;
            *(_OWORD *)(v98 + 61) = *(_OWORD *)&v253[13];
            BOOL v89 = v95;
            unint64_t v60 = *v95;
            *(_OWORD *)(v98 + 80) = *v95;
            *(_DWORD *)(v109 + 96) = v97;
            a2 = v249;
          }
          long long v88 = v92 + 104;
          unsigned int v90 = v92;
        }
        while (v92 + 104 != a2);
      }
    }
  }
  else if (a1 != a2)
  {
    uint64_t v195 = a1 + 104;
    if (a1 + 104 != a2)
    {
      do
      {
        uint64_t v197 = v195;
        if (*(_DWORD *)(a1 + 200) > *(_DWORD *)(a1 + 96))
        {
          uint64_t v198 = *(_OWORD *)v195;
          uint64_t v199 = *(void *)(a1 + 120);
          *(void *)(v195 + 8) = 0;
          *(void *)(v195 + 16) = 0;
          *(void *)uint64_t v195 = 0;
          uint64_t v246 = v198;
          uint64_t v248 = *(_OWORD *)(a1 + 128);
          uint64_t v200 = *(void *)(a1 + 144);
          *(void *)(a1 + 136) = 0;
          *(void *)(a1 + 144) = 0;
          *(void *)(a1 + 128) = 0;
          *(_OWORD *)&v256[13] = *(_OWORD *)(a1 + 165);
          *(_OWORD *)uint64_t v256 = *(_OWORD *)(a1 + 152);
          *(_OWORD *)&v258[3] = *(_OWORD *)(a1 + 184);
          char v201 = v195;
          uint64_t v202 = *(_DWORD *)(a1 + 200);
          do
          {
            uint64_t v204 = a1;
            unint64_t v205 = *(char **)v201;
            if (*(void *)v201)
            {
              uint64_t v206 = (void *)(v201 + 8);
              int v207 = *(char **)(v201 + 8);
              uint64_t v208 = *(char **)v201;
              if (v207 != v205)
              {
                do
                {
                  int v209 = (void *)*((void *)v207 - 3);
                  if (v209)
                  {
                    *((void *)v207 - 2) = v209;
                    operator delete(v209);
                  }
                  v207 -= 48;
                }
                while (v207 != v205);
                uint64_t v208 = *(char **)v201;
              }
              *uint64_t v206 = v205;
              operator delete(v208);
              *uint64_t v206 = 0;
              *(void *)(v201 + 16) = 0;
            }
            *(_OWORD *)char v201 = *(_OWORD *)v204;
            *(void *)(v201 + 16) = *(void *)(v204 + 16);
            *(void *)uint64_t v204 = 0;
            *(void *)(v204 + 8) = 0;
            *(void *)(v204 + 16) = 0;
            int v210 = *(void *)(v201 + 24);
            if (v210)
            {
              uint64_t v211 = (void *)(v201 + 32);
              uint64_t v212 = *(void *)(v201 + 32);
              uint64_t v203 = *(void **)(v201 + 24);
              if (v212 != v210)
              {
                do
                {
                  if (*(char *)(v212 - 1) < 0) {
                    operator delete(*(void **)(v212 - 24));
                  }
                  v212 -= 48;
                }
                while (v212 != v210);
                uint64_t v203 = *(void **)(v201 + 24);
              }
              *uint64_t v211 = v210;
              operator delete(v203);
              *uint64_t v211 = 0;
              *(void *)(v201 + 40) = 0;
            }
            *(_OWORD *)(v201 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_OWORD *)(v204 + 24);
            *(void *)(v201 + 40) = *(void *)(v204 + 40);
            *(void *)(v204 + 32) = 0;
            *(void *)(v204 + 40) = 0;
            *(void *)(v204 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(_OWORD *)(v201 + 61) = *(_OWORD *)(v204 + 61);
            *(_OWORD *)(v201 + 48) = *(_OWORD *)(v204 + 48);
            *(_OWORD *)(v201 + 80) = *(_OWORD *)(v204 + 80);
            *(_DWORD *)(v201 + 96) = *(_DWORD *)(v204 + 96);
            a1 = v204 - 104;
            char v201 = v204;
          }
          while (v202 > *(_DWORD *)(v204 - 8));
          int v213 = *(void *)v204;
          if (*(void *)v204)
          {
            uint64_t v214 = *(void *)(v204 + 8);
            uint64_t v215 = *(void **)v204;
            if (v214 != v213)
            {
              do
              {
                uint64_t v216 = *(void **)(v214 - 24);
                if (v216)
                {
                  *(void *)(v214 - 16) = v216;
                  operator delete(v216);
                }
                v214 -= 48;
              }
              while (v214 != v213);
              uint64_t v215 = *(void **)v204;
            }
            *(void *)(v204 + 8) = v213;
            operator delete(v215);
          }
          *(_OWORD *)uint64_t v204 = v246;
          *(void *)(v204 + 16) = v199;
          uint64_t v217 = *(void *)(v204 + 24);
          if (v217)
          {
            unint64_t v218 = *(void *)(v204 + 32);
            uint64_t v196 = *(void **)(v204 + 24);
            if (v218 != v217)
            {
              do
              {
                if (*(char *)(v218 - 1) < 0) {
                  operator delete(*(void **)(v218 - 24));
                }
                v218 -= 48;
              }
              while (v218 != v217);
              uint64_t v196 = *(void **)(v204 + 24);
            }
            *(void *)(v204 + 32) = v217;
            operator delete(v196);
          }
          *(_OWORD *)(v204 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v248;
          *(void *)(v204 + 40) = v200;
          *(_OWORD *)(v204 + 48) = *(_OWORD *)v256;
          *(_OWORD *)(v204 + 61) = *(_OWORD *)&v256[13];
          *(void *)&unint64_t v60 = *(void *)&v258[3];
          *(_OWORD *)(v204 + 80) = *(_OWORD *)&v258[3];
          *(_DWORD *)(v204 + 96) = v202;
          a2 = v249;
        }
        uint64_t v195 = v197 + 104;
        a1 = v197;
      }
      while (v197 + 104 != a2);
    }
  }
  return *(double *)&v60;
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = (char *)a2 - (char *)v11;
    uint64_t v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = a2[-2].n128_u64[0];
          double v28 = a2[-2].n128_u64[1];
          double v29 = a2 - 2;
          double v30 = v28 - v27;
          unint64_t v31 = a1->n128_u64[1] - a1->n128_u64[0];
          char v6 = v30 == v31;
          unint64_t v32 = v30 < v31;
          if (v6) {
            unint64_t v32 = v29[1].n128_u64[0] < a1[1].n128_u64[0];
          }
          if (v32)
          {
            int8x16_t v76 = *a1;
            float64x2_t v78 = a1[1];
            double v33 = v29[1];
            *a1 = *v29;
            a1[1] = v33;
            *double v29 = v76;
            v29[1] = v78;
          }
          break;
        case 3uLL:
          sub_108FDD0(a1, (__n128 *)a1[2].n128_u64, (__n128 *)a2[-2].n128_u64);
          break;
        case 4uLL:
          sub_1090478(a1, a1 + 2, a1 + 4, a2 - 2);
          break;
        case 5uLL:
          sub_1090588(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 767) {
      break;
    }
    unint64_t v15 = v12;
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        long long v54 = (v14 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        unint64_t v56 = &a1[2 * v54];
        do
        {
          sub_10906E8((uint64_t)a1, a3, v13 >> 5, v56);
          v56 -= 2;
          --v55;
        }
        while (v55);
        float64x2_t v58 = (unint64_t)v13 >> 5;
        do
        {
          unint64_t v57 = sub_1090848(a1, (uint64_t)a2, v57, a3, v58);
          a2 -= 2;
        }
        while (v58-- > 2);
      }
      return;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = &a1[2 * (v14 >> 1)];
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_108FDD0(v17, a1, (__n128 *)a2[-2].n128_u64);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_108FDD0(a1, v17, (__n128 *)a2[-2].n128_u64);
      unint64_t v18 = 2 * v16;
      unint64_t v19 = &a1[2 * v16 - 2];
      sub_108FDD0((__n128 *)a1[2].n128_u64, v19, (__n128 *)a2[-4].n128_u64);
      sub_108FDD0((__n128 *)a1[4].n128_u64, (__n128 *)a1[v18 + 2].n128_u64, (__n128 *)a2[-6].n128_u64);
      sub_108FDD0(v19, v17, (__n128 *)a1[v18 + 2].n128_u64);
      double v75 = *a1;
      long long v77 = a1[1];
      uint64_t v20 = v17[1];
      *a1 = *v17;
      a1[1] = v20;
      *unint64_t v17 = v75;
      v17[1] = v77;
      if (a5) {
        goto LABEL_14;
      }
    }
    double v21 = a1[-2].n128_u64[1] - a1[-2].n128_u64[0];
    uint64_t v22 = a1->n128_u64[1] - a1->n128_u64[0];
    char v6 = v21 == v22;
    unint64_t v23 = v21 < v22;
    if (v6) {
      unint64_t v23 = a1[-1].n128_u64[0] < a1[1].n128_u64[0];
    }
    if (!v23)
    {
      unint64_t v11 = (__n128 *)sub_108FF20(a1, (unint64_t)a2);
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = (__n128 *)sub_1090088(a1, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = sub_10901DC(a1, v24);
    unint64_t v11 = v24 + 2;
    if (sub_10901DC(v24 + 2, a2))
    {
      a4 = -v15;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v26)
    {
LABEL_17:
      sub_108F8A0(a1, v24, a3, -v15, a5 & 1);
      unint64_t v11 = v24 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  double v34 = a1 + 2;
  unint64_t v36 = a1 == a2 || v34 == a2;
  if (a5)
  {
    if (!v36)
    {
      double v37 = 0;
      double v38 = a1;
      do
      {
        double v40 = v34;
        unint64_t v42 = v38[2].n128_u64[0];
        float64x2_t v41 = v38[2].n128_u64[1];
        BOOL v43 = v41 - v42;
        uint64_t v44 = v38->n128_u64[1] - v38->n128_u64[0];
        uint64_t v45 = v38[3].n128_u64[0];
        char v6 = v41 - v42 == v44;
        unint64_t v46 = v41 - v42 < v44;
        if (v6) {
          unint64_t v46 = v45 < v38[1].n128_u64[0];
        }
        if (v46)
        {
          unint64_t v47 = v38[3].n128_u64[1];
          double v48 = v37;
          do
          {
            double v49 = (__n128 *)((char *)a1 + v48);
            double v50 = *(__n128 *)((char *)a1 + v48 + 16);
            v49[2] = *(__n128 *)((char *)a1 + v48);
            v49[3] = v50;
            if (!v48)
            {
              double v39 = a1;
              goto LABEL_46;
            }
            float64x2_t v51 = v49[-2].n128_u64[1] - v49[-2].n128_u64[0];
            uint64_t v52 = v45 < v49[-1].n128_u64[0];
            char v6 = v43 == v51;
            double v53 = v43 < v51;
            if (!v6) {
              uint64_t v52 = v53;
            }
            v48 -= 32;
          }
          while (v52);
          double v39 = (__n128 *)((char *)a1 + v48 + 32);
LABEL_46:
          v39->n128_u64[0] = v42;
          v39->n128_u64[1] = v41;
          v39[1].n128_u64[0] = v45;
          v39[1].n128_u64[1] = v47;
        }
        double v34 = v40 + 2;
        v37 += 32;
        double v38 = v40;
      }
      while (&v40[2] != a2);
    }
  }
  else if (!v36)
  {
    do
    {
      unint64_t v60 = v34;
      double v62 = a1[2].n128_u64[0];
      int v61 = a1[2].n128_u64[1];
      float64_t v63 = v61 - v62;
      unint64_t v64 = a1->n128_u64[1] - a1->n128_u64[0];
      unint64_t v65 = a1[3].n128_u64[0];
      char v6 = v61 - v62 == v64;
      double v66 = v61 - v62 < v64;
      if (v6) {
        double v66 = v65 < a1[1].n128_u64[0];
      }
      if (v66)
      {
        double v67 = a1[3].n128_u64[1];
        int v68 = v60;
        do
        {
          double v69 = v68[-1];
          *int v68 = v68[-2];
          v68[1] = v69;
          uint64_t v71 = v68[-4].n128_i64[0];
          uint64_t v70 = v68[-4].n128_i64[1];
          uint64_t v72 = v68[-3].n128_u64[0];
          v68 -= 2;
          float64x2_t v73 = v70 - v71;
          char v6 = v63 == v73;
          float64x2_t v74 = v63 < v73;
          if (v6) {
            float64x2_t v74 = v65 < v72;
          }
        }
        while (v74);
        v68->n128_u64[0] = v62;
        v68->n128_u64[1] = v61;
        v68[1].n128_u64[0] = v65;
        v68[1].n128_u64[1] = v67;
      }
      double v34 = v60 + 2;
      a1 = v60;
    }
    while (&v60[2] != a2);
  }
}

  unint64_t v11 = (unint64_t)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (std::string *)v11;
    uint64_t v13 = (uint64_t)a2 - v11;
    uint64_t v14 = v13 >> 6;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v28 = sub_10C9EC8(a3, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, (uint64_t)a1);
          if (&a2[-3].__r_.__value_.__r.__words[1] != (std::string::size_type *)a1 && v28)
          {
            std::string::size_type size = a1->__r_.__value_.__l.__size_;
            if ((size & 2) != 0)
            {
              double v30 = 0;
            }
            else
            {
              double v30 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
              if (size) {
                double v30 = (void *)*v30;
              }
            }
            unint64_t v36 = a2[-3].__r_.__value_.__r.__words[2];
            if ((v36 & 2) != 0)
            {
              double v37 = 0;
            }
            else
            {
              double v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
              if (v36) {
                double v37 = (void *)*v37;
              }
            }
            p_std::string::size_type size = (uint64_t)&a2[-3].__r_.__value_.__l.__size_;
            if (v30 == v37)
            {
              *(void *)&double result = sub_151FA44((uint64_t)a1, p_size).n128_u64[0];
            }
            else
            {
              sub_188A09C((uint64_t)a1, p_size);
            }
          }
          break;
        case 3uLL:
          sub_10C6518((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
          break;
        case 4uLL:
          double result = sub_10C70C0((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a1[5].__r_.__value_.__l.__size_, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
          break;
        case 5uLL:
          double result = sub_10C72BC((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a1[5].__r_.__value_.__l.__size_, (uint64_t)&a1[8], (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 1535) {
      break;
    }
    unint64_t v15 = v12;
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        unint64_t v31 = (v14 - 2) >> 1;
        unint64_t v32 = v31 + 1;
        double v33 = (std::string *)((char *)a1 + 64 * v31);
        do
        {
          sub_10C75E0((uint64_t)a1, a3, v13 >> 6, v33);
          double v33 = (std::string *)((char *)v33 - 64);
          --v32;
        }
        while (v32);
        double v34 = (unint64_t)v13 >> 6;
        do
        {
          sub_10C77FC((uint64_t)a1, (uint64_t)a2, a3, v34);
          a2 = (std::string *)((char *)a2 - 64);
        }
        while (v34-- > 2);
      }
      return result;
    }
    uint64_t v16 = v14 >> 1;
    unint64_t v17 = (uint64_t)a1 + 64 * (v14 >> 1);
    if ((unint64_t)v13 <= 0x2000)
    {
      sub_10C6518(v17, (uint64_t)a1, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
      if (a5) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_10C6518((uint64_t)a1, v17, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
      unint64_t v18 = v16 << 6;
      unint64_t v19 = (uint64_t)&a1[-2] + 64 * v16 - 16;
      sub_10C6518((uint64_t)&a1[2].__r_.__value_.__r.__words[2], v19, (uint64_t)&a2[-6].__r_.__value_.__r.__words[2], a3);
      sub_10C6518((uint64_t)&a1[5].__r_.__value_.__l.__size_, (uint64_t)&a1[2].__r_.__value_.__r.__words[2] + v18, (uint64_t)&a2[-8], a3);
      sub_10C6518(v19, v17, (uint64_t)&a1[2].__r_.__value_.__r.__words[2] + v18, a3);
      uint64_t v20 = a1->__r_.__value_.__l.__size_;
      if ((v20 & 2) != 0)
      {
        double v21 = 0;
      }
      else
      {
        double v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          double v21 = (void *)*v21;
        }
      }
      uint64_t v22 = *(void *)(v17 + 8);
      if ((v22 & 2) != 0)
      {
        unint64_t v23 = 0;
      }
      else
      {
        unint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          unint64_t v23 = (void *)*v23;
        }
      }
      if (v21 == v23)
      {
        sub_151FA44((uint64_t)a1, v17);
        if (a5) {
          goto LABEL_23;
        }
      }
      else
      {
        sub_188A09C((uint64_t)a1, v17);
        if (a5) {
          goto LABEL_23;
        }
      }
    }
    if ((sub_10C9EC8(a3, (uint64_t)&a1[-3].__r_.__value_.__l.__size_, (uint64_t)a1) & 1) == 0)
    {
      unint64_t v11 = sub_10C6824(a1, (unint64_t)a2, a3);
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v24 = sub_10C6AEC(a1, (unint64_t)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_26;
    }
    BOOL v26 = sub_10C6DAC(a1, (std::string *)v24, a3);
    unint64_t v11 = v24 + 64;
    if (sub_10C6DAC((std::string *)(v24 + 64), a2, a3))
    {
      a4 = -v15;
      a2 = (std::string *)v24;
      if (v26) {
        return result;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if ((v26 & 1) == 0)
    {
LABEL_26:
      sub_10C5D08(a1, v24, a3, -v15, a5 & 1);
      unint64_t v11 = v24 + 64;
LABEL_28:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10C61DC((uint64_t)a1, (uint64_t)a2, a3);
  }
  else
  {
    sub_10C6390((uint64_t)a1, (uint64_t)a2, a3);
  }
  return result;
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (a2[-1].n128_f64[1] > v11->n128_f64[1])
          {
            double v28 = *v11;
            *unint64_t v11 = a2[-1];
            a2[-1] = v28;
          }
          break;
        case 3uLL:
          sub_113803C(v11->n128_f64, v11[1].n128_f64, a2[-1].n128_f64);
          break;
        case 4uLL:
          sub_1138470(v11->n128_f64, (uint64_t)&v11[1], (uint64_t)&v11[2], (uint64_t)&a2[-1]);
          break;
        case 5uLL:
          sub_1138514(v11->n128_f64, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_11385E4(v11->n128_f64, a2->n128_f64, a2->n128_f64, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    n128_f64 = v11[v15 >> 1].n128_f64;
    if ((unint64_t)v14 >= 0x801)
    {
      sub_113803C(v11->n128_f64, v11[v15 >> 1].n128_f64, a2[-1].n128_f64);
      sub_113803C(v11[1].n128_f64, n128_f64 - 2, a2[-2].n128_f64);
      sub_113803C(v11[2].n128_f64, v11[v16 + 1].n128_f64, a2[-3].n128_f64);
      sub_113803C(n128_f64 - 2, n128_f64, v11[v16 + 1].n128_f64);
      unint64_t v27 = *v11;
      *unint64_t v11 = *(__n128 *)n128_f64;
      *(__n128 *)n128_f64 = v27;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_113803C(v11[v15 >> 1].n128_f64, v11->n128_f64, a2[-1].n128_f64);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (v11[-1].n128_f64[1] <= v11->n128_f64[1])
    {
      unint64_t v11 = (__n128 *)sub_11380F8(v11->n128_f64, a2->n128_f64);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v18 = (__n128 *)sub_11381DC(v11->n128_f64, a2->n128_f64);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = sub_11382C0(v11, v18);
    unint64_t v11 = v18 + 1;
    if (sub_11382C0(v18 + 1, a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      sub_1137BC4(a1, v18, a3, -v13, a5 & 1);
      unint64_t v11 = v18 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1137FB8((uint64_t)v11, a2);
  }
  else if (v11 != a2)
  {
    while (&a1[1] != a2)
    {
      uint64_t v22 = a1[1].n128_f64[1];
      unint64_t v23 = a1->n128_f64[1];
      double v21 = ++a1;
      if (v22 > v23)
      {
        uint64_t v24 = v21->n128_u64[0];
        char v25 = a1;
        do
        {
          *char v25 = v25[-1];
          BOOL v26 = v25[-2].n128_f64[1];
          --v25;
        }
        while (v22 > v26);
        v25->n128_u64[0] = v24;
        v25->n128_f64[1] = v22;
      }
    }
  }
}

  uint64_t v12 = (long long *)&a2[-2].n128_i8[8];
  uint64_t v13 = (long long *)a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v13;
    unint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)&a2[-2].n128_i8[8], v13))
          {
            unint64_t v32 = *((void *)v13 + 2);
            double v30 = *v13;
            double v28 = *v12;
            *((_DWORD *)v13 + 4) = a2[-1].n128_u32[2];
            *uint64_t v13 = v28;
            *uint64_t v12 = v30;
            a2[-1].n128_u32[2] = v32;
          }
          break;
        case 3uLL:
          sub_1AFE270(v13, (long long *)((char *)v13 + 24), (long long *)&a2[-2].n128_i8[8], a3);
          break;
        case 4uLL:
          sub_1AFE890((uint64_t)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        case 5uLL:
          sub_1AFE97C((__n128 *)v13, (uint64_t)v13 + 24, (uint64_t)(v13 + 3), (uint64_t)v13 + 72, (uint64_t)&a2[-2].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 575) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != (long long *)a2)
      {
        sub_1AFEAA0((__n128 *)v13, a2, a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    unint64_t v19 = (long long *)((char *)v13 + 24 * (v17 >> 1));
    if ((unint64_t)v16 >= 0xC01)
    {
      sub_1AFE270(v13, (long long *)((char *)v13 + 24 * (v17 >> 1)), (long long *)&a2[-2].n128_i8[8], a3);
      uint64_t v20 = 3 * v18;
      double v21 = (long long *)((char *)v13 + 24 * v18 - 24);
      sub_1AFE270((long long *)((char *)v13 + 24), v21, (long long *)&a2[-3], a3);
      uint64_t v22 = v13 + 3;
      unint64_t v23 = (long long *)((char *)v13 + 8 * v20 + 24);
      sub_1AFE270(v22, v23, (long long *)&a2[-5].n128_i8[8], a3);
      sub_1AFE270(v21, v19, v23, a3);
      unint64_t v31 = *(void *)(a1 + 16);
      double v29 = *(_OWORD *)a1;
      uint64_t v24 = *v19;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)v19 + 4);
      *(_OWORD *)a1 = v24;
      *((_DWORD *)v19 + 4) = v31;
      *unint64_t v19 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1AFE270((long long *)((char *)v13 + 24 * (v17 >> 1)), v13, (long long *)&a2[-2].n128_i8[8], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)(a1 - 24), (long long *)a1) & 1) == 0)
    {
      uint64_t v13 = sub_1AFE3C0((long long *)a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    char v25 = sub_1AFE520((long long *)a1, (unint64_t)a2, (uint64_t (**)(char *, long long *))a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v27 = sub_1AFE680(a1, v25, a3);
    uint64_t v13 = (long long *)(v25 + 24);
    if (sub_1AFE680(v25 + 24, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (__n128 *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v27)
    {
LABEL_16:
      sub_1AFDC8C(a1, v25, a3, -v15, a5 & 1);
      uint64_t v13 = (long long *)(v25 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1AFE0B4((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    sub_1AFE1A0((uint64_t)v13, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 7;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 8, (uint64_t)v11))
          {
            sub_1B10E34((uint64_t)v11, a2 - 8);
          }
          break;
        case 3uLL:
          sub_1B1034C((uint64_t)v11, v11 + 8, a2 - 8, a3);
          break;
        case 4uLL:
          sub_1B11054((uint64_t)v11, v11 + 8, v11 + 16, a2 - 8, a3);
          break;
        case 5uLL:
          sub_1B1111C((uint64_t)v11, v11 + 8, v11 + 16, v11 + 24, a2 - 8, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 3071) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_1B11208(v11, a2, (uint64_t)a2, (unsigned int (**)(long long *, uint64_t))a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x4000)
    {
      sub_1B1034C((uint64_t)v11, &v11[8 * (v15 >> 1)], a2 - 8, a3);
      sub_1B1034C((uint64_t)(v11 + 8), v17 - 8, a2 - 16, a3);
      sub_1B1034C((uint64_t)(v11 + 16), &v11[8 * v16 + 8], a2 - 24, a3);
      sub_1B1034C((uint64_t)(v17 - 8), v17, &v11[8 * v16 + 8], a3);
      sub_1B10E34((uint64_t)v11, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1B1034C((uint64_t)&v11[8 * (v15 >> 1)], v11, a2 - 8, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v11 - 8, (uint64_t)v11) & 1) == 0)
    {
      unint64_t v11 = (long long *)sub_1B1042C((unint64_t)v11, a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v18 = (long long *)sub_1B10738((uint64_t)v11, a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = sub_1B10A64(v11, v18, a3);
    unint64_t v11 = v18 + 8;
    if (sub_1B10A64(v18 + 8, a2, a3))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      sub_1B0FA04(a1, v18, a3, -v13, a5 & 1);
      unint64_t v11 = v18 + 8;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1B0FDEC((uint64_t)v11, (void **)a2, (uint64_t (**)(void **, uint64_t))a3);
  }
  else
  {
    sub_1B100AC((void **)v11, (void **)a2, (uint64_t (**)(void **, void **))a3);
  }
}

  uint64_t v12 = a2 - 2;
  uint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    unint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = ((char *)a2 - (char *)v13) >> 5;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 2, v13))
          {
            double v28 = *((void *)v13 + 2);
            BOOL v26 = *v13;
            uint64_t v24 = *v12;
            *((void *)v13 + 2) = *((void *)a2 - 2);
            *uint64_t v13 = v24;
            *uint64_t v12 = v26;
            *((void *)a2 - 2) = v28;
            *(void *)&uint64_t v24 = *((void *)v13 + 3);
            *((void *)v13 + 3) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v24;
          }
          break;
        case 3uLL:
          sub_1C8113C(v13, v13 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          sub_1C81968((uint64_t)v13, (uint64_t)(v13 + 2), (uint64_t)(v13 + 4), (uint64_t)(a2 - 2), a3);
          break;
        case 5uLL:
          sub_1C81A84((uint64_t)v13, (uint64_t)(v13 + 2), (uint64_t)(v13 + 4), (uint64_t)(v13 + 6), (uint64_t)(a2 - 2), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 767) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != a2)
      {
        sub_1C81BE8((uint64_t)v13, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(long long *, uint64_t))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    unint64_t v19 = &v13[2 * (v17 >> 1)];
    if ((unint64_t)v16 > 0x1000)
    {
      sub_1C8113C(v13, &v13[2 * (v17 >> 1)], a2 - 2, a3);
      sub_1C8113C(v13 + 2, v19 - 2, a2 - 4, a3);
      sub_1C8113C(v13 + 4, &v13[2 * v18 + 2], a2 - 6, a3);
      sub_1C8113C(v19 - 2, v19, &v13[2 * v18 + 2], a3);
      unint64_t v27 = *((void *)v13 + 2);
      char v25 = *v13;
      uint64_t v20 = *v19;
      *((void *)v13 + 2) = *((void *)v19 + 2);
      *uint64_t v13 = v20;
      *((void *)v19 + 2) = v27;
      *unint64_t v19 = v25;
      *(void *)&uint64_t v20 = *((void *)v13 + 3);
      *((void *)v13 + 3) = *((void *)v19 + 3);
      *((void *)v19 + 3) = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1C8113C(&v13[2 * (v17 >> 1)], v13, a2 - 2, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 2, v13) & 1) == 0)
    {
      uint64_t v13 = sub_1C812D8(v13, a2, (uint64_t (**)(void **, uint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    double v21 = sub_1C814D8((uint64_t)v13, (unint64_t)a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v23 = sub_1C816D4((uint64_t)v13, v21, a3);
    uint64_t v13 = (long long *)(v21 + 32);
    if (sub_1C816D4(v21 + 32, (uint64_t)a2, a3))
    {
      a4 = -v15;
      a2 = (long long *)v21;
      if (v23) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v23)
    {
LABEL_16:
      sub_1C80A74(a1, v21, a3, -v15, a5 & 1);
      uint64_t v13 = (long long *)(v21 + 32);
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1C80E9C((uint64_t)v13, a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
  else
  {
    sub_1C80FFC((uint64_t)v13, a2, (uint64_t (**)(long long *, uint64_t))a3);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xF0F0F0F0F0F0F0F1 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)((char *)a2 - 136), (uint64_t)v11))
          {
            sub_1C85788((uint64_t)v11, (long long *)((char *)a2 - 136));
          }
          break;
        case 3uLL:
          sub_1C84C44((uint64_t)v11, (long long *)((char *)v11 + 136), (long long *)((char *)a2 - 136), a3);
          break;
        case 4uLL:
          sub_1C859BC((uint64_t)v11, (long long *)((char *)v11 + 136), v11 + 17, (long long *)((char *)a2 - 136), a3);
          break;
        case 5uLL:
          sub_1C85A84((uint64_t)v11, (long long *)((char *)v11 + 136), v11 + 17, (long long *)((char *)v11 + 408), (long long *)((char *)a2 - 136), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 3263) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_1C85B70(v11, a2, (uint64_t)a2, (unsigned int (**)(int64_t, uint64_t))a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 136 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x4401)
    {
      sub_1C84C44((uint64_t)v11, (long long *)((char *)v11 + 136 * (v15 >> 1)), (long long *)((char *)a2 - 136), a3);
      unint64_t v18 = 17 * v16;
      unint64_t v19 = (long long *)((char *)v11 + 136 * v16 - 136);
      sub_1C84C44((uint64_t)v11 + 136, v19, a2 - 17, a3);
      uint64_t v20 = (uint64_t)(v11 + 17);
      double v21 = (long long *)((char *)v11 + 8 * v18 + 136);
      sub_1C84C44(v20, v21, (long long *)((char *)a2 - 408), a3);
      sub_1C84C44((uint64_t)v19, v17, v21, a3);
      sub_1C85788((uint64_t)a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1C84C44((uint64_t)v11 + 136 * (v15 >> 1), v11, (long long *)((char *)a2 - 136), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)((char *)a1 - 136), (uint64_t)a1) & 1) == 0)
    {
      unint64_t v11 = (long long *)sub_1C84D24((unint64_t)a1, a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v22 = (long long *)sub_1C85050((uint64_t)a1, a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v24 = sub_1C85394(a1, v22, a3);
    unint64_t v11 = (long long *)((char *)v22 + 136);
    if (sub_1C85394((long long *)((char *)v22 + 136), a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_16:
      sub_1C842A8(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = (long long *)((char *)v22 + 136);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1C846B4((uint64_t)v11, (void **)a2, (uint64_t (**)(void **, uint64_t))a3);
  }
  else
  {
    sub_1C84990((void **)v11, (void **)a2, (uint64_t (**)(void **, void **))a3);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)((char *)a2 - 104), (uint64_t)v11))
          {
            sub_1E12584((uint64_t)v11, (long long *)((char *)a2 - 104));
          }
          break;
        case 3uLL:
          sub_1E11CC0((uint64_t)v11, (long long *)((char *)v11 + 104), (long long *)((char *)a2 - 104), a3);
          break;
        case 4uLL:
          sub_1E126E4((uint64_t)v11, (long long *)((char *)v11 + 104), v11 + 13, (long long *)((char *)a2 - 104), a3);
          break;
        case 5uLL:
          sub_1E127AC((uint64_t)v11, (long long *)((char *)v11 + 104), v11 + 13, (long long *)((char *)v11 + 312), (long long *)((char *)a2 - 104), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 2495) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_1E12898(v11, a2, (uint64_t)a2, (unsigned int (**)(int64_t, uint64_t))a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = (long long *)((char *)v11 + 104 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x3401)
    {
      sub_1E11CC0((uint64_t)v11, (long long *)((char *)v11 + 104 * (v15 >> 1)), (long long *)((char *)a2 - 104), a3);
      unint64_t v18 = 104 * v16;
      unint64_t v19 = (long long *)((char *)v11 + 104 * v16 - 104);
      sub_1E11CC0((uint64_t)v11 + 104, v19, a2 - 13, a3);
      uint64_t v20 = (uint64_t)(v11 + 13);
      double v21 = (long long *)((char *)v11 + v18 + 104);
      sub_1E11CC0(v20, v21, (long long *)((char *)a2 - 312), a3);
      sub_1E11CC0((uint64_t)v19, v17, v21, a3);
      sub_1E12584((uint64_t)a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1E11CC0((uint64_t)v11 + 104 * (v15 >> 1), v11, (long long *)((char *)a2 - 104), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)((long long *)((char *)a1 - 104), (uint64_t)a1) & 1) == 0)
    {
      unint64_t v11 = (long long *)sub_1E11DA0((unint64_t)a1, a2, (uint64_t (**)(void **, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v22 = (long long *)sub_1E12000((uint64_t)a1, a2, (uint64_t (**)(uint64_t, void **))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v24 = sub_1E12264(a1, v22, a3);
    unint64_t v11 = (long long *)((char *)v22 + 104);
    if (sub_1E12264((long long *)((char *)v22 + 104), a2, a3))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_16:
      sub_1E114B8(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = (long long *)((char *)v22 + 104);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1E118D8((uint64_t)v11, (void **)a2, (uint64_t (**)(void **, uint64_t))a3);
  }
  else
  {
    sub_1E11ADC((void **)v11, (void **)a2, (uint64_t (**)(void **, void **))a3);
  }
}

  unsigned int v138 = a2;
  int v139 = a2 - 2;
  double v135 = a2 - 6;
  long double v136 = a2 - 4;
  uint64_t v10 = a1;
  while (1)
  {
    a1 = v10;
    unint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = v11 >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v60 = sub_1FDF364(*(a2 - 2));
          if (v60 > sub_1FDF364(*a1))
          {
            int v61 = *a1;
            *a1 = *(a2 - 2);
            *(a2 - 2) = v61;
            double v62 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v62;
          }
          break;
        case 3uLL:
          sub_1E37A88(a1, a1 + 2, v139);
          break;
        case 4uLL:
          sub_1E37E00(a1, a1 + 2, a1 + 4, v139);
          break;
        case 5uLL:
          sub_1E3794C(a1, a1 + 2, a1 + 4, a1 + 6, v139);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (a1 == a2) {
        return;
      }
      float64x2_t v80 = (v12 - 2) >> 1;
      int v140 = v80;
      do
      {
        float64x2_t v81 = v80;
        if (v140 >= v80)
        {
          double v82 = (2 * v80) | 1;
          double v83 = &a1[2 * v82];
          if (2 * v80 + 2 < (uint64_t)v12)
          {
            double v84 = sub_1FDF364(*v83);
            if (v84 > sub_1FDF364(v83[2]))
            {
              v83 += 2;
              double v82 = 2 * v81 + 2;
            }
          }
          BOOL v85 = &a1[2 * v81];
          double v86 = sub_1FDF364(*v83);
          if (v86 <= sub_1FDF364(*v85))
          {
            double v87 = *(_OWORD *)v85;
            *BOOL v85 = 0;
            v85[1] = 0;
            unsigned int v137 = v87;
            long long v88 = v87;
            do
            {
              BOOL v89 = v83;
              unsigned int v90 = *(_OWORD *)v83;
              *double v83 = 0;
              v83[1] = 0;
              int v91 = (std::__shared_weak_count *)v85[1];
              *(_OWORD *)BOOL v85 = v90;
              if (v91) {
                sub_20A69F0(v91);
              }
              if (v140 < v82) {
                break;
              }
              float64x2_t v92 = 2 * v82;
              double v82 = (2 * v82) | 1;
              double v83 = &a1[2 * v82];
              long long v93 = v92 + 2;
              if (v92 + 2 < (uint64_t)v12)
              {
                unsigned __int8 v94 = sub_1FDF364(*v83);
                if (v94 > sub_1FDF364(v83[2]))
                {
                  v83 += 2;
                  double v82 = v93;
                }
              }
              uint64_t v95 = sub_1FDF364(*v83);
              BOOL v85 = v89;
            }
            while (v95 <= sub_1FDF364(v88));
            uint64_t v96 = (std::__shared_weak_count *)v89[1];
            *(_OWORD *)BOOL v89 = v137;
            if (v96) {
              sub_20A69F0(v96);
            }
          }
        }
        float64x2_t v80 = v81 - 1;
      }
      while (v81);
      uint64_t v97 = (unint64_t)v11 >> 4;
      double v98 = v138;
      while (2)
      {
        double v99 = 0;
        uint64_t v100 = v98;
        char v101 = a1[1];
        uint64_t v141 = *a1;
        *a1 = 0;
        a1[1] = 0;
        unsigned int v102 = a1;
        do
        {
          unsigned int v103 = &v102[2 * v99 + 2];
          int v104 = 2 * v99;
          double v99 = (2 * v99) | 1;
          int v105 = v104 + 2;
          if (v104 + 2 < v97)
          {
            uint64_t v106 = sub_1FDF364(*v103);
            if (v106 > sub_1FDF364(v103[2]))
            {
              v103 += 2;
              double v99 = v105;
            }
          }
          unsigned int v107 = *(_OWORD *)v103;
          *unsigned int v103 = 0;
          v103[1] = 0;
          int64_t v108 = (std::__shared_weak_count *)v102[1];
          *(_OWORD *)unsigned int v102 = v107;
          if (v108) {
            sub_20A69F0(v108);
          }
          unsigned int v102 = v103;
        }
        while (v99 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
        v98 -= 2;
        if (v103 == v100 - 2)
        {
          uint64_t v122 = (std::__shared_weak_count *)v103[1];
          *unsigned int v103 = v141;
          v103[1] = v101;
          if (!v122) {
            goto LABEL_133;
          }
        }
        else
        {
          uint64_t v109 = *((_OWORD *)v100 - 1);
          *double v98 = 0;
          *(v100 - 1) = 0;
          long double v110 = (std::__shared_weak_count *)v103[1];
          *(_OWORD *)unsigned int v103 = v109;
          if (v110) {
            sub_20A69F0(v110);
          }
          long double v111 = (std::__shared_weak_count *)*(v100 - 1);
          *(v100 - 2) = v141;
          *(v100 - 1) = v101;
          if (v111) {
            sub_20A69F0(v111);
          }
          uint64x2_t v112 = (char *)(v103 + 2) - (char *)a1;
          if (v112 < 17) {
            goto LABEL_133;
          }
          uint64_t v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
          uint64_t v114 = &a1[2 * v113];
          unsigned int v115 = sub_1FDF364(*v114);
          if (v115 <= sub_1FDF364(*v103)) {
            goto LABEL_133;
          }
          unsigned int v116 = *v103;
          int v117 = v103[1];
          *unsigned int v103 = 0;
          v103[1] = 0;
          do
          {
            unsigned int v118 = v114;
            unsigned int v119 = *(_OWORD *)v114;
            *uint64_t v114 = 0;
            v114[1] = 0;
            unsigned int v120 = (std::__shared_weak_count *)v103[1];
            *(_OWORD *)unsigned int v103 = v119;
            if (v120) {
              sub_20A69F0(v120);
            }
            if (!v113) {
              break;
            }
            uint64_t v113 = (v113 - 1) >> 1;
            uint64_t v114 = &a1[2 * v113];
            int v121 = sub_1FDF364(*v114);
            unsigned int v103 = v118;
          }
          while (v121 > sub_1FDF364(v116));
          uint64_t v122 = (std::__shared_weak_count *)v118[1];
          *unsigned int v118 = v116;
          v118[1] = v117;
          if (!v122)
          {
LABEL_133:
            if (v97-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      sub_20A69F0(v122);
      goto LABEL_133;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = &a1[2 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x801)
    {
      sub_1E37A88(a1, &a1[2 * (v12 >> 1)], v139);
      sub_1E37A88(a1 + 2, v14 - 2, v136);
      sub_1E37A88(a1 + 4, &a1[2 * v13 + 2], v135);
      sub_1E37A88(v14 - 2, v14, &a1[2 * v13 + 2]);
      unint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = v15;
    }
    else
    {
      sub_1E37A88(&a1[2 * (v12 >> 1)], a1, v139);
    }
    --a3;
    if ((a4 & 1) != 0 || (uint64_t v16 = sub_1FDF364(*(a1 - 2)), v16 > sub_1FDF364(*a1)))
    {
      unint64_t v17 = 0;
      unint64_t v19 = *a1;
      unint64_t v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      do
      {
        uint64_t v20 = sub_1FDF364(a1[v17 + 2]);
        v17 += 2;
      }
      while (v20 > sub_1FDF364(v19));
      double v21 = &a1[v17];
      uint64_t v22 = v138;
      if (v17 == 2)
      {
        uint64_t v22 = v138;
        do
        {
          if (v21 >= v22) {
            break;
          }
          char v25 = *(v22 - 2);
          v22 -= 2;
          BOOL v26 = sub_1FDF364(v25);
        }
        while (v26 <= sub_1FDF364(v19));
      }
      else
      {
        do
        {
          unint64_t v23 = *(v22 - 2);
          v22 -= 2;
          uint64_t v24 = sub_1FDF364(v23);
        }
        while (v24 <= sub_1FDF364(v19));
      }
      uint64_t v10 = &a1[v17];
      if (v21 < v22)
      {
        unint64_t v27 = v22;
        do
        {
          double v28 = *v10;
          *uint64_t v10 = *v27;
          void *v27 = v28;
          double v29 = v10[1];
          v10[1] = v27[1];
          v27[1] = v29;
          do
          {
            double v30 = v10[2];
            v10 += 2;
            unint64_t v31 = sub_1FDF364(v30);
          }
          while (v31 > sub_1FDF364(v19));
          do
          {
            unint64_t v32 = *(v27 - 2);
            v27 -= 2;
            double v33 = sub_1FDF364(v32);
          }
          while (v33 <= sub_1FDF364(v19));
        }
        while (v10 < v27);
      }
      double v34 = v10 - 2;
      if (v10 - 2 != a1)
      {
        unint64_t v35 = *(_OWORD *)v34;
        void *v34 = 0;
        *(v10 - 1) = 0;
        unint64_t v36 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v35;
        if (v36) {
          sub_20A69F0(v36);
        }
      }
      double v37 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v19;
      *(v10 - 1) = v18;
      if (v37) {
        sub_20A69F0(v37);
      }
      unint64_t v4 = v21 >= v22;
      a2 = v138;
      if (!v4) {
        goto LABEL_35;
      }
      double v38 = sub_1E37BE0(a1, v10 - 2);
      if (sub_1E37BE0(v10, v138))
      {
        a2 = v10 - 2;
        if (v38) {
          return;
        }
        goto LABEL_1;
      }
      if (!v38)
      {
LABEL_35:
        sub_1E36F38(a1, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v40 = *a1;
      double v39 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      float64x2_t v41 = sub_1FDF364(v40);
      if (v41 > sub_1FDF364(*v139))
      {
        uint64_t v10 = a1;
        do
        {
          unint64_t v42 = sub_1FDF364(v40);
          BOOL v43 = sub_1FDF364(v10[2]);
          v10 += 2;
        }
        while (v42 <= v43);
      }
      else
      {
        uint64_t v44 = a1 + 2;
        do
        {
          uint64_t v10 = v44;
          if (v44 >= v138) {
            break;
          }
          uint64_t v45 = sub_1FDF364(v40);
          unint64_t v46 = sub_1FDF364(*v10);
          uint64_t v44 = v10 + 2;
        }
        while (v45 <= v46);
      }
      unint64_t v47 = v138;
      if (v10 < v138)
      {
        unint64_t v47 = v138;
        do
        {
          double v48 = sub_1FDF364(v40);
          double v49 = sub_1FDF364(*(v47 - 2));
          v47 -= 2;
        }
        while (v48 > v49);
      }
      while (v10 < v47)
      {
        double v50 = *v10;
        *uint64_t v10 = *v47;
        *unint64_t v47 = v50;
        float64x2_t v51 = v10[1];
        v10[1] = v47[1];
        v47[1] = v51;
        do
        {
          uint64_t v52 = sub_1FDF364(v40);
          double v53 = sub_1FDF364(v10[2]);
          v10 += 2;
        }
        while (v52 <= v53);
        do
        {
          long long v54 = sub_1FDF364(v40);
          unint64_t v55 = sub_1FDF364(*(v47 - 2));
          v47 -= 2;
        }
        while (v54 > v55);
      }
      unint64_t v56 = v10 - 2;
      unint64_t v4 = v10 - 2 >= a1;
      char v5 = v10 - 2 == a1;
      if (v10 - 2 != a1)
      {
        unint64_t v57 = *(_OWORD *)v56;
        *unint64_t v56 = 0;
        *(v10 - 1) = 0;
        float64x2_t v58 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v57;
        if (v58) {
          sub_20A69F0(v58);
        }
      }
      a4 = 0;
      double v59 = (std::__shared_weak_count *)*(v10 - 1);
      *(v10 - 2) = v40;
      *(v10 - 1) = v39;
      a2 = v138;
      if (v59)
      {
        sub_20A69F0(v59);
        a4 = 0;
      }
    }
  }
  float64_t v63 = a1 + 2;
  unint64_t v65 = a1 == a2 || v63 == a2;
  if (a4)
  {
    if (!v65)
    {
      double v66 = 0;
      double v67 = a1;
      do
      {
        int v68 = v67;
        double v67 = v63;
        double v69 = sub_1FDF364(v68[2]);
        if (v69 > sub_1FDF364(*v68))
        {
          uint64_t v70 = *v67;
          uint64_t v71 = v68[3];
          uint64_t v72 = v66;
          *double v67 = 0;
          v67[1] = 0;
          while (1)
          {
            float64x2_t v73 = (char *)a1 + v72;
            float64x2_t v74 = *(_OWORD *)((char *)a1 + v72);
            *(void *)float64x2_t v73 = 0;
            *((void *)v73 + 1) = 0;
            double v75 = *(std::__shared_weak_count **)((char *)a1 + v72 + 24);
            *((_OWORD *)v73 + 1) = v74;
            if (v75) {
              sub_20A69F0(v75);
            }
            if (!v72) {
              break;
            }
            int8x16_t v76 = sub_1FDF364(v70);
            long long v77 = sub_1FDF364(*(uint64_t *)((char *)a1 + v72 - 16));
            v72 -= 16;
            if (v76 <= v77)
            {
              float64x2_t v78 = (uint64_t *)((char *)a1 + v72 + 16);
              goto LABEL_87;
            }
          }
          float64x2_t v78 = a1;
LABEL_87:
          float64x2_t v79 = (std::__shared_weak_count *)v78[1];
          *float64x2_t v78 = v70;
          v78[1] = v71;
          if (v79) {
            sub_20A69F0(v79);
          }
        }
        float64_t v63 = v67 + 2;
        v66 += 16;
      }
      while (v67 + 2 != a2);
    }
  }
  else if (!v65)
  {
    uint64_t v124 = (std::__shared_weak_count **)(a1 + 3);
    do
    {
      uint64x2_t v125 = a1;
      a1 = v63;
      uint64_t v126 = sub_1FDF364(v125[2]);
      if (v126 > sub_1FDF364(*v125))
      {
        long double v127 = *a1;
        unsigned int v128 = (std::__shared_weak_count *)v125[3];
        unsigned int v129 = v124;
        *a1 = 0;
        a1[1] = 0;
        do
        {
          int v130 = *(_OWORD *)(v129 - 3);
          *(v129 - 3) = 0;
          *(v129 - 2) = 0;
          int v131 = *v129;
          *(_OWORD *)(v129 - 1) = v130;
          if (v131) {
            sub_20A69F0(v131);
          }
          int v132 = sub_1FDF364(v127);
          uint64_t v133 = sub_1FDF364((uint64_t)*(v129 - 5));
          v129 -= 2;
        }
        while (v132 > v133);
        long double v134 = *v129;
        *(v129 - 1) = (std::__shared_weak_count *)v127;
        char *v129 = v128;
        if (v134) {
          sub_20A69F0(v134);
        }
      }
      float64_t v63 = a1 + 2;
      v124 += 2;
    }
    while (a1 + 2 != a2);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v11) >> 5);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t)(a2 - 40), v11))
          {
            sub_1FAC344(v11, (uint64_t)(a2 - 40));
          }
          break;
        case 3uLL:
          sub_1FABAEC(v11, v11 + 160, (uint64_t)(a2 - 40), a3);
          break;
        case 4uLL:
          sub_1FAC468(v11, v11 + 160, v11 + 320, (uint64_t)(a2 - 40), a3);
          break;
        case 5uLL:
          sub_1FAC530(v11, v11 + 160, v11 + 320, v11 + 480, (uint64_t)(a2 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 3839) {
      break;
    }
    if (v13 == 1)
    {
      if ((int *)v11 != a2)
      {
        sub_1FAC61C(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    uint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 160 * (v15 >> 1);
    if ((unint64_t)v14 > 0x5000)
    {
      sub_1FABAEC(v11, v11 + 160 * (v15 >> 1), (uint64_t)(a2 - 40), a3);
      unint64_t v18 = 5 * v16;
      unint64_t v19 = v11 + 160 * v16 - 160;
      sub_1FABAEC(v11 + 160, v19, (uint64_t)(a2 - 80), a3);
      uint64_t v20 = v11 + 320;
      double v21 = v11 + 160 + 32 * v18;
      sub_1FABAEC(v20, v21, (uint64_t)(a2 - 120), a3);
      sub_1FABAEC(v19, v17, v21, a3);
      sub_1FAC344(a1, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1FABAEC(v11 + 160 * (v15 >> 1), v11, (uint64_t)(a2 - 40), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(a1 - 160, a1) & 1) == 0)
    {
      unint64_t v11 = sub_1FABBCC(a1, (unint64_t)a2, (uint64_t (**)(int *, unint64_t))a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v22 = sub_1FABE04(a1, (unint64_t)a2, (uint64_t (**)(uint64_t, int *))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v24 = sub_1FAC050(a1, v22, a3);
    unint64_t v11 = v22 + 160;
    if (sub_1FAC050(v22 + 160, (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = (int *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_16:
      sub_1FAB33C(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 160;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1FAB744(v11, a2, (uint64_t (**)(int *, uint64_t))a3);
  }
  else
  {
    sub_1FAB930(v11, a2, (uint64_t (**)(int *, uint64_t))a3);
  }
}

uint64_t sub_3EEB0(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a1;
  if (*(void *)a2 < *(void *)a1 || *(void *)&v4 >= *(void *)&v3 && a2[1] < a1[1])
  {
    double v5 = *a3;
    if (*(void *)a3 < *(void *)&v3)
    {
      double v6 = a3[1];
LABEL_16:
      *a1 = v5;
      *a3 = v4;
      uint64_t v16 = *((void *)a1 + 1);
      a1[1] = v6;
      *((void *)a3 + 1) = v16;
      return 1;
    }
    if (*(void *)&v3 >= *(void *)&v5)
    {
      double v6 = a3[1];
      double v10 = a2[1];
      if (v6 < v10) {
        goto LABEL_16;
      }
    }
    else
    {
      double v10 = a2[1];
    }
    *a1 = v3;
    *a2 = v4;
    double v17 = a1[1];
    a1[1] = v10;
    a2[1] = v17;
    unint64_t v18 = *(void *)a3;
    if (*(void *)a3 >= *(void *)&v4)
    {
      if (*(void *)&v4 < v18) {
        return 1;
      }
      double v19 = a3[1];
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      double v19 = a3[1];
    }
    *(void *)a2 = v18;
    *a3 = v4;
    a2[1] = v19;
    uint64_t result = 2;
    a3[1] = v17;
    return result;
  }
  unint64_t v7 = *(void *)a3;
  if (*(void *)a3 >= *(void *)&v3)
  {
    if (*(void *)&v3 < v7) {
      return 0;
    }
    double v9 = a3[1];
    double v8 = a2[1];
    if (v9 >= v8) {
      return 0;
    }
  }
  else
  {
    double v8 = a2[1];
    double v9 = a3[1];
  }
  *(void *)a2 = v7;
  *a3 = v3;
  a2[1] = v9;
  a3[1] = v8;
  unint64_t v11 = *(void *)a2;
  double v12 = *a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double v13 = a1[1];
    double v14 = a2[1];
LABEL_14:
    *(void *)a1 = v11;
    *a2 = v12;
    a1[1] = v14;
    uint64_t result = 2;
    a2[1] = v13;
    return result;
  }
  if (*(void *)&v12 >= v11)
  {
    double v14 = a2[1];
    double v13 = a1[1];
    if (v14 < v13) {
      goto LABEL_14;
    }
  }
  return 1;
}

unint64_t *sub_3F014(unint64_t *a1, double *a2)
{
  unint64_t v2 = *a1;
  double v3 = *((double *)a1 + 1);
  unint64_t v4 = *((void *)a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (double i = a1 + 2; i < (unint64_t *)a2 && v2 >= *i && (*i < v2 || v3 >= *((double *)i + 1)); i += 2)
      ;
  }
  else
  {
    double i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((double *)i + 1)));
  }
  if (i < (unint64_t *)a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *((void *)a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < (unint64_t *)a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *(void *)a2;
    do
    {
      *double i = v10;
      *(void *)a2 = v9;
      unint64_t v11 = i[2];
      i += 2;
      unint64_t v9 = v11;
      uint64_t v12 = *(i - 1);
      *(i - 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((double *)i + 1)))
      {
        unint64_t v13 = i[2];
        i += 2;
        unint64_t v9 = v13;
      }
      do
      {
        do
        {
          unint64_t v14 = *((void *)a2 - 2);
          a2 -= 2;
          unint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < (unint64_t *)a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *((double *)i - 1) = v3;
  return i;
}

double *sub_3F174(double *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  while (1)
  {
    unint64_t v5 = *(void *)&a1[v2 + 2];
    if (v5 >= *(void *)&v3 && (*(void *)&v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(void *)(a2 - 16);
      a2 -= 16;
      unint64_t v7 = v8;
    }
    while (v8 >= *(void *)&v3 && (*(void *)&v3 < v7 || *(double *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        unint64_t v10 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v9 = v10;
        if (v10 < *(void *)&v3) {
          break;
        }
        if (*(void *)&v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(double *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = (double *)v6;
  }
  else
  {
    unint64_t v12 = *(void *)a2;
    unint64_t v13 = (double *)v6;
    unint64_t v14 = (double *)a2;
    do
    {
      *(void *)unint64_t v13 = v12;
      *(void *)unint64_t v14 = v5;
      uint64_t v15 = *((void *)v13 + 1);
      v13[1] = v14[1];
      *((void *)v14 + 1) = v15;
      do
      {
        do
        {
          unint64_t v16 = *((void *)v13 + 2);
          v13 += 2;
          unint64_t v5 = v16;
        }
        while (v16 < *(void *)&v3);
      }
      while (*(void *)&v3 >= v5 && v13[1] < v4);
      do
      {
        unint64_t v17 = *((void *)v14 - 2);
        v14 -= 2;
        unint64_t v12 = v17;
      }
      while (v17 >= *(void *)&v3 && (*(void *)&v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_3F2C4(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v19 = *((void *)a2 - 2);
      double v20 = *a1;
      if (v19 < *(void *)a1)
      {
        double v21 = a1[1];
        double v22 = *(a2 - 1);
LABEL_24:
        *(void *)a1 = v19;
        *(a2 - 2) = v20;
        a1[1] = v22;
        *(a2 - 1) = v21;
        return result;
      }
      if (*(void *)&v20 >= v19)
      {
        double v22 = *(a2 - 1);
        double v21 = a1[1];
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3:
      sub_3EEB0(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_3EEB0(a1, a1 + 2, a1 + 4);
      unint64_t v23 = *((void *)a2 - 2);
      unint64_t v24 = *((void *)a1 + 4);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        double v26 = *(a2 - 1);
        double v25 = a1[5];
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        double v25 = a1[5];
        double v26 = *(a2 - 1);
      }
      *((void *)a1 + 4) = v23;
      *((void *)a2 - 2) = v24;
      a1[5] = v26;
      *(a2 - 1) = v25;
      unint64_t v27 = *((void *)a1 + 4);
      unint64_t v28 = *((void *)a1 + 2);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        double v30 = a1[5];
        double v29 = a1[3];
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        double v29 = a1[3];
        double v30 = a1[5];
      }
      *((void *)a1 + 2) = v27;
      *((void *)a1 + 4) = v28;
      a1[3] = v30;
      a1[5] = v29;
      double v31 = *a1;
      if (v27 < *(void *)a1)
      {
        double v32 = a1[1];
LABEL_46:
        *(void *)a1 = v27;
        a1[2] = v31;
        a1[1] = v30;
        BOOL result = 1;
        a1[3] = v32;
        return result;
      }
      if (*(void *)&v31 >= v27)
      {
        double v32 = a1[1];
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_3F5F4(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      return 1;
    default:
      unint64_t v6 = a1 + 4;
      sub_3EEB0(a1, a1 + 2, a1 + 4);
      unint64_t v7 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        unint64_t v11 = *(void *)v7;
        double v12 = *v6;
        if (*(void *)v7 >= *(void *)v6)
        {
          if (*(void *)&v12 < v11) {
            goto LABEL_7;
          }
          double v13 = v7[1];
          double v14 = v6[1];
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          double v13 = v7[1];
          double v14 = v6[1];
        }
        double *v7 = v12;
        v7[1] = v14;
        uint64_t v10 = (uint64_t)a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          unint64_t v17 = (double *)((char *)a1 + v15);
          unint64_t v18 = *(void *)((char *)a1 + v15 + 16);
          if (v11 < v18)
          {
            double v16 = v17[3];
LABEL_13:
            v6 -= 2;
            *((void *)v17 + 4) = v18;
            *(double *)((char *)a1 + v15 + 40) = v16;
            v15 -= 16;
            if (v15 == -32)
            {
              uint64_t v10 = (uint64_t)a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          double v16 = *(double *)((char *)a1 + v15 + 24);
          if (v13 >= v16)
          {
            uint64_t v10 = (uint64_t)a1 + v15 + 32;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = (uint64_t)v6;
LABEL_6:
        *(void *)uint64_t v10 = v11;
        *(double *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 2 == a2;
        }
LABEL_7:
        unint64_t v6 = v7;
        v8 += 16;
        v7 += 2;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

double sub_3F5F4(double *a1, double *a2, double *a3, double *a4, uint64_t *a5)
{
  sub_3EEB0(a1, a2, a3);
  double v11 = *a4;
  double v12 = *a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (*(void *)&v12 < *(void *)&v11) {
      goto LABEL_16;
    }
    double v13 = a4[1];
    double result = a3[1];
    if (v13 >= result) {
      goto LABEL_16;
    }
  }
  else
  {
    double result = a3[1];
    double v13 = a4[1];
  }
  *a3 = v11;
  *a4 = v12;
  a3[1] = v13;
  a4[1] = result;
  double v14 = *a3;
  double v15 = *a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (*(void *)&v15 < *(void *)&v14) {
      goto LABEL_16;
    }
    double v16 = a3[1];
    double result = a2[1];
    if (v16 >= result) {
      goto LABEL_16;
    }
  }
  else
  {
    double result = a2[1];
    double v16 = a3[1];
  }
  *a2 = v14;
  *a3 = v15;
  a2[1] = v16;
  a3[1] = result;
  double v17 = *a2;
  double v18 = *a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double result = a1[1];
    double v19 = a2[1];
LABEL_7:
    *a1 = v17;
    *a2 = v18;
    a1[1] = v19;
    a2[1] = result;
    goto LABEL_16;
  }
  if (*(void *)&v18 >= *(void *)&v17)
  {
    double v19 = a2[1];
    double result = a1[1];
    if (v19 < result) {
      goto LABEL_7;
    }
  }
LABEL_16:
  unint64_t v20 = *a5;
  double v21 = *a4;
  if ((unint64_t)*a5 >= *(void *)a4)
  {
    if (*(void *)&v21 < v20) {
      return result;
    }
    double v22 = *((double *)a5 + 1);
    double result = a4[1];
    if (v22 >= result) {
      return result;
    }
  }
  else
  {
    double result = a4[1];
    double v22 = *((double *)a5 + 1);
  }
  *(void *)a4 = v20;
  *(double *)a5 = v21;
  a4[1] = v22;
  *((double *)a5 + 1) = result;
  double v23 = *a4;
  double v24 = *a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (*(void *)&v24 < *(void *)&v23) {
      return result;
    }
    double v25 = a4[1];
    double result = a3[1];
    if (v25 >= result) {
      return result;
    }
  }
  else
  {
    double result = a3[1];
    double v25 = a4[1];
  }
  *a3 = v23;
  *a4 = v24;
  a3[1] = v25;
  a4[1] = result;
  double v26 = *a3;
  double v27 = *a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (*(void *)&v27 < *(void *)&v26) {
      return result;
    }
    double v28 = a3[1];
    double result = a2[1];
    if (v28 >= result) {
      return result;
    }
  }
  else
  {
    double result = a2[1];
    double v28 = a3[1];
  }
  *a2 = v26;
  *a3 = v27;
  a2[1] = v28;
  a3[1] = result;
  double v29 = *a2;
  double v30 = *a1;
  if (*(void *)a2 < *(void *)a1)
  {
    double result = a1[1];
    double v31 = a2[1];
LABEL_24:
    *a1 = v29;
    *a2 = v30;
    a1[1] = v31;
    a2[1] = result;
    return result;
  }
  if (*(void *)&v30 >= *(void *)&v29)
  {
    double v31 = a2[1];
    double result = a1[1];
    if (v31 < result) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_3F828(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(double *)(result + 16 * v7 + 8) < *((double *)v8 + 3))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v14 = *((double *)v8 + 1);
          double v13 = *((double *)a4 + 1);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          double v13 = *((double *)a4 + 1);
          double v14 = *((double *)v8 + 1);
        }
        *a4 = v11;
        *((double *)a4 + 1) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            double v15 = (unint64_t *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              unint64_t v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(double *)(result + 16 * v7 + 8) < *((double *)v15 + 3))
              {
                v15 += 2;
                uint64_t v7 = v17;
              }
            }
            unint64_t v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            double v20 = *((double *)v15 + 1);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *uint64_t v8 = v19;
            *((double *)v8 + 1) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        double v15 = v8;
LABEL_14:
        *double v15 = v12;
        *((double *)v15 + 1) = v13;
      }
    }
  }
  return result;
}

double sub_3F974(unint64_t *a1, uint64_t a2, double result, uint64_t a4, uint64_t a5)
{
  if (a5 >= 2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = *a1;
    double result = *((double *)a1 + 1);
    uint64_t v7 = (uint64_t *)a1;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v5 + 1;
      v7 += 2 * v5 + 2;
      uint64_t v10 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a5)
      {
        unint64_t v12 = v7[2];
        if (*v7 < v12 || v12 >= *v7 && *(double *)&v8[2 * v9 + 1] < *((double *)v7 + 3))
        {
          v7 += 2;
          uint64_t v5 = v11;
        }
      }
      *uint64_t v8 = *v7;
      v8[1] = v7[1];
    }
    while (v5 <= (uint64_t)((unint64_t)(a5 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 16))
    {
LABEL_16:
      uint64_t *v7 = v6;
      *((double *)v7 + 1) = result;
      return result;
    }
    uint64_t *v7 = *(void *)(a2 - 16);
    v7[1] = *(void *)(a2 - 8);
    *(void *)(a2 - 16) = v6;
    *(double *)(a2 - 8) = result;
    uint64_t v13 = (char *)v7 - (char *)a1 + 16;
    if (v13 < 17) {
      return result;
    }
    unint64_t v14 = ((unint64_t)v13 >> 4) - 2;
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = (uint64_t *)&a1[2 * (v14 >> 1)];
    unint64_t v17 = *v16;
    unint64_t v6 = *v7;
    if (*v16 < (unint64_t)*v7)
    {
      double result = *((double *)v7 + 1);
      double v18 = *((double *)v16 + 1);
LABEL_14:
      uint64_t *v7 = v17;
      *((double *)v7 + 1) = v18;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v20 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          uint64_t v7 = (uint64_t *)&a1[2 * v15];
          unint64_t v21 = *v7;
          if (*v7 < v6)
          {
            double v19 = *((double *)v7 + 1);
          }
          else
          {
            if (v6 < v21) {
              break;
            }
            double v19 = *(double *)&a1[2 * v15 + 1];
            if (v19 >= result) {
              break;
            }
          }
          *uint64_t v16 = v21;
          *((double *)v16 + 1) = v19;
          uint64_t v16 = (uint64_t *)&a1[2 * v15];
          if (v20 <= 1) {
            goto LABEL_16;
          }
        }
      }
      uint64_t v7 = v16;
      goto LABEL_16;
    }
    if (v6 >= v17)
    {
      double v18 = *(double *)&a1[2 * v15 + 1];
      double result = *((double *)v7 + 1);
      if (v18 < result) {
        goto LABEL_14;
      }
    }
  }
  return result;
}

void sub_3FAF8(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, void **a5@<X8>, double a6@<D0>)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t v13 = v11 - v12;
  if (v13)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 2);
    unint64_t v15 = ((v14 - 1) >> 6) + 1;
    *a5 = operator new(8 * v15);
    a5[1] = 0;
    a5[2] = (void *)v15;
    sub_43284(a5, v14, 1);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
    if (v16 >= 3)
    {
      std::string __p = 0;
      int8x16_t v76 = 0;
      unsigned int v78 = 0;
      long long v77 = 0;
      if (v16 != 2)
      {
        std::string __p = operator new(4 * (v16 - 2));
        int8x16_t v76 = __p;
        long long v77 = (char *)__p + 4 * (v16 - 2);
      }
      uint64_t v17 = 0;
      uint64_t v72 = operator new(0x13D8uLL);
      float64x2_t v73 = (char *)v72;
      float64x2_t v74 = (char *)v72 + 5080;
      if (v16 - 1 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v16 - 1;
      }
      uint64_t v27 = 24;
      do
      {
        if (a4[1] > (unint64_t)(v17 + 1)
          && ((*(void *)(*a4 + (((unint64_t)(v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17
                                                                                                + 1)) & 1) != 0)
        {
          double v28 = 1.79769313e308;
        }
        else
        {
          double v28 = sub_42ADC(*a1 + v27 - 24, *a1 + v27 - 12, *a1 + v27, a3, v18, v19, *(double *)&v20, *(double *)&v21, *(double *)&v22, v23, v24, v25);
        }
        *(void *)&long long v70 = v17;
        *((void *)&v70 + 1) = v17 + 1;
        uint64_t v29 = v17 + 2;
        *(void *)&long long v71 = v17 + 2;
        *((double *)&v71 + 1) = v28;
        if (v17 >= (unint64_t)((v76 - (unsigned char *)__p) >> 2)
          || *((_DWORD *)__p + v17) == -1)
        {
          sub_433EC((uint64_t)&v72, v17, &v70);
        }
        else
        {
          *(void *)&double v18 = sub_4371C((uint64_t *)&v72, v17, (uint64_t)&v70).n128_u64[0];
        }
        v27 += 12;
        ++v17;
      }
      while (v29 != v26);
      if (!v78)
      {
LABEL_65:
        if (__p)
        {
          int8x16_t v76 = __p;
          operator delete(__p);
        }
        if (v72)
        {
          float64x2_t v73 = (char *)v72;
          operator delete(v72);
        }
        return;
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
      while (1)
      {
        double v31 = v72;
        double v32 = __p;
        double v33 = (char *)v72 + 8;
        uint64_t v34 = *((void *)v72 + 1);
        unint64_t v35 = *((void *)v72 + 2);
        uint64_t v36 = *((void *)v72 + 3);
        double v37 = *((double *)v72 + 4);
        *((_DWORD *)__p + *(unsigned int *)v72) = -1;
        unsigned int v38 = --v78;
        if (v78)
        {
          double v39 = &v31[10 * v38];
          uint64_t v40 = *v39;
          *double v31 = v40;
          long long v20 = *(_OWORD *)(v39 + 6);
          *double v33 = *(_OWORD *)(v39 + 2);
          v33[1] = v20;
          double v32 = __p;
          *((_DWORD *)__p + v40) = 0;
          unsigned int v41 = v78;
          unsigned int v42 = v78 >= 5 ? 5 : v78;
          if (v78 >= 2 && v42 >= 2)
          {
            unsigned int v43 = 0;
            unsigned int v44 = 1;
            do
            {
              uint64_t v45 = v43;
              unint64_t v46 = &v31[10 * v43];
              unint64_t v47 = (long long *)(v46 + 2);
              unint64_t v48 = *((void *)v46 + 2);
              double v49 = *((double *)v46 + 4);
              double v50 = &v31[10 * v44 + 8];
              unsigned int v43 = -1;
              do
              {
                *(void *)&long long v20 = *v50;
                BOOL v51 = *(v50 - 2) > v48;
                if (*(double *)v50 != v49) {
                  BOOL v51 = *(double *)v50 < v49;
                }
                if (v51)
                {
                  double v49 = *(double *)v50;
                  unint64_t v48 = *(v50 - 2);
                  unsigned int v43 = v44;
                }
                ++v44;
                v50 += 5;
              }
              while (v42 != v44);
              if (v43 >= v41) {
                break;
              }
              uint64_t v52 = &v31[10 * v43];
              uint64_t v53 = 40 * v45;
              int v54 = *v52;
              *uint64_t v52 = *(_DWORD *)((char *)v31 + v53);
              *(_DWORD *)((char *)v31 + v53) = v54;
              long long v55 = *(_OWORD *)(v52 + 6);
              long long v20 = *(_OWORD *)(v52 + 2);
              long long v22 = *v47;
              long long v21 = v47[1];
              *(_OWORD *)(v52 + 2) = *v47;
              *(_OWORD *)(v52 + 6) = v21;
              *unint64_t v47 = v20;
              v47[1] = v55;
              double v31 = v72;
              double v32 = __p;
              uint64_t v56 = 4 * *((unsigned int *)v72 + 10 * v43);
              uint64_t v57 = 4 * *(unsigned int *)((char *)v72 + v53);
              LODWORD(v53) = *(_DWORD *)((char *)__p + v56);
              *(_DWORD *)((char *)__p + v56) = *(_DWORD *)((char *)__p + v57);
              *(_DWORD *)&v32[v57] = v53;
              unsigned int v44 = (4 * v43) | 1;
              unsigned int v41 = v78;
              if (v44 >= v78) {
                break;
              }
              unsigned int v42 = 4 * v43 + 5;
              if (v42 >= v78) {
                unsigned int v42 = v78;
              }
            }
            while (v44 < v42);
          }
        }
        v73 -= 40;
        if (v37 > a6 && v30 <= a2) {
          goto LABEL_65;
        }
        *(void *)((char *)*a5 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v35);
        if (v34) {
          break;
        }
LABEL_57:
        uint64_t v63 = *a1;
        if (v36 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)) {
          goto LABEL_24;
        }
        unint64_t v64 = (v36 - 1);
        unint64_t v65 = __p;
        double v66 = (char *)v72 + 40 * *((unsigned int *)__p + v64);
        long long v67 = *(_OWORD *)(v66 + 24);
        long long v68 = *(_OWORD *)(v66 + 8);
        *((void *)&v70 + 1) = *((void *)v66 + 2);
        long long v71 = v67;
        *(void *)&long long v70 = v34;
        if (a4[1] > *((void *)&v70 + 1)
          && ((*(void *)(*a4 + ((*((void *)&v70 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v70)) & 1) != 0)
        {
          *((void *)&v71 + 1) = 0x7FEFFFFFFFFFFFFFLL;
          if (v64 < (v76 - (unsigned char *)__p) >> 2) {
            goto LABEL_63;
          }
        }
        else
        {
          *((void *)&v71 + 1) = sub_42ADC(v63 + 12 * v34, v63 + 12 * *((void *)&v70 + 1), v63 + 12 * v67, a3, *(double *)&v67, *(double *)&v68, *(double *)&v20, *(double *)&v21, *(double *)&v22, v23, v24, v25);
          if (v64 < (v76 - (unsigned char *)v65) >> 2)
          {
LABEL_63:
            if (v65[v64] != -1)
            {
              sub_4371C((uint64_t *)&v72, v64, (uint64_t)&v70);
              goto LABEL_24;
            }
          }
        }
        sub_433EC((uint64_t)&v72, v64, &v70);
LABEL_24:
        --v30;
        if (!v78) {
          goto LABEL_65;
        }
      }
      unint64_t v59 = (v34 - 1);
      unint64_t v60 = (char *)v72 + 40 * *(unsigned int *)&v32[4 * v59];
      long long v61 = *(_OWORD *)(v60 + 8);
      long long v62 = *(_OWORD *)(v60 + 24);
      long long v70 = v61;
      *((void *)&v71 + 1) = *((void *)&v62 + 1);
      *(void *)&long long v71 = v36;
      if (a4[1] > *((void *)&v61 + 1)
        && ((*(void *)(*a4 + ((*((void *)&v70 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v70)) & 1) != 0)
      {
        *((void *)&v71 + 1) = 0x7FEFFFFFFFFFFFFFLL;
        if (v59 >= (v76 - v32) >> 2) {
          goto LABEL_56;
        }
      }
      else
      {
        *((void *)&v71 + 1) = sub_42ADC(*a1 + 12 * v70, *a1 + 12 * *((void *)&v70 + 1), *a1 + 12 * v36, a3, *(double *)&v61, *(double *)&v62, *(double *)&v20, *(double *)&v21, *(double *)&v22, v23, v24, v25);
        if (v59 >= (v76 - v32) >> 2)
        {
LABEL_56:
          sub_433EC((uint64_t)&v72, v34 - 1, &v70);
          goto LABEL_57;
        }
      }
      if (*(_DWORD *)&v32[4 * v59] != -1)
      {
        sub_4371C((uint64_t *)&v72, v34 - 1, (uint64_t)&v70);
        goto LABEL_57;
      }
      goto LABEL_56;
    }
  }
}

void sub_400B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!*v16) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v16);
  _Unwind_Resume(exception_object);
}

void sub_4011C(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X3>, void **a4@<X8>, double a5@<D0>)
{
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v12 = v10 - v11;
  if (v12)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = v12 >> 4;
    unint64_t v14 = ((unint64_t)((v12 >> 4) - 1) >> 6) + 1;
    *a4 = operator new(8 * v14);
    a4[1] = 0;
    a4[2] = (void *)v14;
    sub_43284(a4, v13, 1);
    uint64_t v15 = a1[1] - *a1;
    if ((unint64_t)v15 >= 0x30)
    {
      std::string __p = 0;
      long long v77 = 0;
      unsigned int v79 = 0;
      unsigned int v78 = 0;
      if (((unint64_t)v15 >> 4) != 2)
      {
        std::string __p = operator new(4 * (((unint64_t)v15 >> 4) - 2));
        long long v77 = __p;
        unsigned int v78 = (char *)__p + 4 * ((unint64_t)v15 >> 4) - 8;
      }
      uint64_t v16 = 0;
      float64x2_t v73 = operator new(0x13D8uLL);
      float64x2_t v74 = (char *)v73;
      double v75 = (char *)v73 + 5080;
      if ((unint64_t)((v15 >> 4) - 1) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (v15 >> 4) - 1;
      }
      do
      {
        if (a3[1] > (unint64_t)(v16 + 1)
          && ((*(void *)(*a3 + (((unint64_t)(v16 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v16
                                                                                                + 1)) & 1) != 0)
        {
          double v18 = 1.79769313e308;
        }
        else
        {
          double v19 = (float64x2_t *)(*a1 + 16 * v16);
          int8x16_t v20 = (int8x16_t)vsubq_f64(v19[2], *v19);
          float64x2_t v21 = vmulq_f64(vsubq_f64(v19[1], *v19), (float64x2_t)vextq_s8(v20, v20, 8uLL));
          double v18 = fabs(vsubq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1)).f64[0]) * 0.5;
        }
        *(void *)&long long v71 = v16;
        *((void *)&v71 + 1) = v16 + 1;
        uint64_t v22 = v16 + 2;
        *(void *)&long long v72 = v16 + 2;
        *((double *)&v72 + 1) = v18;
        if (v16 >= (unint64_t)((v77 - (unsigned char *)__p) >> 2)
          || *((_DWORD *)__p + v16) == -1)
        {
          sub_433EC((uint64_t)&v73, v16, &v71);
        }
        else
        {
          sub_4371C((uint64_t *)&v73, v16, (uint64_t)&v71);
        }
        ++v16;
      }
      while (v22 != v17);
      if (!v79)
      {
LABEL_64:
        if (__p)
        {
          long long v77 = __p;
          operator delete(__p);
        }
        if (v73)
        {
          float64x2_t v74 = (char *)v73;
          operator delete(v73);
        }
        return;
      }
      unint64_t v23 = (a1[1] - *a1) >> 4;
      while (1)
      {
        double v24 = v73;
        double v25 = __p;
        uint64_t v26 = (char *)v73 + 8;
        uint64_t v27 = *((void *)v73 + 1);
        unint64_t v28 = *((void *)v73 + 2);
        uint64_t v29 = *((void *)v73 + 3);
        double v30 = *((double *)v73 + 4);
        *((_DWORD *)__p + *(unsigned int *)v73) = -1;
        unsigned int v31 = --v79;
        if (v79)
        {
          double v32 = &v24[10 * v31];
          uint64_t v33 = *v32;
          *double v24 = v33;
          long long v34 = *(_OWORD *)(v32 + 6);
          *uint64_t v26 = *(_OWORD *)(v32 + 2);
          v26[1] = v34;
          double v25 = __p;
          *((_DWORD *)__p + v33) = 0;
          unsigned int v35 = v79;
          unsigned int v36 = v79 >= 5 ? 5 : v79;
          if (v79 >= 2 && v36 >= 2)
          {
            unsigned int v37 = 0;
            unsigned int v38 = 1;
            do
            {
              uint64_t v39 = v37;
              uint64_t v40 = &v24[10 * v37];
              unsigned int v41 = v40 + 2;
              unint64_t v42 = *((void *)v40 + 2);
              double v43 = *((double *)v40 + 4);
              unsigned int v44 = (double *)&v24[10 * v38 + 8];
              unsigned int v37 = -1;
              do
              {
                BOOL v45 = *((void *)v44 - 2) > v42;
                if (*v44 != v43) {
                  BOOL v45 = *v44 < v43;
                }
                if (v45)
                {
                  double v43 = *v44;
                  unint64_t v42 = *((void *)v44 - 2);
                  unsigned int v37 = v38;
                }
                ++v38;
                v44 += 5;
              }
              while (v36 != v38);
              if (v37 >= v35) {
                break;
              }
              unint64_t v46 = &v24[10 * v37];
              int v47 = *v46;
              _DWORD *v46 = v24[10 * v39];
              v24[10 * v39] = v47;
              long long v48 = *(_OWORD *)(v46 + 6);
              long long v49 = *(_OWORD *)(v46 + 2);
              long long v50 = v41[1];
              *(_OWORD *)(v46 + 2) = *v41;
              *(_OWORD *)(v46 + 6) = v50;
              *unsigned int v41 = v49;
              v41[1] = v48;
              double v24 = v73;
              double v25 = __p;
              uint64_t v51 = 4 * *((unsigned int *)v73 + 10 * v37);
              uint64_t v52 = 4 * *((unsigned int *)v73 + 10 * v39);
              int v53 = *(_DWORD *)((char *)__p + v51);
              *(_DWORD *)((char *)__p + v51) = *(_DWORD *)((char *)__p + v52);
              *(_DWORD *)&v25[v52] = v53;
              unsigned int v38 = (4 * v37) | 1;
              unsigned int v35 = v79;
              if (v38 >= v79) {
                break;
              }
              unsigned int v36 = 4 * v37 + 5;
              if (v36 >= v79) {
                unsigned int v36 = v79;
              }
            }
            while (v38 < v36);
          }
        }
        v74 -= 40;
        if (v30 > a5 && v23 <= a2) {
          goto LABEL_64;
        }
        *(void *)((char *)*a4 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v28);
        if (v27) {
          break;
        }
LABEL_56:
        uint64_t v62 = *a1;
        if (v29 + 1 >= (unint64_t)((a1[1] - *a1) >> 4)) {
          goto LABEL_23;
        }
        unint64_t v63 = (v29 - 1);
        unint64_t v64 = (char *)v73 + 40 * *((unsigned int *)__p + v63);
        long long v65 = *(_OWORD *)(v64 + 24);
        *((void *)&v71 + 1) = *((void *)v64 + 2);
        long long v72 = v65;
        *(void *)&long long v71 = v27;
        uint64_t v66 = v65;
        if (a3[1] > *((void *)&v71 + 1)
          && ((*(void *)(*a3 + ((*((void *)&v71 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v71)) & 1) != 0)
        {
          *((void *)&v72 + 1) = 0x7FEFFFFFFFFFFFFFLL;
          if (v63 < (v77 - (unsigned char *)__p) >> 2) {
            goto LABEL_62;
          }
        }
        else
        {
          float64x2_t v67 = *(float64x2_t *)(v62 + 16 * v27);
          float64x2_t v68 = vsubq_f64(*(float64x2_t *)(v62 + 16 * *((void *)&v71 + 1)), v67);
          int8x16_t v69 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v62 + 16 * v66), v67);
          float64x2_t v70 = vmulq_f64(v68, (float64x2_t)vextq_s8(v69, v69, 8uLL));
          *((double *)&v72 + 1) = fabs(vsubq_f64(v70, (float64x2_t)vdupq_laneq_s64((int64x2_t)v70, 1)).f64[0]) * 0.5;
          if (v63 < (v77 - (unsigned char *)__p) >> 2)
          {
LABEL_62:
            if (*((_DWORD *)__p + v63) != -1)
            {
              sub_4371C((uint64_t *)&v73, v63, (uint64_t)&v71);
              goto LABEL_23;
            }
          }
        }
        sub_433EC((uint64_t)&v73, v63, &v71);
LABEL_23:
        --v23;
        if (!v79) {
          goto LABEL_64;
        }
      }
      unint64_t v55 = (v27 - 1);
      uint64_t v56 = (char *)v73 + 40 * *(unsigned int *)&v25[4 * v55];
      long long v57 = *(_OWORD *)(v56 + 24);
      long long v71 = *(_OWORD *)(v56 + 8);
      *((void *)&v72 + 1) = *((void *)&v57 + 1);
      *(void *)&long long v72 = v29;
      if (a3[1] > *((void *)&v71 + 1)
        && ((*(void *)(*a3 + ((*((void *)&v71 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v71)) & 1) != 0)
      {
        *((void *)&v72 + 1) = 0x7FEFFFFFFFFFFFFFLL;
        if (v55 >= (v77 - v25) >> 2) {
          goto LABEL_55;
        }
      }
      else
      {
        float64x2_t v58 = *(float64x2_t *)(*a1 + 16 * v71);
        float64x2_t v59 = vsubq_f64(*(float64x2_t *)(*a1 + 16 * *((void *)&v71 + 1)), v58);
        int8x16_t v60 = (int8x16_t)vsubq_f64(*(float64x2_t *)(*a1 + 16 * v29), v58);
        float64x2_t v61 = vmulq_f64(v59, (float64x2_t)vextq_s8(v60, v60, 8uLL));
        *((double *)&v72 + 1) = fabs(vsubq_f64(v61, (float64x2_t)vdupq_laneq_s64((int64x2_t)v61, 1)).f64[0]) * 0.5;
        if (v55 >= (v77 - v25) >> 2)
        {
LABEL_55:
          sub_433EC((uint64_t)&v73, v55, &v71);
          goto LABEL_56;
        }
      }
      if (*(_DWORD *)&v25[4 * v55] != -1)
      {
        sub_4371C((uint64_t *)&v73, v55, (uint64_t)&v71);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
}

void sub_406D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v14);
  _Unwind_Resume(exception_object);
}

void sub_40738(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X3>, void **a4@<X8>, double a5@<D0>)
{
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v12 = v10 - v11;
  if (v12)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = v12 >> 4;
    unint64_t v14 = ((unint64_t)((v12 >> 4) - 1) >> 6) + 1;
    *a4 = operator new(8 * v14);
    a4[1] = 0;
    a4[2] = (void *)v14;
    sub_43284(a4, v13, 1);
    uint64_t v15 = a1[1] - *a1;
    if ((unint64_t)v15 >= 0x30)
    {
      std::string __p = 0;
      unsigned int v79 = 0;
      unsigned int v81 = 0;
      float64x2_t v80 = 0;
      if (((unint64_t)v15 >> 4) != 2)
      {
        std::string __p = operator new(4 * (((unint64_t)v15 >> 4) - 2));
        unsigned int v79 = __p;
        float64x2_t v80 = (char *)__p + 4 * ((unint64_t)v15 >> 4) - 8;
      }
      uint64_t v16 = 0;
      double v75 = operator new(0x13D8uLL);
      int8x16_t v76 = (char *)v75;
      long long v77 = (char *)v75 + 5080;
      if ((unint64_t)((v15 >> 4) - 1) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (v15 >> 4) - 1;
      }
      do
      {
        if (a3[1] > (unint64_t)(v16 + 1)
          && ((*(void *)(*a3 + (((unint64_t)(v16 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v16
                                                                                                + 1)) & 1) != 0)
        {
          double v18 = 1.79769313e308;
        }
        else
        {
          double v19 = (int64x2_t *)(*a1 + 16 * v16);
          float64x2_t v20 = vcvtq_f64_s64(*v19);
          float64x2_t v21 = vsubq_f64(vcvtq_f64_s64(v19[1]), v20);
          int8x16_t v22 = (int8x16_t)vsubq_f64(vcvtq_f64_s64(v19[2]), v20);
          int64x2_t v23 = (int64x2_t)vmulq_f64(v21, (float64x2_t)vextq_s8(v22, v22, 8uLL));
          double v18 = fabs(vsubq_f64((float64x2_t)v23, (float64x2_t)vdupq_laneq_s64(v23, 1)).f64[0]) * 0.5;
        }
        *(void *)&long long v73 = v16;
        *((void *)&v73 + 1) = v16 + 1;
        uint64_t v24 = v16 + 2;
        *(void *)&long long v74 = v16 + 2;
        *((double *)&v74 + 1) = v18;
        if (v16 >= (unint64_t)((v79 - (unsigned char *)__p) >> 2)
          || *((_DWORD *)__p + v16) == -1)
        {
          sub_433EC((uint64_t)&v75, v16, &v73);
        }
        else
        {
          sub_4371C((uint64_t *)&v75, v16, (uint64_t)&v73);
        }
        ++v16;
      }
      while (v24 != v17);
      if (!v81)
      {
LABEL_64:
        if (__p)
        {
          unsigned int v79 = __p;
          operator delete(__p);
        }
        if (v75)
        {
          int8x16_t v76 = (char *)v75;
          operator delete(v75);
        }
        return;
      }
      unint64_t v25 = (a1[1] - *a1) >> 4;
      while (1)
      {
        uint64_t v26 = v75;
        uint64_t v27 = __p;
        unint64_t v28 = (char *)v75 + 8;
        uint64_t v29 = *((void *)v75 + 1);
        unint64_t v30 = *((void *)v75 + 2);
        uint64_t v31 = *((void *)v75 + 3);
        double v32 = *((double *)v75 + 4);
        *((_DWORD *)__p + *(unsigned int *)v75) = -1;
        unsigned int v33 = --v81;
        if (v81)
        {
          long long v34 = &v26[10 * v33];
          uint64_t v35 = *v34;
          *uint64_t v26 = v35;
          long long v36 = *(_OWORD *)(v34 + 6);
          _OWORD *v28 = *(_OWORD *)(v34 + 2);
          v28[1] = v36;
          uint64_t v27 = __p;
          *((_DWORD *)__p + v35) = 0;
          unsigned int v37 = v81;
          unsigned int v38 = v81 >= 5 ? 5 : v81;
          if (v81 >= 2 && v38 >= 2)
          {
            unsigned int v39 = 0;
            unsigned int v40 = 1;
            do
            {
              uint64_t v41 = v39;
              unint64_t v42 = &v26[10 * v39];
              double v43 = v42 + 2;
              unint64_t v44 = *((void *)v42 + 2);
              double v45 = *((double *)v42 + 4);
              unint64_t v46 = (double *)&v26[10 * v40 + 8];
              unsigned int v39 = -1;
              do
              {
                BOOL v47 = *((void *)v46 - 2) > v44;
                if (*v46 != v45) {
                  BOOL v47 = *v46 < v45;
                }
                if (v47)
                {
                  double v45 = *v46;
                  unint64_t v44 = *((void *)v46 - 2);
                  unsigned int v39 = v40;
                }
                ++v40;
                v46 += 5;
              }
              while (v38 != v40);
              if (v39 >= v37) {
                break;
              }
              long long v48 = &v26[10 * v39];
              int v49 = *v48;
              _DWORD *v48 = v26[10 * v41];
              v26[10 * v41] = v49;
              long long v50 = *(_OWORD *)(v48 + 6);
              long long v51 = *(_OWORD *)(v48 + 2);
              long long v52 = v43[1];
              *(_OWORD *)(v48 + 2) = *v43;
              *(_OWORD *)(v48 + 6) = v52;
              _OWORD *v43 = v51;
              v43[1] = v50;
              uint64_t v26 = v75;
              uint64_t v27 = __p;
              uint64_t v53 = 4 * *((unsigned int *)v75 + 10 * v39);
              uint64_t v54 = 4 * *((unsigned int *)v75 + 10 * v41);
              int v55 = *(_DWORD *)((char *)__p + v53);
              *(_DWORD *)((char *)__p + v53) = *(_DWORD *)((char *)__p + v54);
              *(_DWORD *)&v27[v54] = v55;
              unsigned int v40 = (4 * v39) | 1;
              unsigned int v37 = v81;
              if (v40 >= v81) {
                break;
              }
              unsigned int v38 = 4 * v39 + 5;
              if (v38 >= v81) {
                unsigned int v38 = v81;
              }
            }
            while (v40 < v38);
          }
        }
        v76 -= 40;
        if (v32 > a5 && v25 <= a2) {
          goto LABEL_64;
        }
        *(void *)((char *)*a4 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v30);
        if (v29) {
          break;
        }
LABEL_56:
        uint64_t v64 = *a1;
        if (v31 + 1 >= (unint64_t)((a1[1] - *a1) >> 4)) {
          goto LABEL_23;
        }
        unint64_t v65 = (v31 - 1);
        uint64_t v66 = (char *)v75 + 40 * *((unsigned int *)__p + v65);
        long long v67 = *(_OWORD *)(v66 + 24);
        *((void *)&v73 + 1) = *((void *)v66 + 2);
        long long v74 = v67;
        *(void *)&long long v73 = v29;
        uint64_t v68 = v67;
        if (a3[1] > *((void *)&v73 + 1)
          && ((*(void *)(*a3 + ((*((void *)&v73 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v73)) & 1) != 0)
        {
          *((void *)&v74 + 1) = 0x7FEFFFFFFFFFFFFFLL;
          if (v65 < (v79 - (unsigned char *)__p) >> 2) {
            goto LABEL_62;
          }
        }
        else
        {
          float64x2_t v69 = vcvtq_f64_s64(*(int64x2_t *)(v64 + 16 * v29));
          float64x2_t v70 = vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(v64 + 16 * *((void *)&v73 + 1))), v69);
          int8x16_t v71 = (int8x16_t)vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(v64 + 16 * v68)), v69);
          int64x2_t v72 = (int64x2_t)vmulq_f64(v70, (float64x2_t)vextq_s8(v71, v71, 8uLL));
          *((double *)&v74 + 1) = fabs(vsubq_f64((float64x2_t)v72, (float64x2_t)vdupq_laneq_s64(v72, 1)).f64[0]) * 0.5;
          if (v65 < (v79 - (unsigned char *)__p) >> 2)
          {
LABEL_62:
            if (*((_DWORD *)__p + v65) != -1)
            {
              sub_4371C((uint64_t *)&v75, v65, (uint64_t)&v73);
              goto LABEL_23;
            }
          }
        }
        sub_433EC((uint64_t)&v75, v65, &v73);
LABEL_23:
        --v25;
        if (!v81) {
          goto LABEL_64;
        }
      }
      unint64_t v57 = (v29 - 1);
      float64x2_t v58 = (char *)v75 + 40 * *(unsigned int *)&v27[4 * v57];
      long long v59 = *(_OWORD *)(v58 + 24);
      long long v73 = *(_OWORD *)(v58 + 8);
      *((void *)&v74 + 1) = *((void *)&v59 + 1);
      *(void *)&long long v74 = v31;
      if (a3[1] > *((void *)&v73 + 1)
        && ((*(void *)(*a3 + ((*((void *)&v73 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE8(v73)) & 1) != 0)
      {
        *((void *)&v74 + 1) = 0x7FEFFFFFFFFFFFFFLL;
        if (v57 >= (v79 - v27) >> 2) {
          goto LABEL_55;
        }
      }
      else
      {
        float64x2_t v60 = vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * v73));
        float64x2_t v61 = vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * *((void *)&v73 + 1))), v60);
        int8x16_t v62 = (int8x16_t)vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(*a1 + 16 * v31)), v60);
        int64x2_t v63 = (int64x2_t)vmulq_f64(v61, (float64x2_t)vextq_s8(v62, v62, 8uLL));
        *((double *)&v74 + 1) = fabs(vsubq_f64((float64x2_t)v63, (float64x2_t)vdupq_laneq_s64(v63, 1)).f64[0]) * 0.5;
        if (v57 >= (v79 - v27) >> 2)
        {
LABEL_55:
          sub_433EC((uint64_t)&v75, v57, &v73);
          goto LABEL_56;
        }
      }
      if (*(_DWORD *)&v27[4 * v57] != -1)
      {
        sub_4371C((uint64_t *)&v75, v57, (uint64_t)&v73);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
}

void sub_40D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v14);
  _Unwind_Resume(exception_object);
}

void sub_40D78(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, void **a4@<X8>, double a5@<D0>)
{
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v9 = v8 - v7;
  if (v9 < 0) {
    sub_2E00();
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 2);
  unint64_t v14 = ((v13 - 1) >> 6) + 1;
  *a4 = operator new(8 * v14);
  a4[1] = 0;
  a4[2] = (void *)v14;
  sub_43284(a4, v13, 0);
  uint64_t v15 = (uint64_t *)*a4;
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  *uint64_t v15 = *(void *)*a4 | 1;
  double v86 = a4;
  *(uint64_t *)((char *)v15 + ((((unint64_t)a4[1] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*((unsigned char *)a4 + 8) - 1);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 2);
  if (v18 >= 3)
  {
    unint64_t v92 = -1;
    int v93 = 0x7FFFFFFF;
    long long v90 = 0u;
    long long v91 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_42BEC((uint64_t)__p);
    unint64_t v19 = v18 - 1;
    float64x2_t v20 = (void **)v90;
    float64x2_t v21 = (void **)__p[1];
    int8x16_t v22 = (void *)(*(void *)((char *)__p[1] + (((*((void *)&v91 + 1) + (void)v91) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (BYTE8(v91) + v91));
    *int8x16_t v22 = 0;
    v22[1] = v19;
    BOOL v36 = __CFADD__(*((void *)&v91 + 1), 1);
    uint64_t v23 = ++*((void *)&v91 + 1);
    if (!v36)
    {
      while (1)
      {
        unint64_t v28 = 32 * (v90 - (unint64_t)__p[1]) - 1;
        if ((void *)v90 == __p[1]) {
          unint64_t v28 = 0;
        }
        uint64_t v29 = (unint64_t *)(*(void *)((char *)__p[1]
                                             + (((unint64_t)(v91 + v23 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v91 + v23 - 1));
        unint64_t v31 = *v29;
        unint64_t v30 = v29[1];
        *((void *)&v91 + 1) = v23 - 1;
        if (v28 - (v23 + (void)v91) + 1 >= 0x200)
        {
          operator delete(*(void **)(v90 - 8));
          *(void *)&long long v90 = v90 - 8;
        }
        double v32 = (_DWORD *)sub_413C0(a1, v31);
        uint64_t v33 = sub_413C0(a1, v30);
        unint64_t v34 = v31 + 1;
        double v35 = 0.0;
        BOOL v36 = v31 + 1 >= v30;
        unint64_t v87 = v31;
        unint64_t v88 = v30;
        if (v31 + 1 > v30) {
          unint64_t v30 = v31 + 1;
        }
        if (!v36) {
          break;
        }
LABEL_62:
        BOOL v71 = v34 >= v88 || v35 < a5;
        if (v71 || v35 < a5 * 4.0 && (uint64_t v72 = sub_413C0(a1, v34), sub_33150(v72, (unsigned int *)&v92, v73), v74 <= a5))
        {
          uint64_t v23 = *((void *)&v91 + 1);
          if (!*((void *)&v91 + 1)) {
            goto LABEL_76;
          }
        }
        else
        {
          double v75 = (void *)sub_415F0(v86, v34);
          int8x16_t v76 = (char *)__p[1];
          unint64_t v77 = 32 * (v90 - (unint64_t)__p[1]) - 1;
          BOOL v68 = (void *)v90 == __p[1];
          *v75 |= v78;
          if (v68) {
            unint64_t v79 = 0;
          }
          else {
            unint64_t v79 = v77;
          }
          uint64_t v80 = v91;
          unint64_t v81 = *((void *)&v91 + 1) + v91;
          if (v79 == *((void *)&v91 + 1) + (void)v91)
          {
            sub_42BEC((uint64_t)__p);
            int8x16_t v76 = (char *)__p[1];
            uint64_t v80 = v91;
            unint64_t v81 = *((void *)&v91 + 1) + v91;
            unint64_t v77 = 32 * (v90 - (unint64_t)__p[1]) - 1;
          }
          double v82 = (unint64_t *)(*(void *)&v76[(v81 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v81);
          unint64_t *v82 = v87;
          v82[1] = v34;
          ++*((void *)&v91 + 1);
          unint64_t v83 = v80 + *((void *)&v91 + 1);
          if (v77 == v83)
          {
            sub_42BEC((uint64_t)__p);
            int8x16_t v76 = (char *)__p[1];
            unint64_t v83 = *((void *)&v91 + 1) + v91;
          }
          double v84 = (unint64_t *)(*(void *)&v76[(v83 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v83);
          *double v84 = v34;
          v84[1] = v88;
          uint64_t v23 = *((void *)&v91 + 1) + 1;
          *((void *)&v91 + 1) = v23;
          if (!v23)
          {
LABEL_76:
            float64x2_t v21 = (void **)__p[1];
            uint64_t v24 = (void **)v90;
            *((void *)&v91 + 1) = 0;
            unint64_t v25 = v90 - (unint64_t)__p[1];
            if ((unint64_t)v90 - (unint64_t)__p[1] < 0x11) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }
        }
      }
      unsigned int v37 = (_DWORD *)v33;
      unint64_t v38 = v31 + 1;
      while (1)
      {
        unsigned int v39 = (unsigned int *)sub_413C0(a1, v38);
        LODWORD(v40) = *v32;
        LODWORD(v41) = v32[1];
        double v42 = (double)v40;
        double v43 = (double)v41;
        LODWORD(v44) = *v37;
        LODWORD(v45) = v37[1];
        double v46 = (double)v44 - v42;
        double v47 = (double)v45 - v43;
        double v48 = v46 * v46 + v47 * v47;
        double v49 = fabs(v48);
        uint64_t v50 = *v39;
        uint64_t v51 = v39[1];
        if (v48 == 0.0 || v49 < 2.22044605e-16) {
          goto LABEL_28;
        }
        double v53 = (v46 * ((double)v50 - v42) + v47 * ((double)v51 - v43)) / v48;
        if (v53 <= 0.0)
        {
          uint64_t v57 = *(void *)v32;
          uint64_t v58 = HIDWORD(*(void *)v32);
          unsigned int v59 = v32[2];
          if (!a2) {
            goto LABEL_54;
          }
          goto LABEL_49;
        }
        if (v53 >= 1.0)
        {
LABEL_28:
          uint64_t v57 = *(void *)v37;
          uint64_t v58 = HIDWORD(*(void *)v37);
          unsigned int v59 = v37[2];
          if (!a2) {
            goto LABEL_54;
          }
        }
        else
        {
          int v54 = v32[2];
          if (v54 == 0x7FFFFFFF)
          {
            BOOL v55 = 0;
            double v56 = 0.0;
          }
          else
          {
            double v60 = (double)v54;
            int v61 = v37[2];
            BOOL v68 = v61 == 0x7FFFFFFF;
            double v56 = v53 * ((double)v61 - v60) + v60;
            BOOL v55 = v61 != 0x7FFFFFFF;
            if (v68) {
              double v56 = 0.0;
            }
          }
          double v62 = v47 * v53 + v43;
          double v63 = v46 * v53 + v42;
          if (v63 < 0.0) {
            double v64 = -0.5;
          }
          else {
            double v64 = 0.5;
          }
          LODWORD(v57) = (v63 + v64);
          if (v62 < 0.0) {
            double v65 = -0.5;
          }
          else {
            double v65 = 0.5;
          }
          LODWORD(v58) = (v62 + v65);
          if (v56 < 0.0) {
            double v66 = -0.5;
          }
          else {
            double v66 = 0.5;
          }
          if (v55) {
            unsigned int v59 = (v56 + v66);
          }
          else {
            unsigned int v59 = 0x7FFFFFFF;
          }
          if (v58 >= 0xFFFFFFFE) {
            LODWORD(v58) = -2;
          }
          if (!a2) {
            goto LABEL_54;
          }
        }
LABEL_49:
        unsigned int v67 = v39[2];
        BOOL v68 = v67 == 0x7FFFFFFF || v59 == 0x7FFFFFFF;
        if (!v68)
        {
          int v69 = (int)fabs((double)(int)(v67 - v59));
          goto LABEL_55;
        }
LABEL_54:
        int v69 = 0;
LABEL_55:
        double v70 = sqrt((double)((v50 - v57) * (v50 - v57)
                          + (v51 - v58) * (v51 - (unint64_t)v58)
                          + v69 * (uint64_t)v69))
            / 100.0;
        if (v38 < a3[1])
        {
          if ((*(void *)(*a3 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38)) {
            double v70 = 1.79769313e308;
          }
          if (v70 <= v35) {
            goto LABEL_19;
          }
LABEL_61:
          unint64_t v92 = v57 | ((unint64_t)v58 << 32);
          int v93 = v59;
          unint64_t v34 = v38;
          double v35 = v70;
          goto LABEL_19;
        }
        if (v70 > v35) {
          goto LABEL_61;
        }
LABEL_19:
        if (v30 == ++v38) {
          goto LABEL_62;
        }
      }
    }
    uint64_t v24 = v20;
    *((void *)&v91 + 1) = 0;
    unint64_t v25 = (char *)v20 - (char *)v21;
    if ((unint64_t)((char *)v20 - (char *)v21) < 0x11) {
      goto LABEL_7;
    }
    do
    {
LABEL_6:
      operator delete(*v21);
      uint64_t v24 = (void **)v90;
      float64x2_t v21 = (void **)((char *)__p[1] + 8);
      __p[1] = v21;
      unint64_t v25 = v90 - (void)v21;
    }
    while ((void)v90 - (void)v21 > 0x10uLL);
LABEL_7:
    unint64_t v26 = v25 >> 3;
    if (v26 == 1)
    {
      uint64_t v27 = 128;
    }
    else
    {
      if (v26 != 2)
      {
LABEL_80:
        if (v21 != v24)
        {
          do
          {
            BOOL v85 = *v21++;
            operator delete(v85);
          }
          while (v21 != v24);
          if ((void *)v90 != __p[1]) {
            *(void *)&long long v90 = v90 + (((unint64_t)__p[1] - v90 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        return;
      }
      uint64_t v27 = 256;
    }
    *(void *)&long long v91 = v27;
    goto LABEL_80;
  }
}

void sub_41388(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_431BC((uint64_t)va);
  if (*a3) {
    operator delete(*a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_413C0(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 12 * a2;
}

void sub_41510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_415F0(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, a1[1]);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * (a2 >> 6);
}

void sub_41724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_41804(void *a1@<X0>, void *a2@<X2>, void **a3@<X8>, double a4@<D0>)
{
  long long v6 = *(_OWORD *)a1;
  uint64_t v7 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v8 = v7 - v6;
  if (v8 < 0) {
    sub_2E00();
  }
  unint64_t v11 = v8 >> 4;
  unint64_t v12 = ((unint64_t)((v8 >> 4) - 1) >> 6) + 1;
  *a3 = operator new(8 * v12);
  a3[1] = 0;
  a3[2] = (void *)v12;
  sub_43284(a3, v11, 0);
  long long v13 = (uint64_t *)*a3;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  *long long v13 = *(void *)*a3 | 1;
  BOOL v68 = a3;
  *(uint64_t *)((char *)v13 + ((((unint64_t)a3[1] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*((unsigned char *)a3 + 8) - 1);
  uint64_t v16 = v14 - v15;
  if ((unint64_t)(v14 - v15) >= 0x30)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_42BEC((uint64_t)__p);
    uint64_t v17 = (v16 >> 4) - 1;
    std::string v18 = (void **)v70;
    long long v19 = (void **)__p[1];
    std::string::size_type v20 = (void *)(*(void *)((char *)__p[1] + (((*((void *)&v71 + 1) + (void)v71) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (BYTE8(v71) + v71));
    *std::string::size_type v20 = 0;
    v20[1] = v17;
    BOOL v21 = __CFADD__(*((void *)&v71 + 1), 1);
    uint64_t v22 = ++*((void *)&v71 + 1);
    if (!v21)
    {
      double v27 = 1.79769313e308;
      double v28 = 1.79769313e308;
      while (1)
      {
        unint64_t v29 = 32 * (v70 - (unint64_t)__p[1]) - 1;
        if ((void *)v70 == __p[1]) {
          unint64_t v29 = 0;
        }
        unint64_t v30 = (unint64_t *)(*(void *)((char *)__p[1]
                                             + (((unint64_t)(v71 + v22 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v71 + v22 - 1));
        unint64_t v32 = *v30;
        unint64_t v31 = v30[1];
        *((void *)&v71 + 1) = v22 - 1;
        if (v29 - (v22 + (void)v71) + 1 >= 0x200)
        {
          operator delete(*(void **)(v70 - 8));
          *(void *)&long long v70 = v70 - 8;
        }
        uint64_t v33 = (double *)sub_41D18(a1, v32);
        uint64_t v34 = sub_41D18(a1, v31);
        unint64_t v35 = v32 + 1;
        double v36 = 0.0;
        uint64_t v37 = v32 + 1 > v31 ? v32 + 1 : v31;
        if (v32 + 1 < v31) {
          break;
        }
LABEL_36:
        BOOL v54 = v35 >= v31 || v36 < a4;
        if (v54
          || v36 < a4 * 4.0
          && (BOOL v55 = (double *)sub_41D18(a1, v35),
              sqrt((*v55 - v28) * (*v55 - v28) + (v55[1] - v27) * (v55[1] - v27)) <= a4))
        {
          uint64_t v22 = *((void *)&v71 + 1);
          if (!*((void *)&v71 + 1)) {
            goto LABEL_50;
          }
        }
        else
        {
          double v56 = (void *)sub_415F0(v68, v35);
          uint64_t v57 = (char *)__p[1];
          unint64_t v58 = 32 * (v70 - (unint64_t)__p[1]) - 1;
          BOOL v59 = (void *)v70 == __p[1];
          *v56 |= v60;
          if (v59) {
            unint64_t v61 = 0;
          }
          else {
            unint64_t v61 = v58;
          }
          uint64_t v62 = v71;
          unint64_t v63 = *((void *)&v71 + 1) + v71;
          if (v61 == *((void *)&v71 + 1) + (void)v71)
          {
            sub_42BEC((uint64_t)__p);
            uint64_t v57 = (char *)__p[1];
            uint64_t v62 = v71;
            unint64_t v63 = *((void *)&v71 + 1) + v71;
            unint64_t v58 = 32 * (v70 - (unint64_t)__p[1]) - 1;
          }
          double v64 = (unint64_t *)(*(void *)&v57[(v63 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v63);
          unint64_t *v64 = v32;
          v64[1] = v35;
          ++*((void *)&v71 + 1);
          unint64_t v65 = v62 + *((void *)&v71 + 1);
          if (v58 == v65)
          {
            sub_42BEC((uint64_t)__p);
            uint64_t v57 = (char *)__p[1];
            unint64_t v65 = *((void *)&v71 + 1) + v71;
          }
          double v66 = (unint64_t *)(*(void *)&v57[(v65 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v65);
          *double v66 = v35;
          v66[1] = v31;
          uint64_t v22 = *((void *)&v71 + 1) + 1;
          *((void *)&v71 + 1) = v22;
          if (!v22)
          {
LABEL_50:
            long long v19 = (void **)__p[1];
            uint64_t v23 = (void **)v70;
            *((void *)&v71 + 1) = 0;
            unint64_t v24 = v70 - (unint64_t)__p[1];
            if ((unint64_t)v70 - (unint64_t)__p[1] < 0x11) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }
        }
      }
      unint64_t v38 = (double *)v34;
      unint64_t v39 = v32 + 1;
      while (1)
      {
        unint64_t v40 = (double *)sub_41D18(a1, v39);
        double v42 = *v33;
        double v41 = v33[1];
        double v43 = *v38;
        double v44 = v38[1];
        double v45 = *v38 - *v33;
        double v46 = v44 - v41;
        double v47 = v45 * v45 + v46 * v46;
        double v48 = fabs(v47);
        double v49 = *v40;
        double v50 = v40[1];
        if (v47 != 0.0 && v48 >= 2.22044605e-16)
        {
          double v52 = (v45 * (v49 - v42) + v46 * (v50 - v41)) / v47;
          if (v52 <= 0.0)
          {
            double v43 = *v33;
            double v44 = v33[1];
          }
          else if (v52 < 1.0)
          {
            double v43 = v42 + v45 * v52;
            double v44 = v41 + v46 * v52;
          }
        }
        double v53 = sqrt((v49 - v43) * (v49 - v43) + (v50 - v44) * (v50 - v44));
        if (v39 < a2[1]) {
          break;
        }
        if (v53 > v36) {
          goto LABEL_35;
        }
LABEL_20:
        if (v37 == ++v39) {
          goto LABEL_36;
        }
      }
      if ((*(void *)(*a2 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39)) {
        double v53 = 1.79769313e308;
      }
      if (v53 <= v36) {
        goto LABEL_20;
      }
LABEL_35:
      unint64_t v35 = v39;
      double v28 = v43;
      double v27 = v44;
      double v36 = v53;
      goto LABEL_20;
    }
    uint64_t v23 = v18;
    *((void *)&v71 + 1) = 0;
    unint64_t v24 = (char *)v18 - (char *)v19;
    if ((unint64_t)((char *)v18 - (char *)v19) < 0x11) {
      goto LABEL_7;
    }
    do
    {
LABEL_6:
      operator delete(*v19);
      uint64_t v23 = (void **)v70;
      long long v19 = (void **)((char *)__p[1] + 8);
      __p[1] = v19;
      unint64_t v24 = v70 - (void)v19;
    }
    while ((void)v70 - (void)v19 > 0x10uLL);
LABEL_7:
    unint64_t v25 = v24 >> 3;
    if (v25 == 1)
    {
      uint64_t v26 = 128;
    }
    else
    {
      if (v25 != 2)
      {
LABEL_54:
        if (v19 != v23)
        {
          do
          {
            unsigned int v67 = *v19++;
            operator delete(v67);
          }
          while (v19 != v23);
          if ((void *)v70 != __p[1]) {
            *(void *)&long long v70 = v70 + (((unint64_t)__p[1] - v70 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        return;
      }
      uint64_t v26 = 256;
    }
    *(void *)&long long v71 = v26;
    goto LABEL_54;
  }
}

void sub_41CE0(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va, a3);
  sub_431BC((uint64_t)va);
  if (*a3) {
    operator delete(*a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_41D18(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 4);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 16 * a2;
}

void sub_41E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_41F28(void *a1@<X0>, void *a2@<X2>, void **a3@<X8>, double a4@<D0>)
{
  long long v6 = *(_OWORD *)a1;
  uint64_t v7 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v8 = v7 - v6;
  if (v8 < 0) {
    sub_2E00();
  }
  unint64_t v11 = v8 >> 4;
  unint64_t v12 = ((unint64_t)((v8 >> 4) - 1) >> 6) + 1;
  *a3 = operator new(8 * v12);
  a3[1] = 0;
  a3[2] = (void *)v12;
  sub_43284(a3, v11, 0);
  long long v13 = (uint64_t *)*a3;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  *long long v13 = *(void *)*a3 | 1;
  *(uint64_t *)((char *)v13 + ((((unint64_t)a3[1] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*((unsigned char *)a3 + 8) - 1);
  uint64_t v16 = v14 - v15;
  if ((unint64_t)(v14 - v15) >= 0x30)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_42BEC((uint64_t)__p);
    uint64_t v17 = (v16 >> 4) - 1;
    std::string v18 = (void **)v81;
    long long v19 = (void **)__p[1];
    std::string::size_type v20 = (void *)(*(void *)((char *)__p[1] + (((*((void *)&v82 + 1) + (void)v82) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (BYTE8(v82) + v82));
    *std::string::size_type v20 = 0;
    v20[1] = v17;
    BOOL v36 = __CFADD__(*((void *)&v82 + 1), 1);
    uint64_t v21 = ++*((void *)&v82 + 1);
    if (!v36)
    {
      unint64_t v77 = a3;
      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        unint64_t v28 = 32 * (v81 - (unint64_t)__p[1]) - 1;
        if ((void *)v81 == __p[1]) {
          unint64_t v28 = 0;
        }
        unint64_t v29 = (unint64_t *)(*(void *)((char *)__p[1]
                                             + (((unint64_t)(v82 + v21 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (v82 + v21 - 1));
        unint64_t v31 = *v29;
        unint64_t v30 = v29[1];
        *((void *)&v82 + 1) = v21 - 1;
        if (v28 - (v21 + (void)v82) + 1 >= 0x200)
        {
          operator delete(*(void **)(v81 - 8));
          *(void *)&long long v81 = v81 - 8;
        }
        unint64_t v32 = (uint64_t *)sub_424C8(a1, v31);
        uint64_t v33 = sub_424C8(a1, v30);
        unint64_t v34 = v31 + 1;
        double v35 = 0.0;
        BOOL v36 = v31 + 1 >= v30;
        unint64_t v78 = v31;
        unint64_t v79 = v30;
        if (v31 + 1 > v30) {
          unint64_t v30 = v31 + 1;
        }
        if (!v36) {
          break;
        }
LABEL_43:
        BOOL v62 = v34 >= v79 || v35 < a4;
        if (v62
          || v35 < a4 * 4.0
          && (unint64_t v63 = (uint64_t *)sub_424C8(a1, v34),
              double v64 = (double)v63[1] - (double)v26,
              sqrt(((double)*v63 - (double)v27) * ((double)*v63 - (double)v27) + v64 * v64) <= a4))
        {
          uint64_t v21 = *((void *)&v82 + 1);
          if (!*((void *)&v82 + 1)) {
            goto LABEL_57;
          }
        }
        else
        {
          unint64_t v65 = (void *)sub_415F0(v77, v34);
          double v66 = (char *)__p[1];
          unint64_t v67 = 32 * (v81 - (unint64_t)__p[1]) - 1;
          BOOL v68 = (void *)v81 == __p[1];
          *v65 |= v69;
          if (v68) {
            unint64_t v70 = 0;
          }
          else {
            unint64_t v70 = v67;
          }
          uint64_t v71 = v82;
          unint64_t v72 = *((void *)&v82 + 1) + v82;
          if (v70 == *((void *)&v82 + 1) + (void)v82)
          {
            sub_42BEC((uint64_t)__p);
            double v66 = (char *)__p[1];
            uint64_t v71 = v82;
            unint64_t v72 = *((void *)&v82 + 1) + v82;
            unint64_t v67 = 32 * (v81 - (unint64_t)__p[1]) - 1;
          }
          double v73 = (unint64_t *)(*(void *)&v66[(v72 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v72);
          *double v73 = v78;
          v73[1] = v34;
          ++*((void *)&v82 + 1);
          unint64_t v74 = v71 + *((void *)&v82 + 1);
          if (v67 == v74)
          {
            sub_42BEC((uint64_t)__p);
            double v66 = (char *)__p[1];
            unint64_t v74 = *((void *)&v82 + 1) + v82;
          }
          double v75 = (unint64_t *)(*(void *)&v66[(v74 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v74);
          unint64_t *v75 = v34;
          v75[1] = v79;
          uint64_t v21 = *((void *)&v82 + 1) + 1;
          *((void *)&v82 + 1) = v21;
          if (!v21)
          {
LABEL_57:
            long long v19 = (void **)__p[1];
            uint64_t v22 = (void **)v81;
            *((void *)&v82 + 1) = 0;
            unint64_t v23 = v81 - (unint64_t)__p[1];
            if ((unint64_t)v81 - (unint64_t)__p[1] < 0x11) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }
        }
      }
      uint64_t v37 = (uint64_t *)v33;
      unint64_t v38 = v31 + 1;
      while (1)
      {
        unint64_t v39 = (uint64_t *)sub_424C8(a1, v38);
        uint64_t v40 = v32[1];
        double v41 = (double)*v32;
        double v42 = (double)v40;
        uint64_t v43 = *v37;
        uint64_t v44 = v37[1];
        double v45 = (double)*v37;
        double v46 = (double)v44;
        double v47 = v45 - v41;
        double v48 = (double)v44 - (double)v40;
        double v49 = v47 * v47 + v48 * v48;
        double v50 = fabs(v49);
        uint64_t v51 = *v39;
        if (v49 == 0.0 || v50 < 2.22044605e-16)
        {
          double v53 = (double)v51;
          double v54 = (double)v39[1];
        }
        else
        {
          double v53 = (double)v51;
          double v54 = (double)v39[1];
          double v55 = (v47 * ((double)v51 - v41) + v48 * (v54 - v42)) / v49;
          if (v55 <= 0.0)
          {
            double v46 = (double)v40;
            double v45 = (double)*v32;
            uint64_t v43 = *v32;
            uint64_t v44 = v32[1];
          }
          else if (v55 < 1.0)
          {
            double v56 = v47 * v55 + v41;
            double v57 = v48 * v55 + v42;
            if (v56 < 0.0) {
              double v58 = -0.5;
            }
            else {
              double v58 = 0.5;
            }
            double v59 = v56 + v58;
            uint64_t v43 = (uint64_t)v59;
            if (v57 < 0.0) {
              double v60 = -0.5;
            }
            else {
              double v60 = 0.5;
            }
            uint64_t v44 = (uint64_t)(v57 + v60);
            double v45 = (double)(uint64_t)v59;
            double v46 = (double)v44;
          }
        }
        double v61 = sqrt((v53 - v45) * (v53 - v45) + (v54 - v46) * (v54 - v46));
        if (v38 < a2[1]) {
          break;
        }
        if (v61 > v35) {
          goto LABEL_42;
        }
LABEL_19:
        if (v30 == ++v38) {
          goto LABEL_43;
        }
      }
      if ((*(void *)(*a2 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38)) {
        double v61 = 1.79769313e308;
      }
      if (v61 <= v35) {
        goto LABEL_19;
      }
LABEL_42:
      unint64_t v34 = v38;
      uint64_t v27 = v43;
      uint64_t v26 = v44;
      double v35 = v61;
      goto LABEL_19;
    }
    uint64_t v22 = v18;
    *((void *)&v82 + 1) = 0;
    unint64_t v23 = (char *)v18 - (char *)v19;
    if ((unint64_t)((char *)v18 - (char *)v19) < 0x11) {
      goto LABEL_7;
    }
    do
    {
LABEL_6:
      operator delete(*v19);
      uint64_t v22 = (void **)v81;
      long long v19 = (void **)((char *)__p[1] + 8);
      __p[1] = v19;
      unint64_t v23 = v81 - (void)v19;
    }
    while ((void)v81 - (void)v19 > 0x10uLL);
LABEL_7:
    unint64_t v24 = v23 >> 3;
    if (v24 == 1)
    {
      uint64_t v25 = 128;
    }
    else
    {
      if (v24 != 2)
      {
LABEL_61:
        if (v19 != v22)
        {
          do
          {
            int8x16_t v76 = *v19++;
            operator delete(v76);
          }
          while (v19 != v22);
          if ((void *)v81 != __p[1]) {
            *(void *)&long long v81 = v81 + (((unint64_t)__p[1] - v81 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        return;
      }
      uint64_t v25 = 256;
    }
    *(void *)&long long v82 = v25;
    goto LABEL_61;
  }
}

void sub_4248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_431BC((uint64_t)va);
  if (*v5) {
    operator delete(*v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_424C8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 4);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 16 * a2;
}

void sub_425F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_426D8(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  if (a4 == 2)
  {
    sub_3FAF8(a1, a2, a3, a5, (void **)a6, a7);
  }
  else if (a4 == 1)
  {
    sub_40D78(a1, a3, a5, (void **)a6, a7);
  }
  else if (a4)
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
  }
  else
  {
    uint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)a6 = 0;
    uint64_t v10 = v8 - v9;
    if (v10)
    {
      if (v10 < 0) {
        sub_2E00();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
      unint64_t v12 = ((v11 - 1) >> 6) + 1;
      *(void *)a6 = operator new(8 * v12);
      *(void *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = v12;
      sub_43284((void *)a6, v11, 1);
    }
  }
}

void sub_427E8(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W3>, void *a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (a3 == 2)
  {
    sub_4011C(a1, a2, a4, (void **)a5, a6);
  }
  else if (a3 == 1)
  {
    sub_41804(a1, a4, (void **)a5, a6);
  }
  else if (a3)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
    uint64_t v9 = v7 - v8;
    if (v9)
    {
      if (v9 < 0) {
        sub_2E00();
      }
      unint64_t v10 = v9 >> 4;
      unint64_t v11 = ((unint64_t)((v9 >> 4) - 1) >> 6) + 1;
      *(void *)a5 = operator new(8 * v11);
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = v11;
      sub_43284((void *)a5, v10, 1);
    }
  }
}

void sub_428EC(uint64_t *a1, unint64_t a2, int a3, int a4, void *a5, double a6)
{
  sub_426D8(a1, a2, a3, a4, a5, (uint64_t)&__p, a6);
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 - *a1;
  if (v7 != *a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v8 / 12;
    do
    {
      if ((*(void *)((char *)__p + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11))
      {
        long long v13 = (uint64_t *)(*a1 + v9);
        uint64_t v14 = *a1 + 12 * v10++;
        uint64_t v15 = *v13;
        *(_DWORD *)(v14 + 8) = *((_DWORD *)v13 + 2);
        *(void *)uint64_t v14 = v15;
      }
      ++v11;
      v9 += 12;
    }
    while (v12 != v11);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
    if (v10 <= v16)
    {
      if (v10 < v16) {
        a1[1] = *a1 + 12 * v10;
      }
    }
    else
    {
      sub_3907C((void **)a1, v10 - v16);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_429E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_42A00(uint64_t *a1, unint64_t a2, double a3, uint64_t a4, int a5, void *a6)
{
  sub_427E8(a1, a2, a5, a6, (uint64_t)&__p, a3);
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 - *a1;
  if (v7 != *a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = v8 >> 4;
    do
    {
      if ((*(void *)((char *)__p + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
        *(_OWORD *)(*a1 + 16 * v10++) = *(_OWORD *)(*a1 + v9);
      }
      ++v11;
      v9 += 16;
    }
    while (v12 != v11);
    unint64_t v13 = (a1[1] - *a1) >> 4;
    if (v10 <= v13)
    {
      if (v10 < v13) {
        a1[1] = *a1 + 16 * v10;
      }
    }
    else
    {
      sub_43AFC((char **)a1, v10 - v13);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_42AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_42ADC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  if (!a4
    || (int v12 = *(_DWORD *)(a1 + 8), v12 == 0x7FFFFFFF)
    || (int v13 = *(_DWORD *)(a2 + 8), v13 == 0x7FFFFFFF)
    || (int v14 = *(_DWORD *)(a3 + 8), v14 == 0x7FFFFFFF))
  {
    v15.i64[0] = *(void *)a1;
    v15.i64[1] = HIDWORD(*(void *)a1);
    float64x2_t v16 = vcvtq_f64_u64(v15);
    v15.i64[0] = *(void *)a2;
    v15.i64[1] = HIDWORD(*(void *)a2);
    float64x2_t v17 = vcvtq_f64_u64(v15);
    v15.i64[0] = *(void *)a3;
    v15.i64[1] = HIDWORD(*(void *)a3);
    float64x2_t v18 = vsubq_f64(v17, v16);
    int8x16_t v19 = (int8x16_t)vsubq_f64(vcvtq_f64_u64(v15), v16);
    float64x2_t v20 = vmulq_f64(v18, (float64x2_t)vextq_s8(v19, v19, 8uLL));
    return fabs(vsubq_f64(v20, (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1)).f64[0]) * 0.5;
  }
  else
  {
    LODWORD(a5) = *(_DWORD *)a1;
    LODWORD(a6) = *(_DWORD *)(a1 + 4);
    double v22 = (double)*(unint64_t *)&a5;
    double v23 = (double)*(unint64_t *)&a6;
    LODWORD(a8) = *(_DWORD *)a2;
    LODWORD(a9) = *(_DWORD *)(a2 + 4);
    LODWORD(a11) = *(_DWORD *)a3;
    LODWORD(a12) = *(_DWORD *)(a3 + 4);
    double v24 = (double)*(unint64_t *)&a8 - v22;
    double v25 = (double)*(unint64_t *)&a9 - v23;
    double v26 = (double)v13 - (double)v12;
    double v27 = (double)*(unint64_t *)&a11 - v22;
    double v28 = (double)*(unint64_t *)&a12 - v23;
    double v29 = (double)v14 - (double)v12;
    return fabs(sqrt((v24 * v28 - v25 * v27) * (v24 * v28 - v25 * v27)+ (v26 * v27 - v29 * v24) * (v26 * v27 - v29 * v24)+ (v29 * v25 - v26 * v28) * (v29 * v25 - v26 * v28)))* 0.5;
  }
}

void sub_42BEC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    long long v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        double v35 = &v34[8 * v32];
        BOOL v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unint64_t v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              unint64_t v77 = (long long *)(v6 + 3);
              unint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64x2_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    long long v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    double v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        double v35 = &v34[8 * v43];
        BOOL v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            long long v82 = &v34[8 * v43];
            double v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              double v47 = &v35[v84];
              v7 += v84;
              BOOL v85 = (long long *)(v41 + 3);
              double v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            double v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)double v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  double v25 = (char *)operator new(8 * v24);
  double v26 = operator new(0x1000uLL);
  double v27 = &v25[8 * v21];
  double v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      double v49 = (char *)operator new(8 * v48);
      double v27 = &v49[8 * (v48 >> 2)];
      double v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      double v25 = v49;
      *(void *)double v27 = v90;
      double v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)double v27 = v26;
      double v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          double v60 = (char *)operator new(8 * v59);
          double v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          double v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          double v29 = v53;
          if (!v37)
          {
            double v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            double v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            double v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            double v64 = &v53[v68];
            unint64_t v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)double v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          double v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          double v57 = &v29[8 * (v56 >> 1)];
          double v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          double v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          double v25 = v27;
        }
      }
      else
      {
        double v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      double v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)double v27 = v26;
  double v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  double v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_4315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_43178(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_4318C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_431A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_431BC(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 256;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_43284(void *a1, unint64_t a2, int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    uint64_t v7 = (void *)(*a1 + 8 * (v4 >> 6));
    int v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v9 = (64 - v8);
        if (v9 >= a2) {
          unint64_t v10 = a2;
        }
        else {
          unint64_t v10 = v9;
        }
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        unint64_t v3 = a2 - v10;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        memset(v7, 255, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v13 = (64 - v8);
        if (v13 >= a2) {
          unint64_t v14 = a2;
        }
        else {
          unint64_t v14 = v13;
        }
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        unint64_t v3 = a2 - v14;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        bzero(v7, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

void sub_433EC(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v15 = (v10 >> 1) | 1;
      if (v15 <= v11)
      {
        if (v15 < v11)
        {
          uint64_t v9 = v8 + 4 * v15;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v11 < v16) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v10 = v9 - v8;
          unint64_t v16 = (v9 - v8) >> 2;
          if (v11 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v15 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v16 = (v9 - v8) >> 2;
        if (v11 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v16;
    }
    while (v16 <= v6);
  }
  *(_OWORD *)&v46[4] = *a3;
  *(_OWORD *)&v46[20] = a3[1];
  unint64_t v13 = *(unsigned int **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v17 = *(unsigned int **)a1;
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - *(void *)a1) >> 3);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v17) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x333333333333333) {
      unint64_t v21 = 0x666666666666666;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v22 = (char *)operator new(40 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = &v22[40 * v18];
    *(_DWORD *)uint64_t v23 = a2;
    *(_OWORD *)(v23 + 4) = *(_OWORD *)v46;
    *(_OWORD *)(v23 + 20) = *(_OWORD *)&v46[16];
    *((_DWORD *)v23 + 9) = *(_DWORD *)&v46[32];
    unint64_t v14 = v23 + 40;
    if (v13 != v17)
    {
      do
      {
        long long v24 = *(_OWORD *)(v13 - 10);
        long long v25 = *(_OWORD *)(v13 - 6);
        *((void *)v23 - 1) = *((void *)v13 - 1);
        *(_OWORD *)(v23 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
        *(_OWORD *)(v23 - 40) = v24;
        v23 -= 40;
        v13 -= 10;
      }
      while (v13 != v17);
      unint64_t v13 = *(unsigned int **)a1;
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v22[40 * v21];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *unint64_t v13 = a2;
    *(_OWORD *)(v13 + 1) = *(_OWORD *)v46;
    *(_OWORD *)(v13 + 5) = *(_OWORD *)&v46[16];
    v13[9] = *(_DWORD *)&v46[32];
    unint64_t v14 = v13 + 10;
  }
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v26 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v26 + 1;
  if (v26)
  {
    double v27 = *(unsigned int **)a1;
    do
    {
      unsigned int v28 = v26 - 1;
      uint64_t v29 = (v26 - 1) >> 2;
      unint64_t v30 = (double *)&v27[10 * v29];
      double v31 = v30[4];
      unint64_t v32 = (double *)&v27[10 * v26];
      double v33 = v32[4];
      BOOL v34 = *((void *)v30 + 2) > *((void *)v32 + 2);
      if (v31 != v33) {
        BOOL v34 = v31 < v33;
      }
      if (v34) {
        break;
      }
      uint64_t v35 = 10 * v26;
      BOOL v36 = &v27[v35];
      BOOL v37 = &v27[10 * v29];
      unsigned int v38 = *v36;
      *BOOL v36 = *v37;
      *BOOL v37 = v38;
      long long v39 = *(_OWORD *)(v36 + 6);
      long long v40 = *(_OWORD *)(v36 + 2);
      long long v41 = *(_OWORD *)(v37 + 6);
      *(_OWORD *)(v36 + 2) = *(_OWORD *)(v37 + 2);
      *(_OWORD *)(v36 + 6) = v41;
      *(_OWORD *)(v37 + 2) = v40;
      *(_OWORD *)(v37 + 6) = v39;
      double v27 = *(unsigned int **)a1;
      uint64_t v42 = *(void *)(a1 + 24);
      uint64_t v43 = 4 * *(unsigned int *)(*(void *)a1 + v35 * 4);
      uint64_t v44 = 4 * *(unsigned int *)(*(void *)a1 + 40 * v29);
      int v45 = *(_DWORD *)(v42 + v43);
      *(_DWORD *)(v42 + v43) = *(_DWORD *)(v42 + v44);
      *(_DWORD *)(v42 + v44) = v45;
      unsigned int v26 = v28 >> 2;
    }
    while (v28 > 3);
  }
}

__n128 sub_4371C(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1[3] + 4 * a2);
  uint64_t v4 = *a1 + 40 * v3;
  unint64_t v5 = *(void *)(v4 + 16);
  result.n128_u64[0] = *(void *)(v4 + 32);
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
  double v8 = *(double *)(a3 + 24);
  BOOL v9 = *(void *)(a3 + 8) > v5;
  if (v8 != result.n128_f64[0]) {
    BOOL v9 = v8 < result.n128_f64[0];
  }
  if (v9)
  {
    if (v3)
    {
      uint64_t v10 = *a1;
      do
      {
        unsigned int v11 = v3 - 1;
        uint64_t v12 = (v3 - 1) >> 2;
        uint64_t v13 = v10 + 40 * v12;
        result.n128_u64[0] = *(void *)(v13 + 32);
        uint64_t v14 = v10 + 40 * v3;
        double v15 = *(double *)(v14 + 32);
        BOOL v16 = *(void *)(v13 + 16) > *(void *)(v14 + 16);
        if (result.n128_f64[0] != v15) {
          BOOL v16 = result.n128_f64[0] < v15;
        }
        if (v16) {
          break;
        }
        uint64_t v17 = 40 * v3;
        unint64_t v18 = (int *)(v10 + v17);
        unint64_t v19 = (int *)(v10 + 40 * v12);
        int v20 = *v18;
        *unint64_t v18 = *v19;
        *unint64_t v19 = v20;
        __n128 result = *(__n128 *)(v18 + 6);
        long long v21 = *(_OWORD *)(v18 + 2);
        long long v22 = *(_OWORD *)(v19 + 6);
        *(_OWORD *)(v18 + 2) = *(_OWORD *)(v19 + 2);
        *(_OWORD *)(v18 + 6) = v22;
        *(_OWORD *)(v19 + 2) = v21;
        *(__n128 *)(v19 + 6) = result;
        uint64_t v10 = *a1;
        uint64_t v23 = a1[3];
        uint64_t v24 = 4 * *(unsigned int *)(*a1 + v17);
        uint64_t v25 = 4 * *(unsigned int *)(*a1 + 40 * v12);
        int v26 = *(_DWORD *)(v23 + v24);
        *(_DWORD *)(v23 + v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v23 + v25);
        *(_DWORD *)(v23 + v25) = v26;
        unsigned int v3 = v11 >> 2;
      }
      while (v11 >= 4);
    }
  }
  else
  {
    unsigned int v27 = (4 * v3) | 1;
    unsigned int v28 = *((_DWORD *)a1 + 12);
    if (v27 < v28)
    {
      int v29 = 4 * v3;
      do
      {
        unsigned int v30 = v29 + 5;
        if (v30 >= v28) {
          unsigned int v31 = v28;
        }
        else {
          unsigned int v31 = v30;
        }
        if (v27 >= v31) {
          break;
        }
        uint64_t v32 = *a1;
        uint64_t v33 = v3;
        uint64_t v34 = *a1 + 40 * v3;
        uint64_t v35 = (_OWORD *)(v34 + 8);
        unint64_t v36 = *(void *)(v34 + 16);
        result.n128_u64[0] = *(void *)(v34 + 32);
        BOOL v37 = (double *)(*a1 + 40 * v27 + 32);
        unsigned int v3 = -1;
        do
        {
          BOOL v38 = *((void *)v37 - 2) > v36;
          if (*v37 != result.n128_f64[0]) {
            BOOL v38 = *v37 < result.n128_f64[0];
          }
          if (v38)
          {
            result.n128_f64[0] = *v37;
            unint64_t v36 = *((void *)v37 - 2);
            unsigned int v3 = v27;
          }
          ++v27;
          v37 += 5;
        }
        while (v31 != v27);
        if (v3 >= v28) {
          break;
        }
        long long v39 = (int *)(v32 + 40 * v3);
        uint64_t v40 = 40 * v33;
        int v41 = *v39;
        *long long v39 = *(_DWORD *)(v32 + v40);
        *(_DWORD *)(v32 + v40) = v41;
        __n128 result = *(__n128 *)(v39 + 6);
        long long v42 = *(_OWORD *)(v39 + 2);
        long long v43 = v35[1];
        *(_OWORD *)(v39 + 2) = *v35;
        *(_OWORD *)(v39 + 6) = v43;
        _OWORD *v35 = v42;
        v35[1] = result;
        uint64_t v44 = a1[3];
        uint64_t v45 = 4 * *(unsigned int *)(*a1 + 40 * v3);
        uint64_t v46 = 4 * *(unsigned int *)(*a1 + v40);
        int v47 = *(_DWORD *)(v44 + v45);
        *(_DWORD *)(v44 + v45) = *(_DWORD *)(v44 + v46);
        *(_DWORD *)(v44 + v46) = v47;
        int v29 = 4 * v3;
        unsigned int v27 = (4 * v3) | 1;
        unsigned int v28 = *((_DWORD *)a1 + 12);
      }
      while (v27 < v28);
    }
  }
  return result;
}

void sub_4394C(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      unint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    long long v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_188D718();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    BOOL v16 = &v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[4 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *long long v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_43AFC(char **a1, size_t __len)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (__len <= (v4 - v5) >> 4)
  {
    if (__len)
    {
      size_t v12 = 16 * __len;
      memset_pattern16(a1[1], &unk_20B8FA0, 16 * __len);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + __len;
    if ((v7 + __len) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_188D718();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * __len;
    size_t v15 = &v11[16 * v10];
    memset_pattern16(v13, &unk_20B8FA0, v14);
    BOOL v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

double sub_43C48(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a1[1];
  double v5 = a3[1];
  double v6 = *a2 - *a1 - (*a4 - *a3);
  double v7 = a2[1] - v4 - (a4[1] - v5);
  double v8 = v6 * v6 + v7 * v7;
  double v9 = *a1 - *a3;
  double v10 = v4 - v5;
  double v11 = v9 * v6 + (v4 - v5) * v7 + v9 * v6 + (v4 - v5) * v7;
  if (v8 == 0.0)
  {
    double v15 = 1.0;
    if (v11 < 0.0) {
      double v15 = 0.0;
    }
  }
  else
  {
    double v12 = -v11 / (v8 + v8);
    double v13 = 1.0;
    if (v12 <= 1.0) {
      double v13 = -v11 / (v8 + v8);
    }
    BOOL v14 = v12 < 0.0;
    double v15 = 0.0;
    if (!v14) {
      double v15 = v13;
    }
  }
  return sqrt(v9 * v9 + v10 * v10 + v11 * v15 + v8 * (v15 * v15));
}

unint64_t *sub_43D38@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = a2;
  int64_t v7 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
  if (v7 <= 0)
  {
    unint64_t v18 = *(unint64_t **)a5;
    unsigned int v19 = *(_DWORD *)(a5 + 8);
LABEL_15:
    *(void *)a6 = v18;
    *(_DWORD *)(a6 + 8) = v19;
    return result;
  }
  if (a2)
  {
    if (v7 >= (unint64_t)(64 - a2)) {
      unint64_t v8 = 64 - a2;
    }
    else {
      unint64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
    }
    v7 -= v8;
    unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
    uint64_t v10 = *(unsigned int *)(a5 + 8);
    if (v8 >= (64 - v10)) {
      unint64_t v11 = (64 - v10);
    }
    else {
      unint64_t v11 = v8;
    }
    double v12 = *(unint64_t **)a5;
    unint64_t v13 = v9 >> (a2 - v10);
    BOOL v14 = v10 >= a2;
    int v16 = v10 - a2;
    BOOL v15 = v16 != 0 && v14;
    unint64_t v17 = v9 << v16;
    if (!v15) {
      unint64_t v17 = v13;
    }
    *double v12 = **(void **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
    unint64_t v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
    *(void *)a5 = v18;
    unsigned int v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
    *(_DWORD *)(a5 + 8) = v19;
    uint64_t v20 = v8 - v11;
    if (v20 >= 1)
    {
      *unint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v6));
      *(_DWORD *)(a5 + 8) = v20;
      unsigned int v19 = v20;
    }
    ++result;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(a5 + 8);
    unint64_t v18 = *(unint64_t **)a5;
  }
  uint64_t v21 = -1 << v19;
  if (v7 >= 64)
  {
    uint64_t v22 = *v18;
    do
    {
      unint64_t v23 = v7;
      unint64_t v25 = *result++;
      unint64_t v24 = v25;
      *unint64_t v18 = v22 & ~v21 | (v25 << v19);
      unint64_t v26 = v18[1];
      ++v18;
      uint64_t v22 = v26 & v21 | (v24 >> (64 - v19));
      *unint64_t v18 = v22;
      int64_t v7 = v23 - 64;
    }
    while (v23 > 0x7F);
    *(void *)a5 = v18;
  }
  if (v7 < 1) {
    goto LABEL_15;
  }
  unint64_t v27 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
  int64_t v28 = v7 >= (unint64_t)(64 - v19) ? 64 - v19 : v7;
  *unint64_t v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v19 - v28)) & v21) | (v27 << v19);
  unint64_t v18 = (unint64_t *)((char *)v18 + (((v28 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
  *(void *)a5 = v18;
  unsigned int v19 = ((_BYTE)v19 + (_BYTE)v28) & 0x3F;
  *(_DWORD *)(a5 + 8) = v19;
  uint64_t v29 = v7 - v28;
  if (v29 < 1) {
    goto LABEL_15;
  }
  *unint64_t v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v29) | (v27 >> v28);
  *(_DWORD *)(a5 + 8) = v29;
  *(void *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v29;
  return result;
}

void sub_43F48(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  sub_30D44(a1, (double *)v24, a5);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2 == -1)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    double v11 = (double)a2;
    unsigned int v12 = a2 + 1;
    do
    {
      sub_308D8(&__p, v24, (double)v10 / v11, a4);
      uint64_t v13 = *(double *)&__p;
      LODWORD(v14) = v19;
      if (v21)
      {
        if (v14 >= 0xFFFFFFFE) {
          uint64_t v14 = 4294967294;
        }
        else {
          uint64_t v14 = v14;
        }
        uint64_t v15 = v13 | (v14 << 32);
        int v16 = 0x7FFFFFFF;
      }
      else
      {
        if (v14 >= 0xFFFFFFFE) {
          uint64_t v14 = 4294967294;
        }
        else {
          uint64_t v14 = v14;
        }
        uint64_t v15 = v13 | (v14 << 32);
        int v16 = (int)v20;
      }
      uint64_t v22 = v15;
      int v23 = v16;
      sub_30C0C((char **)a3, &v22);
      ++v10;
    }
    while (v12 != v10);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  *(double *)&std::string __p = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  sub_428EC((uint64_t *)a3, v17, 1, 1, &__p, a6);
  if (*(double *)&__p != 0.0) {
    operator delete(__p);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
}

void sub_44090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    double v19 = *(void **)v17;
    if (!*(void *)v17)
    {
LABEL_3:
      double v20 = a16;
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    double v19 = *(void **)v17;
    if (!*(void *)v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 + 8) = v19;
  operator delete(v19);
  double v20 = a16;
  if (!a16) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_440F0(double a1, double a2)
{
}

void sub_4413C(void *a1, void *a2)
{
  double v4 = (_DWORD *)sub_413C0(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) - 2);
  uint64_t v5 = a1[1];
  char v6 = (_DWORD *)*a2;
  int64_t v7 = (_DWORD *)sub_413C0(a2, 1uLL);
  int v8 = *(_DWORD *)(v5 - 12);
  unsigned int v9 = v8 - *v4;
  if (v8 == *v4)
  {
    unsigned int v10 = v4[1];
    unsigned int v11 = *(_DWORD *)(v5 - 8);
    double i = 0.0;
    if (v10 == v11) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v5 - 8);
    unsigned int v10 = v4[1];
  }
  double v13 = -(double)-v9;
  if (v9 < -v9) {
    double v13 = (double)v9;
  }
  for (double i = (atan2((double)v11 - (double)v10, v13) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
    ;
  for (; i < -180.0; double i = i + 360.0)
    ;
LABEL_11:
  if (*v7 == *v6)
  {
    unsigned int v14 = v6[1];
    unsigned int v15 = v7[1];
    double j = 0.0;
    if (v14 == v15) {
      goto LABEL_21;
    }
  }
  else
  {
    unsigned int v15 = v7[1];
    unsigned int v14 = v6[1];
  }
  double v17 = -(double)(*v6 - *v7);
  if (*v7 - *v6 < (*v6 - *v7)) {
    double v17 = (double)(*v7 - *v6);
  }
  for (double j = (atan2((double)v15 - (double)v14, v17) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
    ;
  for (; j < -180.0; double j = j + 360.0)
    ;
LABEL_21:
  fmod(vabdd_f64(i, j), 360.0);
}

void sub_443A4(uint64_t a1, uint64_t a2, void *a3)
{
  double v4 = (char *)*a3;
  unsigned int v3 = (char *)a3[1];
  uint64_t v5 = (uint64_t)&v3[-*a3];
  if (0xAAAAAAAAAAAAAAABLL * (v5 >> 2) >= 2 && a1 < a2 && v5 != 12)
  {
    double v82 = (double)a1 / 100.0;
    unint64_t v8 = 0;
    float64x2_t v78 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v76 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v77 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v75 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    double v83 = (double)a2;
    double __y = (double)a2 / 100.0;
    while (1)
    {
      unsigned int v10 = (unsigned int *)&v4[12 * v8];
      unsigned int v12 = *v10;
      unsigned int v11 = v10[1];
      unint64_t v9 = v8 + 1;
      unsigned int v13 = v10[3];
      unsigned int v14 = v10[4];
      BOOL v15 = *v10 == -1 && v11 == -1;
      unint64_t v90 = v8;
      int v86 = v10[2];
      int v87 = v10[5];
      if (!v15 && (v13 != -1 || v14 != -1)) {
        break;
      }
      uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_26:
      unsigned int v85 = v14;
      unsigned int v34 = v13;
      unsigned int v35 = vcvtmd_s64_f64((double)v33 / v83);
      double v36 = fmod((double)v33 / 100.0, __y);
      if (v36 >= v82) {
        int v37 = 0;
      }
      else {
        int v37 = -1;
      }
      long long v91 = 0;
      unint64_t v92 = 0;
      signed int v38 = v35 - (v36 < v82);
      unint64_t v88 = v9;
      uint64_t v89 = v38;
      if (v38)
      {
        if (v38 < 0) {
LABEL_96:
        }
          sub_2E00();
        unsigned int v39 = v35 - (v36 < v82);
        uint64_t v40 = (char *)operator new(12 * v38);
        long long v91 = v40;
        int v93 = &v40[12 * v39];
        double v41 = (double)(int)(v39 + 1);
        double v42 = (double)v12;
        double v43 = (double)v11;
        double v44 = (double)v34;
        BOOL v46 = v86 != 0x7FFFFFFF && v87 != 0x7FFFFFFF;
        int v47 = v35 + v37 + 1;
        int v48 = 1;
        while (1)
        {
          double v49 = (double)v48 / v41;
          double v50 = v49 * (double)v85 + (1.0 - v49) * v43;
          uint64_t v51 = (v49 * v44 + (1.0 - v49) * v42);
          if (v46)
          {
            LODWORD(v52) = v50;
            double v53 = v49 * (double)v87 + (1.0 - v49) * (double)v86;
            if (v50 >= 0xFFFFFFFE) {
              uint64_t v52 = 4294967294;
            }
            else {
              uint64_t v52 = v52;
            }
            uint64_t v54 = v51 | (v52 << 32);
            int v55 = (int)v53;
            unint64_t v56 = v93;
            if (v40 < v93) {
              goto LABEL_38;
            }
          }
          else
          {
            LODWORD(v57) = v50;
            if (v50 >= 0xFFFFFFFE) {
              uint64_t v57 = 4294967294;
            }
            else {
              uint64_t v57 = v57;
            }
            uint64_t v54 = v51 | (v57 << 32);
            int v55 = 0x7FFFFFFF;
            unint64_t v56 = v93;
            if (v40 < v93)
            {
LABEL_38:
              *(void *)uint64_t v40 = v54;
              *((_DWORD *)v40 + 2) = v55;
              v40 += 12;
              unint64_t v92 = v40;
              if (++v48 == v47) {
                goto LABEL_66;
              }
              continue;
            }
          }
          size_t v58 = v91;
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v91) >> 2) + 1;
          if (v59 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v91) >> 2);
          if (2 * v60 > v59) {
            unint64_t v59 = 2 * v60;
          }
          if (v60 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v61 = 0x1555555555555555;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            if (v61 > 0x1555555555555555) {
              sub_188D718();
            }
            int64_t v62 = (char *)operator new(12 * v61);
          }
          else
          {
            int64_t v62 = 0;
          }
          unint64_t v63 = &v62[4 * ((v40 - v91) >> 2)];
          *(void *)unint64_t v63 = v54;
          *((_DWORD *)v63 + 2) = v55;
          double v64 = v63 + 12;
          if (v40 == v91)
          {
            long long v91 = &v62[4 * ((v40 - v91) >> 2)];
            int v93 = &v62[12 * v61];
            size_t v58 = v40;
          }
          else
          {
            do
            {
              uint64_t v65 = *(void *)(v40 - 12);
              v40 -= 12;
              int v66 = *((_DWORD *)v40 + 2);
              *(void *)(v63 - 12) = v65;
              v63 -= 12;
              *((_DWORD *)v63 + 2) = v66;
            }
            while (v40 != v91);
            long long v91 = v63;
            int v93 = &v62[12 * v61];
            if (!v58)
            {
              uint64_t v40 = v64;
              unint64_t v92 = v64;
              if (++v48 == v47) {
                goto LABEL_66;
              }
              continue;
            }
          }
          operator delete(v58);
          uint64_t v40 = v64;
          unint64_t v92 = v64;
          if (++v48 == v47)
          {
LABEL_66:
            uint64_t v67 = (char **)a3;
            double v4 = (char *)*a3;
            unsigned int v3 = (char *)a3[1];
            goto LABEL_68;
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v67 = (char **)a3;
LABEL_68:
      unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 2);
      unint64_t v69 = v68 + v89;
      if (0xAAAAAAAAAAAAAAABLL * ((v67[2] - v4) >> 2) >= v68 + v89)
      {
        uint64_t v71 = v4;
      }
      else
      {
        if (v69 > 0x1555555555555555) {
          goto LABEL_96;
        }
        unint64_t v70 = (char *)operator new(12 * v69);
        uint64_t v71 = &v70[4 * ((v3 - v4) >> 2)];
        if (v3 != v4)
        {
          uint64_t v71 = &v70[4 * ((v3 - v4) >> 2)];
          do
          {
            uint64_t v72 = *(void *)(v3 - 12);
            v3 -= 12;
            int v73 = *((_DWORD *)v3 + 2);
            *(void *)(v71 - 12) = v72;
            v71 -= 12;
            *((_DWORD *)v71 + 2) = v73;
          }
          while (v3 != v4);
        }
        uint64_t v67 = (char **)a3;
        *a3 = v71;
        a3[1] = &v70[12 * v68];
        a3[2] = &v70[12 * v69];
        if (v4)
        {
          operator delete(v4);
          uint64_t v71 = (char *)*a3;
        }
      }
      sub_46C6C((uint64_t)v67, (uint64_t)&v71[12 * v90 + 12], v91, v40, 0xAAAAAAAAAAAAAAABLL * ((v40 - v91) >> 2));
      if (v91) {
        operator delete(v91);
      }
      unint64_t v9 = v88 - 0x5555555555555555 * ((v92 - v91) >> 2);
      double v4 = *v67;
      unsigned int v3 = v67[1];
LABEL_11:
      unint64_t v8 = v9;
      if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 2) - 1) {
        return;
      }
    }
    unsigned int v17 = v10[3];
    long double v18 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
    long double v19 = atan((v18 - 1.0 / v18) * 0.5) * 57.2957795 * 0.0174532925;
    v20.i64[0] = v12;
    v20.i64[1] = v17;
    long double v21 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
    long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v23 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v20), v78), v77), v76), v75);
    double v80 = vsubq_f64((float64x2_t)v23, (float64x2_t)vdupq_laneq_s64(v23, 1)).f64[0];
    long double v24 = sin((v19 - v22) * 0.5);
    long double v25 = v24 * v24;
    double v26 = cos(v19);
    long double v27 = v26 * cos(v22);
    long double v28 = sin(0.5 * v80);
    long double v29 = atan2(sqrt(v28 * v28 * v27 + v25), sqrt(1.0 - (v28 * v28 * v27 + v25)));
    double v30 = (v29 + v29) * 6372797.56 * 100.0;
    if (v30 >= 0.0)
    {
      double v31 = v30;
      if (v30 >= 4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v30 + v30) + 1;
    }
    else
    {
      double v31 = v30;
      if (v30 <= -4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v30 + v30);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v31 = (double)(v32 >> 1);
LABEL_81:
    unsigned int v13 = v17;
    if (v31 >= 9.22337204e18)
    {
      uint64_t v33 = 0x7FFFFFFFFFFFFFFELL;
      if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_11;
      }
      goto LABEL_26;
    }
    if (v30 >= 0.0)
    {
      if (v30 >= 4.50359963e15) {
        goto LABEL_92;
      }
      uint64_t v74 = (uint64_t)(v30 + v30) + 1;
    }
    else
    {
      if (v30 <= -4.50359963e15) {
        goto LABEL_92;
      }
      uint64_t v74 = (uint64_t)(v30 + v30);
      if (v74 >= 1) {
        --v74;
      }
    }
    double v30 = (double)(v74 >> 1);
LABEL_92:
    uint64_t v33 = (uint64_t)v30;
    if ((uint64_t)v30 < a2) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
}

void sub_44B04(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_44B30(unsigned int ****a1, _DWORD *a2)
{
  long long v149 = 0u;
  long long v148 = 0u;
  int v150 = 1065353216;
  unsigned int v3 = *a1;
  unint64_t v2 = a1[1];
  long double v146 = 0;
  uint64_t v147 = 0;
  unsigned int v145 = 0;
  int v117 = v2;
  uint64_t v4 = (char *)v2 - (char *)v3;
  if (v4)
  {
    uint64_t v5 = v4 >> 3;
    unint64_t v6 = 0xAAAAAAAAAAAAAAAELL * v5;
    if ((0xAAAAAAAAAAAAAAAELL * v5) >> 61) {
      sub_2E00();
    }
    size_t v7 = 0x5555555555555570 * v5;
    unsigned int v145 = (char *)operator new(0x5555555555555570 * v5);
    uint64_t v147 = (double *)&v145[8 * v6];
    bzero(v145, v7);
    long double v146 = (double *)&v145[v7];
    do
    {
      unint64_t v8 = *v3;
      unint64_t v9 = v3[1];
      unsigned int v118 = v3;
      unsigned int v120 = v9;
      while (v8 != v9)
      {
        unsigned int v11 = *v8;
        unsigned int v10 = v8[1];
        int v121 = v8;
        if (*v8 != v10)
        {
          while (1)
          {
            unsigned int v12 = *v11;
            unsigned int v14 = v146;
            unsigned int v13 = v147;
            if (v146 < v147)
            {
              *long double v146 = (double)v12;
              BOOL v15 = v14 + 1;
              goto LABEL_31;
            }
            int v16 = (double *)v145;
            uint64_t v17 = ((char *)v146 - v145) >> 3;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v19 = (char *)v147 - v145;
            if (((char *)v147 - v145) >> 2 > v18) {
              unint64_t v18 = v19 >> 2;
            }
            unint64_t v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
            if (v20) {
              break;
            }
            long double v21 = 0;
            long double v22 = (double *)(8 * v17);
            *(double *)(8 * v17) = (double)v12;
            BOOL v15 = (double *)(8 * v17 + 8);
            if (v14 != v16) {
              goto LABEL_20;
            }
LABEL_29:
            unsigned int v13 = (double *)&v21[8 * v20];
            unsigned int v145 = (char *)v22;
            long double v146 = v15;
            uint64_t v147 = v13;
            if (v16)
            {
              operator delete(v16);
              unsigned int v13 = v147;
            }
LABEL_31:
            long double v146 = v15;
            unsigned int v32 = v11[1];
            if (v15 >= v13)
            {
              unsigned int v34 = (double *)v145;
              uint64_t v35 = ((char *)v15 - v145) >> 3;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v37 = (char *)v13 - v145;
              if (v37 >> 2 > v36) {
                unint64_t v36 = v37 >> 2;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                if (v38 >> 61) {
                  sub_188D718();
                }
                unsigned int v39 = operator new(8 * v38);
                uint64_t v40 = (double *)&v39[8 * v35];
                *uint64_t v40 = (double)v32;
                uint64_t v33 = (uint64_t)(v40 + 1);
                if (v15 == v34) {
                  goto LABEL_52;
                }
LABEL_44:
                unint64_t v41 = (char *)(v15 - 1) - (char *)v34;
                if (v41 < 0x58)
                {
                  double v42 = v15;
                  goto LABEL_51;
                }
                if ((unint64_t)((char *)v34 - v39) < 0x20)
                {
                  double v42 = v15;
                  goto LABEL_51;
                }
                uint64_t v43 = (v41 >> 3) + 1;
                uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                double v42 = &v15[v44 / 0xFFFFFFFFFFFFFFF8];
                uint64_t v40 = (double *)((char *)v40 - v44);
                uint64_t v45 = &v39[8 * v35 - 16];
                BOOL v46 = v15 - 2;
                uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v48 = *(_OWORD *)v46;
                  *(v45 - 1) = *((_OWORD *)v46 - 1);
                  *uint64_t v45 = v48;
                  v45 -= 2;
                  v46 -= 4;
                  v47 -= 4;
                }
                while (v47);
                if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_51:
                    uint64_t v49 = *((void *)v42-- - 1);
                    *((void *)v40-- - 1) = v49;
                  }
                  while (v42 != v34);
                }
              }
              else
              {
                unsigned int v39 = 0;
                uint64_t v40 = (double *)(8 * v35);
                *(double *)(8 * v35) = (double)v32;
                uint64_t v33 = 8 * v35 + 8;
                if (v15 != v34) {
                  goto LABEL_44;
                }
              }
LABEL_52:
              unsigned int v145 = (char *)v40;
              long double v146 = (double *)v33;
              uint64_t v147 = (double *)&v39[8 * v38];
              if (v34) {
                operator delete(v34);
              }
              goto LABEL_54;
            }
            *BOOL v15 = (double)v32;
            uint64_t v33 = (uint64_t)(v15 + 1);
LABEL_54:
            long double v146 = (double *)v33;
            LODWORD(v50) = v11[1];
            unsigned int v51 = v11[2];
            if (v50 >= 0xFFFFFFFE) {
              uint64_t v50 = 4294967294;
            }
            else {
              uint64_t v50 = v50;
            }
            int v130 = (void *)(*v11 | (unint64_t)(v50 << 32));
            LODWORD(v131) = 0x7FFFFFFF;
            *(void *)&v151[0] = &v130;
            *((_DWORD *)sub_46EE4((uint64_t)&v148, (unsigned int *)&v130, (uint64_t)&unk_20F06E0, (void **)v151) + 7) = v51;
            v11 += 3;
            if (v11 == v10) {
              goto LABEL_6;
            }
          }
          if (v20 >> 61) {
            sub_188D718();
          }
          long double v21 = operator new(8 * v20);
          long double v22 = (double *)&v21[8 * v17];
          *long double v22 = (double)v12;
          BOOL v15 = v22 + 1;
          if (v14 == v16) {
            goto LABEL_29;
          }
LABEL_20:
          unint64_t v23 = (char *)(v14 - 1) - (char *)v16;
          if (v23 < 0x58) {
            goto LABEL_148;
          }
          if ((unint64_t)((char *)v16 - v21) < 0x20) {
            goto LABEL_148;
          }
          uint64_t v24 = (v23 >> 3) + 1;
          uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          double v26 = &v14[v25 / 0xFFFFFFFFFFFFFFF8];
          long double v22 = (double *)((char *)v22 - v25);
          long double v27 = &v21[8 * v17 - 16];
          long double v28 = v14 - 2;
          uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            _OWORD *v27 = v30;
            v27 -= 2;
            v28 -= 4;
            v29 -= 4;
          }
          while (v29);
          unsigned int v14 = v26;
          if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_148:
            do
            {
              uint64_t v31 = *((void *)v14-- - 1);
              *((void *)v22-- - 1) = v31;
            }
            while (v14 != v16);
          }
          goto LABEL_29;
        }
LABEL_6:
        unint64_t v9 = v120;
        unint64_t v8 = v121 + 3;
      }
      unsigned int v3 = v118 + 3;
    }
    while (v118 + 3 != v117);
  }
  sub_1118CC4(&v130, &v145);
  unint64_t v52 = 3 * ((((v132 - (unsigned char *)v131) >> 3) + 2) / 3uLL);
  unsigned int v119 = 0x7FFFFFFF;
  if (v52)
  {
    uint64_t v53 = 0;
    while (1)
    {
      uint64_t v54 = (uint64_t)v131 + 8 * v53;
      int v55 = (double *)(*v130 + 16 * *(void *)v54);
      double v56 = v55[1];
      uint64_t v57 = *v55;
      LODWORD(v58) = v56;
      if (v56 >= 0xFFFFFFFE) {
        uint64_t v58 = 4294967294;
      }
      else {
        uint64_t v58 = v58;
      }
      uint64_t v128 = v57 | (v58 << 32);
      int v129 = 0x7FFFFFFF;
      unint64_t v59 = (double *)(*v130 + 16 * *(void *)(v54 + 8));
      double v60 = v59[1];
      uint64_t v61 = *v59;
      LODWORD(v58) = v60;
      if (v60 >= 0xFFFFFFFE) {
        uint64_t v58 = 4294967294;
      }
      else {
        uint64_t v58 = v58;
      }
      uint64_t v126 = v61 | (v58 << 32);
      int v127 = 0x7FFFFFFF;
      int64_t v62 = (double *)(*v130 + 16 * *(void *)(v54 + 16));
      double v63 = v62[1];
      uint64_t v64 = *v62;
      LODWORD(v54) = v63;
      if (v63 >= 0xFFFFFFFE) {
        uint64_t v54 = 4294967294;
      }
      else {
        uint64_t v54 = v54;
      }
      uint64_t v124 = v64 | (v54 << 32);
      int v125 = 0x7FFFFFFF;
      if (sub_47290(&v148, (unsigned int *)&v128)
        && sub_47290(&v148, (unsigned int *)&v126)
        && sub_47290(&v148, (unsigned int *)&v124))
      {
        *(void *)&v151[0] = &v128;
        int v129 = *((_DWORD *)sub_473E8((uint64_t)&v148, (unsigned int *)&v128, (uint64_t)&unk_20F06E0, (void **)v151) + 7);
        *(void *)&v151[0] = &v126;
        int v127 = *((_DWORD *)sub_473E8((uint64_t)&v148, (unsigned int *)&v126, (uint64_t)&unk_20F06E0, (void **)v151) + 7);
        *(void *)&v151[0] = &v124;
        int v65 = *((_DWORD *)sub_473E8((uint64_t)&v148, (unsigned int *)&v124, (uint64_t)&unk_20F06E0, (void **)v151) + 7);
        *(void *)&v151[0] = v128;
        DWORD2(v151[0]) = v129;
        *(void *)((char *)v151 + 12) = v126;
        DWORD1(v151[1]) = v127;
        *((void *)&v151[1] + 1) = v124;
        int v125 = v65;
        LODWORD(v152) = v65;
        HIDWORD(v152) = v129;
        *(void *)((char *)&v152 + 4) = v128;
        int v66 = operator new(0x30uLL);
        unint64_t v154 = v66 + 3;
        unint64_t v155 = v66 + 3;
        long long v67 = v151[1];
        *int v66 = v151[0];
        v66[1] = v67;
        v66[2] = v152;
        uint64_t v153 = v66;
        sub_46968(&__p, (uint64_t)&v153, 1uLL);
        if (v153)
        {
          unint64_t v154 = v153;
          operator delete(v153);
        }
        float64x2_t v75 = __p;
        uint64_t v74 = v123;
        if (__p != v123)
        {
          int v76 = 0;
          unsigned int v77 = a2[1];
          double v78 = (double)v77;
          LODWORD(v68) = *a2;
          double v79 = (double)v68;
          double v80 = __p;
          do
          {
            uint64_t v81 = (_DWORD *)v80[1];
            double v82 = (_DWORD *)(*v80 + 12);
            if ((_DWORD *)*v80 != v81 && v82 != v81)
            {
              do
              {
                unsigned int v84 = *(v82 - 2);
                unsigned int v85 = v82[1];
                if (v84 >= v77)
                {
                  if (v85 < v77)
                  {
LABEL_91:
                    LODWORD(v69) = *v82;
                    LODWORD(v70) = *(v82 - 3);
                    double v70 = (double)*(unint64_t *)&v70;
                    double v69 = (v78 - (double)v84) / ((double)v85 - (double)v84) * ((double)*(unint64_t *)&v69 - v70)
                        + v70;
                    if (v69 < v79) {
                      v76 ^= 1u;
                    }
                  }
                }
                else if (v85 >= v77)
                {
                  goto LABEL_91;
                }
                v82 += 3;
              }
              while (v82 != v81);
            }
            v80 += 3;
          }
          while (v80 != v123);
          if (v76)
          {
            if (v129 == v127 && v127 == v125)
            {
              double v106 = (double)v129 / 100.0;
              double v105 = -1.0;
              double v102 = 0.0;
              double v104 = 0.0;
            }
            else
            {
              LODWORD(v70) = HIDWORD(v128);
              LODWORD(v69) = v128;
              double v87 = (double)*(unint64_t *)&v69;
              double v88 = (double)*(unint64_t *)&v70;
              *(double *)&unint64_t v89 = (double)v129;
              double v90 = (double)v129 / 100.0;
              LODWORD(v71) = HIDWORD(v126);
              LODWORD(v89) = v126;
              double v91 = (double)v89;
              double v92 = (double)v71;
              double v93 = (double)v127 / 100.0;
              LODWORD(v73) = HIDWORD(v124);
              LODWORD(v72) = v124;
              double v94 = (double)v72;
              double v95 = (double)v73;
              double v96 = (double)v125 / 100.0;
              double v97 = v96 * v92 - v93 * v95;
              double v98 = v96 * v91 - v93 * v94;
              double v99 = v91 * v95 - v92 * v94;
              double v100 = -1.0 / (v90 * v99 + v97 * v87 - v98 * v88);
              double v101 = v96 - v93;
              double v102 = (v90 * (v95 - v92) + v97 - v101 * v88) * v100;
              double v103 = v91 - v94;
              double v104 = (v90 * v103 + v101 * v87 - v98) * v100;
              double v105 = (v99 + (v92 - v95) * v87 - v103 * v88) * v100;
              double v106 = 1.0;
            }
            double v108 = (v106 + v102 * v79 + v104 * v78) / v105 * -100.0;
            if (v108 >= 0.0)
            {
              if (v108 >= 4.50359963e15) {
                goto LABEL_110;
              }
              uint64_t v109 = (uint64_t)(v108 + v108) + 1;
LABEL_113:
              unsigned int v119 = (int)(double)(v109 >> 1);
              int v107 = 1;
              if (__p)
              {
                do
                {
LABEL_118:
                  long double v111 = v74 - 3;
                  long double v110 = (void *)*(v74 - 3);
                  if (v110)
                  {
                    *(v74 - 2) = v110;
                    operator delete(v110);
                  }
                  uint64_t v74 = v111;
                }
                while (v111 != v75);
                long double v123 = v75;
                operator delete(__p);
                if (v107) {
                  break;
                }
                goto LABEL_115;
              }
            }
            else
            {
              if (v108 > -4.50359963e15)
              {
                uint64_t v109 = (uint64_t)(v108 + v108);
                if (v109 >= 1) {
                  --v109;
                }
                goto LABEL_113;
              }
LABEL_110:
              unsigned int v119 = (int)v108;
              int v107 = 1;
              if (__p) {
                goto LABEL_118;
              }
            }
          }
          else
          {
            int v107 = 0;
            if (__p) {
              goto LABEL_118;
            }
          }
          if (v107) {
            break;
          }
          goto LABEL_115;
        }
        if (__p)
        {
          long double v123 = __p;
          operator delete(__p);
        }
      }
LABEL_115:
      v53 += 3;
      if (v53 == v52)
      {
        unsigned int v119 = 0x7FFFFFFF;
        break;
      }
    }
  }
  if (v143)
  {
    unsigned int v144 = v143;
    operator delete(v143);
  }
  if (v141)
  {
    uint64_t v142 = v141;
    operator delete(v141);
  }
  if (v139)
  {
    int v140 = v139;
    operator delete(v139);
  }
  if (v137)
  {
    unsigned int v138 = v137;
    operator delete(v137);
  }
  if (v135)
  {
    long double v136 = v135;
    operator delete(v135);
  }
  if (v133)
  {
    long double v134 = v133;
    operator delete(v133);
  }
  if (v131)
  {
    int v132 = v131;
    operator delete(v131);
  }
  if (v145)
  {
    long double v146 = (double *)v145;
    operator delete(v145);
  }
  uint64x2_t v112 = (void *)v149;
  if ((void)v149)
  {
    do
    {
      uint64_t v113 = (void *)*v112;
      operator delete(v112);
      uint64x2_t v112 = v113;
    }
    while (v113);
  }
  uint64_t v114 = (void *)v148;
  *(void *)&long long v148 = 0;
  if (v114) {
    operator delete(v114);
  }
  return v119;
}

void sub_45568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  double v26 = (void *)v24[26];
  if (v26)
  {
    v24[27] = v26;
    operator delete(v26);
  }
  long double v27 = (void *)v24[31];
  if (v27)
  {
    do
    {
      long double v28 = (void *)*v27;
      operator delete(v27);
      long double v27 = v28;
    }
    while (v28);
  }
  uint64_t v29 = (void *)v24[29];
  v24[29] = 0;
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

double sub_455F0(char **a1, char **a2, int a3, double a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  double v5 = 0.0;
  if (v4 < 2) {
    return v5;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  if (v7 < 2) {
    return v5;
  }
  long double v136 = 0;
  unsigned int v137 = 0;
  unsigned int v138 = 0;
  if (v7 >> 61) {
    sub_2E00();
  }
  size_t v11 = v7;
  unsigned int v12 = (float64_t **)operator new(8 * v7);
  unsigned int v13 = (char *)&v12[v11];
  long double v136 = v12;
  unsigned int v138 = (char *)&v12[v11];
  bzero(v12, v11 * 8);
  unsigned int v137 = v13;
  sub_47794(&v139, v4, (uint64_t)&v136);
  if (v136)
  {
    unsigned int v137 = (char *)v136;
    operator delete(v136);
  }
  BOOL v15 = *a1;
  unsigned int v14 = a1[1];
  uint64_t v17 = *a2;
  int v16 = a2[1];
  long double v134 = 0;
  double v135 = 0;
  std::string __p = 0;
  uint64_t v18 = v16 - v17;
  if (v18)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 2);
    if (v19 >> 61) {
      sub_2E00();
    }
    std::string __p = operator new(0x5555555555555558 * (v18 >> 2));
    double v135 = (char *)__p + 8 * v19;
    bzero(__p, 8 * v19);
    long double v134 = v135;
  }
  sub_47794(&v136, 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 2), (uint64_t)&__p);
  if (__p)
  {
    long double v134 = __p;
    operator delete(__p);
  }
  long double v21 = *a1;
  long double v22 = a1[1];
  long double v134 = 0;
  double v135 = 0;
  std::string __p = 0;
  if (v22 != v21)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 2)) >> 60) {
      sub_2E00();
    }
    unint64_t v23 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v22 - v21) >> 2));
    std::string __p = v23;
    long double v134 = v23;
    double v135 = &v23[0xAAAAAAAAAAAAAAB0 * ((v22 - v21) >> 2)];
    do
    {
      v24.i64[0] = *(void *)v21;
      v24.i64[1] = HIDWORD(*(void *)v21);
      float64x2_t v131 = vcvtq_f64_u64(v24);
      unint64_t v23 = sub_478E8((char **)&__p, v23, &v131) + 16;
      v21 += 12;
    }
    while (v21 != v22);
  }
  uint64_t v25 = *a2;
  double v26 = a2[1];
  int v132 = 0;
  float64x2_t v131 = 0uLL;
  if (v26 != v25)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 2)) >> 60) {
      sub_2E00();
    }
    long double v27 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v26 - v25) >> 2));
    *(void *)&v131.f64[0] = v27;
    *(void *)&v131.f64[1] = v27;
    int v132 = &v27[0xAAAAAAAAAAAAAAB0 * ((v26 - v25) >> 2)];
    do
    {
      v28.i64[0] = *(void *)v25;
      v28.i64[1] = HIDWORD(*(void *)v25);
      *(float64x2_t *)int v129 = vcvtq_f64_u64(v28);
      long double v27 = sub_478E8((char **)&v131, v27, v129) + 16;
      v25 += 12;
    }
    while (v25 != v26);
  }
  LODWORD(v20) = *((_DWORD *)*a1 + 1);
  long double v29 = exp((double)v20 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v30 = atan((v29 - 1.0 / v29) * 0.5);
  long double v31 = cos(v30 * 57.2957795 / 180.0 * 3.14159265);
  v129[0] = 0;
  v129[1] = 0;
  uint64_t v130 = 0;
  sub_42A00((uint64_t *)&__p, (v134 - (unsigned char *)__p) >> 4, a4 / (0.00932288077 / (1.0 / v31)), 0, 1, v129);
  if (v129[0]) {
    operator delete(v129[0]);
  }
  LODWORD(v32) = *((_DWORD *)*a2 + 1);
  long double v33 = exp((double)v32 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v34 = atan((v33 - 1.0 / v33) * 0.5);
  long double v35 = cos(v34 * 57.2957795 / 180.0 * 3.14159265);
  v129[0] = 0;
  v129[1] = 0;
  uint64_t v130 = 0;
  sub_42A00((uint64_t *)&v131, (uint64_t)(*(void *)&v131.f64[1] - *(void *)&v131.f64[0]) >> 4, a4 / (0.00932288077 / (1.0 / v35)), 0, 1, v129);
  if (v129[0]) {
    operator delete(v129[0]);
  }
  uint64_t v37 = (char *)__p;
  uint64_t v38 = (v134 - (unsigned char *)__p) >> 4;
  if (v134 != __p)
  {
    char v118 = a3;
    float64_t v39 = v131.f64[0];
    uint64_t v40 = *(void *)&v131.f64[1] - *(void *)&v131.f64[0];
    if (*(void *)&v131.f64[1] == *(void *)&v131.f64[0]) {
      goto LABEL_35;
    }
    uint64_t v41 = v40 >> 4;
    if (a3)
    {
      uint64_t v42 = 0;
      unsigned int v119 = (double *)(*(void *)&v131.f64[0] + 8);
      float64x2_t v125 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      float64x2_t v126 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v124 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      double v43 = 1.0;
      float64x2_t v123 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      int v121 = (char *)__p;
      uint64_t v122 = (v134 - (unsigned char *)__p) >> 4;
      uint64_t v120 = v40 >> 4;
      do
      {
        uint64_t v44 = (double *)&v37[16 * v42];
        uint64_t v45 = v136[3 * v42];
        BOOL v46 = v119;
        do
        {
          float64_t v127 = *v44;
          unsigned int v47 = v44[1];
          if (v47 >= 0xFFFFFFFE) {
            unsigned int v47 = -2;
          }
          long long v48 = v46 - 1;
          double v49 = *v46;
          v46 += 2;
          unsigned int v50 = v49;
          if (v49 >= 0xFFFFFFFE) {
            unsigned int v51 = -2;
          }
          else {
            unsigned int v51 = v50;
          }
          long double v52 = exp(3.14159265 - (double)v47 * 6.28318531 / 4294967300.0);
          v53.f64[0] = v127;
          v53.f64[1] = *v48;
          float64x2_t v128 = v53;
          long double v54 = atan((v52 - v43 / v52) * 0.5) * 57.2957795 * 0.0174532925;
          long double v55 = exp(3.14159265 - (double)v51 * 6.28318531 / 4294967300.0);
          long double v56 = atan((v55 - 1.0 / v55) * 0.5) * 57.2957795 * 0.0174532925;
          v57.i64[0] = 0xFFFFFFFFLL;
          v57.i64[1] = 0xFFFFFFFFLL;
          int64x2_t v58 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(v128), v57)), v126), v123), v125), v124);
          v128.f64[0] = vsubq_f64((float64x2_t)v58, (float64x2_t)vdupq_laneq_s64(v58, 1)).f64[0];
          long double v59 = sin((v54 - v56) * 0.5);
          long double v60 = v59 * v59;
          double v61 = cos(v54);
          long double v62 = v61 * cos(v56);
          long double v63 = sin(0.5 * v128.f64[0]);
          long double v64 = v62 * (v63 * v63);
          double v43 = 1.0;
          v36.f64[0] = atan2(sqrt(v60 + v64), sqrt(1.0 - (v60 + v64)));
          v36.f64[0] = (v36.f64[0] + v36.f64[0]) * 6372797.56;
          *v45++ = v36.f64[0];
          --v41;
        }
        while (v41);
        ++v42;
        uint64_t v37 = v121;
        uint64_t v38 = v122;
        uint64_t v41 = v120;
      }
      while (v42 != v122);
LABEL_35:
      uint64_t v65 = *(void *)&v131.f64[1] - *(void *)&v131.f64[0];
      LOBYTE(a3) = v118;
      if (*(void *)&v131.f64[1] != *(void *)&v131.f64[0])
      {
        uint64_t v66 = 0;
        uint64_t v67 = (v65 >> 4) - 1;
        do
        {
          unint64_t v68 = v139;
          double v69 = v136;
          if (v66)
          {
            double v70 = &v139[3 * v66];
            unint64_t v71 = &v136[3 * v66];
            unint64_t v72 = (float64_t *)*(v70 - 3);
            v36.f64[0] = *v72;
            if (*v72 < **v71) {
              v36.f64[0] = **v71;
            }
            *char *v70 = *(void *)&v36.f64[0];
            if (v65 != 16)
            {
              uint64_t v73 = 0;
              do
              {
                uint64_t v74 = &v72[v73];
                v36.f64[0] = *v74;
                double v75 = v74[1];
                int v76 = (float64_t *)&(*v70)[v73];
                if (v36.f64[0] >= v75) {
                  v36.f64[0] = v75;
                }
                uint64_t v77 = (uint64_t)&(*v71)[v73];
                if (*v76 < v36.f64[0]) {
                  v36.f64[0] = *v76;
                }
                if (v36.f64[0] < *(double *)(v77 + 8)) {
                  v36.f64[0] = *(float64_t *)(v77 + 8);
                }
                v76[1] = v36.f64[0];
                ++v73;
              }
              while (v67 != v73);
            }
          }
          else
          {
            v36.f64[0] = **v136;
            **int v139 = *(void *)&v36.f64[0];
            if (v65 != 16)
            {
              uint64_t v78 = 0;
              do
              {
                while (v78 == -1)
                {
                  v36.f64[0] = **v69;
                  **unint64_t v68 = *(void *)&v36.f64[0];
                  uint64_t v78 = 0;
                  if (v65 >> 4 == 1) {
                    goto LABEL_37;
                  }
                }
                double v79 = (float64_t *)&(*v68)[v78];
                uint64_t v80 = (uint64_t)&(*v69)[v78];
                v36.f64[0] = *v79;
                if (*v79 < *(double *)(v80 + 8)) {
                  v36.f64[0] = *(float64_t *)(v80 + 8);
                }
                v79[1] = v36.f64[0];
                ++v78;
              }
              while (v67 != v78);
            }
          }
LABEL_37:
          ++v66;
        }
        while (v66 != v38);
      }
      goto LABEL_59;
    }
    uint64_t v97 = 0;
    unint64_t v98 = *(void *)&v131.f64[0] + (v40 & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      double v99 = (float64x2_t *)&v37[16 * v97];
      unint64_t v100 = (unint64_t)v136[3 * v97];
      if ((unint64_t)v40 >= 0x40)
      {
        unint64_t v101 = 0;
        unint64_t v106 = v100 + 8 * v41;
        BOOL v108 = v100 < v98 && *(void *)&v39 < v106;
        if (((unint64_t)v99 >= v106 || v100 >= (unint64_t)&v99[1]) && !v108)
        {
          float64x2_t v36 = vld1q_dup_f64(v99->f64);
          long double v110 = &v99->f64[1];
          float64x2_t v111 = vld1q_dup_f64(v110);
          uint64x2_t v112 = (float64x2_t *)(v100 + 16);
          unint64_t v113 = v41 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v114 = (const double *)(*(void *)&v39 + 32);
          do
          {
            unsigned int v115 = v114 - 4;
            float64x2x2_t v141 = vld2q_f64(v115);
            float64x2x2_t v142 = vld2q_f64(v114);
            float64x2_t v116 = vsubq_f64(v36, v141.val[0]);
            float64x2_t v117 = vsubq_f64(v36, v142.val[0]);
            v141.val[0] = vsubq_f64(v111, v141.val[1]);
            v141.val[1] = vsubq_f64(v111, v142.val[1]);
            v112[-1] = vaddq_f64(vmulq_f64(v116, v116), vmulq_f64(v141.val[0], v141.val[0]));
            *uint64x2_t v112 = vaddq_f64(vmulq_f64(v117, v117), vmulq_f64(v141.val[1], v141.val[1]));
            v114 += 8;
            v112 += 2;
            v113 -= 4;
          }
          while (v113);
          unint64_t v101 = v41 & 0xFFFFFFFFFFFFFFFCLL;
          if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        unint64_t v101 = 0;
      }
      double v102 = (float64x2_t *)(*(void *)&v39 + 16 * v101);
      unint64_t v103 = v41 - v101;
      double v104 = (void *)(v100 + 8 * v101);
      do
      {
        float64x2_t v105 = *v102++;
        float64x2_t v36 = vsubq_f64(*v99, v105);
        v36.f64[0] = vaddvq_f64(vmulq_f64(v36, v36));
        *v104++ = *(void *)&v36.f64[0];
        --v103;
      }
      while (v103);
LABEL_83:
      if (++v97 == v38) {
        goto LABEL_35;
      }
    }
  }
LABEL_59:
  float64_t v81 = v131.f64[0];
  double v5 = *(double *)((char *)v139[3 * v38 - 3] + ((uint64_t)(*(void *)&v131.f64[1] - *(void *)&v131.f64[0]) >> 1) - 8);
  if ((a3 & 1) == 0)
  {
    LODWORD(v36.f64[0]) = *((_DWORD *)*a1 + 1);
    long double v82 = exp((double)*(unint64_t *)&v36.f64[0] * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v83 = atan((v82 - 1.0 / v82) * 0.5);
    double v5 = sqrt(v5) * (0.00932288077 / (1.0 / cos(v83 * 57.2957795 / 180.0 * 3.14159265)));
  }
  if (v81 != 0.0)
  {
    v131.f64[1] = v81;
    operator delete(*(void **)&v81);
  }
  if (__p)
  {
    long double v134 = __p;
    operator delete(__p);
  }
  unsigned int v84 = (char *)v136;
  if (v136)
  {
    unsigned int v85 = v137;
    int v86 = v136;
    if (v137 != (char *)v136)
    {
      double v87 = v137;
      do
      {
        unint64_t v89 = (void *)*((void *)v87 - 3);
        v87 -= 24;
        double v88 = v89;
        if (v89)
        {
          *((void *)v85 - 2) = v88;
          operator delete(v88);
        }
        unsigned int v85 = v87;
      }
      while (v87 != v84);
      int v86 = v136;
    }
    unsigned int v137 = v84;
    operator delete(v86);
  }
  double v90 = v139;
  if (v139)
  {
    double v91 = v140;
    double v92 = v139;
    if (v140 != v139)
    {
      double v93 = v140;
      do
      {
        double v95 = *(v93 - 3);
        v93 -= 3;
        double v94 = v95;
        if (v95)
        {
          *(v91 - 2) = v94;
          operator delete(v94);
        }
        double v91 = v93;
      }
      while (v93 != v90);
      double v92 = v139;
    }
    int v140 = v90;
    operator delete(v92);
  }
  return v5;
}

void sub_45FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a37) {
    operator delete(a37);
  }
  sub_36094((void **)(v38 - 200));
  sub_36094((void **)(v38 - 176));
  _Unwind_Resume(a1);
}

void sub_4607C(double **a1, double a2, double a3)
{
  unsigned int v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (char *)v4 - (char *)*a1;
  unint64_t v6 = v5 - 32;
  if (v5 < 0x20) {
    return;
  }
  unsigned int v10 = v3 + 2;
  double v11 = 0.0;
  BOOL v12 = v3 == v4 || v10 == v4;
  double v13 = 0.0;
  if (!v12)
  {
    if (v6 >= 0x30)
    {
      uint64_t v16 = (v6 >> 4) + 1;
      uint64_t v17 = 2 * (v16 & 0x1FFFFFFFFFFFFFFCLL);
      unsigned int v14 = &v10[v17];
      BOOL v15 = &v3[v17];
      uint64_t v18 = (float64x2_t *)(v3 + 4);
      uint64_t v19 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v20 = v18[-2];
        float64x2_t v21 = v18[-1];
        float64x2_t v23 = v18[1];
        float64x2_t v22 = v18[2];
        float64x2_t v24 = *v18;
        v18 += 4;
        float64x2_t v25 = vsubq_f64(v20, v21);
        float64x2_t v26 = vsubq_f64(v21, v24);
        float64x2_t v27 = vsubq_f64(v24, v23);
        float64x2_t v28 = vsubq_f64(v23, v22);
        int64x2_t v29 = (int64x2_t)vmulq_f64(v26, v26);
        int64x2_t v30 = (int64x2_t)vmulq_f64(v25, v25);
        int64x2_t v31 = (int64x2_t)vmulq_f64(v28, v28);
        int64x2_t v32 = (int64x2_t)vmulq_f64(v27, v27);
        float64x2_t v33 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v30, v29), (float64x2_t)vzip2q_s64(v30, v29)));
        float64x2_t v34 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v32, v31), (float64x2_t)vzip2q_s64(v32, v31)));
        double v13 = v13 + v33.f64[0] + v33.f64[1] + v34.f64[0] + v34.f64[1];
        v19 -= 4;
      }
      while (v19);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v14 = v3 + 2;
      BOOL v15 = *a1;
    }
    do
    {
      double v35 = *v14;
      v14 += 2;
      double v13 = v13 + sqrt((*v15 - v35) * (*v15 - v35) + (v15[1] - v15[3]) * (v15[1] - v15[3]));
      v15 += 2;
    }
    while (v14 != v4);
  }
LABEL_12:
  double v36 = *v3;
  double v37 = v3[1];
  double v39 = v3[2];
  double v38 = v3[3];
  double v40 = v39 - *v3;
  double v41 = v38 - v37;
  double v42 = sqrt(v40 * v40 + v41 * v41);
  double v43 = 0.0;
  if (v42 != 0.0)
  {
    double v11 = v41 / v42;
    double v43 = -v40 / v42;
  }
  double v44 = v36 + v11 * a2;
  double v45 = v37 + v43 * a2;
  double *v3 = v44;
  v3[1] = v45;
  double v46 = a3 * 0.0;
  if (v3 != v4 && v10 != v4)
  {
    unsigned int v47 = v3 + 4;
    if (v3 + 4 != v4)
    {
      double v48 = sqrt((v44 - v39) * (v44 - v39) + (v45 - v38) * (v45 - v38));
      double v67 = a3 * 0.0;
      double v68 = a3;
      double v49 = v46 + a2;
      double v50 = a2;
      double v51 = v48 / v13 * a3 + (1.0 - v48 / v13) * a2;
      do
      {
        double v58 = v39;
        double v59 = v38;
        double v60 = v39 - v36;
        double v61 = v38 - v37;
        double v62 = sqrt(v60 * v60 + v61 * v61);
        double v63 = 0.0;
        double v64 = 0.0;
        if (v62 != 0.0)
        {
          double v63 = v61 / v62;
          double v64 = -v60 / v62;
        }
        double v52 = *v47;
        double v53 = v47[1];
        double v48 = v48 + sqrt((v58 - *v47) * (v58 - *v47) + (v59 - v53) * (v59 - v53));
        v72.f64[0] = v36 + v49 * v63;
        v72.f64[1] = v37 + v49 * v64;
        v71.f64[0] = v58 + v51 * v63;
        v71.f64[1] = v59 + v51 * v64;
        double v54 = sqrt((v52 - v58) * (v52 - v58) + (v53 - v59) * (v53 - v59));
        double v55 = (v53 - v59) / v54;
        double v56 = -(v52 - v58) / v54;
        if (v54 == 0.0)
        {
          double v55 = 0.0;
          double v56 = 0.0;
        }
        double v57 = v48 / v13 * v68 + (1.0 - v48 / v13) * v50;
        v70[0] = v58 + v51 * v55;
        v70[1] = v59 + v51 * v56;
        v69[0] = v52 + v57 * v55;
        v69[1] = v53 + v57 * v56;
        sub_3B7CC(&v72, &v71, v70, v69, (float64x2_t *)v47 - 1);
        double v39 = *v47;
        double v38 = v47[1];
        v47 += 2;
        double v36 = v58;
        double v37 = v59;
        double v49 = v51;
        double v51 = v57;
      }
      while (v47 != v4);
      double v40 = v39 - v58;
      double v41 = v38 - v59;
      double v42 = sqrt(v40 * v40 + v41 * v41);
      double v46 = v67;
      a3 = v68;
    }
  }
  double v65 = v46;
  if (v42 != 0.0)
  {
    double v65 = v41 / v42 * a3;
    double v46 = -v40 / v42 * a3;
  }
  uint64_t v66 = a1[1];
  *(v66 - 2) = v39 + v65;
  *(v66 - 1) = v38 + v46;
}

uint64_t sub_46408(uint64_t *a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v4 = *a1;
  unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  if (v56 < 3) {
    return 0;
  }
  double v6 = a4;
  uint64_t v7 = 0;
  uint64_t v58 = 0;
  double v8 = (double)*a2 * 0.5;
  uint64_t v9 = (uint64_t)(v8 + v8);
  double v10 = (double)((v9 + 1) >> 1);
  if (v9 >= 1) {
    --v9;
  }
  double v46 = (double)(v9 >> 1);
  double v47 = v10;
  uint64_t v54 = *a3;
  double v11 = 0.0;
  uint64_t v12 = 1;
  float64x2_t v52 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v53 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v50 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v51 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  double v13 = 0.0;
  uint64_t v57 = *a1;
  double v48 = (double)*a2 * 0.5;
  while (1)
  {
    unsigned int v14 = (unsigned int *)(v4 + 12 * v7);
    unsigned int v16 = *v14;
    unsigned int v15 = v14[1];
    unsigned int v17 = *(_DWORD *)(v4 + 12 * v12);
    if (*v14 == -1 && v15 == -1) {
      break;
    }
    unsigned int v19 = *(_DWORD *)(v4 + 12 * v12 + 4);
    if (v17 == -1 && v19 == -1) {
      break;
    }
    long double v21 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
    long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
    v23.i64[0] = v16;
    v23.i64[1] = v17;
    long double v24 = exp(3.14159265 - (double)v19 * 6.28318531 / 4294967300.0);
    long double v25 = atan((v24 - 1.0 / v24) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v26 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v53), v52), v51), v50);
    double v55 = vsubq_f64((float64x2_t)v26, (float64x2_t)vdupq_laneq_s64(v26, 1)).f64[0];
    long double v27 = sin((v22 - v25) * 0.5);
    long double v28 = v27 * v27;
    double v29 = cos(v22);
    long double v30 = v29 * cos(v25);
    long double v31 = sin(0.5 * v55);
    long double v33 = atan2(sqrt(v31 * v31 * v30 + v28), sqrt(1.0 - (v31 * v31 * v30 + v28)));
    double v34 = (v33 + v33) * 6372797.56 * 100.0;
    if (v34 >= 0.0)
    {
      double v35 = v34;
      uint64_t v4 = v57;
      double v8 = v48;
      double v6 = a4;
      if (v34 >= 4.50359963e15) {
        goto LABEL_49;
      }
      uint64_t v36 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      double v35 = v34;
      uint64_t v4 = v57;
      double v8 = v48;
      double v6 = a4;
      if (v34 <= -4.50359963e15) {
        goto LABEL_49;
      }
      uint64_t v36 = (uint64_t)(v34 + v34);
      LODWORD(v32) = v36 - 1;
      if (v36 >= 1) {
        --v36;
      }
    }
    double v35 = (double)(v36 >> 1);
LABEL_49:
    if (v35 >= 9.22337204e18)
    {
      uint64_t v37 = 0x7FFFFFFFFFFFFFFELL;
      if (v54 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_22;
      }
      goto LABEL_61;
    }
    if (v34 >= 0.0)
    {
      if (v34 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v44 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      if (v34 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v44 = (uint64_t)(v34 + v34);
      LODWORD(v32) = v44 - 1;
      if (v44 >= 1) {
        --v44;
      }
    }
    double v34 = (double)(v44 >> 1);
LABEL_60:
    uint64_t v37 = (uint64_t)v34;
    if ((uint64_t)v34 >= v54) {
      goto LABEL_22;
    }
LABEL_61:
    double i = v11;
LABEL_7:
    ++v12;
    double v11 = i;
    if (v12 == v56)
    {
      int v45 = 0;
      return v45 & v32;
    }
  }
  uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_22:
  unsigned int v38 = *(_DWORD *)(v4 + 12 * v12 + 4);
  double i = 0.0;
  if (v17 != v16 || v15 != v38)
  {
    double v41 = -(double)(v16 - v17);
    if (v17 - v16 < v16 - v17) {
      double v41 = (double)(v17 - v16);
    }
    for (double i = (atan2((double)v38 - (double)v15, v41) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
      ;
    while (i < -180.0)
      double i = i + 360.0;
  }
  if (v7)
  {
    double v42 = fmod(vabdd_f64(v11, i), 360.0);
    if (v42 > 180.0) {
      double v42 = 360.0 - v42;
    }
    double v13 = v13 + v42;
  }
  if (v13 <= v6)
  {
    if (v8 >= 0.0)
    {
      double v43 = v8;
      uint64_t v4 = v57;
      if (v8 < 4.50359963e15) {
        double v43 = v47;
      }
    }
    else
    {
      double v43 = v8;
      uint64_t v4 = v57;
      if (v8 > -4.50359963e15) {
        double v43 = v46;
      }
    }
    uint64_t v32 = v37 + v58;
    v58 += v37;
    if (v7)
    {
      uint64_t v7 = v12;
      if (v32 >= (uint64_t)v43)
      {
        LODWORD(v32) = 0;
        int v45 = 1;
        return v45 & v32;
      }
    }
    else
    {
      uint64_t v7 = v12;
    }
    goto LABEL_7;
  }
  int v45 = 1;
  LODWORD(v32) = 1;
  return v45 & v32;
}

void *sub_46968(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a3;
    uint64_t v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_46A34(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_46A08(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A63BC((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_46A34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        double v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        uint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_46B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_46B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_46B68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *sub_46BD8(void *a1)
{
  uint64_t v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

char *sub_46C6C(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 12;
  uint64_t v7 = (char *)(*(void *)a1 + 12 * v6);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = __src;
  uint64_t v12 = *(unsigned char **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 2)) < a5)
  {
    unint64_t v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 2);
    if (v13 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      unsigned int v17 = (char *)operator new(12 * v16);
    }
    else
    {
      unsigned int v17 = 0;
    }
    long double v25 = &v17[12 * v6];
    uint64_t v26 = 12 * a5;
    long double v27 = &v25[12 * a5];
    long double v28 = v25;
    do
    {
      uint64_t v29 = *(void *)v9;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v9 + 2);
      *(void *)long double v28 = v29;
      v28 += 12;
      v9 += 12;
      v26 -= 12;
    }
    while (v26);
    uint64_t v30 = 12 * v16;
    long double v31 = *(char **)a1;
    uint64_t v32 = v25;
    if (*(char **)a1 != v7)
    {
      long double v33 = v7;
      uint64_t v32 = v25;
      do
      {
        uint64_t v34 = *(void *)(v33 - 12);
        v33 -= 12;
        int v35 = *((_DWORD *)v33 + 2);
        *(void *)(v32 - 12) = v34;
        v32 -= 12;
        *((_DWORD *)v32 + 2) = v35;
      }
      while (v33 != v31);
      uint64_t v12 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v36 = &v17[v30];
    if (v12 != v7) {
      memmove(v27, v7, v12 - v7);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v12 - v7];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return v25;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 2)) >= a5)
  {
    uint64_t v18 = &__src[12 * a5];
    float64x2_t v20 = *(char **)(a1 + 8);
LABEL_18:
    long double v21 = &v7[12 * a5];
    unint64_t v22 = (unint64_t)&v20[-12 * a5];
    uint64x2_t v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      uint64x2_t v23 = v20;
      do
      {
        uint64_t v24 = *(void *)v22;
        *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
        *(void *)uint64x2_t v23 = v24;
        v23 += 12;
        v22 += 12;
      }
      while (v22 < (unint64_t)v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v7[12 * a5], v7, v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  uint64_t v18 = &__src[4 * ((v12 - v7) >> 2)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((v12 - v7) >> 2)], a4 - v18);
  }
  float64x2_t v20 = &v12[v19];
  *(void *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

uint64_t *sub_46EE4(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v8 + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v10 = (int)a2[2];
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  int64_t v19 = operator new(0x20uLL);
  *int64_t v19 = 0;
  v19[1] = v11;
  int v20 = *((_DWORD *)*a4 + 2);
  v19[2] = **a4;
  *((_DWORD *)v19 + 6) = v20;
  *((_DWORD *)v19 + 7) = 0x7FFFFFFF;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *int64_t v19 = *v24;
LABEL_63:
      *uint64_t v24 = v19;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_39;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *int64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v33 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_4727C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_47290(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v6 = (int)a2[2];
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v2) {
      unint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  __n128 result = *v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v7 == v14)
        {
          if (*((_DWORD *)result + 4) == v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v6, v4)) {
            return result;
          }
        }
        else if ((v14 & v12) != v9)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v7 == v13)
      {
        if (*((_DWORD *)result + 4) == v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v6, v4)) {
          return result;
        }
      }
      else
      {
        if (v13 >= *(void *)&v2) {
          v13 %= *(void *)&v2;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_473E8(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v8 + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v10 = (int)a2[2];
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  int64_t v19 = operator new(0x20uLL);
  *int64_t v19 = 0;
  v19[1] = v11;
  int v20 = *((_DWORD *)*a4 + 2);
  v19[2] = **a4;
  *((_DWORD *)v19 + 6) = v20;
  *((_DWORD *)v19 + 7) = 0x7FFFFFFF;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *int64_t v19 = *v24;
LABEL_63:
      *uint64_t v24 = v19;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_39;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *int64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v33 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_47780(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_47794(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a2;
    uint64_t v7 = operator new(24 * a2);
    uint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    unint64_t v9 = &v7[v6];
    a1[2] = &v7[v6];
    uint64_t v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if (v11 < 0)
      {
        void *v7 = 0;
        v7[1] = 0;
        void v7[2] = 0;
        sub_2E00();
      }
      uint64_t v12 = 24 * a2;
      do
      {
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        uint8x8_t v13 = (char *)operator new(v11);
        *uint64_t v8 = v13;
        v8[1] = v13;
        uint64_t v14 = &v13[8 * (v11 >> 3)];
        v8[2] = v14;
        memcpy(v13, v10, v11);
        v8[1] = v14;
        v8 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      bzero(v7, 24 * ((v6 * 8 - 24) / 0x18uLL) + 24);
    }
    a1[1] = v9;
  }
  return a1;
}

void sub_478B8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_478E8(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      int64_t v11 = (long long *)(v5 - 16);
      uint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)uint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    int v20 = &v18[16 * (v7 >> 4)];
    float v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  int v20 = (char *)(16 * (v7 >> 4));
  float v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      int v20 = &v24[16 * (v23 >> 2)];
      float v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)int v20 = *a3;
  BOOL v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    unint64_t v27 = v20;
    do
    {
      BOOL v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  long double v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  uint8x8_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_47B1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_47B34(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3 = a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2) < 3) {
    return v3;
  }
  unint64_t v5 = sub_48670(a1, a2);
  uint64_t v6 = (_DWORD *)sub_413C0(a2, v5);
  uint64_t v122 = 0;
  float64x2_t v123 = 0;
  float64x2_t v124 = 0;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 2);
  unint64_t v10 = v9 - 1;
  if (v9 == 1)
  {
    unint64_t v12 = 0;
    int64_t v11 = 0;
    if (v7 == v8) {
      goto LABEL_24;
    }
    goto LABEL_7;
  }
  if (v10 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  int64_t v11 = (char *)operator new(24 * v10);
  unint64_t v12 = (unint64_t)v11;
  uint64_t v122 = v11;
  float64x2_t v123 = v11;
  float64x2_t v124 = &v11[24 * v10];
  if (v7 != v8)
  {
LABEL_7:
    unint64_t v13 = 0;
    while (1)
    {
      if (v13 == v5) {
        goto LABEL_9;
      }
      uint64_t v15 = sub_413C0(a2, v13);
      uint64_t v16 = (_DWORD *)sub_413C0(a2, v13);
      if (*v16 != *v6) {
        break;
      }
      unsigned int v17 = v6[1];
      unsigned int v18 = v16[1];
      double i = 0.0;
      if (v17 != v18) {
        goto LABEL_15;
      }
LABEL_8:
      unint64_t v14 = *(void **)v15;
      LODWORD(__p[1]) = *(_DWORD *)(v15 + 8);
      __p[0] = v14;
      *(double *)&long long v120 = i;
      sub_4885C((char **)&v122, (long long *)__p);
LABEL_9:
      if (++v13 == v9)
      {
        int64_t v11 = (char *)v122;
        unint64_t v12 = (unint64_t)v123;
        uint64_t v3 = a1;
        goto LABEL_24;
      }
    }
    unsigned int v18 = v16[1];
    unsigned int v17 = v6[1];
LABEL_15:
    double v20 = -(double)(*v6 - *v16);
    if (*v16 - *v6 < (*v6 - *v16)) {
      double v20 = (double)(*v16 - *v6);
    }
    for (double i = (atan2((double)v18 - (double)v17, v20) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
      ;
    while (i < -180.0)
      double i = i + 360.0;
    goto LABEL_8;
  }
LABEL_24:
  unint64_t v21 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v11) >> 3));
  __p[0] = v6;
  if ((char *)v12 == v11) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  sub_49ABC((unint64_t)v11, v12, (unsigned int **)__p, v22, 1);
  unint64_t v23 = (char *)v122;
  uint64_t v24 = v123;
  if (v122 != v123)
  {
    BOOL v25 = (double *)((char *)v122 - 24);
    while (v25 + 6 != (double *)v123)
    {
      double v26 = v25[5];
      double v27 = v25[8];
      v25 += 3;
      if (v26 == v27)
      {
        for (double j = (char *)(v25 + 6); j != v24; j += 24)
        {
          if (v25[2] != *((double *)j + 2))
          {
            int v29 = *((_DWORD *)j + 2);
            v25[3] = *(double *)j;
            v25 += 3;
            *((_DWORD *)v25 + 2) = v29;
            v25[2] = *((double *)j + 2);
          }
        }
        uint8x8_t v30 = (char *)(v25 + 3);
        if (v24 != v30)
        {
          float64x2_t v123 = v30;
          goto LABEL_40;
        }
        break;
      }
    }
  }
  uint8x8_t v30 = v24;
LABEL_40:
  if (0xAAAAAAAAAAAAAAABLL * ((v30 - v23) >> 3) < 2) {
    goto LABEL_131;
  }
  long long v120 = 0u;
  long long v121 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_4AEB4((uint64_t)__p);
  uint64_t v31 = ((unint64_t)(*((void *)&v121 + 1) + v121) * (unsigned __int128)0x8060180601806019) >> 64;
  unint64_t v32 = (v31 + ((unint64_t)(*((void *)&v121 + 1) + v121 - v31) >> 1)) >> 8;
  uint64_t v33 = *((void *)__p[1] + v32) + 12 * (*((void *)&v121 + 1) + v121 - 341 * v32);
  uint64_t v34 = *(void *)v6;
  *(_DWORD *)(v33 + 8) = v6[2];
  *(void *)uint64_t v33 = v34;
  ++*((void *)&v121 + 1);
  uint64_t v35 = sub_489A0(&v122, 0);
  uint64_t v36 = __p[1];
  uint64_t v37 = 341 * ((uint64_t)(v120 - (unint64_t)__p[1]) >> 3) - 1;
  if ((void *)v120 == __p[1]) {
    uint64_t v37 = 0;
  }
  unint64_t v38 = *((void *)&v121 + 1) + v121;
  if (v37 == *((void *)&v121 + 1) + (void)v121)
  {
    sub_4AEB4((uint64_t)__p);
    uint64_t v36 = __p[1];
    unint64_t v38 = *((void *)&v121 + 1) + v121;
  }
  unint64_t v39 = v36[v38 / 0x155] + 12 * (v38 % 0x155);
  uint64_t v40 = *(void *)v35;
  *(_DWORD *)(v39 + 8) = *(_DWORD *)(v35 + 8);
  *(void *)unint64_t v39 = v40;
  ++*((void *)&v121 + 1);
  uint64_t v41 = sub_489A0(&v122, 1uLL);
  double v42 = __p[1];
  if ((void *)v120 == __p[1]) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = 341 * ((uint64_t)(v120 - (unint64_t)__p[1]) >> 3) - 1;
  }
  unint64_t v44 = *((void *)&v121 + 1) + v121;
  if (v43 == *((void *)&v121 + 1) + (void)v121)
  {
    sub_4AEB4((uint64_t)__p);
    double v42 = __p[1];
    unint64_t v44 = *((void *)&v121 + 1) + v121;
  }
  unint64_t v45 = v42[v44 / 0x155] + 12 * (v44 % 0x155);
  uint64_t v46 = *(void *)v41;
  *(_DWORD *)(v45 + 8) = *(_DWORD *)(v41 + 8);
  *(void *)unint64_t v45 = v46;
  unint64_t v47 = ++*((void *)&v121 + 1);
  unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v123 - (unsigned char *)v122) >> 3);
  if (v48 <= 2) {
    unint64_t v49 = 2;
  }
  else {
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v123 - (unsigned char *)v122) >> 3);
  }
  if (v48 >= 3)
  {
    unint64_t v52 = 2;
    do
    {
      double v55 = (_DWORD *)sub_489A0(&v122, v52);
      sub_48BD0(v3, __p, v55, v56, v57, v58, v59, v60, v61);
      uint64_t v62 = sub_489A0(&v122, v52);
      double v63 = __p[1];
      if ((void *)v120 == __p[1]) {
        uint64_t v64 = 0;
      }
      else {
        uint64_t v64 = 341 * ((uint64_t)(v120 - (unint64_t)__p[1]) >> 3) - 1;
      }
      unint64_t v65 = *((void *)&v121 + 1) + v121;
      if (v64 == *((void *)&v121 + 1) + (void)v121)
      {
        sub_4AEB4((uint64_t)__p);
        double v63 = __p[1];
        unint64_t v65 = *((void *)&v121 + 1) + v121;
      }
      unint64_t v53 = v63[v65 / 0x155] + 12 * (v65 % 0x155);
      uint64_t v54 = *(void *)v62;
      *(_DWORD *)(v53 + 8) = *(_DWORD *)(v62 + 8);
      *(void *)unint64_t v53 = v54;
      unint64_t v47 = ++*((void *)&v121 + 1);
      ++v52;
    }
    while (v49 != v52);
  }
  if (v47 >= 3)
  {
    float64x2_t v50 = *(void **)(v3 + 8);
    if ((unint64_t)v50 >= *(void *)(v3 + 16))
    {
      float64x2_t v51 = sub_3B3B0((char **)v3);
    }
    else
    {
      void *v50 = 0;
      v50[1] = 0;
      float64x2_t v51 = (char *)(v50 + 3);
      v50[2] = 0;
    }
    *(void *)(v3 + 8) = v51;
    uint64_t v66 = (char *)*((void *)v51 - 3);
    uint64_t v67 = *((void *)&v121 + 1);
    unint64_t v68 = *((void *)&v121 + 1) + 1;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v51 - 1) - (void)v66) >> 2) < *((void *)&v121 + 1) + 1)
    {
      if (v68 > 0x1555555555555555) {
        goto LABEL_134;
      }
      double v69 = (char *)*((void *)v51 - 2);
      double v70 = (char *)operator new(12 * v68);
      float64x2_t v71 = &v70[12 * ((v69 - v66) / 12)];
      float64x2_t v72 = v71;
      if (v69 != v66)
      {
        float64x2_t v72 = &v70[12 * ((v69 - v66) / 12)];
        do
        {
          uint64_t v73 = *(void *)(v69 - 12);
          v69 -= 12;
          int v74 = *((_DWORD *)v69 + 2);
          *(void *)(v72 - 12) = v73;
          v72 -= 12;
          *((_DWORD *)v72 + 2) = v74;
        }
        while (v69 != v66);
      }
      *((void *)v51 - 3) = v72;
      *((void *)v51 - 2) = v71;
      *((void *)v51 - 1) = &v70[12 * v68];
      if (v66)
      {
        operator delete(v66);
        uint64_t v67 = *((void *)&v121 + 1);
      }
    }
    while (v67)
    {
      unint64_t v75 = v67 + v121 - 1;
      uint64_t v76 = *(void *)(v3 + 8);
      unint64_t v77 = *((void *)__p[1] + v75 / 0x155) + 12 * (v75 % 0x155);
      double v79 = *(_DWORD **)(v76 - 16);
      unint64_t v78 = *(void *)(v76 - 8);
      if ((unint64_t)v79 >= v78)
      {
        long double v82 = *(_DWORD **)(v76 - 24);
        unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (v79 - v82) + 1;
        if (v83 > 0x1555555555555555) {
          goto LABEL_134;
        }
        unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (void)v82) >> 2);
        if (2 * v84 > v83) {
          unint64_t v83 = 2 * v84;
        }
        if (v84 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v85 = 0x1555555555555555;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          if (v85 > 0x1555555555555555) {
            goto LABEL_135;
          }
          int v86 = (char *)operator new(12 * v85);
        }
        else
        {
          int v86 = 0;
        }
        uint64_t v87 = *(void *)v77;
        double v88 = &v86[4 * (v79 - v82)];
        *((_DWORD *)v88 + 2) = *(_DWORD *)(v77 + 8);
        *(void *)double v88 = v87;
        unint64_t v89 = v88;
        if (v79 == v82)
        {
          uint64_t v3 = a1;
          float64_t v81 = v88 + 12;
          *(void *)(v76 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v88;
          *(void *)(v76 - 16) = v88 + 12;
          *(void *)(v76 - 8) = &v86[12 * v85];
          if (!v79) {
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v3 = a1;
          do
          {
            uint64_t v90 = *(void *)(v79 - 3);
            v79 -= 3;
            int v91 = v79[2];
            *(void *)(v89 - 12) = v90;
            v89 -= 12;
            *((_DWORD *)v89 + 2) = v91;
          }
          while (v79 != v82);
          double v79 = *(_DWORD **)(v76 - 24);
          float64_t v81 = v88 + 12;
          *(void *)(v76 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v89;
          *(void *)(v76 - 16) = v88 + 12;
          *(void *)(v76 - 8) = &v86[12 * v85];
          if (!v79) {
            goto LABEL_92;
          }
        }
        operator delete(v79);
      }
      else
      {
        uint64_t v80 = *(void *)v77;
        v79[2] = *(_DWORD *)(v77 + 8);
        *(void *)double v79 = v80;
        float64_t v81 = v79 + 3;
      }
LABEL_92:
      uint64_t v92 = v120;
      BOOL v93 = (void *)v120 == __p[1];
      uint64_t v94 = 341 * ((uint64_t)(v120 - (unint64_t)__p[1]) >> 3) - 1;
      *(void *)(v76 - 16) = v81;
      long long v95 = v121;
      if (v93) {
        uint64_t v94 = 0;
      }
      uint64_t v67 = --*((void *)&v121 + 1);
      if ((unint64_t)(v94 - (*((void *)&v95 + 1) + v95) + 1) >= 0x2AA)
      {
        operator delete(*(void **)(v92 - 8));
        uint64_t v67 = *((void *)&v121 + 1);
        *(void *)&long long v120 = v120 - 8;
      }
    }
    uint64_t v96 = *(void *)(v3 + 8);
    uint64_t v97 = *(_DWORD **)(v96 - 24);
    double v99 = *(_DWORD **)(v96 - 16);
    unint64_t v98 = *(void *)(v96 - 8);
    if ((unint64_t)v99 < v98)
    {
      uint64_t v100 = *(void *)v97;
      v99[2] = v97[2];
      *(void *)double v99 = v100;
      unint64_t v101 = (char *)(v99 + 3);
      goto LABEL_116;
    }
    unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * (v99 - v97) + 1;
    if (v102 <= 0x1555555555555555)
    {
      unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v97) >> 2);
      if (2 * v103 > v102) {
        unint64_t v102 = 2 * v103;
      }
      if (v103 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v104 = 0x1555555555555555;
      }
      else {
        unint64_t v104 = v102;
      }
      if (v104)
      {
        if (v104 > 0x1555555555555555) {
LABEL_135:
        }
          sub_188D718();
        uint64_t v3 = a1;
        float64x2_t v105 = (char *)operator new(12 * v104);
      }
      else
      {
        float64x2_t v105 = 0;
      }
      unint64_t v106 = &v105[4 * (v99 - v97)];
      uint64_t v107 = *(void *)v97;
      BOOL v108 = &v105[12 * v104];
      *((_DWORD *)v106 + 2) = v97[2];
      *(void *)unint64_t v106 = v107;
      unint64_t v101 = v106 + 12;
      if (v99 == v97)
      {
        *(void *)(v96 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v106;
        *(void *)(v96 - 16) = v101;
        *(void *)(v96 - 8) = v108;
      }
      else
      {
        do
        {
          uint64_t v109 = *(void *)(v99 - 3);
          v99 -= 3;
          int v110 = v99[2];
          *(void *)(v106 - 12) = v109;
          v106 -= 12;
          *((_DWORD *)v106 + 2) = v110;
        }
        while (v99 != v97);
        uint64_t v97 = *(_DWORD **)(v96 - 24);
        *(void *)(v96 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v106;
        *(void *)(v96 - 16) = v101;
        *(void *)(v96 - 8) = v108;
        if (!v97) {
          goto LABEL_116;
        }
      }
      operator delete(v97);
LABEL_116:
      *(void *)(v96 - 16) = v101;
      goto LABEL_117;
    }
LABEL_134:
    sub_2E00();
  }
LABEL_117:
  float64x2_t v111 = (void **)__p[1];
  uint64x2_t v112 = (void **)v120;
  *((void *)&v121 + 1) = 0;
  unint64_t v113 = v120 - (unint64_t)__p[1];
  if ((unint64_t)v120 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v111);
      uint64x2_t v112 = (void **)v120;
      float64x2_t v111 = (void **)((char *)__p[1] + 8);
      __p[1] = v111;
      unint64_t v113 = v120 - (void)v111;
    }
    while ((void)v120 - (void)v111 > 0x10uLL);
  }
  unint64_t v114 = v113 >> 3;
  if (v114 == 1)
  {
    uint64_t v115 = 170;
  }
  else
  {
    if (v114 != 2) {
      goto LABEL_124;
    }
    uint64_t v115 = 341;
  }
  *(void *)&long long v121 = v115;
LABEL_124:
  if (v111 != v112)
  {
    do
    {
      float64x2_t v116 = *v111++;
      operator delete(v116);
    }
    while (v111 != v112);
    if ((void *)v120 != __p[1]) {
      *(void *)&long long v120 = v120 + (((unint64_t)__p[1] - v120 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  unint64_t v23 = (char *)v122;
LABEL_131:
  if (v23)
  {
    float64x2_t v123 = v23;
    operator delete(v23);
  }
  return v3;
}

void sub_485FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_48610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_48624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_36094(a10);
  _Unwind_Resume(a1);
}

unint64_t sub_48670(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_413C0(a2, 0);
  unint64_t v5 = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2);
  if (v6 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2);
  }
  if (v6 >= 2)
  {
    LODWORD(v4) = *(_DWORD *)(v3 + 4);
    double v9 = -6.28318531;
    double v10 = 3.14159265;
    long double v11 = exp((double)v4 * -6.28318531 / 4294967300.0 + 3.14159265);
    double v12 = -1.0;
    double v13 = 0.5;
    unint64_t v5 = 0;
    double v14 = 57.2957795;
    double v15 = atan((v11 + -1.0 / v11) * 0.5) * 57.2957795;
    unint64_t v16 = 1;
    do
    {
      LODWORD(v17) = *(_DWORD *)(sub_413C0(a2, v16) + 4);
      long double v18 = exp((double)v17 * v9 / 4294967300.0 + v10);
      double v19 = atan((v18 + v12 / v18) * v13);
      double v20 = v19 * v14;
      if (v19 * v14 < v15) {
        goto LABEL_7;
      }
      if (v19 * v14 == v15)
      {
        LODWORD(v21) = *(_DWORD *)sub_413C0(a2, v16);
        double v28 = v15;
        double v22 = v14;
        double v23 = v10;
        double v24 = v9;
        double v25 = (double)v21 * 360.0 / 4294967300.0 + -180.0;
        LODWORD(v26) = *(_DWORD *)sub_413C0(a2, v5);
        double v12 = -1.0;
        double v13 = 0.5;
        BOOL v27 = v25 < (double)v26 * 360.0 / 4294967300.0 + -180.0;
        double v9 = v24;
        double v10 = v23;
        double v14 = v22;
        double v15 = v28;
        if (v27)
        {
LABEL_7:
          unint64_t v5 = v16;
          double v15 = v20;
        }
      }
      ++v16;
    }
    while (v7 != v16);
  }
  return v5;
}

char *sub_4885C(char **a1, long long *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      double v13 = (char *)operator new(24 * v12);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[24 * v9];
    *(_OWORD *)double v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    unint64_t v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 24);
        *((void *)v14 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v14 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      unint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    unint64_t v7 = v5 + 24;
  }
  a1[1] = v7;
  return v7 - 24;
}

uint64_t sub_489A0(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_48AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_48BD0(uint64_t a1, void *a2, _DWORD *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = 341 * ((v11 - v10) >> 3) - 1;
  uint64_t v14 = a2[4];
  uint64_t v13 = a2[5];
  unint64_t v15 = v13 - 1 + v14;
  if (v11 == v10) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 341 * ((v11 - v10) >> 3) - 1;
  }
  std::string v17 = (unsigned int *)(*(void *)(v10 + 8 * (v15 / 0x155)) + 12 * (v15 % 0x155));
  unsigned int v19 = *v17;
  unsigned int v18 = v17[1];
  unsigned int v20 = v17[2];
  a2[5] = v13 - 1;
  if ((unint64_t)(v16 - (v13 + v14) + 1) >= 0x2AA)
  {
    operator delete(*(void **)(v11 - 8));
    uint64_t v10 = a2[1];
    uint64_t v11 = a2[2] - 8;
    a2[2] = v11;
    unint64_t v15 = a2[4] + a2[5];
    uint64_t v12 = 341 * ((v11 - v10) >> 3) - 1;
  }
  uint64_t v21 = ((v15 - 1) * (unsigned __int128)0x8060180601806019) >> 64;
  unint64_t v22 = (v21 + ((v15 - 1 - v21) >> 1)) >> 8;
  uint64_t v23 = *(void *)(v10 + 8 * v22) + 12 * (v15 - 1 - 341 * v22);
  unsigned int v24 = *(_DWORD *)v23;
  uint64_t v25 = *(void *)(v23 + 4);
  if (v11 == v10) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v12;
  }
  if (v26 == v15)
  {
    uint64_t v59 = *(void *)(v23 + 4);
    sub_4AEB4((uint64_t)a2);
    uint64_t v25 = v59;
    uint64_t v10 = a2[1];
    unint64_t v15 = a2[5] + a2[4];
  }
  BOOL v27 = (unsigned int *)(*(void *)(v10 + 8 * (v15 / 0x155)) + 12 * (v15 % 0x155));
  unsigned int *v27 = v19;
  v27[1] = v18;
  v27[2] = v20;
  while (1)
  {
    ++a2[5];
    LODWORD(a8) = *a3;
    LODWORD(a9) = a3[1];
    if (((double)v25 - (double)v18) * ((double)*(unint64_t *)&a8 - (double)v19)
       - ((double)v24 - (double)v19) * ((double)*(unint64_t *)&a9 - (double)v18) < 0.0)
      break;
    uint64_t v60 = v25;
    int v29 = (char *)operator new(0x18uLL);
    uint64_t v66 = v29 + 24;
    uint64_t v67 = v29 + 24;
    *(_DWORD *)int v29 = v24;
    *(void *)(v29 + 4) = v60;
    *((_DWORD *)v29 + 3) = v19;
    *((_DWORD *)v29 + 4) = v18;
    *((_DWORD *)v29 + 5) = v20;
    unint64_t v65 = v29;
    uint8x8_t v30 = (char *)operator new(0x18uLL);
    double v63 = v30 + 24;
    uint64_t v64 = v30 + 24;
    *(_DWORD *)uint8x8_t v30 = v19;
    *((_DWORD *)v30 + 1) = v18;
    *((_DWORD *)v30 + 2) = v20;
    *(void *)(v30 + 12) = *(void *)a3;
    *((_DWORD *)v30 + 5) = a3[2];
    std::string __p = v30;
    sub_49344((uint64_t *)&v65, 0, 30.0, v31, v32, v33);
    double v35 = v34;
    sub_49344((uint64_t *)&__p, 1, 30.0, v36, v37, v38);
    for (double i = v39 + -180.0 - v35; i >= 180.0; double i = i + -360.0)
      ;
    for (; i < -180.0; double i = i + 360.0)
      ;
    double v41 = *(double *)(a1 + 24);
    if (__p)
    {
      double v63 = __p;
      operator delete(__p);
    }
    if (v65)
    {
      uint64_t v66 = v65;
      operator delete(v65);
    }
    if (i <= 180.0 - v41) {
      break;
    }
    uint64_t v42 = a2[1];
    uint64_t v43 = a2[2];
    uint64_t v44 = 341 * ((v43 - v42) >> 3) - 1;
    uint64_t v46 = a2[4];
    uint64_t v45 = a2[5];
    if (v43 == v42) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = 341 * ((v43 - v42) >> 3) - 1;
    }
    uint64_t v48 = v45 - 1;
    a2[5] = v45 - 1;
    if ((unint64_t)(v47 - (v45 + v46) + 1) >= 0x2AA)
    {
      operator delete(*(void **)(v43 - 8));
      uint64_t v42 = a2[1];
      uint64_t v43 = a2[2] - 8;
      a2[2] = v43;
      uint64_t v46 = a2[4];
      uint64_t v48 = a2[5];
      uint64_t v44 = 341 * ((v43 - v42) >> 3) - 1;
    }
    unint64_t v49 = v48 - 1 + v46;
    float64x2_t v50 = (unsigned int *)(*(void *)(v42 + 8 * (v49 / 0x155)) + 12 * (v49 % 0x155));
    unsigned int v19 = *v50;
    unsigned int v18 = v50[1];
    unsigned int v51 = v50[2];
    a2[5] = v48 - 1;
    if (v43 == v42) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v44;
    }
    if ((unint64_t)(v52 - (v48 + v46) + 1) >= 0x2AA)
    {
      operator delete(*(void **)(v43 - 8));
      uint64_t v42 = a2[1];
      uint64_t v43 = a2[2] - 8;
      a2[2] = v43;
      unint64_t v49 = a2[4] + a2[5];
      uint64_t v44 = 341 * ((v43 - v42) >> 3) - 1;
    }
    uint64_t v53 = ((v49 - 1) * (unsigned __int128)0x8060180601806019) >> 64;
    unint64_t v54 = (v53 + ((v49 - 1 - v53) >> 1)) >> 8;
    uint64_t v55 = *(void *)(v42 + 8 * v54) + 12 * (v49 - 1 - 341 * v54);
    unsigned int v24 = *(_DWORD *)v55;
    uint64_t v25 = *(void *)(v55 + 4);
    if (v43 == v42) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = v44;
    }
    if (v56 == v49)
    {
      uint64_t v61 = *(void *)(v55 + 4);
      sub_4AEB4((uint64_t)a2);
      uint64_t v25 = v61;
      uint64_t v42 = a2[1];
      unint64_t v49 = a2[5] + a2[4];
    }
    double v28 = (unsigned int *)(*(void *)(v42 + 8 * (v49 / 0x155)) + 12 * (v49 % 0x155));
    unsigned int *v28 = v19;
    v28[1] = v18;
    unsigned int v20 = v51;
    v28[2] = v51;
  }
}

void sub_49084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(v17);
  _Unwind_Resume(a1);
}

BOOL sub_490A0(uint64_t a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  long long v6 = *(void **)a1;
  long long v7 = *(void **)(a1 + 8);
  if (*(void **)a1 != v7)
  {
    int v8 = 0;
    unsigned int v9 = a2[1];
    LODWORD(a4) = *a2;
    double v10 = (double)*(unint64_t *)&a4;
    while (1)
    {
      uint64_t v11 = (_DWORD *)v6[1];
      uint64_t v12 = (_DWORD *)(*v6 + 12);
      if ((_DWORD *)*v6 != v11 && v12 != v11) {
        break;
      }
LABEL_3:
      v6 += 3;
      if (v6 == v7) {
        return v8 != 0;
      }
    }
    while (1)
    {
      unsigned int v14 = *(v12 - 2);
      unsigned int v15 = v12[1];
      if (v14 >= v9)
      {
        if (v15 < v9)
        {
LABEL_15:
          LODWORD(a5) = *v12;
          LODWORD(a6) = *(v12 - 3);
          a6 = (double)*(unint64_t *)&a6;
          a5 = ((double)v9 - (double)v14) / ((double)v15 - (double)v14) * ((double)*(unint64_t *)&a5 - a6) + a6;
          if (a5 < v10) {
            v8 ^= 1u;
          }
        }
      }
      else if (v15 >= v9)
      {
        goto LABEL_15;
      }
      v12 += 3;
      if (v12 == v11) {
        goto LABEL_3;
      }
    }
  }
  int v8 = 0;
  return v8 != 0;
}

uint64_t *sub_49168(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  int v5 = *((_DWORD *)v4 + 2);
  *((void *)v4 + 2) = 8;
  *(_DWORD *)((char *)a1 + *(void *)(v3 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v3 - 24) + 8) & 0xFFFFFEFB | 4;
  sub_4DEFC(a2);
  if ((v10 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_188FC78(a1, (uint64_t)v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v5;
  return a1;
}

void sub_49260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4927C(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 341;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_49344(uint64_t *a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] - *a1;
  if (v7 == 24)
  {
    sub_497A8(a1, a2);
    return;
  }
  double v8 = a3;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2);
  if (a2) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 - 1;
  }
  if (v9 < 2 || a3 <= 0.0)
  {
    unsigned int v36 = *(_DWORD *)(v6 + 12 * v10);
    unsigned int v13 = v36;
    unint64_t v35 = v10;
    double v19 = 0.0;
    double v34 = 0.0;
    unsigned int v37 = *(_DWORD *)(v6 + 12 * v10 + 4);
    if (0.0 - a3 <= 0.0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (a2) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v12 = (unsigned int *)(v6 + 12 * v10);
  unsigned int v13 = *v12;
  unsigned int v14 = v12[1];
  uint64_t v46 = *a1;
  unsigned int v15 = (unsigned int *)(v6 + 12 * (v10 + v11) + 4);
  double v16 = 0.0;
  unint64_t v17 = 2;
  float64x2_t v49 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v50 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v47 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  unsigned int v44 = *v12;
  unint64_t v45 = v10;
  unint64_t v18 = v10;
  double v51 = v8;
  do
  {
    double v19 = v16;
    unsigned int v20 = v13;
    v18 += v11;
    long double v21 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
    long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
    unsigned int v14 = *v15;
    long double v23 = exp(3.14159265 - (double)*v15 * 6.28318531 / 4294967300.0);
    long double v24 = atan((v23 - 1.0 / v23) * 0.5);
    unsigned int v13 = *(v15 - 1);
    long double v25 = v24 * 57.2957795 * 0.0174532925;
    v26.i64[0] = v20;
    v26.i64[1] = v13;
    float64x2_t v27 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v26), v50), v49), v48), v47);
    double v52 = vsubq_f64(v27, (float64x2_t)vdupq_laneq_s64((int64x2_t)v27, 1)).f64[0];
    long double v28 = sin((v22 - v25) * 0.5);
    long double v29 = v28 * v28;
    double v30 = cos(v22);
    long double v31 = v30 * cos(v25);
    long double v32 = sin(0.5 * v52);
    long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
    double v8 = v51;
    double v34 = (v33 + v33) * 6372797.56;
    double v16 = v19 + v34;
    if (v17 >= v9) {
      break;
    }
    ++v17;
    v15 += 3 * v11;
  }
  while (v16 < v51);
  unint64_t v35 = v18 - v11;
  unint64_t v10 = v45;
  uint64_t v6 = v46;
  unsigned int v36 = v44;
  unsigned int v37 = *(_DWORD *)(v46 + 12 * v18 + 4);
  if (v16 - v51 > 0.0)
  {
LABEL_19:
    double v38 = (v8 - v19) / v34;
    double v39 = (_DWORD *)(v6 + 12 * v35);
    LODWORD(v8) = *v39;
    LODWORD(a6) = v39[1];
    unsigned int v13 = (v38 * ((double)v13 - (double)*(unint64_t *)&v8) + (double)*(unint64_t *)&v8);
    unsigned int v37 = (v38 * ((double)v37 - (double)*(unint64_t *)&a6) + (double)*(unint64_t *)&a6);
  }
LABEL_20:
  unsigned int v40 = *(_DWORD *)(v6 + 12 * v10 + 4);
  if (v13 != v36 || v40 != v37)
  {
    double v42 = -(double)(v36 - v13);
    if (v13 - v36 < v36 - v13) {
      double v42 = (double)(v13 - v36);
    }
    for (double i = (atan2((double)v37 - (double)v40, v42) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
      ;
    for (; i < -180.0; double i = i + 360.0)
      ;
  }
}

double sub_497A8(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  double i = 0.0;
  uint64_t v5 = v3 - 2;
  if (v3 >= 2)
  {
    unint64_t v6 = v3 - 1;
    uint64_t v7 = a2 ? 0 : v3 - 1;
    uint64_t v8 = a2 ? 1 : v5;
    unint64_t v9 = (unsigned int *)(v2 + 12 * v7);
    unsigned int v26 = v9[1];
    uint64_t v10 = a2 ? 1 : -1;
    long double v11 = exp((double)v26 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v12 = atan((v11 + -1.0 / v11) * 0.5);
    unsigned int v27 = *v9;
    double v29 = ((double)*v9 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    double v30 = v12 * 57.2957795 * 0.0174532925;
    double v28 = cos(v30);
    unsigned int v13 = (unsigned int *)(v2 + 12 * v8 + 4);
    do
    {
      unsigned int v14 = *v13;
      long double v15 = exp((double)*v13 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v16 = atan((v15 - 1.0 / v15) * 0.5) * 57.2957795 * 0.0174532925;
      unsigned int v17 = *(v13 - 1);
      long double v18 = sin((v30 - v16) * 0.5);
      long double v19 = v18 * v18;
      long double v20 = v28 * cos(v16);
      long double v21 = sin((v29 - ((double)v17 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
      double v22 = atan2(sqrt(v19 + v20 * (v21 * v21)), sqrt(1.0 - (v19 + v20 * (v21 * v21))));
      if (!v8) {
        break;
      }
      BOOL v23 = (v22 + v22) * 6372797.56 >= 1.0 || v6 == v8;
      v8 += v10;
      v13 += 3 * v10;
    }
    while (!v23);
    if (v17 != v27 || v26 != v14)
    {
      double v24 = -(double)(v27 - v17);
      if (v17 - v27 < v27 - v17) {
        double v24 = (double)(v17 - v27);
      }
      for (double i = (atan2((double)v14 - (double)v26, v24) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
        ;
      for (; i < -180.0; double i = i + 360.0)
        ;
    }
  }
  return i;
}

void sub_49ABC(unint64_t a1, unint64_t a2, unsigned int **a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v105 = a2 - 48;
    uint64_t v107 = a2 - 24;
    uint64_t v104 = a2 - 72;
    unint64_t v12 = a1;
    uint64_t v109 = (double *)a2;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = a2 - v12;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if (sub_4A5E8(*a3, (double *)v107, a1))
              {
                uint64_t v47 = *(void *)a1;
                DWORD2(v111) = *(_DWORD *)(a1 + 8);
                *(void *)&long long v111 = v47;
                double v48 = *(double *)v107;
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(v107 + 8);
                *(double *)a1 = v48;
                uint64_t v49 = v111;
                *(_DWORD *)(v107 + 8) = DWORD2(v111);
                *(void *)uint64_t v107 = v49;
                uint64_t v50 = *(void *)(a1 + 16);
                *(void *)(a1 + 16) = *(void *)(a2 - 8);
                *(void *)(a2 - 8) = v50;
              }
              break;
            case 3uLL:
              sub_4A9E8(a1, a1 + 24, v107, a3);
              break;
            case 4uLL:
              sub_4AD98(a1, a1 + 24, a1 + 48, v107, a3);
              break;
            case 5uLL:
              sub_4A884(a1, a1 + 24, a1 + 48, a1 + 72, v107, a3);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v13 <= 575)
        {
          if (a5)
          {
            if (a1 != a2)
            {
              double v51 = (double *)(a1 + 24);
              if (a1 + 24 != a2)
              {
                uint64_t v52 = 0;
                uint64_t v53 = *a3;
                uint64_t v54 = a1;
                do
                {
                  uint64_t v57 = v54;
                  uint64_t v54 = (uint64_t)v51;
                  if (sub_4A5E8(v53, v51, v57))
                  {
                    long long v58 = *(_OWORD *)v54;
                    uint64_t v112 = *(void *)(v54 + 16);
                    long long v111 = v58;
                    uint64_t v59 = v52;
                    do
                    {
                      uint64_t v60 = a1 + v59;
                      *(void *)(v60 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + v59);
                      *(_DWORD *)(v60 + 32) = *(_DWORD *)(a1 + v59 + 8);
                      *(void *)(v60 + 40) = *(void *)(a1 + v59 + 16);
                      if (!v59)
                      {
                        uint64_t v55 = a1;
                        goto LABEL_71;
                      }
                      v59 -= 24;
                    }
                    while (sub_4A5E8(*a3, (double *)&v111, v59 + a1));
                    uint64_t v55 = a1 + v59 + 24;
LABEL_71:
                    uint64_t v56 = v111;
                    *(_DWORD *)(v55 + 8) = DWORD2(v111);
                    *(void *)uint64_t v55 = v56;
                    *(void *)(v55 + 16) = v112;
                    uint64_t v53 = *a3;
                  }
                  double v51 = (double *)(v54 + 24);
                  v52 += 24;
                }
                while (v54 + 24 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            uint64_t v96 = (double *)(a1 + 24);
            if (a1 + 24 != a2)
            {
              uint64_t v97 = *a3;
              uint64_t v98 = a1 - 24;
              do
              {
                uint64_t v99 = a1;
                a1 = (unint64_t)v96;
                if (sub_4A5E8(v97, v96, v99))
                {
                  long long v100 = *(_OWORD *)a1;
                  uint64_t v112 = *(void *)(a1 + 16);
                  long long v111 = v100;
                  uint64_t v101 = v98;
                  do
                  {
                    *(void *)(v101 + 48) = *(void *)(v101 + 24);
                    *(_DWORD *)(v101 + 56) = *(_DWORD *)(v101 + 32);
                    *(void *)(v101 + 64) = *(void *)(v101 + 40);
                    BOOL v102 = sub_4A5E8(*a3, (double *)&v111, v101);
                    v101 -= 24;
                  }
                  while (v102);
                  uint64_t v103 = v111;
                  *(_DWORD *)(v101 + 56) = DWORD2(v111);
                  *(void *)(v101 + 48) = v103;
                  *(void *)(v101 + 64) = v112;
                  uint64_t v97 = *a3;
                }
                uint64_t v96 = (double *)(a1 + 24);
                v98 += 24;
              }
              while (a1 + 24 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            int64_t v61 = (v14 - 2) >> 1;
            int64_t v108 = v61;
            do
            {
              int64_t v63 = v61;
              if (v108 >= v61)
              {
                int64_t v106 = v61;
                uint64_t v64 = (2 * v61) | 1;
                unint64_t v65 = a1 + 24 * v64;
                uint64_t v66 = 2 * v61 + 2;
                uint64_t v67 = *a3;
                if (v66 < (uint64_t)v14 && sub_4A5E8(*a3, (double *)(a1 + 24 * v64), v65 + 24))
                {
                  v65 += 24;
                  uint64_t v64 = v66;
                }
                int64_t v63 = v106;
                uint64_t v68 = a1 + 24 * v106;
                if (!sub_4A5E8(v67, (double *)v65, v68))
                {
                  long long v69 = *(_OWORD *)v68;
                  uint64_t v112 = *(void *)(v68 + 16);
                  long long v111 = v69;
                  do
                  {
                    uint64_t v71 = v65;
                    double v72 = *(double *)v65;
                    *(_DWORD *)(v68 + 8) = *(_DWORD *)(v65 + 8);
                    *(double *)uint64_t v68 = v72;
                    *(void *)(v68 + 16) = *(void *)(v65 + 16);
                    if (v108 < v64) {
                      break;
                    }
                    uint64_t v73 = (2 * v64) | 1;
                    unint64_t v65 = a1 + 24 * v73;
                    int v74 = *a3;
                    if (2 * v64 + 2 < (uint64_t)v14 && sub_4A5E8(*a3, (double *)(a1 + 24 * v73), v65 + 24))
                    {
                      v65 += 24;
                      uint64_t v73 = 2 * v64 + 2;
                    }
                    BOOL v70 = sub_4A5E8(v74, (double *)v65, (uint64_t)&v111);
                    uint64_t v68 = v71;
                    uint64_t v64 = v73;
                  }
                  while (!v70);
                  a2 = (unint64_t)v109;
                  uint64_t v62 = v111;
                  *(_DWORD *)(v71 + 8) = DWORD2(v111);
                  *(void *)uint64_t v71 = v62;
                  *(void *)(v71 + 16) = v112;
                  int64_t v63 = v106;
                }
              }
              int64_t v61 = v63 - 1;
            }
            while (v63);
            int64_t v75 = v13 / 0x18uLL;
            do
            {
              uint64_t v79 = 0;
              unint64_t v110 = a2;
              long long v113 = *(_OWORD *)a1;
              uint64_t v80 = *(void *)(a1 + 16);
              unint64_t v81 = a1;
              do
              {
                uint64_t v83 = v81 + 24 * v79 + 24;
                uint64_t v84 = (2 * v79) | 1;
                uint64_t v85 = 2 * v79 + 2;
                if (v85 < v75 && sub_4A5E8(*a3, (double *)(v81 + 24 * v79 + 24), v81 + 24 * v79 + 48))
                {
                  v83 += 24;
                  uint64_t v84 = v85;
                }
                uint64_t v82 = *(void *)v83;
                *(_DWORD *)(v81 + 8) = *(_DWORD *)(v83 + 8);
                *(void *)unint64_t v81 = v82;
                *(void *)(v81 + 16) = *(void *)(v83 + 16);
                unint64_t v81 = v83;
                uint64_t v79 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              int v86 = (uint64_t *)(v110 - 24);
              if (v83 == v110 - 24)
              {
                unint64_t v76 = v110 - 24;
                uint64_t v77 = v113;
                *(_DWORD *)(v83 + 8) = DWORD2(v113);
                *(void *)uint64_t v83 = v77;
                *(void *)(v83 + 16) = v80;
              }
              else
              {
                uint64_t v87 = *v86;
                *(_DWORD *)(v83 + 8) = *(_DWORD *)(v110 - 16);
                *(void *)uint64_t v83 = v87;
                *(void *)(v83 + 16) = *(void *)(v110 - 8);
                uint64_t v88 = v113;
                *(_DWORD *)(v110 - 16) = DWORD2(v113);
                unint64_t v76 = v110 - 24;
                uint64_t *v86 = v88;
                *(void *)(v110 - 8) = v80;
                uint64_t v89 = v83 - a1 + 24;
                if (v89 >= 25)
                {
                  unint64_t v90 = (v89 / 0x18uLL - 2) >> 1;
                  unint64_t v91 = a1 + 24 * v90;
                  if (sub_4A5E8(*a3, (double *)v91, v83))
                  {
                    long long v92 = *(_OWORD *)v83;
                    uint64_t v112 = *(void *)(v83 + 16);
                    long long v111 = v92;
                    do
                    {
                      uint64_t v93 = v91;
                      double v94 = *(double *)v91;
                      *(_DWORD *)(v83 + 8) = *(_DWORD *)(v91 + 8);
                      *(double *)uint64_t v83 = v94;
                      *(void *)(v83 + 16) = *(void *)(v91 + 16);
                      if (!v90) {
                        break;
                      }
                      unint64_t v90 = (v90 - 1) >> 1;
                      unint64_t v91 = a1 + 24 * v90;
                      uint64_t v83 = v93;
                    }
                    while (sub_4A5E8(*a3, (double *)v91, (uint64_t)&v111));
                    uint64_t v95 = v111;
                    *(_DWORD *)(v93 + 8) = DWORD2(v111);
                    *(void *)uint64_t v93 = v95;
                    *(void *)(v93 + 16) = v112;
                  }
                }
              }
              BOOL v78 = v75-- <= 2;
              a2 = v76;
            }
            while (!v78);
          }
          return;
        }
        uint64_t v15 = a1 + 24 * (v14 >> 1);
        if ((unint64_t)v13 < 0xC01) {
          break;
        }
        sub_4A9E8(a1, a1 + 24 * (v14 >> 1), v107, a3);
        uint64_t v16 = 24 * (v14 >> 1);
        sub_4A9E8(a1 + 24, a1 + v16 - 24, v105, a3);
        sub_4A9E8(a1 + 48, a1 + 24 + v16, v104, a3);
        sub_4A9E8(a1 + v16 - 24, v15, a1 + 24 + v16, a3);
        uint64_t v17 = *(void *)a1;
        DWORD2(v111) = *(_DWORD *)(a1 + 8);
        *(void *)&long long v111 = v17;
        LODWORD(v17) = *(_DWORD *)(v15 + 8);
        *(void *)a1 = *(void *)v15;
        *(_DWORD *)(a1 + 8) = v17;
        uint64_t v18 = v111;
        *(_DWORD *)(v15 + 8) = DWORD2(v111);
        *(void *)uint64_t v15 = v18;
        uint64_t v19 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a1 + v16 + 16);
        *(void *)(a1 + v16 + 16) = v19;
        a2 = (unint64_t)v109;
        --a4;
        long double v20 = *a3;
        if (a5) {
          goto LABEL_12;
        }
LABEL_11:
        if (sub_4A5E8(v20, (double *)(a1 - 24), a1)) {
          goto LABEL_12;
        }
        long long v35 = *(_OWORD *)a1;
        uint64_t v112 = *(void *)(a1 + 16);
        long long v111 = v35;
        if (sub_4A5E8(v20, (double *)&v111, v107))
        {
          unint64_t v12 = a1;
          do
            v12 += 24;
          while (!sub_4A5E8(v20, (double *)&v111, v12));
        }
        else
        {
          unint64_t v36 = a1 + 24;
          do
          {
            unint64_t v12 = v36;
            if (v36 >= a2) {
              break;
            }
            BOOL v37 = sub_4A5E8(v20, (double *)&v111, v36);
            unint64_t v36 = v12 + 24;
          }
          while (!v37);
        }
        unint64_t v38 = a2;
        if (v12 < a2)
        {
          unint64_t v38 = a2;
          do
            v38 -= 24;
          while (sub_4A5E8(v20, (double *)&v111, v38));
        }
        while (v12 < v38)
        {
          double v39 = *(double *)v12;
          DWORD2(v113) = *(_DWORD *)(v12 + 8);
          *(double *)&long long v113 = v39;
          uint64_t v40 = *(void *)v38;
          *(_DWORD *)(v12 + 8) = *(_DWORD *)(v38 + 8);
          *(void *)unint64_t v12 = v40;
          uint64_t v41 = v113;
          *(_DWORD *)(v38 + 8) = DWORD2(v113);
          *(void *)unint64_t v38 = v41;
          uint64_t v42 = *(void *)(v12 + 16);
          *(void *)(v12 + 16) = *(void *)(v38 + 16);
          *(void *)(v38 + 16) = v42;
          uint64_t v43 = *a3;
          do
            v12 += 24;
          while (!sub_4A5E8(v43, (double *)&v111, v12));
          do
            v38 -= 24;
          while (sub_4A5E8(v43, (double *)&v111, v38));
        }
        unsigned int v44 = (uint64_t *)(v12 - 24);
        BOOL v5 = v12 - 24 >= a1;
        BOOL v6 = v12 - 24 == a1;
        if (v12 - 24 != a1)
        {
          uint64_t v45 = *v44;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 - 16);
          *(void *)a1 = v45;
          *(void *)(a1 + 16) = *(void *)(v12 - 8);
        }
        a5 = 0;
        uint64_t v46 = v111;
        *(_DWORD *)(v12 - 16) = DWORD2(v111);
        *unsigned int v44 = v46;
        *(void *)(v12 - 8) = v112;
      }
      sub_4A9E8(a1 + 24 * (v14 >> 1), a1, v107, a3);
      --a4;
      long double v20 = *a3;
      if ((a5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v21 = 0;
      long long v22 = *(_OWORD *)a1;
      uint64_t v112 = *(void *)(a1 + 16);
      long long v111 = v22;
      do
        v21 += 24;
      while (sub_4A5E8(v20, (double *)(v21 + a1), (uint64_t)&v111));
      unint64_t v23 = a1 + v21;
      double v24 = v109;
      if (v21 == 24)
      {
        double v24 = v109;
        do
        {
          if (v23 >= (unint64_t)v24) {
            break;
          }
          v24 -= 3;
        }
        while (!sub_4A5E8(v20, v24, (uint64_t)&v111));
      }
      else
      {
        do
          v24 -= 3;
        while (!sub_4A5E8(v20, v24, (uint64_t)&v111));
      }
      unint64_t v12 = a1 + v21;
      if (v23 >= (unint64_t)v24)
      {
        a2 = (unint64_t)v109;
        uint64_t v31 = v23 - 24;
        if (v23 - 24 != a1) {
          goto LABEL_27;
        }
      }
      else
      {
        long double v25 = v24;
        a2 = (unint64_t)v109;
        do
        {
          double v26 = *(double *)v12;
          DWORD2(v113) = *(_DWORD *)(v12 + 8);
          *(double *)&long long v113 = v26;
          double v27 = *v25;
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v25 + 2);
          *(double *)unint64_t v12 = v27;
          uint64_t v28 = v113;
          *((_DWORD *)v25 + 2) = DWORD2(v113);
          *(void *)long double v25 = v28;
          uint64_t v29 = *(void *)(v12 + 16);
          *(double *)(v12 + 16) = v25[2];
          *((void *)v25 + 2) = v29;
          double v30 = *a3;
          do
            v12 += 24;
          while (sub_4A5E8(v30, (double *)v12, (uint64_t)&v111));
          do
            v25 -= 3;
          while (!sub_4A5E8(v30, v25, (uint64_t)&v111));
        }
        while (v12 < (unint64_t)v25);
        uint64_t v31 = v12 - 24;
        if (v12 - 24 != a1)
        {
LABEL_27:
          uint64_t v32 = *(void *)v31;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v31 + 8);
          *(void *)a1 = v32;
          *(void *)(a1 + 16) = *(void *)(v12 - 8);
        }
      }
      uint64_t v33 = v111;
      *(_DWORD *)(v31 + 8) = DWORD2(v111);
      *(void *)uint64_t v31 = v33;
      *(void *)(v12 - 8) = v112;
      if (v23 < (unint64_t)v24) {
        goto LABEL_31;
      }
      BOOL v34 = sub_4AB68(a1, v31, a3);
      if (sub_4AB68(v12, a2, a3)) {
        break;
      }
      if (!v34)
      {
LABEL_31:
        sub_49ABC(a1, v31, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    a2 = v31;
    if (!v34) {
      continue;
    }
    break;
  }
}

BOOL sub_4A5E8(unsigned int *a1, double *a2, uint64_t a3)
{
  double v3 = a2[2];
  double v4 = *(double *)(a3 + 16);
  BOOL v5 = v3 <= v4;
  if (v3 == v4)
  {
    LODWORD(v3) = a1[1];
    long double v9 = exp(3.14159265 - (double)*(unint64_t *)&v3 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795;
    long double v11 = *(double *)&v10 * 0.0174532925;
    LODWORD(v10) = *((_DWORD *)a2 + 1);
    long double v12 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
    unsigned int v36 = *a1;
    long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
    v14.i64[0] = v36;
    v14.i64[1] = *(unsigned int *)a2;
    float64x2_t v15 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v14), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v34 = vsubq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0];
    double v37 = v15.f64[0];
    long double v16 = sin((v11 - v13) * 0.5);
    long double v17 = v16 * v16;
    double v18 = cos(v11);
    long double v19 = v18 * cos(v13);
    long double v20 = sin(0.5 * v34);
    long double v21 = atan2(sqrt(v17 + v19 * (v20 * v20)), sqrt(1.0 - (v17 + v19 * (v20 * v20))));
    *(double *)&unint64_t v22 = (v21 + v21) * 6372797.56;
    double v35 = *(double *)&v22;
    LODWORD(v22) = *(_DWORD *)(a3 + 4);
    long double v23 = exp(3.14159265 - (double)v22 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795;
    long double v25 = *(double *)&v24 * 0.0174532925;
    LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)a3;
    long double v26 = v11 - v25;
    double v27 = v37 - ((double)v24 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    long double v28 = sin(v26 * 0.5);
    long double v29 = v28 * v28;
    long double v30 = v18 * cos(v25);
    long double v31 = sin(v27 * 0.5);
    long double v32 = atan2(sqrt(v29 + v30 * (v31 * v31)), sqrt(1.0 - (v29 + v30 * (v31 * v31))));
    BOOL v5 = v35 <= (v32 + v32) * 6372797.56;
  }
  return !v5;
}

double sub_4A884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int **a6)
{
  sub_4AD98(a1, a2, a3, a4, a6);
  if (sub_4A5E8(*a6, (double *)a5, a4))
  {
    int v13 = *(_DWORD *)(a4 + 8);
    double v14 = *(double *)a4;
    int v15 = *(_DWORD *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = v15;
    *(double *)a5 = v14;
    *(_DWORD *)(a5 + 8) = v13;
    uint64_t v16 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v16;
    if (sub_4A5E8(*a6, (double *)a4, a3))
    {
      int v17 = *(_DWORD *)(a3 + 8);
      double v18 = *(double *)a3;
      int v19 = *(_DWORD *)(a4 + 8);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = v19;
      *(double *)a4 = v18;
      *(_DWORD *)(a4 + 8) = v17;
      uint64_t v20 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v20;
      if (sub_4A5E8(*a6, (double *)a3, a2))
      {
        int v21 = *(_DWORD *)(a2 + 8);
        double v22 = *(double *)a2;
        int v23 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v23;
        *(double *)a3 = v22;
        *(_DWORD *)(a3 + 8) = v21;
        uint64_t v24 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v24;
        if (sub_4A5E8(*a6, (double *)a2, a1))
        {
          int v25 = *(_DWORD *)(a1 + 8);
          uint64_t v26 = *(void *)a1;
          int v27 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v27;
          *(void *)a2 = v26;
          *(_DWORD *)(a2 + 8) = v25;
          double result = *(double *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(double *)(a2 + 16) = result;
        }
      }
    }
  }
  return result;
}

double sub_4A9E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v8 = *a4;
  BOOL v9 = sub_4A5E8(*a4, (double *)a2, a1);
  BOOL v10 = sub_4A5E8(v8, (double *)a3, a2);
  if (v9)
  {
    if (v10)
    {
      long double v12 = (double *)(a1 + 16);
      int v13 = *(_DWORD *)(a1 + 8);
      double v14 = *(double *)a1;
      int v15 = *(_DWORD *)(a3 + 8);
      *(void *)a1 = *(void *)a3;
      *(_DWORD *)(a1 + 8) = v15;
    }
    else
    {
      int v24 = *(_DWORD *)(a1 + 8);
      double v25 = *(double *)a1;
      int v26 = *(_DWORD *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = v26;
      *(double *)a2 = v25;
      *(_DWORD *)(a2 + 8) = v24;
      long double v12 = (double *)(a2 + 16);
      uint64_t v27 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v27;
      if (!sub_4A5E8(*a4, (double *)a3, a2)) {
        return result;
      }
      int v13 = *(_DWORD *)(a2 + 8);
      double v14 = *(double *)a2;
      int v28 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v28;
    }
    *(double *)a3 = v14;
    *(_DWORD *)(a3 + 8) = v13;
    int v19 = (double *)(a3 + 16);
    goto LABEL_10;
  }
  if (v10)
  {
    int v16 = *(_DWORD *)(a2 + 8);
    double v17 = *(double *)a2;
    int v18 = *(_DWORD *)(a3 + 8);
    *(void *)a2 = *(void *)a3;
    *(_DWORD *)(a2 + 8) = v18;
    *(double *)a3 = v17;
    *(_DWORD *)(a3 + 8) = v16;
    int v19 = (double *)(a2 + 16);
    uint64_t v20 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v20;
    if (sub_4A5E8(*a4, (double *)a2, a1))
    {
      int v21 = *(_DWORD *)(a1 + 8);
      double v22 = *(double *)a1;
      int v23 = *(_DWORD *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = v23;
      *(double *)a2 = v22;
      *(_DWORD *)(a2 + 8) = v21;
      long double v12 = (double *)(a1 + 16);
LABEL_10:
      double result = *v12;
      *long double v12 = *v19;
      *int v19 = result;
    }
  }
  return result;
}

BOOL sub_4AB68(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (void *)(a2 - 24);
      if (sub_4A5E8(*a3, (double *)(a2 - 24), a1))
      {
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 16);
        *(void *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        *uint64_t v8 = v10;
        *(_DWORD *)(a2 - 16) = v9;
        uint64_t v12 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      sub_4A9E8(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_4AD98(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_4A884(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v13 = a1 + 48;
      sub_4A9E8(a1, a1 + 24, a1 + 48, a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    if (sub_4A5E8(*a3, (double *)v14, v13))
    {
      long long v20 = *(_OWORD *)v14;
      uint64_t v21 = *(void *)(v14 + 16);
      uint64_t v18 = v15;
      do
      {
        uint64_t v19 = a1 + v18;
        *(void *)(v19 + 72) = *(void *)(a1 + v18 + 48);
        *(_DWORD *)(v19 + 80) = *(_DWORD *)(a1 + v18 + 56);
        *(void *)(v19 + 88) = *(void *)(a1 + v18 + 64);
        if (v18 == -48)
        {
          uint64_t v17 = a1;
          goto LABEL_7;
        }
        v18 -= 24;
      }
      while (sub_4A5E8(*a3, (double *)&v20, v19 + 24));
      uint64_t v17 = a1 + v18 + 72;
LABEL_7:
      *(void *)uint64_t v17 = v20;
      *(_DWORD *)(v17 + 8) = DWORD2(v20);
      *(void *)(v17 + 16) = v21;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
}

double sub_4AD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  sub_4A9E8(a1, a2, a3, a5);
  if (sub_4A5E8(*a5, (double *)a4, a3))
  {
    int v11 = *(_DWORD *)(a3 + 8);
    double v12 = *(double *)a3;
    int v13 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v13;
    *(double *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    uint64_t v14 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v14;
    if (sub_4A5E8(*a5, (double *)a3, a2))
    {
      int v15 = *(_DWORD *)(a2 + 8);
      double v16 = *(double *)a2;
      int v17 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v17;
      *(double *)a3 = v16;
      *(_DWORD *)(a3 + 8) = v15;
      uint64_t v18 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v18;
      if (sub_4A5E8(*a5, (double *)a2, a1))
      {
        int v19 = *(_DWORD *)(a1 + 8);
        uint64_t v20 = *(void *)a1;
        int v21 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v21;
        *(void *)a2 = v20;
        *(_DWORD *)(a2 + 8) = v19;
        double result = *(double *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(double *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

void sub_4AEB4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    BOOL v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)BOOL v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        double v34 = (char *)operator new(8 * v31);
        double v35 = &v34[8 * v32];
        unsigned int v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        BOOL v5 = v35;
        if (!v37)
        {
          BOOL v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            int v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              BOOL v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *BOOL v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    int v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    BOOL v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v91 = operator new(0xFFCuLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unint64_t v91 = operator new(0xFFCuLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    BOOL v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        double v34 = (char *)operator new(8 * v42);
        double v35 = &v34[8 * v43];
        unsigned int v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        BOOL v5 = v35;
        if (!v37)
        {
          BOOL v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              int v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          BOOL v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  double v25 = (char *)operator new(8 * v24);
  int v26 = operator new(0xFFCuLL);
  uint64_t v27 = &v25[8 * v21];
  int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    unint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      double v25 = v49;
      *(void *)uint64_t v27 = v90;
      long double v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      long double v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          double v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          long double v29 = v53;
          if (!v37)
          {
            long double v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            unint64_t v65 = &v27[v68];
            long long v69 = (long long *)(v27 + 16);
            BOOL v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)BOOL v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          long double v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          double v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      double v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  long double v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  double v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_4B424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_4B440(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_4B454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_4B46C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_4B484(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_4BCAC((uint64_t)__p, a1);
  int v3 = v5;
  if (v5 == 3)
  {
    sub_4D4C4(a2, (uint64_t *)__p);
    int v3 = v5;
    if (!v5) {
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v3) {
      return;
    }
  }
  if (v3 == 2 || v3 == 1)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    sub_4D3A0(v3, (void ***)__p);
  }
}

void sub_4B558(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_4B570(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void (__cdecl **__p)(std::stringbuf *__hidden this), void (__cdecl **a17)(std::stringbuf *__hidden this), uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a19)
  {
    if (a19 == 2 || a19 == 1)
    {
      if (__p)
      {
        a17 = __p;
        operator delete(__p);
      }
    }
    else
    {
      sub_4D3A0(a19, (void ***)&__p);
    }
  }
  if (a2 == 1)
  {
    double v34 = __cxa_begin_catch(a1);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      double v35 = sub_188FC78(&__p, (uint64_t)"Got exception parsing WKT ", 26);
      int v36 = *(char *)(v31 + 23);
      if (v36 >= 0) {
        uint64_t v37 = v31;
      }
      else {
        uint64_t v37 = *(void *)v31;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v31 + 23);
      }
      else {
        uint64_t v38 = *(void *)(v31 + 8);
      }
      unint64_t v39 = sub_188FC78(v35, v37, v38);
      uint64_t v40 = sub_188FC78(v39, (uint64_t)": ", 2);
      uint64_t v41 = (const char *)(*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
      size_t v42 = strlen(v41);
      sub_188FC78(v40, (uint64_t)v41, v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&a9, 3u);
      if (a14 < 0) {
        operator delete(a9);
      }
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    void *v30 = 0;
    v30[1] = 0;
    v30[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x4B524);
  }
  JUMPOUT(0x4B560);
}

void sub_4B780(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void (__cdecl **a17)(std::stringbuf *__hidden this), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  __cxa_end_catch();
  JUMPOUT(0x4B560);
}

void sub_4B898(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_4BCAC((uint64_t)&__p, a1);
  int v3 = v6;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3 == 4)
  {
    sub_4D6D0(a2, (uint64_t)__p, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)__p) >> 3));
    int v3 = v6;
  }
  if (v3)
  {
    if (v3 == 2 || v3 == 1)
    {
      if (__p) {
        operator delete(__p);
      }
    }
    else
    {
      sub_4D3A0(v3, (void ***)&__p);
    }
  }
}

void sub_4B970(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_4B988(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void (__cdecl **a17)(std::stringbuf *__hidden this), uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a19)
  {
    if (a19 == 2 || a19 == 1)
    {
      if (__p) {
        operator delete(__p);
      }
    }
    else
    {
      sub_4D3A0(a19, (void ***)&__p);
    }
  }
  if (a2 == 1)
  {
    double v34 = __cxa_begin_catch(a1);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__p);
      double v35 = sub_188FC78(&__p, (uint64_t)"Got exception parsing WKT ", 26);
      int v36 = *(char *)(v31 + 23);
      if (v36 >= 0) {
        uint64_t v37 = v31;
      }
      else {
        uint64_t v37 = *(void *)v31;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v31 + 23);
      }
      else {
        uint64_t v38 = *(void *)(v31 + 8);
      }
      unint64_t v39 = sub_188FC78(v35, v37, v38);
      uint64_t v40 = sub_188FC78(v39, (uint64_t)": ", 2);
      uint64_t v41 = (const char *)(*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
      size_t v42 = strlen(v41);
      sub_188FC78(v40, (uint64_t)v41, v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&a10, 3u);
      if (a15 < 0) {
        operator delete(a10);
      }
      if (a30 < 0) {
        operator delete(a25);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    void *v30 = 0;
    v30[1] = 0;
    v30[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x4B93CLL);
  }
  JUMPOUT(0x4B978);
}

void sub_4BB94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void (__cdecl **a17)(std::stringbuf *__hidden this), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  __cxa_end_catch();
  JUMPOUT(0x4B978);
}

void sub_4BCAC(uint64_t a1, uint64_t *a2)
{
  int v3 = *((char *)a2 + 23);
  BOOL v4 = v3 < 0;
  uint64_t v5 = (uint64_t *)*a2;
  if (v3 >= 0) {
    uint64_t v5 = a2;
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if (v4) {
    uint64_t v6 = a2[1];
  }
  v34[0] = v5;
  v34[1] = (char *)v5 + v6;
  LODWORD(v35) = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v36 = "";
  sub_4C310((uint64_t)&v39, (uint64_t)v34);
  if (v39 == 12)
  {
LABEL_6:
    *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1;
    return;
  }
  sub_4C310((uint64_t)&v39, (uint64_t)v34);
  v34[0] += v40;
  uint64_t v35 = 0;
  int v36 = "";
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  switch((int)v39)
  {
    case 6:
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 11)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        v34[0] += v40;
        uint64_t v35 = 0;
        int v36 = "";
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v7 = 1;
      }
      else
      {
        int v7 = 0;
      }
      *(void *)a1 = sub_4C80C(v34, v7);
      *(_DWORD *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      return;
    case 7:
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 11)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        v34[0] += v40;
        uint64_t v35 = 0;
        int v36 = "";
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v9 = 1;
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        if (v39 != 5)
        {
LABEL_16:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v33 = 0;
          sub_4CE08((uint64_t)&v39, v34, 1);
          *(void *)&long long v39 = sub_4C80C(v34, v9);
          DWORD2(v39) = v10;
          sub_30C0C((char **)__p, (uint64_t *)&v39);
          while (1)
          {
            sub_4C310((uint64_t)&v39, (uint64_t)v34);
            if (v39 != 3) {
              break;
            }
            sub_4CE08((uint64_t)&v39, v34, 3);
            *(void *)&long long v39 = sub_4C80C(v34, v9);
            DWORD2(v39) = v11;
            sub_30C0C((char **)__p, (uint64_t *)&v39);
          }
          sub_4CE08((uint64_t)&v39, v34, 2);
          long long v18 = *(_OWORD *)__p;
          uint64_t v17 = v33;
LABEL_34:
          *(_OWORD *)a1 = v18;
LABEL_35:
          *(void *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
          return;
        }
      }
      else
      {
        int v9 = 0;
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        if (v39 != 5) {
          goto LABEL_16;
        }
      }
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      uint64_t v17 = 0;
      long long v18 = 0uLL;
      goto LABEL_34;
    case 8:
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 11)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        v34[0] += v40;
        uint64_t v35 = 0;
        int v36 = "";
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v12 = 1;
      }
      else
      {
        int v12 = 0;
      }
      sub_4C8D8((uint64_t)&v39, v34, v12);
      *(_OWORD *)a1 = v39;
      uint64_t v17 = v40;
      goto LABEL_35;
    case 9:
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 11)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        v34[0] += v40;
        uint64_t v35 = 0;
        int v36 = "";
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v13 = 1;
      }
      else
      {
        int v13 = 0;
      }
      sub_4CA30((uint64_t)&v39, v34, v13);
      *(_OWORD *)a1 = v39;
      *(void *)(a1 + 16) = v40;
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 3;
      return;
    case 10:
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 11)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        v34[0] += v40;
        uint64_t v35 = 0;
        int v36 = "";
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v8 = 1;
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        if (v39 != 5) {
          goto LABEL_12;
        }
LABEL_24:
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        uint64_t v14 = 0;
        long long v15 = 0uLL;
        goto LABEL_53;
      }
      int v8 = 0;
      sub_4C310((uint64_t)&v39, (uint64_t)v34);
      if (v39 == 5) {
        goto LABEL_24;
      }
LABEL_12:
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v33 = 0;
      sub_4CE08((uint64_t)&v39, v34, 1);
      sub_4CA30((uint64_t)&v39, v34, v8);
      uint64_t v19 = sub_4D1F4((void ***)__p, (uint64_t)&v39);
      uint64_t v20 = v39;
      __p[1] = v19;
      if ((void)v39)
      {
        uint64_t v21 = *((void *)&v39 + 1);
        uint64_t v22 = (void *)v39;
        if (*((void *)&v39 + 1) != (void)v39)
        {
          uint64_t v23 = *((void *)&v39 + 1);
          do
          {
            double v25 = *(void **)(v23 - 24);
            v23 -= 24;
            unint64_t v24 = v25;
            if (v25)
            {
              *(void *)(v21 - 16) = v24;
              operator delete(v24);
            }
            uint64_t v21 = v23;
          }
          while (v23 != v20);
LABEL_42:
          uint64_t v22 = (void *)v39;
        }
        goto LABEL_43;
      }
      while (1)
      {
        sub_4C310((uint64_t)&v39, (uint64_t)v34);
        if (v39 != 3) {
          break;
        }
        sub_4CE08((uint64_t)&v39, v34, 3);
        sub_4CA30((uint64_t)&v39, v34, v8);
        int v26 = __p[1];
        if (__p[1] < v33)
        {
          *(void *)__p[1] = 0;
          v26[1] = 0;
          v26[2] = 0;
          *(_OWORD *)int v26 = v39;
          v26[2] = v40;
          __p[1] = v26 + 3;
        }
        else
        {
          uint64_t v27 = sub_4D1F4((void ***)__p, (uint64_t)&v39);
          uint64_t v20 = v39;
          __p[1] = v27;
          if ((void)v39)
          {
            uint64_t v28 = *((void *)&v39 + 1);
            uint64_t v22 = (void *)v39;
            if (*((void *)&v39 + 1) != (void)v39)
            {
              uint64_t v29 = *((void *)&v39 + 1);
              do
              {
                uint64_t v31 = *(void **)(v29 - 24);
                v29 -= 24;
                unint64_t v30 = v31;
                if (v31)
                {
                  *(void *)(v28 - 16) = v30;
                  operator delete(v30);
                }
                uint64_t v28 = v29;
              }
              while (v29 != v20);
              goto LABEL_42;
            }
LABEL_43:
            *((void *)&v39 + 1) = v20;
            operator delete(v22);
            continue;
          }
        }
      }
      sub_4CE08((uint64_t)&v39, v34, 2);
      long long v15 = *(_OWORD *)__p;
      uint64_t v14 = v33;
LABEL_53:
      *(_OWORD *)a1 = v15;
      *(void *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 4;
      return;
    default:
      goto LABEL_6;
  }
}

void sub_4C290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4C2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4C2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4C310(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16))
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v3;
    return;
  }
  uint64_t v5 = *(const char **)a2;
  uint64_t v6 = *(const char **)(a2 + 8);
  if (*(const char **)a2 != v6)
  {
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 *)v5;
      BOOL v8 = v7 > 0x20;
      uint64_t v9 = (1 << v7) & 0x100002400;
      if (v8 || v9 == 0) {
        break;
      }
      if (++v5 == v6)
      {
        *(void *)a2 = v6;
        goto LABEL_15;
      }
    }
  }
  *(void *)a2 = v5;
  if (v5 == v6)
  {
LABEL_15:
    *(_DWORD *)(a2 + 16) = 12;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
    *(_DWORD *)a1 = 12;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *(void *)(a1 + 8) = v6;
    return;
  }
  int v11 = *v5;
  switch(v11)
  {
    case ',':
      int v12 = 3;
      goto LABEL_18;
    case ')':
      int v12 = 2;
LABEL_18:
      *(_DWORD *)(a2 + 16) = v12;
      *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
      *(void *)(a2 + 32) = 1;
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)a1 = v12;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = 1;
      break;
    case '(':
      *(_DWORD *)(a2 + 16) = 1;
      *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
      *(void *)(a2 + 32) = 1;
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)a1 = 1;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = 1;
      break;
    default:
      int v13 = v5;
      while (1)
      {
        unsigned int v14 = *(unsigned __int8 *)v13;
        BOOL v8 = v14 > 0x2C;
        uint64_t v15 = (1 << v14) & 0x130100002400;
        if (!v8 && v15 != 0) {
          break;
        }
        if (++v13 == v6)
        {
          int v13 = v6;
          break;
        }
      }
      *(void *)&long long v38 = v5;
      *((void *)&v38 + 1) = v13 - v5;
      uint64_t v37 = 0;
      double v17 = strtod(v5, &v37);
      long long v18 = v37;
      if (v37 != (char *)v38)
      {
        *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
        *(_DWORD *)(a2 + 16) = 4;
        long long v19 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
        *(_OWORD *)(a2 + 20) = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
        int v20 = v39.__r_.__value_.__r.__words[2];
        *(_DWORD *)(a2 + 36) = v39.__r_.__value_.__r.__words[2];
        *(double *)(a2 + 40) = v17;
        *(_DWORD *)a1 = 4;
        *(_OWORD *)(a1 + 4) = v19;
        *(_DWORD *)(a1 + 20) = v20;
        *(double *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
        return;
      }
      if (*((void *)&v38 + 1) != 5) {
        goto LABEL_38;
      }
      __darwin_ct_rune_t v21 = *v37;
      __darwin_ct_rune_t v22 = __toupper(101);
      if (v22 != __toupper(v21)) {
        goto LABEL_38;
      }
      __darwin_ct_rune_t v23 = v18[1];
      __darwin_ct_rune_t v24 = __toupper(109);
      if (v24 != __toupper(v23)) {
        goto LABEL_38;
      }
      __darwin_ct_rune_t v25 = v18[2];
      __darwin_ct_rune_t v26 = __toupper(112);
      if (v26 == __toupper(v25)
        && (v27 = v18[3], __darwin_ct_rune_t v28 = __toupper(116), v28 == __toupper(v27))
        && (__darwin_ct_rune_t v29 = v18[4], v30 = __toupper(121), v30 == __toupper(v29)))
      {
        *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
        int v31 = 5;
      }
      else
      {
LABEL_38:
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"point";
        v39.__r_.__value_.__l.__size_ = 5;
        if (sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
        {
          *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
          int v31 = 6;
        }
        else
        {
          v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"multipoint";
          v39.__r_.__value_.__l.__size_ = 10;
          if (sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
          {
            *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
            int v31 = 7;
          }
          else
          {
            v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"linestring";
            v39.__r_.__value_.__l.__size_ = 10;
            if (sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
            {
              *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
              int v31 = 8;
            }
            else
            {
              v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"polygon";
              v39.__r_.__value_.__l.__size_ = 7;
              if (sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
              {
                *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
                int v31 = 9;
              }
              else
              {
                v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"multipolygon";
                v39.__r_.__value_.__l.__size_ = 12;
                if (sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
                {
                  *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
                  int v31 = 10;
                }
                else
                {
                  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)"z";
                  v39.__r_.__value_.__l.__size_ = 1;
                  if (!sub_4CCB0((char **)&v38, &v39.__r_.__value_.__l.__data_))
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(v36, "Parse error on wkt input: ");
                    sub_4CD64((uint64_t)v36, (uint64_t)&v38, &v39);
                    uint64_t v35 = (void *)sub_2F404((uint64_t)exception, (long long *)&v39);
                  }
                  *(_OWORD *)((char *)v39.__r_.__value_.__r.__words + 4) = v38;
                  int v31 = 11;
                }
              }
            }
          }
        }
      }
      *(_DWORD *)(a2 + 16) = v31;
      long long v32 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
      int v33 = v39.__r_.__value_.__r.__words[2];
      *(_DWORD *)(a2 + 36) = v39.__r_.__value_.__r.__words[2];
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)a1 = v31;
      *(_OWORD *)(a1 + 4) = v32;
      *(_DWORD *)(a1 + 20) = v33;
      break;
  }
  *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
}

void sub_4C78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4C80C(void *a1, int a2)
{
  sub_4C310((uint64_t)v6, (uint64_t)a1);
  if (v6[0] == 5)
  {
    sub_4C310((uint64_t)v6, (uint64_t)a1);
    *a1 += v7;
    a1[2] = 0;
    a1[3] = "";
    a1[4] = 0;
    a1[5] = 0;
    return -1;
  }
  else
  {
    sub_4CE08((uint64_t)v6, a1, 1);
    uint64_t v5 = sub_4CF20(a1, a2);
    sub_4CE08((uint64_t)v6, a1, 2);
    return v5;
  }
}

void sub_4C8D8(uint64_t a1, void *a2, int a3)
{
  sub_4C310((uint64_t)&v8, (uint64_t)a2);
  if (v8 == 5)
  {
    sub_4C310((uint64_t)&v8, (uint64_t)a2);
    *a2 += v10;
    a2[4] = 0;
    a2[5] = 0;
    a2[2] = 0;
    a2[3] = "";
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_4CE08((uint64_t)&v8, a2, 1);
    uint64_t v8 = sub_4CF20(a2, a3);
    int v9 = v6;
    sub_30C0C((char **)a1, &v8);
    while (1)
    {
      sub_4C310((uint64_t)&v8, (uint64_t)a2);
      if (v8 != 3) {
        break;
      }
      sub_4CE08((uint64_t)&v8, a2, 3);
      uint64_t v8 = sub_4CF20(a2, a3);
      int v9 = v7;
      sub_30C0C((char **)a1, &v8);
    }
    sub_4CE08((uint64_t)&v8, a2, 2);
  }
}

void sub_4CA00(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_4CA30(uint64_t a1, void *a2, int a3)
{
  sub_4C310((uint64_t)__p, (uint64_t)a2);
  if (LODWORD(__p[0]) == 5)
  {
    sub_4C310((uint64_t)__p, (uint64_t)a2);
    *a2 += v10;
    a2[4] = 0;
    a2[5] = 0;
    a2[2] = 0;
    a2[3] = "";
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_4CE08((uint64_t)__p, a2, 1);
    sub_4C8D8((uint64_t)__p, a2, a3);
    int v6 = *(void **)(a1 + 8);
    if ((unint64_t)v6 >= *(void *)(a1 + 16)) {
      goto LABEL_5;
    }
LABEL_4:
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    *(_OWORD *)int v6 = *(_OWORD *)__p;
    v6[2] = v10;
    *(void *)(a1 + 8) = v6 + 3;
    while (1)
    {
      sub_4C310((uint64_t)__p, (uint64_t)a2);
      if (LODWORD(__p[0]) != 3) {
        break;
      }
      sub_4CE08((uint64_t)__p, a2, 3);
      sub_4C8D8((uint64_t)__p, a2, a3);
      int v6 = *(void **)(a1 + 8);
      if ((unint64_t)v6 < *(void *)(a1 + 16)) {
        goto LABEL_4;
      }
LABEL_5:
      int v7 = sub_4D088((char **)a1, (uint64_t)__p);
      uint64_t v8 = __p[0];
      *(void *)(a1 + 8) = v7;
      if (v8)
      {
        __p[1] = v8;
        operator delete(v8);
      }
    }
    sub_4CE08((uint64_t)__p, a2, 2);
  }
}

void sub_4CBE4(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

void ***sub_4CBF8(void ***a1)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        int v7 = v8;
        if (v8)
        {
          int v9 = (char *)*(v3 - 2);
          int v6 = v7;
          if (v9 != v7)
          {
            uint64_t v10 = (char *)*(v3 - 2);
            do
            {
              int v12 = (void *)*((void *)v10 - 3);
              v10 -= 24;
              int v11 = v12;
              if (v12)
              {
                *((void *)v9 - 2) = v11;
                operator delete(v11);
              }
              int v9 = v10;
            }
            while (v10 != v7);
            int v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        long long v3 = v5;
      }
      while (v5 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_4CCB0(char **a1, char **a2)
{
  unint64_t v2 = a1[1];
  if (v2 != a2[1]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  long long v3 = *a2;
  BOOL v4 = *a1;
  uint64_t v5 = v2 - 1;
  do
  {
    __darwin_ct_rune_t v6 = *v4;
    __darwin_ct_rune_t v7 = __toupper(*v3);
    BOOL v9 = v7 == __toupper(v6);
    uint64_t result = v9;
    BOOL v9 = !v9 || v5-- == 0;
    ++v3;
    ++v4;
  }
  while (!v9);
  return result;
}

std::string *sub_4CD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::string::reserve(a3, v6 + *(void *)(a2 + 8));
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a1;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 8);
  }
  std::string::append(a3, v8, v9);
  return std::string::append(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
}

void sub_4CDEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_4CE08(uint64_t a1, void *a2, int a3)
{
  sub_4C310(a1, (uint64_t)a2);
  *a2 += *(void *)(a1 + 16);
  a2[2] = 0;
  a2[3] = "";
  a2[4] = 0;
  a2[5] = 0;
  if (*(_DWORD *)a1 != a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(v8, "Parse error on wkt input: ");
    sub_4CD64((uint64_t)v8, a1 + 8, &v9);
    int v7 = (void *)sub_2F404((uint64_t)exception, (long long *)&v9);
  }
}

void sub_4CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4CF20(void *a1, int a2)
{
  sub_4CE08((uint64_t)v15, a1, 4);
  sub_4CE08((uint64_t)v13, a1, 4);
  if (a2 == 1) {
    sub_4CE08((uint64_t)&v12, a1, 4);
  }
  double v4 = v16;
  uint64_t result = -1;
  if (v16 <= 180.0 && v14 >= -85.0511288 && v14 <= 85.0511288 && v16 >= -180.0)
  {
    double v6 = fmax(v14, -85.0511288);
    double v7 = v6 * 3.14159265 / 180.0;
    BOOL v8 = v6 < 85.0511288;
    double v9 = 1.48442223;
    if (v8) {
      double v9 = v7;
    }
    long double v10 = sin(v9);
    LODWORD(v11) = ((log((v10 + 1.0) / (1.0 - v10)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v11 >= 0xFFFFFFFE) {
      uint64_t v11 = 4294967294;
    }
    else {
      uint64_t v11 = v11;
    }
    return ((v4 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v11 << 32);
  }
  return result;
}

char *sub_4D088(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    double v7 = (char *)operator new(24 * v6);
  }
  else
  {
    double v7 = 0;
  }
  BOOL v8 = &v7[24 * v3];
  double v9 = &v7[24 * v6];
  *(_OWORD *)BOOL v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long double v10 = v8 + 24;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    int v13 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v14 = *(_OWORD *)(v11 - 24);
    v11 -= 24;
    *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
    v8 -= 24;
    *((void *)v13 - 1) = *((void *)v11 + 2);
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
  }
  while (v11 != v12);
  uint64_t v15 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v11 != v15)
  {
    double v16 = v11;
    do
    {
      long long v18 = (void *)*((void *)v16 - 3);
      v16 -= 24;
      double v17 = v18;
      if (v18)
      {
        *((void *)v11 - 2) = v17;
        operator delete(v17);
      }
      uint64_t v11 = v16;
    }
    while (v16 != v15);
    uint64_t v11 = v15;
  }
  if (v11) {
LABEL_20:
  }
    operator delete(v11);
  return v10;
}

char *sub_4D1F4(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    double v7 = (char *)operator new(24 * v6);
  }
  else
  {
    double v7 = 0;
  }
  BOOL v8 = &v7[24 * v3];
  double v9 = &v7[24 * v6];
  *(_OWORD *)BOOL v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long double v10 = v8 + 24;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = (void **)v10;
    a1[2] = (void **)v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_26;
  }
  do
  {
    int v13 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v14 = *(_OWORD *)(v12 - 3);
    v12 -= 3;
    *(_OWORD *)(v8 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
    v8 -= 24;
    *((void *)v13 - 1) = v12[2];
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
  while (v12 != v11);
  uint64_t v15 = *a1;
  uint64_t v12 = a1[1];
  *a1 = (void **)v8;
  a1[1] = (void **)v10;
  a1[2] = (void **)v9;
  if (v12 != v15)
  {
    double v16 = v12;
    do
    {
      long long v19 = (char *)*(v16 - 3);
      v16 -= 3;
      long long v18 = v19;
      if (v19)
      {
        int v20 = (char *)*(v12 - 2);
        double v17 = v18;
        if (v20 != v18)
        {
          __darwin_ct_rune_t v21 = (char *)*(v12 - 2);
          do
          {
            __darwin_ct_rune_t v23 = (void *)*((void *)v21 - 3);
            v21 -= 24;
            __darwin_ct_rune_t v22 = v23;
            if (v23)
            {
              *((void *)v20 - 2) = v22;
              operator delete(v22);
            }
            int v20 = v21;
          }
          while (v21 != v18);
          double v17 = *v16;
        }
        *(v12 - 2) = v18;
        operator delete(v17);
      }
      uint64_t v12 = v16;
    }
    while (v16 != v15);
    uint64_t v12 = v15;
  }
  if (v12) {
LABEL_26:
  }
    operator delete(v12);
  return v10;
}

void sub_4D3A0(int a1, void ***a2)
{
  if (a1 == 4)
  {
    unint64_t v3 = *a2;
    if (!*a2) {
      return;
    }
    double v9 = a2[1];
    uint64_t v5 = *a2;
    if (v9 == v3) {
      goto LABEL_23;
    }
    long double v10 = a2[1];
    do
    {
      int v13 = (char *)*(v10 - 3);
      v10 -= 3;
      uint64_t v12 = v13;
      if (v13)
      {
        long long v14 = (char *)*(v9 - 2);
        uint64_t v11 = v12;
        if (v14 != v12)
        {
          uint64_t v15 = (char *)*(v9 - 2);
          do
          {
            double v17 = (void *)*((void *)v15 - 3);
            v15 -= 24;
            double v16 = v17;
            if (v17)
            {
              *((void *)v14 - 2) = v16;
              operator delete(v16);
            }
            long long v14 = v15;
          }
          while (v15 != v12);
          uint64_t v11 = *v10;
        }
        *(v9 - 2) = v12;
        operator delete(v11);
      }
      double v9 = v10;
    }
    while (v10 != v3);
    goto LABEL_22;
  }
  if (a1 != 3) {
    return;
  }
  unint64_t v3 = *a2;
  if (!*a2) {
    return;
  }
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  if (v4 != v3)
  {
    unint64_t v6 = a2[1];
    do
    {
      BOOL v8 = *(v6 - 3);
      v6 -= 3;
      double v7 = v8;
      if (v8)
      {
        *(v4 - 2) = v7;
        operator delete(v7);
      }
      unint64_t v4 = v6;
    }
    while (v6 != v3);
LABEL_22:
    uint64_t v5 = *a2;
  }
LABEL_23:
  a2[1] = v3;

  operator delete(v5);
}

void *sub_4D4C4(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    BOOL v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_4D59C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_4D570(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A63BC((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4D59C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        uint64_t v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_4D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_4D6D0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = operator new(24 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    void v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4D4C4(&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 24;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4D794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D7D0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_4D7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20A6434((void **)((char *)v3 + v4), v3);
  }
  *(void *)(v2 + 8) = v3;
  sub_4D7D0((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_4D7D0(void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = (void ***)*a1;
    uint64_t v3 = (void **)**a1;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        uint64_t v6 = v2[1];
        do
        {
          unint64_t v9 = (char *)*(v6 - 3);
          v6 -= 3;
          uint64_t v8 = v9;
          if (v9)
          {
            int64_t v10 = (char *)*(v4 - 2);
            unint64_t v7 = v8;
            if (v10 != v8)
            {
              uint64_t v11 = (char *)*(v4 - 2);
              do
              {
                int v13 = (void *)*((void *)v11 - 3);
                v11 -= 24;
                uint64_t v12 = v13;
                if (v13)
                {
                  *((void *)v10 - 2) = v12;
                  operator delete(v12);
                }
                int64_t v10 = v11;
              }
              while (v11 != v8);
              unint64_t v7 = *v6;
            }
            *(v4 - 2) = v8;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_4D8A0(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1] - *a2;
  if (v2)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v2 / 12;
    uint64_t v8 = result + 8;
    do
    {
      uint64_t v9 = *a2 + v5;
      int64_t v10 = (char *)v4 + *(void *)(*v4 - 24);
      int v11 = *((_DWORD *)v10 + 2);
      *((void *)v10 + 2) = 16;
      uint64_t v12 = (void *)std::ostream::operator<<();
      sub_188FC78(v12, (uint64_t)" ", 1);
      LODWORD(v13) = *(_DWORD *)(v9 + 4);
      long double v14 = exp((double)v13 * -6.28318531 / 4294967300.0 + 3.14159265);
      atan((v14 + -1.0 / v14) * 0.5);
      uint64_t result = std::ostream::operator<<();
      *(_DWORD *)(v8 + *(void *)(*v4 - 24)) = v11;
      if (++v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2)) {
        uint64_t result = (uint64_t)sub_188FC78(v4, (uint64_t)",", 1);
      }
      v5 += 12;
    }
    while (v7 != v6);
  }
  return result;
}

void *sub_4DA64(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    uint64_t result = sub_188FC78(result, (uint64_t)"()", 2);
    uint64_t v5 = a2[1] - *a2;
    if (!v5) {
      return result;
    }
  }
  else
  {
    uint64_t v5 = v4 - *a2;
    if (!v5) {
      return result;
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = v5 / 24;
  do
  {
    sub_188FC78(v3, (uint64_t)"(", 1);
    sub_4D8A0((uint64_t)v3, (void *)(*a2 + v6));
    uint64_t result = sub_188FC78(v3, (uint64_t)")", 1);
    if (++v7 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)) {
      uint64_t result = sub_188FC78(v3, (uint64_t)",", 1);
    }
    v6 += 24;
  }
  while (v8 != v7);
  return result;
}

uint64_t sub_4DB90(uint64_t *a1)
{
  sub_E1B4((uint64_t)v14);
  sub_188FC78(&v15, (uint64_t)"MULTIPOINT(", 11);
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = v2 / 12;
    do
    {
      uint64_t v6 = *a1;
      sub_188FC78(&v15, (uint64_t)"(", 1);
      uint64_t v7 = (char *)&v16[-1] + *(void *)(v15 - 24);
      int v8 = *((_DWORD *)v7 + 2);
      *((void *)v7 + 2) = 16;
      uint64_t v9 = (void *)std::ostream::operator<<();
      sub_188FC78(v9, (uint64_t)" ", 1);
      LODWORD(v10) = *(_DWORD *)(v6 + v3 + 4);
      long double v11 = exp((double)v10 * -6.28318531 / 4294967300.0 + 3.14159265);
      atan((v11 + -1.0 / v11) * 0.5);
      std::ostream::operator<<();
      *(_DWORD *)((char *)v16 + *(void *)(v15 - 24)) = v8;
      sub_188FC78(&v15, (uint64_t)")", 1);
      if (++v4 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)) {
        sub_188FC78(&v15, (uint64_t)",", 1);
      }
      v3 += 12;
    }
    while (v5 != v4);
  }
  sub_188FC78(&v15, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v14
  uint64_t v15 = v12;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_4DED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4DEFC(void *a1)
{
  sub_E1B4((uint64_t)v4);
  sub_188FC78(v5, (uint64_t)"POLYGON(", 8);
  sub_4DA64(v5, a1);
  sub_188FC78(v5, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_4E098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_4E0AC(void *a1)
{
  sub_E1B4((uint64_t)v8);
  sub_188FC78(v9, (uint64_t)"MULTIPOLYGON(", 13);
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = v2 / 24;
    do
    {
      sub_188FC78(v9, (uint64_t)"(", 1);
      sub_4DA64(v9, (void *)(*a1 + v3));
      sub_188FC78(v9, (uint64_t)")", 1);
      if (++v4 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3)) {
        sub_188FC78(v9, (uint64_t)",", 1);
      }
      v3 += 24;
    }
    while (v5 != v4);
  }
  sub_188FC78(v9, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_4E308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4E31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_4E344@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, unint64_t a5@<D0>)
{
  if (*a1 == a1[1])
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    double v16 = operator new(4uLL);
    *(void *)(a4 + 48) = v16;
    *v16++ = 0;
    *(void *)(a4 + 56) = v16;
    *(void *)(a4 + 64) = v16;
    double result = 0.0;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
  }
  else
  {
    sub_3A0F0(a1, a2, a3, &v22, a5);
    *(_OWORD *)std::string __p = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long v18 = 0u;
    unsigned int v21 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 2) - 1;
    uint64_t v7 = v22;
    int v8 = v23;
    if (v22 != v23)
    {
      do
      {
        unsigned int v9 = *(_DWORD *)v7;
        uint64_t v10 = v7[1];
        LODWORD(v17) = *((_DWORD *)v7 + 1);
        *((void *)&v17 + 1) = v10;
        unsigned int v26 = v9;
        LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
        if (v21 >= v17) {
          long double v11 = &v21;
        }
        else {
          long double v11 = (unsigned int *)&v24;
        }
        if (v17 == -1) {
          uint64_t v12 = &v21;
        }
        else {
          uint64_t v12 = v11;
        }
        if (v21 == -1) {
          uint64_t v12 = (unsigned int *)&v24;
        }
        unsigned int v21 = *v12;
        LOBYTE(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        sub_4E80C((char **)&__p[1], &v26, &v17, (char *)&v24);
        if (v17 != v9)
        {
          long long v24 = v17;
          LODWORD(v++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
          int v25 = v17;
          unsigned int v26 = v9;
          if (v21 >= v9) {
            unint64_t v13 = &v21;
          }
          else {
            unint64_t v13 = &v26;
          }
          if (v9 == -1) {
            unint64_t v13 = &v21;
          }
          if (v21 == -1) {
            long double v14 = &v26;
          }
          else {
            long double v14 = v13;
          }
          unsigned int v21 = *v14;
          LOBYTE(v26) = 0;
          sub_4E80C((char **)&__p[1], &v25, &v24, (char *)&v26);
        }
        v7 += 2;
      }
      while (v7 != v8);
    }
    sub_4E544((uint64_t)v18, a4);
    if (__p[1])
    {
      *(void **)&long long v20 = __p[1];
      operator delete(__p[1]);
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    if (v22)
    {
      __darwin_ct_rune_t v23 = v22;
      operator delete(v22);
    }
  }
  return result;
}

void sub_4E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4E544(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  uint64_t v4 = (void *)(a2 + 48);
  uint64_t v5 = operator new(4uLL);
  uint64_t v7 = *(unsigned int **)(a1 + 24);
  uint64_t v6 = *(char **)(a1 + 32);
  void *v4 = v5;
  *v5++ = 0;
  unint64_t v8 = 126 - 2 * __clz((v6 - (char *)v7) >> 5);
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (v6 == (char *)v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_4E958(v7, v6, (uint64_t)&v35, v9, 1);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v10 != v11)
  {
    uint64_t v12 = v10 + 8;
    do
    {
      uint64_t v14 = v12 - 8;
      unsigned int v13 = *(_DWORD *)(v12 - 8);
      if (*(unsigned char *)(v12 + 16)) {
        sub_50010(a2, v13, (_OWORD *)v12);
      }
      else {
        sub_4FEF0(a2, v13, (_OWORD *)v12);
      }
      v12 += 32;
    }
    while (v14 + 32 != v11);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 48);
  if (v15 != -1)
  {
    uint64_t v16 = *(void *)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 56);
    if (((unint64_t)(v17 - v16) >> 2) - 1 <= v15)
    {
      unint64_t v18 = v15 + 2;
      unint64_t v19 = (v17 - v16) >> 2;
      if (v18 <= v19)
      {
        if (v18 < v19) {
          *(void *)(a2 + 56) = v16 + 4 * v18;
        }
      }
      else
      {
        sub_500DC((uint64_t)v4, v18 - v19, (const float *)(v17 - 4));
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if (*(void *)a1 != v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = v20 - *(void *)a1;
    do
    {
      unsigned int v24 = v21;
      int v25 = *(char **)(a2 + 96);
      unsigned int v26 = *(unsigned char **)(a2 + 104);
      unint64_t v27 = v26 - v25;
      ++v21;
      if (v26 - v25 <= (unint64_t)v24)
      {
        unint64_t v28 = v21 - v27;
        if (v21 <= v27)
        {
          if (v21 >= v27) {
            continue;
          }
          __darwin_ct_rune_t v23 = &v25[v21];
        }
        else
        {
          uint64_t v29 = *(void *)(a2 + 112);
          if (v29 - (uint64_t)v26 < v28)
          {
            unint64_t v30 = v29 - (void)v25;
            unint64_t v31 = 2 * (v29 - (void)v25);
            if (v31 <= v21) {
              unint64_t v31 = v21;
            }
            if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v32 = v31;
            }
            int v33 = (char *)operator new(v32);
            double v34 = (char *)(v25 - v26);
            if (v25 == v26) {
              double v34 = 0;
            }
            *(void *)(a2 + 96) = &v33[v27 + (void)v34];
            *(void *)(a2 + 104) = &v33[v21];
            *(void *)(a2 + 112) = &v33[v32];
            if (v25) {
              operator delete(v25);
            }
            continue;
          }
          __darwin_ct_rune_t v23 = &v26[v28];
        }
        *(void *)(a2 + 104) = v23;
      }
    }
    while (v22 != v21);
  }
}

void sub_4E75C(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

void sub_4E770(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

void sub_4E784(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_4E798(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

char *sub_4E80C(char **a1, _DWORD *a2, _OWORD *a3, char *a4)
{
  uint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(_DWORD *)uint64_t v9 = *a2;
    *(_OWORD *)(v9 + 8) = *a3;
    v9[24] = *a4;
    uint64_t v10 = v9 + 32;
    goto LABEL_13;
  }
  uint64_t v11 = *a1;
  uint64_t v12 = (v9 - *a1) >> 5;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v14 = v8 - (void)v11;
  if (v14 >> 4 > v13) {
    unint64_t v13 = v14 >> 4;
  }
  BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  if (!v15) {
    unint64_t v16 = v13;
  }
  if (v16 >> 59) {
    sub_188D718();
  }
  uint64_t v17 = 32 * v16;
  unint64_t v18 = (char *)operator new(32 * v16);
  unint64_t v19 = &v18[32 * v12];
  uint64_t v20 = &v18[v17];
  *(_DWORD *)unint64_t v19 = *a2;
  *(_OWORD *)(v19 + 8) = *a3;
  v19[24] = *a4;
  uint64_t v10 = v19 + 32;
  if (v9 == v11)
  {
    *a1 = v19;
    a1[1] = v10;
    a1[2] = v20;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    long long v21 = *((_OWORD *)v9 - 2);
    uint64_t v22 = v19 - 32;
    *(_OWORD *)(v19 - 23) = *(_OWORD *)(v9 - 23);
    *((_OWORD *)v19 - 2) = v21;
    v9 -= 32;
    v19 -= 32;
  }
  while (v9 != v11);
  *a1 = v22;
  a1[1] = v10;
  a1[2] = v20;
  if (v11) {
LABEL_12:
  }
    operator delete(v11);
LABEL_13:
  a1[1] = v10;
  return v10 - 32;
}

void sub_4E958(unsigned int *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_4F01C(long long *a1, int *a2, long long *a3)
{
  unsigned int v3 = *a2;
  if (*a2 < *(_DWORD *)a1
    || ((v4 = a2[2], *(_DWORD *)a1 >= v3) ? (BOOL v5 = v4 >= *((_DWORD *)a1 + 2)) : (BOOL v5 = 1), !v5))
  {
    if (*(_DWORD *)a3 < v3 || (v3 >= *(_DWORD *)a3 ? (BOOL v9 = *((_DWORD *)a3 + 2) >= a2[2]) : (BOOL v9 = 1), !v9))
    {
      *(_OWORD *)unint64_t v22 = *a1;
      long long v14 = *a1;
      *(_OWORD *)&unsigned char v22[16] = a1[1];
      long long v15 = *(long long *)((char *)a3 + 9);
      *a1 = *a3;
      *(long long *)((char *)a1 + 9) = v15;
      *a3 = v14;
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v22[9];
      return 1;
    }
    *(_OWORD *)long long v20 = *a1;
    long long v10 = *a1;
    *(_OWORD *)&v20[16] = a1[1];
    long long v11 = *(_OWORD *)((char *)a2 + 9);
    *a1 = *(_OWORD *)a2;
    *(long long *)((char *)a1 + 9) = v11;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v20[9];
    if (*(_DWORD *)a3 < *a2
      || (uint64_t v7 = 1, *a2 >= *(_DWORD *)a3) && *((_DWORD *)a3 + 2) < a2[2])
    {
      *(_OWORD *)unsigned int v21 = *(_OWORD *)a2;
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)&unsigned char v21[16] = *((_OWORD *)a2 + 1);
      long long v13 = *(long long *)((char *)a3 + 9);
      *(_OWORD *)a2 = *a3;
      *(_OWORD *)((char *)a2 + 9) = v13;
      *a3 = v12;
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v21[9];
      return 2;
    }
    return v7;
  }
  if (*(_DWORD *)a3 >= v3 && (v3 < *(_DWORD *)a3 || *((_DWORD *)a3 + 2) >= v4)) {
    return 0;
  }
  *(_OWORD *)char v23 = *(_OWORD *)a2;
  long long v16 = *(_OWORD *)a2;
  *(_OWORD *)&v23[16] = *((_OWORD *)a2 + 1);
  long long v17 = *(long long *)((char *)a3 + 9);
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)((char *)a2 + 9) = v17;
  *a3 = v16;
  *(long long *)((char *)a3 + 9) = *(_OWORD *)&v23[9];
  if (*a2 >= *(_DWORD *)a1)
  {
    uint64_t v7 = 1;
    if (*(_DWORD *)a1 < *a2 || a2[2] >= *((_DWORD *)a1 + 2)) {
      return v7;
    }
  }
  *(_OWORD *)BOOL v24 = *a1;
  long long v18 = *a1;
  *(_OWORD *)&v24[16] = a1[1];
  long long v19 = *(_OWORD *)((char *)a2 + 9);
  *a1 = *(_OWORD *)a2;
  *(long long *)((char *)a1 + 9) = v19;
  *(_OWORD *)a2 = v18;
  *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v24[9];
  return 2;
}

unsigned int *sub_4F1CC(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = a1[2];
  long long v28 = *(_OWORD *)(a1 + 3);
  unsigned int v4 = *(_DWORD *)(a2 - 32);
  unsigned int v5 = *(void *)a1;
  if (v5 >= v4 && (v4 >= v5 ? (BOOL v6 = v3 >= *(_DWORD *)(a2 - 24)) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = a1 + 8;
    do
    {
      unint64_t v8 = v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      unsigned int v9 = *v7;
      if (v5 < *v7) {
        break;
      }
      unsigned int v10 = v7[2];
      v7 += 8;
    }
    while (v9 < v5 || v3 >= v10);
  }
  else
  {
    long long v12 = a1 + 8;
    do
    {
      unint64_t v8 = v12;
      unsigned int v13 = *v12;
      if (v5 < *v12) {
        break;
      }
      unsigned int v14 = v12[2];
      v12 += 8;
    }
    while (v13 < v5 || v3 >= v14);
  }
  if ((unint64_t)v8 < a2)
  {
    for (a2 -= 32; v5 < v4 || v4 >= v5 && v3 < *(_DWORD *)(a2 + 8); a2 -= 32)
    {
      unsigned int v16 = *(_DWORD *)(a2 - 32);
      unsigned int v4 = v16;
    }
  }
  while ((unint64_t)v8 < a2)
  {
    *(_OWORD *)BOOL v27 = *(_OWORD *)v8;
    *(_OWORD *)&v27[16] = *((_OWORD *)v8 + 1);
    long long v17 = *(_OWORD *)a2;
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)unint64_t v8 = v17;
    *(_OWORD *)(a2 + 9) = *(_OWORD *)&v27[9];
    *(_OWORD *)a2 = *(_OWORD *)v27;
    long long v18 = v8 + 8;
    do
    {
      unint64_t v8 = v18;
      unsigned int v19 = *v18;
      if (v5 < *v18) {
        break;
      }
      unsigned int v20 = v18[2];
      v18 += 8;
    }
    while (v19 < v5 || v3 >= v20);
    do
    {
      do
      {
        unsigned int v23 = *(_DWORD *)(a2 - 32);
        a2 -= 32;
        unsigned int v22 = v23;
      }
      while (v5 < v23);
    }
    while (v22 >= v5 && v3 < *(_DWORD *)(a2 + 8));
  }
  if (v8 - 8 != a1)
  {
    long long v25 = *((_OWORD *)v8 - 2);
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)v8 - 23);
    *(_OWORD *)a1 = v25;
  }
  *((void *)v8 - 4) = v2;
  *(v8 - 6) = v3;
  *(void *)((char *)v8 - 15) = *(void *)((char *)&v28 + 5);
  *(void *)(v8 - 5) = v28;
  return v8;
}

unint64_t sub_4F388(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  long long v29 = *(_OWORD *)((char *)a1 + 12);
  unsigned int v5 = *a1;
  while (1)
  {
    unsigned int v6 = a1[v2 + 4];
    if (v6 >= v5 && (v5 < v6 || LODWORD(a1[v2 + 5]) >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v8 = (unint64_t)&a1[v2 + 4];
  unsigned int v9 = (unsigned int *)(a2 - 32);
  if (v2 * 8)
  {
    do
    {
      unsigned int v10 = v9;
      unsigned int v11 = *v9;
      if (*v9 < v5) {
        break;
      }
      unsigned int v12 = v9[2];
      v9 -= 8;
    }
    while (v5 < v11 || v12 >= v4);
  }
  else
  {
    while (1)
    {
      unsigned int v10 = v9;
      long long v15 = v9 + 8;
      if (v8 >= (unint64_t)v15) {
        break;
      }
      if (*v10 >= v5)
      {
        unsigned int v9 = v10 - 8;
        if (v5 < *v10 || v10[2] >= v4) {
          continue;
        }
      }
      goto LABEL_24;
    }
    unsigned int v10 = v15;
  }
LABEL_24:
  unint64_t v16 = v8;
  if (v8 < (unint64_t)v10)
  {
    long long v17 = (long long *)v10;
    do
    {
      *(_OWORD *)long long v28 = *(_OWORD *)v16;
      *(_OWORD *)&v28[16] = *(_OWORD *)(v16 + 16);
      long long v18 = *v17;
      *(_OWORD *)(v16 + 9) = *(long long *)((char *)v17 + 9);
      *(_OWORD *)unint64_t v16 = v18;
      *(long long *)((char *)v17 + 9) = *(_OWORD *)&v28[9];
      *long long v17 = *(_OWORD *)v28;
      do
      {
        do
        {
          unsigned int v20 = *(_DWORD *)(v16 + 32);
          v16 += 32;
          unsigned int v19 = v20;
        }
        while (v20 < v5);
      }
      while (v5 >= v19 && *(_DWORD *)(v16 + 8) < v4);
      unsigned int v22 = (unsigned int *)(v17 - 2);
      do
      {
        long long v17 = (long long *)v22;
        unsigned int v23 = *v22;
        if (*v22 < v5) {
          break;
        }
        unsigned int v24 = v22[2];
        v22 -= 8;
      }
      while (v5 < v23 || v24 >= v4);
    }
    while (v16 < (unint64_t)v17);
  }
  if ((uint64_t *)(v16 - 32) != a1)
  {
    long long v26 = *(_OWORD *)(v16 - 32);
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)(v16 - 23);
    *(_OWORD *)a1 = v26;
  }
  *(void *)(v16 - 32) = v3;
  *(_DWORD *)(v16 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(void *)(v16 - 15) = *(void *)((char *)&v29 + 5);
  *(void *)(v16 - 20) = v29;
  return v16 - 32;
}

BOOL sub_4F550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = (_OWORD *)(a2 - 32);
      unsigned int v7 = *(_DWORD *)(a2 - 32);
      if (v7 < *(_DWORD *)a1
        || (*(_DWORD *)a1 >= v7 ? (BOOL v8 = *(_DWORD *)(a2 - 24) >= *(_DWORD *)(a1 + 8)) : (BOOL v8 = 1), !v8))
      {
        *(_OWORD *)BOOL v34 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 16);
        long long v10 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 9) = v10;
        _OWORD *v6 = v9;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v34[9];
      }
      return result;
    case 3:
      sub_4F01C((long long *)a1, (int *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      unsigned int v23 = (_DWORD *)(a1 + 32);
      unsigned int v24 = (_OWORD *)(a1 + 64);
      sub_4F01C((long long *)a1, (int *)(a1 + 32), (long long *)(a1 + 64));
      long long v25 = (_OWORD *)(a2 - 32);
      unsigned int v26 = *(_DWORD *)(a2 - 32);
      unsigned int v27 = *(_DWORD *)(a1 + 64);
      if (v26 >= v27 && (v27 < v26 || *(_DWORD *)(a2 - 24) >= *(_DWORD *)(a1 + 72))) {
        return 1;
      }
      *(_OWORD *)long long v36 = *v24;
      long long v29 = *v24;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a1 + 80);
      long long v30 = *(_OWORD *)(a2 - 23);
      *unsigned int v24 = *v25;
      *(_OWORD *)(a1 + 73) = v30;
      *long long v25 = v29;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v36[9];
      if (*(_DWORD *)v24 >= *v23)
      {
        BOOL result = 1;
        if (*v23 < *(_DWORD *)v24 || *(_DWORD *)(a1 + 72) >= *(_DWORD *)(a1 + 40)) {
          return result;
        }
      }
      *(_OWORD *)long long v37 = *(_OWORD *)v23;
      long long v31 = *(_OWORD *)v23;
      *(_OWORD *)&unsigned char v37[16] = *(_OWORD *)(a1 + 48);
      *(_OWORD *)unsigned int v23 = *v24;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
      *unsigned int v24 = v31;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)&v37[9];
      unsigned int v32 = *(_DWORD *)(a1 + 32);
      if (v32 >= *(_DWORD *)a1)
      {
        BOOL result = 1;
        if (*(_DWORD *)a1 < v32 || *(_DWORD *)(a1 + 40) >= *(_DWORD *)(a1 + 8)) {
          return result;
        }
      }
      *(_OWORD *)unsigned int v38 = *(_OWORD *)a1;
      long long v33 = *(_OWORD *)a1;
      *(_OWORD *)&v38[16] = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
      *(_OWORD *)unsigned int v23 = v33;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)&v38[9];
      return 1;
    case 5:
      sub_4F8F0(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a1 + 96), (long long *)(a2 - 32));
      return 1;
    default:
      uint64_t v11 = a1 + 64;
      sub_4F01C((long long *)a1, (int *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v12 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v16 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 < *(_DWORD *)v11) {
      break;
    }
    unsigned int v17 = *(_DWORD *)(v12 + 8);
    if (*(_DWORD *)v11 >= v16 && v17 < *(_DWORD *)(v11 + 8)) {
      goto LABEL_19;
    }
LABEL_12:
    uint64_t v11 = v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2) {
      return 1;
    }
  }
  unsigned int v17 = *(_DWORD *)(v12 + 8);
LABEL_19:
  int v19 = *(_DWORD *)(v12 + 4);
  long long v35 = *(_OWORD *)(v12 + 12);
  *(_OWORD *)(v12 + 9) = *(_OWORD *)(v11 + 9);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
  uint64_t v15 = a1;
  if (v11 != a1)
  {
    uint64_t v20 = v13;
    while (1)
    {
      unsigned int v21 = *(_DWORD *)(a1 + v20 + 32);
      if (v16 >= v21 && (v21 < v16 || v17 >= *(_DWORD *)(a1 + v20 + 40))) {
        break;
      }
      *(_OWORD *)(a1 + v20 + 64) = *(_OWORD *)(a1 + v20 + 32);
      *(_OWORD *)(a1 + v20 + 73) = *(_OWORD *)(a1 + v20 + 41);
      v20 -= 32;
      if (v20 == -64)
      {
        uint64_t v15 = a1;
        goto LABEL_11;
      }
    }
    uint64_t v15 = a1 + v20 + 64;
  }
LABEL_11:
  *(_DWORD *)uint64_t v15 = v16;
  *(_DWORD *)(v15 + 4) = v19;
  *(_DWORD *)(v15 + 8) = v17;
  *(void *)(v15 + 12) = v35;
  *(void *)(v15 + 17) = *(void *)((char *)&v35 + 5);
  if (++v14 != 8) {
    goto LABEL_12;
  }
  return v12 + 32 == a2;
}

__n128 sub_4F8F0(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  sub_4F01C((long long *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || (*(_DWORD *)a3 >= *(_DWORD *)a4 ? (BOOL v11 = *((_DWORD *)a4 + 2) >= *((_DWORD *)a3 + 2)) : (BOOL v11 = 1), !v11))
  {
    *(_OWORD *)unsigned int v26 = *a3;
    long long v12 = *a3;
    *(_OWORD *)&v26[16] = a3[1];
    long long v13 = *(long long *)((char *)a4 + 9);
    *a3 = *a4;
    *(long long *)((char *)a3 + 9) = v13;
    *a4 = v12;
    __n128 result = *(__n128 *)&v26[9];
    *(long long *)((char *)a4 + 9) = *(_OWORD *)&v26[9];
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a2 >= *(_DWORD *)a3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      *(_OWORD *)unsigned int v27 = *a2;
      long long v14 = *a2;
      *(_OWORD *)&v27[16] = a2[1];
      long long v15 = *(long long *)((char *)a3 + 9);
      *a2 = *a3;
      *(long long *)((char *)a2 + 9) = v15;
      *a3 = v14;
      __n128 result = *(__n128 *)&v27[9];
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v27[9];
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a1 >= *(_DWORD *)a2 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
      {
        *(_OWORD *)long long v28 = *(_OWORD *)a1;
        long long v16 = *(_OWORD *)a1;
        *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 16);
        long long v17 = *(long long *)((char *)a2 + 9);
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 9) = v17;
        *a2 = v16;
        __n128 result = *(__n128 *)&v28[9];
        *(long long *)((char *)a2 + 9) = *(_OWORD *)&v28[9];
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a4 >= *(_DWORD *)a5 && *((_DWORD *)a5 + 2) < *((_DWORD *)a4 + 2))
  {
    *(_OWORD *)long long v29 = *a4;
    long long v18 = *a4;
    *(_OWORD *)&v29[16] = a4[1];
    long long v19 = *(long long *)((char *)a5 + 9);
    *a4 = *a5;
    *(long long *)((char *)a4 + 9) = v19;
    *a5 = v18;
    __n128 result = *(__n128 *)&v29[9];
    *(long long *)((char *)a5 + 9) = *(_OWORD *)&v29[9];
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a3 >= *(_DWORD *)a4 && *((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
    {
      *(_OWORD *)long long v30 = *a3;
      long long v20 = *a3;
      *(_OWORD *)&v30[16] = a3[1];
      long long v21 = *(long long *)((char *)a4 + 9);
      *a3 = *a4;
      *(long long *)((char *)a3 + 9) = v21;
      *a4 = v20;
      __n128 result = *(__n128 *)&v30[9];
      *(long long *)((char *)a4 + 9) = *(_OWORD *)&v30[9];
      if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a2 >= *(_DWORD *)a3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
      {
        *(_OWORD *)long long v31 = *a2;
        long long v22 = *a2;
        *(_OWORD *)&v31[16] = a2[1];
        long long v23 = *(long long *)((char *)a3 + 9);
        *a2 = *a3;
        *(long long *)((char *)a2 + 9) = v23;
        *a3 = v22;
        __n128 result = *(__n128 *)&v31[9];
        *(long long *)((char *)a3 + 9) = *(_OWORD *)&v31[9];
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= *(_DWORD *)a2 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
        {
          *(_OWORD *)unsigned int v32 = *(_OWORD *)a1;
          long long v24 = *(_OWORD *)a1;
          *(_OWORD *)&v32[16] = *(_OWORD *)(a1 + 16);
          long long v25 = *(long long *)((char *)a2 + 9);
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 9) = v25;
          *a2 = v24;
          __n128 result = *(__n128 *)&v32[9];
          *(long long *)((char *)a2 + 9) = *(_OWORD *)&v32[9];
        }
      }
    }
  }
  return result;
}

uint64_t sub_4FB50(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      BOOL v8 = (long long *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (*(_DWORD *)v8 < v10
          || (v10 >= *(_DWORD *)v8 ? (BOOL v11 = *(_DWORD *)(result + 32 * v7 + 8) >= *((_DWORD *)v8 + 10)) : (BOOL v11 = 1), !v11))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unsigned int v12 = *a4;
      if (*(_DWORD *)v8 >= *a4)
      {
        unsigned int v13 = a4[2];
        if (v12 < *(_DWORD *)v8 || *((_DWORD *)v8 + 2) >= v13)
        {
          unsigned int v15 = a4[1];
          long long v23 = *(_OWORD *)(a4 + 3);
          do
          {
            long long v16 = a4;
            a4 = (unsigned int *)v8;
            long long v17 = *v8;
            *(_OWORD *)((char *)v16 + 9) = *(long long *)((char *)v8 + 9);
            *(_OWORD *)long long v16 = v17;
            if (v5 < v7) {
              break;
            }
            uint64_t v18 = (2 * v7) | 1;
            BOOL v8 = (long long *)(result + 32 * v18);
            uint64_t v19 = 2 * v7 + 2;
            if (v19 < a3)
            {
              unsigned int v20 = *((_DWORD *)v8 + 8);
              if (*(_DWORD *)v8 < v20
                || (v20 >= *(_DWORD *)v8
                  ? (BOOL v21 = *(_DWORD *)(result + 32 * v18 + 8) >= *((_DWORD *)v8 + 10))
                  : (BOOL v21 = 1),
                    !v21))
              {
                v8 += 2;
                uint64_t v18 = v19;
              }
            }
            if (*(_DWORD *)v8 < v12) {
              break;
            }
            BOOL v22 = v12 < *(_DWORD *)v8 || *((_DWORD *)v8 + 2) >= v13;
            uint64_t v7 = v18;
          }
          while (v22);
          *a4 = v12;
          a4[1] = v15;
          a4[2] = v13;
          *(void *)(a4 + 3) = v23;
          *(void *)((char *)a4 + 17) = *(void *)((char *)&v23 + 5);
        }
      }
    }
  }
  return result;
}

char *sub_4FCDC(char *result, char *a2)
{
  if (a2 - result >= 33)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 5;
    do
    {
      uint64_t v4 = 0;
      *(_OWORD *)long long v28 = *(_OWORD *)result;
      *(_OWORD *)&v28[16] = *((_OWORD *)result + 1);
      int64_t v5 = result;
      do
      {
        uint64_t v7 = v5;
        uint64_t v8 = v4 + 1;
        v5 += 32 * v4 + 32;
        uint64_t v9 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        uint64_t v10 = v9 + 2;
        if (v10 < v2)
        {
          unsigned int v11 = *((_DWORD *)v5 + 8);
          if (*(_DWORD *)v5 < v11
            || ((unsigned int v12 = DWORD2(v7[2 * v8]), v11 >= *(_DWORD *)v5) ? (v13 = v12 >= *((_DWORD *)v5 + 10)) : (v13 = 1), !v13))
          {
            v5 += 32;
            uint64_t v4 = v10;
          }
        }
        long long v6 = *(_OWORD *)v5;
        *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)(v5 + 9);
        _OWORD *v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 32;
      if (v5 == a2)
      {
        *(_OWORD *)(v5 + 9) = *(_OWORD *)&v28[9];
        *(_OWORD *)int64_t v5 = *(_OWORD *)v28;
      }
      else
      {
        long long v14 = *(_OWORD *)a2;
        *(_OWORD *)(v5 + 9) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)int64_t v5 = v14;
        *(_OWORD *)a2 = *(_OWORD *)v28;
        *(_OWORD *)(a2 + 9) = *(_OWORD *)&v28[9];
        uint64_t v15 = v5 - result + 32;
        if (v15 >= 33)
        {
          unint64_t v16 = ((unint64_t)v15 >> 5) - 2;
          unint64_t v17 = v16 >> 1;
          uint64_t v18 = &result[32 * (v16 >> 1)];
          unsigned int v19 = *(_DWORD *)v5;
          unsigned int v20 = *((_DWORD *)v5 + 2);
          if (*(_DWORD *)v18 < *(_DWORD *)v5
            || (v19 >= *(_DWORD *)v18 ? (BOOL v21 = *((_DWORD *)v18 + 2) >= v20) : (BOOL v21 = 1), !v21))
          {
            int v22 = *((_DWORD *)v5 + 1);
            long long v29 = *(_OWORD *)(v5 + 12);
            long long v23 = *(_OWORD *)v18;
            *(_OWORD *)(v5 + 9) = *(_OWORD *)(v18 + 9);
            *(_OWORD *)int64_t v5 = v23;
            if (v16 >= 2)
            {
              while (1)
              {
                unint64_t v25 = v17 - 1;
                unint64_t v17 = (v17 - 1) >> 1;
                unsigned int v26 = &result[32 * v17];
                if (*(_DWORD *)v26 >= v19 && (v19 < *(_DWORD *)v26 || *((_DWORD *)v26 + 2) >= v20)) {
                  break;
                }
                long long v24 = *(_OWORD *)v26;
                *(_OWORD *)(v18 + 9) = *(_OWORD *)(v26 + 9);
                *(_OWORD *)uint64_t v18 = v24;
                uint64_t v18 = &result[32 * v17];
                if (v25 <= 1) {
                  goto LABEL_33;
                }
              }
            }
            unsigned int v26 = v18;
LABEL_33:
            *(_DWORD *)unsigned int v26 = v19;
            *((_DWORD *)v26 + 1) = v22;
            *((_DWORD *)v26 + 2) = v20;
            *(void *)(v26 + 12) = v29;
            *(void *)(v26 + 17) = *(void *)((char *)&v29 + 5);
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

uint64_t sub_4FEF0(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v4 = a1 + 48;
  unsigned int v7 = a2 + 1;
  unsigned int v8 = ((unint64_t)(v6 - v5) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v15, "outgoing arc cannot be inserted because vertices with higher index are already present in the graph");
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v15);
  }
  if (v8 <= a2)
  {
    unint64_t v10 = a2 + 2;
    unint64_t v11 = (v6 - v5) >> 2;
    if (v10 <= v11)
    {
      if (v10 < v11) {
        *(void *)(a1 + 56) = v5 + 4 * v10;
      }
    }
    else
    {
      sub_500DC(v4, v10 - v11, (const float *)(v6 - 4));
    }
  }
  sub_3BFF8((char **)(a1 + 72), a3);
  ++*(_DWORD *)(*(void *)(a1 + 48) + 4 * v7);
  return *(void *)(a1 + 80) - 16;
}

void sub_4FFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_50010(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  if (a2 + 1 < ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2) - 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "incoming arc cannot be inserted because vertices with higher index are already present in the graph");
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }

  return sub_4FEF0(a1, a2, a3);
}