double sub_D6525C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *****a4@<X3>, uint64_t a5@<X8>)
{
  const std::error_condition *v7;
  double result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  void **v21;
  void **v22;
  void *v23;
  int v24;
  __n128 v25;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  std::string *v31;
  long long v32;
  void **v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37[2];
  int64_t v38;
  void *v39[2];
  unsigned __int8 v40;
  void *__p[6];
  int v42;
  void *v43;
  char v44;
  std::string v45;
  __n128 v46;
  long long v47;
  void *v48;
  uint64_t v49;

  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  v7 = (const std::error_condition *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    v15 = *a2;
    v17 = a2[2];
    v16 = a2[3];
    v46.n128_u64[0] = a2[1];
    v18 = sub_37B3A8(v16);
    v19 = *(void *)v18;
    LODWORD(v47) = *(_DWORD *)(v18 + 8);
    v46.n128_u64[1] = v19;
    BYTE4(v47) = sub_DB6E94(v15);
    LOBYTE(v48) = 1;
    *((void *)&v47 + 1) = v17;
    v49 = v16;
    sub_C87D80((uint64_t)&v46, (uint64_t)__p);
    sub_CF8064(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    v20 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(&__p[2], 0, 32);
      qmemcpy(__p, "CyclingETAModule", 16);
      HIBYTE(__p[2]) = 16;
      LOBYTE(v39[0]) = 1;
      LODWORD(v45.__r_.__value_.__l.__data_) = 0;
      __p[4] = (void *)sub_CF8370((uint64_t *)&__p[3], "Runtime", (char *)v39, (uint64_t *)(a5 + 56), (int *)&v45);
      sub_717B8(v20, a3, (uint64_t)__p, *(void *)(a1 + 56));
      v21 = (void **)__p[3];
      if (__p[3])
      {
        v22 = (void **)__p[4];
        v23 = __p[3];
        if (__p[4] != __p[3])
        {
          do
          {
            if (*((char *)v22 - 25) < 0) {
              operator delete(*(v22 - 6));
            }
            v22 -= 6;
          }
          while (v22 != v21);
          v23 = __p[3];
        }
        __p[4] = v21;
        operator delete(v23);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      *(void *)&result = sub_D65898(a4, (uint64_t)v7).n128_u64[0];
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
      v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v24, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v39, v25);
        if ((v40 & 0x80u) == 0) {
          v26 = v39;
        }
        else {
          v26 = (void **)v39[0];
        }
        if ((v40 & 0x80u) == 0) {
          v27 = v40;
        }
        else {
          v27 = (uint64_t)v39[1];
        }
        v28 = sub_188FC78(__p, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        v29 = (void *)std::ostream::operator<<();
        v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v45);
        v31 = std::string::append(&v45, "ETAModule");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v38 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)v37 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v38 >= 0) {
          v33 = v37;
        }
        else {
          v33 = (void **)v37[0];
        }
        if (v38 >= 0) {
          v34 = HIBYTE(v38);
        }
        else {
          v34 = (uint64_t)v37[1];
        }
        v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, (uint64_t)v7);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
        if ((char)v40 < 0) {
          operator delete(v39[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v45, 3u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v44 < 0) {
          operator delete(v43);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v7);
    }
  }
  else
  {
    sub_3E7814(&v46, (__n128 *)a1);
    LOBYTE(__p[0]) = 0;
    *(__n128 *)&__p[1] = v46;
    *(_OWORD *)&__p[3] = v47;
    __p[5] = v48;
    v47 = 0uLL;
    v48 = 0;
    v42 = v49;
    sub_CF8064(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    v10 = v47;
    if ((void)v47)
    {
      v11 = *((void *)&v47 + 1);
      v12 = (void *)v47;
      if (*((void *)&v47 + 1) != (void)v47)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        v12 = (void *)v47;
      }
      *((void *)&v47 + 1) = v10;
      operator delete(v12);
    }
  }
  return result;
}

void sub_D65788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 137) < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_C8ACB8(v26);
  _Unwind_Resume(a1);
}

void sub_D65884(_Unwind_Exception *a1)
{
  sub_C8ACB8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_D65898(void *****a1, uint64_t a2)
{
  v4 = *a1;
  v5 = **a1;
  if (v5)
  {
    v6 = v4[1];
    v7 = **a1;
    if (v6 != v5)
    {
      v8 = v6 - 3;
      do
      {
        if (*v8)
        {
          sub_C8A9E8((uint64_t)v8, *v8);
          operator delete(*v8);
        }
        BOOL v9 = v8 == v5;
        v8 -= 3;
      }
      while (!v9);
      v7 = *v4;
    }
    v4[1] = v5;
    operator delete(v7);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(void ****)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = (uint64_t)a1[1];
  if (*(void *)v10)
  {
    sub_C8ADA8(v10, *(void ***)v10);
    operator delete(*(void **)v10);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)uint64_t v10 = result;
  *(void *)(v10 + 16) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_D65984(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void ****a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  v7 = (const std::error_condition *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v14 = *(void *)a2;
    uint64_t v15 = *(void *)(a2 + 24);
    long long v16 = *(_OWORD *)(a2 + 32);
    uint64_t v17 = *(void *)(a2 + 56);
    int v18 = **(unsigned __int8 **)(a2 + 48);
    int v19 = *(unsigned __int8 *)(v17 + 24);
    __n128 v49 = *(__n128 *)(a2 + 8);
    *(void *)&long long v50 = v15;
    long long v40 = v16;
    DWORD2(v50) = sub_F3D73C(v14, v16, 2);
    BYTE12(v50) = v18;
    if (v18 - 1) < 0xD && ((0x1543u >> (v18 - 1))) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = sub_DC6EB0(v14);
    }
    v51 = (void *)v20;
    if (v19) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = 0;
    }
    long long v52 = v40;
    uint64_t v53 = v21;
    sub_CBF2C4((char ***)&v49, (uint64_t)__p);
    sub_CC162C(a5, (uint64_t)__p);
    sub_CC1854((uint64_t)__p);
    int v22 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(__p, 0, sizeof(__p));
      v23 = (char *)operator new(0x20uLL);
      strcpy(v23, "CyclingRouteBuilderModule");
      __p[0] = v23;
      *(_OWORD *)&__p[1] = xmmword_20B8870;
      v54.__r_.__value_.__s.__data_[0] = 1;
      __p[4] = (void *)sub_C947F8((uint64_t *)&__p[3], "Runtime", (char *)&v54, (uint64_t *)(a5 + 56));
      sub_717B8(v22, a3, (uint64_t)__p, *(void *)(a1 + 56));
      v24 = (void **)__p[3];
      if (__p[3])
      {
        v25 = (void **)__p[4];
        uint64_t v26 = __p[3];
        if (__p[4] != __p[3])
        {
          do
          {
            if (*((char *)v25 - 25) < 0) {
              operator delete(*(v25 - 6));
            }
            v25 -= 6;
          }
          while (v25 != v24);
          uint64_t v26 = __p[3];
        }
        __p[4] = v24;
        operator delete(v26);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_D65FD8(a4, (uint64_t)v7);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
      int v27 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v27, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v43, v28);
        if ((v44 & 0x80u) == 0) {
          v29 = v43;
        }
        else {
          v29 = (void **)v43[0];
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v30 = v44;
        }
        else {
          uint64_t v30 = (uint64_t)v43[1];
        }
        v31 = sub_188FC78(__p, (uint64_t)v29, v30);
        sub_188FC78(v31, (uint64_t)" failed in step ", 16);
        v32 = (void *)std::ostream::operator<<();
        v33 = sub_188FC78(v32, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v54);
        v34 = std::string::append(&v54, "RouteBuilderModule");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        int64_t v42 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)v41 = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v42 >= 0) {
          v36 = v41;
        }
        else {
          v36 = (void **)v41[0];
        }
        if (v42 >= 0) {
          uint64_t v37 = HIBYTE(v42);
        }
        else {
          uint64_t v37 = (uint64_t)v41[1];
        }
        v38 = sub_188FC78(v33, (uint64_t)v36, v37);
        v39 = sub_188FC78(v38, (uint64_t)") with error: ", 14);
        sub_CF2D60(v39, (uint64_t)v7);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        if ((char)v44 < 0) {
          operator delete(v43[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 3u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v48 < 0) {
          operator delete(v47);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v7);
    }
  }
  else
  {
    sub_3E7814(&v49, (__n128 *)a1);
    LOBYTE(__p[0]) = 0;
    *(__n128 *)&__p[1] = v49;
    *(_OWORD *)&__p[3] = v50;
    __p[5] = v51;
    long long v50 = 0uLL;
    v51 = 0;
    int v46 = v52;
    sub_CC162C(a5, (uint64_t)__p);
    sub_CC1854((uint64_t)__p);
    uint64_t v9 = v50;
    if ((void)v50)
    {
      uint64_t v10 = *((void *)&v50 + 1);
      v11 = (void *)v50;
      if (*((void *)&v50 + 1) != (void)v50)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 32;
        }
        while (v10 != v9);
        v11 = (void *)v50;
      }
      *((void *)&v50 + 1) = v9;
      operator delete(v11);
    }
  }
}

void sub_D65EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  sub_111ECAC((uint64_t)&a23);
  sub_CC1854(v28);
  _Unwind_Resume(a1);
}

void sub_D65FC4(_Unwind_Exception *a1)
{
  sub_CC1854(v1);
  _Unwind_Resume(a1);
}

void sub_D65FD8(void ****a1, uint64_t a2)
{
  v4 = *a1;
  v5 = **a1;
  if (v5)
  {
    sub_C686F8((uint64_t)*a1, v5);
    operator delete(*v4);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(void ***)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *a1[1] = (void **)***a1;
  uint64_t v6 = (uint64_t)*a1[1];
  int v7 = sub_486180((uint64_t)a1[2]);
  sub_45FE34(v6, v7);
  sub_45FE2C((uint64_t)*a1[1], 1);
  v8 = (void **)a1[3];
  uint64_t v9 = (void **)*v8;
  if (*v8)
  {
    uint64_t v10 = (void **)v8[1];
    v11 = *v8;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = *v8;
    }
    v8[1] = v9;
    operator delete(v11);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)v8 = *(_OWORD *)(a2 + 24);
  v8[2] = *(void **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if ((*(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 33) || *(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 34))
    && *(unsigned char *)a1[4] == 3)
  {
    uint64_t v12 = (uint64_t)a1[5];
    v16.n128_u64[0] = 12;
    v16.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(&v17, &v16);
    sub_3E7A10(v12, (uint64_t)&v17);
    v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v19;
      uint64_t v15 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v14 - 1) < 0) {
            operator delete(*(v14 - 3));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      int v19 = v13;
      operator delete(v15);
    }
  }
}

void sub_D661CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C7E3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D661E0(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 1;
  bzero(a2 + 8, 0x5B8uLL);
  sub_C93014((uint64_t)(a2 + 8));
}

void sub_D667F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, ...)
{
  va_start(va, a14);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)va);
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v14);
  _Unwind_Resume(a1);
}

void sub_D668D4(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D668E8(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D668FC(_Unwind_Exception *a1)
{
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D66918(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(void **)(a1 + 24);
  uint64_t v5 = **(void **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = **(unsigned __int8 **)(a1 + 40);
  v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_CFA1D8(a2, v2, v3, v5, v4, v6, v7, (uint64_t *)&v11, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_D66994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    __n128 v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    __n128 v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void *sub_D669D0(void *a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x222222222222223) {
      sub_2E00();
    }
    uint64_t v6 = 120 * a3;
    int v7 = (char *)operator new(120 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_D66A9C(v4, a2, (long long *)((char *)a2 + v6), (uint64_t)v7);
  }
  return a1;
}

void sub_D66A70(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20B0438((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D66A9C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      v8 = v6 - 6;
      sub_C668B4(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      uint64_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      uint64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_D66BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20B03FC((uint64_t)v9);
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_D66BDC(void *a1, long long **a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 3 * a3;
    uint64_t v6 = operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v8 = v6;
    do
    {
      sub_C6669C(v6, a2);
      a2 += 3;
      uint64_t v6 = v8 + 3;
      v8 += 3;
      v5 -= 3;
    }
    while (v5 * 8);
    a1[1] = v6;
  }
  return a1;
}

void sub_D66CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D66CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_D2DDA0((uint64_t)va1);
  *(void *)(v2 + 8) = v3;
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D66CEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v10 = a5 + 8;
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 152) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  *(_OWORD *)(a5 + 264) = 0u;
  *(_OWORD *)(a5 + 280) = 0u;
  *(_OWORD *)(a5 + 296) = 0u;
  *(_OWORD *)(a5 + 312) = 0u;
  *(_OWORD *)(a5 + 328) = 0u;
  *(_OWORD *)(a5 + 344) = 0u;
  *(_OWORD *)(a5 + 360) = 0u;
  *(_OWORD *)(a5 + 376) = 0u;
  sub_11B16A4(a5 + 8, 0, 0);
  *(void *)(a5 + 364) = 0;
  *(void *)(a5 + 356) = 0;
  *(unsigned char *)(a5 + 372) = 0;
  *(void *)(v10 + 368) = 0;
  *(void *)(a5 + 383) = 0;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(unsigned char *)(a5 + 352) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1)
  {
    sub_3E7814((__n128 *)v35, (__n128 *)a1);
    LOBYTE(v40) = 0;
    long long v41 = *(_OWORD *)v35;
    long long v42 = *(_OWORD *)&v35[16];
    uint64_t v43 = v36;
    *(void *)&v35[16] = 0;
    *(void *)&v35[24] = 0;
    uint64_t v36 = 0;
    int v44 = v37;
    sub_CFA608(a5, (uint64_t)&v40);
    sub_C5C10C((uint64_t)&v40);
    uint64_t v15 = *(void *)&v35[16];
    if (*(void *)&v35[16])
    {
      uint64_t v16 = *(void *)&v35[24];
      __n128 v17 = *(void **)&v35[16];
      if (*(void *)&v35[24] != *(void *)&v35[16])
      {
        do
        {
          if (*(char *)(v16 - 1) < 0) {
            operator delete(*(void **)(v16 - 24));
          }
          v16 -= 32;
        }
        while (v16 != v15);
        __n128 v17 = *(void **)&v35[16];
      }
      *(void *)&v35[24] = v15;
      operator delete(v17);
    }
  }
  else
  {
    sub_D67338((uint64_t)&v40, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), **(void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(uint64_t **)(a2 + 72), 0, *(void *)(a2 + 80), *(uint64_t ***)(a2 + 88));
    sub_C57318(&v40, (uint64_t)v35);
    sub_CFA608(a5, (uint64_t)v35);
    sub_C5C10C((uint64_t)v35);
    int v11 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFA7B0(a5 + 288, (uint64_t)v35);
      sub_717B8(v11, a3, (uint64_t)v35, *(void *)(a1 + 56));
      uint64_t v12 = *(void *)&v35[24];
      if (*(void *)&v35[24])
      {
        uint64_t v13 = v36;
        uint64_t v14 = *(void **)&v35[24];
        if (v36 != *(void *)&v35[24])
        {
          do
          {
            if (*(char *)(v13 - 25) < 0) {
              operator delete(*(void **)(v13 - 48));
            }
            v13 -= 48;
          }
          while (v13 != v12);
          uint64_t v14 = *(void **)&v35[24];
        }
        uint64_t v36 = v12;
        operator delete(v14);
      }
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      sub_CFB46C(*a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v10, *(void *)(a1 + 56));
      int v18 = *(unsigned __int8 *)(a1 + 48);
      v35[23] = 18;
      strcpy(v35, "InternalError[All]");
      sub_710A8(v18, (uint64_t)v35, *(void *)(a1 + 56));
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v35);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v33, v19);
        if ((v34 & 0x80u) == 0) {
          uint64_t v20 = v33;
        }
        else {
          uint64_t v20 = (void **)v33[0];
        }
        if ((v34 & 0x80u) == 0) {
          uint64_t v21 = v34;
        }
        else {
          uint64_t v21 = (uint64_t)v33[1];
        }
        int v22 = sub_188FC78(v35, (uint64_t)v20, v21);
        sub_188FC78(v22, (uint64_t)" failed in step ", 16);
        v23 = (void *)std::ostream::operator<<();
        v24 = sub_188FC78(v23, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v45);
        v25 = std::string::append(&v45, "AnalyticsModule");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        int64_t v32 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)v31 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v32 >= 0) {
          int v27 = v31;
        }
        else {
          int v27 = (void **)v31[0];
        }
        if (v32 >= 0) {
          uint64_t v28 = HIBYTE(v32);
        }
        else {
          uint64_t v28 = (uint64_t)v31[1];
        }
        uint64_t v29 = sub_188FC78(v24, (uint64_t)v27, v28);
        uint64_t v30 = sub_188FC78(v29, (uint64_t)") with error: ", 14);
        sub_CF2D60(v30, v10);
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        if ((char)v34 < 0) {
          operator delete(v33[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v45, 3u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v39 < 0) {
          operator delete(v38);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, v10);
    }
    sub_CFD378(&v40);
  }
}

void sub_D67210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v71 - 65) < 0) {
    operator delete(*(void **)(v71 - 88));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

void sub_D672F0(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D67308(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D6731C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

uint64_t sub_D67338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12, uint64_t a13, uint64_t **a14)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = a8;
  *(void *)(a1 + 56) = a9;
  *(void *)(a1 + 64) = a10;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_4445E8(a1 + 72, *a11, a11[1], 0xCCCCCCCCCCCCCCCDLL * ((a11[1] - *a11) >> 5));
  *(unsigned char *)(a1 + 96) = a12;
  *(unsigned char *)(a1 + 97) = sub_401FE4(a4);
  sub_485C30(a13, a1 + 104);
  *(void *)(a1 + 136) = a13;
  *(void *)(a1 + 144) = sub_4877D8(a13);
  *(void *)(a1 + 152) = v16;
  sub_DBBED8(*(void *)(a1 + 16), a1 + 160);
  __n128 v17 = *a14;
  int v18 = a14[1];
  if (*a14 != v18)
  {
    while (*((_DWORD *)v17 + 26) != 1)
    {
      v17 += 47;
      if (v17 == v18) {
        goto LABEL_6;
      }
    }
  }
  if (v17 == v18)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    __n128 v17 = &qword_24F7018;
  }
  sub_48381C(a1 + 264, (uint64_t)v17);
  return a1;
}

void sub_D67474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  uint64_t v5 = *(void **)(v2 + 232);
  if (v5)
  {
    *(void *)(v2 + 240) = v5;
    operator delete(v5);
  }
  sub_485FC0(v3);
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D674BC(_Unwind_Exception *a1)
{
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D674D0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  uint64_t v10 = a5 + 8;
  bzero((void *)(a5 + 8), 0x488uLL);
  sub_162C594(a5 + 8, 0, 0);
  sub_162C594(a5 + 568, 0, 0);
  *(unsigned char *)(a5 + 1160) = 0;
  *(_OWORD *)(a5 + 1144) = 0u;
  *(_OWORD *)(a5 + 1128) = 0u;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    sub_D67BAC(a2, (uint64_t)v49);
    sub_CBC21C((uint64_t)v49, (uint64_t)v42);
    sub_CFD464(a5, (uint64_t)v42);
    if (v42[0].n128_u8[0])
    {
      sub_162D64C(&v47);
      sub_162D64C(&v42[0].n128_i8[8]);
    }
    else
    {
      unint64_t v15 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v16 = v43;
        __n128 v17 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          __n128 v17 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v15;
        operator delete(v17);
      }
    }
    int v21 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFD5A4(a5 + 1128, (uint64_t)v42);
      sub_717B8(v21, a3, (uint64_t)v42, *(void *)(a1 + 56));
      unint64_t v22 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v23 = v43;
        v24 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v23 - 25) < 0) {
              operator delete(*(void **)(v23 - 48));
            }
            v23 -= 48;
          }
          while (v23 != v22);
          v24 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v22;
        operator delete(v24);
      }
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      sub_D67D10(a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v25 = *(unsigned __int8 *)(a1 + 48);
      v42[1].n128_u8[7] = 18;
      strcpy((char *)v42, "InternalError[All]");
      sub_710A8(v25, (uint64_t)v42, *(void *)(a1 + 56));
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v42);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v26);
        if ((v41 & 0x80u) == 0) {
          int v27 = v40;
        }
        else {
          int v27 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v28 = v41;
        }
        else {
          uint64_t v28 = (uint64_t)v40[1];
        }
        uint64_t v29 = sub_188FC78(v42, (uint64_t)v27, v28);
        sub_188FC78(v29, (uint64_t)" failed in step ", 16);
        uint64_t v30 = (void *)std::ostream::operator<<();
        v31 = sub_188FC78(v30, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v48);
        int64_t v32 = std::string::append(&v48, "ResponseBuilderModule");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t v39 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)v38 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          unsigned __int8 v34 = v38;
        }
        else {
          unsigned __int8 v34 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v35 = HIBYTE(v39);
        }
        else {
          uint64_t v35 = (uint64_t)v38[1];
        }
        uint64_t v36 = sub_188FC78(v31, (uint64_t)v34, v35);
        int v37 = sub_188FC78(v36, (uint64_t)") with error: ", 14);
        sub_CF2D60(v37, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v48, 3u);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v46 < 0) {
          operator delete(v45);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
    sub_CFE678((uint64_t)v49);
  }
  else
  {
    sub_3E7814(v42, (__n128 *)a1);
    v49[0] = 0;
    __n128 v50 = v42[0];
    __n128 __p = v42[1];
    unint64_t v52 = v43;
    v42[1] = 0uLL;
    unint64_t v43 = 0;
    int v53 = v44;
    sub_CFD464(a5, (uint64_t)v49);
    if (v49[0])
    {
      sub_162D64C(&v54);
      sub_162D64C(&v50);
    }
    else
    {
      unint64_t v12 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        uint64_t v13 = __p.n128_i64[1];
        uint64_t v14 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] != __p.n128_u64[0])
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 32;
          }
          while (v13 != v12);
          uint64_t v14 = (void *)__p.n128_u64[0];
        }
        __p.n128_u64[1] = v12;
        operator delete(v14);
      }
    }
    unint64_t v18 = v42[1].n128_u64[0];
    if (v42[1].n128_u64[0])
    {
      unint64_t v19 = v42[1].n128_u64[1];
      uint64_t v20 = (void *)v42[1].n128_u64[0];
      if (v42[1].n128_u64[1] != v42[1].n128_u64[0])
      {
        do
        {
          if (*(char *)(v19 - 1) < 0) {
            operator delete(*(void **)(v19 - 24));
          }
          v19 -= 32;
        }
        while (v19 != v18);
        uint64_t v20 = (void *)v42[1].n128_u64[0];
      }
      v42[1].n128_u64[1] = v18;
      operator delete(v20);
    }
  }
}

void sub_D67A70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  sub_111ECAC((uint64_t)va);
  sub_CFE678((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v7);
  _Unwind_Resume(a1);
}

void sub_D67B54(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D67B68(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D67B7C(_Unwind_Exception *a1)
{
  sub_CFE678((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D67B98(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_D67BAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v6 = (uint64_t **)a1[2];
  uint64_t v7 = a1[3];
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  v8 = (_OWORD *)a1[4];
  uint64_t v14 = a1[5];
  sub_4F29BC((uint64_t)v18);
  uint64_t v20 = 0;
  *(_OWORD *)__n128 __p = 0u;
  long long v9 = (uint64_t *)a1[6];
  uint64_t v13 = a1[7];
  sub_D67DFC(a2, v4, v5, v6, v7, v8, (uint64_t)&v15, &v14, (uint64_t *)v18, v9, &v13, a1[8]);
  uint64_t v10 = __p[0];
  if (__p[0])
  {
    int v11 = __p[1];
    unint64_t v12 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        int v11 = (void *)sub_3A6B94((uint64_t)v11 - 1120);
      while (v11 != v10);
      unint64_t v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  sub_4F2BD0(v18);
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_D67CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_D67D10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if ((v5 & 2) != 0)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        uint64_t v6 = (void *)*v6;
      }
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if ((v7 & 2) != 0)
    {
      v8 = 0;
    }
    else
    {
      v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7) {
        v8 = (void *)*v8;
      }
    }
    if (v6 == v8) {
      sub_16323C4(v4, a2);
    }
    else {
      sub_1632068(v4, a2);
    }
  }
  uint64_t v9 = *a1;
  if (*a1 != a2)
  {
    uint64_t v10 = *(void *)(v9 + 568);
    if ((v10 & 2) != 0)
    {
      int v11 = 0;
    }
    else
    {
      int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        int v11 = (void *)*v11;
      }
    }
    uint64_t v12 = a2 + 560;
    uint64_t v13 = v9 + 560;
    uint64_t v14 = *(void *)(a2 + 568);
    if ((v14 & 2) != 0)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unint64_t v15 = (void *)*v15;
      }
    }
    if (v11 == v15) {
      sub_16323C4(v13, v12);
    }
    else {
      sub_1632068(v13, v12);
    }
  }
}

uint64_t sub_D67DFC(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12)
{
  v64 = 0;
  v65 = 0;
  v63 = 0;
  unint64_t v19 = *(const void **)a7;
  uint64_t v18 = *(void *)(a7 + 8);
  int64_t v20 = v18 - *(void *)a7;
  if (v18 != *(void *)a7)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    int v21 = (char *)operator new(v18 - *(void *)a7);
    unint64_t v22 = &v21[8 * (v20 >> 3)];
    v63 = v21;
    v65 = v22;
    memcpy(v21, v19, v20);
    v64 = v22;
  }
  uint64_t v62 = *a8;
  unint64_t v23 = (long long *)sub_377D04(a5);
  char v74 = 1;
  sub_29E004((char *)__dst, v23);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)&v53);
  uint64_t v24 = sub_37B3A8(a5);
  uint64_t v25 = *(void *)v24;
  int v26 = *(_DWORD *)(v24 + 8);
  sub_598C04((uint64_t)v66, a9);
  memset(v67, 0, sizeof(v67));
  sub_510340((uint64_t)v67, a9[136], a9[137], 0xAF8AF8AF8AF8AF8BLL * ((a9[137] - a9[136]) >> 5));
  char v27 = sub_DB7034(a2);
  char v28 = sub_CFDD50(a2, a4, a3, a5);
  sub_DBBB30(a2, (uint64_t)&v52);
  uint64_t v49 = 0;
  uint64_t v50 = sub_DBC410(a2);
  int v51 = v29;
  uint64_t v47 = 0;
  std::string v48 = 0;
  sub_8A6F8((char *)&v47, *a10, a10[1], 0xAAAAAAAAAAAAAAABLL * ((a10[1] - *a10) >> 3));
  uint64_t v46 = *a11;
  char v30 = sub_DB7530(a2);
  sub_54214((uint64_t)__p, a12);
  uint64_t v31 = sub_DC6EB0(a2);
  sub_CFDEBC(a1, (uint64_t)a3, a4, a5, a6, (uint64_t)&v63, &v62, &v53, v25, v26, (uint64_t)v66, v27, v28, &v52, &v50, (uint64_t)&v47, &v46, v30, (uint64_t *)__p,
    v31);
  int64_t v32 = v45;
  if (v45)
  {
    do
    {
      int v37 = *(char **)v32;
      sub_57AC8((uint64_t *)v32 + 5);
      if (v32[39] < 0) {
        operator delete(*((void **)v32 + 2));
      }
      operator delete(v32);
      int64_t v32 = v37;
    }
    while (v37);
  }
  long long v33 = __p[0];
  __p[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  unsigned __int8 v34 = (void **)v47;
  if (v47)
  {
    uint64_t v35 = v48;
    uint64_t v36 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = v47;
    }
    std::string v48 = v34;
    operator delete(v36);
  }
  v38 = v67[0];
  if (v67[0])
  {
    int64_t v39 = v67[1];
    long long v40 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        int64_t v39 = (void *)sub_3A6B94((uint64_t)v39 - 1120);
      while (v39 != v38);
      long long v40 = v67[0];
    }
    v67[1] = v38;
    operator delete(v40);
  }
  sub_4F2BD0(v66);
  if (v61 < 0) {
    operator delete(v60);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v74)
  {
    if (v73 < 0)
    {
      operator delete(v72);
      if ((v71 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v69 & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_40:
        operator delete(__dst[0]);
        unsigned __int8 v41 = (char *)v63;
        if (!v63) {
          return a1;
        }
        goto LABEL_36;
      }
    }
    else if ((v71 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v70);
    if (v69 < 0) {
      goto LABEL_40;
    }
  }
LABEL_35:
  unsigned __int8 v41 = (char *)v63;
  if (v63)
  {
LABEL_36:
    v64 = v41;
    operator delete(v41);
  }
  return a1;
}

void sub_D681D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60)
{
  sub_4F2BD0(&a60);
  sub_CF1EE4((uint64_t)&a34);
  sub_CF1F54(v60 - 176);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_D68264(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(unsigned char *)(a5 + 8) = 0;
  uint64_t v7 = (std::error_condition *)(a5 + 8);
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1 != 0)
  {
    sub_3E7814(v37, (__n128 *)a1);
    unint64_t v9 = v37[2].n128_u64[0];
    unsigned __int32 v10 = v37[2].n128_u32[2];
    *(unsigned char *)(a5 + 8) = v37[0].n128_u8[0];
    *(void *)(a5 + 9) = *(unint64_t *)((char *)v37[0].n128_u64 + 1);
    *(void *)(a5 + 16) = v37[0].n128_u64[1];
    *(__n128 *)(a5 + 24) = v37[1];
    *(void *)(a5 + 40) = v9;
    *(_DWORD *)(a5 + 48) = v10;
    *(unsigned char *)a5 = 0;
    return;
  }
  uint64_t v13 = sub_CBAA38((uint64_t)v41, *(void *)a2, **(unsigned char **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  sub_CB9D7C(v13, (uint64_t)v37);
  unsigned __int8 v14 = v37[0].n128_u8[0];
  if (*(unsigned char *)a5)
  {
    if (v37[0].n128_u8[0])
    {
LABEL_8:
      *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
      *(unsigned char *)a5 = v14;
LABEL_44:
      int v31 = *(unsigned __int8 *)(a1 + 48);
      memset(v37, 0, sizeof(v37));
      sub_717B8(v31, a3, (uint64_t)v37, *(void *)(a1 + 56));
      unint64_t v32 = v37[1].n128_u64[1];
      if (v37[1].n128_u64[1])
      {
        unint64_t v33 = v37[2].n128_u64[0];
        unsigned __int8 v34 = (void *)v37[1].n128_u64[1];
        if (v37[2].n128_u64[0] != v37[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v33 - 25) < 0) {
              operator delete(*(void **)(v33 - 48));
            }
            v33 -= 48;
          }
          while (v33 != v32);
          unsigned __int8 v34 = (void *)v37[1].n128_u64[1];
        }
        v37[2].n128_u64[0] = v32;
        operator delete(v34);
      }
      if (v37[1].n128_i8[7] < 0) {
        operator delete((void *)v37[0].n128_u64[0]);
      }
      **a4 = 1;
      return;
    }
    goto LABEL_16;
  }
  if (!v37[0].n128_u8[0])
  {
LABEL_16:
    std::error_condition *v7 = *(std::error_condition *)((char *)v37 + 8);
    *(__n128 *)(a5 + 24) = *(__n128 *)((char *)&v37[1] + 8);
    *(void *)(a5 + 40) = v37[2].n128_u64[1];
    v37[1].n128_u64[1] = 0;
    v37[2] = 0uLL;
    *(_DWORD *)(a5 + 48) = v38;
    *(unsigned char *)a5 = 0;
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)(a5 + 32);
  uint64_t v17 = *(void **)(a5 + 24);
  if (v16 != v15)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 32;
    }
    while (v16 != v15);
    uint64_t v17 = *(void **)(a5 + 24);
  }
  *(void *)(a5 + 32) = v15;
  operator delete(v17);
  int v30 = v37[0].n128_u8[0];
  *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
  *(unsigned char *)a5 = v30;
  if (v30) {
    goto LABEL_44;
  }
LABEL_17:
  unint64_t v18 = v37[1].n128_u64[1];
  if (v37[1].n128_u64[1])
  {
    unint64_t v19 = v37[2].n128_u64[0];
    if (v37[2].n128_u64[0] == v37[1].n128_u64[1])
    {
      v37[2].n128_u64[0] = v37[1].n128_u64[1];
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
    else
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 32;
      }
      while (v19 != v18);
      v37[2].n128_u64[0] = v18;
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
  }
  sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
  int v20 = *(unsigned __int8 *)(a1 + 48);
  v37[1].n128_u8[7] = 18;
  strcpy((char *)v37, "InternalError[All]");
  sub_710A8(v20, (uint64_t)v37, *(void *)(a1 + 56));
  if (v37[1].n128_i8[7] < 0) {
    operator delete((void *)v37[0].n128_u64[0]);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v37);
    sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v35, v21);
    if ((v36 & 0x80u) == 0) {
      unint64_t v22 = v35;
    }
    else {
      unint64_t v22 = (void **)v35[0];
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v23 = v36;
    }
    else {
      uint64_t v23 = (uint64_t)v35[1];
    }
    uint64_t v24 = sub_188FC78(v37, (uint64_t)v22, v23);
    sub_188FC78(v24, (uint64_t)" failed in step ", 16);
    uint64_t v25 = (void *)std::ostream::operator<<();
    int v26 = sub_188FC78(v25, (uint64_t)" (", 2);
    char v27 = (char *)operator new(0x19uLL);
    strcpy(v27, "RequestValidationModule");
    char v28 = sub_188FC78(v26, (uint64_t)v27, 23);
    int v29 = sub_188FC78(v28, (uint64_t)") with error: ", 14);
    sub_CF2D60(v29, (uint64_t)v7);
    operator delete(v27);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)v35, 3u);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_3E7A10(a1, (uint64_t)v7);
}

void sub_D6875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C5C9E0(v21);
  _Unwind_Resume(a1);
}

void sub_D687D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A3A4((uint64_t)va);
  sub_C5C9E0(v5);
  _Unwind_Resume(a1);
}

void sub_D68800(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void sub_D68814(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int32 v10 = (void *)(a5 + 788);
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *unsigned __int32 v10 = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v48, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_CA12F0((unsigned __int8 *)&v48, (uint64_t)v53);
    sub_CA35BC(a5, (unsigned __int8 *)v53);
    if (LOBYTE(v53[0]))
    {
      sub_CA60E4((uint64_t)&v53[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v53[2]) = 18;
      strcpy((char *)v53, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v53, *(void *)(a1 + 56));
      if (SHIBYTE(v53[2]) < 0) {
        operator delete(v53[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v53);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v46, v25);
        if ((v47 & 0x80u) == 0) {
          int v26 = v46;
        }
        else {
          int v26 = (void **)v46[0];
        }
        if ((v47 & 0x80u) == 0) {
          uint64_t v27 = v47;
        }
        else {
          uint64_t v27 = (uint64_t)v46[1];
        }
        char v28 = sub_188FC78(v53, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        int v29 = (void *)std::ostream::operator<<();
        int v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)&v52);
        int v31 = std::string::append(&v52, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v45 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v44 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v45 >= 0) {
          unint64_t v33 = v44;
        }
        else {
          unint64_t v33 = (void **)v44[0];
        }
        if (v45 >= 0) {
          uint64_t v34 = HIBYTE(v45);
        }
        else {
          uint64_t v34 = (uint64_t)v44[1];
        }
        uint64_t v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        unsigned __int8 v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[0]);
        }
        if ((char)v47 < 0) {
          operator delete(v46[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v52, 3u);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v58 < 0) {
          operator delete(v57);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_75;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v53);
    sub_717B8(v20, a3, (uint64_t)v53, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v53[2]) < 0)
    {
      operator delete(v53[0]);
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16)) {
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16))
      {
LABEL_69:
        void *v38 = 0;
        v38[1] = 0;
        int64_t v39 = (void ***)(v38 + 3);
        v38[2] = 0;
        goto LABEL_72;
      }
    }
    int64_t v39 = sub_C78EA8((void ****)v37);
LABEL_72:
    *(void *)(v37 + 8) = v39;
    sub_EB7138((int64x2_t *)(v39 - 3), a5 + 8, 0);
    uint64_t v40 = a4[1];
    if (*(unsigned char *)(a5 + 848))
    {
      unsigned __int8 v41 = (_OWORD *)((char *)v10 + 36);
      if (*(unsigned char *)(v40 + 24))
      {
        unint64_t v43 = *(void **)v40;
        if (*(void *)v40)
        {
          *(void *)(v40 + 8) = v43;
          operator delete(v43);
          *(void *)uint64_t v40 = 0;
          *(void *)(v40 + 8) = 0;
          *(void *)(v40 + 16) = 0;
        }
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)unsigned __int8 v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
      }
      else
      {
        *(void *)uint64_t v40 = 0;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = 0;
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)unsigned __int8 v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
        *(unsigned char *)(v40 + 24) = 1;
      }
    }
    else if (*(unsigned char *)(v40 + 24))
    {
      long long v42 = *(void **)v40;
      if (*(void *)v40)
      {
        *(void *)(v40 + 8) = v42;
        operator delete(v42);
      }
      *(unsigned char *)(v40 + 24) = 0;
    }
LABEL_75:
    sub_CF5B18(&v48);
    return;
  }
  sub_3E7814(&v48, (__n128 *)a1);
  LOBYTE(v53[0]) = 0;
  *(__n128 *)&v53[1] = v48;
  long long __p = *(_OWORD *)v49;
  uint64_t v55 = v50;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  int v56 = v51;
  sub_CA35BC(a5, (unsigned __int8 *)v53);
  if (LOBYTE(v53[0]))
  {
    sub_CA60E4((uint64_t)&v53[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  uint64_t v17 = (void **)v49[0];
  if (v49[0])
  {
    unint64_t v18 = (void **)v49[1];
    unint64_t v19 = v49[0];
    if (v49[1] != v49[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      unint64_t v19 = v49[0];
    }
    v49[1] = v17;
    operator delete(v19);
  }
}

void sub_D68F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA0F5C(v58);
  _Unwind_Resume(a1);
}

void sub_D68FE4(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D68FFC(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D69010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA0F5C(v8);
  _Unwind_Resume(a1);
}

void sub_D6902C(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v8 = (uint64_t *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 66) = 0u;
  *(_WORD *)(a5 + 82) = 1;
  *(unsigned char *)(a5 + 88) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    unint64_t v11 = a2[1];
    unint64_t v12 = a2[2];
    int v13 = *(unsigned __int8 *)(v12 + 8);
    if (*(unsigned char *)(v12 + 8)) {
      uint64_t v5 = *(void *)v12;
    }
    v49.n128_u64[0] = *a2;
    v49.n128_u32[2] = 0;
    *(void *)&long long v50 = v11;
    BYTE8(v50) = sub_DC5CDC(&v49);
    LOBYTE(v52) = v13;
    if (v13) {
      uint64_t v51 = v5;
    }
    sub_C9CA80((uint64_t)&v49, (uint64_t)v43);
    sub_C9D2A4(a5, (uint64_t)v43);
    if (LOBYTE(v43[0]))
    {
      uint64_t v14 = (char *)v43[1];
      if (v43[1])
      {
        uint64_t v15 = (char *)v43[2];
        uint64_t v16 = v43[1];
        if (v43[2] != v43[1])
        {
          do
          {
            v15 -= 376;
            sub_402C7C((uint64_t)v15);
          }
          while (v15 != v14);
          uint64_t v16 = v43[1];
        }
        v43[2] = v14;
LABEL_44:
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v22 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v23 = (void **)__p[1];
        uint64_t v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v23 - 1) < 0) {
              operator delete(*(v23 - 3));
            }
            v23 -= 4;
          }
          while (v23 != v22);
          uint64_t v16 = __p[0];
        }
        __p[1] = v22;
        goto LABEL_44;
      }
    }
    int v27 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CF2E84(a5 + 32, (uint64_t)v43);
      sub_717B8(v27, a3, (uint64_t)v43, *(void *)(a1 + 56));
      char v28 = (void **)__p[0];
      if (__p[0])
      {
        int v29 = (void **)__p[1];
        int v30 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v29 - 25) < 0) {
              operator delete(*(v29 - 6));
            }
            v29 -= 6;
          }
          while (v29 != v28);
          int v30 = __p[0];
        }
        __p[1] = v28;
        operator delete(v30);
      }
      if (SHIBYTE(v43[2]) < 0) {
        operator delete(v43[0]);
      }
      sub_D69684(a4, v8);
    }
    sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v8, *(void *)(a1 + 56));
    int v31 = *(unsigned __int8 *)(a1 + 48);
    HIBYTE(v43[2]) = 18;
    strcpy((char *)v43, "InternalError[All]");
    sub_710A8(v31, (uint64_t)v43, *(void *)(a1 + 56));
    if (SHIBYTE(v43[2]) < 0) {
      operator delete(v43[0]);
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v43);
      sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v41, v32);
      if ((v42 & 0x80u) == 0) {
        unint64_t v33 = v41;
      }
      else {
        unint64_t v33 = (void **)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        uint64_t v34 = v42;
      }
      else {
        uint64_t v34 = (uint64_t)v41[1];
      }
      uint64_t v35 = sub_188FC78(v43, (uint64_t)v33, v34);
      sub_188FC78(v35, (uint64_t)" failed in step ", 16);
      unsigned __int8 v36 = (void *)std::ostream::operator<<();
      uint64_t v37 = sub_188FC78(v36, (uint64_t)" (", 2);
      int v38 = (char *)operator new(0x28uLL);
      strcpy(v38, "InputPointTransformerModuleOutput");
      int64_t v39 = sub_188FC78(v37, (uint64_t)v38, 33);
      uint64_t v40 = sub_188FC78(v39, (uint64_t)") with error: ", 14);
      sub_CF2D60(v40, (uint64_t)v8);
      operator delete(v38);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v41, 3u);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_3E7A10(a1, (uint64_t)v8);
    return;
  }
  sub_3E7814(&v49, (__n128 *)a1);
  LOBYTE(v43[0]) = 0;
  *(__n128 *)&v43[1] = v49;
  *(_OWORD *)long long __p = v50;
  uint64_t v45 = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  int v46 = v52;
  sub_C9D2A4(a5, (uint64_t)v43);
  if (LOBYTE(v43[0]))
  {
    uint64_t v17 = (char *)v43[1];
    if (!v43[1]) {
      goto LABEL_34;
    }
    unint64_t v18 = (char *)v43[2];
    unint64_t v19 = v43[1];
    if (v43[2] != v43[1])
    {
      do
      {
        v18 -= 376;
        sub_402C7C((uint64_t)v18);
      }
      while (v18 != v17);
      unint64_t v19 = v43[1];
    }
    v43[2] = v17;
  }
  else
  {
    int v20 = (void **)__p[0];
    if (!__p[0]) {
      goto LABEL_34;
    }
    uint64_t v21 = (void **)__p[1];
    unint64_t v19 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      unint64_t v19 = __p[0];
    }
    __p[1] = v20;
  }
  operator delete(v19);
LABEL_34:
  uint64_t v24 = v50;
  if ((void)v50)
  {
    uint64_t v25 = *((void *)&v50 + 1);
    int v26 = (void *)v50;
    if (*((void *)&v50 + 1) != (void)v50)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 32;
      }
      while (v25 != v24);
      int v26 = (void *)v50;
    }
    *((void *)&v50 + 1) = v24;
    operator delete(v26);
  }
}

void sub_D695C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C9D440(v21);
  _Unwind_Resume(a1);
}

void sub_D69670(_Unwind_Exception *a1)
{
  sub_C9D440(v1);
  _Unwind_Resume(a1);
}

void sub_D69684(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (v2 != a2) {
    sub_C5E9FC(v2, *a2, a2[1], 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  }
  sub_47E0E4(&v3);
  sub_4006C4((uint64_t)v4);
}

void sub_D6976C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_405E28((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_D69780@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *****a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v7 = (const std::error_condition *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1)
  {
    sub_3E7814(&v47, (__n128 *)a1);
    LOBYTE(__p[0]) = 0;
    *(__n128 *)&__p[1] = v47;
    *(_OWORD *)unsigned __int8 v41 = v48;
    uint64_t v42 = v49;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    int v43 = v50;
    sub_D1ABA0(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    uint64_t v20 = v48;
    if ((void)v48)
    {
      uint64_t v21 = *((void *)&v48 + 1);
      uint64_t v22 = (void *)v48;
      if (*((void *)&v48 + 1) != (void)v48)
      {
        do
        {
          if (*(char *)(v21 - 1) < 0) {
            operator delete(*(void **)(v21 - 24));
          }
          v21 -= 32;
        }
        while (v21 != v20);
        uint64_t v22 = (void *)v48;
      }
      *((void *)&v48 + 1) = v20;
      operator delete(v22);
    }
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v12 = a2[2];
    uint64_t v11 = a2[3];
    v47.n128_u64[0] = a2[1];
    uint64_t v13 = sub_37B3A8(v11);
    unint64_t v14 = *(void *)v13;
    LODWORD(v48) = *(_DWORD *)(v13 + 8);
    v47.n128_u64[1] = v14;
    BYTE4(v48) = sub_DB6E94(v10);
    LOBYTE(v49) = 1;
    *((void *)&v48 + 1) = v12;
    uint64_t v50 = v11;
    sub_C89C58(&v47, (uint64_t)__p);
    sub_D1ABA0(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    int v15 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_D1ADB0(a5 + 56, (uint64_t)__p);
      sub_717B8(v15, a3, (uint64_t)__p, *(void *)(a1 + 56));
      uint64_t v16 = (void **)v41[0];
      if (v41[0])
      {
        uint64_t v17 = (void **)v41[1];
        unint64_t v18 = v41[0];
        if (v41[1] != v41[0])
        {
          do
          {
            if (*((char *)v17 - 25) < 0) {
              operator delete(*(v17 - 6));
            }
            v17 -= 6;
          }
          while (v17 != v16);
          unint64_t v18 = v41[0];
        }
        v41[1] = v16;
        operator delete(v18);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      *(void *)&double result = sub_D65898(a4, (uint64_t)v7).n128_u64[0];
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
      int v23 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v23, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v38, v24);
        if ((v39 & 0x80u) == 0) {
          uint64_t v25 = v38;
        }
        else {
          uint64_t v25 = (void **)v38[0];
        }
        if ((v39 & 0x80u) == 0) {
          uint64_t v26 = v39;
        }
        else {
          uint64_t v26 = (uint64_t)v38[1];
        }
        int v27 = sub_188FC78(__p, (uint64_t)v25, v26);
        sub_188FC78(v27, (uint64_t)" failed in step ", 16);
        char v28 = (void *)std::ostream::operator<<();
        int v29 = sub_188FC78(v28, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)&v46);
        int v30 = std::string::append(&v46, "ETAModule");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        int64_t v37 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned __int8 v36 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v37 >= 0) {
          __n128 v32 = v36;
        }
        else {
          __n128 v32 = (void **)v36[0];
        }
        if (v37 >= 0) {
          uint64_t v33 = HIBYTE(v37);
        }
        else {
          uint64_t v33 = (uint64_t)v36[1];
        }
        uint64_t v34 = sub_188FC78(v29, (uint64_t)v32, v33);
        uint64_t v35 = sub_188FC78(v34, (uint64_t)") with error: ", 14);
        sub_CF2D60(v35, (uint64_t)v7);
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[0]);
        }
        if ((char)v39 < 0) {
          operator delete(v38[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v46, 3u);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v45 < 0) {
          operator delete(v44);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v7);
    }
  }
  return result;
}

void sub_D69C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 137) < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_C8ACB8(v26);
  _Unwind_Resume(a1);
}

void sub_D69D54(_Unwind_Exception *a1)
{
  sub_C8ACB8(v1);
  _Unwind_Resume(a1);
}

void sub_D69D68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a3 = 1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *(void *)(a2 + 24);
    long long v10 = *(_OWORD *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 56);
    int v12 = **(unsigned __int8 **)(a2 + 48);
    int v13 = *(unsigned __int8 *)(v11 + 24);
    __n128 v22 = *(__n128 *)(a2 + 8);
    *(void *)&long long v23 = v9;
    long long v16 = v10;
    DWORD2(v23) = sub_F3D73C(v8, v10, 2);
    BYTE12(v23) = v12;
    if (v12 - 1) < 0xD && ((0x1543u >> (v12 - 1))) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = sub_DC6EB0(v8);
    }
    uint64_t v24 = v14;
    if (v13) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = 0;
    }
    long long v25 = v16;
    uint64_t v26 = v15;
    sub_CC01C4((uint64_t)&v22, (uint64_t)&__p);
  }
  sub_3E7814(&v22, (__n128 *)a1);
  char __p = 0;
  *(__n128 *)__p_8 = v22;
  *(_OWORD *)unint64_t v19 = v23;
  uint64_t v20 = v24;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  int v21 = v25;
  sub_CC162C(a3, (uint64_t)&__p);
  sub_CC1854((uint64_t)&__p);
  uint64_t v5 = v23;
  if ((void)v23)
  {
    uint64_t v6 = *((void *)&v23 + 1);
    uint64_t v7 = (void *)v23;
    if (*((void *)&v23 + 1) != (void)v23)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 32;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)v23;
    }
    *((void *)&v23 + 1) = v5;
    operator delete(v7);
  }
}

void sub_D6A2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  sub_111ECAC((uint64_t)&a23);
  sub_CC1854(v28);
  _Unwind_Resume(a1);
}

void sub_D6A3A8(_Unwind_Exception *a1)
{
  sub_CC1854(v1);
  _Unwind_Resume(a1);
}

void sub_D6A3BC(void ****a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  if (v5)
  {
    sub_C686F8((uint64_t)*a1, v5);
    operator delete(*v4);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void ***)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *a1[1] = (void **)***a1;
  uint64_t v6 = (uint64_t)*a1[1];
  int v7 = sub_486180((uint64_t)a1[2]);
  sub_45FE34(v6, v7);
  sub_45FE2C((uint64_t)*a1[1], 1);
  uint64_t v8 = (void **)a1[3];
  uint64_t v9 = (void **)*v8;
  if (*v8)
  {
    long long v10 = (void **)v8[1];
    uint64_t v11 = *v8;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = *v8;
    }
    v8[1] = v9;
    operator delete(v11);
    uint64_t *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + 24);
  v8[2] = *(void **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if ((*(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 33) || *(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 34))
    && *(unsigned char *)a1[4] == 3)
  {
    uint64_t v12 = (uint64_t)a1[5];
    v16.n128_u64[0] = 12;
    v16.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(&v17, &v16);
    sub_3E7A10(v12, (uint64_t)&v17);
    int v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v19;
      uint64_t v15 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v14 - 1) < 0) {
            operator delete(*(v14 - 3));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      unint64_t v19 = v13;
      operator delete(v15);
    }
  }
}

void sub_D6A5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C7E3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D6A5C4(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 1;
  bzero(a2 + 8, 0x5B8uLL);
  sub_C9A244((uint64_t)(a2 + 8));
}

void sub_D6ABD4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, ...)
{
  va_start(va, a14);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)va);
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v14);
  _Unwind_Resume(a1);
}

void sub_D6ACB8(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6ACCC(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6ACE0(_Unwind_Exception *a1)
{
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6ACFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = **(void **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = **(unsigned __int8 **)(a1 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_D338EC(a2, v2, v3, v5, v4, v6, v7, (uint64_t *)&v11, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_D6AD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    __n128 v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    __n128 v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void *sub_D6ADB4(void *a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x222222222222223) {
      sub_2E00();
    }
    uint64_t v6 = 120 * a3;
    int v7 = (char *)operator new(120 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_D337AC(v4, a2, (long long *)((char *)a2 + v6), (uint64_t)v7);
  }
  return a1;
}

void sub_D6AE54(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20B0438((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D6AE80(void *a1, long long **a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 3 * a3;
    uint64_t v6 = operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v8 = v6;
    do
    {
      sub_D2DB88(v6, a2);
      a2 += 3;
      uint64_t v6 = v8 + 3;
      v8 += 3;
      v5 -= 3;
    }
    while (v5 * 8);
    a1[1] = v6;
  }
  return a1;
}

void sub_D6AF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D6AF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_D2DDA0((uint64_t)va1);
  *(void *)(v2 + 8) = v3;
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D6AF90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v10 = a5 + 8;
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 152) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  *(_OWORD *)(a5 + 264) = 0u;
  *(_OWORD *)(a5 + 280) = 0u;
  *(_OWORD *)(a5 + 296) = 0u;
  *(_OWORD *)(a5 + 312) = 0u;
  *(_OWORD *)(a5 + 328) = 0u;
  *(_OWORD *)(a5 + 344) = 0u;
  *(_OWORD *)(a5 + 360) = 0u;
  *(_OWORD *)(a5 + 376) = 0u;
  sub_11B16A4(a5 + 8, 0, 0);
  *(void *)(a5 + 364) = 0;
  *(void *)(a5 + 356) = 0;
  *(unsigned char *)(a5 + 372) = 0;
  *(void *)(v10 + 368) = 0;
  *(void *)(a5 + 383) = 0;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(unsigned char *)(a5 + 352) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1)
  {
    sub_3E7814((__n128 *)v35, (__n128 *)a1);
    LOBYTE(v40) = 0;
    long long v41 = *(_OWORD *)v35;
    long long v42 = *(_OWORD *)&v35[16];
    uint64_t v43 = v36;
    *(void *)&v35[16] = 0;
    *(void *)&v35[24] = 0;
    uint64_t v36 = 0;
    int v44 = v37;
    sub_CFA608(a5, (uint64_t)&v40);
    sub_C5C10C((uint64_t)&v40);
    uint64_t v15 = *(void *)&v35[16];
    if (*(void *)&v35[16])
    {
      uint64_t v16 = *(void *)&v35[24];
      __n128 v17 = *(void **)&v35[16];
      if (*(void *)&v35[24] != *(void *)&v35[16])
      {
        do
        {
          if (*(char *)(v16 - 1) < 0) {
            operator delete(*(void **)(v16 - 24));
          }
          v16 -= 32;
        }
        while (v16 != v15);
        __n128 v17 = *(void **)&v35[16];
      }
      *(void *)&v35[24] = v15;
      operator delete(v17);
    }
  }
  else
  {
    sub_D1DF0C((uint64_t)&v40, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), **(void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(uint64_t **)(a2 + 72), 0, *(void *)(a2 + 80), *(uint64_t ***)(a2 + 88));
    sub_C58704();
    sub_CFA608(a5, (uint64_t)v35);
    sub_C5C10C((uint64_t)v35);
    int v11 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFA7B0(a5 + 288, (uint64_t)v35);
      sub_717B8(v11, a3, (uint64_t)v35, *(void *)(a1 + 56));
      uint64_t v12 = *(void *)&v35[24];
      if (*(void *)&v35[24])
      {
        uint64_t v13 = v36;
        uint64_t v14 = *(void **)&v35[24];
        if (v36 != *(void *)&v35[24])
        {
          do
          {
            if (*(char *)(v13 - 25) < 0) {
              operator delete(*(void **)(v13 - 48));
            }
            v13 -= 48;
          }
          while (v13 != v12);
          uint64_t v14 = *(void **)&v35[24];
        }
        uint64_t v36 = v12;
        operator delete(v14);
      }
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      sub_CFB46C(*a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v10, *(void *)(a1 + 56));
      int v18 = *(unsigned __int8 *)(a1 + 48);
      v35[23] = 18;
      strcpy(v35, "InternalError[All]");
      sub_710A8(v18, (uint64_t)v35, *(void *)(a1 + 56));
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v35);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v33, v19);
        if ((v34 & 0x80u) == 0) {
          uint64_t v20 = v33;
        }
        else {
          uint64_t v20 = (void **)v33[0];
        }
        if ((v34 & 0x80u) == 0) {
          uint64_t v21 = v34;
        }
        else {
          uint64_t v21 = (uint64_t)v33[1];
        }
        __n128 v22 = sub_188FC78(v35, (uint64_t)v20, v21);
        sub_188FC78(v22, (uint64_t)" failed in step ", 16);
        long long v23 = (void *)std::ostream::operator<<();
        uint64_t v24 = sub_188FC78(v23, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)&v45);
        long long v25 = std::string::append(&v45, "AnalyticsModule");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        int64_t v32 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v31 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v32 >= 0) {
          uint64_t v27 = v31;
        }
        else {
          uint64_t v27 = (void **)v31[0];
        }
        if (v32 >= 0) {
          uint64_t v28 = HIBYTE(v32);
        }
        else {
          uint64_t v28 = (uint64_t)v31[1];
        }
        uint64_t v29 = sub_188FC78(v24, (uint64_t)v27, v28);
        int v30 = sub_188FC78(v29, (uint64_t)") with error: ", 14);
        sub_CF2D60(v30, v10);
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        if ((char)v34 < 0) {
          operator delete(v33[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v45, 3u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v39 < 0) {
          operator delete(v38);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, v10);
    }
    sub_CFD378(&v40);
  }
}

void sub_D6B4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v71 - 65) < 0) {
    operator delete(*(void **)(v71 - 88));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

void sub_D6B594(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D6B5AC(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D6B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

void sub_D6B5DC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  uint64_t v10 = a5 + 8;
  bzero((void *)(a5 + 8), 0x488uLL);
  sub_162C594(a5 + 8, 0, 0);
  sub_162C594(a5 + 568, 0, 0);
  *(unsigned char *)(a5 + 1160) = 0;
  *(_OWORD *)(a5 + 1144) = 0u;
  *(_OWORD *)(a5 + 1128) = 0u;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    sub_D6BCB8(a2, (uint64_t)&v49);
    sub_CBC94C(&v49, (uint64_t)v42);
    sub_CFD464(a5, (uint64_t)v42);
    if (v42[0].n128_u8[0])
    {
      sub_162D64C(&v47);
      sub_162D64C(&v42[0].n128_i8[8]);
    }
    else
    {
      unint64_t v15 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v16 = v43;
        __n128 v17 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          __n128 v17 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v15;
        operator delete(v17);
      }
    }
    int v21 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFD5A4(a5 + 1128, (uint64_t)v42);
      sub_717B8(v21, a3, (uint64_t)v42, *(void *)(a1 + 56));
      unint64_t v22 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v23 = v43;
        uint64_t v24 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v23 - 25) < 0) {
              operator delete(*(void **)(v23 - 48));
            }
            v23 -= 48;
          }
          while (v23 != v22);
          uint64_t v24 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v22;
        operator delete(v24);
      }
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      sub_D6BE1C(a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v25 = *(unsigned __int8 *)(a1 + 48);
      v42[1].n128_u8[7] = 18;
      strcpy((char *)v42, "InternalError[All]");
      sub_710A8(v25, (uint64_t)v42, *(void *)(a1 + 56));
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v42);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v26);
        if ((v41 & 0x80u) == 0) {
          uint64_t v27 = v40;
        }
        else {
          uint64_t v27 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v28 = v41;
        }
        else {
          uint64_t v28 = (uint64_t)v40[1];
        }
        uint64_t v29 = sub_188FC78(v42, (uint64_t)v27, v28);
        sub_188FC78(v29, (uint64_t)" failed in step ", 16);
        int v30 = (void *)std::ostream::operator<<();
        long long v31 = sub_188FC78(v30, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)&v48);
        int64_t v32 = std::string::append(&v48, "ResponseBuilderModule");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t v39 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v38 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          unsigned __int8 v34 = v38;
        }
        else {
          unsigned __int8 v34 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v35 = HIBYTE(v39);
        }
        else {
          uint64_t v35 = (uint64_t)v38[1];
        }
        uint64_t v36 = sub_188FC78(v31, (uint64_t)v34, v35);
        int v37 = sub_188FC78(v36, (uint64_t)") with error: ", 14);
        sub_CF2D60(v37, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v48, 3u);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v46 < 0) {
          operator delete(v45);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
    sub_D1EAF8((uint64_t)&v49);
  }
  else
  {
    sub_3E7814(v42, (__n128 *)a1);
    LOBYTE(v49) = 0;
    __n128 v50 = v42[0];
    __n128 __p = v42[1];
    unint64_t v52 = v43;
    v42[1] = 0uLL;
    unint64_t v43 = 0;
    int v53 = v44;
    sub_CFD464(a5, (uint64_t)&v49);
    if ((_BYTE)v49)
    {
      sub_162D64C(&v54);
      sub_162D64C(&v50);
    }
    else
    {
      unint64_t v12 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        uint64_t v13 = __p.n128_i64[1];
        uint64_t v14 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] != __p.n128_u64[0])
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 32;
          }
          while (v13 != v12);
          uint64_t v14 = (void *)__p.n128_u64[0];
        }
        __p.n128_u64[1] = v12;
        operator delete(v14);
      }
    }
    unint64_t v18 = v42[1].n128_u64[0];
    if (v42[1].n128_u64[0])
    {
      unint64_t v19 = v42[1].n128_u64[1];
      uint64_t v20 = (void *)v42[1].n128_u64[0];
      if (v42[1].n128_u64[1] != v42[1].n128_u64[0])
      {
        do
        {
          if (*(char *)(v19 - 1) < 0) {
            operator delete(*(void **)(v19 - 24));
          }
          v19 -= 32;
        }
        while (v19 != v18);
        uint64_t v20 = (void *)v42[1].n128_u64[0];
      }
      v42[1].n128_u64[1] = v18;
      operator delete(v20);
    }
  }
}

void sub_D6BB7C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  sub_111ECAC((uint64_t)va);
  sub_D1EAF8((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v7);
  _Unwind_Resume(a1);
}

void sub_D6BC60(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6BC74(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6BC88(_Unwind_Exception *a1)
{
  sub_D1EAF8((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6BCA4(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_D6BCB8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (uint64_t *)a1[2];
  uint64_t v7 = a1[3];
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v8 = (_OWORD *)a1[4];
  uint64_t v14 = a1[5];
  sub_4F29BC((uint64_t)v18);
  uint64_t v20 = 0;
  *(_OWORD *)__n128 __p = 0u;
  uint64_t v9 = (uint64_t *)a1[6];
  uint64_t v13 = a1[7];
  sub_D1E0A4(a2, v4, v5, v6, v7, v8, (uint64_t)&v15, &v14, (uint64_t *)v18, v9, &v13, a1[8]);
  uint64_t v10 = __p[0];
  if (__p[0])
  {
    int v11 = __p[1];
    unint64_t v12 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        int v11 = (void *)sub_3A6B94((uint64_t)v11 - 1120);
      while (v11 != v10);
      unint64_t v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  sub_4F2BD0(v18);
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_D6BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_D6BE1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if ((v5 & 2) != 0)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        uint64_t v6 = (void *)*v6;
      }
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if ((v7 & 2) != 0)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7) {
        uint64_t v8 = (void *)*v8;
      }
    }
    if (v6 == v8) {
      sub_16323C4(v4, a2);
    }
    else {
      sub_1632068(v4, a2);
    }
  }
  uint64_t v9 = *a1;
  if (*a1 != a2)
  {
    uint64_t v10 = *(void *)(v9 + 568);
    if ((v10 & 2) != 0)
    {
      int v11 = 0;
    }
    else
    {
      int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        int v11 = (void *)*v11;
      }
    }
    uint64_t v12 = a2 + 560;
    uint64_t v13 = v9 + 560;
    uint64_t v14 = *(void *)(a2 + 568);
    if ((v14 & 2) != 0)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unint64_t v15 = (void *)*v15;
      }
    }
    if (v11 == v15) {
      sub_16323C4(v13, v12);
    }
    else {
      sub_1632068(v13, v12);
    }
  }
}

void sub_D6BF08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(unsigned char *)(a5 + 8) = 0;
  uint64_t v7 = (std::error_condition *)(a5 + 8);
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1 != 0)
  {
    sub_3E7814(v37, (__n128 *)a1);
    unint64_t v9 = v37[2].n128_u64[0];
    unsigned __int32 v10 = v37[2].n128_u32[2];
    *(unsigned char *)(a5 + 8) = v37[0].n128_u8[0];
    *(void *)(a5 + 9) = *(unint64_t *)((char *)v37[0].n128_u64 + 1);
    *(void *)(a5 + 16) = v37[0].n128_u64[1];
    *(__n128 *)(a5 + 24) = v37[1];
    *(void *)(a5 + 40) = v9;
    *(_DWORD *)(a5 + 48) = v10;
    *(unsigned char *)a5 = 0;
    return;
  }
  uint64_t v13 = sub_CBAA38((uint64_t)v41, *(void *)a2, **(unsigned char **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  sub_CB9D7C(v13, (uint64_t)v37);
  unsigned __int8 v14 = v37[0].n128_u8[0];
  if (*(unsigned char *)a5)
  {
    if (v37[0].n128_u8[0])
    {
LABEL_8:
      *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
      *(unsigned char *)a5 = v14;
LABEL_44:
      int v31 = *(unsigned __int8 *)(a1 + 48);
      memset(v37, 0, sizeof(v37));
      sub_717B8(v31, a3, (uint64_t)v37, *(void *)(a1 + 56));
      unint64_t v32 = v37[1].n128_u64[1];
      if (v37[1].n128_u64[1])
      {
        unint64_t v33 = v37[2].n128_u64[0];
        unsigned __int8 v34 = (void *)v37[1].n128_u64[1];
        if (v37[2].n128_u64[0] != v37[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v33 - 25) < 0) {
              operator delete(*(void **)(v33 - 48));
            }
            v33 -= 48;
          }
          while (v33 != v32);
          unsigned __int8 v34 = (void *)v37[1].n128_u64[1];
        }
        v37[2].n128_u64[0] = v32;
        operator delete(v34);
      }
      if (v37[1].n128_i8[7] < 0) {
        operator delete((void *)v37[0].n128_u64[0]);
      }
      **a4 = 1;
      return;
    }
    goto LABEL_16;
  }
  if (!v37[0].n128_u8[0])
  {
LABEL_16:
    std::error_condition *v7 = *(std::error_condition *)((char *)v37 + 8);
    *(__n128 *)(a5 + 24) = *(__n128 *)((char *)&v37[1] + 8);
    *(void *)(a5 + 40) = v37[2].n128_u64[1];
    v37[1].n128_u64[1] = 0;
    v37[2] = 0uLL;
    *(_DWORD *)(a5 + 48) = v38;
    *(unsigned char *)a5 = 0;
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)(a5 + 32);
  uint64_t v17 = *(void **)(a5 + 24);
  if (v16 != v15)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 32;
    }
    while (v16 != v15);
    uint64_t v17 = *(void **)(a5 + 24);
  }
  *(void *)(a5 + 32) = v15;
  operator delete(v17);
  int v30 = v37[0].n128_u8[0];
  *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
  *(unsigned char *)a5 = v30;
  if (v30) {
    goto LABEL_44;
  }
LABEL_17:
  unint64_t v18 = v37[1].n128_u64[1];
  if (v37[1].n128_u64[1])
  {
    unint64_t v19 = v37[2].n128_u64[0];
    if (v37[2].n128_u64[0] == v37[1].n128_u64[1])
    {
      v37[2].n128_u64[0] = v37[1].n128_u64[1];
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
    else
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 32;
      }
      while (v19 != v18);
      v37[2].n128_u64[0] = v18;
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
  }
  sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
  int v20 = *(unsigned __int8 *)(a1 + 48);
  v37[1].n128_u8[7] = 18;
  strcpy((char *)v37, "InternalError[All]");
  sub_710A8(v20, (uint64_t)v37, *(void *)(a1 + 56));
  if (v37[1].n128_i8[7] < 0) {
    operator delete((void *)v37[0].n128_u64[0]);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v37);
    sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v35, v21);
    if ((v36 & 0x80u) == 0) {
      unint64_t v22 = v35;
    }
    else {
      unint64_t v22 = (void **)v35[0];
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v23 = v36;
    }
    else {
      uint64_t v23 = (uint64_t)v35[1];
    }
    uint64_t v24 = sub_188FC78(v37, (uint64_t)v22, v23);
    sub_188FC78(v24, (uint64_t)" failed in step ", 16);
    int v25 = (void *)std::ostream::operator<<();
    __n128 v26 = sub_188FC78(v25, (uint64_t)" (", 2);
    uint64_t v27 = (char *)operator new(0x19uLL);
    strcpy(v27, "RequestValidationModule");
    uint64_t v28 = sub_188FC78(v26, (uint64_t)v27, 23);
    uint64_t v29 = sub_188FC78(v28, (uint64_t)") with error: ", 14);
    sub_CF2D60(v29, (uint64_t)v7);
    operator delete(v27);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)v35, 3u);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_3E7A10(a1, (uint64_t)v7);
}

void sub_D6C400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C5C9E0(v21);
  _Unwind_Resume(a1);
}

void sub_D6C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A3A4((uint64_t)va);
  sub_C5C9E0(v5);
  _Unwind_Resume(a1);
}

void sub_D6C4A4(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6C4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int32 v10 = (void *)(a5 + 788);
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *unsigned __int32 v10 = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v48, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_CA3808((unsigned __int8 *)&v48, (uint64_t)v53);
    sub_CA5C50(a5, (unsigned __int8 *)v53);
    if (LOBYTE(v53[0]))
    {
      sub_CA701C((uint64_t)&v53[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v53[2]) = 18;
      strcpy((char *)v53, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v53, *(void *)(a1 + 56));
      if (SHIBYTE(v53[2]) < 0) {
        operator delete(v53[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v53);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v46, v25);
        if ((v47 & 0x80u) == 0) {
          __n128 v26 = v46;
        }
        else {
          __n128 v26 = (void **)v46[0];
        }
        if ((v47 & 0x80u) == 0) {
          uint64_t v27 = v47;
        }
        else {
          uint64_t v27 = (uint64_t)v46[1];
        }
        uint64_t v28 = sub_188FC78(v53, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        uint64_t v29 = (void *)std::ostream::operator<<();
        int v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v52);
        int v31 = std::string::append(&v52, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v45 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v44 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v45 >= 0) {
          unint64_t v33 = v44;
        }
        else {
          unint64_t v33 = (void **)v44[0];
        }
        if (v45 >= 0) {
          uint64_t v34 = HIBYTE(v45);
        }
        else {
          uint64_t v34 = (uint64_t)v44[1];
        }
        uint64_t v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        unsigned __int8 v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[0]);
        }
        if ((char)v47 < 0) {
          operator delete(v46[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v52, 3u);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v58 < 0) {
          operator delete(v57);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_75;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v53);
    sub_717B8(v20, a3, (uint64_t)v53, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v53[2]) < 0)
    {
      operator delete(v53[0]);
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16)) {
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16))
      {
LABEL_69:
        void *v38 = 0;
        v38[1] = 0;
        int64_t v39 = (void ***)(v38 + 3);
        v38[2] = 0;
        goto LABEL_72;
      }
    }
    int64_t v39 = sub_CE33B8((void ****)v37);
LABEL_72:
    *(void *)(v37 + 8) = v39;
    sub_EB74FC((int64x2_t *)(v39 - 3), a5 + 8, 0);
    uint64_t v40 = a4[1];
    if (*(unsigned char *)(a5 + 848))
    {
      unsigned __int8 v41 = (_OWORD *)((char *)v10 + 36);
      if (*(unsigned char *)(v40 + 24))
      {
        unint64_t v43 = *(void **)v40;
        if (*(void *)v40)
        {
          *(void *)(v40 + 8) = v43;
          operator delete(v43);
          *(void *)uint64_t v40 = 0;
          *(void *)(v40 + 8) = 0;
          *(void *)(v40 + 16) = 0;
        }
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)unsigned __int8 v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
      }
      else
      {
        *(void *)uint64_t v40 = 0;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = 0;
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)unsigned __int8 v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
        *(unsigned char *)(v40 + 24) = 1;
      }
    }
    else if (*(unsigned char *)(v40 + 24))
    {
      long long v42 = *(void **)v40;
      if (*(void *)v40)
      {
        *(void *)(v40 + 8) = v42;
        operator delete(v42);
      }
      *(unsigned char *)(v40 + 24) = 0;
    }
LABEL_75:
    sub_CF5B18(&v48);
    return;
  }
  sub_3E7814(&v48, (__n128 *)a1);
  LOBYTE(v53[0]) = 0;
  *(__n128 *)&v53[1] = v48;
  long long __p = *(_OWORD *)v49;
  uint64_t v55 = v50;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  int v56 = v51;
  sub_CA5C50(a5, (unsigned __int8 *)v53);
  if (LOBYTE(v53[0]))
  {
    sub_CA701C((uint64_t)&v53[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  uint64_t v17 = (void **)v49[0];
  if (v49[0])
  {
    unint64_t v18 = (void **)v49[1];
    unint64_t v19 = v49[0];
    if (v49[1] != v49[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      unint64_t v19 = v49[0];
    }
    v49[1] = v17;
    operator delete(v19);
  }
}

void sub_D6CBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA5D18(v58);
  _Unwind_Resume(a1);
}

void sub_D6CC88(_Unwind_Exception *a1)
{
  sub_CA5D18(v1);
  _Unwind_Resume(a1);
}

void sub_D6CCA0(_Unwind_Exception *a1)
{
  sub_CA5D18(v1);
  _Unwind_Resume(a1);
}

void sub_D6CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA5D18(v8);
  _Unwind_Resume(a1);
}

void sub_D6CCD0(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v8 = (uint64_t *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 66) = 0u;
  *(_WORD *)(a5 + 82) = 1;
  *(unsigned char *)(a5 + 88) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    unint64_t v11 = a2[1];
    unint64_t v12 = a2[2];
    int v13 = *(unsigned __int8 *)(v12 + 8);
    if (*(unsigned char *)(v12 + 8)) {
      uint64_t v5 = *(void *)v12;
    }
    v49.n128_u64[0] = *a2;
    v49.n128_u32[2] = 0;
    *(void *)&long long v50 = v11;
    BYTE8(v50) = sub_DC5CDC(&v49);
    LOBYTE(v52) = v13;
    if (v13) {
      uint64_t v51 = v5;
    }
    sub_C9CA80((uint64_t)&v49, (uint64_t)v43);
    sub_C9D2A4(a5, (uint64_t)v43);
    if (LOBYTE(v43[0]))
    {
      uint64_t v14 = (char *)v43[1];
      if (v43[1])
      {
        uint64_t v15 = (char *)v43[2];
        uint64_t v16 = v43[1];
        if (v43[2] != v43[1])
        {
          do
          {
            v15 -= 376;
            sub_402C7C((uint64_t)v15);
          }
          while (v15 != v14);
          uint64_t v16 = v43[1];
        }
        v43[2] = v14;
LABEL_44:
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v22 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v23 = (void **)__p[1];
        uint64_t v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v23 - 1) < 0) {
              operator delete(*(v23 - 3));
            }
            v23 -= 4;
          }
          while (v23 != v22);
          uint64_t v16 = __p[0];
        }
        __p[1] = v22;
        goto LABEL_44;
      }
    }
    int v27 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CF2E84(a5 + 32, (uint64_t)v43);
      sub_717B8(v27, a3, (uint64_t)v43, *(void *)(a1 + 56));
      uint64_t v28 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v29 = (void **)__p[1];
        int v30 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v29 - 25) < 0) {
              operator delete(*(v29 - 6));
            }
            v29 -= 6;
          }
          while (v29 != v28);
          int v30 = __p[0];
        }
        __p[1] = v28;
        operator delete(v30);
      }
      if (SHIBYTE(v43[2]) < 0) {
        operator delete(v43[0]);
      }
      sub_D6D328(a4, v8);
    }
    sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v8, *(void *)(a1 + 56));
    int v31 = *(unsigned __int8 *)(a1 + 48);
    HIBYTE(v43[2]) = 18;
    strcpy((char *)v43, "InternalError[All]");
    sub_710A8(v31, (uint64_t)v43, *(void *)(a1 + 56));
    if (SHIBYTE(v43[2]) < 0) {
      operator delete(v43[0]);
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v43);
      sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v41, v32);
      if ((v42 & 0x80u) == 0) {
        unint64_t v33 = v41;
      }
      else {
        unint64_t v33 = (void **)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        uint64_t v34 = v42;
      }
      else {
        uint64_t v34 = (uint64_t)v41[1];
      }
      uint64_t v35 = sub_188FC78(v43, (uint64_t)v33, v34);
      sub_188FC78(v35, (uint64_t)" failed in step ", 16);
      unsigned __int8 v36 = (void *)std::ostream::operator<<();
      uint64_t v37 = sub_188FC78(v36, (uint64_t)" (", 2);
      int v38 = (char *)operator new(0x28uLL);
      strcpy(v38, "InputPointTransformerModuleOutput");
      int64_t v39 = sub_188FC78(v37, (uint64_t)v38, 33);
      uint64_t v40 = sub_188FC78(v39, (uint64_t)") with error: ", 14);
      sub_CF2D60(v40, (uint64_t)v8);
      operator delete(v38);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v41, 3u);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_3E7A10(a1, (uint64_t)v8);
    return;
  }
  sub_3E7814(&v49, (__n128 *)a1);
  LOBYTE(v43[0]) = 0;
  *(__n128 *)&v43[1] = v49;
  *(_OWORD *)long long __p = v50;
  uint64_t v45 = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  int v46 = v52;
  sub_C9D2A4(a5, (uint64_t)v43);
  if (LOBYTE(v43[0]))
  {
    uint64_t v17 = (char *)v43[1];
    if (!v43[1]) {
      goto LABEL_34;
    }
    unint64_t v18 = (char *)v43[2];
    unint64_t v19 = v43[1];
    if (v43[2] != v43[1])
    {
      do
      {
        v18 -= 376;
        sub_402C7C((uint64_t)v18);
      }
      while (v18 != v17);
      unint64_t v19 = v43[1];
    }
    v43[2] = v17;
  }
  else
  {
    int v20 = (void **)__p[0];
    if (!__p[0]) {
      goto LABEL_34;
    }
    uint64_t v21 = (void **)__p[1];
    unint64_t v19 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      unint64_t v19 = __p[0];
    }
    __p[1] = v20;
  }
  operator delete(v19);
LABEL_34:
  uint64_t v24 = v50;
  if ((void)v50)
  {
    uint64_t v25 = *((void *)&v50 + 1);
    __n128 v26 = (void *)v50;
    if (*((void *)&v50 + 1) != (void)v50)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 32;
      }
      while (v25 != v24);
      __n128 v26 = (void *)v50;
    }
    *((void *)&v50 + 1) = v24;
    operator delete(v26);
  }
}

void sub_D6D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C9D440(v21);
  _Unwind_Resume(a1);
}

void sub_D6D314(_Unwind_Exception *a1)
{
  sub_C9D440(v1);
  _Unwind_Resume(a1);
}

void sub_D6D328(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (v2 != a2) {
    sub_C5E9FC(v2, *a2, a2[1], 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  }
  sub_47E0E4(&v3);
  sub_4006C4((uint64_t)v4);
}

void sub_D6D410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_405E28((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_D6D424@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *****a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v7 = (const std::error_condition *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v15 = *a2;
    uint64_t v17 = a2[2];
    uint64_t v16 = a2[3];
    v46.n128_u64[0] = a2[1];
    uint64_t v18 = sub_37B3A8(v16);
    unint64_t v19 = *(void *)v18;
    LODWORD(v47) = *(_DWORD *)(v18 + 8);
    v46.n128_u64[1] = v19;
    BYTE4(v47) = sub_DB6E94(v15);
    LOBYTE(v48) = 1;
    *((void *)&v47 + 1) = v17;
    uint64_t v49 = v16;
    sub_C882CC((uint64_t)&v46, (uint64_t)__p);
    sub_D6DA60(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(&__p[2], 0, 32);
      qmemcpy(__p, "WalkingETAModule", 16);
      HIBYTE(__p[2]) = 16;
      LOBYTE(v39[0]) = 1;
      LODWORD(v45.__r_.__value_.__l.__data_) = 0;
      __p[4] = (void *)sub_CF8370((uint64_t *)&__p[3], "Runtime", (char *)v39, (uint64_t *)(a5 + 56), (int *)&v45);
      sub_717B8(v20, a3, (uint64_t)__p, *(void *)(a1 + 56));
      uint64_t v21 = (void **)__p[3];
      if (__p[3])
      {
        uint64_t v22 = (void **)__p[4];
        uint64_t v23 = __p[3];
        if (__p[4] != __p[3])
        {
          do
          {
            if (*((char *)v22 - 25) < 0) {
              operator delete(*(v22 - 6));
            }
            v22 -= 6;
          }
          while (v22 != v21);
          uint64_t v23 = __p[3];
        }
        __p[4] = v21;
        operator delete(v23);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      *(void *)&double result = sub_D65898(a4, (uint64_t)v7).n128_u64[0];
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v24, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v39, v25);
        if ((v40 & 0x80u) == 0) {
          __n128 v26 = v39;
        }
        else {
          __n128 v26 = (void **)v39[0];
        }
        if ((v40 & 0x80u) == 0) {
          uint64_t v27 = v40;
        }
        else {
          uint64_t v27 = (uint64_t)v39[1];
        }
        uint64_t v28 = sub_188FC78(__p, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        uint64_t v29 = (void *)std::ostream::operator<<();
        int v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v45);
        int v31 = std::string::append(&v45, "ETAModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v38 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v37 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v38 >= 0) {
          unint64_t v33 = v37;
        }
        else {
          unint64_t v33 = (void **)v37[0];
        }
        if (v38 >= 0) {
          uint64_t v34 = HIBYTE(v38);
        }
        else {
          uint64_t v34 = (uint64_t)v37[1];
        }
        uint64_t v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        unsigned __int8 v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, (uint64_t)v7);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
        if ((char)v40 < 0) {
          operator delete(v39[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v45, 3u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v44 < 0) {
          operator delete(v43);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v7);
    }
  }
  else
  {
    sub_3E7814(&v46, (__n128 *)a1);
    LOBYTE(__p[0]) = 0;
    *(__n128 *)&__p[1] = v46;
    *(_OWORD *)&__p[3] = v47;
    __p[5] = v48;
    long long v47 = 0uLL;
    char v48 = 0;
    int v42 = v49;
    sub_D6DA60(a5, (uint64_t)__p);
    sub_C8ACB8((uint64_t)__p);
    uint64_t v10 = v47;
    if ((void)v47)
    {
      uint64_t v11 = *((void *)&v47 + 1);
      unint64_t v12 = (void *)v47;
      if (*((void *)&v47 + 1) != (void)v47)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        unint64_t v12 = (void *)v47;
      }
      *((void *)&v47 + 1) = v10;
      operator delete(v12);
    }
  }
  return result;
}

void sub_D6D950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 137) < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_C8ACB8(v26);
  _Unwind_Resume(a1);
}

void sub_D6DA4C(_Unwind_Exception *a1)
{
  sub_C8ACB8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D6DA60(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2) {
      sub_CF81AC((void *)(a1 + 8), a2 + 8);
    }
    else {
      sub_CF8294(a1, a1 + 8, (void *)(a1 + 8), a2 + 8);
    }
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 8);
    uint64_t v5 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void **)(a1 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 32;
          }
          while (v7 != v6);
          uint64_t v8 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v6;
        operator delete(v8);
      }
      void *v4 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *uint64_t v5 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a1 + 56) = v9;
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    }
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void sub_D6DBA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void ****a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v7 = (const std::error_condition *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(void *)(a5 + 56) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v14 = *(void *)a2;
    uint64_t v15 = *(void *)(a2 + 24);
    long long v16 = *(_OWORD *)(a2 + 32);
    uint64_t v17 = *(void *)(a2 + 56);
    int v18 = **(unsigned __int8 **)(a2 + 48);
    int v19 = *(unsigned __int8 *)(v17 + 24);
    __n128 v49 = *(__n128 *)(a2 + 8);
    *(void *)&long long v50 = v15;
    long long v40 = v16;
    DWORD2(v50) = sub_F3D73C(v14, v16, 2);
    BYTE12(v50) = v18;
    if (v18 - 1) < 0xD && ((0x1543u >> (v18 - 1))) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = sub_DC6EB0(v14);
    }
    uint64_t v51 = (void *)v20;
    if (v19) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = 0;
    }
    long long v52 = v40;
    uint64_t v53 = v21;
    sub_CBFA44((char ***)&v49, (uint64_t)__p);
    sub_CC162C(a5, (uint64_t)__p);
    sub_CC1854((uint64_t)__p);
    int v22 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(__p, 0, sizeof(__p));
      uint64_t v23 = (char *)operator new(0x20uLL);
      strcpy(v23, "WalkingRouteBuilderModule");
      __p[0] = v23;
      *(_OWORD *)&__p[1] = xmmword_20B8870;
      v54.__r_.__value_.__s.__data_[0] = 1;
      __p[4] = (void *)sub_C947F8((uint64_t *)&__p[3], "Runtime", (char *)&v54, (uint64_t *)(a5 + 56));
      sub_717B8(v22, a3, (uint64_t)__p, *(void *)(a1 + 56));
      int v24 = (void **)__p[3];
      if (__p[3])
      {
        __n128 v25 = (void **)__p[4];
        uint64_t v26 = __p[3];
        if (__p[4] != __p[3])
        {
          do
          {
            if (*((char *)v25 - 25) < 0) {
              operator delete(*(v25 - 6));
            }
            v25 -= 6;
          }
          while (v25 != v24);
          uint64_t v26 = __p[3];
        }
        __p[4] = v24;
        operator delete(v26);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_D6E1FC(a4, (uint64_t)v7);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
      int v27 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(__p[2]) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v27, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v43, v28);
        if ((v44 & 0x80u) == 0) {
          uint64_t v29 = v43;
        }
        else {
          uint64_t v29 = (void **)v43[0];
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v30 = v44;
        }
        else {
          uint64_t v30 = (uint64_t)v43[1];
        }
        int v31 = sub_188FC78(__p, (uint64_t)v29, v30);
        sub_188FC78(v31, (uint64_t)" failed in step ", 16);
        long long v32 = (void *)std::ostream::operator<<();
        unint64_t v33 = sub_188FC78(v32, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v54);
        uint64_t v34 = std::string::append(&v54, "RouteBuilderModule");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        int64_t v42 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned __int8 v41 = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v42 >= 0) {
          unsigned __int8 v36 = v41;
        }
        else {
          unsigned __int8 v36 = (void **)v41[0];
        }
        if (v42 >= 0) {
          uint64_t v37 = HIBYTE(v42);
        }
        else {
          uint64_t v37 = (uint64_t)v41[1];
        }
        int64_t v38 = sub_188FC78(v33, (uint64_t)v36, v37);
        int64_t v39 = sub_188FC78(v38, (uint64_t)") with error: ", 14);
        sub_CF2D60(v39, (uint64_t)v7);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        if ((char)v44 < 0) {
          operator delete(v43[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 3u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (v48 < 0) {
          operator delete(v47);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v7);
    }
  }
  else
  {
    sub_3E7814(&v49, (__n128 *)a1);
    LOBYTE(__p[0]) = 0;
    *(__n128 *)&__p[1] = v49;
    *(_OWORD *)&__p[3] = v50;
    __p[5] = v51;
    long long v50 = 0uLL;
    uint64_t v51 = 0;
    int v46 = v52;
    sub_CC162C(a5, (uint64_t)__p);
    sub_CC1854((uint64_t)__p);
    uint64_t v9 = v50;
    if ((void)v50)
    {
      uint64_t v10 = *((void *)&v50 + 1);
      uint64_t v11 = (void *)v50;
      if (*((void *)&v50 + 1) != (void)v50)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 32;
        }
        while (v10 != v9);
        uint64_t v11 = (void *)v50;
      }
      *((void *)&v50 + 1) = v9;
      operator delete(v11);
    }
  }
}

void sub_D6E0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  sub_111ECAC((uint64_t)&a23);
  sub_CC1854(v28);
  _Unwind_Resume(a1);
}

void sub_D6E1E8(_Unwind_Exception *a1)
{
  sub_CC1854(v1);
  _Unwind_Resume(a1);
}

void sub_D6E1FC(void ****a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  if (v5)
  {
    sub_C686F8((uint64_t)*a1, v5);
    operator delete(*v4);
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void ***)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *a1[1] = (void **)***a1;
  uint64_t v6 = (uint64_t)*a1[1];
  int v7 = sub_486180((uint64_t)a1[2]);
  sub_45FE34(v6, v7);
  sub_45FE2C((uint64_t)*a1[1], 1);
  uint64_t v8 = (void **)a1[3];
  uint64_t v9 = (void **)*v8;
  if (*v8)
  {
    uint64_t v10 = (void **)v8[1];
    uint64_t v11 = *v8;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = *v8;
    }
    v8[1] = v9;
    operator delete(v11);
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + 24);
  v8[2] = *(void **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if ((*(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 33) || *(unsigned char *)(sub_5231C((uint64_t)*a1[1]) + 34))
    && *(unsigned char *)a1[4] == 3)
  {
    uint64_t v12 = (uint64_t)a1[5];
    v16.n128_u64[0] = 12;
    v16.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(&v17, &v16);
    sub_3E7A10(v12, (uint64_t)&v17);
    int v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v19;
      uint64_t v15 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v14 - 1) < 0) {
            operator delete(*(v14 - 3));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      int v19 = v13;
      operator delete(v15);
    }
  }
}

void sub_D6E3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C7E3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D6E404(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 1;
  bzero(a2 + 8, 0x5B8uLL);
  sub_C9A0C4((uint64_t)(a2 + 8));
}

void sub_D6EA14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, ...)
{
  va_start(va, a14);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)va);
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v14);
  _Unwind_Resume(a1);
}

void sub_D6EAF8(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6EB0C(_Unwind_Exception *a1)
{
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6EB20(_Unwind_Exception *a1)
{
  sub_CF9BFC((uint64_t)&STACK[0x610]);
  sub_C927E0(v1);
  _Unwind_Resume(a1);
}

void sub_D6EB3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = **(void **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = **(unsigned __int8 **)(a1 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_D6EBF4(a2, v2, v3, v5, v4, v6, v7, (uint64_t *)&v11, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_D6EBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    __n128 v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    __n128 v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_D6EBF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_CF216C(a1, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_DB54FC(a2, a6, a1 + 24);
  *(unsigned char *)(a1 + 1560) = 0;
  *(void *)(a1 + 1568) = a4;
  *(void *)(a1 + 1576) = *a5;
  *(void *)(a1 + 1584) = a6;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1592) = 0;
  uint64_t v16 = *a8;
  uint64_t v17 = a8[1];
  int64_t v18 = v17 - *a8;
  if (v18)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    int v19 = (char *)operator new(v18);
    uint64_t v20 = 0;
    *(void *)(a1 + 1592) = v19;
    *(void *)(a1 + 1600) = v19;
    *(void *)(a1 + 1608) = &v19[32 * (v18 >> 5)];
    do
    {
      uint64_t v21 = v16 + v20;
      int v22 = &v19[v20];
      unsigned int v23 = *(_DWORD *)(v16 + v20 + 16);
      *(_DWORD *)&v19[v20 + 16] = v23;
      if (v23 <= 1) {
        *(_OWORD *)int v22 = *(_OWORD *)v21;
      }
      v22[24] = *(unsigned char *)(v21 + 24);
      v20 += 32;
    }
    while (v16 + v20 != v17);
    *(void *)(a1 + 1600) = &v19[v20];
  }
  *(void *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  __n128 v25 = *(const void **)a9;
  uint64_t v24 = *(void *)(a9 + 8);
  int64_t v26 = v24 - *(void *)a9;
  if (v24 != *(void *)a9)
  {
    if (0x86BCA1AF286BCA1BLL * (v26 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    int v27 = (char *)operator new(v26);
    *(void *)(a1 + 1616) = v27;
    *(void *)(a1 + 1624) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1632) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 1624) = v28;
  }
  *(unsigned char *)(a1 + 1648) = 0;
  if (a7)
  {
    uint64_t v29 = *(void *)(a1 + 1128);
    uint64_t v30 = (char *)(v29 + 4);
    int v31 = (unsigned char *)(v29 + 8);
    long long v32 = *(unsigned char **)(a1 + 1136);
    int64_t v33 = v32 - v31;
    if (v32 != v31) {
      memmove(v30, v31, v32 - v31);
    }
    *(void *)(a1 + 1136) = &v30[v33];
    sub_CFA46C((void *)(a1 + 1176), *(void *)(a1 + 1176), 1u, (uint64_t)v35);
    sub_CFA46C((void *)(a1 + 1152), *(void *)(a1 + 1152), 1u, (uint64_t)v35);
  }
  return a1;
}

void sub_D6EE1C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1648)) {
    *(unsigned char *)(v1 + 1648) = 0;
  }
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 1624) = v6;
    operator delete(v6);
  }
  int v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1600) = v7;
    operator delete(v7);
  }
  sub_4BCED0(v2);
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_D6EE88(void *a1, long long **a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 3 * a3;
    uint64_t v6 = operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v8 = v6;
    do
    {
      sub_CDD030(v6, a2);
      a2 += 3;
      uint64_t v6 = v8 + 3;
      v8 += 3;
      v5 -= 3;
    }
    while (v5 * 8);
    a1[1] = v6;
  }
  return a1;
}

void sub_D6EF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D6EF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_D2DDA0((uint64_t)va1);
  *(void *)(v2 + 8) = v3;
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D6EF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v10 = a5 + 8;
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 152) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  *(_OWORD *)(a5 + 264) = 0u;
  *(_OWORD *)(a5 + 280) = 0u;
  *(_OWORD *)(a5 + 296) = 0u;
  *(_OWORD *)(a5 + 312) = 0u;
  *(_OWORD *)(a5 + 328) = 0u;
  *(_OWORD *)(a5 + 344) = 0u;
  *(_OWORD *)(a5 + 360) = 0u;
  *(_OWORD *)(a5 + 376) = 0u;
  sub_11B16A4(a5 + 8, 0, 0);
  *(void *)(a5 + 364) = 0;
  *(void *)(a5 + 356) = 0;
  *(unsigned char *)(a5 + 372) = 0;
  *(void *)(v10 + 368) = 0;
  *(void *)(a5 + 383) = 0;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(unsigned char *)(a5 + 352) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1)
  {
    sub_3E7814((__n128 *)v35, (__n128 *)a1);
    LOBYTE(v40) = 0;
    long long v41 = *(_OWORD *)v35;
    long long v42 = *(_OWORD *)&v35[16];
    uint64_t v43 = v36;
    *(void *)&unsigned char v35[16] = 0;
    *(void *)&v35[24] = 0;
    uint64_t v36 = 0;
    int v44 = v37;
    sub_CFA608(a5, (uint64_t)&v40);
    sub_C5C10C((uint64_t)&v40);
    uint64_t v15 = *(void *)&v35[16];
    if (*(void *)&v35[16])
    {
      uint64_t v16 = *(void *)&v35[24];
      uint64_t v17 = *(void **)&v35[16];
      if (*(void *)&v35[24] != *(void *)&v35[16])
      {
        do
        {
          if (*(char *)(v16 - 1) < 0) {
            operator delete(*(void **)(v16 - 24));
          }
          v16 -= 32;
        }
        while (v16 != v15);
        uint64_t v17 = *(void **)&v35[16];
      }
      *(void *)&v35[24] = v15;
      operator delete(v17);
    }
  }
  else
  {
    sub_D6F5E4((uint64_t)&v40, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), **(void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(uint64_t **)(a2 + 72), 0, *(void *)(a2 + 80), *(uint64_t ***)(a2 + 88));
    sub_C5AB40(&v40, (uint64_t)v35);
    sub_CFA608(a5, (uint64_t)v35);
    sub_C5C10C((uint64_t)v35);
    int v11 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFA7B0(a5 + 288, (uint64_t)v35);
      sub_717B8(v11, a3, (uint64_t)v35, *(void *)(a1 + 56));
      uint64_t v12 = *(void *)&v35[24];
      if (*(void *)&v35[24])
      {
        uint64_t v13 = v36;
        uint64_t v14 = *(void **)&v35[24];
        if (v36 != *(void *)&v35[24])
        {
          do
          {
            if (*(char *)(v13 - 25) < 0) {
              operator delete(*(void **)(v13 - 48));
            }
            v13 -= 48;
          }
          while (v13 != v12);
          uint64_t v14 = *(void **)&v35[24];
        }
        uint64_t v36 = v12;
        operator delete(v14);
      }
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      sub_CFB46C(*a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v10, *(void *)(a1 + 56));
      int v18 = *(unsigned __int8 *)(a1 + 48);
      v35[23] = 18;
      strcpy(v35, "InternalError[All]");
      sub_710A8(v18, (uint64_t)v35, *(void *)(a1 + 56));
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v35);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v33, v19);
        if ((v34 & 0x80u) == 0) {
          uint64_t v20 = v33;
        }
        else {
          uint64_t v20 = (void **)v33[0];
        }
        if ((v34 & 0x80u) == 0) {
          uint64_t v21 = v34;
        }
        else {
          uint64_t v21 = (uint64_t)v33[1];
        }
        int v22 = sub_188FC78(v35, (uint64_t)v20, v21);
        sub_188FC78(v22, (uint64_t)" failed in step ", 16);
        unsigned int v23 = (void *)std::ostream::operator<<();
        uint64_t v24 = sub_188FC78(v23, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v45);
        __n128 v25 = std::string::append(&v45, "AnalyticsModule");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        int64_t v32 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v31 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v32 >= 0) {
          int v27 = v31;
        }
        else {
          int v27 = (void **)v31[0];
        }
        if (v32 >= 0) {
          uint64_t v28 = HIBYTE(v32);
        }
        else {
          uint64_t v28 = (uint64_t)v31[1];
        }
        uint64_t v29 = sub_188FC78(v24, (uint64_t)v27, v28);
        uint64_t v30 = sub_188FC78(v29, (uint64_t)") with error: ", 14);
        sub_CF2D60(v30, v10);
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        if ((char)v34 < 0) {
          operator delete(v33[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v45, 3u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (v39 < 0) {
          operator delete(v38);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, v10);
    }
    sub_CFD378(&v40);
  }
}

void sub_D6F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v71 - 65) < 0) {
    operator delete(*(void **)(v71 - 88));
  }
  sub_111ECAC((uint64_t)&a21);
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

void sub_D6F59C(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D6F5B4(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D6F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_CFD378(&a70);
  sub_C5C10C(v70);
  _Unwind_Resume(a1);
}

uint64_t sub_D6F5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12, uint64_t a13, uint64_t **a14)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = a8;
  *(void *)(a1 + 56) = a9;
  *(void *)(a1 + 64) = a10;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_4445E8(a1 + 72, *a11, a11[1], 0xCCCCCCCCCCCCCCCDLL * ((a11[1] - *a11) >> 5));
  *(unsigned char *)(a1 + 96) = a12;
  *(unsigned char *)(a1 + 97) = sub_401FE4(a4);
  sub_485C30(a13, a1 + 104);
  *(void *)(a1 + 136) = a13;
  *(void *)(a1 + 144) = sub_4877D8(a13);
  *(void *)(a1 + 152) = v16;
  sub_DBBED8(*(void *)(a1 + 16), a1 + 160);
  uint64_t v17 = *a14;
  int v18 = a14[1];
  if (*a14 != v18)
  {
    while (*((_DWORD *)v17 + 26) != 1)
    {
      v17 += 47;
      if (v17 == v18) {
        goto LABEL_6;
      }
    }
  }
  if (v17 == v18)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v17 = &qword_24F7018;
  }
  sub_48381C(a1 + 264, (uint64_t)v17);
  return a1;
}

void sub_D6F720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  uint64_t v5 = *(void **)(v2 + 232);
  if (v5)
  {
    *(void *)(v2 + 240) = v5;
    operator delete(v5);
  }
  sub_485FC0(v3);
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D6F768(_Unwind_Exception *a1)
{
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D6F77C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  uint64_t v10 = a5 + 8;
  bzero((void *)(a5 + 8), 0x488uLL);
  sub_162C594(a5 + 8, 0, 0);
  sub_162C594(a5 + 568, 0, 0);
  *(unsigned char *)(a5 + 1160) = 0;
  *(_OWORD *)(a5 + 1144) = 0u;
  *(_OWORD *)(a5 + 1128) = 0u;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    sub_D6FE58(a2, (uint64_t)v49);
    sub_CBDB04((uint64_t)v49, (uint64_t)v42);
    sub_CFD464(a5, (uint64_t)v42);
    if (v42[0].n128_u8[0])
    {
      sub_162D64C(&v47);
      sub_162D64C(&v42[0].n128_i8[8]);
    }
    else
    {
      unint64_t v15 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v16 = v43;
        uint64_t v17 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          uint64_t v17 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v15;
        operator delete(v17);
      }
    }
    int v21 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CFD5A4(a5 + 1128, (uint64_t)v42);
      sub_717B8(v21, a3, (uint64_t)v42, *(void *)(a1 + 56));
      unint64_t v22 = v42[1].n128_u64[1];
      if (v42[1].n128_u64[1])
      {
        unint64_t v23 = v43;
        uint64_t v24 = (void *)v42[1].n128_u64[1];
        if (v43 != v42[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v23 - 25) < 0) {
              operator delete(*(void **)(v23 - 48));
            }
            v23 -= 48;
          }
          while (v23 != v22);
          uint64_t v24 = (void *)v42[1].n128_u64[1];
        }
        unint64_t v43 = v22;
        operator delete(v24);
      }
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      sub_D6FFBC(a4, v10);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v25 = *(unsigned __int8 *)(a1 + 48);
      v42[1].n128_u8[7] = 18;
      strcpy((char *)v42, "InternalError[All]");
      sub_710A8(v25, (uint64_t)v42, *(void *)(a1 + 56));
      if (v42[1].n128_i8[7] < 0) {
        operator delete((void *)v42[0].n128_u64[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v42);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v26);
        if ((v41 & 0x80u) == 0) {
          int v27 = v40;
        }
        else {
          int v27 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v28 = v41;
        }
        else {
          uint64_t v28 = (uint64_t)v40[1];
        }
        uint64_t v29 = sub_188FC78(v42, (uint64_t)v27, v28);
        sub_188FC78(v29, (uint64_t)" failed in step ", 16);
        uint64_t v30 = (void *)std::ostream::operator<<();
        int v31 = sub_188FC78(v30, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v48);
        int64_t v32 = std::string::append(&v48, "ResponseBuilderModule");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        int64_t v39 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)int64_t v38 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          unsigned __int8 v34 = v38;
        }
        else {
          unsigned __int8 v34 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v35 = HIBYTE(v39);
        }
        else {
          uint64_t v35 = (uint64_t)v38[1];
        }
        uint64_t v36 = sub_188FC78(v31, (uint64_t)v34, v35);
        int v37 = sub_188FC78(v36, (uint64_t)") with error: ", 14);
        sub_CF2D60(v37, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v48, 3u);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v46 < 0) {
          operator delete(v45);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
    sub_D1EAF8((uint64_t)v49);
  }
  else
  {
    sub_3E7814(v42, (__n128 *)a1);
    v49[0] = 0;
    __n128 v50 = v42[0];
    __n128 __p = v42[1];
    unint64_t v52 = v43;
    v42[1] = 0uLL;
    unint64_t v43 = 0;
    int v53 = v44;
    sub_CFD464(a5, (uint64_t)v49);
    if (v49[0])
    {
      sub_162D64C(&v54);
      sub_162D64C(&v50);
    }
    else
    {
      unint64_t v12 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        uint64_t v13 = __p.n128_i64[1];
        uint64_t v14 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] != __p.n128_u64[0])
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 32;
          }
          while (v13 != v12);
          uint64_t v14 = (void *)__p.n128_u64[0];
        }
        __p.n128_u64[1] = v12;
        operator delete(v14);
      }
    }
    unint64_t v18 = v42[1].n128_u64[0];
    if (v42[1].n128_u64[0])
    {
      unint64_t v19 = v42[1].n128_u64[1];
      uint64_t v20 = (void *)v42[1].n128_u64[0];
      if (v42[1].n128_u64[1] != v42[1].n128_u64[0])
      {
        do
        {
          if (*(char *)(v19 - 1) < 0) {
            operator delete(*(void **)(v19 - 24));
          }
          v19 -= 32;
        }
        while (v19 != v18);
        uint64_t v20 = (void *)v42[1].n128_u64[0];
      }
      v42[1].n128_u64[1] = v18;
      operator delete(v20);
    }
  }
}

void sub_D6FD1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  sub_111ECAC((uint64_t)va);
  sub_D1EAF8((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v7);
  _Unwind_Resume(a1);
}

void sub_D6FE00(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6FE14(_Unwind_Exception *a1)
{
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6FE28(_Unwind_Exception *a1)
{
  sub_D1EAF8((uint64_t)&STACK[0x4D8]);
  sub_CBC8A8(v1);
  _Unwind_Resume(a1);
}

void sub_D6FE44(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_D6FE58(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v6 = (uint64_t **)a1[2];
  uint64_t v7 = a1[3];
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v8 = (_OWORD *)a1[4];
  uint64_t v14 = a1[5];
  sub_4F29BC((uint64_t)v18);
  uint64_t v20 = 0;
  *(_OWORD *)__n128 __p = 0u;
  uint64_t v9 = (uint64_t *)a1[6];
  uint64_t v13 = a1[7];
  sub_D700A8(a2, v4, v5, v6, v7, v8, (uint64_t)&v15, &v14, (uint64_t *)v18, v9, &v13, a1[8]);
  uint64_t v10 = __p[0];
  if (__p[0])
  {
    int v11 = __p[1];
    unint64_t v12 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        int v11 = (void *)sub_3A6B94((uint64_t)v11 - 1120);
      while (v11 != v10);
      unint64_t v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  sub_4F2BD0(v18);
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_D6FF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_D6FFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4 != a2)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if ((v5 & 2) != 0)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        uint64_t v6 = (void *)*v6;
      }
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if ((v7 & 2) != 0)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7) {
        uint64_t v8 = (void *)*v8;
      }
    }
    if (v6 == v8) {
      sub_16323C4(v4, a2);
    }
    else {
      sub_1632068(v4, a2);
    }
  }
  uint64_t v9 = *a1;
  if (*a1 != a2)
  {
    uint64_t v10 = *(void *)(v9 + 568);
    if ((v10 & 2) != 0)
    {
      int v11 = 0;
    }
    else
    {
      int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        int v11 = (void *)*v11;
      }
    }
    uint64_t v12 = a2 + 560;
    uint64_t v13 = v9 + 560;
    uint64_t v14 = *(void *)(a2 + 568);
    if ((v14 & 2) != 0)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unint64_t v15 = (void *)*v15;
      }
    }
    if (v11 == v15) {
      sub_16323C4(v13, v12);
    }
    else {
      sub_1632068(v13, v12);
    }
  }
}

uint64_t sub_D700A8(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12)
{
  v64 = 0;
  v65 = 0;
  v63 = 0;
  unint64_t v19 = *(const void **)a7;
  uint64_t v18 = *(void *)(a7 + 8);
  int64_t v20 = v18 - *(void *)a7;
  if (v18 != *(void *)a7)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    int v21 = (char *)operator new(v18 - *(void *)a7);
    unint64_t v22 = &v21[8 * (v20 >> 3)];
    v63 = v21;
    v65 = v22;
    memcpy(v21, v19, v20);
    v64 = v22;
  }
  uint64_t v62 = *a8;
  unint64_t v23 = (long long *)sub_377D04(a5);
  char v74 = 1;
  sub_29E004((char *)__dst, v23);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)&v53);
  uint64_t v24 = sub_37B3A8(a5);
  uint64_t v25 = *(void *)v24;
  int v26 = *(_DWORD *)(v24 + 8);
  sub_598C04((uint64_t)v66, a9);
  memset(v67, 0, sizeof(v67));
  sub_510340((uint64_t)v67, a9[136], a9[137], 0xAF8AF8AF8AF8AF8BLL * ((a9[137] - a9[136]) >> 5));
  char v27 = sub_DB7034(a2);
  char v28 = sub_D70510(a2, a4, a3, a5);
  sub_DBBB30(a2, (uint64_t)&v52);
  uint64_t v49 = 0;
  uint64_t v50 = sub_DBC410(a2);
  int v51 = v29;
  uint64_t v47 = 0;
  std::string v48 = 0;
  sub_8A6F8((char *)&v47, *a10, a10[1], 0xAAAAAAAAAAAAAAABLL * ((a10[1] - *a10) >> 3));
  uint64_t v46 = *a11;
  char v30 = sub_DB7530(a2);
  sub_54214((uint64_t)__p, a12);
  uint64_t v31 = sub_DC6EB0(a2);
  sub_D7067C(a1, (uint64_t)a3, a4, a5, a6, (uint64_t)&v63, &v62, &v53, v25, v26, (uint64_t)v66, v27, v28, &v52, &v50, (uint64_t)&v47, &v46, v30, (uint64_t *)__p,
    v31);
  int64_t v32 = v45;
  if (v45)
  {
    do
    {
      int v37 = *(char **)v32;
      sub_57AC8((uint64_t *)v32 + 5);
      if (v32[39] < 0) {
        operator delete(*((void **)v32 + 2));
      }
      operator delete(v32);
      int64_t v32 = v37;
    }
    while (v37);
  }
  long long v33 = __p[0];
  __p[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  unsigned __int8 v34 = (void **)v47;
  if (v47)
  {
    uint64_t v35 = v48;
    uint64_t v36 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = v47;
    }
    std::string v48 = v34;
    operator delete(v36);
  }
  int64_t v38 = v67[0];
  if (v67[0])
  {
    int64_t v39 = v67[1];
    long long v40 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        int64_t v39 = (void *)sub_3A6B94((uint64_t)v39 - 1120);
      while (v39 != v38);
      long long v40 = v67[0];
    }
    v67[1] = v38;
    operator delete(v40);
  }
  sub_4F2BD0(v66);
  if (v61 < 0) {
    operator delete(v60);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (v74)
  {
    if (v73 < 0)
    {
      operator delete(v72);
      if ((v71 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v69 & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_40:
        operator delete(__dst[0]);
        unsigned __int8 v41 = (char *)v63;
        if (!v63) {
          return a1;
        }
        goto LABEL_36;
      }
    }
    else if ((v71 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v70);
    if (v69 < 0) {
      goto LABEL_40;
    }
  }
LABEL_35:
  unsigned __int8 v41 = (char *)v63;
  if (v63)
  {
LABEL_36:
    v64 = v41;
    operator delete(v41);
  }
  return a1;
}

void sub_D7047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60)
{
  sub_4F2BD0(&a60);
  sub_CF1EE4((uint64_t)&a34);
  sub_CF1F54(v60 - 176);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D70510(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v7 = sub_DB7034(a1);
  if (!sub_DE7FB0(v7)) {
    return 0;
  }
  if (*a2 == a2[1] || *a3 == a3[1]) {
    return 0;
  }
  char v18 = 15;
  uint64_t v16 = 0;
  strcpy((char *)v17, "RerouteCategory");
  __n128 __p = 0;
  unint64_t v15 = 0;
  uint64_t v8 = sub_374CDC(a4, (uint64_t)v17, (uint64_t *)&__p);
  sub_484AC4(&v19, v8);
  uint64_t v9 = sub_65BD8();
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    int v11 = v15;
    uint64_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    unint64_t v15 = v10;
    operator delete(v12);
  }
  if ((v18 & 0x80000000) == 0) {
    return v9;
  }
  operator delete(v17[0]);
  return v9;
}

void sub_D70658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D7067C(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, _OWORD *a5, uint64_t a6, void *a7, int *a8, uint64_t a9, int a10, uint64_t a11, char a12, char a13, void *a14, uint64_t *a15, uint64_t a16, void *a17, char a18, uint64_t *a19, uint64_t a20)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a6;
  *(void *)(a1 + 24) = *(void *)(a6 + 16);
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v26 = a1 + 32;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a11;
  *(void *)(a1 + 48) = *(void *)(a11 + 16);
  *(void *)(a11 + 16) = 0;
  *(_OWORD *)a11 = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a11 + 24);
  *(void *)(a1 + 72) = *(void *)(a11 + 40);
  *(void *)(a11 + 40) = 0;
  *(_OWORD *)(a11 + 24) = 0u;
  sub_4F4498(a1 + 80, a11 + 48);
  sub_4F4498(v26 + 544, a11 + 544);
  *(void *)(v26 + 1056) = 0;
  *(_OWORD *)(v26 + 1040) = 0u;
  *(_OWORD *)(v26 + 1040) = *(_OWORD *)(a11 + 1040);
  *(void *)(v26 + 1056) = *(void *)(a11 + 1056);
  *(void *)(a11 + 1056) = 0;
  *(_OWORD *)(a11 + 1040) = 0u;
  *(void *)(v26 + 1080) = 0;
  *(_OWORD *)(v26 + 1064) = 0u;
  *(void *)(v26 + 1064) = *(void *)(a11 + 1064);
  *(void *)(v26 + 1072) = *(void *)(a11 + 1072);
  *(void *)(v26 + 1080) = *(void *)(a11 + 1080);
  *(void *)(a11 + 1080) = 0;
  *(_OWORD *)(a11 + 1064) = 0u;
  *(void *)(v26 + 1104) = 0;
  *(_OWORD *)(v26 + 1088) = 0u;
  *(_OWORD *)(v26 + 1088) = *(_OWORD *)(a11 + 1088);
  *(void *)(v26 + 1104) = *(void *)(a11 + 1104);
  *(void *)(a11 + 1104) = 0;
  *(_OWORD *)(a11 + 1088) = 0u;
  int v27 = *a8;
  *(unsigned char *)(v26 + 1116) = *((unsigned char *)a8 + 4);
  *(_DWORD *)(v26 + 1112) = v27;
  *(void *)(v26 + 1120) = 0;
  *(void *)(v26 + 1136) = 0;
  *(void *)(v26 + 1128) = 0;
  *(_OWORD *)(v26 + 1120) = *(_OWORD *)(a8 + 2);
  *(void *)(v26 + 1136) = *((void *)a8 + 3);
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *((void *)a8 + 3) = 0;
  long long v28 = *((_OWORD *)a8 + 3);
  *(_OWORD *)(v26 + 1144) = *((_OWORD *)a8 + 2);
  *(_OWORD *)(v26 + 1160) = v28;
  *(_DWORD *)(v26 + 1176) = a8[16];
  *(void *)(v26 + 1184) = 0;
  *(void *)(v26 + 1200) = 0;
  *(void *)(v26 + 1192) = 0;
  *(_OWORD *)(v26 + 1184) = *(_OWORD *)(a8 + 18);
  *(void *)(v26 + 1200) = *((void *)a8 + 11);
  *((void *)a8 + 10) = 0;
  *((void *)a8 + 11) = 0;
  *((void *)a8 + 9) = 0;
  *(_DWORD *)(v26 + 1208) = a8[24];
  *(void *)(v26 + 1216) = 0;
  *(void *)(v26 + 1232) = 0;
  *(void *)(v26 + 1224) = 0;
  *(_OWORD *)(v26 + 1216) = *(_OWORD *)(a8 + 26);
  *(void *)(v26 + 1232) = *((void *)a8 + 15);
  *((void *)a8 + 13) = 0;
  *((void *)a8 + 14) = 0;
  *((void *)a8 + 15) = 0;
  long long v29 = *((_OWORD *)a8 + 8);
  *(void *)(v26 + 1256) = *((void *)a8 + 18);
  *(_OWORD *)(v26 + 1240) = v29;
  *((void *)a8 + 17) = 0;
  *((void *)a8 + 18) = 0;
  *((void *)a8 + 16) = 0;
  *(unsigned char *)(v26 + 1264) = *((unsigned char *)a8 + 152);
  uint64_t v30 = *((void *)a8 + 20);
  *(unsigned char *)(v26 + 1280) = *((unsigned char *)a8 + 168);
  *(void *)(v26 + 1272) = v30;
  *(void *)(v26 + 1288) = a4;
  uint64_t v31 = *a3;
  int64_t v32 = a3[1];
  if (*a3 != v32)
  {
    while (*((_DWORD *)v31 + 26))
    {
      v31 += 47;
      if (v31 == v32) {
        goto LABEL_6;
      }
    }
  }
  if (v31 == v32)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v31 = &qword_24F7018;
  }
  sub_48381C(v26 + 1296, (uint64_t)v31);
  long long v33 = *a3;
  unsigned __int8 v34 = a3[1];
  if (*a3 != v34)
  {
    while (*((_DWORD *)v33 + 26) != 1)
    {
      v33 += 47;
      if (v33 == v34) {
        goto LABEL_13;
      }
    }
  }
  if (v33 == v34)
  {
LABEL_13:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    long long v33 = &qword_24F7018;
  }
  sub_48381C(a1 + 1704, (uint64_t)v33);
  *(void *)(a1 + 2080) = *a7;
  *(void *)(a1 + 2088) = a3;
  *(void *)(a1 + 2096) = a9;
  *(_DWORD *)(a1 + 2104) = a10;
  *(unsigned char *)(a1 + 2108) = a12;
  *(unsigned char *)(a1 + 2109) = a13;
  *(void *)(a1 + 2112) = *a14;
  uint64_t v35 = *a15;
  *(_DWORD *)(a1 + 2128) = *((_DWORD *)a15 + 2);
  *(void *)(a1 + 2120) = v35;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(_OWORD *)(a1 + 2136) = *(_OWORD *)a16;
  *(void *)(a1 + 2152) = *(void *)(a16 + 16);
  *(void *)a16 = 0;
  *(void *)(a16 + 8) = 0;
  *(void *)(a16 + 16) = 0;
  *(void *)(a1 + 2160) = *a17;
  *(_OWORD *)(a1 + 2168) = *a5;
  *(unsigned char *)(a1 + 2184) = a18;
  uint64_t v36 = *a19;
  *a19 = 0;
  *(void *)(a1 + 2192) = v36;
  *(void *)(a1 + 2200) = a19[1];
  a19[1] = 0;
  uint64_t v37 = a19[2];
  *(void *)(a1 + 2208) = v37;
  uint64_t v38 = a19[3];
  *(void *)(a1 + 2216) = v38;
  *(_DWORD *)(a1 + 2224) = *((_DWORD *)a19 + 8);
  if (v38)
  {
    unint64_t v39 = *(void *)(v37 + 8);
    unint64_t v40 = *(void *)(a1 + 2200);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v39 >= v40) {
        v39 %= v40;
      }
    }
    else
    {
      v39 &= v40 - 1;
    }
    *(void *)(v36 + 8 * v39) = a1 + 2208;
    a19[2] = 0;
    a19[3] = 0;
  }
  *(void *)(a1 + 2232) = a20;
  return a1;
}

void sub_D70A98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  sub_402C7C(v4);
  sub_CF1EE4(v3);
  sub_C940D0(v2);
  unsigned int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D70AFC()
{
  return *(void *)(v0 - 112);
}

void sub_D70B0C(void *a1@<X8>)
{
  *(void *)(v2 + 8) = v1;
  operator delete(a1);
}

void sub_D70B30(void *a1@<X8>)
{
  *(void *)(v1 - 112) = v2;
  operator delete(a1);
}

double sub_D70B54()
{
  byte_25E6B97 = 1;
  word_25E6B80 = 65;
  byte_25E6BAF = 1;
  word_25E6B98 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6C40 = 0u;
  *(_OWORD *)&qword_25E6C50 = 0u;
  dword_25E6C60 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6C40, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6C40, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6C40, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6C40, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6BC7 = 8;
  strcpy((char *)&qword_25E6BB0, "any_mode");
  byte_25E6BDF = 7;
  strcpy((char *)&dword_25E6BC8, "cycling");
  byte_25E6BF7 = 7;
  strcpy((char *)&dword_25E6BE0, "driving");
  byte_25E6C0F = 7;
  strcpy((char *)&dword_25E6BF8, "walking");
  qword_25E6C18 = 0;
  qword_25E6C20 = 0;
  qword_25E6C10 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6C10 = (uint64_t)v0;
  qword_25E6C18 = (uint64_t)(v0 + 9);
  qword_25E6C20 = (uint64_t)(v0 + 9);
  qword_25E6C28 = 0;
  qword_25E6C30 = 0;
  unk_25E6C38 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6C30 = (uint64_t)(v1 + 9);
  unk_25E6C38 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6C28 = (uint64_t)v1;
  return result;
}

void sub_D70E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6C50) {
    sub_20B04C8((void **)qword_25E6C50);
  }
  uint64_t v37 = (void *)xmmword_25E6C40;
  *(void *)&xmmword_25E6C40 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D70EBC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v6 = *(void *)sub_37D0C0(v3);
  memset(v64, 0, 24);
  uint64_t v57 = 1851878480;
  char v58 = 4;
  v59 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  sub_D03E24((char *)&v59, 0, 0, 0);
  v64[23] = 12;
  strcpy(v64, "Plan.Started");
  sub_710A8(14, (uint64_t)v64, v6);
  if ((v64[23] & 0x80000000) != 0) {
    operator delete(*(void **)v64);
  }
  sub_725D0((uint64_t)v56);
  v55[0] = v5;
  v55[1] = (uint64_t)v56;
  v55[2] = v2;
  v55[3] = v4;
  *(void *)v64 = v5;
  sub_CC1FF4((uint64_t *)v64, (uint64_t)v71);
  if (!v71[0])
  {
    *(void *)v64 = operator new(0x20uLL);
    *(_OWORD *)&v64[8] = xmmword_20B9800;
    strcpy(*(char **)v64, "failed to resolve route handle");
    sub_D71EDC(v55, (uint64_t)v64, &v72);
    if ((v64[23] & 0x80000000) == 0) {
      goto LABEL_103;
    }
    uint64_t v9 = *(void ***)v64;
    goto LABEL_102;
  }
  long long v65 = 0u;
  memset(v64, 0, sizeof(v64));
  std::string::assign((std::string *)v64, "RouteHandleParserModule");
  if (v78)
  {
    LOBYTE(v62) = 1;
    uint64_t v7 = v65;
    if ((unint64_t)v65 >= *((void *)&v65 + 1))
    {
      uint64_t v8 = sub_C947F8((uint64_t *)&v64[24], "Runtime", (char *)&v62, &v79);
    }
    else
    {
      sub_C949C8((int)&v65 + 8, v65, "Runtime", (char *)&v62, &v79);
      uint64_t v8 = v7 + 48;
    }
    *(void *)&long long v65 = v8;
  }
  sub_71740(14, (uint64_t)v64, v6);
  uint64_t v10 = *(void *)&v64[24];
  if (*(void *)&v64[24])
  {
    uint64_t v11 = v65;
    uint64_t v12 = *(void **)&v64[24];
    if ((void)v65 != *(void *)&v64[24])
    {
      do
      {
        if (*(char *)(v11 - 25) < 0) {
          operator delete(*(void **)(v11 - 48));
        }
        v11 -= 48;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)&v64[24];
    }
    *(void *)&long long v65 = v10;
    operator delete(v12);
  }
  if ((v64[23] & 0x80000000) != 0) {
    operator delete(*(void **)v64);
  }
  uint64_t v13 = sub_37B3A8(v4);
  uint64_t v14 = *(void *)v13;
  int v54 = *(_DWORD *)(v13 + 8);
  uint64_t v53 = v14;
  *(void *)v64 = v5;
  *(_DWORD *)&v64[8] = 0;
  *(void *)&v64[16] = v4;
  v64[24] = sub_DC5CDC(v64);
  BYTE8(v65) = 0;
  sub_C9CA80((uint64_t)v64, (uint64_t)v49);
  if (!v49[0])
  {
    *(void *)v64 = operator new(0x28uLL);
    *(_OWORD *)&v64[8] = xmmword_20B9240;
    strcpy(*(char **)v64, "input point transformer module failed");
    sub_D71EDC(v55, (uint64_t)v64, &v50);
    if ((v64[23] & 0x80000000) == 0) {
      goto LABEL_88;
    }
    char v18 = *(void **)v64;
    goto LABEL_87;
  }
  sub_CF2E84((uint64_t)&v52, (uint64_t)v64);
  sub_71740(14, (uint64_t)v64, v6);
  uint64_t v15 = *(void *)&v64[24];
  if (*(void *)&v64[24])
  {
    uint64_t v16 = v65;
    uint64_t v17 = *(void **)&v64[24];
    if ((void)v65 != *(void *)&v64[24])
    {
      do
      {
        if (*(char *)(v16 - 25) < 0) {
          operator delete(*(void **)(v16 - 48));
        }
        v16 -= 48;
      }
      while (v16 != v15);
      uint64_t v17 = *(void **)&v64[24];
    }
    *(void *)&long long v65 = v15;
    operator delete(v17);
  }
  if ((v64[23] & 0x80000000) != 0) {
    operator delete(*(void **)v64);
  }
  sub_CF6428((uint64_t)v64, v5, (uint64_t *)&v50, v4);
  sub_CDA700((uint64_t)v64, (uint64_t)v67);
  uint64_t v19 = *((void *)&v65 + 1);
  if (*((void *)&v65 + 1))
  {
    uint64_t v20 = v66;
    int v21 = (void *)*((void *)&v65 + 1);
    if (v66 != *((void *)&v65 + 1))
    {
      do
      {
        unint64_t v22 = *(void **)(v20 - 40);
        if (v22)
        {
          *(void *)(v20 - 32) = v22;
          operator delete(v22);
        }
        v20 -= 112;
      }
      while (v20 != v19);
      int v21 = (void *)*((void *)&v65 + 1);
    }
    uint64_t v66 = v19;
    operator delete(v21);
  }
  uint64_t v23 = *(void *)&v64[8];
  if (*(void *)&v64[8])
  {
    uint64_t v24 = *(void *)&v64[16];
    uint64_t v25 = *(void **)&v64[8];
    if (*(void *)&v64[16] != *(void *)&v64[8])
    {
      do
      {
        uint64_t v26 = *(void **)(v24 - 24);
        if (v26)
        {
          *(void *)(v24 - 16) = v26;
          operator delete(v26);
        }
        uint64_t v27 = *(void *)(v24 - 48);
        if (v27)
        {
          uint64_t v28 = *(void *)(v24 - 40);
          long long v29 = *(void **)(v24 - 48);
          if (v28 != v27)
          {
            do
            {
              uint64_t v30 = *(void **)(v28 - 32);
              if (v30)
              {
                *(void *)(v28 - 24) = v30;
                operator delete(v30);
              }
              v28 -= 104;
            }
            while (v28 != v27);
            long long v29 = *(void **)(v24 - 48);
          }
          *(void *)(v24 - 40) = v27;
          operator delete(v29);
        }
        uint64_t v31 = *(void **)(v24 - 88);
        if (v31)
        {
          *(void *)(v24 - 80) = v31;
          operator delete(v31);
        }
        v24 -= 168;
      }
      while (v24 != v23);
      uint64_t v25 = *(void **)&v64[8];
    }
    *(void *)&v64[16] = v23;
    operator delete(v25);
  }
  if (v67[0])
  {
    long long v65 = 0u;
    memset(v64, 0, sizeof(v64));
    std::string::assign((std::string *)v64, "TransitSnappingModule");
    LOBYTE(v62) = 1;
    uint64_t v32 = v65;
    if ((unint64_t)v65 >= *((void *)&v65 + 1))
    {
      uint64_t v33 = sub_C947F8((uint64_t *)&v64[24], "Runtime", (char *)&v62, v70);
    }
    else
    {
      sub_C949C8((int)&v65 + 8, v65, "Runtime", (char *)&v62, v70);
      uint64_t v33 = v32 + 48;
    }
    *(void *)&long long v65 = v33;
    sub_71740(14, (uint64_t)v64, v6);
    uint64_t v34 = *(void *)&v64[24];
    if (*(void *)&v64[24])
    {
      uint64_t v35 = v65;
      uint64_t v36 = *(void **)&v64[24];
      if ((void)v65 != *(void *)&v64[24])
      {
        do
        {
          if (*(char *)(v35 - 25) < 0) {
            operator delete(*(void **)(v35 - 48));
          }
          v35 -= 48;
        }
        while (v35 != v34);
        uint64_t v36 = *(void **)&v64[24];
      }
      *(void *)&long long v65 = v34;
      operator delete(v36);
    }
    if ((v64[23] & 0x80000000) != 0) {
      operator delete(*(void **)v64);
    }
    sub_D73474((uint64_t)v64, v4, v5, (uint64_t *)&v68, &v53);
    uint64_t v62 = (char *)operator new(0x28uLL);
    long long v63 = xmmword_20B93A0;
    strcpy(v62, "routing/transit/JourneyPlanner.json");
    sub_CD5638();
  }
  strcpy(v64, "snapping module failed");
  v64[23] = 22;
  sub_D71EDC(v55, (uint64_t)v64, &v68);
  if ((v64[23] & 0x80000000) != 0) {
    operator delete(*(void **)v64);
  }
  if (v67[0])
  {
    *(void *)v64 = &v68;
    sub_BC2EEC((void ***)v64);
    goto LABEL_88;
  }
  uint64_t v37 = (uint64_t)v69;
  if (v69)
  {
    uint64_t v38 = v70[0];
    char v18 = v69;
    if ((void *)v70[0] != v69)
    {
      do
      {
        if (*(char *)(v38 - 1) < 0) {
          operator delete(*(void **)(v38 - 24));
        }
        v38 -= 32;
      }
      while (v38 != v37);
      char v18 = v69;
    }
    v70[0] = v37;
LABEL_87:
    operator delete(v18);
  }
LABEL_88:
  if (v49[0])
  {
    unint64_t v39 = v50.n128_u64[0];
    if (!v50.n128_u64[0]) {
      goto LABEL_103;
    }
    uint64_t v40 = v50.n128_i64[1];
    uint64_t v9 = (void **)v50.n128_u64[0];
    if (v50.n128_u64[1] != v50.n128_u64[0])
    {
      do
      {
        v40 -= 376;
        sub_402C7C(v40);
      }
      while (v40 != v39);
      uint64_t v9 = (void **)v50.n128_u64[0];
    }
    v50.n128_u64[1] = v39;
  }
  else
  {
    unsigned __int8 v41 = v51;
    if (!v51) {
      goto LABEL_103;
    }
    long long v42 = v52;
    uint64_t v9 = v51;
    if (v52 != v51)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 4;
      }
      while (v42 != v41);
      uint64_t v9 = v51;
    }
    uint64_t v52 = v41;
  }
LABEL_102:
  operator delete(v9);
LABEL_103:
  if (!v71[0])
  {
    int v44 = v73;
    if (!v73) {
      goto LABEL_118;
    }
    std::string v45 = v74;
    unint64_t v43 = v73;
    if (v74 != v73)
    {
      do
      {
        if (*((char *)v45 - 1) < 0) {
          operator delete(*(v45 - 3));
        }
        v45 -= 4;
      }
      while (v45 != v44);
      unint64_t v43 = v73;
    }
    char v74 = v44;
    goto LABEL_117;
  }
  if (v77)
  {
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    if (SHIBYTE(v74) < 0)
    {
      unint64_t v43 = (void **)v72.n128_u64[1];
LABEL_117:
      operator delete(v43);
    }
  }
LABEL_118:
  uint64_t v46 = v59;
  if (v59)
  {
    uint64_t v47 = v60;
    std::string v48 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v47 - 25) < 0) {
          operator delete(*(v47 - 6));
        }
        v47 -= 6;
      }
      while (v47 != v46);
      std::string v48 = v59;
    }
    uint64_t v60 = v46;
    operator delete(v48);
  }
  if (v58 < 0) {
    operator delete((void *)v57);
  }
}

void sub_D71BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_162D64C(v26 + 560);
  sub_162D64C(&STACK[0xF20]);
  sub_D779E4((uint64_t)&STACK[0x920]);
  sub_946714((uint64_t)&a18);
  sub_9BE2CC((uint64_t)&a26);
  sub_D501D0((uint64_t)&STACK[0x340]);
  sub_D5026C(v27 - 256);
  sub_C9D440((uint64_t)&STACK[0x848]);
  sub_D77928(v27 - 200);
  sub_A3A4((uint64_t)&STACK[0x8F0]);
  _Unwind_Resume(a1);
}

void sub_D71E6C(_Unwind_Exception *a1)
{
}

void sub_D71E80(_Unwind_Exception *a1)
{
}

void sub_D71E94(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xF37]) < 0)
  {
    operator delete(*v1);
    sub_A3A4((uint64_t)&STACK[0x8F0]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD71E5CLL);
}

void sub_D71EB8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete(*(void **)(v1 + 1456));
  }
  sub_A43C((void **)&STACK[0xF20]);
  _Unwind_Resume(a1);
}

void sub_D71EDC(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v23);
    uint64_t v6 = sub_188FC78(v23, (uint64_t)"[transit directions] ", 21);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_188FC78(v6, v8, v9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v10 = *a1;
  double v11 = sub_72638(a1[1]);
  *(void *)&long long v26 = v10;
  *((double *)&v26 + 1) = v11;
  uint64_t v12 = a1[2];
  sub_3E7814(&v17, a3);
  sub_CF1ACC((uint64_t)v20, 1, (uint64_t)&v17, a1[3], *a1, &v26);
  sub_CBB384(v20, (uint64_t)__p);
  sub_C6B2B4((uint64_t)v23, (uint64_t)__p);
  sub_162C594(v25, 0, 0);
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v23);
  sub_162D64C(v25);
  sub_162D64C(v23);
  sub_162D64C(__p);
  sub_CF22FC((uint64_t)v20);
  uint64_t v14 = (void **)v18;
  if (v18)
  {
    uint64_t v15 = v19;
    uint64_t v16 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v18;
    }
    uint64_t v19 = v14;
    operator delete(v16);
  }
}

void sub_D72174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x390]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void sub_D721F8()
{
  sub_162D64C(v0);
  JUMPOUT(0xD72204);
}

uint64_t *sub_D7222C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    unint64_t v5 = 0;
    do
    {
      while (v5 >= a2[2])
      {
        double result = (uint64_t *)sub_483F60(a2, v2);
        unint64_t v5 = (unint64_t)result;
        a2[1] = (uint64_t)result;
        v2 += 376;
        if (v2 == v3) {
          return result;
        }
      }
      double result = (uint64_t *)sub_48381C(v5, v2);
      v5 += 376;
      a2[1] = v5;
      a2[1] = v5;
      v2 += 376;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_D722C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

void sub_D722D8(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D722EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2400))
  {
    uint64_t v2 = *(void **)(a1 + 2368);
    if (v2)
    {
      *(void *)(a1 + 2376) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 2367) < 0) {
      operator delete(*(void **)(a1 + 2344));
    }
    *(unsigned char *)(a1 + 2400) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 2312);
  if (v3)
  {
    *(void *)(a1 + 2320) = v3;
    operator delete(v3);
  }
  sub_4BCED0(a1 + 752);
  sub_402C7C(a1 + 376);

  return sub_402C7C(a1);
}

void sub_D7236C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitGuidanceModule");
  char v30 = 1;
  unint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  double v29 = round(*(double *)a1);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_D0729C((uint64_t *)(a2 + 24), "Runtime", &v30, &v29);
  }
  else
  {
    sub_D0746C(a2 + 40, *(void *)(a2 + 32), "Runtime", &v30, &v29);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 8));
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_D73D50((uint64_t *)(a2 + 24), "Runtime.RouteBuilder", &v30, &v29);
  }
  else
  {
    sub_D73F20(a2 + 40, v7, "Runtime.RouteBuilder", &v30, &v29);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 16));
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_D74094((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.FeatureDataBuilder", &v30, &v29);
  }
  else
  {
    sub_D74264(a2 + 40, v8, "Runtime.RouteBuilder.FeatureDataBuilder", &v30, &v29);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 24));
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_D743D8((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.WalkingRouteBuilder", &v30, &v29);
  }
  else
  {
    sub_D745A8(a2 + 40, v9, "Runtime.RouteBuilder.WalkingRouteBuilder", &v30, &v29);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 104));
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_D7471C((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.IncidentsResolver", &v30, &v29);
  }
  else
  {
    sub_D748EC(a2 + 40, v10, "Runtime.RouteBuilder.IncidentsResolver", &v30, &v29);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 64));
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_D74A60((uint64_t *)(a2 + 24), "Runtime.TimeDisplayTypeAnnotation", &v30, &v29);
  }
  else
  {
    sub_D74C30(a2 + 40, v11, "Runtime.TimeDisplayTypeAnnotation", &v30, &v29);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 72));
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.BoardingInfoAnnotation", &v30, &v29);
  }
  else
  {
    sub_D74F74(a2 + 40, v12, "Runtime.BoardingInfoAnnotation", &v30, &v29);
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 80));
  if (v13 >= *(void *)(a2 + 40))
  {
    unint64_t v14 = sub_D750E8((uint64_t *)(a2 + 24), "Runtime.StepBadgeAnnotation", &v30, &v29);
  }
  else
  {
    sub_D752B8(a2 + 40, v13, "Runtime.StepBadgeAnnotation", &v30, &v29);
    unint64_t v14 = v13 + 48;
    *(void *)(a2 + 32) = v14;
  }
  *(void *)(a2 + 32) = v14;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 88));
  if (v14 >= *(void *)(a2 + 40))
  {
    unint64_t v15 = sub_D7542C((uint64_t *)(a2 + 24), "Runtime.VehiclePositionInfoAnnotation", &v30, &v29);
  }
  else
  {
    sub_D755FC(a2 + 40, v14, "Runtime.VehiclePositionInfoAnnotation", &v30, &v29);
    unint64_t v15 = v14 + 48;
    *(void *)(a2 + 32) = v15;
  }
  *(void *)(a2 + 32) = v15;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 96));
  if (v15 >= *(void *)(a2 + 40))
  {
    unint64_t v16 = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.ScheduleInfoAnnotation", &v30, &v29);
  }
  else
  {
    sub_D74F74(a2 + 40, v15, "Runtime.ScheduleInfoAnnotation", &v30, &v29);
    unint64_t v16 = v15 + 48;
    *(void *)(a2 + 32) = v16;
  }
  *(void *)(a2 + 32) = v16;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 112));
  if (v16 >= *(void *)(a2 + 40))
  {
    unint64_t v17 = sub_D750E8((uint64_t *)(a2 + 24), "Runtime.IncidentsAnnotation", &v30, &v29);
  }
  else
  {
    sub_D752B8(a2 + 40, v16, "Runtime.IncidentsAnnotation", &v30, &v29);
    unint64_t v17 = v16 + 48;
    *(void *)(a2 + 32) = v17;
  }
  *(void *)(a2 + 32) = v17;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 120));
  if (v17 >= *(void *)(a2 + 40))
  {
    unint64_t v18 = sub_D75770((uint64_t *)(a2 + 24), "Runtime.InstructionBuilder", &v30, &v29);
  }
  else
  {
    sub_D75940(a2 + 40, v17, "Runtime.InstructionBuilder", &v30, &v29);
    unint64_t v18 = v17 + 48;
    *(void *)(a2 + 32) = v18;
  }
  *(void *)(a2 + 32) = v18;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 128));
  if (v18 >= *(void *)(a2 + 40))
  {
    unint64_t v19 = sub_D75AB4((uint64_t *)(a2 + 24), "Runtime.AdvisoryBuilder", &v30, &v29);
  }
  else
  {
    sub_D75C84(a2 + 40, v18, "Runtime.AdvisoryBuilder", &v30, &v29);
    unint64_t v19 = v18 + 48;
    *(void *)(a2 + 32) = v19;
  }
  *(void *)(a2 + 32) = v19;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 136));
  if (v19 >= *(void *)(a2 + 40))
  {
    unint64_t v20 = sub_D75DF8((uint64_t *)(a2 + 24), "Runtime.ArtworkBuilder", &v30, &v29);
  }
  else
  {
    sub_D75FC8(a2 + 40, v19, "Runtime.ArtworkBuilder", &v30, &v29);
    unint64_t v20 = v19 + 48;
    *(void *)(a2 + 32) = v20;
  }
  *(void *)(a2 + 32) = v20;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 152));
  if (v20 >= *(void *)(a2 + 40))
  {
    unint64_t v21 = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.StyleAttributesBuilder", &v30, &v29);
  }
  else
  {
    sub_D74F74(a2 + 40, v20, "Runtime.StyleAttributesBuilder", &v30, &v29);
    unint64_t v21 = v20 + 48;
    *(void *)(a2 + 32) = v21;
  }
  *(void *)(a2 + 32) = v21;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 160));
  if (v21 >= *(void *)(a2 + 40))
  {
    unint64_t v22 = sub_D7613C((uint64_t *)(a2 + 24), "Runtime.RouteHandleAnnotation", &v30, &v29);
  }
  else
  {
    sub_D7630C(a2 + 40, v21, "Runtime.RouteHandleAnnotation", &v30, &v29);
    unint64_t v22 = v21 + 48;
    *(void *)(a2 + 32) = v22;
  }
  *(void *)(a2 + 32) = v22;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 168));
  if (v22 >= *(void *)(a2 + 40))
  {
    unint64_t v23 = sub_D76480((uint64_t *)(a2 + 24), "Runtime.StepPaymentMethodIdAnnotationBuilder", &v30, &v29);
  }
  else
  {
    sub_D76650(a2 + 40, v22, "Runtime.StepPaymentMethodIdAnnotationBuilder", &v30, &v29);
    unint64_t v23 = v22 + 48;
    *(void *)(a2 + 32) = v23;
  }
  *(void *)(a2 + 32) = v23;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 176));
  if (v23 >= *(void *)(a2 + 40))
  {
    unint64_t v24 = sub_D767C4((uint64_t *)(a2 + 24), "Runtime.RoutePaymentSuggestionAnnotationBuilder", &v30, &v29);
  }
  else
  {
    sub_D76994(a2 + 40, v23, "Runtime.RoutePaymentSuggestionAnnotationBuilder", &v30, &v29);
    unint64_t v24 = v23 + 48;
    *(void *)(a2 + 32) = v24;
  }
  *(void *)(a2 + 32) = v24;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 144));
  if (v24 >= *(void *)(a2 + 40))
  {
    unint64_t v25 = sub_D76B08((uint64_t *)(a2 + 24), "Runtime.WalkToAccessPointConnector", &v30, &v29);
  }
  else
  {
    sub_D76CD8(a2 + 40, v24, "Runtime.WalkToAccessPointConnector", &v30, &v29);
    unint64_t v25 = v24 + 48;
    *(void *)(a2 + 32) = v25;
  }
  *(void *)(a2 + 32) = v25;
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 184));
  if (v25 >= *(void *)(a2 + 40))
  {
    unint64_t v26 = sub_D76E4C((uint64_t *)(a2 + 24), "Runtime.TicketingURLsAnnotation", &v30, &v29);
    *(void *)(a2 + 32) = v26;
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_66;
    }
  }
  else
  {
    sub_D7701C(a2 + 40, v25, "Runtime.TicketingURLsAnnotation", &v30, &v29);
    unint64_t v26 = v25 + 48;
    *(void *)(a2 + 32) = v26;
    *(void *)(a2 + 32) = v26;
    if (!*(unsigned char *)(a1 + 40)) {
      goto LABEL_66;
    }
  }
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 32));
  if (v26 >= *v5)
  {
    unint64_t v26 = sub_D77190((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.TransferInstructionFinder", &v30, &v29);
  }
  else
  {
    sub_D77360(a2 + 40, v26, "Runtime.RouteBuilder.TransferInstructionFinder", &v30, &v29);
    v26 += 48;
    *(void *)(a2 + 32) = v26;
  }
  *(void *)(a2 + 32) = v26;
LABEL_66:
  char v30 = 1;
  double v29 = round(*(double *)(a1 + 48));
  if (v26 >= *v5)
  {
    unint64_t v27 = sub_D74A60((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.FareResolver", &v30, &v29);
    *(void *)(a2 + 32) = v27;
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  else
  {
    sub_D74C30(a2 + 40, v26, "Runtime.RouteBuilder.FareResolver", &v30, &v29);
    unint64_t v27 = v26 + 48;
    *(void *)(a2 + 32) = v27;
    *(void *)(a2 + 32) = v27;
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  char v30 = 4;
  LODWORD(v29) = 1;
  if (v27 >= *v5)
  {
    uint64_t v28 = sub_CFE33C((uint64_t *)(a2 + 24), "RouteBuilder.ResponseContainsFares", &v30, (int *)&v29);
  }
  else
  {
    sub_CFE50C(a2 + 40, v27, "RouteBuilder.ResponseContainsFares", &v30, (int *)&v29);
    uint64_t v28 = v27 + 48;
    *(void *)(a2 + 32) = v27 + 48;
  }
  *(void *)(a2 + 32) = v28;
}

void sub_D72D5C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D72D70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D72F98(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D72FAC@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitDirectionsAnalyticsModule");
  char v7 = 1;
  double v6 = round(*a1);
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D0729C((uint64_t *)(a2 + 24), "Runtime", &v7, &v6);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_D0746C(a2 + 40, *(void *)(a2 + 32), "Runtime", &v7, &v6);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D73078(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D7308C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D730A4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D730B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  unint64_t v14 = (long long *)sub_377D04(a4);
  char v31 = 1;
  sub_29E004((char *)__dst, v14);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)v16);
  sub_D774D4(a1, a3, a4, a5, a6, (uint64_t)v16, a7);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    unint64_t v18 = v17;
    operator delete(v17);
  }
  if (v31)
  {
    if (v30 < 0)
    {
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v26 & 0x80000000) == 0) {
          return a1;
        }
LABEL_16:
        operator delete(__dst[0]);
        return a1;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v27);
    if ((v26 & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_16;
  }
  return a1;
}

void sub_D7322C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CF1EE4((uint64_t)va);
  sub_CF1F54(v2 - 152);
  _Unwind_Resume(a1);
}

void sub_D73250(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_D73268(uint64_t a1)
{
  sub_402C7C(a1 + 576);
  sub_402C7C(a1 + 200);
  if ((*(char *)(a1 + 175) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 152));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_D732E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitResponseBuilderModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D733A8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D733BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D733D4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_D733E8(uint64_t *a1, char *__s, char *a3, double *a4, int *a5)
{
  unint64_t v7 = a1[2];
  char v6 = a1 + 2;
  unint64_t v8 = *(v6 - 1);
  if (v8 >= v7)
  {
    uint64_t v10 = sub_D58918(a1, __s, a3, a4, a5);
    a1[1] = v10;
    return v10 - 48;
  }
  else
  {
    sub_D58AF0((int)v6, *(v6 - 1), __s, a3, a4, a5);
    a1[1] = v8 + 48;
    a1[1] = v8 + 48;
    return v8;
  }
}

void sub_D7346C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D73474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v10 = sub_D50848(a5 + 2);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = v10;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 == v12)
  {
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  else
  {
    unint64_t v13 = 0;
    do
    {
      if (!*(_DWORD *)(v11 + 152))
      {
        if ((unint64_t)v13 >= *(void *)(a1 + 48))
        {
          unint64_t v13 = (void *)sub_BC3210((int64x2_t *)(a1 + 32), v11);
        }
        else
        {
          sub_8EB7C4(v13, v11);
          v13 += 23;
          *(void *)(a1 + 40) = v13;
        }
        *(void *)(a1 + 40) = v13;
      }
      v11 += 184;
    }
    while (v11 != v12);
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    if (v14 != v15)
    {
      unint64_t v16 = 0;
      do
      {
        if (*(_DWORD *)(v14 + 152) == 1)
        {
          if ((unint64_t)v16 >= *(void *)(a1 + 72))
          {
            unint64_t v16 = (void *)sub_BC3210((int64x2_t *)(a1 + 56), v14);
          }
          else
          {
            sub_8EB7C4(v16, v14);
            v16 += 23;
            *(void *)(a1 + 64) = v16;
          }
          *(void *)(a1 + 64) = v16;
        }
        v14 += 184;
      }
      while (v14 != v15);
    }
  }
  *(_DWORD *)(a1 + 80) = *a5;
  *(_DWORD *)(a1 + 84) = a5[1];
  *(void *)(a1 + 88) = *(unsigned int *)(a3 + 468);
  unint64_t v17 = *(uint64_t (****)())(a3 + 304);
  if (!v17) {
    unint64_t v17 = &off_2535C50;
  }
  unint64_t v18 = (uint64_t (***)())v17[12];
  if (v18) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = &off_2536528;
  }
  sub_DC4B44((uint64_t)v19, (char **)(a1 + 96));
  *(unsigned char *)(a1 + 120) = sub_DB7200(a3);
  unint64_t v20 = *(uint64_t (****)())(a3 + 328);
  if (!v20) {
    unint64_t v20 = &off_2539290;
  }
  *(unsigned char *)(a1 + 121) = *((unsigned char *)v20 + 218);
  char v21 = sub_DB7230(a3);
  unint64_t v22 = *(uint64_t (****)())(a3 + 304);
  if (!v22) {
    unint64_t v22 = &off_2535C50;
  }
  unint64_t v23 = (uint64_t (***)())v22[12];
  if (!v23) {
    unint64_t v23 = &off_2536528;
  }
  char v24 = (uint64_t (***)())v23[8];
  if (v24) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = &off_2536508;
  }
  char v26 = sub_DB724C((uint64_t)v25);
  unint64_t v27 = *(uint64_t (****)())(a3 + 304);
  if (!v27) {
    unint64_t v27 = &off_2535C50;
  }
  char v28 = (uint64_t (***)())v27[12];
  if (!v28) {
    char v28 = &off_2536528;
  }
  double v29 = (uint64_t (***)())v28[8];
  if (v29) {
    char v30 = v29;
  }
  else {
    char v30 = &off_2536508;
  }
  BOOL v31 = sub_DB7260((uint64_t)v30);
  uint64_t v32 = sub_377D04(a2);
  *(unsigned char *)(a1 + 128) = v21;
  *(unsigned char *)(a1 + 129) = v26;
  *(unsigned char *)(a1 + 130) = v31;
  if (*(char *)(v32 + 47) < 0)
  {
    sub_4200((unsigned char *)(a1 + 136), *(void **)(v32 + 24), *(void *)(v32 + 32));
  }
  else
  {
    long long v33 = *(_OWORD *)(v32 + 24);
    *(void *)(a1 + 152) = *(void *)(v32 + 40);
    *(_OWORD *)(a1 + 136) = v33;
  }
  *(_DWORD *)(a1 + 160) = sub_DB7270(a3);
  *(unsigned char *)(a1 + 164) = sub_DC0980(a3);
  return a1;
}

void sub_D73710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BC2EEC((void ***)va);
  sub_BC2EEC((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D737A4(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  uint64_t v36 = a7;
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 == v16)
  {
    unint64_t v18 = v38;
  }
  else
  {
    unint64_t v18 = v38;
    do
    {
      if ((unint64_t)v18 >= v39)
      {
        unint64_t v18 = (char *)sub_483F60((uint64_t *)&__p, v17);
      }
      else
      {
        sub_48381C((uint64_t)v18, v17);
        v18 += 376;
      }
      uint64_t v38 = v18;
      v17 += 376;
    }
    while (v17 != v16);
  }
  unint64_t v19 = (uint64_t *)__p;
  if (__p == v18) {
    goto LABEL_11;
  }
  while (*((_DWORD *)v19 + 26))
  {
    v19 += 47;
    if (v19 == (uint64_t *)v18) {
      goto LABEL_11;
    }
  }
  if (v19 == (uint64_t *)v18)
  {
LABEL_11:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    unint64_t v19 = &qword_24F7018;
  }
  sub_48381C(a1, (uint64_t)v19);
  unint64_t v20 = (char *)__p;
  if (__p)
  {
    uint64_t v21 = (uint64_t)v38;
    unint64_t v22 = __p;
    if (v38 != __p)
    {
      do
        uint64_t v21 = sub_402C7C(v21 - 376);
      while ((char *)v21 != v20);
      unint64_t v22 = __p;
    }
    uint64_t v38 = v20;
    operator delete(v22);
  }
  __n128 __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  uint64_t v24 = *a2;
  uint64_t v23 = a2[1];
  if (*a2 == v23)
  {
    unint64_t v25 = v38;
  }
  else
  {
    unint64_t v25 = v38;
    do
    {
      if ((unint64_t)v25 >= v39)
      {
        unint64_t v25 = (char *)sub_483F60((uint64_t *)&__p, v24);
      }
      else
      {
        sub_48381C((uint64_t)v25, v24);
        v25 += 376;
      }
      uint64_t v38 = v25;
      v24 += 376;
    }
    while (v24 != v23);
  }
  char v26 = (uint64_t *)__p;
  if (__p == v25) {
    goto LABEL_28;
  }
  while (*((_DWORD *)v26 + 26) != 1)
  {
    v26 += 47;
    if (v26 == (uint64_t *)v25) {
      goto LABEL_28;
    }
  }
  if (v26 == (uint64_t *)v25)
  {
LABEL_28:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    char v26 = &qword_24F7018;
  }
  sub_48381C(a1 + 376, (uint64_t)v26);
  unint64_t v27 = (char *)__p;
  if (__p)
  {
    uint64_t v28 = (uint64_t)v38;
    double v29 = __p;
    if (v38 != __p)
    {
      do
        uint64_t v28 = sub_402C7C(v28 - 376);
      while ((char *)v28 != v27);
      double v29 = __p;
    }
    uint64_t v38 = v27;
    operator delete(v29);
  }
  sub_4BBDC0(a1 + 752, a3);
  *(_DWORD *)(a1 + 2288) = a4;
  *(void *)(a1 + 2296) = a5;
  *(void *)(a1 + 2304) = v36;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2320) = 0;
  char v30 = *(const void **)a6;
  int64_t v31 = *(void *)(a6 + 8) - *(void *)a6;
  if (v31)
  {
    if (v31 < 0) {
      sub_2E00();
    }
    uint64_t v32 = (char *)operator new(v31);
    *(void *)(a1 + 2312) = v32;
    *(void *)(a1 + 2320) = v32;
    long long v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 2328) = v33;
    memcpy(v32, v30, v31 - 3);
    *(void *)(a1 + 2320) = v33;
  }
  int v34 = *(unsigned __int8 *)(a8 + 64);
  *(unsigned char *)(a1 + 2400) = v34;
  if (v34) {
    sub_CC2660((char *)(a1 + 2336), a8);
  }
  return a1;
}

void sub_D73B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_24F7190);
  sub_401F88((void **)va);
  sub_402C7C(v2);
  _Unwind_Resume(a1);
}

void sub_D73B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_24F7190);
  sub_401F88((void **)va);
  _Unwind_Resume(a1);
}

void sub_D73B64(_Unwind_Exception *a1)
{
  sub_402C7C(v2);
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_D73BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_401F88((void **)va);
  sub_402C7C(v2);
  _Unwind_Resume(a1);
}

void sub_D73C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_401F88((void **)va);
  _Unwind_Resume(a1);
}

void sub_D73C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_401F88((void **)va);
  _Unwind_Resume(a1);
}

void sub_D73C38(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    uint64_t v5 = a1[1];
    uint64_t v6 = 376 * a2;
    char v10 = operator new(376 * a2);
    uint64_t v11 = (uint64_t)v10 + v5 - v3;
    sub_484124(v2, v5, v5, v3, v3, v11, v11);
    unint64_t v8 = (void *)*a1;
    uint64_t v7 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    for (a1[2] = (uint64_t)v10 + v6; (void *)v7 != v8; uint64_t v7 = sub_402C7C(v7 - 376))
      ;
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_D73D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D73D50(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D73F20(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D73F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D73F20(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D74080(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D74094(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D74264(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D74250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D74264(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D743C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D743D8(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D745A8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D74594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D745A8(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D74708(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D7471C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D748EC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D748D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D748EC(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D74A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D74A60(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D74C30(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D74C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D74C30(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D74D90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D74DA4(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D74F74(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D74F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D74F74(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D750D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D750E8(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D752B8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D752A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D752B8(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D75418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D7542C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D755FC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D755E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D755FC(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D7575C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D75770(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D75940(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D7592C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D75940(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D75AA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D75AB4(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D75C84(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D75C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D75C84(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D75DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D75DF8(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D75FC8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D75FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D75FC8(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D76128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D7613C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D7630C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D762F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D7630C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D7646C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D76480(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D76650(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D7663C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D76650(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D767B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D767C4(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D76994(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D76980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D76994(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D76AF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D76B08(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D76CD8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D76CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D76CD8(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D76E38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D76E4C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D7701C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D77008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D7701C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D7717C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D77190(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D77360(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D7734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D77360(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D774C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D774D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  char v11 = *(unsigned char *)(a6 + 4);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)a6;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 28) = v11;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v13 = *(unsigned char **)(a6 + 8);
  char v12 = *(unsigned char **)(a6 + 16);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v15;
    long long v16 = &v15[4 * (v14 >> 2)];
    *(void *)(a1 + 48) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 40) = v16;
  }
  long long v17 = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a6 + 48);
  *(_OWORD *)(a1 + 56) = v17;
  sub_4BC93C(a1 + 88, (int *)(a6 + 64));
  uint64_t v18 = *(void *)(a6 + 160);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a6 + 168);
  *(void *)(a1 + 184) = v18;
  __n128 __p = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  uint64_t v19 = *a2;
  uint64_t v20 = a2[1];
  if (*a2 == v20)
  {
    uint64_t v21 = v35;
  }
  else
  {
    uint64_t v21 = v35;
    do
    {
      while ((unint64_t)v21 >= v36)
      {
        uint64_t v21 = (char *)sub_483F60((uint64_t *)&__p, v19);
        uint64_t v35 = v21;
        v19 += 376;
        if (v19 == v20) {
          goto LABEL_11;
        }
      }
      sub_48381C((uint64_t)v21, v19);
      v21 += 376;
      uint64_t v35 = v21;
      v19 += 376;
    }
    while (v19 != v20);
  }
LABEL_11:
  unint64_t v22 = (uint64_t *)__p;
  if (__p == v21) {
    goto LABEL_14;
  }
  while (*((_DWORD *)v22 + 26))
  {
    v22 += 47;
    if (v22 == (uint64_t *)v21) {
      goto LABEL_14;
    }
  }
  if (v22 == (uint64_t *)v21)
  {
LABEL_14:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    unint64_t v22 = &qword_24F7018;
  }
  sub_48381C(a1 + 200, (uint64_t)v22);
  uint64_t v23 = (char *)__p;
  if (__p)
  {
    uint64_t v24 = (uint64_t)v35;
    unint64_t v25 = __p;
    if (v35 != __p)
    {
      do
        uint64_t v24 = sub_402C7C(v24 - 376);
      while ((char *)v24 != v23);
      unint64_t v25 = __p;
    }
    uint64_t v35 = v23;
    operator delete(v25);
  }
  __n128 __p = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  if (*a2 == v27)
  {
    uint64_t v28 = v35;
  }
  else
  {
    uint64_t v28 = v35;
    do
    {
      if ((unint64_t)v28 >= v36)
      {
        uint64_t v28 = (char *)sub_483F60((uint64_t *)&__p, v26);
      }
      else
      {
        sub_48381C((uint64_t)v28, v26);
        v28 += 376;
      }
      uint64_t v35 = v28;
      v26 += 376;
    }
    while (v26 != v27);
  }
  double v29 = (uint64_t *)__p;
  if (__p == v28) {
    goto LABEL_31;
  }
  while (*((_DWORD *)v29 + 26) != 1)
  {
    v29 += 47;
    if (v29 == (uint64_t *)v28) {
      goto LABEL_31;
    }
  }
  if (v29 == (uint64_t *)v28)
  {
LABEL_31:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    double v29 = &qword_24F7018;
  }
  sub_48381C(a1 + 576, (uint64_t)v29);
  char v30 = (char *)__p;
  if (__p)
  {
    uint64_t v31 = (uint64_t)v35;
    uint64_t v32 = __p;
    if (v35 != __p)
    {
      do
        uint64_t v31 = sub_402C7C(v31 - 376);
      while ((char *)v31 != v30);
      uint64_t v32 = __p;
    }
    uint64_t v35 = v30;
    operator delete(v32);
  }
  *(_OWORD *)(a1 + 952) = *a7;
  return a1;
}

void sub_D77850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_24F7190);
  sub_401F88((void **)va);
  sub_402C7C(v3);
  sub_CF1EE4(v2);
  _Unwind_Resume(a1);
}

void sub_D77908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_401F88((void **)va);
  sub_CF1EE4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_D77928(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v2 = *(void **)(a1 + 40);
      if (v2)
      {
        *(void *)(a1 + 48) = v2;
        operator delete(v2);
      }
      if (*(char *)(a1 + 39) < 0) {
        operator delete(*(void **)(a1 + 16));
      }
      *(unsigned char *)(a1 + 72) = 0;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return a1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void **)(a1 + 24);
  if (v5 != v4)
  {
    do
    {
      if (*(char *)(v5 - 1) < 0) {
        operator delete(*(void **)(v5 - 24));
      }
      v5 -= 32;
    }
    while (v5 != v4);
    unint64_t v6 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v4;
  operator delete(v6);
  return a1;
}

uint64_t sub_D779E4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 568);
    *(void *)(a1 + 568) = 0;
    if (v2)
    {
      sub_162D64C(v2);
      operator delete();
    }
    sub_162D64C(a1 + 8);
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return a1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void **)(a1 + 24);
  if (v5 != v4)
  {
    do
    {
      if (*(char *)(v5 - 1) < 0) {
        operator delete(*(void **)(v5 - 24));
      }
      v5 -= 32;
    }
    while (v5 != v4);
    unint64_t v6 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v4;
  operator delete(v6);
  return a1;
}

double sub_D77AA4()
{
  byte_25E6C7F = 1;
  word_25E6C68 = 65;
  byte_25E6C97 = 1;
  word_25E6C80 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6D28 = 0u;
  *(_OWORD *)&qword_25E6D38 = 0u;
  dword_25E6D48 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6D28, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6D28, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6D28, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6D28, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6CAF = 8;
  strcpy((char *)&qword_25E6C98, "any_mode");
  byte_25E6CC7 = 7;
  strcpy((char *)&dword_25E6CB0, "cycling");
  byte_25E6CDF = 7;
  strcpy((char *)&dword_25E6CC8, "driving");
  byte_25E6CF7 = 7;
  strcpy((char *)&dword_25E6CE0, "walking");
  qword_25E6D00 = 0;
  qword_25E6D08 = 0;
  qword_25E6CF8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6CF8 = (uint64_t)v0;
  qword_25E6D00 = (uint64_t)(v0 + 9);
  qword_25E6D08 = (uint64_t)(v0 + 9);
  qword_25E6D10 = 0;
  qword_25E6D18 = 0;
  unk_25E6D20 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6D18 = (uint64_t)(v1 + 9);
  unk_25E6D20 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6D10 = (uint64_t)v1;
  return result;
}

void sub_D77D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6D38) {
    sub_20B050C((void **)qword_25E6D38);
  }
  uint64_t v37 = (void *)xmmword_25E6D28;
  *(void *)&xmmword_25E6D28 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D77E0C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)sub_37D0C0((uint64_t)a2);
  v50[0] = a4;
  v50[1] = a3;
  char v71 = 0;
  char v73 = 0;
  char v74 = 0;
  char v75 = 0;
  char v76 = 0;
  memset(__p, 0, sizeof(__p));
  std::string v45 = (void *)1851878480;
  char v46 = 4;
  std::string v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  sub_D03E24((char *)&v47, 0, 0, 0);
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "Plan.Started");
  sub_710A8(28, (uint64_t)__p, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_725D0((uint64_t)v44);
  if ((sub_DAC700((uint64_t)a1) & 1) == 0)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B8E90;
    strcpy((char *)__p[0], "place request is not consistent");
    *(void *)int v51 = 1;
    *(void *)&v51[8] = &off_2439090;
    sub_D78D30(v50, (uint64_t)__p, (unsigned int *)v51, (uint64_t)v69);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    char v12 = __p[0];
    goto LABEL_82;
  }
  __p[0] = a1;
  LODWORD(__p[1]) = 5;
  __p[2] = a2;
  LOBYTE(v65) = sub_DC5CDC(__p);
  char v67 = 0;
  sub_C9CA80((uint64_t)__p, (uint64_t)v38);
  if (!v38[0])
  {
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9240;
    strcpy((char *)__p[0], "input point transformer module failed");
    sub_D78D30(v50, (uint64_t)__p, (unsigned int *)&v39, (uint64_t)v69);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (!v38[0]) {
      goto LABEL_74;
    }
LABEL_18:
    char v13 = v39;
    if (!v39) {
      goto LABEL_83;
    }
    uint64_t v14 = v40;
    char v12 = v39;
    if ((void *)v40 != v39)
    {
      do
      {
        v14 -= 376;
        sub_402C7C(v14);
      }
      while ((void *)v14 != v13);
      char v12 = v39;
    }
    uint64_t v40 = (uint64_t)v13;
    goto LABEL_82;
  }
  v69[0] = v42[0];
  v69[1] = v42[1];
  v69[2] = v42[2];
  if (v71)
  {
    LODWORD(v70) = v43;
  }
  else
  {
    uint64_t v70 = v43;
    char v71 = 1;
  }
  sub_CF2E84((uint64_t)v42, (uint64_t)__p);
  sub_71740(28, (uint64_t)__p, v8);
  size_t v9 = (void **)v65;
  if (v65)
  {
    char v10 = v66;
    int v11 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v10 - 25) < 0) {
          operator delete(*(v10 - 6));
        }
        v10 -= 6;
      }
      while (v10 != v9);
      int v11 = v65;
    }
    uint64_t v66 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    int v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v15 = (uint64_t)v39;
    uint64_t v16 = v40;
    if (v39 == (void *)v40) {
      goto LABEL_34;
    }
  }
  else
  {
    int v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v15 = (uint64_t)v39;
    uint64_t v16 = v40;
    if (v39 == (void *)v40) {
      goto LABEL_34;
    }
  }
  unint64_t v17 = 0;
  do
  {
    if (v17 >= v36)
    {
      unint64_t v17 = sub_483F60((uint64_t *)&v34, v15);
    }
    else
    {
      sub_48381C(v17, v15);
      v17 += 376;
    }
    uint64_t v35 = (void *)v17;
    v15 += 376;
  }
  while (v15 != v16);
LABEL_34:
  sub_D78FC8((uint64_t)v51, (uint64_t)a1, (uint64_t *)&v34);
  sub_CAA7F0((uint64_t)v51, (uint64_t)a2, 28, (uint64_t)__p);
  uint64_t v18 = v62;
  if (v62)
  {
    uint64_t v19 = (uint64_t)v63;
    uint64_t v20 = v62;
    if (v63 != v62)
    {
      do
        uint64_t v19 = sub_402C7C(v19 - 376);
      while ((void *)v19 != v18);
      uint64_t v20 = v62;
    }
    long long v63 = v18;
    operator delete(v20);
  }
  if (v61)
  {
    if (v59)
    {
      uint64_t v60 = v59;
      operator delete(v59);
    }
    if (v57)
    {
      char v58 = v57;
      operator delete(v57);
    }
    if (v55)
    {
      int v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      int v54 = v53;
      operator delete(v53);
    }
    char v61 = 0;
  }
  uint64_t v37 = (void **)&v51[8];
  sub_BC2EEC(&v37);
  uint64_t v21 = v34;
  if (v34)
  {
    uint64_t v22 = (uint64_t)v35;
    uint64_t v23 = v34;
    if (v35 != v34)
    {
      do
        uint64_t v22 = sub_402C7C(v22 - 376);
      while ((void *)v22 != v21);
      uint64_t v23 = v34;
    }
    uint64_t v35 = v21;
    operator delete(v23);
  }
  if (LOBYTE(__p[0]))
  {
    if (!v73) {
      char v73 = 1;
    }
    uint64_t v72 = v68;
    *(_OWORD *)uint64_t v52 = 0u;
    memset(v51, 0, sizeof(v51));
    std::string::assign((std::string *)v51, "PlaceRequestParserModule");
    LOBYTE(v34) = 1;
    uint64_t v24 = *(void *)v52;
    if (*(void *)v52 >= *(void *)&v52[2])
    {
      uint64_t v25 = sub_C55C14((uint64_t *)&v51[24], "Runtime", (char *)&v34, (double *)&v68);
    }
    else
    {
      sub_C55DE4((int)&v52[2], *(uint64_t *)v52, "Runtime", (char *)&v34, (double *)&v68);
      uint64_t v25 = v24 + 48;
    }
    *(void *)uint64_t v52 = v25;
    sub_71740(28, (uint64_t)v51, v8);
    uint64_t v26 = *(void *)&v51[24];
    if (*(void *)&v51[24])
    {
      uint64_t v27 = *(void *)v52;
      uint64_t v28 = *(void **)&v51[24];
      if (*(void *)v52 != *(void *)&v51[24])
      {
        do
        {
          if (*(char *)(v27 - 25) < 0) {
            operator delete(*(void **)(v27 - 48));
          }
          v27 -= 48;
        }
        while (v27 != v26);
        uint64_t v28 = *(void **)&v51[24];
      }
      *(void *)uint64_t v52 = v26;
      operator delete(v28);
    }
    if ((v51[23] & 0x80000000) != 0) {
      operator delete(*(void **)v51);
    }
    sub_CD8BDC();
  }
  *(void *)int v51 = operator new(0x28uLL);
  *(_OWORD *)&v51[8] = xmmword_20B9280;
  strcpy(*(char **)v51, "place request parser module failed");
  sub_D78D30(v50, (uint64_t)v51, (unsigned int *)&__p[1], (uint64_t)v69);
  if ((v51[23] & 0x80000000) != 0) {
    operator delete(*(void **)v51);
  }
  sub_CB1C20((uint64_t)__p);
  if (v38[0]) {
    goto LABEL_18;
  }
LABEL_74:
  double v29 = (void **)v41;
  if (!v41) {
    goto LABEL_83;
  }
  char v30 = *(void ***)&v42[0];
  char v12 = v41;
  if (*(void **)&v42[0] != v41)
  {
    do
    {
      if (*((char *)v30 - 1) < 0) {
        operator delete(*(v30 - 3));
      }
      v30 -= 4;
    }
    while (v30 != v29);
    char v12 = v41;
  }
  *(void *)&v42[0] = v29;
LABEL_82:
  operator delete(v12);
LABEL_83:
  uint64_t v31 = (void **)v47;
  if (v47)
  {
    uint64_t v32 = v48;
    long long v33 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v32 - 25) < 0) {
          operator delete(*(v32 - 6));
        }
        v32 -= 6;
      }
      while (v32 != v31);
      long long v33 = v47;
    }
    std::string v48 = v31;
    operator delete(v33);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
}

void sub_D78AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  sub_D53540((uint64_t)&a10);
  sub_D535D8((uint64_t)&STACK[0x840]);
  sub_D790B8((uint64_t)&a39);
  sub_CB1C20((uint64_t)&STACK[0x878]);
  sub_C9D440((uint64_t)&a49);
  sub_A3A4((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t sub_D78D30(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v18);
    uint64_t v8 = sub_188FC78(v18, (uint64_t)"[transit nearby payment method lookup] ", 39);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_188FC78(v8, v10, v11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_182E158(v18, 0, 0);
  int v12 = sub_E12498(*a3);
  v19 |= 0x20u;
  int v22 = v12;
  uint64_t v13 = *(void *)(*a1 + 24);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a4);
  }
  uint64_t v14 = *(void *)(a1[1] + 24);
  if (!v14) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v18);
  return sub_182E7B8(v18);
}

void sub_D78F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_D78FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_182E7B8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_D78FC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  sub_CF216C(a1 + 224, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_D7903C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(unsigned char *)(v2 + 216)) {
    sub_20B0550((void *)v2, (unsigned char *)(v2 + 216));
  }
  sub_BC2EEC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D79068(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D790B8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      char v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          int v5 = *(void **)(v3 - 32);
          if (v5)
          {
            *(void *)(v3 - 24) = v5;
            operator delete(v5);
          }
          v3 -= 40;
        }
        while (v3 != v2);
        char v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_18:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      char v4 = *(void **)(a1 + 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 32;
        }
        while (v7 != v6);
        char v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v6;
      goto LABEL_18;
    }
  }
  return a1;
}

double sub_D7917C()
{
  byte_25E6D67 = 1;
  word_25E6D50 = 65;
  byte_25E6D7F = 1;
  word_25E6D68 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6E10 = 0u;
  *(_OWORD *)&qword_25E6E20 = 0u;
  dword_25E6E30 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6E10, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6E10, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6E10, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6E10, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6D97 = 8;
  strcpy((char *)&qword_25E6D80, "any_mode");
  byte_25E6DAF = 7;
  strcpy((char *)&dword_25E6D98, "cycling");
  byte_25E6DC7 = 7;
  strcpy((char *)&dword_25E6DB0, "driving");
  byte_25E6DDF = 7;
  strcpy((char *)&dword_25E6DC8, "walking");
  qword_25E6DE8 = 0;
  qword_25E6DF0 = 0;
  qword_25E6DE0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6DE0 = (uint64_t)v0;
  qword_25E6DE8 = (uint64_t)(v0 + 9);
  qword_25E6DF0 = (uint64_t)(v0 + 9);
  qword_25E6DF8 = 0;
  qword_25E6E00 = 0;
  unk_25E6E08 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6E00 = (uint64_t)(v1 + 9);
  unk_25E6E08 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6DF8 = (uint64_t)v1;
  return result;
}

void sub_D79444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6E20) {
    sub_20B05B8((void **)qword_25E6E20);
  }
  uint64_t v37 = (void *)xmmword_25E6E10;
  *(void *)&xmmword_25E6E10 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D794E4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = (void *)v5;
  char v7 = (void *)v0;
  uint64_t v8 = *(void *)sub_37D0C0(v5);
  v35[0] = v2;
  v35[1] = v4;
  char v43 = 0;
  char v44 = 0;
  char v45 = 0;
  char v46 = 0;
  char v47 = 0;
  char v48 = 0;
  memset(__p, 0, sizeof(__p));
  char v30 = (void *)1851878480;
  char v31 = 4;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  long long v33 = 0;
  sub_D03E24((char *)&v32, 0, 0, 0);
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "Plan.Started");
  sub_710A8(20, (uint64_t)__p, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_725D0((uint64_t)v29);
  if (sub_DAC700((uint64_t)v7))
  {
    __p[0] = v7;
    LODWORD(__p[1]) = 5;
    __p[2] = v6;
    LOBYTE(v38) = sub_DC5CDC(__p);
    char v40 = 0;
    sub_C9CA80((uint64_t)__p, (uint64_t)v23);
    if (v23[0])
    {
      v41[0] = v27[0];
      v41[1] = v27[1];
      v41[2] = v27[2];
      if (v43)
      {
        LODWORD(v42) = v28;
      }
      else
      {
        uint64_t v42 = v28;
        char v43 = 1;
      }
      sub_CF2E84((uint64_t)v27, (uint64_t)__p);
      sub_71740(20, (uint64_t)__p, v8);
      int v9 = (void **)v38;
      if (v38)
      {
        char v10 = v39;
        int v11 = v38;
        if (v39 != v38)
        {
          do
          {
            if (*((char *)v10 - 25) < 0) {
              operator delete(*(v10 - 6));
            }
            v10 -= 6;
          }
          while (v10 != v9);
          int v11 = v38;
        }
        unint64_t v39 = v9;
        operator delete(v11);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      memset(&v36, 0, sizeof(v36));
      uint64_t v15 = (uint64_t)v24;
      uint64_t v16 = v25;
      if (v24 != (void *)v25)
      {
        unint64_t v17 = 0;
        do
        {
          while (v17 < v36.__r_.__value_.__r.__words[2])
          {
            sub_48381C(v17, v15);
            v17 += 376;
            v36.__r_.__value_.__l.__size_ = v17;
            v15 += 376;
            if (v15 == v16) {
              goto LABEL_32;
            }
          }
          unint64_t v17 = sub_483F60((uint64_t *)&v36, v15);
          v36.__r_.__value_.__l.__size_ = v17;
          v15 += 376;
        }
        while (v15 != v16);
      }
LABEL_32:
      sub_CD7F40((uint64_t)__p, (uint64_t)v7, (uint64_t *)&v36);
      sub_CD69E4((uint64_t)__p, v6);
    }
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9240;
    strcpy((char *)__p[0], "input point transformer module failed");
    sub_D7A5D0(v35, (uint64_t)__p, (unsigned int *)&v24, (uint64_t)v41);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if (v23[0]) {
        goto LABEL_17;
      }
    }
    else if (v23[0])
    {
LABEL_17:
      char v13 = v24;
      if (!v24) {
        goto LABEL_43;
      }
      uint64_t v14 = v25;
      int v12 = v24;
      if ((void *)v25 != v24)
      {
        do
        {
          v14 -= 376;
          sub_402C7C(v14);
        }
        while ((void *)v14 != v13);
        int v12 = v24;
      }
      uint64_t v25 = (uint64_t)v13;
      goto LABEL_42;
    }
    uint64_t v18 = (void **)v26;
    if (!v26) {
      goto LABEL_43;
    }
    int v19 = *(void ***)&v27[0];
    int v12 = v26;
    if (*(void **)&v27[0] != v26)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 4;
      }
      while (v19 != v18);
      int v12 = v26;
    }
    *(void *)&v27[0] = v18;
  }
  else
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B8E90;
    strcpy((char *)__p[0], "place request is not consistent");
    v36.__r_.__value_.__r.__words[0] = 1;
    v36.__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
    sub_D7A5D0(v35, (uint64_t)__p, (unsigned int *)&v36, (uint64_t)v41);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    int v12 = __p[0];
  }
LABEL_42:
  operator delete(v12);
LABEL_43:
  uint64_t v20 = (void **)v32;
  if (v32)
  {
    char v21 = v33;
    int v22 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v21 - 25) < 0) {
          operator delete(*(v21 - 6));
        }
        v21 -= 6;
      }
      while (v21 != v20);
      int v22 = v32;
    }
    long long v33 = v20;
    operator delete(v22);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
}

void sub_D7A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  sub_D53540((uint64_t)&a10);
  sub_D535D8((uint64_t)&STACK[0xA30]);
  sub_D53748((uint64_t)&a39);
  sub_CB1C20((uint64_t)&STACK[0xA68]);
  sub_CD70A8((uint64_t)&STACK[0x10C0]);
  sub_C9D440((uint64_t)&STACK[0x330]);
  sub_A3A4((uint64_t)&STACK[0x3A8]);
  _Unwind_Resume(a1);
}

uint64_t sub_D7A5D0(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v18);
    uint64_t v8 = sub_188FC78(v18, (uint64_t)"[transit nearby schedule lookup] ", 33);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_188FC78(v8, v10, v11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_182E158(v18, 0, 0);
  int v12 = sub_E12498(*a3);
  v19 |= 0x20u;
  int v22 = v12;
  uint64_t v13 = *(void *)(*a1 + 24);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a4);
  }
  uint64_t v14 = *(void *)(a1[1] + 24);
  if (!v14) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v18);
  return sub_182E7B8(v18);
}

void sub_D7A808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_D7A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_182E7B8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_D7A868(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D7A8B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 152);
      uint64_t v5 = *(void **)(a1 + 144);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(void **)(v4 - 32);
          if (v6)
          {
            *(void *)(v4 - 24) = v6;
            operator delete(v6);
          }
          v4 -= 104;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a1 + 144);
      }
      *(void *)(a1 + 152) = v3;
      operator delete(v5);
    }
    char v7 = *(void **)(a1 + 104);
    if (v7)
    {
      *(void *)(a1 + 112) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 192) = 0;
  }
  if (*(void *)a1)
  {
    sub_CD86D4((uint64_t *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_D7A970(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7 != *a3)
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a3) >> 3);
    if (v8 >= 0x1642C8590B21643) {
      sub_2E00();
    }
    int v9 = (char *)operator new(v7 - v6);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = &v9[184 * v8];
    *(void *)(a1 + 16) = sub_D7AA9C(a1 + 24, v6, v7, (uint64_t)v9);
  }
  int v10 = *(unsigned __int8 *)(a4 + 184);
  *(unsigned char *)(a1 + 216) = v10;
  if (v10) {
    sub_8EB7C4((void *)(a1 + 32), a4);
  }
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_D7AA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 16) = v10;
  sub_BC2EEC(&a9);
  _Unwind_Resume(a1);
}

void sub_D7AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_D7AA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_8EB7C4((void *)(a4 + v7), a2 + v7);
      v7 += 184;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_D7AAFC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE620(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_D7AB18()
{
  byte_25E6E4F = 1;
  word_25E6E38 = 65;
  byte_25E6E67 = 1;
  word_25E6E50 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6EF8 = 0u;
  *(_OWORD *)&qword_25E6F08 = 0u;
  dword_25E6F18 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6EF8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6EF8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6EF8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6EF8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6E7F = 8;
  strcpy((char *)&qword_25E6E68, "any_mode");
  byte_25E6E97 = 7;
  strcpy((char *)&dword_25E6E80, "cycling");
  byte_25E6EAF = 7;
  strcpy((char *)&dword_25E6E98, "driving");
  byte_25E6EC7 = 7;
  strcpy((char *)&dword_25E6EB0, "walking");
  qword_25E6ED0 = 0;
  qword_25E6ED8 = 0;
  qword_25E6EC8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6EC8 = (uint64_t)v0;
  qword_25E6ED0 = (uint64_t)(v0 + 9);
  qword_25E6ED8 = (uint64_t)(v0 + 9);
  qword_25E6EE0 = 0;
  qword_25E6EE8 = 0;
  unk_25E6EF0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6EE8 = (uint64_t)(v1 + 9);
  unk_25E6EF0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6EE0 = (uint64_t)v1;
  return result;
}

void sub_D7ADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6F08) {
    sub_20B05FC((void **)qword_25E6F08);
  }
  uint64_t v37 = (void *)xmmword_25E6EF8;
  *(void *)&xmmword_25E6EF8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D7AE80()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v6 = *(void *)sub_37D0C0(v3);
  v52[0] = v4;
  v52[1] = v5;
  v52[2] = v2;
  memset(__p, 0, 24);
  char v47 = (void *)1851878480;
  char v48 = 4;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  __n128 v50 = 0;
  sub_D03E24((char *)&v49, 0, 0, 0);
  __p[23] = 12;
  strcpy(__p, "Plan.Started");
  sub_710A8(17, (uint64_t)__p, v6);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_725D0((uint64_t)v46);
  sub_DE5630(v5, (__n128 *)__p);
  long long v45 = *(_OWORD *)__p;
  uint64_t v7 = *(void *)&__p[16];
  if (*(void *)&__p[16])
  {
    uint64_t v8 = *(void *)&__p[24];
    uint64_t v9 = *(void **)&__p[16];
    if (*(void *)&__p[24] != *(void *)&__p[16])
    {
      do
      {
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*(void **)(v8 - 24));
        }
        v8 -= 32;
      }
      while (v8 != v7);
      uint64_t v9 = *(void **)&__p[16];
    }
    *(void *)&__p[24] = v7;
    operator delete(v9);
  }
  if (*((void (****)(std::error_category *__hidden))&v45 + 1) != &off_2439090 || v45 != 0)
  {
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8870;
    strcpy(*(char **)__p, "request validation failed");
    sub_D7BDE0((uint64_t)v52, (uint64_t)__p, (unsigned int *)&v45);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_69;
    }
    int v11 = *(void **)__p;
    goto LABEL_68;
  }
  uint64_t v12 = sub_37B3A8(v4);
  uint64_t v13 = *(void *)v12;
  int v44 = *(_DWORD *)(v12 + 8);
  uint64_t v43 = v13;
  *(void *)__n128 __p = v5;
  *(_DWORD *)&__p[8] = 4;
  *(void *)&__p[16] = v4;
  __p[24] = sub_DC5CDC(__p);
  BYTE8(v54) = 0;
  sub_C9CA80((uint64_t)__p, (uint64_t)v38);
  if (!v38[0])
  {
    *(void *)__n128 __p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9240;
    strcpy(*(char **)__p, "input point transformer module failed");
    sub_D7BDE0((uint64_t)v52, (uint64_t)__p, (unsigned int *)&v39);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_54;
    }
    char v17 = *(void **)__p;
    goto LABEL_53;
  }
  sub_CF2E84((uint64_t)&v42, (uint64_t)__p);
  sub_71740(17, (uint64_t)__p, v6);
  uint64_t v14 = *(void *)&__p[24];
  if (*(void *)&__p[24])
  {
    uint64_t v15 = v54;
    uint64_t v16 = *(void **)&__p[24];
    if ((void)v54 != *(void *)&__p[24])
    {
      do
      {
        if (*(char *)(v15 - 25) < 0) {
          operator delete(*(void **)(v15 - 48));
        }
        v15 -= 48;
      }
      while (v15 != v14);
      uint64_t v16 = *(void **)&__p[24];
    }
    *(void *)&long long v54 = v14;
    operator delete(v16);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_CD0004(v5, v4, 17, (uint64_t)v33);
  if (v33[0])
  {
    long long v54 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::assign((std::string *)__p, "TransitJourneyParserModule");
    v32[0] = 1;
    uint64_t v18 = v54;
    if ((unint64_t)v54 >= *((void *)&v54 + 1))
    {
      uint64_t v19 = sub_C55C14((uint64_t *)&__p[24], "Runtime", v32, &v37);
    }
    else
    {
      sub_C55DE4((int)&v54 + 8, v54, "Runtime", v32, &v37);
      uint64_t v19 = v18 + 48;
    }
    *(void *)&long long v54 = v19;
    sub_71740(17, (uint64_t)__p, v6);
    uint64_t v20 = *(void *)&__p[24];
    if (*(void *)&__p[24])
    {
      uint64_t v21 = v54;
      int v22 = *(void **)&__p[24];
      if ((void)v54 != *(void *)&__p[24])
      {
        do
        {
          if (*(char *)(v21 - 25) < 0) {
            operator delete(*(void **)(v21 - 48));
          }
          v21 -= 48;
        }
        while (v21 != v20);
        int v22 = *(void **)&__p[24];
      }
      *(void *)&long long v54 = v20;
      operator delete(v22);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_D7C04C((uint64_t)__p, v5, (uint64_t *)&v34, (uint64_t)&v43);
    sub_CD6328();
  }
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "journey parser module failed");
  sub_D7BDE0((uint64_t)v52, (uint64_t)__p, (unsigned int *)&v34);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v33[0])
  {
    uint64_t v23 = v34;
    if (v34)
    {
      uint64_t v24 = v35;
      char v17 = v34;
      if (v35 != v34)
      {
        do
        {
          v24 -= 22;
          sub_9F58F0((uint64_t)&v36, v24);
        }
        while (v24 != v23);
        char v17 = v34;
      }
      uint64_t v35 = v23;
LABEL_53:
      operator delete(v17);
    }
  }
LABEL_54:
  if (v38[0])
  {
    uint64_t v25 = v39;
    if (!v39) {
      goto LABEL_69;
    }
    uint64_t v26 = v40;
    int v11 = v39;
    if ((void *)v40 != v39)
    {
      do
      {
        v26 -= 376;
        sub_402C7C(v26);
      }
      while ((void *)v26 != v25);
      int v11 = v39;
    }
    uint64_t v40 = (uint64_t)v25;
  }
  else
  {
    uint64_t v27 = (void **)v41;
    if (!v41) {
      goto LABEL_69;
    }
    uint64_t v28 = v42;
    int v11 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 4;
      }
      while (v28 != v27);
      int v11 = v41;
    }
    uint64_t v42 = v27;
  }
LABEL_68:
  operator delete(v11);
LABEL_69:
  double v29 = (void **)v49;
  if (v49)
  {
    char v30 = v50;
    char v31 = v49;
    if (v50 != v49)
    {
      do
      {
        if (*((char *)v30 - 25) < 0) {
          operator delete(*(v30 - 6));
        }
        v30 -= 6;
      }
      while (v30 != v29);
      char v31 = v49;
    }
    __n128 v50 = v29;
    operator delete(v31);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
}

void sub_D7BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_D7C8BC((uint64_t)&STACK[0x850]);
  sub_D7C954((uint64_t)&a22);
  sub_D7CA08((uint64_t)&a36);
  sub_D7CAC4((uint64_t)&a53);
  sub_C9D440((uint64_t)&a58);
  sub_A3A4((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t sub_D7BDE0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v15);
    uint64_t v6 = sub_188FC78(v15, (uint64_t)"[transit route update] ", 23);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    sub_188FC78(v6, v8, v9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_1353BF0(v15, 0, 0);
  int v10 = sub_E12498(*a3);
  v16 |= 0x20u;
  int v19 = v10;
  sub_E6D9B4(*(void **)a1, *(void *)(*(void *)(a1 + 8) + 120) & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v15);
  uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 24);
  if (!v11) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v15);
  return sub_1354024(v15);
}

void sub_D7BFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_D7C038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1354024(va);
  _Unwind_Resume(a1);
}

uint64_t sub_D7C04C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_9F7470(a1, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 4));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 4);
  *(unsigned char *)(a1 + 28) = sub_DBA198(a2);
  *(_DWORD *)(a1 + 32) = sub_DBA1C8(a2);
  *(unsigned char *)(a1 + 36) = sub_DC09CC(a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_D7C0E0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B0640((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D7C0FC(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*a1;
  if (*a1)
  {
    uint64_t v6 = (void *)a1[1];
    int v7 = (void *)*a1;
    if (v6 != v5)
    {
      do
      {
        v6 -= 22;
        sub_9F58F0((uint64_t)(a1 + 2), v6);
      }
      while (v6 != v5);
      int v7 = (void *)*a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_D7C1B0(uint64_t a1)
{
  sub_402C7C(a1 + 1952);
  sub_402C7C(a1 + 1576);
  sub_4BCED0(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 16) = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 8);
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t sub_D7C258@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitGuidanceUpdaterModule");
  char v16 = 1;
  unint64_t v4 = *(void *)(a2 + 40);
  double v15 = round(*a1);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_D0729C((uint64_t *)(a2 + 24), "Runtime", &v16, &v15);
  }
  else
  {
    sub_D0746C(a2 + 40, *(void *)(a2 + 32), "Runtime", &v16, &v15);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v16 = 1;
  double v15 = round(a1[1]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_D73D50((uint64_t *)(a2 + 24), "Runtime.RouteBuilder", &v16, &v15);
  }
  else
  {
    sub_D73F20(a2 + 40, v6, "Runtime.RouteBuilder", &v16, &v15);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v16 = 1;
  double v15 = round(a1[2]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_D74094((uint64_t *)(a2 + 24), "Runtime.RouteBuilder.FeatureDataBuilder", &v16, &v15);
  }
  else
  {
    sub_D74264(a2 + 40, v7, "Runtime.RouteBuilder.FeatureDataBuilder", &v16, &v15);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v16 = 1;
  double v15 = round(a1[3]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_D74A60((uint64_t *)(a2 + 24), "Runtime.TimeDisplayTypeAnnotation", &v16, &v15);
  }
  else
  {
    sub_D74C30(a2 + 40, v8, "Runtime.TimeDisplayTypeAnnotation", &v16, &v15);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v16 = 1;
  double v15 = round(a1[4]);
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.BoardingInfoAnnotation", &v16, &v15);
  }
  else
  {
    sub_D74F74(a2 + 40, v9, "Runtime.BoardingInfoAnnotation", &v16, &v15);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v16 = 1;
  double v15 = round(a1[5]);
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_D7542C((uint64_t *)(a2 + 24), "Runtime.VehiclePositionInfoAnnotation", &v16, &v15);
  }
  else
  {
    sub_D755FC(a2 + 40, v10, "Runtime.VehiclePositionInfoAnnotation", &v16, &v15);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v16 = 1;
  double v15 = round(a1[6]);
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.ScheduleInfoAnnotation", &v16, &v15);
  }
  else
  {
    sub_D74F74(a2 + 40, v11, "Runtime.ScheduleInfoAnnotation", &v16, &v15);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  char v16 = 1;
  double v15 = round(a1[7]);
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_D7613C((uint64_t *)(a2 + 24), "Runtime.RouteHandleAnnotation", &v16, &v15);
  }
  else
  {
    sub_D7630C(a2 + 40, v12, "Runtime.RouteHandleAnnotation", &v16, &v15);
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  char v16 = 1;
  double v15 = round(a1[8]);
  if (v13 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D74DA4((uint64_t *)(a2 + 24), "Runtime.GuidanceUpdatesBuilder", &v16, &v15);
  }
  else
  {
    sub_D74F74(a2 + 40, v13, "Runtime.GuidanceUpdatesBuilder", &v16, &v15);
    uint64_t result = v13 + 48;
    *(void *)(a2 + 32) = v13 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D7C660(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D7C674(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D7C74C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D7C760@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "TransitRouteUpdateResponseBuilderModule");
  char v7 = 1;
  double v6 = round(*a1);
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D0729C((uint64_t *)(a2 + 24), "Runtime", &v7, &v6);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_D0746C(a2 + 40, *(void *)(a2 + 32), "Runtime", &v7, &v6);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D7C82C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D7C840(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D7C858(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D7C86C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D7C8BC(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_1354024(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    unint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_D7C954(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 1064;
          sub_9803D0(v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D7CA08(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 23;
          sub_A00E84(a1 + 24, v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D7CAC4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 22;
          sub_9F58F0(a1 + 24, v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_D7CB38(uint64_t a1, uint64_t a2, long long **a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  sub_D7CEC8((char **)(a1 + 8), a3);
  *(void *)(a1 + 32) = a6;
  sub_CB0CBC(a1 + 40, a5);
  __n128 __p = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a4[1] - *a4) >> 3));
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  if (*a4 == v11)
  {
    unint64_t v12 = v26;
  }
  else
  {
    unint64_t v12 = v26;
    do
    {
      if ((unint64_t)v12 >= v27)
      {
        unint64_t v12 = (char *)sub_483F60((uint64_t *)&__p, v10);
      }
      else
      {
        sub_48381C((uint64_t)v12, v10);
        v12 += 376;
      }
      uint64_t v26 = v12;
      v10 += 376;
    }
    while (v10 != v11);
  }
  unint64_t v13 = (uint64_t *)__p;
  if (__p == v12) {
    goto LABEL_11;
  }
  while (*((_DWORD *)v13 + 26))
  {
    v13 += 47;
    if (v13 == (uint64_t *)v12) {
      goto LABEL_11;
    }
  }
  if (v13 == (uint64_t *)v12)
  {
LABEL_11:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    unint64_t v13 = &qword_24F7018;
  }
  sub_48381C(a1 + 1576, (uint64_t)v13);
  char v14 = (char *)__p;
  if (__p)
  {
    uint64_t v15 = (uint64_t)v26;
    char v16 = __p;
    if (v26 != __p)
    {
      do
        uint64_t v15 = sub_402C7C(v15 - 376);
      while ((char *)v15 != v14);
      char v16 = __p;
    }
    uint64_t v26 = v14;
    operator delete(v16);
  }
  __n128 __p = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  sub_D73C38((uint64_t *)&__p, 0x51B3BEA3677D46CFLL * ((a4[1] - *a4) >> 3));
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  if (*a4 == v18)
  {
    int v19 = v26;
  }
  else
  {
    int v19 = v26;
    do
    {
      if ((unint64_t)v19 >= v27)
      {
        int v19 = (char *)sub_483F60((uint64_t *)&__p, v17);
      }
      else
      {
        sub_48381C((uint64_t)v19, v17);
        v19 += 376;
      }
      uint64_t v26 = v19;
      v17 += 376;
    }
    while (v17 != v18);
  }
  uint64_t v20 = (uint64_t *)__p;
  if (__p == v19) {
    goto LABEL_28;
  }
  while (*((_DWORD *)v20 + 26) != 1)
  {
    v20 += 47;
    if (v20 == (uint64_t *)v19) {
      goto LABEL_28;
    }
  }
  if (v20 == (uint64_t *)v19)
  {
LABEL_28:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v20 = &qword_24F7018;
  }
  sub_48381C(a1 + 1952, (uint64_t)v20);
  uint64_t v21 = (char *)__p;
  if (__p)
  {
    uint64_t v22 = (uint64_t)v26;
    uint64_t v23 = __p;
    if (v26 != __p)
    {
      do
        uint64_t v22 = sub_402C7C(v22 - 376);
      while ((char *)v22 != v21);
      uint64_t v23 = __p;
    }
    uint64_t v26 = v21;
    operator delete(v23);
  }
  return a1;
}

void sub_D7CE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_24F7190);
  sub_401F88((void **)va);
  sub_402C7C(v4);
  sub_4BCED0(v3);
  sub_1A6DC(v2);
  _Unwind_Resume(a1);
}

void sub_D7CEA0()
{
}

char **sub_D7CEC8(char **a1, long long **a2)
{
  a1[2] = 0;
  int v3 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_D7CFA0(v3, v4, v5, v8);
  }
  return a1;
}

void sub_D7CF74(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AB2D0((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_D7CFA0(int a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  if (a2 != a3)
  {
    int64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      unint64_t v9 = v4 + 24;
      if (*((char *)v6 + 47) < 0)
      {
        sub_4200(v9, *((void **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        *((void *)v4 + 5) = *((void *)v6 + 5);
        *(_OWORD *)unint64_t v9 = v7;
      }
      v6 += 3;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_D7D06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_29DF84((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_29DF84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_D7D0A4()
{
  byte_25E6F37 = 1;
  word_25E6F20 = 65;
  byte_25E6F4F = 1;
  word_25E6F38 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E6FB0 = 0u;
  *(_OWORD *)&qword_25E6FC0 = 0u;
  dword_25E6FD0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6FB0, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E6FB0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6FB0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6FB0, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6F67 = 8;
  strcpy((char *)&qword_25E6F50, "any_mode");
  byte_25E6F7F = 7;
  strcpy((char *)&dword_25E6F68, "cycling");
  byte_25E6F97 = 7;
  strcpy((char *)&dword_25E6F80, "driving");
  byte_25E6FAF = 7;
  strcpy((char *)&dword_25E6F98, "walking");
}

void sub_D7D300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6FC0) {
    sub_20B06B0((void **)qword_25E6FC0);
  }
  double v37 = (void *)xmmword_25E6FB0;
  *(void *)&xmmword_25E6FB0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D7D3A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)sub_37D0C0((uint64_t)a2);
  v64[0] = a4;
  v64[1] = a3;
  char v90 = 0;
  char v92 = 0;
  char v94 = 0;
  memset(__p, 0, 24);
  v59 = (void *)1851878480;
  char v60 = 4;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  char v61 = 0;
  sub_D03E24((char *)&v61, 0, 0, 0);
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "Plan.Started");
  sub_710A8(30, (uint64_t)__p, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_725D0((uint64_t)v58);
  if (sub_DAC700(a1))
  {
    *(_OWORD *)char v67 = (unint64_t)a1;
    *(void *)&v67[16] = 0;
    *(void *)&v67[24] = 0;
    char v78 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    v80 = 0;
    sub_CAA7F0((uint64_t)v67, (uint64_t)a2, 30, (uint64_t)__p);
    uint64_t v9 = v79;
    if (v79)
    {
      uint64_t v10 = (uint64_t)v80;
      int v11 = v79;
      if (v80 != v79)
      {
        do
          uint64_t v10 = sub_402C7C(v10 - 376);
        while ((void *)v10 != v9);
        int v11 = v79;
      }
      v80 = v9;
      operator delete(v11);
    }
    if (v78)
    {
      if (v76)
      {
        char v77 = v76;
        operator delete(v76);
      }
      if (v74)
      {
        char v75 = v74;
        operator delete(v74);
      }
      if (v72)
      {
        char v73 = v72;
        operator delete(v72);
      }
      if (v70)
      {
        char v71 = v70;
        operator delete(v70);
      }
      char v78 = 0;
    }
    double v53 = COERCE_DOUBLE(&v67[8]);
    sub_BC2EEC((void ***)&v53);
    if (!LOBYTE(__p[0]))
    {
      *(void *)char v67 = operator new(0x28uLL);
      *(_OWORD *)&char v67[8] = xmmword_20B9280;
      strcpy(*(char **)v67, "place request parser module failed");
      sub_D7DFF0(v64, (uint64_t)v67, (unsigned int *)&__p[1], (uint64_t)&v89);
      if ((v67[23] & 0x80000000) != 0)
      {
        char v14 = *(void **)v67;
LABEL_127:
        operator delete(v14);
      }
LABEL_128:
      sub_CB1C20((uint64_t)__p);
      goto LABEL_129;
    }
    if (!v90) {
      char v90 = 1;
    }
    uint64_t v89 = v88;
    long long v68 = 0u;
    memset(v67, 0, sizeof(v67));
    std::string::assign((std::string *)v67, "PlaceRequestParserModule");
    LOBYTE(v53) = 1;
    uint64_t v12 = v68;
    if ((unint64_t)v68 >= *((void *)&v68 + 1))
    {
      uint64_t v13 = sub_C55C14((uint64_t *)&v67[24], "Runtime", (char *)&v53, (double *)&v88);
    }
    else
    {
      sub_C55DE4((int)&v68 + 8, v68, "Runtime", (char *)&v53, (double *)&v88);
      uint64_t v13 = v12 + 48;
    }
    *(void *)&long long v68 = v13;
    sub_71740(30, (uint64_t)v67, v8);
    uint64_t v15 = *(void *)&v67[24];
    if (*(void *)&v67[24])
    {
      uint64_t v16 = v68;
      uint64_t v17 = *(void **)&v67[24];
      if ((void)v68 != *(void *)&v67[24])
      {
        do
        {
          if (*(char *)(v16 - 25) < 0) {
            operator delete(*(void **)(v16 - 48));
          }
          v16 -= 48;
        }
        while (v16 != v15);
        uint64_t v17 = *(void **)&v67[24];
      }
      *(void *)&long long v68 = v15;
      operator delete(v17);
    }
    if ((v67[23] & 0x80000000) != 0) {
      operator delete(*(void **)v67);
    }
    sub_CA841C((uint64_t)&__p[1], (uint64_t)v67);
    sub_CA73E4((uint64_t)v67, (uint64_t)a2, (uint64_t)v82);
    sub_4BCED0((uint64_t)&v68);
    uint64_t v18 = *(void *)v67;
    if (*(void *)v67)
    {
      uint64_t v19 = *(void *)&v67[8];
      uint64_t v20 = *(void **)v67;
      if (*(void *)&v67[8] != *(void *)v67)
      {
        do
          uint64_t v19 = sub_CA8AA8(v19 - 1632);
        while (v19 != v18);
        uint64_t v20 = *(void **)v67;
      }
      *(void *)&char v67[8] = v18;
      operator delete(v20);
    }
    if (v82[0])
    {
      if (!v92) {
        char v92 = 1;
      }
      double v91 = v86;
      long long v68 = 0u;
      memset(v67, 0, sizeof(v67));
      std::string::assign((std::string *)v67, "PlaceGuidanceModule");
      LOBYTE(v65) = 1;
      double v53 = round(v86);
      uint64_t v21 = v68;
      if ((unint64_t)v68 >= *((void *)&v68 + 1))
      {
        uint64_t v22 = sub_D0729C((uint64_t *)&v67[24], "Runtime", (char *)&v65, &v53);
      }
      else
      {
        sub_D0746C((int)&v68 + 8, v68, "Runtime", (char *)&v65, &v53);
        uint64_t v22 = v21 + 48;
      }
      *(void *)&long long v68 = v22;
      sub_71740(30, (uint64_t)v67, v8);
      uint64_t v24 = *(void *)&v67[24];
      if (*(void *)&v67[24])
      {
        uint64_t v25 = v68;
        uint64_t v26 = *(void **)&v67[24];
        if ((void)v68 != *(void *)&v67[24])
        {
          do
          {
            if (*(char *)(v25 - 25) < 0) {
              operator delete(*(void **)(v25 - 48));
            }
            v25 -= 48;
          }
          while (v25 != v24);
          uint64_t v26 = *(void **)&v67[24];
        }
        *(void *)&long long v68 = v24;
        operator delete(v26);
      }
      if ((v67[23] & 0x80000000) != 0) {
        operator delete(*(void **)v67);
      }
      sub_CB2FD0((uint64_t)&__p[1], (uint64_t *)&v83, (uint64_t)v67);
      sub_CB28E8((uint64_t)v67, (uint64_t)a2, (uint64_t)&v53);
      sub_4BCED0((uint64_t)&v69);
      uint64_t v27 = *(void *)v67;
      if (*(void *)v67)
      {
        uint64_t v28 = *(void *)&v67[8];
        double v29 = *(void **)v67;
        if (*(void *)&v67[8] != *(void *)v67)
        {
          do
          {
            uint64_t v30 = v28 - 2448;
            sub_8E42D4(v28 - 2440);
            uint64_t v28 = v30;
          }
          while (v30 != v27);
          double v29 = *(void **)v67;
        }
        *(void *)&char v67[8] = v27;
        operator delete(v29);
      }
      if (LOBYTE(v53))
      {
        if (!v94) {
          char v94 = 1;
        }
        double v93 = v57;
        long long v68 = 0u;
        memset(v67, 0, sizeof(v67));
        std::string::assign((std::string *)v67, "PlaceResponseBuilderModule");
        char v66 = 1;
        double v65 = round(v57);
        uint64_t v31 = v68;
        if ((unint64_t)v68 >= *((void *)&v68 + 1))
        {
          uint64_t v32 = sub_D0729C((uint64_t *)&v67[24], "Runtime", &v66, &v65);
        }
        else
        {
          sub_D0746C((int)&v68 + 8, v68, "Runtime", &v66, &v65);
          uint64_t v32 = v31 + 48;
        }
        *(void *)&long long v68 = v32;
        sub_71740(30, (uint64_t)v67, v8);
        uint64_t v33 = *(void *)&v67[24];
        if (*(void *)&v67[24])
        {
          uint64_t v34 = v68;
          uint64_t v35 = *(void **)&v67[24];
          if ((void)v68 != *(void *)&v67[24])
          {
            do
            {
              if (*(char *)(v34 - 25) < 0) {
                operator delete(*(void **)(v34 - 48));
              }
              v34 -= 48;
            }
            while (v34 != v33);
            uint64_t v35 = *(void **)&v67[24];
          }
          *(void *)&long long v68 = v33;
          operator delete(v35);
        }
        if ((v67[23] & 0x80000000) != 0) {
          operator delete(*(void **)v67);
        }
        double v65 = 0.0;
        double v65 = sub_72688((uint64_t)v58);
        v67[0] = 1;
        uint64_t v36 = v62;
        if ((unint64_t)v62 >= v63)
        {
          double v37 = (void **)sub_C55C14((uint64_t *)&v61, "Runtime", v67, &v65);
        }
        else
        {
          sub_C55DE4((int)&v63, (uint64_t)v62, "Runtime", v67, &v65);
          double v37 = v36 + 6;
        }
        uint64_t v62 = v37;
        sub_71740(30, (uint64_t)&v59, v8);
        sub_377D10(a2, (uint64_t)v67);
        sub_71740(1, (uint64_t)v67, v8);
        uint64_t v38 = *(void *)&v67[24];
        if (*(void *)&v67[24])
        {
          uint64_t v39 = v68;
          uint64_t v40 = *(void **)&v67[24];
          if ((void)v68 != *(void *)&v67[24])
          {
            do
            {
              if (*(char *)(v39 - 25) < 0) {
                operator delete(*(void **)(v39 - 48));
              }
              v39 -= 48;
            }
            while (v39 != v38);
            uint64_t v40 = *(void **)&v67[24];
          }
          *(void *)&long long v68 = v38;
          operator delete(v40);
        }
        if ((v67[23] & 0x80000000) != 0) {
          operator delete(*(void **)v67);
        }
        uint64_t v41 = *(void *)(a4 + 24);
        if (v41) {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v89);
        }
        uint64_t v42 = *(void *)(a3 + 24);
        if (!v42) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v42 + 48))(v42, v54);
      }
      else
      {
        *(void *)char v67 = operator new(0x28uLL);
        *(_OWORD *)&char v67[8] = xmmword_20B9960;
        strcpy(*(char **)v67, "schedule response builder module failed");
        sub_D7DFF0(v64, (uint64_t)v67, (unsigned int *)&v83, (uint64_t)&v89);
        if ((v67[23] & 0x80000000) != 0) {
          operator delete(*(void **)v67);
        }
      }
      if (LOBYTE(v53))
      {
        sub_182E7B8(v54);
        goto LABEL_113;
      }
      uint64_t v43 = (void **)v55;
      if (!v55)
      {
LABEL_113:
        if (v82[0])
        {
          uint64_t v45 = (uint64_t)v83;
          if (v83)
          {
            uint64_t v46 = v84;
            char v14 = v83;
            if ((void *)v84 != v83)
            {
              do
              {
                uint64_t v47 = v46 - 2448;
                sub_8E42D4(v46 - 2440);
                uint64_t v46 = v47;
              }
              while (v47 != v45);
              char v14 = v83;
            }
            uint64_t v84 = v45;
            goto LABEL_127;
          }
        }
        else
        {
          char v48 = v85;
          if (v85)
          {
            double v49 = v86;
            char v14 = v85;
            if (*(void **)&v86 != v85)
            {
              do
              {
                if (*(char *)(*(void *)&v49 - 1) < 0) {
                  operator delete(*(void **)(*(void *)&v49 - 24));
                }
                *(void *)&v49 -= 32;
              }
              while (*(void **)&v49 != v48);
              char v14 = v85;
            }
            double v86 = *(double *)&v48;
            goto LABEL_127;
          }
        }
        goto LABEL_128;
      }
      int v44 = v56;
      uint64_t v23 = v55;
      if (v56 != v55)
      {
        do
        {
          if (*((char *)v44 - 1) < 0) {
            operator delete(*(v44 - 3));
          }
          v44 -= 4;
        }
        while (v44 != v43);
        uint64_t v23 = v55;
      }
      int v56 = v43;
    }
    else
    {
      *(void *)char v67 = operator new(0x20uLL);
      *(_OWORD *)&char v67[8] = xmmword_20B8E90;
      strcpy(*(char **)v67, "schedule guidance module failed");
      sub_D7DFF0(v64, (uint64_t)v67, (unsigned int *)&v83, (uint64_t)&v89);
      if ((v67[23] & 0x80000000) == 0) {
        goto LABEL_113;
      }
      uint64_t v23 = *(void **)v67;
    }
    operator delete(v23);
    goto LABEL_113;
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "place request is not consistent");
  *(void *)char v67 = 1;
  *(void *)&char v67[8] = &off_2439090;
  sub_D7DFF0(v64, (uint64_t)__p, (unsigned int *)v67, (uint64_t)&v89);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_129:
  __n128 v50 = (void **)v61;
  if (v61)
  {
    uint64_t v51 = v62;
    uint64_t v52 = v61;
    if (v62 != v61)
    {
      do
      {
        if (*((char *)v51 - 25) < 0) {
          operator delete(*(v51 - 6));
        }
        v51 -= 6;
      }
      while (v51 != v50);
      uint64_t v52 = v61;
    }
    uint64_t v62 = v50;
    operator delete(v52);
  }
  if (v60 < 0) {
    operator delete(v59);
  }
}

void sub_D7DDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_D7DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (SLOBYTE(STACK[0x7E7]) < 0)
  {
    operator delete((void *)STACK[0x7D0]);
    sub_A3A4((uint64_t)&a41);
    _Unwind_Resume(a1);
  }
  sub_A3A4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_D7DFF0(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v18);
    uint64_t v8 = sub_188FC78(v18, (uint64_t)"[transit vehicle position] ", 27);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_188FC78(v8, v10, v11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_182E158(v18, 0, 0);
  int v12 = sub_E12498(*a3);
  v19 |= 0x20u;
  int v22 = v12;
  uint64_t v13 = *(void *)(*a1 + 24);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a4);
  }
  uint64_t v14 = *(void *)(a1[1] + 24);
  if (!v14) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v18);
  return sub_182E7B8(v18);
}

void sub_D7E228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_D7E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_182E7B8(va);
  _Unwind_Resume(a1);
}

double sub_D7E288()
{
  byte_25E6FEF = 1;
  word_25E6FD8 = 65;
  byte_25E7007 = 1;
  word_25E6FF0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E7098 = 0u;
  *(_OWORD *)&qword_25E70A8 = 0u;
  dword_25E70B8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E7098, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E7098, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E7098, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E7098, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E701F = 8;
  strcpy((char *)&qword_25E7008, "any_mode");
  byte_25E7037 = 7;
  strcpy((char *)&dword_25E7020, "cycling");
  byte_25E704F = 7;
  strcpy((char *)&dword_25E7038, "driving");
  byte_25E7067 = 7;
  strcpy((char *)&dword_25E7050, "walking");
  qword_25E7070 = 0;
  qword_25E7078 = 0;
  qword_25E7068 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E7068 = (uint64_t)v0;
  qword_25E7070 = (uint64_t)(v0 + 9);
  qword_25E7078 = (uint64_t)(v0 + 9);
  qword_25E7080 = 0;
  qword_25E7088 = 0;
  unk_25E7090 = 0;
  char v1 = (char *)operator new(9uLL);
  qword_25E7088 = (uint64_t)(v1 + 9);
  unk_25E7090 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)char v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E7080 = (uint64_t)v1;
  return result;
}

void sub_D7E550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E70A8) {
    sub_20B06F4((void **)qword_25E70A8);
  }
  double v37 = (void *)xmmword_25E7098;
  *(void *)&xmmword_25E7098 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D7E5F0()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  char v77 = (void *)v1;
  uint64_t v2 = *(void *)sub_37D0C0(v1);
  sub_725D0((uint64_t)v116);
  char v115 = 31;
  sub_D53E44(31, (uint64_t)v0, (uint64_t)v77);
  *(void *)__n128 __p = 0;
  *(void *)&__p[8] = &off_2439090;
  sub_3E7814(&v111, (__n128 *)__p);
  unsigned __int8 v112 = 31;
  uint64_t v113 = v2;
  int v114 = 0;
  unsigned int v3 = sub_DB7034((uint64_t)v0);
  sub_DB6A08((uint64_t)v0, (uint64_t)v172);
  sub_494284(1, v3, (uint64_t)v172);
  int v4 = sub_486A5C((uint64_t)v172);
  if (v4 != 2 && v4 != 5)
  {
    __p[23] = 19;
    strcpy(__p, "TransportTypeChange");
    sub_710A8(31, (uint64_t)__p, v2);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  sub_47E0E4(v107);
  v105 = 0;
  v104 = 0;
  v106 = 0;
  long long v103 = 0uLL;
  v102 = 0;
  memset(&v101, 0, sizeof(v101));
  v99[1] = 0;
  v99[0] = 0;
  uint64_t v100 = 0;
  v97[1] = 0;
  v97[0] = 0;
  uint64_t v98 = 0;
  v95[1] = 0;
  v95[0] = 0;
  uint64_t v96 = 0;
  sub_11B16A4((uint64_t)v91, 0, 0);
  char v76 = v0;
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  sub_162C594(v89, 0, 0);
  sub_162C594(&v90, 0, 0);
  *(void *)__n128 __p = v0;
  *(void *)&__p[8] = &v115;
  *(void *)&__p[16] = v77;
  v178[0] = v172;
  HIBYTE(v174[0]) = 0;
  LOBYTE(v173[0]) = 0;
  sub_CF27C0((uint64_t)&v111, (uint64_t)__p, (uint64_t)v173, (uint64_t)v86);
  if (SHIBYTE(v174[0]) < 0)
  {
    operator delete(v173[0]);
    if (v86[0]) {
      goto LABEL_17;
    }
  }
  else if (v86[0])
  {
    goto LABEL_17;
  }
  int v5 = (void **)v87;
  if (v87)
  {
    int64_t v6 = v88;
    char v7 = v87;
    if (v88 != v87)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 4;
      }
      while (v6 != v5);
      char v7 = v87;
    }
    uint64_t v88 = v5;
    operator delete(v7);
  }
LABEL_17:
  *((unsigned char *)&v78.__r_.__value_.__s + 23) = 0;
  v78.__r_.__value_.__s.__data_[0] = 0;
  ++v114;
  v122[0] = 1;
  bzero(&v123, 0x360uLL);
  sub_47E0E4(&v123);
  int v127 = -1;
  char v131 = 0;
  char v132 = 0;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  *(void *)((char *)v142 + 5) = 0;
  v142[0] = 0;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  int v141 = 0;
  uint64_t v146 = 0x3FF0000000000000;
  uint64_t v148 = 0;
  uint64_t v147 = 0;
  uint64_t v149 = 0;
  char v150 = 5;
  long long v153 = 0u;
  long long v152 = 0u;
  long long v151 = 0u;
  int v154 = 0x7FFFFFFF;
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  long long v157 = 0u;
  memset(v158, 0, sizeof(v158));
  long long v155 = 0u;
  long long v156 = 0u;
  uint64_t v161 = -1;
  int v162 = 0x7FFFFFFF;
  uint64_t v163 = 0;
  uint64_t v164 = -1;
  int v165 = -1;
  char v166 = 0;
  char v169 = 0;
  uint64_t v170 = 0;
  __int16 v171 = 0;
  if ((void (***)(std::error_category *__hidden))v111.n128_u64[1] != &off_2439090 || v111.n128_u32[0])
  {
    sub_3E7814((__n128 *)v173, &v111);
    __p[0] = 0;
    *(_OWORD *)&__p[8] = *(_OWORD *)v173;
    *(_OWORD *)v178 = *(_OWORD *)v174;
    v179 = v175;
    v174[0] = 0;
    v174[1] = 0;
    v175 = 0;
    int v180 = (int)v176;
    sub_CA5C50((uint64_t)v122, __p);
    if (__p[0])
    {
      sub_CA701C((uint64_t)&__p[8]);
    }
    else
    {
      int v8 = (void **)v178[0];
      if (v178[0])
      {
        int v9 = (void **)v178[1];
        char v10 = v178[0];
        if (v178[1] != v178[0])
        {
          do
          {
            if (*((char *)v9 - 1) < 0) {
              operator delete(*(v9 - 3));
            }
            v9 -= 4;
          }
          while (v9 != v8);
          char v10 = v178[0];
        }
        v178[1] = v8;
        operator delete(v10);
      }
    }
    int v14 = (void **)v174[0];
    if (v174[0])
    {
      uint64_t v15 = (void **)v174[1];
      uint64_t v16 = v174[0];
      if (v174[1] != v174[0])
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 4;
        }
        while (v15 != v14);
        uint64_t v16 = v174[0];
      }
      v174[1] = v14;
      operator delete(v16);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_75:
      operator delete(v78.__r_.__value_.__l.__data_);
      if (!v122[0])
      {
LABEL_76:
        uint64_t v31 = (void **)v124;
        if (v124)
        {
          uint64_t v32 = (void **)v125;
          uint64_t v33 = v124;
          if ((void *)v125 != v124)
          {
            do
            {
              if (*((char *)v32 - 1) < 0) {
                operator delete(*(v32 - 3));
              }
              v32 -= 4;
            }
            while (v32 != v31);
            uint64_t v33 = v124;
          }
          *(void *)&long long v125 = v31;
          operator delete(v33);
        }
LABEL_84:
        *((unsigned char *)&v79.__r_.__value_.__s + 23) = 0;
        v79.__r_.__value_.__s.__data_[0] = 0;
        ++v114;
        v82[0] = 1;
        memset(v83, 0, sizeof(v83));
        __int16 v84 = 1;
        char v85 = 0;
        if ((void (***)(std::error_category *__hidden))v111.n128_u64[1] == &off_2439090 && !v111.n128_u32[0])
        {
          v173[0] = v0;
          LODWORD(v173[1]) = 0;
          v174[0] = v77;
          LOBYTE(v174[1]) = sub_DC5CDC(v173);
          LOBYTE(v176) = 0;
          sub_C9CA80((uint64_t)v173, (uint64_t)__p);
          sub_C9D2A4((uint64_t)v82, (uint64_t)__p);
          if (__p[0])
          {
            uint64_t v34 = *(void *)&__p[8];
            if (*(void *)&__p[8])
            {
              uint64_t v35 = *(void *)&__p[16];
              uint64_t v36 = *(void **)&__p[8];
              if (*(void *)&__p[16] != *(void *)&__p[8])
              {
                do
                {
                  v35 -= 376;
                  sub_402C7C(v35);
                }
                while (v35 != v34);
                uint64_t v36 = *(void **)&__p[8];
              }
              *(void *)&__p[16] = v34;
LABEL_134:
              operator delete(v36);
            }
          }
          else
          {
            uint64_t v42 = (void **)v178[0];
            if (v178[0])
            {
              uint64_t v43 = (void **)v178[1];
              uint64_t v36 = v178[0];
              if (v178[1] != v178[0])
              {
                do
                {
                  if (*((char *)v43 - 1) < 0) {
                    operator delete(*(v43 - 3));
                  }
                  v43 -= 4;
                }
                while (v43 != v42);
                uint64_t v36 = v178[0];
              }
              v178[1] = v42;
              goto LABEL_134;
            }
          }
          int v49 = v112;
          if (v82[0])
          {
            sub_CF2E84((uint64_t)&v83[24], (uint64_t)__p);
            sub_717B8(v49, (uint64_t)&v79, (uint64_t)__p, v113);
            __n128 v50 = (void **)v178[0];
            if (v178[0])
            {
              uint64_t v51 = (void **)v178[1];
              uint64_t v52 = v178[0];
              if (v178[1] != v178[0])
              {
                do
                {
                  if (*((char *)v51 - 25) < 0) {
                    operator delete(*(v51 - 6));
                  }
                  v51 -= 6;
                }
                while (v51 != v50);
                uint64_t v52 = v178[0];
              }
              v178[1] = v50;
              operator delete(v52);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            char v67 = v102;
            if (v102)
            {
              uint64_t v68 = v103;
              uint64_t v69 = v102;
              if ((void *)v103 != v102)
              {
                do
                  uint64_t v68 = sub_402C7C(v68 - 376);
                while ((void *)v68 != v67);
                uint64_t v69 = v102;
              }
              *(void *)&long long v103 = v67;
              operator delete(v69);
            }
            uint64_t v70 = *(void *)v83;
            v102 = *(void **)v83;
            uint64_t v71 = *(void *)&v83[8];
            long long v103 = *(_OWORD *)&v83[8];
            memset(v83, 0, 24);
            memset(&v78, 0, sizeof(v78));
            uint64_t v72 = v71;
            if (v71 != v70)
            {
              unint64_t v73 = 0x51B3BEA3677D46CFLL * ((v71 - v70) >> 3);
              if (v73 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              char v74 = operator new(0xA8D9DF51B3BEA368 * ((v71 - v70) >> 3));
              v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
              v78.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
              v78.__r_.__value_.__r.__words[2] = (std::string::size_type)v74 + 24 * v73;
              do
              {
                long long v75 = *(_OWORD *)(v70 + 216);
                *(void *)&__p[16] = *(void *)(v70 + 232);
                *(_OWORD *)__n128 __p = v75;
                char v74 = (void *)(sub_447BAC(&v78.__r_.__value_.__l.__data_, (uint64_t)v74, (__n128 *)__p) + 24);
                v70 += 376;
              }
              while (v70 != v72);
            }
            if (v101.__r_.__value_.__r.__words[0])
            {
              v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
              operator delete(v101.__r_.__value_.__l.__data_);
            }
            std::string v101 = v78;
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_118;
            }
            goto LABEL_160;
          }
          sub_71424(v112, (const std::error_condition *)v83, v113);
          __p[23] = 18;
          strcpy(__p, "InternalError[All]");
          sub_710A8(v112, (uint64_t)__p, v113);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            sub_70954(v112, (uint64_t)&v78, v53);
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v54 = &v78;
            }
            else {
              long long v54 = (std::string *)v78.__r_.__value_.__r.__words[0];
            }
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v78.__r_.__value_.__l.__size_;
            }
            int v56 = sub_188FC78(__p, (uint64_t)v54, size);
            sub_188FC78(v56, (uint64_t)" failed in step ", 16);
            double v57 = (void *)std::ostream::operator<<();
            char v58 = sub_188FC78(v57, (uint64_t)" (", 2);
            v59 = (char *)operator new(0x28uLL);
            strcpy(v59, "InputPointTransformerModuleOutput");
            char v60 = sub_188FC78(v58, (uint64_t)v59, 33);
            char v61 = sub_188FC78(v60, (uint64_t)") with error: ", 14);
            sub_CF2D60(v61, (uint64_t)v83);
            operator delete(v59);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v78, 3u);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            if (v182 < 0) {
              operator delete(v181);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_3E7A10((uint64_t)&v111, (uint64_t)v83);
          goto LABEL_159;
        }
        sub_3E7814((__n128 *)v173, &v111);
        __p[0] = 0;
        *(_OWORD *)&__p[8] = *(_OWORD *)v173;
        *(_OWORD *)v178 = *(_OWORD *)v174;
        v179 = v175;
        v174[0] = 0;
        v174[1] = 0;
        v175 = 0;
        int v180 = (int)v176;
        sub_C9D2A4((uint64_t)v82, (uint64_t)__p);
        if (__p[0])
        {
          uint64_t v37 = *(void *)&__p[8];
          if (!*(void *)&__p[8]) {
            goto LABEL_115;
          }
          uint64_t v38 = *(void *)&__p[16];
          uint64_t v39 = *(void **)&__p[8];
          if (*(void *)&__p[16] != *(void *)&__p[8])
          {
            do
            {
              v38 -= 376;
              sub_402C7C(v38);
            }
            while (v38 != v37);
            uint64_t v39 = *(void **)&__p[8];
          }
          *(void *)&__p[16] = v37;
        }
        else
        {
          uint64_t v40 = (void **)v178[0];
          if (!v178[0]) {
            goto LABEL_115;
          }
          uint64_t v41 = (void **)v178[1];
          uint64_t v39 = v178[0];
          if (v178[1] != v178[0])
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 4;
            }
            while (v41 != v40);
            uint64_t v39 = v178[0];
          }
          v178[1] = v40;
        }
        operator delete(v39);
LABEL_115:
        int v44 = (void **)v174[0];
        if (v174[0])
        {
          uint64_t v45 = (void **)v174[1];
          if (v174[1] == v174[0])
          {
            v174[1] = v174[0];
            operator delete(v174[0]);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_118;
            }
          }
          else
          {
            do
            {
              if (*((char *)v45 - 1) < 0) {
                operator delete(*(v45 - 3));
              }
              v45 -= 4;
            }
            while (v45 != v44);
            v174[1] = v44;
            operator delete(v174[0]);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_118:
              operator delete(v79.__r_.__value_.__l.__data_);
              if (!v82[0])
              {
LABEL_119:
                uint64_t v46 = *(void *)&v83[16];
                if (!*(void *)&v83[16]) {
                  goto LABEL_167;
                }
                uint64_t v47 = *(void *)&v83[24];
                char v48 = *(void **)&v83[16];
                if (*(void *)&v83[24] != *(void *)&v83[16])
                {
                  do
                  {
                    if (*(char *)(v47 - 1) < 0) {
                      operator delete(*(void **)(v47 - 24));
                    }
                    v47 -= 32;
                  }
                  while (v47 != v46);
                  char v48 = *(void **)&v83[16];
                }
                *(void *)&v83[24] = v46;
                goto LABEL_166;
              }
LABEL_161:
              uint64_t v62 = *(void *)v83;
              if (!*(void *)v83) {
                goto LABEL_167;
              }
              uint64_t v63 = *(void *)&v83[8];
              char v48 = *(void **)v83;
              if (*(void *)&v83[8] != *(void *)v83)
              {
                do
                {
                  v63 -= 376;
                  sub_402C7C(v63);
                }
                while (v63 != v62);
                char v48 = *(void **)v83;
              }
              *(void *)&v83[8] = v62;
LABEL_166:
              operator delete(v48);
LABEL_167:
              *(void *)__n128 __p = v76;
              *(void *)&__p[8] = v77;
              *(void *)&__p[16] = &v102;
              v178[0] = &v104;
              v178[1] = &v101;
              HIBYTE(v174[0]) = 0;
              LOBYTE(v173[0]) = 0;
              sub_D8335C((uint64_t)&v111, (uint64_t *)__p, (uint64_t)v173, (uint64_t)v119);
              if (SHIBYTE(v174[0]) < 0)
              {
                operator delete(v173[0]);
                if (v119[0]) {
                  goto LABEL_179;
                }
              }
              else if (v119[0])
              {
                goto LABEL_179;
              }
              v64 = (void **)v120;
              if (v120)
              {
                double v65 = v121;
                char v66 = v120;
                if (v121 != v120)
                {
                  do
                  {
                    if (*((char *)v65 - 1) < 0) {
                      operator delete(*(v65 - 3));
                    }
                    v65 -= 4;
                  }
                  while (v65 != v64);
                  char v66 = v120;
                }
                v121 = v64;
                operator delete(v66);
              }
LABEL_179:
              HIBYTE(v118) = 0;
              LOBYTE(v117[0]) = 0;
              ++v114;
              char v80 = 1;
              sub_CF6378((uint64_t)&v81);
            }
          }
LABEL_160:
          if (!v82[0]) {
            goto LABEL_119;
          }
          goto LABEL_161;
        }
LABEL_159:
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_118;
        }
        goto LABEL_160;
      }
LABEL_47:
      sub_CA701C((uint64_t)&v123);
      goto LABEL_84;
    }
LABEL_46:
    if (!v122[0]) {
      goto LABEL_76;
    }
    goto LABEL_47;
  }
  sub_CF5040(v173, (void ***)v0, (uint64_t)v172, v77, 0);
  sub_CA3808((unsigned __int8 *)v173, (uint64_t)__p);
  sub_CA5C50((uint64_t)v122, __p);
  if (__p[0])
  {
    sub_CA701C((uint64_t)&__p[8]);
  }
  else
  {
    int v11 = (void **)v178[0];
    if (v178[0])
    {
      int v12 = (void **)v178[1];
      char v13 = v178[0];
      if (v178[1] != v178[0])
      {
        do
        {
          if (*((char *)v12 - 1) < 0) {
            operator delete(*(v12 - 3));
          }
          v12 -= 4;
        }
        while (v12 != v11);
        char v13 = v178[0];
      }
      v178[1] = v11;
      operator delete(v13);
    }
  }
  if (!v122[0])
  {
LABEL_74:
    sub_CF5B18(v173);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_75;
    }
    goto LABEL_46;
  }
  int v17 = v112;
  sub_CF4E10((uint64_t)&v170, (uint64_t)__p);
  sub_717B8(v17, (uint64_t)&v78, (uint64_t)__p, v113);
  uint64_t v18 = (void **)v178[0];
  if (v178[0])
  {
    int v19 = (void **)v178[1];
    uint64_t v20 = v178[0];
    if (v178[1] != v178[0])
    {
      do
      {
        if (*((char *)v19 - 25) < 0) {
          operator delete(*(v19 - 6));
        }
        v19 -= 6;
      }
      while (v19 != v18);
      uint64_t v20 = v178[0];
    }
    v178[1] = v18;
    operator delete(v20);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  char v21 = v107[0];
  if (v107[0])
  {
    int v22 = v107[1];
    uint64_t v23 = v107[0];
    if (v107[1] != v107[0])
    {
      do
        int v22 = (void *)sub_4451C0((uint64_t)v22 - 480);
      while (v22 != v21);
      uint64_t v23 = v107[0];
    }
    v107[1] = v21;
    operator delete(v23);
  }
  *(_OWORD *)v107 = v123;
  v108 = v124;
  v124 = 0;
  long long v123 = 0uLL;
  if (SHIBYTE(v110) < 0) {
    operator delete((void *)v109);
  }
  long long v109 = v125;
  uint64_t v110 = v126;
  HIBYTE(v126) = 0;
  LOBYTE(v125) = 0;
  if (!v169 || (memset(__p, 0, sizeof(__p)), v24 = v167, uint64_t v25 = v168 - v167, v168 == v167))
  {
    uint64_t v27 = 0;
    double v29 = 0;
    uint64_t v26 = 0;
    uint64_t v30 = (char *)v104;
    if (!v104) {
      goto LABEL_73;
    }
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v25 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v26 = (char *)operator new(v168 - v167);
    uint64_t v27 = &v26[8 * (v25 >> 3)];
    size_t v28 = 24 * ((v25 - 24) / 0x18uLL) + 24;
    memcpy(v26, v24, v28);
    double v29 = &v26[v28];
    uint64_t v30 = (char *)v104;
    if (!v104) {
      goto LABEL_73;
    }
  }
  v105 = v30;
  operator delete(v30);
LABEL_73:
  v104 = v26;
  v105 = v29;
  v106 = v27;
  goto LABEL_74;
}

void sub_D82A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x1CB0]);
  sub_D1EAF8((uint64_t)&STACK[0x2270]);
  sub_CBC8A8((uint64_t)&a57);
  if (SLOBYTE(STACK[0x1027]) < 0) {
    operator delete((void *)STACK[0x1010]);
  }
  sub_162D64C(a12);
  sub_162D64C(&STACK[0x918]);
  sub_C8423C(&STACK[0xD78]);
  sub_574530((void **)&STACK[0xE90]);
  sub_C66564((void ***)&STACK[0xEB0]);
  sub_C7E6AC((void **)&STACK[0xED0]);
  char v58 = (void *)STACK[0xEF0];
  if (STACK[0xEF0])
  {
    STACK[0xEF8] = (unint64_t)v58;
    operator delete(v58);
  }
  sub_401F88((void **)&STACK[0xF10]);
  v59 = (void *)STACK[0xF28];
  if (STACK[0xF28])
  {
    STACK[0xF30] = (unint64_t)v59;
    operator delete(v59);
  }
  sub_440ED4((uint64_t)&STACK[0xF40]);
  sub_4BCC2C((uint64_t)&STACK[0x19E8]);
  sub_C7E3C8((uint64_t)&STACK[0xF70]);
  _Unwind_Resume(a1);
}

void sub_D8335C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a4 = 1;
  *(void *)(a4 + 8) = 0;
  int64_t v6 = (std::error_condition *)(a4 + 8);
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1 != 0)
  {
    sub_3E7814((__n128 *)v54, (__n128 *)a1);
    std::string::size_type size = v54[1].__r_.__value_.__l.__size_;
    int v9 = v54[1].__r_.__value_.__r.__words[2];
    long long v10 = *(_OWORD *)&v54[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&v54[0].__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 24) = v10;
    *(void *)(a4 + 40) = size;
    *(_DWORD *)(a4 + 48) = v9;
    *(unsigned char *)a4 = 0;
    return;
  }
  sub_D83B60((uint64_t)v48, *a2, a2[1], a2[2], a2[3], a2[4]);
  sub_C5C804(v48, (uint64_t)v54);
  std::string::value_type v12 = v54[0].__r_.__value_.__s.__data_[0];
  if (!*(unsigned char *)a4)
  {
    if (v54[0].__r_.__value_.__s.__data_[0])
    {
      uint64_t v13 = *(void *)(a4 + 24);
      if (!v13) {
        goto LABEL_8;
      }
      uint64_t v14 = *(void *)(a4 + 32);
      uint64_t v15 = *(void **)(a4 + 24);
      if (v14 != v13)
      {
        do
        {
          if (*(char *)(v14 - 1) < 0) {
            operator delete(*(void **)(v14 - 24));
          }
          v14 -= 32;
        }
        while (v14 != v13);
        uint64_t v15 = *(void **)(a4 + 24);
      }
      *(void *)(a4 + 32) = v13;
      operator delete(v15);
      int v31 = v54[0].__r_.__value_.__s.__data_[0];
      *(void *)(a4 + 8) = v54[0].__r_.__value_.__l.__size_;
      *(unsigned char *)a4 = v31;
      if (v31) {
        goto LABEL_54;
      }
LABEL_17:
      std::string::pointer data = v54[1].__r_.__value_.__l.__data_;
      if (v54[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v17 = v54[1].__r_.__value_.__l.__size_;
        if (v54[1].__r_.__value_.__l.__size_ == v54[1].__r_.__value_.__r.__words[0])
        {
          v54[1].__r_.__value_.__l.__size_ = v54[1].__r_.__value_.__r.__words[0];
          operator delete(v54[1].__r_.__value_.__l.__data_);
          if (*(unsigned char *)a4) {
            goto LABEL_54;
          }
        }
        else
        {
          do
          {
            if (*(char *)(v17 - 1) < 0) {
              operator delete(*(void **)(v17 - 24));
            }
            v17 -= 32;
          }
          while ((std::string::pointer)v17 != data);
          v54[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
          operator delete(v54[1].__r_.__value_.__l.__data_);
          if (*(unsigned char *)a4) {
            goto LABEL_54;
          }
        }
      }
      sub_71424(*(unsigned __int8 *)(a1 + 48), v6, *(void *)(a1 + 56));
      int v18 = *(unsigned __int8 *)(a1 + 48);
      *((unsigned char *)&v54[0].__r_.__value_.__s + 23) = 18;
      strcpy((char *)v54, "InternalError[All]");
      sub_710A8(v18, (uint64_t)v54, *(void *)(a1 + 56));
      if (SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54[0].__r_.__value_.__l.__data_);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v54);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v46, v19);
        if ((v47 & 0x80u) == 0) {
          uint64_t v20 = v46;
        }
        else {
          uint64_t v20 = (void **)v46[0];
        }
        if ((v47 & 0x80u) == 0) {
          uint64_t v21 = v47;
        }
        else {
          uint64_t v21 = (uint64_t)v46[1];
        }
        int v22 = sub_188FC78(v54, (uint64_t)v20, v21);
        sub_188FC78(v22, (uint64_t)" failed in step ", 16);
        uint64_t v23 = (void *)std::ostream::operator<<();
        uint64_t v24 = sub_188FC78(v23, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v53);
        uint64_t v25 = std::string::append(&v53, "CustomRouteRequestValidationModule");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        int64_t v45 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v44 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (v45 >= 0) {
          uint64_t v27 = v44;
        }
        else {
          uint64_t v27 = (void **)v44[0];
        }
        if (v45 >= 0) {
          uint64_t v28 = HIBYTE(v45);
        }
        else {
          uint64_t v28 = (uint64_t)v44[1];
        }
        double v29 = sub_188FC78(v24, (uint64_t)v27, v28);
        uint64_t v30 = sub_188FC78(v29, (uint64_t)") with error: ", 14);
        sub_CF2D60(v30, (uint64_t)v6);
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[0]);
        }
        if ((char)v47 < 0) {
          operator delete(v46[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v53, 3u);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        *(std::string::size_type *)((char *)v54[0].__r_.__value_.__r.__words
        if (v57 < 0) {
          operator delete(v56);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, (uint64_t)v6);
      goto LABEL_67;
    }
LABEL_16:
    *int64_t v6 = *(std::error_condition *)&v54[0].__r_.__value_.__r.__words[1];
    *(std::string *)(a4 + 24) = v54[1];
    memset(&v54[1], 0, sizeof(std::string));
    *(_DWORD *)(a4 + 48) = v55;
    *(unsigned char *)a4 = 0;
    goto LABEL_17;
  }
  if (!v54[0].__r_.__value_.__s.__data_[0]) {
    goto LABEL_16;
  }
LABEL_8:
  *(void *)(a4 + 8) = v54[0].__r_.__value_.__l.__size_;
  *(unsigned char *)a4 = v12;
LABEL_54:
  int v32 = *(unsigned __int8 *)(a1 + 48);
  memset(v54, 0, sizeof(v54));
  std::string::assign(v54, "CustomRouteRequestValidationModule");
  v53.__r_.__value_.__s.__data_[0] = 1;
  std::string::size_type v33 = v54[1].__r_.__value_.__l.__size_;
  if (v54[1].__r_.__value_.__l.__size_ >= v54[1].__r_.__value_.__r.__words[2])
  {
    std::string::size_type v34 = sub_C947F8((uint64_t *)&v54[1], "Runtime", (char *)&v53, (uint64_t *)&v6->__val_);
  }
  else
  {
    sub_C949C8((int)&v54[1].__r_.__value_.__r.__words[2], v54[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v53, (uint64_t *)&v6->__val_);
    std::string::size_type v34 = v33 + 48;
  }
  v54[1].__r_.__value_.__l.__size_ = v34;
  sub_717B8(v32, a3, (uint64_t)v54, *(void *)(a1 + 56));
  std::string::pointer v35 = v54[1].__r_.__value_.__l.__data_;
  if (v54[1].__r_.__value_.__r.__words[0])
  {
    std::string::size_type v36 = v54[1].__r_.__value_.__l.__size_;
    std::string::pointer v37 = v54[1].__r_.__value_.__l.__data_;
    if (v54[1].__r_.__value_.__l.__size_ != v54[1].__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v36 - 25) < 0) {
          operator delete(*(void **)(v36 - 48));
        }
        v36 -= 48;
      }
      while ((std::string::pointer)v36 != v35);
      std::string::pointer v37 = v54[1].__r_.__value_.__l.__data_;
    }
    v54[1].__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    operator delete(v37);
  }
  if (SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54[0].__r_.__value_.__l.__data_);
  }
LABEL_67:
  uint64_t v38 = (void **)__p;
  if (__p)
  {
    uint64_t v39 = v52;
    uint64_t v40 = __p;
    if (v52 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0) {
          operator delete(*(v39 - 3));
        }
        v39 -= 3;
      }
      while (v39 != v38);
      uint64_t v40 = __p;
    }
    uint64_t v52 = v38;
    operator delete(v40);
  }
  uint64_t v41 = (void **)v49;
  if (v49)
  {
    uint64_t v42 = v50;
    uint64_t v43 = v49;
    if (v50 != v49)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      uint64_t v43 = v49;
    }
    __n128 v50 = v41;
    operator delete(v43);
  }
}

void sub_D8396C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a40);
  sub_D83AA4(&a21);
  sub_C5C9E0(v47);
  _Unwind_Resume(a1);
}

void sub_D83A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_A3A4(&a31);
  sub_D83AA4(&a15);
  sub_C5C9E0(v31);
  _Unwind_Resume(a1);
}

void sub_D83A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_D83AA4((uint64_t *)va);
  sub_C5C9E0(v7);
  _Unwind_Resume(a1);
}

void sub_D83A7C(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void sub_D83A90(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void *sub_D83AA4(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    int v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      int v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = (void *)a1[3];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[3];
    }
    a1[4] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_D83B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 16) = sub_DB71DC(a2);
  *(unsigned char *)(a1 + 17) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  int v9 = (void **)(a1 + 24);
  long long v10 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = a5;
  *(void *)(a1 + 80) = a6;
  *(_OWORD *)(a1 + 88) = xmmword_20E7B20;
  uint64_t v11 = *(void *)a1;
  uint64_t v31 = operator new(0x20uLL);
  long long v32 = xmmword_20B91B0;
  strcpy((char *)v31, "CustomRouteRequestValidation");
  memset(__p, 0, sizeof(__p));
  std::string::value_type v12 = sub_374CDC(v11, (uint64_t)&v31, (uint64_t *)__p);
  sub_54214((uint64_t)v34, (uint64_t)v12);
  uint64_t v13 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v14 = (void **)__p[1];
    uint64_t v15 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      uint64_t v15 = __p[0];
    }
    __p[1] = v13;
    operator delete(v15);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31);
  }
  sub_3CB370(v34, 2, 0, &v31);
  *(unsigned char *)(a1 + 17) = sub_29D62C(&v31, (uint64_t)&xmmword_25E7180);
  sub_5C308(&v31, (uint64_t)&qword_25E71E0, (uint64_t)__p);
  uint64_t v16 = (void **)*v9;
  if (*v9)
  {
    std::string::size_type v17 = *(void ***)(a1 + 32);
    int v18 = *v9;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      int v18 = *v9;
    }
    *(void *)(a1 + 32) = v16;
    operator delete(v18);
    *int v9 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)__p;
  *(void **)(a1 + 40) = __p[2];
  sub_5C308(&v31, (uint64_t)&qword_25E71F8, (uint64_t)__p);
  __n128 v19 = (void **)*v10;
  if (*v10)
  {
    uint64_t v20 = *(void ***)(a1 + 56);
    uint64_t v21 = *v10;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      uint64_t v21 = *v10;
    }
    *(void *)(a1 + 56) = v19;
    operator delete(v21);
    *long long v10 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)__p;
  *(void **)(a1 + 64) = __p[2];
  strcpy((char *)__p, "original_anchors_limit");
  HIBYTE(__p[2]) = 22;
  int v22 = sub_58070(&v31, (uint64_t)__p);
  if (v22 && *((_DWORD *)v22 + 12) == 1)
  {
    *(void *)(a1 + 88) = (unint64_t)*((double *)v22 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    *(void *)(a1 + 88) = *(void *)(a1 + 88);
    if (SHIBYTE(__p[2]) < 0) {
LABEL_32:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "requested_anchors_limit");
  uint64_t v23 = sub_58070(&v31, (uint64_t)__p);
  if (v23 && *((_DWORD *)v23 + 12) == 1)
  {
    *(void *)(a1 + 96) = (unint64_t)*((double *)v23 + 5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
  }
  else
  {
    *(void *)(a1 + 96) = *(void *)(a1 + 96);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
  }
  operator delete(__p[0]);
LABEL_39:
  uint64_t v24 = (void **)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    do
    {
      double v29 = (void **)*v24;
      sub_55198((uint64_t)(v24 + 5));
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      uint64_t v24 = v29;
    }
    while (v29);
  }
  uint64_t v25 = v31;
  uint64_t v31 = 0;
  if (v25) {
    operator delete(v25);
  }
  long long v26 = v35;
  if (v35)
  {
    do
    {
      uint64_t v30 = (void **)*v26;
      sub_55198((uint64_t)(v26 + 5));
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      long long v26 = v30;
    }
    while (v30);
  }
  uint64_t v27 = v34[0];
  v34[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  return a1;
}

void sub_D83F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a10);
  sub_5450C((uint64_t)&a21);
  sub_1A668(v22);
  sub_1A668(v21);
  _Unwind_Resume(a1);
}

void sub_D83F74()
{
}

void sub_D83F7C(_Unwind_Exception *a1)
{
  sub_1A668(v2);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_D83F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_1A668(&a18);
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(v19);
    sub_1A668(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD83F5CLL);
}

uint64_t sub_D83FCC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      int v4 = (void *)(a2 + 8);
      uint64_t v6 = (void **)(a1 + 8);
      uint64_t v5 = *(void ***)(a1 + 8);
      if (v5)
      {
        sub_C686F8(a1 + 8, v5);
        operator delete(*v6);
        *uint64_t v6 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      long long v7 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
      *(_OWORD *)(a1 + 32) = v7;
      goto LABEL_21;
    }
    uint64_t v14 = (void **)(a1 + 8);
    uint64_t v13 = *(void ***)(a1 + 8);
    if (v13)
    {
      sub_C686F8(a1 + 8, v13);
      operator delete(*v14);
    }
    *(_OWORD *)uint64_t v14 = *(_OWORD *)(a2 + 8);
LABEL_17:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_21;
  }
  int v8 = (_OWORD *)(a1 + 8);
  int v9 = (_OWORD *)(a2 + 8);
  if (!*(unsigned char *)a2)
  {
    _OWORD *v8 = *v9;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    std::string::value_type v12 = *(void **)(a1 + 24);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 32;
      }
      while (v11 != v10);
      std::string::value_type v12 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v10;
    operator delete(v12);
  }
  *(void *)int v8 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)int v9 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
LABEL_21:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_D8414C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, void *a7, void *a8, int a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v17 = a1 + 32;
  uint64_t v18 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v19 = sub_37B3A8((uint64_t)a4);
  uint64_t v20 = *(void *)v19;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v19 + 8);
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 92) = sub_DB6BEC(a2);
  *(_WORD *)(a1 + 100) = v21;
  *(unsigned char *)(a1 + 102) = v22;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = sub_DBD840(a2);
  *(unsigned char *)(a1 + 128) = sub_DB7530(a2);
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFELL;
  *(void *)(a1 + 144) = sub_DBCB28(a2);
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = *a7;
  *(unsigned char *)(a1 + 168) = sub_DB7034(a2);
  *(void *)(a1 + 176) = *a8;
  *(unsigned char *)(a1 + 184) = a6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "WalkingRouteFinding");
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  uint64_t v23 = sub_374CDC((uint64_t)a4, (uint64_t)__p, v64);
  uint64_t v24 = v64[0];
  if (v64[0])
  {
    uint64_t v25 = v64[1];
    long long v26 = (void *)v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      long long v26 = (void *)v64[0];
    }
    v64[1] = v24;
    operator delete(v26);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 192) = v23;
  *(void *)(a1 + 200) = sub_F6CDCC(a4, (unsigned __int8 *)(a1 + 92), *(unsigned __int8 *)(a1 + 128), v23);
  *(_DWORD *)(a1 + 208) = a9;
  sub_F5F1CC(a3, a4, (uint64_t)__p);
  uint64_t v27 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v27;
    operator delete(v27);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  uint64_t v28 = __p[2];
  double v29 = __p[3];
  memset(__p, 0, 24);
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v29;
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 40);
    long long v32 = *(void **)(a1 + 32);
    if (v31 != v30)
    {
      uint64_t v33 = *(void *)(a1 + 40);
      do
      {
        std::string::pointer v35 = *(void **)(v33 - 32);
        v33 -= 32;
        std::string::size_type v34 = v35;
        if (v35)
        {
          *(void *)(v31 - 24) = v34;
          operator delete(v34);
        }
        uint64_t v31 = v33;
      }
      while (v33 != v30);
      long long v32 = *(void **)v17;
    }
    *(void *)(a1 + 40) = v30;
    operator delete(v32);
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v60;
  *(void *)(a1 + 48) = v61;
  v60[1] = 0;
  uint64_t v61 = 0;
  v60[0] = 0;
  uint64_t v36 = *(void *)(a1 + 56);
  if (v36)
  {
    uint64_t v37 = *(void *)(a1 + 64);
    uint64_t v38 = *(void **)(a1 + 56);
    if (v37 != v36)
    {
      uint64_t v39 = *(void *)(a1 + 64);
      do
      {
        uint64_t v41 = *(void **)(v39 - 40);
        v39 -= 40;
        uint64_t v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 32) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      uint64_t v38 = *(void **)v18;
    }
    *(void *)(a1 + 64) = v36;
    operator delete(v38);
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v62;
  *(void *)(a1 + 72) = v63;
  v62[1] = 0;
  uint64_t v63 = 0;
  v62[0] = 0;
  *(_DWORD *)(a1 + 152) = sub_D4D6DC(a1);
  uint64_t v42 = *(void **)(a1 + 192);
  HIBYTE(v65) = 12;
  strcpy((char *)v64, "max_distance");
  uint64_t v43 = sub_561B0(v42, (uint64_t)v64);
  *(void *)(a1 + 136) = sub_A2D5F4(v43);
  if (SHIBYTE(v65) < 0) {
    operator delete((void *)v64[0]);
  }
  int v44 = (char *)v62[0];
  if (v62[0])
  {
    int64_t v45 = v62[1];
    uint64_t v46 = v62[0];
    if (v62[1] != v62[0])
    {
      uint64_t v47 = (char *)v62[1];
      do
      {
        int v49 = (void *)*((void *)v47 - 5);
        v47 -= 40;
        char v48 = v49;
        if (v49)
        {
          *(v45 - 4) = v48;
          operator delete(v48);
        }
        int64_t v45 = v47;
      }
      while (v47 != v44);
      uint64_t v46 = v62[0];
    }
    v62[1] = v44;
    operator delete(v46);
  }
  __n128 v50 = (char *)v60[0];
  if (v60[0])
  {
    uint64_t v51 = v60[1];
    uint64_t v52 = v60[0];
    if (v60[1] != v60[0])
    {
      std::string v53 = (char *)v60[1];
      do
      {
        int v55 = (void *)*((void *)v53 - 4);
        v53 -= 32;
        long long v54 = v55;
        if (v55)
        {
          *(v51 - 3) = v54;
          operator delete(v54);
        }
        uint64_t v51 = v53;
      }
      while (v53 != v50);
      uint64_t v52 = v60[0];
    }
    v60[1] = v50;
    operator delete(v52);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_D84550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_CF7EAC((uint64_t)&__p);
  sub_591CA4(v16);
  sub_C64510(v15);
  uint64_t v18 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v18;
    operator delete(v18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D84618@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "WalkingCustomRouteSelectionModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v9 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v9, a1);
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v9, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v8 = 4;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_CF9664((uint64_t *)(a2 + 24), "Routes", &v8, a1 + 1);
  }
  else
  {
    sub_CF9834(a2 + 40, v6, "Routes", &v8, a1 + 1);
    uint64_t result = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D84730(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D84744(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D84774(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void *sub_D84788(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    unint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[5];
  if (v5)
  {
    uint64_t v6 = a1[6];
    long long v7 = (void *)a1[5];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      long long v7 = (void *)a1[5];
    }
    a1[6] = v5;
    operator delete(v7);
  }
  return a1;
}

_DWORD *sub_D84844(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B91A0;
  strcpy((char *)v14, "WalkingCustomRouteSelection");
  __n128 __p = 0;
  std::string::value_type v12 = 0;
  uint64_t v6 = sub_374CDC(a3, (uint64_t)&v14, (uint64_t *)&__p);
  sub_D84970(a1, a2, a3, v6);
  long long v7 = (void **)__p;
  if (__p)
  {
    char v8 = v12;
    char v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      char v9 = __p;
    }
    std::string::value_type v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  return a1;
}

void sub_D8494C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_D84970(_DWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  __n128 __p = operator new(0x28uLL);
  long long v11 = xmmword_20B8FD0;
  strcpy((char *)__p, "max_length_in_unsupported_regions_cm");
  int v8 = sub_31AC04(a4, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *a1 = v8;
  sub_D84B28((uint64_t)(a1 + 2), a2, a3);
  sub_D84E84((uint64_t)(a1 + 16), a2, a3);
  return a1;
}

void sub_D84A3C(_Unwind_Exception *a1)
{
  sub_D84A6C(v1);
  _Unwind_Resume(a1);
}

void sub_D84A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D84A6C(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    unint64_t v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v6 = a1[2];
    long long v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      long long v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_D84B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = (void **)(a1 + 8);
  long long v7 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v25 = operator new(0x20uLL);
  long long v26 = xmmword_20B91B0;
  strcpy((char *)v25, "CustomRouteRequestValidation");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v28 = 0;
  int v8 = sub_374CDC(a3, (uint64_t)&v25, (uint64_t *)__p);
  sub_54214((uint64_t)v29, (uint64_t)v8);
  char v9 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v10 = (void **)__p[1];
    long long v11 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      long long v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25);
  }
  sub_3CB5E0(v29, (uint64_t)&v25);
  *(unsigned char *)a1 = sub_29D62C(&v25, (uint64_t)&xmmword_25E7180);
  sub_5C308(&v25, (uint64_t)&qword_25E71E0, (uint64_t)__p);
  std::string::value_type v12 = (void **)*v6;
  if (*v6)
  {
    uint64_t v13 = *(void ***)(a1 + 16);
    uint64_t v14 = *v6;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = *v6;
    }
    *(void *)(a1 + 16) = v12;
    operator delete(v14);
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(void *)(a1 + 24) = v28;
  sub_5C308(&v25, (uint64_t)&qword_25E71F8, (uint64_t)__p);
  long long v15 = (void **)*v7;
  if (*v7)
  {
    uint64_t v16 = *(void ***)(a1 + 40);
    uint64_t v17 = *v7;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      uint64_t v17 = *v7;
    }
    *(void *)(a1 + 40) = v15;
    operator delete(v17);
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
  *(void *)(a1 + 48) = v28;
  *(unsigned char *)(a1 + 1) = sub_DB71DC(a2);
  *(unsigned char *)(a1 + 2) = sub_DB7034(a2) == 8;
  uint64_t v18 = (void **)*((void *)&v26 + 1);
  if (*((void *)&v26 + 1))
  {
    do
    {
      uint64_t v23 = (void **)*v18;
      sub_55198((uint64_t)(v18 + 5));
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v23;
    }
    while (v23);
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = v30;
  if (v30)
  {
    do
    {
      uint64_t v24 = (void **)*v20;
      sub_55198((uint64_t)(v20 + 5));
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      uint64_t v20 = v24;
    }
    while (v24);
  }
  __int16 v21 = v29[0];
  v29[0] = 0;
  if (v21) {
    operator delete(v21);
  }
  return a1;
}

void sub_D84DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_5450C((uint64_t)va);
  sub_5450C((uint64_t)va1);
  sub_1A668(v3);
  sub_1A668(v2);
  _Unwind_Resume(a1);
}

void sub_D84E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_1A668(&a18);
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(v19);
    sub_1A668(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD84E38);
}

uint64_t sub_D84E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  sub_DDC564(a2, a3, v34);
  __n128 __p = operator new(0x28uLL);
  *(_OWORD *)uint64_t v31 = xmmword_20B9390;
  strcpy((char *)__p, "validate_change_anchors_requests");
  uint64_t v7 = (void *)sub_560F4(v34, (uint64_t)&__p);
  sub_D8CBA8(&v33, v7);
  if (SHIBYTE(v31[1]) < 0) {
    operator delete(__p);
  }
  v28.n128_u64[0] = 0;
  v28.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)&__p, &v28);
  sub_DDDA70((uint64_t)&v28, a2, v33, (uint64_t)&__p);
  *(unsigned char *)a1 = sub_51D60((unsigned __int8 *)&v28);
  uint64_t v24 = 0;
  v25[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v25[1] = xmmword_20B91A0;
  strcpy(v25[0], "WalkingCustomRouteSelection");
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v8 = sub_374CDC(a3, (uint64_t)v25, (uint64_t *)&v22);
  sub_54214((uint64_t)v26, (uint64_t)v8);
  uint64_t v9 = (void **)v22;
  if (v22)
  {
    uint64_t v10 = v23;
    uint64_t v11 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v22;
    }
    uint64_t v23 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  HIBYTE(v25[2]) = 18;
  strcpy((char *)v25, "max_route_distance");
  sub_D85214(v26, (uint64_t)v25, v6);
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  uint64_t v12 = v27;
  if (v27)
  {
    do
    {
      uint64_t v17 = (void **)*v12;
      sub_55198((uint64_t)(v12 + 5));
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v17;
    }
    while (v17);
  }
  uint64_t v13 = v26[0];
  v26[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  if (v29 < 0) {
    operator delete((void *)v28.n128_u64[1]);
  }
  uint64_t v14 = (void **)v31[1];
  if (v31[1])
  {
    long long v15 = v32;
    uint64_t v16 = v31[1];
    if (v32 != v31[1])
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v31[1];
    }
    long long v32 = v14;
    operator delete(v16);
  }
  uint64_t v18 = v35;
  if (v35)
  {
    do
    {
      __int16 v21 = (void **)*v18;
      sub_55198((uint64_t)(v18 + 5));
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v21;
    }
    while (v21);
  }
  uint64_t v19 = (void *)v34[0];
  v34[0] = 0;
  if (v19) {
    operator delete(v19);
  }
  return a1;
}

void sub_D8514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a20);
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_C7E3C8((uint64_t)&a33);
  sub_5450C(v33 - 88);
  _Unwind_Resume(a1);
}

void sub_D851F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    sub_5450C(v32 - 88);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD851E0);
}

void sub_D85214(void *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = sub_58070(a1, a2);
  if (v4 && !*((_DWORD *)v4 + 12))
  {
    uint64_t v7 = v4[5];
    if (*(char *)(v7 + 23) < 0)
    {
      sub_4200(__p, *(void **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v7;
      uint64_t v10 = *(void *)(v7 + 16);
      *(_OWORD *)__n128 __p = v8;
    }
  }
  else
  {
    __p[0] = 0;
    HIBYTE(v10) = 0;
  }
  uint64_t v5 = __p[1];
  char v6 = HIBYTE(v10);
  if (v10 >= 0) {
    uint64_t v5 = (void *)HIBYTE(v10);
  }
  if (v5)
  {
    *a3 = sub_A2D5F4((uint64_t)__p);
    char v6 = HIBYTE(v10);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_D852C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D852E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = **(unsigned __int8 **)(a1 + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  __n128 __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_D6EBF4(a2, v2, v3, v4, v5, v6, v7, (uint64_t *)&v11, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_D8535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_D85398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_4445E8(a1 + 72, *a7, a7[1], 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 5));
  *(_WORD *)(a1 + 96) = 0;
  sub_485C30(a8, a1 + 104);
  *(void *)(a1 + 136) = a8;
  *(void *)(a1 + 144) = sub_4877D8(a8);
  *(void *)(a1 + 152) = v10;
  sub_DBBED8(*(void *)(a1 + 16), a1 + 160);
  *(void *)(a1 + 264) = -1;
  *(_DWORD *)(a1 + 272) = 0x7FFFFFFF;
  *(void *)(a1 + 280) = -1;
  *(void *)(a1 + 288) = -1;
  *(void *)(a1 + 296) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = -1935635296;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 327) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 364) = 100;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 576) = xmmword_20B8E30;
  *(void *)(a1 + 592) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 624) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  return a1;
}

void sub_D854DC(_Unwind_Exception *a1)
{
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D854F0(_Unwind_Exception *a1)
{
  sub_485FC0(v2);
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D8550C(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t a5, _OWORD *a6, uint64_t *a7, uint64_t *a8)
{
  int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v54 = *a7;
  int v55 = 0;
  long long v15 = (long long *)sub_377D04(a5);
  char v67 = 1;
  sub_29E004((char *)__dst, v15);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)&v45);
  std::string::size_type v34 = a6;
  uint64_t v16 = sub_37B3A8(a5);
  uint64_t v17 = *(void *)v16;
  LODWORD(a6) = *(_DWORD *)(v16 + 8);
  sub_4F29BC((uint64_t)v58);
  uint64_t v60 = 0;
  long long v59 = 0u;
  char v18 = sub_DB7034(a2);
  char v19 = sub_D70510(a2, a4, a3, a5);
  sub_DBBB30(a2, (uint64_t)&v44);
  uint64_t v41 = 0;
  uint64_t v42 = sub_DBC410(a2);
  int v43 = v20;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = *a8;
  LOBYTE(a8) = sub_DB7530(a2);
  *(_OWORD *)__n128 __p = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  uint64_t v21 = sub_DC6EB0(a2);
  uint64_t v22 = a1;
  sub_D7067C(a1, (uint64_t)a3, a4, a5, v34, (uint64_t)&v55, &v54, &v45, v17, (int)a6, (uint64_t)v58, v18, v19, &v44, &v42, (uint64_t)&v39, &v38, (char)a8, (uint64_t *)__p,
    v21);
  uint64_t v23 = (void **)v36;
  if ((void)v36)
  {
    do
    {
      __n128 v28 = (void **)*v23;
      sub_55198((uint64_t)(v23 + 5));
      if (*((char *)v23 + 39) < 0) {
        operator delete(v23[2]);
      }
      operator delete(v23);
      uint64_t v23 = v28;
    }
    while (v28);
  }
  uint64_t v24 = __p[0];
  __p[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  uint64_t v25 = (void **)v39;
  if (v39)
  {
    long long v26 = v40;
    uint64_t v27 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v26 - 1) < 0) {
          operator delete(*(v26 - 3));
        }
        v26 -= 3;
      }
      while (v26 != v25);
      uint64_t v27 = v39;
    }
    uint64_t v40 = v25;
    operator delete(v27);
  }
  uint64_t v29 = v59;
  if ((void)v59)
  {
    uint64_t v30 = *((void *)&v59 + 1);
    uint64_t v31 = (void *)v59;
    if (*((void *)&v59 + 1) != (void)v59)
    {
      do
        uint64_t v30 = sub_3A6B94(v30 - 1120);
      while (v30 != v29);
      uint64_t v31 = (void *)v59;
    }
    *((void *)&v59 + 1) = v29;
    operator delete(v31);
  }
  sub_4F2BD0(v58);
  if (v53 < 0) {
    operator delete(v52);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    int v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v67)
  {
    if (v66 < 0)
    {
      operator delete(v65);
      if ((v64 & 0x80000000) == 0)
      {
LABEL_31:
        if ((v62 & 0x80000000) == 0) {
          goto LABEL_32;
        }
LABEL_37:
        operator delete(__dst[0]);
        uint64_t v32 = v55;
        if (!v55) {
          return v22;
        }
        goto LABEL_33;
      }
    }
    else if ((v64 & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete(v63);
    if (v62 < 0) {
      goto LABEL_37;
    }
  }
LABEL_32:
  uint64_t v32 = v55;
  if (v55)
  {
LABEL_33:
    int v56 = v32;
    operator delete(v32);
  }
  return v22;
}

void sub_D85844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60)
{
  sub_1A668(&a28);
  sub_C940D0((uint64_t)&a60);
  sub_CF1EE4((uint64_t)&a34);
  sub_CF1F54(v60 - 176);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_D858BC()
{
  byte_25E70D7 = 1;
  word_25E70C0 = 65;
  byte_25E70EF = 1;
  word_25E70D8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E7210 = 0u;
  *(_OWORD *)&qword_25E7220 = 0u;
  dword_25E7230 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E7210, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E7210, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E7210, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E7210, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E7107 = 8;
  strcpy((char *)&qword_25E70F0, "any_mode");
  byte_25E711F = 7;
  strcpy((char *)&dword_25E7108, "cycling");
  byte_25E7137 = 7;
  strcpy((char *)&dword_25E7120, "driving");
  byte_25E714F = 7;
  strcpy((char *)&dword_25E7138, "walking");
  qword_25E7158 = 0;
  qword_25E7160 = 0;
  qword_25E7150 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E7150 = (uint64_t)v0;
  qword_25E7158 = (uint64_t)(v0 + 9);
  qword_25E7160 = (uint64_t)(v0 + 9);
  qword_25E7168 = 0;
  qword_25E7170 = 0;
  qword_25E7178 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E7178 = (uint64_t)(v1 + 9);
  qword_25E7168 = (uint64_t)v1;
  qword_25E7170 = (uint64_t)(v1 + 9);
  byte_25E7197 = 21;
  strcpy((char *)&xmmword_25E7180, "enable_coverage_check");
  byte_25E71AF = 14;
  strcpy((char *)&qword_25E7198, "default_region");
  byte_25E71C7 = 17;
  strcpy((char *)&xmmword_25E71B0, "supported_regions");
  byte_25E71DF = 17;
  strcpy(byte_25E71C8, "preflight_regions");
  qword_25E71E0 = (uint64_t)operator new(0x19uLL);
  unk_25E71E8 = xmmword_20B9250;
  strcpy((char *)qword_25E71E0, "supported_country_codes");
  uint64_t result = (char *)operator new(0x19uLL);
  qword_25E71F8 = (uint64_t)result;
  unk_25E7200 = xmmword_20B9250;
  strcpy(result, "preflight_country_codes");
  return result;
}

void sub_D85C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (qword_25E7220) {
    sub_20B0738((void **)qword_25E7220);
  }
  uint64_t v39 = (void *)xmmword_25E7210;
  *(void *)&xmmword_25E7210 = 0;
  if (v39)
  {
    operator delete(v39);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a17 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D85D20()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  v105 = (void *)v1;
  uint64_t v2 = *(void *)sub_37D0C0(v1);
  sub_725D0((uint64_t)v135);
  char v134 = 16;
  sub_D53E44(16, (uint64_t)v0, (uint64_t)v105);
  *(void *)v274 = 0;
  *(void *)&v274[8] = &off_2439090;
  sub_3E7814(&v130, (__n128 *)v274);
  unsigned __int8 v131 = 16;
  uint64_t v132 = v2;
  int v133 = 0;
  sub_DC5C6C((uint64_t)v0);
  v233[128] = 0;
  v233[264] = 0;
  long long v244 = 0u;
  long long v245 = 0u;
  long long v246 = 0u;
  *(void *)((char *)v243 + 5) = 0;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  long long v238 = 0u;
  long long v239 = 0u;
  long long v240 = 0u;
  long long v241 = 0u;
  int v242 = 0;
  v243[0] = 0;
  uint64_t v247 = 0x3FF0000000000000;
  uint64_t v250 = 0;
  uint64_t v248 = 0;
  uint64_t v249 = 0;
  char v251 = 5;
  long long v252 = 0u;
  long long v253 = 0u;
  long long v254 = 0u;
  int v255 = 0x7FFFFFFF;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  long long v256 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  memset(v259, 0, sizeof(v259));
  uint64_t v262 = -1;
  int v263 = 0x7FFFFFFF;
  uint64_t v264 = 0;
  uint64_t v265 = -1;
  int v266 = -1;
  char v267 = 0;
  char v232 = 0;
  unsigned __int8 v227 = 0;
  v128[1] = 0;
  v128[0] = 0;
  uint64_t v129 = 0;
  v126[1] = 0;
  v126[0] = 0;
  uint64_t v127 = 0;
  v124[1] = 0;
  v124[0] = 0;
  uint64_t v125 = 0;
  v122[1] = 0;
  v122[0] = 0;
  uint64_t v123 = 0;
  sub_11B16A4((uint64_t)v118, 0, 0);
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  sub_162C594(v116, 0, 0);
  sub_162C594(&v117, 0, 0);
  *(void *)v274 = v0;
  *(void *)&v274[8] = &v134;
  *(void *)&v274[16] = v105;
  v275[0] = v233;
  HIBYTE(v271[0]) = 0;
  LOBYTE(__p[0]) = 0;
  sub_CF27C0((uint64_t)&v130, (uint64_t)v274, (uint64_t)__p, (uint64_t)v113);
  if (SHIBYTE(v271[0]) < 0)
  {
    operator delete(__p[0]);
    if (v113[0]) {
      goto LABEL_13;
    }
  }
  else if (v113[0])
  {
    goto LABEL_13;
  }
  uint64_t v3 = (void **)v114;
  if (v114)
  {
    char v4 = v115;
    int v5 = v114;
    if (v115 != v114)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v3);
      int v5 = v114;
    }
    char v115 = v3;
    operator delete(v5);
  }
LABEL_13:
  *((unsigned char *)&v138.__r_.__value_.__s + 23) = 0;
  v138.__r_.__value_.__s.__data_[0] = 0;
  ++v133;
  v200[0] = 1;
  bzero(&v201, 0x2D0uLL);
  uint64_t v204 = 0x3FF0000000000000;
  uint64_t v205 = 0;
  uint64_t v207 = 0;
  uint64_t v206 = 0;
  char v208 = 5;
  long long v209 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  int v212 = 0x7FFFFFFF;
  uint64_t v218 = 0;
  uint64_t v217 = 0;
  long long v213 = 0u;
  long long v214 = 0u;
  long long v215 = 0u;
  memset(v216, 0, sizeof(v216));
  uint64_t v219 = -1;
  int v220 = 0x7FFFFFFF;
  uint64_t v221 = -1;
  int v222 = -1;
  uint64_t v224 = 0;
  if ((void (***)(std::error_category *__hidden))v130.n128_u64[1] != &off_2439090 || v130.n128_u32[0])
  {
    sub_3E7814((__n128 *)__p, &v130);
    v274[0] = 0;
    *(_OWORD *)&v274[8] = *(_OWORD *)__p;
    *(_OWORD *)v275 = *(_OWORD *)v271;
    v276 = __dst;
    v271[0] = 0;
    v271[1] = 0;
    long long __dst = 0;
    int v277 = (int)v273;
    sub_D8BC08((uint64_t)v200, (uint64_t)v274);
    if (v274[0])
    {
      sub_4BCC2C((uint64_t)&v274[8]);
    }
    else
    {
      uint64_t v6 = (void **)v275[0];
      if (v275[0])
      {
        char v7 = (void **)v275[1];
        int v8 = v275[0];
        if (v275[1] != v275[0])
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 4;
          }
          while (v7 != v6);
          int v8 = v275[0];
        }
        v275[1] = v6;
        operator delete(v8);
      }
    }
    uint64_t v12 = (void **)v271[0];
    if (v271[0])
    {
      char v13 = (void **)v271[1];
      int v14 = v271[0];
      if (v271[1] != v271[0])
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 4;
        }
        while (v13 != v12);
        int v14 = v271[0];
      }
      v271[1] = v12;
      operator delete(v14);
    }
    int v15 = 0;
    if (v200[0]) {
      goto LABEL_83;
    }
  }
  else
  {
    sub_CC40FC((uint64_t)__p, (uint64_t)v0, (uint64_t)v105, 2);
    sub_CC3B0C((uint64_t)__p, (uint64_t)v274);
    sub_D8BC08((uint64_t)v200, (uint64_t)v274);
    if (v274[0])
    {
      sub_4BCC2C((uint64_t)&v274[8]);
    }
    else
    {
      uint64_t v9 = (void **)v275[0];
      if (v275[0])
      {
        char v10 = (void **)v275[1];
        int v11 = v275[0];
        if (v275[1] != v275[0])
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 4;
          }
          while (v10 != v9);
          int v11 = v275[0];
        }
        v275[1] = v9;
        operator delete(v11);
      }
    }
    int v19 = v131;
    if (v200[0])
    {
      sub_CC4100(&v224, (uint64_t)v274);
      sub_717B8(v19, (uint64_t)&v138, (uint64_t)v274, v132);
      int v20 = (void **)v275[0];
      if (v275[0])
      {
        uint64_t v21 = (void **)v275[1];
        uint64_t v22 = v275[0];
        if (v275[1] != v275[0])
        {
          do
          {
            if (*((char *)v21 - 25) < 0) {
              operator delete(*(v21 - 6));
            }
            v21 -= 6;
          }
          while (v21 != v20);
          uint64_t v22 = v275[0];
        }
        v275[1] = v20;
        operator delete(v22);
      }
      if ((v274[23] & 0x80000000) != 0) {
        operator delete(*(void **)v274);
      }
      sub_CA0FF4((uint64_t)v233, (uint64_t)&v201);
      int v15 = v223;
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v138.__r_.__value_.__l.__data_);
        if (v200[0]) {
          goto LABEL_83;
        }
      }
      else if (v200[0])
      {
LABEL_83:
        sub_4BCC2C((uint64_t)&v201);
        goto LABEL_84;
      }
    }
    else
    {
      sub_71424(v131, &v201, v132);
      v274[23] = 18;
      strcpy(v274, "InternalError[All]");
      sub_710A8(v131, (uint64_t)v274, v132);
      if ((v274[23] & 0x80000000) != 0) {
        operator delete(*(void **)v274);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v274);
        sub_70954(v131, (uint64_t)&v106, v23);
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v24 = &v106;
        }
        else {
          uint64_t v24 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v106.__r_.__value_.__l.__size_;
        }
        long long v26 = sub_188FC78(v274, (uint64_t)v24, size);
        sub_188FC78(v26, (uint64_t)" failed in step ", 16);
        uint64_t v27 = (void *)std::ostream::operator<<();
        __n128 v28 = sub_188FC78(v27, (uint64_t)" (", 2);
        uint64_t v29 = (char *)operator new(0x20uLL);
        strcpy(v29, "SessionStateParserModule");
        uint64_t v30 = sub_188FC78(v28, (uint64_t)v29, 24);
        uint64_t v31 = sub_188FC78(v30, (uint64_t)") with error: ", 14);
        sub_CF2D60(v31, (uint64_t)&v201);
        operator delete(v29);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v106, 3u);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (v279 < 0) {
          operator delete(v278);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10((uint64_t)&v130, (uint64_t)&v201);
      int v15 = 0;
      if (v200[0]) {
        goto LABEL_83;
      }
    }
  }
  uint64_t v16 = (void **)v202;
  if (v202)
  {
    uint64_t v17 = v203;
    char v18 = v202;
    if (v203 != v202)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 4;
      }
      while (v17 != v16);
      char v18 = v202;
    }
    v203 = v16;
    operator delete(v18);
  }
LABEL_84:
  char v137 = 0;
  LOBYTE(v136) = 0;
  ++v133;
  v150[0] = 1;
  bzero(&v151, 0x360uLL);
  sub_47E0E4(&v151);
  char v159 = 0;
  char v160 = 0;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  *(void *)((char *)v170 + 5) = 0;
  v170[0] = 0;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  int v155 = -1;
  int v169 = 0;
  uint64_t v174 = 0x3FF0000000000000;
  uint64_t v176 = 0;
  uint64_t v175 = 0;
  uint64_t v177 = 0;
  char v178 = 5;
  long long v180 = 0u;
  long long v181 = 0u;
  long long v179 = 0u;
  int v182 = 0x7FFFFFFF;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  long long v185 = 0u;
  memset(v186, 0, sizeof(v186));
  long long v183 = 0u;
  long long v184 = 0u;
  uint64_t v189 = -1;
  int v190 = 0x7FFFFFFF;
  uint64_t v191 = 0;
  uint64_t v192 = -1;
  int v193 = -1;
  char v194 = 0;
  char v197 = 0;
  uint64_t v198 = 0;
  __int16 v199 = 0;
  if ((void (***)(std::error_category *__hidden))v130.n128_u64[1] != &off_2439090 || v130.n128_u32[0])
  {
    sub_3E7814((__n128 *)__p, &v130);
    v274[0] = 0;
    *(_OWORD *)&v274[8] = *(_OWORD *)__p;
    *(_OWORD *)v275 = *(_OWORD *)v271;
    v276 = __dst;
    v271[0] = 0;
    v271[1] = 0;
    long long __dst = 0;
    int v277 = (int)v273;
    sub_CA5C50((uint64_t)v150, v274);
    if (v274[0])
    {
      sub_CA701C((uint64_t)&v274[8]);
    }
    else
    {
      uint64_t v32 = (void **)v275[0];
      if (v275[0])
      {
        uint64_t v33 = (void **)v275[1];
        std::string::size_type v34 = v275[0];
        if (v275[1] != v275[0])
        {
          do
          {
            if (*((char *)v33 - 1) < 0) {
              operator delete(*(v33 - 3));
            }
            v33 -= 4;
          }
          while (v33 != v32);
          std::string::size_type v34 = v275[0];
        }
        v275[1] = v32;
        operator delete(v34);
      }
    }
    uint64_t v38 = (void **)v271[0];
    if (v271[0])
    {
      uint64_t v39 = (void **)v271[1];
      uint64_t v40 = v271[0];
      if (v271[1] != v271[0])
      {
        do
        {
          if (*((char *)v39 - 1) < 0) {
            operator delete(*(v39 - 3));
          }
          v39 -= 4;
        }
        while (v39 != v38);
        uint64_t v40 = v271[0];
      }
      v271[1] = v38;
      operator delete(v40);
    }
    if (v137 < 0)
    {
LABEL_171:
      operator delete(v136);
      if (!v150[0])
      {
LABEL_172:
        char v66 = (void **)v152;
        if (v152)
        {
          char v67 = (void **)v153;
          uint64_t v68 = v152;
          if ((void *)v153 != v152)
          {
            do
            {
              if (*((char *)v67 - 1) < 0) {
                operator delete(*(v67 - 3));
              }
              v67 -= 4;
            }
            while (v67 != v66);
            uint64_t v68 = v152;
          }
          *(void *)&long long v153 = v66;
          operator delete(v68);
        }
LABEL_180:
        *((unsigned char *)&v138.__r_.__value_.__s + 23) = 0;
        v138.__r_.__value_.__s.__data_[0] = 0;
        ++v133;
        v109[0] = 1;
        memset(v110, 0, sizeof(v110));
        __int16 v111 = 1;
        char v112 = 0;
        if ((void (***)(std::error_category *__hidden))v130.n128_u64[1] == &off_2439090 && !v130.n128_u32[0])
        {
          __p[0] = v0;
          LODWORD(__p[1]) = 0;
          v271[0] = v105;
          LOBYTE(v271[1]) = sub_DC5CDC(__p);
          LOBYTE(v273) = 0;
          sub_C9CA80((uint64_t)__p, (uint64_t)v274);
          sub_C9D2A4((uint64_t)v109, (uint64_t)v274);
          if (v274[0])
          {
            uint64_t v69 = *(void *)&v274[8];
            if (*(void *)&v274[8])
            {
              uint64_t v70 = *(void *)&v274[16];
              uint64_t v71 = *(void **)&v274[8];
              if (*(void *)&v274[16] != *(void *)&v274[8])
              {
                do
                {
                  v70 -= 376;
                  sub_402C7C(v70);
                }
                while (v70 != v69);
                uint64_t v71 = *(void **)&v274[8];
              }
              *(void *)&v274[16] = v69;
LABEL_228:
              operator delete(v71);
            }
          }
          else
          {
            char v77 = (void **)v275[0];
            if (v275[0])
            {
              std::string v78 = (void **)v275[1];
              uint64_t v71 = v275[0];
              if (v275[1] != v275[0])
              {
                do
                {
                  if (*((char *)v78 - 1) < 0) {
                    operator delete(*(v78 - 3));
                  }
                  v78 -= 4;
                }
                while (v78 != v77);
                uint64_t v71 = v275[0];
              }
              v275[1] = v77;
              goto LABEL_228;
            }
          }
          int v84 = v131;
          if (v109[0])
          {
            sub_CF2E84((uint64_t)&v110[24], (uint64_t)v274);
            sub_717B8(v84, (uint64_t)&v138, (uint64_t)v274, v132);
            char v85 = (void **)v275[0];
            if (v275[0])
            {
              double v86 = (void **)v275[1];
              v87 = v275[0];
              if (v275[1] != v275[0])
              {
                do
                {
                  if (*((char *)v86 - 25) < 0) {
                    operator delete(*(v86 - 6));
                  }
                  v86 -= 6;
                }
                while (v86 != v85);
                v87 = v275[0];
              }
              v275[1] = v85;
              operator delete(v87);
            }
            if ((v274[23] & 0x80000000) != 0) {
              operator delete(*(void **)v274);
            }
            v99 = v128[0];
            if (v128[0])
            {
              uint64_t v100 = v128[1];
              std::string v101 = v128[0];
              if (v128[1] != v128[0])
              {
                do
                  uint64_t v100 = (void *)sub_402C7C((uint64_t)v100 - 376);
                while (v100 != v99);
                std::string v101 = v128[0];
              }
              v128[1] = v99;
              operator delete(v101);
            }
            *(_OWORD *)long long v128 = *(_OWORD *)v110;
            uint64_t v129 = *(void *)&v110[16];
            memset(v110, 0, 24);
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_212;
            }
            goto LABEL_254;
          }
          sub_71424(v131, (const std::error_condition *)v110, v132);
          v274[23] = 18;
          strcpy(v274, "InternalError[All]");
          sub_710A8(v131, (uint64_t)v274, v132);
          if ((v274[23] & 0x80000000) != 0) {
            operator delete(*(void **)v274);
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v274);
            sub_70954(v131, (uint64_t)&v106, v88);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v89 = &v106;
            }
            else {
              uint64_t v89 = (std::string *)v106.__r_.__value_.__r.__words[0];
            }
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v90 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v90 = v106.__r_.__value_.__l.__size_;
            }
            double v91 = sub_188FC78(v274, (uint64_t)v89, v90);
            sub_188FC78(v91, (uint64_t)" failed in step ", 16);
            long long v92 = (void *)std::ostream::operator<<();
            long long v93 = sub_188FC78(v92, (uint64_t)" (", 2);
            long long v94 = (char *)operator new(0x28uLL);
            strcpy(v94, "InputPointTransformerModuleOutput");
            v95 = sub_188FC78(v93, (uint64_t)v94, 33);
            uint64_t v96 = sub_188FC78(v95, (uint64_t)") with error: ", 14);
            sub_CF2D60(v96, (uint64_t)v110);
            operator delete(v94);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v106.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v106, 3u);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v106.__r_.__value_.__l.__data_);
            }
            if (v279 < 0) {
              operator delete(v278);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_3E7A10((uint64_t)&v130, (uint64_t)v110);
          goto LABEL_253;
        }
        sub_3E7814((__n128 *)__p, &v130);
        v274[0] = 0;
        *(_OWORD *)&v274[8] = *(_OWORD *)__p;
        *(_OWORD *)v275 = *(_OWORD *)v271;
        v276 = __dst;
        v271[0] = 0;
        v271[1] = 0;
        long long __dst = 0;
        int v277 = (int)v273;
        sub_C9D2A4((uint64_t)v109, (uint64_t)v274);
        if (v274[0])
        {
          uint64_t v72 = *(void *)&v274[8];
          if (!*(void *)&v274[8]) {
            goto LABEL_209;
          }
          uint64_t v73 = *(void *)&v274[16];
          char v74 = *(void **)&v274[8];
          if (*(void *)&v274[16] != *(void *)&v274[8])
          {
            do
            {
              v73 -= 376;
              sub_402C7C(v73);
            }
            while (v73 != v72);
            char v74 = *(void **)&v274[8];
          }
          *(void *)&v274[16] = v72;
        }
        else
        {
          long long v75 = (void **)v275[0];
          if (!v275[0]) {
            goto LABEL_209;
          }
          char v76 = (void **)v275[1];
          char v74 = v275[0];
          if (v275[1] != v275[0])
          {
            do
            {
              if (*((char *)v76 - 1) < 0) {
                operator delete(*(v76 - 3));
              }
              v76 -= 4;
            }
            while (v76 != v75);
            char v74 = v275[0];
          }
          v275[1] = v75;
        }
        operator delete(v74);
LABEL_209:
        std::string v79 = (void **)v271[0];
        if (v271[0])
        {
          char v80 = (void **)v271[1];
          if (v271[1] == v271[0])
          {
            v271[1] = v271[0];
            operator delete(v271[0]);
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_212;
            }
          }
          else
          {
            do
            {
              if (*((char *)v80 - 1) < 0) {
                operator delete(*(v80 - 3));
              }
              v80 -= 4;
            }
            while (v80 != v79);
            v271[1] = v79;
            operator delete(v271[0]);
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_212:
              operator delete(v138.__r_.__value_.__l.__data_);
              if (!v109[0])
              {
LABEL_213:
                uint64_t v81 = *(void *)&v110[16];
                if (!*(void *)&v110[16]) {
                  goto LABEL_261;
                }
                uint64_t v82 = *(void *)&v110[24];
                v83 = *(void **)&v110[16];
                if (*(void *)&v110[24] != *(void *)&v110[16])
                {
                  do
                  {
                    if (*(char *)(v82 - 1) < 0) {
                      operator delete(*(void **)(v82 - 24));
                    }
                    v82 -= 32;
                  }
                  while (v82 != v81);
                  v83 = *(void **)&v110[16];
                }
                *(void *)&v110[24] = v81;
                goto LABEL_260;
              }
LABEL_255:
              uint64_t v97 = *(void *)v110;
              if (!*(void *)v110) {
                goto LABEL_261;
              }
              uint64_t v98 = *(void *)&v110[8];
              v83 = *(void **)v110;
              if (*(void *)&v110[8] != *(void *)v110)
              {
                do
                {
                  v98 -= 376;
                  sub_402C7C(v98);
                }
                while (v98 != v97);
                v83 = *(void **)v110;
              }
              *(void *)&v110[8] = v97;
LABEL_260:
              operator delete(v83);
LABEL_261:
              HIBYTE(v146) = 0;
              LOBYTE(v145[0]) = 0;
              ++v133;
              char v107 = 1;
              sub_CF6378((uint64_t)&v108);
            }
          }
LABEL_254:
          if (!v109[0]) {
            goto LABEL_213;
          }
          goto LABEL_255;
        }
LABEL_253:
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_212;
        }
        goto LABEL_254;
      }
LABEL_116:
      sub_CA701C((uint64_t)&v151);
      goto LABEL_180;
    }
LABEL_115:
    if (!v150[0]) {
      goto LABEL_172;
    }
    goto LABEL_116;
  }
  sub_CF5040(&v106, (void ***)v0, (uint64_t)v233, v105, v15);
  sub_CA3808((unsigned __int8 *)&v106, (uint64_t)v274);
  sub_CA5C50((uint64_t)v150, v274);
  if (v274[0])
  {
    sub_CA701C((uint64_t)&v274[8]);
  }
  else
  {
    std::string::pointer v35 = (void **)v275[0];
    if (v275[0])
    {
      long long v36 = (void **)v275[1];
      int v37 = v275[0];
      if (v275[1] != v275[0])
      {
        do
        {
          if (*((char *)v36 - 1) < 0) {
            operator delete(*(v36 - 3));
          }
          v36 -= 4;
        }
        while (v36 != v35);
        int v37 = v275[0];
      }
      v275[1] = v35;
      operator delete(v37);
    }
  }
  if (!v150[0]) {
    goto LABEL_170;
  }
  int v41 = v131;
  sub_CF4E10((uint64_t)&v198, (uint64_t)v274);
  sub_717B8(v41, (uint64_t)&v136, (uint64_t)v274, v132);
  uint64_t v42 = (void **)v275[0];
  if (v275[0])
  {
    int v43 = (void **)v275[1];
    uint64_t v44 = v275[0];
    if (v275[1] != v275[0])
    {
      do
      {
        if (*((char *)v43 - 25) < 0) {
          operator delete(*(v43 - 6));
        }
        v43 -= 6;
      }
      while (v43 != v42);
      uint64_t v44 = v275[0];
    }
    v275[1] = v42;
    operator delete(v44);
  }
  if ((v274[23] & 0x80000000) != 0) {
    operator delete(*(void **)v274);
  }
  if (v232)
  {
    sub_D8BD18((uint64_t)v228, (uint64_t)&v151);
    int v46 = v227;
    if (v197) {
      goto LABEL_132;
    }
  }
  else
  {
    *(_OWORD *)v228 = v151;
    int v45 = v152;
    long long v152 = 0;
    long long v151 = 0uLL;
    long long v230 = v153;
    v229 = v45;
    uint64_t v231 = v154;
    long long v153 = 0uLL;
    uint64_t v154 = 0;
    char v232 = 1;
    int v46 = v227;
    if (v197)
    {
LABEL_132:
      if (v46)
      {
        if (v225[0])
        {
          v225[1] = v225[0];
          operator delete(v225[0]);
          int v103 = v227;
        }
        else
        {
          int v103 = 1;
        }
        *(_OWORD *)v225 = v195;
        uint64_t v226 = v196;
        uint64_t v196 = 0;
        long long v195 = 0uLL;
        if (!v103) {
          goto LABEL_170;
        }
      }
      else
      {
        *(_OWORD *)v225 = v195;
        uint64_t v226 = v196;
        uint64_t v196 = 0;
        long long v195 = 0uLL;
        unsigned __int8 v227 = 1;
      }
      sub_42469C((uint64_t)v274, v105);
      if (!v232)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unint64_t v47 = sub_EA9088(v228);
      sub_D8BDC8(__p, v47);
      *(_OWORD *)uint64_t v148 = *(_OWORD *)__p;
      uint64_t v149 = v271[0];
      if (!v232 || !v227)
      {
        v102 = __cxa_allocate_exception(8uLL);
        void *v102 = &off_2439078;
      }
      sub_470AD8((uint64_t *)__p, (uint64_t *)v228, (uint64_t **)v148, (uint64_t)v225);
      sub_427A28((uint64_t)v274, __p, 0, 1, v145);
      int v48 = v155;
      sub_188B428((uint64_t)v145, (uint64_t)v268);
      sub_28C774(v147, (uint64_t)v268, 1uLL);
      sub_49194C((uint64_t)&v138, v48, (long long **)v147);
      sub_4860A4((uint64_t)v233, (uint64_t)&v138);
      if (v143)
      {
        long long v144 = v143;
        operator delete(v143);
      }
      int v49 = v141;
      if (v141)
      {
        uint64_t v50 = (uint64_t)v142;
        uint64_t v51 = v141;
        if (v142 != v141)
        {
          do
            uint64_t v50 = sub_489CF4(v50 - 144);
          while ((void *)v50 != v49);
          uint64_t v51 = v141;
        }
        v142 = v49;
        operator delete(v51);
      }
      if (v139)
      {
        long long v140 = v139;
        operator delete(v139);
      }
      uint64_t v52 = (void **)v147[0];
      if (v147[0])
      {
        char v53 = (void **)v147[1];
        uint64_t v54 = v147[0];
        if (v147[1] != v147[0])
        {
          do
          {
            if (*((char *)v53 - 1) < 0) {
              operator delete(*(v53 - 3));
            }
            v53 -= 3;
          }
          while (v53 != v52);
          uint64_t v54 = v147[0];
        }
        v147[1] = v52;
        operator delete(v54);
      }
      if (v269 < 0) {
        operator delete(v268[0]);
      }
      sub_1116458(v145);
      sub_3AFFFC((uint64_t)__p);
      int v55 = v148[0];
      if (v148[0])
      {
        int v56 = v148[1];
        uint64_t v57 = v148[0];
        if (v148[1] != v148[0])
        {
          do
            int v56 = sub_3B0290(v56 - 36);
          while (v56 != v55);
          uint64_t v57 = v148[0];
        }
        v148[1] = v55;
        operator delete(v57);
      }
      sub_423E54((uint64_t)&v282);
      *(void *)&v274[16] = off_24397A0;
      char v58 = &v281;
      do
      {
        long long v59 = v58 - 6;
        uint64_t v60 = *(v58 - 3);
        if (v60)
        {
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          uint64_t v63 = v58 - 5;
          do
          {
            if ((*(char *)(*v59 + v62) & 0x80000000) == 0)
            {
              uint64_t v64 = *v63 + v61;
              uint64_t v65 = *(void **)(v64 + 8);
              if (v65)
              {
                *(void *)(v64 + 16) = v65;
                operator delete(v65);
                uint64_t v60 = *(v58 - 3);
              }
            }
            ++v62;
            v61 += 32;
          }
          while (v62 != v60);
          operator delete((void *)*(v58 - 6));
          *(v58 - 6) = (uint64_t)&unk_20E1710;
          *(v58 - 1) = 0;
          *(v58 - 4) = 0;
          *(v58 - 3) = 0;
          uint64_t *v63 = 0;
        }
        v58 -= 6;
      }
      while (v59 != &v280);
LABEL_170:
      sub_CF5B18(&v106);
      if (v137 < 0) {
        goto LABEL_171;
      }
      goto LABEL_115;
    }
  }
  if (v46)
  {
    if (v225[0])
    {
      v225[1] = v225[0];
      operator delete(v225[0]);
    }
    unsigned __int8 v227 = 0;
  }
  goto LABEL_170;
}

void sub_D8B008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  STACK[0x2020] = v21;
  if (a20 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0xF97]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0xF80]);
      if ((*(char *)(v20 + 23) & 0x80000000) == 0)
      {
LABEL_9:
        sub_A3A4((uint64_t)&STACK[0x2000]);
        sub_162D64C(a12);
        sub_162D64C(&STACK[0x908]);
        sub_C8423C(&STACK[0xD68]);
        sub_574530((void **)&STACK[0xE80]);
        sub_C66564((void ***)&STACK[0xEA0]);
        sub_C7E6AC((void **)&STACK[0xEC0]);
        sub_401F88((void **)&STACK[0xEE0]);
        if (LOBYTE(STACK[0x1CD8]))
        {
          __n128 v23 = (void *)STACK[0x1CC0];
          if (STACK[0x1CC0])
          {
            STACK[0x1CC8] = (unint64_t)v23;
            operator delete(v23);
          }
        }
        sub_D8BB84((uint64_t)&STACK[0x1CE0]);
        sub_4BCC2C((uint64_t)&STACK[0x1D20]);
        sub_C7E3C8((uint64_t)&STACK[0xEF8]);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete((void *)STACK[0x25C0]);
      goto LABEL_9;
    }
  }
  else if (SLOBYTE(STACK[0xF97]) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

uint64_t sub_D8BB84(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      operator delete(*(void **)(a1 + 24));
      uint64_t v2 = *(void **)a1;
      if (!*(void *)a1)
      {
LABEL_10:
        *(unsigned char *)(a1 + 48) = 0;
        return a1;
      }
    }
    else
    {
      uint64_t v2 = *(void **)a1;
      if (!*(void *)a1) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = *(void *)(a1 + 8);
    char v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4451C0(v3 - 480);
      while ((void *)v3 != v2);
      char v4 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v2;
    operator delete(v4);
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_D8BC08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_CA0FF4(a1 + 8, a2 + 8);
LABEL_17:
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      goto LABEL_18;
    }
    sub_4BCC2C(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void **)(a1 + 24);
        if (v5 != v4)
        {
          do
          {
            if (*(char *)(v5 - 1) < 0) {
              operator delete(*(void **)(v5 - 24));
            }
            v5 -= 32;
          }
          while (v5 != v4);
          uint64_t v6 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v4;
        operator delete(v6);
      }
      sub_CA624C(a1 + 8, (long long *)(a2 + 8));
      goto LABEL_17;
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_18:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

__n128 sub_D8BD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_4451C0(v5 - 480);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v7);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(__n128 *)char v7 = result;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void *sub_D8BDC8(void *a1, unint64_t a2)
{
  uint64_t v8 = 0x8000000080000000;
  int v9 = 0x7FFFFFFF;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(void *)&long long v3 = 0x8000000080000000;
  *((void *)&v3 + 1) = 0x8000000080000000;
  long long v24 = 0u;
  long long v25 = v3;
  long long v26 = v3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xE38E38E38E38E4) {
      sub_2E00();
    }
    uint64_t v4 = 288 * a2;
    uint64_t v5 = (char *)operator new(288 * a2);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = &v5[v4];
    a1[2] = &v5[v4];
    do
    {
      sub_3B1F44((uint64_t)v5, &v8);
      v5 += 288;
      v4 -= 288;
    }
    while (v4);
    a1[1] = v6;
  }
  sub_3B0290(&v8);
  return a1;
}

void sub_D8BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D8BEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_3B0290(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D8BEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIBYTE(v14[2]) = 21;
  strcpy((char *)v14, "WalkingRouteSelection");
  __n128 __p = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = sub_374CDC(a3, (uint64_t)v14, (uint64_t *)&__p);
  sub_D8C000(a1, a2, a3, v6);
  char v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    uint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    long long v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_D8BFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D8C000(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __p[23] = 17;
  strcpy(__p, "return_all_routes");
  BOOL v8 = sub_29D62C(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v8;
  __p[23] = 13;
  strcpy(__p, "filter_config");
  uint64_t v9 = sub_561B0(a4, (uint64_t)__p);
  int v10 = sub_D4E564(v9);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 4) = v10;
  __p[23] = 14;
  strcpy(__p, "max_num_routes");
  unsigned int v11 = sub_31AC04(a4, (uint64_t)__p);
  unsigned int v12 = sub_DC68CC(a2);
  if (v12 < v11) {
    unsigned int v11 = v12;
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 8) = v11;
  __p[23] = 20;
  strcpy(__p, "max_relative_sharing");
  double v13 = sub_5C7E8(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 16) = v13;
  __p[23] = 20;
  strcpy(__p, "min_line_distance_cm");
  int v14 = sub_31AC04(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 24) = v14;
  strcpy(__p, "score_threshold_factor");
  __p[23] = 22;
  double v15 = sub_5C7E8(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 32) = v15;
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91C0;
  strcpy(*(char **)__p, "score_threshold_additive");
  int v16 = sub_31AC04(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 40) = v16;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v17 = sub_DB6BEC(a2);
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 200) = v17;
  *(_WORD *)(a1 + 208) = v18;
  *(unsigned char *)(a1 + 210) = v19;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  __p[23] = 16;
  strcpy(__p, "route_difference");
  long long v20 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_D4E82C((double *)(a1 + 264), v20);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__n128 __p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "score_threshold_factors");
  sub_D4EAD4(a4, (uint64_t)__p, (void *)(a1 + 216));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__n128 __p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "score_threshold_offsets");
  sub_D4EAD4(a4, (uint64_t)__p, (void *)(a1 + 240));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 14;
  strcpy(__p, "RouteElevation");
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  long long v21 = sub_374CDC(a3, (uint64_t)__p, (uint64_t *)&v39);
  sub_3CB5E0(v21, (uint64_t)v42);
  long long v22 = (void **)v39;
  if (v39)
  {
    long long v23 = v40;
    long long v24 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      long long v24 = v39;
    }
    uint64_t v40 = v22;
    operator delete(v24);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 10;
  strcpy(__p, "min_run_cm");
  *(_DWORD *)(a1 + 44) = sub_31AC04(v42, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_468024((uint64_t)__p, v42);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)__p;
  sub_468394((uint64_t)__p, v42);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)__p;
  sub_46858C((uint64_t)__p, v42);
  long long v25 = v36;
  *(_OWORD *)(a1 + 144) = v35;
  *(_OWORD *)(a1 + 160) = v25;
  *(_OWORD *)(a1 + 176) = v37;
  *(void *)(a1 + 192) = v38;
  long long v26 = *(_OWORD *)&__p[16];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 96) = v26;
  long long v27 = v34;
  *(_OWORD *)(a1 + 112) = v33;
  *(_OWORD *)(a1 + 128) = v27;
  __n128 v28 = v43;
  if (v43)
  {
    do
    {
      uint64_t v29 = (void *)*v28;
      sub_550B8((uint64_t)(v28 + 2));
      operator delete(v28);
      __n128 v28 = v29;
    }
    while (v29);
  }
  uint64_t v30 = (void *)v42[0];
  v42[0] = 0;
  if (v30) {
    operator delete(v30);
  }
  return a1;
}

void sub_D8C52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_553C0(v33 - 120);
  long long v35 = *v32;
  if (*v32)
  {
    *(void *)(v30 + 248) = v35;
    operator delete(v35);
    long long v36 = *v31;
    if (!*v31) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v36 = *v31;
    if (!*v31) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  *(void *)(v30 + 224) = v36;
  operator delete(v36);
  goto LABEL_6;
}

char *sub_D8C61C(char **a1, uint64_t a2, char *a3, double *a4, int *a5)
{
  uint64_t v6 = *a1;
  char v7 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v6) >> 4) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - v6) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v14 = 0x555555555555555;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0x555555555555555) {
      sub_188D718();
    }
    double v15 = (char *)operator new(48 * v14);
  }
  else
  {
    double v15 = 0;
  }
  int v16 = &v15[48 * v8];
  long long v27 = &v15[48 * v14];
  char v17 = *a3;
  double v18 = *a4;
  int v19 = *a5;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v16, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v6 = *a1;
    char v7 = a1[1];
    int v16 = &v15[48 * v8];
  }
  else
  {
    *(_OWORD *)int v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
  }
  long long v20 = &v15[48 * v8];
  v20[24] = v17;
  *((void *)v20 + 4) = (uint64_t)v18;
  *((_DWORD *)v20 + 10) = v19;
  long long v21 = v20 + 48;
  if (v7 == v6)
  {
    long long v24 = v6;
  }
  else
  {
    do
    {
      long long v22 = *((_OWORD *)v7 - 3);
      *((void *)v16 - 4) = *((void *)v7 - 4);
      *((_OWORD *)v16 - 3) = v22;
      *((void *)v7 - 5) = 0;
      *((void *)v7 - 4) = 0;
      *((void *)v7 - 6) = 0;
      long long v23 = *(_OWORD *)(v7 - 24);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v7 - 2);
      *(_OWORD *)(v16 - 24) = v23;
      v16 -= 48;
      v7 -= 48;
    }
    while (v7 != v6);
    long long v24 = *a1;
    uint64_t v6 = a1[1];
  }
  *a1 = v16;
  a1[1] = v21;
  a1[2] = v27;
  if (v6 != v24)
  {
    long long v25 = (void **)(v6 - 48);
    do
    {
      if (*((char *)v25 + 23) < 0) {
        operator delete(*v25);
      }
      v25 -= 6;
    }
    while (v25 + 6 != (void **)v24);
    uint64_t v6 = v24;
  }
  if (v6) {
    operator delete(v6);
  }
  return v21;
}

void sub_D8C82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_D8C840()
{
  byte_25E724F = 1;
  word_25E7238 = 65;
  byte_25E7267 = 1;
  word_25E7250 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E72F8 = 0u;
  *(_OWORD *)&qword_25E7308 = 0u;
  dword_25E7318 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E72F8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E72F8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E72F8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E72F8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E727F = 8;
  strcpy((char *)&qword_25E7268, "any_mode");
  byte_25E7297 = 7;
  strcpy((char *)&dword_25E7280, "cycling");
  byte_25E72AF = 7;
  strcpy((char *)&dword_25E7298, "driving");
  byte_25E72C7 = 7;
  strcpy((char *)&dword_25E72B0, "walking");
  qword_25E72D0 = 0;
  qword_25E72D8 = 0;
  qword_25E72C8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E72C8 = (uint64_t)v0;
  qword_25E72D0 = (uint64_t)(v0 + 9);
  qword_25E72D8 = (uint64_t)(v0 + 9);
  qword_25E72E0 = 0;
  qword_25E72E8 = 0;
  unk_25E72F0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E72E8 = (uint64_t)(v1 + 9);
  unk_25E72F0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E72E0 = (uint64_t)v1;
  return result;
}

void sub_D8CB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E7308) {
    sub_20B077C((void **)qword_25E7308);
  }
  long long v37 = (void *)xmmword_25E72F8;
  *(void *)&xmmword_25E72F8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

unsigned char *sub_D8CBA8(unsigned char *a1, void *a2)
{
  char v8 = 6;
  strcpy((char *)__p, "limits");
  uint64_t v3 = sub_561B0(a2, (uint64_t)__p);
  char v4 = sub_DDCC58(v3);
  char v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    *a1 = v5;
  }
  else
  {
    *a1 = v4;
  }
  return a1;
}

void sub_D8CC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8CC54(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  *(void *)double v15 = 0;
  *(void *)&v15[8] = &off_2439090;
  sub_3E7814(a4, (__n128 *)v15);
  if (sub_DBD438(a1))
  {
    sub_DDDA70((uint64_t)v20, a1, *a3, (uint64_t)a4);
    if (sub_51D60(v20))
    {
      *(void *)double v15 = operator new(0x20uLL);
      *(_OWORD *)&v15[8] = xmmword_20B91A0;
      strcpy(*(char **)v15, "WalkingCustomRouteSelection");
      __n128 __p = 0;
      double v18 = 0;
      uint64_t v19 = 0;
      char v8 = sub_374CDC(a2, (uint64_t)v15, (uint64_t *)&__p);
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        char v10 = v18;
        int v11 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 3;
          }
          while (v10 != v9);
          int v11 = __p;
        }
        double v18 = v9;
        operator delete(v11);
      }
      if ((v15[23] & 0x80000000) != 0) {
        operator delete(*(void **)v15);
      }
      __n128 __p = (void *)0x7FFFFFFFFFFFFFFFLL;
      v15[23] = 18;
      strcpy(v15, "max_route_distance");
      sub_D85214(v8, (uint64_t)v15, (uint64_t *)&__p);
      if ((v15[23] & 0x80000000) != 0) {
        operator delete(*(void **)v15);
      }
      sub_DD9F78(0, a1 + 96, 0, (uint64_t)__p, (__n128 *)v15);
      sub_DDE010((uint64_t)v20, (uint64_t)v15);
      uint64_t v12 = *(void *)&v15[16];
      if (*(void *)&v15[16])
      {
        uint64_t v13 = v16;
        int v14 = *(void **)&v15[16];
        if (v16 != *(void *)&v15[16])
        {
          do
          {
            if (*(char *)(v13 - 1) < 0) {
              operator delete(*(void **)(v13 - 24));
            }
            v13 -= 32;
          }
          while (v13 != v12);
          int v14 = *(void **)&v15[16];
        }
        uint64_t v16 = v12;
        operator delete(v14);
      }
    }
    if (v22 < 0) {
      operator delete(v21);
    }
  }
}

void sub_D8CE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_C7E3C8((uint64_t)&a9);
  if ((a27 & 0x80000000) == 0)
  {
    sub_C7E3C8(v27);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_C7E3C8(v27);
  _Unwind_Resume(a1);
}

void sub_D8CEF0(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D8CF04(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D8CF18()
{
  unk_25E7337 = 16641;
  word_25E7320 = 65;
  byte_25E734F = 1;
  byte_25E7339 = 0;
}

unsigned char *sub_D8CF40(unsigned char *a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "validate_reroute_request_consistency");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  strcpy((char *)__p, "validate_session_state");
  HIBYTE(__p[2]) = 22;
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  return a1;
}

void sub_D8D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_D8D040(unsigned char *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "validate_route_attributes");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "validate_waypoints");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  strcpy((char *)__p, "validate_user_location");
  HIBYTE(__p[2]) = 22;
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  char v9 = sub_DDCC58(v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "validate_client_capabilities");
  uint64_t v10 = sub_561B0(a2, (uint64_t)__p);
  char v11 = sub_DDCC58(v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v11;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "validate_request_options");
  uint64_t v12 = sub_561B0(a2, (uint64_t)__p);
  char v13 = sub_DDCC58(v12);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[4] = v13;
  sub_D8CF40(a1 + 5, a2);
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "validate_ev_requests");
  int v14 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_D94D7C(a1 + 7, v14);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "validate_change_anchors_requests");
  double v15 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_D8CBA8(a1 + 11, v15);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "validate_mpr_requests");
  uint64_t v16 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_DAAB08(a1 + 12, v16);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_D8D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8D36C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, &__p);
  sub_DDC564((uint64_t)a1, (uint64_t)a2, &__p);
  sub_D8D040(v44, &__p);
  uint64_t v8 = (char *)v42;
  if (v42)
  {
    do
    {
      char v13 = *(char **)v8;
      sub_57AC8((uint64_t *)v8 + 5);
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      uint64_t v8 = v13;
    }
    while (v13);
  }
  char v9 = (void *)__p.n128_u64[0];
  __p.n128_u64[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  sub_DD4CD0((uint64_t)a1, (uint64_t)a2, &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  uint64_t v10 = (void **)v42;
  if (v42)
  {
    char v11 = v43;
    uint64_t v12 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 4;
      }
      while (v11 != v10);
      uint64_t v12 = v42;
    }
    int v43 = v10;
    operator delete(v12);
  }
  sub_DD8FF0((uint64_t)a1, (uint64_t)a2, v44[4], &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  int v14 = (void **)v42;
  if (v42)
  {
    double v15 = v43;
    uint64_t v16 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v42;
    }
    int v43 = v14;
    operator delete(v16);
  }
  sub_DD988C((uint64_t)a1, v44[0], &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  char v17 = (void **)v42;
  if (v42)
  {
    double v18 = v43;
    uint64_t v19 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      uint64_t v19 = v42;
    }
    int v43 = v17;
    operator delete(v19);
  }
  sub_DE0588((uint64_t)a1, v44[1], &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  long long v20 = (void **)v42;
  if (v42)
  {
    long long v21 = v43;
    char v22 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      char v22 = v42;
    }
    int v43 = v20;
    operator delete(v22);
  }
  sub_DDA51C((uint64_t)a1, v44[2], (uint64_t)&__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  long long v23 = (void **)v42;
  if (v42)
  {
    long long v24 = v43;
    long long v25 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 4;
      }
      while (v24 != v23);
      long long v25 = v42;
    }
    int v43 = v23;
    operator delete(v25);
  }
  sub_DD6618(a1, v44[3], &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  long long v26 = (void **)v42;
  if (v42)
  {
    uint64_t v27 = v43;
    __n128 v28 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 4;
      }
      while (v27 != v26);
      __n128 v28 = v42;
    }
    int v43 = v26;
    operator delete(v28);
  }
  sub_D90D90((uint64_t)a1, a2, v46, &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  uint64_t v29 = (void **)v42;
  if (v42)
  {
    uint64_t v30 = v43;
    uint64_t v31 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v30 - 1) < 0) {
          operator delete(*(v30 - 3));
        }
        v30 -= 4;
      }
      while (v30 != v29);
      uint64_t v31 = v42;
    }
    int v43 = v29;
    operator delete(v31);
  }
  sub_D8CC54((uint64_t)a1, (uint64_t)a2, &v47, &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  uint64_t v32 = (void **)v42;
  if (v42)
  {
    uint64_t v33 = v43;
    long long v34 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 4;
      }
      while (v33 != v32);
      long long v34 = v42;
    }
    int v43 = v32;
    operator delete(v34);
  }
  sub_DAAB0C((uint64_t)a1, (uint64_t)a2, v48, &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  long long v35 = (void **)v42;
  if (v42)
  {
    long long v36 = v43;
    long long v37 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v36 - 1) < 0) {
          operator delete(*(v36 - 3));
        }
        v36 -= 4;
      }
      while (v36 != v35);
      long long v37 = v42;
    }
    int v43 = v35;
    operator delete(v37);
  }
  sub_DDA784((uint64_t)a1, a3, a2, v45, &__p);
  sub_3E7A68((uint64_t)a4, (uint64_t)&__p);
  uint64_t v38 = (void **)v42;
  if (v42)
  {
    uint64_t v39 = v43;
    uint64_t v40 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v39 - 1) < 0) {
          operator delete(*(v39 - 3));
        }
        v39 -= 4;
      }
      while (v39 != v38);
      uint64_t v40 = v42;
    }
    int v43 = v38;
    operator delete(v40);
  }
}

void sub_D8D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_C7E3C8((uint64_t)&a9);
  sub_C7E3C8(v9);
  _Unwind_Resume(a1);
}

void sub_D8D930(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D8D944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_5450C((uint64_t)&a9);
  sub_C7E3C8(v9);
  _Unwind_Resume(a1);
}

void sub_D8D960(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D8D974()
{
  unk_25E7367 = 16641;
  word_25E7350 = 65;
  byte_25E737F = 1;
  byte_25E7369 = 0;
}

unsigned char *sub_D8D99C(unsigned char *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "validate_request_options");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "validate_route_attributes");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "validate_client_capabilities");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  char v9 = sub_DDCC58(v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v9;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "validate_waypoints");
  uint64_t v10 = sub_561B0(a2, (uint64_t)__p);
  char v11 = sub_DDCC58(v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v11;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "validate_ev_requests");
  uint64_t v12 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_D94D7C(a1 + 4, v12);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "validate_mpr_requests");
  char v13 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_DAAB08(a1 + 8, v13);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_D8DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8DC18(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  sub_DDCB0C(a1, (uint64_t)a2, &__p);
  sub_D8D99C(v36, &__p);
  uint64_t v6 = (char *)v40;
  if (v40)
  {
    do
    {
      char v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  char v7 = (void *)__p.n128_u64[0];
  __p.n128_u64[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &__p);
  char v42 = 0;
  char v43 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  *(void *)((char *)v53 + 5) = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  int v52 = 0;
  v53[0] = 0;
  uint64_t v57 = 0x3FF0000000000000;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  char v61 = 5;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  int v65 = 0x7FFFFFFF;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  memset(v69, 0, sizeof(v69));
  uint64_t v72 = -1;
  int v73 = 0x7FFFFFFF;
  uint64_t v74 = 0;
  uint64_t v75 = -1;
  int v76 = -1;
  char v77 = 0;
  sub_DD59BC((_DWORD *)a1, &v33);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v33);
  uint64_t v8 = (void **)v34;
  if (v34)
  {
    char v9 = v35;
    uint64_t v10 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      uint64_t v10 = v34;
    }
    long long v35 = v8;
    operator delete(v10);
  }
  sub_4BCC2C((uint64_t)&__p);
  sub_DDDD38((uint64_t)&v33, a1, v36[1], (uint64_t)a3);
  if (sub_51D60((unsigned __int8 *)&v33))
  {
    uint64_t v12 = *(void *)(a1 + 272) ? *(uint64_t (****)())(a1 + 272) : &off_2535C20;
    if (!sub_DD84B8((uint64_t)v12))
    {
      uint64_t v31 = operator new(0x28uLL);
      long long v32 = xmmword_20B93A0;
      strcpy((char *)v31, "Request has inconsistent timepoint.");
      sub_3E7914(4, (long long *)&v31, (uint64_t)&__p);
      sub_DDE010((uint64_t)&v33, (uint64_t)&__p);
      char v13 = (void **)v40;
      if (v40)
      {
        int v14 = v41;
        double v15 = v40;
        if (v41 != v40)
        {
          do
          {
            if (*((char *)v14 - 1) < 0) {
              operator delete(*(v14 - 3));
            }
            v14 -= 4;
          }
          while (v14 != v13);
          double v15 = v40;
        }
        uint64_t v41 = v13;
        operator delete(v15);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(v31);
      }
    }
  }
  sub_D93E70(a1, a2, v37, &__p);
  sub_3E7A68((uint64_t)a3, (uint64_t)&__p);
  uint64_t v16 = (void **)v40;
  if (v40)
  {
    char v17 = v41;
    double v18 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 4;
      }
      while (v17 != v16);
      double v18 = v40;
    }
    uint64_t v41 = v16;
    operator delete(v18);
  }
  sub_DD7D10(a1, (uint64_t)a2, v36[0], &__p);
  sub_3E7A68((uint64_t)a3, (uint64_t)&__p);
  uint64_t v19 = (void **)v40;
  if (v40)
  {
    long long v20 = v41;
    long long v21 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 4;
      }
      while (v20 != v19);
      long long v21 = v40;
    }
    uint64_t v41 = v19;
    operator delete(v21);
  }
  sub_DD70F4((void *)a1, v36[2], &__p);
  sub_3E7A68((uint64_t)a3, (uint64_t)&__p);
  char v22 = (void **)v40;
  if (v40)
  {
    long long v23 = v41;
    long long v24 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 4;
      }
      while (v23 != v22);
      long long v24 = v40;
    }
    uint64_t v41 = v22;
    operator delete(v24);
  }
  sub_DE1B58(a1, v36[3], &__p);
  sub_3E7A68((uint64_t)a3, (uint64_t)&__p);
  long long v25 = (void **)v40;
  if (v40)
  {
    long long v26 = v41;
    uint64_t v27 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v26 - 1) < 0) {
          operator delete(*(v26 - 3));
        }
        v26 -= 4;
      }
      while (v26 != v25);
      uint64_t v27 = v40;
    }
    uint64_t v41 = v25;
    operator delete(v27);
  }
  sub_DAC148(a1, (uint64_t)a2, v38, &__p);
  sub_3E7A68((uint64_t)a3, (uint64_t)&__p);
  __n128 v28 = (void **)v40;
  if (v40)
  {
    uint64_t v29 = v41;
    uint64_t v30 = v40;
    if (v41 != v40)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 4;
      }
      while (v29 != v28);
      uint64_t v30 = v40;
    }
    uint64_t v41 = v28;
    operator delete(v30);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v33.n128_u64[1]);
  }
}

void sub_D8E10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_C7E3C8((uint64_t)&a27);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      sub_C7E3C8(v27);
      _Unwind_Resume(a1);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  sub_C7E3C8(v27);
  _Unwind_Resume(a1);
}

void sub_D8E26C()
{
  unk_25E7397 = 16641;
  word_25E7380 = 65;
  byte_25E73AF = 1;
  byte_25E7399 = 0;
}

unsigned char *sub_D8E294(unsigned char *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "validate_request_options");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "validate_route");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "validate_zilch");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  char v9 = sub_DDCC58(v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v9;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "validate_waypoint_route");
  uint64_t v10 = sub_561B0(a2, (uint64_t)__p);
  char v11 = sub_DDCC58(v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v11;
  strcpy((char *)__p, "validate_session_state");
  HIBYTE(__p[2]) = 22;
  uint64_t v12 = sub_561B0(a2, (uint64_t)__p);
  char v13 = sub_DDCC58(v12);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[4] = v13;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "validate_ev_requests");
  int v14 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_D94D7C(a1 + 5, v14);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "validate_mpr_requests");
  double v15 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_DAAB08(a1 + 9, v15);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "validate_path_legs");
  uint64_t v16 = sub_561B0(a2, (uint64_t)__p);
  char v17 = sub_DDCC58(v16);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[11] = v17;
  strcpy((char *)__p, "validate_user_location");
  HIBYTE(__p[2]) = 22;
  uint64_t v18 = sub_561B0(a2, (uint64_t)__p);
  char v19 = sub_DDCC58(v18);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[12] = v19;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "validate_client_capabilities");
  uint64_t v20 = sub_561B0(a2, (uint64_t)__p);
  char v21 = sub_DDCC58(v20);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[13] = v21;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "validate_waypoints");
  uint64_t v22 = sub_561B0(a2, (uint64_t)__p);
  char v23 = sub_DDCC58(v22);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[14] = v23;
  return a1;
}

void sub_D8E63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8E680(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (sub_51D60(a4))
  {
    uint64_t v8 = *(int *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = v9 ? v9 + 8 : 0;
    if (v8)
    {
      uint64_t v11 = 8 * v8;
      while (*(_DWORD *)(*(void *)v10 + 80))
      {
        v10 += 8;
        v11 -= 8;
        if (!v11) {
          return;
        }
      }
      if ((int)v8 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(unsigned int *)(a1 + 32);
        do
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8 * v12 + 8);
          if ((*(unsigned char *)(v14 + 40) & 2) != 0)
          {
            uint64_t v16 = sub_1115F80(v38, 0, 0);
            if (sub_1880FAC(v16, *(void *)(v14 + 464) & 0xFFFFFFFFFFFFFFFELL))
            {
              long long v37 = 0u;
              uint64_t v33 = 20000000;
              long long v35 = 0u;
              *(_OWORD *)&char v32[8] = 0u;
              *(void *)uint64_t v31 = 5000;
              __n128 __p = (void *)0x4039000000000000;
              *(_OWORD *)&v31[8] = xmmword_20E7C10;
              *(_OWORD *)long long v32 = xmmword_20E7C20;
              uint64_t v34 = 0x3FF199999999999ALL;
              *(void *)&long long v35 = 0x3E800002710;
              DWORD2(v35) = 10000;
              WORD6(v35) = 10;
              long long v36 = xmmword_20E7C00;
              *(void *)&long long v37 = 0x3FE6147AE147AE14;
              BYTE9(v37) = 0;
              sub_110B110((uint64_t)&__p, (uint64_t)v38);
              if (v39 >= 2
                && (uint64_t v17 = v40 + 8, *(_DWORD *)(*(void *)(v40 + 8) + 84) == 1)
                && *(_DWORD *)(*(void *)(v40 + 8 * (v39 - 1) + 8) + 84) == 1)
              {
                uint64_t v18 = 0;
                uint64_t v19 = 8 * v39;
                while (1)
                {
                  if (*(_DWORD *)(*(void *)v17 + 84) != 2)
                  {
                    BOOL v20 = v18 <= *(unsigned int *)(*(void *)v17 + 72);
                    uint64_t v18 = *(unsigned int *)(*(void *)v17 + 72);
                    if (!v20) {
                      break;
                    }
                  }
                  v17 += 8;
                  v19 -= 8;
                  if (!v19) {
                    goto LABEL_12;
                  }
                }
                __n128 __p = operator new(0x60uLL);
                *(_OWORD *)uint64_t v31 = xmmword_20EB660;
                strcpy((char *)__p, "Got a RoutingPathLeg with distance_from_start_cm fields that are not monotonously increasing.");
                sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
              }
              else
              {
                __n128 __p = operator new(0x40uLL);
                *(_OWORD *)uint64_t v31 = xmmword_20B9A30;
                strcpy((char *)__p, "ETARoute has path_leg without at least two support points.");
                sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
              }
            }
            else
            {
              __n128 __p = operator new(0x30uLL);
              *(_OWORD *)uint64_t v31 = xmmword_20B93D0;
              strcpy((char *)__p, "Could not parse the bytes path_leg field.");
              sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
            }
            if ((v31[15] & 0x80000000) != 0) {
              operator delete(__p);
            }
LABEL_12:
            sub_1116458(v38);
            goto LABEL_13;
          }
          if (*(_DWORD *)(a1 + 32) != 1 || v12 != *(_DWORD *)(a1 + 32) - 1)
          {
            __n128 __p = operator new(0x60uLL);
            *(_OWORD *)uint64_t v31 = xmmword_20F0550;
            strcpy((char *)__p, "ETARoute has no path leg populated but there are subsequent path legs left on the route.");
            sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
            goto LABEL_20;
          }
          uint64_t v21 = *a2;
          uint64_t v22 = a2[1];
          if (v21 == -1 && v22 == -1) {
            goto LABEL_13;
          }
          uint64_t v24 = *a3;
          uint64_t v25 = a3[1];
          if (__PAIR64__(v25, v24) == -1) {
            goto LABEL_13;
          }
          double v26 = sqrt((double)(unint64_t)((v21 - v24) * (v21 - v24) + (v22 - v25) * (v22 - v25))) / 100.0 * 100.0;
          if (v26 >= 0.0)
          {
            double v27 = v26;
            if (v26 >= 4.50359963e15) {
              goto LABEL_48;
            }
            uint64_t v28 = (uint64_t)(v26 + v26) + 1;
          }
          else
          {
            double v27 = v26;
            if (v26 <= -4.50359963e15) {
              goto LABEL_48;
            }
            uint64_t v28 = (uint64_t)(v26 + v26);
            if (v28 >= 1) {
              --v28;
            }
          }
          double v27 = (double)(v28 >> 1);
LABEL_48:
          if (v27 >= 9.22337204e18) {
            goto LABEL_58;
          }
          if (v26 >= 0.0)
          {
            if (v26 >= 4.50359963e15) {
              goto LABEL_57;
            }
            uint64_t v29 = (uint64_t)(v26 + v26) + 1;
          }
          else
          {
            if (v26 <= -4.50359963e15) {
              goto LABEL_57;
            }
            uint64_t v29 = (uint64_t)(v26 + v26);
            if (v29 >= 1) {
              --v29;
            }
          }
          double v26 = (double)(v29 >> 1);
LABEL_57:
          if ((uint64_t)v26 >= 50001)
          {
LABEL_58:
            __n128 __p = operator new(0x48uLL);
            *(_OWORD *)uint64_t v31 = xmmword_20B9A00;
            strcpy((char *)__p, "ETARoute has no path leg populated but user has not arrived yet.");
            sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
LABEL_20:
            if ((v31[15] & 0x80000000) != 0) {
              operator delete(__p);
            }
          }
LABEL_13:
          ++v12;
        }
        while (v12 != v13);
      }
    }
  }
}

void sub_D8EBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_1116458(v30 - 168);
  _Unwind_Resume(a1);
}

void sub_D8EC0C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (sub_51D60(a3))
  {
    if ((*(unsigned char *)(a1 + 40) & 1) == 0)
    {
      __n128 __p = operator new(0x20uLL);
      long long v22 = xmmword_20B9800;
      strcpy((char *)__p, "No ETARoute.routeID populated.");
      sub_DDE278((uint64_t)a3, 7, (long long *)&__p);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
  }
  if (sub_51D60(a4)
    && !*(_DWORD *)(a1 + 80)
    && (__n128 __p = operator new(0x28uLL),
        long long v22 = xmmword_20B9960,
        strcpy((char *)__p, "ETARoute has no zilch points populated."),
        sub_DDE278((uint64_t)a4, 7, (long long *)&__p),
        SHIBYTE(v22) < 0))
  {
    operator delete(__p);
    uint64_t v10 = *(int *)(a1 + 56);
    if (v10)
    {
LABEL_9:
      uint64_t v11 = *(void *)(a1 + 64);
      if (v11) {
        uint64_t v12 = (uint64_t *)(v11 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v10 = *(int *)(a1 + 56);
    if (v10) {
      goto LABEL_9;
    }
  }
  __n128 __p = operator new(0x20uLL);
  long long v22 = xmmword_20B91B0;
  strcpy((char *)__p, "No ETARoute.steps populated.");
  sub_DDE278(a2, 7, (long long *)&__p);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p);
    uint64_t v10 = *(int *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    if (v20) {
      uint64_t v12 = (uint64_t *)(v20 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    if (v10)
    {
LABEL_18:
      uint64_t v14 = &v12[v10];
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *v12++;
        sub_D8EED4(v16, a2, a4, a5);
        v15 += *(unsigned int *)(v16 + 84);
      }
      while (v12 != v14);
      BOOL v17 = v15 == 0;
      if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
        return;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v10 = *(int *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13) {
      uint64_t v12 = (uint64_t *)(v13 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    if (v10) {
      goto LABEL_18;
    }
  }
  BOOL v17 = 1;
  if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
    return;
  }
LABEL_21:
  if (v17)
  {
    int v18 = sub_DDE004((uint64_t)a5);
    if (v19 == &off_2439090 && !v18)
    {
      __n128 __p = operator new(0x58uLL);
      long long v22 = xmmword_20F0560;
      strcpy((char *)__p, "Total distance of all ETAStep.distance_cm fields is 0 for a non-degenerated path leg.");
      sub_DDE278((uint64_t)a5, 7, (long long *)&__p);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_D8EEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8EED4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v8 = *(_DWORD *)(a1 + 40);
  if ((v8 & 8) == 0)
  {
    __n128 __p = operator new(0x20uLL);
    long long v11 = xmmword_20B91B0;
    strcpy((char *)__p, "No ETAStep.stepID populated.");
    sub_DDE278(a2, 7, (long long *)&__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    int v8 = *(_DWORD *)(a1 + 40);
  }
  if ((v8 & 0x10) == 0
    && (__n128 __p = operator new(0x28uLL),
        long long v11 = xmmword_20B9280,
        strcpy((char *)__p, "No ETAStep.expectedTime populated."),
        sub_DDE278(a2, 7, (long long *)&__p),
        SHIBYTE(v11) < 0))
  {
    operator delete(__p);
    if (!sub_51D60(a4)) {
      goto LABEL_16;
    }
  }
  else if (!sub_51D60(a4))
  {
    goto LABEL_16;
  }
  int v9 = *(_DWORD *)(a1 + 40);
  if ((v9 & 0x40) == 0)
  {
    __n128 __p = operator new(0x40uLL);
    long long v11 = xmmword_20B9A30;
    strcpy((char *)__p, "No ETAStep.distance_cm populated when supporting path_leg.");
    sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    int v9 = *(_DWORD *)(a1 + 40);
  }
  if ((v9 & 0x80) != 0)
  {
    __n128 __p = operator new(0x28uLL);
    long long v11 = xmmword_20B9280;
    strcpy((char *)__p, "ETAStep.zilchpointindex populated.");
    sub_DDE278((uint64_t)a4, 7, (long long *)&__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
  }
LABEL_16:
  if (sub_51D60(a3) && (*(_DWORD *)(a1 + 88) & 0x80000000) != 0)
  {
    __n128 __p = operator new(0x40uLL);
    long long v11 = xmmword_20B98C0;
    strcpy((char *)__p, "Invalid ETAStep.zilchPointIndex when using Zilch points.");
    sub_DDE278((uint64_t)a3, 7, (long long *)&__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
  }
}

void sub_D8F128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8F154(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  if ((*(unsigned char *)(a1 + 16) & 4) == 0
    && (__n128 __p = operator new(0x38uLL),
        long long v18 = xmmword_20B8DF0,
        strcpy((char *)__p, "No ETATrafficUpdateWaypointRoute.identifier populated."),
        sub_DDE278(a4, 7, (long long *)&__p),
        SHIBYTE(v18) < 0))
  {
    operator delete(__p);
    if (*(_DWORD *)(a1 + 32)) {
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 32))
  {
    goto LABEL_7;
  }
  __n128 __p = operator new(0x38uLL);
  long long v18 = xmmword_20B99E0;
  strcpy((char *)__p, "No ETATrafficUpdateWaypointRoute.route_leg populated.");
  sub_DDE278(a4, 7, (long long *)&__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
LABEL_7:
  sub_D8E680(a1, a2, a3, a7);
  uint64_t v14 = *(unsigned int *)(a1 + 32);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v14;
    do
    {
      sub_D8EC0C(*(void *)(*(void *)(a1 + 40) + v15 + 8), a4, a5, a6, a7);
      v15 += 8;
    }
    while (v16 != v15);
  }
}

void sub_D8F2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D8F2F4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &__p);
  sub_DDC9EC(a1, (uint64_t)a2, &__p);
  sub_D8E294(v63, &__p);
  uint64_t v6 = v73;
  if (v73)
  {
    do
    {
      long long v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  char v7 = (void *)__p.n128_u64[0];
  __p.n128_u64[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  sub_DB8768(a1, (uint64_t)&__p);
  sub_DD556C(a1, (uint64_t)&__p, (uint64_t)a2, (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v8 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v9 = v68;
    uint64_t v10 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 32;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v8;
    operator delete(v10);
  }
  sub_DDE000((uint64_t)v60, a1, v65[3], (uint64_t)a3);
  if (sub_51D60(v60))
  {
    if ((*(unsigned char *)(a1 + 40) & 0x20) == 0)
    {
      long long v66 = operator new(0x30uLL);
      long long v67 = xmmword_20B93D0;
      strcpy((char *)v66, "Got an ETAURequest without user location.");
      sub_DDE278((uint64_t)v60, 2, (long long *)&v66);
      goto LABEL_29;
    }
    sub_DD8BF8(*(void *)(a1 + 280), (uint64_t)&v66);
    sub_DDE010((uint64_t)v60, (uint64_t)&v66);
    uint64_t v12 = *((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      uint64_t v13 = v68;
      uint64_t v14 = (void *)*((void *)&v67 + 1);
      if (v68 != *((void *)&v67 + 1))
      {
        do
        {
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
          v13 -= 32;
        }
        while (v13 != v12);
        uint64_t v14 = (void *)*((void *)&v67 + 1);
      }
      uint64_t v68 = v12;
      operator delete(v14);
    }
    int v15 = sub_DDE004((uint64_t)v60);
    if (v16 != &off_2439090 || v15)
    {
      long long v66 = operator new(0x28uLL);
      long long v67 = xmmword_20E12D0;
      strcpy((char *)v66, "ETAURequest has invalid user location.");
      sub_DDE278((uint64_t)v60, 2, (long long *)&v66);
LABEL_29:
      if (SHIBYTE(v67) < 0) {
        operator delete(v66);
      }
    }
  }
  sub_D93460(a1, a2, v64, (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v17 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v18 = v68;
    uint64_t v19 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 32;
      }
      while (v18 != v17);
      uint64_t v19 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v17;
    operator delete(v19);
  }
  sub_DD7568(a1, (uint64_t)a2, v63[0], (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v20 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v21 = v68;
    long long v22 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 32;
      }
      while (v21 != v20);
      long long v22 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v20;
    operator delete(v22);
  }
  sub_DD6C6C((void *)a1, v65[4], (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v23 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v24 = v68;
    uint64_t v25 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v24 - 1) < 0) {
          operator delete(*(void **)(v24 - 24));
        }
        v24 -= 32;
      }
      while (v24 != v23);
      uint64_t v25 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v23;
    operator delete(v25);
  }
  sub_DE1048(a1, v65[5], (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v26 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v27 = v68;
    uint64_t v28 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 32;
      }
      while (v27 != v26);
      uint64_t v28 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v26;
    operator delete(v28);
  }
  sub_DAB868(a1, v65, (__n128 *)&v66);
  sub_3E7A68((uint64_t)a3, (uint64_t)&v66);
  uint64_t v29 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v30 = v68;
    uint64_t v31 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v30 - 1) < 0) {
          operator delete(*(void **)(v30 - 24));
        }
        v30 -= 32;
      }
      while (v30 != v29);
      uint64_t v31 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v29;
    operator delete(v31);
  }
  unsigned int v32 = v63[4];
  long long v66 = 0;
  *(void *)&long long v67 = &off_2439090;
  sub_3E7814(&v57, (__n128 *)&v66);
  sub_DDE000((uint64_t)v69, a1, v32, (uint64_t)&v57);
  if ((sub_51D60(v69) & 1) == 0) {
    goto LABEL_95;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    long long v66 = operator new(0x38uLL);
    long long v67 = xmmword_20B99F0;
    strcpy((char *)v66, "Got an ETAURequest with no session_state populated.");
    sub_DDE278((uint64_t)v69, 6, (long long *)&v66);
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    uint64_t v33 = v66;
    goto LABEL_85;
  }
  v55[23] = 11;
  strcpy(v55, "ETAURequest");
  sub_DD6190(a1, (__n128 *)&v66);
  sub_DDE010((uint64_t)v69, (uint64_t)&v66);
  uint64_t v34 = *((void *)&v67 + 1);
  if (*((void *)&v67 + 1))
  {
    uint64_t v35 = v68;
    long long v36 = (void *)*((void *)&v67 + 1);
    if (v68 != *((void *)&v67 + 1))
    {
      do
      {
        if (*(char *)(v35 - 1) < 0) {
          operator delete(*(void **)(v35 - 24));
        }
        v35 -= 32;
      }
      while (v35 != v34);
      long long v36 = (void *)*((void *)&v67 + 1);
    }
    uint64_t v68 = v34;
    operator delete(v36);
  }
  if ((v55[23] & 0x80000000) != 0)
  {
    uint64_t v33 = *(void **)v55;
LABEL_85:
    operator delete(v33);
  }
LABEL_86:
  if (*(unsigned char *)(nullsub_1(&__p) + 128))
  {
    if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
    {
      uint64_t v37 = nullsub_1(&__p);
      if (!*(unsigned char *)(v37 + 128))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unsigned int v38 = sub_491B68(v37);
      int v39 = &off_2536C78;
      if (*(void *)(a1 + 336)) {
        int v39 = *(uint64_t (****)())(a1 + 336);
      }
      if (v38 < (unint64_t)*((int *)v39 + 8))
      {
        long long v66 = operator new(0x58uLL);
        long long v67 = xmmword_20E21D0;
        strcpy((char *)v66, "Got an ETAURequest with a WaypointRoute that has more legs than the session_state.");
        sub_DDE278((uint64_t)v69, 6, (long long *)&v66);
        goto LABEL_94;
      }
    }
LABEL_95:
    if ((v71 & 0x80000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  long long v66 = operator new(0x40uLL);
  long long v67 = xmmword_20B99C0;
  strcpy((char *)v66, "Got an ETAURequest with no user route data in session_state.");
  sub_DDE278((uint64_t)v69, 6, (long long *)&v66);
LABEL_94:
  if ((SHIBYTE(v67) & 0x80000000) == 0) {
    goto LABEL_95;
  }
  operator delete(v66);
  if (v71 < 0) {
LABEL_96:
  }
    operator delete(v70);
LABEL_97:
  sub_3E7A68((uint64_t)a3, (uint64_t)&v57);
  uint64_t v40 = (void **)v58;
  if (v58)
  {
    uint64_t v41 = v59;
    char v42 = v58;
    if (v59 != v58)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 4;
      }
      while (v41 != v40);
      char v42 = v58;
    }
    uint64_t v59 = v40;
    operator delete(v42);
  }
  sub_DDE000((uint64_t)&v66, a1, v63[1], (uint64_t)a3);
  sub_DDE000((uint64_t)&v57, a1, v63[2], (uint64_t)a3);
  sub_DDE000((uint64_t)v69, a1, v65[2], (uint64_t)a3);
  if (*(int *)(a1 + 80) < 1)
  {
    v55[23] = 21;
    strcpy(v55, "No ETARoute provided.");
    sub_DDE278((uint64_t)&v66, 7, (long long *)v55);
    if ((v55[23] & 0x80000000) != 0) {
      operator delete(*(void **)v55);
    }
  }
  else
  {
    sub_D8EC0C(*(void *)(*(void *)(a1 + 88) + 8), (uint64_t)&v66, (unsigned __int8 *)&v66, (unsigned __int8 *)&v57, v69);
  }
  sub_DDE000((uint64_t)v55, a1, v63[3], (uint64_t)a3);
  if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
  {
    uint64_t v53 = sub_DBC55C(a1);
    int v54 = v44;
    sub_DC3998((char *)a1, &v51);
    if (v51 == (void *)v52)
    {
      uint64_t v49 = -1;
      int v45 = 0x7FFFFFFF;
    }
    else
    {
      uint64_t v49 = *(void *)(v52 - 12);
      int v45 = *(_DWORD *)(v52 - 4);
    }
    int v50 = v45;
    if (*(void *)(a1 + 336)) {
      long long v46 = *(uint64_t (****)())(a1 + 336);
    }
    else {
      long long v46 = &off_2536C78;
    }
    sub_D8F154((uint64_t)v46, (unsigned int *)&v53, (unsigned int *)&v49, (uint64_t)v55, (unsigned __int8 *)&v66, (unsigned __int8 *)&v57, v69);
    char v43 = v51;
    if (v51)
    {
      *(void *)&long long v52 = v51;
      goto LABEL_120;
    }
  }
  else
  {
    long long v51 = operator new(0x20uLL);
    long long v52 = xmmword_20B5EB0;
    strcpy((char *)v51, "No WaypointRoute provided.");
    sub_DDE278((uint64_t)v55, 7, (long long *)&v51);
    if (SHIBYTE(v52) < 0)
    {
      char v43 = v51;
LABEL_120:
      operator delete(v43);
    }
  }
  if ((*(unsigned char *)(a1 + 41) & 0x10) != 0
    && *(int *)(a1 + 80) >= 1
    && (long long v51 = operator new(0x50uLL),
        long long v52 = xmmword_20B9A50,
        strcpy((char *)v51, "Request has both an ETARoute and an ETATrafficUpdateWaypointRoute populated."),
        sub_DDE278((uint64_t)v55, 7, (long long *)&v51),
        SHIBYTE(v52) < 0))
  {
    operator delete(v51);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_125:
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_126;
      }
      goto LABEL_132;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(*(void **)&v55[8]);
  if ((v71 & 0x80000000) == 0)
  {
LABEL_126:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v70);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_127:
    if ((SHIBYTE(v68) & 0x80000000) == 0) {
      goto LABEL_128;
    }
LABEL_134:
    operator delete((void *)v67);
    if ((v62 & 0x80000000) == 0) {
      return sub_4BCC2C((uint64_t)&__p);
    }
LABEL_135:
    operator delete(v61);
    return sub_4BCC2C((uint64_t)&__p);
  }
LABEL_133:
  operator delete((void *)v57.n128_u64[1]);
  if (SHIBYTE(v68) < 0) {
    goto LABEL_134;
  }
LABEL_128:
  if (v62 < 0) {
    goto LABEL_135;
  }
  return sub_4BCC2C((uint64_t)&__p);
}

void sub_D8FD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  sub_C7E3C8((uint64_t)&a23);
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_4BCC2C((uint64_t)&a56);
  sub_C7E3C8(v56);
  _Unwind_Resume(a1);
}

void sub_D8FFD0()
{
  unk_25E73C7 = 16641;
  word_25E73B0 = 65;
  byte_25E73DF = 1;
  byte_25E73C9 = 0;
}

uint64_t sub_D8FFF8(uint64_t a1, void *a2)
{
  uint64_t v23 = (char *)operator new(0x20uLL);
  long long v17 = xmmword_20B91A0;
  long long v24 = xmmword_20B91A0;
  strcpy(v23, "EVRequestInformationPatcher");
  qmemcpy(v16, "formationPatcherEVRequestInforma", sizeof(v16));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v23, (uint64_t *)&v20);
  char v19 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v5 = sub_29D62C(v4, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (void **)v20;
  if (v20)
  {
    char v7 = v21;
    uint64_t v8 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v20;
    }
    uint64_t v21 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  *(unsigned char *)a1 = v5;
  uint64_t v9 = operator new(0x20uLL);
  uint64_t v23 = (char *)v9;
  long long v24 = v17;
  *uint64_t v9 = v16[1];
  *(_OWORD *)((char *)v9 + 11) = v16[0];
  *((unsigned char *)v9 + 27) = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v10 = sub_374CDC((uint64_t)a2, (uint64_t)&v23, (uint64_t *)&v20);
  char v19 = 11;
  strcpy((char *)__p, "oem_patches");
  uint64_t v11 = sub_560F4(v10, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (void **)v20;
  if (v20)
  {
    uint64_t v13 = v21;
    uint64_t v14 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v20;
    }
    uint64_t v21 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  *(void *)(a1 + 8) = v11;
  sub_406F0C((uint64_t **)(a1 + 16), a2);
  *(void *)(a1 + 32) = a2;
  return a1;
}

void sub_D9021C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_1A668(&a22);
    if ((*(char *)(v22 - 49) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a22);
    if ((*(char *)(v22 - 49) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_D902A0(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    char v46 = 9;
    strcpy((char *)__p, "EVRouting");
    long long v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v6 = sub_374CDC(v5, (uint64_t)__p, (uint64_t *)&v52);
    sub_54214((uint64_t)v55, (uint64_t)v6);
    char v7 = v52;
    if (v52)
    {
      uint64_t v8 = v53;
      uint64_t v9 = v52;
      if (v53 != v52)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = v52;
      }
      uint64_t v53 = v7;
      operator delete(v9);
    }
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    sub_3FD150(v55, (uint64_t)a3, (uint64_t)&v52);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v10 = sub_58070(*(void **)(a1 + 8), (uint64_t)&v52);
    if (v10)
    {
      if (*((_DWORD *)v10 + 12) == 3)
      {
        uint64_t v11 = (void *)v10[5];
        uint64_t v13 = (void **)*v11;
        uint64_t v12 = (void **)v11[1];
        if ((void **)*v11 != v12)
        {
          do
          {
            if (*((_DWORD *)v13 + 2) != 2)
            {
LABEL_85:
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            uint64_t v14 = *v13;
            char v46 = 8;
            strcpy((char *)__p, "function");
            uint64_t v15 = sub_561B0(v14, (uint64_t)__p);
            uint64_t v16 = v15;
            if (v46 < 0)
            {
              operator delete(__p[0]);
              int v17 = *(char *)(v16 + 23);
              if (v17 < 0)
              {
LABEL_26:
                uint64_t v20 = *(void *)(v16 + 8);
                if (v20 == 11)
                {
                  if (**(void **)v16 == 0x706164615F646461
                    && *(void *)(*(void *)v16 + 3) == 0x726574706164615FLL)
                  {
                    goto LABEL_74;
                  }
                  uint64_t v20 = *(void *)(v16 + 8);
                }
                else if (v20 == 13 {
                       && **(void **)v16 == 0x6E6E6F635F646461
                }
                       && *(void *)(*(void *)v16 + 5) == 0x726F7463656E6E6FLL)
                {
                  goto LABEL_57;
                }
                if (v20 != 27) {
                  goto LABEL_63;
                }
                char v19 = *(uint64_t **)v16;
                goto LABEL_40;
              }
            }
            else
            {
              int v17 = *(char *)(v15 + 23);
              if (v17 < 0) {
                goto LABEL_26;
              }
            }
            int v18 = v17;
            if (v17 == 11)
            {
              if (*(void *)v16 != 0x706164615F646461 || *(void *)(v16 + 3) != 0x726574706164615FLL)
              {
LABEL_63:
                if (sub_723EC(3u))
                {
                  sub_6BAC((uint64_t)__p);
                  unsigned int v32 = sub_188FC78(__p, (uint64_t)"Invalid OEM EV request info patch function: ", 44);
                  int v33 = *(char *)(v16 + 23);
                  if (v33 >= 0) {
                    uint64_t v34 = v16;
                  }
                  else {
                    uint64_t v34 = *(void *)v16;
                  }
                  if (v33 >= 0) {
                    uint64_t v35 = *(unsigned __int8 *)(v16 + 23);
                  }
                  else {
                    uint64_t v35 = *(void *)(v16 + 8);
                  }
                  sub_188FC78(v32, v34, v35);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v43, 3u);
                  if (v44 < 0) {
                    operator delete(v43);
                  }
                  __p[0] = v41;
                  *(void **)((char *)__p + *((void *)v41 - 3)) = v40;
                  if (v48 < 0) {
                    operator delete(v47);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                goto LABEL_17;
              }
LABEL_74:
              if (*((_DWORD *)v13 + 2) != 2) {
                goto LABEL_85;
              }
              sub_D909B4(v15, *v13, a3);
              goto LABEL_17;
            }
            if (v17 == 13)
            {
              if (*(void *)v16 != 0x6E6E6F635F646461 || *(void *)(v16 + 5) != 0x726F7463656E6E6FLL) {
                goto LABEL_63;
              }
LABEL_57:
              if (*((_DWORD *)v13 + 2) != 2) {
                goto LABEL_85;
              }
              sub_D908C0(v15, *v13, a3);
              goto LABEL_17;
            }
            char v19 = (uint64_t *)v16;
            if (v18 != 27) {
              goto LABEL_63;
            }
LABEL_40:
            uint64_t v23 = *v19;
            uint64_t v24 = v19[1];
            uint64_t v25 = v19[2];
            uint64_t v26 = *(uint64_t *)((char *)v19 + 19);
            if (v23 != 0x635F7265746C6966
              || v24 != 0x726F7463656E6E6FLL
              || v25 != 0x6765725F79625F73
              || v26 != 0x6E6F696765725F79)
            {
              goto LABEL_63;
            }
            sub_D90C90(a1, a2, a3);
LABEL_17:
            v13 += 2;
          }
          while (v13 != v12);
        }
      }
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(v52);
    }
    long long v36 = v56;
    if (v56)
    {
      do
      {
        unsigned int v38 = (void **)*v36;
        sub_55198((uint64_t)(v36 + 5));
        if (*((char *)v36 + 39) < 0) {
          operator delete(v36[2]);
        }
        operator delete(v36);
        long long v36 = v38;
      }
      while (v38);
    }
    uint64_t v37 = (void *)v55[0];
    v55[0] = 0;
    if (v37) {
      operator delete(v37);
    }
  }
}

void sub_D90818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_55758((uint64_t **)(v24 - 176));
  if (*(char *)(v24 - 129) < 0) {
    operator delete(*(void **)(v24 - 152));
  }
  sub_5450C(v24 - 128);
  _Unwind_Resume(a1);
}

uint64_t *sub_D908C0(uint64_t a1, void *a2, uint64_t *a3)
{
  char v10 = 9;
  strcpy((char *)__p, "connector");
  uint64_t v5 = (char *)sub_561B0(a2, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  int v6 = sub_89E80(v5);
  char v10 = 7;
  strcpy((char *)__p, "power_w");
  int v7 = sub_5CF8C(a2, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return sub_DAFFD8(a3, v6, v7);
}

void sub_D90994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D909B4(uint64_t a1, void *a2, uint64_t *a3)
{
  char v16 = 7;
  strcpy(__p, "adapter");
  uint64_t v5 = (char *)sub_561B0(a2, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
  int v6 = sub_89E80(v5);
  char v16 = 20;
  strcpy(__p, "associated_connector");
  int v7 = (char *)sub_561B0(a2, (uint64_t)__p);
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
  int v8 = sub_89E80(v7);
  uint64_t v9 = sub_37D0C0((uint64_t)a3);
  uint64_t v11 = *(unsigned __int8 **)v9;
  char v10 = *(unsigned __int8 **)(v9 + 8);
  if (*(unsigned __int8 **)v9 != v10)
  {
    while (*v11 != v8)
    {
      v11 += 12;
      if (v11 == v10)
      {
        uint64_t v11 = *(unsigned __int8 **)(v9 + 8);
        break;
      }
    }
  }
  if (v11 != *(unsigned __int8 **)(sub_37D0C0((uint64_t)a3) + 8) && sub_87E78((uint64_t)v11)) {
    return (uint64_t)sub_DB0160(a3, v6, *((_DWORD *)v11 + 1));
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"Trying to add EV adapter without valid associated connector.", 60);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v13, 3u);
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_D90C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_D90C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D90C90(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 16;
  int v6 = (uint64_t **)sub_37D0C0((uint64_t)a3);
  sub_406F10(v5, v6, a2, &v11);
  a3[3] = a3[2];
  a3[5] = 0;
  int v7 = v11;
  int v8 = v12;
  if (v11 == v12)
  {
    if (!v11) {
      return;
    }
    goto LABEL_3;
  }
  do
  {
    int v9 = *v7;
    int v10 = *((_DWORD *)v7 + 1);
    if (v7[8] == 1) {
      sub_DB0160(a3, v9, v10);
    }
    else {
      sub_DAFFD8(a3, v9, v10);
    }
    v7 += 12;
  }
  while (v7 != v8);
  int v7 = v11;
  if (v11)
  {
LABEL_3:
    uint64_t v12 = v7;
    operator delete(v7);
  }
}

void sub_D90D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D90D68()
{
  unk_25E73F7 = 16641;
  word_25E73E0 = 65;
  byte_25E740F = 1;
  byte_25E73F9 = 0;
}

void sub_D90D90(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  v47.n128_u64[0] = 0;
  v47.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, &v47);
  if (!sub_DBB340(a1) || !sub_37B490((uint64_t)a2)) {
    return;
  }
  int v8 = (unsigned __int8 *)sub_DDDA70((uint64_t)v50, a1, *a3, (uint64_t)a4);
  if (sub_51D60(v8))
  {
    int v9 = &off_2535C50;
    if (*(void *)(a1 + 304)) {
      int v9 = *(uint64_t (****)())(a1 + 304);
    }
    int v10 = (uint64_t (***)())v9[11];
    if (!v10) {
      int v10 = &off_2536408;
    }
    uint64_t v11 = (uint64_t (***)())v10[4];
    if (!v11) {
      uint64_t v11 = &off_2536398;
    }
    uint64_t v12 = (uint64_t (***)())v11[4];
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = &off_2536310;
    }
    sub_D9135C((uint64_t)v13, (uint64_t)a2, (uint64_t)&v47);
    sub_DDE010((uint64_t)v50, (uint64_t)&v47);
    char v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v49;
      char v16 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 4;
        }
        while (v15 != v14);
        char v16 = __p;
      }
      uint64_t v49 = v14;
      operator delete(v16);
    }
  }
  sub_DDDA70((uint64_t)v44, a1, a3[1], (uint64_t)a4);
  if (sub_51D60(v44))
  {
    int v17 = &off_2535C50;
    if (*(void *)(a1 + 304)) {
      int v17 = *(uint64_t (****)())(a1 + 304);
    }
    char v18 = (uint64_t (***)())v17[11];
    if (!v18) {
      char v18 = &off_2536408;
    }
    char v19 = (uint64_t (***)())v18[4];
    if (!v19) {
      char v19 = &off_2536398;
    }
    uint64_t v20 = (uint64_t (***)())v19[4];
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = &off_2536310;
    }
    sub_D92A40((uint64_t)v21, &v47);
    sub_DDE010((uint64_t)v44, (uint64_t)&v47);
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v49;
      uint64_t v24 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 4;
        }
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v49 = v22;
      operator delete(v24);
    }
  }
  sub_DDDA70((uint64_t)v41, a1, a3[2], (uint64_t)a4);
  if (sub_51D60(v41))
  {
    if (*(unsigned char *)(a1 + 42))
    {
      uint64_t v25 = *(uint64_t (****)())(a1 + 304);
      if (!v25) {
        uint64_t v25 = &off_2535C50;
      }
      uint64_t v26 = (uint64_t (***)())v25[11];
      if (!v26) {
        uint64_t v26 = &off_2536408;
      }
      uint64_t v27 = (uint64_t (***)())v26[4];
      if (!v27) {
        uint64_t v27 = &off_2536398;
      }
      uint64_t v28 = (uint64_t (***)())v27[4];
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = &off_2536310;
      }
      sub_D9CACC(*(void *)(a1 + 392), (uint64_t)v29, (uint64_t)&v47);
    }
    else
    {
      v39.n128_u64[0] = 0;
      v39.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v47, &v39);
    }
    sub_DDE010((uint64_t)v41, (uint64_t)&v47);
    uint64_t v30 = (void **)__p;
    if (__p)
    {
      uint64_t v31 = v49;
      unsigned int v32 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v31 - 1) < 0) {
            operator delete(*(v31 - 3));
          }
          v31 -= 4;
        }
        while (v31 != v30);
        unsigned int v32 = __p;
      }
      uint64_t v49 = v30;
      operator delete(v32);
    }
  }
  sub_DDDA70((uint64_t)&v39, a1, a3[3], (uint64_t)a4);
  if (sub_51D60((unsigned __int8 *)&v39))
  {
    int v33 = *(uint64_t (****)())(a1 + 304);
    if (!v33) {
      int v33 = &off_2535C50;
    }
    uint64_t v34 = (uint64_t (***)())v33[11];
    if (!v34) {
      uint64_t v34 = &off_2536408;
    }
    uint64_t v35 = (uint64_t (***)())v34[3];
    if (!v35) {
      uint64_t v35 = &off_25363D0;
    }
    sub_D92B84((uint64_t)(v35 + 3), a2, &v47);
    sub_DDE010((uint64_t)&v39, (uint64_t)&v47);
    long long v36 = (void **)__p;
    if (__p)
    {
      uint64_t v37 = v49;
      unsigned int v38 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v37 - 1) < 0) {
            operator delete(*(v37 - 3));
          }
          v37 -= 4;
        }
        while (v37 != v36);
        unsigned int v38 = __p;
      }
      uint64_t v49 = v36;
      operator delete(v38);
    }
  }
  sub_D9301C((void *)a1, (uint64_t)a2, a4);
  sub_D93350(a1, (uint64_t *)&a4[1]);
  if ((v40 & 0x80000000) == 0)
  {
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_77;
    }
LABEL_81:
    operator delete(v42);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_78:
      if ((v52 & 0x80000000) == 0) {
        return;
      }
LABEL_83:
      operator delete(v51);
      return;
    }
    goto LABEL_82;
  }
  operator delete((void *)v39.n128_u64[1]);
  if (v43 < 0) {
    goto LABEL_81;
  }
LABEL_77:
  if ((v46 & 0x80000000) == 0) {
    goto LABEL_78;
  }
LABEL_82:
  operator delete(v45);
  if (v52 < 0) {
    goto LABEL_83;
  }
}

void sub_D911CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  sub_C7E3C8((uint64_t)&a33);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v34 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a26);
  if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    sub_C7E3C8(v33);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v34 - 96));
  sub_C7E3C8(v33);
  _Unwind_Resume(a1);
}

void sub_D91348(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9135C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)std::string::size_type v90 = 0;
  *(void *)&v90[8] = &off_2439090;
  __n128 v6 = sub_3E7814((__n128 *)a3, (__n128 *)v90);
  unsigned int v7 = *(_DWORD *)(a1 + 76);
  BOOL v8 = (~*(_DWORD *)(a1 + 16) & 0x480) != 0 || v7 == 0;
  int v9 = !v8;
  if (v8)
  {
    v90[0] = 10;
    unint64_t v10 = *(void *)(a3 + 24);
    if (v10 >= *(void *)(a3 + 32))
    {
      uint64_t v11 = sub_DA19B0((char **)(a3 + 16), v90, "Got an EV request that is missing the minimum, current or maximum battery charge.");
    }
    else
    {
      sub_DA1B38(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request that is missing the minimum, current or maximum battery charge.");
      uint64_t v11 = (char *)(v10 + 32);
      *(void *)(a3 + 24) = v10 + 32;
    }
    *(void *)(a3 + 24) = v11;
    unsigned int v7 = *(_DWORD *)(a1 + 76);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 72);
  BOOL v13 = v12 < *(_DWORD *)(a1 + 84) || v12 > v7;
  if (v13 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v90);
    sub_188FC78(v90, (uint64_t)"Got an EV request where current charge is outside of the [min,max] interval: current charge is ", 95);
    char v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" Wh, but the interval of allowed battery charges is [", 53);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)",", 1);
    char v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)"]", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v17 = *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 84) >= v17)
  {
    v90[0] = 10;
    unint64_t v18 = *(void *)(a3 + 24);
    if (v18 >= *(void *)(a3 + 32))
    {
      char v19 = sub_DA1C6C((char **)(a3 + 16), v90, "Got an EV request that has an equal or higher minimum battery charge than the maximum charge.");
    }
    else
    {
      sub_DA1DF4(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request that has an equal or higher minimum battery charge than the maximum charge.");
      char v19 = (char *)(v18 + 32);
      *(void *)(a3 + 24) = v18 + 32;
    }
    int v9 = 0;
    *(void *)(a3 + 24) = v19;
    unsigned int v17 = *(_DWORD *)(a1 + 76);
  }
  v6.n128_u32[0] = *(_DWORD *)(a1 + 72);
  if ((double)v17 * 1.1 < (double)v6.n128_u64[0])
  {
    v90[0] = 10;
    unint64_t v20 = *(void *)(a3 + 24);
    if (v20 >= *(void *)(a3 + 32))
    {
      uint64_t v21 = sub_DA1F28((char **)(a3 + 16), v90, "Got an EV request that has a significantly higher current battery charge than the maximum charge.");
    }
    else
    {
      sub_DA20B0(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request that has a significantly higher current battery charge than the maximum charge.");
      uint64_t v21 = (char *)(v20 + 32);
      *(void *)(a3 + 24) = v20 + 32;
    }
    int v9 = 0;
    *(void *)(a3 + 24) = v21;
  }
  if (*(_DWORD *)(a1 + 84) >> 5 >= 0x271u && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v90);
    uint64_t v22 = sub_188FC78(v90, (uint64_t)"Got an EV request with a minimum battery charge >= 20 kWh.", 58);
    sub_D9D7D0(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v22, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v25 = *(_DWORD *)(a1 + 76);
  if (v25 <= 0x3E8)
  {
    v90[0] = 10;
    unint64_t v26 = *(void *)(a3 + 24);
    if (v26 >= *(void *)(a3 + 32))
    {
      uint64_t v27 = sub_DA21E4((char **)(a3 + 16), v90, "Got an EV request with a maximum battery charge <= 1 kWh.");
    }
    else
    {
      sub_DA236C(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a maximum battery charge <= 1 kWh.");
      uint64_t v27 = (char *)(v26 + 32);
      *(void *)(a3 + 24) = v26 + 32;
    }
    *(void *)(a3 + 24) = v27;
    unsigned int v25 = *(_DWORD *)(a1 + 76);
  }
  if (v25 >> 6 >= 0xC35)
  {
    v90[0] = 10;
    unint64_t v28 = *(void *)(a3 + 24);
    if (v28 >= *(void *)(a3 + 32))
    {
      uint64_t v29 = sub_DA19B0((char **)(a3 + 16), v90, "Got an EV request with a maximum battery charge higher than 200kWh (Fargo patch).");
    }
    else
    {
      sub_DA1B38(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a maximum battery charge higher than 200kWh (Fargo patch).");
      uint64_t v29 = (char *)(v28 + 32);
      *(void *)(a3 + 24) = v28 + 32;
    }
    *(void *)(a3 + 24) = v29;
    if (*(_DWORD *)(a1 + 76) >= 0x20C49Cu)
    {
      v90[0] = 10;
      unint64_t v30 = *(void *)(a3 + 24);
      if (v30 >= *(void *)(a3 + 32))
      {
        uint64_t v31 = sub_DA24A0((char **)(a3 + 16), v90, "Got an EV request with a maximum battery charge higher than the maximum supported Energy.");
      }
      else
      {
        sub_DA2628(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a maximum battery charge higher than the maximum supported Energy.");
        uint64_t v31 = (char *)(v30 + 32);
        *(void *)(a3 + 24) = v30 + 32;
      }
      int v9 = 0;
      *(void *)(a3 + 24) = v31;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 0x20) == 0)
  {
    v90[0] = 10;
    unint64_t v32 = *(void *)(a3 + 24);
    if (v32 >= *(void *)(a3 + 32))
    {
      uint64_t v33 = sub_DA275C((char **)(a3 + 16), v90, "Got an EV request where the current_battery_percentage is not provided.");
    }
    else
    {
      sub_DA28E4(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request where the current_battery_percentage is not provided.");
      uint64_t v33 = (char *)(v32 + 32);
      *(void *)(a3 + 24) = v32 + 32;
    }
    *(void *)(a3 + 24) = v33;
    goto LABEL_73;
  }
  unsigned int v34 = *(_DWORD *)(a1 + 64);
  if (v34 < 0x65) {
    goto LABEL_73;
  }
  LOBYTE(v88[0]) = 10;
  LODWORD(__p.__r_.__value_.__l.__data_) = v34;
  sub_D9D994("Got an EV request where the current_battery_percentage is invalid (", (uint64_t)&__p, "%).");
  unint64_t v35 = *(void *)(a3 + 24);
  if (v35 >= *(void *)(a3 + 32))
  {
    *(void *)(a3 + 24) = sub_D9E85C((char **)(a3 + 16), (char *)v88, (uint64_t)v90);
    if ((v90[23] & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_210;
  }
  *(unsigned char *)unint64_t v35 = v88[0];
  long long v36 = (unsigned char *)(v35 + 8);
  if ((v90[23] & 0x80000000) != 0)
  {
    sub_4200(v36, *(void **)v90, *(unint64_t *)&v90[8]);
  }
  else
  {
    long long v37 = *(_OWORD *)v90;
    *(void *)(v35 + 24) = *(void *)&v90[16];
    *(_OWORD *)long long v36 = v37;
  }
  *(void *)(a3 + 24) = v35 + 32;
  *(void *)(a3 + 24) = v35 + 32;
  if ((v90[23] & 0x80000000) != 0) {
LABEL_210:
  }
    operator delete(*(void **)v90);
LABEL_73:
  int v38 = 1000 * *(_DWORD *)(a1 + 84);
  int v39 = 1000 * *(_DWORD *)(a1 + 76);
  if (!v9)
  {
    int v38 = 0;
    int v39 = 0;
  }
  v88[0] = v38;
  v88[1] = v39;
  if ((*(unsigned char *)(a1 + 16) & 0x40) != 0)
  {
    unsigned int v40 = *(_DWORD *)(a1 + 68);
    if (v40 >= 0x7AE147AF)
    {
      v90[0] = 10;
      unint64_t v41 = *(void *)(a3 + 24);
      if (v41 >= *(void *)(a3 + 32))
      {
        char v42 = sub_DA03D0((char **)(a3 + 16), v90, "Got an EV request with a max range that exceeds the maximum supported Length.");
      }
      else
      {
        sub_DA0558(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a max range that exceeds the maximum supported Length.");
        char v42 = (char *)(v41 + 32);
        *(void *)(a3 + 24) = v41 + 32;
      }
      *(void *)(a3 + 24) = v42;
      unsigned int v40 = *(_DWORD *)(a1 + 68);
    }
    if (v40 >= 0x4C4B41 && sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v90);
      char v43 = sub_188FC78(v90, (uint64_t)"Got an EV request with a max range of more than 5000 km.", 56);
      sub_D9D7D0(a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v44 = &__p;
      }
      else {
        char v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v43, (uint64_t)v44, v45);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 0x10) != 0)
  {
    if (*(_DWORD *)(*(void *)(a1 + 56) + 48)) {
      goto LABEL_106;
    }
    v90[0] = 10;
    unint64_t v46 = *(void *)(a3 + 24);
    if (v46 >= *(void *)(a3 + 32))
    {
      __n128 v47 = sub_DA2CD4((char **)(a3 + 16), v90, "Got an EV request without any supported charger plug in charger_plugs_info.supported_charger_plug.");
      goto LABEL_105;
    }
    sub_DA2E5C(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request without any supported charger plug in charger_plugs_info.supported_charger_plug.");
  }
  else
  {
    v90[0] = 10;
    unint64_t v46 = *(void *)(a3 + 24);
    if (v46 >= *(void *)(a3 + 32))
    {
      __n128 v47 = sub_DA2A18((char **)(a3 + 16), v90, "Got an EV request without charger_plugs_info set.");
      goto LABEL_105;
    }
    sub_DA2BA0(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request without charger_plugs_info set.");
  }
  __n128 v47 = (char *)(v46 + 32);
  *(void *)(a3 + 24) = v46 + 32;
LABEL_105:
  *(void *)(a3 + 24) = v47;
LABEL_106:
  if (*(void *)(a1 + 56)) {
    char v48 = *(uint64_t (****)())(a1 + 56);
  }
  else {
    char v48 = &off_2535228;
  }
  int v49 = *((_DWORD *)v48 + 12);
  uint64_t v50 = v48[7];
  uint64_t v51 = v50 + 1;
  if (!v50) {
    uint64_t v51 = 0;
  }
  if (v49)
  {
    uint64_t v52 = 8 * v49;
    while (*((_DWORD *)*v51 + 6))
    {
      ++v51;
      v52 -= 8;
      if (!v52)
      {
        uint64_t v53 = v50 + 1;
        if (!v50) {
          uint64_t v53 = 0;
        }
        goto LABEL_124;
      }
    }
    v90[0] = 10;
    unint64_t v54 = *(void *)(a3 + 24);
    if (v54 >= *(void *)(a3 + 32))
    {
      long long v55 = sub_DA21E4((char **)(a3 + 16), v90, "Got an EV request with an UNKNOWN supported charger plug.");
    }
    else
    {
      sub_DA236C(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with an UNKNOWN supported charger plug.");
      long long v55 = (char *)(v54 + 32);
      *(void *)(a3 + 24) = v54 + 32;
    }
    *(void *)(a3 + 24) = v55;
    int v49 = *((_DWORD *)v48 + 12);
    uint64_t v50 = v48[7];
    uint64_t v53 = v50 + 1;
    if (!v50) {
      uint64_t v53 = 0;
    }
    if (!v49) {
      goto LABEL_140;
    }
LABEL_124:
    uint64_t v56 = 8 * v49;
    while ((*((unsigned char *)*v53 + 16) & 2) != 0)
    {
      ++v53;
      v56 -= 8;
      if (!v56)
      {
        if (v50) {
          __n128 v57 = v50 + 1;
        }
        else {
          __n128 v57 = 0;
        }
        goto LABEL_137;
      }
    }
    v90[0] = 10;
    unint64_t v58 = *(void *)(a3 + 24);
    if (v58 >= *(void *)(a3 + 32))
    {
      uint64_t v59 = sub_DA2F90((char **)(a3 + 16), v90, "Got an EV request with a supported charger plug with unknown maximum power.");
    }
    else
    {
      sub_DA3118(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a supported charger plug with unknown maximum power.");
      uint64_t v59 = (char *)(v58 + 32);
      *(void *)(a3 + 24) = v58 + 32;
    }
    *(void *)(a3 + 24) = v59;
    int v49 = *((_DWORD *)v48 + 12);
    uint64_t v60 = v48[7];
    if (v60) {
      __n128 v57 = v60 + 1;
    }
    else {
      __n128 v57 = 0;
    }
    if (!v49) {
      goto LABEL_140;
    }
LABEL_137:
    uint64_t v61 = 8 * v49;
    while ((*((_DWORD *)*v57 + 7) - 1000001) >= 0xFFF0BDC0)
    {
      ++v57;
      v61 -= 8;
      if (!v61) {
        goto LABEL_140;
      }
    }
    v90[0] = 10;
    unint64_t v64 = *(void *)(a3 + 24);
    if (v64 >= *(void *)(a3 + 32))
    {
      int v65 = sub_DA324C((char **)(a3 + 16), v90, "Got an EV request with a supported charger plug with an invalid maximum power.");
    }
    else
    {
      sub_DA33D4(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with a supported charger plug with an invalid maximum power.");
      int v65 = (char *)(v64 + 32);
      *(void *)(a3 + 24) = v64 + 32;
    }
    *(void *)(a3 + 24) = v65;
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      goto LABEL_141;
    }
  }
  else
  {
LABEL_140:
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      goto LABEL_141;
    }
  }
  unint64_t v66 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v66 + 23) < 0)
  {
    if (*(void *)(v66 + 8)) {
      goto LABEL_153;
    }
LABEL_141:
    v90[0] = 11;
    unint64_t v62 = *(void *)(a3 + 24);
    if (v62 >= *(void *)(a3 + 32))
    {
      long long v63 = sub_DA21E4((char **)(a3 + 16), v90, "Got an EV request with no or empty consumption arguments.");
    }
    else
    {
      sub_DA236C(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with no or empty consumption arguments.");
      long long v63 = (char *)(v62 + 32);
      *(void *)(a3 + 24) = v62 + 32;
    }
    *(void *)(a3 + 24) = v63;
    goto LABEL_173;
  }
  if (!*(unsigned char *)(v66 + 23)) {
    goto LABEL_141;
  }
LABEL_153:
  v90[23] = 19;
  strcpy(v90, "EVConsumptionModels");
  memset(&__p, 0, sizeof(__p));
  long long v67 = sub_374CDC(a2, (uint64_t)v90, (uint64_t *)&__p);
  std::string::size_type v68 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v69 = __p.__r_.__value_.__l.__size_;
    uint64_t v70 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v69 - 1) < 0) {
          operator delete(*(void **)(v69 - 24));
        }
        v69 -= 24;
      }
      while (v69 != v68);
      uint64_t v70 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v68;
    operator delete(v70);
  }
  if ((v90[23] & 0x80000000) != 0) {
    operator delete(*(void **)v90);
  }
  sub_5EC80(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL, &__p);
  if (LODWORD(__p.__r_.__value_.__r.__words[1]) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_D94D80(__p.__r_.__value_.__l.__data_, v67, 0, (uint64_t)v90);
  sub_3E7A10(a3, (uint64_t)v90);
  uint64_t v71 = *(void *)&v90[16];
  if (*(void *)&v90[16])
  {
    uint64_t v72 = v91;
    int v73 = *(void **)&v90[16];
    if (v91 != *(void *)&v90[16])
    {
      do
      {
        if (*(char *)(v72 - 1) < 0) {
          operator delete(*(void **)(v72 - 24));
        }
        v72 -= 32;
      }
      while (v72 != v71);
      int v73 = *(void **)&v90[16];
    }
    uint64_t v91 = v71;
    operator delete(v73);
  }
  sub_5521C((uint64_t *)LODWORD(__p.__r_.__value_.__r.__words[1]), (uint64_t *)&__p);
LABEL_173:
  if (!v9) {
    goto LABEL_204;
  }
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    goto LABEL_175;
  }
  unint64_t v75 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v75 + 23) < 0)
  {
    if (!*(void *)(v75 + 8)) {
      goto LABEL_175;
    }
  }
  else if (!*(unsigned char *)(v75 + 23))
  {
LABEL_175:
    v90[0] = 11;
    unint64_t v74 = *(void *)(a3 + 24);
    if (v74 >= *(void *)(a3 + 32))
    {
      *(void *)(a3 + 24) = sub_DA37C4((char **)(a3 + 16), v90, "Got an EV request with no or empty charging arguments.");
    }
    else
    {
      sub_DA394C(a3 + 32, *(unsigned char **)(a3 + 24), v90, "Got an EV request with no or empty charging arguments.");
      *(void *)(a3 + 24) = v74 + 32;
      *(void *)(a3 + 24) = v74 + 32;
    }
    goto LABEL_204;
  }
  v90[23] = 16;
  strcpy(v90, "EVChargingModels");
  memset(&__p, 0, sizeof(__p));
  int v76 = sub_374CDC(a2, (uint64_t)v90, (uint64_t *)&__p);
  std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v78 = __p.__r_.__value_.__l.__size_;
    std::string v79 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v78 - 1) < 0) {
          operator delete(*(void **)(v78 - 24));
        }
        v78 -= 24;
      }
      while (v78 != v77);
      std::string v79 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v77;
    operator delete(v79);
  }
  if ((v90[23] & 0x80000000) != 0) {
    operator delete(*(void **)v90);
  }
  sub_5EC80(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL, v90);
  if (*(_DWORD *)&v90[8] != 2)
  {
    v87 = __cxa_allocate_exception(8uLL);
    void *v87 = &off_23FDF58;
  }
  sub_54214((uint64_t)&__p, *(uint64_t *)v90);
  sub_5521C((uint64_t *)*(unsigned int *)&v90[8], (uint64_t *)v90);
  sub_D94D80(&__p, v76, 1, (uint64_t)v90);
  sub_3E7A10(a3, (uint64_t)v90);
  uint64_t v80 = *(void *)&v90[16];
  if (*(void *)&v90[16])
  {
    uint64_t v81 = v91;
    uint64_t v82 = *(void **)&v90[16];
    if (v91 != *(void *)&v90[16])
    {
      do
      {
        if (*(char *)(v81 - 1) < 0) {
          operator delete(*(void **)(v81 - 24));
        }
        v81 -= 32;
      }
      while (v81 != v80);
      uint64_t v82 = *(void **)&v90[16];
    }
    uint64_t v91 = v80;
    operator delete(v82);
  }
  v83 = (void **)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      char v85 = (void **)*v83;
      sub_55198((uint64_t)(v83 + 5));
      if (*((char *)v83 + 39) < 0) {
        operator delete(v83[2]);
      }
      operator delete(v83);
      v83 = v85;
    }
    while (v85);
  }
  int v84 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v84) {
    operator delete(v84);
  }
LABEL_204:
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D923BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 24) = v29;
  if (a28 < 0)
  {
    operator delete(__p);
    sub_C7E3C8(v28);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v28);
  _Unwind_Resume(a1);
}

double sub_D92A40@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 17) & 8) != 0)
  {
    if (*(_DWORD *)(a1 + 88) != 1169176447)
    {
      std::string __p = 0;
      *(void *)&long long v5 = &off_2439090;
      *(void *)&double result = sub_3E7814(a2, (__n128 *)&__p).n128_u64[0];
      return result;
    }
    std::string __p = operator new(0x38uLL);
    long long v5 = xmmword_20B9AD0;
    strcpy((char *)__p, "Got an EV request with an invalid last SoC update time.");
    sub_3E7914(10, (long long *)&__p, (uint64_t)a2);
  }
  else
  {
    std::string __p = operator new(0x38uLL);
    long long v5 = xmmword_20B9A10;
    strcpy((char *)__p, "Got an EV request without a last SoC update time.");
    sub_3E7914(10, (long long *)&__p, (uint64_t)a2);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  return result;
}

void sub_D92B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D92B84(uint64_t a1@<X0>, void *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5 = *(int *)(a1 + 8);
  if (v5)
  {
    uint64_t v23 = a3;
    long long v30 = 0u;
    long long v31 = 0u;
    int v32 = 1065353216;
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7) {
      BOOL v8 = (uint64_t *)(v7 + 8);
    }
    else {
      BOOL v8 = 0;
    }
    uint64_t v9 = 8 * v5;
    do
    {
      uint64_t v10 = *v8;
      if (!*(_DWORD *)(*v8 + 32))
      {
        unint64_t v26 = operator new(0x48uLL);
        long long v27 = xmmword_20B9AA0;
        strcpy((char *)v26, "EV charging preferences in EV request has UNKNOWN preference type.");
        sub_3E7914(12, (long long *)&v26, (uint64_t)v23);
        goto LABEL_29;
      }
      uint64_t v11 = *(uint64_t (****)())(v10 + 24);
      if (!v11) {
        uint64_t v11 = &off_2536278;
      }
      if (((_BYTE)v11[2] & 1) == 0)
      {
        unint64_t v26 = operator new(0x30uLL);
        long long v27 = xmmword_20B9A40;
        strcpy((char *)v26, "EV charging preference contains no entity.");
        sub_3E7914(12, (long long *)&v26, (uint64_t)v23);
        goto LABEL_29;
      }
      unsigned int v12 = (uint64_t *)sub_3771A4(a2);
      BOOL v13 = *(uint64_t (****)())(v10 + 24);
      if (!v13) {
        BOOL v13 = &off_2536278;
      }
      uint64_t v14 = nullsub_1(v13[3]);
      uint64_t v15 = *(void ***)sub_374CE4(a2);
      if (v15 && (sub_2ABCE4(v15) & 1) == 0 && (sub_28C8B0(v12, v14) & 1) == 0 && sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v26);
        sub_188FC78(&v26, (uint64_t)"Preferred network with (encrypted) muid=", 40);
        nullsub_1(v14);
        char v16 = (void *)std::ostream::operator<<();
        sub_188FC78(v16, (uint64_t)" is not an active charging network in the current environment.", 62);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v25 < 0) {
          operator delete(__p);
        }
        unint64_t v26 = v22;
        *(void **)((char *)&v26 + *((void *)v22 - 3)) = v21;
        if (v29 < 0) {
          operator delete(v28);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v17 = *(uint64_t (****)())(v10 + 24);
      if (!v17) {
        unsigned int v17 = &off_2536278;
      }
      unint64_t v26 = v17[3];
      sub_DA3D3C((uint64_t)&v30, (unint64_t *)&v26, &v26);
      ++v8;
      v9 -= 8;
    }
    while (v9);
    if (*((void *)&v31 + 1) >= (unint64_t)*(int *)(a1 + 8))
    {
      unint64_t v26 = 0;
      *(void *)&long long v27 = &off_2439090;
      sub_3E7814(v23, (__n128 *)&v26);
      goto LABEL_32;
    }
    unint64_t v26 = operator new(0x48uLL);
    long long v27 = xmmword_20B9A00;
    strcpy((char *)v26, "EV charging preferences in EV request contain duplicate entries.");
    sub_3E7914(12, (long long *)&v26, (uint64_t)v23);
LABEL_29:
    if (SHIBYTE(v27) < 0) {
      operator delete(v26);
    }
LABEL_32:
    unint64_t v18 = (void *)v31;
    if ((void)v31)
    {
      do
      {
        char v19 = (void *)*v18;
        operator delete(v18);
        unint64_t v18 = v19;
      }
      while (v19);
    }
    unint64_t v20 = (void *)v30;
    *(void *)&long long v30 = 0;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    unint64_t v26 = 0;
    *(void *)&long long v27 = &off_2439090;
    sub_3E7814(a3, (__n128 *)&v26);
  }
}

void sub_D92F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_12168(v24 - 128);
  _Unwind_Resume(a1);
}

void *sub_D9301C(void *result, uint64_t a2, _DWORD *a3)
{
  if (!*a3)
  {
    uint64_t v4 = (uint64_t)result;
    double result = (void *)sub_DBE8AC((uint64_t)result);
    if (result)
    {
      HIBYTE(__p[2]) = 9;
      strcpy((char *)__p, "EVRouting");
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v5 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v20);
      uint64_t v6 = (uint64_t)v20;
      if (v20)
      {
        uint64_t v7 = v21;
        BOOL v8 = v20;
        if ((void *)v21 != v20)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 24;
          }
          while (v7 != v6);
          BOOL v8 = v20;
        }
        uint64_t v21 = v6;
        operator delete(v8);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_20B91A0;
      strcpy((char *)__p[0], "ev_info_staleness_limit_min");
      int v9 = sub_5D2EC(v5, __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_DB7434(v4, (uint64_t)&v20);
      if (sub_DAFB88((uint64_t)&v20) && sub_DAFBE4((uint64_t)&v20) && (int)sub_46CABC((uint64_t)&v20) > v9)
      {
        int v10 = sub_46CABC((uint64_t)&v20);
        if (v10 < 0) {
          int v11 = 65236;
        }
        else {
          int v11 = 300;
        }
        unsigned int v12 = v11 + v10 % 600 + ((-9611 * (__int16)(v11 + v10 % 600)) >> 16);
        LODWORD(__p[0]) = v10 / 600 + ((__int16)v12 >> 9) + ((unsigned __int16)(v12 & 0x8000) >> 15);
        sub_DA4060("EV info last soc update timestamp is stale by ", (uint64_t)__p, " minutes");
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)__p);
          sub_DA4234((uint64_t)&v18, v4);
          if ((v16 & 0x80u) == 0) {
            BOOL v13 = v15;
          }
          else {
            BOOL v13 = (void **)v15[0];
          }
          if ((v16 & 0x80u) == 0) {
            uint64_t v14 = v16;
          }
          else {
            uint64_t v14 = (uint64_t)v15[1];
          }
          sub_188FC78(__p, (uint64_t)v13, v14);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)v15, 1u);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          sub_111ECAC((uint64_t)__p);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
      }
      return sub_402628(&v20);
    }
  }
  return result;
}

void sub_D932BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 209) < 0) {
    operator delete(*(void **)(v21 - 232));
  }
  sub_402628((void *)(v21 - 208));
  _Unwind_Resume(a1);
}

void sub_D93350(uint64_t a1, uint64_t *a2)
{
  if (*a2 != a2[1])
  {
    uint64_t v3 = &off_2535C50;
    if (*(void *)(a1 + 304)) {
      uint64_t v3 = *(uint64_t (****)())(a1 + 304);
    }
    uint64_t v4 = (uint64_t (***)())v3[11];
    if (!v4) {
      uint64_t v4 = &off_2536408;
    }
    uint64_t v5 = (uint64_t (***)())v4[4];
    if (!v5) {
      uint64_t v5 = &off_2536398;
    }
    uint64_t v6 = (uint64_t (***)())v5[4];
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = &off_2536310;
    }
    sub_D9D7D0((uint64_t)v7, &__p);
    uint64_t v9 = *a2;
    for (uint64_t i = a2[1]; v9 != i; v9 += 32)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v9 + 8), (const std::string::value_type *)p_p, size);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_D93444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D93460(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  v47.n128_u64[0] = 0;
  v47.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, &v47);
  if (!sub_DBB760(a1) || !sub_37B490((uint64_t)a2)) {
    return;
  }
  BOOL v8 = (unsigned __int8 *)sub_DDE000((uint64_t)v50, a1, *a3, (uint64_t)a4);
  if (sub_51D60(v8))
  {
    uint64_t v9 = &off_2535C50;
    if (*(void *)(a1 + 288)) {
      uint64_t v9 = *(uint64_t (****)())(a1 + 288);
    }
    int v10 = (uint64_t (***)())v9[11];
    if (!v10) {
      int v10 = &off_2536408;
    }
    int v11 = (uint64_t (***)())v10[4];
    if (!v11) {
      int v11 = &off_2536398;
    }
    unsigned int v12 = (uint64_t (***)())v11[4];
    if (v12) {
      BOOL v13 = v12;
    }
    else {
      BOOL v13 = &off_2536310;
    }
    sub_D9135C((uint64_t)v13, (uint64_t)a2, (uint64_t)&v47);
    sub_DDE010((uint64_t)v50, (uint64_t)&v47);
    uint64_t v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v49;
      unsigned __int8 v16 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 4;
        }
        while (v15 != v14);
        unsigned __int8 v16 = __p;
      }
      int v49 = v14;
      operator delete(v16);
    }
  }
  sub_DDE000((uint64_t)v44, a1, a3[1], (uint64_t)a4);
  if (sub_51D60(v44))
  {
    unsigned int v17 = &off_2535C50;
    if (*(void *)(a1 + 288)) {
      unsigned int v17 = *(uint64_t (****)())(a1 + 288);
    }
    unint64_t v18 = (uint64_t (***)())v17[11];
    if (!v18) {
      unint64_t v18 = &off_2536408;
    }
    char v19 = (uint64_t (***)())v18[4];
    if (!v19) {
      char v19 = &off_2536398;
    }
    unint64_t v20 = (uint64_t (***)())v19[4];
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = &off_2536310;
    }
    sub_D92A40((uint64_t)v21, &v47);
    sub_DDE010((uint64_t)v44, (uint64_t)&v47);
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v49;
      uint64_t v24 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 4;
        }
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      int v49 = v22;
      operator delete(v24);
    }
  }
  sub_DDE000((uint64_t)v41, a1, a3[2], (uint64_t)a4);
  if (sub_51D60(v41))
  {
    if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
    {
      char v25 = *(uint64_t (****)())(a1 + 288);
      if (!v25) {
        char v25 = &off_2535C50;
      }
      unint64_t v26 = (uint64_t (***)())v25[11];
      if (!v26) {
        unint64_t v26 = &off_2536408;
      }
      long long v27 = (uint64_t (***)())v26[4];
      if (!v27) {
        long long v27 = &off_2536398;
      }
      uint64_t v28 = (uint64_t (***)())v27[4];
      if (v28) {
        char v29 = v28;
      }
      else {
        char v29 = &off_2536310;
      }
      sub_D94800(*(void *)(a1 + 336), (uint64_t)v29, (uint64_t)&v47);
    }
    else
    {
      v39.n128_u64[0] = 0;
      v39.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v47, &v39);
    }
    sub_DDE010((uint64_t)v41, (uint64_t)&v47);
    long long v30 = (void **)__p;
    if (__p)
    {
      long long v31 = v49;
      int v32 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v31 - 1) < 0) {
            operator delete(*(v31 - 3));
          }
          v31 -= 4;
        }
        while (v31 != v30);
        int v32 = __p;
      }
      int v49 = v30;
      operator delete(v32);
    }
  }
  sub_DDE000((uint64_t)&v39, a1, a3[3], (uint64_t)a4);
  if (sub_51D60((unsigned __int8 *)&v39))
  {
    uint64_t v33 = *(uint64_t (****)())(a1 + 288);
    if (!v33) {
      uint64_t v33 = &off_2535C50;
    }
    unsigned int v34 = (uint64_t (***)())v33[11];
    if (!v34) {
      unsigned int v34 = &off_2536408;
    }
    unint64_t v35 = (uint64_t (***)())v34[3];
    if (!v35) {
      unint64_t v35 = &off_25363D0;
    }
    sub_D92B84((uint64_t)(v35 + 3), a2, &v47);
    sub_DDE010((uint64_t)&v39, (uint64_t)&v47);
    long long v36 = (void **)__p;
    if (__p)
    {
      long long v37 = v49;
      int v38 = __p;
      if (v49 != __p)
      {
        do
        {
          if (*((char *)v37 - 1) < 0) {
            operator delete(*(v37 - 3));
          }
          v37 -= 4;
        }
        while (v37 != v36);
        int v38 = __p;
      }
      int v49 = v36;
      operator delete(v38);
    }
  }
  sub_D93A2C((void *)a1, (uint64_t)a2, a4);
  sub_D93D60(a1, (uint64_t *)&a4[1]);
  if ((v40 & 0x80000000) == 0)
  {
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_77;
    }
LABEL_81:
    operator delete(v42);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_78:
      if ((v52 & 0x80000000) == 0) {
        return;
      }
LABEL_83:
      operator delete(v51);
      return;
    }
    goto LABEL_82;
  }
  operator delete((void *)v39.n128_u64[1]);
  if (v43 < 0) {
    goto LABEL_81;
  }
LABEL_77:
  if ((v46 & 0x80000000) == 0) {
    goto LABEL_78;
  }
LABEL_82:
  operator delete(v45);
  if (v52 < 0) {
    goto LABEL_83;
  }
}

void sub_D9389C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  sub_C7E3C8((uint64_t)&a33);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v34 - 73) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a26);
  if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
LABEL_5:
    sub_C7E3C8(v33);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v34 - 96));
  sub_C7E3C8(v33);
  _Unwind_Resume(a1);
}

void sub_D93A18(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void *sub_D93A2C(void *result, uint64_t a2, _DWORD *a3)
{
  if (!*a3)
  {
    uint64_t v4 = (uint64_t)result;
    double result = (void *)sub_DBE8E4((uint64_t)result);
    if (result)
    {
      HIBYTE(__p[2]) = 9;
      strcpy((char *)__p, "EVRouting");
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v5 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v20);
      uint64_t v6 = (uint64_t)v20;
      if (v20)
      {
        uint64_t v7 = v21;
        BOOL v8 = v20;
        if ((void *)v21 != v20)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 24;
          }
          while (v7 != v6);
          BOOL v8 = v20;
        }
        uint64_t v21 = v6;
        operator delete(v8);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_20B91A0;
      strcpy((char *)__p[0], "ev_info_staleness_limit_min");
      int v9 = sub_5D2EC(v5, __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_DB8E8C(v4, (uint64_t)&v20);
      if (sub_DAFB88((uint64_t)&v20) && sub_DAFBE4((uint64_t)&v20) && (int)sub_46CABC((uint64_t)&v20) > v9)
      {
        int v10 = sub_46CABC((uint64_t)&v20);
        if (v10 < 0) {
          int v11 = 65236;
        }
        else {
          int v11 = 300;
        }
        unsigned int v12 = v11 + v10 % 600 + ((-9611 * (__int16)(v11 + v10 % 600)) >> 16);
        LODWORD(__p[0]) = v10 / 600 + ((__int16)v12 >> 9) + ((unsigned __int16)(v12 & 0x8000) >> 15);
        sub_DA4060("EV info last soc update timestamp is stale by ", (uint64_t)__p, " minutes");
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)__p);
          sub_DA4814((uint64_t)&v18, v4);
          if ((v16 & 0x80u) == 0) {
            BOOL v13 = v15;
          }
          else {
            BOOL v13 = (void **)v15[0];
          }
          if ((v16 & 0x80u) == 0) {
            uint64_t v14 = v16;
          }
          else {
            uint64_t v14 = (uint64_t)v15[1];
          }
          sub_188FC78(__p, (uint64_t)v13, v14);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)v15, 1u);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          sub_111ECAC((uint64_t)__p);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
      }
      return sub_402628(&v20);
    }
  }
  return result;
}

void sub_D93CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 209) < 0) {
    operator delete(*(void **)(v21 - 232));
  }
  sub_402628((void *)(v21 - 208));
  _Unwind_Resume(a1);
}

void sub_D93D60(uint64_t a1, uint64_t *a2)
{
  if (*a2 != a2[1])
  {
    uint64_t v3 = &off_2535C50;
    if (*(void *)(a1 + 288)) {
      uint64_t v3 = *(uint64_t (****)())(a1 + 288);
    }
    uint64_t v4 = (uint64_t (***)())v3[11];
    if (!v4) {
      uint64_t v4 = &off_2536408;
    }
    uint64_t v5 = (uint64_t (***)())v4[4];
    if (!v5) {
      uint64_t v5 = &off_2536398;
    }
    uint64_t v6 = (uint64_t (***)())v5[4];
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = &off_2536310;
    }
    sub_D9D7D0((uint64_t)v7, &__p);
    uint64_t v9 = *a2;
    for (uint64_t i = a2[1]; v9 != i; v9 += 32)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v9 + 8), (const std::string::value_type *)p_p, size);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_D93E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D93E70(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  v45.n128_u64[0] = 0;
  v45.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, &v45);
  BOOL v8 = *(uint64_t (****)())(a1 + 312);
  if (!v8) {
    BOOL v8 = &off_2536408;
  }
  uint64_t v9 = (uint64_t (***)())v8[4];
  if (!v9) {
    uint64_t v9 = &off_2536398;
  }
  if (((_BYTE)v9[2] & 2) == 0 || !sub_37B490((uint64_t)a2)) {
    return;
  }
  int v10 = (unsigned __int8 *)sub_DDDD38((uint64_t)v48, a1, *a3, (uint64_t)a4);
  if (sub_51D60(v10))
  {
    int v11 = *(uint64_t (****)())(a1 + 312);
    if (!v11) {
      int v11 = &off_2536408;
    }
    unsigned int v12 = (uint64_t (***)())v11[4];
    if (!v12) {
      unsigned int v12 = &off_2536398;
    }
    BOOL v13 = (uint64_t (***)())v12[4];
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = &off_2536310;
    }
    sub_D9135C((uint64_t)v14, (uint64_t)a2, (uint64_t)&v45);
    sub_DDE010((uint64_t)v48, (uint64_t)&v45);
    uint64_t v15 = (void **)__p;
    if (__p)
    {
      unsigned __int8 v16 = v47;
      unsigned int v17 = __p;
      if (v47 != __p)
      {
        do
        {
          if (*((char *)v16 - 1) < 0) {
            operator delete(*(v16 - 3));
          }
          v16 -= 4;
        }
        while (v16 != v15);
        unsigned int v17 = __p;
      }
      __n128 v47 = v15;
      operator delete(v17);
    }
  }
  sub_DDDD38((uint64_t)v42, a1, a3[1], (uint64_t)a4);
  if (sub_51D60(v42))
  {
    unint64_t v18 = *(uint64_t (****)())(a1 + 312);
    if (!v18) {
      unint64_t v18 = &off_2536408;
    }
    char v19 = (uint64_t (***)())v18[4];
    if (!v19) {
      char v19 = &off_2536398;
    }
    unint64_t v20 = (uint64_t (***)())v19[4];
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = &off_2536310;
    }
    sub_D92A40((uint64_t)v21, &v45);
    sub_DDE010((uint64_t)v42, (uint64_t)&v45);
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      uint64_t v23 = v47;
      uint64_t v24 = __p;
      if (v47 != __p)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 4;
        }
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      __n128 v47 = v22;
      operator delete(v24);
    }
  }
  sub_DDDD38((uint64_t)v39, a1, a3[2], (uint64_t)a4);
  if (sub_51D60(v39))
  {
    if ((*(unsigned char *)(a1 + 42) & 2) != 0)
    {
      char v25 = *(uint64_t (****)())(a1 + 312);
      if (!v25) {
        char v25 = &off_2536408;
      }
      unint64_t v26 = (uint64_t (***)())v25[4];
      if (!v26) {
        unint64_t v26 = &off_2536398;
      }
      long long v27 = (uint64_t (***)())v26[4];
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = &off_2536310;
      }
      sub_D9CACC(*(void *)(a1 + 376), (uint64_t)v28, (uint64_t)&v45);
    }
    else
    {
      v37.n128_u64[0] = 0;
      v37.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v45, &v37);
    }
    sub_DDE010((uint64_t)v39, (uint64_t)&v45);
    char v29 = (void **)__p;
    if (__p)
    {
      long long v30 = v47;
      long long v31 = __p;
      if (v47 != __p)
      {
        do
        {
          if (*((char *)v30 - 1) < 0) {
            operator delete(*(v30 - 3));
          }
          v30 -= 4;
        }
        while (v30 != v29);
        long long v31 = __p;
      }
      __n128 v47 = v29;
      operator delete(v31);
    }
  }
  sub_DDDD38((uint64_t)&v37, a1, a3[3], (uint64_t)a4);
  if (sub_51D60((unsigned __int8 *)&v37))
  {
    int v32 = *(uint64_t (****)())(a1 + 312);
    if (!v32) {
      int v32 = &off_2536408;
    }
    uint64_t v33 = (uint64_t (***)())v32[3];
    if (!v33) {
      uint64_t v33 = &off_25363D0;
    }
    sub_D92B84((uint64_t)(v33 + 3), a2, &v45);
    sub_DDE010((uint64_t)&v37, (uint64_t)&v45);
    uint64_t v34 = (void **)__p;
    if (__p)
    {
      unint64_t v35 = v47;
      long long v36 = __p;
      if (v47 != __p)
      {
        do
        {
          if (*((char *)v35 - 1) < 0) {
            operator delete(*(v35 - 3));
          }
          v35 -= 4;
        }
        while (v35 != v34);
        long long v36 = __p;
      }
      __n128 v47 = v34;
      operator delete(v36);
    }
  }
  sub_D943D0((void *)a1, (uint64_t)a2, a4);
  sub_D94704(a1, (uint64_t *)&a4[1]);
  if ((v38 & 0x80000000) == 0)
  {
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_73;
    }
LABEL_77:
    operator delete(v40);
    if ((v44 & 0x80000000) == 0)
    {
LABEL_74:
      if ((v50 & 0x80000000) == 0) {
        return;
      }
LABEL_79:
      operator delete(v49);
      return;
    }
    goto LABEL_78;
  }
  operator delete((void *)v37.n128_u64[1]);
  if (v41 < 0) {
    goto LABEL_77;
  }
LABEL_73:
  if ((v44 & 0x80000000) == 0) {
    goto LABEL_74;
  }
LABEL_78:
  operator delete(v43);
  if (v50 < 0) {
    goto LABEL_79;
  }
}

void sub_D94250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  sub_C7E3C8((uint64_t)&a33);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v34 - 89) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a26);
  if ((*(char *)(v34 - 89) & 0x80000000) == 0)
  {
LABEL_5:
    sub_C7E3C8(v33);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v34 - 112));
  sub_C7E3C8(v33);
  _Unwind_Resume(a1);
}

void *sub_D943D0(void *result, uint64_t a2, _DWORD *a3)
{
  if (!*a3)
  {
    uint64_t v4 = (uint64_t)result;
    double result = (void *)sub_DBE8C8((uint64_t)result);
    if (result)
    {
      HIBYTE(__p[2]) = 9;
      strcpy((char *)__p, "EVRouting");
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v5 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v20);
      uint64_t v6 = (uint64_t)v20;
      if (v20)
      {
        uint64_t v7 = v21;
        BOOL v8 = v20;
        if ((void *)v21 != v20)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 24;
          }
          while (v7 != v6);
          BOOL v8 = v20;
        }
        uint64_t v21 = v6;
        operator delete(v8);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_20B91A0;
      strcpy((char *)__p[0], "ev_info_staleness_limit_min");
      int v9 = sub_5D2EC(v5, __p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_DBE434(v4, (uint64_t)&v20);
      if (sub_DAFB88((uint64_t)&v20) && sub_DAFBE4((uint64_t)&v20) && (int)sub_46CABC((uint64_t)&v20) > v9)
      {
        int v10 = sub_46CABC((uint64_t)&v20);
        if (v10 < 0) {
          int v11 = 65236;
        }
        else {
          int v11 = 300;
        }
        unsigned int v12 = v11 + v10 % 600 + ((-9611 * (__int16)(v11 + v10 % 600)) >> 16);
        LODWORD(__p[0]) = v10 / 600 + ((__int16)v12 >> 9) + ((unsigned __int16)(v12 & 0x8000) >> 15);
        sub_DA4060("EV info last soc update timestamp is stale by ", (uint64_t)__p, " minutes");
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)__p);
          sub_DA4BD0((uint64_t)&v18, v4);
          if ((v16 & 0x80u) == 0) {
            BOOL v13 = v15;
          }
          else {
            BOOL v13 = (void **)v15[0];
          }
          if ((v16 & 0x80u) == 0) {
            uint64_t v14 = v16;
          }
          else {
            uint64_t v14 = (uint64_t)v15[1];
          }
          sub_188FC78(__p, (uint64_t)v13, v14);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)v15, 1u);
          if ((char)v16 < 0) {
            operator delete(v15[0]);
          }
          sub_111ECAC((uint64_t)__p);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
      }
      return sub_402628(&v20);
    }
  }
  return result;
}

void sub_D94670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v21 - 209) < 0) {
    operator delete(*(void **)(v21 - 232));
  }
  sub_402628((void *)(v21 - 208));
  _Unwind_Resume(a1);
}

void sub_D94704(uint64_t a1, uint64_t *a2)
{
  if (*a2 != a2[1])
  {
    uint64_t v3 = *(uint64_t (****)())(a1 + 312);
    if (!v3) {
      uint64_t v3 = &off_2536408;
    }
    uint64_t v4 = (uint64_t (***)())v3[4];
    if (!v4) {
      uint64_t v4 = &off_2536398;
    }
    uint64_t v5 = (uint64_t (***)())v4[4];
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = &off_2536310;
    }
    sub_D9D7D0((uint64_t)v6, &__p);
    uint64_t v8 = *a2;
    for (uint64_t i = a2[1]; v8 != i; v8 += 32)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(v8 + 8), (const std::string::value_type *)p_p, size);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_D947E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D94800(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v22[0] = 0;
  v22[1] = &off_2439090;
  sub_3E7814((__n128 *)a3, (__n128 *)v22);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = (uint64_t *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 32);
  if (v8)
  {
    int v9 = &v7[v8];
    do
    {
      sub_D9CF74(*v7, a2, (uint64_t)v22);
      sub_3E7A68(a3, (uint64_t)v22);
      int v11 = (void **)__p;
      if (__p)
      {
        unsigned int v12 = v24;
        int v10 = __p;
        if (v24 != __p)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          int v10 = __p;
        }
        uint64_t v24 = v11;
        operator delete(v10);
      }
      ++v7;
    }
    while (v7 != v9);
    uint64_t v13 = *(unsigned int *)(a1 + 32);
    if ((int)v13 >= 2)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v13 - 1;
      do
      {
        int v21 = v14 + 1;
        if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8 * v14 + 16) + 40) & 8) == 0)
        {
          char v20 = 10;
          int v19 = *(_DWORD *)(a1 + 32);
          sub_D9D2E0("Got an EV request where the ETATrafficUpdateWaypointRoute contains a leg at position ", (uint64_t)&v21, " of ", (uint64_t)&v19, " without an origin_waypoint_info.");
          unint64_t v16 = *(void *)(a3 + 24);
          if (v16 < *(void *)(a3 + 32))
          {
            *(unsigned char *)unint64_t v16 = v20;
            unsigned int v17 = (unsigned char *)(v16 + 8);
            if (SHIBYTE(__p) < 0)
            {
              sub_4200(v17, v22[0], (unint64_t)v22[1]);
            }
            else
            {
              long long v18 = *(_OWORD *)v22;
              *(void *)(v16 + 24) = __p;
              *(_OWORD *)unsigned int v17 = v18;
            }
            *(void *)(a3 + 24) = v16 + 32;
            *(void *)(a3 + 24) = v16 + 32;
            if ((SHIBYTE(__p) & 0x80000000) == 0) {
              goto LABEL_18;
            }
LABEL_27:
            operator delete(v22[0]);
            goto LABEL_18;
          }
          *(void *)(a3 + 24) = sub_D9E85C((char **)(a3 + 16), &v20, (uint64_t)v22);
          if (SHIBYTE(__p) < 0) {
            goto LABEL_27;
          }
        }
LABEL_18:
        ++v14;
      }
      while (v15 != v14);
    }
  }
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D94A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 24) = v17;
  if (a16 < 0)
  {
    operator delete(__p);
    sub_C7E3C8(v16);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v16);
  _Unwind_Resume(a1);
}

BOOL sub_D94A84(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 0x10) == 0) {
    return (*(unsigned char *)(a2 + 16) & 0x10) == 0;
  }
  if ((*(unsigned char *)(a2 + 16) & 0x10) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(uint64_t (****)())(a2 + 56);
    uint64_t v5 = &off_2535228;
    if (*(void *)(v3 + 24)) {
      uint64_t v6 = *(uint64_t (****)())(v3 + 24);
    }
    else {
      uint64_t v6 = &off_2535228;
    }
    if (!v4) {
      uint64_t v4 = &off_2535270;
    }
    if (v4[3]) {
      uint64_t v5 = (uint64_t (***)())v4[3];
    }
    uint64_t v7 = *((unsigned int *)v6 + 6);
    if (v7 == *((_DWORD *)v5 + 6))
    {
      uint64_t v8 = *((unsigned int *)v6 + 12);
      if (v8 == *((_DWORD *)v5 + 12))
      {
        if ((int)v7 < 1)
        {
LABEL_18:
          if ((int)v8 < 1)
          {
LABEL_23:
            if (*(_DWORD *)(v3 + 32) == *((_DWORD *)v4 + 8) && *(_DWORD *)(v3 + 40) == *((_DWORD *)v4 + 10)) {
              return *(_DWORD *)(v3 + 36) == *((_DWORD *)v4 + 9);
            }
          }
          else
          {
            int v11 = v6[7];
            uint64_t v12 = (uint64_t)(v5[7] + 1);
            uint64_t v13 = v11 + 1;
            while (*((_DWORD *)*v13 + 6) == *(_DWORD *)(*(void *)v12 + 24)
                 && *((_DWORD *)*v13 + 7) == *(_DWORD *)(*(void *)v12 + 28))
            {
              v12 += 8;
              ++v13;
              if (!--v8) {
                goto LABEL_23;
              }
            }
          }
        }
        else
        {
          uint64_t v9 = (uint64_t)(v5[4] + 1);
          uint64_t v10 = (uint64_t)(v6[4] + 1);
          while (*(_DWORD *)(*(void *)v10 + 24) == *(_DWORD *)(*(void *)v9 + 24)
               && *(_DWORD *)(*(void *)v10 + 28) == *(_DWORD *)(*(void *)v9 + 28))
          {
            v9 += 8;
            v10 += 8;
            if (!--v7) {
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
  return 0;
}

unsigned char *sub_D94BD8(unsigned char *a1, void *a2)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "ev_info");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "last_soc_update");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "original_waypoint_route");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  char v9 = sub_DDCC58(v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v9;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "charging_preferences");
  uint64_t v10 = sub_561B0(a2, (uint64_t)__p);
  char v11 = sub_DDCC58(v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v11;
  return a1;
}

void sub_D94D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D94D80(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = "charging_arguments";
  if (!a3) {
    uint64_t v8 = "consumption_arguments";
  }
  uint64_t v28 = v8;
  uint64_t v9 = a1[3];
  if (v9 != 2)
  {
LABEL_12:
    if (a3 == 1 || v9 != 3) {
      goto LABEL_35;
    }
    __p[23] = 8;
    strcpy(__p, "model_id");
    if (!sub_58070(a1, (uint64_t)__p))
    {
      BOOL v11 = 0;
      if ((__p[23] & 0x80000000) != 0) {
        goto LABEL_34;
      }
      goto LABEL_19;
    }
    BYTE7(v30[1]) = 18;
    strcpy((char *)v30, "vehicle_parameters");
    if (sub_58070(a1, (uint64_t)v30))
    {
      v29[1].n128_u8[7] = 16;
      strcpy((char *)v29, "model_parameters");
      BOOL v11 = sub_58070(a1, (uint64_t)v29) != 0;
      if ((v29[1].n128_i8[7] & 0x80000000) == 0)
      {
        if ((SBYTE7(v30[1]) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_52;
      }
      operator delete((void *)v29[0].n128_u64[0]);
      if (SBYTE7(v30[1]) < 0)
      {
LABEL_52:
        operator delete(*(void **)&v30[0]);
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_34;
        }
LABEL_19:
        if (v11) {
          goto LABEL_20;
        }
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v11 = 0;
      if (SBYTE7(v30[1]) < 0) {
        goto LABEL_52;
      }
    }
LABEL_18:
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_34:
    operator delete(*(void **)__p);
    if (v11) {
      goto LABEL_20;
    }
LABEL_35:
    sub_D95698("Expected exactly two arguments 'model_id' and 'vehicle_parameters' for ", &v28, ".");
    *(void *)&long long v27 = 2;
    *((void *)&v27 + 1) = &off_2439090;
    __p[0] = 11;
    if (SBYTE7(v30[1]) < 0)
    {
      sub_4200(&__p[8], *(void **)&v30[0], *((unint64_t *)&v30[0] + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v30[0];
      uint64_t v32 = *(void *)&v30[1];
    }
    sub_3E7DA4(v29, (uint64_t)__p, 1uLL);
    sub_3E787C(a4, &v27, v29);
    unint64_t v18 = v29[0].n128_u64[0];
    if (v29[0].n128_u64[0])
    {
      unint64_t v19 = v29[0].n128_u64[1];
      char v20 = (void *)v29[0].n128_u64[0];
      if (v29[0].n128_u64[1] == v29[0].n128_u64[0]) {
        goto LABEL_94;
      }
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 32;
      }
      while (v19 != v18);
LABEL_93:
      char v20 = (void *)v29[0].n128_u64[0];
LABEL_94:
      v29[0].n128_u64[1] = v18;
      operator delete(v20);
    }
LABEL_95:
    if (SHIBYTE(v32) < 0)
    {
      operator delete(*(void **)&__p[8]);
      if ((SBYTE7(v30[1]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SBYTE7(v30[1]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(*(void **)&v30[0]);
    return;
  }
  __p[23] = 8;
  strcpy(__p, "model_id");
  if (sub_58070(a1, (uint64_t)__p))
  {
    BYTE7(v30[1]) = 18;
    strcpy((char *)v30, "vehicle_parameters");
    BOOL v10 = sub_58070(a1, (uint64_t)v30) != 0;
    if ((SBYTE7(v30[1]) & 0x80000000) == 0)
    {
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_10:
      operator delete(*(void **)__p);
      if (v10) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }
    operator delete(*(void **)&v30[0]);
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v10 = 0;
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_10;
    }
  }
LABEL_7:
  if (!v10)
  {
LABEL_11:
    uint64_t v9 = a1[3];
    goto LABEL_12;
  }
LABEL_20:
  __p[23] = 8;
  strcpy(__p, "model_id");
  uint64_t v12 = sub_58070(a1, (uint64_t)__p);
  uint64_t v13 = v12;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_22;
    }
LABEL_31:
    sub_D9587C("Got an EV request without a 'model_id'. No model_id found in the ", &v28, ".");
    *(void *)&long long v27 = 2;
    *((void *)&v27 + 1) = &off_2439090;
    __p[0] = 11;
    if (SBYTE7(v30[1]) < 0)
    {
      sub_4200(&__p[8], *(void **)&v30[0], *((unint64_t *)&v30[0] + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v30[0];
      uint64_t v32 = *(void *)&v30[1];
    }
    sub_3E7DA4(v29, (uint64_t)__p, 1uLL);
    sub_3E787C(a4, &v27, v29);
    unint64_t v18 = v29[0].n128_u64[0];
    if (v29[0].n128_u64[0])
    {
      unint64_t v22 = v29[0].n128_u64[1];
      char v20 = (void *)v29[0].n128_u64[0];
      if (v29[0].n128_u64[1] == v29[0].n128_u64[0]) {
        goto LABEL_94;
      }
      do
      {
        if (*(char *)(v22 - 1) < 0) {
          operator delete(*(void **)(v22 - 24));
        }
        v22 -= 32;
      }
      while (v22 != v18);
      goto LABEL_93;
    }
    goto LABEL_95;
  }
  operator delete(*(void **)__p);
  if (!v13) {
    goto LABEL_31;
  }
LABEL_22:
  __p[23] = 8;
  strcpy(__p, "model_id");
  int v14 = *((_DWORD *)sub_5D58C(a1, (uint64_t)__p) + 2);
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v14 == 1) {
      goto LABEL_24;
    }
LABEL_47:
    __p[23] = 8;
    strcpy(__p, "model_id");
    int v21 = sub_5D58C(a1, (uint64_t)__p);
    sub_D95A60("Got an EV request with a ", &v28, ".model_id of invalid type (", (uint64_t)v21, "). Expected a number.");
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)&long long v27 = 2;
    *((void *)&v27 + 1) = &off_2439090;
    __p[0] = 11;
    if (SBYTE7(v30[1]) < 0)
    {
      sub_4200(&__p[8], *(void **)&v30[0], *((unint64_t *)&v30[0] + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v30[0];
      uint64_t v32 = *(void *)&v30[1];
    }
    sub_3E7DA4(v29, (uint64_t)__p, 1uLL);
    sub_3E787C(a4, &v27, v29);
    unint64_t v18 = v29[0].n128_u64[0];
    if (v29[0].n128_u64[0])
    {
      unint64_t v23 = v29[0].n128_u64[1];
      char v20 = (void *)v29[0].n128_u64[0];
      if (v29[0].n128_u64[1] == v29[0].n128_u64[0]) {
        goto LABEL_94;
      }
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 32;
      }
      while (v23 != v18);
      goto LABEL_93;
    }
    goto LABEL_95;
  }
  operator delete(*(void **)__p);
  if (v14 != 1) {
    goto LABEL_47;
  }
LABEL_24:
  __p[23] = 18;
  strcpy(__p, "vehicle_parameters");
  uint64_t v15 = sub_58070(a1, (uint64_t)__p);
  uint64_t v16 = v15;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v15) {
      goto LABEL_26;
    }
LABEL_64:
    sub_D95C78("Got an EV request without a 'vehicle_parameters' object in the ", &v28, ".");
    *(void *)&long long v27 = 2;
    *((void *)&v27 + 1) = &off_2439090;
    __p[0] = 11;
    if (SBYTE7(v30[1]) < 0)
    {
      sub_4200(&__p[8], *(void **)&v30[0], *((unint64_t *)&v30[0] + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v30[0];
      uint64_t v32 = *(void *)&v30[1];
    }
    sub_3E7DA4(v29, (uint64_t)__p, 1uLL);
    sub_3E787C(a4, &v27, v29);
    unint64_t v18 = v29[0].n128_u64[0];
    if (v29[0].n128_u64[0])
    {
      unint64_t v25 = v29[0].n128_u64[1];
      char v20 = (void *)v29[0].n128_u64[0];
      if (v29[0].n128_u64[1] == v29[0].n128_u64[0]) {
        goto LABEL_94;
      }
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 32;
      }
      while (v25 != v18);
      goto LABEL_93;
    }
    goto LABEL_95;
  }
  operator delete(*(void **)__p);
  if (!v16) {
    goto LABEL_64;
  }
LABEL_26:
  __p[23] = 18;
  strcpy(__p, "vehicle_parameters");
  int v17 = *((_DWORD *)sub_5D58C(a1, (uint64_t)__p) + 2);
  if ((__p[23] & 0x80000000) == 0)
  {
    if (v17 == 2) {
      goto LABEL_28;
    }
LABEL_74:
    __p[23] = 18;
    strcpy(__p, "vehicle_parameters");
    uint64_t v24 = sub_5D58C(a1, (uint64_t)__p);
    sub_D95E5C("Got an EV request with a ", &v28, ".vehicle_parameters of invalid type (", (uint64_t)v24, "). Expected an object.");
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)&long long v27 = 2;
    *((void *)&v27 + 1) = &off_2439090;
    __p[0] = 11;
    if (SBYTE7(v30[1]) < 0)
    {
      sub_4200(&__p[8], *(void **)&v30[0], *((unint64_t *)&v30[0] + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v30[0];
      uint64_t v32 = *(void *)&v30[1];
    }
    sub_3E7DA4(v29, (uint64_t)__p, 1uLL);
    sub_3E787C(a4, &v27, v29);
    unint64_t v18 = v29[0].n128_u64[0];
    if (v29[0].n128_u64[0])
    {
      unint64_t v26 = v29[0].n128_u64[1];
      char v20 = (void *)v29[0].n128_u64[0];
      if (v29[0].n128_u64[1] == v29[0].n128_u64[0]) {
        goto LABEL_94;
      }
      do
      {
        if (*(char *)(v26 - 1) < 0) {
          operator delete(*(void **)(v26 - 24));
        }
        v26 -= 32;
      }
      while (v26 != v18);
      goto LABEL_93;
    }
    goto LABEL_95;
  }
  operator delete(*(void **)__p);
  if (v17 != 2) {
    goto LABEL_74;
  }
LABEL_28:
  if (a3) {
    sub_D9727C(a1, a2, a4);
  }
  else {
    sub_D96074(a1, a2, a4);
  }
}

void sub_D9559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,void *a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D95698(const char *a1, const char **a2, const char *a3)
{
  sub_E1B4((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_188FC78(v13, (uint64_t)a1, v6);
  char v7 = *a2;
  size_t v8 = strlen(v7);
  sub_188FC78(v13, (uint64_t)v7, v8);
  size_t v9 = strlen(a3);
  sub_188FC78(v13, (uint64_t)a3, v9);
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D95854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D95868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9587C(const char *a1, const char **a2, const char *a3)
{
  sub_E1B4((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_188FC78(v13, (uint64_t)a1, v6);
  char v7 = *a2;
  size_t v8 = strlen(v7);
  sub_188FC78(v13, (uint64_t)v7, v8);
  size_t v9 = strlen(a3);
  sub_188FC78(v13, (uint64_t)a3, v9);
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D95A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D95A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D95A60(const char *a1, const char **a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v17);
  size_t v10 = strlen(a1);
  sub_188FC78(v18, (uint64_t)a1, v10);
  BOOL v11 = *a2;
  size_t v12 = strlen(v11);
  sub_188FC78(v18, (uint64_t)v11, v12);
  size_t v13 = strlen(a3);
  sub_188FC78(v18, (uint64_t)a3, v13);
  sub_5A2DC(v18, a4);
  size_t v14 = strlen(a5);
  sub_188FC78(v18, (uint64_t)a5, v14);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D95C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D95C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D95C78(const char *a1, const char **a2, const char *a3)
{
  sub_E1B4((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_188FC78(v13, (uint64_t)a1, v6);
  char v7 = *a2;
  size_t v8 = strlen(v7);
  sub_188FC78(v13, (uint64_t)v7, v8);
  size_t v9 = strlen(a3);
  sub_188FC78(v13, (uint64_t)a3, v9);
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D95E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D95E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D95E5C(const char *a1, const char **a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v17);
  size_t v10 = strlen(a1);
  sub_188FC78(v18, (uint64_t)a1, v10);
  BOOL v11 = *a2;
  size_t v12 = strlen(v11);
  sub_188FC78(v18, (uint64_t)v11, v12);
  size_t v13 = strlen(a3);
  sub_188FC78(v18, (uint64_t)a3, v13);
  sub_5A2DC(v18, a4);
  size_t v14 = strlen(a5);
  sub_188FC78(v18, (uint64_t)a5, v14);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9604C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D96060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D96074(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v94[1].n128_u8[7] = 8;
  strcpy((char *)v94, "model_id");
  unsigned int v6 = sub_31AC04(a1, (uint64_t)v94);
  unsigned int v87 = v6;
  if (v94[1].n128_i8[7] < 0)
  {
    operator delete((void *)v94[0].n128_u64[0]);
    unsigned int v6 = v87;
  }
  std::to_string(&v86, v6);
  if (!sub_58070(a2, (uint64_t)&v86))
  {
    sub_D98F78("Got an EV request with an unknown consumption_arguments.model_id (", (uint64_t)&v87, ").");
    __dst.n128_u64[0] = 2;
    __dst.n128_u64[1] = (unint64_t)&off_2439090;
    v94[0].n128_u8[0] = 11;
    if (SBYTE7(v84) < 0)
    {
      sub_4200(&v94[0].n128_u8[8], (void *)v83.n128_u64[0], v83.n128_u64[1]);
    }
    else
    {
      *(__n128 *)((char *)v94 + 8) = v83;
      v94[1].n128_u64[1] = v84;
    }
    sub_3E7DA4(&v80, (uint64_t)v94, 1uLL);
    sub_3E787C(a3, &__dst, &v80);
    unint64_t v21 = v80.n128_u64[0];
    if (!v80.n128_u64[0]) {
      goto LABEL_65;
    }
    unint64_t v22 = v80.n128_u64[1];
    unint64_t v23 = (void *)v80.n128_u64[0];
    if (v80.n128_u64[1] == v80.n128_u64[0]) {
      goto LABEL_64;
    }
    do
    {
      if (*(char *)(v22 - 1) < 0) {
        operator delete(*(void **)(v22 - 24));
      }
      v22 -= 32;
    }
    while (v22 != v21);
    goto LABEL_63;
  }
  v94[1].n128_u8[7] = 18;
  strcpy((char *)v94, "vehicle_parameters");
  uint64_t v7 = sub_560F4(a1, (uint64_t)v94);
  if (v94[1].n128_i8[7] < 0) {
    operator delete((void *)v94[0].n128_u64[0]);
  }
  size_t v8 = (void *)sub_560F4(a2, (uint64_t)&v86);
  v94[1].n128_u8[7] = 8;
  strcpy((char *)v94, "disabled");
  size_t v9 = sub_58070(v8, (uint64_t)v94);
  if (v9)
  {
    BOOL v10 = *((_DWORD *)v9 + 12) == 4;
    if ((v94[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    operator delete((void *)v94[0].n128_u64[0]);
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  BOOL v10 = 0;
  if (v94[1].n128_i8[7] < 0) {
    goto LABEL_14;
  }
LABEL_8:
  if (v10)
  {
LABEL_9:
    sub_D98F78("Got an EV request with a disabled consumption_arguments.model_id (", (uint64_t)&v87, ").");
    __dst.n128_u64[0] = 2;
    __dst.n128_u64[1] = (unint64_t)&off_2439090;
    v94[0].n128_u8[0] = 0;
    if (SBYTE7(v84) < 0)
    {
      sub_4200(&v94[0].n128_u8[8], (void *)v83.n128_u64[0], v83.n128_u64[1]);
    }
    else
    {
      *(__n128 *)((char *)v94 + 8) = v83;
      v94[1].n128_u64[1] = v84;
    }
    sub_3E7DA4(&v80, (uint64_t)v94, 1uLL);
    sub_3E787C(a3, &__dst, &v80);
    unint64_t v21 = v80.n128_u64[0];
    if (!v80.n128_u64[0]) {
      goto LABEL_65;
    }
    unint64_t v24 = v80.n128_u64[1];
    unint64_t v23 = (void *)v80.n128_u64[0];
    if (v80.n128_u64[1] == v80.n128_u64[0])
    {
LABEL_64:
      v80.n128_u64[1] = v21;
      operator delete(v23);
LABEL_65:
      if (v94[1].n128_i8[15] < 0)
      {
        operator delete((void *)v94[0].n128_u64[1]);
        if ((SBYTE7(v84) & 0x80000000) == 0) {
          goto LABEL_217;
        }
      }
      else if ((SBYTE7(v84) & 0x80000000) == 0)
      {
        goto LABEL_217;
      }
      unint64_t v25 = (void *)v83.n128_u64[0];
      goto LABEL_216;
    }
    do
    {
      if (*(char *)(v24 - 1) < 0) {
        operator delete(*(void **)(v24 - 24));
      }
      v24 -= 32;
    }
    while (v24 != v21);
LABEL_63:
    unint64_t v23 = (void *)v80.n128_u64[0];
    goto LABEL_64;
  }
LABEL_15:
  long long v84 = 0u;
  __n128 v83 = 0u;
  int v85 = 1065353216;
  v94[1].n128_u8[7] = 16;
  strcpy((char *)v94, "model_parameters");
  BOOL v11 = sub_58070(a1, (uint64_t)v94);
  if (v11 && *((_DWORD *)v11 + 12) == 2)
  {
    size_t v12 = (__n128 *)v11[5];
    if (v94[1].n128_i8[7] < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    size_t v12 = &v83;
    if (v94[1].n128_i8[7] < 0) {
LABEL_20:
    }
      operator delete((void *)v94[0].n128_u64[0]);
  }
  long long v81 = 0u;
  __n128 v80 = 0u;
  int v82 = 1065353216;
  v94[1].n128_u8[7] = 16;
  strcpy((char *)v94, "model_parameters");
  size_t v13 = sub_58070(v8, (uint64_t)v94);
  if (v13 && *((_DWORD *)v13 + 12) == 2)
  {
    size_t v14 = (__n128 *)v13[5];
    if (v94[1].n128_i8[7] < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    size_t v14 = &v83;
    if (v94[1].n128_i8[7] < 0) {
LABEL_26:
    }
      operator delete((void *)v94[0].n128_u64[0]);
  }
  for (uint64_t i = v14 + 1; ; sub_24AFC((uint64_t)&v80, (uint64_t)&i[1], (uint64_t)&i[1]))
  {
    uint64_t i = (__n128 *)i->n128_u64[0];
    if (!i) {
      break;
    }
  }
  if (v12[1].n128_u64[1] <= 0x64)
  {
    std::string::size_type v77 = 0;
    std::string::size_type v78 = 0;
    uint64_t v79 = 0;
    uint64_t v16 = (void *)(v7 + 16);
    int v17 = *(__n128 **)(v7 + 16);
    if (v17)
    {
      do
      {
        if (v17[2].n128_i8[7] < 0)
        {
          sub_4200(&__dst, (void *)v17[1].n128_u64[0], v17[1].n128_u64[1]);
        }
        else
        {
          __n128 __dst = v17[1];
          *(void *)&long long v92 = v17[2].n128_u64[0];
        }
        sub_54A68((uint64_t)&v92 + 8, (uint64_t)&v17[2].n128_i64[1]);
        sub_D98788((uint64_t)&__dst, (uint64_t)&v86, v94);
        sub_5521C((uint64_t *)v93, (uint64_t *)&v92 + 1);
        if (SBYTE7(v92) < 0) {
          operator delete((void *)__dst.n128_u64[0]);
        }
        sub_3E7ED8((void **)&v77, v78, (unsigned char *)v94[1].n128_u64[0], (unsigned char *)v94[1].n128_u64[1], (uint64_t)(v94[1].n128_u64[1] - v94[1].n128_u64[0]) >> 5);
        unint64_t v19 = v94[1].n128_u64[0];
        if (v94[1].n128_u64[0])
        {
          unint64_t v20 = v94[1].n128_u64[1];
          unint64_t v18 = (void *)v94[1].n128_u64[0];
          if (v94[1].n128_u64[1] != v94[1].n128_u64[0])
          {
            do
            {
              if (*(char *)(v20 - 1) < 0) {
                operator delete(*(void **)(v20 - 24));
              }
              v20 -= 32;
            }
            while (v20 != v19);
            unint64_t v18 = (void *)v94[1].n128_u64[0];
          }
          v94[1].n128_u64[1] = v19;
          operator delete(v18);
        }
        int v17 = (__n128 *)v17->n128_u64[0];
      }
      while (v17);
      if (v77 != v78)
      {
        v94[0].n128_u64[0] = 2;
        v94[0].n128_u64[1] = (unint64_t)&off_2439090;
        sub_3E7830(a3, v94, (uint64_t *)&v77);
LABEL_196:
        uint64_t v59 = v77;
        if (!v77) {
          goto LABEL_211;
        }
        uint64_t v60 = v78;
        uint64_t v33 = v77;
        if (v78 != v77)
        {
          do
          {
            if (*(v60 - 1) < 0) {
              operator delete(*((void **)v60 - 3));
            }
            v60 -= 32;
          }
          while (v60 != v59);
          uint64_t v33 = v77;
        }
        std::string::size_type v78 = v59;
        goto LABEL_210;
      }
    }
    long long v92 = 0u;
    __n128 __dst = 0u;
    unsigned int v93 = 1065353216;
    sub_D9EA20((uint64_t)v94, (uint64_t)&__dst, (uint64_t)v12);
    for (unint64_t j = v12[1].n128_u64[0]; j; unint64_t j = *(void *)j)
    {
      if (*(char *)(j + 39) < 0)
      {
        sub_4200(v94, *(void **)(j + 16), *(void *)(j + 24));
      }
      else
      {
        v94[0] = *(__n128 *)(j + 16);
        v94[1].n128_u64[0] = *(void *)(j + 32);
      }
      sub_54A68((uint64_t)&v94[1].n128_i64[1], j + 40);
      if (v94[1].n128_i8[7] < 0)
      {
        sub_4200(__p, (void *)v94[0].n128_u64[0], v94[0].n128_u64[1]);
      }
      else
      {
        *(__n128 *)std::string __p = v94[0];
        v75[0] = (void *)v94[1].n128_u64[0];
      }
      sub_3D82AC((uint64_t)&__dst, (uint64_t)__p, (uint64_t)__p);
      if (SHIBYTE(v75[0]) < 0) {
        operator delete(__p[0]);
      }
      sub_5521C((uint64_t *)v95, &v94[1].n128_i64[1]);
      if (v94[1].n128_i8[7] < 0) {
        operator delete((void *)v94[0].n128_u64[0]);
      }
    }
    if (*((void *)&v92 + 1))
    {
      if (*((void *)&v92 + 1) == *((void *)&v81 + 1))
      {
        long long v27 = (uint64_t *)v92;
        if (!(void)v92) {
          goto LABEL_88;
        }
        while (1)
        {
          __n128 v39 = (const void **)(v27 + 2);
          char v40 = sub_13A8C(&v80, (uint64_t)(v27 + 2));
          if (!v40) {
            break;
          }
          uint64_t v41 = *((unsigned __int8 *)v27 + 39);
          if ((v41 & 0x80u) == 0) {
            uint64_t v42 = *((unsigned __int8 *)v27 + 39);
          }
          else {
            uint64_t v42 = v27[3];
          }
          uint64_t v43 = *((unsigned __int8 *)v40 + 39);
          int v44 = (char)v43;
          if ((v43 & 0x80u) != 0) {
            uint64_t v43 = v40[3];
          }
          if (v42 != v43) {
            break;
          }
          uint64_t v47 = v40[2];
          __n128 v45 = v40 + 2;
          char v46 = (unsigned __int8 *)v47;
          if (v44 >= 0) {
            char v48 = v45;
          }
          else {
            char v48 = (uint64_t *)v46;
          }
          if ((v41 & 0x80) != 0)
          {
            if (memcmp(*v39, v48, v27[3])) {
              break;
            }
          }
          else if (*((unsigned char *)v27 + 39))
          {
            while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v48)
            {
              __n128 v39 = (const void **)((char *)v39 + 1);
              char v48 = (uint64_t *)((char *)v48 + 1);
              if (!--v41) {
                goto LABEL_130;
              }
            }
            break;
          }
LABEL_130:
          long long v27 = (uint64_t *)*v27;
          if (!v27) {
            goto LABEL_88;
          }
        }
      }
      sub_D99474("Got an EV request where the (unexpected) provided consumption model parameters do not match the model parameters for the model with id ", (uint64_t)&v86);
      v72.n128_u64[0] = 2;
      v72.n128_u64[1] = (unint64_t)&off_2439090;
      v94[0].n128_u8[0] = 11;
      if (SHIBYTE(v75[0]) < 0)
      {
        sub_4200(&v94[0].n128_u8[8], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(__n128 *)((char *)v94 + 8) = *(__n128 *)__p;
        v94[1].n128_u64[1] = (unint64_t)v75[0];
      }
      sub_3E7DA4(v88, (uint64_t)v94, 1uLL);
      sub_3E787C(a3, &v72, (__n128 *)v88);
      sub_C725D8((void **)v88);
      if (v94[1].n128_i8[15] < 0) {
        operator delete((void *)v94[0].n128_u64[1]);
      }
      if ((SHIBYTE(v75[0]) & 0x80000000) == 0) {
        goto LABEL_193;
      }
      int v49 = __p[0];
LABEL_192:
      operator delete(v49);
LABEL_193:
      __n128 v57 = (void **)v92;
      if ((void)v92)
      {
        do
        {
          uint64_t v61 = (void **)*v57;
          if (*((char *)v57 + 39) < 0) {
            operator delete(v57[2]);
          }
          operator delete(v57);
          __n128 v57 = v61;
        }
        while (v61);
      }
      unint64_t v58 = (void *)__dst.n128_u64[0];
      __dst.n128_u64[0] = 0;
      if (v58) {
        operator delete(v58);
      }
      goto LABEL_196;
    }
LABEL_88:
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v75 = 0u;
    int v76 = 1065353216;
    v94[1].n128_u8[7] = 18;
    strcpy((char *)v94, "vehicle_parameters");
    uint64_t v28 = sub_58070(v8, (uint64_t)v94);
    if (v28 && *((_DWORD *)v28 + 12) == 2) {
      char v29 = (__n128 *)v28[5];
    }
    else {
      char v29 = &v83;
    }
    if (v94[1].n128_i8[7] < 0) {
      operator delete((void *)v94[0].n128_u64[0]);
    }
    for (k = v29 + 1; ; sub_24AFC((uint64_t)__p, (uint64_t)&k[1], (uint64_t)&k[1]))
    {
      k = (__n128 *)k->n128_u64[0];
      if (!k) {
        break;
      }
    }
    if (*(void *)(v7 + 24) <= 0x64uLL)
    {
      __n128 v72 = 0uLL;
      uint64_t v73 = 0;
      unint64_t v35 = (void *)*v16;
      if (!*v16) {
        goto LABEL_155;
      }
      do
      {
        if (*((char *)v35 + 39) < 0)
        {
          sub_4200(v88, (void *)v35[2], v35[3]);
        }
        else
        {
          *(_OWORD *)__n128 v88 = *((_OWORD *)v35 + 1);
          *(void *)&v88[16] = v35[4];
        }
        sub_54A68((uint64_t)&v89, (uint64_t)(v35 + 5));
        sub_D98788((uint64_t)v88, (uint64_t)&v86, v94);
        sub_5521C((uint64_t *)v90, &v89);
        if ((v88[23] & 0x80000000) != 0) {
          operator delete(*(void **)v88);
        }
        sub_3E7ED8((void **)&v72, (char *)v72.n128_u64[1], (unsigned char *)v94[1].n128_u64[0], (unsigned char *)v94[1].n128_u64[1], (uint64_t)(v94[1].n128_u64[1] - v94[1].n128_u64[0]) >> 5);
        unint64_t v37 = v94[1].n128_u64[0];
        if (v94[1].n128_u64[0])
        {
          unint64_t v38 = v94[1].n128_u64[1];
          long long v36 = (void *)v94[1].n128_u64[0];
          if (v94[1].n128_u64[1] != v94[1].n128_u64[0])
          {
            do
            {
              if (*(char *)(v38 - 1) < 0) {
                operator delete(*(void **)(v38 - 24));
              }
              v38 -= 32;
            }
            while (v38 != v37);
            long long v36 = (void *)v94[1].n128_u64[0];
          }
          v94[1].n128_u64[1] = v37;
          operator delete(v36);
        }
        unint64_t v35 = (void *)*v35;
      }
      while (v35);
      if (v72.n128_u64[0] == v72.n128_u64[1])
      {
LABEL_155:
        memset(v94, 0, sizeof(v94));
        unsigned int v95 = 1065353216;
        while (1)
        {
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            break;
          }
          sub_24AFC((uint64_t)v94, (uint64_t)(v16 + 2), (uint64_t)(v16 + 2));
        }
        if (!sub_D99388((uint64_t)v94, __p)) {
          sub_9BC54();
        }
        sub_D99828("Got an EV request where the provided consumption model vehicle parameters do not match the approved vehicle parameters for the model with id ", (uint64_t)&v86);
        *(void *)&long long v69 = 2;
        *((void *)&v69 + 1) = &off_2439090;
        v88[0] = 11;
        if (SHIBYTE(v71) < 0)
        {
          sub_4200(&v88[8], v70[0], (unint64_t)v70[1]);
        }
        else
        {
          *(_OWORD *)&v88[8] = *(_OWORD *)v70;
          uint64_t v89 = v71;
        }
        sub_3E7DA4(&v68, (uint64_t)v88, 1uLL);
        sub_3E787C(a3, &v69, &v68);
        sub_C725D8((void **)&v68);
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)&v88[8]);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete(v70[0]);
        }
        sub_3A4C2C((uint64_t)v94);
      }
      else
      {
        v94[0].n128_u64[0] = 2;
        v94[0].n128_u64[1] = (unint64_t)&off_2439090;
        sub_3E7830(a3, v94, (uint64_t *)&v72);
      }
      unint64_t v54 = v72.n128_u64[0];
      if (v72.n128_u64[0])
      {
        unint64_t v55 = v72.n128_u64[1];
        uint64_t v53 = (void *)v72.n128_u64[0];
        if (v72.n128_u64[1] != v72.n128_u64[0])
        {
          do
          {
            if (*(char *)(v55 - 1) < 0) {
              operator delete(*(void **)(v55 - 24));
            }
            v55 -= 32;
          }
          while (v55 != v54);
          uint64_t v53 = (void *)v72.n128_u64[0];
        }
        v72.n128_u64[1] = v54;
        goto LABEL_189;
      }
    }
    else
    {
      sub_D99640("Got an EV request with consumption model id ", (uint64_t)&v86, " where the number of vehicle parameters exceeds limitations");
      v70[0] = &def_332C + 2;
      v70[1] = &off_2439090;
      v94[0].n128_u8[0] = 11;
      if ((v88[23] & 0x80000000) != 0)
      {
        sub_4200(&v94[0].n128_u8[8], *(void **)v88, *(unint64_t *)&v88[8]);
      }
      else
      {
        *(__n128 *)((char *)v94 + 8) = *(__n128 *)v88;
        v94[1].n128_u64[1] = *(void *)&v88[16];
      }
      sub_3E7DA4(&v72, (uint64_t)v94, 1uLL);
      sub_3E787C(a3, v70, &v72);
      unint64_t v50 = v72.n128_u64[0];
      if (v72.n128_u64[0])
      {
        unint64_t v51 = v72.n128_u64[1];
        char v52 = (void *)v72.n128_u64[0];
        if (v72.n128_u64[1] != v72.n128_u64[0])
        {
          do
          {
            if (*(char *)(v51 - 1) < 0) {
              operator delete(*(void **)(v51 - 24));
            }
            v51 -= 32;
          }
          while (v51 != v50);
          char v52 = (void *)v72.n128_u64[0];
        }
        v72.n128_u64[1] = v50;
        operator delete(v52);
      }
      if (v94[1].n128_i8[15] < 0) {
        operator delete((void *)v94[0].n128_u64[1]);
      }
      if ((v88[23] & 0x80000000) != 0)
      {
        uint64_t v53 = *(void **)v88;
LABEL_189:
        operator delete(v53);
      }
    }
    uint64_t v56 = (void **)v75[0];
    if (v75[0])
    {
      do
      {
        unint64_t v62 = (void **)*v56;
        if (*((char *)v56 + 39) < 0) {
          operator delete(v56[2]);
        }
        operator delete(v56);
        uint64_t v56 = v62;
      }
      while (v62);
    }
    int v49 = __p[0];
    __p[0] = 0;
    if (!v49) {
      goto LABEL_193;
    }
    goto LABEL_192;
  }
  sub_D9914C("Got an EV request with consumption model id ", (uint64_t)&v86, " where the number of (unexpected) model parameters exceeds limitations");
  *(void *)__n128 v88 = 2;
  *(void *)&v88[8] = &off_2439090;
  v94[0].n128_u8[0] = 11;
  if (SBYTE7(v92) < 0)
  {
    sub_4200(&v94[0].n128_u8[8], (void *)__dst.n128_u64[0], __dst.n128_u64[1]);
  }
  else
  {
    *(__n128 *)((char *)v94 + 8) = __dst;
    v94[1].n128_u64[1] = v92;
  }
  sub_3E7DA4(__p, (uint64_t)v94, 1uLL);
  sub_3E787C(a3, v88, (__n128 *)__p);
  long long v30 = (void **)__p[0];
  if (__p[0])
  {
    long long v31 = (void **)__p[1];
    uint64_t v32 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 4;
      }
      while (v31 != v30);
      uint64_t v32 = __p[0];
    }
    __p[1] = v30;
    operator delete(v32);
  }
  if (v94[1].n128_i8[15] < 0) {
    operator delete((void *)v94[0].n128_u64[1]);
  }
  if (SBYTE7(v92) < 0)
  {
    uint64_t v33 = (char *)__dst.n128_u64[0];
LABEL_210:
    operator delete(v33);
  }
LABEL_211:
  long long v63 = (void **)v81;
  if ((void)v81)
  {
    do
    {
      unint64_t v66 = (void **)*v63;
      if (*((char *)v63 + 39) < 0) {
        operator delete(v63[2]);
      }
      operator delete(v63);
      long long v63 = v66;
    }
    while (v66);
  }
  unint64_t v64 = (void *)v80.n128_u64[0];
  v80.n128_u64[0] = 0;
  if (v64) {
    operator delete(v64);
  }
  int v65 = (void **)v84;
  if ((void)v84)
  {
    do
    {
      long long v67 = (void **)*v65;
      sub_55198((uint64_t)(v65 + 5));
      if (*((char *)v65 + 39) < 0) {
        operator delete(v65[2]);
      }
      operator delete(v65);
      int v65 = v67;
    }
    while (v67);
  }
  unint64_t v25 = (void *)v83.n128_u64[0];
  v83.n128_u64[0] = 0;
  if (v25) {
LABEL_216:
  }
    operator delete(v25);
LABEL_217:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
}

void sub_D96EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_3A4C2C(v60 - 160);
  sub_C725D8(&a25);
  sub_3A4C2C((uint64_t)&a28);
  sub_3A4C2C(v60 - 208);
  sub_C725D8(&a36);
  sub_3A4C2C((uint64_t)&a39);
  sub_5450C((uint64_t)&a45);
  if (a59 < 0) {
    operator delete(*(void **)(v59 + 120));
  }
  _Unwind_Resume(a1);
}

void sub_D9727C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v62 = 0u;
  long long v63 = 0u;
  int v64 = 1065353216;
  v68[1].n128_u8[7] = 8;
  strcpy((char *)v68, "model_id");
  unsigned int v6 = sub_31AC04(a1, (uint64_t)v68);
  unsigned int v61 = v6;
  if (v68[1].n128_i8[7] < 0)
  {
    operator delete((void *)v68[0].n128_u64[0]);
    unsigned int v6 = v61;
  }
  std::to_string(&v60, v6);
  if (!sub_58070(a2, (uint64_t)&v60))
  {
    sub_D99BC0("Got an EV request with an unknown charging_arguments.model_id (", (uint64_t)&v61, ").");
    __p.n128_u64[0] = 2;
    __p.n128_u64[1] = (unint64_t)&off_2439090;
    v68[0].n128_u8[0] = 11;
    if (SBYTE7(v58) < 0)
    {
      sub_4200(&v68[0].n128_u8[8], v57[0], (unint64_t)v57[1]);
    }
    else
    {
      *(__n128 *)((char *)v68 + 8) = *(__n128 *)v57;
      v68[1].n128_u64[1] = v58;
    }
    sub_3E7DA4(__dst, (uint64_t)v68, 1uLL);
    sub_3E787C(a3, &__p, (__n128 *)__dst);
    uint64_t v19 = *(void *)__dst;
    if (!*(void *)__dst) {
      goto LABEL_59;
    }
    uint64_t v20 = *(void *)&__dst[8];
    unint64_t v21 = *(void **)__dst;
    if (*(void *)&__dst[8] == *(void *)__dst) {
      goto LABEL_58;
    }
    do
    {
      if (*(char *)(v20 - 1) < 0) {
        operator delete(*(void **)(v20 - 24));
      }
      v20 -= 32;
    }
    while (v20 != v19);
    goto LABEL_57;
  }
  v68[1].n128_u8[7] = 18;
  strcpy((char *)v68, "vehicle_parameters");
  uint64_t v7 = sub_560F4(a1, (uint64_t)v68);
  if (v68[1].n128_i8[7] < 0) {
    operator delete((void *)v68[0].n128_u64[0]);
  }
  size_t v8 = (void *)sub_560F4(a2, (uint64_t)&v60);
  v68[1].n128_u8[7] = 8;
  strcpy((char *)v68, "disabled");
  size_t v9 = sub_58070(v8, (uint64_t)v68);
  if (v9)
  {
    BOOL v10 = *((_DWORD *)v9 + 12) == 4;
    if ((v68[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_14:
    operator delete((void *)v68[0].n128_u64[0]);
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  BOOL v10 = 0;
  if (v68[1].n128_i8[7] < 0) {
    goto LABEL_14;
  }
LABEL_8:
  if (v10)
  {
LABEL_9:
    sub_D99BC0("Got an EV request with a disabled charging_arguments.model_id (", (uint64_t)&v61, ").");
    __p.n128_u64[0] = 2;
    __p.n128_u64[1] = (unint64_t)&off_2439090;
    v68[0].n128_u8[0] = 0;
    if (SBYTE7(v58) < 0)
    {
      sub_4200(&v68[0].n128_u8[8], v57[0], (unint64_t)v57[1]);
    }
    else
    {
      *(__n128 *)((char *)v68 + 8) = *(__n128 *)v57;
      v68[1].n128_u64[1] = v58;
    }
    sub_3E7DA4(__dst, (uint64_t)v68, 1uLL);
    sub_3E787C(a3, &__p, (__n128 *)__dst);
    uint64_t v19 = *(void *)__dst;
    if (!*(void *)__dst) {
      goto LABEL_59;
    }
    uint64_t v22 = *(void *)&__dst[8];
    unint64_t v21 = *(void **)__dst;
    if (*(void *)&__dst[8] == *(void *)__dst)
    {
LABEL_58:
      *(void *)&__dst[8] = v19;
      operator delete(v21);
LABEL_59:
      if (v68[1].n128_i8[15] < 0)
      {
        operator delete((void *)v68[0].n128_u64[1]);
        if ((SBYTE7(v58) & 0x80000000) == 0) {
          goto LABEL_135;
        }
      }
      else if ((SBYTE7(v58) & 0x80000000) == 0)
      {
        goto LABEL_135;
      }
      unint64_t v23 = v57[0];
      goto LABEL_134;
    }
    do
    {
      if (*(char *)(v22 - 1) < 0) {
        operator delete(*(void **)(v22 - 24));
      }
      v22 -= 32;
    }
    while (v22 != v19);
LABEL_57:
    unint64_t v21 = *(void **)__dst;
    goto LABEL_58;
  }
LABEL_15:
  *(_OWORD *)__n128 v57 = 0u;
  long long v58 = 0u;
  int v59 = 1065353216;
  v68[1].n128_u8[7] = 18;
  strcpy((char *)v68, "vehicle_parameters");
  BOOL v11 = sub_58070(v8, (uint64_t)v68);
  if (v11 && *((_DWORD *)v11 + 12) == 2)
  {
    size_t v12 = (long long *)v11[5];
    if (v68[1].n128_i8[7] < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    size_t v12 = &v62;
    if (v68[1].n128_i8[7] < 0) {
LABEL_20:
    }
      operator delete((void *)v68[0].n128_u64[0]);
  }
  for (uint64_t i = v12 + 1; ; sub_24AFC((uint64_t)v57, (uint64_t)(i + 2), (uint64_t)(i + 2)))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  if (*(void *)(v7 + 24) <= 0x64uLL)
  {
    __n128 __p = 0uLL;
    uint64_t v56 = 0;
    size_t v14 = (void *)(v7 + 16);
    uint64_t v15 = *(uint64_t **)(v7 + 16);
    if (!v15) {
      goto LABEL_66;
    }
    do
    {
      if (*((char *)v15 + 39) < 0)
      {
        sub_4200(__dst, (void *)v15[2], v15[3]);
      }
      else
      {
        *(_OWORD *)__n128 __dst = *((_OWORD *)v15 + 1);
        *(void *)&__dst[16] = v15[4];
      }
      sub_54A68((uint64_t)&v66, (uint64_t)(v15 + 5));
      sub_D98788((uint64_t)__dst, (uint64_t)&v60, v68);
      sub_5521C((uint64_t *)v67, &v66);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_3E7ED8((void **)&__p, (char *)__p.n128_u64[1], (unsigned char *)v68[1].n128_u64[0], (unsigned char *)v68[1].n128_u64[1], (uint64_t)(v68[1].n128_u64[1] - v68[1].n128_u64[0]) >> 5);
      unint64_t v17 = v68[1].n128_u64[0];
      if (v68[1].n128_u64[0])
      {
        unint64_t v18 = v68[1].n128_u64[1];
        uint64_t v16 = (void *)v68[1].n128_u64[0];
        if (v68[1].n128_u64[1] != v68[1].n128_u64[0])
        {
          do
          {
            if (*(char *)(v18 - 1) < 0) {
              operator delete(*(void **)(v18 - 24));
            }
            v18 -= 32;
          }
          while (v18 != v17);
          uint64_t v16 = (void *)v68[1].n128_u64[0];
        }
        v68[1].n128_u64[1] = v17;
        operator delete(v16);
      }
      uint64_t v15 = (uint64_t *)*v15;
    }
    while (v15);
    if (__p.n128_u64[0] == __p.n128_u64[1])
    {
LABEL_66:
      memset(v68, 0, sizeof(v68));
      int v69 = 1065353216;
      while (1)
      {
        size_t v14 = (void *)*v14;
        if (!v14) {
          break;
        }
        sub_24AFC((uint64_t)v68, (uint64_t)(v14 + 2), (uint64_t)(v14 + 2));
      }
      if (v68[1].n128_u64[1] == *((void *)&v58 + 1))
      {
        unint64_t v24 = v68[1].n128_u64[0];
        if (!v68[1].n128_u64[0])
        {
LABEL_71:
          sub_560F4(a2, (uint64_t)&v60);
          sub_8E350();
        }
        while (1)
        {
          char v29 = (const void **)(v24 + 16);
          long long v30 = sub_13A8C(v57, v24 + 16);
          if (!v30) {
            break;
          }
          uint64_t v31 = *(unsigned __int8 *)(v24 + 39);
          if ((v31 & 0x80u) == 0) {
            uint64_t v32 = *(unsigned __int8 *)(v24 + 39);
          }
          else {
            uint64_t v32 = *(void *)(v24 + 24);
          }
          uint64_t v33 = *((unsigned __int8 *)v30 + 39);
          int v34 = (char)v33;
          if ((v33 & 0x80u) != 0) {
            uint64_t v33 = v30[3];
          }
          if (v32 != v33) {
            break;
          }
          uint64_t v37 = v30[2];
          unint64_t v35 = v30 + 2;
          long long v36 = (unsigned __int8 *)v37;
          if (v34 >= 0) {
            unint64_t v38 = v35;
          }
          else {
            unint64_t v38 = (uint64_t *)v36;
          }
          if ((v31 & 0x80) != 0)
          {
            if (memcmp(*v29, v38, *(void *)(v24 + 24))) {
              break;
            }
          }
          else if (*(unsigned char *)(v24 + 39))
          {
            while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v38)
            {
              char v29 = (const void **)((char *)v29 + 1);
              unint64_t v38 = (uint64_t *)((char *)v38 + 1);
              if (!--v31) {
                goto LABEL_86;
              }
            }
            break;
          }
LABEL_86:
          unint64_t v24 = *(void *)v24;
          if (!v24) {
            goto LABEL_71;
          }
        }
      }
      sub_D99D94("Got an EV request where the provided charging model vehicle parameters do not match the approved vehicle parameters for the model with id ", (uint64_t)&v60);
      *(void *)&long long v52 = 2;
      *((void *)&v52 + 1) = &off_2439090;
      __dst[0] = 11;
      if (SHIBYTE(v54) < 0)
      {
        sub_4200(&__dst[8], v53[0], (unint64_t)v53[1]);
      }
      else
      {
        *(_OWORD *)&__dst[8] = *(_OWORD *)v53;
        uint64_t v66 = v54;
      }
      sub_3E7DA4(&v51, (uint64_t)__dst, 1uLL);
      sub_3E787C(a3, &v52, &v51);
      unint64_t v39 = v51.n128_u64[0];
      if (v51.n128_u64[0])
      {
        unint64_t v40 = v51.n128_u64[1];
        uint64_t v41 = (void *)v51.n128_u64[0];
        if (v51.n128_u64[1] != v51.n128_u64[0])
        {
          do
          {
            if (*(char *)(v40 - 1) < 0) {
              operator delete(*(void **)(v40 - 24));
            }
            v40 -= 32;
          }
          while (v40 != v39);
          uint64_t v41 = (void *)v51.n128_u64[0];
        }
        v51.n128_u64[1] = v39;
        operator delete(v41);
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(*(void **)&__dst[8]);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(v53[0]);
      }
      uint64_t v42 = (void **)v68[1].n128_u64[0];
      if (v68[1].n128_u64[0])
      {
        do
        {
          char v46 = (void **)*v42;
          if (*((char *)v42 + 39) < 0) {
            operator delete(v42[2]);
          }
          operator delete(v42);
          uint64_t v42 = v46;
        }
        while (v46);
      }
      uint64_t v43 = (void *)v68[0].n128_u64[0];
      v68[0].n128_u64[0] = 0;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      v68[0].n128_u64[0] = 2;
      v68[0].n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7830(a3, v68, (uint64_t *)&__p);
    }
    unint64_t v44 = __p.n128_u64[0];
    if (__p.n128_u64[0])
    {
      unint64_t v45 = __p.n128_u64[1];
      uint64_t v28 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[1] != __p.n128_u64[0])
      {
        do
        {
          if (*(char *)(v45 - 1) < 0) {
            operator delete(*(void **)(v45 - 24));
          }
          v45 -= 32;
        }
        while (v45 != v44);
        uint64_t v28 = (void *)__p.n128_u64[0];
      }
      __p.n128_u64[1] = v44;
      goto LABEL_131;
    }
  }
  else
  {
    sub_D99640("Got an EV request with consumption model id ", (uint64_t)&v60, " where the number of vehicle parameters exceeds limitations");
    v53[0] = &def_332C + 2;
    v53[1] = &off_2439090;
    v68[0].n128_u8[0] = 11;
    if ((__dst[23] & 0x80000000) != 0)
    {
      sub_4200(&v68[0].n128_u8[8], *(void **)__dst, *(unint64_t *)&__dst[8]);
    }
    else
    {
      *(__n128 *)((char *)v68 + 8) = *(__n128 *)__dst;
      v68[1].n128_u64[1] = *(void *)&__dst[16];
    }
    sub_3E7DA4(&__p, (uint64_t)v68, 1uLL);
    sub_3E787C(a3, v53, &__p);
    unint64_t v25 = __p.n128_u64[0];
    if (__p.n128_u64[0])
    {
      unint64_t v26 = __p.n128_u64[1];
      long long v27 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[1] != __p.n128_u64[0])
      {
        do
        {
          if (*(char *)(v26 - 1) < 0) {
            operator delete(*(void **)(v26 - 24));
          }
          v26 -= 32;
        }
        while (v26 != v25);
        long long v27 = (void *)__p.n128_u64[0];
      }
      __p.n128_u64[1] = v25;
      operator delete(v27);
    }
    if (v68[1].n128_i8[15] < 0) {
      operator delete((void *)v68[0].n128_u64[1]);
    }
    if ((__dst[23] & 0x80000000) != 0)
    {
      uint64_t v28 = *(void **)__dst;
LABEL_131:
      operator delete(v28);
    }
  }
  uint64_t v47 = (void **)v58;
  if ((void)v58)
  {
    do
    {
      unint64_t v50 = (void **)*v47;
      if (*((char *)v47 + 39) < 0) {
        operator delete(v47[2]);
      }
      operator delete(v47);
      uint64_t v47 = v50;
    }
    while (v50);
  }
  unint64_t v23 = v57[0];
  v57[0] = 0;
  if (v23) {
LABEL_134:
  }
    operator delete(v23);
LABEL_135:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  char v48 = (void **)v63;
  if ((void)v63)
  {
    do
    {
      int v49 = (void **)*v48;
      sub_55198((uint64_t)(v48 + 5));
      if (*((char *)v48 + 39) < 0) {
        operator delete(v48[2]);
      }
      operator delete(v48);
      char v48 = v49;
    }
    while (v49);
  }
  if ((void)v62) {
    operator delete((void *)v62);
  }
}

void sub_D97D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_3A4C2C(v43 - 160);
  sub_C725D8(&a23);
  sub_3A4C2C((uint64_t)&a26);
  if (a40 < 0) {
    operator delete(*v42);
  }
  sub_5450C((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_D97F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v12 = 11;
  sub_D98130("Got an EV request with a vehicle parameter array '", a1, "' that is empty for model id ", a2);
  unint64_t v6 = *(void *)(a3 + 8);
  if (v6 >= *(void *)(a3 + 16))
  {
    *(void *)(a3 + 8) = sub_D9E85C((char **)a3, &v12, (uint64_t)__p);
    if (SHIBYTE(v11) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 11;
    uint64_t v7 = (unsigned char *)(v6 + 8);
    if (SHIBYTE(v11) < 0)
    {
      sub_4200(v7, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v6 + 24) = v11;
      *(_OWORD *)uint64_t v7 = v8;
    }
    *(void *)(a3 + 8) = v6 + 32;
    *(void *)(a3 + 8) = v6 + 32;
    if (SHIBYTE(v11) < 0) {
      goto LABEL_8;
    }
  }
  __p[0] = &def_332C + 2;
  __p[1] = &off_2439090;
  return sub_3E7830(a4, __p, (uint64_t *)a3);
}

void sub_D98078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_D980A0(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v7 = sub_D9E85C((char **)a1, a2, a3);
    *(void *)(a1 + 8) = v7;
    return v7 - 32;
  }
  else
  {
    *(unsigned char *)unint64_t v4 = *a2;
    char v5 = (unsigned char *)(v4 + 8);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(v5, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a3;
      *(void *)(v4 + 24) = *(void *)(a3 + 16);
      *(_OWORD *)char v5 = v6;
    }
    *(void *)(a1 + 8) = v4 + 32;
    *(void *)(a1 + 8) = v4 + 32;
    return (char *)v4;
  }
}

void sub_D98128(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D98130(const char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  sub_E1B4((uint64_t)v18);
  size_t v8 = strlen(a1);
  sub_188FC78(v19, (uint64_t)a1, v8);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  sub_188FC78(v19, v10, v11);
  size_t v12 = strlen(a3);
  sub_188FC78(v19, (uint64_t)a3, v12);
  int v13 = *(char *)(a4 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)a4;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  sub_188FC78(v19, v14, v15);
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9831C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D98330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D98344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v12 = 11;
  sub_D9845C("Got an EV request with a vehicle parameter array '", a1, "' that exceeds the dimension limits for model id ", a2);
  unint64_t v6 = *(void *)(a3 + 8);
  if (v6 >= *(void *)(a3 + 16))
  {
    *(void *)(a3 + 8) = sub_D9E85C((char **)a3, &v12, (uint64_t)__p);
    if (SHIBYTE(v11) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 11;
    uint64_t v7 = (unsigned char *)(v6 + 8);
    if (SHIBYTE(v11) < 0)
    {
      sub_4200(v7, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v6 + 24) = v11;
      *(_OWORD *)uint64_t v7 = v8;
    }
    *(void *)(a3 + 8) = v6 + 32;
    *(void *)(a3 + 8) = v6 + 32;
    if (SHIBYTE(v11) < 0) {
      goto LABEL_8;
    }
  }
  __p[0] = &def_332C + 2;
  __p[1] = &off_2439090;
  return sub_3E7830(a4, __p, (uint64_t *)a3);
}

void sub_D98434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D9845C(const char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  sub_E1B4((uint64_t)v18);
  size_t v8 = strlen(a1);
  sub_188FC78(v19, (uint64_t)a1, v8);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  sub_188FC78(v19, v10, v11);
  size_t v12 = strlen(a3);
  sub_188FC78(v19, (uint64_t)a3, v12);
  int v13 = *(char *)(a4 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)a4;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  sub_188FC78(v19, v14, v15);
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D98648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D98670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v12 = 11;
  sub_D9845C("Got an EV request with a vehicle parameter array '", a1, "' including an unexpected value type for model id", a2);
  unint64_t v6 = *(void *)(a3 + 8);
  if (v6 >= *(void *)(a3 + 16))
  {
    *(void *)(a3 + 8) = sub_D9E85C((char **)a3, &v12, (uint64_t)__p);
    if (SHIBYTE(v11) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 11;
    uint64_t v7 = (unsigned char *)(v6 + 8);
    if (SHIBYTE(v11) < 0)
    {
      sub_4200(v7, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v6 + 24) = v11;
      *(_OWORD *)uint64_t v7 = v8;
    }
    *(void *)(a3 + 8) = v6 + 32;
    *(void *)(a3 + 8) = v6 + 32;
    if (SHIBYTE(v11) < 0) {
      goto LABEL_8;
    }
  }
  __p[0] = &def_332C + 2;
  __p[1] = &off_2439090;
  return sub_3E7830(a4, __p, (uint64_t *)a3);
}

void sub_D98760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D98788(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __p[0] = 0;
  __p[1] = &off_2439090;
  sub_3E7814(&v26, (__n128 *)__p);
  unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6 < 0x65) {
    goto LABEL_9;
  }
  LOBYTE(v23) = 11;
  sub_D98B98("Got an EV request with a vehicle parameter name that exceeds the max character length for model id ", a2);
  uint64_t v7 = v28;
  if ((unint64_t)v28 >= v29)
  {
    uint64_t v28 = sub_D9E85C((char **)&v27, (char *)&v23, (uint64_t)__p);
    if (SHIBYTE(v25) < 0) {
      goto LABEL_22;
    }
    goto LABEL_9;
  }
  *uint64_t v28 = v23;
  long long v8 = v7 + 8;
  if (SHIBYTE(v25) < 0)
  {
    sub_4200(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v28 = v7 + 32;
    if (SHIBYTE(v25) < 0) {
      goto LABEL_22;
    }
LABEL_9:
    int v10 = *(_DWORD *)(a1 + 32);
    if (v10 == 3) {
      goto LABEL_23;
    }
    goto LABEL_10;
  }
  long long v9 = *(_OWORD *)__p;
  *((void *)v7 + 3) = v25;
  *(_OWORD *)long long v8 = v9;
  uint64_t v28 = v7 + 32;
  if ((SHIBYTE(v25) & 0x80000000) == 0) {
    goto LABEL_9;
  }
LABEL_22:
  operator delete(__p[0]);
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10 == 3)
  {
LABEL_23:
    uint64_t v14 = *(char ***)(a1 + 24);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (v15 != v16)
    {
      if ((unint64_t)(v16 - v15) > 0x320)
      {
LABEL_25:
        sub_D98344(a1, a2, (uint64_t)&v27, (uint64_t)a3);
        goto LABEL_36;
      }
      while (1)
      {
        int v17 = *((_DWORD *)v15 + 2);
        if (v17 != 1) {
          break;
        }
LABEL_26:
        v15 += 16;
        if (v15 == v16) {
          goto LABEL_20;
        }
      }
      if (v17 != 3) {
        goto LABEL_35;
      }
      uint64_t v18 = **(void **)v15;
      uint64_t v19 = *(void *)(*(void *)v15 + 8);
      if (v18 != v19)
      {
        if ((unint64_t)(v19 - v18) > 0x320) {
          goto LABEL_25;
        }
        while (*(_DWORD *)(v18 + 8) == 1)
        {
          v18 += 16;
          if (v18 == v19) {
            goto LABEL_26;
          }
        }
LABEL_35:
        sub_D98670(a1, a2, (uint64_t)&v27, (uint64_t)a3);
        goto LABEL_36;
      }
    }
    sub_D97F88(a1, a2, (uint64_t)&v27, (uint64_t)a3);
    goto LABEL_36;
  }
LABEL_10:
  if (v10 != 1)
  {
    LOBYTE(v23) = 11;
    sub_D98D64("Got an EV request with a vehicle parameter '", a1, "' with an invalid value type for model id ", a2);
    uint64_t v11 = v28;
    if ((unint64_t)v28 >= v29)
    {
      uint64_t v28 = sub_D9E85C((char **)&v27, (char *)&v23, (uint64_t)__p);
      if (SHIBYTE(v25) < 0) {
        goto LABEL_18;
      }
    }
    else
    {
      *uint64_t v28 = 11;
      char v12 = v11 + 8;
      if (SHIBYTE(v25) < 0)
      {
        sub_4200(v12, __p[0], (unint64_t)__p[1]);
        uint64_t v28 = v11 + 32;
        if ((SHIBYTE(v25) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      long long v13 = *(_OWORD *)__p;
      *((void *)v11 + 3) = v25;
      *(_OWORD *)char v12 = v13;
      uint64_t v28 = v11 + 32;
      if (SHIBYTE(v25) < 0) {
LABEL_18:
      }
        operator delete(__p[0]);
    }
LABEL_19:
    __p[0] = &def_332C + 2;
    __p[1] = &off_2439090;
    sub_3E7830((uint64_t)a3, __p, (uint64_t *)&v27);
    goto LABEL_36;
  }
  if (v27 == v28)
  {
LABEL_20:
    __p[0] = 0;
    __p[1] = &off_2439090;
    sub_3E7814(a3, (__n128 *)__p);
  }
  else
  {
    *(void *)&long long v23 = 2;
    *((void *)&v23 + 1) = &off_2439090;
    sub_3E7830((uint64_t)a3, &v23, (uint64_t *)&v27);
  }
LABEL_36:
  char v20 = (char *)v27;
  if (v27)
  {
    unint64_t v21 = v28;
    uint64_t v22 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*(v21 - 1) < 0) {
          operator delete(*((void **)v21 - 3));
        }
        v21 -= 32;
      }
      while (v21 != v20);
      uint64_t v22 = v27;
    }
    uint64_t v28 = v20;
    operator delete(v22);
  }
}

void sub_D98B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

uint64_t sub_D98B98(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D98D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D98D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D98D64(const char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  sub_E1B4((uint64_t)v18);
  size_t v8 = strlen(a1);
  sub_188FC78(v19, (uint64_t)a1, v8);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  sub_188FC78(v19, v10, v11);
  size_t v12 = strlen(a3);
  sub_188FC78(v19, (uint64_t)a3, v12);
  int v13 = *(char *)(a4 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)a4;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  sub_188FC78(v19, v14, v15);
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D98F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D98F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D98F78(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9914C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9930C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99334(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_D99388(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 1;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      size_t v4 = (const void **)(v2 + 2);
      size_t v5 = sub_13A8C(a2, (uint64_t)(v2 + 2));
      if (!v5) {
        return 1;
      }
      uint64_t v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)v2 + 39);
      }
      else {
        uint64_t v7 = v2[3];
      }
      uint64_t v8 = *((unsigned __int8 *)v5 + 39);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = v5[3];
      }
      if (v7 != v8) {
        return 1;
      }
      uint64_t v12 = v5[2];
      size_t v10 = v5 + 2;
      uint64_t v11 = (unsigned __int8 *)v12;
      if (v9 >= 0) {
        int v13 = v10;
      }
      else {
        int v13 = (uint64_t *)v11;
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*v4, v13, v2[3])) {
          return 1;
        }
      }
      else if (*((unsigned char *)v2 + 39))
      {
        while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v13)
        {
          size_t v4 = (const void **)((char *)v4 + 1);
          int v13 = (uint64_t *)((char *)v13 + 1);
          if (!--v6) {
            goto LABEL_5;
          }
        }
        return 1;
      }
LABEL_5:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_D99474(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9962C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99640(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99828(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D999CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D999E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D999F4(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99BC0(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99D94(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D99F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D99F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D99F60(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9A120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9A134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9A148(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9A308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9A31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9A330(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9A4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9A504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9A518(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v25[0] = 0;
  v25[1] = &off_2439090;
  sub_3E7814((__n128 *)a3, (__n128 *)v25);
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    LOBYTE(v25[0]) = 10;
    unint64_t v6 = *(void *)(a3 + 24);
    if (v6 >= *(void *)(a3 + 32))
    {
      int v7 = sub_D9EB34((char **)(a3 + 16), (char *)v25, "Got an EV request where a route leg is missing EVStateInfo.remaining_battery_percentage.");
    }
    else
    {
      sub_D9ECBC(a3 + 32, *(unsigned char **)(a3 + 24), (char *)v25, "Got an EV request where a route leg is missing EVStateInfo.remaining_battery_percentage.");
      int v7 = (char *)(v6 + 32);
      *(void *)(a3 + 24) = v6 + 32;
    }
    *(void *)(a3 + 24) = v7;
    if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
      goto LABEL_10;
    }
LABEL_38:
    LOBYTE(v25[0]) = 10;
    unint64_t v19 = *(void *)(a3 + 24);
    if (v19 >= *(void *)(a3 + 32))
    {
      *(void *)(a3 + 24) = sub_D9EDF0((char **)(a3 + 16), (char *)v25, "Got an EV request where a route leg is missing EVStateInfo.remaining_battery_charge.");
    }
    else
    {
      sub_D9EF78(a3 + 32, *(unsigned char **)(a3 + 24), (char *)v25, "Got an EV request where a route leg is missing EVStateInfo.remaining_battery_charge.");
      *(void *)(a3 + 24) = v19 + 32;
      *(void *)(a3 + 24) = v19 + 32;
    }
    goto LABEL_41;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 24);
  if (v8 < 0x65) {
    goto LABEL_37;
  }
  LOBYTE(v21) = 10;
  LODWORD(__p) = v8;
  sub_D9AA84("Got an EV request where a route leg has a EVStateInfo.remaining_battery_percentage of ", (uint64_t)&__p, " > 100.");
  unint64_t v9 = *(void *)(a3 + 24);
  if (v9 >= *(void *)(a3 + 32))
  {
    *(void *)(a3 + 24) = sub_D9E85C((char **)(a3 + 16), (char *)&v21, (uint64_t)v25);
    if (SHIBYTE(v26) < 0) {
      goto LABEL_44;
    }
LABEL_37:
    if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
      goto LABEL_38;
    }
    goto LABEL_10;
  }
  *(unsigned char *)unint64_t v9 = v21;
  size_t v10 = (unsigned char *)(v9 + 8);
  if (SHIBYTE(v26) < 0)
  {
    sub_4200(v10, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    long long v11 = *(_OWORD *)v25;
    *(void *)(v9 + 24) = v26;
    *(_OWORD *)size_t v10 = v11;
  }
  *(void *)(a3 + 24) = v9 + 32;
  *(void *)(a3 + 24) = v9 + 32;
  if ((SHIBYTE(v26) & 0x80000000) == 0) {
    goto LABEL_37;
  }
LABEL_44:
  operator delete(v25[0]);
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    goto LABEL_38;
  }
LABEL_10:
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  if (v12 >= *(_DWORD *)(a2 + 84))
  {
    if (v12 <= *(_DWORD *)(a2 + 76) || !sub_723EC(1u)) {
      goto LABEL_41;
    }
    sub_6BAC((uint64_t)v25);
    int v16 = *(_DWORD *)(a1 + 28);
    int v20 = *(_DWORD *)(a2 + 76);
    int v21 = v16;
    sub_D9AE60("Got an EV request where a route leg has a EVStateInfo.remaining_battery_charge of ", (uint64_t)&v21, " which is greater than the EVInfo.max_battery_charge of ", (uint64_t)&v20, ".");
    if ((v24 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v18 = v24;
    }
    else {
      uint64_t v18 = v23;
    }
    sub_188FC78(v25, (uint64_t)p_p, v18);
    if ((char)v24 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (!sub_723EC(1u)) {
      goto LABEL_41;
    }
    sub_6BAC((uint64_t)v25);
    int v13 = *(_DWORD *)(a1 + 28);
    int v20 = *(_DWORD *)(a2 + 84);
    int v21 = v13;
    sub_D9AC58("Got an EV request where a route leg has an EVStateInfo.remaining_battery_charge (", (uint64_t)&v21, ") which is less than the minimum battery capacity (", (uint64_t)&v20, ".");
    if ((v24 & 0x80u) == 0) {
      uint64_t v14 = &__p;
    }
    else {
      uint64_t v14 = __p;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v15 = v24;
    }
    else {
      uint64_t v15 = v23;
    }
    sub_188FC78(v25, (uint64_t)v14, v15);
    if ((char)v24 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 1u);
  if ((char)v24 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_41:
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D9A94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v22 + 24) = v23;
  if (a22 < 0)
  {
    operator delete(__p);
    sub_C7E3C8(v22);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_D9AA84(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9AC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9AC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9AC58(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9AE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9AE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9AE60(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9B040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9B054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9B068()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  v66.n128_u64[0] = 0;
  v66.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(v6, &v66);
  int v59 = (char **)&v7[1];
  if (*(_DWORD *)(v5 + 104) == 2 && (*(unsigned char *)(v5 + 16) & 0x10) == 0)
  {
    v66.n128_u8[0] = 10;
    unint64_t v8 = v7[1].n128_u64[1];
    if (v8 >= v7[2].n128_u64[0])
    {
      size_t v9 = sub_D9F0AC(v59, (char *)&v66, "Got an EV request with a WaypointInfo that has source SERVICE but misses the EV charging info.");
    }
    else
    {
      sub_D9F234(v7 + 32, (unsigned char *)v7[1].n128_u64[1], (char *)&v66, "Got an EV request with a WaypointInfo that has source SERVICE but misses the EV charging info.");
      size_t v9 = (char *)(v8 + 32);
      v7[1].n128_u64[1] = v8 + 32;
    }
    v7[1].n128_u64[1] = (unint64_t)v9;
  }
  int v10 = *(_DWORD *)(v5 + 16);
  if ((v10 & 0x10) != 0)
  {
    if ((v10 & 2) == 0)
    {
      v66.n128_u8[0] = 10;
      unint64_t v11 = v7[1].n128_u64[1];
      if (v11 >= v7[2].n128_u64[0])
      {
        unsigned int v12 = sub_D9F368(v59, (char *)&v66, "Got an EV request with a WaypointInfo missing the position parameter.");
      }
      else
      {
        sub_D9F4F0(v7 + 32, (unsigned char *)v7[1].n128_u64[1], (char *)&v66, "Got an EV request with a WaypointInfo missing the position parameter.");
        unsigned int v12 = (char *)(v11 + 32);
        v7[1].n128_u64[1] = v11 + 32;
      }
      v7[1].n128_u64[1] = (unint64_t)v12;
      int v10 = *(_DWORD *)(v5 + 16);
    }
    if ((v10 & 0x200) == 0)
    {
      v66.n128_u8[0] = 10;
      unint64_t v13 = v7[1].n128_u64[1];
      if (v13 >= v7[2].n128_u64[0])
      {
        uint64_t v14 = sub_D9F624(v59, (char *)&v66, "Got an EV request with a WaypointInfo that has an EVChargingInfo set but no MUID referencing the charging station.");
      }
      else
      {
        sub_D9F7AC(v7 + 32, (unsigned char *)v7[1].n128_u64[1], (char *)&v66, "Got an EV request with a WaypointInfo that has an EVChargingInfo set but no MUID referencing the charging station.");
        uint64_t v14 = (char *)(v13 + 32);
        v7[1].n128_u64[1] = v13 + 32;
      }
      v7[1].n128_u64[1] = (unint64_t)v14;
    }
    uint64_t v64 = 0;
    int v65 = 0;
    *(void *)__src = operator new(0x20uLL);
    *(_OWORD *)&__src[8] = xmmword_20B91A0;
    strcpy(*(char **)__src, "LiveEVChargingStationFacade");
    uint64_t v70 = 0;
    __n128 __p = 0;
    uint64_t v71 = 0;
    char v15 = sub_374CDC((uint64_t)v2, (uint64_t)__src, (uint64_t *)&__p);
    int v16 = (uint64_t *)sub_374CE4(v2);
    int v17 = (std::__shared_weak_count *)v16[1];
    uint64_t v62 = *v16;
    long long v63 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_28CC5C((uint64_t *)&v66, &v64, v15, (uint64_t)&v62);
    uint64_t v18 = v63;
    if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    unint64_t v19 = (void **)__p;
    if (__p)
    {
      int v20 = v70;
      int v21 = __p;
      if (v70 != __p)
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        int v21 = __p;
      }
      uint64_t v70 = v19;
      operator delete(v21);
    }
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
    uint64_t v22 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v64 = nullsub_1(*(void *)(v5 + 96));
    unint64_t v23 = sub_28CD20((uint64_t *)&v66, v64);
    if (v23 > 0xFFFFFFFEFFFFFFFFLL || !v23)
    {
      LOBYTE(v61) = 10;
      __n128 __p = *(void **)(v5 + 96);
      sub_D9C048("Got an EV request with a WaypointInfo that has an unknown MUID (", (uint64_t)&__p, ", decrypted: ", (uint64_t)&v64, ").");
      unint64_t v24 = v7[1].n128_u64[1];
      if (v24 >= v7[2].n128_u64[0])
      {
        v7[1].n128_u64[1] = (unint64_t)sub_D9E85C(v59, (char *)&v61, (uint64_t)__src);
        if ((__src[23] & 0x80000000) == 0) {
          goto LABEL_42;
        }
        goto LABEL_133;
      }
      *(unsigned char *)unint64_t v24 = v61;
      uint64_t v25 = (unsigned char *)(v24 + 8);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_4200(v25, *(void **)__src, *(unint64_t *)&__src[8]);
      }
      else
      {
        long long v26 = *(_OWORD *)__src;
        *(void *)(v24 + 24) = *(void *)&__src[16];
        *(_OWORD *)uint64_t v25 = v26;
      }
      v7[1].n128_u64[1] = v24 + 32;
      v7[1].n128_u64[1] = v24 + 32;
      if ((__src[23] & 0x80000000) != 0) {
LABEL_133:
      }
        operator delete(*(void **)__src);
    }
LABEL_42:
    if (*(void *)(v5 + 56)) {
      long long v27 = *(uint64_t (****)())(v5 + 56);
    }
    else {
      long long v27 = &off_2535270;
    }
    if (((_BYTE)v27[2] & 2) != 0)
    {
      if (*((_DWORD *)v27 + 8) >> 8 >= 0x2A3u && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)__src);
        sub_188FC78(__src, (uint64_t)"Got an EV request with a WaypointInfo where EVChargingInfo.charging_time is more than two days.", 95);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (SHIBYTE(v71) < 0) {
          operator delete(__p);
        }
        if (v74 < 0) {
          operator delete(v73);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (((_BYTE)v27[2] & 4) != 0) {
        goto LABEL_60;
      }
    }
    else
    {
      __src[0] = 10;
      unint64_t v28 = v7[1].n128_u64[1];
      if (v28 >= v7[2].n128_u64[0])
      {
        v7[1].n128_u64[1] = (unint64_t)sub_D9F8E0(v59, __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.charging_time.");
        if (((_BYTE)v27[2] & 4) != 0)
        {
LABEL_60:
          if (*((_DWORD *)v27 + 9) < 0x65u) {
            goto LABEL_67;
          }
          __src[0] = 10;
          unint64_t v29 = v7[1].n128_u64[1];
          if (v29 >= v7[2].n128_u64[0])
          {
            long long v30 = sub_D9FE58(v59, __src, "Got an EV request with a WaypointInfo where EVChargingInfo.battery_percentage_after_charging > 100%.");
            goto LABEL_66;
          }
          sub_D9FFE0(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo where EVChargingInfo.battery_percentage_after_charging > 100%.");
          goto LABEL_63;
        }
      }
      else
      {
        sub_D9FA68(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.charging_time.");
        v7[1].n128_u64[1] = v28 + 32;
        v7[1].n128_u64[1] = v28 + 32;
        if (((_BYTE)v27[2] & 4) != 0) {
          goto LABEL_60;
        }
      }
    }
    __src[0] = 10;
    unint64_t v29 = v7[1].n128_u64[1];
    if (v29 >= v7[2].n128_u64[0])
    {
      long long v30 = sub_D9FB9C(v59, __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.battery_percentage_after_charging.");
      goto LABEL_66;
    }
    sub_D9FD24(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.battery_percentage_after_charging.");
LABEL_63:
    long long v30 = (char *)(v29 + 32);
    v7[1].n128_u64[1] = v29 + 32;
LABEL_66:
    v7[1].n128_u64[1] = (unint64_t)v30;
LABEL_67:
    if (((_BYTE)v27[2] & 8) == 0)
    {
      __src[0] = 10;
      unint64_t v31 = v7[1].n128_u64[1];
      if (v31 >= v7[2].n128_u64[0])
      {
        v7[1].n128_u64[1] = (unint64_t)sub_DA0114(v59, __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.battery_charge_after_charging.");
      }
      else
      {
        sub_DA029C(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.battery_charge_after_charging.");
        v7[1].n128_u64[1] = v31 + 32;
        v7[1].n128_u64[1] = v31 + 32;
      }
      goto LABEL_97;
    }
    unsigned int v32 = *((_DWORD *)v27 + 10);
    if (v32 >= *(_DWORD *)(v4 + 84))
    {
      if (v32 <= *(_DWORD *)(v4 + 76) || !sub_723EC(1u)) {
        goto LABEL_97;
      }
      sub_6BAC((uint64_t)__src);
      int v36 = *((_DWORD *)v27 + 10);
      int v60 = *(_DWORD *)(v4 + 76);
      int v61 = v36;
      sub_D9C458("Got an EV request with a WaypointInfo with an EVChargingInfo.battery_charge_after_charging of ", (uint64_t)&v61, " which is greater than the EVInfo.max_battery_charge of ", (uint64_t)&v60, ".");
      if (v71 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v71 >= 0) {
        uint64_t v38 = HIBYTE(v71);
      }
      else {
        uint64_t v38 = (uint64_t)v70;
      }
      sub_188FC78(__src, (uint64_t)p_p, v38);
      if (SHIBYTE(v71) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      if (!sub_723EC(1u)) {
        goto LABEL_97;
      }
      sub_6BAC((uint64_t)__src);
      int v33 = *((_DWORD *)v27 + 10);
      int v60 = *(_DWORD *)(v4 + 84);
      int v61 = v33;
      sub_D9C250("Got an EV request with a WaypointInfo with an EVChargingInfo.battery_charge_after_charging of ", (uint64_t)&v61, " which is less than the EVInfo.min_battery_charge of ", (uint64_t)&v60, ".");
      if (v71 >= 0) {
        int v34 = &__p;
      }
      else {
        int v34 = __p;
      }
      if (v71 >= 0) {
        uint64_t v35 = HIBYTE(v71);
      }
      else {
        uint64_t v35 = (uint64_t)v70;
      }
      sub_188FC78(__src, (uint64_t)v34, v35);
      if (SHIBYTE(v71) < 0) {
        operator delete(__p);
      }
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(v71) < 0) {
      operator delete(__p);
    }
    if (v74 < 0) {
      operator delete(v73);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
LABEL_97:
    if ((_BYTE)v27[2])
    {
      unint64_t v40 = v27[3];
      uint64_t v41 = *((int *)v40 + 6);
      if (v41)
      {
        uint64_t v42 = v40[4];
        if (v42) {
          uint64_t v43 = (uint64_t *)((char *)v42 + 8);
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v44 = 8 * v41;
        do
        {
          uint64_t v45 = *v43;
          int v46 = *(_DWORD *)(*v43 + 16);
          if ((v46 & 1) == 0)
          {
            __src[0] = 10;
            unint64_t v47 = v7[1].n128_u64[1];
            if (v47 >= v7[2].n128_u64[0])
            {
              char v48 = sub_D9E028(v59, __src, "Got an EV request with a WaypointInfo that is missing the type for an EVChargingInfo.charger_plugs_info.suggested_charger_plug.");
            }
            else
            {
              sub_D9E1B0(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing the type for an EVChargingInfo.charger_plugs_info.suggested_charger_plug.");
              char v48 = (char *)(v47 + 32);
              v7[1].n128_u64[1] = v47 + 32;
            }
            v7[1].n128_u64[1] = (unint64_t)v48;
            int v46 = *(_DWORD *)(v45 + 16);
          }
          if ((v46 & 2) == 0)
          {
            __src[0] = 10;
            unint64_t v49 = v7[1].n128_u64[1];
            if (v49 >= v7[2].n128_u64[0])
            {
              unint64_t v50 = sub_D9E2E4(v59, __src, "Got an EV request with a WaypointInfo that is missing the maximum_power for an EVChargingInfo.charger_plugs_info.suggested_charger_plug.");
            }
            else
            {
              sub_D9E46C(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing the maximum_power for an EVChargingInfo.charger_plugs_info.suggested_charger_plug.");
              unint64_t v50 = (char *)(v49 + 32);
              v7[1].n128_u64[1] = v49 + 32;
            }
            v7[1].n128_u64[1] = (unint64_t)v50;
          }
          unsigned int v51 = *(_DWORD *)(v45 + 28);
          if (v51)
          {
            if (v51 >= 0xF4241 && sub_723EC(1u))
            {
              sub_6BAC((uint64_t)__src);
              sub_188FC78(__src, (uint64_t)"Got an EV request with a WaypointInfo that has a suggested charger plug with more than 1 MW maximum power.", 106);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              if (SHIBYTE(v71) < 0) {
                operator delete(__p);
              }
              *(void *)__src = v58;
              *(void *)&__src[*(void *)(v58 - 24)] = v57;
              if (v74 < 0) {
                operator delete(v73);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
          }
          else
          {
            __src[0] = 10;
            unint64_t v52 = v7[1].n128_u64[1];
            if (v52 >= v7[2].n128_u64[0])
            {
              v7[1].n128_u64[1] = (unint64_t)sub_D9E5A0(v59, __src, "Got an EV request with a WaypointInfo that has a suggested charger plug with 0 W maximum power.");
            }
            else
            {
              sub_D9E728(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that has a suggested charger plug with 0 W maximum power.");
              v7[1].n128_u64[1] = v52 + 32;
              v7[1].n128_u64[1] = v52 + 32;
            }
          }
          ++v43;
          v44 -= 8;
        }
        while (v44);
        goto LABEL_136;
      }
      __src[0] = 10;
      unint64_t v39 = v7[1].n128_u64[1];
      if (v39 >= v7[2].n128_u64[0])
      {
        uint64_t v53 = sub_DA03D0(v59, __src, "Got an EV request that has no suggested charger plug set in ChargerPlugsInfo.");
        goto LABEL_135;
      }
      sub_DA0558(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request that has no suggested charger plug set in ChargerPlugsInfo.");
    }
    else
    {
      __src[0] = 10;
      unint64_t v39 = v7[1].n128_u64[1];
      if (v39 >= v7[2].n128_u64[0])
      {
        uint64_t v53 = sub_D9EB34(v59, __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.charger_plugs_info.");
LABEL_135:
        v7[1].n128_u64[1] = (unint64_t)v53;
LABEL_136:
        uint64_t v54 = v68;
        if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        unint64_t v55 = v67;
        if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        uint64_t v56 = (std::__shared_weak_count *)v66.n128_u64[1];
        if (v66.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v66.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        goto LABEL_145;
      }
      sub_D9ECBC(v7 + 32, (unsigned char *)v7[1].n128_u64[1], __src, "Got an EV request with a WaypointInfo that is missing EVChargingInfo.charger_plugs_info.");
    }
    uint64_t v53 = (char *)(v39 + 32);
    v7[1].n128_u64[1] = v39 + 32;
    goto LABEL_135;
  }
LABEL_145:
  v7->n128_u64[0] = 2 * (v7[1].n128_u64[0] != v7[1].n128_u64[1]);
  v7->n128_u64[1] = (unint64_t)&off_2439090;
}

void sub_D9BDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (*(char *)(v11 + 23) < 0) {
    operator delete((void *)STACK[0xF98]);
  }
  sub_111ECAC((uint64_t)&STACK[0xFB0]);
  sub_D9C660(va);
  sub_C7E3C8(v10);
  _Unwind_Resume(a1);
}

void sub_D9BFD0()
{
}

void sub_D9C00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  *(void *)(v10 + 24) = v11;
  sub_D9C660((uint64_t *)va);
  sub_C7E3C8(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_D9C048(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9C228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9C23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9C250(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9C430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9C444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D9C458(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9C638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9C64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_D9C660(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[488];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_D9C778(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v23.n128_u64[0] = 0;
  v23.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a4, &v23);
  int v8 = *(_DWORD *)(a1 + 40);
  if ((v8 & 3) != 0)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    if ((v8 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  v23.n128_u8[0] = 10;
  unint64_t v11 = *(void *)(a4 + 24);
  if (v11 >= *(void *)(a4 + 32))
  {
    unsigned int v12 = sub_DA068C((char **)(a4 + 16), (char *)&v23, "Got an EV request where one of the route legs of the OriginalWaypointRoute has neither the path_leg nor zilch points set.");
  }
  else
  {
    sub_DA0814(a4 + 32, *(unsigned char **)(a4 + 24), (char *)&v23, "Got an EV request where one of the route legs of the OriginalWaypointRoute has neither the path_leg nor zilch points set.");
    unsigned int v12 = (char *)(v11 + 32);
    *(void *)(a4 + 24) = v11 + 32;
  }
  *(void *)(a4 + 24) = v12;
  int v8 = *(_DWORD *)(a1 + 40);
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v8 & 4) != 0)
  {
LABEL_11:
    sub_D9A518(*(void *)(a1 + 64), a2, (uint64_t)&v23);
    sub_3E7A68(a4, (uint64_t)&v23);
    unint64_t v13 = (void **)__p;
    if (__p)
    {
      uint64_t v14 = v25;
      char v15 = __p;
      if (v25 != __p)
      {
        do
        {
          if (*((char *)v14 - 1) < 0) {
            operator delete(*(v14 - 3));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        char v15 = __p;
      }
      uint64_t v25 = v13;
      operator delete(v15);
    }
LABEL_19:
    int v16 = *(_DWORD *)(a1 + 40);
    if ((v16 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_20:
    if ((v16 & 0x10) == 0) {
      goto LABEL_41;
    }
    goto LABEL_33;
  }
  v23.n128_u8[0] = 10;
  unint64_t v9 = *(void *)(a4 + 24);
  if (v9 >= *(void *)(a4 + 32))
  {
    size_t v10 = sub_DA0948((char **)(a4 + 16), (char *)&v23, "Got an EV request where one of the route legs of the OriginalWaypointRoute does not have the EVStateInfo set.");
  }
  else
  {
    sub_DA0AD0(a4 + 32, *(unsigned char **)(a4 + 24), (char *)&v23, "Got an EV request where one of the route legs of the OriginalWaypointRoute does not have the EVStateInfo set.");
    size_t v10 = (char *)(v9 + 32);
    *(void *)(a4 + 24) = v9 + 32;
  }
  *(void *)(a4 + 24) = v10;
  int v16 = *(_DWORD *)(a1 + 40);
  if ((v16 & 8) == 0) {
    goto LABEL_20;
  }
LABEL_24:
  sub_D9B068();
  sub_3E7A68(a4, (uint64_t)&v23);
  int v17 = (void **)__p;
  if (__p)
  {
    uint64_t v18 = v25;
    unint64_t v19 = __p;
    if (v25 != __p)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      unint64_t v19 = __p;
    }
    uint64_t v25 = v17;
    operator delete(v19);
  }
  if ((*(_DWORD *)(a1 + 40) & 0x10) != 0)
  {
LABEL_33:
    sub_D9B068();
    sub_3E7A68(a4, (uint64_t)&v23);
    int v20 = (void **)__p;
    if (__p)
    {
      int v21 = v25;
      uint64_t v22 = __p;
      if (v25 != __p)
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 4;
        }
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v25 = v20;
      operator delete(v22);
    }
  }
LABEL_41:
  *(void *)a4 = 2 * (*(void *)(a4 + 16) != *(void *)(a4 + 24));
  *(void *)(a4 + 8) = &off_2439090;
}

void sub_D9CA14(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CA28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CA40(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CA54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_C7E3C8((uint64_t)&a9);
  sub_C7E3C8(v9);
  _Unwind_Resume(a1);
}

void sub_D9CAB8(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CACC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v28.n128_u64[0] = 0;
  v28.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a3, &v28);
  uint64_t v6 = *(int *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    int v8 = (uint64_t *)(v7 + 8);
  }
  else {
    int v8 = 0;
  }
  if (v6)
  {
    uint64_t v9 = 8 * v6;
    size_t v10 = v8;
    unint64_t v11 = &v8[v6];
    while (1)
    {
      unsigned int v12 = *(uint64_t (****)())(*v10 + 72);
      if (!v12) {
        unsigned int v12 = &off_25352D0;
      }
      if (((_BYTE)v12[2] & 0x10) != 0) {
        break;
      }
      unint64_t v13 = *(uint64_t (****)())(*v10 + 80);
      if (!v13) {
        unint64_t v13 = &off_25352D0;
      }
      if (((_BYTE)v13[2] & 0x10) != 0) {
        break;
      }
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        int v14 = 0;
        goto LABEL_18;
      }
    }
    int v14 = 1;
    do
    {
LABEL_18:
      sub_D9C778(*v8, a2, v14, (uint64_t)&v28);
      sub_3E7A68(a3, (uint64_t)&v28);
      int v16 = (void **)__p;
      if (__p)
      {
        int v17 = v30;
        char v15 = __p;
        if (v30 != __p)
        {
          do
          {
            if (*((char *)v17 - 1) < 0) {
              operator delete(*(v17 - 3));
            }
            v17 -= 4;
          }
          while (v17 != v16);
          char v15 = __p;
        }
        long long v30 = v16;
        operator delete(v15);
      }
      ++v8;
    }
    while (v8 != v11);
    uint64_t v18 = *(int *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19) {
      uint64_t v20 = v19 + 8;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v18 >= 2)
    {
      uint64_t v21 = v20 + 8;
      uint64_t v22 = 8 * v18 - 8;
      int v23 = 1;
      do
      {
        if (*(void *)(*(void *)(v21 - 8) + 80)) {
          unint64_t v24 = *(uint64_t (****)())(*(void *)(v21 - 8) + 80);
        }
        else {
          unint64_t v24 = &off_25352D0;
        }
        if (*(void *)(*(void *)v21 + 72)) {
          uint64_t v25 = *(uint64_t (****)())(*(void *)v21 + 72);
        }
        else {
          uint64_t v25 = &off_25352D0;
        }
        v23 &= sub_D94A84((uint64_t)v24, (uint64_t)v25);
        v21 += 8;
        v22 -= 8;
      }
      while (v22);
      if ((v23 & 1) == 0)
      {
        v28.n128_u8[0] = 10;
        unint64_t v26 = *(void *)(a3 + 24);
        if (v26 >= *(void *)(a3 + 32))
        {
          long long v27 = sub_DA0C04((char **)(a3 + 16), (char *)&v28, "Original waypoint route has inconsistent EV charging infos (charging info of the destination waypoint info of at least one leg does not match the charging info of the origin waypoint info in the subsequent leg).");
        }
        else
        {
          sub_DA0D8C(a3 + 32, *(unsigned char **)(a3 + 24), (char *)&v28, "Original waypoint route has inconsistent EV charging infos (charging info of the destination waypoint info of at least one leg does not match the charging info of the origin waypoint info in the subsequent leg).");
          long long v27 = (char *)(v26 + 32);
          *(void *)(a3 + 24) = v26 + 32;
        }
        *(void *)(a3 + 24) = v27;
      }
    }
  }
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D9CD04(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CD18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C7E3C8((uint64_t)va);
  sub_C7E3C8(v3);
  _Unwind_Resume(a1);
}

void sub_D9CD4C(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CD60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v14.n128_u64[0] = 0;
  v14.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a3, &v14);
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 8) == 0)
  {
    v14.n128_u8[0] = 10;
    unint64_t v7 = *(void *)(a3 + 24);
    if (v7 >= *(void *)(a3 + 32))
    {
      int v8 = sub_DA0EC0((char **)(a3 + 16), (char *)&v14, "Got an EV request with an ETARoute.ETAStep missing the StepID.");
    }
    else
    {
      sub_DA1048(a3 + 32, *(unsigned char **)(a3 + 24), (char *)&v14, "Got an EV request with an ETARoute.ETAStep missing the StepID.");
      int v8 = (char *)(v7 + 32);
      *(void *)(a3 + 24) = v7 + 32;
    }
    *(void *)(a3 + 24) = v8;
    int v6 = *(_DWORD *)(a1 + 40);
  }
  if ((v6 & 0xC0) != 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    v14.n128_u8[0] = 10;
    unint64_t v9 = *(void *)(a3 + 24);
    if (v9 >= *(void *)(a3 + 32))
    {
      size_t v10 = sub_DA117C((char **)(a3 + 16), (char *)&v14, "Got an EV request with an ETARoute.ETAStep missing the zilchPointIndex and distance_cm.");
    }
    else
    {
      sub_DA1304(a3 + 32, *(unsigned char **)(a3 + 24), (char *)&v14, "Got an EV request with an ETARoute.ETAStep missing the zilchPointIndex and distance_cm.");
      size_t v10 = (char *)(v9 + 32);
      *(void *)(a3 + 24) = v9 + 32;
    }
    *(void *)(a3 + 24) = v10;
    if ((*(_DWORD *)(a1 + 40) & 4) == 0) {
      goto LABEL_21;
    }
  }
  sub_D9A518(*(void *)(a1 + 64), a2, (uint64_t)&v14);
  sub_3E7A68(a3, (uint64_t)&v14);
  unint64_t v11 = (void **)__p;
  if (__p)
  {
    unsigned int v12 = v16;
    unint64_t v13 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      unint64_t v13 = __p;
    }
    int v16 = v11;
    operator delete(v13);
  }
LABEL_21:
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D9CF00(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CF14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_C7E3C8((uint64_t)&a9);
  sub_C7E3C8(v9);
  _Unwind_Resume(a1);
}

void sub_D9CF60(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9CF74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v25.n128_u64[0] = 0;
  v25.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a3, &v25);
  uint64_t v6 = *(int *)(a1 + 56);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7) {
      int v8 = (uint64_t *)(v7 + 8);
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    v25.n128_u8[0] = 10;
    unint64_t v9 = *(void *)(a3 + 24);
    if (v9 >= *(void *)(a3 + 32))
    {
      size_t v10 = sub_DA1438((char **)(a3 + 16), (char *)&v25, "Got an EV request with an ETARoute that does not have any ETASteps.");
    }
    else
    {
      sub_DA15C0(a3 + 32, *(unsigned char **)(a3 + 24), (char *)&v25, "Got an EV request with an ETARoute that does not have any ETASteps.");
      size_t v10 = (char *)(v9 + 32);
      *(void *)(a3 + 24) = v9 + 32;
    }
    *(void *)(a3 + 24) = v10;
    uint64_t v6 = *(int *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      int v8 = (uint64_t *)(v11 + 8);
    }
    else {
      int v8 = 0;
    }
    if (!v6) {
      goto LABEL_22;
    }
  }
  unsigned int v12 = &v8[v6];
  do
  {
    sub_D9CD60(*v8, a2, (uint64_t)&v25);
    sub_3E7A68(a3, (uint64_t)&v25);
    __n128 v14 = (void **)__p;
    if (__p)
    {
      char v15 = v27;
      unint64_t v13 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 4;
        }
        while (v15 != v14);
        unint64_t v13 = __p;
      }
      long long v27 = v14;
      operator delete(v13);
    }
    ++v8;
  }
  while (v8 != v12);
LABEL_22:
  if (!*(_DWORD *)(a1 + 80) && (*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    v25.n128_u8[0] = 10;
    unint64_t v16 = *(void *)(a3 + 24);
    if (v16 >= *(void *)(a3 + 32))
    {
      int v17 = sub_DA16F4((char **)(a3 + 16), (char *)&v25, "Got an EV request without any zilch nor path_leg to decode.");
    }
    else
    {
      sub_DA187C(a3 + 32, *(unsigned char **)(a3 + 24), (char *)&v25, "Got an EV request without any zilch nor path_leg to decode.");
      int v17 = (char *)(v16 + 32);
      *(void *)(a3 + 24) = v16 + 32;
    }
    *(void *)(a3 + 24) = v17;
  }
  int v18 = *(_DWORD *)(a1 + 40);
  if ((v18 & 8) != 0)
  {
    sub_D9B068();
    sub_3E7A68(a3, (uint64_t)&v25);
    uint64_t v19 = (void **)__p;
    if (__p)
    {
      uint64_t v20 = v27;
      uint64_t v21 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 4;
        }
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      long long v27 = v19;
      operator delete(v21);
    }
    int v18 = *(_DWORD *)(a1 + 40);
  }
  if ((v18 & 0x10) != 0)
  {
    sub_D9B068();
    sub_3E7A68(a3, (uint64_t)&v25);
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      int v23 = v27;
      unint64_t v24 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 4;
        }
        while (v23 != v22);
        unint64_t v24 = __p;
      }
      long long v27 = v22;
      operator delete(v24);
    }
  }
  *(void *)a3 = 2 * (*(void *)(a3 + 16) != *(void *)(a3 + 24));
  *(void *)(a3 + 8) = &off_2439090;
}

void sub_D9D23C(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9D250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_D9D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_C7E3C8((uint64_t)&a9);
  sub_C7E3C8(v9);
  _Unwind_Resume(a1);
}

void sub_D9D2CC(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D9D2E0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9D4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9D4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9D4E8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 24);
  if (a2) {
    uint64_t v4 = (void *)(a1 + 32);
  }
  sub_5EC80(*v4 & 0xFFFFFFFFFFFFFFFELL, v15);
  if (LODWORD(v15[1]) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214((uint64_t)v13, v15[0]);
  sub_5521C((uint64_t *)LODWORD(v15[1]), v15);
  char v16 = 8;
  strcpy((char *)v15, "model_id");
  if (sub_58070(v13, (uint64_t)v15))
  {
    char v12 = 8;
    strcpy((char *)__p, "model_id");
    BOOL v5 = *((_DWORD *)sub_5D58C(v13, (uint64_t)__p) + 2) != 1;
    if ((v12 & 0x80000000) == 0)
    {
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      operator delete((void *)v15[0]);
      if (v5) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
    operator delete(__p[0]);
    if (v16 < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v5 = 1;
    if (v16 < 0) {
      goto LABEL_12;
    }
  }
LABEL_7:
  if (v5)
  {
LABEL_8:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_15;
  }
LABEL_13:
  char v16 = 8;
  strcpy((char *)v15, "model_id");
  unsigned int v6 = sub_31AC04(v13, (uint64_t)v15);
  std::to_string((std::string *)a3, v6);
  if (v16 < 0) {
    operator delete((void *)v15[0]);
  }
LABEL_15:
  uint64_t v7 = v14;
  if (v14)
  {
    do
    {
      size_t v9 = (void **)*v7;
      sub_55198((uint64_t)(v7 + 5));
      if (*((char *)v7 + 39) < 0) {
        operator delete(v7[2]);
      }
      operator delete(v7);
      uint64_t v7 = v9;
    }
    while (v9);
  }
  size_t v8 = v13[0];
  v13[0] = 0;
  if (v8) {
    operator delete(v8);
  }
}

void sub_D9D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a15);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_5E5C(v25, "");
    __cxa_end_catch();
    JUMPOUT(0xD9D66CLL);
  }
  _Unwind_Resume(a1);
}

void sub_D9D7B4()
{
}

void sub_D9D7C0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0xD9D7C8);
  }
  JUMPOUT(0xD9D764);
}

void sub_D9D7D0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_D9D4E8(a1, 0, (uint64_t)&v13);
  sub_D9D4E8(a1, 1, (uint64_t)__p);
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v9, " and ChargingModelId=");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if ((v12 & 0x80u) == 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  size_t v8 = std::string::append(&v10, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if (((char)v12 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v9.__r_.__value_.__l.__data_);
  if (((char)v12 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v14 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
LABEL_14:
  operator delete(__p[0]);
  if (v14 < 0) {
    goto LABEL_15;
  }
}

void sub_D9D8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v28 - 17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((*(char *)(v28 - 17) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_D9D994(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9DB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9DB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D9DB68(uint64_t a1, char *a2, char *__s)
{
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  unint64_t v6 = *(void *)(v4 - 8);
  if (v6 >= v5)
  {
    size_t v8 = sub_DA3508((char **)a1, a2, __s);
    *(void *)(a1 + 8) = v8;
    return v8 - 32;
  }
  else
  {
    sub_DA3690(v4, *(unsigned char **)(v4 - 8), a2, __s);
    *(void *)(a1 + 8) = v6 + 32;
    *(void *)(a1 + 8) = v6 + 32;
    return (char *)v6;
  }
}

void sub_D9DBDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D9DBE4(const char *a1, const char **a2, const char *a3)
{
  sub_E1B4((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_188FC78(v13, (uint64_t)a1, v6);
  uint64_t v7 = *a2;
  size_t v8 = strlen(v7);
  sub_188FC78(v13, (uint64_t)v7, v8);
  size_t v9 = strlen(a3);
  sub_188FC78(v13, (uint64_t)a3, v9);
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9DDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9DDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D9DDC8(uint64_t a1, char *a2, char *__s)
{
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  unint64_t v6 = *(void *)(v4 - 8);
  if (v6 >= v5)
  {
    size_t v8 = sub_DA3A80((char **)a1, a2, __s);
    *(void *)(a1 + 8) = v8;
    return v8 - 32;
  }
  else
  {
    sub_DA3C08(v4, *(unsigned char **)(v4 - 8), a2, __s);
    *(void *)(a1 + 8) = v6 + 32;
    *(void *)(a1 + 8) = v6 + 32;
    return (char *)v6;
  }
}

void sub_D9DE3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D9DE44(const char *a1, const char **a2, const char *a3)
{
  sub_E1B4((uint64_t)v12);
  size_t v6 = strlen(a1);
  sub_188FC78(v13, (uint64_t)a1, v6);
  uint64_t v7 = *a2;
  size_t v8 = strlen(v7);
  sub_188FC78(v13, (uint64_t)v7, v8);
  size_t v9 = strlen(a3);
  sub_188FC78(v13, (uint64_t)a3, v9);
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v10;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D9E000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9E014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D9E028(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9E1B0(a1 + 16, v19, a2, a3);
  char v11 = v19;
  unsigned __int8 v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    int v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9E19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9E1B0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9E2D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9E2E4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9E46C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    int v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9E458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9E46C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9E58C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9E5A0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9E728(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    int v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9E714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9E728(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9E848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9E85C(char **a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v13 = &v12[32 * v6];
  uint64_t v21 = v13;
  uint64_t v22 = v13;
  int v23 = &v12[32 * v11];
  *unint64_t v13 = *a2;
  char v14 = v13 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v14, *(void **)a3, *(void *)(a3 + 8));
    uint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    unint64_t v13 = v21;
    unint64_t v15 = v22 + 32;
    if (v5 == *a1)
    {
LABEL_17:
      int v18 = v4;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)char v14 = *(_OWORD *)a3;
    *((void *)v13 + 3) = *(void *)(a3 + 16);
    unint64_t v15 = v13 + 32;
    if (v5 == v4) {
      goto LABEL_17;
    }
  }
  do
  {
    char v16 = *(v5 - 32);
    v5 -= 32;
    *(v13 - 32) = v16;
    v13 -= 32;
    long long v17 = *(_OWORD *)(v5 + 8);
    *((void *)v13 + 3) = *((void *)v5 + 3);
    *(_OWORD *)(v13 + 8) = v17;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 1) = 0;
  }
  while (v5 != v4);
  int v18 = *a1;
  uint64_t v4 = a1[1];
LABEL_18:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v23;
  if (v4 == v18)
  {
    if (v4) {
LABEL_20:
    }
      operator delete(v4);
  }
  else
  {
    do
    {
      uint64_t v20 = v4 - 32;
      if (*(v4 - 1) < 0) {
        operator delete(*((void **)v4 - 3));
      }
      v4 -= 32;
    }
    while (v20 != v18);
    uint64_t v4 = v18;
    if (v18) {
      goto LABEL_20;
    }
  }
  return v15;
}

void sub_D9EA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9EA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(*(void *)(a3 + 24) + *(void *)(a2 + 24)) / *(float *)(a2 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v5 = *(int8x8_t *)(a2 + 8);
  if (prime > *(void *)&v5) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v5) {
    return;
  }
  size_t v6 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
  if (*(void *)&v5 >= 3uLL)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] <= 1uLL)
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        size_t v6 = v8;
      }
      if (prime <= v6) {
        unint64_t prime = v6;
      }
      if (prime >= *(void *)&v5) {
        return;
      }
LABEL_18:
      sub_B6C0(a2, prime);
      return;
    }
  }
  size_t v9 = std::__next_prime(v6);
  if (prime <= v9) {
    unint64_t prime = v9;
  }
  if (prime < *(void *)&v5) {
    goto LABEL_18;
  }
}

char *sub_D9EB34(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9ECBC(a1 + 16, v19, a2, a3);
  unint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9ECA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9ECBC(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9EDDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9EDF0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9EF78(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9EF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9EF78(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9F098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9F0AC(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9F234(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9F220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9F234(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9F354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9F368(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9F4F0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9F4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9F4F0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9F610(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9F624(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9F7AC(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9F798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9F7AC(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9F8CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9F8E0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9FA68(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9FA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9FA68(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9FB88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9FB9C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9FD24(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9FD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9FD24(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_D9FE44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D9FE58(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_D9FFE0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_D9FFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D9FFE0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA0100(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA0114(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA029C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA0288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA029C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA03BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA03D0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA0558(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA0544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA0558(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA0678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA068C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA0814(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA0800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA0814(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA0934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA0948(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA0AD0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA0ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA0AD0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA0BF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA0C04(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA0D8C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA0D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA0D8C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA0EAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA0EC0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA1048(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA1034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA1048(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA1168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA117C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA1304(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA12F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA1304(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA1424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA1438(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA15C0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA15AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA15C0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA16E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA16F4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA187C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA1868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA187C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA199C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA19B0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA1B38(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA1B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA1B38(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA1C58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA1C6C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA1DF4(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA1DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA1DF4(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA1F14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA1F28(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA20B0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA209C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA20B0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA21D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA21E4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA236C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA2358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA236C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA248C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA24A0(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA2628(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA2614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA2628(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA2748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA275C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA28E4(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA28D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA28E4(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA2A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA2A18(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA2BA0(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA2B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA2BA0(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA2CC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA2CD4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA2E5C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA2E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA2E5C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA2F7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA2F90(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA3118(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA3104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA3118(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA3238(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA324C(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA33D4(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA33C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA33D4(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA34F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA3508(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA3690(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA367C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA3690(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA37B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA37C4(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA394C(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA3938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA394C(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA3A6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DA3A80(char **a1, char *a2, char *a3)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - *a1;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v19 = &v10[32 * v4];
  uint64_t v20 = &v10[32 * v9];
  sub_DA3C08(a1 + 16, v19, a2, a3);
  uint64_t v11 = v19;
  uint64_t v12 = v19 + 32;
  unint64_t v13 = *a1;
  char v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v20;
  }
  else
  {
    do
    {
      char v15 = *(v14 - 32);
      v14 -= 32;
      *(v11 - 32) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v14 + 8);
      *((void *)v11 + 3) = *((void *)v14 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 1) = 0;
    }
    while (v14 != v13);
    long long v17 = *a1;
    char v14 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v20;
    if (v14 != v17)
    {
      do
      {
        if (*(v14 - 1) < 0) {
          operator delete(*((void **)v14 - 3));
        }
        v14 -= 32;
      }
      while (v14 != v17);
      char v14 = v17;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v19 + 32;
}

void sub_DA3BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA3C08(int a1, unsigned char *a2, char *a3, char *__s)
{
  char v6 = *a3;
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v15 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v8);
    *((unsigned char *)p_dst + v8) = 0;
    *a2 = v6;
    uint64_t v10 = a2 + 8;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v15) = v7;
  p_dst = &__dst;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = v6;
  uint64_t v10 = a2 + 8;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v10 = __dst;
    *((void *)v10 + 2) = v15;
    return;
  }
LABEL_10:
  unint64_t v13 = (void *)__dst;
  sub_4200(v10, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v13);
}

void sub_DA3D28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_DA3D3C(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  char v14 = operator new(0x18uLL);
  *char v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    int v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *char v14 = *v18;
LABEL_61:
      *int v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      int v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *char v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_DA404C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DA4060(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DA420C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA4220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA4234(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_DC6B80(a2);
  if (*(char *)(v4 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v30 = *(void *)(v4 + 16);
    long long __dst = v5;
  }
  unint64_t v6 = sub_DBE84C(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200(&v27, *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v28 = *(void *)(v6 + 16);
    long long v27 = v7;
  }
  std::operator+<char>();
  uint8x8_t v8 = std::string::append(&v22, "\" app_id=\"");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v30 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v30 >= 0) {
    std::string::size_type v11 = HIBYTE(v30);
  }
  else {
    std::string::size_type v11 = *((void *)&__dst + 1);
  }
  uint64_t v12 = std::string::append(&v23, p_dst, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  char v14 = std::string::append(&v24, "\"");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_32:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_32;
  }
LABEL_15:
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_33:
  operator delete(v22.__r_.__value_.__l.__data_);
LABEL_16:
  float v16 = &off_2535C50;
  if (*(void *)(a2 + 304)) {
    float v16 = *(uint64_t (****)())(a2 + 304);
  }
  uint64_t v17 = (uint64_t (***)())v16[11];
  if (!v17) {
    uint64_t v17 = &off_2536408;
  }
  int v18 = (uint64_t (***)())v17[4];
  if (!v18) {
    int v18 = &off_2536398;
  }
  BOOL v19 = (uint64_t (***)())v18[4];
  if (v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = &off_2536310;
  }
  sub_D9D7D0((uint64_t)v20, &v24);
  unint64_t v21 = sub_69510();
  sub_68EE4((uint64_t)v21);
  std::operator+<char>();
  sub_DA45F0(a1, (uint64_t)__p, (uint64_t)&v24, (uint64_t)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v26) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(__p[0]);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return;
    }
LABEL_38:
    operator delete((void *)__dst);
    return;
  }
LABEL_37:
  operator delete((void *)v27);
  if (SHIBYTE(v30) < 0) {
    goto LABEL_38;
  }
}

void sub_DA44C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v35 - 73) < 0)
        {
          operator delete(*(void **)(v35 - 96));
          if ((*(char *)(v35 - 41) & 0x80000000) == 0) {
LABEL_10:
          }
            _Unwind_Resume(exception_object);
        }
        else if ((*(char *)(v35 - 41) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v35 - 64));
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a30);
      goto LABEL_8;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a35 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_DA45F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_E1B4((uint64_t)v22);
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = *(void *)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  sub_188FC78(v23, v9, v10);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  sub_188FC78(v23, v12, v13);
  int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = *(void *)a3;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a3 + 8);
  }
  sub_188FC78(v23, v15, v16);
  int v17 = *(char *)(a4 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = *(void *)a4;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a4 + 8);
  }
  sub_188FC78(v23, v18, v19);
  std::stringbuf::str();
  *(void *)((char *)v22
  v23[0] = v20;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DA47EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA4800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA4814(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_DBE834(a2);
  if (*(char *)(v4 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v30 = *(void *)(v4 + 16);
    long long __dst = v5;
  }
  unint64_t v6 = sub_DBE88C(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200(&v27, *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v28 = *(void *)(v6 + 16);
    long long v27 = v7;
  }
  std::operator+<char>();
  int v8 = std::string::append(&v22, "\" app_id=\"");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v30 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v30 >= 0) {
    std::string::size_type v11 = HIBYTE(v30);
  }
  else {
    std::string::size_type v11 = *((void *)&__dst + 1);
  }
  uint64_t v12 = std::string::append(&v23, p_dst, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v24, "\"");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_32:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_32;
  }
LABEL_15:
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_33:
  operator delete(v22.__r_.__value_.__l.__data_);
LABEL_16:
  uint64_t v16 = &off_2535C50;
  if (*(void *)(a2 + 288)) {
    uint64_t v16 = *(uint64_t (****)())(a2 + 288);
  }
  int v17 = (uint64_t (***)())v16[11];
  if (!v17) {
    int v17 = &off_2536408;
  }
  uint64_t v18 = (uint64_t (***)())v17[4];
  if (!v18) {
    uint64_t v18 = &off_2536398;
  }
  uint64_t v19 = (uint64_t (***)())v18[4];
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = &off_2536310;
  }
  sub_D9D7D0((uint64_t)v20, &v24);
  unint64_t v21 = sub_69510();
  sub_68EE4((uint64_t)v21);
  std::operator+<char>();
  sub_DA45F0(a1, (uint64_t)__p, (uint64_t)&v24, (uint64_t)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v26) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(__p[0]);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return;
    }
LABEL_38:
    operator delete((void *)__dst);
    return;
  }
LABEL_37:
  operator delete((void *)v27);
  if (SHIBYTE(v30) < 0) {
    goto LABEL_38;
  }
}

void sub_DA4AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v35 - 73) < 0)
        {
          operator delete(*(void **)(v35 - 96));
          if ((*(char *)(v35 - 41) & 0x80000000) == 0) {
LABEL_10:
          }
            _Unwind_Resume(exception_object);
        }
        else if ((*(char *)(v35 - 41) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v35 - 64));
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a30);
      goto LABEL_8;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a35 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_DA4BD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_DBE834(a2);
  if (*(char *)(v4 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v29 = *(void *)(v4 + 16);
    long long __dst = v5;
  }
  unint64_t v6 = sub_DBE86C(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200(&v26, *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v27 = *(void *)(v6 + 16);
    long long v26 = v7;
  }
  std::operator+<char>();
  int v8 = std::string::append(&v21, "\" app_id=\"");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0) {
    p_dst = (const std::string::value_type *)&__dst;
  }
  else {
    p_dst = (const std::string::value_type *)__dst;
  }
  if (v29 >= 0) {
    std::string::size_type v11 = HIBYTE(v29);
  }
  else {
    std::string::size_type v11 = *((void *)&__dst + 1);
  }
  uint64_t v12 = std::string::append(&v22, p_dst, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v23, "\"");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_31:
  operator delete(v21.__r_.__value_.__l.__data_);
LABEL_16:
  uint64_t v16 = *(uint64_t (****)())(a2 + 312);
  if (!v16) {
    uint64_t v16 = &off_2536408;
  }
  int v17 = (uint64_t (***)())v16[4];
  if (!v17) {
    int v17 = &off_2536398;
  }
  uint64_t v18 = (uint64_t (***)())v17[4];
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = &off_2536310;
  }
  sub_D9D7D0((uint64_t)v19, &v23);
  uint64_t v20 = sub_69510();
  sub_68EE4((uint64_t)v20);
  std::operator+<char>();
  sub_DA45F0(a1, (uint64_t)__p, (uint64_t)&v23, (uint64_t)&v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(__p[0]);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete((void *)__dst);
    return;
  }
LABEL_35:
  operator delete((void *)v26);
  if (SHIBYTE(v29) < 0) {
    goto LABEL_36;
  }
}

void sub_DA4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v35 - 73) < 0)
        {
          operator delete(*(void **)(v35 - 96));
          if ((*(char *)(v35 - 41) & 0x80000000) == 0) {
LABEL_10:
          }
            _Unwind_Resume(exception_object);
        }
        else if ((*(char *)(v35 - 41) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v35 - 64));
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a30);
      goto LABEL_8;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a35 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_DA4F78()
{
  unk_25E7427 = 16641;
  word_25E7410 = 65;
  byte_25E743F = 1;
  byte_25E7429 = 0;
}

_DWORD *sub_DA4FA0(void *a1, uint64_t a2)
{
  double result = (_DWORD *)*a1;
  unint64_t v3 = (unsigned char *)a1[1];
  int64_t v5 = v3 - (unsigned char *)result;
  if (v3 != (unsigned char *)result)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 / 376;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      if ((result[26] - 3) >= 0xFFFFFFFE)
      {
        if (v6 == a2) {
          return result;
        }
        ++v6;
      }
      result += 94;
      --v7;
    }
    while (v7);
  }
  double result = &unk_25E7448;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E7440, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25E7440))
    {
      sub_737C74((uint64_t)&unk_25E7448);
      __cxa_guard_release(&qword_25E7440);
    }
    return &unk_25E7448;
  }
  return result;
}

void sub_DA5080(_Unwind_Exception *a1)
{
}

uint64_t sub_DA5098(uint64_t a1, uint64_t a2)
{
  HIBYTE(v11[2]) = 21;
  strcpy((char *)v11, "InputPointTransformer");
  __n128 __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  unint64_t v3 = sub_374CDC(a2, (uint64_t)v11, (uint64_t *)&__p);
  sub_DA51A0((BOOL *)a1, v3);
  unint64_t v4 = (void **)__p;
  if (__p)
  {
    int64_t v5 = v9;
    uint64_t v6 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    long long v9 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
  *(_WORD *)(a1 + 6) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return a1;
}

void sub_DA5178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_DA51A0(BOOL *a1, void *a2)
{
  __n128 __p = operator new(0x30uLL);
  long long v9 = xmmword_20B93E0;
  strcpy((char *)__p, "waypoint_location_source_default_properties");
  unint64_t v4 = (void *)sub_560F4(a2, (uint64_t)&__p);
  sub_DA532C(a1, v4);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  __n128 __p = operator new(0x38uLL);
  long long v9 = xmmword_20B9AD0;
  strcpy((char *)__p, "waypoint_location_source_apple_curated_route_properties");
  int64_t v5 = (void *)sub_560F4(a2, (uint64_t)&__p);
  sub_DA532C(a1 + 2, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  __n128 __p = operator new(0x38uLL);
  long long v9 = xmmword_20B8DF0;
  strcpy((char *)__p, "waypoint_location_source_user_created_route_properties");
  uint64_t v6 = (void *)sub_560F4(a2, (uint64_t)&__p);
  sub_DA532C(a1 + 4, v6);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_DA5308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_DA532C(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "use_location_hint_as_center_point");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  strcpy((char *)__p, "use_road_access_points");
  HIBYTE(__p[2]) = 22;
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_DA53FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DA541C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  if (*((unsigned char *)a3 + 8))
  {
    uint64_t v5 = *a3;
    if (!*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 1;
    }
    *(void *)(a1 + 8) = v5;
  }
  else if (*(unsigned char *)(a1 + 16))
  {
    *(unsigned char *)(a1 + 16) = 0;
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      uint64_t v6 = *(void *)a2;
      sub_DA56DC(a1, *(void *)a2, a4);
      sub_DBBED8(v6, (uint64_t)&v18);
      if (v18 != -1 && v21 >> 5 <= 0x464u && v20 >> 5 <= 0x464u)
      {
        uint64_t v7 = *a4;
        uint64_t v8 = a4[1];
        while (v7 != v8)
        {
          if (*(unsigned char *)(v7 + 368))
          {
            uint64_t v9 = v18;
            *(_DWORD *)(v7 + 8) = v19;
            *(void *)uint64_t v7 = v9;
            *(_WORD *)(v7 + 50) = v21;
            *(_WORD *)(v7 + 48) = v20;
          }
          v7 += 376;
        }
      }
      goto LABEL_25;
    case 1:
      uint64_t v11 = *(void *)a2;
      sub_DA588C((unsigned char *)a1, *(void *)a2, a4);
      sub_DBC134(v11, (uint64_t)&v18);
      if (v18 != -1 && v21 >> 5 <= 0x464u && v20 >> 5 <= 0x464u)
      {
        uint64_t v12 = *a4;
        uint64_t v13 = a4[1];
        while (v12 != v13)
        {
          if (*(unsigned char *)(v12 + 368))
          {
            uint64_t v14 = v18;
            *(_DWORD *)(v12 + 8) = v19;
            *(void *)uint64_t v12 = v14;
            *(_WORD *)(v12 + 50) = v21;
            *(_WORD *)(v12 + 48) = v20;
          }
          v12 += 376;
        }
      }
LABEL_25:
      if (__p)
      {
        std::string v23 = __p;
        operator delete(__p);
      }
      return;
    case 2:
      uint64_t v10 = *(void *)a2;
      sub_DA5A44((unsigned char *)a1, v10, a4);
      return;
    case 4:
      uint64_t v15 = *(void *)a2;
      sub_DA5E20(a1, v15, a4);
      return;
    case 5:
      uint64_t v16 = *(void *)a2;
      int v17 = *(_DWORD *)(v16 + 212);
      if (v17 == 57)
      {
        sub_DA6098((unsigned char *)a1, v16, a4);
      }
      else if (v17 == 50)
      {
        sub_DA5F18((unsigned char *)a1, v16, a4);
      }
      else
      {
LABEL_36:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
      }
      return;
    default:
      goto LABEL_36;
  }
}

void sub_DA569C(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_DA56B0(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DA56DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(int *)(a2 + 56);
  unint64_t v5 = *(int *)(a2 + 104);
  if (v4 <= v5) {
    unint64_t v6 = *(int *)(a2 + 104);
  }
  else {
    unint64_t v6 = *(int *)(a2 + 56);
  }
  if (v5 >= v4) {
    uint64_t v7 = *(int *)(a2 + 56);
  }
  else {
    uint64_t v7 = *(int *)(a2 + 104);
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6 >= 2 && v7 == 0)
  {
    uint64_t v10 = (unsigned char *)result;
    if (v4 < 2)
    {
      uint64_t v19 = 0;
      long long v20 = 0uLL;
      uint64_t v14 = *(void *)(a2 + 112);
      if (v14) {
        uint64_t v15 = (uint64_t *)(v14 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      if (v5)
      {
        uint64_t v16 = 8 * v5;
        do
        {
          sub_DA6688(v10, *v15, 2, (uint64_t)v21);
          sub_DA62A8(&v19, (uint64_t)v21);
          sub_402C7C((uint64_t)v21);
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    else
    {
      uint64_t v19 = 0;
      long long v20 = 0uLL;
      uint64_t v11 = *(void *)(a2 + 64);
      if (v11) {
        uint64_t v12 = (unint64_t *)(v11 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = 8 * v4;
      do
      {
        sub_DA646C((uint64_t)v10, *v12, 2, (uint64_t)v21);
        sub_DA62A8(&v19, (uint64_t)v21);
        sub_402C7C((uint64_t)v21);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    uint64_t v17 = v19;
    *a3 = v19;
    uint64_t v18 = v20;
    *(_OWORD *)(a3 + 1) = v20;
    *(_DWORD *)(v17 + 104) = 0;
    *(_DWORD *)(v18 - 272) = 1;
    double result = sub_DC5C90(a2);
    if (result) {
      *(unsigned char *)(v17 + 64) = 1;
    }
  }
  return result;
}

void sub_DA5830(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_DA5844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_402C7C((uint64_t)&a12);
  sub_401F88(&a9);
  sub_401F88(v12);
  _Unwind_Resume(a1);
}

unsigned char *sub_DA588C@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = result;
  uint64_t v6 = *(int *)(a2 + 56);
  int v7 = *(_DWORD *)(a2 + 152);
  uint64_t v8 = *(int *)(a2 + 104) + v6;
  if (v8 == 1 && v7 == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v6 == 1) {
      sub_DA646C((uint64_t)result, *(void *)(*(void *)(a2 + 64) + 8), 1, (uint64_t)v14);
    }
    else {
      sub_DA6688(result, *(void *)(*(void *)(a2 + 112) + 8), 1, (uint64_t)v14);
    }
    sub_DA62A8(a3, (uint64_t)v14);
    return (unsigned char *)sub_402C7C((uint64_t)v14);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v7 == 0;
  }
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 160);
    if (v11) {
      uint64_t v12 = (uint64_t *)(v11 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = a3;
    if (v12 != &v12[v7 - 1])
    {
      uint64_t v13 = 8 * v7 - 8;
      do
      {
        sub_DA6688(v4, *v12, 2, (uint64_t)v14);
        sub_DA8368(&v15, (uint64_t)v14);
        sub_402C7C((uint64_t)v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
      int v7 = *(_DWORD *)(a2 + 152);
      uint64_t v11 = *(void *)(a2 + 160);
    }
    sub_DA6688(v4, *(void *)(v11 + 8 * v7), 1, (uint64_t)v14);
    sub_DA62A8(a3, (uint64_t)v14);
    return (unsigned char *)sub_402C7C((uint64_t)v14);
  }
  return result;
}

void sub_DA59E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_402C7C((uint64_t)&a9);
  sub_401F88(v9);
  _Unwind_Resume(a1);
}

void sub_DA5A30(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_DA5A44(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v43 = 0;
  int v6 = *(_DWORD *)(a2 + 40);
  if ((v6 & 0x100) != 0)
  {
    if ((v6 & 0x20) == 0)
    {
      if (*(void *)(a2 + 304)) {
        int v7 = *(uint64_t (****)())(a2 + 304);
      }
      else {
        int v7 = &off_2539B38;
      }
      sub_DA6688(a1, (uint64_t)v7, 0, (uint64_t)v41);
      goto LABEL_9;
    }
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if ((v6 & 0x20) == 0) {
    goto LABEL_12;
  }
  sub_DA646C((uint64_t)a1, *(void *)(a2 + 280), 0, (uint64_t)v41);
LABEL_9:
  uint64_t v8 = (char *)__p[1];
  if (__p[1] >= v43)
  {
    uint64_t v9 = (char *)sub_DA87D4((uint64_t *)__p, (uint64_t)v41);
    __p[1] = v9;
    BOOL v10 = (char *)__p[0];
    if (__p[0] != v9)
    {
LABEL_14:
      while (sub_DAA288((uint64_t)v10))
      {
        v10 += 376;
        if (v10 == v9)
        {
          unint64_t v11 = *(int *)(a2 + 56);
          unint64_t v12 = *(int *)(a2 + 80);
          uint64_t v13 = v12 | v11;
          if (v12 >= v11) {
            unint64_t v12 = *(int *)(a2 + 56);
          }
          if (v13) {
            BOOL v14 = v12 == 0;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            uint64_t v18 = *(int *)(a2 + 152);
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v19 = *(void *)(a2 + 160);
            if (v19) {
              long long v20 = (uint64_t *)(v19 + 8);
            }
            else {
              long long v20 = 0;
            }
            if (v18)
            {
              uint64_t v21 = 8 * v18;
              do
              {
                sub_DA6688(a1, *v20, 2, (uint64_t)v44);
                sub_DA62A8((uint64_t *)&v38, (uint64_t)v44);
                sub_402C7C((uint64_t)v44);
                ++v20;
                v21 -= 8;
              }
              while (v21);
              std::string v22 = (char *)v38;
              std::string v23 = v39;
              v44[0] = (uint64_t *)__p;
              if (v38 != v39)
              {
                do
                {
                  sub_DA8368(v44, (uint64_t)v22);
                  v22 += 376;
                }
                while (v22 != v23);
              }
            }
            if (v11)
            {
              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              uint64_t v24 = *(void *)(a2 + 64);
              if (v24) {
                std::string::size_type v25 = (unint64_t *)(v24 + 8);
              }
              else {
                std::string::size_type v25 = 0;
              }
              uint64_t v26 = *(int *)(a2 + 56);
              if (v26)
              {
                uint64_t v27 = 8 * v26;
                do
                {
                  sub_DA646C((uint64_t)a1, *v25, 1, (uint64_t)v44);
                  sub_DA62A8((uint64_t *)&v35, (uint64_t)v44);
                  sub_402C7C((uint64_t)v44);
                  ++v25;
                  v27 -= 8;
                }
                while (v27);
              }
            }
            else
            {
              sub_DA61E0((uint64_t)a1, a2 + 72, 1, (uint64_t *)&v35);
            }
            uint64_t v28 = (uint64_t)v35;
            uint64_t v29 = v36;
            v44[0] = (uint64_t *)__p;
            if (v35 != (void *)v36)
            {
              do
              {
                sub_DA8368(v44, v28);
                v28 += 376;
              }
              while (v28 != v29);
              uint64_t v28 = (uint64_t)v35;
            }
            *(_OWORD *)a3 = *(_OWORD *)__p;
            a3[2] = v43;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v43 = 0;
            if (v28)
            {
              uint64_t v30 = v36;
              unint64_t v31 = (void *)v28;
              if (v36 != v28)
              {
                do
                  uint64_t v30 = sub_402C7C(v30 - 376);
                while (v30 != v28);
                unint64_t v31 = v35;
              }
              uint64_t v36 = v28;
              operator delete(v31);
            }
            unsigned int v32 = (char *)v38;
            if (v38)
            {
              uint64_t v33 = (uint64_t)v39;
              int v34 = v38;
              if (v39 != v38)
              {
                do
                  uint64_t v33 = sub_402C7C(v33 - 376);
                while ((char *)v33 != v32);
                int v34 = v38;
              }
              unint64_t v39 = v32;
              operator delete(v34);
            }
            goto LABEL_23;
          }
          break;
        }
      }
    }
  }
  else
  {
    sub_48381C((uint64_t)__p[1], (uint64_t)v41);
    uint64_t v9 = v8 + 376;
    __p[1] = v9;
    BOOL v10 = (char *)__p[0];
    if (__p[0] != v9) {
      goto LABEL_14;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_23:
  sub_402C7C((uint64_t)v41);
  uint64_t v15 = __p[0];
  if (__p[0])
  {
    uint64_t v16 = __p[1];
    uint64_t v17 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        uint64_t v16 = (void *)sub_402C7C((uint64_t)v16 - 376);
      while (v16 != v15);
      uint64_t v17 = __p[0];
    }
    __p[1] = v15;
    operator delete(v17);
  }
}

void sub_DA5D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
}

uint64_t sub_DA5E20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a2 + 80);
  if ((int)v4 > 1)
  {
    unint64_t v5 = (unsigned char *)result;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6) {
      int v7 = (uint64_t *)(v6 + 8);
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = 8 * v4;
    do
    {
      sub_DA6688(v5, *v7, 2, (uint64_t)v10);
      sub_DA62A8(a3, (uint64_t)v10);
      double result = sub_402C7C((uint64_t)v10);
      ++v7;
      v8 -= 8;
    }
    while (v8);
    uint64_t v9 = a3[1];
    *(_DWORD *)(*a3 + 104) = 0;
    *(_DWORD *)(v9 - 272) = 1;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_DA5EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_402C7C((uint64_t)va);
  if (*v2) {
    sub_20B07C0((uint64_t)v2, *v2);
  }
  _Unwind_Resume(a1);
}

void sub_DA5F18(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *(uint64_t (****)())(a2 + 192);
  if (!v5) {
    unint64_t v5 = &off_254C5C8;
  }
  uint64_t v6 = (uint64_t (***)())v5[55];
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = &off_254C418;
  }
  sub_D73C38(a3, *((int *)v7 + 8) + 1);
  uint64_t v8 = *((int *)v7 + 8);
  uint64_t v9 = v7[5];
  if (v9) {
    BOOL v10 = v9 + 1;
  }
  else {
    BOOL v10 = 0;
  }
  if (v8)
  {
    uint64_t v11 = a3[1];
    uint64_t v12 = 8 * v8;
    do
    {
      if (*((void *)*v10 + 3)) {
        uint64_t v13 = (uint64_t (***)())*((void *)*v10 + 3);
      }
      else {
        uint64_t v13 = &off_2539B38;
      }
      sub_DA6688(a1, (uint64_t)v13, 0, (uint64_t)v14);
      uint64_t v11 = sub_DA8944(a3, v11, (uint64_t)v14) + 376;
      sub_402C7C((uint64_t)v14);
      ++v10;
      v12 -= 8;
    }
    while (v12);
  }
  if ((_BYTE)v7[2])
  {
    sub_DA6688(a1, (uint64_t)v7[6], 0, (uint64_t)v14);
    sub_DA62A8(a3, (uint64_t)v14);
    sub_402C7C((uint64_t)v14);
  }
}

void sub_DA603C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_402C7C((uint64_t)va);
  sub_401F88(v2);
  _Unwind_Resume(a1);
}

void sub_DA6084(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_DA6098(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = &off_254C5C8;
  if (*(void *)(a2 + 192)) {
    unint64_t v5 = *(uint64_t (****)())(a2 + 192);
  }
  uint64_t v6 = (uint64_t (***)())v5[62];
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = &off_254C470;
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_D73C38(a3, *((int *)v7 + 6));
  uint64_t v8 = *((int *)v7 + 6);
  uint64_t v9 = v7[4];
  if (v9) {
    BOOL v10 = v9 + 1;
  }
  else {
    BOOL v10 = 0;
  }
  if (v8)
  {
    uint64_t v11 = a3[1];
    uint64_t v12 = 8 * v8;
    do
    {
      if (*((void *)*v10 + 3)) {
        uint64_t v13 = (uint64_t (***)())*((void *)*v10 + 3);
      }
      else {
        uint64_t v13 = &off_2539B38;
      }
      sub_DA6688(a1, (uint64_t)v13, 0, (uint64_t)v14);
      uint64_t v11 = sub_DA8944(a3, v11, (uint64_t)v14) + 376;
      sub_402C7C((uint64_t)v14);
      ++v10;
      v12 -= 8;
    }
    while (v12);
  }
}

void sub_DA6188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = *v10;
  if (*v10)
  {
    uint64_t v13 = (uint64_t)v10[1];
    BOOL v14 = *v10;
    if ((void *)v13 != v12)
    {
      do
        uint64_t v13 = sub_402C7C(v13 - 376);
      while ((void *)v13 != v12);
      BOOL v14 = *v10;
    }
    v10[1] = v12;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DA61E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a2 + 8);
  if (v7)
  {
    uint64_t v9 = (unsigned char *)result;
    uint64_t v10 = 8 * v7;
    do
    {
      sub_DA6688(v9, *v6, a3, (uint64_t)v11);
      sub_DA62A8(a4, (uint64_t)v11);
      double result = sub_402C7C((uint64_t)v11);
      ++v6;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

void sub_DA6278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_402C7C((uint64_t)va);
  sub_401F88(v2);
  _Unwind_Resume(a1);
}

void sub_DA6294(_Unwind_Exception *a1)
{
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DA62A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v17 = sub_DA80C4(a1, a2);
    a1[1] = v17;
    return v17 - 376;
  }
  else
  {
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v3 + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = 0;
    *(void *)(v3 + 72) = 0;
    *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(v3 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    int v7 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(v3 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(v3 + 96) = v7;
    uint64_t v8 = *(void *)(a2 + 104);
    *(_DWORD *)(v3 + 112) = *(_DWORD *)(a2 + 112);
    *(void *)(v3 + 104) = v8;
    long long v9 = *(_OWORD *)(a2 + 120);
    *(void *)(v3 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(v3 + 120) = v9;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    long long v10 = *(_OWORD *)(a2 + 144);
    *(void *)(v3 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(v3 + 144) = v10;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    long long v11 = *(_OWORD *)(a2 + 168);
    *(void *)(v3 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(v3 + 168) = v11;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    long long v12 = *(_OWORD *)(a2 + 192);
    *(void *)(v3 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(v3 + 192) = v12;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    uint64_t v13 = *(void *)(a2 + 232);
    *(_OWORD *)(v3 + 216) = *(_OWORD *)(a2 + 216);
    *(void *)(v3 + 232) = v13;
    *(void *)(v3 + 240) = 0;
    *(void *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
    *(_OWORD *)(v3 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(v3 + 256) = *(void *)(a2 + 256);
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(v3 + 264) = 0;
    *(void *)(v3 + 272) = 0;
    *(void *)(v3 + 280) = 0;
    uint64_t v14 = *(void *)(a2 + 272);
    *(void *)(v3 + 264) = *(void *)(a2 + 264);
    *(void *)(v3 + 272) = v14;
    *(void *)(v3 + 280) = *(void *)(a2 + 280);
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(v3 + 288) = 0;
    *(void *)(v3 + 296) = 0;
    *(void *)(v3 + 304) = 0;
    *(_OWORD *)(v3 + 288) = *(_OWORD *)(a2 + 288);
    *(void *)(v3 + 304) = *(void *)(a2 + 304);
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    uint64_t v15 = *(void *)(a2 + 328);
    *(_OWORD *)(v3 + 312) = *(_OWORD *)(a2 + 312);
    *(void *)(v3 + 328) = v15;
    *(void *)(v3 + 336) = 0;
    *(void *)(v3 + 344) = 0;
    *(void *)(v3 + 352) = 0;
    *(_OWORD *)(v3 + 336) = *(_OWORD *)(a2 + 336);
    *(void *)(v3 + 352) = *(void *)(a2 + 352);
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(_DWORD *)(v3 + 360) = *(_DWORD *)(a2 + 360);
    *(void *)(v3 + 368) = *(void *)(a2 + 368);
    a1[1] = v3 + 376;
    return v3;
  }
}

void sub_DA646C(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_DA76AC(a1, a2, a4);
  BOOL v7 = sub_DAA288(a4);
  if (!v7)
  {
    uint64_t v29 = sub_DA7500(v7, a2);
    int v30 = v8;
    sub_DAA084((uint64_t)&v23, &v29);
    *(void *)a4 = v23;
    *(_DWORD *)(a4 + 8) = DWORD2(v23);
    long long v9 = v25;
    *(_OWORD *)(a4 + 16) = v24;
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v26;
    *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)&v26[1] + 7);
    long long v10 = *(void **)(a4 + 72);
    if (v10)
    {
      *(void *)(a4 + 80) = v10;
      operator delete(v10);
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 80) = 0;
      *(void *)(a4 + 88) = 0;
    }
    *(_OWORD *)(a4 + 72) = *(_OWORD *)&v26[3];
    *(void *)(a4 + 88) = v26[5];
    *(_DWORD *)(a4 + 96) = v27;
    *(unsigned char *)(a4 + 100) = v28;
    sub_DA6D70(a2, (uint64_t)&v23);
    long long v11 = (void **)(a4 + 240);
    uint64_t v12 = *(void *)(a4 + 240);
    if (v12)
    {
      uint64_t v13 = *(void *)(a4 + 248);
      uint64_t v14 = *(void **)(a4 + 240);
      if (v13 != v12)
      {
        do
        {
          uint64_t v15 = *(void **)(v13 - 32);
          if (v15)
          {
            *(void *)(v13 - 24) = v15;
            operator delete(v15);
          }
          v13 -= 104;
        }
        while (v13 != v12);
        uint64_t v14 = *v11;
      }
      *(void *)(a4 + 248) = v12;
      operator delete(v14);
      char *v11 = 0;
      *(void *)(a4 + 248) = 0;
      *(void *)(a4 + 256) = 0;
    }
    *(_OWORD *)(a4 + 240) = v23;
    *(void *)(a4 + 256) = v24;
    *(_OWORD *)(a4 + 312) = xmmword_20B8E30;
    *(void *)(a4 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v16 = (void **)(a4 + 336);
    uint64_t v17 = *(void *)(a4 + 336);
    if (v17)
    {
      uint64_t v18 = *(void *)(a4 + 344);
      uint64_t v19 = *(void **)(a4 + 336);
      if (v18 != v17)
      {
        uint64_t v20 = *(void *)(a4 + 344);
        do
        {
          std::string v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v18 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v18 = v20;
        }
        while (v20 != v17);
        uint64_t v19 = *v16;
      }
      *(void *)(a4 + 344) = v17;
      operator delete(v19);
      *uint64_t v16 = 0;
      *(void *)(a4 + 344) = 0;
      *(void *)(a4 + 352) = 0;
    }
    *(unsigned char *)(a4 + 368) = 0;
    *(void *)(a4 + 344) = 0;
    *(void *)(a4 + 352) = 0;
    *uint64_t v16 = 0;
    *(_DWORD *)(a4 + 360) = 0;
  }
  *(unsigned char *)(a4 + 216) = 0;
  *(void *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = 0;
  *(void *)(a4 + 16) = -1;
  *(_DWORD *)(a4 + 372) = 0;
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a4 + 112) = 0;
  *(_DWORD *)(a4 + 104) = a3;
}

void sub_DA664C(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA6660(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA6674(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA6688(unsigned char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_DA7B94((uint64_t)a1, a2, a4);
  if (!sub_DAA288(a4))
  {
    sub_DA7020((uint64_t)a1, a2, (uint64_t)v30);
    *(void *)a4 = *(void *)v30;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)&v30[8];
    long long v8 = *(_OWORD *)&v30[32];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v30[16];
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)v31;
    *(_DWORD *)(a4 + 63) = *(_DWORD *)((char *)&v31[1] + 7);
    long long v9 = *(void **)(a4 + 72);
    if (v9)
    {
      *(void *)(a4 + 80) = v9;
      operator delete(v9);
      *(void *)(a4 + 72) = 0;
      *(void *)(a4 + 80) = 0;
      *(void *)(a4 + 88) = 0;
    }
    *(_OWORD *)(a4 + 72) = *(_OWORD *)&v31[3];
    *(void *)(a4 + 88) = v31[5];
    *(_DWORD *)(a4 + 96) = v32;
    *(unsigned char *)(a4 + 100) = v33;
    sub_DA6BA0(a2, (uint64_t)v30);
    long long v10 = (void **)(a4 + 240);
    uint64_t v11 = *(void *)(a4 + 240);
    if (v11)
    {
      uint64_t v12 = *(void *)(a4 + 248);
      uint64_t v13 = *(void **)(a4 + 240);
      if (v12 != v11)
      {
        do
        {
          uint64_t v14 = *(void **)(v12 - 32);
          if (v14)
          {
            *(void *)(v12 - 24) = v14;
            operator delete(v14);
          }
          v12 -= 104;
        }
        while (v12 != v11);
        uint64_t v13 = *v10;
      }
      *(void *)(a4 + 248) = v11;
      operator delete(v13);
      *long long v10 = 0;
      *(void *)(a4 + 248) = 0;
      *(void *)(a4 + 256) = 0;
    }
    *(_OWORD *)(a4 + 240) = *(_OWORD *)v30;
    *(void *)(a4 + 256) = *(void *)&v30[16];
    if (*(_DWORD *)(a2 + 80) != 3) {
      goto LABEL_16;
    }
    uint64_t v15 = *(uint64_t (****)())(a2 + 32);
    if (!v15) {
      uint64_t v15 = &off_2539A50;
    }
    if (((_BYTE)v15[2] & 2) != 0)
    {
      sub_3D25BC((uint64_t)v30, (uint64_t)v15[7]);
    }
    else
    {
LABEL_16:
      *(_OWORD *)int v30 = xmmword_20B8E30;
      *(_OWORD *)&v30[16] = 0x7FFFFFFFFFFFFFFFuLL;
      *(_OWORD *)&v30[32] = 0uLL;
      v31[0] = 0;
    }
    *(void *)(a4 + 328) = *(void *)&v30[16];
    *(_OWORD *)(a4 + 312) = *(_OWORD *)v30;
    uint64_t v16 = *(void *)(a4 + 336);
    if (v16)
    {
      uint64_t v17 = (void **)(a4 + 336);
      uint64_t v18 = *(void *)(a4 + 344);
      uint64_t v19 = *(void **)(a4 + 336);
      if (v18 != v16)
      {
        uint64_t v20 = *(void *)(a4 + 344);
        do
        {
          std::string v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v18 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v18 = v20;
        }
        while (v20 != v16);
        uint64_t v19 = *v17;
      }
      *(void *)(a4 + 344) = v16;
      operator delete(v19);
      *uint64_t v17 = 0;
      *(void *)(a4 + 344) = 0;
      *(void *)(a4 + 352) = 0;
    }
    *(_OWORD *)(a4 + 336) = *(_OWORD *)&v30[24];
    *(void *)(a4 + 352) = *(void *)&v30[40];
    *(_DWORD *)(a4 + 360) = v31[0];
    *(unsigned char *)(a4 + 368) = *(unsigned char *)(a2 + 64);
  }
  sub_DC5B9C(a2, v30);
  *(unsigned char *)(a4 + 216) = v30[0];
  *(_OWORD *)(a4 + 224) = *(_OWORD *)&v30[8];
  *(_DWORD *)(a4 + 104) = a3;
  long long v23 = *(uint64_t (****)())(a2 + 24);
  if (!v23) {
    long long v23 = &off_25399D8;
  }
  if (((_BYTE)v23[5] & 8) != 0) {
    uint64_t v24 = nullsub_1(v23[12]);
  }
  else {
    uint64_t v24 = -1;
  }
  *(void *)(a4 + 16) = v24;
  *(_DWORD *)(a4 + 372) = *(_DWORD *)(a2 + 72) == 1;
  unsigned int v25 = *(_DWORD *)(a2 + 16);
  if ((v25 & 0x400) != 0)
  {
    int v27 = *(_DWORD *)(a2 + 80);
    unsigned int v28 = v27 - 2;
    int v26 = v27 - 1;
    if (v28 >= 3) {
      int v26 = 0;
    }
  }
  else
  {
    int v26 = 0;
  }
  if (((*(_DWORD *)(a2 + 76) < 5u) & (v25 >> 9)) != 0) {
    int v29 = *(_DWORD *)(a2 + 76);
  }
  else {
    int v29 = *(unsigned __int8 *)(a2 + 64);
  }
  *(_DWORD *)(a4 + 108) = v26;
  *(_DWORD *)(a4 + 112) = v29;
  sub_DA7F14(a1, a2, a4);
}

void sub_DA6960(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA6974(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA6988(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA699C(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA69B0(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DA69C4(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_DA69D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  do
  {
    BOOL result = sub_DAA288(v2);
    if (!result) {
      break;
    }
    v2 += 376;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_DA6A28(uint64_t a1)
{
  return a1 + 6;
}

void sub_DA6A30(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x276276276276277) {
    sub_2E00();
  }
  long long v4 = a1[1];
  uint64_t v5 = 104 * a2;
  long long v6 = (char *)operator new(104 * a2);
  BOOL v7 = &v6[v5];
  long long v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  long long v9 = &v6[v4 - v2];
  do
  {
    *(_OWORD *)(v9 - 104) = *(_OWORD *)(v4 - 104);
    long long v10 = *(_OWORD *)(v4 - 88);
    long long v11 = *(_OWORD *)(v4 - 72);
    long long v12 = *(_OWORD *)(v4 - 56);
    *(_DWORD *)(v9 - 41) = *(_DWORD *)(v4 - 41);
    *(_OWORD *)(v9 - 56) = v12;
    *(_OWORD *)(v9 - 72) = v11;
    *(_OWORD *)(v9 - 88) = v10;
    *((_OWORD *)v9 - 2) = *((_OWORD *)v4 - 2);
    *((void *)v9 - 2) = *((void *)v4 - 2);
    *((void *)v4 - 4) = 0;
    *((void *)v4 - 3) = 0;
    *((void *)v4 - 2) = 0;
    int v13 = *((_DWORD *)v4 - 2);
    *(v9 - 4) = *(v4 - 4);
    *((_DWORD *)v9 - 2) = v13;
    v9 -= 104;
    v4 -= 104;
  }
  while (v4 != v2);
  uint64_t v14 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      uint64_t v15 = (void *)*((void *)v2 - 4);
      if (v15)
      {
        *((void *)v2 - 3) = v15;
        operator delete(v15);
      }
      v2 -= 104;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void sub_DA6BA0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 32);
  }
  else {
    uint64_t v3 = &off_2539A50;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_DA6A30((char **)a2, *((int *)v3 + 8));
  long long v4 = v3[5];
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 8);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    do
    {
      sub_DE4EBC(*v5, (uint64_t)v18);
      if (sub_DAA288((uint64_t)v18))
      {
        unint64_t v8 = *(void *)(a2 + 8);
        if (v8 >= *(void *)(a2 + 16))
        {
          uint64_t v17 = sub_DA98C4((void **)a2, (uint64_t)v18);
        }
        else
        {
          *(_OWORD *)unint64_t v8 = v18[0];
          long long v9 = v18[1];
          long long v10 = v18[2];
          long long v11 = *(_OWORD *)v19;
          *(_DWORD *)(v8 + 63) = *(_DWORD *)&v19[15];
          *(_OWORD *)(v8 + 32) = v10;
          *(_OWORD *)(v8 + 48) = v11;
          *(void *)(v8 + 72) = 0;
          *(_OWORD *)(v8 + 16) = v9;
          *(void *)(v8 + 80) = 0;
          *(void *)(v8 + 88) = 0;
          long long v12 = __p;
          int64_t v13 = v21 - (unsigned char *)__p;
          if (v21 != __p)
          {
            if (v13 < 0) {
              sub_2E00();
            }
            uint64_t v14 = (char *)operator new(v21 - (unsigned char *)__p);
            *(void *)(v8 + 72) = v14;
            *(void *)(v8 + 80) = v14;
            uint64_t v15 = &v14[4 * (v13 >> 2)];
            *(void *)(v8 + 88) = v15;
            memcpy(v14, v12, v13);
            *(void *)(v8 + 80) = v15;
          }
          int v16 = v22;
          *(unsigned char *)(v8 + 100) = v23;
          *(_DWORD *)(v8 + 96) = v16;
          uint64_t v17 = (char *)(v8 + 104);
          *(void *)(a2 + 8) = v8 + 104;
        }
        *(void *)(a2 + 8) = v17;
      }
      if (__p)
      {
        uint64_t v21 = __p;
        operator delete(__p);
      }
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
}

void sub_DA6D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_4364F4(v20);
  _Unwind_Resume(a1);
}

void sub_DA6D70(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DA6A30((char **)a2, *(int *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(a1 + 56);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    do
    {
      double v8 = *(double *)(*(void *)v5 + 56);
      uint64_t v9 = -1;
      if (v8 <= 180.0)
      {
        double v10 = *(double *)(*(void *)v5 + 48);
        if (v10 >= -85.0511288 && v10 <= 85.0511288 && v8 >= -180.0)
        {
          double v11 = fmax(v10, -85.0511288);
          if (v11 >= 85.0511288) {
            double v12 = 1.48442223;
          }
          else {
            double v12 = v11 * 3.14159265 / 180.0;
          }
          long double v13 = sin(v12);
          LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v14 >= 0xFFFFFFFE) {
            uint64_t v14 = 4294967294;
          }
          else {
            uint64_t v14 = v14;
          }
          uint64_t v9 = ((v8 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v14 << 32);
        }
      }
      *(void *)&long long __src = v9;
      DWORD2(__src) = 0x7FFFFFFF;
      unint64_t v15 = *(void *)(a2 + 8);
      if (v15 >= *(void *)(a2 + 16))
      {
        uint64_t v16 = sub_DA9B68((uint64_t *)a2, (uint64_t *)&__src);
      }
      else
      {
        sub_DAA084(*(void *)(a2 + 8), (uint64_t *)&__src);
        uint64_t v16 = v15 + 104;
        *(void *)(a2 + 8) = v15 + 104;
      }
      *(void *)(a2 + 8) = v16;
      long long __src = xmmword_20F0580;
      uint64_t v18 = 0x800000007;
      sub_147D0((void *)(v16 - 32), (char *)&__src, (char *)&v19, 6uLL);
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
  }
}

void sub_DA6FCC(_Unwind_Exception *a1)
{
  sub_4364F4(v1);
  _Unwind_Resume(a1);
}

void sub_DA6FE0(_Unwind_Exception *a1)
{
  sub_4364F4(v1);
  _Unwind_Resume(a1);
}

void sub_DA6FF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_4364F4((void **)v1);
  _Unwind_Resume(a1);
}

void sub_DA700C(_Unwind_Exception *a1)
{
  sub_4364F4(v1);
  _Unwind_Resume(a1);
}

void sub_DA7020(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = -1;
  *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
  *(void *)(a3 + 16) = -1;
  uint64_t v5 = a3 + 16;
  *(void *)(a3 + 24) = -1;
  *(void *)(a3 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 48) = -1935635296;
  *(void *)(a3 + 56) = 0;
  uint64_t v6 = (double *)(a3 + 56);
  *(void *)(a3 + 72) = 0;
  uint64_t v7 = (void *)(a3 + 72);
  *(_DWORD *)(a3 + 63) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  *(unsigned char *)(a3 + 100) = 100;
  unint64_t v8 = sub_DA72E4(a1, a2);
  unint64_t v32 = v8;
  int v33 = v9;
  if (v8 == -1 && v8 > 0xFFFFFFFEFFFFFFFFLL)
  {
    double v10 = *(uint64_t (****)())(a2 + 40);
    if (!v10) {
      double v10 = &off_2539A90;
    }
    uint64_t v11 = sub_1883224((uint64_t)(v10 + 2), dword_254EB18, qword_254EB20);
    sub_DAA240((uint64_t)&v25, v11);
    double v12 = *(void **)(a3 + 72);
    *(void *)a3 = v25;
    *(_DWORD *)(a3 + 8) = v26;
    long long v13 = v28;
    *(_OWORD *)uint64_t v5 = v27;
    *(_OWORD *)(v5 + 16) = v13;
    *(_OWORD *)(v5 + 32) = *(_OWORD *)v29;
    *(_DWORD *)(v5 + 47) = *(_DWORD *)((char *)&v29[1] + 7);
    if (v12)
    {
      operator delete(v12);
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
  }
  else
  {
    sub_DAA084((uint64_t)&v25, (uint64_t *)&v32);
    *(void *)a3 = v25;
    *(_DWORD *)(a3 + 8) = v26;
    long long v14 = v28;
    *(_OWORD *)uint64_t v5 = v27;
    *(_OWORD *)(v5 + 16) = v14;
    *(_OWORD *)(v5 + 32) = *(_OWORD *)v29;
    *(_DWORD *)(v5 + 47) = *(_DWORD *)((char *)&v29[1] + 7);
  }
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v29[3];
  *(void *)(a3 + 88) = v29[5];
  *(_DWORD *)(a3 + 96) = v30;
  *(unsigned char *)(a3 + 100) = v31;
  if (*(_DWORD *)(a2 + 80) == 4)
  {
    unint64_t v15 = *(uint64_t (****)())(a2 + 40);
    if (!v15) {
      unint64_t v15 = &off_2539A90;
    }
    uint64_t v16 = (uint64_t (***)())v15[6];
    uint64_t v17 = &off_253F2E8;
    if (v16) {
      uint64_t v17 = v16;
    }
    int v18 = *((_DWORD *)v17 + 10);
    if ((v18 & 0x20) != 0)
    {
      double v19 = *((double *)v17 + 11);
      if (v19 >= 0.0)
      {
        if (v19 > 69.4444444) {
          double v19 = 69.4444444;
        }
        *uint64_t v6 = v19;
      }
    }
    if ((v18 & 8) != 0)
    {
      double v20 = *((double *)v17 + 9);
      if (v20 >= 0.0) {
        *(double *)(a3 + 40) = v20;
      }
    }
    if ((v18 & 0x200) != 0)
    {
      double v21 = *((double *)v17 + 14);
      if (v21 >= 0.0)
      {
        unsigned int v22 = (int)llround(v21 * 100.0) % 36000;
        if (v22 > 0xFFFF735F) {
          LOWORD(v22) = v22 - 29536;
        }
        *(_WORD *)(a3 + 50) = v22;
        if ((v18 & 0x400) != 0)
        {
          double v23 = *((double *)v17 + 15);
          if (v23 >= 0.0)
          {
            unsigned int v24 = (int)llround(v23 * 100.0) % 36000;
            if (v24 > 0xFFFF735F) {
              LOWORD(v24) = v24 - 29536;
            }
            *(_WORD *)(a3 + 48) = v24;
          }
        }
      }
    }
    *(unsigned char *)(a3 + 66) = (v18 & 2) != 0;
  }
}

void sub_DA72C8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DA72E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 80);
  switch(v2)
  {
    case 2:
      uint64_t v6 = *(uint64_t (****)())(a2 + 24);
      if (!v6) {
        uint64_t v6 = &off_25399D8;
      }
      uint64_t v4 = (uint64_t (***)())v6[10];
      if (!v4) {
        uint64_t v4 = &off_253F1A0;
      }
      if ((~*((_DWORD *)v4 + 10) & 3) != 0) {
        return -1;
      }
      break;
    case 4:
      unint64_t v15 = *(uint64_t (****)())(a2 + 40);
      if (!v15) {
        unint64_t v15 = &off_2539A90;
      }
      uint64_t v16 = (uint64_t (***)())v15[6];
      if (!v16) {
        uint64_t v16 = &off_253F2E8;
      }
      uint64_t v4 = (uint64_t (***)())v16[6];
      if (!v4) {
        uint64_t v4 = &off_253F1A0;
      }
      if ((~*((_DWORD *)v4 + 10) & 3) != 0) {
        return -1;
      }
      break;
    case 3:
      uint64_t v3 = *(uint64_t (****)())(a2 + 32);
      if (!v3) {
        uint64_t v3 = &off_2539A50;
      }
      uint64_t v4 = (uint64_t (***)())v3[6];
      if (!v4) {
        uint64_t v4 = &off_253F1A0;
      }
      if ((~*((_DWORD *)v4 + 10) & 3) != 0) {
        return -1;
      }
      break;
    default:
      return -1;
  }
  double v7 = *((double *)v4 + 7);
  uint64_t result = -1;
  if (v7 <= 180.0)
  {
    double v8 = *((double *)v4 + 6);
    if (v8 >= -85.0511288 && v8 <= 85.0511288 && v7 >= -180.0)
    {
      double v9 = fmax(v8, -85.0511288);
      double v10 = v9 * 3.14159265 / 180.0;
      BOOL v11 = v9 < 85.0511288;
      double v12 = 1.48442223;
      if (v11) {
        double v12 = v10;
      }
      long double v13 = sin(v12);
      LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v14 >= 0xFFFFFFFE) {
        uint64_t v14 = 4294967294;
      }
      else {
        uint64_t v14 = v14;
      }
      return ((v7 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v14 << 32);
    }
  }
  return result;
}

uint64_t sub_DA7500(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 80);
  }
  else
  {
    if ((v2 & 1) == 0 || (uint64_t v3 = *(void *)(a2 + 72), (*(unsigned char *)(v3 + 17) & 8) == 0))
    {
      if (*(_DWORD *)(a2 + 56))
      {
        uint64_t v4 = *(uint64_t (****)())(*(void *)(a2 + 64) + 8);
        if ((~*((_DWORD *)v4 + 10) & 3) != 0) {
          return -1;
        }
        goto LABEL_11;
      }
      return -1;
    }
    uint64_t v6 = *(void *)(v3 + 304);
  }
  uint64_t v4 = *(uint64_t (****)())(v6 + 48);
  if (!v4) {
    uint64_t v4 = &off_253F1A0;
  }
  if ((~*((_DWORD *)v4 + 10) & 3) != 0) {
    return -1;
  }
LABEL_11:
  double v7 = *((double *)v4 + 7);
  uint64_t result = -1;
  if (v7 <= 180.0)
  {
    double v8 = *((double *)v4 + 6);
    if (v8 >= -85.0511288 && v8 <= 85.0511288 && v7 >= -180.0)
    {
      double v9 = fmax(v8, -85.0511288);
      double v10 = v9 * 3.14159265 / 180.0;
      BOOL v11 = v9 < 85.0511288;
      double v12 = 1.48442223;
      if (v11) {
        double v12 = v10;
      }
      long double v13 = sin(v12);
      LODWORD(v14) = ((log((v13 + 1.0) / (1.0 - v13)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v14 >= 0xFFFFFFFE) {
        uint64_t v14 = 4294967294;
      }
      else {
        uint64_t v14 = v14;
      }
      return ((v7 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v14 << 32);
    }
  }
  return result;
}

double sub_DA76AC@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v16);
    uint64_t v6 = sub_188FC78(&v16, (uint64_t)"get_place_details Waypoint=", 27);
    p_p = &__p;
    sub_188AB38(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v8 = strlen((const char *)p_p);
    sub_188FC78(v6, (uint64_t)p_p, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_1882CC4(a2 + 16, dword_254EB08))
  {
    uint64_t v9 = sub_1883F34(a2 + 16, dword_254EB08, qword_254EB10);
    sub_DAE0A8(v9, a3);
  }
  else
  {
    *(unsigned char *)(a1 + 7) = 1;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v16);
      BOOL v11 = sub_188FC78(&v16, (uint64_t)"ERROR: Received a Waypoint without a corresponding PlaceSearchResponse extension. ", 82);
      double v12 = sub_188FC78(v11, (uint64_t)"Waypoint=", 9);
      sub_188AB38(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long double v13 = &__p;
      }
      else {
        long double v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      size_t v14 = strlen((const char *)v13);
      sub_188FC78(v12, (uint64_t)v13, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)a3 = -1;
    *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    *(void *)(a3 + 16) = -1;
    *(void *)(a3 + 24) = -1;
    *(void *)(a3 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a3 + 48) = -1935635296;
    *(void *)(a3 + 56) = 0;
    *(_DWORD *)(a3 + 63) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 72) = 0;
    *(_DWORD *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 100) = 100;
    *(void *)(a3 + 104) = 0;
    *(_DWORD *)(a3 + 112) = 0;
    *(unsigned char *)(a3 + 216) = 0;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(void *)(a3 + 304) = 0;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 312) = xmmword_20B8E30;
    double result = NAN;
    *(void *)(a3 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a3 + 344) = 0;
    *(void *)(a3 + 352) = 0;
    *(_DWORD *)(a3 + 360) = 0;
    *(void *)(a3 + 336) = 0;
    *(unsigned char *)(a3 + 368) = 0;
    *(_DWORD *)(a3 + 372) = 0;
  }
  return result;
}

void sub_DA7AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_DA7B94@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 80) != 2) {
    goto LABEL_19;
  }
  if (*(void *)(a2 + 24)) {
    uint64_t v4 = *(uint64_t (****)())(a2 + 24);
  }
  else {
    uint64_t v4 = &off_25399D8;
  }
  if (((_BYTE)v4[5] & 8) == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v11);
      sub_188FC78(v11, (uint64_t)"Received a WaypointID without muid", 34);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_14:
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  if ((sub_1882CC4((uint64_t)(v4 + 2), dword_254EAF8) & 1) == 0)
  {
    *(unsigned char *)(a1 + 6) = 1;
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v11);
      sub_188FC78(v11, (uint64_t)"Received a WaypointID: ", 23);
      size_t v8 = (void *)std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)" without a corresponding PlaceResponse extension. Falling back to location hint", 79);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      goto LABEL_14;
    }
LABEL_19:
    *(void *)a3 = -1;
    *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    *(void *)(a3 + 16) = -1;
    *(void *)(a3 + 24) = -1;
    *(void *)(a3 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a3 + 40) = 0;
    *(_DWORD *)(a3 + 48) = -1935635296;
    *(void *)(a3 + 56) = 0;
    *(_DWORD *)(a3 + 63) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 72) = 0;
    *(_DWORD *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 100) = 100;
    *(void *)(a3 + 104) = 0;
    *(_DWORD *)(a3 + 112) = 0;
    *(unsigned char *)(a3 + 216) = 0;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(void *)(a3 + 304) = 0;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 312) = xmmword_20B8E30;
    double result = NAN;
    *(void *)(a3 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a3 + 344) = 0;
    *(void *)(a3 + 352) = 0;
    *(_DWORD *)(a3 + 360) = 0;
    *(void *)(a3 + 336) = 0;
    *(unsigned char *)(a3 + 368) = 0;
    *(_DWORD *)(a3 + 372) = 0;
    return result;
  }
  uint64_t v6 = sub_1883F34((uint64_t)(v4 + 2), dword_254EAF8, qword_254EB00);

  sub_DAE700(v6, a3);
  return result;
}

void sub_DA7E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_DA7F14(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a3 + 112);
  uint64_t v6 = a1 + 2;
  if (v5 != 3) {
    uint64_t v6 = a1;
  }
  if (v5 == 4) {
    double v7 = a1 + 4;
  }
  else {
    double v7 = v6;
  }
  if (!v7[1]) {
    sub_DA9D60((uint64_t *)(a3 + 240), 0, 0, 0);
  }
  if (*v7)
  {
    size_t v8 = *(uint64_t (****)())(a2 + 24);
    if (!v8) {
      size_t v8 = &off_25399D8;
    }
    uint64_t v9 = &off_253F1A0;
    char v10 = (uint64_t (***)())v8[10];
    if (v10) {
      uint64_t v9 = v10;
    }
    if ((~*((_DWORD *)v9 + 10) & 3) == 0)
    {
      double v11 = *((double *)v9 + 7);
      uint64_t v12 = -1;
      if (v11 <= 180.0)
      {
        double v13 = *((double *)v9 + 6);
        if (v13 >= -85.0511288 && v13 <= 85.0511288 && v11 >= -180.0)
        {
          double v14 = fmax(v13, -85.0511288);
          double v15 = v14 * 3.14159265 / 180.0;
          BOOL v16 = v14 < 85.0511288;
          double v17 = 1.48442223;
          if (v16) {
            double v17 = v15;
          }
          long double v18 = sin(v17);
          LODWORD(v19) = ((log((v18 + 1.0) / (1.0 - v18)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v19 >= 0xFFFFFFFE) {
            uint64_t v19 = 4294967294;
          }
          else {
            uint64_t v19 = v19;
          }
          uint64_t v12 = ((v11 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v19 << 32);
        }
      }
      *(void *)a3 = v12;
      *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    }
  }
}

uint64_t sub_DA80C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v5 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAE4C415C9882B9) {
    sub_188D718();
  }
  uint64_t v7 = 376 * v5;
  long double v18 = operator new(376 * v5);
  uint64_t v19 = (uint64_t)v18 + 376 * v3;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v19 + 48) = v8;
  *(_DWORD *)(v19 + 63) = *(_DWORD *)(a2 + 63);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 16) = v9;
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v19 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(v19 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(v19 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v19 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(v19 + 104) = *(void *)(a2 + 104);
  *(void *)(v19 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(v19 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(v19 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v10 = *(_OWORD *)(a2 + 168);
  *(void *)(v19 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(v19 + 168) = v10;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(v19 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(v19 + 192) = v11;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v12 = *(_OWORD *)(a2 + 216);
  *(void *)(v19 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(v19 + 216) = v12;
  *(void *)(v19 + 248) = 0;
  *(void *)(v19 + 256) = 0;
  *(_OWORD *)(v19 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(v19 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(v19 + 272) = 0;
  *(void *)(v19 + 280) = 0;
  *(_OWORD *)(v19 + 264) = *(_OWORD *)(a2 + 264);
  *(void *)(v19 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(v19 + 296) = 0;
  *(void *)(v19 + 304) = 0;
  *(_OWORD *)(v19 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(v19 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  long long v13 = *(_OWORD *)(a2 + 312);
  *(void *)(v19 + 328) = *(void *)(a2 + 328);
  *(_OWORD *)(v19 + 312) = v13;
  *(void *)(v19 + 344) = 0;
  *(void *)(v19 + 352) = 0;
  *(_OWORD *)(v19 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(v19 + 352) = *(void *)(a2 + 352);
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(_DWORD *)(v19 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(v19 + 368) = *(void *)(a2 + 368);
  sub_484124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v19, v19);
  double v15 = (void *)*a1;
  uint64_t v14 = a1[1];
  *a1 = v16;
  a1[1] = v19 + 376;
  for (a1[2] = (uint64_t)v18 + v7; (void *)v14 != v15; uint64_t v14 = sub_402C7C(v14 - 376))
    ;
  if (v15) {
    operator delete(v15);
  }
  return v19 + 376;
}

void sub_DA8354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_DA8368(uint64_t **result, uint64_t a2)
{
  int v2 = result;
  uint64_t v3 = *result;
  unint64_t v4 = (*result)[1];
  if (v4 >= (*result)[2])
  {
    v3[1] = sub_DA8530(*result, a2);
    return v2;
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v4 + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)(v4 + 16) = v5;
    *(void *)(v4 + 80) = 0;
    *(void *)(v4 + 88) = 0;
    *(void *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(v4 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    int v8 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(v4 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(v4 + 96) = v8;
    uint64_t v9 = *(void *)(a2 + 104);
    *(_DWORD *)(v4 + 112) = *(_DWORD *)(a2 + 112);
    *(void *)(v4 + 104) = v9;
    long long v10 = *(_OWORD *)(a2 + 120);
    *(void *)(v4 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(v4 + 120) = v10;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    long long v11 = *(_OWORD *)(a2 + 144);
    *(void *)(v4 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(v4 + 144) = v11;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    long long v12 = *(_OWORD *)(a2 + 168);
    *(void *)(v4 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(v4 + 168) = v12;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    long long v13 = *(_OWORD *)(a2 + 192);
    *(void *)(v4 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(v4 + 192) = v13;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    uint64_t v14 = *(void *)(a2 + 232);
    *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
    *(void *)(v4 + 232) = v14;
    *(void *)(v4 + 240) = 0;
    *(void *)(v4 + 248) = 0;
    *(void *)(v4 + 256) = 0;
    *(_OWORD *)(v4 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(v4 + 256) = *(void *)(a2 + 256);
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(v4 + 264) = 0;
    *(void *)(v4 + 272) = 0;
    *(void *)(v4 + 280) = 0;
    uint64_t v15 = *(void *)(a2 + 272);
    *(void *)(v4 + 264) = *(void *)(a2 + 264);
    *(void *)(v4 + 272) = v15;
    *(void *)(v4 + 280) = *(void *)(a2 + 280);
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(v4 + 288) = 0;
    *(void *)(v4 + 296) = 0;
    *(void *)(v4 + 304) = 0;
    *(_OWORD *)(v4 + 288) = *(_OWORD *)(a2 + 288);
    *(void *)(v4 + 304) = *(void *)(a2 + 304);
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    uint64_t v16 = *(void *)(a2 + 328);
    *(_OWORD *)(v4 + 312) = *(_OWORD *)(a2 + 312);
    *(void *)(v4 + 328) = v16;
    *(void *)(v4 + 336) = 0;
    *(void *)(v4 + 344) = 0;
    *(void *)(v4 + 352) = 0;
    *(_OWORD *)(v4 + 336) = *(_OWORD *)(a2 + 336);
    *(void *)(v4 + 352) = *(void *)(a2 + 352);
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(_DWORD *)(v4 + 360) = *(_DWORD *)(a2 + 360);
    *(void *)(v4 + 368) = *(void *)(a2 + 368);
    v3[1] = v4 + 376;
  }
  return result;
}

uint64_t sub_DA8530(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v5 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAE4C415C9882B9) {
    sub_188D718();
  }
  uint64_t v7 = 376 * v5;
  long double v18 = operator new(376 * v5);
  uint64_t v19 = (uint64_t)v18 + 376 * v3;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v19 + 48) = v8;
  *(_DWORD *)(v19 + 63) = *(_DWORD *)(a2 + 63);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 16) = v9;
  *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v19 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(v19 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(v19 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v19 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(v19 + 104) = *(void *)(a2 + 104);
  *(void *)(v19 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(v19 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(v19 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(v19 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v10 = *(_OWORD *)(a2 + 168);
  *(void *)(v19 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(v19 + 168) = v10;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(v19 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(v19 + 192) = v11;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  long long v12 = *(_OWORD *)(a2 + 216);
  *(void *)(v19 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(v19 + 216) = v12;
  *(void *)(v19 + 248) = 0;
  *(void *)(v19 + 256) = 0;
  *(_OWORD *)(v19 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(v19 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(v19 + 272) = 0;
  *(void *)(v19 + 280) = 0;
  *(_OWORD *)(v19 + 264) = *(_OWORD *)(a2 + 264);
  *(void *)(v19 + 280) = *(void *)(a2 + 280);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(v19 + 296) = 0;
  *(void *)(v19 + 304) = 0;
  *(_OWORD *)(v19 + 288) = *(_OWORD *)(a2 + 288);
  *(void *)(v19 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  long long v13 = *(_OWORD *)(a2 + 312);
  *(void *)(v19 + 328) = *(void *)(a2 + 328);
  *(_OWORD *)(v19 + 312) = v13;
  *(void *)(v19 + 344) = 0;
  *(void *)(v19 + 352) = 0;
  *(_OWORD *)(v19 + 336) = *(_OWORD *)(a2 + 336);
  *(void *)(v19 + 352) = *(void *)(a2 + 352);
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(_DWORD *)(v19 + 360) = *(_DWORD *)(a2 + 360);
  *(void *)(v19 + 368) = *(void *)(a2 + 368);
  sub_484124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v19, v19);
  uint64_t v15 = (void *)*a1;
  uint64_t v14 = a1[1];
  *a1 = v16;
  a1[1] = v19 + 376;
  for (a1[2] = (uint64_t)v18 + v7; (void *)v14 != v15; uint64_t v14 = sub_402C7C(v14 - 376))
    ;
  if (v15) {
    operator delete(v15);
  }
  return v19 + 376;
}

void sub_DA87C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DA87D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA3677D46CEFA8D9ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - *a1) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v6 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(376 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v12 = (uint64_t)&v7[376 * v3];
  long long v13 = &v7[376 * v6];
  sub_48381C(v12, a2);
  sub_484124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  long long v9 = (void *)*a1;
  uint64_t v8 = a1[1];
  *a1 = v10;
  a1[1] = v12 + 376;
  for (a1[2] = (uint64_t)v13; (void *)v8 != v9; uint64_t v8 = sub_402C7C(v8 - 376))
    ;
  if (v9) {
    operator delete(v9);
  }
  return v12 + 376;
}

void sub_DA8930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DA8944(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = 0x51B3BEA3677D46CFLL * ((a2 - *a1) >> 3);
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v11 = 0x51B3BEA3677D46CFLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v11 > 0xAE4C415C9882B9) {
      sub_2E00();
    }
    unint64_t v12 = 0x51B3BEA3677D46CFLL * ((uint64_t)(v9 - v7) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11) {
      uint64_t v13 = v11;
    }
    if (v12 >= 0x572620AE4C415CLL) {
      unint64_t v14 = 0xAE4C415C9882B9;
    }
    else {
      unint64_t v14 = v13;
    }
    unint64_t v39 = a1 + 2;
    if (v14)
    {
      if (v14 > 0xAE4C415C9882B9) {
        sub_188D718();
      }
      uint64_t v15 = (uint64_t *)operator new(376 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v36 = v15;
    uint64_t v37 = &v15[47 * v8];
    *(void *)&long long v38 = v37;
    *((void *)&v38 + 1) = &v15[47 * v14];
    sub_DA8ED4(&v36, a3);
    uint64_t v28 = (uint64_t)v37;
    sub_484124(v10, v4, v4, *a1, *a1, (uint64_t)v37, (uint64_t)v37);
    uint64_t v37 = (uint64_t *)v29;
    uint64_t v30 = sub_DA93C4(v10, v4, a1[1], v38);
    char v31 = (uint64_t *)*a1;
    uint64_t v32 = *((void *)&v38 + 1);
    long long v33 = *(_OWORD *)(a1 + 1);
    *a1 = (uint64_t)v37;
    a1[1] = v30;
    a1[2] = v32;
    long long v38 = v33;
    uint64_t v36 = v31;
    uint64_t v37 = v31;
    uint64_t v34 = v33;
    if ((uint64_t *)v33 != v31)
    {
      do
      {
        *(void *)&long long v38 = v34 - 376;
        sub_402C7C(v34 - 376);
        uint64_t v34 = v38;
      }
      while ((uint64_t *)v38 != v31);
      char v31 = v36;
    }
    if (v31) {
      operator delete(v31);
    }
    return v28;
  }
  else if (a2 == v6)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v16 = *(_OWORD *)(a3 + 16);
    long long v17 = *(_OWORD *)(a3 + 32);
    long long v18 = *(_OWORD *)(a3 + 48);
    *(_DWORD *)(a2 + 63) = *(_DWORD *)(a3 + 63);
    *(_OWORD *)(a2 + 32) = v17;
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 16) = v16;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
    *(void *)(a2 + 88) = *(void *)(a3 + 88);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    int v19 = *(_DWORD *)(a3 + 96);
    *(unsigned char *)(a2 + 100) = *(unsigned char *)(a3 + 100);
    *(_DWORD *)(a2 + 96) = v19;
    uint64_t v20 = v7 + 376 * v8;
    uint64_t v21 = *(void *)(a3 + 104);
    *(_DWORD *)(v20 + 112) = *(_DWORD *)(a3 + 112);
    *(void *)(v20 + 104) = v21;
    long long v22 = *(_OWORD *)(a3 + 120);
    *(void *)(v20 + 136) = *(void *)(a3 + 136);
    *(_OWORD *)(v20 + 120) = v22;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 120) = 0;
    long long v23 = *(_OWORD *)(a3 + 144);
    *(void *)(v20 + 160) = *(void *)(a3 + 160);
    *(_OWORD *)(v20 + 144) = v23;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    long long v24 = *(_OWORD *)(a3 + 168);
    *(void *)(v20 + 184) = *(void *)(a3 + 184);
    *(_OWORD *)(v20 + 168) = v24;
    *(void *)(a3 + 168) = 0;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    long long v25 = *(_OWORD *)(a3 + 192);
    *(void *)(v20 + 208) = *(void *)(a3 + 208);
    *(_OWORD *)(v20 + 192) = v25;
    *(void *)(a3 + 192) = 0;
    *(void *)(a3 + 200) = 0;
    *(void *)(a3 + 208) = 0;
    uint64_t v26 = *(void *)(a3 + 232);
    *(_OWORD *)(v20 + 216) = *(_OWORD *)(a3 + 216);
    *(void *)(v20 + 232) = v26;
    *(void *)(v20 + 240) = 0;
    *(void *)(v20 + 248) = 0;
    *(void *)(v20 + 256) = 0;
    *(_OWORD *)(v20 + 240) = *(_OWORD *)(a3 + 240);
    *(void *)(v20 + 256) = *(void *)(a3 + 256);
    *(void *)(a3 + 240) = 0;
    *(void *)(a3 + 248) = 0;
    *(void *)(a3 + 256) = 0;
    *(void *)(v20 + 264) = 0;
    *(void *)(v20 + 272) = 0;
    *(void *)(v20 + 280) = 0;
    *(_OWORD *)(v20 + 264) = *(_OWORD *)(a3 + 264);
    *(void *)(v20 + 280) = *(void *)(a3 + 280);
    *(void *)(a3 + 264) = 0;
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 280) = 0;
    *(void *)(v20 + 288) = 0;
    *(void *)(v20 + 296) = 0;
    *(void *)(v20 + 304) = 0;
    *(_OWORD *)(v20 + 288) = *(_OWORD *)(a3 + 288);
    *(void *)(v20 + 304) = *(void *)(a3 + 304);
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 296) = 0;
    *(void *)(a3 + 304) = 0;
    uint64_t v27 = *(void *)(a3 + 328);
    *(_OWORD *)(v20 + 312) = *(_OWORD *)(a3 + 312);
    *(void *)(v20 + 328) = v27;
    *(void *)(v20 + 336) = 0;
    *(void *)(v20 + 344) = 0;
    *(void *)(v20 + 352) = 0;
    *(_OWORD *)(v20 + 336) = *(_OWORD *)(a3 + 336);
    *(void *)(v20 + 352) = *(void *)(a3 + 352);
    *(void *)(a3 + 336) = 0;
    *(void *)(a3 + 344) = 0;
    *(void *)(a3 + 352) = 0;
    *(_DWORD *)(v20 + 360) = *(_DWORD *)(a3 + 360);
    *(void *)(v20 + 368) = *(void *)(a3 + 368);
    a1[1] = a2 + 376;
  }
  else
  {
    sub_DA8CCC((uint64_t)a1, a2, v6, a2 + 376);
    sub_CA9BA0(v4, (uint64_t *)a3);
  }
  return v4;
}

void sub_DA8CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DA8CCC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  for (uint64_t i = v4; v5 < a3; v5 += 376)
  {
    *(_OWORD *)uint64_t i = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v8 = *(_OWORD *)(v5 + 32);
    long long v9 = *(_OWORD *)(v5 + 48);
    *(_DWORD *)(i + 63) = *(_DWORD *)(v5 + 63);
    *(_OWORD *)(i + 32) = v8;
    *(_OWORD *)(i + 48) = v9;
    *(_OWORD *)(i + 16) = v7;
    *(void *)(i + 80) = 0;
    *(void *)(i + 88) = 0;
    *(void *)(i + 72) = 0;
    *(_OWORD *)(i + 72) = *(_OWORD *)(v5 + 72);
    *(void *)(i + 88) = *(void *)(v5 + 88);
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = 0;
    *(void *)(v5 + 88) = 0;
    int v10 = *(_DWORD *)(v5 + 96);
    *(unsigned char *)(i + 100) = *(unsigned char *)(v5 + 100);
    *(_DWORD *)(i + 96) = v10;
    uint64_t v11 = *(void *)(v5 + 104);
    *(_DWORD *)(i + 112) = *(_DWORD *)(v5 + 112);
    *(void *)(i + 104) = v11;
    long long v12 = *(_OWORD *)(v5 + 120);
    *(void *)(i + 136) = *(void *)(v5 + 136);
    *(_OWORD *)(i + 120) = v12;
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 136) = 0;
    *(void *)(v5 + 120) = 0;
    long long v13 = *(_OWORD *)(v5 + 144);
    *(void *)(i + 160) = *(void *)(v5 + 160);
    *(_OWORD *)(i + 144) = v13;
    *(void *)(v5 + 144) = 0;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 160) = 0;
    long long v14 = *(_OWORD *)(v5 + 168);
    *(void *)(i + 184) = *(void *)(v5 + 184);
    *(_OWORD *)(i + 168) = v14;
    *(void *)(v5 + 168) = 0;
    *(void *)(v5 + 176) = 0;
    *(void *)(v5 + 184) = 0;
    long long v15 = *(_OWORD *)(v5 + 192);
    *(void *)(i + 208) = *(void *)(v5 + 208);
    *(_OWORD *)(i + 192) = v15;
    *(void *)(v5 + 192) = 0;
    *(void *)(v5 + 200) = 0;
    *(void *)(v5 + 208) = 0;
    uint64_t v16 = *(void *)(v5 + 232);
    *(_OWORD *)(i + 216) = *(_OWORD *)(v5 + 216);
    *(void *)(i + 232) = v16;
    *(void *)(i + 240) = 0;
    *(void *)(i + 248) = 0;
    *(void *)(i + 256) = 0;
    *(_OWORD *)(i + 240) = *(_OWORD *)(v5 + 240);
    *(void *)(i + 256) = *(void *)(v5 + 256);
    *(void *)(v5 + 240) = 0;
    *(void *)(v5 + 248) = 0;
    *(void *)(v5 + 256) = 0;
    *(void *)(i + 264) = 0;
    *(void *)(i + 272) = 0;
    *(void *)(i + 280) = 0;
    uint64_t v17 = *(void *)(v5 + 272);
    *(void *)(i + 264) = *(void *)(v5 + 264);
    *(void *)(i + 272) = v17;
    *(void *)(i + 280) = *(void *)(v5 + 280);
    *(void *)(v5 + 264) = 0;
    *(void *)(v5 + 272) = 0;
    *(void *)(v5 + 280) = 0;
    *(void *)(i + 288) = 0;
    *(void *)(i + 296) = 0;
    *(void *)(i + 304) = 0;
    *(_OWORD *)(i + 288) = *(_OWORD *)(v5 + 288);
    *(void *)(i + 304) = *(void *)(v5 + 304);
    *(void *)(v5 + 288) = 0;
    *(void *)(v5 + 296) = 0;
    *(void *)(v5 + 304) = 0;
    uint64_t v18 = *(void *)(v5 + 328);
    *(_OWORD *)(i + 312) = *(_OWORD *)(v5 + 312);
    *(void *)(i + 328) = v18;
    *(void *)(i + 336) = 0;
    *(void *)(i + 344) = 0;
    *(void *)(i + 352) = 0;
    *(_OWORD *)(i + 336) = *(_OWORD *)(v5 + 336);
    *(void *)(i + 352) = *(void *)(v5 + 352);
    *(void *)(v5 + 336) = 0;
    *(void *)(v5 + 344) = 0;
    *(void *)(v5 + 352) = 0;
    *(_DWORD *)(i + 360) = *(_DWORD *)(v5 + 360);
    *(void *)(i + 368) = *(void *)(v5 + 368);
    i += 376;
  }
  *(void *)(result + 8) = i;
  if (v4 != a4)
  {
    uint64_t v19 = v4 - 376;
    uint64_t v20 = 8 * ((v4 - a4) >> 3);
    uint64_t v21 = a2 - 376;
    do
    {
      double result = sub_CA9BA0(v19, (uint64_t *)(v21 + v20));
      v19 -= 376;
      v20 -= 376;
    }
    while (v20);
  }
  return result;
}

__n128 sub_DA8ED4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      unint64_t v11 = 0xA3677D46CEFA8D9ELL * (v4 - *a1);
      if (v4 == *a1) {
        unint64_t v11 = 1;
      }
      uint64_t v34 = a1[4];
      if (v11 >= 0xAE4C415C9882BALL) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 376 * v11;
      __p[0] = operator new(376 * v11);
      __p[1] = (char *)__p[0] + 376 * v12;
      *(void **)&long long v33 = __p[1];
      *((void *)&v33 + 1) = (char *)__p[0] + v13;
      sub_DA9228((uint64_t)__p, (uint64_t)v5, 0x51B3BEA3677D46CFLL * (v4 - v5));
      long long v14 = *a1;
      long long v15 = a1[1];
      long long v16 = *(_OWORD *)__p;
      long long v17 = v33;
      __p[0] = *a1;
      __p[1] = v15;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v16;
      *((_OWORD *)a1 + 1) = v17;
      long long v33 = v18;
      uint64_t v19 = v18;
      if ((uint64_t *)v18 != v15)
      {
        do
        {
          *(void *)&long long v33 = v19 - 376;
          sub_402C7C(v19 - 376);
          uint64_t v19 = v33;
        }
        while ((uint64_t *)v33 != v15);
        long long v14 = (uint64_t *)__p[0];
      }
      if (v14) {
        operator delete(v14);
      }
      uint64_t v4 = a1[2];
    }
    else
    {
      uint64_t v6 = 0x51B3BEA3677D46CFLL * (v5 - *a1);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = v7 >> 1;
      uint64_t v9 = -v8;
      if (v5 == v4)
      {
        int v10 = &v5[-47 * v8];
      }
      else
      {
        do
        {
          sub_CA9BA0((uint64_t)&v5[47 * v9], v5);
          v5 += 47;
        }
        while (v5 != v4);
        uint64_t v4 = a1[1];
        int v10 = &v5[47 * v9];
      }
      a1[1] = &v4[47 * v9];
      a1[2] = v10;
      uint64_t v4 = v10;
    }
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  long long v20 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)((char *)v4 + 63) = *(_DWORD *)(a2 + 63);
  *((_OWORD *)v4 + 2) = v21;
  *((_OWORD *)v4 + 3) = v22;
  *((_OWORD *)v4 + 1) = v20;
  v4[10] = 0;
  v4[11] = 0;
  v4[9] = 0;
  *(_OWORD *)(v4 + 9) = *(_OWORD *)(a2 + 72);
  v4[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  int v23 = *(_DWORD *)(a2 + 96);
  *((unsigned char *)v4 + 100) = *(unsigned char *)(a2 + 100);
  *((_DWORD *)v4 + 24) = v23;
  uint64_t v24 = *(void *)(a2 + 104);
  *((_DWORD *)v4 + 28) = *(_DWORD *)(a2 + 112);
  v4[13] = v24;
  long long v25 = *(_OWORD *)(a2 + 120);
  v4[17] = *(void *)(a2 + 136);
  *(_OWORD *)(v4 + 15) = v25;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  long long v26 = *(_OWORD *)(a2 + 144);
  v4[20] = *(void *)(a2 + 160);
  *((_OWORD *)v4 + 9) = v26;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v27 = *(_OWORD *)(a2 + 168);
  v4[23] = *(void *)(a2 + 184);
  *(_OWORD *)(v4 + 21) = v27;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  long long v28 = *(_OWORD *)(a2 + 192);
  v4[26] = *(void *)(a2 + 208);
  *((_OWORD *)v4 + 12) = v28;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v29 = *(void *)(a2 + 232);
  *(_OWORD *)(v4 + 27) = *(_OWORD *)(a2 + 216);
  v4[29] = v29;
  v4[30] = 0;
  v4[31] = 0;
  v4[32] = 0;
  *((_OWORD *)v4 + 15) = *(_OWORD *)(a2 + 240);
  v4[32] = *(void *)(a2 + 256);
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  v4[33] = 0;
  v4[34] = 0;
  v4[35] = 0;
  v4[33] = *(void *)(a2 + 264);
  v4[34] = *(void *)(a2 + 272);
  v4[35] = *(void *)(a2 + 280);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  v4[36] = 0;
  v4[37] = 0;
  v4[38] = 0;
  *((_OWORD *)v4 + 18) = *(_OWORD *)(a2 + 288);
  v4[38] = *(void *)(a2 + 304);
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  uint64_t v30 = *(void *)(a2 + 328);
  *(_OWORD *)(v4 + 39) = *(_OWORD *)(a2 + 312);
  v4[41] = v30;
  v4[42] = 0;
  v4[43] = 0;
  v4[44] = 0;
  __n128 result = *(__n128 *)(a2 + 336);
  *((__n128 *)v4 + 21) = result;
  v4[44] = *(void *)(a2 + 352);
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *((_DWORD *)v4 + 90) = *(_DWORD *)(a2 + 360);
  v4[46] = *(void *)(a2 + 368);
  a1[2] += 47;
  return result;
}

void sub_DA9214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_DA9228(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (a3)
  {
    uint64_t v4 = v3 + 376 * a3;
    do
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_DWORD *)(v3 + 63) = *(_DWORD *)(a2 + 63);
      *(_OWORD *)(v3 + 32) = v6;
      *(_OWORD *)(v3 + 48) = v7;
      *(_OWORD *)(v3 + 16) = v5;
      *(void *)(v3 + 80) = 0;
      *(void *)(v3 + 88) = 0;
      *(void *)(v3 + 72) = 0;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(v3 + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      int v8 = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(v3 + 100) = *(unsigned char *)(a2 + 100);
      *(_DWORD *)(v3 + 96) = v8;
      uint64_t v9 = *(void *)(a2 + 104);
      *(_DWORD *)(v3 + 112) = *(_DWORD *)(a2 + 112);
      *(void *)(v3 + 104) = v9;
      long long v10 = *(_OWORD *)(a2 + 120);
      *(void *)(v3 + 136) = *(void *)(a2 + 136);
      *(_OWORD *)(v3 + 120) = v10;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 120) = 0;
      long long v11 = *(_OWORD *)(a2 + 144);
      *(void *)(v3 + 160) = *(void *)(a2 + 160);
      *(_OWORD *)(v3 + 144) = v11;
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      long long v12 = *(_OWORD *)(a2 + 168);
      *(void *)(v3 + 184) = *(void *)(a2 + 184);
      *(_OWORD *)(v3 + 168) = v12;
      *(void *)(a2 + 168) = 0;
      *(void *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      long long v13 = *(_OWORD *)(a2 + 192);
      *(void *)(v3 + 208) = *(void *)(a2 + 208);
      *(_OWORD *)(v3 + 192) = v13;
      *(void *)(a2 + 192) = 0;
      *(void *)(a2 + 200) = 0;
      *(void *)(a2 + 208) = 0;
      uint64_t v14 = *(void *)(a2 + 232);
      *(_OWORD *)(v3 + 216) = *(_OWORD *)(a2 + 216);
      *(void *)(v3 + 232) = v14;
      *(void *)(v3 + 240) = 0;
      *(void *)(v3 + 248) = 0;
      *(void *)(v3 + 256) = 0;
      *(_OWORD *)(v3 + 240) = *(_OWORD *)(a2 + 240);
      *(void *)(v3 + 256) = *(void *)(a2 + 256);
      *(void *)(a2 + 240) = 0;
      *(void *)(a2 + 248) = 0;
      *(void *)(a2 + 256) = 0;
      *(void *)(v3 + 264) = 0;
      *(void *)(v3 + 272) = 0;
      *(void *)(v3 + 280) = 0;
      uint64_t v15 = *(void *)(a2 + 272);
      *(void *)(v3 + 264) = *(void *)(a2 + 264);
      *(void *)(v3 + 272) = v15;
      *(void *)(v3 + 280) = *(void *)(a2 + 280);
      *(void *)(a2 + 264) = 0;
      *(void *)(a2 + 272) = 0;
      *(void *)(a2 + 280) = 0;
      *(void *)(v3 + 288) = 0;
      *(void *)(v3 + 296) = 0;
      *(void *)(v3 + 304) = 0;
      *(_OWORD *)(v3 + 288) = *(_OWORD *)(a2 + 288);
      *(void *)(v3 + 304) = *(void *)(a2 + 304);
      *(void *)(a2 + 288) = 0;
      *(void *)(a2 + 296) = 0;
      *(void *)(a2 + 304) = 0;
      uint64_t v16 = *(void *)(a2 + 328);
      *(_OWORD *)(v3 + 312) = *(_OWORD *)(a2 + 312);
      *(void *)(v3 + 328) = v16;
      *(void *)(v3 + 336) = 0;
      *(void *)(v3 + 344) = 0;
      *(void *)(v3 + 352) = 0;
      *(_OWORD *)(v3 + 336) = *(_OWORD *)(a2 + 336);
      *(void *)(v3 + 352) = *(void *)(a2 + 352);
      *(void *)(a2 + 336) = 0;
      *(void *)(a2 + 344) = 0;
      *(void *)(a2 + 352) = 0;
      *(_DWORD *)(v3 + 360) = *(_DWORD *)(a2 + 360);
      *(void *)(v3 + 368) = *(void *)(a2 + 368);
      v3 += 376;
      a2 += 376;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_DA93C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 376)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(result + 63) = *(_DWORD *)(a2 + 63);
    *(_OWORD *)(result + 32) = v6;
    *(_OWORD *)(result + 48) = v7;
    *(_OWORD *)(result + 16) = v5;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(result + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    int v8 = *(_DWORD *)(a2 + 96);
    *(unsigned char *)(result + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(result + 96) = v8;
    uint64_t v9 = *(void *)(a2 + 104);
    *(_DWORD *)(result + 112) = *(_DWORD *)(a2 + 112);
    *(void *)(result + 104) = v9;
    long long v10 = *(_OWORD *)(a2 + 120);
    *(void *)(result + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(result + 120) = v10;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    long long v11 = *(_OWORD *)(a2 + 144);
    *(void *)(result + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(result + 144) = v11;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    long long v12 = *(_OWORD *)(a2 + 168);
    *(void *)(result + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(result + 168) = v12;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    long long v13 = *(_OWORD *)(a2 + 192);
    *(void *)(result + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(result + 192) = v13;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    uint64_t v14 = *(void *)(a2 + 232);
    *(_OWORD *)(result + 216) = *(_OWORD *)(a2 + 216);
    *(void *)(result + 232) = v14;
    *(void *)(result + 240) = 0;
    *(void *)(result + 248) = 0;
    *(void *)(result + 256) = 0;
    *(_OWORD *)(result + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(result + 256) = *(void *)(a2 + 256);
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(result + 264) = 0;
    *(void *)(result + 272) = 0;
    *(void *)(result + 280) = 0;
    uint64_t v15 = *(void *)(a2 + 272);
    *(void *)(result + 264) = *(void *)(a2 + 264);
    *(void *)(result + 272) = v15;
    *(void *)(result + 280) = *(void *)(a2 + 280);
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(result + 288) = 0;
    *(void *)(result + 296) = 0;
    *(void *)(result + 304) = 0;
    *(_OWORD *)(result + 288) = *(_OWORD *)(a2 + 288);
    *(void *)(result + 304) = *(void *)(a2 + 304);
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    uint64_t v16 = *(void *)(a2 + 328);
    *(_OWORD *)(result + 312) = *(_OWORD *)(a2 + 312);
    *(void *)(result + 328) = v16;
    *(void *)(result + 336) = 0;
    *(void *)(result + 344) = 0;
    *(void *)(result + 352) = 0;
    *(_OWORD *)(result + 336) = *(_OWORD *)(a2 + 336);
    *(void *)(result + 352) = *(void *)(a2 + 352);
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(_DWORD *)(result + 360) = *(_DWORD *)(a2 + 360);
    *(void *)(result + 368) = *(void *)(a2 + 368);
    result += 376;
  }
  return result;
}

char *sub_DA9554(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    long long v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          long long v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(4 * v29);
    char v31 = &v30[4 * v8];
    uint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    char v31 = (char *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    uint64_t v53 = (char *)operator new(4 * v52);
    char v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = &v53[4 * v52];
    if (v30)
    {
      uint64_t v54 = &v53[4 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(_DWORD *)char v31 = *a3;
      uint64_t v35 = v31 + 4;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(_DWORD *)char v31 = *a3;
  uint64_t v35 = v31 + 4;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    unint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    unsigned int v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_DA98AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_DA98C4(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  int v2 = (char *)a1[1];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v7 = 0x276276276276276;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x276276276276276) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(104 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[104 * v4];
  unint64_t v29 = &v8[104 * v7];
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *(_DWORD *)(v9 + 63) = *(_DWORD *)(a2 + 63);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = 0;
  uint64_t v12 = (char **)(v9 + 80);
  *((void *)v9 + 11) = 0;
  unint64_t v14 = *(unsigned char **)(a2 + 72);
  long long v13 = *(unsigned char **)(a2 + 80);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v13 - v14);
    *((void *)v9 + 9) = v16;
    *uint64_t v12 = v16;
    unint64_t v17 = &v16[4 * (v15 >> 2)];
    *((void *)v9 + 11) = v17;
    memcpy(v16, v14, v15);
    *uint64_t v12 = v17;
  }
  unint64_t v18 = &v8[104 * v4];
  *((_DWORD *)v18 + 24) = *(_DWORD *)(a2 + 96);
  v18[100] = *(unsigned char *)(a2 + 100);
  uint64_t v19 = v9 + 104;
  uint64_t v28 = v9 + 104;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v19;
    a1[2] = v29;
  }
  else
  {
    do
    {
      *(_OWORD *)(v9 - 104) = *(_OWORD *)(v2 - 104);
      long long v20 = *(_OWORD *)(v2 - 88);
      long long v21 = *(_OWORD *)(v2 - 72);
      long long v22 = *(_OWORD *)(v2 - 56);
      *(_DWORD *)(v9 - 41) = *(_DWORD *)(v2 - 41);
      *(_OWORD *)(v9 - 56) = v22;
      *(_OWORD *)(v9 - 72) = v21;
      *(_OWORD *)(v9 - 88) = v20;
      *((void *)v9 - 3) = 0;
      *((void *)v9 - 2) = 0;
      *((_OWORD *)v9 - 2) = *((_OWORD *)v2 - 2);
      *((void *)v9 - 2) = *((void *)v2 - 2);
      *((void *)v2 - 4) = 0;
      *((void *)v2 - 3) = 0;
      *((void *)v2 - 2) = 0;
      int v23 = *((_DWORD *)v2 - 2);
      *(v9 - 4) = *(v2 - 4);
      *((_DWORD *)v9 - 2) = v23;
      v9 -= 104;
      v2 -= 104;
    }
    while (v2 != v3);
    uint64_t v24 = (char *)*a1;
    int v2 = (char *)a1[1];
    uint64_t v19 = v28;
    *a1 = v9;
    a1[1] = v28;
    a1[2] = v29;
    if (v2 != v24)
    {
      do
      {
        long long v25 = (void *)*((void *)v2 - 4);
        if (v25)
        {
          *((void *)v2 - 3) = v25;
          operator delete(v25);
        }
        v2 -= 104;
      }
      while (v2 != v24);
      int v2 = v24;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v19;
}

void sub_DA9B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v7 = *v4;
  if (*v4)
  {
    *unint64_t v5 = v7;
    operator delete(v7);
  }
  sub_737F30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DA9B68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(104 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[104 * v3];
  long long v20 = &v7[104 * v6];
  sub_DAA084(v19, a2);
  uint64_t v8 = v19;
  uint64_t v9 = v19 + 104;
  long long v10 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 104) = *(_OWORD *)(v11 - 104);
      long long v12 = *(_OWORD *)(v11 - 88);
      long long v13 = *(_OWORD *)(v11 - 72);
      long long v14 = *(_OWORD *)(v11 - 56);
      *(_DWORD *)(v8 - 41) = *(_DWORD *)(v11 - 41);
      *(_OWORD *)(v8 - 56) = v14;
      *(_OWORD *)(v8 - 72) = v13;
      *(_OWORD *)(v8 - 88) = v12;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 32) = 0;
      *(_OWORD *)(v8 - 32) = *((_OWORD *)v11 - 2);
      *(void *)(v8 - 16) = *((void *)v11 - 2);
      *((void *)v11 - 4) = 0;
      *((void *)v11 - 3) = 0;
      *((void *)v11 - 2) = 0;
      int v15 = *((_DWORD *)v11 - 2);
      *(unsigned char *)(v8 - 4) = *(v11 - 4);
      *(_DWORD *)(v8 - 8) = v15;
      v8 -= 104;
      v11 -= 104;
    }
    while (v11 != v10);
    unint64_t v16 = (char *)*a1;
    long long v11 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
    if (v11 != v16)
    {
      do
      {
        unint64_t v17 = (void *)*((void *)v11 - 4);
        if (v17)
        {
          *((void *)v11 - 3) = v17;
          operator delete(v17);
        }
        v11 -= 104;
      }
      while (v11 != v16);
      long long v11 = v16;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v19 + 104;
}

void sub_DA9D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_737F30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DA9D60(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      long long v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          long long v13 = *(void **)(v11 - 32);
          if (v13)
          {
            *(void *)(v11 - 24) = v13;
            operator delete(v13);
          }
          v11 -= 104;
        }
        while (v11 != v10);
        long long v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_38;
    }
    unint64_t v30 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v31 = 2 * v30;
    if (2 * v30 <= a4) {
      uint64_t v31 = a4;
    }
    unint64_t v32 = v30 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v31;
    if (v32 > 0x276276276276276) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v33 = 104 * v32;
    uint64_t v34 = operator new(104 * v32);
    *a1 = (uint64_t)v34;
    a1[1] = (uint64_t)v34;
    a1[2] = (uint64_t)v34 + v33;
    uint64_t v35 = sub_446668(v9, a2, a3, (uint64_t)v34);
LABEL_31:
    a1[1] = v35;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v14 - v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      uint64_t v16 = v10 + 72;
      uint64_t v17 = a2 + 80;
      do
      {
        uint64_t v19 = v17 - 80;
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v17 - 80);
        long long v20 = *(_OWORD *)(v17 - 64);
        long long v21 = *(_OWORD *)(v17 - 48);
        long long v22 = *(_OWORD *)(v17 - 32);
        *(_DWORD *)(v16 - 9) = *(_DWORD *)(v17 - 17);
        *(_OWORD *)(v16 - 24) = v22;
        *(_OWORD *)(v16 - 40) = v21;
        *(_OWORD *)(v16 - 56) = v20;
        if (v16 - 72 != v17 - 80) {
          sub_147D0((void *)v16, *(char **)(v17 - 8), *(char **)v17, (uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 2);
        }
        int v18 = *(_DWORD *)(v17 + 16);
        *(unsigned char *)(v16 + 28) = *(unsigned char *)(v17 + 20);
        *(_DWORD *)(v16 + 24) = v18;
        v16 += 104;
        v17 += 104;
      }
      while (v19 + 104 != v15);
      uint64_t v10 = a1[1];
    }
    uint64_t v35 = sub_446668(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    uint64_t v23 = v10 + 72;
    uint64_t v24 = a2 + 80;
    do
    {
      uint64_t v26 = v24 - 80;
      *(_OWORD *)(v23 - 72) = *(_OWORD *)(v24 - 80);
      long long v27 = *(_OWORD *)(v24 - 64);
      long long v28 = *(_OWORD *)(v24 - 48);
      long long v29 = *(_OWORD *)(v24 - 32);
      *(_DWORD *)(v23 - 9) = *(_DWORD *)(v24 - 17);
      *(_OWORD *)(v23 - 24) = v29;
      *(_OWORD *)(v23 - 40) = v28;
      *(_OWORD *)(v23 - 56) = v27;
      if (v23 - 72 != v24 - 80) {
        sub_147D0((void *)v23, *(char **)(v24 - 8), *(char **)v24, (uint64_t)(*(void *)v24 - *(void *)(v24 - 8)) >> 2);
      }
      int v25 = *(_DWORD *)(v24 + 16);
      *(unsigned char *)(v23 + 28) = *(unsigned char *)(v24 + 20);
      *(_DWORD *)(v23 + 24) = v25;
      v10 += 104;
      v23 += 104;
      v24 += 104;
    }
    while (v26 + 104 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v10)
  {
    uint64_t v36 = *(void **)(v14 - 32);
    if (v36)
    {
      *(void *)(v14 - 24) = v36;
      operator delete(v36);
    }
    v14 -= 104;
  }
  a1[1] = v10;
}

void sub_DAA04C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_DAA054(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_DAA05C()
{
  unk_25E75D7 = 16641;
  word_25E75C0 = 65;
  byte_25E75EF = 1;
  byte_25E75D9 = 0;
}

uint64_t sub_DAA084(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  *(void *)(result + 16) = -1;
  *(void *)(result + 24) = -1;
  *(void *)(result + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1935635296;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 63) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(unsigned char *)(result + 100) = 100;
  return result;
}

uint64_t sub_DAA0D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1935635296;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = a1 + 72;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 100;
  unint64_t v6 = *(unsigned char **)a3;
  unint64_t v7 = *(unsigned char **)(a3 + 8);
  uint64_t v15 = 0;
  long long v14 = 0uLL;
  unint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 >> 62) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(4 * v8);
    *(void *)&long long v14 = v9;
    *((void *)&v14 + 1) = v9;
    uint64_t v15 = &v9[4 * v8];
    do
    {
      if (*v6) {
        int v10 = 3;
      }
      else {
        int v10 = 4;
      }
      if (*v6 == 1) {
        int v11 = 5;
      }
      else {
        int v11 = v10;
      }
      int v16 = v11;
      uint64_t v9 = sub_DA9554((void **)&v14, v9, &v16) + 4;
      ++v6;
    }
    while (v6 != v7);
    long long v12 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(a1 + 80) = v12;
      operator delete(v12);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
  }
  *(_OWORD *)(a1 + 72) = v14;
  *(void *)(a1 + 88) = v15;
  return a1;
}

void sub_DAA1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    operator delete(__p);
    long long v13 = *v11;
    if (!*v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v13 = *v11;
    if (!*v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 80) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

double sub_DAA240(uint64_t a1, uint64_t a2)
{
  double result = NAN;
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1935635296;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 100;
  return result;
}

BOOL sub_DAA288(uint64_t a1)
{
  if (*(_DWORD *)a1 != -1) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 4) != -1) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  return v2 != 0x7FFFFFFFFFFFFFFFLL && v2 != 0;
}

uint64_t sub_DAA2C8(uint64_t result)
{
  *(void *)double result = -1;
  *(_DWORD *)(result + 8) = 0x7FFFFFFF;
  *(void *)(result + 32) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_DAA2E4(uint64_t a1)
{
  uint64_t v1 = 24;
  if (*(void *)(a1 + 24) == -1) {
    uint64_t v1 = 16;
  }
  return *(void *)(a1 + v1);
}

BOOL sub_DAA300(uint64_t *a1, uint64_t *a2)
{
  uint64_t v33 = *a1;
  int v34 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[3];
  double v5 = *((double *)a1 + 5);
  int v6 = *((unsigned __int16 *)a1 + 25);
  double v7 = *((double *)a1 + 7);
  uint64_t v9 = (unsigned char *)a1[9];
  unint64_t v8 = (unsigned char *)a1[10];
  int64_t v10 = v8 - v9;
  uint64_t v30 = a1[2];
  if (v8 == v9)
  {
    long long v29 = 0;
    int v11 = 0;
  }
  else
  {
    if (v10 < 0) {
      sub_2E00();
    }
    int v11 = (char *)operator new(v8 - v9);
    long long v29 = &v11[4 * (v10 >> 2)];
    memcpy(v11, v9, v10);
  }
  int v26 = *((unsigned __int8 *)a1 + 64);
  int v27 = *((unsigned __int8 *)a1 + 100);
  uint64_t v31 = *a2;
  int v32 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  uint64_t v12 = a2[3];
  double v14 = *((double *)a2 + 5);
  int v15 = *((unsigned __int16 *)a2 + 25);
  double v16 = *((double *)a2 + 7);
  int v18 = (unsigned char *)a2[9];
  uint64_t v17 = (unsigned char *)a2[10];
  int64_t v19 = v17 - v18;
  if (v17 == v18)
  {
    long long v20 = 0;
    long long v28 = 0;
    if (v33 != v31) {
      goto LABEL_28;
    }
  }
  else
  {
    if (v19 < 0) {
      sub_2E00();
    }
    long long v20 = (char *)operator new(v17 - v18);
    long long v28 = &v20[4 * (v19 >> 2)];
    memcpy(v20, v18, v19);
    if (v33 != v31) {
      goto LABEL_28;
    }
  }
  if (HIDWORD(v33) != HIDWORD(v31)) {
    goto LABEL_28;
  }
  BOOL v21 = 0;
  if (v34 != v32 || v30 != v13 || v4 != v12 || v5 != v14 || v6 != v15 || v7 != v16) {
    goto LABEL_29;
  }
  if (v29 - v11 != v28 - v20)
  {
LABEL_28:
    BOOL v21 = 0;
    goto LABEL_29;
  }
  if (v11 != v29)
  {
    long long v22 = v20;
    uint64_t v23 = v11;
    while (*(_DWORD *)v23 == *v22)
    {
      v23 += 4;
      ++v22;
      if (v23 == v29) {
        goto LABEL_22;
      }
    }
    goto LABEL_28;
  }
LABEL_22:
  BOOL v21 = v27 == *((unsigned __int8 *)a2 + 100) && v26 == *((unsigned __int8 *)a2 + 64);
LABEL_29:
  if (v20) {
    operator delete(v20);
  }
  if (v11) {
    operator delete(v11);
  }
  return v21;
}

void sub_DAA570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (v33) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void *sub_DAA5AC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_188FC78(a1, (uint64_t)"(coordinate: ", 13);
  sub_36644(v4, a2, v5);
  sub_188FC78(a1, (uint64_t)", place_muid: ", 14);
  if (*(void *)(a2 + 16) == -1) {
    sub_188FC78(a1, (uint64_t)"n/a", 3);
  }
  else {
    std::ostream::operator<<();
  }
  sub_188FC78(a1, (uint64_t)", alewife_muid: ", 16);
  if (*(void *)(a2 + 24) == -1)
  {
    sub_188FC78(a1, (uint64_t)"n/a", 3);
    if (*(void *)(a2 + 72) == *(void *)(a2 + 80)) {
      goto LABEL_16;
    }
  }
  else
  {
    std::ostream::operator<<();
    if (*(void *)(a2 + 72) == *(void *)(a2 + 80)) {
      goto LABEL_16;
    }
  }
  int v6 = sub_188FC78(a1, (uint64_t)", access_types_and_directions: [", 32);
  sub_DAA840(*(int **)(a2 + 72), *(int **)(a2 + 80), ",");
  if ((v12 & 0x80u) == 0) {
    double v7 = __p;
  }
  else {
    double v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = v12;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  uint64_t v9 = sub_188FC78(v6, (uint64_t)v7, v8);
  sub_188FC78(v9, (uint64_t)"]", 1);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
  sub_188FC78(a1, (uint64_t)")", 1);
  return a1;
}

void sub_DAA718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_DAA734(void *result, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = "WALKING_DESTINATION";
      uint64_t v3 = 19;
      goto LABEL_3;
    case 1:
      uint64_t v2 = "WALKING_ENTRY";
      uint64_t v3 = 13;
      goto LABEL_3;
    case 2:
      uint64_t v2 = "WALKING_EXIT";
      uint64_t v3 = 12;
      goto LABEL_3;
    case 3:
      uint64_t v2 = "DRIVING_DESTINATION";
      uint64_t v3 = 19;
      goto LABEL_3;
    case 4:
      uint64_t v2 = "DRIVING_ENTRY";
      uint64_t v3 = 13;
      goto LABEL_3;
    case 5:
      uint64_t v2 = "DRIVING_EXIT";
      uint64_t v3 = 12;
      goto LABEL_3;
    case 6:
      uint64_t v2 = "CYCLING_DESTINATION";
      uint64_t v3 = 19;
      goto LABEL_3;
    case 7:
      uint64_t v2 = "CYCLING_ENTRY";
      uint64_t v3 = 13;
      goto LABEL_3;
    case 8:
      uint64_t v2 = "CYCLING_EXIT";
      uint64_t v3 = 12;
      goto LABEL_3;
    case 9:
      uint64_t v2 = "PARKING_ENTRY";
      uint64_t v3 = 13;
      goto LABEL_3;
    case 10:
      uint64_t v2 = "PARKING_EXIT";
      uint64_t v3 = 12;
LABEL_3:
      double result = sub_188FC78(result, (uint64_t)v2, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_DAA840(int *a1, int *a2, const char *a3)
{
  sub_6BAC((uint64_t)v9);
  if (a1 != a2)
  {
    sub_DAA734(v9, *a1);
    if (a1 + 1 != a2)
    {
      uint64_t v6 = 1;
      do
      {
        if (v6 * 4)
        {
          size_t v7 = strlen(a3);
          sub_188FC78(v9, (uint64_t)a3, v7);
        }
        sub_DAA734(v9, a1[v6++]);
      }
      while (&a1[v6] != a2);
    }
  }
  std::stringbuf::str();
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_DAA9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DAA9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DAAA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_DAAA18(unsigned char *a1, void *a2)
{
  char v10 = 11;
  strcpy((char *)__p, "consistency");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_DDCC58(v4);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  char v10 = 6;
  strcpy((char *)__p, "limits");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_DDCC58(v6);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v7;
  return a1;
}

void sub_DAAAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAAB0C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  long long v28 = 0;
  __p[0] = &off_2439090;
  sub_3E7814(a4, (__n128 *)&v28);
  sub_DDDA70((uint64_t)v34, a1, *a3, (uint64_t)a4);
  sub_DDDA70((uint64_t)v31, a1, a3[1], (uint64_t)a4);
  int v8 = sub_DB7034(a1);
  int v9 = *(_DWORD *)(a1 + 40);
  int v10 = sub_51D60(v34);
  if ((v9 & 0x10000) != 0 && ((v10 ^ 1) & 1) == 0 && v8 != 11 && *(_DWORD *)(a1 + 104))
  {
    int v11 = *(uint64_t (****)())(a1 + 392);
    if (!v11) {
      int v11 = &off_25351C0;
    }
    sub_DAAF60((__n128 *)&v28, *((_DWORD *)v11 + 8), (uint64_t)v11[5]);
    sub_DDE010((uint64_t)v34, (uint64_t)&v28);
    unsigned __int8 v12 = (void **)__p[1];
    if (__p[1])
    {
      uint64_t v13 = v30;
      double v14 = __p[1];
      if (v30 != __p[1])
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 4;
        }
        while (v13 != v12);
        double v14 = __p[1];
      }
      uint64_t v30 = v12;
      operator delete(v14);
    }
    int v15 = *(uint64_t (****)())(a1 + 392);
    if (!v15) {
      int v15 = &off_25351C0;
    }
    sub_DAB204((__n128 *)&v28, *(_DWORD *)(a1 + 104), *((_DWORD *)v15 + 8), (uint64_t)v15[5], 1, v8);
    sub_DDE010((uint64_t)v34, (uint64_t)&v28);
    double v16 = (void **)__p[1];
    if (__p[1])
    {
      uint64_t v17 = v30;
      int v18 = __p[1];
      if (v30 != __p[1])
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 4;
        }
        while (v17 != v16);
        int v18 = __p[1];
      }
      uint64_t v30 = v16;
      operator delete(v18);
    }
  }
  if (sub_DB6EEC(a1))
  {
    if (sub_51D60(v31))
    {
      sub_DAB408((__n128 *)&v28, 0, a1 + 96, 0, a2);
      sub_DDE010((uint64_t)v31, (uint64_t)&v28);
      int64_t v19 = (void **)__p[1];
      if (__p[1])
      {
        long long v20 = v30;
        BOOL v21 = __p[1];
        if (v30 != __p[1])
        {
          do
          {
            if (*((char *)v20 - 1) < 0) {
              operator delete(*(v20 - 3));
            }
            v20 -= 4;
          }
          while (v20 != v19);
          BOOL v21 = __p[1];
        }
        uint64_t v30 = v19;
        operator delete(v21);
      }
    }
    if (sub_51D60(v34))
    {
      int v25 = *(uint64_t (****)())(a1 + 392);
      if (!v25) {
        int v25 = &off_25351C0;
      }
      sub_DAB64C((__n128 *)&v28, *((_DWORD *)v25 + 8), (uint64_t)v25[5]);
      sub_DDE010((uint64_t)v34, (uint64_t)&v28);
      int v26 = (void **)__p[1];
      if (__p[1])
      {
        int v27 = v30;
        uint64_t v24 = (char *)__p[1];
        if (v30 != __p[1])
        {
          do
          {
            if (*((char *)v27 - 1) < 0) {
              operator delete(*(v27 - 3));
            }
            v27 -= 4;
          }
          while (v27 != v26);
          uint64_t v24 = (char *)__p[1];
        }
        uint64_t v30 = v26;
        goto LABEL_53;
      }
    }
  }
  else
  {
    int v22 = sub_51D60(v34);
    if (v8 == 7) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    if (v23 == 1 && *(int *)(a1 + 104) <= 1)
    {
      long long v28 = (char *)operator new(0xA0uLL);
      *(_OWORD *)std::string __p = xmmword_20F05A0;
      strcpy(v28, "Got an MSR request for changing waypoints during a nav session that has less than two remaining waypoints or does not specify the required client capabilities.");
      sub_DDE278((uint64_t)v34, 9, (long long *)&v28);
      if (SHIBYTE(__p[1]) < 0)
      {
        uint64_t v24 = v28;
LABEL_53:
        operator delete(v24);
      }
    }
  }
  if ((v33 & 0x80000000) == 0)
  {
    if ((v36 & 0x80000000) == 0) {
      return;
    }
LABEL_58:
    operator delete(v35);
    return;
  }
  operator delete(v32);
  if (v36 < 0) {
    goto LABEL_58;
  }
}

void sub_DAAE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_C7E3C8((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_6:
      operator delete(a27);
      sub_C7E3C8(v32);
      _Unwind_Resume(a1);
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_6;
  }
  sub_C7E3C8(v32);
  _Unwind_Resume(a1);
}

void sub_DAAF60(__n128 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a3 + 8;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (a2 < 2) {
    goto LABEL_4;
  }
  char v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = 8 * (int)a2 - 8;
  char v7 = 1;
  char v8 = 1;
  char v9 = 1;
  do
  {
    uint64_t v10 = *v5;
    if (*(void *)(*(v5 - 1) + 80)) {
      int v11 = *(uint64_t (****)())(*(v5 - 1) + 80);
    }
    else {
      int v11 = &off_25352D0;
    }
    unsigned __int8 v12 = *(uint64_t (****)())(v10 + 72);
    if (!v12) {
      unsigned __int8 v12 = &off_25352D0;
    }
    if (*((_DWORD *)v11 + 26) != *((_DWORD *)v12 + 26)) {
      char v7 = 0;
    }
    if (v11[12] != v12[12]) {
      char v8 = 0;
    }
    sub_DC5BD0((uint64_t)v11, &__p);
    if (*(void *)(v10 + 72)) {
      uint64_t v13 = *(uint64_t (****)())(v10 + 72);
    }
    else {
      uint64_t v13 = &off_25352D0;
    }
    sub_DC5BD0((uint64_t)v13, v14);
    if (sub_52098((unsigned __int8 *)&__p, (unsigned __int8 *)v14)) {
      char v9 = 0;
    }
    ++v5;
    v6 -= 8;
  }
  while (v6);
  if (v7)
  {
    if (v8)
    {
      if (v9)
      {
LABEL_4:
        std::string __p = 0;
        *(void *)&long long v16 = &off_2439090;
        sub_3E7814(a1, (__n128 *)&__p);
        return;
      }
      std::string __p = operator new(0xB8uLL);
      long long v16 = xmmword_20F05B0;
      strcpy((char *)__p, "User waypoint route has inconsistent waypoint unique ids (UUID of the destination waypoint info of a leg does not match the UUID of the origin waypoint info in the subsequent leg).");
      sub_3E7914(9, (long long *)&__p, (uint64_t)a1);
    }
    else
    {
      std::string __p = operator new(0xA8uLL);
      long long v16 = xmmword_20F05C0;
      strcpy((char *)__p, "User waypoint route has inconsistent MUIDs (MUID of the destination waypoint info of a leg does not match the MUID of the origin waypoint info in the subsequent leg).");
      sub_3E7914(9, (long long *)&__p, (uint64_t)a1);
    }
  }
  else
  {
    std::string __p = operator new(0xB8uLL);
    long long v16 = xmmword_20F05B0;
    strcpy((char *)__p, "User waypoint route has inconsistent waypoint source (source of the destination waypoint info of a leg does not match the source of the origin waypoint info in the subsequent leg).");
    sub_3E7914(9, (long long *)&__p, (uint64_t)a1);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
}

void sub_DAB1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAB204(__n128 *a1, int a2, int a3, uint64_t a4, int a5, int a6)
{
  if (a5 == 3 && !a2)
  {
LABEL_37:
    std::string __p = 0;
    *(void *)&long long v25 = &off_2439090;
    sub_3E7814(a1, (__n128 *)&__p);
    return;
  }
  if (a4) {
    char v7 = (uint64_t *)(a4 + 8);
  }
  else {
    char v7 = 0;
  }
  if (!a3)
  {
    uint64_t v19 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = 0;
  uint64_t v9 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v9 + 1;
    uint64_t v12 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v13 = &v7[v12];
    double v14 = v7 + 1;
    uint64_t v15 = v12;
    do
    {
      long long v16 = *(uint64_t (****)())(*(v14 - 1) + 80);
      uint64_t v17 = *(uint64_t (****)())(*v14 + 80);
      if (!v16) {
        long long v16 = &off_25352D0;
      }
      if (!v17) {
        uint64_t v17 = &off_25352D0;
      }
      int v18 = *((_DWORD *)v17 + 26);
      if (*((_DWORD *)v16 + 26) != 2) {
        ++v8;
      }
      if (v18 != 2) {
        ++v10;
      }
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    v8 += v10;
    if (v11 == v12) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = v7;
  }
  long long v20 = &v7[a3];
  do
  {
    uint64_t v21 = *v13++;
    int v22 = *(uint64_t (****)())(v21 + 80);
    if (!v22) {
      int v22 = &off_25352D0;
    }
    if (*((_DWORD *)v22 + 26) != 2) {
      ++v8;
    }
  }
  while (v13 != v20);
LABEL_28:
  uint64_t v19 = v8 + 1;
LABEL_29:
  int v23 = a2 + 2;
  if (a5 == 2) {
    int v23 = a2 + 1;
  }
  if (a5 == 1) {
    int v23 = a2;
  }
  if ((a6 - 7) < 2 || v19 == v23) {
    goto LABEL_37;
  }
  std::string __p = operator new(0xD8uLL);
  long long v25 = xmmword_20F05D0;
  strcpy((char *)__p, "Number of waypoints in the request does not match the number of waypoints with source USER in the original user route, which is only allowed for directions requests with purpose CHANGE_WAYPOINTS or CHANGE_ANCHORS.");
  sub_3E7914(9, (long long *)&__p, (uint64_t)a1);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
}

void sub_DAB3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAB408(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = 0;
  *(void *)&v22[0] = operator new(0x20uLL);
  *(long long *)((char *)v22 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v22[0], "MultiPointRequestValidation");
  std::string __p = 0;
  long long v20 = 0;
  uint64_t v10 = sub_374CDC(a5, (uint64_t)v22, (uint64_t *)&__p);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v20;
    uint64_t v13 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    long long v20 = v11;
    operator delete(v13);
  }
  if (SBYTE7(v22[1]) < 0) {
    operator delete(*(void **)&v22[0]);
  }
  strcpy((char *)v22, "max_num_user_waypoints");
  BYTE7(v22[1]) = 22;
  int v14 = sub_319F48(v10, (uint64_t)v22);
  if (SBYTE7(v22[1]) < 0) {
    operator delete(*(void **)&v22[0]);
  }
  int v15 = *(_DWORD *)(a3 + 8);
  int v16 = a2 != 0;
  if (a4) {
    ++v16;
  }
  int v18 = v16 + v15;
  LODWORD(__p) = v14;
  if (v16 + v15 <= v14)
  {
    *(void *)&v22[0] = operator new(0x20uLL);
    *(long long *)((char *)v22 + 8) = xmmword_20B9800;
    strcpy(*(char **)&v22[0], "max_total_waypoint_distance_km");
    uint64_t v17 = sub_5CDE0(v10, v22);
    if (SBYTE7(v22[1]) < 0) {
      operator delete(*(void **)&v22[0]);
    }
    sub_DD9F78(a2, a3, a4, v17, a1);
  }
  else
  {
    sub_DAC4D0("Total number of user-selected waypoints in the request (", (uint64_t)&v18, ") exceeds the maximum that is allowed (", (uint64_t)&__p, ").");
    sub_3E7914(13, v22, (uint64_t)a1);
    if (SBYTE7(v22[1]) < 0) {
      operator delete(*(void **)&v22[0]);
    }
  }
}

void sub_DAB618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAB64C(__n128 *a1, int a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = a3 + 8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a2)
  {
    uint64_t v5 = 8 * a2;
    do
    {
      uint64_t v6 = *(uint64_t (****)())(*(void *)v4 + 80);
      if (!v6) {
        uint64_t v6 = &off_25352D0;
      }
      if (!*((_DWORD *)v6 + 26))
      {
        std::string __p = operator new(0x60uLL);
        long long v11 = xmmword_20B9290;
        strcpy((char *)__p, "Got an MSR request with a destination waypoint info with no specified (or UNKNOWN) source.");
        sub_3E7914(9, (long long *)&__p, (uint64_t)a1);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p);
        }
        return;
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
    if (a2 < 1) {
      goto LABEL_16;
    }
    if (*(void *)(*(void *)(a3 + 8 * (a2 - 1) + 8) + 80)) {
      char v7 = *(uint64_t (****)())(*(void *)(a3 + 8 * (a2 - 1) + 8) + 80);
    }
    else {
      char v7 = &off_25352D0;
    }
    sub_1391968(&__p, v7);
    if (v12 == 1)
    {
      sub_139667C(&__p);
      goto LABEL_16;
    }
    uint64_t v8 = operator new(0x70uLL);
    long long v9 = xmmword_20F05E0;
    strcpy((char *)v8, "Got an MSR request in which the destination waypoint info at the final destination does not have source USER.");
    sub_3E7914(9, (long long *)&v8, (uint64_t)a1);
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    sub_139667C(&__p);
  }
  else
  {
LABEL_16:
    std::string __p = 0;
    *(void *)&long long v11 = &off_2439090;
    sub_3E7814(a1, (__n128 *)&__p);
  }
}

void sub_DAB820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_139667C(&a16);
  _Unwind_Resume(a1);
}

void sub_DAB84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAB868(uint64_t a1@<X0>, unsigned __int8 *a2@<X2>, __n128 *a3@<X8>)
{
  unsigned int v67 = 0;
  v68[0] = &off_2439090;
  sub_3E7814(a3, (__n128 *)&v67);
  sub_DDE000((uint64_t)v62, a1, *a2, (uint64_t)a3);
  if ((sub_51D60(v62) & 1) == 0) {
    goto LABEL_127;
  }
  char v6 = sub_35E640();
  if (*(void *)(a1 + 336)) {
    char v7 = *(uint64_t (****)())(a1 + 336);
  }
  else {
    char v7 = &off_2536C78;
  }
  uint64_t v8 = *((int *)v7 + 8);
  long long v9 = v7[5];
  if (v9) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 < 2) {
    goto LABEL_9;
  }
  long long v11 = (uint64_t *)(v10 + 1);
  uint64_t v12 = 8 * v8 - 8;
  char v13 = 1;
  char v14 = 1;
  char v15 = 1;
  do
  {
    uint64_t v16 = *v11;
    if (*(void *)(*(v11 - 1) + 488)) {
      uint64_t v17 = *(uint64_t (****)())(*(v11 - 1) + 488);
    }
    else {
      uint64_t v17 = &off_25352D0;
    }
    int v18 = *(uint64_t (****)())(v16 + 480);
    if (!v18) {
      int v18 = &off_25352D0;
    }
    if (*((_DWORD *)v17 + 26) != *((_DWORD *)v18 + 26)) {
      char v13 = 0;
    }
    if (v17[12] != v18[12]) {
      char v14 = 0;
    }
    sub_DC5BD0((uint64_t)v17, &__p);
    if (*(void *)(v16 + 480)) {
      uint64_t v19 = *(uint64_t (****)())(v16 + 480);
    }
    else {
      uint64_t v19 = &off_25352D0;
    }
    sub_DC5BD0((uint64_t)v19, &v65);
    if (sub_52098((unsigned __int8 *)&__p, (unsigned __int8 *)&v65)) {
      char v15 = 0;
    }
    ++v11;
    v12 -= 8;
  }
  while (v12);
  if (v13)
  {
    if (v14)
    {
      if (v15)
      {
LABEL_9:
        std::string __p = 0;
        v60[0] = &off_2439090;
        sub_3E7814((__n128 *)&v67, (__n128 *)&__p);
        goto LABEL_34;
      }
      std::string __p = operator new(0xB8uLL);
      *(_OWORD *)int v60 = xmmword_20F05B0;
      strcpy((char *)__p, "User waypoint route has inconsistent waypoint unique ids (UUID of the destination waypoint info of a leg does not match the UUID of the origin waypoint info in the subsequent leg).");
      sub_3E7914(9, (long long *)&__p, (uint64_t)&v67);
    }
    else
    {
      std::string __p = operator new(0xA8uLL);
      *(_OWORD *)int v60 = xmmword_20F05C0;
      strcpy((char *)__p, "User waypoint route has inconsistent MUIDs (MUID of the destination waypoint info of a leg does not match the MUID of the origin waypoint info in the subsequent leg).");
      sub_3E7914(9, (long long *)&__p, (uint64_t)&v67);
    }
  }
  else
  {
    std::string __p = operator new(0xB8uLL);
    *(_OWORD *)int v60 = xmmword_20F05B0;
    strcpy((char *)__p, "User waypoint route has inconsistent waypoint source (source of the destination waypoint info of a leg does not match the source of the origin waypoint info in the subsequent leg).");
    sub_3E7914(9, (long long *)&__p, (uint64_t)&v67);
  }
  if (SHIBYTE(v60[1]) < 0) {
    operator delete(__p);
  }
LABEL_34:
  sub_DDE010((uint64_t)v62, (uint64_t)&v67);
  long long v20 = (void **)v68[1];
  if (v68[1])
  {
    uint64_t v21 = v69;
    int v22 = v68[1];
    if (v69 != v68[1])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      int v22 = v68[1];
    }
    int v69 = v20;
    operator delete(v22);
  }
  int v23 = *(uint64_t (****)())(a1 + 336);
  if (!v23) {
    int v23 = &off_2536C78;
  }
  uint64_t v24 = *((int *)v23 + 8);
  long long v25 = v23[5];
  int v26 = (uint64_t *)(v25 + 1);
  if (!v25) {
    int v26 = 0;
  }
  if (!v24)
  {
    uint64_t v38 = 1;
    if ((v6 - 7) < 2u) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  uint64_t v27 = 0;
  uint64_t v28 = (v24 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v28)
  {
    uint64_t v32 = v26;
LABEL_63:
    unint64_t v39 = &v26[v24];
    do
    {
      uint64_t v40 = *v32++;
      uint64_t v41 = *(uint64_t (****)())(v40 + 488);
      if (!v41) {
        uint64_t v41 = &off_25352D0;
      }
      if (*((_DWORD *)v41 + 26) != 2) {
        ++v27;
      }
    }
    while (v32 != v39);
    goto LABEL_69;
  }
  uint64_t v29 = 0;
  uint64_t v30 = v28 + 1;
  uint64_t v31 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v32 = &v26[v31];
  char v33 = v26 + 1;
  uint64_t v34 = v31;
  do
  {
    uint64_t v35 = *(uint64_t (****)())(*(v33 - 1) + 488);
    char v36 = *(uint64_t (****)())(*v33 + 488);
    if (!v35) {
      uint64_t v35 = &off_25352D0;
    }
    if (!v36) {
      char v36 = &off_25352D0;
    }
    int v37 = *((_DWORD *)v36 + 26);
    if (*((_DWORD *)v35 + 26) != 2) {
      ++v27;
    }
    if (v37 != 2) {
      ++v29;
    }
    v33 += 2;
    v34 -= 2;
  }
  while (v34);
  v27 += v29;
  if (v30 != v31) {
    goto LABEL_63;
  }
LABEL_69:
  uint64_t v38 = v27 + 1;
  if ((v6 - 7) < 2u)
  {
LABEL_71:
    std::string __p = 0;
    v60[0] = &off_2439090;
    sub_3E7814((__n128 *)&v67, (__n128 *)&__p);
    goto LABEL_72;
  }
LABEL_70:
  if (v38 == *(int *)(a1 + 152) + 1) {
    goto LABEL_71;
  }
  std::string __p = operator new(0xD8uLL);
  *(_OWORD *)int v60 = xmmword_20F05D0;
  strcpy((char *)__p, "Number of waypoints in the request does not match the number of waypoints with source USER in the original user route, which is only allowed for directions requests with purpose CHANGE_WAYPOINTS or CHANGE_ANCHORS.");
  sub_3E7914(9, (long long *)&__p, (uint64_t)&v67);
  if (SHIBYTE(v60[1]) < 0) {
    operator delete(__p);
  }
LABEL_72:
  sub_DDE010((uint64_t)v62, (uint64_t)&v67);
  uint64_t v42 = (void **)v68[1];
  if (v68[1])
  {
    uint64_t v43 = v69;
    uint64_t v44 = v68[1];
    if (v69 != v68[1])
    {
      do
      {
        if (*((char *)v43 - 1) < 0) {
          operator delete(*(v43 - 3));
        }
        v43 -= 4;
      }
      while (v43 != v42);
      uint64_t v44 = v68[1];
    }
    int v69 = v42;
    operator delete(v44);
  }
  if (*(_DWORD *)(a1 + 152))
  {
    if (sub_DB8C44(a1))
    {
      long long v45 = *(void *)(a1 + 336) ? *(uint64_t (****)())(a1 + 336) : &off_2536C78;
      uint64_t v46 = *((int *)v45 + 8);
      unint64_t v47 = v45[5];
      uint64_t v48 = v47 ? (uint64_t)(v47 + 1) : 0;
      if (v46)
      {
        uint64_t v49 = 8 * v46;
        do
        {
          size_t v50 = *(uint64_t (****)())(*(void *)v48 + 488);
          if (!v50) {
            size_t v50 = &off_25352D0;
          }
          if (!*((_DWORD *)v50 + 26))
          {
            unsigned int v67 = operator new(0x60uLL);
            *(_OWORD *)__n128 v68 = xmmword_20B9290;
            strcpy((char *)v67, "Got an MSR request with a destination waypoint info with no specified (or UNKNOWN) source.");
            sub_3E7914(9, (long long *)&v67, (uint64_t)&__p);
            if (SHIBYTE(v68[1]) < 0) {
              operator delete(v67);
            }
            goto LABEL_118;
          }
          v48 += 8;
          v49 -= 8;
        }
        while (v49);
        if ((int)v46 < 1) {
          goto LABEL_100;
        }
        unsigned int v51 = (uint64_t (***)())*((void *)v47[(v46 - 1) + 1] + 61);
        if (v51) {
          unint64_t v52 = v51;
        }
        else {
          unint64_t v52 = &off_25352D0;
        }
        sub_1391968(&v67, v52);
        if (v70 == 1)
        {
          sub_139667C(&v67);
          goto LABEL_100;
        }
        int v65 = operator new(0x70uLL);
        long long v66 = xmmword_20F05E0;
        strcpy((char *)v65, "Got an MSR request in which the destination waypoint info at the final destination does not have source USER.");
        sub_3E7914(9, (long long *)&v65, (uint64_t)&__p);
        if (SHIBYTE(v66) < 0) {
          operator delete(v65);
        }
        sub_139667C(&v67);
      }
      else
      {
LABEL_100:
        unsigned int v67 = 0;
        v68[0] = &off_2439090;
        sub_3E7814((__n128 *)&__p, (__n128 *)&v67);
      }
LABEL_118:
      sub_DDE010((uint64_t)v62, (uint64_t)&__p);
      uint64_t v57 = (void **)v60[1];
      if (v60[1])
      {
        uint64_t v58 = v61;
        uint64_t v56 = v60[1];
        if (v61 != v60[1])
        {
          do
          {
            if (*((char *)v58 - 1) < 0) {
              operator delete(*(v58 - 3));
            }
            v58 -= 4;
          }
          while (v58 != v57);
          uint64_t v56 = v60[1];
        }
        int v61 = v57;
        goto LABEL_126;
      }
    }
  }
  else
  {
    std::string __p = operator new(0x38uLL);
    *(_OWORD *)int v60 = xmmword_20B9A20;
    strcpy((char *)__p, "Invalid ETAU request input: no waypoints provided.");
    sub_3E7914(9, (long long *)&__p, (uint64_t)&v67);
    sub_DDE010((uint64_t)v62, (uint64_t)&v67);
    uint64_t v53 = (void **)v68[1];
    if (v68[1])
    {
      uint64_t v54 = v69;
      int v55 = v68[1];
      if (v69 != v68[1])
      {
        do
        {
          if (*((char *)v54 - 1) < 0) {
            operator delete(*(v54 - 3));
          }
          v54 -= 4;
        }
        while (v54 != v53);
        int v55 = v68[1];
      }
      int v69 = v53;
      operator delete(v55);
    }
    if (SHIBYTE(v60[1]) < 0)
    {
      uint64_t v56 = __p;
LABEL_126:
      operator delete(v56);
    }
  }
LABEL_127:
  if (v64 < 0) {
    operator delete(v63);
  }
}

void sub_DAC05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_139667C(&a33);
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_C7E3C8(v38);
  _Unwind_Resume(a1);
}

void sub_DAC148(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  v25.n128_u64[0] = 0;
  v25.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, &v25);
  sub_DDDD38((uint64_t)v31, a1, *a3, (uint64_t)a4);
  sub_DDDD38((uint64_t)v28, a1, a3[1], (uint64_t)a4);
  if (sub_51D60(v31) && (*(unsigned char *)(a1 + 42) & 2) != 0)
  {
    int v8 = sub_35E640();
    long long v9 = *(uint64_t (****)())(a1 + 376);
    if (!v9) {
      long long v9 = &off_25351C0;
    }
    sub_DAAF60(&v25, *((_DWORD *)v9 + 8), (uint64_t)v9[5]);
    sub_DDE010((uint64_t)v31, (uint64_t)&v25);
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      long long v11 = v27;
      uint64_t v12 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete(*(v11 - 3));
          }
          v11 -= 4;
        }
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    char v13 = *(uint64_t (****)())(a1 + 376);
    if (!v13) {
      char v13 = &off_25351C0;
    }
    sub_DAB204(&v25, *(_DWORD *)(a1 + 152), *((_DWORD *)v13 + 8), (uint64_t)v13[5], 3, v8);
    sub_DDE010((uint64_t)v31, (uint64_t)&v25);
    char v14 = (void **)__p;
    if (__p)
    {
      char v15 = v27;
      uint64_t v16 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v15 - 1) < 0) {
            operator delete(*(v15 - 3));
          }
          v15 -= 4;
        }
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v27 = v14;
      operator delete(v16);
    }
  }
  if (sub_DBF2D4(a1))
  {
    if (sub_51D60(v28))
    {
      uint64_t v17 = *(void *)(a1 + 304) ? *(uint64_t (****)())(a1 + 304) : &off_2539B38;
      sub_DAB408(&v25, (uint64_t)v17, a1 + 144, *(void *)(*(void *)(a1 + 88) + 8), a2);
      sub_DDE010((uint64_t)v28, (uint64_t)&v25);
      int v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v27;
        long long v20 = __p;
        if (v27 != __p)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 4;
          }
          while (v19 != v18);
          long long v20 = __p;
        }
        uint64_t v27 = v18;
        operator delete(v20);
      }
    }
    if (sub_51D60(v31))
    {
      uint64_t v21 = *(uint64_t (****)())(a1 + 376);
      if (!v21) {
        uint64_t v21 = &off_25351C0;
      }
      sub_DAB64C(&v25, *((_DWORD *)v21 + 8), (uint64_t)v21[5]);
      sub_DDE010((uint64_t)v31, (uint64_t)&v25);
      int v22 = (void **)__p;
      if (__p)
      {
        int v23 = v27;
        uint64_t v24 = __p;
        if (v27 != __p)
        {
          do
          {
            if (*((char *)v23 - 1) < 0) {
              operator delete(*(v23 - 3));
            }
            v23 -= 4;
          }
          while (v23 != v22);
          uint64_t v24 = __p;
        }
        uint64_t v27 = v22;
        operator delete(v24);
      }
    }
  }
  if ((v30 & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(v32);
    return;
  }
  operator delete(v29);
  if (v33 < 0) {
    goto LABEL_51;
  }
}

void sub_DAC430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_C7E3C8((uint64_t)&a9);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      sub_C7E3C8(v29);
      _Unwind_Resume(a1);
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  sub_C7E3C8(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_DAC4D0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DAC6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DAC6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DAC6D8()
{
  unk_25E7607 = 16641;
  word_25E75F0 = 65;
  byte_25E761F = 1;
  byte_25E7609 = 0;
}

uint64_t sub_DAC700(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 212))
  {
    case 5:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        goto LABEL_27;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 192) + 40) & 0x10) != 0) {
        goto LABEL_94;
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain place lookup parameters", 63);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      return 0;
    case 0x15:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        goto LABEL_27;
      }
      uint64_t v8 = *(void *)(a1 + 192);
      if ((*(unsigned char *)(v8 + 42) & 0x10) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain external transit lookup parameters", 74);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v18 = *(void *)(v8 + 216);
      if ((*(unsigned char *)(v18 + 16) & 1) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"External transit lookup parameters do not contain a source id", 61);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v31 = *(void *)(v18 + 40);
      if (v31) {
        uint64_t v32 = v31 + 8;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v33 = *(int *)(v18 + 32);
      if (!v33) {
        goto LABEL_94;
      }
      uint64_t v34 = 8 * v33;
      while (2)
      {
        if (*(char *)(*(void *)v32 + 23) < 0)
        {
          if (!*(void *)(*(void *)v32 + 8))
          {
LABEL_92:
            if (!sub_723EC(1u)) {
              return 0;
            }
            sub_6BAC((uint64_t)&v57);
            sub_188FC78(&v57, (uint64_t)"External transit lookup parameters contain an empty external station code", 73);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            goto LABEL_117;
          }
        }
        else if (!*(unsigned char *)(*(void *)v32 + 23))
        {
          goto LABEL_92;
        }
        v32 += 8;
        v34 -= 8;
        if (!v34) {
          goto LABEL_94;
        }
        continue;
      }
    case 0x17:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        goto LABEL_27;
      }
      uint64_t v10 = *(void *)(a1 + 192);
      if ((*(unsigned char *)(v10 + 42) & 0x40) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain maps identifier place lookup parameters", 79);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v25 = *(void *)(v10 + 232);
      uint64_t v26 = *(void *)(v25 + 64);
      if (v26) {
        uint64_t v27 = v26 + 8;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(int *)(v25 + 56);
      if (!v28)
      {
LABEL_94:
        int v17 = 0;
        goto LABEL_95;
      }
      uint64_t v29 = 8 * v28;
      while (2)
      {
        if (*(unsigned char *)(*(void *)v27 + 40))
        {
          if ((*(unsigned char *)(*(void *)(*(void *)v27 + 48) + 16) & 2) != 0)
          {
            v27 += 8;
            v29 -= 8;
            if (!v29) {
              goto LABEL_94;
            }
            continue;
          }
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)&v57);
          sub_188FC78(&v57, (uint64_t)"Maps identifier contains a sharded id without a muid", 52);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
        else
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)&v57);
          sub_188FC78(&v57, (uint64_t)"Maps identifier does not contain a sharded id", 45);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
        goto LABEL_117;
      }
    case 0x25:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        goto LABEL_27;
      }
      if ((*(unsigned char *)(*(void *)(a1 + 192) + 44) & 8) != 0) {
        return 1;
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain transit vehicle position parameters", 75);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      return 0;
    case 0x27:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Transit schedule lookup request does not contain place request parameters", 73);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v11 = *(void *)(a1 + 192);
      if ((*(unsigned char *)(v11 + 44) & 0x20) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Transit schedule lookup request parameters do not contain transit schedule lookup parameters", 92);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      int v30 = *(_DWORD *)(*(void *)(v11 + 352) + 40);
      if ((v30 & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Transit schedule lookup parameters does not have a reference trip id set", 72);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      if ((v30 & 4) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Transit schedule lookup parameters does not have a transit id set", 65);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v24 = 0;
      if (!sub_DAD9D4(a1, 0)) {
        return v24;
      }
      uint64_t v36 = sub_DADFE0(a1, 68);
      if (!v36) {
        return 1;
      }
      int v37 = *(uint64_t (****)())(v36 + 24);
      if (!v37) {
        int v37 = &off_2547290;
      }
      if ((*((_DWORD *)v37 + 11) & 0x80000000) != 0)
      {
        uint64_t v38 = v37[71];
        char v54 = 14;
        strcpy((char *)v53, "trip stop time");
        int v39 = *((_DWORD *)v38 + 10);
        if ((v39 & 2) != 0)
        {
          if (v39)
          {
            uint64_t v48 = (uint64_t (***)())*((void *)v38[7] + 3);
            if (!v48) {
              uint64_t v48 = &off_2544470;
            }
            if (*((_DWORD *)v48 + 6) + 978307200 >= 0)
            {
              uint64_t v24 = 1;
              goto LABEL_160;
            }
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)&v57);
              uint64_t v49 = sub_188FC78(&v57, (uint64_t)"The start time in the transit ", 30);
              if (v54 >= 0) {
                size_t v50 = v53;
              }
              else {
                size_t v50 = (void **)v53[0];
              }
              if (v54 >= 0) {
                uint64_t v51 = v54;
              }
              else {
                uint64_t v51 = (uint64_t)v53[1];
              }
              unint64_t v52 = sub_188FC78(v49, (uint64_t)v50, v51);
              sub_188FC78(v52, (uint64_t)" filter cannot be cast to a time stamp: ", 40);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)__p, 1u);
              goto LABEL_154;
            }
          }
          else if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v57);
            uint64_t v44 = sub_188FC78(&v57, (uint64_t)"Transit ", 8);
            if (v54 >= 0) {
              long long v45 = v53;
            }
            else {
              long long v45 = (void **)v53[0];
            }
            if (v54 >= 0) {
              uint64_t v46 = v54;
            }
            else {
              uint64_t v46 = (uint64_t)v53[1];
            }
            unint64_t v47 = sub_188FC78(v44, (uint64_t)v45, v46);
            sub_188FC78(v47, (uint64_t)" filter does not have a countdown departure predicate", 53);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            goto LABEL_154;
          }
        }
        else if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v57);
          uint64_t v40 = sub_188FC78(&v57, (uint64_t)"Transit ", 8);
          if (v54 >= 0) {
            uint64_t v41 = v53;
          }
          else {
            uint64_t v41 = (void **)v53[0];
          }
          if (v54 >= 0) {
            uint64_t v42 = v54;
          }
          else {
            uint64_t v42 = (uint64_t)v53[1];
          }
          uint64_t v43 = sub_188FC78(v40, (uint64_t)v41, v42);
          sub_188FC78(v43, (uint64_t)" filter does not have a stamp departure predicate", 49);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
LABEL_154:
          if (v56 < 0) {
            operator delete(__p[0]);
          }
          if (v60 < 0) {
            operator delete(v59);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v24 = 0;
LABEL_160:
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        return v24;
      }
      if (!sub_723EC(1u)) {
        return 0;
      }
      sub_6BAC((uint64_t)&v57);
      sub_188FC78(&v57, (uint64_t)"Transit trip stop time component does not have a transit trip stop time filter", 78);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_117:
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    case 0x32:
      if ((*(unsigned char *)(a1 + 40) & 8) != 0)
      {
        uint64_t v7 = *(void *)(a1 + 192);
        if (*(unsigned char *)(v7 + 46))
        {
          uint64_t v12 = *(void *)(v7 + 440);
          uint64_t v13 = *(void *)(v12 + 40);
          if (v13) {
            uint64_t v14 = v13 + 8;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(int *)(v12 + 32);
          if (!v15)
          {
LABEL_59:
            int v17 = 1;
LABEL_95:
            return sub_DAD9D4(a1, v17);
          }
          uint64_t v16 = 8 * v15;
          while ((*(unsigned char *)(*(void *)v14 + 16) & 1) != 0)
          {
            v14 += 8;
            v16 -= 8;
            if (!v16) {
              goto LABEL_59;
            }
          }
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)&v57);
          sub_188FC78(&v57, (uint64_t)"Transit nearby schedule lookup origin does not contain a waypoint typed", 71);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
        else
        {
          if (!sub_723EC(1u)) {
            return 0;
          }
          sub_6BAC((uint64_t)&v57);
          sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain transit nearby schedule lookup parameters", 81);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
      }
      else
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
LABEL_27:
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request does not contain place request parameters", 55);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
      }
      goto LABEL_117;
    case 0x39:
      if ((*(unsigned char *)(a1 + 40) & 8) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        goto LABEL_27;
      }
      uint64_t v9 = *(void *)(a1 + 192);
      if ((*(unsigned char *)(v9 + 46) & 0x80) == 0)
      {
        if (!sub_723EC(1u)) {
          return 0;
        }
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Place request parameters do not contain transit nearby payment method lookup parameters", 87);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      uint64_t v19 = *(void *)(v9 + 496);
      uint64_t v20 = *(void *)(v19 + 32);
      if (v20) {
        uint64_t v21 = v20 + 8;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(int *)(v19 + 24);
      if (!v22) {
        return 1;
      }
      uint64_t v23 = 8 * v22;
      uint64_t v24 = 1;
      while ((*(unsigned char *)(*(void *)v21 + 16) & 1) != 0)
      {
        v21 += 8;
        v23 -= 8;
        if (!v23) {
          return v24;
        }
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v57);
        sub_188FC78(&v57, (uint64_t)"Transit nearby payment method lookup origin does not contain a waypoint typed", 77);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_117;
      }
      return 0;
    default:
      if (!sub_723EC(1u)) {
        return 0;
      }
      sub_6BAC((uint64_t)&v57);
      uint64_t v2 = sub_188FC78(&v57, (uint64_t)"Place request consistency check invoked with a request of unsupported type ", 75);
      uint64_t v3 = sub_1791E0C(*(_DWORD *)(a1 + 212));
      int v4 = *((char *)v3 + 23);
      if (v4 >= 0) {
        uint64_t v5 = (uint64_t)v3;
      }
      else {
        uint64_t v5 = *v3;
      }
      if (v4 >= 0) {
        uint64_t v6 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        uint64_t v6 = v3[1];
      }
      sub_188FC78(v2, v5, v6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_117;
  }
}

void sub_DAD4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void (__cdecl **a23)(std::stringbuf *__hidden this),uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_DAD8A4()
{
}

void sub_DAD8AC()
{
}

void sub_DAD8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_DAD9D4(uint64_t a1, int a2)
{
  uint64_t v3 = sub_DADFE0(a1, 11);
  if (v3)
  {
    int v4 = *(uint64_t (****)())(v3 + 24);
    if (!v4) {
      int v4 = &off_2547290;
    }
    if ((*((unsigned char *)v4 + 41) & 4) == 0)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v26);
        sub_188FC78(&v26, (uint64_t)"Transit schedule component does not have a transit schedule filter", 66);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
LABEL_10:
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
      return 0;
    }
    uint64_t v6 = v4[18];
    char v23 = 8;
    strcpy((char *)v22, "schedule");
    int v7 = *((_DWORD *)v6 + 4);
    if ((v7 & 2) != 0)
    {
      if (v7)
      {
        int v17 = (uint64_t (***)())*((void *)v6[4] + 3);
        if (!v17) {
          int v17 = &off_2544470;
        }
        if (*((_DWORD *)v17 + 6) + 978307200 < 0)
        {
          if (!sub_723EC(1u)) {
            goto LABEL_40;
          }
          sub_6BAC((uint64_t)&v26);
          uint64_t v18 = sub_188FC78(&v26, (uint64_t)"The start time in the transit ", 30);
          if (v23 >= 0) {
            uint64_t v19 = v22;
          }
          else {
            uint64_t v19 = (void **)v22[0];
          }
          if (v23 >= 0) {
            uint64_t v20 = v23;
          }
          else {
            uint64_t v20 = (uint64_t)v22[1];
          }
          uint64_t v21 = sub_188FC78(v18, (uint64_t)v19, v20);
          sub_188FC78(v21, (uint64_t)" filter cannot be cast to a time stamp: ", 40);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          sub_111ECAC((uint64_t)&v26);
          uint64_t v16 = 0;
          if ((v23 & 0x80000000) == 0) {
            return v16;
          }
        }
        else
        {
          uint64_t v16 = 1;
          if ((v23 & 0x80000000) == 0) {
            return v16;
          }
        }
LABEL_46:
        operator delete(v22[0]);
        return v16;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_40;
      }
      sub_6BAC((uint64_t)&v26);
      uint64_t v12 = sub_188FC78(&v26, (uint64_t)"Transit ", 8);
      if (v23 >= 0) {
        uint64_t v13 = v22;
      }
      else {
        uint64_t v13 = (void **)v22[0];
      }
      if (v23 >= 0) {
        uint64_t v14 = v23;
      }
      else {
        uint64_t v14 = (uint64_t)v22[1];
      }
      uint64_t v15 = sub_188FC78(v12, (uint64_t)v13, v14);
      sub_188FC78(v15, (uint64_t)" filter does not have a countdown departure predicate", 53);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
    else
    {
      if (!sub_723EC(1u)) {
        goto LABEL_40;
      }
      sub_6BAC((uint64_t)&v26);
      uint64_t v8 = sub_188FC78(&v26, (uint64_t)"Transit ", 8);
      if (v23 >= 0) {
        uint64_t v9 = v22;
      }
      else {
        uint64_t v9 = (void **)v22[0];
      }
      if (v23 >= 0) {
        uint64_t v10 = v23;
      }
      else {
        uint64_t v10 = (uint64_t)v22[1];
      }
      uint64_t v11 = sub_188FC78(v8, (uint64_t)v9, v10);
      sub_188FC78(v11, (uint64_t)" filter does not have a stamp departure predicate", 49);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
LABEL_40:
    uint64_t v16 = 0;
    if ((v23 & 0x80000000) == 0) {
      return v16;
    }
    goto LABEL_46;
  }
  if (a2)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v26);
      sub_188FC78(&v26, (uint64_t)"Mandatory transit schedule component is not present in the request", 66);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_10;
    }
    return 0;
  }
  return 1;
}

void sub_DADF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a22);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DADFE0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    uint64_t v3 = v2 + 8;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(int *)(a1 + 104);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    for (uint64_t i = v3; *(_DWORD *)(*(void *)i + 32) != a2; i += 8)
    {
      v5 -= 8;
      if (!v5) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t i = v3;
  }
  if (i == v3 + 8 * v4) {
    return 0;
  }
  else {
    return *(void *)i;
  }
}

BOOL sub_DAE040(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    uint64_t v3 = v2 + 8;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(int *)(a1 + 104);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    for (uint64_t i = v3; *(_DWORD *)(*(void *)i + 32) != a2; i += 8)
    {
      v5 -= 8;
      if (!v5) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t i = v3;
  }
  return i != v3 + 8 * v4 && *(void *)i != 0;
}

void sub_DAE0A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(_DWORD *)(a1 + 32)
    || (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 184)
      ? (uint64_t v3 = *(uint64_t (****)())(*(void *)(*(void *)(a1 + 40) + 8) + 184))
      : (uint64_t v3 = &off_2538EE0),
        v3[22] ? (uint64_t v4 = (uint64_t (***)())v3[22]) : (uint64_t v4 = &off_253F1A0),
        (~*((_DWORD *)v4 + 10) & 3) != 0))
  {
    *(void *)a2 = -1;
    *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
    *(void *)(a2 + 16) = -1;
    *(void *)(a2 + 24) = -1;
    *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = -1935635296;
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 63) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    *(unsigned char *)(a2 + 100) = 100;
    *(void *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = 0;
    *(unsigned char *)(a2 + 216) = 0;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_OWORD *)(a2 + 168) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(void *)(a2 + 304) = 0;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 312) = xmmword_20B8E30;
    *(void *)(a2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(_DWORD *)(a2 + 360) = 0;
    *(void *)(a2 + 336) = 0;
    *(unsigned char *)(a2 + 368) = 0;
    *(_DWORD *)(a2 + 372) = 0;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
    *(void *)(a2 + 16) = -1;
    *(void *)(a2 + 24) = -1;
    *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = -1935635296;
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 63) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    *(unsigned char *)(a2 + 100) = 100;
    *(void *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 168) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(unsigned char *)(a2 + 216) = 0;
    *(void *)(a2 + 304) = 0;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 312) = xmmword_20B8E30;
    *(void *)(a2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(_DWORD *)(a2 + 360) = 0;
    *(void *)(a2 + 336) = 0;
    *(unsigned char *)(a2 + 368) = 0;
    *(_DWORD *)(a2 + 372) = 0;
    double v5 = fmax(*((double *)v4 + 6), -85.0511288);
    if (v5 >= 85.0511288) {
      double v6 = 1.48442223;
    }
    else {
      double v6 = v5 * 3.14159265 / 180.0;
    }
    long double v7 = sin(v6);
    unsigned int v8 = ((log((v7 + 1.0) / (1.0 - v7)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v8 >= 0xFFFFFFFE) {
      unsigned int v8 = -2;
    }
    *(_DWORD *)a2 = ((*((double *)v4 + 7) + 180.0) / 360.0 * 4294967300.0);
    *(_DWORD *)(a2 + 4) = v8;
    uint64_t v9 = v3[11];
    if (v9) {
      uint64_t v10 = (uint64_t *)(v9 + 1);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v35 = v3;
    uint64_t v11 = *((int *)v3 + 20);
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      do
      {
        uint64_t v13 = *v10;
        unint64_t v14 = *(void *)(a2 + 248);
        if (v14 >= *(void *)(a2 + 256))
        {
          uint64_t v15 = sub_DAF6EC((void **)(a2 + 240));
        }
        else
        {
          *(_OWORD *)(v14 + 8) = 0u;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 56) = 0u;
          *(_OWORD *)(v14 + 72) = 0u;
          *(_OWORD *)(v14 + 88) = 0u;
          *(void *)unint64_t v14 = -1;
          *(_DWORD *)(v14 + 8) = 0x7FFFFFFF;
          *(void *)(v14 + 16) = -1;
          *(void *)(v14 + 24) = -1;
          *(void *)(v14 + 32) = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)(v14 + 48) = -1935635296;
          *(void *)(v14 + 56) = 0;
          *(_DWORD *)(v14 + 63) = 0;
          *(void *)(v14 + 72) = 0;
          *(void *)(v14 + 80) = 0;
          *(void *)(v14 + 88) = 0;
          *(_DWORD *)(v14 + 96) = 0;
          *(unsigned char *)(v14 + 100) = 100;
          uint64_t v15 = (char *)(v14 + 104);
        }
        *(void *)(a2 + 248) = v15;
        double v16 = fmax(*(double *)(v13 + 48), -85.0511288);
        if (v16 >= 85.0511288) {
          double v17 = 1.48442223;
        }
        else {
          double v17 = v16 * 3.14159265 / 180.0;
        }
        long double v18 = sin(v17);
        unsigned int v19 = ((log((v18 + 1.0) / (1.0 - v18)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v19 >= 0xFFFFFFFE) {
          unsigned int v19 = -2;
        }
        *((_DWORD *)v15 - 26) = ((*(double *)(v13 + 56) + 180.0) / 360.0 * 4294967300.0);
        *((_DWORD *)v15 - 25) = v19;
        int v38 = 4;
        sub_745A4((uint64_t)(v15 - 32), &v38);
        ++v10;
        v12 -= 8;
      }
      while (v12);
    }
    uint64_t v20 = v35[14];
    if (v20) {
      uint64_t v21 = (uint64_t *)(v20 + 1);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *((int *)v35 + 26);
    if (v22)
    {
      for (uint64_t i = 8 * v22; i; i -= 8)
      {
        uint64_t v24 = *v21;
        unint64_t v25 = *(void *)(a2 + 248);
        if (v25 >= *(void *)(a2 + 256))
        {
          uint64_t v26 = sub_DAF6EC((void **)(a2 + 240));
        }
        else
        {
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_OWORD *)(v25 + 88) = 0u;
          *(void *)unint64_t v25 = -1;
          *(_DWORD *)(v25 + 8) = 0x7FFFFFFF;
          *(void *)(v25 + 16) = -1;
          *(void *)(v25 + 24) = -1;
          *(void *)(v25 + 32) = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)(v25 + 48) = -1935635296;
          *(void *)(v25 + 56) = 0;
          *(_DWORD *)(v25 + 63) = 0;
          *(void *)(v25 + 72) = 0;
          *(void *)(v25 + 80) = 0;
          *(void *)(v25 + 88) = 0;
          *(_DWORD *)(v25 + 96) = 0;
          *(unsigned char *)(v25 + 100) = 100;
          uint64_t v26 = (char *)(v25 + 104);
        }
        *(void *)(a2 + 248) = v26;
        if (*(void *)(v24 + 24)) {
          uint64_t v27 = *(uint64_t (****)())(v24 + 24);
        }
        else {
          uint64_t v27 = &off_253F1A0;
        }
        double v28 = fmax(*((double *)v27 + 6), -85.0511288);
        if (v28 >= 85.0511288) {
          double v29 = 1.48442223;
        }
        else {
          double v29 = v28 * 3.14159265 / 180.0;
        }
        long double v30 = sin(v29);
        unsigned int v31 = ((log((v30 + 1.0) / (1.0 - v30)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v31 >= 0xFFFFFFFE) {
          unsigned int v31 = -2;
        }
        *((_DWORD *)v26 - 26) = ((*((double *)v27 + 7) + 180.0) / 360.0 * 4294967300.0);
        *((_DWORD *)v26 - 25) = v31;
        int v32 = *(_DWORD *)(v24 + 40);
        if ((v32 & 0xFFFFFFFD) == 1)
        {
          int v33 = 4;
        }
        else if (v32 == 2)
        {
          int v33 = 5;
        }
        else
        {
          int v33 = *(_DWORD *)(v24 + 36);
          if ((v33 & 0xFFFFFFFD) == 1)
          {
            int v36 = 1;
            goto LABEL_49;
          }
          if (v33 != 2)
          {
            int v34 = *(_DWORD *)(v24 + 52);
            if ((v34 & 0xFFFFFFFD) == 1)
            {
              int v33 = 7;
            }
            else if (v34 == 4)
            {
              int v33 = 6;
            }
            else
            {
              if (v34 != 2) {
                goto LABEL_50;
              }
              int v33 = 8;
            }
          }
        }
        int v36 = v33;
LABEL_49:
        char v37 = 1;
        sub_745A4((uint64_t)(v26 - 32), &v36);
LABEL_50:
        ++v21;
      }
    }
  }
}

void sub_DAE6B0(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DAE6C4(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DAE6D8(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

void sub_DAE6EC(_Unwind_Exception *a1)
{
  sub_402C7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DAE700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a2;
  *(void *)&long long v120 = -1;
  DWORD2(v120) = 0x7FFFFFFF;
  uint64_t v3 = (_OWORD *)(a2 + 264);
  *(void *)&long long v121 = -1;
  *((void *)&v121 + 1) = -1;
  long long v122 = 0x7FFFFFFFFFFFFFFFuLL;
  *(_DWORD *)uint64_t v123 = -1935635296;
  *(void *)&v123[8] = 0;
  *(_DWORD *)&v123[15] = 0;
  long long v124 = 0uLL;
  uint64_t v125 = 0;
  int v126 = 0;
  char v127 = 100;
  uint64_t v128 = 0;
  int v129 = 0;
  long long v4 = 0uLL;
  memset(v130, 0, sizeof(v130));
  long long v131 = 0u;
  memset(v132, 0, sizeof(v132));
  v133[0] = 0;
  long long v5 = xmmword_20B8E30;
  long long v137 = xmmword_20B8E30;
  uint64_t v136 = 0;
  long long v135 = 0u;
  memset(v134, 0, sizeof(v134));
  *(_OWORD *)&v133[8] = 0u;
  uint64_t v138 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v140 = 0;
  int v141 = 0;
  long long v139 = 0uLL;
  LOBYTE(v142) = 0;
  HIDWORD(v142) = 0;
  if (!*(_DWORD *)(a1 + 208))
  {
    if (*(int *)(a1 + 128) >= 1)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 24)) {
        double v6 = *(uint64_t (****)())(*(void *)(*(void *)(a1 + 136) + 8) + 24);
      }
      else {
        double v6 = &off_25486C0;
      }
      uint64_t v7 = *((int *)v6 + 14);
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
    if (*(int *)(a1 + 56) < 1)
    {
      double v6 = (uint64_t (***)())&unk_25E7628;
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_25E7620, memory_order_acquire))
      {
        uint64_t v7 = dword_25E7660;
        if (!dword_25E7660)
        {
LABEL_9:
          *(void *)uint64_t v2 = -1;
          *(_DWORD *)(v2 + 8) = 0x7FFFFFFF;
          *(void *)(v2 + 16) = -1;
          *(void *)(v2 + 24) = -1;
          *(void *)(v2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
          *(void *)(v2 + 40) = 0;
          *(_DWORD *)(v2 + 48) = -1935635296;
          *(void *)(v2 + 56) = 0;
          *(_DWORD *)(v2 + 63) = 0;
          *(void *)(v2 + 80) = 0;
          *(void *)(v2 + 88) = 0;
          *(void *)(v2 + 72) = 0;
          *(_DWORD *)(v2 + 96) = 0;
          *(unsigned char *)(v2 + 100) = 100;
          *(void *)(v2 + 104) = 0;
          *(_DWORD *)(v2 + 112) = 0;
          *(unsigned char *)(v2 + 216) = 0;
          long long v4 = 0uLL;
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v96 = (_OWORD *)(a2 + 264);
        if (__cxa_guard_acquire(&qword_25E7620))
        {
          sub_17628FC((uint64_t)&unk_25E7628, 0, 0);
          __cxa_guard_release(&qword_25E7620);
          double v6 = (uint64_t (***)())&unk_25E7628;
        }
        uint64_t v2 = a2;
        uint64_t v3 = v96;
        long long v5 = xmmword_20B8E30;
        uint64_t v7 = dword_25E7660;
        if (!dword_25E7660) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      double v6 = *(uint64_t (****)())(*(void *)(a1 + 64) + 8);
      uint64_t v7 = *((int *)v6 + 14);
      if (!v7) {
        goto LABEL_9;
      }
    }
LABEL_15:
    uint64_t v99 = v2;
    uint64_t v98 = v3;
    unsigned int v8 = v6[8];
    if (v8) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v100 = &v9[v7];
    while (1)
    {
      uint64_t v10 = *v9;
      if (*((_DWORD *)*v9 + 14)) {
        break;
      }
LABEL_19:
      if (++v9 == v100)
      {
        long long v82 = *(_OWORD *)v123;
        *(_OWORD *)(v99 + 32) = v122;
        *(_OWORD *)(v99 + 48) = v82;
        *(_DWORD *)(v99 + 63) = *(_DWORD *)&v123[15];
        long long v83 = v121;
        *(_OWORD *)uint64_t v99 = v120;
        *(_OWORD *)(v99 + 16) = v83;
        *(_OWORD *)(v99 + 72) = v124;
        *(void *)(v99 + 88) = v125;
        uint64_t v125 = 0;
        long long v124 = 0uLL;
        int v84 = v126;
        *(unsigned char *)(v99 + 100) = v127;
        *(_DWORD *)(v99 + 96) = v84;
        uint64_t v85 = v128;
        *(_DWORD *)(v99 + 112) = v129;
        *(void *)(v99 + 104) = v85;
        long long v86 = *(_OWORD *)&v130[0].__r_.__value_.__l.__data_;
        *(void *)(v99 + 136) = *((void *)&v130[0].__r_.__value_.__l + 2);
        *(_OWORD *)(v99 + 120) = v86;
        memset(v130, 0, 24);
        long long v87 = *(_OWORD *)&v130[1].__r_.__value_.__l.__data_;
        *(void *)(v99 + 160) = *((void *)&v130[1].__r_.__value_.__l + 2);
        *(_OWORD *)(v99 + 144) = v87;
        memset(&v130[1], 0, sizeof(std::string));
        long long v88 = v131;
        uint64_t v89 = *(void *)&v133[16];
        *(void *)(v99 + 184) = *(void *)&v132[0];
        *(_OWORD *)(v99 + 168) = v88;
        long long v131 = 0uLL;
        *(void *)&v132[0] = 0;
        long long v90 = *(_OWORD *)((char *)v132 + 8);
        *(void *)(v99 + 208) = *((void *)&v132[1] + 1);
        *(_OWORD *)(v99 + 192) = v90;
        *((void *)&v132[0] + 1) = 0;
        v132[1] = 0uLL;
        long long v91 = *(_OWORD *)v133;
        *(void *)(v99 + 232) = v89;
        *(_OWORD *)(v99 + 216) = v91;
        *(_OWORD *)(v99 + 240) = v134[0];
        uint64_t v92 = *((void *)&v134[2] + 1);
        *(void *)(v99 + 256) = *(void *)&v134[1];
        memset(v134, 0, 24);
        *uint64_t v98 = *(_OWORD *)((char *)&v134[1] + 8);
        *(void *)(v99 + 280) = v92;
        memset((char *)&v134[1] + 8, 0, 24);
        *(_OWORD *)(v99 + 288) = v135;
        uint64_t v93 = v140;
        *(void *)(v99 + 304) = v136;
        long long v135 = 0uLL;
        uint64_t v136 = 0;
        long long v94 = v137;
        *(void *)(v99 + 328) = v138;
        *(_OWORD *)(v99 + 312) = v94;
        *(_OWORD *)(v99 + 336) = v139;
        *(void *)(v99 + 352) = v93;
        long long v139 = 0uLL;
        uint64_t v140 = 0;
        *(_DWORD *)(v99 + 360) = v141;
        *(void *)(v99 + 368) = v142;
        return sub_402C7C((uint64_t)&v120);
      }
    }
    std::string v101 = v9;
    v102 = *v9;
    int v103 = *(void **)(*((void *)v10 + 8) + 8);
    int v11 = *((_DWORD *)v10 + 34);
    switch(v11)
    {
      case 3:
        unsigned int v19 = (uint64_t (***)())v103[10];
        if (!v19) {
          unsigned int v19 = &off_2544980;
        }
        uint64_t v20 = v19[4];
        if (v20) {
          uint64_t v21 = (uint64_t *)(v20 + 1);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *((int *)v19 + 6);
        if (!v22) {
          goto LABEL_105;
        }
        uint64_t v23 = 8 * v22;
        do
        {
          sub_DE4EBC(*v21, (uint64_t)&v108);
          if (sub_DAA288((uint64_t)&v108)) {
            sub_CD81EC((uint64_t)v134, (uint64_t)&v108);
          }
          if (__p)
          {
            int v114 = __p;
            operator delete(__p);
          }
          ++v21;
          v23 -= 8;
        }
        while (v23);
        uint64_t v10 = v102;
        int v11 = *((_DWORD *)v102 + 34);
        break;
      case 2:
        uint64_t v12 = (uint64_t (***)())v103[9];
        if (!v12) {
          uint64_t v12 = &off_25448E8;
        }
        uint64_t v13 = (uint64_t (***)())v12[6];
        if (v13) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = &off_253F1A0;
        }
        double v15 = fmax(*((double *)v14 + 6), -85.0511288);
        if (v15 >= 85.0511288) {
          double v16 = 1.48442223;
        }
        else {
          double v16 = v15 * 3.14159265 / 180.0;
        }
        long double v17 = sin(v16);
        unsigned int v18 = ((log((v17 + 1.0) / (1.0 - v17)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v18 >= 0xFFFFFFFE) {
          unsigned int v18 = -2;
        }
        *(void *)&long long v120 = __PAIR64__(v18, ((*((double *)v14 + 7) + 180.0) / 360.0 * 4294967300.0));
        goto LABEL_105;
      case 1:
        uint64_t v24 = (uint64_t (***)())v103[8];
        unint64_t v25 = &off_25444D8;
        if (v24) {
          unint64_t v25 = (uint64_t (***)())v103[8];
        }
        if (*((int *)v25 + 32) >= 1)
        {
          std::string::operator=(v130, (const std::string *)(*((void *)v25[17][1] + 4) & 0xFFFFFFFFFFFFFFFELL));
          uint64_t v24 = (uint64_t (***)())v103[8];
        }
        if (!v24) {
          uint64_t v24 = &off_25444D8;
        }
        std::string::operator=((std::string *)((char *)v132 + 8), (const std::string *)((unint64_t)v24[41] & 0xFFFFFFFFFFFFFFFELL));
        int v11 = *((_DWORD *)v10 + 34);
        break;
    }
    if (v11 == 5)
    {
      uint64_t v26 = (uint64_t (***)())v103[12];
      if (!v26) {
        uint64_t v26 = &off_2544AB0;
      }
      if (*((int *)v26 + 14) < 1) {
        goto LABEL_105;
      }
      uint64_t v27 = (uint64_t (***)())*((void *)v26[8][1] + 4);
      if (!v27) {
        uint64_t v27 = &off_253F4C8;
      }
      double v28 = (uint64_t (***)())v27[6];
      if (!v28) {
        double v28 = &off_253F3D0;
      }
      std::string::operator=(&v130[1], (const std::string *)((unint64_t)v28[25] & 0xFFFFFFFFFFFFFFFELL));
      int v11 = *((_DWORD *)v102 + 34);
    }
    if (v11 == 21)
    {
      if (v103[25]) {
        double v29 = (uint64_t (***)())v103[25];
      }
      else {
        double v29 = &off_2545DF0;
      }
      if ((_BYTE)v29[2]) {
        *((void *)&v121 + 1) = nullsub_1(v29[6]);
      }
      long double v30 = v29[5];
      uint64_t v31 = v30 ? (uint64_t)(v30 + 1) : 0;
      uint64_t v32 = *((int *)v29 + 8);
      if (v32)
      {
        uint64_t v33 = v31 + 8 * v32;
        do
        {
          uint64_t v35 = *(void *)v31;
          if ((*(unsigned char *)(*(void *)v31 + 16) & 2) == 0) {
            goto LABEL_77;
          }
          uint64_t v36 = nullsub_1(*(void *)(v35 + 32));
          if (*(unsigned char *)(v35 + 16))
          {
            uint64_t v41 = *(void *)(v35 + 24);
            double v42 = fmax(*(double *)(v41 + 48), -85.0511288);
            if (v42 >= 85.0511288) {
              double v43 = 1.48442223;
            }
            else {
              double v43 = v42 * 3.14159265 / 180.0;
            }
            long double v44 = sin(v43);
            unsigned int v45 = ((log((v44 + 1.0) / (1.0 - v44)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v45 >= 0xFFFFFFFE) {
              int v38 = -2;
            }
            else {
              int v38 = v45;
            }
            unsigned int v37 = ((*(double *)(v41 + 56) + 180.0) / 360.0 * 4294967300.0);
            uint64_t v39 = *((void *)&v134[2] + 1);
            uint64_t v40 = *(_DWORD **)&v134[2];
            if (*(void *)&v134[2] >= *((void *)&v134[2] + 1))
            {
LABEL_89:
              uint64_t v46 = v33;
              unint64_t v47 = (_DWORD *)*((void *)&v134[1] + 1);
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *((void *)&v134[1] + 1)) >> 3);
              unint64_t v49 = v48 + 1;
              if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *((void *)&v134[1] + 1)) >> 3);
              if (2 * v50 > v49) {
                unint64_t v49 = 2 * v50;
              }
              if (v50 >= 0x555555555555555) {
                unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                if (v51 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                unint64_t v52 = (char *)operator new(24 * v51);
              }
              else
              {
                unint64_t v52 = 0;
              }
              uint64_t v53 = &v52[24 * v48];
              *(void *)uint64_t v53 = v36;
              *((_DWORD *)v53 + 2) = v37;
              *((_DWORD *)v53 + 3) = v38;
              *((_DWORD *)v53 + 4) = 0x7FFFFFFF;
              char v54 = v53;
              if (v40 != v47)
              {
                do
                {
                  long long v55 = *(_OWORD *)(v40 - 6);
                  *((_DWORD *)v54 - 2) = *(v40 - 2);
                  *(_OWORD *)(v54 - 24) = v55;
                  v54 -= 24;
                  v40 -= 6;
                }
                while (v40 != v47);
                uint64_t v40 = (_DWORD *)*((void *)&v134[1] + 1);
              }
              int v34 = v53 + 24;
              *((void *)&v134[1] + 1) = v54;
              *(void *)&v134[2] = v53 + 24;
              *((void *)&v134[2] + 1) = &v52[24 * v51];
              uint64_t v33 = v46;
              if (v40) {
                operator delete(v40);
              }
              goto LABEL_76;
            }
          }
          else
          {
            unsigned int v37 = -1;
            int v38 = -1;
            uint64_t v39 = *((void *)&v134[2] + 1);
            uint64_t v40 = *(_DWORD **)&v134[2];
            if (*(void *)&v134[2] >= *((void *)&v134[2] + 1)) {
              goto LABEL_89;
            }
          }
          *(void *)uint64_t v40 = v36;
          v40[2] = v37;
          v40[3] = v38;
          int v34 = v40 + 6;
          v40[4] = 0x7FFFFFFF;
LABEL_76:
          *(void *)&v134[2] = v34;
LABEL_77:
          v31 += 8;
        }
        while (v31 != v33);
      }
    }
LABEL_105:
    uint64_t v9 = v101;
    int v56 = *((_DWORD *)v102 + 34);
    if (v56 == 4)
    {
      uint64_t v57 = (uint64_t (***)())v103[11];
      if (!v57) {
        uint64_t v57 = &off_25449E0;
      }
      uint64_t v58 = (uint64_t (***)())v57[6];
      if (v58) {
        int v59 = v58;
      }
      else {
        int v59 = &off_253F208;
      }
      sub_3D25BC((uint64_t)&v108, (uint64_t)v59);
      long long v137 = v108;
      uint64_t v138 = v109;
      uint64_t v60 = v139;
      if ((void)v139)
      {
        uint64_t v61 = *((void *)&v139 + 1);
        uint64_t v62 = (void *)v139;
        if (*((void *)&v139 + 1) != (void)v139)
        {
          uint64_t v63 = *((void *)&v139 + 1);
          do
          {
            int v65 = *(void **)(v63 - 24);
            v63 -= 24;
            char v64 = v65;
            if (v65)
            {
              *(void *)(v61 - 16) = v64;
              operator delete(v64);
            }
            uint64_t v61 = v63;
          }
          while (v63 != v60);
          uint64_t v62 = (void *)v139;
        }
        *((void *)&v139 + 1) = v60;
        operator delete(v62);
      }
      long long v139 = v110;
      uint64_t v140 = v111;
      uint64_t v111 = 0;
      long long v110 = 0uLL;
      int v141 = v112;
      int v56 = *((_DWORD *)v102 + 34);
    }
    if (v56 == 81)
    {
      long long v66 = (uint64_t (***)())v103[82];
      if (!v66) {
        long long v66 = &off_2549158;
      }
      unsigned int v67 = v66[4];
      uint64_t v68 = v67 ? (uint64_t)(v67 + 1) : 0;
      uint64_t v69 = *((int *)v66 + 6);
      if (v69)
      {
        uint64_t v70 = v68 + 8 * v69;
        do
        {
          uint64_t v71 = *(void *)v68;
          uint64_t v72 = *(int *)(*(void *)v68 + 56);
          if (v72)
          {
            uint64_t v73 = *(void *)(v71 + 64);
            if (v73) {
              uint64_t v74 = v73 + 8;
            }
            else {
              uint64_t v74 = 0;
            }
            uint64_t v75 = 8 * v72;
            while (1)
            {
              unsigned int v76 = *(_DWORD *)(*(void *)v74 + 32);
              BOOL v77 = v76 > 5;
              int v78 = (1 << v76) & 0x25;
              if (!v77 && v78 != 0) {
                break;
              }
              v74 += 8;
              v75 -= 8;
              if (!v75) {
                goto LABEL_129;
              }
            }
          }
          sub_3E99C8(v71, (uint64_t)&v116);
          if ((*(void *)&v116 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v117 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((*(void *)&v118 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              ? (BOOL v80 = v116 == 1.79769313e308)
              : (BOOL v80 = 1),
                !v80 ? (BOOL v81 = v117 == 1.79769313e308) : (BOOL v81 = 1),
                v81 || !v119 && v118 == 1.79769313e308))
          {
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)&v108);
              sub_188FC78(&v108, (uint64_t)"Invalid storefront face for muid ", 33);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v106, 1u);
              if (v107 < 0) {
                operator delete(v106);
              }
              *(void *)&long long v108 = v105;
              *(void *)((char *)&v108 + *(void *)(v105 - 24)) = v104;
              if (v115 < 0) {
                operator delete(__p);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
          }
          else
          {
            sub_DAF560((char **)&v135, (uint64_t)&v116);
          }
LABEL_129:
          v68 += 8;
        }
        while (v68 != v70);
      }
    }
    goto LABEL_19;
  }
  *(void *)a2 = -1;
  *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
  *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = -1935635296;
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 63) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 100) = 100;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 216) = 0;
LABEL_3:
  *(_OWORD *)(v2 + 200) = v4;
  *(_OWORD *)(v2 + 184) = v4;
  *(_OWORD *)(v2 + 168) = v4;
  *(_OWORD *)(v2 + 152) = v4;
  *(_OWORD *)(v2 + 136) = v4;
  *(_OWORD *)(v2 + 120) = v4;
  *(void *)(v2 + 304) = 0;
  *(_OWORD *)(v2 + 272) = v4;
  *(_OWORD *)(v2 + 288) = v4;
  *(_OWORD *)(v2 + 240) = v4;
  *(_OWORD *)(v2 + 256) = v4;
  *(_OWORD *)(v2 + 224) = v4;
  v3[3] = v5;
  *(void *)(v2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v2 + 344) = 0;
  *(void *)(v2 + 352) = 0;
  *(_DWORD *)(v2 + 360) = 0;
  *(void *)(v2 + 336) = 0;
  *(unsigned char *)(v2 + 368) = 0;
  *(_DWORD *)(v2 + 372) = 0;
  return sub_402C7C((uint64_t)&v120);
}

void sub_DAF41C(_Unwind_Exception *a1)
{
}

void sub_DAF43C(_Unwind_Exception *a1)
{
}

void sub_DAF450(_Unwind_Exception *a1)
{
}

void sub_DAF464(_Unwind_Exception *a1)
{
}

void sub_DAF478(_Unwind_Exception *a1)
{
}

void sub_DAF48C(_Unwind_Exception *a1)
{
}

void sub_DAF4A0(_Unwind_Exception *a1)
{
}

void sub_DAF4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_DAF528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    sub_402C7C((uint64_t)&STACK[0x230]);
    _Unwind_Resume(a1);
  }
  sub_402C7C((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

char *sub_DAF560(char **a1, uint64_t a2)
{
  long long v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v14 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      double v15 = (char *)operator new(72 * v14);
    }
    else
    {
      double v15 = 0;
    }
    double v16 = &v15[72 * v11];
    long long v17 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v16 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v16 + 3) = v17;
    *((void *)v16 + 8) = *(void *)(a2 + 64);
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)double v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v18;
    uint64_t v9 = v16 + 72;
    if (v5 != v10)
    {
      do
      {
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v5 - 72);
        long long v19 = *(_OWORD *)(v5 - 56);
        long long v20 = *(_OWORD *)(v5 - 40);
        long long v21 = *(_OWORD *)(v5 - 24);
        *((void *)v16 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v16 - 24) = v21;
        *(_OWORD *)(v16 - 40) = v20;
        *(_OWORD *)(v16 - 56) = v19;
        v16 -= 72;
        v5 -= 72;
      }
      while (v5 != v10);
      long long v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[72 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 48);
    *((void *)v5 + 8) = *(void *)(a2 + 64);
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 1) = v6;
    uint64_t v9 = v5 + 72;
  }
  a1[1] = v9;
  return v9 - 72;
}

char *sub_DAF6EC(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v5 = 0x276276276276276;
  }
  if (v5 > 0x276276276276276) {
    sub_188D718();
  }
  uint64_t v6 = 104 * v5;
  long long v7 = (char *)operator new(104 * v5);
  long long v8 = &v7[104 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  uint64_t v9 = &v7[v6];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(void *)long long v8 = -1;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((void *)v8 + 2) = -1;
  *((void *)v8 + 3) = -1;
  *((void *)v8 + 4) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v8 + 12) = -1935635296;
  *(_DWORD *)(v8 + 63) = 0;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = 0;
  *((_DWORD *)v8 + 24) = 0;
  *((void *)v8 + 11) = 0;
  uint64_t v10 = v8 + 104;
  v8[100] = 100;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_16;
  }
  do
  {
    *(_OWORD *)(v8 - 104) = *(_OWORD *)(v2 - 104);
    long long v11 = *(_OWORD *)(v2 - 88);
    long long v12 = *(_OWORD *)(v2 - 72);
    long long v13 = *(_OWORD *)(v2 - 56);
    *(_DWORD *)(v8 - 41) = *(_DWORD *)(v2 - 41);
    *(_OWORD *)(v8 - 56) = v13;
    *(_OWORD *)(v8 - 72) = v12;
    *(_OWORD *)(v8 - 88) = v11;
    *((_OWORD *)v8 - 2) = *((_OWORD *)v2 - 2);
    *((void *)v8 - 2) = *((void *)v2 - 2);
    *((void *)v2 - 4) = 0;
    *((void *)v2 - 3) = 0;
    *((void *)v2 - 2) = 0;
    int v14 = *((_DWORD *)v2 - 2);
    *(v8 - 4) = *(v2 - 4);
    *((_DWORD *)v8 - 2) = v14;
    v8 -= 104;
    v2 -= 104;
  }
  while (v2 != v3);
  double v15 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v15)
  {
    do
    {
      double v16 = (void *)*((void *)v2 - 4);
      if (v16)
      {
        *((void *)v2 - 3) = v16;
        operator delete(v16);
      }
      v2 -= 104;
    }
    while (v2 != v15);
    uint64_t v2 = v15;
  }
  if (v2) {
LABEL_16:
  }
    operator delete(v2);
  return v10;
}

uint64_t sub_DAF8E8(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v15 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v15;
  *(unsigned char *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a6;
  *(void *)(a1 + 32) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  double v16 = (void *)(a1 + 56);
  sub_54214(a1 + 56, a4);
  *(_DWORD *)(a1 + 96) = 0;
  sub_54214(a1 + 104, a5);
  BOOL v17 = a7 == 0x7FFFFFFF || a8 == 0x7FFFFFFF;
  int v18 = (10 * (a7 - a8)) & ~((10 * (a7 - a8)) >> 31);
  if (v17) {
    int v18 = 0;
  }
  *(_DWORD *)(a1 + 144) = v18;
  *(_DWORD *)(a1 + 148) = a8;
  *(_DWORD *)(a1 + 152) = a9;
  *(_DWORD *)(a1 + 156) = a11;
  *(void *)(a1 + 40) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  char v21 = 8;
  strcpy((char *)__p, "model_id");
  *(_DWORD *)(a1 + 48) = sub_DAFAB0(v16, (uint64_t)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  char v21 = 8;
  strcpy((char *)__p, "model_id");
  *(_DWORD *)(a1 + 96) = sub_DAFAB0((void *)(a1 + 104), (uint64_t)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_DAFA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_5450C(v17);
  sub_5450C(v16);
  long long v20 = *v18;
  if (*v18)
  {
    *(void *)(v15 + 24) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

double sub_DAFAB0(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_DAFB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DAFB6C(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10, int a11)
{
  return sub_DAF8E8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, a11);
}

BOOL sub_DAFB88(uint64_t a1)
{
  BOOL result = sub_40A45C((int *)a1);
  if (result) {
    return *(_DWORD *)(a1 + 48) != -1 && *(_DWORD *)(a1 + 96) != -1 && *(void *)(a1 + 16) != *(void *)(a1 + 24);
  }
  return result;
}

BOOL sub_DAFBE4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 144) < 0x7FFFFFFFu;
}

uint64_t sub_DAFBF8(uint64_t a1)
{
  uint64_t v1 = sub_DAFCFC(a1);
  char v9 = 17;
  strcpy(__p, "vehicle_is_towing");
  uint64_t v2 = sub_58070(v1, (uint64_t)__p);
  uint64_t v3 = v2;
  if ((v9 & 0x80000000) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete(*(void **)__p);
  if (!v3) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = sub_DAFE08(v1, "vehicle_model_supports_towing");
  if (!v4) {
    return 1;
  }
  int v5 = *((_DWORD *)v4 + 12);
  if (v5 == 1) {
    return *((double *)v4 + 5) == 0.0;
  }
  return (v5 & 0xFFFFFFFE) == 4 && v5 != 4;
}

void sub_DAFCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_DAFCFC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_25E76D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v5 = __cxa_guard_acquire(qword_25E76D0);
    a1 = v4;
    if (v5)
    {
      xmmword_25E7710 = 0u;
      unk_25E7720 = 0u;
      dword_25E7730 = 1065353216;
      __cxa_guard_release(qword_25E76D0);
      a1 = v4;
    }
  }
  char v7 = 18;
  strcpy(__p, "vehicle_parameters");
  uint64_t v1 = sub_58070((void *)(a1 + 56), (uint64_t)__p);
  if (v1 && *((_DWORD *)v1 + 12) == 2)
  {
    uint64_t v2 = (long long *)v1[5];
    if (v7 < 0)
    {
LABEL_5:
      operator delete(*(void **)__p);
      return v2;
    }
  }
  else
  {
    uint64_t v2 = &xmmword_25E7710;
    if (v7 < 0) {
      goto LABEL_5;
    }
  }
  return v2;
}

void sub_DAFDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DAFE08(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  int v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  long long v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v6, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  char v9 = sub_58070(a1, (uint64_t)__dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  return v9;
}

void sub_DAFEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_DAFF00(uint64_t a1)
{
  uint64_t v1 = sub_DAFCFC(a1);
  char v6 = 17;
  strcpy(__p, "vehicle_is_towing");
  uint64_t v2 = sub_58070(v1, (uint64_t)__p);
  if (v2 && *((_DWORD *)v2 + 12) == 1)
  {
    int v3 = (int)*((double *)v2 + 5);
    if (v6 < 0)
    {
LABEL_4:
      operator delete(*(void **)__p);
      return v3 == 1;
    }
  }
  else
  {
    int v3 = 0;
    if (v6 < 0) {
      goto LABEL_4;
    }
  }
  return v3 == 1;
}

void sub_DAFFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DAFFC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t sub_DAFFC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 148);
}

uint64_t sub_DAFFD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 156);
}

uint64_t *sub_DAFFD8(uint64_t *result, int a2, int a3)
{
  int v17 = a3;
  char v16 = a2;
  if (a2 && a3 != 0x7FFFFFFF && a3)
  {
    char v4 = a2;
    int v5 = result;
    uint64_t v7 = (uint64_t *)result[2];
    result += 2;
    char v6 = v7;
    uint64_t v8 = result[3];
    char v9 = (uint64_t *)((char *)v7 + 12 * v8);
    if (v8)
    {
      uint64_t v10 = 12 * v8;
      while (*(unsigned __int8 *)v6 != a2)
      {
        char v6 = (uint64_t *)((char *)v6 + 12);
        v10 -= 12;
        if (!v10) {
          goto LABEL_14;
        }
      }
    }
    if (v6 == v9)
    {
LABEL_14:
      if (v9 == (uint64_t *)v5[3])
      {
        LOBYTE(v14) = 0;
        if ((unint64_t)v9 >= v5[4])
        {
          BOOL result = (uint64_t *)sub_40D8E4(result, &v16, &v17, (char *)&v14);
        }
        else
        {
          sub_87E68((uint64_t)v9, a2, a3, 0);
          BOOL result = (uint64_t *)((char *)v9 + 12);
          v5[3] = (uint64_t)v9 + 12;
        }
        v5[3] = (uint64_t)result;
        v5[5] = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)result - v5[2]) >> 2);
      }
      else
      {
        sub_796754(result, v9);
        BOOL result = (uint64_t *)sub_87E68((uint64_t)&v14, v4, a3, 0);
        uint64_t v12 = v5[2] + 12 * v5[5];
        uint64_t v13 = v14;
        *(unsigned char *)(v12 + 8) = v15;
        *(void *)uint64_t v12 = v13;
        ++v5[5];
      }
    }
    else
    {
      int v11 = *((_DWORD *)v6 + 1);
      if (v11 <= a3) {
        int v11 = a3;
      }
      *((_DWORD *)v6 + 1) = v11;
    }
  }
  return result;
}

void sub_DB0158(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_DB0160(uint64_t *result, int a2, int a3)
{
  int v13 = a3;
  char v12 = a2;
  if (a2 && a3 != 0x7FFFFFFF && a3)
  {
    int v3 = result;
    uint64_t v5 = result[2];
    result += 2;
    uint64_t v4 = v5;
    char v6 = (unsigned __int8 *)(v5 + 12 * result[3]);
    unint64_t v7 = result[1];
    uint64_t v8 = v6;
    if (v6 != (unsigned __int8 *)v7)
    {
      while (*v8 != a2)
      {
        v8 += 12;
        if (v8 == (unsigned __int8 *)v7) {
          goto LABEL_13;
        }
      }
    }
    if (v8 == (unsigned __int8 *)v7)
    {
LABEL_13:
      char v11 = 1;
      if (v7 >= v3[4])
      {
        BOOL result = (uint64_t *)sub_40D8E4(result, &v12, &v13, &v11);
        v3[3] = (uint64_t)result;
      }
      else
      {
        sub_87E68(v7, a2, a3, 1);
        BOOL result = (uint64_t *)(v7 + 12);
        v3[3] = v7 + 12;
        v3[3] = v7 + 12;
      }
    }
    else
    {
      char v9 = (unsigned __int8 *)(v4 + v8 - v6);
      int v10 = *((_DWORD *)v9 + 1);
      if (v10 <= a3) {
        int v10 = a3;
      }
      *((_DWORD *)v9 + 1) = v10;
    }
  }
  return result;
}

void sub_DB0264(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_DB026C()
{
  unk_25E76F7 = 16641;
  word_25E76E0 = 65;
  byte_25E770F = 1;
  byte_25E76F9 = 0;
}

void sub_DB0294(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  a3[1] = *a3;
  int v3 = a1;
  if (a1)
  {
    int v5 = HIDWORD(a1);
    sub_318C48(a2, a1, a3);
    if (*a3 != a3[1] || !sub_723EC(1u)) {
      return;
    }
    sub_6BAC((uint64_t)v13);
    char v6 = sub_188FC78(v13, (uint64_t)"Roads of pathlet ", 17);
    unint64_t v7 = sub_51960(v6, v3);
    sub_188FC78(v7, (uint64_t)".", 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    char v9 = sub_188FC78(v8, (uint64_t)" ", 1);
    int v10 = sub_670B8(v9, (v5 & 0x40000000) == 0);
    sub_188FC78(v10, (uint64_t)" is_fallback=", 13);
    std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)" could not be used to decode path.", 34);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
  }
  else
  {
    if (!sub_723EC(1u)) {
      return;
    }
    sub_6BAC((uint64_t)v13);
    sub_188FC78(v13, (uint64_t)"Could not decode pathlet geo ids onto the network.", 50);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_DB04F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_DB0568(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6)
{
  if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
    return;
  }
  uint64_t v9 = a3;
  uint64_t v12 = *a1;
  if (a3 < 0) {
    a3 = -a3;
  }
  unint64_t v13 = sub_2ABB48(v12, 22, a3);
  if (!HIDWORD(v13) || v14 != 0) {
    return;
  }
  unint64_t v16 = v13;
  unint64_t v17 = v13 & 0x3FFFFFFF;
  unint64_t v18 = (unint64_t)(v9 > 0) << 30;
  std::string __p = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  *((void *)&v20 + 1) = v13 & 0x3FFFFFFF | ((v9 > 0) << 30);
  *(void *)&long long v20 = v13;
  unint64_t v19 = v20 >> 32;
  sub_DB0294(v19, (uint64_t)a1, (unint64_t *)&__p);
  char v21 = (uint64_t *)__p;
  if (__p == v62)
  {
    a4[1] = *a4;
    if (v21) {
      goto LABEL_69;
    }
    return;
  }
  unint64_t v66 = v19;
  unint64_t v22 = 0x2127599BF4325C37
      * ((v16 & 0xFFFFFFFF00000000 | (4 * v17) | (v18 >> 29)) ^ ((v16 & 0xFFFFFFFF00000000 | (4 * v17)) >> 23));
  unint64_t v23 = (v22 ^ ~(v22 >> 47)) + ((v22 ^ (v22 >> 47)) << 21);
  unint64_t v24 = 21 * ((265 * (v23 ^ (v23 >> 24))) ^ ((265 * (v23 ^ (v23 >> 24))) >> 14));
  unint64_t v25 = 2147483649u * (v24 ^ (v24 >> 28));
  sub_32AC3C((uint64_t)(a1 + 487), &v66, v25, v64);
  if (v64[0]) {
    uint64_t v26 = *(void *)(v65 + 8);
  }
  else {
    uint64_t v26 = sub_32A6F4((uint64_t)a1, v66);
  }
  double v27 = (double)v26 * a5;
  if (v27 >= 0.0)
  {
    if (v27 >= 4.50359963e15) {
      goto LABEL_23;
    }
    uint64_t v28 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    if (v27 <= -4.50359963e15) {
      goto LABEL_23;
    }
    uint64_t v28 = (uint64_t)(v27 + v27);
    if (v28 >= 1) {
      --v28;
    }
  }
  double v27 = (double)(v28 >> 1);
LABEL_23:
  unint64_t v66 = v19;
  sub_32AC3C((uint64_t)(a1 + 487), &v66, v25, v64);
  if (v64[0]) {
    uint64_t v29 = *(void *)(v65 + 8);
  }
  else {
    uint64_t v29 = sub_32A6F4((uint64_t)a1, v66);
  }
  double v30 = (double)v29 * a6;
  uint64_t v60 = (uint64_t)a4;
  if (v30 >= 0.0)
  {
    if (v30 < 4.50359963e15)
    {
      uint64_t v31 = (uint64_t)(v30 + v30) + 1;
LABEL_33:
      double v30 = (double)(v31 >> 1);
    }
  }
  else if (v30 > -4.50359963e15)
  {
    uint64_t v31 = (uint64_t)(v30 + v30);
    if (v31 >= 1) {
      --v31;
    }
    goto LABEL_33;
  }
  uint64_t v32 = (uint64_t)v27;
  uint64_t v33 = (uint64_t *)__p;
  int v34 = v62;
  if (__p == v62)
  {
    uint64_t v36 = 0;
    goto LABEL_56;
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = (uint64_t)v30;
  while (1)
  {
    uint64_t v38 = *v33;
    unint64_t v39 = *v33 & 0xFFFFFFFFFFFFLL;
    uint64_t v40 = (int *)sub_2D5D58(a2, v39);
    uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
    if (*v41 >= 9u) {
      break;
    }
    uint64_t v42 = 0;
    uint64_t v43 = v35;
    if (v35 > v32) {
      goto LABEL_44;
    }
LABEL_36:
    v36 += v42;
LABEL_37:
    ++v33;
    uint64_t v35 = v43;
    if (v33 == v34) {
      goto LABEL_56;
    }
  }
  uint64_t v42 = v41[4];
  if (v42) {
    uint64_t v42 = *(unsigned int *)((char *)v40 + v42);
  }
  uint64_t v43 = v42 + v35;
  if (v42 + v35 <= v32) {
    goto LABEL_36;
  }
LABEL_44:
  long double v44 = (int *)sub_2D5D58(a2, v39);
  unsigned int v45 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v45 < 0x1Du)
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = v45[14];
    if (v46) {
      uint64_t v46 = *(void *)((char *)v44 + v46);
    }
  }
  if ((v38 & 0xFF000000000000) != 0) {
    uint64_t v46 = -v46;
  }
  v64[0] = (uint64_t *)v46;
  sub_A4710(v60, v64);
  if (v43 < v37) {
    goto LABEL_37;
  }
  unint64_t v47 = (int *)sub_2D5D58(a2, v39);
  unint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
  double v49 = 0.0;
  if (*v48 >= 9u)
  {
    uint64_t v50 = v48[4];
    if (v50)
    {
      LODWORD(v49) = *(int *)((char *)v47 + v50);
      double v49 = (double)*(unint64_t *)&v49;
    }
  }
  *(_DWORD *)(v60 + 28) = vcvtad_u64_f64((double)(v37 - v35) / v49 * 1000000000.0);
LABEL_56:
  uint64_t v51 = **(void **)v60;
  if (v51 >= 0) {
    uint64_t v52 = **(void **)v60;
  }
  else {
    uint64_t v52 = -v51;
  }
  unint64_t v53 = sub_2FD4C0(a2, v52);
  if (v53) {
    BOOL v54 = v53 > 0xFFFFFFFEFFFFFFFFLL;
  }
  else {
    BOOL v54 = 1;
  }
  if (v54) {
    unint64_t v55 = 0;
  }
  else {
    unint64_t v55 = v53 & 0xFFFFFFFFFFFFLL;
  }
  int v56 = (int *)sub_2D5D58(a2, v55);
  uint64_t v57 = (unsigned __int16 *)((char *)v56 - *v56);
  double v58 = 0.0;
  if (*v57 >= 9u)
  {
    uint64_t v59 = v57[4];
    if (v59)
    {
      LODWORD(v58) = *(int *)((char *)v56 + v59);
      double v58 = (double)*(unint64_t *)&v58;
    }
  }
  *(_DWORD *)(v60 + 24) = vcvtad_u64_f64((double)(v32 - v36) / v58 * 1000000000.0);
  char v21 = (uint64_t *)__p;
  if (__p)
  {
LABEL_69:
    uint64_t v62 = v21;
    operator delete(v21);
  }
}

void sub_DB09A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_DB09D8(uint64_t *a1, uint64_t a2)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v4 = *a1;
  if (a2 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = -a2;
  }
  unint64_t v6 = sub_2ABB48(v4, 22, v5);
  if (HIDWORD(v6)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    return ((v6 & 0x3FFFFFFF | ((a2 > 0) << 30)) << 32) | HIDWORD(v6);
  }
  else {
    return 0;
  }
}

uint64_t sub_DB0A6C(uint64_t a1, unint64_t a2)
{
  unint64_t v8 = a2;
  unint64_t v3 = 0x2127599BF4325C37
     * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v4 = (v3 ^ ~(v3 >> 47)) + ((v3 ^ (v3 >> 47)) << 21);
  unint64_t v5 = 21 * ((265 * (v4 ^ (v4 >> 24))) ^ ((265 * (v4 ^ (v4 >> 24))) >> 14));
  sub_32AC3C(a1 + 3896, &v8, 2147483649u * (v5 ^ (v5 >> 28)), v7);
  if (v7[0]) {
    return v7[3][1];
  }
  else {
    return sub_32A6F4(a1, v8);
  }
}

uint64_t sub_DB0B38(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (int *)sub_2D5D58(a1, a2);
  unint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 9u && (uint64_t v4 = v3[4]) != 0) {
    return *(unsigned int *)((char *)v2 + v4);
  }
  else {
    return 0;
  }
}

uint64_t sub_DB0B7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 < 0x1Du) {
    return 0;
  }
  uint64_t v5 = v4[14];
  if (v5) {
    uint64_t v5 = *(void *)((char *)v3 + v5);
  }
  if ((a2 & 0xFF000000000000) != 0) {
    return -v5;
  }
  else {
    return v5;
  }
}

uint64_t sub_DB0BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v3 = sub_2FD4C0(a1, a2);
  BOOL v4 = v3 > 0xFFFFFFFEFFFFFFFFLL || v3 == 0;
  int v5 = v4;
  if (v2 < 1) {
    int v6 = 1;
  }
  else {
    int v6 = v5;
  }
  BOOL v4 = v6 == 0;
  uint64_t v7 = 0x1000000000000;
  if (v4) {
    uint64_t v7 = 0;
  }
  if (v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  return v8 | v7;
}

void sub_DB0C44(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = sub_1883F34(a1 + 16, dword_254EB28, qword_254EB30);
  uint64_t v7 = sub_1883F34(v5, dword_254EB28, qword_254EB30);
  double v81 = *(double *)(sub_1883F34(v5, dword_254EB28, qword_254EB30) + 64);
  uint64_t v8 = sub_1883F34(v5, dword_254EB28, qword_254EB30);
  if (v81 >= 1.0
    || v81 < 0.0
    || ((double v9 = *(double *)(v8 + 72), v80 = v9, v9 > 0.0) ? (v10 = v9 <= 1.0) : (v10 = 0), !v10))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 28) = 1000000000;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 28) = 1000000000;
  uint64_t v11 = *(int *)(v6 + 24);
  if (v11)
  {
    if ((v11 & 0x80000000) != 0) {
      sub_2E00();
    }
    uint64_t v12 = 8 * v11;
    unint64_t v13 = (char *)operator new(8 * v11);
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = &v13[v12];
    char v14 = *(uint64_t ***)(v6 + 32);
    do
    {
      v85[0] = *v14;
      sub_A4710(a3, v85);
      ++v14;
      v12 -= 8;
    }
    while (v12);
    v15.f64[0] = v81;
    v15.f64[1] = v80;
    *(int32x2_t *)(a3 + 24) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_f64(v15, (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL)))));
    return;
  }
  if (!*(_DWORD *)(v7 + 40)) {
    return;
  }
  unint64_t v16 = (uint64_t *)sub_376B90(a2);
  uint64_t v17 = sub_3750CC(a2);
  if (*(_DWORD *)(v7 + 40) == 1)
  {
    sub_DB0568(v16, v17, **(void **)(v7 + 48), (void *)a3, v81, v80);
    return;
  }
  long long v86 = 0;
  long long v87 = 0;
  uint64_t v88 = 0;
  uint64_t v18 = **(void **)(v7 + 48);
  if (v18 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v18 >= 0) {
      uint64_t v22 = **(void **)(v7 + 48);
    }
    else {
      uint64_t v22 = -v18;
    }
    unint64_t v23 = sub_2ABB48(*v16, 22, v22);
    if (HIDWORD(v23)) {
      BOOL v25 = v24 == 0;
    }
    else {
      BOOL v25 = 0;
    }
    if (!v25)
    {
      int v20 = 0;
LABEL_100:
      int v21 = 1;
LABEL_101:
      unint64_t v19 = v86;
      goto LABEL_102;
    }
    *((void *)&v27 + 1) = v23 & 0x3FFFFFFF | ((v18 > 0) << 30);
    *(void *)&long long v27 = v23;
    unint64_t v26 = v27 >> 32;
    __p[0] = (void *)v26;
    unint64_t v28 = 0x2127599BF4325C37
        * ((v23 & 0xFFFFFFFF00000000 | (4 * (v23 & 0x3FFFFFFF)) | (2 * (v18 > 0))) ^ ((v23 & 0xFFFFFFFF00000000 | (4 * (v23 & 0x3FFFFFFF))) >> 23));
    unint64_t v29 = (v28 ^ ~(v28 >> 47)) + ((v28 ^ (v28 >> 47)) << 21);
    unint64_t v30 = 21 * ((265 * (v29 ^ (v29 >> 24))) ^ ((265 * (v29 ^ (v29 >> 24))) >> 14));
    sub_32AC3C((uint64_t)(v16 + 487), __p, 2147483649u * (v30 ^ (v30 >> 28)), v85);
    if (v85[0]) {
      uint64_t v31 = v85[3][1];
    }
    else {
      uint64_t v31 = sub_32A6F4((uint64_t)v16, (unint64_t)__p[0]);
    }
    double v32 = v81 * (double)v31;
    if (v32 >= 0.0)
    {
      if (v32 >= 4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v33 = (uint64_t)(v32 + v32) + 1;
    }
    else
    {
      if (v32 <= -4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
    }
    double v32 = (double)(v33 >> 1);
LABEL_39:
    sub_DB0294(v26, (uint64_t)v16, (unint64_t *)&v86);
    if (v86 != v87)
    {
      uint64_t v34 = sub_DB0A6C((uint64_t)v16, v26);
      uint64_t v35 = (uint64_t)v32;
      uint64_t v36 = v86;
      uint64_t v37 = v87;
      if (v34 != (uint64_t)v32 || v81 == 0.0)
      {
        long long v82 = v16;
        if (v86 == v87)
        {
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          do
          {
            uint64_t v41 = *v36;
            unint64_t v42 = *v36 & 0xFFFFFFFFFFFFLL;
            uint64_t v43 = (int *)sub_2D5D58(v17, v42);
            long double v44 = (unsigned __int16 *)((char *)v43 - *v43);
            if (*v44 < 9u)
            {
              uint64_t v45 = 0;
            }
            else
            {
              uint64_t v45 = v44[4];
              if (v45) {
                uint64_t v45 = *(unsigned int *)((char *)v43 + v45);
              }
            }
            v39 += v45;
            if (v39 <= v35)
            {
              v40 += v45;
            }
            else
            {
              uint64_t v46 = (int *)sub_2D5D58(v17, v42);
              unint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
              if (*v47 < 0x1Du)
              {
                uint64_t v48 = 0;
              }
              else
              {
                uint64_t v48 = v47[14];
                if (v48) {
                  uint64_t v48 = *(void *)((char *)v46 + v48);
                }
              }
              if ((v41 & 0xFF000000000000) != 0) {
                uint64_t v48 = -v48;
              }
              v85[0] = (uint64_t *)v48;
              sub_A4710(a3, v85);
            }
            ++v36;
          }
          while (v36 != v37);
        }
        uint64_t v49 = sub_DB0BE4(v17, **(void **)a3);
        *(_DWORD *)(a3 + 24) = vcvtad_u64_f64((double)(v35 - v40) / (double)sub_DB0B38(v17, v49 & 0xFFFFFFFFFFFFLL) * 1000000000.0);
        int v50 = *(_DWORD *)(v7 + 40);
        if (v50 <= 2) {
          int v51 = 2;
        }
        else {
          int v51 = *(_DWORD *)(v7 + 40);
        }
        uint64_t v52 = (v51 - 1);
        unint64_t v53 = v82;
        if (v51 != 2)
        {
          uint64_t v63 = 1;
          while (1)
          {
            uint64_t v64 = *(void *)(v7 + 48);
            uint64_t v65 = *(void *)(v64 + 8 * v63);
            if (v65 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_99;
            }
            uint64_t v66 = v65 >= 0 ? *(void *)(v64 + 8 * v63) : -v65;
            unint64_t v67 = sub_2ABB48(*v53, 22, v66);
            if (!HIDWORD(v67) || v68 != 0) {
              goto LABEL_99;
            }
            *((void *)&v70 + 1) = v67 & 0x3FFFFFFF | ((v65 > 0) << 30);
            *(void *)&long long v70 = v67;
            sub_DB0294(v70 >> 32, (uint64_t)v53, (unint64_t *)&v86);
            uint64_t v71 = v86;
            uint64_t v72 = v87;
            if (v86 == v87) {
              goto LABEL_99;
            }
            uint64_t v73 = *(char **)(a3 + 8);
            do
            {
              uint64_t v74 = *v71;
              uint64_t v75 = (int *)sub_2D5D58(v17, *v71 & 0xFFFFFFFFFFFFLL);
              unsigned int v76 = (unsigned __int16 *)((char *)v75 - *v75);
              if (*v76 < 0x1Du)
              {
                uint64_t v77 = 0;
              }
              else
              {
                uint64_t v77 = v76[14];
                if (v77) {
                  uint64_t v77 = *(void *)((char *)v75 + v77);
                }
              }
              if ((v74 & 0xFF000000000000) != 0) {
                uint64_t v77 = -v77;
              }
              v85[0] = (uint64_t *)v77;
              uint64_t v73 = sub_DB14B0((void **)a3, v73, v85) + 8;
              ++v71;
            }
            while (v71 != v72);
            ++v63;
            unint64_t v53 = v82;
            if (v63 == v52)
            {
              int v50 = *(_DWORD *)(v7 + 40);
              break;
            }
          }
        }
        unint64_t v54 = sub_DB09D8(v53, *(void *)(*(void *)(v7 + 48) + 8 * (v50 - 1)));
        if (!v54) {
          goto LABEL_99;
        }
        v85[0] = (uint64_t *)sub_DB0A6C((uint64_t)v53, v54);
        uint64_t v55 = sub_69CFC4((uint64_t *)v85, v80);
        sub_DB0294(v54, (uint64_t)v53, (unint64_t *)&v86);
        int v56 = v86;
        uint64_t v57 = v87;
        if (v86 == v87) {
          goto LABEL_99;
        }
        if (v55)
        {
          uint64_t v58 = 0;
          while (1)
          {
            uint64_t v59 = *v56;
            unint64_t v60 = *v56 & 0xFFFFFFFFFFFFLL;
            uint64_t v61 = sub_DB0B38(v17, v60);
            v85[0] = (uint64_t *)sub_DB0B7C(v17, v59);
            sub_A4710(a3, v85);
            uint64_t v62 = v61 + v58;
            if (v61 + v58 >= v55) {
              break;
            }
            int v21 = 0;
            ++v56;
            int v20 = 1;
            uint64_t v58 = v62;
            if (v56 == v57) {
              goto LABEL_101;
            }
          }
          int v21 = 0;
          *(_DWORD *)(a3 + 28) = vcvtad_u64_f64((double)(v55 - v58) / (double)sub_DB0B38(v17, v60) * 1000000000.0);
          int v20 = 1;
          goto LABEL_101;
        }
        if (!sub_723EC(1u)) {
          goto LABEL_99;
        }
        sub_6BAC((uint64_t)v85);
        sub_188FC78(v85, (uint64_t)"Destination fraction of ", 24);
        int v78 = (void *)std::ostream::operator<<();
        sub_188FC78(v78, (uint64_t)" would have required sub-centimeter resolution.", 47);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_45;
      }
      if (v86 != v87 && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v85);
        sub_188FC78(v85, (uint64_t)"Origin fraction of ", 19);
        uint64_t v38 = (void *)std::ostream::operator<<();
        sub_188FC78(v38, (uint64_t)" would have required sub-centimeter resolution.", 47);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
LABEL_45:
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        sub_111ECAC((uint64_t)v85);
      }
    }
LABEL_99:
    int v20 = 0;
    *(void *)(a3 + 8) = *(void *)a3;
    goto LABEL_100;
  }
  unint64_t v19 = 0;
  int v20 = 0;
  int v21 = 1;
LABEL_102:
  if (v19)
  {
    long long v87 = v19;
    operator delete(v19);
  }
  if (((v21 | v20) & 1) == 0)
  {
    uint64_t v79 = *(uint64_t **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v79;
      operator delete(v79);
    }
  }
}

void sub_DB13E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a20);
  unint64_t v23 = *(void **)(v21 - 136);
  if (v23)
  {
    *(void *)(v21 - 128) = v23;
    operator delete(v23);
    char v24 = *(void **)v20;
    if (!*(void *)v20) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    char v24 = *(void **)v20;
    if (!*(void *)v20) {
      goto LABEL_5;
    }
  }
  *(void *)(v20 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

char *sub_DB14B0(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  double v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)double v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      float64x2_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)double v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    double v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    double v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    unint64_t v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    double v32 = &v53[8 * v52];
    if (v30)
    {
      unint64_t v54 = &v53[8 * v52];
      operator delete(v30);
      double v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    double v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_DB1808(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB1820()
{
  unk_25E7777 = 16641;
  word_25E7760 = 65;
  byte_25E778F = 1;
  byte_25E7779 = 0;
}

void sub_DB1848(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = sub_DB197C(a1, a2);
  sub_DB1C28(a1, a2, v12);
  int v7 = sub_DB1E58(a1, a2);
  sub_DB1FDC((_DWORD *)a1, (uint64_t)__p);
  uint64_t v8 = *(uint64_t (****)())(a1 + 328);
  if (!v8) {
    uint64_t v8 = &off_2539290;
  }
  double v9 = (long long *)((unint64_t)v8[16] & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (uint64_t (***)())v8[24];
  if (!v10) {
    unint64_t v10 = &off_253F750;
  }
  sub_DC71FC(a3, v6, (uint64_t)v12, v7, (uint64_t)__p, v9, *((unsigned char *)v10 + 40));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_DB1920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB197C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 328)) {
    unint64_t v3 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    unint64_t v3 = &off_2539290;
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  BOOL v4 = v3[6];
  if (v4) {
    unint64_t v5 = (uint64_t *)(v4 + 1);
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 10);
  if (!v6) {
    goto LABEL_23;
  }
  int v7 = 0;
  uint64_t v8 = 8 * v6;
  do
  {
    uint64_t v10 = *v5;
    if ((unint64_t)v7 < v22)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v7, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v7 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)int v7 = v9;
      }
      v7 += 24;
    }
    else
    {
      int v7 = sub_1D740((char **)&__p, v10);
    }
    uint64_t v21 = v7;
    ++v5;
    v8 -= 8;
  }
  while (v8);
  if (!*((_DWORD *)v3 + 10))
  {
LABEL_23:
    uint64_t v14 = 0;
    float64x2_t v15 = (char *)__p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v11 = sub_656AC();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v12 = sub_1133208(0x14u);
  v26[0] = __p;
  v26[1] = v21;
  int v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 3);
  v23[0] = qword_25EB5F0;
  v23[1] = unk_25EB5F8;
  int v24 = 2;
  uint64_t v25 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v13 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 40))(v11, v26, v23);
  if ((v13 & 0x80000000) == 0 && v13 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v12 = *(void *)(qword_25EB5F0 + 8 * v13);
  }
  uint64_t v19 = v12;
  uint64_t v14 = sub_1132F18(&v19);
  float64x2_t v15 = (char *)__p;
  if (__p)
  {
LABEL_24:
    unint64_t v16 = (void **)v21;
    unint64_t v17 = v15;
    if (v21 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      unint64_t v17 = __p;
    }
    uint64_t v21 = v15;
    operator delete(v17);
  }
LABEL_31:
  if (!v14)
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 11;
    }
    uint64_t v14 = sub_DBA344((long long *)a2);
    if (!v14) {
      return 11;
    }
  }
  return v14;
}

void sub_DB1BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_25E77B0);
  if (a3) {
    sub_20B0814((uint64_t)va, a3);
  }
  _Unwind_Resume(a1);
}

void sub_DB1C28(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t (****)())(a1 + 328);
  if (!v5) {
    unint64_t v5 = &off_2539290;
  }
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v6 = v5[6];
  if (v6) {
    int v7 = (unsigned __int8 ***)(v6 + 1);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 10);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t v11 = __p;
    uint64_t v10 = v22;
    if ((unint64_t)(v22 - (unsigned char *)__p) > 0x4F) {
      break;
    }
    int v12 = *((char *)*v7 + 23);
    if (v12 >= 0) {
      int v13 = (unsigned __int8 *)*v7;
    }
    else {
      int v13 = **v7;
    }
    if (v12 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)*v7 + 23);
    }
    else {
      unint64_t v14 = (unint64_t)(*v7)[1];
    }
    if (v14 >= 0x1F) {
      uint64_t v15 = 31;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 == 1)
      {
        *(void *)&long long v24 = *v13;
        *((void *)&v24 + 1) = 1;
      }
      else
      {
        if (v15 != 2)
        {
          sub_76DEC(v13, v15, (uint64_t)&v24);
          goto LABEL_27;
        }
        *(void *)&long long v24 = *(unsigned __int16 *)v13;
        *((void *)&v24 + 1) = 2;
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
    }
LABEL_27:
    uint64_t v20 = sub_1133038((uint64_t)&v24, 0);
    if (sub_1132F18(&v20)) {
      sub_29603C(&__p, &v20);
    }
    ++v7;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v11 = __p;
      uint64_t v10 = v22;
      break;
    }
  }
  if (v11 != v10)
  {
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v23;
    return;
  }
LABEL_32:
  if (*(unsigned char *)(a2 + 72) && (unsigned int v16 = sub_DBA344((long long *)a2)) != 0)
  {
    uint64_t v17 = sub_1133298(v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  else
  {
    uint64_t v17 = sub_1133298(0xBu);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  *a3 = v18;
  *unint64_t v18 = v17;
  uint64_t v19 = v18 + 1;
  a3[1] = v19;
  a3[2] = v19;
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_DB1E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB1E58(uint64_t a1, uint64_t a2)
{
  BOOL v4 = &off_2535C50;
  if (*(void *)(a1 + 304)) {
    BOOL v4 = *(uint64_t (****)())(a1 + 304);
  }
  unint64_t v5 = (unint64_t)v4[9] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v5, *(void *)(v5 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    uint64_t v15 = *(void *)(v5 + 16);
    *(_OWORD *)long long __dst = v6;
  }
  sub_4BDC0C(&__p, (uint64_t)__dst, 1uLL);
  uint64_t v7 = sub_DBA204((uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v13;
    uint64_t v10 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v13 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    if (v7) {
      return v7;
    }
    return sub_DB197C(a1, a2);
  }
  if (!v7) {
    return sub_DB197C(a1, a2);
  }
  return v7;
}

void sub_DB1FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_DB1FDC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = &off_2539290;
  if (*((void *)result + 41)) {
    unint64_t v3 = (uint64_t (***)())*((void *)result + 41);
  }
  BOOL v4 = (uint64_t (***)())v3[24];
  if (!v4) {
    BOOL v4 = &off_253F750;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v5 = *((int *)v4 + 6);
  if (v5)
  {
    long long v6 = v4[4];
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 2)
      {
        int v11 = 3;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (v8 == 1)
      {
        int v11 = 1;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (!v8)
      {
        int v11 = 2;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      long long v6 = (uint64_t (**)())((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v13;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = operator new(8uLL);
    *(void *)a2 = v10;
    *uint64_t v10 = 0x200000001;
    BOOL result = v10 + 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = result;
  }
  return result;
}

void sub_DB210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB2134(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = sub_DB2268(a1, a2);
  sub_DB2514(a1, a2, v12);
  int v7 = sub_DB2744(a1, a2);
  sub_DB28C8((_DWORD *)a1, (uint64_t)__p);
  int v8 = *(uint64_t (****)())(a1 + 296);
  if (!v8) {
    int v8 = &off_2539290;
  }
  uint64_t v9 = (long long *)((unint64_t)v8[16] & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v10 = (uint64_t (***)())v8[24];
  if (!v10) {
    uint64_t v10 = &off_253F750;
  }
  sub_DC71FC(a3, v6, (uint64_t)v12, v7, (uint64_t)__p, v9, *((unsigned char *)v10 + 40));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_DB220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB2268(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 296)) {
    unint64_t v3 = *(uint64_t (****)())(a1 + 296);
  }
  else {
    unint64_t v3 = &off_2539290;
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  BOOL v4 = v3[6];
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 10);
  if (!v6) {
    goto LABEL_23;
  }
  int v7 = 0;
  uint64_t v8 = 8 * v6;
  do
  {
    uint64_t v10 = *v5;
    if ((unint64_t)v7 < v22)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v7, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v7 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)int v7 = v9;
      }
      v7 += 24;
    }
    else
    {
      int v7 = sub_1D740((char **)&__p, v10);
    }
    uint64_t v21 = v7;
    ++v5;
    v8 -= 8;
  }
  while (v8);
  if (!*((_DWORD *)v3 + 10))
  {
LABEL_23:
    uint64_t v14 = 0;
    uint64_t v15 = (char *)__p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v11 = sub_656AC();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v12 = sub_1133208(0x14u);
  v26[0] = __p;
  v26[1] = v21;
  int v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 3);
  v23[0] = qword_25EB5F0;
  v23[1] = unk_25EB5F8;
  int v24 = 2;
  uint64_t v25 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v13 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 40))(v11, v26, v23);
  if ((v13 & 0x80000000) == 0 && v13 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v12 = *(void *)(qword_25EB5F0 + 8 * v13);
  }
  uint64_t v19 = v12;
  uint64_t v14 = sub_1132F18(&v19);
  uint64_t v15 = (char *)__p;
  if (__p)
  {
LABEL_24:
    unsigned int v16 = (void **)v21;
    uint64_t v17 = v15;
    if (v21 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      uint64_t v17 = __p;
    }
    uint64_t v21 = v15;
    operator delete(v17);
  }
LABEL_31:
  if (!v14)
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 11;
    }
    uint64_t v14 = sub_DBA344((long long *)a2);
    if (!v14) {
      return 11;
    }
  }
  return v14;
}

void sub_DB24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_25E77B0);
  if (a3) {
    sub_20B0814((uint64_t)va, a3);
  }
  _Unwind_Resume(a1);
}

void sub_DB2514(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t (****)())(a1 + 296);
  if (!v5) {
    uint64_t v5 = &off_2539290;
  }
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v6 = v5[6];
  if (v6) {
    int v7 = (unsigned __int8 ***)(v6 + 1);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 10);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t v11 = __p;
    uint64_t v10 = v22;
    if ((unint64_t)(v22 - (unsigned char *)__p) > 0x4F) {
      break;
    }
    int v12 = *((char *)*v7 + 23);
    if (v12 >= 0) {
      int v13 = (unsigned __int8 *)*v7;
    }
    else {
      int v13 = **v7;
    }
    if (v12 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)*v7 + 23);
    }
    else {
      unint64_t v14 = (unint64_t)(*v7)[1];
    }
    if (v14 >= 0x1F) {
      uint64_t v15 = 31;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 == 1)
      {
        *(void *)&long long v24 = *v13;
        *((void *)&v24 + 1) = 1;
      }
      else
      {
        if (v15 != 2)
        {
          sub_76DEC(v13, v15, (uint64_t)&v24);
          goto LABEL_27;
        }
        *(void *)&long long v24 = *(unsigned __int16 *)v13;
        *((void *)&v24 + 1) = 2;
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
    }
LABEL_27:
    uint64_t v20 = sub_1133038((uint64_t)&v24, 0);
    if (sub_1132F18(&v20)) {
      sub_29603C(&__p, &v20);
    }
    ++v7;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v11 = __p;
      uint64_t v10 = v22;
      break;
    }
  }
  if (v11 != v10)
  {
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v23;
    return;
  }
LABEL_32:
  if (*(unsigned char *)(a2 + 72) && (unsigned int v16 = sub_DBA344((long long *)a2)) != 0)
  {
    uint64_t v17 = sub_1133298(v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  else
  {
    uint64_t v17 = sub_1133298(0xBu);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  *a3 = v18;
  *unint64_t v18 = v17;
  uint64_t v19 = v18 + 1;
  a3[1] = v19;
  a3[2] = v19;
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_DB2710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB2744(uint64_t a1, uint64_t a2)
{
  BOOL v4 = &off_2535C50;
  if (*(void *)(a1 + 288)) {
    BOOL v4 = *(uint64_t (****)())(a1 + 288);
  }
  unint64_t v5 = (unint64_t)v4[9] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v5, *(void *)(v5 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    uint64_t v15 = *(void *)(v5 + 16);
    *(_OWORD *)long long __dst = v6;
  }
  sub_4BDC0C(&__p, (uint64_t)__dst, 1uLL);
  uint64_t v7 = sub_DBA204((uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v13;
    uint64_t v10 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v13 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    if (v7) {
      return v7;
    }
    return sub_DB2268(a1, a2);
  }
  if (!v7) {
    return sub_DB2268(a1, a2);
  }
  return v7;
}

void sub_DB289C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_DB28C8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = &off_2539290;
  if (*((void *)result + 37)) {
    unint64_t v3 = (uint64_t (***)())*((void *)result + 37);
  }
  BOOL v4 = (uint64_t (***)())v3[24];
  if (!v4) {
    BOOL v4 = &off_253F750;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v5 = *((int *)v4 + 6);
  if (v5)
  {
    long long v6 = v4[4];
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 2)
      {
        int v11 = 3;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (v8 == 1)
      {
        int v11 = 1;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (!v8)
      {
        int v11 = 2;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      long long v6 = (uint64_t (**)())((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v13;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = operator new(8uLL);
    *(void *)a2 = v10;
    *uint64_t v10 = 0x200000001;
    BOOL result = v10 + 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = result;
  }
  return result;
}

void sub_DB29F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB2A20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = sub_DB2B54(a1, a2);
  sub_DB2E00(a1, a2, v12);
  int v7 = sub_DB3030(a1, a2);
  sub_DB31B4((_DWORD *)a1, (uint64_t)__p);
  int v8 = *(uint64_t (****)())(a1 + 136);
  if (!v8) {
    int v8 = &off_2539290;
  }
  uint64_t v9 = (long long *)((unint64_t)v8[16] & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v10 = (uint64_t (***)())v8[24];
  if (!v10) {
    uint64_t v10 = &off_253F750;
  }
  sub_DC71FC(a3, v6, (uint64_t)v12, v7, (uint64_t)__p, v9, *((unsigned char *)v10 + 40));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_DB2AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB2B54(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136)) {
    unint64_t v3 = *(uint64_t (****)())(a1 + 136);
  }
  else {
    unint64_t v3 = &off_2539290;
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  BOOL v4 = v3[6];
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 10);
  if (!v6) {
    goto LABEL_23;
  }
  int v7 = 0;
  uint64_t v8 = 8 * v6;
  do
  {
    uint64_t v10 = *v5;
    if ((unint64_t)v7 < v22)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v7, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v7 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)int v7 = v9;
      }
      v7 += 24;
    }
    else
    {
      int v7 = sub_1D740((char **)&__p, v10);
    }
    uint64_t v21 = v7;
    ++v5;
    v8 -= 8;
  }
  while (v8);
  if (!*((_DWORD *)v3 + 10))
  {
LABEL_23:
    uint64_t v14 = 0;
    uint64_t v15 = (char *)__p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v11 = sub_656AC();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v12 = sub_1133208(0x14u);
  v26[0] = __p;
  v26[1] = v21;
  int v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 3);
  v23[0] = qword_25EB5F0;
  v23[1] = unk_25EB5F8;
  int v24 = 2;
  uint64_t v25 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v13 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 40))(v11, v26, v23);
  if ((v13 & 0x80000000) == 0 && v13 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v12 = *(void *)(qword_25EB5F0 + 8 * v13);
  }
  uint64_t v19 = v12;
  uint64_t v14 = sub_1132F18(&v19);
  uint64_t v15 = (char *)__p;
  if (__p)
  {
LABEL_24:
    unsigned int v16 = (void **)v21;
    uint64_t v17 = v15;
    if (v21 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      uint64_t v17 = __p;
    }
    uint64_t v21 = v15;
    operator delete(v17);
  }
LABEL_31:
  if (!v14)
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 11;
    }
    uint64_t v14 = sub_DBA344((long long *)a2);
    if (!v14) {
      return 11;
    }
  }
  return v14;
}

void sub_DB2DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_25E77B0);
  if (a3) {
    sub_20B0814((uint64_t)va, a3);
  }
  _Unwind_Resume(a1);
}

void sub_DB2E00(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t (****)())(a1 + 136);
  if (!v5) {
    uint64_t v5 = &off_2539290;
  }
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v6 = v5[6];
  if (v6) {
    int v7 = (unsigned __int8 ***)(v6 + 1);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 10);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t v11 = __p;
    uint64_t v10 = v22;
    if ((unint64_t)(v22 - (unsigned char *)__p) > 0x4F) {
      break;
    }
    int v12 = *((char *)*v7 + 23);
    if (v12 >= 0) {
      int v13 = (unsigned __int8 *)*v7;
    }
    else {
      int v13 = **v7;
    }
    if (v12 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)*v7 + 23);
    }
    else {
      unint64_t v14 = (unint64_t)(*v7)[1];
    }
    if (v14 >= 0x1F) {
      uint64_t v15 = 31;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 == 1)
      {
        *(void *)&long long v24 = *v13;
        *((void *)&v24 + 1) = 1;
      }
      else
      {
        if (v15 != 2)
        {
          sub_76DEC(v13, v15, (uint64_t)&v24);
          goto LABEL_27;
        }
        *(void *)&long long v24 = *(unsigned __int16 *)v13;
        *((void *)&v24 + 1) = 2;
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
    }
LABEL_27:
    uint64_t v20 = sub_1133038((uint64_t)&v24, 0);
    if (sub_1132F18(&v20)) {
      sub_29603C(&__p, &v20);
    }
    ++v7;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v11 = __p;
      uint64_t v10 = v22;
      break;
    }
  }
  if (v11 != v10)
  {
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v23;
    return;
  }
LABEL_32:
  if (*(unsigned char *)(a2 + 72) && (unsigned int v16 = sub_DBA344((long long *)a2)) != 0)
  {
    uint64_t v17 = sub_1133298(v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  else
  {
    uint64_t v17 = sub_1133298(0xBu);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v18 = operator new(8uLL);
  }
  *a3 = v18;
  *unint64_t v18 = v17;
  uint64_t v19 = v18 + 1;
  a3[1] = v19;
  a3[2] = v19;
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_DB2FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DB3030(uint64_t a1, uint64_t a2)
{
  BOOL v4 = &off_2535C50;
  if (*(void *)(a1 + 152)) {
    BOOL v4 = *(uint64_t (****)())(a1 + 152);
  }
  unint64_t v5 = (unint64_t)v4[9] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v5, *(void *)(v5 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    uint64_t v15 = *(void *)(v5 + 16);
    *(_OWORD *)long long __dst = v6;
  }
  sub_4BDC0C(&__p, (uint64_t)__dst, 1uLL);
  uint64_t v7 = sub_DBA204((uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v13;
    uint64_t v10 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v13 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__dst[0]);
    if (v7) {
      return v7;
    }
    return sub_DB2B54(a1, a2);
  }
  if (!v7) {
    return sub_DB2B54(a1, a2);
  }
  return v7;
}

void sub_DB3188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_DB31B4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = &off_2539290;
  if (*((void *)result + 17)) {
    unint64_t v3 = (uint64_t (***)())*((void *)result + 17);
  }
  BOOL v4 = (uint64_t (***)())v3[24];
  if (!v4) {
    BOOL v4 = &off_253F750;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v5 = *((int *)v4 + 6);
  if (v5)
  {
    long long v6 = v4[4];
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 2)
      {
        int v11 = 3;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (v8 == 1)
      {
        int v11 = 1;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (!v8)
      {
        int v11 = 2;
        BOOL result = sub_745A4((uint64_t)&v12, &v11);
      }
      long long v6 = (uint64_t (**)())((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v13;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = operator new(8uLL);
    *(void *)a2 = v10;
    *uint64_t v10 = 0x200000001;
    BOOL result = v10 + 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = result;
  }
  return result;
}

void sub_DB32E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB330C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 41) & 1) != 0 && *(unsigned char *)(*(void *)(a1 + 328) + 247))
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_DWORD *)(a2 + 72) = 1065353216;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_DWORD *)(a2 + 112) = 1065353216;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_DWORD *)(a2 + 152) = 1065353216;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_DWORD *)(a2 + 192) = 1065353216;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_DWORD *)(a2 + 232) = 1065353216;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(a2 + 248) = 0;
    uint64_t v2 = *(void *)(a1 + 184);
    if (v2) {
      unint64_t v3 = (long long **)(v2 + 8);
    }
    else {
      unint64_t v3 = 0;
    }
    uint64_t v4 = *(int *)(a1 + 176);
    if (v4)
    {
      double v117 = &v3[v4];
      uint64_t v5 = &xmmword_25EA510;
      do
      {
        long long v6 = *v3;
        if (*((char *)*v3 + 23) < 0)
        {
          sub_4200(&v126, *(void **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v7 = *v6;
          v126.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v7;
        }
        int v8 = v5;
        std::string::size_type v9 = v126.__r_.__value_.__r.__words[0];
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &v126;
        }
        else {
          uint64_t v10 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        if (byte_25EA5B7 >= 0) {
          int v11 = &qword_25EA5A0;
        }
        else {
          int v11 = (uint64_t *)qword_25EA5A0;
        }
        if (byte_25EA5B7 >= 0) {
          int64_t v12 = byte_25EA5B7;
        }
        else {
          int64_t v12 = unk_25EA5A8;
        }
        if (!v12) {
          goto LABEL_89;
        }
        int64_t v116 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v126.__r_.__value_.__l.__size_;
        }
        unint64_t v14 = (char *)v10 + size;
        if (size >= v12)
        {
          int v24 = *(char *)v11;
          int64_t v25 = size;
          long long v26 = v10;
          do
          {
            int64_t v27 = v25 - v12;
            if (v27 == -1) {
              break;
            }
            unint64_t v28 = (char *)memchr(v26, v24, v27 + 1);
            if (!v28) {
              break;
            }
            unint64_t v29 = v28;
            if (!memcmp(v28, v11, v12))
            {
              if (v29 != v14 && v29 - (char *)v10 != -1) {
                goto LABEL_89;
              }
              break;
            }
            long long v26 = (std::string *)(v29 + 1);
            int64_t v25 = v14 - (v29 + 1);
          }
          while (v25 >= v12);
        }
        uint64_t v15 = byte_25EA5CF >= 0 ? &qword_25EA5B8 : (uint64_t *)qword_25EA5B8;
        int64_t v12 = byte_25EA5CF >= 0 ? byte_25EA5CF : unk_25EA5C0;
        if (v12)
        {
          if (size >= v12)
          {
            int v30 = *(char *)v15;
            int64_t v31 = size;
            double v32 = v10;
            do
            {
              int64_t v33 = v31 - v12;
              if (v33 == -1) {
                break;
              }
              uint64_t v34 = (char *)memchr(v32, v30, v33 + 1);
              if (!v34) {
                break;
              }
              uint64_t v35 = v34;
              if (!memcmp(v34, v15, v12))
              {
                if (v35 == v14 || v35 - (char *)v10 == -1) {
                  break;
                }
                goto LABEL_89;
              }
              double v32 = (std::string *)(v35 + 1);
              int64_t v31 = v14 - (v35 + 1);
            }
            while (v31 >= v12);
          }
          if (byte_25EA59F >= 0) {
            unsigned int v16 = &xmmword_25EA588;
          }
          else {
            unsigned int v16 = (long long *)xmmword_25EA588;
          }
          if (byte_25EA59F >= 0) {
            int64_t v17 = byte_25EA59F;
          }
          else {
            int64_t v17 = *((void *)&xmmword_25EA588 + 1);
          }
          if (v17)
          {
            if (size >= v17)
            {
              int v36 = *(char *)v16;
              int64_t v37 = size;
              unint64_t v38 = v10;
              do
              {
                int64_t v39 = v37 - v17;
                if (v39 == -1) {
                  break;
                }
                uint64_t v40 = (char *)memchr(v38, v36, v39 + 1);
                if (!v40) {
                  break;
                }
                uint64_t v41 = v40;
                if (!memcmp(v40, v16, v17))
                {
                  if (v41 == v14 || v41 - (char *)v10 == -1) {
                    break;
                  }
                  goto LABEL_100;
                }
                unint64_t v38 = (std::string *)(v41 + 1);
                int64_t v37 = v14 - (v41 + 1);
              }
              while (v37 >= v17);
            }
            if (byte_25EA5E7 >= 0) {
              unint64_t v18 = &qword_25EA5D0;
            }
            else {
              unint64_t v18 = (uint64_t *)qword_25EA5D0;
            }
            if (byte_25EA5E7 >= 0) {
              int64_t v19 = byte_25EA5E7;
            }
            else {
              int64_t v19 = unk_25EA5D8;
            }
            if (v19)
            {
              if (size >= v19)
              {
                int v42 = *(char *)v18;
                int64_t v43 = size;
                uint64_t v44 = v10;
                do
                {
                  int64_t v45 = v43 - v19;
                  if (v45 == -1) {
                    break;
                  }
                  uint64_t v46 = (char *)memchr(v44, v42, v45 + 1);
                  if (!v46) {
                    break;
                  }
                  unint64_t v47 = v46;
                  if (!memcmp(v46, v18, v19))
                  {
                    if (v47 == v14 || v47 - (char *)v10 == -1) {
                      break;
                    }
                    goto LABEL_136;
                  }
                  uint64_t v44 = (std::string *)(v47 + 1);
                  int64_t v43 = v14 - (v47 + 1);
                }
                while (v43 >= v19);
              }
              if (byte_25EA5FF >= 0) {
                uint64_t v20 = &qword_25EA5E8;
              }
              else {
                uint64_t v20 = (uint64_t *)qword_25EA5E8;
              }
              if (byte_25EA5FF >= 0) {
                int64_t v21 = byte_25EA5FF;
              }
              else {
                int64_t v21 = unk_25EA5F0;
              }
              if (v21)
              {
                if (size >= v21)
                {
                  int v48 = *(char *)v20;
                  uint64_t v49 = v10;
                  do
                  {
                    if (size - v21 == -1) {
                      break;
                    }
                    size_t v50 = (char *)memchr(v49, v48, size - v21 + 1);
                    if (!v50) {
                      break;
                    }
                    int v51 = v50;
                    if (!memcmp(v50, v20, v21))
                    {
                      if (v51 == v14 || v51 - (char *)v10 == -1) {
                        break;
                      }
                      goto LABEL_256;
                    }
                    uint64_t v49 = (std::string *)(v51 + 1);
                    int64_t size = v14 - (v51 + 1);
                  }
                  while (size >= v21);
                }
                if (byte_25EA527 < 0)
                {
                  uint64_t v5 = v8;
                  sub_4200(&v125, *(void **)v8, *((void *)v8 + 1));
                  int64_t v23 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                  std::string::size_type v9 = v126.__r_.__value_.__r.__words[0];
                  int64_t v22 = byte_25EA527;
                }
                else
                {
                  int64_t v22 = byte_25EA527;
                  uint64_t v5 = v8;
                  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = *v8;
                  v125.__r_.__value_.__r.__words[2] = *(void *)((char *)dword_10 + (void)v8);
                  int64_t v23 = v116;
                }
                if ((v23 & 0x80u) == 0) {
                  unint64_t v52 = &v126;
                }
                else {
                  unint64_t v52 = (std::string *)v9;
                }
                if ((v22 & 0x80u) == 0) {
                  unint64_t v53 = v5;
                }
                else {
                  unint64_t v53 = *(long long **)v5;
                }
                if ((v22 & 0x80u) == 0) {
                  int64_t v54 = v22;
                }
                else {
                  int64_t v54 = *((void *)v5 + 1);
                }
                if (v54)
                {
                  if ((v23 & 0x80u) == 0) {
                    int64_t v55 = v23;
                  }
                  else {
                    int64_t v55 = v126.__r_.__value_.__l.__size_;
                  }
                  int v56 = (char *)v52 + v55;
                  if (v55 >= v54)
                  {
                    int v61 = *(char *)v53;
                    int64_t v62 = v55;
                    uint64_t v63 = v52;
                    do
                    {
                      int64_t v64 = v62 - v54;
                      if (v64 == -1) {
                        break;
                      }
                      uint64_t v65 = (char *)memchr(v63, v61, v64 + 1);
                      if (!v65) {
                        break;
                      }
                      uint64_t v66 = v65;
                      if (!memcmp(v65, v53, v54))
                      {
                        if (v66 != v56 && v66 - (char *)v52 != -1) {
                          goto LABEL_139;
                        }
                        break;
                      }
                      uint64_t v63 = (std::string *)(v66 + 1);
                      int64_t v62 = v56 - (v66 + 1);
                    }
                    while (v62 >= v54);
                  }
                  uint64_t v57 = byte_25EA56F >= 0 ? &qword_25EA558 : (uint64_t *)qword_25EA558;
                  int64_t v58 = byte_25EA56F >= 0 ? byte_25EA56F : unk_25EA560;
                  if (v58)
                  {
                    if (v55 >= v58)
                    {
                      int v107 = *(char *)v57;
                      long long v108 = v52;
                      do
                      {
                        if (v55 - v58 == -1) {
                          break;
                        }
                        uint64_t v109 = (char *)memchr(v108, v107, v55 - v58 + 1);
                        if (!v109) {
                          break;
                        }
                        uint64_t v59 = v109;
                        if (!memcmp(v109, v57, v58)) {
                          goto LABEL_125;
                        }
                        long long v108 = (std::string *)(v59 + 1);
                        int64_t v55 = v56 - (v59 + 1);
                      }
                      while (v55 >= v58);
                    }
                    uint64_t v59 = v56;
LABEL_125:
                    uint64_t v60 = v59 == v56 ? -1 : v59 - (char *)v52;
                  }
                  else
                  {
                    uint64_t v60 = 0;
                  }
                  std::string::operator=(&v125, (const std::string *)&qword_25EA558);
                  if (v60 == -1)
                  {
                    int64_t v103 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v104 = &v126;
                    }
                    else {
                      uint64_t v104 = (std::string *)v126.__r_.__value_.__r.__words[0];
                    }
                    if (byte_25EA857 >= 0) {
                      uint64_t v105 = &qword_25EA840;
                    }
                    else {
                      uint64_t v105 = (uint64_t *)qword_25EA840;
                    }
                    if (byte_25EA857 >= 0) {
                      int64_t v106 = byte_25EA857;
                    }
                    else {
                      int64_t v106 = unk_25EA848;
                    }
                    if (v106)
                    {
                      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        int64_t v103 = v126.__r_.__value_.__l.__size_;
                      }
                      if (v103 >= v106)
                      {
                        long long v110 = (char *)v104 + v103;
                        int v111 = *(char *)v105;
                        int v112 = v104;
                        do
                        {
                          int64_t v113 = v103 - v106;
                          if (v113 == -1) {
                            break;
                          }
                          int v114 = (char *)memchr(v112, v111, v113 + 1);
                          if (!v114) {
                            break;
                          }
                          char v115 = v114;
                          if (!memcmp(v114, v105, v106))
                          {
                            if (v115 == v110 || v115 - (char *)v104 == -1) {
                              break;
                            }
                            goto LABEL_272;
                          }
                          int v112 = (std::string *)(v115 + 1);
                          int64_t v103 = v110 - (v115 + 1);
                        }
                        while (v103 >= v106);
                      }
                      if (sub_658840((uint64_t *)&v126, (char *)&qword_25EA618, 0) == -1)
                      {
                        if (sub_658840((uint64_t *)&v126, (char *)&qword_25EA630, 0) == -1)
                        {
                          if (sub_658840((uint64_t *)&v126, (char *)&xmmword_25EA678, 0) != -1) {
                            sub_62CFC4(a2);
                          }
                        }
                        else
                        {
                          sub_62CFB4(a2);
                        }
                      }
                      else
                      {
                        sub_62CFA4(a2);
                      }
                    }
                    else
                    {
LABEL_272:
                      std::string::erase(&v126, 0, v106);
                      sub_62CF8C(a2, (uint64_t)&v126);
                    }
                    goto LABEL_273;
                  }
                }
LABEL_139:
                if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v67 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v67 = v125.__r_.__value_.__l.__size_;
                }
                std::string::erase(&v126, 0, v67);
                if (byte_25EA587 >= 0) {
                  char v68 = &qword_25EA570;
                }
                else {
                  char v68 = (uint64_t *)qword_25EA570;
                }
                if (byte_25EA587 >= 0) {
                  int64_t v69 = byte_25EA587;
                }
                else {
                  int64_t v69 = unk_25EA578;
                }
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v70 = &v126;
                }
                else {
                  long long v70 = (std::string *)v126.__r_.__value_.__r.__words[0];
                }
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v71 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v71 = v126.__r_.__value_.__l.__size_;
                }
                if (v69)
                {
                  uint64_t v72 = (char *)v70 + v71;
                  if ((uint64_t)v71 >= v69)
                  {
                    int v91 = *(char *)v68;
                    int64_t v92 = v71;
                    uint64_t v93 = v70;
                    do
                    {
                      int64_t v94 = v92 - v69;
                      if (v94 == -1) {
                        break;
                      }
                      unsigned int v95 = (char *)memchr(v93, v91, v94 + 1);
                      if (!v95) {
                        break;
                      }
                      uint64_t v73 = v95;
                      if (!memcmp(v95, v68, v69)) {
                        goto LABEL_157;
                      }
                      uint64_t v93 = (std::string *)(v73 + 1);
                      int64_t v92 = v72 - (v73 + 1);
                    }
                    while (v92 >= v69);
                  }
                  uint64_t v73 = (char *)v70 + v71;
LABEL_157:
                  if (v73 == v72) {
                    unint64_t v74 = -1;
                  }
                  else {
                    unint64_t v74 = v73 - (char *)v70;
                  }
                  if (v71 >= v74) {
                    std::string::size_type v75 = v74;
                  }
                  else {
                    std::string::size_type v75 = v71;
                  }
                  if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                    sub_188D690();
                  }
                }
                else
                {
                  unint64_t v74 = 0;
                  std::string::size_type v75 = 0;
                }
                if (v75 >= 0x17)
                {
                  uint64_t v77 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v75 | 7) != 0x17) {
                    uint64_t v77 = v75 | 7;
                  }
                  uint64_t v78 = v77 + 1;
                  p_dst = (std::string *)operator new(v77 + 1);
                  __dst.__r_.__value_.__l.__size_ = v75;
                  __dst.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                }
                else
                {
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v75;
                  p_dst = &__dst;
                  if (!v75)
                  {
LABEL_173:
                    p_dst->__r_.__value_.__s.__data_[v75] = 0;
                    uint64_t v79 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v79 = &__dst;
                    }
                    std::string::size_type v80 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v80 = __dst.__r_.__value_.__l.__size_;
                    }
                    if (v80)
                    {
                      while ((v79->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
                           && (_DefaultRuneLocale.__runetype[v79->__r_.__value_.__s.__data_[0]] & 0x400) != 0)
                      {
                        uint64_t v79 = (std::string *)((char *)v79 + 1);
                        if (!--v80) {
                          goto LABEL_181;
                        }
                      }
                      if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v122);
                        char v84 = sub_188FC78(&v122, (uint64_t)"Got a tbr corrupted x coordinate: ", 34);
                        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v85 = &__dst;
                        }
                        else {
                          uint64_t v85 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                        }
                        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
                        }
                        long long v87 = sub_188FC78(v84, (uint64_t)v85, v86);
                        uint64_t v88 = sub_188FC78(v87, (uint64_t)" in the read displayed banner id of a dodgeball offering a route avoiding a tbr. Full suffix: ", 94);
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v89 = &v126;
                        }
                        else {
                          uint64_t v89 = (std::string *)v126.__r_.__value_.__r.__words[0];
                        }
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v90 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v90 = v126.__r_.__value_.__l.__size_;
                        }
                        sub_188FC78(v88, (uint64_t)v89, v90);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)&__str, 1u);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        sub_111ECAC((uint64_t)&v122);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_230:
                        }
                          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_273:
                        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v125.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_90;
                      }
                    }
                    else
                    {
LABEL_181:
                      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v81 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t v81 = v126.__r_.__value_.__l.__size_;
                      }
                      sub_DB4024(&v126, v74 + 1, v81, &__str);
                      if (sub_DB412C((unsigned __int8 *)&__str))
                      {
                        double v82 = std::stod(&__dst, 0);
                        LODWORD(v83) = std::stod(&__str, 0);
                        if (v83 >= 0xFFFFFFFE) {
                          uint64_t v83 = 4294967294;
                        }
                        else {
                          uint64_t v83 = v83;
                        }
                        unint64_t v122 = v82 | (unint64_t)(v83 << 32);
                        int v123 = 0x7FFFFFFF;
                        sub_62CF98(a2, (unsigned int *)&v122);
                      }
                      else if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v122);
                        uint64_t v96 = sub_188FC78(&v122, (uint64_t)"Got a tbr corrupted y coordinate: ", 34);
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          p_str = &__str;
                        }
                        else {
                          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                        }
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v98 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v98 = __str.__r_.__value_.__l.__size_;
                        }
                        uint64_t v99 = sub_188FC78(v96, (uint64_t)p_str, v98);
                        uint64_t v100 = sub_188FC78(v99, (uint64_t)" in the read displayed banner id of a dodgeball offering a route avoiding a tbr. Full suffix: ", 94);
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string v101 = &v126;
                        }
                        else {
                          std::string v101 = (std::string *)v126.__r_.__value_.__r.__words[0];
                        }
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v102 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v102 = v126.__r_.__value_.__l.__size_;
                        }
                        sub_188FC78(v100, (uint64_t)v101, v102);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)&__p, 1u);
                        if (v120 < 0) {
                          operator delete(__p);
                        }
                        sub_111ECAC((uint64_t)&v122);
                      }
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__str.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                          goto LABEL_230;
                        }
                        goto LABEL_273;
                      }
                    }
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                      goto LABEL_230;
                    }
                    goto LABEL_273;
                  }
                }
                memmove(p_dst, v70, v75);
                goto LABEL_173;
              }
LABEL_256:
              std::string::erase(&v126, 0, v21);
              uint64_t v5 = v8;
              sub_62CF80(a2, (uint64_t)&v126);
            }
            else
            {
LABEL_136:
              std::string::erase(&v126, 0, v19);
              uint64_t v5 = v8;
              sub_62CF74(a2, (uint64_t)&v126);
            }
          }
          else
          {
LABEL_100:
            std::string::erase(&v126, 0, v17);
            uint64_t v5 = v8;
            sub_62CF68(a2, (uint64_t)&v126);
          }
        }
        else
        {
LABEL_89:
          std::string::erase(&v126, 0, v12);
          uint64_t v5 = v8;
          sub_62CF60(a2, (uint64_t)&v126);
        }
LABEL_90:
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        ++v3;
      }
      while (v3 != v117);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_DWORD *)(a2 + 72) = 1065353216;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_DWORD *)(a2 + 112) = 1065353216;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_DWORD *)(a2 + 152) = 1065353216;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_DWORD *)(a2 + 192) = 1065353216;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_DWORD *)(a2 + 232) = 1065353216;
    *(unsigned char *)(a2 + 248) = 0;
    *(void *)(a2 + 240) = 0;
  }
}

void sub_DB3ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((*(char *)(v25 - 161) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v25 - 161) & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v25 - 137) < 0) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  operator delete(*(void **)(v25 - 184));
  if (*(char *)(v25 - 137) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 160));
    if (*(char *)(v25 - 105) < 0)
    {
LABEL_11:
      operator delete(*(void **)(v25 - 128));
      sub_4BCA98(a12);
      _Unwind_Resume(a1);
    }
LABEL_12:
    sub_4BCA98(a12);
    _Unwind_Resume(a1);
  }
LABEL_10:
  if (*(char *)(v25 - 105) < 0) {
    goto LABEL_11;
  }
  goto LABEL_12;
}

void *sub_DB4024@<X0>(void *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    unint64_t v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      size_t v8 = v7 - a2;
      if (v8 >= a3) {
        size_t v9 = a3;
      }
      else {
        size_t v9 = v8;
      }
      if (v9 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_7;
      }
LABEL_19:
      sub_188D690();
    }
LABEL_20:
    sub_5AD0();
  }
  unint64_t v13 = result[1];
  if (v13 < a2) {
    goto LABEL_20;
  }
  uint64_t v5 = (void *)*result;
  size_t v14 = v13 - a2;
  if (v14 >= a3) {
    size_t v9 = a3;
  }
  else {
    size_t v9 = v14;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_19;
  }
LABEL_7:
  if (v9 >= 0x17)
  {
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v10 = v9 | 7;
    }
    uint64_t v11 = v10 + 1;
    int64_t v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((unsigned char *)a4 + 23) = v9;
    if (!v9)
    {
      *(unsigned char *)a4 = 0;
      return result;
    }
  }
  BOOL result = memmove(a4, (char *)v5 + a2, v9);
  *((unsigned char *)a4 + v9) = 0;
  return result;
}

uint64_t sub_DB412C(unsigned __int8 *a1)
{
  int v1 = (char)a1[23];
  BOOL v2 = v1 < 0;
  unint64_t v3 = *(unsigned __int8 **)a1;
  if (v1 >= 0) {
    unint64_t v3 = a1;
  }
  uint64_t v4 = a1[23];
  if (v2) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  if (!v4) {
    return 1;
  }
  while (((char)*v3 & 0x80000000) == 0 && (_DefaultRuneLocale.__runetype[*v3] & 0x400) != 0)
  {
    ++v3;
    if (!--v4) {
      return 1;
    }
  }
  return 0;
}

void sub_DB4184(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 40) & 0x80) != 0 && *(unsigned char *)(*(void *)(a1 + 296) + 247))
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_DWORD *)(a2 + 72) = 1065353216;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_DWORD *)(a2 + 112) = 1065353216;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_DWORD *)(a2 + 152) = 1065353216;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_DWORD *)(a2 + 192) = 1065353216;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_DWORD *)(a2 + 232) = 1065353216;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(a2 + 248) = 0;
    uint64_t v2 = *(void *)(a1 + 136);
    if (v2) {
      unint64_t v3 = (long long **)(v2 + 8);
    }
    else {
      unint64_t v3 = 0;
    }
    uint64_t v4 = *(int *)(a1 + 128);
    if (v4)
    {
      double v117 = &v3[v4];
      uint64_t v5 = &xmmword_25EA510;
      do
      {
        long long v6 = *v3;
        if (*((char *)*v3 + 23) < 0)
        {
          sub_4200(&v126, *(void **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v7 = *v6;
          v126.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v7;
        }
        size_t v8 = v5;
        std::string::size_type v9 = v126.__r_.__value_.__r.__words[0];
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &v126;
        }
        else {
          uint64_t v10 = (std::string *)v126.__r_.__value_.__r.__words[0];
        }
        if (byte_25EA5B7 >= 0) {
          uint64_t v11 = &qword_25EA5A0;
        }
        else {
          uint64_t v11 = (uint64_t *)qword_25EA5A0;
        }
        if (byte_25EA5B7 >= 0) {
          int64_t v12 = byte_25EA5B7;
        }
        else {
          int64_t v12 = unk_25EA5A8;
        }
        if (!v12) {
          goto LABEL_89;
        }
        int64_t v116 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v126.__r_.__value_.__l.__size_;
        }
        size_t v14 = (char *)v10 + size;
        if (size >= v12)
        {
          int v24 = *(char *)v11;
          int64_t v25 = size;
          long long v26 = v10;
          do
          {
            int64_t v27 = v25 - v12;
            if (v27 == -1) {
              break;
            }
            unint64_t v28 = (char *)memchr(v26, v24, v27 + 1);
            if (!v28) {
              break;
            }
            unint64_t v29 = v28;
            if (!memcmp(v28, v11, v12))
            {
              if (v29 != v14 && v29 - (char *)v10 != -1) {
                goto LABEL_89;
              }
              break;
            }
            long long v26 = (std::string *)(v29 + 1);
            int64_t v25 = v14 - (v29 + 1);
          }
          while (v25 >= v12);
        }
        uint64_t v15 = byte_25EA5CF >= 0 ? &qword_25EA5B8 : (uint64_t *)qword_25EA5B8;
        int64_t v12 = byte_25EA5CF >= 0 ? byte_25EA5CF : unk_25EA5C0;
        if (v12)
        {
          if (size >= v12)
          {
            int v30 = *(char *)v15;
            int64_t v31 = size;
            double v32 = v10;
            do
            {
              int64_t v33 = v31 - v12;
              if (v33 == -1) {
                break;
              }
              uint64_t v34 = (char *)memchr(v32, v30, v33 + 1);
              if (!v34) {
                break;
              }
              uint64_t v35 = v34;
              if (!memcmp(v34, v15, v12))
              {
                if (v35 == v14 || v35 - (char *)v10 == -1) {
                  break;
                }
                goto LABEL_89;
              }
              double v32 = (std::string *)(v35 + 1);
              int64_t v31 = v14 - (v35 + 1);
            }
            while (v31 >= v12);
          }
          if (byte_25EA59F >= 0) {
            unsigned int v16 = &xmmword_25EA588;
          }
          else {
            unsigned int v16 = (long long *)xmmword_25EA588;
          }
          if (byte_25EA59F >= 0) {
            int64_t v17 = byte_25EA59F;
          }
          else {
            int64_t v17 = *((void *)&xmmword_25EA588 + 1);
          }
          if (v17)
          {
            if (size >= v17)
            {
              int v36 = *(char *)v16;
              int64_t v37 = size;
              unint64_t v38 = v10;
              do
              {
                int64_t v39 = v37 - v17;
                if (v39 == -1) {
                  break;
                }
                uint64_t v40 = (char *)memchr(v38, v36, v39 + 1);
                if (!v40) {
                  break;
                }
                uint64_t v41 = v40;
                if (!memcmp(v40, v16, v17))
                {
                  if (v41 == v14 || v41 - (char *)v10 == -1) {
                    break;
                  }
                  goto LABEL_100;
                }
                unint64_t v38 = (std::string *)(v41 + 1);
                int64_t v37 = v14 - (v41 + 1);
              }
              while (v37 >= v17);
            }
            if (byte_25EA5E7 >= 0) {
              unint64_t v18 = &qword_25EA5D0;
            }
            else {
              unint64_t v18 = (uint64_t *)qword_25EA5D0;
            }
            if (byte_25EA5E7 >= 0) {
              int64_t v19 = byte_25EA5E7;
            }
            else {
              int64_t v19 = unk_25EA5D8;
            }
            if (v19)
            {
              if (size >= v19)
              {
                int v42 = *(char *)v18;
                int64_t v43 = size;
                uint64_t v44 = v10;
                do
                {
                  int64_t v45 = v43 - v19;
                  if (v45 == -1) {
                    break;
                  }
                  uint64_t v46 = (char *)memchr(v44, v42, v45 + 1);
                  if (!v46) {
                    break;
                  }
                  unint64_t v47 = v46;
                  if (!memcmp(v46, v18, v19))
                  {
                    if (v47 == v14 || v47 - (char *)v10 == -1) {
                      break;
                    }
                    goto LABEL_136;
                  }
                  uint64_t v44 = (std::string *)(v47 + 1);
                  int64_t v43 = v14 - (v47 + 1);
                }
                while (v43 >= v19);
              }
              if (byte_25EA5FF >= 0) {
                uint64_t v20 = &qword_25EA5E8;
              }
              else {
                uint64_t v20 = (uint64_t *)qword_25EA5E8;
              }
              if (byte_25EA5FF >= 0) {
                int64_t v21 = byte_25EA5FF;
              }
              else {
                int64_t v21 = unk_25EA5F0;
              }
              if (v21)
              {
                if (size >= v21)
                {
                  int v48 = *(char *)v20;
                  uint64_t v49 = v10;
                  do
                  {
                    if (size - v21 == -1) {
                      break;
                    }
                    size_t v50 = (char *)memchr(v49, v48, size - v21 + 1);
                    if (!v50) {
                      break;
                    }
                    int v51 = v50;
                    if (!memcmp(v50, v20, v21))
                    {
                      if (v51 == v14 || v51 - (char *)v10 == -1) {
                        break;
                      }
                      goto LABEL_256;
                    }
                    uint64_t v49 = (std::string *)(v51 + 1);
                    int64_t size = v14 - (v51 + 1);
                  }
                  while (size >= v21);
                }
                if (byte_25EA527 < 0)
                {
                  uint64_t v5 = v8;
                  sub_4200(&v125, *(void **)v8, *((void *)v8 + 1));
                  int64_t v23 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                  std::string::size_type v9 = v126.__r_.__value_.__r.__words[0];
                  int64_t v22 = byte_25EA527;
                }
                else
                {
                  int64_t v22 = byte_25EA527;
                  uint64_t v5 = v8;
                  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = *v8;
                  v125.__r_.__value_.__r.__words[2] = *(void *)((char *)dword_10 + (void)v8);
                  int64_t v23 = v116;
                }
                if ((v23 & 0x80u) == 0) {
                  unint64_t v52 = &v126;
                }
                else {
                  unint64_t v52 = (std::string *)v9;
                }
                if ((v22 & 0x80u) == 0) {
                  unint64_t v53 = v5;
                }
                else {
                  unint64_t v53 = *(long long **)v5;
                }
                if ((v22 & 0x80u) == 0) {
                  int64_t v54 = v22;
                }
                else {
                  int64_t v54 = *((void *)v5 + 1);
                }
                if (v54)
                {
                  if ((v23 & 0x80u) == 0) {
                    int64_t v55 = v23;
                  }
                  else {
                    int64_t v55 = v126.__r_.__value_.__l.__size_;
                  }
                  int v56 = (char *)v52 + v55;
                  if (v55 >= v54)
                  {
                    int v61 = *(char *)v53;
                    int64_t v62 = v55;
                    uint64_t v63 = v52;
                    do
                    {
                      int64_t v64 = v62 - v54;
                      if (v64 == -1) {
                        break;
                      }
                      uint64_t v65 = (char *)memchr(v63, v61, v64 + 1);
                      if (!v65) {
                        break;
                      }
                      uint64_t v66 = v65;
                      if (!memcmp(v65, v53, v54))
                      {
                        if (v66 != v56 && v66 - (char *)v52 != -1) {
                          goto LABEL_139;
                        }
                        break;
                      }
                      uint64_t v63 = (std::string *)(v66 + 1);
                      int64_t v62 = v56 - (v66 + 1);
                    }
                    while (v62 >= v54);
                  }
                  uint64_t v57 = byte_25EA56F >= 0 ? &qword_25EA558 : (uint64_t *)qword_25EA558;
                  int64_t v58 = byte_25EA56F >= 0 ? byte_25EA56F : unk_25EA560;
                  if (v58)
                  {
                    if (v55 >= v58)
                    {
                      int v107 = *(char *)v57;
                      long long v108 = v52;
                      do
                      {
                        if (v55 - v58 == -1) {
                          break;
                        }
                        uint64_t v109 = (char *)memchr(v108, v107, v55 - v58 + 1);
                        if (!v109) {
                          break;
                        }
                        uint64_t v59 = v109;
                        if (!memcmp(v109, v57, v58)) {
                          goto LABEL_125;
                        }
                        long long v108 = (std::string *)(v59 + 1);
                        int64_t v55 = v56 - (v59 + 1);
                      }
                      while (v55 >= v58);
                    }
                    uint64_t v59 = v56;
LABEL_125:
                    uint64_t v60 = v59 == v56 ? -1 : v59 - (char *)v52;
                  }
                  else
                  {
                    uint64_t v60 = 0;
                  }
                  std::string::operator=(&v125, (const std::string *)&qword_25EA558);
                  if (v60 == -1)
                  {
                    int64_t v103 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v104 = &v126;
                    }
                    else {
                      uint64_t v104 = (std::string *)v126.__r_.__value_.__r.__words[0];
                    }
                    if (byte_25EA857 >= 0) {
                      uint64_t v105 = &qword_25EA840;
                    }
                    else {
                      uint64_t v105 = (uint64_t *)qword_25EA840;
                    }
                    if (byte_25EA857 >= 0) {
                      int64_t v106 = byte_25EA857;
                    }
                    else {
                      int64_t v106 = unk_25EA848;
                    }
                    if (v106)
                    {
                      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        int64_t v103 = v126.__r_.__value_.__l.__size_;
                      }
                      if (v103 >= v106)
                      {
                        long long v110 = (char *)v104 + v103;
                        int v111 = *(char *)v105;
                        int v112 = v104;
                        do
                        {
                          int64_t v113 = v103 - v106;
                          if (v113 == -1) {
                            break;
                          }
                          int v114 = (char *)memchr(v112, v111, v113 + 1);
                          if (!v114) {
                            break;
                          }
                          char v115 = v114;
                          if (!memcmp(v114, v105, v106))
                          {
                            if (v115 == v110 || v115 - (char *)v104 == -1) {
                              break;
                            }
                            goto LABEL_272;
                          }
                          int v112 = (std::string *)(v115 + 1);
                          int64_t v103 = v110 - (v115 + 1);
                        }
                        while (v103 >= v106);
                      }
                      if (sub_658840((uint64_t *)&v126, (char *)&qword_25EA618, 0) == -1)
                      {
                        if (sub_658840((uint64_t *)&v126, (char *)&qword_25EA630, 0) == -1)
                        {
                          if (sub_658840((uint64_t *)&v126, (char *)&xmmword_25EA678, 0) != -1) {
                            sub_62CFC4(a2);
                          }
                        }
                        else
                        {
                          sub_62CFB4(a2);
                        }
                      }
                      else
                      {
                        sub_62CFA4(a2);
                      }
                    }
                    else
                    {
LABEL_272:
                      std::string::erase(&v126, 0, v106);
                      sub_62CF8C(a2, (uint64_t)&v126);
                    }
                    goto LABEL_273;
                  }
                }
LABEL_139:
                if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v67 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v67 = v125.__r_.__value_.__l.__size_;
                }
                std::string::erase(&v126, 0, v67);
                if (byte_25EA587 >= 0) {
                  char v68 = &qword_25EA570;
                }
                else {
                  char v68 = (uint64_t *)qword_25EA570;
                }
                if (byte_25EA587 >= 0) {
                  int64_t v69 = byte_25EA587;
                }
                else {
                  int64_t v69 = unk_25EA578;
                }
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v70 = &v126;
                }
                else {
                  long long v70 = (std::string *)v126.__r_.__value_.__r.__words[0];
                }
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v71 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v71 = v126.__r_.__value_.__l.__size_;
                }
                if (v69)
                {
                  uint64_t v72 = (char *)v70 + v71;
                  if ((uint64_t)v71 >= v69)
                  {
                    int v91 = *(char *)v68;
                    int64_t v92 = v71;
                    uint64_t v93 = v70;
                    do
                    {
                      int64_t v94 = v92 - v69;
                      if (v94 == -1) {
                        break;
                      }
                      unsigned int v95 = (char *)memchr(v93, v91, v94 + 1);
                      if (!v95) {
                        break;
                      }
                      uint64_t v73 = v95;
                      if (!memcmp(v95, v68, v69)) {
                        goto LABEL_157;
                      }
                      uint64_t v93 = (std::string *)(v73 + 1);
                      int64_t v92 = v72 - (v73 + 1);
                    }
                    while (v92 >= v69);
                  }
                  uint64_t v73 = (char *)v70 + v71;
LABEL_157:
                  if (v73 == v72) {
                    unint64_t v74 = -1;
                  }
                  else {
                    unint64_t v74 = v73 - (char *)v70;
                  }
                  if (v71 >= v74) {
                    std::string::size_type v75 = v74;
                  }
                  else {
                    std::string::size_type v75 = v71;
                  }
                  if (v75 >= 0x7FFFFFFFFFFFFFF8) {
                    sub_188D690();
                  }
                }
                else
                {
                  unint64_t v74 = 0;
                  std::string::size_type v75 = 0;
                }
                if (v75 >= 0x17)
                {
                  uint64_t v77 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v75 | 7) != 0x17) {
                    uint64_t v77 = v75 | 7;
                  }
                  uint64_t v78 = v77 + 1;
                  p_dst = (std::string *)operator new(v77 + 1);
                  __dst.__r_.__value_.__l.__size_ = v75;
                  __dst.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                }
                else
                {
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v75;
                  p_dst = &__dst;
                  if (!v75)
                  {
LABEL_173:
                    p_dst->__r_.__value_.__s.__data_[v75] = 0;
                    uint64_t v79 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v79 = &__dst;
                    }
                    std::string::size_type v80 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v80 = __dst.__r_.__value_.__l.__size_;
                    }
                    if (v80)
                    {
                      while ((v79->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
                           && (_DefaultRuneLocale.__runetype[v79->__r_.__value_.__s.__data_[0]] & 0x400) != 0)
                      {
                        uint64_t v79 = (std::string *)((char *)v79 + 1);
                        if (!--v80) {
                          goto LABEL_181;
                        }
                      }
                      if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v122);
                        char v84 = sub_188FC78(&v122, (uint64_t)"Got a tbr corrupted x coordinate: ", 34);
                        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v85 = &__dst;
                        }
                        else {
                          uint64_t v85 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                        }
                        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
                        }
                        long long v87 = sub_188FC78(v84, (uint64_t)v85, v86);
                        uint64_t v88 = sub_188FC78(v87, (uint64_t)" in the read displayed banner id of a dodgeball offering a route avoiding a tbr. Full suffix: ", 94);
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v89 = &v126;
                        }
                        else {
                          uint64_t v89 = (std::string *)v126.__r_.__value_.__r.__words[0];
                        }
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v90 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v90 = v126.__r_.__value_.__l.__size_;
                        }
                        sub_188FC78(v88, (uint64_t)v89, v90);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)&__str, 1u);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        sub_111ECAC((uint64_t)&v122);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_230:
                        }
                          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_273:
                        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v125.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_90;
                      }
                    }
                    else
                    {
LABEL_181:
                      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v81 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        size_t v81 = v126.__r_.__value_.__l.__size_;
                      }
                      sub_DB4024(&v126, v74 + 1, v81, &__str);
                      if (sub_DB412C((unsigned __int8 *)&__str))
                      {
                        double v82 = std::stod(&__dst, 0);
                        LODWORD(v83) = std::stod(&__str, 0);
                        if (v83 >= 0xFFFFFFFE) {
                          uint64_t v83 = 4294967294;
                        }
                        else {
                          uint64_t v83 = v83;
                        }
                        unint64_t v122 = v82 | (unint64_t)(v83 << 32);
                        int v123 = 0x7FFFFFFF;
                        sub_62CF98(a2, (unsigned int *)&v122);
                      }
                      else if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v122);
                        uint64_t v96 = sub_188FC78(&v122, (uint64_t)"Got a tbr corrupted y coordinate: ", 34);
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          p_str = &__str;
                        }
                        else {
                          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                        }
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v98 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v98 = __str.__r_.__value_.__l.__size_;
                        }
                        uint64_t v99 = sub_188FC78(v96, (uint64_t)p_str, v98);
                        uint64_t v100 = sub_188FC78(v99, (uint64_t)" in the read displayed banner id of a dodgeball offering a route avoiding a tbr. Full suffix: ", 94);
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string v101 = &v126;
                        }
                        else {
                          std::string v101 = (std::string *)v126.__r_.__value_.__r.__words[0];
                        }
                        if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v102 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v102 = v126.__r_.__value_.__l.__size_;
                        }
                        sub_188FC78(v100, (uint64_t)v101, v102);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)&__p, 1u);
                        if (v120 < 0) {
                          operator delete(__p);
                        }
                        sub_111ECAC((uint64_t)&v122);
                      }
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__str.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                          goto LABEL_230;
                        }
                        goto LABEL_273;
                      }
                    }
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                      goto LABEL_230;
                    }
                    goto LABEL_273;
                  }
                }
                memmove(p_dst, v70, v75);
                goto LABEL_173;
              }
LABEL_256:
              std::string::erase(&v126, 0, v21);
              uint64_t v5 = v8;
              sub_62CF80(a2, (uint64_t)&v126);
            }
            else
            {
LABEL_136:
              std::string::erase(&v126, 0, v19);
              uint64_t v5 = v8;
              sub_62CF74(a2, (uint64_t)&v126);
            }
          }
          else
          {
LABEL_100:
            std::string::erase(&v126, 0, v17);
            uint64_t v5 = v8;
            sub_62CF68(a2, (uint64_t)&v126);
          }
        }
        else
        {
LABEL_89:
          std::string::erase(&v126, 0, v12);
          uint64_t v5 = v8;
          sub_62CF60(a2, (uint64_t)&v126);
        }
LABEL_90:
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        ++v3;
      }
      while (v3 != v117);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_DWORD *)(a2 + 72) = 1065353216;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_DWORD *)(a2 + 112) = 1065353216;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_DWORD *)(a2 + 152) = 1065353216;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_DWORD *)(a2 + 192) = 1065353216;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_DWORD *)(a2 + 232) = 1065353216;
    *(unsigned char *)(a2 + 248) = 0;
    *(void *)(a2 + 240) = 0;
  }
}

void sub_DB4D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((*(char *)(v25 - 161) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v25 - 161) & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v25 - 137) < 0) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  operator delete(*(void **)(v25 - 184));
  if (*(char *)(v25 - 137) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v25 - 160));
    if (*(char *)(v25 - 105) < 0)
    {
LABEL_11:
      operator delete(*(void **)(v25 - 128));
      sub_4BCA98(a12);
      _Unwind_Resume(a1);
    }
LABEL_12:
    sub_4BCA98(a12);
    _Unwind_Resume(a1);
  }
LABEL_10:
  if (*(char *)(v25 - 105) < 0) {
    goto LABEL_11;
  }
  goto LABEL_12;
}

void *sub_DB4E9C@<X0>(uint64_t a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = &off_2535C50;
  if (*(void *)(a1 + 304)) {
    unint64_t v3 = *(uint64_t (****)())(a1 + 304);
  }
  uint64_t v4 = *((int *)v3 + 10);
  if (v4)
  {
    uint64_t v5 = 0;
    long long v6 = 0;
    long long v7 = 0;
    size_t v8 = v3[6];
    std::string::size_type v9 = (uint64_t (**)())((char *)v8 + 4 * v4);
    unint64_t v38 = v9;
    while (1)
    {
      while (1)
      {
        int v10 = (*(_DWORD *)v8 - 1) >= 4 ? 3 : *(_DWORD *)v8;
        if (v7 >= (char *)v6) {
          break;
        }
        *(_DWORD *)long long v7 = v10;
        v7 += 4;
        a2[1] = (int *)v7;
        size_t v8 = (uint64_t (**)())((char *)v8 + 4);
        if (v8 == v9) {
          goto LABEL_38;
        }
      }
      uint64_t v11 = (v7 - v5) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        sub_2E00();
      }
      if (((char *)v6 - v5) >> 1 > v12) {
        unint64_t v12 = ((char *)v6 - v5) >> 1;
      }
      if ((unint64_t)((char *)v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 62) {
          sub_188D718();
        }
        size_t v14 = operator new(4 * v13);
        uint64_t v15 = (int *)&v14[4 * v11];
        *uint64_t v15 = v10;
        uint64_t v16 = (uint64_t)(v15 + 1);
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      else
      {
        size_t v14 = 0;
        uint64_t v15 = (int *)(4 * v11);
        *(_DWORD *)(4 * v11) = v10;
        uint64_t v16 = 4 * v11 + 4;
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      unint64_t v17 = v7 - 4 - v5;
      if (v17 >= 0xBC)
      {
        if (&v14[v7 - v5 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v7 - v5 - 4])
        {
          unint64_t v18 = v7;
        }
        else if (&v7[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          unint64_t v18 = v7;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v18 = &v7[-v21];
          uint64_t v15 = (int *)((char *)v15 - v21);
          int64_t v22 = &v14[4 * v11 - 16];
          int64_t v23 = v7 - 16;
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *int64_t v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v18 = v7;
        }
      }
      else
      {
        unint64_t v18 = v7;
      }
      do
      {
        int v19 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--uint64_t v15 = v19;
      }
      while (v18 != v5);
LABEL_24:
      long long v6 = (int *)&v14[4 * v13];
      *a2 = v15;
      a2[1] = (int *)v16;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = (char *)v15;
      long long v7 = (char *)v16;
      std::string::size_type v9 = v38;
      a2[1] = (int *)v16;
      size_t v8 = (uint64_t (**)())((char *)v8 + 4);
      if (v8 == v38)
      {
LABEL_38:
        long long v26 = *a2;
        goto LABEL_40;
      }
    }
  }
  long long v7 = 0;
  long long v26 = 0;
LABEL_40:
  unint64_t v27 = 126 - 2 * __clz((v7 - (char *)v26) >> 2);
  if (v7 == (char *)v26) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v27;
  }
  BOOL result = sub_DCB270(v26, v7, (uint64_t)&v39, v28, 1);
  int v30 = a2[1];
  if (*a2 != v30)
  {
    int64_t v31 = *a2 + 1;
    while (v31 != v30)
    {
      int v32 = *(v31 - 1);
      int v33 = *v31++;
      if (v32 == v33)
      {
        uint64_t v34 = v31 - 2;
        while (v31 != v30)
        {
          int v35 = v32;
          int v32 = *v31;
          if (v35 != *v31)
          {
            v34[1] = v32;
            ++v34;
          }
          ++v31;
        }
        int v36 = v34 + 1;
        int64_t v37 = (char *)v30 - (char *)(v34 + 1);
        if (v30 != v34 + 1)
        {
          if (v30 != (int *)((char *)v36 + v37)) {
            BOOL result = memmove(v34 + 1, (char *)v36 + v37, 0);
          }
          a2[1] = v36;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_DB51A8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_DB51CC@<X0>(uint64_t a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v3 = &off_2535C50;
  if (*(void *)(a1 + 288)) {
    unint64_t v3 = *(uint64_t (****)())(a1 + 288);
  }
  uint64_t v4 = *((int *)v3 + 10);
  if (v4)
  {
    uint64_t v5 = 0;
    long long v6 = 0;
    long long v7 = 0;
    size_t v8 = v3[6];
    std::string::size_type v9 = (uint64_t (**)())((char *)v8 + 4 * v4);
    unint64_t v38 = v9;
    while (1)
    {
      while (1)
      {
        int v10 = (*(_DWORD *)v8 - 1) >= 4 ? 3 : *(_DWORD *)v8;
        if (v7 >= (char *)v6) {
          break;
        }
        *(_DWORD *)long long v7 = v10;
        v7 += 4;
        a2[1] = (int *)v7;
        size_t v8 = (uint64_t (**)())((char *)v8 + 4);
        if (v8 == v9) {
          goto LABEL_38;
        }
      }
      uint64_t v11 = (v7 - v5) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        sub_2E00();
      }
      if (((char *)v6 - v5) >> 1 > v12) {
        unint64_t v12 = ((char *)v6 - v5) >> 1;
      }
      if ((unint64_t)((char *)v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 62) {
          sub_188D718();
        }
        size_t v14 = operator new(4 * v13);
        uint64_t v15 = (int *)&v14[4 * v11];
        *uint64_t v15 = v10;
        uint64_t v16 = (uint64_t)(v15 + 1);
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      else
      {
        size_t v14 = 0;
        uint64_t v15 = (int *)(4 * v11);
        *(_DWORD *)(4 * v11) = v10;
        uint64_t v16 = 4 * v11 + 4;
        if (v7 == v5) {
          goto LABEL_24;
        }
      }
      unint64_t v17 = v7 - 4 - v5;
      if (v17 >= 0xBC)
      {
        if (&v14[v7 - v5 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v7 - v5 - 4])
        {
          unint64_t v18 = v7;
        }
        else if (&v7[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
        {
          unint64_t v18 = v7;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v18 = &v7[-v21];
          uint64_t v15 = (int *)((char *)v15 - v21);
          int64_t v22 = &v14[4 * v11 - 16];
          int64_t v23 = v7 - 16;
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *int64_t v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v18 = v7;
        }
      }
      else
      {
        unint64_t v18 = v7;
      }
      do
      {
        int v19 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--uint64_t v15 = v19;
      }
      while (v18 != v5);
LABEL_24:
      long long v6 = (int *)&v14[4 * v13];
      *a2 = v15;
      a2[1] = (int *)v16;
      a2[2] = v6;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v5 = (char *)v15;
      long long v7 = (char *)v16;
      std::string::size_type v9 = v38;
      a2[1] = (int *)v16;
      size_t v8 = (uint64_t (**)())((char *)v8 + 4);
      if (v8 == v38)
      {
LABEL_38:
        long long v26 = *a2;
        goto LABEL_40;
      }
    }
  }
  long long v7 = 0;
  long long v26 = 0;
LABEL_40:
  unint64_t v27 = 126 - 2 * __clz((v7 - (char *)v26) >> 2);
  if (v7 == (char *)v26) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v27;
  }
  BOOL result = sub_DCB270(v26, v7, (uint64_t)&v39, v28, 1);
  int v30 = a2[1];
  if (*a2 != v30)
  {
    int64_t v31 = *a2 + 1;
    while (v31 != v30)
    {
      int v32 = *(v31 - 1);
      int v33 = *v31++;
      if (v32 == v33)
      {
        uint64_t v34 = v31 - 2;
        while (v31 != v30)
        {
          int v35 = v32;
          int v32 = *v31;
          if (v35 != *v31)
          {
            v34[1] = v32;
            ++v34;
          }
          ++v31;
        }
        int v36 = v34 + 1;
        int64_t v37 = (char *)v30 - (char *)(v34 + 1);
        if (v30 != v34 + 1)
        {
          if (v30 != (int *)((char *)v36 + v37)) {
            BOOL result = memmove(v34 + 1, (char *)v36 + v37, 0);
          }
          a2[1] = v36;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_DB54D8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB54FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5B9B3C(a3);
  uint64_t v221 = (void *)a2;
  long long v6 = (long long *)sub_377D04(a2);
  char v250 = 1;
  sub_29E004((char *)&v243, v6);
  sub_DB1848(a1, (uint64_t)&v243, (uint64_t)__dst);
  *(_DWORD *)(a3 + 968) = *(_DWORD *)__dst;
  long long v7 = *(void **)(a3 + 976);
  uint64_t v222 = a1;
  if (v7)
  {
    *(void *)(a3 + 984) = v7;
    operator delete(v7);
    *(void *)(a3 + 976) = 0;
    *(void *)(a3 + 984) = 0;
    *(void *)(a3 + 992) = 0;
  }
  *(_OWORD *)(a3 + 976) = *(_OWORD *)&__dst[8];
  *(void *)(a3 + 992) = *(void *)&__dst[24];
  memset(&__dst[8], 0, 24);
  *(_DWORD *)(a3 + 1000) = *(_DWORD *)&__dst[32];
  size_t v8 = *(void **)(a3 + 1008);
  if (v8)
  {
    *(void *)(a3 + 1016) = v8;
    operator delete(v8);
    *(void *)(a3 + 1008) = 0;
    *(void *)(a3 + 1016) = 0;
    *(void *)(a3 + 1024) = 0;
  }
  std::string::size_type v9 = 0;
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)&__dst[40];
  *(void *)(a3 + 1024) = v229[0];
  *(void *)&__dst[48] = 0;
  v229[0] = 0;
  *(void *)&__dst[40] = 0;
  int v10 = (void **)(a3 + 1032);
  if (*(char *)(a3 + 1055) < 0)
  {
    operator delete(*v10);
    std::string::size_type v9 = *(void **)&__dst[40];
  }
  *(_OWORD *)int v10 = *(_OWORD *)&v229[1];
  *(void *)(a3 + 1048) = v229[3];
  HIBYTE(v229[3]) = 0;
  LOBYTE(v229[1]) = 0;
  *(unsigned char *)(a3 + 1056) = v230;
  if (v9)
  {
    *(void *)&__dst[48] = v9;
    operator delete(v9);
  }
  if (*(void *)&__dst[8])
  {
    *(void *)&__dst[16] = *(void *)&__dst[8];
    operator delete(*(void **)&__dst[8]);
  }
  if (v250)
  {
    if (v249 < 0)
    {
      operator delete(v248);
      if ((v247 & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v245) & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_19:
        operator delete(v243);
        int v11 = *(_DWORD *)(a1 + 40);
        if ((v11 & 0x10000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else if ((v247 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v246);
    if (SHIBYTE(v245) < 0) {
      goto LABEL_19;
    }
  }
LABEL_15:
  int v11 = *(_DWORD *)(a1 + 40);
  if ((v11 & 0x10000) == 0) {
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v12 = *(void *)(a1 + 392);
  if (*(unsigned char *)(v12 + 16))
  {
    int v14 = *(_DWORD *)(v12 + 48);
    goto LABEL_31;
  }
LABEL_21:
  if ((v11 & 1) == 0)
  {
    v243 = 0;
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(a1 + 264) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    if (*(void *)(v13 + 8) >= 4uLL)
    {
      unint64_t v13 = *(void *)v13;
LABEL_30:
      int v14 = *(_DWORD *)v13;
      goto LABEL_31;
    }
  }
  else if (*(unsigned __int8 *)(v13 + 23) >= 4u)
  {
    goto LABEL_30;
  }
  int v14 = 0;
LABEL_31:
  LODWORD(v243) = v14;
  BYTE4(v243) = 1;
LABEL_32:
  sub_DC1540(a1, (int *)&v243, (uint64_t)__dst);
  sub_CA0FF4(a3, (uint64_t)__dst);
  sub_4BCC2C((uint64_t)__dst);
  sub_DB330C(a1, (uint64_t)__dst);
  sub_CB13A4(a3 + 712, (uint64_t *)__dst);
  sub_CB13A4(a3 + 752, (uint64_t *)&__dst[40]);
  sub_CB13A4(a3 + 792, &v229[3]);
  sub_CB13A4(a3 + 832, (uint64_t *)&v232);
  sub_CB13A4(a3 + 872, v235);
  if (*(void *)(a3 + 936))
  {
    uint64_t v15 = *(void **)(a3 + 928);
    if (v15)
    {
      do
      {
        uint64_t v16 = (void *)*v15;
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
    *(void *)(a3 + 928) = 0;
    uint64_t v17 = *(void *)(a3 + 920);
    if (v17)
    {
      for (uint64_t i = 0; i != v17; ++i)
        *(void *)(*(void *)(a3 + 912) + 8 * i) = 0;
    }
    *(void *)(a3 + 936) = 0;
  }
  uint64_t v19 = v236;
  uint64_t v236 = 0;
  uint64_t v20 = *(void **)(a3 + 912);
  *(void *)(a3 + 912) = v19;
  if (v20) {
    operator delete(v20);
  }
  unint64_t v21 = v237;
  uint64_t v22 = v238;
  *(void *)(a3 + 920) = v237;
  unint64_t v237 = 0;
  uint64_t v23 = v239;
  *(void *)(a3 + 936) = v239;
  *(_DWORD *)(a3 + 944) = v240;
  *(void *)(a3 + 928) = v22;
  if (v23)
  {
    unint64_t v24 = *(void *)(v22 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v24 >= v21) {
        v24 %= v21;
      }
    }
    else
    {
      v24 &= v21 - 1;
    }
    *(void *)(*(void *)(a3 + 912) + 8 * v24) = a3 + 928;
    uint64_t v238 = 0;
    uint64_t v239 = 0;
  }
  *(void *)(a3 + 952) = v241;
  *(unsigned char *)(a3 + 960) = v242;
  sub_4BCA98((uint64_t)__dst);
  long long v25 = 0;
  unint64_t v26 = *(unsigned int *)(a1 + 104);
  long long v244 = 0;
  unint64_t v245 = 0;
  v243 = 0;
  if ((int)v26 >= 2)
  {
    sub_DBF670(&v243, v26);
    uint64_t v27 = *(void *)(a1 + 112);
    if (v27) {
      uint64_t v28 = (uint64_t *)(v27 + 8);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(int *)(a1 + 104);
    if (!v29)
    {
      long long v25 = v244;
      uint64_t v224 = v243;
      if (v243 != v244) {
        goto LABEL_58;
      }
      goto LABEL_85;
    }
    long long v25 = v244;
    uint64_t v30 = 8 * v29;
    do
    {
      while (1)
      {
        uint64_t v31 = *v28;
        if ((unint64_t)v25 >= v245) {
          break;
        }
        sub_13E9AE4(v25, v31);
        v25 += 88;
        long long v244 = v25;
        ++v28;
        v30 -= 8;
        if (!v30) {
          goto LABEL_57;
        }
      }
      long long v25 = sub_DC87F4((uint64_t *)&v243, v31);
      long long v244 = v25;
      ++v28;
      v30 -= 8;
    }
    while (v30);
  }
LABEL_57:
  uint64_t v224 = v243;
  if (v243 != v25)
  {
LABEL_58:
    int v32 = v224;
    while (1)
    {
      if (*((_DWORD *)v32 + 20) == 2)
      {
        int v33 = (uint64_t (***)())*((void *)v32 + 3);
        if (!v33) {
          int v33 = &off_25399D8;
        }
        int v34 = (*((unsigned __int8 *)v33 + 40) >> 3) & 1;
        unint64_t v35 = *(void *)(a3 + 1160);
        uint64_t v36 = *(void *)(a3 + 1168);
        if (v35 != v36 << 6)
        {
LABEL_64:
          *(void *)(a3 + 1160) = v35 + 1;
          uint64_t v37 = *(void *)(a3 + 1152);
          unint64_t v38 = v35 >> 6;
          uint64_t v39 = 1 << v35;
          if (v34) {
            goto LABEL_65;
          }
          goto LABEL_75;
        }
      }
      else
      {
        int v34 = 0;
        unint64_t v35 = *(void *)(a3 + 1160);
        uint64_t v36 = *(void *)(a3 + 1168);
        if (v35 != v36 << 6) {
          goto LABEL_64;
        }
      }
      if ((uint64_t)(v35 + 1) < 0) {
        sub_2E00();
      }
      unint64_t v43 = v36 << 7;
      if (v43 <= (v35 & 0xFFFFFFFFFFFFFFC0) + 64) {
        unint64_t v43 = (v35 & 0xFFFFFFFFFFFFFFC0) + 64;
      }
      if (v35 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v44 = v43;
      }
      else {
        unint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_3D110(a3 + 1152, v44);
      unint64_t v45 = *(void *)(a3 + 1160);
      *(void *)(a3 + 1160) = v45 + 1;
      uint64_t v37 = *(void *)(a3 + 1152);
      unint64_t v38 = v45 >> 6;
      uint64_t v39 = 1 << v45;
      if (v34)
      {
LABEL_65:
        *(void *)(v37 + 8 * v38) |= v39;
        int v40 = v32[65];
        unint64_t v41 = *(void *)(a3 + 1136);
        uint64_t v42 = *(void *)(a3 + 1144);
        if (v41 == v42 << 6) {
          goto LABEL_76;
        }
        goto LABEL_83;
      }
LABEL_75:
      *(void *)(v37 + 8 * v38) &= ~v39;
      int v40 = v32[65];
      unint64_t v41 = *(void *)(a3 + 1136);
      uint64_t v42 = *(void *)(a3 + 1144);
      if (v41 == v42 << 6)
      {
LABEL_76:
        if ((uint64_t)(v41 + 1) < 0) {
          sub_2E00();
        }
        unint64_t v46 = v42 << 7;
        if (v46 <= (v41 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v46 = (v41 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v41 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v47 = v46;
        }
        else {
          unint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110(a3 + 1128, v47);
        unint64_t v41 = *(void *)(a3 + 1136);
      }
LABEL_83:
      *(void *)(a3 + 1136) = v41 + 1;
      uint64_t v48 = *(void *)(a3 + 1128);
      unint64_t v49 = v41 >> 6;
      uint64_t v50 = 1 << v41;
      if (v40)
      {
        *(void *)(v48 + 8 * v49) |= v50;
        v32 += 88;
        if (v32 == v25) {
          break;
        }
      }
      else
      {
        *(void *)(v48 + 8 * v49) &= ~v50;
        v32 += 88;
        if (v32 == v25) {
          break;
        }
      }
    }
  }
LABEL_85:
  uint64_t v51 = v222;
  if (*(void *)(v222 + 304)) {
    unint64_t v52 = *(uint64_t (****)())(v222 + 304);
  }
  else {
    unint64_t v52 = &off_2535C50;
  }
  *(unsigned char *)(a3 + 1176) = sub_7BB78(*((_DWORD *)v52 + 32));
  *(_DWORD *)(a3 + 1096) = 0;
  unint64_t v53 = v243;
  if (v243 == v244)
  {
    if (v224 != v25)
    {
LABEL_95:
      if (*(void *)(v222 + 328)) {
        int64_t v55 = *(uint64_t (****)())(v222 + 328);
      }
      else {
        int64_t v55 = &off_2539290;
      }
      uint64_t v56 = *((int *)v55 + 18);
      if (v56)
      {
        int v57 = 0;
        int64_t v58 = (unsigned int *)v55[10];
        uint64_t v59 = 4 * v56;
        do
        {
          v57 |= 1 << sub_7BB78(*v58++);
          v59 -= 4;
        }
        while (v59);
      }
      else
      {
        LOBYTE(v57) = 0;
      }
      uint64_t v51 = v222;
      uint64_t v60 = *(uint64_t (****)())(v222 + 304);
      if (!v60) {
        uint64_t v60 = &off_2535C50;
      }
      switch(*((_DWORD *)v60 + 32))
      {
        case 0:
          if (v57) {
            goto LABEL_114;
          }
          break;
        case 1:
          if ((v57 & 2) != 0) {
            goto LABEL_114;
          }
          break;
        case 2:
          if ((v57 & 4) == 0) {
            break;
          }
          goto LABEL_114;
        case 3:
          if ((v57 & 8) != 0) {
            goto LABEL_114;
          }
          break;
        default:
          goto LABEL_114;
      }
    }
LABEL_111:
    if (((_BYTE)v52[2] & 0x20) != 0)
    {
      *(_DWORD *)std::string __dst = *((_DWORD *)v52[14] + 6);
      sub_3B79D0((void **)(a3 + 1104), __dst);
    }
    goto LABEL_119;
  }
  do
  {
    int v54 = *((_DWORD *)v53 + 4);
    if ((v54 & 8) != 0) {
      break;
    }
    v53 += 88;
  }
  while (v53 != v244);
  if (v224 == v25) {
    goto LABEL_111;
  }
  if ((v54 & 8) == 0) {
    goto LABEL_95;
  }
LABEL_114:
  int64_t v62 = v243;
  for (unint64_t j = v244; v62 != j; v62 += 88)
  {
    sub_13E9AE4(v226, v62);
    if ((v226[16] & 8) != 0) {
      int v63 = *(_DWORD *)(v227 + 24);
    }
    else {
      int v63 = 0;
    }
    *(_DWORD *)std::string __dst = v63;
    sub_3B79D0((void **)(a3 + 1104), __dst);
    sub_1473CF4(v226);
  }
LABEL_119:
  int v64 = *((_DWORD *)v52 + 4);
  if ((v64 & 0x10000) != 0) {
    *(unsigned char *)(a3 + 1064) = *((unsigned char *)v52 + 143);
  }
  if ((v64 & 0x100000) != 0) {
    *(unsigned char *)(a3 + 1414) = *((unsigned char *)v52 + 153);
  }
  *(unsigned char *)(a3 + 1480) = *((unsigned char *)v52 + 144);
  sub_DB4E9C(v51, (int **)__dst);
  uint64_t v65 = *(void **)(a3 + 1072);
  if (v65)
  {
    *(void *)(a3 + 1080) = v65;
    operator delete(v65);
    *(void *)(a3 + 1072) = 0;
    *(void *)(a3 + 1080) = 0;
    *(void *)(a3 + 1088) = 0;
  }
  *(_OWORD *)(a3 + 1072) = *(_OWORD *)__dst;
  *(void *)(a3 + 1088) = *(void *)&__dst[16];
  uint64_t v66 = *(uint64_t (****)())(v51 + 328);
  if (!v66) {
    uint64_t v66 = &off_2539290;
  }
  int v67 = *((_DWORD *)v66 + 68);
  char v68 = (uint64_t (***)())v66[21];
  if (!v68) {
    char v68 = &off_2539230;
  }
  __int16 v69 = *((unsigned __int8 *)v68 + 25);
  int v70 = *((unsigned __int8 *)v68 + 26);
  if (v67 >= 255) {
    int v67 = 255;
  }
  int v71 = v67 & ~(v67 >> 31);
  *(_WORD *)(a3 + 1177) = v71 | (v69 << 8);
  *(unsigned char *)(a3 + 1179) = (v71 | (v70 << 16)) >> 16;
  *(void *)(a3 + 1216) = sub_DB6BEC(v51);
  *(_WORD *)(a3 + 1224) = v72;
  *(unsigned char *)(a3 + 1226) = v73;
  unint64_t v74 = *(uint64_t (****)())(v51 + 304);
  if (v74) {
    std::string::size_type v75 = *(uint64_t (****)())(v51 + 304);
  }
  else {
    std::string::size_type v75 = &off_2535C50;
  }
  unsigned int v76 = (uint64_t (***)())v75[11];
  if (!v76) {
    unsigned int v76 = &off_2536408;
  }
  int v77 = *((_DWORD *)v76 + 4);
  uint64_t v78 = (int *)v76 + 11;
  uint64_t v79 = (int *)v75 + 41;
  if ((v77 & 8) != 0) {
    uint64_t v79 = v78;
  }
  int v80 = *v79;
  if (v80 == 3) {
    char v81 = 2;
  }
  else {
    char v81 = v80 == 2;
  }
  *(unsigned char *)(a3 + 1227) = v81;
  if (*(void *)(v51 + 328)) {
    double v82 = *(uint64_t (****)())(v51 + 328);
  }
  else {
    double v82 = &off_2539290;
  }
  *(unsigned char *)(a3 + 1405) = *((unsigned char *)v82 + 223);
  *(unsigned char *)(a3 + 1406) = *((unsigned char *)v82 + 226);
  *(unsigned char *)(a3 + 1407) = *((unsigned char *)v82 + 232);
  *(unsigned char *)(a3 + 1408) = *((unsigned char *)v82 + 230);
  uint64_t v83 = *((int *)v82 + 18);
  int v223 = v82;
  int v84 = 0;
  if (v83)
  {
    uint64_t v85 = (unsigned int *)v82[10];
    uint64_t v86 = 4 * v83;
    do
    {
      v84 |= 1 << sub_7BB78(*v85++);
      v86 -= 4;
    }
    while (v86);
    uint64_t v51 = v222;
    unint64_t v74 = *(uint64_t (****)())(v222 + 304);
  }
  if (!v74) {
    unint64_t v74 = &off_2535C50;
  }
  int v87 = *((_DWORD *)v74 + 32);
  switch(v87)
  {
    case 0:
      if (v84) {
        goto LABEL_156;
      }
      goto LABEL_154;
    case 1:
      if ((v84 & 2) != 0) {
        goto LABEL_156;
      }
      goto LABEL_154;
    case 2:
      if ((v84 & 4) == 0) {
        goto LABEL_154;
      }
      goto LABEL_156;
    case 3:
      if ((v84 & 8) != 0) {
        goto LABEL_156;
      }
LABEL_154:
      BOOL v88 = 0;
      break;
    default:
LABEL_156:
      BOOL v88 = *(_DWORD *)(v51 + 104) > 2;
      break;
  }
  *(unsigned char *)(a3 + 1409) = v88;
  if (v87) {
    BOOL v89 = 0;
  }
  else {
    BOOL v89 = (*(_DWORD *)(v51 + 456) & 0xFFFFFFFE) == 2;
  }
  char v90 = v89;
  *(unsigned char *)(a3 + 1410) = v90;
  *(unsigned char *)(a3 + 1522) = sub_DB7034(v51);
  int v91 = *(uint64_t (****)())(v51 + 392);
  if (!v91) {
    int v91 = &off_25351C0;
  }
  int v92 = *((_DWORD *)v91 + 13);
  if (v92 == 2) {
    char v93 = 2;
  }
  else {
    char v93 = v92 == 1;
  }
  *(unsigned char *)(a3 + 1523) = v93;
  if (*(void *)(v51 + 328)) {
    int64_t v94 = *(uint64_t (****)())(v51 + 328);
  }
  else {
    int64_t v94 = &off_2539290;
  }
  uint64_t v95 = *((int *)v94 + 18);
  if (v95)
  {
    int v96 = 0;
    uint64_t v97 = (unsigned int *)v94[10];
    uint64_t v98 = 4 * v95;
    do
    {
      v96 |= 1 << sub_7BB78(*v97++);
      v98 -= 4;
    }
    while (v98);
  }
  else
  {
    LOBYTE(v96) = 0;
  }
  uint64_t v99 = v222;
  uint64_t v100 = v223;
  std::string v101 = *(uint64_t (****)())(v222 + 304);
  if (!v101) {
    std::string v101 = &off_2535C50;
  }
  switch(*((_DWORD *)v101 + 32))
  {
    case 0:
      if (v96) {
        goto LABEL_190;
      }
      goto LABEL_184;
    case 1:
      if ((v96 & 2) != 0) {
        goto LABEL_190;
      }
      goto LABEL_184;
    case 2:
      if ((v96 & 4) == 0) {
        goto LABEL_184;
      }
      goto LABEL_190;
    case 3:
      if ((v96 & 8) != 0) {
        goto LABEL_190;
      }
LABEL_184:
      *(unsigned char *)(a3 + 1411) = 0;
      if (*(void *)(v222 + 328)) {
        std::string::size_type v102 = *(uint64_t (****)())(v222 + 328);
      }
      else {
        std::string::size_type v102 = &off_2539290;
      }
      uint64_t v103 = *((int *)v102 + 18);
      if (!v103) {
        goto LABEL_197;
      }
      goto LABEL_194;
    default:
LABEL_190:
      *(unsigned char *)(a3 + 1411) = 1;
      if (*(void *)(v222 + 328)) {
        std::string::size_type v102 = *(uint64_t (****)())(v222 + 328);
      }
      else {
        std::string::size_type v102 = &off_2539290;
      }
      uint64_t v103 = *((int *)v102 + 18);
      if (v103)
      {
LABEL_194:
        int v104 = 0;
        uint64_t v105 = (unsigned int *)v102[10];
        uint64_t v106 = 4 * v103;
        do
        {
          v104 |= 1 << sub_7BB78(*v105++);
          v106 -= 4;
        }
        while (v106);
        LOBYTE(v103) = v104 & 1;
        uint64_t v99 = v222;
        uint64_t v100 = v223;
      }
LABEL_197:
      *(unsigned char *)(a3 + 1412) = v103;
      *(unsigned char *)(a3 + 1444) = *((unsigned char *)v100 + 231);
      char v107 = *(unsigned char *)(a3 + 1414);
      if (v107) {
        char v107 = *((unsigned char *)v100 + 221) != 0;
      }
      *(unsigned char *)(a3 + 1414) = v107;
      *(unsigned char *)(a3 + 1427) = *((unsigned char *)v100 + 219);
      long long v108 = *(uint64_t (****)())(v99 + 352);
      if (!v108) {
        long long v108 = &off_2539C48;
      }
      *(unsigned char *)(a3 + 1424) = *((_DWORD *)v108 + 6) > 0;
      uint64_t v109 = *(uint64_t (****)())(v99 + 328);
      if (!v109) {
        uint64_t v109 = &off_2539290;
      }
      int v110 = *((_DWORD *)v109 + 69);
      if (v110 == 2) {
        char v111 = 2;
      }
      else {
        char v111 = 1;
      }
      if (v110 == 3) {
        char v112 = 3;
      }
      else {
        char v112 = v111;
      }
      *(unsigned char *)(a3 + 1425) = v112;
      *(unsigned char *)(a3 + 1413) = *((unsigned char *)v100 + 251);
      *(_DWORD *)(a3 + 1420) = *((_DWORD *)v100 + 67);
      int64_t v113 = &off_2539270;
      if (v100[26]) {
        int64_t v113 = (uint64_t (***)())v100[26];
      }
      *(unsigned char *)(a3 + 1440) = *((unsigned char *)v113 + 24);
      *(unsigned char *)(a3 + 1184) = sub_49F618(*((_DWORD *)v109 + 64));
      int v114 = (uint64_t (***)())v52[12];
      if (!v114) {
        int v114 = &off_2536528;
      }
      char v115 = (uint64_t (***)())v114[8];
      if (!v115) {
        char v115 = &off_2536508;
      }
      unsigned int v116 = *((_DWORD *)v115 + 6);
      if (v116 >= 4) {
        LOBYTE(v116) = 0;
      }
      *(unsigned char *)(a3 + 1185) = v116;
      *(unsigned char *)(a3 + 1186) = *((_DWORD *)v115 + 7) == 1;
      uint64_t v117 = sub_377D04((uint64_t)v221);
      if (*(char *)(v117 + 47) < 0)
      {
        sub_4200(__dst, *(void **)(v117 + 24), *(void *)(v117 + 32));
      }
      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)(v117 + 24);
        *(void *)&__dst[16] = *(void *)(v117 + 40);
      }
      double v118 = (void **)(a3 + 1192);
      if (*(char *)(a3 + 1215) < 0) {
        operator delete(*v118);
      }
      *(_OWORD *)double v118 = *(_OWORD *)__dst;
      *(void *)(a3 + 1208) = *(void *)&__dst[16];
      char v119 = (__int32 *)v223[8];
      size_t v120 = *((int *)v223 + 14);
      long long v121 = &v119[v120];
      unint64_t v122 = wmemchr(v119, 1, v120);
      if (v122) {
        int v123 = v122;
      }
      else {
        int v123 = v121;
      }
      long long v124 = (__int32 *)v223[8];
      size_t v125 = *((int *)v223 + 14);
      std::string v126 = &v124[v125];
      BOOL v127 = v123 != v126;
      uint64_t v128 = wmemchr(v124, 3, v125);
      if (v128) {
        int v129 = v128;
      }
      else {
        int v129 = v126;
      }
      __n128 v130 = (__int32 *)v223[8];
      size_t v131 = *((int *)v223 + 14);
      uint64_t v132 = &v130[v131];
      int v133 = v129 != v132;
      char v134 = wmemchr(v130, 5, v131);
      if (v134) {
        long long v135 = v134;
      }
      else {
        long long v135 = v132;
      }
      uint64_t v136 = (__int32 *)v223[8];
      size_t v137 = *((int *)v223 + 14);
      uint64_t v138 = &v136[v137];
      int v139 = v135 != v138;
      uint64_t v140 = wmemchr(v136, 6, v137);
      if (v140) {
        int v141 = v140;
      }
      else {
        int v141 = v138;
      }
      *(_DWORD *)(a3 + 1428) = v127 | (v133 << 8) | (v139 << 16) | ((v141 != (__int32 *)((char *)v223[8]
                                                                                       + 4 * *((int *)v223 + 14))) << 24);
      uint64_t v142 = *(uint64_t (****)())(v222 + 304);
      if (!v142) {
        uint64_t v142 = &off_2535C50;
      }
      long long v143 = (uint64_t (***)())v142[12];
      if (!v143) {
        long long v143 = &off_2536528;
      }
      *(_DWORD *)(a3 + 1432) = (*((_DWORD *)v143 + 19) - 1) < 2;
      if (*(void *)(v222 + 328)) {
        long long v144 = *(uint64_t (****)())(v222 + 328);
      }
      else {
        long long v144 = &off_2539290;
      }
      long long v145 = (__int32 *)v144[8];
      size_t v146 = *((int *)v144 + 14);
      uint64_t v147 = &v145[v146];
      uint64_t v148 = wmemchr(v145, 4, v146);
      if (v148) {
        uint64_t v149 = v148;
      }
      else {
        uint64_t v149 = v147;
      }
      char v150 = (__int32 *)v144[8];
      uint64_t v151 = *((int *)v144 + 14);
      if (v149 != &v150[v151])
      {
        int v152 = 2;
        uint64_t v153 = v222;
        uint64_t v154 = v223;
        goto LABEL_263;
      }
      int v155 = *(uint64_t (****)())(v222 + 304);
      if (!v155) {
        int v155 = &off_2535C50;
      }
      long long v156 = (uint64_t (***)())v155[12];
      if (!v156) {
        long long v156 = &off_2536528;
      }
      uint64_t v153 = v222;
      if ((*((_DWORD *)v156 + 19) - 3) > 0xFFFFFFFD)
      {
        int v152 = 1;
        uint64_t v154 = v223;
        goto LABEL_263;
      }
      if (v151)
      {
        uint64_t v154 = v223;
        do
        {
          if ((*v150 & 0xFFFFFFFD) == 1) {
            goto LABEL_262;
          }
          ++v150;
        }
        while (v150 != v149);
        char v150 = v149;
      }
      else
      {
        uint64_t v154 = v223;
      }
LABEL_262:
      int v152 = v150 != v149;
LABEL_263:
      *(_DWORD *)(a3 + 1436) = v152;
      *(unsigned char *)(a3 + 1442) = *((unsigned char *)v154 + 225);
      long long v157 = *(uint64_t (****)())(v153 + 344);
      if (!v157) {
        long long v157 = &off_2536218;
      }
      int v158 = *((_DWORD *)v157 + 10);
      *(unsigned char *)(a3 + 1445) = v158 == 5;
      *(unsigned char *)(a3 + 1446) = v158 == 9;
      *(unsigned char *)(a3 + 1447) = v158 == 7;
      *(unsigned char *)(a3 + 1448) = sub_DB72D0(v153);
      *(unsigned char *)(a3 + 1449) = sub_DB7384(v153);
      char v159 = *((unsigned char *)v223 + 228);
      if (v159) {
        char v159 = *((unsigned char *)v223 + 232) != 0;
      }
      *(unsigned char *)(a3 + 1443) = v159;
      *(_WORD *)(a3 + 1415) = *((_WORD *)v52 + 77);
      *(_DWORD *)(a3 + 1450) = *(_DWORD *)((char *)v223 + 234);
      char v160 = &off_2535CF8;
      if (*(void *)(v153 + 368)) {
        char v160 = *(uint64_t (****)())(v153 + 368);
      }
      *(unsigned char *)(a3 + 1481) = *((unsigned char *)v160 + 29);
      uint64_t v161 = *((int *)v52 + 14);
      if (!v161) {
        goto LABEL_300;
      }
      long long v162 = v52[8];
      long long v163 = (uint64_t (**)())((char *)v162 + 4 * v161);
      v225 = (void **)(a3 + 1456);
      long long v164 = *(char **)(a3 + 1464);
      break;
  }
  do
  {
    BOOL v166 = *(_DWORD *)v162 == 1;
    unint64_t v167 = *(void *)(a3 + 1472);
    if ((unint64_t)v164 < v167)
    {
      *(_DWORD *)long long v164 = v166;
      uint64_t v165 = (uint64_t)(v164 + 4);
      goto LABEL_272;
    }
    long long v168 = (char *)*v225;
    uint64_t v169 = v164 - (unsigned char *)*v225;
    uint64_t v170 = v169 >> 2;
    unint64_t v171 = (v169 >> 2) + 1;
    if (v171 >> 62) {
      sub_2E00();
    }
    uint64_t v172 = v167 - (void)v168;
    if (v172 >> 1 > v171) {
      unint64_t v171 = v172 >> 1;
    }
    if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v173 = v171;
    }
    if (v173)
    {
      if (v173 >> 62) {
        sub_188D718();
      }
      uint64_t v174 = operator new(4 * v173);
      uint64_t v175 = (BOOL *)&v174[4 * v170];
      BOOL *v175 = v166;
      uint64_t v165 = (uint64_t)(v175 + 1);
      if (v164 == v168) {
        goto LABEL_288;
      }
    }
    else
    {
      uint64_t v174 = 0;
      uint64_t v175 = (BOOL *)(4 * v170);
      *(_DWORD *)(4 * v170) = v166;
      uint64_t v165 = 4 * v170 + 4;
      if (v164 == v168) {
        goto LABEL_288;
      }
    }
    unint64_t v176 = v164 - 4 - v168;
    if (v176 < 0xBC)
    {
      uint64_t v177 = v164;
      goto LABEL_287;
    }
    if (&v174[v169 - 4 - (v176 & 0xFFFFFFFFFFFFFFFCLL)] > &v174[v169 - 4])
    {
      uint64_t v177 = v164;
      do
      {
LABEL_287:
        int v178 = *((_DWORD *)v177 - 1);
        v177 -= 4;
        *--uint64_t v175 = v178;
      }
      while (v177 != v168);
      goto LABEL_288;
    }
    if (&v164[-(v176 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v164 - 4)
    {
      uint64_t v177 = v164;
      goto LABEL_287;
    }
    if ((unint64_t)(v164 - v174 - v169) < 0x20)
    {
      uint64_t v177 = v164;
      goto LABEL_287;
    }
    uint64_t v179 = (v176 >> 2) + 1;
    uint64_t v180 = 4 * (v179 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v177 = &v164[-v180];
    uint64_t v175 = (BOOL *)((char *)v175 - v180);
    long long v181 = &v174[4 * v170 - 16];
    int v182 = v164 - 16;
    uint64_t v183 = v179 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v184 = *(_OWORD *)v182;
      *(v181 - 1) = *((_OWORD *)v182 - 1);
      _OWORD *v181 = v184;
      v181 -= 2;
      v182 -= 32;
      v183 -= 8;
    }
    while (v183);
    if (v179 != (v179 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_287;
    }
LABEL_288:
    *(void *)(a3 + 1456) = v175;
    *(void *)(a3 + 1464) = v165;
    *(void *)(a3 + 1472) = &v174[4 * v173];
    if (v168) {
      operator delete(v168);
    }
LABEL_272:
    *(void *)(a3 + 1464) = v165;
    long long v162 = (uint64_t (**)())((char *)v162 + 4);
    long long v164 = (char *)v165;
  }
  while (v162 != v163);
LABEL_300:
  std::string::operator=((std::string *)(a3 + 1488), (const std::string *)((unint64_t)v223[18] & 0xFFFFFFFFFFFFFFFELL));
  *(unsigned char *)(a3 + 1512) = *((unsigned char *)v223 + 240);
  *(_WORD *)(a3 + 1513) = *(_WORD *)((char *)v223 + 241);
  *(_WORD *)(a3 + 1515) = *((_WORD *)v223 + 123);
  *(unsigned char *)(a3 + 1517) = *((unsigned char *)v223 + 254);
  *(_WORD *)(a3 + 1518) = *((_WORD *)v223 + 126);
  *(unsigned char *)(a3 + 1521) = *((unsigned char *)v223 + 248);
  long long v185 = (uint64_t (***)())v223[25];
  if (!v185) {
    long long v185 = &off_2539250;
  }
  *(unsigned char *)(a3 + 1441) = *((unsigned char *)v185 + 25);
  *(unsigned char *)(a3 + 1520) = *((unsigned char *)v223 + 250);
  if (*(void *)(v222 + 304)) {
    v186 = *(uint64_t (****)())(v222 + 304);
  }
  else {
    v186 = &off_2535C50;
  }
  if (v186[10]) {
    uint64_t v187 = (uint64_t (***)())v186[10];
  }
  else {
    uint64_t v187 = &off_2535C20;
  }
  unint64_t v188 = sub_DBB218((uint64_t)v187);
  if (sub_DBB340(v222))
  {
    if (v186[11]) {
      uint64_t v189 = (uint64_t (***)())v186[11];
    }
    else {
      uint64_t v189 = &off_2536408;
    }
    sub_DBB3F0(SHIDWORD(v188), (uint64_t)v189, (uint64_t)__dst);
  }
  else
  {
    memset(&__dst[12], 0, 44);
    long long v230 = 0u;
    *(_DWORD *)std::string __dst = 0x7FFFFFFF;
    *(void *)&__dst[4] = 0x7FFFFFFF7FFFFFFFLL;
    memset(v229, 0, sizeof(v229));
    LODWORD(v230) = 1065353216;
    long long v231 = 0u;
    long long v232 = 0u;
    uint64_t v233 = 1065353216;
    long long v234 = xmmword_20E8670;
  }
  *(void *)(a3 + 1232) = *(void *)__dst;
  *(void *)(a3 + 1237) = *(void *)&__dst[5];
  int v190 = *(void **)(a3 + 1248);
  if (v190)
  {
    *(void *)(a3 + 1256) = v190;
    operator delete(v190);
    *(void *)(a3 + 1248) = 0;
    *(void *)(a3 + 1256) = 0;
    *(void *)(a3 + 1264) = 0;
  }
  *(_OWORD *)(a3 + 1248) = *(_OWORD *)&__dst[16];
  uint64_t v191 = *(void *)&__dst[40];
  *(void *)(a3 + 1264) = *(void *)&__dst[32];
  memset(&__dst[16], 0, 24);
  *(void *)(a3 + 1272) = v191;
  *(_DWORD *)(a3 + 1280) = *(_DWORD *)&__dst[48];
  sub_62BDC(a3 + 1288, v229);
  *(_DWORD *)(a3 + 1328) = DWORD2(v230);
  sub_62BDC(a3 + 1336, (uint64_t *)&v231);
  *(_OWORD *)(a3 + 1376) = v234;
  sub_402628(__dst);
  *(unsigned char *)(a3 + 1404) = *(unsigned char *)(sub_1883F34(v222 + 16, dword_254EAD8, qword_254EAE0) + 66);
  *(unsigned char *)(a3 + 1524) = 1;
  *(unsigned char *)(a3 + 1482) = *((unsigned char *)v223 + 249);
  uint64_t v192 = sub_37B3A8((uint64_t)v221);
  uint64_t v193 = *(void *)v192;
  *(_DWORD *)(a3 + 1400) = *(_DWORD *)(v192 + 8);
  *(void *)(a3 + 1392) = v193;
  char v194 = *(uint64_t (****)())(v222 + 304);
  if (!v194) {
    char v194 = &off_2535C50;
  }
  int v195 = *((_DWORD *)v194 + 32);
  int v196 = *(_DWORD *)(v222 + 40);
  if (v195 == 2)
  {
    if ((v196 & 0x10000) != 0
      && (uint64_t v197 = *(void *)(v222 + 392), (*(unsigned char *)(v197 + 16) & 8) != 0)
      && (*(_DWORD *)(v197 + 60) - 1) < 2)
    {
      *(unsigned char *)(a3 + 1525) = 1;
      if ((v196 & 0x10000) == 0) {
        goto LABEL_352;
      }
LABEL_336:
      uint64_t v203 = *(void *)(v222 + 392);
      if (*(int *)(v203 + 32) >= 1)
      {
        uint64_t v204 = *(void *)(*(void *)(v203 + 40) + 8);
        if ((*(unsigned char *)(v204 + 40) & 0x20) != 0)
        {
          uint64_t v205 = (unsigned int *)nullsub_1(*(void *)(v204 + 88));
          if (v205 != (unsigned int *)-1)
          {
            uint64_t v206 = (uint64_t *)sub_377754(v221);
            *(void *)std::string __dst = -1;
            *(_DWORD *)&__dst[8] = 0x7FFFFFFF;
            uint64_t v207 = sub_4461D4((uint64_t)(v206 + 2), 1u, 0);
            char v208 = &v207[-*(int *)v207];
            if (*(unsigned __int16 *)v208 >= 5u)
            {
              uint64_t v209 = *((unsigned __int16 *)v208 + 2);
              if (v209)
              {
                long long v210 = &v207[v209 + *(unsigned int *)&v207[v209]];
                long long v211 = &v210[-*(int *)v210];
                if (*(unsigned __int16 *)v211 >= 5u)
                {
                  uint64_t v212 = *((unsigned __int16 *)v211 + 2);
                  if (v212)
                  {
                    if (v210[v212]) {
                      uint64_t v205 = (unsigned int *)nullsub_1(v205);
                    }
                  }
                }
              }
            }
            unint64_t v213 = sub_445B68(v206, v205, (uint64_t)__dst);
            unint64_t v215 = 0xFFFFFFFF00000000;
            if (v213 != -1)
            {
              BOOL v216 = v214 || HIDWORD(v213) == 0;
              unint64_t v217 = __ROR8__(v213, 32);
              if (!v216) {
                unint64_t v215 = v217;
              }
            }
            *(void *)(a3 + 1528) = v215;
          }
        }
      }
    }
    else
    {
      int v198 = sub_DB7034(v222);
      BOOL v201 = v198 == 8 || v198 == 4 || v198 == 2;
      int v202 = *(_DWORD *)(v222 + 40);
      *(unsigned char *)(a3 + 1525) = v201;
      if ((v202 & 0x10000) != 0) {
        goto LABEL_336;
      }
    }
  }
  else
  {
    *(unsigned char *)(a3 + 1525) = 0;
    if ((v196 & 0x10000) != 0) {
      goto LABEL_336;
    }
  }
LABEL_352:
  uint64_t v218 = v243;
  if (v243)
  {
    uint64_t v219 = (uint64_t)v244;
    int v220 = v243;
    if (v244 != v243)
    {
      do
        uint64_t v219 = sub_1473CF4(v219 - 88);
      while ((char *)v219 != v218);
      int v220 = v243;
    }
    long long v244 = v218;
    operator delete(v220);
  }
}

void sub_DB6910(_Unwind_Exception *a1)
{
  sub_DB75EC((void **)(v2 - 184));
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DB6A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 & 0x10000) != 0 && (uint64_t v3 = *(void *)(a1 + 392), (*(unsigned char *)(v3 + 16)))
  {
    int v6 = *(_DWORD *)(v3 + 48);
  }
  else
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v7 = 0;
      return sub_DC1540(a1, (int *)&v7, a2);
    }
    unint64_t v5 = *(void *)(a1 + 264) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      if (*(void *)(v5 + 8) >= 4uLL)
      {
        unint64_t v5 = *(void *)v5;
LABEL_12:
        int v6 = *(_DWORD *)v5;
        goto LABEL_13;
      }
    }
    else if (*(unsigned __int8 *)(v5 + 23) >= 4u)
    {
      goto LABEL_12;
    }
    int v6 = 0;
  }
LABEL_13:
  LODWORD(v7) = v6;
  BYTE4(v7) = 1;
  return sub_DC1540(a1, (int *)&v7, a2);
}

uint64_t sub_DB6AAC(uint64_t a1)
{
  int v2 = &off_2539290;
  if (*(void *)(a1 + 328)) {
    int v2 = *(uint64_t (****)())(a1 + 328);
  }
  uint64_t v3 = *((int *)v2 + 18);
  if (v3)
  {
    int v4 = 0;
    unint64_t v5 = (unsigned int *)v2[10];
    uint64_t v6 = 4 * v3;
    do
    {
      unsigned int v7 = *v5++;
      v4 |= 1 << sub_7BB78(v7);
      v6 -= 4;
    }
    while (v6);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  size_t v8 = *(uint64_t (****)())(a1 + 304);
  if (!v8) {
    size_t v8 = &off_2535C50;
  }
  switch(*((_DWORD *)v8 + 32))
  {
    case 0:
      if (v4) {
        goto LABEL_19;
      }
      goto LABEL_18;
    case 1:
      if ((v4 & 2) == 0) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 2:
      if ((v4 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 3:
      if ((v4 & 8) != 0) {
        goto LABEL_19;
      }
LABEL_18:
      uint64_t result = 0;
      break;
    default:
LABEL_19:
      uint64_t result = 1;
      break;
  }
  return result;
}

unint64_t sub_DB6BEC(uint64_t a1)
{
  int v2 = *(uint64_t (****)())(a1 + 328);
  if (!v2) {
    int v2 = &off_2539290;
  }
  if (*(void *)(a1 + 304)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 304);
  }
  else {
    uint64_t v3 = &off_2535C50;
  }
  int v4 = (uint64_t (***)())v3[15];
  if (!v4) {
    int v4 = &off_25364E0;
  }
  unint64_t v5 = (uint64_t (***)())v4[3];
  if (!v5) {
    unint64_t v5 = &off_25364A0;
  }
  uint64_t v6 = (uint64_t (***)())v3[11];
  if (!v6) {
    uint64_t v6 = &off_2536408;
  }
  unsigned int v7 = (uint64_t (***)())v6[3];
  size_t v8 = &off_25363D0;
  if (v7) {
    size_t v8 = v7;
  }
  uint64_t v9 = *((unsigned __int8 *)v8 + 48);
  uint64_t v10 = *((unsigned __int8 *)v8 + 49);
  int v11 = (uint64_t (***)())v3[13];
  uint64_t v12 = &off_25365A0;
  if (v11) {
    uint64_t v12 = v11;
  }
  uint64_t v13 = *((int *)v12 + 6);
  if (v13)
  {
    int v14 = v12[4];
    uint64_t v15 = 4 * v13;
    while (*(_DWORD *)v14)
    {
      int v14 = (uint64_t (**)())((char *)v14 + 4);
      v15 -= 4;
      if (!v15) {
        goto LABEL_20;
      }
    }
    uint64_t v16 = 0x100000000000000;
  }
  else
  {
LABEL_20:
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((unsigned __int8 *)v5 + 26);
  uint64_t v18 = *((unsigned __int8 *)v5 + 25);
  uint64_t v19 = *((unsigned __int8 *)v2 + 228);
  uint64_t v20 = *((unsigned __int8 *)v2 + 237);
  unint64_t v21 = v16 | (v10 << 48);
  unint64_t v22 = (v21 | (v9 << 40)) >> 40;
  unint64_t v23 = HIWORD(v21);
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    uint64_t v33 = *((unsigned __int8 *)v5 + 26);
    sub_10F5D3C((uint64_t)v34, 0, 0);
    if ((sub_1880FAC(v34, *(void *)(a1 + 280) & 0xFFFFFFFFFFFFFFFELL) & 1) == 0)
    {
LABEL_52:
      sub_10F6120(v34);
      uint64_t v17 = v33;
      return (v17 | (v18 << 8) | (v19 << 32) | (v20 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v22 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v23 << 48) | v16;
    }
    int v24 = *(_DWORD *)(a1 + 40);
    if ((v24 & 0x10000) != 0)
    {
      uint64_t v25 = *(void *)(a1 + 392);
      if (*(unsigned char *)(v25 + 16))
      {
        int v27 = *(_DWORD *)(v25 + 48);
        if (v36) {
          uint64_t v28 = v36 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = v35;
        if (!v35) {
          goto LABEL_49;
        }
        goto LABEL_40;
      }
    }
    if (v24)
    {
      unint64_t v26 = *(void *)(a1 + 264) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v26 + 23) < 0)
      {
        if (*(void *)(v26 + 8) >= 4uLL)
        {
          unint64_t v26 = *(void *)v26;
          goto LABEL_45;
        }
      }
      else if (*(unsigned __int8 *)(v26 + 23) >= 4u)
      {
LABEL_45:
        int v27 = *(_DWORD *)v26;
        if (v36) {
          uint64_t v28 = v36 + 8;
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = v35;
        if (!v35)
        {
LABEL_49:
          uint64_t v31 = v28;
LABEL_50:
          if (v31 != v28 + 8 * v29)
          {
            LOBYTE(v22) = v22 & *(unsigned char *)(*(void *)v31 + 161);
            LOBYTE(v23) = v23 & *(unsigned char *)(*(void *)v31 + 162);
          }
          goto LABEL_52;
        }
LABEL_40:
        uint64_t v30 = 8 * v29;
        uint64_t v31 = v28;
        while (*(_DWORD *)(*(void *)v31 + 144) != v27)
        {
          v31 += 8;
          v30 -= 8;
          if (!v30) {
            goto LABEL_52;
          }
        }
        goto LABEL_50;
      }
    }
    int v27 = 0;
    if (v36) {
      uint64_t v28 = v36 + 8;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = v35;
    if (!v35) {
      goto LABEL_49;
    }
    goto LABEL_40;
  }
  return (v17 | (v18 << 8) | (v19 << 32) | (v20 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v22 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v23 << 48) | v16;
}

void sub_DB6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10F6120(va);
  _Unwind_Resume(a1);
}

uint64_t sub_DB6E94(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  int v2 = (uint64_t (***)())v1[11];
  if (!v2) {
    int v2 = &off_2536408;
  }
  uint64_t v3 = (int *)v1 + 41;
  if (((_BYTE)v2[2] & 8) != 0) {
    uint64_t v3 = (int *)v2 + 11;
  }
  int v4 = *v3;
  if (v4 == 3) {
    return 2;
  }
  else {
    return v4 == 2;
  }
}

BOOL sub_DB6EEC(uint64_t a1)
{
  int v2 = &off_2539290;
  if (*(void *)(a1 + 328)) {
    int v2 = *(uint64_t (****)())(a1 + 328);
  }
  uint64_t v3 = *((int *)v2 + 18);
  if (v3)
  {
    int v4 = 0;
    unint64_t v5 = (unsigned int *)v2[10];
    uint64_t v6 = 4 * v3;
    do
    {
      unsigned int v7 = *v5++;
      v4 |= 1 << sub_7BB78(v7);
      v6 -= 4;
    }
    while (v6);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  size_t v8 = *(uint64_t (****)())(a1 + 304);
  if (!v8) {
    size_t v8 = &off_2535C50;
  }
  switch(*((_DWORD *)v8 + 32))
  {
    case 0:
      if (v4) {
        goto LABEL_19;
      }
      goto LABEL_18;
    case 1:
      if ((v4 & 2) == 0) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 2:
      if ((v4 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 3:
      if ((v4 & 8) != 0) {
        goto LABEL_19;
      }
LABEL_18:
      BOOL result = 0;
      break;
    default:
LABEL_19:
      BOOL result = *(_DWORD *)(a1 + 104) > 2;
      break;
  }
  return result;
}

uint64_t sub_DB7034(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if (*(unsigned char *)(sub_1883F34(a1 + 16, dword_254EB28, qword_254EB30) + 57))
  {
    if (*(_DWORD *)(sub_1883F34(v2, dword_254EB28, qword_254EB30) + 24)) {
      return 3;
    }
    if (*(_DWORD *)(sub_1883F34(v2, dword_254EB28, qword_254EB30) + 40)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = *(unsigned char *)(a1 + 440) == 0;
    }
    if (!v4) {
      return 3;
    }
  }
  else if (*(unsigned char *)(a1 + 440))
  {
    return 3;
  }
  if (*(unsigned char *)(a1 + 42))
  {
    int v5 = *(_DWORD *)(*(void *)(a1 + 392) + 64) - 1;
    if (v5 >= 0xD) {
      return 0;
    }
    else {
      return byte_20F05F8[v5];
    }
  }
  else
  {
    uint64_t result = 3;
    switch(*(_DWORD *)(a1 + 472))
    {
      case 0:
      case 1:
        uint64_t result = *(_DWORD *)(a1 + 80) > 0;
        break;
      case 2:
        return result;
      case 3:
        uint64_t result = 5;
        break;
      case 4:
        uint64_t result = 6;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_DB71B0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 392);
  if (!v1) {
    uint64_t v1 = &off_25351C0;
  }
  int v2 = *((_DWORD *)v1 + 13);
  if (v2 == 2) {
    return 2;
  }
  else {
    return v2 == 1;
  }
}

BOOL sub_DB71DC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 352);
  if (!v1) {
    uint64_t v1 = &off_2539C48;
  }
  return *((_DWORD *)v1 + 6) > 0;
}

uint64_t sub_DB7200(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  int v2 = *((_DWORD *)v1 + 69);
  if (v2 == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (v2 == 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_DB7230(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return sub_49F618(*((_DWORD *)v1 + 64));
}

uint64_t sub_DB724C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 24);
  if (v1 >= 4) {
    LOBYTE(v1) = 0;
  }
  return v1;
}

BOOL sub_DB7260(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) == 1;
}

BOOL sub_DB7270(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    unsigned int v1 = &off_2535C50;
  }
  int v2 = (uint64_t (***)())v1[12];
  if (!v2) {
    int v2 = &off_2536528;
  }
  return (*((_DWORD *)v2 + 19) - 1) < 2;
}

BOOL sub_DB72AC(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    unsigned int v1 = &off_2536218;
  }
  return *((_DWORD *)v1 + 10) == 5;
}

BOOL sub_DB72D0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x20) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 304));
  if ((v5[16] & 0x40) != 0)
  {
    sub_13AE48C(v3, v6);
    BOOL v2 = (v3[16] & 2) != 0 && *(unsigned char *)(v4 + 24) != 0;
    sub_13C9238(v3);
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DB7370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

uint64_t sub_DB7384(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x20) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 304));
  if ((v5[16] & 4) != 0)
  {
    sub_13AE480(v3, v6);
    if ((v3[16] & 2) != 0) {
      uint64_t v2 = *(unsigned char *)(v4 + 16) & 1;
    }
    else {
      uint64_t v2 = 0;
    }
    sub_13C6E78(v3);
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DB7420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

double sub_DB7434@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 304)) {
    uint64_t v4 = *(uint64_t (****)())(a1 + 304);
  }
  else {
    uint64_t v4 = &off_2535C50;
  }
  if (v4[10]) {
    int v5 = (uint64_t (***)())v4[10];
  }
  else {
    int v5 = &off_2535C20;
  }
  unint64_t v6 = sub_DBB218((uint64_t)v5);
  if (sub_DBB340(a1))
  {
    if (v4[11]) {
      unsigned int v7 = (uint64_t (***)())v4[11];
    }
    else {
      unsigned int v7 = &off_2536408;
    }
    sub_DBB3F0(SHIDWORD(v6), (uint64_t)v7, a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(void *)(a2 + 136) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 88) = 1065353216;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_DWORD *)(a2 + 136) = 1065353216;
    double result = NAN;
    *(_OWORD *)(a2 + 144) = xmmword_20E8670;
  }
  return result;
}

BOOL sub_DB7530(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    unsigned int v1 = &off_2535C50;
  }
  if (*((_DWORD *)v1 + 32) != 2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 42))
  {
    uint64_t v2 = *(void *)(a1 + 392);
    if ((*(unsigned char *)(v2 + 16) & 8) != 0 && (*(_DWORD *)(v2 + 60) - 1) < 2) {
      return 1;
    }
  }
  int v4 = sub_DB7034(a1);
  return v4 == 8 || v4 == 4 || v4 == 2;
}

uint64_t sub_DB75B4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 42) & 1) != 0
    && (uint64_t v1 = *(void *)(a1 + 392), *(int *)(v1 + 32) >= 1)
    && (uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 8), (*(unsigned char *)(v2 + 40) & 0x20) != 0))
  {
    return nullsub_1(*(void *)(v2 + 88));
  }
  else
  {
    return -1;
  }
}

void **sub_DB75EC(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1473CF4(v3 - 88);
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_DB7648(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5B9B3C(a3);
  uint64_t v184 = a2;
  unint64_t v6 = (long long *)sub_377D04(a2);
  char v212 = 1;
  sub_29E004((char *)&v205, v6);
  sub_DB2134(a1, (uint64_t)&v205, (uint64_t)__dst);
  *(_DWORD *)(a3 + 968) = *(_DWORD *)__dst;
  unsigned int v7 = *(void **)(a3 + 976);
  uint64_t v186 = a1;
  if (v7)
  {
    *(void *)(a3 + 984) = v7;
    operator delete(v7);
    *(void *)(a3 + 976) = 0;
    *(void *)(a3 + 984) = 0;
    *(void *)(a3 + 992) = 0;
  }
  *(_OWORD *)(a3 + 976) = *(_OWORD *)&__dst[8];
  *(void *)(a3 + 992) = *(void *)&__dst[24];
  memset(&__dst[8], 0, 24);
  *(_DWORD *)(a3 + 1000) = *(_DWORD *)&__dst[32];
  size_t v8 = *(void **)(a3 + 1008);
  if (v8)
  {
    *(void *)(a3 + 1016) = v8;
    operator delete(v8);
    *(void *)(a3 + 1008) = 0;
    *(void *)(a3 + 1016) = 0;
    *(void *)(a3 + 1024) = 0;
  }
  uint64_t v9 = 0;
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)&__dst[40];
  *(void *)(a3 + 1024) = v191[0];
  *(void *)&__dst[48] = 0;
  v191[0] = 0;
  *(void *)&__dst[40] = 0;
  uint64_t v10 = (void **)(a3 + 1032);
  if (*(char *)(a3 + 1055) < 0)
  {
    operator delete(*v10);
    uint64_t v9 = *(void **)&__dst[40];
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)&v191[1];
  *(void *)(a3 + 1048) = v191[3];
  HIBYTE(v191[3]) = 0;
  LOBYTE(v191[1]) = 0;
  *(unsigned char *)(a3 + 1056) = v192;
  if (v9)
  {
    *(void *)&__dst[48] = v9;
    operator delete(v9);
  }
  if (*(void *)&__dst[8])
  {
    *(void *)&__dst[16] = *(void *)&__dst[8];
    operator delete(*(void **)&__dst[8]);
  }
  if (v212)
  {
    if (v211 < 0)
    {
      operator delete(v210);
      if ((v209 & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v207) & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_29:
        operator delete(v205);
        goto LABEL_15;
      }
    }
    else if ((v209 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v208);
    if ((SHIBYTE(v207) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_15:
  sub_DB8768(a1, (uint64_t)__dst);
  sub_CA0FF4(a3, (uint64_t)__dst);
  sub_4BCC2C((uint64_t)__dst);
  sub_DB4184(a1, (uint64_t)__dst);
  sub_CB13A4(a3 + 712, (uint64_t *)__dst);
  sub_CB13A4(a3 + 752, (uint64_t *)&__dst[40]);
  sub_CB13A4(a3 + 792, &v191[3]);
  sub_CB13A4(a3 + 832, (uint64_t *)&v194);
  sub_CB13A4(a3 + 872, v197);
  if (*(void *)(a3 + 936))
  {
    int v11 = *(void **)(a3 + 928);
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        int v11 = v12;
      }
      while (v12);
    }
    *(void *)(a3 + 928) = 0;
    uint64_t v13 = *(void *)(a3 + 920);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(void *)(*(void *)(a3 + 912) + 8 * i) = 0;
    }
    *(void *)(a3 + 936) = 0;
  }
  uint64_t v15 = v198;
  uint64_t v198 = 0;
  uint64_t v16 = *(void **)(a3 + 912);
  *(void *)(a3 + 912) = v15;
  if (v16) {
    operator delete(v16);
  }
  unint64_t v17 = v199;
  uint64_t v18 = v200;
  *(void *)(a3 + 920) = v199;
  unint64_t v199 = 0;
  uint64_t v19 = v201;
  *(void *)(a3 + 936) = v201;
  *(_DWORD *)(a3 + 944) = v202;
  *(void *)(a3 + 928) = v18;
  if (v19)
  {
    unint64_t v20 = *(void *)(v18 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v20 >= v17) {
        v20 %= v17;
      }
    }
    else
    {
      v20 &= v17 - 1;
    }
    *(void *)(*(void *)(a3 + 912) + 8 * v20) = a3 + 928;
    uint64_t v200 = 0;
    uint64_t v201 = 0;
  }
  *(void *)(a3 + 952) = v203;
  *(unsigned char *)(a3 + 960) = v204;
  sub_4BCA98((uint64_t)__dst);
  if (*(int *)(a1 + 104) < 1)
  {
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v41 = 1;
    uint64_t v207 = 0;
  }
  else
  {
    sub_13E9AE4(__dst, *(void *)(*(void *)(a1 + 112) + 8));
    sub_DC8988(&v205, (uint64_t)__dst, 1uLL);
    sub_1473CF4(__dst);
    unint64_t v21 = v205;
    unint64_t v22 = v206;
    if (v205 != v206)
    {
      while (1)
      {
        if (*((_DWORD *)v21 + 20) == 2)
        {
          unint64_t v23 = (uint64_t (***)())*((void *)v21 + 3);
          if (!v23) {
            unint64_t v23 = &off_25399D8;
          }
          int v24 = (*((unsigned __int8 *)v23 + 40) >> 3) & 1;
          unint64_t v25 = *(void *)(a3 + 1160);
          uint64_t v26 = *(void *)(a3 + 1168);
          if (v25 != v26 << 6)
          {
LABEL_41:
            *(void *)(a3 + 1160) = v25 + 1;
            uint64_t v27 = *(void *)(a3 + 1152);
            unint64_t v28 = v25 >> 6;
            uint64_t v29 = 1 << v25;
            if (v24) {
              goto LABEL_42;
            }
            goto LABEL_52;
          }
        }
        else
        {
          int v24 = 0;
          unint64_t v25 = *(void *)(a3 + 1160);
          uint64_t v26 = *(void *)(a3 + 1168);
          if (v25 != v26 << 6) {
            goto LABEL_41;
          }
        }
        if ((uint64_t)(v25 + 1) < 0) {
          sub_2E00();
        }
        unint64_t v33 = v26 << 7;
        if (v33 <= (v25 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v33 = (v25 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v25 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v34 = v33;
        }
        else {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110(a3 + 1152, v34);
        unint64_t v35 = *(void *)(a3 + 1160);
        *(void *)(a3 + 1160) = v35 + 1;
        uint64_t v27 = *(void *)(a3 + 1152);
        unint64_t v28 = v35 >> 6;
        uint64_t v29 = 1 << v35;
        if (v24)
        {
LABEL_42:
          *(void *)(v27 + 8 * v28) |= v29;
          int v30 = v21[65];
          unint64_t v31 = *(void *)(a3 + 1136);
          uint64_t v32 = *(void *)(a3 + 1144);
          if (v31 == v32 << 6) {
            goto LABEL_53;
          }
          goto LABEL_60;
        }
LABEL_52:
        *(void *)(v27 + 8 * v28) &= ~v29;
        int v30 = v21[65];
        unint64_t v31 = *(void *)(a3 + 1136);
        uint64_t v32 = *(void *)(a3 + 1144);
        if (v31 == v32 << 6)
        {
LABEL_53:
          if ((uint64_t)(v31 + 1) < 0) {
            sub_2E00();
          }
          unint64_t v36 = v32 << 7;
          if (v36 <= (v31 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v36 = (v31 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v31 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v37 = v36;
          }
          else {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_3D110(a3 + 1128, v37);
          unint64_t v31 = *(void *)(a3 + 1136);
        }
LABEL_60:
        *(void *)(a3 + 1136) = v31 + 1;
        uint64_t v38 = *(void *)(a3 + 1128);
        unint64_t v39 = v31 >> 6;
        uint64_t v40 = 1 << v31;
        if (v30)
        {
          *(void *)(v38 + 8 * v39) |= v40;
          v21 += 88;
          if (v21 == v22)
          {
LABEL_62:
            char v41 = 0;
            goto LABEL_65;
          }
        }
        else
        {
          *(void *)(v38 + 8 * v39) &= ~v40;
          v21 += 88;
          if (v21 == v22) {
            goto LABEL_62;
          }
        }
      }
    }
    char v41 = 1;
  }
LABEL_65:
  if (*(void *)(v186 + 288)) {
    uint64_t v42 = *(uint64_t (****)())(v186 + 288);
  }
  else {
    uint64_t v42 = &off_2535C50;
  }
  *(unsigned char *)(a3 + 1176) = sub_7BB78(*((_DWORD *)v42 + 32));
  *(_DWORD *)(a3 + 1096) = 0;
  unint64_t v44 = (char *)v205;
  unint64_t v43 = (char *)v206;
  if (v205 == v206)
  {
    if (v41) {
      goto LABEL_96;
    }
  }
  else
  {
    unint64_t v45 = v205;
    do
    {
      int v46 = *((_DWORD *)v45 + 4);
      if ((v46 & 8) != 0) {
        break;
      }
      v45 += 88;
    }
    while (v45 != v206);
    if (v41) {
      goto LABEL_96;
    }
    if ((v46 & 8) != 0)
    {
      if (v205 == v206) {
        goto LABEL_98;
      }
      goto LABEL_91;
    }
  }
  uint64_t v47 = v186;
  if (*(void *)(v186 + 296)) {
    uint64_t v48 = *(uint64_t (****)())(v186 + 296);
  }
  else {
    uint64_t v48 = &off_2539290;
  }
  uint64_t v49 = *((int *)v48 + 18);
  if (v49)
  {
    int v50 = 0;
    uint64_t v51 = (unsigned int *)v48[10];
    uint64_t v52 = 4 * v49;
    do
    {
      v50 |= 1 << sub_7BB78(*v51++);
      v52 -= 4;
    }
    while (v52);
    LODWORD(v49) = v50 & 1;
    uint64_t v47 = v186;
  }
  unint64_t v53 = *(uint64_t (****)())(v47 + 288);
  if (!v53) {
    unint64_t v53 = &off_2535C50;
  }
  if (*((_DWORD *)v53 + 32)) {
    BOOL v54 = 0;
  }
  else {
    BOOL v54 = v49 == 0;
  }
  if (!v54)
  {
    unint64_t v44 = (char *)v205;
    unint64_t v43 = (char *)v206;
    if (v205 == v206) {
      goto LABEL_98;
    }
    do
    {
LABEL_91:
      sub_13E9AE4(v188, v44);
      if ((v188[16] & 8) != 0) {
        int v55 = *(_DWORD *)(v189 + 24);
      }
      else {
        int v55 = 0;
      }
      *(_DWORD *)std::string __dst = v55;
      sub_3B79D0((void **)(a3 + 1104), __dst);
      sub_1473CF4(v188);
      v44 += 88;
    }
    while (v44 != v43);
    goto LABEL_98;
  }
LABEL_96:
  if (((_BYTE)v42[2] & 0x20) != 0)
  {
    *(_DWORD *)std::string __dst = *((_DWORD *)v42[14] + 6);
    sub_3B79D0((void **)(a3 + 1104), __dst);
  }
LABEL_98:
  int v56 = *((_DWORD *)v42 + 4);
  if ((v56 & 0x10000) != 0) {
    *(unsigned char *)(a3 + 1064) = *((unsigned char *)v42 + 143);
  }
  uint64_t v57 = v186;
  if ((v56 & 0x100000) != 0) {
    *(unsigned char *)(a3 + 1414) = *((unsigned char *)v42 + 153);
  }
  *(unsigned char *)(a3 + 1480) = *((unsigned char *)v42 + 144);
  sub_DB51CC(v186, (int **)__dst);
  int64_t v58 = *(void **)(a3 + 1072);
  if (v58)
  {
    *(void *)(a3 + 1080) = v58;
    operator delete(v58);
    *(void *)(a3 + 1072) = 0;
    *(void *)(a3 + 1080) = 0;
    *(void *)(a3 + 1088) = 0;
  }
  *(_OWORD *)(a3 + 1072) = *(_OWORD *)__dst;
  *(void *)(a3 + 1088) = *(void *)&__dst[16];
  uint64_t v59 = *(uint64_t (****)())(v186 + 296);
  if (!v59) {
    uint64_t v59 = &off_2539290;
  }
  int v60 = *((_DWORD *)v59 + 68);
  int v61 = (uint64_t (***)())v59[21];
  if (!v61) {
    int v61 = &off_2539230;
  }
  __int16 v62 = *((unsigned __int8 *)v61 + 25);
  int v63 = *((unsigned __int8 *)v61 + 26);
  if (v60 >= 255) {
    int v60 = 255;
  }
  int v64 = v60 & ~(v60 >> 31);
  *(_WORD *)(a3 + 1177) = v64 | (v62 << 8);
  *(unsigned char *)(a3 + 1179) = (v64 | (v63 << 16)) >> 16;
  *(void *)(a3 + 1216) = sub_DB893C(v186);
  *(_WORD *)(a3 + 1224) = v65;
  *(unsigned char *)(a3 + 1226) = v66;
  int v67 = *(uint64_t (****)())(v186 + 288);
  char v68 = *(uint64_t (****)())(v186 + 296);
  if (v67) {
    __int16 v69 = *(uint64_t (****)())(v186 + 288);
  }
  else {
    __int16 v69 = &off_2535C50;
  }
  int v70 = (uint64_t (***)())v69[11];
  if (!v70) {
    int v70 = &off_2536408;
  }
  int v71 = *((_DWORD *)v70 + 4);
  __int16 v72 = (int *)v70 + 11;
  char v73 = (int *)v69 + 41;
  if ((v71 & 8) != 0) {
    char v73 = v72;
  }
  int v74 = *v73;
  if (v74 == 3) {
    char v75 = 2;
  }
  else {
    char v75 = v74 == 2;
  }
  *(unsigned char *)(a3 + 1227) = v75;
  if (v68) {
    unsigned int v76 = v68;
  }
  else {
    unsigned int v76 = &off_2539290;
  }
  *(unsigned char *)(a3 + 1405) = *((unsigned char *)v76 + 223);
  *(unsigned char *)(a3 + 1406) = *((unsigned char *)v76 + 226);
  *(unsigned char *)(a3 + 1407) = *((unsigned char *)v76 + 232);
  *(unsigned char *)(a3 + 1408) = *((unsigned char *)v76 + 230);
  uint64_t v77 = *((int *)v76 + 18);
  long long v185 = v76;
  if (v77)
  {
    int v78 = 0;
    uint64_t v79 = (unsigned int *)v76[10];
    uint64_t v80 = 4 * v77;
    do
    {
      v78 |= 1 << sub_7BB78(*v79++);
      v80 -= 4;
    }
    while (v80);
    LODWORD(v77) = v78 & 1;
    uint64_t v57 = v186;
    int v67 = *(uint64_t (****)())(v186 + 288);
  }
  if (v67) {
    char v81 = v67;
  }
  else {
    char v81 = &off_2535C50;
  }
  if (*((_DWORD *)v81 + 32)) {
    BOOL v82 = 0;
  }
  else {
    BOOL v82 = v77 == 0;
  }
  BOOL v83 = !v82 && *(_DWORD *)(v57 + 152) > 1;
  *(unsigned char *)(a3 + 1409) = v83;
  *(unsigned char *)(a3 + 1410) = 0;
  *(_WORD *)(a3 + 1522) = 0;
  int v84 = *(uint64_t (****)())(v57 + 296);
  if (v84) {
    uint64_t v85 = *(uint64_t (****)())(v57 + 296);
  }
  else {
    uint64_t v85 = &off_2539290;
  }
  uint64_t v86 = *((int *)v85 + 18);
  if (v86)
  {
    int v87 = 0;
    BOOL v88 = (unsigned int *)v85[10];
    uint64_t v89 = 4 * v86;
    do
    {
      v87 |= 1 << sub_7BB78(*v88++);
      v89 -= 4;
    }
    while (v89);
    LOBYTE(v86) = v87 & 1;
    uint64_t v57 = v186;
    int v67 = *(uint64_t (****)())(v186 + 288);
    int v84 = *(uint64_t (****)())(v186 + 296);
  }
  if (!v67) {
    int v67 = &off_2535C50;
  }
  if (*((_DWORD *)v67 + 32)) {
    char v90 = 1;
  }
  else {
    char v90 = v86;
  }
  *(unsigned char *)(a3 + 1411) = v90;
  if (!v84) {
    int v84 = &off_2539290;
  }
  uint64_t v91 = *((int *)v84 + 18);
  if (v91)
  {
    int v92 = 0;
    char v93 = (unsigned int *)v84[10];
    uint64_t v94 = 4 * v91;
    do
    {
      v92 |= 1 << sub_7BB78(*v93++);
      v94 -= 4;
    }
    while (v94);
    LOBYTE(v91) = v92 & 1;
    uint64_t v57 = v186;
  }
  *(unsigned char *)(a3 + 1412) = v91;
  *(unsigned char *)(a3 + 1444) = *((unsigned char *)v185 + 231);
  char v95 = *(unsigned char *)(a3 + 1414);
  if (v95) {
    char v95 = *((unsigned char *)v185 + 221) != 0;
  }
  *(unsigned char *)(a3 + 1414) = v95;
  *(unsigned char *)(a3 + 1427) = *((unsigned char *)v185 + 219);
  int v96 = *(uint64_t (****)())(v57 + 312);
  if (!v96) {
    int v96 = &off_2539C48;
  }
  *(unsigned char *)(a3 + 1424) = *((_DWORD *)v96 + 6) > 0;
  uint64_t v97 = *(uint64_t (****)())(v57 + 296);
  if (!v97) {
    uint64_t v97 = &off_2539290;
  }
  int v98 = *((_DWORD *)v97 + 69);
  if (v98 == 2) {
    char v99 = 2;
  }
  else {
    char v99 = 1;
  }
  if (v98 == 3) {
    char v100 = 3;
  }
  else {
    char v100 = v99;
  }
  *(unsigned char *)(a3 + 1425) = v100;
  *(unsigned char *)(a3 + 1413) = *((unsigned char *)v185 + 251);
  *(_DWORD *)(a3 + 1420) = *((_DWORD *)v185 + 67);
  std::string v101 = &off_2539270;
  if (v185[26]) {
    std::string v101 = (uint64_t (***)())v185[26];
  }
  *(unsigned char *)(a3 + 1440) = *((unsigned char *)v101 + 24);
  *(unsigned char *)(a3 + 1184) = sub_49F618(*((_DWORD *)v97 + 64));
  std::string::size_type v102 = (uint64_t (***)())v42[12];
  if (!v102) {
    std::string::size_type v102 = &off_2536528;
  }
  uint64_t v103 = (uint64_t (***)())v102[8];
  if (!v103) {
    uint64_t v103 = &off_2536508;
  }
  unsigned int v104 = *((_DWORD *)v103 + 6);
  if (v104 >= 4) {
    LOBYTE(v104) = 0;
  }
  *(unsigned char *)(a3 + 1185) = v104;
  *(unsigned char *)(a3 + 1186) = *((_DWORD *)v103 + 7) == 1;
  uint64_t v105 = sub_377D04(v184);
  if (*(char *)(v105 + 47) < 0)
  {
    sub_4200(__dst, *(void **)(v105 + 24), *(void *)(v105 + 32));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(v105 + 24);
    *(void *)&__dst[16] = *(void *)(v105 + 40);
  }
  uint64_t v106 = (void **)(a3 + 1192);
  if (*(char *)(a3 + 1215) < 0) {
    operator delete(*v106);
  }
  *(_OWORD *)uint64_t v106 = *(_OWORD *)__dst;
  *(void *)(a3 + 1208) = *(void *)&__dst[16];
  char v107 = (__int32 *)v185[8];
  size_t v108 = *((int *)v185 + 14);
  uint64_t v109 = &v107[v108];
  int v110 = wmemchr(v107, 1, v108);
  if (v110) {
    char v111 = v110;
  }
  else {
    char v111 = v109;
  }
  char v112 = (__int32 *)v185[8];
  size_t v113 = *((int *)v185 + 14);
  int v114 = &v112[v113];
  BOOL v115 = v111 != v114;
  unsigned int v116 = wmemchr(v112, 3, v113);
  if (v116) {
    uint64_t v117 = v116;
  }
  else {
    uint64_t v117 = v114;
  }
  double v118 = (__int32 *)v185[8];
  size_t v119 = *((int *)v185 + 14);
  size_t v120 = &v118[v119];
  int v121 = v117 != v120;
  unint64_t v122 = wmemchr(v118, 5, v119);
  if (v122) {
    int v123 = v122;
  }
  else {
    int v123 = v120;
  }
  long long v124 = (__int32 *)v185[8];
  size_t v125 = *((int *)v185 + 14);
  std::string v126 = &v124[v125];
  int v127 = v123 != v126;
  uint64_t v128 = wmemchr(v124, 6, v125);
  if (v128) {
    int v129 = v128;
  }
  else {
    int v129 = v126;
  }
  *(_DWORD *)(a3 + 1428) = v115 | (v121 << 8) | (v127 << 16) | ((v129 != (__int32 *)((char *)v185[8]
                                                                                   + 4 * *((int *)v185 + 14))) << 24);
  __n128 v130 = *(uint64_t (****)())(v186 + 288);
  size_t v131 = *(uint64_t (****)())(v186 + 296);
  if (!v130) {
    __n128 v130 = &off_2535C50;
  }
  uint64_t v132 = (uint64_t (***)())v130[12];
  if (!v132) {
    uint64_t v132 = &off_2536528;
  }
  *(_DWORD *)(a3 + 1432) = (*((_DWORD *)v132 + 19) - 1) < 2;
  if (v131) {
    int v133 = v131;
  }
  else {
    int v133 = &off_2539290;
  }
  char v134 = (__int32 *)v133[8];
  size_t v135 = *((int *)v133 + 14);
  uint64_t v136 = &v134[v135];
  size_t v137 = wmemchr(v134, 4, v135);
  if (v137) {
    uint64_t v138 = v137;
  }
  else {
    uint64_t v138 = v136;
  }
  int v139 = (__int32 *)v133[8];
  uint64_t v140 = *((int *)v133 + 14);
  if (v138 == &v139[v140])
  {
    long long v144 = *(uint64_t (****)())(v186 + 288);
    if (!v144) {
      long long v144 = &off_2535C50;
    }
    long long v145 = (uint64_t (***)())v144[12];
    if (!v145) {
      long long v145 = &off_2536528;
    }
    uint64_t v142 = v186;
    if ((*((_DWORD *)v145 + 19) - 3) > 0xFFFFFFFD)
    {
      int v141 = 1;
      long long v143 = v185;
    }
    else
    {
      if (v140)
      {
        long long v143 = v185;
        while ((*v139 & 0xFFFFFFFD) != 1)
        {
          if (++v139 == v138)
          {
            int v139 = v138;
            break;
          }
        }
      }
      else
      {
        long long v143 = v185;
      }
      int v141 = v139 != v138;
    }
  }
  else
  {
    int v141 = 2;
    uint64_t v142 = v186;
    long long v143 = v185;
  }
  *(_DWORD *)(a3 + 1436) = v141;
  *(unsigned char *)(a3 + 1442) = *((unsigned char *)v143 + 225);
  *(_WORD *)(a3 + 1445) = 0;
  *(unsigned char *)(a3 + 1447) = 0;
  *(unsigned char *)(a3 + 1448) = sub_DB8D28(v142);
  *(unsigned char *)(a3 + 1449) = sub_DB8DDC(v142);
  char v146 = *((unsigned char *)v185 + 228);
  if (v146) {
    char v146 = *((unsigned char *)v185 + 232) != 0;
  }
  *(unsigned char *)(a3 + 1443) = v146;
  *(_WORD *)(a3 + 1415) = *((_WORD *)v42 + 77);
  *(_DWORD *)(a3 + 1450) = *(_DWORD *)((char *)v185 + 234);
  uint64_t v147 = &off_2535CF8;
  if (*(void *)(v142 + 320)) {
    uint64_t v147 = *(uint64_t (****)())(v142 + 320);
  }
  *(unsigned char *)(a3 + 1481) = *((unsigned char *)v147 + 29);
  uint64_t v148 = *((int *)v42 + 14);
  if (v148)
  {
    uint64_t v149 = v42[8];
    char v150 = (uint64_t (**)())((char *)v149 + 4 * v148);
    uint64_t v187 = (void **)(a3 + 1456);
    uint64_t v151 = *(char **)(a3 + 1464);
    while (1)
    {
      BOOL v153 = *(_DWORD *)v149 == 1;
      unint64_t v154 = *(void *)(a3 + 1472);
      if ((unint64_t)v151 >= v154) {
        break;
      }
      *(_DWORD *)uint64_t v151 = v153;
      uint64_t v152 = (uint64_t)(v151 + 4);
LABEL_223:
      *(void *)(a3 + 1464) = v152;
      uint64_t v149 = (uint64_t (**)())((char *)v149 + 4);
      uint64_t v151 = (char *)v152;
      if (v149 == v150) {
        goto LABEL_251;
      }
    }
    int v155 = (char *)*v187;
    uint64_t v156 = v151 - (unsigned char *)*v187;
    uint64_t v157 = v156 >> 2;
    unint64_t v158 = (v156 >> 2) + 1;
    if (v158 >> 62) {
      sub_2E00();
    }
    uint64_t v159 = v154 - (void)v155;
    if (v159 >> 1 > v158) {
      unint64_t v158 = v159 >> 1;
    }
    if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v160 = v158;
    }
    if (v160)
    {
      if (v160 >> 62) {
        sub_188D718();
      }
      uint64_t v161 = operator new(4 * v160);
      long long v162 = (BOOL *)&v161[4 * v157];
      *long long v162 = v153;
      uint64_t v152 = (uint64_t)(v162 + 1);
      if (v151 == v155) {
        goto LABEL_239;
      }
    }
    else
    {
      uint64_t v161 = 0;
      long long v162 = (BOOL *)(4 * v157);
      *(_DWORD *)(4 * v157) = v153;
      uint64_t v152 = 4 * v157 + 4;
      if (v151 == v155) {
        goto LABEL_239;
      }
    }
    unint64_t v163 = v151 - 4 - v155;
    if (v163 >= 0xBC)
    {
      if (&v161[v156 - 4 - (v163 & 0xFFFFFFFFFFFFFFFCLL)] > &v161[v156 - 4])
      {
        long long v164 = v151;
      }
      else if (&v151[-(v163 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v151 - 4)
      {
        long long v164 = v151;
      }
      else if ((unint64_t)(v151 - v161 - v156) >= 0x20)
      {
        uint64_t v166 = (v163 >> 2) + 1;
        uint64_t v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
        long long v164 = &v151[-v167];
        long long v162 = (BOOL *)((char *)v162 - v167);
        long long v168 = &v161[4 * v157 - 16];
        uint64_t v169 = v151 - 16;
        uint64_t v170 = v166 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          _OWORD *v168 = v171;
          v168 -= 2;
          v169 -= 32;
          v170 -= 8;
        }
        while (v170);
        if (v166 == (v166 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_239:
          *(void *)(a3 + 1456) = v162;
          *(void *)(a3 + 1464) = v152;
          *(void *)(a3 + 1472) = &v161[4 * v160];
          if (v155) {
            operator delete(v155);
          }
          goto LABEL_223;
        }
      }
      else
      {
        long long v164 = v151;
      }
    }
    else
    {
      long long v164 = v151;
    }
    do
    {
      int v165 = *((_DWORD *)v164 - 1);
      v164 -= 4;
      *--long long v162 = v165;
    }
    while (v164 != v155);
    goto LABEL_239;
  }
LABEL_251:
  std::string::operator=((std::string *)(a3 + 1488), (const std::string *)((unint64_t)v185[18] & 0xFFFFFFFFFFFFFFFELL));
  *(unsigned char *)(a3 + 1512) = *((unsigned char *)v185 + 240);
  *(_WORD *)(a3 + 1513) = *(_WORD *)((char *)v185 + 241);
  *(_WORD *)(a3 + 1515) = *((_WORD *)v185 + 123);
  *(unsigned char *)(a3 + 1517) = *((unsigned char *)v185 + 254);
  *(_WORD *)(a3 + 1518) = *((_WORD *)v185 + 126);
  *(unsigned char *)(a3 + 1521) = *((unsigned char *)v185 + 248);
  uint64_t v172 = (uint64_t (***)())v185[25];
  if (!v172) {
    uint64_t v172 = &off_2539250;
  }
  *(unsigned char *)(a3 + 1441) = *((unsigned char *)v172 + 25);
  *(unsigned char *)(a3 + 1520) = *((unsigned char *)v185 + 250);
  if (*(void *)(v186 + 288)) {
    unint64_t v173 = *(uint64_t (****)())(v186 + 288);
  }
  else {
    unint64_t v173 = &off_2535C50;
  }
  if (v173[10]) {
    uint64_t v174 = (uint64_t (***)())v173[10];
  }
  else {
    uint64_t v174 = &off_2535C20;
  }
  unint64_t v175 = sub_DBB218((uint64_t)v174);
  if (sub_DBB760(v186))
  {
    if (v173[11]) {
      unint64_t v176 = (uint64_t (***)())v173[11];
    }
    else {
      unint64_t v176 = &off_2536408;
    }
    sub_DBB3F0(SHIDWORD(v175), (uint64_t)v176, (uint64_t)__dst);
  }
  else
  {
    memset(&__dst[12], 0, 44);
    long long v192 = 0u;
    *(_DWORD *)std::string __dst = 0x7FFFFFFF;
    *(void *)&__dst[4] = 0x7FFFFFFF7FFFFFFFLL;
    memset(v191, 0, sizeof(v191));
    LODWORD(v192) = 1065353216;
    long long v193 = 0u;
    long long v194 = 0u;
    uint64_t v195 = 1065353216;
    long long v196 = xmmword_20E8670;
  }
  *(void *)(a3 + 1232) = *(void *)__dst;
  *(void *)(a3 + 1237) = *(void *)&__dst[5];
  uint64_t v177 = *(void **)(a3 + 1248);
  if (v177)
  {
    *(void *)(a3 + 1256) = v177;
    operator delete(v177);
    *(void *)(a3 + 1248) = 0;
    *(void *)(a3 + 1256) = 0;
    *(void *)(a3 + 1264) = 0;
  }
  *(_OWORD *)(a3 + 1248) = *(_OWORD *)&__dst[16];
  uint64_t v178 = *(void *)&__dst[40];
  *(void *)(a3 + 1264) = *(void *)&__dst[32];
  memset(&__dst[16], 0, 24);
  *(void *)(a3 + 1272) = v178;
  *(_DWORD *)(a3 + 1280) = *(_DWORD *)&__dst[48];
  sub_62BDC(a3 + 1288, v191);
  *(_DWORD *)(a3 + 1328) = DWORD2(v192);
  sub_62BDC(a3 + 1336, (uint64_t *)&v193);
  *(_OWORD *)(a3 + 1376) = v196;
  sub_402628(__dst);
  *(unsigned char *)(a3 + 1524) = 0;
  *(unsigned char *)(a3 + 1482) = *((unsigned char *)v185 + 249);
  uint64_t v179 = sub_37B3A8(v184);
  uint64_t v180 = *(void *)v179;
  *(_DWORD *)(a3 + 1400) = *(_DWORD *)(v179 + 8);
  *(void *)(a3 + 1392) = v180;
  *(unsigned char *)(a3 + 1525) = 0;
  long long v181 = v205;
  if (v205)
  {
    uint64_t v182 = (uint64_t)v206;
    uint64_t v183 = v205;
    if (v206 != v205)
    {
      do
        uint64_t v182 = sub_1473CF4(v182 - 88);
      while ((unsigned __int8 *)v182 != v181);
      uint64_t v183 = v205;
    }
    uint64_t v206 = v181;
    operator delete(v183);
  }
}

void sub_DB86A8(_Unwind_Exception *a1)
{
  sub_DB75EC((void **)(v2 - 184));
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

char *sub_DB8768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
  {
    int v7 = *(_DWORD *)(*(void *)(a1 + 336) + 136);
    goto LABEL_12;
  }
  if (!*(_DWORD *)(a1 + 80) || (uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 8), (*(unsigned char *)(v4 + 40) & 1) == 0))
  {
    uint64_t v10 = 0;
    double result = (char *)sub_DC210C(a1, (int *)&v10, a2);
    if ((*(unsigned char *)(a1 + 40) & 0x80) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v9 = *(void *)(v4 + 456) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(v9 + 23) >= 4u) {
      goto LABEL_26;
    }
LABEL_24:
    int v7 = 0;
    goto LABEL_12;
  }
  if (*(void *)(v9 + 8) < 4uLL) {
    goto LABEL_24;
  }
  unint64_t v9 = *(void *)v9;
LABEL_26:
  int v7 = *(_DWORD *)v9;
LABEL_12:
  LODWORD(v10) = v7;
  BYTE4(v10) = 1;
  double result = (char *)sub_DC210C(a1, (int *)&v10, a2);
  if ((*(unsigned char *)(a1 + 40) & 0x80) != 0)
  {
LABEL_5:
    if (*(unsigned char *)(*(void *)(a1 + 296) + 247)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = *(_DWORD *)(a1 + 128) < 1;
    }
    if (v6) {
      return result;
    }
    goto LABEL_14;
  }
LABEL_13:
  if (*(int *)(a1 + 128) <= 0) {
    return result;
  }
LABEL_14:
  uint64_t v8 = *(void *)(*(void *)(a1 + 136) + 8);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    return result;
  }
  return sub_486188(a2, v8);
}

void sub_DB8890(_Unwind_Exception *a1)
{
  sub_4BCC2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DB88A4(uint64_t a1)
{
  uint64_t v2 = &off_2539290;
  if (*(void *)(a1 + 296)) {
    uint64_t v2 = *(uint64_t (****)())(a1 + 296);
  }
  uint64_t v3 = *((int *)v2 + 18);
  if (v3)
  {
    int v4 = 0;
    int v5 = (unsigned int *)v2[10];
    uint64_t v6 = 4 * v3;
    do
    {
      unsigned int v7 = *v5++;
      v4 |= 1 << sub_7BB78(v7);
      v6 -= 4;
    }
    while (v6);
    LODWORD(v3) = v4 & 1;
  }
  uint64_t v8 = *(uint64_t (****)())(a1 + 288);
  if (!v8) {
    uint64_t v8 = &off_2535C50;
  }
  if (*((_DWORD *)v8 + 32)) {
    return 1;
  }
  else {
    return v3;
  }
}

unint64_t sub_DB893C(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (****)())(a1 + 296);
  if (!v2) {
    uint64_t v2 = &off_2539290;
  }
  if (*(void *)(a1 + 288)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 288);
  }
  else {
    uint64_t v3 = &off_2535C50;
  }
  int v4 = (uint64_t (***)())v3[15];
  if (!v4) {
    int v4 = &off_25364E0;
  }
  int v5 = (uint64_t (***)())v4[3];
  if (!v5) {
    int v5 = &off_25364A0;
  }
  uint64_t v6 = (uint64_t (***)())v3[11];
  if (!v6) {
    uint64_t v6 = &off_2536408;
  }
  unsigned int v7 = (uint64_t (***)())v6[3];
  uint64_t v8 = &off_25363D0;
  if (v7) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = *((unsigned __int8 *)v8 + 48);
  uint64_t v10 = *((unsigned __int8 *)v8 + 49);
  int v11 = (uint64_t (***)())v3[13];
  uint64_t v12 = &off_25365A0;
  if (v11) {
    uint64_t v12 = v11;
  }
  uint64_t v13 = *((int *)v12 + 6);
  if (v13)
  {
    int v14 = v12[4];
    uint64_t v15 = 4 * v13;
    while (*(_DWORD *)v14)
    {
      int v14 = (uint64_t (**)())((char *)v14 + 4);
      v15 -= 4;
      if (!v15) {
        goto LABEL_20;
      }
    }
    uint64_t v16 = 0x100000000000000;
  }
  else
  {
LABEL_20:
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((unsigned __int8 *)v5 + 26);
  uint64_t v18 = *((unsigned __int8 *)v5 + 25);
  uint64_t v19 = *((unsigned __int8 *)v2 + 228);
  uint64_t v20 = *((unsigned __int8 *)v2 + 237);
  unint64_t v21 = v16 | (v10 << 48);
  unint64_t v22 = (v21 | (v9 << 40)) >> 40;
  unint64_t v23 = HIWORD(v21);
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    uint64_t v32 = *((unsigned __int8 *)v5 + 26);
    sub_10F5D3C((uint64_t)v33, 0, 0);
    if ((sub_1880FAC(v33, *(void *)(a1 + 248) & 0xFFFFFFFFFFFFFFFELL) & 1) == 0)
    {
LABEL_53:
      sub_10F6120(v33);
      uint64_t v17 = v32;
      return (v17 | (v18 << 8) | (v19 << 32) | (v20 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v22 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v23 << 48) | v16;
    }
    if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
    {
      int v24 = *(_DWORD *)(*(void *)(a1 + 336) + 136);
      if (v35) {
        uint64_t v27 = v35 + 8;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = v34;
      if (!v34) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
    int v24 = *(_DWORD *)(a1 + 80);
    if (v24)
    {
      uint64_t v25 = *(void *)(*(void *)(a1 + 88) + 8);
      if (*(unsigned char *)(v25 + 40))
      {
        unint64_t v26 = *(void *)(v25 + 456) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v26 + 23) < 0)
        {
          if (*(void *)(v26 + 8) >= 4uLL)
          {
            unint64_t v26 = *(void *)v26;
            goto LABEL_46;
          }
        }
        else if (*(unsigned __int8 *)(v26 + 23) >= 4u)
        {
LABEL_46:
          int v24 = *(_DWORD *)v26;
          if (v35) {
            uint64_t v27 = v35 + 8;
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = v34;
          if (!v34)
          {
LABEL_50:
            uint64_t v30 = v27;
LABEL_51:
            if (v30 != v27 + 8 * v28)
            {
              LOBYTE(v22) = v22 & *(unsigned char *)(*(void *)v30 + 161);
              LOBYTE(v23) = v23 & *(unsigned char *)(*(void *)v30 + 162);
            }
            goto LABEL_53;
          }
LABEL_41:
          uint64_t v29 = 8 * v28;
          uint64_t v30 = v27;
          while (*(_DWORD *)(*(void *)v30 + 144) != v24)
          {
            v30 += 8;
            v29 -= 8;
            if (!v29) {
              goto LABEL_53;
            }
          }
          goto LABEL_51;
        }
      }
      int v24 = 0;
    }
    if (v35) {
      uint64_t v27 = v35 + 8;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v34;
    if (!v34) {
      goto LABEL_50;
    }
    goto LABEL_41;
  }
  return (v17 | (v18 << 8) | (v19 << 32) | (v20 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v22 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v23 << 48) | v16;
}

void sub_DB8BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10F6120(va);
  _Unwind_Resume(a1);
}

uint64_t sub_DB8BEC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 288);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  uint64_t v2 = (uint64_t (***)())v1[11];
  if (!v2) {
    uint64_t v2 = &off_2536408;
  }
  uint64_t v3 = (int *)v1 + 41;
  if (((_BYTE)v2[2] & 8) != 0) {
    uint64_t v3 = (int *)v2 + 11;
  }
  int v4 = *v3;
  if (v4 == 3) {
    return 2;
  }
  else {
    return v4 == 2;
  }
}

BOOL sub_DB8C44(uint64_t a1)
{
  uint64_t v2 = &off_2539290;
  if (*(void *)(a1 + 296)) {
    uint64_t v2 = *(uint64_t (****)())(a1 + 296);
  }
  uint64_t v3 = *((int *)v2 + 18);
  if (v3)
  {
    int v4 = 0;
    int v5 = (unsigned int *)v2[10];
    uint64_t v6 = 4 * v3;
    do
    {
      unsigned int v7 = *v5++;
      v4 |= 1 << sub_7BB78(v7);
      v6 -= 4;
    }
    while (v6);
    LODWORD(v3) = v4 & 1;
  }
  uint64_t v8 = &off_2535C50;
  if (*(void *)(a1 + 288)) {
    uint64_t v8 = *(uint64_t (****)())(a1 + 288);
  }
  if (*((_DWORD *)v8 + 32)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v3 == 0;
  }
  return !v9 && *(_DWORD *)(a1 + 152) > 1;
}

BOOL sub_DB8D04(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 312);
  if (!v1) {
    uint64_t v1 = &off_2539C48;
  }
  return *((_DWORD *)v1 + 6) > 0;
}

BOOL sub_DB8D28(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x40) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 288));
  if ((v5[16] & 0x40) != 0)
  {
    sub_13AE48C(v3, v6);
    BOOL v2 = (v3[16] & 2) != 0 && *(unsigned char *)(v4 + 24) != 0;
    sub_13C9238(v3);
  }
  else
  {
    BOOL v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DB8DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

uint64_t sub_DB8DDC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x40) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 288));
  if ((v5[16] & 4) != 0)
  {
    sub_13AE480(v3, v6);
    if ((v3[16] & 2) != 0) {
      uint64_t v2 = *(unsigned char *)(v4 + 16) & 1;
    }
    else {
      uint64_t v2 = 0;
    }
    sub_13C6E78(v3);
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DB8E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

double sub_DB8E8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 288)) {
    uint64_t v4 = *(uint64_t (****)())(a1 + 288);
  }
  else {
    uint64_t v4 = &off_2535C50;
  }
  if (v4[10]) {
    int v5 = (uint64_t (***)())v4[10];
  }
  else {
    int v5 = &off_2535C20;
  }
  unint64_t v6 = sub_DBB218((uint64_t)v5);
  if (sub_DBB760(a1))
  {
    if (v4[11]) {
      unsigned int v7 = (uint64_t (***)())v4[11];
    }
    else {
      unsigned int v7 = &off_2536408;
    }
    sub_DBB3F0(SHIDWORD(v6), (uint64_t)v7, a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(void *)(a2 + 136) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 88) = 1065353216;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_DWORD *)(a2 + 136) = 1065353216;
    double result = NAN;
    *(_OWORD *)(a2 + 144) = xmmword_20E8670;
  }
  return result;
}

void sub_DB8F88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5B9B3C(a3);
  unint64_t v6 = (long long *)sub_377D04(a2);
  char v209 = 1;
  sub_29E004((char *)&v202, v6);
  sub_DB2A20(a1, (uint64_t)&v202, (uint64_t)__dst);
  *(_DWORD *)(a3 + 968) = *(_DWORD *)__dst;
  unsigned int v7 = *(void **)(a3 + 976);
  if (v7)
  {
    *(void *)(a3 + 984) = v7;
    operator delete(v7);
    *(void *)(a3 + 976) = 0;
    *(void *)(a3 + 984) = 0;
    *(void *)(a3 + 992) = 0;
  }
  *(_OWORD *)(a3 + 976) = *(_OWORD *)&__dst[8];
  *(void *)(a3 + 992) = *(void *)&__dst[24];
  memset(&__dst[8], 0, 24);
  *(_DWORD *)(a3 + 1000) = *(_DWORD *)&__dst[32];
  uint64_t v8 = *(void **)(a3 + 1008);
  if (v8)
  {
    *(void *)(a3 + 1016) = v8;
    operator delete(v8);
    *(void *)(a3 + 1008) = 0;
    *(void *)(a3 + 1016) = 0;
    *(void *)(a3 + 1024) = 0;
  }
  BOOL v9 = 0;
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)__p;
  *(void **)(a3 + 1024) = __p[2];
  memset(__p, 0, 24);
  uint64_t v10 = (void **)(a3 + 1032);
  if (*(char *)(a3 + 1055) < 0)
  {
    operator delete(*v10);
    BOOL v9 = __p[0];
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)&__p[3];
  *(void **)(a3 + 1048) = __p[5];
  HIBYTE(__p[5]) = 0;
  LOBYTE(__p[3]) = 0;
  *(unsigned char *)(a3 + 1056) = __p[6];
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
  if (*(void *)&__dst[8])
  {
    *(void *)&__dst[16] = *(void *)&__dst[8];
    operator delete(*(void **)&__dst[8]);
  }
  if (v209)
  {
    if (v208 < 0)
    {
      operator delete(v207);
      if ((v206 & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v204) & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_29:
        operator delete(v202);
        goto LABEL_15;
      }
    }
    else if ((v206 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v205);
    if ((SHIBYTE(v204) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_15:
  BYTE8(v161) = 0;
  char v167 = 0;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  *(void *)((char *)v177 + 5) = 0;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  int v176 = 0;
  v177[0] = 0;
  uint64_t v181 = 0x3FF0000000000000;
  uint64_t v184 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  char v185 = 5;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  int v189 = 0x7FFFFFFF;
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  memset(v193, 0, sizeof(v193));
  uint64_t v196 = -1;
  int v197 = 0x7FFFFFFF;
  uint64_t v198 = 0;
  uint64_t v199 = -1;
  int v200 = -1;
  char v201 = 0;
  sub_CA0FF4(a3, (uint64_t)__dst);
  sub_4BCC2C((uint64_t)__dst);
  *(void *)&__dst[32] = 1065353216;
  *(_OWORD *)&v165[24] = 0u;
  uint64_t v164 = 1065353216;
  *(_OWORD *)&v162[8] = 0u;
  memset(&__p[3], 0, 48);
  __p[9] = (void *)1065353216;
  memset(__dst, 0, 32);
  memset(__p, 0, 32);
  LODWORD(__p[4]) = 1065353216;
  *(_OWORD *)long long v162 = 0u;
  long long v161 = 0u;
  *(_DWORD *)&v162[16] = 1065353216;
  memset(v163, 0, sizeof(v163));
  memset(v165, 0, 32);
  *(_DWORD *)&v165[32] = 1065353216;
  long long v166 = 0uLL;
  sub_CB13A4(a3 + 712, (uint64_t *)__dst);
  sub_CB13A4(a3 + 752, (uint64_t *)__p);
  sub_CB13A4(a3 + 792, (uint64_t *)&__p[5]);
  sub_CB13A4(a3 + 832, (uint64_t *)&v161);
  sub_CB13A4(a3 + 872, (uint64_t *)v163);
  if (*(void *)(a3 + 936))
  {
    int v11 = *(void **)(a3 + 928);
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        int v11 = v12;
      }
      while (v12);
    }
    *(void *)(a3 + 928) = 0;
    uint64_t v13 = *(void *)(a3 + 920);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(void *)(*(void *)(a3 + 912) + 8 * i) = 0;
    }
    *(void *)(a3 + 936) = 0;
  }
  uint64_t v15 = *(void *)v165;
  *(void *)int v165 = 0;
  uint64_t v16 = *(void **)(a3 + 912);
  *(void *)(a3 + 912) = v15;
  if (v16) {
    operator delete(v16);
  }
  long long v17 = *(_OWORD *)&v165[8];
  *(void *)(a3 + 920) = *(void *)&v165[8];
  *(void *)&v165[8] = 0;
  uint64_t v18 = *(void *)&v165[24];
  *(void *)(a3 + 936) = *(void *)&v165[24];
  *(_DWORD *)(a3 + 944) = *(_DWORD *)&v165[32];
  *(void *)(a3 + 928) = *((void *)&v17 + 1);
  if (v18)
  {
    unint64_t v19 = *(void *)(*((void *)&v17 + 1) + 8);
    if (((unint64_t)v17 & ((void)v17 - 1)) != 0)
    {
      if (*((void *)&v17 + 1) >= (unint64_t)v17) {
        unint64_t v19 = *((void *)&v17 + 1) % (unint64_t)v17;
      }
    }
    else
    {
      unint64_t v19 = *((void *)&v17 + 1) & (v17 - 1);
    }
    *(void *)(*(void *)(a3 + 912) + 8 * v19) = a3 + 928;
    *(void *)&v165[16] = 0;
    *(void *)&v165[24] = 0;
  }
  *(void *)(a3 + 952) = v166;
  *(unsigned char *)(a3 + 960) = BYTE8(v166);
  sub_4BCA98((uint64_t)__dst);
  int v20 = *(_DWORD *)(a1 + 80);
  uint64_t v153 = a1;
  uint64_t v154 = a2;
  if (v20 < 2)
  {
    int v202 = 0;
    uint64_t v203 = 0;
    char v41 = 1;
    uint64_t v204 = 0;
  }
  else
  {
    sub_13E9AE4(__dst, *(void *)(*(void *)(a1 + 88) + 8 * (v20 - 1) + 8));
    sub_DC8988(&v202, (uint64_t)__dst, 1uLL);
    sub_1473CF4(__dst);
    unint64_t v21 = v202;
    unint64_t v22 = v203;
    if (v202 != v203)
    {
      while (1)
      {
        if (*((_DWORD *)v21 + 20) == 2)
        {
          unint64_t v23 = (uint64_t (***)())*((void *)v21 + 3);
          if (!v23) {
            unint64_t v23 = &off_25399D8;
          }
          int v24 = (*((unsigned __int8 *)v23 + 40) >> 3) & 1;
          unint64_t v25 = *(void *)(a3 + 1160);
          uint64_t v26 = *(void *)(a3 + 1168);
          if (v25 != v26 << 6)
          {
LABEL_41:
            *(void *)(a3 + 1160) = v25 + 1;
            uint64_t v27 = *(void *)(a3 + 1152);
            unint64_t v28 = v25 >> 6;
            uint64_t v29 = 1 << v25;
            if (v24) {
              goto LABEL_42;
            }
            goto LABEL_52;
          }
        }
        else
        {
          int v24 = 0;
          unint64_t v25 = *(void *)(a3 + 1160);
          uint64_t v26 = *(void *)(a3 + 1168);
          if (v25 != v26 << 6) {
            goto LABEL_41;
          }
        }
        if ((uint64_t)(v25 + 1) < 0) {
          sub_2E00();
        }
        unint64_t v33 = v26 << 7;
        if (v33 <= (v25 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v33 = (v25 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v25 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v34 = v33;
        }
        else {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110(a3 + 1152, v34);
        unint64_t v35 = *(void *)(a3 + 1160);
        *(void *)(a3 + 1160) = v35 + 1;
        uint64_t v27 = *(void *)(a3 + 1152);
        unint64_t v28 = v35 >> 6;
        uint64_t v29 = 1 << v35;
        if (v24)
        {
LABEL_42:
          *(void *)(v27 + 8 * v28) |= v29;
          int v30 = v21[65];
          unint64_t v31 = *(void *)(a3 + 1136);
          uint64_t v32 = *(void *)(a3 + 1144);
          if (v31 == v32 << 6) {
            goto LABEL_53;
          }
          goto LABEL_60;
        }
LABEL_52:
        *(void *)(v27 + 8 * v28) &= ~v29;
        int v30 = v21[65];
        unint64_t v31 = *(void *)(a3 + 1136);
        uint64_t v32 = *(void *)(a3 + 1144);
        if (v31 == v32 << 6)
        {
LABEL_53:
          if ((uint64_t)(v31 + 1) < 0) {
            sub_2E00();
          }
          unint64_t v36 = v32 << 7;
          if (v36 <= (v31 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v36 = (v31 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v31 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v37 = v36;
          }
          else {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
          }
          sub_3D110(a3 + 1128, v37);
          unint64_t v31 = *(void *)(a3 + 1136);
        }
LABEL_60:
        *(void *)(a3 + 1136) = v31 + 1;
        uint64_t v38 = *(void *)(a3 + 1128);
        unint64_t v39 = v31 >> 6;
        uint64_t v40 = 1 << v31;
        if (v30)
        {
          *(void *)(v38 + 8 * v39) |= v40;
          v21 += 88;
          if (v21 == v22)
          {
LABEL_62:
            char v41 = 0;
            goto LABEL_65;
          }
        }
        else
        {
          *(void *)(v38 + 8 * v39) &= ~v40;
          v21 += 88;
          if (v21 == v22) {
            goto LABEL_62;
          }
        }
      }
    }
    char v41 = 1;
  }
LABEL_65:
  if (*(void *)(a1 + 152)) {
    uint64_t v42 = *(uint64_t (****)())(a1 + 152);
  }
  else {
    uint64_t v42 = &off_2535C50;
  }
  *(unsigned char *)(a3 + 1176) = sub_7BB78(*((_DWORD *)v42 + 32));
  *(_DWORD *)(a3 + 1096) = 0;
  unint64_t v44 = (char *)v202;
  unint64_t v43 = (char *)v203;
  if (v202 == v203) {
    goto LABEL_76;
  }
  unint64_t v45 = v202;
  do
  {
    int v46 = *((_DWORD *)v45 + 4);
    if ((v46 & 8) != 0) {
      break;
    }
    v45 += 88;
  }
  while (v45 != v203);
  char v47 = (v46 & 8) != 0 ? v41 : 1;
  if (v47)
  {
LABEL_76:
    if (((_BYTE)v42[2] & 0x20) != 0)
    {
      *(_DWORD *)std::string __dst = *((_DWORD *)v42[14] + 6);
      sub_3B79D0((void **)(a3 + 1104), __dst);
    }
  }
  else
  {
    do
    {
      sub_13E9AE4(v157, v44);
      if ((v157[16] & 8) != 0) {
        int v48 = *(_DWORD *)(v158 + 24);
      }
      else {
        int v48 = 0;
      }
      *(_DWORD *)std::string __dst = v48;
      sub_3B79D0((void **)(a3 + 1104), __dst);
      sub_1473CF4(v157);
      v44 += 88;
    }
    while (v44 != v43);
  }
  int v49 = *((_DWORD *)v42 + 4);
  if ((v49 & 0x10000) != 0)
  {
    *(unsigned char *)(a3 + 1064) = *((unsigned char *)v42 + 143);
    uint64_t v50 = a3 + 1177;
    if ((v49 & 0x100000) == 0)
    {
LABEL_84:
      *(unsigned char *)(a3 + 1480) = *((unsigned char *)v42 + 144);
      uint64_t v51 = (void *)(a3 + 1072);
      uint64_t v52 = *(void **)(a3 + 1072);
      if (!v52) {
        goto LABEL_86;
      }
      goto LABEL_85;
    }
  }
  else
  {
    uint64_t v50 = a3 + 1177;
    if ((v49 & 0x100000) == 0) {
      goto LABEL_84;
    }
  }
  *(unsigned char *)(a3 + 1414) = *((unsigned char *)v42 + 153);
  *(unsigned char *)(a3 + 1480) = *((unsigned char *)v42 + 144);
  uint64_t v51 = (void *)(a3 + 1072);
  uint64_t v52 = *(void **)(a3 + 1072);
  if (v52)
  {
LABEL_85:
    *(void *)(a3 + 1080) = v52;
    operator delete(v52);
    void *v51 = 0;
    v51[1] = 0;
    v51[2] = 0;
  }
LABEL_86:
  void *v51 = 0;
  v51[1] = 0;
  v51[2] = 0;
  if (*(void *)(a1 + 136)) {
    unint64_t v53 = *(uint64_t (****)())(a1 + 136);
  }
  else {
    unint64_t v53 = &off_2539290;
  }
  int v54 = *((_DWORD *)v53 + 68);
  int v55 = (uint64_t (***)())v53[21];
  if (!v55) {
    int v55 = &off_2539230;
  }
  __int16 v56 = *((unsigned __int8 *)v55 + 25);
  int v57 = *((unsigned __int8 *)v55 + 26);
  if (v54 >= 255) {
    int v54 = 255;
  }
  int v58 = v54 & ~(v54 >> 31);
  *(_WORD *)uint64_t v50 = v58 | (v56 << 8);
  *(unsigned char *)(v50 + 2) = (v58 | (v57 << 16)) >> 16;
  *(void *)(a3 + 1216) = sub_DBA05C(a1);
  *(_WORD *)(v50 + 47) = v59;
  *(unsigned char *)(v50 + 49) = v60;
  int v61 = *(uint64_t (****)())(a1 + 152);
  if (!v61) {
    int v61 = &off_2535C50;
  }
  __int16 v62 = (uint64_t (***)())v61[11];
  if (!v62) {
    __int16 v62 = &off_2536408;
  }
  int v63 = *((_DWORD *)v62 + 4);
  int v64 = (int *)v62 + 11;
  __int16 v65 = (int *)v61 + 41;
  if ((v63 & 8) != 0) {
    __int16 v65 = v64;
  }
  int v66 = *v65;
  if (v66 == 3) {
    char v67 = 2;
  }
  else {
    char v67 = v66 == 2;
  }
  *(unsigned char *)(a3 + 1227) = v67;
  *(unsigned char *)(a3 + 1405) = *((unsigned char *)v53 + 223);
  *(unsigned char *)(a3 + 1406) = *((unsigned char *)v53 + 226);
  *(unsigned char *)(a3 + 1407) = *((unsigned char *)v53 + 232);
  *(unsigned char *)(a3 + 1408) = *((unsigned char *)v53 + 230);
  *(_WORD *)(a3 + 1522) = 0;
  *(_DWORD *)(v50 + 232) = 0;
  *(unsigned char *)(a3 + 1444) = *((unsigned char *)v53 + 231);
  char v68 = *(unsigned char *)(a3 + 1414);
  if (v68) {
    char v68 = *((unsigned char *)v53 + 221) != 0;
  }
  *(unsigned char *)(a3 + 1414) = v68;
  *(unsigned char *)(a3 + 1427) = *((unsigned char *)v53 + 219);
  __int16 v69 = *(uint64_t (****)())(a1 + 160);
  if (!v69) {
    __int16 v69 = &off_2539C48;
  }
  *(unsigned char *)(a3 + 1424) = *((_DWORD *)v69 + 6) > 0;
  int v70 = *((_DWORD *)v53 + 69);
  if (v70 == 2) {
    char v71 = 2;
  }
  else {
    char v71 = 1;
  }
  if (v70 == 3) {
    char v72 = 3;
  }
  else {
    char v72 = v71;
  }
  *(unsigned char *)(a3 + 1425) = v72;
  *(unsigned char *)(a3 + 1413) = *((unsigned char *)v53 + 251);
  *(_DWORD *)(a3 + 1420) = *((_DWORD *)v53 + 67);
  char v73 = &off_2539270;
  if (v53[26]) {
    char v73 = (uint64_t (***)())v53[26];
  }
  *(unsigned char *)(a3 + 1440) = *((unsigned char *)v73 + 24);
  *(unsigned char *)(a3 + 1184) = sub_49F618(*((_DWORD *)v53 + 64));
  int v74 = (uint64_t (***)())v42[12];
  if (!v74) {
    int v74 = &off_2536528;
  }
  char v75 = (uint64_t (***)())v74[8];
  if (!v75) {
    char v75 = &off_2536508;
  }
  unsigned int v76 = *((_DWORD *)v75 + 6);
  if (v76 >= 4) {
    LOBYTE(v76) = 0;
  }
  *(unsigned char *)(a3 + 1185) = v76;
  *(unsigned char *)(a3 + 1186) = *((_DWORD *)v75 + 7) == 1;
  uint64_t v77 = sub_377D04(a2);
  if (*(char *)(v77 + 47) < 0)
  {
    sub_4200(__dst, *(void **)(v77 + 24), *(void *)(v77 + 32));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(v77 + 24);
    *(void *)&__dst[16] = *(void *)(v77 + 40);
  }
  int v155 = v53;
  int v78 = (void **)(a3 + 1192);
  if (*(char *)(a3 + 1215) < 0) {
    operator delete(*v78);
  }
  *(_OWORD *)int v78 = *(_OWORD *)__dst;
  *(void *)(a3 + 1208) = *(void *)&__dst[16];
  uint64_t v79 = (__int32 *)v155[8];
  size_t v80 = *((int *)v155 + 14);
  char v81 = &v79[v80];
  BOOL v82 = wmemchr(v79, 1, v80);
  if (v82) {
    BOOL v83 = v82;
  }
  else {
    BOOL v83 = v81;
  }
  int v84 = (__int32 *)v155[8];
  size_t v85 = *((int *)v155 + 14);
  uint64_t v86 = &v84[v85];
  BOOL v87 = v83 != v86;
  BOOL v88 = wmemchr(v84, 3, v85);
  if (v88) {
    uint64_t v89 = v88;
  }
  else {
    uint64_t v89 = v86;
  }
  char v90 = (__int32 *)v155[8];
  size_t v91 = *((int *)v155 + 14);
  int v92 = &v90[v91];
  int v93 = v89 != v92;
  uint64_t v94 = wmemchr(v90, 5, v91);
  if (v94) {
    char v95 = v94;
  }
  else {
    char v95 = v92;
  }
  int v96 = (__int32 *)v155[8];
  size_t v97 = *((int *)v155 + 14);
  int v98 = &v96[v97];
  int v99 = v95 != v98;
  char v100 = wmemchr(v96, 6, v97);
  if (v100) {
    std::string v101 = v100;
  }
  else {
    std::string v101 = v98;
  }
  *(_DWORD *)(a3 + 1428) = v87 | (v93 << 8) | (v99 << 16) | ((v101 != (__int32 *)((char *)v155[8]
                                                                                + 4 * *((int *)v155 + 14))) << 24);
  std::string::size_type v102 = *(uint64_t (****)())(a1 + 152);
  if (!v102) {
    std::string::size_type v102 = &off_2535C50;
  }
  uint64_t v103 = (uint64_t (***)())v102[12];
  if (!v103) {
    uint64_t v103 = &off_2536528;
  }
  *(_DWORD *)(a3 + 1432) = (*((_DWORD *)v103 + 19) - 1) < 2;
  if (*(void *)(a1 + 136)) {
    unsigned int v104 = *(uint64_t (****)())(a1 + 136);
  }
  else {
    unsigned int v104 = &off_2539290;
  }
  uint64_t v105 = (__int32 *)v104[8];
  size_t v106 = *((int *)v104 + 14);
  char v107 = &v105[v106];
  size_t v108 = wmemchr(v105, 4, v106);
  if (v108) {
    uint64_t v109 = v108;
  }
  else {
    uint64_t v109 = v107;
  }
  int v110 = (__int32 *)v104[8];
  uint64_t v111 = *((int *)v104 + 14);
  if (v109 == &v110[v111])
  {
    int v114 = *(uint64_t (****)())(a1 + 152);
    if (!v114) {
      int v114 = &off_2535C50;
    }
    BOOL v115 = (uint64_t (***)())v114[12];
    if (!v115) {
      BOOL v115 = &off_2536528;
    }
    if ((*((_DWORD *)v115 + 19) - 3) > 0xFFFFFFFD)
    {
      int v112 = 1;
      size_t v113 = v155;
    }
    else
    {
      if (v111)
      {
        size_t v113 = v155;
        while ((*v110 & 0xFFFFFFFD) != 1)
        {
          if (++v110 == v109)
          {
            int v110 = v109;
            break;
          }
        }
      }
      else
      {
        size_t v113 = v155;
      }
      int v112 = v110 != v109;
    }
  }
  else
  {
    int v112 = 2;
    size_t v113 = v155;
  }
  *(_DWORD *)(a3 + 1436) = v112;
  *(unsigned char *)(a3 + 1442) = *((unsigned char *)v113 + 225);
  *(_DWORD *)(a3 + 1445) = 0;
  *(unsigned char *)(a3 + 1449) = 0;
  char v116 = *((unsigned char *)v113 + 228);
  if (v116) {
    char v116 = *((unsigned char *)v113 + 232) != 0;
  }
  *(unsigned char *)(a3 + 1443) = v116;
  *(_WORD *)(a3 + 1415) = *((_WORD *)v42 + 77);
  *(_DWORD *)(v50 + 273) = *(_DWORD *)((char *)v113 + 234);
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_25E7790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_25E7790))
  {
    sub_13B1790((uint64_t)&unk_25EB620, 0, 0);
    __cxa_guard_release(qword_25E7790);
  }
  *(unsigned char *)(a3 + 1481) = byte_25EB63D;
  uint64_t v117 = *((int *)v42 + 14);
  if (v117)
  {
    double v118 = v42[8];
    size_t v119 = (uint64_t (**)())((char *)v118 + 4 * v117);
    uint64_t v156 = (void **)(a3 + 1456);
    size_t v120 = *(char **)(a3 + 1464);
    while (1)
    {
      BOOL v122 = *(_DWORD *)v118 == 1;
      unint64_t v123 = *(void *)(a3 + 1472);
      if ((unint64_t)v120 >= v123) {
        break;
      }
      *(_DWORD *)size_t v120 = v122;
      uint64_t v121 = (uint64_t)(v120 + 4);
LABEL_171:
      *(void *)(a3 + 1464) = v121;
      double v118 = (uint64_t (**)())((char *)v118 + 4);
      size_t v120 = (char *)v121;
      if (v118 == v119) {
        goto LABEL_199;
      }
    }
    long long v124 = (char *)*v156;
    uint64_t v125 = v120 - (unsigned char *)*v156;
    uint64_t v126 = v125 >> 2;
    unint64_t v127 = (v125 >> 2) + 1;
    if (v127 >> 62) {
      sub_2E00();
    }
    uint64_t v128 = v123 - (void)v124;
    if (v128 >> 1 > v127) {
      unint64_t v127 = v128 >> 1;
    }
    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v129 = v127;
    }
    if (v129)
    {
      if (v129 >> 62) {
        sub_188D718();
      }
      __n128 v130 = operator new(4 * v129);
      size_t v131 = (BOOL *)&v130[4 * v126];
      *size_t v131 = v122;
      uint64_t v121 = (uint64_t)(v131 + 1);
      if (v120 == v124) {
        goto LABEL_187;
      }
    }
    else
    {
      __n128 v130 = 0;
      size_t v131 = (BOOL *)(4 * v126);
      *(_DWORD *)(4 * v126) = v122;
      uint64_t v121 = 4 * v126 + 4;
      if (v120 == v124) {
        goto LABEL_187;
      }
    }
    unint64_t v132 = v120 - 4 - v124;
    if (v132 >= 0xBC)
    {
      if (&v130[v125 - 4 - (v132 & 0xFFFFFFFFFFFFFFFCLL)] > &v130[v125 - 4])
      {
        int v133 = v120;
      }
      else if (&v120[-(v132 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v120 - 4)
      {
        int v133 = v120;
      }
      else if ((unint64_t)(v120 - v130 - v125) >= 0x20)
      {
        uint64_t v135 = (v132 >> 2) + 1;
        uint64_t v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
        int v133 = &v120[-v136];
        size_t v131 = (BOOL *)((char *)v131 - v136);
        size_t v137 = &v130[4 * v126 - 16];
        uint64_t v138 = v120 - 16;
        uint64_t v139 = v135 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v140 = *(_OWORD *)v138;
          *(v137 - 1) = *((_OWORD *)v138 - 1);
          *size_t v137 = v140;
          v137 -= 2;
          v138 -= 32;
          v139 -= 8;
        }
        while (v139);
        if (v135 == (v135 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_187:
          *(void *)(a3 + 1456) = v131;
          *(void *)(a3 + 1464) = v121;
          *(void *)(a3 + 1472) = &v130[4 * v129];
          if (v124) {
            operator delete(v124);
          }
          goto LABEL_171;
        }
      }
      else
      {
        int v133 = v120;
      }
    }
    else
    {
      int v133 = v120;
    }
    do
    {
      int v134 = *((_DWORD *)v133 - 1);
      v133 -= 4;
      *--size_t v131 = v134;
    }
    while (v133 != v124);
    goto LABEL_187;
  }
LABEL_199:
  std::string::operator=((std::string *)(a3 + 1488), (const std::string *)((unint64_t)v155[18] & 0xFFFFFFFFFFFFFFFELL));
  *(unsigned char *)(a3 + 1512) = *((unsigned char *)v155 + 240);
  *(_WORD *)(a3 + 1513) = *(_WORD *)((char *)v155 + 241);
  *(_WORD *)(a3 + 1515) = *((_WORD *)v155 + 123);
  *(unsigned char *)(a3 + 1517) = *((unsigned char *)v155 + 254);
  *(_WORD *)(a3 + 1518) = *((_WORD *)v155 + 126);
  *(unsigned char *)(a3 + 1521) = *((unsigned char *)v155 + 248);
  int v141 = (uint64_t (***)())v155[25];
  if (!v141) {
    int v141 = &off_2539250;
  }
  *(unsigned char *)(a3 + 1441) = *((unsigned char *)v141 + 25);
  *(unsigned char *)(a3 + 1520) = *((unsigned char *)v155 + 250);
  uint64_t v142 = *(uint64_t (****)())(v153 + 152);
  if (!v142) {
    uint64_t v142 = &off_2535C50;
  }
  long long v143 = (uint64_t (***)())v142[10];
  if (v143) {
    long long v144 = v143;
  }
  else {
    long long v144 = &off_2535C20;
  }
  sub_DBB218((uint64_t)v144);
  memset(&__dst[8], 0, 32);
  memset(__p, 0, sizeof(__p));
  *(_DWORD *)std::string __dst = 0x7FFFFFFF;
  *(void *)&__dst[4] = 0x7FFFFFFF7FFFFFFFLL;
  __p[0] = 0;
  LODWORD(__p[1]) = 0;
  LODWORD(__p[6]) = 1065353216;
  long long v161 = 0u;
  *(void *)long long v162 = 1065353216;
  *(_OWORD *)&v162[8] = xmmword_20E8670;
  uint64_t v145 = *(void *)__dst;
  *(void *)(a3 + 1237) = *(void *)&__dst[5];
  *(void *)(a3 + 1232) = v145;
  char v146 = (void *)(a3 + 1248);
  uint64_t v147 = *(void **)(a3 + 1248);
  if (v147)
  {
    *(void *)(a3 + 1256) = v147;
    operator delete(v147);
    *char v146 = 0;
    *(void *)(a3 + 1256) = 0;
    *(void *)(a3 + 1264) = 0;
  }
  *char v146 = 0;
  *(void *)(a3 + 1256) = 0;
  *(void *)(a3 + 1264) = 0;
  memset(&__dst[16], 0, 24);
  *(void **)(a3 + 1272) = __p[0];
  *(_DWORD *)(a3 + 1280) = __p[1];
  sub_62BDC(a3 + 1288, (uint64_t *)&__p[2]);
  *(_DWORD *)(a3 + 1328) = __p[7];
  sub_62BDC(a3 + 1336, (uint64_t *)&__p[8]);
  *(_OWORD *)(a3 + 1376) = *(_OWORD *)&v162[8];
  sub_402628(__dst);
  *(unsigned char *)(a3 + 1524) = 0;
  *(unsigned char *)(a3 + 1482) = *((unsigned char *)v155 + 249);
  uint64_t v148 = sub_37B3A8(v154);
  uint64_t v149 = *(void *)v148;
  *(_DWORD *)(a3 + 1400) = *(_DWORD *)(v148 + 8);
  *(void *)(a3 + 1392) = v149;
  *(unsigned char *)(a3 + 1525) = 0;
  char v150 = v202;
  if (v202)
  {
    uint64_t v151 = (uint64_t)v203;
    uint64_t v152 = v202;
    if (v203 != v202)
    {
      do
        uint64_t v151 = sub_1473CF4(v151 - 88);
      while ((unsigned __int8 *)v151 != v150);
      uint64_t v152 = v202;
    }
    uint64_t v203 = v150;
    operator delete(v152);
  }
}

void sub_DB9F18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_25E7790);
  sub_DB75EC((void **)(v2 - 184));
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

double sub_DB9FC4@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 413) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(a1 + 472) = 0x3FF0000000000000;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 5;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 560) = 0x7FFFFFFF;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 625) = 0u;
  double result = NAN;
  *(void *)(a1 + 664) = -1;
  *(_DWORD *)(a1 + 672) = 0x7FFFFFFF;
  *(void *)(a1 + 676) = 0;
  *(void *)(a1 + 688) = -1;
  *(_DWORD *)(a1 + 696) = -1;
  *(unsigned char *)(a1 + 704) = 0;
  return result;
}

uint64_t sub_DBA05C(uint64_t a1)
{
  if (*(void *)(a1 + 136)) {
    uint64_t v1 = *(uint64_t (****)())(a1 + 136);
  }
  else {
    uint64_t v1 = &off_2539290;
  }
  if (*(void *)(a1 + 152)) {
    uint64_t v2 = *(uint64_t (****)())(a1 + 152);
  }
  else {
    uint64_t v2 = &off_2535C50;
  }
  uint64_t v3 = (uint64_t (***)())v2[15];
  if (!v3) {
    uint64_t v3 = &off_25364E0;
  }
  uint64_t v4 = (uint64_t (***)())v3[3];
  int v5 = &off_25364A0;
  if (v4) {
    int v5 = v4;
  }
  uint64_t v6 = *((unsigned __int8 *)v5 + 26);
  uint64_t v7 = *((unsigned __int8 *)v5 + 25);
  uint64_t v8 = (uint64_t (***)())v2[11];
  if (!v8) {
    uint64_t v8 = &off_2536408;
  }
  BOOL v9 = (uint64_t (***)())v8[3];
  uint64_t v10 = &off_25363D0;
  if (v9) {
    uint64_t v10 = v9;
  }
  uint64_t v11 = *((unsigned __int8 *)v10 + 48);
  uint64_t v12 = *((unsigned __int8 *)v10 + 49);
  uint64_t v13 = *((unsigned __int8 *)v1 + 228);
  uint64_t v14 = *((unsigned __int8 *)v1 + 237);
  uint64_t v15 = (uint64_t (***)())v2[13];
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = &off_25365A0;
  }
  uint64_t v17 = *((int *)v16 + 6);
  if (v17)
  {
    uint64_t v18 = v16[4];
    uint64_t v19 = 4 * v17;
    while (*(_DWORD *)v18)
    {
      uint64_t v18 = (uint64_t (**)())((char *)v18 + 4);
      v19 -= 4;
      if (!v19) {
        goto LABEL_22;
      }
    }
    uint64_t v20 = 0x100000000000000;
  }
  else
  {
LABEL_22:
    uint64_t v20 = 0;
  }
  return v20 | (v12 << 48) | (v11 << 40) | (v13 << 32) | (v14 << 24) | (v7 << 8) | v6;
}

BOOL sub_DBA174(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 160);
  if (!v1) {
    uint64_t v1 = &off_2539C48;
  }
  return *((_DWORD *)v1 + 6) > 0;
}

uint64_t sub_DBA198(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 136);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  int v2 = *((_DWORD *)v1 + 69);
  if (v2 == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (v2 == 3) {
    return 3;
  }
  else {
    return v3;
  }
}

BOOL sub_DBA1C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 152);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  int v2 = (uint64_t (***)())v1[12];
  if (!v2) {
    int v2 = &off_2536528;
  }
  return (*((_DWORD *)v2 + 19) - 1) < 2;
}

uint64_t sub_DBA204(uint64_t *a1)
{
  uint64_t v2 = sub_65800();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v3 = sub_1133208(1u);
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v11[0] = *a1;
  v11[1] = v4;
  int v12 = 0;
  unint64_t v13 = v5;
  v8[0] = qword_25EB5F0;
  v8[1] = unk_25EB5F8;
  int v9 = 2;
  uint64_t v10 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 40))(v2, v11, v8);
  if ((v6 & 0x80000000) == 0 && v6 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v3 = *(void *)(qword_25EB5F0 + 8 * v6);
  }
  v11[0] = v3;
  return sub_1132F18(v11);
}

void sub_DBA32C(_Unwind_Exception *a1)
{
}

uint64_t sub_DBA344(long long *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 0;
  }
  uint64_t v3 = sub_65954();
  if (*((char *)a1 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v19 = *((void *)a1 + 2);
  }
  sub_4BDC0C(&__p, (uint64_t)&__dst, 1uLL);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v5 = sub_1133208(0x14u);
  v15[0] = (uint64_t)__p;
  v15[1] = (uint64_t)v11;
  int v16 = 0;
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (unsigned char *)__p) >> 3);
  v12[0] = qword_25EB5F0;
  v12[1] = unk_25EB5F8;
  int v13 = 2;
  uint64_t v14 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v3 + 40))(v3, v15, v12);
  if ((v6 & 0x80000000) == 0 && v6 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v5 = *(void *)(qword_25EB5F0 + 8 * v6);
  }
  v15[0] = v5;
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v11;
    int v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = __p;
    }
    uint64_t v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__dst);
  }
  return sub_1132F18(v15);
}

void sub_DBA54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_25E77B0);
  sub_1A668((void **)va);
  if (*(char *)(v2 - 41) < 0) {
    operator delete(*(void **)(v2 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_DBA590(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t (****)())(a1 + 344);
  if (!v5) {
    uint64_t v5 = &off_2539290;
  }
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  int v6 = v5[6];
  if (v6) {
    uint64_t v7 = (unsigned __int8 ***)(v6 + 1);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 10);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = 8 * v8;
  while (1)
  {
    uint64_t v11 = __p;
    uint64_t v10 = v22;
    if ((unint64_t)(v22 - (unsigned char *)__p) > 0x4F) {
      break;
    }
    int v12 = *((char *)*v7 + 23);
    if (v12 >= 0) {
      int v13 = (unsigned __int8 *)*v7;
    }
    else {
      int v13 = **v7;
    }
    if (v12 >= 0) {
      unint64_t v14 = *((unsigned __int8 *)*v7 + 23);
    }
    else {
      unint64_t v14 = (unint64_t)(*v7)[1];
    }
    if (v14 >= 0x1F) {
      uint64_t v15 = 31;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 == 1)
      {
        *(void *)&long long v24 = *v13;
        *((void *)&v24 + 1) = 1;
      }
      else
      {
        if (v15 != 2)
        {
          sub_76DEC(v13, v15, (uint64_t)&v24);
          goto LABEL_27;
        }
        *(void *)&long long v24 = *(unsigned __int16 *)v13;
        *((void *)&v24 + 1) = 2;
      }
      long long v25 = 0u;
      long long v26 = 0u;
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
    }
LABEL_27:
    uint64_t v20 = sub_1133038((uint64_t)&v24, 0);
    if (sub_1132F18(&v20)) {
      sub_29603C(&__p, &v20);
    }
    ++v7;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v11 = __p;
      uint64_t v10 = v22;
      break;
    }
  }
  if (v11 != v10)
  {
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v23;
    return;
  }
LABEL_32:
  if (*(unsigned char *)(a2 + 72) && (unsigned int v16 = sub_DBA344((long long *)a2)) != 0)
  {
    uint64_t v17 = sub_1133298(v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v18 = operator new(8uLL);
  }
  else
  {
    uint64_t v17 = sub_1133298(0xBu);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v18 = operator new(8uLL);
  }
  *a3 = v18;
  *uint64_t v18 = v17;
  uint64_t v19 = v18 + 1;
  a3[1] = v19;
  a3[2] = v19;
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
}

void sub_DBA78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DBA7C0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::string __p = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (unsigned __int8 ***)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 56);
  if (!v7) {
    goto LABEL_30;
  }
  uint64_t v8 = 8 * v7;
  while (1)
  {
    uint64_t v10 = __p;
    uint64_t v9 = v21;
    if ((unint64_t)(v21 - (unsigned char *)__p) > 0x4F) {
      break;
    }
    int v11 = *((char *)*v6 + 23);
    if (v11 >= 0) {
      int v12 = (unsigned __int8 *)*v6;
    }
    else {
      int v12 = **v6;
    }
    if (v11 >= 0) {
      unint64_t v13 = *((unsigned __int8 *)*v6 + 23);
    }
    else {
      unint64_t v13 = (unint64_t)(*v6)[1];
    }
    if (v13 >= 0x1F) {
      uint64_t v14 = 31;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 == 1)
      {
        *(void *)&long long v23 = *v12;
        *((void *)&v23 + 1) = 1;
      }
      else
      {
        if (v14 != 2)
        {
          sub_76DEC(v12, v14, (uint64_t)&v23);
          goto LABEL_25;
        }
        *(void *)&long long v23 = *(unsigned __int16 *)v12;
        *((void *)&v23 + 1) = 2;
      }
      long long v24 = 0u;
      long long v25 = 0u;
    }
    else
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
    }
LABEL_25:
    uint64_t v19 = sub_1133038((uint64_t)&v23, 0);
    if (sub_1132F18(&v19)) {
      sub_29603C(&__p, &v19);
    }
    ++v6;
    v8 -= 8;
    if (!v8)
    {
      uint64_t v10 = __p;
      uint64_t v9 = v21;
      break;
    }
  }
  if (v10 != v9)
  {
    *a3 = v10;
    a3[1] = v9;
    a3[2] = v22;
    return;
  }
LABEL_30:
  if (*(unsigned char *)(a2 + 72) && (unsigned int v15 = sub_DBA344((long long *)a2)) != 0)
  {
    uint64_t v16 = sub_1133298(v15);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v17 = operator new(8uLL);
  }
  else
  {
    uint64_t v16 = sub_1133298(0xBu);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v17 = operator new(8uLL);
  }
  *a3 = v17;
  *uint64_t v17 = v16;
  uint64_t v18 = v17 + 1;
  a3[1] = v18;
  a3[2] = v18;
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_DBA9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBA9DC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 344)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 344);
  }
  else {
    uint64_t v3 = &off_2539290;
  }
  std::string __p = 0;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v4 = v3[6];
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((int *)v3 + 10);
  if (!v6) {
    goto LABEL_23;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 8 * v6;
  do
  {
    uint64_t v10 = *v5;
    if ((unint64_t)v7 < v22)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v7, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v7 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)uint64_t v7 = v9;
      }
      v7 += 24;
    }
    else
    {
      uint64_t v7 = sub_1D740((char **)&__p, v10);
    }
    unint64_t v21 = v7;
    ++v5;
    v8 -= 8;
  }
  while (v8);
  if (!*((_DWORD *)v3 + 10))
  {
LABEL_23:
    uint64_t v14 = 0;
    unsigned int v15 = (char *)__p;
    if (!__p) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v11 = sub_656AC();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v12 = sub_1133208(0x14u);
  v26[0] = __p;
  v26[1] = v21;
  int v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 3);
  v23[0] = qword_25EB5F0;
  v23[1] = unk_25EB5F8;
  int v24 = 2;
  uint64_t v25 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v13 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 40))(v11, v26, v23);
  if ((v13 & 0x80000000) == 0 && v13 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v12 = *(void *)(qword_25EB5F0 + 8 * v13);
  }
  uint64_t v19 = v12;
  uint64_t v14 = sub_1132F18(&v19);
  unsigned int v15 = (char *)__p;
  if (__p)
  {
LABEL_24:
    uint64_t v16 = (void **)v21;
    uint64_t v17 = v15;
    if (v21 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      uint64_t v17 = __p;
    }
    unint64_t v21 = v15;
    operator delete(v17);
  }
LABEL_31:
  if (!v14)
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 11;
    }
    uint64_t v14 = sub_DBA344((long long *)a2);
    if (!v14) {
      return 11;
    }
  }
  return v14;
}

void sub_DBAC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_25E77B0);
  if (a3) {
    sub_20B0814((uint64_t)va, a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DBAC88(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(a1 + 56);
  if (!v5) {
    goto LABEL_20;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 8 * v5;
  do
  {
    uint64_t v10 = *v4;
    if ((unint64_t)v7 < v22)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v7, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v7 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)uint64_t v7 = v9;
      }
      v7 += 24;
    }
    else
    {
      uint64_t v7 = sub_1D740((char **)&__p, v10);
    }
    unint64_t v21 = v7;
    ++v4;
    v8 -= 8;
  }
  while (v8);
  if (!*(_DWORD *)(a1 + 56))
  {
LABEL_20:
    uint64_t v14 = 0;
    unsigned int v15 = (char *)__p;
    if (!__p) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  uint64_t v11 = sub_656AC();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B0))
  {
    sub_DC735C();
    sub_DC7FC4((long long **)qword_25EB608, (uint64_t **)&qword_25EB5F0);
    __cxa_guard_release(&qword_25E77B0);
  }
  uint64_t v12 = sub_1133208(0x14u);
  v26[0] = __p;
  v26[1] = v21;
  int v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 3);
  v23[0] = qword_25EB5F0;
  v23[1] = unk_25EB5F8;
  int v24 = 2;
  uint64_t v25 = (unk_25EB5F8 - qword_25EB5F0) >> 3;
  int v13 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 40))(v11, v26, v23);
  if ((v13 & 0x80000000) == 0 && v13 < (int)((unint64_t)(unk_25EB5F8 - qword_25EB5F0) >> 3)) {
    uint64_t v12 = *(void *)(qword_25EB5F0 + 8 * v13);
  }
  uint64_t v19 = v12;
  uint64_t v14 = sub_1132F18(&v19);
  unsigned int v15 = (char *)__p;
  if (__p)
  {
LABEL_21:
    uint64_t v16 = (void **)v21;
    uint64_t v17 = v15;
    if (v21 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != (void **)v15);
      uint64_t v17 = __p;
    }
    unint64_t v21 = v15;
    operator delete(v17);
  }
LABEL_28:
  if (!v14)
  {
    if (!*(unsigned char *)(a2 + 72)) {
      return 11;
    }
    uint64_t v14 = sub_DBA344((long long *)a2);
    if (!v14) {
      return 11;
    }
  }
  return v14;
}

void sub_DBAED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __cxa_guard_abort(&qword_25E77B0);
  if (a3) {
    sub_20B0814((uint64_t)va, a3);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_DBAF24@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = &off_2539290;
  if (*((void *)result + 43)) {
    uint64_t v3 = (uint64_t (***)())*((void *)result + 43);
  }
  uint64_t v4 = (uint64_t (***)())v3[24];
  if (!v4) {
    uint64_t v4 = &off_253F750;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v5 = *((int *)v4 + 6);
  if (v5)
  {
    uint64_t v6 = v4[4];
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 2)
      {
        int v11 = 3;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (v8 == 1)
      {
        int v11 = 1;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (!v8)
      {
        int v11 = 2;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      uint64_t v6 = (uint64_t (**)())((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v13;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = operator new(8uLL);
    *(void *)a2 = v10;
    *uint64_t v10 = 0x200000001;
    double result = v10 + 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = result;
  }
  return result;
}

void sub_DBB054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_DBB07C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = &off_254D3B0;
  if (*((void *)result + 23)) {
    uint64_t v3 = (uint64_t (***)())*((void *)result + 23);
  }
  uint64_t v4 = (uint64_t (***)())v3[37];
  if (!v4) {
    uint64_t v4 = &off_253F750;
  }
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t v5 = *((int *)v4 + 6);
  if (v5)
  {
    uint64_t v6 = v4[4];
    uint64_t v7 = 4 * v5;
    do
    {
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == 2)
      {
        int v11 = 3;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (v8 == 1)
      {
        int v11 = 1;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      else if (!v8)
      {
        int v11 = 2;
        double result = sub_745A4((uint64_t)&v12, &v11);
      }
      uint64_t v6 = (uint64_t (**)())((char *)v6 + 4);
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v13;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v9;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v10 = operator new(8uLL);
    *(void *)a2 = v10;
    *uint64_t v10 = 0x200000001;
    double result = v10 + 1;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = result;
  }
  return result;
}

void sub_DBB1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_DBB1D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  uint64_t v2 = (uint64_t (***)())v1[10];
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = &off_2535C20;
  }
  return sub_DBB218((uint64_t)v3);
}

unint64_t sub_DBB218(uint64_t a1)
{
  uint64_t v2 = sub_69510();
  if (sub_68ECC((uint64_t)v2) && sub_691F8((uint64_t)v2) != 0x7FFFFFFF)
  {
    uint64_t v3 = sub_691F8((uint64_t)v2);
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      return v3 | (unint64_t)(v3 << 32);
    }
  }
  else if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
    uint64_t v3 = (int)(*(double *)(a1 + 32) + 978307200.0);
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      return v3 | (unint64_t)(v3 << 32);
    }
  }
  else
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    uint64_t v3 = std::chrono::system_clock::to_time_t(&__t);
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      return v3 | (unint64_t)(v3 << 32);
    }
  }
  return (int)(*(double *)(a1 + 24) + 978307200.0) | (unint64_t)(v3 << 32);
}

unint64_t sub_DBB2FC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 288);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  uint64_t v2 = (uint64_t (***)())v1[10];
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = &off_2535C20;
  }
  return sub_DBB218((uint64_t)v3);
}

uint64_t sub_DBB340(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x20) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 304));
  if ((v5[16] & 4) != 0)
  {
    sub_13AE480(v3, v6);
    if ((v3[16] & 2) != 0) {
      uint64_t v2 = (*(unsigned __int8 *)(v4 + 16) >> 1) & 1;
    }
    else {
      uint64_t v2 = 0;
    }
    sub_13C6E78(v3);
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DBB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

void sub_DBB3F0(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(uint64_t (****)())(a2 + 32);
  if (!v6) {
    uint64_t v6 = &off_2536398;
  }
  uint64_t v7 = (uint64_t (***)())v6[4];
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = &off_2536310;
  }
  int v9 = *((_DWORD *)v8 + 21);
  int v11 = *((_DWORD *)v8 + 18);
  int v10 = *((_DWORD *)v8 + 19);
  if (v10 >= v11) {
    int v12 = *((_DWORD *)v8 + 18);
  }
  else {
    int v12 = *((_DWORD *)v8 + 19);
  }
  if (v11 >= v9) {
    int v13 = v12;
  }
  else {
    int v13 = *((_DWORD *)v8 + 21);
  }
  sub_40A2D8(&v52, 1000 * v13, 1000 * v9, 1000 * v10);
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  int v49 = 0;
  if (((_BYTE)v8[2] & 0x10) != 0)
  {
    sub_13946E4(v45, v8[7]);
    if (v47 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * v47;
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v48 + v15 + 8);
          int v18 = *(_DWORD *)(v17 + 24);
          if ((v18 - 1) >= 0xA) {
            LOBYTE(v18) = 0;
          }
          LODWORD(v14) = *(_DWORD *)(v17 + 28);
          int v19 = llround((double)v14 * 1000.0);
          char v44 = v18;
          LODWORD(__p[0]) = v19;
          char v43 = 0;
          uint64_t v20 = v50;
          if ((unint64_t)v50 < v51) {
            break;
          }
          uint64_t v50 = (char *)sub_DC85BC((uint64_t *)&v49, &v44, (int *)__p, &v43);
          v15 += 8;
          if (v16 == v15) {
            goto LABEL_20;
          }
        }
        sub_87E68((uint64_t)v50, v18, v19, 0);
        uint64_t v50 = v20 + 12;
        v15 += 8;
      }
      while (v16 != v15);
    }
LABEL_20:
    sub_1394770(v45);
  }
  sub_DBF304((uint64_t)v45, (unint64_t)v8[3] & 0xFFFFFFFFFFFFFFFELL);
  sub_DBF304((uint64_t)__p, (unint64_t)v8[4] & 0xFFFFFFFFFFFFFFFELL);
  int v21 = *((_DWORD *)v8 + 4);
  if ((v21 & 0x800) != 0)
  {
    int v22 = *((_DWORD *)v8 + 22) + 978307200;
    if ((v21 & 0x20) != 0) {
      goto LABEL_23;
    }
  }
  else
  {
    int v22 = 0x7FFFFFFF;
    if ((v21 & 0x20) != 0)
    {
LABEL_23:
      uint64_t v23 = *((unsigned int *)v8 + 16);
      goto LABEL_26;
    }
  }
  uint64_t v23 = 0xFFFFFFFFLL;
LABEL_26:
  int v24 = *(uint64_t (****)())(a2 + 32);
  if (!v24) {
    int v24 = &off_2536398;
  }
  uint64_t v25 = (uint64_t (***)())v24[5];
  if (!v25) {
    uint64_t v25 = &off_2536378;
  }
  unsigned int v26 = *((_DWORD *)v25 + 4);
  BOOL v27 = (~v26 & 3) == 0;
  int v29 = *((_DWORD *)v25 + 6);
  int v28 = *((_DWORD *)v25 + 7);
  BOOL v30 = v29 == 1;
  BOOL v31 = v29 == 1;
  if (v30) {
    BOOL v27 = 0;
  }
  BOOL v30 = v28 == 1;
  int v32 = v26 & v31 | (v28 == 1) & (v26 >> 1);
  BOOL v33 = !v30 && v27;
  if (v32) {
    int v34 = 2;
  }
  else {
    int v34 = v33;
  }
  sub_DAFB6C(a3, &v52, *((unsigned char *)v8 + 80), (uint64_t)v45, (uint64_t)__p, (uint64_t)&v49, a1, v22, v23, SHIDWORD(v23), v34);
  unint64_t v35 = v42;
  if (v42)
  {
    do
    {
      unint64_t v39 = *(char **)v35;
      sub_57AC8((uint64_t *)v35 + 5);
      if (v35[39] < 0) {
        operator delete(*((void **)v35 + 2));
      }
      operator delete(v35);
      unint64_t v35 = v39;
    }
    while (v39);
  }
  unint64_t v36 = __p[0];
  __p[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  unint64_t v37 = v46;
  if (v46)
  {
    do
    {
      uint64_t v40 = *(char **)v37;
      sub_57AC8((uint64_t *)v37 + 5);
      if (v37[39] < 0) {
        operator delete(*((void **)v37 + 2));
      }
      operator delete(v37);
      unint64_t v37 = v40;
    }
    while (v40);
  }
  uint64_t v38 = v45[0];
  v45[0] = 0;
  if (v38) {
    operator delete(v38);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
}

void sub_DBB700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int v19 = *(void **)(v17 - 120);
  if (v19)
  {
    *(void *)(v17 - 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBB760(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x40) == 0) {
    return 0;
  }
  sub_13AE490(v5, *(void *)(a1 + 288));
  if ((v5[16] & 4) != 0)
  {
    sub_13AE480(v3, v6);
    if ((v3[16] & 2) != 0) {
      uint64_t v2 = (*(unsigned __int8 *)(v4 + 16) >> 1) & 1;
    }
    else {
      uint64_t v2 = 0;
    }
    sub_13C6E78(v3);
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_13AE650(v5);
  return v2;
}

void sub_DBB7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_13AE650(va);
  _Unwind_Resume(a1);
}

char *sub_DBB810@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = &off_2535C50;
  if (*((void *)result + 38)) {
    uint64_t v3 = (uint64_t (***)())*((void *)result + 38);
  }
  uint64_t v4 = (uint64_t (***)())v3[11];
  if (!v4) {
    uint64_t v4 = &off_2536408;
  }
  uint64_t v5 = (uint64_t (***)())v4[3];
  if (!v5) {
    uint64_t v5 = &off_25363D0;
  }
  uint64_t v6 = v5[5];
  if (v6) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 8);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    do
    {
      int v10 = (uint64_t (***)())*((void *)*v7 + 3);
      if (!v10) {
        int v10 = &off_2536278;
      }
      int v11 = v10[3];
      unsigned int v12 = *((_DWORD *)*v7 + 8);
      if (v12 >= 3) {
        LOBYTE(v12) = 0;
      }
      char v14 = v12;
      uint64_t v13 = nullsub_1(v11);
      double result = sub_DBB920((uint64_t)a2, &v13, &v14);
      ++v7;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void sub_DBB8F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBB90C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if (v1 >= 3) {
    LOBYTE(v1) = 0;
  }
  return v1;
}

char *sub_DBB920(uint64_t a1, void *a2, char *a3)
{
  uint64_t v7 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    int v10 = *(unsigned char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1] >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 60) {
      sub_188D718();
    }
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (char *)operator new(16 * v15);
    char v18 = *a3;
    int v19 = &v17[16 * v11];
    *(void *)int v19 = *a2;
    v19[8] = v18;
    for (uint64_t i = v19 + 16; v7 != v10; v19[8] = v21)
    {
      uint64_t v20 = *((void *)v7 - 2);
      v7 -= 16;
      char v21 = v7[8];
      *((void *)v19 - 2) = v20;
      v19 -= 16;
    }
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    char v8 = *a3;
    *(void *)uint64_t v7 = *a2;
    v7[8] = v8;
    uint64_t i = v7 + 16;
  }
  *(void *)(a1 + 8) = i;
  return i - 16;
}

char *sub_DBBA34@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = &off_2535C50;
  if (*((void *)result + 36)) {
    uint64_t v3 = (uint64_t (***)())*((void *)result + 36);
  }
  uint64_t v4 = (uint64_t (***)())v3[11];
  if (!v4) {
    uint64_t v4 = &off_2536408;
  }
  uint64_t v5 = (uint64_t (***)())v4[3];
  if (!v5) {
    uint64_t v5 = &off_25363D0;
  }
  unint64_t v6 = v5[5];
  if (v6) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *((int *)v5 + 8);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    do
    {
      int v10 = (uint64_t (***)())*((void *)*v7 + 3);
      if (!v10) {
        int v10 = &off_2536278;
      }
      uint64_t v11 = v10[3];
      unsigned int v12 = *((_DWORD *)*v7 + 8);
      if (v12 >= 3) {
        LOBYTE(v12) = 0;
      }
      char v14 = v12;
      uint64_t v13 = nullsub_1(v11);
      double result = sub_DBB920((uint64_t)a2, &v13, &v14);
      ++v7;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void sub_DBBB14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBBB30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 40);
  if ((v2 & 0x10000) != 0)
  {
    uint64_t v3 = *(void *)(result + 392);
    if (*(unsigned char *)(v3 + 16))
    {
      *(_DWORD *)a2 = *(_DWORD *)(v3 + 48);
      *(unsigned char *)(a2 + 4) = 1;
      return result;
    }
  }
  if ((v2 & 1) == 0)
  {
    *(void *)a2 = 0;
    return result;
  }
  unint64_t v4 = *(void *)(result + 264) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    if (*(void *)(v4 + 8) < 4uLL)
    {
      *(_DWORD *)a2 = 0;
      *(unsigned char *)(a2 + 4) = 1;
      return result;
    }
    unint64_t v4 = *(void *)v4;
  }
  else if (*(unsigned __int8 *)(v4 + 23) < 4u)
  {
    *(_DWORD *)a2 = 0;
    *(unsigned char *)(a2 + 4) = 1;
    return result;
  }
  *(_DWORD *)a2 = *(_DWORD *)v4;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

unint64_t sub_DBBBCC(uint64_t a1)
{
  int v2 = &off_2539290;
  if (*(void *)(a1 + 344)) {
    int v2 = *(uint64_t (****)())(a1 + 344);
  }
  uint64_t v3 = *(uint64_t (****)())(a1 + 368);
  if (!v3) {
    uint64_t v3 = &off_25364E0;
  }
  unint64_t v4 = (uint64_t (***)())v3[3];
  if (!v4) {
    unint64_t v4 = &off_25364A0;
  }
  uint64_t v5 = *(uint64_t (****)())(a1 + 312);
  if (!v5) {
    uint64_t v5 = &off_2536408;
  }
  unint64_t v6 = (uint64_t (***)())v5[3];
  uint64_t v7 = &off_25363D0;
  if (v6) {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 48);
  uint64_t v9 = *((unsigned __int8 *)v7 + 49);
  int v10 = &off_25365A0;
  if (*(void *)(a1 + 328)) {
    int v10 = *(uint64_t (****)())(a1 + 328);
  }
  uint64_t v11 = *((int *)v10 + 6);
  if (v11)
  {
    unsigned int v12 = v10[4];
    uint64_t v13 = 4 * v11;
    while (*(_DWORD *)v12)
    {
      unsigned int v12 = (uint64_t (**)())((char *)v12 + 4);
      v13 -= 4;
      if (!v13) {
        goto LABEL_17;
      }
    }
    uint64_t v14 = 0x100000000000000;
  }
  else
  {
LABEL_17:
    uint64_t v14 = 0;
  }
  uint64_t v15 = *((unsigned __int8 *)v4 + 26);
  uint64_t v16 = *((unsigned __int8 *)v4 + 25);
  uint64_t v17 = *((unsigned __int8 *)v2 + 228);
  uint64_t v18 = *((unsigned __int8 *)v2 + 237);
  unint64_t v19 = v14 | (v9 << 48);
  unint64_t v20 = (v19 | (v8 << 40)) >> 40;
  unint64_t v21 = HIWORD(v19);
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v29 = *((unsigned __int8 *)v4 + 26);
    sub_10F5D3C((uint64_t)v30, 0, 0);
    if ((sub_1880FAC(v30, *(void *)(a1 + 240) & 0xFFFFFFFFFFFFFFFELL) & 1) == 0)
    {
LABEL_42:
      sub_10F6120(v30);
      uint64_t v15 = v29;
      return (v15 | (v16 << 8) | (v17 << 32) | (v18 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v20 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v21 << 48) | v14;
    }
    if ((*(unsigned char *)(a1 + 40) & 2) != 0)
    {
      unint64_t v22 = *(void *)(a1 + 248) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v22 + 23) < 0)
      {
        if (*(void *)(v22 + 8) >= 4uLL)
        {
          unint64_t v22 = *(void *)v22;
          goto LABEL_35;
        }
      }
      else if (*(unsigned __int8 *)(v22 + 23) >= 4u)
      {
LABEL_35:
        int v23 = *(_DWORD *)v22;
        if (v32) {
          uint64_t v24 = v32 + 8;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = v31;
        if (!v31)
        {
LABEL_39:
          uint64_t v27 = v24;
LABEL_40:
          if (v27 != v24 + 8 * v25)
          {
            LOBYTE(v20) = v20 & *(unsigned char *)(*(void *)v27 + 161);
            LOBYTE(v21) = v21 & *(unsigned char *)(*(void *)v27 + 162);
          }
          goto LABEL_42;
        }
LABEL_30:
        uint64_t v26 = 8 * v25;
        uint64_t v27 = v24;
        while (*(_DWORD *)(*(void *)v27 + 144) != v23)
        {
          v27 += 8;
          v26 -= 8;
          if (!v26) {
            goto LABEL_42;
          }
        }
        goto LABEL_40;
      }
    }
    int v23 = 0;
    if (v32) {
      uint64_t v24 = v32 + 8;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v31;
    if (!v31) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  return (v15 | (v16 << 8) | (v17 << 32) | (v18 << 24)) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v20 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v21 << 48) | v14;
}

void sub_DBBE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10F6120(va);
  _Unwind_Resume(a1);
}

uint64_t sub_DBBE30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(result + 41) & 0x10) != 0)
  {
    *(_DWORD *)a2 = *(_DWORD *)(*(void *)(result + 336) + 136);
    *(unsigned char *)(a2 + 4) = 1;
    return result;
  }
  if (!*(_DWORD *)(result + 80) || (uint64_t v2 = *(void *)(*(void *)(result + 88) + 8), (*(unsigned char *)(v2 + 40) & 1) == 0))
  {
    *(void *)a2 = 0;
    return result;
  }
  unint64_t v3 = *(void *)(v2 + 456) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v3 + 23) < 0)
  {
    if (*(void *)(v3 + 8) < 4uLL)
    {
      *(_DWORD *)a2 = 0;
      *(unsigned char *)(a2 + 4) = 1;
      return result;
    }
    unint64_t v3 = *(void *)v3;
  }
  else if (*(unsigned __int8 *)(v3 + 23) < 4u)
  {
    *(_DWORD *)a2 = 0;
    *(unsigned char *)(a2 + 4) = 1;
    return result;
  }
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(unsigned char *)(a2 + 4) = 1;
  return result;
}

void sub_DBBED8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = -1;
  *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
  *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = -1935635296;
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 63) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 100) = 100;
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 312);
    unint64_t v4 = &off_253F1A0;
    if (*(void *)(v3 + 48)) {
      unint64_t v4 = *(uint64_t (****)())(v3 + 48);
    }
    double v5 = *((double *)v4 + 7);
    uint64_t v6 = -1;
    if (v5 <= 180.0)
    {
      double v7 = *((double *)v4 + 6);
      if (v7 >= -85.0511288 && v7 <= 85.0511288 && v5 >= -180.0)
      {
        double v8 = fmax(v7, -85.0511288);
        double v9 = v8 * 3.14159265 / 180.0;
        BOOL v10 = v8 < 85.0511288;
        double v11 = 1.48442223;
        if (v10) {
          double v11 = v9;
        }
        long double v12 = sin(v11);
        LODWORD(v13) = ((log((v12 + 1.0) / (1.0 - v12)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v13 >= 0xFFFFFFFE) {
          uint64_t v13 = 4294967294;
        }
        else {
          uint64_t v13 = v13;
        }
        uint64_t v6 = ((v5 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v13 << 32);
      }
    }
    *(void *)a2 = v6;
    double v14 = *(double *)(v3 + 88);
    if (v14 > 69.4444444) {
      double v14 = 69.4444444;
    }
    *(double *)(a2 + 56) = v14;
    *(void *)(a2 + 40) = *(void *)(v3 + 72);
    int v15 = *(_DWORD *)(v3 + 40);
    if ((v15 & 0x200) != 0)
    {
      double v16 = *(double *)(v3 + 112);
      if (v16 >= 0.0)
      {
        unsigned int v17 = (int)llround(v16 * 100.0) % 36000;
        if (v17 > 0xFFFF735F) {
          LOWORD(v17) = v17 - 29536;
        }
        *(_WORD *)(a2 + 50) = v17;
        if ((v15 & 0x400) != 0)
        {
          double v18 = *(double *)(v3 + 120);
          if (v18 >= 0.0)
          {
            unsigned int v19 = (int)llround(fabs(v18) * 100.0) % 36000;
            if (v19 > 0xFFFF735F) {
              LOWORD(v19) = v19 - 29536;
            }
            *(_WORD *)(a2 + 48) = v19;
          }
        }
      }
    }
  }
}

uint64_t sub_DBC134@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = -1;
  *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
  *(void *)(a2 + 16) = -1;
  uint64_t v3 = (uint64_t *)(a2 + 16);
  *(void *)(a2 + 24) = -1;
  *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = -1935635296;
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 63) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 100) = 100;
  int v4 = *(_DWORD *)(result + 40);
  if ((v4 & 0x20) != 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 280);
    double v7 = &off_253F1A0;
    if (*(void *)(v6 + 48)) {
      double v7 = *(uint64_t (****)())(v6 + 48);
    }
    double v8 = *((double *)v7 + 7);
    uint64_t v9 = -1;
    if (v8 <= 180.0)
    {
      double v10 = *((double *)v7 + 6);
      if (v10 >= -85.0511288 && v10 <= 85.0511288 && v8 >= -180.0)
      {
        double v11 = fmax(v10, -85.0511288);
        double v12 = v11 * 3.14159265 / 180.0;
        BOOL v13 = v11 < 85.0511288;
        double v14 = 1.48442223;
        if (v13) {
          double v14 = v12;
        }
        long double v15 = sin(v14);
        LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v16 >= 0xFFFFFFFE) {
          uint64_t v16 = 4294967294;
        }
        else {
          uint64_t v16 = v16;
        }
        uint64_t v9 = ((v8 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v16 << 32);
      }
    }
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 0x7FFFFFFF;
    double v17 = *(double *)(v6 + 88);
    if (v17 > 69.4444444) {
      double v17 = 69.4444444;
    }
    *(double *)(a2 + 56) = v17;
    *(void *)(a2 + 40) = *(void *)(v6 + 72);
    if ((v4 & 0x1000) != 0
      && (uint64_t v18 = *(void *)(v5 + 336), *(int *)(v18 + 32) >= 1)
      && (uint64_t v19 = *(void *)(*(void *)(v18 + 40) + 8), (*(unsigned char *)(v19 + 40) & 8) != 0))
    {
      double result = nullsub_1(*(void *)(*(void *)(v19 + 480) + 96));
      uint64_t *v3 = result;
      int v20 = *(_DWORD *)(v6 + 40);
      if ((v20 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      double result = -1;
      uint64_t *v3 = -1;
      int v20 = *(_DWORD *)(v6 + 40);
      if ((v20 & 0x200) == 0) {
        return result;
      }
    }
    double v21 = *(double *)(v6 + 112);
    if (v21 >= 0.0)
    {
      unsigned int v22 = (int)llround(v21 * 100.0) % 36000;
      if (v22 > 0xFFFF735F) {
        LOWORD(v22) = v22 - 29536;
      }
      *(_WORD *)(a2 + 50) = v22;
      if ((v20 & 0x400) != 0)
      {
        double v23 = *(double *)(v6 + 120);
        if (v23 >= 0.0)
        {
          unsigned int v24 = (int)llround(fabs(v23) * 100.0) % 36000;
          if (v24 > 0xFFFF735F) {
            LOWORD(v24) = v24 - 29536;
          }
          *(_WORD *)(a2 + 48) = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_DBC410(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x40) == 0) {
    return -1;
  }
  uint64_t v2 = *(uint64_t (****)())(*(void *)(a1 + 312) + 48);
  if (!v2) {
    uint64_t v2 = &off_253F1A0;
  }
  double v3 = *((double *)v2 + 7);
  uint64_t result = -1;
  if (v3 <= 180.0)
  {
    double v4 = *((double *)v2 + 6);
    if (v4 >= -85.0511288 && v4 <= 85.0511288 && v3 >= -180.0)
    {
      double v5 = fmax(v4, -85.0511288);
      double v6 = v5 * 3.14159265 / 180.0;
      BOOL v7 = v5 < 85.0511288;
      double v8 = 1.48442223;
      if (v7) {
        double v8 = v6;
      }
      long double v9 = sin(v8);
      LODWORD(v10) = ((log((v9 + 1.0) / (1.0 - v9)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v10 >= 0xFFFFFFFE) {
        uint64_t v10 = 4294967294;
      }
      else {
        uint64_t v10 = v10;
      }
      return ((v3 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v10 << 32);
    }
  }
  return result;
}

uint64_t sub_DBC55C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 0x20) == 0) {
    return -1;
  }
  uint64_t v2 = *(uint64_t (****)())(*(void *)(a1 + 280) + 48);
  if (!v2) {
    uint64_t v2 = &off_253F1A0;
  }
  double v3 = *((double *)v2 + 7);
  uint64_t result = -1;
  if (v3 <= 180.0)
  {
    double v4 = *((double *)v2 + 6);
    if (v4 >= -85.0511288 && v4 <= 85.0511288 && v3 >= -180.0)
    {
      double v5 = fmax(v4, -85.0511288);
      double v6 = v5 * 3.14159265 / 180.0;
      BOOL v7 = v5 < 85.0511288;
      double v8 = 1.48442223;
      if (v7) {
        double v8 = v6;
      }
      long double v9 = sin(v8);
      LODWORD(v10) = ((log((v9 + 1.0) / (1.0 - v9)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v10 >= 0xFFFFFFFE) {
        uint64_t v10 = 4294967294;
      }
      else {
        uint64_t v10 = v10;
      }
      return ((v3 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v10 << 32);
    }
  }
  return result;
}

uint64_t *sub_DBC6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DCBD84((char **)a2, *(int *)(a1 + 224));
  return sub_DCBF6C(a1 + 216, (uint64_t *)a2, *(char **)(a2 + 8));
}

void sub_DBC704(_Unwind_Exception *exception_object)
{
  double v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_166EE50(v4 - 64);
      while ((void *)v4 != v3);
      double v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DBC74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DCBD84((char **)a2, *(int *)(a1 + 200));
  return sub_DCC590(a1 + 192, (uint64_t *)a2, *(char **)(a2 + 8));
}

void sub_DBC7A8(_Unwind_Exception *exception_object)
{
  double v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_166EE50(v4 - 64);
      while ((void *)v4 != v3);
      double v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DBC7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_DCBD84((char **)a2, *(int *)(a1 + 200));
  return sub_DCC674(a1 + 192, (uint64_t *)a2, *(char **)(a2 + 8));
}

void sub_DBC84C(_Unwind_Exception *exception_object)
{
  double v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_166EE50(v4 - 64);
      while ((void *)v4 != v3);
      double v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DBC894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, *(int *)(a1 + 248));
  return sub_DCC758(a1 + 240, (void ***)a2, *(void *)(a2 + 8));
}

void sub_DBC8E8(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBC8FC(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void ***sub_DBC910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, *(int *)(a1 + 224));
  return sub_DCC838(a1 + 216, (void ***)a2, *(void *)(a2 + 8));
}

void sub_DBC964(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBC978(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void ***sub_DBC98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, *(int *)(a1 + 224));
  return sub_DCC918(a1 + 216, (void ***)a2, *(void *)(a2 + 8));
}

void sub_DBC9E0(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBC9F4(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DBCA08(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 43) & 0x20) != 0) {
    return *(unsigned int *)(a1 + 464);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_DBCA20(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 43)) {
    return *(unsigned int *)(a1 + 412);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_DBCA38(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 43) & 0x40) != 0) {
    return *(unsigned int *)(a1 + 428);
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

BOOL sub_DBCA50(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    uint64_t v1 = &off_2539C48;
  }
  return *((_DWORD *)v1 + 6) > 0;
}

BOOL sub_DBCA74(uint64_t a1)
{
  uint64_t v1 = &off_254D3B0;
  if (*(void *)(a1 + 184)) {
    uint64_t v1 = *(uint64_t (****)())(a1 + 184);
  }
  uint64_t v2 = (uint64_t (***)())v1[35];
  if (!v2) {
    uint64_t v2 = &off_2539C48;
  }
  return *((_DWORD *)v2 + 6) > 0;
}

uint64_t sub_DBCAAC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  int v2 = *((_DWORD *)v1 + 69);
  if (v2 == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (v2 == 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_DBCADC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 184);
  if (!v1) {
    uint64_t v1 = &off_254D3B0;
  }
  int v2 = *((_DWORD *)v1 + 86);
  if (v2 == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (v2 == 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_DBCB0C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return sub_49F618(*((_DWORD *)v1 + 64));
}

uint64_t sub_DBCB28(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  unsigned int v2 = *((_DWORD *)v1 + 39);
  if (!v2) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  double v3 = (double)v2 * 100.0;
  if (v3 >= 0.0)
  {
    double v4 = (double)v2 * 100.0;
    if (v3 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    double v4 = (double)v2 * 100.0;
    if (v3 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint64_t)(v3 + v3);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_12:
  if (v4 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v3 >= 0.0)
  {
    if (v3 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v3 + v3) + 1;
      return (uint64_t)(double)(v6 >> 1);
    }
  }
  else if (v3 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v3 + v3);
    if (v6 >= 1) {
      --v6;
    }
    return (uint64_t)(double)(v6 >> 1);
  }
  return (uint64_t)v3;
}

uint64_t sub_DBCC1C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 225);
}

uint64_t sub_DBCC38(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 225);
}

uint64_t sub_DBCC54(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 225);
}

void sub_DBCC70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_37292C((uint64_t)v17);
  uint64_t v4 = sub_DA519C((uint64_t)v24, (uint64_t)v17);
  uint64_t v21 = 0;
  uint64_t v22 = a1;
  int v23 = 0;
  uint64_t v20 = 0;
  sub_DA541C(v4, (uint64_t)&v22, &v20, (uint64_t *)&v18);
  if ((_BYTE)v21) {
    LOBYTE(v21) = 0;
  }
  if (v25) {
    char v25 = 0;
  }
  sub_373C88(v17);
  uint64_t v5 = v18;
  if ((unint64_t)(0x51B3BEA3677D46CFLL * (((char *)v19 - (char *)v18) >> 3)) <= 1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  if (*v18 == -1 && v18[1] == -1 || *(v19 - 94) == -1 && *(v19 - 93) == -1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  sub_3392C(a2, v18, v19 - 94);
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  int v9 = *(_DWORD *)(a2 + 12);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  unsigned int v11 = vcvtad_u64_f64(sqrt((double)(v9 - *(_DWORD *)a2) * (double)(v9 - *(_DWORD *)a2)+ (double)(v8 - v10) * (double)(v8 - v10)));
  unsigned int v12 = *(_DWORD *)a2 - v11;
  if (*(_DWORD *)a2 < v11) {
    unsigned int v12 = 0;
  }
  BOOL v13 = -2 - v11 > v8;
  int v14 = v8 + v11;
  if (!v13) {
    int v14 = -2;
  }
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  int v15 = v11 + v9;
  if (__CFADD__(v11, v9)) {
    int v15 = -1;
  }
  int v16 = v10 - v11;
  if (v10 < v11) {
    int v16 = 0;
  }
  *(_DWORD *)(a2 + 12) = v15;
  *(_DWORD *)(a2 + 16) = v16;
  uint64_t v5 = v18;
  if (v18)
  {
LABEL_7:
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5)
    {
      do
LABEL_8:
        uint64_t v6 = sub_402C7C(v6 - 376);
      while ((unsigned int *)v6 != v5);
      BOOL v7 = v18;
    }
LABEL_10:
    uint64_t v19 = v5;
    operator delete(v7);
  }
}

void sub_DBCE70(_Unwind_Exception *a1)
{
  sub_401F88((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_DBCE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 - 88)) {
    *(unsigned char *)(v9 - 88) = 0;
  }
  if (*(unsigned char *)(v9 - 48))
  {
    *(unsigned char *)(v9 - 48) = 0;
    sub_373C88(&a9);
    _Unwind_Resume(a1);
  }
  sub_373C88(&a9);
  _Unwind_Resume(a1);
}

void sub_DBCEC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_37292C((uint64_t)v17);
  uint64_t v4 = sub_DA519C((uint64_t)v24, (uint64_t)v17);
  uint64_t v21 = 0;
  uint64_t v22 = a1;
  int v23 = 1;
  uint64_t v20 = 0;
  sub_DA541C(v4, (uint64_t)&v22, &v20, (uint64_t *)&v18);
  if ((_BYTE)v21) {
    LOBYTE(v21) = 0;
  }
  if (v25) {
    char v25 = 0;
  }
  sub_373C88(v17);
  uint64_t v5 = v18;
  if ((unint64_t)(0x51B3BEA3677D46CFLL * (((char *)v19 - (char *)v18) >> 3)) <= 1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  if (*v18 == -1 && v18[1] == -1 || *(v19 - 94) == -1 && *(v19 - 93) == -1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  sub_3392C(a2, v18, v19 - 94);
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  int v9 = *(_DWORD *)(a2 + 12);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  unsigned int v11 = vcvtad_u64_f64(sqrt((double)(v9 - *(_DWORD *)a2) * (double)(v9 - *(_DWORD *)a2)+ (double)(v8 - v10) * (double)(v8 - v10)));
  unsigned int v12 = *(_DWORD *)a2 - v11;
  if (*(_DWORD *)a2 < v11) {
    unsigned int v12 = 0;
  }
  BOOL v13 = -2 - v11 > v8;
  int v14 = v8 + v11;
  if (!v13) {
    int v14 = -2;
  }
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  int v15 = v11 + v9;
  if (__CFADD__(v11, v9)) {
    int v15 = -1;
  }
  int v16 = v10 - v11;
  if (v10 < v11) {
    int v16 = 0;
  }
  *(_DWORD *)(a2 + 12) = v15;
  *(_DWORD *)(a2 + 16) = v16;
  uint64_t v5 = v18;
  if (v18)
  {
LABEL_7:
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5)
    {
      do
LABEL_8:
        uint64_t v6 = sub_402C7C(v6 - 376);
      while ((unsigned int *)v6 != v5);
      BOOL v7 = v18;
    }
LABEL_10:
    uint64_t v19 = v5;
    operator delete(v7);
  }
}

void sub_DBD0CC(_Unwind_Exception *a1)
{
  sub_401F88((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_DBD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 - 88)) {
    *(unsigned char *)(v9 - 88) = 0;
  }
  if (*(unsigned char *)(v9 - 48))
  {
    *(unsigned char *)(v9 - 48) = 0;
    sub_373C88(&a9);
    _Unwind_Resume(a1);
  }
  sub_373C88(&a9);
  _Unwind_Resume(a1);
}

void sub_DBD124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_37292C((uint64_t)v17);
  uint64_t v4 = sub_DA519C((uint64_t)v24, (uint64_t)v17);
  uint64_t v21 = 0;
  uint64_t v22 = a1;
  int v23 = 2;
  uint64_t v20 = 0;
  sub_DA541C(v4, (uint64_t)&v22, &v20, (uint64_t *)&v18);
  if ((_BYTE)v21) {
    LOBYTE(v21) = 0;
  }
  if (v25) {
    char v25 = 0;
  }
  sub_373C88(v17);
  uint64_t v5 = v18;
  if ((unint64_t)(0x51B3BEA3677D46CFLL * (((char *)v19 - (char *)v18) >> 3)) <= 1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  if (*v18 == -1 && v18[1] == -1 || *(v19 - 94) == -1 && *(v19 - 93) == -1)
  {
    *(_OWORD *)a2 = xmmword_20B8E30;
    *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  sub_3392C(a2, v18, v19 - 94);
  unsigned int v8 = *(_DWORD *)(a2 + 4);
  int v9 = *(_DWORD *)(a2 + 12);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  unsigned int v11 = vcvtad_u64_f64(sqrt((double)(v9 - *(_DWORD *)a2) * (double)(v9 - *(_DWORD *)a2)+ (double)(v8 - v10) * (double)(v8 - v10)));
  unsigned int v12 = *(_DWORD *)a2 - v11;
  if (*(_DWORD *)a2 < v11) {
    unsigned int v12 = 0;
  }
  BOOL v13 = -2 - v11 > v8;
  int v14 = v8 + v11;
  if (!v13) {
    int v14 = -2;
  }
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  int v15 = v11 + v9;
  if (__CFADD__(v11, v9)) {
    int v15 = -1;
  }
  int v16 = v10 - v11;
  if (v10 < v11) {
    int v16 = 0;
  }
  *(_DWORD *)(a2 + 12) = v15;
  *(_DWORD *)(a2 + 16) = v16;
  uint64_t v5 = v18;
  if (v18)
  {
LABEL_7:
    uint64_t v6 = (uint64_t)v19;
    BOOL v7 = v5;
    if (v19 != v5)
    {
      do
LABEL_8:
        uint64_t v6 = sub_402C7C(v6 - 376);
      while ((unsigned int *)v6 != v5);
      BOOL v7 = v18;
    }
LABEL_10:
    uint64_t v19 = v5;
    operator delete(v7);
  }
}

void sub_DBD328(_Unwind_Exception *a1)
{
  sub_401F88((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_DBD33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 - 88)) {
    *(unsigned char *)(v9 - 88) = 0;
  }
  if (*(unsigned char *)(v9 - 48))
  {
    *(unsigned char *)(v9 - 48) = 0;
    sub_373C88(&a9);
    _Unwind_Resume(a1);
  }
  sub_373C88(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_DBD380(uint64_t a1)
{
  return *(_DWORD *)(a1 + 224) > 0;
}

BOOL sub_DBD390(uint64_t a1)
{
  return *(_DWORD *)(a1 + 200) > 0;
}

BOOL sub_DBD3A0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 392);
  if (!v1) {
    uint64_t v1 = &off_25351C0;
  }
  return *((_DWORD *)v1 + 8) != 0;
}

BOOL sub_DBD3C4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 376);
  if (!v1) {
    uint64_t v1 = &off_25351C0;
  }
  return *((_DWORD *)v1 + 8) != 0;
}

BOOL sub_DBD3E8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  return *((_DWORD *)v1 + 32) == 2;
}

BOOL sub_DBD40C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x800) != 0) {
    return 1;
  }
  if ((v1 & 0x200000) != 0) {
    return *(_DWORD *)(a1 + 408) == 2;
  }
  return 0;
}

BOOL sub_DBD438(uint64_t a1)
{
  return sub_DB7034(a1) == 8;
}

uint64_t sub_DBD458(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    int v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 248);
}

uint64_t sub_DBD474(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    int v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 248);
}

uint64_t sub_DBD490(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    int v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 248);
}

uint64_t sub_DBD4AC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_DB7034(a1);
  BOOL v5 = sub_37B490(a2);
  unsigned __int8 v6 = sub_DBB340(a1);
  BOOL v7 = *(uint64_t (****)())(a1 + 392);
  if (!v7) {
    BOOL v7 = &off_25351C0;
  }
  uint64_t v8 = *((int *)v7 + 8);
  if (v8)
  {
    uint64_t v9 = v7[5];
    if (v9) {
      unsigned int v10 = (uint64_t *)(v9 + 1);
    }
    else {
      unsigned int v10 = 0;
    }
    uint64_t v11 = 8 * v8 - 8;
    do
    {
      uint64_t v12 = *v10++;
      BOOL v13 = (*(_DWORD *)(v12 + 40) & 4) == 0;
      if ((*(_DWORD *)(v12 + 40) & 4) == 0) {
        break;
      }
      uint64_t v14 = v11;
      v11 -= 8;
    }
    while (v14);
  }
  else
  {
    BOOL v13 = 1;
  }
  char v29 = 13;
  uint64_t v27 = 0;
  strcpy((char *)v28, "RequestParser");
  char v25 = 0;
  uint64_t v26 = 0;
  int v15 = sub_374CDC(a2, (uint64_t)v28, (uint64_t *)&v25);
  std::string __p = operator new(0x38uLL);
  long long v24 = xmmword_20B9A10;
  strcpy((char *)__p, "support_change_waypoint_requests_dropping_ev_pois");
  BOOL v16 = sub_29D62C(v15, (uint64_t)&__p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  double v17 = (void **)v25;
  if (v25)
  {
    uint64_t v18 = v26;
    uint64_t v19 = v25;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v25;
    }
    uint64_t v26 = v17;
    operator delete(v19);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  BOOL v20 = v4 == 7 && v16;
  unsigned int v21 = v13 || v20;
  if ((v5 | v6 ^ 1)) {
    return 1;
  }
  else {
    return v21;
  }
}

void sub_DBD678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_DBD6F4(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 392);
  if (!v1) {
    int v1 = &off_25351C0;
  }
  uint64_t v2 = *((int *)v1 + 8);
  if (!v2) {
    return 0;
  }
  double v3 = v1[5];
  if (v3) {
    int v4 = (uint64_t *)(v3 + 1);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    uint64_t v6 = *v4++;
    unsigned int v7 = *(_DWORD *)(v6 + 40);
    if ((v7 & 4) == 0) {
      break;
    }
    uint64_t v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return (v7 >> 2) & 1;
}

uint64_t sub_DBD750(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 336);
  if (!v1) {
    int v1 = &off_2536C78;
  }
  uint64_t v2 = *((int *)v1 + 8);
  if (v2)
  {
    double v3 = v1[5];
    if (v3) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 0;
    }
    uint64_t v5 = &v4[v2];
    while (1)
    {
      uint64_t v6 = *((int *)*v4 + 14);
      uint64_t v7 = *((void *)*v4 + 8);
      uint64_t v8 = v7 ? (uint64_t *)(v7 + 8) : 0;
      if (v6)
      {
        uint64_t v9 = 8 * v6 - 8;
        do
        {
          uint64_t v10 = *v8++;
          int v11 = *(_DWORD *)(v10 + 40);
          if ((v11 & 4) == 0) {
            break;
          }
          uint64_t v12 = v9;
          v9 -= 8;
        }
        while (v12);
        if ((v11 & 4) == 0) {
          break;
        }
      }
      if (++v4 == v5) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_DBD7E4(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 376);
  if (!v1) {
    int v1 = &off_25351C0;
  }
  uint64_t v2 = *((int *)v1 + 8);
  if (!v2) {
    return 0;
  }
  double v3 = v1[5];
  if (v3) {
    int v4 = (uint64_t *)(v3 + 1);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    uint64_t v6 = *v4++;
    unsigned int v7 = *(_DWORD *)(v6 + 40);
    if ((v7 & 4) == 0) {
      break;
    }
    uint64_t v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return (v7 >> 2) & 1;
}

uint64_t sub_DBD840(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 352);
  if (!v1) {
    int v1 = &off_2539C48;
  }
  int v2 = *((_DWORD *)v1 + 6);
  double v3 = &off_2539290;
  if (*(void *)(a1 + 328)) {
    double v3 = *(uint64_t (****)())(a1 + 328);
  }
  uint64_t v4 = *((int *)v3 + 18);
  if (v4)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = (unsigned int *)v3[10];
    uint64_t v7 = 4 * v4;
    do
    {
      unsigned int v8 = *v6++;
      uint64_t v5 = (1 << sub_7BB78(v8)) | v5;
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v5 << 32;
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v9 | (v2 > 0);
}

BOOL sub_DBD8E0(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    int v1 = &off_2535C50;
  }
  return *((_DWORD *)v1 + 32) == 0;
}

BOOL sub_DBD904(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    int v1 = &off_2535C50;
  }
  return *((_DWORD *)v1 + 32) == 3;
}

BOOL sub_DBD928(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    int v1 = &off_2535C50;
  }
  return *((_DWORD *)v1 + 32) == 1;
}

BOOL sub_DBD94C(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 288);
  if (!v1) {
    int v1 = &off_2535C50;
  }
  return *((_DWORD *)v1 + 32) == 0;
}

uint64_t sub_DBD970(uint64_t a1)
{
  int v2 = &off_2539290;
  if (*(void *)(a1 + 344)) {
    int v2 = *(uint64_t (****)())(a1 + 344);
  }
  uint64_t v3 = *((int *)v2 + 18);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (unsigned int *)v2[10];
    uint64_t v6 = 4 * v3;
    do
    {
      unsigned int v7 = *v5++;
      v4 |= 1 << sub_7BB78(v7);
      v6 -= 4;
    }
    while (v6);
    int v8 = *(_DWORD *)(a1 + 40);
    if ((v8 & 0x200) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    if ((v8 & 0x200) != 0) {
      goto LABEL_11;
    }
  }
  int v9 = *(_DWORD *)(a1 + 408);
  if ((v8 & 0x200000) == 0 || v9)
  {
    if ((v8 & 0x800) == 0 && (v8 & 0x400) == 0 && (v8 & 0x10000) == 0 && !v9 && (v4 & 1) == 0) {
      return 0;
    }
    goto LABEL_18;
  }
LABEL_11:
  if ((v4 & 1) == 0) {
    return 0;
  }
LABEL_18:
  if ((v8 & 0x10000) != 0)
  {
    if ((v4 & 8) == 0) {
      return 0;
    }
  }
  else if ((v8 & 0x200000) != 0 && *(_DWORD *)(a1 + 408) == 3 && (v4 & 8) == 0)
  {
    return 0;
  }
  if ((v8 & 0x800) != 0)
  {
    if ((v4 & 4) == 0) {
      return 0;
    }
  }
  else if ((v8 & 0x200000) != 0 && *(_DWORD *)(a1 + 408) == 2 && (v4 & 4) == 0)
  {
    return 0;
  }
  if ((v8 & 0x400) != 0)
  {
    if ((v4 & 2) == 0) {
      return 0;
    }
  }
  else if ((v8 & 0x200000) != 0 && *(_DWORD *)(a1 + 408) == 1 && (v4 & 2) == 0)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_DBDB38(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    int v1 = &off_2539C48;
  }
  int v2 = *((_DWORD *)v1 + 6);
  uint64_t v3 = &off_2539290;
  if (*(void *)(a1 + 344)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 344);
  }
  uint64_t v4 = *((int *)v3 + 18);
  if (v4)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = (unsigned int *)v3[10];
    uint64_t v7 = 4 * v4;
    do
    {
      unsigned int v8 = *v6++;
      uint64_t v5 = (1 << sub_7BB78(v8)) | v5;
      v7 -= 4;
    }
    while (v7);
    uint64_t v9 = v5 << 32;
  }
  else
  {
    uint64_t v9 = 0;
  }
  return v9 | (v2 > 0);
}

uint64_t sub_DBDBD8(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  uint64_t result = (v2 >> 9) & 1;
  if ((v2 & 0x200) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 408);
    if ((v2 & 0x200000) == 0 || v4)
    {
      unsigned int v5 = (v2 & 0x10000 | v4) == 0;
      if ((v2 & 0x400) != 0) {
        unsigned int v5 = (v2 >> 9) & 1;
      }
      if ((v2 & 0x800) != 0) {
        return result;
      }
      else {
        return v5;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_DBDC20(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x10000) != 0) {
    return 1;
  }
  if ((v1 & 0x200000) != 0) {
    return *(_DWORD *)(a1 + 408) == 3;
  }
  return 0;
}

BOOL sub_DBDC4C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x400) != 0) {
    return 1;
  }
  if ((v1 & 0x200000) != 0) {
    return *(_DWORD *)(a1 + 408) == 1;
  }
  return 0;
}

uint64_t sub_DBDC78(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    int v1 = &off_2539290;
  }
  unsigned int v2 = (uint64_t (***)())v1[25];
  if (!v2) {
    unsigned int v2 = &off_2539250;
  }
  return *((unsigned __int8 *)v2 + 25);
}

uint64_t sub_DBDCA8(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    int v1 = &off_2539290;
  }
  unsigned int v2 = (uint64_t (***)())v1[25];
  if (!v2) {
    unsigned int v2 = &off_2539250;
  }
  return *((unsigned __int8 *)v2 + 25);
}

uint64_t sub_DBDCD8(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    int v1 = &off_2539290;
  }
  unsigned int v2 = (uint64_t (***)())v1[25];
  if (!v2) {
    unsigned int v2 = &off_2539250;
  }
  return *((unsigned __int8 *)v2 + 25);
}

uint64_t sub_DBDD08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v4 = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(a2 + 4) = v4;
  *(_DWORD *)(a2 + 8) = v4;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)a2 = 1;
  unsigned int v5 = (uint64_t (***)())a1[38];
  if (!v5) {
    unsigned int v5 = &off_2535C50;
  }
  uint64_t v6 = &off_2536408;
  uint64_t v7 = (uint64_t (***)())v5[10];
  if (v5[11]) {
    uint64_t v6 = (uint64_t (***)())v5[11];
  }
  int v8 = *((_DWORD *)v6 + 4);
  uint64_t v9 = (int *)v6 + 11;
  uint64_t v10 = (int *)v5 + 41;
  if ((v8 & 8) != 0) {
    uint64_t v10 = v9;
  }
  int v11 = *v10;
  if (v11 == 3) {
    char v12 = 2;
  }
  else {
    char v12 = v11 == 2;
  }
  *(unsigned char *)(a2 + 16) = v12;
  if (v7) {
    BOOL v13 = v7;
  }
  else {
    BOOL v13 = &off_2535C20;
  }
  *(void *)(a2 + 4) = sub_DBB218((uint64_t)v13);
  *(_DWORD *)(a2 + 12) = v14;
  *(void *)(a2 + 17) = sub_DB6BEC((uint64_t)a1);
  *(_WORD *)(a2 + 25) = v15;
  *(unsigned char *)(a2 + 27) = v16;
  uint64_t result = sub_DB7034((uint64_t)a1);
  *(unsigned char *)(a2 + 28) = result;
  uint64_t v18 = (uint64_t (***)())a1[44];
  if (!v18) {
    uint64_t v18 = &off_2539C48;
  }
  int v19 = *((_DWORD *)v18 + 6);
  BOOL v20 = &off_2539290;
  if (a1[41]) {
    BOOL v20 = (uint64_t (***)())a1[41];
  }
  uint64_t v21 = *((int *)v20 + 18);
  if (v21)
  {
    LODWORD(v22) = 0;
    int v23 = (unsigned int *)v20[10];
    uint64_t v24 = 4 * v21;
    do
    {
      unsigned int v25 = *v23++;
      uint64_t result = sub_7BB78(v25);
      uint64_t v22 = (1 << result) | v22;
      v24 -= 4;
    }
    while (v24);
    uint64_t v26 = v22 << 32;
  }
  else
  {
    uint64_t v26 = 0;
  }
  *(void *)(a2 + 32) = v26 | (v19 > 0);
  return result;
}

unint64_t sub_DBDE7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v4 = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(a2 + 4) = v4;
  *(_DWORD *)(a2 + 8) = v4;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)a2 = 2;
  unsigned int v5 = &off_2535C50;
  if (a1[36]) {
    unsigned int v5 = (uint64_t (***)())a1[36];
  }
  uint64_t v6 = &off_2536408;
  uint64_t v7 = (uint64_t (***)())v5[10];
  if (v5[11]) {
    uint64_t v6 = (uint64_t (***)())v5[11];
  }
  int v8 = *((_DWORD *)v6 + 4);
  uint64_t v9 = (int *)v6 + 11;
  uint64_t v10 = (int *)v5 + 41;
  if ((v8 & 8) != 0) {
    uint64_t v10 = v9;
  }
  int v11 = *v10;
  if (v11 == 3) {
    char v12 = 2;
  }
  else {
    char v12 = v11 == 2;
  }
  *(unsigned char *)(a2 + 16) = v12;
  if (v7) {
    BOOL v13 = v7;
  }
  else {
    BOOL v13 = &off_2535C20;
  }
  *(void *)(a2 + 4) = sub_DBB218((uint64_t)v13);
  *(_DWORD *)(a2 + 12) = v14;
  unint64_t result = sub_DB893C((uint64_t)a1);
  *(void *)(a2 + 17) = result;
  *(_WORD *)(a2 + 25) = v16;
  *(unsigned char *)(a2 + 27) = v17;
  *(unsigned char *)(a2 + 28) = 0;
  uint64_t v18 = (uint64_t (***)())a1[39];
  if (!v18) {
    uint64_t v18 = &off_2539C48;
  }
  int v19 = *((_DWORD *)v18 + 6);
  BOOL v20 = &off_2539290;
  if (a1[37]) {
    BOOL v20 = (uint64_t (***)())a1[37];
  }
  uint64_t v21 = *((int *)v20 + 18);
  if (v21)
  {
    LODWORD(v22) = 0;
    int v23 = (unsigned int *)v20[10];
    uint64_t v24 = 4 * v21;
    do
    {
      unsigned int v25 = *v23++;
      unint64_t result = sub_7BB78(v25);
      uint64_t v22 = (1 << result) | v22;
      v24 -= 4;
    }
    while (v24);
    uint64_t v26 = v22 << 32;
  }
  else
  {
    uint64_t v26 = 0;
  }
  *(void *)(a2 + 32) = v26 | (v19 > 0);
  return result;
}

unint64_t sub_DBDFE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v4 = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(a2 + 4) = v4;
  *(_DWORD *)(a2 + 8) = v4;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)a2 = 3;
  unsigned int v5 = (uint64_t (***)())a1[39];
  if (!v5) {
    unsigned int v5 = &off_2536408;
  }
  int v6 = *((_DWORD *)v5 + 11);
  if (v6 == 3) {
    char v7 = 2;
  }
  else {
    char v7 = v6 == 2;
  }
  *(unsigned char *)(a2 + 16) = v7;
  if (a1[34]) {
    int v8 = (uint64_t (***)())a1[34];
  }
  else {
    int v8 = &off_2535C20;
  }
  *(void *)(a2 + 4) = sub_DBB218((uint64_t)v8);
  *(_DWORD *)(a2 + 12) = v9;
  unint64_t result = sub_DBBBCC((uint64_t)a1);
  *(void *)(a2 + 17) = result;
  *(_WORD *)(a2 + 25) = v11;
  *(unsigned char *)(a2 + 27) = v12;
  *(unsigned char *)(a2 + 28) = 0;
  BOOL v13 = (uint64_t (***)())a1[37];
  if (!v13) {
    BOOL v13 = &off_2539C48;
  }
  int v14 = *((_DWORD *)v13 + 6);
  __int16 v15 = &off_2539290;
  if (a1[43]) {
    __int16 v15 = (uint64_t (***)())a1[43];
  }
  uint64_t v16 = *((int *)v15 + 18);
  if (v16)
  {
    LODWORD(v17) = 0;
    uint64_t v18 = (unsigned int *)v15[10];
    uint64_t v19 = 4 * v16;
    do
    {
      unsigned int v20 = *v18++;
      unint64_t result = sub_7BB78(v20);
      uint64_t v17 = (1 << result) | v17;
      v19 -= 4;
    }
    while (v19);
    uint64_t v21 = v17 << 32;
  }
  else
  {
    uint64_t v21 = 0;
  }
  *(void *)(a2 + 32) = v21 | (v14 > 0);
  return result;
}

uint64_t sub_DBE134(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 312);
  if (!v1) {
    int v1 = &off_2536408;
  }
  int v2 = *((_DWORD *)v1 + 11);
  if (v2 == 3) {
    return 2;
  }
  else {
    return v2 == 2;
  }
}

unint64_t sub_DBE164(uint64_t a1)
{
  if (*(void *)(a1 + 272)) {
    int v1 = *(uint64_t (****)())(a1 + 272);
  }
  else {
    int v1 = &off_2535C20;
  }
  return sub_DBB218((uint64_t)v1);
}

uint64_t sub_DBE194(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 392);
  if (!v1) {
    int v1 = &off_25351C0;
  }
  if (!*((_DWORD *)v1 + 8)) {
    return 0x7FFFFFFFLL;
  }
  int v2 = (uint64_t (***)())*((void *)v1[5][1] + 8);
  if (!v2) {
    int v2 = &off_2535208;
  }
  if (((_BYTE)v2[2] & 2) != 0) {
    return (1000 * *((_DWORD *)v2 + 7));
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_DBE1EC(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 376);
  if (!v1) {
    int v1 = &off_25351C0;
  }
  if (!*((_DWORD *)v1 + 8)) {
    return 0x7FFFFFFFLL;
  }
  int v2 = (uint64_t (***)())*((void *)v1[5][1] + 8);
  if (!v2) {
    int v2 = &off_2535208;
  }
  if (((_BYTE)v2[2] & 2) != 0) {
    return (1000 * *((_DWORD *)v2 + 7));
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_DBE244@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(result + 42) & 1) != 0 && (v3 = result, unint64_t result = sub_DBB340(result), (result))
  {
    if (*(void *)(v3 + 304)) {
      int v4 = *(uint64_t (****)())(v3 + 304);
    }
    else {
      int v4 = &off_2535C50;
    }
    if (v4[10]) {
      unsigned int v5 = (uint64_t (***)())v4[10];
    }
    else {
      unsigned int v5 = &off_2535C20;
    }
    unint64_t v6 = sub_DBB218((uint64_t)v5);
    if (sub_DBB340(v3))
    {
      if (v4[11]) {
        char v7 = (uint64_t (***)())v4[11];
      }
      else {
        char v7 = &off_2536408;
      }
      sub_DBB3F0(SHIDWORD(v6), (uint64_t)v7, (uint64_t)&v10);
    }
    else
    {
      int v12 = 0;
      long long v18 = 0u;
      int v10 = 0x7FFFFFFF;
      uint64_t v11 = 0x7FFFFFFF7FFFFFFFLL;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v15 = 0;
      LODWORD(v18) = 1065353216;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v21 = 1065353216;
      long long v22 = xmmword_20E8670;
    }
    int v8 = &off_25351C0;
    if (*(void *)(v3 + 392)) {
      int v8 = *(uint64_t (****)())(v3 + 392);
    }
    int v9 = &v10;
    sub_DBE3A8((uint64_t)(v8 + 3), (uint64_t *)&v9, (uint64_t)a2);
    return (uint64_t)sub_402628(&v10);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_DBE394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_402628((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DBE3A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_DC9B68((char **)a3, *(int *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    char v7 = (uint64_t *)(v6 + 8);
  }
  else {
    char v7 = 0;
  }
  return sub_DCC9F8(v7, &v7[*(int *)(a1 + 8)], (uint64_t *)a3, *(void *)(a3 + 8), *a2);
}

void sub_DBE414(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B08C0((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_DBE434@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 272)) {
    uint64_t v3 = *(uint64_t (****)())(a1 + 272);
  }
  else {
    uint64_t v3 = &off_2535C20;
  }
  sub_DBB218((uint64_t)v3);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_DWORD *)a2 = 0x7FFFFFFF;
  *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_DWORD *)(a2 + 88) = 1065353216;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_DWORD *)(a2 + 136) = 1065353216;
  double result = NAN;
  *(_OWORD *)(a2 + 144) = xmmword_20E8670;
  return result;
}

void sub_DBE4CC(uint64_t a1@<X0>, char **a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 42) & 1) != 0 && (uint64_t v3 = *(void *)(a1 + 392), *(_DWORD *)(v3 + 32)))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v4 = *(int *)(v3 + 32);
    uint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      char v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      if ((int)v4 <= -2) {
        sub_2E00();
      }
      uint64_t v6 = (char *)operator new(v4 + 1);
      char v7 = &v6[v5];
      *a2 = v6;
      a2[1] = v6;
      a2[2] = &v6[v5];
    }
    int v8 = *(uint64_t (****)())(*(void *)(*(void *)(v3 + 40) + 8) + 72);
    if (!v8) {
      int v8 = &off_25352D0;
    }
    unsigned int v9 = *((_DWORD *)v8 + 26);
    if (v9 >= 3) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
    if (v6 >= v7)
    {
      unint64_t v12 = v7 - v6;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= 1) {
        uint64_t v13 = 1;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      *uint64_t v15 = v10;
      uint64_t v11 = v15 + 1;
      *a2 = v15;
      a2[1] = v15 + 1;
      a2[2] = &v15[v14];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = v10;
      uint64_t v11 = v6 + 1;
    }
    a2[1] = v11;
    uint64_t v16 = *(void *)(v3 + 40);
    if (v16) {
      uint64_t v17 = v16 + 8;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(int *)(v3 + 32);
    if (v18)
    {
      uint64_t v19 = 8 * v18;
      do
      {
        long long v20 = *(uint64_t (****)())(*(void *)v17 + 80);
        if (!v20) {
          long long v20 = &off_25352D0;
        }
        unsigned int v21 = *((_DWORD *)v20 + 26);
        if (v21 >= 3) {
          LOBYTE(v21) = 0;
        }
        char v22 = v21;
        uint64_t v11 = sub_DCA904((uint64_t)a2, v11, &v22) + 1;
        v17 += 8;
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_DBE65C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_DBE680(uint64_t a1@<X0>, char **a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 42) & 2) != 0 && (uint64_t v3 = *(void *)(a1 + 376), *(_DWORD *)(v3 + 32)))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v4 = *(int *)(v3 + 32);
    uint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      char v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      if ((int)v4 <= -2) {
        sub_2E00();
      }
      uint64_t v6 = (char *)operator new(v4 + 1);
      char v7 = &v6[v5];
      *a2 = v6;
      a2[1] = v6;
      a2[2] = &v6[v5];
    }
    int v8 = *(uint64_t (****)())(*(void *)(*(void *)(v3 + 40) + 8) + 72);
    if (!v8) {
      int v8 = &off_25352D0;
    }
    unsigned int v9 = *((_DWORD *)v8 + 26);
    if (v9 >= 3) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
    if (v6 >= v7)
    {
      unint64_t v12 = v7 - v6;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= 1) {
        uint64_t v13 = 1;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      *uint64_t v15 = v10;
      uint64_t v11 = v15 + 1;
      *a2 = v15;
      a2[1] = v15 + 1;
      a2[2] = &v15[v14];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = v10;
      uint64_t v11 = v6 + 1;
    }
    a2[1] = v11;
    uint64_t v16 = *(void *)(v3 + 40);
    if (v16) {
      uint64_t v17 = v16 + 8;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(int *)(v3 + 32);
    if (v18)
    {
      uint64_t v19 = 8 * v18;
      do
      {
        long long v20 = *(uint64_t (****)())(*(void *)v17 + 80);
        if (!v20) {
          long long v20 = &off_25352D0;
        }
        unsigned int v21 = *((_DWORD *)v20 + 26);
        if (v21 >= 3) {
          LOBYTE(v21) = 0;
        }
        char v22 = v21;
        uint64_t v11 = sub_DCA904((uint64_t)a2, v11, &v22) + 1;
        v17 += 8;
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_DBE810(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_DBE834(uint64_t a1)
{
  return *(void *)(a1 + 264) & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DBE840(uint64_t a1)
{
  return *(void *)(a1 + 128) & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DBE84C(uint64_t a1)
{
  uint64_t v1 = &off_2539290;
  if (*(void *)(a1 + 328)) {
    uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  }
  return (unint64_t)v1[20] & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DBE86C(uint64_t a1)
{
  uint64_t v1 = &off_2539290;
  if (*(void *)(a1 + 344)) {
    uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  }
  return (unint64_t)v1[20] & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DBE88C(uint64_t a1)
{
  uint64_t v1 = &off_2539290;
  if (*(void *)(a1 + 296)) {
    uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  }
  return (unint64_t)v1[20] & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_DBE8AC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 216);
}

uint64_t sub_DBE8C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 216);
}

uint64_t sub_DBE8E4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 216);
}

uint64_t sub_DBE900(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 217);
}

uint64_t sub_DBE91C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 217);
}

uint64_t sub_DBE938(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 217);
}

void ***sub_DBE954@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)result + 42)) {
    return sub_DBE970((void ***)result[49], (uint64_t)a2);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void ***sub_DBE970@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  int v2 = result;
  uint64_t v4 = result[5];
  if (v4) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *((int *)result + 8);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while ((*((unsigned char *)*v5 + 40) & 2) != 0)
    {
      unint64_t v8 = *((void *)*v5 + 7) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v8 + 23) < 0)
      {
        if (!*(void *)(v8 + 8)) {
          break;
        }
      }
      else if (!*(unsigned char *)(v8 + 23))
      {
        break;
      }
      ++v5;
      v7 -= 8;
      if (!v7) {
        goto LABEL_12;
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
LABEL_12:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_23708(a2, v6);
    return sub_DCCD64((uint64_t)(v2 + 3), (void ***)a2, *(void *)(a2 + 8));
  }
  return result;
}

void sub_DBEA30(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBEA44(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void ***sub_DBEA58@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  if ((*((unsigned char *)result + 42) & 2) != 0) {
    return sub_DBE970((void ***)result[47], (uint64_t)a2);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

char *sub_DBEA74@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((unsigned int *)result + 20);
  if ((int)v3 < 1)
  {
    if (result[42])
    {
      uint64_t v6 = *((void *)result + 49);
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7) {
        uint64_t v8 = v7 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      unint64_t v9 = *(int *)(v6 + 32);
      if (!v9)
      {
LABEL_21:
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        sub_23708(a2, v9);
        return (char *)sub_DCCB9C(v6 + 24, (void ***)a2, *(void *)(a2 + 8));
      }
      uint64_t v10 = 8 * v9;
      while ((*(unsigned char *)(*(void *)v8 + 40) & 1) != 0)
      {
        unint64_t v11 = *(void *)(*(void *)v8 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(void *)(v11 + 8)) {
            break;
          }
        }
        else if (!*(unsigned char *)(v11 + 23))
        {
          break;
        }
        v8 += 8;
        v10 -= 8;
        if (!v10) {
          goto LABEL_21;
        }
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return result;
  }
  uint64_t v4 = *((void *)result + 11);
  if (v4) {
    uint64_t v5 = (long long **)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;

  return sub_DCB13C((char *)a2, v5, &v5[v3], v3);
}

void sub_DBEB88(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBEB9C(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

char *sub_DBEBB0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((unsigned int *)result + 26);
  if ((int)v3 < 1)
  {
    if ((result[42] & 2) != 0)
    {
      uint64_t v6 = *((void *)result + 47);
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7) {
        uint64_t v8 = v7 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      unint64_t v9 = *(int *)(v6 + 32);
      if (!v9)
      {
LABEL_21:
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        sub_23708(a2, v9);
        return (char *)sub_DCCC80(v6 + 24, (void ***)a2, *(void *)(a2 + 8));
      }
      uint64_t v10 = 8 * v9;
      while ((*(unsigned char *)(*(void *)v8 + 40) & 1) != 0)
      {
        unint64_t v11 = *(void *)(*(void *)v8 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(void *)(v11 + 8)) {
            break;
          }
        }
        else if (!*(unsigned char *)(v11 + 23))
        {
          break;
        }
        v8 += 8;
        v10 -= 8;
        if (!v10) {
          goto LABEL_21;
        }
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return result;
  }
  uint64_t v4 = *((void *)result + 14);
  if (v4) {
    uint64_t v5 = (long long **)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;

  return sub_DCB13C((char *)a2, v5, &v5[v3], v3);
}

void sub_DBECC4(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBECD8(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DBECEC()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

void ***sub_DBECF4@<X0>(void ***result@<X0>, uint64_t a2@<X8>)
{
  int v2 = result;
  uint64_t v4 = result[5];
  if (v4) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *((int *)result + 8);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while ((*((unsigned char *)*v5 + 40) & 2) != 0)
    {
      unint64_t v8 = *((void *)*v5 + 58) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v8 + 23) < 0)
      {
        if (!*(void *)(v8 + 8)) {
          break;
        }
      }
      else if (!*(unsigned char *)(v8 + 23))
      {
        break;
      }
      ++v5;
      v7 -= 8;
      if (!v7) {
        goto LABEL_12;
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
LABEL_12:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_23708(a2, v6);
    return sub_DCCE48((uint64_t)(v2 + 3), (void ***)a2, *(void *)(a2 + 8));
  }
  return result;
}

void sub_DBEDB4(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

void sub_DBEDC8(_Unwind_Exception *a1)
{
  sub_20B0868(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DBEDDC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  int v2 = *((_DWORD *)v1 + 32);
  uint64_t result = 4;
  int v4 = 2;
  int v5 = 8;
  switch(v2)
  {
    case 0:
      int v5 = 1;
      goto LABEL_5;
    case 1:
      return v4 & 0xFFFFFFFB;
    case 2:
      return result;
    case 3:
LABEL_5:
      int v4 = v5;
      return v4 & 0xFFFFFFFB;
    default:
      int v4 = 0;
      return v4 & 0xFFFFFFFB;
  }
}

uint64_t sub_DBEE50(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  int v2 = 8;
  if ((v1 & 0x10000) == 0)
  {
    if (((*(_DWORD *)(a1 + 408) == 3) & (v1 >> 21)) != 0) {
      int v2 = 8;
    }
    else {
      int v2 = 0;
    }
  }
  if ((v1 & 0x200) != 0
    || (int v3 = *(_DWORD *)(a1 + 408), (v1 & 0x200000) != 0) && !v3
    || (v1 & 0x800) == 0 && (v1 & 0x400) == 0 && !(v1 & 0x10000 | v3))
  {
    v2 |= 1u;
  }
  if ((v1 & 0x400) != 0 || (v1 & 0x200000) != 0 && *(_DWORD *)(a1 + 408) == 1)
  {
    unsigned int v4 = v2 | 2;
    if ((v1 & 0x800) != 0) {
      return v4 | 4;
    }
  }
  else
  {
    unsigned int v4 = v2 & 0xFFFFFFFD;
    if ((v1 & 0x800) != 0) {
      return v4 | 4;
    }
  }
  if ((v1 & 0x200000) != 0 && *(_DWORD *)(a1 + 408) == 2) {
    return v4 | 4;
  }
  return v4 & 0xFFFFFFFB;
}

uint64_t sub_DBEEE4(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 328);
  if (!v1) {
    unsigned int v1 = &off_2539290;
  }
  if (*((unsigned char *)v1 + 252)) {
    return 18;
  }
  int v3 = (uint64_t (***)())v1[25];
  if (!v3) {
    int v3 = &off_2539250;
  }
  if (*((unsigned char *)v3 + 25)) {
    return 17;
  }
  if (*((_DWORD *)v1 + 18)) {
    return 16;
  }
  if (*((unsigned char *)v1 + 234)) {
    return 15;
  }
  if (*((unsigned char *)v1 + 232)) {
    return 14;
  }
  else {
    return 13;
  }
}

uint64_t sub_DBEF74(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    unsigned int v1 = &off_2539290;
  }
  if (*((unsigned char *)v1 + 252)) {
    return 18;
  }
  int v3 = (uint64_t (***)())v1[25];
  if (!v3) {
    int v3 = &off_2539250;
  }
  if (*((unsigned char *)v3 + 25)) {
    return 17;
  }
  if (*((_DWORD *)v1 + 18)) {
    return 16;
  }
  if (*((unsigned char *)v1 + 234)) {
    return 15;
  }
  if (*((unsigned char *)v1 + 232)) {
    return 14;
  }
  else {
    return 13;
  }
}

uint64_t sub_DBF004(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    unsigned int v1 = &off_2539290;
  }
  if (*((unsigned char *)v1 + 252)) {
    return 18;
  }
  int v3 = (uint64_t (***)())v1[25];
  if (!v3) {
    int v3 = &off_2539250;
  }
  if (*((unsigned char *)v3 + 25)) {
    return 17;
  }
  if (*((_DWORD *)v1 + 18)) {
    return 16;
  }
  if (*((unsigned char *)v1 + 234)) {
    return 15;
  }
  if (*((unsigned char *)v1 + 232)) {
    return 14;
  }
  else {
    return 13;
  }
}

uint64_t sub_DBF094(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 136);
  if (!v1) {
    unsigned int v1 = &off_2539290;
  }
  if (*((unsigned char *)v1 + 252)) {
    return 18;
  }
  int v3 = (uint64_t (***)())v1[25];
  if (!v3) {
    int v3 = &off_2539250;
  }
  if (*((unsigned char *)v3 + 25)) {
    return 17;
  }
  if (*((_DWORD *)v1 + 18)) {
    return 16;
  }
  if (*((unsigned char *)v1 + 234)) {
    return 15;
  }
  if (*((unsigned char *)v1 + 232)) {
    return 14;
  }
  else {
    return 13;
  }
}

unint64_t sub_DBF124(uint64_t a1)
{
  if (*(void *)(a1 + 328)) {
    int v2 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    int v2 = &off_2539290;
  }
  uint64_t v3 = *((unsigned __int8 *)v2 + 218);
  unsigned int v4 = (__int32 *)v2[8];
  size_t v5 = *((int *)v2 + 14);
  unint64_t v6 = &v4[v5];
  uint64_t v7 = wmemchr(v4, 4, v5);
  if (v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = (__int32 *)v2[8];
  uint64_t v10 = *((int *)v2 + 14);
  if (v8 == &v9[v10])
  {
    unint64_t v12 = *(uint64_t (****)())(a1 + 304);
    if (!v12) {
      unint64_t v12 = &off_2535C50;
    }
    uint64_t v13 = (uint64_t (***)())v12[12];
    if (!v13) {
      uint64_t v13 = &off_2536528;
    }
    if ((*((_DWORD *)v13 + 19) - 3) > 0xFFFFFFFD)
    {
      unint64_t v11 = 0x100000000;
    }
    else
    {
      if (v10)
      {
        while ((*v9 & 0xFFFFFFFD) != 1)
        {
          if (++v9 == v8)
          {
            unint64_t v9 = v8;
            break;
          }
        }
      }
      unint64_t v11 = (unint64_t)(v9 != v8) << 32;
    }
  }
  else
  {
    unint64_t v11 = 0x200000000;
  }
  if (*(void *)(a1 + 328)) {
    size_t v14 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    size_t v14 = &off_2539290;
  }
  wmemchr((__int32 *)v14[8], 1, *((int *)v14 + 14));
  wmemchr((__int32 *)v14[8], 3, *((int *)v14 + 14));
  wmemchr((__int32 *)v14[8], 5, *((int *)v14 + 14));
  wmemchr((__int32 *)v14[8], 6, *((int *)v14 + 14));
  return v11 | v3;
}

uint64_t sub_DBF2D4(uint64_t a1)
{
  LODWORD(result) = sub_DBD970(a1);
  if (*(_DWORD *)(a1 + 152)) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t *sub_DBF304(uint64_t a1, uint64_t a2)
{
  sub_5EC80(a2, &v5);
  if (v6 != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214(a1, v5);
  return sub_5521C((uint64_t *)v6, &v5);
}

void sub_DBF59C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  __cxa_end_catch();
  JUMPOUT(0xDBF3E8);
}

void sub_DBF61C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0xDBF624);
  }
  JUMPOUT(0xDBF3E8);
}

unint64_t sub_DBF62C(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 152);
  if (!v1) {
    unsigned int v1 = &off_2535C50;
  }
  int v2 = (uint64_t (***)())v1[10];
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = &off_2535C20;
  }
  return sub_DBB218((uint64_t)v3);
}

void sub_DBF670(char **a1, unint64_t a2)
{
  int v2 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 88 * a2;
  unsigned int v6 = (char *)operator new(88 * a2);
  uint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 88;
    uint64_t v9 = sub_DC8754(v9 - 88, v4);
  }
  while ((char *)v4 != v2);
  uint64_t v10 = *a1;
  int v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 88;
      sub_1473CF4(v2);
    }
    while (v2 != v10);
    int v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_DBF790(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5B9B3C(a3);
  unsigned int v6 = (long long *)sub_377D04(a2);
  char v31 = 1;
  sub_29E004((char *)__dst, v6);
  sub_DBF9EC(a1, (uint64_t)__dst, (uint64_t)&v16);
  *(_DWORD *)(a3 + 968) = v16;
  uint64_t v7 = *(void **)(a3 + 976);
  if (v7)
  {
    *(void *)(a3 + 984) = v7;
    operator delete(v7);
    *(void *)(a3 + 976) = 0;
    *(void *)(a3 + 984) = 0;
    *(void *)(a3 + 992) = 0;
  }
  *(_OWORD *)(a3 + 976) = *(_OWORD *)v17;
  *(void *)(a3 + 992) = v18;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  *(_DWORD *)(a3 + 1000) = v19;
  unint64_t v8 = *(void **)(a3 + 1008);
  if (v8)
  {
    *(void *)(a3 + 1016) = v8;
    operator delete(v8);
    *(void *)(a3 + 1008) = 0;
    *(void *)(a3 + 1016) = 0;
    *(void *)(a3 + 1024) = 0;
  }
  uint64_t v9 = 0;
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)__p;
  *(void *)(a3 + 1024) = v21;
  __p[1] = 0;
  uint64_t v21 = 0;
  __p[0] = 0;
  uint64_t v10 = (void **)(a3 + 1032);
  if (*(char *)(a3 + 1055) < 0)
  {
    operator delete(*v10);
    uint64_t v9 = __p[0];
  }
  *(_OWORD *)uint64_t v10 = v22;
  *(void *)(a3 + 1048) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  *(unsigned char *)(a3 + 1056) = v24;
  if (v9)
  {
    __p[1] = v9;
    operator delete(v9);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v31)
  {
    if (v30 < 0)
    {
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_14:
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_28:
        operator delete(__dst[0]);
        goto LABEL_15;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v27);
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_15:
  unint64_t v11 = *(uint64_t (****)())(a1 + 184);
  if (!v11) {
    unint64_t v11 = &off_254D3B0;
  }
  unint64_t v12 = (uint64_t (***)())v11[35];
  if (!v12) {
    unint64_t v12 = &off_2539C48;
  }
  *(unsigned char *)(a3 + 1424) = *((_DWORD *)v12 + 6) > 0;
  int v13 = *((_DWORD *)v11 + 86);
  if (v13 == 2) {
    char v14 = 2;
  }
  else {
    char v14 = 1;
  }
  if (v13 == 3) {
    char v15 = 3;
  }
  else {
    char v15 = v14;
  }
  *(unsigned char *)(a3 + 1425) = v15;
  *(unsigned char *)(a3 + 1177) = 12;
  *(_WORD *)(a3 + 1178) = 257;
}

void sub_DBF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_CF1F54((uint64_t)va);
  sub_4BCED0(v14);
  _Unwind_Resume(a1);
}

void sub_DBF9EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = sub_DBAC88(a1, a2);
  sub_DBA7C0(a1, a2, v11);
  int v7 = sub_DBFE98(a1, a2);
  sub_DBB07C((_DWORD *)a1, (uint64_t)__p);
  unint64_t v8 = *(uint64_t (****)())(a1 + 184);
  if (!v8) {
    unint64_t v8 = &off_254D3B0;
  }
  uint64_t v9 = (uint64_t (***)())v8[37];
  if (!v9) {
    uint64_t v9 = &off_253F750;
  }
  sub_DC71FC(a3, v6, (uint64_t)v11, v7, (uint64_t)__p, (long long *)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), *((unsigned char *)v9 + 40));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_DBFAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBFB20(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

void sub_DBFB34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 344)) {
    int v6 = *(uint64_t (****)())(a1 + 344);
  }
  else {
    int v6 = &off_2539290;
  }
  int v7 = sub_DBA9DC(a1, a2);
  sub_DBA590(a1, a2, v21);
  int v8 = sub_DBFD2C(a1, a2);
  sub_DBAF24((_DWORD *)a1, (uint64_t)__p);
  uint64_t v9 = *(uint64_t (****)())(a1 + 344);
  if (!v9) {
    uint64_t v9 = &off_2539290;
  }
  uint64_t v10 = (long long *)((unint64_t)v9[16] & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v11 = (uint64_t (***)())v9[24];
  if (!v11) {
    unint64_t v11 = &off_253F750;
  }
  sub_DC71FC((uint64_t)&v22, v7, (uint64_t)v21, v8, (uint64_t)__p, v10, *((unsigned char *)v11 + 40));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  unint64_t v12 = *(uint64_t (****)())(a1 + 312);
  if (!v12) {
    unint64_t v12 = &off_2536408;
  }
  int v13 = *((_DWORD *)v12 + 11);
  int v14 = *(unsigned __int8 *)(a1 + 426);
  char v15 = *((unsigned char *)v6 + 232);
  char v16 = *((unsigned char *)v6 + 230);
  char v17 = *((unsigned char *)v6 + 237);
  char v18 = *((unsigned char *)v6 + 249);
  sub_4BC93C(a3, &v22);
  *(unsigned char *)(a3 + 96) = v15;
  char v19 = v13 == 2;
  *(unsigned char *)(a3 + 97) = v16;
  if (v13 == 3) {
    char v19 = 2;
  }
  *(unsigned char *)(a3 + 98) = v19;
  *(unsigned char *)(a3 + 99) = v14;
  *(_DWORD *)(a3 + 100) = 6;
  *(unsigned char *)(a3 + 104) = v14;
  *(unsigned char *)(a3 + 105) = v17;
  *(unsigned char *)(a3 + 106) = 0;
  *(unsigned char *)(a3 + 107) = v18;
  if (v14) {
    *(_DWORD *)(a3 + 100) = 14;
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v25)
  {
    char v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    char v24 = v23;
    operator delete(v23);
  }
}

void sub_DBFCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4BC1B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DBFCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a12) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBFD2C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 4) == 0) {
    return sub_DBA9DC(a1, a2);
  }
  unint64_t v4 = *(void *)(a1 + 256) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    uint64_t v14 = *(void *)(v4 + 16);
    *(_OWORD *)long long __dst = v5;
  }
  sub_4BDC0C(&__p, (uint64_t)__dst, 1uLL);
  uint64_t v6 = sub_DBA204((uint64_t *)&__p);
  int v7 = (void **)__p;
  if (__p)
  {
    int v8 = v12;
    uint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    unint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if (!v6) {
      return sub_DBA9DC(a1, a2);
    }
  }
  else if (!v6)
  {
    return sub_DBA9DC(a1, a2);
  }
  return v6;
}

void sub_DBFE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DBFE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a1 + 80);
  if (!v4) {
    return sub_DBAC88(a1, a2);
  }
  long long v5 = 0;
  std::string __p = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6) {
    int v7 = (uint64_t *)(v6 + 8);
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = 8 * v4;
  do
  {
    uint64_t v10 = *v7;
    if ((unint64_t)v5 < v18)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        sub_4200(v5, *(void **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v10;
        *((void *)v5 + 2) = *(void *)(v10 + 16);
        *(_OWORD *)long long v5 = v9;
      }
      v5 += 24;
    }
    else
    {
      long long v5 = sub_1D740((char **)&__p, v10);
    }
    char v17 = v5;
    ++v7;
    v8 -= 8;
  }
  while (v8);
  uint64_t v11 = sub_DBA204((uint64_t *)&__p);
  unint64_t v12 = (char *)__p;
  if (__p)
  {
    int v13 = (void **)v17;
    uint64_t v14 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != (void **)v12);
      uint64_t v14 = __p;
    }
    char v17 = v12;
    operator delete(v14);
  }
  if (!v11) {
    return sub_DBAC88(a1, a2);
  }
  return v11;
}

void sub_DBFFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_DBFFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_DBFFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_DC000C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 304)) {
    long long v5 = *(uint64_t (****)())(a1 + 304);
  }
  else {
    long long v5 = &off_2535C50;
  }
  if (*(void *)(a1 + 328)) {
    uint64_t v6 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    uint64_t v6 = &off_2539290;
  }
  unint64_t v7 = sub_DBF124(a1);
  int v35 = v8;
  uint64_t v36 = v7;
  uint64_t v9 = sub_1883F34(a1 + 16, dword_254EB28, qword_254EB30);
  uint64_t v10 = *(uint64_t (****)())(a1 + 352);
  if (!v10) {
    uint64_t v10 = &off_2539C48;
  }
  int v11 = *((_DWORD *)v10 + 6);
  unint64_t v12 = *(uint64_t (****)())(a1 + 328);
  if (!v12) {
    unint64_t v12 = &off_2539290;
  }
  int v32 = *((_DWORD *)v12 + 65);
  int v33 = v11;
  int v34 = sub_DB197C(a1, a2);
  sub_DB1848(a1, a2, (uint64_t)&v39);
  int v13 = *(uint64_t (****)())(a1 + 304);
  if (v13) {
    uint64_t v14 = *(uint64_t (****)())(a1 + 304);
  }
  else {
    uint64_t v14 = &off_2535C50;
  }
  if (*((_DWORD *)v14 + 32))
  {
LABEL_15:
    char v15 = 0;
    goto LABEL_38;
  }
  if (*(void *)(a1 + 328)) {
    char v16 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    char v16 = &off_2539290;
  }
  uint64_t v17 = *((int *)v16 + 18);
  if (!v17)
  {
    LOBYTE(v18) = 0;
    if (!v13) {
      int v13 = &off_2535C50;
    }
    unsigned int v22 = *((_DWORD *)v13 + 32);
LABEL_29:
    switch(v22)
    {
      case 0u:
        if (v18) {
          goto LABEL_37;
        }
        goto LABEL_15;
      case 1u:
        if ((v18 & 2) != 0) {
          goto LABEL_37;
        }
        goto LABEL_15;
      case 2u:
        if ((v18 & 4) != 0) {
          goto LABEL_37;
        }
        goto LABEL_15;
      case 3u:
        if ((v18 & 8) != 0) {
          goto LABEL_37;
        }
        goto LABEL_15;
      default:
        goto LABEL_37;
    }
  }
  int v18 = 0;
  char v19 = (unsigned int *)v16[10];
  uint64_t v20 = 4 * v17;
  do
  {
    v18 |= 1 << sub_7BB78(*v19++);
    v20 -= 4;
  }
  while (v20);
  uint64_t v21 = *(uint64_t (****)())(a1 + 304);
  if (!v21) {
    uint64_t v21 = &off_2535C50;
  }
  unsigned int v22 = *((_DWORD *)v21 + 32);
  if (v22 <= 3) {
    goto LABEL_29;
  }
LABEL_37:
  char v15 = *(_DWORD *)(a1 + 104) > 2;
LABEL_38:
  char v23 = sub_DBB340(a1);
  char v24 = *(uint64_t (****)())(a1 + 328);
  if (!v24) {
    char v24 = &off_2539290;
  }
  char v31 = v23;
  if (*((unsigned char *)v24 + 216)) {
    char v25 = 1;
  }
  else {
    char v25 = *((unsigned char *)v24 + 217) != 0;
  }
  int v26 = *(unsigned __int8 *)(v9 + 56);
  int v27 = *((unsigned __int8 *)v5 + 136);
  int v28 = *((unsigned __int8 *)v5 + 137);
  int v29 = *((unsigned __int8 *)v5 + 138);
  int v30 = *((unsigned __int8 *)v5 + 160);
  sub_DB4E9C(a1, (int **)__p);
  sub_DC833C(a3, v26 != 0, v27 != 0, v28 != 0, v29 != 0, v30 != 0, (uint64_t)__p, *((unsigned char *)v6 + 223), *((unsigned char *)v6 + 226), *((unsigned char *)v6 + 232), *((unsigned char *)v6 + 230), *((unsigned char *)v6 + 247), *((unsigned char *)v6 + 246), *((unsigned char *)v6 + 253), *((unsigned char *)v6 + 249), v33 > 0, v32 > 65, *((_DWORD *)v5 + 33), v36,
    v35,
    0,
    v34,
    &v39,
    *((_DWORD *)v6 + 70),
    v15,
    v31,
    *((unsigned char *)v6 + 250),
    *((unsigned char *)v6 + 248),
    v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v42)
  {
    char v43 = v42;
    operator delete(v42);
  }
  if (v40)
  {
    char v41 = v40;
    operator delete(v40);
  }
}

void sub_DC033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  if (__p)
  {
    operator delete(__p);
    sub_4BC1B8((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_4BC1B8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

double sub_DC03AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_DC0460(a1, a2, (uint64_t)&v6);
  *(_DWORD *)a3 = v6;
  *(unsigned char *)(a3 + 4) = v7;
  *(_OWORD *)(a3 + 8) = v8;
  *(void *)(a3 + 24) = v9;
  long long v4 = v11;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v4;
  *(_DWORD *)(a3 + 64) = v12;
  *(_OWORD *)(a3 + 72) = v13;
  *(void *)(a3 + 88) = v14;
  *(_DWORD *)(a3 + 96) = v15;
  *(_OWORD *)(a3 + 104) = v16;
  *(void *)(a3 + 120) = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a3 + 128) = v18;
  *(void *)(a3 + 144) = v19;
  *(unsigned char *)(a3 + 152) = v20;
  *(void *)(a3 + 160) = v21;
  *(unsigned char *)(a3 + 168) = v22;
  return result;
}

void sub_DC0460(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 288)) {
    int v6 = *(uint64_t (****)())(a1 + 288);
  }
  else {
    int v6 = &off_2535C50;
  }
  if (*(void *)(a1 + 296)) {
    char v7 = *(uint64_t (****)())(a1 + 296);
  }
  else {
    char v7 = &off_2539290;
  }
  long long v8 = *(uint64_t (****)())(a1 + 312);
  if (!v8) {
    long long v8 = &off_2539C48;
  }
  int v33 = *((_DWORD *)v8 + 6);
  int v9 = sub_DB2268(a1, a2);
  sub_DB2134(a1, a2, (uint64_t)&v44);
  long long v10 = *(uint64_t (****)())(a1 + 288);
  if (v10) {
    long long v11 = *(uint64_t (****)())(a1 + 288);
  }
  else {
    long long v11 = &off_2535C50;
  }
  if (*((_DWORD *)v11 + 32)) {
    goto LABEL_27;
  }
  if (*(void *)(a1 + 296)) {
    int v12 = *(uint64_t (****)())(a1 + 296);
  }
  else {
    int v12 = &off_2539290;
  }
  uint64_t v13 = *((int *)v12 + 18);
  if (v13)
  {
    int v14 = 0;
    int v15 = (unsigned int *)v12[10];
    uint64_t v16 = 4 * v13;
    do
    {
      v14 |= 1 << sub_7BB78(*v15++);
      v16 -= 4;
    }
    while (v16);
    LODWORD(v13) = v14 & 1;
    long long v10 = *(uint64_t (****)())(a1 + 288);
  }
  if (!v10) {
    long long v10 = &off_2535C50;
  }
  if (!*((_DWORD *)v10 + 32) && v13 == 0) {
LABEL_27:
  }
    BOOL v18 = 0;
  else {
    BOOL v18 = *(_DWORD *)(a1 + 152) > 1;
  }
  char v19 = sub_DBB760(a1);
  char v31 = v18;
  int v32 = v9;
  char v20 = *(uint64_t (****)())(a1 + 296);
  if (!v20) {
    char v20 = &off_2539290;
  }
  uint64_t v29 = a3;
  char v30 = v19;
  if (*((unsigned char *)v20 + 216)) {
    char v21 = 1;
  }
  else {
    char v21 = *((unsigned char *)v20 + 217) != 0;
  }
  unsigned int v22 = *(_DWORD *)(a1 + 408);
  int v23 = *((unsigned __int8 *)v6 + 136);
  int v24 = *((unsigned __int8 *)v6 + 137);
  int v25 = *((unsigned __int8 *)v6 + 138);
  int v26 = *((unsigned __int8 *)v6 + 160);
  sub_DB51CC(a1, (int **)__p);
  int v27 = *(uint64_t (****)())(a1 + 296);
  if (!v27) {
    int v27 = &off_2539290;
  }
  sub_DC833C((uint64_t)&v35, 0, v23 != 0, v24 != 0, v25 != 0, v26 != 0, (uint64_t)__p, *((unsigned char *)v7 + 223), *((unsigned char *)v7 + 226), *((unsigned char *)v7 + 232), *((unsigned char *)v7 + 230), *((unsigned char *)v7 + 247), *((unsigned char *)v7 + 246), *((unsigned char *)v7 + 253), *((unsigned char *)v7 + 249), v33 > 0, *((_DWORD *)v27 + 65) > 65, *((_DWORD *)v6 + 33), 1,
    0,
    0,
    v32,
    &v44,
    *((_DWORD *)v7 + 70),
    v31,
    v30,
    *((unsigned char *)v7 + 250),
    *((unsigned char *)v7 + 248),
    v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v28 = (uint64_t (***)())v6[11];
  if (!v28) {
    int v28 = &off_2536408;
  }
  sub_DC849C(v29, &v35, *((unsigned char *)v6 + 141), *((unsigned char *)v6 + 142), *((unsigned char *)v6 + 161), *((unsigned char *)v28 + 48), (v22 < 6) & (0x38u >> v22));
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v40)
  {
    char v41 = v40;
    operator delete(v40);
  }
  if (v38)
  {
    int v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    unint64_t v37 = v36;
    operator delete(v36);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    int v46 = v45;
    operator delete(v45);
  }
}

void sub_DC07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_CF1EE4((uint64_t)va);
  sub_4BC1B8(v16 - 184);
  _Unwind_Resume(a1);
}

void sub_DC07CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    sub_4BC1B8(v22 - 184);
    _Unwind_Resume(a1);
  }
  sub_4BC1B8(v22 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_DC082C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 408) < 6u) & (0x38u >> *(_DWORD *)(a1 + 408));
}

uint64_t sub_DC0848(uint64_t a1)
{
  *(void *)&v6[1] = 0;
  int v1 = *(_DWORD *)(a1 + 40);
  if ((v1 & 0x1000) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 336);
    v6[0] = *(unsigned char *)(v2 + 30);
    *(_WORD *)&v6[3] = *(_WORD *)(v2 + 24);
    v6[6] = *(unsigned char *)(v2 + 27);
  }
  if ((v1 & 0x200) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 312);
    char v3 = *(unsigned char *)(v4 + 40);
    v6[2] = *(unsigned char *)(v4 + 48);
  }
  else
  {
    char v3 = 0;
  }
  v6[5] = *(unsigned char *)(a1 + 414);
  v6[7] = *(unsigned char *)(a1 + 424);
  v6[1] = *(unsigned char *)(a1 + 412) & (v1 << 9 >> 31) | v3;
  return *(void *)v6;
}

BOOL sub_DC08E0(uint64_t a1)
{
  int v1 = *(uint64_t (****)())(a1 + 368);
  if (!v1) {
    int v1 = &off_2535CF8;
  }
  if (!*((unsigned char *)v1 + 26)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 440)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_DWORD *)(a1 + 472) == 2;
  }
  if (v2) {
    return 1;
  }
  uint64_t v4 = &off_25351C0;
  if (*(void *)(a1 + 392)) {
    uint64_t v4 = *(uint64_t (****)())(a1 + 392);
  }
  return *((_DWORD *)v4 + 16) == 2;
}

uint64_t sub_DC0944(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 408);
  if (v1 >= 7) {
    LOBYTE(v1) = 0;
  }
  return v1;
}

BOOL sub_DC0958(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 320);
  if (!v1) {
    unsigned int v1 = &off_2536528;
  }
  return (*((_DWORD *)v1 + 19) - 1) < 2;
}

uint64_t sub_DC0980(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    unsigned int v1 = &off_2535C50;
  }
  BOOL v2 = (uint64_t (***)())v1[12];
  if (!v2) {
    BOOL v2 = &off_2536528;
  }
  return *((unsigned __int8 *)v2 + 80);
}

uint64_t sub_DC09B0(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 320);
  if (!v1) {
    unsigned int v1 = &off_2536528;
  }
  return *((unsigned __int8 *)v1 + 80);
}

uint64_t sub_DC09CC(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (****)())(a1 + 152);
  if (!v1) {
    unsigned int v1 = &off_2535C50;
  }
  BOOL v2 = (uint64_t (***)())v1[12];
  if (!v2) {
    BOOL v2 = &off_2536528;
  }
  return *((unsigned __int8 *)v2 + 80);
}

void sub_DC09FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_76C8C(a2, *(int *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(a1 + 56);
  if (v6)
  {
    char v7 = *(char **)(a2 + 8);
    uint64_t v8 = 8 * v6;
    do
    {
      while (1)
      {
        unint64_t v11 = *(void *)(*(void *)v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v12 = *(void *)(*(void *)v5 + 56) & 0xFFFFFFFFFFFFFFFELL;
        if ((unint64_t)v7 < *(void *)(a2 + 16)) {
          break;
        }
        char v7 = sub_DC8AA4((void **)a2, (long long *)v11, (long long *)(*(void *)(*(void *)v5 + 56) & 0xFFFFFFFFFFFFFFFELL));
        *(void *)(a2 + 8) = v7;
        v5 += 8;
        v8 -= 8;
        if (!v8) {
          return;
        }
      }
      if (*(char *)(v11 + 23) < 0)
      {
        sub_4200(&__dst, *(void **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v13 = *(_OWORD *)v11;
        uint64_t v17 = *(void *)(v11 + 16);
        long long __dst = v13;
      }
      if (*(char *)(v12 + 23) < 0)
      {
        sub_4200(&v14, *(void **)v12, *(void *)(v12 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v12;
        uint64_t v15 = *(void *)(v12 + 16);
        long long v14 = v9;
      }
      long long v10 = __dst;
      *((void *)v7 + 2) = v17;
      *(_OWORD *)char v7 = v10;
      *(_OWORD *)(v7 + 24) = v14;
      *((void *)v7 + 5) = v15;
      v7 += 48;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 8) = v7;
      v5 += 8;
      v8 -= 8;
    }
    while (v8);
  }
}

void sub_DC0B3C(_Unwind_Exception *a1)
{
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

void sub_DC0B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    *(void *)(v18 + 8) = v19;
    sub_1A6DC((void **)v18);
    _Unwind_Resume(a1);
  }
  *(void *)(v18 + 8) = v19;
  sub_1A6DC((void **)v18);
  _Unwind_Resume(a1);
}

void sub_DC0B90(_Unwind_Exception *a1)
{
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

double sub_DC0BA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5B9B3C(a3);
  *(_WORD *)(a3 + 1536) = 0;
  *(_OWORD *)(a3 + 1544) = 0u;
  *(_OWORD *)(a3 + 1560) = 0u;
  *(_OWORD *)(a3 + 1576) = 0u;
  *(void *)(a3 + 1592) = -1;
  *(_DWORD *)(a3 + 1600) = 0x7FFFFFFF;
  *(void *)(a3 + 1608) = -1;
  *(void *)(a3 + 1616) = -1;
  *(void *)(a3 + 1624) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a3 + 1632) = 0;
  *(_DWORD *)(a3 + 1640) = -1935635296;
  *(void *)(a3 + 1648) = 0;
  *(_DWORD *)(a3 + 1655) = 0;
  *(void *)(a3 + 1664) = 0;
  *(void *)(a3 + 1680) = 0;
  *(void *)(a3 + 1672) = 0;
  *(_DWORD *)(a3 + 1688) = 0;
  *(unsigned char *)(a3 + 1692) = 100;
  sub_DB7648(a1, a2, (uint64_t)&v15);
  sub_CAB438(a3, (uint64_t)&v15);
  sub_4BCED0((uint64_t)&v15);
  *(unsigned char *)(a3 + 1536) = *(unsigned char *)(a1 + 416);
  uint64_t v6 = *(uint64_t (****)())(a1 + 296);
  if (!v6) {
    uint64_t v6 = &off_2539290;
  }
  *(unsigned char *)(a3 + 1537) = *((unsigned char *)v6 + 239);
  sub_DC0E70(a1, (uint64_t)&v15);
  sub_DC8D20((void ***)(a3 + 1544));
  *(_OWORD *)(a3 + 1544) = v15;
  *(void *)(a3 + 1560) = v16;
  if ((*(unsigned char *)(a1 + 41) & 0x10) != 0)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 336) + 136);
    BYTE7(v16) = 4;
    LODWORD(v15) = v8;
    BYTE4(v15) = 0;
  }
  else if (*(int *)(a1 + 80) >= 1 && (uint64_t v7 = *(void *)(*(void *)(a1 + 88) + 8), (*(unsigned char *)(v7 + 40) & 1) != 0))
  {
    unint64_t v13 = *(void *)(v7 + 456) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
    {
      sub_4200(&v15, *(void **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      *(void *)&long long v16 = *(void *)(v13 + 16);
      long long v15 = v14;
    }
  }
  else
  {
    BYTE7(v16) = 0;
    LOBYTE(v15) = 0;
  }
  long long v9 = (void **)(a3 + 1568);
  if (*(char *)(a3 + 1591) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)long long v9 = v15;
  *(void *)(a3 + 1584) = v16;
  sub_DBC134(a1, (uint64_t)&v15);
  *(void *)(a3 + 1592) = v15;
  *(_DWORD *)(a3 + 1600) = DWORD2(v15);
  long long v10 = v17;
  *(_OWORD *)(a3 + 1608) = v16;
  *(_OWORD *)(a3 + 1624) = v10;
  *(_OWORD *)(a3 + 1640) = *(_OWORD *)v18;
  *(_DWORD *)(a3 + 1655) = *(_DWORD *)&v18[15];
  unint64_t v11 = *(void **)(a3 + 1664);
  if (v11)
  {
    *(void *)(a3 + 1672) = v11;
    operator delete(v11);
    *(void *)(a3 + 1664) = 0;
    *(void *)(a3 + 1672) = 0;
    *(void *)(a3 + 1680) = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)(a3 + 1664) = v19;
  *(void *)(a3 + 1680) = v20;
  *(_DWORD *)(a3 + 1688) = v21;
  *(unsigned char *)(a3 + 1692) = v22;
  return result;
}

void sub_DC0E04(_Unwind_Exception *a1)
{
  sub_7379DC(v1);
  _Unwind_Resume(a1);
}

void sub_DC0E18(_Unwind_Exception *a1)
{
  sub_7379DC(v1);
  _Unwind_Resume(a1);
}

void sub_DC0E2C(_Unwind_Exception *a1)
{
  sub_7379DC(v1);
  _Unwind_Resume(a1);
}

void sub_DC0E40(_Unwind_Exception *a1)
{
  sub_7379DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DC0E54(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 296);
  if (!v1) {
    uint64_t v1 = &off_2539290;
  }
  return *((unsigned __int8 *)v1 + 239);
}

void sub_DC0E70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if ((*(unsigned char *)(a1 + 41) & 0x10) == 0 && *(int *)(a1 + 80) >= 1)
  {
    sub_DC4D9C(a1, (uint64_t *)v59);
    char v3 = *(void **)(a2 + 8);
    if ((unint64_t)v3 >= *(void *)(a2 + 16))
    {
      char v45 = sub_DC9618((void ***)a2, (uint64_t)v59);
      int v46 = *(char **)v59;
      *(void *)(a2 + 8) = v45;
      if (v46)
      {
        int v47 = *(char **)&v59[8];
        uint64_t v48 = v46;
        if (*(char **)&v59[8] != v46)
        {
          do
          {
            int v49 = (void *)*((void *)v47 - 9);
            if (v49)
            {
              *((void *)v47 - 8) = v49;
              operator delete(v49);
            }
            char v50 = (void *)*((void *)v47 - 12);
            if (v50)
            {
              *((void *)v47 - 11) = v50;
              operator delete(v50);
            }
            v47 -= 176;
          }
          while (v47 != v46);
          uint64_t v48 = *(char **)v59;
        }
        *(void *)&v59[8] = v46;
        operator delete(v48);
      }
    }
    else
    {
      void *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *(_OWORD *)char v3 = *(_OWORD *)v59;
      v3[2] = *(void *)&v59[16];
      *(void *)(a2 + 8) = v3 + 3;
    }
    return;
  }
  uint64_t v4 = *(uint64_t (****)())(a1 + 336);
  if (!v4) {
    uint64_t v4 = &off_2536C78;
  }
  uint64_t v5 = v4[5];
  if (v5) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((int *)v4 + 8);
  if (v7)
  {
    unint64_t v51 = &v6[v7];
    uint64_t v52 = a2;
    while (1)
    {
      unint64_t v53 = v6;
      uint64_t v9 = *v6;
      __p[0] = 0;
      __p[1] = 0;
      unint64_t v58 = 0;
      uint64_t v10 = *(void *)(v9 + 64);
      uint64_t v11 = v10 ? v10 + 8 : 0;
      uint64_t v12 = *(int *)(v9 + 56);
      if (v12) {
        break;
      }
LABEL_45:
      uint64_t v38 = *(void **)(v52 + 8);
      if ((unint64_t)v38 < *(void *)(v52 + 16))
      {
        void *v38 = 0;
        v38[1] = 0;
        unsigned __int8 v38[2] = 0;
        *(_OWORD *)uint64_t v38 = *(_OWORD *)__p;
        unsigned __int8 v38[2] = v58;
        *(void *)(v52 + 8) = v38 + 3;
        int v8 = v53;
      }
      else
      {
        int v39 = sub_DC9618((void ***)v52, (uint64_t)__p);
        uint64_t v40 = (char *)__p[0];
        *(void *)(v52 + 8) = v39;
        int v8 = v53;
        if (v40)
        {
          char v41 = (char *)__p[1];
          uint64_t v42 = v40;
          if (__p[1] != v40)
          {
            do
            {
              char v43 = (void *)*((void *)v41 - 9);
              if (v43)
              {
                *((void *)v41 - 8) = v43;
                operator delete(v43);
              }
              int v44 = (void *)*((void *)v41 - 12);
              if (v44)
              {
                *((void *)v41 - 11) = v44;
                operator delete(v44);
              }
              v41 -= 176;
            }
            while (v41 != v40);
            uint64_t v42 = (char *)__p[0];
          }
          __p[1] = v40;
          operator delete(v42);
        }
      }
      uint64_t v6 = v8 + 1;
      if (v6 == v51) {
        return;
      }
    }
    unint64_t v13 = 0;
    uint64_t v14 = 8 * v12;
    while (1)
    {
      while (1)
      {
        long long v16 = *(_DWORD **)v11;
        if ((*(unsigned char *)(*(void *)v11 + 40) & 0x40) == 0) {
          break;
        }
        int v28 = v16[18];
        int v29 = v16[19];
        int v55 = v29;
        int v56 = v28;
        uint64_t v30 = v16[21];
        uint64_t v54 = v30;
        if ((unint64_t)v13 < v58)
        {
          *(_OWORD *)&v59[16] = 0u;
          *(void *)__int16 v59 = 0x7FFFFFFFLL;
          *(_DWORD *)&v59[8] = 0x7FFFFFFF;
          *(void *)&v59[12] = 0x7FFFFFFF7FFFFFFFLL;
          unint64_t v60 = 0x8000000080000000;
          long long v62 = 0u;
          memset(v63, 0, sizeof(v63));
          long long v61 = 0u;
          *(void *)&v63[20] = 0x8000000080000000;
          *(_DWORD *)&v63[28] = 0x7FFFFFFF;
          uint64_t v64 = 0xFFFFFFFFLL;
          long long v65 = xmmword_20E8160;
          *(_DWORD *)unint64_t v13 = v28;
          *((_DWORD *)v13 + 1) = 10 * v29;
          *((_DWORD *)v13 + 2) = -1;
          *((void *)v13 + 2) = v30;
          *((_DWORD *)v13 + 6) = 0x7FFFFFFF;
          *(void *)(v13 + 28) = 0x7FFFFFFF7FFFFFFFLL;
          long long v31 = *(_OWORD *)v59;
          *(_OWORD *)(v13 + 56) = *(_OWORD *)&v59[16];
          *(_OWORD *)(v13 + 72) = v60;
          *(_OWORD *)(v13 + 40) = v31;
          *((void *)v13 + 11) = 0;
          *((void *)v13 + 12) = 0;
          int v21 = (void *)v61;
          uint64_t v32 = *((void *)&v61 + 1) - v61;
          if (*((void *)&v61 + 1) != (void)v61)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v32 >> 2) > 0x1555555555555555) {
              sub_2E00();
            }
            int v33 = (char *)operator new(*((void *)&v61 + 1) - v61);
            *((void *)v13 + 10) = v33;
            *((void *)v13 + 11) = v33;
            int v34 = &v33[4 * (v32 >> 2)];
            *((void *)v13 + 12) = v34;
            memcpy(v33, v21, v32 - 3);
            *((void *)v13 + 11) = v34;
          }
          *((void *)v13 + 13) = 0;
          *((void *)v13 + 14) = 0;
          *((void *)v13 + 15) = 0;
          int v25 = (void *)*((void *)&v62 + 1);
          uint64_t v26 = *(void *)v63 - *((void *)&v62 + 1);
          if (*(void *)v63 == *((void *)&v62 + 1)) {
            goto LABEL_36;
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 2);
          if (v27 > 0x1555555555555555) {
            sub_2E00();
          }
          goto LABEL_35;
        }
        long long v15 = (char *)sub_DC97D0((uint64_t *)__p, &v56, &v55, &v54);
LABEL_20:
        unint64_t v13 = v15;
        __p[1] = v15;
        v11 += 8;
        v14 -= 8;
        if (!v14) {
          goto LABEL_45;
        }
      }
      int v17 = v16[18];
      int v18 = v16[19];
      LODWORD(v54) = v17;
      int v19 = v16[22];
      int v55 = v19;
      int v56 = v18;
      if ((unint64_t)v13 >= v58)
      {
        long long v15 = (char *)sub_DC9204((uint64_t *)__p, (int *)&v54, &v56, &v55);
        goto LABEL_20;
      }
      *(_OWORD *)&v59[16] = 0u;
      *(void *)__int16 v59 = 0x7FFFFFFFLL;
      *(_DWORD *)&v59[8] = 0x7FFFFFFF;
      *(void *)&v59[12] = 0x7FFFFFFF7FFFFFFFLL;
      unint64_t v60 = 0x8000000080000000;
      long long v62 = 0u;
      memset(v63, 0, sizeof(v63));
      long long v61 = 0u;
      *(void *)&v63[20] = 0x8000000080000000;
      *(_DWORD *)&v63[28] = 0x7FFFFFFF;
      uint64_t v64 = 0xFFFFFFFFLL;
      long long v65 = xmmword_20E8160;
      *(_DWORD *)unint64_t v13 = v17;
      *((_DWORD *)v13 + 1) = 10 * v18;
      *((_DWORD *)v13 + 2) = v19;
      *((void *)v13 + 2) = 0x7FFFFFFFFFFFFFFFLL;
      *((_DWORD *)v13 + 6) = 0x7FFFFFFF;
      *(void *)(v13 + 28) = 0x7FFFFFFF7FFFFFFFLL;
      long long v20 = *(_OWORD *)v59;
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&v59[16];
      *(_OWORD *)(v13 + 72) = v60;
      *(_OWORD *)(v13 + 40) = v20;
      *((void *)v13 + 11) = 0;
      *((void *)v13 + 12) = 0;
      int v21 = (void *)v61;
      uint64_t v22 = *((void *)&v61 + 1) - v61;
      if (*((void *)&v61 + 1) != (void)v61)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v22 >> 2) > 0x1555555555555555) {
          sub_2E00();
        }
        int v23 = (char *)operator new(*((void *)&v61 + 1) - v61);
        *((void *)v13 + 10) = v23;
        *((void *)v13 + 11) = v23;
        int v24 = &v23[4 * (v22 >> 2)];
        *((void *)v13 + 12) = v24;
        memcpy(v23, v21, v22 - 3);
        *((void *)v13 + 11) = v24;
      }
      *((void *)v13 + 13) = 0;
      *((void *)v13 + 14) = 0;
      *((void *)v13 + 15) = 0;
      int v25 = (void *)*((void *)&v62 + 1);
      uint64_t v26 = *(void *)v63 - *((void *)&v62 + 1);
      if (*(void *)v63 == *((void *)&v62 + 1)) {
        goto LABEL_36;
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 2);
      if (v27 > 0x1555555555555555) {
        sub_2E00();
      }
LABEL_35:
      int v35 = (char *)operator new(*(void *)v63 - *((void *)&v62 + 1));
      *((void *)v13 + 13) = v35;
      *((void *)v13 + 14) = v35;
      uint64_t v36 = &v35[12 * v27];
      *((void *)v13 + 15) = v36;
      memcpy(v35, v25, v26 - 3);
      *((void *)v13 + 14) = v36;
LABEL_36:
      *((_OWORD *)v13 + 8) = *(_OWORD *)&v63[16];
      unsigned int v37 = v64;
      *((_DWORD *)v13 + 38) = v64;
      if (v37 <= 1) {
        *((void *)v13 + 18) = *(void *)&v63[32];
      }
      *((_OWORD *)v13 + 10) = v65;
      if (v25) {
        operator delete(v25);
      }
      if (v21) {
        operator delete(v21);
      }
      v13 += 176;
      __p[1] = v13;
      v11 += 8;
      v14 -= 8;
      if (!v14) {
        goto LABEL_45;
      }
    }
  }
}

void sub_DC147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_DC4FA8((void **)va);
  sub_5B97F4(v15);
  _Unwind_Resume(a1);
}

void sub_DC1498(_Unwind_Exception *a1)
{
  sub_5B97F4(v1);
  _Unwind_Resume(a1);
}

void sub_DC14AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_DC4FA8((void **)va);
  sub_5B97F4(v11);
  _Unwind_Resume(a1);
}

void sub_DC14C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  int v17 = va_arg(va1, void *);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  long long v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 112) = v15;
    operator delete(v15);
  }
  long long v16 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 88) = v16;
    operator delete(v16);
  }
  sub_45E914((uint64_t *)va1);
  uint64_t v19 = v11;
  sub_DC4FA8((void **)va);
  sub_5B97F4(a4);
  _Unwind_Resume(a1);
}

uint64_t sub_DC1540@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    return result;
  }
  uint64_t v5 = result;
  sub_10F5D3C((uint64_t)v76, 0, 0);
  if (sub_1880FAC(v76, *(void *)(v5 + 280) & 0xFFFFFFFFFFFFFFFELL))
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(void *)(a3 + 280) = 0;
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 296) = v92;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    if (v81) {
      uint64_t v6 = (uint64_t *)(v81 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    if (v80)
    {
      uint64_t v7 = 8 * v80;
      do
      {
        sub_486188(a3, *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    if (v83) {
      uint64_t v8 = v83 + 8;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v82)
    {
      uint64_t v9 = 8 * v82;
      double v10 = 85.0511288;
      do
      {
        double v11 = *(double *)(*(void *)v8 + 56);
        uint64_t v12 = -1;
        if (v11 <= 180.0)
        {
          double v10 = *(double *)(*(void *)v8 + 48);
          if (v10 >= -85.0511288 && v10 <= 85.0511288 && v11 >= -180.0)
          {
            double v13 = fmax(v10, -85.0511288);
            if (v13 >= 85.0511288) {
              double v14 = 1.48442223;
            }
            else {
              double v14 = v13 * 3.14159265 / 180.0;
            }
            long double v15 = sin(v14);
            LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v16 >= 0xFFFFFFFE) {
              uint64_t v16 = 4294967294;
            }
            else {
              uint64_t v16 = v16;
            }
            double v10 = (v11 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v12 = v10 | (unint64_t)(v16 << 32);
          }
        }
        *(void *)&long long v60 = v12;
        DWORD2(v60) = 0x7FFFFFFF;
        sub_4863C8(a3, (uint64_t *)&v60, v10);
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    if (v85) {
      int v17 = (uint64_t *)(v85 + 8);
    }
    else {
      int v17 = 0;
    }
    if (v84)
    {
      uint64_t v18 = 8 * v84;
      do
      {
        sub_4865FC(a3, *v17++);
        v18 -= 8;
      }
      while (v18);
    }
    sub_487720(a3, (const std::string *)(v86 & 0xFFFFFFFFFFFFFFFELL));
    sub_487748(a3, (const std::string *)(v88 & 0xFFFFFFFFFFFFFFFELL));
    sub_486A54(a3, v93 != 0);
    if ((v77 & 0x40) != 0)
    {
      if ((~*(_DWORD *)(v91 + 16) & 3) != 0)
      {
        long long v60 = 0uLL;
        long long v61 = 0;
      }
      else
      {
        sub_51C4C((uint64_t)&v60, *(void *)(v91 + 24), *(void *)(v91 + 32));
      }
      sub_487728(a3, (uint64_t)&v60);
    }
    else
    {
      sub_51CCC((const char *)(v87 & 0xFFFFFFFFFFFFFFFELL), &v60);
      sub_487728(a3, (uint64_t)&v60);
    }
    if ((v77 & 0x10) != 0)
    {
      double v19 = *(double *)(v89 + 56);
      uint64_t v20 = -1;
      if (v19 <= 180.0)
      {
        double v21 = *(double *)(v89 + 48);
        if (v21 >= -85.0511288 && v21 <= 85.0511288 && v19 >= -180.0)
        {
          double v22 = fmax(v21, -85.0511288);
          double v23 = v22 * 3.14159265 / 180.0;
          BOOL v24 = v22 < 85.0511288;
          double v25 = 1.48442223;
          if (v24) {
            double v25 = v23;
          }
          long double v26 = sin(v25);
          LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v27 >= 0xFFFFFFFE) {
            uint64_t v27 = 4294967294;
          }
          else {
            uint64_t v27 = v27;
          }
          uint64_t v20 = ((v19 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
        }
      }
      *(void *)&long long v60 = v20;
      DWORD2(v60) = 0x7FFFFFFF;
      sub_487758(a3, (uint64_t *)&v60);
    }
    sub_48777C(a3, v95);
    sub_DC5E74((uint64_t)v76, (unint64_t *)&v60);
    sub_486A6C(a3, (uint64_t)&v60);
    if (v74)
    {
      char v75 = v74;
      operator delete(v74);
    }
    int v28 = v70;
    int v29 = v71;
    uint64_t v73 = 0;
    unint64_t v30 = (char *)v71 - (char *)v70;
    if ((unint64_t)((char *)v71 - (char *)v70) >= 0x11)
    {
      do
      {
        operator delete(*v28);
        int v29 = v71;
        int v28 = v70 + 1;
        int v70 = v28;
        unint64_t v30 = (char *)v71 - (char *)v28;
      }
      while ((unint64_t)((char *)v71 - (char *)v28) > 0x10);
    }
    unint64_t v31 = v30 >> 3;
    if (v31 == 1)
    {
      uint64_t v32 = 85;
    }
    else
    {
      if (v31 != 2)
      {
LABEL_67:
        if (v28 != v29)
        {
          do
          {
            int v33 = *v28++;
            operator delete(v33);
          }
          while (v28 != v29);
          if (v71 != v70) {
            char v71 = (void **)((char *)v71 + (((char *)v70 - (char *)v71 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v69) {
          operator delete(v69);
        }
        int v34 = (char *)v66;
        if (v66)
        {
          int v35 = v67;
          uint64_t v36 = v66;
          if (v67 != v66)
          {
            do
            {
              unsigned int v37 = (void *)*((void *)v35 - 6);
              if (v37)
              {
                *((void *)v35 - 5) = v37;
                operator delete(v37);
              }
              if (*(v35 - 57) < 0) {
                operator delete(*((void **)v35 - 10));
              }
              v35 -= 80;
            }
            while (v35 != v34);
            uint64_t v36 = v66;
          }
          char v67 = v34;
          operator delete(v36);
        }
        uint64_t v38 = (void **)v62;
        int v39 = v63;
        uint64_t v65 = 0;
        unint64_t v40 = (char *)v63 - (unsigned char *)v62;
        if ((unint64_t)((char *)v63 - (unsigned char *)v62) >= 0x11)
        {
          do
          {
            operator delete(*v38);
            int v39 = v63;
            uint64_t v38 = (void **)((char *)v62 + 8);
            long long v62 = v38;
            unint64_t v40 = (char *)v63 - (char *)v38;
          }
          while ((unint64_t)((char *)v63 - (char *)v38) > 0x10);
        }
        unint64_t v41 = v40 >> 3;
        if (v41 == 1)
        {
          uint64_t v42 = 64;
        }
        else
        {
          if (v41 != 2) {
            goto LABEL_90;
          }
          uint64_t v42 = 128;
        }
        uint64_t v64 = v42;
LABEL_90:
        if (v38 != v39)
        {
          do
          {
            char v43 = *v38++;
            operator delete(v43);
          }
          while (v38 != v39);
          if (v63 != v62) {
            int v63 = (void **)((char *)v63 + (((unsigned char *)v62 - (unsigned char *)v63 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v61) {
          operator delete(v61);
        }
        __int16 v44 = v77;
        if ((v77 & 0x2000) != 0)
        {
          sub_488EE8(a3, v96);
          __int16 v44 = v77;
        }
        if ((v44 & 0x4000) != 0 && v97)
        {
          sub_488EB4(a3);
          __int16 v44 = v77;
        }
        if ((v44 & 0x20) != 0)
        {
          sub_48779C(a3, *(void *)(v90 + 24), 1, *(_DWORD *)(v90 + 32));
          __int16 v44 = v77;
        }
        if ((v44 & 0x800) != 0)
        {
          if (v79) {
            char v45 = (uint64_t *)(v79 + 8);
          }
          else {
            char v45 = 0;
          }
          if (v78)
          {
            uint64_t v46 = 8 * v78;
            int v47 = v45;
            while (*(_DWORD *)(*v47 + 144) != v94)
            {
              ++v47;
              v46 -= 8;
              if (!v46) {
                goto LABEL_123;
              }
            }
          }
          else
          {
            int v47 = v45;
          }
          if (v47 != &v45[v78])
          {
            sub_491838((uint64_t)&v60, *v47);
            sub_4860A4(a3, (uint64_t)&v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            uint64_t v48 = (char *)v66;
            if (v66)
            {
              uint64_t v49 = (uint64_t)v67;
              char v50 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v49 = sub_489CF4(v49 - 144);
                while ((char *)v49 != v48);
                char v50 = v66;
              }
              char v67 = v48;
              operator delete(v50);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
LABEL_123:
        if (*((unsigned char *)a2 + 4))
        {
          if (v79) {
            unint64_t v51 = (uint64_t *)(v79 + 8);
          }
          else {
            unint64_t v51 = 0;
          }
          if (v78)
          {
            int v52 = *a2;
            uint64_t v53 = 8 * v78;
            for (uint64_t i = v51; *(_DWORD *)(*i + 144) != v52; ++i)
            {
              v53 -= 8;
              if (!v53) {
                return sub_10F6120(v76);
              }
            }
          }
          else
          {
            uint64_t i = v51;
          }
          if (i != &v51[v78])
          {
            sub_48926C(a3, i == v51);
            sub_491838((uint64_t)&v60, *i);
            sub_485264(a3, &v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            int v55 = (char *)v66;
            if (v66)
            {
              uint64_t v56 = (uint64_t)v67;
              int v57 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v56 = sub_489CF4(v56 - 144);
                while ((char *)v56 != v55);
                int v57 = v66;
              }
              char v67 = v55;
              operator delete(v57);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
        return sub_10F6120(v76);
      }
      uint64_t v32 = 170;
    }
    uint64_t v72 = v32;
    goto LABEL_67;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v60);
    sub_188FC78(&v60, (uint64_t)"Could not parse session_state from request", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v59 < 0) {
      operator delete(__p);
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(void *)(a3 + 408) = 0;
  *(void *)(a3 + 413) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_DWORD *)(a3 + 400) = 0;
  *(void *)(a3 + 472) = 0x3FF0000000000000;
  *(void *)(a3 + 480) = 0;
  *(void *)(a3 + 488) = 0;
  *(void *)(a3 + 496) = 0;
  *(unsigned char *)(a3 + 504) = 5;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
  *(void *)(a3 + 648) = 0;
  *(void *)(a3 + 656) = 0;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_OWORD *)(a3 + 584) = 0u;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_OWORD *)(a3 + 625) = 0u;
  *(void *)(a3 + 664) = -1;
  *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
  *(void *)(a3 + 676) = 0;
  *(void *)(a3 + 688) = -1;
  *(_DWORD *)(a3 + 696) = -1;
  *(unsigned char *)(a3 + 704) = 0;
  return sub_10F6120(v76);
}

void sub_DC2004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_CA0BAC(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC2040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    sub_10F6120(&a52);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_10F6120(&a52);
  _Unwind_Resume(a1);
}

void sub_DC208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC20A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4891C8(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC20D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC20F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_DC210C@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(result + 40) & 2) == 0)
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    return result;
  }
  uint64_t v5 = result;
  sub_10F5D3C((uint64_t)v76, 0, 0);
  if (sub_1880FAC(v76, *(void *)(v5 + 248) & 0xFFFFFFFFFFFFFFFELL))
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(void *)(a3 + 280) = 0;
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 296) = v92;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    if (v81) {
      uint64_t v6 = (uint64_t *)(v81 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    if (v80)
    {
      uint64_t v7 = 8 * v80;
      do
      {
        sub_486188(a3, *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    if (v83) {
      uint64_t v8 = v83 + 8;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v82)
    {
      uint64_t v9 = 8 * v82;
      double v10 = 85.0511288;
      do
      {
        double v11 = *(double *)(*(void *)v8 + 56);
        uint64_t v12 = -1;
        if (v11 <= 180.0)
        {
          double v10 = *(double *)(*(void *)v8 + 48);
          if (v10 >= -85.0511288 && v10 <= 85.0511288 && v11 >= -180.0)
          {
            double v13 = fmax(v10, -85.0511288);
            if (v13 >= 85.0511288) {
              double v14 = 1.48442223;
            }
            else {
              double v14 = v13 * 3.14159265 / 180.0;
            }
            long double v15 = sin(v14);
            LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v16 >= 0xFFFFFFFE) {
              uint64_t v16 = 4294967294;
            }
            else {
              uint64_t v16 = v16;
            }
            double v10 = (v11 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v12 = v10 | (unint64_t)(v16 << 32);
          }
        }
        *(void *)&long long v60 = v12;
        DWORD2(v60) = 0x7FFFFFFF;
        sub_4863C8(a3, (uint64_t *)&v60, v10);
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    if (v85) {
      int v17 = (uint64_t *)(v85 + 8);
    }
    else {
      int v17 = 0;
    }
    if (v84)
    {
      uint64_t v18 = 8 * v84;
      do
      {
        sub_4865FC(a3, *v17++);
        v18 -= 8;
      }
      while (v18);
    }
    sub_487720(a3, (const std::string *)(v86 & 0xFFFFFFFFFFFFFFFELL));
    sub_487748(a3, (const std::string *)(v88 & 0xFFFFFFFFFFFFFFFELL));
    sub_486A54(a3, v93 != 0);
    if ((v77 & 0x40) != 0)
    {
      if ((~*(_DWORD *)(v91 + 16) & 3) != 0)
      {
        long long v60 = 0uLL;
        long long v61 = 0;
      }
      else
      {
        sub_51C4C((uint64_t)&v60, *(void *)(v91 + 24), *(void *)(v91 + 32));
      }
      sub_487728(a3, (uint64_t)&v60);
    }
    else
    {
      sub_51CCC((const char *)(v87 & 0xFFFFFFFFFFFFFFFELL), &v60);
      sub_487728(a3, (uint64_t)&v60);
    }
    if ((v77 & 0x10) != 0)
    {
      double v19 = *(double *)(v89 + 56);
      uint64_t v20 = -1;
      if (v19 <= 180.0)
      {
        double v21 = *(double *)(v89 + 48);
        if (v21 >= -85.0511288 && v21 <= 85.0511288 && v19 >= -180.0)
        {
          double v22 = fmax(v21, -85.0511288);
          double v23 = v22 * 3.14159265 / 180.0;
          BOOL v24 = v22 < 85.0511288;
          double v25 = 1.48442223;
          if (v24) {
            double v25 = v23;
          }
          long double v26 = sin(v25);
          LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v27 >= 0xFFFFFFFE) {
            uint64_t v27 = 4294967294;
          }
          else {
            uint64_t v27 = v27;
          }
          uint64_t v20 = ((v19 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
        }
      }
      *(void *)&long long v60 = v20;
      DWORD2(v60) = 0x7FFFFFFF;
      sub_487758(a3, (uint64_t *)&v60);
    }
    sub_48777C(a3, v95);
    sub_DC5E74((uint64_t)v76, (unint64_t *)&v60);
    sub_486A6C(a3, (uint64_t)&v60);
    if (v74)
    {
      char v75 = v74;
      operator delete(v74);
    }
    int v28 = v70;
    int v29 = v71;
    uint64_t v73 = 0;
    unint64_t v30 = (char *)v71 - (char *)v70;
    if ((unint64_t)((char *)v71 - (char *)v70) >= 0x11)
    {
      do
      {
        operator delete(*v28);
        int v29 = v71;
        int v28 = v70 + 1;
        int v70 = v28;
        unint64_t v30 = (char *)v71 - (char *)v28;
      }
      while ((unint64_t)((char *)v71 - (char *)v28) > 0x10);
    }
    unint64_t v31 = v30 >> 3;
    if (v31 == 1)
    {
      uint64_t v32 = 85;
    }
    else
    {
      if (v31 != 2)
      {
LABEL_67:
        if (v28 != v29)
        {
          do
          {
            int v33 = *v28++;
            operator delete(v33);
          }
          while (v28 != v29);
          if (v71 != v70) {
            char v71 = (void **)((char *)v71 + (((char *)v70 - (char *)v71 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v69) {
          operator delete(v69);
        }
        int v34 = (char *)v66;
        if (v66)
        {
          int v35 = v67;
          uint64_t v36 = v66;
          if (v67 != v66)
          {
            do
            {
              unsigned int v37 = (void *)*((void *)v35 - 6);
              if (v37)
              {
                *((void *)v35 - 5) = v37;
                operator delete(v37);
              }
              if (*(v35 - 57) < 0) {
                operator delete(*((void **)v35 - 10));
              }
              v35 -= 80;
            }
            while (v35 != v34);
            uint64_t v36 = v66;
          }
          char v67 = v34;
          operator delete(v36);
        }
        uint64_t v38 = (void **)v62;
        int v39 = v63;
        uint64_t v65 = 0;
        unint64_t v40 = (char *)v63 - (unsigned char *)v62;
        if ((unint64_t)((char *)v63 - (unsigned char *)v62) >= 0x11)
        {
          do
          {
            operator delete(*v38);
            int v39 = v63;
            uint64_t v38 = (void **)((char *)v62 + 8);
            long long v62 = v38;
            unint64_t v40 = (char *)v63 - (char *)v38;
          }
          while ((unint64_t)((char *)v63 - (char *)v38) > 0x10);
        }
        unint64_t v41 = v40 >> 3;
        if (v41 == 1)
        {
          uint64_t v42 = 64;
        }
        else
        {
          if (v41 != 2) {
            goto LABEL_90;
          }
          uint64_t v42 = 128;
        }
        uint64_t v64 = v42;
LABEL_90:
        if (v38 != v39)
        {
          do
          {
            char v43 = *v38++;
            operator delete(v43);
          }
          while (v38 != v39);
          if (v63 != v62) {
            int v63 = (void **)((char *)v63 + (((unsigned char *)v62 - (unsigned char *)v63 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v61) {
          operator delete(v61);
        }
        __int16 v44 = v77;
        if ((v77 & 0x2000) != 0)
        {
          sub_488EE8(a3, v96);
          __int16 v44 = v77;
        }
        if ((v44 & 0x4000) != 0 && v97)
        {
          sub_488EB4(a3);
          __int16 v44 = v77;
        }
        if ((v44 & 0x20) != 0)
        {
          sub_48779C(a3, *(void *)(v90 + 24), 1, *(_DWORD *)(v90 + 32));
          __int16 v44 = v77;
        }
        if ((v44 & 0x800) != 0)
        {
          if (v79) {
            char v45 = (uint64_t *)(v79 + 8);
          }
          else {
            char v45 = 0;
          }
          if (v78)
          {
            uint64_t v46 = 8 * v78;
            int v47 = v45;
            while (*(_DWORD *)(*v47 + 144) != v94)
            {
              ++v47;
              v46 -= 8;
              if (!v46) {
                goto LABEL_123;
              }
            }
          }
          else
          {
            int v47 = v45;
          }
          if (v47 != &v45[v78])
          {
            sub_491838((uint64_t)&v60, *v47);
            sub_4860A4(a3, (uint64_t)&v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            uint64_t v48 = (char *)v66;
            if (v66)
            {
              uint64_t v49 = (uint64_t)v67;
              char v50 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v49 = sub_489CF4(v49 - 144);
                while ((char *)v49 != v48);
                char v50 = v66;
              }
              char v67 = v48;
              operator delete(v50);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
LABEL_123:
        if (*((unsigned char *)a2 + 4))
        {
          if (v79) {
            unint64_t v51 = (uint64_t *)(v79 + 8);
          }
          else {
            unint64_t v51 = 0;
          }
          if (v78)
          {
            int v52 = *a2;
            uint64_t v53 = 8 * v78;
            for (uint64_t i = v51; *(_DWORD *)(*i + 144) != v52; ++i)
            {
              v53 -= 8;
              if (!v53) {
                return sub_10F6120(v76);
              }
            }
          }
          else
          {
            uint64_t i = v51;
          }
          if (i != &v51[v78])
          {
            sub_48926C(a3, i == v51);
            sub_491838((uint64_t)&v60, *i);
            sub_485264(a3, &v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            int v55 = (char *)v66;
            if (v66)
            {
              uint64_t v56 = (uint64_t)v67;
              int v57 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v56 = sub_489CF4(v56 - 144);
                while ((char *)v56 != v55);
                int v57 = v66;
              }
              char v67 = v55;
              operator delete(v57);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
        return sub_10F6120(v76);
      }
      uint64_t v32 = 170;
    }
    uint64_t v72 = v32;
    goto LABEL_67;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v60);
    sub_188FC78(&v60, (uint64_t)"Could not parse session_state from request", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v59 < 0) {
      operator delete(__p);
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(void *)(a3 + 408) = 0;
  *(void *)(a3 + 413) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_DWORD *)(a3 + 400) = 0;
  *(void *)(a3 + 472) = 0x3FF0000000000000;
  *(void *)(a3 + 480) = 0;
  *(void *)(a3 + 488) = 0;
  *(void *)(a3 + 496) = 0;
  *(unsigned char *)(a3 + 504) = 5;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
  *(void *)(a3 + 648) = 0;
  *(void *)(a3 + 656) = 0;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_OWORD *)(a3 + 584) = 0u;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_OWORD *)(a3 + 625) = 0u;
  *(void *)(a3 + 664) = -1;
  *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
  *(void *)(a3 + 676) = 0;
  *(void *)(a3 + 688) = -1;
  *(_DWORD *)(a3 + 696) = -1;
  *(unsigned char *)(a3 + 704) = 0;
  return sub_10F6120(v76);
}

void sub_DC2BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_CA0BAC(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC2C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    sub_10F6120(&a52);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_10F6120(&a52);
  _Unwind_Resume(a1);
}

void sub_DC2C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC2C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4891C8(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC2C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC2CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_DC2CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    uint64_t v5 = 0;
    return sub_DC2D64(a1, (int *)&v5, a2);
  }
  unint64_t v3 = *(void *)(a1 + 248) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v3 + 23) < 0)
  {
    if (*(void *)(v3 + 8) >= 4uLL)
    {
      unint64_t v3 = *(void *)v3;
LABEL_9:
      int v4 = *(_DWORD *)v3;
      goto LABEL_10;
    }
  }
  else if (*(unsigned __int8 *)(v3 + 23) >= 4u)
  {
    goto LABEL_9;
  }
  int v4 = 0;
LABEL_10:
  LODWORD(v5) = v4;
  BYTE4(v5) = 1;
  return sub_DC2D64(a1, (int *)&v5, a2);
}

uint64_t sub_DC2D64@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    return result;
  }
  uint64_t v5 = result;
  sub_10F5D3C((uint64_t)v76, 0, 0);
  if (sub_1880FAC(v76, *(void *)(v5 + 240) & 0xFFFFFFFFFFFFFFFELL))
  {
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 264) = 0;
    *(void *)(a3 + 280) = 0;
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 296) = v92;
    *(_OWORD *)(a3 + 424) = 0u;
    *(_OWORD *)(a3 + 440) = 0u;
    *(_OWORD *)(a3 + 456) = 0u;
    *(void *)(a3 + 408) = 0;
    *(void *)(a3 + 413) = 0;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_DWORD *)(a3 + 400) = 0;
    *(void *)(a3 + 472) = 0x3FF0000000000000;
    *(void *)(a3 + 480) = 0;
    *(void *)(a3 + 488) = 0;
    *(void *)(a3 + 496) = 0;
    *(unsigned char *)(a3 + 504) = 5;
    *(_OWORD *)(a3 + 512) = 0u;
    *(_OWORD *)(a3 + 528) = 0u;
    *(_OWORD *)(a3 + 544) = 0u;
    *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
    *(void *)(a3 + 648) = 0;
    *(void *)(a3 + 656) = 0;
    *(_OWORD *)(a3 + 568) = 0u;
    *(_OWORD *)(a3 + 584) = 0u;
    *(_OWORD *)(a3 + 600) = 0u;
    *(_OWORD *)(a3 + 616) = 0u;
    *(_OWORD *)(a3 + 625) = 0u;
    *(void *)(a3 + 664) = -1;
    *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
    *(void *)(a3 + 676) = 0;
    *(void *)(a3 + 688) = -1;
    *(_DWORD *)(a3 + 696) = -1;
    *(unsigned char *)(a3 + 704) = 0;
    if (v81) {
      uint64_t v6 = (uint64_t *)(v81 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    if (v80)
    {
      uint64_t v7 = 8 * v80;
      do
      {
        sub_486188(a3, *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    if (v83) {
      uint64_t v8 = v83 + 8;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v82)
    {
      uint64_t v9 = 8 * v82;
      double v10 = 85.0511288;
      do
      {
        double v11 = *(double *)(*(void *)v8 + 56);
        uint64_t v12 = -1;
        if (v11 <= 180.0)
        {
          double v10 = *(double *)(*(void *)v8 + 48);
          if (v10 >= -85.0511288 && v10 <= 85.0511288 && v11 >= -180.0)
          {
            double v13 = fmax(v10, -85.0511288);
            if (v13 >= 85.0511288) {
              double v14 = 1.48442223;
            }
            else {
              double v14 = v13 * 3.14159265 / 180.0;
            }
            long double v15 = sin(v14);
            LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
            if (v16 >= 0xFFFFFFFE) {
              uint64_t v16 = 4294967294;
            }
            else {
              uint64_t v16 = v16;
            }
            double v10 = (v11 + 180.0) / 360.0 * 4294967300.0;
            uint64_t v12 = v10 | (unint64_t)(v16 << 32);
          }
        }
        *(void *)&long long v60 = v12;
        DWORD2(v60) = 0x7FFFFFFF;
        sub_4863C8(a3, (uint64_t *)&v60, v10);
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    if (v85) {
      int v17 = (uint64_t *)(v85 + 8);
    }
    else {
      int v17 = 0;
    }
    if (v84)
    {
      uint64_t v18 = 8 * v84;
      do
      {
        sub_4865FC(a3, *v17++);
        v18 -= 8;
      }
      while (v18);
    }
    sub_487720(a3, (const std::string *)(v86 & 0xFFFFFFFFFFFFFFFELL));
    sub_487748(a3, (const std::string *)(v88 & 0xFFFFFFFFFFFFFFFELL));
    sub_486A54(a3, v93 != 0);
    if ((v77 & 0x40) != 0)
    {
      if ((~*(_DWORD *)(v91 + 16) & 3) != 0)
      {
        long long v60 = 0uLL;
        long long v61 = 0;
      }
      else
      {
        sub_51C4C((uint64_t)&v60, *(void *)(v91 + 24), *(void *)(v91 + 32));
      }
      sub_487728(a3, (uint64_t)&v60);
    }
    else
    {
      sub_51CCC((const char *)(v87 & 0xFFFFFFFFFFFFFFFELL), &v60);
      sub_487728(a3, (uint64_t)&v60);
    }
    if ((v77 & 0x10) != 0)
    {
      double v19 = *(double *)(v89 + 56);
      uint64_t v20 = -1;
      if (v19 <= 180.0)
      {
        double v21 = *(double *)(v89 + 48);
        if (v21 >= -85.0511288 && v21 <= 85.0511288 && v19 >= -180.0)
        {
          double v22 = fmax(v21, -85.0511288);
          double v23 = v22 * 3.14159265 / 180.0;
          BOOL v24 = v22 < 85.0511288;
          double v25 = 1.48442223;
          if (v24) {
            double v25 = v23;
          }
          long double v26 = sin(v25);
          LODWORD(v27) = ((log((v26 + 1.0) / (1.0 - v26)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v27 >= 0xFFFFFFFE) {
            uint64_t v27 = 4294967294;
          }
          else {
            uint64_t v27 = v27;
          }
          uint64_t v20 = ((v19 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v27 << 32);
        }
      }
      *(void *)&long long v60 = v20;
      DWORD2(v60) = 0x7FFFFFFF;
      sub_487758(a3, (uint64_t *)&v60);
    }
    sub_48777C(a3, v95);
    sub_DC5E74((uint64_t)v76, (unint64_t *)&v60);
    sub_486A6C(a3, (uint64_t)&v60);
    if (v74)
    {
      char v75 = v74;
      operator delete(v74);
    }
    int v28 = v70;
    int v29 = v71;
    uint64_t v73 = 0;
    unint64_t v30 = (char *)v71 - (char *)v70;
    if ((unint64_t)((char *)v71 - (char *)v70) >= 0x11)
    {
      do
      {
        operator delete(*v28);
        int v29 = v71;
        int v28 = v70 + 1;
        int v70 = v28;
        unint64_t v30 = (char *)v71 - (char *)v28;
      }
      while ((unint64_t)((char *)v71 - (char *)v28) > 0x10);
    }
    unint64_t v31 = v30 >> 3;
    if (v31 == 1)
    {
      uint64_t v32 = 85;
    }
    else
    {
      if (v31 != 2)
      {
LABEL_67:
        if (v28 != v29)
        {
          do
          {
            int v33 = *v28++;
            operator delete(v33);
          }
          while (v28 != v29);
          if (v71 != v70) {
            char v71 = (void **)((char *)v71 + (((char *)v70 - (char *)v71 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v69) {
          operator delete(v69);
        }
        int v34 = (char *)v66;
        if (v66)
        {
          int v35 = v67;
          uint64_t v36 = v66;
          if (v67 != v66)
          {
            do
            {
              unsigned int v37 = (void *)*((void *)v35 - 6);
              if (v37)
              {
                *((void *)v35 - 5) = v37;
                operator delete(v37);
              }
              if (*(v35 - 57) < 0) {
                operator delete(*((void **)v35 - 10));
              }
              v35 -= 80;
            }
            while (v35 != v34);
            uint64_t v36 = v66;
          }
          char v67 = v34;
          operator delete(v36);
        }
        uint64_t v38 = (void **)v62;
        int v39 = v63;
        uint64_t v65 = 0;
        unint64_t v40 = (char *)v63 - (unsigned char *)v62;
        if ((unint64_t)((char *)v63 - (unsigned char *)v62) >= 0x11)
        {
          do
          {
            operator delete(*v38);
            int v39 = v63;
            uint64_t v38 = (void **)((char *)v62 + 8);
            long long v62 = v38;
            unint64_t v40 = (char *)v63 - (char *)v38;
          }
          while ((unint64_t)((char *)v63 - (char *)v38) > 0x10);
        }
        unint64_t v41 = v40 >> 3;
        if (v41 == 1)
        {
          uint64_t v42 = 64;
        }
        else
        {
          if (v41 != 2) {
            goto LABEL_90;
          }
          uint64_t v42 = 128;
        }
        uint64_t v64 = v42;
LABEL_90:
        if (v38 != v39)
        {
          do
          {
            char v43 = *v38++;
            operator delete(v43);
          }
          while (v38 != v39);
          if (v63 != v62) {
            int v63 = (void **)((char *)v63 + (((unsigned char *)v62 - (unsigned char *)v63 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (v61) {
          operator delete(v61);
        }
        __int16 v44 = v77;
        if ((v77 & 0x2000) != 0)
        {
          sub_488EE8(a3, v96);
          __int16 v44 = v77;
        }
        if ((v44 & 0x4000) != 0 && v97)
        {
          sub_488EB4(a3);
          __int16 v44 = v77;
        }
        if ((v44 & 0x20) != 0)
        {
          sub_48779C(a3, *(void *)(v90 + 24), 1, *(_DWORD *)(v90 + 32));
          __int16 v44 = v77;
        }
        if ((v44 & 0x800) != 0)
        {
          if (v79) {
            char v45 = (uint64_t *)(v79 + 8);
          }
          else {
            char v45 = 0;
          }
          if (v78)
          {
            uint64_t v46 = 8 * v78;
            int v47 = v45;
            while (*(_DWORD *)(*v47 + 144) != v94)
            {
              ++v47;
              v46 -= 8;
              if (!v46) {
                goto LABEL_123;
              }
            }
          }
          else
          {
            int v47 = v45;
          }
          if (v47 != &v45[v78])
          {
            sub_491838((uint64_t)&v60, *v47);
            sub_4860A4(a3, (uint64_t)&v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            uint64_t v48 = (char *)v66;
            if (v66)
            {
              uint64_t v49 = (uint64_t)v67;
              char v50 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v49 = sub_489CF4(v49 - 144);
                while ((char *)v49 != v48);
                char v50 = v66;
              }
              char v67 = v48;
              operator delete(v50);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
LABEL_123:
        if (*((unsigned char *)a2 + 4))
        {
          if (v79) {
            unint64_t v51 = (uint64_t *)(v79 + 8);
          }
          else {
            unint64_t v51 = 0;
          }
          if (v78)
          {
            int v52 = *a2;
            uint64_t v53 = 8 * v78;
            for (uint64_t i = v51; *(_DWORD *)(*i + 144) != v52; ++i)
            {
              v53 -= 8;
              if (!v53) {
                return sub_10F6120(v76);
              }
            }
          }
          else
          {
            uint64_t i = v51;
          }
          if (i != &v51[v78])
          {
            sub_48926C(a3, i == v51);
            sub_491838((uint64_t)&v60, *i);
            sub_485264(a3, &v60);
            if (v69)
            {
              int v70 = (void **)v69;
              operator delete(v69);
            }
            int v55 = (char *)v66;
            if (v66)
            {
              uint64_t v56 = (uint64_t)v67;
              int v57 = v66;
              if (v67 != v66)
              {
                do
                  uint64_t v56 = sub_489CF4(v56 - 144);
                while ((char *)v56 != v55);
                int v57 = v66;
              }
              char v67 = v55;
              operator delete(v57);
            }
            if (v62)
            {
              int v63 = (void **)v62;
              operator delete(v62);
            }
          }
        }
        return sub_10F6120(v76);
      }
      uint64_t v32 = 170;
    }
    uint64_t v72 = v32;
    goto LABEL_67;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v60);
    sub_188FC78(&v60, (uint64_t)"Could not parse session_state from request", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v59 < 0) {
      operator delete(__p);
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(void *)(a3 + 408) = 0;
  *(void *)(a3 + 413) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_DWORD *)(a3 + 400) = 0;
  *(void *)(a3 + 472) = 0x3FF0000000000000;
  *(void *)(a3 + 480) = 0;
  *(void *)(a3 + 488) = 0;
  *(void *)(a3 + 496) = 0;
  *(unsigned char *)(a3 + 504) = 5;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_DWORD *)(a3 + 560) = 0x7FFFFFFF;
  *(void *)(a3 + 648) = 0;
  *(void *)(a3 + 656) = 0;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_OWORD *)(a3 + 584) = 0u;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_OWORD *)(a3 + 625) = 0u;
  *(void *)(a3 + 664) = -1;
  *(_DWORD *)(a3 + 672) = 0x7FFFFFFF;
  *(void *)(a3 + 676) = 0;
  *(void *)(a3 + 688) = -1;
  *(_DWORD *)(a3 + 696) = -1;
  *(unsigned char *)(a3 + 704) = 0;
  return sub_10F6120(v76);
}

void sub_DC3828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_CA0BAC(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC3864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a19);
    sub_10F6120(&a52);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_10F6120(&a52);
  _Unwind_Resume(a1);
}

void sub_DC38B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC38C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4891C8(&a16);
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

void sub_DC38F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_DC3914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_4BCC2C(v49);
  sub_10F6120(&a49);
  _Unwind_Resume(a1);
}

double sub_DC3930@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  double result = NAN;
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = -1935635296;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 100;
  return result;
}

char *sub_DC3998@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((int *)result + 14);
  if (v3)
  {
    uint64_t v4 = *((void *)result + 8);
    BOOL v24 = 0;
    long long v23 = 0uLL;
    if ((v3 & 0x80000000) != 0) {
      sub_2E00();
    }
    uint64_t v5 = (char *)operator new(12 * v3);
    *(void *)&long long v23 = v5;
    *((void *)&v23 + 1) = v5;
    BOOL v24 = &v5[12 * (int)v3];
    if (v4) {
      uint64_t v6 = v4 + 8;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *(uint64_t (****)())(*(void *)v6 + 80);
      if (!v8) {
        uint64_t v8 = &off_253F2E8;
      }
      uint64_t v9 = (uint64_t (***)())v8[6];
      if (v9) {
        double v10 = v9;
      }
      else {
        double v10 = &off_253F1A0;
      }
      double v11 = *((double *)v10 + 7);
      uint64_t v12 = -1;
      if (v11 <= 180.0)
      {
        double v13 = *((double *)v10 + 6);
        if (v13 >= -85.0511288 && v13 <= 85.0511288 && v11 >= -180.0)
        {
          double v14 = fmax(v13, -85.0511288);
          if (v14 >= 85.0511288) {
            double v15 = 1.48442223;
          }
          else {
            double v15 = v14 * 3.14159265 / 180.0;
          }
          long double v16 = sin(v15);
          LODWORD(v17) = ((log((v16 + 1.0) / (1.0 - v16)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v17 >= 0xFFFFFFFE) {
            uint64_t v17 = 4294967294;
          }
          else {
            uint64_t v17 = v17;
          }
          uint64_t v12 = ((v11 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v17 << 32);
        }
      }
      uint64_t v25 = v12;
      int v26 = 0x7FFFFFFF;
      double result = sub_32ACC((char **)&v23, (uint64_t)v5, (uint64_t)&v25);
      uint64_t v5 = result + 12;
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    uint64_t v18 = v24;
    *(_OWORD *)a2 = v23;
    a2[2] = v18;
  }
  else
  {
    int v19 = *((_DWORD *)result + 26);
    if (v19)
    {
      uint64_t v20 = *((void *)result + 14);
    }
    else
    {
      int v19 = *((_DWORD *)result + 38);
      if (!v19) {
        return result;
      }
      uint64_t v20 = *((void *)result + 20);
    }
    double result = sub_DC3C30((char *)&v23, v19, v20);
    double v21 = v24;
    *(_OWORD *)a2 = v23;
    a2[2] = v21;
  }
  return result;
}

void sub_DC3C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_DC3C30(char *result, int a2, uint64_t a3)
{
  *(void *)double result = 0;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  if (a2)
  {
    uint64_t v3 = result;
    if (a2 < 0) {
      sub_2E00();
    }
    uint64_t v5 = a2;
    uint64_t v6 = (char *)operator new(12 * a2);
    *(void *)uint64_t v3 = v6;
    *((void *)v3 + 1) = v6;
    *((void *)v3 + 2) = &v6[12 * (int)v5];
    if (a3) {
      uint64_t v7 = a3 + 8;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = 8 * v5;
    while (1)
    {
      uint64_t v9 = *(void **)v7;
      int v10 = *(_DWORD *)(*(void *)v7 + 80);
      if (v10 == 4) {
        break;
      }
      if (v10 == 3)
      {
        long double v16 = (uint64_t (***)())v9[4];
        BOOL v17 = v16 == 0;
        uint64_t v18 = &off_2539A50;
        goto LABEL_21;
      }
      if (v10 != 2)
      {
        unint64_t v26 = 0xFFFFFFFF00000000;
        LODWORD(v15) = -1;
        goto LABEL_39;
      }
      double v11 = (uint64_t (***)())v9[3];
      if (!v11) {
        double v11 = &off_25399D8;
      }
      uint64_t v12 = (uint64_t (***)())v11[10];
      if (v12) {
        double v13 = v12;
      }
      else {
        double v13 = &off_253F1A0;
      }
      double v14 = *((double *)v13 + 7);
      uint64_t v15 = -1;
      if (v14 <= 180.0) {
        goto LABEL_27;
      }
LABEL_37:
      unint64_t v26 = v15 & 0xFFFFFFFF00000000;
LABEL_39:
      unint64_t v27 = v15 | v26;
      int v28 = 0x7FFFFFFF;
      double result = sub_32ACC((char **)v3, (uint64_t)v6, (uint64_t)&v27);
      uint64_t v6 = result + 12;
      v7 += 8;
      v8 -= 8;
      if (!v8) {
        return result;
      }
    }
    int v19 = (uint64_t (***)())v9[5];
    if (!v19) {
      int v19 = &off_2539A90;
    }
    long double v16 = (uint64_t (***)())v19[6];
    BOOL v17 = v16 == 0;
    uint64_t v18 = &off_253F2E8;
LABEL_21:
    if (v17) {
      long double v16 = v18;
    }
    uint64_t v20 = (uint64_t (***)())v16[6];
    if (v20) {
      double v13 = v20;
    }
    else {
      double v13 = &off_253F1A0;
    }
    double v14 = *((double *)v13 + 7);
    uint64_t v15 = -1;
    if (v14 > 180.0) {
      goto LABEL_37;
    }
LABEL_27:
    double v21 = *((double *)v13 + 6);
    if (v21 >= -85.0511288 && v21 <= 85.0511288 && v14 >= -180.0)
    {
      double v22 = fmax(v21, -85.0511288);
      if (v22 >= 85.0511288) {
        double v23 = 1.48442223;
      }
      else {
        double v23 = v22 * 3.14159265 / 180.0;
      }
      long double v24 = sin(v23);
      LODWORD(v25) = ((log((v24 + 1.0) / (1.0 - v24)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v25 >= 0xFFFFFFFE) {
        uint64_t v25 = 4294967294;
      }
      else {
        uint64_t v25 = v25;
      }
      uint64_t v15 = ((v14 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v25 << 32);
    }
    goto LABEL_37;
  }
  return result;
}

void sub_DC3EE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_DC3F00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(int *)(a1 + 128);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  sub_DC8DE8(&__p, v5, &v5[v6], v6);
  if (*(void *)(a1 + 272)) {
    uint64_t v7 = *(uint64_t (****)())(a1 + 272);
  }
  else {
    uint64_t v7 = &off_2535C20;
  }
  unint64_t v12 = sub_DBB218((uint64_t)v7);
  int v13 = v8;
  sub_DC3FD0((uint64_t)&__p, &v12, a2);
  uint64_t v9 = __p;
  if (__p)
  {
    uint64_t v10 = (uint64_t)v15;
    double v11 = __p;
    if (v15 != __p)
    {
      do
        uint64_t v10 = sub_15B3DFC(v10 - 136);
      while ((void *)v10 != v9);
      double v11 = __p;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
}

void sub_DC3FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_DC4490((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DC3FD0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result != v4)
  {
    do
    {
      if ((*(unsigned char *)(v3 + 40) & 4) != 0)
      {
        double v8 = *(double *)(v3 + 64) + 978307200.0;
        v31[0] = (int)v8;
        int v7 = 0x7FFFFFFF;
        if ((int)v8 != 0x7FFFFFFF)
        {
          int v7 = (int)v8;
          if (*a2 < (int)v8)
          {
            double result = sub_723EC(1u);
            if (result)
            {
              sub_6BAC((uint64_t)&v27);
              sub_188FC78(&v27, (uint64_t)"Got a historical point that is in the future relative to the request time, dropping it.", 87);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              if (v26 < 0) {
                operator delete(__p);
              }
              uint64_t v27 = v24;
              *(uint64_t *)((char *)&v27 + *(void *)(v24 - 24)) = v23;
              if (v30 < 0) {
                operator delete(v29);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              double result = std::ios::~ios();
            }
            goto LABEL_4;
          }
        }
      }
      else
      {
        int v7 = 0x7FFFFFFF;
        v31[0] = 0x7FFFFFFF;
      }
      if (*(void *)(v3 + 48)) {
        uint64_t v9 = *(uint64_t (****)())(v3 + 48);
      }
      else {
        uint64_t v9 = &off_253F1A0;
      }
      double v10 = *((double *)v9 + 7);
      uint64_t v11 = -1;
      if (v10 <= 180.0)
      {
        double v12 = *((double *)v9 + 6);
        if (v12 >= -85.0511288 && v12 <= 85.0511288 && v10 >= -180.0)
        {
          double v13 = fmax(v12, -85.0511288);
          double v14 = v13 * 3.14159265 / 180.0;
          BOOL v15 = v13 < 85.0511288;
          double v16 = 1.48442223;
          if (v15) {
            double v16 = v14;
          }
          long double v17 = sin(v16);
          LODWORD(v18) = ((log((v17 + 1.0) / (1.0 - v17)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v18 >= 0xFFFFFFFE) {
            uint64_t v18 = 4294967294;
          }
          else {
            uint64_t v18 = v18;
          }
          uint64_t v11 = ((v10 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v18 << 32);
        }
      }
      uint64_t v27 = v11;
      LODWORD(v28) = 0x7FFFFFFF;
      unint64_t v19 = *(void *)(a3 + 8);
      if (v19 >= *(void *)(a3 + 16))
      {
        double result = (uint64_t)sub_DC8F74((void **)a3, &v27, v31);
      }
      else
      {
        sub_DAA084(*(void *)(a3 + 8), &v27);
        *(_DWORD *)(v19 + 104) = v7;
        double result = v19 + 112;
        *(void *)(a3 + 8) = v19 + 112;
      }
      *(void *)(a3 + 8) = result;
      double v20 = *(double *)(v3 + 88);
      if (v20 > 70.0) {
        double v20 = 70.0;
      }
      *(double *)(result - 56) = v20;
      *(void *)(result - 72) = *(void *)(v3 + 72);
      if ((*(unsigned char *)(v3 + 41) & 2) != 0)
      {
        double v21 = *(double *)(v3 + 112);
        if (v21 >= 0.0)
        {
          unsigned int v22 = (int)llround(v21 * 100.0) % 36000;
          if (v22 > 0xFFFF735F) {
            LOWORD(v22) = v22 - 29536;
          }
          *(_WORD *)(result - 62) = v22;
        }
      }
LABEL_4:
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_DC43F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a23);
    sub_C6CBE0(v23);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a23);
  sub_C6CBE0(v23);
  _Unwind_Resume(a1);
}

void sub_DC443C(_Unwind_Exception *a1)
{
  sub_C6CBE0(v1);
  _Unwind_Resume(a1);
}

void sub_DC4450(_Unwind_Exception *a1)
{
  sub_C6CBE0(v1);
  _Unwind_Resume(a1);
}

void sub_DC4464(_Unwind_Exception *a1)
{
  sub_C6CBE0(v1);
  _Unwind_Resume(a1);
}

void sub_DC4478(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_C6CBE0((void **)v1);
  _Unwind_Resume(a1);
}

void **sub_DC4490(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_15B3DFC(v3 - 136);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_DC44EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 136);
  if (v4) {
    uint64_t v5 = (void *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(int *)(a1 + 128);
  long double v17 = 0;
  uint64_t v18 = 0;
  std::string __p = 0;
  sub_DC8DE8(&__p, v5, &v5[v6], v6);
  int v7 = *(uint64_t (****)())(a1 + 304);
  if (!v7) {
    int v7 = &off_2535C50;
  }
  double v8 = (uint64_t (***)())v7[10];
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = &off_2535C20;
  }
  unint64_t v14 = sub_DBB218((uint64_t)v9);
  int v15 = v10;
  sub_DC3FD0((uint64_t)&__p, &v14, a2);
  uint64_t v11 = __p;
  if (__p)
  {
    uint64_t v12 = (uint64_t)v17;
    double v13 = __p;
    if (v17 != __p)
    {
      do
        uint64_t v12 = sub_15B3DFC(v12 - 136);
      while ((void *)v12 != v11);
      double v13 = __p;
    }
    long double v17 = v11;
    operator delete(v13);
  }
}

void sub_DC45BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_DC4490((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DC45D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAD8, qword_254EAE0);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    uint64_t v4 = *(void *)(result + 40);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_11BCA08(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC4640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAC8, qword_254EAD0);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    uint64_t v4 = *(void *)(result + 40);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_11BCA08(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC46B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAB8, qword_254EAC0);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    uint64_t v4 = *(void *)(result + 40);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_11BCA08(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC4720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAE8, qword_254EAF0);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    uint64_t v4 = *(void *)(result + 40);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_11BCA08(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_DC4790@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_DC47A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAD8, qword_254EAE0);
  if ((*(unsigned char *)(result + 16) & 8) != 0)
  {
    uint64_t v4 = *(void *)(result + 48);
    *(unsigned char *)(a2 + 48) = 1;
    return sub_11BCA0C(a2, v4);
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_DC4814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAC8, qword_254EAD0);
  if ((*(unsigned char *)(result + 16) & 8) != 0)
  {
    uint64_t v4 = *(void *)(result + 48);
    *(unsigned char *)(a2 + 48) = 1;
    return sub_11BCA0C(a2, v4);
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_DC4888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAB8, qword_254EAC0);
  if ((*(unsigned char *)(result + 16) & 8) != 0)
  {
    uint64_t v4 = *(void *)(result + 48);
    *(unsigned char *)(a2 + 48) = 1;
    return sub_11BCA0C(a2, v4);
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_DC48FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAE8, qword_254EAF0);
  if ((*(unsigned char *)(result + 16) & 8) != 0)
  {
    uint64_t v4 = *(void *)(result + 48);
    *(unsigned char *)(a2 + 48) = 1;
    return sub_11BCA0C(a2, v4);
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

double sub_DC4970@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_DC4984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAD8, qword_254EAE0);
  if ((*(unsigned char *)(result + 16) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(result + 56);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_122FD5C(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC49F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAC8, qword_254EAD0);
  if ((*(unsigned char *)(result + 16) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(result + 56);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_122FD5C(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC4A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAB8, qword_254EAC0);
  if ((*(unsigned char *)(result + 16) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(result + 56);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_122FD5C(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_DC4AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1883F34(a1 + 16, dword_254EAE8, qword_254EAF0);
  if ((*(unsigned char *)(result + 16) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(result + 56);
    *(unsigned char *)(a2 + 56) = 1;
    return sub_122FD5C(a2, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void sub_DC4B44(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(int *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = *(int **)(a1 + 56);
    double v8 = &v7[v3];
    do
    {
      while (1)
      {
        int v9 = *v7;
        if (v6 >= v5) {
          break;
        }
        *v6++ = v9;
        a2[1] = v6;
        if (++v7 == v8) {
          return;
        }
      }
      unint64_t v10 = v6 - v4;
      uint64_t v11 = v6 - v4 + 1;
      if (v11 < 0) {
        sub_2E00();
      }
      if (2 * (v5 - v4) > (unint64_t)v11) {
        uint64_t v11 = 2 * (v5 - v4);
      }
      if ((unint64_t)(v5 - v4) >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v11;
      }
      if (v12)
      {
        double v13 = (char *)operator new(v12);
        unint64_t v14 = &v13[v10];
        v13[v10] = v9;
        uint64_t v15 = (uint64_t)&v13[v10 + 1];
        if (v6 != v4) {
          goto LABEL_13;
        }
      }
      else
      {
        double v13 = 0;
        unint64_t v14 = (char *)(v6 - v4);
        *(unsigned char *)unint64_t v10 = v9;
        uint64_t v15 = v10 + 1;
        if (v6 != v4)
        {
LABEL_13:
          if (v10 < 8 || v13 > &v13[v6 - v4 - 1] || v4 > v6 - 1 || (unint64_t)(v4 - v13) < 0x20)
          {
            double v16 = v6;
          }
          else if (v10 >= 0x20)
          {
            unint64_t v19 = v10 & 0xFFFFFFFFFFFFFFE0;
            double v20 = &v13[v10 - 16];
            double v21 = (long long *)(v6 - 16);
            unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v23 = *v21;
              *((_OWORD *)v20 - 1) = *(v21 - 1);
              *(_OWORD *)double v20 = v23;
              v20 -= 32;
              v21 -= 2;
              v22 -= 32;
            }
            while (v22);
            if (v10 == v19) {
              goto LABEL_17;
            }
            if ((v10 & 0x18) != 0) {
              goto LABEL_33;
            }
            v14 -= v19;
            double v16 = &v6[-v19];
          }
          else
          {
            unint64_t v19 = 0;
LABEL_33:
            double v16 = &v6[-(v10 & 0xFFFFFFFFFFFFFFF8)];
            v14 -= v10 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v24 = &v13[&v6[-v19] - v4 - 8];
            uint64_t v25 = (uint64_t *)&v6[-v19 - 8];
            unint64_t v26 = v19 - (v10 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v27 = *v25--;
              *(void *)uint64_t v24 = v27;
              v24 -= 8;
              v26 += 8;
            }
            while (v26);
            if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_17:
              unint64_t v14 = v13;
              uint64_t v5 = &v13[v12];
              *a2 = v13;
              a2[1] = (char *)v15;
              a2[2] = v5;
              if (!v4) {
                goto LABEL_22;
              }
LABEL_21:
              operator delete(v4);
              goto LABEL_22;
            }
          }
          long double v17 = v14 - 1;
          do
          {
            char v18 = *--v16;
            *v17-- = v18;
          }
          while (v16 != v4);
          goto LABEL_17;
        }
      }
      uint64_t v5 = &v13[v12];
      *a2 = v14;
      a2[1] = (char *)v15;
      a2[2] = v5;
      if (v4) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v4 = v14;
      a2[1] = (char *)v15;
      ++v7;
      unint64_t v6 = (char *)v15;
    }
    while (v7 != v8);
  }
}

void sub_DC4D7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_DC4D9C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 80);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v5 = *(void *)(v4 + 64);
    uint64_t v6 = v5 ? v5 + 8 : 0;
    uint64_t v7 = *(int *)(v4 + 56);
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      do
      {
        while (1)
        {
          uint64_t v10 = *(void *)v6;
          int v11 = *(_DWORD *)(*(void *)v6 + 72);
          int v12 = *(_DWORD *)(*(void *)v6 + 76);
          int v15 = v12;
          int v16 = v11;
          int v13 = *(_DWORD *)(v10 + 88);
          int v14 = v13;
          if (v8 < a2[2]) {
            break;
          }
          unint64_t v8 = sub_DC9204(a2, &v16, &v15, &v14);
          a2[1] = v8;
          v6 += 8;
          v9 -= 8;
          if (!v9) {
            return;
          }
        }
        *(_OWORD *)&v19[4] = 0u;
        uint64_t v23 = 0;
        uint64_t v17 = 0x7FFFFFFFLL;
        int v18 = 0x7FFFFFFF;
        *(void *)unint64_t v19 = 0x7FFFFFFF7FFFFFFFLL;
        unint64_t v20 = 0x8000000080000000;
        memset(v22, 0, 36);
        *(_OWORD *)double v21 = 0u;
        *(void *)&v22[9] = 0x8000000080000000;
        v22[11] = 0x7FFFFFFF;
        uint64_t v24 = 0xFFFFFFFFLL;
        long long v25 = xmmword_20E8160;
        *(_DWORD *)unint64_t v8 = v11;
        *(_DWORD *)(v8 + 4) = 10 * v12;
        *(_DWORD *)(v8 + 8) = v13;
        *(void *)(v8 + 16) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v8 + 24) = 0x7FFFFFFF;
        *(void *)(v8 + 28) = 0x7FFFFFFF7FFFFFFFLL;
        sub_3B1DC8(v8 + 40, (long long *)&v17);
        if (*(void *)&v22[2])
        {
          *(void *)&v22[4] = *(void *)&v22[2];
          operator delete(*(void **)&v22[2]);
        }
        if (v21[0])
        {
          v21[1] = v21[0];
          operator delete(v21[0]);
        }
        v8 += 176;
        a2[1] = v8;
        a2[1] = v8;
        v6 += 8;
        v9 -= 8;
      }
      while (v9);
    }
  }
}

void sub_DC4F74(_Unwind_Exception *a1)
{
  sub_DC4FA8(v1);
  _Unwind_Resume(a1);
}

void sub_DC4F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_45E914((uint64_t *)va);
  *(void *)(v5 + 8) = v6;
  sub_DC4FA8((void **)v5);
  _Unwind_Resume(a1);
}

void **sub_DC4FA8(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 9);
        if (v5)
        {
          *((void *)v3 - 8) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 12);
        if (v6)
        {
          *((void *)v3 - 11) = v6;
          operator delete(v6);
        }
        v3 -= 176;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_DC502C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) != 1)
  {
    int v14 = &off_2536C78;
    if (*(void *)(a1 + 336)) {
      int v14 = *(uint64_t (****)())(a1 + 336);
    }
    int v15 = v14[5];
    if (v15) {
      int v16 = v15 + 1;
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = *((int *)v14 + 8);
    if (!v17) {
      return 0;
    }
    uint64_t result = 0;
    int v18 = &v16[v17];
    while (1)
    {
      uint64_t v19 = *((int *)*v16 + 14);
      uint64_t v20 = *((void *)*v16 + 8);
      double v21 = (uint64_t *)(v20 + 8);
      if (!v20) {
        double v21 = 0;
      }
      if (!v19) {
        goto LABEL_17;
      }
      uint64_t v22 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v22)
      {
        int v23 = 0;
        uint64_t v24 = v22 + 1;
        uint64_t v25 = (v22 + 1) & 0x3FFFFFFFFFFFFFFELL;
        unint64_t v26 = &v21[v25];
        uint64_t v27 = v21 + 1;
        uint64_t v28 = v25;
        do
        {
          LODWORD(result) = result + 10 * *(_DWORD *)(*(v27 - 1) + 76);
          v23 += 10 * *(_DWORD *)(*v27 + 76);
          v27 += 2;
          v28 -= 2;
        }
        while (v28);
        uint64_t result = (v23 + result);
        if (v24 == v25) {
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v26 = v21;
      }
      int v29 = &v21[v19];
      do
      {
        uint64_t v30 = *v26++;
        uint64_t result = (result + 10 * *(_DWORD *)(v30 + 76));
      }
      while (v26 != v29);
LABEL_17:
      if (++v16 == v18) {
        return result;
      }
    }
  }
  uint64_t v1 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v2 = *(int *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = (uint64_t *)(v3 + 8);
  if (!v3) {
    uint64_t v4 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v5 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v5)
  {
    LODWORD(result) = 0;
    uint64_t v10 = v4;
LABEL_32:
    unint64_t v31 = &v4[v2];
    do
    {
      uint64_t v32 = *v10++;
      uint64_t result = (result + 10 * *(_DWORD *)(v32 + 76));
    }
    while (v10 != v31);
    return result;
  }
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = v5 + 1;
  uint64_t v9 = (v5 + 1) & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v10 = &v4[v9];
  int v11 = v4 + 1;
  uint64_t v12 = v9;
  do
  {
    v6 += 10 * *(_DWORD *)(*(v11 - 1) + 76);
    v7 += 10 * *(_DWORD *)(*v11 + 76);
    v11 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t result = (v7 + v6);
  if (v8 != v9) {
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_DC51BC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 336);
  if (!v1) {
    uint64_t v1 = &off_2536C78;
  }
  if (!*((_DWORD *)v1 + 8)) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v2 = v1[5][1];
  int v3 = *((_DWORD *)v2 + 14);
  if (!v3) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v4 = *(uint64_t (****)())(*(void *)(*((void *)v2 + 8) + 8 * (v3 - 1) + 8) + 64);
  if (!v4) {
    uint64_t v4 = &off_2535208;
  }
  if (((_BYTE)v4[2] & 2) != 0) {
    return (1000 * *((_DWORD *)v4 + 7));
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_DC522C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 41) & 0x10) != 0 && (v3 = result, uint64_t result = sub_DBB760(result), (result))
  {
    if (*(void *)(v3 + 288)) {
      uint64_t v4 = *(uint64_t (****)())(v3 + 288);
    }
    else {
      uint64_t v4 = &off_2535C50;
    }
    if (v4[10]) {
      uint64_t v5 = (uint64_t (***)())v4[10];
    }
    else {
      uint64_t v5 = &off_2535C20;
    }
    unint64_t v6 = sub_DBB218((uint64_t)v5);
    if (sub_DBB760(v3))
    {
      if (v4[11]) {
        int v7 = (uint64_t (***)())v4[11];
      }
      else {
        int v7 = &off_2536408;
      }
      sub_DBB3F0(SHIDWORD(v6), (uint64_t)v7, (uint64_t)&v18);
    }
    else
    {
      int v20 = 0;
      long long v26 = 0u;
      int v18 = 0x7FFFFFFF;
      uint64_t v19 = 0x7FFFFFFF7FFFFFFFLL;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 0;
      LODWORD(v26) = 1065353216;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v29 = 1065353216;
      long long v30 = xmmword_20E8670;
    }
    if (*(void *)(v3 + 336)) {
      uint64_t v8 = *(uint64_t (****)())(v3 + 336);
    }
    else {
      uint64_t v8 = &off_2536C78;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_DC9B68((char **)a2, *((int *)v8 + 8));
    uint64_t v9 = *((int *)v8 + 8);
    uint64_t v10 = v8[5];
    if (v10) {
      int v11 = v10 + 1;
    }
    else {
      int v11 = 0;
    }
    if (v9)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = 8 * v9;
      do
      {
        int v14 = *v11;
        if ((*((unsigned char *)*v11 + 40) & 8) != 0)
        {
          int v15 = (int *)nullsub_1(&v18);
          if (*((void *)v14 + 60)) {
            int v16 = (uint64_t (***)())*((void *)v14 + 60);
          }
          else {
            int v16 = &off_25352D0;
          }
          sub_DC5598(v15, (uint64_t)v16, (uint64_t)&v31);
        }
        else
        {
          uint64_t v31 = 0x7FFFFFFFLL;
          *(_OWORD *)&v33[4] = 0u;
          int v32 = 0x7FFFFFFF;
          *(void *)int v33 = 0x7FFFFFFF7FFFFFFFLL;
          unint64_t v34 = 0x8000000080000000;
          *(_OWORD *)int v35 = 0u;
          memset(v36, 0, 56);
          *(void **)((char *)&v36[4] + 4) = (void *)0x8000000080000000;
          HIDWORD(v36[5]) = 0x7FFFFFFF;
          v36[7] = (void *)0xFFFFFFFFLL;
          long long v37 = xmmword_20E8160;
        }
        uint64_t v17 = sub_DC9D90((uint64_t *)a2, v12, (uint64_t)&v31);
        if (v36[1])
        {
          v36[2] = v36[1];
          operator delete(v36[1]);
        }
        if (v35[0])
        {
          v35[1] = v35[0];
          operator delete(v35[0]);
        }
        uint64_t v12 = v17 + 136;
        ++v11;
        v13 -= 8;
      }
      while (v13);
    }
    return (uint64_t)sub_402628(&v18);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_DC54D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v42 = (char *)*v40;
  if (*v40)
  {
    char v43 = (char *)v40[1];
    __int16 v44 = *v40;
    if (v43 != v42)
    {
      do
      {
        char v45 = (void *)*((void *)v43 - 9);
        if (v45)
        {
          *((void *)v43 - 8) = v45;
          operator delete(v45);
        }
        uint64_t v46 = (void *)*((void *)v43 - 12);
        if (v46)
        {
          *((void *)v43 - 11) = v46;
          operator delete(v46);
        }
        v43 -= 136;
      }
      while (v43 != v42);
      __int16 v44 = *v40;
    }
    v40[1] = v42;
    operator delete(v44);
    sub_402628(&a11);
    _Unwind_Resume(a1);
  }
  sub_402628(&a11);
  _Unwind_Resume(a1);
}

double sub_DC5598@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(a2 + 16) & 0x10) != 0 && sub_40A45C(a1))
  {
    if (*(void *)(a2 + 56)) {
      unint64_t v6 = *(uint64_t (****)())(a2 + 56);
    }
    else {
      unint64_t v6 = &off_2535270;
    }
    int v7 = 10 * *((_DWORD *)v6 + 8);
    int v8 = 1000 * *((_DWORD *)v6 + 10);
    int v9 = sub_53FA4((uint64_t)a1);
    int v10 = sub_40A44C((uint64_t)a1);
    uint64_t v33 = sub_40A454((uint64_t)a1);
    if (v10 >= v8) {
      int v11 = v8;
    }
    else {
      int v11 = v10;
    }
    if (v9 <= v11) {
      int v12 = v11;
    }
    else {
      int v12 = v9;
    }
    sub_40A2E4((uint64_t)&v32, v12, &v33);
    sub_3FB100((uint64_t)&v30, &v32, 0);
    uint64_t v13 = nullsub_1(*(void *)(a2 + 96));
    *(_WORD *)(a3 + 89) = 0;
    *(unsigned char *)(a3 + 91) = 0;
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 8) = v30;
    *(void *)(a3 + 24) = v31;
    *(_DWORD *)(a3 + 32) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 36) = v7;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(unsigned char *)(a3 + 88) = 0;
    *(void *)&double result = 0x8000000080000000;
    *(void *)(a3 + 92) = 0x8000000080000000;
    *(_DWORD *)(a3 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 112) = 0;
    *(void *)(a3 + 104) = v13;
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 128) = 0x7FFFFFFFFFFFFFFFLL;
    int v15 = (uint64_t (***)())v6[3];
    if (v15) {
      int v16 = (uint64_t (***)())v6[3];
    }
    else {
      int v16 = &off_2535228;
    }
    uint64_t v17 = *((int *)v16 + 6);
    int v18 = v16[4];
    if (v18) {
      uint64_t v19 = v18 + 1;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v17)
    {
      int v20 = 0;
      uint64_t v21 = 8 * v17;
      do
      {
        int v22 = *((_DWORD *)*v19 + 6);
        if ((v22 - 1) >= 0xA) {
          LOBYTE(v22) = 0;
        }
        sub_87E68((uint64_t)&v34, v22, 1000 * *((_DWORD *)*v19 + 7), 0);
        int v20 = sub_8BC38((void *)(a3 + 40), v20, (uint64_t)&v34) + 12;
        ++v19;
        v21 -= 8;
      }
      while (v21);
      int v15 = (uint64_t (***)())v6[3];
    }
    if (v15) {
      uint64_t v23 = v15;
    }
    else {
      uint64_t v23 = &off_2535228;
    }
    uint64_t v24 = *((int *)v23 + 12);
    long long v25 = v23[7];
    if (v25) {
      long long v26 = v25 + 1;
    }
    else {
      long long v26 = 0;
    }
    if (v24)
    {
      long long v27 = *(char **)(a3 + 72);
      uint64_t v28 = 8 * v24;
      do
      {
        int v29 = *((_DWORD *)*v26 + 6);
        if ((v29 - 1) >= 0xA) {
          LOBYTE(v29) = 0;
        }
        sub_87E68((uint64_t)&v34, v29, 1000 * *((_DWORD *)*v26 + 7), 0);
        long long v27 = sub_8BC38((void *)(a3 + 64), v27, (uint64_t)&v34) + 12;
        ++v26;
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(void *)(a3 + 112) = 0;
    *(_DWORD *)a3 = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 8) = 0x7FFFFFFF;
    *(void *)(a3 + 12) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a3 + 32) = 0x8000000080000000;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(unsigned char *)(a3 + 88) = 0;
    *(void *)(a3 + 92) = 0x8000000080000000;
    *(_DWORD *)(a3 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a3 + 112) = -1;
    double result = 0.0;
    *(_OWORD *)(a3 + 120) = xmmword_20E8160;
  }
  return result;
}

void sub_DC5850(_Unwind_Exception *a1)
{
  sub_45E914(v1);
  _Unwind_Resume(a1);
}

void sub_DC5864(_Unwind_Exception *a1)
{
  sub_45E914(v1);
  _Unwind_Resume(a1);
}

BOOL sub_DC5878(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 304);
  if (!v1) {
    uint64_t v1 = &off_2535C50;
  }
  if (*((_DWORD *)v1 + 32)) {
    return 0;
  }
  if (sub_DB7034(a1) != 1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 42))
  {
    uint64_t v3 = *(void *)(a1 + 392);
    if (*(_DWORD *)(v3 + 32))
    {
      uint64_t v4 = *(void *)(*(void *)(v3 + 40) + 8);
      if ((*(unsigned char *)(v4 + 40) & 0x10) != 0 && (*(unsigned char *)(*(void *)(v4 + 80) + 16) & 0x10) != 0) {
        return 0;
      }
    }
  }
  uint64_t v5 = &off_2539290;
  if (*(void *)(a1 + 328)) {
    uint64_t v5 = *(uint64_t (****)())(a1 + 328);
  }
  uint64_t v6 = *((int *)v5 + 18);
  if (!v6)
  {
    LOBYTE(v7) = 0;
    uint64_t v13 = *(uint64_t (****)())(a1 + 304);
    if (!v13) {
      uint64_t v13 = &off_2535C50;
    }
    unsigned int v12 = *((_DWORD *)v13 + 32);
LABEL_21:
    switch(v12)
    {
      case 0u:
        if ((v7 & 1) == 0) {
          return 0;
        }
        return *(_DWORD *)(a1 + 104) > 2;
      case 1u:
        if ((v7 & 2) != 0) {
          return *(_DWORD *)(a1 + 104) > 2;
        }
        return 0;
      case 2u:
        if ((v7 & 4) != 0) {
          return *(_DWORD *)(a1 + 104) > 2;
        }
        return 0;
      case 3u:
        if ((v7 & 8) != 0) {
          return *(_DWORD *)(a1 + 104) > 2;
        }
        return 0;
      default:
        return *(_DWORD *)(a1 + 104) > 2;
    }
  }
  int v7 = 0;
  int v8 = (unsigned int *)v5[10];
  uint64_t v9 = 4 * v6;
  do
  {
    unsigned int v10 = *v8++;
    v7 |= 1 << sub_7BB78(v10);
    v9 -= 4;
  }
  while (v9);
  int v11 = *(uint64_t (****)())(a1 + 304);
  if (!v11) {
    int v11 = &off_2535C50;
  }
  unsigned int v12 = *((_DWORD *)v11 + 32);
  if (v12 <= 3) {
    goto LABEL_21;
  }
  return *(_DWORD *)(a1 + 104) > 2;
}

void sub_DC59E8(uint64_t a1@<X0>, char **a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 41) & 0x10) != 0 && (uint64_t v3 = *(void *)(a1 + 336), *(_DWORD *)(v3 + 32)))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v4 = *(int *)(v3 + 32);
    uint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      int v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      if ((int)v4 <= -2) {
        sub_2E00();
      }
      uint64_t v6 = (char *)operator new(v4 + 1);
      int v7 = &v6[v5];
      *a2 = v6;
      a2[1] = v6;
      a2[2] = &v6[v5];
    }
    int v8 = *(uint64_t (****)())(*(void *)(*(void *)(v3 + 40) + 8) + 480);
    if (!v8) {
      int v8 = &off_25352D0;
    }
    unsigned int v9 = *((_DWORD *)v8 + 26);
    if (v9 >= 3) {
      char v10 = 0;
    }
    else {
      char v10 = v9;
    }
    if (v6 >= v7)
    {
      unint64_t v12 = v7 - v6;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= 1) {
        uint64_t v13 = 1;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      int v15 = (char *)operator new(v14);
      *int v15 = v10;
      int v11 = v15 + 1;
      *a2 = v15;
      a2[1] = v15 + 1;
      a2[2] = &v15[v14];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = v10;
      int v11 = v6 + 1;
    }
    a2[1] = v11;
    uint64_t v16 = *(int *)(v3 + 32);
    uint64_t v17 = *(void *)(v3 + 40);
    if (v17) {
      uint64_t v18 = v17 + 8;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v16)
    {
      uint64_t v19 = 8 * v16;
      do
      {
        int v20 = *(uint64_t (****)())(*(void *)v18 + 488);
        if (!v20) {
          int v20 = &off_25352D0;
        }
        unsigned int v21 = *((_DWORD *)v20 + 26);
        if (v21 >= 3) {
          LOBYTE(v21) = 0;
        }
        char v22 = v21;
        int v11 = sub_DCA904((uint64_t)a2, v11, &v22) + 1;
        v18 += 8;
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_DC5B78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC5B9C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(result + 16) & 0x10) != 0)
  {
    uint64_t v2 = *(void *)(result + 56);
    if ((~*(_DWORD *)(v2 + 16) & 3) == 0) {
      return sub_51C4C((uint64_t)a2, *(void *)(v2 + 24), *(void *)(v2 + 32));
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_DC5BD0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(result + 16) & 0x80) != 0)
  {
    uint64_t v2 = *(void *)(result + 80);
    if ((~*(_DWORD *)(v2 + 16) & 3) == 0) {
      return sub_51C4C((uint64_t)a2, *(void *)(v2 + 24), *(void *)(v2 + 32));
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_DC5C04(unsigned int *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (*((void *)a1 + 1) < 4uLL) {
      return 0;
    }
    a1 = *(unsigned int **)a1;
  }
  else if (*((unsigned __int8 *)a1 + 23) < 4u)
  {
    return 0;
  }
  return *a1;
}

uint64_t sub_DC5C40(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 42) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 392);
  if (*(unsigned char *)(v2 + 16)) {
    return *(unsigned int *)(v2 + 48);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_DC5C6C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2536218;
  }
  unsigned int v2 = *((_DWORD *)v1 + 10);
  if (v2 >= 0xF) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_DC5C90(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 344);
  if (!v1) {
    uint64_t v1 = &off_2536218;
  }
  unsigned int v2 = *((_DWORD *)v1 + 10);
  if (v2 >= 0xF) {
    return sub_3CD500(0);
  }
  else {
    return sub_3CD500(v2);
  }
}

BOOL sub_DC5CB8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)())(a1 + 336);
  if (!v1) {
    uint64_t v1 = &off_2536C78;
  }
  return *((_DWORD *)v1 + 8) != 0;
}

uint64_t sub_DC5CDC(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 == 2)
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 40);
    uint64_t result = (v5 >> 9) & 1;
    if ((v5 & 0x200) == 0)
    {
      int v6 = *(_DWORD *)(v4 + 408);
      if ((v5 & 0x200000) == 0 || v6)
      {
        unsigned int v8 = (v5 & 0x10000 | v6) == 0;
        if ((v5 & 0x400) != 0) {
          unsigned int v8 = (v5 >> 9) & 1;
        }
        if ((v5 & 0x800) != 0) {
          return result;
        }
        else {
          return v8;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  else if (v1 == 1)
  {
    int v7 = *(uint64_t (****)())(*(void *)a1 + 288);
    if (!v7) {
      int v7 = &off_2535C50;
    }
    return *((_DWORD *)v7 + 32) == 0;
  }
  else if (v1)
  {
    return 0;
  }
  else
  {
    unsigned int v2 = *(uint64_t (****)())(*(void *)a1 + 304);
    if (!v2) {
      unsigned int v2 = &off_2535C50;
    }
    return *((_DWORD *)v2 + 32) == 0;
  }
  return result;
}

uint64_t sub_DC5D94(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 432);
  if (!v1) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  double v2 = (double)v1 * 100.0;
  if (v2 >= 0.0)
  {
    double v3 = (double)v1 * 100.0;
    if (v2 >= 4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v4 = (uint64_t)(v2 + v2) + 1;
  }
  else
  {
    double v3 = (double)v1 * 100.0;
    if (v2 <= -4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v4 = (uint64_t)(v2 + v2);
    if (v4 >= 1) {
      --v4;
    }
  }
  double v3 = (double)(v4 >> 1);
LABEL_10:
  if (v3 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v5 = (uint64_t)(v2 + v2) + 1;
      return (uint64_t)(double)(v5 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v5 = (uint64_t)(v2 + v2);
    if (v5 >= 1) {
      --v5;
    }
    return (uint64_t)(double)(v5 >> 1);
  }
  return (uint64_t)v2;
}

void sub_DC5E74(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  double v2 = a2;
  *((_OWORD *)a2 + 1) = 0u;
  uint64_t v3 = (uint64_t)(a2 + 2);
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *a2 = 0;
  *(unint64_t *)((char *)a2 + 5) = 0;
  a2[9] = 0;
  a2[8] = 0x3FF0000000000000;
  a2[10] = 0;
  a2[11] = 0;
  *((unsigned char *)a2 + 96) = 5;
  *(_OWORD *)(a2 + 13) = 0u;
  uint64_t v92 = (char **)(a2 + 9);
  uint64_t v94 = (uint64_t)(a2 + 13);
  *(_OWORD *)(a2 + 15) = 0u;
  *(_OWORD *)(a2 + 17) = 0u;
  *((_DWORD *)a2 + 38) = 0x7FFFFFFF;
  a2[20] = 0;
  uint64_t v91 = (char **)(a2 + 20);
  a2[21] = 0;
  a2[22] = 0;
  if ((*(unsigned char *)(a1 + 16) & 8) == 0) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 184);
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 104);
  if ((*(unsigned char *)(v4 + 16) & 8) == 0)
  {
    *((_DWORD *)a2 + 1) = -1;
    if ((*(unsigned char *)(v4 + 16) & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v4 + 112);
  if ((*(unsigned char *)(v4 + 16) & 4) != 0)
  {
LABEL_6:
    *((_DWORD *)a2 + 2) = *(_DWORD *)(v4 + 108);
    *((unsigned char *)a2 + 12) = 1;
  }
LABEL_7:
  uint64_t v5 = *(uint64_t (****)())(v4 + 96);
  if (v5) {
    int v6 = *(uint64_t (****)())(v4 + 96);
  }
  else {
    int v6 = &off_24F7A58;
  }
  int v7 = v6[5];
  if (v7) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *((int *)v6 + 8);
  int v95 = v2;
  uint64_t v89 = v4;
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    do
    {
      unint64_t v12 = *v8;
      int v13 = *((_DWORD *)*v8 + 11);
      sub_40A2D8(&v96, *((_DWORD *)*v8 + 8), *((_DWORD *)*v8 + 10), *((_DWORD *)*v8 + 9));
      int data = (int)v96.__r_.__value_.__l.__data_;
      uint64_t v15 = *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4);
      uint64_t v16 = (uint64_t (***)())*((void *)v12 + 3);
      if (!v16) {
        uint64_t v16 = &off_253F2E8;
      }
      uint64_t v17 = (uint64_t (***)())v16[6];
      if (!v17) {
        uint64_t v17 = &off_253F1A0;
      }
      double v18 = *((double *)v17 + 7);
      uint64_t v19 = -1;
      if (v18 <= 180.0)
      {
        double v20 = *((double *)v17 + 6);
        if (v20 >= -85.0511288 && v20 <= 85.0511288 && v18 >= -180.0)
        {
          double v21 = fmax(v20, -85.0511288);
          if (v21 >= 85.0511288) {
            double v22 = 1.48442223;
          }
          else {
            double v22 = v21 * 3.14159265 / 180.0;
          }
          long double v23 = sin(v22);
          LODWORD(v24) = ((log((v23 + 1.0) / (1.0 - v23)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v24 >= 0xFFFFFFFE) {
            uint64_t v24 = 4294967294;
          }
          else {
            uint64_t v24 = v24;
          }
          uint64_t v19 = ((v18 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v24 << 32);
        }
      }
      unint64_t v25 = v2[4];
      unint64_t v26 = v2[3];
      uint64_t v27 = 16 * (v25 - v26) - 1;
      char v28 = *((unsigned char *)v12 + 48);
      if (v25 == v26) {
        uint64_t v27 = 0;
      }
      unint64_t v29 = v2[7] + v2[6];
      if (v27 == v29)
      {
        sub_DCAB6C(v3);
        unint64_t v26 = v2[3];
        unint64_t v29 = v2[7] + v2[6];
      }
      uint64_t v11 = *(void *)(v26 + ((v29 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v29 & 0x7F);
      *(_DWORD *)uint64_t v11 = v13;
      *(_DWORD *)(v11 + 4) = data;
      *(void *)(v11 + 8) = v15;
      *(unsigned char *)(v11 + 16) = v28;
      *(void *)(v11 + 20) = v19;
      *(_DWORD *)(v11 + 28) = 0x7FFFFFFF;
      ++v2[7];
      ++v8;
      v10 -= 8;
    }
    while (v10);
    uint64_t v4 = v89;
    uint64_t v5 = *(uint64_t (****)())(v89 + 96);
  }
  if (!v5) {
    uint64_t v5 = &off_24F7A58;
  }
  v2[8] = (unint64_t)v5[6];
  uint64_t v30 = *(void *)(v4 + 40);
  if (v30) {
    uint64_t v31 = (uint64_t *)(v30 + 8);
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(int *)(v4 + 32);
  if (v32)
  {
    int v33 = v2 + 88;
    uint64_t v34 = 8 * v32;
    while (1)
    {
      uint64_t v35 = *v31;
      memset(&v96, 0, sizeof(v96));
      long long __p = 0u;
      long long v99 = 0u;
      LODWORD(v97) = 0;
      int v100 = 0x7FFFFFFF;
      uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
      std::string::operator=(&v96, (const std::string *)(*(void *)(v35 + 48) & 0xFFFFFFFFFFFFFFFELL));
      uint64_t v36 = *(uint64_t (****)())(v35 + 56);
      if (!v36) {
        uint64_t v36 = &off_24F7800;
      }
      LODWORD(v97) = *((_DWORD *)v36 + 6);
      unint64_t v37 = *(int *)(v35 + 32);
      long long v38 = __p;
      uint64_t v39 = *((void *)&__p + 1) - __p;
      if (v37 <= *((void *)&__p + 1) - (void)__p) {
        break;
      }
      if ((void)v99 - *((void *)&__p + 1) >= v37 - (*((void *)&__p + 1) - (void)__p))
      {
        unint64_t v44 = v37 + __p;
LABEL_61:
        *((void *)&__p + 1) = v44;
        goto LABEL_62;
      }
      if ((v37 & 0x80000000) != 0) {
        sub_2E00();
      }
      unint64_t v40 = 2 * (v99 - __p);
      if (v40 <= v37) {
        unint64_t v40 = v37;
      }
      if ((void)v99 - (void)__p >= 0x3FFFFFFFFFFFFFFFuLL) {
        size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v41 = v40;
      }
      uint64_t v42 = (char *)operator new(v41);
      uint64_t v43 = v38 - *((void *)&v38 + 1);
      if ((void)v38 == *((void *)&v38 + 1)) {
        uint64_t v43 = 0;
      }
      *(void *)&long long __p = &v42[v39 + v43];
      *((void *)&__p + 1) = &v42[v37];
      *(void *)&long long v99 = &v42[v41];
      if ((void)v38) {
        operator delete((void *)v38);
      }
LABEL_62:
      double v2 = v95;
      unint64_t v45 = v95[10];
      if (v45 < v95[11])
      {
        sub_3A8F44(v33, (char *)v95[10], (long long *)&v96);
        v95[10] = v45 + 80;
        v95[10] = v45 + 80;
        uint64_t v46 = (void *)__p;
        if (!(void)__p) {
          goto LABEL_67;
        }
LABEL_66:
        *((void *)&__p + 1) = v46;
        operator delete(v46);
        goto LABEL_67;
      }
      double v2 = v95;
      v95[10] = (unint64_t)sub_3A8D48(v92, (long long *)&v96);
      uint64_t v46 = (void *)__p;
      if ((void)__p) {
        goto LABEL_66;
      }
LABEL_67:
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      ++v31;
      v34 -= 8;
      if (!v34) {
        goto LABEL_69;
      }
    }
    if (v37 >= *((void *)&__p + 1) - (void)__p) {
      goto LABEL_62;
    }
    unint64_t v44 = __p + v37;
    goto LABEL_61;
  }
LABEL_69:
  if ((*(unsigned char *)(v89 + 16) & 0x40) != 0) {
    *((unsigned char *)v2 + 96) = sub_7BB78(*(_DWORD *)(v89 + 124));
  }
  uint64_t v47 = *(void *)(v89 + 64);
  uint64_t v48 = (uint64_t *)(v47 + 8);
  if (!v47) {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(int *)(v89 + 56);
  if (v49)
  {
    uint64_t v90 = &v48[v49];
    do
    {
      int v93 = v48;
      uint64_t v50 = *v48;
      uint64_t v51 = *(void *)(*v48 + 40);
      if (v51) {
        uint64_t v52 = v51 + 8;
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v53 = *(int *)(v50 + 32);
      if (v53)
      {
        uint64_t v54 = *(uint64_t (****)())(v50 + 48);
        if (v54) {
          int v55 = v54;
        }
        else {
          int v55 = &off_24F7A90;
        }
        uint64_t v56 = v2[18];
        uint64_t v57 = 8 * v53;
        do
        {
          unint64_t v59 = v2[14];
          BOOL v60 = v2[15] == v59;
          uint64_t v61 = 170 * ((uint64_t)(v2[15] - v59) >> 3) - 1;
          long long v62 = v2;
          int v63 = *(_DWORD *)(*(void *)v52 + 32);
          uint64_t v64 = *(void *)(*(void *)v52 + 24);
          int v66 = *((_DWORD *)v55 + 6);
          int v65 = *((_DWORD *)v55 + 7);
          char v67 = *((unsigned char *)v55 + 32);
          char v68 = *((unsigned char *)v55 + 33);
          if (v60) {
            uint64_t v61 = 0;
          }
          unint64_t v69 = v56 + v62[17];
          if (v61 == v69)
          {
            sub_3B7CB4(v94);
            long long v62 = v95;
            unint64_t v59 = v95[14];
            unint64_t v69 = v95[18] + v95[17];
          }
          unint64_t v58 = *(void *)(v59 + 8 * (v69 / 0xAA)) + 24 * (v69 % 0xAA);
          *(void *)unint64_t v58 = v64;
          *(_DWORD *)(v58 + 8) = 1000 * v63;
          *(_DWORD *)(v58 + 12) = v66;
          *(_DWORD *)(v58 + 16) = 1000 * v65;
          *(unsigned char *)(v58 + 20) = v67;
          *(unsigned char *)(v58 + 21) = v68;
          uint64_t v56 = v62[18] + 1;
          v62[18] = v56;
          v52 += 8;
          v57 -= 8;
          double v2 = v62;
        }
        while (v57);
      }
      uint64_t v48 = v93 + 1;
    }
    while (v93 + 1 != v90);
  }
  uint64_t v70 = *(void *)(v89 + 88);
  if (v70) {
    char v71 = (uint64_t *)(v70 + 8);
  }
  else {
    char v71 = 0;
  }
  uint64_t v72 = *(int *)(v89 + 80);
  if (v72)
  {
    uint64_t v73 = 8 * v72;
    do
    {
      uint64_t v74 = *v71;
      char v75 = *(uint64_t (****)())(*v71 + 24);
      if (!v75) {
        char v75 = &off_2539AC8;
      }
      if ((~*((_DWORD *)v75 + 4) & 3) != 0) {
        memset(&v102, 0, sizeof(v102));
      }
      else {
        sub_51C4C((uint64_t)&v102, (uint64_t)v75[3], (uint64_t)v75[4]);
      }
      unsigned int v76 = &off_253F1A0;
      if (*(void *)(v74 + 32)) {
        unsigned int v76 = *(uint64_t (****)())(v74 + 32);
      }
      double v77 = *((double *)v76 + 7);
      uint64_t v78 = -1;
      if (v77 <= 180.0)
      {
        double v79 = *((double *)v76 + 6);
        if (v79 >= -85.0511288 && v79 <= 85.0511288 && v77 >= -180.0)
        {
          double v80 = fmax(v79, -85.0511288);
          if (v80 >= 85.0511288) {
            double v81 = 1.48442223;
          }
          else {
            double v81 = v80 * 3.14159265 / 180.0;
          }
          long double v82 = sin(v81);
          LODWORD(v83) = ((log((v82 + 1.0) / (1.0 - v82)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v83 >= 0xFFFFFFFE) {
            uint64_t v83 = 4294967294;
          }
          else {
            uint64_t v83 = v83;
          }
          uint64_t v78 = ((v77 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v83 << 32);
        }
      }
      unsigned int v84 = *(_DWORD *)(v74 + 44);
      if (v84 < 3) {
        char v85 = v84 + 1;
      }
      else {
        char v85 = 0;
      }
      int v86 = *(_DWORD *)(v74 + 40) + 978307200;
      if ((*(_DWORD *)(v74 + 16) & 0x10) != 0) {
        uint64_t v87 = *(void *)(v74 + 48);
      }
      else {
        uint64_t v87 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::string v96 = v102;
      uint64_t v97 = v78;
      LODWORD(__p) = 0x7FFFFFFF;
      DWORD1(__p) = v86;
      BYTE8(__p) = v85;
      *(void *)&long long v99 = v87;
      sub_DC6750(v91, (long long *)&v96);
      ++v71;
      v73 -= 8;
    }
    while (v73);
  }
  if ((*(unsigned char *)(v89 + 16) & 0x20) != 0)
  {
    int v88 = *(_DWORD *)(v89 + 120);
    if (v88 != 0x7FFFFFFF) {
      *((_DWORD *)v2 + 38) = v88 + 978307200;
    }
  }
}

void sub_DC66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_DC66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, ...)
{
  va_start(va, a9);
  sub_3A0F3C((uint64_t)va);
  sub_4891C8(a9);
  _Unwind_Resume(a1);
}

void sub_DC673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

char *sub_DC6750(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(56 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[56 * v11];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = a2[2];
    *((void *)v16 + 6) = *((void *)a2 + 6);
    uint64_t v9 = v16 + 56;
    if (v5 != v10)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 56);
        long long v19 = *(_OWORD *)(v5 - 40);
        long long v20 = *(_OWORD *)(v5 - 24);
        *((void *)v16 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v5 -= 56;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[56 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    *((void *)v5 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    uint64_t v9 = v5 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

uint64_t sub_DC68CC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = sub_1883F34(a1 + 16, dword_254EB28, qword_254EB30);
  uint64_t v4 = sub_1883F34(v2, dword_254EB28, qword_254EB30);
  if ((*(unsigned char *)(a1 + 42) & 1) == 0 && !*(_DWORD *)(a1 + 80) && !*(_DWORD *)(v3 + 24) && !*(_DWORD *)(v4 + 40)) {
    return *(unsigned int *)(a1 + 468);
  }
  unsigned int v5 = sub_DB7034(a1);
  if (v5 > 0xD) {
    return *(unsigned int *)(a1 + 468);
  }
  char v6 = v5;
  uint64_t result = 1;
  if (((1 << v6) & 0x35FE) == 0) {
    return *(unsigned int *)(a1 + 468);
  }
  return result;
}

uint64_t sub_DC6980(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = 0;
  long long v17 = operator new(0x19uLL);
  long long v18 = xmmword_20B9250;
  strcpy((char *)v17, "DrivingDirectionsUpdate");
  long long __p = 0;
  uint64_t v15 = 0;
  uint64_t v4 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_54214((uint64_t)v19, (uint64_t)v4);
  unsigned int v5 = (void **)__p;
  if (__p)
  {
    char v6 = v15;
    long long v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      long long v7 = __p;
    }
    uint64_t v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  long long v17 = operator new(0x20uLL);
  long long v18 = xmmword_20B8E90;
  strcpy((char *)v17, "min_number_of_routes_to_compute");
  unsigned int v8 = sub_31AC04(v19, (uint64_t)&v17);
  int v9 = *(_DWORD *)(a1 + 400);
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      unint64_t v13 = *(char **)v10;
      sub_57AC8((uint64_t *)v10 + 5);
      if (v10[39] < 0) {
        operator delete(*((void **)v10 + 2));
      }
      operator delete(v10);
      uint64_t v10 = v13;
    }
    while (v13);
  }
  uint64_t v11 = v19[0];
  v19[0] = 0;
  if (v11) {
    operator delete(v11);
  }
  if (v8 <= v9 + 1) {
    return (v9 + 1);
  }
  else {
    return v8;
  }
}

void sub_DC6B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_DC6B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_DC6B5C(unsigned int a1)
{
  unint64_t v1 = 0x60503030200uLL >> (8 * a1);
  if (a1 >= 6) {
    LOBYTE(v1) = 0;
  }
  return v1 & 7;
}

unint64_t sub_DC6B80(uint64_t a1)
{
  unint64_t v1 = &off_2536218;
  if (*(void *)(a1 + 344)) {
    unint64_t v1 = *(uint64_t (****)())(a1 + 344);
  }
  return (unint64_t)v1[4] & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DC6BA0(uint64_t a1)
{
  unint64_t v1 = &off_254D310;
  if (*(void *)(a1 + 176)) {
    unint64_t v1 = *(uint64_t (****)())(a1 + 176);
  }
  return (unint64_t)v1[6] & 0xFFFFFFFFFFFFFFFELL;
}

unint64_t sub_DC6BC0(uint64_t a1)
{
  unint64_t v1 = &off_2539290;
  if (*(void *)(a1 + 136)) {
    unint64_t v1 = *(uint64_t (****)())(a1 + 136);
  }
  return (unint64_t)v1[20] & 0xFFFFFFFFFFFFFFFELL;
}

void *sub_DC6BE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_25E77A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(qword_25E77A0))
  {
    return qword_25EB5C0;
  }
  sub_5E5C(qword_25EB5C0, "");
  __cxa_guard_release(qword_25E77A0);
  return qword_25EB5C0;
}

void sub_DC6C58(_Unwind_Exception *a1)
{
}

void ***sub_DC6C70@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  if ((*((unsigned char *)result + 41) & 0x10) != 0) {
    return sub_DBECF4((void ***)result[42], (uint64_t)a2);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void sub_DC6C8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v4 = *(void *)(v3 + 88);
    if (v4) {
      unsigned int v5 = (long long **)(v4 + 8);
    }
    else {
      unsigned int v5 = 0;
    }
    unint64_t v6 = *(int *)(v3 + 80);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_DCB13C((char *)a2, v5, &v5[v6], v6);
    return;
  }
  if ((*(unsigned char *)(a1 + 41) & 0x10) == 0)
  {
LABEL_9:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  uint64_t v7 = *(void *)(a1 + 336);
  unint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 40);
  if (v9) {
    uint64_t v10 = v9 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8)
  {
    uint64_t v11 = 8 * v8;
    while (*(int *)(*(void *)v10 + 80) >= 1)
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)v10 + 88) + 8);
      if (*(char *)(v12 + 23) < 0)
      {
        if (!*(void *)(v12 + 8)) {
          goto LABEL_9;
        }
      }
      else if (!*(unsigned char *)(v12 + 23))
      {
        goto LABEL_9;
      }
      v10 += 8;
      v11 -= 8;
      if (!v11) {
        goto LABEL_22;
      }
    }
    goto LABEL_9;
  }
LABEL_22:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, v8);
  uint64_t v13 = *(int *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 40);
  if (v14) {
    uint64_t v15 = v14 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v13)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v17 = 8 * v13;
    do
    {
      long long v18 = *(long long **)(*(void *)(*(void *)v15 + 88) + 8);
      if (*((char *)v18 + 23) < 0)
      {
        sub_4200(__p, *(void **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        uint64_t v22 = *((void *)v18 + 2);
        *(_OWORD *)long long __p = v19;
      }
      uint64_t v20 = sub_8B3D0((void ***)a2, v16, (__n128 *)__p);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v16 = v20 + 24;
      v15 += 8;
      v17 -= 8;
    }
    while (v17);
  }
}

void sub_DC6E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = (void **)*v14;
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v17 = (void **)v14[1];
  long long v18 = *v14;
  if (v17 != v16)
  {
    do
    {
      if (*((char *)v17 - 1) < 0) {
        operator delete(*(v17 - 3));
      }
      v17 -= 3;
    }
    while (v17 != v16);
    long long v18 = *v14;
  }
  v14[1] = v16;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC6EB0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 42) & 1) == 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 392);
  if ((*(unsigned char *)(v2 + 16) & 4) != 0) {
    return *(unsigned int *)(v2 + 56);
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t sub_DC6EDC(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)sub_37B3A8(a1);
  char v18 = 13;
  uint64_t v16 = 0;
  strcpy((char *)v17, "RequestParser");
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = sub_374CDC(a1, (uint64_t)v17, (uint64_t *)&v14);
  char v13 = 14;
  strcpy((char *)__p, "leave_at_slack");
  int v4 = sub_319F48(v3, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v5 = (void **)v14;
  if (v14)
  {
    unint64_t v6 = v15;
    uint64_t v7 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = v14;
    }
    uint64_t v15 = v5;
    operator delete(v7);
  }
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (v2[2] == 1) {
      return 1;
    }
  }
  else if (v2[2] == 1)
  {
    return 1;
  }
  int v9 = v2[1];
  int v10 = v9 + v4;
  BOOL v11 = *v2 < v9 - v4;
  return *v2 > v10 || v11;
}

void sub_DC7034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_DC7098(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (****)())(a1 + 48);
  if (!v1) {
    unint64_t v1 = &off_254D270;
  }
  uint64_t v2 = (uint64_t (***)())v1[3];
  if (!v2) {
    uint64_t v2 = &off_253F1A0;
  }
  if ((~*((_DWORD *)v2 + 10) & 3) != 0) {
    return -1;
  }
  double v3 = *((double *)v2 + 7);
  uint64_t result = -1;
  if (v3 <= 180.0)
  {
    double v5 = *((double *)v2 + 6);
    if (v5 >= -85.0511288 && v5 <= 85.0511288 && v3 >= -180.0)
    {
      double v6 = fmax(v5, -85.0511288);
      double v7 = v6 * 3.14159265 / 180.0;
      BOOL v8 = v6 < 85.0511288;
      double v9 = 1.48442223;
      if (v8) {
        double v9 = v7;
      }
      long double v10 = sin(v9);
      LODWORD(v11) = ((log((v10 + 1.0) / (1.0 - v10)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v11 >= 0xFFFFFFFE) {
        uint64_t v11 = 4294967294;
      }
      else {
        uint64_t v11 = v11;
      }
      return ((v3 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v11 << 32);
    }
  }
  return result;
}

uint64_t sub_DC71FC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, long long *a6, char a7)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char v13 = *(const void **)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  int64_t v14 = v12 - *(void *)a3;
  if (v12 != *(void *)a3)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - *(void *)a3);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 24) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 16) = v16;
  }
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v17 = *(const void **)a5;
  int64_t v18 = *(void *)(a5 + 8) - *(void *)a5;
  if (v18)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    long long v19 = (char *)operator new(v18);
    *(void *)(a1 + 40) = v19;
    *(void *)(a1 + 48) = v19;
    uint64_t v20 = &v19[4 * (v18 >> 2)];
    *(void *)(a1 + 56) = v20;
    memcpy(v19, v17, v18);
    *(void *)(a1 + 48) = v20;
  }
  double v21 = (unsigned char *)(a1 + 64);
  if (*((char *)a6 + 23) < 0)
  {
    sub_4200(v21, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v22 = *a6;
    *(void *)(a1 + 80) = *((void *)a6 + 2);
    *(_OWORD *)double v21 = v22;
  }
  *(unsigned char *)(a1 + 88) = a7;
  return a1;
}

void sub_DC7324(_Unwind_Exception *exception_object)
{
  double v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  double v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_DC735C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E77B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E77B8))
  {
    sub_5E5C(v0, "ar");
    sub_5E5C(&v2, "bg");
    sub_5E5C(&v4, "ca");
    sub_5E5C(&v6, "cs");
    sub_5E5C(&v8, "da");
    sub_5E5C(&v10, "de");
    sub_5E5C(&v12, "el");
    sub_5E5C(&v14, "en-au");
    sub_5E5C(&v16, "en-gb");
    sub_5E5C(&v18, "en-in");
    sub_5E5C(&v20, "en");
    sub_5E5C(&v22, "es");
    sub_5E5C(&v24, "fi");
    sub_5E5C(&v26, "fr-ca");
    sub_5E5C(&v28, "fr");
    sub_5E5C(&v30, "he");
    sub_5E5C(&v32, "hi");
    sub_5E5C(&v34, "hr");
    sub_5E5C(&v36, "hu");
    sub_5E5C(&v38, "id");
    sub_5E5C(&v40, "it");
    sub_5E5C(&v42, "ja");
    sub_5E5C(&v44, "kk");
    sub_5E5C(&v46, "ko");
    sub_5E5C(&v48, "ms");
    sub_5E5C(&v50, "nl");
    sub_5E5C(&v52, "no");
    sub_5E5C(&v54, "pl");
    sub_5E5C(&v56, "pt-pt");
    sub_5E5C(&v58, "pt");
    sub_5E5C(&v60, "ro");
    sub_5E5C(&v62, "ru");
    sub_5E5C(&v64, "sk");
    sub_5E5C(&v66, "sv");
    sub_5E5C(&v68, "th");
    sub_5E5C(&v70, "tr");
    sub_5E5C(&v72, "uk");
    sub_5E5C(&v74, "vi");
    sub_5E5C(&v76, "zh-cn");
    sub_5E5C(&v78, "zh-hk");
    sub_5E5C(&v80, "zh-tw");
    sub_5E5C(&__p, "es-mx");
    sub_4BDC0C(qword_25EB608, (uint64_t)v0, 0x2AuLL);
    if (v83 < 0)
    {
      operator delete(__p);
      if ((v81 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v79 & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_49;
      }
    }
    else if ((v81 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v80);
    if ((v79 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v77 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v78);
    if ((v77 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v75 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v76);
    if ((v75 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v73 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v74);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_53;
    }
LABEL_52:
    operator delete(v72);
    if ((v71 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v69 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_54;
    }
LABEL_53:
    operator delete(v70);
    if ((v69 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v67 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_55;
    }
LABEL_54:
    operator delete(v68);
    if ((v67 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_56;
    }
LABEL_55:
    operator delete(v66);
    if ((v65 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_57;
    }
LABEL_56:
    operator delete(v64);
    if ((v63 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v61 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_58;
    }
LABEL_57:
    operator delete(v62);
    if ((v61 & 0x80000000) == 0)
    {
LABEL_16:
      if ((v59 & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_59;
    }
LABEL_58:
    operator delete(v60);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_17:
      if ((v57 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_60;
    }
LABEL_59:
    operator delete(v58);
    if ((v57 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v55 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_61;
    }
LABEL_60:
    operator delete(v56);
    if ((v55 & 0x80000000) == 0)
    {
LABEL_19:
      if ((v53 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_62;
    }
LABEL_61:
    operator delete(v54);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v51 & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_63;
    }
LABEL_62:
    operator delete(v52);
    if ((v51 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v49 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_64;
    }
LABEL_63:
    operator delete(v50);
    if ((v49 & 0x80000000) == 0)
    {
LABEL_22:
      if ((v47 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_65;
    }
LABEL_64:
    operator delete(v48);
    if ((v47 & 0x80000000) == 0)
    {
LABEL_23:
      if ((v45 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_66;
    }
LABEL_65:
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v44);
    if ((v43 & 0x80000000) == 0)
    {
LABEL_25:
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_68;
    }
LABEL_67:
    operator delete(v42);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v39 & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_69;
    }
LABEL_68:
    operator delete(v40);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_27:
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v38);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_28:
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v36);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_29:
      if ((v33 & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v34);
    if ((v33 & 0x80000000) == 0)
    {
LABEL_30:
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v32);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_32:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_75;
    }
LABEL_74:
    operator delete(v28);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_33:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_76;
    }
LABEL_75:
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_34:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_77;
    }
LABEL_76:
    operator delete(v24);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_35:
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_78;
    }
LABEL_77:
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_36:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_79;
    }
LABEL_78:
    operator delete(v20);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_37:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_80;
    }
LABEL_79:
    operator delete(v18);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_38:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_81;
    }
LABEL_80:
    operator delete(v16);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_39:
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_82;
    }
LABEL_81:
    operator delete(v14);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_40:
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_83;
    }
LABEL_82:
    operator delete(v12);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_41:
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_84;
    }
LABEL_83:
    operator delete(v10);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_42:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_85;
    }
LABEL_84:
    operator delete(v8);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_43:
      if ((v5 & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_86;
    }
LABEL_85:
    operator delete(v6);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_44:
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_87;
    }
LABEL_86:
    operator delete(v4);
    if ((v3 & 0x80000000) == 0)
    {
LABEL_45:
      if ((v1 & 0x80000000) == 0)
      {
LABEL_46:
        __cxa_guard_release(&qword_25E77B8);
        return;
      }
LABEL_88:
      operator delete(v0[0]);
      goto LABEL_46;
    }
LABEL_87:
    operator delete(v2);
    if ((v1 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_88;
  }
}

void sub_DC7B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (SLOBYTE(STACK[0x3F7]) < 0)
  {
    operator delete((void *)STACK[0x3E0]);
    if ((SLOBYTE(STACK[0x3DF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_46;
    }
  }
  else if ((SLOBYTE(STACK[0x3DF]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x3C8]);
  if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete((void *)STACK[0x3B0]);
  if ((SLOBYTE(STACK[0x3AF]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x397]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete((void *)STACK[0x398]);
  if ((SLOBYTE(STACK[0x397]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)STACK[0x380]);
  if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete((void *)STACK[0x368]);
  if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete((void *)STACK[0x350]);
  if ((SLOBYTE(STACK[0x34F]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete((void *)STACK[0x338]);
  if ((SLOBYTE(STACK[0x337]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete((void *)STACK[0x320]);
  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete((void *)STACK[0x308]);
  if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete((void *)STACK[0x2F0]);
  if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete((void *)STACK[0x2D8]);
  if ((SLOBYTE(STACK[0x2D7]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete((void *)STACK[0x2C0]);
  if ((SLOBYTE(STACK[0x2BF]) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete((void *)STACK[0x2A8]);
  if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x28F]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete((void *)STACK[0x290]);
  if ((SLOBYTE(STACK[0x28F]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete((void *)STACK[0x278]);
  if ((SLOBYTE(STACK[0x277]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x25F]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete((void *)STACK[0x260]);
  if ((SLOBYTE(STACK[0x25F]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete((void *)STACK[0x248]);
  if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete((void *)STACK[0x230]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((a92 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete((void *)STACK[0x200]);
  if ((a92 & 0x80000000) == 0)
  {
LABEL_23:
    if ((a90 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(a91);
  if ((a90 & 0x80000000) == 0)
  {
LABEL_24:
    if ((a88 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(a89);
  if ((a88 & 0x80000000) == 0)
  {
LABEL_25:
    if ((a86 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete(a87);
  if ((a86 & 0x80000000) == 0)
  {
LABEL_26:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_27:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_28:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_29:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_30:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_31:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_32:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_33:
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(a70);
  if ((a69 & 0x80000000) == 0)
  {
LABEL_34:
    if ((a63 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(a64);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_35:
    if ((a57 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(a58);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_36:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(a52);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_37:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(a46);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_38:
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(a40);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_39:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_40:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_41:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_42:
    if ((a15 & 0x80000000) == 0)
    {
LABEL_86:
      __cxa_guard_abort(&qword_25E77B8);
      _Unwind_Resume(a1);
    }
LABEL_85:
    operator delete(a10);
    __cxa_guard_abort(&qword_25E77B8);
    _Unwind_Resume(a1);
  }
LABEL_84:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_86;
  }
  goto LABEL_85;
}

void sub_DC7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    if (*((char *)v10 - 1) < 0) {
      operator delete(*(v10 - 3));
    }
    v10 -= 3;
    if (v10 == (void **)&a10) {
      JUMPOUT(0xDC7F84);
    }
  }
}

void sub_DC7FC4(long long **a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = *a1;
  char v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)*a1) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    double v6 = (uint64_t *)operator new(0x5555555555555558 * (((char *)v3 - (char *)*a1) >> 3));
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[v5];
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v7 = *v4;
        uint64_t v36 = *((void *)v4 + 2);
        *(_OWORD *)long long __p = v7;
      }
      unint64_t v8 = HIBYTE(v36);
      if (v36 >= 0) {
        char v9 = (unsigned __int8 *)__p;
      }
      else {
        char v9 = (unsigned __int8 *)__p[0];
      }
      if (v36 < 0) {
        unint64_t v8 = (unint64_t)__p[1];
      }
      if (v8 >= 0x1F) {
        uint64_t v10 = 31;
      }
      else {
        uint64_t v10 = v8;
      }
      if (!v10)
      {
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        goto LABEL_26;
      }
      if (v10 == 1) {
        break;
      }
      if (v10 == 2)
      {
        uint64_t v12 = __p;
        if (v36 < 0) {
          uint64_t v12 = (void **)__p[0];
        }
        *(void *)&long long v37 = *v9 | ((unint64_t)*((unsigned __int8 *)v12 + 1) << 8);
        uint64_t v11 = 2;
        goto LABEL_24;
      }
      sub_76DEC(v9, v10, (uint64_t)&v37);
LABEL_26:
      uint64_t v13 = sub_1133038((uint64_t)&v37, 0);
      uint64_t v14 = v13;
      uint64_t v16 = a2[1];
      unint64_t v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        int64_t v18 = *a2;
        uint64_t v19 = (char *)v16 - (char *)*a2;
        uint64_t v20 = v19 >> 3;
        unint64_t v21 = (v19 >> 3) + 1;
        if (v21 >> 61) {
          sub_2E00();
        }
        uint64_t v22 = v15 - (void)v18;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 >> 61) {
            sub_188D718();
          }
          uint64_t v24 = operator new(8 * v23);
          char v25 = (uint64_t *)&v24[8 * v20];
          uint64_t *v25 = v14;
          uint64_t v17 = (uint64_t)(v25 + 1);
          if (v16 != v18)
          {
LABEL_42:
            unint64_t v26 = (char *)(v16 - 1) - (char *)v18;
            if (v26 < 0x58) {
              goto LABEL_56;
            }
            if ((unint64_t)((char *)v16 - &v24[v19]) < 0x20) {
              goto LABEL_56;
            }
            uint64_t v27 = (v26 >> 3) + 1;
            uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            char v29 = &v16[v28 / 0xFFFFFFFFFFFFFFF8];
            char v25 = (uint64_t *)((char *)v25 - v28);
            uint64_t v30 = &v24[8 * v20 - 16];
            char v31 = v16 - 2;
            uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *uint64_t v30 = v33;
              v30 -= 2;
              v31 -= 4;
              v32 -= 4;
            }
            while (v32);
            uint64_t v16 = v29;
            if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_56:
              do
              {
                uint64_t v34 = *--v16;
                *--char v25 = v34;
              }
              while (v16 != v18);
            }
            uint64_t v16 = *a2;
            *a2 = v25;
            a2[1] = (uint64_t *)v17;
            a2[2] = (uint64_t *)&v24[8 * v23];
            if (!v16) {
              goto LABEL_39;
            }
LABEL_38:
            operator delete(v16);
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v24 = 0;
          char v25 = (uint64_t *)(8 * v20);
          *(void *)(8 * v20) = v14;
          uint64_t v17 = 8 * v20 + 8;
          if (v16 != v18) {
            goto LABEL_42;
          }
        }
        *a2 = v25;
        a2[1] = (uint64_t *)v17;
        a2[2] = (uint64_t *)&v24[8 * v23];
        if (v16) {
          goto LABEL_38;
        }
      }
      else
      {
        *uint64_t v16 = v13;
        uint64_t v17 = (uint64_t)(v16 + 1);
      }
LABEL_39:
      a2[1] = (uint64_t *)v17;
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
      int v4 = (long long *)((char *)v4 + 24);
      if (v4 == v3) {
        return;
      }
    }
    *(void *)&long long v37 = *v9;
    uint64_t v11 = 1;
LABEL_24:
    *((void *)&v37 + 1) = v11;
    long long v38 = 0u;
    long long v39 = 0u;
    goto LABEL_26;
  }
}

void sub_DC82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  int64_t v18 = *(void **)v16;
  if (!*(void *)v16) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v16 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC833C(uint64_t a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, int a18, uint64_t a19, int a20,int a21,int a22,int *a23,int a24,char a25,char a26,char a27,char a28,char a29)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = a3;
  *(unsigned char *)(a1 + 2) = a4;
  *(unsigned char *)(a1 + 3) = a5;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 4) = a6;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v32 = *(const void **)a7;
  uint64_t v31 = *(void *)(a7 + 8);
  int64_t v33 = v31 - *(void *)a7;
  if (v31 != *(void *)a7)
  {
    if (v33 < 0) {
      sub_2E00();
    }
    uint64_t v34 = (char *)operator new(v31 - *(void *)a7);
    *(void *)(a1 + 8) = v34;
    *(void *)(a1 + 16) = v34;
    char v35 = &v34[4 * (v33 >> 2)];
    *(void *)(a1 + 24) = v35;
    memcpy(v34, v32, v33);
    *(void *)(a1 + 16) = v35;
  }
  *(unsigned char *)(a1 + 32) = a8;
  *(unsigned char *)(a1 + 33) = a9;
  *(unsigned char *)(a1 + 34) = a10;
  *(unsigned char *)(a1 + 35) = a11;
  *(unsigned char *)(a1 + 36) = a12;
  *(unsigned char *)(a1 + 37) = a13;
  *(unsigned char *)(a1 + 38) = a14;
  *(unsigned char *)(a1 + 39) = a15;
  *(unsigned char *)(a1 + 40) = a16;
  *(unsigned char *)(a1 + 41) = a17;
  *(_DWORD *)(a1 + 44) = a18;
  *(void *)(a1 + 48) = a19;
  *(_DWORD *)(a1 + 56) = a20;
  *(_DWORD *)(a1 + 60) = a22;
  sub_4BC93C(a1 + 64, a23);
  *(_DWORD *)(a1 + 160) = a24;
  *(unsigned char *)(a1 + 164) = a25;
  *(unsigned char *)(a1 + 165) = a26;
  *(unsigned char *)(a1 + 166) = a27;
  *(unsigned char *)(a1 + 167) = a28;
  *(unsigned char *)(a1 + 168) = a29;
  return a1;
}

void sub_DC847C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC849C(uint64_t a1, int *a2, char a3, char a4, char a5, char a6, char a7)
{
  int v13 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v13;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 2);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v17;
    int64_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 24) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 16) = v18;
  }
  long long v19 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v19;
  sub_4BC93C(a1 + 64, a2 + 16);
  uint64_t v20 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v20;
  *(unsigned char *)(a1 + 176) = a3;
  *(unsigned char *)(a1 + 177) = a4;
  *(unsigned char *)(a1 + 178) = a5;
  *(unsigned char *)(a1 + 179) = a6;
  *(unsigned char *)(a1 + 180) = a7;
  return a1;
}

void sub_DC859C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC85BC(uint64_t *a1, char *a2, int *a3, char *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 2) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(12 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = sub_87E68((uint64_t)&v11[12 * v5], *a2, *a3, *a4);
  uint64_t v13 = v12 + 12;
  unint64_t v15 = (unsigned char *)*a1;
  uint64_t v14 = (unsigned char *)a1[1];
  if (v14 != (unsigned char *)*a1)
  {
    do
    {
      uint64_t v16 = *(void *)(v14 - 12);
      v14 -= 12;
      char v17 = v14[8];
      *(void *)(v12 - 12) = v16;
      v12 -= 12;
      *(unsigned char *)(v12 + 8) = v17;
    }
    while (v14 != v15);
    uint64_t v14 = (unsigned char *)*a1;
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = (uint64_t)&v11[12 * v10];
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_DC86E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DC8700(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_1473CF4(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_DC8754(uint64_t a1, uint64_t a2)
{
  sub_1473904(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      long long v7 = 0;
    }
    else
    {
      long long v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        long long v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_1474D20(a1, a2);
    }
    else {
      sub_1474CD4(a1, a2);
    }
  }
  return a1;
}

char *sub_DC87F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(88 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = &v7[88 * v3];
  unint64_t v15 = &v7[88 * v6];
  sub_13E9AE4(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  char v9 = v14 + 88;
  uint64_t v11 = (char *)*a1;
  unint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 88;
      uint64_t v8 = sub_DC8754(v8 - 88, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 88;
        sub_1473CF4(v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 88;
}

void sub_DC8974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DC8700((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_DC8988(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(88 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 88 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_13E9AE4(&v6[v7], a2 + v7);
      v7 += 88;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_DC8A3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_1473CF4(v4 - 88);
      while ((void *)v4 != v3);
      unint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_DC8AA4(void **a1, long long *a2, long long *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    char v9 = (char *)operator new(48 * v8);
  }
  else
  {
    char v9 = 0;
  }
  unint64_t v10 = &v9[48 * v4];
  uint64_t v11 = &v9[48 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v26 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&v23, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v23 = *a3;
    uint64_t v24 = *((void *)a3 + 2);
  }
  *(_OWORD *)unint64_t v10 = __dst;
  *((void *)v10 + 2) = v26;
  uint64_t v12 = &v9[48 * v4];
  *(_OWORD *)(v12 + 24) = v23;
  *((void *)v12 + 5) = v24;
  uint64_t v13 = v10 + 48;
  uint64_t v22 = v10 + 48;
  unint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    int64_t v18 = (char *)a1[1];
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v14 - 3);
      *((void *)v10 - 4) = *((void *)v14 - 4);
      *((_OWORD *)v10 - 3) = v16;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *((void *)v14 - 6) = 0;
      long long v17 = *(_OWORD *)(v14 - 24);
      *((void *)v10 - 1) = *((void *)v14 - 1);
      *(_OWORD *)(v10 - 24) = v17;
      v10 -= 48;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      *((void *)v14 - 3) = 0;
      v14 -= 48;
    }
    while (v14 != v15);
    int64_t v18 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = v22;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v14 != v18)
  {
    long long v19 = (void **)(v14 - 48);
    while (1)
    {
      if (*((char *)v19 + 47) < 0)
      {
        operator delete(v19[3]);
        if (*((char *)v19 + 23) < 0) {
LABEL_28:
        }
          operator delete(*v19);
      }
      else if (*((char *)v19 + 23) < 0)
      {
        goto LABEL_28;
      }
      BOOL v20 = v19 == (void **)v18;
      v19 -= 6;
      if (v20)
      {
        uint64_t v14 = v18;
        break;
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_DC8CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_75890((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_75890((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_DC8D20(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      unint64_t v5 = v3;
      do
      {
        unint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        uint64_t v7 = v8;
        if (v8)
        {
          char v9 = (char *)*(v3 - 2);
          unint64_t v6 = v7;
          if (v9 != v7)
          {
            do
            {
              unint64_t v10 = (void *)*((void *)v9 - 9);
              if (v10)
              {
                *((void *)v9 - 8) = v10;
                operator delete(v10);
              }
              uint64_t v11 = (void *)*((void *)v9 - 12);
              if (v11)
              {
                *((void *)v9 - 11) = v11;
                operator delete(v11);
              }
              v9 -= 176;
            }
            while (v9 != v7);
            unint64_t v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_DC8DE8(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >= 0x1E1E1E1E1E1E1E2) {
      sub_2E00();
    }
    uint64_t result = operator new(136 * a4);
    unint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[17 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = (void *)sub_15B04EC(&v8[v9], *a2++);
        v9 += 17;
      }
      while (a2 != a3);
      unint64_t v8 = (void *)((char *)v8 + v9 * 8);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_DC8EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_DC8EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 136)
    sub_15B3DFC(v10 - 136 + v11);
  *(void *)(v9 + 8) = v10;
  sub_DC8EEC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_DC8EEC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      unint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_15B3DFC(v4 - 136);
        while ((void *)v4 != v3);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_DC8F74(void **a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v8 = 0x249249249249249;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x249249249249249) {
      sub_188D718();
    }
    uint64_t v9 = operator new(112 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  char v25 = (char *)&v9[28 * v8];
  int v10 = *a3;
  sub_DAA084((uint64_t)&v9[28 * v4], a2);
  v9[28 * v4 + 26] = v10;
  uint64_t v11 = (char *)&v9[28 * v4];
  uint64_t v12 = v11 + 112;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = &v9[28 * v4];
    a1[1] = v12;
    a1[2] = v25;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      long long v16 = &v11[v15];
      long long v17 = &v14[v15];
      *((_OWORD *)v16 - 7) = *(_OWORD *)&v14[v15 - 112];
      long long v18 = *(_OWORD *)&v14[v15 - 96];
      long long v19 = *(_OWORD *)&v14[v15 - 80];
      long long v20 = *(_OWORD *)&v14[v15 - 64];
      *(_DWORD *)(v16 - 49) = *(_DWORD *)&v14[v15 - 49];
      *((_OWORD *)v16 - 5) = v19;
      *((_OWORD *)v16 - 4) = v20;
      *((_OWORD *)v16 - 6) = v18;
      *((void *)v16 - 4) = 0;
      *((void *)v16 - 3) = 0;
      *((void *)v16 - 5) = 0;
      *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
      *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      int v21 = *(_DWORD *)&v14[v15 - 16];
      *(v16 - 12) = v14[v15 - 12];
      *((_DWORD *)v16 - 4) = v21;
      *((_DWORD *)v16 - 2) = *(_DWORD *)&v14[v15 - 8];
      v15 -= 112;
    }
    while (&v14[v15] != v13);
    uint64_t v22 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = &v11[v15];
    a1[1] = v12;
    a1[2] = v25;
    if (v14 != v22)
    {
      do
      {
        long long v23 = (void *)*((void *)v14 - 5);
        if (v23)
        {
          *((void *)v14 - 4) = v23;
          operator delete(v23);
        }
        v14 -= 112;
      }
      while (v14 != v22);
      uint64_t v14 = v22;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_DC9180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DC9194((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DC9194(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 112;
        *(void *)(a1 + 16) = v2 - 112;
        unint64_t v5 = *(void **)(v2 - 40);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 32) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 112;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_DC9204(uint64_t *a1, int *a2, int *a3, int *a4)
{
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v10 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(176 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v26 = (uint64_t)&v11[176 * v5];
  uint64_t v27 = &v11[176 * v10];
  sub_DC9484((uint64_t)(a1 + 2), v26, a2, a3, a4);
  uint64_t v12 = v26 + 176;
  uint64_t v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v26;
    a1[1] = v12;
    a1[2] = (uint64_t)v27;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v26 + v15;
      long long v17 = &v14[v15];
      long long v18 = *(_OWORD *)&v14[v15 - 176];
      long long v19 = *(_OWORD *)&v14[v15 - 160];
      *(_DWORD *)(v16 - 144) = *(_DWORD *)&v14[v15 - 144];
      *(_OWORD *)(v16 - 176) = v18;
      *(_OWORD *)(v16 - 160) = v19;
      long long v20 = *(_OWORD *)&v14[v15 - 136];
      uint64_t v21 = *(void *)&v14[v15 - 104];
      *(_OWORD *)(v16 - 120) = *(_OWORD *)&v14[v15 - 120];
      *(_OWORD *)(v16 - 136) = v20;
      *(void *)(v16 - 104) = v21;
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 80) = 0;
      *(_OWORD *)(v16 - 96) = *(_OWORD *)&v14[v15 - 96];
      *(void *)(v16 - 80) = *(void *)&v14[v15 - 80];
      *((void *)v17 - 12) = 0;
      *((void *)v17 - 11) = 0;
      *((void *)v17 - 10) = 0;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 56) = 0;
      *(_OWORD *)(v16 - 72) = *(_OWORD *)&v14[v15 - 72];
      *(void *)(v16 - 56) = *(void *)&v14[v15 - 56];
      *((void *)v17 - 9) = 0;
      *((void *)v17 - 8) = 0;
      *((void *)v17 - 7) = 0;
      *(_OWORD *)(v16 - 48) = *(_OWORD *)&v14[v15 - 48];
      *(_DWORD *)(v16 - 24) = *(_DWORD *)&v14[v15 - 24];
      if (*(_DWORD *)&v14[v15 - 24] < 2u) {
        *(void *)(v16 - 32) = *((void *)v17 - 4);
      }
      *(_OWORD *)(v26 + v15 - 16) = *(_OWORD *)&v14[v15 - 16];
      v15 -= 176;
    }
    while (&v14[v15] != v13);
    uint64_t v22 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = v26 + v15;
    a1[1] = v12;
    a1[2] = (uint64_t)v27;
    if (v14 != v22)
    {
      do
      {
        long long v23 = (void *)*((void *)v14 - 9);
        if (v23)
        {
          *((void *)v14 - 8) = v23;
          operator delete(v23);
        }
        uint64_t v24 = (void *)*((void *)v14 - 12);
        if (v24)
        {
          *((void *)v14 - 11) = v24;
          operator delete(v24);
        }
        v14 -= 176;
      }
      while (v14 != v22);
      uint64_t v14 = v22;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v26 + 176;
}

void sub_DC9470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DC95A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DC9484(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5)
{
  int v5 = *a3;
  int v6 = *a4;
  int v7 = *a5;
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)unint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = 10 * v6;
  *(_DWORD *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a2 + 24) = 0x7FFFFFFF;
  *(void *)(a2 + 28) = 0x7FFFFFFF7FFFFFFFLL;
  sub_3B1DC8(a2 + 40, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_DC958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_DC95A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    uint64_t v4 = *(void **)(i - 72);
    if (v4)
    {
      *(void *)(i - 64) = v4;
      operator delete(v4);
    }
    int v5 = *(void **)(i - 96);
    if (v5)
    {
      *(void *)(i - 88) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_DC9618(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  int v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v10 = v8 + 24;
  unint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = (void **)v10;
    a1[2] = (void **)v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_28;
  }
  do
  {
    long long v13 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v14 = *(_OWORD *)(v12 - 3);
    v12 -= 3;
    *(_OWORD *)(v8 - 24) = v14;
    v8 -= 24;
    *((void *)v13 - 1) = v12[2];
    *uint64_t v12 = 0;
    v12[1] = 0;
    void v12[2] = 0;
  }
  while (v12 != v11);
  int v15 = *a1;
  uint64_t v12 = a1[1];
  *a1 = (void **)v8;
  a1[1] = (void **)v10;
  a1[2] = (void **)v9;
  if (v12 != v15)
  {
    unint64_t v16 = v12;
    do
    {
      uint64_t v19 = (char *)*(v16 - 3);
      v16 -= 3;
      uint64_t v18 = v19;
      if (v19)
      {
        long long v20 = (char *)*(v12 - 2);
        int v17 = v18;
        if (v20 != v18)
        {
          do
          {
            uint64_t v21 = (void *)*((void *)v20 - 9);
            if (v21)
            {
              *((void *)v20 - 8) = v21;
              operator delete(v21);
            }
            uint64_t v22 = (void *)*((void *)v20 - 12);
            if (v22)
            {
              *((void *)v20 - 11) = v22;
              operator delete(v22);
            }
            v20 -= 176;
          }
          while (v20 != v18);
          int v17 = *v16;
        }
        *(v12 - 2) = v18;
        operator delete(v17);
      }
      uint64_t v12 = v16;
    }
    while (v16 != v15);
    uint64_t v12 = v15;
  }
  if (v12) {
LABEL_28:
  }
    operator delete(v12);
  return v10;
}

uint64_t sub_DC97D0(uint64_t *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v10 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(176 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v26 = (uint64_t)&v11[176 * v5];
  uint64_t v27 = &v11[176 * v10];
  sub_DC9A50((uint64_t)(a1 + 2), v26, a2, a3, a4);
  uint64_t v12 = v26 + 176;
  long long v13 = (char *)*a1;
  long long v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v26;
    a1[1] = v12;
    a1[2] = (uint64_t)v27;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v26 + v15;
      int v17 = &v14[v15];
      long long v18 = *(_OWORD *)&v14[v15 - 176];
      long long v19 = *(_OWORD *)&v14[v15 - 160];
      *(_DWORD *)(v16 - 144) = *(_DWORD *)&v14[v15 - 144];
      *(_OWORD *)(v16 - 176) = v18;
      *(_OWORD *)(v16 - 160) = v19;
      long long v20 = *(_OWORD *)&v14[v15 - 136];
      uint64_t v21 = *(void *)&v14[v15 - 104];
      *(_OWORD *)(v16 - 120) = *(_OWORD *)&v14[v15 - 120];
      *(_OWORD *)(v16 - 136) = v20;
      *(void *)(v16 - 104) = v21;
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 80) = 0;
      *(_OWORD *)(v16 - 96) = *(_OWORD *)&v14[v15 - 96];
      *(void *)(v16 - 80) = *(void *)&v14[v15 - 80];
      *((void *)v17 - 12) = 0;
      *((void *)v17 - 11) = 0;
      *((void *)v17 - 10) = 0;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 56) = 0;
      *(_OWORD *)(v16 - 72) = *(_OWORD *)&v14[v15 - 72];
      *(void *)(v16 - 56) = *(void *)&v14[v15 - 56];
      *((void *)v17 - 9) = 0;
      *((void *)v17 - 8) = 0;
      *((void *)v17 - 7) = 0;
      *(_OWORD *)(v16 - 48) = *(_OWORD *)&v14[v15 - 48];
      *(_DWORD *)(v16 - 24) = *(_DWORD *)&v14[v15 - 24];
      if (*(_DWORD *)&v14[v15 - 24] < 2u) {
        *(void *)(v16 - 32) = *((void *)v17 - 4);
      }
      *(_OWORD *)(v26 + v15 - 16) = *(_OWORD *)&v14[v15 - 16];
      v15 -= 176;
    }
    while (&v14[v15] != v13);
    uint64_t v22 = (char *)*a1;
    long long v14 = (char *)a1[1];
    *a1 = v26 + v15;
    a1[1] = v12;
    a1[2] = (uint64_t)v27;
    if (v14 != v22)
    {
      do
      {
        long long v23 = (void *)*((void *)v14 - 9);
        if (v23)
        {
          *((void *)v14 - 8) = v23;
          operator delete(v23);
        }
        uint64_t v24 = (void *)*((void *)v14 - 12);
        if (v24)
        {
          *((void *)v14 - 11) = v24;
          operator delete(v24);
        }
        v14 -= 176;
      }
      while (v14 != v22);
      long long v14 = v22;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v26 + 176;
}

void sub_DC9A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DC95A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DC9A50(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t *a5)
{
  int v5 = *a3;
  int v6 = *a4;
  uint64_t v7 = *a5;
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)unint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = 10 * v6;
  *(_DWORD *)(a2 + 8) = -1;
  *(void *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 24) = 0x7FFFFFFF;
  *(void *)(a2 + 28) = 0x7FFFFFFF7FFFFFFFLL;
  sub_3B1DC8(a2 + 40, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_DC9B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DC9B68(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_2E00();
  }
  unint64_t v4 = a1[1];
  uint64_t v5 = 136 * a2;
  int v6 = (char *)operator new(136 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9];
    unint64_t v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 136];
    long long v13 = *(_OWORD *)&v4[v9 - 120];
    *((void *)v10 - 13) = *(void *)&v4[v9 - 104];
    *(_OWORD *)(v10 - 120) = v13;
    *(_OWORD *)(v10 - 136) = v12;
    *((_OWORD *)v10 - 6) = *(_OWORD *)&v4[v9 - 96];
    *((void *)v10 - 10) = *(void *)&v4[v9 - 80];
    *((void *)v11 - 12) = 0;
    *((void *)v11 - 11) = 0;
    *((void *)v11 - 10) = 0;
    *(_OWORD *)(v10 - 72) = *(_OWORD *)&v4[v9 - 72];
    *((void *)v10 - 7) = *(void *)&v4[v9 - 56];
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 8) = 0;
    *((void *)v11 - 7) = 0;
    *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
    unsigned int v14 = *(_DWORD *)&v4[v9 - 24];
    *((_DWORD *)v10 - 6) = v14;
    if (v14 < 2) {
      *((void *)v10 - 4) = *((void *)v11 - 4);
    }
    *(_OWORD *)&v8[v9 - 16] = *(_OWORD *)&v4[v9 - 16];
    v9 -= 136;
  }
  while (&v4[v9] != v2);
  int v15 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v15)
  {
    do
    {
      unint64_t v16 = (void *)*((void *)v2 - 9);
      if (v16)
      {
        *((void *)v2 - 8) = v16;
        operator delete(v16);
      }
      int v17 = (void *)*((void *)v2 - 12);
      if (v17)
      {
        *((void *)v2 - 11) = v17;
        operator delete(v17);
      }
      v2 -= 136;
    }
    while (v2 != v15);
    uint64_t v2 = v15;
  }
  if (v2)
  {
LABEL_18:
    operator delete(v2);
  }
}

uint64_t sub_DC9D18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    unint64_t v4 = *(void **)(i - 72);
    if (v4)
    {
      *(void *)(i - 64) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 96);
    if (v5)
    {
      *(void *)(i - 88) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_DC9D90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) / 136;
  uint64_t v8 = *a1 + 136 * v7;
  unint64_t v9 = a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v6) >> 3) + 1;
    if (v15 > 0x1E1E1E1E1E1E1E1) {
      sub_2E00();
    }
    unint64_t v16 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v9 - v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v17 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v48 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x1E1E1E1E1E1E1E1) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(136 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    long long __p = v18;
    char v45 = &v18[136 * v7];
    uint64_t v46 = v45;
    char v47 = &v18[136 * v17];
    sub_DCA1CC((uint64_t)&__p, a3);
    uint64_t v8 = sub_DCA468(a1, &__p, v8);
    long long v39 = v45;
    while (1)
    {
      unint64_t v40 = v46;
      if (v46 == v39) {
        break;
      }
      v46 -= 136;
      char v41 = (void *)*((void *)v40 - 9);
      if (v41)
      {
        *((void *)v40 - 8) = v41;
        operator delete(v41);
      }
      uint64_t v42 = (void *)*((void *)v40 - 12);
      if (v42)
      {
        *((void *)v40 - 11) = v42;
        operator delete(v42);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (v8 == v5)
  {
    long long v36 = *(_OWORD *)a3;
    long long v37 = *(_OWORD *)(a3 + 16);
    *(void *)(v8 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v8 = v36;
    *(_OWORD *)(v8 + 16) = v37;
    uint64_t v38 = v6 + 136 * v7;
    *(void *)(v38 + 48) = 0;
    *(void *)(v38 + 56) = 0;
    *(void *)(v38 + 40) = 0;
    *(_OWORD *)(v38 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v38 + 56) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(v38 + 64) = 0;
    *(void *)(v38 + 72) = 0;
    *(void *)(v38 + 80) = 0;
    *(_OWORD *)(v38 + 64) = *(_OWORD *)(a3 + 64);
    *(void *)(v38 + 80) = *(void *)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(v38 + 88) = *(_OWORD *)(a3 + 88);
    *(_DWORD *)(v38 + 112) = *(_DWORD *)(a3 + 112);
    if (*(_DWORD *)(a3 + 112) <= 1u) {
      *(void *)(v38 + 104) = *(void *)(a3 + 104);
    }
    *(_OWORD *)(v6 + 136 * v7 + 120) = *(_OWORD *)(a3 + 120);
    a1[1] = v8 + 136;
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v5 >= 0x88)
    {
      unint64_t v11 = (void *)(136 * v7 + 8 * ((uint64_t)(v5 - v8 - 136) >> 3) + v6 + 104);
      unint64_t v12 = v5 - 136;
      uint64_t v10 = a1[1];
      do
      {
        long long v13 = *(_OWORD *)(v11 - 11);
        uint64_t v14 = *(v11 - 9);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(v11 - 13);
        *(_OWORD *)(v10 + 16) = v13;
        *(void *)(v10 + 32) = v14;
        *(void *)(v10 + 40) = 0;
        *(void *)(v10 + 48) = 0;
        *(void *)(v10 + 56) = 0;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v12 + 40);
        *(void *)(v10 + 56) = *(void *)(v12 + 56);
        *(void *)(v12 + 40) = 0;
        *(void *)(v12 + 48) = 0;
        *(void *)(v12 + 56) = 0;
        *(void *)(v10 + 64) = 0;
        *(void *)(v10 + 72) = 0;
        *(void *)(v10 + 80) = 0;
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v12 + 64);
        *(void *)(v10 + 80) = *(void *)(v12 + 80);
        *(void *)(v12 + 64) = 0;
        *(void *)(v12 + 72) = 0;
        *(void *)(v12 + 80) = 0;
        *(_OWORD *)(v10 + 88) = *(_OWORD *)(v12 + 88);
        *(_DWORD *)(v10 + 112) = *(_DWORD *)(v12 + 112);
        if (*(_DWORD *)(v12 + 112) < 2u) {
          *(void *)(v10 + 104) = *v11;
        }
        *(_OWORD *)(v10 + 120) = *(_OWORD *)(v12 + 120);
        v12 += 136;
        v10 += 136;
        v11 += 17;
      }
      while (v12 < v5);
    }
    a1[1] = v10;
    sub_DCA62C((uint64_t)&__p, v8, v5 - 136, v5);
    long long v19 = *(_OWORD *)a3;
    long long v20 = *(_OWORD *)(a3 + 16);
    *(void *)(v8 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v8 = v19;
    *(_OWORD *)(v8 + 16) = v20;
    uint64_t v21 = v6 + 136 * v7;
    uint64_t v24 = *(void **)(v21 + 40);
    long long v23 = (void *)(v21 + 40);
    uint64_t v22 = v24;
    if (v24)
    {
      *(void *)(v6 + 136 * v7 + 48) = v22;
      operator delete(v22);
      void *v23 = 0;
      v23[1] = 0;
      void v23[2] = 0;
    }
    *(_OWORD *)long long v23 = *(_OWORD *)(a3 + 40);
    uint64_t v25 = v6 + 136 * v7;
    *(void *)(v25 + 56) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    uint64_t v28 = *(void **)(v25 + 64);
    uint64_t v27 = (void *)(v25 + 64);
    uint64_t v26 = v28;
    if (v28)
    {
      *(void *)(v6 + 136 * v7 + 72) = v26;
      operator delete(v26);
      *uint64_t v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
    }
    *(_OWORD *)uint64_t v27 = *(_OWORD *)(a3 + 64);
    uint64_t v29 = v6 + 136 * v7;
    *(void *)(v29 + 80) = *(void *)(a3 + 80);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(v29 + 88) = *(_OWORD *)(a3 + 88);
    if (v8 != a3)
    {
      uint64_t v30 = (void *)(v29 + 104);
      uint64_t v31 = v6 + 136 * v7;
      unsigned int v34 = *(_DWORD *)(v31 + 112);
      uint64_t v32 = (_DWORD *)(v31 + 112);
      unsigned int v33 = v34;
      int v35 = *(_DWORD *)(a3 + 112);
      if (v34 == v35)
      {
        if (v33 <= 1) {
          *uint64_t v30 = *(void *)(a3 + 104);
        }
      }
      else
      {
        if (v35 == 1)
        {
          *uint64_t v30 = *(void *)(a3 + 104);
          int v35 = *(_DWORD *)(a3 + 112);
        }
        else if (!v35)
        {
          *uint64_t v30 = *(void *)(a3 + 104);
        }
        _DWORD *v32 = v35;
      }
    }
    *(_OWORD *)(v6 + 136 * v7 + 120) = *(_OWORD *)(a3 + 120);
  }
  return v8;
}

void sub_DCA1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DC9D18((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_DCA1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v11 = 0xE1E1E1E1E1E1E1E2 * ((v4 - (uint64_t)v5) >> 3);
      if ((void *)v4 == v5) {
        unint64_t v11 = 1;
      }
      if (v11 >= 0x1E1E1E1E1E1E1E2) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 136 * v11;
      uint64_t v14 = (char *)operator new(136 * v11);
      unint64_t v15 = &v14[136 * v12];
      unint64_t v16 = &v14[v13];
      if (v4 == v6)
      {
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
      }
      else
      {
        unint64_t v17 = &v15[v4 - v6];
        uint64_t v18 = (uint64_t)&v14[136 * v12 + 104];
        unint64_t v19 = v6 + 104;
        do
        {
          long long v21 = *(_OWORD *)(v19 - 104);
          long long v22 = *(_OWORD *)(v19 - 88);
          *(void *)(v18 - 72) = *(void *)(v19 - 72);
          *(_OWORD *)(v18 - 88) = v22;
          *(_OWORD *)(v18 - 104) = v21;
          *(_OWORD *)(v18 - 64) = *(_OWORD *)(v19 - 64);
          *(void *)(v18 - 48) = *(void *)(v19 - 48);
          *(void *)(v19 - 64) = 0;
          *(void *)(v19 - 56) = 0;
          *(void *)(v19 - 48) = 0;
          *(_OWORD *)(v18 - 40) = *(_OWORD *)(v19 - 40);
          *(void *)(v18 - 24) = *(void *)(v19 - 24);
          *(void *)(v19 - 40) = 0;
          *(void *)(v19 - 32) = 0;
          *(void *)(v19 - 24) = 0;
          *(_OWORD *)(v18 - 16) = *(_OWORD *)(v19 - 16);
          unsigned int v23 = *(_DWORD *)(v19 + 8);
          *(_DWORD *)(v18 + 8) = v23;
          if (v23 < 2) {
            *(void *)uint64_t v18 = *(void *)v19;
          }
          uint64_t v20 = v18 - 104;
          *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
          v18 += 136;
          v19 += 136;
        }
        while ((char *)(v20 + 136) != v17);
        unint64_t v5 = *(void **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
        while (v25 != v24)
        {
          uint64_t v26 = *(void **)(v25 - 72);
          if (v26)
          {
            *(void *)(v25 - 64) = v26;
            operator delete(v26);
          }
          uint64_t v27 = *(void **)(v25 - 96);
          if (v27)
          {
            *(void *)(v25 - 88) = v27;
            operator delete(v27);
          }
          v25 -= 136;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -136 * (v8 >> 1);
      sub_DCA79C((uint64_t)&v31, *(void *)(a1 + 8), v4, v6 - 136 * (v8 >> 1));
      uint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  long long v28 = *(_OWORD *)(a2 + 16);
  uint64_t v29 = *(void *)(a2 + 32);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v28;
  *(void *)(v4 + 32) = v29;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(v4 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a2 + 112);
  if (*(_DWORD *)(a2 + 112) <= 1u) {
    *(void *)(v4 + 104) = *(void *)(a2 + 104);
  }
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(v4 + 120) = result;
  *(void *)(a1 + 16) += 136;
  return result;
}

uint64_t sub_DCA468(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 136);
      uint64_t v11 = *(void *)(a3 + v7 - 104);
      *(_OWORD *)(v8 - 120) = *(_OWORD *)(a3 + v7 - 120);
      *(_OWORD *)(v8 - 136) = v10;
      *(void *)(v8 - 104) = v11;
      *(void *)(v8 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(_OWORD *)(v8 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(void *)(v8 - 80) = *(void *)(a3 + v7 - 80);
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 + v7 - 72);
      *(void *)(v8 - 56) = *(void *)(a3 + v7 - 56);
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(a3 + v7 - 24);
      if (*(_DWORD *)(a3 + v7 - 24) < 2u) {
        *(void *)(v8 - 32) = *(void *)(v9 - 32);
      }
      *(_OWORD *)(result + v7 - 16) = *(_OWORD *)(a3 + v7 - 16);
      v7 -= 136;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v12 = a1[1];
  uint64_t v13 = a2[2];
  if (v12 != a3)
  {
    uint64_t v14 = a3 + 104;
    do
    {
      long long v16 = *(_OWORD *)(v14 - 88);
      uint64_t v17 = *(void *)(v14 - 72);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(v14 - 104);
      *(_OWORD *)(v13 + 16) = v16;
      *(void *)(v13 + 32) = v17;
      *(void *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 - 64);
      *(void *)(v13 + 56) = *(void *)(v14 - 48);
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v13 + 64) = 0;
      *(void *)(v13 + 72) = 0;
      *(void *)(v13 + 80) = 0;
      *(_OWORD *)(v13 + 64) = *(_OWORD *)(v14 - 40);
      *(void *)(v13 + 80) = *(void *)(v14 - 24);
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 - 16);
      *(_DWORD *)(v13 + 112) = *(_DWORD *)(v14 + 8);
      if (*(_DWORD *)(v14 + 8) < 2u) {
        *(void *)(v13 + 104) = *(void *)v14;
      }
      uint64_t v15 = v14 - 104;
      *(_OWORD *)(v13 + 120) = *(_OWORD *)(v14 + 16);
      v13 += 136;
      v14 += 136;
    }
    while (v15 + 136 != v12);
    uint64_t v6 = a2[1];
  }
  a2[2] = v13;
  uint64_t v18 = *a1;
  *a1 = v6;
  a2[1] = v18;
  uint64_t v19 = a1[1];
  a1[1] = a2[2];
  a2[2] = v19;
  uint64_t v20 = a1[2];
  a1[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return result;
}

uint64_t sub_DCA62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      uint64_t v10 = a3 + v7;
      long long v11 = *(_OWORD *)(a3 + v7 - 136);
      long long v12 = *(_OWORD *)(a3 + v7 - 120);
      *(void *)(v9 - 104) = *(void *)(a3 + v7 - 104);
      *(_OWORD *)(v9 - 120) = v12;
      *(_OWORD *)(v9 - 136) = v11;
      uint64_t v14 = (void **)(a4 + v7 - 96);
      uint64_t v13 = *v14;
      if (*v14)
      {
        *(void *)(v9 - 88) = v13;
        operator delete(v13);
        *uint64_t v14 = 0;
        *(void *)(a4 + v7 - 88) = 0;
        *(void *)(a4 + v7 - 80) = 0;
      }
      uint64_t v15 = (void *)(v10 - 96);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v10 - 96);
      *(void *)(v9 - 80) = *(void *)(v10 - 80);
      *uint64_t v15 = 0;
      v15[1] = 0;
      uint64_t v15[2] = 0;
      uint64_t v17 = (void *)(v9 - 72);
      long long v16 = *(void **)(v9 - 72);
      if (v16)
      {
        *(void *)(a4 + v7 - 64) = v16;
        operator delete(v16);
        *uint64_t v17 = 0;
        *(void *)(v9 - 64) = 0;
        *(void *)(v9 - 56) = 0;
      }
      uint64_t v18 = (void *)(v10 - 72);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)(v10 - 72);
      uint64_t v19 = a3 + v7;
      uint64_t v20 = a4 + v7;
      *(void *)(v20 - 56) = *(void *)(a3 + v7 - 56);
      *uint64_t v18 = 0;
      v18[1] = 0;
      void v18[2] = 0;
      *(_OWORD *)(v20 - 48) = *(_OWORD *)(a3 + v7 - 48);
      if (v10 != v9)
      {
        unsigned int v21 = *(_DWORD *)(v20 - 24);
        int v8 = *(_DWORD *)(v19 - 24);
        if (v21 == v8)
        {
          if (v21 <= 1) {
            *(void *)(v20 - 32) = *(void *)(v19 - 32);
          }
        }
        else
        {
          if (v8 == 1)
          {
            *(void *)(v20 - 32) = *(void *)(v19 - 32);
            int v8 = *(_DWORD *)(v19 - 24);
          }
          else if (!v8)
          {
            *(void *)(v20 - 32) = *(void *)(v19 - 32);
          }
          *(_DWORD *)(v20 - 24) = v8;
        }
      }
      *(_OWORD *)(v20 - 16) = *(_OWORD *)(v19 - 16);
      v7 -= 136;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_DCA79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v9 = a4 + v7;
    uint64_t v10 = a2 + v7;
    long long v11 = *(_OWORD *)(a2 + v7);
    long long v12 = *(_OWORD *)(a2 + v7 + 16);
    *(void *)(v9 + 32) = *(void *)(a2 + v7 + 32);
    *(_OWORD *)uint64_t v9 = v11;
    *(_OWORD *)(v9 + 16) = v12;
    uint64_t v14 = (void **)(a4 + v7 + 40);
    uint64_t v13 = *v14;
    if (*v14)
    {
      *(void *)(v9 + 48) = v13;
      operator delete(v13);
      *uint64_t v14 = 0;
      *(void *)(a4 + v7 + 48) = 0;
      *(void *)(a4 + v7 + 56) = 0;
    }
    *(_OWORD *)uint64_t v14 = *(_OWORD *)(v10 + 40);
    *(void *)(v9 + 56) = *(void *)(v10 + 56);
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 56) = 0;
    long long v16 = (void *)(v9 + 64);
    uint64_t v15 = *(void **)(v9 + 64);
    if (v15)
    {
      *(void *)(a4 + v7 + 72) = v15;
      operator delete(v15);
      *long long v16 = 0;
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
    }
    *(_OWORD *)long long v16 = *(_OWORD *)(v10 + 64);
    uint64_t v17 = a4 + v7;
    *(void *)(v17 + 80) = *(void *)(v10 + 80);
    *(void *)(v10 + 64) = 0;
    *(void *)(v10 + 72) = 0;
    *(void *)(v10 + 80) = 0;
    *(_OWORD *)(v17 + 88) = *(_OWORD *)(v10 + 88);
    if (v9 != v10)
    {
      uint64_t v18 = a2 + v7;
      unsigned int v19 = *(_DWORD *)(v17 + 112);
      int v8 = *(_DWORD *)(a2 + v7 + 112);
      if (v19 == v8)
      {
        if (v19 <= 1) {
          *(void *)(v17 + 104) = *(void *)(v18 + 104);
        }
      }
      else
      {
        if (v8 == 1)
        {
          *(void *)(v17 + 104) = *(void *)(v18 + 104);
          int v8 = *(_DWORD *)(v18 + 112);
        }
        else if (!v8)
        {
          *(void *)(v17 + 104) = *(void *)(v18 + 104);
        }
        *(_DWORD *)(v17 + 112) = v8;
      }
    }
    *(_OWORD *)(v17 + 120) = *(_OWORD *)(v10 + 120);
    v7 += 136;
  }
  while (v10 + 136 != v6);
  return v6;
}

char *sub_DCA904(uint64_t a1, char *__src, char *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v6[-*(void *)a1 + 1];
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = __src - v9;
    unint64_t v12 = v7 - (void)v9;
    if (2 * v12 > v10) {
      uint64_t v10 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)operator new(v13);
      uint64_t v15 = &v14[v11];
      long long v16 = &v14[v13];
      if (v11 != v13)
      {
LABEL_30:
        *uint64_t v15 = *a3;
        uint64_t v20 = v15;
        if (v9 != v4)
        {
          uint64_t v21 = v4 - v9;
          long long v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v9) < 0x20) {
            goto LABEL_46;
          }
          long long v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v15) < 0x20) {
            goto LABEL_46;
          }
          long long v22 = &v4[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          uint64_t v20 = &v15[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          unsigned int v23 = v15 - 16;
          uint64_t v24 = v4 - 16;
          unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)unsigned int v23 = v26;
            v23 -= 32;
            v24 -= 32;
            v25 -= 32;
          }
          while (v25);
          if (v21 != (v21 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_46:
            do
            {
              char v27 = *--v22;
              *--uint64_t v20 = v27;
            }
            while (v22 != v9);
          }
        }
        long long v28 = *(unsigned char **)(a1 + 8);
        uint64_t v29 = v28 - v4;
        if (v28 != v4)
        {
          memmove(v15 + 1, v4, v28 - v4);
          uint64_t v9 = *(char **)a1;
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = &v15[v29 + 1];
        *(void *)(a1 + 16) = v16;
        if (v9) {
          operator delete(v9);
        }
        return v15;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = (char *)(__src - v9);
      long long v16 = 0;
      if (v11) {
        goto LABEL_30;
      }
    }
    if (v11 < 1)
    {
      if ((unint64_t)(2 * v11) <= 1) {
        size_t v18 = 1;
      }
      else {
        size_t v18 = 2 * v11;
      }
      unsigned int v19 = (char *)operator new(v18);
      uint64_t v15 = &v19[v18 >> 2];
      long long v16 = &v19[v18];
      if (v14)
      {
        operator delete(v14);
        uint64_t v9 = *(char **)a1;
      }
    }
    else
    {
      if (v11 + 1 >= 0) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = v11 + 2;
      }
      v15 -= v17 >> 1;
    }
    goto LABEL_30;
  }
  if (__src != v6)
  {
    int v8 = __src + 1;
    if (v6)
    {
      *uint64_t v6 = *(v6 - 1);
      *(void *)(a1 + 8) = v6 + 1;
      if (v6 == v8) {
        goto LABEL_24;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      if (__src == (char *)-1)
      {
LABEL_24:
        char *v4 = *a3;
        return v4;
      }
    }
    memmove(__src + 1, __src, v6 - v8);
    goto LABEL_24;
  }
  *long long __src = *a3;
  *(void *)(a1 + 8) = __src + 1;
  return v4;
}

void sub_DCAB54(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_DCAB6C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unsigned int v34 = (char *)operator new(8 * v31);
        int v35 = &v34[8 * v32];
        long long v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              char v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    char v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unsigned int v34 = (char *)operator new(8 * v42);
        int v35 = &v34[8 * v43];
        long long v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            long double v82 = &v34[8 * v43];
            char v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              char v47 = &v35[v84];
              v7 += v84;
              char v85 = (long long *)(v41 + 3);
              int v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *int v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            char v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)char v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  long long v26 = operator new(0x1000uLL);
  char v27 = &v25[8 * v21];
  long long v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      char v49 = (char *)operator new(8 * v48);
      char v27 = &v49[8 * (v48 >> 2)];
      long long v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)char v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)char v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          BOOL v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          char v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            char v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            char v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            char v65 = &v27[v68];
            char v69 = (long long *)(v27 + 16);
            uint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)uint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          long long v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          char v57 = &v29[8 * (v56 >> 1)];
          char v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        char v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      char v51 = v53 - 8;
      char v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)char v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  char v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_DCB0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_DCB0F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_DCB10C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_DCB124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DCB13C(char *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(24 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v11 = *a2;
        if (*((char *)*a2 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v10 = *v11;
          *((void *)result + 2) = *((void *)v11 + 2);
          *(_OWORD *)uint64_t result = v10;
        }
        ++a2;
        v9 += 24;
      }
      while (a2 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_DCB220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_DCB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

int *sub_DCB270(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            *uint64_t v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                *uint64_t v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              *uint64_t v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              *uint64_t v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          uint64_t v76 = v12 + 1;
          char v77 = (int *)v12[1];
          uint64_t v78 = v12 + 2;
          int v79 = v12[2];
          long long v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              *uint64_t v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                void v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  *uint64_t v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            *uint64_t v78 = (int)v77;
            uint64_t v81 = v12;
            long double v82 = v12 + 1;
            uint64_t result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v81 = v12;
            long double v82 = v12 + 2;
            uint64_t result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              *uint64_t v12 = (int)v77;
              v12[1] = (int)v80;
              uint64_t v81 = v12 + 1;
              long double v82 = v12 + 2;
              uint64_t result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *uint64_t v81 = v79;
          *long double v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_97D790(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)sub_97D8CC((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    int64_t v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *int64_t v16 = v17;
          goto LABEL_32;
        }
        *int64_t v16 = v20;
        *uint64_t v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          *uint64_t v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      *uint64_t v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *int64_t v16 = *v12;
      *uint64_t v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        unint64_t v63 = v12 + 1;
        do
        {
          uint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        uint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          *uint64_t v12 = v67;
          int *v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        int *v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *int64_t v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            *uint64_t v12 = *v16;
            *int64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          *uint64_t v12 = v18;
          *int64_t v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *int64_t v16 = v25;
        }
        else
        {
          *uint64_t v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      long long v26 = &v12[v15];
      int v29 = *(v26 - 1);
      char v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *char v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *char v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *char v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *char v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      int v35 = &v12[v15];
      int v38 = v35[1];
      long long v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *long long v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            void v12[2] = *v36;
            *long long v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          void v12[2] = v37;
          *long long v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *long long v36 = v42;
        }
        else
        {
          void v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *int64_t v16 = v45;
        *long long v36 = v43;
        long long v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          *char v27 = v45;
          *long long v36 = v44;
LABEL_55:
          int v47 = *v12;
          *uint64_t v12 = v43;
          *int64_t v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        *uint64_t v12 = v45;
        *int64_t v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      *char v27 = v43;
      *int64_t v16 = v44;
      char v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      *uint64_t v12 = v44;
      *int64_t v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      uint64_t v50 = &v12[v48];
      char v51 = a2;
      if (v48 == 1)
      {
        char v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        unint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      uint64_t v55 = &v12[v48];
      unint64_t v56 = (int *)v51;
      do
      {
        int *v55 = v54;
        int *v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      unint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      int *v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_DCBA58(v12, v59);
      uint64_t v12 = v59 + 1;
      uint64_t result = (int *)sub_DCBA58(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (int *)sub_DCB270(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v59 + 1;
      }
    }
  }
  uint64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      uint64_t v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        uint64_t v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              long long v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          long long v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          *long long v88 = v89;
        }
        uint64_t v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      uint64_t v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)uint64_t v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)uint64_t v83 = v95;
      }
      uint64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL sub_DCBA58(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      int64_t v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        *int v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *int64_t v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *int64_t v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_97D790(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        int *v4 = v5;
        unint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        unint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      int *v7 = v3;
      int *v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        unint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

void sub_DCBD84(char **a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 6) {
    return;
  }
  if (a2 >> 58) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  unint64_t v5 = a2 << 6;
  int v6 = (char *)operator new(a2 << 6);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 64;
    uint64_t v9 = sub_DCBECC(v9 - 64, v4);
  }
  while ((char *)v4 != v2);
  int v10 = *a1;
  unint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 64;
      sub_166EE50(v2);
    }
    while (v2 != v10);
    unint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_DCBE78(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_166EE50(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_DCBECC(uint64_t a1, uint64_t a2)
{
  sub_166ED40(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11C7674(a1, a2);
    }
    else {
      sub_166FA30(a1, a2);
    }
  }
  return a1;
}

uint64_t *sub_DCBF6C(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      sub_166ED40((uint64_t)v12, 0, 0);
      sub_1880FAC(v12, v9);
      sub_DCBECC((uint64_t)v11, (uint64_t)v12);
      sub_166EE50(v12);
      a3 = sub_DCC050(a2, (uint64_t)a3, (uint64_t)v11) + 64;
      sub_166EE50(v11);
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DCC03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_166EE50(va);
  _Unwind_Resume(a1);
}

char *sub_DCC050(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    int v10 = (char *)*a1;
    unint64_t v11 = ((uint64_t)(v6 - *a1) >> 6) + 1;
    if (v11 >> 58) {
      sub_2E00();
    }
    uint64_t v12 = v7 - (void)v10;
    if (v12 >> 5 > v11) {
      unint64_t v11 = v12 >> 5;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v30 = a1 + 2;
    if (v13)
    {
      if (v13 >> 58) {
        sub_188D718();
      }
      unint64_t v14 = (char *)operator new(v13 << 6);
    }
    else
    {
      unint64_t v14 = 0;
    }
    int v26 = v14;
    uint64_t v27 = &v14[64 * ((v4 - v10) >> 6)];
    uint64_t v28 = v27;
    int v29 = &v14[64 * v13];
    sub_DCC3C0((uint64_t)&v26, a3);
    int v15 = v27;
    uint64_t v16 = *a1;
    uint64_t v17 = (uint64_t)v27;
    if ((char *)*a1 != v4)
    {
      uint64_t v18 = (uint64_t)v4;
      uint64_t v17 = (uint64_t)v27;
      do
      {
        v18 -= 64;
        uint64_t v17 = sub_DCBECC(v17 - 64, v18);
      }
      while (v18 != v16);
    }
    uint64_t v27 = (char *)v17;
    int v19 = (char *)a1[1];
    uint64_t v20 = (uint64_t)v28;
    if (v19 != v4)
    {
      do
      {
        sub_DCBECC(v20, (uint64_t)v4);
        v4 += 64;
        v20 += 64;
      }
      while (v4 != v19);
      uint64_t v17 = (uint64_t)v27;
      uint64_t v4 = (char *)a1[1];
    }
    int v21 = (char *)*a1;
    *a1 = v17;
    a1[1] = v20;
    int v22 = (char *)a1[2];
    a1[2] = (uint64_t)v29;
    uint64_t v28 = v4;
    int v29 = v22;
    int v26 = v21;
    uint64_t v27 = v21;
    if (v4 != v21)
    {
      do
      {
        uint64_t v28 = v4 - 64;
        sub_166EE50(v4 - 64);
        uint64_t v4 = v28;
      }
      while (v28 != v21);
      uint64_t v4 = v26;
    }
    if (v4) {
      operator delete(v4);
    }
    return v15;
  }
  else if (a2 == v6)
  {
    sub_DCBECC(a2, a3);
    a1[1] = (uint64_t)(v4 + 64);
  }
  else
  {
    sub_DCC2A4((uint64_t)a1, a2, v6, a2 + 64);
    if (v4 == (char *)a3)
    {
      return (char *)a3;
    }
    else
    {
      uint64_t v8 = *((void *)v4 + 1);
      if ((v8 & 2) != 0)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          uint64_t v9 = (void *)*v9;
        }
      }
      uint64_t v24 = *(void *)(a3 + 8);
      if ((v24 & 2) != 0)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          int v25 = (void *)*v25;
        }
      }
      if (v9 == v25) {
        sub_11C7674((uint64_t)v4, a3);
      }
      else {
        sub_166FA30((uint64_t)v4, a3);
      }
    }
  }
  return v4;
}

void sub_DCC290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_DCBE78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DCC2A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    *(void *)(a1 + 8) = v6;
    if (v6 == a4) {
      return;
    }
  }
  else
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      uint64_t v12 = sub_DCBECC(v11, v10);
      v10 += 64;
      uint64_t v11 = v12 + 64;
    }
    while (v10 < a3);
    *(void *)(a1 + 8) = v11;
    if (v6 == a4) {
      return;
    }
  }
  uint64_t v13 = 0;
  do
  {
    if (v8 != v6)
    {
      uint64_t v14 = *(void *)(v6 + v13 - 56);
      if ((v14 & 2) != 0)
      {
        int v15 = 0;
      }
      else
      {
        int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          int v15 = (void *)*v15;
        }
      }
      uint64_t v16 = *(void *)(v8 + v13 - 56);
      if ((v16 & 2) != 0)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v17 = (void *)*v17;
        }
      }
      uint64_t v18 = v8 + v13 - 64;
      uint64_t v19 = v6 + v13 - 64;
      if (v15 == v17) {
        sub_11C7674(v19, v18);
      }
      else {
        sub_166FA30(v19, v18);
      }
    }
    v13 -= 64;
  }
  while (-64 * (v7 >> 6) != v13);
}

uint64_t sub_DCC3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_36;
  }
  uint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    if ((void *)v4 == v6) {
      unint64_t v17 = 1;
    }
    else {
      unint64_t v17 = (v4 - (uint64_t)v6) >> 5;
    }
    if (v17 >> 58) {
      sub_188D718();
    }
    unint64_t v18 = v17 << 6;
    uint64_t v19 = (char *)operator new(v17 << 6);
    uint64_t v20 = v19;
    int v21 = &v19[64 * (v17 >> 2)];
    int v22 = &v19[v18];
    uint64_t v23 = v4 - v5;
    if (v4 == v5)
    {
      *(void *)a1 = v19;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v22;
      if (!v6) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v24 = &v21[v23 & 0xFFFFFFFFFFFFFFC0];
      uint64_t v25 = v23 >> 6 << 6;
      uint64_t v26 = (uint64_t)v21;
      do
      {
        uint64_t v26 = sub_DCBECC(v26, v5) + 64;
        v5 += 64;
        v25 -= 64;
      }
      while (v25);
      uint64_t v6 = *(void **)a1;
      uint64_t v27 = *(void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 16);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v24;
      for (*(void *)(a1 + 24) = v22; v28 != v27; uint64_t v28 = sub_166EE50(v28 - 64))
        ;
      if (!v6) {
        goto LABEL_32;
      }
    }
    operator delete(v6);
LABEL_32:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_36;
  }
  uint64_t v7 = (uint64_t)(v5 - *(void *)a1) >> 6;
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v29 = v5 - (v9 << 6);
  }
  else
  {
    uint64_t v11 = -64 * v9;
    do
    {
      if (v11)
      {
        uint64_t v12 = v5 + v11;
        uint64_t v13 = *(void *)(v5 + v11 + 8);
        if ((v13 & 2) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if (v13) {
            uint64_t v14 = (void *)*v14;
          }
        }
        uint64_t v15 = *(void *)(v5 + 8);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        if (v14 == v16) {
          sub_11C7674(v12, v5);
        }
        else {
          sub_166FA30(v12, v5);
        }
      }
      v5 += 64;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v29 = v5 + (v10 << 6);
  }
  *(void *)(a1 + 8) = v4 + (v10 << 6);
  *(void *)(a1 + 16) = v29;
  uint64_t v4 = v29;
LABEL_36:
  uint64_t result = sub_DCBECC(v4, a2);
  *(void *)(a1 + 16) += 64;
  return result;
}

uint64_t *sub_DCC590(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      sub_166ED40((uint64_t)v12, 0, 0);
      sub_1880FAC(v12, v9);
      sub_DCBECC((uint64_t)v11, (uint64_t)v12);
      sub_166EE50(v12);
      a3 = sub_DCC050(a2, (uint64_t)a3, (uint64_t)v11) + 64;
      sub_166EE50(v11);
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DCC660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_166EE50(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DCC674(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      sub_166ED40((uint64_t)v12, 0, 0);
      sub_1880FAC(v12, v9);
      sub_DCBECC((uint64_t)v11, (uint64_t)v12);
      sub_166EE50(v12);
      a3 = sub_DCC050(a2, (uint64_t)a3, (uint64_t)v11) + 64;
      sub_166EE50(v11);
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DCC744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_166EE50(va);
  _Unwind_Resume(a1);
}

void ***sub_DCC758(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (void **)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      int v10 = *((char *)*v6 + 23);
      BOOL v11 = v10 < 0;
      if (v10 < 0) {
        uint64_t v9 = (void *)**v6;
      }
      uint64_t v12 = *((unsigned __int8 *)*v6 + 23);
      if (v11) {
        uint64_t v12 = (*v6)[1];
      }
      v17[0] = v9;
      v17[1] = v12;
      sub_72B08((unint64_t)v17, &__p);
      uint64_t v13 = sub_8B3D0(a2, a3, &__p);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      a3 = v13 + 24;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DCC838(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (void **)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      int v10 = *((char *)*v6 + 23);
      BOOL v11 = v10 < 0;
      if (v10 < 0) {
        uint64_t v9 = (void *)**v6;
      }
      uint64_t v12 = *((unsigned __int8 *)*v6 + 23);
      if (v11) {
        uint64_t v12 = (*v6)[1];
      }
      v17[0] = v9;
      v17[1] = v12;
      sub_72B08((unint64_t)v17, &__p);
      uint64_t v13 = sub_8B3D0(a2, a3, &__p);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      a3 = v13 + 24;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DCC918(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = (void **)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t v9 = *v6;
      int v10 = *((char *)*v6 + 23);
      BOOL v11 = v10 < 0;
      if (v10 < 0) {
        uint64_t v9 = (void *)**v6;
      }
      uint64_t v12 = *((unsigned __int8 *)*v6 + 23);
      if (v11) {
        uint64_t v12 = (*v6)[1];
      }
      v17[0] = v9;
      v17[1] = v12;
      sub_72B08((unint64_t)v17, &__p);
      uint64_t v13 = sub_8B3D0(a2, a3, &__p);
      if (v16 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      a3 = v13 + 24;
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCC9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_DCC9F8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a1 != a2)
  {
    uint64_t v9 = a1;
    do
    {
      uint64_t v10 = *v9;
      if ((*(unsigned char *)(*v9 + 40) & 8) != 0)
      {
        BOOL v11 = (int *)nullsub_1(a5);
        if (*(void *)(v10 + 72)) {
          uint64_t v12 = *(uint64_t (****)())(v10 + 72);
        }
        else {
          uint64_t v12 = &off_25352D0;
        }
        sub_DC5598(v11, (uint64_t)v12, (uint64_t)&v15);
      }
      else
      {
        *(_OWORD *)&v17[4] = 0u;
        uint64_t v21 = 0;
        uint64_t v15 = 0x7FFFFFFFLL;
        int v16 = 0x7FFFFFFF;
        *(void *)unint64_t v17 = 0x7FFFFFFF7FFFFFFFLL;
        unint64_t v18 = 0x8000000080000000;
        *(_OWORD *)uint64_t v19 = 0u;
        memset(v20, 0, 36);
        *(void *)&v20[9] = 0x8000000080000000;
        v20[11] = 0x7FFFFFFF;
        uint64_t v22 = 0xFFFFFFFFLL;
        long long v23 = xmmword_20E8160;
      }
      uint64_t v13 = sub_DC9D90(a3, a4, (uint64_t)&v15);
      if (*(void *)&v20[2])
      {
        *(void *)&v20[4] = *(void *)&v20[2];
        operator delete(*(void **)&v20[2]);
      }
      if (v19[0])
      {
        v19[1] = v19[0];
        operator delete(v19[0]);
      }
      a4 = v13 + 136;
      ++v9;
    }
    while (v9 != a2);
  }
  return a3;
}

void sub_DCCB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_45E914((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ***sub_DCCB9C(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      unint64_t v9 = *(void *)(*(void *)v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v9 + 23) < 0)
      {
        sub_4200(__p, *(void **)v9, *(void *)(v9 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v14 = *(void *)(v9 + 16);
        *(_OWORD *)__n128 __p = v10;
      }
      uint64_t v11 = sub_8B3D0(a2, a3, (__n128 *)__p);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      a3 = v11 + 24;
      v6 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCCC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DCCC80(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      unint64_t v9 = *(void *)(*(void *)v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v9 + 23) < 0)
      {
        sub_4200(__p, *(void **)v9, *(void *)(v9 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v14 = *(void *)(v9 + 16);
        *(_OWORD *)__n128 __p = v10;
      }
      uint64_t v11 = sub_8B3D0(a2, a3, (__n128 *)__p);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      a3 = v11 + 24;
      v6 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCCD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DCCD64(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      unint64_t v9 = *(void *)(*(void *)v6 + 56) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v9 + 23) < 0)
      {
        sub_4200(__p, *(void **)v9, *(void *)(v9 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v14 = *(void *)(v9 + 16);
        *(_OWORD *)__n128 __p = v10;
      }
      uint64_t v11 = sub_8B3D0(a2, a3, (__n128 *)__p);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      a3 = v11 + 24;
      v6 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCCE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_DCCE48(uint64_t a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    do
    {
      unint64_t v9 = *(void *)(*(void *)v6 + 464) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v9 + 23) < 0)
      {
        sub_4200(__p, *(void **)v9, *(void *)(v9 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v14 = *(void *)(v9 + 16);
        *(_OWORD *)__n128 __p = v10;
      }
      uint64_t v11 = sub_8B3D0(a2, a3, (__n128 *)__p);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      a3 = v11 + 24;
      v6 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return a2;
}

void sub_DCCF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_DCCF2C()
{
  byte_25E77D7 = 1;
  word_25E77C0 = 65;
  byte_25E77EF = 1;
  unk_25E77D8 = 65;
  strcpy(&byte_25E7807, "\n\x1B\\toi=orth\\"");
  strcpy(byte_25E77F0, "\x1B\\toi=lhp\\"");
  byte_25E781F = 11;
  unk_25E7820 = operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_25E7828 = xmmword_20B9250;
  strcpy(unk_25E7820, "\x1B\\toi=x-sampa-internal\\"");
  byte_25E784F = 13;
  strcpy(byte_25E7838, "\x1B\\tn=address\\"");
  strcpy(&byte_25E7867, "\t\x1B\\tn=normal\\"");
  strcpy(byte_25E7850, "\x1B\\tn=nav\\"");
  byte_25E787F = 12;
  byte_25E7897 = 7;
  strcpy(byte_25E7880, "\x1B\\lang=");
  byte_25E78AF = 1;
  unk_25E7898 = 92;
  byte_25E78C7 = 4;
  strcpy(byte_25E78B0, "DEV:");
  byte_25E78DF = 8;
  strcpy(algn_25E78C8, "Continue");
  byte_25E78F7 = 11;
  strcpy((char *)&qword_25E78E0, "Start_Route");
  byte_25E790F = 14;
  strcpy((char *)&qword_25E78F8, "Continue_Route");
  byte_25E7927 = 12;
  strcpy((char *)&qword_25E7910, "Resume_Route");
  byte_25E793F = 18;
  strcpy((char *)&xmmword_25E7928, "Start_Route_U_Turn");
  byte_25E7957 = 7;
  strcpy((char *)&dword_25E7940, "_U_Turn");
  qword_25E7960 = 0x545F555F6574756FLL;
  unk_25E7968 = 0x1300000000000000;
  qword_25E7958 = *(void *)"Resume_Route";
  *(_DWORD *)((char *)&qword_25E7960 + 7) = 1852994900;
  HIDWORD(qword_25E7980) = 352321536;
  strcpy((char *)&qword_25E7970, "Continue_Route_U");
  *(_DWORD *)((char *)&qword_25E7980 + 1) = 1852994900;
  strcpy(&byte_25E799F, "\tRight_Turn");
  strcpy((char *)&qword_25E7988, "Left_Turn");
  strcpy(&byte_25E79B7, "\nLeft_Turn_At_End");
  byte_25E79CF = 16;
  byte_25E79E7 = 17;
  strcpy((char *)&xmmword_25E79D0, "Right_Turn_At_End");
  byte_25E79FF = 15;
  strcpy((char *)&qword_25E79E8, "Sharp_Left_Turn");
  byte_25E7A17 = 16;
  strcpy((char *)&xmmword_25E7A00, "Sharp_Right_Turn");
  byte_25E7A2F = 16;
  strcpy((char *)&xmmword_25E7A18, "Slight_Left_Turn");
  byte_25E7A47 = 17;
  strcpy((char *)&xmmword_25E7A30, "Slight_Right_Turn");
  strcpy(&byte_25E7A5F, "\tKeep_Right");
  strcpy((char *)&qword_25E7A48, "Keep_Left");
  strcpy(&byte_25E7A77, "\nU_Turn");
  byte_25E7A8F = 6;
  byte_25E7AA7 = 14;
  strcpy((char *)&qword_25E7A90, "Walking_U_Turn");
  byte_25E7ABF = 20;
  strcpy((char *)&xmmword_25E7AA8, "U_Turn_When_Possible");
  byte_25E7AD7 = 20;
  strcpy((char *)&xmmword_25E7AC0, "U_Turn_At_Roundabout");
  byte_25E7AEF = 11;
  strcpy((char *)&qword_25E7AD8, "Enter_Ferry");
  strcpy(&byte_25E7B07, "\nChange_Ferry");
  strcpy((char *)&qword_25E7AF0, "Exit_Ferry");
  byte_25E7B1F = 12;
  byte_25E7B37 = 21;
  strcpy((char *)&xmmword_25E7B20, "Enter_Railway_Shuttle");
  byte_25E7B4F = 20;
  strcpy((char *)&xmmword_25E7B38, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25E7B50, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25E7B68, "End_Of_Navigation");
  strcpy((char *)&xmmword_25E7B80, "End_Of_Navigation");
  strcpy((char *)&qword_25E7B98, "Destination");
  strcpy((char *)&xmmword_25E7C88, "Waypoint_Stop_On_Left");
  strcpy((char *)&xmmword_25E7CA0, "Waypoint_Stop_On_Right");
  byte_25E7B67 = 22;
  byte_25E7B7F = 17;
  byte_25E7B97 = 17;
  byte_25E7BAF = 11;
  byte_25E7BC7 = 19;
  strcpy((char *)&xmmword_25E7BB0, "Destination_On_left");
  byte_25E7BDF = 20;
  strcpy((char *)&xmmword_25E7BC8, "Destination_On_Right");
  strcpy(&byte_25E7BF7, "\nFirst_Stop_On_left");
  strcpy((char *)&xmmword_25E7C10, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25E7C58, "Next_Stop_On_Right");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25E7BE0, "First_Stop");
  byte_25E7C0F = 18;
  byte_25E7C27 = 19;
  strcpy(&byte_25E7C3F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25E7C70, "Waypoint_Stop");
  strcpy((char *)&qword_25E7CB8, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25E7C28, "Next_Stop");
  byte_25E7C57 = 17;
  byte_25E7C6F = 18;
  byte_25E7C87 = 13;
  byte_25E7C9F = 21;
  byte_25E7CB7 = 22;
  byte_25E7CCF = 11;
  byte_25E7CE7 = 16;
  strcpy((char *)&xmmword_25E7CD0, "Enter_Roundabout");
  qword_25E7CE8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_25E7CF0 = xmmword_20B91C0;
  strcpy((char *)qword_25E7CE8, "Walking_Enter_Roundabout");
  byte_25E7D17 = 16;
  strcpy((char *)&xmmword_25E7D00, "Leave_Roundabout");
  byte_25E7D2F = 21;
  strcpy((char *)&xmmword_25E7D18, "Roundabout_First_Exit");
  byte_25E7D47 = 22;
  strcpy((char *)&xmmword_25E7D30, "Roundabout_Second_Exit");
  byte_25E7D5F = 21;
  strcpy((char *)&xmmword_25E7D48, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25E7D60, "Roundabout_Fourth_Exit");
  HIBYTE(word_25E7D76) = 22;
  byte_25E7D8F = 21;
  strcpy((char *)&xmmword_25E7D78, "Roundabout_Fifth_Exit");
  byte_25E7DA7 = 21;
  strcpy((char *)&xmmword_25E7D90, "Roundabout_Sixth_Exit");
  qword_25E7DA8 = (uint64_t)operator new(0x19uLL);
  xmmword_25E7DB0 = xmmword_20B9250;
  strcpy((char *)qword_25E7DA8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25E7DC0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25E7DD6) = 22;
  byte_25E7DEF = 21;
  strcpy((char *)&xmmword_25E7DD8, "Roundabout_Ninth_Exit");
  byte_25E7E07 = 21;
  strcpy((char *)&xmmword_25E7DF0, "Roundabout_Tenth_Exit");
  qword_25E7E08 = (uint64_t)operator new(0x20uLL);
  xmmword_25E7E10 = xmmword_20B91C0;
  strcpy((char *)qword_25E7E08, "Roundabout_Eleventh_Exit");
  qword_25E7E20 = (uint64_t)operator new(0x19uLL);
  unk_25E7E28 = xmmword_20B9250;
  strcpy((char *)qword_25E7E20, "Roundabout_Twelfth_Exit");
  qword_25E7E38 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_25E7E40 = xmmword_20B5EB0;
  strcpy((char *)qword_25E7E38, "Roundabout_Thirteenth_Exit");
  qword_25E7E50 = (uint64_t)operator new(0x20uLL);
  unk_25E7E58 = xmmword_20B5EB0;
  strcpy((char *)qword_25E7E50, "Roundabout_Fourteenth_Exit");
  qword_25E7E68 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_25E7E70 = xmmword_20B8870;
  strcpy((char *)qword_25E7E68, "Roundabout_Fifteenth_Exit");
  qword_25E7E80 = (uint64_t)operator new(0x20uLL);
  unk_25E7E88 = xmmword_20B8870;
  strcpy((char *)qword_25E7E80, "Roundabout_Sixteenth_Exit");
  qword_25E7E98 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_25E7EA0 = xmmword_20B91A0;
  strcpy((char *)qword_25E7E98, "Roundabout_Seventeenth_Exit");
  qword_25E7EB0 = (uint64_t)operator new(0x20uLL);
  unk_25E7EB8 = xmmword_20B5EB0;
  strcpy((char *)qword_25E7EB0, "Roundabout_Eighteenth_Exit");
  qword_25E7EC8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E7ED0 = xmmword_20B5EB0;
  strcpy((char *)qword_25E7EC8, "Roundabout_Nineteenth_Exit");
  byte_25E7EF7 = 8;
  strcpy((char *)&qword_25E7EE0, "Off_Ramp");
  byte_25E7F0F = 16;
  strcpy((char *)&xmmword_25E7EF8, "Off_Ramp_On_Left");
  byte_25E7F27 = 17;
  strcpy((char *)&xmmword_25E7F10, "Off_Ramp_On_Right");
  byte_25E7F3F = 14;
  strcpy((char *)&qword_25E7F28, "Change_Highway");
  strcpy((char *)&xmmword_25E7F40, "Change_Highway_On_Left");
  HIBYTE(word_25E7F56) = 22;
  qword_25E7F58 = (uint64_t)operator new(0x19uLL);
  xmmword_25E7F60 = xmmword_20B9250;
  strcpy((char *)qword_25E7F58, "Change_Highway_On_Right");
  byte_25E7F87 = 5;
  dword_25E7F70 = 1735550285;
  byte_25E7F74 = 101;
  byte_25E7F75 = 0;
  byte_25E7F9F = 12;
  strcpy((char *)&qword_25E7F88, "Enter_Detour");
  byte_25E7FB7 = 11;
  strcpy((char *)&qword_25E7FA0, "Exit_Detour");
  byte_25E7FCF = 18;
  strcpy((char *)&xmmword_25E7FB8, "Walking_Turnaround");
  qword_25E7FD0 = (uint64_t)operator new(0x19uLL);
  unk_25E7FD8 = xmmword_20B9250;
  strcpy((char *)qword_25E7FD0, "Walking_Turnaround_Sign");
  byte_25E7FFF = 19;
  strcpy(byte_25E7FE8, "Distance_Title_List");
  qword_25E8000 = (uint64_t)operator new(0x19uLL);
  unk_25E8008 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25E8000, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_25E802F = 19;
  strcpy(byte_25E8018, "Arrival_Charge_List");
  byte_25E8047 = 15;
  strcpy((char *)&qword_25E8030, "Charge_At_Start");
  strcpy(&byte_25E805F, "\tPass_Street");
  strcpy((char *)&qword_25E8048, "Pass_Exit");
  byte_25E8077 = 11;
  byte_25E808F = 17;
  strcpy((char *)&xmmword_25E8078, "Pass_Intersection");
  strcpy(&byte_25E80A7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25E8090, "Next_Exit");
  byte_25E80BF = 15;
  strcpy(&byte_25E80D7, "\t_PrevUTurn");
  strcpy((char *)&qword_25E80C0, "_PrevRoad");
  strcpy(&byte_25E80EF, "\nNext_");
  byte_25E8107 = 5;
  byte_25E811F = 15;
  strcpy((char *)&qword_25E8108, "_At_Next_Street");
  byte_25E8137 = 21;
  strcpy((char *)&xmmword_25E8120, "_At_Next_Intersection");
  byte_25E814F = 14;
  strcpy((char *)&qword_25E8138, "Charge_Station");
  byte_25E8167 = 15;
  strcpy((char *)&qword_25E8150, "_Charge_Station");
  BYTE1(qword_25E8178) = 0;
  WORD1(qword_25E8178) = 25856;
  HIDWORD(qword_25E8178) = 335544320;
  strcpy((char *)&qword_25E8168, "_Charge_Station_");
  byte_25E8197 = 8;
  strcpy((char *)&qword_25E8180, "_Minimum");
  byte_25E81AF = 15;
  strcpy((char *)&qword_25E8198, "ExitShield_Sign");
  byte_25E81C7 = 8;
  strcpy((char *)&qword_25E81B0, "Walking_");
  byte_25E81DF = 16;
  strcpy((char *)&xmmword_25E81C8, "Walking_Continue");
  byte_25E81F7 = 19;
  strcpy((char *)&xmmword_25E81E0, "Walking_Start_Route");
  qword_25E81F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E8200 = xmmword_20B5EB0;
  strcpy((char *)qword_25E81F8, "Walking_Start_Route_U_Turn");
  byte_25E8227 = 17;
  strcpy((char *)&xmmword_25E8210, "Walking_Left_Turn");
  byte_25E823F = 18;
  strcpy((char *)&xmmword_25E8228, "Walking_Right_Turn");
  qword_25E8240 = (uint64_t)operator new(0x20uLL);
  unk_25E8248 = xmmword_20B5EB0;
  strcpy((char *)qword_25E8240, "Walking_Turn_At_Roundabout");
  qword_25E8258 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_25E8260 = xmmword_20B91B0;
  strcpy((char *)qword_25E8258, "Walking_U_Turn_When_Possible");
  qword_25E8270 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_25E8278 = xmmword_20B9390;
  strcpy((char *)qword_25E8270, "Walking_Roundabout_Exit_Continue");
  qword_25E8288 = (uint64_t)operator new(0x20uLL);
  xmmword_25E8290 = xmmword_20B91B0;
  strcpy((char *)qword_25E8288, "Walking_Roundabout_Exit_Left");
  qword_25E82A0 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_25E82A8 = xmmword_20B8890;
  strcpy((char *)qword_25E82A0, "Walking_Roundabout_Exit_Right");
  qword_25E82B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E82C0 = xmmword_20B8870;
  strcpy((char *)qword_25E82B8, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25E82D0 = (uint64_t)v0;
  unk_25E82D8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_25E82FF = 8;
  strcpy((char *)&qword_25E82E8, "Walking_");
  qword_25E8300 = (uint64_t)operator new(0x19uLL);
  unk_25E8308 = v280;
  strcpy((char *)qword_25E8300, "Walking_Sharp_Left_Turn");
  qword_25E8318 = (uint64_t)operator new(0x20uLL);
  xmmword_25E8320 = v279;
  strcpy((char *)qword_25E8318, "Walking_Sharp_Right_Turn");
  qword_25E8330 = (uint64_t)operator new(0x20uLL);
  unk_25E8338 = v279;
  strcpy((char *)qword_25E8330, "Walking_Slight_Left_Turn");
  qword_25E8348 = (uint64_t)operator new(0x20uLL);
  xmmword_25E8350 = v278;
  strcpy((char *)qword_25E8348, "Walking_Slight_Right_Turn");
  byte_25E8377 = 4;
  strcpy((char *)&dword_25E8360, "Exit");
  byte_25E838F = 4;
  strcpy((char *)&dword_25E8378, "Road");
  byte_25E83A7 = 7;
  strcpy((char *)&dword_25E8390, "Freeway");
  byte_25E83BF = 12;
  strcpy((char *)&qword_25E83A8, "Intersection");
  byte_25E83D7 = 5;
  strcpy((char *)&dword_25E83C0, "Ferry");
  byte_25E83EF = 11;
  strcpy((char *)&qword_25E83D8, "ShuttleName");
  byte_25E8407 = 5;
  strcpy((char *)&dword_25E83F0, "Road1");
  strcpy(&byte_25E841F, "\tName");
  strcpy((char *)&qword_25E8408, "Signpost1");
  byte_25E8437 = 4;
  byte_25E844F = 7;
  strcpy((char *)&dword_25E8438, "Address");
  byte_25E8467 = 7;
  strcpy((char *)&dword_25E8450, "Shield1");
  byte_25E847F = 13;
  strcpy((char *)&qword_25E8468, "TowardShield1");
  byte_25E8497 = 6;
  strcpy((char *)&dword_25E8480, "Right_");
  byte_25E84AF = 5;
  strcpy((char *)&dword_25E8498, "Left_");
  strcpy(&byte_25E84C7, "\tOn_Left_");
  strcpy((char *)&qword_25E84B0, "On_Right_");
  byte_25E84DF = 8;
  byte_25E84F7 = 12;
  strcpy((char *)&qword_25E84E0, "ElevatorName");
  byte_25E850F = 13;
  strcpy((char *)&qword_25E84F8, "EscalatorName");
  strcpy(&byte_25E8527, "\nBridgeName");
  strcpy((char *)&qword_25E8510, "StairsName");
  strcpy(&byte_25E853F, "\nTunnelName");
  strcpy(&byte_25E8557, "\nParking");
  byte_25E856F = 7;
  strcpy(&byte_25E8587, "\t_Escalator");
  strcpy((char *)&qword_25E8570, "_Elevator");
  strcpy(&byte_25E859F, "\n_ElevatorName");
  byte_25E85B7 = 13;
  byte_25E85CF = 14;
  strcpy((char *)&qword_25E85B8, "_EscalatorName");
  byte_25E85E7 = 5;
  strcpy((char *)&qword_25E85D0, "_Road");
  byte_25E85FF = 8;
  strcpy((char *)&qword_25E85E8, "_Freeway");
  byte_25E8617 = 13;
  strcpy((char *)&qword_25E8600, "_Intersection");
  byte_25E862F = 6;
  strcpy((char *)&dword_25E8618, "_Road1");
  byte_25E8647 = 6;
  strcpy((char *)&dword_25E8630, "_Road2");
  strcpy(&byte_25E865F, "\n_Signpost2");
  strcpy((char *)&qword_25E8648, "_Signpost1");
  strcpy(&byte_25E8677, "\n_Ferry");
  byte_25E868F = 6;
  byte_25E86A7 = 12;
  strcpy((char *)&qword_25E8690, "_Ferry_Ferry");
  byte_25E86BF = 12;
  strcpy((char *)&qword_25E86A8, "_ShuttleName");
  qword_25E86C0 = (uint64_t)operator new(0x20uLL);
  unk_25E86C8 = v277;
  strcpy((char *)qword_25E86C0, "_Railway_Shuttle_ShuttleName");
  byte_25E86EF = 11;
  strcpy((char *)&qword_25E86D8, "_ExitNumber");
  byte_25E8707 = 5;
  dword_25E86F0 = 1769489759;
  byte_25E86F4 = 116;
  byte_25E86F5 = 0;
  byte_25E871F = 7;
  strcpy((char *)&dword_25E8708, "_StayOn");
  byte_25E8737 = 7;
  strcpy((char *)&dword_25E8720, "_Stairs");
  byte_25E874F = 5;
  strcpy((char *)&dword_25E8738, "_Ramp");
  byte_25E8767 = 11;
  strcpy((char *)&qword_25E8750, "_StairsName");
  strcpy(&byte_25E877F, "\t_Down");
  strcpy((char *)&qword_25E8768, "_RampName");
  byte_25E8797 = 5;
  byte_25E87AF = 3;
  dword_25E8798 = 7361887;
  byte_25E87C7 = 7;
  strcpy((char *)&dword_25E87B0, "_Bridge");
  byte_25E87DF = 7;
  strcpy((char *)&dword_25E87C8, "_Tunnel");
  byte_25E87F7 = 11;
  strcpy((char *)&qword_25E87E0, "_Roundabout");
  byte_25E880F = 6;
  strcpy((char *)&dword_25E87F8, "_Cross");
  byte_25E8827 = 8;
  strcpy((char *)&qword_25E8810, "_Parking");
  byte_25E883F = 8;
  strcpy((char *)&qword_25E8828, "_Shield1");
  byte_25E8857 = 14;
  strcpy((char *)&qword_25E8840, "_TowardShield1");
  byte_25E886F = 8;
  strcpy((char *)&qword_25E8858, "_Shield2");
  byte_25E8887 = 14;
  strcpy((char *)&qword_25E8870, "_TowardShield2");
  byte_25E889F = 11;
  strcpy((char *)&qword_25E8888, "_Direction1");
  byte_25E88B7 = 11;
  strcpy((char *)&qword_25E88A0, "_Direction2");
  strcpy(&byte_25E88CF, "\n_TowardDirection1");
  strcpy((char *)&qword_25E88B8, "Direction1");
  byte_25E88E7 = 17;
  byte_25E88FF = 17;
  strcpy((char *)&xmmword_25E88E8, "_TowardDirection2");
  byte_25E8917 = 16;
  strcpy((char *)&xmmword_25E8900, "TowardDirection1");
  byte_25E892F = 7;
  strcpy((char *)&qword_25E8918, "_Spoken");
  byte_25E8947 = 5;
  strcpy((char *)&qword_25E8930, "_Sign");
  byte_25E895F = 15;
  strcpy((char *)&qword_25E8948, "_Secondary_Sign");
  byte_25E8977 = 5;
  byte_25E8964 = 116;
  dword_25E8960 = 1936280671;
  byte_25E8965 = 0;
  byte_25E898F = 8;
  strcpy((char *)&qword_25E8978, "_Primary");
  qword_25E89A0 = 0xF00000000000000;
  strcpy((char *)&qword_25E8990, "_Spoken_Primary");
  strcpy(&byte_25E89BF, "\n_Secondary");
  strcpy((char *)&qword_25E89A8, "_Secondary");
  strcpy(&byte_25E89D7, "\n_Spoken_Secondar");
  BYTE1(qword_25E89E8) = 0;
  WORD1(qword_25E89E8) = 0;
  HIDWORD(qword_25E89E8) = 285212672;
  byte_25E8A07 = 13;
  strcpy((char *)&qword_25E89F0, "_To_Secondary");
  BYTE1(qword_25E8A18) = 0;
  WORD1(qword_25E8A18) = 0;
  HIDWORD(qword_25E8A18) = 335544320;
  strcpy((char *)&dword_25E8A08, "_Spoken_To_Secon");
  strcpy(&byte_25E8A37, "\t_ValidDistance");
  strcpy((char *)&qword_25E8A20, "_Distance");
  byte_25E8A4F = 14;
  byte_25E8A67 = 6;
  strcpy((char *)&dword_25E8A50, "_Short");
  byte_25E8A7F = 1;
  word_25E8A68 = 95;
  qword_25E8A80 = (uint64_t)operator new(0x20uLL);
  unk_25E8A88 = v279;
  strcpy((char *)qword_25E8A80, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25E8A98 = (uint64_t)v1;
  xmmword_25E8AA0 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_25E8AC7 = 12;
  strcpy((char *)&qword_25E8AB0, "Chain_Spoken");
  byte_25E8ADF = 15;
  strcpy((char *)&qword_25E8AC8, "Chain_To_Spoken");
  strcpy(&byte_25E8AF7, "\nThen_Spoken");
  strcpy((char *)&qword_25E8AE0, "And_Spoken");
  byte_25E8B0F = 11;
  byte_25E8B27 = 18;
  strcpy((char *)&xmmword_25E8B10, "Concatenate_Spoken");
  qword_25E8B28 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_25E8B30 = xmmword_20B9240;
  strcpy((char *)qword_25E8B28, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25E8B40 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_25E8B48 = xmmword_20B9260;
  strcpy((char *)qword_25E8B40, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25E8B58 = (uint64_t)operator new(0x40uLL);
  xmmword_25E8B60 = xmmword_20B9A90;
  strcpy((char *)qword_25E8B58, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25E8B70 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_25E8B78 = xmmword_20B9A40;
  strcpy((char *)qword_25E8B70, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25E8B88 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_25E8B90 = xmmword_20E12D0;
  strcpy((char *)qword_25E8B88, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25E8BA0 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_25E8BA8 = xmmword_20B9960;
  strcpy((char *)qword_25E8BA0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E8BB8 = (uint64_t)operator new(0x28uLL);
  xmmword_25E8BC0 = xmmword_20B93A0;
  strcpy((char *)qword_25E8BB8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E8BD0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_25E8BD8 = xmmword_20E1380;
  strcpy((char *)qword_25E8BD0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E8BE8 = (uint64_t)operator new(0x30uLL);
  xmmword_25E8BF0 = xmmword_20B93C0;
  strcpy((char *)qword_25E8BE8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E8C00 = (uint64_t)operator new(0x38uLL);
  unk_25E8C08 = xmmword_20B9A60;
  strcpy((char *)qword_25E8C00, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25E8C18 = (uint64_t)operator new(0x30uLL);
  xmmword_25E8C20 = xmmword_20E1380;
  strcpy((char *)qword_25E8C18, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25E8C30 = (uint64_t)operator new(0x28uLL);
  unk_25E8C38 = xmmword_20B9960;
  strcpy((char *)qword_25E8C30, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25E8C48 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_25E8C50 = xmmword_20B93D0;
  strcpy((char *)qword_25E8C48, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25E8C60 = (uint64_t)operator new(0x20uLL);
  unk_25E8C68 = v275;
  strcpy((char *)qword_25E8C60, "Walking_Distance_Chain_Spoken");
  qword_25E8C78 = (uint64_t)operator new(0x20uLL);
  xmmword_25E8C80 = v275;
  strcpy((char *)qword_25E8C78, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25E8C90 = (uint64_t)v3;
  unk_25E8C98 = v280;
  *(_OWORD *)uint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25E8CA8 = (uint64_t)operator new(0x28uLL);
  xmmword_25E8CB0 = v269;
  strcpy((char *)qword_25E8CA8, "Distance_Cross_The_Street_Spoken");
  byte_25E8CD7 = 22;
  strcpy((char *)&xmmword_25E8CC0, "Walking_Continue_Cross");
  byte_25E8CEF = 14;
  strcpy((char *)&qword_25E8CD8, "Continue_Cross");
  byte_25E8D07 = 5;
  strcpy((char *)&dword_25E8CF0, "Cross");
  byte_25E8D1F = 19;
  strcpy((char *)&xmmword_25E8D08, "Cross_Street_Spoken");
  byte_25E8D37 = 17;
  strcpy((char *)&xmmword_25E8D20, "Cross_Road_Spoken");
  byte_25E8D4F = 20;
  strcpy((char *)&xmmword_25E8D38, "Use_Crosswalk_Spoken");
  byte_25E8D67 = 15;
  strcpy((char *)&qword_25E8D50, "Distance_Spoken");
  byte_25E8D7F = 19;
  strcpy((char *)&xmmword_25E8D68, "Distance_And_Spoken");
  byte_25E8D97 = 21;
  strcpy((char *)&xmmword_25E8D80, "Continue_Stage_Spoken");
  byte_25E8DAF = 13;
  qmemcpy(&qword_25E8D98, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25E89A0);
  if (qword_25E89A0 >= 0) {
    size_t v5 = HIBYTE(qword_25E89A0);
  }
  else {
    size_t v5 = unk_25E8998;
  }
  unint64_t v6 = v5 + 13;
  byte_25E8DA5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = operator new(v8 + 1);
    qword_25E8DB8 = v5 + 13;
    unk_25E8DC0 = v9 | 0x8000000000000000;
    qword_25E8DB0 = (uint64_t)v10;
    *long long v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25E8DB8) = 0;
    WORD1(qword_25E8DB8) = 0;
    HIDWORD(qword_25E8DB8) = 0;
    unk_25E8DC0 = 0;
    byte_25E8DC7 = v5 + 13;
    uint64_t v7 = (char *)&qword_25E8DB8 + 5;
    strcpy((char *)&qword_25E8DB0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25E8990;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25E8990;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25E85E7;
  if (byte_25E85E7 >= 0) {
    size_t v13 = byte_25E85E7;
  }
  else {
    size_t v13 = qword_25E85D8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *unint64_t v18 = qword_25E8D98;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25E8D98 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25E8D98 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25E8D98;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_25E85D0;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_25E85D0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25E8990;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25E8990;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25E8DD8 = v21->__r_.__value_.__r.__words[2];
  xmmword_25E8DC8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25E8DF7 = 5;
  strcpy((char *)&dword_25E8DE0, "Merge");
  qword_25E8DF8 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  unk_25E8E00 = xmmword_20B8E90;
  strcpy((char *)qword_25E8DF8, "Continue_Freeway_Spoken_Primary");
  byte_25E8E27 = 8;
  strcpy((char *)&qword_25E8E10, "Starting");
  byte_25E8E3F = 14;
  strcpy((char *)&qword_25E8E28, "Starting_Route");
  byte_25E8E57 = 14;
  strcpy((char *)&qword_25E8E40, "Resuming_Route");
  byte_25E8E6F = 16;
  strcpy((char *)&xmmword_25E8E58, "Continuing_Route");
  byte_25E8E87 = 9;
  word_25E8E78 = 112;
  qword_25E8E70 = *(void *)&v264[48];
  strcpy(&byte_25E8E9F, "\nEnding");
  strcpy((char *)&word_25E8E90, "op");
  qword_25E8E88 = *(void *)&v268[0];
  byte_25E8EB7 = 6;
  strcpy((char *)&qword_25E8EB8, "_Destination");
  byte_25E8ECF = 12;
  byte_25E8EE7 = 15;
  strcpy((char *)&qword_25E8ED0, "_At_Destination");
  std::operator+<char>();
  qword_25E8F00 = (uint64_t)operator new(0x20uLL);
  unk_25E8F08 = v279;
  strcpy((char *)qword_25E8F00, "Spoken_Ending_At_Parking");
  qword_25E8F18 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_25E8F20 = xmmword_20B9800;
  strcpy((char *)qword_25E8F18, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25E8F30, "Sign_Ending_At_Parking");
  HIBYTE(word_25E8F46) = 22;
  byte_25E8F5F = 4;
  strcpy((char *)&dword_25E8F48, "Home");
  byte_25E8F77 = 4;
  strcpy((char *)&dword_25E8F60, "Work");
  byte_25E8F8F = 8;
  strcpy((char *)&qword_25E8F78, "Business");
  byte_25E8FA7 = 4;
  strcpy((char *)&dword_25E8F90, "Name");
  byte_25E8FBF = 13;
  strcpy((char *)&qword_25E8FA8, "Other_Contact");
  byte_25E8FD7 = 11;
  strcpy((char *)&qword_25E8FC0, "ContactHome");
  byte_25E8FEF = 11;
  *(_DWORD *)((char *)&qword_25E8FD8 + 7) = 1802661719;
  byte_25E9007 = 7;
  *(int *)((char *)&dword_25E8FF0 + 3) = 1936942450;
  dword_25E8FF0 = 1919181889;
  strcpy((char *)&xmmword_25E9008, "Discoverability_Prompt");
  HIBYTE(word_25E901E) = 22;
  byte_25E9037 = 6;
  dword_25E9020 = 1634878303;
  word_25E9024 = 26739;
  byte_25E904F = 8;
  qword_25E9038 = 0x697269535F6F4E5FLL;
  byte_25E9067 = 9;
  strcpy((char *)&qword_25E9050, "_CityName");
  byte_25E907F = 8;
  qword_25E9068 = 0x636972656E65475FLL;
  int v23 = byte_25E8E27;
  if (byte_25E8E27 >= 0) {
    size_t v24 = byte_25E8E27;
  }
  else {
    size_t v24 = qword_25E8E18;
  }
  LODWORD(v270) = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v25 = byte_25E8167;
  }
  else {
    size_t v25 = unk_25E8158;
  }
  qword_25E8FD8 = *(void *)"ContactWork";
  byte_25E8FE3 = 0;
  byte_25E8FF7 = 0;
  byte_25E9026 = 0;
  byte_25E9040 = 0;
  byte_25E9070 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25E9080;
    qword_25E9088 = 0;
    unk_25E9090 = 0;
    qword_25E9080 = 0;
    byte_25E9097 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25E9088 = v25 + v24;
  unk_25E9090 = v91 | 0x8000000000000000;
  qword_25E9080 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25E8E10;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25E8E10;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      int v30 = &qword_25E8150;
    }
    else {
      int v30 = (uint64_t *)qword_25E8150;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25E8ECF;
  if (byte_25E8ECF >= 0) {
    size_t v32 = byte_25E8ECF;
  }
  else {
    size_t v32 = qword_25E8EC0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    int v34 = &qword_25E9098;
    qword_25E90A0 = 0;
    unk_25E90A8 = 0;
    qword_25E9098 = 0;
    byte_25E90AF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  int v34 = (uint64_t *)operator new(v92 + 1);
  qword_25E90A0 = v32 + v24;
  unk_25E90A8 = v93 | 0x8000000000000000;
  qword_25E9098 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      int v35 = &qword_25E8E10;
    }
    else {
      int v35 = (uint64_t *)qword_25E8E10;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v37 = &qword_25E8EB8;
    }
    else {
      int v37 = (uint64_t *)qword_25E8EB8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25E90B0 = (uint64_t)operator new(0x19uLL);
  unk_25E90B8 = v280;
  strcpy((char *)qword_25E90B0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    int v38 = &qword_25E90C8;
    qword_25E90D0 = 0;
    unk_25E90D8 = 0;
    qword_25E90C8 = 0;
    byte_25E90DF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  int v38 = (uint64_t *)operator new(v94 + 1);
  qword_25E90D0 = v32 + v24;
  unk_25E90D8 = v95 | 0x8000000000000000;
  qword_25E90C8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      int v39 = &qword_25E8E10;
    }
    else {
      int v39 = (uint64_t *)qword_25E8E10;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  int v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v41 = &qword_25E8EB8;
    }
    else {
      int v41 = (uint64_t *)qword_25E8EB8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25E90E0, "{NewBatteryPercentage}");
  HIBYTE(word_25E90F6) = 22;
  qword_25E90F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25E9100 = v273;
  strcpy((char *)qword_25E90F8, "{OriginalBatteryPercentage}");
  byte_25E9127 = 19;
  strcpy((char *)&xmmword_25E9110, "_Arrival_Percentage");
  int v42 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v43 = byte_25E8EB7;
  }
  else {
    size_t v43 = qword_25E8EA8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int v46 = &qword_25E8EA0;
    }
    else {
      int v46 = (uint64_t *)qword_25E8EA0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  int v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      uint64_t v48 = &qword_25E8150;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25E8150;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  int v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25E9138 = v49->__r_.__value_.__r.__words[2];
  xmmword_25E9128 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v52 = byte_25E8EB7;
  }
  else {
    size_t v52 = qword_25E8EA8;
  }
  int v53 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v54 = byte_25E8167;
  }
  else {
    size_t v54 = unk_25E8158;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    unint64_t v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  unint64_t v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      int v57 = &qword_25E8EA0;
    }
    else {
      int v57 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  int v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      unint64_t v59 = &qword_25E8150;
    }
    else {
      unint64_t v59 = (uint64_t *)qword_25E8150;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25E8197 >= 0) {
    BOOL v60 = (const std::string::value_type *)&qword_25E8180;
  }
  else {
    BOOL v60 = (const std::string::value_type *)qword_25E8180;
  }
  if (byte_25E8197 >= 0) {
    std::string::size_type v61 = byte_25E8197;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25E8188;
  }
  int v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25E9150 = v64->__r_.__value_.__r.__words[2];
  xmmword_25E9140 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v67 = byte_25E8EB7;
  }
  else {
    size_t v67 = qword_25E8EA8;
  }
  int v68 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v69 = byte_25E8167;
  }
  else {
    size_t v69 = unk_25E8158;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  int v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      int v72 = &qword_25E8EA0;
    }
    else {
      int v72 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      int v74 = &qword_25E8150;
    }
    else {
      int v74 = (uint64_t *)qword_25E8150;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25E9168 = v75->__r_.__value_.__r.__words[2];
  xmmword_25E9158 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v78 = byte_25E8EB7;
  }
  else {
    size_t v78 = qword_25E8EA8;
  }
  int v79 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v80 = byte_25E8167;
  }
  else {
    size_t v80 = unk_25E8158;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25E9178 = 0;
    unk_25E9180 = 0;
    qword_25E9170 = 0;
    long double v82 = &qword_25E9170;
    byte_25E9187 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  long double v82 = (uint64_t *)operator new(v102 + 1);
  qword_25E9178 = v80 + v78;
  unk_25E9180 = v103 | 0x8000000000000000;
  qword_25E9170 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_25E8EA0;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      BOOL v85 = &qword_25E8150;
    }
    else {
      BOOL v85 = (uint64_t *)qword_25E8150;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25E9187;
  if (byte_25E9187 >= 0) {
    size_t v87 = byte_25E9187;
  }
  else {
    size_t v87 = qword_25E9178;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    int v89 = (uint64_t *)operator new(v104 + 1);
    qword_25E9190 = v87 + 5;
    unk_25E9198 = v105 | 0x8000000000000000;
    qword_25E9188 = (uint64_t)v89;
  }
  else
  {
    int v89 = &qword_25E9188;
    qword_25E9190 = 0;
    unk_25E9198 = 0;
    qword_25E9188 = 0;
    byte_25E919F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    size_t v106 = &qword_25E9170;
  }
  else {
    size_t v106 = (uint64_t *)qword_25E9170;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v108 = byte_25E8EB7;
  }
  else {
    size_t v108 = qword_25E8EA8;
  }
  int v109 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v110 = byte_25E8167;
  }
  else {
    size_t v110 = unk_25E8158;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  int v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      size_t v113 = &qword_25E8EA0;
    }
    else {
      size_t v113 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  int v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      BOOL v115 = &qword_25E8150;
    }
    else {
      BOOL v115 = (uint64_t *)qword_25E8150;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  char v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25E91B0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25E91A0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25E91B0);
  if (qword_25E91B0 >= 0) {
    size_t v119 = HIBYTE(qword_25E91B0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25E91A0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25E91C0 = v119 + 6;
    unk_25E91C8 = v125 | 0x8000000000000000;
    qword_25E91B8 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25E91B8;
    qword_25E91C0 = 0;
    unk_25E91C8 = 0;
    qword_25E91B8 = 0;
    byte_25E91CF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_25E91A0;
  }
  else {
    uint64_t v126 = (long long *)xmmword_25E91A0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v128 = byte_25E8EB7;
  }
  else {
    size_t v128 = qword_25E8EA8;
  }
  int v129 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v130 = byte_25E8167;
  }
  else {
    size_t v130 = unk_25E8158;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  unint64_t v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      int v133 = &qword_25E8EA0;
    }
    else {
      int v133 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25E8150;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25E8150;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25E892F >= 0) {
    uint64_t v136 = (const std::string::value_type *)&qword_25E8918;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)qword_25E8918;
  }
  if (byte_25E892F >= 0) {
    std::string::size_type v137 = byte_25E892F;
  }
  else {
    std::string::size_type v137 = unk_25E8920;
  }
  uint64_t v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25E91E0 = v138->__r_.__value_.__r.__words[2];
  xmmword_25E91D0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25E8EB7;
  if (byte_25E8EB7 >= 0) {
    size_t v141 = byte_25E8EB7;
  }
  else {
    size_t v141 = qword_25E8EA8;
  }
  int v142 = byte_25E8167;
  if (byte_25E8167 >= 0) {
    size_t v143 = byte_25E8167;
  }
  else {
    size_t v143 = unk_25E8158;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    uint64_t v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  uint64_t v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      char v146 = &qword_25E8EA0;
    }
    else {
      char v146 = (uint64_t *)qword_25E8EA0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  uint64_t v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      uint64_t v148 = &qword_25E8150;
    }
    else {
      uint64_t v148 = (uint64_t *)qword_25E8150;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25E8197 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_25E8180;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_25E8180;
  }
  if (byte_25E8197 >= 0) {
    std::string::size_type v150 = byte_25E8197;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25E8188;
  }
  uint64_t v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25E892F >= 0) {
    uint64_t v153 = (const std::string::value_type *)&qword_25E8918;
  }
  else {
    uint64_t v153 = (const std::string::value_type *)qword_25E8918;
  }
  if (byte_25E892F >= 0) {
    std::string::size_type v154 = byte_25E892F;
  }
  else {
    std::string::size_type v154 = unk_25E8920;
  }
  int v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25E91F8 = v155->__r_.__value_.__r.__words[2];
  xmmword_25E91E8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25E9217 = 16;
  strcpy((char *)&xmmword_25E9200, "Use_NACS_Adapter");
  byte_25E922F = 16;
  strcpy(byte_25E9218, "Start_Route_Sign");
  qword_25E9230 = (uint64_t)operator new(0x20uLL);
  unk_25E9238 = v276;
  strcpy((char *)qword_25E9230, "Start_Route_Spoken_Primary");
  int v157 = byte_25E78C7;
  if (byte_25E78C7 >= 0) {
    size_t v158 = byte_25E78C7;
  }
  else {
    size_t v158 = qword_25E78B8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    unint64_t v160 = &qword_25E9248;
    qword_25E9250 = 0;
    unk_25E9258 = 0;
    qword_25E9248 = 0;
    byte_25E925F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      char v167 = byte_25E78B0;
    }
    else {
      char v167 = *(char **)byte_25E78B0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  unint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25E9250 = v158 + 27;
  unk_25E9258 = v166 | 0x8000000000000000;
  qword_25E9248 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25E9277, "\t_Two_Lanes");
  strcpy((char *)&qword_25E9260, "_One_Lane");
  strcpy(&byte_25E928F, "\n_Three_Lanes");
  byte_25E92A7 = 12;
  byte_25E92BF = 11;
  strcpy((char *)&qword_25E92A8, "_Four_Lanes");
  byte_25E92D7 = 11;
  strcpy((char *)&qword_25E92C0, "_Five_Lanes");
  strcpy(&byte_25E92EF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25E92D8, "_Six_Lanes");
  byte_25E9307 = 12;
  byte_25E931F = 12;
  strcpy((char *)&qword_25E9308, "_Eight_Lanes");
  byte_25E9337 = 12;
  strcpy((char *)&qword_25E9320, "_Second_Lane");
  byte_25E934F = 11;
  strcpy((char *)&qword_25E9338, "_Third_Lane");
  byte_25E9367 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25E9350, "_Second_Third_Lanes");
  byte_25E937F = 4;
  strcpy((char *)&dword_25E9368, "Left");
  byte_25E9397 = 5;
  byte_25E9384 = 116;
  dword_25E9380 = 1751607634;
  byte_25E9385 = 0;
  byte_25E93AF = 6;
  strcpy((char *)&dword_25E9398, "Middle");
  BYTE1(qword_25E93C0) = 0;
  WORD1(qword_25E93C0) = 0;
  HIDWORD(qword_25E93C0) = 0x10000000;
  strcpy((char *)dword_25E93B0, "Left_Second_Lane");
  BYTE1(qword_25E93D8) = 0;
  WORD1(qword_25E93D8) = 0;
  HIDWORD(qword_25E93D8) = 285212672;
  strcpy((char *)&dword_25E93C8, "Right_Second_Lan");
  qword_25E93F0 = 0xF00000000000000;
  strcpy((char *)&dword_25E93E0, "Left_Third_Lane");
  qword_25E9408 = 0x1000000000000000;
  byte_25E93FC = 116;
  dword_25E93F8 = 1751607634;
  dword_25E9404 = 1701732684;
  unk_25E93FD = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25E9410 = (uint64_t)v168;
  unk_25E9418 = v280;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  long long v169 = (char *)operator new(0x20uLL);
  qword_25E9428 = (uint64_t)v169;
  xmmword_25E9430 = v279;
  *(_DWORD *)long long v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_25E9457 = 5;
  strcpy((char *)&dword_25E9440, "_Stay");
  byte_25E946F = 13;
  strcpy((char *)&qword_25E9458, "Continue_Sign");
  byte_25E9487 = 8;
  strcpy((char *)&qword_25E9470, "Continue");
  int v170 = byte_25E8947;
  if (byte_25E8947 >= 0) {
    size_t v171 = byte_25E8947;
  }
  else {
    size_t v171 = qword_25E8938;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    int v176 = operator new(v174 + 1);
    qword_25E9490 = v171 + 8;
    qword_25E9498 = v175 | 0x8000000000000000;
    qword_25E9488 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    long long v173 = v176 + 1;
  }
  else
  {
    qword_25E9498 = 0;
    HIBYTE(qword_25E9498) = v171 + 8;
    qword_25E9488 = 0x65756E69746E6F43;
    qword_25E9490 = 0;
    long long v173 = &qword_25E9490;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    uint64_t v177 = &qword_25E8930;
  }
  else {
    uint64_t v177 = (uint64_t *)qword_25E8930;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25E89A0);
  if (qword_25E89A0 >= 0) {
    size_t v179 = HIBYTE(qword_25E89A0);
  }
  else {
    size_t v179 = unk_25E8998;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    uint64_t v184 = operator new(v182 + 1);
    qword_25E94A8 = v179 + 8;
    qword_25E94B0 = v183 | 0x8000000000000000;
    qword_25E94A0 = (uint64_t)v184;
    *uint64_t v184 = qword_25E9470;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25E94B0 = 0;
    HIBYTE(qword_25E94B0) = v179 + 8;
    qword_25E94A0 = qword_25E9470;
    qword_25E94A8 = 0;
    uint64_t v181 = &qword_25E94A8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    char v185 = &qword_25E8990;
  }
  else {
    char v185 = (uint64_t *)qword_25E8990;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25E94B8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25E94E7 = 13;
  strcpy((char *)&qword_25E94D0, "{instruction}");
  byte_25E94FF = 20;
  strcpy(byte_25E94E8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25E9500, "{secondaryInstruction}");
  HIBYTE(word_25E9516) = 22;
  qword_25E9518 = (uint64_t)operator new(0x20uLL);
  unk_25E9520 = v278;
  strcpy((char *)qword_25E9518, "{andSecondaryInstruction}");
  qword_25E9530 = (uint64_t)operator new(0x20uLL);
  unk_25E9538 = v279;
  strcpy((char *)qword_25E9530, "{toSecondaryInstruction}");
  byte_25E955F = 21;
  strcpy(byte_25E9548, "{continueInstruction}");
  qword_25E9560 = (uint64_t)operator new(0x20uLL);
  unk_25E9568 = v276;
  strcpy((char *)qword_25E9560, "{thenSecondaryInstruction}");
  byte_25E958F = 14;
  strcpy((char *)&qword_25E9578, "{instruction1}");
  byte_25E95A7 = 14;
  strcpy((char *)&qword_25E9590, "{instruction2}");
  strcpy(&byte_25E95BF, "\n{nextDistance}");
  strcpy((char *)&qword_25E95A8, "{distance}");
  byte_25E95D7 = 14;
  byte_25E95EF = 16;
  strcpy(byte_25E95D8, "{valid_distance}");
  strcpy(&byte_25E9607, "\n{valid_distance}");
  strcpy((char *)&qword_25E95F0, "{distance}");
  byte_25E961F = 16;
  byte_25E9637 = 15;
  strcpy((char *)&qword_25E9620, "{ClimbDistance}");
  byte_25E964F = 17;
  strcpy(byte_25E9638, "{DescentDistance}");
  byte_25E9667 = 13;
  strcpy((char *)&qword_25E9650, "{nonBrkSpace}");
  byte_25E967F = 9;
  strcpy((char *)&qword_25E9668, "{newLine}");
  byte_25E9697 = 6;
  word_25E9684 = -24382;
  dword_25E9680 = -1211981630;
  byte_25E9686 = 0;
  byte_25E96AF = 2;
  word_25E9698 = -24382;
  byte_25E969A = 0;
  byte_25E96C7 = 1;
  word_25E96B0 = 10;
  byte_25E96DF = 1;
  word_25E96C8 = 32;
  byte_25E96F7 = 2;
  strcpy((char *)&word_25E96E0, "\n\n");
  strcpy(&byte_25E970F, "\t{TowardShield1}");
  strcpy((char *)&qword_25E96F8, "{Shield1}");
  byte_25E9727 = 15;
  strcpy(&byte_25E973F, "\t{TowardShield2}");
  strcpy((char *)&qword_25E9728, "{Shield2}");
  byte_25E9757 = 15;
  byte_25E976F = 12;
  strcpy((char *)&qword_25E9758, "{Direction1}");
  byte_25E9787 = 12;
  strcpy((char *)&qword_25E9770, "{Direction2}");
  byte_25E979F = 18;
  strcpy(byte_25E9788, "{TowardDirection1}");
  byte_25E97B7 = 18;
  strcpy((char *)&xmmword_25E97A0, "{TowardDirection2}");
  byte_25E97CF = 7;
  strcpy((char *)&dword_25E97B8, "{Icon1}");
  byte_25E97E7 = 7;
  strcpy((char *)&dword_25E97D0, "{Icon2}");
  byte_25E97E8[23] = 14;
  strcpy(byte_25E97E8, "{Intersection}");
  byte_25E9817 = 6;
  strcpy((char *)&xmmword_25E9800, "{Road}");
  byte_25E982F = 7;
  strcpy((char *)&dword_25E9818, "{Road1}");
  byte_25E9847 = 7;
  strcpy((char *)&xmmword_25E9830, "{Road2}");
  strcpy(&byte_25E985F, "\n{Freeway}");
  strcpy((char *)&qword_25E9848, "{Elevator}");
  strcpy(&byte_25E9877, "\t{Ferry}");
  byte_25E988F = 7;
  byte_25E98A7 = 13;
  strcpy((char *)&xmmword_25E9890, "{ShuttleName}");
  byte_25E98BF = 11;
  strcpy((char *)&xmmword_25E98A8, "{Signpost1}");
  byte_25E98D7 = 11;
  strcpy((char *)&xmmword_25E98C0, "{Signpost2}");
  byte_25E98EF = 12;
  strcpy((char *)&xmmword_25E98D8, "{ExitNumber}");
  strcpy(&byte_25E9907, "\t{Name}");
  strcpy((char *)&xmmword_25E98F0, "{Address}");
  byte_25E991F = 6;
  byte_25E9937 = 11;
  strcpy((char *)&xmmword_25E9920, "{PlaceName}");
  byte_25E994F = 14;
  strcpy((char *)&xmmword_25E9938, "{ElevatorName}");
  byte_25E9967 = 15;
  strcpy((char *)&xmmword_25E9950, "{EscalatorName}");
  byte_25E997F = 12;
  strcpy((char *)&xmmword_25E9968, "{StairsName}");
  strcpy(&byte_25E9997, "\n{BridgeName}");
  strcpy((char *)&xmmword_25E9980, "{RampName}");
  byte_25E99AF = 12;
  byte_25E99C7 = 12;
  strcpy((char *)&xmmword_25E99B0, "{TunnelName}");
  byte_25E99DF = 13;
  strcpy((char *)&xmmword_25E99C8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25E97E8;
  long long v283 = xmmword_25E9800;
  uint64_t v284 = unk_25E9810;
  *(_OWORD *)v285 = *(_OWORD *)&dword_25E9818;
  uint64_t v286 = unk_25E9828;
  long long v287 = xmmword_25E9830;
  uint64_t v288 = unk_25E9840;
  *(_OWORD *)v289 = *(_OWORD *)&qword_25E9848;
  uint64_t v290 = unk_25E9858;
  uint64_t v292 = unk_25E9870;
  long long v291 = xmmword_25E9860;
  long long v293 = xmmword_25E9878;
  uint64_t v294 = unk_25E9888;
  uint64_t v296 = unk_25E98A0;
  long long __p = xmmword_25E9890;
  long long v297 = xmmword_25E98A8;
  uint64_t v298 = unk_25E98B8;
  uint64_t v300 = unk_25E98D0;
  long long v299 = xmmword_25E98C0;
  long long v301 = xmmword_25E98D8;
  long long v303 = xmmword_25E98F0;
  uint64_t v302 = unk_25E98E8;
  uint64_t v304 = unk_25E9900;
  long long v305 = xmmword_25E9908;
  long long v307 = xmmword_25E9920;
  uint64_t v306 = unk_25E9918;
  uint64_t v308 = unk_25E9930;
  long long v309 = xmmword_25E9938;
  long long v311 = xmmword_25E9950;
  uint64_t v310 = unk_25E9948;
  uint64_t v312 = unk_25E9960;
  long long v313 = xmmword_25E9968;
  long long v315 = xmmword_25E9980;
  uint64_t v314 = unk_25E9978;
  uint64_t v316 = unk_25E9990;
  long long v317 = xmmword_25E9998;
  long long v319 = xmmword_25E99B0;
  uint64_t v318 = unk_25E99A8;
  uint64_t v320 = unk_25E99C0;
  uint64_t v322 = unk_25E99D8;
  long long v321 = xmmword_25E99C8;
  sub_4BDC0C(qword_25E99E0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25E99F8 = (uint64_t)operator new(0x19uLL);
  unk_25E9A00 = v280;
  strcpy((char *)qword_25E99F8, "From_User_Location_List");
  byte_25E9A27 = 20;
  strcpy(byte_25E9A10, "Origin_Waypoint_List");
  qword_25E9A28 = (uint64_t)operator new(0x20uLL);
  unk_25E9A30 = v276;
  strcpy((char *)qword_25E9A28, "Intermediate_Waypoint_List");
  unk_25E9A40 = operator new(0x20uLL);
  unk_25E9A48 = v278;
  strcpy(unk_25E9A40, "Destination_Waypoint_List");
  byte_25E9A6F = 15;
  strcpy(byte_25E9A58, "{toDestination}");
  byte_25E9A87 = 13;
  strcpy((char *)&xmmword_25E9A70, "{Destination}");
  byte_25E9A9F = 7;
  strcpy(byte_25E9A88, "To_Home");
  byte_25E9AB7 = 14;
  strcpy(byte_25E9AA0, "To_ContactHome");
  byte_25E9ACF = 7;
  strcpy(byte_25E9AB8, "To_Work");
  byte_25E9AE7 = 14;
  strcpy(byte_25E9AD0, "To_ContactWork");
  strcpy(&byte_25E9AFF, "\nTo_Business");
  strcpy(byte_25E9AE8, "To_Address");
  byte_25E9B17 = 11;
  byte_25E9B2F = 16;
  strcpy(byte_25E9B18, "To_Other_Contact");
  strcpy(&byte_25E9B47, "\tTo_ContactSchool");
  strcpy(byte_25E9B30, "To_School");
  byte_25E9B5F = 16;
  byte_25E9B77 = 17;
  strcpy(byte_25E9B60, "To_PersonLocation");
  qword_25E9B78 = (uint64_t)operator new(0x20uLL);
  unk_25E9B80 = v277;
  strcpy((char *)qword_25E9B78, "To_ContactCustomLabelAddress");
  byte_25E9BA7 = 7;
  strcpy((char *)&dword_25E9B90, "At_Home");
  byte_25E9BBF = 14;
  strcpy((char *)&qword_25E9BA8, "At_ContactHome");
  byte_25E9BD7 = 7;
  strcpy((char *)&dword_25E9BC0, "At_Work");
  byte_25E9BEF = 14;
  strcpy((char *)&qword_25E9BD8, "At_ContactWork");
  strcpy(&byte_25E9C07, "\nAt_Business");
  strcpy((char *)&qword_25E9BF0, "At_Address");
  byte_25E9C1F = 11;
  byte_25E9C37 = 16;
  strcpy(byte_25E9C20, "At_Other_Contact");
  byte_25E9C4F = 4;
  strcpy((char *)&dword_25E9C38, "Home");
  byte_25E9C67 = 11;
  strcpy((char *)&qword_25E9C50 + 7, "Home");
  qword_25E9C50 = *(void *)&v264[16];
  byte_25E9C7F = 4;
  strcpy((char *)&dword_25E9C68, "Work");
  byte_25E9C97 = 11;
  strcpy((char *)&qword_25E9C80 + 7, "Work");
  qword_25E9C80 = *(void *)v264;
  byte_25E9CAF = 7;
  strcpy((char *)&dword_25E9C98, "Address");
  byte_25E9CC7 = 8;
  strcpy((char *)&qword_25E9CB0, "Business");
  byte_25E9CDF = 13;
  qword_25E9CC8 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_25E9CC8 + 5) = *(void *)&v264[32];
  byte_25E9CD5 = 0;
  byte_25E9CF7 = 6;
  strcpy((char *)&dword_25E9CE0, "School");
  byte_25E9D0F = 13;
  strcpy((char *)&qword_25E9CF8, "ContactSchool");
  byte_25E9D27 = 14;
  strcpy((char *)&qword_25E9D10, "PersonLocation");
  qword_25E9D28 = (uint64_t)operator new(0x20uLL);
  xmmword_25E9D30 = v278;
  strcpy((char *)qword_25E9D28, "ContactCustomLabelAddress");
  if (byte_25E9A87 < 0)
  {
    sub_4200(&xmmword_25E9D40, (void *)xmmword_25E9A70, *((unint64_t *)&xmmword_25E9A70 + 1));
  }
  else
  {
    xmmword_25E9D40 = xmmword_25E9A70;
    qword_25E9D50 = unk_25E9A80;
  }
  byte_25E9D6F = 16;
  strcpy((char *)&xmmword_25E9D58, "{PrevExitNumber}");
  byte_25E9D87 = 10;
  strcpy((char *)&qword_25E9D70, "{PrevRoad}");
  qword_25E9D88 = (uint64_t)operator new(0x20uLL);
  unk_25E9D90 = v279;
  strcpy((char *)qword_25E9D88, "{RouteTotalExpectedTime}");
  byte_25E9DB7 = 18;
  strcpy(byte_25E9DA0, "{ChargePercentage}");
  qword_25E9DB8 = (uint64_t)operator new(0x20uLL);
  unk_25E9DC0 = v273;
  strcpy((char *)qword_25E9DB8, "{RemainingChargePercentage}");
  byte_25E9DE7 = 16;
  strcpy(byte_25E9DD0, "{ChargeDuration}");
  byte_25E9DFF = 15;
  strcpy((char *)&qword_25E9DE8, "{ConnectorType}");
  byte_25E9E17 = 19;
  strcpy(byte_25E9E00, "{ChargeStationName}");
  byte_25E9E2F = 7;
  strcpy((char *)&dword_25E9E18, "{Power}");
  byte_25E9E47 = 13;
  strcpy((char *)&qword_25E9E30, "{VehicleName}");
  byte_25E9E5F = 18;
  strcpy((char *)&xmmword_25E9E48, "{AreaIncidentName}");
  byte_25E9E77 = 14;
  strcpy((char *)&qword_25E9E60, "{AreaIncident}");
  byte_25E9E8F = 16;
  strcpy((char *)&xmmword_25E9E78, "{AffectedRegion}");
  byte_25E9EA7 = 21;
  strcpy(byte_25E9E90, "{AreaIncidentWeblink}");
  byte_25E9EBF = 20;
  strcpy((char *)&xmmword_25E9EA8, "{AreaIncidentAgency}");
  byte_25E9ED7 = 11;
  strcpy((char *)&qword_25E9EC0, "{IssueTime}");
  byte_25E9EEF = 12;
  strcpy((char *)&qword_25E9ED8, "{UpdateTime}");
  byte_25E9F07 = 11;
  strcpy((char *)&qword_25E9EF0, "{IssueDate}");
  byte_25E9F1F = 12;
  strcpy((char *)&qword_25E9F08, "{UpdateDate}");
  qword_25E9F20 = (uint64_t)operator new(0x20uLL);
  unk_25E9F28 = v279;
  strcpy((char *)qword_25E9F20, "{AreaIncidentDataSource}");
  byte_25E9F4F = 13;
  strcpy((char *)&qword_25E9F38, "{AreaHectare}");
  byte_25E9F67 = 10;
  strcpy((char *)&qword_25E9F50, "{AreaAcre}");
  qword_25E9F68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E9F70 = v275;
  strcpy((char *)qword_25E9F68, "{WildfirePercentageContained}");
  qword_25E9F80 = (uint64_t)operator new(0x28uLL);
  unk_25E9F88 = v268[2];
  strcpy((char *)qword_25E9F80, "{WildfireExpectedContainmentDate}");
  qword_25E9F98 = (uint64_t)operator new(0x20uLL);
  unk_25E9FA0 = v277;
  strcpy((char *)qword_25E9F98, "{ServerRecommendedRouteName}");
  qword_25E9FB0 = (uint64_t)operator new(0x20uLL);
  unk_25E9FB8 = v277;
  strcpy((char *)qword_25E9FB0, "{ServerNonRecommendedRoute1}");
  qword_25E9FC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25E9FD0 = v277;
  strcpy((char *)qword_25E9FC8, "{ServerNonRecommendedRoute2}");
  byte_25E9FF7 = 12;
  strcpy((char *)&qword_25E9FE0, "{ClientDest}");
  byte_25EA00F = 6;
  strcpy((char *)&dword_25E9FF8, "{Name}");
  qword_25EA010 = (uint64_t)operator new(0x20uLL);
  unk_25EA018 = v268[1];
  strcpy((char *)qword_25EA010, "ProactiveAlert_FasterRouteTitle");
  qword_25EA028 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EA030 = v276;
  strcpy((char *)qword_25EA028, "ProactiveAlert_RoadClosure");
  qword_25EA040 = (uint64_t)operator new(0x30uLL);
  unk_25EA048 = v271;
  strcpy((char *)qword_25EA040, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25EA058 = (uint64_t)operator new(0x28uLL);
  unk_25EA060 = v274;
  strcpy((char *)qword_25EA058, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25EA070 = (uint64_t)operator new(0x28uLL);
  unk_25EA078 = v274;
  strcpy((char *)qword_25EA070, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25EA088 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EA090 = v274;
  strcpy((char *)qword_25EA088, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25EA0A0 = (uint64_t)operator new(0x30uLL);
  unk_25EA0A8 = xmmword_20B93B0;
  strcpy((char *)qword_25EA0A0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25EA0CF = 17;
  strcpy(byte_25EA0B8, "Proactive_Driving");
  strcpy(&byte_25EA0E7, "\n{RouteName}");
  strcpy((char *)&qword_25EA0D0, "_RouteName");
  byte_25EA0FF = 11;
  qword_25EA100 = (uint64_t)operator new(0x28uLL);
  unk_25EA108 = v268[2];
  strcpy((char *)qword_25EA100, "Pass_Traffic_Light_Spoken_Primary");
  qword_25EA118 = (uint64_t)operator new(0x20uLL);
  unk_25EA120 = v275;
  strcpy((char *)qword_25EA118, "Pass_Stop_Sign_Spoken_Primary");
  unk_25EA130 = operator new(0x20uLL);
  unk_25EA138 = v268[0];
  strcpy(unk_25EA130, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25EA15F, "\nBannerBody");
  strcpy(byte_25EA148, "BannerHead");
  strcpy(&byte_25EA177, "\nBannerDescription");
  byte_25EA18F = 17;
  strcpy(&byte_25EA1A7, "\n_Incident");
  strcpy((char *)&qword_25EA190, "VoiceAlert");
  strcpy(&byte_25EA1BF, "\t_Area_Incident");
  byte_25EA1D7 = 14;
  byte_25EA1EF = 15;
  strcpy((char *)&qword_25EA1D8, "_Area_Incidents");
  strcpy(&byte_25EA207, "\t_Crash");
  strcpy((char *)&qword_25EA1F0, "_Accident");
  byte_25EA21F = 6;
  byte_25EA237 = 16;
  strcpy((char *)&xmmword_25EA220, "_Congestion_Zone");
  strcpy(&byte_25EA24F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25EA238, "_Toll_Zone");
  byte_25EA267 = 19;
  BYTE1(qword_25EA278) = 116;
  WORD1(qword_25EA278) = 0;
  HIDWORD(qword_25EA278) = 301989888;
  strcpy(byte_25EA280, "_Construction");
  strcpy((char *)&qword_25EA268, "_Incident_Accide");
  byte_25EA297 = 13;
  byte_25EA2AF = 7;
  strcpy((char *)&dword_25EA298, "_Hazard");
  byte_25EA2C7 = 12;
  strcpy((char *)&qword_25EA2B0, "_LaneClosure");
  byte_25EA2DF = 12;
  strcpy((char *)&qword_25EA2C8, "_LaneTrailer");
  qmemcpy(&byte_25EA2F7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25EA2E0, "_Shoulder");
  qword_25EA308 = 0x1500007200000000;
  *(void *)algn_25EA304 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25EA310, "_Causing_Traffic_Delay");
  HIBYTE(word_25EA326) = 22;
  byte_25EA33F = 6;
  strcpy((char *)&dword_25EA328, "_Timed");
  byte_25EA357 = 12;
  strcpy((char *)&qword_25EA340, "_HasDistance");
  byte_25EA36F = 8;
  strcpy((char *)&qword_25EA358, "_Closure");
  strcpy(&byte_25EA387, "\n_BadRoad");
  strcpy((char *)&qword_25EA370, "_NoReroute");
  byte_25EA39F = 8;
  byte_25EA3B7 = 12;
  strcpy((char *)&qword_25EA3A0, "_TollTrailer");
  byte_25EA3CF = 12;
  strcpy((char *)&qword_25EA3B8, "_BestTrailer");
  byte_25EA3E7 = 8;
  strcpy((char *)&qword_25EA3D0, "_Trailer");
  byte_25EA3FF = 18;
  strcpy((char *)&xmmword_25EA3E8, "_Secondary_Trailer");
  byte_25EA417 = 8;
  strcpy((char *)&qword_25EA400, "_Savings");
  byte_25EA42F = 8;
  strcpy((char *)&qword_25EA418, "_AltRoad");
  byte_25EA447 = 6;
  strcpy((char *)&dword_25EA430, "_Named");
  byte_25EA45F = 6;
  strcpy((char *)&dword_25EA448, "_NAMED");
  byte_25EA477 = 22;
  strcpy((char *)&xmmword_25EA460, "_Named_Suggested_Route");
  qword_25EA490 = 0x1000000000000000;
  xmmword_25EA480 = xmmword_20E81D0;
  byte_25EA4AF = 11;
  strcpy((char *)&qword_25EA498, "_Speed_Trap");
  byte_25EA4C7 = 4;
  strcpy((char *)&dword_25EA4B0, "_UGI");
  byte_25EA4DF = 12;
  strcpy((char *)&qword_25EA4C8, "_Safer_Route");
  qword_25EA4E0 = (uint64_t)operator new(0x20uLL);
  unk_25EA4E8 = v268[1];
  strcpy((char *)qword_25EA4E0, "BlockedRouteByBlockingIncident_");
  qword_25EA4F8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  unk_25EA500 = xmmword_20B9280;
  strcpy((char *)qword_25EA4F8, "BlockedRouteByManeuverRestriction_");
  *(void *)&xmmword_25EA510 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_25EA510 + 8) = v268[0];
  strcpy((char *)xmmword_25EA510, "BlockedRouteByTimeRestriction_");
  qword_25EA528 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EA530 = xmmword_20B8FD0;
  strcpy((char *)qword_25EA528, "SuggestRouteToAvoidBlockingIncident_");
  qword_25EA540 = (uint64_t)operator new(0x30uLL);
  unk_25EA548 = xmmword_20B9380;
  strcpy((char *)qword_25EA540, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25EA558 = (uint64_t)operator new(0x30uLL);
  unk_25EA560 = xmmword_20B93E0;
  strcpy((char *)qword_25EA558, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25EA587 = 1;
  LOWORD(qword_25EA570) = 95;
  strcpy((char *)&xmmword_25EA588, "IncidentsCausingDelay_");
  byte_25EA59F = 22;
  qword_25EA5A0 = (uint64_t)operator new(0x19uLL);
  unk_25EA5A8 = v280;
  strcpy((char *)qword_25EA5A0, "NonVotableRoadIncident_");
  byte_25EA5CF = 20;
  strcpy((char *)&qword_25EA5B8, "VotableRoadIncident_");
  byte_25EA5E7 = 13;
  strcpy((char *)&qword_25EA5D0, "AreaIncident_");
  byte_25EA5FF = 15;
  strcpy((char *)&qword_25EA5E8, "CongestionZone_");
  qword_25EA600 = (uint64_t)operator new(0x20uLL);
  unk_25EA608 = v279;
  strcpy((char *)qword_25EA600, "EVModifiedChargingStops_");
  byte_25EA62F = 13;
  strcpy((char *)&qword_25EA618, "EVDisconnect_");
  byte_25EA647 = 12;
  strcpy((char *)&qword_25EA630, "EVReconnect_");
  qword_25EA648 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EA650 = v277;
  strcpy((char *)qword_25EA648, "EVOfflineToOnlineTransition_");
  byte_25EA677 = 13;
  strcpy((char *)&qword_25EA660, "EVOfflineSAR_");
  byte_25EA68F = 21;
  strcpy((char *)&xmmword_25EA678, "EVTowingNotSupported_");
  byte_25EA6A7 = 18;
  strcpy(algn_25EA690, "EVInfeasibleRoute_");
  qword_25EA6A8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25EA6B0 = xmmword_20B8DF0;
  strcpy((char *)qword_25EA6A8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25EA6C0 = (uint64_t)operator new(0x40uLL);
  unk_25EA6C8 = xmmword_20B98C0;
  strcpy((char *)qword_25EA6C0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25EA6D8 = (uint64_t)operator new(0x30uLL);
  unk_25EA6E0 = v272;
  strcpy((char *)qword_25EA6D8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_25EA6F0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_25EA6F8 = xmmword_20B9A80;
  strcpy((char *)qword_25EA6F0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25EA708 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25EA710 = v271;
  strcpy((char *)qword_25EA708, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  long long v186 = operator new(0x30uLL);
  qword_25EA720 = (uint64_t)v186;
  unk_25EA728 = v272;
  *long long v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25EA738 = (uint64_t)operator new(0x28uLL);
  unk_25EA740 = v270;
  strcpy((char *)qword_25EA738, "SuggestDetourWithHigherArrivalSOC_");
  long long v187 = operator new(0x30uLL);
  qword_25EA750 = (uint64_t)v187;
  unk_25EA758 = *(_OWORD *)&v264[48];
  *long long v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_25EA768 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EA770 = v274;
  strcpy((char *)qword_25EA768, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25EA780 = (uint64_t)operator new(0x28uLL);
  unk_25EA788 = v267;
  strcpy((char *)qword_25EA780, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25EA798 = (uint64_t)operator new(0x20uLL);
  unk_25EA7A0 = v279;
  strcpy((char *)qword_25EA798, "OfflineToOnlineNewRoute_");
  qword_25EA7B0 = (uint64_t)operator new(0x40uLL);
  unk_25EA7B8 = xmmword_20B98C0;
  strcpy((char *)qword_25EA7B0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25EA7DF = 20;
  strcpy(byte_25EA7C8, "LPR_OFFLINE_REROUTE_");
  byte_25EA7F7 = 16;
  strcpy((char *)&xmmword_25EA7E0, "LPR_OFFLINE_SAR_");
  byte_25EA80F = 20;
  strcpy(byte_25EA7F8, "LPR_OFFLINE_REROUTE_");
  byte_25EA827 = 16;
  strcpy((char *)&xmmword_25EA810, "LPR_OFFLINE_SAR_");
  byte_25EA83F = 19;
  strcpy(byte_25EA828, "SuggestFasterRoute_");
  qword_25EA840 = (uint64_t)operator new(0x20uLL);
  unk_25EA848 = v278;
  strcpy((char *)qword_25EA840, "AreaIncidentSaferReroute_");
  byte_25EA86F = 12;
  strcpy((char *)&qword_25EA858, "_Remove_Stop");
  byte_25EA887 = 13;
  strcpy((char *)&qword_25EA870, "_Remove_Stops");
  strcpy(&byte_25EA89F, "\t_Add_Stops");
  strcpy((char *)&qword_25EA888, "_Add_Stop");
  strcpy(&byte_25EA8B7, "\n_Change_Route");
  byte_25EA8CF = 13;
  byte_25EA8E7 = 15;
  strcpy((char *)&qword_25EA8D0, "_Different_Stop");
  byte_25EA8FF = 16;
  strcpy((char *)&xmmword_25EA8E8, "_Different_Stops");
  byte_25EA917 = 15;
  strcpy((char *)&qword_25EA900, "_EV_Remove_Stop");
  byte_25EA92F = 16;
  strcpy((char *)&xmmword_25EA918, "_EV_Remove_Stops");
  byte_25EA947 = 12;
  strcpy((char *)&qword_25EA930, "_EV_Add_Stop");
  byte_25EA95F = 13;
  strcpy((char *)&qword_25EA948, "_EV_Add_Stops");
  byte_25EA977 = 15;
  strcpy((char *)&qword_25EA960, "_EV_Low_Battery");
  byte_25EA98F = 14;
  strcpy((char *)&qword_25EA978, "_EV_Infeasible");
  byte_25EA9A7 = 15;
  strcpy((char *)&qword_25EA990, "_EV_Last_Chance");
  qword_25EA9A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EA9B0 = v279;
  strcpy((char *)qword_25EA9A8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25EA8A8;
  qword_25EA9C0 = (uint64_t)operator new(0x20uLL);
  unk_25EA9C8 = v278;
  strcpy((char *)qword_25EA9C0, "_EV_Low_Battery_Add_Stops");
  qword_25EA9D8 = (uint64_t)operator new(0x19uLL);
  unk_25EA9E0 = v280;
  strcpy((char *)qword_25EA9D8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25EA8B7;
  if (byte_25EA8B7 >= 0) {
    size_t v190 = byte_25EA8B7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_25EA9F8 = v190 + 14;
    unk_25EAA00 = v195 | 0x8000000000000000;
    qword_25EA9F0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    long long v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25EA9F8) = 0;
    WORD1(qword_25EA9F8) = 0;
    HIDWORD(qword_25EA9F8) = 0;
    unk_25EAA00 = 0;
    byte_25EAA07 = v190 + 14;
    strcpy((char *)&qword_25EA9F0, "_EV_Infe");
    long long v192 = (char *)&qword_25EA9F8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25EA8A0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  uint64_t v198 = (char *)operator new(0x20uLL);
  qword_25EAA08 = (uint64_t)v198;
  *(_OWORD *)algn_25EAA10 = v279;
  *(void *)uint64_t v198 = qword_25EA990;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25EA990 + 7);
  *(void *)(v198 + 15) = qword_25EA888;
  v198[23] = word_25EA890;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    int v200 = (uint64_t *)operator new(v201 + 1);
    qword_25EAA28 = v190 + 15;
    unk_25EAA30 = v202 | 0x8000000000000000;
    qword_25EAA20 = (uint64_t)v200;
  }
  else
  {
    int v200 = &qword_25EAA20;
    qword_25EAA28 = 0;
    unk_25EAA30 = 0;
    qword_25EAA20 = 0;
    byte_25EAA37 = v190 + 15;
  }
  *int v200 = qword_25EA990;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25EA990 + 7);
  uint64_t v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25EA8A0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25EA8A0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25EAA4F = 17;
  strcpy((char *)&xmmword_25EAA38, "_EV_Forced_Detour");
  qword_25EAA50 = (uint64_t)operator new(0x20uLL);
  unk_25EAA58 = v278;
  strcpy((char *)qword_25EAA50, "_EV_Higher_Arrival_Charge");
  qword_25EAA68 = (uint64_t)operator new(0x28uLL);
  unk_25EAA70 = xmmword_20B8FD0;
  strcpy((char *)qword_25EAA68, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25EAA97 = 16;
  strcpy(byte_25EAA80, "_EV_Out_Of_Range");
  qword_25EAA98 = (uint64_t)operator new(0x20uLL);
  unk_25EAAA0 = v273;
  strcpy((char *)qword_25EAA98, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25EAAB0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25EAAC6) = 22;
  qword_25EAAC8 = (uint64_t)operator new(0x19uLL);
  unk_25EAAD0 = v280;
  strcpy((char *)qword_25EAAC8, "_EV_Forced_Modify_Stops");
  byte_25EAAF7 = 19;
  strcpy(byte_25EAAE0, "_EV_Forced_Add_Stop");
  byte_25EAB0F = 20;
  strcpy((char *)&xmmword_25EAAF8, "_EV_Forced_Add_Stops");
  byte_25EAB27 = 21;
  strcpy(byte_25EAB10, "_EV_Battery_Info_Lost");
  qword_25EAB28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EAB30 = v278;
  strcpy((char *)qword_25EAB28, "_EV_Battery_Info_Restored");
  qword_25EAB40 = (uint64_t)operator new(0x20uLL);
  unk_25EAB48 = v279;
  strcpy((char *)qword_25EAB40, "_EV_Towing_Not_Supported");
  qword_25EAB58 = (uint64_t)operator new(0x28uLL);
  unk_25EAB60 = v269;
  strcpy((char *)qword_25EAB58, "_EV_Offline_to_Online_Transition");
  byte_25EAB87 = 15;
  strcpy((char *)&qword_25EAB70, "_EV_Offline_SAR");
  qword_25EAB88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EAB90 = v277;
  strcpy((char *)qword_25EAB88, "_Offline_to_Online_New_Route");
  byte_25EABB7 = 12;
  strcpy((char *)&qword_25EABA0, "BannerButton");
  byte_25EABCF = 8;
  strcpy((char *)&qword_25EABB8, "_Dismiss");
  byte_25EABE7 = 3;
  word_25EABD0 = 20319;
  byte_25EABD2 = 75;
  byte_25EABD3 = 0;
  byte_25EABFF = 11;
  strcpy((char *)&qword_25EABE8, "_Still_Here");
  byte_25EAC17 = 8;
  strcpy((char *)&qword_25EAC00, "_Cleared");
  qmemcpy(&byte_25EAC2F, "\nBannerButton", 13);
  strcpy((char *)&qword_25EAC18, "_No_Thanks");
  uint64_t v205 = qword_25EABA8;
  qword_25EAC40 = 0x1400000000000000;
  *(void *)algn_25EAC3C = 0x7373696D7369445FLL;
  qword_25EAC58 = 0xF00000000000000;
  qword_25EAC50 = 0x4B4F5F6E6F7474;
  int v206 = byte_25EA947;
  if (byte_25EA947 >= 0) {
    size_t v207 = byte_25EA947;
  }
  else {
    size_t v207 = qword_25EA938;
  }
  unint64_t v208 = v207 + 12;
  qword_25EAC48 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    char v212 = (char *)operator new(v210 + 1);
    qword_25EAC68 = v207 + 12;
    unk_25EAC70 = v211 | 0x8000000000000000;
    qword_25EAC60 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)char v212 = *(void *)"BannerButton";
    char v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25EAC68) = 0;
    HIWORD(qword_25EAC68) = 0;
    unk_25EAC70 = 0;
    byte_25EAC77 = v207 + 12;
    strcpy((char *)&qword_25EAC60, "BannerButton");
    char v209 = (char *)&qword_25EAC68 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    unint64_t v213 = &qword_25EA930;
  }
  else {
    unint64_t v213 = (uint64_t *)qword_25EA930;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25EA95F;
  if (byte_25EA95F >= 0) {
    size_t v215 = byte_25EA95F;
  }
  else {
    size_t v215 = unk_25EA950;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    int v220 = (char *)operator new(v218 + 1);
    qword_25EAC80 = v215 + 12;
    unk_25EAC88 = v219 | 0x8000000000000000;
    qword_25EAC78 = (uint64_t)v220;
    *(void *)int v220 = qword_25EABA0;
    *((_DWORD *)v220 + 2) = qword_25EABA8;
    unint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25EAC80 = 0;
    unk_25EAC88 = 0;
    byte_25EAC8F = v215 + 12;
    LODWORD(qword_25EAC80) = qword_25EABA8;
    qword_25EAC78 = qword_25EABA0;
    unint64_t v217 = (char *)&qword_25EAC80 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    uint64_t v221 = &qword_25EA948;
  }
  else {
    uint64_t v221 = (uint64_t *)qword_25EA948;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25EA917;
  if (byte_25EA917 >= 0) {
    size_t v223 = byte_25EA917;
  }
  else {
    size_t v223 = unk_25EA908;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25EAC98 = v223 + 12;
    unk_25EACA0 = v227 | 0x8000000000000000;
    qword_25EAC90 = (uint64_t)v228;
    *(void *)v228 = qword_25EABA0;
    *((_DWORD *)v228 + 2) = qword_25EABA8;
    v225 = v228 + 12;
  }
  else
  {
    qword_25EAC98 = 0;
    unk_25EACA0 = 0;
    byte_25EACA7 = v223 + 12;
    LODWORD(qword_25EAC98) = qword_25EABA8;
    qword_25EAC90 = qword_25EABA0;
    v225 = (char *)&qword_25EAC98 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_25EA900;
  }
  else {
    v229 = (uint64_t *)qword_25EA900;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25EABB7;
  if (byte_25EABB7 >= 0) {
    size_t v231 = byte_25EABB7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25EA92F;
  if (byte_25EA92F >= 0) {
    size_t v233 = byte_25EA92F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25EA918 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    long long v235 = &qword_25EACA8;
    qword_25EACB0 = 0;
    unk_25EACB8 = 0;
    qword_25EACA8 = 0;
    byte_25EACBF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  long long v235 = (uint64_t *)operator new(v242 + 1);
  qword_25EACB0 = v233 + v231;
  unk_25EACB8 = v243 | 0x8000000000000000;
  qword_25EACA8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      uint64_t v236 = &qword_25EABA0;
    }
    else {
      uint64_t v236 = (uint64_t *)qword_25EABA0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  unint64_t v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      uint64_t v238 = &xmmword_25EA918;
    }
    else {
      uint64_t v238 = (long long *)xmmword_25EA918;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    int v240 = (uint64_t *)operator new(v244 + 1);
    qword_25EACC8 = v231 + 11;
    unk_25EACD0 = v245 | 0x8000000000000000;
    qword_25EACC0 = (uint64_t)v240;
  }
  else
  {
    int v240 = &qword_25EACC0;
    qword_25EACC8 = 0;
    unk_25EACD0 = 0;
    qword_25EACC0 = 0;
    byte_25EACD7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25EACC0 + 7) = *(_DWORD *)((char *)&qword_25EABE8 + 7);
      qword_25EACC0 = qword_25EABE8;
      BYTE3(qword_25EACC8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25EABA0;
  }
  else {
    long long v246 = (uint64_t *)qword_25EABA0;
  }
  memmove(v240, v246, v231);
  char v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25EABE8 + 7);
  *(void *)char v247 = qword_25EABE8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    char v249 = &qword_25EACD8;
    qword_25EACE0 = 0;
    unk_25EACE8 = 0;
    qword_25EACD8 = 0;
    byte_25EACEF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  char v249 = (uint64_t *)operator new(v262 + 1);
  qword_25EACE0 = v231 + 8;
  unk_25EACE8 = v263 | 0x8000000000000000;
  qword_25EACD8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      char v250 = &qword_25EABA0;
    }
    else {
      char v250 = (uint64_t *)qword_25EABA0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  char v251 = (char *)v249 + v231;
  *(void *)char v251 = qword_25EAC00;
  v251[8] = 0;
  int v252 = byte_25EAC2F;
  if (byte_25EAC2F >= 0) {
    size_t v253 = byte_25EAC2F;
  }
  else {
    size_t v253 = qword_25EAC20;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    int v255 = &qword_25EACF0;
    qword_25EACF8 = 0;
    unk_25EAD00 = 0;
    qword_25EACF0 = 0;
    byte_25EAD07 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  int v255 = (uint64_t *)operator new(v260 + 1);
  qword_25EACF8 = v253 + v231;
  unk_25EAD00 = v261 | 0x8000000000000000;
  qword_25EACF0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25EABA0;
    }
    else {
      long long v256 = (uint64_t *)qword_25EABA0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      long long v258 = &qword_25EAC18;
    }
    else {
      long long v258 = (uint64_t *)qword_25EAC18;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25EAD1F, "\n{newroute}");
  strcpy((char *)&qword_25EAD08, "{roadname}");
  strcpy(&byte_25EAD37, "\n{count}");
  byte_25EAD4F = 7;
  strcpy(&byte_25EAD67, "\n{dur}");
  strcpy((char *)&qword_25EAD50, "{duration}");
  byte_25EAD7F = 5;
  qword_25EAD80 = (uint64_t)operator new(0x20uLL);
  unk_25EAD88 = v276;
  strcpy((char *)qword_25EAD80, "{PleaseProceedWithCaution}");
  byte_25EADAF = 15;
  strcpy((char *)&qword_25EAD98, "{UserRouteName}");
  byte_25EADC7 = 20;
  strcpy((char *)&xmmword_25EADB0, "{SuggestedRouteName}");
  byte_25EADDF = 18;
  strcpy(byte_25EADC8, "Speed_Camera_Ahead");
  qword_25EADE0 = (uint64_t)operator new(0x20uLL);
  unk_25EADE8 = v275;
  strcpy((char *)qword_25EADE0, "Red_Light_Camera_Ahead_Spoken");
  qword_25EADF8 = (uint64_t)operator new(0x20uLL);
  unk_25EAE00 = v275;
  strcpy((char *)qword_25EADF8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25EAE10 = (uint64_t)operator new(0x28uLL);
  unk_25EAE18 = v270;
  strcpy((char *)qword_25EAE10, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25EAE28 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25EAE30 = v265;
  strcpy((char *)qword_25EAE28, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25EAE40 = (uint64_t)operator new(0x20uLL);
  unk_25EAE48 = v277;
  strcpy((char *)qword_25EAE40, "Camera_Ahead_Multiple_Spoken");
  qword_25EAE58 = (uint64_t)operator new(0x30uLL);
  unk_25EAE60 = v266;
  strcpy((char *)qword_25EAE58, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25EAE70 = (char *)operator new(0x30uLL);
  strcpy(qword_25EAE70, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25EAE9F = 16;
  xmmword_25EAE78 = v266;
  strcpy(byte_25EAE88, "_Speed_Limit_Mph");
  byte_25EAEB7 = 16;
  strcpy(byte_25EAEA0, "_Speed_Limit_Kph");
  byte_25EAECF = 11;
  strcpy((char *)&qword_25EAEB8, "Watch_Speed");
  byte_25EAEE7 = 4;
  strcpy((char *)&dword_25EAED0, "_One");
  byte_25EAEFF = 4;
  strcpy((char *)&dword_25EAEE8, "_Two");
  byte_25EAF17 = 4;
  strcpy((char *)&dword_25EAF00, "_Few");
  byte_25EAF2F = 5;
  strcpy((char *)&dword_25EAF18, "_Many");
  byte_25EAF47 = 6;
  strcpy((char *)&dword_25EAF30, "_Other");
  byte_25EAF5F = 4;
  strcpy((char *)&dword_25EAF48, "_ONE");
  byte_25EAF77 = 7;
  strcpy((char *)&dword_25EAF60, "{Speed}");
  byte_25EAF8F = 8;
  strcpy((char *)&qword_25EAF78, "Dismount");
  byte_25EAFA7 = 4;
  strcpy((char *)&dword_25EAF90, "Walk");
  byte_25EAFBF = 5;
  strcpy((char *)&dword_25EAFA8, "Mount");
  byte_25EAFD7 = 7;
  strcpy((char *)&dword_25EAFC0, "Remount");
  strcpy(&byte_25EAFEF, "\t_Crosswalk");
  strcpy((char *)&qword_25EAFD8, "Walk_Road");
  strcpy(&byte_25EB007, "\n_PLURAL");
  byte_25EB01F = 7;
  strcpy(&byte_25EB037, "\n{description1}");
  strcpy((char *)&qword_25EB020, "_SECONDARY");
  byte_25EB04F = 14;
  byte_25EB067 = 14;
  strcpy((char *)&qword_25EB050, "{description2}");
  byte_25EB07F = 21;
  strcpy((char *)&xmmword_25EB068, "TWO_ROAD_DESCRIPTIONS");
  byte_25EB097 = 17;
  strcpy((char *)&xmmword_25EB080, "{SlopePercentage}");
  byte_25EB0AF = 15;
  strcpy((char *)&qword_25EB098, "_Protected_Lane");
  strcpy(&byte_25EB0C7, "\n_Paved_Path");
  strcpy((char *)&qword_25EB0B0, "_Bike_Path");
  byte_25EB0DF = 11;
  byte_25EB0F7 = 15;
  strcpy((char *)&qword_25EB0E0, "_Dedicated_Lane");
  byte_25EB10F = 12;
  strcpy((char *)&qword_25EB0F8, "_Shared_Path");
  strcpy(&byte_25EB127, "\n_UnnamedRoad");
  strcpy((char *)&qword_25EB110, "_Bike_Lane");
  byte_25EB13F = 12;
  byte_25EB157 = 5;
  strcpy((char *)&dword_25EB140, "_Path");
  byte_25EB16F = 6;
  strcpy((char *)&dword_25EB158, "_Trail");
  strcpy(&byte_25EB187, "\t_Plaza");
  strcpy((char *)&qword_25EB170, "_Sidewalk");
  byte_25EB19F = 6;
  byte_25EB1B7 = 15;
  strcpy((char *)&qword_25EB1A0, "_Moving_Walkway");
  byte_25EB1CF = 14;
  strcpy((char *)&qword_25EB1B8, "Two_Stage_Turn");
  byte_25EB1E7 = 16;
  strcpy((char *)&xmmword_25EB1D0, "{OptionalPeriod}");
  byte_25EB1FF = 18;
  strcpy((char *)&xmmword_25EB1E8, "Advisory_Separator");
  byte_25EB217 = 6;
  strcpy((char *)&dword_25EB200, "Period");
  byte_25EB22F = 21;
  strcpy((char *)&xmmword_25EB218, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25EB230, "Advisory_Title_Notices");
  HIBYTE(word_25EB246) = 22;
  byte_25EB25F = 7;
  strcpy((char *)&dword_25EB248, "_DETAIL");
  byte_25EB277 = 17;
  strcpy((char *)&xmmword_25EB260, "_LONG_REGION_LIST");
  byte_25EB28F = 16;
  strcpy((char *)&xmmword_25EB278, "Advisory_Grouped");
  byte_25EB2A7 = 11;
  strcpy((char *)&qword_25EB290, "_Advisories");
  qword_25EB2A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25EB2B0 = v273;
  strcpy((char *)qword_25EB2A8, "Advisory_WILDFIRE_METADATA_");
  byte_25EB2D7 = 8;
  strcpy((char *)&qword_25EB2C0, "Advisory");
  byte_25EB2EF = 13;
  strcpy((char *)&qword_25EB2D8, "MPR_NUM_STOPS");
  byte_25EB307 = 17;
  strcpy(algn_25EB2F0, "EV_CHARGE_STATION");
  byte_25EB31F = 11;
  strcpy((char *)&qword_25EB308, "_NAMED_CITY");
  byte_25EB337 = 5;
  strcpy((char *)&dword_25EB320, "_Stop");
  strcpy(&byte_25EB34F, "\n{StopsCount}");
  strcpy((char *)&qword_25EB338, "{CityName}");
  byte_25EB367 = 12;
  byte_25EB37F = 11;
  strcpy((char *)&qword_25EB368, "_With_Other");
  byte_25EB397 = 15;
  strcpy((char *)&qword_25EB380, "{DepartureTime}");
  qword_25EB398 = (uint64_t)operator new(0x28uLL);
  unk_25EB3A0 = v274;
  strcpy((char *)qword_25EB398, "Ending_Charge_Station_Port_Availability");
  qword_25EB3B0 = (uint64_t)operator new(0x28uLL);
  unk_25EB3B8 = v267;
  strcpy((char *)qword_25EB3B0, "Ending_Charge_Station_No_Availability");
  qword_25EB3C8 = (uint64_t)operator new(0x28uLL);
  unk_25EB3D0 = v270;
  strcpy((char *)qword_25EB3C8, "Ending_Charge_Station_No_Real_Time");
  byte_25EB3F7 = 16;
  strcpy(byte_25EB3E0, "{AvailablePorts}");
  byte_25EB40F = 12;
  strcpy((char *)&qword_25EB3F8, "{TotalPorts}");
  byte_25EB427 = 14;
  strcpy((char *)&qword_25EB410, "{ManeuverIcon}");
  qword_25EB428 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25EB430 = xmmword_20B9A60;
  strcpy((char *)qword_25EB428, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25EB440 = (uint64_t)operator new(0x20uLL);
  unk_25EB448 = v273;
  strcpy((char *)qword_25EB440, "Walking_Destination_Unnamed");
  qword_25EB458 = (uint64_t)operator new(0x20uLL);
  unk_25EB460 = v275;
  strcpy((char *)qword_25EB458, "TrafficDelay_Label_Title_Sign");
  qword_25EB470 = (uint64_t)operator new(0x20uLL);
  unk_25EB478 = v277;
  strcpy((char *)qword_25EB470, "Special_Guidance_Instruction");
  byte_25EB49F = 2;
  strcpy((char *)&word_25EB488, "CZ");
  byte_25EB4B7 = 3;
  dword_25EB4A0 = 5919811;
  unk_25EB4CF = 3;
  dword_25EB4B8 = 6243649;
  byte_25EB4E7 = 0;
  byte_25EB4FF = 7;
  strcpy((char *)&dword_25EB4E8, "TRANSIT");
  byte_25EB517 = 7;
  strcpy((char *)&dword_25EB500, "OFFLINE");
  qword_25EB518 = (uint64_t)operator new(0x28uLL);
  unk_25EB520 = v265;
  strcpy((char *)qword_25EB518, "Advisory_Card_French_Climate_Law_Title");
  qword_25EB530 = (uint64_t)operator new(0x30uLL);
  unk_25EB538 = xmmword_20B93C0;
  strcpy((char *)qword_25EB530, "Advisory_Card_French_Climate_Law_Details");
  qword_25EB548 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25EB550 = v271;
  strcpy((char *)qword_25EB548, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25EB560 = (uint64_t)operator new(0x20uLL);
  unk_25EB568 = v277;
  strcpy((char *)qword_25EB560, "{ClimateLawLearnMoreWeblink}");
  byte_25EB58F = 3;
  dword_25EB578 = 4280902;
  qword_25EB590 = (uint64_t)operator new(0x70uLL);
  *(_OWORD *)algn_25EB598 = xmmword_20E81E0;
  strcpy((char *)qword_25EB590, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_DD49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

void sub_DD4CD0(uint64_t a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  *(void *)unint64_t v33 = 0;
  *(void *)&char v33[8] = &off_2439090;
  sub_3E7814(a3, (__n128 *)v33);
  sub_DDDA70((uint64_t)v41, a1, 4u, (uint64_t)a3);
  if ((sub_DBD4AC(a1, a2) & 1) == 0)
  {
    unint64_t v6 = (void **)operator new(0x28uLL);
    int v39 = v6;
    long long v40 = xmmword_20B9240;
    strcpy((char *)v6, "Service does not support EV requests.");
    sub_DD5428((uint64_t)v33, 5u, (long long *)&v39);
    sub_DDE010((uint64_t)v41, (uint64_t)v33);
    uint64_t v7 = *(void *)&v33[16];
    if (*(void *)&v33[16])
    {
      uint64_t v8 = v34;
      uint64_t v9 = *(void **)&v33[16];
      if (v34 != *(void *)&v33[16])
      {
        do
        {
          if (*(char *)(v8 - 1) < 0) {
            operator delete(*(void **)(v8 - 24));
          }
          v8 -= 32;
        }
        while (v8 != v7);
        uint64_t v9 = *(void **)&v33[16];
      }
      uint64_t v34 = v7;
      operator delete(v9);
    }
    operator delete(v6);
  }
  if (sub_DB7034(a1) != 8) {
    goto LABEL_24;
  }
  v33[23] = 17;
  strcpy(v33, "RequestValidation");
  int v39 = 0;
  long long v40 = 0uLL;
  long long v10 = sub_374CDC(a2, (uint64_t)v33, (uint64_t *)&v39);
  int v37 = (char *)operator new(0x20uLL);
  long long v38 = xmmword_20B9800;
  strcpy(v37, "support_change_anchor_requests");
  BOOL v11 = sub_29D62C(v10, (uint64_t)&v37);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37);
  }
  int v12 = v39;
  if (v39)
  {
    size_t v13 = (void **)v40;
    if ((void **)v40 == v39)
    {
      *(void *)&long long v40 = v39;
      unint64_t v14 = v39;
    }
    else
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      unint64_t v14 = v39;
      *(void *)&long long v40 = v12;
    }
    operator delete(v14);
  }
  if ((v33[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v33);
    if (!v11) {
      goto LABEL_39;
    }
LABEL_24:
    if (*(int *)(a1 + 56) < 1) {
      goto LABEL_52;
    }
    goto LABEL_25;
  }
  if (v11) {
    goto LABEL_24;
  }
LABEL_39:
  uint64_t v19 = (void **)operator new(0x30uLL);
  int v39 = v19;
  long long v40 = xmmword_20B9A40;
  strcpy((char *)v19, "Change-anchors requests are not supported.");
  sub_DD5428((uint64_t)v33, 4u, (long long *)&v39);
  sub_DDE010((uint64_t)v41, (uint64_t)v33);
  uint64_t v20 = *(void *)&v33[16];
  if (*(void *)&v33[16])
  {
    uint64_t v21 = v34;
    long long v22 = *(void **)&v33[16];
    if (v34 != *(void *)&v33[16])
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 32;
      }
      while (v21 != v20);
      long long v22 = *(void **)&v33[16];
    }
    uint64_t v34 = v20;
    operator delete(v22);
  }
  operator delete(v19);
  if (*(int *)(a1 + 56) >= 1)
  {
LABEL_25:
    if (*(int *)(a1 + 104) < 1)
    {
      uint64_t v15 = (void **)operator new(0x30uLL);
      int v39 = v15;
      long long v40 = xmmword_20B93C0;
      strcpy((char *)v15, "Request uses deprecated waypoint format.");
      sub_DD5428((uint64_t)v33, 4u, (long long *)&v39);
      sub_DDE010((uint64_t)v41, (uint64_t)v33);
      uint64_t v16 = *(void *)&v33[16];
      if (*(void *)&v33[16])
      {
        uint64_t v17 = v34;
        unint64_t v18 = *(void **)&v33[16];
        if (v34 != *(void *)&v33[16])
        {
          do
          {
            if (*(char *)(v17 - 1) < 0) {
              operator delete(*(void **)(v17 - 24));
            }
            v17 -= 32;
          }
          while (v17 != v16);
          unint64_t v18 = *(void **)&v33[16];
        }
        uint64_t v34 = v16;
        operator delete(v18);
      }
      operator delete(v15);
    }
    else if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v33);
      sub_188FC78(v33, (uint64_t)"Got a DirectionsRequest with current and deprecated waypoints.", 62);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v39, 1u);
      if (SHIBYTE(v40) < 0) {
        operator delete(v39);
      }
      if (v36 < 0) {
        operator delete(v35);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
LABEL_52:
  if (*(void *)(a1 + 328)) {
    int v23 = *(uint64_t (****)())(a1 + 328);
  }
  else {
    int v23 = &off_2539290;
  }
  size_t v24 = *((int *)v23 + 22);
  if (!v24
    || ((v25 = (__int32 *)v23[12], unint64_t v26 = &v25[v24], (v27 = wmemchr(v25, 0, v24)) != 0) ? (v28 = v27) : (v28 = v26),
        v28 != (__int32 *)((char *)v23[12] + 4 * *((int *)v23 + 22))))
  {
    if ((v43 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_61;
  }
  uint64_t v29 = (void **)operator new(0x50uLL);
  int v39 = v29;
  long long v40 = xmmword_20B9A50;
  strcpy((char *)v29, "None of the client supported elevation models are supported by this service.");
  sub_DD5428((uint64_t)v33, 4u, (long long *)&v39);
  sub_DDE010((uint64_t)v41, (uint64_t)v33);
  uint64_t v30 = *(void *)&v33[16];
  if (*(void *)&v33[16])
  {
    uint64_t v31 = v34;
    size_t v32 = *(void **)&v33[16];
    if (v34 != *(void *)&v33[16])
    {
      do
      {
        if (*(char *)(v31 - 1) < 0) {
          operator delete(*(void **)(v31 - 24));
        }
        v31 -= 32;
      }
      while (v31 != v30);
      size_t v32 = *(void **)&v33[16];
    }
    uint64_t v34 = v30;
    operator delete(v32);
  }
  operator delete(v29);
  if (v43 < 0) {
LABEL_61:
  }
    operator delete(v42);
}

void sub_DD52B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v15 - 105) < 0) {
    operator delete(*(void **)(v15 - 128));
  }
  sub_111ECAC((uint64_t)&__p);
  if (*(char *)(v15 - 73) < 0)
  {
    operator delete(*(void **)(v15 - 96));
    sub_C7E3C8(v14);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v14);
  _Unwind_Resume(a1);
}

void sub_DD5428(uint64_t a1, unsigned int a2, long long *a3)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = &off_2439090;
  v9[0] = 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&v10, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  sub_3E7DA4(&__p, (uint64_t)v9, 1uLL);
  sub_3E787C(a1, &v8, &__p);
  unint64_t v4 = __p.n128_u64[0];
  if (__p.n128_u64[0])
  {
    unint64_t v5 = __p.n128_u64[1];
    unint64_t v6 = (void *)__p.n128_u64[0];
    if (__p.n128_u64[1] != __p.n128_u64[0])
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      unint64_t v6 = (void *)__p.n128_u64[0];
    }
    __p.n128_u64[1] = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

void sub_DD5540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_DD556C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  size_t v25 = 0;
  v26[0] = &off_2439090;
  sub_3E7814(a4, (__n128 *)&v25);
  sub_DDE000((uint64_t)v32, a1, 4u, (uint64_t)a4);
  if (*(unsigned char *)(nullsub_1(a2) + 128))
  {
    uint64_t v8 = nullsub_1(a2);
    if (!*(unsigned char *)(v8 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    int v9 = sub_491B18(v8);
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned char *)(nullsub_1(a2) + 128))
  {
    uint64_t v10 = nullsub_1(a2);
    if (!*(unsigned char *)(v10 + 128))
    {
      size_t v24 = __cxa_allocate_exception(8uLL);
      void *v24 = &off_2439078;
    }
    int v11 = sub_491B20(v10);
  }
  else
  {
    int v11 = 0;
  }
  BOOL v13 = v9 == 2 && v11 == 2;
  size_t v25 = operator new(0x19uLL);
  *(_OWORD *)unint64_t v26 = xmmword_20B9250;
  strcpy((char *)v25, "DrivingDirectionsUpdate");
  uint64_t v30 = 0;
  long long v31 = 0uLL;
  uint64_t v14 = sub_374CDC(a3, (uint64_t)&v25, (uint64_t *)&v30);
  __n128 __p = operator new(0x30uLL);
  long long v29 = xmmword_20B9A40;
  strcpy((char *)__p, "disabled_for_user_routes_with_live_traffic");
  BOOL v15 = sub_29D62C(v14, (uint64_t)&__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p);
  }
  uint64_t v16 = (void **)v30;
  if (v30)
  {
    uint64_t v17 = (void **)v31;
    unint64_t v18 = v30;
    if ((void *)v31 != v30)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      unint64_t v18 = v30;
    }
    *(void *)&long long v31 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v26[1]) < 0)
  {
    operator delete(v25);
    if (v13 || !v15)
    {
LABEL_27:
      if ((v34 & 0x80000000) == 0) {
        return;
      }
LABEL_39:
      operator delete(v33);
      return;
    }
  }
  else if (v13 || !v15)
  {
    goto LABEL_27;
  }
  uint64_t v19 = operator new(0x48uLL);
  uint64_t v30 = v19;
  long long v31 = xmmword_20B9AA0;
  strcpy((char *)v19, "Service does not support ETAU for routes with traffic information.");
  sub_DD5428((uint64_t)&v25, 4u, (long long *)&v30);
  sub_DDE010((uint64_t)v32, (uint64_t)&v25);
  uint64_t v20 = (void **)v26[1];
  if (v26[1])
  {
    uint64_t v21 = v27;
    long long v22 = v26[1];
    if (v27 != v26[1])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      long long v22 = v26[1];
    }
    uint64_t v27 = v20;
    operator delete(v22);
  }
  operator delete(v19);
  if (v34 < 0) {
    goto LABEL_39;
  }
}

void sub_DD58BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  sub_C7E3C8((uint64_t)&a10);
  operator delete(v26);
  if ((*(char *)(v27 - 57) & 0x80000000) == 0)
  {
    sub_C7E3C8(v25);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v27 - 80));
  sub_C7E3C8(v25);
  _Unwind_Resume(a1);
}

void sub_DD59BC(_DWORD *a1@<X0>, __n128 *a2@<X8>)
{
  v12.n128_u64[0] = 0;
  v12.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a2, &v12);
  sub_DDDD38((uint64_t)v17, (uint64_t)a1, 4u, (uint64_t)a2);
  int v4 = a1[10];
  if ((v4 & 0x20) != 0)
  {
    if ((v4 & 0x100) == 0 || (int)a1[20] <= 0) {
      goto LABEL_15;
    }
  }
  else
  {
    int v5 = a1[14];
    if ((v4 & 0x100) == 0)
    {
      if (v5 <= 0) {
        goto LABEL_24;
      }
      goto LABEL_15;
    }
    if (v5 <= 0) {
      goto LABEL_24;
    }
    if ((int)a1[20] < 1)
    {
LABEL_15:
      unint64_t v6 = operator new(0x30uLL);
      __n128 __p = v6;
      long long v11 = xmmword_20B93C0;
      strcpy((char *)v6, "Request uses deprecated waypoint format.");
      sub_DD5428((uint64_t)&v12, 4u, (long long *)&__p);
      sub_DDE010((uint64_t)v17, (uint64_t)&v12);
      uint64_t v7 = (void **)v13;
      if (v13)
      {
        uint64_t v8 = v14;
        int v9 = v13;
        if (v14 != v13)
        {
          do
          {
            if (*((char *)v8 - 1) < 0) {
              operator delete(*(v8 - 3));
            }
            v8 -= 4;
          }
          while (v8 != v7);
          int v9 = v13;
        }
        uint64_t v14 = v7;
        operator delete(v9);
      }
      operator delete(v6);
      goto LABEL_24;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v12);
    sub_188FC78(&v12, (uint64_t)"Got an ETARequest with current and deprecated waypoints.", 56);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_24:
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_DD5C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v17 - 41) < 0)
  {
    operator delete(*(void **)(v17 - 64));
    sub_C7E3C8(v16);
    _Unwind_Resume(a1);
  }
  sub_C7E3C8(v16);
  _Unwind_Resume(a1);
}

void sub_DD5CE0()
{
  unk_25EB657 = 16641;
  word_25EB640 = 65;
  byte_25EB66F = 1;
  byte_25EB659 = 0;
}

void sub_DD5D08(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    unint64_t v4 = *(void *)(a1 + 280) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      if (*(void *)(v4 + 8))
      {
LABEL_4:
        sub_10F5D3C((uint64_t)&v25, 0, 0);
        if (sub_1880FAC(&v25, *(void *)(a1 + 280) & 0xFFFFFFFFFFFFFFFELL))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
          sub_3E7814(a2, (__n128 *)&__p);
LABEL_42:
          sub_10F6120(&v25);
          return;
        }
        std::operator+<char>();
        __n128 v12 = std::string::append(&__p, " with a malformed session_state.");
        BOOL v13 = (void *)v12->__r_.__value_.__r.__words[0];
        unint64_t size = v12->__r_.__value_.__l.__size_;
        v21[0] = v12->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
        int v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          *(void *)&long long v20 = 7;
          *((void *)&v20 + 1) = &off_2439090;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if ((v15 & 0x80000000) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          *(void *)&long long v20 = 7;
          *((void *)&v20 + 1) = &off_2439090;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if ((v15 & 0x80000000) == 0)
          {
LABEL_27:
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
            __p.__r_.__value_.__r.__words[2] = size;
            *(_DWORD *)int v23 = v21[0];
            *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v21 + 3);
            char v24 = v15;
LABEL_30:
            sub_3E7DA4(&v19, (uint64_t)&__p, 1uLL);
            sub_3E787C((uint64_t)a2, &v20, &v19);
            unint64_t v16 = v19.n128_u64[0];
            if (v19.n128_u64[0])
            {
              unint64_t v17 = v19.n128_u64[1];
              unint64_t v18 = (void *)v19.n128_u64[0];
              if (v19.n128_u64[1] != v19.n128_u64[0])
              {
                do
                {
                  if (*(char *)(v17 - 1) < 0) {
                    operator delete(*(void **)(v17 - 24));
                  }
                  v17 -= 32;
                }
                while (v17 != v16);
                unint64_t v18 = (void *)v19.n128_u64[0];
              }
              v19.n128_u64[1] = v16;
              operator delete(v18);
            }
            if (v24 < 0) {
              operator delete((void *)__p.__r_.__value_.__l.__size_);
            }
            if (v15 < 0) {
              operator delete(v13);
            }
            goto LABEL_42;
          }
        }
        sub_4200(&__p.__r_.__value_.__s.__data_[8], v13, size);
        goto LABEL_30;
      }
    }
    else if (*(unsigned char *)(v4 + 23))
    {
      goto LABEL_4;
    }
  }
  std::operator+<char>();
  int v5 = std::string::append(&v25, " with missing session_state where routing expects one.");
  unint64_t v6 = (void *)v5->__r_.__value_.__r.__words[0];
  unint64_t v7 = v5->__r_.__value_.__l.__size_;
  LODWORD(v20) = v5->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v20 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
  int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    v19.n128_u64[0] = 6;
    v19.n128_u64[1] = (unint64_t)&off_2439090;
    v25.__r_.__value_.__s.__data_[0] = 0;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    v19.n128_u64[0] = 6;
    v19.n128_u64[1] = (unint64_t)&off_2439090;
    v25.__r_.__value_.__s.__data_[0] = 0;
    if ((v8 & 0x80000000) == 0)
    {
LABEL_9:
      v25.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
      v25.__r_.__value_.__r.__words[2] = v7;
      *(_DWORD *)unint64_t v26 = v20;
      *(_DWORD *)&v26[3] = *(_DWORD *)((char *)&v20 + 3);
      char v27 = v8;
      goto LABEL_12;
    }
  }
  sub_4200(&v25.__r_.__value_.__s.__data_[8], v6, v7);
LABEL_12:
  sub_3E7DA4(&__p, (uint64_t)&v25, 1uLL);
  sub_3E787C((uint64_t)a2, &v19, (__n128 *)&__p);
  std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 32;
      }
      while (v10 != v9);
      long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v9;
    operator delete(v11);
  }
  if ((v27 & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v6);
    return;
  }
  operator delete((void *)v25.__r_.__value_.__l.__size_);
  if (v8 < 0) {
    goto LABEL_24;
  }
}

void sub_DD6094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  operator delete(v24);
  sub_10F6120(&a24);
  _Unwind_Resume(a1);
}

void sub_DD60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_10F6120(&a24);
    _Unwind_Resume(a1);
  }
  sub_10F6120(&a24);
  _Unwind_Resume(a1);
}

void sub_DD6100()
{
}

void sub_DD6130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  sub_C725D8(&a17);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v31 < 0)
  {
    operator delete(v30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_DD6190(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    unint64_t v4 = *(void *)(a1 + 248) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      if (*(void *)(v4 + 8))
      {
LABEL_4:
        sub_10F5D3C((uint64_t)&v25, 0, 0);
        if (sub_1880FAC(&v25, *(void *)(a1 + 248) & 0xFFFFFFFFFFFFFFFELL))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
          sub_3E7814(a2, (__n128 *)&__p);
LABEL_42:
          sub_10F6120(&v25);
          return;
        }
        std::operator+<char>();
        __n128 v12 = std::string::append(&__p, " with a malformed session_state.");
        BOOL v13 = (void *)v12->__r_.__value_.__r.__words[0];
        unint64_t size = v12->__r_.__value_.__l.__size_;
        v21[0] = v12->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
        int v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          *(void *)&long long v20 = 7;
          *((void *)&v20 + 1) = &off_2439090;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if ((v15 & 0x80000000) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          *(void *)&long long v20 = 7;
          *((void *)&v20 + 1) = &off_2439090;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if ((v15 & 0x80000000) == 0)
          {
LABEL_27:
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
            __p.__r_.__value_.__r.__words[2] = size;
            *(_DWORD *)int v23 = v21[0];
            *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v21 + 3);
            char v24 = v15;
LABEL_30:
            sub_3E7DA4(&v19, (uint64_t)&__p, 1uLL);
            sub_3E787C((uint64_t)a2, &v20, &v19);
            unint64_t v16 = v19.n128_u64[0];
            if (v19.n128_u64[0])
            {
              unint64_t v17 = v19.n128_u64[1];
              unint64_t v18 = (void *)v19.n128_u64[0];
              if (v19.n128_u64[1] != v19.n128_u64[0])
              {
                do
                {
                  if (*(char *)(v17 - 1) < 0) {
                    operator delete(*(void **)(v17 - 24));
                  }
                  v17 -= 32;
                }
                while (v17 != v16);
                unint64_t v18 = (void *)v19.n128_u64[0];
              }
              v19.n128_u64[1] = v16;
              operator delete(v18);
            }
            if (v24 < 0) {
              operator delete((void *)__p.__r_.__value_.__l.__size_);
            }
            if (v15 < 0) {
              operator delete(v13);
            }
            goto LABEL_42;
          }
        }
        sub_4200(&__p.__r_.__value_.__s.__data_[8], v13, size);
        goto LABEL_30;
      }
    }
    else if (*(unsigned char *)(v4 + 23))
    {
      goto LABEL_4;
    }
  }
  std::operator+<char>();
  int v5 = std::string::append(&v25, " with missing session_state where routing expects one.");
  unint64_t v6 = (void *)v5->__r_.__value_.__r.__words[0];
  unint64_t v7 = v5->__r_.__value_.__l.__size_;
  LODWORD(v20) = v5->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)&v20 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
  int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    v19.n128_u64[0] = 6;
    v19.n128_u64[1] = (unint64_t)&off_2439090;
    v25.__r_.__value_.__s.__data_[0] = 0;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    v19.n128_u64[0] = 6;
    v19.n128_u64[1] = (unint64_t)&off_2439090;
    v25.__r_.__value_.__s.__data_[0] = 0;
    if ((v8 & 0x80000000) == 0)
    {
LABEL_9:
      v25.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
      v25.__r_.__value_.__r.__words[2] = v7;
      *(_DWORD *)unint64_t v26 = v20;
      *(_DWORD *)&v26[3] = *(_DWORD *)((char *)&v20 + 3);
      char v27 = v8;
      goto LABEL_12;
    }
  }
  sub_4200(&v25.__r_.__value_.__s.__data_[8], v6, v7);
LABEL_12:
  sub_3E7DA4(&__p, (uint64_t)&v25, 1uLL);
  sub_3E787C((uint64_t)a2, &v19, (__n128 *)&__p);
  std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 32;
      }
      while (v10 != v9);
      long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v9;
    operator delete(v11);
  }
  if ((v27 & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v6);
    return;
  }
  operator delete((void *)v25.__r_.__value_.__l.__size_);
  if (v8 < 0) {
    goto LABEL_24;
  }
}

void sub_DD651C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  operator delete(v24);
  sub_10F6120(&a24);
  _Unwind_Resume(a1);
}

void sub_DD6564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_10F6120(&a24);
    _Unwind_Resume(a1);
  }
  sub_10F6120(&a24);
  _Unwind_Resume(a1);
}

void sub_DD6588()
{
}

void sub_DD65B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  sub_C725D8(&a17);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v31 < 0)
  {
    operator delete(v30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_DD6618(void *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v28.n128_u64[0] = 0;
  v28.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &v28);
  sub_DDDA70((uint64_t)&v28, (uint64_t)a1, a2, (uint64_t)a3);
  if (sub_51D60((unsigned __int8 *)&v28))
  {
    unint64_t v6 = (uint64_t (***)())a1[41];
    if (!v6) {
      unint64_t v6 = &off_2539290;
    }
    if (!*((unsigned char *)v6 + 230))
    {
      unint64_t v7 = (uint64_t (***)())a1[38];
      if (!v7) {
        unint64_t v7 = &off_2535C50;
      }
      int v8 = (uint64_t (***)())v7[11];
      if (!v8) {
        int v8 = &off_2536408;
      }
      std::string::size_type v9 = (uint64_t (***)())v8[4];
      if (!v9) {
        std::string::size_type v9 = &off_2536398;
      }
      if (((_BYTE)v9[2] & 2) != 0)
      {
        std::string __p = operator new(0x58uLL);
        long long v27 = xmmword_20F0560;
        strcpy((char *)__p, "EV info specified in request, but EV support is not indicated in client capabilities.");
        sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
      }
    }
    if ((sub_DB6AAC((uint64_t)a1) & 1) == 0)
    {
      if (sub_DB7034((uint64_t)a1) == 7)
      {
        std::string __p = operator new(0x58uLL);
        long long v27 = xmmword_20B9980;
        strcpy((char *)__p, "Request for changing waypoints does not indicate MSR support in client capabilities.");
        sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
      }
      std::string::size_type v10 = (uint64_t (***)())a1[49];
      if (!v10) {
        std::string::size_type v10 = &off_25351C0;
      }
      uint64_t v11 = *((unsigned int *)v10 + 8);
      if ((int)v11 >= 2)
      {
        __n128 v12 = v10[5];
        if (v12) {
          BOOL v13 = v12 + 1;
        }
        else {
          BOOL v13 = 0;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v15 = 8 * v11 - 8;
        while (1)
        {
          unint64_t v16 = (uint64_t (***)())*((void *)*v14 + 9);
          if (!v16) {
            unint64_t v16 = &off_25352D0;
          }
          if (*((_DWORD *)v16 + 26) == 1) {
            break;
          }
          ++v14;
          v15 -= 8;
          if (!v15) {
            goto LABEL_33;
          }
        }
        if (!sub_DBD3E8((uint64_t)a1))
        {
          std::string __p = operator new(0x80uLL);
          long long v27 = xmmword_20F0610;
          strcpy((char *)__p, "Request contains user route with at least one intermediate USER waypoint, but client capabilities do not indicate MSR support.");
          sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p);
          }
        }
      }
    }
LABEL_33:
    unint64_t v17 = a1[41] ? (uint64_t (***)())a1[41] : &off_2539290;
    uint64_t v18 = *((int *)v17 + 18);
    if (v18)
    {
      int v19 = 0;
      long long v20 = (unsigned int *)v17[10];
      for (uint64_t i = 4 * v18; i; i -= 4)
      {
        uint64_t v22 = sub_7BB78(*v20);
        if (v22 == 5
          && (std::string __p = operator new(0x68uLL),
              long long v27 = xmmword_20F0620,
              strcpy((char *)__p, "The field clientCapabilities.supports_multipoint_routing contains an unknown or unsupported entry."), sub_DDE278((uint64_t)&v28, 5, (long long *)&__p), SHIBYTE(v27) < 0))
        {
          operator delete(__p);
          int v23 = 32;
          if ((v19 & 0x20) != 0)
          {
LABEL_42:
            sub_7B8BC(v22, (char *)v24);
            sub_DD6AA0("The field clientCapabilities.supports_multipoint_routing contains duplicate entry for ", (uint64_t)v24);
            if (v25 < 0) {
              operator delete(v24[0]);
            }
            sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
            if (SHIBYTE(v27) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          int v23 = 1 << v22;
          if (((1 << v22) & v19) != 0) {
            goto LABEL_42;
          }
        }
        v19 |= v23;
        ++v20;
      }
    }
  }
  if (v29 < 0) {
    operator delete((void *)v28.n128_u64[1]);
  }
}

void sub_DD6A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_C7E3C8(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_DD6AA0(const char *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v10);
  size_t v4 = strlen(a1);
  sub_188FC78(v11, (uint64_t)a1, v4);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  sub_188FC78(v11, v6, v7);
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DD6C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DD6C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DD6C6C(void *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v28.n128_u64[0] = 0;
  v28.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &v28);
  sub_DDE000((uint64_t)&v28, (uint64_t)a1, a2, (uint64_t)a3);
  if (sub_51D60((unsigned __int8 *)&v28))
  {
    uint64_t v6 = (uint64_t (***)())a1[37];
    if (!v6) {
      uint64_t v6 = &off_2539290;
    }
    if (!*((unsigned char *)v6 + 230))
    {
      uint64_t v7 = (uint64_t (***)())a1[36];
      if (!v7) {
        uint64_t v7 = &off_2535C50;
      }
      uint64_t v8 = (uint64_t (***)())v7[11];
      if (!v8) {
        uint64_t v8 = &off_2536408;
      }
      std::string::size_type v9 = (uint64_t (***)())v8[4];
      if (!v9) {
        std::string::size_type v9 = &off_2536398;
      }
      if (((_BYTE)v9[2] & 2) != 0)
      {
        std::string __p = operator new(0x58uLL);
        long long v27 = xmmword_20F0560;
        strcpy((char *)__p, "EV info specified in request, but EV support is not indicated in client capabilities.");
        sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
      }
    }
    if ((sub_DB88A4((uint64_t)a1) & 1) == 0)
    {
      if (sub_35E640() == 7)
      {
        std::string __p = operator new(0x58uLL);
        long long v27 = xmmword_20B9980;
        strcpy((char *)__p, "Request for changing waypoints does not indicate MSR support in client capabilities.");
        sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
      }
      std::string::size_type v10 = (uint64_t (***)())a1[42];
      if (!v10) {
        std::string::size_type v10 = &off_2536C78;
      }
      uint64_t v11 = *((unsigned int *)v10 + 8);
      if ((int)v11 >= 2)
      {
        char v12 = v10[5];
        if (v12) {
          BOOL v13 = v12 + 1;
        }
        else {
          BOOL v13 = 0;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v15 = 8 * v11 - 8;
        while (1)
        {
          unint64_t v16 = (uint64_t (***)())*((void *)*v14 + 60);
          if (!v16) {
            unint64_t v16 = &off_25352D0;
          }
          if (*((_DWORD *)v16 + 26) == 1) {
            break;
          }
          ++v14;
          v15 -= 8;
          if (!v15) {
            goto LABEL_33;
          }
        }
        if ((sub_35E640() & 1) == 0)
        {
          std::string __p = operator new(0x80uLL);
          long long v27 = xmmword_20F0610;
          strcpy((char *)__p, "Request contains user route with at least one intermediate USER waypoint, but client capabilities do not indicate MSR support.");
          sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p);
          }
        }
      }
    }
LABEL_33:
    unint64_t v17 = a1[37] ? (uint64_t (***)())a1[37] : &off_2539290;
    uint64_t v18 = *((int *)v17 + 18);
    if (v18)
    {
      int v19 = 0;
      long long v20 = (unsigned int *)v17[10];
      for (uint64_t i = 4 * v18; i; i -= 4)
      {
        uint64_t v22 = sub_7BB78(*v20);
        if (v22 == 5
          && (std::string __p = operator new(0x68uLL),
              long long v27 = xmmword_20F0620,
              strcpy((char *)__p, "The field clientCapabilities.supports_multipoint_routing contains an unknown or unsupported entry."), sub_DDE278((uint64_t)&v28, 5, (long long *)&__p), SHIBYTE(v27) < 0))
        {
          operator delete(__p);
          int v23 = 32;
          if ((v19 & 0x20) != 0)
          {
LABEL_42:
            sub_7B8BC(v22, (char *)v24);
            sub_DD6AA0("The field clientCapabilities.supports_multipoint_routing contains duplicate entry for ", (uint64_t)v24);
            if (v25 < 0) {
              operator delete(v24[0]);
            }
            sub_DDE278((uint64_t)&v28, 5, (long long *)&__p);
            if (SHIBYTE(v27) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          int v23 = 1 << v22;
          if (((1 << v22) & v19) != 0) {
            goto LABEL_42;
          }
        }
        v19 |= v23;
        ++v20;
      }
    }
  }
  if (v29 < 0) {
    operator delete((void *)v28.n128_u64[1]);
  }
}

void sub_DD7060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_C7E3C8(v30);
  _Unwind_Resume(a1);
}

void sub_DD70F4(void *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v27.n128_u64[0] = 0;
  v27.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &v27);
  sub_DDDD38((uint64_t)&v27, (uint64_t)a1, a2, (uint64_t)a3);
  if (sub_51D60((unsigned __int8 *)&v27))
  {
    uint64_t v6 = (uint64_t (***)())a1[43];
    if (!v6) {
      uint64_t v6 = &off_2539290;
    }
    if (!*((unsigned char *)v6 + 230))
    {
      uint64_t v7 = (uint64_t (***)())a1[39];
      if (!v7) {
        uint64_t v7 = &off_2536408;
      }
      uint64_t v8 = (uint64_t (***)())v7[4];
      if (!v8) {
        uint64_t v8 = &off_2536398;
      }
      if (((_BYTE)v8[2] & 2) != 0)
      {
        std::string __p = operator new(0x58uLL);
        long long v26 = xmmword_20F0560;
        strcpy((char *)__p, "EV info specified in request, but EV support is not indicated in client capabilities.");
        sub_DDE278((uint64_t)&v27, 5, (long long *)&__p);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
      }
    }
    if ((sub_DBD970((uint64_t)a1) & 1) == 0)
    {
      if (sub_35E640() == 7)
      {
        std::string __p = operator new(0x58uLL);
        long long v26 = xmmword_20B9980;
        strcpy((char *)__p, "Request for changing waypoints does not indicate MSR support in client capabilities.");
        sub_DDE278((uint64_t)&v27, 5, (long long *)&__p);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
      }
      std::string::size_type v9 = (uint64_t (***)())a1[47];
      if (!v9) {
        std::string::size_type v9 = &off_25351C0;
      }
      uint64_t v10 = *((unsigned int *)v9 + 8);
      if ((int)v10 >= 2)
      {
        uint64_t v11 = v9[5];
        if (v11) {
          char v12 = v11 + 1;
        }
        else {
          char v12 = 0;
        }
        BOOL v13 = v12 + 1;
        uint64_t v14 = 8 * v10 - 8;
        while (1)
        {
          uint64_t v15 = (uint64_t (***)())*((void *)*v13 + 9);
          if (!v15) {
            uint64_t v15 = &off_25352D0;
          }
          if (*((_DWORD *)v15 + 26) == 1) {
            break;
          }
          ++v13;
          v14 -= 8;
          if (!v14) {
            goto LABEL_31;
          }
        }
        if (!sub_DBD40C((uint64_t)a1))
        {
          std::string __p = operator new(0x80uLL);
          long long v26 = xmmword_20F0610;
          strcpy((char *)__p, "Request contains user route with at least one intermediate USER waypoint, but client capabilities do not indicate MSR support.");
          sub_DDE278((uint64_t)&v27, 5, (long long *)&__p);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p);
          }
        }
      }
    }
LABEL_31:
    unint64_t v16 = a1[43] ? (uint64_t (***)())a1[43] : &off_2539290;
    uint64_t v17 = *((int *)v16 + 18);
    if (v17)
    {
      int v18 = 0;
      int v19 = (unsigned int *)v16[10];
      for (uint64_t i = 4 * v17; i; i -= 4)
      {
        uint64_t v21 = sub_7BB78(*v19);
        if (v21 == 5
          && (std::string __p = operator new(0x68uLL),
              long long v26 = xmmword_20F0620,
              strcpy((char *)__p, "The field clientCapabilities.supports_multipoint_routing contains an unknown or unsupported entry."), sub_DDE278((uint64_t)&v27, 5, (long long *)&__p), SHIBYTE(v26) < 0))
        {
          operator delete(__p);
          int v22 = 32;
          if ((v18 & 0x20) != 0)
          {
LABEL_40:
            sub_7B8BC(v21, (char *)v23);
            sub_DD6AA0("The field clientCapabilities.supports_multipoint_routing contains duplicate entry for ", (uint64_t)v23);
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            sub_DDE278((uint64_t)&v27, 5, (long long *)&__p);
            if (SHIBYTE(v26) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          int v22 = 1 << v21;
          if (((1 << v21) & v18) != 0) {
            goto LABEL_40;
          }
        }
        v18 |= v22;
        ++v19;
      }
    }
  }
  if (v28 < 0) {
    operator delete((void *)v27.n128_u64[1]);
  }
}

void sub_DD74D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_C7E3C8(v30);
  _Unwind_Resume(a1);
}

void sub_DD7568(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  __p[0].n128_u64[0] = 0;
  __p[0].n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, __p);
  sub_DDE000((uint64_t)v62, a1, a3, (uint64_t)a4);
  if ((sub_51D60(v62) & 1) == 0)
  {
LABEL_99:
    if (v64 < 0) {
      goto LABEL_100;
    }
    return;
  }
  __p[1].n128_u8[7] = 17;
  strcpy((char *)__p, "RequestValidation");
  int v68 = 0;
  size_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v8 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v68);
  std::string::size_type v9 = v68;
  if (v68)
  {
    uint64_t v10 = v69;
    uint64_t v11 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v68;
    }
    size_t v69 = v9;
    operator delete(v11);
  }
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  __p[1].n128_u8[7] = 15;
  strcpy((char *)__p, "invalid_app_ids");
  uint64_t v12 = sub_5C4AC(v8, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  unint64_t v13 = sub_DBE834(a1);
  uint64_t v14 = (void *)sub_37D0C0(a2);
  uint64_t v15 = *v14;
  unint64_t v16 = (unsigned __int8 **)(*v14 + 48);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v13 + 8);
  }
  uint64_t v19 = *(unsigned __int8 *)(v15 + 71);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v15 + 56);
  }
  if (v18 == v19)
  {
    if (v20 >= 0) {
      uint64_t v21 = (unsigned __int8 *)(*v14 + 48);
    }
    else {
      uint64_t v21 = *v16;
    }
    if ((v17 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v13, v21, *(void *)(v13 + 8))) {
        goto LABEL_48;
      }
    }
    else
    {
      if (!*(unsigned char *)(v13 + 23)) {
        goto LABEL_48;
      }
      int v22 = (unsigned __int8 *)v13;
      while (*v22 == *v21)
      {
        ++v22;
        ++v21;
        if (!--v17) {
          goto LABEL_48;
        }
      }
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__p);
    int v23 = sub_188FC78(__p, (uint64_t)"Different app ids provided in RPC header (\"", 43);
    int v24 = *(char *)(v15 + 71);
    if (v24 >= 0) {
      uint64_t v25 = (uint64_t)v16;
    }
    else {
      uint64_t v25 = *(void *)(v15 + 48);
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v15 + 71);
    }
    else {
      uint64_t v26 = *(void *)(v15 + 56);
    }
    __n128 v27 = sub_188FC78(v23, v25, v26);
    char v28 = sub_188FC78(v27, (uint64_t)"\") and protobuf message (\"", 26);
    int v29 = *(char *)(v13 + 23);
    if (v29 >= 0) {
      uint64_t v30 = (const void *)v13;
    }
    else {
      uint64_t v30 = *(const void **)v13;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      uint64_t v31 = *(void *)(v13 + 8);
    }
    size_t v32 = sub_188FC78(v28, (uint64_t)v30, v31);
    sub_188FC78(v32, (uint64_t)"\").", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v68, 2u);
    if (SHIBYTE(v70) < 0) {
      operator delete(v68);
    }
    if (v67 < 0) {
      operator delete(v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_48:
  uint64_t v33 = *(unsigned __int8 *)(v13 + 23);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *(void *)(v13 + 8);
  }
  if (!v33) {
    goto LABEL_55;
  }
  if (*(char *)(v15 + 71) < 0)
  {
    if (!*(void *)(v15 + 56)) {
      goto LABEL_55;
    }
  }
  else if (!*(unsigned char *)(v15 + 71))
  {
LABEL_55:
    unint64_t v34 = sub_DBE88C(a1);
    sub_DBE8E4(a1);
    sub_DBE938(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      int v35 = sub_188FC78(__p, (uint64_t)"App id missing in RPC header and/or proto message (RPC header app id: \"", 71);
      int v36 = *(char *)(v15 + 71);
      if (v36 >= 0) {
        uint64_t v37 = (uint64_t)v16;
      }
      else {
        uint64_t v37 = *(void *)(v15 + 48);
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v15 + 71);
      }
      else {
        uint64_t v38 = *(void *)(v15 + 56);
      }
      int v39 = sub_188FC78(v35, v37, v38);
      long long v40 = sub_188FC78(v39, (uint64_t)"\", protobuf app id: \"", 21);
      int v41 = *(char *)(v13 + 23);
      if (v41 >= 0) {
        int v42 = (const void *)v13;
      }
      else {
        int v42 = *(const void **)v13;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v43 = *(void *)(v13 + 8);
      }
      unint64_t v44 = sub_188FC78(v40, (uint64_t)v42, v43);
      sub_188FC78(v44, (uint64_t)"\", is_internal_client: ", 23);
      int v45 = (void *)std::ostream::operator<<();
      sub_188FC78(v45, (uint64_t)", is_internal_tool: ", 20);
      int v46 = (void *)std::ostream::operator<<();
      int v47 = sub_188FC78(v46, (uint64_t)", os_version: ", 14);
      int v48 = *(char *)(v34 + 23);
      if (v48 >= 0) {
        uint64_t v49 = v34;
      }
      else {
        uint64_t v49 = *(void *)v34;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v50 = *(void *)(v34 + 8);
      }
      int v51 = sub_188FC78(v47, v49, v50);
      sub_188FC78(v51, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v68, 1u);
      if (SHIBYTE(v70) < 0) {
        operator delete(v68);
      }
      if (v67 < 0) {
        operator delete(v66);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  size_t v52 = *(_DWORD **)v12;
  int v53 = *(_DWORD **)(v12 + 8);
  if (*(_DWORD **)v12 == v53) {
    goto LABEL_99;
  }
  char v54 = *(unsigned char *)(v13 + 23);
  if (v54 >= 0) {
    uint64_t v55 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v55 = *(void *)(v13 + 8);
  }
  if (v54 >= 0) {
    unint64_t v56 = (unsigned __int8 *)v13;
  }
  else {
    unint64_t v56 = *(unsigned __int8 **)v13;
  }
  while (1)
  {
    if (v52[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    int v57 = *(const void ***)v52;
    uint64_t v58 = *(unsigned __int8 *)(*(void *)v52 + 23);
    if ((v58 & 0x80u) == 0) {
      uint64_t v59 = *(unsigned __int8 *)(*(void *)v52 + 23);
    }
    else {
      uint64_t v59 = *(void *)(*(void *)v52 + 8);
    }
    if (v59 != v55) {
      goto LABEL_87;
    }
    if ((v58 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*v57, v56, *(void *)(*(void *)v52 + 8))) {
      goto LABEL_98;
    }
LABEL_87:
    v52 += 4;
    if (v52 == v53) {
      goto LABEL_99;
    }
  }
  if (*(unsigned char *)(*(void *)v52 + 23))
  {
    BOOL v60 = v56;
    while (*(unsigned __int8 *)v57 == *v60)
    {
      int v57 = (const void **)((char *)v57 + 1);
      ++v60;
      if (!--v58) {
        goto LABEL_98;
      }
    }
    goto LABEL_87;
  }
LABEL_98:
  __p[0].n128_u64[0] = (unint64_t)operator new(0x28uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B93A0;
  strcpy((char *)__p[0].n128_u64[0], "Request denied based on its app id.");
  sub_DDE278((uint64_t)v62, 3, (long long *)__p);
  if ((__p[1].n128_i8[7] & 0x80000000) == 0) {
    goto LABEL_99;
  }
  operator delete((void *)__p[0].n128_u64[0]);
  if (v64 < 0) {
LABEL_100:
  }
    operator delete(v63);
}

void sub_DD7C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  sub_111ECAC((uint64_t)&a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_C7E3C8(v23);
  _Unwind_Resume(a1);
}

void sub_DD7D10(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  __p[0].n128_u64[0] = 0;
  __p[0].n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a4, __p);
  sub_DDDD38((uint64_t)v62, a1, a3, (uint64_t)a4);
  if ((sub_51D60(v62) & 1) == 0)
  {
LABEL_99:
    if (v64 < 0) {
      goto LABEL_100;
    }
    return;
  }
  __p[1].n128_u8[7] = 17;
  strcpy((char *)__p, "RequestValidation");
  int v68 = 0;
  size_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v8 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v68);
  std::string::size_type v9 = v68;
  if (v68)
  {
    uint64_t v10 = v69;
    uint64_t v11 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v68;
    }
    size_t v69 = v9;
    operator delete(v11);
  }
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  __p[1].n128_u8[7] = 15;
  strcpy((char *)__p, "invalid_app_ids");
  uint64_t v12 = sub_5C4AC(v8, (uint64_t)__p);
  if (__p[1].n128_i8[7] < 0) {
    operator delete((void *)__p[0].n128_u64[0]);
  }
  unint64_t v13 = sub_DBE834(a1);
  uint64_t v14 = (void *)sub_37D0C0(a2);
  uint64_t v15 = *v14;
  unint64_t v16 = (unsigned __int8 **)(*v14 + 48);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v13 + 8);
  }
  uint64_t v19 = *(unsigned __int8 *)(v15 + 71);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v15 + 56);
  }
  if (v18 == v19)
  {
    if (v20 >= 0) {
      uint64_t v21 = (unsigned __int8 *)(*v14 + 48);
    }
    else {
      uint64_t v21 = *v16;
    }
    if ((v17 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v13, v21, *(void *)(v13 + 8))) {
        goto LABEL_48;
      }
    }
    else
    {
      if (!*(unsigned char *)(v13 + 23)) {
        goto LABEL_48;
      }
      int v22 = (unsigned __int8 *)v13;
      while (*v22 == *v21)
      {
        ++v22;
        ++v21;
        if (!--v17) {
          goto LABEL_48;
        }
      }
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__p);
    uint64_t v23 = sub_188FC78(__p, (uint64_t)"Different app ids provided in RPC header (\"", 43);
    int v24 = *(char *)(v15 + 71);
    if (v24 >= 0) {
      uint64_t v25 = (uint64_t)v16;
    }
    else {
      uint64_t v25 = *(void *)(v15 + 48);
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v15 + 71);
    }
    else {
      uint64_t v26 = *(void *)(v15 + 56);
    }
    __n128 v27 = sub_188FC78(v23, v25, v26);
    char v28 = sub_188FC78(v27, (uint64_t)"\") and protobuf message (\"", 26);
    int v29 = *(char *)(v13 + 23);
    if (v29 >= 0) {
      uint64_t v30 = (const void *)v13;
    }
    else {
      uint64_t v30 = *(const void **)v13;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      uint64_t v31 = *(void *)(v13 + 8);
    }
    size_t v32 = sub_188FC78(v28, (uint64_t)v30, v31);
    sub_188FC78(v32, (uint64_t)"\").", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v68, 2u);
    if (SHIBYTE(v70) < 0) {
      operator delete(v68);
    }
    if (v67 < 0) {
      operator delete(v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_48:
  uint64_t v33 = *(unsigned __int8 *)(v13 + 23);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *(void *)(v13 + 8);
  }
  if (!v33) {
    goto LABEL_55;
  }
  if (*(char *)(v15 + 71) < 0)
  {
    if (!*(void *)(v15 + 56)) {
      goto LABEL_55;
    }
  }
  else if (!*(unsigned char *)(v15 + 71))
  {
LABEL_55:
    unint64_t v34 = sub_DBE86C(a1);
    sub_DBE8C8(a1);
    sub_DBE91C(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      int v35 = sub_188FC78(__p, (uint64_t)"App id missing in RPC header and/or proto message (RPC header app id: \"", 71);
      int v36 = *(char *)(v15 + 71);
      if (v36 >= 0) {
        uint64_t v37 = (uint64_t)v16;
      }
      else {
        uint64_t v37 = *(void *)(v15 + 48);
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v15 + 71);
      }
      else {
        uint64_t v38 = *(void *)(v15 + 56);
      }
      int v39 = sub_188FC78(v35, v37, v38);
      long long v40 = sub_188FC78(v39, (uint64_t)"\", protobuf app id: \"", 21);
      int v41 = *(char *)(v13 + 23);
      if (v41 >= 0) {
        int v42 = (const void *)v13;
      }
      else {
        int v42 = *(const void **)v13;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v43 = *(void *)(v13 + 8);
      }
      unint64_t v44 = sub_188FC78(v40, (uint64_t)v42, v43);
      sub_188FC78(v44, (uint64_t)"\", is_internal_client: ", 23);
      int v45 = (void *)std::ostream::operator<<();
      sub_188FC78(v45, (uint64_t)", is_internal_tool: ", 20);
      int v46 = (void *)std::ostream::operator<<();
      int v47 = sub_188FC78(v46, (uint64_t)", os_version: ", 14);
      int v48 = *(char *)(v34 + 23);
      if (v48 >= 0) {
        uint64_t v49 = v34;
      }
      else {
        uint64_t v49 = *(void *)v34;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v50 = *(void *)(v34 + 8);
      }
      int v51 = sub_188FC78(v47, v49, v50);
      sub_188FC78(v51, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v68, 1u);
      if (SHIBYTE(v70) < 0) {
        operator delete(v68);
      }
      if (v67 < 0) {
        operator delete(v66);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  size_t v52 = *(_DWORD **)v12;
  int v53 = *(_DWORD **)(v12 + 8);
  if (*(_DWORD **)v12 == v53) {
    goto LABEL_99;
  }
  char v54 = *(unsigned char *)(v13 + 23);
  if (v54 >= 0) {
    uint64_t v55 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v55 = *(void *)(v13 + 8);
  }
  if (v54 >= 0) {
    unint64_t v56 = (unsigned __int8 *)v13;
  }
  else {
    unint64_t v56 = *(unsigned __int8 **)v13;
  }
  while (1)
  {
    if (v52[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    int v57 = *(const void ***)v52;
    uint64_t v58 = *(unsigned __int8 *)(*(void *)v52 + 23);
    if ((v58 & 0x80u) == 0) {
      uint64_t v59 = *(unsigned __int8 *)(*(void *)v52 + 23);
    }
    else {
      uint64_t v59 = *(void *)(*(void *)v52 + 8);
    }
    if (v59 != v55) {
      goto LABEL_87;
    }
    if ((v58 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*v57, v56, *(void *)(*(void *)v52 + 8))) {
      goto LABEL_98;
    }
LABEL_87:
    v52 += 4;
    if (v52 == v53) {
      goto LABEL_99;
    }
  }
  if (*(unsigned char *)(*(void *)v52 + 23))
  {
    BOOL v60 = v56;
    while (*(unsigned __int8 *)v57 == *v60)
    {
      int v57 = (const void **)((char *)v57 + 1);
      ++v60;
      if (!--v58) {
        goto LABEL_98;
      }
    }
    goto LABEL_87;
  }
LABEL_98:
  __p[0].n128_u64[0] = (unint64_t)operator new(0x28uLL);
  *(__n128 *)((char *)__p + 8) = (__n128)xmmword_20B93A0;
  strcpy((char *)__p[0].n128_u64[0], "Request denied based on its app id.");
  sub_DDE278((uint64_t)v62, 3, (long long *)__p);
  if ((__p[1].n128_i8[7] & 0x80000000) == 0) {
    goto LABEL_99;
  }
  operator delete((void *)__p[0].n128_u64[0]);
  if (v64 < 0) {
LABEL_100:
  }
    operator delete(v63);
}

void sub_DD841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  sub_111ECAC((uint64_t)&a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_C7E3C8(v23);
  _Unwind_Resume(a1);
}

BOOL sub_DD84B8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 2) == 0
    || ((double v2 = *(double *)(a1 + 32), v3 = v2 + 978307200.0, v2 + 978307200.0 <= 2147483650.0) ? (v4 = v3 < v2) : (v4 = 1),
        !v4 ? (BOOL v5 = v3 < -2147483650.0) : (BOOL v5 = 1),
        !v5))
  {
    BOOL result = 1;
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      return result;
    }
    goto LABEL_19;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v15);
    sub_188FC78(&v15, (uint64_t)"Got a request with an invalid routeAttributes.timepoint.current_user_time (", 75);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    BOOL result = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_19:
    double v8 = *(double *)(a1 + 24);
    double v9 = v8 + 978307200.0;
    if (v8 + 978307200.0 > 2147483650.0 || v9 < v8 || v9 < -2147483650.0)
    {
      BOOL result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)&v15);
        sub_188FC78(&v15, (uint64_t)"Got a request with an invalid routeAttributes.timepoint.time (", 62);
        uint64_t v12 = (void *)std::ostream::operator<<();
        sub_188FC78(v12, (uint64_t)").", 2);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
    }
  }
  return result;
}

void sub_DD8828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_DD88A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v20[0].n128_u64[0] = 0;
  v20[0].n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a2, v20);
  double v4 = *(double *)(a1 + 48);
  if (v4 < -90.0 || v4 > 90.0)
  {
    unint64_t v6 = *(void *)(a2 + 24);
    if (v6 >= *(void *)(a2 + 32))
    {
      uint64_t v7 = sub_DDB7CC((char **)(a2 + 16), "LatLng has a latitude outside of [-90,+90].");
    }
    else
    {
      sub_DDB94C(a2 + 32, *(unsigned char **)(a2 + 24), "LatLng has a latitude outside of [-90,+90].");
      uint64_t v7 = (char *)(v6 + 32);
      *(void *)(a2 + 24) = v6 + 32;
    }
    *(void *)(a2 + 24) = v7;
  }
  double v8 = *(double *)(a1 + 56);
  if (v8 < -180.0 || v8 > 180.0)
  {
    unint64_t v10 = *(void *)(a2 + 24);
    if (v10 >= *(void *)(a2 + 32))
    {
      uint64_t v11 = sub_DDBA7C((char **)(a2 + 16), "LatLng has a longitude outside of [-180,+180].");
    }
    else
    {
      sub_DDBBFC(a2 + 32, *(unsigned char **)(a2 + 24), "LatLng has a longitude outside of [-180,+180].");
      uint64_t v11 = (char *)(v10 + 32);
      *(void *)(a2 + 24) = v10 + 32;
    }
    *(void *)(a2 + 24) = v11;
    double v8 = *(double *)(a1 + 56);
  }
  if (*(double *)(a1 + 48) == 0.0 && v8 == 0.0 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v20);
    uint64_t v12 = sub_188FC78(v20, (uint64_t)"LatLng 0,0 is a suspicious default coordinate: ", 47);
    unint64_t v13 = sub_69510();
    uint64_t v14 = sub_68EE4((uint64_t)v13);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = *(void *)v14;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v17 = *(void *)(v14 + 8);
    }
    sub_188FC78(v12, v16, v17);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)a2 = *(void *)(a2 + 16) != *(void *)(a2 + 24);
  *(void *)(a2 + 8) = &off_2439090;
}

void sub_DD8B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_C7E3C8(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_C7E3C8(v15);
  _Unwind_Resume(a1);
}

void sub_DD8BE4(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DD8BF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 48)) {
    double v4 = *(uint64_t (****)())(a1 + 48);
  }
  else {
    double v4 = &off_253F1A0;
  }
  sub_DD88A0((uint64_t)v4, a2);
  int v5 = *(_DWORD *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    double v6 = *(double *)(a1 + 64);
    double v7 = v6 + 978307200.0;
    BOOL v8 = v6 + 978307200.0 > 2147483650.0 || v7 < v6;
    if (v8 || v7 < -2147483650.0)
    {
      unint64_t v10 = *(void *)(a2 + 24);
      if (v10 >= *(void *)(a2 + 32))
      {
        uint64_t v11 = sub_DDBD2C((char **)(a2 + 16), "Location timestamp not within bounds of common::TimeStamp.");
      }
      else
      {
        sub_DDBEAC(a2 + 32, *(unsigned char **)(a2 + 24), "Location timestamp not within bounds of common::TimeStamp.");
        uint64_t v11 = (char *)(v10 + 32);
        *(void *)(a2 + 24) = v10 + 32;
      }
      *(void *)(a2 + 24) = v11;
      int v5 = *(_DWORD *)(a1 + 40);
    }
  }
  if ((v5 & 0x20) != 0)
  {
    double v12 = *(double *)(a1 + 88);
    if (v12 < 0.0)
    {
      unint64_t v13 = *(void *)(a2 + 24);
      if (v13 >= *(void *)(a2 + 32))
      {
        uint64_t v14 = sub_DDBFDC((char **)(a2 + 16), "Location has a negative speed.");
      }
      else
      {
        sub_DDC15C(a2 + 32, *(unsigned char **)(a2 + 24), "Location has a negative speed.");
        uint64_t v14 = (char *)(v13 + 32);
        *(void *)(a2 + 24) = v13 + 32;
      }
      *(void *)(a2 + 24) = v14;
      double v12 = *(double *)(a1 + 88);
    }
    if (v12 > 140.0 && sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v27);
      uint64_t v15 = sub_188FC78(v27, (uint64_t)"Location has a speed of more than 140 m/s (504 km/h): ", 54);
      uint64_t v16 = sub_69510();
      uint64_t v17 = sub_68EE4((uint64_t)v16);
      int v18 = *(char *)(v17 + 23);
      if (v18 >= 0) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = *(void *)v17;
      }
      if (v18 >= 0) {
        uint64_t v20 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        uint64_t v20 = *(void *)(v17 + 8);
      }
      sub_188FC78(v15, v19, v20);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v26 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete((void *)v27[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  if ((*(unsigned char *)(a1 + 41) & 2) != 0)
  {
    double v21 = *(double *)(a1 + 112);
    if (v21 != -1.0 && (v21 < 0.0 || v21 > 360.0))
    {
      unint64_t v23 = *(void *)(a2 + 24);
      if (v23 >= *(void *)(a2 + 32))
      {
        uint64_t v24 = sub_DDC28C((char **)(a2 + 16), "Location has a course outside of [0,360].");
      }
      else
      {
        sub_DDC40C(a2 + 32, *(unsigned char **)(a2 + 24), "Location has a course outside of [0,360].");
        uint64_t v24 = (char *)(v23 + 32);
        *(void *)(a2 + 24) = v23 + 32;
      }
      *(void *)(a2 + 24) = v24;
    }
  }
  *(void *)a2 = *(void *)(a2 + 16) != *(void *)(a2 + 24);
  *(void *)(a2 + 8) = &off_2439090;
}

void sub_DD8F34(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DD8F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_C7E3C8(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_C7E3C8(v15);
  _Unwind_Resume(a1);
}

void sub_DD8FDC(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DD8FF0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  *(void *)std::string __p = 0;
  *(void *)&__p[8] = &off_2439090;
  sub_3E7814(a4, (__n128 *)__p);
  sub_DDDA70((uint64_t)v65, a1, a3, (uint64_t)a4);
  if ((sub_51D60(v65) & 1) == 0) {
    goto LABEL_111;
  }
  __p[23] = 17;
  strcpy(__p, "RequestValidation");
  int v72 = 0;
  long long v73 = 0uLL;
  BOOL v8 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v72);
  double v9 = v72;
  if (v72)
  {
    unint64_t v10 = (void **)v73;
    uint64_t v11 = v72;
    if ((void **)v73 != v72)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v72;
    }
    *(void *)&long long v73 = v9;
    operator delete(v11);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 15;
  strcpy(__p, "invalid_app_ids");
  uint64_t v12 = sub_5C4AC(v8, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v13 = sub_DC6B80(a1);
  uint64_t v14 = (void *)sub_37D0C0(a2);
  uint64_t v15 = *v14;
  uint64_t v16 = (unsigned __int8 **)(*v14 + 48);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v13 + 8);
  }
  uint64_t v19 = *(unsigned __int8 *)(v15 + 71);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v15 + 56);
  }
  if (v18 == v19)
  {
    if (v20 >= 0) {
      double v21 = (unsigned __int8 *)(*v14 + 48);
    }
    else {
      double v21 = *v16;
    }
    if ((v17 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v13, v21, *(void *)(v13 + 8))) {
        goto LABEL_48;
      }
    }
    else
    {
      if (!*(unsigned char *)(v13 + 23)) {
        goto LABEL_48;
      }
      char v22 = (unsigned __int8 *)v13;
      while (*v22 == *v21)
      {
        ++v22;
        ++v21;
        if (!--v17) {
          goto LABEL_48;
        }
      }
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__p);
    unint64_t v23 = sub_188FC78(__p, (uint64_t)"Different app ids provided in RPC header (\"", 43);
    int v24 = *(char *)(v15 + 71);
    if (v24 >= 0) {
      uint64_t v25 = (uint64_t)v16;
    }
    else {
      uint64_t v25 = *(void *)(v15 + 48);
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v15 + 71);
    }
    else {
      uint64_t v26 = *(void *)(v15 + 56);
    }
    __n128 v27 = sub_188FC78(v23, v25, v26);
    char v28 = sub_188FC78(v27, (uint64_t)"\") and protobuf message (\"", 26);
    int v29 = *(char *)(v13 + 23);
    if (v29 >= 0) {
      uint64_t v30 = (const void *)v13;
    }
    else {
      uint64_t v30 = *(const void **)v13;
    }
    if (v29 >= 0) {
      uint64_t v31 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      uint64_t v31 = *(void *)(v13 + 8);
    }
    size_t v32 = sub_188FC78(v28, (uint64_t)v30, v31);
    sub_188FC78(v32, (uint64_t)"\").", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v72, 2u);
    if (SHIBYTE(v73) < 0) {
      operator delete(v72);
    }
    if (v71 < 0) {
      operator delete(v70);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_48:
  uint64_t v33 = *(unsigned __int8 *)(v13 + 23);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *(void *)(v13 + 8);
  }
  if (!v33) {
    goto LABEL_55;
  }
  if (*(char *)(v15 + 71) < 0)
  {
    if (!*(void *)(v15 + 56)) {
      goto LABEL_55;
    }
  }
  else if (!*(unsigned char *)(v15 + 71))
  {
LABEL_55:
    unint64_t v34 = sub_DBE84C(a1);
    sub_DBE8AC(a1);
    sub_DBE900(a1);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      int v35 = sub_188FC78(__p, (uint64_t)"App id missing in RPC header and/or proto message (RPC header app id: \"", 71);
      int v36 = *(char *)(v15 + 71);
      if (v36 >= 0) {
        uint64_t v37 = (uint64_t)v16;
      }
      else {
        uint64_t v37 = *(void *)(v15 + 48);
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v15 + 71);
      }
      else {
        uint64_t v38 = *(void *)(v15 + 56);
      }
      int v39 = sub_188FC78(v35, v37, v38);
      long long v40 = sub_188FC78(v39, (uint64_t)"\", protobuf app id: \"", 21);
      int v41 = *(char *)(v13 + 23);
      if (v41 >= 0) {
        int v42 = (const void *)v13;
      }
      else {
        int v42 = *(const void **)v13;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v43 = *(void *)(v13 + 8);
      }
      unint64_t v44 = sub_188FC78(v40, (uint64_t)v42, v43);
      sub_188FC78(v44, (uint64_t)"\", is_internal_client: ", 23);
      int v45 = (void *)std::ostream::operator<<();
      sub_188FC78(v45, (uint64_t)", is_internal_tool: ", 20);
      int v46 = (void *)std::ostream::operator<<();
      int v47 = sub_188FC78(v46, (uint64_t)", os_version: ", 14);
      int v48 = *(char *)(v34 + 23);
      if (v48 >= 0) {
        uint64_t v49 = v34;
      }
      else {
        uint64_t v49 = *(void *)v34;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        uint64_t v50 = *(void *)(v34 + 8);
      }
      int v51 = sub_188FC78(v47, v49, v50);
      sub_188FC78(v51, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v72, 1u);
      if (SHIBYTE(v73) < 0) {
        operator delete(v72);
      }
      if (v71 < 0) {
        operator delete(v70);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  size_t v52 = *(_DWORD **)v12;
  int v53 = *(_DWORD **)(v12 + 8);
  if (*(_DWORD **)v12 == v53) {
    goto LABEL_99;
  }
  char v54 = *(unsigned char *)(v13 + 23);
  if (v54 >= 0) {
    uint64_t v55 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v55 = *(void *)(v13 + 8);
  }
  if (v54 >= 0) {
    unint64_t v56 = (unsigned __int8 *)v13;
  }
  else {
    unint64_t v56 = *(unsigned __int8 **)v13;
  }
  while (1)
  {
    if (v52[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    int v57 = *(const void ***)v52;
    uint64_t v58 = *(unsigned __int8 *)(*(void *)v52 + 23);
    if ((v58 & 0x80u) == 0) {
      uint64_t v59 = *(unsigned __int8 *)(*(void *)v52 + 23);
    }
    else {
      uint64_t v59 = *(void *)(*(void *)v52 + 8);
    }
    if (v59 != v55) {
      goto LABEL_87;
    }
    if ((v58 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*v57, v56, *(void *)(*(void *)v52 + 8))) {
      goto LABEL_98;
    }
LABEL_87:
    v52 += 4;
    if (v52 == v53) {
      goto LABEL_99;
    }
  }
  if (*(unsigned char *)(*(void *)v52 + 23))
  {
    BOOL v60 = v56;
    while (*(unsigned __int8 *)v57 == *v60)
    {
      int v57 = (const void **)((char *)v57 + 1);
      ++v60;
      if (!--v58) {
        goto LABEL_98;
      }
    }
    goto LABEL_87;
  }
LABEL_98:
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "Request denied based on its app id.");
  sub_DDE278((uint64_t)v65, 3, (long long *)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_99:
    if (!*(_DWORD *)(a1 + 468)) {
      goto LABEL_100;
    }
    goto LABEL_111;
  }
  operator delete(*(void **)__p);
  if (*(_DWORD *)(a1 + 468)) {
    goto LABEL_111;
  }
LABEL_100:
  int v72 = (void **)operator new(0x40uLL);
  long long v73 = xmmword_20F0510;
  strcpy((char *)v72, "Directions request has mainTransportTypeMaxRouteCount set to 0.");
  sub_3E7914(3, (long long *)&v72, (uint64_t)__p);
  sub_DDE010((uint64_t)v65, (uint64_t)__p);
  uint64_t v61 = *(void *)&__p[16];
  if (*(void *)&__p[16])
  {
    uint64_t v62 = v69;
    long long v63 = *(void **)&__p[16];
    if (v69 != *(void *)&__p[16])
    {
      do
      {
        if (*(char *)(v62 - 1) < 0) {
          operator delete(*(void **)(v62 - 24));
        }
        v62 -= 32;
      }
      while (v62 != v61);
      long long v63 = *(void **)&__p[16];
    }
    uint64_t v69 = v61;
    operator delete(v63);
  }
  if (SHIBYTE(v73) < 0)
  {
    operator delete(v72);
    if (v67 < 0) {
LABEL_112:
    }
      operator delete(v66);
  }
  else
  {
LABEL_111:
    if (v67 < 0) {
      goto LABEL_112;
    }
  }
}

void sub_DD97C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v24 - 81) < 0) {
    operator delete(*(void **)(v24 - 104));
  }
  sub_111ECAC((uint64_t)&a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_C7E3C8(v23);
  _Unwind_Resume(a1);
}

void sub_DD988C(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  v17.n128_u64[0] = 0;
  v17.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a3, &v17);
  sub_DDDA70((uint64_t)v20, a1, a2, (uint64_t)a3);
  if (sub_51D60(v20))
  {
    if ((*(unsigned char *)(a1 + 40) & 0x20) == 0)
    {
      uint64_t v15 = operator new(0x28uLL);
      long long v16 = xmmword_20B8FD0;
      strcpy((char *)v15, "Request has missing RouteAttributes.");
      sub_3E7914(4, (long long *)&v15, (uint64_t)&v17);
      sub_DDE010((uint64_t)v20, (uint64_t)&v17);
      double v6 = (void **)__p;
      if (__p)
      {
        double v7 = v19;
        BOOL v8 = __p;
        if (v19 != __p)
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 4;
          }
          while (v7 != v6);
          BOOL v8 = __p;
        }
        uint64_t v19 = v6;
        operator delete(v8);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(v15);
      }
    }
    if (sub_DB7034(a1) != 8)
    {
      double v9 = *(uint64_t (****)())(a1 + 304);
      if (!v9) {
        double v9 = &off_2535C50;
      }
      unint64_t v10 = (uint64_t (***)())v9[10];
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = &off_2535C20;
      }
      if (!sub_DD84B8((uint64_t)v11))
      {
        uint64_t v15 = operator new(0x28uLL);
        long long v16 = xmmword_20B93A0;
        strcpy((char *)v15, "Request has inconsistent timepoint.");
        sub_3E7914(4, (long long *)&v15, (uint64_t)&v17);
        sub_DDE010((uint64_t)v20, (uint64_t)&v17);
        uint64_t v12 = (void **)__p;
        if (__p)
        {
          unint64_t v13 = v19;
          uint64_t v14 = __p;
          if (v19 != __p)
          {
            do
            {
              if (*((char *)v13 - 1) < 0) {
                operator delete(*(v13 - 3));
              }
              v13 -= 4;
            }
            while (v13 != v12);
            uint64_t v14 = __p;
          }
          uint64_t v19 = v12;
          operator delete(v14);
        }
        if (SHIBYTE(v16) < 0) {
          operator delete(v15);
        }
      }
    }
  }
  if (v22 < 0) {
    operator delete(v21);
  }
}

void sub_DD9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_C7E3C8((uint64_t)&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      sub_C7E3C8(v27);
      _Unwind_Resume(a1);
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  sub_C7E3C8(v27);
  _Unwind_Resume(a1);
}

void sub_DD9B40(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DD9B54(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v13 = a2;
  if (a1 >= 0) {
    int v4 = 50000;
  }
  else {
    int v4 = -50000;
  }
  uint64_t v14 = a1 / 100000 + (int)(v4 + a1 % 100000) / 100000;
  sub_DD9D70("Total distance to reach waypoint ", (uint64_t)&v13, " exceeds the maximum allowed value of ", (uint64_t)&v14, " km.");
  *(void *)&long long v10 = 15;
  *((void *)&v10 + 1) = &off_2439090;
  LOBYTE(v14) = 13;
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&v15, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v11;
    uint64_t v16 = v12;
  }
  sub_3E7DA4(&__p, (uint64_t)&v14, 1uLL);
  sub_3E78C8(a3, &v10, (uint64_t *)&__p, v13);
  int v5 = (void **)__p;
  if (__p)
  {
    double v6 = v9;
    double v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 4;
      }
      while (v6 != v5);
      double v7 = __p;
    }
    double v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v11[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v12) < 0) {
    goto LABEL_19;
  }
}

void sub_DD9D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DD9D70(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DD9F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DD9F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DD9F78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v17 = 0;
  int v16 = 0;
  v13.n128_u64[0] = 0;
  v13.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a5, &v13);
  v13.n128_u64[0] = (unint64_t)&v18;
  v13.n128_u64[1] = (unint64_t)&v17;
  uint64_t v14 = &v16;
  char v15 = &v19;
  if (a1) {
    sub_DDA09C((uint64_t)&v13, a1, *(void *)(*(void *)(a2 + 16) + 8), (uint64_t)a5);
  }
  uint64_t v9 = 0;
  int v10 = *(_DWORD *)(a2 + 8);
  if (v10 <= 1) {
    int v10 = 1;
  }
  uint64_t v11 = 8 * (v10 - 1);
  while (v11 != v9)
  {
    uint64_t v12 = *(void *)(a2 + 16) + v9;
    v9 += 8;
    sub_DDA09C((uint64_t)&v13, *(void *)(v12 + 8), *(void *)(v12 + 16), (uint64_t)a5);
  }
  if (a3) {
    sub_DDA09C((uint64_t)&v13, *(void *)(*(void *)(a2 + 16) + 8 * *(int *)(a2 + 8)), a3, (uint64_t)a5);
  }
}

void sub_DDA074(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDA088(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDA09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void (****)(std::error_category *__hidden))(a4 + 8) != &off_2439090 || *(_DWORD *)a4 != 0) {
    return;
  }
  unint64_t v8 = sub_DDB60C(a2);
  unint64_t v9 = sub_DDB60C(a3);
  unsigned int v10 = v9;
  if ((v8 < 0xFFFFFFFF00000000 || v8 != -1) && (v9 < 0xFFFFFFFF00000000 || v9 != -1))
  {
    if ((HIDWORD(v8) & v8) == 0xFFFFFFFF)
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_23;
    }
    unint64_t v15 = HIDWORD(v9);
    long double v22 = exp(3.14159265 - (double)HIDWORD(v8) * 6.28318531 / 4294967300.0);
    long double v23 = atan((v22 - 1.0 / v22) * 0.5) * 57.2957795 * 0.0174532925;
    v24.i64[0] = v8;
    v24.i64[1] = v10;
    long double v25 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
    long double v26 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v27 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v24), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v38 = vsubq_f64((float64x2_t)v27, (float64x2_t)vdupq_laneq_s64(v27, 1)).f64[0];
    long double v28 = sin((v23 - v26) * 0.5);
    long double v29 = v28 * v28;
    double v30 = cos(v23);
    long double v31 = v30 * cos(v26);
    long double v32 = sin(0.5 * v38);
    long double v33 = atan2(sqrt(v32 * v32 * v31 + v29), sqrt(1.0 - (v32 * v32 * v31 + v29)));
    double v34 = (v33 + v33) * 6372797.56 * 100.0;
    if (v34 >= 0.0)
    {
      double v35 = v34;
      if (v34 >= 4.50359963e15) {
        goto LABEL_42;
      }
      uint64_t v36 = (uint64_t)(v34 + v34) + 1;
    }
    else
    {
      double v35 = v34;
      if (v34 <= -4.50359963e15) {
        goto LABEL_42;
      }
      uint64_t v36 = (uint64_t)(v34 + v34);
      if (v36 >= 1) {
        --v36;
      }
    }
    double v35 = (double)(v36 >> 1);
LABEL_42:
    if (v35 >= 9.22337204e18)
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_23;
    }
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v37 = (uint64_t)(v34 + v34) + 1;
LABEL_51:
        double v34 = (double)(v37 >> 1);
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v37 = (uint64_t)(v34 + v34);
      if (v37 >= 1) {
        --v37;
      }
      goto LABEL_51;
    }
    uint64_t v16 = (uint64_t)v34;
LABEL_23:
    **(void **)(a1 + 8) += v16;
    uint64_t v17 = *(int **)(a1 + 16);
    int v18 = *v17 + 1;
    *uint64_t v17 = v18;
    uint64_t v19 = **(void **)(a1 + 24);
    if (**(void **)(a1 + 8) <= v19) {
      return;
    }
    sub_DD9B54(v19, v18, (uint64_t)v41);
    sub_3E7A68(a4, (uint64_t)v41);
    int v20 = (void **)__p;
    if (!__p) {
      return;
    }
    double v21 = v43;
    uint64_t v14 = (char *)__p;
    if (v43 != __p)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      uint64_t v14 = (char *)__p;
    }
    uint64_t v43 = v20;
LABEL_37:
    operator delete(v14);
    return;
  }
  int v39 = (char *)operator new(0x30uLL);
  long long v40 = xmmword_20B93E0;
  strcpy(v39, "Invalid waypoint coordinate in MSR request.");
  sub_3E7914(9, (long long *)&v39, (uint64_t)v41);
  sub_3E7A68(a4, (uint64_t)v41);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v43;
    __n128 v13 = __p;
    if (v43 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      __n128 v13 = __p;
    }
    uint64_t v43 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v40) < 0)
  {
    uint64_t v14 = v39;
    goto LABEL_37;
  }
}

void sub_DDA4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_C7E3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDA4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_DDA51C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  v16.n128_u64[0] = 0;
  v16.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)a3, &v16);
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0)
  {
    sub_DDDA70((uint64_t)v19, a1, a2, a3);
    if (sub_51D60(v19))
    {
      if (*(void *)(a1 + 312)) {
        double v6 = *(uint64_t (****)())(a1 + 312);
      }
      else {
        double v6 = &off_253F2E8;
      }
      sub_DD8BF8((uint64_t)v6, (uint64_t)&v16);
      sub_DDE010((uint64_t)v19, (uint64_t)&v16);
      double v7 = (void **)__p;
      if (__p)
      {
        unint64_t v8 = v18;
        unint64_t v9 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v8 - 1) < 0) {
              operator delete(*(v8 - 3));
            }
            v8 -= 4;
          }
          while (v8 != v7);
          unint64_t v9 = __p;
        }
        int v18 = v7;
        operator delete(v9);
      }
      if (*(void (****)(std::error_category *__hidden))(a3 + 8) != &off_2439090 || *(_DWORD *)a3 != 0)
      {
        uint64_t v14 = operator new(0x28uLL);
        long long v15 = xmmword_20B9280;
        strcpy((char *)v14, "Request has invalid user location.");
        sub_3E7914(2, (long long *)&v14, (uint64_t)&v16);
        sub_DDE010((uint64_t)v19, (uint64_t)&v16);
        uint64_t v11 = (void **)__p;
        if (__p)
        {
          uint64_t v12 = v18;
          __n128 v13 = __p;
          if (v18 != __p)
          {
            do
            {
              if (*((char *)v12 - 1) < 0) {
                operator delete(*(v12 - 3));
              }
              v12 -= 4;
            }
            while (v12 != v11);
            __n128 v13 = __p;
          }
          int v18 = v11;
          operator delete(v13);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(v14);
        }
      }
    }
    if (v21 < 0) {
      operator delete(v20);
    }
  }
}

void sub_DDA6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_C7E3C8((uint64_t)&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      sub_C7E3C8(v27);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  sub_C7E3C8(v27);
  _Unwind_Resume(a1);
}

void sub_DDA770(_Unwind_Exception *a1)
{
  sub_C7E3C8(v1);
  _Unwind_Resume(a1);
}

void sub_DDA784(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, __int16 a4@<W3>, __n128 *a5@<X8>)
{
  int v51 = 0;
  __p[0] = &off_2439090;
  sub_3E7814(a5, (__n128 *)&v51);
  unsigned int v10 = sub_DB7034(a1);
  unsigned int v11 = v10;
  if (v10 > 0xD)
  {
    unsigned int v12 = 0;
  }
  else if (((1 << v10) & 0x37F9) != 0)
  {
    unsigned int v12 = 3;
  }
  else
  {
    if (((1 << v10) & 6) == 0)
    {
      unsigned int v13 = 0;
LABEL_13:
      unsigned int v14 = 0;
      goto LABEL_14;
    }
    unsigned int v12 = 4;
  }
  if (v12 >= a4) {
    unsigned int v13 = a4;
  }
  else {
    unsigned int v13 = v12;
  }
  unsigned int v14 = 4;
  switch(v10)
  {
    case 1u:
    case 2u:
      break;
    case 3u:
    case 0xAu:
    case 0xCu:
    case 0xDu:
      unsigned int v14 = 2;
      break;
    case 5u:
    case 6u:
    case 7u:
    case 9u:
      unsigned int v14 = 3;
      break;
    default:
      goto LABEL_13;
  }
LABEL_14:
  sub_DDDA70((uint64_t)v57, a1, v13, (uint64_t)a5);
  if (v14 >= HIBYTE(a4)) {
    unsigned int v15 = HIBYTE(a4);
  }
  else {
    unsigned int v15 = v14;
  }
  sub_DDDA70((uint64_t)v54, a1, v15, (uint64_t)a5);
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    HIBYTE(v50[2]) = 17;
    strcpy((char *)v50, "DirectionsRequest");
    sub_DD5D08(a1, (__n128 *)&v51);
    sub_DDE010((uint64_t)v54, (uint64_t)&v51);
    __n128 v16 = (void **)__p[1];
    if (__p[1])
    {
      uint64_t v17 = v53;
      int v18 = __p[1];
      if (v53 != __p[1])
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 4;
        }
        while (v17 != v16);
        int v18 = __p[1];
      }
      int v53 = v16;
      operator delete(v18);
    }
    if (SHIBYTE(v50[2]) < 0) {
      operator delete(v50[0]);
    }
    if (*(unsigned char *)(nullsub_1(a2) + 128)) {
      goto LABEL_32;
    }
    int v51 = operator new(0x58uLL);
    *(_OWORD *)std::string __p = xmmword_20F0630;
    strcpy((char *)v51, "Got a reroute DirectionsRequest where the session_state did not contain the user route.");
    sub_DDE278((uint64_t)v54, 6, (long long *)&v51);
  }
  else
  {
    int v51 = operator new(0x48uLL);
    *(_OWORD *)std::string __p = xmmword_20B9AA0;
    strcpy((char *)v51, "Got a reroute DirectionsRequest without a session_state populated.");
    sub_DDE278((uint64_t)v54, 6, (long long *)&v51);
  }
  if (SHIBYTE(__p[1]) < 0)
  {
    operator delete(v51);
    if ((*(unsigned char *)(a1 + 42) & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
LABEL_32:
  if ((*(unsigned char *)(a1 + 42) & 1) == 0)
  {
LABEL_33:
    if (v11 && !*(_DWORD *)(a1 + 80))
    {
      int v51 = operator new(0x20uLL);
      *(_OWORD *)std::string __p = xmmword_20B91B0;
      strcpy((char *)v51, "Got a reroute without zilch.");
      sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
      goto LABEL_123;
    }
LABEL_124:
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_128;
  }
LABEL_37:
  if (sub_DBD8E0(a1))
  {
    sub_DBBB30(a1, (uint64_t)&v51);
    if (!BYTE4(v51))
    {
      int v51 = operator new(0x40uLL);
      *(_OWORD *)std::string __p = xmmword_20B99C0;
      strcpy((char *)v51, "Got a DirectionsRequest without the user's route identifier.");
      sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
      if (SHIBYTE(__p[1]) < 0) {
        operator delete(v51);
      }
    }
  }
  if (*(void *)(a1 + 392)) {
    uint64_t v19 = *(uint64_t (****)())(a1 + 392);
  }
  else {
    uint64_t v19 = &off_25351C0;
  }
  if (((_BYTE)v19[2] & 0x10) == 0
    && (int v51 = operator new(0x30uLL),
        *(_OWORD *)std::string __p = xmmword_20B93B0,
        strcpy((char *)v51, "OriginalWaypointRoute is missing the purpose."),
        sub_DDE278((uint64_t)v57, 7, (long long *)&v51),
        SHIBYTE(__p[1]) < 0))
  {
    operator delete(v51);
    if (*((_DWORD *)v19 + 16)) {
      goto LABEL_50;
    }
  }
  else if (*((_DWORD *)v19 + 16))
  {
    goto LABEL_50;
  }
  int v51 = operator new(0x30uLL);
  *(_OWORD *)std::string __p = xmmword_20B93E0;
  strcpy((char *)v51, "OriginalWaypointRoute with purpose UNKNOWN.");
  sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v51);
  }
LABEL_50:
  if (((_BYTE)v19[2] & 2) != 0 && !*((_DWORD *)v19 + 13))
  {
    int v51 = operator new(0x38uLL);
    *(_OWORD *)std::string __p = xmmword_20B9A60;
    strcpy((char *)v51, "OriginalWaypointRoute has source set to UNKNOWN.");
    sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
    if (SHIBYTE(__p[1]) < 0) {
      operator delete(v51);
    }
  }
  int v20 = (uint64_t *)sub_374CE4(a3);
  char v21 = sub_2ABCBC(*v20);
  if (*((_DWORD *)v19 + 13) == 2
    && (v21 & 1) == 0
    && (*((_DWORD *)v19 + 16) - 9) >= 2
    && (int v51 = operator new(0x98uLL),
        *(_OWORD *)std::string __p = xmmword_20F0640,
        strcpy((char *)v51, "Request made to online service with OriginalWaypointRoute that has source OFFLINE_SERVICE, but the purpose is not for an offline-to-online transition."), sub_DDE278((uint64_t)v57, 7, (long long *)&v51), SHIBYTE(__p[1]) < 0))
  {
    operator delete(v51);
    if (((_BYTE)v19[2] & 2) == 0) {
      goto LABEL_72;
    }
  }
  else if (((_BYTE)v19[2] & 2) == 0)
  {
    goto LABEL_72;
  }
  if (*(unsigned char *)(nullsub_1(a2) + 128))
  {
    uint64_t v22 = sub_DBFB20(*((_DWORD *)v19 + 13));
    uint64_t v23 = nullsub_1(a2);
    if (!*(unsigned char *)(v23 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v24 = sub_491B18(v23);
    if (v22 != v24)
    {
      sub_DE7FC8(v22, (char *)v50);
      sub_DE7FC8(v24, (char *)v48);
      sub_DDB3DC("Different route source in the OriginalWaypointRoute (", (uint64_t)v50, ") and the session state (", (uint64_t)v48, ") of the request.");
      sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
      if (SHIBYTE(__p[1]) < 0)
      {
        operator delete(v51);
        if ((v49 & 0x80000000) == 0)
        {
LABEL_64:
          if ((SHIBYTE(v50[2]) & 0x80000000) == 0) {
            goto LABEL_72;
          }
LABEL_71:
          operator delete(v50[0]);
          goto LABEL_72;
        }
      }
      else if ((v49 & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(v48[0]);
      if ((SHIBYTE(v50[2]) & 0x80000000) == 0) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
LABEL_72:
  int v25 = *((_DWORD *)v19 + 16);
  if (v25 == 10)
  {
    if (((_BYTE)v19[2] & 2) != 0) {
      goto LABEL_88;
    }
    int v51 = operator new(0x38uLL);
    *(_OWORD *)std::string __p = xmmword_20B9A10;
    strcpy((char *)v51, "OriginalWaypointRoute does not have a source set.");
    sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
    if (SHIBYTE(__p[1]) < 0) {
      operator delete(v51);
    }
    int v25 = *((_DWORD *)v19 + 16);
  }
  if (v25 == 13)
  {
    if (((_BYTE)v19[2] & 4) != 0) {
      goto LABEL_88;
    }
    int v51 = operator new(0x68uLL);
    *(_OWORD *)std::string __p = xmmword_20F0650;
    strcpy((char *)v51, "Original route purpose is REROUTING_ONTO_ORIGINAL_ROUTE but no last_valid_user_offset_cm was provided.");
    sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
    if (SHIBYTE(__p[1]) < 0) {
      operator delete(v51);
    }
    int v25 = *((_DWORD *)v19 + 16);
  }
  if (v25 == 11)
  {
    uint64_t v27 = v19[5];
    long double v26 = v19 + 5;
    long double v29 = (int *)(v26 - 1);
    uint64_t v28 = *((int *)v26 - 2);
    double v30 = v27 + 1;
    if (v27) {
      long double v31 = v30;
    }
    else {
      long double v31 = 0;
    }
    if (v28)
    {
      long double v32 = &v31[v28];
      goto LABEL_93;
    }
    goto LABEL_98;
  }
LABEL_88:
  long double v29 = (int *)(v19 + 4);
  uint64_t v33 = *((int *)v19 + 8);
  if (!v33)
  {
    int v51 = operator new(0x30uLL);
    *(_OWORD *)std::string __p = xmmword_20B93B0;
    strcpy((char *)v51, "OriginalWaypointRoute without any route legs.");
    sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
    goto LABEL_123;
  }
  double v34 = v19[5];
  long double v26 = v19 + 5;
  double v35 = v34 + 1;
  if (v34) {
    long double v31 = v35;
  }
  else {
    long double v31 = 0;
  }
  long double v32 = &v31[v33];
LABEL_93:
  while ((*((unsigned char *)*v31 + 40) & 3) != 0)
  {
    if (++v31 == v32) {
      goto LABEL_98;
    }
  }
  int v51 = operator new(0x48uLL);
  *(_OWORD *)std::string __p = xmmword_20E8240;
  strcpy((char *)v51, "OriginalWaypointRoute with a route leg missing zilch/path points.");
  sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v51);
  }
LABEL_98:
  if (!sub_51D60(v54) || !*(unsigned char *)(nullsub_1(a2) + 128))
  {
LABEL_104:
    LODWORD(v38) = *v29;
    goto LABEL_105;
  }
  uint64_t v36 = nullsub_1(a2);
  if (!*(unsigned char *)(v36 + 128))
  {
    int v47 = __cxa_allocate_exception(8uLL);
    void *v47 = &off_2439078;
  }
  unsigned int v37 = sub_491B68(v36);
  unint64_t v38 = *v29;
  if (v37 < v38)
  {
    int v51 = operator new(0x40uLL);
    *(_OWORD *)std::string __p = xmmword_20B9A90;
    strcpy((char *)v51, "OriginalWaypointRoute has more legs than the session_state.");
    sub_DDE278((uint64_t)v54, 6, (long long *)&v51);
    if (SHIBYTE(__p[1]) < 0) {
      operator delete(v51);
    }
    goto LABEL_104;
  }
LABEL_105:
  if (*v26) {
    uint64_t v39 = *v26 + 8;
  }
  else {
    uint64_t v39 = 0;
  }
  if (!v38) {
    goto LABEL_124;
  }
  uint64_t v40 = (int)v38;
  uint64_t v41 = v39 + 8 * (int)v38;
  uint64_t v42 = 8 * v40;
  while (1)
  {
    uint64_t v43 = *(uint64_t (****)())(*(void *)v39 + 72);
    if (!v43) {
      uint64_t v43 = &off_25352D0;
    }
    if ((*((unsigned char *)v43 + 17) & 4) != 0) {
      break;
    }
    unint64_t v44 = *(uint64_t (****)())(*(void *)v39 + 80);
    if (!v44) {
      unint64_t v44 = &off_25352D0;
    }
    if ((*((unsigned char *)v44 + 17) & 4) != 0) {
      break;
    }
    v39 += 8;
    v42 -= 8;
    if (!v42) {
      goto LABEL_124;
    }
  }
  int v45 = *(uint64_t (****)())(*(void *)(v41 - 8) + 80);
  if (!v45) {
    int v45 = &off_25352D0;
  }
  if (*((_DWORD *)v45 + 26) == 1) {
    goto LABEL_124;
  }
  int v51 = operator new(0x60uLL);
  *(_OWORD *)std::string __p = xmmword_20EB670;
  strcpy((char *)v51, "OriginalWaypointRoute specifies waypoint sources, but destination waypoint source is not USER.");
  sub_DDE278((uint64_t)v57, 7, (long long *)&v51);
LABEL_123:
  if ((SHIBYTE(__p[1]) & 0x80000000) == 0) {
    goto LABEL_124;
  }
  operator delete(v51);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_125:
    if ((v59 & 0x80000000) == 0) {
      return;
    }
LABEL_129:
    operator delete(v58);
    return;
  }
LABEL_128:
  operator delete(v55);
  if (v59 < 0) {
    goto LABEL_129;
  }
}

void sub_DDB1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a38 < 0)
  {
    operator delete(a33);
    if ((*(char *)(v39 - 73) & 0x80000000) == 0)
    {
LABEL_5:
      sub_C7E3C8(v38);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v39 - 73) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v39 - 96));
  sub_C7E3C8(v38);
  _Unwind_Resume(a1);
}

uint64_t sub_DDB3DC(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v21);
  size_t v10 = strlen(a1);
  sub_188FC78(v22, (uint64_t)a1, v10);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  sub_188FC78(v22, v12, v13);
  size_t v14 = strlen(a3);
  sub_188FC78(v22, (uint64_t)a3, v14);
  int v15 = *(char *)(a4 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = *(void *)a4;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a4 + 8);
  }
  sub_188FC78(v22, v16, v17);
  size_t v18 = strlen(a5);
  sub_188FC78(v22, (uint64_t)a5, v18);
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v19;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_DDB5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDB5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_DDB60C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 80);
  if (v1 == 2)
  {
    int v4 = *(uint64_t (****)())(a1 + 24);
    if (!v4) {
      int v4 = &off_25399D8;
    }
    int v5 = (uint64_t (***)())v4[10];
  }
  else
  {
    if (v1 == 4)
    {
      double v6 = &off_2539A90;
      if (*(void *)(a1 + 40)) {
        double v6 = *(uint64_t (****)())(a1 + 40);
      }
      uint64_t v2 = (uint64_t (***)())v6[6];
      double v3 = &off_253F2E8;
    }
    else
    {
      if (v1 != 3) {
        return -1;
      }
      uint64_t v2 = *(uint64_t (****)())(a1 + 32);
      double v3 = &off_2539A50;
    }
    if (!v2) {
      uint64_t v2 = v3;
    }
    int v5 = (uint64_t (***)())v2[6];
  }
  double v7 = &off_253F1A0;
  if (v5) {
    double v7 = v5;
  }
  double v8 = *((double *)v7 + 7);
  uint64_t v9 = -1;
  if (v8 <= 180.0)
  {
    double v10 = *((double *)v7 + 6);
    if (v10 >= -85.0511288 && v10 <= 85.0511288 && v8 >= -180.0)
    {
      double v11 = fmax(v10, -85.0511288);
      double v12 = v11 * 3.14159265 / 180.0;
      BOOL v13 = v11 < 85.0511288;
      double v14 = 1.48442223;
      if (v13) {
        double v14 = v12;
      }
      long double v15 = sin(v14);
      LODWORD(v16) = ((log((v15 + 1.0) / (1.0 - v15)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v16 >= 0xFFFFFFFE) {
        uint64_t v16 = 4294967294;
      }
      else {
        uint64_t v16 = v16;
      }
      return ((v8 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v16 << 32);
    }
  }
  return v9;
}

char *sub_DDB7CC(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    double v8 = (char *)operator new(32 * v7);
  }
  else
  {
    double v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  size_t v18 = &v8[32 * v7];
  sub_DDB94C(a1 + 16, v17, a2);
  uint64_t v9 = v17;
  double v10 = v17 + 32;
  double v11 = *a1;
  double v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long double v15 = *a1;
    double v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      double v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_DDB938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDB94C(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    double v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  double v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)double v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  double v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_DDBA68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DDBA7C(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    double v8 = (char *)operator new(32 * v7);
  }
  else
  {
    double v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  size_t v18 = &v8[32 * v7];
  sub_DDBBFC(a1 + 16, v17, a2);
  uint64_t v9 = v17;
  uint64_t v10 = v17 + 32;
  double v11 = *a1;
  double v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long double v15 = *a1;
    double v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      double v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_DDBBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDBBFC(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    double v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  double v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)double v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  double v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_DDBD18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DDBD2C(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    double v8 = (char *)operator new(32 * v7);
  }
  else
  {
    double v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  size_t v18 = &v8[32 * v7];
  sub_DDBEAC(a1 + 16, v17, a2);
  uint64_t v9 = v17;
  uint64_t v10 = v17 + 32;
  double v11 = *a1;
  double v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long double v15 = *a1;
    double v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      double v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_DDBE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDBEAC(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    double v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  double v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)double v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  double v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_DDBFC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DDBFDC(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    double v8 = (char *)operator new(32 * v7);
  }
  else
  {
    double v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  size_t v18 = &v8[32 * v7];
  sub_DDC15C(a1 + 16, v17, a2);
  uint64_t v9 = v17;
  uint64_t v10 = v17 + 32;
  double v11 = *a1;
  double v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long double v15 = *a1;
    double v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      double v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_DDC148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDC15C(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    double v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  double v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)double v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  double v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_DDC278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_DDC28C(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    double v8 = (char *)operator new(32 * v7);
  }
  else
  {
    double v8 = 0;
  }
  uint64_t v17 = &v8[32 * v3];
  size_t v18 = &v8[32 * v7];
  sub_DDC40C(a1 + 16, v17, a2);
  uint64_t v9 = v17;
  uint64_t v10 = v17 + 32;
  double v11 = *a1;
  double v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long double v15 = *a1;
    double v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      double v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_DDC3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_DDC40C(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    double v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  double v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)double v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  double v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_DDC528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_DDC53C()
{
  unk_25EB687 = 16641;
  word_25EB670 = 65;
  byte_25EB69F = 1;
  byte_25EB689 = 0;
}

uint64_t sub_DDC564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  if (sub_DBD8E0(a1))
  {
    uint64_t v18 = 0;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = xmmword_20B9280;
    strcpy((char *)v19, "DrivingDirectionsRequestValidation");
    std::string __p = 0;
    uint64_t v17 = 0;
    size_t v6 = sub_374CDC(a2, (uint64_t)&v19, (uint64_t *)&__p);
    if (v21 != (_OWORD *)v6)
    {
      int v22 = *((_DWORD *)v6 + 8);
      sub_5A4DC(v21, (uint64_t *)v6[2], 0);
    }
    unint64_t v7 = (void **)__p;
    if (!__p) {
      goto LABEL_30;
    }
    double v8 = v17;
    uint64_t v9 = __p;
    if (v17 == __p) {
      goto LABEL_29;
    }
    do
    {
      if (*((char *)v8 - 1) < 0) {
        operator delete(*(v8 - 3));
      }
      v8 -= 3;
    }
    while (v8 != v7);
    goto LABEL_28;
  }
  if (sub_DBD904(a1))
  {
    uint64_t v18 = 0;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = xmmword_20B9280;
    strcpy((char *)v19, "CyclingDirectionsRequestValidation");
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v10 = sub_374CDC(a2, (uint64_t)&v19, (uint64_t *)&__p);
    if (v21 != (_OWORD *)v10)
    {
      int v22 = *((_DWORD *)v10 + 8);
      sub_5A4DC(v21, (uint64_t *)v10[2], 0);
    }
    unint64_t v7 = (void **)__p;
    if (!__p) {
      goto LABEL_30;
    }
    double v11 = v17;
    uint64_t v9 = __p;
    if (v17 == __p) {
      goto LABEL_29;
    }
    do
    {
      if (*((char *)v11 - 1) < 0) {
        operator delete(*(v11 - 3));
      }
      v11 -= 3;
    }
    while (v11 != v7);
    goto LABEL_28;
  }
  if (!sub_DBD3E8(a1)) {
    goto LABEL_32;
  }
  uint64_t v18 = 0;
  uint64_t v19 = operator new(0x28uLL);
  long long v20 = xmmword_20B9280;
  strcpy((char *)v19, "WalkingDirectionsRequestValidation");
  std::string __p = 0;
  uint64_t v17 = 0;
  double v12 = sub_374CDC(a2, (uint64_t)&v19, (uint64_t *)&__p);
  if (v21 != (_OWORD *)v12)
  {
    int v22 = *((_DWORD *)v12 + 8);
    sub_5A4DC(v21, (uint64_t *)v12[2], 0);
  }
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    unint64_t v13 = v17;
    uint64_t v9 = __p;
    if (v17 == __p) {
      goto LABEL_29;
    }
    do
    {
      if (*((char *)v13 - 1) < 0) {
        operator delete(*(v13 - 3));
      }
      v13 -= 3;
    }
    while (v13 != v7);
LABEL_28:
    uint64_t v9 = __p;
LABEL_29:
    uint64_t v17 = v7;
    operator delete(v9);
  }
LABEL_30:
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
LABEL_32:
  int v14 = sub_DBEEE4(a1);
  sub_DDC854(v21, v14, a3);
  return sub_5450C((uint64_t)v21);
}

void sub_DDC800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_DDC854(void *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25EB6A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25EB6A0))
  {
    xmmword_25EB6D8[1] = 0u;
    xmmword_25EB6D8[0] = 0u;
    dword_25EB6F8 = 1065353216;
    __cxa_guard_release(&qword_25EB6A0);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7958113;
  size_t v6 = sub_58070(a1, (uint64_t)&__p);
  if (v6 && *((_DWORD *)v6 + 12) == 2) {
    unint64_t v7 = (_OWORD *)v6[5];
  }
  else {
    unint64_t v7 = xmmword_25EB6D8;
  }
  sub_54214((uint64_t)a3, (uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v8 = 0;
  int v9 = a2 + 1;
  do
  {
    std::to_string(&__p, v8);
    uint64_t v10 = sub_58070(a1, (uint64_t)&__p);
    if (v10)
    {
      double v11 = xmmword_25EB6D8;
      if (*((_DWORD *)v10 + 12) == 2) {
        double v11 = (_OWORD *)v10[5];
      }
    }
    else
    {
      double v11 = xmmword_25EB6D8;
    }
    sub_59234(a3, (uint64_t)v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v8;
  }
  while (v9 != v8);
}

void sub_DDC9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_DDC9EC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  HIBYTE(v13[2]) = 21;
  strcpy((char *)v13, "ETAURequestValidation");
  std::string __p = 0;
  double v11 = 0;
  uint64_t v12 = 0;
  size_t v5 = sub_374CDC(a2, (uint64_t)v13, (uint64_t *)&__p);
  int v6 = sub_DBEF74(a1);
  sub_DDC854(v5, v6, a3);
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    int v8 = v11;
    int v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = __p;
    }
    double v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
}

void sub_DDCAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_DDCB0C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  HIBYTE(v13[2]) = 20;
  strcpy((char *)v13, "ETARequestValidation");
  std::string __p = 0;
  double v11 = 0;
  uint64_t v12 = 0;
  size_t v5 = sub_374CDC(a2, (uint64_t)v13, (uint64_t *)&__p);
  int v6 = sub_DBF004(a1);
  sub_DDC854(v5, v6, a3);
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    int v8 = v11;
    int v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = __p;
    }
    double v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
}

void sub_DDCC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_DDCC30()
{
  unk_25EB6BF = 16641;
  word_25EB6A8 = 65;
  byte_25EB6D7 = 1;
  byte_25EB6C1 = 0;
}

uint64_t sub_DDCC58(uint64_t a1)
{
  uint64_t v2 = sub_DDD2D4(&xmmword_25EB700, a1);
  if (v2) {
    return *((unsigned __int8 *)v2 + 40);
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v11);
    unint64_t v4 = sub_188FC78(v11, (uint64_t)"The Level ", 10);
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(void *)a1;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    int v8 = sub_188FC78(v4, v6, v7);
    sub_188FC78(v8, (uint64_t)" is not a valid RequestValidationLevel.", 39);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_DDCE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_DDCE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  long double v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long double v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long double v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        double v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long double v29 = *(void **)(*(void *)a1 + 8 * v10);
        double v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long double v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      double v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *double v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long double v29 = *(void **)(*(void *)a1 + 8 * v3);
  double v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *double v30 = *v29;
  *long double v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_DDD2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_DDD2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_DDD2D4(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_DDD504()
{
  __int16 v1 = 8;
  strcpy((char *)v0, "disabled");
  __int16 v3 = 269;
  strcpy((char *)v2, "warn_internal");
  __int16 v5 = 516;
  strcpy((char *)v4, "warn");
  char v7 = 13;
  strcpy((char *)v6, "fail_internal");
  char v8 = 3;
  __int16 v10 = 1028;
  strcpy((char *)__p, "fail");
  xmmword_25EB700 = 0u;
  *(_OWORD *)&qword_25EB710 = 0u;
  dword_25EB720 = 1065353216;
  sub_DDCE60((uint64_t)&xmmword_25EB700, (uint64_t)v0, (uint64_t)v0);
  sub_DDCE60((uint64_t)&xmmword_25EB700, (uint64_t)v2, (uint64_t)v2);
  sub_DDCE60((uint64_t)&xmmword_25EB700, (uint64_t)v4, (uint64_t)v4);
  sub_DDCE60((uint64_t)&xmmword_25EB700, (uint64_t)v6, (uint64_t)v6);
  sub_DDCE60((uint64_t)&xmmword_25EB700, (uint64_t)__p, (uint64_t)__p);
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if (((char)v5 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v6[0]);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_4:
    if (((char)v3 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v4[0]);
  if (((char)v3 & 0x80000000) == 0)
  {
LABEL_5:
    if (((char)v1 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v0[0]);
    return;
  }
LABEL_10:
  operator delete(v2[0]);
  if ((char)v1 < 0) {
    goto LABEL_11;
  }
}

void sub_DDD6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (qword_25EB710) {
    sub_20B0940((void **)qword_25EB710);
  }
  unint64_t v44 = (void *)xmmword_25EB700;
  *(void *)&xmmword_25EB700 = 0;
  if (v44)
  {
    operator delete(v44);
    if ((a43 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a36 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a29 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a31);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a15 & 0x80000000) == 0) {
LABEL_16:
    }
      _Unwind_Resume(exception_object);
LABEL_15:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_14:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t sub_DDD7AC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  __int16 v5 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  if (!a3) {
    return a1;
  }
  int v8 = sub_DBE8AC(a2);
  if (v8) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v8) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = 4;
  }
  *(unsigned char *)a1 = v9 <= a3;
  *(unsigned char *)(a1 + 1) = v10 <= a3;
  sub_DBE84C(a2);
  unint64_t v11 = sub_DC6B80(a2);
  std::operator+<char>();
  uint8x8_t v12 = std::string::append(&v24, "\" app_id=\"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v15 = *(const std::string::value_type **)v11;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(v11 + 8);
  }
  unint64_t v17 = std::string::append(&v25, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v26, "\"");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v28 = v19->__r_.__value_.__r.__words[2];
  long long v27 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v27;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v27;
  }
  if (v28 >= 0) {
    std::string::size_type v22 = HIBYTE(v28);
  }
  else {
    std::string::size_type v22 = *((void *)&v27 + 1);
  }
  std::string::append(v5, v21, v22);
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)v27);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_23:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_28:
  operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_DDD97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DDDA74(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  __int16 v5 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  if (!a3) {
    return a1;
  }
  int v8 = sub_DBE8C8(a2);
  if (v8) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v8) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = 4;
  }
  *(unsigned char *)a1 = v9 <= a3;
  *(unsigned char *)(a1 + 1) = v10 <= a3;
  sub_DBE86C(a2);
  unint64_t v11 = sub_DBE834(a2);
  std::operator+<char>();
  uint8x8_t v12 = std::string::append(&v24, "\" app_id=\"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v15 = *(const std::string::value_type **)v11;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(v11 + 8);
  }
  unint64_t v17 = std::string::append(&v25, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v26, "\"");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v28 = v19->__r_.__value_.__r.__words[2];
  long long v27 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v27;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v27;
  }
  if (v28 >= 0) {
    std::string::size_type v22 = HIBYTE(v28);
  }
  else {
    std::string::size_type v22 = *((void *)&v27 + 1);
  }
  std::string::append(v5, v21, v22);
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)v27);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_23:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_28:
  operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_DDDC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DDDD3C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  __int16 v5 = (std::string *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  if (!a3) {
    return a1;
  }
  int v8 = sub_DBE8E4(a2);
  if (v8) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v8) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = 4;
  }
  *(unsigned char *)a1 = v9 <= a3;
  *(unsigned char *)(a1 + 1) = v10 <= a3;
  sub_DBE88C(a2);
  unint64_t v11 = sub_DBE834(a2);
  std::operator+<char>();
  uint8x8_t v12 = std::string::append(&v24, "\" app_id=\"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const std::string::value_type *)v11;
  }
  else {
    uint64_t v15 = *(const std::string::value_type **)v11;
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    std::string::size_type v16 = *(void *)(v11 + 8);
  }
  unint64_t v17 = std::string::append(&v25, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v26, "\"");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v28 = v19->__r_.__value_.__r.__words[2];
  long long v27 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v27;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v27;
  }
  if (v28 >= 0) {
    std::string::size_type v22 = HIBYTE(v28);
  }
  else {
    std::string::size_type v22 = *((void *)&v27 + 1);
  }
  std::string::append(v5, v21, v22);
  if (SHIBYTE(v28) < 0)
  {
    operator delete((void *)v27);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_27:
      operator delete(v25.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_23:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_28:
  operator delete(v24.__r_.__value_.__l.__data_);
  return a1;
}

void sub_DDDF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v28 + 31) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*v29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_DDE004(uint64_t a1)
{
  return **(void **)(a1 + 32);
}

uint64_t sub_DDE010(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 24);
    if (v3 != v4)
    {
      do
      {
        int v7 = *(char *)(v2 + 31);
        if (v7 >= 0) {
          int v8 = (const std::string::value_type *)(v2 + 8);
        }
        else {
          int v8 = *(const std::string::value_type **)(v2 + 8);
        }
        if (v7 >= 0) {
          std::string::size_type v9 = *(unsigned __int8 *)(v2 + 31);
        }
        else {
          std::string::size_type v9 = *(void *)(v2 + 16);
        }
        std::string::append((std::string *)(v3 + 8), v8, v9);
        uint64_t result = sub_723EC(3u);
        if (result)
        {
          sub_6BAC((uint64_t)v15);
          sub_CBB20C((unsigned __int8 *)v3, (uint64_t)__p);
          if ((v14 & 0x80u) == 0) {
            unsigned int v10 = __p;
          }
          else {
            unsigned int v10 = (void **)__p[0];
          }
          if ((v14 & 0x80u) == 0) {
            uint64_t v11 = v14;
          }
          else {
            uint64_t v11 = (uint64_t)__p[1];
          }
          sub_188FC78(v15, (uint64_t)v10, v11);
          if ((char)v14 < 0) {
            operator delete(__p[0]);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if ((char)v14 < 0) {
            operator delete(__p[0]);
          }
          v15[0] = v5;
          *(void *)((char *)v15 + *(void *)(v5 - 24)) = v6;
          if (v16 < 0) {
            operator delete((void *)v15[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          uint64_t result = std::ios::~ios();
        }
        v3 += 32;
      }
      while (v3 != v4);
    }
    if (*(unsigned char *)(v2 + 1)) {
      return sub_3E7A10(*(void *)(v2 + 32), a2);
    }
  }
  return result;
}

void sub_DDE228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_DDE278(uint64_t a1, char a2, long long *a3)
{
  sub_3E7914(a2, a3, (uint64_t)v7);
  sub_DDE010(a1, (uint64_t)v7);
  uint64_t v4 = (void **)__p;
  if (__p)
  {
    uint64_t v5 = v9;
    uint64_t v6 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 4;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    std::string::size_type v9 = v4;
    operator delete(v6);
  }
}

void sub_DDE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DDE318()
{
  unk_25EB73F = 16641;
  word_25EB728 = 65;
  byte_25EB757 = 1;
  byte_25EB741 = 0;
}

char *sub_DDE340@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = a2;
  v73.n128_u64[0] = 0;
  v73.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(a2, &v73);
  uint64_t v61 = (char **)&v3[1];
  uint64_t v62 = a1;
  int v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 0x400) == 0)
  {
    v73.n128_u8[0] = 8;
    unint64_t v5 = v3[1].n128_u64[1];
    if (v5 >= v3[2].n128_u64[0])
    {
      uint64_t result = sub_DA37C4(v61, (char *)&v73, "Got a WaypointTyped without a waypoint type specified.");
LABEL_151:
      v3[1].n128_u64[1] = (unint64_t)result;
      goto LABEL_152;
    }
    sub_DA394C(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got a WaypointTyped without a waypoint type specified.");
LABEL_150:
    uint64_t result = (char *)(v5 + 32);
    v3[1].n128_u64[1] = v5 + 32;
    goto LABEL_151;
  }
  if (v4)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((*(unsigned char *)(v9 + 40) & 2) != 0)
    {
      sub_DD88A0(*(void *)(v9 + 80), (uint64_t)&v73);
      unsigned __int32 v11 = v73.n128_u32[0];
      uint8x8_t v12 = (void **)__p;
      if (__p)
      {
        long long v13 = v75;
        unsigned __int8 v14 = __p;
        if (v75 != __p)
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 4;
          }
          while (v13 != v12);
          unsigned __int8 v14 = __p;
        }
        int v75 = v12;
        operator delete(v14);
      }
      if (!v11)
      {
LABEL_26:
        if (sub_1882CC4(v9 + 16, dword_254EAF8))
        {
          uint64_t v16 = sub_1883F34(v9 + 16, dword_254EAF8, qword_254EB00);
          sub_DDF2E0(v16, (uint64_t)v70);
          long long v18 = (unsigned __int8 *)v71;
          unint64_t v17 = v72;
          if (v71 != v72)
          {
            BOOL v60 = v3;
            do
            {
              if (sub_723EC(3u))
              {
                sub_6BAC((uint64_t)&v73);
                sub_CBB20C(v18, (uint64_t)&v81);
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v21 = &v81;
                }
                else {
                  uint64_t v21 = (std::string *)v81.__r_.__value_.__r.__words[0];
                }
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v81.__r_.__value_.__l.__size_;
                }
                sub_188FC78(&v73, (uint64_t)v21, size);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
                std::stringbuf::str();
                sub_7246C((uint64_t *)&v81, 3u);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v81.__r_.__value_.__l.__data_);
                }
                v73.n128_u64[0] = v19;
                *(unint64_t *)((char *)v73.n128_u64 + *(void *)(v19 - 24)) = v20;
                if (SBYTE7(v77) < 0) {
                  operator delete((void *)v76);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              v18 += 32;
            }
            while (v18 != v17);
            long long v18 = (unsigned __int8 *)v71;
            uint64_t v3 = v60;
          }
          if (v18)
          {
            uint64_t v23 = v72;
            std::string v24 = v18;
            if (v72 != v18)
            {
              do
              {
                if ((char)*(v23 - 1) < 0) {
                  operator delete(*((void **)v23 - 3));
                }
                v23 -= 32;
              }
              while (v23 != v18);
              std::string v24 = v71;
            }
            int v72 = v18;
            operator delete(v24);
          }
          int v6 = 1;
          uint64_t v7 = v62;
          if ((*(unsigned char *)(v62 + 16) & 2) == 0) {
            goto LABEL_124;
          }
        }
        else
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v73);
            sub_188FC78(&v73, (uint64_t)"Got a WaypointID without a resolved place from JavaDispatcher.", 62);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v70, 1u);
            if (SHIBYTE(v71) < 0) {
              operator delete(v70[0]);
            }
            if (SBYTE7(v77) < 0) {
              operator delete((void *)v76);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          int v6 = 1;
          uint64_t v7 = v62;
          if ((*(unsigned char *)(v62 + 16) & 2) == 0) {
            goto LABEL_124;
          }
        }
        goto LABEL_62;
      }
      v73.n128_u8[0] = 8;
      unint64_t v10 = v3[1].n128_u64[1];
      if (v10 >= v3[2].n128_u64[0])
      {
        uint64_t v15 = sub_DE23A0(v61, (char *)&v73, "Got an invalid WaypointID.location_hint.");
        goto LABEL_25;
      }
      sub_DE2528(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got an invalid WaypointID.location_hint.");
    }
    else
    {
      v73.n128_u8[0] = 8;
      unint64_t v10 = v3[1].n128_u64[1];
      if (v10 >= v3[2].n128_u64[0])
      {
        uint64_t v15 = sub_DE20E4(v61, (char *)&v73, "Got a WaypointID missing the location_hint");
LABEL_25:
        v3[1].n128_u64[1] = (unint64_t)v15;
        goto LABEL_26;
      }
      sub_DE226C(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got a WaypointID missing the location_hint");
    }
    uint64_t v15 = (char *)(v10 + 32);
    v3[1].n128_u64[1] = v10 + 32;
    goto LABEL_25;
  }
  int v6 = 0;
  uint64_t v7 = a1;
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    goto LABEL_124;
  }
LABEL_62:
  uint64_t v25 = *(void *)(v7 + 32);
  if ((*(unsigned char *)(v25 + 16) & 1) == 0) {
    goto LABEL_72;
  }
  sub_DD88A0(*(void *)(v25 + 48), (uint64_t)&v73);
  unsigned __int32 v26 = v73.n128_u32[0];
  long long v27 = (void **)__p;
  if (__p)
  {
    uint64_t v28 = v75;
    long double v29 = __p;
    if (v75 != __p)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 4;
      }
      while (v28 != v27);
      long double v29 = __p;
    }
    int v75 = v27;
    operator delete(v29);
  }
  if (v26)
  {
LABEL_72:
    v73.n128_u8[0] = 8;
    unint64_t v30 = v3[1].n128_u64[1];
    if (v30 >= v3[2].n128_u64[0])
    {
      BOOL v31 = sub_DE265C(v61, (char *)&v73, "Got an invalid WaypointPlace.center.");
    }
    else
    {
      sub_DE27E4(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got an invalid WaypointPlace.center.");
      BOOL v31 = (char *)(v30 + 32);
      v3[1].n128_u64[1] = v30 + 32;
    }
    v3[1].n128_u64[1] = (unint64_t)v31;
  }
  ++v6;
  uint64_t v32 = *(void *)(v25 + 40);
  if (v32) {
    unint64_t v33 = (uint64_t *)(v32 + 8);
  }
  else {
    unint64_t v33 = 0;
  }
  uint64_t v34 = *(int *)(v25 + 32);
  if (!v34) {
    goto LABEL_124;
  }
  int v59 = v6;
  long long v63 = &v33[v34];
  while (2)
  {
    char v64 = v33;
    sub_DDF768(*v33, (uint64_t)v70);
    uint8x8_t v37 = (unsigned __int8 *)v71;
    uint64_t v38 = v72;
    if (v71 == v72)
    {
      if (v71) {
        goto LABEL_118;
      }
      goto LABEL_83;
    }
    do
    {
      if (!sub_723EC(1u)) {
        goto LABEL_88;
      }
      v73.n128_u64[0] = v67;
      *(unint64_t *)((char *)v73.n128_u64 + *(void *)(v67 - 24)) = v66;
      unint64_t v39 = (std::ios_base *)((char *)&v73 + *(void *)(v73.n128_u64[0] - 24));
      std::ios_base::init(v39, &v73.n128_i8[8]);
      v39[1].__vftable = 0;
      v39[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf();
      long long v76 = 0u;
      long long v77 = 0u;
      int v78 = 16;
      if (*v37)
      {
        sub_3E8634((char *)*v37, (uint64_t)&v80);
        unint64_t v40 = std::string::append(&v80, " ");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        int v42 = (char)v37[31];
        if (v42 >= 0) {
          char v43 = (const std::string::value_type *)(v37 + 8);
        }
        else {
          char v43 = (const std::string::value_type *)*((void *)v37 + 1);
        }
        if (v42 >= 0) {
          std::string::size_type v44 = v37[31];
        }
        else {
          std::string::size_type v44 = *((void *)v37 + 2);
        }
        int v45 = std::string::append(&v81, v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        int64_t v69 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __dst = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v81.__r_.__value_.__l.__data_);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
LABEL_103:
          }
            operator delete(v80.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_103;
        }
      }
      else if ((char)v37[31] < 0)
      {
        sub_4200(__dst, *((void **)v37 + 1), *((void *)v37 + 2));
      }
      else
      {
        long long v47 = *(_OWORD *)(v37 + 8);
        int64_t v69 = *((void *)v37 + 3);
        *(_OWORD *)long long __dst = v47;
      }
      if (v69 >= 0) {
        int v48 = __dst;
      }
      else {
        int v48 = (void **)__dst[0];
      }
      if (v69 >= 0) {
        uint64_t v49 = HIBYTE(v69);
      }
      else {
        uint64_t v49 = (uint64_t)__dst[1];
      }
      sub_188FC78(&v73, (uint64_t)v48, v49);
      if (SHIBYTE(v69) < 0) {
        operator delete(__dst[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v81, 1u);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      v73.n128_u64[0] = v65;
      *(unint64_t *)((char *)v73.n128_u64 + *(void *)(v65 - 24)) = v35;
      if (SBYTE7(v77) < 0) {
        operator delete((void *)v76);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_88:
      v37 += 32;
    }
    while (v37 != v38);
    uint8x8_t v37 = (unsigned __int8 *)v71;
    unint64_t v33 = v64;
    if (v71)
    {
LABEL_118:
      uint64_t v50 = v72;
      unint64_t v36 = v37;
      if (v72 != v37)
      {
        do
        {
          if ((char)*(v50 - 1) < 0) {
            operator delete(*((void **)v50 - 3));
          }
          v50 -= 32;
        }
        while (v50 != v37);
        unint64_t v36 = v71;
      }
      int v72 = v37;
      operator delete(v36);
    }
LABEL_83:
    if (++v33 != v63) {
      continue;
    }
    break;
  }
  int v6 = v59;
LABEL_124:
  if ((*(unsigned char *)(v62 + 16) & 4) != 0)
  {
    uint64_t v51 = *(void *)(v62 + 40);
    ++v6;
    if (*(unsigned char *)(v51 + 40))
    {
      sub_DD8BF8(*(void *)(v51 + 48), (uint64_t)&v73);
      if (v73.n128_u32[0])
      {
        LOBYTE(v70[0]) = 8;
        unint64_t v54 = v3[1].n128_u64[1];
        if (v54 >= v3[2].n128_u64[0])
        {
          uint64_t v55 = sub_DE2BD4(v61, (char *)v70, "Got an invalid WaypointTyped.WaypointLocation.");
        }
        else
        {
          sub_DE2D5C(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)v70, "Got an invalid WaypointTyped.WaypointLocation.");
          uint64_t v55 = (char *)(v54 + 32);
          v3[1].n128_u64[1] = v54 + 32;
        }
        v3[1].n128_u64[1] = (unint64_t)v55;
      }
      sub_3E7A10((uint64_t)v3, (uint64_t)&v73);
      char v56 = (void **)__p;
      if (__p)
      {
        int v57 = v75;
        uint64_t v58 = __p;
        if (v75 != __p)
        {
          do
          {
            if (*((char *)v57 - 1) < 0) {
              operator delete(*(v57 - 3));
            }
            v57 -= 4;
          }
          while (v57 != v56);
          uint64_t v58 = __p;
        }
        int v75 = v56;
        operator delete(v58);
      }
    }
    else
    {
      v73.n128_u8[0] = 8;
      unint64_t v52 = v3[1].n128_u64[1];
      if (v52 >= v3[2].n128_u64[0])
      {
        int v53 = sub_DE2918(v61, (char *)&v73, "Got a missing WaypointTyped.WaypointLocation.");
      }
      else
      {
        sub_DE2AA0(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got a missing WaypointTyped.WaypointLocation.");
        int v53 = (char *)(v52 + 32);
        v3[1].n128_u64[1] = v52 + 32;
      }
      v3[1].n128_u64[1] = (unint64_t)v53;
    }
  }
  if (!v6)
  {
    v73.n128_u8[0] = 8;
    unint64_t v5 = v3[1].n128_u64[1];
    if (v5 >= v3[2].n128_u64[0])
    {
      uint64_t result = sub_DA16F4(v61, (char *)&v73, "Got a WaypointTyped without any waypoint message specified.");
      goto LABEL_151;
    }
    sub_DA187C(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got a WaypointTyped without any waypoint message specified.");
    goto LABEL_150;
  }
  if (v6 != 1)
  {
    v73.n128_u8[0] = 8;
    unint64_t v5 = v3[1].n128_u64[1];
    if (v5 >= v3[2].n128_u64[0])
    {
      uint64_t result = sub_DA37C4(v61, (char *)&v73, "Got more than one waypoint message in a WaypointTyped.");
      goto LABEL_151;
    }
    sub_DA394C(v3 + 32, (unsigned char *)v3[1].n128_u64[1], (char *)&v73, "Got more than one waypoint message in a WaypointTyped.");
    goto LABEL_150;
  }
  uint64_t result = (char *)v3[1].n128_u64[1];
LABEL_152:
  v3->n128_u64[0] = v3[1].n128_u64[0] != (void)result;
  v3->n128_u64[1] = (unint64_t)&off_2439090;
  return result;
}