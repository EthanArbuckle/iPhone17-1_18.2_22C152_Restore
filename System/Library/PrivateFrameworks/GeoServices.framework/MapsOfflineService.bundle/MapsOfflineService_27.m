void sub_B99098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = *(void **)(v18 - 72);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = *(void **)(v18 - 72);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 64) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_B99150(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 40))
  {
    int v26 = -1;
    sub_A20F00((uint64_t)v18, a3);
    if (v26) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v19 == -1;
    }
    char v7 = v6;
    if (!v26)
    {
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
    }
    if ((v7 & 1) == 0)
    {
      signed __int32 v8 = *(_DWORD *)(a3 + 12);
      if (v8 == 0x7FFFFFFF) {
        signed __int32 v8 = *(_DWORD *)(a3 + 8);
      }
      v10 = (__n128 *)*a2;
      v9 = (__n128 *)a2[1];
      if ((__n128 *)*a2 == v9)
      {
LABEL_30:
        sub_B97828(a1, a3, (uint64_t)v18);
        v13 = sub_B9C0F8(a2, v10, v18);
        if (*a2 < (unint64_t)v13)
        {
          signed __int32 v14 = v13[-3].n128_i32[3];
          if ((signed __int32)v13->n128_u32[0] < v14) {
            v13->n128_u32[0] = v14;
          }
        }
        if ((unint64_t)&v13[2].n128_u64[1] < a2[1])
        {
          signed __int32 v15 = v13[2].n128_i32[2];
          if ((signed __int32)v13->n128_u32[1] > v15) {
            v13->n128_u32[1] = v15;
          }
        }
        int v16 = v13[1].n128_i32[0];
        if (v16) {
          unint64_t v17 = (unint64_t)((double)(10 * (v13->n128_u32[1] - v13->n128_u32[0])) / (double)v16);
        }
        else {
          unint64_t v17 = 0;
        }
        v13[1].n128_u64[1] = v17;
      }
      else
      {
        v11 = (__n128 *)*a2;
        while (v8 < (signed __int32)v11->n128_u32[0] || v8 > (signed __int32)v11->n128_u32[1])
        {
          v11 = (__n128 *)((char *)v11 + 40);
          if (v11 == v9)
          {
            while (v8 >= (signed __int32)v10->n128_u32[0])
            {
              v10 = (__n128 *)((char *)v10 + 40);
              if (v10 == v9)
              {
                v10 = (__n128 *)a2[1];
                goto LABEL_30;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
  }
}

void sub_B99318(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_B99324(unsigned char *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X8>)
{
  v37 = 0;
  v38 = 0;
  uint64_t v39 = 0;
  v34 = 0;
  v35 = 0;
  uint64_t v36 = 0;
  BOOL v6 = (_DWORD *)*a2;
  uint64_t v7 = *a3;
  if (a1[41])
  {
    sub_BA05BC((uint64_t)&v37, *a2, *a3, 0xEEEEEEEEEEEEEEEFLL * ((v7 - (uint64_t)v6) >> 2));
  }
  else
  {
    v31 = &v37;
    if (v6 != (_DWORD *)v7)
    {
      do
      {
        if (v6[10] == -1)
        {
          __p = v6;
          sub_2A98DC((void ***)&v31, &__p);
        }
        v6 += 15;
      }
      while (v6 != (_DWORD *)v7);
      v23 = (_DWORD *)*a2;
      uint64_t v24 = *a3;
      v31 = &v34;
      while (v23 != (_DWORD *)v24)
      {
        if (v23[10] != -1)
        {
          __p = v23;
          sub_2A98DC((void ***)&v31, &__p);
        }
        v23 += 15;
      }
    }
  }
  signed __int32 v8 = v37;
  v9 = v38;
  if (*a1)
  {
    if (v37 == v38)
    {
      v9 = v37;
    }
    else
    {
      v10 = v37 + 8;
      while (v10 != v38)
      {
        uint64_t v11 = *((void *)v10 - 1);
        uint64_t v12 = *(void *)v10;
        if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
          uint64_t v13 = 4;
        }
        else {
          uint64_t v13 = 8;
        }
        int v14 = *(_DWORD *)(v11 + v13);
        if (*(_DWORD *)(v12 + 8) == 0x7FFFFFFF) {
          uint64_t v15 = 4;
        }
        else {
          uint64_t v15 = 8;
        }
        v10 += 8;
        if (v14 == *(_DWORD *)(v12 + v15))
        {
          int v16 = v10 - 16;
          if (v10 != v38)
          {
            do
            {
              if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
                uint64_t v17 = 4;
              }
              else {
                uint64_t v17 = 8;
              }
              int v18 = *(_DWORD *)(v11 + v17);
              uint64_t v19 = *(void *)v10;
              if (*(_DWORD *)(*(void *)v10 + 8) == 0x7FFFFFFF) {
                uint64_t v20 = 4;
              }
              else {
                uint64_t v20 = 8;
              }
              if (v18 != *(_DWORD *)(v19 + v20))
              {
                *((void *)v16 + 1) = v19;
                v16 += 8;
                uint64_t v11 = v19;
              }
              v10 += 8;
            }
            while (v10 != v9);
            v9 = v38;
          }
          if (v16 + 8 != v9)
          {
            v9 = v16 + 8;
            v38 = v16 + 8;
          }
          break;
        }
      }
    }
  }
  v31 = 0;
  __dst = 0;
  uint64_t v33 = 0;
  v27 = v9;
  v28 = v8;
  sub_B9DF68((uint64_t)a1, (uint64_t *)&v28, (uint64_t *)&v27, (uint64_t)&__p);
  sub_B9E49C((uint64_t)&v31, (char *)__dst, (char *)__p, v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    v30 = (char *)__p;
    operator delete(__p);
  }
  v27 = v35;
  v28 = v34;
  sub_B9B4AC((uint64_t)a1, (const void **)&v28, (const void **)&v27, (uint64_t)&__p);
  sub_B9E49C((uint64_t)&v31, (char *)__dst, (char *)__p, v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    v30 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v25 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__dst - (unsigned char *)v31) >> 3));
  __p = sub_B9E33C;
  if (__dst == v31) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  sub_B9EBC8((unint64_t)v31, (long long *)__dst, (unsigned int (**)(uint64_t, char *))&__p, v26, 1);
  sub_B9B78C((char **)&v31, a4);
  if (v31)
  {
    __dst = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = (char *)v34;
    operator delete(v34);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
}

void sub_B99650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = *(void **)(v18 - 72);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = *(void **)(v18 - 72);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 64) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

double sub_B99708(unsigned char *a1, uint64_t a2)
{
  v2 = *(void **)(a2 + 48);
  for (i = *(void **)(a2 + 56); v2 != i; v2 += 31)
  {
    unint64_t v8 = v2[12];
    uint64_t v7 = v2[13];
    sub_B99324(a1, &v8, &v7, (int **)&v9);
    BOOL v6 = (void *)v2[23];
    if (v6)
    {
      v2[24] = v6;
      operator delete(v6);
    }
    double result = *(double *)&v9;
    *(_OWORD *)(v2 + 23) = v9;
    v2[25] = v10;
  }
  return result;
}

void sub_B9979C(int **a1@<X0>, int **a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>, double a5@<D0>)
{
  if (a3 <= 1) {
    int64_t v9 = 1;
  }
  else {
    int64_t v9 = a3;
  }
  unint64_t v10 = sub_42FA98(*a2 - *a1);
  unint64_t v11 = 2 * v9;
  if (v10 < 2 || v11 > v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    unint64_t v13 = v10;
    sub_BA096C(v111, a1, a2);
    double v14 = log((double)v13);
    unint64_t v15 = v13 + 1;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    if ((v13 + 1) >> 61) {
      sub_2E00();
    }
    double v16 = v14;
    uint64_t v17 = (double *)operator new(8 * v15);
    double v18 = v16 * a5;
    v108 = v17;
    v110 = &v17[v15];
    bzero(v17, 8 * v13 + 8);
    v109 = v110;
    *uint64_t v17 = -v18;
    if (v9 <= v11) {
      uint64_t v19 = 2 * v9;
    }
    else {
      uint64_t v19 = v9;
    }
    if (v9 >= 1)
    {
      uint64_t v20 = (double *)v111[0];
      v21 = (double *)v112;
      uint64_t v22 = v19 - v9;
      unint64_t v23 = v9;
      if ((unint64_t)(v19 - v9) < 0xA) {
        goto LABEL_127;
      }
      v79 = &v17[v9];
      v80 = &v17[v19];
      BOOL v81 = v79 >= (double *)((char *)v111[0] + 8 * v19) || (char *)v111[0] + 8 * v9 >= (char *)v80;
      BOOL v82 = !v81;
      BOOL v83 = v79 >= (double *)((char *)v112 + 8) || v112 >= v80;
      BOOL v84 = !v83;
      BOOL v85 = v79 >= (double *)((char *)v112 + 8 * v19) || (char *)v112 + 8 * v9 >= (char *)v80;
      BOOL v86 = !v85;
      BOOL v87 = v111[0] >= v80 || v79 >= (double *)((char *)v111[0] + 8);
      unint64_t v23 = v9;
      if (!v87) {
        goto LABEL_127;
      }
      unint64_t v23 = v9;
      if (v82) {
        goto LABEL_127;
      }
      unint64_t v23 = v9;
      if (v84) {
        goto LABEL_127;
      }
      unint64_t v23 = v9;
      if (v86) {
        goto LABEL_127;
      }
      unint64_t v23 = v9 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
      int64x2_t v88 = vaddq_s64(vdupq_n_s64(v9), (int64x2_t)xmmword_20E1750);
      uint64_t v89 = 8 * v9 + 16;
      v90 = (const double *)v111[0];
      float64x2_t v92 = vld1q_dup_f64(v90);
      v91 = (float64x2_t *)((char *)v90 + v89);
      v93 = (const double *)v112;
      float64x2_t v95 = vld1q_dup_f64(v93);
      v94 = (float64x2_t *)((char *)v93 + v89);
      v96 = (float64x2_t *)((char *)v17 + v89);
      int64x2_t v97 = vdupq_n_s64(2uLL);
      int64x2_t v98 = vdupq_n_s64(4uLL);
      unint64_t v99 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v100 = vsubq_f64(v91[-1], v92);
        float64x2_t v101 = vsubq_f64(*v91, v92);
        float64x2_t v102 = vsubq_f64(vsubq_f64(*v94, v95), vdivq_f64(vmulq_f64(v101, v101), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v88, v97))));
        v96[-1] = vsubq_f64(vsubq_f64(v94[-1], v95), vdivq_f64(vmulq_f64(v100, v100), vcvtq_f64_u64((uint64x2_t)v88)));
        float64x2_t *v96 = v102;
        int64x2_t v88 = vaddq_s64(v88, v98);
        v96 += 2;
        v91 += 2;
        v94 += 2;
        v99 -= 4;
      }
      while (v99);
      if (v22 != (v22 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_127:
        do
        {
          double v24 = v20[v23] - *v20;
          v17[v23] = v21[v23] - *v21 - v24 * v24 / (double)v23;
          ++v23;
        }
        while (v19 != v23);
      }
    }
    if (v13 == -1)
    {
      unint64_t v25 = 0;
    }
    else
    {
      unint64_t v25 = operator new(8 * v15);
      bzero(v25, 8 * v13 + 8);
    }
    uint64_t v26 = (double *)operator new(0x20uLL);
    v106 = v26 + 4;
    v107 = v26 + 4;
    *uint64_t v26 = 0.0;
    v26[1] = 0.0;
    *((void *)v26 + 2) = v9;
    v26[3] = 0.0;
    __p = v26;
    if (v11 <= v15) {
      uint64_t v27 = v13 + 1;
    }
    else {
      uint64_t v27 = 2 * v9;
    }
    if (v11 < v15)
    {
      while (1)
      {
        v29 = __p;
        v28 = v106;
        if (__p != v106) {
          break;
        }
        *((void *)v108 + v11) = *((void *)__p + 1);
        *((void *)v25 + v11) = *v29;
LABEL_55:
        uint64_t v103 = 0;
        uint64_t v104 = v11 - v9 + 1;
        sub_3E794((uint64_t)&__p, &v104, &v103);
        if (++v11 == v27) {
          goto LABEL_74;
        }
      }
      v30 = (double *)v108;
      v31 = (double *)__p;
      v32 = (double *)v111[0];
      uint64_t v33 = (double *)v112;
      do
      {
        uint64_t v34 = *(void *)v31;
        double v35 = v32[v11] - v32[v34];
        v31[1] = v18 + v30[v34] + v33[v11] - v33[v34] - v35 * v35 / (double)(v11 - *(void *)v31);
        v31 += 2;
      }
      while (v31 != v28);
      uint64_t v36 = (double *)(v29 + 2);
      if (v29 + 2 == (void *)v28)
      {
        v38 = (double *)v29;
      }
      else
      {
        v37 = (double *)(v29 + 2);
        v38 = (double *)v29;
        do
        {
          if (v37[1] < v38[1]) {
            v38 = v37;
          }
          v37 += 2;
        }
        while (v37 != v28);
      }
      double v39 = v38[1];
      v30[v11] = v39;
      *((double *)v25 + v11) = *v38;
      double v40 = v18 + v39;
      while (*(v36 - 1) <= v40)
      {
        BOOL v41 = v36 == v28;
        v36 += 2;
        if (v41) {
          goto LABEL_55;
        }
      }
      v42 = v36 - 2;
      if (v36 - 2 == v28) {
        goto LABEL_55;
      }
      while (v36 != v28)
      {
        double v43 = v36[1];
        if (v43 <= v18 + v30[v11])
        {
          double *v42 = *v36;
          v42[1] = v43;
          v42 += 2;
        }
        v36 += 2;
      }
      if (v42 == v28) {
        goto LABEL_55;
      }
      int64_t v44 = (char *)v42 - (char *)v29;
      v45 = (char *)v29 + (((char *)v42 - (char *)v29) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v46 = (char *)v28 - (char *)v42;
      v47 = (double *)&v45[v46];
      if (&v45[v46] == (char *)v28)
      {
        v50 = v45;
      }
      else
      {
        unint64_t v48 = v44 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v49 = (char *)v28 - ((char *)v29 + v46 + (v44 & 0xFFFFFFFFFFFFFFF0)) - 16;
        if (v49 >= 0x150)
        {
          v51 = v29 + 1;
          unint64_t v52 = v48 + (v49 & 0xFFFFFFFFFFFFFFF0);
          v53 = (double *)((char *)v29 + v52 + 8);
          unint64_t v54 = v46 + v48;
          unint64_t v55 = v46 + v48 + (v49 & 0xFFFFFFFFFFFFFFF0);
          v56 = (char *)v29 + v55 + 8;
          v57 = (char *)v29 + v48 + 8;
          v58 = (char *)(v29 + 2);
          v59 = &v58[v52];
          v60 = (char *)v51 + v54;
          BOOL v61 = v57 >= &v58[v55] || v60 >= v59;
          char v62 = !v61;
          if (v47 >= v53 || v45 >= v56)
          {
            if (v62)
            {
              v50 = v45;
            }
            else
            {
              uint64_t v64 = v46 >> 4;
              uint64_t v65 = (v49 >> 4) + 1;
              uint64_t v66 = 16 * (v65 & 0x1FFFFFFFFFFFFFFCLL);
              v50 = &v45[v66];
              v47 = (double *)((char *)v47 + v66);
              uint64_t v67 = 16 * v64;
              uint64_t v68 = v65 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                long long v69 = *(_OWORD *)&v45[v67 + 16];
                long long v71 = *(_OWORD *)&v45[v67 + 32];
                long long v70 = *(_OWORD *)&v45[v67 + 48];
                *(_OWORD *)v45 = *(_OWORD *)&v45[v67];
                *((_OWORD *)v45 + 1) = v69;
                *((_OWORD *)v45 + 2) = v71;
                *((_OWORD *)v45 + 3) = v70;
                v45 += 64;
                v68 -= 4;
              }
              while (v68);
              if (v65 == (v65 & 0x1FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            v50 = v45;
          }
        }
        else
        {
          v50 = v45;
        }
        do
        {
          *(double *)v50 = *v47;
          *((double *)v50 + 1) = v47[1];
          v50 += 16;
          v47 += 2;
        }
        while (v47 != v28);
      }
LABEL_54:
      v106 = (double *)v50;
      goto LABEL_55;
    }
LABEL_74:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v72 = *((void *)v25 + v13);
    if (v72)
    {
      do
      {
        uint64_t v104 = v72 - 1;
        sub_A4710((uint64_t)a4, &v104);
        uint64_t v72 = *((void *)v25 + v72);
      }
      while (v72);
      unint64_t v73 = *a4;
      unint64_t v74 = a4[1];
      v75 = (void *)(v74 - 8);
      if (*a4 != v74 && (unint64_t)v75 > v73)
      {
        unint64_t v77 = v73 + 8;
        do
        {
          uint64_t v78 = *(void *)(v77 - 8);
          *(void *)(v77 - 8) = *v75;
          *v75-- = v78;
          BOOL v61 = v77 >= (unint64_t)v75;
          v77 += 8;
        }
        while (!v61);
      }
    }
    if (__p)
    {
      v106 = (double *)__p;
      operator delete(__p);
    }
    if (v25) {
      operator delete(v25);
    }
    if (v108) {
      operator delete(v108);
    }
    if (v112)
    {
      v113 = v112;
      operator delete(v112);
    }
    if (v111[0])
    {
      v111[1] = v111[0];
      operator delete(v111[0]);
    }
  }
}

void sub_B99DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (!__p)
  {
    sub_3310C((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_3310C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_B99E50(int **a1@<X0>, int **a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>, double a5@<D0>)
{
  if (a3 <= 2) {
    int64_t v9 = 2;
  }
  else {
    int64_t v9 = a3;
  }
  unint64_t v10 = sub_42FA98(*a2 - *a1);
  unint64_t v11 = 2 * v9;
  if (v10 < 2 || v11 > v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v112 = a4;
    unint64_t v13 = v10;
    sub_BA096C(v134, a1, a2);
    double v14 = log((double)v13);
    unint64_t v113 = v13;
    unint64_t v15 = v13 + 1;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    if ((v13 + 1) >> 61) {
      sub_2E00();
    }
    double v16 = v14;
    size_t v17 = 8 * v15;
    double v18 = (double *)operator new(8 * v15);
    double v19 = v16 * a5;
    v131 = v18;
    v133 = &v18[v15];
    uint64_t v111 = 8 * v13 + 8;
    bzero(v18, v111);
    v132 = v133;
    *double v18 = -v19;
    if (v9 <= v11) {
      uint64_t v20 = 2 * v9;
    }
    else {
      uint64_t v20 = v9;
    }
    int64_t v125 = v9;
    if (v9 >= 1)
    {
      v21 = (double *)v134[0];
      uint64_t v22 = v135;
      uint64_t v23 = v20 - v9;
      unint64_t v24 = v9;
      if ((unint64_t)(v20 - v9) < 6) {
        goto LABEL_133;
      }
      uint64_t v80 = v9;
      BOOL v81 = &v18[v9];
      BOOL v82 = &v18[v20];
      BOOL v83 = v81 >= (double *)((char *)v134[0] + 8 * v20) || (char *)v134[0] + 8 * v9 >= (char *)v82;
      BOOL v84 = !v83;
      BOOL v85 = v81 >= v135 + 1 || v135 >= v82;
      BOOL v86 = !v85;
      BOOL v87 = v81 >= &v135[v20] || &v135[v9] >= v82;
      BOOL v88 = !v87;
      BOOL v89 = v134[0] >= v82 || v81 >= (double *)((char *)v134[0] + 8);
      unint64_t v24 = v9;
      if (!v89) {
        goto LABEL_133;
      }
      unint64_t v24 = v9;
      if (v84) {
        goto LABEL_133;
      }
      unint64_t v24 = v9;
      if (v86) {
        goto LABEL_133;
      }
      unint64_t v24 = v9;
      if (v88) {
        goto LABEL_133;
      }
      uint64_t v109 = 8 * v15;
      unint64_t v110 = v13 + 1;
      uint64_t v108 = v20 - v9;
      unint64_t v90 = v23 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v24 = v9 + (v23 & 0xFFFFFFFFFFFFFFFELL);
      uint64x2_t v91 = (uint64x2_t)vaddq_s64(vdupq_n_s64(v9), (int64x2_t)xmmword_20E1750);
      float64x2_t v92 = (const double *)v134[0];
      float64x2_t v94 = vld1q_dup_f64(v92);
      v93 = (float64x2_t *)&v92[v80];
      float64x2_t v120 = v94;
      float64x2_t v95 = v135;
      float64x2_t v97 = vld1q_dup_f64(v95);
      v96 = (float64x2_t *)&v95[v80];
      float64x2_t v118 = (float64x2_t)vdupq_n_s64(0x3DA5FD7FE1796495uLL);
      float64x2_t v119 = v97;
      int8x16_t v116 = (int8x16_t)vdupq_n_s64(0x3DD145660A52B5B1uLL);
      float64x2_t v117 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
      int64x2_t v98 = (float64x2_t *)&v18[v80];
      __asm { FMOV            V1.2D, #1.0 }
      int64x2_t v114 = vdupq_n_s64(2uLL);
      float64x2_t v115 = _Q1;
      unint64_t v107 = v23 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        int64x2_t v124 = (int64x2_t)v91;
        float64x2_t v102 = *v93++;
        float64x2_t v103 = vsubq_f64(v102, v120);
        float64x2_t v104 = *v96++;
        float64x2_t v123 = vcvtq_f64_u64(v91);
        float64x2_t v105 = vdivq_f64(vsubq_f64(vsubq_f64(v104, v119), vdivq_f64(vmulq_f64(v103, v103), v123)), v123);
        int8x16_t __x = vbslq_s8((int8x16_t)vcgtq_f64(v118, v105), v116, (int8x16_t)vmulq_f64(v105, v117));
        long double v122 = log(*(long double *)&__x.i64[1]);
        v106.f64[0] = log(*(long double *)__x.i64);
        v106.f64[1] = v122;
        *v98++ = vmulq_f64(vaddq_f64(v106, v115), v123);
        uint64x2_t v91 = (uint64x2_t)vaddq_s64(v124, v114);
        v90 -= 2;
      }
      while (v90);
      int64_t v9 = v125;
      size_t v17 = v109;
      unint64_t v15 = v110;
      if (v108 != v107)
      {
LABEL_133:
        do
        {
          double v25 = v21[v24] - *v21;
          double v26 = (v22[v24] - *v22 - v25 * v25 / (double)v24) / (double)v24;
          if (v26 >= 1.0e-11) {
            double v27 = v26 * 6.28318531;
          }
          else {
            double v27 = 6.28318531e-11;
          }
          v18[v24] = (log(v27) + 1.0) * (double)v24;
          ++v24;
        }
        while (v20 != v24);
      }
    }
    if (v15)
    {
      v28 = operator new(v17);
      bzero(v28, v111);
    }
    else
    {
      v28 = 0;
    }
    v29 = (long double *)operator new(0x20uLL);
    v129 = v29 + 4;
    v130 = v29 + 4;
    long double *v29 = 0.0;
    v29[1] = 0.0;
    *((void *)v29 + 2) = v9;
    v29[3] = 0.0;
    v128 = v29;
    if (v11 <= v15) {
      unint64_t v30 = v15;
    }
    else {
      unint64_t v30 = v11;
    }
    if (v11 < v15)
    {
      while (1)
      {
        v32 = v128;
        v31 = v129;
        if (v128 != v129) {
          break;
        }
        v131[v11] = v128[1];
        *((long double *)v28 + v11) = *v32;
LABEL_61:
        uint64_t v126 = 0;
        uint64_t v127 = v11 - v9 + 1;
        sub_3E794((uint64_t)&v128, &v127, &v126);
        if (++v11 == v30) {
          goto LABEL_80;
        }
      }
      uint64_t v33 = v131;
      uint64_t v34 = v128;
      double v35 = (double *)v134[0];
      uint64_t v36 = v135;
      do
      {
        uint64_t v37 = *(void *)v34;
        double v39 = v35[v11] - v35[v37];
        double v40 = (double)(v11 - *(void *)v34);
        double v41 = (v36[v11] - v36[v37] - v39 * v39 / v40) / v40;
        if (v41 >= 1.0e-11) {
          double v42 = v41 * 6.28318531;
        }
        else {
          double v42 = 6.28318531e-11;
        }
        double v38 = v33[v37];
        v34[1] = v19 + v38 + (log(v42) + 1.0) * v40;
        v34 += 2;
      }
      while (v34 != v31);
      double v43 = v32 + 2;
      if (v32 + 2 == v31)
      {
        v45 = v32;
        int64_t v9 = v125;
      }
      else
      {
        int64_t v44 = v32 + 2;
        v45 = v32;
        int64_t v9 = v125;
        do
        {
          if (v44[1] < v45[1]) {
            v45 = v44;
          }
          v44 += 2;
        }
        while (v44 != v31);
      }
      double v46 = v45[1];
      v33[v11] = v46;
      *((double *)v28 + v11) = *v45;
      double v47 = v19 + v46;
      while (*(v43 - 1) <= v47)
      {
        _ZF = v43 == v31;
        v43 += 2;
        if (_ZF) {
          goto LABEL_61;
        }
      }
      unint64_t v49 = v43 - 2;
      if (v43 - 2 == v31) {
        goto LABEL_61;
      }
      while (v43 != v31)
      {
        double v50 = v43[1];
        if (v50 <= v19 + v33[v11])
        {
          *unint64_t v49 = *v43;
          v49[1] = v50;
          v49 += 2;
        }
        v43 += 2;
      }
      if (v49 == v31) {
        goto LABEL_61;
      }
      int64_t v51 = (char *)v49 - (char *)v32;
      unint64_t v52 = (long double *)((char *)v32 + (((char *)v49 - (char *)v32) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v53 = (char *)v31 - (char *)v49;
      unint64_t v54 = (long double *)((char *)v52 + v53);
      if ((long double *)((char *)v52 + v53) == v31)
      {
        v57 = v52;
      }
      else
      {
        unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v56 = (char *)v31 - ((char *)v32 + v53 + (v51 & 0xFFFFFFFFFFFFFFF0)) - 16;
        if (v56 >= 0x150)
        {
          unint64_t v58 = v55 + (v56 & 0xFFFFFFFFFFFFFFF0);
          v59 = (long double *)((char *)v32 + v58 + 8);
          unint64_t v60 = v53 + v55 + (v56 & 0xFFFFFFFFFFFFFFF0);
          unint64_t v61 = (unint64_t)v32 + v58 + 16;
          _CF = (char *)v32 + v55 + 8 >= (char *)v32 + v60 + 16 || (unint64_t)v32 + v53 + v55 + 8 >= v61;
          char v63 = !_CF;
          if (v54 >= v59 || v52 >= (long double *)((char *)v32 + v60 + 8))
          {
            if (v63)
            {
              v57 = v52;
            }
            else
            {
              uint64_t v65 = v53 >> 4;
              uint64_t v66 = (v56 >> 4) + 1;
              uint64_t v67 = 2 * (v66 & 0x1FFFFFFFFFFFFFFCLL);
              v57 = &v52[v67];
              unint64_t v54 = (long double *)((char *)v54 + v67 * 8);
              uint64_t v68 = 2 * v65;
              uint64_t v69 = v66 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                long long v70 = *(_OWORD *)&v52[v68 + 2];
                long long v72 = *(_OWORD *)&v52[v68 + 4];
                long long v71 = *(_OWORD *)&v52[v68 + 6];
                *(_OWORD *)unint64_t v52 = *(_OWORD *)&v52[v68];
                *((_OWORD *)v52 + 1) = v70;
                *((_OWORD *)v52 + 2) = v72;
                *((_OWORD *)v52 + 3) = v71;
                v52 += 8;
                v69 -= 4;
              }
              while (v69);
              if (v66 == (v66 & 0x1FFFFFFFFFFFFFFCLL)) {
                goto LABEL_60;
              }
            }
          }
          else
          {
            v57 = v52;
          }
        }
        else
        {
          v57 = v52;
        }
        do
        {
          long double *v57 = *v54;
          v57[1] = v54[1];
          v57 += 2;
          v54 += 2;
        }
        while (v54 != v31);
      }
LABEL_60:
      v129 = v57;
      goto LABEL_61;
    }
LABEL_80:
    unint64_t *v112 = 0;
    v112[1] = 0;
    v112[2] = 0;
    uint64_t v73 = *((void *)v28 + v113);
    if (v73)
    {
      do
      {
        uint64_t v127 = v73 - 1;
        sub_A4710((uint64_t)v112, &v127);
        uint64_t v73 = *((void *)v28 + v73);
      }
      while (v73);
      unint64_t v74 = *v112;
      unint64_t v75 = v112[1];
      v76 = (void *)(v75 - 8);
      if (*v112 != v75 && (unint64_t)v76 > v74)
      {
        unint64_t v78 = v74 + 8;
        do
        {
          uint64_t v79 = *(void *)(v78 - 8);
          *(void *)(v78 - 8) = *v76;
          *v76-- = v79;
          _CF = v78 >= (unint64_t)v76;
          v78 += 8;
        }
        while (!_CF);
      }
    }
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    if (v28) {
      operator delete(v28);
    }
    if (v131) {
      operator delete(v131);
    }
    if (v135)
    {
      v136 = v135;
      operator delete(v135);
    }
    if (v134[0])
    {
      v134[1] = v134[0];
      operator delete(v134[0]);
    }
  }
}

void sub_B9A588(_Unwind_Exception *a1)
{
  v3 = *(void **)(v1 - 224);
  if (!v3)
  {
    sub_3310C(v1 - 200);
    _Unwind_Resume(a1);
  }
  operator delete(v3);
  sub_3310C(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_B9A63C(int **a1@<X0>, int **a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>, double a5@<D0>)
{
  if (a3 <= 1) {
    int64_t v9 = 1;
  }
  else {
    int64_t v9 = a3;
  }
  unint64_t v10 = sub_42FA98(*a2 - *a1);
  unint64_t v11 = 2 * v9;
  if (v10 < 2 || v11 > v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    unint64_t v13 = v10;
    sub_BA0B28(a1, a2, v107);
    double v14 = log((double)v13);
    unint64_t v92 = v13;
    unint64_t v15 = v13 + 1;
    float64x2_t v104 = 0;
    float64x2_t v105 = 0;
    float64x2_t v106 = 0;
    if ((v13 + 1) >> 61) {
      sub_2E00();
    }
    double v16 = v14;
    size_t v17 = 8 * v15;
    double v18 = (double *)operator new(8 * v15);
    double v19 = v16 * a5;
    float64x2_t v104 = v18;
    float64x2_t v106 = &v18[v15];
    bzero(v18, 8 * v92 + 8);
    float64x2_t v105 = v106;
    *double v18 = -v19;
    if (v9 <= v11) {
      uint64_t v20 = 2 * v9;
    }
    else {
      uint64_t v20 = v9;
    }
    if (v9 >= 1)
    {
      v21 = (double *)v107[0];
      uint64_t v22 = v20 - v9;
      unint64_t v23 = v9;
      if ((unint64_t)(v20 - v9) < 4) {
        goto LABEL_111;
      }
      uint64_t v74 = v9;
      unint64_t v75 = &v18[v9];
      v76 = &v18[v20];
      BOOL v77 = v75 >= (double *)((char *)v107[0] + 8 * v20) || (char *)v107[0] + 8 * v9 >= (char *)v76;
      BOOL v78 = !v77;
      BOOL v79 = v107[0] >= v76 || v75 >= (double *)((char *)v107[0] + 8);
      unint64_t v23 = v9;
      if (!v79) {
        goto LABEL_111;
      }
      unint64_t v23 = v9;
      if (v78) {
        goto LABEL_111;
      }
      uint64_t v90 = 8 * v15;
      unint64_t v91 = v15;
      unint64_t v80 = v22 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v23 = v9 + (v22 & 0xFFFFFFFFFFFFFFFELL);
      BOOL v81 = (const double *)v107[0];
      float64x2_t v83 = vld1q_dup_f64(v81);
      BOOL v82 = (float64x2_t *)&v81[v74];
      uint64x2_t v84 = (uint64x2_t)vaddq_s64(vdupq_n_s64(v9), (int64x2_t)xmmword_20E1750);
      BOOL v85 = (float64x2_t *)&v18[v74];
      int64x2_t v93 = vdupq_n_s64(2uLL);
      float64x2_t v94 = v83;
      unint64_t v89 = v22 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        int64x2_t v98 = (int64x2_t)v84;
        float64x2_t v86 = vcvtq_f64_u64(v84);
        float64x2_t v87 = *v82++;
        float64x2_t v97 = vaddq_f64(v86, v86);
        float64x2_t __x = vdivq_f64(vsubq_f64(v87, v94), v86);
        long double v96 = log(__x.f64[1]);
        v88.f64[0] = log(__x.f64[0]);
        v88.f64[1] = v96;
        *v85++ = vmulq_f64(v97, v88);
        uint64x2_t v84 = (uint64x2_t)vaddq_s64(v98, v93);
        v80 -= 2;
      }
      while (v80);
      size_t v17 = v90;
      unint64_t v15 = v91;
      if (v20 - v9 != v89)
      {
LABEL_111:
        do
        {
          v18[v23] = ((double)v23 + (double)v23) * log((v21[v23] - *v21) / (double)v23);
          ++v23;
        }
        while (v20 != v23);
      }
    }
    if (v15)
    {
      unint64_t v24 = (char *)operator new(v17);
      bzero(v24, 8 * v92 + 8);
    }
    else
    {
      unint64_t v24 = 0;
    }
    double v25 = (long double *)operator new(0x20uLL);
    float64x2_t v102 = v25 + 4;
    float64x2_t v103 = v25 + 4;
    long double *v25 = 0.0;
    v25[1] = 0.0;
    *((void *)v25 + 2) = v9;
    v25[3] = 0.0;
    __p = v25;
    if (v11 <= v15) {
      uint64_t v26 = v15;
    }
    else {
      uint64_t v26 = 2 * v9;
    }
    if (v11 < v15)
    {
      while (1)
      {
        v28 = __p;
        double v27 = v102;
        if (__p != v102) {
          break;
        }
        uint64_t v38 = v11;
        v104[v38] = *((double *)__p + 1);
        *(void *)&v24[v38 * 8] = *v28;
LABEL_55:
        uint64_t v99 = 0;
        uint64_t v100 = v11 - v9 + 1;
        sub_3E794((uint64_t)&__p, &v100, &v99);
        if (++v11 == v26) {
          goto LABEL_74;
        }
      }
      v29 = v104;
      unint64_t v30 = (double *)v107[0];
      v31 = (long double *)__p;
      do
      {
        uint64_t v32 = *(void *)v31;
        double v33 = v29[v32];
        unint64_t v34 = v11 - *(void *)v31;
        v31[1] = v19 + v33 + ((double)v34 + (double)v34) * log((v30[v11] - v30[v32]) / (double)v34);
        v31 += 2;
      }
      while (v31 != v27);
      double v35 = (long double *)(v28 + 2);
      if (v28 + 2 == (void *)v27)
      {
        uint64_t v37 = (double *)v28;
      }
      else
      {
        uint64_t v36 = (long double *)(v28 + 2);
        uint64_t v37 = (double *)v28;
        do
        {
          if (v36[1] < v37[1]) {
            uint64_t v37 = v36;
          }
          v36 += 2;
        }
        while (v36 != v27);
      }
      double v39 = v37[1];
      uint64_t v40 = v11;
      v29[v40] = v39;
      *(double *)&v24[v40 * 8] = *v37;
      double v41 = v19 + v39;
      while (*(v35 - 1) <= v41)
      {
        BOOL v42 = v35 == v27;
        v35 += 2;
        if (v42) {
          goto LABEL_55;
        }
      }
      double v43 = v35 - 2;
      if (v35 - 2 == v27) {
        goto LABEL_55;
      }
      while (v35 != v27)
      {
        double v44 = v35[1];
        if (v44 <= v19 + v29[v11])
        {
          *double v43 = *v35;
          v43[1] = v44;
          v43 += 2;
        }
        v35 += 2;
      }
      if (v43 == v27) {
        goto LABEL_55;
      }
      int64_t v45 = (char *)v43 - (char *)v28;
      double v46 = (long double *)((char *)v28 + (((char *)v43 - (char *)v28) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v47 = (char *)v27 - (char *)v43;
      unint64_t v48 = (long double *)((char *)v46 + v47);
      if ((long double *)((char *)v46 + v47) == v27)
      {
        int64_t v51 = v46;
      }
      else
      {
        unint64_t v49 = v45 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v50 = (char *)v27 - ((char *)v28 + v47 + (v45 & 0xFFFFFFFFFFFFFFF0)) - 16;
        if (v50 >= 0x150)
        {
          unint64_t v52 = v49 + (v50 & 0xFFFFFFFFFFFFFFF0);
          uint64_t v53 = (long double *)((char *)v28 + v52 + 8);
          unint64_t v54 = v47 + v49 + (v50 & 0xFFFFFFFFFFFFFFF0);
          unint64_t v55 = (unint64_t)v28 + v52 + 16;
          BOOL v56 = (char *)v28 + v49 + 8 >= (char *)v28 + v54 + 16 || (unint64_t)v28 + v47 + v49 + 8 >= v55;
          char v57 = !v56;
          if (v48 >= v53 || v46 >= (long double *)((char *)v28 + v54 + 8))
          {
            if (v57)
            {
              int64_t v51 = v46;
            }
            else
            {
              uint64_t v59 = v47 >> 4;
              uint64_t v60 = (v50 >> 4) + 1;
              uint64_t v61 = 2 * (v60 & 0x1FFFFFFFFFFFFFFCLL);
              int64_t v51 = &v46[v61];
              unint64_t v48 = (long double *)((char *)v48 + v61 * 8);
              uint64_t v62 = 2 * v59;
              uint64_t v63 = v60 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                long long v64 = *(_OWORD *)&v46[v62 + 2];
                long long v66 = *(_OWORD *)&v46[v62 + 4];
                long long v65 = *(_OWORD *)&v46[v62 + 6];
                *(_OWORD *)double v46 = *(_OWORD *)&v46[v62];
                *((_OWORD *)v46 + 1) = v64;
                *((_OWORD *)v46 + 2) = v66;
                *((_OWORD *)v46 + 3) = v65;
                v46 += 8;
                v63 -= 4;
              }
              while (v63);
              if (v60 == (v60 & 0x1FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            int64_t v51 = v46;
          }
        }
        else
        {
          int64_t v51 = v46;
        }
        do
        {
          long double *v51 = *v48;
          v51[1] = v48[1];
          v51 += 2;
          v48 += 2;
        }
        while (v48 != v27);
      }
LABEL_54:
      float64x2_t v102 = v51;
      goto LABEL_55;
    }
LABEL_74:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v67 = *(void *)&v24[8 * v92];
    if (v67)
    {
      do
      {
        uint64_t v100 = v67 - 1;
        sub_A4710((uint64_t)a4, &v100);
        uint64_t v67 = *(void *)&v24[8 * v67];
      }
      while (v67);
      unint64_t v68 = *a4;
      unint64_t v69 = a4[1];
      long long v70 = (void *)(v69 - 8);
      if (*a4 != v69 && (unint64_t)v70 > v68)
      {
        unint64_t v72 = v68 + 8;
        do
        {
          uint64_t v73 = *(void *)(v72 - 8);
          *(void *)(v72 - 8) = *v70;
          *v70-- = v73;
          BOOL v56 = v72 >= (unint64_t)v70;
          v72 += 8;
        }
        while (!v56);
      }
    }
    if (__p)
    {
      float64x2_t v102 = (long double *)__p;
      operator delete(__p);
    }
    if (v24) {
      operator delete(v24);
    }
    if (v104) {
      operator delete(v104);
    }
    if (v107[0])
    {
      v107[1] = v107[0];
      operator delete(v107[0]);
    }
  }
}

void sub_B9AC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v32 = *(void **)(v30 - 168);
  if (v32)
  {
    operator delete(v32);
    double v33 = *(void **)(v30 - 144);
    if (!v33) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v33 = *(void **)(v30 - 144);
    if (!v33) {
      goto LABEL_3;
    }
  }
  *(void *)(v30 - 136) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_B9ACBC(unint64_t *a1@<X0>, int **a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>, double a5@<D0>)
{
  if (a3 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = a3;
  }
  unint64_t v10 = sub_42FA98((uint64_t)((uint64_t)*a2 - *a1) >> 2);
  unint64_t v11 = 2 * v9;
  if (v10 < 2 || v11 > v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    unint64_t v13 = v10;
    uint64_t v108 = a4;
    unint64_t v14 = sub_42FA98((uint64_t)((uint64_t)*a2 - *a1) >> 2);
    unint64_t v123 = v14;
    unint64_t v15 = vcvtpd_u64_f64(log((double)v14) * 4.0);
    if (v14 < v15) {
      unint64_t v15 = v14;
    }
    unint64_t v124 = v15;
    double v125 = -log((double)v14 + (double)v14 + -1.0);
    sub_BA0BF4((uint64_t *)&v123, a1, a2, (uint64_t *)&v126);
    double v16 = log((double)v13);
    unint64_t v17 = v13 + 1;
    float64x2_t v120 = 0;
    v121 = 0;
    long double v122 = 0;
    if ((v13 + 1) >> 61) {
      sub_2E00();
    }
    double v18 = v16;
    double v19 = (double *)operator new(8 * v17);
    float64x2_t v120 = v19;
    long double v122 = &v19[v17];
    unint64_t v107 = v13;
    uint64_t v111 = 8 * v13 + 8;
    bzero(v19, v111);
    v121 = v122;
    double v114 = v18 * a5;
    *double v19 = -(v18 * a5);
    if (v9 <= v11) {
      uint64_t v20 = 2 * v9;
    }
    else {
      uint64_t v20 = v9;
    }
    unint64_t v109 = v9;
    if (v9 >= 1)
    {
      unint64_t v21 = v124;
      double v22 = (v125 + v125) / (double)v124;
      if (v124)
      {
        unint64_t v23 = v126;
        unint64_t v24 = v109;
        do
        {
          double v25 = (double)v24;
          double v26 = 0.0;
          double v27 = v23;
          unint64_t v28 = v21;
          do
          {
            unint64_t v29 = *(void *)(*v27 + 8 * v24) - *(void *)*v27;
            if (v29) {
              BOOL v30 = v29 == 2 * v24;
            }
            else {
              BOOL v30 = 1;
            }
            if (!v30)
            {
              long double v31 = (double)v29 * 0.5 / v25;
              double v32 = log(1.0 - v31);
              double v26 = v26 + (v31 * log(v31) + (1.0 - v31) * v32) * v25;
            }
            v27 += 3;
            --v28;
          }
          while (v28);
          v19[v24++] = v26 * v22;
        }
        while (v24 != v20);
      }
      else
      {
        double v33 = v22 * 0.0;
        uint64_t v34 = v9;
        uint64_t v35 = v20 - v9;
        if ((unint64_t)(v20 - v9) < 4) {
          goto LABEL_32;
        }
        uint64_t v34 = v9 + (v35 & 0xFFFFFFFFFFFFFFFCLL);
        int64x2_t v36 = vdupq_lane_s64(*(uint64_t *)&v33, 0);
        uint64_t v37 = (int64x2_t *)&v19[v9 + 2];
        unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v37[-1] = v36;
          int64x2_t *v37 = v36;
          v37 += 2;
          v38 -= 4;
        }
        while (v38);
        if (v35 != (v35 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_32:
          uint64_t v39 = v20 - v34;
          uint64_t v40 = &v19[v34];
          do
          {
            *v40++ = v33;
            --v39;
          }
          while (v39);
        }
      }
    }
    if (v17)
    {
      double v41 = (char *)operator new(8 * v17);
      bzero(v41, v111);
    }
    else
    {
      double v41 = 0;
    }
    unint64_t v42 = v109;
    double v43 = (char *)operator new(0x20uLL);
    float64x2_t v118 = v43 + 32;
    float64x2_t v119 = v43 + 32;
    *(void *)double v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = v109;
    *((void *)v43 + 3) = 0;
    __p = v43;
    if (v11 <= v17) {
      unint64_t v44 = v17;
    }
    else {
      unint64_t v44 = v11;
    }
    unint64_t v110 = v44;
    if (v11 < v17)
    {
      while (1)
      {
        double v46 = (double *)__p;
        int64_t v45 = v118;
        if (__p != v118) {
          break;
        }
        uint64_t v63 = 8 * v11;
        *(void *)((char *)v120 + v63) = *((void *)__p + 1);
        *(double *)&v41[v63] = *v46;
LABEL_80:
        uint64_t v115 = 0;
        uint64_t v116 = v11 - v42 + 1;
        sub_3E794((uint64_t)&__p, &v116, &v115);
        if (++v11 == v110) {
          goto LABEL_99;
        }
      }
      v112 = (double *)__p;
      size_t __sz = (size_t)v41;
      uint64_t v47 = (double *)v120;
      unint64_t v48 = v124;
      double v49 = (v125 + v125) / (double)v124;
      if (v124)
      {
        unint64_t v50 = v126;
        do
        {
          uint64_t v51 = *(void *)v46;
          double v52 = v47[*(void *)v46];
          unint64_t v53 = v11 - *(void *)v46;
          uint64_t v54 = 2 * v53;
          double v55 = (double)v53;
          double v56 = 0.0;
          char v57 = v50;
          unint64_t v58 = v48;
          do
          {
            unint64_t v59 = *(void *)(*v57 + 8 * v11) - *(void *)(*v57 + 8 * v51);
            if (v59) {
              BOOL v60 = v59 == v54;
            }
            else {
              BOOL v60 = 1;
            }
            if (!v60)
            {
              long double v61 = (double)v59 * 0.5 / v55;
              double v62 = log(1.0 - v61);
              double v56 = v56 + (v61 * log(v61) + (1.0 - v61) * v62) * v55;
            }
            v57 += 3;
            --v58;
          }
          while (v58);
          v46[1] = v114 + v52 + v49 * v56;
          v46 += 2;
        }
        while (v46 != (double *)v45);
      }
      else
      {
        do
        {
          v46[1] = v114 + v49 * 0.0 + v47[*(void *)v46];
          v46 += 2;
        }
        while (v46 != (double *)v45);
      }
      long long v64 = v112 + 2;
      if (v112 + 2 == (double *)v45)
      {
        long long v66 = v112;
        unint64_t v42 = v109;
        double v41 = (char *)__sz;
      }
      else
      {
        long long v65 = v112 + 2;
        long long v66 = v112;
        unint64_t v42 = v109;
        double v41 = (char *)__sz;
        do
        {
          if (v65[1] < v66[1]) {
            long long v66 = v65;
          }
          v65 += 2;
        }
        while (v65 != (double *)v45);
      }
      double v67 = v66[1];
      uint64_t v68 = v11;
      v47[v68] = v67;
      *(double *)&v41[v68 * 8] = *v66;
      double v69 = v114 + v67;
      while (*(v64 - 1) <= v69)
      {
        BOOL v30 = v64 == (double *)v45;
        v64 += 2;
        if (v30) {
          goto LABEL_80;
        }
      }
      long long v70 = (char *)(v64 - 2);
      if (v64 - 2 == (double *)v45) {
        goto LABEL_80;
      }
      while (v64 != (double *)v45)
      {
        double v71 = v64[1];
        if (v71 <= v114 + v47[v11])
        {
          *(double *)long long v70 = *v64;
          *((double *)v70 + 1) = v71;
          v70 += 16;
        }
        v64 += 2;
      }
      if (v70 == v45) {
        goto LABEL_80;
      }
      uint64_t v72 = v70 - (char *)v112;
      uint64_t v73 = (char *)v112 + ((v70 - (char *)v112) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v74 = v45 - v70;
      unint64_t v75 = &v73[v74];
      if (&v73[v74] == v45)
      {
        BOOL v78 = v73;
      }
      else
      {
        unint64_t v76 = v72 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v77 = v45 - ((char *)v112 + v74 + (v72 & 0xFFFFFFFFFFFFFFF0)) - 16;
        if (v77 >= 0x150)
        {
          unint64_t v79 = v76 + (v77 & 0xFFFFFFFFFFFFFFF0);
          unint64_t v80 = (char *)v112 + v79 + 8;
          unint64_t v81 = v74 + v76 + (v77 & 0xFFFFFFFFFFFFFFF0);
          unint64_t v82 = (unint64_t)v112 + v79 + 16;
          BOOL v83 = (char *)v112 + v76 + 8 >= (char *)v112 + v81 + 16 || (unint64_t)v112 + v74 + v76 + 8 >= v82;
          char v84 = !v83;
          if (v75 >= v80 || v73 >= (char *)v112 + v81 + 8)
          {
            if (v84)
            {
              BOOL v78 = v73;
            }
            else
            {
              uint64_t v86 = v74 >> 4;
              uint64_t v87 = (v77 >> 4) + 1;
              uint64_t v88 = 16 * (v87 & 0x1FFFFFFFFFFFFFFCLL);
              BOOL v78 = &v73[v88];
              v75 += v88;
              uint64_t v89 = 16 * v86;
              uint64_t v90 = v87 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                long long v91 = *(_OWORD *)&v73[v89 + 16];
                long long v93 = *(_OWORD *)&v73[v89 + 32];
                long long v92 = *(_OWORD *)&v73[v89 + 48];
                *(_OWORD *)uint64_t v73 = *(_OWORD *)&v73[v89];
                *((_OWORD *)v73 + 1) = v91;
                *((_OWORD *)v73 + 2) = v93;
                *((_OWORD *)v73 + 3) = v92;
                v73 += 64;
                v90 -= 4;
              }
              while (v90);
              if (v87 == (v87 & 0x1FFFFFFFFFFFFFFCLL)) {
                goto LABEL_79;
              }
            }
          }
          else
          {
            BOOL v78 = v73;
          }
        }
        else
        {
          BOOL v78 = v73;
        }
        do
        {
          *(void *)BOOL v78 = *(void *)v75;
          *((void *)v78 + 1) = *((void *)v75 + 1);
          v78 += 16;
          v75 += 16;
        }
        while (v75 != v45);
      }
LABEL_79:
      float64x2_t v118 = v78;
      goto LABEL_80;
    }
LABEL_99:
    unint64_t *v108 = 0;
    v108[1] = 0;
    v108[2] = 0;
    uint64_t v94 = *(void *)&v41[8 * v107];
    if (v94)
    {
      do
      {
        uint64_t v116 = v94 - 1;
        sub_A4710((uint64_t)v108, &v116);
        uint64_t v94 = *(void *)&v41[8 * v94];
      }
      while (v94);
      unint64_t v95 = *v108;
      unint64_t v96 = v108[1];
      float64x2_t v97 = (void *)(v96 - 8);
      if (*v108 != v96 && (unint64_t)v97 > v95)
      {
        unint64_t v99 = v95 + 8;
        do
        {
          uint64_t v100 = *(void *)(v99 - 8);
          *(void *)(v99 - 8) = *v97;
          *v97-- = v100;
          BOOL v83 = v99 >= (unint64_t)v97;
          v99 += 8;
        }
        while (!v83);
      }
    }
    if (__p)
    {
      float64x2_t v118 = (char *)__p;
      operator delete(__p);
    }
    if (v41) {
      operator delete(v41);
    }
    if (v120) {
      operator delete(v120);
    }
    float64x2_t v101 = (char *)v126;
    if (v126)
    {
      float64x2_t v102 = v127;
      float64x2_t v103 = v126;
      if (v127 != v126)
      {
        float64x2_t v104 = v127;
        do
        {
          float64x2_t v106 = (void *)*((void *)v104 - 3);
          v104 -= 24;
          float64x2_t v105 = v106;
          if (v106)
          {
            *((void *)v102 - 2) = v105;
            operator delete(v105);
          }
          float64x2_t v102 = v104;
        }
        while (v104 != v101);
        float64x2_t v103 = v126;
      }
      uint64_t v127 = v101;
      operator delete(v103);
    }
  }
}

void sub_B9B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  if (!__p)
  {
    sub_513E34((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_513E34((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_B9B4AC(uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v6 = *a2;
  unint64_t v28 = 0;
  int64_t v7 = (unsigned char *)*a3 - (unsigned char *)*a2;
  if (*a3 == *a2)
  {
    uint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new((unsigned char *)*a3 - v6);
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    memmove(v8, v6, v7);
    unint64_t v28 = v9;
  }
  unint64_t v10 = 126 - 2 * __clz((v9 - v8) >> 3);
  v29[0].n128_u64[0] = (unint64_t)sub_B9B730;
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_BA2240((uint64_t)v8, v9, v29, v11, 1);
  if (v9 != v8)
  {
    uint64_t v12 = v8 + 8;
    while (v12 != v9)
    {
      uint64_t v13 = *((void *)v12 - 1);
      int v14 = *(_DWORD *)(*(void *)v12 + 36);
      int v15 = *(_DWORD *)(*(void *)v12 + 40);
      uint64_t v16 = *(void *)(*(void *)v12 + 28);
      v12 += 8;
      if (*(void *)(v13 + 28) == v16 && *(_DWORD *)(v13 + 36) == v14 && *(_DWORD *)(v13 + 40) == v15)
      {
        double v19 = v12 - 16;
        if (v12 == v9)
        {
          uint64_t v20 = v12 - 8;
          if (v12 - 8 == v9) {
            break;
          }
        }
        else
        {
          do
          {
            uint64_t v25 = *(void *)v12;
            if (*(void *)(v13 + 28) != *(void *)(*(void *)v12 + 28)
              || *(_DWORD *)(v13 + 36) != *(_DWORD *)(*(void *)v12 + 36)
              || *(_DWORD *)(v13 + 40) != *(_DWORD *)(*(void *)v12 + 40))
            {
              *((void *)v19 + 1) = v25;
              v19 += 8;
              uint64_t v13 = v25;
            }
            v12 += 8;
          }
          while (v12 != v9);
          uint64_t v9 = v28;
          uint64_t v20 = v19 + 8;
          if (v19 + 8 == v28) {
            break;
          }
        }
        uint64_t v9 = v20;
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        uint64_t v21 = v20 - v8;
        if (v20 != v8) {
          goto LABEL_22;
        }
        goto LABEL_25;
      }
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v21 = v9 - v8;
  if (v9 != v8)
  {
LABEL_22:
    if ((unint64_t)v21 >= 0x3333333333333331) {
      sub_2E00();
    }
    uint64_t v22 = v21 >> 3;
    unint64_t v23 = (__n128 *)operator new(40 * (v21 >> 3));
    *(void *)a4 = v23;
    *(void *)(a4 + 8) = v23;
    *(void *)(a4 + 16) = (char *)v23 + 40 * v22;
    unint64_t v24 = (uint64_t *)v8;
    do
    {
      sub_B9759C(a1, *v24, (uint64_t)v29);
      unint64_t v23 = (__n128 *)((char *)sub_BA3478((char **)a4, v23, v29) + 40);
      ++v24;
    }
    while (v24 != (uint64_t *)v9);
  }
LABEL_25:
  if (v8) {
    operator delete(v8);
  }
}

void sub_B9B6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B9B730(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 28);
  unsigned int v3 = a2[8];
  if (HIDWORD(v2) < v3) {
    return 1;
  }
  unsigned int v4 = a2[7];
  if (v2 < v4 && HIDWORD(v2) <= v3) {
    return 1;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 36);
  unsigned int v7 = a2[9];
  BOOL v9 = v7 >= v6 && *(_DWORD *)(a1 + 40) < a2[10];
  unsigned int v10 = v6 < v7 || v9;
  if (v3 >= HIDWORD(v2) && v4 >= v2) {
    return v10;
  }
  else {
    return 0;
  }
}

void sub_B9B78C(char **a1@<X1>, int **a2@<X8>)
{
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  if (*a1 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unsigned int v6 = v3 + 40;
    do
    {
      if (v6 == v4)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        size_t v13 = v4 - v3;
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 3);
        if (v14 > 0x666666666666666) {
          sub_2E00();
        }
        int v15 = (char *)operator new(v13);
        *a2 = (int *)v15;
        uint64_t v16 = &v15[40 * v14];
        a2[2] = (int *)v16;
        memcpy(v15, v3, v13 - 7);
        a2[1] = (int *)v16;
        return;
      }
      int v8 = *(_DWORD *)v6;
      int v7 = *((_DWORD *)v6 + 1);
      int v9 = *((_DWORD *)v6 - 10);
      int v10 = *((_DWORD *)v6 - 9);
      v6 += 40;
    }
    while (v9 >= v7 || v8 >= v10);
    double v69 = 0;
    long long v70 = 0;
    uint64_t v71 = 0;
    v66[0] = &v69;
    uint64_t v12 = v3;
    do
    {
      if (*(_DWORD *)v3 < *((_DWORD *)v3 + 1))
      {
        *(void *)&v74[0] = v12;
        *((void *)&v74[0] + 1) = 1;
        sub_B9C3DC((char ***)v66, v74);
      }
      v12 += 40;
      v3 += 40;
    }
    while (v3 != v4);
    unint64_t v17 = *a1;
    double v18 = a1[1];
    v66[0] = &v69;
    if (v17 != v18)
    {
      double v19 = v17;
      do
      {
        if (*(_DWORD *)v19 < *((_DWORD *)v19 + 1))
        {
          v74[0] = (unint64_t)v17;
          sub_B9C3DC((char ***)v66, v74);
        }
        v17 += 40;
        v19 += 40;
      }
      while (v19 != v18);
    }
    unint64_t v20 = 126 - 2 * __clz(((char *)v70 - (unsigned char *)v69) >> 4);
    if (v70 == v69) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v20;
    }
    sub_BA3744((int **)v69, v70, (uint64_t)v74, v21, 1);
    *(_OWORD *)long long v66 = 0u;
    *(_OWORD *)double v67 = 0u;
    int v68 = 1065353216;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t v22 = (int **)v69;
    long long v65 = v70;
    if (v69 != v70)
    {
      int v23 = 0x7FFFFFFF;
      while (1)
      {
        if (!v67[1]) {
          goto LABEL_88;
        }
        int v24 = *((_DWORD *)v22 + 2);
        if (v24)
        {
          if (v24 != 1)
          {
            if (v23 == 0x7FFFFFFF) {
              goto LABEL_88;
            }
LABEL_36:
            if (v24)
            {
              if (v24 == 1)
              {
                int v25 = **v22;
                double v26 = v67[0];
                if (v67[0])
                {
LABEL_39:
                  double v27 = 0.0;
                  do
                  {
                    double v27 = v27 + 1.0 / ((double)*(int *)(v26[2] + 16) / 10.0);
                    double v26 = (void *)*v26;
                  }
                  while (v26);
                  double v28 = 1.0 / v27 * 10.0;
                  if (v28 < 0.0)
                  {
LABEL_42:
                    if (v28 > -4.50359963e15)
                    {
                      uint64_t v29 = (uint64_t)(v28 + v28);
                      if (v29 >= 1) {
                        --v29;
                      }
LABEL_50:
                      double v28 = (double)(v29 >> 1);
                    }
                    goto LABEL_51;
                  }
LABEL_48:
                  if (v28 < 4.50359963e15)
                  {
                    uint64_t v29 = (uint64_t)(v28 + v28) + 1;
                    goto LABEL_50;
                  }
LABEL_51:
                  int v30 = (int)v28;
                  if ((int)v28)
                  {
                    unint64_t v31 = (unint64_t)((double)(10 * (v25 - v23)) / (double)v30);
                    double v33 = a2[1];
                    unint64_t v32 = (unint64_t)a2[2];
                    if ((unint64_t)v33 < v32) {
                      goto LABEL_53;
                    }
LABEL_72:
                    unint64_t v38 = *a2;
                    unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v33 - (char *)*a2) >> 3);
                    unint64_t v40 = v39 + 1;
                    if (v39 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (void)v38) >> 3);
                    if (2 * v41 > v40) {
                      unint64_t v40 = 2 * v41;
                    }
                    if (v41 >= 0x333333333333333) {
                      unint64_t v42 = 0x666666666666666;
                    }
                    else {
                      unint64_t v42 = v40;
                    }
                    if (v42)
                    {
                      if (v42 > 0x666666666666666) {
                        sub_188D718();
                      }
                      double v43 = (char *)operator new(40 * v42);
                    }
                    else
                    {
                      double v43 = 0;
                    }
                    unint64_t v44 = &v43[40 * v39];
                    *(_DWORD *)unint64_t v44 = v23;
                    *((_DWORD *)v44 + 1) = v25;
                    *((_DWORD *)v44 + 2) = v30;
                    *((_DWORD *)v44 + 3) = v30;
                    *((_DWORD *)v44 + 4) = v30;
                    *((void *)v44 + 3) = v31;
                    v44[32] = 0;
                    int64_t v45 = (int *)v44;
                    if (v33 != v38)
                    {
                      do
                      {
                        long long v46 = *(_OWORD *)(v33 - 10);
                        long long v47 = *(_OWORD *)(v33 - 6);
                        *((unsigned char *)v45 - 8) = *((unsigned char *)v33 - 8);
                        *(_OWORD *)(v45 - 6) = v47;
                        *(_OWORD *)(v45 - 10) = v46;
                        v45 -= 10;
                        v33 -= 10;
                      }
                      while (v33 != v38);
                      double v33 = v38;
                    }
                    unint64_t v48 = &v43[40 * v42];
                    uint64_t v34 = (int *)(v44 + 40);
                    *a2 = v45;
                    a2[1] = (int *)(v44 + 40);
                    a2[2] = (int *)v48;
                    if (v33) {
                      operator delete(v33);
                    }
                  }
                  else
                  {
                    if (sub_723EC(1u))
                    {
                      sub_6BAC((uint64_t)v74);
                      uint64_t v35 = sub_188FC78(v74, (uint64_t)"Merging unscheduled frequencies resulted in a mean headway of 0. Input headways: ", 81);
                      sub_BA5DC4((void *)v67[0], 0, ", ");
                      if ((v73 & 0x80u) == 0) {
                        int64x2_t v36 = __p;
                      }
                      else {
                        int64x2_t v36 = (void **)__p[0];
                      }
                      if ((v73 & 0x80u) == 0) {
                        uint64_t v37 = v73;
                      }
                      else {
                        uint64_t v37 = (uint64_t)__p[1];
                      }
                      sub_188FC78(v35, (uint64_t)v36, v37);
                      if ((char)v73 < 0) {
                        operator delete(__p[0]);
                      }
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)__p, 1u);
                      if ((char)v73 < 0) {
                        operator delete(__p[0]);
                      }
                      *(void *)&v74[0] = v63;
                      *(void *)((char *)v74 + *(void *)(v63 - 24)) = v64;
                      if (v76 < 0) {
                        operator delete(v75);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                      unint64_t v31 = 0;
                      double v33 = a2[1];
                      unint64_t v32 = (unint64_t)a2[2];
                      if ((unint64_t)v33 >= v32) {
                        goto LABEL_72;
                      }
                    }
                    else
                    {
                      unint64_t v31 = 0;
                      double v33 = a2[1];
                      unint64_t v32 = (unint64_t)a2[2];
                      if ((unint64_t)v33 >= v32) {
                        goto LABEL_72;
                      }
                    }
LABEL_53:
                    *double v33 = v23;
                    v33[1] = v25;
                    v33[2] = v30;
                    v33[3] = v30;
                    v33[4] = v30;
                    *((void *)v33 + 3) = v31;
                    uint64_t v34 = v33 + 10;
                    *((unsigned char *)v33 + 32) = 0;
                  }
                  a2[1] = v34;
                  goto LABEL_88;
                }
              }
              else
              {
                int v25 = 0x7FFFFFFF;
                double v26 = v67[0];
                if (v67[0]) {
                  goto LABEL_39;
                }
              }
            }
            else
            {
              int v25 = (*v22)[1];
              double v26 = v67[0];
              if (v67[0]) {
                goto LABEL_39;
              }
            }
            double v28 = 1.0 / 0.0 * 10.0;
            if (v28 < 0.0) {
              goto LABEL_42;
            }
            goto LABEL_48;
          }
          if (v23 < **v22) {
            goto LABEL_36;
          }
        }
        else if (v23 < (*v22)[1])
        {
          goto LABEL_36;
        }
LABEL_88:
        int v49 = *((_DWORD *)v22 + 2);
        if (!v49)
        {
          unint64_t v50 = (void **)sub_BA62CC(v66, (uint64_t *)v22);
          if (v50)
          {
            unint64_t v51 = (unint64_t)v66[1];
            unint64_t v52 = (unint64_t)v50[1];
            uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v66[1]);
            v53.i16[0] = vaddlv_u8(v53);
            if (v53.u32[0] > 1uLL)
            {
              if ((void *)v52 >= v66[1]) {
                v52 %= (unint64_t)v66[1];
              }
            }
            else
            {
              v52 &= (unint64_t)v66[1] - 1;
            }
            uint64_t v54 = (void **)*((void *)v66[0] + v52);
            do
            {
              double v55 = v54;
              uint64_t v54 = (void **)*v54;
            }
            while (v54 != v50);
            if (v55 == v67) {
              goto LABEL_109;
            }
            unint64_t v56 = (unint64_t)v55[1];
            if (v53.u32[0] > 1uLL)
            {
              if ((void *)v56 >= v66[1]) {
                v56 %= (unint64_t)v66[1];
              }
            }
            else
            {
              v56 &= (unint64_t)v66[1] - 1;
            }
            if (v56 != v52)
            {
LABEL_109:
              if (!*v50) {
                goto LABEL_110;
              }
              unint64_t v57 = *((void *)*v50 + 1);
              if (v53.u32[0] > 1uLL)
              {
                if ((void *)v57 >= v66[1]) {
                  v57 %= (unint64_t)v66[1];
                }
              }
              else
              {
                v57 &= (unint64_t)v66[1] - 1;
              }
              if (v57 != v52) {
LABEL_110:
              }
                *((void *)v66[0] + v52) = 0;
            }
            unint64_t v58 = (unint64_t *)*v50;
            if (*v50)
            {
              unint64_t v59 = v58[1];
              if (v53.u32[0] > 1uLL)
              {
                if (v59 >= v51) {
                  v59 %= v51;
                }
              }
              else
              {
                v59 &= v51 - 1;
              }
              if (v59 != v52)
              {
                *((void *)v66[0] + v59) = v55;
                unint64_t v58 = (unint64_t *)*v50;
              }
            }
            *double v55 = v58;
            void *v50 = 0;
            --v67[1];
            operator delete(v50);
          }
          goto LABEL_119;
        }
        if (v49 == 1)
        {
          sub_BA5F70((uint64_t)v66, (uint64_t *)v22, v22);
LABEL_119:
          int v49 = *((_DWORD *)v22 + 2);
        }
        if (v49)
        {
          if (v49 == 1) {
            int v23 = **v22;
          }
          else {
            int v23 = 0x7FFFFFFF;
          }
        }
        else
        {
          int v23 = (*v22)[1];
        }
        v22 += 2;
        if (v22 == v65)
        {
          BOOL v60 = v67[0];
          if (v67[0])
          {
            do
            {
              long double v61 = (void *)*v60;
              operator delete(v60);
              BOOL v60 = v61;
            }
            while (v61);
          }
          break;
        }
      }
    }
    double v62 = v66[0];
    v66[0] = 0;
    if (v62) {
      operator delete(v62);
    }
    if (v69)
    {
      long long v70 = (int **)v69;
      operator delete(v69);
    }
  }
}

void sub_B9BF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_B9C0F8(unint64_t *a1, __n128 *__src, __n128 *a3)
{
  unsigned int v4 = __src;
  unsigned int v6 = (__n128 *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v14 = (__n128 *)*a1;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v6 - *a1) >> 3) + 1;
    if (v15 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v14) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x333333333333333) {
      unint64_t v17 = 0x666666666666666;
    }
    else {
      unint64_t v17 = v15;
    }
    int64x2_t v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x666666666666666) {
        sub_188D718();
      }
      double v18 = (char *)operator new(40 * v17);
    }
    else
    {
      double v18 = 0;
    }
    v34.n128_u64[0] = (unint64_t)v18;
    v34.n128_u64[1] = (unint64_t)&v18[8 * (((char *)v4 - (char *)v14) >> 3)];
    __dst[0] = (void *)v34.n128_u64[1];
    __dst[1] = &v18[40 * v17];
    sub_99C440((uint64_t)&v34, a3);
    unint64_t v21 = v34.n128_u64[1];
    uint64_t v22 = (__n128 *)*a1;
    unint64_t v23 = v34.n128_u64[1];
    if ((__n128 *)*a1 != v4)
    {
      int v24 = v4;
      unint64_t v25 = v34.n128_u64[1];
      do
      {
        long long v26 = *(long long *)((char *)&v24[-3] + 8);
        long long v27 = *(long long *)((char *)&v24[-2] + 8);
        unint64_t v23 = v25 - 40;
        *(unsigned char *)(v25 - 8) = v24[-1].n128_u8[8];
        *(_OWORD *)(v25 - 24) = v27;
        *(_OWORD *)(v25 - 40) = v26;
        int v24 = (__n128 *)((char *)v24 - 40);
        v25 -= 40;
      }
      while (v24 != v22);
    }
    v34.n128_u64[1] = v23;
    double v28 = (__n128 *)a1[1];
    uint64_t v29 = (char *)__dst[0];
    int64_t v30 = (char *)v28 - (char *)v4;
    if (v28 != v4)
    {
      memmove(__dst[0], v4, v30 - 7);
      unint64_t v23 = v34.n128_u64[1];
      unsigned int v4 = (__n128 *)a1[1];
    }
    unint64_t v31 = (__n128 *)*a1;
    *a1 = v23;
    a1[1] = (unint64_t)&v29[v30];
    unint64_t v32 = (void *)a1[2];
    a1[2] = (unint64_t)__dst[1];
    __dst[0] = v4;
    __dst[1] = v32;
    v34.n128_u64[0] = (unint64_t)v31;
    v34.n128_u64[1] = (unint64_t)v31;
    if (v4 != v31) {
      __dst[0] = (char *)v31 + ((char *)v4 - (char *)v31 - 40) % 0x28uLL;
    }
    if (v31) {
      operator delete(v31);
    }
    return (__n128 *)v21;
  }
  else if (__src == v6)
  {
    __n128 v19 = *a3;
    __n128 v20 = a3[1];
    __src[2].n128_u64[0] = a3[2].n128_u64[0];
    *__src = v19;
    __src[1] = v20;
    a1[1] = (unint64_t)&__src[2].n128_u64[1];
  }
  else
  {
    __n128 v8 = a3[1];
    __n128 v34 = *a3;
    *(__n128 *)__dst = v8;
    int64x2_t v36 = (void *)a3[2].n128_u64[0];
    int v9 = (__n128 *)((char *)__src + 40);
    int v10 = (__n128 *)((char *)v6 - 40);
    uint64_t v11 = v6;
    if ((unint64_t)v6 >= 0x28)
    {
      do
      {
        __n128 v12 = *v10;
        __n128 v13 = v10[1];
        v11[2].n128_u64[0] = v10[2].n128_u64[0];
        __n128 *v11 = v12;
        v11[1] = v13;
        int v10 = (__n128 *)((char *)v10 + 40);
        uint64_t v11 = (__n128 *)((char *)v11 + 40);
      }
      while (v10 < v6);
    }
    a1[1] = (unint64_t)v11;
    if (v6 != v9) {
      memmove(v9, __src, (char *)v6 - (char *)v9 - 7);
    }
    *unsigned int v4 = v34;
    v4[1] = *(__n128 *)__dst;
    v4[2].n128_u8[0] = v36;
  }
  return v4;
}

void sub_B9C380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    __n128 v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __n128 v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

char ***sub_B9C3DC(char ***a1, _OWORD *a2)
{
  unsigned int v4 = *a1;
  unsigned int v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    __n128 v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        sub_188D718();
      }
      __n128 v13 = (char *)operator new(16 * v12);
    }
    else
    {
      __n128 v13 = 0;
    }
    unint64_t v14 = &v13[16 * v9];
    *(_OWORD *)unint64_t v14 = *a2;
    unint64_t v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 2);
        v6 -= 16;
        int v16 = *((_DWORD *)v6 + 2);
        *((void *)v14 - 2) = v15;
        v14 -= 16;
        *((_DWORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      unsigned int v6 = *v4;
    }
    *unsigned int v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)unsigned int v6 = *a2;
    unint64_t v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

void sub_B9C4EC(uint64_t *a1@<X1>, int **a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if ((int *)*a1 != *a2)
  {
    for (i = (int *)(v4 + 16); i != v5; i += 4)
    {
      int v7 = i[1];
      if (v7 == 0x7FFFFFFF) {
        int v7 = *i;
      }
      int v8 = *(i - 3);
      if (v8 == 0x7FFFFFFF) {
        int v8 = *(i - 4);
      }
      if (v7 < v8)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v14, "Journey leg alternatives are not sorted according to their expected departure times");
        unint64_t v10 = (void *)sub_2F404((uint64_t)exception, &v14);
      }
    }
    for (j = (int *)(v4 + 16); j != v5; j += 4)
    {
      int v12 = j[1];
      if (v12 == 0x7FFFFFFF) {
        int v12 = *j;
      }
      int v13 = *(j - 3);
      if (v13 == 0x7FFFFFFF) {
        int v13 = *(j - 4);
      }
      LODWORD(v14) = v12 - v13;
      sub_745A4((uint64_t)a3, &v14);
    }
  }
}

void sub_B9C5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B9C63C(uint64_t a1@<X0>, char **a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = *a2;
  uint64_t v9 = *a3;
  if (*a2 == *a3)
  {
    double v33 = 0;
    __n128 v34 = 0;
    uint64_t v35 = 0;
    __p = 0;
    int64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    unint64_t v10 = *a2;
    do
    {
      if (v10[12])
      {
        int v14 = 0x7FFFFFFF;
        int v15 = 0x7FFFFFFF;
        goto LABEL_22;
      }
      v10 += 16;
    }
    while (v10 != v9);
    double v33 = 0;
    __n128 v34 = 0;
    uint64_t v35 = 0;
    __p = &v33;
    do
    {
      int v11 = *((_DWORD *)v8 + 1);
      if (v11 == 0x7FFFFFFF) {
        int v11 = *(_DWORD *)v8;
      }
      LODWORD(p_p) = v11;
      sub_737BC((uint64_t *)&__p, &p_p);
      v8 += 16;
    }
    while (v8 != v9);
    int v12 = v33;
    int v13 = v34;
    __p = 0;
    int64_t v30 = 0;
    uint64_t v31 = 0;
    p_p = &__p;
    if (v33 != v34)
    {
      do
        sub_737BC((uint64_t *)&p_p, v12++);
      while (v12 != v13);
    }
  }
  unint64_t v32 = sub_BC28((uint64_t)&__p, *(_DWORD *)(a1 + 8), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned char *)a1);
  if (__p)
  {
    int64_t v30 = __p;
    operator delete(__p);
  }
  if (sub_BB7C(&v32))
  {
    int v14 = *(_DWORD *)nullsub_1(&v32);
    int v15 = *(_DWORD *)sub_BBB4((uint64_t)&v32);
LABEL_18:
    if (v33)
    {
      __n128 v34 = v33;
      operator delete(v33);
    }
    int v8 = *a2;
    uint64_t v9 = *a3;
LABEL_22:
    int v17 = *((_DWORD *)v8 + 1);
    if (v17 == 0x7FFFFFFF) {
      int v17 = *(_DWORD *)v8;
    }
    int v18 = *((_DWORD *)v9 - 4);
    if (*((_DWORD *)v9 - 3) != 0x7FFFFFFF) {
      int v18 = *((_DWORD *)v9 - 3);
    }
    uint64_t v19 = (v9 - v8) >> 4;
    int v20 = 0x7FFFFFFF;
    if ((unint64_t)(v9 - v8) < 0x11) {
      goto LABEL_36;
    }
    double v21 = (double)(10 * (v18 - v17)) / (double)(unint64_t)(v19 - 1);
    if (v21 >= 0.0)
    {
      if (v21 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v21 + v21) + 1;
LABEL_34:
        double v21 = (double)(v22 >> 1);
      }
    }
    else if (v21 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v21 + v21);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_34;
    }
    int v20 = (int)v21;
LABEL_36:
    BOOL v23 = v14 != 0x7FFFFFFF;
    BOOL v24 = v15 != 0x7FFFFFFF;
    BOOL v25 = !v23 || !v24;
    if (v23 && v24) {
      int v26 = v14;
    }
    else {
      int v26 = v20;
    }
    if (v25) {
      int v27 = v20;
    }
    else {
      int v27 = v15;
    }
    *(_DWORD *)a4 = v17;
    *(_DWORD *)(a4 + 4) = v18;
    *(_DWORD *)(a4 + 8) = v26;
    *(_DWORD *)(a4 + 12) = v27;
    *(_DWORD *)(a4 + 16) = v20;
    *(void *)(a4 + 24) = v19;
    *(unsigned char *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 33) = *(_DWORD *)v36;
    *(_DWORD *)(a4 + 36) = *(_DWORD *)&v36[3];
    return;
  }
  int v16 = *(unsigned __int8 *)(a1 + 33);
  int v14 = 0x7FFFFFFF;
  int v15 = 0x7FFFFFFF;
  if (v16) {
    goto LABEL_18;
  }
  *(void *)&long long v28 = 0x8000000080000000;
  *((void *)&v28 + 1) = 0x8000000080000000;
  *(_OWORD *)a4 = v28;
  *(_DWORD *)(a4 + 16) = 0x7FFFFFFF;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 0;
  if (v33)
  {
    __n128 v34 = v33;
    operator delete(v33);
  }
}

void sub_B9C8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    int v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_B9C918(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4) {
      break;
    }
    if (v11 <= 191)
    {
      v184 = v10 + 1;
      BOOL v186 = v10 == a2 || v184 == a2;
      if (a4)
      {
        if (!v186)
        {
          uint64_t v187 = 0;
          v188 = v10;
          do
          {
            uint64_t v191 = *v188;
            uint64_t v190 = v188[1];
            v188 = v184;
            if (*(_DWORD *)(v190 + 8) == 0x7FFFFFFF) {
              uint64_t v192 = 4;
            }
            else {
              uint64_t v192 = 8;
            }
            int v193 = *(_DWORD *)(v190 + v192);
            if (*(_DWORD *)(v191 + 8) == 0x7FFFFFFF) {
              uint64_t v194 = 4;
            }
            else {
              uint64_t v194 = 8;
            }
            if (v193 < *(_DWORD *)(v191 + v194))
            {
              uint64_t v195 = v187;
              do
              {
                double result = (uint64_t)v10 + v195;
                *(uint64_t *)((char *)v10 + v195 + 8) = v191;
                if (!v195)
                {
                  v189 = v10;
                  goto LABEL_307;
                }
                uint64_t v191 = *(void *)(result - 8);
                if (*(_DWORD *)(v190 + 8) == 0x7FFFFFFF) {
                  v196 = (unsigned int *)(v190 + 4);
                }
                else {
                  v196 = (unsigned int *)(v190 + 8);
                }
                double result = *v196;
                if (*(_DWORD *)(v191 + 8) == 0x7FFFFFFF) {
                  uint64_t v197 = 4;
                }
                else {
                  uint64_t v197 = 8;
                }
                v195 -= 8;
              }
              while ((int)result < *(_DWORD *)(v191 + v197));
              v189 = (uint64_t *)((char *)v10 + v195 + 8);
LABEL_307:
              uint64_t *v189 = v190;
            }
            v184 = v188 + 1;
            v187 += 8;
          }
          while (v188 + 1 != a2);
        }
      }
      else if (!v186)
      {
        do
        {
          uint64_t v249 = *v9;
          uint64_t v248 = v9[1];
          uint64_t v9 = v184;
          if (*(_DWORD *)(v248 + 8) == 0x7FFFFFFF) {
            uint64_t v250 = 4;
          }
          else {
            uint64_t v250 = 8;
          }
          int v251 = *(_DWORD *)(v248 + v250);
          if (*(_DWORD *)(v249 + 8) == 0x7FFFFFFF) {
            uint64_t v252 = 4;
          }
          else {
            uint64_t v252 = 8;
          }
          if (v251 < *(_DWORD *)(v249 + v252))
          {
            v253 = v9;
            do
            {
              uint64_t *v253 = v249;
              uint64_t v249 = *(v253 - 2);
              if (*(_DWORD *)(v248 + 8) == 0x7FFFFFFF) {
                v254 = (int *)(v248 + 4);
              }
              else {
                v254 = (int *)(v248 + 8);
              }
              int v255 = *v254;
              if (*(_DWORD *)(v249 + 8) == 0x7FFFFFFF) {
                uint64_t v256 = 4;
              }
              else {
                uint64_t v256 = 8;
              }
              --v253;
            }
            while (v255 < *(_DWORD *)(v249 + v256));
            uint64_t *v253 = v248;
          }
          v184 = v9 + 1;
        }
        while (v9 + 1 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v198 = (unint64_t)(v12 - 2) >> 1;
        int64_t v199 = v198;
        do
        {
          int64_t v200 = v199;
          if (v198 >= v199)
          {
            uint64_t v201 = (2 * v199) | 1;
            v202 = &v10[v201];
            if (2 * v200 + 2 < v12)
            {
              uint64_t v207 = v202[1];
              if (*(_DWORD *)(*v202 + 8) == 0x7FFFFFFF) {
                uint64_t v203 = 4;
              }
              else {
                uint64_t v203 = 8;
              }
              int v204 = *(_DWORD *)(*v202 + v203);
              if (*(_DWORD *)(v207 + 8) == 0x7FFFFFFF) {
                uint64_t v205 = 4;
              }
              else {
                uint64_t v205 = 8;
              }
              int v206 = *(_DWORD *)(v207 + v205);
              if (v204 < v206) {
                ++v202;
              }
              else {
                uint64_t v207 = *v202;
              }
              if (v204 < v206) {
                uint64_t v201 = 2 * v200 + 2;
              }
            }
            else
            {
              uint64_t v207 = *v202;
            }
            v208 = &v10[v200];
            uint64_t v209 = *v208;
            if (*(_DWORD *)(v207 + 8) == 0x7FFFFFFF) {
              uint64_t v210 = 4;
            }
            else {
              uint64_t v210 = 8;
            }
            int v211 = *(_DWORD *)(v207 + v210);
            if (*(_DWORD *)(v209 + 8) == 0x7FFFFFFF) {
              uint64_t v212 = 4;
            }
            else {
              uint64_t v212 = 8;
            }
            if (v211 >= *(_DWORD *)(v209 + v212))
            {
              uint64_t v213 = *v202;
              do
              {
                uint64_t *v208 = v213;
                v208 = v202;
                if (v198 < v201) {
                  break;
                }
                uint64_t v221 = (2 * v201) | 1;
                v202 = &v10[v221];
                uint64_t v201 = 2 * v201 + 2;
                if (v201 < v12)
                {
                  uint64_t v213 = *v202;
                  uint64_t v214 = v202[1];
                  uint64_t v215 = *(_DWORD *)(*v202 + 8) == 0x7FFFFFFF ? 4 : 8;
                  int v216 = *(_DWORD *)(v213 + v215);
                  uint64_t v217 = *(_DWORD *)(v214 + 8) == 0x7FFFFFFF ? 4 : 8;
                  if (v216 >= *(_DWORD *)(v214 + v217))
                  {
                    uint64_t v201 = v221;
                  }
                  else
                  {
                    uint64_t v213 = v202[1];
                    ++v202;
                  }
                }
                else
                {
                  uint64_t v213 = *v202;
                  uint64_t v201 = v221;
                }
                uint64_t v218 = *(_DWORD *)(v213 + 8) == 0x7FFFFFFF ? 4 : 8;
                int v219 = *(_DWORD *)(v213 + v218);
                v220 = (_DWORD *)(*(_DWORD *)(v209 + 8) == 0x7FFFFFFF ? v209 + 4 : v209 + 8);
              }
              while (v219 >= *v220);
              uint64_t *v208 = v209;
            }
          }
          int64_t v199 = v200 - 1;
        }
        while (v200);
        uint64_t v222 = (unint64_t)v11 >> 3;
        do
        {
          uint64_t v224 = 0;
          uint64_t v225 = *v10;
          v226 = v10;
          do
          {
            v227 = &v226[v224 + 1];
            double result = 2 * v224;
            uint64_t v228 = (2 * v224) | 1;
            uint64_t v229 = 2 * v224 + 2;
            if (v229 < v222)
            {
              uint64_t v230 = v227[1];
              uint64_t v231 = *(_DWORD *)(*v227 + 8) == 0x7FFFFFFF ? 4 : 8;
              double result = *(unsigned int *)(*v227 + v231);
              uint64_t v232 = *(_DWORD *)(v230 + 8) == 0x7FFFFFFF ? 4 : 8;
              if ((int)result < *(_DWORD *)(v230 + v232))
              {
                ++v227;
                uint64_t v228 = v229;
              }
            }
            uint64_t *v226 = *v227;
            v226 = v227;
            uint64_t v224 = v228;
          }
          while (v228 <= (uint64_t)((unint64_t)(v222 - 2) >> 1));
          if (v227 == --a2)
          {
            uint64_t *v227 = v225;
          }
          else
          {
            uint64_t *v227 = *a2;
            *a2 = v225;
            uint64_t v233 = (char *)v227 - (char *)v10 + 8;
            if (v233 >= 9)
            {
              unint64_t v234 = (((unint64_t)v233 >> 3) - 2) >> 1;
              v235 = &v10[v234];
              uint64_t v236 = *v235;
              uint64_t v237 = *v227;
              uint64_t v238 = *(_DWORD *)(*v235 + 8) == 0x7FFFFFFF ? 4 : 8;
              double result = *(unsigned int *)(v236 + v238);
              uint64_t v239 = *(_DWORD *)(v237 + 8) == 0x7FFFFFFF ? 4 : 8;
              if ((int)result < *(_DWORD *)(v237 + v239))
              {
                double result = v237 + 4;
                do
                {
                  uint64_t *v227 = v236;
                  v227 = v235;
                  if (!v234) {
                    break;
                  }
                  unint64_t v234 = (v234 - 1) >> 1;
                  v235 = &v10[v234];
                  uint64_t v236 = *v235;
                  uint64_t v240 = *(_DWORD *)(*v235 + 8) == 0x7FFFFFFF ? 4 : 8;
                  int v241 = *(_DWORD *)(v236 + v240);
                  v242 = (_DWORD *)(*(_DWORD *)(v237 + 8) == 0x7FFFFFFF ? v237 + 4 : v237 + 8);
                }
                while (v241 < *v242);
                uint64_t *v227 = v237;
              }
            }
          }
        }
        while (v222-- > 2);
      }
      return result;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = *(a2 - 1);
    if (*(_DWORD *)(v14 + 8) == 0x7FFFFFFF) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = 8;
    }
    int v16 = *(_DWORD *)(v14 + v15);
    if ((unint64_t)v11 < 0x401)
    {
      uint64_t v22 = v10[v13];
      uint64_t v23 = *v10;
      if (*(_DWORD *)(*v10 + 8) == 0x7FFFFFFF) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = 8;
      }
      int v25 = *(_DWORD *)(v23 + v24);
      if (*(_DWORD *)(v22 + 8) == 0x7FFFFFFF) {
        uint64_t v26 = 4;
      }
      else {
        uint64_t v26 = 8;
      }
      if (v25 < *(_DWORD *)(v22 + v26))
      {
        if (v16 < v25)
        {
          v10[v13] = v14;
          goto LABEL_86;
        }
        v10[v13] = v23;
        uint64_t *v10 = v22;
        uint64_t v56 = *(a2 - 1);
        if (*(_DWORD *)(v56 + 8) == 0x7FFFFFFF) {
          uint64_t v57 = 4;
        }
        else {
          uint64_t v57 = 8;
        }
        int v58 = *(_DWORD *)(v56 + v57);
        if (*(_DWORD *)(v22 + 8) == 0x7FFFFFFF) {
          uint64_t v59 = 4;
        }
        else {
          uint64_t v59 = 8;
        }
        if (v58 < *(_DWORD *)(v22 + v59))
        {
          uint64_t *v10 = v56;
LABEL_86:
          *(a2 - 1) = v22;
        }
LABEL_87:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_156;
        }
        goto LABEL_88;
      }
      if (v16 >= v25) {
        goto LABEL_87;
      }
      uint64_t *v10 = v14;
      *(a2 - 1) = v23;
      uint64_t v32 = v10[v13];
      uint64_t v33 = *v10;
      uint64_t v34 = *(_DWORD *)(*v10 + 8) == 0x7FFFFFFF ? 4 : 8;
      int v35 = *(_DWORD *)(v33 + v34);
      uint64_t v36 = *(_DWORD *)(v32 + 8) == 0x7FFFFFFF ? 4 : 8;
      if (v35 >= *(_DWORD *)(v32 + v36)) {
        goto LABEL_87;
      }
      v10[v13] = v33;
      uint64_t *v10 = v32;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_156;
      }
LABEL_88:
      uint64_t v60 = *v10;
      int v61 = *(_DWORD *)(*v10 + 8);
LABEL_163:
      uint64_t v106 = 0;
      if (v61 == 0x7FFFFFFF) {
        uint64_t v107 = 4;
      }
      else {
        uint64_t v107 = 8;
      }
      int v108 = *(_DWORD *)(v60 + v107);
      do
      {
        uint64_t v109 = v10[v106 + 1];
        if (*(_DWORD *)(v109 + 8) == 0x7FFFFFFF) {
          uint64_t v110 = 4;
        }
        else {
          uint64_t v110 = 8;
        }
        ++v106;
      }
      while (*(_DWORD *)(v109 + v110) < v108);
      uint64_t v111 = &v10[v106];
      v112 = a2;
      if (v106 == 1)
      {
        v112 = a2;
        do
        {
          if (v111 >= v112) {
            break;
          }
          uint64_t v117 = *--v112;
          uint64_t v116 = v117;
          uint64_t v118 = *(_DWORD *)(v117 + 8) == 0x7FFFFFFF ? 4 : 8;
        }
        while (*(_DWORD *)(v116 + v118) >= v108);
      }
      else
      {
        do
        {
          uint64_t v114 = *--v112;
          uint64_t v113 = v114;
          if (*(_DWORD *)(v114 + 8) == 0x7FFFFFFF) {
            uint64_t v115 = 4;
          }
          else {
            uint64_t v115 = 8;
          }
        }
        while (*(_DWORD *)(v113 + v115) >= v108);
      }
      if (v111 >= v112)
      {
        v128 = v111 - 1;
        if (v111 - 1 == v10) {
          goto LABEL_202;
        }
LABEL_201:
        uint64_t *v10 = *v128;
        goto LABEL_202;
      }
      uint64_t v119 = *v112;
      float64x2_t v120 = v111;
      v121 = v112;
      do
      {
        *float64x2_t v120 = v119;
        uint64_t *v121 = v109;
        if (*(_DWORD *)(v60 + 8) == 0x7FFFFFFF) {
          long double v122 = (int *)(v60 + 4);
        }
        else {
          long double v122 = (int *)(v60 + 8);
        }
        int v123 = *v122;
        do
        {
          uint64_t v124 = v120[1];
          ++v120;
          uint64_t v109 = v124;
          if (*(_DWORD *)(v124 + 8) == 0x7FFFFFFF) {
            uint64_t v125 = 4;
          }
          else {
            uint64_t v125 = 8;
          }
        }
        while (*(_DWORD *)(v109 + v125) < v123);
        do
        {
          uint64_t v126 = *--v121;
          uint64_t v119 = v126;
          if (*(_DWORD *)(v126 + 8) == 0x7FFFFFFF) {
            uint64_t v127 = 4;
          }
          else {
            uint64_t v127 = 8;
          }
        }
        while (*(_DWORD *)(v119 + v127) >= v123);
      }
      while (v120 < v121);
      v128 = v120 - 1;
      if (v120 - 1 != v10) {
        goto LABEL_201;
      }
LABEL_202:
      uint64_t *v128 = v60;
      if (v111 < v112) {
        goto LABEL_205;
      }
      BOOL v129 = sub_B9D824(v10, v128);
      unint64_t v10 = v128 + 1;
      double result = sub_B9D824(v128 + 1, a2);
      if (result)
      {
        a2 = v128;
        if (v129) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v129)
      {
LABEL_205:
        double result = sub_B9C918(v9, v128, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v128 + 1;
      }
    }
    else
    {
      uint64_t v17 = v10[v13];
      uint64_t v18 = *v10;
      if (*(_DWORD *)(v17 + 8) == 0x7FFFFFFF) {
        uint64_t v19 = 4;
      }
      else {
        uint64_t v19 = 8;
      }
      int v20 = *(_DWORD *)(v17 + v19);
      if (*(_DWORD *)(v18 + 8) == 0x7FFFFFFF) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = 8;
      }
      if (v20 >= *(_DWORD *)(v18 + v21))
      {
        if (v16 < v20)
        {
          v10[v13] = v14;
          *(a2 - 1) = v17;
          uint64_t v27 = v10[v13];
          uint64_t v28 = *v10;
          uint64_t v29 = *(_DWORD *)(v27 + 8) == 0x7FFFFFFF ? 4 : 8;
          int v30 = *(_DWORD *)(v27 + v29);
          uint64_t v31 = *(_DWORD *)(v28 + 8) == 0x7FFFFFFF ? 4 : 8;
          if (v30 < *(_DWORD *)(v28 + v31))
          {
            uint64_t *v10 = v27;
            v10[v13] = v28;
          }
        }
      }
      else
      {
        if (v16 < v20)
        {
          uint64_t *v10 = v14;
LABEL_56:
          *(a2 - 1) = v18;
          goto LABEL_57;
        }
        uint64_t *v10 = v17;
        v10[v13] = v18;
        uint64_t v37 = *(a2 - 1);
        if (*(_DWORD *)(v37 + 8) == 0x7FFFFFFF) {
          uint64_t v38 = 4;
        }
        else {
          uint64_t v38 = 8;
        }
        int v39 = *(_DWORD *)(v37 + v38);
        if (*(_DWORD *)(v18 + 8) == 0x7FFFFFFF) {
          uint64_t v40 = 4;
        }
        else {
          uint64_t v40 = 8;
        }
        if (v39 < *(_DWORD *)(v18 + v40))
        {
          v10[v13] = v37;
          goto LABEL_56;
        }
      }
LABEL_57:
      unint64_t v41 = v13 - 1;
      uint64_t v42 = v10[v13 - 1];
      uint64_t v43 = v10[1];
      if (*(_DWORD *)(v42 + 8) == 0x7FFFFFFF) {
        uint64_t v44 = 4;
      }
      else {
        uint64_t v44 = 8;
      }
      int v45 = *(_DWORD *)(v42 + v44);
      if (*(_DWORD *)(v43 + 8) == 0x7FFFFFFF) {
        uint64_t v46 = 4;
      }
      else {
        uint64_t v46 = 8;
      }
      int v47 = *(_DWORD *)(v43 + v46);
      uint64_t v48 = *(a2 - 2);
      if (*(_DWORD *)(v48 + 8) == 0x7FFFFFFF) {
        uint64_t v49 = 4;
      }
      else {
        uint64_t v49 = 8;
      }
      int v50 = *(_DWORD *)(v48 + v49);
      if (v45 >= v47)
      {
        if (v50 < v45)
        {
          v10[v41] = v48;
          *(a2 - 2) = v42;
          uint64_t v51 = v10[v41];
          uint64_t v52 = v10[1];
          uint64_t v53 = *(_DWORD *)(v51 + 8) == 0x7FFFFFFF ? 4 : 8;
          int v54 = *(_DWORD *)(v51 + v53);
          uint64_t v55 = *(_DWORD *)(v52 + 8) == 0x7FFFFFFF ? 4 : 8;
          if (v54 < *(_DWORD *)(v52 + v55))
          {
            v10[1] = v51;
            v10[v41] = v52;
          }
        }
      }
      else
      {
        if (v50 < v45)
        {
          v10[1] = v48;
LABEL_97:
          *(a2 - 2) = v43;
          goto LABEL_98;
        }
        v10[1] = v42;
        v10[v41] = v43;
        uint64_t v62 = *(a2 - 2);
        if (*(_DWORD *)(v62 + 8) == 0x7FFFFFFF) {
          uint64_t v63 = 4;
        }
        else {
          uint64_t v63 = 8;
        }
        int v64 = *(_DWORD *)(v62 + v63);
        if (*(_DWORD *)(v43 + 8) == 0x7FFFFFFF) {
          uint64_t v65 = 4;
        }
        else {
          uint64_t v65 = 8;
        }
        if (v64 < *(_DWORD *)(v43 + v65))
        {
          v10[v41] = v62;
          goto LABEL_97;
        }
      }
LABEL_98:
      unint64_t v66 = v13 + 1;
      uint64_t v67 = v10[v13 + 1];
      uint64_t v68 = v10[2];
      if (*(_DWORD *)(v67 + 8) == 0x7FFFFFFF) {
        uint64_t v69 = 4;
      }
      else {
        uint64_t v69 = 8;
      }
      int v70 = *(_DWORD *)(v67 + v69);
      if (*(_DWORD *)(v68 + 8) == 0x7FFFFFFF) {
        uint64_t v71 = 4;
      }
      else {
        uint64_t v71 = 8;
      }
      int v72 = *(_DWORD *)(v68 + v71);
      uint64_t v73 = *(a2 - 3);
      if (*(_DWORD *)(v73 + 8) == 0x7FFFFFFF) {
        uint64_t v74 = 4;
      }
      else {
        uint64_t v74 = 8;
      }
      int v75 = *(_DWORD *)(v73 + v74);
      if (v70 >= v72)
      {
        if (v75 < v70)
        {
          v10[v66] = v73;
          *(a2 - 3) = v67;
          uint64_t v76 = v10[v66];
          uint64_t v77 = v10[2];
          uint64_t v78 = *(_DWORD *)(v76 + 8) == 0x7FFFFFFF ? 4 : 8;
          int v79 = *(_DWORD *)(v76 + v78);
          uint64_t v80 = *(_DWORD *)(v77 + 8) == 0x7FFFFFFF ? 4 : 8;
          if (v79 < *(_DWORD *)(v77 + v80))
          {
            v10[2] = v76;
            v10[v66] = v77;
          }
        }
      }
      else
      {
        if (v75 < v70)
        {
          v10[2] = v73;
LABEL_127:
          *(a2 - 3) = v68;
          goto LABEL_128;
        }
        v10[2] = v67;
        v10[v66] = v68;
        uint64_t v81 = *(a2 - 3);
        if (*(_DWORD *)(v81 + 8) == 0x7FFFFFFF) {
          uint64_t v82 = 4;
        }
        else {
          uint64_t v82 = 8;
        }
        int v83 = *(_DWORD *)(v81 + v82);
        if (*(_DWORD *)(v68 + 8) == 0x7FFFFFFF) {
          uint64_t v84 = 4;
        }
        else {
          uint64_t v84 = 8;
        }
        if (v83 < *(_DWORD *)(v68 + v84))
        {
          v10[v66] = v81;
          goto LABEL_127;
        }
      }
LABEL_128:
      uint64_t v85 = v10[v13];
      uint64_t v86 = v10[v41];
      if (*(_DWORD *)(v85 + 8) == 0x7FFFFFFF) {
        uint64_t v87 = 4;
      }
      else {
        uint64_t v87 = 8;
      }
      int v88 = *(_DWORD *)(v85 + v87);
      if (*(_DWORD *)(v86 + 8) == 0x7FFFFFFF) {
        uint64_t v89 = 4;
      }
      else {
        uint64_t v89 = 8;
      }
      double result = *(unsigned int *)(v86 + v89);
      uint64_t v90 = v10[v66];
      if (*(_DWORD *)(v90 + 8) == 0x7FFFFFFF) {
        uint64_t v91 = 4;
      }
      else {
        uint64_t v91 = 8;
      }
      int v92 = *(_DWORD *)(v90 + v91);
      if (v88 >= (int)result)
      {
        if (v92 < v88)
        {
          v10[v13] = v90;
          v10[v66] = v85;
          long long v93 = (_DWORD *)(v86 + 4);
          if (*(_DWORD *)(v90 + 8) == 0x7FFFFFFF) {
            uint64_t v94 = 4;
          }
          else {
            uint64_t v94 = 8;
          }
          int v95 = *(_DWORD *)(v90 + v94);
          if (*(_DWORD *)(v86 + 8) != 0x7FFFFFFF) {
            long long v93 = (_DWORD *)(v86 + 8);
          }
          uint64_t v85 = v90;
          if (v95 < *v93)
          {
            v10[v41] = v90;
            v10[v13] = v86;
            uint64_t v85 = v86;
          }
        }
      }
      else if (v92 >= v88)
      {
        v10[v41] = v85;
        v10[v13] = v86;
        unint64_t v96 = (int *)(v90 + 4);
        if (*(_DWORD *)(v90 + 8) != 0x7FFFFFFF) {
          unint64_t v96 = (int *)(v90 + 8);
        }
        int v97 = *v96;
        if (*(_DWORD *)(v86 + 8) == 0x7FFFFFFF) {
          uint64_t v98 = 4;
        }
        else {
          uint64_t v98 = 8;
        }
        int v99 = *(_DWORD *)(v86 + v98);
        uint64_t v85 = v86;
        if (v97 < v99)
        {
          v10[v13] = v90;
          v10[v66] = v86;
          uint64_t v85 = v90;
        }
      }
      else
      {
        v10[v41] = v90;
        v10[v66] = v86;
      }
      uint64_t v100 = *v10;
      uint64_t *v10 = v85;
      v10[v13] = v100;
      --a3;
      if (a4) {
        goto LABEL_88;
      }
LABEL_156:
      uint64_t v101 = *(v10 - 1);
      uint64_t v60 = *v10;
      if (*(_DWORD *)(v101 + 8) == 0x7FFFFFFF) {
        uint64_t v102 = 4;
      }
      else {
        uint64_t v102 = 8;
      }
      int v103 = *(_DWORD *)(v101 + v102);
      int v61 = *(_DWORD *)(v60 + 8);
      if (v61 == 0x7FFFFFFF) {
        uint64_t v104 = 4;
      }
      else {
        uint64_t v104 = 8;
      }
      int v105 = *(_DWORD *)(v60 + v104);
      if (v103 < v105) {
        goto LABEL_163;
      }
      uint64_t v130 = *(a2 - 1);
      if (*(_DWORD *)(v130 + 8) == 0x7FFFFFFF) {
        uint64_t v131 = 4;
      }
      else {
        uint64_t v131 = 8;
      }
      if (v105 < *(_DWORD *)(v130 + v131))
      {
        do
        {
          uint64_t v133 = v10[1];
          ++v10;
          uint64_t v132 = v133;
          if (*(_DWORD *)(v133 + 8) == 0x7FFFFFFF) {
            uint64_t v134 = 4;
          }
          else {
            uint64_t v134 = 8;
          }
        }
        while (v105 >= *(_DWORD *)(v132 + v134));
      }
      else
      {
        v135 = v10 + 1;
        do
        {
          unint64_t v10 = v135;
          if (v135 >= a2) {
            break;
          }
          ++v135;
          uint64_t v136 = *(_DWORD *)(*v10 + 8) == 0x7FFFFFFF ? 4 : 8;
        }
        while (v105 >= *(_DWORD *)(*v10 + v136));
      }
      v137 = a2;
      if (v10 < a2)
      {
        v137 = a2;
        do
        {
          uint64_t v139 = *--v137;
          uint64_t v138 = v139;
          if (*(_DWORD *)(v139 + 8) == 0x7FFFFFFF) {
            uint64_t v140 = 4;
          }
          else {
            uint64_t v140 = 8;
          }
        }
        while (v105 < *(_DWORD *)(v138 + v140));
      }
      if (v10 < v137)
      {
        uint64_t v141 = *v10;
        uint64_t v142 = *v137;
        do
        {
          uint64_t *v10 = v142;
          uint64_t *v137 = v141;
          if (*(_DWORD *)(v60 + 8) == 0x7FFFFFFF) {
            v143 = (int *)(v60 + 4);
          }
          else {
            v143 = (int *)(v60 + 8);
          }
          int v144 = *v143;
          do
          {
            uint64_t v145 = v10[1];
            ++v10;
            uint64_t v141 = v145;
            if (*(_DWORD *)(v145 + 8) == 0x7FFFFFFF) {
              uint64_t v146 = 4;
            }
            else {
              uint64_t v146 = 8;
            }
          }
          while (v144 >= *(_DWORD *)(v141 + v146));
          do
          {
            uint64_t v147 = *--v137;
            uint64_t v142 = v147;
            if (*(_DWORD *)(v147 + 8) == 0x7FFFFFFF) {
              uint64_t v148 = 4;
            }
            else {
              uint64_t v148 = 8;
            }
          }
          while (v144 < *(_DWORD *)(v142 + v148));
        }
        while (v10 < v137);
      }
      v149 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        uint64_t *v9 = *v149;
      }
      a4 = 0;
      uint64_t *v149 = v60;
    }
  }
  switch(v12)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v150 = *(a2 - 1);
      uint64_t v151 = *v10;
      uint64_t v152 = 8;
      if (*(_DWORD *)(v150 + 8) == 0x7FFFFFFF) {
        uint64_t v153 = 4;
      }
      else {
        uint64_t v153 = 8;
      }
      int v154 = *(_DWORD *)(v150 + v153);
      if (*(_DWORD *)(v151 + 8) == 0x7FFFFFFF) {
        uint64_t v152 = 4;
      }
      if (v154 < *(_DWORD *)(v151 + v152))
      {
        uint64_t *v10 = v150;
        *(a2 - 1) = v151;
      }
      return result;
    case 3:
      uint64_t v155 = *v10;
      uint64_t v156 = v10[1];
      if (*(_DWORD *)(v156 + 8) == 0x7FFFFFFF) {
        uint64_t v157 = 4;
      }
      else {
        uint64_t v157 = 8;
      }
      int v158 = *(_DWORD *)(v156 + v157);
      if (*(_DWORD *)(v155 + 8) == 0x7FFFFFFF) {
        uint64_t v159 = 4;
      }
      else {
        uint64_t v159 = 8;
      }
      int v160 = *(_DWORD *)(v155 + v159);
      uint64_t v161 = *(a2 - 1);
      if (*(_DWORD *)(v161 + 8) == 0x7FFFFFFF) {
        uint64_t v162 = 4;
      }
      else {
        uint64_t v162 = 8;
      }
      int v163 = *(_DWORD *)(v161 + v162);
      if (v158 < v160)
      {
        if (v163 >= v158)
        {
          uint64_t *v10 = v156;
          v10[1] = v155;
          uint64_t v257 = *(a2 - 1);
          uint64_t v258 = 8;
          if (*(_DWORD *)(v257 + 8) == 0x7FFFFFFF) {
            uint64_t v259 = 4;
          }
          else {
            uint64_t v259 = 8;
          }
          int v260 = *(_DWORD *)(v257 + v259);
          if (*(_DWORD *)(v155 + 8) == 0x7FFFFFFF) {
            uint64_t v258 = 4;
          }
          if (v260 >= *(_DWORD *)(v155 + v258)) {
            return result;
          }
          v10[1] = v257;
        }
        else
        {
          uint64_t *v10 = v161;
        }
        *(a2 - 1) = v155;
        return result;
      }
      if (v163 < v158)
      {
        v10[1] = v161;
        *(a2 - 1) = v156;
        uint64_t v244 = *v10;
        uint64_t v243 = v10[1];
        uint64_t v245 = 8;
        if (*(_DWORD *)(v243 + 8) == 0x7FFFFFFF) {
          uint64_t v246 = 4;
        }
        else {
          uint64_t v246 = 8;
        }
        int v247 = *(_DWORD *)(v243 + v246);
        if (*(_DWORD *)(v244 + 8) == 0x7FFFFFFF) {
          uint64_t v245 = 4;
        }
        if (v247 < *(_DWORD *)(v244 + v245))
        {
          uint64_t *v10 = v243;
          v10[1] = v244;
        }
      }
      break;
    case 4:
      return (uint64_t)sub_B9DD90(v10, v10 + 1, v10 + 2, a2 - 1);
    case 5:
      v164 = v10 + 2;
      v165 = v10 + 3;
      double result = (uint64_t)sub_B9DD90(v9, v9 + 1, v9 + 2, v9 + 3);
      uint64_t v166 = *(a2 - 1);
      uint64_t v167 = v9[3];
      uint64_t v168 = 8;
      if (*(_DWORD *)(v166 + 8) == 0x7FFFFFFF) {
        uint64_t v169 = 4;
      }
      else {
        uint64_t v169 = 8;
      }
      int v170 = *(_DWORD *)(v166 + v169);
      if (*(_DWORD *)(v167 + 8) == 0x7FFFFFFF) {
        uint64_t v168 = 4;
      }
      if (v170 < *(_DWORD *)(v167 + v168))
      {
        uint64_t *v165 = v166;
        *(a2 - 1) = v167;
        uint64_t v171 = *v165;
        uint64_t v172 = *v164;
        uint64_t v173 = *(_DWORD *)(*v165 + 8) == 0x7FFFFFFF ? 4 : 8;
        int v174 = *(_DWORD *)(v171 + v173);
        uint64_t v175 = *(_DWORD *)(v172 + 8) == 0x7FFFFFFF ? 4 : 8;
        if (v174 < *(_DWORD *)(v172 + v175))
        {
          uint64_t *v164 = v171;
          uint64_t *v165 = v172;
          uint64_t v176 = v9[1];
          uint64_t v177 = 8;
          if (*(_DWORD *)(v171 + 8) == 0x7FFFFFFF) {
            uint64_t v178 = 4;
          }
          else {
            uint64_t v178 = 8;
          }
          int v179 = *(_DWORD *)(v171 + v178);
          if (*(_DWORD *)(v176 + 8) == 0x7FFFFFFF) {
            uint64_t v177 = 4;
          }
          if (v179 < *(_DWORD *)(v176 + v177))
          {
            v9[1] = v171;
            v9[2] = v176;
            uint64_t v180 = *v9;
            uint64_t v181 = *(_DWORD *)(v171 + 8) == 0x7FFFFFFF ? 4 : 8;
            int v182 = *(_DWORD *)(v171 + v181);
            uint64_t v183 = *(_DWORD *)(v180 + 8) == 0x7FFFFFFF ? 4 : 8;
            if (v182 < *(_DWORD *)(v180 + v183))
            {
              uint64_t *v9 = v171;
              v9[1] = v180;
            }
          }
        }
      }
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

BOOL sub_B9D824(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = 8;
      if (*(_DWORD *)(v6 + 8) == 0x7FFFFFFF) {
        uint64_t v9 = 4;
      }
      else {
        uint64_t v9 = 8;
      }
      int v10 = *(_DWORD *)(v6 + v9);
      if (*(_DWORD *)(v7 + 8) == 0x7FFFFFFF) {
        uint64_t v8 = 4;
      }
      if (v10 < *(_DWORD *)(v7 + v8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      if (*(_DWORD *)(v12 + 8) == 0x7FFFFFFF) {
        uint64_t v13 = 4;
      }
      else {
        uint64_t v13 = 8;
      }
      int v14 = *(_DWORD *)(v12 + v13);
      if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = 8;
      }
      int v16 = *(_DWORD *)(v11 + v15);
      uint64_t v17 = *(a2 - 1);
      if (*(_DWORD *)(v17 + 8) == 0x7FFFFFFF) {
        uint64_t v18 = 4;
      }
      else {
        uint64_t v18 = 8;
      }
      int v19 = *(_DWORD *)(v17 + v18);
      if (v14 >= v16)
      {
        if (v19 < v14)
        {
          a1[1] = v17;
          *(a2 - 1) = v12;
          uint64_t v52 = *a1;
          uint64_t v51 = a1[1];
          uint64_t v53 = 8;
          if (*(_DWORD *)(v51 + 8) == 0x7FFFFFFF) {
            uint64_t v54 = 4;
          }
          else {
            uint64_t v54 = 8;
          }
          int v55 = *(_DWORD *)(v51 + v54);
          if (*(_DWORD *)(v52 + 8) == 0x7FFFFFFF) {
            uint64_t v53 = 4;
          }
          if (v55 < *(_DWORD *)(v52 + v53))
          {
            *a1 = v51;
            a1[1] = v52;
          }
        }
      }
      else if (v19 >= v14)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v58 = *(a2 - 1);
        uint64_t v59 = 8;
        if (*(_DWORD *)(v58 + 8) == 0x7FFFFFFF) {
          uint64_t v60 = 4;
        }
        else {
          uint64_t v60 = 8;
        }
        int v61 = *(_DWORD *)(v58 + v60);
        if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
          uint64_t v59 = 4;
        }
        if (v61 < *(_DWORD *)(v11 + v59))
        {
          a1[1] = v58;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v17;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_B9DD90(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v31 = a1 + 2;
      uint64_t v32 = a1 + 3;
      sub_B9DD90(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v33 = *(a2 - 1);
      uint64_t v34 = a1[3];
      uint64_t v35 = 8;
      if (*(_DWORD *)(v33 + 8) == 0x7FFFFFFF) {
        uint64_t v36 = 4;
      }
      else {
        uint64_t v36 = 8;
      }
      int v37 = *(_DWORD *)(v33 + v36);
      if (*(_DWORD *)(v34 + 8) == 0x7FFFFFFF) {
        uint64_t v35 = 4;
      }
      if (v37 >= *(_DWORD *)(v34 + v35)) {
        return 1;
      }
      uint64_t *v32 = v33;
      *(a2 - 1) = v34;
      uint64_t v38 = *v32;
      uint64_t v39 = *v31;
      uint64_t v40 = *(_DWORD *)(*v32 + 8) == 0x7FFFFFFF ? 4 : 8;
      int v41 = *(_DWORD *)(v38 + v40);
      uint64_t v42 = *(_DWORD *)(v39 + 8) == 0x7FFFFFFF ? 4 : 8;
      if (v41 >= *(_DWORD *)(v39 + v42)) {
        return 1;
      }
      uint64_t *v31 = v38;
      uint64_t *v32 = v39;
      uint64_t v43 = a1[1];
      uint64_t v44 = 8;
      if (*(_DWORD *)(v38 + 8) == 0x7FFFFFFF) {
        uint64_t v45 = 4;
      }
      else {
        uint64_t v45 = 8;
      }
      int v46 = *(_DWORD *)(v38 + v45);
      if (*(_DWORD *)(v43 + 8) == 0x7FFFFFFF) {
        uint64_t v44 = 4;
      }
      if (v46 >= *(_DWORD *)(v43 + v44)) {
        return 1;
      }
      a1[1] = v38;
      a1[2] = v43;
      uint64_t v47 = *a1;
      uint64_t v48 = *(_DWORD *)(v38 + 8) == 0x7FFFFFFF ? 4 : 8;
      int v49 = *(_DWORD *)(v38 + v48);
      uint64_t v50 = *(_DWORD *)(v47 + 8) == 0x7FFFFFFF ? 4 : 8;
      if (v49 >= *(_DWORD *)(v47 + v50)) {
        return 1;
      }
      *a1 = v38;
      a1[1] = v47;
      return 1;
    default:
      int v20 = a1 + 2;
      uint64_t v21 = a1[2];
      uint64_t v22 = a1 + 1;
      uint64_t v23 = a1[1];
      uint64_t v24 = *a1;
      if (*(_DWORD *)(v23 + 8) == 0x7FFFFFFF) {
        uint64_t v25 = 4;
      }
      else {
        uint64_t v25 = 8;
      }
      int v26 = *(_DWORD *)(v23 + v25);
      uint64_t v27 = (_DWORD *)(v24 + 8);
      if (*(_DWORD *)(v24 + 8) == 0x7FFFFFFF) {
        uint64_t v28 = 4;
      }
      else {
        uint64_t v28 = 8;
      }
      if (*(_DWORD *)(v21 + 8) == 0x7FFFFFFF) {
        uint64_t v29 = 4;
      }
      else {
        uint64_t v29 = 8;
      }
      int v30 = *(_DWORD *)(v21 + v29);
      if (v26 >= *(_DWORD *)(v24 + v28))
      {
        if (v30 < v26)
        {
          uint64_t *v22 = v21;
          uint64_t *v20 = v23;
          uint64_t v56 = 8;
          if (*(_DWORD *)(v21 + 8) == 0x7FFFFFFF) {
            uint64_t v56 = 4;
          }
          int v57 = *(_DWORD *)(v21 + v56);
          if (*v27 == 0x7FFFFFFF) {
            uint64_t v27 = (_DWORD *)(v24 + 4);
          }
          if (v57 < *v27)
          {
            *a1 = v21;
LABEL_93:
            uint64_t *v22 = v24;
          }
        }
      }
      else
      {
        if (v30 < v26)
        {
          *a1 = v21;
LABEL_92:
          uint64_t v22 = a1 + 2;
          goto LABEL_93;
        }
        *a1 = v23;
        a1[1] = v24;
        if (*(_DWORD *)(v21 + 8) == 0x7FFFFFFF) {
          uint64_t v62 = (int *)(v21 + 4);
        }
        else {
          uint64_t v62 = (int *)(v21 + 8);
        }
        int v63 = *v62;
        uint64_t v64 = 8;
        if (*(_DWORD *)(v24 + 8) == 0x7FFFFFFF) {
          uint64_t v64 = 4;
        }
        if (v63 < *(_DWORD *)(v24 + v64))
        {
          uint64_t *v22 = v21;
          goto LABEL_92;
        }
      }
      uint64_t v65 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v66 = 0;
      int v67 = 0;
      while (1)
      {
        uint64_t v68 = *v65;
        uint64_t v69 = *v20;
        int v70 = (int *)(*v65 + 8);
        uint64_t v71 = *v70 == 0x7FFFFFFF ? 4 : 8;
        int v72 = *(_DWORD *)(v68 + v71);
        uint64_t v73 = *(_DWORD *)(v69 + 8) == 0x7FFFFFFF ? 4 : 8;
        if (v72 < *(_DWORD *)(v69 + v73)) {
          break;
        }
LABEL_115:
        int v20 = v65;
        v66 += 8;
        if (++v65 == a2) {
          return 1;
        }
      }
      uint64_t v74 = v66;
      do
      {
        *(uint64_t *)((char *)a1 + v74 + 24) = v69;
        if (v74 == -16)
        {
          *a1 = v68;
          if (++v67 != 8) {
            goto LABEL_115;
          }
          return v65 + 1 == a2;
        }
        uint64_t v69 = *(uint64_t *)((char *)a1 + v74 + 8);
        if (*v70 == 0x7FFFFFFF) {
          int v75 = (int *)(v68 + 4);
        }
        else {
          int v75 = v70;
        }
        int v76 = *v75;
        if (*(_DWORD *)(v69 + 8) == 0x7FFFFFFF) {
          uint64_t v77 = 4;
        }
        else {
          uint64_t v77 = 8;
        }
        v74 -= 8;
      }
      while (v76 < *(_DWORD *)(v69 + v77));
      *(uint64_t *)((char *)a1 + v74 + 24) = v68;
      if (++v67 != 8) {
        goto LABEL_115;
      }
      return v65 + 1 == a2;
  }
}

uint64_t *sub_B9DD90(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  if (*(_DWORD *)(*a2 + 8) == 0x7FFFFFFF) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = 8;
  }
  int v7 = *(_DWORD *)(v4 + v6);
  if (*(_DWORD *)(v5 + 8) == 0x7FFFFFFF) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 8;
  }
  int v9 = *(_DWORD *)(v5 + v8);
  uint64_t v10 = *a3;
  if (*(_DWORD *)(*a3 + 8) == 0x7FFFFFFF) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = 8;
  }
  int v12 = *(_DWORD *)(v10 + v11);
  if (v7 >= v9)
  {
    if (v12 >= v7)
    {
      uint64_t v4 = *a3;
    }
    else
    {
      *a2 = v10;
      *a3 = v4;
      uint64_t v13 = *a2;
      uint64_t v14 = *result;
      uint64_t v15 = 8;
      if (*(_DWORD *)(*a2 + 8) == 0x7FFFFFFF) {
        uint64_t v16 = 4;
      }
      else {
        uint64_t v16 = 8;
      }
      int v17 = *(_DWORD *)(v13 + v16);
      if (*(_DWORD *)(v14 + 8) == 0x7FFFFFFF) {
        uint64_t v15 = 4;
      }
      if (v17 < *(_DWORD *)(v14 + v15))
      {
        *BOOL result = v13;
        *a2 = v14;
        uint64_t v4 = *a3;
      }
    }
  }
  else
  {
    if (v12 < v7)
    {
      *BOOL result = v10;
LABEL_28:
      *a3 = v5;
      uint64_t v4 = v5;
      goto LABEL_30;
    }
    *BOOL result = v4;
    *a2 = v5;
    uint64_t v4 = *a3;
    uint64_t v18 = 8;
    if (*(_DWORD *)(*a3 + 8) == 0x7FFFFFFF) {
      uint64_t v19 = 4;
    }
    else {
      uint64_t v19 = 8;
    }
    int v20 = *(_DWORD *)(v4 + v19);
    if (*(_DWORD *)(v5 + 8) == 0x7FFFFFFF) {
      uint64_t v18 = 4;
    }
    if (v20 < *(_DWORD *)(v5 + v18))
    {
      *a2 = v4;
      goto LABEL_28;
    }
  }
LABEL_30:
  uint64_t v21 = *a4;
  uint64_t v22 = 8;
  if (*(_DWORD *)(*a4 + 8) == 0x7FFFFFFF) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  int v24 = *(_DWORD *)(v21 + v23);
  if (*(_DWORD *)(v4 + 8) == 0x7FFFFFFF) {
    uint64_t v22 = 4;
  }
  if (v24 < *(_DWORD *)(v4 + v22))
  {
    *a3 = v21;
    *a4 = v4;
    uint64_t v25 = *a3;
    uint64_t v26 = *a2;
    uint64_t v27 = *(_DWORD *)(*a3 + 8) == 0x7FFFFFFF ? 4 : 8;
    int v28 = *(_DWORD *)(v25 + v27);
    uint64_t v29 = *(_DWORD *)(v26 + 8) == 0x7FFFFFFF ? 4 : 8;
    if (v28 < *(_DWORD *)(v26 + v29))
    {
      *a2 = v25;
      *a3 = v26;
      uint64_t v30 = *a2;
      uint64_t v31 = *result;
      uint64_t v32 = 8;
      if (*(_DWORD *)(*a2 + 8) == 0x7FFFFFFF) {
        uint64_t v33 = 4;
      }
      else {
        uint64_t v33 = 8;
      }
      int v34 = *(_DWORD *)(v30 + v33);
      if (*(_DWORD *)(v31 + 8) == 0x7FFFFFFF) {
        uint64_t v32 = 4;
      }
      if (v34 < *(_DWORD *)(v31 + v32))
      {
        *BOOL result = v30;
        *a2 = v31;
      }
    }
  }
  return result;
}

void sub_B9DF68(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_B9E72C(a2, a3, &v33);
  int v7 = (char *)v33;
  uint64_t v8 = v34;
  uint64_t v32 = (char *)v33;
  if (v33 != v34)
  {
    do
    {
      while (1)
      {
        int v9 = *(_DWORD *)(a1 + 8);
        int v10 = v9 / 10;
        int v11 = v9 % 10;
        char v12 = v9 < 0 ? -5 : 5;
        signed int v13 = v10 + (((103 * (char)(v12 + v11)) >> 15) & 1) + ((103 * (char)(v12 + v11)) >> 10);
        if (*(_DWORD *)v7 <= v13) {
          break;
        }
        v7 += 4;
        uint64_t v32 = v7;
        if (v7 == v8) {
          goto LABEL_21;
        }
      }
      while (v13 >= *(_DWORD *)v7)
      {
        v7 += 4;
        if (v7 == v8)
        {
          int v7 = v8;
          break;
        }
      }
      uint64_t v31 = v7;
      sub_B97398(a1, (int **)&v32, (int **)&v31, (unint64_t *)&__p);
      int64_t v14 = (v32 - (unsigned char *)v33) >> 2;
      int64_t v15 = (v31 - (unsigned char *)v33) >> 2;
      if (__p == v30)
      {
        uint64_t v21 = *a2 + 8 * v14;
        uint64_t v35 = *a2 + 8 * v15 + 8;
        uint64_t v36 = v21;
        sub_B9E8B4(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
      }
      else
      {
        uint64_t v36 = *a2 + 8 * v14;
        uint64_t v35 = v36 + 8 * *(void *)__p + 16;
        sub_B9E8B4(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
        uint64_t v16 = v30;
        if (__p != v30)
        {
          int v17 = (char *)__p + 8;
          if ((char *)__p + 8 != v30)
          {
            do
            {
              uint64_t v18 = *a2 + 8 * v14;
              uint64_t v19 = v18 + 8 * *(v17 - 1) + 8;
              uint64_t v35 = v18 + 8 * *v17 + 16;
              uint64_t v36 = v19;
              sub_B9E8B4(a1, &v36, &v35, (uint64_t)v37);
              sub_B97450((char **)a4, v37);
              ++v17;
            }
            while (v17 != v16);
            uint64_t v16 = v30;
          }
        }
        uint64_t v20 = *a2 + 8 * v14 + 8 * *(v16 - 1) + 8;
        uint64_t v35 = *a2 + 8 * v15 + 8;
        uint64_t v36 = v20;
        sub_B9E8B4(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
      }
      int v7 = v31;
      uint64_t v32 = v31;
      if (__p)
      {
        uint64_t v30 = (char *)__p;
        operator delete(__p);
        int v7 = v32;
      }
      uint64_t v8 = v34;
    }
    while (v7 != v34);
LABEL_21:
    uint64_t v23 = *(char **)a4;
    uint64_t v22 = *(char **)(a4 + 8);
    if (*(char **)a4 != v22)
    {
      while (1)
      {
        BOOL v24 = *(_DWORD *)v23 == 0x7FFFFFFF || *((_DWORD *)v23 + 1) == 0x7FFFFFFF;
        if (v24 || !*((_DWORD *)v23 + 3)) {
          break;
        }
        v23 += 40;
        if (v23 == v22) {
          goto LABEL_41;
        }
      }
      if (v23 != v22)
      {
        for (i = v23 + 40; i != v22; i += 40)
        {
          BOOL v26 = *(_DWORD *)i == 0x7FFFFFFF || *((_DWORD *)i + 1) == 0x7FFFFFFF;
          if (!v26 && *((_DWORD *)i + 3))
          {
            long long v27 = *(_OWORD *)i;
            long long v28 = *((_OWORD *)i + 1);
            v23[32] = i[32];
            *(_OWORD *)uint64_t v23 = v27;
            *((_OWORD *)v23 + 1) = v28;
            v23 += 40;
          }
        }
      }
      if (v23 != v22) {
        *(void *)(a4 + 8) = v23;
      }
    }
  }
LABEL_41:
  if (v33)
  {
    int v34 = (char *)v33;
    operator delete(v33);
  }
}

void sub_B9E2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  uint64_t v18 = *(void **)v16;
  if (!*(void *)v16) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v16 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

BOOL sub_B9E33C(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

void *sub_B9E350(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  int v7 = result;
  uint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = v12;
    BOOL result = operator new(8 * v12);
    int v9 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memmove(result, v6, v14);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    BOOL result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, 8 * v17);
    int v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *int64_t v15 = &v9[v14];
  return result;
}

char *sub_B9E49C(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  int v7 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v10) >> 3)) < a5)
  {
    BOOL v11 = *(char **)a1;
    unint64_t v12 = a5 - 0x3333333333333333 * ((uint64_t)(v10 - *(void *)a1) >> 3);
    if (v12 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (uint64_t)v11) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x666666666666666) {
        sub_188D718();
      }
      int64_t v15 = (char *)operator new(40 * v14);
    }
    else
    {
      int64_t v15 = 0;
    }
    uint64_t v25 = &v15[8 * ((v5 - v11) >> 3)];
    uint64_t v26 = 40 * a5;
    long long v27 = &v25[40 * a5];
    long long v28 = v25;
    do
    {
      long long v29 = *(_OWORD *)v7;
      long long v30 = *((_OWORD *)v7 + 1);
      *((void *)v28 + 4) = *((void *)v7 + 4);
      *(_OWORD *)long long v28 = v29;
      *((_OWORD *)v28 + 1) = v30;
      v28 += 40;
      v7 += 40;
      v26 -= 40;
    }
    while (v26);
    uint64_t v31 = *(char **)a1;
    uint64_t v32 = &v15[8 * ((v5 - v11) >> 3)];
    if (*(char **)a1 != v5)
    {
      uint64_t v33 = v5;
      uint64_t v32 = &v15[8 * ((v5 - v11) >> 3)];
      do
      {
        long long v34 = *(_OWORD *)(v33 - 40);
        long long v35 = *(_OWORD *)(v33 - 24);
        *(v32 - 8) = *(v33 - 8);
        *(_OWORD *)(v32 - 24) = v35;
        *(_OWORD *)(v32 - 40) = v34;
        v32 -= 40;
        v33 -= 40;
      }
      while (v33 != v31);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v36 = &v15[40 * v14];
    unint64_t v37 = v10 - (void)v5;
    if (v37) {
      memmove(v27, v5, v37 - 7);
    }
    uint64_t v38 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v37];
    *(void *)(a1 + 16) = v36;
    if (v38) {
      operator delete(v38);
    }
    return v25;
  }
  uint64_t v16 = v10 - (void)__dst;
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)__dst) >> 3)) >= a5)
  {
    unint64_t v17 = &__src[40 * a5];
    uint64_t v19 = *(unsigned char **)(a1 + 8);
LABEL_18:
    uint64_t v20 = &v5[40 * a5];
    uint64_t v21 = &v19[-40 * a5];
    uint64_t v22 = v19;
    if ((unint64_t)v21 < v10)
    {
      uint64_t v22 = v19;
      do
      {
        long long v23 = *(_OWORD *)v21;
        long long v24 = *((_OWORD *)v21 + 1);
        *((void *)v22 + 4) = *((void *)v21 + 4);
        *(_OWORD *)uint64_t v22 = v23;
        *((_OWORD *)v22 + 1) = v24;
        v21 += 40;
        v22 += 40;
      }
      while ((unint64_t)v21 < v10);
    }
    *(void *)(a1 + 8) = v22;
    if (v19 != v20) {
      memmove(v20, v5, v19 - v20 - 7);
    }
    if (v17 != v7) {
      memmove(v5, v7, v17 - v7 - 7);
    }
    return v5;
  }
  unint64_t v17 = &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)];
  int64_t v18 = a4 - v17;
  if (a4 != v17) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v10 - (void)__dst) >> 3)], v18 - 7);
  }
  uint64_t v19 = (unsigned char *)(v10 + v18);
  *(void *)(a1 + 8) = v10 + v18;
  if (v16 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_B9E72C(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (*a1 != *a2)
  {
    for (uint64_t i = v4 + 8; i != v5; i += 8)
    {
      if (*(_DWORD *)(*(void *)i + 8) == 0x7FFFFFFF) {
        uint64_t v7 = 4;
      }
      else {
        uint64_t v7 = 8;
      }
      int v8 = *(_DWORD *)(*(void *)i + v7);
      uint64_t v9 = *(void *)(i - 8);
      if (*(_DWORD *)(v9 + 8) == 0x7FFFFFFF) {
        uint64_t v10 = 4;
      }
      else {
        uint64_t v10 = 8;
      }
      if (v8 < *(_DWORD *)(v9 + v10))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v18, "Journey leg alternatives are not sorted according to their expected departure times");
        unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
      }
    }
    for (uint64_t j = v4 + 8; j != v5; j += 8)
    {
      if (*(_DWORD *)(*(void *)j + 8) == 0x7FFFFFFF) {
        uint64_t v14 = 4;
      }
      else {
        uint64_t v14 = 8;
      }
      int v15 = *(_DWORD *)(*(void *)j + v14);
      uint64_t v16 = *(void *)(j - 8);
      if (*(_DWORD *)(v16 + 8) == 0x7FFFFFFF) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = 8;
      }
      LODWORD(v18) = v15 - *(_DWORD *)(v16 + v17);
      sub_745A4((uint64_t)a3, &v18);
    }
  }
}

void sub_B9E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B9E8B4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  if (*a2 == *a3)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v10 = *a2;
    do
    {
      if (*(_DWORD *)(*(void *)v10 + 40) != -1)
      {
        int v14 = 0x7FFFFFFF;
        int v15 = 0x7FFFFFFF;
        goto LABEL_23;
      }
      v10 += 8;
    }
    while (v10 != v9);
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    __p = &v36;
    do
    {
      if (*(_DWORD *)(*(void *)v8 + 8) == 0x7FFFFFFF) {
        uint64_t v11 = 4;
      }
      else {
        uint64_t v11 = 8;
      }
      LODWORD(p_p) = *(_DWORD *)(*(void *)v8 + v11);
      sub_737BC((uint64_t *)&__p, &p_p);
      v8 += 8;
    }
    while (v8 != v9);
    unint64_t v12 = v36;
    unint64_t v13 = v37;
    __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    p_p = &__p;
    if (v36 != v37)
    {
      do
        sub_737BC((uint64_t *)&p_p, v12++);
      while (v12 != v13);
    }
  }
  unint64_t v35 = sub_BC28((uint64_t)&__p, *(_DWORD *)(a1 + 8), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned char *)a1);
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (sub_BB7C(&v35))
  {
    int v14 = *(_DWORD *)nullsub_1(&v35);
    int v15 = *(_DWORD *)sub_BBB4((uint64_t)&v35);
LABEL_19:
    if (v36)
    {
      unint64_t v37 = v36;
      operator delete(v36);
    }
    uint64_t v8 = *a2;
    uint64_t v9 = *a3;
LABEL_23:
    uint64_t v17 = 8;
    if (*(_DWORD *)(*(void *)v8 + 8) == 0x7FFFFFFF) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = 8;
    }
    int v19 = *(_DWORD *)(*(void *)v8 + v18);
    uint64_t v20 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v20 + 8) == 0x7FFFFFFF) {
      uint64_t v17 = 4;
    }
    int v21 = *(_DWORD *)(v20 + v17);
    uint64_t v22 = (v9 - v8) >> 3;
    int v23 = 0x7FFFFFFF;
    if ((unint64_t)(v9 - v8) < 9) {
      goto LABEL_38;
    }
    double v24 = (double)(10 * (v21 - v19)) / (double)(unint64_t)(v22 - 1);
    if (v24 >= 0.0)
    {
      if (v24 < 4.50359963e15)
      {
        uint64_t v25 = (uint64_t)(v24 + v24) + 1;
LABEL_36:
        double v24 = (double)(v25 >> 1);
      }
    }
    else if (v24 > -4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v24 + v24);
      if (v25 >= 1) {
        --v25;
      }
      goto LABEL_36;
    }
    int v23 = (int)v24;
LABEL_38:
    BOOL v26 = v14 != 0x7FFFFFFF;
    BOOL v27 = v15 != 0x7FFFFFFF;
    BOOL v28 = !v26 || !v27;
    if (v26 && v27) {
      int v29 = v14;
    }
    else {
      int v29 = v23;
    }
    if (v28) {
      int v30 = v23;
    }
    else {
      int v30 = v15;
    }
    *(_DWORD *)a4 = v19;
    *(_DWORD *)(a4 + 4) = v21;
    *(_DWORD *)(a4 + 8) = v29;
    *(_DWORD *)(a4 + 12) = v30;
    *(_DWORD *)(a4 + 16) = v23;
    *(void *)(a4 + 24) = v22;
    *(unsigned char *)(a4 + 32) = 0;
    *(_DWORD *)(a4 + 33) = *(_DWORD *)v39;
    *(_DWORD *)(a4 + 36) = *(_DWORD *)&v39[3];
    return;
  }
  int v16 = *(unsigned __int8 *)(a1 + 33);
  int v14 = 0x7FFFFFFF;
  int v15 = 0x7FFFFFFF;
  if (v16) {
    goto LABEL_19;
  }
  *(void *)&long long v31 = 0x8000000080000000;
  *((void *)&v31 + 1) = 0x8000000080000000;
  *(_OWORD *)a4 = v31;
  *(_DWORD *)(a4 + 16) = 0x7FFFFFFF;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 0;
  if (v36)
  {
    unint64_t v37 = v36;
    operator delete(v36);
  }
}

void sub_B9EB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    int v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_B9EBC8(unint64_t a1, long long *a2, unsigned int (**a3)(uint64_t, char *), uint64_t a4, char a5)
{
BOOL sub_B9F9FC(uint64_t a1, uint64_t a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (__n128 *)(a2 - 40);
      if (!(*a3)((__n128 *)(a2 - 40), (__n128 *)a1)) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      __n128 v10 = *(__n128 *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      char v12 = *(unsigned char *)(a2 - 8);
      long long v13 = *(_OWORD *)(a2 - 24);
      *(__n128 *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(unsigned char *)(a1 + 32) = v12;
      *uint64_t v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      BOOL result = 1;
      *(unsigned char *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      uint64_t v14 = a1 + 40;
      uint64_t v15 = a2 - 40;
      char v16 = (*a3)((__n128 *)(a1 + 40), (__n128 *)a1);
      int v17 = (*a3)((__n128 *)v15, (__n128 *)(a1 + 40));
      if ((v16 & 1) == 0)
      {
        if (!v17) {
          return 1;
        }
        uint64_t v48 = *(void *)(a1 + 72);
        __n128 v49 = *(__n128 *)v14;
        long long v50 = *(_OWORD *)(a1 + 56);
        char v51 = *(unsigned char *)(v15 + 32);
        long long v52 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *(_OWORD *)(a1 + 56) = v52;
        *(unsigned char *)(a1 + 72) = v51;
        *(__n128 *)uint64_t v15 = v49;
        *(_OWORD *)(v15 + 16) = v50;
        *(unsigned char *)(v15 + 32) = v48;
        goto LABEL_17;
      }
      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 32);
        __n128 v19 = *(__n128 *)a1;
        long long v20 = *(_OWORD *)(a1 + 16);
        char v21 = *(unsigned char *)(v15 + 32);
        long long v22 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v15;
        *(_OWORD *)(a1 + 16) = v22;
        *(unsigned char *)(a1 + 32) = v21;
      }
      else
      {
        uint64_t v65 = *(void *)(a1 + 32);
        __n128 v67 = *(__n128 *)a1;
        long long v66 = *(_OWORD *)(a1 + 16);
        long long v68 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v14;
        *(_OWORD *)(a1 + 16) = v68;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 72);
        *(__n128 *)uint64_t v14 = v67;
        *(_OWORD *)(a1 + 56) = v66;
        *(unsigned char *)(a1 + 72) = v65;
        if (!(*a3)((__n128 *)v15, (__n128 *)(a1 + 40))) {
          return 1;
        }
        uint64_t v18 = *(void *)(a1 + 72);
        __n128 v19 = *(__n128 *)v14;
        long long v20 = *(_OWORD *)(a1 + 56);
        char v69 = *(unsigned char *)(v15 + 32);
        long long v70 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *(_OWORD *)(a1 + 56) = v70;
        *(unsigned char *)(a1 + 72) = v69;
      }
      *(__n128 *)uint64_t v15 = v19;
      *(_OWORD *)(v15 + 16) = v20;
      BOOL result = 1;
      *(unsigned char *)(v15 + 32) = v18;
      return result;
    case 4uLL:
      sub_B9FE9C((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      uint64_t v14 = a1 + 40;
      long long v23 = (__n128 *)(a1 + 80);
      char v24 = (__n128 *)(a1 + 120);
      uint64_t v25 = a2 - 40;
      __n128 v26 = sub_B9FE9C((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a1 + 120), a3);
      if (!((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v25, a1 + 120, v26)) {
        return 1;
      }
      uint64_t v27 = *(void *)(a1 + 152);
      __n128 v28 = *v24;
      long long v29 = *(_OWORD *)(a1 + 136);
      char v30 = *(unsigned char *)(v25 + 32);
      long long v31 = *(_OWORD *)(v25 + 16);
      *char v24 = *(__n128 *)v25;
      *(_OWORD *)(a1 + 136) = v31;
      *(unsigned char *)(a1 + 152) = v30;
      *(__n128 *)uint64_t v25 = v28;
      *(_OWORD *)(v25 + 16) = v29;
      *(unsigned char *)(v25 + 32) = v27;
      if (!(*a3)((__n128 *)(a1 + 120), (__n128 *)(a1 + 80))) {
        return 1;
      }
      uint64_t v32 = *(void *)(a1 + 112);
      __n128 v34 = *v23;
      long long v33 = *(_OWORD *)(a1 + 96);
      long long v35 = *(_OWORD *)(a1 + 136);
      __n128 *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v35;
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a1 + 152);
      *char v24 = v34;
      *(_OWORD *)(a1 + 136) = v33;
      *(unsigned char *)(a1 + 152) = v32;
      if (!(*a3)((__n128 *)(a1 + 80), (__n128 *)(a1 + 40))) {
        return 1;
      }
      uint64_t v36 = *(void *)(a1 + 72);
      __n128 v38 = *(__n128 *)v14;
      long long v37 = *(_OWORD *)(a1 + 56);
      long long v39 = *(_OWORD *)(a1 + 96);
      *(__n128 *)uint64_t v14 = *v23;
      *(_OWORD *)(a1 + 56) = v39;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 112);
      __n128 *v23 = v38;
      *(_OWORD *)(a1 + 96) = v37;
      *(unsigned char *)(a1 + 112) = v36;
LABEL_17:
      if (!(*a3)((__n128 *)v14, (__n128 *)a1)) {
        return 1;
      }
      uint64_t v53 = *(void *)(a1 + 32);
      __n128 v55 = *(__n128 *)a1;
      long long v54 = *(_OWORD *)(a1 + 16);
      long long v56 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)(a1 + 16) = v56;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(v14 + 32);
      *(__n128 *)uint64_t v14 = v55;
      *(_OWORD *)(v14 + 16) = v54;
      BOOL result = 1;
      *(unsigned char *)(v14 + 32) = v53;
      return result;
    default:
      __n128 v40 = (__n128 *)(a1 + 80);
      long long v41 = (__n128 *)(a1 + 40);
      char v42 = (*a3)((__n128 *)(a1 + 40), (__n128 *)a1);
      int v43 = (*a3)((__n128 *)(a1 + 80), (__n128 *)(a1 + 40));
      if (v42)
      {
        if (v43)
        {
          uint64_t v44 = *(void *)(a1 + 32);
          __n128 v46 = *(__n128 *)a1;
          long long v45 = *(_OWORD *)(a1 + 16);
          long long v47 = *(_OWORD *)(a1 + 96);
          *(__n128 *)a1 = *v40;
          *(_OWORD *)(a1 + 16) = v47;
          *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 112);
        }
        else
        {
          uint64_t v71 = *(void *)(a1 + 32);
          __n128 v73 = *(__n128 *)a1;
          long long v72 = *(_OWORD *)(a1 + 16);
          long long v74 = *(_OWORD *)(a1 + 56);
          *(__n128 *)a1 = *v41;
          *(_OWORD *)(a1 + 16) = v74;
          *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 72);
          *long long v41 = v73;
          *(_OWORD *)(a1 + 56) = v72;
          *(unsigned char *)(a1 + 72) = v71;
          if (!(*a3)((__n128 *)(a1 + 80), (__n128 *)(a1 + 40))) {
            goto LABEL_28;
          }
          uint64_t v44 = *(void *)(a1 + 72);
          __n128 v46 = *v41;
          long long v45 = *(_OWORD *)(a1 + 56);
          long long v75 = *(_OWORD *)(a1 + 96);
          *long long v41 = *v40;
          *(_OWORD *)(a1 + 56) = v75;
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 112);
        }
        *__n128 v40 = v46;
        *(_OWORD *)(a1 + 96) = v45;
        *(unsigned char *)(a1 + 112) = v44;
      }
      else if (v43)
      {
        uint64_t v57 = *(void *)(a1 + 72);
        __n128 v59 = *v41;
        long long v58 = *(_OWORD *)(a1 + 56);
        long long v60 = *(_OWORD *)(a1 + 96);
        *long long v41 = *v40;
        *(_OWORD *)(a1 + 56) = v60;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 112);
        *__n128 v40 = v59;
        *(_OWORD *)(a1 + 96) = v58;
        *(unsigned char *)(a1 + 112) = v57;
        if ((*a3)((__n128 *)(a1 + 40), (__n128 *)a1))
        {
          uint64_t v61 = *(void *)(a1 + 32);
          __n128 v63 = *(__n128 *)a1;
          long long v62 = *(_OWORD *)(a1 + 16);
          long long v64 = *(_OWORD *)(a1 + 56);
          *(__n128 *)a1 = *v41;
          *(_OWORD *)(a1 + 16) = v64;
          *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 72);
          *long long v41 = v63;
          *(_OWORD *)(a1 + 56) = v62;
          *(unsigned char *)(a1 + 72) = v61;
        }
      }
LABEL_28:
      uint64_t v76 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v77 = 0;
      int v78 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__n128 *)v76, v40))
    {
      long long v81 = *(_OWORD *)(v76 + 16);
      __n128 v85 = *(__n128 *)v76;
      long long v86 = v81;
      uint64_t v87 = *(void *)(v76 + 32);
      uint64_t v82 = v77;
      do
      {
        uint64_t v83 = a1 + v82;
        long long v84 = *(_OWORD *)(a1 + v82 + 96);
        *(_OWORD *)(v83 + 120) = *(_OWORD *)(a1 + v82 + 80);
        *(_OWORD *)(v83 + 136) = v84;
        *(unsigned char *)(v83 + 152) = *(unsigned char *)(a1 + v82 + 112);
        if (v82 == -80)
        {
          uint64_t v79 = a1;
          goto LABEL_31;
        }
        v82 -= 40;
      }
      while (((*a3)(&v85, (__n128 *)(v83 + 40)) & 1) != 0);
      uint64_t v79 = a1 + v82 + 120;
LABEL_31:
      long long v80 = v86;
      *(__n128 *)uint64_t v79 = v85;
      *(_OWORD *)(v79 + 16) = v80;
      *(unsigned char *)(v79 + 32) = v87;
      if (++v78 == 8) {
        return v76 + 40 == a2;
      }
    }
    __n128 v40 = (__n128 *)v76;
    v77 += 40;
    v76 += 40;
    if (v76 == a2) {
      return 1;
    }
  }
}

__n128 sub_B9FE9C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    if (v11)
    {
      uint64_t v12 = a1[2].n128_i64[0];
      __n128 v13 = *a1;
      __n128 v14 = a1[1];
      char v15 = a3[2].n128_i8[0];
      __n128 v16 = a3[1];
      *a1 = *a3;
      a1[1] = v16;
      a1[2].n128_u8[0] = v15;
LABEL_9:
      *a3 = v13;
      a3[1] = v14;
      a3[2].n128_u8[0] = v12;
      goto LABEL_10;
    }
    uint64_t v27 = a1[2].n128_i64[0];
    __n128 v28 = *a1;
    __n128 v29 = a1[1];
    char v30 = a2[2].n128_i8[0];
    __n128 v31 = a2[1];
    *a1 = *a2;
    a1[1] = v31;
    a1[2].n128_u8[0] = v30;
    *a2 = v28;
    a2[1] = v29;
    a2[2].n128_u8[0] = v27;
    if ((*a5)(a3, a2))
    {
      uint64_t v12 = a2[2].n128_i64[0];
      __n128 v13 = *a2;
      __n128 v14 = a2[1];
      char v32 = a3[2].n128_i8[0];
      __n128 v33 = a3[1];
      *a2 = *a3;
      a2[1] = v33;
      a2[2].n128_u8[0] = v32;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    uint64_t v17 = a2[2].n128_i64[0];
    __n128 v18 = *a2;
    __n128 v19 = a2[1];
    char v20 = a3[2].n128_i8[0];
    __n128 v21 = a3[1];
    *a2 = *a3;
    a2[1] = v21;
    a2[2].n128_u8[0] = v20;
    *a3 = v18;
    a3[1] = v19;
    a3[2].n128_u8[0] = v17;
    if ((*a5)(a2, a1))
    {
      uint64_t v22 = a1[2].n128_i64[0];
      __n128 v23 = *a1;
      __n128 v24 = a1[1];
      char v25 = a2[2].n128_i8[0];
      __n128 v26 = a2[1];
      *a1 = *a2;
      a1[1] = v26;
      a1[2].n128_u8[0] = v25;
      *a2 = v23;
      a2[1] = v24;
      a2[2].n128_u8[0] = v22;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    uint64_t v35 = a3[2].n128_i64[0];
    __n128 v36 = *a3;
    __n128 v37 = a3[1];
    unsigned __int8 v38 = a4[2].n128_u8[0];
    __n128 v39 = a4[1];
    *a3 = *a4;
    a3[1] = v39;
    a3[2].n128_u8[0] = v38;
    *a4 = v36;
    a4[1] = v37;
    a4[2].n128_u8[0] = v35;
    if ((*a5)(a3, a2))
    {
      uint64_t v40 = a2[2].n128_i64[0];
      __n128 v41 = *a2;
      __n128 v42 = a2[1];
      char v43 = a3[2].n128_i8[0];
      __n128 v44 = a3[1];
      *a2 = *a3;
      a2[1] = v44;
      a2[2].n128_u8[0] = v43;
      *a3 = v41;
      a3[1] = v42;
      a3[2].n128_u8[0] = v40;
      if ((*a5)(a2, a1))
      {
        uint64_t v45 = a1[2].n128_i64[0];
        __n128 result = *a1;
        __n128 v46 = a1[1];
        char v47 = a2[2].n128_i8[0];
        __n128 v48 = a2[1];
        *a1 = *a2;
        a1[1] = v48;
        a1[2].n128_u8[0] = v47;
        *a2 = result;
        a2[1] = v46;
        a2[2].n128_u8[0] = v45;
      }
    }
  }
  return result;
}

long long *sub_BA0080(uint64_t a1, long long *a2, long long *a3, unsigned int (**a4)(uint64_t, char *))
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  uint64_t v82 = v4;
  uint64_t v83 = v5;
  __n128 v73 = a3;
  long long v75 = a2;
  uint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  uint64_t v72 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 >= 41 && (unint64_t)v72 >= 0x50)
  {
    int64_t v59 = (unint64_t)(v8 - 2) >> 1;
    int64_t v60 = v59;
    do
    {
      if (v59 >= v60)
      {
        uint64_t v63 = (2 * v60) | 1;
        long long v64 = (long long *)(a1 + 40 * v63);
        if (2 * v60 + 2 < v8 && (*a4)(a1 + 40 * v63, (char *)v64 + 40))
        {
          long long v64 = (long long *)((char *)v64 + 40);
          uint64_t v63 = 2 * v60 + 2;
        }
        uint64_t v65 = (long long *)(a1 + 40 * v60);
        if ((((uint64_t (*)(long long *, long long *))*a4)(v64, v65) & 1) == 0)
        {
          long long v66 = v65[1];
          long long v79 = *v65;
          long long v80 = v66;
          uint64_t v81 = *((void *)v65 + 4);
          do
          {
            __n128 v67 = v64;
            long long v68 = *v64;
            long long v69 = v64[1];
            *((unsigned char *)v65 + 32) = *((unsigned char *)v64 + 32);
            *uint64_t v65 = v68;
            v65[1] = v69;
            if (v59 < v63) {
              break;
            }
            uint64_t v70 = (2 * v63) | 1;
            long long v64 = (long long *)(a1 + 40 * v70);
            uint64_t v71 = 2 * v63 + 2;
            if (v71 < v8 && (*a4)(a1 + 40 * v70, (char *)v64 + 40))
            {
              long long v64 = (long long *)((char *)v64 + 40);
              uint64_t v70 = v71;
            }
            uint64_t v65 = v67;
            uint64_t v63 = v70;
          }
          while (!(*a4)((uint64_t)v64, (char *)&v79));
          long long v61 = v79;
          long long v62 = v80;
          *((unsigned char *)v67 + 32) = v81;
          *__n128 v67 = v61;
          v67[1] = v62;
        }
      }
      BOOL v37 = v60-- <= 0;
    }
    while (!v37);
  }
  uint64_t v9 = v73;
  a3 = v75;
  unint64_t v10 = v72;
  if (v75 != v73)
  {
    if (v72 < 80)
    {
      int v11 = v75;
      do
      {
        if (((unsigned int (*)(long long *, uint64_t, long long *))*a4)(v11, a1, a3))
        {
          uint64_t v12 = *((void *)v11 + 4);
          long long v13 = *v11;
          long long v14 = v11[1];
          char v15 = *(unsigned char *)(a1 + 32);
          long long v16 = *(_OWORD *)(a1 + 16);
          long long *v11 = *(_OWORD *)a1;
          v11[1] = v16;
          *((unsigned char *)v11 + 32) = v15;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v14;
          *(unsigned char *)(a1 + 32) = v12;
        }
        int v11 = (long long *)((char *)v11 + 40);
      }
      while (v11 != v73);
      a3 = v73;
      goto LABEL_32;
    }
    uint64_t v17 = (long long *)(a1 + 40);
    __n128 v18 = v75;
    while (1)
    {
      if (((unsigned int (*)(long long *, uint64_t, long long *))*a4)(v18, a1, a3))
      {
        uint64_t v21 = *((void *)v18 + 4);
        long long v22 = *v18;
        long long v23 = v18[1];
        char v24 = *(unsigned char *)(a1 + 32);
        long long v25 = *(_OWORD *)(a1 + 16);
        *__n128 v18 = *(_OWORD *)a1;
        v18[1] = v25;
        *((unsigned char *)v18 + 32) = v24;
        *(_OWORD *)a1 = v22;
        *(_OWORD *)(a1 + 16) = v23;
        *(unsigned char *)(a1 + 32) = v21;
        if ((unint64_t)v8 < 3)
        {
          uint64_t v27 = v17;
          int64_t v28 = 1;
          if ((((uint64_t (*)(long long *, uint64_t))*a4)(v17, a1) & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned int v26 = (*a4)((uint64_t)v17, (char *)(a1 + 80));
          if (v26) {
            uint64_t v27 = (long long *)(a1 + 80);
          }
          else {
            uint64_t v27 = v17;
          }
          if (v26) {
            int64_t v28 = 2;
          }
          else {
            int64_t v28 = 1;
          }
          if ((((uint64_t (*)(long long *, uint64_t))*a4)(v27, a1) & 1) == 0)
          {
LABEL_24:
            long long v29 = *(_OWORD *)(a1 + 16);
            long long v79 = *(_OWORD *)a1;
            long long v80 = v29;
            uint64_t v81 = *(void *)(a1 + 32);
            uint64_t v30 = a1;
            do
            {
              char v32 = v27;
              long long v33 = *v27;
              long long v34 = v27[1];
              *(unsigned char *)(v30 + 32) = *((unsigned char *)v27 + 32);
              *(_OWORD *)uint64_t v30 = v33;
              *(_OWORD *)(v30 + 16) = v34;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v28) {
                break;
              }
              uint64_t v35 = (2 * v28) | 1;
              uint64_t v27 = (long long *)(a1 + 40 * v35);
              if (2 * v28 + 2 < v8 && (*a4)(a1 + 40 * v35, (char *)v27 + 40))
              {
                uint64_t v27 = (long long *)((char *)v27 + 40);
                uint64_t v35 = 2 * v28 + 2;
              }
              unsigned int v31 = (*a4)((uint64_t)v27, (char *)&v79);
              uint64_t v30 = (uint64_t)v32;
              int64_t v28 = v35;
            }
            while (!v31);
            long long v19 = v79;
            long long v20 = v80;
            *((unsigned char *)v32 + 32) = v81;
            long long *v32 = v19;
            v32[1] = v20;
            uint64_t v9 = v73;
            uint64_t v17 = (long long *)(a1 + 40);
          }
        }
      }
      __n128 v18 = (long long *)((char *)v18 + 40);
      if (v18 == v9)
      {
        a3 = v9;
        unint64_t v10 = v72;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  if (v72 >= 41)
  {
LABEL_35:
    long long v74 = a3;
    int64_t v36 = v10 / 0x28;
    do
    {
      uint64_t v38 = 0;
      long long v76 = *(_OWORD *)a1;
      long long v77 = *(_OWORD *)(a1 + 16);
      uint64_t v78 = *(void *)(a1 + 32);
      uint64_t v39 = a1;
      do
      {
        uint64_t v42 = v39 + 40 * v38 + 40;
        uint64_t v43 = (2 * v38) | 1;
        uint64_t v44 = 2 * v38 + 2;
        if (v44 < v36 && (*a4)(v39 + 40 * v38 + 40, (char *)(v39 + 40 * v38 + 80)))
        {
          v42 += 40;
          uint64_t v43 = v44;
        }
        long long v40 = *(_OWORD *)v42;
        long long v41 = *(_OWORD *)(v42 + 16);
        *(unsigned char *)(v39 + 32) = *(unsigned char *)(v42 + 32);
        *(_OWORD *)uint64_t v39 = v40;
        *(_OWORD *)(v39 + 16) = v41;
        uint64_t v39 = v42;
        uint64_t v38 = v43;
      }
      while (v43 <= (uint64_t)((unint64_t)(v36 - 2) >> 1));
      uint64_t v45 = (long long *)((char *)v75 - 40);
      BOOL v46 = v42 == (void)v75 - 40;
      long long v75 = (long long *)((char *)v75 - 40);
      if (v46)
      {
        *(unsigned char *)(v42 + 32) = v78;
        *(_OWORD *)uint64_t v42 = v76;
        *(_OWORD *)(v42 + 16) = v77;
      }
      else
      {
        long long v47 = *v45;
        long long v48 = v45[1];
        *(unsigned char *)(v42 + 32) = *((unsigned char *)v45 + 32);
        *(_OWORD *)uint64_t v42 = v47;
        *(_OWORD *)(v42 + 16) = v48;
        long long *v45 = v76;
        v45[1] = v77;
        *((unsigned char *)v45 + 32) = v78;
        uint64_t v49 = v42 - a1 + 40;
        if (v49 >= 41)
        {
          unint64_t v50 = (v49 / 0x28uLL - 2) >> 1;
          uint64_t v51 = a1 + 40 * v50;
          if ((*a4)(v51, (char *)v42))
          {
            long long v52 = *(_OWORD *)v42;
            long long v53 = *(_OWORD *)(v42 + 16);
            uint64_t v81 = *(void *)(v42 + 32);
            long long v79 = v52;
            long long v80 = v53;
            do
            {
              uint64_t v54 = v51;
              long long v55 = *(_OWORD *)v51;
              long long v56 = *(_OWORD *)(v51 + 16);
              *(unsigned char *)(v42 + 32) = *(unsigned char *)(v51 + 32);
              *(_OWORD *)uint64_t v42 = v55;
              *(_OWORD *)(v42 + 16) = v56;
              if (!v50) {
                break;
              }
              unint64_t v50 = (v50 - 1) >> 1;
              uint64_t v51 = a1 + 40 * v50;
              uint64_t v42 = v54;
            }
            while ((((uint64_t (*)(uint64_t, long long *))*a4)(v51, &v79) & 1) != 0);
            long long v57 = v80;
            *(_OWORD *)uint64_t v54 = v79;
            *(_OWORD *)(v54 + 16) = v57;
            *(unsigned char *)(v54 + 32) = v81;
          }
        }
      }
      BOOL v37 = v36-- <= 2;
    }
    while (!v37);
    return v74;
  }
  return a3;
}

int64x2_t *sub_BA05BC(uint64_t a1, unint64_t a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(int64x2_t **)a1;
  __n128 result = v9;
  if (__sz > (v8 - (uint64_t)v9) >> 3)
  {
    if (v9)
    {
      *(void *)(a1 + 8) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 61) {
      goto LABEL_43;
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v11 = __sz;
    }
    BOOL v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 61) {
LABEL_43:
    }
      sub_2E00();
    uint64_t v14 = 8 * v13;
    __n128 result = (int64x2_t *)operator new(8 * v13);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = (char *)result + v14;
    char v15 = (uint64_t *)result;
    if (v6 != a3)
    {
      unint64_t v16 = a3 - v6 - 60;
      char v15 = (uint64_t *)result;
      if (v16 < 0xB4) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 / 0x3C + 1;
      unint64_t v18 = v6;
      v6 += 60 * (v17 & 0xFFFFFFFFFFFFFFCLL);
      char v15 = &result->i64[v17 & 0xFFFFFFFFFFFFFFCLL];
      long long v19 = result + 1;
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v21 = vdupq_n_s64(v18);
        v19[-1] = vaddq_s64(v21, (int64x2_t)xmmword_20EF790);
        *long long v19 = vaddq_s64(v21, (int64x2_t)xmmword_20EF7A0);
        v18 += 240;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          *v15++ = v6;
          v6 += 60;
        }
        while (v6 != a3);
      }
    }
    *(void *)(a1 + 8) = v15;
    return result;
  }
  char v24 = *(int64x2_t **)(a1 + 8);
  long long v23 = (int64x2_t **)(a1 + 8);
  long long v22 = v24;
  unint64_t v25 = ((char *)v24 - (char *)v9) >> 3;
  if (v25 < __sz)
  {
    unint64_t v26 = a2 + 60 * v25;
    if (v22 != v9)
    {
      unint64_t v27 = 60 * v25 - 60;
      unint64_t v28 = a2;
      if (v27 < 0xB4) {
        goto LABEL_23;
      }
      unint64_t v29 = v27 / 0x3C + 1;
      __n128 result = (int64x2_t *)((char *)v9 + 8 * (v29 & 0xFFFFFFFFFFFFFFCLL));
      unint64_t v28 = a2 + 60 * (v29 & 0xFFFFFFFFFFFFFFCLL);
      uint64_t v30 = v9 + 1;
      uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFCLL;
      unint64_t v32 = a2;
      do
      {
        int64x2_t v33 = vdupq_n_s64(v32);
        v30[-1] = vaddq_s64(v33, (int64x2_t)xmmword_20EF790);
        int64x2_t *v30 = vaddq_s64(v33, (int64x2_t)xmmword_20EF7A0);
        v32 += 240;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v29 != (v29 & 0xFFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        unint64_t v34 = v28;
        do
        {
          result->i64[0] = v28;
          __n128 result = (int64x2_t *)((char *)result + 8);
          v34 += 60;
          v28 += 60;
        }
        while (v34 != v26);
      }
      __n128 result = *v23;
    }
    uint64_t v35 = result;
    if (v26 == a3) {
      goto LABEL_42;
    }
    unint64_t v36 = a3 - a2 - 60 * v25 - 60;
    if (v36 >= 0xB4)
    {
      unint64_t v46 = v36 / 0x3C + 1;
      unint64_t v37 = v26 + 60 * (v46 & 0xFFFFFFFFFFFFFFCLL);
      uint64_t v35 = (int64x2_t *)((char *)result + 8 * (v46 & 0xFFFFFFFFFFFFFFCLL));
      long long v47 = result + 1;
      uint64_t v48 = v46 & 0xFFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v49 = vdupq_n_s64(v26);
        v47[-1] = vaddq_s64(v49, (int64x2_t)xmmword_20EF790);
        int64x2_t *v47 = vaddq_s64(v49, (int64x2_t)xmmword_20EF7A0);
        v26 += 240;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      if (v46 == (v46 & 0xFFFFFFFFFFFFFFCLL)) {
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v37 = a2 + 60 * v25;
      uint64_t v35 = result;
    }
    do
    {
      v35->i64[0] = v37;
      uint64_t v35 = (int64x2_t *)((char *)v35 + 8);
      v37 += 60;
    }
    while (v37 != a3);
LABEL_42:
    __n128 *v23 = v35;
    return result;
  }
  if (a2 == a3)
  {
    __n128 *v23 = v9;
  }
  else
  {
    unint64_t v38 = a3 - a2 - 60;
    uint64_t v39 = v9;
    if (v38 < 0xB4) {
      goto LABEL_34;
    }
    unint64_t v40 = v38 / 0x3C + 1;
    unint64_t v41 = a2;
    uint64_t v39 = (int64x2_t *)((char *)v9 + 8 * (v40 & 0xFFFFFFFFFFFFFFCLL));
    unint64_t v6 = a2 + 60 * (v40 & 0xFFFFFFFFFFFFFFCLL);
    uint64_t v42 = v9 + 1;
    uint64_t v43 = v40 & 0xFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v44 = vdupq_n_s64(v41);
      v42[-1] = vaddq_s64(v44, (int64x2_t)xmmword_20EF790);
      int64x2_t *v42 = vaddq_s64(v44, (int64x2_t)xmmword_20EF7A0);
      v41 += 240;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      unint64_t v45 = v6;
      do
      {
        v39->i64[0] = v6;
        uint64_t v39 = (int64x2_t *)((char *)v39 + 8);
        v45 += 60;
        v6 += 60;
      }
      while (v45 != a3);
    }
    __n128 *v23 = v39;
  }
  return result;
}

void *sub_BA096C(void *a1, int **a2, int **a3)
{
  sub_BA0A5C(a2, a3, a1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  double v9 = 0.0;
  sub_319A8((uint64_t)(a1 + 3), &v9);
  unint64_t v6 = *a2;
  for (uint64_t i = *a3; v6 != i; ++v6)
  {
    double v9 = (double)*v6 * (double)*v6 + *(double *)(a1[4] - 8);
    sub_319A8((uint64_t)(a1 + 3), &v9);
  }
  return a1;
}

void sub_BA0A1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void *sub_BA0A5C@<X0>(int **a1@<X0>, int **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v11 = 0;
  __n128 result = sub_319A8((uint64_t)a3, &v11);
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v11 = a3;
  if (v7 != v8)
  {
    int v9 = *v7;
    double v10 = (double)*v7;
    for (__n128 result = sub_831688((uint64_t *)&v11, &v10); ++v7 != v8; __n128 result = sub_831688((uint64_t *)&v11, &v10))
    {
      v9 += *v7;
      double v10 = (double)v9;
    }
  }
  return result;
}

void sub_BA0B04(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BA0B28@<X0>(int **a1@<X0>, int **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v11 = 0;
  __n128 result = sub_319A8((uint64_t)a3, &v11);
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v11 = a3;
  if (v7 != v8)
  {
    int v9 = *v7;
    double v10 = (double)*v7;
    for (__n128 result = sub_831688((uint64_t *)&v11, &v10); ++v7 != v8; __n128 result = sub_831688((uint64_t *)&v11, &v10))
    {
      v9 += *v7;
      double v10 = (double)v9;
    }
  }
  return result;
}

void sub_BA0BD0(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_BA0BF4(uint64_t *a1@<X0>, unint64_t *a2@<X1>, int **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v43 = 0;
  int64x2_t v44 = 0;
  __p = 0;
  unint64_t v10 = v9 + 1;
  if (v9 != -1)
  {
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = 8 * v10;
    __p = operator new(8 * v10);
    int64x2_t v44 = (char *)__p + v11;
    bzero(__p, 8 * v9 + 8);
    uint64_t v43 = (char *)__p + v11;
  }
  sub_BA0EF4(a4, v8, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v43 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v12 = *a2;
  unint64_t v13 = *a3;
  uint64_t v43 = 0;
  int64x2_t v44 = 0;
  __p = 0;
  unint64_t v14 = (unint64_t)v13 - v12;
  if (v13 == (int *)v12)
  {
    unint64_t v18 = 0;
    unint64_t v16 = 0;
  }
  else
  {
    if (v14 >= 0x7FFFFFFFFFFFFFFDLL) {
      sub_2E00();
    }
    char v15 = (char *)operator new(2 * v14);
    unint64_t v16 = (int **)v15;
    if (v14 - 4 >= 0xC)
    {
      unint64_t v19 = ((v14 - 4) >> 2) + 1;
      unint64_t v17 = (int *)(v12 + 4 * (v19 & 0x7FFFFFFFFFFFFFFCLL));
      unint64_t v18 = (int **)&v15[8 * (v19 & 0x7FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = (int64x2_t *)(v15 + 16);
      uint64_t v21 = v19 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v22 = vdupq_n_s64(v12);
        v20[-1] = vaddq_s64(v22, (int64x2_t)xmmword_20EF7B0);
        int64x2_t *v20 = vaddq_s64(v22, (int64x2_t)xmmword_20EF7C0);
        v12 += 16;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v19 == (v19 & 0x7FFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v17 = (int *)v12;
      unint64_t v18 = (int **)v15;
    }
    do
      *v18++ = v17++;
    while (v17 != v13);
  }
LABEL_15:
  unint64_t v23 = 126 - 2 * __clz(v18 - v16);
  if (v18 == v16) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_BA1048(v16, v18, (uint64_t)&v45, v24, 1);
  uint64_t v25 = a1[1];
  if (v25)
  {
    unint64_t v26 = 0;
    uint64_t v27 = *a4;
    unint64_t v28 = (int *)*a2;
    do
    {
      uint64_t v29 = *a1;
      double v30 = pow((double)(unint64_t)(2 * *a1 - 1), -(((double)v26 + (double)v26 + 1.0) / (double)(unint64_t)a1[1] + -1.0));
      if ((unint64_t)(v29 + 1) > 1) {
        uint64_t v31 = v29 + 1;
      }
      else {
        uint64_t v31 = 1;
      }
      if ((unint64_t)(v29 + 1) >= 2)
      {
        int v32 = *v16[(unint64_t)(1.0 / (v30 + 1.0) * (double)(unint64_t)(v29 - 1))];
        int64x2_t v33 = *(uint64_t **)(v27 + 24 * v26);
        uint64_t v36 = *v33;
        unint64_t v34 = v33 + 1;
        uint64_t v35 = v36;
        uint64_t v37 = v31 - 1;
        unint64_t v38 = v28;
        do
        {
          void *v34 = v35;
          int v39 = *v38++;
          BOOL v40 = v39 == v32;
          BOOL v41 = v39 <= v32;
          if (v39 < v32) {
            v35 += 2;
          }
          if (v40) {
            ++v35;
          }
          if (v41) {
            void *v34 = v35;
          }
          ++v34;
          --v37;
        }
        while (v37);
      }
      ++v26;
    }
    while (v26 != v25);
  }
  if (v16) {
    operator delete(v16);
  }
}

void sub_BA0EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (v11) {
    operator delete(v11);
  }
  sub_36094(v10);
  _Unwind_Resume(a1);
}

void *sub_BA0EF4(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a2;
    uint64_t v7 = operator new(24 * a2);
    unint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    uint64_t v9 = &v7[v6];
    a1[2] = &v7[v6];
    unint64_t v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if (v11 < 0)
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        sub_2E00();
      }
      uint64_t v12 = 24 * a2;
      do
      {
        *unint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        unint64_t v13 = (char *)operator new(v11);
        *unint64_t v8 = v13;
        v8[1] = v13;
        unint64_t v14 = &v13[8 * (v11 >> 3)];
        v8[2] = v14;
        memcpy(v13, v10, v11);
        v8[1] = v14;
        v8 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      bzero(v7, 24 * ((v6 * 8 - 24) / 0x18uLL) + 24);
    }
    a1[1] = v9;
  }
  return a1;
}

void sub_BA1018(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

int **sub_BA1048(int **result, int **a2, uint64_t a3, uint64_t a4, char a5)
{
  int64_t v11 = result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    int64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          long long v79 = *(a2 - 1);
          long long v80 = *v12;
          if (*v79 < **v12)
          {
            *uint64_t v12 = v79;
            *(a2 - 1) = v80;
          }
          return result;
        case 3uLL:
          uint64_t v81 = *v12;
          uint64_t v82 = v12[1];
          int v83 = *v82;
          long long v84 = *(a2 - 1);
          int v85 = *v84;
          if (*v82 >= **v12)
          {
            if (v85 < v83)
            {
              v12[1] = v84;
              *(a2 - 1) = v82;
              __n128 v103 = *v12;
              __n128 v102 = v12[1];
              if (*v102 < **v12)
              {
                *uint64_t v12 = v102;
                v12[1] = v103;
              }
            }
          }
          else
          {
            if (v85 >= v83)
            {
              *uint64_t v12 = v82;
              v12[1] = v81;
              long long v107 = *(a2 - 1);
              if (*v107 >= *v81) {
                return result;
              }
              v12[1] = v107;
            }
            else
            {
              *uint64_t v12 = v84;
            }
            *(a2 - 1) = v81;
          }
          return result;
        case 4uLL:
          long long v86 = v12 + 1;
          uint64_t v87 = v12[1];
          __n128 v88 = v12 + 2;
          long long v89 = v12[2];
          int v90 = *v87;
          long long v91 = *v12;
          int v92 = *v89;
          if (*v87 >= **v12)
          {
            if (v92 >= v90) {
              goto LABEL_152;
            }
            *long long v86 = v89;
            *__n128 v88 = v87;
            if (*v89 >= *v91)
            {
LABEL_151:
              long long v89 = v87;
LABEL_152:
              long long v108 = *(a2 - 1);
              if (*v108 < *v89)
              {
                *__n128 v88 = v108;
                *(a2 - 1) = v89;
                uint64_t v109 = *v88;
                uint64_t v110 = *v86;
                if (*v109 < *v110)
                {
                  v12[1] = v109;
                  v12[2] = v110;
                  char v111 = *v12;
                  if (*v109 < **v12)
                  {
                    *uint64_t v12 = v109;
                    v12[1] = v111;
                  }
                }
              }
              return result;
            }
            *uint64_t v12 = v89;
            long long v104 = v12 + 1;
          }
          else
          {
            if (v92 >= v90)
            {
              *uint64_t v12 = v87;
              v12[1] = v91;
              if (*v89 >= *v91) {
                goto LABEL_152;
              }
              *long long v86 = v89;
            }
            else
            {
              *uint64_t v12 = v89;
            }
            long long v104 = v12 + 2;
            uint64_t v87 = v91;
          }
          *long long v104 = v91;
          goto LABEL_151;
        case 5uLL:
          return sub_BA1CB8(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        return sub_BA1E58(v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = *(a2 - 1);
    int v17 = *v16;
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v21 = *v12;
      int v22 = **v12;
      unint64_t v23 = v12[v15];
      if (v22 < *v23)
      {
        if (v17 < v22)
        {
          v12[v15] = v16;
          goto LABEL_32;
        }
        v12[v15] = v21;
        *uint64_t v12 = v23;
        uint64_t v36 = *(a2 - 1);
        if (*v36 < *v23)
        {
          *uint64_t v12 = v36;
LABEL_32:
          *(a2 - 1) = v23;
        }
LABEL_33:
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_34;
      }
      if (v17 >= v22) {
        goto LABEL_33;
      }
      *uint64_t v12 = v16;
      *(a2 - 1) = v21;
      unint64_t v26 = v12[v15];
      if (**v12 >= *v26) {
        goto LABEL_33;
      }
      v12[v15] = *v12;
      *uint64_t v12 = v26;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_34:
      uint64_t v37 = *v12;
      int v38 = **v12;
LABEL_57:
      uint64_t v55 = 0;
      do
        long long v56 = v12[++v55];
      while (*v56 < v38);
      long long v57 = &v12[v55];
      long long v58 = a2;
      if (v55 == 1)
      {
        long long v58 = a2;
        do
        {
          if (v57 >= v58) {
            break;
          }
          int64_t v60 = *--v58;
        }
        while (*v60 >= v38);
      }
      else
      {
        do
          int64_t v59 = *--v58;
        while (*v59 >= v38);
      }
      if (v57 >= v58)
      {
        __n128 v67 = v57 - 1;
        if (v57 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v67;
        goto LABEL_75;
      }
      long long v61 = *v58;
      long long v62 = &v12[v55];
      uint64_t v63 = v58;
      do
      {
        *long long v62 = v61;
        *uint64_t v63 = v56;
        int v64 = *v37;
        do
        {
          uint64_t v65 = v62[1];
          ++v62;
          long long v56 = v65;
        }
        while (*v65 < v64);
        do
        {
          long long v66 = *--v63;
          long long v61 = v66;
        }
        while (*v66 >= v64);
      }
      while (v62 < v63);
      __n128 v67 = v62 - 1;
      if (v62 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *__n128 v67 = v37;
      if (v57 < v58) {
        goto LABEL_78;
      }
      BOOL v68 = sub_BA192C(v12, v67);
      uint64_t v12 = v67 + 1;
      __n128 result = (int **)sub_BA192C(v67 + 1, a2);
      if (result)
      {
        a2 = v67;
        if (v68) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v68)
      {
LABEL_78:
        __n128 result = (int **)sub_BA1048(v11, v67, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v67 + 1;
      }
    }
    else
    {
      unint64_t v18 = v12[v15];
      int v19 = *v18;
      uint64_t v20 = *v12;
      if (*v18 >= **v12)
      {
        if (v17 < v19)
        {
          v12[v15] = v16;
          *(a2 - 1) = v18;
          uint64_t v24 = v12[v15];
          uint64_t v25 = *v12;
          if (*v24 < **v12)
          {
            *uint64_t v12 = v24;
            v12[v15] = v25;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          *uint64_t v12 = v18;
          v12[v15] = v20;
          uint64_t v27 = *(a2 - 1);
          if (*v27 >= *v20) {
            goto LABEL_24;
          }
          v12[v15] = v27;
        }
        else
        {
          *uint64_t v12 = v16;
        }
        *(a2 - 1) = v20;
      }
LABEL_24:
      unint64_t v28 = v15 - 1;
      uint64_t v29 = v12[v15 - 1];
      int v30 = *v29;
      uint64_t v31 = v12[1];
      int v32 = *(a2 - 2);
      int v33 = *v32;
      if (*v29 >= *v31)
      {
        if (v33 < v30)
        {
          v12[v28] = v32;
          *(a2 - 2) = v29;
          unint64_t v34 = v12[v28];
          uint64_t v35 = v12[1];
          if (*v34 < *v35)
          {
            v12[1] = v34;
            v12[v28] = v35;
          }
        }
      }
      else
      {
        if (v33 >= v30)
        {
          v12[1] = v29;
          v12[v28] = v31;
          int v39 = *(a2 - 2);
          if (*v39 >= *v31) {
            goto LABEL_38;
          }
          v12[v28] = v39;
        }
        else
        {
          v12[1] = v32;
        }
        *(a2 - 2) = v31;
      }
LABEL_38:
      unint64_t v40 = v15 + 1;
      BOOL v41 = v12[v15 + 1];
      int v42 = *v41;
      uint64_t v43 = v12[2];
      int64x2_t v44 = *(a2 - 3);
      int v45 = *v44;
      if (*v41 >= *v43)
      {
        if (v45 < v42)
        {
          v12[v40] = v44;
          *(a2 - 3) = v41;
          unint64_t v46 = v12[v40];
          long long v47 = v12[2];
          if (*v46 < *v47)
          {
            v12[2] = v46;
            v12[v40] = v47;
          }
        }
      }
      else
      {
        if (v45 >= v42)
        {
          v12[2] = v41;
          v12[v40] = v43;
          uint64_t v48 = *(a2 - 3);
          if (*v48 >= *v43) {
            goto LABEL_47;
          }
          v12[v40] = v48;
        }
        else
        {
          v12[2] = v44;
        }
        *(a2 - 3) = v43;
      }
LABEL_47:
      int64x2_t v49 = v12[v15];
      unint64_t v50 = v12[v28];
      int v51 = *v49;
      long long v52 = v12[v40];
      int v53 = *v52;
      if (*v49 >= *v50)
      {
        if (v53 < v51)
        {
          v12[v15] = v52;
          v12[v40] = v49;
          int64x2_t v49 = v52;
          if (*v52 < *v50)
          {
            v12[v28] = v52;
            v12[v15] = v50;
            int64x2_t v49 = v50;
          }
        }
      }
      else if (v53 >= v51)
      {
        v12[v28] = v49;
        v12[v15] = v50;
        int64x2_t v49 = v50;
        if (*v52 < *v50)
        {
          v12[v15] = v52;
          v12[v40] = v50;
          int64x2_t v49 = v52;
        }
      }
      else
      {
        v12[v28] = v52;
        v12[v40] = v50;
      }
      uint64_t v54 = *v12;
      *uint64_t v12 = v49;
      v12[v15] = v54;
      --a4;
      if (a5) {
        goto LABEL_34;
      }
LABEL_56:
      uint64_t v37 = *v12;
      int v38 = **v12;
      if (**(v12 - 1) < v38) {
        goto LABEL_57;
      }
      if (v38 < **(a2 - 1))
      {
        do
        {
          long long v69 = v12[1];
          ++v12;
        }
        while (v38 >= *v69);
      }
      else
      {
        uint64_t v70 = v12 + 1;
        do
        {
          uint64_t v12 = v70;
          if (v70 >= a2) {
            break;
          }
          ++v70;
        }
        while (v38 >= **v12);
      }
      uint64_t v71 = a2;
      if (v12 < a2)
      {
        uint64_t v71 = a2;
        do
          uint64_t v72 = *--v71;
        while (v38 < *v72);
      }
      if (v12 < v71)
      {
        __n128 v73 = *v12;
        long long v74 = *v71;
        do
        {
          *uint64_t v12 = v74;
          *uint64_t v71 = v73;
          int v75 = *v37;
          do
          {
            long long v76 = v12[1];
            ++v12;
            __n128 v73 = v76;
          }
          while (v75 >= *v76);
          do
          {
            long long v77 = *--v71;
            long long v74 = v77;
          }
          while (v75 < *v77);
        }
        while (v12 < v71);
      }
      uint64_t v78 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        void *v11 = *v78;
      }
      a5 = 0;
      *uint64_t v78 = v37;
    }
  }
  long long v93 = v12 + 1;
  BOOL v95 = v12 == a2 || v93 == a2;
  if (a5)
  {
    if (!v95)
    {
      uint64_t v96 = 0;
      long long v97 = v12;
      do
      {
        char v100 = *v97;
        long long v99 = v97[1];
        long long v97 = v93;
        if (*v99 < *v100)
        {
          uint64_t v101 = v96;
          do
          {
            *(int **)((char *)v12 + v101 + 8) = v100;
            if (!v101)
            {
              __n128 v98 = v12;
              goto LABEL_121;
            }
            char v100 = *(int **)((char *)v12 + v101 - 8);
            v101 -= 8;
          }
          while (*v99 < *v100);
          __n128 v98 = (int **)((char *)v12 + v101 + 8);
LABEL_121:
          *__n128 v98 = v99;
        }
        long long v93 = v97 + 1;
        v96 += 8;
      }
      while (v97 + 1 != a2);
    }
  }
  else if (!v95)
  {
    do
    {
      long long v106 = *v11;
      long long v105 = v11[1];
      int64_t v11 = v93;
      if (*v105 < *v106)
      {
        do
        {
          _DWORD *v93 = v106;
          long long v106 = *(v93 - 2);
          --v93;
        }
        while (*v105 < *v106);
        _DWORD *v93 = v105;
      }
      long long v93 = v11 + 1;
    }
    while (v11 + 1 != a2);
  }
  return result;
}

BOOL sub_BA192C(int **a1, int **a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unint64_t v10 = *(a2 - 1);
      int64_t v11 = *a1;
      if (*v10 < **a1)
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      uint64_t v12 = *a1;
      uint64_t v13 = a1[1];
      int v14 = *v13;
      unint64_t v15 = *(a2 - 1);
      int v16 = *v15;
      if (*v13 >= **a1)
      {
        if (v16 < v14)
        {
          a1[1] = v15;
          *(a2 - 1) = v13;
          uint64_t v25 = *a1;
          uint64_t v24 = a1[1];
          if (*v24 < **a1)
          {
            *a1 = v24;
            a1[1] = v25;
            return 1;
          }
        }
      }
      else
      {
        if (v16 < v14)
        {
          *a1 = v15;
          *(a2 - 1) = v12;
          return 1;
        }
        *a1 = v13;
        a1[1] = v12;
        int v33 = *(a2 - 1);
        if (*v33 < *v12)
        {
          a1[1] = v33;
          *(a2 - 1) = v12;
          return 1;
        }
      }
      return 1;
    case 4:
      int v17 = a1 + 1;
      unint64_t v18 = a1[1];
      int v19 = a1 + 2;
      uint64_t v20 = a1[2];
      int v21 = *v18;
      int v22 = *a1;
      int v23 = *v20;
      if (*v18 < **a1)
      {
        if (v23 >= v21)
        {
          *a1 = v18;
          a1[1] = v22;
          if (*v20 >= *v22) {
            goto LABEL_47;
          }
          *int v17 = v20;
        }
        else
        {
          *a1 = v20;
        }
        unint64_t v26 = a1 + 2;
        unint64_t v18 = v22;
        goto LABEL_45;
      }
      if (v23 >= v21) {
        goto LABEL_47;
      }
      *int v17 = v20;
      *int v19 = v18;
      if (*v20 < *v22)
      {
        *a1 = v20;
        unint64_t v26 = a1 + 1;
LABEL_45:
        *unint64_t v26 = v22;
      }
      uint64_t v20 = v18;
LABEL_47:
      unint64_t v34 = *(a2 - 1);
      if (*v34 >= *v20) {
        return 1;
      }
      *int v19 = v34;
      *(a2 - 1) = v20;
      uint64_t v35 = *v19;
      uint64_t v36 = *v17;
      if (*v35 >= *v36) {
        return 1;
      }
      a1[1] = v35;
      a1[2] = v36;
      uint64_t v37 = *a1;
      if (*v35 >= **a1) {
        return 1;
      }
      *a1 = v35;
      a1[1] = v37;
      return 1;
    case 5:
      sub_BA1CB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v3 = a1 + 2;
      uint64_t v4 = a1[2];
      BOOL v5 = a1 + 1;
      BOOL v6 = a1[1];
      int v7 = *v6;
      unint64_t v8 = *a1;
      int v9 = *v4;
      if (*v6 < **a1)
      {
        if (v9 >= v7)
        {
          *a1 = v6;
          a1[1] = v8;
          if (*v4 >= *v8) {
            goto LABEL_29;
          }
          *BOOL v5 = v4;
        }
        else
        {
          *a1 = v4;
        }
        BOOL v5 = a1 + 2;
        goto LABEL_28;
      }
      if (v9 < v7)
      {
        *BOOL v5 = v4;
        void *v3 = v6;
        if (*v4 < *v8)
        {
          *a1 = v4;
LABEL_28:
          *BOOL v5 = v8;
        }
      }
LABEL_29:
      uint64_t v27 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v28 = 0;
      int v29 = 0;
      while (1)
      {
        int v30 = *v27;
        uint64_t v31 = *v3;
        if (**v27 < *v31) {
          break;
        }
LABEL_38:
        unsigned int v3 = v27;
        v28 += 8;
        if (++v27 == a2) {
          return 1;
        }
      }
      uint64_t v32 = v28;
      do
      {
        *(int **)((char *)a1 + v32 + 24) = v31;
        if (v32 == -16)
        {
          *a1 = v30;
          if (++v29 != 8) {
            goto LABEL_38;
          }
          return v27 + 1 == a2;
        }
        uint64_t v31 = *(int **)((char *)a1 + v32 + 8);
        v32 -= 8;
      }
      while (*v30 < *v31);
      *(int **)((char *)a1 + v32 + 24) = v30;
      if (++v29 != 8) {
        goto LABEL_38;
      }
      return v27 + 1 == a2;
  }
}

int **sub_BA1CB8(int **result, int **a2, int **a3, int **a4, int **a5)
{
  BOOL v5 = *a2;
  int v6 = **a2;
  int v7 = *result;
  unint64_t v8 = *a3;
  int v9 = **a3;
  if (v6 >= **result)
  {
    if (v9 >= v6)
    {
      BOOL v5 = *a3;
      int64_t v11 = *a4;
      if (**a4 >= **a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v8;
    *a3 = v5;
    unint64_t v10 = *result;
    if (**a2 < **result)
    {
      *__n128 result = *a2;
      *a2 = v10;
      BOOL v5 = *a3;
      int64_t v11 = *a4;
      if (**a4 >= **a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v9 >= v6)
    {
      *__n128 result = v5;
      *a2 = v7;
      BOOL v5 = *a3;
      if (**a3 >= *v7) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *__n128 result = v8;
    }
    *a3 = v7;
    BOOL v5 = v7;
  }
LABEL_11:
  int64_t v11 = *a4;
  if (**a4 >= *v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v11;
  *a4 = v5;
  uint64_t v12 = *a2;
  if (**a3 < **a2)
  {
    *a2 = *a3;
    *a3 = v12;
    uint64_t v13 = *result;
    if (**a2 < **result)
    {
      *__n128 result = *a2;
      *a2 = v13;
    }
  }
LABEL_17:
  int v14 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v14;
    unint64_t v15 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v15;
      int v16 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v16;
        int v17 = *result;
        if (**a2 < **result)
        {
          *__n128 result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

int **sub_BA1E58(int **a1, int **a2, int **a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = (char *)a2 - (char *)a1;
  uint64_t v4 = a2 - a1;
  if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v35 = (unint64_t)(v4 - 2) >> 1;
    int64_t v36 = v35;
    do
    {
      if (v35 >= v36)
      {
        uint64_t v37 = (2 * v36) | 1;
        int v38 = &a1[v37];
        if (2 * v36 + 2 >= v4)
        {
          int v42 = &a1[v36];
          uint64_t v43 = *v42;
          if (**v38 >= **v42) {
            goto LABEL_68;
          }
        }
        else
        {
          int v39 = **v38;
          int v40 = *v38[1];
          BOOL v41 = v39 < v40;
          if (v39 > v40) {
            int v40 = **v38;
          }
          if (v41)
          {
            ++v38;
            uint64_t v37 = 2 * v36 + 2;
          }
          int v42 = &a1[v36];
          uint64_t v43 = *v42;
          if (v40 >= **v42)
          {
LABEL_68:
            int64x2_t v44 = *v38;
            while (1)
            {
              int64x2_t *v42 = v44;
              int v42 = v38;
              if (v35 < v37) {
                break;
              }
              uint64_t v48 = (2 * v37) | 1;
              int v38 = &a1[v48];
              uint64_t v37 = 2 * v37 + 2;
              if (v37 < v4)
              {
                int64x2_t v44 = *v38;
                int v45 = **v38;
                int v46 = *v38[1];
                BOOL v47 = v45 < v46;
                if (v45 <= v46) {
                  int v45 = *v38[1];
                }
                if (v47)
                {
                  int64x2_t v44 = v38[1];
                  ++v38;
                }
                else
                {
                  uint64_t v37 = v48;
                }
                if (v45 < *v43) {
                  break;
                }
              }
              else
              {
                int64x2_t v44 = *v38;
                uint64_t v37 = v48;
                if (**v38 < *v43) {
                  break;
                }
              }
            }
            int64x2_t *v42 = v43;
          }
        }
      }
      BOOL v15 = v36-- <= 0;
    }
    while (!v15);
  }
  BOOL v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      int v6 = *a1;
      int v7 = a2;
      do
      {
        unint64_t v8 = *v7;
        if (**v7 < *v6)
        {
          *int v7 = v6;
          *a1 = v8;
          int v6 = v8;
        }
        ++v7;
      }
      while (v7 != a3);
LABEL_37:
      BOOL v5 = a3;
      goto LABEL_38;
    }
    int v9 = a2;
    while (1)
    {
      unint64_t v10 = *v9;
      if (**v9 < **a1)
      {
        void *v9 = *a1;
        *a1 = v10;
        int v11 = *a1[1];
        if (v3 == 16)
        {
          uint64_t v12 = a1 + 1;
          uint64_t v13 = 1;
          if (v11 >= *v10) {
            goto LABEL_26;
          }
        }
        else
        {
          int v14 = *a1[2];
          BOOL v15 = v11 < v14;
          if (v11 <= v14) {
            int v11 = *a1[2];
          }
          if (v15) {
            uint64_t v12 = a1 + 2;
          }
          else {
            uint64_t v12 = a1 + 1;
          }
          if (v15) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v11 >= *v10)
          {
LABEL_26:
            int v16 = *v12;
            int v17 = a1;
            while (1)
            {
              *int v17 = v16;
              int v17 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v21 = (2 * v13) | 1;
              uint64_t v12 = &a1[v21];
              uint64_t v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                int v16 = *v12;
                int v18 = **v12;
                int v19 = *v12[1];
                BOOL v20 = v18 < v19;
                if (v18 <= v19) {
                  int v18 = *v12[1];
                }
                if (v20)
                {
                  int v16 = v12[1];
                  ++v12;
                }
                else
                {
                  uint64_t v13 = v21;
                }
                if (v18 < *v10) {
                  break;
                }
              }
              else
              {
                int v16 = *v12;
                uint64_t v13 = v21;
                if (**v12 < *v10) {
                  break;
                }
              }
            }
            *int v17 = v10;
          }
        }
      }
      if (++v9 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v22 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v23 = 0;
      uint64_t v24 = *a1;
      uint64_t v25 = a1;
      do
      {
        unint64_t v26 = &v25[v23 + 1];
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v28 = 2 * v23 + 2;
        if (v28 < v22 && **v26 < *v26[1])
        {
          ++v26;
          uint64_t v27 = v28;
        }
        int *v25 = *v26;
        uint64_t v25 = v26;
        uint64_t v23 = v27;
      }
      while (v27 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      if (v26 == --a2)
      {
        *unint64_t v26 = v24;
      }
      else
      {
        *unint64_t v26 = *a2;
        *a2 = v24;
        uint64_t v29 = (char *)v26 - (char *)a1 + 8;
        if (v29 >= 9)
        {
          unint64_t v30 = (((unint64_t)v29 >> 3) - 2) >> 1;
          uint64_t v31 = &a1[v30];
          uint64_t v32 = *v31;
          int v33 = *v26;
          if (**v31 < **v26)
          {
            do
            {
              *unint64_t v26 = v32;
              unint64_t v26 = v31;
              if (!v30) {
                break;
              }
              unint64_t v30 = (v30 - 1) >> 1;
              uint64_t v31 = &a1[v30];
              uint64_t v32 = *v31;
            }
            while (**v31 < *v33);
            *unint64_t v26 = v33;
          }
        }
      }
      BOOL v15 = v22-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t sub_BA2240(uint64_t result, char *a2, unsigned int (**a3)(void), uint64_t a4, int a5)
{
  int v11 = (char *)result;
  while (2)
  {
    uint64_t v12 = v11;
LABEL_3:
    int v104 = a5;
    while (1)
    {
      int v11 = v12;
      uint64_t v13 = a2 - v12;
      unint64_t v14 = (a2 - v12) >> 3;
      if (v6 || !v5)
      {
        switch(v14)
        {
          case 0uLL:
          case 1uLL:
            return result;
          case 2uLL:
            __n128 result = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *(void *)v12);
            if (!result) {
              return result;
            }
            uint64_t v76 = *(void *)v12;
            *(void *)uint64_t v12 = *((void *)a2 - 1);
            goto LABEL_145;
          case 3uLL:
            char v77 = ((uint64_t (*)(void, void))*a3)(*((void *)v12 + 1), *(void *)v12);
            __n128 result = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *((void *)v12 + 1));
            if (v77)
            {
              uint64_t v78 = *(void *)v12;
              if (result)
              {
                *(void *)uint64_t v12 = *((void *)a2 - 1);
                *((void *)a2 - 1) = v78;
              }
              else
              {
                *(void *)uint64_t v12 = *((void *)v12 + 1);
                *((void *)v12 + 1) = v78;
                __n128 result = ((uint64_t (*)(void))*a3)(*((void *)a2 - 1));
                if (result)
                {
                  uint64_t v76 = *((void *)v12 + 1);
                  *((void *)v12 + 1) = *((void *)a2 - 1);
LABEL_145:
                  *((void *)a2 - 1) = v76;
                }
              }
            }
            else if (result)
            {
              uint64_t v96 = *((void *)v12 + 1);
              *((void *)v12 + 1) = *((void *)a2 - 1);
              *((void *)a2 - 1) = v96;
              __n128 result = ((uint64_t (*)(void, void))*a3)(*((void *)v12 + 1), *(void *)v12);
LABEL_134:
              if (result)
              {
                uint64_t v97 = *(void *)v12;
                *(void *)uint64_t v12 = *((void *)v12 + 1);
                *((void *)v12 + 1) = v97;
              }
            }
            break;
          case 4uLL:
            return sub_BA2EEC(v12, (void *)v12 + 1, (void *)v12 + 2, (void *)a2 - 1, a3);
          case 5uLL:
            long long v79 = v12 + 16;
            long long v80 = v12 + 24;
            sub_BA2EEC(v12, (void *)v12 + 1, (void *)v12 + 2, (void *)v12 + 3, a3);
            __n128 result = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *((void *)v12 + 3));
            if (!result) {
              return result;
            }
            uint64_t v81 = *v80;
            void *v80 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v81;
            __n128 result = ((uint64_t (*)(void, void))*a3)(*v80, *v79);
            if (!result) {
              return result;
            }
            uint64_t v82 = *v79;
            void *v79 = *v80;
            void *v80 = v82;
            __n128 result = ((uint64_t (*)(void))*a3)();
            if (!result) {
              return result;
            }
            uint64_t v84 = *((void *)v12 + 1);
            uint64_t v83 = *((void *)v12 + 2);
            uint64_t v85 = *(void *)v12;
            *((void *)v12 + 1) = v83;
            *((void *)v12 + 2) = v84;
            __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v83, v85);
            goto LABEL_134;
          default:
            JUMPOUT(0);
        }
        return result;
      }
      if (v13 <= 191)
      {
        long long v86 = v12 + 8;
        BOOL v88 = v12 == a2 || v86 == a2;
        if (a5)
        {
          if (!v88)
          {
            uint64_t v89 = 0;
            int v90 = v12;
            do
            {
              uint64_t v93 = *(void *)v90;
              uint64_t v92 = *((void *)v90 + 1);
              int v90 = v86;
              __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v92, v93);
              if (result)
              {
                uint64_t v94 = *(void *)v90;
                uint64_t v95 = v89;
                do
                {
                  *(void *)&v11[v95 + 8] = *(void *)&v11[v95];
                  if (!v95)
                  {
                    long long v91 = v11;
                    goto LABEL_121;
                  }
                  __n128 result = ((uint64_t (*)(uint64_t, void))*a3)(v94, *(void *)&v11[v95 - 8]);
                  v95 -= 8;
                }
                while ((result & 1) != 0);
                long long v91 = &v11[v95 + 8];
LABEL_121:
                *(void *)long long v91 = v94;
              }
              long long v86 = v90 + 8;
              v89 += 8;
            }
            while (v90 + 8 != a2);
          }
        }
        else if (!v88)
        {
          do
          {
            uint64_t v99 = *(void *)v11;
            uint64_t v98 = *((void *)v11 + 1);
            int v11 = v86;
            __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v98, v99);
            if (result)
            {
              uint64_t v100 = *(void *)v11;
              uint64_t v101 = v11;
              do
              {
                __n128 v102 = v101;
                uint64_t v103 = *((void *)v101 - 1);
                v101 -= 8;
                *(void *)__n128 v102 = v103;
                __n128 result = ((uint64_t (*)(uint64_t, void))*a3)(v100, *((void *)v102 - 2));
              }
              while ((result & 1) != 0);
              *(void *)uint64_t v101 = v100;
            }
            long long v86 = v11 + 8;
          }
          while (v11 + 8 != a2);
        }
        return result;
      }
      if (!a4)
      {
        if (v12 != a2)
        {
          return (uint64_t)sub_BA3040(v12, a2, a2, (unsigned int (**)(void, uint64_t))a3);
        }
        return result;
      }
      unint64_t v15 = v14 >> 1;
      int v16 = *a3;
      if ((unint64_t)v13 >= 0x401)
      {
        uint64_t v17 = 8 * v15;
        char v18 = ((uint64_t (*)(void, void))v16)(*(void *)&v11[8 * v15], *(void *)v11);
        int v19 = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *(void *)&v11[8 * v15]);
        if (v18)
        {
          uint64_t v20 = *(void *)v11;
          if (v19)
          {
            *(void *)int v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v20;
          }
          else
          {
            *(void *)int v11 = *(void *)&v11[8 * v15];
            *(void *)&v11[8 * v15] = v20;
            if ((*a3)(*((void *)a2 - 1)))
            {
              uint64_t v28 = *(void *)&v11[8 * v15];
              *(void *)&v11[8 * v15] = *((void *)a2 - 1);
              *((void *)a2 - 1) = v28;
            }
          }
        }
        else if (v19)
        {
          uint64_t v24 = *(void *)&v11[8 * v15];
          *(void *)&v11[8 * v15] = *((void *)a2 - 1);
          *((void *)a2 - 1) = v24;
          if (((unsigned int (*)(void, void))*a3)(*(void *)&v11[8 * v15], *(void *)v11))
          {
            uint64_t v25 = *(void *)v11;
            *(void *)int v11 = *(void *)&v11[8 * v15];
            *(void *)&v11[8 * v15] = v25;
          }
        }
        unint64_t v29 = v15 - 1;
        uint64_t v30 = 8 * (v15 - 1);
        char v31 = ((uint64_t (*)(void, void))*a3)(*(void *)&v11[v30], *((void *)v11 + 1));
        int v32 = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 2), *(void *)&v11[v30]);
        if (v31)
        {
          uint64_t v33 = *((void *)v11 + 1);
          if (v32)
          {
            *((void *)v11 + 1) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v33;
          }
          else
          {
            *((void *)v11 + 1) = *(void *)&v11[v30];
            *(void *)&v11[v30] = v33;
            if ((*a3)(*((void *)a2 - 2)))
            {
              uint64_t v38 = *(void *)&v11[v30];
              *(void *)&v11[v30] = *((void *)a2 - 2);
              *((void *)a2 - 2) = v38;
            }
          }
        }
        else if (v32)
        {
          uint64_t v34 = *(void *)&v11[v30];
          *(void *)&v11[v30] = *((void *)a2 - 2);
          *((void *)a2 - 2) = v34;
          if (((unsigned int (*)(void, void))*a3)(*(void *)&v11[v30], *((void *)v11 + 1)))
          {
            uint64_t v35 = *((void *)v11 + 1);
            *((void *)v11 + 1) = *(void *)&v11[v30];
            *(void *)&v11[v30] = v35;
          }
        }
        unint64_t v39 = v15 + 1;
        uint64_t v40 = 8 * (v15 + 1);
        char v41 = ((uint64_t (*)(void, void))*a3)(*(void *)&v11[v40], *((void *)v11 + 2));
        int v42 = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 3), *(void *)&v11[v40]);
        if (v41)
        {
          uint64_t v43 = *((void *)v11 + 2);
          if (v42)
          {
            *((void *)v11 + 2) = *((void *)a2 - 3);
            *((void *)a2 - 3) = v43;
          }
          else
          {
            *((void *)v11 + 2) = *(void *)&v11[v40];
            *(void *)&v11[v40] = v43;
            if ((*a3)(*((void *)a2 - 3)))
            {
              uint64_t v46 = *(void *)&v11[v40];
              *(void *)&v11[v40] = *((void *)a2 - 3);
              *((void *)a2 - 3) = v46;
            }
          }
        }
        else if (v42)
        {
          uint64_t v44 = *(void *)&v11[v40];
          *(void *)&v11[v40] = *((void *)a2 - 3);
          *((void *)a2 - 3) = v44;
          if (((unsigned int (*)(void, void))*a3)(*(void *)&v11[v40], *((void *)v11 + 2)))
          {
            uint64_t v45 = *((void *)v11 + 2);
            *((void *)v11 + 2) = *(void *)&v11[v40];
            *(void *)&v11[v40] = v45;
          }
        }
        char v47 = ((uint64_t (*)(void, void))*a3)(*(void *)&v11[v17], *(void *)&v11[8 * v29]);
        int v48 = ((uint64_t (*)(void, void))*a3)(*(void *)&v11[8 * v39], *(void *)&v11[v17]);
        if (v47)
        {
          uint64_t v49 = *(void *)&v11[8 * v29];
          if (v48)
          {
            *(void *)&v11[8 * v29] = *(void *)&v11[v40];
            *(void *)&v11[v40] = v49;
          }
          else
          {
            *(void *)&v11[8 * v29] = *(void *)&v11[v17];
            *(void *)&v11[v17] = v49;
            if ((*a3)(*(void *)&v11[8 * v39]))
            {
              uint64_t v52 = *(void *)&v11[v17];
              *(void *)&v11[v17] = *(void *)&v11[v40];
              *(void *)&v11[v40] = v52;
            }
          }
        }
        else if (v48)
        {
          uint64_t v50 = *(void *)&v11[v17];
          *(void *)&v11[v17] = *(void *)&v11[v40];
          *(void *)&v11[v40] = v50;
          if (((unsigned int (*)(void))*a3)())
          {
            uint64_t v51 = *(void *)&v11[v30];
            *(void *)&v11[v30] = *(void *)&v11[v17];
            *(void *)&v11[v17] = v51;
          }
        }
        uint64_t v53 = *(void *)v11;
        *(void *)int v11 = *(void *)&v11[v17];
        *(void *)&v11[v17] = v53;
        a5 = v104;
        --a4;
        if (v104)
        {
LABEL_35:
          uint64_t v37 = *(void *)v11;
          goto LABEL_56;
        }
      }
      else
      {
        char v21 = ((uint64_t (*)(void, void))v16)(*(void *)v12, *(void *)&v12[8 * v15]);
        int v22 = ((uint64_t (*)(void, void))*a3)(*((void *)a2 - 1), *(void *)v12);
        if (v21)
        {
          uint64_t v23 = *(void *)&v12[8 * v15];
          if (v22)
          {
            *(void *)&v12[8 * v15] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v23;
            --a4;
            if (a5) {
              goto LABEL_35;
            }
            goto LABEL_55;
          }
          *(void *)&v12[8 * v15] = *(void *)v12;
          *(void *)uint64_t v12 = v23;
          if ((*a3)(*((void *)a2 - 1)))
          {
            uint64_t v36 = *(void *)v12;
            *(void *)uint64_t v12 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v36;
          }
        }
        else if (v22)
        {
          uint64_t v26 = *(void *)v12;
          *(void *)uint64_t v12 = *((void *)a2 - 1);
          *((void *)a2 - 1) = v26;
          if (((unsigned int (*)(void, void))*a3)(*(void *)v12, *(void *)&v12[8 * v15]))
          {
            uint64_t v27 = *(void *)&v12[8 * v15];
            *(void *)&v12[8 * v15] = *(void *)v12;
            *(void *)uint64_t v12 = v27;
            --a4;
            if (a5) {
              goto LABEL_35;
            }
            goto LABEL_55;
          }
        }
        --a4;
        if (a5) {
          goto LABEL_35;
        }
      }
LABEL_55:
      char v54 = ((uint64_t (*)(void, void))*a3)(*((void *)v11 - 1), *(void *)v11);
      uint64_t v37 = *(void *)v11;
      if ((v54 & 1) == 0)
      {
        __n128 result = ((uint64_t (*)(void, void))*a3)(*(void *)v11, *((void *)a2 - 1));
        if (result)
        {
          uint64_t v12 = v11;
          do
          {
            uint64_t v68 = *((void *)v12 + 1);
            v12 += 8;
            __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v37, v68);
          }
          while ((result & 1) == 0);
        }
        else
        {
          long long v69 = v11 + 8;
          do
          {
            uint64_t v12 = v69;
            if (v69 >= a2) {
              break;
            }
            v69 += 8;
            __n128 result = ((uint64_t (*)(uint64_t, void))*a3)(v37, *(void *)v12);
          }
          while (!result);
        }
        uint64_t v70 = a2;
        if (v12 < a2)
        {
          uint64_t v70 = a2;
          do
          {
            uint64_t v71 = *((void *)v70 - 1);
            v70 -= 8;
            __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v37, v71);
          }
          while ((result & 1) != 0);
        }
        while (v12 < v70)
        {
          uint64_t v72 = *(void *)v12;
          *(void *)uint64_t v12 = *(void *)v70;
          *(void *)uint64_t v70 = v72;
          do
          {
            uint64_t v73 = *((void *)v12 + 1);
            v12 += 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v37, v73));
          do
          {
            uint64_t v74 = *((void *)v70 - 1);
            v70 -= 8;
            __n128 result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v37, v74);
          }
          while ((result & 1) != 0);
        }
        int v75 = v12 - 8;
        BOOL v5 = v12 - 8 >= v11;
        BOOL v6 = v12 - 8 == v11;
        if (v12 - 8 != v11) {
          *(void *)int v11 = *(void *)v75;
        }
        a5 = 0;
        *(void *)int v75 = v37;
        goto LABEL_3;
      }
LABEL_56:
      uint64_t v55 = 0;
      do
      {
        char v56 = ((uint64_t (*)(void, uint64_t))*a3)(*(void *)&v11[v55 + 8], v37);
        v55 += 8;
      }
      while ((v56 & 1) != 0);
      long long v57 = &v11[v55];
      long long v58 = a2;
      if (v55 == 8)
      {
        long long v58 = a2;
        do
        {
          if (v57 >= v58) {
            break;
          }
          uint64_t v60 = *((void *)v58 - 1);
          v58 -= 8;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v37) & 1) == 0);
      }
      else
      {
        do
        {
          uint64_t v59 = *((void *)v58 - 1);
          v58 -= 8;
        }
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v37));
      }
      if (v57 >= v58)
      {
        long long v66 = v57 - 8;
        if (v57 - 8 == v11) {
          goto LABEL_74;
        }
LABEL_73:
        *(void *)int v11 = *(void *)v66;
        goto LABEL_74;
      }
      long long v61 = &v11[v55];
      long long v62 = v58;
      do
      {
        uint64_t v63 = *(void *)v61;
        *(void *)long long v61 = *(void *)v62;
        *(void *)long long v62 = v63;
        do
        {
          uint64_t v64 = *((void *)v61 + 1);
          v61 += 8;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v37) & 1) != 0);
        do
        {
          uint64_t v65 = *((void *)v62 - 1);
          v62 -= 8;
        }
        while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v37));
      }
      while (v61 < v62);
      long long v66 = v61 - 8;
      if (v61 - 8 != v11) {
        goto LABEL_73;
      }
LABEL_74:
      *(void *)long long v66 = v37;
      if (v57 < v58) {
        goto LABEL_77;
      }
      BOOL v67 = sub_BA2B8C(v11, v66, a3);
      uint64_t v12 = v66 + 8;
      __n128 result = sub_BA2B8C((void *)v66 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v67)
      {
LABEL_77:
        __n128 result = sub_BA2240(v11, v66, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v66 + 8;
        goto LABEL_3;
      }
    }
    a2 = v66;
    if (!v67) {
      continue;
    }
    return result;
  }
}

BOOL sub_BA2B8C(void *a1, void *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      char v9 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      int v10 = ((uint64_t (*)(void, void))*a3)(*(a2 - 1), a1[1]);
      if (v9)
      {
        uint64_t v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            uint64_t v28 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v28;
          }
        }
      }
      else if (v10)
      {
        uint64_t v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        int v19 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
        {
          uint64_t v25 = *a1;
          *a1 = a1[1];
          a1[1] = v25;
        }
      }
      return 1;
    case 4:
      sub_BA2EEC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v12 = a1 + 2;
      uint64_t v13 = a1 + 3;
      sub_BA2EEC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(void, void))*a3)(*(a2 - 1), a1[3])) {
        return 1;
      }
      uint64_t v14 = *v13;
      void *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(void, void))*a3)(*v13, *v12)) {
        return 1;
      }
      uint64_t v15 = *v12;
      *uint64_t v12 = *v13;
      void *v13 = v15;
      if (!((unsigned int (*)(void))*a3)()) {
        return 1;
      }
      uint64_t v17 = a1[1];
      uint64_t v16 = a1[2];
      uint64_t v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      int v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      char v20 = ((uint64_t (*)(void, void))*a3)(a1[1], *a1);
      char v21 = a1 + 2;
      int v22 = ((uint64_t (*)(void, void))*a3)(a1[2], a1[1]);
      if (v20)
      {
        uint64_t v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          uint64_t v29 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v29))
          {
            uint64_t v30 = a1[1];
            a1[1] = a1[2];
            a1[2] = v30;
          }
        }
      }
      else if (v22)
      {
        uint64_t v26 = a1[1];
        a1[1] = a1[2];
        a1[2] = v26;
        if (((unsigned int (*)(void))*a3)())
        {
          uint64_t v27 = *a1;
          *a1 = a1[1];
          a1[1] = v27;
        }
      }
      char v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v32 = 0;
      int v33 = 0;
      break;
  }
  while (!((unsigned int (*)(void, void))*a3)(*v31, *v21))
  {
LABEL_35:
    char v21 = v31;
    v32 += 8;
    if (++v31 == a2) {
      return 1;
    }
  }
  uint64_t v34 = *v31;
  uint64_t v35 = v32;
  do
  {
    uint64_t v36 = (char *)a1 + v35;
    *(void *)((char *)a1 + v35 + 24) = *(void *)((char *)a1 + v35 + 16);
    if (v35 == -16)
    {
      *a1 = v34;
      if (++v33 != 8) {
        goto LABEL_35;
      }
      return v31 + 1 == a2;
    }
    v35 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, void))*a3)(v34, *((void *)v36 + 1)) & 1) != 0);
  *(void *)((char *)a1 + v35 + 24) = v34;
  if (++v33 != 8) {
    goto LABEL_35;
  }
  return v31 + 1 == a2;
}

uint64_t sub_BA2EEC(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  char v10 = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
  int v11 = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
  if (v10)
  {
    uint64_t v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(void, void))*a5)(*a2, *a1))
    {
      uint64_t v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

void *sub_BA3040(void *a1, void *a2, void *a3, unsigned int (**a4)(void, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v46 = a2;
    uint64_t v47 = a2 - a1;
    uint64_t v44 = a3;
    uint64_t v45 = (char *)a2 - (char *)a1;
    if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v45 >= 0x10)
    {
      int64_t v35 = (unint64_t)(v47 - 2) >> 1;
      int64_t v36 = v35;
      do
      {
        if (v35 >= v36)
        {
          uint64_t v37 = (2 * v36) | 1;
          uint64_t v38 = &a1[v37];
          if (2 * v36 + 2 < v47 && (*a4)(*v38, v38[1]))
          {
            ++v38;
            uint64_t v37 = 2 * v36 + 2;
          }
          unint64_t v39 = &a1[v36];
          if ((((uint64_t (*)(void, void))*a4)(*v38, *v39) & 1) == 0)
          {
            uint64_t v40 = *v39;
            do
            {
              char v41 = v39;
              unint64_t v39 = v38;
              *char v41 = *v38;
              if (v35 < v37) {
                break;
              }
              uint64_t v42 = (2 * v37) | 1;
              uint64_t v38 = &a1[v42];
              uint64_t v43 = 2 * v37 + 2;
              if (v43 < v47 && (*a4)(*v38, v38[1]))
              {
                ++v38;
                uint64_t v42 = v43;
              }
              uint64_t v37 = v42;
            }
            while (!(*a4)(*v38, v40));
            *unint64_t v39 = v40;
          }
        }
        BOOL v21 = v36-- <= 0;
      }
      while (!v21);
    }
    uint64_t v7 = v45;
    uint64_t v6 = v46;
    a3 = v46;
    uint64_t v8 = v44;
    if (v46 != v44)
    {
      if (v45 >= 16)
      {
        char v9 = a1 + 1;
        while (1)
        {
          if (((unsigned int (*)(void, void, void *))*a4)(*v6, *a1, a3))
          {
            uint64_t v11 = *v6;
            *uint64_t v6 = *a1;
            *a1 = v11;
            if (v7 == 16)
            {
              uint64_t v12 = v9;
              int64_t v13 = 1;
              if ((((uint64_t (*)(void))*a4)(*v9) & 1) == 0) {
                goto LABEL_23;
              }
            }
            else
            {
              unsigned int v14 = (*a4)(a1[1], a1[2]);
              if (v14) {
                uint64_t v12 = a1 + 2;
              }
              else {
                uint64_t v12 = v9;
              }
              if (v14) {
                int64_t v13 = 2;
              }
              else {
                int64_t v13 = 1;
              }
              if ((((uint64_t (*)(void, void))*a4)(*v12, *a1) & 1) == 0)
              {
LABEL_23:
                uint64_t v15 = *a1;
                uint64_t v16 = a1;
                do
                {
                  uint64_t v17 = v16;
                  uint64_t v16 = v12;
                  *uint64_t v17 = *v12;
                  if ((uint64_t)((unint64_t)(v47 - 2) >> 1) < v13) {
                    break;
                  }
                  uint64_t v18 = (2 * v13) | 1;
                  uint64_t v12 = &a1[v18];
                  uint64_t v19 = 2 * v13 + 2;
                  if (v19 < v47 && (*a4)(*v12, v12[1]))
                  {
                    ++v12;
                    uint64_t v18 = v19;
                  }
                  int64_t v13 = v18;
                }
                while (!(*a4)(*v12, v15));
                *uint64_t v16 = v15;
                uint64_t v8 = v44;
                uint64_t v7 = v45;
                char v9 = a1 + 1;
              }
            }
          }
          if (++v6 == v8) {
            goto LABEL_30;
          }
        }
      }
      do
      {
        if (((unsigned int (*)(void, void, void *))*a4)(*v6, *a1, a3))
        {
          uint64_t v10 = *v6;
          *uint64_t v6 = *a1;
          *a1 = v10;
        }
        ++v6;
      }
      while (v6 != v44);
LABEL_30:
      a3 = v8;
    }
    if (v7 >= 9)
    {
      int v48 = a3;
      uint64_t v20 = (unint64_t)v7 >> 3;
      while (1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *a1;
        uint64_t v24 = a1;
        do
        {
          uint64_t v25 = &v24[v22 + 1];
          uint64_t v26 = (2 * v22) | 1;
          uint64_t v27 = 2 * v22 + 2;
          if (v27 < v20 && (*a4)(v24[v22 + 1], v24[v22 + 2]))
          {
            ++v25;
            uint64_t v26 = v27;
          }
          *uint64_t v24 = *v25;
          uint64_t v24 = v25;
          uint64_t v22 = v26;
        }
        while (v26 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        uint64_t v28 = v46 - 1;
        if (v25 != --v46)
        {
          void *v25 = *v28;
          void *v28 = v23;
          uint64_t v30 = (char *)v25 - (char *)a1 + 8;
          if (v30 < 9) {
            goto LABEL_34;
          }
          unint64_t v31 = (((unint64_t)v30 >> 3) - 2) >> 1;
          uint64_t v32 = &a1[v31];
          if (!(*a4)(*v32, *v25)) {
            goto LABEL_34;
          }
          uint64_t v23 = *v25;
          do
          {
            int v33 = v25;
            uint64_t v25 = v32;
            *int v33 = *v32;
            if (!v31) {
              break;
            }
            unint64_t v31 = (v31 - 1) >> 1;
            uint64_t v32 = &a1[v31];
          }
          while ((((uint64_t (*)(void, uint64_t))*a4)(*v32, v23) & 1) != 0);
        }
        void *v25 = v23;
LABEL_34:
        BOOL v21 = v20-- <= 2;
        if (v21) {
          return v48;
        }
      }
    }
  }
  return a3;
}

__n128 *sub_BA3478(char **a1, __n128 *__src, __n128 *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = (__n128 *)a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v15 = (__n128 *)*a1;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - *a1) >> 3) + 1;
    if (v16 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)v15) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x333333333333333) {
      unint64_t v18 = 0x666666666666666;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v39 = a1 + 2;
    if (v18)
    {
      if (v18 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v19 = (__n128 *)operator new(40 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    int64_t v35 = v19;
    int64_t v36 = &v19->n128_i8[8 * (((char *)v4 - (char *)v15) >> 3)];
    __dst = v36;
    uint64_t v38 = (char *)v19 + 40 * v18;
    sub_99C440((uint64_t)&v35, a3);
    uint64_t v22 = v36;
    uint64_t v23 = (__n128 *)*a1;
    uint64_t v24 = v36;
    if (*a1 != (char *)v4)
    {
      uint64_t v25 = v4;
      uint64_t v26 = v36;
      do
      {
        long long v27 = *(long long *)((char *)&v25[-3] + 8);
        long long v28 = *(long long *)((char *)&v25[-2] + 8);
        uint64_t v24 = v26 - 40;
        *(v26 - 8) = v25[-1].n128_i8[8];
        *(_OWORD *)(v26 - 24) = v28;
        *(_OWORD *)(v26 - 40) = v27;
        uint64_t v25 = (__n128 *)((char *)v25 - 40);
        v26 -= 40;
      }
      while (v25 != v23);
    }
    int64_t v36 = v24;
    uint64_t v29 = (__n128 *)a1[1];
    uint64_t v30 = (char *)__dst;
    int64_t v31 = (char *)v29 - (char *)v4;
    if (v29 != v4)
    {
      memmove(__dst, v4, v31 - 7);
      uint64_t v24 = v36;
      uint64_t v4 = (__n128 *)a1[1];
    }
    uint64_t v32 = (__n128 *)*a1;
    *a1 = v24;
    a1[1] = &v30[v31];
    int v33 = a1[2];
    a1[2] = v38;
    __dst = v4;
    uint64_t v38 = v33;
    int64_t v35 = v32;
    int64_t v36 = (char *)v32;
    if (v4 != v32) {
      __dst = (char *)v32 + ((char *)v4 - (char *)v32 - 40) % 0x28uLL;
    }
    if (v32) {
      operator delete(v32);
    }
    return (__n128 *)v22;
  }
  else if (__src == v6)
  {
    __n128 v20 = *a3;
    __n128 v21 = a3[1];
    __src[2].n128_u64[0] = a3[2].n128_u64[0];
    *__src = v20;
    __src[1] = v21;
    a1[1] = &__src[2].n128_i8[8];
  }
  else
  {
    uint64_t v8 = (__n128 *)((char *)__src + 40);
    char v9 = &v6[-3].n128_i8[8];
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0x28)
    {
      do
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *((_OWORD *)v9 + 1);
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *(_OWORD *)uint64_t v10 = v11;
        *((_OWORD *)v10 + 1) = v12;
        v9 += 40;
        v10 += 40;
      }
      while (v9 < (char *)v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, (char *)v6 - (char *)v8 - 7);
    }
    __n128 v13 = *a3;
    __n128 v14 = a3[1];
    v4[2].n128_u8[0] = a3[2].n128_u8[0];
    *uint64_t v4 = v13;
    v4[1] = v14;
  }
  return v4;
}

void sub_BA36E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    __n128 v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    __n128 v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_BA3744(int **a1, int **a2, uint64_t a3, uint64_t a4, char a5)
{
int **sub_BA3C30(int **result, int **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v6 = v4;
        uint64_t v4 = v2;
        int v7 = *((_DWORD *)v6 + 6);
        if (v7)
        {
          if (v7 == 1)
          {
            int v8 = **v4;
            int v9 = *((_DWORD *)v6 + 2);
            if (!v9) {
              goto LABEL_10;
            }
          }
          else
          {
            int v8 = 0x7FFFFFFF;
            int v9 = *((_DWORD *)v6 + 2);
            if (!v9)
            {
LABEL_10:
              int v10 = (*v6)[1];
              if (v8 < v10) {
                goto LABEL_21;
              }
              goto LABEL_19;
            }
          }
        }
        else
        {
          int v8 = (*v4)[1];
          int v9 = *((_DWORD *)v6 + 2);
          if (!v9) {
            goto LABEL_10;
          }
        }
        if (v9 == 1)
        {
          int v10 = **v6;
          if (v8 < v10) {
            goto LABEL_21;
          }
        }
        else
        {
          int v10 = 0x7FFFFFFF;
          if (v8 != 0x7FFFFFFF) {
            goto LABEL_21;
          }
        }
LABEL_19:
        if (v7 >= v9 || v10 < v8) {
          goto LABEL_6;
        }
LABEL_21:
        long long v11 = v6[2];
        *uint64_t v4 = *v6;
        *((_DWORD *)v4 + 2) = *((_DWORD *)v6 + 2);
        char v5 = result;
        if (v6 == result) {
          goto LABEL_5;
        }
        uint64_t v12 = v3;
        if (v7 != 1)
        {
          uint64_t v12 = v3;
          uint64_t v13 = v3;
          if (v7)
          {
            while (1)
            {
              uint64_t v26 = (char *)result + v13;
              uint64_t v27 = (uint64_t)result + v13 - 16;
              int v28 = *(_DWORD *)((char *)result + v13 - 8);
              if (v28)
              {
                if (v28 == 1)
                {
                  if (v7 >= 1 || **(_DWORD **)v27 != 0x7FFFFFFF) {
                    goto LABEL_64;
                  }
                }
                else if (v7 >= v28)
                {
                  goto LABEL_64;
                }
              }
              else if (v7 >= 0 || *(_DWORD *)(*(void *)v27 + 4) != 0x7FFFFFFF)
              {
LABEL_64:
                char v5 = (int **)((char *)result + v13);
                goto LABEL_5;
              }
              *(void *)uint64_t v26 = *(void *)v27;
              *((_DWORD *)v26 + 2) = *(_DWORD *)((char *)result + v13 - 8);
              v13 -= 16;
              if (!v13) {
                goto LABEL_4;
              }
            }
          }
          while (1)
          {
            __n128 v21 = (char *)result + v12;
            int v22 = (int **)((char *)result + v12 - 16);
            int v23 = *(_DWORD *)((char *)result + v12 - 8);
            if (v23 == 1)
            {
              int v24 = **v22;
              int v25 = v11[1];
              if (v25 < v24) {
                goto LABEL_42;
              }
            }
            else if (v23)
            {
              int v24 = 0x7FFFFFFF;
              int v25 = v11[1];
              if (v25 != 0x7FFFFFFF) {
                goto LABEL_42;
              }
            }
            else
            {
              int v24 = (*v22)[1];
              int v25 = v11[1];
              if (v25 < v24) {
                goto LABEL_42;
              }
            }
            if (v23 < 1 || v24 < v25) {
              goto LABEL_65;
            }
LABEL_42:
            *(void *)__n128 v21 = *v22;
            *((_DWORD *)v21 + 2) = *(_DWORD *)((char *)result + v12 - 8);
            v12 -= 16;
            if (!v12) {
              goto LABEL_4;
            }
          }
        }
        while (1)
        {
          uint64_t v15 = (char *)result + v12;
          unint64_t v16 = (int **)((char *)result + v12 - 16);
          int v17 = *(_DWORD *)((char *)result + v12 - 8);
          if (v17 != 1) {
            break;
          }
          int v18 = **v16;
          int v19 = *v11;
          if (*v11 >= v18) {
            goto LABEL_25;
          }
LABEL_29:
          *(void *)uint64_t v15 = *v16;
          *((_DWORD *)v15 + 2) = *(_DWORD *)((char *)result + v12 - 8);
          v12 -= 16;
          if (!v12)
          {
LABEL_4:
            char v5 = result;
            goto LABEL_5;
          }
        }
        if (!v17)
        {
          int v18 = (*v16)[1];
          int v19 = *v11;
          if (*v11 >= v18) {
            goto LABEL_25;
          }
          goto LABEL_29;
        }
        int v18 = 0x7FFFFFFF;
        int v19 = *v11;
        if (*v11 != 0x7FFFFFFF) {
          goto LABEL_29;
        }
LABEL_25:
        if (v17 >= 2 && v18 >= v19) {
          goto LABEL_29;
        }
LABEL_65:
        char v5 = (int **)((char *)result + v12);
LABEL_5:
        *char v5 = v11;
        *((_DWORD *)v5 + 2) = v7;
LABEL_6:
        uint64_t v2 = v4 + 2;
        v3 += 16;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD **sub_BA3EC0(_DWORD **result, _DWORD **a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    while (result + 2 != a2)
    {
      uint64_t v3 = result;
      __n128 result = v2;
      int v4 = v3[6];
      if (v4)
      {
        if (v4 == 1)
        {
          int v5 = **result;
          int v6 = v3[2];
          if (!v6) {
            goto LABEL_15;
          }
        }
        else
        {
          int v5 = 0x7FFFFFFF;
          int v6 = v3[2];
          if (!v6)
          {
LABEL_15:
            int v7 = *(_DWORD *)(*(void *)v3 + 4);
            if (v5 < v7) {
              goto LABEL_20;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        int v5 = (*result)[1];
        int v6 = v3[2];
        if (!v6) {
          goto LABEL_15;
        }
      }
      if (v6 == 1)
      {
        int v7 = **(_DWORD **)v3;
        if (v5 < v7) {
          goto LABEL_20;
        }
      }
      else
      {
        int v7 = 0x7FFFFFFF;
        if (v5 != 0x7FFFFFFF) {
          goto LABEL_20;
        }
      }
LABEL_18:
      if (v4 >= v6 || v7 < v5) {
        goto LABEL_5;
      }
LABEL_20:
      int v8 = *result;
      if (v4 == 1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              int v9 = v3;
              *((void *)v3 + 2) = *(void *)v3;
              v3[6] = v3[2];
              int v14 = *(v3 - 2);
              if (v14 != 1) {
                break;
              }
              int v15 = **((_DWORD **)v3 - 2);
              v3 -= 4;
              int v16 = *v8;
              if (*v8 >= v15) {
                goto LABEL_42;
              }
            }
            if (v14) {
              break;
            }
            int v15 = *(_DWORD *)(*((void *)v3 - 2) + 4);
            v3 -= 4;
            int v16 = *v8;
            if (*v8 >= v15) {
              goto LABEL_42;
            }
          }
          int v15 = 0x7FFFFFFF;
          v3 -= 4;
          int v16 = *v8;
          if (*v8 == 0x7FFFFFFF)
          {
LABEL_42:
            if (v14 < 2 || v15 < v16) {
              goto LABEL_4;
            }
          }
        }
      }
      int v9 = result;
      if (!v4)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              int v9 = v3;
              *((void *)v3 + 2) = *(void *)v3;
              v3[6] = v3[2];
              int v10 = *(v3 - 2);
              if (v10 != 1) {
                break;
              }
              int v11 = **((_DWORD **)v3 - 2);
              v3 -= 4;
              int v12 = v8[1];
              if (v12 >= v11) {
                goto LABEL_29;
              }
            }
            if (v10) {
              break;
            }
            int v11 = *(_DWORD *)(*((void *)v3 - 2) + 4);
            v3 -= 4;
            int v12 = v8[1];
            if (v12 >= v11) {
              goto LABEL_29;
            }
          }
          int v11 = 0x7FFFFFFF;
          v3 -= 4;
          int v12 = v8[1];
          if (v12 == 0x7FFFFFFF)
          {
LABEL_29:
            if (v10 < 1 || v11 < v12) {
              goto LABEL_4;
            }
          }
        }
      }
      do
      {
        *(void *)int v9 = *((void *)v9 - 2);
        v9[2] = *(v9 - 2);
        int v20 = *(v9 - 6);
        if (v20)
        {
          if (v20 == 1) {
            int v18 = **((_DWORD **)v9 - 4);
          }
          else {
            int v18 = 0x7FFFFFFF;
          }
        }
        else
        {
          int v18 = *(_DWORD *)(*((void *)v9 - 4) + 4);
        }
        v9 -= 4;
      }
      while (v4 < v20 && v18 == 0x7FFFFFFF);
LABEL_4:
      *(void *)int v9 = v8;
      v9[2] = v4;
LABEL_5:
      uint64_t v2 = result + 2;
    }
  }
  return result;
}

uint64_t sub_BA40E8(long long *a1, _DWORD **a2, _DWORD **a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  if (!v3)
  {
    int v4 = (*a2)[1];
    int v5 = *((_DWORD *)a1 + 2);
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if (v3 != 1)
  {
    int v4 = 0x7FFFFFFF;
    int v5 = *((_DWORD *)a1 + 2);
    if (!v5) {
      goto LABEL_10;
    }
LABEL_6:
    if (v5 == 1)
    {
      int v6 = **(_DWORD **)a1;
      if (v4 < v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int v6 = 0x7FFFFFFF;
      if (v4 != 0x7FFFFFFF) {
        goto LABEL_15;
      }
    }
    goto LABEL_13;
  }
  int v4 = **a2;
  int v5 = *((_DWORD *)a1 + 2);
  if (v5) {
    goto LABEL_6;
  }
LABEL_10:
  int v6 = *(_DWORD *)(*(void *)a1 + 4);
  if (v4 < v6) {
    goto LABEL_15;
  }
LABEL_13:
  if (v3 < v5 && v6 >= v4)
  {
LABEL_15:
    int v7 = *((_DWORD *)a3 + 2);
    if (v7)
    {
      if (v7 == 1)
      {
        int v8 = **a3;
        if (!v3)
        {
LABEL_28:
          int v11 = (*a2)[1];
          if (v8 < v11) {
            goto LABEL_33;
          }
LABEL_31:
          if (v7 < v3 && v11 >= v8) {
            goto LABEL_33;
          }
          long long v29 = *a1;
          int v15 = *((_DWORD *)a2 + 2);
          *(void *)a1 = *a2;
          *((_DWORD *)a1 + 2) = v15;
          *a2 = (_DWORD *)v29;
          *((_DWORD *)a2 + 2) = DWORD2(v29);
          int v16 = *((_DWORD *)a3 + 2);
          if (v16)
          {
            if (v16 == 1)
            {
              int v17 = **a3;
              int v18 = *((_DWORD *)a2 + 2);
              if (!v18)
              {
LABEL_62:
                int v24 = (*a2)[1];
                if (v17 < v24) {
                  goto LABEL_70;
                }
LABEL_68:
                uint64_t v13 = 1;
                if (v16 >= v18 || v24 < v17) {
                  return v13;
                }
                goto LABEL_70;
              }
            }
            else
            {
              int v17 = 0x7FFFFFFF;
              int v18 = *((_DWORD *)a2 + 2);
              if (!v18) {
                goto LABEL_62;
              }
            }
          }
          else
          {
            int v17 = (*a3)[1];
            int v18 = *((_DWORD *)a2 + 2);
            if (!v18) {
              goto LABEL_62;
            }
          }
          if (v18 == 1)
          {
            int v24 = **a2;
            if (v17 >= v24) {
              goto LABEL_68;
            }
          }
          else
          {
            int v24 = 0x7FFFFFFF;
            if (v17 == 0x7FFFFFFF) {
              goto LABEL_68;
            }
          }
LABEL_70:
          long long v31 = *(_OWORD *)a2;
          int v26 = *((_DWORD *)a3 + 2);
          *a2 = *a3;
          *((_DWORD *)a2 + 2) = v26;
          *a3 = (_DWORD *)v31;
          *((_DWORD *)a3 + 2) = DWORD2(v31);
          return 2;
        }
      }
      else
      {
        int v8 = 0x7FFFFFFF;
        if (!v3) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      int v8 = (*a3)[1];
      if (!v3) {
        goto LABEL_28;
      }
    }
    if (v3 == 1)
    {
      int v11 = **a2;
      if (v8 >= v11) {
        goto LABEL_31;
      }
    }
    else
    {
      int v11 = 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        goto LABEL_31;
      }
    }
LABEL_33:
    long long v28 = *a1;
    int v12 = *((_DWORD *)a3 + 2);
    *(void *)a1 = *a3;
    *((_DWORD *)a1 + 2) = v12;
    *a3 = (_DWORD *)v28;
    *((_DWORD *)a3 + 2) = DWORD2(v28);
    return 1;
  }
  int v9 = *((_DWORD *)a3 + 2);
  if (v9)
  {
    if (v9 == 1)
    {
      int v10 = **a3;
      if (!v3)
      {
LABEL_44:
        int v19 = (*a2)[1];
        if (v10 < v19) {
          goto LABEL_49;
        }
        goto LABEL_47;
      }
    }
    else
    {
      int v10 = 0x7FFFFFFF;
      if (!v3) {
        goto LABEL_44;
      }
    }
  }
  else
  {
    int v10 = (*a3)[1];
    if (!v3) {
      goto LABEL_44;
    }
  }
  if (v3 == 1)
  {
    int v19 = **a2;
    if (v10 < v19) {
      goto LABEL_49;
    }
  }
  else
  {
    int v19 = 0x7FFFFFFF;
    if (v10 != 0x7FFFFFFF) {
      goto LABEL_49;
    }
  }
LABEL_47:
  uint64_t v13 = 0;
  if (v9 >= v3 || v19 < v10) {
    return v13;
  }
LABEL_49:
  long long v30 = *(_OWORD *)a2;
  int v20 = *((_DWORD *)a3 + 2);
  *a2 = *a3;
  *((_DWORD *)a2 + 2) = v20;
  *a3 = (_DWORD *)v30;
  *((_DWORD *)a3 + 2) = DWORD2(v30);
  int v21 = *((_DWORD *)a2 + 2);
  if (v21)
  {
    if (v21 == 1)
    {
      int v22 = **a2;
      int v23 = *((_DWORD *)a1 + 2);
      if (!v23)
      {
LABEL_65:
        int v25 = *(_DWORD *)(*(void *)a1 + 4);
        if (v22 < v25) {
          goto LABEL_74;
        }
LABEL_72:
        uint64_t v13 = 1;
        if (v21 >= v23 || v25 < v22) {
          return v13;
        }
        goto LABEL_74;
      }
    }
    else
    {
      int v22 = 0x7FFFFFFF;
      int v23 = *((_DWORD *)a1 + 2);
      if (!v23) {
        goto LABEL_65;
      }
    }
  }
  else
  {
    int v22 = (*a2)[1];
    int v23 = *((_DWORD *)a1 + 2);
    if (!v23) {
      goto LABEL_65;
    }
  }
  if (v23 == 1)
  {
    int v25 = **(_DWORD **)a1;
    if (v22 >= v25) {
      goto LABEL_72;
    }
  }
  else
  {
    int v25 = 0x7FFFFFFF;
    if (v22 == 0x7FFFFFFF) {
      goto LABEL_72;
    }
  }
LABEL_74:
  long long v32 = *a1;
  int v27 = *((_DWORD *)a2 + 2);
  *(void *)a1 = *a2;
  *((_DWORD *)a1 + 2) = v27;
  *a2 = (_DWORD *)v32;
  *((_DWORD *)a2 + 2) = DWORD2(v32);
  return 2;
}

_DWORD *sub_BA4494(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(int **)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      int v4 = *v2;
      int v5 = *(a2 - 2);
      if (!v5)
      {
LABEL_10:
        int v6 = *(_DWORD *)(*((void *)a2 - 2) + 4);
        if (v4 < v6) {
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
    else
    {
      int v4 = 0x7FFFFFFF;
      int v5 = *(a2 - 2);
      if (!v5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v4 = v2[1];
    int v5 = *(a2 - 2);
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 == 1)
  {
    int v6 = **((_DWORD **)a2 - 2);
    if (v4 < v6) {
      goto LABEL_15;
    }
  }
  else
  {
    int v6 = 0x7FFFFFFF;
    if (v4 != 0x7FFFFFFF)
    {
LABEL_15:
      int v7 = (_DWORD *)(a1 + 16);
      while (1)
      {
        int v8 = v7;
        if (v3)
        {
          if (v3 == 1)
          {
            int v9 = *v2;
            int v10 = v7[2];
            if (v10) {
              goto LABEL_21;
            }
          }
          else
          {
            int v9 = 0x7FFFFFFF;
            int v10 = v7[2];
            if (v10)
            {
LABEL_21:
              if (v10 == 1)
              {
                int v11 = **(_DWORD **)v7;
                if (v9 < v11) {
                  goto LABEL_30;
                }
              }
              else
              {
                int v11 = 0x7FFFFFFF;
                if (v9 != 0x7FFFFFFF) {
                  goto LABEL_30;
                }
              }
              goto LABEL_28;
            }
          }
        }
        else
        {
          int v9 = v2[1];
          int v10 = v7[2];
          if (v10) {
            goto LABEL_21;
          }
        }
        int v11 = *(_DWORD *)(*(void *)v7 + 4);
        if (v9 < v11) {
          goto LABEL_30;
        }
LABEL_28:
        v7 += 4;
        if (v3 < v10 && v11 >= v9) {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_13:
  if (v3 < v5 && v6 >= v4) {
    goto LABEL_15;
  }
  unint64_t v25 = a1 + 16;
  do
  {
    int v8 = (_DWORD *)v25;
    if (v25 >= (unint64_t)a2) {
      break;
    }
    if (v3)
    {
      if (v3 == 1)
      {
        int v26 = *v2;
        int v27 = *(_DWORD *)(v25 + 8);
        if (v27) {
          goto LABEL_86;
        }
      }
      else
      {
        int v26 = 0x7FFFFFFF;
        int v27 = *(_DWORD *)(v25 + 8);
        if (v27)
        {
LABEL_86:
          if (v27 == 1)
          {
            int v28 = **(_DWORD **)v25;
            if (v26 < v28) {
              break;
            }
          }
          else
          {
            int v28 = 0x7FFFFFFF;
            if (v26 != 0x7FFFFFFF) {
              break;
            }
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      int v26 = v2[1];
      int v27 = *(_DWORD *)(v25 + 8);
      if (v27) {
        goto LABEL_86;
      }
    }
    int v28 = *(_DWORD *)(*(void *)v25 + 4);
    if (v26 < v28) {
      break;
    }
LABEL_93:
    v25 += 16;
  }
  while (v3 >= v27 || v28 < v26);
LABEL_30:
  if (v8 < a2)
  {
    while (1)
    {
      while (1)
      {
        a2 -= 4;
        if (v3) {
          break;
        }
        int v12 = v2[1];
        int v13 = a2[2];
        if (v13) {
          goto LABEL_36;
        }
LABEL_40:
        int v14 = *(_DWORD *)(*(void *)a2 + 4);
        if (v12 >= v14)
        {
LABEL_43:
          if (v3 >= v13 || v14 < v12) {
            goto LABEL_75;
          }
        }
      }
      if (v3 != 1)
      {
        int v12 = 0x7FFFFFFF;
        int v13 = a2[2];
        if (v13) {
          goto LABEL_36;
        }
        goto LABEL_40;
      }
      int v12 = *v2;
      int v13 = a2[2];
      if (!v13) {
        goto LABEL_40;
      }
LABEL_36:
      if (v13 == 1)
      {
        int v14 = **(_DWORD **)a2;
        if (v12 >= v14) {
          goto LABEL_43;
        }
      }
      else
      {
        int v14 = 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          goto LABEL_43;
        }
      }
    }
  }
LABEL_75:
  if (v8 < a2)
  {
    long long v29 = *(_OWORD *)v8;
    int v15 = *(_DWORD **)a2;
    v8[2] = a2[2];
    *(void *)int v8 = v15;
    a2[2] = DWORD2(v29);
    *(void *)a2 = v29;
    int v16 = v8 + 4;
    while (1)
    {
      int v8 = v16;
      if (v3)
      {
        if (v3 == 1)
        {
          int v17 = *v2;
          int v18 = v16[2];
          if (!v18) {
            goto LABEL_56;
          }
        }
        else
        {
          int v17 = 0x7FFFFFFF;
          int v18 = v16[2];
          if (!v18)
          {
LABEL_56:
            int v19 = *(_DWORD *)(*(void *)v16 + 4);
            if (v17 < v19) {
              goto LABEL_61;
            }
            goto LABEL_59;
          }
        }
      }
      else
      {
        int v17 = v2[1];
        int v18 = v16[2];
        if (!v18) {
          goto LABEL_56;
        }
      }
      if (v18 == 1)
      {
        int v19 = **(_DWORD **)v16;
        if (v17 < v19) {
          goto LABEL_61;
        }
      }
      else
      {
        int v19 = 0x7FFFFFFF;
        if (v17 != 0x7FFFFFFF) {
          goto LABEL_61;
        }
      }
LABEL_59:
      v16 += 4;
      if (v3 < v18 && v19 >= v17)
      {
        while (1)
        {
LABEL_61:
          while (1)
          {
            a2 -= 4;
            if (v3) {
              break;
            }
            int v20 = v2[1];
            int v21 = a2[2];
            if (v21) {
              goto LABEL_66;
            }
LABEL_70:
            int v22 = *(_DWORD *)(*(void *)a2 + 4);
            if (v20 >= v22)
            {
LABEL_73:
              if (v3 >= v21 || v22 < v20) {
                goto LABEL_75;
              }
            }
          }
          if (v3 != 1)
          {
            int v20 = 0x7FFFFFFF;
            int v21 = a2[2];
            if (v21) {
              goto LABEL_66;
            }
            goto LABEL_70;
          }
          int v20 = *v2;
          int v21 = a2[2];
          if (!v21) {
            goto LABEL_70;
          }
LABEL_66:
          if (v21 == 1)
          {
            int v22 = **(_DWORD **)a2;
            if (v20 >= v22) {
              goto LABEL_73;
            }
          }
          else
          {
            int v22 = 0x7FFFFFFF;
            if (v20 == 0x7FFFFFFF) {
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
  if (v8 - 4 != (_DWORD *)a1)
  {
    uint64_t v23 = *((void *)v8 - 2);
    *(_DWORD *)(a1 + 8) = *(v8 - 2);
    *(void *)a1 = v23;
  }
  *((void *)v8 - 2) = v2;
  *(v8 - 2) = v3;
  return v8;
}

_DWORD *sub_BA4844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = *(int **)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    uint64_t v5 = a1 + v2;
    int v6 = *(_DWORD *)(a1 + v2 + 24);
    if (v6)
    {
      if (v6 == 1)
      {
        int v7 = **(_DWORD **)(v5 + 16);
        if (!v4) {
          goto LABEL_12;
        }
      }
      else
      {
        int v7 = 0x7FFFFFFF;
        if (!v4)
        {
LABEL_12:
          int v8 = v3[1];
          if (v7 < v8) {
            goto LABEL_2;
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
      int v7 = *(_DWORD *)(*(void *)(v5 + 16) + 4);
      if (!v4) {
        goto LABEL_12;
      }
    }
    if (v4 == 1)
    {
      int v8 = *v3;
      if (v7 < *v3) {
        goto LABEL_2;
      }
    }
    else
    {
      int v8 = 0x7FFFFFFF;
      if (v7 != 0x7FFFFFFF) {
        goto LABEL_2;
      }
    }
LABEL_15:
    if (v6 >= v4 || v8 < v7) {
      break;
    }
LABEL_2:
    v2 += 16;
  }
  unint64_t v9 = a1 + v2 + 16;
  int v10 = (_DWORD **)(a2 - 16);
  if (v2)
  {
    while (1)
    {
      int v11 = v10;
      int v12 = *((_DWORD *)v10 + 2);
      if (v12)
      {
        if (v12 == 1)
        {
          int v13 = **v10;
          if (v4) {
            goto LABEL_23;
          }
        }
        else
        {
          int v13 = 0x7FFFFFFF;
          if (v4)
          {
LABEL_23:
            if (v4 == 1)
            {
              int v14 = *v3;
              if (v13 < *v3) {
                goto LABEL_49;
              }
            }
            else
            {
              int v14 = 0x7FFFFFFF;
              if (v13 != 0x7FFFFFFF) {
                goto LABEL_49;
              }
            }
            goto LABEL_30;
          }
        }
      }
      else
      {
        int v13 = (*v10)[1];
        if (v4) {
          goto LABEL_23;
        }
      }
      int v14 = v3[1];
      if (v13 < v14) {
        goto LABEL_49;
      }
LABEL_30:
      v10 -= 2;
      if (v12 < v4 && v14 >= v13) {
        goto LABEL_49;
      }
    }
  }
  while (2)
  {
    if (v9 < (unint64_t)(v10 + 2))
    {
      int v11 = v10;
      int v15 = *((_DWORD *)v10 + 2);
      if (v15)
      {
        if (v15 == 1)
        {
          int v16 = **v10;
          if (!v4)
          {
LABEL_42:
            int v17 = v3[1];
            if (v16 < v17) {
              goto LABEL_49;
            }
            goto LABEL_45;
          }
        }
        else
        {
          int v16 = 0x7FFFFFFF;
          if (!v4) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        int v16 = (*v10)[1];
        if (!v4) {
          goto LABEL_42;
        }
      }
      if (v4 == 1)
      {
        int v17 = *v3;
        if (v16 < *v3) {
          goto LABEL_49;
        }
      }
      else
      {
        int v17 = 0x7FFFFFFF;
        if (v16 != 0x7FFFFFFF) {
          goto LABEL_49;
        }
      }
LABEL_45:
      v10 -= 2;
      if (v15 < v4 && v17 >= v16) {
        goto LABEL_49;
      }
      continue;
    }
    break;
  }
  int v11 = v10 + 2;
LABEL_49:
  int v18 = (_DWORD *)v9;
  if (v9 < (unint64_t)v11)
  {
    int v19 = v11;
    do
    {
      long long v31 = *(_OWORD *)v18;
      uint64_t v20 = (uint64_t)*v19;
      __n128 v18[2] = *((_DWORD *)v19 + 2);
      *(void *)int v18 = v20;
      *((_DWORD *)v19 + 2) = DWORD2(v31);
      *int v19 = (_DWORD *)v31;
      int v21 = v18 + 4;
      do
      {
        do
        {
          while (1)
          {
            while (1)
            {
              int v18 = v21;
              int v22 = v21[2];
              if (!v22)
              {
                int v23 = *(_DWORD *)(*(void *)v21 + 4);
                if (v4) {
                  goto LABEL_58;
                }
                goto LABEL_62;
              }
              if (v22 == 1) {
                break;
              }
              int v23 = 0x7FFFFFFF;
              if (v4) {
                goto LABEL_58;
              }
LABEL_62:
              int v24 = v3[1];
              v21 += 4;
              if (v23 >= v24) {
                goto LABEL_65;
              }
            }
            int v23 = **(_DWORD **)v21;
            if (!v4) {
              goto LABEL_62;
            }
LABEL_58:
            if (v4 != 1) {
              break;
            }
            int v24 = *v3;
            v21 += 4;
            if (v23 >= *v3) {
              goto LABEL_65;
            }
          }
          int v24 = 0x7FFFFFFF;
          v21 += 4;
        }
        while (v23 != 0x7FFFFFFF);
LABEL_65:
        ;
      }
      while (v22 < v4 && v24 >= v23);
      unint64_t v25 = v19 - 2;
      do
      {
        int v19 = v25;
        int v26 = *((_DWORD *)v25 + 2);
        if (v26)
        {
          if (v26 == 1)
          {
            int v27 = **v25;
            if (!v4) {
              goto LABEL_77;
            }
          }
          else
          {
            int v27 = 0x7FFFFFFF;
            if (!v4)
            {
LABEL_77:
              int v28 = v3[1];
              if (v27 < v28) {
                break;
              }
              goto LABEL_80;
            }
          }
        }
        else
        {
          int v27 = (*v25)[1];
          if (!v4) {
            goto LABEL_77;
          }
        }
        if (v4 == 1)
        {
          int v28 = *v3;
          if (v27 < *v3) {
            break;
          }
        }
        else
        {
          int v28 = 0x7FFFFFFF;
          if (v27 != 0x7FFFFFFF) {
            break;
          }
        }
LABEL_80:
        v25 -= 2;
      }
      while (v26 >= v4 || v28 < v27);
    }
    while (v18 < (_DWORD *)v19);
  }
  if (v18 - 4 != (_DWORD *)a1)
  {
    uint64_t v29 = *((void *)v18 - 2);
    *(_DWORD *)(a1 + 8) = *(v18 - 2);
    *(void *)a1 = v29;
  }
  *((void *)v18 - 2) = v3;
  *(v18 - 2) = v4;
  return v18 - 4;
}

BOOL sub_BA4B8C(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      __n128 v36 = (int **)(a2 - 16);
      int v37 = *((_DWORD *)a2 - 2);
      if (v37)
      {
        if (v37 == 1)
        {
          int v38 = **v36;
          int v39 = *((_DWORD *)a1 + 2);
          if (!v39) {
            goto LABEL_71;
          }
LABEL_80:
          if (v39 == 1)
          {
            int v40 = **(_DWORD **)a1;
            if (v38 < v40) {
              goto LABEL_86;
            }
          }
          else
          {
            int v40 = 0x7FFFFFFF;
            if (v38 != 0x7FFFFFFF) {
              goto LABEL_86;
            }
          }
LABEL_84:
          if (v37 >= v39 || v40 < v38) {
            return result;
          }
LABEL_86:
          long long v42 = *(_OWORD *)a1;
          int v41 = *((_DWORD *)a2 - 2);
          *(void *)a1 = *v36;
          *((_DWORD *)a1 + 2) = v41;
          *__n128 v36 = (int *)v42;
          *((_DWORD *)a2 - 2) = DWORD2(v42);
          return result;
        }
        int v38 = 0x7FFFFFFF;
        int v39 = *((_DWORD *)a1 + 2);
        if (v39) {
          goto LABEL_80;
        }
      }
      else
      {
        int v38 = (*v36)[1];
        int v39 = *((_DWORD *)a1 + 2);
        if (v39) {
          goto LABEL_80;
        }
      }
LABEL_71:
      int v40 = *(_DWORD *)(*(void *)a1 + 4);
      if (v38 < v40) {
        goto LABEL_86;
      }
      goto LABEL_84;
    case 3:
      sub_BA40E8((long long *)a1, (_DWORD **)a1 + 2, (_DWORD **)a2 - 2);
      return 1;
    case 4:
      sub_BA5040((long long *)a1, (_DWORD **)a1 + 2, (_DWORD **)a1 + 4, (uint64_t)(a2 - 16));
      return 1;
    case 5:
      sub_BA52A0((long long *)a1, (_DWORD **)a1 + 2, (_DWORD **)a1 + 4, (_DWORD *)a1 + 12, (uint64_t)(a2 - 16));
      return 1;
    default:
      int v6 = a1 + 32;
      sub_BA40E8((long long *)a1, (_DWORD **)a1 + 2, (_DWORD **)a1 + 4);
      int v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        int v11 = *((_DWORD *)v7 + 2);
        if (!v11)
        {
          int v12 = *(_DWORD *)(*(void *)v7 + 4);
          int v13 = *((_DWORD *)v6 + 2);
          if (v13) {
            goto LABEL_16;
          }
          goto LABEL_11;
        }
        if (v11 != 1)
        {
          int v12 = 0x7FFFFFFF;
          int v13 = *((_DWORD *)v6 + 2);
          if (v13) {
            goto LABEL_16;
          }
LABEL_11:
          int v14 = *(_DWORD *)(*(void *)v6 + 4);
          if (v12 < v14) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
        int v12 = **(_DWORD **)v7;
        int v13 = *((_DWORD *)v6 + 2);
        if (!v13) {
          goto LABEL_11;
        }
LABEL_16:
        if (v13 == 1)
        {
          int v14 = **(_DWORD **)v6;
          if (v12 < v14) {
            goto LABEL_22;
          }
        }
        else
        {
          int v14 = 0x7FFFFFFF;
          if (v12 != 0x7FFFFFFF) {
            goto LABEL_22;
          }
        }
LABEL_20:
        if (v11 >= v13 || v14 < v12) {
          goto LABEL_7;
        }
LABEL_22:
        int v15 = *(int **)v7;
        *(void *)int v7 = *(void *)v6;
        *((_DWORD *)v7 + 2) = *((_DWORD *)v6 + 2);
        int v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v16 = v8;
        if (v11 != 1)
        {
          uint64_t v16 = v8;
          uint64_t v17 = v8;
          if (v11)
          {
            while (1)
            {
              long long v30 = &a1[v17];
              uint64_t v31 = (uint64_t)&a1[v17 + 16];
              int v32 = *(_DWORD *)&a1[v17 + 24];
              if (v32)
              {
                if (v32 == 1)
                {
                  if (v11 >= 1 || **(_DWORD **)v31 != 0x7FFFFFFF) {
                    goto LABEL_65;
                  }
                }
                else if (v11 >= v32)
                {
                  goto LABEL_65;
                }
              }
              else if (v11 >= 0 || *(_DWORD *)(*(void *)v31 + 4) != 0x7FFFFFFF)
              {
LABEL_65:
                long long v35 = &a1[v17];
                goto LABEL_67;
              }
              *((void *)v30 + 4) = *(void *)v31;
              *((_DWORD *)v30 + 10) = *(_DWORD *)&a1[v17 + 24];
              v17 -= 16;
              if (v17 == -32) {
                goto LABEL_5;
              }
            }
          }
          while (1)
          {
            unint64_t v25 = &a1[v16];
            int v26 = (int **)&a1[v16 + 16];
            int v27 = *(_DWORD *)&a1[v16 + 24];
            if (v27 == 1)
            {
              int v28 = **v26;
              int v29 = v15[1];
              if (v29 < v28) {
                goto LABEL_43;
              }
            }
            else if (v27)
            {
              int v28 = 0x7FFFFFFF;
              int v29 = v15[1];
              if (v29 != 0x7FFFFFFF) {
                goto LABEL_43;
              }
            }
            else
            {
              int v28 = (*v26)[1];
              int v29 = v15[1];
              if (v29 < v28) {
                goto LABEL_43;
              }
            }
            if (v27 < 1 || v28 < v29) {
              goto LABEL_66;
            }
LABEL_43:
            *((void *)v25 + 4) = *v26;
            *((_DWORD *)v25 + 10) = *(_DWORD *)&a1[v16 + 24];
            v16 -= 16;
            if (v16 == -32) {
              goto LABEL_5;
            }
          }
        }
        while (1)
        {
          int v19 = &a1[v16];
          uint64_t v20 = (int **)&a1[v16 + 16];
          int v21 = *(_DWORD *)&a1[v16 + 24];
          if (v21 != 1) {
            break;
          }
          int v22 = **v20;
          int v23 = *v15;
          if (*v15 >= v22) {
            goto LABEL_26;
          }
LABEL_30:
          *((void *)v19 + 4) = *v20;
          *((_DWORD *)v19 + 10) = *(_DWORD *)&a1[v16 + 24];
          v16 -= 16;
          if (v16 == -32)
          {
LABEL_5:
            int v10 = a1;
            goto LABEL_6;
          }
        }
        if (!v21)
        {
          int v22 = (*v20)[1];
          int v23 = *v15;
          if (*v15 >= v22) {
            goto LABEL_26;
          }
          goto LABEL_30;
        }
        int v22 = 0x7FFFFFFF;
        int v23 = *v15;
        if (*v15 != 0x7FFFFFFF) {
          goto LABEL_30;
        }
LABEL_26:
        if (v21 >= 2 && v22 >= v23) {
          goto LABEL_30;
        }
LABEL_66:
        long long v35 = &a1[v16];
LABEL_67:
        int v10 = v35 + 32;
LABEL_6:
        *(void *)int v10 = v15;
        *((_DWORD *)v10 + 2) = v11;
        if (++v9 == 8) {
          return v7 + 16 == a2;
        }
LABEL_7:
        int v6 = v7;
        v8 += 16;
        v7 += 16;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

__n128 sub_BA5040(long long *a1, _DWORD **a2, _DWORD **a3, uint64_t a4)
{
  sub_BA40E8(a1, a2, a3);
  int v9 = *(_DWORD *)(a4 + 8);
  if (v9)
  {
    if (v9 == 1)
    {
      int v10 = **(_DWORD **)a4;
      int v11 = *((_DWORD *)a3 + 2);
      if (!v11)
      {
LABEL_10:
        int v12 = (*a3)[1];
        if (v10 < v12) {
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
    else
    {
      int v10 = 0x7FFFFFFF;
      int v11 = *((_DWORD *)a3 + 2);
      if (!v11) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v10 = *(_DWORD *)(*(void *)a4 + 4);
    int v11 = *((_DWORD *)a3 + 2);
    if (!v11) {
      goto LABEL_10;
    }
  }
  if (v11 == 1)
  {
    int v12 = **a3;
    if (v10 < v12) {
      goto LABEL_15;
    }
  }
  else
  {
    int v12 = 0x7FFFFFFF;
    if (v10 != 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
LABEL_13:
  if (v9 >= v11 || v12 < v10) {
    return result;
  }
LABEL_15:
  __n128 result = *(__n128 *)a3;
  long long v24 = *(_OWORD *)a3;
  int v13 = *(_DWORD *)(a4 + 8);
  *a3 = *(_DWORD **)a4;
  *((_DWORD *)a3 + 2) = v13;
  *(void *)a4 = v24;
  *(_DWORD *)(a4 + 8) = DWORD2(v24);
  int v14 = *((_DWORD *)a3 + 2);
  if (v14)
  {
    if (v14 == 1)
    {
      int v15 = **a3;
      int v16 = *((_DWORD *)a2 + 2);
      if (!v16)
      {
LABEL_24:
        int v17 = (*a2)[1];
        if (v15 < v17) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
    }
    else
    {
      int v15 = 0x7FFFFFFF;
      int v16 = *((_DWORD *)a2 + 2);
      if (!v16) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    int v15 = (*a3)[1];
    int v16 = *((_DWORD *)a2 + 2);
    if (!v16) {
      goto LABEL_24;
    }
  }
  if (v16 == 1)
  {
    int v17 = **a2;
    if (v15 < v17) {
      goto LABEL_29;
    }
  }
  else
  {
    int v17 = 0x7FFFFFFF;
    if (v15 != 0x7FFFFFFF) {
      goto LABEL_29;
    }
  }
LABEL_27:
  if (v14 >= v16 || v17 < v15) {
    return result;
  }
LABEL_29:
  __n128 result = *(__n128 *)a2;
  long long v25 = *(_OWORD *)a2;
  int v18 = *((_DWORD *)a3 + 2);
  *a2 = *a3;
  *((_DWORD *)a2 + 2) = v18;
  *a3 = (_DWORD *)v25;
  *((_DWORD *)a3 + 2) = DWORD2(v25);
  int v19 = *((_DWORD *)a2 + 2);
  if (v19)
  {
    if (v19 == 1)
    {
      int v20 = **a2;
      int v21 = *((_DWORD *)a1 + 2);
      if (!v21)
      {
LABEL_38:
        int v22 = *(_DWORD *)(*(void *)a1 + 4);
        if (v20 < v22) {
          goto LABEL_43;
        }
        goto LABEL_41;
      }
    }
    else
    {
      int v20 = 0x7FFFFFFF;
      int v21 = *((_DWORD *)a1 + 2);
      if (!v21) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    int v20 = (*a2)[1];
    int v21 = *((_DWORD *)a1 + 2);
    if (!v21) {
      goto LABEL_38;
    }
  }
  if (v21 == 1)
  {
    int v22 = **(_DWORD **)a1;
    if (v20 < v22) {
      goto LABEL_43;
    }
  }
  else
  {
    int v22 = 0x7FFFFFFF;
    if (v20 != 0x7FFFFFFF)
    {
LABEL_43:
      __n128 result = (__n128)*a1;
      long long v26 = *a1;
      int v23 = *((_DWORD *)a2 + 2);
      *(void *)a1 = *a2;
      *((_DWORD *)a1 + 2) = v23;
      *a2 = (_DWORD *)v26;
      *((_DWORD *)a2 + 2) = DWORD2(v26);
      return result;
    }
  }
LABEL_41:
  if (v19 < v21 && v22 >= v20) {
    goto LABEL_43;
  }
  return result;
}

__n128 sub_BA52A0(long long *a1, _DWORD **a2, _DWORD **a3, _DWORD *a4, uint64_t a5)
{
  result.n128_u64[0] = sub_BA5040(a1, a2, a3, (uint64_t)a4).n128_u64[0];
  int v11 = *(_DWORD *)(a5 + 8);
  if (v11)
  {
    if (v11 == 1)
    {
      int v12 = **(_DWORD **)a5;
      int v13 = a4[2];
      if (!v13)
      {
LABEL_10:
        int v14 = *(_DWORD *)(*(void *)a4 + 4);
        if (v12 < v14) {
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
    else
    {
      int v12 = 0x7FFFFFFF;
      int v13 = a4[2];
      if (!v13) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v12 = *(_DWORD *)(*(void *)a5 + 4);
    int v13 = a4[2];
    if (!v13) {
      goto LABEL_10;
    }
  }
  if (v13 == 1)
  {
    int v14 = **(_DWORD **)a4;
    if (v12 < v14) {
      goto LABEL_15;
    }
  }
  else
  {
    int v14 = 0x7FFFFFFF;
    if (v12 != 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
LABEL_13:
  if (v11 >= v13 || v14 < v12) {
    return result;
  }
LABEL_15:
  __n128 result = *(__n128 *)a4;
  long long v31 = *(_OWORD *)a4;
  int v15 = *(_DWORD *)(a5 + 8);
  *(void *)a4 = *(void *)a5;
  a4[2] = v15;
  *(void *)a5 = v31;
  *(_DWORD *)(a5 + 8) = DWORD2(v31);
  int v16 = a4[2];
  if (v16)
  {
    if (v16 == 1)
    {
      int v17 = **(_DWORD **)a4;
      int v18 = *((_DWORD *)a3 + 2);
      if (!v18)
      {
LABEL_24:
        int v19 = (*a3)[1];
        if (v17 < v19) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
    }
    else
    {
      int v17 = 0x7FFFFFFF;
      int v18 = *((_DWORD *)a3 + 2);
      if (!v18) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    int v17 = *(_DWORD *)(*(void *)a4 + 4);
    int v18 = *((_DWORD *)a3 + 2);
    if (!v18) {
      goto LABEL_24;
    }
  }
  if (v18 == 1)
  {
    int v19 = **a3;
    if (v17 < v19) {
      goto LABEL_29;
    }
  }
  else
  {
    int v19 = 0x7FFFFFFF;
    if (v17 != 0x7FFFFFFF) {
      goto LABEL_29;
    }
  }
LABEL_27:
  if (v16 >= v18 || v19 < v17) {
    return result;
  }
LABEL_29:
  __n128 result = *(__n128 *)a3;
  long long v32 = *(_OWORD *)a3;
  int v20 = a4[2];
  *a3 = *(_DWORD **)a4;
  *((_DWORD *)a3 + 2) = v20;
  *(void *)a4 = v32;
  a4[2] = DWORD2(v32);
  int v21 = *((_DWORD *)a3 + 2);
  if (v21)
  {
    if (v21 == 1)
    {
      int v22 = **a3;
      int v23 = *((_DWORD *)a2 + 2);
      if (!v23)
      {
LABEL_38:
        int v24 = (*a2)[1];
        if (v22 < v24) {
          goto LABEL_43;
        }
        goto LABEL_41;
      }
    }
    else
    {
      int v22 = 0x7FFFFFFF;
      int v23 = *((_DWORD *)a2 + 2);
      if (!v23) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    int v22 = (*a3)[1];
    int v23 = *((_DWORD *)a2 + 2);
    if (!v23) {
      goto LABEL_38;
    }
  }
  if (v23 == 1)
  {
    int v24 = **a2;
    if (v22 < v24) {
      goto LABEL_43;
    }
  }
  else
  {
    int v24 = 0x7FFFFFFF;
    if (v22 != 0x7FFFFFFF) {
      goto LABEL_43;
    }
  }
LABEL_41:
  if (v21 >= v23 || v24 < v22) {
    return result;
  }
LABEL_43:
  __n128 result = *(__n128 *)a2;
  long long v33 = *(_OWORD *)a2;
  int v25 = *((_DWORD *)a3 + 2);
  *a2 = *a3;
  *((_DWORD *)a2 + 2) = v25;
  *a3 = (_DWORD *)v33;
  *((_DWORD *)a3 + 2) = DWORD2(v33);
  int v26 = *((_DWORD *)a2 + 2);
  if (v26)
  {
    if (v26 == 1)
    {
      int v27 = **a2;
      int v28 = *((_DWORD *)a1 + 2);
      if (!v28)
      {
LABEL_52:
        int v29 = *(_DWORD *)(*(void *)a1 + 4);
        if (v27 < v29) {
          goto LABEL_57;
        }
        goto LABEL_55;
      }
    }
    else
    {
      int v27 = 0x7FFFFFFF;
      int v28 = *((_DWORD *)a1 + 2);
      if (!v28) {
        goto LABEL_52;
      }
    }
  }
  else
  {
    int v27 = (*a2)[1];
    int v28 = *((_DWORD *)a1 + 2);
    if (!v28) {
      goto LABEL_52;
    }
  }
  if (v28 == 1)
  {
    int v29 = **(_DWORD **)a1;
    if (v27 < v29) {
      goto LABEL_57;
    }
  }
  else
  {
    int v29 = 0x7FFFFFFF;
    if (v27 != 0x7FFFFFFF)
    {
LABEL_57:
      __n128 result = (__n128)*a1;
      long long v34 = *a1;
      int v30 = *((_DWORD *)a2 + 2);
      *(void *)a1 = *a2;
      *((_DWORD *)a1 + 2) = v30;
      *a2 = (_DWORD *)v34;
      *((_DWORD *)a2 + 2) = DWORD2(v34);
      return result;
    }
  }
LABEL_55:
  if (v26 < v28 && v29 >= v27) {
    goto LABEL_57;
  }
  return result;
}

int **sub_BA55C0(int **a1, int **a2, int **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[2 * v10];
      do
      {
        sub_BA58D4((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      int v14 = v6;
      while (1)
      {
        int v16 = *((_DWORD *)v14 + 2);
        if (v16)
        {
          if (v16 == 1)
          {
            int v17 = **v14;
            int v18 = *((_DWORD *)a1 + 2);
            if (!v18) {
              goto LABEL_18;
            }
          }
          else
          {
            int v17 = 0x7FFFFFFF;
            int v18 = *((_DWORD *)a1 + 2);
            if (!v18)
            {
LABEL_18:
              int v19 = (*a1)[1];
              if (v17 >= v19) {
                goto LABEL_21;
              }
              goto LABEL_7;
            }
          }
        }
        else
        {
          int v17 = (*v14)[1];
          int v18 = *((_DWORD *)a1 + 2);
          if (!v18) {
            goto LABEL_18;
          }
        }
        if (v18 == 1)
        {
          int v19 = **a1;
          if (v17 >= v19) {
            goto LABEL_21;
          }
        }
        else
        {
          int v19 = 0x7FFFFFFF;
          if (v17 == 0x7FFFFFFF)
          {
LABEL_21:
            if (v16 >= v18 || v19 < v17) {
              goto LABEL_8;
            }
          }
        }
LABEL_7:
        long long v35 = *(_OWORD *)v14;
        int v15 = *((_DWORD *)a1 + 2);
        *int v14 = *a1;
        *((_DWORD *)v14 + 2) = v15;
        *a1 = (int *)v35;
        *((_DWORD *)a1 + 2) = DWORD2(v35);
        sub_BA58D4((uint64_t)a1, a4, v9, a1);
LABEL_8:
        v14 += 2;
        if (v14 == a3)
        {
          int v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v20 = (unint64_t)v8 >> 4;
      do
      {
        while (2)
        {
          uint64_t v23 = 0;
          long long v36 = *(_OWORD *)a1;
          int v24 = a1;
          do
          {
            int v26 = v24;
            v24 += 2 * v23 + 2;
            uint64_t v27 = 2 * v23;
            uint64_t v23 = (2 * v23) | 1;
            uint64_t v28 = v27 + 2;
            if (v28 >= v20) {
              goto LABEL_34;
            }
            int v29 = *((_DWORD *)v24 + 2);
            if (v29)
            {
              if (v29 == 1)
              {
                int v30 = **v24;
                long long v31 = v24 + 2;
                int v32 = *((_DWORD *)v24 + 6);
                if (v32) {
                  goto LABEL_41;
                }
              }
              else
              {
                int v30 = 0x7FFFFFFF;
                long long v31 = v24 + 2;
                int v32 = *((_DWORD *)v24 + 6);
                if (v32)
                {
LABEL_41:
                  if (v32 == 1)
                  {
                    int v33 = **v31;
                    if (v30 < v33) {
                      goto LABEL_33;
                    }
                  }
                  else
                  {
                    int v33 = 0x7FFFFFFF;
                    if (v30 != 0x7FFFFFFF) {
                      goto LABEL_33;
                    }
                  }
                  goto LABEL_48;
                }
              }
            }
            else
            {
              int v30 = (*v24)[1];
              long long v31 = v24 + 2;
              int v32 = *((_DWORD *)v24 + 6);
              if (v32) {
                goto LABEL_41;
              }
            }
            int v33 = (*v31)[1];
            if (v30 < v33) {
              goto LABEL_33;
            }
LABEL_48:
            if (v29 < v32 && v33 >= v30)
            {
LABEL_33:
              int v24 = v31;
              uint64_t v23 = v28;
            }
LABEL_34:
            int v25 = *v24;
            *((_DWORD *)v26 + 2) = *((_DWORD *)v24 + 2);
            *int v26 = v25;
          }
          while (v23 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
          v6 -= 2;
          if (v24 != v6)
          {
            int v21 = *v6;
            *((_DWORD *)v24 + 2) = *((_DWORD *)v6 + 2);
            *int v24 = v21;
            *int v6 = (int *)v36;
            *((_DWORD *)v6 + 2) = DWORD2(v36);
            sub_BA5B7C((uint64_t)a1, (uint64_t)(v24 + 2), a4, ((char *)(v24 + 2) - (char *)a1) >> 4);
            BOOL v22 = v20-- <= 2;
            if (v22) {
              return v13;
            }
            continue;
          }
          break;
        }
        *((_DWORD *)v24 + 2) = DWORD2(v36);
        *int v24 = (int *)v36;
        BOOL v22 = v20-- <= 2;
      }
      while (!v22);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_BA58D4(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 4) {
    return result;
  }
  uint64_t v6 = v4 >> 3;
  uint64_t v7 = (v4 >> 3) + 1;
  uint64_t v8 = (int **)(result + 16 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 >= a3) {
    goto LABEL_19;
  }
  int v10 = *((_DWORD *)v8 + 2);
  if (v10)
  {
    if (v10 == 1)
    {
      int v11 = **v8;
      int v12 = v8 + 2;
      int v13 = *((_DWORD *)v8 + 6);
      if (!v13)
      {
LABEL_13:
        int v14 = (*v12)[1];
        if (v11 < v14) {
          goto LABEL_18;
        }
        goto LABEL_16;
      }
    }
    else
    {
      int v11 = 0x7FFFFFFF;
      int v12 = v8 + 2;
      int v13 = *((_DWORD *)v8 + 6);
      if (!v13) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    int v11 = (*v8)[1];
    int v12 = v8 + 2;
    int v13 = *((_DWORD *)v8 + 6);
    if (!v13) {
      goto LABEL_13;
    }
  }
  if (v13 == 1)
  {
    int v14 = **v12;
    if (v11 < v14) {
      goto LABEL_18;
    }
  }
  else
  {
    int v14 = 0x7FFFFFFF;
    if (v11 != 0x7FFFFFFF)
    {
LABEL_18:
      uint64_t v8 = v12;
      uint64_t v7 = v9;
      goto LABEL_19;
    }
  }
LABEL_16:
  if (v10 < v13 && v14 >= v11) {
    goto LABEL_18;
  }
LABEL_19:
  int v15 = *((_DWORD *)v8 + 2);
  if (v15)
  {
    if (v15 == 1)
    {
      int v16 = **v8;
      int v17 = *((_DWORD *)a4 + 2);
      if (!v17)
      {
LABEL_28:
        int v18 = (*a4)[1];
        if (v16 < v18) {
          return result;
        }
        goto LABEL_31;
      }
    }
    else
    {
      int v16 = 0x7FFFFFFF;
      int v17 = *((_DWORD *)a4 + 2);
      if (!v17) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    int v16 = (*v8)[1];
    int v17 = *((_DWORD *)a4 + 2);
    if (!v17) {
      goto LABEL_28;
    }
  }
  if (v17 == 1)
  {
    int v18 = **a4;
    if (v16 < v18) {
      return result;
    }
  }
  else
  {
    int v18 = 0x7FFFFFFF;
    if (v16 != 0x7FFFFFFF) {
      return result;
    }
  }
LABEL_31:
  if (v15 >= v17 || v18 < v16)
  {
    uint64_t v20 = *a4;
    while (1)
    {
      int v21 = a4;
      a4 = v8;
      BOOL v22 = *v8;
      *((_DWORD *)v21 + 2) = *((_DWORD *)a4 + 2);
      int *v21 = v22;
      if (v5 < v7)
      {
LABEL_71:
        *a4 = v20;
        *((_DWORD *)a4 + 2) = v17;
        return result;
      }
      uint64_t v23 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v8 = (int **)(result + 16 * v7);
      uint64_t v24 = v23 + 2;
      if (v24 >= a3) {
        goto LABEL_56;
      }
      int v25 = *((_DWORD *)v8 + 2);
      if (v25)
      {
        if (v25 == 1)
        {
          int v26 = **v8;
          uint64_t v27 = v8 + 2;
          int v28 = *((_DWORD *)v8 + 6);
          if (v28) {
            goto LABEL_44;
          }
        }
        else
        {
          int v26 = 0x7FFFFFFF;
          uint64_t v27 = v8 + 2;
          int v28 = *((_DWORD *)v8 + 6);
          if (v28)
          {
LABEL_44:
            if (v28 == 1)
            {
              int v29 = **v27;
              if (v26 < v29) {
                goto LABEL_55;
              }
            }
            else
            {
              int v29 = 0x7FFFFFFF;
              if (v26 != 0x7FFFFFFF) {
                goto LABEL_55;
              }
            }
            goto LABEL_51;
          }
        }
      }
      else
      {
        int v26 = (*v8)[1];
        uint64_t v27 = v8 + 2;
        int v28 = *((_DWORD *)v8 + 6);
        if (v28) {
          goto LABEL_44;
        }
      }
      int v29 = (*v27)[1];
      if (v26 < v29) {
        goto LABEL_55;
      }
LABEL_51:
      if (v25 < v28 && v29 >= v26)
      {
LABEL_55:
        uint64_t v8 = v27;
        uint64_t v7 = v24;
      }
LABEL_56:
      int v31 = *((_DWORD *)v8 + 2);
      if (v31)
      {
        if (v31 == 1)
        {
          int v32 = **v8;
          if (!v17) {
            goto LABEL_64;
          }
        }
        else
        {
          int v32 = 0x7FFFFFFF;
          if (!v17)
          {
LABEL_64:
            int v33 = v20[1];
            goto LABEL_66;
          }
        }
      }
      else
      {
        int v32 = (*v8)[1];
        if (!v17) {
          goto LABEL_64;
        }
      }
      if (v17 == 1) {
        int v33 = *v20;
      }
      else {
        int v33 = 0x7FFFFFFF;
      }
LABEL_66:
      if (v32 >= v33 && (v31 >= v17 || v33 < v32)) {
        continue;
      }
      goto LABEL_71;
    }
  }
  return result;
}

uint64_t sub_BA5B7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  uint64_t v6 = (_DWORD *)(result + 16 * (v4 >> 1));
  uint64_t v7 = (int **)(a2 - 16);
  int v8 = v6[2];
  if (!v8)
  {
    int v9 = *(_DWORD *)(*(void *)v6 + 4);
    int v10 = *(_DWORD *)(a2 - 8);
    if (v10) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    int v9 = 0x7FFFFFFF;
    int v10 = *(_DWORD *)(a2 - 8);
    if (v10) {
      goto LABEL_10;
    }
LABEL_5:
    int v11 = (*v7)[1];
    if (v9 < v11) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  int v9 = **(_DWORD **)v6;
  int v10 = *(_DWORD *)(a2 - 8);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_10:
  if (v10 == 1)
  {
    int v11 = **v7;
    if (v9 < v11) {
      goto LABEL_18;
    }
  }
  else
  {
    int v11 = 0x7FFFFFFF;
    if (v9 != 0x7FFFFFFF) {
      goto LABEL_18;
    }
  }
LABEL_14:
  if (v8 >= v10 || v11 < v9) {
    return result;
  }
LABEL_18:
  int v13 = *v7;
  int v14 = *(int **)v6;
  *(_DWORD *)(a2 - 8) = v6[2];
  *uint64_t v7 = v14;
  if (v4 >= 2)
  {
    if (v10 != 1)
    {
      if (!v10)
      {
        while (1)
        {
          unint64_t v23 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          int v15 = (_DWORD *)(result + 16 * v5);
          int v24 = v15[2];
          if (v24 == 1)
          {
            if (**(_DWORD **)v15 >= v13[1]) {
              goto LABEL_19;
            }
          }
          else if (v24)
          {
            if ((v24 & 0x80000000) == 0 || v13[1] != 0x7FFFFFFF) {
              goto LABEL_19;
            }
          }
          else if (*(_DWORD *)(*(void *)v15 + 4) >= v13[1])
          {
            goto LABEL_19;
          }
          uint64_t v22 = *(void *)v15;
          v6[2] = v15[2];
          *(void *)uint64_t v6 = v22;
          uint64_t v6 = (_DWORD *)(result + 16 * v5);
          if (v23 < 2) {
            goto LABEL_20;
          }
        }
      }
      while (1)
      {
        unint64_t v26 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        int v15 = (_DWORD *)(result + 16 * v5);
        int v27 = v15[2];
        if (v27)
        {
          if (v27 != 1 || **(_DWORD **)v15 == 0x7FFFFFFF)
          {
LABEL_46:
            if (v27 >= v10) {
              goto LABEL_19;
            }
          }
        }
        else if (*(_DWORD *)(*(void *)v15 + 4) == 0x7FFFFFFF)
        {
          goto LABEL_46;
        }
        uint64_t v25 = *(void *)v15;
        v6[2] = v15[2];
        *(void *)uint64_t v6 = v25;
        uint64_t v6 = (_DWORD *)(result + 16 * v5);
        if (v26 <= 1) {
          goto LABEL_20;
        }
      }
    }
    while (1)
    {
      unint64_t v20 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      int v15 = (_DWORD *)(result + 16 * v5);
      int v21 = v15[2];
      if (v21)
      {
        if (v21 == 1)
        {
          int v17 = **(_DWORD **)v15;
          int v16 = *v13;
          if (v17 < *v13) {
            goto LABEL_30;
          }
        }
        else
        {
          int v16 = *v13;
          int v17 = 0x7FFFFFFF;
        }
      }
      else
      {
        int v17 = *(_DWORD *)(*(void *)v15 + 4);
        int v16 = *v13;
        if (v17 < *v13) {
          goto LABEL_30;
        }
      }
      if (v21 > 0 || v16 < v17) {
        break;
      }
LABEL_30:
      int v19 = *(_DWORD **)v15;
      v6[2] = v15[2];
      *(void *)uint64_t v6 = v19;
      uint64_t v6 = (_DWORD *)(result + 16 * v5);
      if (v20 < 2) {
        goto LABEL_20;
      }
    }
  }
LABEL_19:
  int v15 = v6;
LABEL_20:
  *(void *)int v15 = v13;
  v15[2] = v10;
  return result;
}

uint64_t sub_BA5DC4(void *a1, void *a2, const char *a3)
{
  sub_6BAC((uint64_t)v9);
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      if (v6 != a1)
      {
        size_t v7 = strlen(a3);
        sub_188FC78(v9, (uint64_t)a3, v7);
      }
      std::ostream::operator<<();
      uint64_t v6 = (void *)*v6;
    }
    while (v6 != a2);
  }
  std::stringbuf::str();
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_BA5F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BA5F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_BA5F70(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    int v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      int v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  int v17 = operator new(0x18uLL);
  *int v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    int v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *int v17 = *v21;
LABEL_61:
      void *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        int v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        int v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      int v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *int v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_BA62B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_BA62CC(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  __n128 result = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3) {
            return result;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        __n128 result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

char **sub_BA63E0(char **a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v20 = 14;
  strcpy((char *)v19, "rounding_rules");
  int8x8_t v2 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v19);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  int v21 = 0;
  long long v22 = 0uLL;
  uint64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new((unint64_t)v5 >> 1);
    int v21 = v6;
    *(void *)&long long v22 = v6;
    *((void *)&v22 + 1) = &v6[8 * (v5 >> 4)];
    do
    {
      if (*(_DWORD *)(v3 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint8x8_t v7 = *(void **)v3;
      char v26 = 15;
      strcpy((char *)v25, "lower_bound_min");
      int v8 = sub_319F48(v7, (uint64_t)v25);
      char v24 = 13;
      strcpy((char *)__p, "precision_min");
      int v9 = sub_319F48(v7, (uint64_t)__p);
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (v26 < 0) {
LABEL_10:
        }
          operator delete(v25[0]);
      }
      else if (v26 < 0)
      {
        goto LABEL_10;
      }
      v25[0] = (void *)((600 * v8) | ((unint64_t)((75 * v9) & 0x1FFFFFFF) << 35));
      unint64_t v6 = sub_BA7080((unint64_t *)&v21, v6, v25) + 8;
      v3 += 16;
    }
    while (v3 != v4);
  }
  unint64_t v10 = *a1;
  if (*a1)
  {
    a1[1] = v10;
    operator delete(v10);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  unint64_t v11 = (unint64_t)v21;
  *a1 = v21;
  unint64_t v12 = (int8x16_t *)v22;
  *(_OWORD *)(a1 + 1) = v22;
  long long v22 = 0uLL;
  int v21 = 0;
  if (v20 < 0)
  {
    operator delete(v19[0]);
    unint64_t v11 = (unint64_t)*a1;
    uint64_t v13 = (int8x16_t *)a1[1];
  }
  else
  {
    uint64_t v13 = v12;
  }
  unint64_t v14 = 126 - 2 * __clz((uint64_t)((uint64_t)v13->i64 - v11) >> 3);
  if (v13 == (int8x16_t *)v11) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  sub_BA73F0(v11, v13, v15, 1);
  return a1;
}

void sub_BA663C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a16 < 0)
  {
    operator delete(__p);
    int v32 = *(void **)a10;
    if (!*(void *)a10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v32 = *(void **)a10;
    if (!*(void *)a10) {
      goto LABEL_3;
    }
  }
  *(void *)(a10 + 8) = v32;
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

unint64_t sub_BA6708(unint64_t result, uint64_t a2)
{
  int8x8_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = (void *)result;
    do
    {
      uint64_t v5 = (int *)v2[31];
      unint64_t v6 = (int *)v2[32];
      while (v5 != v6)
      {
        uint64_t v8 = v4[1];
        int v9 = v5[4];
        if (v8 != *v4)
        {
          unint64_t v10 = (v8 - *v4) >> 3;
          do
          {
            unint64_t v11 = v10 >> 1;
            uint64_t v12 = v8 - 8 * (v10 >> 1);
            int v14 = *(_DWORD *)(v12 - 8);
            uint64_t v13 = v12 - 8;
            v10 += ~(v10 >> 1);
            if (v14 <= v9) {
              unint64_t v10 = v11;
            }
            else {
              uint64_t v8 = v13;
            }
          }
          while (v10);
        }
        if (v8 != *v4)
        {
          int v15 = *(_DWORD *)(v8 - 4);
          if (v15)
          {
            double v16 = (double)v15 / 600.0 * round((double)v5[2] / 600.0 / ((double)v15 / 600.0)) * 60.0 * 10.0;
            if (v16 >= 0.0)
            {
              if (v16 < 4.50359963e15)
              {
                uint64_t v17 = (uint64_t)(v16 + v16) + 1;
                goto LABEL_24;
              }
            }
            else if (v16 > -4.50359963e15)
            {
              uint64_t v17 = (uint64_t)(v16 + v16);
              if (v17 >= 1) {
                --v17;
              }
LABEL_24:
              double v16 = (double)(v17 >> 1);
            }
            v5[2] = (int)v16;
            double v18 = (double)*(int *)(v8 - 4)
                / 600.0
                * round((double)v5[3] / 600.0 / ((double)*(int *)(v8 - 4) / 600.0))
                * 60.0
                * 10.0;
            if (v18 >= 0.0)
            {
              if (v18 < 4.50359963e15)
              {
                uint64_t v19 = (uint64_t)(v18 + v18) + 1;
                goto LABEL_32;
              }
            }
            else if (v18 > -4.50359963e15)
            {
              uint64_t v19 = (uint64_t)(v18 + v18);
              if (v19 >= 1) {
                --v19;
              }
LABEL_32:
              double v18 = (double)(v19 >> 1);
            }
            v5[3] = (int)v18;
            double v7 = (double)*(int *)(v8 - 4)
               / 600.0
               * round((double)v9 / 600.0 / ((double)*(int *)(v8 - 4) / 600.0))
               * 60.0
               * 10.0;
            if (v7 >= 0.0)
            {
              if (v7 < 4.50359963e15)
              {
                uint64_t v20 = (uint64_t)(v7 + v7) + 1;
                goto LABEL_5;
              }
            }
            else if (v7 > -4.50359963e15)
            {
              uint64_t v20 = (uint64_t)(v7 + v7);
              if (v20 >= 1) {
                --v20;
              }
LABEL_5:
              double v7 = (double)(v20 >> 1);
            }
            v5[4] = (int)v7;
          }
        }
        v5 += 10;
      }
      int v21 = (uint64_t *)v2[25];
      for (uint64_t i = (uint64_t *)v2[26]; v21 != i; v21 += 9)
        __n128 result = sub_BA69A0((unint64_t)v4, v21);
      v2 += 37;
    }
    while (v2 != v3);
  }
  return result;
}

unint64_t sub_BA69A0(unint64_t result, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 24)) {
    return result;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    return result;
  }
  uint64_t v5 = (unint64_t *)result;
  unint64_t v6 = (int *)a2[4];
  double v7 = (int *)a2[5];
  if (v6 != v7)
  {
    do
    {
      __n128 result = (unint64_t)sub_BA6E58(v5, v6);
      v6 += 10;
    }
    while (v6 != v7);
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
  }
  if (v3 == v4) {
    return result;
  }
  while (2)
  {
    uint64_t v8 = *(int **)(v3 + 120);
    int v9 = *(int **)(v3 + 128);
    while (v8 != v9)
    {
      __n128 result = *v5;
      unint64_t v11 = (void *)v5[1];
      int v12 = v8[4];
      if (v11 != (void *)*v5)
      {
        unint64_t v13 = (uint64_t)((uint64_t)v11 - *v5) >> 3;
        do
        {
          unint64_t v14 = v13 >> 1;
          int v15 = &v11[-(v13 >> 1)];
          int v17 = *((_DWORD *)v15 - 2);
          double v16 = v15 - 1;
          v13 += ~(v13 >> 1);
          if (v17 <= v12) {
            unint64_t v13 = v14;
          }
          else {
            unint64_t v11 = v16;
          }
        }
        while (v13);
      }
      if (v11 != (void *)result)
      {
        __n128 result = *((unsigned int *)v11 - 1);
        if (result)
        {
          double v18 = (double)(int)result / 600.0 * round((double)v8[2] / 600.0 / ((double)(int)result / 600.0)) * 60.0 * 10.0;
          if (v18 >= 0.0)
          {
            if (v18 < 4.50359963e15)
            {
              uint64_t v19 = (uint64_t)(v18 + v18) + 1;
              goto LABEL_30;
            }
          }
          else if (v18 > -4.50359963e15)
          {
            uint64_t v19 = (uint64_t)(v18 + v18);
            if (v19 >= 1) {
              --v19;
            }
LABEL_30:
            double v18 = (double)(v19 >> 1);
          }
          v8[2] = (int)v18;
          double v20 = (double)*((int *)v11 - 1)
              / 600.0
              * round((double)v8[3] / 600.0 / ((double)*((int *)v11 - 1) / 600.0))
              * 60.0
              * 10.0;
          if (v20 >= 0.0)
          {
            if (v20 < 4.50359963e15)
            {
              uint64_t v21 = (uint64_t)(v20 + v20) + 1;
              goto LABEL_38;
            }
          }
          else if (v20 > -4.50359963e15)
          {
            uint64_t v21 = (uint64_t)(v20 + v20);
            if (v21 >= 1) {
              --v21;
            }
LABEL_38:
            double v20 = (double)(v21 >> 1);
          }
          __n128 result = (int)v20;
          v8[3] = result;
          double v10 = (double)*((int *)v11 - 1)
              / 600.0
              * round((double)v12 / 600.0 / ((double)*((int *)v11 - 1) / 600.0))
              * 60.0
              * 10.0;
          if (v10 >= 0.0)
          {
            if (v10 < 4.50359963e15)
            {
              uint64_t v22 = (uint64_t)(v10 + v10) + 1;
              goto LABEL_11;
            }
          }
          else if (v10 > -4.50359963e15)
          {
            uint64_t v22 = (uint64_t)(v10 + v10);
            if (v22 >= 1) {
              --v22;
            }
LABEL_11:
            double v10 = (double)(v22 >> 1);
          }
          v8[4] = (int)v10;
        }
      }
      v8 += 10;
    }
    v3 += 168;
    if (v3 != v4) {
      continue;
    }
    return result;
  }
}

void *sub_BA6C2C(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 == v3) {
    return result;
  }
  while (2)
  {
    uint64_t v4 = *(int **)(v2 + 184);
    uint64_t v5 = *(int **)(v2 + 192);
    while (v4 != v5)
    {
      uint64_t v7 = result[1];
      int v8 = v4[4];
      if (v7 != *result)
      {
        unint64_t v9 = (v7 - *result) >> 3;
        do
        {
          unint64_t v10 = v9 >> 1;
          uint64_t v11 = v7 - 8 * (v9 >> 1);
          int v13 = *(_DWORD *)(v11 - 8);
          uint64_t v12 = v11 - 8;
          v9 += ~(v9 >> 1);
          if (v13 <= v8) {
            unint64_t v9 = v10;
          }
          else {
            uint64_t v7 = v12;
          }
        }
        while (v9);
      }
      if (v7 != *result)
      {
        int v14 = *(_DWORD *)(v7 - 4);
        if (v14)
        {
          double v15 = (double)v14 / 600.0 * round((double)v4[2] / 600.0 / ((double)v14 / 600.0)) * 60.0 * 10.0;
          if (v15 >= 0.0)
          {
            if (v15 < 4.50359963e15)
            {
              uint64_t v16 = (uint64_t)(v15 + v15) + 1;
              goto LABEL_24;
            }
          }
          else if (v15 > -4.50359963e15)
          {
            uint64_t v16 = (uint64_t)(v15 + v15);
            if (v16 >= 1) {
              --v16;
            }
LABEL_24:
            double v15 = (double)(v16 >> 1);
          }
          v4[2] = (int)v15;
          double v17 = (double)*(int *)(v7 - 4)
              / 600.0
              * round((double)v4[3] / 600.0 / ((double)*(int *)(v7 - 4) / 600.0))
              * 60.0
              * 10.0;
          if (v17 >= 0.0)
          {
            if (v17 < 4.50359963e15)
            {
              uint64_t v18 = (uint64_t)(v17 + v17) + 1;
              goto LABEL_32;
            }
          }
          else if (v17 > -4.50359963e15)
          {
            uint64_t v18 = (uint64_t)(v17 + v17);
            if (v18 >= 1) {
              --v18;
            }
LABEL_32:
            double v17 = (double)(v18 >> 1);
          }
          v4[3] = (int)v17;
          double v6 = (double)*(int *)(v7 - 4)
             / 600.0
             * round((double)v8 / 600.0 / ((double)*(int *)(v7 - 4) / 600.0))
             * 60.0
             * 10.0;
          if (v6 >= 0.0)
          {
            if (v6 < 4.50359963e15)
            {
              uint64_t v19 = (uint64_t)(v6 + v6) + 1;
              goto LABEL_5;
            }
          }
          else if (v6 > -4.50359963e15)
          {
            uint64_t v19 = (uint64_t)(v6 + v6);
            if (v19 >= 1) {
              --v19;
            }
LABEL_5:
            double v6 = (double)(v19 >> 1);
          }
          v4[4] = (int)v6;
        }
      }
      v4 += 10;
    }
    v2 += 248;
    if (v2 != v3) {
      continue;
    }
    return result;
  }
}

void *sub_BA6E58(void *result, int *a2)
{
  uint64_t v2 = result[1];
  int v3 = a2[4];
  if (v2 != *result)
  {
    unint64_t v4 = (v2 - *result) >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = v2 - 8 * (v4 >> 1);
      int v8 = *(_DWORD *)(v6 - 8);
      uint64_t v7 = v6 - 8;
      v4 += ~(v4 >> 1);
      if (v8 <= v3) {
        unint64_t v4 = v5;
      }
      else {
        uint64_t v2 = v7;
      }
    }
    while (v4);
  }
  if (v2 != *result)
  {
    int v9 = *(_DWORD *)(v2 - 4);
    if (v9)
    {
      double v10 = (double)v9 / 600.0 * round((double)a2[2] / 600.0 / ((double)v9 / 600.0)) * 60.0 * 10.0;
      if (v10 >= 0.0)
      {
        if (v10 >= 4.50359963e15) {
          goto LABEL_17;
        }
        uint64_t v11 = (uint64_t)(v10 + v10) + 1;
      }
      else
      {
        if (v10 <= -4.50359963e15) {
          goto LABEL_17;
        }
        uint64_t v11 = (uint64_t)(v10 + v10);
        if (v11 >= 1) {
          --v11;
        }
      }
      double v10 = (double)(v11 >> 1);
LABEL_17:
      a2[2] = (int)v10;
      double v12 = (double)*(int *)(v2 - 4)
          / 600.0
          * round((double)a2[3] / 600.0 / ((double)*(int *)(v2 - 4) / 600.0))
          * 60.0
          * 10.0;
      if (v12 >= 0.0)
      {
        if (v12 >= 4.50359963e15) {
          goto LABEL_25;
        }
        uint64_t v13 = (uint64_t)(v12 + v12) + 1;
      }
      else
      {
        if (v12 <= -4.50359963e15) {
          goto LABEL_25;
        }
        uint64_t v13 = (uint64_t)(v12 + v12);
        if (v13 >= 1) {
          --v13;
        }
      }
      double v12 = (double)(v13 >> 1);
LABEL_25:
      a2[3] = (int)v12;
      double v14 = (double)*(int *)(v2 - 4)
          / 600.0
          * round((double)v3 / 600.0 / ((double)*(int *)(v2 - 4) / 600.0))
          * 60.0
          * 10.0;
      if (v14 >= 0.0)
      {
        if (v14 < 4.50359963e15)
        {
          uint64_t v15 = (uint64_t)(v14 + v14) + 1;
LABEL_32:
          double v14 = (double)(v15 >> 1);
        }
      }
      else if (v14 > -4.50359963e15)
      {
        uint64_t v15 = (uint64_t)(v14 + v14);
        if (v15 >= 1) {
          --v15;
        }
        goto LABEL_32;
      }
      a2[4] = (int)v14;
    }
  }
  return result;
}

char *sub_BA7080(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  int v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)int v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)int v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    int v31 = &v30[8 * v8];
    int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    int v31 = (char *)(8 * v8);
    int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    char v54 = (char *)operator new(8 * v53);
    int v31 = &v54[8 * (v53 >> 2)];
    int v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      int v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)int v31 = *a3;
      long long v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)int v31 = *a3;
  long long v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    int v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    int v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    int v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    int v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_BA73D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_BA73F0(unint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (int8x16_t *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (a2[-1].i32[2] >= v10->i32[0]) {
            return result;
          }
          uint64_t v73 = v10->i64[0];
          goto LABEL_107;
        case 3:
          __int32 v74 = v10->i32[2];
          __int32 v75 = a2[-1].i32[2];
          if (v74 < v10->i32[0])
          {
            uint64_t v73 = v10->i64[0];
            if (v75 >= v74)
            {
              v10->i64[0] = v10->i64[1];
              v10->i64[1] = v73;
              if (a2[-1].i32[2] >= (int)v73) {
                return result;
              }
              v10->i64[1] = a2[-1].i64[1];
            }
            else
            {
LABEL_107:
              v10->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v73;
            return result;
          }
          if (v75 < v74)
          {
            uint64_t v116 = v10->i64[1];
            v10->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v116;
            if (v10->i32[2] < v10->i32[0]) {
              int8x16_t *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
          break;
        case 4:
          int v76 = v10->i32[2];
          int v77 = v10->i32[0];
          LODWORD(v78) = v10[1].i32[0];
          if (v76 >= v10->i32[0])
          {
            if ((int)v78 < v76)
            {
              uint64_t v78 = v10->i64[1];
              uint64_t v117 = v10[1].i64[0];
              v10->i64[1] = v117;
              v10[1].i64[0] = v78;
              if (v77 > (int)v117)
              {
                uint64_t v118 = v10->i64[0];
                v10->i64[0] = v117;
                v10->i64[1] = v118;
              }
            }
          }
          else
          {
            uint64_t v79 = v10->i64[0];
            if ((int)v78 >= v76)
            {
              v10->i64[0] = v10->i64[1];
              v10->i64[1] = v79;
              if ((int)v78 >= (int)v79) {
                goto LABEL_190;
              }
              v10->i64[1] = v10[1].i64[0];
            }
            else
            {
              v10->i64[0] = v10[1].i64[0];
            }
            v10[1].i64[0] = v79;
            LODWORD(v78) = v79;
          }
LABEL_190:
          if (a2[-1].i32[2] < (int)v78)
          {
            uint64_t v124 = v10[1].i64[0];
            v10[1].i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v124;
            if (v10[1].i32[0] < v10->i32[2])
            {
              uint64_t v126 = v10->i64[1];
              uint64_t v125 = v10[1].i64[0];
              v10->i64[1] = v125;
              v10[1].i64[0] = v126;
              if (v10->i32[0] > (int)v125)
              {
                uint64_t v127 = v10->i64[0];
                v10->i64[0] = v125;
                v10->i64[1] = v127;
              }
            }
          }
          return result;
        case 5:
          return (unint64_t)sub_BA7E5C(v10->i64, &v10->i32[2], v10[1].i32, &v10[1].i64[1], &a2[-1].i64[1]);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v91 = (unint64_t)(v12 - 2) >> 1;
      int64_t v92 = v91;
      while (1)
      {
        if (v91 >= v92)
        {
          uint64_t v94 = (2 * v92) | 1;
          uint64_t v95 = &v10->i32[2 * v94];
          if (2 * v92 + 2 >= v12)
          {
            uint64_t v98 = &v10->i32[2 * v92];
            if (*v95 >= *v98) {
              goto LABEL_146;
            }
          }
          else
          {
            __int32 v96 = *v95;
            __int32 v97 = v95[2];
            if (*v95 <= v97) {
              __int32 v96 = v95[2];
            }
            if (*v95 < v97)
            {
              v95 += 2;
              uint64_t v94 = 2 * v92 + 2;
            }
            uint64_t v98 = &v10->i32[2 * v92];
            if (v96 >= *v98)
            {
LABEL_146:
              uint64_t v99 = *(void *)v98;
              while (1)
              {
                __n128 v102 = v98;
                uint64_t v98 = v95;
                *(void *)__n128 v102 = *(void *)v95;
                if (v91 < v94) {
                  break;
                }
                uint64_t v103 = (2 * v94) | 1;
                uint64_t v95 = &v10->i32[2 * v103];
                uint64_t v94 = 2 * v94 + 2;
                if (v94 < v12)
                {
                  int v100 = *v95;
                  __n128 result = (unint64_t)(v95 + 2);
                  __int32 v101 = v95[2];
                  if (*v95 <= v101) {
                    int v100 = v95[2];
                  }
                  if (*v95 >= v101) {
                    uint64_t v94 = v103;
                  }
                  else {
                    v95 += 2;
                  }
                  if (v100 < (int)v99) {
                    break;
                  }
                }
                else
                {
                  uint64_t v94 = v103;
                  if (*v95 < (int)v99) {
                    break;
                  }
                }
              }
              *(void *)uint64_t v98 = v99;
            }
          }
        }
        BOOL v93 = v92-- <= 0;
        if (v93)
        {
          uint64_t v104 = (unint64_t)v11 >> 3;
          do
          {
            uint64_t v105 = 0;
            uint64_t v106 = v10->i64[0];
            long long v107 = (uint64_t *)v10;
            do
            {
              long long v108 = (int8x16_t *)&v107[v105 + 1];
              uint64_t v109 = (2 * v105) | 1;
              uint64_t v110 = 2 * v105 + 2;
              if (v110 < v104 && v108->i32[0] < v108->i32[2])
              {
                long long v108 = (int8x16_t *)((char *)v108 + 8);
                uint64_t v109 = v110;
              }
              uint64_t *v107 = v108->i64[0];
              long long v107 = (uint64_t *)v108;
              uint64_t v105 = v109;
            }
            while (v109 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
            a2 = (int8x16_t *)((char *)a2 - 8);
            if (v108 == a2)
            {
              v108->i64[0] = v106;
            }
            else
            {
              v108->i64[0] = a2->i64[0];
              a2->i64[0] = v106;
              uint64_t v111 = (char *)v108 - (char *)v10 + 8;
              if (v111 >= 9)
              {
                unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                __n128 v113 = &v10->i64[v112];
                if (*(_DWORD *)v113 < v108->i32[0])
                {
                  uint64_t v114 = v108->i64[0];
                  do
                  {
                    char v115 = (uint64_t *)v108;
                    long long v108 = (int8x16_t *)v113;
                    *char v115 = *v113;
                    if (!v112) {
                      break;
                    }
                    unint64_t v112 = (v112 - 1) >> 1;
                    __n128 v113 = &v10->i64[v112];
                  }
                  while (*(_DWORD *)v113 < (int)v114);
                  v108->i64[0] = v114;
                }
              }
            }
            BOOL v93 = v104-- <= 2;
          }
          while (!v93);
          return result;
        }
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unint64_t v14 = &v10->i32[2 * ((unint64_t)v12 >> 1)];
    __int32 v15 = a2[-1].i32[2];
    if ((unint64_t)v11 < 0x401)
    {
      __int32 v18 = v10->i32[0];
      if (v10->i32[0] >= *v14)
      {
        if (v15 >= v18) {
          goto LABEL_33;
        }
        uint64_t v22 = v10->i64[0];
        v10->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v22;
        if (v10->i32[0] >= *v14) {
          goto LABEL_33;
        }
        uint64_t v23 = *(void *)v14;
        *(void *)unint64_t v14 = v10->i64[0];
        v10->i64[0] = v23;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      uint64_t v19 = *(void *)v14;
      if (v15 >= v18)
      {
        *(void *)unint64_t v14 = v10->i64[0];
        v10->i64[0] = v19;
        if (a2[-1].i32[2] >= (int)v19) {
          goto LABEL_33;
        }
        v10->i64[0] = a2[-1].i64[1];
      }
      else
      {
        *(void *)unint64_t v14 = a2[-1].i64[1];
      }
      a2[-1].i64[1] = v19;
LABEL_33:
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
      goto LABEL_34;
    }
    __int32 v16 = *v14;
    if (*v14 >= v10->i32[0])
    {
      if (v15 < v16)
      {
        uint64_t v20 = *(void *)v14;
        *(void *)unint64_t v14 = a2[-1].i64[1];
        a2[-1].i64[1] = v20;
        if (*v14 < v10->i32[0])
        {
          uint64_t v21 = v10->i64[0];
          v10->i64[0] = *(void *)v14;
          *(void *)unint64_t v14 = v21;
        }
      }
    }
    else
    {
      uint64_t v17 = v10->i64[0];
      if (v15 >= v16)
      {
        v10->i64[0] = *(void *)v14;
        *(void *)unint64_t v14 = v17;
        if (a2[-1].i32[2] >= (int)v17) {
          goto LABEL_24;
        }
        *(void *)unint64_t v14 = a2[-1].i64[1];
      }
      else
      {
        v10->i64[0] = a2[-1].i64[1];
      }
      a2[-1].i64[1] = v17;
    }
LABEL_24:
    uint64_t v24 = &v10->i8[8 * v13];
    __int32 v27 = *((_DWORD *)v24 - 2);
    long long v25 = (uint64_t *)(v24 - 8);
    __int32 v26 = v27;
    __int32 v28 = a2[-1].i32[0];
    if (v27 >= v10->i32[2])
    {
      if (v28 < v26)
      {
        uint64_t v30 = *v25;
        uint64_t *v25 = a2[-1].i64[0];
        a2[-1].i64[0] = v30;
        if (*(_DWORD *)v25 < v10->i32[2])
        {
          uint64_t v31 = v10->i64[1];
          v10->i64[1] = *v25;
          uint64_t *v25 = v31;
        }
      }
    }
    else
    {
      uint64_t v29 = v10->i64[1];
      if (v28 >= v26)
      {
        v10->i64[1] = *v25;
        uint64_t *v25 = v29;
        if (a2[-1].i32[0] >= (int)v29) {
          goto LABEL_38;
        }
        uint64_t *v25 = a2[-1].i64[0];
      }
      else
      {
        v10->i64[1] = a2[-1].i64[0];
      }
      a2[-1].i64[0] = v29;
    }
LABEL_38:
    unint64_t v33 = &v10->i8[8 * v13];
    __int32 v36 = *((_DWORD *)v33 + 2);
    long long v34 = (uint64_t *)(v33 + 8);
    __int32 v35 = v36;
    __int32 v37 = a2[-2].i32[2];
    if (v36 >= v10[1].i32[0])
    {
      if (v37 < v35)
      {
        uint64_t v39 = *v34;
        uint64_t *v34 = a2[-2].i64[1];
        a2[-2].i64[1] = v39;
        if (*(_DWORD *)v34 < v10[1].i32[0])
        {
          uint64_t v40 = v10[1].i64[0];
          v10[1].i64[0] = *v34;
          uint64_t *v34 = v40;
        }
      }
    }
    else
    {
      uint64_t v38 = v10[1].i64[0];
      if (v37 >= v35)
      {
        v10[1].i64[0] = *v34;
        uint64_t *v34 = v38;
        if (a2[-2].i32[2] >= (int)v38) {
          goto LABEL_47;
        }
        uint64_t *v34 = a2[-2].i64[1];
      }
      else
      {
        v10[1].i64[0] = a2[-2].i64[1];
      }
      a2[-2].i64[1] = v38;
    }
LABEL_47:
    int v41 = *v14;
    int v42 = *(_DWORD *)v25;
    int v43 = *(_DWORD *)v34;
    if (*v14 >= *(_DWORD *)v25)
    {
      uint64_t v44 = *(void *)v14;
      if (v43 >= v41) {
        goto LABEL_57;
      }
      uint64_t v46 = *v34;
      *(void *)unint64_t v14 = *v34;
      uint64_t *v34 = v44;
      if (v42 <= (int)v46)
      {
        uint64_t v64 = v10->i64[0];
        v10->i64[0] = v46;
        *(void *)unint64_t v14 = v64;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v47 = *v25;
        uint64_t *v25 = v46;
        *(void *)unint64_t v14 = v47;
        uint64_t v48 = v10->i64[0];
        v10->i64[0] = v47;
        *(void *)unint64_t v14 = v48;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
LABEL_58:
      uint64_t v32 = v10->i64[0];
      if (v10[-1].i32[2] < v10->i32[0]) {
        goto LABEL_59;
      }
      if (a2[-1].i32[2] > (int)v32)
      {
        do
        {
          int v65 = v10->i32[2];
          unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
        }
        while (v65 <= (int)v32);
      }
      else
      {
        long long v66 = (int8x16_t *)&v10->u64[1];
        do
        {
          unint64_t v10 = v66;
          if (v66 >= a2) {
            break;
          }
          long long v66 = (int8x16_t *)((char *)v66 + 8);
        }
        while (v10->i32[0] <= (int)v32);
      }
      BOOL v67 = a2;
      if (v10 < a2)
      {
        BOOL v67 = a2;
        do
        {
          int v68 = v67[-1].i32[2];
          BOOL v67 = (int8x16_t *)((char *)v67 - 8);
        }
        while (v68 > (int)v32);
      }
      while (v10 < v67)
      {
        uint64_t v69 = v10->i64[0];
        v10->i64[0] = v67->i64[0];
        v67->i64[0] = v69;
        do
        {
          int v70 = v10->i32[2];
          unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
        }
        while (v70 <= (int)v32);
        do
        {
          int v71 = v67[-1].i32[2];
          BOOL v67 = (int8x16_t *)((char *)v67 - 8);
        }
        while (v71 > (int)v32);
      }
      uint64_t v72 = &v10[-1].i64[1];
      BOOL v4 = (unint64_t)&v10[-1].u64[1] >= v9;
      BOOL v5 = &v10[-1].u64[1] == (unint64_t *)v9;
      if (&v10[-1].u64[1] != (unint64_t *)v9) {
        *(void *)unint64_t v9 = *v72;
      }
      a4 = 0;
      *uint64_t v72 = v32;
    }
    else
    {
      uint64_t v44 = *v25;
      if (v43 >= v41)
      {
        uint64_t *v25 = *(void *)v14;
        *(void *)unint64_t v14 = v44;
        if (v43 < (int)v44)
        {
          uint64_t v49 = *v34;
          *(void *)unint64_t v14 = *v34;
          uint64_t *v34 = v44;
          uint64_t v44 = v49;
        }
LABEL_57:
        uint64_t v50 = v10->i64[0];
        v10->i64[0] = v44;
        *(void *)unint64_t v14 = v50;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      uint64_t *v25 = *v34;
      uint64_t *v34 = v44;
      uint64_t v45 = v10->i64[0];
      v10->i64[0] = *(void *)v14;
      *(void *)unint64_t v14 = v45;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      uint64_t v32 = v10->i64[0];
LABEL_59:
      uint64_t v51 = 0;
      do
      {
        int v52 = v10->i32[v51 + 2];
        v51 += 2;
      }
      while (v52 < (int)v32);
      unint64_t v53 = &v10->i8[v51 * 4];
      char v54 = a2;
      if (v51 == 2)
      {
        char v54 = a2;
        do
        {
          if (v53 >= (char *)v54) {
            break;
          }
          int v56 = v54[-1].i32[2];
          char v54 = (int8x16_t *)((char *)v54 - 8);
        }
        while (v56 >= (int)v32);
      }
      else
      {
        do
        {
          int v55 = v54[-1].i32[2];
          char v54 = (int8x16_t *)((char *)v54 - 8);
        }
        while (v55 >= (int)v32);
      }
      if (v53 >= (char *)v54)
      {
        long long v62 = v53 - 8;
        if (v53 - 8 == (char *)v10) {
          goto LABEL_77;
        }
LABEL_76:
        v10->i64[0] = *(void *)v62;
        goto LABEL_77;
      }
      long long v57 = &v10->i8[v51 * 4];
      long long v58 = (char *)v54;
      do
      {
        uint64_t v59 = *(void *)v57;
        *(void *)long long v57 = *(void *)v58;
        *(void *)long long v58 = v59;
        do
        {
          int v60 = *((_DWORD *)v57 + 2);
          v57 += 8;
        }
        while (v60 < (int)v32);
        do
        {
          int v61 = *((_DWORD *)v58 - 2);
          v58 -= 8;
        }
        while (v61 >= (int)v32);
      }
      while (v57 < v58);
      long long v62 = v57 - 8;
      if (v57 - 8 != (char *)v10) {
        goto LABEL_76;
      }
LABEL_77:
      *(void *)long long v62 = v32;
      if (v53 < (char *)v54) {
        goto LABEL_80;
      }
      BOOL v63 = sub_BA7FD0(v10, (int8x16_t *)v62);
      unint64_t v10 = (int8x16_t *)(v62 + 8);
      __n128 result = sub_BA7FD0((int8x16_t *)(v62 + 8), a2);
      if (result)
      {
        a2 = (int8x16_t *)v62;
        if (v63) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v63)
      {
LABEL_80:
        __n128 result = sub_BA73F0(v9, v62, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = (int8x16_t *)(v62 + 8);
      }
    }
  }
  long long v80 = (int8x16_t *)&v10->u64[1];
  BOOL v82 = v10 == a2 || v80 == a2;
  if (a4)
  {
    if (v82) {
      return result;
    }
    uint64_t v83 = 0;
    uint64_t v84 = v10;
    while (1)
    {
      __int32 v86 = v84->i32[2];
      __int32 v87 = v84->i32[0];
      uint64_t v84 = v80;
      if (v86 < v87)
      {
        uint64_t v88 = v80->i64[0];
        uint64_t v89 = v83;
        do
        {
          *(uint64_t *)((char *)&v10->i64[1] + v89) = *(uint64_t *)((char *)v10->i64 + v89);
          if (!v89)
          {
            uint64_t v85 = (uint64_t *)v10;
            goto LABEL_125;
          }
          int v90 = *(__int32 *)((char *)&v10->i32[-2] + v89);
          v89 -= 8;
        }
        while (v90 > (int)v88);
        uint64_t v85 = (uint64_t *)((char *)&v10->i64[1] + v89);
LABEL_125:
        *uint64_t v85 = v88;
      }
      long long v80 = (int8x16_t *)&v84->u64[1];
      v83 += 8;
      if (&v84->u64[1] == (unint64_t *)a2) {
        return result;
      }
    }
  }
  if (!v82)
  {
    do
    {
      int v119 = *(_DWORD *)(v9 + 8);
      int v120 = *(_DWORD *)v9;
      unint64_t v9 = (unint64_t)v80;
      if (v119 < v120)
      {
        uint64_t v121 = v80->i64[0];
        do
        {
          __n128 v122 = (uint64_t *)v80;
          uint64_t v123 = v80[-1].i64[1];
          long long v80 = (int8x16_t *)((char *)v80 - 8);
          *__n128 v122 = v123;
        }
        while (*((_DWORD *)v122 - 4) > (int)v121);
        v80->i64[0] = v121;
      }
      long long v80 = (int8x16_t *)(v9 + 8);
    }
    while ((int8x16_t *)(v9 + 8) != a2);
  }
  return result;
}

uint64_t *sub_BA7E5C(uint64_t *result, int *a2, int *a3, void *a4, void *a5)
{
  int v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if ((int)v6 < v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v6 = *result;
        *__n128 result = *(void *)a2;
        *(void *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    uint64_t v7 = *result;
    if ((int)v6 < v5)
    {
      *__n128 result = *(void *)a3;
LABEL_9:
      *(void *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *__n128 result = *(void *)a2;
    *(void *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < (int)v7)
    {
      *(void *)a2 = *(void *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < (int)v6)
  {
    uint64_t v8 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v10 = *result;
        *__n128 result = *(void *)a2;
        *(void *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          uint64_t v14 = *result;
          *__n128 result = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL sub_BA7FD0(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= a1->i32[0]) {
        return 1;
      }
      uint64_t v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      __int32 v9 = a1->i32[2];
      __int32 v10 = a2[-1].i32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          uint64_t v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < (int)v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      int v11 = a1->i32[2];
      int v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if ((int)v13 < v11)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > (int)v19)
          {
            uint64_t v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        uint64_t v14 = a1->i64[0];
        if ((int)v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if ((int)v13 >= (int)v14) {
            goto LABEL_44;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= (int)v13) {
        return 1;
      }
      uint64_t v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= a1->i32[2]) {
        return 1;
      }
      uint64_t v29 = a1->i64[1];
      uint64_t v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= (int)v28) {
        return 1;
      }
      uint64_t v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_BA7E5C(a1->i64, &a1->i32[2], a1[1].i32, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      int v3 = a1 + 1;
      int v4 = a1[1].i32[0];
      int v5 = a1->i32[2];
      int v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          uint64_t v16 = a1->i64[1];
          uint64_t v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > (int)v15)
          {
            uint64_t v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        uint64_t v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= (int)v7) {
            goto LABEL_28;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      uint64_t v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    int v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2) {
      return 1;
    }
  }
  uint64_t v24 = *(void *)v21;
  uint64_t v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8) {
        goto LABEL_37;
      }
      return v21 + 2 == (__int32 *)a2;
    }
    int v26 = *(__int32 *)((char *)&a1->i32[2] + v25);
    v25 -= 8;
  }
  while (v26 > (int)v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8) {
    goto LABEL_37;
  }
  return v21 + 2 == (__int32 *)a2;
}

uint64_t sub_BA8310(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "past_departures_interval_min");
  *(_DWORD *)a1 = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "future_departures_interval_min");
  *(_DWORD *)(a1 + 4) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "max_num_departures");
  unint64_t v4 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = v4;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "enable_decay");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "decay_growth_rate_per_min");
  double v6 = sub_5C7E8(a2, (uint64_t)__p) / 60.0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 64) = v6;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "decay_limit_min");
  *(_DWORD *)(a1 + 72) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int64x2_t v7 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 16) = v7;
  *(int64x2_t *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "thresholds");
  uint64_t v8 = sub_560F4(a2, (uint64_t)__p);
  __int32 v9 = (void *)v8;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    __int32 v10 = (void *)v9[2];
    if (!v10) {
      return a1;
    }
  }
  else
  {
    __int32 v10 = *(void **)(v8 + 16);
    if (!v10) {
      return a1;
    }
  }
  do
  {
    int v11 = sub_BA9FC0(&xmmword_25DFC78, (uint64_t)(v10 + 2));
    if (!v11) {
      sub_5AE8("unordered_map::at: key not found");
    }
    uint64_t v12 = *((unsigned __int8 *)v11 + 40);
    *(double *)(a1 + 16 + 8 * v12) = sub_5C7E8(v9, (uint64_t)(v10 + 2));
    __int32 v10 = (void *)*v10;
  }
  while (v10);
  return a1;
}

void sub_BA8608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BA8640(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v2 + 200);
      uint64_t v6 = *(void *)(v2 + 208);
      while (v5 != v6)
      {
        if (!*(unsigned char *)(v5 + 24)) {
          __n128 result = sub_BA86B8(v4, v5);
        }
        v5 += 72;
      }
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_BA86B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)a2 != v5)
  {
    do
    {
      int v26 = -1;
      sub_A20F00((uint64_t)v19, v4);
      sub_BAA1F0(&__p, (uint64_t)v19, 1uLL);
      *(unsigned char *)(v4 + 144) = sub_BA890C(a1, &__p);
      uint64_t v6 = (char *)__p;
      if (__p)
      {
        int64x2_t v7 = v18;
        uint64_t v8 = __p;
        if (v18 != __p)
        {
          do
          {
            if (!*((_DWORD *)v7 - 2))
            {
              __int32 v9 = (void *)*((void *)v7 - 6);
              if (v9)
              {
                *((void *)v7 - 5) = v9;
                operator delete(v9);
              }
              __int32 v10 = (void *)*((void *)v7 - 10);
              if (v10)
              {
                *((void *)v7 - 9) = v10;
                operator delete(v10);
              }
              int v11 = (void *)*((void *)v7 - 13);
              if (v11)
              {
                *((void *)v7 - 12) = v11;
                operator delete(v11);
              }
            }
            v7 -= 168;
          }
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v18 = v6;
        operator delete(v8);
      }
      if (!v26)
      {
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        if (v22)
        {
          int v23 = v22;
          operator delete(v22);
        }
        if (v20)
        {
          uint64_t v21 = v20;
          operator delete(v20);
        }
      }
      v4 += 168;
    }
    while (v4 != v5);
    uint64_t v12 = *(void *)(a2 + 8);
    if (*(void *)a2 != v12)
    {
      uint64_t v13 = *(void *)a2 + 168;
      while (v13 != v12)
      {
        int v14 = *(_DWORD *)(v13 - 56);
        int v15 = *(_DWORD *)(v13 + 112);
        v13 += 168;
        if (v14 != v15)
        {
          uint64_t result = 1;
          goto LABEL_30;
        }
      }
    }
  }
  uint64_t result = sub_BA890C(a1, (void *)a2);
LABEL_30:
  *(unsigned char *)(a2 + 56) = result;
  return result;
}

void sub_BA8878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a10) {
    sub_20AE468((uint64_t)&a11, a10);
  }
  if (*(_DWORD *)(v25 + 160)) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
  uint64_t v27 = *(void **)(v25 + 120);
  if (v27)
  {
    *(void *)(v25 + 128) = v27;
    operator delete(v27);
    uint64_t v28 = __p;
    if (!__p)
    {
LABEL_6:
      uint64_t v29 = a21;
      if (!a21) {
        goto LABEL_11;
      }
LABEL_10:
      a22 = (uint64_t)v29;
      operator delete(v29);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v28 = __p;
    if (!__p) {
      goto LABEL_6;
    }
  }
  a25 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a21;
  if (!a21) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t sub_BA890C(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v77 = a2[1];
  if (*a2 == v77) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int64x2_t v7 = 0;
  uint64_t v8 = 0;
  *(_OWORD *)__p = 0u;
  long long v85 = 0u;
  *(_OWORD *)uint64_t v83 = 0u;
  do
  {
    uint64_t v9 = *(void *)(v2 + 88);
    uint64_t v78 = v2;
    uint64_t v79 = *(void *)(v2 + 96);
    if (v9 != v79)
    {
      __int32 v10 = v6;
      int v11 = v8;
      while (1)
      {
        if (v4 >= v7)
        {
          uint64_t v14 = (v4 - v11) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            goto LABEL_88;
          }
          if ((v7 - v11) >> 2 > v15) {
            unint64_t v15 = (v7 - v11) >> 2;
          }
          if ((unint64_t)(v7 - v11) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16 >> 61) {
            goto LABEL_87;
          }
          uint64_t v17 = (char *)operator new(8 * v16);
          __int16 v18 = *(_WORD *)(v9 + 12);
          uint64_t v19 = &v17[8 * v14];
          *(_DWORD *)uint64_t v19 = *(_DWORD *)(v9 + 4);
          *((_WORD *)v19 + 2) = v18;
          uint64_t v8 = v19;
          while (v4 != v11)
          {
            int v20 = *((_DWORD *)v4 - 2);
            v4 -= 8;
            __int16 v21 = *((_WORD *)v4 + 2);
            *((_DWORD *)v8 - 2) = v20;
            v8 -= 8;
            *((_WORD *)v8 + 2) = v21;
          }
          int64x2_t v7 = &v17[8 * v16];
          uint64_t v4 = v19 + 8;
          v83[0] = v8;
          __p[0] = v7;
          if (v11) {
            operator delete(v11);
          }
          int v11 = v8;
        }
        else
        {
          __int16 v13 = *(_WORD *)(v9 + 12);
          *(_DWORD *)uint64_t v4 = *(_DWORD *)(v9 + 4);
          *((_WORD *)v4 + 2) = v13;
          v4 += 8;
        }
        v83[1] = v4;
        if (*(_DWORD *)(v9 + 8) == 0x7FFFFFFF) {
          int v22 = *(_DWORD *)(v9 + 4);
        }
        else {
          int v22 = *(_DWORD *)(v9 + 8);
        }
        if (v3 < v5)
        {
          __int16 v12 = *(_WORD *)(v9 + 12);
          *(_DWORD *)uint64_t v3 = v22;
          *((_WORD *)v3 + 2) = v12;
          v3 += 8;
          *(void *)&long long v85 = v3;
          v9 += 60;
          if (v9 == v79) {
            break;
          }
        }
        else
        {
          uint64_t v23 = (v3 - v10) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
LABEL_88:
          }
            sub_2E00();
          if ((v5 - v10) >> 2 > v24) {
            unint64_t v24 = (v5 - v10) >> 2;
          }
          if ((unint64_t)(v5 - v10) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25 >> 61) {
LABEL_87:
          }
            sub_188D718();
          int v26 = (char *)operator new(8 * v25);
          __int16 v27 = *(_WORD *)(v9 + 12);
          uint64_t v28 = &v26[8 * v23];
          *(_DWORD *)uint64_t v28 = v22;
          *((_WORD *)v28 + 2) = v27;
          uint64_t v6 = v28;
          while (v3 != v10)
          {
            int v29 = *((_DWORD *)v3 - 2);
            v3 -= 8;
            __int16 v30 = *((_WORD *)v3 + 2);
            *((_DWORD *)v6 - 2) = v29;
            v6 -= 8;
            *((_WORD *)v6 + 2) = v30;
          }
          uint64_t v5 = &v26[8 * v25];
          uint64_t v3 = v28 + 8;
          __p[1] = v6;
          *((void *)&v85 + 1) = v5;
          if (v10) {
            operator delete(v10);
          }
          __int32 v10 = v6;
          *(void *)&long long v85 = v3;
          v9 += 60;
          if (v9 == v79) {
            break;
          }
        }
      }
    }
    uint64_t v2 = v78 + 168;
  }
  while (v78 + 168 != v77);
  unint64_t v31 = 126 - 2 * __clz((v4 - (char *)v83[0]) >> 3);
  if (v4 == v83[0]) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  sub_BAA49C((uint64_t *)v83[0], v4, (uint64_t)&v80, v32, 1);
  unint64_t v33 = 126 - 2 * __clz((uint64_t)(v85 - (unint64_t)__p[1]) >> 3);
  if ((void *)v85 == __p[1]) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_BAA49C((uint64_t *)__p[1], (char *)v85, (uint64_t)&v80, v34, 1);
  int v35 = *(_DWORD *)(*a2 + 112);
  if (v35 == 0x7FFFFFFF)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v80, "Service status calculation component called on journey leg with invalid upcoming journey leg alternatives reference time");
    __int32 v74 = (void *)sub_2F404((uint64_t)exception, &v80);
  }
  int v36 = *(_DWORD *)(a1 + 4);
  if (*(int *)a1 < 0) {
    char v37 = -5;
  }
  else {
    char v37 = 5;
  }
  int v38 = *(_DWORD *)a1 / -10
      + v35
      + (((-103 * (char)(v37 + *(_DWORD *)a1 % 10)) >> 15) & 1)
      + ((-103 * (char)(v37 + *(_DWORD *)a1 % 10)) >> 10);
  if (v36 < 0) {
    char v39 = -5;
  }
  else {
    char v39 = 5;
  }
  unsigned int v40 = (((103 * (char)(v39 + v36 % 10)) >> 15) & 1) + ((103 * (char)(v39 + v36 % 10)) >> 10);
  int v41 = v36 / 10 + v35;
  int v42 = (int *)v83[0];
  if ((char *)v83[1] - (char *)v83[0] >= 8)
  {
    if ((int *)((char *)v83[1] - (char *)v83[0]) != dword_8)
    {
      unint64_t v43 = (unint64_t)((char *)v83[1] - (char *)v83[0]) >> 3;
      do
      {
        unint64_t v44 = (2 * v43) & 0xFFFFFFFFFFFFFFF8;
        _X15 = (char *)v42 + v44;
        __asm { PRFM            #0, [X15] }
        uint64_t v51 = &v42[2 * (v43 >> 1)];
        _X14 = (char *)v51 + v44;
        __asm { PRFM            #0, [X14] }
        if (*v51 >= v38) {
          unint64_t v54 = 0;
        }
        else {
          unint64_t v54 = v43 >> 1;
        }
        v42 += 2 * v54;
        v43 -= v43 >> 1;
      }
      while ((uint64_t)v43 > 1);
    }
    v42 += 2 * (*v42 < v38);
  }
  int v55 = v41 + v40;
  uint64_t v56 = *(void *)(a1 + 8);
  long long v57 = &v42[2 * v56];
  if (v57 > v83[1]) {
    long long v57 = (int *)v83[1];
  }
  long long v58 = v42;
  if (v57 != v42)
  {
    while (*v58 <= v55)
    {
      v58 += 2;
      if (v58 == v57)
      {
        long long v58 = v57;
        break;
      }
    }
  }
  uint64_t v59 = (int *)__p[1];
  int v60 = (int *)v85;
  if ((uint64_t)(v85 - (unint64_t)__p[1]) >= 8)
  {
    if ((void)v85 - (unint64_t)__p[1] != 8)
    {
      unint64_t v61 = ((unint64_t)v85 - (unint64_t)__p[1]) >> 3;
      do
      {
        unint64_t v62 = (2 * v61) & 0xFFFFFFFFFFFFFFF8;
        _X17 = (char *)v59 + v62;
        __asm { PRFM            #0, [X17] }
        int v65 = &v59[2 * (v61 >> 1)];
        _X16 = (char *)v65 + v62;
        __asm { PRFM            #0, [X16] }
        if (*v65 >= v38) {
          unint64_t v68 = 0;
        }
        else {
          unint64_t v68 = v61 >> 1;
        }
        v59 += 2 * v68;
        v61 -= v61 >> 1;
      }
      while ((uint64_t)v61 > 1);
    }
    v59 += 2 * (*v59 < v38);
  }
  unint64_t v69 = (unint64_t)&v59[2 * v56];
  if (v69 <= (unint64_t)v85) {
    int v60 = (int *)v69;
  }
  int v70 = v59;
  if (v60 != v59)
  {
    while (*v70 <= v55)
    {
      v70 += 2;
      if (v70 == v60)
      {
        int v70 = v60;
        break;
      }
    }
  }
  *(void *)&long long v80 = v42;
  *((void *)&v80 + 1) = v58;
  uint64_t v81 = v59;
  BOOL v82 = v70;
  uint64_t v71 = sub_BA92BC(a1, v38, (uint64_t *)&v80);
  if (__p[1])
  {
    *(void **)&long long v85 = __p[1];
    operator delete(__p[1]);
  }
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  return v71;
}

void sub_BA8E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_3310C((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_3310C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_BA8EC0(int *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 48);
  for (uint64_t i = *(void **)(a3 + 56); v3 != i; v3 += 31)
    sub_BA8F14(a1, a2, v3);
}

void sub_BA8F14(int *a1, _DWORD *a2, void *a3)
{
  *(_OWORD *)__p = 0u;
  long long v32 = 0u;
  *(_OWORD *)__int16 v30 = 0u;
  uint64_t v6 = a3[9];
  for (uint64_t i = a3[10]; v6 != i; v6 += 60)
    sub_BAA374((uint64_t)v30, (_DWORD *)(v6 + 4), (char *)(v6 + 12), (char *)(v6 + 13));
  uint64_t v8 = a3[12];
  for (uint64_t j = a3[13]; v8 != j; v8 += 60)
  {
    int v10 = *(_DWORD *)(v8 + 8);
    if (v10 == 0x7FFFFFFF) {
      int v10 = *(_DWORD *)(v8 + 4);
    }
    LODWORD(v33[0]) = v10;
    sub_BAA374((uint64_t)&__p[1], v33, (char *)(v8 + 12), (char *)(v8 + 13));
  }
  unint64_t v11 = 126 - 2 * __clz(((char *)v30[1] - (char *)v30[0]) >> 3);
  if (v30[1] == v30[0]) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_BAA49C((uint64_t *)v30[0], (char *)v30[1], (uint64_t)v33, v12, 1);
  unint64_t v13 = 126 - 2 * __clz((uint64_t)(v32 - (unint64_t)__p[1]) >> 3);
  if ((void *)v32 == __p[1]) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_BAA49C((uint64_t *)__p[1], (char *)v32, (uint64_t)v33, v14, 1);
  int v29 = a3;
  uint64_t v15 = a3[12];
  for (uint64_t k = a3[13]; v15 != k; v15 += 60)
  {
    if (*(unsigned char *)(v15 + 12) == 1)
    {
      int v18 = *(_DWORD *)(v15 + 8);
      if (v18 == 0x7FFFFFFF) {
        int v18 = *(_DWORD *)(v15 + 4);
      }
      int v19 = a1[1];
      if (*a1 < 0) {
        char v20 = -5;
      }
      else {
        char v20 = 5;
      }
      int v21 = *a1 / -10
          + v18
          + (((-103 * (char)(v20 + *a1 % 10)) >> 15) & 1)
          + ((-103 * (char)(v20 + *a1 % 10)) >> 10);
      int v22 = v19 / 10;
      int v23 = v19 % 10;
      if (v19 < 0) {
        char v24 = -5;
      }
      else {
        char v24 = 5;
      }
      sub_BA9A0C((uint64_t)a1, v21, v22 + v18 + (((103 * (char)(v24 + v23)) >> 15) & 1) + ((103 * (char)(v24 + v23)) >> 10), (uint64_t)v30, v33);
      char v17 = sub_BA92BC((uint64_t)a1, v21, v33);
    }
    else
    {
      char v17 = 0;
    }
    *(unsigned char *)(v15 + 56) = v17;
  }
  int v25 = a1[1];
  if (*a1 < 0) {
    char v26 = -5;
  }
  else {
    char v26 = 5;
  }
  int v27 = *a1 / -10
      + *a2
      + (((-103 * (char)(v26 + *a1 % 10)) >> 15) & 1)
      + ((-103 * (char)(v26 + *a1 % 10)) >> 10);
  if (v25 < 0) {
    char v28 = -5;
  }
  else {
    char v28 = 5;
  }
  sub_BA9A0C((uint64_t)a1, v27, v25 / 10 + *a2 + (((103 * (char)(v28 + v25 % 10)) >> 15) & 1) + ((103 * (char)(v28 + v25 % 10)) >> 10), (uint64_t)v30, v33);
  *((unsigned char *)v29 + 208) = sub_BA92BC((uint64_t)a1, v27, v33);
  if (__p[1])
  {
    *(void **)&long long v32 = __p[1];
    operator delete(__p[1]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void sub_BA9258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3310C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BA926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3310C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BA9280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3310C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BA9294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3310C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BA92A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3310C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BA92BC(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (v4 - *a3 < 8) {
    return 1;
  }
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  if (v6 == v7) {
    return 4;
  }
  unint64_t v9 = v7 - v6 - 8;
  if (v9 < 8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a3[2];
    do
    {
LABEL_13:
      if (*(unsigned __int8 *)(v11 + 5) - 3 < 0xFFFFFFFE) {
        ++v10;
      }
      v11 += 8;
    }
    while (v11 != v7);
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = (v9 >> 3) + 1;
  uint64_t v11 = v6 + 8 * (v14 & 0x3FFFFFFFFFFFFFFELL);
  uint64_t v15 = (unsigned __int8 *)(v6 + 13);
  uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    int v17 = *(v15 - 8);
    int v18 = *v15;
    v15 += 16;
    unsigned int v19 = v18 - 3;
    if ((v17 - 3) < 0xFFFFFFFE) {
      ++v12;
    }
    if (v19 < 0xFFFFFFFE) {
      ++v13;
    }
    v16 -= 2;
  }
  while (v16);
  uint64_t v10 = v13 + v12;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_13;
  }
LABEL_16:
  if (!v10) {
    return 4;
  }
  if (v3 == v4) {
    goto LABEL_22;
  }
  while (!*(unsigned char *)(v3 + 4))
  {
    v3 += 8;
    if (v3 == v4)
    {
LABEL_22:
      while (!*(unsigned char *)(v6 + 4))
      {
        v6 += 8;
        if (v6 == v7) {
          return 0;
        }
      }
      break;
    }
  }
  double v20 = sub_BA94A0(a1, a2, (uint64_t)a3);
  double v22 = *(double *)(a1 + 48);
  uint64_t v21 = a1 + 48;
  double v23 = v22;
  double v24 = *(double *)(v21 - 32);
  uint64_t v25 = v21 - 24;
  if (*(double *)(v21 - 24) > v24 && v20 >= *(double *)(v21 - 24)) {
    double v24 = *(double *)(v21 - 24);
  }
  else {
    uint64_t v25 = v21 - 32;
  }
  if (*(double *)(v21 - 16) > v24 && v20 >= *(double *)(v21 - 16))
  {
    double v24 = *(double *)(v21 - 16);
    uint64_t v25 = v21 - 16;
  }
  if (*(double *)(v21 - 8) > v24 && v20 >= *(double *)(v21 - 8))
  {
    double v24 = *(double *)(v21 - 8);
    uint64_t v25 = v21 - 8;
  }
  if (v23 > v24 && v20 >= v23) {
    uint64_t v25 = v21;
  }
  return ((unint64_t)(v25 - (v21 - 32)) >> 3);
}

double sub_BA94A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)a3;
  uint64_t v4 = *(_DWORD **)(a3 + 8);
  if ((uint64_t)v4 - *(void *)a3 < 8 || (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) <= 7)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(v23, "Empty input supplied to service status scoring algorithm");
    uint64_t v21 = (void *)sub_2F404((uint64_t)exception, (long long *)v23);
  }
  memset(v23, 0, sizeof(v23));
  for (; v3 != v4; v3 += 2)
  {
    double v8 = (double)(*v3 - a2);
    if (*(unsigned char *)(a1 + 56))
    {
      int v9 = *(_DWORD *)(a1 + 72);
      int v10 = v9 / 10;
      int v11 = v9 % 10;
      if (v9 < 0) {
        char v12 = -5;
      }
      else {
        char v12 = 5;
      }
      double v13 = (double)(int)(v10 + (((103 * (char)(v12 + v11)) >> 15) & 1)
                              + ((103 * (char)(v12 + v11)) >> 10));
      double v14 = *(double *)(a1 + 64);
      long double v15 = (1.0 - exp(-(v14 * v8))) * v13;
      double v16 = (1.0 - exp(-(v14 * (v8 + 1.0)))) * v13 / (v8 + 1.0);
      double v8 = v15;
    }
    else
    {
      double v16 = 1.0;
    }
    __p[0] = *(void **)&v8;
    __p[1] = *(void **)&v16;
    sub_3BFF8((char **)v23, __p);
  }
  int v17 = sub_BA96EC((char *)a1, a2, (uint64_t *)(a3 + 16), 0, (uint64_t)__p);
  double v18 = sub_BA9864((uint64_t)v17, (uint64_t)v23, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v18;
}

void sub_BA968C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BA96EC@<X0>(char *result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    int v9 = result;
    do
    {
      if ((a4 & 1) != 0 || *(unsigned __int8 *)(v5 + 5) - 1 >= 2)
      {
        double v11 = (double)(*(_DWORD *)v5 - a2);
        if (v9[56])
        {
          int v12 = *((_DWORD *)v9 + 18);
          int v13 = v12 / 10;
          int v14 = v12 % 10;
          if (v12 < 0) {
            char v15 = -5;
          }
          else {
            char v15 = 5;
          }
          double v16 = (double)(int)(v13
                            + (((103 * (char)(v15 + v14)) >> 15) & 1)
                            + ((103 * (char)(v15 + v14)) >> 10));
          double v17 = *((double *)v9 + 8);
          long double v18 = (1.0 - exp(-(v17 * v11))) * v16;
          double v19 = (1.0 - exp(-(v17 * (v11 + 1.0)))) * v16 / (v11 + 1.0);
          double v11 = v18;
        }
        else
        {
          double v19 = 1.0;
        }
        *(double *)&long long v20 = v11;
        *((double *)&v20 + 1) = v19;
        uint64_t result = sub_3BFF8((char **)a5, &v20);
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_BA9848(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_BA9864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(double **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a2 == v4 || (v5 = *(double **)a3, uint64_t v6 = *(void *)(a3 + 8), *(void *)a3 == v6))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v24, "Empty input supplied to EMD algorithm");
    double v23 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = (v6 - (uint64_t)v5) >> 4;
  unint64_t v10 = (v4 - (uint64_t)v3) >> 4;
  double v11 = *v5;
  double v12 = *v3;
  double v13 = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  do
  {
    double v17 = v16;
    double v18 = v15;
    double v19 = v13;
    if (v12 >= v11)
    {
      double v15 = v15 + v5[2 * v7++ + 1];
      double v13 = v11;
      if (v7 >= v9) {
        double v11 = 1.79769313e308;
      }
      else {
        double v11 = v5[2 * v7];
      }
    }
    else
    {
      double v16 = v16 + v3[2 * v8++ + 1];
      double v13 = v12;
      if (v8 >= v10) {
        double v12 = 1.79769313e308;
      }
      else {
        double v12 = v3[2 * v8];
      }
    }
    double v14 = v14 + vabdd_f64(v17, v18) * (v13 - v19);
  }
  while (v8 < v10 || v7 < v9);
  if (v15 >= v16) {
    double v20 = v16;
  }
  else {
    double v20 = v15;
  }
  double result = v14 / v20;
  if (v20 == 0.0) {
    return 0.0;
  }
  return result;
}

void sub_BA99DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BA9A0C@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = *(_DWORD **)a4;
  unint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = v6 - *(void *)a4;
  if (v7 >= 8)
  {
    if (v7 != 8)
    {
      unint64_t v8 = (unint64_t)v7 >> 3;
      do
      {
        unint64_t v9 = (2 * v8) & 0xFFFFFFFFFFFFFFF8;
        _X14 = (char *)v5 + v9;
        __asm { PRFM            #0, [X14] }
        double v16 = &v5[2 * (v8 >> 1)];
        _X13 = (char *)v16 + v9;
        __asm { PRFM            #0, [X13] }
        if (*v16 >= a2) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = v8 >> 1;
        }
        v5 += 2 * v19;
        v8 -= v8 >> 1;
      }
      while ((uint64_t)v8 > 1);
    }
    v5 += 2 * (*v5 < a2);
  }
  uint64_t v20 = *(void *)(result + 8);
  uint64_t v21 = &v5[2 * v20];
  if ((unint64_t)v21 > v6) {
    uint64_t v21 = *(_DWORD **)(a4 + 8);
  }
  double v22 = v5;
  if (v21 != v5)
  {
    while (*v22 <= a3)
    {
      v22 += 2;
      if (v22 == v21)
      {
        double v22 = v21;
        break;
      }
    }
  }
  double v23 = *(char **)(a4 + 24);
  long long v24 = *(char **)(a4 + 32);
  if (v24 - v23 >= 8)
  {
    if (v24 - v23 != 8)
    {
      unint64_t v25 = (unint64_t)(v24 - v23) >> 3;
      do
      {
        unint64_t v26 = (2 * v25) & 0xFFFFFFFFFFFFFFF8;
        _X17 = &v23[v26];
        __asm { PRFM            #0, [X17] }
        int v29 = &v23[8 * (v25 >> 1)];
        _X16 = &v29[v26];
        __asm { PRFM            #0, [X16] }
        if (*(_DWORD *)v29 >= a2) {
          unint64_t v32 = 0;
        }
        else {
          unint64_t v32 = v25 >> 1;
        }
        v23 += 8 * v32;
        v25 -= v25 >> 1;
      }
      while ((uint64_t)v25 > 1);
    }
    v23 += 8 * (*(_DWORD *)v23 < a2);
  }
  unint64_t v33 = &v23[8 * v20];
  if (v33 <= v24) {
    long long v24 = v33;
  }
  uint64_t v34 = v23;
  if (v24 != v23)
  {
    while (*(_DWORD *)v34 <= a3)
    {
      v34 += 8;
      if (v34 == v24)
      {
        uint64_t v34 = v24;
        break;
      }
    }
  }
  *a5 = v5;
  a5[1] = v22;
  a5[2] = v23;
  a5[3] = v34;
  return result;
}

uint64_t *sub_BA9B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    double v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      double v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            double v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          double v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)unint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  unint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        __int16 v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v29 = *(void **)(*(void *)a1 + 8 * v10);
        __int16 v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      __int16 v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int v29 = *(void **)(*(void *)a1 + 8 * v3);
  __int16 v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  double v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_BA9F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_BA9FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_BA9FC0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    double v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          double v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        double v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void *sub_BAA1F0(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x186186186186187) {
      sub_2E00();
    }
    int8x8_t v7 = (char *)operator new(168 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[168 * a3];
    a1[1] = sub_BAA2C8(v4, a2, a2 + 168 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_BAA29C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE4E8((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BAA2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint8x8_t v9 = (long long *)(a4 + v7);
      unint64_t v10 = (long long *)(a2 + v7);
      *(_DWORD *)(a4 + v7 + 160) = *(_DWORD *)(a2 + v7 + 160);
      int v11 = *(_DWORD *)(a2 + v7 + 160);
      if (v11 == 1)
      {
        long long v8 = *v10;
        *(long long *)((char *)v9 + 12) = *(long long *)((char *)v10 + 12);
        long long *v9 = v8;
      }
      else if (!v11)
      {
        sub_9F6FA0((uint64_t)v9, v10);
      }
      v7 += 168;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_BAA358(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE574(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BAA374(uint64_t a1, _DWORD *a2, char *a3, char *a4)
{
  uint8x8_t v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    double v13 = *(_DWORD **)a1;
    uint64_t v14 = ((uint64_t)v9 - *(void *)a1) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v8 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v18 = v15;
    }
    if (v18 >> 61) {
      sub_188D718();
    }
    uint64_t v19 = 8 * v18;
    uint64_t v20 = (char *)operator new(8 * v18);
    uint64_t v21 = &v20[8 * v14];
    char v22 = *a3;
    char v23 = *a4;
    *(_DWORD *)uint64_t v21 = *a2;
    v21[4] = v22;
    v21[5] = v23;
    for (uint64_t i = v21 + 8; v9 != v13; *((_WORD *)v21 + 2) = v25)
    {
      int v24 = *(v9 - 2);
      v9 -= 2;
      __int16 v25 = *((_WORD *)v9 + 2);
      *((_DWORD *)v21 - 2) = v24;
      v21 -= 8;
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v20[v19];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    char v10 = *a3;
    char v11 = *a4;
    _DWORD *v9 = *a2;
    *((unsigned char *)v9 + 4) = v10;
    *((unsigned char *)v9 + 5) = v11;
    uint64_t i = (char *)(v9 + 2);
  }
  *(void *)(a1 + 8) = i;
  return i - 8;
}

uint64_t *sub_BAA49C(uint64_t *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint8x8_t v9 = result;
LABEL_2:
  char v10 = a2 - 8;
  char v11 = a2 - 16;
  uint8x8_t v12 = a2 - 24;
  uint64_t v13 = (uint64_t)v9;
LABEL_3:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    uint8x8_t v9 = (uint64_t *)v13;
    uint64_t v15 = (uint64_t)&a2[-v13];
    unint64_t v16 = (uint64_t)&a2[-v13] >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v99 = a2 - 8;
          int v100 = *((_DWORD *)a2 - 2);
          if (v100 >= *(_DWORD *)v13
            && (*(_DWORD *)v13 < v100 || *(a2 - 4) >= *(unsigned __int8 *)(v13 + 4)))
          {
            return result;
          }
          uint64_t v102 = *(void *)v13;
          int v103 = *(_DWORD *)v99;
          *(_WORD *)(v13 + 4) = *((_WORD *)a2 - 2);
          *(_DWORD *)uint64_t v13 = v103;
          goto LABEL_208;
        case 3uLL:
          uint64_t v99 = (char *)(v13 + 8);
          int v104 = *(_DWORD *)(v13 + 8);
          if (v104 >= *(_DWORD *)v13
            && ((unsigned int v105 = *(unsigned __int8 *)(v13 + 12), *(_DWORD *)v13 >= v104)
              ? (BOOL v106 = v105 >= *(unsigned __int8 *)(v13 + 4))
              : (BOOL v106 = 1),
                v106))
          {
            if (*(_DWORD *)v10 >= v104 && (v104 < *(_DWORD *)v10 || *(a2 - 4) >= v105)) {
              return result;
            }
            uint64_t v108 = *(void *)(v13 + 8);
            int v109 = *(_DWORD *)v10;
            *(_WORD *)(v13 + 12) = *((_WORD *)a2 - 2);
            *(_DWORD *)uint64_t v99 = v109;
            *(_DWORD *)char v10 = v108;
            *((_WORD *)a2 - 2) = WORD2(v108);
            int v110 = *(_DWORD *)(v13 + 8);
            if (v110 >= *(_DWORD *)v13
              && (*(_DWORD *)v13 < v110 || *(unsigned __int8 *)(v13 + 12) >= *(unsigned __int8 *)(v13 + 4)))
            {
              return result;
            }
            uint64_t v102 = *(void *)v13;
            *(_DWORD *)uint64_t v13 = *(_DWORD *)v99;
            *(_WORD *)(v13 + 4) = *(_WORD *)(v13 + 12);
          }
          else
          {
            if (*(_DWORD *)v10 >= v104
              && (v104 >= *(_DWORD *)v10
                ? (BOOL v127 = *(a2 - 4) >= *(unsigned __int8 *)(v13 + 12))
                : (BOOL v127 = 1),
                  v127))
            {
              uint64_t v128 = *(void *)v13;
              *(_DWORD *)uint64_t v13 = *(_DWORD *)v99;
              *(_WORD *)(v13 + 4) = *(_WORD *)(v13 + 12);
              *(_DWORD *)(v13 + 8) = v128;
              *(_WORD *)(v13 + 12) = WORD2(v128);
              if (*(_DWORD *)v10 >= (int)v128
                && (*(_DWORD *)v10 > (int)v128 || *(a2 - 4) >= BYTE4(v128)))
              {
                return result;
              }
              uint64_t v102 = *(void *)v99;
              int v129 = *(_DWORD *)v10;
              *(_WORD *)(v13 + 12) = *((_WORD *)a2 - 2);
              *(_DWORD *)uint64_t v99 = v129;
            }
            else
            {
              uint64_t v102 = *(void *)v13;
              int v130 = *(_DWORD *)v10;
              *(_WORD *)(v13 + 4) = *((_WORD *)a2 - 2);
              *(_DWORD *)uint64_t v13 = v130;
            }
            uint64_t v99 = a2 - 8;
          }
LABEL_208:
          *(_DWORD *)uint64_t v99 = v102;
          *((_WORD *)v99 + 2) = WORD2(v102);
          return result;
        case 4uLL:
          return sub_BAB864((uint64_t *)v13, (uint64_t *)(v13 + 8), (int *)(v13 + 16), (int *)a2 - 2);
        case 5uLL:
          return sub_BABA80(v13, (uint64_t *)(v13 + 8), (int *)(v13 + 16), (int *)(v13 + 24), (int *)a2 - 2);
        default:
          JUMPOUT(0);
      }
    }
    if (v15 <= 191) {
      break;
    }
    uint64_t v17 = v14;
    if (v14 == 1)
    {
      if ((char *)v13 != a2)
      {
        unint64_t v124 = (v16 - 2) >> 1;
        unint64_t v125 = v124 + 1;
        uint64_t v126 = (uint64_t *)(v13 + 8 * v124);
        do
        {
          sub_BABBE4(v13, a3, (uint64_t)&a2[-v13] >> 3, v126--);
          --v125;
        }
        while (v125);
        return (uint64_t *)sub_BABD14((char *)v13, a2);
      }
      return result;
    }
    unint64_t v18 = v16 >> 1;
    uint64_t v19 = (char *)(v13 + 8 * (v16 >> 1));
    if ((unint64_t)v15 >= 0x401)
    {
      int v20 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 >= *(_DWORD *)v13
        && ((v21 = (unsigned __int8 *)(v13 + 4 + 8 * v18), unsigned int v22 = *v21, *(_DWORD *)v13 >= v20)
          ? (BOOL v23 = v22 >= *(unsigned __int8 *)(v13 + 4))
          : (BOOL v23 = 1),
            v23))
      {
        if (*(_DWORD *)v10 < v20
          || (v20 >= *(_DWORD *)v10 ? (BOOL v24 = *(a2 - 4) >= v22) : (BOOL v24 = 1), !v24))
        {
          uint64_t v25 = *(void *)v19;
          int v26 = *(_DWORD *)v10;
          *((_WORD *)v19 + 2) = *((_WORD *)a2 - 2);
          *(_DWORD *)uint64_t v19 = v26;
          *(_DWORD *)char v10 = v25;
          *((_WORD *)a2 - 2) = WORD2(v25);
          if (*(_DWORD *)v19 < *(_DWORD *)v13
            || ((unsigned int v27 = *v21, *(_DWORD *)v13 >= *(_DWORD *)v19)
              ? (BOOL v28 = v27 >= *(unsigned __int8 *)(v13 + 4))
              : (BOOL v28 = 1),
                !v28))
          {
            uint64_t v29 = *(void *)v13;
            int v30 = *(_DWORD *)v19;
            *(_WORD *)(v13 + 4) = *((_WORD *)v19 + 2);
            *(_DWORD *)uint64_t v13 = v30;
            BOOL v31 = (char *)(v13 + 8 * (v16 >> 1));
            goto LABEL_58;
          }
        }
      }
      else if (*(_DWORD *)v10 >= v20 {
             && (v20 >= *(_DWORD *)v10
      }
               ? (BOOL v42 = *(a2 - 4) >= *(unsigned __int8 *)(v13 + 8 * v18 + 4))
               : (BOOL v42 = 1),
                 v42))
      {
        uint64_t v43 = *(void *)v13;
        int v44 = *(_DWORD *)v19;
        *(_WORD *)(v13 + 4) = *((_WORD *)v19 + 2);
        *(_DWORD *)uint64_t v13 = v44;
        *(_DWORD *)uint64_t v19 = v43;
        *((_WORD *)v19 + 2) = WORD2(v43);
        if (*(_DWORD *)v10 < (int)v43
          || *(_DWORD *)v10 <= (int)v43 && *(a2 - 4) < BYTE4(v43))
        {
          uint64_t v29 = *(void *)v19;
          int v45 = *(_DWORD *)v10;
          *((_WORD *)v19 + 2) = *((_WORD *)a2 - 2);
          *(_DWORD *)uint64_t v19 = v45;
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v29 = *(void *)v13;
        int v47 = *(_DWORD *)v10;
        *(_WORD *)(v13 + 4) = *((_WORD *)a2 - 2);
        *(_DWORD *)uint64_t v13 = v47;
LABEL_57:
        BOOL v31 = a2 - 8;
LABEL_58:
        *(_DWORD *)BOOL v31 = v29;
        *((_WORD *)v31 + 2) = WORD2(v29);
      }
      uint64_t v48 = (uint64_t *)(v13 + 8);
      int v49 = *(_DWORD *)(v13 + 8);
      unint64_t v50 = v18 - 1;
      uint64_t v51 = v13 + 8 * (v18 - 1);
      int v52 = *(_DWORD *)v51;
      if (*(_DWORD *)v51 >= v49
        && ((unsigned int v53 = *(unsigned __int8 *)(v51 + 4), v49 < v52) || v53 >= *(unsigned __int8 *)(v13 + 12)))
      {
        if (*(_DWORD *)v11 < v52 || v52 >= *(_DWORD *)v11 && *(a2 - 12) < v53)
        {
          uint64_t v81 = *(void *)v51;
          int v82 = *(_DWORD *)v11;
          *(_WORD *)(v51 + 4) = *((_WORD *)a2 - 6);
          *(_DWORD *)uint64_t v51 = v82;
          *(_DWORD *)char v11 = v81;
          *((_WORD *)a2 - 6) = WORD2(v81);
          if (*(_DWORD *)v51 < *(_DWORD *)v48
            || *(_DWORD *)v48 >= *(_DWORD *)v51
            && *(unsigned __int8 *)(v51 + 4) < *(unsigned __int8 *)(v13 + 12))
          {
            uint64_t v54 = *v48;
            int v83 = *(_DWORD *)v51;
            *(_WORD *)(v13 + 12) = *(_WORD *)(v51 + 4);
            *(_DWORD *)uint64_t v48 = v83;
            uint64_t v56 = (char *)(v13 + 8 * (v18 - 1));
            goto LABEL_67;
          }
        }
      }
      else
      {
        if (*(_DWORD *)v11 < v52
          || v52 >= *(_DWORD *)v11
          && *(a2 - 12) < *(unsigned __int8 *)(v13 + 8 * v50 + 4))
        {
          uint64_t v54 = *v48;
          int v55 = *(_DWORD *)v11;
          *(_WORD *)(v13 + 12) = *((_WORD *)a2 - 6);
          *(_DWORD *)uint64_t v48 = v55;
          goto LABEL_66;
        }
        uint64_t v92 = *v48;
        int v93 = *(_DWORD *)v51;
        *(_WORD *)(v13 + 12) = *(_WORD *)(v51 + 4);
        *(_DWORD *)uint64_t v48 = v93;
        *(_DWORD *)uint64_t v51 = v92;
        *(_WORD *)(v51 + 4) = WORD2(v92);
        if (*(_DWORD *)v11 < (int)v92
          || *(_DWORD *)v11 <= (int)v92 && *(a2 - 12) < BYTE4(v92))
        {
          uint64_t v54 = *(void *)v51;
          int v94 = *(_DWORD *)v11;
          *(_WORD *)(v51 + 4) = *((_WORD *)a2 - 6);
          *(_DWORD *)uint64_t v51 = v94;
LABEL_66:
          uint64_t v56 = a2 - 16;
LABEL_67:
          *(_DWORD *)uint64_t v56 = v54;
          *((_WORD *)v56 + 2) = WORD2(v54);
        }
      }
      long long v58 = (uint64_t *)(v13 + 16);
      int v57 = *(_DWORD *)(v13 + 16);
      unint64_t v59 = v18 + 1;
      uint64_t v60 = v13 + 8 * (v18 + 1);
      int v61 = *(_DWORD *)v60;
      if (*(_DWORD *)v60 >= v57
        && ((unsigned int v62 = *(unsigned __int8 *)(v60 + 4), v57 < v61) || v62 >= *(unsigned __int8 *)(v13 + 20)))
      {
        if (*(_DWORD *)v12 < v61 || v61 >= *(_DWORD *)v12 && *(a2 - 20) < v62)
        {
          uint64_t v84 = *(void *)v60;
          int v85 = *(_DWORD *)v12;
          *(_WORD *)(v60 + 4) = *((_WORD *)a2 - 10);
          *(_DWORD *)uint64_t v60 = v85;
          *(_DWORD *)uint8x8_t v12 = v84;
          *((_WORD *)a2 - 10) = WORD2(v84);
          if (*(_DWORD *)v60 < *(_DWORD *)v58
            || *(_DWORD *)v58 >= *(_DWORD *)v60
            && *(unsigned __int8 *)(v60 + 4) < *(unsigned __int8 *)(v13 + 20))
          {
            uint64_t v63 = *v58;
            int v86 = *(_DWORD *)v60;
            *(_WORD *)(v13 + 20) = *(_WORD *)(v60 + 4);
            *(_DWORD *)long long v58 = v86;
            int v65 = (char *)(v13 + 8 * (v18 + 1));
            goto LABEL_76;
          }
        }
      }
      else
      {
        if (*(_DWORD *)v12 < v61
          || v61 >= *(_DWORD *)v12
          && *(a2 - 20) < *(unsigned __int8 *)(v13 + 8 * v59 + 4))
        {
          uint64_t v63 = *v58;
          int v64 = *(_DWORD *)v12;
          *(_WORD *)(v13 + 20) = *((_WORD *)a2 - 10);
          *(_DWORD *)long long v58 = v64;
          goto LABEL_75;
        }
        uint64_t v95 = *v58;
        int v96 = *(_DWORD *)v60;
        *(_WORD *)(v13 + 20) = *(_WORD *)(v60 + 4);
        *(_DWORD *)long long v58 = v96;
        *(_DWORD *)uint64_t v60 = v95;
        *(_WORD *)(v60 + 4) = WORD2(v95);
        if (*(_DWORD *)v12 < (int)v95
          || *(_DWORD *)v12 <= (int)v95 && *(a2 - 20) < BYTE4(v95))
        {
          uint64_t v63 = *(void *)v60;
          int v97 = *(_DWORD *)v12;
          *(_WORD *)(v60 + 4) = *((_WORD *)a2 - 10);
          *(_DWORD *)uint64_t v60 = v97;
LABEL_75:
          int v65 = a2 - 24;
LABEL_76:
          *(_DWORD *)int v65 = v63;
          *((_WORD *)v65 + 2) = WORD2(v63);
        }
      }
      int v66 = *(_DWORD *)v19;
      int v67 = *(_DWORD *)v51;
      if (*(_DWORD *)v19 < *(_DWORD *)v51)
      {
        int v68 = *(_DWORD *)v60;
        goto LABEL_81;
      }
      unsigned int v69 = *(unsigned __int8 *)(v13 + 8 * v50 + 4);
      uint64_t v70 = v13 + 8 * v18;
      unsigned int v73 = *(unsigned __int8 *)(v70 + 4);
      uint64_t v72 = (unsigned __int8 *)(v70 + 4);
      unsigned int v71 = v73;
      int v68 = *(_DWORD *)v60;
      if (v67 < v66 || v71 >= v69)
      {
        if (v68 < v66 || v66 >= v68 && *(unsigned __int8 *)(v13 + 8 * v59 + 4) < v71)
        {
          uint64_t v87 = *(void *)v19;
          int v88 = *(_DWORD *)v60;
          *(_DWORD *)uint64_t v19 = *(_DWORD *)v60;
          *((_WORD *)v19 + 2) = *(_WORD *)(v60 + 4);
          *(_DWORD *)uint64_t v60 = v87;
          *(_WORD *)(v60 + 4) = WORD2(v87);
          if (v88 < v67 || v67 >= v88 && *v72 < v69)
          {
            uint64_t v75 = *(void *)v51;
            *(_DWORD *)uint64_t v51 = *(_DWORD *)v19;
            *(_WORD *)(v51 + 4) = *((_WORD *)v19 + 2);
            uint64_t v60 = v13 + 8 * (v16 >> 1);
            goto LABEL_85;
          }
        }
      }
      else
      {
LABEL_81:
        if (v68 < v66
          || (unsigned int v74 = *(unsigned __int8 *)(v13 + 8 * v59 + 4), v66 >= v68)
          && v74 < *(unsigned __int8 *)(v13 + 8 * v18 + 4))
        {
          uint64_t v75 = *(void *)v51;
          *(_DWORD *)uint64_t v51 = *(_DWORD *)v60;
          *(_WORD *)(v51 + 4) = *(_WORD *)(v60 + 4);
          goto LABEL_85;
        }
        uint64_t v98 = *(void *)v51;
        *(_DWORD *)uint64_t v51 = *(_DWORD *)v19;
        *(_WORD *)(v51 + 4) = *((_WORD *)v19 + 2);
        *(_DWORD *)uint64_t v19 = v98;
        *((_WORD *)v19 + 2) = WORD2(v98);
        if (v68 < (int)v98 || v68 <= (int)v98 && v74 < BYTE4(v98))
        {
          uint64_t v75 = *(void *)v19;
          *(_DWORD *)uint64_t v19 = *(_DWORD *)v60;
          *((_WORD *)v19 + 2) = *(_WORD *)(v60 + 4);
LABEL_85:
          *(_DWORD *)uint64_t v60 = v75;
          *(_WORD *)(v60 + 4) = WORD2(v75);
        }
      }
      uint64_t v40 = *(void *)v13;
      int v76 = *(_DWORD *)v19;
      *(_WORD *)(v13 + 4) = *((_WORD *)v19 + 2);
      *(_DWORD *)uint64_t v13 = v76;
LABEL_87:
      *(_DWORD *)uint64_t v19 = v40;
      *((_WORD *)v19 + 2) = WORD2(v40);
      goto LABEL_88;
    }
    int v32 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 >= *(_DWORD *)v19
      && ((unsigned int v33 = *(unsigned __int8 *)(v13 + 4), v34 = (unsigned __int8 *)(v13 + 4 + 8 * v18), *(_DWORD *)v19 >= v32)
        ? (BOOL v35 = v33 >= *v34)
        : (BOOL v35 = 1),
          v35))
    {
      if (*(_DWORD *)v10 < v32 || v32 >= *(_DWORD *)v10 && *(a2 - 4) < v33)
      {
        uint64_t v36 = *(void *)v13;
        int v37 = *(_DWORD *)v10;
        *(_WORD *)(v13 + 4) = *((_WORD *)a2 - 2);
        *(_DWORD *)uint64_t v13 = v37;
        *(_DWORD *)char v10 = v36;
        *((_WORD *)a2 - 2) = WORD2(v36);
        if (*(_DWORD *)v13 < *(_DWORD *)v19
          || ((v38 = *v34, *(_DWORD *)v19 >= *(_DWORD *)v13) ? (BOOL v39 = *(unsigned __int8 *)(v13 + 4) >= v38) : (BOOL v39 = 1),
              !v39))
        {
          uint64_t v40 = *(void *)v19;
          int v41 = *(_DWORD *)v13;
          *((_WORD *)v19 + 2) = *(_WORD *)(v13 + 4);
          *(_DWORD *)uint64_t v19 = v41;
          uint64_t v19 = (char *)v13;
          goto LABEL_87;
        }
      }
    }
    else
    {
      if (*(_DWORD *)v10 < v32
        || v32 >= *(_DWORD *)v10 && *(a2 - 4) < *(unsigned __int8 *)(v13 + 4))
      {
        uint64_t v40 = *(void *)v19;
        int v46 = *(_DWORD *)v10;
        *((_WORD *)v19 + 2) = *((_WORD *)a2 - 2);
        *(_DWORD *)uint64_t v19 = v46;
LABEL_55:
        uint64_t v19 = a2 - 8;
        goto LABEL_87;
      }
      uint64_t v89 = *(void *)v19;
      int v90 = *(_DWORD *)v13;
      *((_WORD *)v19 + 2) = *(_WORD *)(v13 + 4);
      *(_DWORD *)uint64_t v19 = v90;
      *(_DWORD *)uint64_t v13 = v89;
      *(_WORD *)(v13 + 4) = WORD2(v89);
      if (*(_DWORD *)v10 < (int)v89
        || *(_DWORD *)v10 <= (int)v89 && *(a2 - 4) < BYTE4(v89))
      {
        uint64_t v40 = *(void *)v13;
        int v91 = *(_DWORD *)v10;
        *(_WORD *)(v13 + 4) = *((_WORD *)a2 - 2);
        *(_DWORD *)uint64_t v13 = v91;
        goto LABEL_55;
      }
    }
LABEL_88:
    if ((a5 & 1) == 0)
    {
      int v77 = *(_DWORD *)(v13 - 8);
      if (v77 >= *(_DWORD *)v13
        && (*(_DWORD *)v13 < v77 || *(unsigned __int8 *)(v13 - 4) >= *(unsigned __int8 *)(v13 + 4)))
      {
        double result = sub_BAB10C((uint64_t *)v13, (uint64_t *)a2);
        uint64_t v13 = (uint64_t)result;
        goto LABEL_134;
      }
    }
    unint64_t v78 = sub_BAB254((uint64_t *)v13, (uint64_t)a2);
    if ((v79 & 1) == 0) {
      goto LABEL_133;
    }
    BOOL v80 = sub_BAB3BC(v13, v78);
    uint64_t v13 = v78 + 8;
    double result = (uint64_t *)sub_BAB3BC(v78 + 8, (uint64_t)a2);
    if (result)
    {
      a4 = -v17;
      a2 = (char *)v78;
      if (v80) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v14 = v17 + 1;
    if (!v80)
    {
LABEL_133:
      double result = (uint64_t *)sub_BAA49C(v9, v78, a3, -v17, a5 & 1);
      uint64_t v13 = v78 + 8;
LABEL_134:
      a5 = 0;
      a4 = -v17;
      goto LABEL_3;
    }
  }
  uint64_t v111 = (char *)(v13 + 8);
  BOOL v113 = (char *)v13 == a2 || v111 == a2;
  if (a5)
  {
    if (!v113)
    {
      uint64_t v114 = 0;
      uint64_t v115 = v13;
      do
      {
        uint64_t v116 = v111;
        int v117 = *(_DWORD *)(v115 + 8);
        if (v117 < *(_DWORD *)v115
          || (*(_DWORD *)v115 >= v117
            ? (BOOL v118 = *(unsigned __int8 *)(v115 + 12) >= *(unsigned __int8 *)(v115 + 4))
            : (BOOL v118 = 1),
              !v118))
        {
          uint64_t v119 = *(void *)(v115 + 8);
          *(_DWORD *)uint64_t v116 = *(_DWORD *)v115;
          *((_WORD *)v116 + 2) = *(_WORD *)(v115 + 4);
          uint64_t v120 = v13;
          if (v115 != v13)
          {
            uint64_t v121 = v114;
            while (1)
            {
              uint64_t v122 = v13 + v121;
              int v123 = *(_DWORD *)(v13 + v121 - 8);
              if (v123 <= (int)v119
                && (v123 < (int)v119 || *(unsigned __int8 *)(v122 - 4) <= BYTE4(v119)))
              {
                break;
              }
              *(_DWORD *)uint64_t v122 = *(_DWORD *)(v13 + v121 - 8);
              *(_WORD *)(v122 + 4) = *(_WORD *)(v13 + v121 - 4);
              v121 -= 8;
              if (!v121)
              {
                uint64_t v120 = v13;
                goto LABEL_175;
              }
            }
            uint64_t v120 = v13 + v121;
          }
LABEL_175:
          *(_DWORD *)uint64_t v120 = v119;
          *(unsigned char *)(v120 + 4) = BYTE4(v119);
          *(unsigned char *)(v120 + 5) = BYTE5(v119);
        }
        uint64_t v111 = v116 + 8;
        v114 += 8;
        uint64_t v115 = (uint64_t)v116;
      }
      while (v116 + 8 != a2);
    }
  }
  else if (!v113)
  {
    do
    {
      char v131 = v111;
      int v132 = *((_DWORD *)v9 + 2);
      if (v132 < *(_DWORD *)v9
        || (*(_DWORD *)v9 >= v132
          ? (BOOL v133 = *((unsigned __int8 *)v9 + 12) >= *((unsigned __int8 *)v9 + 4))
          : (BOOL v133 = 1),
            !v133))
      {
        uint64_t v134 = *(void *)v111;
        for (uint64_t i = v131; ; i -= 8)
        {
          *(_DWORD *)uint64_t i = *((_DWORD *)i - 2);
          *((_WORD *)i + 2) = *((_WORD *)i - 2);
          int v136 = *((_DWORD *)i - 4);
          if (v136 <= (int)v134 && (v136 < (int)v134 || *(i - 12) <= BYTE4(v134))) {
            break;
          }
        }
        *((_DWORD *)i - 2) = v134;
        *(i - 4) = BYTE4(v134);
        *(i - 3) = BYTE5(v134);
      }
      uint64_t v111 = v131 + 8;
      uint8x8_t v9 = (uint64_t *)v131;
    }
    while (v131 + 8 != a2);
  }
  return result;
}

uint64_t *sub_BAB10C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  unsigned int v3 = BYTE4(*a1);
  int v4 = *((_DWORD *)a2 - 2);
  if (v4 > (int)*a1 || (v4 >= (int)*a1 ? (BOOL v5 = *((unsigned __int8 *)a2 - 4) > v3) : (BOOL v5 = 0), v5))
  {
    char v11 = a1 + 1;
    do
    {
      uint64_t v7 = v11;
      int v12 = *(_DWORD *)v11;
      if (*(_DWORD *)v11 > (int)v2) {
        break;
      }
      unsigned int v13 = *((unsigned __int8 *)v11++ + 4);
    }
    while (v12 < (int)v2 || v13 <= v3);
  }
  else
  {
    unint64_t v6 = (unint64_t)(a1 + 1);
    do
    {
      uint64_t v7 = (uint64_t *)v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      int v8 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 > (int)v2) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(v6 + 4);
      v6 += 8;
    }
    while (v8 < (int)v2 || v9 <= v3);
  }
  if (v7 < a2)
  {
    for (--a2; v4 > (int)v2 || v4 >= (int)v2 && *((unsigned __int8 *)a2 + 4) > v3; --a2)
    {
      int v15 = *((_DWORD *)a2 - 2);
      int v4 = v15;
    }
  }
  while (v7 < a2)
  {
    uint64_t v16 = *v7;
    int v17 = *(_DWORD *)a2;
    *((_WORD *)v7 + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)uint64_t v7 = v17;
    *(_DWORD *)a2 = v16;
    *((_WORD *)a2 + 2) = WORD2(v16);
    unint64_t v18 = v7 + 1;
    do
    {
      uint64_t v7 = v18;
      int v19 = *(_DWORD *)v18;
      if (*(_DWORD *)v18 > (int)v2) {
        break;
      }
      unsigned int v20 = *((unsigned __int8 *)v18++ + 4);
    }
    while (v19 < (int)v2 || v20 <= v3);
    do
    {
      do
      {
        int v22 = *((_DWORD *)a2-- - 2);
        BOOL v23 = v22 < (int)v2;
      }
      while (v22 > (int)v2);
    }
    while (!v23 && *((unsigned __int8 *)a2 + 4) > v3);
  }
  if (v7 - 1 != a1)
  {
    int v25 = *((_DWORD *)v7 - 2);
    *((_WORD *)a1 + 2) = *((_WORD *)v7 - 2);
    *(_DWORD *)a1 = v25;
  }
  *((_DWORD *)v7 - 2) = v2;
  *((unsigned char *)v7 - 4) = v3;
  *((unsigned char *)v7 - 3) = BYTE5(v2);
  return v7;
}

unint64_t sub_BAB254(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unsigned int v4 = BYTE4(*a1);
  while (1)
  {
    int v5 = a1[v2 + 1];
    if (v5 >= (int)v3 && (v5 > (int)v3 || BYTE4(a1[v2 + 1]) >= v4)) {
      break;
    }
    ++v2;
  }
  unint64_t v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    uint64_t v8 = a2 - 8;
    do
    {
      unsigned int v9 = (_DWORD *)v8;
      int v10 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 < (int)v3) {
        break;
      }
      unsigned int v11 = *(unsigned __int8 *)(v8 + 4);
      v8 -= 8;
    }
    while (v10 > (int)v3 || v11 >= v4);
LABEL_24:
    unint64_t v15 = v7;
    if (v7 < (unint64_t)v9)
    {
      uint64_t v16 = v9;
      do
      {
        uint64_t v17 = *(void *)v15;
        int v18 = *v16;
        *(_WORD *)(v15 + 4) = *((_WORD *)v16 + 2);
        *(_DWORD *)unint64_t v15 = v18;
        *uint64_t v16 = v17;
        *((_WORD *)v16 + 2) = WORD2(v17);
        do
        {
          do
          {
            int v19 = *(_DWORD *)(v15 + 8);
            v15 += 8;
            BOOL v20 = v19 <= (int)v3;
          }
          while (v19 < (int)v3);
        }
        while (v20 && *(unsigned __int8 *)(v15 + 4) < v4);
        int v22 = v16 - 2;
        do
        {
          uint64_t v16 = v22;
          int v23 = *v22;
          if (*v22 < (int)v3) {
            break;
          }
          unsigned int v24 = *((unsigned __int8 *)v22 + 4);
          v22 -= 2;
        }
        while (v23 > (int)v3 || v24 >= v4);
      }
      while (v15 < (unint64_t)v16);
    }
  }
  else
  {
    unsigned int v13 = (_DWORD *)(a2 - 8);
    while (1)
    {
      unsigned int v9 = v13;
      if (v7 >= (unint64_t)(v13 + 2)) {
        break;
      }
      if (*v13 >= (int)v3)
      {
        v13 -= 2;
        if (*v9 > (int)v3 || *((unsigned __int8 *)v9 + 4) >= v4) {
          continue;
        }
      }
      goto LABEL_24;
    }
    unint64_t v15 = v7;
  }
  if ((uint64_t *)(v15 - 8) != a1)
  {
    int v26 = *(_DWORD *)(v15 - 8);
    *((_WORD *)a1 + 2) = *(_WORD *)(v15 - 4);
    *(_DWORD *)a1 = v26;
  }
  *(_DWORD *)(v15 - 8) = v3;
  *(unsigned char *)(v15 - 4) = v4;
  *(unsigned char *)(v15 - 3) = BYTE5(v3);
  return v15 - 8;
}

BOOL sub_BAB3BC(uint64_t a1, uint64_t a2)
{
  switch((a2 - a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v14 = (int *)(a2 - 8);
      int v15 = *(_DWORD *)(a2 - 8);
      if (v15 < *(_DWORD *)a1
        || (*(_DWORD *)a1 >= v15
          ? (BOOL v16 = *(unsigned __int8 *)(a2 - 4) >= *(unsigned __int8 *)(a1 + 4))
          : (BOOL v16 = 1),
            !v16))
      {
        uint64_t v17 = *(void *)a1;
        int v18 = *v14;
        *(_WORD *)(a1 + 4) = *(_WORD *)(a2 - 4);
        *(_DWORD *)a1 = v18;
        *uint64_t v14 = v17;
        *(_WORD *)(a2 - 4) = WORD2(v17);
      }
      return 1;
    case 3:
      uint64_t v20 = a1 + 8;
      int v19 = *(_DWORD *)(a1 + 8);
      uint64_t v21 = (int *)(a2 - 8);
      if (v19 < *(_DWORD *)a1
        || ((unsigned int v22 = *(unsigned __int8 *)(a1 + 12), *(_DWORD *)a1 >= v19)
          ? (BOOL v23 = v22 >= *(unsigned __int8 *)(a1 + 4))
          : (BOOL v23 = 1),
            !v23))
      {
        if (*v21 < v19
          || (v19 >= *v21
            ? (BOOL v33 = *(unsigned __int8 *)(a2 - 4) >= *(unsigned __int8 *)(a1 + 12))
            : (BOOL v33 = 1),
              !v33))
        {
          uint64_t v28 = *(void *)a1;
          int v36 = *v21;
          *(_WORD *)(a1 + 4) = *(_WORD *)(a2 - 4);
          *(_DWORD *)a1 = v36;
          goto LABEL_63;
        }
        uint64_t v34 = *(void *)a1;
        *(_DWORD *)a1 = *(_DWORD *)v20;
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v34;
        *(_WORD *)(a1 + 12) = WORD2(v34);
        if (*v21 < (int)v34 || *v21 <= (int)v34 && *(unsigned __int8 *)(a2 - 4) < BYTE4(v34))
        {
          uint64_t v28 = *(void *)v20;
          int v35 = *v21;
          *(_WORD *)(a1 + 12) = *(_WORD *)(a2 - 4);
          *(_DWORD *)uint64_t v20 = v35;
LABEL_63:
          uint64_t v20 = a2 - 8;
          goto LABEL_64;
        }
        return 1;
      }
      if (*v21 < v19 || (v19 >= *v21 ? (BOOL v24 = *(unsigned __int8 *)(a2 - 4) >= v22) : (BOOL v24 = 1), !v24))
      {
        uint64_t v25 = *(void *)(a1 + 8);
        int v26 = *v21;
        *(_WORD *)(a1 + 12) = *(_WORD *)(a2 - 4);
        *(_DWORD *)uint64_t v20 = v26;
        int *v21 = v25;
        *(_WORD *)(a2 - 4) = WORD2(v25);
        int v27 = *(_DWORD *)(a1 + 8);
        if (v27 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= v27 && *(unsigned __int8 *)(a1 + 12) < *(unsigned __int8 *)(a1 + 4))
        {
          uint64_t v28 = *(void *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v20;
          *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
LABEL_64:
          *(_DWORD *)uint64_t v20 = v28;
          *(_WORD *)(v20 + 4) = WORD2(v28);
          return 1;
        }
        return 1;
      }
      return 1;
    case 4:
      sub_BAB864((uint64_t *)a1, (uint64_t *)(a1 + 8), (int *)(a1 + 16), (int *)(a2 - 8));
      return 1;
    case 5:
      sub_BABA80(a1, (uint64_t *)(a1 + 8), (int *)(a1 + 16), (int *)(a1 + 24), (int *)(a2 - 8));
      return 1;
    default:
      uint64_t v3 = a1 + 16;
      int v4 = *(_DWORD *)a1;
      uint64_t v5 = a1 + 8;
      int v6 = *(_DWORD *)(a1 + 8);
      if (v6 >= *(_DWORD *)a1
        && ((unsigned int v7 = *(unsigned __int8 *)(a1 + 4), v8 = *(unsigned __int8 *)(a1 + 12), v4 >= v6)
          ? (BOOL v9 = v8 >= v7)
          : (BOOL v9 = 1),
            v9))
      {
        if (*(_DWORD *)v3 < v6 || (v6 >= *(_DWORD *)v3 ? (BOOL v10 = *(unsigned __int8 *)(a1 + 20) >= v8) : (BOOL v10 = 1), !v10))
        {
          uint64_t v11 = *(void *)v5;
          int v12 = *(_DWORD *)v3;
          *(_DWORD *)uint64_t v5 = *(_DWORD *)v3;
          *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 20);
          *(_DWORD *)uint64_t v3 = v11;
          *(_WORD *)(a1 + 20) = WORD2(v11);
          if (v12 < v4 || v4 >= v12 && *(unsigned __int8 *)(a1 + 12) < v7)
          {
            uint64_t v13 = *(void *)a1;
            *(_DWORD *)a1 = *(_DWORD *)v5;
            *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
LABEL_67:
            *(_DWORD *)uint64_t v5 = v13;
            *(_WORD *)(v5 + 4) = WORD2(v13);
          }
        }
      }
      else
      {
        int v29 = *(_DWORD *)v3;
        if (*(_DWORD *)v3 < v6
          || ((unsigned int v30 = *(unsigned __int8 *)(a1 + 20), v6 >= v29)
            ? (BOOL v31 = v30 >= *(unsigned __int8 *)(a1 + 12))
            : (BOOL v31 = 1),
              !v31))
        {
          uint64_t v13 = *(void *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v3;
          *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 20);
          goto LABEL_66;
        }
        uint64_t v32 = *(void *)a1;
        *(_DWORD *)a1 = *(_DWORD *)v5;
        *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v32;
        *(_WORD *)(a1 + 12) = WORD2(v32);
        if (v29 < (int)v32 || v29 <= (int)v32 && v30 < BYTE4(v32))
        {
          uint64_t v13 = *(void *)v5;
          *(_DWORD *)uint64_t v5 = *(_DWORD *)v3;
          *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 20);
LABEL_66:
          uint64_t v5 = a1 + 16;
          goto LABEL_67;
        }
      }
      uint64_t v37 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v38 = 0;
      int v39 = 0;
      while (1)
      {
        if (*(_DWORD *)v37 < *(_DWORD *)v3
          || (*(_DWORD *)v3 >= *(_DWORD *)v37
            ? (BOOL v41 = *(unsigned __int8 *)(v37 + 4) >= *(unsigned __int8 *)(v3 + 4))
            : (BOOL v41 = 1),
              !v41))
        {
          uint64_t v42 = *(void *)v37;
          *(_DWORD *)uint64_t v37 = *(_DWORD *)v3;
          *(_WORD *)(v37 + 4) = *(_WORD *)(v3 + 4);
          uint64_t v40 = a1;
          if (v3 != a1)
          {
            uint64_t v43 = v38;
            while (1)
            {
              int v44 = *(_DWORD *)(a1 + v43 + 8);
              if (v44 <= (int)v42
                && (v44 < (int)v42 || *(unsigned __int8 *)(a1 + v43 + 12) <= BYTE4(v42)))
              {
                break;
              }
              *(_DWORD *)(a1 + v43 + 16) = *(_DWORD *)(a1 + v43 + 8);
              *(_WORD *)(a1 + v43 + 20) = *(_WORD *)(a1 + v43 + 12);
              v43 -= 8;
              if (v43 == -16)
              {
                uint64_t v40 = a1;
                goto LABEL_71;
              }
            }
            uint64_t v40 = a1 + v43 + 16;
          }
LABEL_71:
          *(_DWORD *)uint64_t v40 = v42;
          *(unsigned char *)(v40 + 4) = BYTE4(v42);
          *(unsigned char *)(v40 + 5) = BYTE5(v42);
          if (++v39 == 8) {
            return v37 + 8 == a2;
          }
        }
        uint64_t v3 = v37;
        v38 += 8;
        v37 += 8;
        if (v37 == a2) {
          return 1;
        }
      }
  }
}

uint64_t *sub_BAB864(uint64_t *result, uint64_t *a2, int *a3, int *a4)
{
  int v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 >= *(_DWORD *)result
    && ((unsigned int v5 = *((unsigned __int8 *)a2 + 4), *(_DWORD *)result >= v4)
      ? (BOOL v6 = v5 >= *((unsigned __int8 *)result + 4))
      : (BOOL v6 = 1),
        v6))
  {
    LODWORD(v7) = *a3;
    if (*a3 >= v4 && (v4 < (int)v7 || *((unsigned __int8 *)a3 + 4) >= v5)) {
      goto LABEL_29;
    }
    uint64_t v7 = *a2;
    int v9 = *a3;
    *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
    *(_DWORD *)a2 = v9;
    *a3 = v7;
    *((_WORD *)a3 + 2) = WORD2(v7);
    if (*(_DWORD *)a2 >= *(_DWORD *)result
      && (*(_DWORD *)result < *(_DWORD *)a2
       || *((unsigned __int8 *)a2 + 4) >= *((unsigned __int8 *)result + 4)))
    {
      goto LABEL_29;
    }
    uint64_t v7 = *result;
    int v10 = *(_DWORD *)a2;
    *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
    *(_DWORD *)double result = v10;
    uint64_t v11 = (int *)a2;
  }
  else
  {
    if (*a3 >= v4
      && (v4 >= *a3 ? (BOOL v12 = *((unsigned __int8 *)a3 + 4) >= *((unsigned __int8 *)a2 + 4)) : (BOOL v12 = 1), v12))
    {
      uint64_t v13 = *result;
      int v14 = *(_DWORD *)a2;
      *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
      *(_DWORD *)double result = v14;
      *(_DWORD *)a2 = v13;
      *((_WORD *)a2 + 2) = WORD2(v13);
      LODWORD(v7) = *a3;
      if (*a3 >= (int)v13 && ((int)v7 > (int)v13 || *((unsigned __int8 *)a3 + 4) >= BYTE4(v13))) {
        goto LABEL_29;
      }
      uint64_t v7 = *a2;
      int v15 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *(_DWORD *)a2 = v15;
    }
    else
    {
      uint64_t v7 = *result;
      int v16 = *a3;
      *((_WORD *)result + 2) = *((_WORD *)a3 + 2);
      *(_DWORD *)double result = v16;
    }
    uint64_t v11 = a3;
  }
  int *v11 = v7;
  *((_WORD *)v11 + 2) = WORD2(v7);
  LODWORD(v7) = *a3;
LABEL_29:
  if (*a4 < (int)v7 || (int)v7 >= *a4 && *((unsigned __int8 *)a4 + 4) < *((unsigned __int8 *)a3 + 4))
  {
    uint64_t v17 = *(void *)a3;
    int v18 = *a4;
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *a3 = v18;
    *a4 = v17;
    *((_WORD *)a4 + 2) = WORD2(v17);
    if (*a3 < *(_DWORD *)a2
      || *(_DWORD *)a2 >= *a3 && *((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
    {
      uint64_t v19 = *a2;
      int v20 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *(_DWORD *)a2 = v20;
      *a3 = v19;
      *((_WORD *)a3 + 2) = WORD2(v19);
      if (*(_DWORD *)a2 < *(_DWORD *)result
        || *(_DWORD *)result >= *(_DWORD *)a2
        && *((unsigned __int8 *)a2 + 4) < *((unsigned __int8 *)result + 4))
      {
        uint64_t v21 = *result;
        int v22 = *(_DWORD *)a2;
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)double result = v22;
        *(_DWORD *)a2 = v21;
        *((_WORD *)a2 + 2) = WORD2(v21);
      }
    }
  }
  return result;
}

uint64_t *sub_BABA80(uint64_t a1, uint64_t *a2, int *a3, int *a4, int *a5)
{
  double result = sub_BAB864((uint64_t *)a1, a2, a3, a4);
  if (*a5 < *a4
    || (*a4 >= *a5 ? (BOOL v11 = *((unsigned __int8 *)a5 + 4) >= *((unsigned __int8 *)a4 + 4)) : (BOOL v11 = 1), !v11))
  {
    uint64_t v12 = *(void *)a4;
    int v13 = *a5;
    *((_WORD *)a4 + 2) = *((_WORD *)a5 + 2);
    *a4 = v13;
    *a5 = v12;
    *((_WORD *)a5 + 2) = WORD2(v12);
    if (*a4 < *a3 || *a3 >= *a4 && *((unsigned __int8 *)a4 + 4) < *((unsigned __int8 *)a3 + 4))
    {
      uint64_t v14 = *(void *)a3;
      int v15 = *a4;
      *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
      *a3 = v15;
      *a4 = v14;
      *((_WORD *)a4 + 2) = WORD2(v14);
      if (*a3 < *(_DWORD *)a2
        || *(_DWORD *)a2 >= *a3 && *((unsigned __int8 *)a3 + 4) < *((unsigned __int8 *)a2 + 4))
      {
        uint64_t v16 = *a2;
        int v17 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *(_DWORD *)a2 = v17;
        *a3 = v16;
        *((_WORD *)a3 + 2) = WORD2(v16);
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a1 >= *(_DWORD *)a2 && *((unsigned __int8 *)a2 + 4) < *(unsigned __int8 *)(a1 + 4))
        {
          uint64_t v18 = *(void *)a1;
          int v19 = *(_DWORD *)a2;
          *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
          *(_DWORD *)a1 = v19;
          *(_DWORD *)a2 = v18;
          *((_WORD *)a2 + 2) = WORD2(v18);
        }
      }
    }
  }
  return result;
}

uint64_t sub_BABBE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      unsigned int v8 = (int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[2];
        if (*v8 < v10
          || (v10 >= *v8
            ? (BOOL v11 = *(unsigned __int8 *)(result + 8 * v7 + 4) >= *((unsigned __int8 *)v8 + 12))
            : (BOOL v11 = 1),
              !v11))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      if (*v8 >= *(_DWORD *)a4
        && (*(_DWORD *)a4 < *v8 || *((unsigned __int8 *)v8 + 4) >= *((unsigned __int8 *)a4 + 4)))
      {
        unint64_t v13 = *a4;
        unsigned int v14 = BYTE4(*a4);
        do
        {
          int v15 = a4;
          a4 = (uint64_t *)v8;
          int v16 = *v8;
          *((_WORD *)v15 + 2) = *((_WORD *)a4 + 2);
          *(_DWORD *)int v15 = v16;
          if (v5 < v7) {
            break;
          }
          uint64_t v17 = (2 * v7) | 1;
          unsigned int v8 = (int *)(result + 8 * v17);
          uint64_t v18 = 2 * v7 + 2;
          if (v18 < a3)
          {
            int v19 = v8[2];
            if (*v8 < v19
              || (v19 >= *v8
                ? (BOOL v20 = *(unsigned __int8 *)(result + 8 * v17 + 4) >= *((unsigned __int8 *)v8 + 12))
                : (BOOL v20 = 1),
                  !v20))
            {
              v8 += 2;
              uint64_t v17 = v18;
            }
          }
          if (*v8 < (int)v13) {
            break;
          }
          BOOL v21 = *v8 > (int)v13 || *((unsigned __int8 *)v8 + 4) >= v14;
          uint64_t v7 = v17;
        }
        while (v21);
        *(_DWORD *)a4 = v13;
        *((unsigned char *)a4 + 4) = v14;
        *((unsigned char *)a4 + 5) = BYTE5(v13);
      }
    }
  }
  return result;
}

char *sub_BABD14(char *result, char *a2)
{
  if (a2 - result >= 9)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)result;
      uint64_t v6 = result;
      do
      {
        unsigned int v8 = v6;
        uint64_t v9 = v4 + 1;
        v6 += 8 * v4 + 8;
        uint64_t v10 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        uint64_t v11 = v10 + 2;
        if (v11 < v2)
        {
          int v12 = *((_DWORD *)v6 + 2);
          if (*(_DWORD *)v6 < v12
            || ((unsigned int v13 = v8[8 * v9 + 4], v12 >= *(_DWORD *)v6)
              ? (BOOL v14 = v13 >= v6[12])
              : (BOOL v14 = 1),
                !v14))
          {
            v6 += 8;
            uint64_t v4 = v11;
          }
        }
        int v7 = *(_DWORD *)v6;
        *((_WORD *)v8 + 2) = *((_WORD *)v6 + 2);
        *(_DWORD *)unsigned int v8 = v7;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v6 == a2)
      {
        *(_DWORD *)uint64_t v6 = v5;
        *((_WORD *)v6 + 2) = WORD2(v5);
      }
      else
      {
        int v15 = *(_DWORD *)a2;
        *((_WORD *)v6 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)uint64_t v6 = v15;
        *((_WORD *)a2 + 2) = WORD2(v5);
        *(_DWORD *)a2 = v5;
        uint64_t v16 = v6 - result + 8;
        if (v16 >= 9)
        {
          unint64_t v17 = ((unint64_t)v16 >> 3) - 2;
          unint64_t v18 = v17 >> 1;
          int v19 = &result[8 * (v17 >> 1)];
          if (*(_DWORD *)v19 < *(_DWORD *)v6
            || (*(_DWORD *)v6 >= *(_DWORD *)v19
              ? (BOOL v20 = v19[4] >= v6[4])
              : (BOOL v20 = 1),
                !v20))
          {
            uint64_t v21 = *(void *)v6;
            int v22 = *(_DWORD *)v19;
            *((_WORD *)v6 + 2) = *((_WORD *)v19 + 2);
            *(_DWORD *)uint64_t v6 = v22;
            if (v17 >= 2)
            {
              while (1)
              {
                unint64_t v25 = v18 - 1;
                unint64_t v18 = (v18 - 1) >> 1;
                BOOL v23 = &result[8 * v18];
                if (*(_DWORD *)v23 >= (int)v21
                  && (*(_DWORD *)v23 > (int)v21 || v23[4] >= BYTE4(v21)))
                {
                  break;
                }
                int v24 = *(_DWORD *)v23;
                *((_WORD *)v19 + 2) = *((_WORD *)v23 + 2);
                *(_DWORD *)int v19 = v24;
                int v19 = &result[8 * v18];
                if (v25 <= 1) {
                  goto LABEL_25;
                }
              }
            }
            BOOL v23 = v19;
LABEL_25:
            *(_DWORD *)BOOL v23 = v21;
            v23[4] = BYTE4(v21);
            v23[5] = BYTE5(v21);
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

void sub_BABEC8()
{
  __int16 v1 = 263;
  strcpy((char *)v0, "unknown");
  __int16 v3 = 524;
  strcpy((char *)v2, "good_service");
  __int16 v5 = 774;
  strcpy((char *)__p, "delays");
  xmmword_25DFC78 = 0u;
  *(_OWORD *)&qword_25DFC88 = 0u;
  dword_25DFC98 = 1065353216;
  sub_BA9B4C((uint64_t)&xmmword_25DFC78, (uint64_t)v0, (uint64_t)v0);
  sub_BA9B4C((uint64_t)&xmmword_25DFC78, (uint64_t)v2, (uint64_t)v2);
  sub_BA9B4C((uint64_t)&xmmword_25DFC78, (uint64_t)__p, (uint64_t)__p);
  if ((char)v5 < 0)
  {
    operator delete(__p[0]);
    if (((char)v3 & 0x80000000) == 0)
    {
LABEL_3:
      if (((char)v1 & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(v0[0]);
      return;
    }
  }
  else if (((char)v3 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v2[0]);
  if ((char)v1 < 0) {
    goto LABEL_7;
  }
}

void sub_BAC02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (qword_25DFC88) {
    sub_20AE5DC((void **)qword_25DFC88);
  }
  unsigned int v30 = (void *)xmmword_25DFC78;
  *(void *)&xmmword_25DFC78 = 0;
  if (v30)
  {
    operator delete(v30);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a15 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_10:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_BAC0B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t v5 = 0;
    do
    {
      double result = sub_BAC2B0(v4, v2);
      v5 += result;
      v2 += 296;
    }
    while (v2 != v3);
    if (v5)
    {
      double result = sub_723EC(2u);
      if (result)
      {
        sub_6BAC((uint64_t)v9);
        sub_188FC78(v9, (uint64_t)"The transfer preferences algorithm modified ", 44);
        uint64_t v6 = (void *)std::ostream::operator<<();
        sub_188FC78(v6, (uint64_t)" trip pairs", 11);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 2u);
        if (v8 < 0) {
          operator delete(__p);
        }
        if (v10 < 0) {
          operator delete((void *)v9[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        return std::ios::~ios();
      }
    }
  }
  return result;
}

void sub_BAC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_BAC2B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(void **)(a2 + 200);
  uint64_t v5 = *(void **)(a2 + 208);
  if (v4 != v5)
  {
    uint64_t v6 = *(void **)(a2 + 200);
    do
    {
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v6[1] - *v6) >> 3) >= 2)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(v90, "Transfer preferences algorithm called on bundled journey");
        int v77 = (void *)sub_2F404((uint64_t)exception, v90);
      }
      v6 += 9;
    }
    while (v6 != v5);
  }
  unint64_t v7 = 0x8E38E38E38E38E39 * (v5 - v4);
  if (v7 >= 3) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v9 = (v7 - v8 + 1) & 0xFFFFFFFFFFFFFFFELL;
  if (v9 + v8 != 3)
  {
    uint64_t v11 = 0;
    uint64_t v80 = 0;
    uint64_t v12 = v8 + v9 - 3;
    while (1)
    {
      uint64_t v13 = *(void *)(v2 + 200) + v11;
      uint64_t v14 = *(void *)(v13 + 216);
      uint64_t v15 = *(void *)(v13 + 72);
      uint64_t v16 = (int *)sub_A11094((void *)(*v3 + 4136), *(void *)(v15 + 32));
      unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 < 0x13u || (uint64_t v18 = v17[9]) == 0 || (*((unsigned char *)v16 + v18) & 1) == 0)
      {
        int v19 = (int *)sub_A11094((void *)(*v3 + 4136), *(void *)(v14 + 32));
        BOOL v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 < 0x13u || (uint64_t v21 = v20[9]) == 0 || (*((unsigned char *)v19 + v21) & 1) == 0)
        {
          sub_BACBA8(v3, v15, v14, (uint64_t)&v93);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v93, (int32x4_t)xmmword_20EF7E0))) & 1) == 0
            && v94 != -1)
          {
            if (HIDWORD(v94))
            {
              unsigned int v22 = v93.i32[0];
              if (v93.i32[0] != *(_DWORD *)(v15 + 56) || v93.i32[3] != *(_DWORD *)(v14 + 52))
              {
                unsigned int v87 = v93.u32[3];
                uint64_t v23 = *v3;
                unint64_t v24 = *(void *)(v15 + 32);
                unint64_t v25 = (void *)(*v3 + 4136);
                *(void *)&v90[0] = sub_A104E8(v25, v24, v93.u32[0], *(_DWORD *)(v15 + 40));
                DWORD2(v90[0]) = v26;
                int v27 = (int *)sub_A11094(v25, v24);
                uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
                if (*v28 >= 9u && (uint64_t v29 = v28[4]) != 0) {
                  unsigned int v30 = (unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
                }
                else {
                  unsigned int v30 = 0;
                }
                unsigned int v31 = *(unsigned __int16 *)(sub_A10764(v30, v22) + 12);
                if (*(_DWORD *)(v15 + 44) == -1) {
                  int v32 = 0x7FFFFFFF;
                }
                else {
                  int v32 = *(_DWORD *)(v15 + 48);
                }
                unint64_t v86 = sub_A0FDF4((uint64_t *)(v23 + 4184), (unsigned int *)v90, v31, v32);
                __int16 v83 = v33;
                uint64_t v34 = *v3;
                unint64_t v35 = *(void *)(v14 + 32);
                int v36 = (void *)(*v3 + 4136);
                *(void *)&v90[0] = sub_A104E8(v36, v35, v87, *(_DWORD *)(v14 + 40));
                DWORD2(v90[0]) = v37;
                uint64_t v38 = (int *)sub_A11094(v36, v35);
                int v39 = (unsigned __int16 *)((char *)v38 - *v38);
                if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
                  BOOL v41 = (unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
                }
                else {
                  BOOL v41 = 0;
                }
                unsigned int v42 = *(unsigned __int16 *)(sub_A10764(v41, v87) + 12);
                if (*(_DWORD *)(v14 + 44) == -1) {
                  int v43 = 0x7FFFFFFF;
                }
                else {
                  int v43 = *(_DWORD *)(v14 + 48);
                }
                unint64_t v44 = sub_A0FAA0((uint64_t *)(v34 + 4184), (unsigned int *)v90, v42, v43);
                __int16 v82 = v45;
                int v46 = (int *)sub_A11094((void *)(*v3 + 4136), *(void *)(v15 + 32));
                int v47 = (unsigned __int16 *)((char *)v46 - *v46);
                if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0) {
                  int v49 = (unsigned int *)((char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48));
                }
                else {
                  int v49 = 0;
                }
                int v50 = *(_DWORD *)(sub_A10764(v49, v22) + 8);
                unint64_t v51 = *(unint64_t *)((char *)v93.u64 + 4);
                unint64_t v84 = v94;
                int v52 = sub_BACDC4(a1, *(unint64_t *)((char *)v93.u64 + 4), v94);
                if (v52 == 0x7FFFFFFF
                  || (v52 < 0 ? (char v53 = -5) : (char v53 = 5),
                      signed int v54 = v52 / 10
                          + HIDWORD(v86)
                          + (((103 * (char)(v53 + v52 % 10)) >> 15) & 1)
                          + ((103 * (char)(v53 + v52 % 10)) >> 10),
                      v54 > HIDWORD(v44) - v50))
                {
                  if (sub_723EC(1u))
                  {
                    sub_6BAC((uint64_t)v90);
                    sub_188FC78(v90, (uint64_t)"Timed transfer from from stop ", 30);
                    uint64_t v3 = a1;
                    uint64_t v55 = *a1;
                    if (HIDWORD(v51) != 1 || (v51 + 3) >= 2)
                    {
                      int v57 = (int *)sub_498D5C(*(void *)(v55 + 4120) + 24, __ROR8__(v51, 32), 0, "stop");
                      long long v58 = (unsigned __int16 *)((char *)v57 - *v57);
                      if (*v58 >= 5u && (uint64_t v59 = v58[2]) != 0) {
                        uint64_t v60 = *(void *)((char *)v57 + v59);
                      }
                      else {
                        uint64_t v60 = 0;
                      }
                      int v61 = sub_398020(*(void *)(v55 + 4120) + 24, 0);
                      unsigned int v62 = &v61[-*(int *)v61];
                      if (*(unsigned __int16 *)v62 >= 0xBu)
                      {
                        uint64_t v63 = *((unsigned __int16 *)v62 + 5);
                        if (v63)
                        {
                          if (v61[v63]) {
                            nullsub_1(v60);
                          }
                        }
                      }
                    }
                    int v64 = (void *)std::ostream::operator<<();
                    sub_188FC78(v64, (uint64_t)" to stop ", 9);
                    uint64_t v65 = *a1;
                    if (HIDWORD(v84) != 1 || (v84 + 3) >= 2)
                    {
                      int v66 = (int *)sub_498D5C(*(void *)(v65 + 4120) + 24, __ROR8__(v84, 32), 0, "stop");
                      int v67 = (unsigned __int16 *)((char *)v66 - *v66);
                      if (*v67 >= 5u && (uint64_t v68 = v67[2]) != 0) {
                        uint64_t v69 = *(void *)((char *)v66 + v68);
                      }
                      else {
                        uint64_t v69 = 0;
                      }
                      uint64_t v70 = sub_398020(*(void *)(v65 + 4120) + 24, 0);
                      unsigned int v71 = &v70[-*(int *)v70];
                      if (*(unsigned __int16 *)v71 >= 0xBu)
                      {
                        uint64_t v72 = *((unsigned __int16 *)v71 + 5);
                        if (v72)
                        {
                          if (v70[v72]) {
                            nullsub_1(v69);
                          }
                        }
                      }
                    }
                    unsigned int v73 = (void *)std::ostream::operator<<();
                    sub_188FC78(v73, (uint64_t)" is claimed to be possible in ", 30);
                    unsigned int v74 = (void *)std::ostream::operator<<();
                    uint64_t v2 = a2;
                    sub_188FC78(v74, (uint64_t)" seconds (using expected times, including buffer durations), but actually requires ", 83);
                    uint64_t v75 = (void *)std::ostream::operator<<();
                    sub_188FC78(v75, (uint64_t)" seconds; dropping it.", 22);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)&__p, 1u);
                    if (v89 < 0) {
                      operator delete(__p);
                    }
                    *(void *)&v90[0] = v79;
                    *(void *)((char *)v90 + *(void *)(v79 - 24)) = v78;
                    if (v92 < 0) {
                      operator delete(v91);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                    goto LABEL_15;
                  }
                  uint64_t v2 = a2;
                }
                else
                {
                  *(void *)(v15 + 20) = v86;
                  *(_WORD *)(v15 + 28) = v83;
                  *(_DWORD *)(v15 + 56) = v22;
                  *(_DWORD *)(v14 + 4) = 10 * v50;
                  *(void *)(v14 + 8) = v44;
                  uint64_t v2 = a2;
                  *(_WORD *)(v14 + 16) = v82;
                  *(_DWORD *)(v14 + 52) = v87;
                  uint64_t v56 = *(void *)(*(void *)(a2 + 200) + v11 + 144);
                  *(void *)(v56 + 12) = v51;
                  *(void *)(v56 + 20) = v84;
                  *(_DWORD *)(v56 + 4) = HIDWORD(v86);
                  *(_DWORD *)(v56 + 8) = v54;
                  ++v80;
                }
                uint64_t v3 = a1;
              }
            }
          }
        }
      }
LABEL_15:
      v11 += 144;
      v12 -= 2;
      if (!v12) {
        return v80;
      }
    }
  }
  return 0;
}

void sub_BACB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

unint64_t sub_BACBA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_A104E8((void *)(*a1 + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 40));
  uint64_t v9 = sub_A104E8((void *)(*a1 + 4136), *(void *)(a3 + 32), *(_DWORD *)(a3 + 52), *(_DWORD *)(a3 + 40));
  unint64_t result = sub_BAD078((void *)(*a1 + 4152), v8, v9);
  if (HIDWORD(result)) {
    BOOL v12 = result == 0xFFFFFFFFLL;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || v11 == 0xFFFFFFFFLL || HIDWORD(v11) == 0)
  {
    *(_OWORD *)a4 = xmmword_20EF7E0;
    *(void *)(a4 + 16) = 0xFFFFFFFFLL;
  }
  else
  {
    unint64_t v15 = result;
    unint64_t v16 = v11;
    uint64_t v17 = *a1;
    uint64_t v18 = *(void *)(a2 + 32);
    unsigned int v19 = *(_DWORD *)(a2 + 52);
    unint64_t v38 = result;
    sub_A1E9A0((uint64_t)v29, v17, v18, v19, 0, 0);
    uint64_t v35 = v34 + 12 * *(unsigned int *)(a2 + 40);
    if (v36) {
      uint64_t v37 = *(void *)(a2 + 44);
    }
    if (v33) {
      uint64_t v20 = *(unsigned int *)(v33 + 4 * ((v31 - v30) >> 4));
    }
    else {
      uint64_t v20 = 0;
    }
    sub_A4C9D4((uint64_t)v29, &v38, v20);
    if (v31 < v32 && v31 >= v30) {
      int v22 = (v31 - v30) >> 4;
    }
    else {
      int v22 = -1;
    }
    uint64_t v23 = *a1;
    uint64_t v24 = *(void *)(a3 + 32);
    unsigned int v25 = *(_DWORD *)(a3 + 56);
    unint64_t v38 = v16;
    sub_A1E9A0((uint64_t)v29, v23, v24, v25, 0, 0);
    uint64_t v35 = v34 + 12 * *(unsigned int *)(a3 + 40);
    if (v36) {
      uint64_t v37 = *(void *)(a3 + 44);
    }
    if (v33) {
      uint64_t v26 = *(unsigned int *)(v33 + 4 * ((v31 - v30) >> 4));
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t result = sub_A56ED0((uint64_t)v29, &v38, v26);
    BOOL v27 = v31 < v32 && v31 >= v30;
    unint64_t v28 = (v31 - v30) >> 4;
    if (!v27) {
      LODWORD(v28) = -1;
    }
    *(_DWORD *)a4 = v22;
    *(void *)(a4 + 4) = v15;
    *(_DWORD *)(a4 + 12) = v28;
    *(void *)(a4 + 16) = v16;
  }
  return result;
}

uint64_t sub_BACDC4(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v4 = HIDWORD(a3);
  if (a2 != a3)
  {
    sub_A19FA8((uint64_t)&v23, *a1, a2);
    char v6 = v28;
    unint64_t v7 = v24;
    uint64_t v8 = v25;
    unint64_t v9 = v27;
    if (v28) {
      char v10 = (void *)v27;
    }
    else {
      char v10 = v25;
    }
    if (v24 >= v10) {
      return 0x7FFFFFFFLL;
    }
    while (1)
    {
      uint64_t v17 = __ROR8__(*v7, 32);
      if (v17 == v3 && HIDWORD(v17) == v4) {
        return *((unsigned int *)v7 + 2);
      }
      unint64_t v7 = (void *)((char *)v7 + 12);
      uint64_t v24 = v7;
      if (v7 == v8)
      {
        unint64_t v7 = v26;
        uint64_t v24 = v26;
        char v6 = 1;
        char v28 = 1;
        if (*(unsigned char *)(v23 + 16))
        {
LABEL_28:
          if (v6) {
            unint64_t v19 = v9;
          }
          else {
            unint64_t v19 = (unint64_t)v8;
          }
          if ((unint64_t)v7 < v19)
          {
            while (1)
            {
              unint64_t v20 = __ROR8__(*v7, 32);
              if (HIDWORD(v20) == 1 && (v20 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**(void **)(v23 + 4120)))
              {
                char v6 = v28;
                unint64_t v7 = v24;
                uint64_t v8 = v25;
                break;
              }
              uint64_t v8 = v25;
              unint64_t v7 = (void *)((char *)v24 + 12);
              uint64_t v24 = v7;
              if (v7 == v25)
              {
                unint64_t v7 = v26;
                uint64_t v24 = v26;
                char v6 = 1;
                char v28 = 1;
                if ((unint64_t)v26 >= v27) {
                  break;
                }
              }
              else
              {
                char v6 = v28;
                if (v28) {
                  int v22 = &v27;
                }
                else {
                  int v22 = (unint64_t *)&v25;
                }
                if ((unint64_t)v7 >= *v22) {
                  break;
                }
              }
            }
            unint64_t v9 = v27;
          }
        }
      }
      else if (*(unsigned char *)(v23 + 16))
      {
        goto LABEL_28;
      }
      if (v6) {
        unint64_t v16 = v9;
      }
      else {
        unint64_t v16 = (unint64_t)v8;
      }
      if ((unint64_t)v7 >= v16) {
        return 0x7FFFFFFFLL;
      }
    }
  }
  if (HIDWORD(a2) == 1 && (a2 + 3) < 2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*a1 + 4120);
  uint64_t v12 = v11 + 24;
  if (*(unsigned char *)(v11 + 17))
  {
    uint64_t v13 = (int *)sub_A1A290(v12, a2, 0, "transfers at stop");
    uint64_t v14 = 0;
    unint64_t v15 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v15 < 5u) {
      return (uint64_t)v14;
    }
    uint64_t v14 = (unsigned __int16 *)v15[2];
    if (!v15[2]) {
      return (uint64_t)v14;
    }
    return (10 * *(int *)((char *)v13 + v14));
  }
  uint64_t v13 = (int *)sub_498D5C(v12, __ROR8__(a2, 32), 0, "stop");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0x15u)
  {
    LODWORD(v14) = v14[10];
    if (v14) {
      return (10 * *(int *)((char *)v13 + v14));
    }
  }
  return 300;
}

unint64_t sub_BAD078(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_369E00(*a1 + 24, HIDWORD(a2), 1);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  char v6 = v5;
  unint64_t v7 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v7 < 0x21u) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *((unsigned __int16 *)v7 + 16);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *(unsigned int *)&v5[v8];
  char v10 = &v5[v8 + v9];
  uint64_t v11 = *(unsigned int *)v10;
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 4 * v11;
  uint64_t v14 = &v5[v8 + v9];
  unint64_t result = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v16 = *(unsigned int *)&v14[v12 + 4];
    uint64_t v17 = *(int *)&v10[v12 + 4 + v16];
    uint64_t v18 = &v14[v12 + v16 - v17];
    unsigned int v19 = *((unsigned __int16 *)v18 + 2);
    if (v19 >= 5 && (unsigned __int16 v20 = *((_WORD *)v18 + 4)) != 0)
    {
      if ((*(unsigned int *)&v14[v12 + 8 + v16 + v20] | ((unint64_t)*(unsigned int *)&v14[v12 + 4 + v16 + v20] << 32)) != a2) {
        goto LABEL_7;
      }
    }
    else if (a2 != 0xFFFFFFFFLL)
    {
      goto LABEL_7;
    }
    if (v19 >= 7 && *(_WORD *)&v14[v12 + 10 + v16 - v17]) {
      break;
    }
    if (a3 == 0xFFFFFFFFLL) {
      goto LABEL_16;
    }
LABEL_7:
    v12 += 4;
    if (v13 == v12) {
      return result;
    }
  }
  unsigned __int16 v21 = *(_WORD *)&v14[v12 + 10 + v16 - v17];
  if ((*(unsigned int *)&v14[v12 + 8 + v16 + v21] | ((unint64_t)*(unsigned int *)&v14[v12 + 4 + v16 + v21] << 32)) != a3) {
    goto LABEL_7;
  }
LABEL_16:
  if (v19 < 9) {
    return 0xFFFFFFFFLL;
  }
  int v22 = &v6[v8 + v9];
  if (!*(_WORD *)&v22[v16 + v12 - v17 + 12]) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int16 v23 = *(_WORD *)&v22[v16 + v12 - v17 + 12];
  return *(unsigned int *)&v22[v12 + 8 + v23 + v16] | ((unint64_t)*(unsigned int *)&v22[v12 + 4 + v23 + v16] << 32);
}

uint64_t sub_BAD248(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "future_interval_minutes");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "past_interval_minutes");
  *(_DWORD *)(a1 + 36) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "enable_unqiue_direction_name_for_all_departures");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  BOOL v7 = v6;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    *(unsigned char *)(a1 + 40) = v7;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_BAD404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_9F5350(v14);
    _Unwind_Resume(a1);
  }
  sub_9F5350(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_BAD458(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_BAD248(a1, a3, a4);
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t sub_BAD488(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (!v5) {
        sub_29F82C();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v2);
      if (result)
      {
        uint64_t v6 = *(void *)(v2 + 200);
        uint64_t v7 = *(void *)(v2 + 208);
        while (v6 != v7)
        {
          if (!*(unsigned char *)(v6 + 24))
          {
            uint64_t v9 = *(void *)v6;
            uint64_t v10 = *(void *)(v6 + 8);
            if (*(void *)v6 == v10) {
              goto LABEL_7;
            }
            do
            {
              uint64_t result = sub_BAD58C(v4, v9);
              *(unsigned char *)(v9 + 159) = result;
              v9 += 168;
            }
            while (v9 != v10);
            uint64_t v11 = *(void *)(v6 + 8);
            if (*(void *)v6 == v11)
            {
LABEL_7:
              BOOL v8 = 1;
            }
            else
            {
              uint64_t v12 = *(void *)v6 + 168;
              do
              {
                BOOL v8 = *(unsigned char *)(v12 - 9) != 0;
                if (*(unsigned char *)(v12 - 9)) {
                  BOOL v13 = v12 == v11;
                }
                else {
                  BOOL v13 = 1;
                }
                v12 += 168;
              }
              while (!v13);
            }
            *(unsigned char *)(v6 + 70) = v8;
          }
          v6 += 72;
        }
      }
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_BAD58C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (v4 == 0x7FFFFFFF) {
    int v4 = *(_DWORD *)(a2 + 8);
  }
  int v67 = v4;
  int v66 = *(_DWORD *)(a1 + 36);
  if (v66 < 0) {
    char v5 = -5;
  }
  else {
    char v5 = 5;
  }
  int v63 = *(_DWORD *)(a1 + 32);
  if (v63 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  char v64 = v6;
  char v65 = v5;
  unsigned int v7 = *(_DWORD *)(a2 + 52);
  BOOL v8 = (int *)sub_A11094((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 32));
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    uint64_t v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)sub_A10764(v11, v7);
  unsigned int v13 = *(_DWORD *)(a2 + 52);
  uint64_t v14 = (int *)sub_A11094((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 32));
  unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  unsigned int v16 = *v15;
  uint64_t v70 = v12;
  if (v16 < 5)
  {
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  if (!v15[2])
  {
    uint64_t v17 = 0;
    if (v16 >= 9) {
      goto LABEL_104;
    }
LABEL_18:
    uint64_t v18 = 0;
    goto LABEL_19;
  }
  uint64_t v17 = (char *)v14 + v15[2] + *(unsigned int *)((char *)v14 + v15[2]);
  if (v16 < 9) {
    goto LABEL_18;
  }
LABEL_104:
  uint64_t v62 = v15[4];
  if (!v62) {
    goto LABEL_18;
  }
  uint64_t v18 = (unsigned int *)((char *)v14 + v62 + *(unsigned int *)((char *)v14 + v62));
LABEL_19:
  uint64_t v69 = *(void *)&v17[8 * *(unsigned __int8 *)(sub_A10764(v18, v13) + 14) + 4];
  uint64_t v71 = sub_B6EA30((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 52));
  long long v88 = 0u;
  long long v89 = 0u;
  int v90 = 1065353216;
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 72);
  if (v19 == v20)
  {
LABEL_25:
    sub_A1DF34((uint64_t)v83, *(void **)(a1 + 48), __ROR8__(v12, 32), 0, 0, 0);
    unint64_t v26 = v86;
    if (v86 < v87)
    {
      int v27 = -103 * (char)(v65 + v66 - 10 * (((unint64_t)(1717986919 * v66) >> 34) + (1717986919 * v66 < 0)));
      int v28 = 103 * (char)(v64 + v63 % 10);
      signed int v29 = v66 / -10 + v67 + ((v27 >> 15) & 1) + (v27 >> 10);
      int v68 = v63 / 10 + v67 + ((v28 >> 15) & 1) + (v28 >> 10);
      while (2)
      {
        sub_A1E9A0((uint64_t)&v74, *(void *)(a1 + 48), __ROR8__(*(void *)v26, 32), *(unsigned __int16 *)(v26 + 8), 0, 0);
        unint64_t v31 = v77;
        unint64_t v30 = v78;
        if (v78 >= v77 && v78 < v79)
        {
          while (1)
          {
            unint64_t v35 = v30 - v31;
            unint64_t v36 = (v30 - v31) >> 4;
            if (v36 > *(unsigned __int16 *)(v86 + 10)) {
              goto LABEL_32;
            }
            if (*(void *)v30 == v70 && (*(unsigned char *)(v30 + 15) & 2) != 0) {
              break;
            }
LABEL_61:
            unint64_t v31 = v77;
            unint64_t v30 = v78 + 16;
            v78 += 16;
            if (*(unsigned char *)(v74 + 16)) {
              BOOL v48 = v75 == 0;
            }
            else {
              BOOL v48 = 0;
            }
            if (v48 && v30 >= v77 && v30 < v79)
            {
              do
              {
                unint64_t v51 = __ROR8__(*(void *)v30, 32);
                if (HIDWORD(v51) == 1 && (v51 + 3) < 2) {
                  break;
                }
                char v53 = sub_2AB7E4(**(void **)(v74 + 4120));
                unint64_t v31 = v77;
                unint64_t v30 = v78;
                if (v53) {
                  break;
                }
                unint64_t v30 = v78 + 16;
                unint64_t v78 = v30;
              }
              while (v30 >= v77 && v30 < v79);
            }
            if (v30 < v31 || v30 >= v79) {
              goto LABEL_32;
            }
          }
          unint64_t v37 = __ROR8__(*(void *)v86, 32);
          unint64_t v38 = (int *)sub_A11094((void *)(*(void *)(a1 + 48) + 4136), v37);
          int v39 = (unsigned __int16 *)((char *)v38 - *v38);
          unsigned int v40 = *v39;
          if (v40 < 5)
          {
            BOOL v41 = 0;
            goto LABEL_45;
          }
          if (v39[2])
          {
            BOOL v41 = (char *)v38 + v39[2] + *(unsigned int *)((char *)v38 + v39[2]);
            if (v40 < 9) {
              goto LABEL_45;
            }
          }
          else
          {
            BOOL v41 = 0;
            if (v40 < 9) {
              goto LABEL_45;
            }
          }
          uint64_t v44 = v39[4];
          if (v44)
          {
            unsigned int v42 = (unsigned int *)((char *)v38 + v44 + *(unsigned int *)((char *)v38 + v44));
LABEL_46:
            if (*(void *)&v41[8 * *(unsigned __int8 *)(sub_A10764(v42, v36) + 14) + 4] == v69
              && (*(unsigned char *)(a1 + 40) || sub_B6EA30((void *)(*(void *)(a1 + 48) + 4136), v37, v35 >> 4) == v71))
            {
              if (v81 ? sub_A1F39C(*(void *)(a1 + 48), (uint64_t)&v74, v29, 2) : sub_A1F8B4((uint64_t)&v74, v29, 1))
              {
                __int16 v45 = (unsigned int *)((char *)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 6));
                int v46 = (char *)v45 + *v45;
                int v47 = v81 ? &v82 : v80;
                if (*(_DWORD *)&v46[8 * *((_DWORD *)v80 + 1) + 8 + 8 * ((v78 - v77) >> 4)]
                   + *(_DWORD *)v47 <= v68)
                {
                  unint64_t v72 = v37;
                  int v73 = v36;
                  if (!sub_BAE0B0(&v88, (uint64_t *)&v72)) {
                    goto LABEL_101;
                  }
                }
              }
            }
            goto LABEL_61;
          }
LABEL_45:
          unsigned int v42 = 0;
          goto LABEL_46;
        }
LABEL_32:
        unint64_t v33 = v87;
        unint64_t v26 = v86 + 16;
        unint64_t v86 = v26;
        if (v26 != v87)
        {
LABEL_86:
          while (v26 < v33)
          {
            BOOL v55 = sub_A1E87C(v83);
            unint64_t v26 = v86;
            unint64_t v33 = v87;
            if (!v55) {
              break;
            }
            unint64_t v26 = v86 + 16;
            unint64_t v86 = v26;
            if (v26 == v87)
            {
              uint64_t v56 = v84 + 2;
              unint64_t v84 = v56;
              if ((unint64_t)v56 < v85)
              {
                while (1)
                {
                  unint64_t v26 = *v56;
                  unint64_t v33 = v56[1];
                  if (*v56 != v33) {
                    goto LABEL_85;
                  }
                  v56 += 2;
                  unint64_t v84 = v56;
                  if ((unint64_t)v56 >= v85) {
                    goto LABEL_95;
                  }
                }
              }
              goto LABEL_95;
            }
          }
          uint64_t v57 = 1;
          if (v26 < v33) {
            continue;
          }
LABEL_96:
          long long v58 = (void *)v89;
          if (!(void)v89) {
            goto LABEL_98;
          }
          goto LABEL_97;
        }
        break;
      }
      uint64_t v34 = v84 + 2;
      unint64_t v84 = v34;
      if ((unint64_t)v34 < v85)
      {
        while (1)
        {
          unint64_t v26 = *v34;
          unint64_t v33 = v34[1];
          if (*v34 != v33) {
            break;
          }
          v34 += 2;
          unint64_t v84 = v34;
          if ((unint64_t)v34 >= v85) {
            goto LABEL_95;
          }
        }
LABEL_85:
        unint64_t v86 = v26;
        unint64_t v87 = v33;
        goto LABEL_86;
      }
    }
LABEL_95:
    uint64_t v57 = 1;
    goto LABEL_96;
  }
  while (sub_B6EA30((void *)(*(void *)(a1 + 48) + 4136), *(void *)(v19 + 28), *(_DWORD *)(v19 + 48)) == v71)
  {
    unsigned __int16 v21 = operator new(0x20uLL);
    void *v21 = 0;
    unint64_t v22 = *(void *)(v19 + 28);
    v21[2] = v22;
    uint64_t v23 = *(unsigned int *)(v19 + 48);
    *((_DWORD *)v21 + 6) = v23;
    unint64_t v24 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v22 ^ (v22 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v22 ^ (v22 >> 33))) >> 33));
    v21[1] = (v23
            + ((((v24 ^ (v24 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
            + ((((v24 ^ (v24 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
            + 2654435769u) ^ ((v24 ^ (v24 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
    sub_BADD04(&v88, (uint64_t)v21);
    if ((v25 & 1) == 0) {
      operator delete(v21);
    }
    v19 += 60;
    if (v19 == v20) {
      goto LABEL_25;
    }
  }
LABEL_101:
  uint64_t v57 = 0;
  long long v58 = (void *)v89;
  if ((void)v89)
  {
    do
    {
LABEL_97:
      uint64_t v59 = (void *)*v58;
      operator delete(v58);
      long long v58 = v59;
    }
    while (v59);
  }
LABEL_98:
  uint64_t v60 = (void *)v88;
  *(void *)&long long v88 = 0;
  if (v60) {
    operator delete(v60);
  }
  return v57;
}

void sub_BADC48(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADC5C(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADC70(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADC84(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADC98(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADCAC(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADCC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_12168(v2 - 128);
  _Unwind_Resume(a1);
}

void sub_BADCDC(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_BADCF0(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t *sub_BADD04(void *a1, uint64_t a2)
{
  int v4 = (int *)(a2 + 16);
  unint64_t v5 = 0xFF51AFD7ED558CCDLL * (*(void *)(a2 + 16) ^ (*(void *)(a2 + 16) >> 33));
  unint64_t v6 = (((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v7 = (*(unsigned int *)(a2 + 24) + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  *((void *)v4 - 1) = v7;
  uint64_t result = sub_BADE74((uint64_t)a1, v7, v4);
  if (!result)
  {
    int8x8_t v9 = (int8x8_t)a1[1];
    unint64_t v10 = *(void *)(a2 + 8);
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v9) {
        v10 %= *(void *)&v9;
      }
    }
    else
    {
      v10 &= *(void *)&v9 - 1;
    }
    uint64_t v12 = *(void **)(*a1 + 8 * v10);
    if (v12)
    {
      *(void *)a2 = *v12;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v10) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_15:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v13 = *(void *)(*(void *)a2 + 8);
      if (v11.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v9) {
          v13 %= *(void *)&v9;
        }
      }
      else
      {
        v13 &= *(void *)&v9 - 1;
      }
      uint64_t v12 = (void *)(*a1 + 8 * v13);
    }
    *uint64_t v12 = a2;
    goto LABEL_15;
  }
  return result;
}

uint64_t *sub_BADE74(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_33;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2 % v4;
    if (v4 > a2) {
      unint64_t v6 = a2;
    }
    unint64_t v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
    unint64_t v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_33;
    }
  }
  uint64_t result = *v7;
  if (*v7)
  {
    int v10 = *a3;
    int v9 = a3[1];
    int v11 = a3[2];
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v14 = result[1];
        if (v14 == a2)
        {
          BOOL v15 = *((_DWORD *)result + 5) == v9 && *((_DWORD *)result + 4) == v10;
          if (v15 && *((_DWORD *)result + 6) == v11) {
            return result;
          }
        }
        else if ((v14 & (v4 - 1)) != v6)
        {
          goto LABEL_33;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          goto LABEL_33;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == a2)
      {
        BOOL v13 = *((_DWORD *)result + 5) == v9 && *((_DWORD *)result + 4) == v10;
        if (v13 && *((_DWORD *)result + 6) == v11) {
          return result;
        }
      }
      else
      {
        if (v12 >= v4) {
          v12 %= v4;
        }
        if (v12 != v6) {
          break;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
LABEL_33:
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v4 && (float)(v17 * (float)v4) >= v16) {
    return 0;
  }
  BOOL v18 = 1;
  if (v4 >= 3) {
    BOOL v18 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v4);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_57;
  }
  if (prime < v4)
  {
    size_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      size_t v25 = std::__next_prime(v22);
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2) {
        size_t v22 = v24;
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_57:
    sub_B6C0(a1, prime);
  }
  return 0;
}

uint64_t *sub_BAE0B0(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v5 = (((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v6 = *((unsigned int *)a2 + 2);
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v2) {
      unint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  int v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t result = *v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v15 = result[1];
        if (v7 == v15)
        {
          BOOL v16 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
          if (v16 && *((_DWORD *)result + 6) == v6) {
            return result;
          }
        }
        else if ((v15 & v12) != v9)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v7 == v13)
      {
        BOOL v14 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
        if (v14 && *((_DWORD *)result + 6) == v6) {
          return result;
        }
      }
      else
      {
        if (v13 >= *(void *)&v2) {
          v13 %= *(void *)&v2;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_DWORD *sub_BAE220(_DWORD *a1, void *a2)
{
  char v17 = 9;
  strcpy((char *)__p, "algorithm");
  uint64_t v3 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5 != 12)
    {
      if (v5 != 13) {
        goto LABEL_27;
      }
      unint64_t v4 = *(uint64_t **)v3;
      goto LABEL_8;
    }
    if (**(void **)v3 != 0x756F6A5F706F7264 || *(_DWORD *)(*(void *)v3 + 8) != 2036690546)
    {
LABEL_27:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      unint64_t v13 = std::string::append(&v18, "\" provided in configuration");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      std::string::size_type v20 = v13->__r_.__value_.__r.__words[2];
      long long v19 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = (void *)sub_2F404((uint64_t)exception, &v19);
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 23) != 12)
    {
      unint64_t v4 = (uint64_t *)v3;
      if (*(unsigned char *)(v3 + 23) != 13) {
        goto LABEL_27;
      }
LABEL_8:
      uint64_t v6 = *v4;
      uint64_t v7 = *(uint64_t *)((char *)v4 + 5);
      if (v6 != 0x7365725F706F7264 || v7 != 0x65736E6F70736572) {
        goto LABEL_27;
      }
      *a1 = 1;
      if (v17 < 0) {
        goto LABEL_22;
      }
      return a1;
    }
    if (*(void *)v3 != 0x756F6A5F706F7264 || *(_DWORD *)(v3 + 8) != 2036690546) {
      goto LABEL_27;
    }
  }
  *a1 = 0;
  if ((v17 & 0x80000000) == 0) {
    return a1;
  }
LABEL_22:
  operator delete(__p[0]);
  return a1;
}

void sub_BAE400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_BAE498(_DWORD *a1, uint64_t a2)
{
  if (*a1 == 1)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    if (v6 == v5) {
      return;
    }
    unint64_t v7 = v5 - v6 - 296;
    if (v7 >= 0x128)
    {
      int v11 = 0;
      int v12 = 0;
      unint64_t v13 = v7 / 0x128 + 1;
      unint64_t v9 = (unsigned __int8 *)(v6 + 296 * (v13 & 0x1FFFFFFFFFFFFFELL));
      uint64_t v14 = v13 & 0x1FFFFFFFFFFFFFELL;
      uint64_t v15 = *(unsigned __int8 **)(a2 + 8);
      do
      {
        v11 += *v15;
        v12 += v15[296];
        v15 += 592;
        v14 -= 2;
      }
      while (v14);
      int v8 = v12 + v11;
      if (v13 == (v13 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v8)
        {
          do
          {
            v5 -= 296;
            sub_9F5E28(a2 + 24, v5);
          }
          while (v5 != v6);
          *(void *)(a2 + 16) = v6;
        }
        return;
      }
    }
    else
    {
      int v8 = 0;
      unint64_t v9 = *(unsigned __int8 **)(a2 + 8);
    }
    do
    {
      v8 += *v9;
      v9 += 296;
    }
    while (v9 != (unsigned __int8 *)v5);
    goto LABEL_20;
  }
  if (!*a1)
  {
    uint64_t v3 = *(unsigned char **)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    if (v3 != (unsigned char *)v4)
    {
      while (!*v3)
      {
        v3 += 296;
        if (v3 == (unsigned char *)v4) {
          return;
        }
      }
      if (v3 != (unsigned char *)v4)
      {
        int v10 = (long long *)(v3 + 296);
        if (v3 + 296 != (unsigned char *)v4)
        {
          do
          {
            if (!*(unsigned char *)v10)
            {
              sub_B3E498((uint64_t)v3, v10);
              v3 += 296;
            }
            int v10 = (long long *)((char *)v10 + 296);
          }
          while (v10 != (long long *)v4);
          uint64_t v4 = *(void *)(a2 + 16);
        }
      }
      if (v3 != (unsigned char *)v4)
      {
        do
        {
          v4 -= 296;
          sub_9F5E28(a2 + 24, v4);
        }
        while ((unsigned char *)v4 != v3);
        *(void *)(a2 + 16) = v3;
      }
    }
  }
}

uint64_t *sub_BAE694(uint64_t *a1, void *a2)
{
  *a1 = sub_3758AC(a2);
  return a1;
}

void *sub_BAE6C4(void *result, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  uint64_t v4 = *(void *)(a3 + 56);
  if (v3 != v4)
  {
    uint64_t v5 = result;
    do
    {
      unint64_t v7 = *(unsigned int **)(v3 + 224);
      uint64_t v6 = *(unsigned int **)(v3 + 232);
      if (v7 != v6)
      {
        int v8 = *(void **)(*v5 + 11688);
        uint64_t result = v8 + 1;
        int v9 = *a2;
        while (1)
        {
          unint64_t v10 = *v7;
          if (*((unsigned char *)v7 + 4))
          {
            uint64_t v11 = v8[1];
            if (0x823EE08FB823EE09 * ((v8[2] - v11) >> 3) <= v10) {
LABEL_46:
            }
              sub_66748();
          }
          else
          {
            uint64_t v11 = v8[4];
            if (0x823EE08FB823EE09 * ((v8[5] - v11) >> 3) <= v10) {
              sub_66748();
            }
          }
          int v12 = *(_DWORD *)(v11 + 456 * v10 + 404);
          if (v12 != 0x7FFFFFFF && v12 > v9) {
            break;
          }
          int v14 = *(_DWORD *)(v11 + 456 * v10 + 408);
          if (v14 != 0x7FFFFFFF && v14 < v9) {
            break;
          }
          v7 += 2;
          if (v7 == v6) {
            goto LABEL_3;
          }
        }
      }
      BOOL v16 = v7 + 2;
      if (v7 == v6 || v16 == v6)
      {
        if (v7 == v6) {
          goto LABEL_3;
        }
      }
      else
      {
        do
        {
          unint64_t v18 = *v16;
          long long v19 = *(void **)(*v5 + 11688);
          if (*((unsigned char *)v16 + 4))
          {
            uint64_t v20 = v19[1];
            if (0x823EE08FB823EE09 * ((v19[2] - v20) >> 3) <= v18) {
              sub_66748();
            }
          }
          else
          {
            uint64_t v20 = v19[4];
            if (0x823EE08FB823EE09 * ((v19[5] - v20) >> 3) <= v18) {
              goto LABEL_46;
            }
          }
          int v21 = *(_DWORD *)(v20 + 456 * v18 + 404);
          int v22 = *a2;
          if (v21 == 0x7FFFFFFF || v21 <= v22)
          {
            int v24 = *(_DWORD *)(v20 + 456 * v18 + 408);
            if (v24 == 0x7FFFFFFF || v24 >= v22)
            {
              unsigned int v26 = *v16;
              *((unsigned char *)v7 + 4) = *((unsigned char *)v16 + 4);
              *unint64_t v7 = v26;
              v7 += 2;
            }
          }
          v16 += 2;
        }
        while (v16 != v6);
        if (v7 == *(unsigned int **)(v3 + 232)) {
          goto LABEL_3;
        }
      }
      *(void *)(v3 + 232) = v7;
LABEL_3:
      v3 += 248;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_BAE8D0()
{
  unk_25DFCB7 = 16641;
  word_25DFCA0 = 65;
  byte_25DFCCF = 1;
  byte_25DFCB9 = 0;
}

void sub_BAE8F8(double *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = 0x14C1BACF914C1BADLL * ((v3 - v2) >> 3);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    goto LABEL_25;
  }
  uint64_t v7 = v2 + 296;
  while (*(double *)(v7 - 144) <= *a1
       && *(double *)(v7 - 128) <= a1[1]
       && *(double *)(v7 - 120) <= a1[2]
       && *(double *)(v7 - 112) <= a1[3])
  {
    BOOL v8 = v7 == v3;
    v7 += 296;
    if (v8) {
      goto LABEL_25;
    }
  }
  uint64_t v9 = v7 - 296;
  if (v7 - 296 != v3)
  {
    if (v7 == v3)
    {
      if (v9 == v3) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    do
    {
      if (*(double *)(v7 + 152) <= *a1
        && *(double *)(v7 + 168) <= a1[1]
        && *(double *)(v7 + 176) <= a1[2]
        && *(double *)(v7 + 184) <= a1[3])
      {
        sub_B3E498(v9, (long long *)v7);
        v9 += 296;
      }
      v7 += 296;
    }
    while (v7 != v3);
    uint64_t v2 = *(void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    if (v9 != v3)
    {
LABEL_22:
      uint64_t v10 = v3;
      uint64_t v3 = v9;
      while (v10 != v9)
      {
        v10 -= 296;
        sub_9F5E28(a2 + 24, v10);
      }
      *(void *)(a2 + 16) = v9;
      uint64_t v2 = *(void *)(a2 + 8);
    }
  }
LABEL_25:
  if (v4 > 0x14C1BACF914C1BADLL * ((v3 - v2) >> 3) && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"The criteria threshold filter removed ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_188FC78(v11, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_BAEC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_BAEC90(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  return result;
}

void sub_BAECB4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v40 = *(void *)(a2 + 16);
    goto LABEL_67;
  }
  uint64_t v45 = v3 - v2;
  uint64_t v6 = a1 + 6;
  uint64_t v7 = a1 + 1;
  uint64_t v46 = *(void *)(a2 + 16);
  do
  {
    if (a1[9])
    {
      BOOL v8 = (void *)a1[8];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void *)*v8;
          operator delete(v8);
          BOOL v8 = v9;
        }
        while (v9);
      }
      a1[8] = 0;
      uint64_t v10 = a1[7];
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(void *)(*v6 + 8 * i) = 0;
      }
      a1[9] = 0;
    }
    if (a1[4])
    {
      int v12 = (void *)a1[3];
      if (v12)
      {
        do
        {
          char v13 = (void *)*v12;
          operator delete(v12);
          int v12 = v13;
        }
        while (v13);
      }
      a1[3] = 0;
      uint64_t v14 = a1[2];
      if (v14)
      {
        for (uint64_t j = 0; j != v14; ++j)
          *(void *)(*v7 + 8 * j) = 0;
      }
      a1[4] = 0;
    }
    char v17 = *(uint64_t **)(v2 + 200);
    BOOL v16 = *(uint64_t **)(v2 + 208);
    if (v17 != v16)
    {
      unint64_t v18 = *(uint64_t **)(v2 + 200);
      while (*((unsigned char *)v18 + 24))
      {
LABEL_21:
        v18 += 9;
        v17 += 9;
        if (v18 == v16) {
          goto LABEL_3;
        }
      }
      long long v19 = (void *)(*a1 + 4136);
      unint64_t v20 = *(void *)(*v18 + 32);
      unsigned int v21 = *(_DWORD *)(*v18 + 52);
      if (sub_A10E20(v19, SHIDWORD(v20)))
      {
        int v22 = (int *)sub_A1120C(*(void *)(*v19 + 3944), v20);
        uint8x8_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
        if (*v23 < 9u) {
          goto LABEL_38;
        }
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v37 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v24 = *v19;
        if (dword_24F7300 == HIDWORD(v20))
        {
          size_t v25 = *(unsigned int **)(*(void *)(v24 + 3976) + 72);
          if (!v25)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v49, "Realtime stop pattern quad data requested on nullptr buffer");
            int v43 = (void *)sub_2F404((uint64_t)exception, v49);
          }
          unsigned int v26 = (int *)((char *)v25 + *v25);
          int v27 = (unsigned __int16 *)((char *)v26 - *v26);
          if (*v27 >= 5u && (uint64_t v28 = v27[2]) != 0) {
            signed int v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
          }
          else {
            signed int v29 = 0;
          }
          int v22 = (int *)sub_A1139C(v29, v20);
          uint8x8_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
          if (*v23 < 9u) {
            goto LABEL_38;
          }
        }
        else
        {
          int v22 = (int *)sub_A11500(v24 + 24, v20, 0, "stop pattern");
          uint8x8_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
          if (*v23 < 9u) {
            goto LABEL_38;
          }
        }
      }
      uint64_t v30 = v23[4];
      if (v30)
      {
        unint64_t v31 = (unsigned int *)((char *)v22 + v30 + *(unsigned int *)((char *)v22 + v30));
LABEL_39:
        *(void *)&v49[0] = __ROR8__(*(void *)sub_A10764(v31, v21), 32);
        sub_B5AAE8((uint64_t)v7, (uint64_t *)v49, v49);
        unint64_t v32 = (int *)sub_498D5C(*(void *)(*a1 + 4120) + 24, __ROR8__(*(void *)&v49[0], 32), 0, "stop");
        unint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
        if (*v33 >= 0xDu)
        {
          unsigned __int16 v34 = v33[6];
          if (v34)
          {
            uint64_t v35 = *(unsigned int *)((char *)v32 + v34 + 4);
            __p[0] = (void *)(v35 | ((unint64_t)*(unsigned int *)((char *)v32 + v34) << 32));
            BOOL v36 = v35 == -1 || (unint64_t)__p[0] >> 32 == 0;
            if (!v36) {
              sub_B5AAE8((uint64_t)v6, (uint64_t *)__p, __p);
            }
          }
        }
        sub_BAF378(a1, v2, v17);
        BOOL v16 = *(uint64_t **)(v2 + 208);
        goto LABEL_21;
      }
LABEL_38:
      unint64_t v31 = 0;
      goto LABEL_39;
    }
LABEL_3:
    v2 += 296;
  }
  while (v2 != v46);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v38 = *(void *)(a2 + 16);
  if (v3 == v38)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v40 = v3;
    uint64_t v4 = v45;
  }
  else
  {
    uint64_t v39 = v3 + 296;
    uint64_t v4 = v45;
    while (*(double *)(v39 - 104) != -1.0)
    {
      BOOL v36 = v39 == v38;
      v39 += 296;
      if (v36) {
        goto LABEL_66;
      }
    }
    uint64_t v40 = v39 - 296;
    if (v39 - 296 != v38 && v39 != v38)
    {
      do
      {
        if (*(double *)(v39 + 192) != -1.0)
        {
          sub_B3E498(v40, (long long *)v39);
          v40 += 296;
        }
        v39 += 296;
      }
      while (v39 != v38);
      uint64_t v3 = *(void *)(a2 + 8);
      uint64_t v38 = *(void *)(a2 + 16);
    }
    if (v40 == v38)
    {
LABEL_66:
      uint64_t v40 = v38;
      goto LABEL_67;
    }
    do
    {
      v38 -= 296;
      sub_9F5E28(a2 + 24, v38);
    }
    while (v38 != v40);
    *(void *)(a2 + 16) = v40;
    uint64_t v3 = *(void *)(a2 + 8);
  }
LABEL_67:
  if (0x14C1BACF914C1BADLL * (v4 >> 3) > (unint64_t)(0x14C1BACF914C1BADLL * ((v40 - v3) >> 3)) && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v49);
    sub_188FC78(v49, (uint64_t)"The double station filter removed ", 34);
    BOOL v41 = (void *)std::ostream::operator<<();
    sub_188FC78(v41, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    if (v51 < 0) {
      operator delete(v50);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_BAF2E4(_Unwind_Exception *a1)
{
}

void sub_BAF2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_BAF348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BAF364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BAF378(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    BOOL v8 = a1 + 1;
    uint64_t v30 = a1 + 6;
    do
    {
      uint64_t v10 = v3 + 168 * v6;
      unsigned int v11 = *(_DWORD *)(v10 + 56);
      int v12 = (int *)sub_A11094((void *)(*a1 + 4136), *(void *)(v10 + 32));
      char v13 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
        char v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
      }
      else {
        char v15 = 0;
      }
      unint64_t v16 = *(void *)sub_A10764(v15, v11);
      uint64_t v33 = __ROR8__(v16, 32);
      char v17 = (int *)sub_498D5C(*(void *)(*a1 + 4120) + 24, v16, 0, "stop");
      unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 0xDu && (unsigned __int16 v19 = v18[6]) != 0)
      {
        unint64_t v32 = *(unsigned int *)((char *)v17 + v19 + 4) | ((unint64_t)*(unsigned int *)((char *)v17 + v19) << 32);
        if (sub_A1E760(v8, &v33)) {
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v32 = 0xFFFFFFFFLL;
        if (sub_A1E760(v8, &v33)) {
          goto LABEL_17;
        }
      }
      if (v32 == -1 || !HIDWORD(v32) || !sub_A1E760(v30, (uint64_t *)&v32))
      {
        ++v7;
        uint64_t v3 = *a3;
        uint64_t v9 = a3[1];
        goto LABEL_4;
      }
LABEL_17:
      if (!v7)
      {
        *(void *)(a2 + 192) = 0xBFF0000000000000;
        return;
      }
      uint64_t v20 = a3[1];
      *(_DWORD *)(v20 - 168) = v7;
      uint64_t v21 = 168 * v6;
      sub_B578F4(*a3 + v21, v20 - 168);
      sub_B578F4(a3[9] + v21, a3[10] - 168);
      uint64_t v22 = a3[1];
      if (!*(_DWORD *)(v22 - 8))
      {
        uint8x8_t v23 = *(void **)(v22 - 48);
        if (v23)
        {
          *(void *)(v22 - 40) = v23;
          operator delete(v23);
        }
        uint64_t v24 = *(void **)(v22 - 80);
        if (v24)
        {
          *(void *)(v22 - 72) = v24;
          operator delete(v24);
        }
        size_t v25 = *(void **)(v22 - 104);
        if (v25)
        {
          *(void *)(v22 - 96) = v25;
          operator delete(v25);
        }
      }
      a3[1] = v22 - 168;
      uint64_t v26 = a3[10];
      if (!*(_DWORD *)(v26 - 8))
      {
        int v27 = *(void **)(v26 - 48);
        if (v27)
        {
          *(void *)(v26 - 40) = v27;
          operator delete(v27);
        }
        uint64_t v28 = *(void **)(v26 - 80);
        if (v28)
        {
          *(void *)(v26 - 72) = v28;
          operator delete(v28);
        }
        signed int v29 = *(void **)(v26 - 104);
        if (v29)
        {
          *(void *)(v26 - 96) = v29;
          operator delete(v29);
        }
      }
      a3[10] = v26 - 168;
      uint64_t v3 = *a3;
      uint64_t v9 = a3[1];
      if (*a3 == v9)
      {
        *(void *)(a2 + 192) = 0xBFF0000000000000;
        uint64_t v9 = v3;
      }
LABEL_4:
      uint64_t v6 = v7;
    }
    while (0xCF3CF3CF3CF3CF3DLL * ((v9 - v3) >> 3) > v7);
  }
}

void sub_BAF600(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  char v53 = *(long long **)(a2 + 16);
  uint64_t v3 = (uint64_t)v53;
  uint64_t v51 = (uint64_t)v53 - v2;
  if (v53 != (long long *)v2)
  {
    do
    {
      uint64_t v5 = *(unsigned char **)(v2 + 200);
      uint64_t v6 = *(unsigned char **)(v2 + 208);
      uint64_t v54 = v2;
      unsigned int v7 = *(_DWORD **)a1;
      *(void *)(a1 + 8) = *(void *)a1;
      while (v5 != v6)
      {
        if (v5[24]) {
          goto LABEL_7;
        }
        uint64_t v10 = *(_DWORD **)v5;
        uint64_t v11 = *(void *)v5 + 40;
        int v12 = *(_DWORD **)a1;
        if (*(_DWORD **)a1 != v7)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(_DWORD **)a1;
          do
          {
            BOOL v15 = v14[1] == v10[9] && *v14 == v10[8];
            if (v15 && v14[2] == *(_DWORD *)(*(void *)v5 + 40) && v14[3] == v10[11]) {
              v13 += v14[4] == v10[12];
            }
            v14 += 5;
          }
          while (v14 != v7);
          if (v13)
          {
            size_t v25 = (long long *)v54;
            if ((long long *)v54 == v53) {
              goto LABEL_81;
            }
            uint64_t v26 = (long long *)(v54 + 296);
            if ((long long *)(v54 + 296) == v53)
            {
              uint64_t v3 = v54;
              goto LABEL_81;
            }
            uint64_t v3 = v54;
LABEL_43:
            while (1)
            {
              int v27 = v25;
              uint64_t v28 = (unsigned char *)*((void *)v25 + 62);
              signed int v29 = (unsigned char *)*((void *)v27 + 63);
              BOOL v55 = v26;
              uint64_t v30 = *(_DWORD **)a1;
              *(void *)(a1 + 8) = *(void *)a1;
              while (1)
              {
                if (v28 == v29)
                {
                  size_t v25 = v55;
                  sub_B3E498(v3, v55);
                  v3 += 296;
                  uint64_t v26 = (long long *)((char *)v55 + 296);
                  if ((long long *)((char *)v55 + 296) == v53) {
                    goto LABEL_81;
                  }
                  goto LABEL_43;
                }
                if (!v28[24]) {
                  break;
                }
LABEL_46:
                v28 += 72;
              }
              uint64_t v33 = *(_DWORD **)v28;
              uint64_t v34 = *(void *)v28 + 40;
              uint64_t v35 = *(_DWORD **)a1;
              if (*(_DWORD **)a1 == v30) {
                break;
              }
              uint64_t v36 = 0;
              int v37 = *(_DWORD **)a1;
              do
              {
                BOOL v38 = v37[1] == v33[9] && *v37 == v33[8];
                if (v38 && v37[2] == *(_DWORD *)(*(void *)v28 + 40) && v37[3] == v33[11]) {
                  v36 += v37[4] == v33[12];
                }
                v37 += 5;
              }
              while (v37 != v30);
              if (!v36) {
                break;
              }
              size_t v25 = v55;
              uint64_t v26 = (long long *)((char *)v55 + 296);
              if ((long long *)((char *)v55 + 296) == v53) {
                goto LABEL_81;
              }
            }
            unint64_t v39 = *(void *)(a1 + 16);
            if ((unint64_t)v30 < v39)
            {
              *(void *)uint64_t v30 = *((void *)v33 + 4);
              uint64_t v31 = *(void *)v34;
              v30[4] = *(_DWORD *)(v34 + 8);
              *((void *)v30 + 1) = v31;
              unint64_t v32 = (char *)(v30 + 5);
            }
            else
            {
              unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * (v30 - v35) + 1;
              if (v40 > 0xCCCCCCCCCCCCCCCLL) {
                goto LABEL_93;
              }
              unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - (void)v35) >> 2);
              if (2 * v41 > v40) {
                unint64_t v40 = 2 * v41;
              }
              if (v41 >= 0x666666666666666) {
                unint64_t v42 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                if (v42 > 0xCCCCCCCCCCCCCCCLL) {
                  goto LABEL_94;
                }
                int v43 = (char *)operator new(20 * v42);
              }
              else
              {
                int v43 = 0;
              }
              uint64_t v44 = &v43[4 * (v30 - v35)];
              *(void *)uint64_t v44 = *((void *)v33 + 4);
              uint64_t v45 = *(void *)v34;
              *((_DWORD *)v44 + 4) = *(_DWORD *)(v34 + 8);
              *((void *)v44 + 1) = v45;
              uint64_t v46 = v44;
              if (v35 != v30)
              {
                do
                {
                  long long v47 = *(_OWORD *)(v30 - 5);
                  *((_DWORD *)v46 - 1) = *(v30 - 1);
                  *(_OWORD *)(v46 - 20) = v47;
                  v46 -= 20;
                  v30 -= 5;
                }
                while (v30 != v35);
                uint64_t v30 = *(_DWORD **)a1;
              }
              unint64_t v32 = v44 + 20;
              *(void *)a1 = v46;
              *(void *)(a1 + 8) = v44 + 20;
              *(void *)(a1 + 16) = &v43[20 * v42];
              if (v30) {
                operator delete(v30);
              }
            }
            *(void *)(a1 + 8) = v32;
            uint64_t v30 = v32;
            goto LABEL_46;
          }
        }
        unint64_t v16 = *(void *)(a1 + 16);
        if ((unint64_t)v7 < v16)
        {
          *(void *)unsigned int v7 = *((void *)v10 + 4);
          uint64_t v8 = *(void *)v11;
          v7[4] = *(_DWORD *)(v11 + 8);
          *((void *)v7 + 1) = v8;
          uint64_t v9 = (char *)(v7 + 5);
        }
        else
        {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v7 - v12) + 1;
          if (v17 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_93:
          }
            sub_2E00();
          unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (void)v12) >> 2);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x666666666666666) {
            unint64_t v19 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_94:
            }
              sub_188D718();
            uint64_t v20 = (char *)operator new(20 * v19);
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[4 * (v7 - v12)];
          *(void *)uint64_t v21 = *((void *)v10 + 4);
          uint64_t v22 = *(void *)v11;
          *((_DWORD *)v21 + 4) = *(_DWORD *)(v11 + 8);
          *((void *)v21 + 1) = v22;
          uint8x8_t v23 = v21;
          if (v12 != v7)
          {
            do
            {
              long long v24 = *(_OWORD *)(v7 - 5);
              *((_DWORD *)v23 - 1) = *(v7 - 1);
              *(_OWORD *)(v23 - 20) = v24;
              v23 -= 20;
              v7 -= 5;
            }
            while (v7 != v12);
            unsigned int v7 = *(_DWORD **)a1;
          }
          uint64_t v9 = v21 + 20;
          *(void *)a1 = v23;
          *(void *)(a1 + 8) = v21 + 20;
          *(void *)(a1 + 16) = &v20[20 * v19];
          if (v7) {
            operator delete(v7);
          }
        }
        *(void *)(a1 + 8) = v9;
        unsigned int v7 = v9;
LABEL_7:
        v5 += 72;
      }
      uint64_t v2 = v54 + 296;
    }
    while ((long long *)(v54 + 296) != v53);
  }
LABEL_81:
  unint64_t v48 = 0x14C1BACF914C1BADLL * (v51 >> 3);
  uint64_t v49 = *(void *)(a2 + 16);
  if (v3 == v49)
  {
    if (v48 <= 0x14C1BACF914C1BADLL * ((v3 - *(void *)(a2 + 8)) >> 3)) {
      return;
    }
  }
  else
  {
    do
    {
      v49 -= 296;
      sub_9F5E28(a2 + 24, v49);
    }
    while (v49 != v3);
    *(void *)(a2 + 16) = v3;
    if (v48 <= 0x14C1BACF914C1BADLL * ((v3 - *(void *)(a2 + 8)) >> 3)) {
      return;
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v58);
    sub_188FC78(v58, (uint64_t)"The double trip filter removed ", 31);
    int v50 = (void *)std::ostream::operator<<();
    sub_188FC78(v50, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v57 < 0) {
      operator delete(__p);
    }
    if (v59 < 0) {
      operator delete((void *)v58[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_BAFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL *sub_BAFCF8(BOOL *a1, void *a2)
{
  __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8890;
  strcpy((char *)__p, "consider_regular_alternatives");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __p = operator new(0x20uLL);
  long long v8 = xmmword_20B9800;
  strcpy((char *)__p, "consider_upcoming_alternatives");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_BAFDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BAFE04(unsigned char *a1, void *a2)
{
  if (*a2 != a2[1])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v11, "Empty schedule filter called on a response that contains schedule categories");
    uint64_t v10 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  BOOL v5 = (void *)a2[6];
  uint64_t v4 = a2[7];
  uint64_t v3 = (uint64_t)(a2 + 6);
  if (v5 == (void *)v4)
  {
    uint64_t v4 = a2[6];
  }
  else
  {
    if (*a1)
    {
      while (v5[9] != v5[10] || a1[1] && v5[12] != v5[13])
      {
        v5 += 31;
        if (v5 == (void *)v4) {
          goto LABEL_22;
        }
      }
    }
    else if (a1[1])
    {
      while (v5[12] != v5[13])
      {
        v5 += 31;
        if (v5 == (void *)v4) {
          goto LABEL_22;
        }
      }
    }
    if (v5 == (void *)v4)
    {
LABEL_22:
      BOOL v5 = (void *)a2[7];
    }
    else
    {
      unsigned int v7 = v5 + 31;
      if (v5 + 31 != (void *)v4)
      {
        do
        {
          if (*a1 && v7[9] != v7[10] || a1[1] && v7[12] != v7[13])
          {
            sub_BB00B4((uint64_t)v5, (uint64_t)v7);
            v5 += 31;
          }
          v7 += 31;
        }
        while (v7 != (void *)v4);
        uint64_t v4 = a2[7];
      }
    }
  }

  return sub_BAFFBC(v3, (uint64_t)v5, v4);
}

void sub_BAFF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BAFFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = 8 * ((a3 - a2) >> 3);
      uint64_t v8 = a2;
      do
      {
        sub_BB00B4(v8, v8 + v7);
        v8 += 248;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v8)
    {
      uint64_t v9 = *(void **)(v5 - 24);
      if (v9)
      {
        *(void *)(v5 - 16) = v9;
        operator delete(v9);
      }
      uint64_t v10 = *(void **)(v5 - 64);
      if (v10)
      {
        *(void *)(v5 - 56) = v10;
        operator delete(v10);
      }
      long long v11 = *(void **)(v5 - 152);
      if (v11)
      {
        *(void *)(v5 - 144) = v11;
        operator delete(v11);
      }
      int v12 = *(void **)(v5 - 176);
      if (v12)
      {
        *(void *)(v5 - 168) = v12;
        operator delete(v12);
      }
      v5 -= 248;
    }
    *(void *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_BB00B4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v8 = (void *)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 72);
  uint64_t v9 = (void *)(a2 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  void *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(void *)(a1 + 104) = v10;
    operator delete(v10);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v11 = *(_OWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 165);
  long long v13 = *(_OWORD *)(a2 + 152);
  uint64_t v14 = *(void **)(a1 + 184);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 165) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  if (v14)
  {
    *(void *)(a1 + 192) = v14;
    operator delete(v14);
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v15 = *(void *)(a2 + 208);
  unint64_t v16 = *(void **)(a1 + 224);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 208) = v15;
  if (v16)
  {
    *(void *)(a1 + 232) = v16;
    operator delete(v16);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  return a1;
}

void sub_BB020C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 1065353216;
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v19 = v3;
    goto LABEL_56;
  }
  do
  {
    unint64_t v6 = *(unsigned int *)(v2 + 12);
    if (v6 == -1) {
      goto LABEL_4;
    }
    if (*((void *)&v28 + 1))
    {
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v28 + 8));
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = *(unsigned int *)(v2 + 12);
        if (*((void *)&v28 + 1) <= v6) {
          unint64_t v8 = v6 % *((void *)&v28 + 1);
        }
      }
      else
      {
        unint64_t v8 = (DWORD2(v28) - 1) & v6;
      }
      uint64_t v9 = *(uint64_t ***)(v28 + 8 * v8);
      if (v9)
      {
        uint64_t v10 = *v9;
        if (v10)
        {
          if (v7.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v12 = v10[1];
              if (v12 == v6)
              {
                if (*((_DWORD *)v10 + 4) == v6) {
                  goto LABEL_36;
                }
              }
              else if ((v12 & (*((void *)&v28 + 1) - 1)) != v8)
              {
                goto LABEL_26;
              }
              uint64_t v10 = (uint64_t *)*v10;
              if (!v10) {
                goto LABEL_26;
              }
            }
          }
          do
          {
            unint64_t v11 = v10[1];
            if (v11 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6)
              {
LABEL_36:
                *(void *)(v2 + 192) = 0xBFF0000000000000;
                goto LABEL_4;
              }
            }
            else
            {
              if (v11 >= *((void *)&v28 + 1)) {
                v11 %= *((void *)&v28 + 1);
              }
              if (v11 != v8) {
                break;
              }
            }
            uint64_t v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
      }
    }
LABEL_26:
    int v13 = *(unsigned __int8 *)(v2 + 9);
    int v14 = *(unsigned __int8 *)(v2 + 11);
    BOOL v15 = v13 != 1 && v14 == 0;
    if (v15) {
      goto LABEL_3;
    }
    if (v13 == 1 && v14 == 0)
    {
      *(void *)(v2 + 192) = 0xBFF0000000000000;
LABEL_3:
      sub_BB06DC((uint64_t)&v28, (unsigned int *)(v2 + 12), (_DWORD *)(v2 + 12));
    }
LABEL_4:
    v2 += 296;
  }
  while (v2 != v3);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v17 = *(void *)(a2 + 16);
  if (v3 == v17)
  {
    uint64_t v3 = *(void *)(a2 + 16);
LABEL_55:
    uint64_t v19 = v17;
    goto LABEL_56;
  }
  uint64_t v18 = v3 + 296;
  while (*(double *)(v18 - 104) != -1.0)
  {
    BOOL v15 = v18 == v17;
    v18 += 296;
    if (v15) {
      goto LABEL_55;
    }
  }
  uint64_t v19 = v18 - 296;
  if (v18 - 296 != v17 && v18 != v17)
  {
    do
    {
      if (*(double *)(v18 + 192) != -1.0)
      {
        sub_B3E498(v19, (long long *)v18);
        v19 += 296;
      }
      v18 += 296;
    }
    while (v18 != v17);
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v17 = *(void *)(a2 + 16);
  }
  if (v19 == v17) {
    goto LABEL_55;
  }
  do
  {
    v17 -= 296;
    sub_9F5E28(a2 + 24, v17);
  }
  while (v17 != v19);
  *(void *)(a2 + 16) = v19;
  uint64_t v3 = *(void *)(a2 + 8);
LABEL_56:
  if (0x14C1BACF914C1BADLL * (v4 >> 3) > (unint64_t)(0x14C1BACF914C1BADLL * ((v19 - v3) >> 3)) && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"The frequent fill-in filter removed ", 36);
    uint64_t v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v21 = (void *)v29;
  if ((void)v29)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  uint8x8_t v23 = (void *)v28;
  *(void *)&long long v28 = 0;
  if (v23) {
    operator delete(v23);
  }
}

void sub_BB0654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_12168(v15 - 128);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_12168(v15 - 128);
  _Unwind_Resume(a1);
}

void sub_BB06C8(_Unwind_Exception *a1)
{
  sub_12168(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t *sub_BB06DC(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  int v14 = operator new(0x18uLL);
  *int v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  char v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *int v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_BB09CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_BB09E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v2 != i; v2 += 37)
    sub_BB0A2C(a1, v2);
}

void sub_BB0A2C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[31];
  uint64_t v2 = (long long *)a2[32];
  if ((long long *)v3 != v2)
  {
    while (1)
    {
      BOOL v4 = *(int *)(v3 + 8) < 1 || *(_DWORD *)(v3 + 16) < 1;
      if (v4 || *(int *)(v3 + 12) < 1) {
        break;
      }
      v3 += 40;
      if ((long long *)v3 == v2) {
        goto LABEL_22;
      }
    }
    if ((long long *)v3 != v2)
    {
      long long v5 = (long long *)(v3 + 40);
      if ((long long *)(v3 + 40) != v2)
      {
        do
        {
          BOOL v6 = *((int *)v5 + 2) < 1 || *((_DWORD *)v5 + 4) < 1;
          if (!v6 && *((int *)v5 + 3) >= 1)
          {
            long long v7 = *v5;
            long long v8 = v5[1];
            *(unsigned char *)(v3 + 32) = *((unsigned char *)v5 + 32);
            *(_OWORD *)uint64_t v3 = v7;
            *(_OWORD *)(v3 + 16) = v8;
            v3 += 40;
          }
          long long v5 = (long long *)((char *)v5 + 40);
        }
        while (v5 != v2);
        uint64_t v2 = (long long *)a2[32];
      }
    }
    if ((long long *)v3 != v2) {
      a2[32] = v3;
    }
  }
LABEL_22:
  uint64_t v10 = (uint64_t *)a2[25];
  for (uint64_t i = (uint64_t *)a2[26]; v10 != i; v10 += 9)
    sub_BB0B3C(a1, v10);
}

void sub_BB0B3C(uint64_t a1, uint64_t *a2)
{
  if (!*((unsigned char *)a2 + 24) && *a2 != a2[1])
  {
    uint64_t v3 = a2[4];
    uint64_t v2 = (long long *)a2[5];
    if ((long long *)v3 != v2)
    {
      while (1)
      {
        BOOL v4 = *(int *)(v3 + 8) < 1 || *(_DWORD *)(v3 + 16) < 1;
        if (v4 || *(int *)(v3 + 12) < 1) {
          break;
        }
        v3 += 40;
        if ((long long *)v3 == v2) {
          goto LABEL_25;
        }
      }
      if ((long long *)v3 != v2)
      {
        long long v5 = (long long *)(v3 + 40);
        if ((long long *)(v3 + 40) != v2)
        {
          do
          {
            BOOL v6 = *((int *)v5 + 2) < 1 || *((_DWORD *)v5 + 4) < 1;
            if (!v6 && *((int *)v5 + 3) >= 1)
            {
              long long v7 = *v5;
              long long v8 = v5[1];
              *(unsigned char *)(v3 + 32) = *((unsigned char *)v5 + 32);
              *(_OWORD *)uint64_t v3 = v7;
              *(_OWORD *)(v3 + 16) = v8;
              v3 += 40;
            }
            long long v5 = (long long *)((char *)v5 + 40);
          }
          while (v5 != v2);
          uint64_t v2 = (long long *)a2[5];
        }
      }
      if ((long long *)v3 != v2) {
        a2[5] = v3;
      }
    }
LABEL_25:
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    while (v9 != v10)
    {
      uint64_t v12 = *(void *)(v9 + 120);
      unint64_t v11 = *(long long **)(v9 + 128);
      if ((long long *)v12 != v11)
      {
        while (1)
        {
          BOOL v13 = *(int *)(v12 + 8) < 1 || *(_DWORD *)(v12 + 16) < 1;
          if (v13 || *(int *)(v12 + 12) < 1) {
            break;
          }
          v12 += 40;
          if ((long long *)v12 == v11) {
            goto LABEL_26;
          }
        }
        if ((long long *)v12 != v11)
        {
          int v14 = (long long *)(v12 + 40);
          if ((long long *)(v12 + 40) != v11)
          {
            do
            {
              BOOL v15 = *((int *)v14 + 2) < 1 || *((_DWORD *)v14 + 4) < 1;
              if (!v15 && *((int *)v14 + 3) >= 1)
              {
                long long v16 = *v14;
                long long v17 = v14[1];
                *(unsigned char *)(v12 + 32) = *((unsigned char *)v14 + 32);
                *(_OWORD *)uint64_t v12 = v16;
                *(_OWORD *)(v12 + 16) = v17;
                v12 += 40;
              }
              int v14 = (long long *)((char *)v14 + 40);
            }
            while (v14 != v11);
            unint64_t v11 = *(long long **)(v9 + 128);
          }
        }
        if ((long long *)v12 != v11) {
          *(void *)(v9 + 128) = v12;
        }
      }
LABEL_26:
      v9 += 168;
    }
  }
}

void sub_BB0D20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 + 184);
    BOOL v4 = *(long long **)(v2 + 192);
    if ((long long *)v5 != v4)
    {
      while (1)
      {
        BOOL v6 = *(int *)(v5 + 8) < 1 || *(_DWORD *)(v5 + 16) < 1;
        if (v6 || *(int *)(v5 + 12) < 1) {
          break;
        }
        v5 += 40;
        if ((long long *)v5 == v4) {
          goto LABEL_2;
        }
      }
      if ((long long *)v5 != v4)
      {
        long long v7 = (long long *)(v5 + 40);
        if ((long long *)(v5 + 40) != v4)
        {
          do
          {
            BOOL v8 = *((int *)v7 + 2) < 1 || *((_DWORD *)v7 + 4) < 1;
            if (!v8 && *((int *)v7 + 3) >= 1)
            {
              long long v9 = *v7;
              long long v10 = v7[1];
              *(unsigned char *)(v5 + 32) = *((unsigned char *)v7 + 32);
              *(_OWORD *)uint64_t v5 = v9;
              *(_OWORD *)(v5 + 16) = v10;
              v5 += 40;
            }
            long long v7 = (long long *)((char *)v7 + 40);
          }
          while (v7 != v4);
          BOOL v4 = *(long long **)(v2 + 192);
        }
      }
      if ((long long *)v5 != v4) {
        *(void *)(v2 + 192) = v5;
      }
    }
LABEL_2:
    v2 += 248;
  }
}

uint64_t sub_BB0E24(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  __p = operator new(0x30uLL);
  long long v11 = xmmword_20B9A40;
  strcpy((char *)__p, "filter_timestamp_before_main_leg_departure");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 32) = v6;
  __p = operator new(0x30uLL);
  long long v11 = xmmword_20B93D0;
  strcpy((char *)__p, "filter_timestamp_after_main_leg_departure");
  BOOL v7 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 33) = v7;
  __p = operator new(0x19uLL);
  long long v11 = xmmword_20B9250;
  strcpy((char *)__p, "max_num_legs_per_bundle");
  int v8 = sub_BB1040(a2, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(_DWORD *)(a1 + 36) = v8;
  return a1;
}

void sub_BB0FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_9F5350(v15);
    _Unwind_Resume(a1);
  }
  sub_9F5350(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_BB1040(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_BB10D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_BB1104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  for (uint64_t i = *(void *)(a2 + 16); v2 != i; v2 += 296)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (!v5) {
      sub_29F82C();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v2))
    {
      uint64_t v7 = *(void *)(v2 + 200);
      uint64_t v6 = *(void *)(v2 + 208);
      unint64_t v8 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 3);
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      BOOL v9 = v6 == v7;
      BOOL v10 = v6 != v7;
      if (v9) {
        unint64_t v11 = v8 + 1;
      }
      else {
        unint64_t v11 = v8;
      }
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((v12 | v10) != 1)
      {
        uint64_t v13 = v12 + v10 - 1;
        uint64_t v14 = 144;
        do
        {
          sub_BB11FC(a1, (void **)(*(void *)(v2 + 200) + v14 - 72), (void **)(*(void *)(v2 + 200) + v14));
          v14 += 144;
          v13 -= 2;
        }
        while (v13);
      }
    }
  }
}

void sub_BB11FC(uint64_t a1, void **a2, void **a3)
{
  uint64_t v3 = (unsigned int *)*a2;
  BOOL v4 = (unsigned int *)a2[1];
  if (*a2 != v4)
  {
    unsigned int v8 = v3[40];
    unint64_t v9 = *((void *)v3 + 1);
    uint64_t v10 = v3[1];
    __n128 v63 = 0uLL;
    unint64_t v64 = 0;
    __n128 __p = 0uLL;
    unint64_t v62 = 0;
    uint64_t v11 = v10 | (v10 << 32);
    if (v8) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v9;
    }
    int v13 = *v3;
    uint64_t v14 = (char *)*a3;
    unsigned int *v3 = sub_2D0F10(0);
    unint64_t v15 = v63.n128_u64[1];
    if (v63.n128_u64[1] >= v64)
    {
      unint64_t v19 = sub_B5C228((void **)&v63, (uint64_t)v3);
    }
    else
    {
      *(_DWORD *)(v63.n128_u64[1] + 160) = -1;
      long long v16 = *(_OWORD *)v3;
      long long v17 = *((_OWORD *)v3 + 1);
      long long v18 = *((_OWORD *)v3 + 2);
      *(_OWORD *)(v15 + 44) = *(_OWORD *)(v3 + 11);
      *(_OWORD *)(v15 + 16) = v17;
      *(_OWORD *)(v15 + 32) = v18;
      *(_OWORD *)unint64_t v15 = v16;
      *(void *)(v15 + 72) = 0;
      *(void *)(v15 + 80) = 0;
      *(void *)(v15 + 64) = 0;
      *(_OWORD *)(v15 + 64) = *((_OWORD *)v3 + 4);
      *(void *)(v15 + 80) = *((void *)v3 + 10);
      *((void *)v3 + 8) = 0;
      *((void *)v3 + 9) = 0;
      *((void *)v3 + 10) = 0;
      *(void *)(v15 + 88) = 0;
      *(void *)(v15 + 96) = 0;
      *(void *)(v15 + 104) = 0;
      *(_OWORD *)(v15 + 88) = *(_OWORD *)(v3 + 22);
      *(void *)(v15 + 104) = *((void *)v3 + 13);
      *((void *)v3 + 12) = 0;
      *((void *)v3 + 13) = 0;
      *((void *)v3 + 11) = 0;
      *(_DWORD *)(v15 + 112) = v3[28];
      *(void *)(v15 + 128) = 0;
      *(void *)(v15 + 136) = 0;
      *(void *)(v15 + 120) = 0;
      *(_OWORD *)(v15 + 120) = *(_OWORD *)(v3 + 30);
      *(void *)(v15 + 136) = *((void *)v3 + 17);
      *((void *)v3 + 16) = 0;
      *((void *)v3 + 17) = 0;
      *((void *)v3 + 15) = 0;
      *(_OWORD *)(v15 + 144) = *((_OWORD *)v3 + 9);
      *(_DWORD *)(v15 + 160) = 0;
      unint64_t v19 = (char *)(v15 + 168);
    }
    uint64_t v20 = &v14[168 * v13];
    v63.n128_u64[1] = (unint64_t)v19;
    unint64_t v21 = __p.n128_u64[1];
    if (__p.n128_u64[1] >= v62)
    {
      uint64_t v23 = sub_A21588((void **)&__p, v20);
    }
    else
    {
      *(_DWORD *)(__p.n128_u64[1] + 160) = -1;
      long long v22 = *(_OWORD *)v20;
      *(_OWORD *)(v21 + 12) = *(_OWORD *)(v20 + 12);
      *(_OWORD *)unint64_t v21 = v22;
      *(_DWORD *)(v21 + 160) = 1;
      uint64_t v23 = (char *)(v21 + 168);
    }
    uint64_t v24 = (char *)v4 - (char *)v3;
    __p.n128_u64[1] = (unint64_t)v23;
    if ((char *)v4 - (char *)v3 != 168)
    {
      unint64_t v31 = HIDWORD(v12);
      uint64_t v32 = v24 / 168 - 1;
      uint64_t v33 = 42;
      do
      {
        uint64_t v36 = (unsigned int *)*a2;
        uint64_t v37 = (uint64_t)*a2 + v33 * 4;
        int v38 = *(_DWORD *)(v37 + 12);
        int v39 = *(unsigned __int8 *)(v37 + 158);
        if (*(unsigned char *)(a1 + 32)) {
          BOOL v40 = v39 == 0;
        }
        else {
          BOOL v40 = 1;
        }
        if (v40 || v38 >= (int)v31)
        {
          BOOL v42 = !*(unsigned char *)(a1 + 33) || v39 == 0;
          if (v42 || v38 < (int)v31)
          {
            int v44 = *(_DWORD *)v37;
            uint64_t v45 = (char *)*a3;
            uint64_t v46 = *(unsigned int *)(a1 + 36);
            if (!v46 || 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v63.n128_u64[1] - v63.n128_u64[0]) >> 3) != v46)
            {
              *(_DWORD *)uint64_t v37 = sub_2D0F10(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v63.n128_u64[1] - v63.n128_u64[0]) >> 3));
              unint64_t v47 = v63.n128_u64[1];
              if (v63.n128_u64[1] >= v64)
              {
                int v52 = sub_B5C228((void **)&v63, v37);
              }
              else
              {
                *(_DWORD *)(v63.n128_u64[1] + 160) = -1;
                long long v48 = *(_OWORD *)v37;
                long long v49 = *(_OWORD *)(v37 + 16);
                long long v50 = *(_OWORD *)(v37 + 32);
                *(_OWORD *)(v47 + 44) = *(_OWORD *)(v37 + 44);
                *(_OWORD *)(v47 + 16) = v49;
                *(_OWORD *)(v47 + 32) = v50;
                *(_OWORD *)unint64_t v47 = v48;
                uint64_t v51 = &v36[v33];
                *(void *)(v47 + 72) = 0;
                *(void *)(v47 + 80) = 0;
                *(void *)(v47 + 64) = 0;
                *(_OWORD *)(v47 + 64) = *(_OWORD *)&v36[v33 + 16];
                *(void *)(v47 + 80) = *(void *)&v36[v33 + 20];
                *((void *)v51 + 8) = 0;
                *((void *)v51 + 9) = 0;
                *((void *)v51 + 10) = 0;
                *(void *)(v47 + 88) = 0;
                *(void *)(v47 + 96) = 0;
                *(void *)(v47 + 104) = 0;
                *(_OWORD *)(v47 + 88) = *(_OWORD *)&v36[v33 + 22];
                *(void *)(v47 + 104) = *(void *)&v36[v33 + 26];
                *((void *)v51 + 12) = 0;
                *((void *)v51 + 13) = 0;
                *((void *)v51 + 11) = 0;
                *(_DWORD *)(v47 + 112) = v36[v33 + 28];
                *(void *)(v47 + 128) = 0;
                *(void *)(v47 + 136) = 0;
                *(void *)(v47 + 120) = 0;
                *(_OWORD *)(v47 + 120) = *(_OWORD *)&v36[v33 + 30];
                *(void *)(v47 + 136) = *(void *)&v36[v33 + 34];
                *((void *)v51 + 16) = 0;
                *((void *)v51 + 17) = 0;
                *((void *)v51 + 15) = 0;
                *(_OWORD *)(v47 + 144) = *(_OWORD *)&v36[v33 + 36];
                *(_DWORD *)(v47 + 160) = 0;
                int v52 = (char *)(v47 + 168);
              }
              char v53 = &v45[168 * v44];
              v63.n128_u64[1] = (unint64_t)v52;
              unint64_t v54 = __p.n128_u64[1];
              if (__p.n128_u64[1] < v62)
              {
                *(_DWORD *)(__p.n128_u64[1] + 160) = -1;
                long long v34 = *(_OWORD *)v53;
                *(_OWORD *)(v54 + 12) = *(_OWORD *)(v53 + 12);
                *(_OWORD *)unint64_t v54 = v34;
                *(_DWORD *)(v54 + 160) = 1;
                uint64_t v35 = (char *)(v54 + 168);
              }
              else
              {
                uint64_t v35 = sub_A21588((void **)&__p, v53);
              }
              __p.n128_u64[1] = (unint64_t)v35;
            }
          }
        }
        v33 += 42;
        --v32;
      }
      while (v32);
    }
    sub_A21B40(a2, &v63);
    sub_A21B40(a3, &__p);
    unint64_t v25 = __p.n128_u64[0];
    if (__p.n128_u64[0])
    {
      unint64_t v26 = __p.n128_u64[1];
      char v27 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[1] != __p.n128_u64[0])
      {
        do
        {
          if (!*(_DWORD *)(v26 - 8))
          {
            long long v28 = *(void **)(v26 - 48);
            if (v28)
            {
              *(void *)(v26 - 40) = v28;
              operator delete(v28);
            }
            long long v29 = *(void **)(v26 - 80);
            if (v29)
            {
              *(void *)(v26 - 72) = v29;
              operator delete(v29);
            }
            int v30 = *(void **)(v26 - 104);
            if (v30)
            {
              *(void *)(v26 - 96) = v30;
              operator delete(v30);
            }
          }
          v26 -= 168;
        }
        while (v26 != v25);
        char v27 = (void *)__p.n128_u64[0];
      }
      __p.n128_u64[1] = v25;
      operator delete(v27);
    }
    unint64_t v55 = v63.n128_u64[0];
    if (v63.n128_u64[0])
    {
      unint64_t v56 = v63.n128_u64[1];
      char v57 = (void *)v63.n128_u64[0];
      if (v63.n128_u64[1] != v63.n128_u64[0])
      {
        do
        {
          if (!*(_DWORD *)(v56 - 8))
          {
            long long v58 = *(void **)(v56 - 48);
            if (v58)
            {
              *(void *)(v56 - 40) = v58;
              operator delete(v58);
            }
            char v59 = *(void **)(v56 - 80);
            if (v59)
            {
              *(void *)(v56 - 72) = v59;
              operator delete(v59);
            }
            uint64_t v60 = *(void **)(v56 - 104);
            if (v60)
            {
              *(void *)(v56 - 96) = v60;
              operator delete(v60);
            }
          }
          v56 -= 168;
        }
        while (v56 != v55);
        char v57 = (void *)v63.n128_u64[0];
      }
      v63.n128_u64[1] = v55;
      operator delete(v57);
    }
  }
}

void sub_BB167C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void **sub_BB169C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (!*((_DWORD *)v3 - 2))
        {
          uint64_t v5 = (void *)*((void *)v3 - 6);
          if (v5)
          {
            *((void *)v3 - 5) = v5;
            operator delete(v5);
          }
          uint64_t v6 = (void *)*((void *)v3 - 10);
          if (v6)
          {
            *((void *)v3 - 9) = v6;
            operator delete(v6);
          }
          uint64_t v7 = (void *)*((void *)v3 - 13);
          if (v7)
          {
            *((void *)v3 - 12) = v7;
            operator delete(v7);
          }
        }
        v3 -= 168;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_BB1738(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "alternatives_type");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_B5F5C0(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "max_future_interval_minutes");
  *(_DWORD *)(a1 + 4) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "max_past_interval_minutes");
  *(_DWORD *)(a1 + 8) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "max_future_num_additional_alternatives");
  unint64_t v6 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_past_num_additional_alternatives");
  unint64_t v7 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 24) = v7;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_num_alternatives");
  unint64_t v8 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = v8;
  return a1;
}

void sub_BB1970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BB19A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_BB1738(a1, a2);
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(result + 4)) {
    int v5 = *(_DWORD *)(result + 4);
  }
  *(_DWORD *)(result + 4) = v5;
  unint64_t v6 = *(unsigned int *)(a3 + 12);
  if (*(void *)(result + 16) < v6) {
    unint64_t v6 = *(void *)(result + 16);
  }
  *(void *)(result + 16) = v6;
  return result;
}

uint64_t *sub_BB19F0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      uint64_t result = sub_BB1A3C(v4, v2);
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *sub_BB1A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 200);
  for (uint64_t result = *(uint64_t **)(a2 + 208); v4 != result; v4 += 9)
  {
    if (!*((unsigned char *)v4 + 24))
    {
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      if (*v4 != v6)
      {
        do
        {
          if (*(unsigned char *)a1) {
            uint64_t v7 = 88;
          }
          else {
            uint64_t v7 = 64;
          }
          if (*(unsigned char *)a1) {
            uint64_t v8 = v5 + 88;
          }
          else {
            uint64_t v8 = v5 + 64;
          }
          unint64_t v9 = (int *)(v5 + 112);
          if (!*(unsigned char *)a1) {
            unint64_t v9 = (int *)(v5 + 12);
          }
          uint64_t v10 = *(void *)(v5 + v7);
          uint64_t v11 = *(void *)(v8 + 8);
          if (v10 == v11) {
            goto LABEL_49;
          }
          unint64_t v12 = 0;
          int v13 = *v9;
          do
          {
            signed int v14 = *(_DWORD *)(v10 + 8);
            if (v14 == 0x7FFFFFFF) {
              signed int v14 = *(_DWORD *)(v10 + 4);
            }
            int v15 = *(_DWORD *)(a1 + 4);
            int v16 = v15 / 10;
            int v17 = v15 % 10;
            if (v15 < 0) {
              char v18 = -5;
            }
            else {
              char v18 = 5;
            }
            if (v14 > (int)(v16
                           + v13
                           + (((103 * (char)(v18 + v17)) >> 15) & 1)
                           + ((103 * (char)(v18 + v17)) >> 10)))
            {
              if (v12 >= *(void *)(a1 + 16)) {
                *(void *)(v10 + 28) = 0xFFFFFFFFLL;
              }
              ++v12;
            }
            v10 += 60;
          }
          while (v10 != v11);
          uint64_t v10 = *(void *)(v8 + 8);
          uint64_t v19 = *(void *)(v5 + v7);
          if (v10 == v19) {
            goto LABEL_49;
          }
          unint64_t v20 = 0;
          do
          {
            signed int v21 = *(_DWORD *)(v10 - 52);
            if (v21 == 0x7FFFFFFF) {
              signed int v21 = *(_DWORD *)(v10 - 56);
            }
            int v22 = *(_DWORD *)(a1 + 8);
            int v23 = v22 / -10;
            int v24 = v22 % 10;
            if (v22 < 0) {
              char v25 = -5;
            }
            else {
              char v25 = 5;
            }
            if (v21 < (int)(v23
                           + v13
                           + (((-103 * (char)(v25 + v24)) >> 15) & 1)
                           + ((-103 * (char)(v25 + v24)) >> 10)))
            {
              if (v20 >= *(void *)(a1 + 24)) {
                *(void *)(v10 - 32) = 0xFFFFFFFFLL;
              }
              ++v20;
            }
            v10 -= 60;
          }
          while (v10 != v19);
          uint64_t v10 = *(void *)(v5 + v7);
          unint64_t v26 = *(_OWORD **)(v8 + 8);
          if ((_OWORD *)v10 == v26)
          {
LABEL_49:
            unint64_t v26 = (_OWORD *)v10;
          }
          else
          {
            char v27 = (_OWORD *)(v10 + 60);
            while (1)
            {
              BOOL v28 = *((_DWORD *)v27 - 8) == -1 || *((_DWORD *)v27 - 7) == 0;
              if (v28) {
                break;
              }
              BOOL v28 = v27 == v26;
              char v27 = (_OWORD *)((char *)v27 + 60);
              if (v28) {
                goto LABEL_50;
              }
            }
            uint64_t v36 = v7;
            unint64_t v31 = (_OWORD *)((char *)v27 - 60);
            if ((_OWORD *)((char *)v27 - 60) != v26 && v27 != v26)
            {
              do
              {
                if (*((_DWORD *)v27 + 7) != -1 && *((_DWORD *)v27 + 8) != 0)
                {
                  long long v33 = *v27;
                  long long v34 = v27[1];
                  long long v35 = v27[2];
                  *(_OWORD *)((char *)v31 + 41) = *(_OWORD *)((char *)v27 + 41);
                  v31[1] = v34;
                  v31[2] = v35;
                  _OWORD *v31 = v33;
                  unint64_t v31 = (_OWORD *)((char *)v31 + 60);
                }
                char v27 = (_OWORD *)((char *)v27 + 60);
              }
              while (v27 != v26);
              unint64_t v26 = *(_OWORD **)(v8 + 8);
              uint64_t v10 = *(void *)(v5 + v36);
            }
            if (v31 != v26)
            {
              unint64_t v26 = v31;
              *(void *)(v8 + 8) = v31;
            }
          }
LABEL_50:
          unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v26 - v10) >> 2);
          unint64_t v30 = *(void *)(a1 + 32);
          if (v29 > v30) {
            *(void *)(v8 + 8) = v10 + 60 * v30;
          }
          v5 += 168;
        }
        while (v5 != v6);
      }
    }
  }
  return result;
}

unint64_t sub_BB1D88(unint64_t result, int a2, char **a3)
{
  unint64_t v4 = result;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6) {
    goto LABEL_26;
  }
  unint64_t v7 = 0;
  do
  {
    LODWORD(result) = *((_DWORD *)v5 + 2);
    if (result == 0x7FFFFFFF) {
      uint64_t result = *((unsigned int *)v5 + 1);
    }
    else {
      uint64_t result = result;
    }
    int v8 = *(_DWORD *)(v4 + 4);
    int v9 = v8 / 10;
    int v10 = v8 % 10;
    if (v8 < 0) {
      char v11 = -5;
    }
    else {
      char v11 = 5;
    }
    if ((int)result > (int)(v9
                           + a2
                           + (((103 * (char)(v11 + v10)) >> 15) & 1)
                           + ((103 * (char)(v11 + v10)) >> 10)))
    {
      uint64_t result = *(void *)(v4 + 16);
      if (v7 >= result) {
        *(void *)(v5 + 28) = 0xFFFFFFFFLL;
      }
      ++v7;
    }
    v5 += 60;
  }
  while (v5 != v6);
  uint64_t v5 = *a3;
  unint64_t v12 = a3[1];
  if (v12 == *a3)
  {
LABEL_26:
    uint64_t v19 = v5;
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t result = 0xFFFFFFFFLL;
    do
    {
      signed int v14 = *((_DWORD *)v12 - 13);
      if (v14 == 0x7FFFFFFF) {
        signed int v14 = *((_DWORD *)v12 - 14);
      }
      int v15 = *(_DWORD *)(v4 + 8);
      int v16 = v15 / -10;
      int v17 = v15 % 10;
      if (v15 < 0) {
        char v18 = -5;
      }
      else {
        char v18 = 5;
      }
      if (v14 < (int)(v16
                     + a2
                     + (((-103 * (char)(v18 + v17)) >> 15) & 1)
                     + ((-103 * (char)(v18 + v17)) >> 10)))
      {
        if (v13 >= *(void *)(v4 + 24)) {
          *((void *)v12 - 4) = 0xFFFFFFFFLL;
        }
        ++v13;
      }
      v12 -= 60;
    }
    while (v12 != v5);
    uint64_t v5 = *a3;
    uint64_t v19 = a3[1];
    if (*a3 == v19)
    {
      uint64_t v5 = a3[1];
    }
    else
    {
      unint64_t v20 = v5 + 60;
      while (1)
      {
        BOOL v21 = *((_DWORD *)v20 - 8) == -1 || *((_DWORD *)v20 - 7) == 0;
        if (v21) {
          break;
        }
        BOOL v21 = v20 == v19;
        v20 += 60;
        if (v21) {
          goto LABEL_49;
        }
      }
      int v22 = v20 - 60;
      if (v20 - 60 != v19 && v20 != v19)
      {
        do
        {
          if (*((_DWORD *)v20 + 7) != -1 && *((_DWORD *)v20 + 8) != 0)
          {
            long long v24 = *(_OWORD *)v20;
            long long v25 = *((_OWORD *)v20 + 1);
            long long v26 = *((_OWORD *)v20 + 2);
            *(_OWORD *)(v22 + 41) = *(_OWORD *)(v20 + 41);
            *((_OWORD *)v22 + 1) = v25;
            *((_OWORD *)v22 + 2) = v26;
            *(_OWORD *)int v22 = v24;
            v22 += 60;
          }
          v20 += 60;
        }
        while (v20 != v19);
        uint64_t v5 = *a3;
        uint64_t v19 = a3[1];
      }
      if (v22 != v19)
      {
        uint64_t v19 = v22;
        a3[1] = v22;
      }
    }
  }
LABEL_49:
  unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - v5) >> 2);
  unint64_t v28 = *(void *)(v4 + 32);
  if (v27 > v28) {
    a3[1] = &v5[60 * v28];
  }
  return result;
}

unint64_t sub_BB2010(unint64_t result, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  uint64_t v4 = *(void *)(a3 + 56);
  if (v3 != v4)
  {
    uint64_t v6 = (unsigned char *)result;
    do
    {
      if (*v6) {
        unint64_t v7 = (char **)(v3 + 96);
      }
      else {
        unint64_t v7 = (char **)(v3 + 72);
      }
      uint64_t result = sub_BB1D88((unint64_t)v6, *a2, v7);
      v3 += 248;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_BB2074(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "alternatives_type");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_B5F5C0(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v5;
  *(_DWORD *)(a1 + 4) = 0;
  char v20 = 15;
  strcpy((char *)v19, "domination_rule");
  uint64_t v6 = sub_561B0(a2, (uint64_t)v19);
  if (*(char *)(v6 + 23) < 0)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    if (v8 != 11)
    {
      if (v8 != 13) {
        goto LABEL_29;
      }
      unint64_t v7 = *(uint64_t **)v6;
      goto LABEL_10;
    }
    if (**(void **)v6 != 0x745F636974617473 || *(void *)(*(void *)v6 + 3) != 0x656D69745F636974)
    {
LABEL_29:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      int v16 = std::string::append(&v21, "\" provided in configuration");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__n128 __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      char v18 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    }
  }
  else
  {
    if (*(unsigned char *)(v6 + 23) != 11)
    {
      unint64_t v7 = (uint64_t *)v6;
      if (*(unsigned char *)(v6 + 23) != 13) {
        goto LABEL_29;
      }
LABEL_10:
      uint64_t v9 = *v7;
      uint64_t v10 = *(uint64_t *)((char *)v7 + 5);
      if (v9 != 0x6465746365707865 || v10 != 0x656D69745F646574) {
        goto LABEL_29;
      }
      *(_DWORD *)(a1 + 4) = 1;
      if (v20 < 0) {
        goto LABEL_24;
      }
      return a1;
    }
    if (*(void *)v6 != 0x745F636974617473 || *(void *)(v6 + 3) != 0x656D69745F636974) {
      goto LABEL_29;
    }
  }
  *(_DWORD *)(a1 + 4) = 0;
  if ((v20 & 0x80000000) == 0) {
    return a1;
  }
LABEL_24:
  operator delete(v19[0]);
  return a1;
}

void sub_BB22C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a9);
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_BB2368(uint64_t result, uint64_t a2, __n128 a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v3 != v4)
  {
    char v5 = (unsigned char *)result;
    do
    {
      uint64_t v6 = *(uint64_t **)(v3 + 200);
      unint64_t v7 = *(uint64_t **)(v3 + 208);
      while (v6 != v7)
      {
        if (!*((unsigned char *)v6 + 24))
        {
          uint64_t v8 = *v6;
          uint64_t v9 = v6[1];
          if (*v6 != v9)
          {
            do
            {
              if (*v5) {
                uint64_t v10 = (uint64_t *)(v8 + 88);
              }
              else {
                uint64_t v10 = (uint64_t *)(v8 + 64);
              }
              sub_BB2420((uint64_t)v5, v10, a3);
              uint64_t result = sub_BB26C4((uint64_t)v5, v10);
              v8 += 168;
            }
            while (v8 != v9);
          }
        }
        v6 += 9;
      }
      v3 += 296;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_BB2420(uint64_t a1, uint64_t *a2, __n128 a3)
{
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 1)
  {
    v15[0] = off_243E8C8;
    int v16 = v15;
    uint64_t v4 = off_243E9C8;
    goto LABEL_5;
  }
  if (!v3)
  {
    v15[0] = off_243E838;
    int v16 = v15;
    uint64_t v4 = off_243E948;
LABEL_5:
    v13[0] = v4;
    signed int v14 = v13;
    goto LABEL_7;
  }
  int v16 = 0;
  signed int v14 = 0;
LABEL_7:
  uint64_t v5 = *a2;
  uint64_t v6 = (char *)a2[1];
  v12[0] = v15;
  v12[1] = v13;
  if ((uint64_t)&v6[-v5] < 7681)
  {
LABEL_11:
    uint64_t v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v6[-v5] >> 2);
    while (1)
    {
      uint64_t v8 = operator new(60 * v7, &std::nothrow);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = v8;
  }
  sub_BB2B7C(v5, v6, v12, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v6[-v5] >> 2), v10, v7, a3);
  if (v10) {
    operator delete(v10);
  }
  if (v14 != v13)
  {
    if (v14) {
      (*(void (**)(void))(*v14 + 40))();
    }
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_19;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  (*(void (**)(void *))(v13[0] + 32))(v13);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_19:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_BB269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    operator delete(v16);
  }
  sub_BB2AEC(&a12);
  sub_BB2AEC(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_BB26C4(uint64_t a1, void *a2)
{
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 1)
  {
    v20[0] = off_243E8C8;
    std::string v21 = v20;
    v18[0] = off_243E9C8;
    uint64_t v19 = v18;
    uint64_t v4 = (_OWORD *)*a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2) {
      goto LABEL_38;
    }
  }
  else if (v3)
  {
    std::string v21 = 0;
    uint64_t v19 = 0;
    uint64_t v4 = (_OWORD *)*a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2) {
      goto LABEL_38;
    }
  }
  else
  {
    v20[0] = off_243E838;
    std::string v21 = v20;
    v18[0] = off_243E948;
    uint64_t v19 = v18;
    uint64_t v4 = (_OWORD *)*a2;
    uint64_t v5 = a2[1];
    if (v5 == *a2) {
      goto LABEL_38;
    }
  }
  int v6 = 2147483646;
  int v7 = 2147483646;
  do
  {
    while (1)
    {
      if (!v21) {
        sub_29F82C();
      }
      uint64_t v8 = (_OWORD *)(v5 - 60);
      if ((*(int (**)(void *, uint64_t))(*v21 + 48))(v21, v5 - 60) < v6)
      {
        if (!v19) {
          sub_29F82C();
        }
        if ((*(int (**)(void *, uint64_t))(*v19 + 48))(v19, v5 - 60) < v7) {
          break;
        }
      }
      *(void *)(v5 - 32) = 0xFFFFFFFFLL;
      v5 -= 60;
      if (v8 == v4) {
        goto LABEL_17;
      }
    }
    if (!v21) {
      sub_29F82C();
    }
    int v6 = (*(uint64_t (**)(void *, uint64_t))(*v21 + 48))(v21, v5 - 60);
    if (!v19) {
      sub_29F82C();
    }
    int v7 = (*(uint64_t (**)(void *, uint64_t))(*v19 + 48))(v19, v5 - 60);
    v5 -= 60;
  }
  while (v8 != v4);
LABEL_17:
  BOOL v9 = (_OWORD *)a2[1];
  if ((_OWORD *)*a2 != v9)
  {
    uint64_t v10 = *a2 + 60;
    while (1)
    {
      BOOL v11 = *(_DWORD *)(v10 - 32) == -1 || *(_DWORD *)(v10 - 28) == 0;
      if (v11) {
        break;
      }
      BOOL v11 = v10 == (void)v9;
      v10 += 60;
      if (v11) {
        goto LABEL_38;
      }
    }
    unint64_t v12 = (_OWORD *)(v10 - 60);
    if ((_OWORD *)(v10 - 60) != v9 && (_OWORD *)v10 != v9)
    {
      do
      {
        if (*(_DWORD *)(v10 + 28) != -1 && *(_DWORD *)(v10 + 32) != 0)
        {
          long long v14 = *(_OWORD *)v10;
          long long v15 = *(_OWORD *)(v10 + 16);
          long long v16 = *(_OWORD *)(v10 + 32);
          *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)(v10 + 41);
          v12[1] = v15;
          void v12[2] = v16;
          *unint64_t v12 = v14;
          unint64_t v12 = (_OWORD *)((char *)v12 + 60);
        }
        v10 += 60;
      }
      while ((_OWORD *)v10 != v9);
      BOOL v9 = (_OWORD *)a2[1];
    }
    if (v12 != v9) {
      a2[1] = v12;
    }
  }
LABEL_38:
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    uint64_t result = (uint64_t)v21;
    if (v21 != v20) {
      goto LABEL_42;
    }
    return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
  }
  (*(void (**)(void *))(v18[0] + 32))(v18);
  uint64_t result = (uint64_t)v21;
  if (v21 == v20) {
    return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
  }
LABEL_42:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_BB2AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_BB2AEC((uint64_t *)va);
  sub_BB2AEC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_BB2AEC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_BB2B7C(uint64_t a1, char *a2, void *a3, unint64_t a4, _OWORD *a5, uint64_t a6, __n128 a7)
{
  if (a4 < 2) {
    return;
  }
  BOOL v9 = (long long *)a1;
  if (a4 == 2)
  {
    uint64_t v10 = a2 - 60;
    if (sub_BB303C(a3, (uint64_t)(a2 - 60), a1))
    {
      v69[0] = v9[2];
      *(_OWORD *)((char *)v69 + 12) = *(long long *)((char *)v9 + 44);
      long long v12 = *v9;
      long long v11 = v9[1];
      long long v14 = *((_OWORD *)v10 + 1);
      long long v13 = *((_OWORD *)v10 + 2);
      long long v15 = *(_OWORD *)v10;
      *(long long *)((char *)v9 + 41) = *(_OWORD *)(v10 + 41);
      v9[1] = v14;
      v9[2] = v13;
      long long *v9 = v15;
      *(_OWORD *)uint64_t v10 = v12;
      *((_OWORD *)v10 + 1) = v11;
      *((_OWORD *)v10 + 2) = v69[0];
      *(_OWORD *)(v10 + 41) = *(_OWORD *)((char *)v69 + 9);
    }
    return;
  }
  if ((uint64_t)a4 > 128)
  {
    uint64_t v43 = (uint64_t)a5;
    unint64_t v44 = a4 >> 1;
    uint64_t v45 = a1 + 60 * (a4 >> 1);
    unint64_t v46 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_BB2B7C(a1, v45, a3, v46, a5, a6);
      sub_BB2B7C((char *)v9 + 60 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v43, a6);
      sub_BB3694((uint64_t)v9, (char *)v9 + 60 * (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v43, a6);
      return;
    }
    __n128 v47 = sub_BB31D8(a1, v45, a3, v46, a5, a7);
    long long v48 = (long long *)(v43 + 60 * v44);
    sub_BB31D8((uint64_t)v9 + 60 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v48, v47);
    long long v49 = (long long *)(v43 + 60 * a4);
    long long v50 = v48;
    while (1)
    {
      if (v50 == v49)
      {
        if ((long long *)v43 != v48)
        {
          uint64_t v62 = 0;
          do
          {
            __n128 v63 = (long long *)((char *)v9 + v62);
            long long v64 = *(_OWORD *)(v43 + v62);
            long long v65 = *(_OWORD *)(v43 + v62 + 16);
            long long v66 = *(_OWORD *)(v43 + v62 + 32);
            *(_OWORD *)((char *)v63 + 41) = *(_OWORD *)(v43 + v62 + 41);
            v63[1] = v65;
            v63[2] = v66;
            *__n128 v63 = v64;
            v62 += 60;
          }
          while ((long long *)(v43 + v62) != v48);
        }
        return;
      }
      if (sub_BB303C(a3, (uint64_t)v50, v43))
      {
        long long v54 = *v50;
        long long v55 = v50[1];
        long long v56 = v50[2];
        *(long long *)((char *)v9 + 41) = *(long long *)((char *)v50 + 41);
        v9[1] = v55;
        v9[2] = v56;
        long long *v9 = v54;
        BOOL v9 = (long long *)((char *)v9 + 60);
        long long v50 = (long long *)((char *)v50 + 60);
        if ((long long *)v43 == v48)
        {
LABEL_37:
          if (v50 != v49)
          {
            uint64_t v57 = 0;
            do
            {
              long long v58 = (long long *)((char *)v9 + v57);
              long long v59 = *(long long *)((char *)v50 + v57);
              long long v60 = *(long long *)((char *)v50 + v57 + 16);
              long long v61 = *(long long *)((char *)v50 + v57 + 32);
              *(_OWORD *)((char *)v58 + 41) = *(long long *)((char *)v50 + v57 + 41);
              v58[1] = v60;
              v58[2] = v61;
              _OWORD *v58 = v59;
              v57 += 60;
            }
            while ((long long *)((char *)v50 + v57) != v49);
          }
          return;
        }
      }
      else
      {
        long long v51 = *(_OWORD *)v43;
        long long v52 = *(_OWORD *)(v43 + 16);
        long long v53 = *(_OWORD *)(v43 + 32);
        *(long long *)((char *)v9 + 41) = *(_OWORD *)(v43 + 41);
        v9[1] = v52;
        v9[2] = v53;
        long long *v9 = v51;
        BOOL v9 = (long long *)((char *)v9 + 60);
        v43 += 60;
        if ((long long *)v43 == v48) {
          goto LABEL_37;
        }
      }
    }
  }
  if ((char *)a1 == a2) {
    return;
  }
  uint64_t v17 = a1 + 60;
  if ((char *)(a1 + 60) == a2) {
    return;
  }
  uint64_t v18 = 0;
  uint64_t v19 = (long long *)a1;
  while (2)
  {
    int v23 = (long long *)v17;
    if (!sub_BB303C(a3, v17, (uint64_t)v19)) {
      goto LABEL_12;
    }
    long long v24 = *v23;
    long long v25 = v23[1];
    long long v26 = v23[2];
    *(_OWORD *)((char *)v69 + 12) = *(long long *)((char *)v23 + 44);
    long long v68 = v25;
    v69[0] = v26;
    long long v67 = v24;
    long long v27 = *v19;
    long long v28 = v19[1];
    long long v29 = v19[2];
    *(long long *)((char *)v23 + 41) = *(long long *)((char *)v19 + 41);
    v23[1] = v28;
    v23[2] = v29;
    long long *v23 = v27;
    if (v19 == v9)
    {
LABEL_10:
      uint64_t v19 = v9;
      goto LABEL_11;
    }
    uint64_t v30 = v18;
    while (1)
    {
      uint64_t v32 = *(void *)(*a3 + 24);
      if (!v32
        || (int v33 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v32 + 48))(v32, &v67),
            (uint64_t v34 = *(void *)(*a3 + 24)) == 0))
      {
LABEL_45:
        sub_29F82C();
      }
      long long v35 = (long long *)((char *)v9 + v30);
      if (v33 == (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v34 + 48))(v34, (uint64_t)v9 + v30 - 60))break; {
      uint64_t v39 = *(void *)(*a3 + 24);
      }
      if (!v39) {
        goto LABEL_45;
      }
      int v40 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v39 + 48))(v39, &v67);
      uint64_t v41 = *(void *)(*a3 + 24);
      if (!v41) {
        goto LABEL_45;
      }
      if (v40 >= (*(int (**)(uint64_t, uint64_t))(*(void *)v41 + 48))(v41, (uint64_t)v9 + v30 - 60)) {
        goto LABEL_11;
      }
LABEL_16:
      uint64_t v19 = (long long *)((char *)v19 - 60);
      long long v31 = *(long long *)((char *)v9 + v30 - 44);
      _OWORD *v35 = *(long long *)((char *)v9 + v30 - 60);
      v35[1] = v31;
      v35[2] = *(long long *)((char *)v9 + v30 - 28);
      *(_OWORD *)((char *)v35 + 41) = *(long long *)((char *)v9 + v30 - 19);
      v30 -= 60;
      if (!v30) {
        goto LABEL_10;
      }
    }
    uint64_t v36 = *(void *)(a3[1] + 24);
    if (!v36) {
      goto LABEL_45;
    }
    int v37 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v36 + 48))(v36, &v67);
    uint64_t v38 = *(void *)(a3[1] + 24);
    if (!v38) {
      goto LABEL_45;
    }
    if (v37 > (*(int (**)(uint64_t, uint64_t))(*(void *)v38 + 48))(v38, (uint64_t)v9 + v30 - 60)) {
      goto LABEL_16;
    }
    uint64_t v19 = (long long *)((char *)v9 + v30);
LABEL_11:
    long long v20 = v67;
    long long v21 = v68;
    long long v22 = v69[0];
    *(long long *)((char *)v19 + 41) = *(_OWORD *)((char *)v69 + 9);
    v19[1] = v21;
    v19[2] = v22;
    *uint64_t v19 = v20;
LABEL_12:
    uint64_t v17 = (uint64_t)v23 + 60;
    v18 += 60;
    uint64_t v19 = v23;
    if ((char *)v23 + 60 != a2) {
      continue;
    }
    break;
  }
}

BOOL sub_BB303C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*a1 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  uint64_t v8 = *(void *)(*a1 + 24);
  if (!v8) {
    goto LABEL_10;
  }
  if (v7 == (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a3))
  {
    uint64_t v9 = *(void *)(a1[1] + 24);
    if (v9)
    {
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, a2);
      uint64_t v11 = *(void *)(a1[1] + 24);
      if (v11) {
        return v10 > (*(int (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a3);
      }
    }
LABEL_10:
    sub_29F82C();
  }
  uint64_t v13 = *(void *)(*a1 + 24);
  if (!v13) {
    goto LABEL_10;
  }
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a2);
  uint64_t v15 = *(void *)(*a1 + 24);
  if (!v15) {
    goto LABEL_10;
  }
  return v14 < (*(int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, a3);
}

__n128 sub_BB31D8(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, _OWORD *a5, __n128 result)
{
  if (a4)
  {
    uint64_t v6 = (__n128 *)a5;
    uint64_t v9 = a2;
    uint64_t v10 = a1;
    if (a4 == 2)
    {
      uint64_t v13 = (__n128 *)(a2 - 60);
      if (sub_BB303C(a3, a2 - 60, a1))
      {
        __n128 v14 = *v13;
        __n128 v15 = *(__n128 *)(v9 - 44);
        __n128 v16 = *(__n128 *)(v9 - 28);
        *(__n128 *)((char *)v6 + 44) = *(__n128 *)(v9 - 16);
        v6[1] = v15;
        v6[2] = v16;
        *uint64_t v6 = v14;
        uint64_t result = *(__n128 *)v10;
        __n128 v17 = *(__n128 *)(v10 + 16);
        __n128 v18 = *(__n128 *)(v10 + 32);
        __n128 v19 = *(__n128 *)(v10 + 44);
      }
      else
      {
        __n128 v44 = *(__n128 *)v10;
        __n128 v45 = *(__n128 *)(v10 + 16);
        __n128 v46 = *(__n128 *)(v10 + 32);
        *(__n128 *)((char *)v6 + 44) = *(__n128 *)(v10 + 44);
        v6[1] = v45;
        v6[2] = v46;
        *uint64_t v6 = v44;
        uint64_t result = *v13;
        __n128 v17 = *(__n128 *)(v9 - 44);
        __n128 v18 = *(__n128 *)(v9 - 28);
        __n128 v19 = *(__n128 *)(v9 - 16);
      }
      *(__n128 *)((char *)v6 + 104) = v19;
      *(__n128 *)((char *)v6 + 76) = v17;
      *(__n128 *)((char *)v6 + 92) = v18;
      *(__n128 *)((char *)v6 + 60) = result;
    }
    else if (a4 == 1)
    {
      uint64_t result = *(__n128 *)a1;
      long long v11 = *(_OWORD *)(a1 + 16);
      long long v12 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)((char *)a5 + 44) = *(_OWORD *)(a1 + 44);
      a5[1] = v11;
      a5[2] = v12;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v47 = a4 >> 1;
      uint64_t v48 = 60 * (a4 >> 1);
      uint64_t v49 = a1 + v48;
      sub_BB2B7C(a1, a1 + v48, a3, a4 >> 1, a5, a4 >> 1);
      sub_BB2B7C(v10 + v48, v9, a3, a4 - v47, (char *)v6 + v48, a4 - v47);
      uint64_t v50 = v10 + v48;
      while (v50 != v9)
      {
        if (sub_BB303C(a3, v50, v10))
        {
          uint64_t result = *(__n128 *)v50;
          __n128 v53 = *(__n128 *)(v50 + 16);
          __n128 v54 = *(__n128 *)(v50 + 32);
          *(__n128 *)((char *)v6 + 44) = *(__n128 *)(v50 + 44);
          v6[1] = v53;
          v6[2] = v54;
          *uint64_t v6 = result;
          uint64_t v6 = (__n128 *)((char *)v6 + 60);
          v50 += 60;
          if (v10 == v49)
          {
LABEL_39:
            if (v50 != v9)
            {
              uint64_t v55 = 0;
              do
              {
                uint64_t v56 = (uint64_t)v6 + v55;
                uint64_t result = *(__n128 *)(v50 + v55);
                long long v57 = *(_OWORD *)(v50 + v55 + 16);
                long long v58 = *(_OWORD *)(v50 + v55 + 32);
                *(_OWORD *)(v56 + 44) = *(_OWORD *)(v50 + v55 + 44);
                *(_OWORD *)(v56 + 16) = v57;
                *(_OWORD *)(v56 + 32) = v58;
                *(__n128 *)uint64_t v56 = result;
                v55 += 60;
              }
              while (v50 + v55 != v9);
            }
            return result;
          }
        }
        else
        {
          uint64_t result = *(__n128 *)v10;
          __n128 v51 = *(__n128 *)(v10 + 16);
          __n128 v52 = *(__n128 *)(v10 + 32);
          *(__n128 *)((char *)v6 + 44) = *(__n128 *)(v10 + 44);
          v6[1] = v51;
          v6[2] = v52;
          *uint64_t v6 = result;
          uint64_t v6 = (__n128 *)((char *)v6 + 60);
          v10 += 60;
          if (v10 == v49) {
            goto LABEL_39;
          }
        }
      }
      if (v10 != v49)
      {
        uint64_t v59 = 0;
        do
        {
          uint64_t v60 = (uint64_t)v6 + v59;
          uint64_t result = *(__n128 *)(v10 + v59);
          long long v61 = *(_OWORD *)(v10 + v59 + 16);
          long long v62 = *(_OWORD *)(v10 + v59 + 32);
          *(_OWORD *)(v60 + 44) = *(_OWORD *)(v10 + v59 + 44);
          *(_OWORD *)(v60 + 16) = v61;
          *(_OWORD *)(v60 + 32) = v62;
          *(__n128 *)uint64_t v60 = result;
          v59 += 60;
        }
        while (v10 + v59 != v49);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *(__n128 *)a1;
      long long v20 = *(_OWORD *)(a1 + 16);
      long long v21 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)((char *)a5 + 44) = *(_OWORD *)(a1 + 44);
      a5[1] = v20;
      a5[2] = v21;
      *a5 = result;
      uint64_t v22 = a1 + 60;
      if (a1 + 60 != a2)
      {
        uint64_t v23 = 0;
        long long v24 = (__n128 *)a5;
        do
        {
          while (1)
          {
            long long v27 = (__n128 *)((char *)v24 + 60);
            if (sub_BB303C(a3, v22, (uint64_t)v24)) {
              break;
            }
            uint64_t result = *(__n128 *)v22;
            __n128 v25 = *(__n128 *)(v22 + 16);
            __n128 v26 = *(__n128 *)(v22 + 32);
            *(__n128 *)((char *)v24 + 104) = *(__n128 *)(v22 + 44);
            *(__n128 *)((char *)v24 + 76) = v25;
            *(__n128 *)((char *)v24 + 92) = v26;
            __n128 *v27 = result;
            v22 += 60;
            v23 += 60;
            long long v24 = (__n128 *)((char *)v24 + 60);
            if (v22 == v9) {
              return result;
            }
          }
          __n128 v28 = v24[1];
          __n128 *v27 = *v24;
          *(__n128 *)((char *)v24 + 76) = v28;
          *(__n128 *)((char *)v24 + 92) = v24[2];
          *(__n128 *)((char *)v24 + 104) = *(__n128 *)((char *)v24 + 44);
          long long v29 = v6;
          if (v24 != v6)
          {
            uint64_t v30 = v23;
            do
            {
              uint64_t v32 = *(void *)(*a3 + 24);
              if (!v32
                || (int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, v22),
                    (uint64_t v34 = *(void *)(*a3 + 24)) == 0))
              {
LABEL_47:
                sub_29F82C();
              }
              long long v35 = (_OWORD *)((char *)v6->n128_u64 + v30);
              if (v33 == (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v34 + 48))(v34, (uint64_t)&v6[-3] + v30 - 12))
              {
                uint64_t v36 = *(void *)(a3[1] + 24);
                if (!v36) {
                  goto LABEL_47;
                }
                int v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 48))(v36, v22);
                uint64_t v38 = *(void *)(a3[1] + 24);
                if (!v38) {
                  goto LABEL_47;
                }
                if (v37 <= (*(int (**)(uint64_t, uint64_t))(*(void *)v38 + 48))(v38, (uint64_t)&v6[-3] + v30 - 12))
                {
                  long long v29 = v24;
                  goto LABEL_28;
                }
              }
              else
              {
                uint64_t v39 = *(void *)(*a3 + 24);
                if (!v39) {
                  goto LABEL_47;
                }
                int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v39 + 48))(v39, v22);
                uint64_t v41 = *(void *)(*a3 + 24);
                if (!v41) {
                  goto LABEL_47;
                }
                if (v40 >= (*(int (**)(uint64_t, uint64_t))(*(void *)v41 + 48))(v41, (uint64_t)&v6[-3] + v30 - 12))
                {
                  long long v29 = (__n128 *)((char *)v6 + v30);
                  goto LABEL_28;
                }
              }
              long long v24 = (__n128 *)((char *)v24 - 60);
              long long v31 = *(long long *)((char *)&v6[-2] + v30 - 12);
              _OWORD *v35 = *(__n128 *)((char *)&v6[-3] + v30 - 12);
              v35[1] = v31;
              v35[2] = *(__n128 *)((char *)&v6[-1] + v30 - 12);
              *(__n128 *)((char *)v35 + 41) = *(__n128 *)((char *)&v6[-1] + v30 - 3);
              v30 -= 60;
            }
            while (v30);
            long long v29 = v6;
LABEL_28:
            uint64_t v9 = a2;
          }
          uint64_t result = *(__n128 *)v22;
          __n128 v42 = *(__n128 *)(v22 + 16);
          __n128 v43 = *(__n128 *)(v22 + 32);
          *(__n128 *)((char *)v29 + 41) = *(__n128 *)(v22 + 41);
          v29[1] = v42;
          __n128 v29[2] = v43;
          __n128 *v29 = result;
          v22 += 60;
          v23 += 60;
          long long v24 = v27;
        }
        while (v22 != v9);
      }
    }
  }
  return result;
}

uint64_t sub_BB3694(uint64_t result, char *a2, char *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v86 = a6;
  if (a6)
  {
    __n128 v14 = (char *)result;
    while (v86 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = -a5;
      while (1)
      {
        __n128 v17 = &v14[v15];
        uint64_t result = sub_BB303C(a4, (uint64_t)a2, (uint64_t)&v14[v15]);
        if (result) {
          break;
        }
        v15 += 60;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      uint64_t v19 = -v16;
      uint64_t v20 = v86;
      __src = a7;
      unint64_t v85 = a4;
      uint64_t v82 = a8;
      __int16 v83 = a3;
      if (-v16 >= v86)
      {
        if (v16 == -1)
        {
          long long v67 = &v14[v15];
          long long v68 = *(_OWORD *)&v14[v15];
          long long v69 = *(_OWORD *)&v14[v15 + 16];
          long long v70 = *(_OWORD *)&v14[v15 + 32];
          *(_OWORD *)&v89[12] = *(_OWORD *)&v14[v15 + 44];
          long long v88 = v69;
          *(_OWORD *)long long v89 = v70;
          long long v87 = v68;
          long long v71 = *(_OWORD *)a2;
          long long v72 = *((_OWORD *)a2 + 1);
          long long v73 = *((_OWORD *)a2 + 2);
          *(_OWORD *)(v67 + 41) = *(_OWORD *)(a2 + 41);
          *((_OWORD *)v67 + 1) = v72;
          *((_OWORD *)v67 + 2) = v73;
          *(_OWORD *)long long v67 = v71;
          long long v74 = v88;
          *(_OWORD *)a2 = v87;
          *((_OWORD *)a2 + 1) = v74;
          *((_OWORD *)a2 + 2) = *(_OWORD *)v89;
          *(_OWORD *)(a2 + 41) = *(_OWORD *)&v89[9];
          return result;
        }
        if (v16 > 0) {
          uint64_t v19 = 1 - v16;
        }
        uint64_t v26 = v19 >> 1;
        long long v24 = &v14[60 * (v19 >> 1) + v15];
        long long v87 = *(_OWORD *)a4;
        uint64_t v23 = a2;
        if (a2 != a3)
        {
          uint64_t v81 = v19 >> 1;
          unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 2);
          uint64_t v23 = a2;
          do
          {
            uint64_t v28 = (uint64_t)&v23[60 * (v27 >> 1)];
            BOOL v29 = sub_BB303C(&v87, v28, (uint64_t)v24);
            if (v29) {
              v27 += ~(v27 >> 1);
            }
            else {
              v27 >>= 1;
            }
            if (v29) {
              uint64_t v23 = (char *)(v28 + 60);
            }
          }
          while (v27);
          uint64_t v20 = v86;
          uint64_t v26 = v81;
        }
        uint64_t v22 = 0xEEEEEEEEEEEEEEEFLL * ((v23 - a2) >> 2);
      }
      else
      {
        if (v86 >= 0) {
          uint64_t v21 = v86;
        }
        else {
          uint64_t v21 = v86 + 1;
        }
        uint64_t v22 = v21 >> 1;
        uint64_t v23 = &a2[60 * (v21 >> 1)];
        long long v24 = a2;
        if (a2 - v14 != v15)
        {
          uint64_t v80 = v21 >> 1;
          unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - v14 - v15) >> 2);
          long long v24 = &v14[v15];
          do
          {
            if (sub_BB303C(v85, (uint64_t)v23, (uint64_t)&v24[60 * (v25 >> 1)]))
            {
              v25 >>= 1;
            }
            else
            {
              v24 += 60 * (v25 >> 1) + 60;
              v25 += ~(v25 >> 1);
            }
          }
          while (v25);
          uint64_t v22 = v80;
          uint64_t v20 = v86;
        }
        uint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v14 - v15) >> 2);
      }
      a5 = -(v26 + v16);
      uint64_t v86 = v20 - v22;
      uint64_t v30 = a2;
      uint64_t v31 = v20;
      uint64_t v32 = v26;
      uint64_t v33 = v22;
      uint64_t v34 = sub_B51E0C(v24, v30, v23);
      uint64_t v35 = v33;
      a3 = v34;
      if (v32 + v35 >= v31 - (v32 + v35) - v16)
      {
        int v40 = v23;
        a4 = v85;
        uint64_t v41 = v32;
        uint64_t v42 = v35;
        a7 = __src;
        uint64_t result = sub_BB3694(v34, v40, v83, v85, a5, v86, __src, v82);
        a2 = v24;
        a8 = v82;
        a5 = v41;
        uint64_t v86 = v42;
        __n128 v14 = v17;
        if (!v42) {
          return result;
        }
      }
      else
      {
        uint64_t v36 = v24;
        uint64_t v37 = v32;
        a7 = __src;
        a8 = v82;
        uint64_t result = sub_BB3694(&v14[v15], v36, v34, v85, v37, v35, __src, v82);
        uint64_t v38 = a3;
        uint64_t v39 = v23;
        a4 = v85;
        a2 = v39;
        a3 = v83;
        __n128 v14 = v38;
        if (!v86) {
          return result;
        }
      }
    }
    if (a5 <= v86)
    {
      if (v14 != a2)
      {
        uint64_t v54 = 0;
        do
        {
          uint64_t v55 = &a7[v54];
          long long v56 = *(_OWORD *)&v14[v54];
          long long v57 = *(_OWORD *)&v14[v54 + 16];
          long long v58 = *(_OWORD *)&v14[v54 + 32];
          *(_OWORD *)(v55 + 44) = *(_OWORD *)&v14[v54 + 44];
          *((_OWORD *)v55 + 1) = v57;
          *((_OWORD *)v55 + 2) = v58;
          *(_OWORD *)uint64_t v55 = v56;
          v54 += 60;
        }
        while (&v14[v54] != a2);
        if (v54)
        {
          uint64_t v59 = &a7[v54];
          uint64_t v60 = a7;
          while (a2 != a3)
          {
            uint64_t result = sub_BB303C(a4, (uint64_t)a2, (uint64_t)v60);
            if (result)
            {
              long long v64 = *(_OWORD *)a2;
              long long v65 = *((_OWORD *)a2 + 1);
              long long v66 = *((_OWORD *)a2 + 2);
              *(_OWORD *)(v14 + 41) = *(_OWORD *)(a2 + 41);
              *((_OWORD *)v14 + 1) = v65;
              *((_OWORD *)v14 + 2) = v66;
              *(_OWORD *)__n128 v14 = v64;
              v14 += 60;
              a2 += 60;
              if (v59 == v60) {
                return result;
              }
            }
            else
            {
              long long v61 = *(_OWORD *)v60;
              long long v62 = *((_OWORD *)v60 + 1);
              long long v63 = *((_OWORD *)v60 + 2);
              *(_OWORD *)(v14 + 41) = *(_OWORD *)(v60 + 41);
              *((_OWORD *)v14 + 1) = v62;
              *((_OWORD *)v14 + 2) = v63;
              *(_OWORD *)__n128 v14 = v61;
              v14 += 60;
              v60 += 60;
              if (v59 == v60) {
                return result;
              }
            }
          }
          return (uint64_t)memmove(v14, v60, a7 - v60 + v54 - 3);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v43 = 0;
      do
      {
        __n128 v44 = &a7[v43];
        long long v45 = *(_OWORD *)&a2[v43];
        long long v46 = *(_OWORD *)&a2[v43 + 16];
        long long v47 = *(_OWORD *)&a2[v43 + 32];
        *(_OWORD *)(v44 + 44) = *(_OWORD *)&a2[v43 + 44];
        *((_OWORD *)v44 + 1) = v46;
        *((_OWORD *)v44 + 2) = v47;
        *(_OWORD *)__n128 v44 = v45;
        v43 += 60;
      }
      while (&a2[v43] != a3);
      if (v43)
      {
        uint64_t v48 = &a7[v43];
        uint64_t v49 = a3 - 60;
        while (a2 != v14)
        {
          uint64_t result = sub_BB303C(a4, (uint64_t)(v48 - 60), (uint64_t)(a2 - 60));
          if (result) {
            uint64_t v50 = a2 - 60;
          }
          else {
            uint64_t v50 = v48 - 60;
          }
          if (result) {
            a2 -= 60;
          }
          else {
            v48 -= 60;
          }
          long long v52 = *((_OWORD *)v50 + 1);
          long long v51 = *((_OWORD *)v50 + 2);
          long long v53 = *(_OWORD *)v50;
          *(_OWORD *)(v49 + 41) = *(_OWORD *)(v50 + 41);
          *((_OWORD *)v49 + 1) = v52;
          *((_OWORD *)v49 + 2) = v51;
          *(_OWORD *)uint64_t v49 = v53;
          v49 -= 60;
          if (v48 == a7) {
            return result;
          }
        }
        uint64_t v75 = 0;
        do
        {
          int v76 = &v49[v75];
          long long v77 = *(_OWORD *)&v48[v75 - 60];
          long long v78 = *(_OWORD *)&v48[v75 - 44];
          long long v79 = *(_OWORD *)&v48[v75 - 28];
          *(_OWORD *)(v76 + 41) = *(_OWORD *)&v48[v75 - 19];
          *((_OWORD *)v76 + 1) = v78;
          *((_OWORD *)v76 + 2) = v79;
          *(_OWORD *)int v76 = v77;
          v75 -= 60;
        }
        while (&v48[v75] != a7);
      }
    }
  }
  return result;
}

void sub_BB3BAC()
{
}

void *sub_BB3BC0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243E838;
  return result;
}

void sub_BB3BF8(uint64_t a1, void *a2)
{
  *a2 = off_243E838;
}

uint64_t sub_BB3C20(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t sub_BB3C28(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure"
                                "_time_functionEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_BB3C98()
{
}

void sub_BB3CA8()
{
}

void *sub_BB3CBC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243E8C8;
  return result;
}

void sub_BB3CF4(uint64_t a1, void *a2)
{
  *a2 = off_243E8C8;
}

uint64_t sub_BB3D1C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 0x7FFFFFFF) {
    return *(unsigned int *)(a2 + 4);
  }
  else {
    return v2;
  }
}

uint64_t sub_BB3D30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure"
                                "_time_functionEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter27get_departure_time_functionEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_BB3DA0()
{
}

void sub_BB3DB0()
{
}

void *sub_BB3DC4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243E948;
  return result;
}

void sub_BB3DFC(uint64_t a1, void *a2)
{
  *a2 = off_243E948;
}

uint64_t sub_BB3E24(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t sub_BB3E2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_t"
                                "ime_functionEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_BB3E9C()
{
}

void sub_BB3EAC()
{
}

void *sub_BB3EC0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_243E9C8;
  return result;
}

void sub_BB3EF8(uint64_t a1, void *a2)
{
  *a2 = off_243E9C8;
}

uint64_t sub_BB3F20(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 20);
  if (v2 == 0x7FFFFFFF) {
    return *(unsigned int *)(a2 + 16);
  }
  else {
    return v2;
  }
}

uint64_t sub_BB3F34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_t"
                                "ime_functionEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning38JourneyLegAlternativesDominationFilter25get_arrival_time_functionEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_BB3FA4()
{
}

uint64_t sub_BB3FB0(uint64_t a1, uint64_t a2, void *a3)
{
  char v9 = 17;
  strcpy(__p, "alternatives_type");
  uint64_t v5 = sub_561B0(a3, (uint64_t)__p);
  char v6 = sub_B5F5C0(v5);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_BB4034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BB4050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  for (uint64_t i = *(void *)(a2 + 56); v2 != i; v2 += 248)
    sub_BB409C(a1, v2);
}

void sub_BB409C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  int v25 = 1065353216;
  if (*(unsigned char *)a1) {
    uint64_t v2 = 96;
  }
  else {
    uint64_t v2 = 72;
  }
  if (*(unsigned char *)a1) {
    uint64_t v3 = a2 + 96;
  }
  else {
    uint64_t v3 = a2 + 72;
  }
  uint64_t v4 = *(void *)(a2 + v2);
  uint64_t v5 = *(void *)(v3 + 8);
  if (v4 != v5)
  {
    do
    {
      if (*(_DWORD *)(v4 + 40) != -1)
      {
        uint64_t v8 = sub_A104E8((void *)(*(void *)(a1 + 8) + 4136), *(void *)(v4 + 28), *(_DWORD *)(v4 + 48), *(_DWORD *)(v4 + 36));
        unsigned int v9 = *(_DWORD *)(v4 + 40);
        *(void *)&long long v22 = v8;
        *((void *)&v22 + 1) = __PAIR64__(v9, v10);
        if (sub_BB428C(v23, (uint64_t *)&v22)) {
          *(_DWORD *)(v4 + 48) = -1;
        }
        else {
          sub_BB442C(v23, &v22);
        }
      }
      v4 += 60;
    }
    while (v4 != v5);
    long long v11 = *(_OWORD **)(a2 + v2);
    long long v12 = *(_OWORD **)(v3 + 8);
    if (v11 != v12)
    {
      uint64_t v13 = (_OWORD *)((char *)v11 + 60);
      while (*((_DWORD *)v13 - 3) != -1)
      {
        BOOL v14 = v13 == v12;
        uint64_t v13 = (_OWORD *)((char *)v13 + 60);
        if (v14) {
          goto LABEL_29;
        }
      }
      uint64_t v15 = (_OWORD *)((char *)v13 - 60);
      if ((_OWORD *)((char *)v13 - 60) != v12 && v13 != v12)
      {
        do
        {
          if (*((_DWORD *)v13 + 12) != -1)
          {
            long long v16 = *v13;
            long long v17 = v13[1];
            long long v18 = v13[2];
            *(_OWORD *)((char *)v15 + 41) = *(_OWORD *)((char *)v13 + 41);
            v15[1] = v17;
            v15[2] = v18;
            *uint64_t v15 = v16;
            uint64_t v15 = (_OWORD *)((char *)v15 + 60);
          }
          uint64_t v13 = (_OWORD *)((char *)v13 + 60);
        }
        while (v13 != v12);
        long long v12 = *(_OWORD **)(v3 + 8);
      }
      if (v15 != v12) {
        *(void *)(v3 + 8) = v15;
      }
    }
  }
LABEL_29:
  uint64_t v19 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      operator delete(v19);
      uint64_t v19 = v20;
    }
    while (v20);
  }
  uint64_t v21 = v23[0];
  v23[0] = 0;
  if (v21) {
    operator delete(v21);
  }
}

void sub_BB4264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BB4278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_BB428C(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v5 = (((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v6 = *((unsigned int *)a2 + 2);
  uint64_t v7 = *((unsigned int *)a2 + 3);
  unint64_t v8 = (((v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5) + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v9;
    if (v9 >= *(void *)&v2) {
      unint64_t v11 = v9 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v11 = v9 & (*(void *)&v2 - 1);
  }
  long long v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v17 = result[1];
        if (v9 == v17)
        {
          BOOL v18 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
          if (v18 && result[3] == __PAIR64__(v7, v6)) {
            return result;
          }
        }
        else if ((v17 & v14) != v11)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v15 = result[1];
      if (v9 == v15)
      {
        BOOL v16 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
        if (v16 && result[3] == __PAIR64__(v7, v6)) {
          return result;
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_BB442C(void *a1, _OWORD *a2)
{
  unint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = 0xFF51AFD7ED558CCDLL * (*((void *)v4 + 2) ^ (*((void *)v4 + 2) >> 33));
  unint64_t v6 = (((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v7 = (((v4[6] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6) + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v8 = (v4[7] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = v8;
  unint64_t v9 = sub_BB4534(a1, (uint64_t)v4);
  if ((v10 & 1) == 0) {
    operator delete(v4);
  }
  return v9;
}

void sub_BB4520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_BB4534(void *a1, uint64_t a2)
{
  unint64_t v4 = (int *)(a2 + 16);
  unint64_t v5 = 0xFF51AFD7ED558CCDLL * (*(void *)(a2 + 16) ^ (*(void *)(a2 + 16) >> 33));
  unint64_t v6 = (((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v7 = (((*(unsigned int *)(a2 + 24) + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6) + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v8 = (*(unsigned int *)(a2 + 28) + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  *((void *)v4 - 1) = v8;
  uint64_t result = sub_BB46BC((uint64_t)a1, v8, v4);
  if (!result)
  {
    int8x8_t v10 = (int8x8_t)a1[1];
    unint64_t v11 = *(void *)(a2 + 8);
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v10) {
        v11 %= *(void *)&v10;
      }
    }
    else
    {
      v11 &= *(void *)&v10 - 1;
    }
    uint64_t v13 = *(void **)(*a1 + 8 * v11);
    if (v13)
    {
      *(void *)a2 = *v13;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v11) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_15:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v14 = *(void *)(*(void *)a2 + 8);
      if (v12.u32[0] > 1uLL)
      {
        if (v14 >= *(void *)&v10) {
          v14 %= *(void *)&v10;
        }
      }
      else
      {
        v14 &= *(void *)&v10 - 1;
      }
      uint64_t v13 = (void *)(*a1 + 8 * v14);
    }
    void *v13 = a2;
    goto LABEL_15;
  }
  return result;
}

uint64_t *sub_BB46BC(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_35;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2 % v4;
    if (v4 > a2) {
      unint64_t v6 = a2;
    }
    unint64_t v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
    unint64_t v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_35;
    }
  }
  uint64_t result = *v7;
  if (*v7)
  {
    int v10 = *a3;
    int v9 = a3[1];
    int v11 = a3[2];
    int v12 = a3[3];
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v15 = result[1];
        if (v15 == a2)
        {
          BOOL v16 = *((_DWORD *)result + 5) == v9 && *((_DWORD *)result + 4) == v10;
          if (v16 && *((_DWORD *)result + 6) == v11 && *((_DWORD *)result + 7) == v12) {
            return result;
          }
        }
        else if ((v15 & (v4 - 1)) != v6)
        {
          goto LABEL_35;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          goto LABEL_35;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v13 == a2)
      {
        BOOL v14 = *((_DWORD *)result + 5) == v9 && *((_DWORD *)result + 4) == v10;
        if (v14 && *((_DWORD *)result + 6) == v11 && *((_DWORD *)result + 7) == v12) {
          return result;
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v6) {
          break;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
LABEL_35:
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v4 && (float)(v18 * (float)v4) >= v17) {
    return 0;
  }
  BOOL v19 = 1;
  if (v4 >= 3) {
    BOOL v19 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v20 = v19 | (2 * v4);
  unint64_t v21 = vcvtps_u32_f32(v17 / v18);
  if (v20 <= v21) {
    size_t prime = v21;
  }
  else {
    size_t prime = v20;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_59;
  }
  if (prime < v4)
  {
    size_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      size_t v26 = std::__next_prime(v23);
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        size_t v23 = v25;
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_59:
    sub_B6C0(a1, prime);
  }
  return 0;
}

uint64_t sub_BB4910(uint64_t a1, uint64_t a2, void *a3)
{
  char v9 = 17;
  strcpy(__p, "alternatives_type");
  uint64_t v5 = sub_561B0(a3, (uint64_t)__p);
  char v6 = sub_B5F5C0(v5);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_BB4994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BB49B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  for (uint64_t i = *(void *)(a2 + 56); v2 != i; v2 += 248)
    sub_BB49FC(a1, v2);
}

void sub_BB49FC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    uint64_t v3 = 96;
  }
  else {
    uint64_t v3 = 72;
  }
  if (*(unsigned char *)a1) {
    uint64_t v4 = a2 + 96;
  }
  else {
    uint64_t v4 = a2 + 72;
  }
  __n128 __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v5 = *(void *)(a2 + v3);
  uint64_t v6 = *(void *)(v4 + 8);
  p_p = (char **)&__p;
  if (v5 == v6)
  {
    BOOL v19 = 0;
    float v18 = 0;
  }
  else
  {
    do
    {
      if (*(_DWORD *)(v5 + 40) == -1)
      {
        uint64_t v8 = sub_A104E8((void *)(*(void *)(a1 + 8) + 4136), *(void *)(v5 + 28), *(_DWORD *)(v5 + 48), *(_DWORD *)(v5 + 36));
        int v10 = v9;
        unsigned int v11 = *(_DWORD *)(v5 + 48);
        int v12 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *(void *)(v5 + 28));
        unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
          uint64_t v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
        }
        else {
          uint64_t v15 = 0;
        }
        int v16 = *(unsigned __int16 *)(sub_A10764(v15, v11) + 12);
        int v17 = *(_DWORD *)(v5 + 52) - *(_DWORD *)(v5 + 48);
        *(void *)&long long v38 = v5;
        *((void *)&v38 + 1) = v8;
        int v39 = v10;
        int v40 = v16;
        int v41 = v17;
        sub_4153B8(&p_p, &v38);
      }
      v5 += 60;
    }
    while (v5 != v6);
    float v18 = (unsigned int *)__p;
    BOOL v19 = v36;
  }
  unint64_t v20 = 126 - 2 * __clz(((char *)v19 - (char *)v18) >> 5);
  if (v19 == v18) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  sub_BB4CC8((uint64_t)v18, v19, (uint64_t)&v38, v21, 1);
  long long v22 = (unsigned int *)__p;
  size_t v23 = v36;
  if (__p != v36)
  {
    uint8x8_t v24 = (unsigned int *)((char *)__p + 32);
    if ((char *)__p + 32 != (char *)v36)
    {
      do
      {
        BOOL v25 = *(v24 - 5) == v24[3] && *(v24 - 6) == v24[2];
        if (v25 && *(v24 - 4) == v24[4] && *(v24 - 3) == v24[5]) {
          *(void *)(*(void *)v24 + 28) = 0xFFFFFFFFLL;
        }
        v24 += 8;
      }
      while (v24 != v23);
    }
  }
  size_t v26 = *(_OWORD **)(a2 + v3);
  unint64_t v27 = *(_OWORD **)(v4 + 8);
  if (v26 != v27)
  {
    uint64_t v28 = (_OWORD *)((char *)v26 + 60);
    while (*((_DWORD *)v28 - 8) != -1 && *((_DWORD *)v28 - 7) != 0)
    {
      BOOL v25 = v28 == v27;
      uint64_t v28 = (_OWORD *)((char *)v28 + 60);
      if (v25) {
        goto LABEL_54;
      }
    }
    uint64_t v30 = (_OWORD *)((char *)v28 - 60);
    if ((_OWORD *)((char *)v28 - 60) != v27 && v28 != v27)
    {
      do
      {
        if (*((_DWORD *)v28 + 7) != -1 && *((_DWORD *)v28 + 8) != 0)
        {
          long long v32 = *v28;
          long long v33 = v28[1];
          long long v34 = v28[2];
          *(_OWORD *)((char *)v30 + 41) = *(_OWORD *)((char *)v28 + 41);
          v30[1] = v33;
          v30[2] = v34;
          _OWORD *v30 = v32;
          uint64_t v30 = (_OWORD *)((char *)v30 + 60);
        }
        uint64_t v28 = (_OWORD *)((char *)v28 + 60);
      }
      while (v28 != v27);
      unint64_t v27 = *(_OWORD **)(v4 + 8);
    }
    if (v30 != v27) {
      *(void *)(v4 + 8) = v30;
    }
  }
LABEL_54:
  if (v22)
  {
    uint64_t v36 = v22;
    operator delete(v22);
  }
}

void sub_BB4CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_BB4CC8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *sub_BB51E0(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v6 = v4;
        uint64_t v4 = v2;
        unsigned int v8 = *((_DWORD *)v6 + 2);
        unsigned int v7 = *((_DWORD *)v6 + 3);
        unsigned int v9 = *((_DWORD *)v6 + 10);
        unsigned int v10 = *((_DWORD *)v6 + 11);
        BOOL v11 = v10 == v7 && v9 == v8;
        if (v11 && *((_DWORD *)v6 + 12) == *((_DWORD *)v6 + 4))
        {
          unsigned int v12 = *((_DWORD *)v6 + 13);
          unsigned int v13 = *((_DWORD *)v6 + 5);
          BOOL v14 = v12 >= v13;
          if (v12 != v13) {
            goto LABEL_26;
          }
          if (*((_DWORD *)v6 + 14) <= *((_DWORD *)v6 + 6)) {
            goto LABEL_6;
          }
        }
        else if (v10 >= v7 && (v10 > v7 || v9 >= v8))
        {
          uint64_t v16 = *((void *)v6 + 5);
          if (v7 < HIDWORD(v16) || v8 < v16 && v7 <= HIDWORD(v16)) {
            goto LABEL_6;
          }
          BOOL v14 = *((_DWORD *)v6 + 12) >= *((_DWORD *)v6 + 4);
LABEL_26:
          if (v14) {
            goto LABEL_6;
          }
        }
        uint64_t v18 = *((void *)v6 + 4);
        uint64_t v17 = *((void *)v6 + 5);
        unsigned int v19 = *((_DWORD *)v6 + 12);
        unsigned int v20 = *((_DWORD *)v6 + 13);
        unsigned int v21 = *((_DWORD *)v6 + 14);
        *uint64_t v4 = *v6;
        *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)v6 + 12);
        char v5 = result;
        if (v6 == result) {
          goto LABEL_5;
        }
        uint64_t v22 = v3;
        while (1)
        {
          unsigned int v23 = (_OWORD *)((char *)result + v22);
          unsigned int v24 = *(_DWORD *)((char *)result + v22 - 24);
          unsigned int v25 = *(_DWORD *)((char *)result + v22 - 20);
          BOOL v26 = HIDWORD(v17) == v25 && v17 == v24;
          if (v26 && v19 == *((_DWORD *)v23 - 4)) {
            break;
          }
          if (HIDWORD(v17) >= v25 && (HIDWORD(v17) > v25 || v17 >= v24))
          {
            BOOL v29 = v25 >= HIDWORD(v17) && v24 >= v17;
            if (!v29 || v19 >= *((_DWORD *)v23 - 4))
            {
LABEL_52:
              char v5 = v6;
              goto LABEL_5;
            }
          }
LABEL_30:
          v6 -= 2;
          _OWORD *v23 = *(v23 - 2);
          *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)v23 - 20);
          v22 -= 32;
          if (!v22)
          {
            char v5 = result;
            goto LABEL_5;
          }
        }
        unsigned int v27 = *(_DWORD *)((char *)result + v22 - 12);
        if (v20 != v27)
        {
          if (v20 >= v27) {
            goto LABEL_52;
          }
          goto LABEL_30;
        }
        if (v21 > *(_DWORD *)((char *)result + v22 - 8)) {
          goto LABEL_30;
        }
        char v5 = (_OWORD *)((char *)result + v22);
LABEL_5:
        *(void *)char v5 = v18;
        *((void *)v5 + 1) = v17;
        *((_DWORD *)v5 + 4) = v19;
        *((_DWORD *)v5 + 5) = v20;
        *((_DWORD *)v5 + 6) = v21;
LABEL_6:
        uint64_t v2 = v4 + 2;
        v3 += 32;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

void *sub_BB5384(void *result, void *a2)
{
  if (result != a2)
  {
    while (1)
    {
      while (1)
      {
LABEL_4:
        if (result + 4 == a2) {
          return result;
        }
        uint64_t v2 = result;
        result += 4;
        unsigned int v4 = v2[2];
        unsigned int v3 = v2[3];
        unsigned int v5 = v2[10];
        unsigned int v6 = v2[11];
        BOOL v7 = v6 == v3 && v5 == v4;
        if (!v7 || v2[12] != v2[4]) {
          break;
        }
        unsigned int v8 = v2[13];
        unsigned int v9 = v2[5];
        BOOL v10 = v8 >= v9;
        if (v8 == v9)
        {
          if (v2[14] > v2[6]) {
            goto LABEL_25;
          }
        }
        else
        {
LABEL_24:
          if (!v10) {
            goto LABEL_25;
          }
        }
      }
      if (v6 < v3 || (v6 <= v3 ? (BOOL v11 = v5 >= v4) : (BOOL v11 = 1), !v11))
      {
LABEL_25:
        uint64_t v13 = *result;
        uint64_t v14 = *((void *)v2 + 5);
        unsigned int v15 = v2[12];
        unsigned int v16 = v2[13];
        unsigned int v17 = v2[14];
        for (uint64_t i = result; ; i -= 2)
        {
          _OWORD *i = *(i - 2);
          *(_OWORD *)((char *)i + 12) = *(_OWORD *)((char *)i - 20);
          unsigned int v20 = *((_DWORD *)i - 14);
          unsigned int v19 = *((_DWORD *)i - 13);
          BOOL v21 = v14 == v20 && HIDWORD(v14) == v19;
          if (v21 && v15 == *((_DWORD *)i - 12))
          {
            unsigned int v22 = *((_DWORD *)i - 11);
            if (v16 == v22)
            {
              if (v17 <= *((_DWORD *)i - 10)) {
                goto LABEL_3;
              }
            }
            else if (v16 >= v22)
            {
              goto LABEL_3;
            }
          }
          else if (HIDWORD(v14) >= v19 && (v14 >= v20 || HIDWORD(v14) > v19))
          {
            BOOL v24 = v19 >= HIDWORD(v14) && v20 >= v14;
            if (!v24 || v15 >= *((_DWORD *)i - 12))
            {
LABEL_3:
              *((void *)i - 4) = v13;
              *((void *)i - 3) = v14;
              *((_DWORD *)i - 4) = v15;
              *((_DWORD *)i - 3) = v16;
              *((_DWORD *)i - 2) = v17;
              goto LABEL_4;
            }
          }
        }
      }
      uint64_t v12 = *((void *)v2 + 5);
      if (v3 >= HIDWORD(v12) && (v4 >= v12 || v3 > HIDWORD(v12)))
      {
        BOOL v10 = v2[12] >= v2[4];
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t sub_BB54D4(long long *a1, long long *a2, long long *a3)
{
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unsigned int v3 = *((_DWORD *)a1 + 3);
  unsigned int v5 = *((_DWORD *)a2 + 2);
  unsigned int v6 = *((_DWORD *)a2 + 3);
  BOOL v7 = v6 == v3 && v5 == v4;
  if (!v7 || *((_DWORD *)a2 + 4) != *((_DWORD *)a1 + 4))
  {
    if (v6 < v3) {
      goto LABEL_35;
    }
    if (v6 <= v3 && v5 < v4) {
      goto LABEL_35;
    }
    uint64_t v11 = *((void *)a2 + 1);
    if (v3 >= HIDWORD(v11)
      && (v4 >= v11 || v3 > HIDWORD(v11))
      && *((_DWORD *)a2 + 4) < *((_DWORD *)a1 + 4))
    {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  unsigned int v8 = *((_DWORD *)a2 + 5);
  unsigned int v9 = *((_DWORD *)a1 + 5);
  if (v8 == v9)
  {
    if (*((_DWORD *)a2 + 6) > *((_DWORD *)a1 + 6)) {
      goto LABEL_35;
    }
LABEL_20:
    unsigned int v13 = *((_DWORD *)a2 + 2);
    unsigned int v12 = *((_DWORD *)a2 + 3);
    unsigned int v14 = *((_DWORD *)a3 + 2);
    unsigned int v15 = *((_DWORD *)a3 + 3);
    if (v15 == v12 && v14 == v13 && *((_DWORD *)a3 + 4) == *((_DWORD *)a2 + 4))
    {
      unsigned int v16 = *((_DWORD *)a3 + 5);
      unsigned int v17 = *((_DWORD *)a2 + 5);
      if (v16 == v17)
      {
        if (*((_DWORD *)a3 + 6) <= *((_DWORD *)a2 + 6)) {
          return 0;
        }
      }
      else if (v16 >= v17)
      {
        return 0;
      }
    }
    else if (v15 >= v12 && (v15 > v12 || v14 >= v13))
    {
      uint64_t v18 = *((void *)a3 + 1);
      if (v12 < HIDWORD(v18) || v13 < v18 && v12 <= HIDWORD(v18)) {
        return 0;
      }
      if (*((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4)) {
        return 0;
      }
    }
    *(_OWORD *)uint64_t v55 = *a2;
    long long v39 = *a2;
    *(_OWORD *)&v55[16] = a2[1];
    long long v40 = *(long long *)((char *)a3 + 12);
    *a2 = *a3;
    *(long long *)((char *)a2 + 12) = v40;
    *a3 = v39;
    *(long long *)((char *)a3 + 12) = *(_OWORD *)&v55[12];
    unsigned int v42 = *((_DWORD *)a1 + 2);
    unsigned int v41 = *((_DWORD *)a1 + 3);
    unsigned int v43 = *((_DWORD *)a2 + 2);
    unsigned int v44 = *((_DWORD *)a2 + 3);
    if (v44 == v41 && v43 == v42 && *((_DWORD *)a2 + 4) == *((_DWORD *)a1 + 4))
    {
      unsigned int v45 = *((_DWORD *)a2 + 5);
      unsigned int v46 = *((_DWORD *)a1 + 5);
      BOOL v47 = v45 >= v46;
      if (v45 == v46)
      {
        if (*((_DWORD *)a2 + 6) <= *((_DWORD *)a1 + 6)) {
          return 1;
        }
LABEL_82:
        *(_OWORD *)long long v56 = *a1;
        long long v49 = *a1;
        *(_OWORD *)&v56[16] = a1[1];
        long long v50 = *(long long *)((char *)a2 + 12);
        *a1 = *a2;
        *(long long *)((char *)a1 + 12) = v50;
        *a2 = v49;
        *(long long *)((char *)a2 + 12) = *(_OWORD *)&v56[12];
        return 2;
      }
    }
    else
    {
      if (v44 < v41 || v44 <= v41 && v43 < v42) {
        goto LABEL_82;
      }
      uint64_t v48 = *((void *)a2 + 1);
      if (v41 < HIDWORD(v48) || v42 < v48 && v41 <= HIDWORD(v48)) {
        return 1;
      }
      BOOL v47 = *((_DWORD *)a2 + 4) >= *((_DWORD *)a1 + 4);
    }
    if (v47) {
      return 1;
    }
    goto LABEL_82;
  }
  if (v8 >= v9) {
    goto LABEL_20;
  }
LABEL_35:
  unsigned int v21 = *((_DWORD *)a2 + 2);
  unsigned int v20 = *((_DWORD *)a2 + 3);
  unsigned int v22 = *((_DWORD *)a3 + 2);
  unsigned int v23 = *((_DWORD *)a3 + 3);
  BOOL v24 = v23 == v20 && v22 == v21;
  if (v24 && *((_DWORD *)a3 + 4) == *((_DWORD *)a2 + 4))
  {
    unsigned int v25 = *((_DWORD *)a3 + 5);
    unsigned int v26 = *((_DWORD *)a2 + 5);
    if (v25 == v26)
    {
      if (*((_DWORD *)a3 + 6) > *((_DWORD *)a2 + 6)) {
        goto LABEL_66;
      }
    }
    else if (v25 < v26)
    {
LABEL_66:
      *(_OWORD *)uint64_t v54 = *a1;
      long long v37 = *a1;
      *(_OWORD *)&v54[16] = a1[1];
      long long v38 = *(long long *)((char *)a3 + 12);
      *a1 = *a3;
      *(long long *)((char *)a1 + 12) = v38;
      *a3 = v37;
      *(long long *)((char *)a3 + 12) = *(_OWORD *)&v54[12];
      return 1;
    }
  }
  else
  {
    if (v23 < v20 || v23 <= v20 && v22 < v21) {
      goto LABEL_66;
    }
    uint64_t v27 = *((void *)a3 + 1);
    if (v20 >= HIDWORD(v27)
      && (v21 >= v27 || v20 > HIDWORD(v27))
      && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
    {
      goto LABEL_66;
    }
  }
  *(_OWORD *)long long v53 = *a1;
  long long v28 = *a1;
  *(_OWORD *)&v53[16] = a1[1];
  long long v29 = *(long long *)((char *)a2 + 12);
  *a1 = *a2;
  *(long long *)((char *)a1 + 12) = v29;
  *a2 = v28;
  *(long long *)((char *)a2 + 12) = *(_OWORD *)&v53[12];
  unsigned int v31 = *((_DWORD *)a2 + 2);
  unsigned int v30 = *((_DWORD *)a2 + 3);
  unsigned int v32 = *((_DWORD *)a3 + 2);
  unsigned int v33 = *((_DWORD *)a3 + 3);
  if (v33 != v30 || v32 != v31 || *((_DWORD *)a3 + 4) != *((_DWORD *)a2 + 4))
  {
    if (v33 >= v30 && (v33 > v30 || v32 >= v31))
    {
      uint64_t v36 = *((void *)a3 + 1);
      if (v30 < HIDWORD(v36) || v31 < v36 && v30 <= HIDWORD(v36)) {
        return 1;
      }
      if (*((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4)) {
        return 1;
      }
    }
    goto LABEL_84;
  }
  unsigned int v34 = *((_DWORD *)a3 + 5);
  unsigned int v35 = *((_DWORD *)a2 + 5);
  if (v34 == v35)
  {
    if (*((_DWORD *)a3 + 6) <= *((_DWORD *)a2 + 6)) {
      return 1;
    }
LABEL_84:
    *(_OWORD *)long long v57 = *a2;
    long long v51 = *a2;
    *(_OWORD *)&v57[16] = a2[1];
    long long v52 = *(long long *)((char *)a3 + 12);
    *a2 = *a3;
    *(long long *)((char *)a2 + 12) = v52;
    *a3 = v51;
    *(long long *)((char *)a3 + 12) = *(_OWORD *)&v57[12];
    return 2;
  }
  if (v34 < v35) {
    goto LABEL_84;
  }
  return 1;
}

unint64_t sub_BB58A0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unsigned int v4 = *((_DWORD *)a1 + 4);
  unsigned int v5 = *((_DWORD *)a1 + 5);
  unsigned int v6 = *((_DWORD *)a1 + 6);
  uint64_t v7 = *((void *)a2 - 3);
  BOOL v8 = v2 == v7 && HIDWORD(v2) == HIDWORD(v7);
  if (v8 && v4 == *(a2 - 4))
  {
    unsigned int v9 = *(a2 - 3);
    if (v5 == v9)
    {
      if (v6 > *(a2 - 2)) {
        goto LABEL_49;
      }
    }
    else if (v5 < v9)
    {
LABEL_49:
      for (unint64_t i = (unint64_t)(a1 + 4); ; i += 32)
      {
        unsigned int v20 = *(_DWORD *)(i + 8);
        unsigned int v19 = *(_DWORD *)(i + 12);
        BOOL v21 = v2 == v20 && HIDWORD(v2) == v19;
        if (v21 && v4 == *(_DWORD *)(i + 16))
        {
          unsigned int v22 = *(_DWORD *)(i + 20);
          if (v5 == v22)
          {
            if (v6 > *(_DWORD *)(i + 24)) {
              goto LABEL_73;
            }
          }
          else if (v5 < v22)
          {
            goto LABEL_73;
          }
        }
        else
        {
          if (HIDWORD(v2) < v19) {
            goto LABEL_73;
          }
          if (v2 < v20 && HIDWORD(v2) <= v19) {
            goto LABEL_73;
          }
          BOOL v24 = v19 >= HIDWORD(v2) && v20 >= v2;
          if (v24 && v4 < *(_DWORD *)(i + 16)) {
            goto LABEL_73;
          }
        }
      }
    }
  }
  else
  {
    if (HIDWORD(v2) < HIDWORD(v7)) {
      goto LABEL_49;
    }
    if (v2 < v7 && HIDWORD(v2) <= HIDWORD(v7)) {
      goto LABEL_49;
    }
    BOOL v11 = HIDWORD(v7) >= HIDWORD(v2) && v7 >= v2;
    if (v11 && v4 < *(a2 - 4)) {
      goto LABEL_49;
    }
  }
  for (unint64_t i = (unint64_t)(a1 + 4); i < (unint64_t)a2; i += 32)
  {
    unsigned int v14 = *(_DWORD *)(i + 8);
    unsigned int v13 = *(_DWORD *)(i + 12);
    BOOL v15 = v2 == v14 && HIDWORD(v2) == v13;
    if (v15 && v4 == *(_DWORD *)(i + 16))
    {
      unsigned int v16 = *(_DWORD *)(i + 20);
      if (v5 == v16)
      {
        if (v6 > *(_DWORD *)(i + 24)) {
          break;
        }
      }
      else if (v5 < v16)
      {
        break;
      }
    }
    else
    {
      if (HIDWORD(v2) < v13) {
        break;
      }
      if (v2 < v14 && HIDWORD(v2) <= v13) {
        break;
      }
      BOOL v18 = v13 >= HIDWORD(v2) && v14 >= v2;
      if (v18 && v4 < *(_DWORD *)(i + 16)) {
        break;
      }
    }
  }
LABEL_73:
  if (i >= (unint64_t)a2) {
    goto LABEL_135;
  }
  for (uint64_t j = a2 - 4; v2 == v7 && v4 == *j; j -= 8)
  {
    unsigned int v26 = j[1];
    if (v5 == v26)
    {
      if (v6 <= j[2]) {
        goto LABEL_88;
      }
    }
    else if (v5 >= v26)
    {
      goto LABEL_88;
    }
LABEL_76:
    uint64_t v7 = *((void *)j - 5);
  }
  if (HIDWORD(v2) < HIDWORD(v7)
    || v2 < v7 && HIDWORD(v2) <= HIDWORD(v7)
    || HIDWORD(v7) >= HIDWORD(v2) && v7 >= v2 && v4 < *j)
  {
    goto LABEL_76;
  }
LABEL_88:
  a2 = j - 4;
LABEL_135:
  while (i < (unint64_t)a2)
  {
    *(_OWORD *)unsigned int v42 = *(_OWORD *)i;
    *(_OWORD *)&v42[16] = *(_OWORD *)(i + 16);
    long long v27 = *(_OWORD *)a2;
    *(_OWORD *)(i + 12) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)unint64_t i = v27;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v42[12];
    *(_OWORD *)a2 = *(_OWORD *)v42;
    do
    {
      while (1)
      {
        i += 32;
        unsigned int v29 = *(_DWORD *)(i + 8);
        unsigned int v28 = *(_DWORD *)(i + 12);
        BOOL v30 = v2 == v29 && HIDWORD(v2) == v28;
        if (!v30 || v4 != *(_DWORD *)(i + 16)) {
          break;
        }
        unsigned int v31 = *(_DWORD *)(i + 20);
        if (v5 == v31)
        {
          if (v6 > *(_DWORD *)(i + 24)) {
            goto LABEL_114;
          }
        }
        else if (v5 < v31)
        {
          goto LABEL_114;
        }
      }
      if (HIDWORD(v2) < v28) {
        break;
      }
      if (v2 < v29 && HIDWORD(v2) <= v28) {
        break;
      }
      BOOL v33 = v28 >= HIDWORD(v2) && v29 >= v2;
    }
    while (!v33 || v4 >= *(_DWORD *)(i + 16));
    while (1)
    {
LABEL_114:
      while (1)
      {
        a2 -= 8;
        unsigned int v35 = a2[2];
        unsigned int v34 = a2[3];
        BOOL v36 = v2 == v35 && HIDWORD(v2) == v34;
        if (!v36 || v4 != a2[4]) {
          break;
        }
        unsigned int v37 = a2[5];
        if (v5 == v37)
        {
          if (v6 <= a2[6]) {
            goto LABEL_135;
          }
        }
        else if (v5 >= v37)
        {
          goto LABEL_135;
        }
      }
      if (HIDWORD(v2) >= v34 && (v2 >= v35 || HIDWORD(v2) > v34))
      {
        BOOL v39 = v34 >= HIDWORD(v2) && v35 >= v2;
        if (!v39 || v4 >= a2[4]) {
          break;
        }
      }
    }
  }
  if ((uint64_t *)(i - 32) != a1)
  {
    long long v40 = *(_OWORD *)(i - 32);
    *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(i - 20);
    *(_OWORD *)a1 = v40;
  }
  *(void *)(i - 32) = v3;
  *(void *)(i - 24) = v2;
  *(_DWORD *)(i - 16) = v4;
  *(_DWORD *)(i - 12) = v5;
  *(_DWORD *)(i - 8) = v6;
  return i;
}

unint64_t sub_BB5BEC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unsigned int v5 = *((_DWORD *)a1 + 4);
  unsigned int v6 = *((_DWORD *)a1 + 5);
  unsigned int v7 = *((_DWORD *)a1 + 6);
  while (1)
  {
    BOOL v8 = &a1[v2];
    unsigned int v9 = a1[v2 + 5];
    unsigned int v10 = HIDWORD(a1[v2 + 5]);
    BOOL v11 = v10 == HIDWORD(v4) && v9 == v4;
    if (!v11 || *((_DWORD *)v8 + 12) != v5) {
      break;
    }
    unsigned int v12 = HIDWORD(a1[v2 + 6]);
    if (v12 == v6)
    {
      if (LODWORD(a1[v2 + 7]) <= v7) {
        goto LABEL_26;
      }
    }
    else if (v12 >= v6)
    {
      goto LABEL_26;
    }
LABEL_3:
    v2 += 4;
  }
  if (v10 < HIDWORD(v4)) {
    goto LABEL_3;
  }
  if (v10 <= HIDWORD(v4) && v9 < v4) {
    goto LABEL_3;
  }
  uint64_t v14 = v8[5];
  if (HIDWORD(v4) >= HIDWORD(v14))
  {
    BOOL v15 = v4 >= v14 || HIDWORD(v4) > HIDWORD(v14);
    if (v15 && *((_DWORD *)v8 + 12) < v5) {
      goto LABEL_3;
    }
  }
LABEL_26:
  unint64_t v16 = (unint64_t)&a1[v2 + 4];
  if (v2 * 8)
  {
    do
    {
      while (1)
      {
        a2 -= 8;
        unsigned int v17 = a2[2];
        unsigned int v18 = a2[3];
        BOOL v19 = v18 == HIDWORD(v4) && v17 == v4;
        if (!v19 || a2[4] != v5) {
          break;
        }
        unsigned int v20 = a2[5];
        if (v20 == v6)
        {
          if (a2[6] > v7) {
            goto LABEL_49;
          }
        }
        else if (v20 < v6)
        {
          goto LABEL_49;
        }
      }
      if (v18 < HIDWORD(v4)) {
        break;
      }
      if (v18 <= HIDWORD(v4) && v17 < v4) {
        break;
      }
      uint64_t v22 = *((void *)a2 + 1);
    }
    while (HIDWORD(v4) < HIDWORD(v22)
         || v4 < v22 && HIDWORD(v4) <= HIDWORD(v22)
         || a2[4] >= v5);
  }
  else
  {
    while (v16 < (unint64_t)a2)
    {
      while (1)
      {
        a2 -= 8;
        unsigned int v40 = a2[2];
        unsigned int v41 = a2[3];
        BOOL v42 = v41 == HIDWORD(v4) && v40 == v4;
        if (!v42 || a2[4] != v5) {
          break;
        }
        unsigned int v43 = a2[5];
        if (v43 == v6)
        {
          if (a2[6] > v7 || v16 >= (unint64_t)a2) {
            goto LABEL_49;
          }
        }
        else if (v43 < v6 || v16 >= (unint64_t)a2)
        {
          goto LABEL_49;
        }
      }
      if (v41 < HIDWORD(v4)) {
        break;
      }
      if (v41 <= HIDWORD(v4) && v40 < v4) {
        break;
      }
      uint64_t v47 = *((void *)a2 + 1);
      if (HIDWORD(v4) >= HIDWORD(v47)
        && (v4 >= v47 || HIDWORD(v4) > HIDWORD(v47))
        && a2[4] < v5)
      {
        break;
      }
    }
  }
LABEL_49:
  unint64_t v23 = v16;
  if (v16 < (unint64_t)a2)
  {
    BOOL v24 = a2;
    do
    {
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v23;
      *(_OWORD *)&v48[16] = *(_OWORD *)(v23 + 16);
      long long v25 = *(_OWORD *)v24;
      *(_OWORD *)(v23 + 12) = *(_OWORD *)(v24 + 3);
      *(_OWORD *)unint64_t v23 = v25;
      *(_OWORD *)(v24 + 3) = *(_OWORD *)&v48[12];
      *(_OWORD *)BOOL v24 = *(_OWORD *)v48;
      while (1)
      {
        while (1)
        {
          v23 += 32;
          unsigned int v27 = *(_DWORD *)(v23 + 8);
          unsigned int v26 = *(_DWORD *)(v23 + 12);
          BOOL v28 = v26 == HIDWORD(v4) && v27 == v4;
          if (!v28 || *(_DWORD *)(v23 + 16) != v5) {
            break;
          }
          unsigned int v29 = *(_DWORD *)(v23 + 20);
          if (v29 == v6)
          {
            if (*(_DWORD *)(v23 + 24) <= v7) {
              goto LABEL_76;
            }
          }
          else if (v29 >= v6)
          {
            goto LABEL_76;
          }
        }
        if (v26 >= HIDWORD(v4) && (v26 > HIDWORD(v4) || v27 >= v4))
        {
          uint64_t v31 = *(void *)(v23 + 8);
          if (HIDWORD(v4) < HIDWORD(v31) || v4 < v31 && HIDWORD(v4) <= HIDWORD(v31)) {
            break;
          }
          if (*(_DWORD *)(v23 + 16) >= v5) {
            break;
          }
        }
      }
      do
      {
LABEL_76:
        while (1)
        {
          v24 -= 8;
          unsigned int v33 = v24[2];
          unsigned int v32 = v24[3];
          BOOL v34 = v32 == HIDWORD(v4) && v33 == v4;
          if (!v34 || v24[4] != v5) {
            break;
          }
          unsigned int v35 = v24[5];
          if (v35 == v6)
          {
            if (v24[6] > v7) {
              goto LABEL_51;
            }
          }
          else if (v35 < v6)
          {
            goto LABEL_51;
          }
        }
        if (v32 < HIDWORD(v4)) {
          break;
        }
        if (v32 <= HIDWORD(v4) && v33 < v4) {
          break;
        }
        uint64_t v37 = *((void *)v24 + 1);
      }
      while (HIDWORD(v4) < HIDWORD(v37)
           || v4 < v37 && HIDWORD(v4) <= HIDWORD(v37)
           || v24[4] >= v5);
LABEL_51:
      ;
    }
    while (v23 < (unint64_t)v24);
  }
  if ((uint64_t *)(v23 - 32) != a1)
  {
    long long v38 = *(_OWORD *)(v23 - 32);
    *(_OWORD *)((char *)a1 + 12) = *(_OWORD *)(v23 - 20);
    *(_OWORD *)a1 = v38;
  }
  *(void *)(v23 - 32) = v3;
  *(void *)(v23 - 24) = v4;
  *(_DWORD *)(v23 - 16) = v5;
  *(_DWORD *)(v23 - 12) = v6;
  *(_DWORD *)(v23 - 8) = v7;
  return v23 - 32;
}

__n128 sub_BB5F38(uint64_t a1, uint64_t a2)
{
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v34 = *(_DWORD *)(a1 + 8);
      unsigned int v33 = *(_DWORD *)(a1 + 12);
      unsigned int v35 = *(_DWORD *)(a2 - 24);
      unsigned int v36 = *(_DWORD *)(a2 - 20);
      BOOL v37 = v36 == v33 && v35 == v34;
      if (v37 && *(_DWORD *)(a2 - 16) == *(_DWORD *)(a1 + 16))
      {
        unsigned int v38 = *(_DWORD *)(a2 - 12);
        unsigned int v39 = *(_DWORD *)(a1 + 20);
        if (v38 == v39)
        {
          if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 24)) {
            return result;
          }
        }
        else if (v38 >= v39)
        {
          return result;
        }
        goto LABEL_81;
      }
      if (v36 < v33
        || (v36 <= v33 ? (BOOL v40 = v35 >= v34) : (BOOL v40 = 1),
            !v40
         || (uint64_t v41 = *(void *)(a2 - 24), v33 >= HIDWORD(v41))
         && (v34 >= v41 || v33 > HIDWORD(v41))
         && *(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 16)))
      {
LABEL_81:
        BOOL v42 = (_OWORD *)(a2 - 32);
        *(_OWORD *)unsigned int v45 = *(_OWORD *)a1;
        long long v43 = *(_OWORD *)a1;
        *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 16);
        long long v44 = *(_OWORD *)(a2 - 20);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 12) = v44;
        _OWORD *v42 = v43;
        __n128 result = *(__n128 *)&v45[12];
        *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v45[12];
        return result;
      }
      return result;
    case 3:
      sub_BB54D4((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return result;
    case 4:
      result.n128_u64[0] = sub_BB6310(a1, a1 + 32, a1 + 64, a2 - 32).n128_u64[0];
      return result;
    case 5:
      result.n128_u64[0] = sub_BB657C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32).n128_u64[0];
      return result;
    default:
      uint64_t v4 = a1 + 64;
      sub_BB54D4((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v6 = a1 + 96;
      if (a1 + 96 == a2) {
        return result;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      while (2)
      {
        unsigned int v11 = *(_DWORD *)(v4 + 8);
        unsigned int v10 = *(_DWORD *)(v4 + 12);
        unsigned int v12 = *(_DWORD *)(v6 + 8);
        unsigned int v13 = *(_DWORD *)(v6 + 12);
        BOOL v14 = v13 == v10 && v12 == v11;
        if (v14 && *(_DWORD *)(v6 + 16) == *(_DWORD *)(v4 + 16))
        {
          unsigned int v15 = *(_DWORD *)(v6 + 20);
          unsigned int v16 = *(_DWORD *)(v4 + 20);
          BOOL v17 = v15 >= v16;
          if (v15 == v16)
          {
            if (*(_DWORD *)(v6 + 24) <= *(_DWORD *)(v4 + 24)) {
              goto LABEL_7;
            }
            goto LABEL_28;
          }
        }
        else
        {
          if (v13 < v10) {
            goto LABEL_28;
          }
          if (v13 <= v10 && v12 < v11) {
            goto LABEL_28;
          }
          uint64_t v19 = *(void *)(v6 + 8);
          if (v10 < HIDWORD(v19) || v11 < v19 && v10 <= HIDWORD(v19)) {
            goto LABEL_7;
          }
          BOOL v17 = *(_DWORD *)(v6 + 16) >= *(_DWORD *)(v4 + 16);
        }
        if (v17) {
          goto LABEL_7;
        }
LABEL_28:
        uint64_t v21 = *(void *)v6;
        uint64_t v20 = *(void *)(v6 + 8);
        unsigned int v22 = *(_DWORD *)(v6 + 16);
        unsigned int v23 = *(_DWORD *)(v6 + 20);
        unsigned int v24 = *(_DWORD *)(v6 + 24);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        __n128 result = *(__n128 *)(v4 + 12);
        *(__n128 *)(v6 + 12) = result;
        uint64_t v9 = a1;
        if (v4 == a1) {
          goto LABEL_6;
        }
        uint64_t v25 = v7;
        while (2)
        {
          uint64_t v26 = a1 + v25;
          unsigned int v27 = *(_DWORD *)(a1 + v25 + 40);
          unsigned int v28 = *(_DWORD *)(a1 + v25 + 44);
          BOOL v29 = HIDWORD(v20) == v28 && v20 == v27;
          if (!v29 || v22 != *(_DWORD *)(v26 + 48))
          {
            if (HIDWORD(v20) >= v28 && (HIDWORD(v20) > v28 || v20 >= v27))
            {
              BOOL v32 = v28 >= HIDWORD(v20) && v27 >= v20;
              if (!v32 || v22 >= *(_DWORD *)(v26 + 48))
              {
LABEL_53:
                uint64_t v9 = v4;
                goto LABEL_6;
              }
            }
            goto LABEL_31;
          }
          unsigned int v30 = *(_DWORD *)(a1 + v25 + 52);
          if (v23 != v30)
          {
            if (v23 >= v30) {
              goto LABEL_53;
            }
            goto LABEL_31;
          }
          if (v24 > *(_DWORD *)(a1 + v25 + 56))
          {
LABEL_31:
            v4 -= 32;
            *(_OWORD *)(v26 + 64) = *(_OWORD *)(v26 + 32);
            __n128 result = *(__n128 *)(v26 + 44);
            *(__n128 *)(v26 + 76) = result;
            v25 -= 32;
            if (v25 == -64)
            {
              uint64_t v9 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        uint64_t v9 = a1 + v25 + 64;
LABEL_6:
        *(void *)uint64_t v9 = v21;
        *(void *)(v9 + 8) = v20;
        *(_DWORD *)(v9 + 16) = v22;
        *(_DWORD *)(v9 + 20) = v23;
        ++v8;
        *(_DWORD *)(v9 + 24) = v24;
        if (v8 != 8)
        {
LABEL_7:
          uint64_t v4 = v6;
          v7 += 32;
          v6 += 32;
          if (v6 != a2) {
            continue;
          }
        }
        return result;
      }
  }
}

__n128 sub_BB6310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_BB54D4((long long *)a1, (long long *)a2, (long long *)a3);
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = *(_DWORD *)(a4 + 12);
  BOOL v13 = v12 == v9 && v11 == v10;
  if (!v13 || *(_DWORD *)(a4 + 16) != *(_DWORD *)(a3 + 16))
  {
    if (v12 < v9) {
      goto LABEL_21;
    }
    if (v12 <= v9 && v11 < v10) {
      goto LABEL_21;
    }
    uint64_t v18 = *(void *)(a4 + 8);
    if (v9 < HIDWORD(v18) || v10 < v18 && v9 <= HIDWORD(v18)) {
      return result;
    }
    BOOL v16 = *(_DWORD *)(a4 + 16) >= *(_DWORD *)(a3 + 16);
    goto LABEL_20;
  }
  unsigned int v14 = *(_DWORD *)(a4 + 20);
  unsigned int v15 = *(_DWORD *)(a3 + 20);
  BOOL v16 = v14 >= v15;
  if (v14 != v15)
  {
LABEL_20:
    if (v16) {
      return result;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)(a4 + 24) <= *(_DWORD *)(a3 + 24)) {
    return result;
  }
LABEL_21:
  *(_OWORD *)uint64_t v41 = *(_OWORD *)a3;
  long long v19 = *(_OWORD *)a3;
  *(_OWORD *)&v41[16] = *(_OWORD *)(a3 + 16);
  long long v20 = *(_OWORD *)(a4 + 12);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 12) = v20;
  *(_OWORD *)a4 = v19;
  __n128 result = *(__n128 *)&v41[12];
  *(_OWORD *)(a4 + 12) = *(_OWORD *)&v41[12];
  unsigned int v22 = *(_DWORD *)(a2 + 8);
  unsigned int v21 = *(_DWORD *)(a2 + 12);
  unsigned int v23 = *(_DWORD *)(a3 + 8);
  unsigned int v24 = *(_DWORD *)(a3 + 12);
  if (v24 == v21 && v23 == v22 && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a2 + 16))
  {
    unsigned int v25 = *(_DWORD *)(a3 + 20);
    unsigned int v26 = *(_DWORD *)(a2 + 20);
    BOOL v27 = v25 >= v26;
    if (v25 == v26)
    {
      if (*(_DWORD *)(a3 + 24) <= *(_DWORD *)(a2 + 24)) {
        return result;
      }
      goto LABEL_35;
    }
LABEL_34:
    if (v27) {
      return result;
    }
    goto LABEL_35;
  }
  if (v24 >= v21 && (v24 > v21 || v23 >= v22))
  {
    uint64_t v28 = *(void *)(a3 + 8);
    if (v21 < HIDWORD(v28) || v22 < v28 && v21 <= HIDWORD(v28)) {
      return result;
    }
    BOOL v27 = *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16);
    goto LABEL_34;
  }
LABEL_35:
  *(_OWORD *)BOOL v42 = *(_OWORD *)a2;
  long long v29 = *(_OWORD *)a2;
  *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 16);
  long long v30 = *(_OWORD *)(a3 + 12);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 12) = v30;
  *(_OWORD *)a3 = v29;
  __n128 result = *(__n128 *)&v42[12];
  *(_OWORD *)(a3 + 12) = *(_OWORD *)&v42[12];
  unsigned int v32 = *(_DWORD *)(a1 + 8);
  unsigned int v31 = *(_DWORD *)(a1 + 12);
  unsigned int v33 = *(_DWORD *)(a2 + 8);
  unsigned int v34 = *(_DWORD *)(a2 + 12);
  if (v34 == v31 && v33 == v32 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 16))
  {
    unsigned int v35 = *(_DWORD *)(a2 + 20);
    unsigned int v36 = *(_DWORD *)(a1 + 20);
    BOOL v37 = v35 >= v36;
    if (v35 == v36)
    {
      if (*(_DWORD *)(a2 + 24) <= *(_DWORD *)(a1 + 24)) {
        return result;
      }
      goto LABEL_49;
    }
LABEL_48:
    if (v37) {
      return result;
    }
    goto LABEL_49;
  }
  if (v34 < v31 || v34 <= v31 && v33 < v32)
  {
LABEL_49:
    *(_OWORD *)long long v43 = *(_OWORD *)a1;
    long long v39 = *(_OWORD *)a1;
    *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 16);
    long long v40 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v40;
    *(_OWORD *)a2 = v39;
    __n128 result = *(__n128 *)&v43[12];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v43[12];
    return result;
  }
  uint64_t v38 = *(void *)(a2 + 8);
  if (v31 >= HIDWORD(v38) && (v32 >= v38 || v31 > HIDWORD(v38)))
  {
    BOOL v37 = *(_DWORD *)(a2 + 16) >= *(_DWORD *)(a1 + 16);
    goto LABEL_48;
  }
  return result;
}

__n128 sub_BB657C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_BB6310(a1, a2, a3, a4).n128_u64[0];
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  unsigned int v11 = *(_DWORD *)(a4 + 12);
  unsigned int v13 = *(_DWORD *)(a5 + 8);
  unsigned int v14 = *(_DWORD *)(a5 + 12);
  BOOL v15 = v14 == v11 && v13 == v12;
  if (!v15 || *(_DWORD *)(a5 + 16) != *(_DWORD *)(a4 + 16))
  {
    if (v14 < v11) {
      goto LABEL_21;
    }
    if (v14 <= v11 && v13 < v12) {
      goto LABEL_21;
    }
    uint64_t v20 = *(void *)(a5 + 8);
    if (v11 < HIDWORD(v20) || v12 < v20 && v11 <= HIDWORD(v20)) {
      return result;
    }
    BOOL v18 = *(_DWORD *)(a5 + 16) >= *(_DWORD *)(a4 + 16);
    goto LABEL_20;
  }
  unsigned int v16 = *(_DWORD *)(a5 + 20);
  unsigned int v17 = *(_DWORD *)(a4 + 20);
  BOOL v18 = v16 >= v17;
  if (v16 != v17)
  {
LABEL_20:
    if (v18) {
      return result;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)(a5 + 24) <= *(_DWORD *)(a4 + 24)) {
    return result;
  }
LABEL_21:
  *(_OWORD *)long long v53 = *(_OWORD *)a4;
  long long v21 = *(_OWORD *)a4;
  *(_OWORD *)&v53[16] = *(_OWORD *)(a4 + 16);
  long long v22 = *(_OWORD *)(a5 + 12);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 12) = v22;
  *(_OWORD *)a5 = v21;
  __n128 result = *(__n128 *)&v53[12];
  *(_OWORD *)(a5 + 12) = *(_OWORD *)&v53[12];
  unsigned int v24 = *(_DWORD *)(a3 + 8);
  unsigned int v23 = *(_DWORD *)(a3 + 12);
  unsigned int v25 = *(_DWORD *)(a4 + 8);
  unsigned int v26 = *(_DWORD *)(a4 + 12);
  if (v26 == v23 && v25 == v24 && *(_DWORD *)(a4 + 16) == *(_DWORD *)(a3 + 16))
  {
    unsigned int v27 = *(_DWORD *)(a4 + 20);
    unsigned int v28 = *(_DWORD *)(a3 + 20);
    BOOL v29 = v27 >= v28;
    if (v27 == v28)
    {
      if (*(_DWORD *)(a4 + 24) <= *(_DWORD *)(a3 + 24)) {
        return result;
      }
      goto LABEL_35;
    }
  }
  else
  {
    if (v26 < v23 || v26 <= v23 && v25 < v24) {
      goto LABEL_35;
    }
    uint64_t v30 = *(void *)(a4 + 8);
    if (v23 < HIDWORD(v30) || v24 < v30 && v23 <= HIDWORD(v30)) {
      return result;
    }
    BOOL v29 = *(_DWORD *)(a4 + 16) >= *(_DWORD *)(a3 + 16);
  }
  if (v29) {
    return result;
  }
LABEL_35:
  *(_OWORD *)uint64_t v54 = *(_OWORD *)a3;
  long long v31 = *(_OWORD *)a3;
  *(_OWORD *)&v54[16] = *(_OWORD *)(a3 + 16);
  long long v32 = *(_OWORD *)(a4 + 12);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 12) = v32;
  *(_OWORD *)a4 = v31;
  __n128 result = *(__n128 *)&v54[12];
  *(_OWORD *)(a4 + 12) = *(_OWORD *)&v54[12];
  unsigned int v34 = *(_DWORD *)(a2 + 8);
  unsigned int v33 = *(_DWORD *)(a2 + 12);
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  unsigned int v36 = *(_DWORD *)(a3 + 12);
  if (v36 == v33 && v35 == v34 && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a2 + 16))
  {
    unsigned int v37 = *(_DWORD *)(a3 + 20);
    unsigned int v38 = *(_DWORD *)(a2 + 20);
    BOOL v39 = v37 >= v38;
    if (v37 == v38)
    {
      if (*(_DWORD *)(a3 + 24) <= *(_DWORD *)(a2 + 24)) {
        return result;
      }
      goto LABEL_49;
    }
LABEL_48:
    if (v39) {
      return result;
    }
    goto LABEL_49;
  }
  if (v36 >= v33 && (v36 > v33 || v35 >= v34))
  {
    uint64_t v40 = *(void *)(a3 + 8);
    if (v33 < HIDWORD(v40) || v34 < v40 && v33 <= HIDWORD(v40)) {
      return result;
    }
    BOOL v39 = *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16);
    goto LABEL_48;
  }
LABEL_49:
  *(_OWORD *)uint64_t v55 = *(_OWORD *)a2;
  long long v41 = *(_OWORD *)a2;
  *(_OWORD *)&v55[16] = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)(a3 + 12);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 12) = v42;
  *(_OWORD *)a3 = v41;
  __n128 result = *(__n128 *)&v55[12];
  *(_OWORD *)(a3 + 12) = *(_OWORD *)&v55[12];
  unsigned int v44 = *(_DWORD *)(a1 + 8);
  unsigned int v43 = *(_DWORD *)(a1 + 12);
  unsigned int v45 = *(_DWORD *)(a2 + 8);
  unsigned int v46 = *(_DWORD *)(a2 + 12);
  if (v46 == v43 && v45 == v44 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 16))
  {
    unsigned int v47 = *(_DWORD *)(a2 + 20);
    unsigned int v48 = *(_DWORD *)(a1 + 20);
    BOOL v49 = v47 >= v48;
    if (v47 == v48)
    {
      if (*(_DWORD *)(a2 + 24) <= *(_DWORD *)(a1 + 24)) {
        return result;
      }
      goto LABEL_63;
    }
LABEL_62:
    if (v49) {
      return result;
    }
    goto LABEL_63;
  }
  if (v46 < v43 || v46 <= v43 && v45 < v44)
  {
LABEL_63:
    *(_OWORD *)long long v56 = *(_OWORD *)a1;
    long long v51 = *(_OWORD *)a1;
    *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 16);
    long long v52 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = v52;
    *(_OWORD *)a2 = v51;
    __n128 result = *(__n128 *)&v56[12];
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v56[12];
    return result;
  }
  uint64_t v50 = *(void *)(a2 + 8);
  if (v43 >= HIDWORD(v50) && (v44 >= v50 || v43 > HIDWORD(v50)))
  {
    BOOL v49 = *(_DWORD *)(a2 + 16) >= *(_DWORD *)(a1 + 16);
    goto LABEL_62;
  }
  return result;
}

uint64_t sub_BB68AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 5) {
    return result;
  }
  uint64_t v6 = v4 >> 4;
  uint64_t v7 = (v4 >> 4) + 1;
  int v8 = (_OWORD *)(result + 32 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 < a3)
  {
    unsigned int v10 = *((_DWORD *)v8 + 2);
    unsigned int v11 = v8 + 1;
    unsigned int v12 = *((_DWORD *)v8 + 10);
    unsigned int v13 = *((_DWORD *)v8 + 11);
    unsigned int v14 = *((_DWORD *)v8 + 3);
    BOOL v15 = v14 == v13 && v10 == v12;
    if (v15 && *v11 == *((_DWORD *)v8 + 12))
    {
      uint64_t v16 = result + 32 * v7;
      unsigned int v17 = *(_DWORD *)(v16 + 20);
      unsigned int v18 = *((_DWORD *)v8 + 13);
      BOOL v19 = v17 >= v18;
      if (v17 == v18)
      {
        if (*(_DWORD *)(v16 + 24) <= *((_DWORD *)v8 + 14)) {
          goto LABEL_28;
        }
LABEL_27:
        v8 += 2;
        uint64_t v7 = v9;
        goto LABEL_28;
      }
LABEL_26:
      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (v14 < v13) {
      goto LABEL_27;
    }
    if (v14 <= v13 && v10 < v12) {
      goto LABEL_27;
    }
    uint64_t v21 = *((void *)v8 + 1);
    if (v13 >= HIDWORD(v21) && (v12 >= v21 || v13 > HIDWORD(v21)))
    {
      BOOL v19 = *v11 >= *((_DWORD *)v8 + 12);
      goto LABEL_26;
    }
  }
LABEL_28:
  uint64_t v23 = a4[1];
  unsigned int v24 = *((_DWORD *)v8 + 2);
  unsigned int v25 = *((_DWORD *)v8 + 3);
  BOOL v26 = v25 == HIDWORD(v23) && v24 == v23;
  if (!v26 || (unsigned int v27 = *((_DWORD *)v8 + 4), v27 != *((_DWORD *)a4 + 4)))
  {
    if (v25 < HIDWORD(v23)) {
      return result;
    }
    if (v25 <= HIDWORD(v23) && v24 < v23) {
      return result;
    }
    uint64_t v31 = *((void *)v8 + 1);
    if (HIDWORD(v23) >= HIDWORD(v31))
    {
      unsigned int v27 = *((_DWORD *)a4 + 4);
      BOOL v32 = v23 >= v31 || HIDWORD(v23) > HIDWORD(v31);
      if (v32 && *((_DWORD *)v8 + 4) < v27) {
        return result;
      }
    }
    else
    {
      unsigned int v27 = *((_DWORD *)a4 + 4);
    }
LABEL_53:
    uint64_t v33 = *a4;
    unsigned int v34 = *((_DWORD *)a4 + 5);
    unsigned int v35 = *((_DWORD *)a4 + 6);
    long long v36 = *(_OWORD *)((char *)v8 + 12);
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)((char *)a4 + 12) = v36;
    while (1)
    {
      if (v5 < v7)
      {
LABEL_105:
        *(void *)int v8 = v33;
        *((void *)v8 + 1) = v23;
        *((_DWORD *)v8 + 4) = v27;
        *((_DWORD *)v8 + 5) = v34;
        *((_DWORD *)v8 + 6) = v35;
        return result;
      }
      unsigned int v38 = v8;
      uint64_t v39 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      int v8 = (_OWORD *)(result + 32 * v7);
      uint64_t v40 = v39 + 2;
      if (v40 < a3)
      {
        unsigned int v41 = *((_DWORD *)v8 + 2);
        long long v42 = v8 + 1;
        unsigned int v43 = *((_DWORD *)v8 + 10);
        unsigned int v44 = *((_DWORD *)v8 + 11);
        unsigned int v45 = *((_DWORD *)v8 + 3);
        BOOL v46 = v45 == v44 && v41 == v43;
        if (v46 && *v42 == *((_DWORD *)v8 + 12))
        {
          uint64_t v47 = result + 32 * v7;
          unsigned int v48 = *(_DWORD *)(v47 + 20);
          unsigned int v49 = *((_DWORD *)v8 + 13);
          BOOL v50 = v48 >= v49;
          if (v48 != v49) {
            goto LABEL_80;
          }
          if (*(_DWORD *)(v47 + 24) > *((_DWORD *)v8 + 14)) {
            goto LABEL_81;
          }
        }
        else
        {
          if (v45 < v44) {
            goto LABEL_81;
          }
          if (v45 <= v44 && v41 < v43) {
            goto LABEL_81;
          }
          uint64_t v52 = *((void *)v8 + 1);
          if (v44 >= HIDWORD(v52) && (v43 >= v52 || v44 > HIDWORD(v52)))
          {
            BOOL v50 = *v42 >= *((_DWORD *)v8 + 12);
LABEL_80:
            if (v50) {
              goto LABEL_82;
            }
LABEL_81:
            v8 += 2;
            uint64_t v7 = v40;
          }
        }
      }
LABEL_82:
      unsigned int v54 = *((_DWORD *)v8 + 2);
      unsigned int v55 = *((_DWORD *)v8 + 3);
      BOOL v56 = v55 == HIDWORD(v23) && v54 == v23;
      if (v56 && *((_DWORD *)v8 + 4) == v27)
      {
        unsigned int v57 = *((_DWORD *)v8 + 5);
        if (v57 == v34)
        {
          if (*((_DWORD *)v8 + 6) > v35) {
            goto LABEL_104;
          }
        }
        else if (v57 < v34)
        {
          goto LABEL_104;
        }
      }
      else if (v55 < HIDWORD(v23) {
             || (v55 <= HIDWORD(v23) ? (BOOL v58 = v54 >= v23) : (BOOL v58 = 1),
      }
                 !v58
              || (uint64_t v59 = *((void *)v8 + 1), HIDWORD(v23) >= HIDWORD(v59))
              && (v23 < v59 ? (BOOL v60 = HIDWORD(v23) > HIDWORD(v59)) : (BOOL v60 = 1),
                  v60 && *((_DWORD *)v8 + 4) < v27)))
      {
LABEL_104:
        int v8 = v38;
        goto LABEL_105;
      }
      long long v37 = *v8;
      *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)v8 + 12);
      _OWORD *v38 = v37;
    }
  }
  unsigned int v28 = *((_DWORD *)v8 + 5);
  unsigned int v29 = *((_DWORD *)a4 + 5);
  if (v28 == v29)
  {
    if (*((_DWORD *)v8 + 6) > *((_DWORD *)a4 + 6)) {
      return result;
    }
    goto LABEL_53;
  }
  if (v28 >= v29) {
    goto LABEL_53;
  }
  return result;
}

__n128 sub_BB6B9C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    *(_OWORD *)unsigned int v29 = *a1;
    *(_OWORD *)&v29[16] = a1[1];
    int64_t v5 = a1;
    while (1)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4 + 1;
      v5 += 2 * v4 + 2;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 >= a4) {
        goto LABEL_4;
      }
      unsigned int v12 = (uint64_t *)v5 + 1;
      unsigned int v11 = *((_DWORD *)v5 + 2);
      unsigned int v13 = v5 + 1;
      unsigned int v14 = *((_DWORD *)v5 + 10);
      unsigned int v15 = *((_DWORD *)v5 + 11);
      unsigned int v16 = *((_DWORD *)v5 + 3);
      BOOL v17 = v16 == v15 && v11 == v14;
      if (v17 && *v13 == *((_DWORD *)v5 + 12)) {
        break;
      }
      if (v16 >= v15 && (v16 > v15 || v11 >= v14))
      {
        uint64_t v23 = *v12;
        unint64_t v24 = HIDWORD(*v12);
        if (v15 < v24) {
          goto LABEL_4;
        }
        if (v14 < v23 && v15 <= v24) {
          goto LABEL_4;
        }
        BOOL v21 = *v13 >= *((_DWORD *)v5 + 12);
LABEL_28:
        if (v21) {
          goto LABEL_4;
        }
      }
LABEL_3:
      v5 += 2;
      uint64_t v4 = v10;
LABEL_4:
      long long v6 = *v5;
      *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)v5 + 12);
      *uint64_t v7 = v6;
      if (v4 > (uint64_t)((unint64_t)(a4 - 2) >> 1))
      {
        BOOL v26 = (long long *)(a2 - 32);
        if (v5 == (_OWORD *)(a2 - 32))
        {
          __n128 result = *(__n128 *)v29;
          *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)&v29[12];
          *int64_t v5 = *(_OWORD *)v29;
        }
        else
        {
          long long v27 = *v26;
          *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 - 20);
          *int64_t v5 = v27;
          *BOOL v26 = *(_OWORD *)v29;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v29[12];
          sub_BB6D0C((uint64_t)a1, (uint64_t)(v5 + 2), a3, ((char *)(v5 + 2) - (char *)a1) >> 5);
        }
        return result;
      }
    }
    unsigned int v18 = &v7[2 * v8];
    unsigned int v19 = *((_DWORD *)v18 + 5);
    unsigned int v20 = *((_DWORD *)v5 + 13);
    BOOL v21 = v19 >= v20;
    if (v19 == v20)
    {
      if (*((_DWORD *)v18 + 6) <= *((_DWORD *)v5 + 14)) {
        goto LABEL_4;
      }
      goto LABEL_3;
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_BB6D0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  long long v6 = (long long *)(result + 32 * (v4 >> 1));
  unsigned int v7 = *((_DWORD *)v6 + 2);
  uint64_t v8 = v6 + 1;
  uint64_t v9 = *(void *)(a2 - 24);
  unsigned int v10 = *((_DWORD *)v6 + 3);
  BOOL v11 = v10 == HIDWORD(v9) && v7 == v9;
  if (v11 && *v8 == *(_DWORD *)(a2 - 16))
  {
    uint64_t v12 = result + 32 * v5;
    unsigned int v13 = *(_DWORD *)(v12 + 20);
    unsigned int v14 = *(_DWORD *)(a2 - 12);
    if (v13 == v14)
    {
      if (*(_DWORD *)(v12 + 24) <= *(_DWORD *)(a2 - 8)) {
        return result;
      }
    }
    else if (v13 >= v14)
    {
      return result;
    }
  }
  else if (v10 >= HIDWORD(v9) && (v10 > HIDWORD(v9) || v7 >= v9))
  {
    uint64_t v16 = *((void *)v6 + 1);
    if (HIDWORD(v9) < HIDWORD(v16)) {
      return result;
    }
    BOOL v17 = v9 >= v16 || HIDWORD(v9) > HIDWORD(v16);
    if (!v17 || *v8 >= *(_DWORD *)(a2 - 16)) {
      return result;
    }
  }
  unsigned int v18 = (_OWORD *)(a2 - 32);
  uint64_t v19 = *(void *)(a2 - 32);
  unsigned int v20 = *(_DWORD *)(a2 - 16);
  unsigned int v21 = *(_DWORD *)(a2 - 12);
  unsigned int v22 = *(_DWORD *)(a2 - 8);
  long long v23 = *(long long *)((char *)v6 + 12);
  *unsigned int v18 = *v6;
  *(_OWORD *)((char *)v18 + 12) = v23;
  if (v4 >= 2)
  {
    while (1)
    {
      unint64_t v26 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      unint64_t v24 = (long long *)(result + 32 * v5);
      unsigned int v27 = *((_DWORD *)v24 + 2);
      unsigned int v28 = (unsigned int *)(v24 + 1);
      unsigned int v29 = *((_DWORD *)v24 + 3);
      BOOL v30 = v29 == HIDWORD(v9) && v27 == v9;
      if (v30 && *v28 == v20)
      {
        uint64_t v31 = result + 32 * v5;
        unsigned int v32 = *(_DWORD *)(v31 + 20);
        if (v32 == v21)
        {
          if (*(_DWORD *)(v31 + 24) <= v22) {
            break;
          }
        }
        else if (v32 >= v21)
        {
          break;
        }
      }
      else if (v29 >= HIDWORD(v9) && (v29 > HIDWORD(v9) || v27 >= v9))
      {
        uint64_t v34 = *((void *)v24 + 1);
        if (HIDWORD(v9) < HIDWORD(v34)) {
          break;
        }
        BOOL v35 = v9 >= v34 || HIDWORD(v9) > HIDWORD(v34);
        if (!v35 || *v28 >= v20) {
          break;
        }
      }
      long long v25 = *v24;
      *(long long *)((char *)v6 + 12) = *(long long *)((char *)v24 + 12);
      *long long v6 = v25;
      long long v6 = (long long *)(result + 32 * v5);
      if (v26 < 2) {
        goto LABEL_28;
      }
    }
  }
  unint64_t v24 = v6;
LABEL_28:
  *(void *)unint64_t v24 = v19;
  *((void *)v24 + 1) = v9;
  *((_DWORD *)v24 + 4) = v20;
  *((_DWORD *)v24 + 5) = v21;
  *((_DWORD *)v24 + 6) = v22;
  return result;
}

uint64_t sub_BB6EA8(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "include_walking_only_journeys");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "include_line_similarity");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "include_trip_similarity");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "restrict_trip_similarity_to_main_leg");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "include_deparr_of_timestamp_journeys");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "include_deparr_of_fillin");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v9;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "equivalence_threshold");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v10;
  return a1;
}

void sub_BB7148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_BB717C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_BB6EA8(a1, a3);
  *(void *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(void *)(v4 + 88) = 0;
  return result;
}

void sub_BB71C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  sub_BB7424(a1, a2);
  sub_BB7AA0(a1, a2);
  sub_BB8280(a1, a2);
  unint64_t v7 = *(void *)(a1 + 72);
  BOOL v8 = *(__n128 **)(a1 + 80);
  unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 3));
  if (v8 == (__n128 *)v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_BBA628(v7, v8, v10, 1, v6);
  sub_BB850C(a1, a2);
  if (0x14C1BACF914C1BADLL * ((v4 - v5) >> 3) > (unint64_t)(0x14C1BACF914C1BADLL
                                                                  * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3))
    && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"The journey similarity filter removed ", 38);
    BOOL v11 = (void *)std::ostream::operator<<();
    sub_188FC78(v11, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_BB73D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_BB7424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 24);
  long long v68 = (void ***)(a1 + 24);
  uint64_t v5 = *(void ***)(a1 + 32);
  if (v5 != v4)
  {
    __n128 v6 = *(void ***)(a1 + 32);
    do
    {
      unint64_t v9 = (char *)*(v6 - 3);
      v6 -= 3;
      BOOL v8 = v9;
      if (v9)
      {
        uint64_t v10 = (char *)*(v5 - 2);
        unint64_t v7 = v8;
        if (v10 != v8)
        {
          BOOL v11 = (char *)*(v5 - 2);
          do
          {
            char v13 = (void *)*((void *)v11 - 3);
            v11 -= 24;
            uint64_t v12 = v13;
            if (v13)
            {
              *((void *)v10 - 2) = v12;
              operator delete(v12);
            }
            uint64_t v10 = v11;
          }
          while (v11 != v8);
          unint64_t v7 = *v6;
        }
        *(v5 - 2) = v8;
        operator delete(v7);
      }
      uint64_t v5 = v6;
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 32) = v4;
  if (!*(unsigned char *)(a1 + 1)) {
    return;
  }
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v69 = *(void *)(a2 + 16);
  if (v14 == v69) {
    return;
  }
  while (2)
  {
    v74[0] = 0;
    v74[1] = 0;
    uint64_t v75 = 0;
    uint64_t v16 = v14;
    BOOL v17 = *(uint64_t **)(v14 + 200);
    unsigned int v18 = *(uint64_t **)(v16 + 208);
    uint64_t v70 = v16;
    long long v71 = v18;
    if (v17 == v18) {
      goto LABEL_18;
    }
    while (2)
    {
      if (*((unsigned char *)v17 + 24)) {
        goto LABEL_26;
      }
      __p[0] = 0;
      __p[1] = 0;
      long long v73 = 0;
      uint64_t v27 = *v17;
      uint64_t v28 = v17[1];
      if (v28 == *v17)
      {
        unsigned int v48 = 0;
        uint64_t v47 = 0;
        goto LABEL_56;
      }
      unint64_t v29 = 0xCF3CF3CF3CF3CF3DLL * ((v28 - *v17) >> 3);
      if (v29 >> 61) {
        sub_2E00();
      }
      BOOL v30 = (char *)operator new(0x79E79E79E79E79E8 * ((v28 - *v17) >> 3));
      __p[0] = v30;
      __p[1] = v30;
      long long v73 = &v30[8 * v29];
      do
      {
        unint64_t v31 = *(void *)(v27 + 32);
        unsigned int v32 = *(_DWORD *)(v27 + 52);
        uint64_t v33 = (void *)(*(void *)(a1 + 16) + 4136);
        if (sub_A10E20(v33, SHIDWORD(v31)))
        {
          uint64_t v34 = (int *)sub_A1120C(*(void *)(*v33 + 3944), v31);
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v46 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v35 = *v33;
          if (dword_24F7300 == HIDWORD(v31))
          {
            long long v36 = *(unsigned int **)(*(void *)(v35 + 3976) + 72);
            if (!v36)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v76, "Realtime stop pattern quad data requested on nullptr buffer");
              long long v67 = (void *)sub_2F404((uint64_t)exception, &v76);
            }
            long long v37 = (int *)((char *)v36 + *v36);
            unsigned int v38 = (unsigned __int16 *)((char *)v37 - *v37);
            if (*v38 >= 5u && (uint64_t v39 = v38[2]) != 0) {
              uint64_t v40 = (unsigned int *)((char *)v37 + v39 + *(unsigned int *)((char *)v37 + v39));
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v34 = (int *)sub_A1139C(v40, v31);
          }
          else
          {
            uint64_t v34 = (int *)sub_A11500(v35 + 24, v31, 0, "stop pattern");
          }
        }
        unsigned int v41 = (unsigned __int16 *)((char *)v34 - *v34);
        unsigned int v42 = *v41;
        if (v42 < 5)
        {
          unsigned int v43 = 0;
LABEL_47:
          unsigned int v44 = 0;
          goto LABEL_48;
        }
        if (v41[2])
        {
          unsigned int v43 = (char *)v34 + v41[2] + *(unsigned int *)((char *)v34 + v41[2]);
          if (v42 < 9) {
            goto LABEL_47;
          }
        }
        else
        {
          unsigned int v43 = 0;
          if (v42 < 9) {
            goto LABEL_47;
          }
        }
        uint64_t v45 = v41[4];
        if (!v45) {
          goto LABEL_47;
        }
        unsigned int v44 = (unsigned int *)((char *)v34 + v45 + *(unsigned int *)((char *)v34 + v45));
LABEL_48:
        *(void *)&long long v76 = __ROR8__(*(void *)&v43[8 * *(unsigned __int8 *)(sub_A10764(v44, v32) + 14) + 4], 32);
        BOOL v30 = sub_A19B54((unint64_t *)__p, v30, &v76) + 8;
        v27 += 168;
      }
      while (v27 != v28);
      uint64_t v47 = (char *)__p[0];
      unsigned int v48 = (char *)__p[1];
LABEL_56:
      unint64_t v49 = 126 - 2 * __clz((v48 - v47) >> 3);
      if (v48 == v47) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = v49;
      }
      sub_B6FCF0((uint64_t)v47, v48, (uint64_t)&v76, v50, 1);
      long long v51 = (char *)v74[1];
      if (v74[1] < v75)
      {
        *(void *)v74[1] = 0;
        *((void *)v51 + 1) = 0;
        *((void *)v51 + 2) = 0;
        *(_OWORD *)long long v51 = *(_OWORD *)__p;
        *((void *)v51 + 2) = v73;
        v74[1] = v51 + 24;
        unsigned int v18 = v71;
      }
      else
      {
        uint64_t v52 = (char *)v74[0];
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74[1] - (char *)v74[0]) >> 3);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v75 - (char *)v74[0]) >> 3) > v54) {
          unint64_t v54 = 0x5555555555555556 * ((v75 - (char *)v74[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v75 - (char *)v74[0]) >> 3) >= 0x555555555555555) {
          unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          if (v55 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          BOOL v56 = (char *)operator new(24 * v55);
        }
        else
        {
          BOOL v56 = 0;
        }
        unsigned int v57 = &v56[24 * v53];
        *(_OWORD *)unsigned int v57 = *(_OWORD *)__p;
        *((void *)v57 + 2) = v73;
        BOOL v58 = &v56[24 * v55];
        __p[1] = 0;
        long long v73 = 0;
        __p[0] = 0;
        uint64_t v59 = v57 + 24;
        if (v51 == v52)
        {
          v74[0] = v57;
          v74[1] = v57 + 24;
          uint64_t v75 = &v56[24 * v55];
          unsigned int v18 = v71;
        }
        else
        {
          unsigned int v18 = v71;
          do
          {
            BOOL v60 = v57;
            *((void *)v57 - 2) = 0;
            *((void *)v57 - 1) = 0;
            long long v61 = *(_OWORD *)(v51 - 24);
            v51 -= 24;
            *(_OWORD *)(v57 - 24) = v61;
            v57 -= 24;
            *((void *)v60 - 1) = *((void *)v51 + 2);
            *(void *)long long v51 = 0;
            *((void *)v51 + 1) = 0;
            *((void *)v51 + 2) = 0;
          }
          while (v51 != v52);
          long long v51 = (char *)v74[0];
          long long v62 = (char *)v74[1];
          v74[0] = v57;
          v74[1] = v59;
          uint64_t v75 = v58;
          if (v62 != v51)
          {
            long long v63 = v62;
            do
            {
              long long v65 = (void *)*((void *)v63 - 3);
              v63 -= 24;
              long long v64 = v65;
              if (v65)
              {
                *((void *)v62 - 2) = v64;
                operator delete(v64);
              }
              long long v62 = v63;
            }
            while (v63 != v51);
          }
        }
        if (v51) {
          operator delete(v51);
        }
        v74[1] = v59;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
LABEL_26:
      v17 += 9;
      if (v17 != v18) {
        continue;
      }
      break;
    }
LABEL_18:
    uint64_t v19 = *(void **)(a1 + 32);
    if ((unint64_t)v19 < *(void *)(a1 + 40))
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v74;
      v19[2] = v75;
      *(void *)(a1 + 32) = v19 + 3;
      uint64_t v15 = v70;
    }
    else
    {
      unsigned int v20 = sub_4D1F4(v68, (uint64_t)v74);
      uint64_t v15 = v70;
      unsigned int v21 = (char *)v74[0];
      *(void *)(a1 + 32) = v20;
      if (v21)
      {
        unsigned int v22 = v74[1];
        long long v23 = v21;
        if (v74[1] != v21)
        {
          unint64_t v24 = (char *)v74[1];
          do
          {
            unint64_t v26 = (void *)*((void *)v24 - 3);
            v24 -= 24;
            long long v25 = v26;
            if (v26)
            {
              *(v22 - 2) = v25;
              operator delete(v25);
            }
            unsigned int v22 = v24;
          }
          while (v24 != v21);
          long long v23 = (char *)v74[0];
          uint64_t v15 = v70;
        }
        v74[1] = v21;
        operator delete(v23);
      }
    }
    uint64_t v14 = v15 + 296;
    if (v14 != v69) {
      continue;
    }
    break;
  }
}

void sub_BB79EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!__p)
  {
    sub_36094(&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_36094(&a17);
  _Unwind_Resume(a1);
}

void sub_BB7AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 48);
  __int16 v83 = (void ***)(a1 + 48);
  uint64_t v5 = *(void ***)(a1 + 56);
  if (v5 != v4)
  {
    __n128 v6 = *(void ***)(a1 + 56);
    do
    {
      unint64_t v9 = (char *)*(v6 - 3);
      v6 -= 3;
      BOOL v8 = v9;
      if (v9)
      {
        uint64_t v10 = (char *)*(v5 - 2);
        unint64_t v7 = v8;
        if (v10 != v8)
        {
          BOOL v11 = (char *)*(v5 - 2);
          do
          {
            char v13 = (void *)*((void *)v11 - 3);
            v11 -= 24;
            uint64_t v12 = v13;
            if (v13)
            {
              *((void *)v10 - 2) = v12;
              operator delete(v12);
            }
            uint64_t v10 = v11;
          }
          while (v11 != v8);
          unint64_t v7 = *v6;
        }
        *(v5 - 2) = v8;
        operator delete(v7);
      }
      uint64_t v5 = v6;
    }
    while (v6 != v4);
  }
  *(void *)(a1 + 56) = v4;
  if (*(unsigned char *)(a1 + 2))
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = *(void *)(a2 + 16);
    uint64_t v84 = v15;
    while (1)
    {
      if (v14 == v15) {
        return;
      }
      v89[0] = 0;
      v89[1] = 0;
      int v90 = 0;
      uint64_t v16 = *(uint64_t **)(v14 + 200);
      BOOL v17 = *(uint64_t **)(v14 + 208);
      uint64_t v85 = v14;
      uint64_t v86 = v17;
      if (v16 == v17) {
        goto LABEL_18;
      }
      while (2)
      {
        if (*((unsigned char *)v16 + 24)) {
          goto LABEL_26;
        }
        *(_OWORD *)__n128 __p = 0uLL;
        long long v88 = 0;
        uint64_t v27 = *v16;
        uint64_t v26 = v16[1];
        if (*v16 == v26)
        {
          uint64_t v28 = 0;
          uint64_t v62 = 0;
          goto LABEL_83;
        }
        uint64_t v28 = 0;
        do
        {
          if (*(unsigned char *)(v27 + 158))
          {
            BOOL v30 = (void *)(*(void *)(a1 + 16) + 4136);
            unint64_t v31 = *(void *)(v27 + 32);
            unsigned int v32 = *(_DWORD *)(v27 + 52);
            int v33 = *(_DWORD *)(v27 + 40);
            if (sub_A10E20(v30, SHIDWORD(v31)))
            {
              uint64_t v34 = *(unsigned int **)(*(void *)(*v30 + 3944) + 72);
              if (!v34)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v91, "Incident stop pattern quad data requested on nullptr buffer");
                uint64_t v80 = (void *)sub_2F404((uint64_t)exception, &v91);
              }
              goto LABEL_43;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v61 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v35 = *v30;
            if (dword_24F7300 == HIDWORD(v31))
            {
              uint64_t v34 = *(unsigned int **)(*(void *)(v35 + 3976) + 72);
              if (!v34)
              {
                uint64_t v81 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v91, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v82 = (void *)sub_2F404((uint64_t)v81, &v91);
              }
LABEL_43:
              long long v36 = (char *)v34 + *v34;
              long long v37 = &v36[-*(int *)v36];
              if (*(unsigned __int16 *)v37 >= 5u)
              {
LABEL_44:
                uint64_t v38 = *((unsigned __int16 *)v37 + 2);
                if (v38) {
                  v38 += (uint64_t)&v36[*(unsigned int *)&v36[v38]];
                }
LABEL_48:
                uint64_t v39 = (int *)(v38 + 4 * v31 + 4 + *(unsigned int *)(v38 + 4 * v31 + 4));
                uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
                if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
                  unsigned int v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
                }
                else {
                  unsigned int v42 = 0;
                }
                uint64_t v43 = sub_A10764(v42, v32);
                unsigned int v44 = &v36[-*(int *)v36];
                if (*(unsigned __int16 *)v44 < 0xBu)
                {
                  uint64_t v45 = 0;
                  int v46 = (unsigned __int16 *)((char *)v39 - *v39);
                  if (*v46 >= 0x11u) {
                    goto LABEL_56;
                  }
                }
                else
                {
                  uint64_t v45 = (unsigned int *)*((unsigned __int16 *)v44 + 5);
                  if (v45) {
                    uint64_t v45 = (unsigned int *)((char *)v45 + (void)v36 + *(unsigned int *)((char *)v45 + (void)v36));
                  }
                  int v46 = (unsigned __int16 *)((char *)v39 - *v39);
                  if (*v46 >= 0x11u)
                  {
LABEL_56:
                    uint64_t v47 = v46[8];
                    if (v46[8]) {
                      LODWORD(v47) = *(int *)((char *)v39 + v47);
                    }
LABEL_60:
                    uint64_t v48 = sub_A108C4(v45, v47+ *(int *)((char *)v39 + v46[2] + *(unsigned int *)((char *)v39 + v46[2])) * v33+ *(unsigned __int8 *)(v43 + 14));
                    if (v48)
                    {
                      uint64_t v49 = __ROR8__(*(void *)v48, 32);
                      int v50 = *(_DWORD *)(v48 + 8);
                      uint64_t v52 = __p[1];
                      long long v51 = v88;
                      if (__p[1] >= v88)
                      {
LABEL_64:
                        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)__p[0]) >> 2) + 1;
                        if (v53 > 0x1555555555555555) {
                          sub_2E00();
                        }
                        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v51 - (char *)__p[0]) >> 2);
                        if (2 * v54 > v53) {
                          unint64_t v53 = 2 * v54;
                        }
                        if (v54 >= 0xAAAAAAAAAAAAAAALL) {
                          unint64_t v55 = 0x1555555555555555;
                        }
                        else {
                          unint64_t v55 = v53;
                        }
                        if (v55)
                        {
                          if (v55 > 0x1555555555555555) {
                            sub_188D718();
                          }
                          BOOL v56 = (char *)operator new(12 * v55);
                        }
                        else
                        {
                          BOOL v56 = 0;
                        }
                        unsigned int v57 = &v56[4 * (((char *)v52 - (char *)__p[0]) >> 2)];
                        *(void *)unsigned int v57 = v49;
                        *((_DWORD *)v57 + 2) = v50;
                        BOOL v58 = v57;
                        if (v52 != __p[0])
                        {
                          do
                          {
                            uint64_t v59 = *(void *)(v52 - 3);
                            v52 -= 3;
                            int v60 = v52[2];
                            *(void *)(v58 - 12) = v59;
                            v58 -= 12;
                            *((_DWORD *)v58 + 2) = v60;
                          }
                          while (v52 != __p[0]);
                          uint64_t v52 = __p[0];
                        }
                        uint64_t v28 = (uint64_t *)(v57 + 12);
                        __p[0] = v58;
                        long long v88 = &v56[12 * v55];
                        if (v52) {
                          operator delete(v52);
                        }
                        goto LABEL_31;
                      }
                    }
                    else
                    {
                      int v50 = 0;
                      uint64_t v49 = 0xFFFFFFFFLL;
                      uint64_t v52 = __p[1];
                      long long v51 = v88;
                      if (__p[1] >= v88) {
                        goto LABEL_64;
                      }
                    }
                    *(void *)uint64_t v52 = v49;
                    v52[2] = v50;
                    uint64_t v28 = (uint64_t *)(v52 + 3);
LABEL_31:
                    __p[1] = v28;
                    goto LABEL_32;
                  }
                }
                LODWORD(v47) = 0;
                goto LABEL_60;
              }
            }
            else
            {
              long long v36 = sub_A10B80(v35 + 24, v31, 0);
              long long v37 = &v36[-*(int *)v36];
              if (*(unsigned __int16 *)v37 >= 5u) {
                goto LABEL_44;
              }
            }
            uint64_t v38 = 0;
            goto LABEL_48;
          }
LABEL_32:
          v27 += 168;
          if (*(unsigned char *)(a1 + 3)) {
            BOOL v29 = 1;
          }
          else {
            BOOL v29 = v27 == v26;
          }
        }
        while (!v29);
        uint64_t v62 = (uint64_t)__p[0];
LABEL_83:
        unint64_t v63 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - v62) >> 2));
        if (v28 == (uint64_t *)v62) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = v63;
        }
        sub_BB8BC4(v62, v28, (uint64_t)&v91, v64, 1);
        long long v65 = v89[1];
        if (v89[1] < v90)
        {
          *(_OWORD *)v89[1] = *(_OWORD *)__p;
          v65[2] = v88;
          v89[1] = v65 + 3;
          BOOL v17 = v86;
        }
        else
        {
          long long v66 = v89[0];
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89[1] - (char *)v89[0]) >> 3);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          if (0x5555555555555556 * ((v90 - (char *)v89[0]) >> 3) > v68) {
            unint64_t v68 = 0x5555555555555556 * ((v90 - (char *)v89[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v90 - (char *)v89[0]) >> 3) >= 0x555555555555555) {
            unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69)
          {
            if (v69 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            uint64_t v70 = (char *)operator new(24 * v69);
          }
          else
          {
            uint64_t v70 = 0;
          }
          long long v71 = &v70[24 * v67];
          *(_OWORD *)long long v71 = *(_OWORD *)__p;
          *((void *)v71 + 2) = v88;
          long long v72 = v71 + 24;
          if (v65 == v66)
          {
            v89[0] = v71;
            v89[1] = v71 + 24;
            int v90 = &v70[24 * v69];
          }
          else
          {
            do
            {
              long long v73 = v71;
              *((void *)v71 - 2) = 0;
              *((void *)v71 - 1) = 0;
              long long v74 = *(_OWORD *)(v65 - 3);
              v65 -= 3;
              *(_OWORD *)(v71 - 24) = v74;
              v71 -= 24;
              *((void *)v73 - 1) = v65[2];
              *long long v65 = 0;
              v65[1] = 0;
              v65[2] = 0;
            }
            while (v65 != v66);
            long long v65 = v89[0];
            uint64_t v75 = v89[1];
            v89[0] = v71;
            v89[1] = v72;
            int v90 = &v70[24 * v69];
            if (v75 != v65)
            {
              long long v76 = v75;
              do
              {
                long long v78 = (void *)*(v76 - 3);
                v76 -= 3;
                long long v77 = v78;
                if (v78)
                {
                  *(v75 - 2) = v77;
                  operator delete(v77);
                }
                uint64_t v75 = v76;
              }
              while (v76 != v65);
            }
          }
          BOOL v17 = v86;
          if (v65) {
            operator delete(v65);
          }
          v89[1] = v72;
        }
LABEL_26:
        v16 += 9;
        if (v16 != v17) {
          continue;
        }
        break;
      }
LABEL_18:
      unsigned int v18 = *(void **)(a1 + 56);
      if ((unint64_t)v18 < *(void *)(a1 + 64))
      {
        *unsigned int v18 = 0;
        v18[1] = 0;
        __n128 v18[2] = 0;
        *(_OWORD *)unsigned int v18 = *(_OWORD *)v89;
        __n128 v18[2] = v90;
        *(void *)(a1 + 56) = v18 + 3;
      }
      else
      {
        uint64_t v19 = sub_4D1F4(v83, (uint64_t)v89);
        unsigned int v20 = (char *)v89[0];
        *(void *)(a1 + 56) = v19;
        if (v20)
        {
          unsigned int v21 = v89[1];
          unsigned int v22 = v20;
          if (v89[1] != v20)
          {
            long long v23 = (char *)v89[1];
            do
            {
              long long v25 = (void *)*((void *)v23 - 3);
              v23 -= 24;
              unint64_t v24 = v25;
              if (v25)
              {
                *(v21 - 2) = v24;
                operator delete(v24);
              }
              unsigned int v21 = v23;
            }
            while (v23 != v20);
            unsigned int v22 = (char *)v89[0];
          }
          v89[1] = v20;
          operator delete(v22);
        }
      }
      uint64_t v15 = v84;
      uint64_t v14 = v85 + 296;
    }
  }
}

void sub_BB81C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!__p)
  {
    sub_36094(&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_36094(&a17);
  _Unwind_Resume(a1);
}

void sub_BB8280(uint64_t a1, uint64_t a2)
{
  BOOL v29 = (void **)(a1 + 72);
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v27 = 0x14C1BACF914C1BADLL * (v2 >> 3);
    while (1)
    {
      unint64_t v6 = 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      uint64_t v28 = v5 + 1;
      uint64_t v7 = v5 + 1 > v6 ? v5 + 1 : 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      if (v5 + 1 < v6) {
        break;
      }
LABEL_3:
      ++v5;
      if (v28 == v27) {
        return;
      }
    }
    uint64_t v8 = v5 + 1;
    while (1)
    {
      double v10 = sub_BB8848(a1, a2, v5, v8);
      if (!*(unsigned char *)a1)
      {
        uint64_t v25 = *(void *)(a2 + 8);
        if (0x8E38E38E38E38E39
           * ((uint64_t)(*(void *)(v25 + 296 * v5 + 208) - *(void *)(v25 + 296 * v5 + 200)) >> 3) < 3
          || 0x8E38E38E38E38E39
           * ((uint64_t)(*(void *)(v25 + 296 * v8 + 208) - *(void *)(v25 + 296 * v8 + 200)) >> 3) < 3)
        {
          goto LABEL_11;
        }
      }
      if (v10 < *(double *)(a1 + 8)) {
        goto LABEL_11;
      }
      uint64_t v12 = *(char **)(a1 + 80);
      unint64_t v11 = *(void *)(a1 + 88);
      if ((unint64_t)v12 < v11)
      {
        *(void *)uint64_t v12 = v5;
        *((void *)v12 + 1) = v8;
        unint64_t v9 = v12 + 24;
        *((double *)v12 + 2) = v10;
      }
      else
      {
        char v13 = (char *)*v29;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*v29) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v13) >> 3);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        uint64_t v18 = 24 * v17;
        uint64_t v19 = (char *)operator new(24 * v17);
        unsigned int v20 = &v19[24 * v14];
        *(void *)unsigned int v20 = v5;
        *((void *)v20 + 1) = v8;
        *((double *)v20 + 2) = v10;
        if (v12 == v13)
        {
          uint64_t v26 = &v19[v18];
          unint64_t v9 = v20 + 24;
          *(void *)(a1 + 72) = v20;
          *(void *)(a1 + 80) = v20 + 24;
          *(void *)(a1 + 88) = v26;
          if (!v13) {
            goto LABEL_10;
          }
        }
        else
        {
          unsigned int v21 = &v19[24 * v14];
          do
          {
            long long v22 = *(_OWORD *)(v12 - 24);
            long long v23 = v21 - 24;
            *((void *)v21 - 1) = *((void *)v12 - 1);
            *(_OWORD *)(v21 - 24) = v22;
            v12 -= 24;
            v21 -= 24;
          }
          while (v12 != v13);
          unint64_t v24 = &v19[v18];
          unint64_t v9 = v20 + 24;
          *(void *)(a1 + 72) = v23;
          *(void *)(a1 + 80) = v20 + 24;
          *(void *)(a1 + 88) = v24;
          if (!v13) {
            goto LABEL_10;
          }
        }
        operator delete(v13);
      }
LABEL_10:
      *(void *)(a1 + 80) = v9;
LABEL_11:
      if (++v8 == v7) {
        goto LABEL_3;
      }
    }
  }
}

void sub_BB850C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 72);
  for (unint64_t i = *(void **)(a1 + 80); v3 != i; v3 += 3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = v5 + 296 * *v3;
    uint64_t v7 = v6 + 200;
    uint64_t v8 = *(void ***)(v6 + 200);
    unint64_t v9 = *(void ***)(v6 + 208);
    if (v8 != v9)
    {
      uint64_t v10 = v3[1];
      uint64_t v11 = v5 + 296 * v10;
      char v13 = *(void ***)(v11 + 200);
      unint64_t v14 = *(void ***)(v11 + 208);
      uint64_t v12 = v11 + 200;
      if (v13 != v14)
      {
        uint64_t v15 = v5 + 296 * v10;
        unsigned int v16 = *(unsigned __int8 *)(v6 + 9);
        unsigned int v17 = *(unsigned __int8 *)(v15 + 9);
        if (v16 >= v17
          && (v17 < v16
           || (v18 = *(unsigned __int8 *)(v6 + 2), unsigned int v19 = *(unsigned __int8 *)(v15 + 2), v18 >= v19)
           && (v19 < v18
            || (int v20 = *(_DWORD *)(v6 + 4), v21 = *(_DWORD *)(v15 + 4), v21 >= v20)
            && (v20 < v21
             || (unsigned int v22 = *(unsigned __int8 *)(v6 + 1) ^ 1, v23 = *(unsigned __int8 *)(v15 + 1) ^ 1, v22 >= v23)
             && (v23 >= v22
               ? (BOOL v24 = *(double *)(v5 + 296 * *v3 + 192) <= *(double *)(v5 + 296 * v10 + 192))
               : (BOOL v24 = 1),
                 v24)))))
        {
          do
          {
            uint64_t v34 = *(v9 - 5);
            if (v34)
            {
              *(v9 - 4) = v34;
              operator delete(v34);
            }
            uint64_t v35 = v9 - 9;
            long long v36 = (char *)*(v9 - 9);
            if (v36)
            {
              long long v37 = (char *)*(v9 - 8);
              int v33 = *(v9 - 9);
              if (v37 != v36)
              {
                do
                {
                  if (!*((_DWORD *)v37 - 2))
                  {
                    uint64_t v38 = (void *)*((void *)v37 - 6);
                    if (v38)
                    {
                      *((void *)v37 - 5) = v38;
                      operator delete(v38);
                    }
                    uint64_t v39 = (void *)*((void *)v37 - 10);
                    if (v39)
                    {
                      *((void *)v37 - 9) = v39;
                      operator delete(v39);
                    }
                    uint64_t v40 = (void *)*((void *)v37 - 13);
                    if (v40)
                    {
                      *((void *)v37 - 12) = v40;
                      operator delete(v40);
                    }
                  }
                  v37 -= 168;
                }
                while (v37 != v36);
                int v33 = *v35;
              }
              *(v9 - 8) = v36;
              operator delete(v33);
            }
            v9 -= 9;
          }
          while (v35 != v8);
          *(void *)(v7 + 8) = v8;
        }
        else
        {
          do
          {
            uint64_t v26 = *(v14 - 5);
            if (v26)
            {
              *(v14 - 4) = v26;
              operator delete(v26);
            }
            uint64_t v27 = v14 - 9;
            uint64_t v28 = (char *)*(v14 - 9);
            if (v28)
            {
              BOOL v29 = (char *)*(v14 - 8);
              uint64_t v25 = *(v14 - 9);
              if (v29 != v28)
              {
                do
                {
                  if (!*((_DWORD *)v29 - 2))
                  {
                    BOOL v30 = (void *)*((void *)v29 - 6);
                    if (v30)
                    {
                      *((void *)v29 - 5) = v30;
                      operator delete(v30);
                    }
                    unint64_t v31 = (void *)*((void *)v29 - 10);
                    if (v31)
                    {
                      *((void *)v29 - 9) = v31;
                      operator delete(v31);
                    }
                    unsigned int v32 = (void *)*((void *)v29 - 13);
                    if (v32)
                    {
                      *((void *)v29 - 12) = v32;
                      operator delete(v32);
                    }
                  }
                  v29 -= 168;
                }
                while (v29 != v28);
                uint64_t v25 = *v27;
              }
              *(v14 - 8) = v28;
              operator delete(v25);
            }
            v14 -= 9;
          }
          while (v27 != v13);
          *(void *)(v12 + 8) = v13;
        }
      }
    }
  }
  uint64_t v41 = *(void *)(a2 + 8);
  uint64_t v42 = *(void *)(a2 + 16);
  if (v41 != v42)
  {
    for (uint64_t j = v41 + 296; *(void *)(j - 96) != *(void *)(j - 88); j += 296)
    {
      if (j == v42) {
        return;
      }
    }
    uint64_t v45 = j - 296;
    if (j - 296 != v42 && j != v42)
    {
      do
      {
        if (*(void *)(j + 200) != *(void *)(j + 208))
        {
          sub_B3E498(v45, (long long *)j);
          v45 += 296;
        }
        j += 296;
      }
      while (j != v42);
      uint64_t v42 = *(void *)(a2 + 16);
    }
    if (v45 != v42)
    {
      do
      {
        v42 -= 296;
        sub_9F5E28(a2 + 24, v42);
      }
      while (v42 != v45);
      *(void *)(a2 + 16) = v45;
    }
  }
}

double sub_BB8848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 296 * a3;
  uint64_t v6 = *(void *)(v5 + 200);
  uint64_t v7 = *(void *)(v5 + 208);
  double v8 = 0.0;
  if (v6 == v7) {
    return v8;
  }
  if (v7 - v6 != *(void *)(v4 + 296 * a4 + 208) - *(void *)(v4 + 296 * a4 + 200)) {
    return v8;
  }
  uint64_t v9 = v4 + 296 * a4;
  if (*(unsigned char *)(a1 + 4))
  {
    if (*(unsigned __int8 *)(v5 + 11) | *(unsigned __int8 *)(v9 + 11)
      && *(_DWORD *)(v5 + 16) != *(_DWORD *)(v9 + 16)
      && *(_DWORD *)(v5 + 28) != *(_DWORD *)(v9 + 28))
    {
      return v8;
    }
  }
  if (*(unsigned char *)(a1 + 5))
  {
    BOOL v10 = *(unsigned char *)(v5 + 9) == 1 || *(unsigned char *)(v9 + 9) == 1;
    if (v10 && *(_DWORD *)(v5 + 16) != *(_DWORD *)(v9 + 16) && *(_DWORD *)(v5 + 28) != *(_DWORD *)(v9 + 28)) {
      return v8;
    }
  }
  if (!*(unsigned char *)(a1 + 1))
  {
    double v8 = 1.0;
    if (*(unsigned char *)(a1 + 2)) {
      goto LABEL_45;
    }
    return v8;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(v11 + 24 * a3);
  uint64_t v13 = *(void *)(v11 + 24 * a3 + 8);
  double v14 = 1.0;
  uint64_t v15 = v13 - v12;
  if (v13 == v12) {
    goto LABEL_44;
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
  uint64_t v18 = *(void *)(v11 + 24 * a4);
  while (2)
  {
    int v20 = (unsigned int **)(v12 + 24 * v16);
    int v21 = *v20;
    unsigned int v22 = v20[1];
    if (v21 == v22) {
      goto LABEL_22;
    }
    unsigned int v23 = (unsigned int **)(v18 + 24 * v16);
    BOOL v24 = *v23;
    uint64_t v25 = v23[1];
    if (v24 == v25) {
      goto LABEL_22;
    }
    unint64_t v26 = 0;
    uint64_t v27 = v21;
    uint64_t v28 = v24;
    do
    {
      unsigned int v29 = v28[1];
      unsigned int v30 = v27[1];
      BOOL v31 = v30 > v29;
      if (v30 < v29 || ((v32 = *v28, !v31) ? (BOOL v33 = *v27 >= v32) : (BOOL v33 = 1), !v33))
      {
        v27 += 2;
        if (v27 == v22) {
          break;
        }
        continue;
      }
      uint64_t v34 = HIDWORD(*(void *)v27);
      if (v29 >= v34 && (v32 >= *(void *)v27 || v29 > v34))
      {
        ++v26;
        v27 += 2;
      }
      v28 += 2;
      if (v27 == v22) {
        break;
      }
    }
    while (v28 != v25);
    double v19 = (double)v26 / (double)(unint64_t)(((char *)v25 - (char *)v24) >> 3);
    if ((double)v26 / (double)(unint64_t)(((char *)v22 - (char *)v21) >> 3) >= v19) {
      double v19 = (double)v26 / (double)(unint64_t)(((char *)v22 - (char *)v21) >> 3);
    }
    if (v19 < v14) {
      double v14 = v19;
    }
LABEL_22:
    if (++v16 != v17) {
      continue;
    }
    break;
  }
LABEL_44:
  double v8 = fmin(v14, 1.0);
  if (*(unsigned char *)(a1 + 2))
  {
LABEL_45:
    double v36 = sub_BB8A7C(a1, (uint64_t *)(*(void *)(a1 + 48) + 24 * a3), (uint64_t *)(*(void *)(a1 + 48) + 24 * a4));
    if (v36 < v8) {
      return v36;
    }
  }
  return v8;
}

double sub_BB8A7C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2) {
    return 1.0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a3;
  double result = 1.0;
  while (2)
  {
    BOOL v10 = (unsigned int **)(v3 + 24 * v6);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (v11 == v12) {
      goto LABEL_7;
    }
    uint64_t v13 = (unsigned int **)(v7 + 24 * v6);
    double v14 = *v13;
    uint64_t v15 = v13[1];
    if (v14 == v15) {
      goto LABEL_7;
    }
    unint64_t v16 = 0;
    unint64_t v17 = v11;
    uint64_t v18 = v14;
    do
    {
      unsigned int v19 = v18[1];
      unsigned int v20 = v17[1];
      if (v20 < v19 || ((v21 = *v18, v20 <= v19) ? (BOOL v22 = *v17 >= v21) : (BOOL v22 = 1), !v22))
      {
LABEL_24:
        v17 += 3;
        if (v17 == v12) {
          break;
        }
        continue;
      }
      uint64_t v23 = *(void *)v17;
      uint64_t v24 = HIDWORD(*(void *)v17);
      if (v19 >= v24 && (v21 >= v23 || v19 > v24))
      {
        unsigned int v26 = v17[2];
        unsigned int v27 = v18[2];
        if (v26 < v27) {
          goto LABEL_24;
        }
        if (v23 < v21 || v27 >= v26 || v19 > v24)
        {
          ++v16;
          v17 += 3;
        }
      }
      v18 += 3;
      if (v17 == v12) {
        break;
      }
    }
    while (v18 != v15);
    double v9 = (double)v16 / (double)(0xAAAAAAAAAAAAAAABLL * (v15 - v14));
    if ((double)v16 / (double)(0xAAAAAAAAAAAAAAABLL * (v12 - v11)) >= v9) {
      double v9 = (double)v16 / (double)(0xAAAAAAAAAAAAAAABLL * (v12 - v11));
    }
    if (v9 < result) {
      double result = v9;
    }
LABEL_7:
    if (++v6 != 0xAAAAAAAAAAAAAAABLL * (v5 >> 3)) {
      continue;
    }
    return result;
  }
}

uint64_t sub_BB8BC4(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v10 = (void *)result;
LABEL_2:
  uint64_t v11 = (uint64_t *)((char *)a2 - 12);
  uint64_t v12 = (unsigned int *)v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    BOOL v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 2);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v32 = v12[1];
          unsigned int v33 = *((_DWORD *)a2 - 2);
          BOOL v34 = v33 > v32;
          if (v33 < v32
            || ((v35 = *v12, !v34) ? (BOOL v36 = *(_DWORD *)v11 >= v35) : (BOOL v36 = 1),
                !v36
             || (unint64_t v37 = HIDWORD(*v11), v32 >= v37)
             && (v35 < *v11 ? (BOOL v38 = v32 > v37) : (BOOL v38 = 1),
                 v38 && *((_DWORD *)a2 - 1) < v12[2])))
          {
            unsigned int v77 = v12[2];
            uint64_t v75 = *(void *)v12;
            uint64_t v39 = *v11;
            void v12[2] = *((_DWORD *)a2 - 1);
            *(void *)uint64_t v12 = v39;
            uint64_t *v11 = v75;
            *((_DWORD *)a2 - 1) = v77;
          }
          break;
        case 3uLL:
          double result = sub_BB91F4(v12, v12 + 3, (uint64_t)a2 - 12);
          break;
        case 4uLL:
          double result = sub_BB9C5C(v12, v12 + 3, (uint64_t)(v12 + 6), (uint64_t)a2 - 12);
          break;
        case 5uLL:
          double result = sub_BB9E14(v12, v12 + 3, v12 + 6, (uint64_t)(v12 + 9), (uint64_t)a2 - 12);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 287)
    {
      uint64_t v40 = (uint64_t *)(v12 + 3);
      BOOL v42 = v12 == (unsigned int *)a2 || v40 == a2;
      if (a5)
      {
        if (v42) {
          return result;
        }
        uint64_t v43 = 0;
        unsigned int v44 = v12;
        while (2)
        {
          int v46 = v44;
          unsigned int v44 = (unsigned int *)v40;
          unsigned int v47 = v46[1];
          unsigned int v48 = v46[4];
          if (v48 < v47)
          {
            uint64_t v49 = *v40;
            goto LABEL_78;
          }
          unsigned int v50 = *v46;
          unsigned int v51 = *(_DWORD *)v40;
          uint64_t v49 = *v40;
          BOOL v52 = v48 > v47 || v51 >= v50;
          if (!v52
            || v47 >= HIDWORD(v49)
            && (v50 < v49 ? (BOOL v53 = v47 > HIDWORD(v49)) : (BOOL v53 = 1), v53 && v46[5] < v46[2]))
          {
LABEL_78:
            unsigned int v54 = v46[5];
            *(void *)unsigned int v44 = *(void *)v46;
            v44[2] = v46[2];
            uint64_t v45 = v12;
            if (v46 != v12)
            {
              uint64_t v55 = v43;
              while (1)
              {
                BOOL v56 = (char *)v12 + v55;
                unint64_t v57 = *(void *)((char *)v12 + v55 - 12);
                double result = HIDWORD(v57);
                if (HIDWORD(v49) >= HIDWORD(v57)
                  && (HIDWORD(v49) > HIDWORD(v57) || v49 >= v57))
                {
                  if (HIDWORD(v57) < HIDWORD(v49) || v57 < v49)
                  {
                    uint64_t v45 = (unsigned int *)((char *)v12 + v55);
                    goto LABEL_62;
                  }
                  if (v54 >= *((_DWORD *)v56 - 1)) {
                    break;
                  }
                }
                v46 -= 3;
                *(void *)BOOL v56 = *(void *)((char *)v12 + v55 - 12);
                *((_DWORD *)v56 + 2) = *(unsigned int *)((char *)v12 + v55 - 4);
                v55 -= 12;
                if (!v55)
                {
                  uint64_t v45 = v12;
                  goto LABEL_62;
                }
              }
              uint64_t v45 = v46;
            }
LABEL_62:
            *(void *)uint64_t v45 = v49;
            v45[2] = v54;
          }
          uint64_t v40 = (uint64_t *)(v44 + 3);
          v43 += 12;
          if (v44 + 3 == (unsigned int *)a2) {
            return result;
          }
          continue;
        }
      }
      if (v42) {
        return result;
      }
      while (2)
      {
        int v60 = v10;
        BOOL v10 = v40;
        unsigned int v61 = *((_DWORD *)v60 + 1);
        unsigned int v62 = *((_DWORD *)v60 + 4);
        if (v62 >= v61)
        {
          unsigned int v64 = *(_DWORD *)v60;
          uint64_t v63 = *v10;
          if (v62 <= v61 && *(_DWORD *)v10 < v64) {
            goto LABEL_116;
          }
          if (v61 >= HIDWORD(v63))
          {
            BOOL v66 = v64 >= v63 || v61 > HIDWORD(v63);
            if (v66 && *((_DWORD *)v60 + 5) < *((_DWORD *)v60 + 2)) {
              goto LABEL_116;
            }
          }
        }
        else
        {
          uint64_t v63 = *v40;
LABEL_116:
          unsigned int v67 = *((_DWORD *)v60 + 5);
          while (1)
          {
            do
            {
              unint64_t v68 = v60;
              *(void *)((char *)v60 + 12) = *v60;
              *((_DWORD *)v60 + 5) = *((_DWORD *)v60 + 2);
              unint64_t v70 = *(void *)((char *)v60 - 12);
              int v60 = (void *)((char *)v60 - 12);
              unsigned int v69 = v70;
              unint64_t v71 = HIDWORD(v70);
            }
            while (HIDWORD(v63) < HIDWORD(v70));
            if (v63 >= v69 || HIDWORD(v63) > v71)
            {
              BOOL v73 = v69 >= v63 && v71 >= HIDWORD(v63);
              if (!v73 || v67 >= *((_DWORD *)v68 - 1)) {
                break;
              }
            }
          }
          *unint64_t v68 = v63;
          *((_DWORD *)v68 + 2) = v67;
        }
        uint64_t v40 = (void *)((char *)v10 + 12);
        if ((void *)((char *)v10 + 12) == a2) {
          return result;
        }
        continue;
      }
    }
    if (v14 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x601)
    {
      sub_BB91F4(v12, &v12[3 * (v16 >> 1)], (uint64_t)a2 - 12);
      uint64_t v19 = 3 * v17;
      unsigned int v20 = &v12[3 * v17 - 3];
      sub_BB91F4(v12 + 3, v20, (uint64_t)(a2 - 3));
      unsigned int v21 = v12 + 6;
      BOOL v22 = &v12[v19 + 3];
      sub_BB91F4(v21, v22, (uint64_t)a2 - 36);
      sub_BB91F4(v20, v18, (uint64_t)v22);
      unsigned int v76 = *((_DWORD *)v10 + 2);
      uint64_t v74 = *v10;
      uint64_t v23 = *(void *)v18;
      *((_DWORD *)v10 + 2) = v18[2];
      void *v10 = v23;
      __n128 v18[2] = v76;
      *(void *)uint64_t v18 = v74;
      if (a5) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_BB91F4(&v12[3 * (v16 >> 1)], v12, (uint64_t)a2 - 12);
      if (a5) {
        goto LABEL_20;
      }
    }
    unsigned int v24 = *((_DWORD *)v10 + 1);
    unsigned int v25 = *((_DWORD *)v10 - 2);
    BOOL v26 = v25 > v24;
    if (v25 >= v24)
    {
      unsigned int v27 = *(_DWORD *)v10;
      if (v26 || *((_DWORD *)v10 - 3) >= v27)
      {
        if ((uint64_t v28 = *(void *)((char *)v10 - 12), v24 < HIDWORD(v28))
          || v27 < v28 && v24 <= HIDWORD(v28)
          || *((_DWORD *)v10 - 1) >= *((_DWORD *)v10 + 2))
        {
          double result = (uint64_t)sub_BB946C(v10, a2);
          uint64_t v12 = (unsigned int *)result;
          goto LABEL_24;
        }
      }
    }
LABEL_20:
    unsigned int v29 = (unsigned int *)sub_BB9694(v10, (unint64_t)a2);
    if ((v30 & 1) == 0) {
      goto LABEL_23;
    }
    BOOL v31 = sub_BB9948((unsigned int *)v10, v29);
    uint64_t v12 = v29 + 3;
    double result = sub_BB9948(v29 + 3, (unsigned int *)a2);
    if (result)
    {
      a4 = -v14;
      a2 = (uint64_t *)v29;
      if (v31) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v31)
    {
LABEL_23:
      double result = sub_BB8BC4(v10, v29, a3, -v14, a5 & 1);
      uint64_t v12 = v29 + 3;
LABEL_24:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (v12 != (unsigned int *)a2)
  {
    return (uint64_t)sub_BBA054((uint64_t)v12, a2, (unint64_t *)a2, a3);
  }
  return result;
}

uint64_t sub_BB91F4(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3 = a1[1];
  unsigned int v4 = a2[1];
  if (v4 < v3)
  {
    uint64_t v5 = *(void *)a2;
    goto LABEL_15;
  }
  unsigned int v6 = *a1;
  uint64_t v5 = *(void *)a2;
  BOOL v7 = v4 > v3 || *a2 >= v6;
  if (!v7 || v3 >= HIDWORD(v5) && (v6 < v5 ? (BOOL v8 = v3 > HIDWORD(v5)) : (BOOL v8 = 1), v8 && a2[2] < a1[2]))
  {
LABEL_15:
    unsigned int v9 = *(_DWORD *)(a3 + 4);
    if (v9 < HIDWORD(v5)
      || (v9 <= HIDWORD(v5) ? (BOOL v10 = *(_DWORD *)a3 >= v5) : (BOOL v10 = 1),
          !v10
       || (uint64_t v11 = HIDWORD(*(void *)a3), HIDWORD(v5) >= v11)
       && (v5 >= *(void *)a3 || HIDWORD(v5) > v11)
       && *(_DWORD *)(a3 + 8) < a2[2]))
    {
      unsigned int v12 = a1[2];
      unint64_t v13 = *(void *)a1;
      unsigned int v14 = *(_DWORD *)(a3 + 8);
      *(void *)a1 = *(void *)a3;
      a1[2] = v14;
      *(void *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      return 1;
    }
    unsigned int v28 = a1[2];
    unint64_t v29 = *(void *)a1;
    unsigned int v30 = a2[2];
    *(void *)a1 = *(void *)a2;
    a1[2] = v30;
    *(void *)a2 = v29;
    a2[2] = v28;
    unint64_t v31 = HIDWORD(v29);
    LODWORD(v29) = *(_DWORD *)(a3 + 4);
    BOOL v32 = v29 > v31;
    if (v29 < v31
      || (unsigned int v33 = *a2, !v32) && *(_DWORD *)a3 < v33
      || (uint64_t v38 = HIDWORD(*(void *)a3), v31 >= v38)
      && (v33 >= *(void *)a3 || v31 > v38)
      && *(_DWORD *)(a3 + 8) < a2[2])
    {
      unsigned int v34 = a2[2];
      uint64_t v35 = *(void *)a2;
      unsigned int v36 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      a2[2] = v36;
      *(void *)a3 = v35;
      *(_DWORD *)(a3 + 8) = v34;
      return 2;
    }
    return 1;
  }
  unsigned int v16 = *(_DWORD *)(a3 + 4);
  if (v16 >= HIDWORD(v5) && (v16 > HIDWORD(v5) || *(_DWORD *)a3 >= v5))
  {
    uint64_t v18 = HIDWORD(*(void *)a3);
    if (HIDWORD(v5) < v18
      || v5 < *(void *)a3 && HIDWORD(v5) <= v18)
    {
      return 0;
    }
    if (*(_DWORD *)(a3 + 8) >= a2[2]) {
      return 0;
    }
  }
  unsigned int v19 = a2[2];
  uint64_t v20 = *(void *)a2;
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  a2[2] = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v19;
  unsigned int v22 = a1[1];
  LODWORD(v20) = a2[1];
  BOOL v23 = v20 > v22;
  if (v20 < v22
    || (unsigned int v24 = *a1, !v23) && *a2 < v24
    || (uint64_t v37 = HIDWORD(*(void *)a2), v22 >= v37)
    && (v24 >= *(void *)a2 || v22 > v37)
    && a2[2] < a1[2])
  {
    unsigned int v25 = a1[2];
    unint64_t v26 = *(void *)a1;
    unsigned int v27 = a2[2];
    *(void *)a1 = *(void *)a2;
    a1[2] = v27;
    *(void *)a2 = v26;
    a2[2] = v25;
    return 2;
  }
  return 1;
}

uint64_t *sub_BB946C(uint64_t *a1, uint64_t *k)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  unsigned int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = *(uint64_t *)((char *)k - 12);
  if (v3 >= HIDWORD(v5)
    && (v2 < v5 ? (BOOL v6 = v3 > HIDWORD(v5)) : (BOOL v6 = 1),
        v6
     && (HIDWORD(v5) >= v3 ? (BOOL v7 = v5 >= v2) : (BOOL v7 = 0),
         !v7 || v4 >= *((_DWORD *)k - 1))))
  {
    for (unint64_t i = (uint64_t *)((char *)a1 + 12); i < k; unint64_t i = (uint64_t *)((char *)i + 12))
    {
      unsigned int v12 = *((_DWORD *)i + 1);
      if (v3 < v12) {
        break;
      }
      if (v2 < *(_DWORD *)i && v3 <= v12) {
        break;
      }
      BOOL v14 = v12 >= v3 && *(_DWORD *)i >= v2;
      if (v14 && v4 < *((_DWORD *)i + 2)) {
        break;
      }
    }
  }
  else
  {
    unint64_t i = (uint64_t *)((char *)a1 + 12);
    unint64_t v9 = *(uint64_t *)((char *)a1 + 12);
    for (unint64_t j = HIDWORD(v9);
          v3 >= j
       && (v2 >= v9 || j < v3)
       && (j < v3
        || v9 < v2 && j <= v3
        || v4 >= *((_DWORD *)i + 2));
          unint64_t j = HIDWORD(v11))
    {
      unint64_t v11 = *(uint64_t *)((char *)i + 12);
      unint64_t i = (uint64_t *)((char *)i + 12);
      LODWORD(v9) = v11;
    }
  }
  if (i < k)
  {
    for (uint64_t k = (uint64_t *)((char *)k - 12);
          v3 < HIDWORD(v5)
       || v2 < v5 && v3 <= HIDWORD(v5)
       || HIDWORD(v5) >= v3 && v5 >= v2 && v4 < *((_DWORD *)k + 2);
          uint64_t k = (uint64_t *)((char *)k - 12))
    {
      uint64_t v15 = *(uint64_t *)((char *)k - 12);
      uint64_t v5 = v15;
    }
  }
  while (i < k)
  {
    int v27 = *((_DWORD *)i + 2);
    uint64_t v26 = *i;
    uint64_t v16 = *k;
    *((_DWORD *)i + 2) = *((_DWORD *)k + 2);
    uint64_t *i = v16;
    *((_DWORD *)k + 2) = v27;
    *uint64_t k = v26;
    unint64_t v18 = *(uint64_t *)((char *)i + 12);
    unint64_t i = (uint64_t *)((char *)i + 12);
    unsigned int v17 = v18;
    for (unint64_t m = HIDWORD(v18);
          v3 >= m
       && (v2 >= v17 || m < v3)
       && (m < v3
        || v17 < v2 && m <= v3
        || v4 >= *((_DWORD *)i + 2));
          unint64_t m = HIDWORD(v20))
    {
      unint64_t v20 = *(uint64_t *)((char *)i + 12);
      unint64_t i = (uint64_t *)((char *)i + 12);
      unsigned int v17 = v20;
    }
    while (1)
    {
      do
      {
        uint64_t k = (uint64_t *)((char *)k - 12);
        unsigned int v21 = *((_DWORD *)k + 1);
      }
      while (v3 < v21);
      if (v2 >= *(_DWORD *)k || v3 > v21)
      {
        BOOL v23 = v21 >= v3 && *(_DWORD *)k >= v2;
        if (!v23 || v4 >= *((_DWORD *)k + 2)) {
          break;
        }
      }
    }
  }
  if ((uint64_t *)((char *)i - 12) != a1)
  {
    uint64_t v24 = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 1);
    *a1 = v24;
  }
  *(uint64_t *)((char *)i - 12) = v2;
  *((_DWORD *)i - 1) = v4;
  return i;
}

unint64_t sub_BB9694(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unint64_t v5 = HIDWORD(*a1);
  while (1)
  {
    uint64_t v6 = (uint64_t)a1 + v2;
    unsigned int v7 = *(_DWORD *)((char *)a1 + v2 + 16);
    if (v7 >= v5 && (v7 > v5 || *(_DWORD *)(v6 + 12) >= v3))
    {
      uint64_t v9 = *(void *)(v6 + 12);
      if (v5 < HIDWORD(v9)) {
        break;
      }
      BOOL v10 = v3 >= v9 || v5 > HIDWORD(v9);
      if (!v10 || *(_DWORD *)(v6 + 20) >= v4) {
        break;
      }
    }
    v2 += 12;
  }
  unint64_t v11 = (unint64_t)a1 + v2 + 12;
  if (v2)
  {
    unsigned int v12 = (unsigned int *)(a2 - 12);
    unsigned int v13 = *(_DWORD *)(a2 - 8);
    if (v13 < v5) {
      goto LABEL_50;
    }
    BOOL v14 = (unsigned int *)(a2 - 4);
    while (v13 > v5 || *(v14 - 2) >= v3)
    {
      uint64_t v15 = *((void *)v14 - 1);
      if (v5 >= HIDWORD(v15))
      {
        BOOL v16 = v3 >= v15 || v5 > HIDWORD(v15);
        if (v16 && *v14 < v4) {
          goto LABEL_50;
        }
      }
      v12 -= 3;
      unsigned int v13 = *(v14 - 4);
      v14 -= 3;
      if (v13 < v5) {
        goto LABEL_49;
      }
    }
    goto LABEL_49;
  }
  if (v11 >= a2)
  {
    unint64_t v22 = (unint64_t)a1 + v2 + 12;
    goto LABEL_82;
  }
  unsigned int v12 = (unsigned int *)(a2 - 12);
  unsigned int v17 = *(_DWORD *)(a2 - 8);
  if (v17 >= v5)
  {
    BOOL v14 = (unsigned int *)(a2 - 4);
    do
    {
      unint64_t v18 = v14 - 2;
      if (v17 <= v5 && *(v14 - 2) < v3) {
        break;
      }
      uint64_t v19 = HIDWORD(*(void *)v18);
      if (v5 >= v19
        && (v3 < *(void *)v18 ? (BOOL v20 = v5 > v19) : (BOOL v20 = 1),
            v20))
      {
        if (*v14 < v4 || v11 >= (unint64_t)v18) {
          goto LABEL_50;
        }
      }
      else if (v11 >= (unint64_t)v18)
      {
        goto LABEL_50;
      }
      v12 -= 3;
      unsigned int v17 = *(v14 - 4);
      v14 -= 3;
    }
    while (v17 >= v5);
LABEL_49:
    unsigned int v12 = v14 - 2;
  }
LABEL_50:
  unint64_t v22 = v11;
  if (v11 < (unint64_t)v12)
  {
    BOOL v23 = v12;
    do
    {
      unsigned int v38 = *(_DWORD *)(v22 + 8);
      uint64_t v37 = *(void *)v22;
      uint64_t v25 = *(void *)v23;
      *(_DWORD *)(v22 + 8) = v23[2];
      *(void *)unint64_t v22 = v25;
      v23[2] = v38;
      *(void *)BOOL v23 = v37;
      unint64_t v26 = v22 + 12;
      while (1)
      {
        do
        {
          unint64_t v22 = v26;
          unsigned int v27 = *(_DWORD *)(v26 + 4);
          v26 += 12;
        }
        while (v27 < v5);
        if (v27 > v5 || *(_DWORD *)v22 >= v3)
        {
          uint64_t v29 = HIDWORD(*(void *)v22);
          if (v5 < v29) {
            break;
          }
          BOOL v30 = v3 >= *(void *)v22 || v5 > v29;
          if (!v30 || *(_DWORD *)(v22 + 8) >= v4) {
            break;
          }
        }
      }
      uint64_t v24 = v23 - 3;
      unsigned int v31 = *(v23 - 2);
      if (v31 >= v5)
      {
        BOOL v32 = v23 - 1;
        while (v31 > v5 || *(v32 - 2) >= v3)
        {
          uint64_t v33 = *((void *)v32 - 1);
          if (v5 < HIDWORD(v33)
            || (v3 < v33 ? (BOOL v34 = v5 > HIDWORD(v33)) : (BOOL v34 = 1),
                !v34 || *v32 >= v4))
          {
            v24 -= 3;
            unsigned int v31 = *(v32 - 4);
            v32 -= 3;
            if (v31 >= v5) {
              continue;
            }
          }
          uint64_t v24 = v32 - 2;
          break;
        }
      }
      BOOL v23 = v24;
    }
    while (v22 < (unint64_t)v24);
  }
LABEL_82:
  if ((uint64_t *)(v22 - 12) != a1)
  {
    uint64_t v35 = *(void *)(v22 - 12);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v22 - 4);
    *a1 = v35;
  }
  *(void *)(v22 - 12) = v3;
  *(_DWORD *)(v22 - 4) = v4;
  return v22 - 12;
}

BOOL sub_BB9948(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v23 = a2 - 3;
      unsigned int v24 = a1[1];
      unsigned int v25 = *(a2 - 2);
      BOOL v26 = v25 > v24;
      if (v25 < v24
        || ((unsigned int v27 = *a1, !v26) ? (v28 = *v23 >= v27) : (v28 = 1),
            !v28
         || (uint64_t v29 = HIDWORD(*(void *)v23), v24 >= v29)
         && (v27 >= *(void *)v23 || v24 > v29)
         && *(a2 - 1) < a1[2]))
      {
        unsigned int v30 = a1[2];
        uint64_t v31 = *(void *)a1;
        unsigned int v32 = *(a2 - 1);
        *(void *)a1 = *(void *)v23;
        a1[2] = v32;
        *(void *)BOOL v23 = v31;
        *(a2 - 1) = v30;
      }
      return result;
    case 3uLL:
      sub_BB91F4(a1, a1 + 3, (uint64_t)(a2 - 3));
      return 1;
    case 4uLL:
      sub_BB9C5C(a1, a1 + 3, (uint64_t)(a1 + 6), (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      sub_BB9E14(a1, a1 + 3, a1 + 6, (uint64_t)(a1 + 9), (uint64_t)(a2 - 3));
      return 1;
    default:
      uint64_t v6 = a1 + 6;
      sub_BB91F4(a1, a1 + 3, (uint64_t)(a1 + 6));
      unsigned int v7 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    unsigned int v11 = v6[1];
    unsigned int v12 = v7[1];
    if (v12 < v11) {
      break;
    }
    unsigned int v14 = *v6;
    uint64_t v13 = *(void *)v7;
    if (v12 <= v11 && *v7 < v14) {
      goto LABEL_24;
    }
    if (v11 >= HIDWORD(v13))
    {
      BOOL v16 = v14 >= v13 || v11 > HIDWORD(v13);
      if (v16 && v7[2] < v6[2]) {
        goto LABEL_24;
      }
    }
LABEL_9:
    uint64_t v6 = v7;
    v8 += 12;
    v7 += 3;
    if (v7 == a2) {
      return 1;
    }
  }
  uint64_t v13 = *(void *)v7;
LABEL_24:
  unsigned int v17 = v7[2];
  *(void *)unsigned int v7 = *(void *)v6;
  v7[2] = v6[2];
  uint64_t v10 = (uint64_t)a1;
  if (v6 != a1)
  {
    uint64_t v18 = v8;
    while (1)
    {
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = *(void *)((char *)a1 + v18 + 12);
      if (HIDWORD(v13) >= HIDWORD(v20) && (HIDWORD(v13) > HIDWORD(v20) || v13 >= v20))
      {
        if (HIDWORD(v20) < HIDWORD(v13) || v20 < v13)
        {
          uint64_t v10 = (uint64_t)v6;
          goto LABEL_8;
        }
        if (v17 >= *((_DWORD *)v19 + 5)) {
          break;
        }
      }
      v6 -= 3;
      *((void *)v19 + 3) = *(void *)((char *)a1 + v18 + 12);
      *((_DWORD *)v19 + 8) = *(unsigned int *)((char *)a1 + v18 + 20);
      v18 -= 12;
      if (v18 == -24)
      {
        uint64_t v10 = (uint64_t)a1;
        goto LABEL_8;
      }
    }
    uint64_t v10 = (uint64_t)a1 + v18 + 24;
  }
LABEL_8:
  *(void *)uint64_t v10 = v13;
  *(_DWORD *)(v10 + 8) = v17;
  if (++v9 != 8) {
    goto LABEL_9;
  }
  return v7 + 3 == a2;
}

uint64_t sub_BB9C5C(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_BB91F4(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)(a3 + 4);
  unsigned int v10 = *(_DWORD *)(a4 + 4);
  BOOL v11 = v10 > v9;
  if (v10 < v9
    || ((unsigned int v12 = *(_DWORD *)a3, !v11) ? (v13 = *(_DWORD *)a4 >= v12) : (v13 = 1),
        !v13
     || (uint64_t v14 = HIDWORD(*(void *)a4), v9 >= v14)
     && (v12 >= *(void *)a4 || v9 > v14)
     && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8)))
  {
    int v15 = *(_DWORD *)(a3 + 8);
    uint64_t v16 = *(void *)a3;
    int v17 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v17;
    *(void *)a4 = v16;
    *(_DWORD *)(a4 + 8) = v15;
    unsigned int v18 = a2[1];
    LODWORD(v16) = *(_DWORD *)(a3 + 4);
    BOOL v19 = v16 > v18;
    if (v16 < v18) {
      goto LABEL_15;
    }
    unsigned int v20 = *a2;
    if (!v19 && *(_DWORD *)a3 < v20) {
      goto LABEL_15;
    }
    uint64_t v30 = HIDWORD(*(void *)a3);
    if (v18 >= v30
      && (v20 >= *(void *)a3 || v18 > v30)
      && *(_DWORD *)(a3 + 8) < a2[2])
    {
LABEL_15:
      unsigned int v21 = a2[2];
      uint64_t v22 = *(void *)a2;
      unsigned int v23 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      a2[2] = v23;
      *(void *)a3 = v22;
      *(_DWORD *)(a3 + 8) = v21;
      unsigned int v24 = a1[1];
      LODWORD(v22) = a2[1];
      BOOL v25 = v22 > v24;
      if (v22 < v24
        || (unsigned int v26 = *a1, !v25) && *a2 < v26
        || (uint64_t v31 = HIDWORD(*(void *)a2), v24 >= v31)
        && (v26 >= *(void *)a2 || v24 > v31)
        && a2[2] < a1[2])
      {
        unsigned int v27 = a1[2];
        uint64_t v28 = *(void *)a1;
        unsigned int v29 = a2[2];
        *(void *)a1 = *(void *)a2;
        a1[2] = v29;
        *(void *)a2 = v28;
        a2[2] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_BB9E14(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_BB9C5C(a1, a2, (uint64_t)a3, a4);
  unsigned int v11 = *(_DWORD *)(a4 + 4);
  unsigned int v12 = *(_DWORD *)(a5 + 4);
  BOOL v13 = v12 > v11;
  if (v12 < v11
    || ((unsigned int v14 = *(_DWORD *)a4, !v13) ? (v15 = *(_DWORD *)a5 >= v14) : (v15 = 1),
        !v15
     || (uint64_t v16 = HIDWORD(*(void *)a5), v11 >= v16)
     && (v14 >= *(void *)a5 || v11 > v16)
     && *(_DWORD *)(a5 + 8) < *(_DWORD *)(a4 + 8)))
  {
    int v17 = *(_DWORD *)(a4 + 8);
    uint64_t v18 = *(void *)a4;
    int v19 = *(_DWORD *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = v19;
    *(void *)a5 = v18;
    *(_DWORD *)(a5 + 8) = v17;
    unsigned int v20 = a3[1];
    LODWORD(v18) = *(_DWORD *)(a4 + 4);
    BOOL v21 = v18 > v20;
    if (v18 < v20) {
      goto LABEL_30;
    }
    unsigned int v22 = *a3;
    if (!v21 && *(_DWORD *)a4 < v22) {
      goto LABEL_30;
    }
    uint64_t v38 = HIDWORD(*(void *)a4);
    if (v20 >= v38
      && (v22 >= *(void *)a4 || v20 > v38)
      && *(_DWORD *)(a4 + 8) < a3[2])
    {
LABEL_30:
      unsigned int v23 = a3[2];
      uint64_t v24 = *(void *)a3;
      unsigned int v25 = *(_DWORD *)(a4 + 8);
      *(void *)a3 = *(void *)a4;
      a3[2] = v25;
      *(void *)a4 = v24;
      *(_DWORD *)(a4 + 8) = v23;
      unsigned int v26 = a2[1];
      LODWORD(v24) = a3[1];
      BOOL v27 = v24 > v26;
      if (v24 < v26) {
        goto LABEL_18;
      }
      unsigned int v28 = *a2;
      if (!v27 && *a3 < v28) {
        goto LABEL_18;
      }
      uint64_t v39 = HIDWORD(*(void *)a3);
      if (v26 >= v39 && (v28 >= *(void *)a3 || v26 > v39) && a3[2] < a2[2])
      {
LABEL_18:
        unsigned int v29 = a2[2];
        uint64_t v30 = *(void *)a2;
        unsigned int v31 = a3[2];
        *(void *)a2 = *(void *)a3;
        a2[2] = v31;
        *(void *)a3 = v30;
        a3[2] = v29;
        unsigned int v32 = a1[1];
        LODWORD(v30) = a2[1];
        BOOL v33 = v30 > v32;
        if (v30 < v32
          || (unsigned int v34 = *a1, !v33) && *a2 < v34
          || (uint64_t v40 = HIDWORD(*(void *)a2), v32 >= v40)
          && (v34 >= *(void *)a2 || v32 > v40)
          && a2[2] < a1[2])
        {
          unsigned int v35 = a1[2];
          uint64_t v36 = *(void *)a1;
          unsigned int v37 = a2[2];
          *(void *)a1 = *(void *)a2;
          a1[2] = v37;
          *(void *)a2 = v36;
          a2[2] = v35;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_BBA054(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v6 = (unint64_t *)a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = (unint64_t *)(a1 + 12 * v10);
      do
      {
        sub_BBA314(a1, a4, v9, v12);
        unsigned int v12 = (unint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    BOOL v13 = v6;
    if (v6 != a3)
    {
      unsigned int v14 = v6;
      do
      {
        unsigned int v18 = *(_DWORD *)(a1 + 4);
        unsigned int v19 = *((_DWORD *)v14 + 1);
        BOOL v20 = v19 > v18;
        if (v19 < v18
          || ((v21 = *(_DWORD *)a1, !v20) ? (BOOL v22 = *(_DWORD *)v14 >= v21) : (BOOL v22 = 1),
              !v22
           || (unint64_t v23 = HIDWORD(*v14), v18 >= v23)
           && (v21 < *v14 ? (BOOL v24 = v18 > v23) : (BOOL v24 = 1),
               v24 && *((_DWORD *)v14 + 2) < *(_DWORD *)(a1 + 8))))
        {
          int v15 = *((_DWORD *)v14 + 2);
          unint64_t v16 = *v14;
          int v17 = *(_DWORD *)(a1 + 8);
          *unsigned int v14 = *(void *)a1;
          *((_DWORD *)v14 + 2) = v17;
          *(void *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          sub_BBA314(a1, a4, v9, (unint64_t *)a1);
        }
        unsigned int v14 = (unint64_t *)((char *)v14 + 12);
      }
      while (v14 != a3);
      BOOL v13 = a3;
    }
    if (v8 >= 13)
    {
      int64_t v25 = v8 / 0xCuLL;
      do
      {
        while (1)
        {
          uint64_t v27 = 0;
          unint64_t v40 = *(void *)a1;
          int v41 = *(_DWORD *)(a1 + 8);
          uint64_t v28 = a1;
          do
          {
            uint64_t v30 = v28;
            uint64_t v31 = v27 + 1;
            v28 += 12 * (v27 + 1);
            uint64_t v32 = 2 * v27;
            uint64_t v27 = (2 * v27) | 1;
            int64_t v33 = v32 + 2;
            if (v33 < v25)
            {
              uint64_t v34 = *(void *)(v28 + 12);
              unsigned int v35 = *(_DWORD *)(v28 + 4);
              if (v35 < HIDWORD(v34)
                || (v35 <= HIDWORD(v34) ? (BOOL v36 = *(_DWORD *)v28 >= v34) : (BOOL v36 = 1),
                    !v36
                 || (uint64_t v37 = HIDWORD(*(void *)v28), HIDWORD(v34) >= v37)
                 && (v34 < *(void *)v28
                   ? (BOOL v38 = HIDWORD(v34) > v37)
                   : (BOOL v38 = 1),
                     v38 && *(_DWORD *)(v30 + 12 * v31 + 8) < *(_DWORD *)(v28 + 20))))
              {
                v28 += 12;
                uint64_t v27 = v33;
              }
            }
            uint64_t v29 = *(void *)v28;
            *(_DWORD *)(v30 + 8) = *(_DWORD *)(v28 + 8);
            *(void *)uint64_t v30 = v29;
          }
          while (v27 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
          uint64_t v6 = (unint64_t *)((char *)v6 - 12);
          if ((unint64_t *)v28 == v6) {
            break;
          }
          unint64_t v26 = *v6;
          *(_DWORD *)(v28 + 8) = *((_DWORD *)v6 + 2);
          *(void *)uint64_t v28 = v26;
          *uint64_t v6 = v40;
          *((_DWORD *)v6 + 2) = v41;
          sub_BBA520(a1, v28 + 12, a4, 0xAAAAAAAAAAAAAAABLL * ((v28 + 12 - a1) >> 2));
          BOOL v20 = v25-- <= 2;
          if (v20) {
            return v13;
          }
        }
        *(_DWORD *)(v28 + 8) = v41;
        *(void *)uint64_t v28 = v40;
        BOOL v20 = v25-- <= 2;
      }
      while (!v20);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_BBA314(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (unint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        uint64_t v7 = *(unint64_t *)((char *)v6 + 12);
        unsigned int v8 = *((_DWORD *)v6 + 1);
        if (v8 < HIDWORD(v7)
          || (v8 <= HIDWORD(v7) ? (BOOL v9 = *(_DWORD *)v6 >= v7) : (BOOL v9 = 1),
              !v9
           || (unint64_t v10 = HIDWORD(*v6), HIDWORD(v7) >= v10)
           && (v7 < *v6 ? (BOOL v11 = HIDWORD(v7) > v10) : (BOOL v11 = 1),
               v11 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v6 + 5))))
        {
          uint64_t v6 = (unint64_t *)((char *)v6 + 12);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unint64_t v12 = *a4;
      unsigned int v13 = *((_DWORD *)v6 + 1);
      unint64_t v14 = HIDWORD(*a4);
      if (v13 >= v14 && (v13 > v14 || *(_DWORD *)v6 >= v12))
      {
        unint64_t v16 = HIDWORD(*v6);
        if (v14 >= v16)
        {
          unsigned int v17 = *((_DWORD *)a4 + 2);
          BOOL v18 = v12 >= *v6 || v14 > v16;
          if (v18 && *((_DWORD *)v6 + 2) < v17) {
            return result;
          }
        }
        else
        {
          unsigned int v17 = *((_DWORD *)a4 + 2);
        }
        unint64_t v19 = *v6;
        *((_DWORD *)a4 + 2) = *((_DWORD *)v6 + 2);
        *a4 = v19;
        if (v4 >= v5)
        {
          while (1)
          {
            unsigned int v21 = v6;
            uint64_t v22 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            uint64_t v6 = (unint64_t *)(result + 12 * v5);
            uint64_t v23 = v22 + 2;
            if (v23 < a3)
            {
              uint64_t v24 = *(unint64_t *)((char *)v6 + 12);
              unsigned int v25 = *((_DWORD *)v6 + 1);
              if (v25 < HIDWORD(v24)
                || (v25 <= HIDWORD(v24) ? (BOOL v26 = *(_DWORD *)v6 >= v24) : (BOOL v26 = 1),
                    !v26
                 || (unint64_t v27 = HIDWORD(*v6), HIDWORD(v24) >= v27)
                 && (v24 < *v6 ? (BOOL v28 = HIDWORD(v24) > v27) : (BOOL v28 = 1),
                     v28 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v6 + 5))))
              {
                uint64_t v6 = (unint64_t *)((char *)v6 + 12);
                uint64_t v5 = v23;
              }
            }
            unsigned int v29 = *((_DWORD *)v6 + 1);
            if (v29 < v14) {
              break;
            }
            if (v29 <= v14 && *(_DWORD *)v6 < v12) {
              break;
            }
            unint64_t v31 = HIDWORD(*v6);
            if (v14 >= v31)
            {
              BOOL v32 = v12 >= *v6 || v14 > v31;
              if (v32 && *((_DWORD *)v6 + 2) < v17) {
                break;
              }
            }
            unint64_t v20 = *v6;
            *((_DWORD *)v21 + 2) = *((_DWORD *)v6 + 2);
            unint64_t *v21 = v20;
            if (v4 < v5) {
              goto LABEL_64;
            }
          }
          uint64_t v6 = v21;
        }
LABEL_64:
        *uint64_t v6 = v12;
        *((_DWORD *)v6 + 2) = v17;
      }
    }
  }
  return result;
}

uint64_t sub_BBA520(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (uint64_t *)(result + 12 * (v4 >> 1));
    uint64_t v7 = *(void *)(a2 - 12);
    unsigned int v8 = *((_DWORD *)v6 + 1);
    if (v8 < HIDWORD(v7)
      || (v8 <= HIDWORD(v7) ? (BOOL v9 = *(_DWORD *)v6 >= v7) : (BOOL v9 = 1),
          !v9
       || (unint64_t v10 = HIDWORD(*v6), HIDWORD(v7) >= v10)
       && (v7 < *v6 ? (BOOL v11 = HIDWORD(v7) > v10) : (BOOL v11 = 1),
           v11 && *((_DWORD *)v6 + 2) < *(_DWORD *)(a2 - 4))))
    {
      unsigned int v12 = *(_DWORD *)(a2 - 4);
      int v13 = *((_DWORD *)v6 + 2);
      *(void *)(a2 - 12) = *v6;
      *(_DWORD *)(a2 - 4) = v13;
      if (v4 >= 2)
      {
        while (1)
        {
          int v15 = v6;
          unint64_t v16 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          uint64_t v6 = (uint64_t *)(result + 12 * v5);
          unsigned int v17 = *((_DWORD *)v6 + 1);
          if (v17 >= HIDWORD(v7) && (v17 > HIDWORD(v7) || *(_DWORD *)v6 >= v7))
          {
            unint64_t v19 = HIDWORD(*v6);
            if (HIDWORD(v7) < v19) {
              break;
            }
            BOOL v20 = v7 >= *v6 || HIDWORD(v7) > v19;
            if (!v20 || *((_DWORD *)v6 + 2) >= v12) {
              break;
            }
          }
          uint64_t v14 = *v6;
          *((_DWORD *)v15 + 2) = *((_DWORD *)v6 + 2);
          *int v15 = v14;
          if (v16 <= 1) {
            goto LABEL_32;
          }
        }
        uint64_t v6 = v15;
      }
LABEL_32:
      *uint64_t v6 = v7;
      *((_DWORD *)v6 + 2) = v12;
    }
  }
  return result;
}

void sub_BBA628(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    BOOL v11 = (__n128 *)((char *)a2 - 24);
    unsigned int v12 = a2 - 3;
    int v13 = &a2[-5].n128_i8[8];
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 3);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (a2[-1].n128_f64[1] > *(double *)(v14 + 16))
                {
                  unint64_t v201 = *(void *)(v14 + 16);
                  __n128 v173 = *(__n128 *)v14;
                  long long v91 = *(long long *)((char *)&a2[-2] + 8);
                  *(void *)(v14 + 16) = a2[-1].n128_u64[1];
                  *(_OWORD *)unint64_t v14 = v91;
                  a2[-1].n128_u64[1] = v201;
                  *(__n128 *)((char *)a2 - 24) = v173;
                }
                return;
              case 3:
                char v92 = (__n128 *)(v14 + 24);
                double v93 = *(double *)(v14 + 40);
                double v94 = a2[-1].n128_f64[1];
                if (v93 <= *(double *)(v14 + 16))
                {
                  if (v94 > v93)
                  {
                    __n128 v142 = *v92;
                    unint64_t v143 = *(void *)(v14 + 40);
                    unint64_t v144 = a2[-1].n128_u64[1];
                    *char v92 = *v11;
                    *(void *)(v14 + 40) = v144;
                    a2[-1].n128_u64[1] = v143;
                    __n128 *v11 = v142;
                    if (*(double *)(v14 + 40) > *(double *)(v14 + 16))
                    {
                      uint64_t v205 = *(void *)(v14 + 16);
                      __n128 v179 = *(__n128 *)v14;
                      *(__n128 *)unint64_t v14 = *v92;
                      *(void *)(v14 + 16) = *(void *)(v14 + 40);
                      *char v92 = v179;
                      *(void *)(v14 + 40) = v205;
                    }
                  }
                }
                else
                {
                  if (v94 <= v93)
                  {
                    uint64_t v206 = *(void *)(v14 + 16);
                    __n128 v181 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v92;
                    *(void *)(v14 + 16) = *(void *)(v14 + 40);
                    *char v92 = v181;
                    *(void *)(v14 + 40) = v206;
                    if (a2[-1].n128_f64[1] <= *(double *)(v14 + 40)) {
                      return;
                    }
                    __n128 v96 = *v92;
                    unint64_t v149 = *(void *)(v14 + 40);
                    unint64_t v150 = a2[-1].n128_u64[1];
                    *char v92 = *v11;
                    *(void *)(v14 + 40) = v150;
                    a2[-1].n128_u64[1] = v149;
                  }
                  else
                  {
                    unint64_t v202 = *(void *)(v14 + 16);
                    __n128 v174 = *(__n128 *)v14;
                    __n128 v95 = *v11;
                    *(void *)(v14 + 16) = a2[-1].n128_u64[1];
                    *(__n128 *)unint64_t v14 = v95;
                    __n128 v96 = v174;
                    a2[-1].n128_u64[1] = v202;
                  }
                  __n128 *v11 = v96;
                }
                break;
              case 4:
                sub_BBBA9C((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)((char *)a2 - 24), a5);
                return;
              case 5:
                int v97 = (__n128 *)(v14 + 24);
                uint64_t v98 = (__n128 *)(v14 + 48);
                uint64_t v99 = (__n128 *)(v14 + 72);
                sub_BBBA9C((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)(v14 + 72), a5);
                if (a2[-1].n128_f64[1] > *(double *)(v14 + 88))
                {
                  __n128 v100 = *v99;
                  unint64_t v101 = *(void *)(v14 + 88);
                  unint64_t v102 = a2[-1].n128_u64[1];
                  *uint64_t v99 = *(__n128 *)((char *)a2 - 24);
                  *(void *)(v14 + 88) = v102;
                  a2[-1].n128_u64[1] = v101;
                  *(__n128 *)((char *)a2 - 24) = v100;
                  if (*(double *)(v14 + 88) > *(double *)(v14 + 64))
                  {
                    uint64_t v103 = *(void *)(v14 + 64);
                    __n128 v104 = *v98;
                    *uint64_t v98 = *v99;
                    *(void *)(v14 + 64) = *(void *)(v14 + 88);
                    *uint64_t v99 = v104;
                    *(void *)(v14 + 88) = v103;
                    if (*(double *)(v14 + 64) > *(double *)(v14 + 40))
                    {
                      uint64_t v105 = *(void *)(v14 + 40);
                      __n128 v106 = *v97;
                      *int v97 = *v98;
                      *(void *)(v14 + 40) = *(void *)(v14 + 64);
                      *uint64_t v98 = v106;
                      *(void *)(v14 + 64) = v105;
                      if (*(double *)(v14 + 40) > *(double *)(v14 + 16))
                      {
                        uint64_t v203 = *(void *)(v14 + 16);
                        __n128 v175 = *(__n128 *)v14;
                        *(__n128 *)unint64_t v14 = *v97;
                        *(void *)(v14 + 16) = *(void *)(v14 + 40);
                        *int v97 = v175;
                        *(void *)(v14 + 40) = v203;
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v15 <= 575)
          {
            long long v107 = (__n128 *)(v14 + 24);
            BOOL v109 = (__n128 *)v14 == a2 || v107 == a2;
            if (a4)
            {
              if (!v109)
              {
                uint64_t v110 = 0;
                uint64_t v111 = (__n128 *)v14;
                do
                {
                  double v113 = v111[2].n128_f64[1];
                  double v114 = v111[1].n128_f64[0];
                  uint64_t v111 = v107;
                  if (v113 > v114)
                  {
                    __n128 v176 = *v107;
                    uint64_t v115 = v110;
                    do
                    {
                      uint64_t v116 = v14 + v115;
                      *(_OWORD *)(v116 + 24) = *(_OWORD *)(v14 + v115);
                      *(void *)(v116 + 40) = *(void *)(v14 + v115 + 16);
                      if (!v115)
                      {
                        uint64_t v112 = v14;
                        goto LABEL_122;
                      }
                      v115 -= 24;
                    }
                    while (v113 > *(double *)(v116 - 8));
                    uint64_t v112 = v14 + v115 + 24;
LABEL_122:
                    *(__n128 *)uint64_t v112 = v176;
                    *(double *)(v112 + 16) = v113;
                  }
                  long long v107 = (__n128 *)((char *)v111 + 24);
                  v110 += 24;
                }
                while (&v111[1].n128_i8[8] != (__int8 *)a2);
              }
            }
            else if (!v109)
            {
              do
              {
                double v145 = *(double *)(a1 + 40);
                double v146 = *(double *)(a1 + 16);
                a1 = (unint64_t)v107;
                if (v145 > v146)
                {
                  __n128 v180 = *v107;
                  long long v147 = v107;
                  do
                  {
                    *long long v147 = *(__n128 *)((char *)v147 - 24);
                    v147[1].n128_u64[0] = v147[-1].n128_u64[1];
                    double v148 = v147[-2].n128_f64[0];
                    long long v147 = (__n128 *)((char *)v147 - 24);
                  }
                  while (v145 > v148);
                  *long long v147 = v180;
                  v147[1].n128_f64[0] = v145;
                }
                long long v107 = (__n128 *)((char *)v107 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v14 != a2)
            {
              int64_t v117 = (unint64_t)(v16 - 2) >> 1;
              int64_t v118 = v117;
              do
              {
                if (v117 >= v118)
                {
                  uint64_t v120 = (2 * v118) | 1;
                  unint64_t v121 = v14 + 24 * v120;
                  if (2 * v118 + 2 < v16 && *(double *)(v121 + 16) > *(double *)(v121 + 40))
                  {
                    v121 += 24;
                    uint64_t v120 = 2 * v118 + 2;
                  }
                  unint64_t v122 = v14 + 24 * v118;
                  double v123 = *(double *)(v122 + 16);
                  if (*(double *)(v121 + 16) <= v123)
                  {
                    long long v177 = *(_OWORD *)v122;
                    do
                    {
                      unint64_t v124 = v122;
                      unint64_t v122 = v121;
                      long long v125 = *(_OWORD *)v121;
                      *(void *)(v124 + 16) = *(void *)(v121 + 16);
                      *(_OWORD *)unint64_t v124 = v125;
                      if (v117 < v120) {
                        break;
                      }
                      uint64_t v126 = 2 * v120;
                      uint64_t v120 = (2 * v120) | 1;
                      unint64_t v121 = v14 + 24 * v120;
                      uint64_t v127 = v126 + 2;
                      if (v127 < v16 && *(double *)(v121 + 16) > *(double *)(v121 + 40))
                      {
                        v121 += 24;
                        uint64_t v120 = v127;
                      }
                    }
                    while (*(double *)(v121 + 16) <= v123);
                    *(_OWORD *)unint64_t v122 = v177;
                    *(double *)(v122 + 16) = v123;
                  }
                }
                BOOL v119 = v118-- <= 0;
              }
              while (!v119);
              int64_t v128 = v15 / 0x18uLL;
              do
              {
                uint64_t v129 = 0;
                unint64_t v204 = *(void *)(v14 + 16);
                __n128 v178 = *(__n128 *)v14;
                int v130 = (__n128 *)v14;
                do
                {
                  int v132 = v130;
                  int v130 = (__n128 *)((char *)v130 + 24 * v129 + 24);
                  uint64_t v133 = 2 * v129;
                  uint64_t v129 = (2 * v129) | 1;
                  int64_t v134 = v133 + 2;
                  if (v134 < v128 && v130[1].n128_f64[0] > v130[2].n128_f64[1])
                  {
                    int v130 = (__n128 *)((char *)v130 + 24);
                    uint64_t v129 = v134;
                  }
                  __n128 v131 = *v130;
                  v132[1].n128_u64[0] = v130[1].n128_u64[0];
                  __n128 *v132 = v131;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v130 == a2)
                {
                  v130[1].n128_u64[0] = v204;
                  __n128 *v130 = v178;
                }
                else
                {
                  __n128 v135 = *a2;
                  v130[1].n128_u64[0] = a2[1].n128_u64[0];
                  __n128 *v130 = v135;
                  a2[1].n128_u64[0] = v204;
                  *a2 = v178;
                  uint64_t v136 = (uint64_t)&v130[1].n128_i64[1] - v14;
                  if (v136 >= 25)
                  {
                    unint64_t v137 = (v136 / 0x18uLL - 2) >> 1;
                    unint64_t v138 = v14 + 24 * v137;
                    double v139 = v130[1].n128_f64[0];
                    if (*(double *)(v138 + 16) > v139)
                    {
                      __n128 v153 = *v130;
                      do
                      {
                        char v140 = v130;
                        int v130 = (__n128 *)v138;
                        __n128 v141 = *(__n128 *)v138;
                        v140[1].n128_u64[0] = *(void *)(v138 + 16);
                        *char v140 = v141;
                        if (!v137) {
                          break;
                        }
                        unint64_t v137 = (v137 - 1) >> 1;
                        unint64_t v138 = v14 + 24 * v137;
                      }
                      while (*(double *)(v138 + 16) > v139);
                      __n128 *v130 = v153;
                      v130[1].n128_f64[0] = v139;
                    }
                  }
                }
                BOOL v119 = v128-- <= 2;
              }
              while (!v119);
            }
            return;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          BOOL v18 = (__n128 *)(v14 + 24 * ((unint64_t)v16 >> 1));
          double v19 = a2[-1].n128_f64[1];
          if ((unint64_t)v15 >= 0xC01) {
            break;
          }
          double v22 = *(double *)(v14 + 16);
          if (v22 > v18[1].n128_f64[0])
          {
            if (v19 <= v22)
            {
              unint64_t v190 = v18[1].n128_u64[0];
              __n128 v162 = *v18;
              a5 = *(__n128 *)v14;
              v18[1].n128_u64[0] = *(void *)(v14 + 16);
              *BOOL v18 = a5;
              a5.n128_u64[1] = v162.n128_u64[1];
              *(void *)(v14 + 16) = v190;
              *(__n128 *)unint64_t v14 = v162;
              if (a2[-1].n128_f64[1] <= *(double *)(v14 + 16)) {
                goto LABEL_32;
              }
              unint64_t v183 = *(void *)(v14 + 16);
              __n128 v155 = *(__n128 *)v14;
              __n128 v40 = *v11;
              *(void *)(v14 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)unint64_t v14 = v40;
            }
            else
            {
              unint64_t v183 = v18[1].n128_u64[0];
              __n128 v155 = *v18;
              __n128 v23 = *v11;
              v18[1].n128_u64[0] = a2[-1].n128_u64[1];
              *BOOL v18 = v23;
            }
            a5.n128_u64[1] = v155.n128_u64[1];
            a2[-1].n128_u64[1] = v183;
            __n128 *v11 = v155;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v19 <= v22) {
            goto LABEL_32;
          }
          unint64_t v186 = *(void *)(v14 + 16);
          __n128 v158 = *(__n128 *)v14;
          a5 = *v11;
          *(void *)(v14 + 16) = a2[-1].n128_u64[1];
          *(__n128 *)unint64_t v14 = a5;
          a5.n128_u64[1] = v158.n128_u64[1];
          a2[-1].n128_u64[1] = v186;
          __n128 *v11 = v158;
          if (*(double *)(v14 + 16) <= v18[1].n128_f64[0]) {
            goto LABEL_32;
          }
          unint64_t v187 = v18[1].n128_u64[0];
          __n128 v159 = *v18;
          a5 = *(__n128 *)v14;
          v18[1].n128_u64[0] = *(void *)(v14 + 16);
          *BOOL v18 = a5;
          a5.n128_u64[1] = v159.n128_u64[1];
          *(void *)(v14 + 16) = v187;
          *(__n128 *)unint64_t v14 = v159;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          a5.n128_u64[0] = *(void *)(v14 + 16);
          if (*(double *)(v14 - 8) > a5.n128_f64[0]) {
            goto LABEL_57;
          }
          a5 = *(__n128 *)v14;
          __n128 v152 = *(__n128 *)v14;
          a5.n128_u64[0] = *(void *)(v14 + 16);
          if (a5.n128_f64[0] > a2[-1].n128_f64[1])
          {
            unint64_t v79 = v14;
            do
            {
              unint64_t v14 = v79 + 24;
              double v80 = *(double *)(v79 + 40);
              v79 += 24;
            }
            while (a5.n128_f64[0] <= v80);
          }
          else
          {
            unint64_t v81 = v14 + 24;
            do
            {
              unint64_t v14 = v81;
              if (v81 >= (unint64_t)a2) {
                break;
              }
              double v82 = *(double *)(v81 + 16);
              v81 += 24;
            }
            while (a5.n128_f64[0] <= v82);
          }
          __int16 v83 = a2;
          if (v14 < (unint64_t)a2)
          {
            uint64_t v84 = a2;
            do
            {
              __int16 v83 = (__n128 *)((char *)v84 - 24);
              double v85 = v84[-1].n128_f64[1];
              uint64_t v84 = (__n128 *)((char *)v84 - 24);
            }
            while (a5.n128_f64[0] > v85);
          }
          while (v14 < (unint64_t)v83)
          {
            unint64_t v200 = *(void *)(v14 + 16);
            __n128 v172 = *(__n128 *)v14;
            __n128 v86 = *v83;
            *(void *)(v14 + 16) = v83[1].n128_u64[0];
            *(__n128 *)unint64_t v14 = v86;
            v83[1].n128_u64[0] = v200;
            *__int16 v83 = v172;
            do
            {
              double v87 = *(double *)(v14 + 40);
              v14 += 24;
            }
            while (a5.n128_f64[0] <= v87);
            do
            {
              double v88 = v83[-1].n128_f64[1];
              __int16 v83 = (__n128 *)((char *)v83 - 24);
            }
            while (a5.n128_f64[0] > v88);
          }
          long long v89 = (__n128 *)(v14 - 24);
          BOOL v5 = v14 - 24 >= a1;
          BOOL v6 = v14 - 24 == a1;
          if (v14 - 24 != a1)
          {
            __n128 v90 = *v89;
            *(void *)(a1 + 16) = *(void *)(v14 - 8);
            *(__n128 *)a1 = v90;
          }
          a4 = 0;
          *long long v89 = v152;
          *(void *)(v14 - 8) = a5.n128_u64[0];
        }
        double v20 = v18[1].n128_f64[0];
        if (v20 <= *(double *)(v14 + 16))
        {
          if (v19 > v20)
          {
            unint64_t v184 = v18[1].n128_u64[0];
            __n128 v156 = *v18;
            __n128 v24 = *v11;
            v18[1].n128_u64[0] = a2[-1].n128_u64[1];
            *BOOL v18 = v24;
            a2[-1].n128_u64[1] = v184;
            __n128 *v11 = v156;
            if (v18[1].n128_f64[0] > *(double *)(v14 + 16))
            {
              unint64_t v185 = *(void *)(v14 + 16);
              __n128 v157 = *(__n128 *)v14;
              __n128 v25 = *v18;
              *(void *)(v14 + 16) = v18[1].n128_u64[0];
              *(__n128 *)unint64_t v14 = v25;
              v18[1].n128_u64[0] = v185;
              *BOOL v18 = v157;
            }
          }
        }
        else
        {
          if (v19 <= v20)
          {
            unint64_t v188 = *(void *)(v14 + 16);
            __n128 v160 = *(__n128 *)v14;
            __n128 v26 = *v18;
            *(void *)(v14 + 16) = v18[1].n128_u64[0];
            *(__n128 *)unint64_t v14 = v26;
            v18[1].n128_u64[0] = v188;
            *BOOL v18 = v160;
            if (a2[-1].n128_f64[1] <= v18[1].n128_f64[0]) {
              goto LABEL_23;
            }
            unint64_t v182 = v18[1].n128_u64[0];
            __n128 v154 = *v18;
            __n128 v27 = *v11;
            v18[1].n128_u64[0] = a2[-1].n128_u64[1];
            *BOOL v18 = v27;
          }
          else
          {
            unint64_t v182 = *(void *)(v14 + 16);
            __n128 v154 = *(__n128 *)v14;
            __n128 v21 = *v11;
            *(void *)(v14 + 16) = a2[-1].n128_u64[1];
            *(__n128 *)unint64_t v14 = v21;
          }
          a2[-1].n128_u64[1] = v182;
          __n128 *v11 = v154;
        }
LABEL_23:
        BOOL v28 = (__n128 *)(v14 + 24);
        unint64_t v29 = v14 + 24 * v17;
        uint64_t v30 = (__n128 *)(v29 - 24);
        double v31 = *(double *)(v29 - 8);
        double v32 = a2[-2].n128_f64[0];
        if (v31 <= *(double *)(v14 + 40))
        {
          if (v32 > v31)
          {
            unint64_t v189 = *(void *)(v29 - 8);
            __n128 v161 = *v30;
            __n128 v36 = *v12;
            *(void *)(v29 - 8) = a2[-2].n128_u64[0];
            __n128 *v30 = v36;
            a2[-2].n128_u64[0] = v189;
            *unsigned int v12 = v161;
            if (*(double *)(v29 - 8) > *(double *)(v14 + 40))
            {
              __n128 v37 = *v28;
              unint64_t v38 = *(void *)(v14 + 40);
              uint64_t v39 = v30[1].n128_i64[0];
              __n128 *v28 = *v30;
              *(void *)(v14 + 40) = v39;
              v30[1].n128_u64[0] = v38;
              __n128 *v30 = v37;
            }
          }
        }
        else
        {
          if (v32 <= v31)
          {
            __n128 v41 = *v28;
            unint64_t v42 = *(void *)(v14 + 40);
            uint64_t v43 = v30[1].n128_i64[0];
            __n128 *v28 = *v30;
            *(void *)(v14 + 40) = v43;
            v30[1].n128_u64[0] = v42;
            __n128 *v30 = v41;
            if (a2[-2].n128_f64[0] <= v30[1].n128_f64[0]) {
              goto LABEL_37;
            }
            unint64_t v191 = v30[1].n128_u64[0];
            __n128 v163 = *v30;
            __n128 v44 = *v12;
            v30[1].n128_u64[0] = a2[-2].n128_u64[0];
            __n128 *v30 = v44;
            __n128 v33 = v163;
            a2[-2].n128_u64[0] = v191;
          }
          else
          {
            __n128 v33 = *v28;
            unint64_t v34 = *(void *)(v14 + 40);
            unint64_t v35 = a2[-2].n128_u64[0];
            __n128 *v28 = *v12;
            *(void *)(v14 + 40) = v35;
            a2[-2].n128_u64[0] = v34;
          }
          *unsigned int v12 = v33;
        }
LABEL_37:
        uint64_t v45 = (__n128 *)(v14 + 48);
        unint64_t v46 = v14 + 24 * v17;
        unsigned int v47 = (__n128 *)(v46 + 24);
        double v48 = *(double *)(v46 + 40);
        double v49 = a2[-4].n128_f64[1];
        if (v48 <= *(double *)(v14 + 64))
        {
          if (v49 > v48)
          {
            unint64_t v192 = *(void *)(v46 + 40);
            __n128 v164 = *v47;
            __n128 v53 = *(__n128 *)v13;
            *(void *)(v46 + 40) = a2[-4].n128_u64[1];
            __n128 *v47 = v53;
            a2[-4].n128_u64[1] = v192;
            *(__n128 *)int v13 = v164;
            if (*(double *)(v46 + 40) > *(double *)(v14 + 64))
            {
              __n128 v54 = *v45;
              unint64_t v55 = *(void *)(v14 + 64);
              uint64_t v56 = v47[1].n128_i64[0];
              __n128 *v45 = *v47;
              *(void *)(v14 + 64) = v56;
              v47[1].n128_u64[0] = v55;
              __n128 *v47 = v54;
            }
          }
        }
        else
        {
          if (v49 <= v48)
          {
            __n128 v57 = *v45;
            unint64_t v58 = *(void *)(v14 + 64);
            uint64_t v59 = v47[1].n128_i64[0];
            __n128 *v45 = *v47;
            *(void *)(v14 + 64) = v59;
            v47[1].n128_u64[0] = v58;
            __n128 *v47 = v57;
            if (a2[-4].n128_f64[1] <= v47[1].n128_f64[0]) {
              goto LABEL_46;
            }
            unint64_t v193 = v47[1].n128_u64[0];
            __n128 v165 = *v47;
            __n128 v60 = *(__n128 *)v13;
            v47[1].n128_u64[0] = a2[-4].n128_u64[1];
            __n128 *v47 = v60;
            __n128 v50 = v165;
            a2[-4].n128_u64[1] = v193;
          }
          else
          {
            __n128 v50 = *v45;
            unint64_t v51 = *(void *)(v14 + 64);
            unint64_t v52 = a2[-4].n128_u64[1];
            __n128 *v45 = *(__n128 *)v13;
            *(void *)(v14 + 64) = v52;
            a2[-4].n128_u64[1] = v51;
          }
          *(__n128 *)int v13 = v50;
        }
LABEL_46:
        double v61 = v18[1].n128_f64[0];
        double v62 = v47[1].n128_f64[0];
        if (v61 <= v30[1].n128_f64[0])
        {
          if (v62 > v61)
          {
            unint64_t v195 = v18[1].n128_u64[0];
            __n128 v167 = *v18;
            *BOOL v18 = *v47;
            v18[1].n128_u64[0] = v47[1].n128_u64[0];
            v47[1].n128_u64[0] = v195;
            __n128 *v47 = v167;
            if (v18[1].n128_f64[0] > v30[1].n128_f64[0])
            {
              unint64_t v196 = v30[1].n128_u64[0];
              __n128 v168 = *v30;
              __n128 *v30 = *v18;
              v30[1].n128_u64[0] = v18[1].n128_u64[0];
              v18[1].n128_u64[0] = v196;
              *BOOL v18 = v168;
            }
          }
        }
        else
        {
          if (v62 <= v61)
          {
            unint64_t v197 = v30[1].n128_u64[0];
            __n128 v169 = *v30;
            __n128 *v30 = *v18;
            v30[1].n128_u64[0] = v18[1].n128_u64[0];
            v18[1].n128_u64[0] = v197;
            *BOOL v18 = v169;
            if (v47[1].n128_f64[0] <= v18[1].n128_f64[0]) {
              goto LABEL_55;
            }
            unint64_t v194 = v18[1].n128_u64[0];
            __n128 v166 = *v18;
            *BOOL v18 = *v47;
            v18[1].n128_u64[0] = v47[1].n128_u64[0];
          }
          else
          {
            unint64_t v194 = v30[1].n128_u64[0];
            __n128 v166 = *v30;
            __n128 *v30 = *v47;
            v30[1].n128_u64[0] = v47[1].n128_u64[0];
          }
          v47[1].n128_u64[0] = v194;
          __n128 *v47 = v166;
        }
LABEL_55:
        unint64_t v198 = *(void *)(v14 + 16);
        __n128 v170 = *(__n128 *)v14;
        a5 = *v18;
        *(void *)(v14 + 16) = v18[1].n128_u64[0];
        *(__n128 *)unint64_t v14 = a5;
        a5.n128_u64[1] = v170.n128_u64[1];
        v18[1].n128_u64[0] = v198;
        *BOOL v18 = v170;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        a5.n128_u64[0] = *(void *)(v14 + 16);
LABEL_57:
        uint64_t v63 = 0;
        __n128 v151 = *(__n128 *)v14;
        do
        {
          double v64 = *(double *)(v14 + v63 + 40);
          v63 += 24;
        }
        while (v64 > a5.n128_f64[0]);
        unint64_t v65 = v14 + v63;
        BOOL v66 = a2;
        if (v63 == 24)
        {
          unsigned int v69 = a2;
          while (v65 < (unint64_t)v69)
          {
            unsigned int v67 = (__n128 *)((char *)v69 - 24);
            double v70 = v69[-1].n128_f64[1];
            unsigned int v69 = (__n128 *)((char *)v69 - 24);
            if (v70 > a5.n128_f64[0]) {
              goto LABEL_65;
            }
          }
          unsigned int v67 = v69;
          unint64_t v14 = v65;
        }
        else
        {
          do
          {
            unsigned int v67 = (__n128 *)((char *)v66 - 24);
            double v68 = v66[-1].n128_f64[1];
            BOOL v66 = (__n128 *)((char *)v66 - 24);
          }
          while (v68 <= a5.n128_f64[0]);
LABEL_65:
          unint64_t v14 = v65;
          if (v65 < (unint64_t)v67)
          {
            unint64_t v71 = (unint64_t)v67;
            do
            {
              uint64_t v199 = *(void *)(v14 + 16);
              __n128 v171 = *(__n128 *)v14;
              __n128 v72 = *(__n128 *)v71;
              *(void *)(v14 + 16) = *(void *)(v71 + 16);
              *(__n128 *)unint64_t v14 = v72;
              *(void *)(v71 + 16) = v199;
              *(__n128 *)unint64_t v71 = v171;
              do
              {
                double v73 = *(double *)(v14 + 40);
                v14 += 24;
              }
              while (v73 > a5.n128_f64[0]);
              do
              {
                double v74 = *(double *)(v71 - 8);
                v71 -= 24;
              }
              while (v74 <= a5.n128_f64[0]);
            }
            while (v14 < v71);
          }
        }
        uint64_t v75 = (__n128 *)(v14 - 24);
        if (v14 - 24 != a1)
        {
          __n128 v76 = *v75;
          *(void *)(a1 + 16) = *(void *)(v14 - 8);
          *(__n128 *)a1 = v76;
        }
        __n128 *v75 = v151;
        *(void *)(v14 - 8) = a5.n128_u64[0];
        if (v65 >= (unint64_t)v67) {
          break;
        }
LABEL_76:
        sub_BBA628(a1, v14 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v77 = sub_BBB5B0(a1, (__n128 *)(v14 - 24), a5);
      if (sub_BBB5B0(v14, a2, v78)) {
        break;
      }
      if (!v77) {
        goto LABEL_76;
      }
    }
    a2 = (__n128 *)(v14 - 24);
    if (!v77) {
      continue;
    }
    break;
  }
}

BOOL sub_BBB5B0(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (a2[-1].n128_f64[1] > *(double *)(a1 + 16))
      {
        unint64_t v7 = *(void *)(a1 + 16);
        __n128 v8 = *(__n128 *)a1;
        uint64_t v9 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(void *)(a1 + 16) = v9;
        *(__n128 *)((char *)a2 - 24) = v8;
        a2[-1].n128_u64[1] = v7;
      }
      return result;
    case 3uLL:
      unint64_t v10 = (__n128 *)(a1 + 24);
      BOOL v11 = (__n128 *)((char *)a2 - 24);
      double v12 = *(double *)(a1 + 40);
      double v13 = a2[-1].n128_f64[1];
      if (v12 <= *(double *)(a1 + 16))
      {
        if (v13 > v12)
        {
          unint64_t v36 = *(void *)(a1 + 40);
          __n128 v37 = *v10;
          uint64_t v38 = a2[-1].n128_i64[1];
          __n128 *v10 = *v11;
          *(void *)(a1 + 40) = v38;
          __n128 *v11 = v37;
          a2[-1].n128_u64[1] = v36;
          if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
          {
            uint64_t v39 = *(void *)(a1 + 16);
            __n128 v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            __n128 *v10 = v40;
            *(void *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 <= v12)
      {
        uint64_t v45 = *(void *)(a1 + 16);
        __n128 v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        __n128 *v10 = v46;
        *(void *)(a1 + 40) = v45;
        if (a2[-1].n128_f64[1] > *(double *)(a1 + 40))
        {
          unint64_t v47 = *(void *)(a1 + 40);
          __n128 v48 = *v10;
          uint64_t v49 = a2[-1].n128_i64[1];
          __n128 *v10 = *v11;
          *(void *)(a1 + 40) = v49;
          __n128 *v11 = v48;
          a2[-1].n128_u64[1] = v47;
        }
      }
      else
      {
        unint64_t v14 = *(void *)(a1 + 16);
        __n128 v15 = *(__n128 *)a1;
        uint64_t v16 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *v11;
        *(void *)(a1 + 16) = v16;
        __n128 *v11 = v15;
        a2[-1].n128_u64[1] = v14;
      }
      return result;
    case 4uLL:
      sub_BBBA9C((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    case 5uLL:
      __n128 v24 = (__n128 *)(a1 + 24);
      __n128 v25 = (__n128 *)(a1 + 48);
      __n128 v26 = (__n128 *)(a1 + 72);
      sub_BBBA9C((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (a2[-1].n128_f64[1] > *(double *)(a1 + 88))
      {
        unint64_t v27 = *(void *)(a1 + 88);
        __n128 v28 = *v26;
        uint64_t v29 = a2[-1].n128_i64[1];
        *__n128 v26 = *(__n128 *)((char *)a2 - 24);
        *(void *)(a1 + 88) = v29;
        *(__n128 *)((char *)a2 - 24) = v28;
        a2[-1].n128_u64[1] = v27;
        if (*(double *)(a1 + 88) > *(double *)(a1 + 64))
        {
          uint64_t v30 = *(void *)(a1 + 64);
          __n128 v31 = *v25;
          __n128 *v25 = *v26;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *__n128 v26 = v31;
          *(void *)(a1 + 88) = v30;
          if (*(double *)(a1 + 64) > *(double *)(a1 + 40))
          {
            uint64_t v32 = *(void *)(a1 + 40);
            __n128 v33 = *v24;
            *__n128 v24 = *v25;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            __n128 *v25 = v33;
            *(void *)(a1 + 64) = v32;
            if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
            {
              uint64_t v34 = *(void *)(a1 + 16);
              __n128 v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *__n128 v24 = v35;
              *(void *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v17 = (__n128 *)(a1 + 48);
      BOOL v18 = (__n128 *)(a1 + 24);
      double v19 = *(double *)(a1 + 40);
      double v20 = *(double *)(a1 + 16);
      double v21 = *(double *)(a1 + 64);
      if (v19 <= v20)
      {
        if (v21 > v19)
        {
          uint64_t v41 = *(void *)(a1 + 40);
          __n128 v42 = *v18;
          *BOOL v18 = *v17;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v17 = v42;
          *(void *)(a1 + 64) = v41;
          if (*(double *)(a1 + 40) > v20)
          {
            uint64_t v43 = *(void *)(a1 + 16);
            __n128 v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            *BOOL v18 = v44;
            *(void *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 <= v19)
      {
        uint64_t v50 = *(void *)(a1 + 16);
        __n128 v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        *BOOL v18 = v51;
        *(void *)(a1 + 40) = v50;
        if (v21 > *(double *)(a1 + 40))
        {
          uint64_t v52 = *(void *)(a1 + 40);
          __n128 v53 = *v18;
          *BOOL v18 = *v17;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *unint64_t v17 = v53;
          *(void *)(a1 + 64) = v52;
        }
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(void *)(a1 + 16) = *(void *)(a1 + 64);
        *unint64_t v17 = v23;
        *(void *)(a1 + 64) = v22;
      }
      __n128 v54 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v56 = 0;
      break;
  }
  while (1)
  {
    double v57 = v54[1].n128_f64[0];
    if (v57 > v17[1].n128_f64[0]) {
      break;
    }
LABEL_36:
    unint64_t v17 = v54;
    v55 += 24;
    __n128 v54 = (__n128 *)((char *)v54 + 24);
    if (v54 == a2) {
      return 1;
    }
  }
  __n128 v61 = *v54;
  uint64_t v58 = v55;
  do
  {
    uint64_t v59 = a1 + v58;
    *(_OWORD *)(v59 + 72) = *(_OWORD *)(a1 + v58 + 48);
    *(void *)(v59 + 88) = *(void *)(a1 + v58 + 64);
    if (v58 == -48)
    {
      *(__n128 *)a1 = v61;
      *(double *)(a1 + 16) = v57;
      if (++v56 != 8) {
        goto LABEL_36;
      }
      return &v54[1].n128_i8[8] == (__int8 *)a2;
    }
    v58 -= 24;
  }
  while (v57 > *(double *)(v59 + 40));
  uint64_t v60 = a1 + v58;
  *(__n128 *)(v60 + 72) = v61;
  *(double *)(v60 + 88) = v57;
  if (++v56 != 8) {
    goto LABEL_36;
  }
  return &v54[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_BBBA9C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5 = a2[1].n128_f64[0];
  double v6 = a3[1].n128_f64[0];
  if (v5 <= a1[1].n128_f64[0])
  {
    if (v6 > v5)
    {
      unint64_t v9 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if (a2[1].n128_f64[0] > a1[1].n128_f64[0])
      {
        unint64_t v11 = a1[1].n128_u64[0];
        BOOL result = *a1;
        unint64_t v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      unint64_t v7 = a1[1].n128_u64[0];
      BOOL result = *a1;
      unint64_t v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    unint64_t v13 = a1[1].n128_u64[0];
    BOOL result = *a1;
    unint64_t v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (a3[1].n128_f64[0] > a2[1].n128_f64[0])
    {
      unint64_t v7 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4[1].n128_u64[0];
  if (result.n128_f64[0] > a3[1].n128_f64[0])
  {
    unint64_t v16 = a3[1].n128_u64[0];
    BOOL result = *a3;
    unint64_t v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    result.n128_u64[0] = a3[1].n128_u64[0];
    if (result.n128_f64[0] > a2[1].n128_f64[0])
    {
      unint64_t v18 = a2[1].n128_u64[0];
      BOOL result = *a2;
      unint64_t v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      result.n128_u64[0] = a2[1].n128_u64[0];
      if (result.n128_f64[0] > a1[1].n128_f64[0])
      {
        unint64_t v20 = a1[1].n128_u64[0];
        BOOL result = *a1;
        unint64_t v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

unint64_t *sub_BBBC24(unint64_t *a1, void *a2)
{
  __n128 __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9280;
  strcpy((char *)__p, "max_num_fill_in_journeys_per_group");
  unint64_t v4 = sub_5C9BC(a2, (uint64_t)&__p);
  unint64_t v5 = v4;
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p);
    *a1 = v5;
  }
  else
  {
    *a1 = v4;
  }
  return a1;
}

void sub_BBBCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BBBCE0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    uint64_t v11 = v2;
    goto LABEL_26;
  }
  do
  {
    if (*(_DWORD *)(v3 + 12) != -1)
    {
      v18[0] = (_DWORD *)(v3 + 12);
      unint64_t v7 = sub_BBC11C((uint64_t)&v20, (unsigned int *)(v3 + 12), (uint64_t)&unk_20F06E0, v18);
      ++v7[3];
      v18[0] = (_DWORD *)(v3 + 12);
      if (sub_BBC11C((uint64_t)&v20, (unsigned int *)(v3 + 12), (uint64_t)&unk_20F06E0, v18)[3] > (unint64_t)(*a1 + 1)) {
        *(void *)(v3 + 192) = 0xBFF0000000000000;
      }
    }
    v3 += 296;
  }
  while (v3 != v2);
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v2 == v8)
  {
    uint64_t v2 = *(void *)(a2 + 16);
LABEL_25:
    uint64_t v11 = v8;
    goto LABEL_26;
  }
  uint64_t v9 = v2 + 296;
  while (*(double *)(v9 - 104) != -1.0)
  {
    BOOL v10 = v9 == v8;
    v9 += 296;
    if (v10) {
      goto LABEL_25;
    }
  }
  uint64_t v11 = v9 - 296;
  if (v9 - 296 != v8 && v9 != v8)
  {
    do
    {
      if (*(double *)(v9 + 192) != -1.0)
      {
        sub_B3E498(v11, (long long *)v9);
        v11 += 296;
      }
      v9 += 296;
    }
    while (v9 != v8);
    uint64_t v2 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
  }
  if (v11 == v8) {
    goto LABEL_25;
  }
  do
  {
    v8 -= 296;
    sub_9F5E28(a2 + 24, v8);
  }
  while (v8 != v11);
  *(void *)(a2 + 16) = v11;
  uint64_t v2 = *(void *)(a2 + 8);
LABEL_26:
  if (0x14C1BACF914C1BADLL * (v4 >> 3) > (unint64_t)(0x14C1BACF914C1BADLL * ((v11 - v2) >> 3)) && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"The number of fill-in journeys filter removed ", 46);
    unint64_t v12 = (void *)std::ostream::operator<<();
    sub_188FC78(v12, (uint64_t)" journeys", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete(v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v13 = (void *)v21;
  if ((void)v21)
  {
    do
    {
      unint64_t v14 = (void *)*v13;
      operator delete(v13);
      unint64_t v13 = v14;
    }
    while (v14);
  }
  unint64_t v15 = (void *)v20;
  *(void *)&long long v20 = 0;
  if (v15) {
    operator delete(v15);
  }
}

void sub_BBC094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_12168(v15 - 144);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_12168(v15 - 144);
  _Unwind_Resume(a1);
}

void sub_BBC108(_Unwind_Exception *a1)
{
  sub_12168(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t *sub_BBC11C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  void v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  __n128 v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *uint64_t v15 = *v26;
LABEL_59:
    *__n128 v26 = v15;
    goto LABEL_60;
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    __n128 v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_BBC414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_BBC428(unint64_t *a1, void *a2)
{
  char v7 = 16;
  strcpy(__p, "max_num_journeys");
  unint64_t v3 = sub_5C9BC(a2, (uint64_t)__p);
  unint64_t v4 = v3;
  if (v7 < 0)
  {
    operator delete(*(void **)__p);
    *a1 = v4;
  }
  else
  {
    *a1 = v3;
  }
  return a1;
}

void sub_BBC4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BBC4CC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = 0x14C1BACF914C1BADLL * ((v6 - v5) >> 3);
  if (v7 <= *a1)
  {
    uint64_t v8 = *(void *)(a3 + 16);
    unint64_t v9 = *(void *)(a2 + 24);
    if (v7 <= v9) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v8 = v5 + 296 * *a1;
  if (v6 != v8)
  {
    do
    {
      v6 -= 296;
      sub_9F5E28(a3 + 24, v6);
    }
    while (v6 != v8);
    uint64_t v5 = *(void *)(a3 + 8);
  }
  *(void *)(a3 + 16) = v8;
  unint64_t v9 = *(void *)(a2 + 24);
  if (0x14C1BACF914C1BADLL * ((v8 - v5) >> 3) > v9)
  {
LABEL_8:
    uint64_t v10 = v5 + 296 * v9;
    while (v8 != v10)
    {
      v8 -= 296;
      sub_9F5E28(a3 + 24, v8);
    }
    *(void *)(a3 + 16) = v10;
  }
}

uint64_t sub_BBC5DC(uint64_t a1, uint64_t a2, void *a3)
{
  __n128 __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91A0;
  strcpy((char *)__p, "filter_by_available_regions");
  BOOL v6 = sub_29D62C(a3, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_BBC674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BBC690(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
    return;
  }
  uint64_t v2 = *(char **)(a2 + 8);
  uint64_t v43 = *(char **)(a2 + 16);
  uint64_t v3 = (uint64_t)v43;
  uint64_t v40 = v43 - v2;
  for (unint64_t i = v2; v2 != v43; v2 += 296)
  {
    uint64_t v5 = *((void *)v2 + 25);
    uint64_t v4 = *((void *)v2 + 26);
    if (v5 != v4)
    {
      while (2)
      {
        uint64_t v6 = *(void *)v5;
        uint64_t v7 = *(void *)(v5 + 8);
        while (v6 != v7)
        {
          if (*(unsigned char *)(v5 + 24) == 1)
          {
            if (sub_BBCDD4(a1, v6)) {
              goto LABEL_38;
            }
          }
          else if (!*(unsigned char *)(v5 + 24))
          {
            uint64_t v8 = v4;
            unsigned int v10 = *(_DWORD *)(v6 + 52);
            int v9 = *(_DWORD *)(v6 + 56);
            uint64_t v47 = a1;
            __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v6;
            if (v10 <= v9 + 1) {
              unsigned int v11 = v9 + 1;
            }
            else {
              unsigned int v11 = v10;
            }
            if (v10 < v9 + 1)
            {
              while (!sub_BBCFC0(&v47, v10))
              {
                if (v11 == ++v10) {
                  goto LABEL_16;
                }
              }
              goto LABEL_38;
            }
LABEL_16:
            uint64_t v13 = *(void *)(v6 + 64);
            uint64_t v12 = *(void *)(v6 + 72);
            uint64_t v4 = v8;
            if (v13 != v12)
            {
              while (1)
              {
                unsigned int v16 = *(_DWORD *)(v13 + 48);
                int v17 = v16 <= v16 + 1 ? v16 + 1 : *(_DWORD *)(v13 + 48);
                uint64_t v47 = a1;
                __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v13;
                if (v16 != -1) {
                  break;
                }
LABEL_18:
                v13 += 60;
                if (v13 == v12) {
                  goto LABEL_17;
                }
              }
              while ((sub_BBD13C(&v47, v16) & 1) == 0)
              {
                if (v17 == ++v16) {
                  goto LABEL_18;
                }
              }
LABEL_38:
              if (v2 != v43)
              {
                if (v2 + 296 == v43)
                {
                  uint64_t v3 = (uint64_t)v2;
                }
                else
                {
                  uint64_t v3 = (uint64_t)v2;
                  uint64_t v20 = *((void *)v2 + 62);
                  uint64_t v21 = *((void *)v2 + 63);
                  unint64_t v22 = (long long *)(v2 + 296);
                  if (v20 != v21) {
                    goto LABEL_44;
                  }
                  while (1)
                  {
                    sub_B3E498(v3, v22);
                    v3 += 296;
LABEL_42:
                    if ((char *)v22 + 296 == v43) {
                      break;
                    }
                    uint64_t v20 = *((void *)v22 + 62);
                    uint64_t v21 = *((void *)v22 + 63);
                    unint64_t v22 = (long long *)((char *)v22 + 296);
                    if (v20 != v21)
                    {
LABEL_44:
                      while (2)
                      {
                        uint64_t v23 = *(void *)v20;
                        uint64_t v24 = *(void *)(v20 + 8);
                        while (v23 != v24)
                        {
                          if (*(unsigned char *)(v20 + 24) == 1)
                          {
                            if (sub_BBCDD4(a1, v23)) {
                              goto LABEL_42;
                            }
                          }
                          else if (!*(unsigned char *)(v20 + 24))
                          {
                            unsigned int v26 = *(_DWORD *)(v23 + 52);
                            int v25 = *(_DWORD *)(v23 + 56);
                            uint64_t v47 = a1;
                            __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v23;
                            if (v26 <= v25 + 1) {
                              unsigned int v27 = v25 + 1;
                            }
                            else {
                              unsigned int v27 = v26;
                            }
                            if (v26 < v25 + 1)
                            {
                              while (!sub_BBCFC0(&v47, v26))
                              {
                                if (v27 == ++v26) {
                                  goto LABEL_56;
                                }
                              }
                              goto LABEL_42;
                            }
LABEL_56:
                            uint64_t v29 = *(void *)(v23 + 64);
                            uint64_t v28 = *(void *)(v23 + 72);
                            while (v29 != v28)
                            {
                              unsigned int v30 = *(_DWORD *)(v29 + 48);
                              if (v30 <= v30 + 1) {
                                unsigned int v31 = v30 + 1;
                              }
                              else {
                                unsigned int v31 = *(_DWORD *)(v29 + 48);
                              }
                              uint64_t v47 = a1;
                              __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v29;
                              if (v30 != -1)
                              {
                                while ((sub_BBD13C(&v47, v30) & 1) == 0)
                                {
                                  if (v31 == ++v30) {
                                    goto LABEL_57;
                                  }
                                }
                                goto LABEL_42;
                              }
LABEL_57:
                              v29 += 60;
                            }
                            uint64_t v33 = *(void *)(v23 + 88);
                            uint64_t v32 = *(void *)(v23 + 96);
                            while (v33 != v32)
                            {
                              unsigned int v34 = *(_DWORD *)(v33 + 48);
                              if (v34 <= v34 + 1) {
                                unsigned int v35 = v34 + 1;
                              }
                              else {
                                unsigned int v35 = *(_DWORD *)(v33 + 48);
                              }
                              uint64_t v47 = a1;
                              __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v33;
                              if (v34 != -1)
                              {
                                while (!sub_BBD13C(&v47, v34))
                                {
                                  if (v35 == ++v34) {
                                    goto LABEL_67;
                                  }
                                }
                                goto LABEL_42;
                              }
LABEL_67:
                              v33 += 60;
                            }
                          }
                          v23 += 168;
                        }
                        v20 += 72;
                        if (v20 != v21) {
                          continue;
                        }
                        break;
                      }
                    }
                  }
                }
              }
              goto LABEL_79;
            }
LABEL_17:
            uint64_t v15 = *(void *)(v6 + 88);
            uint64_t v14 = *(void *)(v6 + 96);
            while (v15 != v14)
            {
              unsigned int v18 = *(_DWORD *)(v15 + 48);
              if (v18 <= v18 + 1) {
                unsigned int v19 = v18 + 1;
              }
              else {
                unsigned int v19 = *(_DWORD *)(v15 + 48);
              }
              uint64_t v47 = a1;
              __n128 v48 = (void (__cdecl **)(std::stringbuf *__hidden))v15;
              if (v18 != -1)
              {
                while (!sub_BBD13C(&v47, v18))
                {
                  if (v19 == ++v18) {
                    goto LABEL_26;
                  }
                }
                goto LABEL_38;
              }
LABEL_26:
              v15 += 60;
            }
          }
          v6 += 168;
        }
        v5 += 72;
        if (v5 != v4) {
          continue;
        }
        break;
      }
    }
  }
LABEL_79:
  uint64_t v36 = *(void *)(a2 + 16);
  if (v3 == v36)
  {
    uint64_t v37 = *(void *)(a2 + 8);
    unint64_t v38 = 0x14C1BACF914C1BADLL * ((v3 - v37) >> 3);
    if (v43 == i) {
      goto LABEL_92;
    }
  }
  else
  {
    do
    {
      v36 -= 296;
      sub_9F5E28(a2 + 24, v36);
    }
    while (v36 != v3);
    *(void *)(a2 + 16) = v3;
    uint64_t v37 = *(void *)(a2 + 8);
    unint64_t v38 = 0x14C1BACF914C1BADLL * ((v3 - v37) >> 3);
    if (v43 == i)
    {
LABEL_92:
      if (0x14C1BACF914C1BADLL * (v40 >> 3) > v38 && sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v47);
        sub_188FC78(&v47, (uint64_t)"The partial data filter removed ", 32);
        uint64_t v39 = (void *)std::ostream::operator<<();
        sub_188FC78(v39, (uint64_t)" journeys", 9);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        if (v50 < 0) {
          operator delete(v49);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      return;
    }
  }
  if (v3 != v37) {
    goto LABEL_92;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v47);
    sub_188FC78(&v47, (uint64_t)"The partial data filter removed all journeys from the response", 62);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v50 < 0) {
      operator delete(v49);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(_DWORD *)a2 = 23;
}

void sub_BBCD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_BBCDD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 12);
  if (HIDWORD(v4) != 1 || (v4 + 3) >= 2)
  {
    if (!sub_2AB7E4(**(void **)(*(void *)(a1 + 8) + 4120))) {
      return 1;
    }
    unint64_t v4 = *(void *)(a2 + 12);
  }
  if (*(unsigned char *)a1)
  {
    unsigned int v6 = v4 + 3;
    if ((v4 & 0xFFFFFFFF00000000) != 0x100000000 || v6 >= 2)
    {
      if ((v4 & 0xFFFFFFFF00000000) != 0x100000000 || v6 >= 2)
      {
        int v9 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 8) + 4120) + 24, __ROR8__(v4, 32), 0, "stop");
        uint64_t v10 = (uint64_t)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6);
        uint64_t v11 = *(unsigned int *)v10;
        LODWORD(v10) = *(_DWORD *)(v10 + 4);
        uint64_t v10 = v10 >= 0xFFFFFFFE ? 4294967294 : v10;
        uint64_t v12 = v11 | (v10 << 32);
      }
      else
      {
        uint64_t v12 = -1;
      }
      uint64_t v21 = v12;
      int v22 = 0x7FFFFFFF;
      if (!sub_73930(*(void ****)(a1 + 8), &v21)) {
        return 1;
      }
    }
  }
  unint64_t v13 = *(void *)(a2 + 20);
  if (HIDWORD(v13) != 1 || (v13 + 3) >= 2)
  {
    if (sub_2AB7E4(**(void **)(*(void *)(a1 + 8) + 4120)))
    {
      unint64_t v13 = *(void *)(a2 + 20);
      goto LABEL_31;
    }
    return 1;
  }
LABEL_31:
  if (!*(unsigned char *)a1) {
    return 0;
  }
  unsigned int v15 = v13 + 3;
  if ((v13 & 0xFFFFFFFF00000000) == 0x100000000 && v15 < 2) {
    return 0;
  }
  if ((v13 & 0xFFFFFFFF00000000) == 0x100000000 && v15 < 2)
  {
    uint64_t v17 = -1;
  }
  else
  {
    unsigned int v18 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 8) + 4120) + 24, __ROR8__(v13, 32), 0, "stop");
    uint64_t v19 = (uint64_t)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 6);
    uint64_t v20 = *(unsigned int *)v19;
    LODWORD(v19) = *(_DWORD *)(v19 + 4);
    if (v19 >= 0xFFFFFFFE) {
      uint64_t v19 = 4294967294;
    }
    else {
      uint64_t v19 = v19;
    }
    uint64_t v17 = v20 | (v19 << 32);
  }
  uint64_t v21 = v17;
  int v22 = 0x7FFFFFFF;
  return sub_73930(*(void ****)(a1 + 8), &v21) ^ 1;
}

uint64_t sub_BBCFC0(void *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  unsigned int v6 = (int *)sub_A11094((void *)(*(void *)(*a1 + 8) + 4136), *(void *)(a1[1] + 32));
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
    int v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = __ROR8__(*(void *)sub_A10764(v9, a2), 32);
  sub_A104E8((void *)(*(void *)(v4 + 8) + 4136), *(void *)(a1[1] + 32), a2, *(_DWORD *)(a1[1] + 40));
  BOOL v11 = HIDWORD(v10) != 1 || (v10 + 3) >= 2;
  if (v11
    && (!sub_2AB7E4(**(void **)(*(void *)(v4 + 8) + 4120))
     || *(unsigned char *)v4
     && ((uint64_t v12 = (int *)sub_498D5C(*(void *)(*(void *)(v4 + 8) + 4120) + 24, __ROR8__(v10, 32), 0, "stop"),
          LODWORD(v13) = *(int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6) + 4),
          v13 >= 0xFFFFFFFE)
       ? (uint64_t v13 = 4294967294)
       : (uint64_t v13 = v13),
         unint64_t v15 = *(unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6)) | (unint64_t)(v13 << 32),
         int v16 = 0x7FFFFFFF,
         !sub_73930(*(void ****)(v4 + 8), &v15))))
  {
    return 1;
  }
  else
  {
    return sub_2AB7E4(**(void **)(*(void *)(v4 + 8) + 4184)) ^ 1;
  }
}

uint64_t sub_BBD13C(void *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  unsigned int v6 = (int *)sub_A11094((void *)(*(void *)(*a1 + 8) + 4136), *(void *)(a1[1] + 28));
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
    int v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = __ROR8__(*(void *)sub_A10764(v9, a2), 32);
  sub_A104E8((void *)(*(void *)(v4 + 8) + 4136), *(void *)(a1[1] + 28), a2, *(_DWORD *)(a1[1] + 36));
  BOOL v11 = HIDWORD(v10) != 1 || (v10 + 3) >= 2;
  if (v11
    && (!sub_2AB7E4(**(void **)(*(void *)(v4 + 8) + 4120))
     || *(unsigned char *)v4
     && ((uint64_t v12 = (int *)sub_498D5C(*(void *)(*(void *)(v4 + 8) + 4120) + 24, __ROR8__(v10, 32), 0, "stop"),
          LODWORD(v13) = *(int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6) + 4),
          v13 >= 0xFFFFFFFE)
       ? (uint64_t v13 = 4294967294)
       : (uint64_t v13 = v13),
         unint64_t v15 = *(unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6)) | (unint64_t)(v13 << 32),
         int v16 = 0x7FFFFFFF,
         !sub_73930(*(void ****)(v4 + 8), &v15))))
  {
    return 1;
  }
  else
  {
    return sub_2AB7E4(**(void **)(*(void *)(v4 + 8) + 4184)) ^ 1;
  }
}

void sub_BBD2B8()
{
  unk_25DFCE7 = 16641;
  word_25DFCD0 = 65;
  byte_25DFCFF = 1;
  byte_25DFCE9 = 0;
}

void sub_BBD2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = 0x14C1BACF914C1BADLL * ((v3 - v2) >> 3);
  if (v3 != v2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    while (*(unsigned __int8 *)(v6 + 2) <= 1u)
    {
      v6 += 296;
      if (v6 == v3) {
        goto LABEL_7;
      }
    }
    if (v6 != v3)
    {
      uint64_t v7 = v6 + 296;
      if (v6 + 296 != v3)
      {
        do
        {
          if (*(unsigned __int8 *)(v7 + 2) <= 1u)
          {
            sub_B3E498(v6, (long long *)v7);
            v6 += 296;
          }
          v7 += 296;
        }
        while (v7 != v3);
        uint64_t v2 = *(void *)(a2 + 8);
        uint64_t v3 = *(void *)(a2 + 16);
      }
    }
    if (v6 == v3)
    {
      if (v4 <= 0x14C1BACF914C1BADLL * ((v6 - v2) >> 3)) {
        return;
      }
    }
    else
    {
      do
      {
        v3 -= 296;
        sub_9F5E28(a2 + 24, v3);
      }
      while (v3 != v6);
      *(void *)(a2 + 16) = v6;
      if (v4 <= 0x14C1BACF914C1BADLL * ((v6 - *(void *)(a2 + 8)) >> 3)) {
        return;
      }
    }
    goto LABEL_21;
  }
  uint64_t v2 = *(void *)(a2 + 16);
LABEL_7:
  if (v4 > 0x14C1BACF914C1BADLL * ((v3 - v2) >> 3))
  {
LABEL_21:
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)v11);
      sub_188FC78(v11, (uint64_t)"The risky journey filter removed ", 33);
      uint64_t v8 = (void *)std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)" journeys", 9);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (v10 < 0) {
        operator delete(__p);
      }
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
}

void sub_BBD5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double *sub_BBD62C(double *a1, void *a2)
{
  char v6 = 15;
  strcpy((char *)__p, "score_threshold");
  double v3 = sub_5C7E8(a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v3;
  return a1;
}

void sub_BBD6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BBD6C8(double *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = 0x14C1BACF914C1BADLL * ((v3 - v2) >> 3);
  if (v3 == v2)
  {
    if (!v4) {
      return;
    }
    goto LABEL_21;
  }
  for (uint64_t i = v2 + 296; *(double *)(i - 104) >= *a1; i += 296)
  {
    if (i == v3) {
      return;
    }
  }
  uint64_t v9 = i - 296;
  if (i - 296 == v3 || i == v3)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    if (v9 == v3) {
      goto LABEL_12;
    }
  }
  else
  {
    do
    {
      if (*(double *)(i + 192) >= *a1)
      {
        sub_B3E498(v9, (long long *)i);
        v9 += 296;
      }
      i += 296;
    }
    while (i != v3);
    uint64_t v2 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v9 == v10)
    {
LABEL_12:
      if (v4 <= 0x14C1BACF914C1BADLL * ((v10 - v2) >> 3)) {
        return;
      }
      goto LABEL_21;
    }
  }
  while (v10 != v9)
  {
    v10 -= 296;
    sub_9F5E28(a2 + 24, v10);
  }
  *(void *)(a2 + 16) = v9;
  if (v4 > 0x14C1BACF914C1BADLL * ((v9 - *(void *)(a2 + 8)) >> 3))
  {
LABEL_21:
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)v14);
      sub_188FC78(v14, (uint64_t)"The score threshold filter removed ", 35);
      BOOL v11 = (void *)std::ostream::operator<<();
      sub_188FC78(v11, (uint64_t)" journeys", 9);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (v13 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
}

void sub_BBD9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_BBDA2C(uint64_t a1, void *a2)
{
  __n128 __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91A0;
  strcpy((char *)__p, "max_future_interval_minutes");
  *(_DWORD *)a1 = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  __n128 __p = operator new(0x20uLL);
  long long v9 = xmmword_20B8870;
  strcpy((char *)__p, "max_past_interval_minutes");
  *(_DWORD *)(a1 + 4) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  __n128 __p = operator new(0x30uLL);
  long long v9 = xmmword_20B93B0;
  strcpy((char *)__p, "max_future_num_additional_service_frequencies");
  unint64_t v4 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 8) = v4;
  __n128 __p = operator new(0x30uLL);
  long long v9 = xmmword_20B93E0;
  strcpy((char *)__p, "max_past_num_additional_service_frequencies");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 16) = v5;
  __n128 __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91A0;
  strcpy((char *)__p, "max_num_service_frequencies");
  unint64_t v6 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 24) = v6;
  return a1;
}

void sub_BBDC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_BBDC54(uint64_t a1, void *a2, uint64_t a3)
{
  BOOL result = (int *)sub_BBDA2C(a1, a2);
  int v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *result) {
    int v5 = *result;
  }
  *BOOL result = v5;
  return result;
}

void *sub_BBDC8C(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      BOOL result = sub_BBDCD8(v4, v2);
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

void *sub_BBDCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  BOOL result = (void *)(a2 + 200);
  if (v5 == v6) {
    goto LABEL_19;
  }
  if (v6 - v5 == 72 && *(unsigned char *)(v5 + 24) == 1)
  {
    uint64_t v7 = *(unsigned int **)v5;
    unsigned int v8 = v7[40];
    uint64_t v9 = v7[1];
  }
  else
  {
    uint64_t v7 = *(unsigned int **)v5;
    unsigned int v8 = v7[40];
    unsigned int v10 = v7[5];
    uint64_t v9 = v7[1];
    unsigned int v11 = v7[2];
    if (v8)
    {
      unsigned int v10 = v7[2];
      unsigned int v11 = v7[1];
    }
    if (v10 == v11)
    {
      BOOL result = (void *)sub_A0D24C(result, 1uLL);
      unint64_t v12 = *(unsigned int *)(*result + 4) | ((unint64_t)*(unsigned int *)(*result + 4) << 32);
      if (!*(_DWORD *)(*result + 160)) {
        unint64_t v12 = *(void *)(*result + 8);
      }
      goto LABEL_14;
    }
  }
  unint64_t v12 = *((void *)v7 + 1);
  unint64_t v13 = v9 | (v9 << 32);
  if (v8) {
    unint64_t v12 = v13;
  }
LABEL_14:
  if ((v12 & 0xFFFFFFFF00000000) >> 32 == 0x7FFFFFFF) {
    int v14 = v12;
  }
  else {
    int v14 = (v12 & 0xFFFFFFFF00000000) >> 32;
  }
  if (v14 != 0x7FFFFFFF) {
    BOOL result = sub_BBE0B4((char *)a1, (char **)(a2 + 248), v14);
  }
LABEL_19:
  char v15 = *(void **)(a2 + 200);
  for (uint64_t i = *(void **)(a2 + 208); v15 != i; v15 += 9)
  {
    if (!*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = *v15;
      if (*v15 != v15[1])
      {
        uint64_t v17 = 12;
        if (*(_DWORD *)(v16 + 12) == 0x7FFFFFFF) {
          uint64_t v17 = 8;
        }
        unint64_t v38 = v15;
        sub_BBE0B4((char *)a1, (char **)v15 + 4, *(_DWORD *)(v16 + v17));
        BOOL result = (void *)0xCCCCCCCCCCCCCCCDLL;
        char v15 = v38;
        uint64_t v19 = *v38;
        uint64_t v18 = v38[1];
        if (*v38 != v18)
        {
          do
          {
            if (*(_DWORD *)(v19 + 12) == 0x7FFFFFFF) {
              int v20 = *(_DWORD *)(v19 + 8);
            }
            else {
              int v20 = *(_DWORD *)(v19 + 12);
            }
            int v22 = *(char **)(v19 + 120);
            uint64_t v21 = *(char **)(v19 + 128);
            if (v22 == v21)
            {
              uint64_t v21 = *(char **)(v19 + 120);
            }
            else
            {
              unint64_t v23 = 0;
              uint64_t v24 = *(char **)(v19 + 120);
              do
              {
                if (*(int *)a1 < 0) {
                  char v25 = -5;
                }
                else {
                  char v25 = 5;
                }
                if (*(_DWORD *)v24 > (signed int)(*(_DWORD *)a1 / 10
                                                 + v20
                                                 + (((103 * (char)(v25 + *(_DWORD *)a1 % 10)) >> 15) & 1)
                                                 + ((103 * (char)(v25 + *(_DWORD *)a1 % 10)) >> 10)))
                {
                  if (v23 >= *(void *)(a1 + 8)) {
                    *((_DWORD *)v24 + 4) = 0x7FFFFFFF;
                  }
                  ++v23;
                }
                v24 += 40;
              }
              while (v24 != v21);
              unint64_t v26 = 0;
              unsigned int v27 = v21;
              do
              {
                int v28 = *(_DWORD *)(a1 + 4);
                int v29 = v28 / -10;
                int v30 = v28 % 10;
                if (v28 < 0) {
                  char v31 = -5;
                }
                else {
                  char v31 = 5;
                }
                if (*((_DWORD *)v27 - 9) < (signed int)(v29
                                                       + v20
                                                       + (((-103 * (char)(v31 + v30)) >> 15) & 1)
                                                       + ((-103 * (char)(v31 + v30)) >> 10)))
                {
                  if (v26 >= *(void *)(a1 + 16)) {
                    *((_DWORD *)v27 - 6) = 0x7FFFFFFF;
                  }
                  ++v26;
                }
                v27 -= 40;
              }
              while (v27 != v22);
              uint64_t v32 = v22;
              while (*((_DWORD *)v32 + 4) != 0x7FFFFFFF)
              {
                v32 += 40;
                if (v32 == v21) {
                  goto LABEL_65;
                }
              }
              if (v32 != v21)
              {
                uint64_t v33 = (long long *)(v32 + 40);
                if (v32 + 40 != v21)
                {
                  do
                  {
                    if (*((_DWORD *)v33 + 4) != 0x7FFFFFFF)
                    {
                      long long v34 = *v33;
                      long long v35 = v33[1];
                      v32[32] = *((unsigned char *)v33 + 32);
                      *(_OWORD *)uint64_t v32 = v34;
                      *((_OWORD *)v32 + 1) = v35;
                      v32 += 40;
                    }
                    uint64_t v33 = (long long *)((char *)v33 + 40);
                  }
                  while (v33 != (long long *)v21);
                  int v22 = *(char **)(v19 + 120);
                  uint64_t v21 = *(char **)(v19 + 128);
                }
              }
              if (v32 != v21)
              {
                uint64_t v21 = v32;
                *(void *)(v19 + 128) = v32;
              }
            }
LABEL_65:
            unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v22) >> 3);
            unint64_t v37 = *(void *)(a1 + 24);
            if (v36 > v37) {
              *(void *)(v19 + 128) = &v22[40 * v37];
            }
            v19 += 168;
          }
          while (v19 != v18);
        }
      }
    }
  }
  return result;
}

char *sub_BBE0B4(char *result, char **a2, int a3)
{
  uint64_t v4 = result;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v5 = *a2;
  }
  else
  {
    unint64_t v7 = 0;
    unsigned int v8 = *a2;
    do
    {
      if (*(int *)v4 < 0) {
        char v9 = -5;
      }
      else {
        char v9 = 5;
      }
      if (*(_DWORD *)v8 > (signed int)(*(_DWORD *)v4 / 10
                                      + a3
                                      + (((103 * (char)(v9 + *(_DWORD *)v4 % 10)) >> 15) & 1)
                                      + ((103 * (char)(v9 + *(_DWORD *)v4 % 10)) >> 10)))
      {
        if (v7 >= *((void *)v4 + 1)) {
          *((_DWORD *)v8 + 4) = 0x7FFFFFFF;
        }
        ++v7;
      }
      v8 += 40;
    }
    while (v8 != v5);
    unint64_t v10 = 0;
    BOOL result = v5;
    do
    {
      int v11 = *((_DWORD *)v4 + 1);
      int v12 = v11 / -10;
      int v13 = v11 % 10;
      if (v11 < 0) {
        char v14 = -5;
      }
      else {
        char v14 = 5;
      }
      if (*((_DWORD *)result - 9) < (signed int)(v12
                                                + a3
                                                + (((-103 * (char)(v14 + v13)) >> 15) & 1)
                                                + ((-103 * (char)(v14 + v13)) >> 10)))
      {
        if (v10 >= *((void *)v4 + 2)) {
          *((_DWORD *)result - 6) = 0x7FFFFFFF;
        }
        ++v10;
      }
      result -= 40;
    }
    while (result != v6);
    char v15 = v6;
    while (*((_DWORD *)v15 + 4) != 0x7FFFFFFF)
    {
      v15 += 40;
      if (v15 == v5) {
        goto LABEL_34;
      }
    }
    if (v15 != v5)
    {
      uint64_t v16 = v15 + 40;
      if (v15 + 40 != v5)
      {
        do
        {
          if (*((_DWORD *)v16 + 4) != 0x7FFFFFFF)
          {
            long long v17 = *(_OWORD *)v16;
            long long v18 = *((_OWORD *)v16 + 1);
            v15[32] = v16[32];
            *(_OWORD *)char v15 = v17;
            *((_OWORD *)v15 + 1) = v18;
            v15 += 40;
          }
          v16 += 40;
        }
        while (v16 != v5);
        uint64_t v6 = *a2;
        uint64_t v5 = a2[1];
      }
    }
    if (v15 != v5)
    {
      uint64_t v5 = v15;
      a2[1] = v15;
    }
  }
LABEL_34:
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3);
  unint64_t v20 = *((void *)v4 + 3);
  if (v19 > v20) {
    a2[1] = &v6[40 * v20];
  }
  return result;
}

char *sub_BBE304(char *result, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  uint64_t v4 = *(void *)(a3 + 56);
  if (v3 != v4)
  {
    uint64_t v6 = result;
    do
    {
      BOOL result = sub_BBE0B4(v6, (char **)(v3 + 184), *a2);
      v3 += 248;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_BBE358(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v2 != i; v2 += 37)
    sub_BBE3A4(a1, v2);
}

void sub_BBE3A4(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a2[25];
  uint64_t v5 = (uint64_t *)a2[26];
  uint64_t v3 = a2 + 25;
  if (v4 == v5) {
    goto LABEL_39;
  }
  if ((char *)v5 - (char *)v4 == 72 && *((unsigned char *)v4 + 24) == 1)
  {
    uint64_t v6 = *v4;
    int v7 = *(_DWORD *)(v6 + 160);
    uint64_t v8 = *(unsigned int *)(v6 + 4);
LABEL_11:
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = v8 | (v8 << 32);
    if (v7) {
      unint64_t v11 = v12;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  int v7 = *(_DWORD *)(v6 + 160);
  int v9 = *(_DWORD *)(v6 + 20);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  int v10 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    int v9 = *(_DWORD *)(v6 + 8);
    int v10 = *(_DWORD *)(v6 + 4);
  }
  if (v9 != v10) {
    goto LABEL_11;
  }
  uint64_t v3 = (void *)sub_A0D24C(v3, 1uLL);
  unint64_t v11 = *(unsigned int *)(*v3 + 4) | ((unint64_t)*(unsigned int *)(*v3 + 4) << 32);
  if (!*(_DWORD *)(*v3 + 160)) {
    unint64_t v11 = *(void *)(*v3 + 8);
  }
LABEL_13:
  unint64_t v13 = (v11 & 0xFFFFFFFF00000000) >> 32;
  if (v13 == 0x7FFFFFFF) {
    LODWORD(v13) = v11;
  }
  if (v13 != 0x7FFFFFFF)
  {
    uint64_t v15 = a2[31];
    char v14 = (long long *)a2[32];
    if ((long long *)v15 != v14)
    {
      while (*(_DWORD *)(v15 + 4) >= (int)v13 && *(_DWORD *)v15 <= (int)v13)
      {
        v15 += 40;
        if ((long long *)v15 == v14) {
          goto LABEL_39;
        }
      }
      if ((long long *)v15 != v14)
      {
        long long v17 = (long long *)(v15 + 40);
        if ((long long *)(v15 + 40) != v14)
        {
          do
          {
            if (*((_DWORD *)v17 + 1) >= (int)v13 && *(_DWORD *)v17 <= (int)v13)
            {
              long long v19 = *v17;
              long long v20 = v17[1];
              *(unsigned char *)(v15 + 32) = *((unsigned char *)v17 + 32);
              *(_OWORD *)uint64_t v15 = v19;
              *(_OWORD *)(v15 + 16) = v20;
              v15 += 40;
            }
            long long v17 = (long long *)((char *)v17 + 40);
          }
          while (v17 != v14);
          char v14 = (long long *)a2[32];
        }
      }
      if ((long long *)v15 != v14) {
        a2[32] = v15;
      }
    }
  }
LABEL_39:
  int v22 = (uint64_t *)a2[25];
  for (uint64_t i = (uint64_t *)a2[26]; v22 != i; v22 += 9)
    sub_BBE564((uint64_t)v3, v22);
}

void sub_BBE564(uint64_t a1, uint64_t *a2)
{
  if (!*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *a2;
    if (*a2 != a2[1])
    {
      uint64_t v3 = 8;
      if (*(_DWORD *)(v2 + 12) != 0x7FFFFFFF) {
        uint64_t v3 = 12;
      }
      uint64_t v5 = a2[4];
      uint64_t v4 = (long long *)a2[5];
      if ((long long *)v5 != v4)
      {
        int v6 = *(_DWORD *)(v2 + v3);
        while (*(_DWORD *)(v5 + 4) >= v6 && *(_DWORD *)v5 <= v6)
        {
          v5 += 40;
          if ((long long *)v5 == v4) {
            goto LABEL_28;
          }
        }
        if ((long long *)v5 != v4)
        {
          uint64_t v8 = (long long *)(v5 + 40);
          if ((long long *)(v5 + 40) != v4)
          {
            do
            {
              if (*((_DWORD *)v8 + 1) >= v6 && *(_DWORD *)v8 <= v6)
              {
                long long v10 = *v8;
                long long v11 = v8[1];
                *(unsigned char *)(v5 + 32) = *((unsigned char *)v8 + 32);
                *(_OWORD *)uint64_t v5 = v10;
                *(_OWORD *)(v5 + 16) = v11;
                v5 += 40;
              }
              uint64_t v8 = (long long *)((char *)v8 + 40);
            }
            while (v8 != v4);
            uint64_t v4 = (long long *)a2[5];
          }
        }
        if ((long long *)v5 != v4) {
          a2[5] = v5;
        }
      }
LABEL_28:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      if (*a2 != v13)
      {
        do
        {
          int v14 = *(_DWORD *)(v12 + 8);
          if (*(_DWORD *)(v12 + 12) != 0x7FFFFFFF) {
            int v14 = *(_DWORD *)(v12 + 12);
          }
          uint64_t v16 = *(void *)(v12 + 120);
          uint64_t v15 = *(long long **)(v12 + 128);
          if ((long long *)v16 != v15)
          {
            while (*(_DWORD *)(v16 + 4) >= v14 && *(_DWORD *)v16 <= v14)
            {
              v16 += 40;
              if ((long long *)v16 == v15) {
                goto LABEL_30;
              }
            }
            if ((long long *)v16 != v15)
            {
              long long v18 = (long long *)(v16 + 40);
              if ((long long *)(v16 + 40) != v15)
              {
                do
                {
                  if (*((_DWORD *)v18 + 1) >= v14 && *(_DWORD *)v18 <= v14)
                  {
                    long long v20 = *v18;
                    long long v21 = v18[1];
                    *(unsigned char *)(v16 + 32) = *((unsigned char *)v18 + 32);
                    *(_OWORD *)uint64_t v16 = v20;
                    *(_OWORD *)(v16 + 16) = v21;
                    v16 += 40;
                  }
                  long long v18 = (long long *)((char *)v18 + 40);
                }
                while (v18 != v15);
                uint64_t v15 = *(long long **)(v12 + 128);
              }
            }
            if ((long long *)v16 != v15) {
              *(void *)(v12 + 128) = v16;
            }
          }
LABEL_30:
          v12 += 168;
        }
        while (v12 != v13);
      }
    }
  }
}

_DWORD *sub_BBE744(_DWORD *a1, void *a2)
{
  uint64_t v2 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DFD00, memory_order_acquire) & 1) == 0)
  {
    int v7 = __cxa_guard_acquire(&qword_25DFD00);
    uint64_t v2 = a2;
    if (v7)
    {
      int v10 = 0;
      sub_523F74(__p, "suggested", &v10);
      int v9 = 1;
      sub_523F74(&v13, "regular", &v9);
      sub_BBE950((uint64_t)qword_25DFD08, (uint64_t)__p, 2);
      if (v14 < 0) {
        operator delete(v13);
      }
      if (v12 < 0) {
        operator delete(*(void **)__p);
      }
      __cxa_guard_release(&qword_25DFD00);
      uint64_t v2 = a2;
    }
  }
  char v12 = 20;
  strcpy(__p, "filter_category_type");
  uint64_t v4 = sub_561B0(v2, (uint64_t)__p);
  uint64_t v5 = sub_BBF144(qword_25DFD08, v4);
  if (!v5) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *a1 = *((_DWORD *)v5 + 10);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_BBE8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_25DFD00);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  __cxa_guard_abort(&qword_25DFD00);
  _Unwind_Resume(a1);
}

void sub_BBE91C(_Unwind_Exception *a1)
{
}

void sub_BBE934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BBE950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_BBECD0(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_BBE9B4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BBE9D8(uint64_t result, void *a2)
{
  uint64_t v3 = (_OWORD *)*a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return result;
  }
  uint64_t v5 = (_DWORD *)result;
  unint64_t v6 = v2 - (void)v3 - 112;
  unint64_t v7 = v6 >> 4;
  uint64_t v8 = (((v6 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
  if (v6 < 0x70)
  {
    uint64_t v9 = 0;
    int v10 = (_OWORD *)*a2;
    do
    {
LABEL_11:
      if (*((unsigned char *)v10 + 104)) {
        ++v9;
      }
      v10 += 7;
    }
    while (v10 != (_OWORD *)v2);
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v10 = &v3[7 * (v8 & 0x7FFFFFFFFFFFFFELL)];
  uint64_t v13 = (unsigned __int8 *)v3 + 216;
  uint64_t v14 = v8 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    int v15 = *(v13 - 112);
    unsigned int v16 = *v13;
    v13 += 224;
    BOOL result = v16;
    if (v15) {
      ++v11;
    }
    if (result) {
      ++v12;
    }
    v14 -= 2;
  }
  while (v14);
  uint64_t v9 = v12 + v11;
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFELL)) {
    goto LABEL_11;
  }
LABEL_14:
  if (v9 != 1) {
    return result;
  }
  if (v6 >= 0x70)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    long long v18 = &v3[7 * (v8 & 0x7FFFFFFFFFFFFFELL)];
    long long v21 = (unsigned __int8 *)v3 + 216;
    uint64_t v22 = v8 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      int v23 = *(v21 - 112);
      int v25 = *v21;
      v21 += 224;
      int v24 = v25;
      if (!v23) {
        ++v19;
      }
      if (!v24) {
        ++v20;
      }
      v22 -= 2;
    }
    while (v22);
    uint64_t v17 = v20 + v19;
    if (v8 == (v8 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v17 = 0;
    long long v18 = (_OWORD *)*a2;
  }
  do
  {
    if (!*((unsigned char *)v18 + 104)) {
      ++v17;
    }
    v18 += 7;
  }
  while (v18 != (_OWORD *)v2);
LABEL_27:
  if (v17 != 1) {
    return result;
  }
  if (*v5)
  {
    if (*v5 == 1)
    {
      while (!*((unsigned char *)v3 + 104))
      {
        v3 += 7;
        if (v3 == (_OWORD *)v2) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      v3 += 7 * ((v7 * (unsigned __int128)0x2492492492492493uLL) >> 64) + 7;
    }
  }
  else
  {
    while (*((unsigned char *)v3 + 104))
    {
      v3 += 7;
      if (v3 == (_OWORD *)v2)
      {
LABEL_32:
        uint64_t v26 = a2[1];
        goto LABEL_60;
      }
    }
  }
  if (v3 == (_OWORD *)v2 || (unsigned int v27 = v3 + 7, v3 + 7 == (_OWORD *)v2))
  {
    uint64_t v26 = a2[1];
    uint64_t v2 = (uint64_t)v3;
    goto LABEL_60;
  }
  uint64_t v28 = (uint64_t)v3;
  do
  {
    int v30 = v3;
    uint64_t v3 = v27;
    if (*v5)
    {
      if (*v5 == 1 && *((unsigned char *)v30 + 216) != 0) {
        goto LABEL_44;
      }
    }
    else if (!*((unsigned char *)v30 + 216))
    {
      goto LABEL_44;
    }
    *(_OWORD *)uint64_t v28 = *v27;
    long long v32 = v27[1];
    long long v33 = v27[2];
    long long v34 = v27[4];
    *(_OWORD *)(v28 + 48) = v27[3];
    *(_OWORD *)(v28 + 64) = v34;
    *(_OWORD *)(v28 + 16) = v32;
    *(_OWORD *)(v28 + 32) = v33;
    long long v35 = (void **)(v28 + 80);
    uint64_t v36 = *(void *)(v28 + 80);
    if (v36)
    {
      uint64_t v37 = *(void *)(v28 + 88);
      int v29 = *(void **)(v28 + 80);
      if (v37 != v36)
      {
        do
        {
          unint64_t v38 = *(void **)(v37 - 32);
          if (v38)
          {
            *(void *)(v37 - 24) = v38;
            operator delete(v38);
          }
          v37 -= 112;
        }
        while (v37 != v36);
        int v29 = *v35;
      }
      *(void *)(v28 + 88) = v36;
      operator delete(v29);
      _OWORD *v35 = 0;
      *(void *)(v28 + 88) = 0;
      *(void *)(v28 + 96) = 0;
    }
    *(_OWORD *)(v28 + 80) = v30[12];
    *(void *)(v28 + 96) = *((void *)v30 + 26);
    *((void *)v30 + 24) = 0;
    *((void *)v30 + 25) = 0;
    *((void *)v30 + 26) = 0;
    *(unsigned char *)(v28 + 104) = *((unsigned char *)v30 + 216);
    v28 += 112;
LABEL_44:
    unsigned int v27 = v3 + 7;
  }
  while (v3 + 7 != (_OWORD *)v2);
  uint64_t v26 = a2[1];
  uint64_t v2 = v28;
LABEL_60:

  return sub_B7C494((uint64_t)a2, v2, v26);
}

uint64_t *sub_BBECD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v29 = *(void **)(*(void *)a1 + 8 * v10);
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      int v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int v29 = *(void **)(*(void *)a1 + 8 * v3);
  int v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_BBF118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_BBF12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_BBF144(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          BOOL result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        BOOL result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

BOOL *sub_BBF374(BOOL *a1, void *a2)
{
  __n128 __p = operator new(0x28uLL);
  long long v8 = xmmword_20B93A0;
  strcpy((char *)__p, "enable_filtering_without_categories");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  BOOL v5 = v4;
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p);
    *a1 = v5;
  }
  else
  {
    *a1 = v4;
  }
  return a1;
}

void sub_BBF418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BBF434(unsigned char *a1, uint64_t *a2)
{
  if (*a2 == a2[1] && !*a1) {
    return;
  }
  sub_BBF6A0(a2, v22);
  sub_BBF8E4(v3, (uint64_t)a2, v22);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 80);
    uint64_t v7 = *(void *)(v4 + 88);
    if (v6 == v7) {
      goto LABEL_4;
    }
    long long v8 = v22[0];
    uint8x8_t v9 = *(_DWORD **)(v6 + 80);
    for (uint64_t i = *(_DWORD **)(v6 + 88); v9 != i; v9 += 4)
LABEL_10:
      _DWORD *v9 = v8[*v9];
    while (1)
    {
      v6 += 112;
      if (v6 == v7) {
        break;
      }
      uint8x8_t v9 = *(_DWORD **)(v6 + 80);
      uint64_t i = *(_DWORD **)(v6 + 88);
      if (v9 != i) {
        goto LABEL_10;
      }
    }
LABEL_4:
    v4 += 112;
  }
  sub_BBFB2C(a2, __p);
  uint64_t v12 = a2[6];
  uint64_t v11 = a2[7];
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    while (*((_DWORD *)__p[0] - 0x1084210842108421 * (v13 >> 3)) != -1)
    {
      v13 += 248;
      if (v12 + v13 == v11) {
        goto LABEL_25;
      }
    }
    v12 += v13;
  }
  if (v12 == v11)
  {
LABEL_25:
    uint64_t v12 = a2[7];
  }
  else
  {
    uint64_t v14 = v12 + 248;
    if (v12 + 248 != v11)
    {
      uint64_t v15 = v12 + 248;
      do
      {
        if (*((_DWORD *)__p[0] - 0x1084210842108421 * ((v14 - a2[6]) >> 3)) != -1)
        {
          sub_BB00B4(v12, v15);
          v12 += 248;
        }
        v15 += 248;
        v14 += 248;
      }
      while (v15 != v11);
      uint64_t v11 = a2[7];
    }
  }
  sub_BAFFBC((uint64_t)(a2 + 6), v12, v11);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  uint64_t v18 = __p[0];
  if (v16 == v17)
  {
    if (!__p[0]) {
      goto LABEL_35;
    }
LABEL_34:
    __p[1] = v18;
    operator delete(v18);
    goto LABEL_35;
  }
  do
  {
    uint64_t v19 = *(_DWORD **)(v16 + 72);
    for (unint64_t j = *(_DWORD **)(v16 + 80); v19 != j; v19 += 4)
      *uint64_t v19 = *((_DWORD *)v18 + *v19);
    v16 += 160;
  }
  while (v16 != v17);
  uint64_t v18 = __p[0];
  if (__p[0]) {
    goto LABEL_34;
  }
LABEL_35:
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_BBF654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_BBF6A0(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  float v28 = 0;
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 5);
    unint64_t v8 = (v7 - 1) >> 6;
    uint8x8_t v9 = operator new(8 * (v8 + 1));
    unint64_t v10 = v9;
    unint64_t v29 = v7;
    unint64_t v30 = v8 + 1;
    float v28 = v9;
    if (v7 >= 0x41) {
      unint64_t v11 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v11 = 0;
    }
    v9[v11] = 0;
    if (v7 >= 0x40) {
      bzero(v9, 8 * (v7 >> 6));
    }
    if ((v7 & 0x3F) != 0) {
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (v13 == v12)
    {
LABEL_11:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      int v14 = v7 & 0x3F;
      if (v7 > 0x3F || v14 != 0) {
        goto LABEL_32;
      }
LABEL_16:
      if (!v10) {
        return;
      }
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v7 = 0;
    unint64_t v10 = 0;
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    if (*a1 == v12) {
      goto LABEL_11;
    }
  }
  do
  {
    uint64_t v16 = *(void *)(v13 + 80);
    uint64_t v17 = *(void *)(v13 + 88);
    while (v16 != v17)
    {
      uint64_t v18 = *(unsigned int **)(v16 + 80);
      for (uint64_t i = *(unsigned int **)(v16 + 88); v18 != i; v18 += 4)
      {
        uint64_t v20 = (void *)sub_415F0(&v28, *v18);
        *v20 |= v21;
      }
      v16 += 112;
    }
    v13 += 112;
  }
  while (v13 != v12);
  unint64_t v10 = v28;
  unint64_t v7 = v29;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v14 = v7 & 0x3F;
  if (v7 <= 0x3F && v14 == 0) {
    goto LABEL_16;
  }
LABEL_32:
  int v23 = 0;
  int v24 = 0;
  char v25 = &v10[v7 >> 6];
  do
  {
    uint64_t v26 = (1 << v24) & *v10;
    if (v26) {
      int v27 = v23;
    }
    else {
      int v27 = -1;
    }
    int v31 = v27;
    sub_745A4((uint64_t)a2, &v31);
    if (v26) {
      ++v23;
    }
    v10 += v24 == 63;
    if (v24 == 63) {
      int v24 = 0;
    }
    else {
      ++v24;
    }
  }
  while (v24 != v14 || v10 != v25);
  unint64_t v10 = v28;
  if (v28) {
LABEL_17:
  }
    operator delete(v10);
}

void sub_BBF89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void sub_BBF8E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    while (*(_DWORD *)(*a3 + 0x3333333333333334 * (v7 >> 5)) != -1)
    {
      v7 += 160;
      if (v5 + v7 == v6) {
        return;
      }
    }
    v5 += v7;
  }
  if (v5 != v6)
  {
    uint64_t v8 = v5 + 160;
    if (v5 + 160 != v6)
    {
      uint64_t v9 = v5 + 160;
      do
      {
        if (*(_DWORD *)(*a3 + 0x3333333333333334 * ((v8 - *(void *)(a2 + 24)) >> 5)) != -1)
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v9;
          long long v13 = *(_OWORD *)(v9 + 16);
          long long v14 = *(_OWORD *)(v9 + 32);
          long long v15 = *(_OWORD *)(v9 + 48);
          *(void *)(v5 + 64) = *(void *)(v9 + 64);
          *(_OWORD *)(v5 + 32) = v14;
          *(_OWORD *)(v5 + 48) = v15;
          *(_OWORD *)(v5 + 16) = v13;
          uint64_t v16 = *(void **)(v5 + 72);
          if (v16)
          {
            *(void *)(v5 + 80) = v16;
            operator delete(v16);
            *(void *)(v5 + 72) = 0;
            *(void *)(v5 + 80) = 0;
            *(void *)(v5 + 88) = 0;
          }
          *(_OWORD *)(v5 + 72) = *(_OWORD *)(v9 + 72);
          *(void *)(v5 + 88) = *(void *)(v9 + 88);
          *(void *)(v9 + 72) = 0;
          *(void *)(v9 + 80) = 0;
          *(void *)(v9 + 88) = 0;
          long long v10 = *(_OWORD *)(v9 + 96);
          long long v11 = *(_OWORD *)(v9 + 112);
          long long v12 = *(_OWORD *)(v9 + 128);
          *(_OWORD *)(v5 + 142) = *(_OWORD *)(v9 + 142);
          *(_OWORD *)(v5 + 112) = v11;
          *(_OWORD *)(v5 + 128) = v12;
          *(_OWORD *)(v5 + 96) = v10;
          v5 += 160;
        }
        v9 += 160;
        v8 += 160;
      }
      while (v9 != v6);
      uint64_t v6 = *(void *)(a2 + 32);
    }
    if (v5 != v6)
    {
      while (v6 != v5)
      {
        uint64_t v17 = *(void **)(v6 - 88);
        if (v17)
        {
          *(void *)(v6 - 80) = v17;
          operator delete(v17);
        }
        v6 -= 160;
      }
      *(void *)(a2 + 32) = v5;
    }
  }
}

void sub_BBFB2C(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = a1[6];
  uint64_t v4 = a1[7];
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = 0xEF7BDEF7BDEF7BDFLL * (v6 >> 3);
    unint64_t v8 = (v7 - 1) >> 6;
    uint64_t v9 = operator new(8 * (v8 + 1));
    long long v10 = v9;
    unint64_t v27 = v7;
    unint64_t v28 = v8 + 1;
    uint64_t v26 = v9;
    if (v7 >= 0x41) {
      unint64_t v11 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v11 = 0;
    }
    v9[v11] = 0;
    if (v7 >= 0x40) {
      bzero(v9, 8 * (v7 >> 6));
    }
    if ((v7 & 0x3F) != 0) {
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
    }
    uint64_t v13 = a1[3];
    uint64_t v12 = a1[4];
    if (v13 == v12)
    {
LABEL_11:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      int v14 = v7 & 0x3F;
      if (v7 > 0x3F || v14 != 0) {
        goto LABEL_29;
      }
LABEL_16:
      if (!v10) {
        return;
      }
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v7 = 0;
    long long v10 = 0;
    uint64_t v13 = a1[3];
    uint64_t v12 = a1[4];
    if (v13 == v12) {
      goto LABEL_11;
    }
  }
  do
  {
    uint64_t v16 = *(unsigned int **)(v13 + 72);
    for (uint64_t i = *(unsigned int **)(v13 + 80); v16 != i; v16 += 4)
    {
      uint64_t v18 = (void *)sub_415F0(&v26, *v16);
      *v18 |= v19;
    }
    v13 += 160;
  }
  while (v13 != v12);
  long long v10 = v26;
  unint64_t v7 = v27;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v14 = v7 & 0x3F;
  if (v7 <= 0x3F && v14 == 0) {
    goto LABEL_16;
  }
LABEL_29:
  int v21 = 0;
  int v22 = 0;
  int v23 = &v10[v7 >> 6];
  do
  {
    uint64_t v24 = (1 << v22) & *v10;
    if (v24) {
      int v25 = v21;
    }
    else {
      int v25 = -1;
    }
    int v29 = v25;
    sub_745A4((uint64_t)a2, &v29);
    if (v24) {
      ++v21;
    }
    v10 += v22 == 63;
    if (v22 == 63) {
      int v22 = 0;
    }
    else {
      ++v22;
    }
  }
  while (v22 != v14 || v10 != v23);
  long long v10 = v26;
  if (v26) {
LABEL_17:
  }
    operator delete(v10);
}

void sub_BBFD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

BOOL *sub_BBFD64(BOOL *a1, void *a2)
{
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "check_nearby_stops");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "check_market_polygons");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "always_check_preflight_market_polygons");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "always_check_any_version_market_polygons");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v7;
  return a1;
}

void sub_BBFEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_BBFF04(BOOL *a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL result = sub_BBFD64(a1, a4);
  *((void *)result + 1) = a2;
  *((void *)result + 2) = a3;
  return result;
}

uint64_t sub_BBFF34(unsigned char *a1)
{
  if (!*a1) {
    goto LABEL_5;
  }
  if (!sub_BC077C((uint64_t)a1))
  {
    int v3 = 17;
    int v4 = a1[1];
    if (a1[1])
    {
LABEL_6:
      if (sub_BC01AC()) {
        int v4 = 0;
      }
      else {
        int v4 = 18;
      }
    }
LABEL_9:
    if (v3 <= v4) {
      int v2 = v4;
    }
    else {
      int v2 = v3;
    }
    if (!*a1) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (!*a1)
  {
LABEL_5:
    int v3 = 0;
    int v4 = a1[1];
    if (a1[1]) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  int v2 = 0;
LABEL_13:
  if (!sub_BC0928((uint64_t)a1))
  {
    int v8 = 17;
    int v6 = a1[1];
    if (!a1[1]) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (*a1)
  {
    BOOL v5 = 0;
    int v6 = 0;
    BOOL v7 = v2 != 0;
    goto LABEL_27;
  }
LABEL_16:
  int v8 = 0;
  int v6 = a1[1];
  if (!a1[1]) {
    goto LABEL_20;
  }
LABEL_17:
  if (sub_BC01AC()) {
    int v6 = 0;
  }
  else {
    int v6 = 18;
  }
LABEL_20:
  if (v8 > v6) {
    int v6 = v8;
  }
  BOOL v7 = v2 != 0;
  BOOL v5 = v6 != 0;
  if (v2 && v6)
  {
    if (v2 <= v6) {
      return v6;
    }
    else {
      return v2;
    }
  }
LABEL_27:
  if (!v7 || v6)
  {
    if (v2) {
      BOOL v5 = 0;
    }
    if (v6 == 17) {
      int v11 = 34;
    }
    else {
      int v11 = 0;
    }
    if (v6 == 18) {
      unsigned int v12 = 35;
    }
    else {
      unsigned int v12 = v11;
    }
    if (v5) {
      return v12;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (v2 == 17) {
      unsigned int v10 = 27;
    }
    else {
      unsigned int v10 = 0;
    }
    if (v2 == 18) {
      return 28;
    }
    else {
      return v10;
    }
  }
}

uint64_t sub_BC00EC(unsigned char *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 376);
  if (v3 == 2)
  {
    if (!*a1) {
      goto LABEL_11;
    }
    if (sub_BC077C((uint64_t)a1)) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  if (v3 != 1) {
    return 0;
  }
  if (*a1)
  {
    if (sub_BC077C((uint64_t)a1))
    {
LABEL_5:
      if (*a1) {
        return 0;
      }
      goto LABEL_11;
    }
LABEL_9:
    int v5 = 17;
    int v6 = a1[1];
    if (a1[1]) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_11:
  int v5 = 0;
  int v6 = a1[1];
  if (a1[1])
  {
LABEL_12:
    if (sub_BC01AC()) {
      int v6 = 0;
    }
    else {
      int v6 = 18;
    }
  }
LABEL_15:
  if (v5 <= v6) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t sub_BC01AC()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = sub_3756C8(*(void **)(v0 + 8));
  int v5 = *(std::__shared_weak_count **)(v4 + 8);
  uint64_t v51 = *(void *)v4;
  uint64_t v52 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v53, (const void *)(v4 + 16), sizeof(v53));
  int v6 = *(std::__shared_weak_count **)(v4 + 3880);
  __n128 v54 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memcpy(v55, (const void *)(v4 + 3888), sizeof(v55));
  BOOL v7 = *(std::__shared_weak_count **)(v4 + 7752);
  int v56 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v57 = *(unsigned char *)(v4 + 7760);
  sub_518C8(*v2 >> 17, v2[1] >> 17);
  unsigned int v9 = v8 | 0x40000000;
  while (1)
  {
    unsigned int v10 = v9;
    int v11 = sub_B37630((uint64_t)&v51, v9, 1);
    if (v11)
    {
      unsigned int v12 = &v11[-*(int *)v11];
      if (*(unsigned __int16 *)v12 >= 5u)
      {
        if (*((_WORD *)v12 + 2)) {
          break;
        }
      }
    }
LABEL_9:
    unsigned int v9 = v10 >> 2;
    if (v10 <= 3)
    {
      uint64_t v46 = 0;
      uint64_t v47 = v56;
      if (!v56) {
        goto LABEL_73;
      }
      goto LABEL_70;
    }
  }
  sub_BC0AD8((uint64_t)&v51, v10, (uint64_t)&v60);
  uint64_t v13 = v60;
  for (uint64_t i = v61; v13 != i; ++v13)
  {
    unint64_t v32 = sub_BC10A8((uint64_t)&v51, *v13);
    unint64_t v33 = &v32[-*(int *)v32];
    if (*(unsigned __int16 *)v33 >= 5u && (unsigned __int16 v34 = *((_WORD *)v33 + 2)) != 0) {
      unint64_t v35 = *(unsigned int *)&v32[v34 + 4] | ((unint64_t)*(unsigned int *)&v32[v34] << 32);
    }
    else {
      unint64_t v35 = 0xFFFFFFFFLL;
    }
    unint64_t v36 = __ROR8__(v35, 32);
    if (HIDWORD(v36) == 0xFFFFFFFF || v36 == 0) {
      unint64_t v35 = 0xFFFFFFFFLL;
    }
    unint64_t v38 = __ROR8__(v35, 32);
    if (!*(unsigned char *)(v3 + 2) && (sub_51D60((unsigned __int8 *)(*(void *)(v3 + 16) + 3896)) & 1) == 0)
    {
      unint64_t v39 = (int *)sub_8F4388(*(void *)(*(void *)(v3 + 16) + 4080) + 24, v38, 0, "market");
      unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 >= 0xDu)
      {
        uint64_t v41 = v40[6];
        if (v41)
        {
          if (*((unsigned char *)v39 + v41)) {
            continue;
          }
        }
      }
    }
    if (*(unsigned char *)(v3 + 3)) {
      goto LABEL_62;
    }
    unsigned int v42 = sub_C2599C(*(void *)(v3 + 16) + 3896);
    char v43 = (int *)sub_8F4388(*(void *)(*(void *)(v3 + 16) + 4080) + 24, v38, 0, "market");
    __n128 v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 0x11u && (uint64_t v45 = v44[8]) != 0)
    {
      if (v42 >= *((unsigned __int8 *)v43 + v45))
      {
LABEL_62:
        int v17 = 1;
        goto LABEL_65;
      }
    }
    else if (v42)
    {
      goto LABEL_62;
    }
  }
  sub_BC0C08((uint64_t)&v51, v10, (uint64_t)&v58);
  long long v15 = v58;
  uint64_t v16 = v59;
  if (v58 != v59)
  {
    while (1)
    {
      unint64_t v62 = *v15;
      uint64_t v18 = sub_BC10A8((uint64_t)&v51, v62);
      uint64_t v19 = &v18[-*(int *)v18];
      if (*(unsigned __int16 *)v19 >= 5u && (unsigned __int16 v20 = *((_WORD *)v19 + 2)) != 0) {
        unint64_t v21 = *(unsigned int *)&v18[v20 + 4] | ((unint64_t)*(unsigned int *)&v18[v20] << 32);
      }
      else {
        unint64_t v21 = 0xFFFFFFFFLL;
      }
      unint64_t v22 = __ROR8__(v21, 32);
      if (HIDWORD(v22) == 0xFFFFFFFF || v22 == 0) {
        uint64_t v24 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v24 = v21;
      }
      if (!*(unsigned char *)(v3 + 2) && (sub_51D60((unsigned __int8 *)(*(void *)(v3 + 16) + 3896)) & 1) == 0)
      {
        int v25 = (int *)sub_8F4388(*(void *)(*(void *)(v3 + 16) + 4080) + 24, __ROR8__(v24, 32), 0, "market");
        uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
        if (*v26 >= 0xDu)
        {
          uint64_t v27 = v26[6];
          if (v27)
          {
            if (*((unsigned char *)v25 + v27)) {
              goto LABEL_17;
            }
          }
        }
      }
      if (!*(unsigned char *)(v3 + 3))
      {
        unsigned int v28 = sub_C2599C(*(void *)(v3 + 16) + 3896);
        int v29 = (int *)sub_8F4388(*(void *)(*(void *)(v3 + 16) + 4080) + 24, __ROR8__(v24, 32), 0, "market");
        unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
        if (*v30 >= 0x11u && (uint64_t v31 = v30[8]) != 0)
        {
          if (v28 < *((unsigned __int8 *)v29 + v31)) {
            goto LABEL_17;
          }
        }
        else if (!v28)
        {
          goto LABEL_17;
        }
      }
      if (sub_BC132C((uint64_t)&v51, &v62, v2))
      {
        int v17 = 1;
        long long v15 = v58;
        if (v58) {
          goto LABEL_64;
        }
        goto LABEL_65;
      }
LABEL_17:
      if (++v15 == v16)
      {
        int v17 = 0;
        long long v15 = v58;
        if (!v58) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
    }
  }
  int v17 = 0;
  if (v58)
  {
LABEL_64:
    uint64_t v59 = v15;
    operator delete(v15);
  }
LABEL_65:
  if (v60)
  {
    __n128 v61 = v60;
    operator delete(v60);
  }
  if (!v17) {
    goto LABEL_9;
  }
  uint64_t v46 = 1;
  uint64_t v47 = v56;
  if (!v56) {
    goto LABEL_73;
  }
LABEL_70:
  if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
LABEL_73:
  __n128 v48 = v54;
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v49 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  return v46;
}

void sub_BC06F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_BC0708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
    sub_B36CB4(&a9);
    _Unwind_Resume(a1);
  }
  sub_B36CB4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_BC077C(uint64_t a1)
{
  sub_A19FA8((uint64_t)&v13, *(void *)(a1 + 16), 0x1FFFFFFFEuLL);
  int v2 = v14;
  if (v18) {
    uint64_t v3 = v17;
  }
  else {
    uint64_t v3 = (unint64_t *)&v15;
  }
  unint64_t v4 = *v3;
  while (1)
  {
    if ((unint64_t)v2 >= v4) {
      return 0;
    }
    sub_A1DF34((uint64_t)v12, *(void **)(a1 + 16), __ROR8__(*v2, 32), 0, 1, 0);
    if (v12[9] < v12[10]) {
      return 1;
    }
    unint64_t v4 = (unint64_t)v15;
    int v2 = (void *)((char *)v14 + 12);
    int v14 = v2;
    if (v2 == v15)
    {
      int v2 = v16;
      unint64_t v6 = v17[0];
      int v14 = v16;
      int v5 = 1;
      unsigned __int8 v18 = 1;
      if (!*(unsigned char *)(v13 + 16)) {
        goto LABEL_7;
      }
    }
    else
    {
      int v5 = v18;
      unint64_t v6 = v17[0];
      if (!*(unsigned char *)(v13 + 16)) {
        goto LABEL_7;
      }
    }
    if (v5) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = (unint64_t)v15;
    }
    if ((unint64_t)v2 < v7)
    {
      while (1)
      {
        unint64_t v9 = __ROR8__(*v2, 32);
        if (HIDWORD(v9) == 1 && (v9 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v13 + 4120)))
        {
          LOBYTE(v5) = v18;
          int v2 = v14;
          unint64_t v4 = (unint64_t)v15;
          break;
        }
        unint64_t v4 = (unint64_t)v15;
        int v2 = (void *)((char *)v14 + 12);
        int v14 = v2;
        if (v2 == v15)
        {
          int v2 = v16;
          int v14 = v16;
          LOBYTE(v5) = 1;
          unsigned __int8 v18 = 1;
          if ((unint64_t)v16 >= v17[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v5) = v18;
          if (v18) {
            int v8 = v17;
          }
          else {
            int v8 = &v15;
          }
          if ((unint64_t)v2 >= *v8) {
            break;
          }
        }
      }
      unint64_t v6 = v17[0];
    }
LABEL_7:
    if ((_BYTE)v5) {
      unint64_t v4 = v6;
    }
  }
}

uint64_t sub_BC0928(uint64_t a1)
{
  sub_A28D38((uint64_t)&v13, *(void *)(a1 + 16), 0x1FFFFFFFDuLL);
  int v2 = v14;
  if (v18) {
    uint64_t v3 = v17;
  }
  else {
    uint64_t v3 = (unint64_t *)&v15;
  }
  unint64_t v4 = *v3;
  while (1)
  {
    if ((unint64_t)v2 >= v4) {
      return 0;
    }
    sub_A1DF34((uint64_t)v12, *(void **)(a1 + 16), __ROR8__(*v2, 32), 0, 1, 0);
    if (v12[9] < v12[10]) {
      return 1;
    }
    unint64_t v4 = (unint64_t)v15;
    int v2 = (void *)((char *)v14 + 12);
    int v14 = v2;
    if (v2 == v15)
    {
      int v2 = v16;
      unint64_t v6 = v17[0];
      int v14 = v16;
      int v5 = 1;
      unsigned __int8 v18 = 1;
      if (!*(unsigned char *)(v13 + 16)) {
        goto LABEL_7;
      }
    }
    else
    {
      int v5 = v18;
      unint64_t v6 = v17[0];
      if (!*(unsigned char *)(v13 + 16)) {
        goto LABEL_7;
      }
    }
    if (v5) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = (unint64_t)v15;
    }
    if ((unint64_t)v2 < v7)
    {
      while (1)
      {
        unint64_t v9 = __ROR8__(*v2, 32);
        if (HIDWORD(v9) == 1 && (v9 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v13 + 4120)))
        {
          LOBYTE(v5) = v18;
          int v2 = v14;
          unint64_t v4 = (unint64_t)v15;
          break;
        }
        unint64_t v4 = (unint64_t)v15;
        int v2 = (void *)((char *)v14 + 12);
        int v14 = v2;
        if (v2 == v15)
        {
          int v2 = v16;
          int v14 = v16;
          LOBYTE(v5) = 1;
          unsigned __int8 v18 = 1;
          if ((unint64_t)v16 >= v17[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v5) = v18;
          if (v18) {
            int v8 = v17;
          }
          else {
            int v8 = &v15;
          }
          if ((unint64_t)v2 >= *v8) {
            break;
          }
        }
      }
      unint64_t v6 = v17[0];
    }
LABEL_7:
    if ((_BYTE)v5) {
      unint64_t v4 = v6;
    }
  }
}

char *sub_BC0AD8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL result = sub_B37630(a1, a2, 1);
  if (result
    && (int v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]];
    int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (v10 = &v7[v9 + *(unsigned int *)&v7[v9]], uint64_t v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      unsigned __int8 v18 = &v13[v12];
      int v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        BOOL result = sub_BC0D38((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_BC0BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BC0C08@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL result = sub_B37630(a1, a2, 1);
  if (result
    && (int v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]];
    int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (v10 = &v7[v9 + *(unsigned int *)&v7[v9]], uint64_t v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      unsigned __int8 v18 = &v13[v12];
      int v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        BOOL result = sub_BC0D38((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_BC0D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BC0D38(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      long long v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    __n128 v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      unsigned __int16 v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unsigned __int16 v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint8x8_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    unsigned int v42 = v31 - 16;
    char v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unsigned int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_BC1090(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BC10A8(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  uint64_t v3 = sub_B37630(a1, a2, 1);
  if (!v3
    || (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0
    || (unint64_t v6 = &v3[v5 + *(unsigned int *)&v3[v5]], v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (uint64_t v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    uint64_t v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  uint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  unint64_t v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  long long v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_3E2ECC((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_BC12AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_BC132C(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  sub_BC1510(a1, *a2, (uint64_t)v35);
  if (!sub_34554(v35, a3)) {
    return 0;
  }
  sub_BC1734(a1, *a2, &__p);
  uint64_t v9 = (void **)__p;
  unint64_t v10 = v34;
  if (__p == v34)
  {
    uint64_t v22 = 0;
    int v23 = __p;
    if (!__p) {
      return v22;
    }
  }
  else
  {
    unsigned int v11 = a3[1];
    LODWORD(v6) = *a3;
    double v12 = (double)v6;
    uint64_t v13 = (void **)__p;
    while (1)
    {
      uint64_t v14 = *v13;
      long long v15 = v13[1];
      if (*v13 != v15)
      {
        int v16 = 0;
        do
        {
          unint64_t v17 = (_DWORD *)v14[1];
          unint64_t v18 = (_DWORD *)(*v14 + 12);
          if ((_DWORD *)*v14 != v17 && v18 != v17)
          {
            do
            {
              unsigned int v20 = *(v18 - 2);
              unsigned int v21 = v18[1];
              if (v20 >= v11)
              {
                if (v21 < v11)
                {
LABEL_20:
                  LODWORD(v7) = *v18;
                  LODWORD(v8) = *(v18 - 3);
                  double v8 = (double)*(unint64_t *)&v8;
                  double v7 = ((double)v11 - (double)v20)
                     / ((double)v21 - (double)v20)
                     * ((double)*(unint64_t *)&v7 - v8)
                     + v8;
                  if (v7 < v12) {
                    v16 ^= 1u;
                  }
                }
              }
              else if (v21 >= v11)
              {
                goto LABEL_20;
              }
              v18 += 3;
            }
            while (v18 != v17);
          }
          v14 += 3;
        }
        while (v14 != v15);
        if (v16) {
          break;
        }
      }
      v13 += 3;
      if (v13 == v34)
      {
        uint64_t v22 = 0;
        if (!__p) {
          return v22;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = 1;
    if (!__p) {
      return v22;
    }
LABEL_28:
    std::string v24 = v34;
    do
    {
      long long v27 = (char *)*(v24 - 3);
      v24 -= 3;
      unint64_t v26 = v27;
      if (v27)
      {
        uint64_t v28 = (char *)*(v10 - 2);
        std::string v25 = v26;
        if (v28 != v26)
        {
          int v29 = (char *)*(v10 - 2);
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 3);
            v29 -= 24;
            uint64_t v30 = v31;
            if (v31)
            {
              *((void *)v28 - 2) = v30;
              operator delete(v30);
            }
            uint64_t v28 = v29;
          }
          while (v29 != v26);
          std::string v25 = *v24;
        }
        *(v10 - 2) = v26;
        operator delete(v25);
      }
      unint64_t v10 = v24;
    }
    while (v24 != v9);
    int v23 = __p;
  }
  unsigned __int16 v34 = v9;
  operator delete(v23);
  return v22;
}

uint64_t sub_BC1510@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  uint64_t v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_BC192C((unsigned int *)&v26, &v22);
    unint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_BC16B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_BC1734(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  uint64_t v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_BC192C((unsigned int *)&v24, &v20);
    long long v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_BC18AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_BC192C(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_BC1A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_BC1A98()
{
  unk_25DFD47 = 16641;
  word_25DFD30 = 65;
  byte_25DFD5F = 1;
  byte_25DFD49 = 0;
}

void sub_BC1AC0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v16 = (unsigned int *)0x1FFFFFFFELL;
  sub_BC1C44(a1, (unint64_t *)&v16, (uint64_t)&__p);
  uint64_t v20 = 0x1FFFFFFFDLL;
  sub_BC1E4C(a1, (unint64_t *)&v20, (uint64_t)&v16);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = (unsigned int *)__p;
  long long v5 = v19;
  unint64_t v6 = v16;
  uint64_t v7 = v17;
  uint64_t v20 = (uint64_t)a2;
  if (__p != v19 && v16 != v17)
  {
    while (1)
    {
      unsigned int v9 = v6[1];
      unsigned int v10 = v4[1];
      BOOL v11 = v10 > v9;
      if (v10 >= v9 && ((unsigned int v12 = *v6, !v11) ? (v13 = *v4 >= v12) : (v13 = 1), v13))
      {
        uint64_t v14 = HIDWORD(*(void *)v4);
        if (v9 >= v14 && (v12 >= *(void *)v4 || v9 > v14))
        {
          sub_2A98DC((void ***)&v20, v4);
          v4 += 2;
        }
        v6 += 2;
        if (v4 == v5)
        {
LABEL_22:
          unint64_t v6 = v16;
          break;
        }
      }
      else
      {
        v4 += 2;
        if (v4 == v5) {
          goto LABEL_22;
        }
      }
      if (v6 == v7) {
        goto LABEL_22;
      }
    }
  }
  if (v6)
  {
    unint64_t v17 = v6;
    operator delete(v6);
  }
  if (__p)
  {
    uint64_t v19 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_BC1BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  long long v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    unint64_t v17 = __p;
    if (!__p)
    {
LABEL_3:
      long long v18 = a13;
      if (!a13) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  long long v18 = a13;
  if (!a13) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_BC1C44@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_A19FA8((uint64_t)&v20, *a1, *a2);
  unint64_t v4 = v21;
  long long v5 = v22;
  if (v25) {
    unint64_t v6 = (void *)v24;
  }
  else {
    unint64_t v6 = v22;
  }
  if (v21 >= v6)
  {
    uint64_t v14 = 0;
    long long v15 = 0;
    goto LABEL_38;
  }
  do
  {
    if (*((_DWORD *)v4 + 2))
    {
      unint64_t v4 = (void *)((char *)v4 + 12);
      std::string v21 = v4;
      if (v4 != v5) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v19 = __ROR8__(*v4, 32);
      sub_29603C((void **)a3, &v19);
      long long v5 = v22;
      unint64_t v4 = (void *)((char *)v21 + 12);
      std::string v21 = v4;
      if (v4 != v22)
      {
LABEL_14:
        int v7 = v25;
        unint64_t v8 = v24;
        if (!*(unsigned char *)(v20 + 16)) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    unint64_t v4 = v23;
    unint64_t v8 = v24;
    std::string v21 = v23;
    int v7 = 1;
    unsigned __int8 v25 = 1;
    if (!*(unsigned char *)(v20 + 16)) {
      goto LABEL_8;
    }
LABEL_18:
    if (v7) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = (unint64_t)v5;
    }
    if ((unint64_t)v4 < v10)
    {
      while (1)
      {
        unint64_t v12 = __ROR8__(*v4, 32);
        if (HIDWORD(v12) == 1 && (v12 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v20 + 4120)))
        {
          LOBYTE(v7) = v25;
          unint64_t v4 = v21;
          long long v5 = v22;
          break;
        }
        long long v5 = v22;
        unint64_t v4 = (void *)((char *)v21 + 12);
        std::string v21 = v4;
        if (v4 == v22)
        {
          unint64_t v4 = v23;
          std::string v21 = v23;
          LOBYTE(v7) = 1;
          unsigned __int8 v25 = 1;
          if ((unint64_t)v23 >= v24) {
            break;
          }
        }
        else
        {
          LOBYTE(v7) = v25;
          if (v25) {
            BOOL v11 = &v24;
          }
          else {
            BOOL v11 = (unint64_t *)&v22;
          }
          if ((unint64_t)v4 >= *v11) {
            break;
          }
        }
      }
      unint64_t v8 = v24;
    }
LABEL_8:
    if ((_BYTE)v7) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = (unint64_t)v5;
    }
  }
  while ((unint64_t)v4 < v9);
  long long v15 = *(char **)a3;
  uint64_t v14 = *(char **)(a3 + 8);
LABEL_38:
  unint64_t v16 = 126 - 2 * __clz((v14 - v15) >> 3);
  if (v14 == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  return sub_B6FCF0((uint64_t)v15, v14, (uint64_t)&v20, v17, 1);
}

void sub_BC1E24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BC1E4C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_A28D38((uint64_t)&v20, *a1, *a2);
  unint64_t v4 = v21;
  long long v5 = v22;
  if (v25) {
    unint64_t v6 = (void *)v24;
  }
  else {
    unint64_t v6 = v22;
  }
  if (v21 >= v6)
  {
    uint64_t v14 = 0;
    long long v15 = 0;
    goto LABEL_38;
  }
  do
  {
    if (*((_DWORD *)v4 + 2))
    {
      unint64_t v4 = (void *)((char *)v4 + 12);
      std::string v21 = v4;
      if (v4 != v5) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v19 = __ROR8__(*v4, 32);
      sub_29603C((void **)a3, &v19);
      long long v5 = v22;
      unint64_t v4 = (void *)((char *)v21 + 12);
      std::string v21 = v4;
      if (v4 != v22)
      {
LABEL_14:
        int v7 = v25;
        unint64_t v8 = v24;
        if (!*(unsigned char *)(v20 + 16)) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    unint64_t v4 = v23;
    unint64_t v8 = v24;
    std::string v21 = v23;
    int v7 = 1;
    unsigned __int8 v25 = 1;
    if (!*(unsigned char *)(v20 + 16)) {
      goto LABEL_8;
    }
LABEL_18:
    if (v7) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = (unint64_t)v5;
    }
    if ((unint64_t)v4 < v10)
    {
      while (1)
      {
        unint64_t v12 = __ROR8__(*v4, 32);
        if (HIDWORD(v12) == 1 && (v12 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v20 + 4120)))
        {
          LOBYTE(v7) = v25;
          unint64_t v4 = v21;
          long long v5 = v22;
          break;
        }
        long long v5 = v22;
        unint64_t v4 = (void *)((char *)v21 + 12);
        std::string v21 = v4;
        if (v4 == v22)
        {
          unint64_t v4 = v23;
          std::string v21 = v23;
          LOBYTE(v7) = 1;
          unsigned __int8 v25 = 1;
          if ((unint64_t)v23 >= v24) {
            break;
          }
        }
        else
        {
          LOBYTE(v7) = v25;
          if (v25) {
            BOOL v11 = &v24;
          }
          else {
            BOOL v11 = (unint64_t *)&v22;
          }
          if ((unint64_t)v4 >= *v11) {
            break;
          }
        }
      }
      unint64_t v8 = v24;
    }
LABEL_8:
    if ((_BYTE)v7) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = (unint64_t)v5;
    }
  }
  while ((unint64_t)v4 < v9);
  long long v15 = *(char **)a3;
  uint64_t v14 = *(char **)(a3 + 8);
LABEL_38:
  unint64_t v16 = 126 - 2 * __clz((v14 - v15) >> 3);
  if (v14 == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  return sub_B6FCF0((uint64_t)v15, v14, (uint64_t)&v20, v17, 1);
}

void sub_BC202C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_BC2054()
{
  unk_25DFD77 = 16641;
  word_25DFD60 = 65;
  byte_25DFD8F = 1;
  byte_25DFD79 = 0;
}

void sub_BC207C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)a1)
  {
    sub_BC236C((uint64_t *)a1, a2, (uint64_t)v18);
    long long v5 = (uint64_t **)sub_37B398(*(uint64_t **)(a1 + 8));
    char v15 = 7;
    strcpy((char *)__p, "transit");
    sub_5BC948(v5, (uint64_t)v18, (void (__cdecl **)(std::stringbuf *__hidden))__p, (uint64_t)a3);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)__p);
      unint64_t v6 = sub_188FC78(__p, (uint64_t)"Determined transit regions: ", 28);
      sub_68F24(*a3, a3[1], ", ");
      if ((v13 & 0x80u) == 0) {
        int v7 = v12;
      }
      else {
        int v7 = (void **)v12[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (uint64_t)v12[1];
      }
      sub_188FC78(v6, (uint64_t)v7, v8);
      if ((char)v13 < 0) {
        operator delete(v12[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v12, 2u);
      if ((char)v13 < 0) {
        operator delete(v12[0]);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    unint64_t v9 = v19;
    if (v19)
    {
      do
      {
        unint64_t v10 = (void *)*v9;
        operator delete(v9);
        unint64_t v9 = v10;
      }
      while (v10);
    }
    BOOL v11 = (void *)v18[0];
    v18[0] = 0;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_BC22CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_1A668(v16);
  sub_12168(v17 - 72);
  _Unwind_Resume(a1);
}

void sub_BC2314(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  sub_12168(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_BC2334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_12168(v18 - 72);
    _Unwind_Resume(a1);
  }
  sub_12168(v18 - 72);
  _Unwind_Resume(a1);
}

void sub_BC236C(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int64x2_t v12 = 0uLL;
  unint64_t v13 = 0;
  sub_BC2FD0((unint64_t *)&v12, 0xD37A6F4DE9BD37A7 * ((uint64_t)(a2[5] - a2[4]) >> 3));
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  if (v6 != v7)
  {
    uint64_t v8 = (void *)v12.i64[1];
    do
    {
      while ((unint64_t)v8 >= v13)
      {
        uint64_t v8 = (void *)sub_BC3210(&v12, v6);
        v12.i64[1] = (uint64_t)v8;
        v6 += 184;
        if (v6 == v7) {
          goto LABEL_6;
        }
      }
      sub_8EB7C4(v8, v6);
      v8 += 23;
      v12.i64[1] = (uint64_t)v8;
      v6 += 184;
    }
    while (v6 != v7);
  }
LABEL_6:
  sub_BC2CAC(a1, a3, v12.i64);
  uint64_t v14 = &v12;
  sub_BC2EEC((void ***)&v14);
  int64x2_t v12 = 0uLL;
  unint64_t v13 = 0;
  sub_BC2FD0((unint64_t *)&v12, 0xD37A6F4DE9BD37A7 * ((uint64_t)(a2[8] - a2[7]) >> 3));
  uint64_t v9 = a2[7];
  uint64_t v10 = a2[8];
  if (v9 != v10)
  {
    BOOL v11 = (void *)v12.i64[1];
    do
    {
      if ((unint64_t)v11 >= v13)
      {
        BOOL v11 = (void *)sub_BC3210(&v12, v9);
      }
      else
      {
        sub_8EB7C4(v11, v9);
        v11 += 23;
      }
      v12.i64[1] = (uint64_t)v11;
      v9 += 184;
    }
    while (v9 != v10);
  }
  sub_BC2CAC(a1, a3, v12.i64);
  uint64_t v14 = &v12;
  sub_BC2EEC((void ***)&v14);
}

void sub_BC2514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_BC2EEC((void ***)va);
  sub_12168(v4);
  _Unwind_Resume(a1);
}

void sub_BC2534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_BC2EEC(&a12);
  sub_12168(v12);
  _Unwind_Resume(a1);
}

void sub_BC259C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)a1)
  {
    sub_BC288C(a1, a2, (uint64_t)v18);
    long long v5 = (uint64_t **)sub_37B398(*(uint64_t **)(a1 + 8));
    char v15 = 7;
    strcpy((char *)__p, "transit");
    sub_5BC948(v5, (uint64_t)v18, (void (__cdecl **)(std::stringbuf *__hidden))__p, (uint64_t)a3);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)__p);
      uint64_t v6 = sub_188FC78(__p, (uint64_t)"Determined transit regions: ", 28);
      sub_68F24(*a3, a3[1], ", ");
      if ((v13 & 0x80u) == 0) {
        uint64_t v7 = v12;
      }
      else {
        uint64_t v7 = (void **)v12[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v8 = v13;
      }
      else {
        uint64_t v8 = (uint64_t)v12[1];
      }
      sub_188FC78(v6, (uint64_t)v7, v8);
      if ((char)v13 < 0) {
        operator delete(v12[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v12, 2u);
      if ((char)v13 < 0) {
        operator delete(v12[0]);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v9 = v19;
    if (v19)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    BOOL v11 = (void *)v18[0];
    v18[0] = 0;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_BC27EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_1A668(v16);
  sub_12168(v17 - 72);
  _Unwind_Resume(a1);
}

void sub_BC2834(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  sub_12168(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_BC2854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_12168(v18 - 72);
    _Unwind_Resume(a1);
  }
  sub_12168(v18 - 72);
  _Unwind_Resume(a1);
}

void sub_BC288C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *(void *)(a2 + 1584);
  uint64_t v5 = *(void *)(a2 + 1592);
  if (v4 != v5)
  {
    while (1)
    {
      int v7 = *(_DWORD *)(v4 + 376);
      if (v7 != 2)
      {
        if (v7 == 1)
        {
          sub_8EB7C4(&v25, v4);
          uint64_t v20 = 0;
          std::string v21 = 0;
          long long v22 = 0;
          std::string::size_type v23 = &v20;
          LOBYTE(v24) = 0;
          uint64_t v20 = (char *)operator new(0xB8uLL);
          std::string v21 = v20;
          long long v22 = v20 + 184;
          std::string v21 = (char *)sub_BC37F8((uint64_t)&v22, (uint64_t)&v25, (uint64_t)&v35, (uint64_t)v20);
          sub_BC2CAC((uint64_t *)a1, a3, (uint64_t *)&v20);
          std::string::size_type v23 = &v20;
          sub_BC2EEC((void ***)&v23);
          if (v33)
          {
            unsigned __int16 v34 = v33;
            operator delete(v33);
          }
          if (v31)
          {
            uint64_t v32 = v31;
            operator delete(v31);
          }
          if (v29)
          {
            uint64_t v30 = v29;
            operator delete(v29);
          }
          if (__p)
          {
            uint64_t v28 = __p;
            operator delete(__p);
          }
        }
        else if (!v7)
        {
          uint64_t v8 = *(unint64_t **)(v4 + 24);
          for (uint64_t i = *(unint64_t **)(v4 + 32); v8 != i; ++v8)
          {
            unint64_t v10 = *v8;
            uint64_t v11 = sub_375500(*(void **)(a1 + 8));
            uint64_t v12 = (int *)sub_498D5C(v11, v10, 0, "stop");
            uint64_t v13 = (uint64_t)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6);
            uint64_t v14 = *(unsigned int *)v13;
            LODWORD(v13) = *(_DWORD *)(v13 + 4);
            if (v13 >= 0xFFFFFFFE) {
              uint64_t v13 = 4294967294;
            }
            else {
              uint64_t v13 = v13;
            }
            uint64_t v25 = v14 | (v13 << 32);
            int v26 = 0x7FFFFFFF;
            sub_BC3454(a3, (unsigned int *)&v25, (uint64_t)&v25);
          }
        }
        goto LABEL_5;
      }
      sub_48381C((uint64_t)&v25, v4);
      sub_483E44(&v20, (uint64_t)&v25, 1uLL);
      unint64_t v16 = v20;
      char v15 = v21;
      if (v20 != v21) {
        break;
      }
      if (v20) {
        goto LABEL_30;
      }
LABEL_4:
      sub_402C7C((uint64_t)&v25);
LABEL_5:
      v4 += 384;
      if (v4 == v5) {
        return;
      }
    }
    do
    {
      if (sub_DAA288((uint64_t)v16))
      {
        int v17 = *((_DWORD *)v16 + 2);
        std::string::size_type v23 = *(char ***)v16;
        int v24 = v17;
        sub_BC3454(a3, (unsigned int *)&v23, (uint64_t)&v23);
      }
      v16 += 376;
    }
    while (v16 != v15);
    unint64_t v16 = v20;
    if (!v20) {
      goto LABEL_4;
    }
LABEL_30:
    uint64_t v18 = (uint64_t)v21;
    uint64_t v19 = v16;
    if (v21 != v16)
    {
      do
        uint64_t v18 = sub_402C7C(v18 - 376);
      while ((char *)v18 != v16);
      uint64_t v19 = v20;
    }
    std::string v21 = v16;
    operator delete(v19);
    goto LABEL_4;
  }
}

void sub_BC2B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy((va_list)v11, va);
  sub_BC2EEC((void ***)va1);
  sub_BC2E88((uint64_t *)va2);
  sub_12168(v5);
  _Unwind_Resume(a1);
}

void sub_BC2B90(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_BC2BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_402C7C((uint64_t)va);
  sub_12168(v10);
  _Unwind_Resume(a1);
}

void sub_BC2BE4(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BC2BF8(uint64_t a1, uint64_t a2, void *a3)
{
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B5EB0;
  strcpy((char *)__p, "use_nested_region_polygons");
  BOOL v6 = sub_29D62C(a3, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_BC2C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_BC2CAC(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    BOOL v6 = result;
    uint64_t v7 = *a3;
    do
    {
      uint64_t v8 = *(void *)(v7 + 104);
      if (v8 != *(void *)(v7 + 112))
      {
        return sub_4BC598(a2, (unsigned int *)(v8 + 8), v8 + 8);
      }
      v7 += 184;
    }
    while (v7 != v4);
    while (1)
    {
      long long v9 = *(_DWORD **)(v3 + 160);
      if (v9 != *(_DWORD **)(v3 + 168)) {
        break;
      }
LABEL_6:
      v3 += 184;
      if (v3 == v4) {
        return result;
      }
    }
    BOOL result = (uint64_t *)sub_375500((void *)v6[1]);
    switch(*v9)
    {
      case 0:
        uint64_t v10 = (int *)sub_498D5C((uint64_t)result, v9[2] | ((unint64_t)v9[1] << 32), 0, "stop");
        goto LABEL_15;
      case 1:
        uint64_t v10 = (int *)sub_8ED3D4((uint64_t)result, v9[2] | ((unint64_t)v9[1] << 32), 0, "hall");
        goto LABEL_15;
      case 2:
        uint64_t v10 = (int *)sub_8ED928((uint64_t)result, v9[2] | ((unint64_t)v9[1] << 32), 0, "station");
LABEL_15:
        unsigned __int16 v11 = *(_WORD *)((char *)v10 - *v10 + 6);
        break;
      case 3:
        uint64_t v10 = (int *)sub_499804((uint64_t)result, v9[2] | ((unint64_t)v9[1] << 32), 0, "access point");
        unsigned __int16 v11 = *(_WORD *)((char *)v10 - *v10 + 14);
        break;
      case 4:
        uint64_t v10 = (int *)sub_4992B0((uint64_t)result, v9[2] | ((unint64_t)v9[1] << 32), 0, "road access point");
        unsigned __int16 v11 = *(_WORD *)((char *)v10 - *v10 + 8);
        break;
      default:
        goto LABEL_6;
    }
    uint64_t v12 = (uint64_t)v10 + v11;
    uint64_t v13 = *(unsigned int *)v12;
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
    if (v12 >= 0xFFFFFFFE) {
      uint64_t v12 = 4294967294;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v14 = v13 | (v12 << 32);
    int v15 = 0x7FFFFFFF;
    return sub_BC3454(a2, (unsigned int *)&v14, (uint64_t)&v14);
  }
  return result;
}

void *sub_BC2E88(void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_BC2EEC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
    }
    else
    {
      do
      {
        BOOL v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v7 = (void *)*((void *)v4 - 7);
        if (v7)
        {
          *((void *)v4 - 6) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v4 - 10);
        if (v8)
        {
          *((void *)v4 - 9) = v8;
          operator delete(v8);
        }
        long long v9 = (void *)*((void *)v4 - 14);
        if (v9)
        {
          *((void *)v4 - 13) = v9;
          operator delete(v9);
        }
        v4 -= 184;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
      v1[1] = v2;
    }
    operator delete(v5);
  }
}

unint64_t *sub_BC2FD0(unint64_t *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  unint64_t v3 = *result;
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(v2 - *result) >> 3) < a2)
  {
    uint64_t v4 = (int64x2_t *)result;
    if (a2 >= 0x1642C8590B21643) {
      sub_2E00();
    }
    unint64_t v5 = result[1];
    unint64_t v23 = 0;
    int v24 = result + 2;
    uint64_t v6 = 184 * a2;
    uint64_t v7 = (char *)operator new(184 * a2);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v19 = vdupq_n_s64(v3);
      uint64_t v20 = &v7[v5 - v3];
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v5 + v9;
        unsigned __int16 v11 = &v8[v9];
        *(_OWORD *)(v11 - 184) = *(_OWORD *)(v5 + v9 - 184);
        long long v12 = *(_OWORD *)(v5 + v9 - 168);
        long long v13 = *(_OWORD *)(v5 + v9 - 152);
        long long v14 = *(_OWORD *)(v5 + v9 - 136);
        *(_DWORD *)(v11 - 121) = *(_DWORD *)(v5 + v9 - 121);
        *(_OWORD *)(v11 - 136) = v14;
        *(_OWORD *)(v11 - 152) = v13;
        *(_OWORD *)(v11 - 168) = v12;
        *((_OWORD *)v11 - 7) = *(_OWORD *)(v5 + v9 - 112);
        *((void *)v11 - 12) = *(void *)(v5 + v9 - 96);
        *(void *)(v10 - 112) = 0;
        *(void *)(v10 - 104) = 0;
        int v15 = *(_DWORD *)(v5 + v9 - 88);
        char v16 = *(unsigned char *)(v5 + v9 - 84);
        *(void *)(v10 - 96) = 0;
        *(v11 - 84) = v16;
        *((_DWORD *)v11 - 22) = v15;
        *((_OWORD *)v11 - 5) = *(_OWORD *)(v5 + v9 - 80);
        *((void *)v11 - 8) = *(void *)(v5 + v9 - 64);
        *(void *)(v10 - 80) = 0;
        *(void *)(v10 - 72) = 0;
        *(void *)(v10 - 64) = 0;
        *(_OWORD *)(v11 - 56) = *(_OWORD *)(v5 + v9 - 56);
        *((void *)v11 - 5) = *(void *)(v5 + v9 - 40);
        *(void *)(v10 - 56) = 0;
        *(void *)(v10 - 48) = 0;
        int v17 = *(_DWORD *)(v5 + v9 - 32);
        int v18 = *(_DWORD *)(v5 + v9 - 29);
        *(void *)(v10 - 40) = 0;
        *(_DWORD *)(v11 - 29) = v18;
        *((_DWORD *)v11 - 8) = v17;
        *(_OWORD *)(v11 - 24) = *(_OWORD *)(v5 + v9 - 24);
        *((void *)v11 - 1) = *(void *)(v5 + v9 - 8);
        *(void *)(v10 - 24) = 0;
        *(void *)(v10 - 16) = 0;
        *(void *)(v10 - 8) = 0;
        v9 -= 184;
      }
      while (v5 + v9 != v3);
      int64x2_t v19 = *v4;
      unint64_t v2 = v4[1].u64[0];
      uint64_t v20 = &v8[v9];
    }
    v4->i64[0] = (uint64_t)v20;
    v4->i64[1] = (uint64_t)v8;
    int64x2_t v22 = v19;
    v4[1].i64[0] = (uint64_t)&v7[v6];
    unint64_t v23 = v2;
    uint64_t v21 = v19.i64[0];
    return (unint64_t *)sub_BC3178((uint64_t)&v21);
  }
  return result;
}

uint64_t sub_BC3178(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    unint64_t v5 = *(void **)(i - 56);
    if (v5)
    {
      *(void *)(i - 48) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(i - 80);
    if (v6)
    {
      *(void *)(i - 72) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 112);
    if (v7)
    {
      *(void *)(i - 104) = v7;
      operator delete(v7);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_BC3210(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  int v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(184 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v23 = v7;
  v24.i64[0] = (uint64_t)&v7[184 * v3];
  uint64_t v25 = &v7[184 * v6];
  sub_8EB7C4(v24.i64[0], a2);
  uint64_t v8 = v24.i64[0];
  uint64_t v9 = v24.i64[0] + 184;
  v24.i64[1] = v24.i64[0] + 184;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v10 + v12;
      uint64_t v14 = v8 + v12;
      *(_OWORD *)(v14 - 184) = *(_OWORD *)(v10 + v12 - 184);
      long long v15 = *(_OWORD *)(v10 + v12 - 168);
      long long v16 = *(_OWORD *)(v10 + v12 - 152);
      long long v17 = *(_OWORD *)(v10 + v12 - 136);
      *(_DWORD *)(v14 - 121) = *(_DWORD *)(v10 + v12 - 121);
      *(_OWORD *)(v14 - 136) = v17;
      *(_OWORD *)(v14 - 152) = v16;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 112) = 0;
      *(_OWORD *)(v14 - 168) = v15;
      *(_OWORD *)(v14 - 112) = *(_OWORD *)(v10 + v12 - 112);
      *(void *)(v14 - 96) = *(void *)(v10 + v12 - 96);
      *(void *)(v13 - 112) = 0;
      *(void *)(v13 - 104) = 0;
      *(void *)(v13 - 96) = 0;
      int v18 = *(_DWORD *)(v10 + v12 - 88);
      *(unsigned char *)(v14 - 84) = *(unsigned char *)(v10 + v12 - 84);
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(_DWORD *)(v14 - 88) = v18;
      *(void *)(v14 - 80) = 0;
      *(_OWORD *)(v14 - 80) = *(_OWORD *)(v10 + v12 - 80);
      *(void *)(v14 - 64) = *(void *)(v10 + v12 - 64);
      *(void *)(v13 - 80) = 0;
      *(void *)(v13 - 72) = 0;
      *(void *)(v13 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v14 - 40) = *(void *)(v10 + v12 - 40);
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      int v19 = *(_DWORD *)(v10 + v12 - 32);
      *(_DWORD *)(v14 - 29) = *(_DWORD *)(v10 + v12 - 29);
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(_DWORD *)(v14 - 32) = v19;
      *(void *)(v14 - 24) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v14 - 8) = *(void *)(v10 + v12 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v12 -= 184;
    }
    while (v10 + v12 != v11);
    int64x2_t v20 = *a1;
    uint64_t v9 = v24.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v24 = v20;
  uint64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  uint64_t v25 = v21;
  unint64_t v23 = (char *)v20.i64[0];
  sub_BC3178((uint64_t)&v23);
  return v9;
}

void sub_BC3440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BC3178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_BC3454(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7 + (((v6 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v6 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v6 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v9 = (int)a2[2];
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v6 && *(uint64_t *)((char *)v14 + 20) == __PAIR64__(v9, v7)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v3)
            {
              goto LABEL_25;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v6 && *(uint64_t *)((char *)v14 + 20) == __PAIR64__(v9, v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_25:
  int v18 = operator new(0x20uLL);
  *int v18 = 0;
  v18[1] = v10;
  void v18[2] = *(void *)a3;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(a3 + 8);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    int64x2_t v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_28:
      *int v18 = *v22;
LABEL_63:
      void *v22 = v18;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_39;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        uint64_t v3 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        int64x2_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v3 = v10;
        uint64_t v21 = *(void *)a1;
        int64x2_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v3 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      int64x2_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_28;
      }
    }
  }
  *int v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    int64x2_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_BC37E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BC37F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_8EB7C4((void *)(a4 + v7), a2 + v7);
      v7 += 184;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_BC3858(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE620(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_BC3874()
{
  unk_25DFDA7 = 16641;
  word_25DFD90 = 65;
  byte_25DFDBF = 1;
  byte_25DFDA9 = 0;
}

uint64_t sub_BC389C(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x38uLL);
  long long v9 = xmmword_20B9A20;
  strcpy((char *)__p, "enable_blocking_incidents_for_regular_alternatives");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B91B0;
  strcpy((char *)__p, "past_search_interval_minutes");
  *(_DWORD *)(a1 + 4) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9390;
  strcpy((char *)__p, "past_num_additional_alternatives");
  int v5 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(_DWORD *)(a1 + 8) = v5;
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B9800;
  strcpy((char *)__p, "future_search_interval_minutes");
  *(_DWORD *)(a1 + 12) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9280;
  strcpy((char *)__p, "future_num_additional_alternatives");
  int v6 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_BC3A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BC3AC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_BC389C(a1, a3);
  *(void *)(result + 24) = a2;
  return result;
}

void sub_BC3AEC(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 72) = -1;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 112) = 1065353216;
  LOBYTE(v30) = 0;
  *(void *)((char *)&v30 + 4) = 0x8000000080000000;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  *(_OWORD *)std::string __p = 0u;
  uint64_t v36 = 0;
  *(_OWORD *)uint8x8_t v37 = xmmword_20EC810;
  *(_WORD *)&v37[16] = 0;
  *(void *)&v37[20] = 0x8000000080000000;
  *(_WORD *)&v37[28] = 0;
  *(_OWORD *)&v37[32] = xmmword_20EB6B0;
  *(void *)&v37[48] = 0xFFFFFFFF7FFFFFFFLL;
  *(_DWORD *)&v37[56] = -1;
  v37[60] = 1;
  uint64_t v39 = 0;
  long long v38 = 0uLL;
  LOBYTE(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = 0x8000000080000000;
  v41[1] = 0;
  uint64_t v42 = 0;
  uint64_t v6 = *((void *)a1 + 3) + 3896;
  v41[0] = 0;
  int v7 = sub_491B28(v6);
  if (v7 >= *a1) {
    int v8 = *a1;
  }
  else {
    int v8 = v7;
  }
  sub_C259A4(*((void *)a1 + 3) + 3896, v8);
  sub_BC3EF8((uint64_t)a1, a2, (uint64_t)&v34[1]);
  sub_C259A4(*((void *)a1 + 3) + 3896, v7);
  sub_BC4570((uint64_t)a1, (uint64_t *)&v34[1]);
  unint64_t v27 = 0;
  uint8x8_t v28 = 0;
  uint64_t v29 = 0;
  if (v7 >= 1) {
    int v9 = 1;
  }
  else {
    int v9 = v7;
  }
  sub_C259A4(*((void *)a1 + 3) + 3896, v9);
  sub_BC3EF8((uint64_t)a1, a2, (uint64_t)&v27);
  sub_C259A4(*((void *)a1 + 3) + 3896, v7);
  sub_BC4570((uint64_t)a1, (uint64_t *)&v27);
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  unint64_t v10 = (char *)v27;
  unint64_t v11 = v28;
  char v43 = (char **)&v25;
  while (v10 != v11)
  {
    if (v10[13]) {
      sub_BC5118(&v43, v10);
    }
    v10 += 60;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v25;
  uint64_t v36 = v26;
  sub_BC3EF8((uint64_t)a1, a2, (uint64_t)__p);
  uint8x8_t v12 = (long long *)v34[1];
  if (v34[1] != v34[2] || __p[0] != __p[1])
  {
    if (__p[0] != __p[1]) {
      uint8x8_t v12 = (long long *)__p[0];
    }
    long long v13 = *v12;
    long long v14 = v12[1];
    long long v15 = v12[2];
    *(_OWORD *)&v37[45] = *(long long *)((char *)v12 + 41);
    *(_OWORD *)&v37[20] = v14;
    *(_OWORD *)&v37[36] = v15;
    *(_OWORD *)&v37[4] = v13;
    unint64_t v16 = *(void *)(a3 + 56);
    if (v16 >= *(void *)(a3 + 64))
    {
      unint64_t v24 = sub_B62D1C((int64x2_t *)(a3 + 48), (uint64_t)&v30);
    }
    else
    {
      *(_OWORD *)unint64_t v16 = v30;
      long long v17 = v31;
      long long v18 = v33;
      float v19 = v34[0];
      *(_OWORD *)(v16 + 32) = v32;
      *(_OWORD *)(v16 + 48) = v18;
      *(_OWORD *)(v16 + 16) = v17;
      *(void *)(v16 + 64) = v19;
      *(void *)(v16 + 72) = 0;
      *(void *)(v16 + 80) = 0;
      *(void *)(v16 + 88) = 0;
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&v34[1];
      v34[1] = 0;
      v34[2] = 0;
      *(void **)(v16 + 88) = v34[3];
      *(void *)(v16 + 96) = 0;
      v34[3] = 0;
      *(void *)(v16 + 104) = 0;
      *(void *)(v16 + 112) = 0;
      *(_OWORD *)(v16 + 96) = *(_OWORD *)__p;
      *(void *)(v16 + 112) = v36;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      long long v20 = *(_OWORD *)v37;
      long long v21 = *(_OWORD *)&v37[16];
      long long v22 = *(_OWORD *)&v37[32];
      *(_OWORD *)(v16 + 165) = *(_OWORD *)&v37[45];
      *(_OWORD *)(v16 + 152) = v22;
      *(_OWORD *)(v16 + 136) = v21;
      *(_OWORD *)(v16 + 120) = v20;
      *(void *)(v16 + 184) = 0;
      *(void *)(v16 + 192) = 0;
      *(void *)(v16 + 200) = 0;
      *(_OWORD *)(v16 + 184) = v38;
      *(void *)(v16 + 200) = v39;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      uint64_t v23 = v40[0];
      *(_DWORD *)(v16 + 216) = v40[1];
      *(void *)(v16 + 208) = v23;
      *(void *)(v16 + 224) = 0;
      *(void *)(v16 + 232) = 0;
      *(void *)(v16 + 240) = 0;
      *(_OWORD *)(v16 + 224) = *(_OWORD *)v41;
      *(void *)(v16 + 240) = v42;
      v41[0] = 0;
      v41[1] = 0;
      uint64_t v42 = 0;
      unint64_t v24 = (char *)(v16 + 248);
    }
    *(void *)(a3 + 56) = v24;
  }
  if (v27)
  {
    uint8x8_t v28 = (char *)v27;
    operator delete(v27);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if ((void)v38)
  {
    *((void *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v34[1])
  {
    v34[2] = v34[1];
    operator delete(v34[1]);
  }
}

void sub_BC3E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!__p)
  {
    sub_B6086C(&a15);
    sub_A05A3C(v15);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_B6086C(&a15);
  sub_A05A3C(v15);
  _Unwind_Resume(a1);
}

void sub_BC3EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_BC4750(a1, a2, (void **)&v62);
  int v5 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 28) == -1 || v5 == 0)
  {
    int v53 = -1;
    if (*(_DWORD *)(a2 + 28) != -1 && v5 != 0) {
      goto LABEL_16;
    }
LABEL_11:
    int v52 = -1;
    goto LABEL_17;
  }
  int v8 = sub_B61134((void *)(*(void *)(a1 + 24) + 4184), *(void *)(a2 + 28), *(_DWORD *)(a2 + 40));
  int v53 = v8;
  if (*(_DWORD *)(a2 + 28) == -1 || *(_DWORD *)(a2 + 32) == 0) {
    goto LABEL_11;
  }
LABEL_16:
  int v52 = sub_B60FC4((void *)(*(void *)(a1 + 24) + 4184), *(void *)(a2 + 28), *(_DWORD *)(a2 + 40));
LABEL_17:
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10 <= *(_DWORD *)(a2 + 12)) {
    unsigned int v10 = *(_DWORD *)(a2 + 12);
  }
  unsigned int v57 = v10;
  unint64_t v11 = v62;
  size_t v50 = v63;
  if (v62 != v63)
  {
    int v12 = *(_DWORD *)(a1 + 12);
    if (v12 <= *(_DWORD *)(a2 + 8)) {
      int v12 = *(_DWORD *)(a2 + 8);
    }
    int v56 = v12;
    uint64_t v49 = a2 + 48;
    unsigned int v55 = *(_DWORD *)(a1 + 8);
    int v54 = *(_DWORD *)(a1 + 4);
    while (1)
    {
      unint64_t v13 = *v11;
      sub_A1E9A0((uint64_t)v61, *(void *)(a1 + 24), *v11, 0, 0, 0);
      if (*(void *)(a2 + 72) == *(void *)(a2 + 80)) {
        sub_BC48F0((uint64_t)v61, v49, &v59);
      }
      else {
        sub_BC4C38((uint64_t)v61, v49, a2 + 72, &v59);
      }
      long long v15 = v59;
      long long v14 = v60;
      if (v59 != v60) {
        break;
      }
LABEL_89:
      if (v15)
      {
        uint64_t v60 = v15;
        operator delete(v15);
      }
      if (++v11 == v50) {
        goto LABEL_91;
      }
    }
    uint64_t v51 = v11;
    while (1)
    {
      unsigned int v17 = *v15;
      unsigned int v16 = v15[1];
      long long v18 = (void *)(*(void *)(a1 + 24) + 4136);
      if (sub_A10E20(v18, SHIDWORD(v13)))
      {
        float v19 = (int *)sub_A1120C(*(void *)(*v18 + 3944), v13);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v46 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v20 = *v18;
        if (dword_24F7300 == HIDWORD(v13))
        {
          long long v21 = *(unsigned int **)(*(void *)(v20 + 3976) + 72);
          if (!v21)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v64, "Realtime stop pattern quad data requested on nullptr buffer");
            int64_t v48 = (void *)sub_2F404((uint64_t)exception, v64);
          }
          long long v22 = (int *)((char *)v21 + *v21);
          uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
          if (*v23 >= 5u && (uint64_t v24 = v23[2]) != 0) {
            long long v25 = (unsigned int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
          }
          else {
            long long v25 = 0;
          }
          float v19 = (int *)sub_A1139C(v25, v13);
        }
        else
        {
          float v19 = (int *)sub_A11500(v20 + 24, v13, 0, "stop pattern");
        }
      }
      uint64_t v26 = (unsigned __int16 *)((char *)v19 - *v19);
      unsigned int v27 = *v26;
      if (v27 < 5)
      {
        uint8x8_t v28 = 0;
        goto LABEL_46;
      }
      if (v26[2])
      {
        uint8x8_t v28 = (char *)v19 + v26[2] + *(unsigned int *)((char *)v19 + v26[2]);
        if (v27 < 9) {
          goto LABEL_46;
        }
      }
      else
      {
        uint8x8_t v28 = 0;
        if (v27 < 9) {
          goto LABEL_46;
        }
      }
      uint64_t v45 = v26[4];
      if (v45)
      {
        uint64_t v29 = (unsigned int *)((char *)v19 + v45 + *(unsigned int *)((char *)v19 + v45));
        goto LABEL_47;
      }
LABEL_46:
      uint64_t v29 = 0;
LABEL_47:
      uint64_t v30 = sub_A10764(v29, v17);
      long long v32 = *(void **)(a2 + 96);
      long long v31 = *(void **)(a2 + 104);
      if (v32 != v31)
      {
        uint64_t v33 = __ROR8__(*(void *)&v28[8 * *(unsigned __int8 *)(v30 + 14) + 4], 32);
        while (*v32 != v33)
        {
          if (++v32 == v31) {
            goto LABEL_29;
          }
        }
        if (v32 == v31) {
          goto LABEL_29;
        }
      }
      unsigned __int16 v34 = (void *)(*(void *)(a1 + 24) + 4136);
      unint64_t v35 = sub_B6E894(v34, v13, v17);
      if (HIDWORD(v35)) {
        BOOL v36 = v35 == 0xFFFFFFFFLL;
      }
      else {
        BOOL v36 = 1;
      }
      if (v36)
      {
        LODWORD(v37) = -1;
        if (*(_DWORD *)(a2 + 28) == -1) {
          goto LABEL_70;
        }
      }
      else
      {
        long long v38 = (int *)sub_B61ADC(*v34 + 24, v35, 0, "routing headsign");
        uint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
        if (*v39 < 5u)
        {
          LODWORD(v37) = 0;
          if (*(_DWORD *)(a2 + 28) == -1) {
            goto LABEL_70;
          }
        }
        else
        {
          uint64_t v37 = v39[2];
          if (v37) {
            LODWORD(v37) = *(int *)((char *)v38 + v37);
          }
          if (*(_DWORD *)(a2 + 28) == -1) {
            goto LABEL_70;
          }
        }
      }
      if (*(_DWORD *)(a2 + 32) && !*(unsigned char *)(a2 + 121) && v37 != v53) {
        goto LABEL_29;
      }
LABEL_70:
      uint64_t v40 = (void *)(*(void *)(a1 + 24) + 4136);
      unint64_t v41 = sub_B6EA30(v40, v13, v17);
      LODWORD(v42) = -1;
      if (!HIDWORD(v41) || v41 == 0xFFFFFFFFLL) {
        goto LABEL_75;
      }
      char v43 = (int *)sub_B61568(*v40 + 24, v41, 0, "routing direction name");
      uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
      if (*v44 >= 5u)
      {
        uint64_t v42 = v44[2];
        if (v42) {
          LODWORD(v42) = *(int *)((char *)v43 + v42);
        }
LABEL_75:
        if (*(_DWORD *)(a2 + 28) == -1) {
          goto LABEL_84;
        }
        goto LABEL_76;
      }
      LODWORD(v42) = 0;
      if (*(_DWORD *)(a2 + 28) == -1) {
        goto LABEL_84;
      }
LABEL_76:
      if (!*(_DWORD *)(a2 + 32) || *(unsigned char *)(a2 + 120) || v42 == v52)
      {
LABEL_84:
        sub_B501FC(*(void *)(a1 + 24), (uint64_t)v61, v17, v16, *(_DWORD *)a2, v54, v56, v55, (uint64_t)v64, v57);
        sub_B50544(a3, *(char **)(a3 + 8), *(char **)&v64[0], *((char **)&v64[0] + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)&v64[0] + 1) - *(void *)&v64[0]) >> 2));
        if (*(void *)&v64[0])
        {
          *((void *)&v64[0] + 1) = *(void *)&v64[0];
          operator delete(*(void **)&v64[0]);
        }
      }
LABEL_29:
      v15 += 2;
      if (v15 == v14)
      {
        long long v15 = v59;
        unint64_t v11 = v51;
        goto LABEL_89;
      }
    }
  }
LABEL_91:
  sub_B4EDF8(*(void *)(a1 + 24), (uint64_t *)a3);
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
}

void sub_BC44B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)(v22 - 136);
    if (!v24) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v24 = *(void **)(v22 - 136);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 - 128) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

unint64_t sub_BC4570(uint64_t a1, uint64_t *a2)
{
  unint64_t result = sub_491B28(*(void *)(a1 + 24) + 3896);
  if ((int)result >= 2)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      do
      {
        while (1)
        {
          uint64_t v8 = *(void *)(a1 + 24);
          unint64_t v9 = *(void *)(v5 + 28);
          unsigned int v10 = *(_DWORD *)(v5 + 48);
          uint64_t v30 = sub_A104E8((void *)(v8 + 4136), v9, v10, *(_DWORD *)(v5 + 36));
          int v31 = v11;
          int v12 = (int *)sub_A11094((void *)(v8 + 4136), v9);
          unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
          if (*v13 < 9u) {
            goto LABEL_8;
          }
          uint64_t v14 = v13[4];
          if (v14) {
            long long v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
          }
          else {
LABEL_8:
          }
            long long v15 = 0;
          unsigned int v16 = *(unsigned __int16 *)(sub_A10764(v15, v10) + 12);
          int v17 = *(_DWORD *)(v5 + 40) == -1 ? 0x7FFFFFFF : *(_DWORD *)(v5 + 44);
          *(void *)(v5 + 4) = sub_A0FAA0((uint64_t *)(v8 + 4184), (unsigned int *)&v30, v16, v17);
          *(_WORD *)(v5 + 12) = v18;
          uint64_t v19 = *(void *)(a1 + 24);
          unint64_t v20 = *(void *)(v5 + 28);
          unsigned int v21 = *(_DWORD *)(v5 + 52);
          uint64_t v30 = sub_A104E8((void *)(v19 + 4136), v20, v21, *(_DWORD *)(v5 + 36));
          int v31 = v22;
          uint64_t v23 = (int *)sub_A11094((void *)(v19 + 4136), v20);
          uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
          if (*v24 < 9u) {
            goto LABEL_15;
          }
          uint64_t v25 = v24[4];
          if (v25) {
            uint64_t v26 = (unsigned int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
          }
          else {
LABEL_15:
          }
            uint64_t v26 = 0;
          unsigned int v27 = *(unsigned __int16 *)(sub_A10764(v26, v21) + 12);
          uint8x8_t v28 = (uint64_t *)(v19 + 4184);
          if (*(_DWORD *)(v5 + 40) != -1) {
            break;
          }
          unint64_t result = sub_A0FDF4(v28, (unsigned int *)&v30, v27, 0x7FFFFFFF);
          *(void *)(v5 + 16) = result;
          *(_WORD *)(v5 + 24) = v7;
          v5 += 60;
          if (v5 == v6) {
            return result;
          }
        }
        unint64_t result = sub_A0FDF4(v28, (unsigned int *)&v30, v27, *(_DWORD *)(v5 + 44));
        *(void *)(v5 + 16) = result;
        *(_WORD *)(v5 + 24) = v29;
        v5 += 60;
      }
      while (v5 != v6);
    }
  }
  return result;
}

void sub_BC4750(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  sub_B6F73C(*(void **)(a1 + 24), (unint64_t **)(a2 + 48), (uint64_t *)&v19);
  sub_B6F73C(*(void **)(a1 + 24), (unint64_t **)(a2 + 72), (uint64_t *)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(void *)(a2 + 72) == *(void *)(a2 + 80))
  {
    if (&v19 != a3) {
      sub_326C0(a3, (char *)v19, v20, (v20 - (unsigned char *)v19) >> 3);
    }
  }
  else
  {
    uint64_t v6 = (char *)v19;
    __int16 v7 = v20;
    uint64_t v8 = (unsigned int *)__p;
    unint64_t v9 = v18;
    unsigned int v21 = a3;
    if (v19 != v20)
    {
      while (v8 != v9)
      {
        unsigned int v10 = v8[1];
        unsigned int v11 = *((_DWORD *)v6 + 1);
        BOOL v12 = v11 > v10;
        if (v11 >= v10 && ((v13 = *v8, !v12) ? (BOOL v14 = *(_DWORD *)v6 >= v13) : (BOOL v14 = 1), v14))
        {
          uint64_t v15 = HIDWORD(*(void *)v6);
          if (v10 >= v15 && (v13 >= *(void *)v6 || v10 > v15))
          {
            sub_2A98DC(&v21, v6);
            v6 += 8;
          }
          v8 += 2;
          if (v6 == v7) {
            break;
          }
        }
        else
        {
          v6 += 8;
          if (v6 == v7) {
            break;
          }
        }
      }
    }
  }
  if (__p)
  {
    __int16 v18 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v19)
  {
    unint64_t v20 = (char *)v19;
    operator delete(v19);
  }
}

void sub_BC488C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unsigned int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    int v17 = a10;
    if (!a10)
    {
LABEL_3:
      __int16 v18 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int v17 = a10;
    if (!a10) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  __int16 v18 = __p;
  if (!__p) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v18);
  goto LABEL_5;
}

void sub_BC48E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0xBC48B4);
  }
  JUMPOUT(0xBC48ACLL);
}

void sub_BC48F0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v38 = 0;
  uint64_t v39 = 0;
  std::string __p = 0;
  unint64_t v6 = *(void *)(a1 + 40);
  __int16 v7 = (void *)(v6 - 16);
  *(void *)(a1 + 32) = v6 - 16;
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    BOOL v8 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 && (unint64_t)v7 >= *(void *)(a1 + 24))
  {
    do
    {
      if ((unint64_t)v7 >= *(void *)(a1 + 40)) {
        break;
      }
      unint64_t v9 = __ROR8__(*v7, 32);
      if (HIDWORD(v9) == 1 && (v9 + 3) < 2) {
        break;
      }
      char v11 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
      __int16 v7 = *(void **)(a1 + 32);
      if (v11) {
        break;
      }
      v7 -= 2;
      *(void *)(a1 + 32) = v7;
    }
    while ((unint64_t)v7 >= *(void *)(a1 + 24));
    unint64_t v6 = *(void *)(a1 + 40);
  }
  unint64_t v12 = *(void *)(a1 + 24);
  if ((unint64_t)v7 >= v12 && (unint64_t)v7 < v6)
  {
    do
    {
      uint64_t v14 = (char *)__p;
      if (__p != v38)
      {
        uint64_t v15 = *(void **)a2;
        unsigned int v16 = *(void **)(a2 + 8);
        if (*(void **)a2 != v16)
        {
          uint64_t v17 = __ROR8__(*v7, 32);
          while (*v15 != v17)
          {
            if (++v15 == v16) {
              goto LABEL_36;
            }
          }
        }
        if (v15 != v16 && (*((unsigned char *)v7 + 15) & 2) != 0)
        {
          uint64_t v18 = *(void *)(a1 + 48);
          if (v18)
          {
            uint64_t v19 = *(unsigned int *)(v18 + 4 * (((unint64_t)v7 - v12) >> 4));
            while ((*((void *)v14 + 1) & v19) != 0)
            {
              v14 += 16;
              if (v14 == v38) {
                goto LABEL_36;
              }
            }
          }
          if (v14 != v38)
          {
            LODWORD(v35) = ((unint64_t)v7 - v12) >> 4;
            sub_3EC418((uint64_t)a3, &v35, (int *)v14);
            __int16 v7 = *(void **)(a1 + 32);
          }
        }
      }
LABEL_36:
      if ((*((unsigned char *)v7 + 15) & 1) == 0) {
        goto LABEL_53;
      }
      uint64_t v20 = *(void *)(a1 + 48);
      if (__p == v38) {
        goto LABEL_49;
      }
      if (v20)
      {
        uint64_t v21 = ~*(_DWORD *)(v20 + 4 * (((unint64_t)v7 - *(void *)(a1 + 24)) >> 4));
        if ((*((void *)__p + 1) & v21) != 0)
        {
          int v22 = (char *)__p + 16;
          while (v22 != v38)
          {
            uint64_t v23 = *((void *)v22 + 1);
            v22 += 16;
            if ((v23 & v21) == 0) {
              goto LABEL_53;
            }
          }
LABEL_49:
          unint64_t v26 = ((unint64_t)v7 - *(void *)(a1 + 24)) >> 4;
          int v36 = v26;
          if (v20) {
            uint64_t v27 = *(unsigned int *)(v20 + 4 * v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v35 = v27;
          sub_B717DC((char **)&__p, &v36, &v35);
          __int16 v7 = *(void **)(a1 + 32);
        }
      }
      else if (*((_DWORD *)__p + 2))
      {
        uint64_t v24 = (char *)__p + 16;
        while (v24 != v38)
        {
          int v25 = *((_DWORD *)v24 + 2);
          v24 += 16;
          if (!v25) {
            goto LABEL_53;
          }
        }
        goto LABEL_49;
      }
LABEL_53:
      v7 -= 2;
      *(void *)(a1 + 32) = v7;
      unint64_t v12 = *(void *)(a1 + 24);
      if (*(unsigned char *)(*(void *)a1 + 16)) {
        BOOL v28 = *(unsigned char *)(a1 + 8) == 0;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28 && (unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40))
      {
        do
        {
          unint64_t v31 = __ROR8__(*v7, 32);
          if (HIDWORD(v31) == 1 && (v31 + 3) < 2) {
            break;
          }
          char v33 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
          unint64_t v12 = *(void *)(a1 + 24);
          __int16 v7 = *(void **)(a1 + 32);
          if (v33) {
            break;
          }
          v7 -= 2;
          *(void *)(a1 + 32) = v7;
        }
        while ((unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40));
      }
    }
    while ((unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40));
  }
  if (__p)
  {
    long long v38 = (char *)__p;
    operator delete(__p);
  }
}

void sub_BC4BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_BC4C38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  std::string __p = 0;
  BOOL v8 = *(char **)(a1 + 24);
  *(void *)(a1 + 32) = v8;
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    BOOL v9 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 && (unint64_t)v8 < *(void *)(a1 + 40))
  {
    unsigned int v10 = v8;
    do
    {
      unint64_t v11 = __ROR8__(*(void *)v8, 32);
      if (HIDWORD(v11) == 1 && (v11 + 3) < 2) {
        break;
      }
      char v13 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
      unsigned int v10 = *(char **)(a1 + 24);
      BOOL v8 = *(char **)(a1 + 32);
      if (v13) {
        break;
      }
      v8 += 16;
      *(void *)(a1 + 32) = v8;
    }
    while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40));
  }
  else
  {
    unsigned int v10 = v8;
  }
  while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40))
  {
    uint64_t v15 = *(void **)a3;
    unsigned int v16 = *(void **)(a3 + 8);
    if (*(void **)a3 != v16)
    {
      uint64_t v17 = __ROR8__(*(void *)v8, 32);
      while (*v15 != v17)
      {
        if (++v15 == v16) {
          goto LABEL_54;
        }
      }
    }
    if (v15 != v16 && (v8[15] & 1) != 0)
    {
      unint64_t v18 = (unint64_t)(v8 - v10) >> 4;
      uint64_t v19 = *(void *)(a1 + 48);
      if (v19) {
        uint64_t v19 = *(unsigned int *)(v19 + 4 * v18);
      }
      LODWORD(v42) = v18;
      *((void *)&v42 + 1) = v19;
      int v40 = -1;
      uint64_t v41 = 0;
      uint64_t v20 = (char *)__p;
      uint64_t v21 = v44;
      int v22 = (char *)__p;
      if (__p != v44)
      {
        do
        {
          uint64_t v23 = *((void *)v22 + 1);
          if ((DWORD2(v42) & v23) == 0)
          {
            int v40 = *(_DWORD *)v22;
            uint64_t v41 = v23;
            *(_DWORD *)int v22 = -1;
          }
          v22 += 16;
        }
        while (v22 != v21);
        if (v40 != -1)
        {
          sub_3EC418((uint64_t)a4, &v40, (int *)&v42);
          uint64_t v20 = (char *)__p;
          uint64_t v21 = v44;
        }
      }
      if (v20 != v21)
      {
        while (*(_DWORD *)v20 != -1)
        {
          v20 += 16;
          if (v20 == v21) {
            goto LABEL_53;
          }
        }
        if (v20 != v21)
        {
          uint64_t v24 = v20 + 16;
          if (v20 + 16 != v21)
          {
            do
            {
              if (*(_DWORD *)v24 != -1)
              {
                *(_DWORD *)uint64_t v20 = *(_DWORD *)v24;
                *((void *)v20 + 1) = *((void *)v24 + 1);
                v20 += 16;
              }
              v24 += 16;
            }
            while (v24 != v21);
            uint64_t v21 = v44;
          }
        }
        if (v20 != v21) {
          uint64_t v44 = v20;
        }
      }
LABEL_53:
      BOOL v8 = *(char **)(a1 + 32);
    }
LABEL_54:
    int v25 = *(void **)a2;
    unint64_t v26 = *(void **)(a2 + 8);
    if (*(void **)a2 != v26)
    {
      uint64_t v27 = __ROR8__(*(void *)v8, 32);
      while (*v25 != v27)
      {
        if (++v25 == v26) {
          goto LABEL_80;
        }
      }
    }
    if (v25 == v26 || (v8[15] & 2) == 0) {
      goto LABEL_80;
    }
    unint64_t v28 = (unint64_t)&v8[-*(void *)(a1 + 24)] >> 4;
    uint64_t v29 = *(void *)(a1 + 48);
    if (v29) {
      uint64_t v29 = *(unsigned int *)(v29 + 4 * v28);
    }
    LODWORD(v42) = v28;
    *((void *)&v42 + 1) = v29;
    uint64_t v30 = v44;
    if (__p != v44)
    {
      unint64_t v31 = (char *)__p + 16;
      while ((v29 & ~*((void *)v31 - 1)) != 0)
      {
        BOOL v9 = v31 == v44;
        v31 += 16;
        if (v9) {
          goto LABEL_79;
        }
      }
      long long v32 = v31 - 16;
      if (v31 - 16 != v44)
      {
        if (v31 == v44)
        {
          if (v32 == v44) {
            goto LABEL_79;
          }
        }
        else
        {
          do
          {
            if ((DWORD2(v42) & ~*((_DWORD *)v31 + 2)) != 0)
            {
              *(_DWORD *)long long v32 = *(_DWORD *)v31;
              *((void *)v32 + 1) = *((void *)v31 + 1);
              v32 += 16;
            }
            v31 += 16;
          }
          while (v31 != v30);
          if (v32 == v44) {
            goto LABEL_79;
          }
        }
        uint64_t v44 = v32;
      }
    }
LABEL_79:
    sub_A1F294((char **)&__p, &v42);
    BOOL v8 = *(char **)(a1 + 32);
LABEL_80:
    v8 += 16;
    *(void *)(a1 + 32) = v8;
    unsigned int v10 = *(char **)(a1 + 24);
    if (*(unsigned char *)(*(void *)a1 + 16)) {
      BOOL v33 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v33 = 0;
    }
    if (v33 && v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40))
    {
      do
      {
        unint64_t v36 = __ROR8__(*(void *)v8, 32);
        if (HIDWORD(v36) == 1 && (v36 + 3) < 2) {
          break;
        }
        char v38 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
        unsigned int v10 = *(char **)(a1 + 24);
        BOOL v8 = *(char **)(a1 + 32);
        if (v38) {
          break;
        }
        v8 += 16;
        *(void *)(a1 + 32) = v8;
      }
      while (v8 >= v10 && (unint64_t)v8 < *(void *)(a1 + 40));
    }
  }
  if (__p)
  {
    uint64_t v44 = (char *)__p;
    operator delete(__p);
  }
}

void sub_BC50D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = *(void **)v15;
    if (!*(void *)v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

char ***sub_BC5118(char ***a1, _OWORD *a2)
{
  BOOL v4 = *a1;
  unint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v11 = *v4;
    unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - *v4) >> 2);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x444444444444444) {
      sub_2E00();
    }
    unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - (void)v11) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x222222222222222) {
      unint64_t v15 = 0x444444444444444;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x444444444444444) {
        sub_188D718();
      }
      unsigned int v16 = (char *)operator new(60 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = &v16[60 * v12];
    long long v18 = a2[1];
    *(_OWORD *)uint64_t v17 = *a2;
    *((_OWORD *)v17 + 1) = v18;
    *((_OWORD *)v17 + 2) = a2[2];
    *(_OWORD *)(v17 + 44) = *(_OWORD *)((char *)a2 + 44);
    unsigned int v10 = v17 + 60;
    if (v6 != v11)
    {
      do
      {
        long long v19 = *(_OWORD *)(v6 - 60);
        long long v20 = *(_OWORD *)(v6 - 44);
        long long v21 = *(_OWORD *)(v6 - 28);
        *(_OWORD *)(v17 - 19) = *(_OWORD *)(v6 - 19);
        *(_OWORD *)(v17 - 28) = v21;
        *(_OWORD *)(v17 - 44) = v20;
        *(_OWORD *)(v17 - 60) = v19;
        v17 -= 60;
        v6 -= 60;
      }
      while (v6 != v11);
      unint64_t v6 = *v4;
    }
    *BOOL v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[60 * v15];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[2];
    *(_OWORD *)(v6 + 44) = *(_OWORD *)((char *)a2 + 44);
    *((_OWORD *)v6 + 1) = v8;
    *((_OWORD *)v6 + 2) = v9;
    *(_OWORD *)unint64_t v6 = v7;
    unsigned int v10 = v6 + 60;
  }
  v4[1] = v10;
  return a1;
}

uint64_t sub_BC5288(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v4 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)a1 = v4;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v5;
  strcpy((char *)__p, "range_duration_minutes");
  HIBYTE(__p[2]) = 22;
  *(_DWORD *)(a1 + 8) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 12) = v6;
  return a1;
}

void sub_BC53F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BC5418(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243EA48;
  sub_BC5288(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 58) = 0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 56) = 256;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  BOOL v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)BOOL v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  long long v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)long long v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)&long long v13 = 0x8000000080000000;
  *((void *)&v13 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 276) = v13;
  *(void *)(a1 + 296) = 10;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v19 = 0;
  long long v20 = 0;
  sub_B3DA6C(a1 + 304, a2, a1 + 32, a1 + 152, &v25, &v23, &v21, &v19);
  unint64_t v14 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unint64_t v15 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  unsigned int v16 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  *(void *)(a1 + 1032) = 0;
  return a1;
}

void sub_BC5748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  sub_14A84((uint64_t)va2);
  sub_14A84((uint64_t)va3);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_BC57A8(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_BC57DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, _OWORD *a3@<X1>)
{
  long long v3 = a3[1];
  *(_OWORD *)(a1 + 272) = *a3;
  *(_OWORD *)(a1 + 288) = v3;
  if (*(unsigned char *)a3) {
    return sub_BC5CE0(a1, a2);
  }
  else {
    return sub_BC57F4(a1, a2);
  }
}

double sub_BC57F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v50);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v42) = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a2 + 32), &__p);
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
  *(unsigned char *)(a2 + 184) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a1 + 20);
  *(_WORD *)(a1 + 328) = 1;
  sub_BC62D0(a1, &v48);
  int v4 = v48;
  uint64_t v37 = v49;
  if (v48 != v49)
  {
    uint64_t v5 = a1 + 304;
    uint64_t v35 = a1 + 880;
    unint64_t v36 = (_OWORD *)(a1 + 272);
    uint64_t v38 = a1;
    uint64_t v34 = a1 + 304;
    while (1)
    {
      int v7 = *v4;
      long long v8 = v36[1];
      v51[0] = *v36;
      v51[1] = v8;
      DWORD1(v51[0]) = v7;
      sub_B4868C(v5, v51);
      sub_B48A40(v5, (uint64_t)&__p);
      unint64_t v9 = *(void *)(a1 + 1032);
      if (v9 <= v45) {
        unint64_t v9 = v45;
      }
      *(void *)(a1 + 1032) = v9;
      sub_C50C4C(a2 + 32, v35, (uint64_t)&v39);
      if (v40 < 0)
      {
        operator delete(v39);
        uint64_t v11 = (long long *)*((void *)&__p + 1);
        uint64_t v10 = v42;
        if (*((long long **)&__p + 1) == v42) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v11 = (long long *)*((void *)&__p + 1);
        uint64_t v10 = v42;
        if (*((long long **)&__p + 1) == v42) {
          goto LABEL_18;
        }
      }
      unint64_t v12 = *(void *)(a2 + 16);
      do
      {
        while (v12 >= *(void *)(a2 + 24))
        {
          unint64_t v12 = sub_BC7CD8((uint64_t *)(a2 + 8), v11);
          *(void *)(a2 + 16) = v12;
          uint64_t v11 = (long long *)((char *)v11 + 296);
          if (v11 == v10) {
            goto LABEL_18;
          }
        }
        sub_9F68D4(v12, v11);
        v12 += 296;
        *(void *)(a2 + 16) = v12;
        *(void *)(a2 + 16) = v12;
        uint64_t v11 = (long long *)((char *)v11 + 296);
      }
      while (v11 != v10);
LABEL_18:
      a1 = v38;
      *(unsigned char *)(v38 + 328) = 0;
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v44 < 0)
      {
        operator delete(v43);
        uint64_t v13 = (long long *)*((void *)&__p + 1);
        if (*((void *)&__p + 1))
        {
LABEL_24:
          uint64_t v14 = v42;
          uint64_t v6 = v13;
          if (v42 != v13)
          {
            do
            {
              unint64_t v15 = (void *)*((void *)v14 - 3);
              if (v15)
              {
                *((void *)v14 - 2) = v15;
                operator delete(v15);
              }
              uint64_t v16 = (void *)*((void *)v14 - 6);
              if (v16)
              {
                *((void *)v14 - 5) = v16;
                operator delete(v16);
              }
              uint64_t v17 = (void *)*((void *)v14 - 9);
              if (v17)
              {
                *((void *)v14 - 8) = v17;
                operator delete(v17);
              }
              long long v18 = (void **)*((void *)v14 - 12);
              if (v18)
              {
                uint64_t v19 = (void **)*((void *)v14 - 11);
                long long v20 = (void *)*((void *)v14 - 12);
                if (v19 != v18)
                {
                  do
                  {
                    int v22 = *(v19 - 5);
                    if (v22)
                    {
                      *(v19 - 4) = v22;
                      operator delete(v22);
                    }
                    uint64_t v23 = v19 - 9;
                    uint64_t v24 = (char *)*(v19 - 9);
                    if (v24)
                    {
                      uint64_t v25 = (char *)*(v19 - 8);
                      uint64_t v21 = *(v19 - 9);
                      if (v25 != v24)
                      {
                        do
                        {
                          if (!*((_DWORD *)v25 - 2))
                          {
                            unint64_t v26 = (void *)*((void *)v25 - 6);
                            if (v26)
                            {
                              *((void *)v25 - 5) = v26;
                              operator delete(v26);
                            }
                            uint64_t v27 = (void *)*((void *)v25 - 10);
                            if (v27)
                            {
                              *((void *)v25 - 9) = v27;
                              operator delete(v27);
                            }
                            unint64_t v28 = (void *)*((void *)v25 - 13);
                            if (v28)
                            {
                              *((void *)v25 - 12) = v28;
                              operator delete(v28);
                            }
                          }
                          v25 -= 168;
                        }
                        while (v25 != v24);
                        uint64_t v21 = *v23;
                      }
                      *(v19 - 8) = v24;
                      operator delete(v21);
                    }
                    v19 -= 9;
                  }
                  while (v23 != v18);
                  long long v20 = (void *)*((void *)v14 - 12);
                }
                *((void *)v14 - 11) = v18;
                operator delete(v20);
              }
              if (*((char *)v14 - 161) < 0) {
                operator delete(*((void **)v14 - 23));
              }
              uint64_t v14 = (long long *)((char *)v14 - 296);
            }
            while (v14 != v13);
            uint64_t v6 = (long long *)*((void *)&__p + 1);
          }
          long long v42 = v13;
          operator delete(v6);
          a1 = v38;
        }
      }
      else
      {
        uint64_t v13 = (long long *)*((void *)&__p + 1);
        if (*((void *)&__p + 1)) {
          goto LABEL_24;
        }
      }
      ++v4;
      uint64_t v5 = v34;
      if (v4 == v37)
      {
        int v4 = v48;
        break;
      }
    }
  }
  if (v4)
  {
    uint64_t v49 = v4;
    operator delete(v4);
  }
  unint64_t v30 = *(void *)(a2 + 8);
  uint64_t v29 = *(void *)(a2 + 16);
  if (v30 != v29)
  {
    unint64_t v31 = (long long *)(v29 - 296);
    if (v29 - 296 > v30)
    {
      do
      {
        sub_B63D8C(v30, v31);
        v30 += 296;
        unint64_t v31 = (long long *)((char *)v31 - 296);
      }
      while (v30 < (unint64_t)v31);
    }
  }
  *(double *)(a2 + 56) = sub_72688((uint64_t)v50);
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v33 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a2 + 160) = result;
  *(double *)(a2 + 168) = v33;
  *(void *)(a2 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + *(void *)(a1 + 1032)
                         + 1040;
  return result;
}

void sub_BC5C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_9F53E0(v39);
  _Unwind_Resume(a1);
}

void sub_BC5C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_9F53E0((uint64_t)&a34);
  uint64_t v37 = *(void **)(v35 - 176);
  if (v37)
  {
    *(void *)(v35 - 168) = v37;
    operator delete(v37);
  }
  sub_9F53E0(v34);
  _Unwind_Resume(a1);
}

double sub_BC5CE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v50);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v42) = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a2 + 32), &__p);
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
  *(unsigned char *)(a2 + 184) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a1 + 8);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a1 + 20);
  *(_WORD *)(a1 + 328) = 1;
  sub_BC7F7C(a1, &v48);
  int v4 = v48;
  uint64_t v37 = v49;
  if (v48 != v49)
  {
    uint64_t v5 = a1 + 304;
    uint64_t v35 = a1 + 880;
    unint64_t v36 = (_OWORD *)(a1 + 272);
    uint64_t v38 = a1;
    uint64_t v34 = a1 + 304;
    while (1)
    {
      int v7 = *v4;
      long long v8 = v36[1];
      v51[0] = *v36;
      v51[1] = v8;
      DWORD1(v51[0]) = v7;
      sub_B41C34(v5, v51);
      sub_B41FE8(v5, (uint64_t)&__p);
      unint64_t v9 = *(void *)(a1 + 1032);
      if (v9 <= v45) {
        unint64_t v9 = v45;
      }
      *(void *)(a1 + 1032) = v9;
      sub_C50C4C(a2 + 32, v35, (uint64_t)&v39);
      if (v40 < 0)
      {
        operator delete(v39);
        uint64_t v11 = (long long *)*((void *)&__p + 1);
        uint64_t v10 = v42;
        if (*((long long **)&__p + 1) == v42) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v11 = (long long *)*((void *)&__p + 1);
        uint64_t v10 = v42;
        if (*((long long **)&__p + 1) == v42) {
          goto LABEL_18;
        }
      }
      unint64_t v12 = *(void *)(a2 + 16);
      do
      {
        while (v12 >= *(void *)(a2 + 24))
        {
          unint64_t v12 = sub_BC7CD8((uint64_t *)(a2 + 8), v11);
          *(void *)(a2 + 16) = v12;
          uint64_t v11 = (long long *)((char *)v11 + 296);
          if (v11 == v10) {
            goto LABEL_18;
          }
        }
        sub_9F68D4(v12, v11);
        v12 += 296;
        *(void *)(a2 + 16) = v12;
        *(void *)(a2 + 16) = v12;
        uint64_t v11 = (long long *)((char *)v11 + 296);
      }
      while (v11 != v10);
LABEL_18:
      a1 = v38;
      *(unsigned char *)(v38 + 328) = 0;
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v44 < 0)
      {
        operator delete(v43);
        uint64_t v13 = (long long *)*((void *)&__p + 1);
        if (*((void *)&__p + 1))
        {
LABEL_24:
          uint64_t v14 = v42;
          uint64_t v6 = v13;
          if (v42 != v13)
          {
            do
            {
              unint64_t v15 = (void *)*((void *)v14 - 3);
              if (v15)
              {
                *((void *)v14 - 2) = v15;
                operator delete(v15);
              }
              uint64_t v16 = (void *)*((void *)v14 - 6);
              if (v16)
              {
                *((void *)v14 - 5) = v16;
                operator delete(v16);
              }
              uint64_t v17 = (void *)*((void *)v14 - 9);
              if (v17)
              {
                *((void *)v14 - 8) = v17;
                operator delete(v17);
              }
              long long v18 = (void **)*((void *)v14 - 12);
              if (v18)
              {
                uint64_t v19 = (void **)*((void *)v14 - 11);
                long long v20 = (void *)*((void *)v14 - 12);
                if (v19 != v18)
                {
                  do
                  {
                    int v22 = *(v19 - 5);
                    if (v22)
                    {
                      *(v19 - 4) = v22;
                      operator delete(v22);
                    }
                    uint64_t v23 = v19 - 9;
                    uint64_t v24 = (char *)*(v19 - 9);
                    if (v24)
                    {
                      uint64_t v25 = (char *)*(v19 - 8);
                      uint64_t v21 = *(v19 - 9);
                      if (v25 != v24)
                      {
                        do
                        {
                          if (!*((_DWORD *)v25 - 2))
                          {
                            unint64_t v26 = (void *)*((void *)v25 - 6);
                            if (v26)
                            {
                              *((void *)v25 - 5) = v26;
                              operator delete(v26);
                            }
                            uint64_t v27 = (void *)*((void *)v25 - 10);
                            if (v27)
                            {
                              *((void *)v25 - 9) = v27;
                              operator delete(v27);
                            }
                            unint64_t v28 = (void *)*((void *)v25 - 13);
                            if (v28)
                            {
                              *((void *)v25 - 12) = v28;
                              operator delete(v28);
                            }
                          }
                          v25 -= 168;
                        }
                        while (v25 != v24);
                        uint64_t v21 = *v23;
                      }
                      *(v19 - 8) = v24;
                      operator delete(v21);
                    }
                    v19 -= 9;
                  }
                  while (v23 != v18);
                  long long v20 = (void *)*((void *)v14 - 12);
                }
                *((void *)v14 - 11) = v18;
                operator delete(v20);
              }
              if (*((char *)v14 - 161) < 0) {
                operator delete(*((void **)v14 - 23));
              }
              uint64_t v14 = (long long *)((char *)v14 - 296);
            }
            while (v14 != v13);
            uint64_t v6 = (long long *)*((void *)&__p + 1);
          }
          long long v42 = v13;
          operator delete(v6);
          a1 = v38;
        }
      }
      else
      {
        uint64_t v13 = (long long *)*((void *)&__p + 1);
        if (*((void *)&__p + 1)) {
          goto LABEL_24;
        }
      }
      ++v4;
      uint64_t v5 = v34;
      if (v4 == v37)
      {
        int v4 = v48;
        break;
      }
    }
  }
  if (v4)
  {
    uint64_t v49 = v4;
    operator delete(v4);
  }
  unint64_t v30 = *(void *)(a2 + 8);
  uint64_t v29 = *(void *)(a2 + 16);
  if (v30 != v29)
  {
    unint64_t v31 = (long long *)(v29 - 296);
    if (v29 - 296 > v30)
    {
      do
      {
        sub_B63D8C(v30, v31);
        v30 += 296;
        unint64_t v31 = (long long *)((char *)v31 - 296);
      }
      while (v30 < (unint64_t)v31);
    }
  }
  *(double *)(a2 + 56) = sub_72688((uint64_t)v50);
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v33 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a2 + 160) = result;
  *(double *)(a2 + 168) = v33;
  *(void *)(a2 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + *(void *)(a1 + 1032)
                         + 1040;
  return result;
}

void sub_BC6104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_9F53E0(v39);
  _Unwind_Resume(a1);
}

void sub_BC6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_9F53E0((uint64_t)&a34);
  uint64_t v37 = *(void **)(v35 - 176);
  if (v37)
  {
    *(void *)(v35 - 168) = v37;
    operator delete(v37);
  }
  sub_9F53E0(v34);
  _Unwind_Resume(a1);
}

void sub_BC61CC(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "rspa");
}

void *sub_BC61E8(void *a1)
{
  sub_9FD504((uint64_t)(a1 + 38));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  int v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_BC624C(void *a1)
{
  sub_9FD504((uint64_t)(a1 + 38));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  int v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

uint64_t sub_BC62D0@<X0>(uint64_t a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_A19FA8((uint64_t)&v100, *(void *)(a1 + 24), 0x1FFFFFFFEuLL);
  long long v3 = v101;
  if (v105) {
    int v4 = v104;
  }
  else {
    int v4 = &v102;
  }
  if ((unint64_t)v101 >= *v4)
  {
    int v7 = 0;
    double v68 = 0;
    goto LABEL_140;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  while (2)
  {
    int v11 = *((_DWORD *)v3 + 2);
    sub_A1DF34((uint64_t)__p, *(void **)(a1 + 24), __ROR8__(*v3, 32), 0, 0, 0);
    unint64_t v12 = v96;
    if ((unint64_t)v96 >= v97) {
      goto LABEL_117;
    }
    if (v11 < 0) {
      char v13 = -5;
    }
    else {
      char v13 = 5;
    }
    int v14 = (char)(v13 + v11 % 10);
    unsigned int v78 = v11 / 10 + (((103 * v14) >> 15) & 1) + ((103 * v14) >> 10);
    unsigned int v81 = v11 / -10 + (((-103 * v14) >> 15) & 1) + ((-103 * v14) >> 10);
    while (1)
    {
LABEL_16:
      int v15 = *(_DWORD *)(a1 + 276);
      int v16 = *(_DWORD *)(a1 + 16);
      if (v16 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      sub_A1E9A0((uint64_t)v82, *(void *)(a1 + 24), __ROR8__(*v12, 32), *((unsigned __int16 *)v12 + 4), 0, 0);
      signed int v18 = v78 + v15;
      if (v90) {
        int v19 = sub_A1F39C(*(void *)(a1 + 24), (uint64_t)v82, v18, 1);
      }
      else {
        int v19 = sub_A1F8B4((uint64_t)v82, v18, 1);
      }
      if (v19)
      {
        int v20 = 103 * (char)(v17 + v16 % 10);
        int v21 = v78 + v18 + v16 / 10 + ((v20 >> 15) & 1) + (v20 >> 10);
        int v80 = v21;
        while (1)
        {
          if ((unint64_t)v87 < v86 || v87 >= v88) {
            goto LABEL_60;
          }
          uint64_t v24 = v90 ? &v91 : v87;
          uint64_t v25 = (unsigned int *)((char *)v83 + *(unsigned __int16 *)((char *)v83 - *v83 + 6));
          int v26 = v81
              + *(_DWORD *)v24
              + *(unsigned int *)((char *)&v25[2 * *((_DWORD *)v87 + 1)
                                             + 2
                                             + 2 * ((unint64_t)(v85 - v84) >> 4)]
                                + *v25)
              - *(_DWORD *)(v85 + 8);
          if (v21 < v26) {
            goto LABEL_60;
          }
          if (v7 < (char *)v6)
          {
            *(_DWORD *)int v7 = v26;
            uint64_t v22 = (uint64_t)(v7 + 4);
            goto LABEL_25;
          }
          uint64_t v27 = (v7 - v5) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            sub_2E00();
          }
          if (((char *)v6 - v5) >> 1 > v28) {
            unint64_t v28 = ((char *)v6 - v5) >> 1;
          }
          unint64_t v29 = (unint64_t)((char *)v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v28;
          if (v29)
          {
            if (v29 >> 62) {
              sub_188D718();
            }
            unint64_t v30 = operator new(4 * v29);
            unint64_t v31 = (int *)&v30[4 * v27];
            int *v31 = v26;
            uint64_t v22 = (uint64_t)(v31 + 1);
            if (v7 == v5)
            {
LABEL_51:
              uint64_t v6 = (int *)&v30[4 * v29];
              *a2 = v31;
              a2[1] = (int *)v22;
              a2[2] = v6;
              if (!v5) {
                goto LABEL_49;
              }
LABEL_48:
              operator delete(v5);
              goto LABEL_49;
            }
          }
          else
          {
            unint64_t v30 = 0;
            unint64_t v31 = (int *)(4 * v27);
            *(_DWORD *)(4 * v27) = v26;
            uint64_t v22 = 4 * v27 + 4;
            if (v7 == v5) {
              goto LABEL_51;
            }
          }
          unint64_t v32 = v7 - 4 - v5;
          if (v32 < 0xBC
            || &v30[v7 - v5 - 4 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v7 - v5 - 4]
            || &v7[-(v32 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
            || (unint64_t)(v5 - v30) < 0x20)
          {
            break;
          }
          uint64_t v35 = (v32 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          double v33 = &v7[-v36];
          unint64_t v31 = (int *)((char *)v31 - v36);
          uint64_t v37 = &v30[4 * v27 - 16];
          uint64_t v38 = v7 - 16;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            _OWORD *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
LABEL_47:
          uint64_t v6 = (int *)&v30[4 * v29];
          *a2 = v31;
          a2[1] = (int *)v22;
          a2[2] = v6;
          if (v5) {
            goto LABEL_48;
          }
LABEL_49:
          uint64_t v5 = (char *)v31;
          int v21 = v80;
LABEL_25:
          a2[1] = (int *)v22;
          sub_A2020C((uint64_t)v82, 0);
          int v7 = (char *)v22;
        }
        double v33 = v7;
        do
        {
LABEL_46:
          int v34 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *--unint64_t v31 = v34;
        }
        while (v33 != v5);
        goto LABEL_47;
      }
LABEL_60:
      unint64_t v41 = v97;
      unint64_t v12 = v96 + 2;
      __n128 v96 = v12;
      if (v12 != (uint64_t *)v97)
      {
        if ((unint64_t)v12 < v97) {
          goto LABEL_73;
        }
        goto LABEL_62;
      }
      long long v42 = v94 + 2;
      double v94 = v42;
      if ((unint64_t)v42 >= v95) {
        goto LABEL_117;
      }
      while (1)
      {
        unint64_t v12 = (uint64_t *)*v42;
        unint64_t v41 = v42[1];
        if (*v42 != v41) {
          break;
        }
        v42 += 2;
        double v94 = v42;
        if ((unint64_t)v42 >= v95) {
          goto LABEL_117;
        }
      }
      __n128 v96 = (uint64_t *)*v42;
      unint64_t v97 = v41;
      if ((unint64_t)v12 < v41) {
        break;
      }
LABEL_62:
      if ((unint64_t)v12 >= v41) {
        goto LABEL_117;
      }
    }
    while (1)
    {
LABEL_73:
      if (!v99)
      {
        char v43 = __p[0];
        uint64_t v44 = *v12;
        uint64_t v45 = *((void *)__p[0] + 517);
        if (sub_C259C0(v45 + 3896))
        {
          if (*(void *)(v45 + 3944))
          {
            unint64_t v46 = __ROR8__(v44, 32);
            if (!sub_A10E20(v43 + 517, SHIDWORD(v46)))
            {
              uint64_t v47 = *(void **)(v43[517] + 3944);
              int8x8_t v48 = (int8x8_t)v47[1];
              if (v48)
              {
                unint64_t v49 = 0xC4CEB9FE1A85EC53
                    * ((0xFF51AFD7ED558CCDLL * (v46 ^ (v46 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v46 ^ (v46 >> 33))) >> 33));
                unint64_t v50 = v49 ^ (v49 >> 33);
                uint8x8_t v51 = (uint8x8_t)vcnt_s8(v48);
                v51.i16[0] = vaddlv_u8(v51);
                if (v51.u32[0] > 1uLL)
                {
                  unint64_t v52 = v50;
                  if (v50 >= *(void *)&v48) {
                    unint64_t v52 = v50 % *(void *)&v48;
                  }
                }
                else
                {
                  unint64_t v52 = (*(void *)&v48 - 1) & v50;
                }
                unsigned int v55 = *(uint64_t ***)(*v47 + 8 * v52);
                if (v55)
                {
                  int v56 = *v55;
                  if (v56)
                  {
                    if (v51.u32[0] < 2uLL)
                    {
                      uint64_t v57 = *(void *)&v48 - 1;
                      while (1)
                      {
                        uint64_t v61 = v56[1];
                        if (v50 == v61)
                        {
                          if (*((_DWORD *)v56 + 5) == HIDWORD(v46) && *((_DWORD *)v56 + 4) == v46) {
                            goto LABEL_70;
                          }
                        }
                        else if ((v61 & v57) != v52)
                        {
                          goto LABEL_109;
                        }
                        int v56 = (uint64_t *)*v56;
                        if (!v56) {
                          goto LABEL_109;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v59 = v56[1];
                      if (v50 == v59)
                      {
                        if (*((_DWORD *)v56 + 5) == HIDWORD(v46) && *((_DWORD *)v56 + 4) == v46)
                        {
LABEL_70:
                          unint64_t v12 = v96;
                          goto LABEL_71;
                        }
                      }
                      else
                      {
                        if (v59 >= *(void *)&v48) {
                          v59 %= *(void *)&v48;
                        }
                        if (v59 != v52) {
                          break;
                        }
                      }
                      int v56 = (uint64_t *)*v56;
                    }
                    while (v56);
                  }
                }
              }
            }
          }
        }
      }
LABEL_109:
      if (v98) {
        break;
      }
      unsigned int v62 = sub_C2599C((uint64_t)__p[0] + 3896);
      unint64_t v12 = v96;
      if (v62 >= *((unsigned __int8 *)v96 + 14))
      {
        if (v98) {
          goto LABEL_114;
        }
        char v63 = sub_51D60((unsigned __int8 *)__p[0] + 3896);
        unint64_t v12 = v96;
        if ((v63 & 1) != 0 || (*((unsigned char *)v96 + 15) & 1) == 0) {
          goto LABEL_114;
        }
      }
LABEL_71:
      v12 += 2;
      __n128 v96 = v12;
      if (v12 == (uint64_t *)v97)
      {
        int v53 = v94 + 2;
        double v94 = v53;
        if ((unint64_t)v53 >= v95) {
          goto LABEL_114;
        }
        while (1)
        {
          unint64_t v12 = (uint64_t *)*v53;
          unint64_t v54 = v53[1];
          if (*v53 != v54) {
            break;
          }
          v53 += 2;
          double v94 = v53;
          if ((unint64_t)v53 >= v95) {
            goto LABEL_117;
          }
        }
        __n128 v96 = (uint64_t *)*v53;
        unint64_t v97 = v54;
        if ((unint64_t)v12 >= v54)
        {
LABEL_114:
          if ((unint64_t)v12 < v97) {
            goto LABEL_16;
          }
          goto LABEL_117;
        }
      }
      else if ((unint64_t)v12 >= v97)
      {
        goto LABEL_114;
      }
    }
    unint64_t v12 = v96;
    if ((unint64_t)v96 < v97) {
      goto LABEL_16;
    }
LABEL_117:
    unint64_t v9 = (unint64_t)v102;
    long long v3 = (void *)((char *)v101 + 12);
    unint64_t v101 = v3;
    if (v3 == v102)
    {
      long long v3 = v103;
      unint64_t v10 = v104[0];
      unint64_t v101 = v103;
      int v8 = 1;
      unsigned __int8 v105 = 1;
      if (!*(unsigned char *)(v100 + 16)) {
        goto LABEL_8;
      }
    }
    else
    {
      int v8 = v105;
      unint64_t v10 = v104[0];
      if (!*(unsigned char *)(v100 + 16)) {
        goto LABEL_8;
      }
    }
    if (v8) {
      unint64_t v64 = v10;
    }
    else {
      unint64_t v64 = (unint64_t)v102;
    }
    if ((unint64_t)v3 < v64)
    {
      while (1)
      {
        unint64_t v65 = __ROR8__(*v3, 32);
        if (HIDWORD(v65) == 1 && (v65 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v100 + 4120)))
        {
          LOBYTE(v8) = v105;
          long long v3 = v101;
          unint64_t v9 = (unint64_t)v102;
          break;
        }
        unint64_t v9 = (unint64_t)v102;
        long long v3 = (void *)((char *)v101 + 12);
        unint64_t v101 = v3;
        if (v3 == v102)
        {
          long long v3 = v103;
          unint64_t v101 = v103;
          LOBYTE(v8) = 1;
          unsigned __int8 v105 = 1;
          if ((unint64_t)v103 >= v104[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v8) = v105;
          unsigned int v67 = &v102;
          if (v105) {
            unsigned int v67 = v104;
          }
          if ((unint64_t)v3 >= *v67) {
            break;
          }
        }
      }
      unint64_t v10 = v104[0];
    }
LABEL_8:
    if ((_BYTE)v8) {
      unint64_t v9 = v10;
    }
    if ((unint64_t)v3 < v9) {
      continue;
    }
    break;
  }
  double v68 = *a2;
LABEL_140:
  unint64_t v69 = 126 - 2 * __clz((v7 - (char *)v68) >> 2);
  if (v7 == (char *)v68) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = v69;
  }
  sub_BC6D30(v68, v7, (uint64_t)v82, v70, 1);
  unint64_t v71 = a2[1];
  if (*a2 != v71)
  {
    __n128 v72 = *a2 + 1;
    while (v72 != v71)
    {
      int v73 = *(v72 - 1);
      int v74 = *v72++;
      if (v73 == v74)
      {
        uint64_t v75 = v72 - 2;
        while (v72 != v71)
        {
          int v76 = v73;
          int v73 = *v72;
          if (v76 != *v72)
          {
            v75[1] = v73;
            ++v75;
          }
          ++v72;
        }
        if (v71 != v75 + 1) {
          a2[1] = v75 + 1;
        }
        break;
      }
    }
  }
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v82);
    sub_188FC78(v82, (uint64_t)"Number of accumulated departure times: ", 39);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v93 < 0) {
      operator delete(__p[0]);
    }
    if (v89 < 0) {
      operator delete(v88);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_BC6CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  unsigned int v55 = *(void **)v53;
  if (*(void *)v53)
  {
    *(void *)(v53 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

int *sub_BC6D30(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v11 = result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    int v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (*v12 < v71)
          {
            *unint64_t v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (*v12 >= v74)
          {
            if (v74 < v75)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (*v12 < v92)
              {
                *unint64_t v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v74 >= v75)
            {
              *unint64_t v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v73 >= v100) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              *unint64_t v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          int v76 = v12 + 1;
          BOOL v77 = (int *)v12[1];
          unsigned int v78 = v12 + 2;
          int v79 = v12[2];
          int v80 = (int *)*v12;
          if ((int)v80 >= (int)v77)
          {
            if ((int)v77 >= v79)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if ((int)v77 >= v94) {
                return result;
              }
LABEL_150:
              *unsigned int v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v98 < v97)
              {
                v12[1] = v97;
                void v12[2] = v98;
                int v99 = *v12;
                if (*v12 < v97)
                {
                  *unint64_t v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            *unsigned int v78 = (int)v77;
            unsigned int v81 = v12;
            double v82 = v12 + 1;
            uint64_t result = v77;
            if ((int)v80 >= v79)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if ((int)v77 >= v94) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            unsigned int v81 = v12;
            double v82 = v12 + 2;
            uint64_t result = (int *)*v12;
            if ((int)v77 >= v79)
            {
              *unint64_t v12 = (int)v77;
              v12[1] = (int)v80;
              unsigned int v81 = v12 + 1;
              double v82 = v12 + 2;
              uint64_t result = v80;
              if ((int)v80 >= v79) {
                goto LABEL_149;
              }
            }
          }
          *unsigned int v81 = v79;
          *double v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_BC7844(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)sub_BC7980((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    int v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v16 < *v12)
      {
        if (v20 < v17)
        {
          *int v16 = v17;
          goto LABEL_32;
        }
        *int v16 = v20;
        *unint64_t v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v21 < v33)
        {
          *unint64_t v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v20 >= v17) {
        goto LABEL_33;
      }
      *unint64_t v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v16 >= *v12) {
        goto LABEL_33;
      }
      *int v16 = *v12;
      *unint64_t v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (v24 < *(v12 - 1)) {
        goto LABEL_57;
      }
      if (*((_DWORD *)a2 - 1) < v24)
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v62 >= v24);
      }
      else
      {
        char v63 = v12 + 1;
        do
        {
          unint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (*v12 >= v24);
      }
      unint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        unint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v65 < v24);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          *unint64_t v12 = v67;
          *unint64_t v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v68 >= v24);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v69 < v24);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        int *v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v12 >= *v16)
      {
        if (v18 < v17)
        {
          *int v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v12 < *v16)
          {
            *unint64_t v12 = *v16;
            *int v16 = v22;
          }
        }
      }
      else
      {
        if (v18 >= v17)
        {
          *unint64_t v12 = v18;
          *int v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v19 >= v25) {
            goto LABEL_24;
          }
          *int v16 = v25;
        }
        else
        {
          *unint64_t v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      int v26 = &v12[v15];
      int v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v30 >= v29)
      {
        if (v28 < v31)
        {
          int *v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (v32 < *v27)
          {
            v12[1] = *v27;
            int *v27 = v32;
          }
        }
      }
      else
      {
        if (v28 >= v31)
        {
          v12[1] = v28;
          int *v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v30 >= v34) {
            goto LABEL_38;
          }
          int *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      uint64_t v35 = &v12[v15];
      int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v39 >= v38)
      {
        if (v37 < v40)
        {
          *uint64_t v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (v41 < *v36)
          {
            void v12[2] = *v36;
            *uint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v37 >= v40)
        {
          void v12[2] = v37;
          *uint64_t v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v39 >= v42) {
            goto LABEL_47;
          }
          *uint64_t v36 = v42;
        }
        else
        {
          void v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v27 >= *v16)
      {
        if (v43 >= v45) {
          goto LABEL_55;
        }
        *int v16 = v45;
        *uint64_t v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v44 < v45)
        {
LABEL_54:
          int *v27 = v45;
          *uint64_t v36 = v44;
LABEL_55:
          int v47 = *v12;
          *unint64_t v12 = v43;
          *int v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        *unint64_t v12 = v45;
        *int v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v43 < v45) {
        goto LABEL_54;
      }
      int *v27 = v43;
      *int v16 = v44;
      uint64_t v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v44 < v45) {
        goto LABEL_54;
      }
      int v46 = *v12;
      *unint64_t v12 = v44;
      *int v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v24 < v49);
      unint64_t v50 = &v12[v48];
      uint8x8_t v51 = a2;
      if (v48 == 1)
      {
        uint8x8_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v24 >= v53);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v24 >= v52);
      }
      if (v50 >= (int *)v51)
      {
        unint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unint64_t v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      unsigned int v55 = &v12[v48];
      int v56 = (int *)v51;
      do
      {
        *unsigned int v55 = v54;
        int *v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v24 < v57);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v24 >= v58);
      }
      while (v55 < v56);
      unint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      int *v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_BC7518(v12, v59);
      unint64_t v12 = v59 + 1;
      uint64_t result = (int *)sub_BC7518(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (int *)sub_BC6D30(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v59 + 1;
      }
    }
  }
  __int16 v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      double v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        double v87 = (int *)v83;
        if (v90 < v89)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              double v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v90 < v89);
          double v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          *double v88 = v89;
        }
        __int16 v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      int v11 = (int *)v83;
      if (v96 < v95)
      {
        do
        {
          *(_DWORD *)__int16 v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v96 < v95);
        *(_DWORD *)__int16 v83 = v95;
      }
      __int16 v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL sub_BC7518(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (*a1 >= v9) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (*a1 >= v12)
      {
        if (v12 >= v13) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (*a1 >= v29) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v12 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v11 >= v35) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      int v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (*a1 < v15)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v15 >= v17)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v18 >= v17) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        int *v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v15 >= v31) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v15 < v17)
      {
        *unint64_t v14 = v17;
        *int v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v18 >= v17) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v15 >= v31) {
        return 1;
      }
LABEL_39:
      *int v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v33 >= v32) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (*a1 >= v32) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_BC7844(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (*a1 >= v5)
      {
        if (v5 >= v3) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *int v4 = v5;
        int v7 = a1;
        int v8 = a1 + 1;
      }
      else
      {
        int v7 = a1;
        int v8 = a1 + 2;
        if (v5 < v3) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        int v7 = a1 + 1;
        int v8 = a1 + 2;
      }
      if (v6 >= v3) {
        goto LABEL_20;
      }
LABEL_19:
      *int v7 = v3;
      *int v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (v26 < *v22) {
          break;
        }
LABEL_23:
        int v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v26 < v25);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

int *sub_BC7844(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = *a2;
  int v6 = *result;
  int v7 = *a3;
  if (*result >= *a2)
  {
    if (v5 >= v7)
    {
      int v5 = *a3;
      int v9 = *a4;
      if (v7 >= *a4) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    int v8 = *result;
    if (*result < *a2)
    {
      *uint64_t result = *a2;
      *a2 = v8;
      int v5 = *a3;
      int v9 = *a4;
      if (*a3 >= *a4) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v5 >= v7)
    {
      *uint64_t result = v5;
      *a2 = v6;
      int v5 = *a3;
      if (v6 >= *a3) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v6;
    int v5 = v6;
  }
LABEL_11:
  int v9 = *a4;
  if (v5 >= *a4) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  int v10 = *a2;
  if (*a2 < *a3)
  {
    *a2 = *a3;
    *a3 = v10;
    int v11 = *result;
    if (*result < *a2)
    {
      *uint64_t result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  int v12 = *a4;
  if (*a4 < *a5)
  {
    *a4 = *a5;
    *a5 = v12;
    int v13 = *a3;
    if (*a3 < *a4)
    {
      *a3 = *a4;
      *a4 = v13;
      int v14 = *a2;
      if (*a2 < *a3)
      {
        *a2 = *a3;
        *a3 = v14;
        int v15 = *result;
        if (*result < *a2)
        {
          *uint64_t result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_BC7980(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v36 = (unint64_t)(v4 - 2) >> 1;
    int64_t v37 = v36;
    do
    {
      if (v36 >= v37)
      {
        uint64_t v38 = (2 * v37) | 1;
        int v39 = &a1[4 * v38];
        int v40 = *(_DWORD *)v39;
        if (2 * v37 + 2 < v4 && *((_DWORD *)v39 + 1) < v40)
        {
          int v40 = *((_DWORD *)v39 + 1);
          v39 += 4;
          uint64_t v38 = 2 * v37 + 2;
        }
        int v41 = &a1[4 * v37];
        int v42 = *(_DWORD *)v41;
        if (*(_DWORD *)v41 >= v40)
        {
          while (1)
          {
            int v43 = v39;
            *(_DWORD *)int v41 = v40;
            if (v36 < v38) {
              break;
            }
            uint64_t v44 = (2 * v38) | 1;
            int v39 = &a1[4 * v44];
            uint64_t v38 = 2 * v38 + 2;
            int v40 = *(_DWORD *)v39;
            if (v38 < v4)
            {
              if (*((_DWORD *)v39 + 1) >= v40)
              {
                uint64_t v38 = v44;
              }
              else
              {
                int v40 = *((_DWORD *)v39 + 1);
                v39 += 4;
              }
              int v41 = v43;
              if (v42 < v40) {
                break;
              }
            }
            else
            {
              uint64_t v38 = v44;
              int v41 = v43;
              if (v42 < v40) {
                break;
              }
            }
          }
          *(_DWORD *)int v43 = v42;
        }
      }
      BOOL v15 = v37-- <= 0;
    }
    while (!v15);
  }
  int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      int v6 = *(_DWORD *)a1;
      int v7 = a2;
      do
      {
        int v8 = *(_DWORD *)v7;
        if (v6 < *(_DWORD *)v7)
        {
          *(_DWORD *)int v7 = v6;
          *(_DWORD *)a1 = v8;
          int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_33:
      int v5 = a3;
      goto LABEL_34;
    }
    int v9 = a2;
    while (1)
    {
      int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)a1 < *(_DWORD *)v9)
      {
        *(_DWORD *)int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        int v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          int v12 = a1 + 4;
          uint64_t v13 = 1;
          if (v10 >= v11) {
            goto LABEL_24;
          }
        }
        else
        {
          int v14 = *((_DWORD *)a1 + 2);
          BOOL v15 = v14 < v11;
          if (v14 >= v11)
          {
            int v12 = a1 + 4;
          }
          else
          {
            int v11 = *((_DWORD *)a1 + 2);
            int v12 = a1 + 8;
          }
          if (v15) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v10 >= v11)
          {
LABEL_24:
            int v16 = a1;
            while (1)
            {
              int v17 = v12;
              *(_DWORD *)int v16 = v11;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v18 = (2 * v13) | 1;
              int v12 = &a1[4 * v18];
              uint64_t v13 = 2 * v13 + 2;
              int v11 = *(_DWORD *)v12;
              if (v13 < v4)
              {
                if (*((_DWORD *)v12 + 1) >= v11)
                {
                  uint64_t v13 = v18;
                }
                else
                {
                  int v11 = *((_DWORD *)v12 + 1);
                  v12 += 4;
                }
                int v16 = v17;
                if (v10 < v11) {
                  break;
                }
              }
              else
              {
                uint64_t v13 = v18;
                int v16 = v17;
                if (v10 < v11) {
                  break;
                }
              }
            }
            *(_DWORD *)int v17 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3) {
        goto LABEL_33;
      }
    }
  }
LABEL_34:
  if (v3 >= 5)
  {
    uint64_t v19 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v20 = 0;
      int v21 = *(_DWORD *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          int v26 = &v23[4 * v20];
          int v27 = *((_DWORD *)v26 + 1);
          int v25 = v26 + 4;
          int v24 = v27;
          uint64_t v28 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v28;
          *(_DWORD *)int v23 = v24;
          int v23 = v25;
          if (v28 > v22) {
            goto LABEL_45;
          }
        }
        if (*((_DWORD *)v25 + 1) >= v24)
        {
          uint64_t v20 = v28;
        }
        else
        {
          int v24 = *((_DWORD *)v25 + 1);
          v25 += 4;
        }
        *(_DWORD *)int v23 = v24;
        int v23 = v25;
      }
      while (v20 <= v22);
LABEL_45:
      a2 -= 4;
      if (v25 == a2)
      {
        *(_DWORD *)int v25 = v21;
      }
      else
      {
        *(_DWORD *)int v25 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        uint64_t v29 = v25 - a1 + 4;
        if (v29 >= 5)
        {
          unint64_t v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
          int v31 = &a1[4 * v30];
          int v32 = *(_DWORD *)v31;
          int v33 = *(_DWORD *)v25;
          if (*(_DWORD *)v25 < *(_DWORD *)v31)
          {
            do
            {
              int v34 = v31;
              *(_DWORD *)int v25 = v32;
              if (!v30) {
                break;
              }
              unint64_t v30 = (v30 - 1) >> 1;
              int v31 = &a1[4 * v30];
              int v32 = *(_DWORD *)v31;
              int v25 = v34;
            }
            while (v33 < *(_DWORD *)v31);
            *(_DWORD *)int v34 = v33;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t sub_BC7CD8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xDD67C8A60DD67CLL) {
    sub_2E00();
  }
  if (0x2983759F2298375ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x2983759F2298375ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
    unint64_t v6 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v27 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0xDD67C8A60DD67CLL) {
      sub_188D718();
    }
    int v7 = (char *)operator new(296 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v25 = (uint64_t)&v7[296 * v3];
  int v26 = &v7[296 * v6];
  sub_9F68D4(v25, a2);
  uint64_t v8 = v25 + 296;
  int v9 = (char *)*a1;
  int v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v25;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v25 + v11;
      uint64_t v13 = (_OWORD *)(v25 + v11 - 296);
      int v14 = &v10[v11];
      long long v15 = *(_OWORD *)&v10[v11 - 248];
      long long v16 = *(_OWORD *)&v10[v11 - 232];
      long long v17 = *(_OWORD *)&v10[v11 - 216];
      *(void *)(v12 - 200) = *(void *)&v10[v11 - 200];
      *(_OWORD *)(v12 - 216) = v17;
      *(_OWORD *)(v12 - 232) = v16;
      *(_OWORD *)(v12 - 248) = v15;
      long long v18 = *(_OWORD *)&v10[v11 - 296];
      long long v19 = *(_OWORD *)&v10[v11 - 264];
      v13[1] = *(_OWORD *)&v10[v11 - 280];
      v13[2] = v19;
      _OWORD *v13 = v18;
      *(_DWORD *)(v12 - 192) = *(_DWORD *)&v10[v11 - 192];
      long long v20 = *(_OWORD *)&v10[v11 - 184];
      *(void *)(v12 - 168) = *(void *)&v10[v11 - 168];
      *(_OWORD *)(v12 - 184) = v20;
      *((void *)v14 - 22) = 0;
      *((void *)v14 - 21) = 0;
      *((void *)v14 - 23) = 0;
      *(_DWORD *)(v12 - 160) = *(_DWORD *)&v10[v11 - 160];
      long long v21 = *(_OWORD *)&v10[v11 - 152];
      long long v22 = *(_OWORD *)&v10[v11 - 136];
      *(_OWORD *)(v12 - 120) = *(_OWORD *)&v10[v11 - 120];
      *(_OWORD *)(v12 - 136) = v22;
      *(_OWORD *)(v12 - 152) = v21;
      *(void *)&long long v21 = *(void *)&v10[v11 - 104];
      *(void *)(v12 - 88) = 0;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 104) = v21;
      *(void *)(v12 - 96) = 0;
      *(_OWORD *)(v12 - 96) = *(_OWORD *)&v10[v11 - 96];
      *(void *)(v12 - 80) = *(void *)&v10[v11 - 80];
      *((void *)v14 - 12) = 0;
      *((void *)v14 - 11) = 0;
      *((void *)v14 - 10) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)&v10[v11 - 72];
      *(void *)(v12 - 56) = *(void *)&v10[v11 - 56];
      *((void *)v14 - 9) = 0;
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      *(void *)(v12 - 48) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 32) = 0;
      *(_OWORD *)(v12 - 48) = *(_OWORD *)&v10[v11 - 48];
      *(void *)(v12 - 32) = *(void *)&v10[v11 - 32];
      *((void *)v14 - 6) = 0;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 24];
      *(void *)(v12 - 8) = *(void *)&v10[v11 - 8];
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v11 -= 296;
    }
    while (&v10[v11] != v9);
    int v23 = (char *)*a1;
    int v10 = (char *)a1[1];
    *a1 = v25 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
    if (v10 != v23)
    {
      do
      {
        v10 -= 296;
        sub_9F5E28(v27, (uint64_t)v10);
      }
      while (v10 != v23);
      int v10 = v23;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v25 + 296;
}

void sub_BC7F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A4D50C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BC7F7C@<X0>(uint64_t a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_A19FA8((uint64_t)&v100, *(void *)(a1 + 24), 0x1FFFFFFFEuLL);
  uint64_t v3 = v101;
  if (v105) {
    unint64_t v4 = v104;
  }
  else {
    unint64_t v4 = &v102;
  }
  if ((unint64_t)v101 >= *v4)
  {
    int v7 = 0;
    int v68 = 0;
    goto LABEL_140;
  }
  int v5 = 0;
  unint64_t v6 = 0;
  int v7 = 0;
  while (2)
  {
    int v11 = *((_DWORD *)v3 + 2);
    sub_A1DF34((uint64_t)__p, *(void **)(a1 + 24), __ROR8__(*v3, 32), 0, 0, 0);
    uint64_t v12 = v96;
    if ((unint64_t)v96 >= v97) {
      goto LABEL_117;
    }
    if (v11 < 0) {
      char v13 = -5;
    }
    else {
      char v13 = 5;
    }
    int v14 = (char)(v13 + v11 % 10);
    unsigned int v78 = v11 / -10 + (((-103 * v14) >> 15) & 1) + ((-103 * v14) >> 10);
    unsigned int v81 = v11 / 10 + (((103 * v14) >> 15) & 1) + ((103 * v14) >> 10);
    while (1)
    {
LABEL_16:
      int v15 = *(_DWORD *)(a1 + 276);
      int v16 = *(_DWORD *)(a1 + 16);
      if (v16 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      sub_A1E9A0((uint64_t)v82, *(void *)(a1 + 24), __ROR8__(*v12, 32), *((unsigned __int16 *)v12 + 5), 0, 0);
      int v18 = v78 + v15;
      if (v90) {
        int v19 = sub_A2B620(*(void *)(a1 + 24), (uint64_t)v82, v18, 1);
      }
      else {
        int v19 = sub_A2BC00((uint64_t)v82, v18, 1);
      }
      if (v19)
      {
        int v20 = -103
            * (char)(v17 + v16 - 10 * (((unint64_t)(1717986919 * v16) >> 34) + (1717986919 * v16 < 0)));
        int v21 = v78 + v18 + v16 / -10 + ((v20 >> 15) & 1) + (v20 >> 10);
        int v80 = v21;
        while (1)
        {
          if ((unint64_t)v87 < v86 || v87 >= v88) {
            goto LABEL_60;
          }
          int v24 = v90 ? &v91 : v87;
          uint64_t v25 = (unsigned int *)((char *)v83 + *(unsigned __int16 *)((char *)v83 - *v83 + 6));
          int v26 = v81
              + *(_DWORD *)v24
              + *(unsigned int *)((char *)&v25[2 * *((_DWORD *)v87 + 1)
                                             + 1
                                             + 2 * ((unint64_t)(v85 - v84) >> 4)]
                                + *v25);
          if (v26 < v21) {
            goto LABEL_60;
          }
          if (v7 < (char *)v6)
          {
            *(_DWORD *)int v7 = v26;
            uint64_t v22 = (uint64_t)(v7 + 4);
            goto LABEL_25;
          }
          uint64_t v27 = (v7 - v5) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            sub_2E00();
          }
          if (((char *)v6 - v5) >> 1 > v28) {
            unint64_t v28 = ((char *)v6 - v5) >> 1;
          }
          unint64_t v29 = (unint64_t)((char *)v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v28;
          if (v29)
          {
            if (v29 >> 62) {
              sub_188D718();
            }
            unint64_t v30 = operator new(4 * v29);
            int v31 = (int *)&v30[4 * v27];
            int *v31 = v26;
            uint64_t v22 = (uint64_t)(v31 + 1);
            if (v7 == v5)
            {
LABEL_51:
              unint64_t v6 = (int *)&v30[4 * v29];
              *a2 = v31;
              a2[1] = (int *)v22;
              a2[2] = v6;
              if (!v5) {
                goto LABEL_49;
              }
LABEL_48:
              operator delete(v5);
              goto LABEL_49;
            }
          }
          else
          {
            unint64_t v30 = 0;
            int v31 = (int *)(4 * v27);
            *(_DWORD *)(4 * v27) = v26;
            uint64_t v22 = 4 * v27 + 4;
            if (v7 == v5) {
              goto LABEL_51;
            }
          }
          unint64_t v32 = v7 - 4 - v5;
          if (v32 < 0xBC
            || &v30[v7 - v5 - 4 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v7 - v5 - 4]
            || &v7[-(v32 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
            || (unint64_t)(v5 - v30) < 0x20)
          {
            break;
          }
          uint64_t v35 = (v32 >> 2) + 1;
          uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          int v33 = &v7[-v36];
          int v31 = (int *)((char *)v31 - v36);
          int64_t v37 = &v30[4 * v27 - 16];
          uint64_t v38 = v7 - 16;
          uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            _OWORD *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
LABEL_47:
          unint64_t v6 = (int *)&v30[4 * v29];
          *a2 = v31;
          a2[1] = (int *)v22;
          a2[2] = v6;
          if (v5) {
            goto LABEL_48;
          }
LABEL_49:
          int v5 = (char *)v31;
          int v21 = v80;
LABEL_25:
          a2[1] = (int *)v22;
          sub_A20748((uint64_t)v82, 0);
          int v7 = (char *)v22;
        }
        int v33 = v7;
        do
        {
LABEL_46:
          int v34 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *--int v31 = v34;
        }
        while (v33 != v5);
        goto LABEL_47;
      }
LABEL_60:
      unint64_t v41 = v97;
      uint64_t v12 = v96 + 2;
      int v96 = v12;
      if (v12 != (uint64_t *)v97)
      {
        if ((unint64_t)v12 < v97) {
          goto LABEL_73;
        }
        goto LABEL_62;
      }
      int v42 = v94 + 2;
      int v94 = v42;
      if ((unint64_t)v42 >= v95) {
        goto LABEL_117;
      }
      while (1)
      {
        uint64_t v12 = (uint64_t *)*v42;
        unint64_t v41 = v42[1];
        if (*v42 != v41) {
          break;
        }
        v42 += 2;
        int v94 = v42;
        if ((unint64_t)v42 >= v95) {
          goto LABEL_117;
        }
      }
      int v96 = (uint64_t *)*v42;
      unint64_t v97 = v41;
      if ((unint64_t)v12 < v41) {
        break;
      }
LABEL_62:
      if ((unint64_t)v12 >= v41) {
        goto LABEL_117;
      }
    }
    while (1)
    {
LABEL_73:
      if (!v99)
      {
        int v43 = __p[0];
        uint64_t v44 = *v12;
        uint64_t v45 = *((void *)__p[0] + 517);
        if (sub_C259C0(v45 + 3896))
        {
          if (*(void *)(v45 + 3944))
          {
            unint64_t v46 = __ROR8__(v44, 32);
            if (!sub_A10E20(v43 + 517, SHIDWORD(v46)))
            {
              int v47 = *(void **)(v43[517] + 3944);
              int8x8_t v48 = (int8x8_t)v47[1];
              if (v48)
              {
                unint64_t v49 = 0xC4CEB9FE1A85EC53
                    * ((0xFF51AFD7ED558CCDLL * (v46 ^ (v46 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v46 ^ (v46 >> 33))) >> 33));
                unint64_t v50 = v49 ^ (v49 >> 33);
                uint8x8_t v51 = (uint8x8_t)vcnt_s8(v48);
                v51.i16[0] = vaddlv_u8(v51);
                if (v51.u32[0] > 1uLL)
                {
                  unint64_t v52 = v50;
                  if (v50 >= *(void *)&v48) {
                    unint64_t v52 = v50 % *(void *)&v48;
                  }
                }
                else
                {
                  unint64_t v52 = (*(void *)&v48 - 1) & v50;
                }
                unsigned int v55 = *(uint64_t ***)(*v47 + 8 * v52);
                if (v55)
                {
                  int v56 = *v55;
                  if (v56)
                  {
                    if (v51.u32[0] < 2uLL)
                    {
                      uint64_t v57 = *(void *)&v48 - 1;
                      while (1)
                      {
                        uint64_t v61 = v56[1];
                        if (v50 == v61)
                        {
                          if (*((_DWORD *)v56 + 5) == HIDWORD(v46) && *((_DWORD *)v56 + 4) == v46) {
                            goto LABEL_70;
                          }
                        }
                        else if ((v61 & v57) != v52)
                        {
                          goto LABEL_109;
                        }
                        int v56 = (uint64_t *)*v56;
                        if (!v56) {
                          goto LABEL_109;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v59 = v56[1];
                      if (v50 == v59)
                      {
                        if (*((_DWORD *)v56 + 5) == HIDWORD(v46) && *((_DWORD *)v56 + 4) == v46)
                        {
LABEL_70:
                          uint64_t v12 = v96;
                          goto LABEL_71;
                        }
                      }
                      else
                      {
                        if (v59 >= *(void *)&v48) {
                          v59 %= *(void *)&v48;
                        }
                        if (v59 != v52) {
                          break;
                        }
                      }
                      int v56 = (uint64_t *)*v56;
                    }
                    while (v56);
                  }
                }
              }
            }
          }
        }
      }
LABEL_109:
      if (v98) {
        break;
      }
      unsigned int v62 = sub_C2599C((uint64_t)__p[0] + 3896);
      uint64_t v12 = v96;
      if (v62 >= *((unsigned __int8 *)v96 + 14))
      {
        if (v98) {
          goto LABEL_114;
        }
        char v63 = sub_51D60((unsigned __int8 *)__p[0] + 3896);
        uint64_t v12 = v96;
        if ((v63 & 1) != 0 || (*((unsigned char *)v96 + 15) & 1) == 0) {
          goto LABEL_114;
        }
      }
LABEL_71:
      v12 += 2;
      int v96 = v12;
      if (v12 == (uint64_t *)v97)
      {
        int v53 = v94 + 2;
        int v94 = v53;
        if ((unint64_t)v53 >= v95) {
          goto LABEL_114;
        }
        while (1)
        {
          uint64_t v12 = (uint64_t *)*v53;
          unint64_t v54 = v53[1];
          if (*v53 != v54) {
            break;
          }
          v53 += 2;
          int v94 = v53;
          if ((unint64_t)v53 >= v95) {
            goto LABEL_117;
          }
        }
        int v96 = (uint64_t *)*v53;
        unint64_t v97 = v54;
        if ((unint64_t)v12 >= v54)
        {
LABEL_114:
          if ((unint64_t)v12 < v97) {
            goto LABEL_16;
          }
          goto LABEL_117;
        }
      }
      else if ((unint64_t)v12 >= v97)
      {
        goto LABEL_114;
      }
    }
    uint64_t v12 = v96;
    if ((unint64_t)v96 < v97) {
      goto LABEL_16;
    }
LABEL_117:
    unint64_t v9 = (unint64_t)v102;
    uint64_t v3 = (void *)((char *)v101 + 12);
    unint64_t v101 = v3;
    if (v3 == v102)
    {
      uint64_t v3 = v103;
      unint64_t v10 = v104[0];
      unint64_t v101 = v103;
      int v8 = 1;
      unsigned __int8 v105 = 1;
      if (!*(unsigned char *)(v100 + 16)) {
        goto LABEL_8;
      }
    }
    else
    {
      int v8 = v105;
      unint64_t v10 = v104[0];
      if (!*(unsigned char *)(v100 + 16)) {
        goto LABEL_8;
      }
    }
    if (v8) {
      unint64_t v64 = v10;
    }
    else {
      unint64_t v64 = (unint64_t)v102;
    }
    if ((unint64_t)v3 < v64)
    {
      while (1)
      {
        unint64_t v65 = __ROR8__(*v3, 32);
        if (HIDWORD(v65) == 1 && (v65 + 3) < 2) {
          break;
        }
        if (sub_2AB7E4(**(void **)(v100 + 4120)))
        {
          LOBYTE(v8) = v105;
          uint64_t v3 = v101;
          unint64_t v9 = (unint64_t)v102;
          break;
        }
        unint64_t v9 = (unint64_t)v102;
        uint64_t v3 = (void *)((char *)v101 + 12);
        unint64_t v101 = v3;
        if (v3 == v102)
        {
          uint64_t v3 = v103;
          unint64_t v101 = v103;
          LOBYTE(v8) = 1;
          unsigned __int8 v105 = 1;
          if ((unint64_t)v103 >= v104[0]) {
            break;
          }
        }
        else
        {
          LOBYTE(v8) = v105;
          int v67 = &v102;
          if (v105) {
            int v67 = v104;
          }
          if ((unint64_t)v3 >= *v67) {
            break;
          }
        }
      }
      unint64_t v10 = v104[0];
    }
LABEL_8:
    if ((_BYTE)v8) {
      unint64_t v9 = v10;
    }
    if ((unint64_t)v3 < v9) {
      continue;
    }
    break;
  }
  int v68 = *a2;
LABEL_140:
  unint64_t v69 = 126 - 2 * __clz((v7 - (char *)v68) >> 2);
  if (v7 == (char *)v68) {
    uint64_t v70 = 0;
  }
  else {
    uint64_t v70 = v69;
  }
  sub_BC89EC(v68, v7, (uint64_t)v82, v70, 1);
  int v71 = a2[1];
  if (*a2 != v71)
  {
    int v72 = *a2 + 1;
    while (v72 != v71)
    {
      int v73 = *(v72 - 1);
      int v74 = *v72++;
      if (v73 == v74)
      {
        int v75 = v72 - 2;
        while (v72 != v71)
        {
          int v76 = v73;
          int v73 = *v72;
          if (v76 != *v72)
          {
            v75[1] = v73;
            ++v75;
          }
          ++v72;
        }
        if (v71 != v75 + 1) {
          a2[1] = v75 + 1;
        }
        break;
      }
    }
  }
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v82);
    sub_188FC78(v82, (uint64_t)"Number of accumulated departure times: ", 39);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v93 < 0) {
      operator delete(__p[0]);
    }
    if (v89 < 0) {
      operator delete(v88);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_BC8974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  unsigned int v55 = *(void **)v53;
  if (*(void *)v53)
  {
    *(void *)(v53 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

int *sub_BC89EC(int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v11 = result;
LABEL_2:
  uint64_t v12 = v11;
  while (1)
  {
    int v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v71 = *((_DWORD *)a2 - 1);
          int v72 = *v12;
          if (v71 < *v12)
          {
            *uint64_t v12 = v71;
            *((_DWORD *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          int v73 = *v12;
          int v74 = v12[1];
          int v75 = *((_DWORD *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((_DWORD *)a2 - 1) = v74;
              int v93 = *v12;
              int v92 = v12[1];
              if (v92 < *v12)
              {
                *uint64_t v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              *uint64_t v12 = v74;
              v12[1] = v73;
              int v100 = *((_DWORD *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              *uint64_t v12 = v75;
            }
            *((_DWORD *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          int v76 = v12 + 1;
          BOOL v77 = (int *)v12[1];
          unsigned int v78 = v12 + 2;
          int v79 = v12[2];
          int v80 = (int *)*v12;
          if ((int)v77 >= (int)v80)
          {
            if (v79 >= (int)v77)
            {
LABEL_149:
              LODWORD(v77) = v79;
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
LABEL_150:
              *unsigned int v78 = v94;
              *((_DWORD *)a2 - 1) = v77;
              int v97 = *v78;
              int v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                void v12[2] = v98;
                int v99 = *v12;
                if (v97 < *v12)
                {
                  *uint64_t v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            int *v76 = v79;
            *unsigned int v78 = (int)v77;
            unsigned int v81 = v12;
            double v82 = v12 + 1;
            uint64_t result = v77;
            if (v79 >= (int)v80)
            {
LABEL_141:
              int v94 = *((_DWORD *)a2 - 1);
              if (v94 >= (int)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            unsigned int v81 = v12;
            double v82 = v12 + 2;
            uint64_t result = (int *)*v12;
            if (v79 >= (int)v77)
            {
              *uint64_t v12 = (int)v77;
              v12[1] = (int)v80;
              unsigned int v81 = v12 + 1;
              double v82 = v12 + 2;
              uint64_t result = v80;
              if (v79 >= (int)v80) {
                goto LABEL_149;
              }
            }
          }
          *unsigned int v81 = v79;
          *double v82 = v80;
          LODWORD(v77) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_97D790(v12, v12 + 1, v12 + 2, v12 + 3, (int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (int *)a2)
      {
        return (int *)sub_BC9500((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    int v16 = &v12[v14 >> 1];
    int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      int v20 = *v12;
      int v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *int v16 = v17;
          goto LABEL_32;
        }
        *int v16 = v20;
        *uint64_t v12 = v21;
        int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v21)
        {
          *uint64_t v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      *uint64_t v12 = v17;
      *((_DWORD *)a2 - 1) = v20;
      int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *int v16 = *v12;
      *uint64_t v12 = v23;
      --a4;
      int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        char v63 = v12 + 1;
        do
        {
          uint64_t v12 = v63;
          if (v63 >= (int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      unint64_t v64 = (int *)a2;
      if (v12 < (int *)a2)
      {
        unint64_t v64 = (int *)a2;
        do
          int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        int v66 = *v12;
        int v67 = *v64;
        do
        {
          *uint64_t v12 = v67;
          *unint64_t v64 = v66;
          do
          {
            int v68 = v12[1];
            ++v12;
            int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            int v69 = *--v64;
            int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        int *v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      int v18 = *v16;
      int v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *int v16 = v17;
          *((_DWORD *)a2 - 1) = v18;
          int v22 = *v12;
          if (*v16 < *v12)
          {
            *uint64_t v12 = *v16;
            *int v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          *uint64_t v12 = v18;
          *int v16 = v19;
          int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *int v16 = v25;
        }
        else
        {
          *uint64_t v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v19;
      }
LABEL_24:
      int v26 = &v12[v15];
      int v29 = *(v26 - 1);
      uint64_t v27 = v26 - 1;
      int v28 = v29;
      int v30 = v12[1];
      int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          int *v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            int *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          int *v27 = v30;
          int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          int *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      uint64_t v35 = &v12[v15];
      int v38 = v35[1];
      uint64_t v36 = v35 + 1;
      int v37 = v38;
      int v39 = v12[2];
      int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *uint64_t v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          int v41 = v12[2];
          if (*v36 < v41)
          {
            void v12[2] = *v36;
            *uint64_t v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          void v12[2] = v37;
          *uint64_t v36 = v39;
          int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *uint64_t v36 = v42;
        }
        else
        {
          void v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      int v43 = *v16;
      int v44 = *v27;
      int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *int v16 = v45;
        *uint64_t v36 = v43;
        uint64_t v36 = &v12[v14 >> 1];
        int v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          int *v27 = v45;
          *uint64_t v36 = v44;
LABEL_55:
          int v47 = *v12;
          *uint64_t v12 = v43;
          *int v16 = v47;
          --a4;
          int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        int v61 = *v12;
        *uint64_t v12 = v45;
        *int v16 = v61;
        --a4;
        int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      int *v27 = v43;
      *int v16 = v44;
      uint64_t v27 = &v12[v14 >> 1];
      int v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      int v46 = *v12;
      *uint64_t v12 = v44;
      *int v16 = v46;
      --a4;
      int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        int v49 = v12[++v48];
      while (v49 < v24);
      unint64_t v50 = &v12[v48];
      uint8x8_t v51 = a2;
      if (v48 == 1)
      {
        uint8x8_t v51 = a2;
        do
        {
          if (v50 >= (int *)v51) {
            break;
          }
          int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (int *)v51)
      {
        unint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v59;
        goto LABEL_75;
      }
      int v54 = *(_DWORD *)v51;
      unsigned int v55 = &v12[v48];
      int v56 = (int *)v51;
      do
      {
        *unsigned int v55 = v54;
        int *v56 = v49;
        do
        {
          int v57 = v55[1];
          ++v55;
          int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          int v58 = *--v56;
          int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      unint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      int *v59 = v24;
      if (v50 < (int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_BC91D4(v12, v59);
      uint64_t v12 = v59 + 1;
      uint64_t result = (int *)sub_BC91D4(v59 + 1, (int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (int *)sub_BC89EC(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v59 + 1;
      }
    }
  }
  __int16 v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (int *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      double v87 = v12;
      do
      {
        int v90 = *v87;
        int v89 = v87[1];
        double v87 = (int *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(int *)((char *)v12 + v91 + 4) = v90;
            if (!v91)
            {
              double v88 = v12;
              goto LABEL_124;
            }
            int v90 = *(int *)((char *)v12 + v91 - 4);
            v91 -= 4;
          }
          while (v89 < v90);
          double v88 = (int *)((char *)v12 + v91 + 4);
LABEL_124:
          *double v88 = v89;
        }
        __int16 v83 = (char *)(v87 + 1);
        v86 += 4;
      }
      while (v87 + 1 != (int *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      int v96 = *v11;
      int v95 = v11[1];
      int v11 = (int *)v83;
      if (v95 < v96)
      {
        do
        {
          *(_DWORD *)__int16 v83 = v96;
          int v96 = *((_DWORD *)v83 - 2);
          v83 -= 4;
        }
        while (v95 < v96);
        *(_DWORD *)__int16 v83 = v95;
      }
      __int16 v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (int *)a2);
  }
  return result;
}

BOOL sub_BC91D4(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v9 = *(a2 - 1);
      int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      int v11 = *a1;
      int v12 = a1[1];
      int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        int v30 = *a1;
        int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      int v15 = a1[1];
      int v16 = a1 + 2;
      int v17 = a1[2];
      int v18 = *a1;
      if (v15 < *a1)
      {
        int v19 = a1;
        int v20 = a1 + 2;
        int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          int v19 = a1 + 1;
          int v20 = a1 + 2;
          int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v19 = v17;
        int *v20 = v18;
        int v15 = v21;
LABEL_36:
        int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *int v16 = v15;
        int v19 = a1;
        int v20 = a1 + 1;
        int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      int v15 = v17;
      int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *int v16 = v31;
      *(a2 - 1) = v15;
      int v32 = *v16;
      int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_97D790(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *unint64_t v4 = v5;
        int v7 = a1;
        int v8 = a1 + 1;
      }
      else
      {
        int v7 = a1;
        int v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        int v7 = a1 + 1;
        int v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *int v7 = v3;
      *int v8 = v6;
LABEL_20:
      int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v25 = *v22;
        int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        unint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        int v26 = *(int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

char *sub_BC9500(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v40 = (unint64_t)(v4 - 2) >> 1;
    int64_t v41 = v40;
    do
    {
      if (v40 >= v41)
      {
        uint64_t v42 = (2 * v41) | 1;
        int v43 = &a1[4 * v42];
        int v44 = *(_DWORD *)v43;
        if (2 * v41 + 2 < v4)
        {
          int v45 = *((_DWORD *)v43 + 1);
          BOOL v46 = v44 < v45;
          if (v44 <= v45) {
            int v44 = *((_DWORD *)v43 + 1);
          }
          if (v46)
          {
            v43 += 4;
            uint64_t v42 = 2 * v41 + 2;
          }
        }
        int v47 = &a1[4 * v41];
        int v48 = *(_DWORD *)v47;
        if (v44 >= *(_DWORD *)v47)
        {
          while (1)
          {
            uint8x8_t v51 = v43;
            *(_DWORD *)int v47 = v44;
            if (v40 < v42) {
              break;
            }
            uint64_t v52 = (2 * v42) | 1;
            int v43 = &a1[4 * v52];
            uint64_t v42 = 2 * v42 + 2;
            int v44 = *(_DWORD *)v43;
            if (v42 < v4)
            {
              int v49 = *((_DWORD *)v43 + 1);
              BOOL v50 = v44 < v49;
              if (v44 <= v49) {
                int v44 = *((_DWORD *)v43 + 1);
              }
              if (v50) {
                v43 += 4;
              }
              else {
                uint64_t v42 = v52;
              }
              int v47 = v51;
              if (v44 < v48) {
                break;
              }
            }
            else
            {
              uint64_t v42 = v52;
              int v47 = v51;
              if (v44 < v48) {
                break;
              }
            }
          }
          *(_DWORD *)uint8x8_t v51 = v48;
        }
      }
      BOOL v15 = v41-- <= 0;
    }
    while (!v15);
  }
  int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      int v6 = *(_DWORD *)a1;
      int v7 = a2;
      do
      {
        int v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)int v7 = v6;
          *(_DWORD *)a1 = v8;
          int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      int v5 = a3;
      goto LABEL_38;
    }
    int v9 = a2;
    while (1)
    {
      int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        int v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          int v12 = a1 + 4;
          uint64_t v13 = 1;
          if (v11 >= v10) {
            goto LABEL_26;
          }
        }
        else
        {
          int v14 = *((_DWORD *)a1 + 2);
          BOOL v15 = v11 < v14;
          if (v11 <= v14) {
            int v11 = *((_DWORD *)a1 + 2);
          }
          if (v15) {
            int v12 = a1 + 8;
          }
          else {
            int v12 = a1 + 4;
          }
          if (v15) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v11 >= v10)
          {
LABEL_26:
            int v16 = a1;
            while (1)
            {
              int v19 = v12;
              *(_DWORD *)int v16 = v11;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v20 = (2 * v13) | 1;
              int v12 = &a1[4 * v20];
              uint64_t v13 = 2 * v13 + 2;
              int v11 = *(_DWORD *)v12;
              if (v13 < v4)
              {
                int v17 = *((_DWORD *)v12 + 1);
                BOOL v18 = v11 < v17;
                if (v11 <= v17) {
                  int v11 = *((_DWORD *)v12 + 1);
                }
                if (v18) {
                  v12 += 4;
                }
                else {
                  uint64_t v13 = v20;
                }
                int v16 = v19;
                if (v11 < v10) {
                  break;
                }
              }
              else
              {
                uint64_t v13 = v20;
                int v16 = v19;
                if (v11 < v10) {
                  break;
                }
              }
            }
            *(_DWORD *)int v19 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    uint64_t v21 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v22 = 0;
      int v23 = *(_DWORD *)a1;
      int64_t v24 = (unint64_t)(v21 - 2) >> 1;
      int v25 = a1;
      do
      {
        while (1)
        {
          int v30 = &v25[4 * v22];
          int v31 = *((_DWORD *)v30 + 1);
          int v29 = v30 + 4;
          int v28 = v31;
          uint64_t v32 = (2 * v22) | 1;
          uint64_t v22 = 2 * v22 + 2;
          if (v22 < v21) {
            break;
          }
          uint64_t v22 = v32;
          *(_DWORD *)int v25 = v28;
          int v25 = v29;
          if (v32 > v24) {
            goto LABEL_51;
          }
        }
        int v26 = *((_DWORD *)v29 + 1);
        BOOL v27 = v28 < v26;
        if (v28 <= v26) {
          int v28 = *((_DWORD *)v29 + 1);
        }
        if (v27) {
          v29 += 4;
        }
        else {
          uint64_t v22 = v32;
        }
        *(_DWORD *)int v25 = v28;
        int v25 = v29;
      }
      while (v22 <= v24);
LABEL_51:
      a2 -= 4;
      if (v29 == a2)
      {
        *(_DWORD *)int v29 = v23;
      }
      else
      {
        *(_DWORD *)int v29 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v23;
        uint64_t v33 = v29 - a1 + 4;
        if (v33 >= 5)
        {
          unint64_t v34 = (((unint64_t)v33 >> 2) - 2) >> 1;
          int v35 = &a1[4 * v34];
          int v36 = *(_DWORD *)v35;
          int v37 = *(_DWORD *)v29;
          if (*(_DWORD *)v35 < *(_DWORD *)v29)
          {
            do
            {
              int v38 = v35;
              *(_DWORD *)int v29 = v36;
              if (!v34) {
                break;
              }
              unint64_t v34 = (v34 - 1) >> 1;
              int v35 = &a1[4 * v34];
              int v36 = *(_DWORD *)v35;
              int v29 = v38;
            }
            while (*(_DWORD *)v35 < v37);
            *(_DWORD *)int v38 = v37;
          }
        }
      }
      BOOL v15 = v21-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t sub_BC9858(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_local_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 22) = v9;
  return a1;
}

void sub_BC9A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BC9A8C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243EA90;
  sub_BC9858(a1 + 8, a3);
  *(_OWORD *)(a1 + 32) = xmmword_20B98A0;
  *(void *)(a1 + 48) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 60) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 57) = 1;
  *(_OWORD *)(a1 + 88) = xmmword_20EB770;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v5 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    uint64_t v7 = 12 * v6;
    do
    {
      uint64_t v8 = *(void *)(a1 + 96);
      v5[2] = *(_DWORD *)(a1 + 104);
      *(void *)uint64_t v5 = v8;
      v5 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  *(_OWORD *)(a1 + 152) = xmmword_20B98A0;
  *(void *)(a1 + 168) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 177) = 1;
  *(_OWORD *)(a1 + 208) = xmmword_20EB770;
  *(_DWORD *)(a1 + 224) = -1;
  BOOL v9 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a1 + 208);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      uint64_t v12 = *(void *)(a1 + 216);
      v9[2] = *(_DWORD *)(a1 + 224);
      *(void *)BOOL v9 = v12;
      v9 += 3;
      v11 -= 12;
    }
    while (v11);
  }
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  sub_B3DA6C(a1 + 272, a2, a1 + 32, a1 + 152, &v24, &v22, &v20, &v18);
  uint64_t v13 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v14 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  BOOL v15 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int v16 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_BC9D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  sub_14A84((uint64_t)va2);
  sub_14A84((uint64_t)va3);
  sub_A2DC14(v6);
  sub_A2DC14(v5);
  _Unwind_Resume(a1);
}

void sub_BC9DFC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 + 112);
  if (!v5) {
    _Unwind_Resume(exception_object);
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

double sub_BC9E30@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_A3B6BC(a1 + 32);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  sub_A3B6BC(a1 + 152);
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 272) = *(void *)(a1 + 8);
  *(void *)(a1 + 288) = v6;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a1 + 28);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a1 + 30);
  if (*(unsigned char *)a2)
  {
    sub_B41C34(a1 + 272, a2);
    sub_B41FE8(a1 + 272, a3);
  }
  else
  {
    sub_B4868C(a1 + 272, a2);
    sub_B48A40(a1 + 272, a3);
  }
  double result = (double)(unint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72));
  double v8 = (double)(unint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v8;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (*(void *)(a1 + 208) + *(void *)(a1 + 88))
                         - *(void *)(a1 + 240)
                         + 1000;
  return result;
}

void sub_BC9F4C(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 6385779;
}

uint64_t sub_BC9F64(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_memory_footprint");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  *(void *)a1 = sub_A2D4C4(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "max_distance");
  uint64_t v5 = sub_561B0(a2, (uint64_t)__p);
  *(void *)(a1 + 8) = sub_A2D5F4(v5);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_num_trips");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_local_pruning");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 20) = v7;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_target_pruning");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 21) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_travel_via_missing_stops");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 22) = v9;
  return a1;
}

void sub_BCA168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BCA198(void *a1, uint64_t a2, void *a3)
{
  *a1 = off_243EAC0;
  uint64_t v5 = (uint64_t)(a1 + 19);
  sub_BC9F64((uint64_t)(a1 + 1), a3);
  sub_BD5594((uint64_t)(a1 + 4));
  sub_BD5594(v5);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_BD4F5C((uint64_t)(a1 + 34), a2, (uint64_t)(a1 + 4), v5, &v17, &v15, &v13, &v11);
  int v6 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  BOOL v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  BOOL v8 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  BOOL v9 = v18;
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_BCA37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  sub_14A84((uint64_t)&a9);
  sub_14A84((uint64_t)&a11);
  sub_14A84((uint64_t)&a13);
  sub_14A84((uint64_t)&a15);
  sub_A35A94(v16);
  sub_A35A94(v15);
  _Unwind_Resume(a1);
}

void sub_BCA3B8(_Unwind_Exception *a1)
{
  sub_A35A94(v1);
  _Unwind_Resume(a1);
}

double sub_BCA3D0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 72) | *(void *)(a1 + 112))
  {
    for (uint64_t i = *(void *)(a1 + 80); i != *(void *)(a1 + 88); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(uint64x2_t *)(a1 + 32) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 48), (float)*(unint64_t *)(a1 + 104))));
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  *(_DWORD *)(a1 + 144) = 0;
  if (*(void *)(a1 + 192) | *(void *)(a1 + 232))
  {
    for (uint64_t j = *(void *)(a1 + 200); j != *(void *)(a1 + 208); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 232) = 0;
  }
  *(uint64x2_t *)(a1 + 152) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 168), (float)*(unint64_t *)(a1 + 224))));
  *(unsigned char *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 248) = *(void *)(a1 + 240);
  *(_DWORD *)(a1 + 264) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 272) = *(void *)(a1 + 8);
  *(void *)(a1 + 288) = v8;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a1 + 28);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a1 + 30);
  if (*(unsigned char *)a2)
  {
    sub_BCB8EC(a1 + 272, a2);
    sub_BCBCF8(a1 + 272, a3);
  }
  else
  {
    sub_BCA6E8(a1 + 272, a2);
    sub_BCAAF4(a1 + 272, a3);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  double result = (double)(unint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 72));
  uint64_t v11 = *(void *)(a1 + 224);
  double v12 = (double)(unint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 192));
  *(double *)(a3 + 160) = result;
  *(double *)(a3 + 168) = v12;
  *(void *)(a3 + 176) += *(void *)(a1 + 136)
                         - *(void *)(a1 + 120)
                         + *(void *)(a1 + 256)
                         + 12 * (v11 + v9)
                         - *(void *)(a1 + 240)
                         + 1000;
  return result;
}

void sub_BCA5AC(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 6385779;
}

void *sub_BCA5C4(void *a1)
{
  sub_9FD504((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }
  return a1;
}

void sub_BCA628(void *a1)
{
  sub_9FD504((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5) {
    free(v5);
  }

  operator delete();
}

void sub_BCA6B0(void *a1)
{
  sub_BD4E70(a1);

  operator delete();
}

void sub_BCA6E8(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v39);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_BCCAC0(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v40[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 432) = sub_AD28B0(v5, v40);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v40[0] = 0x1FFFFFFFELL;
    unsigned int v7 = sub_AD28B0(v6, v40);
    sub_BCE3F8(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27))
      {
        uint64_t v10 = *(int **)(a1 + 336);
        uint64_t v11 = *(int **)(a1 + 344);
        if (v10 == v11)
        {
          uint64_t v19 = *(void *)(a1 + 336);
        }
        else
        {
          do
          {
            int v12 = *v10;
            uint64_t v13 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (*v10 << *v13) | (v9 - 2);
            int v14 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v13 + 8), (unsigned int *)v40) + 4);
            uint64_t v15 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (v12 << *v15) | v9;
            uint64_t v16 = sub_BCE6A0((uint64_t)(v15 + 8), (unsigned int *)v40);
            if (v14 != 0x7FFFFFFF)
            {
              int v17 = *(_DWORD *)(v16 + 4);
              if (v17 == 0x7FFFFFFF || v14 < v17) {
                *(_DWORD *)(v16 + 4) = v14;
              }
            }
            ++v10;
          }
          while (v10 != v11);
          uint64_t v10 = *(int **)(a1 + 336);
          uint64_t v19 = *(void *)(a1 + 344);
        }
        *(double *)(a1 + 680) = *(double *)(a1 + 680) + (double)(unint64_t)((v19 - (uint64_t)v10) >> 2);
      }
      if (v9)
      {
        int v29 = *(unsigned int **)(a1 + 288);
        int v30 = *(unsigned int **)(a1 + 296);
        if (v29 != v30)
        {
          uint64_t v31 = *(void *)(a1 + 264);
          uint64_t v32 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v33 = *v32++;
            *(void *)(v31 + (((unint64_t)v33 >> 3) & 0x1FFFFFF8)) &= ~(1 << v33);
          }
          while (v32 != v30);
        }
        *(void *)(a1 + 296) = v29;
        sub_BCCD80(a1, v9);
        sub_BCCF80(a1, v9);
        unint64_t v34 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v34
          && ((*(void *)(*(void *)(a1 + 264) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_50:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int **)(a1 + 240);
        uint64_t v21 = *(unsigned int **)(a1 + 248);
        if (v20 != v21)
        {
          uint64_t v22 = *(void *)(a1 + 216);
          int v23 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v24 = *v23++;
            *(void *)(v22 + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) &= ~(1 << v24);
          }
          while (v23 != v21);
        }
        *(void *)(a1 + 248) = v20;
        sub_AD54FC((void *)a1, v9);
        sub_725D0((uint64_t)v40);
        int v25 = *(unsigned int **)(a1 + 408);
        int v26 = *(unsigned int **)(a1 + 416);
        while (v25 != v26)
        {
          unsigned int v27 = *v25++;
          sub_BD0F28(a1, v9, v27);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v40) + *(double *)(a1 + 608);
        unint64_t v28 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v28
          && ((*(void *)(*(void *)(a1 + 216) + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_50;
        }
      }
      unint64_t v35 = sub_BD2048(a1) + 728;
      if (*(void *)(a1 + 720) > v35) {
        unint64_t v35 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v35;
      if (sub_BCE1A4(a1)) {
        goto LABEL_50;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_48;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_48:
  if (v8)
  {
LABEL_51:
    unint64_t v36 = 0;
    uint64_t v37 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        int v38 = *(_DWORD **)(a1 + 152);
        LODWORD(v40[0]) = (*(_DWORD *)(a1 + 432) << *v38) | v36;
        *(void *)(a1 + 632) += *(int *)(sub_BCE6A0((uint64_t)(v38 + 8), (unsigned int *)v40) + 4);
      }
      ++v36;
    }
    while (v37 != v36);
  }
LABEL_55:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v39);
}

std::string *sub_BCAAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  long long v125 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v158) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v124 = (std::string *)sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v158) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *(unsigned char *)(a1 + 112);
  uint64_t v127 = *(unsigned int *)(a1 + 144);
  if (v127 >= 2)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v126 = _Q0;
    unint64_t v8 = 1;
    uint64_t v130 = a1;
    while (((*(void *)(*(void *)(a1 + 440) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    {
LABEL_6:
      if (++v8 == v127) {
        goto LABEL_4;
      }
    }
    unint64_t v9 = *(_DWORD **)(a1 + 152);
    unint64_t v128 = v8;
    __p[0] = (*(_DWORD *)(a1 + 432) << *v9) | v8;
    uint64_t v10 = sub_BCE6A0((uint64_t)(v9 + 8), __p);
    int v12 = *(_DWORD *)(v10 + 4);
    unsigned int v11 = *(_DWORD *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 12);
    int v15 = *(_DWORD *)(v10 + 20);
    unint64_t v14 = *(unsigned int *)(v10 + 24);
    unsigned int v16 = *(_DWORD *)(a1 + 432);
    LOWORD(__p[0]) = 0;
    BYTE2(__p[0]) = 0;
    *(void *)&__p[1] = 0;
    *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
    int v158 = 0x7FFFFFFF;
    __int16 v159 = 0;
    unint64_t v160 = 0x8000000080000000;
    __int16 v161 = 0;
    unint64_t v162 = 0x8000000080000000;
    int v163 = 0x7FFFFFFF;
    __int16 v164 = 0;
    unint64_t v165 = 0x8000000080000000;
    __int16 v166 = 0;
    unint64_t v167 = 0x8000000080000000;
    __int16 v168 = 0;
    unint64_t v169 = 0xFFFFFFFF00000000;
    int v170 = -1;
    uint64_t v171 = 0;
    __n128 v173 = 0;
    uint64_t v174 = 0;
    uint64_t v175 = 0;
    int v172 = 0x7FFFFFFF;
    int v176 = 100;
    int v177 = -1;
    long long v178 = v126;
    long long v179 = v126;
    long long v180 = v126;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v184 = 0u;
    uint64_t v17 = *(void *)(a1 + 40);
    long long v185 = 0u;
    long long v186 = 0u;
    if (sub_C259C0(v17 + 3896) && *(void *)(v17 + 3944))
    {
      BOOL v18 = 1;
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 40);
      BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
    }
    BYTE1(__p[0]) = v18;
    uint64_t v20 = *(void *)(a1 + 40);
    if (sub_C259D4(v20 + 3896))
    {
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (v11 != -1) {
        goto LABEL_18;
      }
      goto LABEL_134;
    }
    __p[1] = 0;
    if (v11 == -1)
    {
LABEL_134:
      unint64_t v109 = v181;
      if ((void)v181 != *((void *)&v181 + 1))
      {
        unint64_t v110 = *((void *)&v181 + 1) - 72;
        if (*((void *)&v181 + 1) - 72 > (unint64_t)v181)
        {
          do
          {
            sub_A4D0C8(v109, v110);
            v109 += 72;
            v110 -= 72;
          }
          while (v109 < v110);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v111 = *(void *)(v3 + 16);
      if (v111 >= *(void *)(v3 + 24))
      {
        uint64_t v112 = sub_A4D268(v125, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v112 = v111 + 296;
        *(void *)(v3 + 16) = v111 + 296;
      }
      unint64_t v8 = v128;
      *(void *)(v3 + 16) = v112;
      if (*((void *)&v185 + 1))
      {
        *(void *)&long long v186 = *((void *)&v185 + 1);
        operator delete(*((void **)&v185 + 1));
      }
      if ((void)v184)
      {
        *((void *)&v184 + 1) = v184;
        operator delete((void *)v184);
      }
      if (*((void *)&v182 + 1))
      {
        *(void *)&long long v183 = *((void *)&v182 + 1);
        operator delete(*((void **)&v182 + 1));
      }
      double v113 = (void **)v181;
      if ((void)v181)
      {
        uint64_t v114 = *((void *)&v181 + 1);
        uint64_t v115 = (void *)v181;
        if (*((void *)&v181 + 1) != (void)v181)
        {
          do
          {
            int64_t v117 = *(void **)(v114 - 40);
            if (v117)
            {
              *(void *)(v114 - 32) = v117;
              operator delete(v117);
            }
            int64_t v118 = (void **)(v114 - 72);
            uint64_t v119 = *(void *)(v114 - 72);
            if (v119)
            {
              uint64_t v120 = *(void *)(v114 - 64);
              uint64_t v116 = *(void **)(v114 - 72);
              if (v120 != v119)
              {
                do
                {
                  if (!*(_DWORD *)(v120 - 8))
                  {
                    unint64_t v121 = *(void **)(v120 - 48);
                    if (v121)
                    {
                      *(void *)(v120 - 40) = v121;
                      operator delete(v121);
                    }
                    unint64_t v122 = *(void **)(v120 - 80);
                    if (v122)
                    {
                      *(void *)(v120 - 72) = v122;
                      operator delete(v122);
                    }
                    double v123 = *(void **)(v120 - 104);
                    if (v123)
                    {
                      *(void *)(v120 - 96) = v123;
                      operator delete(v123);
                    }
                  }
                  v120 -= 168;
                }
                while (v120 != v119);
                uint64_t v116 = *v118;
              }
              *(void *)(v114 - 64) = v119;
              operator delete(v116);
              a1 = v130;
            }
            v114 -= 72;
          }
          while (v118 != v113);
          uint64_t v115 = (void *)v181;
          uint64_t v3 = a2;
        }
        *((void *)&v181 + 1) = v113;
        operator delete(v115);
      }
      if (SHIBYTE(v175) < 0) {
        operator delete(v173);
      }
      goto LABEL_6;
    }
LABEL_18:
    int v21 = v128;
    while (1)
    {
      double v146 = 0;
      long long v147 = 0;
      unint64_t v148 = 0;
      __n128 v151 = 0;
      uint64_t v152 = 0;
      unint64_t v150 = 0;
      char v153 = 1;
      unint64_t v154 = 0x8000000080000000;
      __int16 v155 = 0;
      char v156 = 0;
      int v210 = -1;
      if (v14 == 0xFFFFFFFF)
      {
        char v149 = 1;
        int v23 = (uint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v11);
        uint64_t v24 = a1;
        uint64_t v25 = *v23;
        uint64_t v26 = *(void *)sub_A3F32C((void *)(*(void *)(v24 + 48) + 88), v16);
        LODWORD(v188) = 0;
        HIDWORD(v188) = v15;
        uint64_t v190 = v25;
        *(void *)unint64_t v191 = v26;
        int v189 = v12;
        int v202 = 1;
        sub_B46394((uint64_t)v203, (uint64_t)&v188);
        a1 = v130;
        if (!v202)
        {
          if (v200)
          {
            unint64_t v201 = v200;
            operator delete(v200);
          }
          if (v198)
          {
            v199[0] = v198;
            operator delete(v198);
          }
          unsigned int v27 = v196;
          if (v196)
          {
            unint64_t v197 = v196;
LABEL_75:
            operator delete(v27);
          }
        }
      }
      else
      {
        *(_OWORD *)__n128 v131 = xmmword_20E12E0;
        *(_WORD *)&v131[16] = 0;
        unint64_t v132 = 0x8000000080000000;
        __int16 v133 = 0;
        *(_OWORD *)int64_t v134 = xmmword_20EB6B0;
        *(void *)&v134[16] = 0xFFFFFFFF7FFFFFFFLL;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        unsigned int v135 = -1;
        int v139 = 0x7FFFFFFF;
        __n128 v141 = 0;
        uint64_t v142 = 0;
        char v140 = 0;
        char v143 = 1;
        unint64_t v144 = 0x8000000080000000;
        int v145 = 0;
        unint64_t v28 = (void *)(*(void *)(a1 + 56) + 88);
        char v149 = 0;
        uint64_t v29 = *(void *)sub_A3F32C(v28, v14);
        *(void *)int64_t v134 = v29;
        *(void *)&v134[8] = v13;
        *(_DWORD *)&v134[16] = v15;
        *(_DWORD *)&v134[20] = v11;
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v187 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v16);
        sub_A1E9A0((uint64_t)&v188, v30, v29, v11, 0, 0);
        unint64_t v196 = (void *)(v195 + 12 * *(unsigned int *)&v134[8]);
        if (LOBYTE(v199[0])) {
          *(void *)((char *)v199 + 4) = *(void *)&v134[12];
        }
        if (v194) {
          uint64_t v31 = *(unsigned int *)(v194 + 4 * ((v192 - *(void *)&v191[4]) >> 4));
        }
        else {
          uint64_t v31 = 0;
        }
        sub_A4C9D4((uint64_t)&v188, &v187, v31);
        _CF = v192 < v193 && v192 >= *(void *)&v191[4];
        unint64_t v33 = (v192 - *(void *)&v191[4]) >> 4;
        if (!_CF) {
          LODWORD(v33) = -1;
        }
        unsigned int v135 = v33;
        uint64_t v34 = *(void *)(a1 + 48);
        unsigned int v35 = *(_DWORD *)&v134[20];
        unint64_t v36 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v134);
        uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
        if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
          int v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
        }
        else {
          int v39 = 0;
        }
        uint64_t v188 = __ROR8__(*(void *)sub_A10764(v39, v35), 32);
        unsigned int v11 = sub_AD28B0(v34, &v188);
        unsigned int v40 = *(_DWORD *)&v134[20];
        int64_t v41 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v134);
        uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
        if (*v42 >= 9u && (uint64_t v43 = v42[4]) != 0) {
          int v44 = (unsigned int *)((char *)v41 + v43 + *(unsigned int *)((char *)v41 + v43));
        }
        else {
          int v44 = 0;
        }
        *(_DWORD *)&v131[4] = 10 * *(_DWORD *)(sub_A10764(v44, v40) + 8);
        uint64_t v45 = *(void *)(a1 + 40);
        unint64_t v46 = *(void *)v134;
        unsigned int v47 = *(_DWORD *)&v134[20];
        uint64_t v188 = sub_A104E8((void *)(v45 + 4136), *(unint64_t *)v134, *(unsigned int *)&v134[20], *(int *)&v134[8]);
        int v189 = v48;
        int v49 = (int *)sub_A11094((void *)(v45 + 4136), v46);
        BOOL v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 9u && (uint64_t v51 = v50[4]) != 0) {
          uint64_t v52 = (unsigned int *)((char *)v49 + v51 + *(unsigned int *)((char *)v49 + v51));
        }
        else {
          uint64_t v52 = 0;
        }
        unsigned int v53 = *(unsigned __int16 *)(sub_A10764(v52, v47) + 12);
        if (*(_DWORD *)&v134[12] == -1) {
          int v54 = 0x7FFFFFFF;
        }
        else {
          int v54 = *(_DWORD *)&v134[16];
        }
        *(void *)&v131[8] = sub_A0FAA0((uint64_t *)(v45 + 4184), (unsigned int *)&v188, v53, v54);
        *(_WORD *)&v131[16] = v55;
        uint64_t v56 = *(void *)(a1 + 40);
        unint64_t v57 = *(void *)v134;
        unsigned int v58 = v135;
        uint64_t v188 = sub_A104E8((void *)(v56 + 4136), *(unint64_t *)v134, v135, *(int *)&v134[8]);
        int v189 = v59;
        BOOL v60 = (int *)sub_A11094((void *)(v56 + 4136), v57);
        int v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0) {
          char v63 = (unsigned int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62));
        }
        else {
          char v63 = 0;
        }
        unsigned int v64 = *(unsigned __int16 *)(sub_A10764(v63, v58) + 12);
        if (*(_DWORD *)&v134[12] == -1) {
          int v65 = 0x7FFFFFFF;
        }
        else {
          int v65 = *(_DWORD *)&v134[16];
        }
        unint64_t v132 = sub_A0FDF4((uint64_t *)(v56 + 4184), (unsigned int *)&v188, v64, v65);
        __int16 v133 = v66;
        int v202 = -1;
        sub_A20F00((uint64_t)&v188, (uint64_t)v131);
        sub_B46394((uint64_t)v203, (uint64_t)&v188);
        if (!v202)
        {
          if (v200)
          {
            unint64_t v201 = v200;
            operator delete(v200);
          }
          if (v198)
          {
            v199[0] = v198;
            operator delete(v198);
          }
          if (v196)
          {
            unint64_t v197 = v196;
            operator delete(v196);
          }
        }
        if (v140)
        {
          __n128 v141 = v140;
          operator delete(v140);
        }
        if (*((void *)&v137 + 1))
        {
          *(void *)&long long v138 = *((void *)&v137 + 1);
          operator delete(*((void **)&v137 + 1));
        }
        unsigned int v27 = (void *)v136;
        if ((void)v136)
        {
          *((void *)&v136 + 1) = v136;
          goto LABEL_75;
        }
      }
      int v67 = v147;
      if ((unint64_t)v147 >= v148)
      {
        long long v147 = (_DWORD *)sub_A4CBF4((uint64_t *)&v146, (uint64_t)v203);
        int v68 = (void *)*((void *)&v181 + 1);
        if (*((void *)&v181 + 1) >= (unint64_t)v182) {
          goto LABEL_81;
        }
      }
      else
      {
        v147[40] = v210;
        if (v210 == 1)
        {
          long long v92 = *(_OWORD *)v203;
          *(_OWORD *)((char *)v67 + 12) = *(_OWORD *)&v203[12];
          *int v67 = v92;
          long long v147 = (_DWORD *)v67 + 42;
          int v68 = (void *)*((void *)&v181 + 1);
          if (*((void *)&v181 + 1) >= (unint64_t)v182) {
            goto LABEL_81;
          }
        }
        else
        {
          if (!v210) {
            sub_9F6FA0((uint64_t)v67, (long long *)v203);
          }
          long long v147 = (_DWORD *)v67 + 42;
          int v68 = (void *)*((void *)&v181 + 1);
          if (*((void *)&v181 + 1) >= (unint64_t)v182)
          {
LABEL_81:
            int v69 = sub_A4CECC((void ***)&v181, (uint64_t)&v146);
            goto LABEL_84;
          }
        }
      }
      sub_9F6D1C(v68, (uint64_t)&v146);
      int v69 = (char *)(v68 + 9);
LABEL_84:
      *((void *)&v181 + 1) = v69;
      --v21;
      uint64_t v70 = *(void *)(a1 + 152);
      uint64_t v71 = v70 + 32;
      LODWORD(v187) = (v11 << *(_DWORD *)v70) | v21;
      unint64_t v72 = sub_BCE8D8(v70 + 32, (unsigned int *)&v187);
      if (v72 == -1)
      {
        unint64_t v90 = v73;
        if (sub_BCECCC(v71, 1))
        {
          *(_DWORD *)__n128 v131 = v187;
          *(_OWORD *)&v131[4] = xmmword_20EC670;
          unint64_t v132 = 0xFFFFFFFF7FFFFFFFLL;
          sub_BCF000(v71, (unsigned int *)v131, (uint64_t)&v188);
        }
        else
        {
          *(_DWORD *)__n128 v131 = v187;
          *(_OWORD *)&v131[4] = xmmword_20EC670;
          unint64_t v132 = 0xFFFFFFFF7FFFFFFFLL;
          sub_BCF220(v71, (long long *)v131, v90, &v188);
        }
        int v12 = *(_DWORD *)(v192 + 4);
        unsigned int v91 = *(_DWORD *)(v192 + 8);
        uint64_t v13 = *(void *)(v192 + 12);
        int v15 = *(_DWORD *)(v192 + 20);
        unint64_t v14 = *(unsigned int *)(v192 + 24);
        if (!v210) {
          goto LABEL_115;
        }
        goto LABEL_121;
      }
      uint64_t v74 = *(void *)(v70 + 80);
      unint64_t v75 = v72 / 0x30;
      int v76 = (uint64_t *)(v74 + 16 * (v72 / 0x30));
      unsigned int v78 = (unsigned __int8 *)v76 + 10;
      uint64_t v77 = *v76;
      int v79 = v72 % 0x30;
      if ((unsigned __int16)(v72 % 0x30) < 9u)
      {
        __int16 v80 = 0;
        goto LABEL_102;
      }
      __int16 v80 = 0;
      uint64_t v81 = (unsigned __int16)(v72 % 0x30 - 9) >> 3;
      if ((unsigned __int16)(v72 % 0x30 - 9) >> 3)
      {
        __int16 v82 = 0;
        uint64_t v83 = v81 + 1;
        uint64_t v84 = (v81 + 1) & 0x3FFE;
        LOWORD(v81) = v79 - 8 * v84;
        BOOL v85 = &v78[v84];
        uint64_t v86 = (unsigned __int8 *)(v74 + 16 * v75 + 11);
        uint64_t v87 = v84;
        do
        {
          uint64_t v88 = *(v86 - 1);
          int v89 = *v86;
          v86 += 2;
          v80 += byte_20EFECB[v88];
          v82 += byte_20EFECB[v89];
          v87 -= 2;
        }
        while (v87);
        v80 += v82;
        if (v83 == v84) {
          goto LABEL_101;
        }
      }
      else
      {
        LODWORD(v81) = v72 % 0x30;
        BOOL v85 = (unsigned __int8 *)v76 + 10;
      }
      do
      {
        int v93 = *v85++;
        v80 += byte_20EFECB[v93];
        LOWORD(v81) = v81 - 8;
      }
      while ((unsigned __int16)v81 > 8u);
LABEL_101:
      v78 += ((unsigned __int16)(v79 - 9) >> 3) + 1;
      LOBYTE(v79) = v81;
LABEL_102:
      __int16 v94 = byte_20EFECB[~(-1 << v79) & (unint64_t)*v78];
      int v95 = *(uint64_t **)(v70 + 88);
      unsigned __int16 v96 = v80 + v94;
      int v97 = *((unsigned __int16 *)v76 + 4);
      int v98 = v76 + 2;
      _ZF = v97 != v96 || v98 == v95;
      if (_ZF)
      {
        uint64_t v100 = v77 + 28 * v96;
        int v12 = *(_DWORD *)(v100 + 4);
        unsigned int v91 = *(_DWORD *)(v100 + 8);
        uint64_t v13 = *(void *)(v100 + 12);
        int v15 = *(_DWORD *)(v100 + 20);
        unint64_t v14 = *(unsigned int *)(v100 + 24);
        if (!v210) {
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v101 = v74 + 16 * v75 + 32;
        do
        {
          if (*(_WORD *)(v101 - 8)) {
            BOOL v102 = 1;
          }
          else {
            BOOL v102 = v101 == (void)v95;
          }
          v101 += 16;
        }
        while (!v102);
        uint64_t v103 = *(void *)(v101 - 32);
        int v12 = *(_DWORD *)(v103 + 4);
        unsigned int v91 = *(_DWORD *)(v103 + 8);
        uint64_t v13 = *(void *)(v103 + 12);
        int v15 = *(_DWORD *)(v103 + 20);
        unint64_t v14 = *(unsigned int *)(v103 + 24);
        if (!v210)
        {
LABEL_115:
          if (v208)
          {
            __n128 v209 = v208;
            operator delete(v208);
          }
          if (v206)
          {
            char v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            uint64_t v205 = v204;
            operator delete(v204);
          }
        }
      }
LABEL_121:
      if (v150)
      {
        __n128 v151 = v150;
        operator delete(v150);
      }
      __n128 v104 = v146;
      if (v146)
      {
        unsigned __int8 v105 = v147;
        uint64_t v22 = v146;
        if (v147 != v146)
        {
          do
          {
            if (!*(v105 - 2))
            {
              __n128 v106 = (void *)*((void *)v105 - 6);
              if (v106)
              {
                *((void *)v105 - 5) = v106;
                operator delete(v106);
              }
              long long v107 = (void *)*((void *)v105 - 10);
              if (v107)
              {
                *((void *)v105 - 9) = v107;
                operator delete(v107);
              }
              uint64_t v108 = (void *)*((void *)v105 - 13);
              if (v108)
              {
                *((void *)v105 - 12) = v108;
                operator delete(v108);
              }
            }
            v105 -= 42;
          }
          while (v105 != v104);
          uint64_t v22 = v146;
        }
        long long v147 = v104;
        operator delete(v22);
      }
      unsigned int v16 = v11;
      unsigned int v11 = v91;
      _ZF = v91 == -1;
      uint64_t v3 = a2;
      a1 = v130;
      if (_ZF) {
        goto LABEL_134;
      }
    }
  }
LABEL_4:
  double result = std::string::operator=(v124, (const std::string *)(a1 + 576));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 648);
  return result;
}

void sub_BCB7DC(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_BCB8EC(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v39);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_BD2390(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v40[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 432) = sub_AD28B0(v5, v40);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v40[0] = 0x1FFFFFFFDLL;
    unsigned int v7 = sub_AD28B0(v6, v40);
    sub_BD3A90(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27))
      {
        uint64_t v10 = *(int **)(a1 + 336);
        unsigned int v11 = *(int **)(a1 + 344);
        if (v10 == v11)
        {
          uint64_t v19 = *(void *)(a1 + 336);
        }
        else
        {
          do
          {
            int v12 = *v10;
            uint64_t v13 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (*v10 << *v13) | (v9 - 2);
            int v14 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v13 + 8), (unsigned int *)v40) + 4);
            int v15 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (v12 << *v15) | v9;
            uint64_t v16 = sub_BCE6A0((uint64_t)(v15 + 8), (unsigned int *)v40);
            if (v14 != 0x7FFFFFFF)
            {
              int v17 = *(_DWORD *)(v16 + 4);
              if (v17 == 0x7FFFFFFF || v17 < v14) {
                *(_DWORD *)(v16 + 4) = v14;
              }
            }
            ++v10;
          }
          while (v10 != v11);
          uint64_t v10 = *(int **)(a1 + 336);
          uint64_t v19 = *(void *)(a1 + 344);
        }
        *(double *)(a1 + 680) = *(double *)(a1 + 680) + (double)(unint64_t)((v19 - (uint64_t)v10) >> 2);
      }
      if (v9)
      {
        uint64_t v29 = *(unsigned int **)(a1 + 288);
        uint64_t v30 = *(unsigned int **)(a1 + 296);
        if (v29 != v30)
        {
          uint64_t v31 = *(void *)(a1 + 264);
          uint64_t v32 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v33 = *v32++;
            *(void *)(v31 + (((unint64_t)v33 >> 3) & 0x1FFFFFF8)) &= ~(1 << v33);
          }
          while (v32 != v30);
        }
        *(void *)(a1 + 296) = v29;
        sub_BD2650(a1, v9);
        sub_BD2854(a1, v9);
        unint64_t v34 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v34
          && ((*(void *)(*(void *)(a1 + 264) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_50:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int **)(a1 + 240);
        int v21 = *(unsigned int **)(a1 + 248);
        if (v20 != v21)
        {
          uint64_t v22 = *(void *)(a1 + 216);
          int v23 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v24 = *v23++;
            *(void *)(v22 + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) &= ~(1 << v24);
          }
          while (v23 != v21);
        }
        *(void *)(a1 + 248) = v20;
        sub_ADA848((void *)a1, v9);
        sub_725D0((uint64_t)v40);
        uint64_t v25 = *(unsigned int **)(a1 + 408);
        uint64_t v26 = *(unsigned int **)(a1 + 416);
        while (v25 != v26)
        {
          unsigned int v27 = *v25++;
          sub_BD3D50(a1, v9, v27);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v40) + *(double *)(a1 + 608);
        unint64_t v28 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v28
          && ((*(void *)(*(void *)(a1 + 216) + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_50;
        }
      }
      unint64_t v35 = sub_BD2048(a1) + 728;
      if (*(void *)(a1 + 720) > v35) {
        unint64_t v35 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v35;
      if (sub_BCE1A4(a1)) {
        goto LABEL_50;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_48;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_48:
  if (v8)
  {
LABEL_51:
    unint64_t v36 = 0;
    uint64_t v37 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        uint64_t v38 = *(_DWORD **)(a1 + 152);
        LODWORD(v40[0]) = (*(_DWORD *)(a1 + 432) << *v38) | v36;
        *(void *)(a1 + 632) += *(int *)(sub_BCE6A0((uint64_t)(v38 + 8), (unsigned int *)v40) + 4);
      }
      ++v36;
    }
    while (v37 != v36);
  }
LABEL_55:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v39);
}

std::string *sub_BCBCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  double v123 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v156) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v122 = (std::string *)sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v156) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *(unsigned char *)(a1 + 112);
  uint64_t v125 = *(unsigned int *)(a1 + 144);
  if (v125 >= 2)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v124 = _Q0;
    unint64_t v8 = 1;
    uint64_t v128 = a1;
    while (((*(void *)(*(void *)(a1 + 440) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    {
LABEL_6:
      if (++v8 == v125) {
        goto LABEL_4;
      }
    }
    unint64_t v9 = *(_DWORD **)(a1 + 152);
    unint64_t v126 = v8;
    __p[0] = (*(_DWORD *)(a1 + 432) << *v9) | v8;
    uint64_t v10 = sub_BCE6A0((uint64_t)(v9 + 8), __p);
    int v12 = *(_DWORD *)(v10 + 4);
    unsigned int v11 = *(_DWORD *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 12);
    int v15 = *(_DWORD *)(v10 + 20);
    unint64_t v14 = *(unsigned int *)(v10 + 24);
    unsigned int v16 = *(_DWORD *)(a1 + 432);
    LOWORD(__p[0]) = 0;
    BYTE2(__p[0]) = 0;
    *(void *)&__p[1] = 0;
    *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
    int v156 = 0x7FFFFFFF;
    __int16 v157 = 0;
    unint64_t v158 = 0x8000000080000000;
    __int16 v159 = 0;
    unint64_t v160 = 0x8000000080000000;
    int v161 = 0x7FFFFFFF;
    __int16 v162 = 0;
    unint64_t v163 = 0x8000000080000000;
    __int16 v164 = 0;
    unint64_t v165 = 0x8000000080000000;
    __int16 v166 = 0;
    unint64_t v167 = 0xFFFFFFFF00000000;
    int v168 = -1;
    uint64_t v169 = 0;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    int v170 = 0x7FFFFFFF;
    int v174 = 100;
    int v175 = -1;
    long long v176 = v124;
    long long v177 = v124;
    long long v178 = v124;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    uint64_t v17 = *(void *)(a1 + 40);
    long long v183 = 0u;
    long long v184 = 0u;
    if (sub_C259C0(v17 + 3896) && *(void *)(v17 + 3944))
    {
      BOOL v18 = 1;
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 40);
      BOOL v18 = sub_C259D4(v19 + 3896) && *(void *)(v19 + 3960) != 0;
    }
    BYTE1(__p[0]) = v18;
    uint64_t v20 = *(void *)(a1 + 40);
    if (sub_C259D4(v20 + 3896))
    {
      __p[1] = 2 * (*(void *)(v20 + 3960) != 0);
      if (v11 != -1) {
        goto LABEL_18;
      }
      goto LABEL_134;
    }
    __p[1] = 0;
    if (v11 == -1)
    {
LABEL_134:
      sub_A29D50((uint64_t)__p);
      unint64_t v109 = *(void *)(v3 + 16);
      if (v109 >= *(void *)(v3 + 24))
      {
        uint64_t v110 = sub_A4D268(v123, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v110 = v109 + 296;
        *(void *)(v3 + 16) = v109 + 296;
      }
      unint64_t v8 = v126;
      *(void *)(v3 + 16) = v110;
      if (*((void *)&v183 + 1))
      {
        *(void *)&long long v184 = *((void *)&v183 + 1);
        operator delete(*((void **)&v183 + 1));
      }
      if ((void)v182)
      {
        *((void *)&v182 + 1) = v182;
        operator delete((void *)v182);
      }
      if (*((void *)&v180 + 1))
      {
        *(void *)&long long v181 = *((void *)&v180 + 1);
        operator delete(*((void **)&v180 + 1));
      }
      unint64_t v111 = (void **)v179;
      if ((void)v179)
      {
        uint64_t v112 = *((void *)&v179 + 1);
        double v113 = (void *)v179;
        if (*((void *)&v179 + 1) != (void)v179)
        {
          do
          {
            uint64_t v115 = *(void **)(v112 - 40);
            if (v115)
            {
              *(void *)(v112 - 32) = v115;
              operator delete(v115);
            }
            uint64_t v116 = (void **)(v112 - 72);
            uint64_t v117 = *(void *)(v112 - 72);
            if (v117)
            {
              uint64_t v118 = *(void *)(v112 - 64);
              uint64_t v114 = *(void **)(v112 - 72);
              if (v118 != v117)
              {
                do
                {
                  if (!*(_DWORD *)(v118 - 8))
                  {
                    uint64_t v119 = *(void **)(v118 - 48);
                    if (v119)
                    {
                      *(void *)(v118 - 40) = v119;
                      operator delete(v119);
                    }
                    uint64_t v120 = *(void **)(v118 - 80);
                    if (v120)
                    {
                      *(void *)(v118 - 72) = v120;
                      operator delete(v120);
                    }
                    unint64_t v121 = *(void **)(v118 - 104);
                    if (v121)
                    {
                      *(void *)(v118 - 96) = v121;
                      operator delete(v121);
                    }
                  }
                  v118 -= 168;
                }
                while (v118 != v117);
                uint64_t v114 = *v116;
              }
              *(void *)(v112 - 64) = v117;
              operator delete(v114);
              a1 = v128;
            }
            v112 -= 72;
          }
          while (v116 != v111);
          double v113 = (void *)v179;
          uint64_t v3 = a2;
        }
        *((void *)&v179 + 1) = v111;
        operator delete(v113);
      }
      if (SHIBYTE(v173) < 0) {
        operator delete(v171);
      }
      goto LABEL_6;
    }
LABEL_18:
    int v21 = v126;
    while (1)
    {
      unint64_t v144 = 0;
      int v145 = 0;
      unint64_t v146 = 0;
      char v149 = 0;
      uint64_t v150 = 0;
      unint64_t v148 = 0;
      char v151 = 1;
      unint64_t v152 = 0x8000000080000000;
      __int16 v153 = 0;
      char v154 = 0;
      int v208 = -1;
      if (v14 == 0xFFFFFFFF)
      {
        char v147 = 1;
        int v23 = (uint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v16);
        uint64_t v24 = a1;
        uint64_t v25 = *v23;
        uint64_t v26 = *(void *)sub_A3F32C((void *)(*(void *)(v24 + 48) + 88), v11);
        LODWORD(v186) = 0;
        HIDWORD(v186) = v12;
        uint64_t v188 = v25;
        *(void *)int v189 = v26;
        int v187 = v15;
        int v200 = 1;
        sub_B46394((uint64_t)v201, (uint64_t)&v186);
        a1 = v128;
        if (!v200)
        {
          if (v198)
          {
            uint64_t v199 = v198;
            operator delete(v198);
          }
          if (v196)
          {
            v197[0] = v196;
            operator delete(v196);
          }
          unsigned int v27 = v194;
          if (v194)
          {
            uint64_t v195 = v194;
LABEL_75:
            operator delete(v27);
          }
        }
      }
      else
      {
        *(_OWORD *)uint64_t v129 = xmmword_20E12E0;
        *(_WORD *)&v129[16] = 0;
        unint64_t v130 = 0x8000000080000000;
        __int16 v131 = 0;
        *(_OWORD *)unint64_t v132 = xmmword_20EB6B0;
        *(void *)&v132[16] = 0xFFFFFFFF7FFFFFFFLL;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v136 = 0u;
        unsigned int v133 = -1;
        int v137 = 0x7FFFFFFF;
        int v139 = 0;
        uint64_t v140 = 0;
        long long v138 = 0;
        char v141 = 1;
        unint64_t v142 = 0x8000000080000000;
        int v143 = 0;
        unint64_t v28 = (void *)(*(void *)(a1 + 56) + 88);
        char v147 = 0;
        uint64_t v29 = *(void *)sub_A3F32C(v28, v14);
        *(void *)unint64_t v132 = v29;
        *(void *)&v132[8] = v13;
        *(_DWORD *)&v132[16] = v15;
        unsigned int v133 = v11;
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v185 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v16);
        sub_A1E9A0((uint64_t)&v186, v30, v29, v11, 0, 0);
        uint64_t v194 = (void *)(v193 + 12 * *(unsigned int *)&v132[8]);
        if (LOBYTE(v197[0])) {
          *(void *)((char *)v197 + 4) = *(void *)&v132[12];
        }
        if (v192) {
          uint64_t v31 = *(unsigned int *)(v192 + 4 * ((v190 - *(void *)&v189[4]) >> 4));
        }
        else {
          uint64_t v31 = 0;
        }
        sub_A56ED0((uint64_t)&v186, &v185, v31);
        _CF = v190 < v191 && v190 >= *(void *)&v189[4];
        unint64_t v33 = (v190 - *(void *)&v189[4]) >> 4;
        if (!_CF) {
          LODWORD(v33) = -1;
        }
        *(_DWORD *)&v132[20] = v33;
        uint64_t v34 = *(void *)(a1 + 48);
        unsigned int v35 = v133;
        unint64_t v36 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v132);
        uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
        if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
          int v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
        }
        else {
          int v39 = 0;
        }
        uint64_t v186 = __ROR8__(*(void *)sub_A10764(v39, v35), 32);
        unsigned int v11 = sub_AD28B0(v34, &v186);
        unsigned int v40 = *(_DWORD *)&v132[20];
        int64_t v41 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v132);
        uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
        if (*v42 >= 9u && (uint64_t v43 = v42[4]) != 0) {
          int v44 = (unsigned int *)((char *)v41 + v43 + *(unsigned int *)((char *)v41 + v43));
        }
        else {
          int v44 = 0;
        }
        *(_DWORD *)&v129[4] = 10 * *(_DWORD *)(sub_A10764(v44, v40) + 8);
        uint64_t v45 = *(void *)(a1 + 40);
        unint64_t v46 = *(void *)v132;
        unsigned int v47 = *(_DWORD *)&v132[20];
        uint64_t v186 = sub_A104E8((void *)(v45 + 4136), *(unint64_t *)v132, *(unsigned int *)&v132[20], *(int *)&v132[8]);
        int v187 = v48;
        int v49 = (int *)sub_A11094((void *)(v45 + 4136), v46);
        BOOL v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 9u && (uint64_t v51 = v50[4]) != 0) {
          uint64_t v52 = (unsigned int *)((char *)v49 + v51 + *(unsigned int *)((char *)v49 + v51));
        }
        else {
          uint64_t v52 = 0;
        }
        unsigned int v53 = *(unsigned __int16 *)(sub_A10764(v52, v47) + 12);
        if (*(_DWORD *)&v132[12] == -1) {
          int v54 = 0x7FFFFFFF;
        }
        else {
          int v54 = *(_DWORD *)&v132[16];
        }
        *(void *)&v129[8] = sub_A0FAA0((uint64_t *)(v45 + 4184), (unsigned int *)&v186, v53, v54);
        *(_WORD *)&v129[16] = v55;
        uint64_t v56 = *(void *)(a1 + 40);
        unint64_t v57 = *(void *)v132;
        unsigned int v58 = v133;
        uint64_t v186 = sub_A104E8((void *)(v56 + 4136), *(unint64_t *)v132, v133, *(int *)&v132[8]);
        int v187 = v59;
        BOOL v60 = (int *)sub_A11094((void *)(v56 + 4136), v57);
        int v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0) {
          char v63 = (unsigned int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62));
        }
        else {
          char v63 = 0;
        }
        unsigned int v64 = *(unsigned __int16 *)(sub_A10764(v63, v58) + 12);
        if (*(_DWORD *)&v132[12] == -1) {
          int v65 = 0x7FFFFFFF;
        }
        else {
          int v65 = *(_DWORD *)&v132[16];
        }
        unint64_t v130 = sub_A0FDF4((uint64_t *)(v56 + 4184), (unsigned int *)&v186, v64, v65);
        __int16 v131 = v66;
        int v200 = -1;
        sub_A20F00((uint64_t)&v186, (uint64_t)v129);
        sub_B46394((uint64_t)v201, (uint64_t)&v186);
        if (!v200)
        {
          if (v198)
          {
            uint64_t v199 = v198;
            operator delete(v198);
          }
          if (v196)
          {
            v197[0] = v196;
            operator delete(v196);
          }
          if (v194)
          {
            uint64_t v195 = v194;
            operator delete(v194);
          }
        }
        if (v138)
        {
          int v139 = v138;
          operator delete(v138);
        }
        if (*((void *)&v135 + 1))
        {
          *(void *)&long long v136 = *((void *)&v135 + 1);
          operator delete(*((void **)&v135 + 1));
        }
        unsigned int v27 = (void *)v134;
        if ((void)v134)
        {
          *((void *)&v134 + 1) = v134;
          goto LABEL_75;
        }
      }
      int v67 = v145;
      if ((unint64_t)v145 >= v146)
      {
        int v145 = (_DWORD *)sub_A4CBF4((uint64_t *)&v144, (uint64_t)v201);
        int v68 = (void *)*((void *)&v179 + 1);
        if (*((void *)&v179 + 1) >= (unint64_t)v180) {
          goto LABEL_81;
        }
      }
      else
      {
        v145[40] = v208;
        if (v208 == 1)
        {
          long long v92 = *(_OWORD *)v201;
          *(_OWORD *)((char *)v67 + 12) = *(_OWORD *)&v201[12];
          *int v67 = v92;
          int v145 = (_DWORD *)v67 + 42;
          int v68 = (void *)*((void *)&v179 + 1);
          if (*((void *)&v179 + 1) >= (unint64_t)v180) {
            goto LABEL_81;
          }
        }
        else
        {
          if (!v208) {
            sub_9F6FA0((uint64_t)v67, (long long *)v201);
          }
          int v145 = (_DWORD *)v67 + 42;
          int v68 = (void *)*((void *)&v179 + 1);
          if (*((void *)&v179 + 1) >= (unint64_t)v180)
          {
LABEL_81:
            int v69 = sub_A4CECC((void ***)&v179, (uint64_t)&v144);
            goto LABEL_84;
          }
        }
      }
      sub_9F6D1C(v68, (uint64_t)&v144);
      int v69 = (char *)(v68 + 9);
LABEL_84:
      *((void *)&v179 + 1) = v69;
      --v21;
      uint64_t v70 = *(void *)(a1 + 152);
      uint64_t v71 = v70 + 32;
      LODWORD(v185) = (v11 << *(_DWORD *)v70) | v21;
      unint64_t v72 = sub_BCE8D8(v70 + 32, (unsigned int *)&v185);
      if (v72 == -1)
      {
        unint64_t v90 = v73;
        if (sub_BCECCC(v71, 1))
        {
          *(_DWORD *)uint64_t v129 = v185;
          *(_OWORD *)&v129[4] = xmmword_20EC670;
          unint64_t v130 = 0xFFFFFFFF7FFFFFFFLL;
          sub_BCF000(v71, (unsigned int *)v129, (uint64_t)&v186);
        }
        else
        {
          *(_DWORD *)uint64_t v129 = v185;
          *(_OWORD *)&v129[4] = xmmword_20EC670;
          unint64_t v130 = 0xFFFFFFFF7FFFFFFFLL;
          sub_BCF220(v71, (long long *)v129, v90, &v186);
        }
        int v12 = *(_DWORD *)(v190 + 4);
        unsigned int v91 = *(_DWORD *)(v190 + 8);
        uint64_t v13 = *(void *)(v190 + 12);
        int v15 = *(_DWORD *)(v190 + 20);
        unint64_t v14 = *(unsigned int *)(v190 + 24);
        if (!v208) {
          goto LABEL_115;
        }
        goto LABEL_121;
      }
      uint64_t v74 = *(void *)(v70 + 80);
      unint64_t v75 = v72 / 0x30;
      int v76 = (uint64_t *)(v74 + 16 * (v72 / 0x30));
      unsigned int v78 = (unsigned __int8 *)v76 + 10;
      uint64_t v77 = *v76;
      int v79 = v72 % 0x30;
      if ((unsigned __int16)(v72 % 0x30) < 9u)
      {
        __int16 v80 = 0;
        goto LABEL_102;
      }
      __int16 v80 = 0;
      uint64_t v81 = (unsigned __int16)(v72 % 0x30 - 9) >> 3;
      if ((unsigned __int16)(v72 % 0x30 - 9) >> 3)
      {
        __int16 v82 = 0;
        uint64_t v83 = v81 + 1;
        uint64_t v84 = (v81 + 1) & 0x3FFE;
        LOWORD(v81) = v79 - 8 * v84;
        BOOL v85 = &v78[v84];
        uint64_t v86 = (unsigned __int8 *)(v74 + 16 * v75 + 11);
        uint64_t v87 = v84;
        do
        {
          uint64_t v88 = *(v86 - 1);
          int v89 = *v86;
          v86 += 2;
          v80 += byte_20EFECB[v88];
          v82 += byte_20EFECB[v89];
          v87 -= 2;
        }
        while (v87);
        v80 += v82;
        if (v83 == v84) {
          goto LABEL_101;
        }
      }
      else
      {
        LODWORD(v81) = v72 % 0x30;
        BOOL v85 = (unsigned __int8 *)v76 + 10;
      }
      do
      {
        int v93 = *v85++;
        v80 += byte_20EFECB[v93];
        LOWORD(v81) = v81 - 8;
      }
      while ((unsigned __int16)v81 > 8u);
LABEL_101:
      v78 += ((unsigned __int16)(v79 - 9) >> 3) + 1;
      LOBYTE(v79) = v81;
LABEL_102:
      __int16 v94 = byte_20EFECB[~(-1 << v79) & (unint64_t)*v78];
      int v95 = *(uint64_t **)(v70 + 88);
      unsigned __int16 v96 = v80 + v94;
      int v97 = *((unsigned __int16 *)v76 + 4);
      int v98 = v76 + 2;
      _ZF = v97 != v96 || v98 == v95;
      if (_ZF)
      {
        uint64_t v100 = v77 + 28 * v96;
        int v12 = *(_DWORD *)(v100 + 4);
        unsigned int v91 = *(_DWORD *)(v100 + 8);
        uint64_t v13 = *(void *)(v100 + 12);
        int v15 = *(_DWORD *)(v100 + 20);
        unint64_t v14 = *(unsigned int *)(v100 + 24);
        if (!v208) {
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v101 = v74 + 16 * v75 + 32;
        do
        {
          if (*(_WORD *)(v101 - 8)) {
            BOOL v102 = 1;
          }
          else {
            BOOL v102 = v101 == (void)v95;
          }
          v101 += 16;
        }
        while (!v102);
        uint64_t v103 = *(void *)(v101 - 32);
        int v12 = *(_DWORD *)(v103 + 4);
        unsigned int v91 = *(_DWORD *)(v103 + 8);
        uint64_t v13 = *(void *)(v103 + 12);
        int v15 = *(_DWORD *)(v103 + 20);
        unint64_t v14 = *(unsigned int *)(v103 + 24);
        if (!v208)
        {
LABEL_115:
          if (v206)
          {
            char v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            uint64_t v205 = v204;
            operator delete(v204);
          }
          if (v202)
          {
            uint64_t v203 = v202;
            operator delete(v202);
          }
        }
      }
LABEL_121:
      if (v148)
      {
        char v149 = v148;
        operator delete(v148);
      }
      __n128 v104 = v144;
      if (v144)
      {
        unsigned __int8 v105 = v145;
        uint64_t v22 = v144;
        if (v145 != v144)
        {
          do
          {
            if (!*(v105 - 2))
            {
              __n128 v106 = (void *)*((void *)v105 - 6);
              if (v106)
              {
                *((void *)v105 - 5) = v106;
                operator delete(v106);
              }
              long long v107 = (void *)*((void *)v105 - 10);
              if (v107)
              {
                *((void *)v105 - 9) = v107;
                operator delete(v107);
              }
              uint64_t v108 = (void *)*((void *)v105 - 13);
              if (v108)
              {
                *((void *)v105 - 12) = v108;
                operator delete(v108);
              }
            }
            v105 -= 42;
          }
          while (v105 != v104);
          uint64_t v22 = v144;
        }
        int v145 = v104;
        operator delete(v22);
      }
      unsigned int v16 = v11;
      unsigned int v11 = v91;
      _ZF = v91 == -1;
      uint64_t v3 = a2;
      a1 = v128;
      if (_ZF) {
        goto LABEL_134;
      }
    }
  }
LABEL_4:
  double result = std::string::operator=(v122, (const std::string *)(a1 + 576));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 648);
  return result;
}

void sub_BCC9B0(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_BCCAC0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  unsigned int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  int v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    int v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  uint64_t v17 = *(unsigned int **)(a1 + 408);
  BOOL v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    int v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v28 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  int v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)int v23 = __dst;
  *(void *)(a1 + 592) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v35;
  *(_OWORD *)(a1 + 680) = v36;
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  *(_OWORD *)(a1 + 600) = v31;
  *(_OWORD *)(a1 + 616) = v32;
  *(_OWORD *)(a1 + 632) = v33;
  *(_OWORD *)(a1 + 648) = v34;
  if (v28 < 0) {
    operator delete((void *)__p);
  }
  unsigned int v24 = 2 * *(_DWORD *)(a1 + 8) + 2;
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void *)(a1 + 152);
    *(_DWORD *)uint64_t v25 = 32 - __clz(v24);
    if (*(void *)(v25 + 72) | *(void *)(v25 + 112))
    {
      for (uint64_t i = *(void *)(v25 + 80); i != *(void *)(v25 + 88); i += 16)
      {
        if (*(void *)i)
        {
          free(*(void **)i);
          *(void *)uint64_t i = 0;
        }
        *(void *)(i + 8) = 0;
      }
      *(void *)(v25 + 112) = 0;
    }
    *(uint64x2_t *)(v25 + 32) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v25 + 48), (float)*(unint64_t *)(v25 + 104))));
    *(unsigned char *)(v25 + 56) = 0;
    *(void *)(v25 + 72) = 0;
    unsigned int v24 = *(_DWORD *)(a1 + 144);
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_BCCD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_BCCD80(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v24);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  uint64_t v5 = *(unsigned int **)(a1 + 248);
  if (v4 != v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v4);
      unint64_t v8 = *(_DWORD **)(a1 + 152);
      int v25 = (v6 << *v8) | (a2 - 1);
      signed int v9 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v8 + 8), (unsigned int *)&v25) + 4);
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v16 = v9;
        uint64_t v17 = *(void *)(a1 + 64);
        if (v17) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v12 = v11 + 24;
      if (*(unsigned char *)(v11 + 17)) {
        break;
      }
      uint64_t v13 = (int *)sub_498D5C(v12, __ROR8__(v7, 32), 0, "stop");
      BOOL v18 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v18 >= 0x15u)
      {
        unsigned int v14 = v18[10];
        if (v14) {
          goto LABEL_17;
        }
      }
      signed int v16 = v9 + 30;
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
LABEL_19:
        signed int v19 = sub_BD0C48(v17, v6, *(_DWORD *)(a1 + 144) + ~a2);
        if (v19 == 0x7FFFFFFF || v19 < v16) {
          goto LABEL_3;
        }
      }
LABEL_23:
      if (sub_BCE3F8(a1, 1u, v6, a2, v16))
      {
        int v21 = *(_DWORD **)(a1 + 152);
        int v25 = (v6 << *v21) | a2;
        uint64_t v22 = sub_BCE6A0((uint64_t)(v21 + 8), (unsigned int *)&v25);
        *(_DWORD *)(v22 + 8) = v6;
        *(void *)(v22 + 12) = -1;
        *(_DWORD *)(v22 + 20) = v9;
        *(_DWORD *)(v22 + 24) = -1;
      }
LABEL_3:
      if (++v4 == v5) {
        goto LABEL_27;
      }
    }
    uint64_t v13 = (int *)sub_A1A290(v12, v7, 0, "transfers at stop");
    unsigned int v14 = 0;
    int v15 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v15 >= 5u)
    {
      unsigned int v14 = v15[2];
      if (v15[2]) {
LABEL_17:
      }
        unsigned int v14 = *(int *)((char *)v13 + v14);
    }
    signed int v16 = v14 + v9;
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
LABEL_27:
  double result = sub_72688((uint64_t)v24) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_BCCF80(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v242);
  uint64_t v3 = *(unsigned int **)(a1 + 240);
  long long v228 = *(unsigned int **)(a1 + 248);
  if (v3 != v228)
  {
    uint64_t v235 = a1;
    do
    {
      __n128 v229 = v3;
      unsigned int v4 = *v3;
      unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v3);
      unsigned int v6 = *(_DWORD **)(a1 + 152);
      unsigned int v234 = v4;
      LODWORD(v246[0]) = (v4 << *v6) | (a2 - 1);
      int v233 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v6 + 8), (unsigned int *)v246) + 4);
      sub_A19FA8((uint64_t)&v236, *(void *)(a1 + 40), v5);
      unint64_t v7 = v237;
      unint64_t v8 = (unint64_t *)&v238;
      if (v241) {
        unint64_t v8 = v240;
      }
      unint64_t v9 = *v8;
      while ((unint64_t)v7 < v9)
      {
        uint64_t v12 = 0;
        unint64_t v13 = __ROR8__(*v7, 32);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(v14 + 72) - 1;
        unint64_t v16 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v17 = v16 ^ (v16 >> 33);
        uint64_t v18 = *(void *)(v14 + 48);
        uint64_t v19 = v18 + 11;
        uint64_t v20 = -1;
        for (unint64_t i = v17; ; unint64_t i = v12 + v22)
        {
          uint64_t v22 = i & v15;
          unint64_t v23 = (i & v15) / 0x30;
          unint64_t v24 = v22 - 48 * v23;
          if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
          {
            if (v20 == -1) {
              unint64_t v60 = v22;
            }
            else {
              unint64_t v60 = v20;
            }
            if (!sub_AD2F40(v14, 1)) {
              goto LABEL_97;
            }
            goto LABEL_54;
          }
          uint64_t v25 = *(void *)(v18 + 16 * v23);
          if (!*(void *)(v14 + 40)) {
            break;
          }
          uint64_t v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v27 = 0;
            LOBYTE(v32) = v22 - 48 * v23;
            goto LABEL_28;
          }
          __int16 v27 = 0;
          uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
          if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
          {
            __int16 v29 = 0;
            uint64_t v30 = v28 + 1;
            uint64_t v31 = (v28 + 1) & 0x3FFE;
            unsigned __int16 v32 = v24 - 8 * v31;
            long long v33 = &v26[v31];
            long long v34 = (unsigned __int8 *)(v19 + 16 * v23);
            uint64_t v35 = v31;
            do
            {
              uint64_t v36 = *(v34 - 1);
              int v37 = *v34;
              v34 += 2;
              v27 += byte_20EBFB6[v36];
              v29 += byte_20EBFB6[v37];
              v35 -= 2;
            }
            while (v35);
            v27 += v29;
            if (v30 == v31) {
              goto LABEL_27;
            }
          }
          else
          {
            unsigned __int16 v32 = v22 - 48 * v23;
            long long v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          }
          do
          {
            int v38 = *v33++;
            v27 += byte_20EBFB6[v38];
            v32 -= 8;
          }
          while (v32 > 8u);
LABEL_27:
          v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_28:
          int v39 = (_DWORD *)(v25
                         + 12
                         * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
          BOOL v40 = *(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39;
          if (!v40) {
            break;
          }
          if (v20 == -1) {
            uint64_t v20 = v22;
          }
LABEL_15:
          ++v12;
        }
        int64_t v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        if ((unsigned __int16)(v22 - 48 * v23) < 9u)
        {
          __int16 v42 = 0;
          unsigned int v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          LOBYTE(v47) = v22 - 48 * v23;
          goto LABEL_42;
        }
        __int16 v42 = 0;
        uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
        if (!((unsigned __int16)(v22 - 48 * v23 - 9) >> 3))
        {
          unsigned __int16 v47 = v22 - 48 * v23;
          int v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          do
          {
LABEL_40:
            int v54 = *v48++;
            v42 += byte_20EBFB6[v54];
            v47 -= 8;
          }
          while (v47 > 8u);
          goto LABEL_41;
        }
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        int v48 = &v41[v46];
        int v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 != v46) {
          goto LABEL_40;
        }
LABEL_41:
        unsigned int v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_42:
        if (v13 != *(void *)(v25
                              + 12
                              * (unsigned __int16)(v42
                                                 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
          goto LABEL_15;
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
            a1 = v235;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            a1 = v235;
            __int16 v57 = 0;
            if (v56 < 8u)
            {
              unsigned __int16 v58 = v24;
              int v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_102;
            }
            __int16 v106 = 0;
            uint64_t v107 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            int v59 = &v41[v107 & 0x3FFE];
            uint64_t v108 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v57 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            v57 += v106;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_102:
                int v112 = *v59++;
                v57 += byte_20EBFB6[v112];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v113 = *(void *)(v14 + 56);
          unsigned __int16 v114 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v115 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            unsigned __int8 v105 = (_DWORD *)(v25 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            unsigned __int8 v105 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_116;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v14, 1))
        {
LABEL_97:
          *(void *)long long v244 = v13;
          *(_DWORD *)&v244[8] = -1;
          sub_AD3484(v14, (uint64_t *)v244, v60, v246);
          unsigned __int8 v105 = v247;
          a1 = v235;
          goto LABEL_116;
        }
LABEL_54:
        uint64_t v61 = 0;
        *(void *)long long v244 = v13;
        *(_DWORD *)&v244[8] = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_95;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          uint64_t v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_70;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_68:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_69;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          uint64_t v77 = &v71[v76];
          unsigned int v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_68;
          }
LABEL_69:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_70:
          uint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v17 & v62;
            }
LABEL_57:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        BOOL v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
        {
          __int16 v86 = 0;
          int v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = (v17 & v62) % 0x30;
          goto LABEL_84;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = (v17 & v62) % 0x30;
          long long v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_82:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_83;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        long long v92 = &v85[v90];
        int v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_82;
        }
LABEL_83:
        int v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_84:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_57;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_95:
          a1 = v235;
          sub_AD3484(v14, (uint64_t *)v244, v104, v246);
          unsigned __int8 v105 = v247;
          goto LABEL_116;
        }
        a1 = v235;
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            uint64_t v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_211;
          }
          __int16 v200 = 0;
          __int16 v201 = 0;
          uint64_t v202 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          uint64_t v103 = &v85[v202 & 0x3FFE];
          uint64_t v203 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v204 = v202 & 0x3FFE;
          do
          {
            uint64_t v205 = *(v203 - 1);
            int v206 = *v203;
            v203 += 2;
            v200 += byte_20EBFB6[v205];
            v201 += byte_20EBFB6[v206];
            v204 -= 2;
          }
          while (v204);
          __int16 v101 = v201 + v200;
          if ((v202 & 0x3FFE) != v202)
          {
            do
            {
LABEL_211:
              int v207 = *v103++;
              v101 += byte_20EBFB6[v207];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v208 = v63 + 16 * v67;
        __n128 v209 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v210 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        unsigned __int8 v105 = (_DWORD *)(v70 + 12 * v210);
        if (*(unsigned __int16 *)(v208 + 8) == v210)
        {
          uint64_t v211 = v208 + 16;
          if ((_DWORD **)(v208 + 16) != v209)
          {
            while (1)
            {
              long long v212 = (_DWORD **)v211;
              if (*(_WORD *)(v211 + 8)) {
                break;
              }
              v211 += 16;
              if (v212 + 2 == v209)
              {
                uint64_t v208 = *(void *)(v14 + 56);
                goto LABEL_256;
              }
            }
            uint64_t v208 = v211;
LABEL_256:
            unsigned __int8 v105 = *v212;
            goto LABEL_257;
          }
        }
        else
        {
LABEL_257:
          if ((_DWORD **)v208 != v209 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v208 + 12 * *(unsigned __int16 *)(v208 + 8)))
              {
                v208 += 16;
                if ((_DWORD **)v208 != v209)
                {
                  do
                  {
                    if (*(_WORD *)(v208 + 8))
                    {
                      unsigned __int8 v105 = *(_DWORD **)v208;
                      goto LABEL_261;
                    }
                    v208 += 16;
                  }
                  while ((_DWORD **)v208 != v209);
                  unsigned __int8 v105 = *(_DWORD **)(v208 - 16);
                }
                break;
              }
LABEL_261:
              ;
            }
            while ((_DWORD **)v208 != v209);
          }
        }
LABEL_116:
        unsigned int v119 = v105[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v14 + 112);
          *(_DWORD *)(v14 + 112) = v120 + 1;
          v105[2] = v120;
          unint64_t v122 = *(char **)(v14 + 96);
          unint64_t v121 = *(void *)(v14 + 104);
          if ((unint64_t)v122 < v121)
          {
            *(void *)unint64_t v122 = v13;
            uint64_t v123 = (uint64_t)(v122 + 8);
            a1 = v235;
            goto LABEL_142;
          }
          long long v124 = (char **)(v14 + 88);
          uint64_t v125 = *(char **)(v14 + 88);
          uint64_t v126 = (v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v231 = v127;
          if (v127)
          {
            if (v127 >> 61) {
              sub_188D718();
            }
            uint64_t v129 = (char *)operator new(8 * v127);
            long long v124 = (char **)(v14 + 88);
            unint64_t v130 = &v129[8 * v126];
            *(void *)unint64_t v130 = v13;
            uint64_t v123 = (uint64_t)(v130 + 8);
            if (v122 != v125)
            {
LABEL_129:
              unint64_t v131 = v122 - 8 - v125;
              if (v131 < 0x58)
              {
                uint64_t v132 = v235;
                goto LABEL_138;
              }
              uint64_t v132 = v235;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v133 = (v131 >> 3) + 1;
              uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              long long v135 = &v122[-v134];
              v130 -= v134;
              long long v136 = &v129[8 * v126 - 16];
              int v137 = (long long *)(v122 - 16);
              uint64_t v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v139 = *v137;
                *((_OWORD *)v136 - 1) = *(v137 - 1);
                *(_OWORD *)long long v136 = v139;
                v136 -= 32;
                v137 -= 2;
                v138 -= 4;
              }
              while (v138);
              unint64_t v122 = v135;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_277:
                do
                {
LABEL_138:
                  uint64_t v140 = *((void *)v122 - 1);
                  v122 -= 8;
                  *((void *)v130 - 1) = v140;
                  v130 -= 8;
                }
                while (v122 != v125);
              }
              unint64_t v122 = *v124;
              *(void *)(v14 + 88) = v130;
              *(void *)(v14 + 96) = v123;
              *(void *)(v14 + 104) = &v129[8 * v231];
              if (v122) {
LABEL_140:
              }
                operator delete(v122);
LABEL_141:
              a1 = v132;
LABEL_142:
              *(void *)(v14 + 96) = v123;
              unsigned int v119 = v105[2];
              *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
              if (v234 == v119) {
                goto LABEL_234;
              }
              goto LABEL_143;
            }
          }
          else
          {
            uint64_t v129 = 0;
            unint64_t v130 = (char *)(8 * v126);
            *(void *)(8 * v126) = v13;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != v125) {
              goto LABEL_129;
            }
          }
          uint64_t v132 = v235;
          *(void *)(v14 + 88) = v130;
          *(void *)(v14 + 96) = v123;
          *(void *)(v14 + 104) = &v129[8 * v231];
          if (v122) {
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
        if (v234 == v119) {
          goto LABEL_234;
        }
LABEL_143:
        unsigned int v141 = v119;
        int v142 = *((_DWORD *)v237 + 2);
        int v143 = v142 / 10;
        int v144 = v142 % 10;
        if (v142 < 0) {
          char v145 = -5;
        }
        else {
          char v145 = 5;
        }
        unsigned int v146 = (((103 * (char)(v145 + v144)) >> 15) & 1) + ((103 * (char)(v145 + v144)) >> 10);
        int v147 = v143 + v233;
        signed int v148 = v147 + v146;
        uint64_t v149 = *(void *)(a1 + 64);
        if (!v149)
        {
LABEL_193:
          if (!sub_BCE3F8(a1, 1u, v141, a2, v148)) {
            goto LABEL_234;
          }
          uint64_t v178 = *(void *)(a1 + 152);
          uint64_t v179 = v178 + 32;
          int v243 = (v141 << *(_DWORD *)v178) | a2;
          unint64_t v180 = sub_BCE8D8(v178 + 32, (unsigned int *)&v243);
          if (v180 == -1)
          {
            unint64_t v198 = v181;
            if (sub_BCECCC(v179, 1))
            {
              *(_DWORD *)long long v244 = v243;
              *(_OWORD *)&v244[4] = xmmword_20EC670;
              unint64_t v245 = 0xFFFFFFFF7FFFFFFFLL;
              sub_BCF000(v179, (unsigned int *)v244, (uint64_t)v246);
            }
            else
            {
              *(_DWORD *)long long v244 = v243;
              *(_OWORD *)&v244[4] = xmmword_20EC670;
              unint64_t v245 = 0xFFFFFFFF7FFFFFFFLL;
              sub_BCF220(v179, (long long *)v244, v198, v246);
            }
            uint64_t v199 = v247;
          }
          else
          {
            uint64_t v182 = *(void *)(v178 + 80);
            unint64_t v183 = v180 / 0x30;
            long long v184 = (uint64_t *)(v182 + 16 * (v180 / 0x30));
            uint64_t v186 = (unsigned __int8 *)v184 + 10;
            uint64_t v185 = *v184;
            int v187 = v180 % 0x30;
            if ((unsigned __int16)(v180 % 0x30) >= 9u)
            {
              __int16 v188 = 0;
              uint64_t v189 = (unsigned __int16)(v180 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v180 % 0x30 - 9) >> 3)
              {
                __int16 v190 = 0;
                uint64_t v191 = v189 + 1;
                uint64_t v192 = (v189 + 1) & 0x3FFE;
                LOWORD(v189) = v187 - 8 * v192;
                uint64_t v193 = &v186[v192];
                uint64_t v194 = (unsigned __int8 *)(v182 + 16 * v183 + 11);
                uint64_t v195 = v192;
                do
                {
                  uint64_t v196 = *(v194 - 1);
                  int v197 = *v194;
                  v194 += 2;
                  v188 += byte_20EFECB[v196];
                  v190 += byte_20EFECB[v197];
                  v195 -= 2;
                }
                while (v195);
                v188 += v190;
                if (v191 == v192)
                {
LABEL_220:
                  v186 += ((unsigned __int16)(v187 - 9) >> 3) + 1;
                  LOBYTE(v187) = v189;
                  goto LABEL_221;
                }
              }
              else
              {
                LODWORD(v189) = v180 % 0x30;
                uint64_t v193 = (unsigned __int8 *)v184 + 10;
              }
              do
              {
                int v213 = *v193++;
                v188 += byte_20EFECB[v213];
                LOWORD(v189) = v189 - 8;
              }
              while ((unsigned __int16)v189 > 8u);
              goto LABEL_220;
            }
            __int16 v188 = 0;
LABEL_221:
            __int16 v214 = byte_20EFECB[~(-1 << v187) & (unint64_t)*v186];
            uint64_t v215 = *(uint64_t **)(v178 + 88);
            unsigned __int16 v216 = v188 + v214;
            int v217 = *((unsigned __int16 *)v184 + 4);
            __n128 v218 = v184 + 2;
            if (v217 != v216 || v218 == v215)
            {
              uint64_t v199 = (_DWORD *)(v185 + 28 * v216);
            }
            else
            {
              uint64_t v220 = v182 + 16 * v183 + 32;
              do
              {
                if (*(_WORD *)(v220 - 8)) {
                  BOOL v221 = 1;
                }
                else {
                  BOOL v221 = v220 == (void)v215;
                }
                v220 += 16;
              }
              while (!v221);
              uint64_t v199 = *(_DWORD **)(v220 - 32);
            }
          }
          v199[2] = v234;
          *(void *)(v199 + 3) = -1;
          v199[5] = v233;
          v199[6] = -1;
          goto LABEL_234;
        }
        signed int v232 = v147 + v146;
        unsigned int v150 = 0;
        unsigned int v151 = *(_DWORD *)(a1 + 144) + ~a2;
        while (2)
        {
          while (2)
          {
            LODWORD(v246[0]) = (v141 << *(_DWORD *)v149) | (v151 - v150);
            if (*(void *)(v149 + 112) == *(void *)(v149 + 72)) {
              goto LABEL_176;
            }
            unint64_t v152 = sub_BCE8D8(v149 + 32, (unsigned int *)v246);
            if (v152 == -1) {
              goto LABEL_176;
            }
            uint64_t v153 = *(void *)(v149 + 80);
            char v154 = (_DWORD **)(v153 + 16 * (v152 / 0x30));
            __int16 v155 = (unsigned __int8 *)v154 + 10;
            int v156 = v152 % 0x30;
            if ((unsigned __int16)(v152 % 0x30) < 9u)
            {
              __int16 v157 = 0;
              goto LABEL_160;
            }
            __int16 v157 = 0;
            uint64_t v158 = (unsigned __int16)(v152 % 0x30 - 9) >> 3;
            if (!((unsigned __int16)(v152 % 0x30 - 9) >> 3))
            {
              unsigned __int16 v162 = v152 % 0x30;
              unint64_t v163 = (unsigned __int8 *)v154 + 10;
              do
              {
LABEL_158:
                int v168 = *v163++;
                v157 += byte_20EFECB[v168];
                v162 -= 8;
              }
              while (v162 > 8u);
              goto LABEL_159;
            }
            __int16 v159 = 0;
            uint64_t v160 = v158 + 1;
            uint64_t v161 = (v158 + 1) & 0x3FFE;
            unsigned __int16 v162 = v156 - 8 * v161;
            unint64_t v163 = &v155[v161];
            __int16 v164 = (unsigned __int8 *)(v153 + 16 * (v152 / 0x30) + 11);
            uint64_t v165 = v161;
            do
            {
              uint64_t v166 = *(v164 - 1);
              int v167 = *v164;
              v164 += 2;
              v157 += byte_20EFECB[v166];
              v159 += byte_20EFECB[v167];
              v165 -= 2;
            }
            while (v165);
            v157 += v159;
            if (v160 != v161) {
              goto LABEL_158;
            }
LABEL_159:
            v155 += ((unsigned __int16)(v156 - 9) >> 3) + 1;
            LOBYTE(v156) = v162;
LABEL_160:
            uint64_t v169 = *(_DWORD ***)(v149 + 88);
            unsigned __int16 v170 = v157 + byte_20EFECB[~(-1 << v156) & (unint64_t)*v155];
            if (*((unsigned __int16 *)v154 + 4) != v170)
            {
              uint64_t v172 = &(*v154)[7 * v170];
              if (v154 != v169) {
                goto LABEL_168;
              }
LABEL_176:
              signed int v173 = *(_DWORD *)(v149 + 4);
              v150 += 2;
              if (v173 != 0x7FFFFFFF || v150 > v151) {
                goto LABEL_189;
              }
              continue;
            }
            break;
          }
          v154 += 2;
          if (v154 == v169) {
            goto LABEL_176;
          }
          while (1)
          {
            uint64_t v171 = v154;
            if (*((_WORD *)v154 + 4)) {
              break;
            }
            v154 += 2;
            if (v171 + 2 == v169)
            {
              char v154 = *(_DWORD ***)(v149 + 88);
              break;
            }
          }
          uint64_t v172 = *v171;
          if (v154 == v169) {
            goto LABEL_176;
          }
LABEL_168:
          if (*(void *)(v149 + 72))
          {
            while (*(_DWORD *)(v149 + 64) == *v172)
            {
              v172 += 7;
              if (v172 == &(*v154)[7 * *((unsigned __int16 *)v154 + 4)])
              {
                while (1)
                {
                  v154 += 2;
                  if (v154 == v169) {
                    goto LABEL_176;
                  }
                  if (*((_WORD *)v154 + 4))
                  {
                    uint64_t v172 = *v154;
                    break;
                  }
                }
              }
              if (v154 == v169) {
                break;
              }
            }
          }
          BOOL v40 = v154 == v169;
          int v175 = v172 + 1;
          if (v40) {
            int v175 = (signed int *)(v149 + 4);
          }
          signed int v173 = *v175;
          v150 += 2;
          if (v173 == 0x7FFFFFFF && v150 <= v151) {
            continue;
          }
          break;
        }
LABEL_189:
        signed int v148 = v232;
        BOOL v177 = v173 == 0x7FFFFFFF || v173 < v232;
        a1 = v235;
        if (!v177) {
          goto LABEL_193;
        }
LABEL_234:
        unint64_t v9 = (unint64_t)v238;
        unint64_t v7 = (void *)((char *)v237 + 12);
        __n128 v237 = v7;
        if (v7 == v238)
        {
          unint64_t v7 = v239;
          unint64_t v11 = v240[0];
          __n128 v237 = v239;
          int v10 = 1;
          unsigned __int8 v241 = 1;
          if (*(unsigned char *)(v236 + 16)) {
            goto LABEL_238;
          }
        }
        else
        {
          int v10 = v241;
          unint64_t v11 = v240[0];
          if (!*(unsigned char *)(v236 + 16)) {
            goto LABEL_9;
          }
LABEL_238:
          if (v10) {
            unint64_t v222 = v11;
          }
          else {
            unint64_t v222 = (unint64_t)v238;
          }
          if ((unint64_t)v7 < v222)
          {
            while (1)
            {
              unint64_t v224 = __ROR8__(*v7, 32);
              if (HIDWORD(v224) == 1 && (v224 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**(void **)(v236 + 4120)))
              {
                LOBYTE(v10) = v241;
                unint64_t v7 = v237;
                unint64_t v9 = (unint64_t)v238;
                break;
              }
              unint64_t v9 = (unint64_t)v238;
              unint64_t v7 = (void *)((char *)v237 + 12);
              __n128 v237 = v7;
              if (v7 == v238)
              {
                unint64_t v7 = v239;
                __n128 v237 = v239;
                LOBYTE(v10) = 1;
                unsigned __int8 v241 = 1;
                if ((unint64_t)v239 >= v240[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v10) = v241;
                uint64_t v223 = &v238;
                if (v241) {
                  uint64_t v223 = v240;
                }
                if ((unint64_t)v7 >= *v223) {
                  break;
                }
              }
            }
            unint64_t v11 = v240[0];
          }
        }
LABEL_9:
        if ((_BYTE)v10) {
          unint64_t v9 = v11;
        }
      }
      uint64_t v3 = v229 + 1;
    }
    while (v229 + 1 != v228);
  }
  double result = sub_72688((uint64_t)v242) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

BOOL sub_BCE1A4(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v2 = sub_BD2048(a1);
  uint64_t v3 = sub_BD2180(a1) + v2;
  unint64_t v15 = v3 + sub_A409C0(*(uint64_t **)(a1 + 40));
  BOOL v4 = v15 > *(void *)a1;
  if (v15 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v13);
    unint64_t v5 = sub_188FC78(v13, (uint64_t)"Exceeded memory limit of ", 25);
    unsigned int v6 = (void *)sub_38EC58((uint64_t)v5, (unint64_t *)a1);
    unint64_t v7 = sub_188FC78(v6, (uint64_t)" in directional SPA (", 21);
    unint64_t v8 = (void *)sub_38EC58((uint64_t)v7, &v15);
    unint64_t v9 = sub_188FC78(v8, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4;
}

void sub_BCE3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_BCE3F8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, signed int a5)
{
  unsigned int v47 = a3;
  int v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    char v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)a3
      || ((*(void *)(*v14 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    uint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    int v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v22 = *(_DWORD **)(a1 + 152);
    int v48 = (*(_DWORD *)(a1 + 432) << *v22) | a4;
    int v21 = (int *)(sub_BCE6A0((uint64_t)(v22 + 8), (unsigned int *)&v48) + 4);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  int v23 = *v21;
  if (v23 != 0x7FFFFFFF)
  {
    int v24 = *(_DWORD *)(a1 + 28);
    int v25 = v24 / 10;
    int v26 = v24 % 10;
    char v27 = v24 < 0 ? -5 : 5;
    if ((int)(v25 + v23 + (((103 * (char)(v27 + v26)) >> 15) & 1) + ((103 * (char)(v27 + v26)) >> 10)) <= a5) {
      return 0;
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v28 = a1 + 24 * a2;
    uint64_t v29 = *(void *)(v28 + 168);
    uint64_t v30 = *(void *)(v28 + 176);
    uint64_t v31 = (uint64_t *)(v28 + 168);
    unint64_t v32 = (v30 - v29) >> 2;
    if (v32 <= a3)
    {
      sub_5BBEE0((uint64_t)v31, a3 - v32 + 1);
      uint64_t v29 = *v31;
    }
    signed int v33 = *(_DWORD *)(v29 + 4 * a3);
    if (v33 != 0x7FFFFFFF && v33 <= a5) {
      return 0;
    }
  }
  uint64_t v35 = *(_DWORD **)(a1 + 152);
  int v49 = (a3 << *v35) | a4;
  uint64_t v36 = sub_BCE6A0((uint64_t)(v35 + 8), (unsigned int *)&v49);
  signed int v37 = *(_DWORD *)(v36 + 4);
  if (v37 != 0x7FFFFFFF && v37 <= a5) {
    return 0;
  }
  uint64_t v39 = v36;
  unsigned int v40 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v41 = a1 + 24 * a2;
    uint64_t v42 = *(void *)(v41 + 168);
    uint64_t v43 = *(void *)(v41 + 176);
    __int16 v44 = (uint64_t *)(v41 + 168);
    unint64_t v45 = (v43 - v42) >> 2;
    if (v45 <= a3)
    {
      sub_5BBEE0((uint64_t)v44, a3 - v45 + 1);
      uint64_t v42 = *v44;
    }
    *(_DWORD *)(v42 + 4 * a3) = a5;
  }
  *(_DWORD *)(v39 + 4) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v40 + 216), &v47);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v47);
  }
  return 1;
}

uint64_t sub_BCE6A0(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = sub_BCE8D8(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_BCECCC(a1, 1))
    {
      unsigned int v34 = *a2;
      long long v35 = xmmword_20EC670;
      unint64_t v36 = 0xFFFFFFFF7FFFFFFFLL;
      sub_BCF000(a1, &v34, (uint64_t)v37);
    }
    else
    {
      unsigned int v34 = *a2;
      long long v35 = xmmword_20EC670;
      unint64_t v36 = 0xFFFFFFFF7FFFFFFFLL;
      sub_BCF220(a1, (long long *)&v34, v25, v37);
    }
    return v37[4];
  }
  uint64_t v7 = *(void *)(a1 + 48);
  unsigned int v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  unint64_t v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  unint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    unint64_t v20 = &v11[v19];
    int v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EFECB[v23];
      v17 += byte_20EFECB[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EFECB[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EFECB[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  uint64_t v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 28 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

unint64_t sub_BCE8D8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 11;
      int v11 = *(_DWORD *)(a1 + 32);
      uint64_t v12 = -1;
      while (1)
      {
        unsigned __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          int v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          unint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unint64_t v25 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EFECB[v26];
            v23 += byte_20EFECB[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          unint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EFECB[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        int v21 = &v15[v17];
LABEL_16:
        if (v11 == *(_DWORD *)(v14
                              + 28
                              * (unsigned __int16)(v18
                                                 + byte_20EFECB[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          long long v35 = (unsigned __int8 *)(v10 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EFECB[v36];
            v33 += byte_20EFECB[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          uint64_t v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EFECB[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 28
                                     * (unsigned __int16)(v30
                                                        + byte_20EFECB[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      uint64_t v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 28
                                   * (unsigned __int16)(v46
                                                      + byte_20EFECB[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unsigned int v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      uint64_t v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EFECB[v52];
        v49 += byte_20EFECB[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unsigned int v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EFECB[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}

uint64_t sub_BCECCC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_BCF578(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v29 = *(_OWORD *)(a1 + 16);
      int v30 = *(_DWORD *)(a1 + 32);
      memset(v31, 0, sizeof(v31));
      long long v32 = 0u;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v29, 0)));
      BYTE8(v29) = 0;
      sub_BCF800((uint64_t)&v28, 0, (void *)a1, v11);
      int v12 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v30;
      int v30 = v12;
      unsigned __int16 v13 = *(void **)(a1 + 40);
      uint64_t v14 = *(char **)(a1 + 48);
      *(void **)(a1 + 40) = v31[0];
      uint64x2_t v16 = *(uint64x2_t *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      long long v17 = v29;
      *(uint64x2_t *)a1 = v28;
      *(_OWORD *)(a1 + 16) = v17;
      uint64x2_t v28 = v16;
      long long v29 = v15;
      long long v18 = *(_OWORD *)&v31[1];
      v31[0] = v13;
      v31[1] = v14;
      unsigned __int16 v19 = v31[3];
      long long v20 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = v18;
      *(void *)(a1 + 64) = v19;
      *(_OWORD *)&v31[2] = v20;
      *(void *)&long long v18 = v32;
      long long v21 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v32;
      long long v32 = v21;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v18)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v28 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v29, (float)(unint64_t)v21)));
      BYTE8(v29) = 0;
      if (v14)
      {
        __int16 v22 = (char *)v20;
        __int16 v23 = v14;
        if ((char *)v20 != v14)
        {
          uint64_t v24 = (char *)v20;
          do
          {
            uint64_t v26 = (void *)*((void *)v24 - 2);
            v24 -= 16;
            unint64_t v25 = v26;
            if (v26)
            {
              free(v25);
              *((void *)v22 - 2) = 0;
            }
            __int16 v22 = v24;
          }
          while (v24 != v14);
          __int16 v23 = (char *)v31[1];
        }
        v31[2] = v14;
        free(v23);
      }
      return 1;
    }
  }
  return result;
}

void sub_BCEFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_BCEFC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BCEFD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BCEFEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_BCF000@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_BCE8D8(a1, a2);
  if (v6 == -1)
  {
    sub_BCF220(a1, (long long *)a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  int v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EFECB[v23];
      v17 += byte_20EFECB[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EFECB[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EFECB[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 28 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_BD0A68(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_BCF220@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x924924924924924)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_17;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    long long v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EFECB[v23];
      v17 += byte_20EFECB[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EFECB[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(v12
                                         + 28
                                         * (unsigned __int16)(v15
                                                            + byte_20EFECB[~(-1 << v16) & (unint64_t)*v13])))
    *(void *)(a1 + 40) = v5 - 1;
LABEL_17:
  sub_BD030C((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v26 = *(uint64_t **)(a1 + 56);
  uint64_t v28 = v27 + 16 * v8;
  uint64_t v29 = (unsigned __int8 *)(v28 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v30 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v33 = 0;
      __int16 v34 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      long long v32 = &v29[v30 & 0x3FFE];
      long long v35 = (unsigned __int8 *)(v27 + 16 * v8 + 11);
      uint64_t v36 = v30 & 0x3FFE;
      do
      {
        uint64_t v37 = *(v35 - 1);
        int v38 = *v35;
        v35 += 2;
        v33 += byte_20EFECB[v37];
        v34 += byte_20EFECB[v38];
        v36 -= 2;
      }
      while (v36);
      __int16 v31 = v34 + v33;
      if ((v30 & 0x3FFE) == v30) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v31 = 0;
      long long v32 = (unsigned __int8 *)(v28 + 10);
    }
    do
    {
      int v39 = *v32++;
      v31 += byte_20EFECB[v39];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_25:
    v29 += v30;
    goto LABEL_26;
  }
  __int16 v31 = 0;
LABEL_26:
  unsigned __int16 v40 = v31 + byte_20EFECB[~(-1 << v10) & (unint64_t)*v29];
  uint64_t v41 = *(void *)v28 + 28 * v40;
  if (*(unsigned __int16 *)(v28 + 8) == v40)
  {
    uint64_t v42 = v28 + 16;
    uint64_t v28 = *(void *)(a1 + 56);
    if ((uint64_t *)v42 != v26)
    {
      while (1)
      {
        uint64_t v43 = (uint64_t *)v42;
        if (*(_WORD *)(v42 + 8)) {
          break;
        }
        v42 += 16;
        if (v43 + 2 == v26)
        {
          uint64_t v28 = *(void *)(a1 + 56);
          goto LABEL_32;
        }
      }
      uint64_t v28 = v42;
LABEL_32:
      uint64_t v41 = *v43;
    }
  }
  *a4 = a1;
  a4[1] = v27;
  a4[2] = v26;
  a4[3] = v28;
  a4[4] = v41;
  a4[5] = v27;
  a4[6] = v26;
  a4[7] = v26;
  a4[8] = 0;

  return sub_BD0A68(a4);
}

void sub_BCF564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BCF578(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v24 = *(_OWORD *)(a1 + 16);
    int v25 = *(_DWORD *)(a1 + 32);
    memset(v26, 0, sizeof(v26));
    long long v27 = 0u;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24, 0)));
    BYTE8(v24) = 0;
    sub_BCF800((uint64_t)&v23, 0, (void *)a1, v5);
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v25;
    int v25 = v7;
    unint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v26[0];
    uint64x2_t v11 = *(uint64x2_t *)a1;
    long long v10 = *(_OWORD *)(a1 + 16);
    long long v12 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v12;
    uint64x2_t v23 = v11;
    long long v24 = v10;
    long long v13 = *(_OWORD *)&v26[1];
    v26[0] = v8;
    v26[1] = v9;
    uint64_t v14 = v26[3];
    long long v15 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    *(void *)(a1 + 64) = v14;
    *(_OWORD *)&v26[2] = v15;
    *(void *)&long long v13 = v27;
    long long v16 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v27;
    long long v27 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)(unint64_t)v16)));
    BYTE8(v24) = 0;
    if (v9)
    {
      __int16 v17 = (char *)v15;
      unint64_t v18 = v9;
      if ((char *)v15 != v9)
      {
        uint64_t v19 = (char *)v15;
        do
        {
          long long v21 = (void *)*((void *)v19 - 2);
          v19 -= 16;
          long long v20 = v21;
          if (v21)
          {
            free(v20);
            *((void *)v17 - 2) = 0;
          }
          __int16 v17 = v19;
        }
        while (v19 != v9);
        unint64_t v18 = (char *)v26[1];
      }
      v26[2] = v9;
      free(v18);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_BCF748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_BCF76C(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_BCFA74(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_BCF7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE690((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_BCF800(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_28;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_28:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_BCFEF4((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_BD00A4((uint64_t)a3, &v21);
  uint64_t v12 = a3[7];
  if (v22 != a3[6] || v23 != v12 || v24 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v25;
      uint64_t v17 = *(void *)(a1 + 48);
      if ((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + (((v15 & *(_DWORD *)v25) % 0x30) >> 3) + 10) >> (((v15 & *(_DWORD *)v25) % 0x30) & 7)))
      {
        uint64_t v18 = 1;
        do
          unint64_t v16 = (v16 + v18++) & v15;
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
      }
      sub_BD030C((uint64_t *)(a1 + 48), v16, v25);
      sub_BD04E0(&v21);
      if (v22 == a3[6])
      {
        uint64_t v19 = a3[7];
        if (v23 == v19 && v24 == v19) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_BCFA60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BCFA74(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      uint64_t v15 = (int *)(a3 + 10);
      do
      {
        *(void *)uint64_t v8 = 0;
        int v17 = *(unsigned __int16 *)(a3 + 8);
        *(_WORD *)(v8 + 8) = v17;
        if (v17)
        {
          uint64_t v18 = *(unsigned __int16 *)(a3 + 8);
          uint64_t v19 = malloc_type_malloc(28 * v18, 0x100004027586B93uLL);
          if (!v19)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v18);
            exit(1);
          }
          *(void *)uint64_t v8 = v19;
          if (*(_WORD *)(a3 + 8))
          {
            long long v20 = *(long long **)a3;
            uint64_t v21 = 28 * *(unsigned __int16 *)(a3 + 8);
            do
            {
              long long v22 = *v20;
              *(_OWORD *)((char *)v19 + 12) = *(long long *)((char *)v20 + 12);
              *uint64_t v19 = v22;
              uint64_t v19 = (_OWORD *)((char *)v19 + 28);
              long long v20 = (long long *)((char *)v20 + 28);
              v21 -= 28;
            }
            while (v21);
          }
        }
        int v16 = *v15;
        *(_WORD *)(v8 + 14) = *(_WORD *)(a3 + 14);
        *(_DWORD *)(v8 + 10) = v16;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v23 = (uint64_t)&v13[16 * v9];
    uint64_t v24 = &v13[16 * v12];
    unint64_t v25 = v23 + 16 * a2;
    uint64_t v26 = v23;
    do
    {
      *(void *)uint64_t v26 = 0;
      int v28 = *(unsigned __int16 *)(a3 + 8);
      *(_WORD *)(v26 + 8) = v28;
      if (v28)
      {
        uint64_t v29 = *(unsigned __int16 *)(a3 + 8);
        uint64_t v30 = malloc_type_malloc(28 * v29, 0x100004027586B93uLL);
        if (!v30)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v29);
          exit(1);
        }
        *(void *)uint64_t v26 = v30;
        if (*(_WORD *)(a3 + 8))
        {
          __int16 v31 = *(long long **)a3;
          uint64_t v32 = 28 * *(unsigned __int16 *)(a3 + 8);
          do
          {
            long long v33 = *v31;
            *(_OWORD *)((char *)v30 + 12) = *(long long *)((char *)v31 + 12);
            _OWORD *v30 = v33;
            uint64_t v30 = (_OWORD *)((char *)v30 + 28);
            __int16 v31 = (long long *)((char *)v31 + 28);
            v32 -= 28;
          }
          while (v32);
        }
      }
      int v27 = *(_DWORD *)(a3 + 10);
      *(_WORD *)(v26 + 14) = *(_WORD *)(a3 + 14);
      *(_DWORD *)(v26 + 10) = v27;
      v26 += 16;
    }
    while (v26 != v25);
    sub_BCFD9C(v7, a1[1], a1[1], *a1, *a1, v23, v23);
    __int16 v34 = (char *)*a1;
    long long v35 = (char *)a1[1];
    *a1 = v36;
    a1[1] = v25;
    a1[2] = (uint64_t)v24;
    if (v35 != v34)
    {
      uint64_t v37 = v35;
      do
      {
        int v39 = (void *)*((void *)v37 - 2);
        v37 -= 16;
        int v38 = v39;
        if (v39)
        {
          free(v38);
          *((void *)v35 - 2) = 0;
        }
        long long v35 = v37;
      }
      while (v37 != v34);
    }
    if (v34) {
      free(v34);
    }
  }
}

void sub_BCFD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BCFD5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_BCFD64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_BCFD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BCFD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BCFD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        long long v13 = malloc_type_malloc(28 * v12, 0x100004027586B93uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(long long **)(v9 - 16);
          uint64_t v15 = 28 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            long long v16 = *v14;
            *(_OWORD *)((char *)v13 + 12) = *(long long *)((char *)v14 + 12);
            _OWORD *v13 = v16;
            long long v13 = (_OWORD *)((char *)v13 + 28);
            uint64_t v14 = (long long *)((char *)v14 + 28);
            v15 -= 28;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_BCFECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BCFEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BCFEF4(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          int v10 = *(void **)(v8 - 16);
          v8 -= 16;
          uint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_BCFA74(a1, v4 - v6, (uint64_t)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_BD062C(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_BD008C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_BD00A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v5 == v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 48);
    goto LABEL_5;
  }
  unint64_t v6 = *(_DWORD **)v5;
  if (*(_WORD *)(v5 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 56);
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v8;
    goto LABEL_14;
  }
  uint64_t v10 = v5 + 16;
  while (1)
  {
    if (v6)
    {
      free(v6);
      *(void *)(v10 - 16) = 0;
    }
    *(void *)(v10 - 8) = 0;
    if (v10 == v4) {
      break;
    }
    unint64_t v6 = *(_DWORD **)v10;
    int v11 = *(unsigned __int16 *)(v10 + 8);
    v10 += 16;
    if (v11)
    {
      uint64_t v9 = v10 - 16;
      goto LABEL_13;
    }
  }
  uint64_t v9 = v4;
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
LABEL_14:
  *a2 = a1;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v9;
  a2[4] = v6;
  a2[5] = v8;
  a2[6] = v7;
  a2[7] = v7;
  a2[8] = 0;
  if (v5 == v8)
  {
    if (v4 == v7)
    {
      while (v9 != v4)
      {
        if (!*(void *)(a1 + 40) || *(_DWORD *)(a1 + 32) != *v6) {
          break;
        }
        v6 += 7;
        a2[4] = v6;
        uint64_t v19 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 28 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v20 = v9 + 16;
          do
          {
            if (v19)
            {
              free(v19);
              *(void *)(v20 - 16) = 0;
            }
            *(void *)(v20 - 8) = 0;
            if (v20 == v4)
            {
              uint64_t v9 = v4;
              goto LABEL_44;
            }
            unint64_t v6 = *(_DWORD **)v20;
            a2[4] = *(void *)v20;
            int v21 = *(unsigned __int16 *)(v20 + 8);
            v20 += 16;
            uint64_t v19 = v6;
          }
          while (!v21);
          uint64_t v9 = v20 - 16;
LABEL_44:
          a2[3] = v9;
        }
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 40);
      while (v15)
      {
        if (*(_DWORD *)(a1 + 32) != *v6) {
          break;
        }
        v6 += 7;
        a2[4] = v6;
        uint64_t v16 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 28 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v17 = v9 + 16;
          do
          {
            if (v16)
            {
              free(v16);
              *(void *)(v17 - 16) = 0;
            }
            *(void *)(v17 - 8) = 0;
            if (v17 == v4)
            {
              uint64_t v9 = v4;
              goto LABEL_31;
            }
            unint64_t v6 = *(_DWORD **)v17;
            a2[4] = *(void *)v17;
            int v18 = *(unsigned __int16 *)(v17 + 8);
            v17 += 16;
            uint64_t v16 = v6;
          }
          while (!v18);
          uint64_t v9 = v17 - 16;
LABEL_31:
          a2[3] = v9;
          uint64_t v15 = *(void *)(a1 + 40);
        }
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    while (v12)
    {
      if (*(_DWORD *)(a1 + 32) != *v6) {
        break;
      }
      v6 += 7;
      a2[4] = v6;
      unint64_t v13 = *(_DWORD **)v9;
      if (v6 == (_DWORD *)(*(void *)v9 + 28 * *(unsigned __int16 *)(v9 + 8)))
      {
        uint64_t v14 = v9 + 16;
        do
        {
          uint64_t v9 = v14;
          if (v13)
          {
            free(v13);
            *(void *)(v9 - 16) = 0;
          }
          *(void *)(v9 - 8) = 0;
          if (v9 == v4) {
            break;
          }
          unint64_t v6 = *(_DWORD **)v9;
          a2[4] = *(void *)v9;
          uint64_t v14 = v9 + 16;
          unint64_t v13 = v6;
        }
        while (!*(_WORD *)(v9 + 8));
        a2[3] = v9;
        uint64_t v12 = *(void *)(a1 + 40);
      }
    }
  }
}

uint64_t sub_BD030C(uint64_t *a1, unint64_t a2, long long *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  uint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EFECB[v18];
      v12 += byte_20EFECB[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EFECB[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EFECB[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_BD0954(v7, (unsigned __int16)(v10 + byte_20EFECB[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 28 * v25;
  int v28 = (_OWORD *)(*(void *)v7 + v27);
  long long v29 = *a3;
  *(_OWORD *)((char *)v28 + 12) = *(long long *)((char *)a3 + 12);
  _OWORD *v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void *sub_BD04E0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4] + 28;
  a1[4] = v3;
  uint64_t v4 = *(void **)v2;
  unint64_t v5 = (void *)(v2 + 8);
  if (v3 == *(void *)v2 + 28 * *(unsigned __int16 *)(v2 + 8))
  {
    do
    {
      if (v4)
      {
        free(v4);
        *(void *)uint64_t v2 = 0;
      }
      *unint64_t v5 = 0;
      uint64_t v13 = a1[2];
      uint64_t v14 = a1[3];
      uint64_t v2 = v14 + 16;
      a1[3] = v14 + 16;
      if (v14 + 16 == v13) {
        break;
      }
      int v15 = *(unsigned __int16 *)(v14 + 24);
      unint64_t v5 = (void *)(v14 + 24);
      uint64_t v4 = (void *)*(v5 - 1);
      a1[4] = v4;
    }
    while (!v15);
  }
  while (1)
  {
    if (a1[1] == a1[5])
    {
      uint64_t v6 = a1[2];
      if (v6 == a1[6] && v2 == a1[7] && (v2 == v6 || a1[4] == a1[8])) {
        break;
      }
    }
    if (!*(void *)(*a1 + 40)) {
      break;
    }
    uint64_t v7 = (_DWORD *)a1[4];
    if (*(_DWORD *)(*a1 + 32) != *v7) {
      break;
    }
    a1[4] = v7 + 7;
    unint64_t v8 = *(void **)v2;
    uint64_t v9 = (void *)(v2 + 8);
    if (v7 + 7 == (_DWORD *)(*(void *)v2 + 28 * *(unsigned __int16 *)(v2 + 8)))
    {
      do
      {
        if (v8)
        {
          free(v8);
          *(void *)uint64_t v2 = 0;
        }
        void *v9 = 0;
        uint64_t v10 = a1[2];
        uint64_t v11 = a1[3];
        uint64_t v2 = v11 + 16;
        a1[3] = v11 + 16;
        if (v11 + 16 == v10) {
          break;
        }
        int v12 = *(unsigned __int16 *)(v11 + 24);
        uint64_t v9 = (void *)(v11 + 24);
        unint64_t v8 = (void *)*(v9 - 1);
        a1[4] = v8;
      }
      while (!v12);
    }
  }
  return a1;
}

void sub_BD062C(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    int v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      uint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EFECB[v25];
        v21 += byte_20EFECB[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_BD0834(a1, (unsigned __int16)(v16 + byte_20EFECB[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EFECB[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

void sub_BD0834(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (unsigned __int16)(*(_WORD *)(a1 + 8) - 1);
  unint64_t v5 = malloc_type_malloc(28 * v4, 0x100004027586B93uLL);
  if (!v5)
  {
    fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v4);
    exit(1);
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(long long **)a1;
  if (a2)
  {
    uint64_t v8 = 28 * a2;
    __int16 v9 = v6;
    do
    {
      long long v10 = *v7;
      *(_OWORD *)((char *)v9 + 12) = *(long long *)((char *)v7 + 12);
      _OWORD *v9 = v10;
      __int16 v9 = (_OWORD *)((char *)v9 + 28);
      uint64_t v7 = (long long *)((char *)v7 + 28);
      v8 -= 28;
    }
    while (v8);
    uint64_t v7 = *(long long **)a1;
  }
  unsigned __int16 v11 = (long long *)((char *)v7 + 28 * a2 + 28);
  if (v11 != (long long *)((char *)v7 + 28 * *(unsigned __int16 *)(a1 + 8)))
  {
    uint64_t v12 = 28 * a2;
    uint64_t v13 = (_OWORD *)((char *)v6 + v12);
    uint64_t v14 = 28 * *(unsigned __int16 *)(a1 + 8) - v12 - 28;
    do
    {
      long long v15 = *v11;
      *(_OWORD *)((char *)v13 + 12) = *(long long *)((char *)v11 + 12);
      _OWORD *v13 = v15;
      uint64_t v13 = (_OWORD *)((char *)v13 + 28);
      unsigned __int16 v11 = (long long *)((char *)v11 + 28);
      v14 -= 28;
    }
    while (v14);
    uint64_t v7 = *(long long **)a1;
  }
  if (v7) {
    free(v7);
  }
  *(void *)a1 = v6;
}

void sub_BD0954(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (unsigned __int16)(*(_WORD *)(a1 + 8) + 1);
  unint64_t v5 = malloc_type_malloc(28 * v4, 0x100004027586B93uLL);
  if (!v5)
  {
    fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v4);
    exit(1);
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(long long **)a1;
  if (a2)
  {
    uint64_t v8 = 28 * a2;
    __int16 v9 = v6;
    do
    {
      long long v10 = *v7;
      *(_OWORD *)((char *)v9 + 12) = *(long long *)((char *)v7 + 12);
      _OWORD *v9 = v10;
      __int16 v9 = (_OWORD *)((char *)v9 + 28);
      uint64_t v7 = (long long *)((char *)v7 + 28);
      v8 -= 28;
    }
    while (v8);
    uint64_t v7 = *(long long **)a1;
  }
  if (*(unsigned __int16 *)(a1 + 8) != a2)
  {
    uint64_t v11 = 28 * a2;
    uint64_t v12 = (long long *)((char *)v7 + v11);
    uint64_t v13 = (_OWORD *)((char *)v6 + v11 + 28);
    uint64_t v14 = 28 * *(unsigned __int16 *)(a1 + 8) - v11;
    do
    {
      long long v15 = *v12;
      *(_OWORD *)((char *)v13 + 12) = *(long long *)((char *)v12 + 12);
      _OWORD *v13 = v15;
      uint64_t v13 = (_OWORD *)((char *)v13 + 28);
      uint64_t v12 = (long long *)((char *)v12 + 28);
      v14 -= 28;
    }
    while (v14);
    uint64_t v7 = *(long long **)a1;
  }
  if (v7) {
    free(v7);
  }
  *(void *)a1 = v6;
}

void *sub_BD0A68(void *result)
{
  if (result[1] == result[5])
  {
    uint64_t v7 = (_DWORD **)result[2];
    if (v7 == (_DWORD **)result[6])
    {
      uint64_t v12 = (_DWORD **)result[7];
      uint64_t v13 = (_DWORD **)result[3];
LABEL_30:
      while (v13 != v12 || v12 != v7 && result[4] != result[8])
      {
        if (!*(void *)(*result + 40)) {
          break;
        }
        uint64_t v14 = (_DWORD *)result[4];
        if (*(_DWORD *)(*result + 32) != *v14) {
          break;
        }
        result[4] = v14 + 7;
        if (v14 + 7 == &(*v13)[7 * *((unsigned __int16 *)v13 + 4)])
        {
          long long v15 = v13 + 2;
          while (v15 != v7)
          {
            result[4] = *v15;
            int v16 = *((unsigned __int16 *)v15 + 4);
            v15 += 2;
            if (v16)
            {
              uint64_t v13 = v15 - 2;
              result[3] = v13;
              goto LABEL_30;
            }
          }
          uint64_t v13 = v7;
          result[3] = v7;
        }
      }
    }
    else if (*(void *)(*result + 40))
    {
      int v8 = *(_DWORD *)(*result + 32);
      uint64_t v2 = (_DWORD *)result[4];
      if (v8 == *v2)
      {
        __int16 v9 = (_DWORD **)result[3];
        do
        {
          v2 += 7;
          if (v2 == &(*v9)[7 * *((unsigned __int16 *)v9 + 4)])
          {
            long long v10 = v9 + 2;
            __int16 v9 = v7;
            if (v10 != v7)
            {
              do
              {
                uint64_t v11 = v10;
                if (*((_WORD *)v10 + 4))
                {
                  __int16 v9 = v10;
                  goto LABEL_19;
                }
                v10 += 2;
              }
              while (v11 + 2 != v7);
              __int16 v9 = v7;
LABEL_19:
              uint64_t v2 = *v11;
            }
            result[3] = v9;
          }
        }
        while (v8 == *v2);
        goto LABEL_27;
      }
    }
  }
  else if (*(void *)(*result + 40))
  {
    int v1 = *(_DWORD *)(*result + 32);
    uint64_t v2 = (_DWORD *)result[4];
    if (v1 == *v2)
    {
      uint64_t v3 = (_DWORD **)result[3];
      do
      {
        v2 += 7;
        if (v2 == &(*v3)[7 * *((unsigned __int16 *)v3 + 4)])
        {
          uint64_t v4 = (_DWORD **)result[2];
          unint64_t v5 = v3 + 2;
          if (v5 != v4)
          {
            while (1)
            {
              uint64_t v6 = v5;
              if (*((_WORD *)v5 + 4)) {
                break;
              }
              v5 += 2;
              if (v6 + 2 == v4) {
                goto LABEL_6;
              }
            }
            uint64_t v4 = v5;
LABEL_6:
            uint64_t v2 = *v6;
          }
          result[3] = v4;
          uint64_t v3 = v4;
        }
      }
      while (v1 == *v2);
LABEL_27:
      result[4] = v2;
    }
  }
  return result;
}

uint64_t sub_BD0C48(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = (void *)(a1 + 32);
  uint64_t v7 = (unsigned int *)(a1 + 4);
  unsigned int v8 = 2;
  unsigned int v9 = a3;
  do
  {
    LODWORD(v15) = (a2 << *(_DWORD *)a1) | v9;
    sub_BD0D5C(v6, (unsigned int *)&v15, v24);
    uint64_t v10 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 88);
    long long v15 = v6;
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    uint64_t v18 = v11;
    uint64_t v19 = 0;
    uint64_t v20 = v10;
    uint64_t v21 = v11;
    uint64_t v22 = v11;
    uint64_t v23 = 0;
    sub_BD0A68(&v15);
    if (v24[1] != v16 || v25 != v17 || v26 != v18 || (uint64_t v12 = v7, v26 != v25) && (uint64_t v12 = v7, v27 != v19)) {
      uint64_t v12 = (unsigned int *)(v27 + 4);
    }
    uint64_t result = *v12;
    v9 -= 2;
    BOOL v14 = result != 0x7FFFFFFF || v8 > a3;
    v8 += 2;
  }
  while (!v14);
  return result;
}

void *sub_BD0D5C@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_BCE8D8((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  uint64_t v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    uint64_t v18 = &v10[v17];
    uint64_t v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EFECB[v21];
      v15 += byte_20EFECB[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EFECB[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EFECB[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 28 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        uint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_BD0A68(a3);
}

void sub_BD0F28(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1;
  unsigned int v232 = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v4 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v207 = *(_DWORD *)sub_A3F74C((void *)(v3 + 360), &v232);
  uint64_t v208 = v4;
  sub_A40514(&v230, *(void *)(v3 + 40), v4);
  unint64_t v5 = v230;
  if ((unint64_t)v230 < v231)
  {
    uint64_t v215 = v3 + 464;
    uint64_t v216 = v3;
    do
    {
      *(double *)(v3 + 664) = *(double *)(v3 + 664) + 1.0;
      uint64_t v214 = *(unsigned int *)v5;
      unsigned int v213 = v232;
      sub_A1E9A0((uint64_t)&v218, *(void *)(v3 + 40), v208, v207, 0, 1);
      uint64_t v6 = v222;
      if ((unint64_t)v222 < v221 || (unint64_t)v222 >= v223) {
        goto LABEL_3;
      }
      char v217 = 0;
      int v211 = 0x7FFFFFFF;
      LODWORD(v212) = -1;
      uint64_t v209 = 0xFFFFFFFFLL;
      uint64_t v210 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v8 = 0;
        unint64_t v9 = __ROR8__(*v6, 32);
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = *(void *)(v10 + 72) - 1;
        unint64_t v12 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v13 = v12 ^ (v12 >> 33);
        uint64_t v14 = *(void *)(v10 + 48);
        uint64_t v15 = v14 + 11;
        uint64_t v16 = -1;
        for (unint64_t i = v13; ; unint64_t i = v8 + v18)
        {
          uint64_t v18 = i & v11;
          unint64_t v19 = (i & v11) / 0x30;
          unint64_t v20 = v18 - 48 * v19;
          if (((*(unsigned __int8 *)(v14 + 16 * v19 + (v20 >> 3) + 10) >> (v20 & 7)) & 1) == 0)
          {
            if (v16 == -1) {
              unint64_t v56 = v18;
            }
            else {
              unint64_t v56 = v16;
            }
            if (!sub_AD2F40(v10, 1)) {
              goto LABEL_94;
            }
            goto LABEL_51;
          }
          uint64_t v21 = *(void *)(v14 + 16 * v19);
          if (!*(void *)(v10 + 40)) {
            break;
          }
          int v22 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v23 = 0;
            LOBYTE(v28) = v18 - 48 * v19;
            goto LABEL_25;
          }
          __int16 v23 = 0;
          uint64_t v24 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
          if ((unsigned __int16)(v18 - 48 * v19 - 9) >> 3)
          {
            __int16 v25 = 0;
            uint64_t v26 = v24 + 1;
            uint64_t v27 = (v24 + 1) & 0x3FFE;
            unsigned __int16 v28 = v20 - 8 * v27;
            __int16 v29 = &v22[v27];
            uint64_t v30 = (unsigned __int8 *)(v15 + 16 * v19);
            uint64_t v31 = v27;
            do
            {
              uint64_t v32 = *(v30 - 1);
              int v33 = *v30;
              v30 += 2;
              v23 += byte_20EBFB6[v32];
              v25 += byte_20EBFB6[v33];
              v31 -= 2;
            }
            while (v31);
            v23 += v25;
            if (v26 == v27) {
              goto LABEL_24;
            }
          }
          else
          {
            unsigned __int16 v28 = v18 - 48 * v19;
            __int16 v29 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          }
          do
          {
            int v34 = *v29++;
            v23 += byte_20EBFB6[v34];
            v28 -= 8;
          }
          while (v28 > 8u);
LABEL_24:
          v22 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
LABEL_25:
          long long v35 = (_DWORD *)(v21
                         + 12
                         * (unsigned __int16)(v23 + byte_20EBFB6[~(-1 << v28) & (unint64_t)*v22]));
          if (*(_DWORD *)(v10 + 36) != v35[1] || *(_DWORD *)(v10 + 32) != *v35) {
            break;
          }
          if (v16 == -1) {
            uint64_t v16 = v18;
          }
LABEL_12:
          ++v8;
        }
        uint64_t v37 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
        if ((unsigned __int16)(v18 - 48 * v19) < 9u)
        {
          __int16 v38 = 0;
          __int16 v49 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          LOBYTE(v43) = v18 - 48 * v19;
          goto LABEL_39;
        }
        __int16 v38 = 0;
        uint64_t v39 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
        if (!((unsigned __int16)(v18 - 48 * v19 - 9) >> 3))
        {
          unsigned __int16 v43 = v18 - 48 * v19;
          uint64_t v44 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          do
          {
LABEL_37:
            int v50 = *v44++;
            v38 += byte_20EBFB6[v50];
            v43 -= 8;
          }
          while (v43 > 8u);
          goto LABEL_38;
        }
        __int16 v40 = 0;
        uint64_t v41 = v39 + 1;
        uint64_t v42 = (v39 + 1) & 0x3FFE;
        unsigned __int16 v43 = v20 - 8 * v42;
        uint64_t v44 = &v37[v42];
        uint64_t v45 = (unsigned __int8 *)(v15 + 16 * v19);
        uint64_t v46 = v42;
        do
        {
          uint64_t v47 = *(v45 - 1);
          int v48 = *v45;
          v45 += 2;
          v38 += byte_20EBFB6[v47];
          v40 += byte_20EBFB6[v48];
          v46 -= 2;
        }
        while (v46);
        v38 += v40;
        if (v41 != v42) {
          goto LABEL_37;
        }
LABEL_38:
        __int16 v49 = &v37[((unsigned __int16)(v20 - 9) >> 3) + 1];
LABEL_39:
        if (v9 != *(void *)(v21
                             + 12
                             * (unsigned __int16)(v38 + byte_20EBFB6[~(-1 << v43) & (unint64_t)*v49])))
          goto LABEL_12;
        if (v18 != -1)
        {
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v53 = 0;
            uint64_t v3 = v216;
          }
          else
          {
            if ((((_WORD)v18 - 48 * (_WORD)v19 - 8) & 0xFFF8) != 0) {
              __int16 v51 = 8;
            }
            else {
              __int16 v51 = v18 - 48 * v19 - 8;
            }
            unsigned __int16 v52 = ~v51 + v18 - 48 * v19;
            uint64_t v3 = v216;
            __int16 v53 = 0;
            if (v52 < 8u)
            {
              unsigned __int16 v54 = v20;
              __int16 v55 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
              goto LABEL_99;
            }
            __int16 v101 = 0;
            uint64_t v102 = (v52 >> 3) + 1;
            unsigned __int16 v54 = v20 - 8 * (((v52 >> 3) + 1) & 0x3FFE);
            __int16 v55 = &v37[v102 & 0x3FFE];
            uint64_t v103 = (unsigned __int8 *)(v14 + 16 * v19 + 11);
            uint64_t v104 = v102 & 0x3FFE;
            do
            {
              uint64_t v105 = *(v103 - 1);
              int v106 = *v103;
              v103 += 2;
              v53 += byte_20EBFB6[v105];
              v101 += byte_20EBFB6[v106];
              v104 -= 2;
            }
            while (v104);
            v53 += v101;
            if ((v102 & 0x3FFE) != v102)
            {
              do
              {
LABEL_99:
                int v107 = *v55++;
                v53 += byte_20EBFB6[v107];
                v54 -= 8;
              }
              while (v54 > 8u);
            }
            v37 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
            LOBYTE(v20) = v54;
          }
          uint64_t v108 = *(void *)(v10 + 56);
          unsigned __int16 v109 = v53 + byte_20EBFB6[~(-1 << v20) & (unint64_t)*v37];
          uint64_t v110 = v14 + 16 * v19;
          if (*(unsigned __int16 *)(v110 + 8) != v109 || v110 + 16 == v108)
          {
            unsigned __int16 v100 = (_DWORD *)(v21 + 12 * v109);
          }
          else
          {
            uint64_t v112 = v110 + 32;
            do
            {
              if (*(_WORD *)(v112 - 8)) {
                BOOL v113 = 1;
              }
              else {
                BOOL v113 = v112 == v108;
              }
              v112 += 16;
            }
            while (!v113);
            unsigned __int16 v100 = *(_DWORD **)(v112 - 32);
          }
          goto LABEL_113;
        }
        unint64_t v56 = -1;
        if (!sub_AD2F40(v10, 1))
        {
LABEL_94:
          *(void *)unsigned int v234 = v9;
          *(_DWORD *)&v234[8] = -1;
          sub_AD3484(v10, (uint64_t *)v234, v56, v236);
          unsigned __int16 v100 = v237;
          uint64_t v3 = v216;
          goto LABEL_113;
        }
LABEL_51:
        uint64_t v57 = 0;
        *(void *)unsigned int v234 = v9;
        *(_DWORD *)&v234[8] = -1;
        uint64_t v58 = *(void *)(v10 + 72) - 1;
        uint64_t v59 = *(void *)(v10 + 48);
        uint64_t v60 = v59 + 11;
        uint64_t v61 = -1;
        while (2)
        {
          uint64_t v62 = v13 & v58;
          unint64_t v63 = (v13 & v58) / 0x30;
          unint64_t v64 = (v13 & v58) % 0x30;
          if (((*(unsigned __int8 *)(v59 + 16 * v63 + (v64 >> 3) + 10) >> (v64 & 7)) & 1) == 0)
          {
            if (v61 == -1) {
              unint64_t v99 = v13 & v58;
            }
            else {
              unint64_t v99 = v61;
            }
            goto LABEL_92;
          }
          uint64_t v65 = *(void *)(v10 + 40);
          uint64_t v66 = *(void *)(v59 + 16 * v63);
          if (!v65) {
            break;
          }
          unint64_t v67 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
          {
            __int16 v68 = 0;
            LOBYTE(v69) = (v13 & v58) % 0x30;
            goto LABEL_67;
          }
          __int16 v68 = 0;
          uint64_t v69 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
          if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
          {
            LODWORD(v69) = (v13 & v58) % 0x30;
            uint64_t v73 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            do
            {
LABEL_65:
              int v78 = *v73++;
              v68 += byte_20EBFB6[v78];
              LOWORD(v69) = v69 - 8;
            }
            while ((unsigned __int16)v69 > 8u);
            goto LABEL_66;
          }
          __int16 v70 = 0;
          uint64_t v71 = v69 + 1;
          uint64_t v72 = (v69 + 1) & 0x3FFE;
          LOWORD(v69) = v64 - 8 * v72;
          uint64_t v73 = &v67[v72];
          __int16 v74 = (unsigned __int8 *)(v60 + 16 * v63);
          uint64_t v75 = v72;
          do
          {
            uint64_t v76 = *(v74 - 1);
            int v77 = *v74;
            v74 += 2;
            v68 += byte_20EBFB6[v76];
            v70 += byte_20EBFB6[v77];
            v75 -= 2;
          }
          while (v75);
          v68 += v70;
          if (v71 != v72) {
            goto LABEL_65;
          }
LABEL_66:
          v67 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
LABEL_67:
          uint64_t v79 = (_DWORD *)(v66
                         + 12
                         * (unsigned __int16)(v68 + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v67]));
          if (*(_DWORD *)(v10 + 36) == v79[1] && *(_DWORD *)(v10 + 32) == *v79)
          {
            if (v61 == -1) {
              uint64_t v61 = v13 & v58;
            }
LABEL_54:
            unint64_t v13 = ++v57 + v62;
            continue;
          }
          break;
        }
        int v81 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v82 = 0;
          long long v92 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          LOBYTE(v83) = (v13 & v58) % 0x30;
          goto LABEL_81;
        }
        __int16 v82 = 0;
        uint64_t v83 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
        if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
        {
          LODWORD(v83) = (v13 & v58) % 0x30;
          uint64_t v87 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          do
          {
LABEL_79:
            int v93 = *v87++;
            v82 += byte_20EBFB6[v93];
            LOWORD(v83) = v83 - 8;
          }
          while ((unsigned __int16)v83 > 8u);
          goto LABEL_80;
        }
        __int16 v84 = 0;
        uint64_t v85 = v83 + 1;
        uint64_t v86 = (v83 + 1) & 0x3FFE;
        LOWORD(v83) = v64 - 8 * v86;
        uint64_t v87 = &v81[v86];
        __int16 v88 = (unsigned __int8 *)(v60 + 16 * v63);
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = *(v88 - 1);
          int v91 = *v88;
          v88 += 2;
          v82 += byte_20EBFB6[v90];
          v84 += byte_20EBFB6[v91];
          v89 -= 2;
        }
        while (v89);
        v82 += v84;
        if (v85 != v86) {
          goto LABEL_79;
        }
LABEL_80:
        long long v92 = &v81[((unsigned __int16)(v64 - 9) >> 3) + 1];
LABEL_81:
        if (v9 != *(void *)(v66
                             + 12
                             * (unsigned __int16)(v82 + byte_20EBFB6[~(-1 << v83) & (unint64_t)*v92])))
          goto LABEL_54;
        if (v62 == -1)
        {
          unint64_t v99 = -1;
LABEL_92:
          uint64_t v3 = v216;
          sub_AD3484(v10, (uint64_t *)v234, v99, v236);
          unsigned __int16 v100 = v237;
          goto LABEL_113;
        }
        uint64_t v3 = v216;
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v96 = 0;
        }
        else
        {
          if ((((_WORD)v62 - 48 * (_WORD)v63 - 8) & 0xFFF8) != 0) {
            __int16 v94 = 8;
          }
          else {
            __int16 v94 = v62 - 48 * v63 - 8;
          }
          unsigned __int16 v95 = ~v94 + v62 - 48 * v63;
          if (v95 < 8u)
          {
            __int16 v96 = 0;
            unsigned __int16 v97 = v64;
            int v98 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            goto LABEL_198;
          }
          __int16 v177 = 0;
          __int16 v178 = 0;
          uint64_t v179 = (v95 >> 3) + 1;
          unsigned __int16 v97 = v64 - 8 * (((v95 >> 3) + 1) & 0x3FFE);
          int v98 = &v81[v179 & 0x3FFE];
          unint64_t v180 = (unsigned __int8 *)(v59 + 16 * v63 + 11);
          uint64_t v181 = v179 & 0x3FFE;
          do
          {
            uint64_t v182 = *(v180 - 1);
            int v183 = *v180;
            v180 += 2;
            v177 += byte_20EBFB6[v182];
            v178 += byte_20EBFB6[v183];
            v181 -= 2;
          }
          while (v181);
          __int16 v96 = v178 + v177;
          if ((v179 & 0x3FFE) != v179)
          {
            do
            {
LABEL_198:
              int v184 = *v98++;
              v96 += byte_20EBFB6[v184];
              v97 -= 8;
            }
            while (v97 > 8u);
          }
          v81 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
          LOBYTE(v64) = v97;
        }
        uint64_t v185 = v59 + 16 * v63;
        uint64_t v186 = *(_DWORD ***)(v10 + 56);
        unsigned __int16 v187 = v96 + byte_20EBFB6[~(-1 << v64) & (unint64_t)*v81];
        unsigned __int16 v100 = (_DWORD *)(v66 + 12 * v187);
        if (*(unsigned __int16 *)(v185 + 8) == v187)
        {
          uint64_t v188 = v185 + 16;
          if ((_DWORD **)(v185 + 16) != v186)
          {
            while (1)
            {
              uint64_t v189 = (_DWORD **)v188;
              if (*(_WORD *)(v188 + 8)) {
                break;
              }
              v188 += 16;
              if (v189 + 2 == v186)
              {
                uint64_t v185 = *(void *)(v10 + 56);
                goto LABEL_206;
              }
            }
            uint64_t v185 = v188;
LABEL_206:
            unsigned __int16 v100 = *v189;
            goto LABEL_207;
          }
        }
        else
        {
LABEL_207:
          if ((_DWORD **)v185 != v186 && v65)
          {
            do
            {
              if (*(_DWORD *)(v10 + 36) != v100[1] || *(_DWORD *)(v10 + 32) != *v100) {
                break;
              }
              v100 += 3;
              if (v100 == (_DWORD *)(*(void *)v185 + 12 * *(unsigned __int16 *)(v185 + 8)))
              {
                v185 += 16;
                if ((_DWORD **)v185 != v186)
                {
                  do
                  {
                    if (*(_WORD *)(v185 + 8))
                    {
                      unsigned __int16 v100 = *(_DWORD **)v185;
                      goto LABEL_211;
                    }
                    v185 += 16;
                  }
                  while ((_DWORD **)v185 != v186);
                  unsigned __int16 v100 = *(_DWORD **)(v185 - 16);
                }
                break;
              }
LABEL_211:
              ;
            }
            while ((_DWORD **)v185 != v186);
          }
        }
LABEL_113:
        unsigned int v114 = v100[2];
        if (v114 == -1)
        {
          int v117 = *(_DWORD *)(v10 + 112);
          *(_DWORD *)(v10 + 112) = v117 + 1;
          v100[2] = v117;
          unsigned int v119 = *(unint64_t **)(v10 + 96);
          unint64_t v118 = *(void *)(v10 + 104);
          if ((unint64_t)v119 < v118)
          {
            *unsigned int v119 = v9;
            uint64_t v120 = (uint64_t)(v119 + 1);
            goto LABEL_154;
          }
          unint64_t v121 = (unint64_t **)(v10 + 88);
          unint64_t v122 = *(char **)(v10 + 88);
          uint64_t v123 = ((char *)v119 - v122) >> 3;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v125 = v118 - (void)v122;
          if (v125 >> 2 > v124) {
            unint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v124)
          {
            if (v124 >> 61) {
              sub_188D718();
            }
            unint64_t v126 = v124;
            unint64_t v127 = (char *)operator new(8 * v124);
            unint64_t v121 = (unint64_t **)(v10 + 88);
            uint64_t v128 = (unint64_t *)&v127[8 * v123];
            unint64_t *v128 = v9;
            uint64_t v120 = (uint64_t)(v128 + 1);
            if (v119 != (unint64_t *)v122)
            {
LABEL_134:
              unint64_t v129 = (char *)(v119 - 1) - v122;
              if (v129 < 0x58) {
                goto LABEL_261;
              }
              if ((unint64_t)(v122 - v127) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v151 = (v129 >> 3) + 1;
              uint64_t v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v153 = &v119[v152 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v128 = (unint64_t *)((char *)v128 - v152);
              char v154 = &v127[8 * v123 - 16];
              __int16 v155 = v119 - 2;
              uint64_t v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v157 = *(_OWORD *)v155;
                *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                *(_OWORD *)char v154 = v157;
                v154 -= 32;
                v155 -= 4;
                v156 -= 4;
              }
              while (v156);
              unsigned int v119 = v153;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_261:
                do
                {
                  unint64_t v158 = *--v119;
                  *--uint64_t v128 = v158;
                }
                while (v119 != (unint64_t *)v122);
              }
              unsigned int v119 = *v121;
            }
          }
          else
          {
            unint64_t v126 = 0;
            unint64_t v127 = 0;
            uint64_t v128 = (unint64_t *)(8 * v123);
            *(void *)(8 * v123) = v9;
            uint64_t v120 = 8 * v123 + 8;
            if (v119 != (unint64_t *)v122) {
              goto LABEL_134;
            }
          }
          *(void *)(v10 + 88) = v128;
          *(void *)(v10 + 96) = v120;
          *(void *)(v10 + 104) = &v127[8 * v126];
          if (v119) {
            operator delete(v119);
          }
LABEL_154:
          *(void *)(v10 + 96) = v120;
          uint64_t v3 = v216;
          unsigned int v115 = v100[2];
          if (sub_BD5C18(v215, v115, v9)) {
            goto LABEL_115;
          }
LABEL_155:
          v217 &= *(unsigned char *)(v3 + 32) != 0;
          goto LABEL_156;
        }
        unsigned int v115 = v100[2];
        if (!sub_BD5C18(v215, v114, v9)) {
          goto LABEL_155;
        }
LABEL_115:
        if (v217 & 1) != 0 && (*((unsigned char *)v222 + 15))
        {
          uint64_t v116 = v224;
          if (v224) {
            uint64_t v116 = *(unsigned int *)(v224 + 4 * (((unint64_t)v222 - v221) >> 4));
          }
          if ((v116 & v214) == 0)
          {
            int v167 = (unsigned int *)((char *)v220 + *(unsigned __int16 *)((char *)v220 - *v220 + 6));
            int v168 = (char *)v167 + *v167;
            uint64_t v169 = &v229;
            if (!v227) {
              uint64_t v169 = v226;
            }
            signed int v170 = *(_DWORD *)&v168[8 * v226[1] + 4 + 8 * (((unint64_t)v222 - v221) >> 4)] + *v169;
            uint64_t v171 = *(void *)(v3 + 64);
            if (!v171
              || (signed int v172 = sub_BD0C48(v171, v115, *(_DWORD *)(v3 + 144) + ~a2), v172 != 0x7FFFFFFF) && v172 >= v170)
            {
              if (sub_BCE3F8(v3, 0, v115, a2, v170))
              {
                signed int v173 = *(_DWORD **)(v3 + 152);
                LODWORD(v236[0]) = (v115 << *v173) | a2;
                uint64_t v174 = sub_BCE6A0((uint64_t)(v173 + 8), (unsigned int *)v236);
                *(_DWORD *)(v174 + 8) = v212;
                *(void *)(v174 + 12) = v210 | (v209 << 32);
                *(_DWORD *)(v174 + 20) = v211;
                *(_DWORD *)(v174 + 24) = v213;
              }
            }
          }
        }
        if ((*((unsigned char *)v222 + 15) & 2) == 0) {
          goto LABEL_156;
        }
        if (v224)
        {
          if (*(_DWORD *)(v224 + 4 * (((unint64_t)v222 - v221) >> 4)) != v214) {
            goto LABEL_156;
          }
        }
        else if (v214)
        {
          goto LABEL_156;
        }
        uint64_t v130 = *(void *)(v3 + 152);
        uint64_t v131 = v130 + 32;
        int v233 = (v115 << *(_DWORD *)v130) | (a2 - 1);
        unint64_t v132 = sub_BCE8D8(v130 + 32, (unsigned int *)&v233);
        if (v132 == -1)
        {
          unint64_t v175 = v133;
          if (sub_BCECCC(v131, 1))
          {
            *(_DWORD *)unsigned int v234 = v233;
            *(_OWORD *)&v234[4] = xmmword_20EC670;
            unint64_t v235 = 0xFFFFFFFF7FFFFFFFLL;
            sub_BCF000(v131, (unsigned int *)v234, (uint64_t)v236);
          }
          else
          {
            *(_DWORD *)unsigned int v234 = v233;
            *(_OWORD *)&v234[4] = xmmword_20EC670;
            unint64_t v235 = 0xFFFFFFFF7FFFFFFFLL;
            sub_BCF220(v131, (long long *)v234, v175, v236);
          }
          int v176 = v237[1];
          if (v176 != 0x7FFFFFFF) {
            goto LABEL_238;
          }
          goto LABEL_156;
        }
        uint64_t v134 = *(void *)(v130 + 80);
        unint64_t v135 = v132 / 0x30;
        long long v136 = (uint64_t *)(v134 + 16 * (v132 / 0x30));
        uint64_t v138 = (unsigned __int8 *)v136 + 10;
        uint64_t v137 = *v136;
        int v139 = v132 % 0x30;
        if ((unsigned __int16)(v132 % 0x30) < 9u)
        {
          __int16 v140 = 0;
          goto LABEL_225;
        }
        __int16 v140 = 0;
        uint64_t v141 = (unsigned __int16)(v132 % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(v132 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v145 = v132 % 0x30;
          unsigned int v146 = (unsigned __int8 *)v136 + 10;
          do
          {
LABEL_223:
            int v191 = *v146++;
            v140 += byte_20EFECB[v191];
            v145 -= 8;
          }
          while (v145 > 8u);
          goto LABEL_224;
        }
        __int16 v142 = 0;
        uint64_t v143 = v141 + 1;
        uint64_t v144 = (v141 + 1) & 0x3FFE;
        unsigned __int16 v145 = v139 - 8 * v144;
        unsigned int v146 = &v138[v144];
        int v147 = (unsigned __int8 *)(v134 + 16 * v135 + 11);
        uint64_t v148 = v144;
        do
        {
          uint64_t v149 = *(v147 - 1);
          int v150 = *v147;
          v147 += 2;
          v140 += byte_20EFECB[v149];
          v142 += byte_20EFECB[v150];
          v148 -= 2;
        }
        while (v148);
        v140 += v142;
        if (v143 != v144) {
          goto LABEL_223;
        }
LABEL_224:
        v138 += ((unsigned __int16)(v139 - 9) >> 3) + 1;
        LOBYTE(v139) = v145;
LABEL_225:
        __int16 v192 = byte_20EFECB[~(-1 << v139) & (unint64_t)*v138];
        uint64_t v193 = *(uint64_t **)(v130 + 88);
        unsigned __int16 v194 = v140 + v192;
        int v195 = *((unsigned __int16 *)v136 + 4);
        uint64_t v196 = v136 + 2;
        if (v195 != v194 || v196 == v193)
        {
          int v176 = *(_DWORD *)(v137 + 28 * v194 + 4);
          if (v176 == 0x7FFFFFFF) {
            goto LABEL_156;
          }
LABEL_238:
          signed int v200 = *((_DWORD *)v222 + 2) + v176;
          if (v217)
          {
            __int16 v201 = (unsigned int *)((char *)v220 + *(unsigned __int16 *)((char *)v220 - *v220 + 6));
            uint64_t v202 = (char *)v201 + *v201;
            uint64_t v203 = &v229;
            if (!v227) {
              uint64_t v203 = v226;
            }
            if (v200 >= *(_DWORD *)&v202[8 * v226[1] + 8 + 8 * (((unint64_t)v222 - v221) >> 4)]
                       + *v203
              || !sub_A40398(*(void *)(v3 + 40), (uint64_t)&v218, v200))
            {
              goto LABEL_253;
            }
            goto LABEL_246;
          }
          if (v227)
          {
            if (sub_A1F39C(*(void *)(v3 + 40), (uint64_t)&v218, v200, 1))
            {
LABEL_246:
              unint64_t v212 = ((unint64_t)v222 - v221) >> 4;
              if (v227) {
                int v204 = v229;
              }
              else {
                int v204 = 0x7FFFFFFF;
              }
              int v211 = v204;
              if (v227) {
                uint64_t v205 = v228;
              }
              else {
                uint64_t v205 = 0xFFFFFFFFLL;
              }
              uint64_t v209 = v205;
              uint64_t v210 = -1431655765 * (((unint64_t)v226 - v225) >> 2);
LABEL_253:
              char v217 = 1;
              goto LABEL_156;
            }
          }
          else if (sub_A1F8B4((uint64_t)&v218, v200, 1))
          {
            goto LABEL_246;
          }
          char v217 = 0;
          goto LABEL_156;
        }
        uint64_t v198 = v134 + 16 * v135 + 32;
        do
        {
          if (*(_WORD *)(v198 - 8)) {
            BOOL v199 = 1;
          }
          else {
            BOOL v199 = v198 == (void)v193;
          }
          v198 += 16;
        }
        while (!v199);
        int v176 = *(_DWORD *)(*(void *)(v198 - 32) + 4);
        if (v176 != 0x7FFFFFFF) {
          goto LABEL_238;
        }
LABEL_156:
        unint64_t v159 = v221;
        uint64_t v6 = v222 + 2;
        v222 += 2;
        if (*(unsigned char *)(v218 + 16)) {
          BOOL v160 = v219 == 0;
        }
        else {
          BOOL v160 = 0;
        }
        if (v160 && (unint64_t)v6 >= v221 && (unint64_t)v6 < v223)
        {
          do
          {
            unint64_t v163 = __ROR8__(*v6, 32);
            if (HIDWORD(v163) == 1 && (v163 + 3) < 2) {
              break;
            }
            char v165 = sub_2AB7E4(**(void **)(v218 + 4120));
            unint64_t v159 = v221;
            uint64_t v6 = v222;
            if (v165) {
              break;
            }
            uint64_t v6 = v222 + 2;
            unint64_t v222 = v6;
          }
          while ((unint64_t)v6 >= v221 && (unint64_t)v6 < v223);
        }
      }
      while ((unint64_t)v6 >= v159 && (unint64_t)v6 < v223);
LABEL_3:
      unint64_t v5 = v230 + 4;
      long long v230 = v5;
    }
    while ((unint64_t)v5 < v231);
  }
}

uint64_t sub_BD2048(uint64_t a1)
{
  uint64_t v21 = *(void *)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 192);
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v14 = *(void *)(a1 + 256);
  uint64_t v15 = 8 * (*(void *)(a1 + 232) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = 8 * (*(void *)(a1 + 280) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v3 = *(void *)(a1 + 304);
  uint64_t v16 = *(void *)(a1 + 336);
  uint64_t v17 = *(void *)(a1 + 288);
  uint64_t v4 = 8 * (*(void *)(a1 + 328) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v5 = *(void *)(a1 + 376);
  uint64_t v6 = *(void *)(a1 + 352);
  uint64_t v13 = *(void *)(a1 + 360);
  uint64_t v7 = *(void *)(a1 + 408);
  uint64_t v8 = 8 * (*(void *)(a1 + 400) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v9 = 8 * (*(void *)(a1 + 456) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v10 = *(void *)(a1 + 424);
  uint64_t result = v18
         + v21
         - (v22
          + v20)
         + v14
         + v15
         - v19
         + v3
         + v2
         - v17
         + v6
         + v4
         + v5
         - (v16
          + v13)
         + v8
         + v10
         - v7
         + sub_BD6170((void *)(a1 + 464))
         + v9;
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12)
  {
    if (*(unsigned char *)(a1 + 568)) {
      result += 28 * *(void *)(v12 + 104);
    }
  }
  return result;
}

uint64_t sub_BD2180(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 48) + 104)
         - *(void *)(*(void *)(a1 + 48) + 88)
         + *(void *)(*(void *)(a1 + 56) + 104)
         + 12 * (*(void *)(*(void *)(a1 + 56) + 72) + *(void *)(*(void *)(a1 + 48) + 72))
         - *(void *)(*(void *)(a1 + 56) + 88);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3) {
    result += 28 * *(void *)(v3 + 104);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    uint64_t v5 = (char *)*v4;
    uint64_t v7 = v4 + 1;
    uint64_t v6 = (char *)v4[1];
    uint64_t v8 = v7[1] - (void)v5;
    if (v5 != v6)
    {
      unint64_t v9 = v6 - v5 - 48;
      if (v9 >= 0x30)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v9 / 0x30 + 1;
        uint64_t v10 = &v5[48 * (v12 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v13 = v5 + 64;
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v8 = v8 + *(v13 - 3) + 8 * (*(v13 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v13 - 5);
          uint64_t v11 = v11 + v13[3] + 8 * (*v13 & 0x3FFFFFFFFFFFFFFLL) - v13[1];
          v13 += 12;
          v14 -= 2;
        }
        while (v14);
        v8 += v11;
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFELL)) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = v5;
      }
      do
      {
        uint64_t v8 = v8 + *((void *)v10 + 5) + 8 * (*((void *)v10 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v10 + 3);
        v10 += 48;
      }
      while (v10 != v6);
    }
LABEL_11:
    result += v8;
  }
  uint64_t v15 = *(void **)(a1 + 96);
  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = (char *)*v15;
  uint64_t v18 = v15 + 1;
  uint64_t v17 = (char *)v15[1];
  uint64_t v19 = v18[1] - (void)v16;
  if (v16 != v17)
  {
    unint64_t v20 = v17 - v16 - 48;
    if (v20 >= 0x30)
    {
      uint64_t v22 = 0;
      unint64_t v23 = v20 / 0x30 + 1;
      uint64_t v21 = &v16[48 * (v23 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v24 = v16 + 64;
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v19 = v19 + *(v24 - 3) + 8 * (*(v24 - 6) & 0x3FFFFFFFFFFFFFFLL) - *(v24 - 5);
        uint64_t v22 = v22 + v24[3] + 8 * (*v24 & 0x3FFFFFFFFFFFFFFLL) - v24[1];
        v24 += 12;
        v25 -= 2;
      }
      while (v25);
      v19 += v22;
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v21 = v16;
    }
    do
    {
      uint64_t v19 = v19 + *((void *)v21 + 5) + 8 * (*((void *)v21 + 2) & 0x3FFFFFFFFFFFFFFLL) - *((void *)v21 + 3);
      v21 += 48;
    }
    while (v21 != v17);
  }
LABEL_20:
  result += v19;
LABEL_21:
  uint64_t v26 = *(void *)(a1 + 152);
  if (v26)
  {
    if (!*(unsigned char *)(a1 + 568)) {
      result += 28 * *(void *)(v26 + 104);
    }
  }
  return result;
}

void sub_BD2390(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  uint64_t v7 = *(unsigned int **)(a1 + 288);
  uint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  unint64_t v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    uint64_t v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  uint64_t v17 = *(unsigned int **)(a1 + 408);
  uint64_t v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v28 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)unint64_t v23 = __dst;
  *(void *)(a1 + 592) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v35;
  *(_OWORD *)(a1 + 680) = v36;
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  *(_OWORD *)(a1 + 600) = v31;
  *(_OWORD *)(a1 + 616) = v32;
  *(_OWORD *)(a1 + 632) = v33;
  *(_OWORD *)(a1 + 648) = v34;
  if (v28 < 0) {
    operator delete((void *)__p);
  }
  unsigned int v24 = 2 * *(_DWORD *)(a1 + 8) + 2;
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void *)(a1 + 152);
    *(_DWORD *)uint64_t v25 = 32 - __clz(v24);
    if (*(void *)(v25 + 72) | *(void *)(v25 + 112))
    {
      for (uint64_t i = *(void *)(v25 + 80); i != *(void *)(v25 + 88); i += 16)
      {
        if (*(void *)i)
        {
          free(*(void **)i);
          *(void *)uint64_t i = 0;
        }
        *(void *)(i + 8) = 0;
      }
      *(void *)(v25 + 112) = 0;
    }
    *(uint64x2_t *)(v25 + 32) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v25 + 48), (float)*(unint64_t *)(v25 + 104))));
    *(unsigned char *)(v25 + 56) = 0;
    *(void *)(v25 + 72) = 0;
    unsigned int v24 = *(_DWORD *)(a1 + 144);
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_BD2634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_BD2650(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v24);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  uint64_t v5 = *(unsigned int **)(a1 + 248);
  if (v4 != v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v4);
      uint64_t v8 = *(_DWORD **)(a1 + 152);
      int v25 = (v6 << *v8) | (a2 - 1);
      signed int v9 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v8 + 8), (unsigned int *)&v25) + 4);
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v16 = v9;
        uint64_t v17 = *(void *)(a1 + 64);
        if (v17) {
          goto LABEL_19;
        }
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v12 = v11 + 24;
      if (*(unsigned char *)(v11 + 17)) {
        break;
      }
      uint64_t v13 = (int *)sub_498D5C(v12, __ROR8__(v7, 32), 0, "stop");
      uint64_t v18 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v18 >= 0x15u)
      {
        unsigned int v14 = v18[10];
        if (v14) {
          goto LABEL_17;
        }
      }
      signed int v16 = v9 - 30;
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
LABEL_19:
        signed int v19 = sub_BD0C48(v17, v6, *(_DWORD *)(a1 + 144) + ~a2);
        if (v19 == 0x7FFFFFFF || v19 > v16) {
          goto LABEL_3;
        }
      }
LABEL_24:
      if (sub_BD3A90(a1, 1u, v6, a2, v16))
      {
        uint64_t v21 = *(_DWORD **)(a1 + 152);
        int v25 = (v6 << *v21) | a2;
        uint64_t v22 = sub_BCE6A0((uint64_t)(v21 + 8), (unsigned int *)&v25);
        *(_DWORD *)(v22 + 8) = v6;
        *(void *)(v22 + 12) = -1;
        *(_DWORD *)(v22 + 20) = v9;
        *(_DWORD *)(v22 + 24) = -1;
      }
LABEL_3:
      if (++v4 == v5) {
        goto LABEL_28;
      }
    }
    uint64_t v13 = (int *)sub_A1A290(v12, v7, 0, "transfers at stop");
    unsigned int v14 = 0;
    uint64_t v15 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v15 >= 5u)
    {
      unsigned int v14 = v15[2];
      if (v15[2]) {
LABEL_17:
      }
        unsigned int v14 = -*(int *)((char *)v13 + v14);
    }
    signed int v16 = v14 + v9;
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_28:
  double result = sub_72688((uint64_t)v24) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_BD2854(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v242);
  uint64_t v3 = *(unsigned int **)(a1 + 240);
  unsigned int v228 = *(unsigned int **)(a1 + 248);
  if (v3 != v228)
  {
    uint64_t v235 = a1;
    do
    {
      int v229 = v3;
      unsigned int v4 = *v3;
      unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v3);
      unsigned int v6 = *(_DWORD **)(a1 + 152);
      unsigned int v234 = v4;
      LODWORD(v246[0]) = (v4 << *v6) | (a2 - 1);
      int v233 = *(_DWORD *)(sub_BCE6A0((uint64_t)(v6 + 8), (unsigned int *)v246) + 4);
      sub_A28D38((uint64_t)&v236, *(void *)(a1 + 40), v5);
      unint64_t v7 = v237;
      uint64_t v8 = (unint64_t *)&v238;
      if (v241) {
        uint64_t v8 = v240;
      }
      unint64_t v9 = *v8;
      while ((unint64_t)v7 < v9)
      {
        uint64_t v12 = 0;
        unint64_t v13 = __ROR8__(*v7, 32);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(v14 + 72) - 1;
        unint64_t v16 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v17 = v16 ^ (v16 >> 33);
        uint64_t v18 = *(void *)(v14 + 48);
        uint64_t v19 = v18 + 11;
        uint64_t v20 = -1;
        for (unint64_t i = v17; ; unint64_t i = v12 + v22)
        {
          uint64_t v22 = i & v15;
          unint64_t v23 = (i & v15) / 0x30;
          unint64_t v24 = v22 - 48 * v23;
          if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
          {
            if (v20 == -1) {
              unint64_t v60 = v22;
            }
            else {
              unint64_t v60 = v20;
            }
            if (!sub_AD2F40(v14, 1)) {
              goto LABEL_97;
            }
            goto LABEL_54;
          }
          uint64_t v25 = *(void *)(v18 + 16 * v23);
          if (!*(void *)(v14 + 40)) {
            break;
          }
          uint64_t v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v27 = 0;
            LOBYTE(v32) = v22 - 48 * v23;
            goto LABEL_28;
          }
          __int16 v27 = 0;
          uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
          if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
          {
            __int16 v29 = 0;
            uint64_t v30 = v28 + 1;
            uint64_t v31 = (v28 + 1) & 0x3FFE;
            unsigned __int16 v32 = v24 - 8 * v31;
            long long v33 = &v26[v31];
            long long v34 = (unsigned __int8 *)(v19 + 16 * v23);
            uint64_t v35 = v31;
            do
            {
              uint64_t v36 = *(v34 - 1);
              int v37 = *v34;
              v34 += 2;
              v27 += byte_20EBFB6[v36];
              v29 += byte_20EBFB6[v37];
              v35 -= 2;
            }
            while (v35);
            v27 += v29;
            if (v30 == v31) {
              goto LABEL_27;
            }
          }
          else
          {
            unsigned __int16 v32 = v22 - 48 * v23;
            long long v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          }
          do
          {
            int v38 = *v33++;
            v27 += byte_20EBFB6[v38];
            v32 -= 8;
          }
          while (v32 > 8u);
LABEL_27:
          v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_28:
          uint64_t v39 = (_DWORD *)(v25
                         + 12
                         * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
          BOOL v40 = *(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39;
          if (!v40) {
            break;
          }
          if (v20 == -1) {
            uint64_t v20 = v22;
          }
LABEL_15:
          ++v12;
        }
        uint64_t v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        if ((unsigned __int16)(v22 - 48 * v23) < 9u)
        {
          __int16 v42 = 0;
          __int16 v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          LOBYTE(v47) = v22 - 48 * v23;
          goto LABEL_42;
        }
        __int16 v42 = 0;
        uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
        if (!((unsigned __int16)(v22 - 48 * v23 - 9) >> 3))
        {
          unsigned __int16 v47 = v22 - 48 * v23;
          int v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          do
          {
LABEL_40:
            int v54 = *v48++;
            v42 += byte_20EBFB6[v54];
            v47 -= 8;
          }
          while (v47 > 8u);
          goto LABEL_41;
        }
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        int v48 = &v41[v46];
        __int16 v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 != v46) {
          goto LABEL_40;
        }
LABEL_41:
        __int16 v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_42:
        if (v13 != *(void *)(v25
                              + 12
                              * (unsigned __int16)(v42
                                                 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
          goto LABEL_15;
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
            a1 = v235;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            a1 = v235;
            __int16 v57 = 0;
            if (v56 < 8u)
            {
              unsigned __int16 v58 = v24;
              uint64_t v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_102;
            }
            __int16 v106 = 0;
            uint64_t v107 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            uint64_t v59 = &v41[v107 & 0x3FFE];
            uint64_t v108 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v57 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            v57 += v106;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_102:
                int v112 = *v59++;
                v57 += byte_20EBFB6[v112];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v113 = *(void *)(v14 + 56);
          unsigned __int16 v114 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v115 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            uint64_t v105 = (_DWORD *)(v25 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            uint64_t v105 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_116;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v14, 1))
        {
LABEL_97:
          *(void *)long long v244 = v13;
          *(_DWORD *)&v244[8] = -1;
          sub_AD3484(v14, (uint64_t *)v244, v60, v246);
          uint64_t v105 = v247;
          a1 = v235;
          goto LABEL_116;
        }
LABEL_54:
        uint64_t v61 = 0;
        *(void *)long long v244 = v13;
        *(_DWORD *)&v244[8] = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_95;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          uint64_t v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_70;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            int v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_68:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_69;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          int v77 = &v71[v76];
          int v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_68;
          }
LABEL_69:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_70:
          uint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v17 & v62;
            }
LABEL_57:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        uint64_t v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
        {
          __int16 v86 = 0;
          unsigned __int16 v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = (v17 & v62) % 0x30;
          goto LABEL_84;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = (v17 & v62) % 0x30;
          long long v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_82:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_83;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        long long v92 = &v85[v90];
        int v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_82;
        }
LABEL_83:
        unsigned __int16 v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_84:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_57;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_95:
          a1 = v235;
          sub_AD3484(v14, (uint64_t *)v244, v104, v246);
          uint64_t v105 = v247;
          goto LABEL_116;
        }
        a1 = v235;
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            uint64_t v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_212;
          }
          __int16 v200 = 0;
          __int16 v201 = 0;
          uint64_t v202 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          uint64_t v103 = &v85[v202 & 0x3FFE];
          uint64_t v203 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v204 = v202 & 0x3FFE;
          do
          {
            uint64_t v205 = *(v203 - 1);
            int v206 = *v203;
            v203 += 2;
            v200 += byte_20EBFB6[v205];
            v201 += byte_20EBFB6[v206];
            v204 -= 2;
          }
          while (v204);
          __int16 v101 = v201 + v200;
          if ((v202 & 0x3FFE) != v202)
          {
            do
            {
LABEL_212:
              int v207 = *v103++;
              v101 += byte_20EBFB6[v207];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v208 = v63 + 16 * v67;
        uint64_t v209 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v210 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        uint64_t v105 = (_DWORD *)(v70 + 12 * v210);
        if (*(unsigned __int16 *)(v208 + 8) == v210)
        {
          uint64_t v211 = v208 + 16;
          if ((_DWORD **)(v208 + 16) != v209)
          {
            while (1)
            {
              unint64_t v212 = (_DWORD **)v211;
              if (*(_WORD *)(v211 + 8)) {
                break;
              }
              v211 += 16;
              if (v212 + 2 == v209)
              {
                uint64_t v208 = *(void *)(v14 + 56);
                goto LABEL_257;
              }
            }
            uint64_t v208 = v211;
LABEL_257:
            uint64_t v105 = *v212;
            goto LABEL_258;
          }
        }
        else
        {
LABEL_258:
          if ((_DWORD **)v208 != v209 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v208 + 12 * *(unsigned __int16 *)(v208 + 8)))
              {
                v208 += 16;
                if ((_DWORD **)v208 != v209)
                {
                  do
                  {
                    if (*(_WORD *)(v208 + 8))
                    {
                      uint64_t v105 = *(_DWORD **)v208;
                      goto LABEL_262;
                    }
                    v208 += 16;
                  }
                  while ((_DWORD **)v208 != v209);
                  uint64_t v105 = *(_DWORD **)(v208 - 16);
                }
                break;
              }
LABEL_262:
              ;
            }
            while ((_DWORD **)v208 != v209);
          }
        }
LABEL_116:
        unsigned int v119 = v105[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v14 + 112);
          *(_DWORD *)(v14 + 112) = v120 + 1;
          v105[2] = v120;
          unint64_t v122 = *(char **)(v14 + 96);
          unint64_t v121 = *(void *)(v14 + 104);
          if ((unint64_t)v122 < v121)
          {
            *(void *)unint64_t v122 = v13;
            uint64_t v123 = (uint64_t)(v122 + 8);
            a1 = v235;
            goto LABEL_142;
          }
          unint64_t v124 = (char **)(v14 + 88);
          uint64_t v125 = *(char **)(v14 + 88);
          uint64_t v126 = (v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v231 = v127;
          if (v127)
          {
            if (v127 >> 61) {
              sub_188D718();
            }
            unint64_t v129 = (char *)operator new(8 * v127);
            unint64_t v124 = (char **)(v14 + 88);
            uint64_t v130 = &v129[8 * v126];
            *(void *)uint64_t v130 = v13;
            uint64_t v123 = (uint64_t)(v130 + 8);
            if (v122 != v125)
            {
LABEL_129:
              unint64_t v131 = v122 - 8 - v125;
              if (v131 < 0x58)
              {
                uint64_t v132 = v235;
                goto LABEL_138;
              }
              uint64_t v132 = v235;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_278;
              }
              uint64_t v133 = (v131 >> 3) + 1;
              uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v135 = &v122[-v134];
              v130 -= v134;
              long long v136 = &v129[8 * v126 - 16];
              uint64_t v137 = (long long *)(v122 - 16);
              uint64_t v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v139 = *v137;
                *((_OWORD *)v136 - 1) = *(v137 - 1);
                *(_OWORD *)long long v136 = v139;
                v136 -= 32;
                v137 -= 2;
                v138 -= 4;
              }
              while (v138);
              unint64_t v122 = v135;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_278:
                do
                {
LABEL_138:
                  uint64_t v140 = *((void *)v122 - 1);
                  v122 -= 8;
                  *((void *)v130 - 1) = v140;
                  v130 -= 8;
                }
                while (v122 != v125);
              }
              unint64_t v122 = *v124;
              *(void *)(v14 + 88) = v130;
              *(void *)(v14 + 96) = v123;
              *(void *)(v14 + 104) = &v129[8 * v231];
              if (v122) {
LABEL_140:
              }
                operator delete(v122);
LABEL_141:
              a1 = v132;
LABEL_142:
              *(void *)(v14 + 96) = v123;
              unsigned int v119 = v105[2];
              *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
              if (v234 == v119) {
                goto LABEL_235;
              }
              goto LABEL_143;
            }
          }
          else
          {
            unint64_t v129 = 0;
            uint64_t v130 = (char *)(8 * v126);
            *(void *)(8 * v126) = v13;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != v125) {
              goto LABEL_129;
            }
          }
          uint64_t v132 = v235;
          *(void *)(v14 + 88) = v130;
          *(void *)(v14 + 96) = v123;
          *(void *)(v14 + 104) = &v129[8 * v231];
          if (v122) {
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
        if (v234 == v119) {
          goto LABEL_235;
        }
LABEL_143:
        unsigned int v141 = v119;
        int v142 = *((_DWORD *)v237 + 2);
        int v143 = v142 / -10;
        int v144 = v142 % 10;
        if (v142 < 0) {
          char v145 = -5;
        }
        else {
          char v145 = 5;
        }
        unsigned int v146 = (((-103 * (char)(v145 + v144)) >> 15) & 1) + ((-103 * (char)(v145 + v144)) >> 10);
        int v147 = v143 + v233;
        signed int v148 = v147 + v146;
        uint64_t v149 = *(void *)(a1 + 64);
        if (!v149)
        {
LABEL_194:
          if (!sub_BD3A90(a1, 1u, v141, a2, v148)) {
            goto LABEL_235;
          }
          uint64_t v178 = *(void *)(a1 + 152);
          uint64_t v179 = v178 + 32;
          int v243 = (v141 << *(_DWORD *)v178) | a2;
          unint64_t v180 = sub_BCE8D8(v178 + 32, (unsigned int *)&v243);
          if (v180 == -1)
          {
            unint64_t v198 = v181;
            if (sub_BCECCC(v179, 1))
            {
              *(_DWORD *)long long v244 = v243;
              *(_OWORD *)&v244[4] = xmmword_20EC670;
              unint64_t v245 = 0xFFFFFFFF7FFFFFFFLL;
              sub_BCF000(v179, (unsigned int *)v244, (uint64_t)v246);
            }
            else
            {
              *(_DWORD *)long long v244 = v243;
              *(_OWORD *)&v244[4] = xmmword_20EC670;
              unint64_t v245 = 0xFFFFFFFF7FFFFFFFLL;
              sub_BCF220(v179, (long long *)v244, v198, v246);
            }
            BOOL v199 = v247;
          }
          else
          {
            uint64_t v182 = *(void *)(v178 + 80);
            unint64_t v183 = v180 / 0x30;
            int v184 = (uint64_t *)(v182 + 16 * (v180 / 0x30));
            uint64_t v186 = (unsigned __int8 *)v184 + 10;
            uint64_t v185 = *v184;
            int v187 = v180 % 0x30;
            if ((unsigned __int16)(v180 % 0x30) >= 9u)
            {
              __int16 v188 = 0;
              uint64_t v189 = (unsigned __int16)(v180 % 0x30 - 9) >> 3;
              if ((unsigned __int16)(v180 % 0x30 - 9) >> 3)
              {
                __int16 v190 = 0;
                uint64_t v191 = v189 + 1;
                uint64_t v192 = (v189 + 1) & 0x3FFE;
                LOWORD(v189) = v187 - 8 * v192;
                uint64_t v193 = &v186[v192];
                unsigned __int16 v194 = (unsigned __int8 *)(v182 + 16 * v183 + 11);
                uint64_t v195 = v192;
                do
                {
                  uint64_t v196 = *(v194 - 1);
                  int v197 = *v194;
                  v194 += 2;
                  v188 += byte_20EFECB[v196];
                  v190 += byte_20EFECB[v197];
                  v195 -= 2;
                }
                while (v195);
                v188 += v190;
                if (v191 == v192)
                {
LABEL_221:
                  v186 += ((unsigned __int16)(v187 - 9) >> 3) + 1;
                  LOBYTE(v187) = v189;
                  goto LABEL_222;
                }
              }
              else
              {
                LODWORD(v189) = v180 % 0x30;
                uint64_t v193 = (unsigned __int8 *)v184 + 10;
              }
              do
              {
                int v213 = *v193++;
                v188 += byte_20EFECB[v213];
                LOWORD(v189) = v189 - 8;
              }
              while ((unsigned __int16)v189 > 8u);
              goto LABEL_221;
            }
            __int16 v188 = 0;
LABEL_222:
            __int16 v214 = byte_20EFECB[~(-1 << v187) & (unint64_t)*v186];
            uint64_t v215 = *(uint64_t **)(v178 + 88);
            unsigned __int16 v216 = v188 + v214;
            int v217 = *((unsigned __int16 *)v184 + 4);
            uint64_t v218 = v184 + 2;
            if (v217 != v216 || v218 == v215)
            {
              BOOL v199 = (_DWORD *)(v185 + 28 * v216);
            }
            else
            {
              uint64_t v220 = v182 + 16 * v183 + 32;
              do
              {
                if (*(_WORD *)(v220 - 8)) {
                  BOOL v221 = 1;
                }
                else {
                  BOOL v221 = v220 == (void)v215;
                }
                v220 += 16;
              }
              while (!v221);
              BOOL v199 = *(_DWORD **)(v220 - 32);
            }
          }
          v199[2] = v234;
          *(void *)(v199 + 3) = -1;
          v199[5] = v233;
          v199[6] = -1;
          goto LABEL_235;
        }
        signed int v232 = v147 + v146;
        unsigned int v150 = 0;
        unsigned int v151 = *(_DWORD *)(a1 + 144) + ~a2;
        while (2)
        {
          while (2)
          {
            LODWORD(v246[0]) = (v141 << *(_DWORD *)v149) | (v151 - v150);
            if (*(void *)(v149 + 112) == *(void *)(v149 + 72)) {
              goto LABEL_176;
            }
            unint64_t v152 = sub_BCE8D8(v149 + 32, (unsigned int *)v246);
            if (v152 == -1) {
              goto LABEL_176;
            }
            uint64_t v153 = *(void *)(v149 + 80);
            char v154 = (_DWORD **)(v153 + 16 * (v152 / 0x30));
            __int16 v155 = (unsigned __int8 *)v154 + 10;
            int v156 = v152 % 0x30;
            if ((unsigned __int16)(v152 % 0x30) < 9u)
            {
              __int16 v157 = 0;
              goto LABEL_160;
            }
            __int16 v157 = 0;
            uint64_t v158 = (unsigned __int16)(v152 % 0x30 - 9) >> 3;
            if (!((unsigned __int16)(v152 % 0x30 - 9) >> 3))
            {
              unsigned __int16 v162 = v152 % 0x30;
              unint64_t v163 = (unsigned __int8 *)v154 + 10;
              do
              {
LABEL_158:
                int v168 = *v163++;
                v157 += byte_20EFECB[v168];
                v162 -= 8;
              }
              while (v162 > 8u);
              goto LABEL_159;
            }
            __int16 v159 = 0;
            uint64_t v160 = v158 + 1;
            uint64_t v161 = (v158 + 1) & 0x3FFE;
            unsigned __int16 v162 = v156 - 8 * v161;
            unint64_t v163 = &v155[v161];
            __int16 v164 = (unsigned __int8 *)(v153 + 16 * (v152 / 0x30) + 11);
            uint64_t v165 = v161;
            do
            {
              uint64_t v166 = *(v164 - 1);
              int v167 = *v164;
              v164 += 2;
              v157 += byte_20EFECB[v166];
              v159 += byte_20EFECB[v167];
              v165 -= 2;
            }
            while (v165);
            v157 += v159;
            if (v160 != v161) {
              goto LABEL_158;
            }
LABEL_159:
            v155 += ((unsigned __int16)(v156 - 9) >> 3) + 1;
            LOBYTE(v156) = v162;
LABEL_160:
            uint64_t v169 = *(_DWORD ***)(v149 + 88);
            unsigned __int16 v170 = v157 + byte_20EFECB[~(-1 << v156) & (unint64_t)*v155];
            if (*((unsigned __int16 *)v154 + 4) != v170)
            {
              signed int v172 = &(*v154)[7 * v170];
              if (v154 != v169) {
                goto LABEL_168;
              }
LABEL_176:
              signed int v173 = *(_DWORD *)(v149 + 4);
              v150 += 2;
              if (v173 != 0x7FFFFFFF || v150 > v151) {
                goto LABEL_189;
              }
              continue;
            }
            break;
          }
          v154 += 2;
          if (v154 == v169) {
            goto LABEL_176;
          }
          while (1)
          {
            uint64_t v171 = v154;
            if (*((_WORD *)v154 + 4)) {
              break;
            }
            v154 += 2;
            if (v171 + 2 == v169)
            {
              char v154 = *(_DWORD ***)(v149 + 88);
              break;
            }
          }
          signed int v172 = *v171;
          if (v154 == v169) {
            goto LABEL_176;
          }
LABEL_168:
          if (*(void *)(v149 + 72))
          {
            while (*(_DWORD *)(v149 + 64) == *v172)
            {
              v172 += 7;
              if (v172 == &(*v154)[7 * *((unsigned __int16 *)v154 + 4)])
              {
                while (1)
                {
                  v154 += 2;
                  if (v154 == v169) {
                    goto LABEL_176;
                  }
                  if (*((_WORD *)v154 + 4))
                  {
                    signed int v172 = *v154;
                    break;
                  }
                }
              }
              if (v154 == v169) {
                break;
              }
            }
          }
          BOOL v40 = v154 == v169;
          unint64_t v175 = v172 + 1;
          if (v40) {
            unint64_t v175 = (signed int *)(v149 + 4);
          }
          signed int v173 = *v175;
          v150 += 2;
          if (v173 == 0x7FFFFFFF && v150 <= v151) {
            continue;
          }
          break;
        }
LABEL_189:
        signed int v148 = v232;
        BOOL v177 = v173 != 0x7FFFFFFF && v173 <= v232;
        a1 = v235;
        if (v177) {
          goto LABEL_194;
        }
LABEL_235:
        unint64_t v9 = (unint64_t)v238;
        unint64_t v7 = (void *)((char *)v237 + 12);
        __n128 v237 = v7;
        if (v7 == v238)
        {
          unint64_t v7 = v239;
          unint64_t v11 = v240[0];
          __n128 v237 = v239;
          int v10 = 1;
          unsigned __int8 v241 = 1;
          if (*(unsigned char *)(v236 + 16)) {
            goto LABEL_239;
          }
        }
        else
        {
          int v10 = v241;
          unint64_t v11 = v240[0];
          if (!*(unsigned char *)(v236 + 16)) {
            goto LABEL_9;
          }
LABEL_239:
          if (v10) {
            unint64_t v222 = v11;
          }
          else {
            unint64_t v222 = (unint64_t)v238;
          }
          if ((unint64_t)v7 < v222)
          {
            while (1)
            {
              unint64_t v224 = __ROR8__(*v7, 32);
              if (HIDWORD(v224) == 1 && (v224 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**(void **)(v236 + 4120)))
              {
                LOBYTE(v10) = v241;
                unint64_t v7 = v237;
                unint64_t v9 = (unint64_t)v238;
                break;
              }
              unint64_t v9 = (unint64_t)v238;
              unint64_t v7 = (void *)((char *)v237 + 12);
              __n128 v237 = v7;
              if (v7 == v238)
              {
                unint64_t v7 = v239;
                __n128 v237 = v239;
                LOBYTE(v10) = 1;
                unsigned __int8 v241 = 1;
                if ((unint64_t)v239 >= v240[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v10) = v241;
                unint64_t v223 = &v238;
                if (v241) {
                  unint64_t v223 = v240;
                }
                if ((unint64_t)v7 >= *v223) {
                  break;
                }
              }
            }
            unint64_t v11 = v240[0];
          }
        }
LABEL_9:
        if ((_BYTE)v10) {
          unint64_t v9 = v11;
        }
      }
      uint64_t v3 = v229 + 1;
    }
    while (v229 + 1 != v228);
  }
  double result = sub_72688((uint64_t)v242) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

uint64_t sub_BD3A90(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, signed int a5)
{
  unsigned int v47 = a3;
  int v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    uint64_t v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)a3
      || ((*(void *)(*v14 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    uint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    uint64_t v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v22 = *(_DWORD **)(a1 + 152);
    int v48 = (*(_DWORD *)(a1 + 432) << *v22) | a4;
    uint64_t v21 = (int *)(sub_BCE6A0((uint64_t)(v22 + 8), (unsigned int *)&v48) + 4);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  int v23 = *v21;
  if (v23 != 0x7FFFFFFF)
  {
    int v24 = *(_DWORD *)(a1 + 28);
    int v25 = v24 / -10;
    int v26 = v24 % 10;
    char v27 = v24 < 0 ? -5 : 5;
    if ((int)(v25 + v23 + (((-103 * (char)(v27 + v26)) >> 15) & 1) + ((-103 * (char)(v27 + v26)) >> 10)) >= a5) {
      return 0;
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v28 = a1 + 24 * a2;
    uint64_t v29 = *(void *)(v28 + 168);
    uint64_t v30 = *(void *)(v28 + 176);
    uint64_t v31 = (uint64_t *)(v28 + 168);
    unint64_t v32 = (v30 - v29) >> 2;
    if (v32 <= a3)
    {
      sub_5BBEE0((uint64_t)v31, a3 - v32 + 1);
      uint64_t v29 = *v31;
    }
    signed int v33 = *(_DWORD *)(v29 + 4 * a3);
    if (v33 != 0x7FFFFFFF && v33 >= a5) {
      return 0;
    }
  }
  uint64_t v35 = *(_DWORD **)(a1 + 152);
  int v49 = (a3 << *v35) | a4;
  uint64_t v36 = sub_BCE6A0((uint64_t)(v35 + 8), (unsigned int *)&v49);
  signed int v37 = *(_DWORD *)(v36 + 4);
  if (v37 != 0x7FFFFFFF && v37 >= a5) {
    return 0;
  }
  uint64_t v39 = v36;
  unsigned int v40 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v41 = a1 + 24 * a2;
    uint64_t v42 = *(void *)(v41 + 168);
    uint64_t v43 = *(void *)(v41 + 176);
    __int16 v44 = (uint64_t *)(v41 + 168);
    unint64_t v45 = (v43 - v42) >> 2;
    if (v45 <= a3)
    {
      sub_5BBEE0((uint64_t)v44, a3 - v45 + 1);
      uint64_t v42 = *v44;
    }
    *(_DWORD *)(v42 + 4 * a3) = a5;
  }
  *(_DWORD *)(v39 + 4) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v40 + 216), &v47);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v47);
  }
  return 1;
}

void sub_BD3D50(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1;
  unsigned int v231 = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v4 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v206 = *(_DWORD *)sub_A3F74C((void *)(v3 + 360), &v231);
  uint64_t v207 = v4;
  sub_A40514(&v229, *(void *)(v3 + 40), v4);
  unint64_t v5 = v229;
  if ((unint64_t)v229 < v230)
  {
    uint64_t v214 = v3 + 464;
    uint64_t v215 = v3;
    do
    {
      *(double *)(v3 + 664) = *(double *)(v3 + 664) + 1.0;
      uint64_t v213 = *(unsigned int *)v5;
      unsigned int v212 = v231;
      sub_A1E9A0((uint64_t)&v217, *(void *)(v3 + 40), v207, v206, 0, 1);
      unsigned int v6 = v221;
      if ((unint64_t)v221 < v220 || (unint64_t)v221 >= v222) {
        goto LABEL_3;
      }
      char v216 = 0;
      int v210 = 0x7FFFFFFF;
      LODWORD(v211) = -1;
      uint64_t v208 = 0xFFFFFFFFLL;
      uint64_t v209 = 0xFFFFFFFFLL;
      do
      {
        uint64_t v8 = 0;
        unint64_t v9 = __ROR8__(*v6, 32);
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = *(void *)(v10 + 72) - 1;
        unint64_t v12 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v13 = v12 ^ (v12 >> 33);
        uint64_t v14 = *(void *)(v10 + 48);
        uint64_t v15 = v14 + 11;
        uint64_t v16 = -1;
        for (unint64_t i = v13; ; unint64_t i = v8 + v18)
        {
          uint64_t v18 = i & v11;
          unint64_t v19 = (i & v11) / 0x30;
          unint64_t v20 = v18 - 48 * v19;
          if (((*(unsigned __int8 *)(v14 + 16 * v19 + (v20 >> 3) + 10) >> (v20 & 7)) & 1) == 0)
          {
            if (v16 == -1) {
              unint64_t v56 = v18;
            }
            else {
              unint64_t v56 = v16;
            }
            if (!sub_AD2F40(v10, 1)) {
              goto LABEL_94;
            }
            goto LABEL_51;
          }
          uint64_t v21 = *(void *)(v14 + 16 * v19);
          if (!*(void *)(v10 + 40)) {
            break;
          }
          uint64_t v22 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v23 = 0;
            LOBYTE(v28) = v18 - 48 * v19;
            goto LABEL_25;
          }
          __int16 v23 = 0;
          uint64_t v24 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
          if ((unsigned __int16)(v18 - 48 * v19 - 9) >> 3)
          {
            __int16 v25 = 0;
            uint64_t v26 = v24 + 1;
            uint64_t v27 = (v24 + 1) & 0x3FFE;
            unsigned __int16 v28 = v20 - 8 * v27;
            uint64_t v29 = &v22[v27];
            uint64_t v30 = (unsigned __int8 *)(v15 + 16 * v19);
            uint64_t v31 = v27;
            do
            {
              uint64_t v32 = *(v30 - 1);
              int v33 = *v30;
              v30 += 2;
              v23 += byte_20EBFB6[v32];
              v25 += byte_20EBFB6[v33];
              v31 -= 2;
            }
            while (v31);
            v23 += v25;
            if (v26 == v27) {
              goto LABEL_24;
            }
          }
          else
          {
            unsigned __int16 v28 = v18 - 48 * v19;
            uint64_t v29 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          }
          do
          {
            int v34 = *v29++;
            v23 += byte_20EBFB6[v34];
            v28 -= 8;
          }
          while (v28 > 8u);
LABEL_24:
          v22 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
LABEL_25:
          uint64_t v35 = (_DWORD *)(v21
                         + 12
                         * (unsigned __int16)(v23 + byte_20EBFB6[~(-1 << v28) & (unint64_t)*v22]));
          if (*(_DWORD *)(v10 + 36) != v35[1] || *(_DWORD *)(v10 + 32) != *v35) {
            break;
          }
          if (v16 == -1) {
            uint64_t v16 = v18;
          }
LABEL_12:
          ++v8;
        }
        signed int v37 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
        if ((unsigned __int16)(v18 - 48 * v19) < 9u)
        {
          __int16 v38 = 0;
          int v49 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          LOBYTE(v43) = v18 - 48 * v19;
          goto LABEL_39;
        }
        __int16 v38 = 0;
        uint64_t v39 = (unsigned __int16)(v18 - 48 * v19 - 9) >> 3;
        if (!((unsigned __int16)(v18 - 48 * v19 - 9) >> 3))
        {
          unsigned __int16 v43 = v18 - 48 * v19;
          __int16 v44 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
          do
          {
LABEL_37:
            int v50 = *v44++;
            v38 += byte_20EBFB6[v50];
            v43 -= 8;
          }
          while (v43 > 8u);
          goto LABEL_38;
        }
        __int16 v40 = 0;
        uint64_t v41 = v39 + 1;
        uint64_t v42 = (v39 + 1) & 0x3FFE;
        unsigned __int16 v43 = v20 - 8 * v42;
        __int16 v44 = &v37[v42];
        unint64_t v45 = (unsigned __int8 *)(v15 + 16 * v19);
        uint64_t v46 = v42;
        do
        {
          uint64_t v47 = *(v45 - 1);
          int v48 = *v45;
          v45 += 2;
          v38 += byte_20EBFB6[v47];
          v40 += byte_20EBFB6[v48];
          v46 -= 2;
        }
        while (v46);
        v38 += v40;
        if (v41 != v42) {
          goto LABEL_37;
        }
LABEL_38:
        int v49 = &v37[((unsigned __int16)(v20 - 9) >> 3) + 1];
LABEL_39:
        if (v9 != *(void *)(v21
                             + 12
                             * (unsigned __int16)(v38 + byte_20EBFB6[~(-1 << v43) & (unint64_t)*v49])))
          goto LABEL_12;
        if (v18 != -1)
        {
          if ((unsigned __int16)(v18 - 48 * v19) < 9u)
          {
            __int16 v53 = 0;
            uint64_t v3 = v215;
          }
          else
          {
            if ((((_WORD)v18 - 48 * (_WORD)v19 - 8) & 0xFFF8) != 0) {
              __int16 v51 = 8;
            }
            else {
              __int16 v51 = v18 - 48 * v19 - 8;
            }
            unsigned __int16 v52 = ~v51 + v18 - 48 * v19;
            uint64_t v3 = v215;
            __int16 v53 = 0;
            if (v52 < 8u)
            {
              unsigned __int16 v54 = v20;
              __int16 v55 = (unsigned __int8 *)(v14 + 16 * v19 + 10);
              goto LABEL_99;
            }
            __int16 v101 = 0;
            uint64_t v102 = (v52 >> 3) + 1;
            unsigned __int16 v54 = v20 - 8 * (((v52 >> 3) + 1) & 0x3FFE);
            __int16 v55 = &v37[v102 & 0x3FFE];
            uint64_t v103 = (unsigned __int8 *)(v14 + 16 * v19 + 11);
            uint64_t v104 = v102 & 0x3FFE;
            do
            {
              uint64_t v105 = *(v103 - 1);
              int v106 = *v103;
              v103 += 2;
              v53 += byte_20EBFB6[v105];
              v101 += byte_20EBFB6[v106];
              v104 -= 2;
            }
            while (v104);
            v53 += v101;
            if ((v102 & 0x3FFE) != v102)
            {
              do
              {
LABEL_99:
                int v107 = *v55++;
                v53 += byte_20EBFB6[v107];
                v54 -= 8;
              }
              while (v54 > 8u);
            }
            v37 += ((unsigned __int16)(v20 - 9) >> 3) + 1;
            LOBYTE(v20) = v54;
          }
          uint64_t v108 = *(void *)(v10 + 56);
          unsigned __int16 v109 = v53 + byte_20EBFB6[~(-1 << v20) & (unint64_t)*v37];
          uint64_t v110 = v14 + 16 * v19;
          if (*(unsigned __int16 *)(v110 + 8) != v109 || v110 + 16 == v108)
          {
            unsigned __int16 v100 = (_DWORD *)(v21 + 12 * v109);
          }
          else
          {
            uint64_t v112 = v110 + 32;
            do
            {
              if (*(_WORD *)(v112 - 8)) {
                BOOL v113 = 1;
              }
              else {
                BOOL v113 = v112 == v108;
              }
              v112 += 16;
            }
            while (!v113);
            unsigned __int16 v100 = *(_DWORD **)(v112 - 32);
          }
          goto LABEL_113;
        }
        unint64_t v56 = -1;
        if (!sub_AD2F40(v10, 1))
        {
LABEL_94:
          *(void *)int v233 = v9;
          *(_DWORD *)&v233[8] = -1;
          sub_AD3484(v10, (uint64_t *)v233, v56, v235);
          unsigned __int16 v100 = v236;
          uint64_t v3 = v215;
          goto LABEL_113;
        }
LABEL_51:
        uint64_t v57 = 0;
        *(void *)int v233 = v9;
        *(_DWORD *)&v233[8] = -1;
        uint64_t v58 = *(void *)(v10 + 72) - 1;
        uint64_t v59 = *(void *)(v10 + 48);
        uint64_t v60 = v59 + 11;
        uint64_t v61 = -1;
        while (2)
        {
          uint64_t v62 = v13 & v58;
          unint64_t v63 = (v13 & v58) / 0x30;
          unint64_t v64 = (v13 & v58) % 0x30;
          if (((*(unsigned __int8 *)(v59 + 16 * v63 + (v64 >> 3) + 10) >> (v64 & 7)) & 1) == 0)
          {
            if (v61 == -1) {
              unint64_t v99 = v13 & v58;
            }
            else {
              unint64_t v99 = v61;
            }
            goto LABEL_92;
          }
          uint64_t v65 = *(void *)(v10 + 40);
          uint64_t v66 = *(void *)(v59 + 16 * v63);
          if (!v65) {
            break;
          }
          unint64_t v67 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
          {
            __int16 v68 = 0;
            LOBYTE(v69) = (v13 & v58) % 0x30;
            goto LABEL_67;
          }
          __int16 v68 = 0;
          uint64_t v69 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
          if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
          {
            LODWORD(v69) = (v13 & v58) % 0x30;
            uint64_t v73 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            do
            {
LABEL_65:
              int v78 = *v73++;
              v68 += byte_20EBFB6[v78];
              LOWORD(v69) = v69 - 8;
            }
            while ((unsigned __int16)v69 > 8u);
            goto LABEL_66;
          }
          __int16 v70 = 0;
          uint64_t v71 = v69 + 1;
          uint64_t v72 = (v69 + 1) & 0x3FFE;
          LOWORD(v69) = v64 - 8 * v72;
          uint64_t v73 = &v67[v72];
          __int16 v74 = (unsigned __int8 *)(v60 + 16 * v63);
          uint64_t v75 = v72;
          do
          {
            uint64_t v76 = *(v74 - 1);
            int v77 = *v74;
            v74 += 2;
            v68 += byte_20EBFB6[v76];
            v70 += byte_20EBFB6[v77];
            v75 -= 2;
          }
          while (v75);
          v68 += v70;
          if (v71 != v72) {
            goto LABEL_65;
          }
LABEL_66:
          v67 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
LABEL_67:
          uint64_t v79 = (_DWORD *)(v66
                         + 12
                         * (unsigned __int16)(v68 + byte_20EBFB6[~(-1 << v69) & (unint64_t)*v67]));
          if (*(_DWORD *)(v10 + 36) == v79[1] && *(_DWORD *)(v10 + 32) == *v79)
          {
            if (v61 == -1) {
              uint64_t v61 = v13 & v58;
            }
LABEL_54:
            unint64_t v13 = ++v57 + v62;
            continue;
          }
          break;
        }
        int v81 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v82 = 0;
          long long v92 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          LOBYTE(v83) = (v13 & v58) % 0x30;
          goto LABEL_81;
        }
        __int16 v82 = 0;
        uint64_t v83 = (unsigned __int16)(v62 - 48 * v63 - 9) >> 3;
        if (!((unsigned __int16)(v62 - 48 * v63 - 9) >> 3))
        {
          LODWORD(v83) = (v13 & v58) % 0x30;
          uint64_t v87 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
          do
          {
LABEL_79:
            int v93 = *v87++;
            v82 += byte_20EBFB6[v93];
            LOWORD(v83) = v83 - 8;
          }
          while ((unsigned __int16)v83 > 8u);
          goto LABEL_80;
        }
        __int16 v84 = 0;
        uint64_t v85 = v83 + 1;
        uint64_t v86 = (v83 + 1) & 0x3FFE;
        LOWORD(v83) = v64 - 8 * v86;
        uint64_t v87 = &v81[v86];
        __int16 v88 = (unsigned __int8 *)(v60 + 16 * v63);
        uint64_t v89 = v86;
        do
        {
          uint64_t v90 = *(v88 - 1);
          int v91 = *v88;
          v88 += 2;
          v82 += byte_20EBFB6[v90];
          v84 += byte_20EBFB6[v91];
          v89 -= 2;
        }
        while (v89);
        v82 += v84;
        if (v85 != v86) {
          goto LABEL_79;
        }
LABEL_80:
        long long v92 = &v81[((unsigned __int16)(v64 - 9) >> 3) + 1];
LABEL_81:
        if (v9 != *(void *)(v66
                             + 12
                             * (unsigned __int16)(v82 + byte_20EBFB6[~(-1 << v83) & (unint64_t)*v92])))
          goto LABEL_54;
        if (v62 == -1)
        {
          unint64_t v99 = -1;
LABEL_92:
          uint64_t v3 = v215;
          sub_AD3484(v10, (uint64_t *)v233, v99, v235);
          unsigned __int16 v100 = v236;
          goto LABEL_113;
        }
        uint64_t v3 = v215;
        if ((unsigned __int16)((v13 & v58) % 0x30) < 9u)
        {
          __int16 v96 = 0;
        }
        else
        {
          if ((((_WORD)v62 - 48 * (_WORD)v63 - 8) & 0xFFF8) != 0) {
            __int16 v94 = 8;
          }
          else {
            __int16 v94 = v62 - 48 * v63 - 8;
          }
          unsigned __int16 v95 = ~v94 + v62 - 48 * v63;
          if (v95 < 8u)
          {
            __int16 v96 = 0;
            unsigned __int16 v97 = v64;
            int v98 = (unsigned __int8 *)(v59 + 16 * v63 + 10);
            goto LABEL_198;
          }
          __int16 v177 = 0;
          __int16 v178 = 0;
          uint64_t v179 = (v95 >> 3) + 1;
          unsigned __int16 v97 = v64 - 8 * (((v95 >> 3) + 1) & 0x3FFE);
          int v98 = &v81[v179 & 0x3FFE];
          unint64_t v180 = (unsigned __int8 *)(v59 + 16 * v63 + 11);
          uint64_t v181 = v179 & 0x3FFE;
          do
          {
            uint64_t v182 = *(v180 - 1);
            int v183 = *v180;
            v180 += 2;
            v177 += byte_20EBFB6[v182];
            v178 += byte_20EBFB6[v183];
            v181 -= 2;
          }
          while (v181);
          __int16 v96 = v178 + v177;
          if ((v179 & 0x3FFE) != v179)
          {
            do
            {
LABEL_198:
              int v184 = *v98++;
              v96 += byte_20EBFB6[v184];
              v97 -= 8;
            }
            while (v97 > 8u);
          }
          v81 += ((unsigned __int16)(v64 - 9) >> 3) + 1;
          LOBYTE(v64) = v97;
        }
        uint64_t v185 = v59 + 16 * v63;
        uint64_t v186 = *(_DWORD ***)(v10 + 56);
        unsigned __int16 v187 = v96 + byte_20EBFB6[~(-1 << v64) & (unint64_t)*v81];
        unsigned __int16 v100 = (_DWORD *)(v66 + 12 * v187);
        if (*(unsigned __int16 *)(v185 + 8) == v187)
        {
          uint64_t v188 = v185 + 16;
          if ((_DWORD **)(v185 + 16) != v186)
          {
            while (1)
            {
              uint64_t v189 = (_DWORD **)v188;
              if (*(_WORD *)(v188 + 8)) {
                break;
              }
              v188 += 16;
              if (v189 + 2 == v186)
              {
                uint64_t v185 = *(void *)(v10 + 56);
                goto LABEL_206;
              }
            }
            uint64_t v185 = v188;
LABEL_206:
            unsigned __int16 v100 = *v189;
            goto LABEL_207;
          }
        }
        else
        {
LABEL_207:
          if ((_DWORD **)v185 != v186 && v65)
          {
            do
            {
              if (*(_DWORD *)(v10 + 36) != v100[1] || *(_DWORD *)(v10 + 32) != *v100) {
                break;
              }
              v100 += 3;
              if (v100 == (_DWORD *)(*(void *)v185 + 12 * *(unsigned __int16 *)(v185 + 8)))
              {
                v185 += 16;
                if ((_DWORD **)v185 != v186)
                {
                  do
                  {
                    if (*(_WORD *)(v185 + 8))
                    {
                      unsigned __int16 v100 = *(_DWORD **)v185;
                      goto LABEL_211;
                    }
                    v185 += 16;
                  }
                  while ((_DWORD **)v185 != v186);
                  unsigned __int16 v100 = *(_DWORD **)(v185 - 16);
                }
                break;
              }
LABEL_211:
              ;
            }
            while ((_DWORD **)v185 != v186);
          }
        }
LABEL_113:
        unsigned int v114 = v100[2];
        if (v114 == -1)
        {
          int v117 = *(_DWORD *)(v10 + 112);
          *(_DWORD *)(v10 + 112) = v117 + 1;
          v100[2] = v117;
          unsigned int v119 = *(unint64_t **)(v10 + 96);
          unint64_t v118 = *(void *)(v10 + 104);
          if ((unint64_t)v119 < v118)
          {
            *unsigned int v119 = v9;
            uint64_t v120 = (uint64_t)(v119 + 1);
            goto LABEL_154;
          }
          unint64_t v121 = (unint64_t **)(v10 + 88);
          unint64_t v122 = *(char **)(v10 + 88);
          uint64_t v123 = ((char *)v119 - v122) >> 3;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v125 = v118 - (void)v122;
          if (v125 >> 2 > v124) {
            unint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v124)
          {
            if (v124 >> 61) {
              sub_188D718();
            }
            unint64_t v126 = v124;
            unint64_t v127 = (char *)operator new(8 * v124);
            unint64_t v121 = (unint64_t **)(v10 + 88);
            uint64_t v128 = (unint64_t *)&v127[8 * v123];
            unint64_t *v128 = v9;
            uint64_t v120 = (uint64_t)(v128 + 1);
            if (v119 != (unint64_t *)v122)
            {
LABEL_134:
              unint64_t v129 = (char *)(v119 - 1) - v122;
              if (v129 < 0x58) {
                goto LABEL_261;
              }
              if ((unint64_t)(v122 - v127) < 0x20) {
                goto LABEL_261;
              }
              uint64_t v151 = (v129 >> 3) + 1;
              uint64_t v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v153 = &v119[v152 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v128 = (unint64_t *)((char *)v128 - v152);
              char v154 = &v127[8 * v123 - 16];
              __int16 v155 = v119 - 2;
              uint64_t v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v157 = *(_OWORD *)v155;
                *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                *(_OWORD *)char v154 = v157;
                v154 -= 32;
                v155 -= 4;
                v156 -= 4;
              }
              while (v156);
              unsigned int v119 = v153;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_261:
                do
                {
                  unint64_t v158 = *--v119;
                  *--uint64_t v128 = v158;
                }
                while (v119 != (unint64_t *)v122);
              }
              unsigned int v119 = *v121;
            }
          }
          else
          {
            unint64_t v126 = 0;
            unint64_t v127 = 0;
            uint64_t v128 = (unint64_t *)(8 * v123);
            *(void *)(8 * v123) = v9;
            uint64_t v120 = 8 * v123 + 8;
            if (v119 != (unint64_t *)v122) {
              goto LABEL_134;
            }
          }
          *(void *)(v10 + 88) = v128;
          *(void *)(v10 + 96) = v120;
          *(void *)(v10 + 104) = &v127[8 * v126];
          if (v119) {
            operator delete(v119);
          }
LABEL_154:
          *(void *)(v10 + 96) = v120;
          uint64_t v3 = v215;
          unsigned int v115 = v100[2];
          if (sub_BD5C18(v214, v115, v9)) {
            goto LABEL_115;
          }
LABEL_155:
          v216 &= *(unsigned char *)(v3 + 32) != 0;
          goto LABEL_156;
        }
        unsigned int v115 = v100[2];
        if (!sub_BD5C18(v214, v114, v9)) {
          goto LABEL_155;
        }
LABEL_115:
        if ((v216 & 1) != 0 && (*((unsigned char *)v221 + 15) & 2) != 0)
        {
          uint64_t v116 = v223;
          if (v223) {
            uint64_t v116 = *(unsigned int *)(v223 + 4 * (((unint64_t)v221 - v220) >> 4));
          }
          if ((v116 & v213) == 0)
          {
            int v167 = (unsigned int *)((char *)v219 + *(unsigned __int16 *)((char *)v219 - *v219 + 6));
            int v168 = (char *)v167 + *v167;
            uint64_t v169 = &v228;
            if (!v226) {
              uint64_t v169 = v225;
            }
            signed int v170 = *(_DWORD *)&v168[8 * v225[1] + 8 + 8 * (((unint64_t)v221 - v220) >> 4)]
                 + *v169
                 - *((_DWORD *)v221 + 2);
            uint64_t v171 = *(void *)(v3 + 64);
            if (!v171
              || (signed int v172 = sub_BD0C48(v171, v115, *(_DWORD *)(v3 + 144) + ~a2), v172 != 0x7FFFFFFF) && v172 <= v170)
            {
              if (sub_BD3A90(v3, 0, v115, a2, v170))
              {
                signed int v173 = *(_DWORD **)(v3 + 152);
                LODWORD(v235[0]) = (v115 << *v173) | a2;
                uint64_t v174 = sub_BCE6A0((uint64_t)(v173 + 8), (unsigned int *)v235);
                *(_DWORD *)(v174 + 8) = v211;
                *(void *)(v174 + 12) = v209 | (v208 << 32);
                *(_DWORD *)(v174 + 20) = v210;
                *(_DWORD *)(v174 + 24) = v212;
              }
            }
          }
        }
        if ((*((unsigned char *)v221 + 15) & 1) == 0) {
          goto LABEL_156;
        }
        if (v223)
        {
          if (*(_DWORD *)(v223 + 4 * (((unint64_t)v221 - v220) >> 4)) != v213) {
            goto LABEL_156;
          }
        }
        else if (v213)
        {
          goto LABEL_156;
        }
        uint64_t v130 = *(void *)(v3 + 152);
        uint64_t v131 = v130 + 32;
        int v232 = (v115 << *(_DWORD *)v130) | (a2 - 1);
        unint64_t v132 = sub_BCE8D8(v130 + 32, (unsigned int *)&v232);
        if (v132 == -1)
        {
          unint64_t v175 = v133;
          if (sub_BCECCC(v131, 1))
          {
            *(_DWORD *)int v233 = v232;
            *(_OWORD *)&v233[4] = xmmword_20EC670;
            unint64_t v234 = 0xFFFFFFFF7FFFFFFFLL;
            sub_BCF000(v131, (unsigned int *)v233, (uint64_t)v235);
          }
          else
          {
            *(_DWORD *)int v233 = v232;
            *(_OWORD *)&v233[4] = xmmword_20EC670;
            unint64_t v234 = 0xFFFFFFFF7FFFFFFFLL;
            sub_BCF220(v131, (long long *)v233, v175, v235);
          }
          int v176 = v236[1];
          if (v176 != 0x7FFFFFFF) {
            goto LABEL_238;
          }
          goto LABEL_156;
        }
        uint64_t v134 = *(void *)(v130 + 80);
        unint64_t v135 = v132 / 0x30;
        long long v136 = (uint64_t *)(v134 + 16 * (v132 / 0x30));
        uint64_t v138 = (unsigned __int8 *)v136 + 10;
        uint64_t v137 = *v136;
        int v139 = v132 % 0x30;
        if ((unsigned __int16)(v132 % 0x30) < 9u)
        {
          __int16 v140 = 0;
          goto LABEL_225;
        }
        __int16 v140 = 0;
        uint64_t v141 = (unsigned __int16)(v132 % 0x30 - 9) >> 3;
        if (!((unsigned __int16)(v132 % 0x30 - 9) >> 3))
        {
          unsigned __int16 v145 = v132 % 0x30;
          unsigned int v146 = (unsigned __int8 *)v136 + 10;
          do
          {
LABEL_223:
            int v191 = *v146++;
            v140 += byte_20EFECB[v191];
            v145 -= 8;
          }
          while (v145 > 8u);
          goto LABEL_224;
        }
        __int16 v142 = 0;
        uint64_t v143 = v141 + 1;
        uint64_t v144 = (v141 + 1) & 0x3FFE;
        unsigned __int16 v145 = v139 - 8 * v144;
        unsigned int v146 = &v138[v144];
        int v147 = (unsigned __int8 *)(v134 + 16 * v135 + 11);
        uint64_t v148 = v144;
        do
        {
          uint64_t v149 = *(v147 - 1);
          int v150 = *v147;
          v147 += 2;
          v140 += byte_20EFECB[v149];
          v142 += byte_20EFECB[v150];
          v148 -= 2;
        }
        while (v148);
        v140 += v142;
        if (v143 != v144) {
          goto LABEL_223;
        }
LABEL_224:
        v138 += ((unsigned __int16)(v139 - 9) >> 3) + 1;
        LOBYTE(v139) = v145;
LABEL_225:
        __int16 v192 = byte_20EFECB[~(-1 << v139) & (unint64_t)*v138];
        uint64_t v193 = *(uint64_t **)(v130 + 88);
        unsigned __int16 v194 = v140 + v192;
        int v195 = *((unsigned __int16 *)v136 + 4);
        uint64_t v196 = v136 + 2;
        if (v195 != v194 || v196 == v193)
        {
          int v176 = *(_DWORD *)(v137 + 28 * v194 + 4);
          if (v176 == 0x7FFFFFFF) {
            goto LABEL_156;
          }
LABEL_238:
          if (v216)
          {
            __int16 v200 = (unsigned int *)((char *)v219 + *(unsigned __int16 *)((char *)v219 - *v219 + 6));
            __int16 v201 = (char *)v200 + *v200;
            uint64_t v202 = &v228;
            if (!v226) {
              uint64_t v202 = v225;
            }
            if (*(_DWORD *)&v201[8 * v225[1] + 4 + 8 * (((unint64_t)v221 - v220) >> 4)] + *v202 >= v176
              || !sub_A43F30(*(void *)(v3 + 40), (uint64_t)&v217, v176))
            {
              goto LABEL_253;
            }
            goto LABEL_246;
          }
          if (v226)
          {
            if (sub_A2B620(*(void *)(v3 + 40), (uint64_t)&v217, v176, 1))
            {
LABEL_246:
              unint64_t v211 = ((unint64_t)v221 - v220) >> 4;
              if (v226) {
                int v203 = v228;
              }
              else {
                int v203 = 0x7FFFFFFF;
              }
              int v210 = v203;
              if (v226) {
                uint64_t v204 = v227;
              }
              else {
                uint64_t v204 = 0xFFFFFFFFLL;
              }
              uint64_t v208 = v204;
              uint64_t v209 = -1431655765 * (((unint64_t)v225 - v224) >> 2);
LABEL_253:
              char v216 = 1;
              goto LABEL_156;
            }
          }
          else if (sub_A2BC00((uint64_t)&v217, v176, 1))
          {
            goto LABEL_246;
          }
          char v216 = 0;
          goto LABEL_156;
        }
        uint64_t v198 = v134 + 16 * v135 + 32;
        do
        {
          if (*(_WORD *)(v198 - 8)) {
            BOOL v199 = 1;
          }
          else {
            BOOL v199 = v198 == (void)v193;
          }
          v198 += 16;
        }
        while (!v199);
        int v176 = *(_DWORD *)(*(void *)(v198 - 32) + 4);
        if (v176 != 0x7FFFFFFF) {
          goto LABEL_238;
        }
LABEL_156:
        unint64_t v159 = v220;
        unsigned int v6 = v221 - 2;
        v221 -= 2;
        if (*(unsigned char *)(v217 + 16)) {
          BOOL v160 = v218 == 0;
        }
        else {
          BOOL v160 = 0;
        }
        if (v160 && (unint64_t)v6 >= v220 && (unint64_t)v6 < v222)
        {
          do
          {
            unint64_t v163 = __ROR8__(*v6, 32);
            if (HIDWORD(v163) == 1 && (v163 + 3) < 2) {
              break;
            }
            char v165 = sub_2AB7E4(**(void **)(v217 + 4120));
            unint64_t v159 = v220;
            unsigned int v6 = v221;
            if (v165) {
              break;
            }
            unsigned int v6 = v221 - 2;
            BOOL v221 = v6;
          }
          while ((unint64_t)v6 >= v220 && (unint64_t)v6 < v222);
        }
      }
      while ((unint64_t)v6 >= v159 && (unint64_t)v6 < v222);
LABEL_3:
      unint64_t v5 = v229 + 4;
      int v229 = v5;
    }
    while ((unint64_t)v5 < v230);
  }
}

void *sub_BD4E70(void *a1)
{
  sub_9FD504((uint64_t)(a1 + 34));
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[25];
  if (v3)
  {
    uint64_t v4 = a1[26];
    unint64_t v5 = (void *)a1[25];
    if (v4 != v3)
    {
      uint64_t v6 = a1[26];
      do
      {
        uint64_t v8 = *(void **)(v6 - 16);
        v6 -= 16;
        unint64_t v7 = v8;
        if (v8)
        {
          free(v7);
          *(void *)(v4 - 16) = 0;
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)a1[25];
    }
    a1[26] = v3;
    free(v5);
  }
  unint64_t v9 = (void *)a1[15];
  if (v9)
  {
    a1[16] = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[10];
  if (v10)
  {
    uint64_t v11 = a1[11];
    unint64_t v12 = (void *)a1[10];
    if (v11 != v10)
    {
      uint64_t v13 = a1[11];
      do
      {
        uint64_t v15 = *(void **)(v13 - 16);
        v13 -= 16;
        uint64_t v14 = v15;
        if (v15)
        {
          free(v14);
          *(void *)(v11 - 16) = 0;
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      unint64_t v12 = (void *)a1[10];
    }
    a1[11] = v10;
    free(v12);
  }
  return a1;
}

uint64_t sub_BD4F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 8;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 16843009;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = *a6;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a7;
  uint64_t v12 = a7[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a8;
  uint64_t v13 = a8[1];
  *(void *)(a1 + 104) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)&long long v14 = 0x8000000080000000;
  *((void *)&v14 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 116) = v14;
  *(void *)(a1 + 136) = 10;
  *(_DWORD *)(a1 + 144) = -1;
  if (*a5)
  {
    *(void *)(a1 + 152) = *a5;
    uint64_t v15 = a5[1];
    *(void *)(a1 + 160) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = operator new(0x90uLL);
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = off_243EB20;
    *(void *)(a1 + 152) = sub_BD5324((uint64_t)(v16 + 3));
    *(void *)(a1 + 160) = v16;
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 432) = -1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  sub_BD5668(a1 + 464, a2);
  *(unsigned char *)(a1 + 568) = *a5 == 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 576), &__p);
  if (v19 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_BD514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_14A84(v17);
  sub_14A84(v16);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_BD521C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243EB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_BD523C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243EB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_BD5290(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    uint64_t v4 = *(void **)(a1 + 104);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        unint64_t v7 = *(void **)(v5 - 16);
        v5 -= 16;
        uint64_t v6 = v7;
        if (v7)
        {
          free(v6);
          *(void *)(v3 - 16) = 0;
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *(void **)(a1 + 104);
    }
    *(void *)(a1 + 112) = v1;
    free(v4);
  }
}

uint64_t sub_BD5324(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_20EFDF0;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0;
  uint64_t v2 = a1 + 32;
  *(_WORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 72) = 0;
  sub_BCF76C((uint64_t *)(a1 + 80), 32);
  *(uint64x2_t *)uint64_t v2 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v2 + 16), (float)*(unint64_t *)(v2 + 72))));
  *(unsigned char *)(v2 + 24) = 0;
  sub_BD5408(v2);
  *(unsigned char *)(a1 + 58) = 1;
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_BD53E8(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20AE6F0(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_BD5408(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_BCF800((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    uint64_t v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    unint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      uint64_t v13 = v4;
      if ((char *)v10 != v4)
      {
        long long v14 = (char *)v10;
        do
        {
          uint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        uint64_t v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_BD5570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BD5594(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 0;
  sub_ACFA50((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_ACFF64(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(void *)(a1 + 32) = 0xFFFFFFFFLL;
  return a1;
}

void sub_BD5640(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v5;
    operator delete(v5);
  }
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

double sub_BD5668(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8E30;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  return result;
}

double sub_BD5698(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 80);
  int v2 = *(unsigned int **)(a1 + 88);
  if (v1 != v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    long long v5 = *(unsigned int **)(a1 + 80);
    do
    {
      unsigned int v6 = *v5++;
      unint64_t v7 = ((unint64_t)v6 >> 3) & 0x1FFFFFF8;
      *(void *)(v3 + v7) &= ~(1 << v6);
      *(void *)(v4 + v7) &= ~(1 << v6);
    }
    while (v5 != v2);
  }
  *(void *)(a1 + 88) = v1;
  *(_OWORD *)(a1 + 8) = xmmword_20B8E30;
  double result = NAN;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

void sub_BD5704(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = xmmword_20B8E30;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = *(void *)a1;
    long long v48 = xmmword_20B8E30;
    uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
    sub_A19FA8((uint64_t)&v50, v5, 0x1FFFFFFFEuLL);
    unsigned int v6 = (void *)*((void *)&v50 + 1);
    if (v54) {
      unint64_t v7 = v53;
    }
    else {
      unint64_t v7 = &v51;
    }
    if (*((void *)&v50 + 1) < (unint64_t)*v7)
    {
      do
      {
        unint64_t v11 = __ROR8__(*v6, 32);
        if (HIDWORD(v11) != 1 || (v11 + 3) >= 2)
        {
          uint64_t v13 = (int *)sub_498D5C(*(void *)(v5 + 4120) + 24, __ROR8__(v11, 32), 0, "stop");
          uint64_t v14 = (uint64_t)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6);
          uint64_t v15 = *(unsigned int *)v14;
          LODWORD(v14) = *(_DWORD *)(v14 + 4);
          if (v14 >= 0xFFFFFFFE) {
            uint64_t v14 = 4294967294;
          }
          else {
            uint64_t v14 = v14;
          }
          uint64_t v16 = v15 | (v14 << 32);
        }
        else
        {
          uint64_t v16 = -1;
        }
        *(void *)&long long v46 = v16;
        DWORD2(v46) = 0x7FFFFFFF;
        sub_33A50((uint64_t)&v48, (unsigned int *)&v46);
        unint64_t v9 = v51;
        unsigned int v6 = (void *)(*((void *)&v50 + 1) + 12);
        *((void *)&v50 + 1) = v6;
        if (v6 == (void *)v51)
        {
          unsigned int v6 = v52;
          unint64_t v10 = v53[0];
          *((void *)&v50 + 1) = v52;
          int v8 = 1;
          unsigned __int8 v54 = 1;
          if (*(unsigned char *)(v50 + 16))
          {
LABEL_25:
            if (v8) {
              unint64_t v17 = v10;
            }
            else {
              unint64_t v17 = v51;
            }
            if ((unint64_t)v6 < v17)
            {
              while (1)
              {
                unint64_t v19 = __ROR8__(*v6, 32);
                if (HIDWORD(v19) == 1 && (v19 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v50 + 4120)))
                {
                  LOBYTE(v8) = v54;
                  unsigned int v6 = (void *)*((void *)&v50 + 1);
                  unint64_t v9 = v51;
                  break;
                }
                unint64_t v9 = v51;
                unsigned int v6 = (void *)(*((void *)&v50 + 1) + 12);
                *((void *)&v50 + 1) = v6;
                if (v6 == (void *)v51)
                {
                  unsigned int v6 = v52;
                  *((void *)&v50 + 1) = v52;
                  LOBYTE(v8) = 1;
                  unsigned __int8 v54 = 1;
                  if ((unint64_t)v52 >= v53[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v8) = v54;
                  if (v54) {
                    long long v18 = v53;
                  }
                  else {
                    long long v18 = &v51;
                  }
                  if ((unint64_t)v6 >= *v18) {
                    break;
                  }
                }
              }
              unint64_t v10 = v53[0];
            }
          }
        }
        else
        {
          int v8 = v54;
          unint64_t v10 = v53[0];
          if (*(unsigned char *)(v50 + 16)) {
            goto LABEL_25;
          }
        }
        if ((_BYTE)v8) {
          unint64_t v9 = v10;
        }
      }
      while ((unint64_t)v6 < v9);
    }
    uint64_t v21 = *(void *)a1;
    long long v46 = xmmword_20B8E30;
    uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
    sub_A28D38((uint64_t)&v50, v21, 0x1FFFFFFFDuLL);
    uint64_t v22 = (void *)*((void *)&v50 + 1);
    if (v54) {
      __int16 v23 = v53;
    }
    else {
      __int16 v23 = &v51;
    }
    if (*((void *)&v50 + 1) < (unint64_t)*v23)
    {
      do
      {
        unint64_t v27 = __ROR8__(*v22, 32);
        if (HIDWORD(v27) != 1 || (v27 + 3) >= 2)
        {
          uint64_t v29 = (int *)sub_498D5C(*(void *)(v21 + 4120) + 24, __ROR8__(v27, 32), 0, "stop");
          uint64_t v30 = (uint64_t)v29 + *(unsigned __int16 *)((char *)v29 - *v29 + 6);
          uint64_t v31 = *(unsigned int *)v30;
          LODWORD(v30) = *(_DWORD *)(v30 + 4);
          if (v30 >= 0xFFFFFFFE) {
            uint64_t v30 = 4294967294;
          }
          else {
            uint64_t v30 = v30;
          }
          uint64_t v32 = v31 | (v30 << 32);
        }
        else
        {
          uint64_t v32 = -1;
        }
        *(void *)&long long v44 = v32;
        DWORD2(v44) = 0x7FFFFFFF;
        sub_33A50((uint64_t)&v46, (unsigned int *)&v44);
        unint64_t v25 = v51;
        uint64_t v22 = (void *)(*((void *)&v50 + 1) + 12);
        *((void *)&v50 + 1) = v22;
        if (v22 == (void *)v51)
        {
          uint64_t v22 = v52;
          unint64_t v26 = v53[0];
          *((void *)&v50 + 1) = v52;
          int v24 = 1;
          unsigned __int8 v54 = 1;
          if (*(unsigned char *)(v50 + 16))
          {
LABEL_66:
            if (v24) {
              unint64_t v33 = v26;
            }
            else {
              unint64_t v33 = v51;
            }
            if ((unint64_t)v22 < v33)
            {
              while (1)
              {
                unint64_t v35 = __ROR8__(*v22, 32);
                if (HIDWORD(v35) == 1 && (v35 + 3) < 2) {
                  break;
                }
                if (sub_2AB7E4(**(void **)(v50 + 4120)))
                {
                  LOBYTE(v24) = v54;
                  uint64_t v22 = (void *)*((void *)&v50 + 1);
                  unint64_t v25 = v51;
                  break;
                }
                unint64_t v25 = v51;
                uint64_t v22 = (void *)(*((void *)&v50 + 1) + 12);
                *((void *)&v50 + 1) = v22;
                if (v22 == (void *)v51)
                {
                  uint64_t v22 = v52;
                  *((void *)&v50 + 1) = v52;
                  LOBYTE(v24) = 1;
                  unsigned __int8 v54 = 1;
                  if ((unint64_t)v52 >= v53[0]) {
                    break;
                  }
                }
                else
                {
                  LOBYTE(v24) = v54;
                  if (v54) {
                    int v34 = v53;
                  }
                  else {
                    int v34 = &v51;
                  }
                  if ((unint64_t)v22 >= *v34) {
                    break;
                  }
                }
              }
              unint64_t v26 = v53[0];
            }
          }
        }
        else
        {
          int v24 = v54;
          unint64_t v26 = v53[0];
          if (*(unsigned char *)(v50 + 16)) {
            goto LABEL_66;
          }
        }
        if ((_BYTE)v24) {
          unint64_t v25 = v26;
        }
      }
      while ((unint64_t)v22 < v25);
    }
    if (sub_344C4(&v48) && sub_344C4(&v46))
    {
      long long v50 = xmmword_20B8E30;
      uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
      sub_33998((uint64_t)&v50, (uint64_t)&v48);
      *(void *)&double v37 = sub_33998((uint64_t)&v50, (uint64_t)&v46).n128_u64[0];
      uint64_t v42 = sub_35D7C(&v50, v37);
      int v43 = v38;
      double v39 = (double)a2 * 0.5;
      if (v39 >= 0.0)
      {
        if (v39 < 4.50359963e15)
        {
          uint64_t v40 = (uint64_t)(v39 + v39) + 1;
LABEL_93:
          double v39 = (double)(v40 >> 1);
        }
      }
      else if (v39 > -4.50359963e15)
      {
        uint64_t v40 = (uint64_t)(v39 + v39);
        if (v40 >= 1) {
          --v40;
        }
        goto LABEL_93;
      }
      uint64_t v41 = (uint64_t)v39;
      sub_365DC((int *)&v42, &v41, (uint64_t)&v44, v39);
      *(_OWORD *)uint64_t v2 = v44;
      *(void *)(v2 + 16) = v45;
      if (sub_34658((_DWORD *)v2, &v48) || sub_34658((_DWORD *)v2, &v46))
      {
        sub_33998(v2, (uint64_t)&v48);
        sub_33998(v2, (uint64_t)&v46);
      }
    }
  }
}

BOOL sub_BD5C18(uint64_t a1, unsigned int a2, unint64_t a3)
{
  unsigned int v11 = a2;
  uint64_t v5 = (void *)(a1 + 32);
  if (*(void *)(a1 + 64) > (unint64_t)a2)
  {
    unint64_t v6 = (unint64_t)a2 >> 6;
    if ((*(void *)(*(void *)(a1 + 56) + 8 * v6) & (1 << a2)) != 0) {
      return (*(void *)(*v5 + 8 * v6) & (1 << a2)) != 0;
    }
  }
  if (sub_BD5D20((uint64_t *)a1, a3))
  {
    int v8 = sub_BD5E68((unsigned int *)a1, a3);
    unint64_t v9 = (void *)sub_BD5F88(v5, &v11);
    if (v8)
    {
      *v9 |= v10;
      return 1;
    }
  }
  else
  {
    unint64_t v9 = (void *)sub_BD5F88(v5, &v11);
  }
  *v9 &= ~v10;
  return 0;
}

uint64_t sub_BD5D20(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 16)) {
    return 1;
  }
  unint64_t v5 = HIDWORD(a2);
  BOOL v6 = HIDWORD(a2) != 1 || (a2 + 3) >= 2;
  char v7 = !v6;
  if (v6)
  {
    uint64_t result = sub_2AB7E4(**(void **)(v2 + 4120));
    if (!result) {
      return result;
    }
    uint64_t v2 = *a1;
  }
  LODWORD(v14) = v5;
  sub_383CC((unsigned int *)&v14, (uint64_t)v16);
  int v9 = sub_744F8((void ***)v2, v16);
  if (!v9) {
    return 1;
  }
  if (v9 != 2) {
    return 0;
  }
  if (v7)
  {
    uint64_t v10 = -1;
  }
  else
  {
    unsigned int v11 = (int *)sub_498D5C(*(void *)(*a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
    uint64_t v12 = (uint64_t)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6);
    uint64_t v13 = *(unsigned int *)v12;
    LODWORD(v12) = *(_DWORD *)(v12 + 4);
    if (v12 >= 0xFFFFFFFE) {
      uint64_t v12 = 4294967294;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v10 = v13 | (v12 << 32);
  }
  uint64_t v14 = v10;
  int v15 = 0x7FFFFFFF;
  return sub_73930((void ***)v2, &v14);
}

uint64_t sub_BD5E68(unsigned int *a1, unint64_t a2)
{
  uint64_t v4 = a1 + 2;
  if (!sub_344C4(a1 + 2)) {
    return 1;
  }
  LODWORD(v10) = HIDWORD(a2);
  sub_383CC((unsigned int *)&v10, (uint64_t)v12);
  if (sub_345AC(v4, v12)) {
    return 1;
  }
  uint64_t result = sub_34658(v4, v12);
  if (result)
  {
    if (HIDWORD(a2) == 1 && (a2 + 3) < 2)
    {
      uint64_t v6 = -1;
    }
    else
    {
      char v7 = (int *)sub_498D5C(*(void *)(*(void *)a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
      uint64_t v8 = (uint64_t)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6);
      uint64_t v9 = *(unsigned int *)v8;
      LODWORD(v8) = *(_DWORD *)(v8 + 4);
      if (v8 >= 0xFFFFFFFE) {
        uint64_t v8 = 4294967294;
      }
      else {
        uint64_t v8 = v8;
      }
      uint64_t v6 = v9 | (v8 << 32);
    }
    uint64_t v10 = v6;
    int v11 = 0x7FFFFFFF;
    return sub_34554(v4, &v10);
  }
  return result;
}

unint64_t sub_BD5F88(void *a1, _DWORD *a2)
{
  unint64_t v4 = *a2;
  if (a1[1] <= v4)
  {
    sub_A3E96C((uint64_t)a1, (v4 + 1), 0);
    sub_A3E96C((uint64_t)(a1 + 3), (*a2 + 1), 0);
    unint64_t v4 = *a2;
  }
  uint64_t v5 = a1[3];
  unint64_t v6 = v4 >> 6;
  uint64_t v7 = *(void *)(v5 + 8 * (v4 >> 6));
  if (((1 << v4) & v7) == 0)
  {
    *(void *)(v5 + 8 * v6) = (1 << v4) | v7;
    uint64_t v9 = (char *)a1[7];
    unint64_t v8 = a1[8];
    if ((unint64_t)v9 < v8)
    {
      *(_DWORD *)uint64_t v9 = v4;
      uint64_t v10 = (uint64_t)(v9 + 4);
LABEL_25:
      a1[7] = v10;
      unint64_t v6 = (unint64_t)*a2 >> 6;
      return *a1 + 8 * v6;
    }
    int v11 = (char *)a1[6];
    uint64_t v12 = (v9 - v11) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        sub_188D718();
      }
      uint64_t v16 = operator new(4 * v15);
      unint64_t v17 = &v16[4 * v12];
      long long v18 = &v16[4 * v15];
      *unint64_t v17 = v4;
      uint64_t v10 = (uint64_t)(v17 + 1);
      int64_t v19 = v9 - v11;
      if (v9 == v11) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v17 = (_DWORD *)(4 * v12);
      long long v18 = 0;
      *(_DWORD *)(4 * v12) = v4;
      uint64_t v10 = 4 * v12 + 4;
      int64_t v19 = v9 - v11;
      if (v9 == v11)
      {
LABEL_23:
        a1[6] = v17;
        a1[7] = v10;
        a1[8] = v18;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_25;
      }
    }
    unint64_t v20 = v19 - 4;
    if (v20 < 0x2C) {
      goto LABEL_31;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_31;
    }
    uint64_t v21 = (v20 >> 2) + 1;
    uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    __int16 v23 = &v9[-v22];
    unint64_t v17 = (_DWORD *)((char *)v17 - v22);
    int v24 = &v16[4 * v12 - 16];
    unint64_t v25 = v9 - 16;
    uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *int v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    uint64_t v9 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_31:
      do
      {
        int v28 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--unint64_t v17 = v28;
      }
      while (v9 != v11);
    }
    goto LABEL_23;
  }
  return *a1 + 8 * v6;
}

uint64_t sub_BD6170(void *a1)
{
  return 8 * (a1[9] & 0x3FFFFFFFFFFFFFFLL) + 8 * (a1[6] & 0x3FFFFFFFFFFFFFFLL) + a1[12] - a1[10];
}

unint64_t sub_BD6194(uint64_t a1, int **a2)
{
  unint64_t result = 3735928559;
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      unint64_t v5 = ((result << 6) + 2654435769u + (result >> 2) + v3[1]) ^ result;
      unint64_t v6 = (v3[2] + 2654435769 + (v5 << 6) + (v5 >> 2)) ^ v5;
      unint64_t result = (*v3 + 2654435769 + (v6 << 6) + (v6 >> 2)) ^ v6;
      v3 += 3;
    }
    while (v3 != v4);
  }
  return result;
}

BOOL sub_BD61F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) == 0xAAAAAAAAAAAAAAABLL
                                                                                       * ((uint64_t)(*(void *)(a3 + 8)
                                                                                                  - *(void *)a3) >> 2)
      && memcmp(*(const void **)a2, *(const void **)a3, 0x5555555555555558 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)) == 0;
}

unint64_t sub_BD6258@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)result == *(void *)(result + 8)) {
    goto LABEL_8;
  }
  uint64_t v3 = (uint64_t *)result;
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v2 + 88);
  if (v4 != v5)
  {
    unint64_t result = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2));
    if (result) {
      goto LABEL_4;
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  unint64_t result = *(unsigned int *)(v2 + 52);
  if (!result) {
    goto LABEL_8;
  }
LABEL_4:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 88);
  if (v7 == v8)
  {
    unint64_t result = *(unsigned int *)(v6 + 52);
    if (!result) {
      return result;
    }
    goto LABEL_10;
  }
  unint64_t result = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2));
  if (result)
  {
LABEL_10:
    uint64_t v9 = 0;
    uint64_t v40 = 12 * result;
    do
    {
      uint64_t v10 = *(void *)(v6 + 80);
      uint64_t v11 = *(void *)(v6 + 88);
      if (v10 == v11)
      {
        int v12 = 10 * sub_920D68(*(unsigned int *)(*(void *)(v6 + 40) + v9));
        uint64_t v10 = *(void *)(v6 + 80);
        uint64_t v11 = *(void *)(v6 + 88);
      }
      else
      {
        int v12 = *(_DWORD *)(v10 + v9 + 8);
      }
      int v13 = v12 / 10;
      int v14 = v12 % 10;
      if (v12 < 0) {
        char v15 = -5;
      }
      else {
        char v15 = 5;
      }
      unsigned int v44 = v13 + (((103 * (char)(v15 + v14)) >> 15) & 1) + ((103 * (char)(v15 + v14)) >> 10);
      if (v10 == v11)
      {
        int v16 = 10 * *(_DWORD *)(*(void *)(v6 + 40) + v9 + 4);
        int v17 = *(_DWORD *)(v6 + 48);
        if (v16 < 0) {
          char v18 = -5;
        }
        else {
          char v18 = 5;
        }
        if (v10 != v11)
        {
LABEL_22:
          if (sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 2))) {
            goto LABEL_23;
          }
          goto LABEL_30;
        }
      }
      else
      {
        int v16 = *(_DWORD *)(v10 + v9);
        int v17 = *(_DWORD *)(v6 + 48);
        if (v16 < 0) {
          char v18 = -5;
        }
        else {
          char v18 = 5;
        }
        if (v10 != v11) {
          goto LABEL_22;
        }
      }
      if (*(_DWORD *)(v6 + 52))
      {
LABEL_23:
        int64_t v19 = *(int **)(v6 + 80);
        if (v19 != *(int **)(v6 + 88))
        {
          int v20 = *v19;
          goto LABEL_35;
        }
        int v22 = *(_DWORD *)(*(void *)(v6 + 40) + 4);
        goto LABEL_34;
      }
LABEL_30:
      uint64_t v21 = *(void *)(v6 + 32);
      if (v21)
      {
        int v20 = *(_DWORD *)(*(void *)(v21 + 40) + 8);
        goto LABEL_35;
      }
      int v22 = *(_DWORD *)(*(void *)(v6 + 24) + 8);
LABEL_34:
      int v20 = 10 * v22;
LABEL_35:
      int v23 = v16 / 10;
      unsigned int v24 = (((103 * (char)(v18 + (char)v16 % 10)) >> 15) & 1)
          + ((103 * (char)(v18 + (char)v16 % 10)) >> 10);
      int v25 = *(_DWORD *)(v6 + 48);
      int v26 = v20 / -10;
      int v27 = v20 % 10;
      if (v20 < 0) {
        char v28 = -5;
      }
      else {
        char v28 = 5;
      }
      unsigned int v43 = v23
          + v17
          + v24
          - v25
          + v26
          + (((-103 * (char)(v28 + v27)) >> 15) & 1)
          + ((-103 * (char)(v28 + v27)) >> 10);
      uint64_t v29 = *(void *)(v6 + 80);
      uint64_t v30 = *(void *)(v6 + 88);
      if (v29 == v30)
      {
        int v31 = 10 * *(_DWORD *)(*(void *)(v6 + 40) + v9 + 8);
        if (v31 < 0) {
          char v32 = -5;
        }
        else {
          char v32 = 5;
        }
        if (v29 != v30)
        {
LABEL_43:
          if (sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 2))) {
            goto LABEL_44;
          }
          goto LABEL_51;
        }
      }
      else
      {
        int v31 = *(_DWORD *)(v29 + v9 + 4);
        if (v31 < 0) {
          char v32 = -5;
        }
        else {
          char v32 = 5;
        }
        if (v29 != v30) {
          goto LABEL_43;
        }
      }
      if (*(_DWORD *)(v6 + 52))
      {
LABEL_44:
        unint64_t v33 = *(int **)(v6 + 80);
        if (v33 == *(int **)(v6 + 88))
        {
          int v36 = *(_DWORD *)(*(void *)(v6 + 40) + 4);
LABEL_55:
          int v34 = 10 * v36;
          goto LABEL_56;
        }
        int v34 = *v33;
        goto LABEL_56;
      }
LABEL_51:
      uint64_t v35 = *(void *)(v6 + 32);
      if (!v35)
      {
        int v36 = *(_DWORD *)(*(void *)(v6 + 24) + 8);
        goto LABEL_55;
      }
      int v34 = *(_DWORD *)(*(void *)(v35 + 40) + 8);
LABEL_56:
      int v37 = v34 / -10;
      int v38 = v34 % 10;
      if (v34 < 0) {
        char v39 = -5;
      }
      else {
        char v39 = 5;
      }
      unsigned int v42 = v31 / 10
          + v25
          + (((103 * (char)(v32 + (char)v31 % 10)) >> 15) & 1)
          + ((103 * (char)(v32 + (char)v31 % 10)) >> 10)
          - *(_DWORD *)(v6 + 48)
          + v37
          + (((-103 * (char)(v39 + v38)) >> 15) & 1)
          + ((-103 * (char)(v39 + v38)) >> 10);
      unint64_t result = (unint64_t)sub_BD6690((uint64_t)a2, &v44, (int *)&v43, (int *)&v42);
      v9 += 12;
    }
    while (v40 != v9);
  }
  return result;
}

void sub_BD6660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_BD6690(uint64_t a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    int v13 = *(_DWORD **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 2);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v13) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v18 = 12 * v17;
    int64_t v19 = (char *)operator new(12 * v17);
    int v20 = &v19[12 * v14];
    int v21 = *a3;
    int v22 = *a4;
    *(_DWORD *)int v20 = *a2;
    *((_DWORD *)v20 + 1) = v21;
    *((_DWORD *)v20 + 2) = v22;
    for (unint64_t i = v20 + 12; v9 != v13; *((_DWORD *)v20 + 2) = v24)
    {
      uint64_t v23 = *(void *)(v9 - 3);
      v9 -= 3;
      int v24 = v9[2];
      *(void *)(v20 - 12) = v23;
      v20 -= 12;
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v19[v18];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    int v10 = *a3;
    int v11 = *a4;
    _DWORD *v9 = *a2;
    v9[1] = v10;
    v9[2] = v11;
    unint64_t i = v9 + 3;
  }
  *(void *)(a1 + 8) = i;
  return i - 3;
}

unint64_t sub_BD67D4(uint64_t a1, int **a2)
{
  unint64_t result = 3735928559;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = ((result << 6) + 2654435769u + (result >> 2) + v5) ^ result;
      unint64_t result = (v6 + 2654435769 + (v7 << 6) + (v7 >> 2)) ^ v7;
    }
    while (v3 != v4);
  }
  return result;
}

BOOL sub_BD6820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  return v4 == *(void *)(a3 + 8) - *(void *)a3 && memcmp(*(const void **)a2, *(const void **)a3, v4) == 0;
}

unint64_t sub_BD6868@<X0>(unint64_t result@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3 == v2) {
    return result;
  }
  size_t v4 = (void *)result;
  uint64_t v6 = (int **)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 80);
  unint64_t v8 = (int **)(v3 + 88);
  uint64_t v7 = *(void *)(v3 + 88);
  if (v5 == v7)
  {
    BOOL v10 = *(_DWORD *)(v3 + 52) == 0;
LABEL_9:
    unint64_t result = *(unsigned int *)(v3 + 52);
    if (result) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v13 = *(void *)(v3 + 32);
    int v12 = a2;
    if (v13) {
      int v11 = *(_DWORD *)(*(void *)(v13 + 40) + 8);
    }
    else {
      int v11 = 10 * *(_DWORD *)(*(void *)(v3 + 24) + 8);
    }
    goto LABEL_14;
  }
  int v9 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 2));
  uint64_t v3 = *v4;
  uint64_t v6 = (int **)(*v4 + 80);
  unint64_t v8 = (int **)(*v4 + 88);
  BOOL v10 = v9 == 0;
  if (*v6 == *v8) {
    goto LABEL_9;
  }
  unint64_t result = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * (*v8 - *v6));
  if (!result) {
    goto LABEL_10;
  }
LABEL_5:
  if (*v6 == *v8) {
    int v11 = 10 * *(_DWORD *)(*(void *)(v3 + 40) + 4);
  }
  else {
    int v11 = **v6;
  }
  int v12 = a2;
LABEL_14:
  if (v11 < 0) {
    char v14 = -5;
  }
  else {
    char v14 = 5;
  }
  uint64_t v15 = *v4;
  uint64_t v95 = v4[1];
  if (*v4 != v95)
  {
    if (v10)
    {
      int v16 = v11 / -10;
      int v17 = 103 * (char)(v14 + v11 % 10);
      uint64_t v18 = v16 - *(_DWORD *)(v3 + 48) - (((v17 >> 15) & 1) + (v17 >> 10));
      unint64_t result = 5;
      while (1)
      {
        int64_t v19 = *(int **)(v15 + 16);
        int v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 >= 9u)
        {
          uint64_t v21 = v20[4];
          if (v21)
          {
            uint64_t v22 = *(unsigned int *)((char *)v19 + v21);
            if (v22) {
              break;
            }
          }
        }
LABEL_20:
        v15 += 128;
        if (v15 == v95) {
          return result;
        }
      }
      uint64_t v23 = 0;
      uint64_t v96 = v15;
      while (1)
      {
        while (1)
        {
          uint64_t v24 = *(void *)(v15 + 32);
          if (v24)
          {
            int v25 = *(_DWORD *)(*(void *)(v24 + 40) + 20 * v23 + 8);
            char v26 = v25 < 0 ? -5 : 5;
            int v27 = *(_DWORD *)(*(void *)(v24 + 40) + 20 * v23 + 12);
          }
          else
          {
            int v25 = 10 * *(_DWORD *)(*(void *)(v15 + 24) + 24 * v23 + 8);
            char v26 = v25 < 0 ? -5 : 5;
            int v27 = 10 * *(_DWORD *)(*(void *)(v15 + 24) + 24 * v23 + 12);
          }
          int v28 = v25 / 10;
          unsigned int v29 = (((103 * (char)(v26 + (char)v25 % 10)) >> 15) & 1)
              + ((103 * (char)(v26 + (char)v25 % 10)) >> 10);
          int v30 = v27 / 10;
          int v31 = v27 % 10;
          char v32 = v27 < 0 ? -5 : 5;
          int v33 = *(_DWORD *)(v15 + 48) + v18;
          unsigned int v34 = v33 + v28 + v29;
          unsigned int v35 = v33 + v30 + (((103 * (char)(v32 + v31)) >> 15) & 1) + ((103 * (char)(v32 + v31)) >> 10);
          int v37 = v12[1];
          unint64_t v36 = (unint64_t)v12[2];
          if ((unint64_t)v37 >= v36) {
            break;
          }
          unsigned int *v37 = v34;
          v37[1] = v35;
          v12[1] = v37 + 2;
          if (++v23 == v22) {
            goto LABEL_20;
          }
        }
        int v38 = *v12;
        uint64_t v39 = (char *)v37 - (char *)*v12;
        uint64_t v40 = v39 >> 3;
        unint64_t v41 = (v39 >> 3) + 1;
        if (v41 >> 61) {
          sub_2E00();
        }
        uint64_t v42 = v36 - (void)v38;
        if (v42 >> 2 > v41) {
          unint64_t v41 = v42 >> 2;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43 >> 61) {
          sub_188D718();
        }
        uint64_t v44 = v18;
        uint64_t v45 = operator new(8 * v43);
        long long v46 = (unsigned int *)&v45[8 * v40];
        *long long v46 = v34;
        v46[1] = v35;
        if (v37 == v38)
        {
          long long v48 = &v45[8 * v40];
          int v12 = a2;
          goto LABEL_55;
        }
        unint64_t v47 = (char *)(v37 - 2) - (char *)v38;
        if (v47 < 0x58) {
          break;
        }
        unint64_t v49 = (char *)v37 - v39 - v45;
        long long v48 = &v45[8 * v40];
        int v12 = a2;
        if (v49 < 0x20) {
          goto LABEL_54;
        }
        uint64_t v50 = (v47 >> 3) + 1;
        uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned __int16 v52 = &v37[v51 / 0xFFFFFFFFFFFFFFFCLL];
        long long v48 = (char *)&v46[v51 / 0xFFFFFFFFFFFFFFFCLL];
        __int16 v53 = &v45[8 * v40 - 16];
        unsigned __int8 v54 = v37 - 4;
        uint64_t v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          _OWORD *v53 = v56;
          v53 -= 2;
          v54 -= 8;
          v55 -= 4;
        }
        while (v55);
        int v37 = v52;
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_54;
        }
LABEL_55:
        uint64_t v58 = v46 + 2;
        *int v12 = (unsigned int *)v48;
        v12[1] = v46 + 2;
        void v12[2] = (unsigned int *)&v45[8 * v43];
        if (v38) {
          operator delete(v38);
        }
        uint64_t v18 = v44;
        uint64_t v15 = v96;
        unint64_t result = 5;
        v12[1] = v58;
        if (++v23 == v22) {
          goto LABEL_20;
        }
      }
      long long v48 = &v45[8 * v40];
      int v12 = a2;
      do
      {
LABEL_54:
        uint64_t v57 = *((void *)v37 - 1);
        v37 -= 2;
        *((void *)v48 - 1) = v57;
        v48 -= 8;
      }
      while (v37 != v38);
      goto LABEL_55;
    }
    unint64_t result = 20;
    while (1)
    {
      uint64_t v59 = *(int **)(v15 + 16);
      uint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
      if (*v60 >= 9u)
      {
        uint64_t v61 = v60[4];
        if (v61)
        {
          uint64_t v62 = *(unsigned int *)((char *)v59 + v61);
          if (v62) {
            break;
          }
        }
      }
LABEL_60:
      v15 += 128;
      if (v15 == v95) {
        return result;
      }
    }
    uint64_t v63 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v64 = *(void *)(v15 + 32);
        if (v64)
        {
          int v65 = *(_DWORD *)(*(void *)(v64 + 40) + 20 * v63 + 8);
          char v66 = v65 < 0 ? -5 : 5;
          int v67 = *(_DWORD *)(*(void *)(v64 + 40) + 20 * v63 + 12);
        }
        else
        {
          int v65 = 10 * *(_DWORD *)(*(void *)(v15 + 24) + 24 * v63 + 8);
          char v66 = v65 < 0 ? -5 : 5;
          int v67 = 10 * *(_DWORD *)(*(void *)(v15 + 24) + 24 * v63 + 12);
        }
        unsigned int v68 = v65 / 10
            + (((103 * (char)(v66 + (char)v65 % 10)) >> 15) & 1)
            + ((103 * (char)(v66 + (char)v65 % 10)) >> 10);
        int v69 = v67 / 10;
        int v70 = v67 % 10;
        char v71 = v67 < 0 ? -5 : 5;
        unsigned int v72 = v69 + (((103 * (char)(v71 + v70)) >> 15) & 1) + ((103 * (char)(v71 + v70)) >> 10);
        __int16 v74 = v12[1];
        unint64_t v73 = (unint64_t)v12[2];
        if ((unint64_t)v74 >= v73) {
          break;
        }
        *__int16 v74 = v68;
        v74[1] = v72;
        v12[1] = v74 + 2;
        if (++v63 == v62) {
          goto LABEL_60;
        }
      }
      uint64_t v75 = *v12;
      uint64_t v76 = (char *)v74 - (char *)*v12;
      uint64_t v77 = v76 >> 3;
      unint64_t v78 = (v76 >> 3) + 1;
      if (v78 >> 61) {
        sub_2E00();
      }
      uint64_t v79 = v73 - (void)v75;
      if (v79 >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80 >> 61) {
        sub_188D718();
      }
      int v81 = operator new(8 * v80);
      __int16 v82 = (unsigned int *)&v81[8 * v77];
      *__int16 v82 = v68;
      v82[1] = v72;
      if (v74 == v75)
      {
        __int16 v84 = (unsigned int *)&v81[8 * v77];
      }
      else
      {
        unint64_t v83 = (char *)(v74 - 2) - (char *)v75;
        if (v83 >= 0x58)
        {
          __int16 v84 = (unsigned int *)&v81[8 * v77];
          if ((unint64_t)((char *)v74 - v76 - v81) >= 0x20)
          {
            uint64_t v85 = (v83 >> 3) + 1;
            uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v87 = &v74[v86 / 0xFFFFFFFFFFFFFFFCLL];
            __int16 v84 = &v82[v86 / 0xFFFFFFFFFFFFFFFCLL];
            __int16 v88 = &v81[8 * v77 - 16];
            uint64_t v89 = v74 - 4;
            uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v91 = *(_OWORD *)v89;
              *(v88 - 1) = *((_OWORD *)v89 - 1);
              *__int16 v88 = v91;
              v88 -= 2;
              v89 -= 8;
              v90 -= 4;
            }
            while (v90);
            __int16 v74 = v87;
            if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_95;
            }
          }
        }
        else
        {
          __int16 v84 = (unsigned int *)&v81[8 * v77];
        }
        do
        {
          uint64_t v92 = *((void *)v74 - 1);
          v74 -= 2;
          *((void *)v84 - 1) = v92;
          v84 -= 2;
        }
        while (v74 != v75);
      }
LABEL_95:
      int v93 = &v81[8 * v80];
      __int16 v94 = v82 + 2;
      int v12 = a2;
      *a2 = v84;
      a2[1] = v82 + 2;
      a2[2] = (unsigned int *)v93;
      if (v75) {
        operator delete(v75);
      }
      unint64_t result = 20;
      a2[1] = v94;
      if (++v63 == v62) {
        goto LABEL_60;
      }
    }
  }
  return result;
}

void sub_BD6F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_BD6FC0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v32 = a1 << 32;
    uint64_t v33 = v3 >> 3;
    while (1)
    {
      uint64_t v5 = *a2;
      if (v4 >= (a2[1] - *a2) >> 3) {
        sub_66748();
      }
      unsigned int v6 = sub_2D0F10(v4);
      uint64_t v7 = *(void *)(*(void *)(v5 + 8 * v4) + 56) - *(void *)(*(void *)(v5 + 8 * v4) + 48);
      if (v7) {
        break;
      }
LABEL_3:
      if (++v4 == v33) {
        return;
      }
    }
    unint64_t v8 = 0;
    uint64_t v40 = v7 >> 4;
    uint64_t v9 = v32 | v6;
    uint64_t v36 = __ROR8__(v9, 32);
    unint64_t v37 = v4;
    uint64_t v38 = v5;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = *(void *)(v5 + 8 * v4);
        uint64_t v12 = *(void *)(v11 + 48);
        if (v8 >= (*(void *)(v11 + 56) - v12) >> 4) {
          sub_66748();
        }
        uint64_t v41 = __ROR8__(*(void *)(v12 + 16 * v8), 32);
        uint64_t v42 = &v41;
        uint64_t v13 = sub_BD7334(a3, &v41, (uint64_t)&unk_20F06E0, &v42);
        char v14 = v13;
        int v16 = (void **)(v13 + 3);
        uint64_t v15 = (void *)v13[3];
        int v17 = (void *)v13[4];
        uint64_t v18 = v15;
        if (v15 != v17)
        {
          uint64_t v18 = (void *)v13[3];
          while (__ROR8__(*v18, 32) != v9)
          {
            v18 += 2;
            if (v18 == v17) {
              goto LABEL_18;
            }
          }
        }
        if (v18 == v17) {
          break;
        }
        *((_WORD *)v18 + 5) = v8++;
        if (v8 == v40) {
          goto LABEL_3;
        }
      }
LABEL_18:
      uint64_t v19 = *(void *)(v5 + 8 * v4);
      __int16 v20 = *(_WORD *)(v19 + 74);
      char v21 = *(unsigned char *)(v19 + 73);
      int v22 = (*(unsigned __int8 *)(v19 + 80) >> 1) & 1;
      unint64_t v23 = v13[5];
      if ((unint64_t)v17 < v23)
      {
        *int v17 = v36;
        *((_WORD *)v17 + 4) = v8;
        *((_WORD *)v17 + 5) = v8;
        *((_WORD *)v17 + 6) = v20;
        *((unsigned char *)v17 + 14) = v21;
        BOOL v10 = (char *)(v17 + 2);
        *((unsigned char *)v17 + 15) = v22;
        uint64_t v5 = v38;
      }
      else
      {
        uint64_t v24 = ((char *)v17 - (char *)v15) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v26 = v23 - (void)v15;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          __int16 v35 = v20;
          if (v27 >> 60) {
            sub_188D718();
          }
          unint64_t v28 = v27;
          unsigned int v29 = (char *)operator new(16 * v27);
          unint64_t v27 = v28;
          __int16 v20 = v35;
        }
        else
        {
          unsigned int v29 = 0;
        }
        int v30 = &v29[16 * v24];
        *(void *)int v30 = v36;
        *((_WORD *)v30 + 4) = v8;
        *((_WORD *)v30 + 5) = v8;
        *((_WORD *)v30 + 6) = v20;
        v30[14] = v21;
        v30[15] = v22;
        int v31 = v30;
        if (v15 != v17)
        {
          uint64_t v5 = v38;
          do
          {
            *((_OWORD *)v31 - 1) = *((_OWORD *)v17 - 1);
            v31 -= 16;
            v17 -= 2;
          }
          while (v17 != v15);
          uint64_t v15 = *v16;
          BOOL v10 = v30 + 16;
          v14[3] = v31;
          v14[4] = v30 + 16;
          v14[5] = &v29[16 * v27];
          if (!v15) {
            goto LABEL_8;
          }
LABEL_35:
          operator delete(v15);
          goto LABEL_8;
        }
        uint64_t v5 = v38;
        BOOL v10 = v30 + 16;
        v14[3] = v30;
        v14[4] = v30 + 16;
        v14[5] = &v29[16 * v27];
        if (v15) {
          goto LABEL_35;
        }
      }
LABEL_8:
      v14[4] = v10;
      unint64_t v4 = v37;
      if (++v8 == v40) {
        goto LABEL_3;
      }
    }
  }
}

void sub_BD72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_BD72D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_BD72E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_BD72F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_BD730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_BD7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void *sub_BD7334(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v18 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x30uLL);
  void *v13 = 0;
  v13[1] = v9;
  uint64_t v19 = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v13[2] = v19;
  void v13[3] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v13 = *v23;
LABEL_69:
      void *v23 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v13 = *v18;
  *uint64_t v18 = v13;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_BD7694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BD76A8(unint64_t *a1@<X1>, char a2@<W2>, _OWORD *a3@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v96 = 0;
  unint64_t v97 = 0;
  uint64_t v95 = 0;
  if ((a2 & 1) == 0)
  {
    long long v98 = 0uLL;
    *(void *)&long long v99 = 0;
    uint64_t v10 = v5 - v4;
    if (v5 == v4)
    {
LABEL_26:
      uint64_t v22 = sub_4D088((char **)&v95, (uint64_t)&v98);
      uint64_t v15 = (void *)v98;
      uint64_t v96 = v22;
      if (!(void)v98) {
        goto LABEL_29;
      }
      *((void *)&v98 + 1) = v98;
      goto LABEL_28;
    }
    if ((0xAAAAAAAAAAAAAAABLL * (v10 >> 3)) >> 61) {
      sub_2E00();
    }
    uint8x8_t v11 = (int64x2_t *)operator new(0x5555555555555558 * (v10 >> 3));
    *(void *)&long long v98 = v11;
    *(void *)&long long v99 = (char *)v11 + 0x5555555555555558 * (v10 >> 3);
    if ((unint64_t)(v10 - 24) >= 0x48)
    {
      unint64_t v18 = (v10 - 24) / 0x18uLL + 1;
      unint64_t v12 = v4 + 24 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v11->i64[v18 & 0x1FFFFFFFFFFFFFFCLL];
      uint64_t v19 = v11 + 1;
      uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v21 = vdupq_n_s64(v4);
        v19[-1] = vaddq_s64(v21, (int64x2_t)xmmword_20F0090);
        *uint64_t v19 = vaddq_s64(v21, (int64x2_t)xmmword_20F00A0);
        v4 += 96;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v12 = v4;
      uint64_t v13 = (uint64_t *)v11;
    }
    do
    {
      *v13++ = v12;
      v12 += 24;
    }
    while (v12 != v5);
LABEL_25:
    *((void *)&v98 + 1) = v13;
    goto LABEL_26;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  int v100 = 1065353216;
  if (v4 == v5)
  {
    *(void *)&long long v98 = 0;
    goto LABEL_29;
  }
  do
  {
    LODWORD(v102) = *(_DWORD *)(*(void *)v4 + 4);
    v92[0] = &v102;
    unsigned int v6 = (char **)sub_BD9990((uint64_t)&v98, (unsigned int *)&v102, (uint64_t)&unk_20F06E0, (_DWORD **)v92);
    sub_3CB7EC(v6 + 3, v4);
    v4 += 24;
  }
  while (v4 != v5);
  uint64_t v7 = (void *)v99;
  if ((void)v99)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = v7 + 3;
      if ((unint64_t)v8 < v97)
      {
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(_OWORD *)unint64_t v8 = *(_OWORD *)(v7 + 3);
        *((void *)v8 + 2) = v7[5];
        void *v9 = 0;
        v7[4] = 0;
        v7[5] = 0;
        v8 += 24;
      }
      else
      {
        unint64_t v8 = sub_4D088((char **)&v95, (uint64_t)v9);
      }
      uint64_t v96 = v8;
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
    unint64_t v14 = (void *)v99;
    if ((void)v99)
    {
      do
      {
        uint64_t v16 = (void *)*v14;
        int v17 = (void *)v14[3];
        if (v17)
        {
          v14[4] = v17;
          operator delete(v17);
        }
        operator delete(v14);
        unint64_t v14 = v16;
      }
      while (v16);
    }
  }
  uint64_t v15 = (void *)v98;
  *(void *)&long long v98 = 0;
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
LABEL_29:
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  int v100 = 1065353216;
  *(_OWORD *)uint64_t v92 = 0u;
  *(_OWORD *)int v93 = 0u;
  int v94 = 1065353216;
  unint64_t v23 = (uint64_t *)v95;
  uint64_t v86 = (uint64_t *)v96;
  if (v95 == v96) {
    goto LABEL_106;
  }
  do
  {
    unint64_t v25 = (uint64_t **)v23[1];
    unint64_t v26 = 126 - 2 * __clz(((uint64_t)v25 - *v23) >> 3);
    long long __p = 0;
    uint64_t v90 = 0;
    long long v91 = 0;
    if (v25 == (uint64_t **)*v23) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v26;
    }
    sub_BDA9D8(*v23, v25, (uint64_t)&v102, v27, 1);
    unint64_t v28 = (uint64_t **)*v23;
    uint8x8_t v29 = (uint64_t **)v23[1];
    uint64_t v87 = v23;
    if ((uint64_t **)*v23 != v29)
    {
      unint64_t v30 = 0;
      while (v28 != (uint64_t **)*v23)
      {
        unint64_t v32 = __p;
        unint64_t v31 = v90;
        if ((sub_BD9CA8((uint64_t)&v102, *(v28 - 1), *v28) & 1) == 0) {
          goto LABEL_48;
        }
        if (v30 < 0xAAAAAAAAAAAAAAABLL * ((v90 - __p) >> 3))
        {
          uint64_t v33 = 24 * v30;
          unint64_t v34 = v30;
          while (!sub_BDA3A4((uint64_t)&v101, *(uint64_t **)(*(void *)&v32[v33 + 8] - 8), *v28))
          {
            ++v34;
            unint64_t v32 = __p;
            unint64_t v31 = v90;
            v33 += 24;
            if (v34 >= 0xAAAAAAAAAAAAAAABLL * ((v90 - __p) >> 3)) {
              goto LABEL_45;
            }
          }
          sub_29603C((void **)&__p[v33], v28);
          unint64_t v23 = v87;
          goto LABEL_93;
        }
LABEL_45:
        __int16 v35 = v91;
        if (v31 < v91)
        {
LABEL_46:
          uint64_t v36 = v31 + 24;
          *(void *)unint64_t v31 = 0;
          *((void *)v31 + 1) = 0;
          *((void *)v31 + 2) = 0;
          unint64_t v23 = v87;
          goto LABEL_69;
        }
LABEL_49:
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3) + 1;
        if (v37 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v32) >> 3);
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x555555555555555) {
          unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          if (v39 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          uint64_t v40 = (char *)operator new(24 * v39);
        }
        else
        {
          uint64_t v40 = 0;
        }
        uint64_t v41 = &v40[8 * ((v31 - v32) >> 3)];
        uint64_t v36 = v41 + 24;
        *(void *)uint64_t v41 = 0;
        *((void *)v41 + 1) = 0;
        *((void *)v41 + 2) = 0;
        if (v31 == v32)
        {
          long long __p = &v40[8 * ((v31 - v32) >> 3)];
          long long v91 = &v40[24 * v39];
          unint64_t v23 = v87;
        }
        else
        {
          do
          {
            uint64_t v42 = v41;
            *((void *)v41 - 2) = 0;
            *((void *)v41 - 1) = 0;
            long long v43 = *(_OWORD *)(v31 - 24);
            v31 -= 24;
            *(_OWORD *)(v41 - 24) = v43;
            v41 -= 24;
            *((void *)v42 - 1) = *((void *)v31 + 2);
            *(void *)unint64_t v31 = 0;
            *((void *)v31 + 1) = 0;
            *((void *)v31 + 2) = 0;
          }
          while (v31 != v32);
          unint64_t v32 = __p;
          uint64_t v44 = v90;
          long long __p = v41;
          long long v91 = &v40[24 * v39];
          unint64_t v23 = v87;
          if (v90 != v32)
          {
            uint64_t v45 = v90;
            do
            {
              unint64_t v47 = (void *)*((void *)v45 - 3);
              v45 -= 24;
              long long v46 = v47;
              if (v47)
              {
                *((void *)v44 - 2) = v46;
                operator delete(v46);
              }
              uint64_t v44 = v45;
            }
            while (v45 != v32);
          }
        }
        if (v32) {
          operator delete(v32);
        }
LABEL_69:
        uint64_t v90 = v36;
        unint64_t v49 = (uint64_t **)*((void *)v36 - 2);
        unint64_t v48 = *((void *)v36 - 1);
        if ((unint64_t)v49 >= v48)
        {
          unint64_t v88 = v30;
          uint64_t v51 = (char *)*((void *)v36 - 3);
          uint64_t v52 = ((char *)v49 - v51) >> 3;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_2E00();
          }
          unsigned __int8 v54 = v29;
          uint64_t v55 = v48 - (void)v51;
          if (v55 >> 2 > v53) {
            unint64_t v53 = v55 >> 2;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v53;
          }
          if (v56)
          {
            if (v56 >> 61) {
              sub_188D718();
            }
            uint64_t v57 = (char *)operator new(8 * v56);
            uint64_t v58 = (uint64_t **)&v57[8 * v52];
            unsigned int *v58 = *v28;
            uint64_t v50 = (uint64_t)(v58 + 1);
            if (v49 == (uint64_t **)v51) {
              goto LABEL_89;
            }
LABEL_82:
            unint64_t v59 = (char *)(v49 - 1) - v51;
            if (v59 < 0x58) {
              goto LABEL_133;
            }
            if ((unint64_t)(v51 - v57) < 0x20) {
              goto LABEL_133;
            }
            uint64_t v60 = (v59 >> 3) + 1;
            uint64_t v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v62 = &v49[v61 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = (uint64_t **)((char *)v58 - v61);
            uint64_t v63 = &v57[8 * v52 - 16];
            uint64_t v64 = v49 - 2;
            uint64_t v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v66 = *(_OWORD *)v64;
              *((_OWORD *)v63 - 1) = *((_OWORD *)v64 - 1);
              *(_OWORD *)uint64_t v63 = v66;
              v63 -= 32;
              v64 -= 4;
              v65 -= 4;
            }
            while (v65);
            unint64_t v49 = v62;
            if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_133:
              do
              {
                int v67 = *--v49;
                *--uint64_t v58 = v67;
              }
              while (v49 != (uint64_t **)v51);
            }
            unint64_t v49 = (uint64_t **)*((void *)v36 - 3);
          }
          else
          {
            uint64_t v57 = 0;
            uint64_t v58 = (uint64_t **)(8 * v52);
            *(void *)(8 * v52) = *v28;
            uint64_t v50 = 8 * v52 + 8;
            if (v49 != (uint64_t **)v51) {
              goto LABEL_82;
            }
          }
LABEL_89:
          *((void *)v36 - 3) = v58;
          *((void *)v36 - 2) = v50;
          *((void *)v36 - 1) = &v57[8 * v56];
          unint64_t v23 = v87;
          if (v49) {
            operator delete(v49);
          }
          uint8x8_t v29 = v54;
          unint64_t v30 = v88;
          goto LABEL_92;
        }
        *unint64_t v49 = *v28;
        uint64_t v50 = (uint64_t)(v49 + 1);
LABEL_92:
        *((void *)v36 - 2) = v50;
LABEL_93:
        if (++v28 == v29) {
          goto LABEL_96;
        }
      }
      unint64_t v32 = __p;
      unint64_t v31 = v90;
LABEL_48:
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      __int16 v35 = v91;
      if (v31 < v91) {
        goto LABEL_46;
      }
      goto LABEL_49;
    }
LABEL_96:
    if (__p != v90) {
      operator new();
    }
    if (__p)
    {
      unsigned int v68 = v90;
      BOOL v24 = __p;
      if (v90 != __p)
      {
        int v69 = v90;
        do
        {
          char v71 = (void *)*((void *)v69 - 3);
          v69 -= 24;
          int v70 = v71;
          if (v71)
          {
            *((void *)v68 - 2) = v70;
            operator delete(v70);
          }
          unsigned int v68 = v69;
        }
        while (v69 != __p);
        BOOL v24 = __p;
      }
      operator delete(v24);
    }
    v23 += 3;
  }
  while (v23 != v86);
  unsigned int v72 = v93[0];
  if (v93[0])
  {
    do
    {
      __int16 v84 = (void *)*v72;
      uint64_t v85 = (void *)v72[2];
      if (v85)
      {
        v72[3] = v85;
        operator delete(v85);
      }
      operator delete(v72);
      unsigned int v72 = v84;
    }
    while (v84);
  }
LABEL_106:
  unint64_t v73 = v92[0];
  v92[0] = 0;
  if (v73) {
    operator delete(v73);
  }
  __int16 v74 = (void *)v99;
  if ((void)v99)
  {
    do
    {
      unint64_t v80 = (void *)*v74;
      int v81 = (void *)v74[2];
      if (v81)
      {
        v74[3] = v81;
        operator delete(v81);
      }
      operator delete(v74);
      __int16 v74 = v80;
    }
    while (v80);
  }
  uint64_t v75 = (void *)v98;
  *(void *)&long long v98 = 0;
  if (v75) {
    operator delete(v75);
  }
  uint64_t v76 = (char *)v95;
  if (v95)
  {
    uint64_t v77 = v96;
    unint64_t v78 = v95;
    if (v96 != v95)
    {
      uint64_t v79 = v96;
      do
      {
        unint64_t v83 = (void *)*((void *)v79 - 3);
        v79 -= 24;
        __int16 v82 = v83;
        if (v83)
        {
          *((void *)v77 - 2) = v82;
          operator delete(v82);
        }
        uint64_t v77 = v79;
      }
      while (v79 != v76);
      unint64_t v78 = v95;
    }
    uint64_t v96 = v76;
    operator delete(v78);
  }
}

void sub_BD95E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  uint64_t v42 = *(void **)(v40 - 224);
  if (v42)
  {
    *(void *)(v40 - 216) = v42;
    operator delete(v42);
    sub_36094(&a40);
    _Unwind_Resume(a1);
  }
  sub_36094(&a40);
  _Unwind_Resume(a1);
}

void sub_BD97A8()
{
  if (*(void *)(v0 - 160)) {
    JUMPOUT(0xBD97B4);
  }
  JUMPOUT(0xBD9760);
}

uint64_t sub_BD9838(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void *)*v2;
      unsigned int v6 = (void *)v2[2];
      if (v6)
      {
        v2[3] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t **sub_BD98A4(uint64_t **a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  unint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = a1[1];
    uint64_t v7 = *a1;
    if (v6 != v5)
    {
      unint64_t v8 = v6 - 1;
      do
      {
        uint64_t v10 = *v8;
        *unint64_t v8 = 0;
        if (v10) {
          sub_BDD258((uint64_t)v8, v10);
        }
      }
      while (v8-- != v5);
      uint64_t v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void ***sub_BD9954(void ***a1)
{
  if (*a1)
  {
    sub_BDD2F4(a1);
    operator delete(*a1);
  }
  return a1;
}

void *sub_BD9990(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint8x8_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  unint64_t v14 = (void *)(a1 + 16);
  uint8x8_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    void *v11 = *v25;
LABEL_59:
    void *v25 = v11;
    goto LABEL_60;
  }
  void *v11 = *v14;
  *unint64_t v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    unint64_t v26 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_BD9C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BD9CA8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = (v3 - *a2) >> 7;
  if (v4 != (a3[1] - *a3) >> 7) {
    return 0;
  }
  if (v3 == *a2) {
    return 1;
  }
  uint64_t v7 = 88;
  do
  {
    uint64_t v8 = *a2;
    uint64_t v9 = *a3;
    uint64_t v10 = (void *)(*a2 + v7);
    uint64_t v11 = *(v10 - 1);
    if (v11 == *v10)
    {
      int v12 = *((_DWORD *)v10 - 9);
      uint64_t v13 = v9 + v7;
      uint64_t v14 = *(void *)(v9 + v7 - 8);
      uint64_t v15 = *(void *)(v9 + v7);
      if (v14 != v15)
      {
LABEL_8:
        if ((v12 != 0) != (sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 2)) != 0)) {
          return 0;
        }
        goto LABEL_12;
      }
    }
    else
    {
      int v12 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((*v10 - v11) >> 2));
      uint64_t v13 = v9 + v7;
      uint64_t v14 = *(void *)(v9 + v7 - 8);
      uint64_t v15 = *(void *)(v9 + v7);
      if (v14 != v15) {
        goto LABEL_8;
      }
    }
    if ((v12 != 0) != (*(_DWORD *)(v13 - 36) != 0)) {
      return 0;
    }
LABEL_12:
    float v16 = *(int **)(v8 + v7 - 72);
    BOOL v17 = (unsigned __int16 *)((char *)v16 - *v16);
    unsigned int v18 = *v17;
    if (v18 >= 9 && v17[4]) {
      int v19 = *(int *)((char *)v16 + v17[4]);
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = *(int **)(v9 + v7 - 72);
    unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
    unsigned int v22 = *v21;
    if (v22 < 9)
    {
      LODWORD(v23) = 0;
    }
    else
    {
      uint64_t v23 = v21[4];
      if (v21[4]) {
        LODWORD(v23) = *(int *)((char *)v20 + v23);
      }
    }
    if (v19 != v23) {
      return 0;
    }
    if (v18 >= 7 && (unsigned __int16 v24 = v17[3]) != 0)
    {
      unint64_t v25 = *(unsigned int *)((char *)v16 + v24 + 4) | ((unint64_t)*(unsigned int *)((char *)v16 + v24) << 32);
      if (v22 < 7) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v25 = 0xFFFFFFFFLL;
      if (v22 < 7) {
        goto LABEL_29;
      }
    }
    if (v21[3])
    {
      if (v25 != (*(unsigned int *)((char *)v20 + v21[3] + 4) | ((unint64_t)*(unsigned int *)((char *)v20 + v21[3]) << 32))) {
        return 0;
      }
      goto LABEL_30;
    }
LABEL_29:
    if (v25 != 0xFFFFFFFF) {
      return 0;
    }
LABEL_30:
    uint64_t v26 = *(void *)(v8 + v7 - 56);
    if (v26)
    {
      int v27 = *(unsigned __int8 *)(v26 + 33);
      uint64_t v28 = *(void *)(v9 + v7 - 56);
      if (v28)
      {
        if ((v27 != 0) != (*(unsigned char *)(v28 + 33) != 0)) {
          return 0;
        }
      }
      else if (v27)
      {
        return 0;
      }
    }
    else
    {
      uint64_t v29 = *(void *)(v9 + v7 - 56);
      if (v29 && *(unsigned char *)(v29 + 33)) {
        return 0;
      }
    }
    v7 += 128;
    --v4;
  }
  while (v4);
  uint64_t v31 = a2[1] - *a2;
  if (v31)
  {
    uint64_t v32 = 0;
    uint64_t v83 = v31 >> 7;
    while (1)
    {
      uint64_t v33 = *a2 + (v32 << 7);
      uint64_t v36 = *(int **)(v33 + 16);
      __int16 v35 = (char **)(v33 + 16);
      unint64_t v34 = v36;
      unint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 9u)
      {
        uint64_t v38 = v37[4];
        if (v38)
        {
          int v39 = *(int *)((char *)v34 + v38);
          if (v39) {
            break;
          }
        }
      }
LABEL_41:
      ++v32;
      uint64_t result = 1;
      if (v32 == v83) {
        return result;
      }
    }
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = (uint64_t *)(*a2 + (v32 << 7));
    uint64_t v43 = *a3 + (v32 << 7);
    uint64_t v44 = (uint64_t *)(v43 + 24);
    uint64_t v87 = v42 + 7;
    unint64_t v88 = v42 + 3;
    unint64_t v78 = v42 + 4;
    uint64_t v85 = (uint64_t *)(v43 + 56);
    uint64_t v86 = v42 + 8;
    __int16 v84 = (uint64_t *)(v43 + 64);
    uint64_t v77 = v43 + 32;
    int v81 = v42 + 14;
    __int16 v82 = v42 + 13;
    uint64_t v79 = (void *)(v43 + 112);
    unint64_t v80 = (uint64_t *)(v43 + 104);
    uint64_t v45 = (char **)(v43 + 16);
    while (2)
    {
      uint64_t v46 = *v88;
      uint64_t v47 = *v44;
      if (*(void *)(*v88 + v40) != *(void *)(*v44 + v40)) {
        return 0;
      }
      uint64_t v48 = *v87;
      if (*v87 == *v86)
      {
        if (*v78)
        {
          unint64_t v49 = (unsigned __int8 *)(*(void *)(*v78 + 40) + 20 * v41 + 16);
          uint64_t v50 = *v85;
          uint64_t v51 = *v84;
          if (*v85 != *v84) {
            goto LABEL_49;
          }
        }
        else
        {
          unint64_t v49 = (unsigned __int8 *)(v46 + v40 + 16);
          uint64_t v50 = *v85;
          uint64_t v51 = *v84;
          if (*v85 != *v84) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        unint64_t v49 = (unsigned __int8 *)(v48 + 2 * v41);
        uint64_t v50 = *v85;
        uint64_t v51 = *v84;
        if (*v85 != *v84)
        {
LABEL_49:
          if (*v49 != *(unsigned __int8 *)(v50 + 2 * v41)) {
            return 0;
          }
          goto LABEL_59;
        }
      }
      if (*(void *)v77) {
        uint64_t v52 = *(void *)(*(void *)v77 + 40) + 20 * v41;
      }
      else {
        uint64_t v52 = v47 + v40;
      }
      if (*v49 != *(unsigned __int8 *)(v52 + 16)) {
        return 0;
      }
LABEL_59:
      if (v48 == *v86)
      {
        if (*v78)
        {
          unint64_t v53 = (unsigned __int8 *)(*(void *)(*v78 + 40) + 20 * v41 + 17);
          if (v50 != v51) {
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v53 = (unsigned __int8 *)(v46 + v40 + 17);
          if (v50 != v51) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        unint64_t v53 = (unsigned __int8 *)(v48 + 2 * v41 + 1);
        if (v50 != v51)
        {
LABEL_61:
          if (*v53 != *(unsigned __int8 *)(v50 + 2 * v41 + 1)) {
            return 0;
          }
          goto LABEL_71;
        }
      }
      if (*(void *)v77) {
        uint64_t v54 = *(void *)(*(void *)v77 + 40) + 20 * v41;
      }
      else {
        uint64_t v54 = v47 + v40;
      }
      if (*v53 != *(unsigned __int8 *)(v54 + 17)) {
        return 0;
      }
LABEL_71:
      if (*(unsigned __int16 *)(v46 + v40 + 20) != *(unsigned __int16 *)(v47 + v40 + 20)) {
        return 0;
      }
      if (*v82 == *v81)
      {
        LODWORD(v55) = 0;
        uint64_t v56 = *v80;
        if (*v80 != *v79) {
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v55 = *(void *)(*v82 + 8 * v41);
        uint64_t v56 = *v80;
        if (*v80 != *v79)
        {
LABEL_74:
          if (*(void *)(v56 + 8 * v41) != v55) {
            return 0;
          }
          goto LABEL_78;
        }
      }
      if (v55) {
        return 0;
      }
LABEL_78:
      uint64_t v57 = *v35;
      uint64_t v58 = &(*v35)[-*(int *)*v35];
      unsigned int v59 = *(unsigned __int16 *)v58;
      if (v59 < 0x27)
      {
        if (v59 >= 0x11) {
          goto LABEL_84;
        }
      }
      else
      {
        if (*((_WORD *)v58 + 19))
        {
          int v60 = sub_B61408((unsigned int *)&v57[*((unsigned __int16 *)v58 + 19)+ *(unsigned int *)&v57[*((unsigned __int16 *)v58 + 19)]], v41);
          uint64_t v61 = *v45;
          uint64_t v62 = &(*v45)[-*(int *)*v45];
          unsigned int v63 = *(unsigned __int16 *)v62;
          if (v63 < 0x27) {
            goto LABEL_81;
          }
LABEL_88:
          if (*((_WORD *)v62 + 19))
          {
            int v65 = sub_B61408((unsigned int *)&v61[*((unsigned __int16 *)v62 + 19)+ *(unsigned int *)&v61[*((unsigned __int16 *)v62 + 19)]], v41);
            goto LABEL_93;
          }
LABEL_90:
          uint64_t v66 = *((unsigned __int16 *)v62 + 8);
          if (v66)
          {
            int v65 = *(_DWORD *)&v61[v66];
            goto LABEL_93;
          }
LABEL_92:
          int v65 = -1;
LABEL_93:
          if (v60 != v65) {
            return 0;
          }
          int v67 = *v35;
          unsigned int v68 = &(*v35)[-*(int *)*v35];
          unsigned int v69 = *(unsigned __int16 *)v68;
          if (v69 < 0x25)
          {
            if (v69 >= 0xF) {
              goto LABEL_100;
            }
          }
          else
          {
            if (*((_WORD *)v68 + 18))
            {
              int v70 = sub_B61408((unsigned int *)&v67[*((unsigned __int16 *)v68 + 18)+ *(unsigned int *)&v67[*((unsigned __int16 *)v68 + 18)]], v41);
              char v71 = *v45;
              unsigned int v72 = &(*v45)[-*(int *)*v45];
              unsigned int v73 = *(unsigned __int16 *)v72;
              if (v73 < 0x25) {
                goto LABEL_97;
              }
LABEL_104:
              if (*((_WORD *)v72 + 18))
              {
                int v75 = sub_B61408((unsigned int *)&v71[*((unsigned __int16 *)v72 + 18)+ *(unsigned int *)&v71[*((unsigned __int16 *)v72 + 18)]], v41);
                goto LABEL_109;
              }
LABEL_106:
              uint64_t v76 = *((unsigned __int16 *)v72 + 7);
              if (v76)
              {
                int v75 = *(_DWORD *)&v71[v76];
                goto LABEL_109;
              }
LABEL_108:
              int v75 = -1;
LABEL_109:
              if (v70 != v75) {
                return 0;
              }
              ++v41;
              v40 += 24;
              if (v39 == v41) {
                goto LABEL_41;
              }
              continue;
            }
LABEL_100:
            uint64_t v74 = *((unsigned __int16 *)v68 + 7);
            if (v74)
            {
              int v70 = *(_DWORD *)&v67[v74];
              char v71 = *v45;
              unsigned int v72 = &(*v45)[-*(int *)*v45];
              unsigned int v73 = *(unsigned __int16 *)v72;
              if (v73 >= 0x25) {
                goto LABEL_104;
              }
LABEL_97:
              if (v73 >= 0xF) {
                goto LABEL_106;
              }
              goto LABEL_108;
            }
          }
          int v70 = -1;
          char v71 = *v45;
          unsigned int v72 = &(*v45)[-*(int *)*v45];
          unsigned int v73 = *(unsigned __int16 *)v72;
          if (v73 >= 0x25) {
            goto LABEL_104;
          }
          goto LABEL_97;
        }
LABEL_84:
        uint64_t v64 = *((unsigned __int16 *)v58 + 8);
        if (v64)
        {
          int v60 = *(_DWORD *)&v57[v64];
          uint64_t v61 = *v45;
          uint64_t v62 = &(*v45)[-*(int *)*v45];
          unsigned int v63 = *(unsigned __int16 *)v62;
          if (v63 >= 0x27) {
            goto LABEL_88;
          }
LABEL_81:
          if (v63 >= 0x11) {
            goto LABEL_90;
          }
          goto LABEL_92;
        }
      }
      break;
    }
    int v60 = -1;
    uint64_t v61 = *v45;
    uint64_t v62 = &(*v45)[-*(int *)*v45];
    unsigned int v63 = *(unsigned __int16 *)v62;
    if (v63 >= 0x27) {
      goto LABEL_88;
    }
    goto LABEL_81;
  }
  return 1;
}

uint64_t sub_BDA3A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = *(void *)(v3 + 80);
    uint64_t v7 = *(void *)(v3 + 88);
    if (v6 == v7)
    {
      if (*(_DWORD *)(v3 + 52))
      {
LABEL_4:
        uint64_t v8 = *a2;
        uint64_t v9 = *a3;
        uint64_t v10 = *(void *)(v8 + 80);
        uint64_t v11 = *(void *)(v8 + 88);
        if (v10 == v11)
        {
          unsigned int v14 = *(_DWORD *)(v8 + 52) - 1;
        }
        else
        {
          int v12 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 2));
          uint64_t v13 = *(void *)(v8 + 80);
          unsigned int v14 = v12 - 1;
          if (v13 != *(void *)(v8 + 88))
          {
            int v15 = *(_DWORD *)(v13 + 12 * v14 + 4);
            goto LABEL_51;
          }
        }
        int v15 = 10 * *(_DWORD *)(*(void *)(v8 + 40) + 12 * v14 + 8);
LABEL_51:
        if (v15 < 0) {
          char v56 = -5;
        }
        else {
          char v56 = 5;
        }
        uint64_t v57 = *(int **)(v9 + 80);
        if (v57 == *(int **)(v9 + 88)) {
          int v58 = 10 * *(_DWORD *)(*(void *)(v9 + 40) + 4);
        }
        else {
          int v58 = *v57;
        }
        if (v58 < 0) {
          char v59 = -5;
        }
        else {
          char v59 = 5;
        }
        int v60 = *(int **)(v8 + 16);
        uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 >= 9u)
        {
          uint64_t v62 = v61[4];
          if (v62)
          {
            uint64_t v63 = *(unsigned int *)((char *)v60 + v62);
            if (v63)
            {
              uint64_t v64 = 0;
              int v65 = v15 / 10;
              int v66 = 103 * (char)(v56 + v15 % 10);
              int v67 = v65 + *(_DWORD *)(v8 + 48) + ((v66 >> 15) & 1) + (v66 >> 10);
              int v68 = v58 / 10;
              int v69 = 103 * (char)(v59 + v58 % 10);
              int v70 = v68 + *(_DWORD *)(v9 + 48) + ((v69 >> 15) & 1) + (v69 >> 10);
              uint64_t v71 = *(void *)(v8 + 32);
              uint64_t v72 = *(void *)(v9 + 32);
              uint64_t v73 = 20 * v63;
              uint64_t v74 = 8;
              while (1)
              {
                if (v71)
                {
                  int v75 = *(_DWORD *)(*(void *)(v71 + 40) + v64 + 8);
                  if (v75 < 0) {
                    char v76 = -5;
                  }
                  else {
                    char v76 = 5;
                  }
                  if (v72) {
                    goto LABEL_69;
                  }
                }
                else
                {
                  int v75 = 10 * *(_DWORD *)(*(void *)(v8 + 24) + v74);
                  if (v75 < 0) {
                    char v76 = -5;
                  }
                  else {
                    char v76 = 5;
                  }
                  if (v72)
                  {
LABEL_69:
                    int v77 = *(_DWORD *)(*(void *)(v72 + 40) + v64 + 8);
                    goto LABEL_75;
                  }
                }
                int v77 = 10 * *(_DWORD *)(*(void *)(v9 + 24) + v74);
LABEL_75:
                int v78 = v75 / 10;
                int v79 = 103 * (char)(v76 + v75 % 10);
                int v80 = v78 + v67 + ((v79 >> 15) & 1) + (v79 >> 10);
                int v81 = v77 / 10;
                int v82 = v77 % 10;
                if (v77 < 0) {
                  char v83 = -5;
                }
                else {
                  char v83 = 5;
                }
                if (v80 > (int)(v81
                               + v70
                               + (((103 * (char)(v83 + v82)) >> 15) & 1)
                               + ((103 * (char)(v83 + v82)) >> 10)))
                  return 0;
                if (v71)
                {
                  int v84 = *(_DWORD *)(*(void *)(v71 + 40) + v64 + 12);
                  if (v84 < 0) {
                    char v85 = -5;
                  }
                  else {
                    char v85 = 5;
                  }
                  if (v72) {
                    goto LABEL_84;
                  }
                }
                else
                {
                  int v84 = 10 * *(_DWORD *)(*(void *)(v8 + 24) + v74 + 4);
                  if (v84 < 0) {
                    char v85 = -5;
                  }
                  else {
                    char v85 = 5;
                  }
                  if (v72)
                  {
LABEL_84:
                    int v86 = *(_DWORD *)(*(void *)(v72 + 40) + v64 + 12);
                    goto LABEL_90;
                  }
                }
                int v86 = 10 * *(_DWORD *)(*(void *)(v9 + 24) + v74 + 4);
LABEL_90:
                int v87 = v84 / 10;
                int v88 = 103 * (char)(v85 + v84 % 10);
                int v89 = v87 + v67 + ((v88 >> 15) & 1) + (v88 >> 10);
                int v90 = v86 / 10;
                int v91 = v86 % 10;
                if (v86 < 0) {
                  char v92 = -5;
                }
                else {
                  char v92 = 5;
                }
                if (v89 > (int)(v90
                               + v70
                               + (((103 * (char)(v92 + v91)) >> 15) & 1)
                               + ((103 * (char)(v92 + v91)) >> 10)))
                  return 0;
                v74 += 24;
                v64 += 20;
                uint64_t result = 1;
                if (v73 == v64) {
                  return result;
                }
              }
            }
          }
        }
        return 1;
      }
    }
    else if (sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2)))
    {
      goto LABEL_4;
    }
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    uint64_t v19 = v18 - *a2;
    if (v18 == *a2) {
      return 1;
    }
    uint64_t v20 = 0;
    uint64_t v21 = v19 >> 7;
    uint64_t v22 = *a3;
    while (1)
    {
      uint64_t v23 = *(int **)(v17 + (v20 << 7) + 16);
      unsigned __int16 v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 9u)
      {
        uint64_t v25 = v24[4];
        if (v25)
        {
          uint64_t v26 = *(unsigned int *)((char *)v23 + v25);
          if (v26) {
            break;
          }
        }
      }
LABEL_12:
      ++v20;
      uint64_t result = 1;
      if (v20 == v21) {
        return result;
      }
    }
    uint64_t v27 = 0;
    uint64_t v28 = v17 + (v20 << 7);
    uint64_t v29 = *(void *)(v28 + 32);
    unint64_t v30 = (void *)(v28 + 24);
    int v31 = *(_DWORD *)(v28 + 48);
    uint64_t v32 = v22 + (v20 << 7);
    uint64_t v33 = *(void *)(v32 + 32);
    unint64_t v34 = (void *)(v32 + 24);
    int v35 = *(_DWORD *)(v32 + 48);
    uint64_t v36 = 20 * v26;
    uint64_t v37 = 8;
    while (1)
    {
      if (v29)
      {
        int v38 = *(_DWORD *)(*(void *)(v29 + 40) + v27 + 8);
        if (v38 < 0) {
          char v39 = -5;
        }
        else {
          char v39 = 5;
        }
        if (v33) {
          goto LABEL_22;
        }
      }
      else
      {
        int v38 = 10 * *(_DWORD *)(*v30 + v37);
        if (v38 < 0) {
          char v39 = -5;
        }
        else {
          char v39 = 5;
        }
        if (v33)
        {
LABEL_22:
          int v40 = *(_DWORD *)(*(void *)(v33 + 40) + v27 + 8);
          goto LABEL_28;
        }
      }
      int v40 = 10 * *(_DWORD *)(*v34 + v37);
LABEL_28:
      int v41 = v38 / 10;
      int v42 = 103 * (char)(v39 + v38 % 10);
      int v43 = v41 + v31 + ((v42 >> 15) & 1) + (v42 >> 10);
      int v44 = v40 / 10;
      int v45 = v40 % 10;
      if (v40 < 0) {
        char v46 = -5;
      }
      else {
        char v46 = 5;
      }
      if (v43 >= (int)(v44
                      + v35
                      + (((103 * (char)(v46 + v45)) >> 15) & 1)
                      + ((103 * (char)(v46 + v45)) >> 10)))
        return 0;
      if (v29)
      {
        int v47 = *(_DWORD *)(*(void *)(v29 + 40) + v27 + 12);
        if (v47 < 0) {
          char v48 = -5;
        }
        else {
          char v48 = 5;
        }
        if (v33) {
          goto LABEL_37;
        }
      }
      else
      {
        int v47 = 10 * *(_DWORD *)(*v30 + v37 + 4);
        if (v47 < 0) {
          char v48 = -5;
        }
        else {
          char v48 = 5;
        }
        if (v33)
        {
LABEL_37:
          int v49 = *(_DWORD *)(*(void *)(v33 + 40) + v27 + 12);
          goto LABEL_43;
        }
      }
      int v49 = 10 * *(_DWORD *)(*v34 + v37 + 4);
LABEL_43:
      int v50 = v47 / 10;
      int v51 = 103 * (char)(v48 + v47 % 10);
      int v52 = v50 + v31 + ((v51 >> 15) & 1) + (v51 >> 10);
      int v53 = v49 / 10;
      int v54 = v49 % 10;
      if (v49 < 0) {
        char v55 = -5;
      }
      else {
        char v55 = 5;
      }
      if (v52 >= (int)(v53
                      + v35
                      + (((103 * (char)(v55 + v54)) >> 15) & 1)
                      + ((103 * (char)(v55 + v54)) >> 10)))
        return 0;
      v27 += 20;
      v37 += 24;
      if (v36 == v27) {
        goto LABEL_12;
      }
    }
  }
  return 1;
}

uint64_t sub_BDA9D8(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t **)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  int v52 = a2 - 3;
  int v53 = a2 - 2;
  int v12 = v10;
  int v54 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_BDAE90(a3, *(a2 - 1), *v12);
          if (result)
          {
            uint64_t v26 = *v12;
            *int v12 = *(a2 - 1);
            *(a2 - 1) = v26;
          }
          break;
        case 3uLL:
          uint64_t result = sub_BDB784(v12, v12 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t v27 = v12 + 2;
          sub_BDB784(v12, v12 + 1, v12 + 2, a3);
          uint64_t result = sub_BDAE90(a3, *(a2 - 1), v12[2]);
          if (result)
          {
            uint64_t v28 = *v27;
            uint64_t *v27 = *(a2 - 1);
            *(a2 - 1) = v28;
            uint64_t result = sub_BDAE90(a3, *v27, v12[1]);
            if (result)
            {
              unint64_t v30 = v12[1];
              uint64_t v29 = v12[2];
              int v31 = *v12;
              v12[1] = v29;
              void v12[2] = v30;
              uint64_t result = sub_BDAE90(a3, v29, v31);
              if (result)
              {
                uint64_t v32 = *v12;
                *int v12 = v12[1];
                v12[1] = v32;
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_BDBE60(v12, v12 + 1, v12 + 2, v12 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        unint64_t v43 = (v16 - 2) >> 1;
        unint64_t v44 = v43 + 1;
        int v45 = &v12[v43];
        do
        {
          sub_BDBFA8((uint64_t)v12, a3, a2 - v12, v45--);
          --v44;
        }
        while (v44);
        return sub_BDC0D8((uint64_t)v12, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 < 0x401)
    {
      sub_BDB784(v18, v12, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_BDB784(v12, v18, v11, a3);
      uint64_t v19 = a5;
      uint64_t v20 = v11;
      uint64_t v21 = &v12[v17];
      sub_BDB784(v12 + 1, v21 - 1, v53, a3);
      sub_BDB784(v12 + 2, &v12[v17 + 1], v52, a3);
      sub_BDB784(v21 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v22 = *v12;
      *int v12 = *v21;
      unsigned __int16 *v21 = v22;
      uint64_t v11 = v20;
      a5 = v19;
      a2 = v54;
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((sub_BDAE90(a3, *(v12 - 1), *v12) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_BDB8B0(v12, a2, a3);
      int v12 = (uint64_t **)result;
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v23 = sub_BDB9C0(v12, a2, a3);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = sub_BDBADC(v12, v23, a3);
    int v12 = v23 + 1;
    uint64_t result = sub_BDBADC(v23 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v25)
    {
LABEL_16:
      uint64_t result = sub_BDA9D8(v10, v23, a3, -v14, a5 & 1);
      int v12 = v23 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  uint64_t v33 = v12 + 1;
  BOOL v35 = v12 == a2 || v33 == a2;
  if (a5)
  {
    if (!v35)
    {
      uint64_t v36 = 0;
      uint64_t v37 = v12;
      do
      {
        int v40 = *v37;
        char v39 = v37[1];
        uint64_t v37 = v33;
        uint64_t result = sub_BDAE90(a3, v39, v40);
        if (result)
        {
          int v41 = *v37;
          uint64_t v42 = v36;
          do
          {
            *(uint64_t **)((char *)v12 + v42 + 8) = *(uint64_t **)((char *)v12 + v42);
            if (!v42)
            {
              int v38 = v12;
              goto LABEL_44;
            }
            uint64_t result = sub_BDAE90(a3, v41, *(uint64_t **)((char *)v12 + v42 - 8));
            v42 -= 8;
          }
          while ((result & 1) != 0);
          int v38 = (uint64_t **)((char *)v12 + v42 + 8);
LABEL_44:
          unsigned int *v38 = v41;
        }
        uint64_t v33 = v37 + 1;
        v36 += 8;
      }
      while (v37 + 1 != a2);
    }
  }
  else if (!v35)
  {
    do
    {
      int v47 = *v10;
      char v46 = v10[1];
      uint64_t v10 = v33;
      uint64_t result = sub_BDAE90(a3, v46, v47);
      if (result)
      {
        char v48 = *v10;
        int v49 = v10;
        do
        {
          int v50 = v49;
          int v51 = *--v49;
          unsigned __int16 *v50 = v51;
          uint64_t result = sub_BDAE90(a3, v48, *(v50 - 2));
        }
        while ((result & 1) != 0);
        *int v49 = v48;
      }
      uint64_t v33 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t sub_BDAE90(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 - *a2) >> 7;
  uint64_t v6 = *a3;
  unint64_t v7 = (a3[1] - *a3) >> 7;
  BOOL v8 = v5 >= v7;
  if (v5 != v7) {
    return !v8;
  }
  if (v4 == v3)
  {
LABEL_15:
    uint64_t v22 = *(void *)(v3 + 80);
    uint64_t v23 = *(void *)(v3 + 88);
    if (v22 == v23)
    {
      int v24 = *(_DWORD *)(v3 + 52);
      uint64_t v25 = *(void *)(v6 + 80);
      uint64_t v26 = *(void *)(v6 + 88);
      if (v25 != v26)
      {
LABEL_17:
        if ((v24 != 0) != (sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 2)) != 0)) {
          goto LABEL_18;
        }
LABEL_32:
        uint64_t v37 = *a2;
        uint64_t v38 = a2[1];
        if (v38 == *a2) {
          goto LABEL_150;
        }
        uint64_t v39 = (v38 - *a2) >> 7;
        int v40 = (void *)(v37 + 16);
        int v41 = (char **)(*a3 + 16);
        uint64_t v42 = v39;
        while (1)
        {
          unint64_t v43 = (unsigned __int16 *)(*v40 - *(int *)*v40);
          if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0)
          {
            unsigned int v45 = *(_DWORD *)(*v40 + v44);
            char v46 = *v41;
            int v47 = &(*v41)[-*(int *)*v41];
            if (*(unsigned __int16 *)v47 < 9u) {
              goto LABEL_34;
            }
          }
          else
          {
            unsigned int v45 = 0;
            char v46 = *v41;
            int v47 = &(*v41)[-*(int *)*v41];
            if (*(unsigned __int16 *)v47 < 9u) {
              goto LABEL_34;
            }
          }
          uint64_t v48 = *((unsigned __int16 *)v47 + 4);
          if (v48)
          {
            unsigned int v49 = *(_DWORD *)&v46[v48];
            BOOL v8 = v45 >= v49;
            if (v45 != v49) {
              return !v8;
            }
            goto LABEL_35;
          }
LABEL_34:
          BOOL v8 = 1;
          if (v45) {
            return !v8;
          }
LABEL_35:
          v40 += 16;
          v41 += 16;
          if (!--v42)
          {
            uint64_t v51 = v37 + 32;
            uint64_t v52 = *a3 + 32;
            uint64_t v53 = v39;
            while (1)
            {
              BOOL v55 = *(void *)v51 == 0;
              if (*(void *)v51) {
                break;
              }
              if (*(void *)v52)
              {
                int v56 = *(unsigned __int8 *)(*(void *)v52 + 33);
LABEL_55:
                BOOL v54 = *(void *)v51 == 0;
                if (v56) {
                  return v54 & v55;
                }
              }
LABEL_56:
              v51 += 128;
              v52 += 128;
              if (!--v53)
              {
                uint64_t v57 = 0;
                while (1)
                {
                  uint64_t v58 = *a2 + (v57 << 7);
                  uint64_t v61 = *(int **)(v58 + 16);
                  int v60 = (char **)(v58 + 16);
                  char v59 = v61;
                  uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
                  if (*v62 >= 9u)
                  {
                    uint64_t v63 = v62[4];
                    if (v63)
                    {
                      int v64 = *(int *)((char *)v59 + v63);
                      if (v64) {
                        break;
                      }
                    }
                  }
LABEL_64:
                  if (++v57 == v39)
                  {
                    uint64_t v38 = *a2;
LABEL_150:
                    uint64_t v117 = *(void *)(v38 + 80);
                    uint64_t v118 = *(void *)(v38 + 88);
                    if (v117 == v118)
                    {
                      uint64_t v120 = *a2;
                      if (!*(_DWORD *)(v38 + 52)) {
                        goto LABEL_154;
                      }
LABEL_152:
                      int v121 = sub_BDBD3C(v120, 0);
                      int v122 = sub_BDBD3C(*a3, 0);
                    }
                    else
                    {
                      int v119 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v118 - v117) >> 2));
                      uint64_t v120 = *a2;
                      if (v119) {
                        goto LABEL_152;
                      }
LABEL_154:
                      int v121 = sub_BDBDD0(v120, 0);
                      int v122 = sub_BDBDD0(*a3, 0);
                    }
                    return v121 < v122;
                  }
                }
                uint64_t v65 = 0;
                uint64_t v66 = 0;
                int v67 = (uint64_t *)(*a2 + (v57 << 7));
                uint64_t v68 = *a3 + (v57 << 7);
                unint64_t v133 = (uint64_t *)(v68 + 24);
                uint64_t v134 = v67 + 3;
                uint64_t v131 = v67 + 8;
                unint64_t v132 = v67 + 7;
                uint64_t v130 = (uint64_t *)(v68 + 56);
                unint64_t v129 = (uint64_t *)(v68 + 64);
                uint64_t v123 = v68 + 32;
                unint64_t v124 = v67 + 4;
                unint64_t v127 = v67 + 14;
                uint64_t v128 = v67 + 13;
                uint64_t v125 = (void *)(v68 + 112);
                unint64_t v126 = (uint64_t *)(v68 + 104);
                int v69 = (char **)(v68 + 16);
                while (2)
                {
                  uint64_t v70 = *v134;
                  uint64_t v71 = __ROR8__(*(void *)(*v134 + v65), 32);
                  uint64_t v72 = *v133;
                  uint64_t v73 = __ROR8__(*(void *)(*v133 + v65), 32);
                  if (v71 != v73 || HIDWORD(v71) != HIDWORD(v73))
                  {
                    BOOL v116 = v71 < v73 && HIDWORD(v71) <= HIDWORD(v73);
                    return HIDWORD(v71) < HIDWORD(v73) || v116;
                  }
                  uint64_t v75 = *v132;
                  if (*v132 == *v131)
                  {
                    if (*v124)
                    {
                      char v76 = (unsigned __int8 *)(*(void *)(*v124 + 40) + 20 * v66 + 16);
                      uint64_t v77 = *v130;
                      uint64_t v78 = *v129;
                      if (*v130 != *v129) {
                        goto LABEL_76;
                      }
                    }
                    else
                    {
                      char v76 = (unsigned __int8 *)(v70 + v65 + 16);
                      uint64_t v77 = *v130;
                      uint64_t v78 = *v129;
                      if (*v130 != *v129) {
                        goto LABEL_76;
                      }
                    }
                  }
                  else
                  {
                    char v76 = (unsigned __int8 *)(v75 + 2 * v66);
                    uint64_t v77 = *v130;
                    uint64_t v78 = *v129;
                    if (*v130 != *v129)
                    {
LABEL_76:
                      unsigned int v79 = *v76;
                      unsigned int v80 = *(unsigned __int8 *)(v77 + 2 * v66);
                      BOOL v8 = v79 >= v80;
                      if (v79 != v80) {
                        return !v8;
                      }
                      goto LABEL_86;
                    }
                  }
                  if (*(void *)v123) {
                    uint64_t v81 = *(void *)(*(void *)v123 + 40) + 20 * v66;
                  }
                  else {
                    uint64_t v81 = v72 + v65;
                  }
                  unsigned int v82 = *v76;
                  unsigned int v83 = *(unsigned __int8 *)(v81 + 16);
                  BOOL v8 = v82 >= v83;
                  if (v82 != v83) {
                    return !v8;
                  }
LABEL_86:
                  if (v75 == *v131)
                  {
                    if (*v124)
                    {
                      int v84 = (unsigned __int8 *)(*(void *)(*v124 + 40) + 20 * v66 + 17);
                      if (v77 != v78) {
                        goto LABEL_88;
                      }
                    }
                    else
                    {
                      int v84 = (unsigned __int8 *)(v70 + v65 + 17);
                      if (v77 != v78) {
                        goto LABEL_88;
                      }
                    }
                  }
                  else
                  {
                    int v84 = (unsigned __int8 *)(v75 + 2 * v66 + 1);
                    if (v77 != v78)
                    {
LABEL_88:
                      char v85 = (unsigned __int8 *)(v77 + 2 * v66 + 1);
                      unsigned int v86 = *v84;
                      LODWORD(v85) = *v85;
                      BOOL v8 = v86 >= v85;
                      if (v86 != v85) {
                        return !v8;
                      }
                      goto LABEL_98;
                    }
                  }
                  if (*(void *)v123) {
                    uint64_t v87 = *(void *)(*(void *)v123 + 40) + 20 * v66;
                  }
                  else {
                    uint64_t v87 = v72 + v65;
                  }
                  unsigned int v88 = *v84;
                  unsigned int v89 = *(unsigned __int8 *)(v87 + 17);
                  BOOL v8 = v88 >= v89;
                  if (v88 != v89) {
                    return !v8;
                  }
LABEL_98:
                  unsigned int v90 = *(unsigned __int16 *)(v70 + v65 + 20);
                  unsigned int v91 = *(unsigned __int16 *)(v72 + v65 + 20);
                  BOOL v8 = v90 >= v91;
                  if (v90 != v91) {
                    return !v8;
                  }
                  if (*v128 == *v127)
                  {
                    unint64_t v92 = 0;
                    uint64_t v93 = *v126;
                    if (*v126 != *v125) {
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    unint64_t v92 = *(void *)(*v128 + 8 * v66);
                    uint64_t v93 = *v126;
                    if (*v126 != *v125)
                    {
LABEL_101:
                      unint64_t v94 = *(void *)(v93 + 8 * v66);
                      if (v94 != v92) {
                        goto LABEL_156;
                      }
                      goto LABEL_105;
                    }
                  }
                  unint64_t v94 = 0;
                  if (v92)
                  {
LABEL_156:
                    BOOL v8 = v92 >= v94;
                    return !v8;
                  }
LABEL_105:
                  uint64_t v95 = *v60;
                  uint64_t v96 = &(*v60)[-*(int *)*v60];
                  unsigned int v97 = *(unsigned __int16 *)v96;
                  if (v97 < 0x27)
                  {
                    if (v97 >= 0x11) {
                      goto LABEL_111;
                    }
                  }
                  else
                  {
                    if (*((_WORD *)v96 + 19))
                    {
                      unsigned int v98 = sub_B61408((unsigned int *)&v95[*((unsigned __int16 *)v96 + 19)+ *(unsigned int *)&v95[*((unsigned __int16 *)v96 + 19)]], v66);
                      long long v99 = *v69;
                      int v100 = &(*v69)[-*(int *)*v69];
                      unsigned int v101 = *(unsigned __int16 *)v100;
                      if (v101 < 0x27) {
                        goto LABEL_108;
                      }
LABEL_115:
                      if (*((_WORD *)v100 + 19))
                      {
                        unsigned int v103 = sub_B61408((unsigned int *)&v99[*((unsigned __int16 *)v100 + 19)+ *(unsigned int *)&v99[*((unsigned __int16 *)v100 + 19)]], v66);
                        goto LABEL_120;
                      }
LABEL_117:
                      uint64_t v104 = *((unsigned __int16 *)v100 + 8);
                      if (v104)
                      {
                        unsigned int v103 = *(_DWORD *)&v99[v104];
                        goto LABEL_120;
                      }
LABEL_119:
                      unsigned int v103 = -1;
LABEL_120:
                      BOOL v8 = v98 >= v103;
                      if (v98 != v103) {
                        return !v8;
                      }
                      uint64_t v105 = *v60;
                      int v106 = &(*v60)[-*(int *)*v60];
                      unsigned int v107 = *(unsigned __int16 *)v106;
                      if (v107 < 0x25)
                      {
                        if (v107 >= 0xF) {
                          goto LABEL_127;
                        }
                      }
                      else
                      {
                        if (*((_WORD *)v106 + 18))
                        {
                          unsigned int v108 = sub_B61408((unsigned int *)&v105[*((unsigned __int16 *)v106 + 18)+ *(unsigned int *)&v105[*((unsigned __int16 *)v106 + 18)]], v66);
                          unsigned __int16 v109 = *v69;
                          uint64_t v110 = &(*v69)[-*(int *)*v69];
                          unsigned int v111 = *(unsigned __int16 *)v110;
                          if (v111 < 0x25) {
                            goto LABEL_124;
                          }
LABEL_131:
                          if (*((_WORD *)v110 + 18))
                          {
                            unsigned int v113 = sub_B61408((unsigned int *)&v109[*((unsigned __int16 *)v110 + 18)+ *(unsigned int *)&v109[*((unsigned __int16 *)v110 + 18)]], v66);
                            goto LABEL_136;
                          }
LABEL_133:
                          uint64_t v114 = *((unsigned __int16 *)v110 + 7);
                          if (v114)
                          {
                            unsigned int v113 = *(_DWORD *)&v109[v114];
                            goto LABEL_136;
                          }
LABEL_135:
                          unsigned int v113 = -1;
LABEL_136:
                          BOOL v8 = v108 >= v113;
                          if (v108 != v113) {
                            return !v8;
                          }
                          ++v66;
                          v65 += 24;
                          if (v64 == v66) {
                            goto LABEL_64;
                          }
                          continue;
                        }
LABEL_127:
                        uint64_t v112 = *((unsigned __int16 *)v106 + 7);
                        if (v112)
                        {
                          unsigned int v108 = *(_DWORD *)&v105[v112];
                          unsigned __int16 v109 = *v69;
                          uint64_t v110 = &(*v69)[-*(int *)*v69];
                          unsigned int v111 = *(unsigned __int16 *)v110;
                          if (v111 >= 0x25) {
                            goto LABEL_131;
                          }
LABEL_124:
                          if (v111 >= 0xF) {
                            goto LABEL_133;
                          }
                          goto LABEL_135;
                        }
                      }
                      unsigned int v108 = -1;
                      unsigned __int16 v109 = *v69;
                      uint64_t v110 = &(*v69)[-*(int *)*v69];
                      unsigned int v111 = *(unsigned __int16 *)v110;
                      if (v111 >= 0x25) {
                        goto LABEL_131;
                      }
                      goto LABEL_124;
                    }
LABEL_111:
                    uint64_t v102 = *((unsigned __int16 *)v96 + 8);
                    if (v102)
                    {
                      unsigned int v98 = *(_DWORD *)&v95[v102];
                      long long v99 = *v69;
                      int v100 = &(*v69)[-*(int *)*v69];
                      unsigned int v101 = *(unsigned __int16 *)v100;
                      if (v101 >= 0x27) {
                        goto LABEL_115;
                      }
LABEL_108:
                      if (v101 >= 0x11) {
                        goto LABEL_117;
                      }
                      goto LABEL_119;
                    }
                  }
                  break;
                }
                unsigned int v98 = -1;
                long long v99 = *v69;
                int v100 = &(*v69)[-*(int *)*v69];
                unsigned int v101 = *(unsigned __int16 *)v100;
                if (v101 >= 0x27) {
                  goto LABEL_115;
                }
                goto LABEL_108;
              }
            }
            int v56 = *(unsigned __int8 *)(*(void *)v51 + 33);
            if (*(void *)v52)
            {
              BOOL v54 = *(unsigned __int8 *)(*(void *)v52 + 33) != 0;
              if ((v56 != 0) != v54)
              {
                BOOL v55 = v56 == 0;
                return v54 & v55;
              }
              goto LABEL_56;
            }
            goto LABEL_55;
          }
        }
      }
    }
    else
    {
      int v24 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2));
      uint64_t v6 = *a3;
      uint64_t v25 = *(void *)(*a3 + 80);
      uint64_t v26 = *(void *)(*a3 + 88);
      if (v25 != v26) {
        goto LABEL_17;
      }
    }
    if ((v24 != 0) != (*(_DWORD *)(v6 + 52) != 0))
    {
LABEL_18:
      uint64_t v27 = *(void *)(*a2 + 80);
      uint64_t v28 = *(void *)(*a2 + 88);
      if (v27 == v28)
      {
        int v29 = *(_DWORD *)(*a2 + 52);
        uint64_t v30 = *a3;
        uint64_t v31 = *(void *)(*a3 + 80);
        uint64_t v32 = *(void *)(*a3 + 88);
        if (v31 != v32) {
          goto LABEL_20;
        }
      }
      else
      {
        int v29 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 2));
        uint64_t v30 = *a3;
        uint64_t v31 = *(void *)(*a3 + 80);
        uint64_t v32 = *(void *)(*a3 + 88);
        if (v31 != v32)
        {
LABEL_20:
          int v33 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 2));
LABEL_48:
          if (v29) {
            BOOL v50 = 1;
          }
          else {
            BOOL v50 = v33 == 0;
          }
          return !v50;
        }
      }
      int v33 = *(_DWORD *)(v30 + 52);
      goto LABEL_48;
    }
    goto LABEL_32;
  }
  uint64_t v11 = (void *)(v3 + 16);
  int v12 = (char **)(v6 + 16);
  while (1)
  {
    uint64_t v13 = (unsigned __int16 *)(*v11 - *(int *)*v11);
    if (*v13 >= 7u && (unsigned __int16 v14 = v13[3]) != 0)
    {
      unint64_t v15 = *(unsigned int *)(*v11 + v14 + 4) | ((unint64_t)*(unsigned int *)(*v11 + v14) << 32);
      unint64_t v16 = *v12;
      unint64_t v17 = &(*v12)[-*(int *)*v12];
      if (*(unsigned __int16 *)v17 < 7u) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v15 = 0xFFFFFFFFLL;
      unint64_t v16 = *v12;
      unint64_t v17 = &(*v12)[-*(int *)*v12];
      if (*(unsigned __int16 *)v17 < 7u) {
        goto LABEL_12;
      }
    }
    unsigned __int16 v18 = *((_WORD *)v17 + 3);
    if (v18)
    {
      unint64_t v19 = *(unsigned int *)&v16[v18 + 4] | ((unint64_t)*(unsigned int *)&v16[v18] << 32);
      unint64_t v20 = HIDWORD(v15);
      unint64_t v21 = HIDWORD(v19);
      if (HIDWORD(v15) != HIDWORD(v19)) {
        break;
      }
      goto LABEL_13;
    }
LABEL_12:
    LODWORD(v19) = -1;
    unint64_t v20 = HIDWORD(v15);
    LODWORD(v21) = 0;
    if (HIDWORD(v15)) {
      break;
    }
LABEL_13:
    if (v15 != v19) {
      break;
    }
    v11 += 16;
    v12 += 16;
    if (!--v5) {
      goto LABEL_15;
    }
  }
  BOOL v35 = v20 <= v21 && v15 < v19;
  return v20 < v21 || v35;
}

uint64_t sub_BDB784(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  char v8 = sub_BDAE90(a4, *a2, *a1);
  uint64_t result = sub_BDAE90(a4, *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (sub_BDAE90(a4, *a3, v10))
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      return 2;
    }
    return 1;
  }
  if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (sub_BDAE90(a4, *a2, *a1))
    {
      int v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      return 2;
    }
    return 1;
  }
  return result;
}

uint64_t **sub_BDB8B0(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if (sub_BDAE90(a3, *a1, *(a2 - 1)))
  {
    unint64_t v7 = a1;
    do
    {
      char v8 = v7[1];
      ++v7;
    }
    while ((sub_BDAE90(a3, v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      unint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!sub_BDAE90(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while ((sub_BDAE90(a3, v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *unint64_t v7 = *v4;
    *uint64_t v4 = v11;
    do
    {
      int v12 = v7[1];
      ++v7;
    }
    while (!sub_BDAE90(a3, v6, v12));
    do
      uint64_t v13 = *--v4;
    while ((sub_BDAE90(a3, v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t **sub_BDB9C0(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a1;
  do
    char v8 = sub_BDAE90(a3, a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      int v12 = *--a2;
    }
    while ((sub_BDAE90(a3, v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!sub_BDAE90(a3, v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    unsigned __int16 v14 = a2;
    do
    {
      unint64_t v15 = *v13;
      uint64_t *v13 = *v14;
      *unsigned __int16 v14 = v15;
      do
      {
        unint64_t v16 = v13[1];
        ++v13;
      }
      while ((sub_BDAE90(a3, v16, v7) & 1) != 0);
      do
        unint64_t v17 = *--v14;
      while (!sub_BDAE90(a3, v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  uint64_t *v10 = v7;
  return v10;
}

BOOL sub_BDBADC(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_BDAE90(a3, *(a2 - 1), *a1))
      {
        unint64_t v15 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      sub_BDB784(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      unint64_t v16 = a1 + 2;
      sub_BDB784(a1, a1 + 1, a1 + 2, a3);
      if (sub_BDAE90(a3, *(a2 - 1), a1[2]))
      {
        unint64_t v17 = *v16;
        *unint64_t v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (sub_BDAE90(a3, *v16, a1[1]))
        {
          unint64_t v19 = a1[1];
          unsigned __int16 v18 = a1[2];
          unint64_t v20 = *a1;
          a1[1] = v18;
          a1[2] = v19;
          if (sub_BDAE90(a3, v18, v20))
          {
            unint64_t v21 = *a1;
            *a1 = a1[1];
            a1[1] = v21;
          }
        }
      }
      return 1;
    case 5:
      sub_BDBE60(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      char v8 = a1 + 2;
      sub_BDB784(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (!sub_BDAE90(a3, *v9, *v8))
  {
LABEL_11:
    char v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
  int v12 = *v9;
  uint64_t v13 = v10;
  do
  {
    unsigned __int16 v14 = (uint64_t **)((char *)a1 + v13);
    *(uint64_t **)((char *)a1 + v13 + 24) = *(uint64_t **)((char *)a1 + v13 + 16);
    if (v13 == -16)
    {
      *a1 = v12;
      if (++v11 != 8) {
        goto LABEL_11;
      }
      return v9 + 1 == a2;
    }
    v13 -= 8;
  }
  while ((sub_BDAE90(a3, v12, v14[1]) & 1) != 0);
  *(uint64_t **)((char *)a1 + v13 + 24) = v12;
  if (++v11 != 8) {
    goto LABEL_11;
  }
  return v9 + 1 == a2;
}

uint64_t sub_BDBD3C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2 == *(void *)(a1 + 88)) {
    int v3 = 10 * *(_DWORD *)(*(void *)(a1 + 40) + 12 * a2 + 4);
  }
  else {
    int v3 = *(_DWORD *)(v2 + 12 * a2);
  }
  int v4 = v3 / 10;
  int v5 = v3 % 10;
  if (v3 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  return v4
       + *(_DWORD *)(a1 + 48)
       + (((103 * (char)(v6 + v5)) >> 15) & 1)
       + ((103 * (char)(v6 + v5)) >> 10);
}

uint64_t sub_BDBDD0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    int v3 = *(_DWORD *)(*(void *)(v2 + 40) + 20 * a2 + 12);
  }
  else {
    int v3 = 10 * *(_DWORD *)(*(void *)(a1 + 24) + 24 * a2 + 12);
  }
  int v4 = v3 / 10;
  int v5 = v3 % 10;
  if (v3 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  return v4
       + *(_DWORD *)(a1 + 48)
       + (((103 * (char)(v6 + v5)) >> 15) & 1)
       + ((103 * (char)(v6 + v5)) >> 10);
}

uint64_t sub_BDBE60(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5, uint64_t a6)
{
  sub_BDB784(a1, a2, a3, a6);
  if (sub_BDAE90(a6, *a4, *a3))
  {
    int v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (sub_BDAE90(a6, *a3, *a2))
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (sub_BDAE90(a6, *a2, *a1))
      {
        unsigned __int16 v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  uint64_t result = sub_BDAE90(a6, *a5, *a4);
  if (result)
  {
    unint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    uint64_t result = sub_BDAE90(a6, *a4, *a3);
    if (result)
    {
      unint64_t v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      uint64_t result = sub_BDAE90(a6, *a3, *a2);
      if (result)
      {
        unsigned __int16 v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        uint64_t result = sub_BDAE90(a6, *a2, *a1);
        if (result)
        {
          unint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_BDBFA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      int v12 = (uint64_t **)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_BDAE90(a2, *v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = sub_BDAE90(a2, *v12, *v5);
      if ((result & 1) == 0)
      {
        unsigned __int16 v14 = *v5;
        do
        {
          unint64_t v15 = v5;
          int v5 = v12;
          *unint64_t v15 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          int v12 = (uint64_t **)(v6 + 8 * v16);
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if (sub_BDAE90(a2, *v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = v17;
            }
          }
          uint64_t result = sub_BDAE90(a2, *v12, v14);
          uint64_t v11 = v16;
        }
        while (!result);
        *int v5 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_BDC0D8(uint64_t result, uint64_t **a2, uint64_t a3)
{
  if ((uint64_t)a2 - result >= 9)
  {
    unint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = ((unint64_t)a2 - result) >> 3;
    do
    {
      char v8 = v4;
      uint64_t v9 = 0;
      unint64_t v19 = *v5;
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = &v10[v9 + 1];
        uint64_t v12 = (2 * v9) | 1;
        uint64_t v13 = 2 * v9 + 2;
        if (v13 < v6)
        {
          uint64_t result = sub_BDAE90(a3, *v11, v10[v9 + 2]);
          if (result)
          {
            ++v11;
            uint64_t v12 = v13;
          }
        }
        uint64_t *v10 = *v11;
        uint64_t v10 = v11;
        uint64_t v9 = v12;
      }
      while (v12 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
      --v4;
      if (v11 == v8 - 1)
      {
        uint64_t *v11 = v19;
      }
      else
      {
        uint64_t *v11 = *v4;
        *unint64_t v4 = v19;
        uint64_t v14 = (char *)v11 - (char *)v5 + 8;
        if (v14 >= 9)
        {
          unint64_t v15 = (((unint64_t)v14 >> 3) - 2) >> 1;
          uint64_t v16 = &v5[v15];
          uint64_t result = sub_BDAE90(a3, *v16, *v11);
          if (result)
          {
            uint64_t v17 = *v11;
            do
            {
              unsigned __int16 v18 = v11;
              uint64_t v11 = v16;
              *unsigned __int16 v18 = *v16;
              if (!v15) {
                break;
              }
              unint64_t v15 = (v15 - 1) >> 1;
              uint64_t v16 = &v5[v15];
              uint64_t result = sub_BDAE90(a3, *v16, v17);
            }
            while ((result & 1) != 0);
            uint64_t *v11 = v17;
          }
        }
      }
    }
    while (v6-- > 2);
  }
  return result;
}

uint64_t sub_BDC268(uint64_t result)
{
  unsigned int v1 = result;
  if ((result & 0xFFFF0000) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    int v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return (unsigned __int16)result;
}

void sub_BDC33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_BDC3BC(unint64_t result)
{
  unint64_t v1 = result;
  if (result >= 0x100)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    int v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_BDC490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void **sub_BDC510(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        long long v6 = (void *)*((void *)v3 - 6);
        if (v6)
        {
          *((void *)v3 - 5) = v6;
          operator delete(v6);
        }
        int64_t v7 = (void *)*((void *)v3 - 9);
        if (v7)
        {
          *((void *)v3 - 8) = v7;
          operator delete(v7);
        }
        v3 -= 128;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_BDC5A4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v5 = (void *)result;
    if (a4 >> 57) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(a4 << 7);
    uint64_t v8 = result;
    *int v5 = result;
    v5[1] = result;
    v5[2] = result + (a4 << 7);
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_BDC744(v8 + v9, (long long *)(a2 + v9));
        v9 += 128;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_BDC650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_BDC664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AE75C(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_BDC68C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_BDC68C(void ***result)
{
  unint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          long long v6 = (void *)*((void *)v4 - 3);
          if (v6)
          {
            *((void *)v4 - 2) = v6;
            operator delete(v6);
          }
          int64_t v7 = (void *)*((void *)v4 - 6);
          if (v7)
          {
            *((void *)v4 - 5) = v7;
            operator delete(v7);
          }
          uint64_t v8 = (void *)*((void *)v4 - 9);
          if (v8)
          {
            *((void *)v4 - 8) = v8;
            operator delete(v8);
          }
          v4 -= 128;
        }
        while (v4 != v3);
        int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_BDC744(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = (unsigned char *)*((void *)a2 + 7);
  int64_t v7 = (unsigned char *)*((void *)a2 + 8);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = &v10[2 * (v9 >> 1)];
    *(void *)(a1 + 72) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 64) = v11;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v13 = (unsigned char *)*((void *)a2 + 10);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 11);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    unint64_t v15 = (char *)operator new(v14);
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v15;
    uint64_t v16 = &v15[4 * (v14 >> 2)];
    *(void *)(a1 + 96) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 88) = v16;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  unsigned __int16 v18 = (unsigned char *)*((void *)a2 + 13);
  uint64_t v17 = (unsigned char *)*((void *)a2 + 14);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    unint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 104) = v20;
    *(void *)(a1 + 112) = v20;
    unint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 120) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 112) = v21;
  }
  return a1;
}

void sub_BDC8AC(_Unwind_Exception *exception_object)
{
  long long v6 = *v4;
  if (*v4)
  {
    v1[14] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[11] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[8] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_BDC90C()
{
  if (!*v0) {
    JUMPOUT(0xBDC8D0);
  }
  JUMPOUT(0xBDC8C8);
}

void *sub_BDC91C(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  return a1;
}

void *sub_BDC970(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_BD67D4(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      int64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (sub_BD6820(a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (sub_BD6820(a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          int64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  sub_BDCCF8(a1, v10, a4, (uint64_t)&v31);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v17 / v18);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v28 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * v10);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v28 & v10;
      int64_t v19 = *(void **)(*(void *)a1 + 8 * (v28 & v10));
      if (v19) {
        goto LABEL_26;
      }
    }
LABEL_50:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v31)
    {
      unint64_t v29 = *(void *)(*v31 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11) {
          v29 %= v11;
        }
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v31;
    }
    goto LABEL_61;
  }
  int64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v19) {
    goto LABEL_50;
  }
LABEL_26:
  void *v31 = *v19;
  *int64_t v19 = v31;
LABEL_61:
  int64_t v14 = v31;
  ++*v8;
  return v14;
}

void sub_BDCCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_97A9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_BDCCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x30uLL);
  unint64_t v9 = result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t result = 0;
  result[1] = a2;
  result[2] = 0;
  uint64_t v10 = *a3;
  result[3] = 0;
  result[4] = 0;
  uint8x8_t v12 = *(unsigned char **)v10;
  unint64_t v11 = *(unsigned char **)(v10 + 8);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    int64_t v14 = (char *)operator new(v11 - v12);
    v9[2] = v14;
    v9[3] = v14;
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    v9[4] = v15;
    uint64_t result = memcpy(v14, v12, v13);
    v9[3] = v15;
  }
  *((_DWORD *)v9 + 10) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_BDCDB0(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_97A9FC(v1);
  _Unwind_Resume(a1);
}

void *sub_BDCDD4(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_BD6194(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      int64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (sub_BD61F8(a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (sub_BD61F8(a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          int64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  sub_BDD15C(a1, v10, a4, (uint64_t)&v31);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v17 / v18);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v28 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * v10);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v28 & v10;
      int64_t v19 = *(void **)(*(void *)a1 + 8 * (v28 & v10));
      if (v19) {
        goto LABEL_26;
      }
    }
LABEL_50:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v31)
    {
      unint64_t v29 = *(void *)(*v31 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v29 >= v11) {
          v29 %= v11;
        }
      }
      else
      {
        v29 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v31;
    }
    goto LABEL_61;
  }
  int64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v19) {
    goto LABEL_50;
  }
LABEL_26:
  void *v31 = *v19;
  *int64_t v19 = v31;
LABEL_61:
  int64_t v14 = v31;
  ++*v8;
  return v14;
}

void sub_BDD148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_97A9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_BDD15C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x30uLL);
  unint64_t v9 = result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t result = 0;
  result[1] = a2;
  result[2] = 0;
  uint64_t v10 = *a3;
  result[3] = 0;
  result[4] = 0;
  uint8x8_t v12 = *(unsigned char **)v10;
  unint64_t v11 = *(unsigned char **)(v10 + 8);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int64_t v14 = (char *)operator new(v13);
    v9[2] = v14;
    v9[3] = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    v9[4] = v15;
    uint64_t result = memcpy(v14, v12, v13);
    v9[3] = v15;
  }
  *((_DWORD *)v9 + 10) = -1;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_BDD234(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_97A9FC(v1);
  _Unwind_Resume(a1);
}

void sub_BDD258(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(void *)(a2 + 120) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a2 + 88);
    if (v4)
    {
      *(void *)(a2 + 96) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
    long long v6 = *(void **)(a2 + 24);
    if (v6)
    {
      *(void *)(a2 + 32) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v7;
      operator delete(v7);
    }
    operator delete();
  }
}

void sub_BDD2F4(void ***a1)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v4 = a1[1];
    do
    {
      uint64_t v7 = (char *)*(v4 - 3);
      v4 -= 3;
      long long v6 = v7;
      if (v7)
      {
        uint64_t v8 = (char *)*(v3 - 2);
        long long v5 = v6;
        if (v8 != v6)
        {
          do
          {
            unint64_t v9 = (void *)*((void *)v8 - 3);
            if (v9)
            {
              *((void *)v8 - 2) = v9;
              operator delete(v9);
            }
            uint64_t v10 = (void *)*((void *)v8 - 6);
            if (v10)
            {
              *((void *)v8 - 5) = v10;
              operator delete(v10);
            }
            unint64_t v11 = (void *)*((void *)v8 - 9);
            if (v11)
            {
              *((void *)v8 - 8) = v11;
              operator delete(v11);
            }
            v8 -= 128;
          }
          while (v8 != v6);
          long long v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
      }
      int v3 = v4;
    }
    while (v4 != v2);
  }
  a1[1] = v2;
}

void **sub_BDD3B0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_BDD3E4(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v1)
  {
    unint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v7 = (char *)*(v4 - 3);
      v4 -= 3;
      long long v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        uint64_t v8 = (char *)*(v2 - 2);
        long long v5 = v6;
        if (v8 != v6)
        {
          do
          {
            unint64_t v9 = (void *)*((void *)v8 - 3);
            if (v9)
            {
              *((void *)v8 - 2) = v9;
              operator delete(v9);
            }
            uint64_t v10 = (void *)*((void *)v8 - 6);
            if (v10)
            {
              *((void *)v8 - 5) = v10;
              operator delete(v10);
            }
            unint64_t v11 = (void *)*((void *)v8 - 9);
            if (v11)
            {
              *((void *)v8 - 8) = v11;
              operator delete(v11);
            }
            v8 -= 128;
          }
          while (v8 != v6);
          long long v5 = *v4;
        }
        *(v2 - 2) = v6;
        operator delete(v5);
        unint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v1);
  }
}

void sub_BDD4A4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v36 = v7 / 12;
    do
    {
      uint64_t v13 = *a2;
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3))
      {
        char v46 = 0;
        int v47 = 0;
        uint64_t v48 = 0;
        uint64_t v19 = *a4;
        if (v12 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v14 = *a3 + v10;
        char v46 = 0;
        int v47 = 0;
        uint64_t v48 = 0;
        uint64_t v16 = *(unsigned char **)v14;
        unint64_t v15 = *(unsigned char **)(v14 + 8);
        int64_t v17 = v15 - v16;
        if (v15 != v16)
        {
          if (v17 < 0) {
            sub_2E00();
          }
          char v46 = operator new(v15 - v16);
          int v47 = v46;
          float v18 = (char *)v46 + 2 * (v17 >> 1);
          uint64_t v48 = v18;
          memcpy(v46, v16, v17);
          int v47 = v18;
        }
        uint64_t v19 = *a4;
        if (v12 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3))
        {
LABEL_9:
          uint64_t v20 = v19 + v10;
          unint64_t v43 = 0;
          uint64_t v44 = 0;
          unsigned int v45 = 0;
          unint64_t v22 = *(unsigned char **)v20;
          unint64_t v21 = *(unsigned char **)(v20 + 8);
          int64_t v23 = v21 - v22;
          if (v21 != v22)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v23 >> 2) >= 0x1555555555555556) {
              sub_2E00();
            }
            unint64_t v43 = operator new(v23);
            uint64_t v44 = v43;
            int8x8_t v24 = (char *)v43 + 4 * (v23 >> 2);
            unsigned int v45 = v24;
            memcpy(v43, v22, v23);
            uint64_t v44 = v24;
          }
          goto LABEL_14;
        }
      }
      unint64_t v43 = 0;
      uint64_t v44 = 0;
      unsigned int v45 = 0;
LABEL_14:
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5[1] - *a5) >> 3))
      {
        int v40 = 0;
        int v41 = 0;
        uint64_t v42 = 0;
      }
      else
      {
        uint64_t v25 = *a5 + v10;
        int v40 = 0;
        int v41 = 0;
        uint64_t v42 = 0;
        uint64_t v27 = *(unsigned char **)v25;
        uint8x8_t v26 = *(unsigned char **)(v25 + 8);
        int64_t v28 = v26 - v27;
        if (v26 != v27)
        {
          if (v28 < 0) {
            sub_2E00();
          }
          int v40 = operator new(v26 - v27);
          int v41 = v40;
          unint64_t v29 = (char *)v40 + 8 * (v28 >> 3);
          uint64_t v42 = v29;
          memcpy(v40, v27, v28);
          int v41 = v29;
        }
      }
      sub_BDD91C(a1, (unsigned int *)(v13 + v11), (char **)&v46, (char **)&v43, (char **)&v40, (uint64_t)v49);
      unint64_t v30 = *(void *)(a6 + 8);
      if (v30 >= *(void *)(a6 + 16))
      {
        unint64_t v34 = sub_BDDA04((void **)a6, (uint64_t)v49);
        BOOL v35 = (void *)__p;
        *(void *)(a6 + 8) = v34;
        if (v35)
        {
          *((void *)&__p + 1) = v35;
          operator delete(v35);
        }
      }
      else
      {
        long long v31 = v49[0];
        long long v32 = v49[2];
        uint64_t v33 = v50;
        *(_OWORD *)(v30 + 16) = v49[1];
        *(_OWORD *)(v30 + 32) = v32;
        *(_OWORD *)unint64_t v30 = v31;
        *(void *)(v30 + 48) = v33;
        *(void *)(v30 + 56) = 0;
        *(void *)(v30 + 64) = 0;
        *(void *)(v30 + 72) = 0;
        *(_OWORD *)(v30 + 56) = v51;
        long long v51 = 0uLL;
        *(void *)(v30 + 72) = v52;
        *(void *)(v30 + 80) = 0;
        uint64_t v52 = 0;
        *(void *)(v30 + 88) = 0;
        *(void *)(v30 + 96) = 0;
        *(_OWORD *)(v30 + 80) = v53;
        long long v53 = 0uLL;
        *(void *)(v30 + 96) = v54;
        *(void *)(v30 + 104) = 0;
        uint64_t v54 = 0;
        *(void *)(v30 + 112) = 0;
        *(void *)(v30 + 120) = 0;
        *(_OWORD *)(v30 + 104) = __p;
        *(void *)(v30 + 120) = v56;
        long long __p = 0uLL;
        uint64_t v56 = 0;
        *(void *)(a6 + 8) = v30 + 128;
      }
      if ((void)v53)
      {
        *((void *)&v53 + 1) = v53;
        operator delete((void *)v53);
      }
      if ((void)v51)
      {
        *((void *)&v51 + 1) = v51;
        operator delete((void *)v51);
      }
      if (v40)
      {
        int v41 = v40;
        operator delete(v40);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      if (v46)
      {
        int v47 = v46;
        operator delete(v46);
      }
      ++v12;
      v11 += 12;
      v10 += 24;
    }
    while (v36 != v12);
  }
}

void sub_BDD850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  if (!__p)
  {
    sub_BDC510(v26);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_BDC510(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_BDD91C@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, char **a3@<X2>, char **a4@<X3>, char **a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = (int *)sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  char v13 = sub_51D60((unsigned __int8 *)(*a1 + 3896));
  uint64_t v14 = *a1;
  if (sub_C259D4(*a1 + 3896) && *(void *)(v14 + 3960)) {
    unint64_t v15 = sub_367060(*(void *)(*a1 + 3960), a2[1] | ((unint64_t)*a2 << 32), a2[2], v13);
  }
  else {
    unint64_t v15 = 0;
  }

  return sub_BDDC04(a6, v12, a2, (uint64_t)v15, a3, a4, a5);
}

char *sub_BDDA04(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 6 > v4) {
    unint64_t v4 = v5 >> 6;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFF80;
  unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 57) {
    sub_188D718();
  }
  unint64_t v9 = v7 << 7;
  uint64_t v10 = (char *)operator new(v7 << 7);
  long long v11 = *(_OWORD *)(a2 + 16);
  unint64_t v12 = &v10[128 * v3];
  char v13 = &v10[v9];
  *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
  *((_OWORD *)v12 + 1) = v11;
  *((_OWORD *)v12 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v12 + 6) = *(void *)(a2 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v12 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((void *)v12 + 12) = 0;
  *((_OWORD *)v12 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v12 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *((void *)v12 + 14) = 0;
  *((void *)v12 + 15) = 0;
  *(_OWORD *)(v12 + 104) = *(_OWORD *)(a2 + 104);
  *((void *)v12 + 15) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  uint64_t v14 = v12 + 128;
  unint64_t v15 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v16) {
      return v14;
    }
    goto LABEL_21;
  }
  uint64_t v17 = 0;
  do
  {
    float v18 = &v12[v17];
    uint64_t v19 = &v16[v17];
    long long v20 = *(_OWORD *)&v16[v17 - 128];
    long long v21 = *(_OWORD *)&v16[v17 - 112];
    long long v22 = *(_OWORD *)&v16[v17 - 96];
    *((void *)v18 - 10) = *(void *)&v16[v17 - 80];
    *((_OWORD *)v18 - 7) = v21;
    *((_OWORD *)v18 - 6) = v22;
    *((_OWORD *)v18 - 8) = v20;
    *(_OWORD *)(v18 - 72) = *(_OWORD *)&v16[v17 - 72];
    *((void *)v18 - 7) = *(void *)&v16[v17 - 56];
    *((void *)v19 - 9) = 0;
    *((void *)v19 - 8) = 0;
    *((void *)v19 - 7) = 0;
    *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
    *((void *)v18 - 4) = *(void *)&v16[v17 - 32];
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *((void *)v19 - 4) = 0;
    *(_OWORD *)(v18 - 24) = *(_OWORD *)&v16[v17 - 24];
    *((void *)v18 - 1) = *(void *)&v16[v17 - 8];
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *((void *)v19 - 1) = 0;
    v17 -= 128;
  }
  while (&v16[v17] != v15);
  int64_t v23 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  *a1 = &v12[v17];
  a1[1] = v14;
  a1[2] = v13;
  if (v16 != v23)
  {
    do
    {
      int8x8_t v24 = (void *)*((void *)v16 - 3);
      if (v24)
      {
        *((void *)v16 - 2) = v24;
        operator delete(v24);
      }
      uint64_t v25 = (void *)*((void *)v16 - 6);
      if (v25)
      {
        *((void *)v16 - 5) = v25;
        operator delete(v25);
      }
      uint8x8_t v26 = (void *)*((void *)v16 - 9);
      if (v26)
      {
        *((void *)v16 - 8) = v26;
        operator delete(v26);
      }
      v16 -= 128;
    }
    while (v16 != v23);
    uint64_t v16 = v23;
  }
  if (v16) {
LABEL_21:
  }
    operator delete(v16);
  return v14;
}

uint64_t sub_BDDC04(uint64_t a1, int *a2, unsigned int *a3, uint64_t a4, char **a5, char **a6, char **a7)
{
  uint64_t v11 = *(void *)a3;
  *(_DWORD *)(a1 + 8) = a3[2];
  *(void *)a1 = v11;
  unint64_t v12 = (int **)(a1 + 16);
  char v13 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v14 = *v13;
  if (v14 < 5 || !v13[2])
  {
    int v23 = 0;
    *unint64_t v12 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = a4;
    *(void *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    goto LABEL_31;
  }
  uint64_t v15 = (uint64_t)&a2[*a3] + v13[2] + *(unsigned int *)((char *)a2 + v13[2]);
  uint64_t v16 = (int *)(v15 + 4 + *(unsigned int *)(v15 + 4));
  *(void *)(a1 + 16) = v16;
  if (v14 < 7 || !v13[3])
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = a4;
    long long v20 = (unsigned __int16 *)((char *)v16 - *v16);
    unsigned int v21 = *v20;
    if (v21 < 0x13) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v24 = v20[9];
    if (v20[9]) {
      v24 += (uint64_t)v16 + *(unsigned int *)((char *)v16 + v24) + 4;
    }
    *(void *)(a1 + 40) = v24;
    if (v14 < 0xD) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  uint64_t v17 = 0x17FFFFFFE8;
  float v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 0xDu)
  {
    uint64_t v19 = v18[6];
    if (v19) {
      uint64_t v17 = 24 * *(unsigned int *)((char *)v16 + v19);
    }
  }
  *(void *)(a1 + 24) = (char *)a2 + v13[3] + *(unsigned int *)((char *)a2 + v13[3]) + v17 + 4;
  *(void *)(a1 + 32) = a4;
  long long v20 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v21 = *v20;
  if (v21 >= 0x13) {
    goto LABEL_13;
  }
LABEL_9:
  *(void *)(a1 + 40) = 0;
  if (v14 < 0xD)
  {
LABEL_10:
    LODWORD(v22) = 0;
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v22 = v13[6];
  if (!v22)
  {
LABEL_20:
    *(_DWORD *)(a1 + 48) = v22;
    uint8x8_t v26 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v26 < 0x13u) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (v21 >= 0x15 && v20[10]) {
    int v25 = *(int *)((char *)v16 + v20[10]);
  }
  else {
    int v25 = -1;
  }
  int v27 = *(_DWORD *)(sub_A10148((unsigned int *)((char *)a2 + v22 + *(unsigned int *)((char *)a2 + v22)), a3[2] + v25) + 4);
  uint64_t v16 = *v12;
  int64_t v28 = (unsigned __int16 *)((char *)*v12 - **v12);
  if (*v28 >= 0xBu && (uint64_t v29 = v28[5]) != 0) {
    int v30 = *(int *)((char *)v16 + v29);
  }
  else {
    int v30 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 48) = v30 + v27;
  uint8x8_t v26 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v26 < 0x13u) {
    goto LABEL_30;
  }
LABEL_28:
  uint64_t v31 = v26[9];
  if (v31)
  {
    int v23 = *(int *)((char *)v16 + v31 + *(unsigned int *)((char *)v16 + v31));
    goto LABEL_31;
  }
LABEL_30:
  int v23 = 0;
LABEL_31:
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 52) = v23;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  if ((char **)(a1 + 56) != a5) {
    sub_BDDEDC((void *)(a1 + 56), *a5, a5[1], (a5[1] - *a5) >> 1);
  }
  if ((char **)(a1 + 80) != a6) {
    sub_31AF54((void *)(a1 + 80), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 2));
  }
  if ((char **)(a1 + 104) != a7) {
    sub_326C0((void *)(a1 + 104), *a7, a7[1], (a7[1] - *a7) >> 3);
  }
  return a1;
}

void sub_BDDEB0(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 112) = v4;
    operator delete(v4);
  }
  sub_20AE7BC((void **)(v1 + 80), (void **)(v1 + 56), v1);
  _Unwind_Resume(a1);
}

void *sub_BDDEDC(void *result, char *__src, char *a3, size_t __sz)
{
  BOOL v6 = __src;
  unint64_t v7 = result;
  size_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      size_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0) {
      goto LABEL_23;
    }
    if (v8 <= __sz) {
      size_t v10 = __sz;
    }
    else {
      size_t v10 = v8;
    }
    BOOL v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11) {
      uint64_t v12 = v10;
    }
    if (v12 < 0) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    uint64_t result = operator new(2 * v12);
    unint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  float v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

void **sub_BDE018(void ***a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  size_t v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v42 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v17 = (void **)operator new(24 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v38 = v17;
    uint64_t v39 = &v17[3 * v7];
    int v40 = v39;
    int v41 = (char *)&v17[3 * v16];
    sub_BDE37C((uint64_t)&v38, a3);
    float v18 = v39;
    uint64_t v19 = *a1;
    long long v20 = v39;
    if (*a1 != v8)
    {
      long long v20 = v39;
      unsigned int v21 = v8;
      do
      {
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        v20 -= 3;
        v20[2] = 0;
        long long v22 = *(_OWORD *)(v21 - 3);
        v21 -= 3;
        *(_OWORD *)long long v20 = v22;
        v20[2] = v21[2];
        unsigned char *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
      }
      while (v21 != v19);
    }
    uint64_t v39 = v20;
    int v23 = a1[1];
    uint64_t v24 = v40;
    if (v23 != v8)
    {
      do
      {
        *uint64_t v24 = 0;
        v24[1] = 0;
        void v24[2] = 0;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v8;
        void v24[2] = v8[2];
        *size_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v24 += 3;
        v8 += 3;
      }
      while (v8 != v23);
      long long v20 = v39;
      size_t v8 = a1[1];
    }
    int v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    uint8x8_t v26 = (char *)a1[2];
    a1[2] = (void **)v41;
    int v40 = v8;
    int v41 = v26;
    uint64_t v38 = v25;
    uint64_t v39 = v25;
    if (v8 != v25)
    {
      int v27 = v8;
      do
      {
        int v30 = (char *)*(v27 - 3);
        v27 -= 3;
        uint64_t v29 = v30;
        int v40 = v27;
        if (v30)
        {
          uint64_t v31 = (char *)*(v8 - 2);
          int64_t v28 = v29;
          if (v31 != v29)
          {
            do
            {
              long long v32 = (void *)*((void *)v31 - 3);
              if (v32)
              {
                *((void *)v31 - 2) = v32;
                operator delete(v32);
              }
              uint64_t v33 = (void *)*((void *)v31 - 6);
              if (v33)
              {
                *((void *)v31 - 5) = v33;
                operator delete(v33);
              }
              unint64_t v34 = (void *)*((void *)v31 - 9);
              if (v34)
              {
                *((void *)v31 - 8) = v34;
                operator delete(v34);
              }
              v31 -= 128;
            }
            while (v31 != v29);
            int64_t v28 = *v27;
          }
          *(v8 - 2) = v29;
          operator delete(v28);
          int v27 = v40;
        }
        size_t v8 = v27;
      }
      while (v27 != v25);
      size_t v8 = v38;
    }
    if (v8) {
      operator delete(v8);
    }
    return v18;
  }
  else
  {
    if (v8 != (void **)v6)
    {
      size_t v10 = v8 + 3;
      BOOL v11 = (void **)(v6 - 24);
      if (v6 < 0x18)
      {
        a1[1] = (void **)v6;
        if ((void *)v6 == v10)
        {
LABEL_47:
          sub_BDE5B8(v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 24;
        uint64_t v13 = a1[1];
        do
        {
          unsigned __int16 *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
          v13[2] = *(void **)(v12 + 16);
          *(void *)unint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          v13 += 3;
          v12 += 24;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((void *)v6 == v10) {
          goto LABEL_47;
        }
      }
      uint64_t v35 = 8 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v36 = (uint64_t)&v5[3 * v7 - 3];
      do
      {
        sub_BDE5B8(v11, (__n128 *)(v36 + v35));
        v11 -= 3;
        v35 -= 24;
      }
      while (v35);
      goto LABEL_47;
    }
    *size_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(__n128 *)size_t v8 = *a3;
    v8[2] = (void *)a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 3;
  }
  return v8;
}

void sub_BDE368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BDD3B0((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_BDE37C(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v12 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5) {
        unint64_t v12 = 1;
      }
      if (v12 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 24 * v12;
      unint64_t v15 = (char *)operator new(24 * v12);
      unint64_t v16 = &v15[24 * v13];
      unint64_t v17 = &v15[v14];
      if (v4 == v6)
      {
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v16;
        *(void *)(a1 + 24) = v17;
      }
      else
      {
        float v18 = (__n128 *)&v16[(char *)v4 - (char *)v6];
        uint64_t v19 = 24 * v13;
        do
        {
          long long v20 = (__n128 *)&v15[v19];
          __n128 *v20 = *v6;
          v20[1].n128_u64[0] = v6[1].n128_u64[0];
          v6->n128_u64[0] = 0;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v19 += 24;
          unint64_t v6 = (__n128 *)((char *)v6 + 24);
        }
        while (&v20[1].n128_i8[8] != (__int8 *)v18);
        uint64_t v5 = *(__n128 **)a1;
        unsigned int v21 = *(void ***)(a1 + 8);
        long long v22 = *(void ***)(a1 + 16);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v17;
        if (v22 != v21)
        {
          int v23 = v22;
          do
          {
            uint8x8_t v26 = (char *)*(v23 - 3);
            v23 -= 3;
            int v25 = v26;
            if (v26)
            {
              int v27 = (char *)*(v22 - 2);
              uint64_t v24 = v25;
              if (v27 != v25)
              {
                do
                {
                  int64_t v28 = (void *)*((void *)v27 - 3);
                  if (v28)
                  {
                    *((void *)v27 - 2) = v28;
                    operator delete(v28);
                  }
                  uint64_t v29 = (void *)*((void *)v27 - 6);
                  if (v29)
                  {
                    *((void *)v27 - 5) = v29;
                    operator delete(v29);
                  }
                  int v30 = (void *)*((void *)v27 - 9);
                  if (v30)
                  {
                    *((void *)v27 - 8) = v30;
                    operator delete(v30);
                  }
                  v27 -= 128;
                }
                while (v27 != v25);
                uint64_t v24 = *v23;
              }
              *(v22 - 2) = v25;
              operator delete(v24);
            }
            long long v22 = v23;
          }
          while (v23 != v21);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      unint64_t v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        BOOL v11 = (__n128 *)((char *)v6 - 24 * v9);
      }
      else
      {
        do
        {
          sub_BDE5B8((void **)v6 + 3 * v10, v6);
          unint64_t v6 = (__n128 *)((char *)v6 + 24);
        }
        while (v6 != v4);
        unint64_t v4 = *(__n128 **)(a1 + 8);
        BOOL v11 = (__n128 *)((char *)v6 + 24 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(void *)(a1 + 16) = v11;
      unint64_t v4 = v11;
    }
  }
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

__n128 sub_BDE5B8(void **a1, __n128 *a2)
{
  unint64_t v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        int64_t v7 = (void *)*((void *)v5 - 3);
        if (v7)
        {
          *((void *)v5 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v5 - 6);
        if (v8)
        {
          *((void *)v5 - 5) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v5 - 9);
        if (v9)
        {
          *((void *)v5 - 8) = v9;
          operator delete(v9);
        }
        v5 -= 128;
      }
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_BDE66C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v26 = a1 << 32;
    uint64_t v27 = v3 >> 3;
    do
    {
      uint64_t v5 = *a2;
      if (v4 >= (a2[1] - *a2) >> 3) {
        sub_66748();
      }
      unsigned int v6 = sub_2D0F10(v4);
      uint64_t v7 = *(void *)(*(void *)(v5 + 8 * v4) + 8) - **(void **)(v5 + 8 * v4);
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v30 = v7 >> 3;
        uint64_t v9 = __ROR8__(v26 | v6, 32);
        do
        {
          BOOL v11 = *(void **)(v5 + 8 * v4);
          if (v8 >= (uint64_t)(v11[1] - *v11) >> 3) {
            sub_66748();
          }
          uint64_t v31 = __ROR8__(*(void *)(*v11 + 8 * v8), 32);
          long long v32 = &v31;
          unint64_t v12 = sub_BDE930(a3, &v31, (uint64_t)&unk_20F06E0, &v32);
          unsigned __int8 v13 = sub_BDC3BC(v8);
          unint64_t v15 = (char *)v12[4];
          unint64_t v14 = v12[5];
          if ((unint64_t)v15 < v14)
          {
            *(void *)unint64_t v15 = v9;
            *((_WORD *)v15 + 4) = v13;
            uint64_t v10 = v15 + 12;
            *((_WORD *)v15 + 5) = 0;
          }
          else
          {
            unint64_t v16 = (unsigned char *)v12[3];
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 2) + 1;
            if (v17 > 0x1555555555555555) {
              sub_2E00();
            }
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v16) >> 2);
            if (2 * v18 > v17) {
              unint64_t v17 = 2 * v18;
            }
            if (v18 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v19 = 0x1555555555555555;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 > 0x1555555555555555) {
              sub_188D718();
            }
            long long v20 = (char *)operator new(12 * v19);
            unsigned int v21 = &v20[4 * ((v15 - v16) >> 2)];
            *(void *)unsigned int v21 = v9;
            v21[8] = v13;
            v21[9] = 0;
            *((_WORD *)v21 + 5) = 0;
            for (unint64_t i = v21; v15 != v16; *((_DWORD *)i + 2) = v24)
            {
              uint64_t v23 = *(void *)(v15 - 12);
              v15 -= 12;
              int v24 = *((_DWORD *)v15 + 2);
              *(void *)(i - 12) = v23;
              i -= 12;
            }
            int v25 = &v20[12 * v19];
            uint64_t v10 = v21 + 12;
            v12[3] = i;
            v12[4] = v21 + 12;
            v12[5] = v25;
            if (v16) {
              operator delete(v16);
            }
          }
          v12[4] = v10;
          ++v8;
        }
        while (v8 != v30);
      }
      ++v4;
    }
    while (v4 != v27);
  }
}

void sub_BDE8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_BDE8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_BDE8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_BDE8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_BDE908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_BDE91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void *sub_BDE930(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unsigned __int8 v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unsigned __int8 v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unsigned __int8 v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unint64_t v18 = (void *)(a1 + 16);
  unsigned __int8 v13 = operator new(0x30uLL);
  void *v13 = 0;
  v13[1] = v9;
  uint64_t v19 = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v13[2] = v19;
  void v13[3] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v13 = *v23;
LABEL_69:
      void *v23 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v13 = *v18;
  *unint64_t v18 = v13;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_BDEC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BDECA4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v31 = a1 << 32;
    uint64_t v32 = v3 >> 3;
    do
    {
      uint64_t v39 = *a2;
      if (v4 >= (a2[1] - *a2) >> 3) {
        sub_66748();
      }
      unsigned int v5 = sub_2D0F10(v4);
      unsigned int v6 = *(void **)(v39 + 8 * v4);
      uint64_t v7 = v6[4] - v6[3];
      if (v7)
      {
        uint64_t v8 = v7 / 12;
        if (*(void *)(*(void *)(v39 + 8 * v4) + 8) == *v6)
        {
          do
            --v8;
          while (v8);
        }
        else
        {
          uint64_t v40 = 0;
          uint64_t v35 = __ROR8__(v31 | v5, 32);
          unint64_t v36 = v4;
          uint64_t v33 = v7 / 12;
          do
          {
            uint64_t v9 = *(void *)(*(void *)(v39 + 8 * v4) + 8) - **(void **)(v39 + 8 * v4);
            if (v9)
            {
              uint64_t v10 = 0;
              uint64_t v38 = v9 >> 3;
              do
              {
                unint64_t v12 = v10
                    + *(unsigned int *)(*(void *)(v39 + 8 * v4) + 76)
                    + ((uint64_t)(*(void *)(*(void *)(v39 + 8 * v4) + 8) - **(void **)(v39 + 8 * v4)) >> 3) * v40;
                uint64_t v13 = a2[9];
                if (0xAAAAAAAAAAAAAAABLL * ((a2[10] - v13) >> 2) <= v12) {
                  sub_66748();
                }
                uint64_t v14 = v13 + 12 * v12;
                uint64_t v41 = __ROR8__(*(void *)v14, 32);
                unint64_t v15 = *(unsigned int *)(v14 + 8);
                uint64_t v42 = &v41;
                uint64_t v16 = sub_BDF338(a3, &v41, (uint64_t)&unk_20F06E0, &v42);
                uint64_t v17 = v16[3];
                if (v15 >= (v16[4] - v17) >> 3) {
                  operator new();
                }
                unint64_t v18 = *(char ***)(v17 + 8 * v15);
                float v20 = v18[1];
                unint64_t v19 = (unint64_t)v18[2];
                if ((unint64_t)v20 < v19)
                {
                  *(void *)float v20 = v35;
                  *((_DWORD *)v20 + 2) = v40;
                  uint8x8_t v11 = v20 + 12;
                }
                else
                {
                  float v21 = *v18;
                  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - *v18) >> 2);
                  unint64_t v23 = v22 + 1;
                  if (v22 + 1 > 0x1555555555555555) {
                    sub_2E00();
                  }
                  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v21) >> 2);
                  if (2 * v24 > v23) {
                    unint64_t v23 = 2 * v24;
                  }
                  if (v24 >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v25 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v25 = v23;
                  }
                  if (v25 > 0x1555555555555555) {
                    sub_188D718();
                  }
                  unint64_t v26 = (char *)operator new(12 * v25);
                  uint64_t v27 = &v26[12 * v22];
                  *(void *)uint64_t v27 = v35;
                  *((_DWORD *)v27 + 2) = v40;
                  for (unint64_t i = v27; v20 != v21; *((_DWORD *)i + 2) = v30)
                  {
                    uint64_t v29 = *(void *)(v20 - 12);
                    v20 -= 12;
                    int v30 = *((_DWORD *)v20 + 2);
                    *(void *)(i - 12) = v29;
                    i -= 12;
                  }
                  uint8x8_t v11 = v27 + 12;
                  *unint64_t v18 = i;
                  v18[1] = v27 + 12;
                  void v18[2] = &v26[12 * v25];
                  if (v21) {
                    operator delete(v21);
                  }
                }
                v18[1] = v11;
                ++v10;
                unint64_t v4 = v36;
              }
              while (v10 != v38);
            }
            ++v40;
          }
          while (v40 != v33);
        }
      }
      ++v4;
    }
    while (v4 != v32);
  }
}

void sub_BDF1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_BDF218()
{
}

void sub_BDF25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_BDF270(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v6 = (void *)*v2;
      uint64_t v7 = (void *)v2[3];
      if (v7)
      {
        uint64_t v8 = (void *)v2[4];
        unsigned int v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            uint64_t v10 = *--v8;
            uint64_t v9 = v10;
            *uint64_t v8 = 0;
            if (v10)
            {
              uint8x8_t v11 = *(void **)v9;
              if (*(void *)v9)
              {
                *(void *)(v9 + 8) = v11;
                operator delete(v11);
              }
              operator delete();
            }
          }
          while (v8 != v7);
          unsigned int v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_BDF338(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unint64_t v18 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x30uLL);
  void *v13 = 0;
  v13[1] = v9;
  uint64_t v19 = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v13[2] = v19;
  void v13[3] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v13 = *v23;
LABEL_69:
      void *v23 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v13 = *v18;
  *unint64_t v18 = v13;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_BDF698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BDF6AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BDF6AC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        unint64_t v4 = (void *)v2[4];
        unsigned int v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            uint64_t v7 = *--v4;
            uint64_t v6 = v7;
            *unint64_t v4 = 0;
            if (v7)
            {
              unint64_t v8 = *(void **)v6;
              if (*(void *)v6)
              {
                *(void *)(v6 + 8) = v8;
                operator delete(v8);
              }
              operator delete();
            }
          }
          while (v4 != v3);
          unsigned int v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

int *sub_BDF764@<X0>(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a5;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(unsigned char *)(a5 + 202) = 0;
  *(void *)(a5 + 192) = 0x3E4CCCCD3F000000;
  *(void *)(a5 + 204) = 0xFFFFFFFF00000000;
  *(void *)(a5 + 220) = 0;
  *(void *)(a5 + 212) = 0;
  *(_DWORD *)(a5 + 228) = 0;
  *(_OWORD *)(a5 + 176) = xmmword_20B98A0;
  *(_WORD *)(a5 + 200) = 256;
  v486 = (unint64_t **)(a5 + 264);
  *(void *)(a5 + 256) = 0;
  *(void *)(a5 + 264) = 0;
  *(_DWORD *)(a5 + 288) = 0;
  *(void *)(a5 + 272) = 0;
  *(void *)(a5 + 280) = 0;
  *(_OWORD *)(a5 + 232) = xmmword_20EB770;
  uint64_t v498 = a5 + 176;
  *(_DWORD *)(a5 + 248) = -1;
  __n128 result = (int *)malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(v8 + 256) = result;
  uint64_t v10 = *(void *)(v8 + 232);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      *(void *)__n128 result = *(void *)(v498 + 64);
      result[2] = *(_DWORD *)(v498 + 72);
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  v485 = (void *)a2[1];
  if ((void *)*a2 != v485)
  {
    unint64_t v12 = (void *)*a2;
    v503 = (void **)(v8 + 72);
    unsigned int v487 = a4;
    v497 = a1;
    while (1)
    {
      __n128 result = (int *)sub_94C794(a1[521] + 24, __ROR8__(*v12, 32), 0, "transfer graph");
      uint64_t v13 = (unsigned __int16 *)((char *)result - *result);
      if (*v13 >= 9u)
      {
        uint64_t v14 = v13[4];
        if (v14)
        {
          int v490 = *(int *)((char *)result + v14 + *(unsigned int *)((char *)result + v14));
          if (v490) {
            break;
          }
        }
      }
LABEL_6:
      if (++v12 == v485) {
        return result;
      }
    }
    unsigned int v15 = 0;
    v489 = v12;
LABEL_13:
    uint64_t v17 = (int *)sub_94C794(a1[521] + 24, __ROR8__(*v12, 32), 0, "transfer graph");
    unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
      float v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
    }
    else {
      float v20 = 0;
    }
    float v21 = (unsigned int *)sub_BE1E78(v20, v15);
    if (v21) {
      unint64_t v22 = v21[1] | ((unint64_t)*v21 << 32);
    }
    else {
      unint64_t v22 = 0xFFFFFFFFLL;
    }
    unint64_t v23 = __ROR8__(v22, 32);
    BOOL v24 = (int *)sub_49B168(a1[520] + 24, v23, 0, "transfer");
    unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    unint64_t v494 = v22;
    if (*v25 >= 7u && (unsigned __int16 v26 = v25[3]) != 0) {
      unint64_t v27 = *(unsigned int *)((char *)v24 + v26 + 4) | ((unint64_t)*(unsigned int *)((char *)v24 + v26) << 32);
    }
    else {
      unint64_t v27 = 0xFFFFFFFFLL;
    }
    unint64_t v28 = (int *)sub_49B168(a1[520] + 24, v23, 0, "transfer");
    uint8x8_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
    if (*v29 >= 9u && (unsigned __int16 v30 = v29[4]) != 0) {
      unint64_t v31 = *(unsigned int *)((char *)v28 + v30 + 4) | ((unint64_t)*(unsigned int *)((char *)v28 + v30) << 32);
    }
    else {
      unint64_t v31 = 0xFFFFFFFFLL;
    }
    unint64_t v495 = v23;
    unsigned int v496 = v15;
    uint64_t v32 = *(void *)(v8 + 232) - 1;
    uint64_t v33 = *(void *)(v8 + 256);
    int v35 = *(_DWORD *)(v8 + 240);
    int v34 = *(_DWORD *)(v8 + 244);
    uint64_t v500 = v31;
    if (a4)
    {
      unint64_t v36 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v31 ^ (v31 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v31 ^ (v31 >> 33))) >> 33));
      unint64_t v37 = v36 ^ (v36 >> 33);
      uint64_t v38 = v32 & v37;
      uint64_t v39 = (unsigned int *)(v33 + 12 * (v32 & v37));
      unsigned int v41 = *v39;
      unsigned int v40 = v39[1];
      if (v34 == v40 && v35 == v41) {
        goto LABEL_62;
      }
      if (!*(void *)(v8 + 216))
      {
        uint64_t v97 = 1;
        while (__PAIR64__(v40, v41) != v31)
        {
          uint64_t v38 = (v38 + v97) & v32;
          unsigned int v98 = (unsigned int *)(v33 + 12 * v38);
          unsigned int v41 = *v98;
          unsigned int v40 = v98[1];
          ++v97;
          if (v34 == v40 && v35 == v41) {
            goto LABEL_62;
          }
        }
LABEL_121:
        if (v38 != -1)
        {
          uint64_t v100 = v33 + 12 * v38;
          unsigned int v101 = *(_DWORD *)(v100 + 8);
          unsigned int v90 = (unsigned int *)(v100 + 8);
          unsigned int v499 = v101;
          if (v101 != -1) {
            goto LABEL_157;
          }
          goto LABEL_142;
        }
        uint64_t v43 = -1;
        goto LABEL_63;
      }
      uint64_t v43 = -1;
      uint64_t v44 = 1;
      do
      {
        if (*(_DWORD *)(v8 + 212) == v40 && *(_DWORD *)(v8 + 208) == v41)
        {
          if (v43 == -1) {
            uint64_t v43 = v38;
          }
        }
        else if (__PAIR64__(v40, v41) == v31)
        {
          goto LABEL_121;
        }
        uint64_t v38 = (v38 + v44) & v32;
        unsigned int v45 = (unsigned int *)(v33 + 12 * v38);
        unsigned int v41 = *v45;
        unsigned int v40 = v45[1];
        ++v44;
      }
      while (v34 != v40 || v35 != v41);
      if (v43 == -1) {
LABEL_62:
      }
        uint64_t v43 = v38;
LABEL_63:
      if (sub_BE1FD8(v498, 1))
      {
        unint64_t v506 = v31;
        int v507 = -1;
        uint64_t v58 = *(void *)(v8 + 232) - 1;
        uint64_t v59 = *(void *)(v8 + 256);
        int v61 = *(_DWORD *)(v8 + 240);
        int v60 = *(_DWORD *)(v8 + 244);
        uint64_t v62 = v58 & v37;
        uint64_t v63 = (unsigned int *)(v59 + 12 * (v58 & v37));
        unsigned int v65 = *v63;
        unsigned int v64 = v63[1];
        if (v60 == v64 && v61 == v65)
        {
LABEL_140:
          uint64_t v67 = v62;
          goto LABEL_141;
        }
        if (*(void *)(v8 + 216))
        {
          uint64_t v67 = -1;
          uint64_t v68 = 1;
          do
          {
            if (*(_DWORD *)(v8 + 212) == v64 && *(_DWORD *)(v8 + 208) == v65)
            {
              if (v67 == -1) {
                uint64_t v67 = v62;
              }
            }
            else if (__PAIR64__(v64, v65) == v31)
            {
              goto LABEL_246;
            }
            uint64_t v62 = (v62 + v68) & v58;
            int v69 = (unsigned int *)(v59 + 12 * v62);
            unsigned int v65 = *v69;
            unsigned int v64 = v69[1];
            ++v68;
          }
          while (v60 != v64 || v61 != v65);
          if (v67 == -1) {
            goto LABEL_140;
          }
LABEL_141:
          sub_BE22B8(v498, (uint64_t *)&v506, v67, v505);
          unsigned int v90 = (unsigned int *)(*(void *)&v505[8] + 8);
          unsigned int v499 = *(_DWORD *)(*(void *)&v505[8] + 8);
          if (v499 != -1) {
            goto LABEL_157;
          }
          goto LABEL_142;
        }
        uint64_t v187 = 1;
        while (__PAIR64__(v64, v65) != v31)
        {
          uint64_t v62 = (v62 + v187) & v58;
          uint64_t v188 = (unsigned int *)(v59 + 12 * v62);
          unsigned int v65 = *v188;
          unsigned int v64 = v188[1];
          ++v187;
          if (v60 == v64 && v61 == v65) {
            goto LABEL_140;
          }
        }
LABEL_246:
        if (v62 == -1)
        {
          uint64_t v67 = -1;
          goto LABEL_141;
        }
        uint64_t v190 = v59 + 12 * v62;
        unsigned int v191 = *(_DWORD *)(v190 + 8);
        unsigned int v90 = (unsigned int *)(v190 + 8);
        unsigned int v499 = v191;
        if (v191 != -1) {
          goto LABEL_157;
        }
LABEL_142:
        unsigned int v113 = *(_DWORD *)(v8 + 288);
        *(_DWORD *)(v8 + 288) = v113 + 1;
        unsigned int *v90 = v113;
        unsigned int v115 = *(unint64_t **)(v8 + 272);
        unint64_t v114 = *(void *)(v8 + 280);
        if ((unint64_t)v115 < v114)
        {
          *unsigned int v115 = v31;
          uint64_t v116 = (uint64_t)(v115 + 1);
          goto LABEL_287;
        }
        uint64_t v117 = *v486;
        uint64_t v118 = (char *)v115 - (char *)*v486;
        uint64_t v119 = v118 >> 3;
        unint64_t v120 = (v118 >> 3) + 1;
        if (!(v120 >> 61))
        {
          uint64_t v121 = v114 - (void)v117;
          if (v121 >> 2 > v120) {
            unint64_t v120 = v121 >> 2;
          }
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v120;
          }
          if (!v122)
          {
            uint64_t v123 = 0;
            unint64_t v124 = (void *)(8 * v119);
            *(void *)(8 * v119) = v500;
            uint64_t v116 = 8 * v119 + 8;
            if (v115 == v117) {
              goto LABEL_285;
            }
LABEL_270:
            unint64_t v200 = (char *)(v115 - 1) - (char *)v117;
            if (v200 < 0x58) {
              goto LABEL_642;
            }
            if ((unint64_t)((char *)v115 - &v123[v118]) < 0x20) {
              goto LABEL_642;
            }
            uint64_t v201 = (v200 >> 3) + 1;
            uint64_t v202 = 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
            int v203 = &v115[v202 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v124 = (void *)((char *)v124 - v202);
            uint64_t v204 = &v123[8 * v119 - 16];
            uint64_t v205 = v115 - 2;
            uint64_t v206 = v201 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v207 = *(_OWORD *)v205;
              *(v204 - 1) = *((_OWORD *)v205 - 1);
              *uint64_t v204 = v207;
              v204 -= 2;
              v205 -= 4;
              v206 -= 4;
            }
            while (v206);
            unsigned int v115 = v203;
            if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_642:
              do
              {
                uint64_t v208 = *--v115;
                *--unint64_t v124 = v208;
              }
              while (v115 != v117);
            }
LABEL_284:
            unsigned int v115 = *v486;
            goto LABEL_285;
          }
          if (!(v122 >> 61))
          {
            uint64_t v123 = operator new(8 * v122);
            unint64_t v124 = &v123[8 * v119];
            *unint64_t v124 = v500;
            uint64_t v116 = (uint64_t)(v124 + 1);
            if (v115 == v117) {
              goto LABEL_285;
            }
            goto LABEL_270;
          }
LABEL_638:
          sub_188D718();
        }
        goto LABEL_637;
      }
      uint64_t v72 = *(void *)(v8 + 216);
      uint64_t v71 = *(void *)(v8 + 224);
      if ((unint64_t)(v71 - v72) < 0x1555555555555555)
      {
        uint64_t v73 = *(void *)(v8 + 256);
        if (v72
          && ((uint64_t v74 = (_DWORD *)(v73 + 12 * v43), *(_DWORD *)(v8 + 212) == v74[1])
            ? (BOOL v75 = *(_DWORD *)(v8 + 208) == *v74)
            : (BOOL v75 = 0),
              v75))
        {
          *(void *)(v8 + 216) = v72 - 1;
        }
        else
        {
          *(void *)(v8 + 224) = v71 + 1;
        }
        uint64_t v107 = v73 + 12 * v43;
        *(void *)uint64_t v107 = v31;
        *(_DWORD *)(v107 + 8) = -1;
        uint64_t v108 = *(void *)(v8 + 256) + 12 * v43;
        unsigned int v109 = *(_DWORD *)(v108 + 8);
        unsigned int v90 = (unsigned int *)(v108 + 8);
        unsigned int v499 = v109;
        if (v109 != -1) {
          goto LABEL_157;
        }
        goto LABEL_142;
      }
LABEL_634:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "insert overflow");
    }
    unint64_t v47 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v27 ^ (v27 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v27 ^ (v27 >> 33))) >> 33));
    unint64_t v48 = v47 ^ (v47 >> 33);
    uint64_t v49 = v32 & v48;
    uint64_t v50 = (unsigned int *)(v33 + 12 * (v32 & v48));
    unsigned int v52 = *v50;
    unsigned int v51 = v50[1];
    if (v34 != v51 || v35 != v52)
    {
      if (!*(void *)(v8 + 216))
      {
        uint64_t v102 = 1;
        while (__PAIR64__(v51, v52) != v27)
        {
          uint64_t v49 = (v49 + v102) & v32;
          unsigned int v103 = (unsigned int *)(v33 + 12 * v49);
          unsigned int v52 = *v103;
          unsigned int v51 = v103[1];
          ++v102;
          if (v34 == v51 && v35 == v52) {
            goto LABEL_88;
          }
        }
LABEL_130:
        if (v49 != -1)
        {
          uint64_t v105 = v33 + 12 * v49;
          unsigned int v106 = *(_DWORD *)(v105 + 8);
          unsigned int v90 = (unsigned int *)(v105 + 8);
          unsigned int v499 = v106;
          if (v106 != -1) {
            goto LABEL_157;
          }
          goto LABEL_174;
        }
        uint64_t v54 = -1;
LABEL_89:
        if (sub_BE1FD8(v498, 1))
        {
          unint64_t v506 = v27;
          int v507 = -1;
          uint64_t v76 = *(void *)(v8 + 232) - 1;
          uint64_t v77 = *(void *)(v8 + 256);
          int v79 = *(_DWORD *)(v8 + 240);
          int v78 = *(_DWORD *)(v8 + 244);
          uint64_t v80 = v76 & v48;
          uint64_t v81 = (unsigned int *)(v77 + 12 * (v76 & v48));
          unsigned int v83 = *v81;
          unsigned int v82 = v81[1];
          if (v78 == v82 && v79 == v83)
          {
LABEL_155:
            uint64_t v85 = v80;
            goto LABEL_156;
          }
          if (!*(void *)(v8 + 216))
          {
            uint64_t v192 = 1;
            while (__PAIR64__(v82, v83) != v27)
            {
              uint64_t v80 = (v80 + v192) & v76;
              uint64_t v193 = (unsigned int *)(v77 + 12 * v80);
              unsigned int v83 = *v193;
              unsigned int v82 = v193[1];
              ++v192;
              if (v78 == v82 && v79 == v83) {
                goto LABEL_155;
              }
            }
            if (v80 != -1) {
              goto LABEL_106;
            }
            goto LABEL_256;
          }
          uint64_t v85 = -1;
          uint64_t v86 = 1;
          do
          {
            if (*(_DWORD *)(v8 + 212) == v82 && *(_DWORD *)(v8 + 208) == v83)
            {
              if (v85 == -1) {
                uint64_t v85 = v80;
              }
            }
            else if (__PAIR64__(v82, v83) == v27)
            {
              if (v80 != -1)
              {
LABEL_106:
                uint64_t v89 = v77 + 12 * v80;
                unsigned int v91 = *(_DWORD *)(v89 + 8);
                unsigned int v90 = (unsigned int *)(v89 + 8);
                unsigned int v499 = v91;
                if (v91 != -1) {
                  goto LABEL_157;
                }
                goto LABEL_174;
              }
LABEL_256:
              uint64_t v85 = -1;
              goto LABEL_156;
            }
            uint64_t v80 = (v80 + v86) & v76;
            uint64_t v87 = (unsigned int *)(v77 + 12 * v80);
            unsigned int v83 = *v87;
            unsigned int v82 = v87[1];
            ++v86;
          }
          while (v78 != v82 || v79 != v83);
          if (v85 == -1) {
            goto LABEL_155;
          }
LABEL_156:
          sub_BE22B8(v498, (uint64_t *)&v506, v85, v505);
          unsigned int v90 = (unsigned int *)(*(void *)&v505[8] + 8);
          unsigned int v499 = *(_DWORD *)(*(void *)&v505[8] + 8);
          if (v499 == -1) {
            goto LABEL_174;
          }
LABEL_157:
          uint64_t v125 = *(void *)(v8 + 232) - 1;
          uint64_t v126 = *(void *)(v8 + 256);
          int v128 = *(_DWORD *)(v8 + 240);
          int v127 = *(_DWORD *)(v8 + 244);
          if (a4) {
            goto LABEL_158;
          }
LABEL_288:
          unint64_t v218 = 0xC4CEB9FE1A85EC53
               * ((0xFF51AFD7ED558CCDLL * (v31 ^ (v31 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v31 ^ (v31 >> 33))) >> 33));
          unint64_t v219 = v218 ^ (v218 >> 33);
          uint64_t v220 = v125 & v219;
          BOOL v221 = (unsigned int *)(v126 + 12 * (v125 & v219));
          unsigned int v223 = *v221;
          unsigned int v222 = v221[1];
          unint64_t v224 = HIDWORD(v31);
          if (v127 == v222 && v128 == v223)
          {
LABEL_305:
            uint64_t v226 = v220;
            goto LABEL_306;
          }
          if (!*(void *)(v8 + 216))
          {
            uint64_t v248 = 1;
            while (__PAIR64__(v222, v223) != v31)
            {
              uint64_t v220 = (v220 + v248) & v125;
              long long v249 = (unsigned int *)(v126 + 12 * v220);
              unsigned int v223 = *v249;
              unsigned int v222 = v249[1];
              ++v248;
              if (v127 == v222 && v128 == v223) {
                goto LABEL_305;
              }
            }
LABEL_337:
            if (v220 == -1)
            {
              uint64_t v226 = -1;
              goto LABEL_306;
            }
            uint64_t v251 = v126 + 12 * v220;
            unsigned int v252 = *(_DWORD *)(v251 + 8);
            signed int v170 = (unsigned int *)(v251 + 8);
            unsigned int v169 = v252;
            if (v252 == -1) {
              goto LABEL_346;
            }
            goto LABEL_360;
          }
          uint64_t v226 = -1;
          uint64_t v227 = 1;
          do
          {
            if (*(_DWORD *)(v8 + 212) == v222 && *(_DWORD *)(v8 + 208) == v223)
            {
              if (v226 == -1) {
                uint64_t v226 = v220;
              }
            }
            else if (__PAIR64__(v222, v223) == v31)
            {
              goto LABEL_337;
            }
            uint64_t v220 = (v220 + v227) & v125;
            int v228 = (unsigned int *)(v126 + 12 * v220);
            unsigned int v223 = *v228;
            unsigned int v222 = v228[1];
            ++v227;
          }
          while (v127 != v222 || v128 != v223);
          if (v226 == -1) {
            goto LABEL_305;
          }
LABEL_306:
          if (!sub_BE1FD8(v498, 1))
          {
            uint64_t v244 = *(void *)(v8 + 216);
            uint64_t v243 = *(void *)(v8 + 224);
            unint64_t v31 = v500;
            if ((unint64_t)(v243 - v244) < 0x1555555555555555)
            {
              uint64_t v245 = *(void *)(v8 + 256);
              if (v244
                && ((long long v246 = (_DWORD *)(v245 + 12 * v226), *(_DWORD *)(v8 + 212) == v246[1])
                  ? (BOOL v247 = *(_DWORD *)(v8 + 208) == *v246)
                  : (BOOL v247 = 0),
                    v247))
              {
                *(void *)(v8 + 216) = v244 - 1;
              }
              else
              {
                *(void *)(v8 + 224) = v243 + 1;
              }
              uint64_t v253 = v245 + 12 * v226;
              *(void *)uint64_t v253 = v500;
              *(_DWORD *)(v253 + 8) = -1;
              uint64_t v254 = *(void *)(v8 + 256) + 12 * v226;
              unsigned int v255 = *(_DWORD *)(v254 + 8);
              signed int v170 = (unsigned int *)(v254 + 8);
              unsigned int v169 = v255;
              if (v255 == -1) {
                goto LABEL_346;
              }
              goto LABEL_360;
            }
LABEL_635:
            v484 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v484, "insert overflow");
          }
          unint64_t v31 = v500;
          unint64_t v506 = v500;
          int v507 = -1;
          uint64_t v230 = *(void *)(v8 + 232) - 1;
          uint64_t v231 = *(void *)(v8 + 256);
          int v233 = *(_DWORD *)(v8 + 240);
          int v232 = *(_DWORD *)(v8 + 244);
          uint64_t v234 = v230 & v219;
          uint64_t v235 = (int *)(v231 + 12 * (v230 & v219));
          int v237 = *v235;
          int v236 = v235[1];
          if (v232 == v236 && v233 == v237) {
            goto LABEL_344;
          }
          if (!*(void *)(v8 + 216))
          {
            uint64_t v437 = 1;
            while (v237 != v500 || v236 != v224)
            {
              uint64_t v234 = (v234 + v437) & v230;
              v438 = (int *)(v231 + 12 * v234);
              int v237 = *v438;
              int v236 = v438[1];
              ++v437;
              if (v232 == v236 && v233 == v237) {
                goto LABEL_344;
              }
            }
LABEL_576:
            if (v234 == -1)
            {
              uint64_t v239 = -1;
              goto LABEL_345;
            }
            uint64_t v440 = v231 + 12 * v234;
            unsigned int v441 = *(_DWORD *)(v440 + 8);
            signed int v170 = (unsigned int *)(v440 + 8);
            unsigned int v169 = v441;
            if (v441 != -1) {
              goto LABEL_360;
            }
LABEL_346:
            unsigned int v256 = *(_DWORD *)(v8 + 288);
            *(_DWORD *)(v8 + 288) = v256 + 1;
            *signed int v170 = v256;
            __int16 v177 = *(unint64_t **)(v8 + 272);
            unint64_t v257 = *(void *)(v8 + 280);
            if ((unint64_t)v177 < v257)
            {
              *__int16 v177 = v31;
              uint64_t v178 = (uint64_t)(v177 + 1);
              goto LABEL_359;
            }
            unint64_t v258 = *v486;
            uint64_t v259 = (char *)v177 - (char *)*v486;
            uint64_t v260 = v259 >> 3;
            unint64_t v261 = (v259 >> 3) + 1;
            if (!(v261 >> 61))
            {
              uint64_t v262 = v257 - (void)v258;
              if (v262 >> 2 > v261) {
                unint64_t v261 = v262 >> 2;
              }
              if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v263 = v261;
              }
              if (!v263)
              {
                long long v264 = 0;
                long long v265 = (uint64_t *)(8 * v260);
                *(void *)(8 * v260) = v500;
                uint64_t v178 = 8 * v260 + 8;
                if (v177 == v258) {
                  goto LABEL_357;
                }
                goto LABEL_592;
              }
              if (!(v263 >> 61))
              {
                long long v264 = operator new(8 * v263);
                long long v265 = (uint64_t *)&v264[8 * v260];
                *long long v265 = v500;
                uint64_t v178 = (uint64_t)(v265 + 1);
                if (v177 == v258)
                {
LABEL_357:
                  *(void *)(v8 + 264) = v265;
                  *(void *)(v8 + 272) = v178;
                  *(void *)(v8 + 280) = &v264[8 * v263];
                  if (!v177) {
                    goto LABEL_359;
                  }
LABEL_358:
                  operator delete(v177);
                  goto LABEL_359;
                }
LABEL_592:
                unint64_t v451 = (char *)(v177 - 1) - (char *)v258;
                if (v451 < 0x58) {
                  goto LABEL_643;
                }
                if ((unint64_t)((char *)v177 - &v264[v259]) < 0x20) {
                  goto LABEL_643;
                }
                uint64_t v452 = (v451 >> 3) + 1;
                uint64_t v453 = 8 * (v452 & 0x3FFFFFFFFFFFFFFCLL);
                v454 = &v177[v453 / 0xFFFFFFFFFFFFFFF8];
                long long v265 = (uint64_t *)((char *)v265 - v453);
                v455 = &v264[8 * v260 - 16];
                v456 = v177 - 2;
                uint64_t v457 = v452 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v458 = *(_OWORD *)v456;
                  *(v455 - 1) = *((_OWORD *)v456 - 1);
                  _OWORD *v455 = v458;
                  v455 -= 2;
                  v456 -= 4;
                  v457 -= 4;
                }
                while (v457);
                __int16 v177 = v454;
                if (v452 != (v452 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_643:
                  do
                  {
                    uint64_t v459 = *--v177;
                    *--long long v265 = v459;
                  }
                  while (v177 != v258);
                }
                __int16 v177 = *v486;
                *(void *)(v8 + 264) = v265;
                *(void *)(v8 + 272) = v178;
                *(void *)(v8 + 280) = &v264[8 * v263];
                if (!v177) {
                  goto LABEL_359;
                }
                goto LABEL_358;
              }
LABEL_639:
              sub_188D718();
            }
LABEL_636:
            sub_2E00();
          }
          uint64_t v239 = -1;
          uint64_t v240 = 1;
          do
          {
            if (*(_DWORD *)(v8 + 212) == v236 && *(_DWORD *)(v8 + 208) == v237)
            {
              if (v239 == -1) {
                uint64_t v239 = v234;
              }
            }
            else if (v237 == v500 && v236 == v224)
            {
              goto LABEL_576;
            }
            uint64_t v234 = (v234 + v240) & v230;
            unsigned __int8 v241 = (int *)(v231 + 12 * v234);
            int v237 = *v241;
            int v236 = v241[1];
            ++v240;
          }
          while (v232 != v236 || v233 != v237);
          if (v239 == -1) {
LABEL_344:
          }
            uint64_t v239 = v234;
LABEL_345:
          sub_BE22B8(v498, (uint64_t *)&v506, v239, v505);
          unint64_t v31 = v500;
          signed int v170 = (unsigned int *)(*(void *)&v505[8] + 8);
          unsigned int v169 = *(_DWORD *)(*(void *)&v505[8] + 8);
          if (v169 == -1) {
            goto LABEL_346;
          }
LABEL_360:
          uint64_t v266 = a4;
          *(_DWORD *)v505 = v169;
          *(_OWORD *)&v505[4] = xmmword_20F00B0;
          *(void *)&v505[20] = 0xFFFFFFFFLL;
          unsigned int v267 = v499;
          if (v169 > v499) {
            unsigned int v267 = v169;
          }
          long long v269 = *(char **)(v8 + 72);
          long long v268 = *(char **)(v8 + 80);
          uint64_t v270 = v268 - v269;
          unint64_t v271 = (unint64_t)(v268 - v269) >> 3;
          if (v267 < v271) {
            goto LABEL_531;
          }
          unint64_t v272 = v267 + 1;
          unint64_t v491 = v272;
          if (v272 < v271)
          {
            unsigned int v273 = v267 + 1;
            unint64_t v501 = (unint64_t)(v268 - v269) >> 3;
            while (1)
            {
              unint64_t v274 = v273;
              __n128 v276 = *(char **)(v8 + 72);
              uint64_t v275 = *(char **)(v8 + 80);
              unint64_t v277 = (v275 - v276) >> 3;
              if (v277 > v273) {
                goto LABEL_390;
              }
              unint64_t v278 = v273 + 1;
              unint64_t v279 = v278 - v277;
              if (v278 > v277) {
                break;
              }
              if (v278 < v277)
              {
                uint64_t v275 = &v276[8 * v278];
                *(void *)(v8 + 80) = v275;
              }
LABEL_390:
              uint64_t v299 = *(void *)(v8 + 96);
              unsigned int v300 = *(_DWORD *)&v276[8 * v274];
              unint64_t v301 = (v275 - v276) >> 3;
              if (v301 <= v274)
              {
                unint64_t v303 = (v274 + 1);
                unint64_t v304 = v303 - v301;
                if (v303 > v301)
                {
                  uint64_t v305 = *(void *)(v8 + 88);
                  if (v304 <= (v305 - (uint64_t)v275) >> 3)
                  {
                    bzero(v275, 8 * v304);
                    *(void *)(v8 + 80) = &v275[8 * v304];
                  }
                  else
                  {
                    uint64_t v306 = (v275 - v276) >> 3;
                    unint64_t v307 = v306 + v304;
                    if ((v306 + v304) >> 61) {
                      goto LABEL_630;
                    }
                    uint64_t v308 = v305 - (void)v276;
                    if (v308 >> 2 > v307) {
                      unint64_t v307 = v308 >> 2;
                    }
                    if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v309 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v309 = v307;
                    }
                    unint64_t v492 = v309;
                    if (v309)
                    {
                      if (v309 >> 61) {
                        goto LABEL_629;
                      }
                      v310 = operator new(8 * v309);
                    }
                    else
                    {
                      v310 = 0;
                    }
                    size_t v311 = 8 * v304;
                    v312 = &v310[8 * v306];
                    size_t v313 = v311;
                    bzero(v312, v311);
                    if (v275 == v276)
                    {
                      v320 = &v310[8 * v492];
                      uint64_t v8 = a5;
                      *(void *)(a5 + 72) = v312;
                      *(void *)(a5 + 80) = &v312[v313];
                      *(void *)(a5 + 88) = v320;
                      if (v275) {
                        goto LABEL_413;
                      }
                    }
                    else
                    {
                      unint64_t v314 = v275 - 8 - v276;
                      if (v314 < 0x58 || (unint64_t)(v276 - v310) < 0x20)
                      {
                        v315 = v275;
                        v316 = &v310[8 * v306];
                        unint64_t v317 = v492;
                        goto LABEL_411;
                      }
                      uint64_t v321 = (v314 >> 3) + 1;
                      uint64_t v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
                      v315 = &v275[-v322];
                      v316 = &v312[-v322];
                      v323 = &v310[8 * v306 - 16];
                      v324 = (long long *)(v275 - 16);
                      uint64_t v325 = v321 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v326 = *v324;
                        *(v323 - 1) = *(v324 - 1);
                        _OWORD *v323 = v326;
                        v323 -= 2;
                        v324 -= 2;
                        v325 -= 4;
                      }
                      while (v325);
                      unint64_t v317 = v492;
                      if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_411:
                          uint64_t v318 = *((void *)v315 - 1);
                          v315 -= 8;
                          *((void *)v316 - 1) = v318;
                          v316 -= 8;
                        }
                        while (v315 != v276);
                      }
                      uint64_t v275 = (char *)*v503;
                      v319 = &v310[8 * v317];
                      uint64_t v8 = a5;
                      *(void *)(a5 + 72) = v316;
                      *(void *)(a5 + 80) = &v312[v313];
                      *(void *)(a5 + 88) = v319;
                      if (v275) {
LABEL_413:
                      }
                        operator delete(v275);
                    }
                  }
                  __n128 v276 = *(char **)(v8 + 72);
                  uint64_t v302 = *(void *)(v8 + 96);
                  goto LABEL_415;
                }
                if (v303 < v301) {
                  *(void *)(v8 + 80) = &v276[8 * v303];
                }
              }
              uint64_t v302 = v299;
LABEL_415:
              sub_BE2CD4(v503, v274, (char *)(v299 + 28 * v300), (unsigned char *)(v302 + 28 * *(unsigned int *)&v276[8 * v274 + 4]));
              unsigned int v273 = v274 + 1;
              uint64_t v8 = a5;
              if (v274 + 1 == v501)
              {
                long long v269 = *(char **)(a5 + 72);
                long long v268 = *(char **)(a5 + 80);
                uint64_t v270 = v268 - v269;
                uint64_t v266 = v487;
                unint64_t v272 = v491;
                goto LABEL_423;
              }
            }
            uint64_t v280 = *(void *)(v8 + 88);
            if (v279 <= (v280 - (uint64_t)v275) >> 3)
            {
              bzero(*(void **)(v8 + 80), 8 * v279);
              v288 = &v275[8 * v279];
              *(void *)(v8 + 80) = v288;
              goto LABEL_389;
            }
            uint64_t v281 = v280 - (void)v276;
            if (v281 >> 2 > v278) {
              unint64_t v278 = v281 >> 2;
            }
            if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v282 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v282 = v278;
            }
            if (v282 >> 61) {
              goto LABEL_629;
            }
            v283 = operator new(8 * v282);
            uint64_t v284 = 8 * v279;
            v285 = &v283[8 * v277];
            bzero(v285, 8 * v279);
            if (v275 == v276)
            {
              v289 = &v283[8 * v282];
              v288 = &v285[v284];
              uint64_t v8 = a5;
              *(void *)(a5 + 72) = v285;
              *(void *)(a5 + 80) = &v285[v284];
              *(void *)(a5 + 88) = v289;
              if (!v275) {
                goto LABEL_389;
              }
              goto LABEL_388;
            }
            unint64_t v286 = v275 - 8 - v276;
            if (v286 >= 0x58)
            {
              v287 = &v283[8 * v277];
              if ((unint64_t)(v276 - v283) >= 0x20)
              {
                uint64_t v290 = (v286 >> 3) + 1;
                uint64_t v291 = 8 * (v290 & 0x3FFFFFFFFFFFFFFCLL);
                v292 = &v275[-v291];
                v287 = &v285[-v291];
                v293 = &v283[8 * v277 - 16];
                v294 = (long long *)(v275 - 16);
                uint64_t v295 = v290 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v296 = *v294;
                  *(v293 - 1) = *(v294 - 1);
                  _OWORD *v293 = v296;
                  v293 -= 2;
                  v294 -= 2;
                  v295 -= 4;
                }
                while (v295);
                uint64_t v275 = v292;
                if (v290 == (v290 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_387:
                  uint64_t v275 = v276;
                  v298 = &v283[8 * v282];
                  v288 = &v285[v284];
                  uint64_t v8 = a5;
                  *(void *)(a5 + 72) = v287;
                  *(void *)(a5 + 80) = &v285[v284];
                  *(void *)(a5 + 88) = v298;
                  if (v276)
                  {
LABEL_388:
                    operator delete(v275);
                    v288 = *(char **)(v8 + 80);
                  }
LABEL_389:
                  __n128 v276 = (char *)*v503;
                  uint64_t v275 = v288;
                  goto LABEL_390;
                }
              }
            }
            else
            {
              v287 = &v283[8 * v277];
            }
            do
            {
              uint64_t v297 = *((void *)v275 - 1);
              v275 -= 8;
              *((void *)v287 - 1) = v297;
              v287 -= 8;
            }
            while (v275 != v276);
            goto LABEL_387;
          }
LABEL_423:
          unint64_t v327 = v270 >> 3;
          unint64_t v328 = v272 - v327;
          if (v272 <= v327)
          {
            if (v272 >= v327) {
              goto LABEL_446;
            }
            v335 = &v269[8 * v272];
          }
          else
          {
            uint64_t v329 = *(void *)(v8 + 88);
            if (v328 > (v329 - (uint64_t)v268) >> 3)
            {
              uint64_t v330 = (v268 - v269) >> 3;
              unint64_t v331 = v330 + v328;
              if ((v330 + v328) >> 61) {
                goto LABEL_630;
              }
              uint64_t v332 = v329 - (void)v269;
              if (v332 >> 2 > v331) {
                unint64_t v331 = v332 >> 2;
              }
              if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v333 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v333 = v331;
              }
              if (v333)
              {
                if (v333 >> 61) {
                  goto LABEL_629;
                }
                uint64_t v266 = v487;
                v334 = (char *)operator new(8 * v333);
              }
              else
              {
                v334 = 0;
                uint64_t v266 = v487;
              }
              size_t v337 = 8 * v328;
              v338 = &v334[8 * v330];
              bzero(v338, v337);
              if (v268 == v269)
              {
                *(void *)(v8 + 72) = v338;
                *(void *)(v8 + 80) = &v338[v337];
                *(void *)(v8 + 88) = &v334[8 * v333];
                unint64_t v272 = v491;
                if (!v268) {
                  goto LABEL_446;
                }
                goto LABEL_445;
              }
              unint64_t v339 = v268 - 8 - v269;
              if (v339 >= 0x58 && (unint64_t)(v269 - v334) >= 0x20)
              {
                uint64_t v469 = (v339 >> 3) + 1;
                uint64_t v470 = 8 * (v469 & 0x3FFFFFFFFFFFFFFCLL);
                v340 = &v268[-v470];
                v341 = &v338[-v470];
                v471 = &v334[8 * v330 - 16];
                v472 = v268 - 16;
                uint64_t v473 = v469 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v474 = *(_OWORD *)v472;
                  *((_OWORD *)v471 - 1) = *((_OWORD *)v472 - 1);
                  *(_OWORD *)v471 = v474;
                  v471 -= 32;
                  v472 -= 32;
                  v473 -= 4;
                }
                while (v473);
                if (v469 == (v469 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_444:
                  long long v268 = (char *)*v503;
                  *(void *)(v8 + 72) = v341;
                  *(void *)(v8 + 80) = &v338[v337];
                  *(void *)(v8 + 88) = &v334[8 * v333];
                  unint64_t v272 = v491;
                  if (v268) {
LABEL_445:
                  }
                    operator delete(v268);
LABEL_446:
                  v344 = *(char **)v8;
                  v343 = *(char **)(v8 + 8);
                  uint64_t v345 = (uint64_t)&v343[-*(void *)v8];
                  unint64_t v502 = (unint64_t)v345 >> 3;
                  if (v272 >= ((unint64_t)v345 >> 3)) {
                    goto LABEL_506;
                  }
                  unsigned int v346 = v272;
                  while (1)
                  {
                    unint64_t v347 = v346;
                    v349 = *(char **)v8;
                    v348 = *(char **)(v8 + 8);
                    uint64_t v350 = (uint64_t)&v348[-*(void *)v8];
                    unint64_t v351 = v350 >> 3;
                    if (v350 >> 3 > (unint64_t)v346) {
                      goto LABEL_473;
                    }
                    unint64_t v352 = v346 + 1;
                    unint64_t v353 = v352 - v351;
                    if (v352 > v351) {
                      break;
                    }
                    if (v352 < v351)
                    {
                      v348 = &v349[8 * v352];
                      *(void *)(v8 + 8) = v348;
                    }
LABEL_473:
                    uint64_t v373 = *(void *)(v8 + 24);
                    unsigned int v374 = *(_DWORD *)&v349[8 * v347];
                    unint64_t v375 = (v348 - v349) >> 3;
                    if (v375 <= v347)
                    {
                      unint64_t v377 = (v347 + 1);
                      unint64_t v378 = v377 - v375;
                      if (v377 > v375)
                      {
                        uint64_t v379 = *(void *)(v8 + 16);
                        if (v378 <= (v379 - (uint64_t)v348) >> 3)
                        {
                          bzero(v348, 8 * v378);
                          *(void *)(v8 + 8) = &v348[8 * v378];
                        }
                        else
                        {
                          uint64_t v380 = (v348 - v349) >> 3;
                          unint64_t v381 = v380 + v378;
                          if ((v380 + v378) >> 61) {
                            goto LABEL_630;
                          }
                          uint64_t v382 = v379 - (void)v349;
                          if (v382 >> 2 > v381) {
                            unint64_t v381 = v382 >> 2;
                          }
                          if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v383 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v383 = v381;
                          }
                          unint64_t v493 = v383;
                          if (v383)
                          {
                            if (v383 >> 61) {
                              goto LABEL_629;
                            }
                            v384 = operator new(8 * v383);
                          }
                          else
                          {
                            v384 = 0;
                          }
                          size_t v385 = 8 * v378;
                          v386 = &v384[8 * v380];
                          size_t v387 = v385;
                          bzero(v386, v385);
                          if (v348 == v349)
                          {
                            *(void *)a5 = v386;
                            *(void *)(a5 + 8) = &v386[v387];
                            *(void *)(a5 + 16) = &v384[8 * v493];
                            uint64_t v8 = a5;
                            if (v348) {
                              goto LABEL_496;
                            }
                          }
                          else
                          {
                            unint64_t v388 = v348 - 8 - v349;
                            if (v388 < 0x58 || (unint64_t)(v349 - v384) < 0x20)
                            {
                              v389 = v348;
                              v390 = &v384[8 * v380];
                              unint64_t v391 = v493;
                              goto LABEL_494;
                            }
                            uint64_t v393 = (v388 >> 3) + 1;
                            uint64_t v394 = 8 * (v393 & 0x3FFFFFFFFFFFFFFCLL);
                            v389 = &v348[-v394];
                            v390 = &v386[-v394];
                            v395 = &v384[8 * v380 - 16];
                            v396 = (long long *)(v348 - 16);
                            uint64_t v397 = v393 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v398 = *v396;
                              *(v395 - 1) = *(v396 - 1);
                              _OWORD *v395 = v398;
                              v395 -= 2;
                              v396 -= 2;
                              v397 -= 4;
                            }
                            while (v397);
                            unint64_t v391 = v493;
                            if (v393 != (v393 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_494:
                                uint64_t v392 = *((void *)v389 - 1);
                                v389 -= 8;
                                *((void *)v390 - 1) = v392;
                                v390 -= 8;
                              }
                              while (v389 != v349);
                            }
                            v348 = *(char **)a5;
                            *(void *)a5 = v390;
                            *(void *)(a5 + 8) = &v386[v387];
                            *(void *)(a5 + 16) = &v384[8 * v391];
                            uint64_t v8 = a5;
                            if (v348) {
LABEL_496:
                            }
                              operator delete(v348);
                          }
                        }
                        v349 = *(char **)v8;
                        uint64_t v376 = *(void *)(v8 + 24);
                        goto LABEL_498;
                      }
                      if (v377 < v375) {
                        *(void *)(v8 + 8) = &v349[8 * v377];
                      }
                    }
                    uint64_t v376 = v373;
LABEL_498:
                    sub_BE2CD4((void **)v8, v347, (char *)(v373 + 28 * v374), (unsigned char *)(v376 + 28 * *(unsigned int *)&v349[8 * v347 + 4]));
                    unsigned int v346 = v347 + 1;
                    uint64_t v8 = a5;
                    if (v347 + 1 == v502)
                    {
                      v344 = *(char **)a5;
                      v343 = *(char **)(a5 + 8);
                      uint64_t v345 = (uint64_t)&v343[-*(void *)a5];
                      uint64_t v266 = v487;
                      unint64_t v272 = v491;
LABEL_506:
                      unint64_t v399 = v345 >> 3;
                      unint64_t v400 = v272 - v399;
                      if (v272 <= v399)
                      {
                        if (v272 >= v399) {
                          goto LABEL_531;
                        }
                        v407 = &v344[8 * v272];
                      }
                      else
                      {
                        uint64_t v401 = *(void *)(v8 + 16);
                        if (v400 > (v401 - (uint64_t)v343) >> 3)
                        {
                          uint64_t v402 = (v343 - v344) >> 3;
                          unint64_t v403 = v402 + v400;
                          if ((v402 + v400) >> 61) {
LABEL_630:
                          }
                            sub_2E00();
                          uint64_t v404 = v401 - (void)v344;
                          if (v404 >> 2 > v403) {
                            unint64_t v403 = v404 >> 2;
                          }
                          if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v405 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v405 = v403;
                          }
                          if (v405)
                          {
                            if (!(v405 >> 61))
                            {
                              uint64_t v266 = v487;
                              v406 = operator new(8 * v405);
                              goto LABEL_524;
                            }
LABEL_629:
                            sub_188D718();
                          }
                          v406 = 0;
LABEL_524:
                          size_t v409 = 8 * v400;
                          v410 = &v406[8 * v402];
                          bzero(v410, v409);
                          if (v343 == v344)
                          {
                            *(void *)uint64_t v8 = v410;
                            *(void *)(v8 + 8) = &v410[v409];
                            *(void *)(v8 + 16) = &v406[8 * v405];
                            if (v343) {
                              goto LABEL_530;
                            }
                          }
                          else
                          {
                            unint64_t v411 = v343 - 8 - v344;
                            if (v411 < 0x58 || (unint64_t)(v344 - v406) < 0x20)
                            {
                              v412 = v343;
                              v413 = &v406[8 * v402];
                              goto LABEL_528;
                            }
                            uint64_t v475 = (v411 >> 3) + 1;
                            uint64_t v476 = 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
                            v412 = &v343[-v476];
                            v413 = &v410[-v476];
                            v477 = &v406[8 * v402 - 16];
                            v478 = (long long *)(v343 - 16);
                            uint64_t v479 = v475 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v480 = *v478;
                              *(v477 - 1) = *(v478 - 1);
                              _OWORD *v477 = v480;
                              v477 -= 2;
                              v478 -= 2;
                              v479 -= 4;
                            }
                            while (v479);
                            if (v475 != (v475 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_528:
                                uint64_t v414 = *((void *)v412 - 1);
                                v412 -= 8;
                                *((void *)v413 - 1) = v414;
                                v413 -= 8;
                              }
                              while (v412 != v344);
                            }
                            v343 = *(char **)v8;
                            *(void *)uint64_t v8 = v413;
                            *(void *)(v8 + 8) = &v410[v409];
                            *(void *)(v8 + 16) = &v406[8 * v405];
                            if (v343) {
LABEL_530:
                            }
                              operator delete(v343);
                          }
LABEL_531:
                          uint64_t v415 = sub_BE28BC((char **)v503, v499, (long long *)v505);
                          ++*(void *)(v8 + 144);
                          __n128 result = (int *)sub_49B168(v497[520] + 24, v495, 0, "transfer");
                          a4 = v266;
                          v416 = (unsigned __int16 *)((char *)result - *result);
                          if (*v416 >= 0xBu)
                          {
                            uint64_t v417 = v416[5];
                            if (v417)
                            {
                              if (*(int *)((char *)result + v417) != -1)
                              {
                                __n128 result = (int *)sub_49B168(v497[520] + 24, v495, 0, "transfer");
                                v418 = (unsigned __int16 *)((char *)result - *result);
                                if (*v418 < 0xBu)
                                {
                                  unsigned int v424 = 0x7FFFFFFF;
                                  goto LABEL_552;
                                }
                                uint64_t v419 = v418[5];
                                unsigned int v420 = v496;
                                uint64_t v421 = v500;
                                if (v419)
                                {
                                  a1 = v497;
                                  if (*(int *)((char *)result + v419) == -1)
                                  {
                                    unsigned int v424 = 0x7FFFFFFF;
                                    if (!a3) {
                                      goto LABEL_11;
                                    }
                                  }
                                  else
                                  {
                                    __n128 result = (int *)sub_49B168(v497[520] + 24, v495, 0, "transfer");
                                    v422 = (unsigned __int16 *)((char *)result - *result);
                                    if (*v422 >= 0xBu)
                                    {
                                      unsigned int v423 = v422[5];
                                      a1 = v497;
                                      unsigned int v420 = v496;
                                      uint64_t v421 = v500;
                                      if (v423) {
                                        goto LABEL_561;
                                      }
                                      unsigned int v424 = -10;
                                      if (a3) {
                                        goto LABEL_564;
                                      }
LABEL_11:
                                      unint64_t v16 = 0;
LABEL_12:
                                      *(void *)(v415 + 4) = v16 | v424;
                                      *(void *)(v415 + 12) = v494;
                                      unint64_t v12 = v489;
                                      *(void *)(v415 + 20) = *v489;
                                      unsigned int v15 = v420 + 1;
                                      if (v15 == v490) {
                                        goto LABEL_6;
                                      }
                                      goto LABEL_13;
                                    }
                                    unsigned int v424 = -10;
LABEL_552:
                                    a1 = v497;
                                    unsigned int v420 = v496;
                                    uint64_t v421 = v500;
                                    if (!a3) {
                                      goto LABEL_11;
                                    }
                                  }
                                }
                                else
                                {
                                  unsigned int v424 = 0x7FFFFFFF;
                                  a1 = v497;
                                  if (!a3) {
                                    goto LABEL_11;
                                  }
                                }
LABEL_564:
                                __n128 result = (int *)sub_49B6BC(a1[522] + 24, __ROR8__(v421, 32), 0, "transfer node");
                                v436 = (unsigned __int16 *)((char *)result - *result);
                                if (*v436 < 7u) {
                                  goto LABEL_11;
                                }
                                unint64_t v16 = v436[3];
                                if (v16) {
                                  unint64_t v16 = (unint64_t)(*((unsigned char *)result + v16) == 5) << 32;
                                }
                                goto LABEL_12;
                              }
                            }
                          }
                          a1 = v497;
                          uint64_t v425 = v497[520];
                          if (!*(unsigned char *)(v425 + 17))
                          {
                            unsigned int v424 = 300;
                            unsigned int v420 = v496;
                            uint64_t v421 = v500;
                            if (!a3) {
                              goto LABEL_11;
                            }
                            goto LABEL_564;
                          }
                          LODWORD(v506) = 1;
                          int v508 = 0;
                          *(void *)v505 = &v508;
                          *(void *)&v505[8] = &v506;
                          unint64_t v426 = *(void *)(v425 + 3880) + 1;
                          *(void *)(v425 + 3880) = v426;
                          uint64_t v427 = *(void *)(v425 + 24);
                          uint64_t v421 = v500;
                          if (v427)
                          {
                            uint64_t v428 = v425 + 40;
                            if (*(_DWORD *)(v425 + 904) == 1)
                            {
                              unsigned int v429 = 36;
                              goto LABEL_556;
                            }
                            if (*(_DWORD *)(v425 + 928) == 1)
                            {
                              unsigned int v429 = 37;
                              goto LABEL_556;
                            }
                            if (*(_DWORD *)(v425 + 952) == 1)
                            {
                              unsigned int v429 = 38;
                              goto LABEL_556;
                            }
                            if (*(_DWORD *)(v425 + 976) == 1)
                            {
                              unsigned int v429 = 39;
LABEL_556:
                              ++*(void *)(v425 + 3888);
                              uint64_t v430 = v428 + 24 * v429;
                              *(void *)(v430 + 8) = v426;
                              v431 = *(unsigned int **)(v430 + 16);
                              if (v431)
                              {
LABEL_557:
                                v432 = (int *)((char *)v431 + *v431);
                                v433 = (unsigned __int16 *)((char *)v432 - *v432);
                                if (*v433 >= 5u)
                                {
                                  uint64_t v434 = v433[2];
                                  if (v434)
                                  {
                                    __n128 result = (int *)((char *)v432 + v434 + *(unsigned int *)((char *)v432 + v434));
                                    v435 = (unsigned __int16 *)((char *)result - *result);
                                    unsigned int v420 = v496;
                                    if (*v435 < 0x11u || (unsigned int v423 = v435[8]) == 0)
                                    {
                                      unsigned int v424 = 0;
                                      if (a3) {
                                        goto LABEL_564;
                                      }
                                      goto LABEL_11;
                                    }
LABEL_561:
                                    unsigned int v424 = 10 * *(int *)((char *)result + v423);
                                    if (!a3) {
                                      goto LABEL_11;
                                    }
                                    goto LABEL_564;
                                  }
                                }
LABEL_632:
                                v481 = __cxa_allocate_exception(0x40uLL);
                                *(void *)v505 = operator new(0x48uLL);
                                *(_OWORD *)&v505[8] = xmmword_20B9270;
                                strcpy(*(char **)v505, "Root quad node of transit routing layer does not contain info object");
                                v482 = (void *)sub_2F404((uint64_t)v481, (long long *)v505);
                              }
                            }
                            else
                            {
                              unint64_t v460 = *(void *)(v425 + 960);
                              unint64_t v461 = *(void *)(v425 + 936);
                              unint64_t v462 = *(void *)(v425 + 912);
                              unint64_t v463 = *(void *)(v425 + 984);
                              v431 = (unsigned int *)sub_2AB884(v427, 9, 1u, 1);
                              if (v462 >= v426) {
                                unint64_t v464 = v426;
                              }
                              else {
                                unint64_t v464 = v462;
                              }
                              int v465 = 36;
                              if (v462 >= v426) {
                                int v465 = 0;
                              }
                              if (v461 < v464)
                              {
                                unint64_t v464 = v461;
                                int v465 = 37;
                              }
                              if (v460 < v464)
                              {
                                int v465 = 38;
                                unint64_t v464 = v460;
                              }
                              BOOL v466 = v463 >= v464;
                              unsigned int v467 = 39;
                              if (v466) {
                                unsigned int v467 = v465;
                              }
                              uint64_t v468 = v428 + 24 * v467;
                              *(_DWORD *)uint64_t v468 = v506;
                              *(void *)(v468 + 8) = *(void *)(v425 + 3880);
                              *(void *)(v468 + 16) = v431;
                              a1 = v497;
                              uint64_t v421 = v500;
                              if (v431) {
                                goto LABEL_557;
                              }
                            }
                          }
                          sub_398390((int **)v505);
                          goto LABEL_632;
                        }
                        size_t v408 = 8 * v400;
                        bzero(v343, v408);
                        v407 = &v343[v408];
                      }
                      *(void *)(v8 + 8) = v407;
                      goto LABEL_531;
                    }
                  }
                  uint64_t v354 = *(void *)(v8 + 16);
                  if (v353 <= (v354 - (uint64_t)v348) >> 3)
                  {
                    bzero(*(void **)(v8 + 8), 8 * v353);
                    v362 = &v348[8 * v353];
                    *(void *)(v8 + 8) = v362;
                    goto LABEL_472;
                  }
                  uint64_t v355 = v354 - (void)v349;
                  if (v355 >> 2 > v352) {
                    unint64_t v352 = v355 >> 2;
                  }
                  if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v356 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v356 = v352;
                  }
                  if (v356 >> 61) {
                    goto LABEL_629;
                  }
                  v357 = operator new(8 * v356);
                  uint64_t v358 = 8 * v353;
                  v359 = &v357[8 * v351];
                  bzero(v359, 8 * v353);
                  if (v348 == v349)
                  {
                    v363 = &v357[8 * v356];
                    v362 = &v359[v358];
                    uint64_t v8 = a5;
                    *(void *)a5 = v359;
                    *(void *)(a5 + 8) = &v359[v358];
                    *(void *)(a5 + 16) = v363;
                    if (!v348) {
                      goto LABEL_472;
                    }
                    goto LABEL_471;
                  }
                  unint64_t v360 = v348 - 8 - v349;
                  if (v360 >= 0x58)
                  {
                    v361 = &v357[8 * v351];
                    if ((unint64_t)(&v348[-v350] - v357) >= 0x20)
                    {
                      uint64_t v364 = (v360 >> 3) + 1;
                      uint64_t v365 = 8 * (v364 & 0x3FFFFFFFFFFFFFFCLL);
                      v366 = &v348[-v365];
                      v361 = &v359[-v365];
                      v367 = &v357[8 * v351 - 16];
                      v368 = (long long *)(v348 - 16);
                      uint64_t v369 = v364 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v370 = *v368;
                        *(v367 - 1) = *(v368 - 1);
                        _OWORD *v367 = v370;
                        v367 -= 2;
                        v368 -= 2;
                        v369 -= 4;
                      }
                      while (v369);
                      v348 = v366;
                      if (v364 == (v364 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_470:
                        v348 = v349;
                        v372 = &v357[8 * v356];
                        v362 = &v359[v358];
                        uint64_t v8 = a5;
                        *(void *)a5 = v361;
                        *(void *)(a5 + 8) = &v359[v358];
                        *(void *)(a5 + 16) = v372;
                        if (v349)
                        {
LABEL_471:
                          operator delete(v348);
                          v362 = *(char **)(v8 + 8);
                        }
LABEL_472:
                        v349 = *(char **)v8;
                        v348 = v362;
                        goto LABEL_473;
                      }
                    }
                  }
                  else
                  {
                    v361 = &v357[8 * v351];
                  }
                  do
                  {
                    uint64_t v371 = *((void *)v348 - 1);
                    v348 -= 8;
                    *((void *)v361 - 1) = v371;
                    v361 -= 8;
                  }
                  while (v348 != v349);
                  goto LABEL_470;
                }
              }
              else
              {
                v340 = v268;
                v341 = &v334[8 * v330];
              }
              do
              {
                uint64_t v342 = *((void *)v340 - 1);
                v340 -= 8;
                *((void *)v341 - 1) = v342;
                v341 -= 8;
              }
              while (v340 != v269);
              goto LABEL_444;
            }
            size_t v336 = 8 * v328;
            bzero(v268, v336);
            v335 = &v268[v336];
          }
          *(void *)(v8 + 80) = v335;
          goto LABEL_446;
        }
        uint64_t v93 = *(void *)(v8 + 216);
        uint64_t v92 = *(void *)(v8 + 224);
        if ((unint64_t)(v92 - v93) >= 0x1555555555555555) {
          goto LABEL_634;
        }
        uint64_t v94 = *(void *)(v8 + 256);
        if (v93
          && ((uint64_t v95 = (_DWORD *)(v94 + 12 * v54), *(_DWORD *)(v8 + 212) == v95[1])
            ? (BOOL v96 = *(_DWORD *)(v8 + 208) == *v95)
            : (BOOL v96 = 0),
              v96))
        {
          *(void *)(v8 + 216) = v93 - 1;
        }
        else
        {
          *(void *)(v8 + 224) = v92 + 1;
        }
        uint64_t v110 = v94 + 12 * v54;
        *(void *)uint64_t v110 = v27;
        *(_DWORD *)(v110 + 8) = -1;
        uint64_t v111 = *(void *)(v8 + 256) + 12 * v54;
        unsigned int v112 = *(_DWORD *)(v111 + 8);
        unsigned int v90 = (unsigned int *)(v111 + 8);
        unsigned int v499 = v112;
        if (v112 != -1) {
          goto LABEL_157;
        }
LABEL_174:
        unsigned int v140 = *(_DWORD *)(v8 + 288);
        *(_DWORD *)(v8 + 288) = v140 + 1;
        unsigned int *v90 = v140;
        unsigned int v115 = *(unint64_t **)(v8 + 272);
        unint64_t v141 = *(void *)(v8 + 280);
        if ((unint64_t)v115 < v141)
        {
          *unsigned int v115 = v27;
          uint64_t v116 = (uint64_t)(v115 + 1);
          goto LABEL_287;
        }
        BOOL v160 = *v486;
        uint64_t v161 = (char *)v115 - (char *)*v486;
        uint64_t v162 = v161 >> 3;
        unint64_t v163 = (v161 >> 3) + 1;
        if (!(v163 >> 61))
        {
          uint64_t v164 = v141 - (void)v160;
          if (v164 >> 2 > v163) {
            unint64_t v163 = v164 >> 2;
          }
          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v163;
          }
          if (v122)
          {
            if (v122 >> 61) {
              goto LABEL_638;
            }
            uint64_t v123 = operator new(8 * v122);
            unint64_t v124 = &v123[8 * v162];
            *unint64_t v124 = v27;
            uint64_t v116 = (uint64_t)(v124 + 1);
            if (v115 == v160)
            {
LABEL_285:
              *(void *)(v8 + 264) = v124;
              *(void *)(v8 + 272) = v116;
              *(void *)(v8 + 280) = &v123[8 * v122];
              unint64_t v31 = v500;
              if (v115) {
                operator delete(v115);
              }
LABEL_287:
              *(void *)(v8 + 272) = v116;
              unsigned int v499 = *v90;
              uint64_t v125 = *(void *)(v8 + 232) - 1;
              uint64_t v126 = *(void *)(v8 + 256);
              int v128 = *(_DWORD *)(v8 + 240);
              int v127 = *(_DWORD *)(v8 + 244);
              if ((a4 & 1) == 0) {
                goto LABEL_288;
              }
LABEL_158:
              unint64_t v129 = 0xC4CEB9FE1A85EC53
                   * ((0xFF51AFD7ED558CCDLL * (v27 ^ (v27 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v27 ^ (v27 >> 33))) >> 33));
              unint64_t v130 = v129 ^ (v129 >> 33);
              uint64_t v131 = v125 & v130;
              unint64_t v132 = (unsigned int *)(v126 + 12 * (v125 & v130));
              unsigned int v134 = *v132;
              unsigned int v133 = v132[1];
              if (v127 == v133 && v128 == v134) {
                goto LABEL_177;
              }
              if (*(void *)(v8 + 216))
              {
                uint64_t v136 = -1;
                uint64_t v137 = 1;
                do
                {
                  if (*(_DWORD *)(v8 + 212) == v133 && *(_DWORD *)(v8 + 208) == v134)
                  {
                    if (v136 == -1) {
                      uint64_t v136 = v131;
                    }
                  }
                  else if (__PAIR64__(v133, v134) == v27)
                  {
                    goto LABEL_218;
                  }
                  uint64_t v131 = (v131 + v137) & v125;
                  uint64_t v138 = (unsigned int *)(v126 + 12 * v131);
                  unsigned int v134 = *v138;
                  unsigned int v133 = v138[1];
                  ++v137;
                }
                while (v127 != v133 || v128 != v134);
                if (v136 == -1) {
LABEL_177:
                }
                  uint64_t v136 = v131;
              }
              else
              {
                uint64_t v165 = 1;
                while (__PAIR64__(v133, v134) != v27)
                {
                  uint64_t v131 = (v131 + v165) & v125;
                  uint64_t v166 = (unsigned int *)(v126 + 12 * v131);
                  unsigned int v134 = *v166;
                  unsigned int v133 = v166[1];
                  ++v165;
                  if (v127 == v133 && v128 == v134) {
                    goto LABEL_177;
                  }
                }
LABEL_218:
                if (v131 != -1)
                {
                  uint64_t v168 = v126 + 12 * v131;
                  unsigned int v171 = *(_DWORD *)(v168 + 8);
                  signed int v170 = (unsigned int *)(v168 + 8);
                  unsigned int v169 = v171;
                  if (v171 != -1) {
                    goto LABEL_360;
                  }
                  goto LABEL_227;
                }
                uint64_t v136 = -1;
              }
              if (sub_BE1FD8(v498, 1))
              {
                unint64_t v506 = v27;
                int v507 = -1;
                uint64_t v142 = *(void *)(v8 + 232) - 1;
                uint64_t v143 = *(void *)(v8 + 256);
                int v145 = *(_DWORD *)(v8 + 240);
                int v144 = *(_DWORD *)(v8 + 244);
                uint64_t v146 = v142 & v130;
                int v147 = (unsigned int *)(v143 + 12 * (v142 & v130));
                unsigned int v149 = *v147;
                unsigned int v148 = v147[1];
                if (v144 == v148 && v145 == v149)
                {
LABEL_225:
                  uint64_t v151 = v146;
                  goto LABEL_226;
                }
                if (*(void *)(v8 + 216))
                {
                  uint64_t v151 = -1;
                  uint64_t v152 = 1;
                  do
                  {
                    if (*(_DWORD *)(v8 + 212) == v148 && *(_DWORD *)(v8 + 208) == v149)
                    {
                      if (v151 == -1) {
                        uint64_t v151 = v146;
                      }
                    }
                    else if (__PAIR64__(v148, v149) == v27)
                    {
                      goto LABEL_263;
                    }
                    uint64_t v146 = (v146 + v152) & v142;
                    uint64_t v153 = (unsigned int *)(v143 + 12 * v146);
                    unsigned int v149 = *v153;
                    unsigned int v148 = v153[1];
                    ++v152;
                  }
                  while (v144 != v148 || v145 != v149);
                  if (v151 == -1) {
                    goto LABEL_225;
                  }
LABEL_226:
                  sub_BE22B8(v498, (uint64_t *)&v506, v151, v505);
                  signed int v170 = (unsigned int *)(*(void *)&v505[8] + 8);
                  unsigned int v169 = *(_DWORD *)(*(void *)&v505[8] + 8);
                  if (v169 != -1) {
                    goto LABEL_360;
                  }
                  goto LABEL_227;
                }
                uint64_t v195 = 1;
                while (__PAIR64__(v148, v149) != v27)
                {
                  uint64_t v146 = (v146 + v195) & v142;
                  uint64_t v196 = (unsigned int *)(v143 + 12 * v146);
                  unsigned int v149 = *v196;
                  unsigned int v148 = v196[1];
                  ++v195;
                  if (v144 == v148 && v145 == v149) {
                    goto LABEL_225;
                  }
                }
LABEL_263:
                if (v146 == -1)
                {
                  uint64_t v151 = -1;
                  goto LABEL_226;
                }
                uint64_t v198 = v143 + 12 * v146;
                unsigned int v199 = *(_DWORD *)(v198 + 8);
                signed int v170 = (unsigned int *)(v198 + 8);
                unsigned int v169 = v199;
                if (v199 != -1) {
                  goto LABEL_360;
                }
              }
              else
              {
                uint64_t v156 = *(void *)(v8 + 216);
                uint64_t v155 = *(void *)(v8 + 224);
                if ((unint64_t)(v155 - v156) >= 0x1555555555555555) {
                  goto LABEL_635;
                }
                uint64_t v157 = *(void *)(v8 + 256);
                if (v156
                  && ((unint64_t v158 = (_DWORD *)(v157 + 12 * v136), *(_DWORD *)(v8 + 212) == v158[1])
                    ? (BOOL v159 = *(_DWORD *)(v8 + 208) == *v158)
                    : (BOOL v159 = 0),
                      v159))
                {
                  *(void *)(v8 + 216) = v156 - 1;
                }
                else
                {
                  *(void *)(v8 + 224) = v155 + 1;
                }
                uint64_t v172 = v157 + 12 * v136;
                *(void *)uint64_t v172 = v27;
                *(_DWORD *)(v172 + 8) = -1;
                uint64_t v173 = *(void *)(v8 + 256) + 12 * v136;
                unsigned int v174 = *(_DWORD *)(v173 + 8);
                signed int v170 = (unsigned int *)(v173 + 8);
                unsigned int v169 = v174;
                if (v174 != -1) {
                  goto LABEL_360;
                }
              }
LABEL_227:
              unsigned int v175 = *(_DWORD *)(v8 + 288);
              *(_DWORD *)(v8 + 288) = v175 + 1;
              *signed int v170 = v175;
              __int16 v177 = *(unint64_t **)(v8 + 272);
              unint64_t v176 = *(void *)(v8 + 280);
              if ((unint64_t)v177 < v176)
              {
                *__int16 v177 = v27;
                uint64_t v178 = (uint64_t)(v177 + 1);
LABEL_359:
                *(void *)(v8 + 272) = v178;
                unsigned int v169 = *v170;
                goto LABEL_360;
              }
              uint64_t v179 = *v486;
              uint64_t v180 = (char *)v177 - (char *)*v486;
              uint64_t v181 = v180 >> 3;
              unint64_t v182 = (v180 >> 3) + 1;
              if (v182 >> 61) {
                goto LABEL_636;
              }
              uint64_t v183 = v176 - (void)v179;
              if (v183 >> 2 > v182) {
                unint64_t v182 = v183 >> 2;
              }
              if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v184 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v184 = v182;
              }
              if (v184)
              {
                if (v184 >> 61) {
                  goto LABEL_639;
                }
                uint64_t v185 = operator new(8 * v184);
                uint64_t v186 = (unint64_t *)&v185[8 * v181];
                *uint64_t v186 = v27;
                uint64_t v178 = (uint64_t)(v186 + 1);
                if (v177 == v179)
                {
LABEL_238:
                  *(void *)(v8 + 264) = v186;
                  *(void *)(v8 + 272) = v178;
                  *(void *)(v8 + 280) = &v185[8 * v184];
                  if (!v177) {
                    goto LABEL_359;
                  }
                  goto LABEL_358;
                }
              }
              else
              {
                uint64_t v185 = 0;
                uint64_t v186 = (unint64_t *)(8 * v181);
                *(void *)(8 * v181) = v27;
                uint64_t v178 = 8 * v181 + 8;
                if (v177 == v179) {
                  goto LABEL_238;
                }
              }
              unint64_t v442 = (char *)(v177 - 1) - (char *)v179;
              if (v442 < 0x58) {
                goto LABEL_644;
              }
              if ((unint64_t)((char *)v177 - &v185[v180]) < 0x20) {
                goto LABEL_644;
              }
              uint64_t v443 = (v442 >> 3) + 1;
              uint64_t v444 = 8 * (v443 & 0x3FFFFFFFFFFFFFFCLL);
              v445 = &v177[v444 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v186 = (unint64_t *)((char *)v186 - v444);
              v446 = &v185[8 * v181 - 16];
              v447 = v177 - 2;
              uint64_t v448 = v443 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v449 = *(_OWORD *)v447;
                *(v446 - 1) = *((_OWORD *)v447 - 1);
                _OWORD *v446 = v449;
                v446 -= 2;
                v447 -= 4;
                v448 -= 4;
              }
              while (v448);
              __int16 v177 = v445;
              if (v443 != (v443 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_644:
                do
                {
                  unint64_t v450 = *--v177;
                  *--uint64_t v186 = v450;
                }
                while (v177 != v179);
              }
              __int16 v177 = *v486;
              *(void *)(v8 + 264) = v186;
              *(void *)(v8 + 272) = v178;
              *(void *)(v8 + 280) = &v185[8 * v184];
              if (!v177) {
                goto LABEL_359;
              }
              goto LABEL_358;
            }
          }
          else
          {
            uint64_t v123 = 0;
            unint64_t v124 = (void *)(8 * v162);
            *(void *)(8 * v162) = v27;
            uint64_t v116 = 8 * v162 + 8;
            if (v115 == v160) {
              goto LABEL_285;
            }
          }
          unint64_t v209 = (char *)(v115 - 1) - (char *)v160;
          if (v209 < 0x58) {
            goto LABEL_645;
          }
          if ((unint64_t)((char *)v115 - &v123[v161]) < 0x20) {
            goto LABEL_645;
          }
          uint64_t v210 = (v209 >> 3) + 1;
          uint64_t v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v212 = &v115[v211 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v124 = (void *)((char *)v124 - v211);
          uint64_t v213 = &v123[8 * v162 - 16];
          uint64_t v214 = v115 - 2;
          uint64_t v215 = v210 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v216 = *(_OWORD *)v214;
            *(v213 - 1) = *((_OWORD *)v214 - 1);
            *uint64_t v213 = v216;
            v213 -= 2;
            v214 -= 4;
            v215 -= 4;
          }
          while (v215);
          unsigned int v115 = v212;
          if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_645:
            do
            {
              uint64_t v217 = *--v115;
              *--unint64_t v124 = v217;
            }
            while (v115 != v160);
          }
          goto LABEL_284;
        }
LABEL_637:
        sub_2E00();
      }
      uint64_t v54 = -1;
      uint64_t v55 = 1;
      do
      {
        if (*(_DWORD *)(v8 + 212) == v51 && *(_DWORD *)(v8 + 208) == v52)
        {
          if (v54 == -1) {
            uint64_t v54 = v49;
          }
        }
        else if (__PAIR64__(v51, v52) == v27)
        {
          goto LABEL_130;
        }
        uint64_t v49 = (v49 + v55) & v32;
        uint64_t v56 = (unsigned int *)(v33 + 12 * v49);
        unsigned int v52 = *v56;
        unsigned int v51 = v56[1];
        ++v55;
      }
      while (v34 != v51 || v35 != v52);
      if (v54 != -1) {
        goto LABEL_89;
      }
    }
LABEL_88:
    uint64_t v54 = v49;
    goto LABEL_89;
  }
  return result;
}

void sub_BE1B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  unsigned __int16 v30 = *a11;
  if (*a11)
  {
    *(void *)(a29 + 272) = v30;
    operator delete(v30);
    unint64_t v31 = *(void **)(a29 + 256);
    if (!v31)
    {
LABEL_3:
      sub_BE1DEC(a29);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v31 = *(void **)(a29 + 256);
    if (!v31) {
      goto LABEL_3;
    }
  }
  free(v31);
  sub_BE1DEC(a29);
  _Unwind_Resume(a1);
}

void sub_BE1BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  __cxa_free_exception(v29);
  sub_BE1D9C(a29);
  _Unwind_Resume(a1);
}

void sub_BE1C1C(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1C30(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1C44(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void sub_BE1C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void sub_BE1C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (*(char *)(v29 - 129) < 0) {
    operator delete(*(void **)(v29 - 152));
  }
  sub_BE1D9C(a29);
  _Unwind_Resume(a1);
}

void sub_BE1CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  sub_BE1D9C(v2);
  _Unwind_Resume(a1);
}

void sub_BE1CCC(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1CE0(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1CF4(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D08(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D1C(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D30(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D44(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D58(_Unwind_Exception *a1)
{
  sub_BE1D9C(v1);
  _Unwind_Resume(a1);
}

void sub_BE1D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void sub_BE1D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t sub_BE1D9C(void *a1)
{
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3) {
    free(v3);
  }

  return sub_BE1DEC((uint64_t)a1);
}

uint64_t sub_BE1DEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_BE1E78(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unsigned int v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[2 * a2 + 1];
}

void sub_BE1F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_BE1FD8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_BE23A8(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_BE24EC((uint64_t)&v26, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v27;
      *(uint64x2_t *)a1 = v26;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v26 = v17;
      long long v27 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v28;
      long long v28 = v19;
      uint64_t v20 = v29;
      unint64_t v21 = v30;
      uint64_t v29 = *(void *)(a1 + 48);
      int v22 = *(_DWORD *)(a1 + 72);
      long long v23 = *(_OWORD *)(a1 + 56);
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v21;
      *(_DWORD *)(a1 + 72) = v31;
      *(void *)(a1 + 64) = *((void *)&v30 + 1);
      long long v30 = v23;
      int v31 = v22;
      BOOL v24 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v32;
      uint64_t v32 = v24;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v21)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v26 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v27, (float)(unint64_t)v23)));
      BYTE8(v27) = 0;
      if (v24) {
        free(v24);
      }
      return 1;
    }
  }
  return result;
}

void sub_BE2268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BE227C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BE2290(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BE22A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BE22B8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v4 = *(void *)(result + 48);
  if ((unint64_t)(v4 - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v6 = *(void *)(result + 80);
  if (v5
    && ((unint64_t v7 = (_DWORD *)(v6 + 12 * a3), *(_DWORD *)(result + 36) == v7[1])
      ? (BOOL v8 = *(_DWORD *)(result + 32) == *v7)
      : (BOOL v8 = 0),
        v8))
  {
    *(void *)(result + 40) = v5 - 1;
  }
  else
  {
    *(void *)(result + 48) = v4 + 1;
  }
  uint64_t v9 = v6 + 12 * a3;
  uint64_t v10 = *a2;
  *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v9 = v10;
  uint64_t v11 = *(void *)(result + 80);
  uint64_t v12 = v11 + 12 * a3;
  uint64_t v13 = v11 + 12 * *(void *)(result + 56);
  *a4 = result;
  a4[1] = v12;
  a4[2] = v13;
  return result;
}

void sub_BE2394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BE23A8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_BE24EC((uint64_t)&v18, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v19;
    *(uint64x2_t *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v18 = v9;
    long long v19 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v20;
    long long v20 = v11;
    uint64_t v12 = v21;
    unint64_t v13 = v22;
    uint64_t v21 = *(void *)(a1 + 48);
    int v14 = *(_DWORD *)(a1 + 72);
    long long v15 = *(_OWORD *)(a1 + 56);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 72) = v23;
    *(void *)(a1 + 64) = *((void *)&v22 + 1);
    long long v22 = v15;
    int v23 = v14;
    long long v16 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v24;
    BOOL v24 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v13)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v18 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v19, (float)(unint64_t)v15)));
    BYTE8(v19) = 0;
    if (v16) {
      free(v16);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_BE24EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_BE2634(a1, a2, a3);
  }
  else
  {
    unint64_t v7 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v8 = *(float *)(a1 + 16) * (float)v7;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v8) {
        break;
      }
      do
      {
LABEL_5:
        if ((v7 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v7 *= 2;
      }
      while (v7 < a3);
    }
    *(void *)(a1 + 56) = v7;
    float result = *(float *)(a1 + 20) * (float)v7;
    *(void *)a1 = (unint64_t)v8;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_BE2620(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BE2634(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_A3B77C(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v9 = *(_DWORD *)(a2 + 64);
    int v8 = *(_DWORD *)(a2 + 68);
    if (*(void *)(a2 + 40))
    {
      uint64_t v10 = 12 * v7;
      long long v11 = *(int **)(a2 + 80);
      while (1)
      {
        int v12 = *v11;
        int v13 = v11[1];
        if ((v8 != v13 || v9 != v12) && (*(_DWORD *)(a2 + 36) != v13 || *(_DWORD *)(a2 + 32) != v12)) {
          break;
        }
        v11 += 3;
        v10 -= 12;
        if (!v10) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v37 = 12 * v7;
      long long v11 = *(int **)(a2 + 80);
      while (v8 == v11[1] && v9 == *v11)
      {
        v11 += 3;
        v37 -= 12;
        if (!v37) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    long long v11 = *(int **)(a2 + 80);
  }
  uint64_t v16 = *(void *)(a2 + 80) + 12 * v7;
  if (v11 != (int *)v16)
  {
    do
    {
      uint64_t v17 = *(void *)(a1 + 56) - 1;
      unint64_t v18 = 0xFF51AFD7ED558CCDLL * (*(void *)v11 ^ (*(void *)v11 >> 33));
      unint64_t v19 = (0xC4CEB9FE1A85EC53 * (v18 ^ (v18 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v18 ^ (v18 >> 33))) >> 33);
      uint64_t v20 = *(void *)(a1 + 80);
      int v22 = *(_DWORD *)(a1 + 64);
      int v21 = *(_DWORD *)(a1 + 68);
      unint64_t v23 = v19 & v17;
      BOOL v24 = (_DWORD *)(v20 + 12 * v23);
      if (v21 != v24[1] || v22 != *v24)
      {
        uint64_t v26 = 1;
        do
        {
          unint64_t v23 = (v23 + v26) & v17;
          BOOL v24 = (_DWORD *)(v20 + 12 * v23);
          ++v26;
        }
        while (v21 != v24[1] || v22 != *v24);
      }
      uint64_t v28 = *(void *)v11;
      void v24[2] = v11[2];
      *(void *)BOOL v24 = v28;
      ++*(void *)(a1 + 48);
      uint64_t v29 = v11 + 3;
      long long v11 = (int *)v16;
      if (v29 != (int *)v16)
      {
        int v31 = *(_DWORD *)(a2 + 64);
        int v30 = *(_DWORD *)(a2 + 68);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v33 = *v29;
            int v32 = v29[1];
            if ((v30 != v32 || v31 != v33) && (*(_DWORD *)(a2 + 36) != v32 || *(_DWORD *)(a2 + 32) != v33)) {
              break;
            }
            v29 += 3;
            if (v29 == (int *)v16) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          while (v30 == v29[1] && v31 == *v29)
          {
            v29 += 3;
            if (v29 == (int *)v16)
            {
LABEL_21:
              long long v11 = (int *)v16;
              goto LABEL_22;
            }
          }
        }
        long long v11 = v29;
      }
LABEL_22:
      ;
    }
    while (v11 != (int *)(*(void *)(a2 + 80) + 12 * *(void *)(a2 + 56)));
  }
LABEL_60:
  ++*(_DWORD *)(a1 + 28);
}

void sub_BE28A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BE28BC(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      unint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    uint64_t v38 = &a1[3][28 * v11];
    long long v39 = *a3;
    *(_OWORD *)(v38 + 12) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)uint64_t v38 = v39;
    unint64_t v40 = *(unsigned int *)v9;
    *(void *)&a1[6][(v40 >> 3) & 0x1FFFFFF8] |= 1 << v40;
    return (uint64_t)&a1[3][28 * v40];
  }
  else
  {
    int v13 = (unsigned int *)(v9 + 4);
    unint64_t v12 = *((unsigned int *)v9 + 1);
    int v14 = a1[3];
    long long v15 = a1[4];
    uint64_t v16 = (uint64_t *)(a1 + 3);
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 2);
    if (v17 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v18 = a1[1] - v6;
      unsigned int v19 = v12 - 1227133513 * ((v15 - v14) >> 2) - v10;
      unint64_t v20 = 2 * (v12 - v10) + 2;
      if (v5 < v18 >> 3) {
        unint64_t v21 = v19;
      }
      else {
        unint64_t v21 = v17;
      }
      if (v5 < v18 >> 3) {
        unint64_t v22 = v20;
      }
      else {
        unint64_t v22 = 2;
      }
      char v46 = a3;
      if (v17 >= v22 + v17)
      {
        if (v17 > v22 + v17)
        {
          long long v15 = &v14[28 * v22 + 28 * v17];
          a1[4] = v15;
        }
      }
      else
      {
        sub_BE31F8((void **)a1 + 3, v22);
        int v14 = a1[3];
        long long v15 = a1[4];
      }
      sub_A3E96C((uint64_t)(a1 + 6), 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 2), 0);
      unsigned int v23 = *(_DWORD *)v9;
      unsigned int v24 = *(_DWORD *)v9;
      if (*v13 != *(_DWORD *)v9)
      {
        memmove((void *)(*v16 + 28 * v17), (const void *)(*v16 + 28 * v23), *v16 + 28 * *v13 - (*v16 + 28 * v23));
        unsigned int v24 = *(_DWORD *)v9;
        unsigned int v23 = *v13;
      }
      unsigned int v45 = a1 + 6;
      unint64_t v25 = a1[6];
      uint64_t v26 = &v25[8 * (v24 >> 6)];
      uint64_t v27 = v24 & 0x3F;
      unint64_t v28 = (v23 & 0x3F) - v27 + 8 * (8 * (v23 >> 6) - 8 * (v24 >> 6));
      if (v28)
      {
        if ((v24 & 0x3F) != 0)
        {
          if ((64 - v27) >= v28) {
            uint64_t v29 = (v23 & 0x3F) - v27 + 8 * (8 * (v23 >> 6) - 8 * (v24 >> 6));
          }
          else {
            uint64_t v29 = (64 - v27);
          }
          *(void *)v26 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v27 - v29)) & (-1 << v27));
          v26 += 8;
          v28 -= v29;
        }
        if (v28 >= 0x40) {
          bzero(v26, 8 * (v28 >> 6));
        }
        if ((v28 & 0x3F) != 0) {
          *(void *)&v26[8 * (v28 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v28 & 0x3F));
        }
      }
      int v30 = &v25[((unint64_t)v17 >> 3) & 0x1FFFFFF8];
      unint64_t v31 = (v21 & 0x3F)
          - (v17 & 0x3F)
          + 8 * (((v21 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
      if (v31)
      {
        if ((v17 & 0x3F) != 0)
        {
          if (64 - (v17 & 0x3F) >= v31) {
            unint64_t v32 = (v21 & 0x3F)
          }
                - (v17 & 0x3F)
                + 8 * (((v21 >> 3) & 0x1FFFFFF8) - (((unint64_t)v17 >> 3) & 0x1FFFFFF8));
          else {
            unint64_t v32 = 64 - (v17 & 0x3F);
          }
          *(void *)v30 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v17 & 0x3Fu) - v32)) & (-1 << (v17 & 0x3F));
          v30 += 8;
          v31 -= v32;
        }
        if (v31 >= 0x40) {
          memset(v30, 255, 8 * (v31 >> 6));
        }
        if ((v31 & 0x3F) != 0) {
          *(void *)&v30[8 * (v31 >> 6)] |= 0xFFFFFFFFFFFFFFFFLL >> -(v31 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v17;
      unsigned int *v13 = v21;
      int v33 = (_OWORD *)(*v16 + 28 * v21);
      long long v34 = *v46;
      *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v46 + 12);
      *int v33 = v34;
      unint64_t v35 = *v13;
      *(void *)(*v45 + ((v35 >> 3) & 0x1FFFFFF8)) |= 1 << v35;
      uint64_t v36 = *v16;
      unsigned int *v13 = v35 + 1;
      return v36 + 28 * v35;
    }
    else
    {
      unsigned int v41 = &v14[28 * v12];
      long long v42 = *a3;
      *(_OWORD *)(v41 + 12) = *(long long *)((char *)a3 + 12);
      *(_OWORD *)unsigned int v41 = v42;
      unint64_t v43 = *v13;
      *(void *)&a1[6][(v43 >> 3) & 0x1FFFFFF8] |= 1 << v43;
      uint64_t v44 = a1[3];
      unsigned int *v13 = v43 + 1;
      return (uint64_t)&v44[28 * v43];
    }
  }
}

char *sub_BE2CD4(void **a1, unsigned int a2, char *__dst, unsigned char *__src)
{
  unint64_t v8 = a2;
  unsigned int v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  unint64_t v11 = (v9 - (unsigned char *)*a1) >> 3;
  if (v11 <= a2)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11)
      {
        int v9 = &v10[8 * v12];
        a1[1] = v9;
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unsigned int v10 = (char *)*a1;
      int v9 = (char *)a1[1];
    }
  }
  unint64_t v13 = (v9 - v10) >> 3;
  int v14 = v10;
  if (v13 <= v8)
  {
    unint64_t v15 = a2 + 1;
    if (v15 <= v13)
    {
      int v14 = v10;
      if (v15 < v13)
      {
        a1[1] = &v10[8 * v15];
        int v14 = v10;
      }
    }
    else
    {
      sub_D2BFC(a1, v15 - v13);
      int v14 = (char *)*a1;
    }
  }
  unint64_t v16 = (unint64_t)a1[3];
  if ((unsigned char *)(v16 + 28 * *(unsigned int *)&v14[8 * v8 + 4]) == __src)
  {
    v19.i64[0] = (uint64_t)__dst;
    v19.i64[1] = (uint64_t)__src;
    int64x2_t v20 = vsubq_s64(v19, vdupq_n_s64(v16));
    int64x2_t v21 = vshrq_n_s64(v20, 2uLL);
    v23.i64[0] = 0x6DB6DB6DB6DB6DB7 * v21.i64[0];
    __int32 v22 = v23.i32[0];
    v23.i64[1] = 0x6DB6DB6DB6DB6DB7 * v21.i64[1];
    int8x16_t v24 = vbslq_s8((int8x16_t)vcgtq_s64(v20, vdupq_n_s64(0xFFFFFFFFFFFFFFE4)), (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v23), 6uLL)));
    unint64_t v25 = (char *)a1[6] + 8 * v24.i64[0];
    unint64_t v26 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
    if (v26)
    {
      if ((v23.i8[0] & 0x3F) != 0)
      {
        if (64 - (v23.i8[0] & 0x3Fu) >= v26) {
          unint64_t v27 = (v23.i8[8] & 0x3F) - (unint64_t)(v23.i8[0] & 0x3F) + 8 * (8 * v24.i64[1] - 8 * v24.i64[0]);
        }
        else {
          unint64_t v27 = 64 - (v23.i8[0] & 0x3Fu);
        }
        *(void *)v25 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v23.i8[0] & 0x3Fu) - v27)) & (-1 << (v23.i8[0] & 0x3F)));
        v25 += 8;
        v26 -= v27;
      }
      if (v26 >= 0x40) {
        bzero(v25, 8 * (v26 >> 6));
      }
      if ((v26 & 0x3F) != 0) {
        *(void *)&v25[8 * (v26 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v26 & 0x3F));
      }
    }
    *(_DWORD *)&v10[8 * v8 + 4] = v22;
  }
  else
  {
    unint64_t v17 = ((unsigned char *)a1[1] - v14) >> 3;
    if (v17 <= v8)
    {
      unint64_t v18 = a2 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17) {
          a1[1] = &v14[8 * v18];
        }
      }
      else
      {
        sub_D2BFC(a1, v18 - v17);
        int v14 = (char *)*a1;
        unint64_t v16 = (unint64_t)a1[3];
      }
    }
    if ((char *)(v16 + 28 * *(unsigned int *)&v14[8 * v8]) == __dst)
    {
      int v30 = (__int32 *)&v10[8 * v8];
      v31.i64[0] = (uint64_t)__dst;
      v31.i64[1] = (uint64_t)__src;
      int64x2_t v32 = vsubq_s64(v31, vdupq_n_s64(v16));
      int64x2_t v33 = vshrq_n_s64(v32, 2uLL);
      v35.i64[0] = 0x6DB6DB6DB6DB6DB7 * v33.i64[0];
      v35.i64[1] = 0x6DB6DB6DB6DB6DB7 * v33.i64[1];
      __int32 v34 = v35.i32[2];
      int8x16_t v36 = vbslq_s8((int8x16_t)vcgtq_s64(v32, vdupq_n_s64(0xFFFFFFFFFFFFFFE4)), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 6uLL), (int8x16_t)vnegq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(vdupq_n_s64(0x3FuLL), v35), 6uLL)));
      uint64_t v37 = (char *)a1[6] + 8 * v36.i64[0];
      unint64_t v38 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
      if (v38)
      {
        if ((v35.i8[0] & 0x3F) != 0)
        {
          if (64 - (v35.i8[0] & 0x3Fu) >= v38) {
            unint64_t v39 = (v35.i8[8] & 0x3F) - (unint64_t)(v35.i8[0] & 0x3F) + 8 * (8 * v36.i64[1] - 8 * v36.i64[0]);
          }
          else {
            unint64_t v39 = 64 - (v35.i8[0] & 0x3Fu);
          }
          *(void *)v37 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v35.i8[0] & 0x3Fu) - v39)) & (-1 << (v35.i8[0] & 0x3F)));
          v37 += 8;
          v38 -= v39;
        }
        if (v38 >= 0x40) {
          bzero(v37, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          *(void *)&v37[8 * (v38 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F));
        }
      }
      __int32 *v30 = v34;
      return __src;
    }
    else
    {
      unint64_t v28 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v28 <= v8)
      {
        unint64_t v29 = a2 + 1;
        if (v29 <= v28)
        {
          if (v29 < v28) {
            a1[1] = &v14[8 * v29];
          }
        }
        else
        {
          sub_D2BFC(a1, v29 - v28);
          int v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      unint64_t v40 = (unsigned char *)(v16 + 28 * *(unsigned int *)&v14[8 * v8 + 4]);
      int64_t v41 = v40 - __src;
      if (v40 != __src)
      {
        memmove(__dst, __src, v40 - __src);
        unint64_t v16 = (unint64_t)a1[3];
        int v14 = (char *)*a1;
      }
      long long v42 = &__dst[v41];
      unint64_t v43 = (char *)a1[6];
      unint64_t v44 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v42[-v16] >> 2);
      if ((uint64_t)&v42[-v16] <= -28) {
        uint64_t v45 = -(uint64_t)((63 - v44) >> 6);
      }
      else {
        uint64_t v45 = v44 >> 6;
      }
      char v46 = &v43[8 * v45];
      unint64_t v47 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v47 <= v8)
      {
        unint64_t v48 = a2 + 1;
        if (v48 <= v47)
        {
          if (v48 < v47) {
            a1[1] = &v14[8 * v48];
          }
        }
        else
        {
          sub_D2BFC(a1, v48 - v47);
          int v14 = (char *)*a1;
          unint64_t v16 = (unint64_t)a1[3];
        }
      }
      unint64_t v49 = *(unsigned int *)&v14[8 * v8 + 4];
      unint64_t v50 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
      if (v50)
      {
        if ((v44 & 0x3F) != 0)
        {
          if (64 - (v44 & 0x3F) >= v50) {
            uint64_t v51 = (v49 & 0x3F) - (v44 & 0x3F) + 8 * (&v43[(v49 >> 3) & 0x1FFFFFF8] - v46);
          }
          else {
            uint64_t v51 = 64 - (v44 & 0x3F);
          }
          *(void *)v46 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v44 & 0x3Fu) - v51)) & (-1 << (v44 & 0x3F)));
          v46 += 8;
          v50 -= v51;
        }
        if (v50 >= 0x40) {
          bzero(v46, 8 * (v50 >> 6));
        }
        if ((v50 & 0x3F) != 0) {
          *(void *)&v46[8 * (v50 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v50 & 0x3F));
        }
      }
      *(_DWORD *)&v10[8 * v8 + 4] = -1227133513 * ((unint64_t)&v42[-v16] >> 2);
    }
  }
  return __dst;
}

void sub_BE31F8(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 28 * a2 - 28;
      if (v13 < 0x1C) {
        goto LABEL_37;
      }
      unint64_t v14 = v13 / 0x1C + 1;
      unint64_t v6 = &v5[28 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
      unint64_t v15 = v5 + 32;
      *(void *)&long long v16 = 0xFFFFFFFF00000000;
      *((void *)&v16 + 1) = 0xFFFFFFFF00000000;
      uint64_t v17 = v14 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_OWORD *)v15 - 1) = v16;
        *(_OWORD *)unint64_t v15 = xmmword_20F00B0;
        *((_OWORD *)v15 - 2) = xmmword_20F00C0;
        *((void *)v15 + 2) = 0xFFFFFFFFLL;
        v15 += 56;
        v17 -= 2;
      }
      while (v17);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *(_OWORD *)unint64_t v6 = xmmword_20F00C0;
          *((void *)v6 + 2) = 0xFFFFFFFF00000000;
          *((_DWORD *)v6 + 6) = 0;
          v6 += 28;
        }
        while (v6 != &v5[28 * a2]);
      }
      unint64_t v6 = &v5[28 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v11 = 0x924924924924924;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x924924924924924) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(28 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = &v12[28 * v8];
    int64x2_t v19 = &v18[28 * a2];
    unint64_t v20 = 28 * a2 - 28;
    int64x2_t v21 = v18;
    if (v20 < 0x1C) {
      goto LABEL_38;
    }
    unint64_t v22 = v20 / 0x1C + 1;
    int64x2_t v21 = &v18[28 * (v22 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v23 = (uint64_t)&v12[28 * v8 + 32];
    *(void *)&long long v24 = 0xFFFFFFFF00000000;
    *((void *)&v24 + 1) = 0xFFFFFFFF00000000;
    uint64_t v25 = v22 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_OWORD *)(v23 - 16) = v24;
      *(_OWORD *)uint64_t v23 = xmmword_20F00B0;
      *(_OWORD *)(v23 - 32) = xmmword_20F00C0;
      *(void *)(v23 + 16) = 0xFFFFFFFFLL;
      v23 += 56;
      v25 -= 2;
    }
    while (v25);
    if (v22 != (v22 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      do
      {
        *(_OWORD *)int64x2_t v21 = xmmword_20F00C0;
        *((void *)v21 + 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v21 + 6) = 0;
        v21 += 28;
      }
      while (v21 != v19);
    }
    unint64_t v26 = &v12[28 * v11];
    if (v5 == v7)
    {
      unint64_t v29 = *a1;
      *a1 = v18;
      a1[1] = v19;
      a1[2] = v26;
      if (!v29) {
        return;
      }
      goto LABEL_28;
    }
    do
    {
      long long v27 = *(_OWORD *)(v6 - 28);
      unint64_t v28 = v18 - 28;
      *((_OWORD *)v18 - 1) = *((_OWORD *)v6 - 1);
      *(_OWORD *)(v18 - 28) = v27;
      v6 -= 28;
      v18 -= 28;
    }
    while (v6 != v7);
    unint64_t v29 = *a1;
    *a1 = v28;
    a1[1] = v19;
    a1[2] = v26;
    if (v29)
    {
LABEL_28:
      operator delete(v29);
    }
  }
}

uint64_t sub_BE3504(void *a1, uint64_t a2, int a3)
{
  unint64_t v5 = *(void **)a2;
  unint64_t v6 = *(void **)(a2 + 8);
  if (*(void **)a2 == v6) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = (int *)sub_49B168(a1[520] + 24, __ROR8__(*v5, 32), 0, "transfer");
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 < 0xBu || (uint64_t v12 = v11[5]) == 0 || *(int *)((char *)v10 + v12) == -1)
    {
      ++v8;
    }
    else
    {
      unint64_t v13 = __ROR8__(*v5, 32);
      unint64_t v14 = (int *)sub_49B168(a1[520] + 24, v13, 0, "transfer");
      unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 < 0xBu || (uint64_t v16 = v15[5]) == 0 || *(int *)((char *)v14 + v16) == -1)
      {
        uint64_t v9 = (v9 + 0x7FFFFFFF);
      }
      else
      {
        uint64_t v17 = (int *)sub_49B168(a1[520] + 24, v13, 0, "transfer");
        unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 0xBu && (uint64_t v19 = v18[5]) != 0) {
          uint64_t v9 = (10 * *(int *)((char *)v17 + v19) + v9);
        }
        else {
          uint64_t v9 = (v9 - 10);
        }
      }
    }
    ++v5;
  }
  while (v5 != v6);
  if (!v8)
  {
LABEL_57:
    unint64_t v50 = *(void **)a2;
    if (*(void *)a2 != *(void *)(a2 + 8)) {
      goto LABEL_58;
    }
    return v9;
  }
  if (a3 != 1)
  {
    if (a3) {
      goto LABEL_57;
    }
    uint64_t v20 = a1[520];
    if (*(unsigned char *)(v20 + 17))
    {
      int64x2_t v21 = sub_398110(v20 + 24, 0);
      unint64_t v22 = &v21[-*(int *)v21];
      double v23 = 0.0;
      if (*(unsigned __int16 *)v22 >= 0x11u)
      {
        uint64_t v24 = *((unsigned __int16 *)v22 + 8);
        if (v24) {
          double v23 = (double)(10 * *(_DWORD *)&v21[v24]);
        }
      }
      double v25 = v23 * (double)v8;
      if (v25 < 0.0)
      {
LABEL_24:
        if (v25 > -4.50359963e15)
        {
          uint64_t v26 = (uint64_t)(v25 + v25);
          if (v26 >= 1) {
            --v26;
          }
          goto LABEL_55;
        }
        goto LABEL_56;
      }
    }
    else
    {
      double v25 = 300.0 * (double)v8;
      if (v25 < 0.0) {
        goto LABEL_24;
      }
    }
    if (v25 < 4.50359963e15)
    {
      uint64_t v26 = (uint64_t)(v25 + v25) + 1;
LABEL_55:
      double v25 = (double)(v26 >> 1);
    }
LABEL_56:
    uint64_t v9 = (v9 + (int)v25);
    goto LABEL_57;
  }
  long long v27 = (int *)sub_49B168(a1[520] + 24, __ROR8__(**(void **)a2, 32), 0, "transfer");
  unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 7u && (unsigned __int16 v29 = v28[3]) != 0) {
    unint64_t v30 = *(unsigned int *)((char *)v27 + v29 + 4) | ((unint64_t)*(unsigned int *)((char *)v27 + v29) << 32);
  }
  else {
    unint64_t v30 = 0xFFFFFFFFLL;
  }
  int64x2_t v31 = (int *)sub_49B168(a1[520] + 24, __ROR8__(*(void *)(*(void *)(a2 + 8) - 8), 32), 0, "transfer");
  int64x2_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 9u && (unsigned __int16 v33 = v32[4]) != 0) {
    unint64_t v34 = *(unsigned int *)((char *)v31 + v33 + 4) | ((unint64_t)*(unsigned int *)((char *)v31 + v33) << 32);
  }
  else {
    unint64_t v34 = 0xFFFFFFFFLL;
  }
  uint64_t v71 = a1;
  uint64_t v35 = sub_BE3D9C((uint64_t *)&v71, v30);
  uint64_t v36 = sub_BE3D9C((uint64_t *)&v71, v34);
  long double v37 = exp(3.14159265 - (double)HIDWORD(v35) * 6.28318531 / 4294967300.0);
  long double v38 = atan((v37 - 1.0 / v37) * 0.5) * 57.2957795 * 0.0174532925;
  long double v39 = exp(3.14159265 - (double)HIDWORD(v36) * 6.28318531 / 4294967300.0);
  long double v40 = atan((v39 - 1.0 / v39) * 0.5) * 57.2957795 * 0.0174532925;
  long double v41 = sin((v38 - v40) * 0.5);
  long double v42 = v41 * v41;
  double v43 = cos(v38);
  long double v44 = v43 * cos(v40);
  long double v45 = sin((((double)v35 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925- ((double)v36 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925)* 0.5);
  long double v46 = atan2(sqrt(v42 + v44 * (v45 * v45)), sqrt(1.0 - (v42 + v44 * (v45 * v45))));
  double v47 = (v46 + v46) * 6372797.56 / 0.9 * 10.0;
  if (v47 >= 0.0)
  {
    if (v47 >= 4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v48 = (uint64_t)(v47 + v47) + 1;
  }
  else
  {
    if (v47 <= -4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v48 = (uint64_t)(v47 + v47);
    if (v48 >= 1) {
      --v48;
    }
  }
  double v47 = (double)(v48 >> 1);
LABEL_45:
  int v49 = (int)v47;
  if ((int)v9 > (int)v47) {
    int v49 = v9;
  }
  if (v49 >= 600) {
    uint64_t v9 = v49;
  }
  else {
    uint64_t v9 = 600;
  }
  unint64_t v50 = *(void **)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return v9;
  }
LABEL_58:
  uint64_t v51 = (int *)sub_49B168(a1[520] + 24, __ROR8__(*v50, 32), 0, "transfer");
  unsigned int v52 = (unsigned __int16 *)((char *)v51 - *v51);
  if (*v52 >= 7u && (unsigned __int16 v53 = v52[3]) != 0) {
    unint64_t v54 = *(unsigned int *)((char *)v51 + v53 + 4) | ((unint64_t)*(unsigned int *)((char *)v51 + v53) << 32);
  }
  else {
    unint64_t v54 = 0xFFFFFFFFLL;
  }
  uint64_t v55 = (int *)sub_49B6BC(a1[522] + 24, __ROR8__(v54, 32), 0, "transfer node");
  int v56 = 0;
  uint64_t v57 = (unsigned __int16 *)((char *)v55 - *v55);
  if (*v57 >= 7u)
  {
    uint64_t v58 = v57[3];
    if (v58) {
      int v56 = *((unsigned __int8 *)v55 + v58);
    }
    else {
      int v56 = 0;
    }
  }
  uint64_t v59 = (int *)sub_49B168(a1[520] + 24, __ROR8__(*(void *)(*(void *)(a2 + 8) - 8), 32), 0, "transfer");
  int v60 = (unsigned __int16 *)((char *)v59 - *v59);
  if (*v60 >= 9u && (unsigned __int16 v61 = v60[4]) != 0) {
    unint64_t v62 = *(unsigned int *)((char *)v59 + v61 + 4) | ((unint64_t)*(unsigned int *)((char *)v59 + v61) << 32);
  }
  else {
    unint64_t v62 = 0xFFFFFFFFLL;
  }
  uint64_t v63 = (int *)sub_49B6BC(a1[522] + 24, __ROR8__(v62, 32), 0, "transfer node");
  unsigned int v64 = (unsigned __int16 *)((char *)v63 - *v63);
  if (*v64 < 7u) {
    return v9;
  }
  uint64_t v65 = v64[3];
  if (!v65 || v56 != 3 || *((unsigned char *)v63 + v65) != 3) {
    return v9;
  }
  uint64_t v66 = a1[509];
  if (*(unsigned char *)(v66 + 17))
  {
    uint64_t v67 = sub_398110(v66 + 24, 0);
    LODWORD(v68) = 0;
    int v69 = &v67[-*(int *)v67];
    if (*(unsigned __int16 *)v69 >= 0x17u)
    {
      uint64_t v68 = *((unsigned __int16 *)v69 + 11);
      if (*((_WORD *)v69 + 11)) {
        LODWORD(v68) = 10 * *(_DWORD *)&v67[v68];
      }
    }
  }
  else
  {
    LODWORD(v68) = 300;
  }
  if ((int)v9 <= (int)v68) {
    return v68;
  }
  else {
    return v9;
  }
}

uint64_t sub_BE3BCC(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[10] - a2[9];
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v6 = 0;
    unint64_t v7 = a2 + 33;
    uint64_t v8 = (v3 >> 3);
    do
    {
      unint64_t v10 = __ROR8__(*(void *)sub_A3F32C(v7, v6), 32);
      unint64_t v11 = (int *)sub_49B6BC(*(void *)(a1 + 4176) + 24, v10, 0, "transfer node");
      uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      unsigned int v13 = *v12;
      if (v13 >= 7 && v12[3] && (*((unsigned char *)v11 + v12[3]) & 0xFE) == 2)
      {
        if (v13 >= 9 && (unsigned __int16 v14 = v12[4]) != 0) {
          unint64_t v15 = *(unsigned int *)((char *)v11 + v14 + 4) | ((unint64_t)*(unsigned int *)((char *)v11 + v14) << 32);
        }
        else {
          unint64_t v15 = 0xFFFFFFFFLL;
        }
        if (v15 != *(_DWORD *)a3 || (v15 & 0xFFFFFFFF00000000) >> 32 != *(_DWORD *)(a3 + 4)) {
          goto LABEL_5;
        }
      }
      else if (*(_DWORD *)a3 != -1 || *(_DWORD *)(a3 + 4) != 0)
      {
        goto LABEL_5;
      }
      int v9 = *(unsigned __int8 *)(a3 + 168);
      if (v9 == 2)
      {
        uint64_t v17 = (int *)sub_49B6BC(*(void *)(a1 + 4176) + 24, v10, 0, "transfer node");
        unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 7u)
        {
          uint64_t v19 = v18[3];
          if (v19)
          {
            if (*((unsigned char *)v17 + v19) == 3) {
              return v6;
            }
          }
        }
        int v9 = *(unsigned __int8 *)(a3 + 168);
      }
      if (!v9)
      {
        uint64_t v20 = (int *)sub_49B6BC(*(void *)(a1 + 4176) + 24, v10, 0, "transfer node");
        int64x2_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 7u)
        {
          uint64_t v22 = v21[3];
          if (v22)
          {
            if (*((unsigned char *)v20 + v22) == 2) {
              return v6;
            }
          }
        }
      }
LABEL_5:
      ++v6;
    }
    while (v8 != v6);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_BE3D9C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = __ROR8__(a2, 32);
  uint64_t v4 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v3, 0, "transfer node");
  unint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 7u || (uint64_t v6 = v5[3]) == 0)
  {
    int v30 = 0;
    goto LABEL_36;
  }
  int v7 = *((unsigned __int8 *)v4 + v6);
  if (v7 != 3)
  {
    if (v7 == 2)
    {
      uint64_t v8 = *a1;
      int v9 = (int *)sub_49B6BC(*(void *)(v8 + 4176) + 24, v3, 0, "transfer node");
      unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      unsigned int v11 = *v10;
      if (v11 >= 7 && v10[3] && (*((unsigned char *)v9 + v10[3]) & 0xFE) == 2)
      {
        if (v11 >= 9 && (unsigned __int16 v12 = v10[4]) != 0) {
          unint64_t v13 = *(unsigned int *)((char *)v9 + v12 + 4) | ((unint64_t)*(unsigned int *)((char *)v9 + v12) << 32);
        }
        else {
          unint64_t v13 = 0xFFFFFFFFLL;
        }
        unint64_t v26 = v13 & 0xFFFFFFFF00000000;
        unint64_t v13 = v13;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      uint64_t v24 = (int *)sub_499804(*(void *)(v8 + 4008) + 24, __ROR8__(v26 | v13, 32), 0, "access point");
      double v25 = (unsigned __int16 *)((char *)v24 - *v24 + 14);
      goto LABEL_29;
    }
    int v30 = v7;
LABEL_36:
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v35, v30);
    int64x2_t v32 = std::string::insert(&v35, 0, "Attempted to obtain coordinate for transfer node of type ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    std::string::size_type v37 = v32->__r_.__value_.__r.__words[2];
    long long v36 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    unint64_t v34 = (void *)sub_2F404((uint64_t)exception, &v36);
  }
  uint64_t v14 = *a1;
  unint64_t v15 = (int *)sub_49B6BC(*(void *)(v14 + 4176) + 24, v3, 0, "transfer node");
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  unsigned int v17 = *v16;
  if (v17 >= 7
    && v16[3]
    && ((*((unsigned char *)v15 + v16[3]) & 0xFE) == 2 ? (v18 = v17 >= 9) : (v18 = 0), v18 && (unsigned __int16 v19 = v16[4]) != 0))
  {
    uint64_t v21 = *(unsigned int *)((char *)v15 + v19);
    uint64_t v20 = *(unsigned int *)((char *)v15 + v19 + 4);
    if (v21 == 1 && (v20 + 3) < 2) {
      return -1;
    }
    uint64_t v23 = v21 << 32;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  uint64_t v24 = (int *)sub_498D5C(*(void *)(v14 + 4120) + 24, __ROR8__(v23 | v20, 32), 0, "stop");
  double v25 = (unsigned __int16 *)((char *)v24 - *v24 + 6);
LABEL_29:
  uint64_t v27 = (uint64_t)v24 + *v25;
  uint64_t v28 = *(unsigned int *)v27;
  LODWORD(v27) = *(_DWORD *)(v27 + 4);
  if (v27 >= 0xFFFFFFFE) {
    uint64_t v27 = 4294967294;
  }
  else {
    uint64_t v27 = v27;
  }
  return v28 | (v27 << 32);
}

void sub_BE402C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE4084(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "algorithm");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  int v5 = sub_BE4368(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)a1 = v5;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "cost_function_name");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a1 + 24) = *(void *)(v6 + 16);
    *(_OWORD *)(a1 + 8) = v7;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "eta_evaluator_name");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    *(void *)(a1 + 48) = *(void *)(v8 + 16);
    *(_OWORD *)(a1 + 32) = v9;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "unpack_paths");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "expect_large_search_space");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 57) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "confine_paths_to_available_regions");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 58) = v12;
  *(unsigned char *)(a1 + 59) = 1;
  return a1;
}

void sub_BE42E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE4368(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 8)
    {
      if (v1 != 16)
      {
        unint64_t v2 = (uint64_t *)a1;
        if (v1 != 22) {
          goto LABEL_33;
        }
        goto LABEL_16;
      }
      if (*(void *)a1 != 0x615F66695F726263 || *(void *)(a1 + 8) != 0x656C62616C696176)
      {
LABEL_33:
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        unint64_t v13 = std::string::append(&v16, "\" provided");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
        long long v17 = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        unint64_t v15 = (void *)sub_2F404((uint64_t)exception, &v17);
      }
      return 1;
    }
    if (*(void *)a1 != 0x617274736B6A6964) {
      goto LABEL_33;
    }
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 8 && **(void **)a1 == 0x617274736B6A6964) {
    return 0;
  }
  if (v3 == 16)
  {
    if (**(void **)a1 == 0x615F66695F726263 && *(void *)(*(void *)a1 + 8) == 0x656C62616C696176) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 != 22) {
    goto LABEL_33;
  }
  unint64_t v2 = *(uint64_t **)a1;
LABEL_16:
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = *(uint64_t *)((char *)v2 + 14);
  if (v5 != 0x687469775F726263 || v6 != 0x5F74656B6375625FLL || v7 != 0x6863726165735F74) {
    goto LABEL_33;
  }
  return 2;
}

void sub_BE4568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE45C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v10 = 9;
  strcpy((char *)__p, "on_street");
  uint64_t v7 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BE4084(a1, v7);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return a1;
}

void sub_BE4670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BE468C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  int v18 = 2;
  sub_C556A0((uint64_t)__p, &v18);
  long long v10 = v26;
  *(_OWORD *)(a1 + 176) = v25;
  *(_OWORD *)(a1 + 192) = v10;
  *(void *)(a1 + 208) = v27;
  long long v11 = v22;
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = v11;
  long long v12 = v24;
  *(_OWORD *)(a1 + 144) = v23;
  *(_OWORD *)(a1 + 160) = v12;
  long long v13 = v20;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 96) = v13;
  sub_BE4818(a1, a2, a3, (uint64_t)__p);
  if (BYTE8(v20))
  {
    sub_BE7040(a5, (uint64_t *)__p);
  }
  else
  {
    sub_BE4C28(a1, a2, a3, a4, a5);
    if (*a5 != a5[1]) {
      *(double *)(a1 + 144) = *(double *)(a1 + 144) + 1.0;
    }
  }
  if (BYTE8(v20))
  {
    long long v14 = (char *)__p[0];
    if (__p[0])
    {
      unint64_t v15 = (char *)__p[1];
      std::string v16 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          int v17 = *((_DWORD *)v15 - 2);
          v15 -= 1432;
          if (v17 == 2)
          {
            unint64_t v15 = (char *)sub_9F6418((uint64_t)v15);
          }
          else if (!v17)
          {
            unint64_t v15 = (char *)sub_9F636C((uint64_t)v15);
          }
        }
        while (v15 != v14);
        std::string v16 = __p[0];
      }
      __p[1] = v14;
      operator delete(v16);
    }
  }
}

void sub_BE4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE537C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE4818(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)long double v44 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v46 = 1065353216;
  uint64_t v7 = *(uint64_t **)(a3 + 8);
  for (unint64_t i = *(uint64_t **)(a3 + 16); v7 != i; v7 += 204)
  {
    if (*((_DWORD *)v7 + 404) == -1 && *((unsigned char *)v7 + 168) == 2 && (HIDWORD(*v7) != 1 || *v7 + 3 >= 2))
    {
      uint64_t v10 = *(void *)(a1 + 72);
      long long v11 = (int *)sub_498D5C(*(void *)(v10 + 4120) + 24, __ROR8__(*v7, 32), 0, "stop");
      long long v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 0xDu)
      {
        unsigned __int16 v13 = v12[6];
        if (v13)
        {
          uint64_t v15 = *(unsigned int *)((char *)v11 + v13);
          uint64_t v14 = *(unsigned int *)((char *)v11 + v13 + 4);
          if (v14 != -1 && v15 != 0)
          {
            int v17 = (int *)sub_8ED928(*(void *)(v10 + 4128) + 24, __ROR8__(v14 | (v15 << 32), 32), 0, "station");
            int v18 = (unsigned __int16 *)((char *)v17 - *v17);
            if (*v18 >= 0xBu)
            {
              uint64_t v19 = v18[5];
              if (v19)
              {
                if (*(int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19))) {
                  sub_B5AAE8((uint64_t)v44, v7, v7);
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v21 = *(void *)(a2 + 8);
  uint64_t v22 = *(void *)(a2 + 16);
  long long v20 = (void *)(a2 + 8);
  if (v21 == v22) {
    goto LABEL_48;
  }
  uint64_t v23 = 0;
  do
  {
    uint64_t v24 = v23;
    if (*(unsigned char *)(v21 + 168) != 2) {
      goto LABEL_41;
    }
    if (!sub_A1E760(v44, (uint64_t *)v21)) {
      goto LABEL_41;
    }
    unint64_t v25 = *(unsigned int *)(v21 + 1616);
    if (v25 == -1) {
      goto LABEL_41;
    }
    if (*(unsigned char *)(sub_BE601C(v20, v25) + 168) != 2) {
      goto LABEL_41;
    }
    uint64_t v26 = *(void *)(a1 + 72);
    uint64_t v27 = *(void *)v21;
    if (HIDWORD(*(void *)v21) == 1 && (v27 + 3) < 2) {
      goto LABEL_41;
    }
    uint64_t v28 = (int *)sub_498D5C(*(void *)(v26 + 4120) + 24, __ROR8__(v27, 32), 0, "stop");
    unsigned __int16 v29 = (unsigned __int16 *)((char *)v28 - *v28);
    if (*v29 < 0xDu) {
      goto LABEL_41;
    }
    unsigned __int16 v30 = v29[6];
    if (!v30) {
      goto LABEL_41;
    }
    uint64_t v32 = *(unsigned int *)((char *)v28 + v30);
    uint64_t v31 = *(unsigned int *)((char *)v28 + v30 + 4);
    BOOL v33 = v31 == -1 || v32 == 0;
    if (!v33
      && (unint64_t v34 = (int *)sub_8ED928(*(void *)(v26 + 4128) + 24, __ROR8__(v31 | (v32 << 32), 32), 0, "station"),
          std::string v35 = (unsigned __int16 *)((char *)v34 - *v34),
          *v35 >= 0xBu)
      && (uint64_t v36 = v35[5]) != 0
      && *(int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36)))
    {
      uint64_t v23 = v21;
      if (v24)
      {
        uint64_t v23 = v24;
        if (*(_DWORD *)(v21 + 176) < *(_DWORD *)(v24 + 176)) {
          uint64_t v23 = v21;
        }
      }
    }
    else
    {
LABEL_41:
      uint64_t v23 = v24;
    }
    v21 += 1632;
  }
  while (v21 != v22);
  if (!v23)
  {
LABEL_48:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    uint64_t v37 = v23 + 184;
    int v38 = *(_DWORD *)(v23 + 1608);
    int v49 = v38;
    switch(v38)
    {
      case 2:
        sub_A0E244((uint64_t)&v47, v37);
        break;
      case 1:
        uint64_t v47 = *(void *)v37;
        int v48 = *(_DWORD *)(v37 + 8);
        break;
      case 0:
        sub_BE6528((uint64_t)&v47, v37);
        break;
    }
    sub_BE71E0(&v42, (uint64_t)&v47, 1uLL);
    *(unsigned char *)(a4 + 24) = 1;
    *(_OWORD *)a4 = v42;
    *(void *)(a4 + 16) = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    if (v49 == 2)
    {
      sub_9F6418((uint64_t)&v47);
    }
    else if (!v49)
    {
      sub_9F636C((uint64_t)&v47);
    }
  }
  long double v39 = __p[0];
  if (__p[0])
  {
    do
    {
      long double v40 = (void *)*v39;
      operator delete(v39);
      long double v39 = v40;
    }
    while (v40);
  }
  long double v41 = v44[0];
  v44[0] = 0;
  if (v41) {
    operator delete(v41);
  }
}

void sub_BE4BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE4BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_BE5400((uint64_t)va1);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE4C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE4C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE4C28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v51 = 0;
  uint64_t v52 = -1;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  unsigned __int16 v53 = 0;
  char v56 = 0;
  int v57 = 0x7FFFFFFF;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = xmmword_20B9250;
  strcpy(v59.__r_.__value_.__l.__data_, "transit_initial_walking");
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = xmmword_20B9800;
  strcpy(v60.__r_.__value_.__l.__data_, "cost_function_based_evaluation");
  unsigned __int32 v61 = 16843008;
  int v58 = *(_DWORD *)a1;
  std::string::operator=(&v59, (const std::string *)(a1 + 8));
  std::string::operator=(&v60, (const std::string *)(a1 + 32));
  v10.i32[0] = *(_DWORD *)(a1 + 56);
  int16x8_t v11 = (int16x8_t)vmovl_u8(v10);
  *(int16x4_t *)v11.i8 = vzip1_s16(*(int16x4_t *)v11.i8, (int16x4_t)vext_s8(*(int8x8_t *)v11.i8, (int8x8_t)vdup_lane_s16(*(int16x4_t *)v11.i8, 2), 6uLL));
  unsigned __int32 v61 = vmovn_s16(v11).u32[0];
  int v57 = a4;
  sub_BE7374((char **)&v53, 1uLL);
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  sub_BE5434(a1, a2, v62);
  *(_OWORD *)long long __p = *(_OWORD *)v62;
  uint64_t v12 = v63;
  v62[1] = 0;
  uint64_t v63 = 0;
  v62[0] = 0;
  uint64_t v51 = v12;
  uint64_t v52 = v64;
  *(_OWORD *)int v48 = v65;
  uint64_t v49 = v66;
  uint64_t v66 = 0;
  long long v65 = 0uLL;
  sub_BE5434(a1, a3, v62);
  uint64_t v13 = v53;
  uint64_t v14 = *(void **)v53;
  if (*(void *)v53)
  {
    *((void *)v53 + 1) = v14;
    operator delete(v14);
    void *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v62;
  v13[2] = v63;
  v62[0] = 0;
  v62[1] = 0;
  uint64_t v63 = 0;
  void v13[3] = v64;
  uint64_t v15 = v46[0];
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
    uint64_t v15 = v62[0];
  }
  *(_OWORD *)int v46 = v65;
  uint64_t v47 = v66;
  uint64_t v66 = 0;
  long long v65 = 0uLL;
  if (v15)
  {
    v62[1] = v15;
    operator delete(v15);
  }
  sub_725D0((uint64_t)v45);
  sub_BEE314((uint64_t)v62, *(void *)(a1 + 64));
  sub_BEE320((uint64_t)v62, (uint64_t)__p);
  sub_C55754(a1 + 80, (uint64_t *)&v43);
  *(double *)(a1 + 112) = sub_72688((uint64_t)v45) + *(double *)(a1 + 112);
  int v17 = (char *)v43;
  std::string v16 = v44;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (v17 != v16)
  {
    int v18 = (unsigned int *)sub_BE5BD8(v48, *((void *)v17 + 1));
    sub_BE59E0(a2, *v18, (uint64_t *)v62);
    sub_BE7540(a5, a5[1], (uint64_t)v62[0], (uint64_t)v62[1], 0xED6866F8D962AE7BLL * (((char *)v62[1] - (char *)v62[0]) >> 3));
    uint64_t v19 = (char *)v62[0];
    if (v62[0])
    {
      long long v20 = (char *)v62[1];
      uint64_t v21 = v62[0];
      if (v62[1] != v62[0])
      {
        do
        {
          int v22 = *((_DWORD *)v20 - 2);
          v20 -= 1432;
          if (v22 == 2)
          {
            long long v20 = (char *)sub_9F6418((uint64_t)v20);
          }
          else if (!v22)
          {
            long long v20 = (char *)sub_9F636C((uint64_t)v20);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v62[0];
      }
      v62[1] = v19;
      operator delete(v21);
    }
    uint64_t v23 = (unsigned int *)sub_BE5BD8(v48, *((void *)v17 + 1));
    uint64_t v24 = sub_BE601C((void *)(a2 + 8), *v23);
    unint64_t v25 = (unsigned int *)sub_BE5BD8(v46, *((void *)v17 + 3));
    uint64_t v26 = sub_BE601C((void *)(a3 + 8), *v25);
    sub_BE6C90((uint64_t)v62, v24, v26, (uint64_t)(v17 + 48), *((_DWORD *)v17 + 10));
    unint64_t v27 = a5[1];
    if (v27 >= a5[2])
    {
      uint64_t v28 = sub_BE81D0(a5, (uint64_t)v62);
    }
    else
    {
      *(_DWORD *)(v27 + 1424) = -1;
      sub_BE83BC(v27, (uint64_t)v62);
      *(_DWORD *)(v27 + 1424) = 2;
      uint64_t v28 = v27 + 1432;
    }
    a5[1] = v28;
    sub_9F6418((uint64_t)v62);
    unsigned __int16 v29 = (unsigned int *)sub_BE5BD8(v46, *((void *)v17 + 3));
    sub_BE59E0(a3, *v29, (uint64_t *)v62);
    sub_BE7540(a5, a5[1], (uint64_t)v62[0], (uint64_t)v62[1], 0xED6866F8D962AE7BLL * (((char *)v62[1] - (char *)v62[0]) >> 3));
    unsigned __int16 v30 = (char *)v62[0];
    if (v62[0])
    {
      uint64_t v31 = (char *)v62[1];
      uint64_t v32 = v62[0];
      if (v62[1] != v62[0])
      {
        do
        {
          int v33 = *((_DWORD *)v31 - 2);
          v31 -= 1432;
          if (v33 == 2)
          {
            uint64_t v31 = (char *)sub_9F6418((uint64_t)v31);
          }
          else if (!v33)
          {
            uint64_t v31 = (char *)sub_9F636C((uint64_t)v31);
          }
        }
        while (v31 != v30);
        uint64_t v32 = v62[0];
      }
      v62[1] = v30;
      operator delete(v32);
    }
    int v17 = (char *)v43;
  }
  if (v17)
  {
    unint64_t v34 = v44;
    std::string v35 = v17;
    if (v44 != v17)
    {
      do
      {
        if (*(v34 - 8))
        {
          sub_3AFFFC((uint64_t)(v34 - 1064));
          *(v34 - 8) = 0;
        }
        v34 -= 1112;
      }
      while (v34 != v17);
      std::string v35 = v43;
    }
    long double v44 = v17;
    operator delete(v35);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      uint64_t v36 = (char *)v53;
      if (v53) {
        goto LABEL_46;
      }
LABEL_56:
      long long v42 = __p[0];
      if (!__p[0]) {
        return;
      }
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  uint64_t v36 = (char *)v53;
  if (!v53) {
    goto LABEL_56;
  }
LABEL_46:
  uint64_t v37 = v54;
  int v38 = v36;
  if (v54 != v36)
  {
    long double v39 = v54;
    do
    {
      long double v41 = (void *)*((void *)v39 - 4);
      v39 -= 32;
      long double v40 = v41;
      if (v41)
      {
        *((void *)v37 - 3) = v40;
        operator delete(v40);
      }
      uint64_t v37 = v39;
    }
    while (v39 != v36);
    int v38 = v53;
  }
  unint64_t v54 = v36;
  operator delete(v38);
  long long v42 = __p[0];
  if (__p[0])
  {
LABEL_57:
    __p[1] = v42;
    operator delete(v42);
  }
}

void sub_BE520C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_9F6418((uint64_t)&a45);
  sub_BE5304(v45);
  sub_BE5DE8((void **)&a9);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
    sub_BE5E58((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_BE5E58((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void **sub_BE5304(void **a1)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
      {
        int v5 = *(_DWORD *)(v3 - 8);
        v3 -= 1432;
        if (v5 == 2)
        {
          uint64_t v3 = sub_9F6418(v3);
        }
        else if (!v5)
        {
          uint64_t v3 = sub_9F636C(v3);
        }
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_BE537C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = *(void **)a1;
      if ((void *)v3 != v2)
      {
        do
        {
          int v5 = *(_DWORD *)(v3 - 8);
          v3 -= 1432;
          if (v5 == 2)
          {
            uint64_t v3 = sub_9F6418(v3);
          }
          else if (!v5)
          {
            uint64_t v3 = sub_9F636C(v3);
          }
        }
        while ((void *)v3 != v2);
        uint64_t v4 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_BE5400(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 1424);
  if (v1 == 2) {
    return sub_9F6418(result);
  }
  if (!v1) {
    return sub_9F636C(result);
  }
  return result;
}

void sub_BE5434(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v52 = 0;
  unsigned __int16 v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = -1;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v51 = 0;
  uint64_t v45 = -84215045 * ((unint64_t)(v4 - v3) >> 5);
  int v46 = (void *)(a2 + 8);
  if (v45)
  {
    for (unint64_t i = 0; i != v45; ++i)
    {
      uint64_t v6 = sub_BE601C(v46, i);
      uint64_t v7 = v6;
      int v8 = *(unsigned __int8 *)(v6 + 168);
      if (v8 == 3)
      {
        if (*(_DWORD *)(v6 + 1616) != -1) {
          goto LABEL_42;
        }
        sub_BF5238(*(void **)(a1 + 72), *(void **)(a1 + 64), v6, *(_DWORD *)(v6 + 176), 1, (uint64_t)&__p);
        sub_BE8478((char **)&v52, (uint64_t)v53, (char *)__p, v48, 0xCCCCCCCCCCCCCCCDLL * ((v48 - (unsigned char *)__p) >> 4));
        if (__p)
        {
          int v48 = (char *)__p;
          operator delete(__p);
        }
        int v8 = *(unsigned __int8 *)(v7 + 168);
      }
      if (v8 == 1)
      {
        if (*(_DWORD *)(v7 + 1616) != -1 && *(_DWORD *)(v7 + 1608) != 1) {
          goto LABEL_42;
        }
        sub_BF5238(*(void **)(a1 + 72), *(void **)(a1 + 64), v7, *(_DWORD *)(v7 + 176), 1, (uint64_t)&__p);
        sub_BE8478((char **)&v52, (uint64_t)v53, (char *)__p, v48, 0xCCCCCCCCCCCCCCCDLL * ((v48 - (unsigned char *)__p) >> 4));
        if (__p)
        {
          int v48 = (char *)__p;
          operator delete(__p);
        }
        int v8 = *(unsigned __int8 *)(v7 + 168);
      }
      if (!v8)
      {
        if (!sub_BE5F1C((uint64_t *)(*(void *)(a1 + 72) + 4008), *(void *)v7, 1)
          && (*(_DWORD *)(v7 + 1616) == -1 || !*(_DWORD *)(v7 + 1608)))
        {
          sub_BF5238(*(void **)(a1 + 72), *(void **)(a1 + 64), v7, *(_DWORD *)(v7 + 176), 1, (uint64_t)&__p);
          sub_BE8478((char **)&v52, (uint64_t)v53, (char *)__p, v48, 0xCCCCCCCCCCCCCCCDLL * ((v48 - (unsigned char *)__p) >> 4));
          if (__p)
          {
            int v48 = (char *)__p;
            operator delete(__p);
          }
        }
        if (*(unsigned char *)(v7 + 168) != 2) {
          goto LABEL_42;
        }
LABEL_27:
        if (*(_DWORD *)(v7 + 1616) == -1 && !*(unsigned char *)(v7 + 1625))
        {
          uint64_t v10 = *(void *)(a1 + 72);
          uint64_t v11 = *(void *)v7;
          if (HIDWORD(*(void *)v7) == 1 && (v11 + 3) < 2) {
            goto LABEL_40;
          }
          uint64_t v12 = (int *)sub_498D5C(*(void *)(v10 + 4120) + 24, __ROR8__(v11, 32), 0, "stop");
          uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
          if (*v13 < 0xDu) {
            goto LABEL_40;
          }
          unsigned __int16 v14 = v13[6];
          if (!v14) {
            goto LABEL_40;
          }
          uint64_t v16 = *(unsigned int *)((char *)v12 + v14);
          uint64_t v15 = *(unsigned int *)((char *)v12 + v14 + 4);
          BOOL v17 = v15 == -1 || v16 == 0;
          if (v17
            || (int v18 = (int *)sub_8ED928(*(void *)(v10 + 4128) + 24, __ROR8__(v15 | (v16 << 32), 32), 0, "station"),
                uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18),
                *v19 < 0xBu)
            || (uint64_t v20 = v19[5]) == 0
            || !*(int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20)))
          {
LABEL_40:
            sub_BF5238(*(void **)(a1 + 72), *(void **)(a1 + 64), v7, *(_DWORD *)(v7 + 176), 1, (uint64_t)&__p);
            sub_BE8478((char **)&v52, (uint64_t)v53, (char *)__p, v48, 0xCCCCCCCCCCCCCCCDLL * ((v48 - (unsigned char *)__p) >> 4));
            if (__p)
            {
              int v48 = (char *)__p;
              operator delete(__p);
            }
          }
        }
        goto LABEL_42;
      }
      if (v8 == 2) {
        goto LABEL_27;
      }
LABEL_42:
      uint64_t v21 = (char *)v49;
      int v22 = v50;
      unint64_t v23 = (v50 - (unsigned char *)v49) >> 2;
      uint64_t v24 = v52;
      unint64_t v25 = v53;
      unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (unsigned char *)v52) >> 4);
      while (v23 < v26)
      {
        if (v22 < v51)
        {
          *(_DWORD *)int v22 = i;
          uint64_t v27 = (uint64_t)(v22 + 4);
          goto LABEL_44;
        }
        unint64_t v28 = v23 + 1;
        if ((v23 + 1) >> 62) {
          sub_2E00();
        }
        uint64_t v29 = v51 - v21;
        if ((v51 - v21) >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 62) {
            sub_188D718();
          }
          uint64_t v31 = operator new(4 * v30);
          uint64_t v32 = &v31[4 * v23];
          _DWORD *v32 = i;
          uint64_t v27 = (uint64_t)(v32 + 1);
          if (v22 == v21) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v31 = 0;
          uint64_t v32 = (_DWORD *)(4 * v23);
          *(_DWORD *)(4 * v23) = i;
          uint64_t v27 = 4 * v23 + 4;
          if (v22 == v21) {
            goto LABEL_61;
          }
        }
        unint64_t v33 = v22 - 4 - v21;
        if (v33 >= 0xBC)
        {
          uint64_t v36 = 4 * v23;
          if (&v31[4 * v23 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[4 * v23 - 4])
          {
            unint64_t v34 = v22;
          }
          else if (&v22[-(v33 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v22 - 4)
          {
            unint64_t v34 = v22;
          }
          else if ((unint64_t)(v22 - &v31[v36]) >= 0x20)
          {
            uint64_t v37 = (v33 >> 2) + 1;
            uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v34 = &v22[-v38];
            uint64_t v32 = (_DWORD *)((char *)v32 - v38);
            long double v39 = &v31[v36 - 16];
            long double v40 = v22 - 16;
            uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              *long double v39 = v42;
              v39 -= 2;
              v40 -= 32;
              v41 -= 8;
            }
            while (v41);
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_61;
            }
          }
          else
          {
            unint64_t v34 = v22;
          }
        }
        else
        {
          unint64_t v34 = v22;
        }
        do
        {
          int v35 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *--uint64_t v32 = v35;
        }
        while (v34 != v21);
LABEL_61:
        uint64_t v49 = v32;
        unint64_t v50 = (char *)v27;
        uint64_t v51 = &v31[4 * v30];
        if (v21)
        {
          operator delete(v21);
          uint64_t v21 = (char *)v49;
          uint64_t v24 = v52;
          unint64_t v25 = v53;
        }
        else
        {
          uint64_t v21 = (char *)v32;
        }
LABEL_44:
        unint64_t v50 = (char *)v27;
        unint64_t v23 = (v27 - (uint64_t)v21) >> 2;
        unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - v24) >> 4);
        int v22 = (char *)v27;
      }
    }
  }
  sub_BE6EE0(a3, (uint64_t)&v52, (uint64_t)&v49);
  if (v49)
  {
    unint64_t v50 = (char *)v49;
    operator delete(v49);
  }
  if (v52)
  {
    unsigned __int16 v53 = v52;
    operator delete(v52);
  }
}

void sub_BE5954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v23 = a18;
    if (!a18)
    {
LABEL_3:
      uint64_t v24 = a21;
      if (!a21) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v23 = a18;
    if (!a18) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  uint64_t v24 = a21;
  if (!a21) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_BE59E0(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v19, "vertex id out of range");
    int v18 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2 != -1)
  {
    unint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v4;
      if (*(_DWORD *)(*v4 + 1632 * v6 + 1616) != -1)
      {
        uint64_t v8 = v7 + 1632 * v6 + 184;
        unint64_t v9 = a3[1];
        if (v9 >= a3[2])
        {
          uint64_t v12 = sub_BE625C(a3, v8);
        }
        else
        {
          uint64_t v10 = v7 + 1632 * v6;
          *(_DWORD *)(v9 + 1424) = *(_DWORD *)(v10 + 1608);
          int v11 = *(_DWORD *)(v10 + 1608);
          switch(v11)
          {
            case 2:
              sub_A0E244(v9, v8);
              break;
            case 1:
              uint64_t v13 = *(void *)v8;
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
              *(void *)unint64_t v9 = v13;
              break;
            case 0:
              sub_BE6528(v9, v8);
              break;
          }
          uint64_t v12 = v9 + 1432;
          a3[1] = v9 + 1432;
        }
        a3[1] = v12;
      }
      unint64_t v6 = *(unsigned int *)(sub_BE601C(v4, v6) + 1616);
    }
    while (v6 != -1);
  }
  if (!*(unsigned char *)a1)
  {
    unint64_t v15 = *a3;
    uint64_t v14 = a3[1];
    if (*a3 != v14)
    {
      for (unint64_t i = v14 - 1432; v15 < i; i -= 1432)
      {
        sub_BE66D0(v15, i);
        v15 += 1432;
      }
    }
  }
}

void sub_BE5B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE5BD8(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_BE5D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void **sub_BE5DE8(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          sub_3AFFFC((uint64_t)(v3 - 1064));
          *(v3 - 8) = 0;
        }
        v3 -= 1112;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_BE5E58(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      unint64_t v2 = *(char **)(a1 + 32);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_9:
      int v5 = *(char **)(a1 + 40);
      unint64_t v6 = v2;
      if (v5 != v2)
      {
        long long v7 = *(char **)(a1 + 40);
        do
        {
          long long v9 = (void *)*((void *)v7 - 4);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *((void *)v5 - 3) = v8;
            operator delete(v8);
          }
          int v5 = v7;
        }
        while (v7 != v2);
        unint64_t v6 = *(char **)(a1 + 32);
      }
      *(void *)(a1 + 40) = v2;
      operator delete(v6);
      uint64_t v3 = *(void **)a1;
      if (*(void *)a1) {
        goto LABEL_5;
      }
      return a1;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  unint64_t v2 = *(char **)(a1 + 32);
  if (v2) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_5:
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_BE5F1C(uint64_t *a1, uint64_t a2, char a3)
{
  char v17 = a3;
  uint64_t v4 = (int *)sub_499804(*a1 + 24, __ROR8__(a2, 32), 0, "access point");
  int v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 < 0x15u) {
    return 0;
  }
  uint64_t v6 = v5[10];
  if (!v6) {
    return 0;
  }
  long long v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  long long v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  v15[0] = a1;
  v15[1] = (uint64_t *)&v17;
  int v8 = *v7;
  long long v19 = v7 + 1;
  std::string v18 = &v7[2 * v8 + 1];
  sub_BE6D78(&v19, &v18, &v12, (uint64_t)&v16, v15);
  long long v9 = v12;
  uint64_t v10 = v13;
  if (v12)
  {
    long long v13 = v12;
    operator delete(v12);
  }
  return v9 != v10;
}

void sub_BE6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE601C(void *a1, unint64_t a2)
{
  if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 1632 * a2;
}

void sub_BE617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_BE625C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xED6866F8D962AE7BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2DC3EED6866F8DLL) {
    sub_2E00();
  }
  if (0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3);
  }
  if (0xED6866F8D962AE7BLL * ((a1[2] - *a1) >> 3) >= 0x16E1F76B4337C6) {
    unint64_t v5 = 0x2DC3EED6866F8DLL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x2DC3EED6866F8DLL) {
    sub_188D718();
  }
  uint64_t v7 = 1432 * v5;
  int v8 = (char *)operator new(1432 * v5);
  uint64_t v9 = (uint64_t)&v8[1432 * v3];
  uint64_t v10 = &v8[v7];
  unint64_t v25 = &v8[v7];
  int v11 = *(_DWORD *)(a2 + 1424);
  *(_DWORD *)(v9 + 1424) = v11;
  if (v11 == 2)
  {
    sub_A0E244(v9, a2);
    goto LABEL_12;
  }
  if (v11 != 1)
  {
    if (!v11) {
      sub_BE6528(v9, a2);
    }
LABEL_12:
    uint64_t v12 = v9 + 1432;
    uint64_t v24 = v9 + 1432;
    uint64_t v14 = (char *)*a1;
    long long v13 = (char *)a1[1];
    if (v13 != (char *)*a1) {
      goto LABEL_13;
    }
LABEL_25:
    *a1 = v9;
    a1[1] = v12;
    a1[2] = (uint64_t)v10;
    goto LABEL_32;
  }
  *(void *)uint64_t v9 = *(void *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v12 = v9 + 1432;
  uint64_t v24 = v9 + 1432;
  uint64_t v14 = (char *)*a1;
  long long v13 = (char *)a1[1];
  if (v13 == (char *)*a1) {
    goto LABEL_25;
  }
LABEL_13:
  uint64_t v15 = 0;
  do
  {
    std::string v17 = (void *)(v9 + v15 - 1432);
    std::string v18 = &v13[v15 - 1432];
    *(_DWORD *)(v9 + v15 - 8) = *(_DWORD *)&v13[v15 - 8];
    int v19 = *(_DWORD *)&v13[v15 - 8];
    switch(v19)
    {
      case 2:
        sub_A0E244((uint64_t)v17, (uint64_t)v18);
        break;
      case 1:
        uint64_t v16 = *(void *)v18;
        *(_DWORD *)(v9 + v15 - 1424) = *(_DWORD *)&v13[v15 - 1424];
        *std::string v17 = v16;
        break;
      case 0:
        sub_BE6528((uint64_t)v17, (uint64_t)v18);
        break;
    }
    v15 -= 1432;
  }
  while (&v13[v15] != v14);
  std::string::size_type v20 = (char *)*a1;
  long long v13 = (char *)a1[1];
  uint64_t v21 = v9 + v15;
  uint64_t v12 = v24;
  *a1 = v21;
  a1[1] = v24;
  a1[2] = (uint64_t)v25;
  if (v13 != v20)
  {
    do
    {
      int v22 = *((_DWORD *)v13 - 2);
      v13 -= 1432;
      if (v22 == 2)
      {
        sub_9F6418((uint64_t)v13);
      }
      else if (!v22)
      {
        sub_9F636C((uint64_t)v13);
      }
    }
    while (v13 != v20);
    long long v13 = v20;
  }
LABEL_32:
  if (v13) {
    operator delete(v13);
  }
  return v12;
}

void sub_BE6498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE64B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BE64B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 1432;
      *(void *)(a1 + 16) = i - 1432;
      int v5 = *(_DWORD *)(i - 8);
      if (v5 != 2) {
        break;
      }
      sub_9F6418(v4);
LABEL_4:
      uint64_t i = *(void *)(a1 + 16);
      if (i == v3) {
        goto LABEL_8;
      }
    }
    if (v5) {
      goto LABEL_4;
    }
    sub_9F636C(v4);
  }
LABEL_8:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_BE6528(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v4)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  int v5 = (void *)(a2 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  int v6 = *(_DWORD *)(a2 + 336);
  if (v6 == 1)
  {
    sub_44479C(a1 + 176, (uint64_t)v5);
  }
  else if (!v6)
  {
    *(void *)(a1 + 176) = *v5;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  int v8 = *(unsigned char **)(a2 + 360);
  uint64_t v7 = *(unsigned char **)(a2 + 368);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 360) = v10;
    *(void *)(a1 + 368) = v10;
    int v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 376) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 368) = v11;
  }
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  return a1;
}

void sub_BE6630(_Unwind_Exception *a1)
{
  sub_BE6670(v1);
  _Unwind_Resume(a1);
}

void sub_BE6644(_Unwind_Exception *a1)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 368) = v5;
    operator delete(v5);
  }
  sub_BE6670(v2);
  sub_BE6670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BE6670(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(void *)(a1 + 112) = v3;
      operator delete(v3);
    }
    int v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(void *)(a1 + 80) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_BE66D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 1424);
  int v23 = v4;
  switch(v4)
  {
    case 2:
      sub_A0E244((uint64_t)&v5, a1);
      break;
    case 1:
      uint64_t v5 = *(void *)a1;
      int v6 = *(_DWORD *)(a1 + 8);
      break;
    case 0:
      sub_BE6528((uint64_t)&v5, a1);
      break;
  }
  sub_BE6844(a1, a2);
  sub_BE6844(a2, (uint64_t)&v5);
  if (v23 == 2)
  {
    sub_9F6418((uint64_t)&v5);
  }
  else if (!v23)
  {
    if (__p)
    {
      int v22 = __p;
      operator delete(__p);
    }
    if (v20 == 1)
    {
      if (v18)
      {
        int v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        std::string v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        uint64_t v15 = v14;
        operator delete(v14);
      }
    }
    if (v13 == 1)
    {
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      if (v9)
      {
        uint64_t v10 = v9;
        operator delete(v9);
      }
      if (v7)
      {
        int v8 = v7;
        operator delete(v7);
      }
    }
  }
}

void sub_BE6838(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t sub_BE6844(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 1424);
  int v5 = *(_DWORD *)(a2 + 1424);
  if (v4 != v5)
  {
    uint64_t v7 = (int *)(a1 + 1424);
    int v8 = (int *)(a2 + 1424);
    if (v4 == 2)
    {
      sub_9F6418(a1);
    }
    else
    {
      if (v4) {
        goto LABEL_14;
      }
      sub_9F636C(a1);
    }
    int v5 = *v8;
LABEL_14:
    switch(v5)
    {
      case 2:
        sub_A0E244(a1, a2);
        break;
      case 1:
        uint64_t v11 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)a1 = v11;
        break;
      case 0:
        sub_BE6528(a1, a2);
        break;
    }
    goto LABEL_20;
  }
  if (v4)
  {
    sub_BE699C(v4, a2, a1);
    return a1;
  }
  sub_BE6A78(a1, a2);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  sub_BE6A78(a1 + 176, a2 + 176);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  int64_t v9 = *(void **)(a1 + 360);
  if (v9)
  {
    *(void *)(a1 + 368) = v9;
    operator delete(v9);
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
  }
  uint64_t v10 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v10;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  uint64_t v7 = (int *)(a1 + 384);
  int v8 = (int *)(a2 + 384);
LABEL_20:
  *uint64_t v7 = *v8;
  return a1;
}

void sub_BE699C(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 2)
  {
    sub_BE6A78(a3, a2);
    *(unsigned char *)(a3 + 168) = *(unsigned char *)(a2 + 168);
    sub_BE6A78(a3 + 176, a2 + 176);
    *(unsigned char *)(a3 + 344) = *(unsigned char *)(a2 + 344);
    uint64_t v6 = a3 + 352;
    if (*(unsigned char *)(a2 + 1408))
    {
      uint64_t v7 = a2 + 352;
      if (*(unsigned char *)(a3 + 1408))
      {
        sub_8E5980(v6, v7);
        *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
        return;
      }
      sub_463750(v6, v7);
      *(unsigned char *)(a3 + 1408) = 1;
    }
    else if (*(unsigned char *)(a3 + 1408))
    {
      sub_3AFFFC(v6);
      *(unsigned char *)(a3 + 1408) = 0;
      *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
      return;
    }
    *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
    return;
  }
  if (a1 == 1)
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)a3 = v5;
  }
}

uint64_t sub_BE6A78(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (result != a2)
  {
    int v4 = *(_DWORD *)(result + 160);
    int v5 = *(_DWORD *)(a2 + 160);
    if (v4 == v5)
    {
      if (v4 == 1)
      {
        sub_BE6B7C(result, (uint64_t *)a2);
        return v2;
      }
      else if (!v4)
      {
        *(void *)float result = *(void *)a2;
      }
    }
    else
    {
      if (v4 == 1)
      {
        uint64_t v6 = *(void **)(result + 128);
        if (v6)
        {
          *(void *)(v2 + 136) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v2 + 104);
        if (v7)
        {
          *(void *)(v2 + 112) = v7;
          operator delete(v7);
        }
        int v8 = *(void **)(v2 + 72);
        if (v8)
        {
          *(void *)(v2 + 80) = v8;
          operator delete(v8);
        }
        int v5 = *(_DWORD *)(a2 + 160);
      }
      if (v5 == 1)
      {
        sub_44479C(v2, a2);
      }
      else if (!v5)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 160);
        return v2;
      }
      *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 160);
      return v2;
    }
  }
  return result;
}

__n128 sub_BE6B7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)((char *)a2 + 63);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  int64_t v9 = (void *)(a1 + 72);
  int v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(void *)(a1 + 88) = a2[11];
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  int v10 = *((_DWORD *)a2 + 24);
  uint64_t v11 = *(void **)(a1 + 104);
  *(unsigned char *)(a1 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v10;
  if (v11)
  {
    *(void *)(a1 + 112) = v11;
    operator delete(v11);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(void *)(a1 + 120) = a2[15];
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  uint64_t v12 = *(void **)(a1 + 128);
  if (v12)
  {
    *(void *)(a1 + 136) = v12;
    operator delete(v12);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  __n128 result = *((__n128 *)a2 + 8);
  *(__n128 *)(a1 + 128) = result;
  *(void *)(a1 + 144) = a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  int v14 = *((_DWORD *)a2 + 38);
  *(_DWORD *)(a1 + 155) = *(_DWORD *)((char *)a2 + 155);
  *(_DWORD *)(a1 + 152) = v14;
  return result;
}

uint64_t sub_BE6C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v10 = *(_DWORD *)(a2 + 160);
  if (v10 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v10)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v11 = (void *)(a1 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 160);
  int v12 = *(_DWORD *)(a3 + 160);
  if (v12 == 1)
  {
    sub_44479C((uint64_t)v11, a3);
  }
  else if (!v12)
  {
    void *v11 = *(void *)a3;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a3 + 168);
  int v13 = *(unsigned __int8 *)(a4 + 1056);
  *(unsigned char *)(a1 + 1408) = v13;
  if (v13) {
    sub_7A3ACC(a1 + 352, a4);
  }
  *(_DWORD *)(a1 + 1416) = a5;
  return a1;
}

void sub_BE6D60(_Unwind_Exception *a1)
{
  sub_BE6670(v1);
  _Unwind_Resume(a1);
}

void **sub_BE6D78(unsigned int **a1, unsigned int **a2, void **a3, uint64_t a4, uint64_t **a5)
{
  unint64_t v25 = a3;
  long long v5 = *a1;
  if (*a1 != *a2)
  {
    while (1)
    {
      int v10 = *a5;
      uint64_t v11 = **a5;
      if (!*(unsigned char *)(v11 + 16)) {
        break;
      }
      if (sub_2AB7E4(*(void *)v11))
      {
        uint64_t v11 = *v10;
        goto LABEL_10;
      }
LABEL_5:
      long long v5 = *a1 + 2;
      *a1 = v5;
      if (v5 == *a2) {
        return v25;
      }
    }
    if (v5) {
LABEL_10:
    }
      unint64_t v12 = v5[1] | ((unint64_t)*v5 << 32);
    else {
      unint64_t v12 = 0xFFFFFFFFLL;
    }
    int v13 = *(unsigned __int8 *)a5[1];
    int v14 = (int *)sub_4992B0(v11 + 24, __ROR8__(v12, 32), 0, "road access point");
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 0xDu)
    {
      uint64_t v16 = v15[6];
      if (v16)
      {
        std::string v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
        unsigned int v20 = *v17;
        std::string v18 = (unsigned __int8 *)(v17 + 1);
        uint64_t v19 = v20;
        if (v20)
        {
          uint64_t v21 = v19;
          int v22 = v18;
          while (*v22 != v13)
          {
            ++v22;
            if (!--v21) {
              goto LABEL_5;
            }
          }
        }
        else
        {
          int v22 = v18;
        }
        if (v22 != &v18[v19])
        {
          if (*a1) {
            unint64_t v9 = (*a1)[1] | ((unint64_t)**a1 << 32);
          }
          else {
            unint64_t v9 = 0xFFFFFFFFLL;
          }
          unint64_t v24 = v9;
          sub_2A98DC(&v25, &v24);
        }
      }
    }
    goto LABEL_5;
  }
  return a3;
}

void *sub_BE6EE0(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int64_t v8 = v6 - *(void *)a2;
  if (v6 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v8 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v8);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[16 * (v8 >> 4)];
    size_t v10 = 80 * ((v8 - 80) / 0x50uLL) + 80;
    memcpy(v9, v7, v10);
    a1[1] = &v9[v10];
  }
  uint64_t v11 = *(void *)(a2 + 24);
  a1[4] = 0;
  a1[3] = v11;
  a1[5] = 0;
  a1[6] = 0;
  unint64_t v12 = *(const void **)a3;
  int64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    int v14 = (char *)operator new(v13);
    a1[4] = v14;
    a1[5] = v14;
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    a1[6] = v15;
    memcpy(v14, v12, v13);
    a1[5] = v15;
  }
  return a1;
}

void sub_BE700C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BE7040(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xED6866F8D962AE7BLL * (v6 >> 3);
    if (v7 >= 0x2DC3EED6866F8ELL) {
      sub_2E00();
    }
    int64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[1432 * v7];
    a1[1] = sub_BE7124(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_BE70F8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE818((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE7124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      uint64_t v10 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1424) = *(_DWORD *)(a2 + v7 + 1424);
      int v11 = *(_DWORD *)(a2 + v7 + 1424);
      switch(v11)
      {
        case 2:
          sub_A0E244(v9, v10);
          break;
        case 1:
          uint64_t v8 = *(void *)v10;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
          *(void *)uint64_t v9 = v8;
          break;
        case 0:
          sub_BE6528(v9, v10);
          break;
      }
      v7 += 1432;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_BE71C4(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE88C(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BE71E0(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x2DC3EED6866F8ELL) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(1432 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[1432 * a3];
    a1[1] = sub_BE72B8(v4, a2, a2 + 1432 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_BE728C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE818((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      uint64_t v10 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1424) = *(_DWORD *)(a2 + v7 + 1424);
      int v11 = *(_DWORD *)(a2 + v7 + 1424);
      switch(v11)
      {
        case 2:
          sub_A0E244(v9, v10);
          break;
        case 1:
          uint64_t v8 = *(void *)v10;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
          *(void *)uint64_t v9 = v8;
          break;
        case 0:
          sub_BE6528(v9, v10);
          break;
      }
      v7 += 1432;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_BE7358(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE88C(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_BE7374(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      int v11 = &v5[32 * a2];
      do
      {
        *(void *)uint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *((void *)v5 + 3) = -1;
        v5 += 32;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = (v5 - *a1) >> 5;
    if ((v6 + a2) >> 59) {
      sub_2E00();
    }
    uint64_t v7 = v4 - *a1;
    uint64_t v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2) {
      uint64_t v8 = v6 + a2;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9)
    {
      if (v9 >> 59) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(32 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v12 = &v10[32 * v6];
    int64_t v13 = &v10[32 * v9];
    int v14 = &v12[32 * a2];
    uint64_t v15 = v12;
    do
    {
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = -1;
      v15 += 32;
    }
    while (v15 != v14);
    uint64_t v16 = *a1;
    if (v5 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v5) {
        return;
      }
      goto LABEL_29;
    }
    uint64_t v17 = 0;
    do
    {
      std::string v18 = &v12[v17];
      uint64_t v19 = &v5[v17];
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v5[v17 - 32];
      uint64_t v20 = *(void *)&v5[v17 - 8];
      *((void *)v18 - 2) = *(void *)&v5[v17 - 16];
      *((void *)v19 - 4) = 0;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v18 - 1) = v20;
      v17 -= 32;
    }
    while (&v5[v17] != v16);
    uint64_t v21 = *a1;
    uint64_t v5 = a1[1];
    *a1 = &v12[v17];
    a1[1] = v14;
    a1[2] = v13;
    if (v5 != v21)
    {
      int v22 = v5;
      do
      {
        unint64_t v24 = (void *)*((void *)v22 - 4);
        v22 -= 32;
        int v23 = v24;
        if (v24)
        {
          *((void *)v5 - 3) = v23;
          operator delete(v23);
        }
        uint64_t v5 = v22;
      }
      while (v22 != v21);
      uint64_t v5 = v21;
    }
    if (v5)
    {
LABEL_29:
      operator delete(v5);
    }
  }
}

uint64_t sub_BE7540(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 1432;
  uint64_t v7 = *a1 + 1432 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if ((uint64_t)(0xED6866F8D962AE7BLL * ((uint64_t)(v13 - v14) >> 3)) < a5)
  {
    unint64_t v15 = a5 - 0x12979907269D5185 * ((uint64_t)(v14 - v5) >> 3);
    if (v15 > 0x2DC3EED6866F8DLL) {
      sub_2E00();
    }
    unint64_t v16 = 0xED6866F8D962AE7BLL * ((v12 - v5) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x16E1F76B4337C6) {
      unint64_t v17 = 0x2DC3EED6866F8DLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v43 = v11;
    if (v17)
    {
      if (v17 > 0x2DC3EED6866F8DLL) {
        sub_188D718();
      }
      std::string v18 = (char *)operator new(1432 * v17);
    }
    else
    {
      std::string v18 = 0;
    }
    uint64_t v29 = (uint64_t)&v18[1432 * v6];
    long long __p = v18;
    uint64_t v40 = v29;
    uint64_t v41 = v29;
    long long v42 = &v18[1432 * v17];
    uint64_t v30 = 1432 * a5;
    uint64_t v31 = v29 + 1432 * a5;
    do
    {
      int v33 = *(_DWORD *)(v9 + 1424);
      *(_DWORD *)(v29 + 1424) = v33;
      switch(v33)
      {
        case 2:
          sub_A0E244(v29, v9);
          break;
        case 1:
          uint64_t v32 = *(void *)v9;
          *(_DWORD *)(v29 + 8) = *(_DWORD *)(v9 + 8);
          *(void *)uint64_t v29 = v32;
          break;
        case 0:
          sub_BE6528(v29, v9);
          break;
      }
      v29 += 1432;
      v9 += 1432;
      v30 -= 1432;
    }
    while (v30);
    uint64_t v41 = v31;
    uint64_t v7 = sub_BE78FC(a1, &__p, v7);
    uint64_t v34 = v40;
    while (1)
    {
      uint64_t v35 = v41;
      if (v41 == v34) {
        break;
      }
      uint64_t v36 = v41 - 1432;
      v41 -= 1432;
      int v37 = *(_DWORD *)(v35 - 8);
      if (v37 == 2)
      {
        sub_9F6418(v36);
      }
      else if (!v37)
      {
        sub_9F636C(v36);
      }
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  if ((uint64_t)(0xED6866F8D962AE7BLL * ((uint64_t)(v14 - v7) >> 3)) < a5)
  {
    uint64_t v19 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
    uint64_t v20 = sub_BE7A6C(v11, v19, a4, *(void *)(v11 - 8));
    uint64_t v21 = v20;
    a1[1] = v20;
    if ((uint64_t)(v14 - v7) < 1) {
      return v7;
    }
    uint64_t v22 = 1432 * a5;
    unint64_t v23 = v20 - 1432 * a5;
    if (v23 >= v14) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  uint64_t v19 = a3 + 1432 * a5;
  uint64_t v21 = *(void *)(v11 - 8);
  uint64_t v22 = 1432 * a5;
  unint64_t v23 = v14 - 1432 * a5;
  uint64_t v20 = v21;
  if (v23 < v14)
  {
LABEL_17:
    uint64_t v20 = v21;
    do
    {
      *(_DWORD *)(v20 + 1424) = *(_DWORD *)(v23 + 1424);
      int v25 = *(_DWORD *)(v23 + 1424);
      switch(v25)
      {
        case 2:
          uint64_t v20 = sub_A0E244(v20, v23);
          break;
        case 1:
          uint64_t v24 = *(void *)v23;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v23 + 8);
          *(void *)uint64_t v20 = v24;
          break;
        case 0:
          uint64_t v20 = sub_BE6528(v20, v23);
          break;
      }
      v23 += 1432;
      v20 += 1432;
    }
    while (v23 < v14);
  }
LABEL_25:
  a1[1] = v20;
  if (v21 != v7 + v22)
  {
    uint64_t v26 = v21 - 1432;
    uint64_t v27 = 8 * ((v21 - (v7 + v22)) >> 3);
    do
    {
      sub_BE6844(v26, 1432 * v6 + v5 - 1432 + v27);
      v26 -= 1432;
      v27 -= 1432;
    }
    while (v27);
  }
  if (v19 != v9)
  {
    uint64_t v28 = v7;
    do
    {
      sub_BE7B28(v28, v9);
      v9 += 1432;
      v28 += 1432;
    }
    while (v9 != v19);
  }
  return v7;
}

void sub_BE78C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_BE78CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE64B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BE78E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE64B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BE78FC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v11 = (void *)(v6 + v9 - 1432);
      uint64_t v12 = (uint64_t *)(v3 + v9 - 1432);
      *(_DWORD *)(v6 + v9 - 8) = *(_DWORD *)(v3 + v9 - 8);
      int v13 = *(_DWORD *)(v3 + v9 - 8);
      switch(v13)
      {
        case 2:
          sub_A0E244((uint64_t)v11, (uint64_t)v12);
          break;
        case 1:
          uint64_t v10 = *v12;
          *(_DWORD *)(v6 + v9 - 1424) = *(_DWORD *)(v3 + v9 - 1424);
          void *v11 = v10;
          break;
        case 0:
          sub_BE6528((uint64_t)v11, (uint64_t)v12);
          break;
      }
      v9 -= 1432;
    }
    while (v3 + v9 != v7);
    uint64_t v8 = v6 + v9;
  }
  a2[1] = v8;
  uint64_t v14 = a1[1];
  uint64_t v15 = a2[2];
  if (v14 != v3)
  {
    do
    {
      *(_DWORD *)(v15 + 1424) = *(_DWORD *)(v3 + 1424);
      int v17 = *(_DWORD *)(v3 + 1424);
      switch(v17)
      {
        case 2:
          uint64_t v15 = sub_A0E244(v15, v3);
          break;
        case 1:
          uint64_t v16 = *(void *)v3;
          *(_DWORD *)(v15 + 8) = *(_DWORD *)(v3 + 8);
          *(void *)uint64_t v15 = v16;
          break;
        case 0:
          uint64_t v15 = sub_BE6528(v15, v3);
          break;
      }
      v3 += 1432;
      v15 += 1432;
    }
    while (v3 != v14);
    uint64_t v8 = a2[1];
  }
  a2[2] = v15;
  uint64_t v18 = *a1;
  *a1 = v8;
  a2[1] = v18;
  uint64_t v19 = a1[1];
  a1[1] = a2[2];
  a2[2] = v19;
  uint64_t v20 = a1[2];
  a1[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_BE7A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      uint64_t v10 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1424) = *(_DWORD *)(a2 + v7 + 1424);
      int v11 = *(_DWORD *)(a2 + v7 + 1424);
      switch(v11)
      {
        case 2:
          sub_A0E244(v9, v10);
          break;
        case 1:
          uint64_t v8 = *(void *)v10;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
          *(void *)uint64_t v9 = v8;
          break;
        case 0:
          sub_BE6528(v9, v10);
          break;
      }
      v7 += 1432;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_BE7B0C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AE88C(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE7B28(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 1424);
  int v5 = *(_DWORD *)(a2 + 1424);
  if (v4 != v5)
  {
    uint64_t v7 = (int *)(a1 + 1424);
    uint64_t v8 = (int *)(a2 + 1424);
    if (v4 == 2)
    {
      sub_9F6418(a1);
    }
    else
    {
      if (v4) {
        goto LABEL_12;
      }
      sub_9F636C(a1);
    }
    int v5 = *v8;
LABEL_12:
    switch(v5)
    {
      case 2:
        sub_A0E244(a1, a2);
        break;
      case 1:
        uint64_t v9 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(void *)a1 = v9;
        break;
      case 0:
        sub_BE6528(a1, a2);
        break;
    }
    goto LABEL_18;
  }
  if (v4)
  {
    sub_BE7C60(v4, a2, a1);
    return a1;
  }
  sub_BE7D3C(a1, a2);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  sub_BE7D3C(a1 + 176, a2 + 176);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  sub_326C0((void *)(a1 + 360), *(char **)(a2 + 360), *(char **)(a2 + 368), (uint64_t)(*(void *)(a2 + 368) - *(void *)(a2 + 360)) >> 3);
  uint64_t v7 = (int *)(a1 + 384);
  uint64_t v8 = (int *)(a2 + 384);
LABEL_18:
  *uint64_t v7 = *v8;
  return a1;
}

uint64_t sub_BE7C60(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result == 2)
  {
    sub_BE7D3C(a3, a2);
    *(unsigned char *)(a3 + 168) = *(unsigned char *)(a2 + 168);
    sub_BE7D3C(a3 + 176, a2 + 176);
    *(unsigned char *)(a3 + 344) = *(unsigned char *)(a2 + 344);
    __n128 result = a3 + 352;
    if (*(unsigned char *)(a2 + 1408))
    {
      uint64_t v6 = a2 + 352;
      if (*(unsigned char *)(a3 + 1408))
      {
        __n128 result = sub_471250(result, v6);
        *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
        return result;
      }
      __n128 result = sub_7A3ACC(result, v6);
      *(unsigned char *)(a3 + 1408) = 1;
    }
    else if (*(unsigned char *)(a3 + 1408))
    {
      __n128 result = sub_3AFFFC(result);
      *(unsigned char *)(a3 + 1408) = 0;
      *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
      return result;
    }
    *(_DWORD *)(a3 + 1416) = *(_DWORD *)(a2 + 1416);
    return result;
  }
  if (result == 1)
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)a3 = v5;
  }
  return result;
}

uint64_t sub_BE7D3C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (result != a2)
  {
    int v4 = *(_DWORD *)(result + 160);
    int v5 = *(_DWORD *)(a2 + 160);
    if (v4 == v5)
    {
      if (v4 == 1)
      {
        *(_OWORD *)__n128 result = *(_OWORD *)a2;
        long long v9 = *(_OWORD *)(a2 + 16);
        long long v10 = *(_OWORD *)(a2 + 32);
        long long v11 = *(_OWORD *)(a2 + 48);
        *(_DWORD *)(result + 63) = *(_DWORD *)(a2 + 63);
        *(_OWORD *)(result + 32) = v10;
        *(_OWORD *)(result + 48) = v11;
        *(_OWORD *)(result + 16) = v9;
        sub_147D0((void *)(result + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
        int v12 = *(_DWORD *)(a2 + 96);
        *(unsigned char *)(v2 + 100) = *(unsigned char *)(a2 + 100);
        *(_DWORD *)(v2 + 96) = v12;
        sub_BE7EAC((char **)(v2 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 6);
        sub_BE7EAC((char **)(v2 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 6);
        int v13 = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(v2 + 155) = *(_DWORD *)(a2 + 155);
        *(_DWORD *)(v2 + 152) = v13;
        return v2;
      }
      else if (!v4)
      {
        *(void *)__n128 result = *(void *)a2;
      }
    }
    else
    {
      if (v4 == 1)
      {
        uint64_t v6 = *(void **)(result + 128);
        if (v6)
        {
          *(void *)(v2 + 136) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v2 + 104);
        if (v7)
        {
          *(void *)(v2 + 112) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)(v2 + 72);
        if (v8)
        {
          *(void *)(v2 + 80) = v8;
          operator delete(v8);
        }
        int v5 = *(_DWORD *)(a2 + 160);
      }
      if (v5 == 1)
      {
        sub_44479C(v2, a2);
      }
      else if (!v5)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 160);
        return v2;
      }
      *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 160);
      return v2;
    }
  }
  return result;
}

char *sub_BE7EAC(char **a1, long long *a2, long long *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  __n128 result = *a1;
  if (__sz > (v8 - (uint64_t)result) >> 6)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_38;
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 58) {
LABEL_38:
    }
      sub_2E00();
    unint64_t v13 = v12 << 6;
    __n128 result = (char *)operator new(v12 << 6);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    uint64_t v14 = (long long *)result;
    if (v6 != a3)
    {
      uint64_t v14 = (long long *)result;
      do
      {
        long long v15 = v6[1];
        *uint64_t v14 = *v6;
        v14[1] = v15;
        *((void *)v14 + 4) = *((void *)v6 + 4);
        *((_DWORD *)v14 + 10) = *((_DWORD *)v6 + 10);
        *((void *)v14 + 6) = *((void *)v6 + 6);
        *((unsigned char *)v14 + 56) = *((unsigned char *)v6 + 56);
        v14 += 4;
        v6 += 4;
      }
      while (v6 != a3);
    }
    a1[1] = (char *)v14;
    return result;
  }
  uint64_t v18 = a1[1];
  int v17 = a1 + 1;
  uint64_t v16 = v18;
  unint64_t v19 = (v18 - result) >> 6;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      *int v17 = result;
      return result;
    }
    uint64_t v29 = (char *)a2 + 42;
    uint64_t v30 = result + 42;
    uint64_t v31 = result;
    while (1)
    {
      long long v32 = *(_OWORD *)(v29 - 42);
      long long v33 = *(_OWORD *)(v29 - 26);
      *(void *)(v30 - 10) = *(void *)(v29 - 10);
      *(_OWORD *)(v30 - 26) = v33;
      *(_OWORD *)(v30 - 42) = v32;
      if (!*(v29 - 1)) {
        break;
      }
      *(v30 - 2) = *(v29 - 2);
      uint64_t v34 = v29 - 42;
      uint64_t v35 = v30 - 42;
      *(v30 - 1) = 1;
      char v36 = v29[1];
      if (v36) {
        goto LABEL_28;
      }
LABEL_29:
      v30[1] = v36;
      uint64_t v37 = *((void *)v34 + 6);
      v35[56] = v34[56];
      *((void *)v35 + 6) = v37;
      v31 += 64;
      v29 += 64;
      v30 += 64;
      if (v34 + 64 == (unsigned char *)a3)
      {
        *int v17 = v31;
        return result;
      }
    }
    uint64_t v34 = v29 - 42;
    uint64_t v35 = v30 - 42;
    *(v30 - 1) = 0;
    char v36 = v29[1];
    if (!v36) {
      goto LABEL_29;
    }
LABEL_28:
    unsigned char *v30 = *v29;
    char v36 = 1;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[4 * v19];
  if (v16 == result) {
    goto LABEL_33;
  }
  uint64_t v21 = result + 42;
  uint64_t v22 = (char *)a2 + 42;
  do
  {
    long long v23 = *(_OWORD *)(v22 - 42);
    long long v24 = *(_OWORD *)(v22 - 26);
    *(void *)(v21 - 10) = *(void *)(v22 - 10);
    *(_OWORD *)(v21 - 26) = v24;
    *(_OWORD *)(v21 - 42) = v23;
    if (*(v22 - 1))
    {
      *(v21 - 2) = *(v22 - 2);
      int v25 = v21 - 42;
      uint64_t v26 = v22 - 42;
      *(v21 - 1) = 1;
      char v27 = v22[1];
      if (!v27) {
        goto LABEL_20;
      }
LABEL_19:
      unsigned char *v21 = *v22;
      char v27 = 1;
      goto LABEL_20;
    }
    int v25 = v21 - 42;
    uint64_t v26 = v22 - 42;
    *(v21 - 1) = 0;
    char v27 = v22[1];
    if (v27) {
      goto LABEL_19;
    }
LABEL_20:
    v21[1] = v27;
    uint64_t v28 = *((void *)v26 + 6);
    v25[56] = v26[56];
    *((void *)v25 + 6) = v28;
    v21 += 64;
    v22 += 64;
  }
  while (v26 + 64 != (unsigned char *)v20);
  __n128 result = *v17;
LABEL_33:
  uint64_t v38 = result;
  if (v20 != a3)
  {
    uint64_t v38 = result;
    long double v39 = result;
    do
    {
      long long v40 = *v20;
      long long v41 = v20[1];
      v39[4] = *((void *)v20 + 4);
      *(_OWORD *)long double v39 = v40;
      *((_OWORD *)v39 + 1) = v41;
      *((_WORD *)v39 + 20) = *((_WORD *)v20 + 20);
      *((_WORD *)v39 + 21) = *((_WORD *)v20 + 21);
      uint64_t v42 = *((void *)v20 + 6);
      *((unsigned char *)v39 + 56) = *((unsigned char *)v20 + 56);
      v39[6] = v42;
      v38 += 64;
      v20 += 4;
      v39 += 8;
    }
    while (v20 != a3);
  }
  *int v17 = v38;
  return result;
}

uint64_t sub_BE81D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xED6866F8D962AE7BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2DC3EED6866F8DLL) {
    sub_2E00();
  }
  if (0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3);
  }
  if (0xED6866F8D962AE7BLL * ((a1[2] - *a1) >> 3) >= 0x16E1F76B4337C6) {
    unint64_t v6 = 0x2DC3EED6866F8DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2DC3EED6866F8DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1432 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[1432 * v3];
  long long v9 = &v7[1432 * v6];
  *(_DWORD *)(v8 + 1424) = -1;
  sub_BE83BC(v8, a2);
  *(_DWORD *)(v8 + 1424) = 2;
  uint64_t v10 = v8 + 1432;
  unint64_t v12 = (char *)*a1;
  BOOL v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v8 + 1432;
    }
    goto LABEL_29;
  }
  uint64_t v13 = 0;
  do
  {
    long long v15 = (void *)(v8 + v13 - 1432);
    uint64_t v16 = &v11[v13 - 1432];
    *(_DWORD *)(v8 + v13 - 8) = *(_DWORD *)&v11[v13 - 8];
    int v17 = *(_DWORD *)&v11[v13 - 8];
    switch(v17)
    {
      case 2:
        sub_A0E244((uint64_t)v15, (uint64_t)v16);
        break;
      case 1:
        uint64_t v14 = *(void *)v16;
        *(_DWORD *)(v8 + v13 - 1424) = *(_DWORD *)&v11[v13 - 1424];
        *long long v15 = v14;
        break;
      case 0:
        sub_BE6528((uint64_t)v15, (uint64_t)v16);
        break;
    }
    v13 -= 1432;
  }
  while (&v11[v13] != v12);
  uint64_t v18 = (char *)*a1;
  BOOL v11 = (char *)a1[1];
  *a1 = v8 + v13;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v18)
  {
    do
    {
      int v19 = *((_DWORD *)v11 - 2);
      v11 -= 1432;
      if (v19 == 2)
      {
        sub_9F6418((uint64_t)v11);
      }
      else if (!v19)
      {
        sub_9F636C((uint64_t)v11);
      }
    }
    while (v11 != v18);
    BOOL v11 = v18;
  }
  if (v11) {
LABEL_29:
  }
    operator delete(v11);
  return v8 + 1432;
}

void sub_BE83BC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v4)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  int v5 = (void *)(a1 + 176);
  unint64_t v6 = (void *)(a2 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  int v7 = *(_DWORD *)(a2 + 336);
  if (v7 == 1)
  {
    sub_44479C((uint64_t)v5, (uint64_t)v6);
  }
  else if (!v7)
  {
    *int v5 = *v6;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  int v8 = *(unsigned __int8 *)(a2 + 1408);
  *(unsigned char *)(a1 + 1408) = v8;
  if (v8) {
    sub_463750(a1 + 352, a2 + 352);
  }
  *(_DWORD *)(a1 + 1416) = *(_DWORD *)(a2 + 1416);
}

char *sub_BE8478(char **a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  int v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 80;
  int v7 = &(*a1)[80 * v6];
  if (a5 < 1) {
    return v7;
  }
  long long v9 = a3;
  unint64_t v12 = a1[1];
  BOOL v11 = a1[2];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - v12) >> 4)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - v7) >> 4)) >= a5)
    {
      uint64_t v18 = &a3[80 * a5];
      int v19 = a1[1];
    }
    else
    {
      uint64_t v18 = &a3[16 * ((v12 - v7) >> 4)];
      int v19 = a1[1];
      if (v18 != a4)
      {
        uint64_t v20 = &a3[16 * ((v12 - v7) >> 4)];
        uint64_t v21 = a1[1];
        do
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
          long long v22 = *((_OWORD *)v20 + 1);
          long long v23 = *((_OWORD *)v20 + 2);
          long long v24 = *((_OWORD *)v20 + 4);
          *((_OWORD *)v21 + 3) = *((_OWORD *)v20 + 3);
          *((_OWORD *)v21 + 4) = v24;
          *((_OWORD *)v21 + 1) = v22;
          *((_OWORD *)v21 + 2) = v23;
          v20 += 80;
          v21 += 80;
          v19 += 80;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if (v12 - v7 < 1) {
        return v7;
      }
    }
    int v25 = &v7[80 * a5];
    uint64_t v26 = &v19[-80 * a5];
    char v27 = v19;
    if (v26 < v12)
    {
      char v27 = v19;
      do
      {
        *(_OWORD *)char v27 = *(_OWORD *)v26;
        long long v28 = *((_OWORD *)v26 + 1);
        long long v29 = *((_OWORD *)v26 + 2);
        long long v30 = *((_OWORD *)v26 + 4);
        *((_OWORD *)v27 + 3) = *((_OWORD *)v26 + 3);
        *((_OWORD *)v27 + 4) = v30;
        *((_OWORD *)v27 + 1) = v28;
        *((_OWORD *)v27 + 2) = v29;
        v26 += 80;
        v27 += 80;
      }
      while (v26 < v12);
    }
    a1[1] = v27;
    if (v19 != v25)
    {
      unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - v25) >> 4);
      long long v32 = v19 - 80;
      uint64_t v33 = 80 * v31;
      do
      {
        *(void *)long long v32 = *(void *)&v7[v33 - 80];
        *(_OWORD *)(v32 + 8) = *(_OWORD *)&v7[v33 - 72];
        long long v34 = *(_OWORD *)&v7[v33 - 56];
        long long v35 = *(_OWORD *)&v7[v33 - 40];
        long long v36 = *(_OWORD *)&v7[v33 - 24];
        *(void *)(v32 + 71) = *(void *)&v7[v33 - 9];
        *(_OWORD *)(v32 + 56) = v36;
        *(_OWORD *)(v32 + 40) = v35;
        *(_OWORD *)(v32 + 24) = v34;
        v32 -= 80;
        v33 -= 80;
      }
      while (v33);
    }
    if (v18 != a3)
    {
      uint64_t v37 = v7;
      do
      {
        *(void *)uint64_t v37 = *(void *)v9;
        *(_OWORD *)((char *)v37 + 8) = *(_OWORD *)(v9 + 8);
        long long v38 = *(_OWORD *)(v9 + 24);
        long long v39 = *(_OWORD *)(v9 + 40);
        long long v40 = *(_OWORD *)(v9 + 56);
        *(void *)((char *)v37 + 71) = *(void *)(v9 + 71);
        *(_OWORD *)((char *)v37 + 56) = v40;
        *(_OWORD *)((char *)v37 + 40) = v39;
        *(_OWORD *)((char *)v37 + 24) = v38;
        v9 += 80;
        v37 += 5;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x3333333333333333 * ((v12 - v5) >> 4);
  if (v13 > 0x333333333333333) {
    sub_2E00();
  }
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 4);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x199999999999999) {
    unint64_t v16 = 0x333333333333333;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0x333333333333333) {
      sub_188D718();
    }
    int v17 = (char *)operator new(80 * v16);
  }
  else
  {
    int v17 = 0;
  }
  long long v41 = &v17[80 * v6];
  uint64_t v42 = 80 * a5;
  uint64_t v43 = &v41[80 * a5];
  long double v44 = v41;
  do
  {
    *(_OWORD *)long double v44 = *(_OWORD *)v9;
    long long v45 = *((_OWORD *)v9 + 1);
    long long v46 = *((_OWORD *)v9 + 2);
    long long v47 = *((_OWORD *)v9 + 4);
    *((_OWORD *)v44 + 3) = *((_OWORD *)v9 + 3);
    *((_OWORD *)v44 + 4) = v47;
    *((_OWORD *)v44 + 1) = v45;
    *((_OWORD *)v44 + 2) = v46;
    v44 += 80;
    v9 += 80;
    v42 -= 80;
  }
  while (v42);
  int v48 = *a1;
  uint64_t v49 = v41;
  if (*a1 != v7)
  {
    unint64_t v50 = v7;
    uint64_t v49 = v41;
    do
    {
      *((_OWORD *)v49 - 5) = *((_OWORD *)v50 - 5);
      long long v51 = *((_OWORD *)v50 - 4);
      long long v52 = *((_OWORD *)v50 - 3);
      long long v53 = *((_OWORD *)v50 - 1);
      *((_OWORD *)v49 - 2) = *((_OWORD *)v50 - 2);
      *((_OWORD *)v49 - 1) = v53;
      *((_OWORD *)v49 - 4) = v51;
      *((_OWORD *)v49 - 3) = v52;
      v49 -= 80;
      v50 -= 80;
    }
    while (v50 != v48);
    unint64_t v12 = a1[1];
  }
  for (uint64_t i = &v17[80 * v16]; v7 != v12; v43 += 80)
  {
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v7;
    long long v55 = *((_OWORD *)v7 + 1);
    long long v56 = *((_OWORD *)v7 + 2);
    long long v57 = *((_OWORD *)v7 + 4);
    *((_OWORD *)v43 + 3) = *((_OWORD *)v7 + 3);
    *((_OWORD *)v43 + 4) = v57;
    *((_OWORD *)v43 + 1) = v55;
    *((_OWORD *)v43 + 2) = v56;
    v7 += 80;
  }
  int v58 = *a1;
  *a1 = v49;
  a1[1] = v43;
  a1[2] = i;
  if (v58) {
    operator delete(v58);
  }
  return v41;
}

void sub_BE87D8()
{
  unk_25DFDD7 = 16641;
  word_25DFDC0 = 65;
  byte_25DFDEF = 1;
  byte_25DFDD9 = 0;
}

uint64_t sub_BE8800(uint64_t a1, void *a2, uint64_t *a3, int a4, uint64_t a5, char a6)
{
  *(void *)a1 = a2;
  uint64_t v11 = a1 + 32;
  unint64_t v12 = (void *)(a1 + 8);
  sub_BE8994(a2 + 514, *a3, a1 + 8);
  sub_BDF764(a2, v12, a4, a5, v11);
  *(unsigned char *)(a1 + 328) = a5;
  if ((a6 & 1) == 0)
  {
    unint64_t v14 = *(void **)(a1 + 8);
    uint64_t v15 = *(void **)(a1 + 16);
    if (v14 == v15)
    {
LABEL_10:
      char v13 = 0;
      goto LABEL_11;
    }
    while (1)
    {
      unint64_t v16 = (int *)sub_94C794(a2[521] + 24, __ROR8__(*v14, 32), 0, "transfer graph");
      int v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 0x11u)
      {
        uint64_t v18 = v17[8];
        if (v18)
        {
          if (*((unsigned char *)v16 + v18)) {
            break;
          }
        }
      }
      if (++v14 == v15) {
        goto LABEL_10;
      }
    }
  }
  char v13 = 1;
LABEL_11:
  *(unsigned char *)(a1 + 329) = v13;
  sub_A2596C(a1 + 336, v11);
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  sub_BE8AA0(a1);
  sub_BE8EF0((void *)a1);
  return a1;
}

void sub_BE8944(_Unwind_Exception *a1)
{
  sub_BE1D9C(v3);
  int v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

int *sub_BE8994@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8ED928(*a1 + 24, __ROR8__(a2, 32), 0, "station");
  int v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0xBu
    && (uint64_t v6 = v5[5]) != 0
    && (int v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    uint64_t v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    unint64_t v16 = &v11[v10];
    unint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      __n128 result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      uint64_t v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_BE8A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BE8AA0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  unint64_t v50 = *(uint64_t **)(a1 + 16);
  if (v1 != v50)
  {
    uint64_t v3 = a1 + 424;
    do
    {
      long long v51 = v1;
      sub_BEB408((void *)(*(void *)a1 + 4168), *v1, (uint64_t)&v53);
      int v4 = v53;
      unsigned int v5 = v54;
      uint64_t v6 = v57;
      int v52 = v58;
      if (v53 != v57 || v54 != v58)
      {
        unint64_t v8 = v56;
        unint64_t v9 = v55;
        do
        {
          uint64_t v10 = *(void *)(a1 + 248);
          if (*(void *)(a1 + 256) == v10) {
            goto LABEL_62;
          }
          uint64_t v11 = *(void *)(a1 + 264);
          uint64_t v12 = v11 - 1;
          unint64_t v13 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
          unint64_t v14 = v13 ^ (v13 >> 33);
          uint64_t v15 = *(void *)(a1 + 288);
          int v16 = *(_DWORD *)(a1 + 276);
          int v17 = *(_DWORD *)(a1 + 272);
          uint64_t v18 = (v11 - 1) & v14;
          int v19 = (unsigned int *)(v15 + 12 * v18);
          unsigned int v21 = *v19;
          unsigned int v20 = v19[1];
          if (v16 == v20 && v17 == v21) {
            goto LABEL_62;
          }
          if (v10)
          {
            uint64_t v23 = 1;
            while (*(_DWORD *)(a1 + 244) == v20 && *(_DWORD *)(a1 + 240) == v21 || __PAIR64__(v20, v21) != v9)
            {
              uint64_t v18 = (v18 + v23) & v12;
              long long v24 = (unsigned int *)(v15 + 12 * v18);
              unsigned int v21 = *v24;
              unsigned int v20 = v24[1];
              ++v23;
              if (v16 == v20 && v17 == v21) {
                goto LABEL_62;
              }
            }
          }
          else
          {
            uint64_t v26 = 1;
            while (__PAIR64__(v20, v21) != v9)
            {
              uint64_t v18 = (v18 + v26) & v12;
              char v27 = (unsigned int *)(v15 + 12 * v18);
              unsigned int v21 = *v27;
              unsigned int v20 = v27[1];
              ++v26;
              if (v16 == v20 && v17 == v21) {
                goto LABEL_62;
              }
            }
          }
          if (v18 == -1 || v18 == v11)
          {
LABEL_62:
            exception = __cxa_allocate_exception(0x40uLL);
            std::string v59 = (char *)operator new(0x19uLL);
            long long v60 = xmmword_20B9250;
            strcpy(v59, "element is out of range");
            long long v47 = (void *)sub_2F404((uint64_t)exception, (long long *)&v59);
          }
          unint64_t v29 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
          unint64_t v30 = v12 & (v29 ^ (v29 >> 33));
          unint64_t v31 = (unsigned int *)(v15 + 12 * v30);
          unsigned int v32 = *v31;
          unsigned int v33 = v31[1];
          if (v16 == v33 && v17 == v32) {
            goto LABEL_63;
          }
          uint64_t v35 = *(unsigned int *)(v15 + 12 * v18 + 8);
          if (v10)
          {
            uint64_t v36 = 1;
            while (*(_DWORD *)(a1 + 244) == v33 && *(_DWORD *)(a1 + 240) == v32 || __PAIR64__(v33, v32) != v8)
            {
              unint64_t v30 = (v30 + v36) & v12;
              uint64_t v37 = (unsigned int *)(v15 + 12 * v30);
              unsigned int v32 = *v37;
              unsigned int v33 = v37[1];
              ++v36;
              if (v16 == v33 && v17 == v32) {
                goto LABEL_63;
              }
            }
          }
          else
          {
            uint64_t v39 = 1;
            while (__PAIR64__(v33, v32) != v8)
            {
              unint64_t v30 = (v30 + v39) & v12;
              long long v40 = (unsigned int *)(v15 + 12 * v30);
              unsigned int v32 = *v40;
              unsigned int v33 = v40[1];
              ++v39;
              if (v16 == v33 && v17 == v32) {
                goto LABEL_63;
              }
            }
          }
          if (v30 == -1 || v30 == v11)
          {
LABEL_63:
            int v48 = __cxa_allocate_exception(0x40uLL);
            std::string v59 = (char *)operator new(0x19uLL);
            long long v60 = xmmword_20B9250;
            strcpy(v59, "element is out of range");
            uint64_t v49 = (void *)sub_2F404((uint64_t)v48, (long long *)&v59);
          }
          std::string v59 = (char *)(v35 | ((unint64_t)*(unsigned int *)(v15 + 12 * v30 + 8) << 32));
          sub_BEC020(v3, (unsigned int *)&v59, &v59);
          ++v5;
          uint64_t v42 = (unsigned __int16 *)((char *)v4 - *v4);
          if (*v42 >= 0xFu)
          {
            if (v42[7])
            {
              uint64_t v43 = (unsigned int *)((char *)v4 + v42[7] + *(unsigned int *)((char *)v4 + v42[7]));
              if (v5 < *v43)
              {
                long double v44 = &v43[v5];
                uint64_t v45 = (uint64_t)v4 + v42[3] + *(unsigned int *)((char *)v4 + v42[3]) + 4;
                unint64_t v9 = *(unsigned int *)(v45 + 8 * *((unsigned __int16 *)v44 + 2) + 4) | ((unint64_t)*(unsigned int *)(v45 + 8 * *((unsigned __int16 *)v44 + 2)) << 32);
                unint64_t v8 = *(unsigned int *)(v45 + 8 * *((unsigned __int16 *)v44 + 3) + 4) | ((unint64_t)*(unsigned int *)(v45 + 8 * *((unsigned __int16 *)v44 + 3)) << 32);
              }
            }
          }
        }
        while (v4 != v6 || v5 != v52);
      }
      uint64_t v1 = v51 + 1;
    }
    while (v51 + 1 != v50);
  }
}

void sub_BE8EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_BE8EF0(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[1];
  uint64_t v104 = (uint64_t *)a1[2];
  if (v1 != v104)
  {
    uint64_t v107 = (uint64_t)(a1 + 58);
    uint64_t v3 = "transfer";
    do
    {
      sub_BEB2BC((void *)(*a1 + 4168), *v1, (uint64_t)&v122);
      uint64_t v117 = v122;
      int v118 = v123;
      unint64_t v120 = 0;
      uint64_t v121 = 0;
      uint64_t v119 = 0;
      int v4 = v124;
      int64_t v5 = v125 - v124;
      if (v125 != v124)
      {
        if (v5 < 0) {
          sub_2E00();
        }
        uint64_t v6 = (char *)operator new(v125 - v124);
        int v7 = &v6[8 * (v5 >> 3)];
        uint64_t v119 = v6;
        uint64_t v121 = (unint64_t *)v7;
        memcpy(v6, v4, v5);
        unint64_t v120 = v7;
      }
      unsigned int v112 = v126;
      int v113 = v127;
      unsigned int v115 = 0;
      uint64_t v116 = 0;
      unint64_t v114 = 0;
      unint64_t v8 = v128;
      int64_t v9 = v129 - v128;
      uint64_t v105 = v1;
      if (v129 != v128)
      {
        if (v9 < 0) {
          sub_2E00();
        }
        uint64_t v10 = (char *)operator new(v129 - v128);
        uint64_t v11 = &v10[8 * (v9 >> 3)];
        unint64_t v114 = v10;
        uint64_t v116 = v11;
        memcpy(v10, v8, v9);
        unsigned int v115 = v11;
      }
LABEL_10:
      while (1)
      {
        uint64_t v12 = v117;
        if (v117 == v112 && v118 == v113) {
          break;
        }
        if (v119 != v120)
        {
          unint64_t v13 = (int *)sub_49B168(*(void *)(*a1 + 4160) + 24, __ROR8__(*(void *)v119, 32), 0, v3);
          unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v14 >= 7u && (unsigned __int16 v15 = v14[3]) != 0)
          {
            unint64_t v16 = *(unsigned int *)((char *)v13 + v15 + 4) | ((unint64_t)*(unsigned int *)((char *)v13 + v15) << 32);
            uint64_t v17 = a1[31];
            if (a1[32] == v17) {
              goto LABEL_119;
            }
          }
          else
          {
            unint64_t v16 = 0xFFFFFFFFLL;
            uint64_t v17 = a1[31];
            if (a1[32] == v17) {
              goto LABEL_119;
            }
          }
          uint64_t v18 = a1[33];
          uint64_t v19 = v18 - 1;
          unint64_t v20 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
          unint64_t v21 = v20 ^ (v20 >> 33);
          uint64_t v22 = a1[36];
          int v23 = *((_DWORD *)a1 + 69);
          int v24 = *((_DWORD *)a1 + 68);
          uint64_t v25 = (v18 - 1) & v21;
          uint64_t v26 = (unsigned int *)(v22 + 12 * v25);
          unsigned int v28 = *v26;
          unsigned int v27 = v26[1];
          if (v23 == v27 && v24 == v28) {
            goto LABEL_119;
          }
          if (v17)
          {
            uint64_t v30 = 1;
            while (*((_DWORD *)a1 + 61) == v27 && *((_DWORD *)a1 + 60) == v28 || __PAIR64__(v27, v28) != v16)
            {
              uint64_t v25 = (v25 + v30) & v19;
              unint64_t v31 = (unsigned int *)(v22 + 12 * v25);
              unsigned int v28 = *v31;
              unsigned int v27 = v31[1];
              ++v30;
              if (v23 == v27 && v24 == v28) {
                goto LABEL_119;
              }
            }
          }
          else
          {
            uint64_t v92 = 1;
            while (__PAIR64__(v27, v28) != v16)
            {
              uint64_t v25 = (v25 + v92) & v19;
              uint64_t v93 = (unsigned int *)(v22 + 12 * v25);
              unsigned int v28 = *v93;
              unsigned int v27 = v93[1];
              ++v92;
              if (v23 == v27 && v24 == v28) {
                goto LABEL_119;
              }
            }
          }
          if (v25 == -1 || (uint64_t v95 = v22 + 12 * v25, v95 == v22 + 12 * v18))
          {
LABEL_119:
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&__p, "element is out of range");
            unsigned int v101 = (void *)sub_2F404((uint64_t)exception, &__p);
          }
          uint64_t v33 = *(unsigned int *)(v95 + 8);
          long long v34 = (int *)sub_49B168(*(void *)(*a1 + 4160) + 24, __ROR8__(*((void *)v120 - 1), 32), 0, v3);
          uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
          if (*v35 >= 9u && (unsigned __int16 v36 = v35[4]) != 0)
          {
            unint64_t v37 = *(unsigned int *)((char *)v34 + v36 + 4) | ((unint64_t)*(unsigned int *)((char *)v34 + v36) << 32);
            uint64_t v38 = a1[31];
            if (a1[32] == v38) {
              goto LABEL_120;
            }
          }
          else
          {
            unint64_t v37 = 0xFFFFFFFFLL;
            uint64_t v38 = a1[31];
            if (a1[32] == v38) {
              goto LABEL_120;
            }
          }
          uint64_t v39 = a1[33];
          uint64_t v40 = v39 - 1;
          unint64_t v41 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v37 ^ (v37 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v37 ^ (v37 >> 33))) >> 33));
          unint64_t v42 = v41 ^ (v41 >> 33);
          uint64_t v43 = a1[36];
          int v44 = *((_DWORD *)a1 + 69);
          int v45 = *((_DWORD *)a1 + 68);
          uint64_t v46 = (v39 - 1) & v42;
          long long v47 = (unsigned int *)(v43 + 12 * v46);
          unsigned int v49 = *v47;
          unsigned int v48 = v47[1];
          if (v44 == v48 && v45 == v49) {
            goto LABEL_120;
          }
          if (v38)
          {
            uint64_t v51 = 1;
            while (*((_DWORD *)a1 + 61) == v48 && *((_DWORD *)a1 + 60) == v49 || __PAIR64__(v48, v49) != v37)
            {
              uint64_t v46 = (v46 + v51) & v40;
              int v52 = (unsigned int *)(v43 + 12 * v46);
              unsigned int v49 = *v52;
              unsigned int v48 = v52[1];
              ++v51;
              if (v44 == v48 && v45 == v49) {
                goto LABEL_120;
              }
            }
          }
          else
          {
            uint64_t v96 = 1;
            while (__PAIR64__(v48, v49) != v37)
            {
              uint64_t v46 = (v46 + v96) & v40;
              uint64_t v97 = (unsigned int *)(v43 + 12 * v46);
              unsigned int v49 = *v97;
              unsigned int v48 = v97[1];
              ++v96;
              if (v44 == v48 && v45 == v49) {
                goto LABEL_120;
              }
            }
          }
          if (v46 == -1 || (uint64_t v99 = v43 + 12 * v46, v99 == v43 + 12 * v39))
          {
LABEL_120:
            uint64_t v102 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&__p, "element is out of range");
            unsigned int v103 = (void *)sub_2F404((uint64_t)v102, &__p);
          }
          unint64_t v111 = v33 | ((unint64_t)*(unsigned int *)(v99 + 8) << 32);
          long long __p = 0uLL;
          unsigned int v109 = 0;
          unsigned int v54 = v119;
          int64_t v55 = v120 - (unsigned char *)v119;
          if (v120 != v119)
          {
            if (v55 < 0) {
              sub_2E00();
            }
            unint64_t v56 = (char *)operator new(v120 - (unsigned char *)v119);
            long long v57 = &v56[8 * (v55 >> 3)];
            *(void *)&long long __p = v56;
            unsigned int v109 = v57;
            memcpy(v56, v54, v55);
            *((void *)&__p + 1) = v57;
          }
          uint64_t v110 = *v1;
          sub_BEBC98(v107, (unsigned int *)&v111, (uint64_t *)&v111, &__p);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          uint64_t v12 = v117;
        }
        unsigned int v58 = ++v118;
        std::string v59 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v59 >= 0xDu)
        {
          uint64_t v60 = v59[6];
          if (v60)
          {
            unsigned __int32 v61 = (unsigned int *)((char *)v12 + v60 + *(unsigned int *)((char *)v12 + v60));
            if (v58 < *v61)
            {
              unint64_t v62 = (unint64_t *)v119;
              unint64_t v120 = (char *)v119;
              uint64_t v63 = (int *)((char *)&v61[v58 + 1] + v61[v58 + 1]);
              uint64_t v64 = (unsigned __int16 *)((char *)v63 - *v63);
              if (*v64 >= 5u)
              {
                uint64_t v65 = v64[2];
                if (v65)
                {
                  uint64_t v66 = (unsigned int *)((char *)v63 + v65);
                  uint64_t v67 = *v66;
                  int v69 = (unsigned __int16 *)((char *)v66 + v67 + 4);
                  uint64_t v68 = *(unsigned int *)((char *)v66 + v67);
                  if (v68)
                  {
                    uint64_t v70 = &v69[v68];
                    unsigned int v106 = v70;
                    while (1)
                    {
                      while (1)
                      {
                        uint64_t v71 = (unsigned int *)((char *)v117 + *(unsigned __int16 *)((char *)v117 - *v117 + 8));
                        unint64_t v72 = *(unsigned int *)((char *)&v71[2 * *v69 + 2] + *v71) | ((unint64_t)*(unsigned int *)((char *)&v71[2 * *v69 + 1] + *v71) << 32);
                        if (v62 >= v121) {
                          break;
                        }
                        *v62++ = v72;
                        unint64_t v120 = (char *)v62;
                        if (++v69 == v70) {
                          goto LABEL_10;
                        }
                      }
                      uint64_t v73 = v3;
                      uint64_t v74 = (unint64_t *)v119;
                      int64_t v75 = (char *)v62 - (unsigned char *)v119;
                      uint64_t v76 = ((char *)v62 - (unsigned char *)v119) >> 3;
                      unint64_t v77 = v76 + 1;
                      if ((unint64_t)(v76 + 1) >> 61) {
                        sub_2E00();
                      }
                      uint64_t v78 = (char *)v121 - (unsigned char *)v119;
                      if (((char *)v121 - (unsigned char *)v119) >> 2 > v77) {
                        unint64_t v77 = v78 >> 2;
                      }
                      unint64_t v79 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v77;
                      if (v79)
                      {
                        if (v79 >> 61) {
                          sub_188D718();
                        }
                        uint64_t v80 = operator new(8 * v79);
                        uint64_t v81 = (unint64_t *)&v80[8 * v76];
                        *uint64_t v81 = v72;
                        uint64_t v82 = (uint64_t)(v81 + 1);
                        if (v62 == v74)
                        {
LABEL_83:
                          uint64_t v3 = v73;
                          uint64_t v119 = v81;
                          unint64_t v120 = (char *)v82;
                          uint64_t v121 = (unint64_t *)&v80[8 * v79];
                          if (!v62) {
                            goto LABEL_80;
                          }
LABEL_79:
                          operator delete(v62);
                          goto LABEL_80;
                        }
                      }
                      else
                      {
                        uint64_t v80 = 0;
                        uint64_t v81 = (unint64_t *)(8 * v76);
                        *(void *)(8 * v76) = v72;
                        uint64_t v82 = 8 * v76 + 8;
                        if (v62 == v74) {
                          goto LABEL_83;
                        }
                      }
                      unint64_t v83 = (char *)(v62 - 1) - (char *)v74;
                      if (v83 < 0x168
                        || &v80[v75 - 8 - (v83 & 0xFFFFFFFFFFFFFFF8)] > &v80[v75 - 8]
                        || (unint64_t *)((char *)v62 - (v83 & 0xFFFFFFFFFFFFFFF8) - 8) > v62 - 1
                        || (unint64_t)((char *)v62 - v80 - v75) < 0x20)
                      {
                        break;
                      }
                      uint64_t v86 = (v83 >> 3) + 1;
                      uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
                      int v84 = &v62[v87 / 0xFFFFFFFFFFFFFFF8];
                      uint64_t v81 = (unint64_t *)((char *)v81 - v87);
                      unsigned int v88 = &v80[8 * v76 - 16];
                      uint64_t v89 = v62 - 2;
                      uint64_t v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v91 = *(_OWORD *)v89;
                        *(v88 - 1) = *((_OWORD *)v89 - 1);
                        *unsigned int v88 = v91;
                        v88 -= 2;
                        v89 -= 4;
                        v90 -= 4;
                      }
                      while (v90);
                      uint64_t v3 = v73;
                      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_77;
                      }
LABEL_78:
                      unint64_t v62 = (unint64_t *)v119;
                      uint64_t v119 = v81;
                      unint64_t v120 = (char *)v82;
                      uint64_t v121 = (unint64_t *)&v80[8 * v79];
                      if (v62) {
                        goto LABEL_79;
                      }
LABEL_80:
                      uint64_t v1 = v105;
                      uint64_t v70 = v106;
                      unint64_t v120 = (char *)v82;
                      ++v69;
                      unint64_t v62 = (unint64_t *)v82;
                      if (v69 == v106) {
                        goto LABEL_10;
                      }
                    }
                    int v84 = v62;
                    uint64_t v3 = v73;
                    do
                    {
LABEL_77:
                      unint64_t v85 = *--v84;
                      *--uint64_t v81 = v85;
                    }
                    while (v84 != v74);
                    goto LABEL_78;
                  }
                }
              }
            }
          }
        }
      }
      if (v114) {
        operator delete(v114);
      }
      if (v119)
      {
        unint64_t v120 = (char *)v119;
        operator delete(v119);
      }
      if (v128)
      {
        unint64_t v129 = v128;
        operator delete(v128);
      }
      if (v124)
      {
        uint64_t v125 = v124;
        operator delete(v124);
      }
      ++v1;
    }
    while (v1 != v104);
  }
}

void sub_BE978C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  sub_58CC(a1);
}

void sub_BE97C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v35 = a32;
    if (!a32)
    {
LABEL_3:
      sub_BEB3C4((void *)(v33 - 168));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v35 = a32;
    if (!a32) {
      goto LABEL_3;
    }
  }
  operator delete(v35);
  sub_BEB3C4((void *)(v33 - 168));
  _Unwind_Resume(a1);
}

void *sub_BE9860(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_BE98B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  unsigned int v8 = sub_BE3BCC(*(void *)a1, (void *)(a1 + 32), a2);
  sub_BE9BF0((void **)a1, v8, (uint64_t *)&v23);
  int64_t v9 = (char *)v23;
  if (v23 != v24)
  {
    if (*(unsigned char *)(a1 + 328)) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a3;
    }
    int v11 = *(unsigned __int8 *)(v10 + 168);
    uint64_t v14 = v10;
    int v13 = *(_DWORD *)v10;
    int v12 = *(_DWORD *)(v14 + 4);
    while (v9[352] != v11 || *((_DWORD *)v9 + 47) != v12 || *((_DWORD *)v9 + 46) != v13)
    {
      v9 += 400;
      if (v9 == v24) {
        goto LABEL_12;
      }
    }
  }
  if (v9 == v24)
  {
LABEL_12:
    *a4 = -1;
    uint64_t v21 = 0;
    uint64_t v22 = 0xFFFFFFFFLL;
    long long __p = 0;
    unint64_t v20 = 0;
    sub_BE9A84((uint64_t)(a4 + 2), a2, a3, &v22, (uint64_t)&__p, 0x7FFFFFFF);
    if (__p)
    {
      unint64_t v20 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = *(_DWORD *)v9;
    sub_BE6528((uint64_t)(a4 + 2), (uint64_t)(v9 + 8));
  }
  unsigned __int16 v15 = (char *)v23;
  if (v23)
  {
    unint64_t v16 = v24;
    uint64_t v17 = v23;
    if (v24 != v23)
    {
      do
      {
        uint64_t v18 = v16 - 400;
        sub_9F636C((uint64_t)(v16 - 392));
        unint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = v23;
    }
    int v24 = v15;
    operator delete(v17);
  }
}

void sub_BE99FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_BE9B88((void **)va);
  _Unwind_Resume(a1);
}

void sub_BE9A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_BE9B88(&a14);
  _Unwind_Resume(a1);
}

void sub_BE9A34(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5 = sub_BE3BCC(*a1, a1 + 4, a2);

  sub_BE9BF0((void **)a1, v5, a3);
}

uint64_t sub_BE9A84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v12 = *(_DWORD *)(a2 + 160);
  if (v12 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v12)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  int v13 = (void *)(a1 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 160);
  int v14 = *(_DWORD *)(a3 + 160);
  if (v14 == 1)
  {
    sub_44479C((uint64_t)v13, a3);
  }
  else if (!v14)
  {
    void *v13 = *(void *)a3;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a3 + 168);
  *(void *)(a1 + 352) = *a4;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a5;
  *(void *)(a1 + 376) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a1 + 384) = a6;
  return a1;
}

void sub_BE9B68(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 160) == 1) {
    sub_20ABA6C((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_BE9B88(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = v3 - 400;
        sub_9F636C((uint64_t)(v3 - 392));
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_BE9BF0(void **a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  if (a2 == -1) {
    goto LABEL_13;
  }
  uint64_t v6 = a2;
  if (*((unsigned char *)a1 + 328)) {
    goto LABEL_3;
  }
  if (!sub_BEA400(a1, a2)) {
    goto LABEL_13;
  }
  if (*((unsigned char *)a1 + 328))
  {
LABEL_3:
    if (sub_BEA578(a1, a2)) {
      goto LABEL_4;
    }
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
LABEL_4:
  unint64_t v7 = __ROR8__(*(void *)sub_A3F32C(a1 + 37, a2), 32);
  unsigned int v8 = (int *)sub_49B6BC((*a1)[522] + 24, v7, 0, "transfer node");
  int64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  unsigned int v54 = a3;
  if (v10 >= 7 && v9[3] && (*((unsigned char *)v8 + v9[3]) & 0xFE) == 2)
  {
    if (v10 >= 9 && (unsigned __int16 v11 = v9[4]) != 0)
    {
      unsigned int v12 = a2;
      unint64_t v13 = *(unsigned int *)((char *)v8 + v11 + 4) | ((unint64_t)*(unsigned int *)((char *)v8 + v11) << 32);
    }
    else
    {
      unsigned int v12 = a2;
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    unint64_t v14 = v13 & 0xFFFFFFFF00000000;
    uint64_t v15 = v13;
  }
  else
  {
    unsigned int v12 = a2;
    unint64_t v14 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  unint64_t v16 = (int *)sub_49B6BC((*a1)[522] + 24, v7, 0, "transfer node");
  uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 < 7u) {
    goto LABEL_105;
  }
  uint64_t v18 = v17[3];
  if (!v18) {
    goto LABEL_105;
  }
  int v19 = *((unsigned __int8 *)v16 + v18);
  if (v19 == 3)
  {
    char v20 = 2;
    goto LABEL_22;
  }
  if (v19 != 2)
  {
LABEL_105:
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "Unknown transfer node type");
    uint64_t v51 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  char v20 = 0;
LABEL_22:
  v91[0] = v14 | v15;
  int v98 = 0;
  char v99 = v20;
  v54[1] = 0;
  v54[2] = 0;
  *unsigned int v54 = 0;
  uint64_t v21 = operator new(4uLL);
  uint64_t v22 = (uint64_t)(a1 + 42);
  __p[0] = v21;
  _DWORD *v21 = v12;
  __p[1] = v21 + 1;
  __p[2] = v21 + 1;
  sub_A25A0C((uint64_t)(a1 + 42), (unsigned int **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v23 = (char *)a1[14] - (char *)a1[13];
  if ((v23 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v24 = 0;
    uint64_t v25 = (v23 >> 3);
    unsigned int v52 = v12;
    do
    {
      if (v6 == v24 || sub_A261B0(v22, v24) == 0x7FFFFFFF) {
        goto LABEL_26;
      }
      if (*((unsigned char *)a1 + 328)) {
        goto LABEL_30;
      }
      if (!sub_BEA578(a1, v24)) {
        goto LABEL_26;
      }
      int v26 = *((unsigned __int8 *)a1 + 328);
      if (*((unsigned char *)a1 + 328))
      {
LABEL_30:
        if (!sub_BEA400(a1, v24)) {
          goto LABEL_26;
        }
        int v26 = *((unsigned __int8 *)a1 + 328);
      }
      BOOL v27 = v26 == 0;
      if (v26) {
        unsigned int v28 = v24;
      }
      else {
        unsigned int v28 = v12;
      }
      if (v27) {
        unsigned int v29 = v24;
      }
      else {
        unsigned int v29 = v12;
      }
      uint64_t v30 = v28;
      uint64_t v31 = v29;
      if (sub_BEA6F0(a1, v28, v29))
      {
        unint64_t v32 = __ROR8__(*(void *)sub_A3F32C(a1 + 37, v24), 32);
        uint64_t v33 = (int *)sub_49B6BC((*a1)[522] + 24, v32, 0, "transfer node");
        long long v34 = (unsigned __int16 *)((char *)v33 - *v33);
        unsigned int v35 = *v34;
        if (v35 >= 7 && v34[3] && (*((unsigned char *)v33 + v34[3]) & 0xFE) == 2)
        {
          if (v35 >= 9 && (unsigned __int16 v36 = v34[4]) != 0) {
            unint64_t v37 = *(unsigned int *)((char *)v33 + v36 + 4) | ((unint64_t)*(unsigned int *)((char *)v33 + v36) << 32);
          }
          else {
            unint64_t v37 = 0xFFFFFFFFLL;
          }
          unint64_t v53 = v37 & 0xFFFFFFFF00000000;
          uint64_t v38 = v37;
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v38 = 0xFFFFFFFFLL;
        }
        uint64_t v39 = (int *)sub_49B6BC((*a1)[522] + 24, v32, 0, "transfer node");
        uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 < 7u || (uint64_t v41 = v40[3]) == 0)
        {
LABEL_104:
          unsigned int v48 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__p, "Unknown transfer node type");
          unsigned int v49 = (void *)sub_2F404((uint64_t)v48, (long long *)__p);
        }
        int v42 = *((unsigned __int8 *)v39 + v41);
        if (v42 == 3)
        {
          char v43 = 2;
        }
        else
        {
          if (v42 != 2) {
            goto LABEL_104;
          }
          char v43 = 0;
        }
        v82[0] = v53 | v38;
        int v89 = 0;
        char v90 = v43;
        LODWORD(__p[0]) = v24;
        *(void *)&long long v55 = 0xFFFFFFFFLL;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        std::string v59 = 0;
        sub_BE9A84((uint64_t)&__p[1], (uint64_t)v91, (uint64_t)v82, &v55, (uint64_t)&v59, 0x7FFFFFFF);
        if (v59)
        {
          uint64_t v60 = v59;
          operator delete(v59);
        }
        uint64_t v58 = v30 | (v31 << 32);
        if (sub_BEB798(a1 + 58, (unsigned int *)&v58))
        {
          int v44 = sub_BEB8AC(a1 + 58, (unsigned int *)&v58);
          int v45 = v44;
          if (!v44) {
            sub_5AE8("unordered_map::at: key not found");
          }
          if (v79 != (void **)(v44 + 3)) {
            sub_326C0(v79, (char *)v44[3], (char *)v44[4], (v44[4] - v44[3]) >> 3);
          }
          uint64_t v78 = v45[6];
        }
        else
        {
          sub_BEAAFC((uint64_t)a1, v24, &v55);
          if (v79[0])
          {
            v79[1] = v79[0];
            operator delete(v79[0]);
          }
          *(_OWORD *)unint64_t v79 = v55;
          uint64_t v80 = v56;
          uint64_t v78 = v57;
        }
        int v81 = sub_BE3504(*a1, (uint64_t)v79, 0);
        if (*((unsigned char *)a1 + 328)) {
          sub_BEAE64((uint64_t)&__p[1], (uint64_t)&v70);
        }
        uint64_t v46 = (_DWORD *)v54[1];
        if ((unint64_t)v46 >= v54[2])
        {
          long long v47 = sub_BEB9C0(v54, __p);
        }
        else
        {
          *uint64_t v46 = __p[0];
          sub_BE6528((uint64_t)(v46 + 2), (uint64_t)&__p[1]);
          long long v47 = (char *)(v46 + 100);
          v54[1] = (uint64_t)(v46 + 100);
        }
        v54[1] = (uint64_t)v47;
        if (v79[0])
        {
          v79[1] = v79[0];
          operator delete(v79[0]);
        }
        uint64_t v22 = (uint64_t)(a1 + 42);
        unsigned int v12 = v52;
        if (v77 == 1)
        {
          if (v75)
          {
            uint64_t v76 = v75;
            operator delete(v75);
          }
          if (v73)
          {
            uint64_t v74 = v73;
            operator delete(v73);
          }
          if (v71)
          {
            unint64_t v72 = v71;
            operator delete(v71);
          }
        }
        if (v69 == 1)
        {
          if (v67)
          {
            uint64_t v68 = v67;
            operator delete(v67);
          }
          if (v65)
          {
            uint64_t v66 = v65;
            operator delete(v65);
          }
          if (v63)
          {
            uint64_t v64 = v63;
            operator delete(v63);
          }
        }
        if (v89 == 1)
        {
          if (v87)
          {
            unsigned int v88 = v87;
            operator delete(v87);
          }
          if (v85)
          {
            uint64_t v86 = v85;
            operator delete(v85);
          }
          if (v83)
          {
            int v84 = v83;
            operator delete(v83);
          }
        }
      }
LABEL_26:
      ++v24;
    }
    while (v25 != v24);
  }
  if (v98 == 1)
  {
    if (v96)
    {
      uint64_t v97 = v96;
      operator delete(v96);
    }
    if (v94)
    {
      uint64_t v95 = v94;
      operator delete(v94);
    }
    if (v92)
    {
      uint64_t v93 = v92;
      operator delete(v92);
    }
  }
}

void sub_BEA2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
}

void sub_BEA3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
}

BOOL sub_BEA400(void *a1, unsigned int a2)
{
  unint64_t v3 = a2;
  BOOL result = sub_BEAF60(a1, a2);
  if (result)
  {
    unint64_t v5 = __ROR8__(*(void *)sub_A3F32C(a1 + 37, v3), 32);
    uint64_t v6 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v5, 0, "transfer node");
    unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 < 7u) {
      return 1;
    }
    uint64_t v8 = v7[3];
    if (!v8 || *((unsigned char *)v6 + v8) != 2) {
      return 1;
    }
    int64_t v9 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v5, 0, "transfer node");
    unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 >= 7 && v10[3] && (*((unsigned char *)v9 + v10[3]) & 0xFE) == 2)
    {
      if (v11 >= 9 && (unsigned __int16 v12 = v10[4]) != 0) {
        unint64_t v13 = *(unsigned int *)((char *)v9 + v12 + 4) | ((unint64_t)*(unsigned int *)((char *)v9 + v12) << 32);
      }
      else {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      unint64_t v14 = v13 & 0xFFFFFFFF00000000;
      unint64_t v13 = v13;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    uint64_t v15 = (int *)sub_499804(*(void *)(*a1 + 4008) + 24, __ROR8__(v14 | v13, 32), 0, "access point");
    BOOL result = 0;
    unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u)
    {
      uint64_t v17 = v16[3];
      return v17 && *((unsigned char *)v15 + v17);
    }
  }
  return result;
}

BOOL sub_BEA578(void *a1, unsigned int a2)
{
  unint64_t v3 = a2;
  BOOL result = sub_BEAF60(a1, a2);
  if (result)
  {
    unint64_t v5 = __ROR8__(*(void *)sub_A3F32C(a1 + 37, v3), 32);
    uint64_t v6 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v5, 0, "transfer node");
    unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 < 7u) {
      return 1;
    }
    uint64_t v8 = v7[3];
    if (!v8 || *((unsigned char *)v6 + v8) != 2) {
      return 1;
    }
    int64_t v9 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v5, 0, "transfer node");
    unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 >= 7 && v10[3] && (*((unsigned char *)v9 + v10[3]) & 0xFE) == 2)
    {
      if (v11 >= 9 && (unsigned __int16 v12 = v10[4]) != 0) {
        unint64_t v13 = *(unsigned int *)((char *)v9 + v12 + 4) | ((unint64_t)*(unsigned int *)((char *)v9 + v12) << 32);
      }
      else {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      unint64_t v14 = v13 & 0xFFFFFFFF00000000;
      unint64_t v13 = v13;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v13 = 0xFFFFFFFFLL;
    }
    uint64_t v15 = (int *)sub_499804(*(void *)(*a1 + 4008) + 24, __ROR8__(v14 | v13, 32), 0, "access point");
    BOOL result = 0;
    unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 9u)
    {
      uint64_t v17 = v16[4];
      return v17 && *((unsigned char *)v15 + v17);
    }
  }
  return result;
}

uint64_t sub_BEA6F0(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v46 = (void *)(a2 | ((unint64_t)a3 << 32));
  if (sub_BEB798(a1 + 53, (unsigned int *)&v46)) {
    return 0;
  }
  unint64_t v7 = a3;
  uint64_t v8 = *(void *)sub_A3F32C(a1 + 37, a2);
  uint64_t v9 = *(void *)sub_A3F32C(a1 + 37, v7);
  unsigned int v10 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, __ROR8__(v8, 32), 0, "transfer node");
  int v11 = 0;
  unsigned __int16 v12 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v12 >= 7u)
  {
    uint64_t v13 = v12[3];
    if (v13) {
      int v11 = *((unsigned __int8 *)v10 + v13);
    }
    else {
      int v11 = 0;
    }
  }
  unint64_t v14 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, __ROR8__(v9, 32), 0, "transfer node");
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 7u && (uint64_t v16 = v15[3]) != 0)
  {
    int v17 = *((unsigned __int8 *)v14 + v16);
    BOOL v18 = v17 == 2;
    BOOL v19 = v11 == 2;
    if (v11 == 2 && v17 == 2) {
      return 0;
    }
  }
  else
  {
    BOOL v18 = 0;
    int v17 = 0;
    BOOL v19 = v11 == 2;
  }
  BOOL v20 = v17 == 3 && v19;
  if (v11 != 3) {
    BOOL v18 = 0;
  }
  if ((v20 || v18) && *((unsigned char *)a1 + 329))
  {
    sub_BEB1B0((void *)(*a1 + 4176), v8, (uint64_t)&v46);
    sub_BEB1B0((void *)(*a1 + 4176), v9, (uint64_t)&__p);
    unint64_t v21 = 126 - 2 * __clz((v47 - (unsigned char *)v46) >> 3);
    if (v47 == v46) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    sub_B6FCF0((uint64_t)v46, v47, (uint64_t)&v48, v22, 1);
    unint64_t v23 = 126 - 2 * __clz((v45 - (unsigned char *)__p) >> 3);
    if (v45 == __p) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v23;
    }
    sub_B6FCF0((uint64_t)__p, v45, (uint64_t)&v48, v24, 1);
    uint64_t v25 = v46;
    int64_t v26 = v47 - (unsigned char *)v46;
    if (v47 == v46)
    {
      unsigned int v28 = 0;
      BOOL v27 = 0;
      unsigned int v29 = (char *)__p;
      uint64_t v30 = v45;
      int64_t v31 = v45 - (unsigned char *)__p;
      if (v45 != __p) {
        goto LABEL_30;
      }
    }
    else
    {
      if (v26 < 0) {
        sub_2E00();
      }
      BOOL v27 = (char *)operator new(v47 - (unsigned char *)v46);
      unsigned int v28 = &v27[8 * (v26 >> 3)];
      memcpy(v27, v25, v26);
      unsigned int v29 = (char *)__p;
      uint64_t v30 = v45;
      int64_t v31 = v45 - (unsigned char *)__p;
      if (v45 != __p)
      {
LABEL_30:
        if (v31 < 0) {
          sub_2E00();
        }
        unint64_t v32 = (char *)operator new(v31);
        memcpy(v32, v29, v31);
        uint64_t v33 = 0;
        if (v27 != v28 && v30 != v29)
        {
          uint64_t v33 = 0;
          long long v34 = v27;
          unsigned int v35 = (unsigned int *)v32;
          do
          {
            unsigned int v36 = v35[1];
            unsigned int v37 = *((_DWORD *)v34 + 1);
            BOOL v38 = v37 > v36;
            if (v37 >= v36 && ((unsigned int v39 = *v35, !v38) ? (v40 = *(_DWORD *)v34 >= v39) : (v40 = 1), v40))
            {
              uint64_t v41 = HIDWORD(*(void *)v34);
              if (v36 >= v41 && (v39 >= *(void *)v34 || v36 > v41))
              {
                ++v33;
                v34 += 8;
              }
              v35 += 2;
            }
            else
            {
              v34 += 8;
            }
          }
          while (v34 != v28 && v35 != (unsigned int *)&v32[8 * (v31 >> 3)]);
        }
        BOOL v43 = v33 == 0;
        operator delete(v32);
        if (v27) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
    }
    BOOL v43 = 1;
    if (v27) {
LABEL_52:
    }
      operator delete(v27);
LABEL_53:
    if (__p)
    {
      int v45 = (char *)__p;
      operator delete(__p);
    }
    if (v46)
    {
      long long v47 = (char *)v46;
      operator delete(v46);
    }
    if (v43) {
      return 0;
    }
  }
  return 1;
}

void sub_BEAA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_BEAAFC(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v6 = a1 + 336;
  if (sub_A261B0(a1 + 336, a2) == 0x7FFFFFFF)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "No path to given vertex id");
    unsigned int v29 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  unint64_t v7 = 0;
  memset(__p, 0, sizeof(__p));
  LODWORD(v8) = -1;
  while (1)
  {
    unsigned int v9 = v3;
    unsigned int v3 = sub_A26204(v6, v3);
    unsigned int v10 = sub_A26258(v6, v9);
    if (v3 == -1) {
      break;
    }
    unsigned int v11 = v10;
    sub_A262AC(a1 + 32, v3);
    uint64_t v12 = *(void *)(a1 + 104);
    if (v3 >= (unint64_t)((*(void *)(a1 + 112) - v12) >> 3))
    {
      BOOL v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v27, "key out of range");
    }
    uint64_t v13 = *(void *)(a1 + 128) + 28 * *(unsigned int *)(v12 + 8 * v3);
    *(void *)&long long v30 = *(void *)(v13 + 28 * v11 + 12);
    sub_29603C(__p, &v30);
    unint64_t v14 = *(void *)(v13 + 28 * v11 + 20);
    if (v8 == -1 || !v7)
    {
      uint64_t v8 = *(void *)(v13 + 28 * v11 + 20);
      unint64_t v7 = HIDWORD(v14);
    }
    else
    {
      BOOL v15 = v7 == HIDWORD(v14) && v8 == v14;
      uint64_t v8 = *(void *)(v13 + 28 * v11 + 20);
      unint64_t v7 = HIDWORD(v14);
      if (!v15)
      {
        uint64_t v16 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v30, "In-station path spans multiple transfer graphs");
        int v17 = (void *)sub_2F404((uint64_t)v16, &v30);
      }
    }
  }
  int v18 = *(unsigned __int8 *)(a1 + 328);
  BOOL v19 = __p[0];
  if (!v18 && __p[0] != __p[1])
  {
    BOOL v20 = (char *)__p[1] - 8;
    if ((char *)__p[1] - 8 > __p[0])
    {
      unint64_t v21 = (char *)__p[0] + 8;
      do
      {
        uint64_t v22 = *((void *)v21 - 1);
        *((void *)v21 - 1) = *(void *)v20;
        *(void *)BOOL v20 = v22;
        v20 -= 8;
        BOOL v23 = v21 >= v20;
        v21 += 8;
      }
      while (!v23);
      BOOL v19 = __p[0];
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int64_t v24 = (char *)__p[1] - (char *)v19;
  if (__p[1] != v19)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    uint64_t v25 = (char *)operator new((char *)__p[1] - (char *)v19);
    *a3 = v25;
    int64_t v26 = &v25[8 * (v24 >> 3)];
    a3[2] = v26;
    memcpy(v25, v19, v24);
    a3[1] = v26;
  }
  a3[3] = v8 | (v7 << 32);
  if (v19)
  {
    __p[1] = v19;
    operator delete(v19);
  }
}

void sub_BEADCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BEAE64(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  int v12 = v4;
  if (v4 == 1)
  {
    sub_44479C((uint64_t)v5, a1);
  }
  else if (!v4)
  {
    v5[0] = *(void *)a1;
  }
  char v13 = *(unsigned char *)(a1 + 168);
  sub_BE6A78(a1, a2);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  sub_BE6A78(a2, (uint64_t)v5);
  *(unsigned char *)(a2 + 168) = v13;
  if (v12 == 1)
  {
    if (__p)
    {
      unsigned int v11 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      unsigned int v9 = v8;
      operator delete(v8);
    }
    if (v6)
    {
      unint64_t v7 = v6;
      operator delete(v6);
    }
  }
}

void sub_BEAF54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

BOOL sub_BEAF60(void *a1, unsigned int a2)
{
  unint64_t v3 = __ROR8__(*(void *)sub_A3F32C(a1 + 37, a2), 32);
  int v4 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v3, 0, "transfer node");
  BOOL result = 0;
  uint64_t v6 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v6 >= 7u)
  {
    uint64_t v7 = v6[3];
    if (!v7) {
      return 0;
    }
    int v8 = *((unsigned __int8 *)v4 + v7);
    if ((v8 - 4) < 0xFFFFFFFE) {
      return 0;
    }
    unsigned int v9 = (int *)sub_49B6BC(*(void *)(*a1 + 4176) + 24, v3, 0, "transfer node");
    unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 >= 7 && v10[3] && (*((unsigned char *)v9 + v10[3]) & 0xFE) == 2)
    {
      if (v11 >= 9 && (unsigned __int16 v12 = v10[4]) != 0) {
        unint64_t v13 = *(unsigned int *)((char *)v9 + v12 + 4) | ((unint64_t)*(unsigned int *)((char *)v9 + v12) << 32);
      }
      else {
        unint64_t v13 = 0xFFFFFFFFLL;
      }
      unint64_t v14 = v13 & 0xFFFFFFFF00000000;
      uint64_t v15 = v13;
      uint64_t v16 = *a1;
      int v17 = *(unsigned __int8 *)(*a1 + 16);
      if (v8 == 3 && v17 != 0) {
        return v14 == 0x100000000 && (v15 + 3) < 2 || (sub_2AB7E4(**(void **)(v16 + 4120)) & 1) != 0;
      }
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0xFFFFFFFFLL;
      uint64_t v16 = *a1;
      int v17 = *(unsigned __int8 *)(*a1 + 16);
      if (v8 == 3 && v17 != 0) {
        return v14 == 0x100000000 && (v15 + 3) < 2 || (sub_2AB7E4(**(void **)(v16 + 4120)) & 1) != 0;
      }
    }
    if (v8 != 2 || v17 == 0)
    {
      if (v8 != 2) {
        return 1;
      }
    }
    else
    {
      char v20 = sub_2AB7E4(**(void **)(v16 + 4008));
      if ((v20 & 1) == 0) {
        return 0;
      }
    }
    unint64_t v21 = (int *)sub_499804(*(void *)(*a1 + 4008) + 24, __ROR8__(v14 | v15, 32), 0, "access point");
    uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 0x13u) {
      return 1;
    }
    uint64_t v23 = v22[9];
    if (!v23) {
      return 1;
    }
    int64_t v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
    unsigned int v27 = *v24;
    uint64_t v25 = v24 + 1;
    uint64_t v26 = v27;
    if (v27)
    {
      uint64_t v28 = v26;
      for (uint64_t i = v25; *i != 9; ++i)
      {
        if (!--v28) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t i = v25;
    }
    return i == &v25[v26];
  }
  return result;
}

int *sub_BEB1B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = (int *)sub_49B6BC(*a1 + 24, __ROR8__(a2, 32), 0, "transfer node");
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0xBu
    && (uint64_t v6 = v5[5]) != 0
    && (uint64_t v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unsigned int v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unsigned __int16 v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      BOOL result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unsigned int v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    unint64_t v14 = v16;
  }
  else
  {
    unint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_BEB2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BEB2BC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = __ROR8__(a2, 32);
  uint64_t v6 = (int *)sub_94C794(*a1 + 24, v5, 0, "transfer graph");
  sub_BEB678(v14, v6, 0);
  uint64_t v7 = (int *)sub_94C794(*a1 + 24, v5, 0, "transfer graph");
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xDu && (uint64_t v9 = v8[6]) != 0) {
    unsigned int v10 = *(int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    unsigned int v10 = 0;
  }
  sub_BEB678(v11, v7, v10);
  sub_BEB550(a3, (uint64_t *)v14, (uint64_t *)v11);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_BEB3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BEB3C4(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 sub_BEB408@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = __ROR8__(a2, 32);
  uint64_t v6 = (int *)sub_94C794(*a1 + 24, v5, 0, "transfer graph");
  uint64_t v7 = v6;
  uint64_t v8 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v8 >= 0xFu && v8[7] && (uint64_t v9 = (char *)v6 + v8[7] + *(unsigned int *)((char *)v6 + v8[7]), *(_DWORD *)v9))
  {
    uint64_t v10 = (uint64_t)v6 + v8[3] + *(unsigned int *)((char *)v6 + v8[3]) + 4;
    unsigned int v11 = (unsigned int *)(v10 + 8 * *((unsigned __int16 *)v9 + 2));
    uint64_t v12 = v11[1];
    unint64_t v13 = (unint64_t)*v11 << 32;
    uint64_t v14 = *(unsigned int *)(v10 + 8 * *((unsigned __int16 *)v9 + 3) + 4);
    unint64_t v15 = (unint64_t)*(unsigned int *)(v10 + 8 * *((unsigned __int16 *)v9 + 3)) << 32;
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0xFFFFFFFFLL;
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  uint64_t v16 = (int *)sub_94C794(*a1 + 24, v5, 0, "transfer graph");
  LODWORD(v17) = 0;
  int v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 0xFu)
  {
    uint64_t v17 = v18[7];
    if (v18[7]) {
      LODWORD(v17) = *(int *)((char *)v16 + v17 + *(unsigned int *)((char *)v16 + v17));
    }
  }
  *(void *)a3 = v7;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 12) = v13 | v12;
  *(void *)(a3 + 20) = v15 | v14;
  *(void *)(a3 + 32) = v16;
  *(_DWORD *)(a3 + 40) = v17;
  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *(__n128 *)(a3 + 44) = result;
  return result;
}

uint64_t sub_BEB550(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = (unsigned char *)a2[2];
  uint64_t v6 = (unsigned char *)a2[3];
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(void *)(a1 + 24) = v10;
  }
  uint64_t v11 = *a3;
  int v12 = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 48) = v12;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v14 = (unsigned char *)a3[2];
  unint64_t v13 = (unsigned char *)a3[3];
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v13 - v14);
    *(void *)(a1 + 56) = v16;
    *(void *)(a1 + 64) = v16;
    uint64_t v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 72) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 64) = v17;
  }
  return a1;
}

void sub_BEB658(void *a1)
{
  int v4 = *v1;
  if (*v1)
  {
    void *v2 = v4;
    operator delete(v4);
  }
  sub_58CC(a1);
}

int **sub_BEB678(int **a1, int *a2, unsigned int a3)
{
  *a1 = a2;
  *((_DWORD *)a1 + 2) = a3;
  a1[2] = 0;
  int v4 = (void **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 0xDu)
  {
    uint64_t v6 = v5[6];
    if (v6)
    {
      uint64_t v7 = (unsigned int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
      if (*v7 > a3)
      {
        int64_t v8 = (int *)((char *)&v7[a3 + 1] + v7[a3 + 1]);
        uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v9 >= 5u)
        {
          uint64_t v10 = v9[2];
          if (v10)
          {
            uint64_t v11 = (unsigned int *)((char *)v8 + v10);
            uint64_t v12 = *v11;
            uint64_t v14 = (unsigned __int16 *)((char *)v11 + v12 + 4);
            uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
            if (v13)
            {
              uint64_t v15 = 2 * v13;
              do
              {
                uint64_t v16 = (unsigned int *)((char *)*a1 + *(unsigned __int16 *)((char *)*a1 - **a1 + 8));
                unint64_t v18 = *(unsigned int *)((char *)&v16[2 * *v14 + 2] + *v16) | ((unint64_t)*(unsigned int *)((char *)&v16[2 * *v14 + 1] + *v16) << 32);
                sub_29603C(v4, &v18);
                ++v14;
                v15 -= 2;
              }
              while (v15);
            }
          }
        }
      }
    }
  }
  return a1;
}

void sub_BEB77C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_BEB798(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 2656449171) ^ 0x7A69) << 6) + (((v3 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v3 + 2656449171) ^ 0x7A69;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = (v4 + (((v3 + 2656449171) ^ 0x7A69) << 6) + (((v3 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v3 + 2656449171) ^ 0x7A69;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 + 0x7FFFFFFFFFFFFFFFLL);
  }
  int64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v5 == v14)
        {
          if (*((_DWORD *)result + 4) == v4 && *((_DWORD *)result + 5) == v3) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v5 == v12)
      {
        if (*((_DWORD *)result + 4) == v4 && *((_DWORD *)result + 5) == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_BEB8AC(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 2656449171) ^ 0x7A69) << 6) + (((v3 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v3 + 2656449171) ^ 0x7A69;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = (v4 + (((v3 + 2656449171) ^ 0x7A69) << 6) + (((v3 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v3 + 2656449171) ^ 0x7A69;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 + 0x7FFFFFFFFFFFFFFFLL);
  }
  int64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v14 == v5)
        {
          if (*((_DWORD *)result + 4) == v4 && *((_DWORD *)result + 5) == v3) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == v5)
      {
        if (*((_DWORD *)result + 4) == v4 && *((_DWORD *)result + 5) == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

char *sub_BEB9C0(uint64_t *a1, _DWORD *a2)
{
  unint64_t v3 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xA3D70A3D70A3D7) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1EB851EB851EB852 * ((a1[2] - *a1) >> 4);
  }
  if (0x8F5C28F5C28F5C29 * ((a1[2] - *a1) >> 4) >= 0x51EB851EB851EBLL) {
    unint64_t v6 = 0xA3D70A3D70A3D7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xA3D70A3D70A3D7) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(400 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v14 = &v7[400 * v3];
  uint64_t v15 = &v7[400 * v6];
  *(_DWORD *)uint64_t v14 = *a2;
  sub_BE6528((uint64_t)(v14 + 8), (uint64_t)(a2 + 2));
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 400;
  uint64_t v11 = (__n128 *)*a1;
  uint64_t v10 = (__n128 *)a1[1];
  if (v10 == (__n128 *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v8 -= 400;
      v10 -= 25;
      sub_BEBBC8((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    unint64_t v12 = (__n128 *)*a1;
    uint64_t v10 = (__n128 *)a1[1];
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        sub_9F636C((uint64_t)&v10[-25].n128_i64[1]);
        v10 -= 25;
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 400;
}

void sub_BEBB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BEBB70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BEBB70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 400;
    sub_9F636C(i - 392);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_BEBBC8(uint64_t a1, uint64_t a2, __n128 *a3)
{
  *(_DWORD *)a2 = a3->n128_u32[0];
  unint64_t v5 = (unint64_t *)(a2 + 8);
  unint64_t v6 = &a3->n128_u64[1];
  *(_DWORD *)(a2 + 168) = a3[10].n128_u32[2];
  unsigned __int32 v7 = a3[10].n128_u32[2];
  if (v7 == 1)
  {
    sub_44479C((uint64_t)v5, (uint64_t)v6);
  }
  else if (!v7)
  {
    *unint64_t v5 = *v6;
  }
  *(unsigned char *)(a2 + 176) = a3[11].n128_u8[0];
  uint64_t v8 = (unint64_t *)(a2 + 184);
  uint64_t v9 = &a3[11].n128_u64[1];
  *(_DWORD *)(a2 + 344) = a3[21].n128_u32[2];
  unsigned __int32 v10 = a3[21].n128_u32[2];
  if (v10 == 1)
  {
    sub_44479C((uint64_t)v8, (uint64_t)v9);
  }
  else if (!v10)
  {
    *uint64_t v8 = *v9;
  }
  *(unsigned char *)(a2 + 352) = a3[22].n128_u8[0];
  *(void *)(a2 + 360) = a3[22].n128_u64[1];
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  __n128 result = a3[23];
  *(__n128 *)(a2 + 368) = result;
  *(void *)(a2 + 384) = a3[24].n128_u64[0];
  a3[23].n128_u64[0] = 0;
  a3[23].n128_u64[1] = 0;
  a3[24].n128_u64[0] = 0;
  *(_DWORD *)(a2 + 392) = a3[24].n128_u32[2];
  return result;
}

char *sub_BEBC98(uint64_t a1, unsigned int *a2, uint64_t *a3, long long *a4)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = (v9 + (((v8 + 2656449171) ^ 0x7A69) << 6) + (((v8 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v8 + 2656449171) ^ 0x7A69;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = (v9 + (((v8 + 2656449171) ^ 0x7A69) << 6) + (((v8 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v8 + 2656449171) ^ 0x7A69;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 + 0x7FFFFFFFFFFFFFFFLL);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v14 + 1);
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v9 && *((_DWORD *)v14 + 5) == v8) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  BOOL v19 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x38uLL);
  uint64_t v20 = *a3;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = v20;
  long long v21 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v22 = *((void *)a4 + 2);
  uint64_t v23 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0;
  *(void *)uint64_t v14 = 0;
  *(_OWORD *)(v14 + 24) = v21;
  *((void *)v14 + 5) = v22;
  *((void *)v14 + 6) = v23;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (v11 && (float)(v25 * (float)v11) >= v24)
  {
    uint64_t v26 = *(void *)a1;
    unsigned int v27 = *(void **)(*(void *)a1 + 8 * v4);
    if (v27)
    {
LABEL_34:
      *(void *)uint64_t v14 = *v27;
LABEL_69:
      void *v27 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v26 = *(void *)a1;
        unsigned int v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v26 = *(void *)a1;
        unsigned int v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = (v11 + 0x7FFFFFFFFFFFFFFFLL) & v10;
      uint64_t v26 = *(void *)a1;
      unsigned int v27 = *(void **)(*(void *)a1 + 8 * v4);
      if (v27) {
        goto LABEL_34;
      }
    }
  }
  *(void *)uint64_t v14 = *v19;
  *BOOL v19 = v14;
  *(void *)(v26 + 8 * v4) = v19;
  if (*(void *)v14)
  {
    unint64_t v36 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11) {
        v36 %= v11;
      }
    }
    else
    {
      v36 &= v11 - 1;
    }
    unsigned int v27 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_BEC00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_BEC020(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = (v7 + (((v6 + 2656449171) ^ 0x7A69) << 6) + (((v6 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v6 + 2656449171) ^ 0x7A69;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (v7 + (((v6 + 2656449171) ^ 0x7A69) << 6) + (((v6 + 2656449171) ^ 0x7A69uLL) >> 2) + 2654435769u) ^ (v6 + 2656449171) ^ 0x7A69;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 + 0x7FFFFFFFFFFFFFFFLL);
    }
    unint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint8x8_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v7 && *((_DWORD *)v12 + 5) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint8x8_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v7 && *((_DWORD *)v12 + 5) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint8x8_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  unint64_t v18 = operator new(0x18uLL);
  *unint64_t v18 = 0;
  v18[1] = v8;
  void v18[2] = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *unint64_t v18 = *v22;
LABEL_69:
      void *v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = (v9 + 0x7FFFFFFFFFFFFFFFLL) & v8;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v30 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_BEC370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_BEC384()
{
  unk_25DFE07 = 16641;
  word_25DFDF0 = 65;
  byte_25DFE1F = 1;
  byte_25DFE09 = 0;
}

BOOL *sub_BEC3AC(BOOL *a1, void *a2)
{
  long long __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9960;
  strcpy((char *)__p, "origin_start_from_station_access_points");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  long long __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9240;
  strcpy((char *)__p, "origin_block_cross_station_entry_exit");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  long long __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9A40;
  strcpy((char *)__p, "destination_block_cross_station_entry_exit");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  a1[2] = v6;
  return a1;
}

void sub_BEC4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BEC510(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = sub_BEC3AC((BOOL *)a1, a4);
  *((void *)v8 + 1) = a3;
  sub_BFF8A4((uint64_t)(v8 + 16), a3);
  sub_BFF8A4(a1 + 160, a3);
  char v12 = 9;
  strcpy((char *)__p, "on_street");
  long long v9 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_C0284C(a1 + 304, a2, a3, v9);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  return a1;
}

void sub_BEC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_BEC5FC@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9 = a2;
  int v22 = a2;
  sub_C556A0((uint64_t)v23, &v22);
  long long v12 = v23[7];
  *(_OWORD *)(a1 + 616) = v23[6];
  *(_OWORD *)(a1 + 632) = v12;
  *(void *)(a1 + 648) = v24;
  long long v13 = v23[3];
  *(_OWORD *)(a1 + 552) = v23[2];
  *(_OWORD *)(a1 + 568) = v13;
  long long v14 = v23[5];
  *(_OWORD *)(a1 + 584) = v23[4];
  *(_OWORD *)(a1 + 600) = v14;
  long long v15 = v23[1];
  *(_OWORD *)(a1 + 520) = v23[0];
  *(_OWORD *)(a1 + 536) = v15;
  *(unsigned char *)a6 = v9;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(void *)(a6 + 56) = 0;
  *(_DWORD *)(a6 + 64) = 1065353216;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_DWORD *)(a6 + 104) = 1065353216;
  sub_C07D3C(*(void *)(a1 + 8), (void *)a6, a3);
  sub_C081A4((void *)a6, a3);
  sub_725D0((uint64_t)v23);
  sub_C00D24((unsigned __int8 *)(a1 + 16), a6, *(unsigned char *)a1, *(unsigned char *)(a1 + 1));
  uint64_t v16 = sub_638A44(a1 + 16);
  sub_C556D0(a1 + 520, v16);
  *(double *)(a1 + 536) = sub_72688((uint64_t)v23) + *(double *)(a1 + 536);
  sub_725D0((uint64_t)v23);
  sub_BFF8C4((uint64_t *)(a1 + 160), (void *)a6);
  uint64_t v17 = sub_638A44(a1 + 160);
  sub_C556D0(a1 + 520, v17);
  *(double *)(a1 + 544) = sub_72688((uint64_t)v23) + *(double *)(a1 + 544);
  sub_725D0((uint64_t)v23);
  sub_C028A4(a1 + 304, a6, a4, a5);
  uint64_t v18 = sub_68EA4(a1 + 304);
  sub_C556D0(a1 + 520, v18);
  *(double *)(a1 + 552) = sub_72688((uint64_t)v23) + *(double *)(a1 + 552);
  sub_725D0((uint64_t)v23);
  sub_BFF8C4((uint64_t *)(a1 + 160), (void *)a6);
  uint64_t v19 = sub_638A44(a1 + 160);
  sub_C556D0(a1 + 520, v19);
  *(double *)(a1 + 544) = sub_72688((uint64_t)v23) + *(double *)(a1 + 544);
  sub_725D0((uint64_t)v23);
  sub_C00D24((unsigned __int8 *)(a1 + 16), a6, 0, *(unsigned char *)(a1 + 2));
  uint64_t v20 = sub_638A44(a1 + 16);
  sub_C556D0(a1 + 520, v20);
  *(double *)(a1 + 536) = sub_72688((uint64_t)v23) + *(double *)(a1 + 536);
  double result = *(double *)(a1 + 584) + (double)*(unint64_t *)(a6 + 96);
  *(double *)(a1 + 584) = result;
  return result;
}

void sub_BEC848(_Unwind_Exception *a1)
{
  sub_BEC85C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_BEC85C(uint64_t *a1)
{
  int8x8_t v2 = (void *)a1[11];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = (void *)a1[9];
  a1[9] = 0;
  if (v4) {
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[6];
  if (v5)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)a1[4];
  a1[4] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    sub_9F64C8((uint64_t)(a1 + 1), v8);
    operator delete((void *)a1[1]);
  }
  return a1;
}

uint64_t sub_BEC8EC(uint64_t a1)
{
  return a1 + 520;
}

void sub_BEC8F4()
{
  unk_25DFE37 = 16641;
  word_25DFE20 = 65;
  byte_25DFE4F = 1;
  byte_25DFE39 = 0;
}

_DWORD *sub_BEC91C(_DWORD *a1, void *a2)
{
  long long __p = operator new(0x28uLL);
  long long v6 = xmmword_20B9960;
  strcpy((char *)__p, "max_initial_os_walking_duration_minutes");
  *a1 = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v6 = xmmword_20B9240;
  strcpy((char *)__p, "max_final_os_walking_duration_minutes");
  a1[1] = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v6 = xmmword_20E12D0;
  strcpy((char *)__p, "max_direct_os_walking_duration_minutes");
  a1[2] = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_BECA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BECA98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *((void *)sub_BEC91C((_DWORD *)a1, a4) + 2) = a3;
  char v13 = 15;
  strcpy(__p, "initial_walking");
  uint64_t v8 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BEC5F8(a1 + 24, a2, a3, v8);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 14;
  strcpy(__p, "direct_walking");
  char v9 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BE45C0(a1 + 680, a2, a3, v9);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 17;
  strcpy(__p, "walking_unpacking");
  uint8x8_t v10 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BFE400(a1 + 896, a2, a3, v10);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 1184) = 0;
  *(void *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_DWORD *)(a1 + 1248) = 1065353216;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_DWORD *)(a1 + 1288) = 1065353216;
  *(unsigned char *)(a1 + 1296) = 0;
  *(void *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1400) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_DWORD *)(a1 + 1440) = 1065353216;
  *(_DWORD *)(a1 + 1448) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_DWORD *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_DWORD *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  return a1;
}

void sub_BECCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4AA598(v15);
  sub_BECD48(v14);
  _Unwind_Resume(a1);
}

void sub_BECD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BECD48(uint64_t a1)
{
  if (*(char *)(a1 + 359) < 0)
  {
    operator delete(*(void **)(a1 + 336));
    if ((*(char *)(a1 + 335) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 335) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 312));
  return a1;
}

double sub_BECDA8(uint64_t a1, uint64_t a2)
{
  sub_725D0((uint64_t)v47);
  int v4 = *(_DWORD *)a1;
  long long v48 = 0u;
  long long v49 = 0u;
  sub_BEC5FC(a1 + 24, 0, a2, v4, (uint64_t)&v48, (uint64_t)v34);
  *(unsigned char *)(a1 + 1184) = v34[0];
  BOOL v5 = (void **)(a1 + 1192);
  uint64_t v6 = *(void *)(a1 + 1192);
  if (v6)
  {
    sub_9F64C8(a1 + 1192, v6);
    operator delete(*v5);
    *BOOL v5 = 0;
    *(void *)(a1 + 1200) = 0;
    *(void *)(a1 + 1208) = 0;
  }
  *(_OWORD *)BOOL v5 = *(_OWORD *)v35;
  *(void *)(a1 + 1208) = v36;
  v35[1] = 0;
  uint64_t v36 = 0;
  v35[0] = 0;
  if (*(void *)(a1 + 1240))
  {
    uint64_t v7 = *(void **)(a1 + 1232);
    if (v7)
    {
      do
      {
        uint64_t v8 = (void *)*v7;
        operator delete(v7);
        uint64_t v7 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 1232) = 0;
    uint64_t v9 = *(void *)(a1 + 1224);
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        *(void *)(*(void *)(a1 + 1216) + 8 * i) = 0;
    }
    *(void *)(a1 + 1240) = 0;
  }
  unint64_t v11 = v37;
  unsigned int v37 = 0;
  long long v12 = *(void **)(a1 + 1216);
  *(void *)(a1 + 1216) = v11;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = v38;
  uint64_t v14 = v39;
  *(void *)(a1 + 1224) = v38;
  unint64_t v38 = 0;
  uint64_t v15 = v40;
  *(void *)(a1 + 1240) = v40;
  *(_DWORD *)(a1 + 1248) = v41;
  *(void *)(a1 + 1232) = v14;
  if (v15)
  {
    unint64_t v16 = v14[1];
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v16 >= v13) {
        v16 %= v13;
      }
    }
    else
    {
      v16 &= v13 - 1;
    }
    *(void *)(*(void *)(a1 + 1216) + 8 * v16) = a1 + 1232;
    unsigned int v39 = 0;
    uint64_t v40 = 0;
  }
  if (*(void *)(a1 + 1280))
  {
    uint64_t v17 = *(void **)(a1 + 1272);
    if (v17)
    {
      do
      {
        uint64_t v18 = (void *)*v17;
        operator delete(v17);
        uint64_t v17 = v18;
      }
      while (v18);
    }
    *(void *)(a1 + 1272) = 0;
    uint64_t v19 = *(void *)(a1 + 1264);
    if (v19)
    {
      for (uint64_t j = 0; j != v19; ++j)
        *(void *)(*(void *)(a1 + 1256) + 8 * j) = 0;
    }
    *(void *)(a1 + 1280) = 0;
  }
  uint64_t v21 = __p;
  long long __p = 0;
  int v22 = *(void **)(a1 + 1256);
  *(void *)(a1 + 1256) = v21;
  if (v22) {
    operator delete(v22);
  }
  unint64_t v24 = v43;
  BOOL v23 = v44;
  *(void *)(a1 + 1264) = v43;
  unint64_t v43 = 0;
  uint64_t v25 = v45;
  *(void *)(a1 + 1280) = v45;
  *(_DWORD *)(a1 + 1288) = v46;
  *(void *)(a1 + 1272) = v23;
  if (v25)
  {
    unint64_t v26 = v23[1];
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v26 >= v24) {
        v26 %= v24;
      }
    }
    else
    {
      v26 &= v24 - 1;
    }
    *(void *)(*(void *)(a1 + 1256) + 8 * v26) = a1 + 1272;
    int v44 = 0;
    uint64_t v45 = 0;
  }
  else if (v23)
  {
    do
    {
      unint64_t v27 = (void *)*v23;
      operator delete(v23);
      BOOL v23 = v27;
    }
    while (v27);
  }
  uint8x8_t v28 = __p;
  long long __p = 0;
  if (v28) {
    operator delete(v28);
  }
  uint64_t v29 = v39;
  if (v39)
  {
    do
    {
      unint64_t v30 = (void *)*v29;
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
  int64_t v31 = v37;
  unsigned int v37 = 0;
  if (v31) {
    operator delete(v31);
  }
  if (v35[0])
  {
    sub_9F64C8((uint64_t)v35, (uint64_t)v35[0]);
    operator delete(v35[0]);
  }
  if (BYTE8(v49) && (void)v48)
  {
    *((void *)&v48 + 1) = v48;
    operator delete((void *)v48);
  }
  sub_BED0E8(*(void *)(a1 + 16), (unsigned __int8 *)(a1 + 1184));
  uint64_t v32 = sub_BEC8EC(a1 + 24);
  sub_C556D0(a1 + 1448, v32);
  double result = sub_72688((uint64_t)v47) + *(double *)(a1 + 1456);
  *(double *)(a1 + 1456) = result;
  return result;
}

void sub_BED0C4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 56)) {
    sub_20AE8D4(v1 - 80);
  }
  _Unwind_Resume(exception_object);
}

void sub_BED0E8(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  sub_BEDC48(&v9, (uint64_t)a2);
  if (v10 != -1)
  {
    uint64_t v4 = a1 + 3896;
    if (v3)
    {
      do
      {
        sub_C25A30(v4, v11, 0x1FFFFFFFDLL, v12);
        sub_BED920(&v9);
      }
      while (v10 != -1);
    }
    else
    {
      do
      {
        sub_C25A30(v4, 0x1FFFFFFFELL, v11, v12);
        sub_BED920(&v9);
      }
      while (v10 != -1);
    }
  }
  BOOL v5 = __p;
  if (__p)
  {
    uint64_t v6 = (uint64_t)v14;
    uint64_t v7 = __p;
    if (v14 != __p)
    {
      do
      {
        int v8 = *(_DWORD *)(v6 - 8);
        v6 -= 1432;
        if (v8 == 2)
        {
          uint64_t v6 = sub_9F6418(v6);
        }
        else if (!v8)
        {
          uint64_t v6 = sub_9F636C(v6);
        }
      }
      while ((void *)v6 != v5);
      uint64_t v7 = __p;
    }
    uint64_t v14 = v5;
    operator delete(v7);
  }
}

void sub_BED200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

double sub_BED220(uint64_t a1, uint64_t a2)
{
  sub_725D0((uint64_t)v47);
  int v4 = *(_DWORD *)(a1 + 4);
  long long v48 = 0u;
  long long v49 = 0u;
  sub_BEC5FC(a1 + 24, 1, a2, v4, (uint64_t)&v48, (uint64_t)v34);
  *(unsigned char *)(a1 + 1296) = v34[0];
  BOOL v5 = (void **)(a1 + 1304);
  uint64_t v6 = *(void *)(a1 + 1304);
  if (v6)
  {
    sub_9F64C8(a1 + 1304, v6);
    operator delete(*v5);
    *BOOL v5 = 0;
    *(void *)(a1 + 1312) = 0;
    *(void *)(a1 + 1320) = 0;
  }
  *(_OWORD *)BOOL v5 = *(_OWORD *)v35;
  *(void *)(a1 + 1320) = v36;
  v35[1] = 0;
  uint64_t v36 = 0;
  v35[0] = 0;
  if (*(void *)(a1 + 1352))
  {
    uint64_t v7 = *(void **)(a1 + 1344);
    if (v7)
    {
      do
      {
        int v8 = (void *)*v7;
        operator delete(v7);
        uint64_t v7 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 1344) = 0;
    uint64_t v9 = *(void *)(a1 + 1336);
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        *(void *)(*(void *)(a1 + 1328) + 8 * i) = 0;
    }
    *(void *)(a1 + 1352) = 0;
  }
  uint64_t v11 = v37;
  unsigned int v37 = 0;
  int v12 = *(void **)(a1 + 1328);
  *(void *)(a1 + 1328) = v11;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = v38;
  uint64_t v14 = v39;
  *(void *)(a1 + 1336) = v38;
  unint64_t v38 = 0;
  uint64_t v15 = v40;
  *(void *)(a1 + 1352) = v40;
  *(_DWORD *)(a1 + 1360) = v41;
  *(void *)(a1 + 1344) = v14;
  if (v15)
  {
    unint64_t v16 = v14[1];
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v16 >= v13) {
        v16 %= v13;
      }
    }
    else
    {
      v16 &= v13 - 1;
    }
    *(void *)(*(void *)(a1 + 1328) + 8 * v16) = a1 + 1344;
    unsigned int v39 = 0;
    uint64_t v40 = 0;
  }
  if (*(void *)(a1 + 1392))
  {
    uint64_t v17 = *(void **)(a1 + 1384);
    if (v17)
    {
      do
      {
        uint64_t v18 = (void *)*v17;
        operator delete(v17);
        uint64_t v17 = v18;
      }
      while (v18);
    }
    *(void *)(a1 + 1384) = 0;
    uint64_t v19 = *(void *)(a1 + 1376);
    if (v19)
    {
      for (uint64_t j = 0; j != v19; ++j)
        *(void *)(*(void *)(a1 + 1368) + 8 * j) = 0;
    }
    *(void *)(a1 + 1392) = 0;
  }
  uint64_t v21 = __p;
  long long __p = 0;
  int v22 = *(void **)(a1 + 1368);
  *(void *)(a1 + 1368) = v21;
  if (v22) {
    operator delete(v22);
  }
  unint64_t v24 = v43;
  BOOL v23 = v44;
  *(void *)(a1 + 1376) = v43;
  unint64_t v43 = 0;
  uint64_t v25 = v45;
  *(void *)(a1 + 1392) = v45;
  *(_DWORD *)(a1 + 1400) = v46;
  *(void *)(a1 + 1384) = v23;
  if (v25)
  {
    unint64_t v26 = v23[1];
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v26 >= v24) {
        v26 %= v24;
      }
    }
    else
    {
      v26 &= v24 - 1;
    }
    *(void *)(*(void *)(a1 + 1368) + 8 * v26) = a1 + 1384;
    int v44 = 0;
    uint64_t v45 = 0;
  }
  else if (v23)
  {
    do
    {
      unint64_t v27 = (void *)*v23;
      operator delete(v23);
      BOOL v23 = v27;
    }
    while (v27);
  }
  uint8x8_t v28 = __p;
  long long __p = 0;
  if (v28) {
    operator delete(v28);
  }
  uint64_t v29 = v39;
  if (v39)
  {
    do
    {
      unint64_t v30 = (void *)*v29;
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
  int64_t v31 = v37;
  unsigned int v37 = 0;
  if (v31) {
    operator delete(v31);
  }
  if (v35[0])
  {
    sub_9F64C8((uint64_t)v35, (uint64_t)v35[0]);
    operator delete(v35[0]);
  }
  if (BYTE8(v49) && (void)v48)
  {
    *((void *)&v48 + 1) = v48;
    operator delete((void *)v48);
  }
  sub_BED0E8(*(void *)(a1 + 16), (unsigned __int8 *)(a1 + 1296));
  uint64_t v32 = sub_BEC8EC(a1 + 24);
  sub_C556D0(a1 + 1584, v32);
  double result = sub_72688((uint64_t)v47) + *(double *)(a1 + 1592);
  *(double *)(a1 + 1592) = result;
  return result;
}

void sub_BED53C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 56)) {
    sub_20AE8D4(v1 - 80);
  }
  _Unwind_Resume(exception_object);
}

void sub_BED560(uint64_t a1)
{
  sub_725D0((uint64_t)v10);
  sub_BE468C(a1 + 680, a1 + 1184, a1 + 1296, *(_DWORD *)(a1 + 8), (uint64_t *)&__p);
  if (__p != v9)
  {
    long long v7 = xmmword_20EC660;
    sub_BEDD70(a1 + 1408, (uint64_t *)&v7, &v7, (uint64_t *)&__p);
  }
  uint64_t v2 = sub_68EA4(a1 + 680);
  sub_C556D0(a1 + 1720, v2);
  *(double *)(a1 + 1728) = sub_72688((uint64_t)v10) + *(double *)(a1 + 1728);
  int v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v9;
    BOOL v5 = __p;
    if (v9 != __p)
    {
      do
      {
        int v6 = *(_DWORD *)(v4 - 8);
        v4 -= 1432;
        if (v6 == 2)
        {
          uint64_t v4 = sub_9F6418(v4);
        }
        else if (!v6)
        {
          uint64_t v4 = sub_9F636C(v4);
        }
      }
      while ((void *)v4 != v3);
      BOOL v5 = __p;
    }
    uint64_t v9 = v3;
    operator delete(v5);
  }
}

void sub_BED654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE5304((void **)va);
  _Unwind_Resume(a1);
}

void sub_BED668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE5304((void **)va);
  _Unwind_Resume(a1);
}

double sub_BED67C(uint64_t a1, uint64_t a2)
{
  sub_725D0((uint64_t)v7);
  sub_497CC0(&v6, *(void *)(a1 + 16));
  sub_BF99D0(&v6, (void *)(a1 + 1408), a2, a1 + 1184, a1 + 1296);
  sub_BFE4BC(a1 + 896, a1 + 1408);
  uint64_t v4 = sub_374DF4(a1 + 896);
  sub_C556D0(a1 + 1856, v4);
  double result = sub_72688((uint64_t)v7) + *(double *)(a1 + 1864);
  *(double *)(a1 + 1864) = result;
  return result;
}

uint64_t sub_BED718(uint64_t a1)
{
  long long v14 = xmmword_20EC660;
  uint64_t v1 = (void *)(a1 + 1408);
  if (!sub_A0E0A8((void *)(a1 + 1408), (uint64_t *)&v14)) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v2 = sub_A0E0A8(v1, (uint64_t *)&v14);
  if (!v2) {
    sub_5AE8("unordered_map::at: key not found");
  }
  int v3 = (unsigned int *)v2[4];
  uint64_t v4 = (unsigned int *)v2[5];
  if (v3 == v4) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  do
  {
    unsigned int v8 = v3[356];
    uint64_t result = 0x7FFFFFFFLL;
    if (v8)
    {
      if (v8 == 2)
      {
        unint64_t v10 = v3[354];
        if (v10 == 0x7FFFFFFF || (v10 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000) {
          return result;
        }
      }
      else
      {
        if (v8 != 1) {
          return result;
        }
        unint64_t v10 = (unint64_t)v3[2] << 32;
        if (v10 == 0x7FFFFFFF00000000) {
          return result;
        }
      }
      unsigned int v11 = 0;
      int v12 = HIDWORD(v10);
    }
    else
    {
      unsigned int v11 = v3[96];
      if (v11 == 0x7FFFFFFF) {
        return result;
      }
      LODWORD(v10) = 0;
      int v12 = 0;
    }
    v6 += v10;
    v7 += v12;
    v5 += v11;
    v3 += 358;
  }
  while (v3 != v4);
  if (v7 != 0x7FFFFFFF && v6 != 0x7FFFFFFF && v5 != 0x7FFFFFFF) {
    return (v7 + v6 + v5);
  }
  return result;
}

uint64_t sub_BED880(uint64_t a1)
{
  return a1 + 1408;
}

uint64_t sub_BED888(uint64_t a1)
{
  return a1 + 1448;
}

uint64_t sub_BED890(uint64_t a1)
{
  return a1 + 1584;
}

uint64_t sub_BED898(uint64_t a1)
{
  return a1 + 1720;
}

uint64_t sub_BED8A0(uint64_t a1)
{
  return a1 + 1856;
}

uint64_t sub_BED8A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
      {
        int v5 = *(_DWORD *)(v3 - 8);
        v3 -= 1432;
        if (v5 == 2)
        {
          uint64_t v3 = sub_9F6418(v3);
        }
        else if (!v5)
        {
          uint64_t v3 = sub_9F636C(v3);
        }
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_BED920(unsigned int *a1)
{
  uint64_t v2 = a1[2];
  if (v2 == -1) {
    goto LABEL_13;
  }
  unint64_t v3 = v2 + 1;
  a1[2] = v3;
  if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 5) <= v3) {
    goto LABEL_19;
  }
  if (v3 == -1) {
    goto LABEL_13;
  }
  while (1)
  {
    unint64_t v4 = v3;
    unint64_t v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 5);
    if (v5 <= v4) {
      break;
    }
    uint64_t v6 = sub_BE601C((void *)(*(void *)a1 + 8), v4);
    BOOL v7 = *(_DWORD *)(v6 + 1616) == -1 || *(_DWORD *)(v6 + 1620) == 0;
    unint64_t v4 = a1[2];
    if (v7 && *(unsigned char *)(v6 + 168) == 2)
    {
      if (v4 == -1) {
        goto LABEL_13;
      }
      unint64_t v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 5);
      break;
    }
    LODWORD(v3) = v4 + 1;
    a1[2] = v4 + 1;
    if (v4 == -2) {
      goto LABEL_13;
    }
  }
  if (v5 > v4)
  {
LABEL_13:
    uint64_t v9 = (uint64_t)a1;
  }
  else
  {
LABEL_19:
    a1[2] = -1;
    uint64_t v9 = (uint64_t)a1;
  }
  sub_BEDA5C(v9);
}

void sub_BEDA5C(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1 != -1)
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v6 = *(void *)(v3 + 16);
    unint64_t v4 = (void *)(v3 + 8);
    if (0xFAFAFAFAFAFAFAFBLL * ((v6 - v5) >> 5) > v1)
    {
      uint64_t v7 = sub_BE601C(v4, v1);
      uint64_t v8 = *(void *)v7;
      int v9 = *(_DWORD *)(v7 + 176);
      sub_BE59E0(*(void *)a1, *(_DWORD *)(a1 + 8), (uint64_t *)&__p);
      unsigned int v11 = __p;
      unint64_t v10 = v22;
      uint64_t v12 = v23;
      int v22 = 0;
      uint64_t v23 = 0;
      long long __p = 0;
      *(void *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v9;
      uint64_t v13 = *(void *)(a1 + 32);
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v15 = *(void **)(a1 + 32);
        if (v14 != v13)
        {
          do
          {
            int v16 = *(_DWORD *)(v14 - 8);
            v14 -= 1432;
            if (v16 == 2)
            {
              uint64_t v14 = sub_9F6418(v14);
            }
            else if (!v16)
            {
              uint64_t v14 = sub_9F636C(v14);
            }
          }
          while (v14 != v13);
          uint64_t v15 = *(void **)(a1 + 32);
        }
        *(void *)(a1 + 40) = v13;
        operator delete(v15);
        uint64_t v17 = __p;
        *(void *)(a1 + 32) = v11;
        *(void *)(a1 + 40) = v10;
        *(void *)(a1 + 48) = v12;
        if (v17)
        {
          uint64_t v18 = (uint64_t)v22;
          uint64_t v19 = v17;
          if (v22 != v17)
          {
            do
            {
              int v20 = *(_DWORD *)(v18 - 8);
              v18 -= 1432;
              if (v20 == 2)
              {
                uint64_t v18 = sub_9F6418(v18);
              }
              else if (!v20)
              {
                uint64_t v18 = sub_9F636C(v18);
              }
            }
            while ((void *)v18 != v17);
            uint64_t v19 = __p;
          }
          int v22 = v17;
          operator delete(v19);
        }
      }
      else
      {
        *(void *)(a1 + 32) = v11;
        *(void *)(a1 + 40) = v10;
        *(void *)(a1 + 48) = v12;
      }
    }
  }
}

uint64_t sub_BEDBD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
      {
        int v5 = *(_DWORD *)(v3 - 8);
        v3 -= 1432;
        if (v5 == 2)
        {
          uint64_t v3 = sub_9F6418(v3);
        }
        else if (!v5)
        {
          uint64_t v3 = sub_9F636C(v3);
        }
      }
      while ((void *)v3 != v2);
      unint64_t v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

unsigned int *sub_BEDC48(unsigned int *a1, uint64_t a2)
{
  unsigned int v3 = 0;
  *(void *)a1 = a2;
  a1[2] = 0;
  *((void *)a1 + 2) = 0xFFFFFFFFLL;
  a1[6] = 0x7FFFFFFF;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 4) = 0;
  while (1)
  {
    unint64_t v4 = v3;
    unint64_t v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 5);
    if (v5 <= v4) {
      break;
    }
    uint64_t v6 = sub_BE601C((void *)(*(void *)a1 + 8), v4);
    BOOL v7 = *(_DWORD *)(v6 + 1616) == -1 || *(_DWORD *)(v6 + 1620) == 0;
    unint64_t v4 = a1[2];
    if (v7 && *(unsigned char *)(v6 + 168) == 2)
    {
      if (v4 == -1) {
        goto LABEL_16;
      }
      unint64_t v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(*(void *)a1 + 16) - *(void *)(*(void *)a1 + 8)) >> 5);
      break;
    }
    unsigned int v3 = v4 + 1;
    a1[2] = v4 + 1;
    if (v4 == -2) {
      goto LABEL_16;
    }
  }
  if (v5 <= v4) {
    a1[2] = -1;
  }
LABEL_16:
  sub_BEDA5C((uint64_t)a1);
  return a1;
}

void sub_BEDD48(_Unwind_Exception *a1)
{
  sub_BEDBD0(v1);
  _Unwind_Resume(a1);
}

void sub_BEDD5C(_Unwind_Exception *a1)
{
  sub_BEDBD0(v1);
  _Unwind_Resume(a1);
}

void *sub_BEDD70(uint64_t a1, uint64_t *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v11 = (((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) >> 33))
       + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v12 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v13 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
      if (v13 >= v14) {
        uint64_t v4 = v13 % v14;
      }
    }
    else
    {
      uint64_t v4 = v13 & (v14 - 1);
    }
    int v16 = *(void **)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      uint64_t result = (void *)*v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = result[1];
            if (v20 == v13)
            {
              BOOL v21 = *((_DWORD *)result + 5) == HIDWORD(v8) && *((_DWORD *)result + 4) == v8;
              if (v21 && result[3] == v9) {
                return result;
              }
            }
            else if ((v20 & (v14 - 1)) != v4)
            {
              goto LABEL_33;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v18 = result[1];
          if (v18 == v13)
          {
            BOOL v19 = *((_DWORD *)result + 5) == HIDWORD(v8) && *((_DWORD *)result + 4) == v8;
            if (v19 && result[3] == v9) {
              return result;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_33:
  uint64_t v36 = operator new(0x38uLL);
  *uint64_t v36 = 0;
  v36[1] = v13;
  *((_OWORD *)v36 + 1) = *a3;
  sub_BE7040(v36 + 4, a4);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v14 || (float)(v23 * (float)v14) < v22)
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_47;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v34 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        uint64_t v4 = v13 % v14;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        uint64_t v25 = v36;
        if (v24) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v13;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v13);
        uint64_t v25 = v36;
        if (v24) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v34 & v13;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v34 & v13));
      uint64_t v25 = v36;
      if (v24) {
        goto LABEL_36;
      }
    }
LABEL_60:
    void *v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v36;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v36)
    {
      unint64_t v35 = *(void *)(*v36 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v35 >= v14) {
          v35 %= v14;
        }
      }
      else
      {
        v35 &= v14 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v36;
    }
    goto LABEL_71;
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v25 = v36;
  if (!v24) {
    goto LABEL_60;
  }
LABEL_36:
  void *v25 = *v24;
  *unint64_t v24 = v36;
LABEL_71:
  uint64_t result = v36;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_BEE178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_BEE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_BEE1A0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[4];
      if (v3)
      {
        uint64_t v4 = v2[5];
        unint64_t v5 = (void *)v2[4];
        if (v4 != v3)
        {
          do
          {
            int v6 = *(_DWORD *)(v4 - 8);
            v4 -= 1432;
            if (v6 == 2)
            {
              uint64_t v4 = sub_9F6418(v4);
            }
            else if (!v6)
            {
              uint64_t v4 = sub_9F636C(v4);
            }
          }
          while (v4 != v3);
          unint64_t v5 = (void *)v2[4];
        }
        v2[5] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_BEE23C()
{
  unk_25DFE67 = 16641;
  word_25DFE50 = 65;
  byte_25DFE7F = 1;
  byte_25DFE69 = 0;
}

double sub_BEE264(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  return result;
}

void sub_BEE280(uint64_t *a1, uint64_t *a2)
{
  sub_497CC0(&v7, *a1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v4 != v5)
  {
    uint64_t v6 = (uint64_t)(a1 + 1);
    do
    {
      sub_BFBD9C((uint64_t)&v7, v6, v4);
      v4 += 176;
    }
    while (v4 != v5);
  }
}

void sub_BEE2EC()
{
  unk_25DFE97 = 16641;
  word_25DFE80 = 65;
  byte_25DFEAF = 1;
  byte_25DFE99 = 0;
}

uint64_t sub_BEE314(uint64_t result, uint64_t a2)
{
  *(unsigned char *)double result = 0;
  *(void *)(result + 8) = a2;
  return result;
}

void *sub_BEE320(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 56)) {
    return sub_BEE504();
  }
  else {
    return sub_BEE330();
  }
}

void *sub_BEE330()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_725D0((uint64_t)v15);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_BEF160((uint64_t)v14, *(void **)(v3 + 8), *(unsigned char *)(v2 + 121));
  sub_BEE6D8(v3, v2, (uint64_t)v14, (uint64_t)v13);
  char v6 = sub_37D0C8(*(void **)(v3 + 8));
  if (*(unsigned char *)(v2 + 123)) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  sub_F8AFDC((uint64_t)v13, v7);
  __int32 v8 = sub_BEE808(v2);
  sub_725A0((uint64_t)v15);
  sub_BEEB60(v3, (double **)v2, v13, v8);
  *(double *)(v5 + 24) = sub_72688((uint64_t)v15);
  *(double *)(v5 + 40) = (double)sub_F8A764((uint64_t)v13);
  *(double *)(v5 + 48) = (double)sub_F76A1C((uint64_t)v13);
  *(double *)(v5 + 56) = (double)(unint64_t)sub_F8A798((uint64_t)v13);
  *(double *)(v5 + 64) = (double)(unint64_t)sub_F8A7A0((uint64_t)v13);
  sub_725A0((uint64_t)v15);
  sub_BEF02C(v3, v2, (uint64_t)v13, v8, &v11);
  uint64_t v9 = v12;
  *(_OWORD *)uint64_t v5 = v11;
  *(void *)(v5 + 16) = v9;
  *(double *)(v5 + 32) = sub_72688((uint64_t)v15);
  sub_BF0DE8(v13);
  return sub_BF1258(v14);
}

void sub_BEE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_BF0DE8(va);
  sub_BF1258(&STACK[0xF80]);
  sub_BE5DE8(v4);
  _Unwind_Resume(a1);
}

void *sub_BEE504()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_725D0((uint64_t)v15);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_BEF160((uint64_t)v14, *(void **)(v3 + 8), *(unsigned char *)(v2 + 121));
  sub_BF12E4(v3, v2, (uint64_t)v14, (uint64_t)v13);
  char v6 = sub_37D0C8(*(void **)(v3 + 8));
  if (*(unsigned char *)(v2 + 123)) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  sub_F8AFDC((uint64_t)v13, v7);
  __int32 v8 = sub_BEE808(v2);
  sub_725A0((uint64_t)v15);
  sub_BF1414(v3, (double **)v2, v13, v8);
  *(double *)(v5 + 24) = sub_72688((uint64_t)v15);
  *(double *)(v5 + 40) = (double)sub_F8A764((uint64_t)v13);
  *(double *)(v5 + 48) = (double)sub_F76A1C((uint64_t)v13);
  *(double *)(v5 + 56) = (double)(unint64_t)sub_F8A798((uint64_t)v13);
  *(double *)(v5 + 64) = (double)(unint64_t)sub_F8A7A0((uint64_t)v13);
  sub_725A0((uint64_t)v15);
  sub_BF18E0(v3, v2, (uint64_t)v13, v8, &v11);
  uint64_t v9 = v12;
  *(_OWORD *)uint64_t v5 = v11;
  *(void *)(v5 + 16) = v9;
  *(double *)(v5 + 32) = sub_72688((uint64_t)v15);
  sub_BF0DE8(v13);
  return sub_BF1258(v14);
}

void sub_BEE67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_BF0DE8(va);
  sub_BF1258(&STACK[0xF80]);
  sub_BE5DE8(v4);
  _Unwind_Resume(a1);
}

void sub_BEE6D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  if (v6 < 2)
  {
    uint64_t v7 = a4;
LABEL_4:
    sub_F86C00(v7);
    return;
  }
  if (v6 != 2)
  {
    uint64_t v7 = a4;
    goto LABEL_4;
  }
  __int32 v8 = sub_374FE8(*(uint64_t **)(a1 + 8));
  uint64_t v9 = v8[1];
  uint64_t v11 = *v8;
  uint64_t v12 = (std::__shared_weak_count *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_F86C04(a4, a3, &v11);
  unint64_t v10 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_BEE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_BEE808(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 60) == 0x7FFFFFFF) {
    return 0x7FFFFFFFLL;
  }
  long long v47 = 0;
  long long v48 = 0;
  long long v49 = 0;
  uint64_t v4 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 != *(void *)a1)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v5 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    long long v47 = operator new(v5);
    long long v49 = (char *)v47 + 16 * (v5 >> 4);
    size_t v6 = 80 * ((v5 - 80) / 0x50uLL) + 80;
    memcpy(v47, v4, v6);
    long long v48 = (char *)v47 + v6;
  }
  uint64_t v50 = *(void *)(a1 + 24);
  sub_BEF5AC(&__p, (uint64_t)&v47, 1uLL);
  __int32 v8 = __p;
  uint64_t v7 = v46;
  if (__p != v46)
  {
    int v9 = 0;
    unint64_t v10 = (uint64_t *)__p;
    while (1)
    {
      uint64_t v12 = *v10;
      uint64_t v13 = v10[1];
      if (*v10 == v13)
      {
        int v11 = 0;
      }
      else
      {
        unint64_t v14 = v13 - v12 - 80;
        if (v14 >= 0x50)
        {
          int v11 = 0;
          int v16 = 0;
          unint64_t v17 = v14 / 0x50 + 1;
          uint64_t v15 = v12 + 80 * (v17 & 0x7FFFFFFFFFFFFFELL);
          unint64_t v18 = (int *)(v12 + 140);
          uint64_t v19 = v17 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            int v20 = *(v18 - 20);
            int v22 = *v18;
            v18 += 40;
            int v21 = v22;
            if (v11 <= v20) {
              int v11 = v20;
            }
            if (v16 <= v21) {
              int v16 = v21;
            }
            v19 -= 2;
          }
          while (v19);
          if (v11 <= v16) {
            int v11 = v16;
          }
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFELL)) {
            goto LABEL_9;
          }
        }
        else
        {
          int v11 = 0;
          uint64_t v15 = *v10;
        }
        do
        {
          if (v11 <= *(_DWORD *)(v15 + 60)) {
            int v11 = *(_DWORD *)(v15 + 60);
          }
          v15 += 80;
        }
        while (v15 != v13);
      }
LABEL_9:
      if (v11 > v9) {
        int v9 = v11;
      }
      v10 += 4;
      if (v10 == v46) {
        goto LABEL_29;
      }
    }
  }
  int v9 = 0;
LABEL_29:
  int v23 = *(_DWORD *)(a1 + 60);
  unint64_t v24 = *(uint64_t **)(a1 + 32);
  uint64_t v25 = *(uint64_t **)(a1 + 40);
  if (v24 != v25)
  {
    int v26 = 0;
    while (1)
    {
      uint64_t v28 = *v24;
      uint64_t v29 = v24[1];
      if (*v24 == v29)
      {
        int v27 = 0;
      }
      else
      {
        unint64_t v30 = v29 - v28 - 80;
        if (v30 >= 0x50)
        {
          int v27 = 0;
          int v32 = 0;
          unint64_t v33 = v30 / 0x50 + 1;
          uint64_t v31 = v28 + 80 * (v33 & 0x7FFFFFFFFFFFFFELL);
          unint64_t v34 = (int *)(v28 + 140);
          uint64_t v35 = v33 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            int v36 = *(v34 - 20);
            int v38 = *v34;
            v34 += 40;
            int v37 = v38;
            if (v27 <= v36) {
              int v27 = v36;
            }
            if (v32 <= v37) {
              int v32 = v37;
            }
            v35 -= 2;
          }
          while (v35);
          if (v27 <= v32) {
            int v27 = v32;
          }
          if (v33 == (v33 & 0x7FFFFFFFFFFFFFELL)) {
            goto LABEL_32;
          }
        }
        else
        {
          int v27 = 0;
          uint64_t v31 = *v24;
        }
        do
        {
          if (v27 <= *(_DWORD *)(v31 + 60)) {
            int v27 = *(_DWORD *)(v31 + 60);
          }
          v31 += 80;
        }
        while (v31 != v29);
      }
LABEL_32:
      if (v27 > v26) {
        int v26 = v27;
      }
      v24 += 4;
      if (v24 == v25) {
        goto LABEL_52;
      }
    }
  }
  int v26 = 0;
LABEL_52:
  int v39 = v23 + v9;
  if (__p)
  {
    uint64_t v40 = __p;
    if (__p != v46)
    {
      int v41 = v46;
      do
      {
        unint64_t v43 = (void *)*(v41 - 4);
        v41 -= 4;
        int v42 = v43;
        if (v43)
        {
          *(v7 - 3) = v42;
          operator delete(v42);
        }
        uint64_t v7 = v41;
      }
      while (v41 != v8);
      uint64_t v40 = __p;
    }
    int v46 = v8;
    operator delete(v40);
  }
  uint64_t v1 = (v39 + v26);
  if (v47)
  {
    long long v48 = (char *)v47;
    operator delete(v47);
  }
  return v1;
}

void sub_BEEB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_BEEB60(uint64_t a1, double **a2, int32x2_t *a3, __int32 a4)
{
  unsigned int v8 = *((_DWORD *)a2 + 16);
  if (v8 >= 2)
  {
    if (v8 == 2)
    {
      if (a2[4] != a2[5])
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(v34, "Bucket search algorithm called with destination query terminals in the request");
        uint64_t v31 = (void *)sub_2F404((uint64_t)exception, v34);
      }
      sub_F891F8(a3, (int32x2_t *)a2, 0x7FFFFFFF, *(unsigned char *)a1, -1, a4, 0xFFFFFFFF, 0xFFFFFFFF, -1, 1);
    }
  }
  else
  {
    uint64_t v9 = sub_374E2C(*(uint64_t **)(a1 + 8), (uint64_t)(a2 + 9));
    if (*((_DWORD *)a2 + 16)) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = 0;
    }
    sub_F88F70(a3, (int32x2_t *)a2, (unsigned int ***)a2 + 4, v9, 0x7FFFFFFF, *(unsigned char *)a1, -1, a4, v10, SHIDWORD(v10), 0xFFFFFFFF);
  }
  if ((unint64_t)((char *)a2[5] - (char *)a2[4]) >= 0x21)
  {
    int v11 = (void *)sub_F7571C((uint64_t)a3);
    if (*v11 == v11[1])
    {
      uint64_t v13 = *a2;
      uint64_t v12 = (unsigned int *)a2[1];
      int v38 = 0;
      uint64_t v39 = 0;
      int v37 = 0;
      *(void *)&v34[0] = &v37;
      if (v13 == (double *)v12)
      {
        uint64_t v15 = 0;
        unint64_t v14 = 0;
      }
      else
      {
        do
        {
          if (v13[5] > 0.95)
          {
            __p[0] = (void *)(*(unsigned int *)v13 | ((unint64_t)(*((_DWORD *)v13 + 1) & 0xFFFFFFF) << 32));
            sub_2A98DC((void ***)v34, __p);
          }
          v13 += 10;
        }
        while (v13 != (double *)v12);
        unint64_t v14 = v37;
        uint64_t v15 = v38;
      }
      unint64_t v16 = 126 - 2 * __clz(((char *)v15 - (char *)v14) >> 3);
      if (v15 == v14) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      sub_BEFA4C(v14, v15, (uint64_t)v34, v17, 1);
      unint64_t v18 = (char *)v38;
      if (v37 != v38)
      {
        uint64_t v19 = &v37[-1].i8[8];
        while (v19 + 16 != (__int8 *)v38)
        {
          int v20 = *((_DWORD *)v19 + 2);
          v19 += 8;
          LODWORD(v21) = *((_DWORD *)v19 + 2);
          if (v20 == v21 && *((_DWORD *)v19 + 1) == *((_DWORD *)v19 + 3))
          {
            int v23 = v19 + 16;
            if (v19 + 16 != (__int8 *)v38)
            {
              do
              {
                if (v21 != *(_DWORD *)v23 || *((_DWORD *)v19 + 1) != *((_DWORD *)v23 + 1))
                {
                  uint64_t v21 = *(void *)v23;
                  *((void *)v19 + 1) = *(void *)v23;
                  v19 += 8;
                }
                v23 += 8;
              }
              while (v23 != v18);
              unint64_t v18 = (char *)v38;
            }
            if (v19 + 8 != v18) {
              int v38 = (int8x16_t *)(v19 + 8);
            }
            break;
          }
        }
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v34);
        uint64_t v25 = sub_188FC78(v34, (uint64_t)"On-street walking one-to-many query (", 37);
        int v26 = sub_670B8(v25, 0);
        int v27 = sub_188FC78(v26, (uint64_t)") did not reach any of the destination query terminals; Origin road segment ids: ",
                81);
        sub_BEF830(v37, v38, ", ");
        if ((v33 & 0x80u) == 0) {
          uint64_t v28 = __p;
        }
        else {
          uint64_t v28 = (void **)__p[0];
        }
        if ((v33 & 0x80u) == 0) {
          uint64_t v29 = v33;
        }
        else {
          uint64_t v29 = (uint64_t)__p[1];
        }
        sub_188FC78(v27, (uint64_t)v28, v29);
        if ((char)v33 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if ((char)v33 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (v37)
      {
        int v38 = v37;
        operator delete(v37);
      }
    }
  }
}

void sub_BEEFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a18);
  uint64_t v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(void *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void sub_BEF02C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v24 = a4;
  BOOL v23 = *(_DWORD *)(a2 + 64) == 2;
  sub_F00E44(v14, *(uint64_t **)(a1 + 8), a2 + 96, a2 + 72);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = sub_F7571C(a3);
  uint64_t v9 = *(unint64_t **)v8;
  uint64_t v10 = *(unint64_t **)(v8 + 8);
  v25[0] = &v24;
  v25[1] = a3;
  v25[2] = v14;
  v25[3] = a2;
  v25[4] = a5;
  for (v25[5] = &v23; v9 != v10; ++v9)
    sub_BF06E0((uint64_t)v25, *v9);
  if (__p)
  {
    int v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    unint64_t v18 = v17;
    operator delete(v17);
  }
  int v11 = v16;
  if (v16)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      int v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_BEF140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE5DE8(v2);
  sub_BF0664((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BEF160(uint64_t a1, void *a2, char a3)
{
  *(void *)a1 = sub_3750CC(a2);
  sub_382300(a1 + 8, a2, a3);
  sub_F5C7F8((void *)(a1 + 112), a2);
  size_t v6 = (_DWORD *)sub_374D14(a2);
  sub_29AEC4(v6);
  sub_F6DA28((uint64_t *)(a1 + 152), a2);
  uint64_t v7 = sub_375E94(a2);
  uint64_t v8 = sub_3761A0(a2);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v8;
  sub_FA70E8((void **)(a1 + 200), a2);
  sub_FBF94C((void **)(a1 + 296), a2, (void *)(a1 + 200));
  uint64_t v9 = sub_3761A0(a2);
  *(unsigned char *)(a1 + 1392) = sub_383A0C(v9, 1u, 1) != 0;
  *(unsigned char *)(a1 + 1393) = sub_37D0C8(a2);
  *(unsigned char *)(a1 + 1394) = 0;
  *(unsigned char *)(a1 + 1426) = 0;
  *(_DWORD *)(a1 + 1428) = 0;
  *(void *)(a1 + 1416) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1400) = 16;
  *(void *)(a1 + 1408) = 6;
  *(unsigned char *)(a1 + 1424) = 0;
  *(_WORD *)(a1 + 1505) = 0;
  *(_DWORD *)(a1 + 1508) = 0;
  *(void *)(a1 + 1496) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(void *)(a1 + 1512) = 0xA000FFFF00000000;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_WORD *)(a1 + 1556) = -1;
  *(unsigned char *)(a1 + 1558) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(void *)(a1 + 1560) = 0xA000FFFF00000000;
  *(_DWORD *)(a1 + 1600) = 0;
  *(_WORD *)(a1 + 1604) = -1;
  *(unsigned char *)(a1 + 1606) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  *(void *)(a1 + 1616) = 0;
  *(void *)(a1 + 1624) = 0;
  *(void *)(a1 + 1632) = 32;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(void *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_DWORD *)(a1 + 1644) = -1610547201;
  *(_WORD *)(a1 + 1684) = -1;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 1692) = -1610547201;
  *(_WORD *)(a1 + 1732) = -1;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1472) = xmmword_20F00E0;
  *(void *)(a1 + 1488) = 6;
  *(unsigned char *)(a1 + 1504) = 0;
  *(unsigned char *)(a1 + 1425) = 1;
  *(_OWORD *)(a1 + 1456) = xmmword_20F00F0;
  uint64_t v10 = (char *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(void *)(a1 + 1472) = v10;
  uint64_t v11 = *(void *)(a1 + 1456);
  if (v11)
  {
    uint64_t v12 = (const double *)(a1 + 1464);
    unint64_t v13 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v13 >= 0xF)
    {
      if ((unint64_t)v10 >= a1 + 1472 || (unint64_t v14 = v10, v12 >= (const double *)&v10[8 * v11]))
      {
        unint64_t v15 = v13 + 1;
        unint64_t v14 = &v10[8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
        float64x2_t v16 = vld1q_dup_f64(v12);
        uint64_t v17 = (float64x2_t *)(v10 + 16);
        uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17[-1] = v16;
          *uint64_t v17 = v16;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v14 = v10;
    }
    uint64_t v19 = &v10[8 * v11];
    do
    {
      *(double *)unint64_t v14 = *v12;
      v14 += 8;
    }
    while (v14 != v19);
  }
LABEL_11:
  *(unsigned char *)(a1 + 1505) = 1;
  *(void *)(a1 + 1640) = 0xA000FFFF00000000;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(void *)(a1 + 1680) = 0xFFFF00000000;
  *(void *)(a1 + 1688) = 0xA000FFFF00000000;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_WORD *)(a1 + 1732) = -1;
  size_t v20 = 104 * *(void *)(a1 + 1632);
  *(_WORD *)(a1 + 1742) = 0;
  *(void *)(a1 + 1734) = 0;
  uint64_t v21 = malloc_type_malloc(v20, 0x1060040F760E5CBuLL);
  *(void *)(a1 + 1744) = v21;
  uint64_t v22 = *(void *)(a1 + 1632);
  if (v22)
  {
    uint64_t v23 = 104 * v22;
    do
    {
      long long v24 = *(_OWORD *)(a1 + 1640);
      long long v25 = *(_OWORD *)(a1 + 1672);
      v21[1] = *(_OWORD *)(a1 + 1656);
      v21[2] = v25;
      _OWORD *v21 = v24;
      long long v26 = *(_OWORD *)(a1 + 1688);
      long long v27 = *(_OWORD *)(a1 + 1704);
      long long v28 = *(_OWORD *)(a1 + 1720);
      *((void *)v21 + 12) = *(void *)(a1 + 1736);
      v21[4] = v27;
      v21[5] = v28;
      v21[3] = v26;
      uint64_t v21 = (_OWORD *)((char *)v21 + 104);
      v23 -= 104;
    }
    while (v23);
  }
  return a1;
}

void sub_BEF4A0(_Unwind_Exception *a1)
{
  int64_t v5 = *(void **)(v1 + 1744);
  if (v5) {
    free(v5);
  }
  size_t v6 = *(void **)(v1 + 1472);
  if (v6) {
    free(v6);
  }
  sub_BEF4F4(v3);
  sub_3821F8(v2);
  _Unwind_Resume(a1);
}

void sub_BEF4E0(_Unwind_Exception *a1)
{
  sub_3821F8(v1);
  _Unwind_Resume(a1);
}

void *sub_BEF4F4(void *a1)
{
  uint64_t v2 = (void *)a1[133];
  if (v2)
  {
    a1[134] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[130];
  if (v3)
  {
    a1[131] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[126];
  if (v4)
  {
    a1[127] = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)a1[123];
  if (v5)
  {
    a1[124] = v5;
    operator delete(v5);
  }
  sub_328138((uint64_t)(a1 + 27));
  size_t v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[9];
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = (void *)a1[7];
  a1[7] = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
  }
  return a1;
}

void *sub_BEF5AC(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      sub_2E00();
    }
    uint64_t v6 = 4 * a3;
    uint64_t v7 = operator new(32 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_BEF668(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_BEF63C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE8FC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BEF668(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        uint64_t v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        size_t v8 = 80 * ((v11 - 80) / 0x50uLL) + 80;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_BEF788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_BEF79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BEF7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_BEF7C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        uint64_t v7 = *(void **)(v5 - 32);
        v5 -= 32;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t sub_BEF830(void *a1, void *a2, const char *a3)
{
  sub_6BAC((uint64_t)v11);
  if (a1 != a2)
  {
    uint64_t v6 = sub_51960(v11, *a1);
    sub_188FC78(v6, (uint64_t)".", 1);
    std::ostream::operator<<();
    if (a1 + 1 != a2)
    {
      uint64_t v7 = 1;
      do
      {
        if (v7 * 8)
        {
          size_t v8 = strlen(a3);
          sub_188FC78(v11, (uint64_t)a3, v8);
        }
        uint64_t v9 = sub_51960(v11, a1[v7]);
        sub_188FC78(v9, (uint64_t)".", 1);
        std::ostream::operator<<();
        ++v7;
      }
      while (&a1[v7] != a2);
    }
  }
  std::stringbuf::str();
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_BEFA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BEFA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BEFA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x16_t sub_BEFA4C(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    char v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *char v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          char v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              uint64_t v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                uint64_t v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    unsigned int v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      uint64_t v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  uint64_t v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  *uint64_t v95 = v100;
                }
                char v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  unint64_t v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  char v90 = (int8x16_t *)((char *)v90 - 8);
                  *unint64_t v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              char v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        float64x2_t v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        uint64_t v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)float64x2_t v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)float64x2_t v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)float64x2_t v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            char v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          uint64_t v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            char v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            uint64_t v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        uint64_t v78 = a2;
        if (v12 < a2)
        {
          uint64_t v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            char v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            uint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        uint64_t v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        *uint64_t v86 = v37;
      }
      uint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)float64x2_t v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)float64x2_t v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)float64x2_t v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)float64x2_t v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      long long v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      uint64_t v29 = v28 - 8;
      uint64_t v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)uint64_t v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)uint64_t v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)uint64_t v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)uint64_t v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      int v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      uint64_t v39 = (unsigned int *)(v38 + 8);
      int v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)uint64_t v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)uint64_t v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)uint64_t v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)uint64_t v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)float64x2_t v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)uint64_t v29 = v51;
            *(void *)float64x2_t v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)uint64_t v29 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)uint64_t v29 = *(void *)v16;
        *(void *)float64x2_t v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)float64x2_t v16 = *(void *)v39;
          *(void *)uint64_t v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)float64x2_t v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      uint64_t v57 = &v12->i8[v54 * 4];
      uint64_t v58 = a2;
      if (v54 == 2)
      {
        uint64_t v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          uint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          uint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        uint64_t v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      uint64_t v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *uint64_t v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      uint64_t v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)uint64_t v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_BF0374(v12, (int8x16_t *)v70);
      char v12 = (int8x16_t *)(v70 + 8);
      if (sub_BF0374((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_BEFA4C(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        char v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_BF0374(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

void *sub_BF0664(void *a1)
{
  uint64_t v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[16];
  if (v5)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = (void *)a1[14];
  a1[14] = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_BF06E0(uint64_t a1, unint64_t a2)
{
  unint64_t v35 = a2;
  if (**(_DWORD **)a1 == 0x7FFFFFFF
    || (uint64_t result = sub_F75724(*(void *)(a1 + 8), a2), **(_DWORD **)a1 >= SHIDWORD(result)))
  {
    sub_F898AC(*(void **)(a1 + 8), a2, (uint64_t)v39);
    if (sub_EB2EC4((uint64_t)v39)) {
      return sub_4451C0((uint64_t)v39);
    }
    int v5 = sub_109A228((uint64_t)v39);
    sub_F012D8(*(void *)(a1 + 16), (uint64_t)v39, 0x7FFFFFFF, 0, 0, v34);
    int v6 = HIDWORD(v34[0]);
    int v33 = HIDWORD(v34[0]);
    int v7 = *(_DWORD *)(*(void *)(a1 + 24) + 60);
    if (v7 != 0x7FFFFFFF && SHIDWORD(v34[0]) > v7)
    {
LABEL_24:
      sub_3B0290(v34);
      return sub_4451C0((uint64_t)v39);
    }
    unsigned int v9 = sub_F89400(*(void *)(a1 + 8), a2);
    unsigned int v32 = v9;
    unsigned int v10 = sub_F89534(*(void *)(a1 + 8), a2);
    unsigned int v30 = 0;
    unsigned int v31 = v10;
    uint64_t v11 = *(void *)(a1 + 32);
    if (**(unsigned char **)(a1 + 40)) {
      uint64_t v12 = sub_F89664(*(void **)(a1 + 8), a2);
    }
    else {
      uint64_t v12 = 0xFFFFFFFF00000000;
    }
    uint64_t v29 = v12;
    BOOL v13 = v5 != 0;
    BOOL v28 = v13;
    uint64_t v14 = *(void *)(a1 + 24);
    int v15 = *(unsigned __int8 *)(v14 + 120);
    if (*(unsigned char *)(v14 + 120))
    {
      int v16 = sub_BF0A68(a2);
      int __p_4 = 0;
      int v21 = 0x7FFFFFFF;
      uint64_t v22 = 0x7FFFFFFF7FFFFFFFLL;
      __p_8 = 0;
      long long v25 = 0uLL;
      unint64_t v26 = 0x8000000080000000;
      uint64_t v27 = 0x7FFFFFFFLL;
      sub_46FF10((uint64_t)v36, (uint64_t)v39, v34, v16, (uint64_t *)&v21);
      unsigned __int8 v38 = 1;
      sub_463750((uint64_t)v37, (uint64_t)v36);
      unint64_t v17 = *(void *)(v11 + 8);
      if (v17 < *(void *)(v11 + 16))
      {
LABEL_14:
        uint64_t v18 = v29;
        *(void *)unint64_t v17 = 0;
        *(void *)(v17 + 8) = v9;
        *(void *)(v17 + 16) = a2;
        *(void *)(v17 + 24) = v10;
        *(void *)(v17 + 32) = v18;
        *(_DWORD *)(v17 + 40) = v6;
        *(unsigned char *)(v17 + 44) = v13;
        int v19 = v38;
        *(unsigned char *)(v17 + 1104) = v38;
        if (v19) {
          sub_7A3ACC(v17 + 48, (uint64_t)v37);
        }
        uint64_t v20 = (char *)(v17 + 1112);
        goto LABEL_19;
      }
    }
    else
    {
      bzero(v37, 0x428uLL);
      unint64_t v17 = *(void *)(v11 + 8);
      if (v17 < *(void *)(v11 + 16)) {
        goto LABEL_14;
      }
    }
    uint64_t v20 = sub_BF0BBC((char **)v11, &v30, &v32, &v35, &v31, &v29, &v33, &v28, (uint64_t)v37);
LABEL_19:
    *(void *)(v11 + 8) = v20;
    if (v38)
    {
      sub_3AFFFC((uint64_t)v37);
      unsigned __int8 v38 = 0;
    }
    if (v15)
    {
      sub_3AFFFC((uint64_t)v36);
      if (__p_8)
      {
        *(void *)&long long v25 = __p_8;
        operator delete(__p_8);
      }
    }
    goto LABEL_24;
  }
  return result;
}

void sub_BF0994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (LOBYTE(STACK[0x9D0]))
  {
    sub_3AFFFC((uint64_t)&STACK[0x5B0]);
    LOBYTE(STACK[0x9D0]) = 0;
  }
  if (v59)
  {
    sub_3AFFFC((uint64_t)&a59);
    if (__p)
    {
      operator delete(__p);
      sub_3B0290(&a22);
      sub_4451C0((uint64_t)&STACK[0x9D8]);
      _Unwind_Resume(a1);
    }
  }
  sub_3B0290(&a22);
  sub_4451C0((uint64_t)&STACK[0x9D8]);
  _Unwind_Resume(a1);
}

void sub_BF0A20(_Unwind_Exception *a1)
{
}

void sub_BF0A34(_Unwind_Exception *a1)
{
}

void sub_BF0A48(_Unwind_Exception *a1)
{
}

unint64_t sub_BF0A68(unint64_t result)
{
  unint64_t v1 = result;
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_BF0B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_BF0BBC(char **a1, unsigned int *a2, unsigned int *a3, void *a4, unsigned int *a5, uint64_t *a6, int *a7, unsigned char *a8, uint64_t a9)
{
  long long v10 = *a1;
  std::string::size_type v11 = a1[1];
  uint64_t v12 = 0x3AEF6CA970586723 * ((v11 - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x3AEF6CA9705867) {
    sub_2E00();
  }
  int v16 = a2;
  if (0x75DED952E0B0CE46 * ((a1[2] - v10) >> 3) > v13) {
    unint64_t v13 = 0x75DED952E0B0CE46 * ((a1[2] - v10) >> 3);
  }
  if ((unint64_t)(0x3AEF6CA970586723 * ((a1[2] - v10) >> 3)) >= 0x1D77B654B82C33) {
    unint64_t v17 = 0x3AEF6CA9705867;
  }
  else {
    unint64_t v17 = v13;
  }
  if (v17)
  {
    unsigned __int8 v38 = a3;
    uint64_t v39 = a4;
    if (v17 > 0x3AEF6CA9705867) {
      sub_188D718();
    }
    uint64_t v18 = a5;
    int v19 = a8;
    uint64_t v20 = (char *)operator new(1112 * v17);
    a8 = v19;
    a5 = v18;
    a3 = v38;
    a4 = v39;
    int v16 = a2;
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *v16;
  uint64_t v22 = &v20[1112 * v12];
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  uint64_t v25 = *a5;
  uint64_t v26 = *a6;
  int v27 = *a7;
  char v28 = *a8;
  *(void *)uint64_t v22 = v21;
  *((void *)v22 + 1) = v23;
  *((void *)v22 + 2) = v24;
  *((void *)v22 + 3) = v25;
  *((void *)v22 + 4) = v26;
  *((_DWORD *)v22 + 10) = v27;
  v22[44] = v28;
  LODWORD(v21) = *(unsigned __int8 *)(a9 + 1056);
  v22[1104] = v21;
  if (v21)
  {
    sub_7A3ACC((uint64_t)&v20[1112 * v12 + 48], a9);
    long long v10 = *a1;
    std::string::size_type v11 = a1[1];
  }
  uint64_t v29 = &v20[1112 * v17];
  unsigned int v30 = v22 + 1112;
  if (v11 == v10)
  {
    *a1 = v22;
    a1[1] = v30;
    a1[2] = v29;
    if (!v10) {
      return v22 + 1112;
    }
    goto LABEL_24;
  }
  uint64_t v31 = 0;
  do
  {
    unsigned int v32 = &v22[v31 - 1112];
    long long v33 = *(_OWORD *)&v11[v31 - 1112];
    long long v34 = *(_OWORD *)&v11[v31 - 1096];
    *(_OWORD *)(v32 + 29) = *(_OWORD *)&v11[v31 - 1083];
    *(_OWORD *)unsigned int v32 = v33;
    *((_OWORD *)v32 + 1) = v34;
    LODWORD(v32) = v11[v31 - 8];
    v22[v31 - 8] = (char)v32;
    if (v32) {
      sub_463750((uint64_t)&v22[v31 - 1064], (uint64_t)&v11[v31 - 1064]);
    }
    v31 -= 1112;
  }
  while (&v11[v31] != v10);
  unint64_t v35 = *a1;
  long long v10 = a1[1];
  *a1 = &v22[v31];
  a1[1] = v30;
  a1[2] = v29;
  if (v10 != v35)
  {
    do
    {
      if (*(v10 - 8))
      {
        sub_3AFFFC((uint64_t)(v10 - 1064));
        *(v10 - 8) = 0;
      }
      v10 -= 1112;
    }
    while (v10 != v35);
    long long v10 = v35;
  }
  if (v10) {
LABEL_24:
  }
    operator delete(v10);
  return v22 + 1112;
}

void *sub_BF0DE8(void *a1)
{
  sub_BF0F98(a1 + 379);
  uint64_t v2 = (void *)a1[375];
  if (v2)
  {
    a1[376] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[372];
  if (v3)
  {
    a1[373] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[367];
  if (v4)
  {
    uint64_t v5 = a1[368];
    long long v6 = (void *)a1[367];
    if (v5 != v4)
    {
      uint64_t v7 = a1[368];
      do
      {
        std::string v9 = *(void **)(v7 - 24);
        v7 -= 24;
        std::string v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      long long v6 = (void *)a1[367];
    }
    a1[368] = v4;
    operator delete(v6);
  }
  long long v10 = (void *)a1[366];
  if (v10) {
    free(v10);
  }
  sub_328138((uint64_t)(a1 + 260));
  std::string::size_type v11 = (void *)a1[256];
  if (v11)
  {
    a1[257] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[253];
  if (v12)
  {
    a1[254] = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)a1[249];
  if (v13)
  {
    a1[250] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[246];
  if (v14)
  {
    a1[247] = v14;
    operator delete(v14);
  }
  sub_328138((uint64_t)(a1 + 150));
  int v15 = (void *)a1[146];
  if (v15)
  {
    a1[147] = v15;
    operator delete(v15);
  }
  uint64_t v16 = a1[143];
  if (v16)
  {
    uint64_t v17 = a1[144];
    uint64_t v18 = (void *)a1[143];
    if (v17 != v16)
    {
      uint64_t v19 = a1[144];
      do
      {
        uint64_t v21 = *(void **)(v19 - 24);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *(void *)(v17 - 16) = v20;
          operator delete(v20);
        }
        uint64_t v17 = v19;
      }
      while (v19 != v16);
      uint64_t v18 = (void *)a1[143];
    }
    a1[144] = v16;
    operator delete(v18);
  }
  uint64_t v22 = (void *)a1[142];
  if (v22) {
    free(v22);
  }
  uint64_t v23 = (void *)a1[126];
  if (v23)
  {
    a1[127] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[123];
  if (v24)
  {
    a1[124] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)a1[119];
  if (v25)
  {
    a1[120] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)a1[116];
  if (v26)
  {
    a1[117] = v26;
    operator delete(v26);
  }
  sub_BF10E8(a1 + 3);
  return a1;
}

void *sub_BF0F98(void *a1)
{
  uint64_t v2 = (void *)a1[109];
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = a1[106];
  if (v3)
  {
    uint64_t v4 = a1[107];
    uint64_t v5 = (void *)a1[106];
    if (v4 != v3)
    {
      do
      {
        if (!*(_DWORD *)(v4 - 8))
        {
          long long v6 = *(std::__shared_weak_count **)(v4 - 32);
          if (v6)
          {
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        v4 -= 40;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[106];
    }
    a1[107] = v3;
    operator delete(v5);
  }
  uint64_t v7 = (void *)a1[103];
  if (v7)
  {
    a1[104] = v7;
    operator delete(v7);
  }
  sub_328138((uint64_t)(a1 + 7));
  std::string v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  std::string v9 = (std::__shared_weak_count *)a1[1];
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void *sub_BF10E8(void *a1)
{
  uint64_t v2 = a1[110];
  if (v2)
  {
    uint64_t v3 = a1[111];
    uint64_t v4 = (void *)a1[110];
    if (v3 != v2)
    {
      uint64_t v5 = a1[111];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        long long v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[110];
    }
    a1[111] = v2;
    operator delete(v4);
  }
  std::string v8 = (void *)a1[109];
  if (v8) {
    free(v8);
  }
  std::string v9 = a1 + 99;
  do
  {
    long long v10 = v9 - 6;
    uint64_t v11 = *(v9 - 3);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = v9 - 5;
      do
      {
        if ((*(char *)(*v10 + v13) & 0x80000000) == 0)
        {
          uint64_t v15 = *v14 + v12;
          uint64_t v16 = *(void **)(v15 + 8);
          if (v16)
          {
            *(void *)(v15 + 16) = v16;
            operator delete(v16);
            uint64_t v11 = *(v9 - 3);
          }
        }
        ++v13;
        v12 += 32;
      }
      while (v13 != v11);
      operator delete((void *)*(v9 - 6));
      *(v9 - 6) = &unk_20E1710;
      *(v9 - 1) = 0;
      *(v9 - 4) = 0;
      *(v9 - 3) = 0;
      *uint64_t v14 = 0;
    }
    v9 -= 6;
  }
  while (v10 != a1 + 3);
  uint64_t v17 = (char *)*a1;
  if (*a1)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v19 = (char *)*a1;
    if (v18 != v17)
    {
      uint64_t v20 = (char *)a1[1];
      do
      {
        uint64_t v22 = (void *)*((void *)v20 - 4);
        v20 -= 32;
        uint64_t v21 = v22;
        if (v22)
        {
          *((void *)v18 - 3) = v21;
          operator delete(v21);
        }
        uint64_t v18 = v20;
      }
      while (v20 != v17);
      uint64_t v19 = (char *)*a1;
    }
    a1[1] = v17;
    operator delete(v19);
  }
  return a1;
}

void *sub_BF1258(void *a1)
{
  uint64_t v2 = (void *)a1[218];
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[184];
  if (v3) {
    free(v3);
  }
  sub_BEF4F4(a1 + 37);
  uint64_t v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    do
    {
      long long v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)a1[5];
  a1[5] = 0;
  if (v7) {
    operator delete(v7);
  }
  std::string v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_BF12E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  if (v6 < 2)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 122);
    uint64_t v8 = a4;
    uint64_t v9 = a3;
LABEL_4:
    sub_F8CE40(v8, v9, v7);
    return;
  }
  if (v6 != 2)
  {
    uint64_t v8 = a4;
    uint64_t v9 = a3;
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  long long v10 = sub_374FE8(*(uint64_t **)(a1 + 8));
  uint64_t v11 = v10[1];
  uint64_t v13 = *v10;
  uint64_t v14 = (std::__shared_weak_count *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_F8CE44(a4, a3, &v13);
  uint64_t v12 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_BF1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_BF1414(uint64_t a1, double **a2, int32x2_t *a3, __int32 a4)
{
  unsigned int v8 = *((_DWORD *)a2 + 16);
  if (v8 >= 2)
  {
    if (v8 == 2)
    {
      if (a2[4] != a2[5])
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(v34, "Bucket search algorithm called with destination query terminals in the request");
        uint64_t v31 = (void *)sub_2F404((uint64_t)exception, v34);
      }
      sub_F8EDDC(a3, (int32x2_t *)a2, 0x7FFFFFFF, *(unsigned char *)a1, -1, a4, 0xFFFFFFFF, 0xFFFFFFFF, -1, 1);
    }
  }
  else
  {
    uint64_t v9 = sub_374E2C(*(uint64_t **)(a1 + 8), (uint64_t)(a2 + 9));
    if (*((_DWORD *)a2 + 16)) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = 0;
    }
    sub_F8EB54(a3, (int32x2_t *)a2, (unsigned int ***)a2 + 4, v9, 0x7FFFFFFF, *(unsigned char *)a1, -1, a4, v10, SHIDWORD(v10), 0xFFFFFFFF);
  }
  if ((unint64_t)((char *)a2[5] - (char *)a2[4]) >= 0x21)
  {
    uint64_t v11 = (void *)sub_F7571C((uint64_t)a3);
    if (*v11 == v11[1])
    {
      uint64_t v13 = *a2;
      uint64_t v12 = (unsigned int *)a2[1];
      unsigned __int8 v38 = 0;
      uint64_t v39 = 0;
      uint64_t v37 = 0;
      *(void *)&v34[0] = &v37;
      if (v13 == (double *)v12)
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        do
        {
          if (v13[5] > 0.95)
          {
            __p[0] = (void *)(*(unsigned int *)v13 | ((unint64_t)(*((_DWORD *)v13 + 1) & 0xFFFFFFF) << 32));
            sub_2A98DC((void ***)v34, __p);
          }
          v13 += 10;
        }
        while (v13 != (double *)v12);
        uint64_t v14 = v37;
        uint64_t v15 = v38;
      }
      unint64_t v16 = 126 - 2 * __clz(((char *)v15 - (char *)v14) >> 3);
      if (v15 == v14) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      sub_BEFA4C(v14, v15, (uint64_t)v34, v17, 1);
      uint64_t v18 = (char *)v38;
      if (v37 != v38)
      {
        uint64_t v19 = &v37[-1].i8[8];
        while (v19 + 16 != (__int8 *)v38)
        {
          int v20 = *((_DWORD *)v19 + 2);
          v19 += 8;
          LODWORD(v21) = *((_DWORD *)v19 + 2);
          if (v20 == v21 && *((_DWORD *)v19 + 1) == *((_DWORD *)v19 + 3))
          {
            uint64_t v23 = v19 + 16;
            if (v19 + 16 != (__int8 *)v38)
            {
              do
              {
                if (v21 != *(_DWORD *)v23 || *((_DWORD *)v19 + 1) != *((_DWORD *)v23 + 1))
                {
                  uint64_t v21 = *(void *)v23;
                  *((void *)v19 + 1) = *(void *)v23;
                  v19 += 8;
                }
                v23 += 8;
              }
              while (v23 != v18);
              uint64_t v18 = (char *)v38;
            }
            if (v19 + 8 != v18) {
              unsigned __int8 v38 = (int8x16_t *)(v19 + 8);
            }
            break;
          }
        }
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v34);
        uint64_t v25 = sub_188FC78(v34, (uint64_t)"On-street walking one-to-many query (", 37);
        uint64_t v26 = sub_670B8(v25, 1);
        int v27 = sub_188FC78(v26, (uint64_t)") did not reach any of the destination query terminals; Origin road segment ids: ",
                81);
        sub_BEF830(v37, v38, ", ");
        if ((v33 & 0x80u) == 0) {
          char v28 = __p;
        }
        else {
          char v28 = (void **)__p[0];
        }
        if ((v33 & 0x80u) == 0) {
          uint64_t v29 = v33;
        }
        else {
          uint64_t v29 = (uint64_t)__p[1];
        }
        sub_188FC78(v27, (uint64_t)v28, v29);
        if ((char)v33 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if ((char)v33 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      if (v37)
      {
        unsigned __int8 v38 = v37;
        operator delete(v37);
      }
    }
  }
}

void sub_BF185C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a18);
  uint64_t v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(void *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void sub_BF18E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v24 = a4;
  BOOL v23 = *(_DWORD *)(a2 + 64) == 2;
  sub_F00E44(v14, *(uint64_t **)(a1 + 8), a2 + 96, a2 + 72);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = sub_F7571C(a3);
  uint64_t v9 = *(unint64_t **)v8;
  uint64_t v10 = *(unint64_t **)(v8 + 8);
  v25[0] = &v24;
  v25[1] = a3;
  v25[2] = v14;
  v25[3] = a2;
  v25[4] = a5;
  for (v25[5] = &v23; v9 != v10; ++v9)
    sub_BF1A14((uint64_t)v25, *v9);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    int v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v11 = v16;
  if (v16)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_BF19F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE5DE8(v2);
  sub_BF0664((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BF1A14(uint64_t a1, unint64_t a2)
{
  unint64_t v35 = a2;
  if (**(_DWORD **)a1 == 0x7FFFFFFF
    || (uint64_t result = sub_F75724(*(void *)(a1 + 8), a2), **(_DWORD **)a1 >= SHIDWORD(result)))
  {
    sub_F8F2CC(*(void **)(a1 + 8), a2, (uint64_t)v39);
    if (sub_EB2EC4((uint64_t)v39)) {
      return sub_4451C0((uint64_t)v39);
    }
    int v5 = sub_109A228((uint64_t)v39);
    sub_F012D8(*(void *)(a1 + 16), (uint64_t)v39, 0x7FFFFFFF, 0, 0, v34);
    int v6 = HIDWORD(v34[0]);
    int v33 = HIDWORD(v34[0]);
    int v7 = *(_DWORD *)(*(void *)(a1 + 24) + 60);
    if (v7 != 0x7FFFFFFF && SHIDWORD(v34[0]) > v7)
    {
LABEL_24:
      sub_3B0290(v34);
      return sub_4451C0((uint64_t)v39);
    }
    unsigned int v9 = sub_F8EF3C(*(void *)(a1 + 8), a2);
    unsigned int v32 = v9;
    unsigned int v10 = sub_F8F070(*(void *)(a1 + 8), a2);
    unsigned int v30 = 0;
    unsigned int v31 = v10;
    uint64_t v11 = *(void *)(a1 + 32);
    if (**(unsigned char **)(a1 + 40)) {
      uint64_t v12 = sub_F8F1A0(*(void **)(a1 + 8), a2);
    }
    else {
      uint64_t v12 = 0xFFFFFFFF00000000;
    }
    uint64_t v29 = v12;
    BOOL v13 = v5 != 0;
    BOOL v28 = v13;
    uint64_t v14 = *(void *)(a1 + 24);
    int v15 = *(unsigned __int8 *)(v14 + 120);
    if (*(unsigned char *)(v14 + 120))
    {
      int v16 = sub_BF0A68(a2);
      int __p_4 = 0;
      int v21 = 0x7FFFFFFF;
      uint64_t v22 = 0x7FFFFFFF7FFFFFFFLL;
      __p_8 = 0;
      long long v25 = 0uLL;
      unint64_t v26 = 0x8000000080000000;
      uint64_t v27 = 0x7FFFFFFFLL;
      sub_46FF10((uint64_t)v36, (uint64_t)v39, v34, v16, (uint64_t *)&v21);
      unsigned __int8 v38 = 1;
      sub_463750((uint64_t)v37, (uint64_t)v36);
      unint64_t v17 = *(void *)(v11 + 8);
      if (v17 < *(void *)(v11 + 16))
      {
LABEL_14:
        uint64_t v18 = v29;
        *(void *)unint64_t v17 = 0;
        *(void *)(v17 + 8) = v9;
        *(void *)(v17 + 16) = a2;
        *(void *)(v17 + 24) = v10;
        *(void *)(v17 + 32) = v18;
        *(_DWORD *)(v17 + 40) = v6;
        *(unsigned char *)(v17 + 44) = v13;
        int v19 = v38;
        *(unsigned char *)(v17 + 1104) = v38;
        if (v19) {
          sub_7A3ACC(v17 + 48, (uint64_t)v37);
        }
        int v20 = (char *)(v17 + 1112);
        goto LABEL_19;
      }
    }
    else
    {
      bzero(v37, 0x428uLL);
      unint64_t v17 = *(void *)(v11 + 8);
      if (v17 < *(void *)(v11 + 16)) {
        goto LABEL_14;
      }
    }
    int v20 = sub_BF0BBC((char **)v11, &v30, &v32, &v35, &v31, &v29, &v33, &v28, (uint64_t)v37);
LABEL_19:
    *(void *)(v11 + 8) = v20;
    if (v38)
    {
      sub_3AFFFC((uint64_t)v37);
      unsigned __int8 v38 = 0;
    }
    if (v15)
    {
      sub_3AFFFC((uint64_t)v36);
      if (__p_8)
      {
        *(void *)&long long v25 = __p_8;
        operator delete(__p_8);
      }
    }
    goto LABEL_24;
  }
  return result;
}

void sub_BF1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (LOBYTE(STACK[0x9D0]))
  {
    sub_3AFFFC((uint64_t)&STACK[0x5B0]);
    LOBYTE(STACK[0x9D0]) = 0;
  }
  if (v59)
  {
    sub_3AFFFC((uint64_t)&a59);
    if (__p)
    {
      operator delete(__p);
      sub_3B0290(&a22);
      sub_4451C0((uint64_t)&STACK[0x9D8]);
      _Unwind_Resume(a1);
    }
  }
  sub_3B0290(&a22);
  sub_4451C0((uint64_t)&STACK[0x9D8]);
  _Unwind_Resume(a1);
}

void sub_BF1D54(_Unwind_Exception *a1)
{
}

void sub_BF1D68(_Unwind_Exception *a1)
{
}

void sub_BF1D7C(_Unwind_Exception *a1)
{
}

void sub_BF1D9C()
{
  unk_25DFEC7 = 16641;
  word_25DFEB0 = 65;
  byte_25DFEDF = 1;
  byte_25DFEC9 = 0;
}

uint64_t sub_BF1DC4(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long __p = operator new(0x30uLL);
  long long v17 = xmmword_20B93B0;
  strcpy((char *)__p, "max_user_location_os_walking_duration_minutes");
  *(_DWORD *)(a1 + 24) = 600 * sub_319F48(a2, (uint64_t)&__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  v15[0] = operator new(0x28uLL);
  *(_OWORD *)&v15[1] = xmmword_20B9960;
  strcpy((char *)v15[0], "max_origin_os_walking_durations_minutes");
  uint64_t v4 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v15);
  long long __p = 0;
  long long v17 = 0uLL;
  sub_54DE8(&__p, *v4, v4[1], (v4[1] - *v4) >> 4);
  if (SHIBYTE(v15[2]) < 0)
  {
    operator delete(v15[0]);
    int v5 = (double *)__p;
    int v6 = (double *)v17;
    memset(v15, 0, 24);
    uint64_t v7 = v17 - (void)__p;
    if ((void *)v17 == __p) {
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (double *)__p;
    int v6 = (double *)v17;
    memset(v15, 0, 24);
    uint64_t v7 = v17 - (void)__p;
    if ((void *)v17 == __p) {
      goto LABEL_11;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  uint64_t v8 = (char *)operator new((unint64_t)v7 >> 2);
  v15[0] = v8;
  v15[1] = v8;
  v15[2] = &v8[4 * (v7 >> 4)];
  do
  {
    if (*((_DWORD *)v5 + 2) != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    int v18 = 600 * (int)*v5;
    uint64_t v8 = sub_BF32DC((unint64_t *)v15, v8, &v18) + 4;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_11:
  unsigned int v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)v15;
  *(void **)(a1 + 16) = v15[2];
  unsigned int v10 = __p;
  if (__p)
  {
    uint64_t v11 = v17;
    uint64_t v12 = __p;
    if ((void *)v17 != __p)
    {
      do
        uint64_t v11 = sub_55198(v11 - 16);
      while ((void *)v11 != v10);
      uint64_t v12 = __p;
    }
    *(void *)&long long v17 = v10;
    operator delete(v12);
  }
  return a1;
}

void sub_BF2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  BOOL v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BF207C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(sub_BF1DC4(a1, a4) + 32) = a3;
  char v12 = 14;
  strcpy(__p, "origin_walking");
  uint64_t v8 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BEC5F8(a1 + 40, a2, a3, v8);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  char v12 = 21;
  strcpy(__p, "user_location_walking");
  unsigned int v9 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BEC5F8(a1 + 696, a2, a3, v9);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(void *)(a1 + 1408) = 0;
  *(_DWORD *)(a1 + 1416) = 1065353216;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_DWORD *)(a1 + 1456) = 1065353216;
  *(unsigned char *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1656) = 1065353216;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_DWORD *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  return a1;
}

void sub_BF2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_BECD48(v15);
  long long v17 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(a1);
  }
  *(void *)(v14 + 8) = v17;
  operator delete(v17);
  _Unwind_Resume(a1);
}

double sub_BF227C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 376) == 1)
  {
    sub_725D0((uint64_t)v50);
    uint64_t v3 = *(int **)a1;
    long long v34 = *(int **)(a1 + 8);
    if (*(int **)a1 != v34)
    {
      uint64_t v4 = (uint64_t *)(a1 + 1360);
      char v36 = (void **)(a1 + 1400);
      int v5 = (void **)(a1 + 1440);
      do
      {
        int v6 = *v3;
        ++*(void *)(a1 + 1936);
        long long v51 = 0u;
        long long v52 = 0u;
        sub_BEC5FC(a1 + 40, 0, a2, v6, (uint64_t)&v51, (uint64_t)v37);
        *(unsigned char *)(a1 + 1352) = v37[0];
        if (*v4)
        {
          sub_9F64C8(a1 + 1360, *v4);
          operator delete((void *)*v4);
          *uint64_t v4 = 0;
          *(void *)(a1 + 1368) = 0;
          *(void *)(a1 + 1376) = 0;
        }
        *(_OWORD *)(a1 + 1360) = *(_OWORD *)v38;
        *(void *)(a1 + 1376) = v39;
        v38[1] = 0;
        uint64_t v39 = 0;
        v38[0] = 0;
        if (*(void *)(a1 + 1408))
        {
          uint64_t v7 = *v36;
          if (*v36)
          {
            do
            {
              uint64_t v8 = (void *)*v7;
              operator delete(v7);
              uint64_t v7 = v8;
            }
            while (v8);
          }
          *(void *)(a1 + 1400) = 0;
          uint64_t v9 = *(void *)(a1 + 1392);
          if (v9)
          {
            for (uint64_t i = 0; i != v9; ++i)
              *(void *)(*(void *)(a1 + 1384) + 8 * i) = 0;
          }
          *(void *)(a1 + 1408) = 0;
        }
        uint64_t v11 = v40;
        unsigned int v40 = 0;
        char v12 = *(void **)(a1 + 1384);
        *(void *)(a1 + 1384) = v11;
        if (v12) {
          operator delete(v12);
        }
        unint64_t v13 = v41;
        uint64_t v14 = v42;
        *(void *)(a1 + 1392) = v41;
        unint64_t v41 = 0;
        uint64_t v15 = v43;
        *(void *)(a1 + 1408) = v43;
        *(_DWORD *)(a1 + 1416) = v44;
        *(void *)(a1 + 1400) = v14;
        if (v15)
        {
          unint64_t v16 = v14[1];
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v16 >= v13) {
              v16 %= v13;
            }
          }
          else
          {
            v16 &= v13 - 1;
          }
          *(void *)(*(void *)(a1 + 1384) + 8 * v16) = v36;
          unint64_t v42 = 0;
          uint64_t v43 = 0;
        }
        if (*(void *)(a1 + 1448))
        {
          long long v17 = *v5;
          if (*v5)
          {
            do
            {
              int v18 = (void *)*v17;
              operator delete(v17);
              long long v17 = v18;
            }
            while (v18);
          }
          *(void *)(a1 + 1440) = 0;
          uint64_t v19 = *(void *)(a1 + 1432);
          if (v19)
          {
            for (uint64_t j = 0; j != v19; ++j)
              *(void *)(*(void *)(a1 + 1424) + 8 * j) = 0;
          }
          *(void *)(a1 + 1448) = 0;
        }
        uint64_t v21 = __p;
        long long __p = 0;
        uint64_t v22 = *(void **)(a1 + 1424);
        *(void *)(a1 + 1424) = v21;
        if (v22) {
          operator delete(v22);
        }
        unint64_t v24 = v46;
        BOOL v23 = v47;
        *(void *)(a1 + 1432) = v46;
        unint64_t v46 = 0;
        uint64_t v25 = v48;
        *(void *)(a1 + 1448) = v48;
        *(_DWORD *)(a1 + 1456) = v49;
        *(void *)(a1 + 1440) = v23;
        if (v25)
        {
          unint64_t v26 = v23[1];
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v26 >= v24) {
              v26 %= v24;
            }
          }
          else
          {
            v26 &= v24 - 1;
          }
          *(void *)(*(void *)(a1 + 1424) + 8 * v26) = v5;
          unint64_t v47 = 0;
          uint64_t v48 = 0;
        }
        else if (v23)
        {
          do
          {
            uint64_t v27 = (void *)*v23;
            operator delete(v23);
            BOOL v23 = v27;
          }
          while (v27);
        }
        BOOL v28 = __p;
        long long __p = 0;
        if (v28) {
          operator delete(v28);
        }
        uint64_t v29 = v42;
        if (v42)
        {
          do
          {
            unsigned int v30 = (void *)*v29;
            operator delete(v29);
            uint64_t v29 = v30;
          }
          while (v30);
        }
        unsigned int v31 = v40;
        unsigned int v40 = 0;
        if (v31) {
          operator delete(v31);
        }
        if (v38[0])
        {
          sub_9F64C8((uint64_t)v38, (uint64_t)v38[0]);
          operator delete(v38[0]);
        }
        if (BYTE8(v52) && (void)v51)
        {
          *((void *)&v51 + 1) = v51;
          operator delete((void *)v51);
        }
        uint64_t v32 = sub_BEC8EC(a1 + 40);
        sub_C556D0(a1 + 1664, v32);
        if (sub_BF2644(a1 + 1352)) {
          break;
        }
        ++v3;
      }
      while (v3 != v34);
    }
    sub_BED0E8(*(void *)(a1 + 32), (unsigned __int8 *)(a1 + 1352));
    sub_BF9B74(a1 + 1584, (unsigned char *)(a1 + 1352));
    double result = sub_72688((uint64_t)v50) + *(double *)(a1 + 1672);
    *(double *)(a1 + 1672) = result;
  }
  return result;
}

void sub_BF2614(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 120))
  {
    uint64_t v3 = *(void **)(v1 - 144);
    if (v3)
    {
      *(void *)(v1 - 136) = v3;
      operator delete(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BF2644(uint64_t a1)
{
  sub_BEDC48((unsigned int *)v18, a1);
  uint64_t v11 = 0;
  int v12 = -1;
  uint64_t v13 = 0xFFFFFFFFLL;
  int v14 = 0x7FFFFFFF;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  long long __p = 0;
  uint64_t v1 = sub_BF2F0C(v18, (uint64_t)&v11);
  uint64_t v2 = __p;
  if (__p)
  {
    uint64_t v3 = (uint64_t)v16;
    uint64_t v4 = __p;
    if (v16 != __p)
    {
      do
      {
        int v5 = *(_DWORD *)(v3 - 8);
        v3 -= 1432;
        if (v5 == 2)
        {
          uint64_t v3 = sub_9F6418(v3);
        }
        else if (!v5)
        {
          uint64_t v3 = sub_9F636C(v3);
        }
      }
      while ((void *)v3 != v2);
      uint64_t v4 = __p;
    }
    unint64_t v16 = v2;
    operator delete(v4);
  }
  int v6 = v19;
  if (v19)
  {
    uint64_t v7 = (uint64_t)v20;
    uint64_t v8 = v19;
    if (v20 != v19)
    {
      do
      {
        int v9 = *(_DWORD *)(v7 - 8);
        v7 -= 1432;
        if (v9 == 2)
        {
          uint64_t v7 = sub_9F6418(v7);
        }
        else if (!v9)
        {
          uint64_t v7 = sub_9F636C(v7);
        }
      }
      while ((void *)v7 != v6);
      uint64_t v8 = v19;
    }
    int v20 = v6;
    operator delete(v8);
  }
  return v1;
}

void sub_BF2754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_BF2770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 376) != 1) {
    return;
  }
  if (!*(unsigned char *)(a2 + 368) || *(unsigned char *)(a2 + 250) != 0) {
    return;
  }
  if (sub_BF2DC0(a2))
  {
    if (*(unsigned char *)(a1 + 1576))
    {
      *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a1 + 1352);
      sub_BF364C((uint64_t *)(a1 + 1472), *(void *)(a1 + 1360), *(void *)(a1 + 1368), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 1368) - *(void *)(a1 + 1360)) >> 5));
      *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a1 + 1416);
      sub_BF3AD8((void *)(a1 + 1496), *(uint64_t **)(a1 + 1400), 0);
      *(_DWORD *)(a1 + 1568) = *(_DWORD *)(a1 + 1456);
      long long v51 = *(uint64_t **)(a1 + 1440);
      sub_BF3AD8((void *)(a1 + 1536), v51, 0);
    }
    else
    {
      sub_BF3D28(a1 + 1464, a1 + 1352);
      *(unsigned char *)(a1 + 1576) = 1;
    }
    return;
  }
  sub_725D0((uint64_t)v68);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t v9 = *(void *)(a3 + 56);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = 0;
  if (v9 == v8)
  {
    int v18 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    if ((0xEF7BDEF7BDEF7BDFLL * ((v9 - v8) >> 3)) >> 61) {
      sub_2E00();
    }
    unsigned int v10 = (char *)operator new(0x7BDEF7BDEF7BDEF8 * ((v9 - v8) >> 3));
    uint64_t v65 = v10;
    uint64_t v66 = v10;
    uint64_t v67 = &v10[0x7BDEF7BDEF7BDEF8 * ((v9 - v8) >> 3)];
    uint64_t v11 = (void *)(v7 + 4136);
    do
    {
      unsigned int v12 = *(_DWORD *)(v8 + 172);
      uint64_t v13 = (int *)sub_A11094(v11, *(void *)(v8 + 152));
      int v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
        unint64_t v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
      }
      else {
        unint64_t v16 = 0;
      }
      v73[0] = __ROR8__(*(void *)sub_A10764(v16, v12), 32);
      unsigned int v10 = sub_A19B54((unint64_t *)&v65, v10, v73) + 8;
      v8 += 248;
    }
    while (v8 != v9);
    uint64_t v17 = (char *)v65;
    int v18 = v66;
  }
  unint64_t v19 = 126 - 2 * __clz((v18 - v17) >> 3);
  if (v18 == v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_B6FCF0((uint64_t)v17, v18, (uint64_t)v73, v20, 1);
  uint64_t v21 = v66;
  if (v65 != v66)
  {
    uint64_t v22 = (char *)v65 + 8;
    while (v22 != v66)
    {
      LODWORD(v24) = *(_DWORD *)v22;
      int v23 = *((_DWORD *)v22 + 1);
      int v26 = *((_DWORD *)v22 - 2);
      int v25 = *((_DWORD *)v22 - 1);
      v22 += 8;
      if (v25 == v23 && v26 == v24)
      {
        BOOL v28 = v22 - 16;
        if (v22 != v66)
        {
          do
          {
            int v29 = v24;
            uint64_t v24 = *(void *)v22;
            if (v29 != *(void *)v22 || *((_DWORD *)v28 + 1) != HIDWORD(*(void *)v22))
            {
              *((void *)v28 + 1) = v24;
              v28 += 8;
            }
            v22 += 8;
          }
          while (v22 != v21);
          uint64_t v21 = v66;
        }
        if (v28 + 8 != v21) {
          uint64_t v66 = v28 + 8;
        }
        break;
      }
    }
  }
  sub_8EB7C4(v73, a2);
  if (*(unsigned char *)(a2 + 368)) {
    sub_8EB7C4(v74, a2 + 184);
  }
  int v31 = *(_DWORD *)(a1 + 24);
  char v72 = 1;
  uint64_t v70 = 0;
  BOOL v71 = 0;
  uint64_t v69 = 0;
  uint64_t v32 = v65;
  int64_t v33 = v66 - (unsigned char *)v65;
  if (v66 != v65)
  {
    if (v33 < 0) {
      sub_2E00();
    }
    uint64_t v69 = operator new(v66 - (unsigned char *)v65);
    uint64_t v70 = v69;
    long long v34 = (char *)v69 + 8 * (v33 >> 3);
    BOOL v71 = v34;
    memcpy(v69, v32, v33);
    uint64_t v70 = v34;
  }
  sub_BEC5FC(a1 + 696, 0, (uint64_t)v74, v31, (uint64_t)&v69, (uint64_t)v52);
  if (!*(unsigned char *)(a1 + 1576))
  {
    *(unsigned char *)(a1 + 1464) = v52[0];
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)v53;
    unint64_t v35 = v55;
    *(void *)(a1 + 1488) = v54;
    v53[0] = 0;
    v53[1] = 0;
    unint64_t v36 = v56;
    uint64_t v37 = v57;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    uint64_t v54 = 0;
    *(void *)(a1 + 1496) = v35;
    *(void *)(a1 + 1504) = v36;
    *(void *)(a1 + 1512) = v37;
    uint64_t v38 = v58;
    *(void *)(a1 + 1520) = v58;
    *(_DWORD *)(a1 + 1528) = v59;
    if (v38)
    {
      unint64_t v39 = v37[1];
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v39 >= v36) {
          v39 %= v36;
        }
      }
      else
      {
        v39 &= v36 - 1;
      }
      v35[v39] = a1 + 1512;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    unsigned int v40 = __p;
    unint64_t v41 = v61;
    long long __p = 0;
    unint64_t v61 = 0;
    *(void *)(a1 + 1536) = v40;
    *(void *)(a1 + 1544) = v41;
    unint64_t v42 = v62;
    uint64_t v43 = v63;
    *(void *)(a1 + 1552) = v62;
    *(void *)(a1 + 1560) = v43;
    *(_DWORD *)(a1 + 1568) = v64;
    if (v43)
    {
      unint64_t v44 = v42[1];
      if ((v41 & (v41 - 1)) != 0)
      {
        if (v44 >= v41) {
          v44 %= v41;
        }
      }
      else
      {
        v44 &= v41 - 1;
      }
      unint64_t v42 = 0;
      v40[v44] = a1 + 1552;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
    }
    *(unsigned char *)(a1 + 1576) = 1;
    if (!v42) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  sub_BF43E0(a1 + 1464, (uint64_t)v52);
  unint64_t v42 = v62;
  if (v62)
  {
    do
    {
LABEL_61:
      uint64_t v45 = (void *)*v42;
      operator delete(v42);
      unint64_t v42 = v45;
    }
    while (v45);
  }
LABEL_62:
  unint64_t v46 = __p;
  long long __p = 0;
  if (v46) {
    operator delete(v46);
  }
  unint64_t v47 = v57;
  if (v57)
  {
    do
    {
      uint64_t v48 = (void *)*v47;
      operator delete(v47);
      unint64_t v47 = v48;
    }
    while (v48);
  }
  int v49 = v55;
  unint64_t v55 = 0;
  if (v49) {
    operator delete(v49);
  }
  if (v53[0])
  {
    sub_9F64C8((uint64_t)v53, (uint64_t)v53[0]);
    operator delete(v53[0]);
  }
  if (v72 && v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  sub_8EB894((uint64_t)v73);
  uint64_t v50 = sub_BEC8EC(a1 + 696);
  sub_C556D0(a1 + 1800, v50);
  *(double *)(a1 + 1808) = sub_72688((uint64_t)v68) + *(double *)(a1 + 1808);
  if (v65)
  {
    uint64_t v66 = (char *)v65;
    operator delete(v65);
  }
}

void sub_BF2D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_BF2D94(uint64_t a1)
{
  return *(_DWORD *)(a1 + 376) == 1 && *(unsigned char *)(a1 + 368) != 0 && *(unsigned char *)(a1 + 250) == 0;
}

BOOL sub_BF2DC0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 376) == 1)
  {
    if (*(unsigned char *)(a1 + 368))
    {
      uint64_t v2 = *(void *)(a1 + 344);
      uint64_t v1 = *(void *)(a1 + 352);
      uint64_t v3 = *(void *)(a1 + 160);
      if (v1 - v2 == *(void *)(a1 + 168) - v3)
      {
        if (v2 == v1) {
          return sub_BF30B4(a1 + 184, a1);
        }
        while (*(_DWORD *)v2 == *(_DWORD *)v3)
        {
          BOOL v4 = *(_DWORD *)(v2 + 8) == *(_DWORD *)(v3 + 8) && *(_DWORD *)(v2 + 4) == *(_DWORD *)(v3 + 4);
          if (!v4
            || *(void *)(v2 + 16) != *(void *)(v3 + 16)
            || *(double *)(v2 + 24) != *(double *)(v3 + 24)
            || *(unsigned __int8 *)(v2 + 32) != *(unsigned __int8 *)(v3 + 32))
          {
            break;
          }
          v2 += 40;
          v3 += 40;
          if (v2 == v1) {
            return sub_BF30B4(a1 + 184, a1);
          }
        }
      }
    }
  }
  return 0;
}

double sub_BF2E88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1576))
  {
    uint64_t v2 = (unsigned char *)(a1 + 1464);
    sub_725D0((uint64_t)v4);
    sub_BF9A3C(a1 + 1624, v2);
    double result = sub_72688((uint64_t)v4) + *(double *)(a1 + 1944);
    *(double *)(a1 + 1944) = result;
  }
  return result;
}

uint64_t sub_BF2EE4(uint64_t a1)
{
  return a1 + 1624;
}

uint64_t sub_BF2EEC(uint64_t a1)
{
  return a1 + 1664;
}

uint64_t sub_BF2EF4(uint64_t a1)
{
  return a1 + 1800;
}

uint64_t sub_BF2EFC(uint64_t a1)
{
  return *(void *)(a1 + 1936);
}

double sub_BF2F04(uint64_t a1)
{
  return *(double *)(a1 + 1944);
}

uint64_t sub_BF2F0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *a1;
  int v17 = *((_DWORD *)a1 + 2);
  uint64_t v18 = a1[2];
  int v19 = *((_DWORD *)a1 + 6);
  sub_BE7040(&v20, a1 + 4);
  int v13 = *(_DWORD *)(a2 + 8);
  sub_BE7040(&__p, (uint64_t *)(a2 + 32));
  if (v17 == v13)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      sub_BED920((unsigned int *)&v16);
      ++v3;
    }
    while (v17 != v13);
  }
  BOOL v4 = __p;
  if (__p)
  {
    uint64_t v5 = (uint64_t)v15;
    int v6 = __p;
    if (v15 != __p)
    {
      do
      {
        int v7 = *(_DWORD *)(v5 - 8);
        v5 -= 1432;
        if (v7 == 2)
        {
          uint64_t v5 = sub_9F6418(v5);
        }
        else if (!v7)
        {
          uint64_t v5 = sub_9F636C(v5);
        }
      }
      while ((void *)v5 != v4);
      int v6 = __p;
    }
    uint64_t v15 = v4;
    operator delete(v6);
  }
  uint64_t v8 = v20;
  if (v20)
  {
    uint64_t v9 = (uint64_t)v21;
    unsigned int v10 = v20;
    if (v21 != v20)
    {
      do
      {
        int v11 = *(_DWORD *)(v9 - 8);
        v9 -= 1432;
        if (v11 == 2)
        {
          uint64_t v9 = sub_9F6418(v9);
        }
        else if (!v11)
        {
          uint64_t v9 = sub_9F636C(v9);
        }
      }
      while ((void *)v9 != v8);
      unsigned int v10 = v20;
    }
    uint64_t v21 = v8;
    operator delete(v10);
  }
  return v3;
}

void sub_BF3084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_BED8A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BF3098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_BED8A8((uint64_t)va);
  sub_BED8A8((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_BF30B4(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_DAA300((uint64_t *)a1, (uint64_t *)a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a2 + 104);
  if (v6 - v5 != *(void *)(a2 + 112) - v7) {
    return 0;
  }
  if (v5 == v6)
  {
LABEL_6:
    uint64_t v8 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 136);
    uint64_t v10 = *(void *)(a2 + 128);
    if (v9 - v8 == *(void *)(a2 + 136) - v10)
    {
      for (; v8 != v9; v10 += 64)
      {
        BOOL result = sub_BF31E0(v8, v10);
        if (!result) {
          return result;
        }
        v8 += 64;
      }
      if (*(_DWORD *)(a1 + 152) == *(_DWORD *)(a2 + 152)
        && *(unsigned __int8 *)(a1 + 156) == *(unsigned __int8 *)(a2 + 156)
        && *(unsigned __int8 *)(a1 + 157) == *(unsigned __int8 *)(a2 + 157))
      {
        return *(unsigned __int8 *)(a1 + 158) == *(unsigned __int8 *)(a2 + 158);
      }
    }
    return 0;
  }
  while (1)
  {
    BOOL result = sub_BF31E0(v5, v7);
    if (!result) {
      return result;
    }
    v5 += 64;
    v7 += 64;
    if (v5 == v6) {
      goto LABEL_6;
    }
  }
}

BOOL sub_BF31E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 41))
  {
    if (!*(unsigned char *)(a2 + 41) || (*(unsigned char *)(a1 + 40) == 0) == (*(unsigned char *)(a2 + 40) != 0)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 41))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 43))
  {
    if (!*(unsigned char *)(a2 + 43) || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 43))
  {
    return 0;
  }
  if (*(void *)(a1 + 48) == *(void *)(a2 + 48)) {
    return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  return 0;
}

char *sub_BF32DC(unint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 4);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    int v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      int v19 = (_DWORD *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        int v19 = (_DWORD *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        int v19 = (_DWORD *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          int v13 = (int *)((char *)v13 + v21);
          int v19 = (_DWORD *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(4 * v29);
    int v31 = &v30[4 * v8];
    uint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    int v31 = (char *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((_DWORD *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 1;
    }
    if (v53 >> 62) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(4 * v53);
    int v31 = &v54[v53 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = &v54[4 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[4 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(_DWORD *)int v31 = *a3;
      unint64_t v35 = v31 + 4;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(_DWORD *)int v31 = *a3;
  unint64_t v35 = v31 + 4;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  long long v52 = (_DWORD *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_BF3634(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_BF364C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xFAFAFAFAFAFAFAFBLL * ((v8 - *a1) >> 5) >= a4)
  {
    uint64_t v16 = a1[1];
    if (0xFAFAFAFAFAFAFAFBLL * ((v16 - v9) >> 5) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v21 = *a1;
      }
      else
      {
        uint64_t v21 = *a1;
        do
        {
          sub_BE7D3C(v9, v6);
          *(unsigned char *)(v9 + 168) = *(unsigned char *)(v6 + 168);
          *(_DWORD *)(v9 + 176) = *(_DWORD *)(v6 + 176);
          sub_BE7B28(v9 + 184, v6 + 184);
          __int16 v22 = *(_WORD *)(v6 + 1624);
          *(void *)(v9 + 1616) = *(void *)(v6 + 1616);
          *(_WORD *)(v9 + 1624) = v22;
          v21 += 1632;
          v6 += 1632;
          v9 += 1632;
        }
        while (v6 != a3);
      }
      sub_9F64C8((uint64_t)a1, v21);
    }
    else
    {
      uint64_t v17 = a2 + 32 * ((v16 - v9) >> 5);
      if (v16 != v9)
      {
        do
        {
          sub_BE7D3C(v9, v6);
          *(unsigned char *)(v9 + 168) = *(unsigned char *)(v6 + 168);
          *(_DWORD *)(v9 + 176) = *(_DWORD *)(v6 + 176);
          sub_BE7B28(v9 + 184, v6 + 184);
          __int16 v18 = *(_WORD *)(v6 + 1624);
          *(void *)(v9 + 1616) = *(void *)(v6 + 1616);
          *(_WORD *)(v9 + 1624) = v18;
          v6 += 1632;
          v9 += 1632;
        }
        while (v6 != v17);
        uint64_t v9 = a1[1];
      }
      uint64_t v19 = v9;
      if (v17 != a3)
      {
        uint64_t v20 = 0;
        do
        {
          sub_BF3948(v9 + v20, v17 + v20);
          v20 += 1632;
        }
        while (v17 + v20 != a3);
        uint64_t v19 = v9 + v20;
      }
      a1[1] = v19;
    }
  }
  else
  {
    if (v9)
    {
      sub_9F64C8((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x28282828282828) {
      goto LABEL_33;
    }
    unint64_t v10 = 0xFAFAFAFAFAFAFAFBLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x14141414141414 ? 0x28282828282828 : v11;
    if (v12 > 0x28282828282828) {
LABEL_33:
    }
      sub_2E00();
    uint64_t v13 = 1632 * v12;
    unint64_t v14 = (char *)operator new(1632 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (v6 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_BF3948((uint64_t)&v14[v15], v6 + v15);
        v15 += 1632;
      }
      while (v6 + v15 != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_BF38F8(_Unwind_Exception *a1)
{
  sub_BF3A28(v2, v3, v3, v4, v4);
  *(void *)(v1 + 8) = v4;
  _Unwind_Resume(a1);
}

uint64_t sub_BF3948(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v4)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  unint64_t v5 = (void *)(a1 + 184);
  uint64_t v6 = (uint64_t *)(a2 + 184);
  *(_DWORD *)(a1 + 1608) = *(_DWORD *)(a2 + 1608);
  int v7 = *(_DWORD *)(a2 + 1608);
  switch(v7)
  {
    case 2:
      sub_A0E244((uint64_t)v5, (uint64_t)v6);
      break;
    case 1:
      uint64_t v8 = *v6;
      *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
      *unint64_t v5 = v8;
      break;
    case 0:
      sub_BE6528((uint64_t)v5, (uint64_t)v6);
      break;
  }
  uint64_t v9 = *(void *)(a2 + 1616);
  *(_WORD *)(a1 + 1624) = *(_WORD *)(a2 + 1624);
  *(void *)(a1 + 1616) = v9;
  return a1;
}

void sub_BF3A08(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 160) == 1) {
    sub_20ABA6C((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_BF3A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3 - 1560; ; i -= 1632)
    {
      uint64_t v8 = i + 112;
      int v9 = *(_DWORD *)(i + 1536);
      if (v9 != 2) {
        break;
      }
      sub_9F6418(v8);
      if (*(_DWORD *)(i + 88) == 1) {
        goto LABEL_10;
      }
LABEL_3:
      uint64_t v7 = i - 72;
      if (v7 == a5) {
        return;
      }
    }
    if (!v9) {
      sub_9F636C(v8);
    }
    if (*(_DWORD *)(i + 88) != 1) {
      goto LABEL_3;
    }
LABEL_10:
    unint64_t v10 = *(void **)(i + 56);
    if (v10)
    {
      *(void *)(i + 64) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)(i + 32);
    if (v11)
    {
      *(void *)(i + 40) = v11;
      operator delete(v11);
    }
    unint64_t v12 = *(void **)i;
    if (*(void *)i)
    {
      *(void *)(i + 8) = v12;
      operator delete(v12);
    }
    goto LABEL_3;
  }
}

void sub_BF3AD8(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      int v9 = *(unsigned int **)v8;
      sub_BF3C00(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v12 = *(unsigned int **)v8;
      operator delete(v8);
      uint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v10 = operator new(0x18uLL);
      *(void *)unint64_t v10 = 0;
      uint64_t v11 = *((unsigned int *)a2 + 4);
      v10[4] = v11;
      *((void *)v10 + 1) = v11;
      sub_BF3C00(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_BF3BB8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_BF3BD8(_Unwind_Exception *a1)
{
}

void sub_BF3BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_BF3C00(void *a1, unsigned int *a2)
{
  unint64_t v5 = (int *)(a2 + 4);
  unint64_t v4 = a2[4];
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_13F0C((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *((void *)v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(void *)a2 = *v6;
  *uint64_t v6 = (uint64_t)a2;
  if (*(void *)a2)
  {
    unint64_t v10 = *(void *)(*(void *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t sub_BF3D28(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_BF3E24(a1 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5));
  sub_BF3F98(a1 + 32, a2 + 32);
  sub_BF3F98(a1 + 72, a2 + 72);
  return a1;
}

void sub_BF3DB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2;
  uint64_t v6 = *(void **)(v4 + 48);
  if (v6)
  {
    do
    {
      int8x8_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  unint64_t v8 = *v3;
  void *v3 = 0;
  if (v8)
  {
    operator delete(v8);
    uint8x8_t v9 = *v1;
    if (!*v1) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint8x8_t v9 = *v1;
    if (!*v1) {
      goto LABEL_5;
    }
  }
  sub_9F64C8((uint64_t)v1, (uint64_t)v9);
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_BF3E24(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = (void *)result;
    if (a4 >= 0x28282828282829) {
      sub_2E00();
    }
    BOOL result = (uint64_t)operator new(1632 * a4);
    uint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 1632 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        BOOL result = sub_BF3948(v8 + v9, a2 + v9);
        v9 += 1632;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_BF3EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_BF3F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_BF3A28(v11, v12, v12, v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_BF3F40(&a9);
  _Unwind_Resume(a1);
}

void ***sub_BF3F40(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_9F64C8((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_BF3F98(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_BF40DC(a1, i + 4, i + 4);
  return a1;
}

void sub_BF40B4(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_BF40C8(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_BF40DC(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *unint64_t v14 = *v25;
LABEL_59:
    void *v25 = v14;
    goto LABEL_60;
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_BF43CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_BF43E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    sub_9F64C8(a1 + 8, v4);
    operator delete(*(void **)v5);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_67501C(a1 + 32, (uint64_t *)(a2 + 32));

  sub_67501C(a1 + 72, (uint64_t *)(a2 + 72));
}

void sub_BF4474()
{
  unk_25DFEF7 = 16641;
  word_25DFEE0 = 65;
  byte_25DFF0F = 1;
  byte_25DFEF9 = 0;
}

unint64_t sub_BF449C(void *a1, void *a2)
{
  switch(*((unsigned char *)a2 + 168))
  {
    case 0:
      uint64_t v2 = (int *)sub_499804(a1[501] + 24, __ROR8__(*a2, 32), 0, "access point");
      unsigned __int16 v3 = *(_WORD *)((char *)v2 - *v2 + 14);
      goto LABEL_4;
    case 1:
      uint64_t v2 = (int *)sub_4992B0(a1[513] + 24, __ROR8__(*a2, 32), 0, "road access point");
      unsigned __int16 v3 = *(_WORD *)((char *)v2 - *v2 + 8);
LABEL_4:
      uint64_t v4 = (uint64_t)v2 + v3;
      LODWORD(v5) = *(_DWORD *)v4;
      LODWORD(v4) = *(_DWORD *)(v4 + 4);
      if (v4 >= 0xFFFFFFFE) {
        uint64_t v4 = 4294967294;
      }
      else {
        uint64_t v4 = v4;
      }
      return v5 | (unint64_t)(v4 << 32);
    case 2:
      if (HIDWORD(*a2) != 1 || *a2 + 3 >= 2)
      {
        unint64_t v7 = (int *)sub_498D5C(a1[515] + 24, __ROR8__(*a2, 32), 0, "stop");
        uint64_t v8 = (uint64_t)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6);
        uint64_t v9 = *(unsigned int *)v8;
        LODWORD(v8) = *(_DWORD *)(v8 + 4);
        if (v8 >= 0xFFFFFFFE) {
          uint64_t v8 = 4294967294;
        }
        else {
          uint64_t v8 = v8;
        }
        unint64_t v5 = v9 | (v8 << 32);
        uint64_t v4 = HIDWORD(v5);
      }
      else
      {
        LODWORD(v5) = -1;
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      return v5 | (unint64_t)(v4 << 32);
    case 3:
      uint64_t v11 = a2[13];
      uint64_t v10 = a2[14];
      uint64_t v12 = v10 - v11;
      uint64_t v14 = a2[16];
      uint64_t v13 = a2[17];
      uint64_t v15 = v13 - v14;
      unint64_t v16 = ((v13 - v14) >> 6) + ((v10 - v11) >> 6);
      if (!v16) {
        goto LABEL_20;
      }
      if (v11 == v10)
      {
        uint64_t v17 = 0;
        goto LABEL_26;
      }
      if ((unint64_t)(v12 - 64) < 0x40)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a2[13];
        do
        {
LABEL_25:
          v17 += *(unsigned int *)(v18 + 8);
          v18 += 64;
        }
        while (v18 != v10);
        goto LABEL_26;
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v21 = ((unint64_t)(v12 - 64) >> 6) + 1;
      uint64_t v18 = v11 + ((v21 & 0x7FFFFFFFFFFFFFELL) << 6);
      uint8x8_t v22 = (unsigned int *)(v11 + 72);
      uint64_t v23 = v21 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        uint64_t v24 = *(v22 - 16);
        unsigned int v25 = *v22;
        v22 += 32;
        v19 += v24;
        v20 += v25;
        v23 -= 2;
      }
      while (v23);
      uint64_t v17 = v20 + v19;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_25;
      }
LABEL_26:
      if (v14 == v13)
      {
        uint64_t v26 = 0;
        goto LABEL_34;
      }
      if ((unint64_t)(v15 - 64) < 0x40)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v14;
        do
        {
LABEL_33:
          v26 += *(unsigned int *)(v27 + 8);
          v27 += 64;
        }
        while (v27 != v13);
        goto LABEL_34;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      unint64_t v30 = ((unint64_t)(v15 - 64) >> 6) + 1;
      uint64_t v27 = v14 + ((v30 & 0x7FFFFFFFFFFFFFELL) << 6);
      int v31 = (unsigned int *)(v14 + 72);
      uint64_t v32 = v30 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        uint64_t v33 = *(v31 - 16);
        unsigned int v34 = *v31;
        v31 += 32;
        v28 += v33;
        v29 += v34;
        v32 -= 2;
      }
      while (v32);
      uint64_t v26 = v29 + v28;
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_33;
      }
LABEL_34:
      if (v11 == v10)
      {
        uint64_t v36 = 0;
        goto LABEL_42;
      }
      unint64_t v35 = v12 - 64;
      if ((unint64_t)(v12 - 64) < 0x40)
      {
        uint64_t v36 = 0;
        uint64_t v37 = v11;
        do
        {
LABEL_41:
          v36 += *(unsigned int *)(v37 + 12);
          v37 += 64;
        }
        while (v37 != v10);
        goto LABEL_42;
      }
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = (v35 >> 6) + 1;
      uint64_t v37 = v11 + ((v40 & 0x7FFFFFFFFFFFFFELL) << 6);
      uint64_t v41 = (unsigned int *)(v11 + 76);
      uint64_t v42 = v40 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        uint64_t v43 = *(v41 - 16);
        unsigned int v44 = *v41;
        v41 += 32;
        v38 += v43;
        v39 += v44;
        v42 -= 2;
      }
      while (v42);
      uint64_t v36 = v39 + v38;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_41;
      }
LABEL_42:
      unint64_t v45 = v26 + v17;
      if (v14 == v13)
      {
        uint64_t v47 = 0;
        goto LABEL_50;
      }
      unint64_t v46 = v15 - 64;
      if (v46 < 0x40)
      {
        uint64_t v47 = 0;
        uint64_t v48 = v14;
        do
        {
LABEL_49:
          v47 += *(unsigned int *)(v48 + 12);
          v48 += 64;
        }
        while (v48 != v13);
        goto LABEL_50;
      }
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = (v46 >> 6) + 1;
      uint64_t v48 = v14 + ((v51 & 0x7FFFFFFFFFFFFFELL) << 6);
      long long v52 = (unsigned int *)(v14 + 76);
      uint64_t v53 = v51 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        uint64_t v54 = *(v52 - 16);
        unsigned int v55 = *v52;
        v52 += 32;
        v49 += v54;
        v50 += v55;
        v53 -= 2;
      }
      while (v53);
      uint64_t v47 = v50 + v49;
      if (v51 != (v51 & 0x7FFFFFFFFFFFFFELL)) {
        goto LABEL_49;
      }
LABEL_50:
      unint64_t v56 = v47 + v36;
      LODWORD(v5) = sub_BF4838(v45 / v16);
      unsigned int v57 = sub_BF4838(v56 / v16);
      if (v57 >= 0xFFFFFFFE) {
        uint64_t v4 = 4294967294;
      }
      else {
        uint64_t v4 = v57;
      }
      return v5 | (unint64_t)(v4 << 32);
    default:
LABEL_20:
      uint64_t v4 = 0xFFFFFFFFLL;
      LODWORD(v5) = -1;
      return v5 | (unint64_t)(v4 << 32);
  }
}

unint64_t sub_BF4838(unint64_t result)
{
  unint64_t v1 = result;
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    unsigned __int16 v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    unint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_BF490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_BF498C(void *a1)
{
  sub_10A3FA0((uint64_t)v1, a1, 2, 0, 0);
}

void sub_BF4BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
    sub_10A4318((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  sub_10A4318((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_BF4BEC@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6 = *(unsigned __int8 *)(a3 + 168);
  if (v6 == 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v13, "cannot get snapped entity for snapped location");
    uint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v13);
  }
  if (!a4) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(a3 + 168))
  {
    if (v6 != 1)
    {
      if (v6 == 2)
      {
        std::string v8 = (int *)sub_BF5474(a1[515] + 24, *(void *)a3, 1, "snapped stop");
        goto LABEL_10;
      }
LABEL_7:
      *(void *)&long long v13 = sub_BF449C(a1, (void *)a3);
      DWORD2(v13) = v9;
      sub_BF498C(a2);
    }
    std::string v8 = (int *)sub_BF5F24(a1[513] + 24, *(void *)a3, 1, "snapped road access point");
  }
  else
  {
    std::string v8 = (int *)sub_BF59CC(a1[501] + 24, *(void *)a3, 1, "snapped access point");
  }
LABEL_10:

  return sub_2E8574(a5, v8);
}

void sub_BF4D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_BF4D58(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_BF4E90((uint64_t)&v14, a1);
  __int16 v7 = *(_WORD *)(a2 + 40);
  __int16 v8 = *(_WORD *)(a2 + 42);
  int v9 = operator new(0x40uLL);
  uint8x8_t v22 = v9 + 4;
  uint64_t v23 = (char *)(v9 + 4);
  long long v10 = *(_OWORD *)(a2 + 16);
  _OWORD *v9 = *(_OWORD *)a2;
  v9[1] = v10;
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *((_WORD *)v9 + 20) = v7;
  *((_WORD *)v9 + 21) = v8;
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *((unsigned char *)v9 + 56) = *(unsigned char *)(a2 + 56);
  unint64_t v21 = v9;
  sub_BF647C((uint64_t)&v14, (uint64_t *)&v21, 5, a3, a4);
  if (v21)
  {
    uint8x8_t v22 = v21;
    operator delete(v21);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  std::string::size_type v11 = v18;
  if (v18)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      std::string::size_type v11 = v12;
    }
    while (v12);
  }
  long long v13 = v17;
  uint64_t v17 = 0;
  if (v13) {
    operator delete(v13);
  }
  if (v15)
  {
    unint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_BF4E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::string::size_type v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
    sub_3821F8(&a9);
    _Unwind_Resume(a1);
  }
  sub_3821F8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_BF4E90(uint64_t a1, void *a2)
{
  *(void *)(a1 + 104) = sub_3750CC(a2);
  *(void *)(a1 + 112) = sub_376F8C(a2);
  return a1;
}

void sub_BF4ED8(_Unwind_Exception *a1)
{
  unsigned __int16 v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  sub_20AE964(v1);
  _Unwind_Resume(a1);
}

void sub_BF4EFC(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_BF4E90((uint64_t)v10, a1);
  sub_BF4FB0((uint64_t)v10, a2, a3, a4);
  if (__p)
  {
    unint64_t v16 = __p;
    operator delete(__p);
  }
  __int16 v7 = v14;
  if (v14)
  {
    do
    {
      __int16 v8 = (void *)*v7;
      operator delete(v7);
      __int16 v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = v13;
  long long v13 = 0;
  if (v9) {
    operator delete(v9);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_BF4F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3821F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_BF4FB0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = v8;
  int v9 = *(_DWORD *)(a2 + 152);
  long long v10 = *(uint64_t **)(a2 + 104);
  std::string::size_type v11 = *(uint64_t **)(a2 + 112);
  if (v10 != v11)
  {
    do
    {
      sub_BF6684(a1, v10, v9, a2, a3, (char **)a4, 1.0);
      v10 += 8;
    }
    while (v10 != v11);
    long long v13 = *(char **)a4;
    uint64_t v12 = *(char **)(a4 + 8);
    if (*(char **)a4 != v12)
    {
      uint64_t v14 = *(char **)a4;
      uint64_t v15 = *(char **)a4;
      while (v15[32])
      {
        v15 += 80;
        if (v15 == v12)
        {
          unint64_t v16 = v12 - v13 - 80;
          if (v16 < 0x50) {
            goto LABEL_27;
          }
          unint64_t v17 = v16 / 0x50 + 1;
          uint64_t v14 = &v13[80 * (v17 & 0x7FFFFFFFFFFFFFELL)];
          uint64_t v18 = v13 + 128;
          uint64_t v19 = v17 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v18 - 80) = 0;
            *uint64_t v18 = 0;
            v18 += 160;
            v19 -= 2;
          }
          while (v19);
          if (v17 != (v17 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_27:
            do
            {
              v14[48] = 0;
              v14 += 80;
            }
            while (v14 != v12);
          }
          break;
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  if (v20 != v21)
  {
    if (v21 - v20 < 0) {
      sub_2E00();
    }
    uint8x8_t v22 = (char *)operator new(v21 - v20);
    uint64_t v23 = v22;
    uint64_t v24 = 0;
    do
    {
      uint64_t v25 = v20 + v24;
      uint64_t v26 = &v22[v24];
      long long v27 = *(_OWORD *)(v20 + v24);
      long long v28 = *(_OWORD *)(v20 + v24 + 16);
      *((void *)v26 + 4) = *(void *)(v20 + v24 + 32);
      *(_OWORD *)uint64_t v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      *((_WORD *)v26 + 20) = *(_WORD *)(v20 + v24 + 40);
      *((_WORD *)v26 + 21) = *(_WORD *)(v20 + v24 + 42);
      uint64_t v29 = *(void *)(v20 + v24 + 48);
      v26[56] = *(unsigned char *)(v20 + v24 + 56);
      *((void *)v26 + 6) = v29;
      v24 += 64;
    }
    while (v25 + 64 != v21);
    uint64_t v30 = v24 >> 6;
    unint64_t v31 = 126 - 2 * __clz(v24 >> 6);
    if (v24) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    sub_BF6AF0((uint64_t)v22, (unint64_t)&v22[v24], (uint64_t)&v37, v32, 1);
    if (v24)
    {
      uint64_t v33 = 0;
      double v34 = 0.5;
      double v35 = 0.5 / (double)(unint64_t)v30;
      uint64_t v36 = v30 << 6;
      do
      {
        sub_BF6684(a1, (uint64_t *)&v23[v33], v9, a2, a3, (char **)a4, v34);
        double v34 = v34 - v35;
        v33 += 64;
      }
      while (v36 != v33);
    }
    operator delete(v23);
  }
}

void sub_BF51DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  operator delete(v11);
  long long v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_BF5238(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned char *)(a3 + 168) == 3)
  {
    sub_BF4EFC(a2, a3, a4, a6);
  }
  else
  {
    sub_BF4BEC(a1, a2, a3, a5, (uint64_t)v9);
    sub_BF4D58(a2, (uint64_t)v9, a4, a6);
  }
}

void sub_BF52D8(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_BF92CC(a4, 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 4));
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    uint64_t v10 = *(void *)(a4 + 8);
    do
    {
      if (*(unsigned char *)(v8 + 168) == 3)
      {
        sub_BF4EFC(a2, v8, 0, (uint64_t)__p);
      }
      else
      {
        sub_BF4BEC(a1, a2, v8, 1, (uint64_t)v13);
        sub_BF4D58(a2, (uint64_t)v13, 0, (uint64_t)__p);
      }
      std::string::size_type v11 = sub_BF9458((char **)a4, v10, __p);
      if (__p[0].n128_u64[0])
      {
        __p[0].n128_u64[1] = __p[0].n128_u64[0];
        operator delete((void *)__p[0].n128_u64[0]);
      }
      uint64_t v10 = (uint64_t)(v11 + 32);
      v8 += 176;
    }
    while (v8 != v9);
  }
}

void sub_BF53E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = (char *)*v10;
  if (*v10)
  {
    long long v13 = (char *)v10[1];
    uint64_t v14 = *v10;
    if (v13 != v12)
    {
      uint64_t v15 = (char *)v10[1];
      do
      {
        unint64_t v17 = (void *)*((void *)v15 - 4);
        v15 -= 32;
        unint64_t v16 = v17;
        if (v17)
        {
          *((void *)v13 - 3) = v16;
          operator delete(v16);
        }
        long long v13 = v15;
      }
      while (v15 != v12);
      uint64_t v14 = *v10;
    }
    v10[1] = v12;
    operator delete(v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BF5474(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0xFu)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[7];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        double v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        char v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v56;
        }
        else {
          uint64_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v45 = &v55;
        }
        else {
          unint64_t v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        uint64_t v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = sub_736EC(9u);
        long long v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        uint64_t v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_BF5810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_BF59CC(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x11u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[8];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        double v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        char v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v56;
        }
        else {
          uint64_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v45 = &v55;
        }
        else {
          unint64_t v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        uint64_t v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = sub_736EC(9u);
        long long v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        uint64_t v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}