void sub_500AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_500DC(uint64_t a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      float32x4_t v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        float32x4_t *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + a2;
    if (v12 >> 62) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_188D718();
      }
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    unint64_t v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    float32x4_t v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      float32x4_t *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 4;
      if (v29 < 0x2C) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 2) + 1;
      uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_47:
        do
        {
          int v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_50350()
{
}

void sub_50394()
{
}

void sub_503B8()
{
  v0 = operator new(0x20uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = off_23FDEA0;
  sub_504A4();
}

void sub_5040C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_50424(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_23FDEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_50444(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_23FDEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_50498(uint64_t a1)
{
  return sub_504E0((uint64_t *)(a1 + 24));
}

void sub_504A4()
{
}

uint64_t *sub_504E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    operator delete();
  }
  return a1;
}

uint64_t sub_50520()
{
  return 4;
}

void *sub_50528(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_188FC78(a1, (uint64_t)"HTTP_NONE", 9);
      result = a1;
      break;
    case 1:
      sub_188FC78(a1, (uint64_t)"HTTP_CONNECTION_ERROR", 21);
      result = a1;
      break;
    case 2:
      sub_188FC78(a1, (uint64_t)"HTTP_CONNECTION_TIMEOUT_ERROR", 29);
      result = a1;
      break;
    case 3:
      sub_188FC78(a1, (uint64_t)"HTTP_CURL_ERROR", 15);
      result = a1;
      break;
    case 4:
      sub_188FC78(a1, (uint64_t)"HTTP_UNSUPPORTED", 16);
      result = a1;
      break;
    case 5:
      sub_188FC78(a1, (uint64_t)"HTTP_UNSUPPORTED_METHOD", 23);
      result = a1;
      break;
    case 6:
      sub_188FC78(a1, (uint64_t)"HTTP_INVALID_INPUT", 18);
      result = a1;
      break;
    default:
      sub_188FC78(a1, (uint64_t)"HTTP_ERROR_ENUM_TO_STR_NOT_AVAILABLE", 36);
      result = a1;
      break;
  }
  return result;
}

uint64_t sub_506A4(int a1)
{
  sub_E1B4((uint64_t)v4);
  sub_50528(v5, a1);
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_50814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_50828(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

char *sub_508B0(char *__dst, long long *a2, int a3, _OWORD *a4, uint64_t a5, uint64_t a6, long long *a7)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v13;
  }
  *((void *)__dst + 4) = 0;
  *((_DWORD *)__dst + 6) = a3;
  *((void *)__dst + 5) = 0;
  *((void *)__dst + 6) = 0;
  sub_50A7C((uint64_t)(__dst + 56), a5);
  sub_50A7C((uint64_t)(__dst + 96), a6);
  unint64_t v14 = __dst + 136;
  if (*((char *)a7 + 23) < 0)
  {
    sub_4200(v14, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v15 = *a7;
    *((void *)__dst + 19) = *((void *)a7 + 2);
    *(_OWORD *)unint64_t v14 = v15;
  }
  uint64_t v16 = *((unsigned __int8 *)a7 + 23);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a7 + 1);
  }
  *((void *)__dst + 20) = v16;
  *(_OWORD *)(__dst + 168) = *a4;
  return __dst;
}

void sub_509A4(_Unwind_Exception *a1)
{
  sub_50828(v3);
  sub_50828(v2);
  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

std::string *sub_50A04(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void sub_50A0C(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_8:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_8;
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_50A7C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    sub_2D4C8(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_50B98(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

void sub_50BAC(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

double sub_50BC0(uint64_t a1)
{
  *(_DWORD *)a1 = 500;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_50BE8(uint64_t a1)
{
  return a1 + 48;
}

char *sub_50BF0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[71] < 0) {
    return (char *)sub_4200((unsigned char *)a2, *((void **)result + 6), *((void *)result + 7));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 3);
  *(void *)(a2 + 16) = *((void *)result + 8);
  return result;
}

uint64_t sub_50C1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 300:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "MULTIPLE_CHOICES");
      break;
    case 301:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "MOVED_PERMANENTLY");
      break;
    case 302:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "MOVED_TEMPORARILY");
      break;
    case 303:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 402:
LABEL_25:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "UNKNOWN");
      break;
    case 304:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "NOT_MODIFIED");
      break;
    case 400:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "BAD_REQUEST");
      break;
    case 401:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "UNAUTHORIZED");
      break;
    case 403:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "FORBIDDEN");
      break;
    case 404:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "NOT_FOUND");
      break;
    case 405:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "METHOD_NOT_ALLOWED");
      break;
    case 406:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "NOT_ACCEPTABLE");
      break;
    case 407:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "AUTH_REQUIRED");
      break;
    case 408:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "REQUEST_TIMEDOUT");
      break;
    case 409:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "CONFLICT");
      break;
    case 410:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "GONE");
      break;
    default:
      if (!v3 & v2)
      {
        switch((int)result)
        {
          case 200:
            *(unsigned char *)(a2 + 23) = 2;
            strcpy((char *)a2, "OK");
            break;
          case 201:
            *(unsigned char *)(a2 + 23) = 7;
            strcpy((char *)a2, "CREATED");
            break;
          case 202:
            *(unsigned char *)(a2 + 23) = 8;
            strcpy((char *)a2, "ACCEPTED");
            break;
          case 204:
            *(unsigned char *)(a2 + 23) = 10;
            strcpy((char *)a2, "NO_CONTENT");
            break;
          default:
            goto LABEL_25;
        }
      }
      else
      {
        switch((int)result)
        {
          case 500:
            *(unsigned char *)(a2 + 23) = 21;
            strcpy((char *)a2, "INTERNAL_SERVER_ERROR");
            return result;
          case 501:
            v4 = "NOT_IMPLEMENTED";
            goto LABEL_30;
          case 502:
            *(unsigned char *)(a2 + 23) = 11;
            strcpy((char *)a2, "BAD_GATEWAY");
            return result;
          case 503:
            *(unsigned char *)(a2 + 23) = 19;
            strcpy((char *)a2, "SERVICE_UNAVAILABLE");
            return result;
          case 504:
            v4 = "GATEWAY_TIMEOUT";
LABEL_30:
            *(unsigned char *)(a2 + 23) = 15;
            *(void *)a2 = *(void *)v4;
            *(void *)(a2 + 7) = *(void *)(v4 + 7);
            *(unsigned char *)(a2 + 15) = 0;
            break;
          default:
            JUMPOUT(0);
        }
      }
      return result;
  }
  return result;
}

uint64_t sub_511FC(unsigned int a1)
{
  return 31 - __clz(a1);
}

unint64_t sub_5120C(int a1)
{
  if (!a1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v1 = (1 << a1) >> 1;
  if (~(-1 << a1) < v1) {
    unsigned int v1 = ~(-1 << a1);
  }
  int v2 = v1 & 0xF | (v1 << 8) & 0xF000F | (16 * (v1 | (v1 << 8) & 0xFF00FF)) & 0xF0F0F0F;
  unsigned int v72 = ((4 * ((v2 | (4 * v2)) & 0x33333333)) | (2 * ((v2 | (4 * v2)) & 0x33333333))) & 0xAAAAAAAA | (1 << (2 * a1));
  unsigned int v3 = sub_51764(&v72, 1u, 0);
  unsigned int v4 = sub_51764(&v72, 0, 0xFFFFFFFF);
  uint32x2_t v5 = (uint32x2_t)vsub_s32((int32x2_t)0x1F0000001FLL, vclz_s32((int32x2_t)__PAIR64__(v3, v72)));
  int32x2_t v6 = (int32x2_t)vshr_n_u32(v5, 1uLL);
  __int32 v69 = v6.i32[0];
  int8x8_t v7 = (int8x8_t)vcgt_u32((uint32x2_t)0x200000002, v5);
  int32x2_t v8 = (int32x2_t)vorr_s8((int8x8_t)(*(void *)&v7 & 0xFFFFFFFEFFFFFFFELL), vbic_s8((int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, v6)), v7));
  int8x8_t v9 = vbic_s8((int8x8_t)__PAIR64__(v3, v72), (int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)(*(void *)&v5 & 0xFFFFFFFEFFFFFFFELL)));
  uint32x2_t v10 = (uint32x2_t)vand_s8(v9, (int8x8_t)vdup_n_s32(0x15555555u));
  unsigned __int32 v11 = v9.u32[1];
  unsigned __int32 v12 = (((((unsigned __int32)v9.i32[0] >> 1) & 0x4444444 | v9.i32[0] & 0x22222222) >> 3) | ((((unsigned __int32)v9.i32[0] >> 1) & 0x4444444 | v9.i32[0] & 0x22222222) >> 1)) & 0xF0F0F0F;
  uint32x2_t v13 = (uint32x2_t)vand_s8((int8x8_t)vsra_n_u32(v10, v10, 1uLL), (int8x8_t)vdup_n_s32(0x13333333u));
  uint32x2_t v14 = (uint32x2_t)vand_s8((int8x8_t)vsra_n_u32(v13, v13, 2uLL), (int8x8_t)vdup_n_s32(0x70F0F0Fu));
  int8x8_t v15 = (int8x8_t)vsra_n_u32(v14, v14, 4uLL);
  int32x2_t v70 = vmul_s32((int32x2_t)vorr_s8(vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v15, 8uLL), (int8x8_t)0x7F0000007F00), vand_s8(v15, (int8x8_t)0xFF000000FFLL)), v8);
  unsigned int v16 = ((v12 | (v12 >> 4)) | ((((v12 | (v12 >> 4)) >> 16) & 0x7F) << 8)) * v8.i32[0];
  unsigned int v17 = ((((v11 >> 1) & 0x4444444 | v11 & 0x22222222) >> 3) | (((v11 >> 1) & 0x4444444 | v11 & 0x22222222) >> 1)) & 0xF0F0F0F;
  unsigned int v18 = (v17 | (v17 >> 4)) | ((((v17 | (v17 >> 4)) >> 16) & 0x7F) << 8);
  if (v16 >= 0xFFFFFFFE) {
    unsigned int v19 = -2;
  }
  else {
    unsigned int v19 = ((v12 | (v12 >> 4)) | ((((v12 | (v12 >> 4)) >> 16) & 0x7F) << 8)) * v8.i32[0];
  }
  unsigned int v20 = v18 * v8.i32[1];
  if (v20 >= 0xFFFFFFFE) {
    unsigned int v21 = -2;
  }
  else {
    unsigned int v21 = v20;
  }
  long double v22 = exp(3.14159265 - (double)v19 * 6.28318531 / 4294967300.0);
  long double v23 = atan((v22 - 1.0 / v22) * 0.5) * 57.2957795 * 0.0174532925;
  long double v24 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
  long double v25 = atan((v24 - 1.0 / v24) * 0.5) * 57.2957795 * 0.0174532925;
  v26.i64[0] = v70.u32[0];
  v26.i64[1] = v70.u32[1];
  float64x2_t v68 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v67 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v66 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v65 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  int64x2_t v27 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v26), v68), v67), v66), v65);
  double v63 = vsubq_f64((float64x2_t)v27, (float64x2_t)vdupq_laneq_s64(v27, 1)).f64[0];
  long double v28 = sin((v23 - v25) * 0.5);
  long double v29 = v28 * v28;
  double v30 = cos(v23);
  long double v31 = v30 * cos(v25);
  long double v32 = sin(0.5 * v63);
  long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
  double v64 = (v33 + v33) * 6372797.56;
  unsigned int v34 = 31 - __clz(v4);
  unsigned int v35 = v34 >> 1;
  unsigned int v36 = v4 & ~(-1 << (v34 & 0xFE));
  unsigned int v37 = v36 & 0x11111111 | ((v36 & 0x55555555) >> 1) & 0x33333333;
  unsigned int v38 = (v37 | (v37 >> 2)) & 0xF0F0F0F | (((v37 | (v37 >> 2)) & 0xF0F0F0F) >> 4);
  int v39 = v38 | ((HIWORD(v38) & 0x7F) << 8);
  unsigned int v40 = ((((v36 >> 1) & 0x44444444 | v36 & 0x22222222) >> 3) | (((v36 >> 1) & 0x44444444 | v36 & 0x22222222) >> 1)) & 0xF0F0F0F;
  unsigned int v41 = (v40 | (v40 >> 4)) | ((((v40 | (v40 >> 4)) >> 16) & 0x7F) << 8);
  if (v34 >= 2) {
    int v42 = 1 << -(char)(v34 >> 1);
  }
  else {
    int v42 = -2;
  }
  int32x2_t v43 = (int32x2_t)vshl_u32((uint32x2_t)0x8000000080000000, (uint32x2_t)vneg_s32((int32x2_t)__PAIR64__(v35, v69)));
  v44.i32[0] = v70.i32[0];
  v44.i32[1] = v39 * v42;
  int32x2_t v45 = vadd_s32(v44, v43);
  unsigned int v46 = v16 + v43.i32[0];
  if (v16 + v43.i32[0] >= 0xFFFFFFFE) {
    unsigned int v46 = -2;
  }
  unsigned int v47 = v43.i32[1] + v41 * v42;
  if (v47 >= 0xFFFFFFFE) {
    unsigned int v48 = -2;
  }
  else {
    unsigned int v48 = v47;
  }
  long double v49 = exp(3.14159265 - (double)v46 * 6.28318531 / 4294967300.0);
  long double v50 = atan((v49 - 1.0 / v49) * 0.5) * 57.2957795 * 0.0174532925;
  long double v51 = exp(3.14159265 - (double)v48 * 6.28318531 / 4294967300.0);
  long double v52 = atan((v51 - 1.0 / v51) * 0.5) * 57.2957795 * 0.0174532925;
  v53.i64[0] = v45.u32[0];
  v53.i64[1] = v45.u32[1];
  int64x2_t v54 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v53), v68), v67), v66), v65);
  double v71 = vsubq_f64((float64x2_t)v54, (float64x2_t)vdupq_laneq_s64(v54, 1)).f64[0];
  long double v55 = sin((v50 - v52) * 0.5);
  long double v56 = v55 * v55;
  double v57 = cos(v50);
  long double v58 = v57 * cos(v52);
  long double v59 = sin(0.5 * v71);
  long double v60 = atan2(sqrt(v56 + v58 * (v59 * v59)), sqrt(1.0 - (v56 + v58 * (v59 * v59))));
  double v61 = (v60 + v60) * 6372797.56;
  if (v64 >= v61) {
    double v61 = v64;
  }
  return vcvtpd_s64_f64(v61 * 100.0);
}

uint64_t sub_51764(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = 31 - __clz(*a1);
  unsigned int v4 = v3 >> 1;
  LOBYTE(v3) = v3 & 0xFE;
  unsigned int v5 = *a1 & ~(-1 << v3);
  unsigned int v6 = v5 & 0x11111111 | ((v5 & 0x55555555) >> 1) & 0x33333333;
  unsigned int v7 = ((((v5 >> 1) & 0x44444444 | v5 & 0x22222222) >> 3) | (((v5 >> 1) & 0x44444444 | v5 & 0x22222222) >> 1)) & 0xF0F0F0F;
  v8.i32[0] = (v6 | (v6 >> 2)) & 0xF0F0F0F | (((v6 | (v6 >> 2)) & 0xF0F0F0F) >> 4);
  v8.i32[1] = v7 | (v7 >> 4);
  int8x8_t v9 = (int8x8_t)vshr_n_u32(v8, 8uLL);
  int32x2_t v10 = (int32x2_t)vand_s8((int8x8_t)v8, (int8x8_t)0xFF000000FFLL);
  int32x2_t v11 = (int32x2_t)vand_s8(v9, (int8x8_t)0x7F0000007F00);
  int32x2_t v12 = vadd_s32(vadd_s32(v10, (int32x2_t)__PAIR64__(a3, a2)), v11);
  int32x2_t v13 = vdup_n_s32(v4);
  uint32x2_t v14 = (uint32x2_t)vadd_s32((int32x2_t)vshl_u32(vsra_n_u32(vshl_u32((uint32x2_t)vsub_s32(vmax_s32(v12, 0), (int32x2_t)vsra_n_u32((uint32x2_t)v12, (uint32x2_t)v12, 0x1FuLL)), (uint32x2_t)vneg_s32(v13)), (uint32x2_t)v12, 0x1FuLL), (uint32x2_t)v13), vadd_s32(vadd_s32((int32x2_t)__PAIR64__(a3, a2), v11), v10));
  v14.i32[0] %= 1 << v4;
  v14.i32[1] %= 1 << v4;
  int32x2_t v15 = (int32x2_t)vmin_u32((uint32x2_t)vdup_n_s32(~(-1 << v4)), v14);
  uint64_t v16 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32(v15, 8uLL), vand_s8((int8x8_t)v15, (int8x8_t)0xFFFF0000FFFFLL)) & 0xFF00FF00FF00FFLL;
  unint64_t v17 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v16, 4uLL), (int8x8_t)v16) & 0xFF0FFF0FFF0FFF0FLL;
  int8x8_t v18 = vand_s8(vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v17, 2uLL), (int8x8_t)v17), (int8x8_t)0x3333333333333333);
  int8x8_t v19 = (int8x8_t)vshl_u32((uint32x2_t)v18, (uint32x2_t)0x200000001);
  v18.i32[1] *= 2;
  int8x8_t v20 = vand_s8(vorr_s8(v19, v18), (int8x8_t)0xAAAAAAAA55555555);
  return v20.i32[0] | (1 << v3) | v20.i32[1];
}

float sub_518C8(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a1, a2), 8uLL), vand_s8((int8x8_t)__PAIR64__(a1, a2), (int8x8_t)0xFFFF0000FFFFLL)) & 0xFF00FF00FF00FFLL;
  unint64_t v3 = *(void *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v2, 4uLL), (int8x8_t)v2) & 0xFF0FFF0FFF0FFF0FLL;
  int8x8_t v4 = vand_s8(vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v3, 2uLL), (int8x8_t)v3), (int8x8_t)0x3333333333333333);
  int8x8_t v5 = (int8x8_t)vshl_u32((uint32x2_t)v4, (uint32x2_t)0x100000002);
  v4.i32[0] *= 2;
  int32x2_t v6 = (int32x2_t)vand_s8(vorr_s8(v5, v4), (int8x8_t)0x55555555AAAAAAAALL);
  LODWORD(result) = vorr_s8((int8x8_t)v6, (int8x8_t)vdup_lane_s32(v6, 1)).u32[0];
  return result;
}

uint64_t sub_51938(int a1)
{
  unsigned int v1 = a1 & 0x11111111 | ((a1 & 0x55555555u) >> 1) & 0x33333333;
  unsigned int v2 = (v1 | (v1 >> 2)) & 0xF0F0F0F | (((v1 | (v1 >> 2)) & 0xF0F0F0F) >> 4);
  return v2 | (BYTE2(v2) << 8);
}

void *sub_51960(void *a1, int a2)
{
  if (a2) {
    return (void *)std::ostream::operator<<();
  }
  else {
    return sub_188FC78(a1, (uint64_t)"INVALID", 7);
  }
}

uint64_t *sub_51978(uint64_t *a1, uint64_t a2)
{
  std::istream::sentry::sentry();
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  unsigned int v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  int8x8_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    int32x2_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    int32x2_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint32x2_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_16;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_51B9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x51B58);
  }
  __cxa_rethrow();
}

void sub_51C38(_Unwind_Exception *a1)
{
}

uint64_t sub_51C4C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)float result = 1;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

double sub_51C5C@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)unint64_t v3 = 0uLL;
  uuid_generate_time((unsigned __int8 *)v3);
  *(unsigned char *)a1 = 1;
  double result = v3[0];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
  return result;
}

uint64_t sub_51CCC@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  *(_OWORD *)uint64_t v5 = 0uLL;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = uuid_parse(a1, v5);
  if (result)
  {
    char v4 = 0;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *(_OWORD *)(a2 + 1) = *(_OWORD *)v5;
    char v4 = 1;
  }
  *(unsigned char *)a2 = v4;
  return result;
}

uint64_t sub_51D60(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_51D68(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_51D74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)a1)
  {
    *(_OWORD *)unsigned int v7 = *(_OWORD *)(a1 + 8);
    uuid_unparse(v7, out);
    unint64_t v3 = (char *)operator new(0x28uLL);
    long long v4 = *(_OWORD *)&out[16];
    *(_OWORD *)unint64_t v3 = *(_OWORD *)out;
    *((_OWORD *)v3 + 1) = v4;
    *((_DWORD *)v3 + 8) = *(_DWORD *)&out[32];
    v3[36] = 0;
    uint64_t v5 = operator new(0x28uLL);
    *(void *)a2 = v5;
    *(_OWORD *)(a2 + 8) = xmmword_20B8FD0;
    long long v6 = *(_OWORD *)&out[16];
    *uint64_t v5 = *(_OWORD *)out;
    v5[1] = v6;
    *((_DWORD *)v5 + 8) = *(_DWORD *)&out[32];
    *((unsigned char *)v5 + 36) = 0;
    *(unsigned char *)uint64_t v5 = __tolower(*v3);
    *((unsigned char *)v5 + 1) = __tolower(v3[1]);
    *((unsigned char *)v5 + 2) = __tolower(v3[2]);
    *((unsigned char *)v5 + 3) = __tolower(v3[3]);
    *((unsigned char *)v5 + 4) = __tolower(v3[4]);
    *((unsigned char *)v5 + 5) = __tolower(v3[5]);
    *((unsigned char *)v5 + 6) = __tolower(v3[6]);
    *((unsigned char *)v5 + 7) = __tolower(v3[7]);
    *((unsigned char *)v5 + 8) = __tolower(v3[8]);
    *((unsigned char *)v5 + 9) = __tolower(v3[9]);
    *((unsigned char *)v5 + 10) = __tolower(v3[10]);
    *((unsigned char *)v5 + 11) = __tolower(v3[11]);
    *((unsigned char *)v5 + 12) = __tolower(v3[12]);
    *((unsigned char *)v5 + 13) = __tolower(v3[13]);
    *((unsigned char *)v5 + 14) = __tolower(v3[14]);
    *((unsigned char *)v5 + 15) = __tolower(v3[15]);
    *((unsigned char *)v5 + 16) = __tolower(v3[16]);
    *((unsigned char *)v5 + 17) = __tolower(v3[17]);
    *((unsigned char *)v5 + 18) = __tolower(v3[18]);
    *((unsigned char *)v5 + 19) = __tolower(v3[19]);
    *((unsigned char *)v5 + 20) = __tolower(v3[20]);
    *((unsigned char *)v5 + 21) = __tolower(v3[21]);
    *((unsigned char *)v5 + 22) = __tolower(v3[22]);
    *((unsigned char *)v5 + 23) = __tolower(v3[23]);
    *((unsigned char *)v5 + 24) = __tolower(v3[24]);
    *((unsigned char *)v5 + 25) = __tolower(v3[25]);
    *((unsigned char *)v5 + 26) = __tolower(v3[26]);
    *((unsigned char *)v5 + 27) = __tolower(v3[27]);
    *((unsigned char *)v5 + 28) = __tolower(v3[28]);
    *((unsigned char *)v5 + 29) = __tolower(v3[29]);
    *((unsigned char *)v5 + 30) = __tolower(v3[30]);
    *((unsigned char *)v5 + 31) = __tolower(v3[31]);
    *((unsigned char *)v5 + 32) = __tolower(v3[32]);
    *((unsigned char *)v5 + 33) = __tolower(v3[33]);
    *((unsigned char *)v5 + 34) = __tolower(v3[34]);
    *((unsigned char *)v5 + 35) = __tolower(v3[35]);
    operator delete(v3);
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void sub_5201C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_52034(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_52058(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_52060(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL sub_52068(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  return *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
}

BOOL sub_52098(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 1;
  }
  return *((void *)a1 + 1) != *((void *)a2 + 1) || *((void *)a1 + 2) != *((void *)a2 + 2);
}

void *sub_520C8(void *a1, uint64_t a2)
{
  sub_51D74(a2, (uint64_t)__p);
  if ((v7 & 0x80u) == 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  sub_188FC78(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_52148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_52164(uint64_t a1)
{
  std::string::size_type v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    return 0;
  }
  char v3 = *(unsigned char *)(a1 + 47);
  if ((v3 & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 47)) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
LABEL_7:
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v4 = *(void *)(a1 + 32);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_p = (stat *)operator new(v8 + 1);
    __p.st_ino = v4 + 1;
    *(void *)&__p.st_uid = v9 | 0x8000000000000000;
    *(void *)&__p.st_dev = p_p;
    goto LABEL_19;
  }
  memset(&__p, 0, 24);
  p_p = &__p;
  HIBYTE(__p.st_gid) = v4 + 1;
  if (v4)
  {
LABEL_19:
    if (v3 >= 0) {
      uint64_t v10 = (const void *)(a1 + 24);
    }
    else {
      uint64_t v10 = *(const void **)(a1 + 24);
    }
    memmove(p_p, v10, v4);
  }
  *(_WORD *)((char *)&p_p->st_dev + v4) = 47;
  if ((v2 & 0x80u) == 0) {
    uint64_t v11 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a1;
  }
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v12 = v2;
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 8);
  }
  int v13 = std::string::append((std::string *)&__p, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v20 = v13->__r_.__value_.__r.__words[2];
  long long v19 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  if (v20 >= 0) {
    uint64_t v15 = (const char *)&v19;
  }
  else {
    uint64_t v15 = (const char *)v19;
  }
  if (stat(v15, &__p)) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = (__p.st_mode & 0xF000) == 0x8000;
  }
  uint64_t v7 = v16;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  return v7;
}

uint64_t sub_5231C(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_52324(uint64_t a1)
{
  std::string::size_type v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    return 0;
  }
  char v3 = *(unsigned char *)(a1 + 47);
  if ((v3 & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 47)) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
LABEL_7:
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v4 = *(void *)(a1 + 32);
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_p = (stat *)operator new(v8 + 1);
    __p.st_ino = v4 + 1;
    *(void *)&__p.st_uid = v9 | 0x8000000000000000;
    *(void *)&__p.st_dev = p_p;
    goto LABEL_19;
  }
  memset(&__p, 0, 24);
  p_p = &__p;
  HIBYTE(__p.st_gid) = v4 + 1;
  if (v4)
  {
LABEL_19:
    if (v3 >= 0) {
      uint64_t v10 = (const void *)(a1 + 24);
    }
    else {
      uint64_t v10 = *(const void **)(a1 + 24);
    }
    memmove(p_p, v10, v4);
  }
  *(_WORD *)((char *)&p_p->st_dev + v4) = 47;
  if ((v2 & 0x80u) == 0) {
    uint64_t v11 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a1;
  }
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v12 = v2;
  }
  else {
    std::string::size_type v12 = *(void *)(a1 + 8);
  }
  int v13 = std::string::append((std::string *)&__p, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v20 = v13->__r_.__value_.__r.__words[2];
  long long v19 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  if (v20 >= 0) {
    uint64_t v15 = (const char *)&v19;
  }
  else {
    uint64_t v15 = (const char *)v19;
  }
  if (stat(v15, &__p)) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = (__p.st_mode & 0xF000) == 0x4000;
  }
  uint64_t v7 = v16;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  return v7;
}

uint64_t sub_524DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  long long v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v10 = a1[47];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1[47];
  }
  else {
    uint64_t v11 = *((void *)a1 + 4);
  }
  uint64_t v12 = v6[47];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)v6 + 4);
  }
  if (v11 != v12) {
    return 0;
  }
  long long v14 = (const void **)(a1 + 24);
  uint64_t v17 = (unsigned __int8 *)*((void *)v6 + 3);
  BOOL v16 = v6 + 24;
  uint64_t v15 = v17;
  if (v13 >= 0) {
    int8x8_t v18 = v16;
  }
  else {
    int8x8_t v18 = v15;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*v14, v18, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v19 = v10 - 1;
  do
  {
    int v21 = *(unsigned __int8 *)v14;
    long long v14 = (const void **)((char *)v14 + 1);
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

void sub_52628(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (*((char *)a2 + 23) >= 0) {
    int v5 = (const char *)a2;
  }
  else {
    int v5 = *(const char **)a2;
  }
  opendir(v5);
  operator new();
}

void sub_52930()
{
}

void sub_52958(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_52968(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x52974);
  }
  sub_58CC(a1);
}

uint64_t sub_52984(uint64_t a1)
{
  uint64_t v2 = *(DIR **)a1;
  if (!v2) {
    return a1 + 40;
  }
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(void *)(a1 + 48)) {
      return a1 + 40;
    }
  }
  else if (!*(unsigned char *)(a1 + 63))
  {
    return a1 + 40;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      return a1 + 40;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
    return a1 + 40;
  }
  uint64_t v3 = readdir(v2);
  long long v4 = v3;
  if (!v3)
  {
    uint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
    memset(&v20[2], 0, 15);
    v20[0] = 0;
    *(void *)((char *)v20 + 7) = 0;
    if (*(char *)(a1 + 63) < 0) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  size_t v5 = strlen(v3->d_name);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v12 = v5 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = operator new(v12 + 1);
    *(void *)&long long v19 = v6;
    *((void *)&v19 + 1) = v13 | 0x8000000000000000;
    __dst = p_dst;
LABEL_21:
    memmove(p_dst, v4->d_name, v6);
    *((unsigned char *)p_dst + v6) = 0;
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  HIBYTE(v19) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_21;
  }
  LOBYTE(__dst) = 0;
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
LABEL_15:
    *(_OWORD *)stat __p = *(_OWORD *)(a1 + 16);
    __p[2] = *(void **)(a1 + 32);
    goto LABEL_23;
  }
LABEL_22:
  sub_4200(__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
LABEL_23:
  uint64_t v8 = __dst;
  v20[2] = v19;
  *(void *)((char *)&v20[2] + 7) = *(void *)((char *)&v19 + 7);
  char v9 = HIBYTE(v19);
  uint64_t v10 = __p[0];
  v20[0] = __p[1];
  *(void **)((char *)v20 + 7) = *(void **)((char *)&__p[1] + 7);
  char v11 = HIBYTE(__p[2]);
  memset(__p, 0, 24);
  if (*(char *)(a1 + 63) < 0) {
LABEL_24:
  }
    operator delete(*(void **)(a1 + 40));
LABEL_25:
  uint64_t v14 = v20[2];
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 55) = *(void *)((char *)&v20[2] + 7);
  *(unsigned char *)(a1 + 63) = v9;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v15 = v20[0];
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 79) = *(void *)((char *)v20 + 7);
  *(unsigned char *)(a1 + 87) = v11;
  if (v4 && SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1 + 40;
}

void sub_52BA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_52BB4(uint64_t a1, long long *a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  sub_53430((void *)a1, a2);
}

void sub_52BFC(_Unwind_Exception *exception_object)
{
  if (*v1)
  {
    sub_53270((uint64_t)v1, *v1);
    operator delete((void *)*v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_52C20(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2550840))
  {
    xmmword_2550848[2] = 0u;
    xmmword_2550848[1] = 0u;
    xmmword_2550848[0] = 0u;
    __cxa_guard_release(&qword_2550840);
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = v2 - *(void *)a1;
  if (v2 != *(void *)a1)
  {
    int v4 = sub_52324(v2 - 56);
    uint64_t v2 = *(void *)(a1 + 8);
    if (v4)
    {
      if (*(char *)(v2 - 33) < 0)
      {
        sub_4200(__p, *(void **)(v2 - 56), *(void *)(v2 - 48));
        int v6 = SHIBYTE(v28);
        if ((SHIBYTE(v28) & 0x80000000) == 0)
        {
LABEL_6:
          if (v6 == 1)
          {
            if (LOBYTE(__p[0]) == 46)
            {
              uint64_t v7 = xmmword_2550848;
              goto LABEL_25;
            }
          }
          else if (v6 == 2 && LOWORD(__p[0]) == 11822)
          {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
      else
      {
        long long v5 = *(_OWORD *)(v2 - 56);
        uint64_t v28 = *(void *)(v2 - 40);
        *(_OWORD *)stat __p = v5;
        int v6 = SHIBYTE(v28);
        if ((SHIBYTE(v28) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      if (__p[1] == (char *)&def_332C + 1 && *(unsigned char *)__p[0] == 46
        || __p[1] == (char *)&def_332C + 2 && *(_WORD *)__p[0] == 11822)
      {
LABEL_23:
        uint64_t v7 = xmmword_2550848;
        if ((v6 & 0x80) != 0) {
          operator delete(__p[0]);
        }
LABEL_25:
        uint64_t v8 = *(void *)a1;
        uint64_t v2 = *(void *)(a1 + 8);
        if (v2 == *(void *)a1 || v3 != v2 - *(void *)a1) {
          goto LABEL_60;
        }
LABEL_30:
        uint64_t v7 = (_OWORD *)sub_52984(v2 - 96);
        goto LABEL_59;
      }
LABEL_22:
      if ((*(_DWORD *)(v2 - 8) + 1) > *(_DWORD *)(a1 + 24)) {
        goto LABEL_23;
      }
      int v11 = *(char *)(v2 - 9);
      if (v11 >= 0) {
        size_t v12 = *(unsigned __int8 *)(v2 - 9);
      }
      else {
        size_t v12 = *(void *)(v2 - 24);
      }
      unint64_t v13 = v12 + 1;
      if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v13 >= 0x17)
      {
        uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v15 = v13 | 7;
        }
        uint64_t v16 = v15 + 1;
        p_dst = (std::string *)operator new(v15 + 1);
        __dst.__r_.__value_.__l.__size_ = v12 + 1;
        __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
        if (!v12) {
          goto LABEL_45;
        }
      }
      if (v11 >= 0) {
        uint64_t v17 = (const void *)(v2 - 32);
      }
      else {
        uint64_t v17 = *(const void **)(v2 - 32);
      }
      memmove(p_dst, v17, v12);
LABEL_45:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 47;
      if (v6 >= 0) {
        int8x8_t v18 = __p;
      }
      else {
        int8x8_t v18 = (void **)__p[0];
      }
      if (v6 >= 0) {
        std::string::size_type v19 = v6;
      }
      else {
        std::string::size_type v19 = (std::string::size_type)__p[1];
      }
      int v20 = std::string::append(&__dst, (const std::string::value_type *)v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)BOOL v25 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      unint64_t v22 = *(void *)(a1 + 8);
      if (v22 < *(void *)(a1 + 16)) {
        sub_52628(v22, (long long *)v25);
      }
      sub_53430((void *)a1, (long long *)v25);
    }
  }
  uint64_t v7 = xmmword_2550848;
  uint64_t v8 = *(void *)a1;
  if (v2 != *(void *)a1 && v3 == v2 - *(void *)a1) {
    goto LABEL_30;
  }
LABEL_60:
  while (v8 != v2)
  {
    if (*(void *)(v2 - 96))
    {
      if (*(char *)(v2 - 33) < 0)
      {
        if (!*(void *)(v2 - 48)) {
          goto LABEL_68;
        }
      }
      else if (!*(unsigned char *)(v2 - 33))
      {
        goto LABEL_68;
      }
      if (*(char *)(v2 - 9) < 0)
      {
        if (*(void *)(v2 - 24)) {
          return v7;
        }
      }
      else if (*(unsigned char *)(v2 - 9))
      {
        return v7;
      }
    }
LABEL_68:
    sub_53270(a1, v2 - 96);
LABEL_59:
    uint64_t v8 = *(void *)a1;
    uint64_t v2 = *(void *)(a1 + 8);
  }
  return v7;
}

uint64_t sub_53034(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 96 * a2;
}

void sub_53184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_53264(uint64_t a1)
{
  return *(void *)(a1 + 8) - 56;
}

void sub_53270(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 96)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 33) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 57) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 56));
    if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
LABEL_7:
      long long v5 = *(std::__shared_weak_count **)(i - 88);
      if (v5) {
        goto LABEL_12;
      }
      continue;
    }
LABEL_11:
    operator delete(*(void **)(i - 80));
    long long v5 = *(std::__shared_weak_count **)(i - 88);
    if (v5)
    {
LABEL_12:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *(void *)(a1 + 8) = a2;
}

void sub_53360(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

DIR *sub_53398(uint64_t a1)
{
  uint64_t result = *(DIR **)(a1 + 24);
  if (result) {
    return (DIR *)closedir(result);
  }
  return result;
}

uint64_t sub_533BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl6common17DirectoryIteratorC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3msl6common17DirectoryIteratorC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9al"
                                "locatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl6common17DirectoryIteratorC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl6common17DirectoryIteratorC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_53430(void *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x2AAAAAAAAAAAAAALL)
  {
    if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v3) {
      unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555) {
      unint64_t v5 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      int v6 = operator new(96 * v5);
    }
    else
    {
      int v6 = 0;
    }
    sub_52628((uint64_t)v6 + 96 * v2, a2);
  }
  sub_2E00();
}

unint64_t sub_53678(uint64_t a1)
{
  if (sub_511FC(a1) < 2) {
    return a1 << 32;
  }
  unsigned int v3 = sub_511FC(a1);
  unsigned int v4 = v3 >> 1;
  char v5 = v3 & 0xFE;
  unsigned int v6 = a1 & ~(-1 << (v3 & 0xFE));
  int v7 = sub_51938(v6);
  int v8 = sub_51938(v6 >> 1);
  unsigned int v9 = (int)((((((v8 & ~(v8 >> 31)) - v8 + (v8 >> 31)) >> v4) + (v8 >> 31)) << v4) + v8)
     % (1 << v4);
  int v10 = -1 << v4;
  unsigned int v11 = ~(-1 << v4);
  if (v11 < (int)(((((((v7 + 1) >> 31) + ~v7 + ((v7 + 1) & ~((v7 + 1) >> 31))) >> v4)
                   + ((v7 + 1) >> 31)) << v4)
                 + v7
                 + 1)
           % (1 << v4))
    unsigned int v12 = ~v10;
  else {
    unsigned int v12 = (int)(((((((v7 + 1) >> 31) + ~v7 + ((v7 + 1) & ~((v7 + 1) >> 31))) >> v4)
  }
                + ((v7 + 1) >> 31)) << v4)
              + v7
              + 1)
        % (1 << v4);
  if (v11 < v9) {
    unsigned int v13 = ~v10;
  }
  else {
    unsigned int v13 = v9;
  }
  sub_518C8(v12, v13);
  return ((unint64_t)(v14 | (1 << v5)) << 32) | 3;
}

uint64_t sub_5378C(uint64_t a1)
{
  return a1 << 32;
}

uint64_t sub_53794(uint64_t a1)
{
  return a1;
}

void sub_537BC(uint64_t a1)
{
  unsigned int v2 = sub_511FC(*(_DWORD *)(a1 + 4));
  switch(*(unsigned char *)a1)
  {
    case 1:
      unsigned int v3 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v4 = v3 >> 1;
      char v5 = v3 & 0xFE;
      unsigned int v6 = *(_DWORD *)(a1 + 4) & ~(-1 << (v3 & 0xFE));
      int v7 = sub_51938(v6);
      int v8 = sub_51938(v6 >> 1);
      unsigned int v9 = (int)((((((v8 & ~(v8 >> 31)) - v8 + (v8 >> 31)) >> v4) + (v8 >> 31)) << v4) + v8)
         % (1 << v4);
      int v10 = -1 << v4;
      unsigned int v11 = ~(-1 << v4);
      if (v11 < (int)(((((((v7 + 1) >> 31) + ~v7 + ((v7 + 1) & ~((v7 + 1) >> 31))) >> v4)
                       + ((v7 + 1) >> 31)) << v4)
                     + v7
                     + 1)
               % (1 << v4))
        unsigned int v12 = ~v10;
      else {
        unsigned int v12 = (int)(((((((v7 + 1) >> 31) + ~v7 + ((v7 + 1) & ~((v7 + 1) >> 31))) >> v4)
      }
                    + ((v7 + 1) >> 31)) << v4)
                  + v7
                  + 1)
            % (1 << v4);
      if (v11 < v9) {
        unsigned int v13 = ~v10;
      }
      else {
        unsigned int v13 = v9;
      }
      sub_518C8(v12, v13);
      int v15 = v14 | (1 << v5);
      char v16 = 5;
      break;
    case 2:
      unsigned int v17 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v18 = v17 >> 1;
      char v19 = v17 & 0xFE;
      unsigned int v20 = *(_DWORD *)(a1 + 4) & ~(-1 << (v17 & 0xFE));
      int v21 = sub_51938(v20);
      int v22 = sub_51938(v20 >> 1);
      unsigned int v23 = (int)((((((v22 & ~(v22 >> 31)) - v22 + (v22 >> 31)) >> v18) + (v22 >> 31)) << v18)
                + v22)
          % (1 << v18);
      int v24 = -1 << v18;
      unsigned int v25 = ~(-1 << v18);
      if (v25 < (int)(((((((v21 - 1) & ~((v21 - 1) >> 31)) - v21 + ((v21 - 1) >> 31) + 1) >> v18)
                       + ((v21 - 1) >> 31)) << v18)
                     + v21
                     - 1)
               % (1 << v18))
        unsigned int v26 = ~v24;
      else {
        unsigned int v26 = (int)(((((((v21 - 1) & ~((v21 - 1) >> 31)) - v21 + ((v21 - 1) >> 31) + 1) >> v18)
      }
                    + ((v21 - 1) >> 31)) << v18)
                  + v21
                  - 1)
            % (1 << v18);
      if (v25 < v23) {
        unsigned int v27 = ~v24;
      }
      else {
        unsigned int v27 = v23;
      }
      sub_518C8(v26, v27);
      int v15 = v28 | (1 << v19);
      char v16 = 7;
      break;
    case 3:
      unsigned int v29 = v2 >> 1;
      char v30 = sub_511FC(*(_DWORD *)(a1 + 4));
      int v31 = sub_51938((*(_DWORD *)(a1 + 4) & ~(-1 << (v30 & 0xFE))) >> 1) + 1;
      int v32 = 1 << v29;
      unsigned int v33 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v34 = v33 >> 1;
      char v35 = v33 & 0xFE;
      unsigned int v36 = *(_DWORD *)(a1 + 4) & ~(-1 << (v33 & 0xFE));
      int v37 = sub_51938(v36);
      int v38 = sub_51938(v36 >> 1);
      int v39 = 1 << v34;
      if (v31 == v32)
      {
        unsigned int v40 = (int)(((((((v37 - 2) & ~((v37 - 2) >> 31)) - v37 + ((v37 - 2) >> 31) + 2) >> v34)
                    + ((v37 - 2) >> 31)) << v34)
                  + v37
                  - 2)
            % v39;
        unsigned int v41 = (int)((((((v38 & ~(v38 >> 31)) - v38 + (v38 >> 31)) >> v34) + (v38 >> 31)) << v34)
                  + v38)
            % v39;
        int v42 = -1 << v34;
        unsigned int v43 = ~(-1 << v34);
        if (v43 < v40) {
          unsigned int v44 = ~v42;
        }
        else {
          unsigned int v44 = v40;
        }
        if (v43 < v41) {
          unsigned int v45 = ~v42;
        }
        else {
          unsigned int v45 = v41;
        }
        int v46 = 1 << v35;
LABEL_53:
        sub_518C8(v44, v45);
        int v15 = v96 | v46;
        char v16 = 4;
      }
      else
      {
        unsigned int v109 = (int)((((((v37 & ~(v37 >> 31)) - v37 + (v37 >> 31)) >> v34) + (v37 >> 31)) << v34)
                   + v37)
             % v39;
        unsigned int v110 = (int)(((((((v38 + 1) >> 31) + ~v38 + ((v38 + 1) & ~((v38 + 1) >> 31))) >> v34)
                     + ((v38 + 1) >> 31)) << v34)
                   + v38
                   + 1)
             % v39;
        int v111 = -1 << v34;
        unsigned int v112 = ~(-1 << v34);
        if (v112 < v109) {
          unsigned int v113 = ~v111;
        }
        else {
          unsigned int v113 = v109;
        }
        if (v112 < v110) {
          unsigned int v114 = ~v111;
        }
        else {
          unsigned int v114 = v110;
        }
        sub_518C8(v113, v114);
        int v15 = v115 | (1 << v35);
        char v16 = 6;
      }
      break;
    case 4:
      char v47 = sub_511FC(*(_DWORD *)(a1 + 4));
      int v48 = sub_51938((*(_DWORD *)(a1 + 4) & ~(-1 << (v47 & 0xFE))) >> 1);
      unsigned int v49 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v50 = v49 >> 1;
      char v51 = v49 & 0xFE;
      unsigned int v52 = *(_DWORD *)(a1 + 4) & ~(-1 << (v49 & 0xFE));
      int v53 = sub_51938(v52);
      int v54 = sub_51938(v52 >> 1);
      int v55 = 1 << v50;
      if (v48)
      {
        unsigned int v56 = (int)((((((v53 & ~(v53 >> 31)) - v53 + (v53 >> 31)) >> v50) + (v53 >> 31)) << v50)
                  + v53)
            % v55;
        unsigned int v57 = (int)(((((((v54 - 1) & ~((v54 - 1) >> 31)) - v54 + ((v54 - 1) >> 31) + 1) >> v50)
                    + ((v54 - 1) >> 31)) << v50)
                  + v54
                  - 1)
            % v55;
        int v58 = -1 << v50;
        unsigned int v59 = ~(-1 << v50);
        if (v59 < v56) {
          unsigned int v60 = ~v58;
        }
        else {
          unsigned int v60 = v56;
        }
        if (v59 < v57) {
          unsigned int v61 = ~v58;
        }
        else {
          unsigned int v61 = v57;
        }
        sub_518C8(v60, v61);
        int v15 = v62 | (1 << v51);
        char v16 = 8;
      }
      else
      {
        unsigned int v116 = (int)(((((((v53 + 1) >> 31) + ~v53 + ((v53 + 1) & ~((v53 + 1) >> 31))) >> v50)
                     + ((v53 + 1) >> 31)) << v50)
                   + v53
                   + 1)
             % v55;
        unsigned int v117 = (int)((((((v54 & ~(v54 >> 31)) - v54 + (v54 >> 31)) >> v50) + (v54 >> 31)) << v50)
                   + v54)
             % v55;
        int v118 = -1 << v50;
        unsigned int v119 = ~(-1 << v50);
        if (v119 < v116) {
          unsigned int v72 = ~v118;
        }
        else {
          unsigned int v72 = v116;
        }
        if (v119 < v117) {
          unsigned int v73 = ~v118;
        }
        else {
          unsigned int v73 = v117;
        }
        int v74 = 1 << v51;
LABEL_75:
        sub_518C8(v72, v73);
        char v16 = 0;
LABEL_76:
        int v15 = v108 | v74;
      }
      break;
    case 5:
      unsigned int v63 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v64 = v63 >> 1;
      char v65 = v63 & 0xFE;
      unsigned int v66 = *(_DWORD *)(a1 + 4) & ~(-1 << (v63 & 0xFE));
      int v67 = sub_51938(v66);
      int v68 = sub_51938(v66 >> 1);
      unsigned int v69 = (int)(((((((v68 + 1) >> 31) + ~v68 + ((v68 + 1) & ~((v68 + 1) >> 31))) >> v64)
                  + ((v68 + 1) >> 31)) << v64)
                + v68
                + 1)
          % (1 << v64);
      int v70 = -1 << v64;
      unsigned int v71 = ~(-1 << v64);
      if (v71 < (int)(((((((v67 - 1) & ~((v67 - 1) >> 31)) - v67 + ((v67 - 1) >> 31) + 1) >> v64)
                       + ((v67 - 1) >> 31)) << v64)
                     + v67
                     - 1)
               % (1 << v64))
        unsigned int v72 = ~v70;
      else {
        unsigned int v72 = (int)(((((((v67 - 1) & ~((v67 - 1) >> 31)) - v67 + ((v67 - 1) >> 31) + 1) >> v64)
      }
                    + ((v67 - 1) >> 31)) << v64)
                  + v67
                  - 1)
            % (1 << v64);
      if (v71 < v69) {
        unsigned int v73 = ~v70;
      }
      else {
        unsigned int v73 = v69;
      }
      int v74 = 1 << v65;
      goto LABEL_75;
    case 6:
      unsigned int v75 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v76 = v75 >> 1;
      char v77 = v75 & 0xFE;
      unsigned int v78 = *(_DWORD *)(a1 + 4) & ~(-1 << (v75 & 0xFE));
      int v79 = sub_51938(v78);
      int v80 = sub_51938(v78 >> 1);
      unsigned int v81 = (int)((((((v80 & ~(v80 >> 31)) - v80 + (v80 >> 31)) >> v76) + (v80 >> 31)) << v76)
                + v80)
          % (1 << v76);
      int v82 = -1 << v76;
      unsigned int v83 = ~(-1 << v76);
      if (v83 < (int)(((((((v79 - 1) & ~((v79 - 1) >> 31)) - v79 + ((v79 - 1) >> 31) + 1) >> v76)
                       + ((v79 - 1) >> 31)) << v76)
                     + v79
                     - 1)
               % (1 << v76))
        unsigned int v84 = ~v82;
      else {
        unsigned int v84 = (int)(((((((v79 - 1) & ~((v79 - 1) >> 31)) - v79 + ((v79 - 1) >> 31) + 1) >> v76)
      }
                    + ((v79 - 1) >> 31)) << v76)
                  + v79
                  - 1)
            % (1 << v76);
      if (v83 < v81) {
        unsigned int v85 = ~v82;
      }
      else {
        unsigned int v85 = v81;
      }
      sub_518C8(v84, v85);
      int v15 = v86 | (1 << v77);
      char v16 = 2;
      break;
    case 7:
      unsigned int v87 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v88 = v87 >> 1;
      char v89 = v87 & 0xFE;
      unsigned int v90 = *(_DWORD *)(a1 + 4) & ~(-1 << (v87 & 0xFE));
      int v91 = sub_51938(v90);
      int v92 = sub_51938(v90 >> 1);
      unsigned int v93 = (int)(((((((v92 - 1) & ~((v92 - 1) >> 31)) - v92 + ((v92 - 1) >> 31) + 1) >> v88)
                  + ((v92 - 1) >> 31)) << v88)
                + v92
                - 1)
          % (1 << v88);
      int v94 = -1 << v88;
      unsigned int v95 = ~(-1 << v88);
      if (v95 < (int)((((((v91 & ~(v91 >> 31)) - v91 + (v91 >> 31)) >> v88) + (v91 >> 31)) << v88)
                     + v91)
               % (1 << v88))
        unsigned int v44 = ~v94;
      else {
        unsigned int v44 = (int)((((((v91 & ~(v91 >> 31)) - v91 + (v91 >> 31)) >> v88) + (v91 >> 31)) << v88)
      }
                  + v91)
            % (1 << v88);
      if (v95 < v93) {
        unsigned int v45 = ~v94;
      }
      else {
        unsigned int v45 = v93;
      }
      int v46 = 1 << v89;
      goto LABEL_53;
    case 8:
      unsigned int v97 = sub_511FC(*(_DWORD *)(a1 + 4));
      unsigned int v98 = v97 >> 1;
      char v99 = v97 & 0xFE;
      unsigned int v100 = *(_DWORD *)(a1 + 4) & ~(-1 << (v97 & 0xFE));
      int v101 = sub_51938(v100);
      int v102 = sub_51938(v100 >> 1);
      char v16 = 1;
      unsigned int v103 = (int)((((((v102 & ~(v102 >> 31)) - v102 + (v102 >> 31)) >> v98) + (v102 >> 31)) << v98)
                 + v102)
           % (1 << v98);
      int v104 = -1 << v98;
      unsigned int v105 = ~(-1 << v98);
      if (v105 < (int)(((((((v101 + 1) >> 31) + ~v101 + ((v101 + 1) & ~((v101 + 1) >> 31))) >> v98)
                        + ((v101 + 1) >> 31)) << v98)
                      + v101
                      + 1)
                % (1 << v98))
        unsigned int v106 = ~v104;
      else {
        unsigned int v106 = (int)(((((((v101 + 1) >> 31) + ~v101 + ((v101 + 1) & ~((v101 + 1) >> 31))) >> v98)
      }
                     + ((v101 + 1) >> 31)) << v98)
                   + v101
                   + 1)
             % (1 << v98);
      if (v105 < v103) {
        unsigned int v107 = ~v104;
      }
      else {
        unsigned int v107 = v103;
      }
      int v74 = 1 << v99;
      sub_518C8(v106, v107);
      goto LABEL_76;
    default:
      return;
  }
  *(_DWORD *)(a1 + 4) = v15;
  *(unsigned char *)a1 = v16;
}

uint64_t sub_53FA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

BOOL sub_53FAC(unsigned __int8 *a1, uint64_t a2)
{
  return *((_DWORD *)a1 + 1) != HIDWORD(a2) || *a1 != a2;
}

void sub_53FD4(unsigned int (****a1)(void)@<X0>, uint64_t a2@<X8>)
{
  sub_6BAC((uint64_t)v7);
  sub_1120084(v7, a1);
  std::stringbuf::str();
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_5EC80((uint64_t)&v5, &v9);
  if (v10 != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214(a2, v9);
  sub_5521C((uint64_t *)v10, &v9);
  if (v6 < 0) {
    operator delete(v5);
  }
}

void sub_541C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_54200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_54214(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = (void *)(a2 + 16); ; sub_5456C(a1, (uint64_t)(i + 2), (uint64_t)(i + 2)))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  return a1;
}

void sub_54330(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

void sub_54344(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_54358(uint64_t a1)
{
  return a1;
}

void sub_54390(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_543C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = (void *)(a2 + 16); ; sub_5456C(a1, i + 2, i + 2))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  return a1;
}

void sub_544E4(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

void sub_544F8(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5450C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v3 = (void *)*v2;
      sub_550B8((uint64_t)(v2 + 2));
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_5456C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unsigned int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unsigned int v25 = operator new(0x38uLL);
  unsigned int v26 = v25;
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *unsigned int v25 = 0;
  v25[1] = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v25 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v25 + 1) = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  sub_54C28((uint64_t)(v26 + 5), a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unsigned int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unsigned int v29 = *(void **)(*(void *)a1 + 8 * v10);
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      unsigned int v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      char v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *char v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  unsigned int v29 = *(void **)(*(void *)a1 + 8 * v3);
  char v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *char v30 = *v29;
  *unsigned int v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_549C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_549D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_549E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_54A10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_55198(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_54A68(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      operator new();
    case 1:
      *(void *)uint64_t result = *(void *)a2;
      break;
    case 2:
      operator new();
    case 3:
      operator new();
    default:
      return result;
  }
  return result;
}

void sub_54BAC()
{
}

void sub_54BD0()
{
}

void sub_54BF4()
{
}

uint64_t sub_54C28(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      operator new();
    case 1:
      *(void *)uint64_t result = *(void *)a2;
      break;
    case 2:
      operator new();
    case 3:
      operator new();
    default:
      return result;
  }
  return result;
}

void sub_54D6C()
{
}

void sub_54D90()
{
}

void sub_54DB4()
{
}

void *sub_54DE8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int8x8_t v5 = result;
    if (a4 >> 60) {
      sub_2E00();
    }
    uint64_t result = operator new(16 * a4);
    *int8x8_t v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (uint64_t i = result; a2 != a3; i += 2)
    {
      sub_54A68((uint64_t)result, a2);
      a2 += 16;
      uint64_t result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_54EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_54ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_54F80((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_54EEC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_54EEC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (uint64_t *)**result;
    if (v3)
    {
      unsigned int v4 = (uint64_t *)v2[1];
      int8x8_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          BOOL v6 = v4 - 2;
          sub_5521C((uint64_t *)*((unsigned int *)v4 - 2), v4 - 2);
          unsigned int v4 = v6;
        }
        while (v6 != v3);
        int8x8_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_54F80(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = **(uint64_t ***)(a1 + 16);
    unsigned int v4 = **(uint64_t ***)(a1 + 8);
    while (v3 != v4)
    {
      int8x8_t v5 = (uint64_t *)*((unsigned int *)v3 - 2);
      v3 -= 2;
      sub_5521C(v5, v3);
    }
  }
  return a1;
}

void sub_54FE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int8x8_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_54358(v4 - 16);
      while ((void *)v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_55064(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (i = *(void *)(result + 8); i != a2; uint64_t result = sub_5521C(v5, i))
  {
    uint64_t v5 = *(unsigned int *)(i - 8);
    i -= 16;
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void sub_550B8(uint64_t a1)
{
  sub_55198(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_55108(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_55154(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_55108((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_55198(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)(a1 + 8);
  if (v2 != 1)
  {
    if (v2)
    {
      sub_552D8(v2, (uint64_t **)a1);
    }
    else
    {
      uint64_t v3 = *(uint64_t **)a1;
      *(void *)a1 = 0;
      if (v3)
      {
        if (*((char *)v3 + 23) < 0) {
          operator delete((void *)*v3);
        }
        operator delete();
      }
    }
  }
  return a1;
}

uint64_t *sub_5521C(uint64_t *result, uint64_t *a2)
{
  switch(result)
  {
    case 3:
      return (uint64_t *)sub_55400(a2);
    case 2:
      return sub_552FC(a2);
    case 0:
      uint64_t v2 = *a2;
      *a2 = 0;
      if (v2)
      {
        if (*(char *)(v2 + 23) < 0) {
          operator delete(*(void **)v2);
        }
        operator delete();
      }
      break;
  }
  return result;
}

uint64_t *sub_552D8(uint64_t *result, uint64_t **a2)
{
  if (result == 3) {
    return (uint64_t *)sub_55404(a2);
  }
  if (result == 2) {
    return sub_55328((uint64_t *)a2);
  }
  return result;
}

uint64_t *sub_552FC(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_55328(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_553C0();
    operator delete();
  }
  return a1;
}

uint64_t sub_55370(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_553C4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_553C4(uint64_t a1)
{
  sub_55154(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_55404(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_55484((uint64_t)a1, v2);
  }
  return a1;
}

void ***sub_5543C(void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_554C8(v2);
    operator delete();
  }
  return a1;
}

void sub_55484(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    sub_55500(a2);
    operator delete();
  }
}

void **sub_554C8(void **a1)
{
  uint64_t v3 = a1;
  sub_54FE0(&v3);
  return a1;
}

uint64_t *sub_55500(uint64_t *a1)
{
  if (*a1)
  {
    sub_55064((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_5553C(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(unsigned char *)(a1 + 80) = 0;
  char v2 = 4;
  strcpy(__p, "type");
  operator new();
}

void sub_556D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_55758(uint64_t **a1)
{
  char v2 = *a1;
  if (*a1)
  {
    for (uint64_t i = a1[1]; i != v2; sub_5521C(v4, i))
    {
      uint64_t v4 = (uint64_t *)*((unsigned int *)i - 2);
      i -= 2;
    }
    a1[1] = v2;
    operator delete(*a1);
  }
  return a1;
}

void sub_557C0(void *a1)
{
  if (a1[8])
  {
    char v5 = 8;
    strcpy((char *)__p, "features");
    uint64_t v1 = (void *)sub_55BE4(a1, (uint64_t)__p);
    if (v1[1] < v1[2]) {
      operator new();
    }
    sub_582A0(v1);
  }
  char v3 = 4;
  strcpy(v2, "type");
  __p[0] = (void *)v6[0];
  *(void **)((char *)__p + 7) = *(void **)((char *)v6 + 7);
  v6[0] = 0;
  *(void *)((char *)v6 + 7) = 0;
  operator new();
}

void sub_55B04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t sub_55BE4(void *a1, uint64_t a2)
{
  char v2 = sub_57E40(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2[5];
}

void sub_55C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_55CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[23] = 10;
  strcpy(v5, "properties");
  sub_55FA4((void *)(a1 + 40), (uint64_t)v5);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v6, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v6 = *(_OWORD *)a3;
    void v6[2] = *(void **)(a3 + 16);
  }
  v9[0] = v6[1];
  *(void **)((char *)v9 + 7) = *(void **)((char *)&v6[1] + 7);
  memset(v6, 0, 24);
  operator new();
}

void sub_55EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    unint64_t v33 = a11;
    if (!a11) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v33 = a11;
    if (!a11) {
      goto LABEL_5;
    }
  }
  do
  {
    unsigned int v34 = *(char **)v33;
    sub_57AC8((uint64_t *)v33 + 5);
    if (v33[39] < 0) {
      operator delete(*((void **)v33 + 2));
    }
    operator delete(v33);
    unint64_t v33 = v34;
  }
  while (v34);
LABEL_5:
  if (a9) {
    operator delete(a9);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_55FA4(void *a1, uint64_t a2)
{
  char v2 = sub_57E40(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2[5];
}

void sub_56030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_56060(uint64_t a1, uint64_t a2)
{
  char v2[23] = 5;
  strcpy(v2, "color");
  sub_55CA0(a1, (uint64_t)v2, a2);
}

void sub_560A4(uint64_t a1, uint64_t a2)
{
  char v2[23] = 12;
  strcpy(v2, "popupContent");
  sub_55CA0(a1, (uint64_t)v2, a2);
}

uint64_t sub_560F4(void *a1, uint64_t a2)
{
  char v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2[5];
}

void sub_56180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_561B0(void *a1, uint64_t a2)
{
  char v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2[5];
}

void sub_56238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_56268(uint64_t a1)
{
  char v10 = 8;
  strcpy((char *)&v9, "geometry");
  uint64_t v1 = (void *)sub_55FA4((void *)(a1 + 40), (uint64_t)&v9);
  if (v10 < 0) {
    operator delete((void *)v9);
  }
  if (v1[3])
  {
    char v2 = (char *)v1[2];
    if (v2)
    {
      do
      {
        char v5 = *(char **)v2;
        sub_57AC8((uint64_t *)v2 + 5);
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        char v2 = v5;
      }
      while (v5);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  char v7 = 4;
  strcpy(__p, "type");
  *(void *)&long long v9 = v8[0];
  *(void *)((char *)&v9 + 7) = *(void *)((char *)v8 + 7);
  v8[0] = 0;
  *(void *)((char *)v8 + 7) = 0;
  operator new();
}

void sub_564F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

unint64_t sub_56598@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X8>, unint64_t a4@<D0>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  LODWORD(a4) = *a2;
  double v14 = (double)a4 * 360.0 / 4294967300.0 + -180.0;
  unint64_t v7 = sub_58BC8(a3, &v14);
  unint64_t v8 = a3[2];
  a3[1] = v7;
  LODWORD(v9) = a2[1];
  long double v10 = exp((double)v9 * -6.28318531 / 4294967300.0 + 3.14159265);
  double v11 = atan((v10 + -1.0 / v10) * 0.5) * 57.2957795;
  double v14 = v11;
  if (v7 >= v8)
  {
    unint64_t result = sub_58BC8(a3, &v14);
  }
  else
  {
    *(double *)unint64_t v7 = v11;
    *(_DWORD *)(v7 + 8) = 1;
    unint64_t result = v7 + 16;
  }
  a3[1] = result;
  if (*(unsigned char *)(a1 + 80))
  {
    int v13 = a2[2];
    if (v13 != 0x7FFFFFFF)
    {
      double v14 = (double)v13 / 100.0;
      if (result >= a3[2])
      {
        unint64_t result = sub_58BC8(a3, &v14);
      }
      else
      {
        *(double *)unint64_t result = (double)v13 / 100.0;
        *(_DWORD *)(result + 8) = 1;
        result += 16;
      }
      a3[1] = result;
    }
  }
  return result;
}

void sub_56718(_Unwind_Exception *a1)
{
  sub_55758(v1);
  _Unwind_Resume(a1);
}

void sub_5672C(_Unwind_Exception *a1)
{
  sub_55758(v1);
  _Unwind_Resume(a1);
}

void sub_56740(_Unwind_Exception *a1)
{
  sub_55758(v1);
  _Unwind_Resume(a1);
}

void sub_56754(uint64_t a1)
{
  char v11 = 8;
  strcpy((char *)__p, "geometry");
  uint64_t v1 = (void *)sub_55FA4((void *)(a1 + 40), (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v1[3])
  {
    char v2 = (char *)v1[2];
    if (v2)
    {
      do
      {
        char v5 = *(char **)v2;
        sub_57AC8((uint64_t *)v2 + 5);
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        char v2 = v5;
      }
      while (v5);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  char v7 = 4;
  strcpy(v6, "type");
  __p[0] = v8;
  LODWORD(__p[1]) = v9;
  unint64_t v8 = 0;
  int v9 = 0;
  operator new();
}

void sub_56B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_56CAC(uint64_t a1, unint64_t a2)
{
  char v2 = *(uint64_t **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      sub_2E00();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 16 * a2;
    long long v6 = (char *)operator new(16 * a2);
    char v7 = &v6[v5];
    unint64_t v8 = &v6[v4 - (void)v2];
    if ((uint64_t *)v4 == v2)
    {
      long double v10 = v2;
      uint64_t v9 = (uint64_t)v8;
    }
    else
    {
      uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
      do
      {
        v4 -= 16;
        uint64_t v9 = sub_584A4(v9 - 16, v4);
      }
      while ((uint64_t *)v4 != v2);
      long double v10 = *(uint64_t **)a1;
      char v2 = *(uint64_t **)(a1 + 8);
    }
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    while (v2 != v10)
    {
      char v11 = (uint64_t *)*((unsigned int *)v2 - 2);
      v2 -= 2;
      sub_5521C(v11, v2);
    }
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_56DA0(uint64_t a1)
{
  char v11 = 8;
  strcpy((char *)&v10, "geometry");
  uint64_t v1 = (void *)sub_55FA4((void *)(a1 + 40), (uint64_t)&v10);
  if (v11 < 0) {
    operator delete((void *)v10);
  }
  if (v1[3])
  {
    char v2 = (char *)v1[2];
    if (v2)
    {
      do
      {
        uint64_t v5 = *(char **)v2;
        sub_57AC8((uint64_t *)v2 + 5);
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        char v2 = v5;
      }
      while (v5);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  char v7 = 4;
  strcpy(__p, "type");
  *(void *)&long long v10 = v8;
  DWORD2(v10) = v9;
  uint64_t v8 = 0;
  int v9 = 0;
  operator new();
}

void sub_57044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_570E4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_56CAC((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    sub_56598(a1, *(_DWORD **)a2, (uint64_t *)__p, v5);
    operator new();
  }
}

void sub_572F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16)
{
  sub_55758(v16);
  _Unwind_Resume(a1);
}

void sub_57370(uint64_t a1)
{
  char v10 = 8;
  strcpy((char *)__p, "geometry");
  uint64_t v1 = (void *)sub_55FA4((void *)(a1 + 40), (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v1[3])
  {
    char v2 = (char *)v1[2];
    if (v2)
    {
      do
      {
        unint64_t v5 = *(char **)v2;
        sub_57AC8((uint64_t *)v2 + 5);
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        char v2 = v5;
      }
      while (v5);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  char v8 = 4;
  strcpy(v7, "type");
  LODWORD(__p[0]) = v6[0];
  *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)v6 + 3);
  v6[0] = 0;
  *(_DWORD *)((char *)v6 + 3) = 0;
  operator new();
}

void sub_577C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_578D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[8])
  {
    char v9 = 8;
    strcpy((char *)__p, "geometry");
    uint64_t v4 = sub_58070(a1 + 5, (uint64_t)__p);
    unint64_t v5 = v4;
    if ((v9 & 0x80000000) == 0)
    {
      if (!v4) {
        return sub_54214(a2, (uint64_t)a1);
      }
LABEL_6:
      char v9 = 8;
      strcpy((char *)__p, "features");
      long long v6 = (void *)sub_55BE4(a1, (uint64_t)__p);
      if (v6[1] < v6[2]) {
        operator new();
      }
      sub_582A0(v6);
    }
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_6;
    }
  }
  return sub_54214(a2, (uint64_t)a1);
}

void sub_57A78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t *sub_57AC8(uint64_t *result)
{
  int v1 = *((_DWORD *)result + 2);
  switch(v1)
  {
    case 3:
      uint64_t v3 = (uint64_t **)*result;
      DIR *result = 0;
      if (!v3) {
        return result;
      }
      uint64_t v4 = *v3;
      if (*v3)
      {
        for (uint64_t i = v3[1]; i != v4; sub_5521C(v6, i))
        {
          long long v6 = (uint64_t *)*((unsigned int *)i - 2);
          i -= 2;
        }
        v3[1] = v4;
        operator delete(*v3);
      }
      goto LABEL_22;
    case 2:
      uint64_t v7 = *result;
      DIR *result = 0;
      if (!v7) {
        return result;
      }
      char v8 = *(void ***)(v7 + 16);
      if (v8)
      {
        do
        {
          char v10 = (void **)*v8;
          sub_57AC8(v8 + 5);
          if (*((char *)v8 + 39) < 0) {
            operator delete(v8[2]);
          }
          operator delete(v8);
          char v8 = v10;
        }
        while (v10);
      }
      char v9 = *(void **)v7;
      *(void *)uint64_t v7 = 0;
      if (v9) {
        operator delete(v9);
      }
LABEL_22:
      operator delete();
    case 0:
      uint64_t v2 = *result;
      DIR *result = 0;
      if (v2)
      {
        if (*(char *)(v2 + 23) < 0) {
          operator delete(*(void **)v2);
        }
        goto LABEL_22;
      }
      break;
  }
  return result;
}

uint64_t sub_57C08(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = *(char **)v2;
      int v6 = *((_DWORD *)v2 + 12);
      switch(v6)
      {
        case 3:
          uint64_t v12 = (void **)*((void *)v2 + 5);
          *((void *)v2 + 5) = 0;
          if (v12)
          {
            int v13 = (char *)*v12;
            if (*v12)
            {
              double v14 = (char *)v12[1];
              char v15 = *v12;
              if (v14 != v13)
              {
                do
                {
                  int v16 = *((_DWORD *)v14 - 2);
                  switch(v16)
                  {
                    case 3:
                      uint64_t v19 = (void **)*((void *)v14 - 2);
                      *((void *)v14 - 2) = 0;
                      if (v19)
                      {
                        uint64_t v20 = v19;
                        sub_54FE0(&v20);
                        goto LABEL_25;
                      }
                      break;
                    case 2:
                      uint64_t v18 = *((void *)v14 - 2);
                      *((void *)v14 - 2) = 0;
                      if (v18)
                      {
                        sub_57C08();
                        goto LABEL_25;
                      }
                      break;
                    case 0:
                      uint64_t v17 = *((void *)v14 - 2);
                      *((void *)v14 - 2) = 0;
                      if (v17)
                      {
                        if (*(char *)(v17 + 23) < 0) {
                          operator delete(*(void **)v17);
                        }
LABEL_25:
                        operator delete();
                      }
                      break;
                  }
                  v14 -= 16;
                }
                while (v14 != v13);
                char v15 = *v12;
              }
              v12[1] = v13;
              operator delete(v15);
            }
LABEL_39:
            operator delete();
          }
          break;
        case 2:
          uint64_t v8 = *((void *)v2 + 5);
          *((void *)v2 + 5) = 0;
          if (v8)
          {
            char v9 = *(char **)(v8 + 16);
            if (v9)
            {
              do
              {
                char v11 = *(char **)v9;
                sub_57AC8((uint64_t *)v9 + 5);
                if (v9[39] < 0) {
                  operator delete(*((void **)v9 + 2));
                }
                operator delete(v9);
                char v9 = v11;
              }
              while (v11);
            }
            char v10 = *(void **)v8;
            *(void *)uint64_t v8 = 0;
            if (v10) {
              operator delete(v10);
            }
            goto LABEL_39;
          }
          break;
        case 0:
          uint64_t v7 = *((void *)v2 + 5);
          *((void *)v2 + 5) = 0;
          if (v7)
          {
            if (*(char *)(v7 + 23) < 0) {
              operator delete(*(void **)v7);
            }
            goto LABEL_39;
          }
          break;
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_57E40(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_58070(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_582A0(void *a1)
{
  unint64_t v1 = ((uint64_t)(a1[1] - *a1) >> 4) + 1;
  if (!(v1 >> 60))
  {
    uint64_t v2 = a1[2] - *a1;
    if (v2 >> 3 > v1) {
      unint64_t v1 = v2 >> 3;
    }
    if ((unint64_t)v2 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v3 = v1;
    }
    if (v3)
    {
      if (v3 >> 60) {
        sub_188D718();
      }
      operator new(16 * v3);
    }
    operator new();
  }
  sub_2E00();
}

void sub_58408()
{
}

void sub_58434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5844C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5844C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    *(void *)(a1 + 16) = v3 - 16;
    sub_5521C((uint64_t *)*(unsigned int *)(v3 - 8), (uint64_t *)(v3 - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_584A4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    return a1;
  }
  else
  {
    if (!v3) {
      operator new();
    }
    sub_585A0(v3);
    return a1;
  }
}

void sub_58578()
{
}

uint64_t sub_585A0(uint64_t result)
{
  if (result == 3) {
    operator new();
  }
  if (result == 2) {
    operator new();
  }
  return result;
}

void sub_58640()
{
}

void sub_58664()
{
}

uint64_t *sub_58688(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 4;
  uint8x8_t v9 = (uint64_t *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v16 >> 60) {
      sub_2E00();
    }
    uint64_t v17 = v10 - (void)v5;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    int8x8_t v35 = a1 + 2;
    if (v18)
    {
      if (v18 >> 60) {
        sub_188D718();
      }
      uint64_t v19 = (char *)operator new(16 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    stat __p = v19;
    unint64_t v32 = (uint64_t *)&v19[16 * v8];
    unint64_t v33 = v32;
    unsigned int v34 = &v19[16 * v18];
    sub_588F4((uint64_t)&__p, a3);
    uint64_t v20 = v32;
    uint64_t v21 = *a1;
    uint64_t v22 = (uint64_t)v32;
    if ((uint64_t *)*a1 != v9)
    {
      uint64_t v22 = (uint64_t)v32;
      uint64_t v23 = (uint64_t)v9;
      do
      {
        v23 -= 16;
        uint64_t v22 = sub_584A4(v22 - 16, v23);
      }
      while (v23 != v21);
    }
    unint64_t v32 = (uint64_t *)v22;
    uint64_t v24 = (uint64_t *)a1[1];
    char v25 = v33;
    if (v24 != v9)
    {
      do
      {
        sub_584A4((uint64_t)v25, (uint64_t)v9);
        v9 += 2;
        v25 += 2;
      }
      while (v9 != v24);
      uint64_t v22 = (uint64_t)v32;
      uint8x8_t v9 = (uint64_t *)a1[1];
    }
    unsigned int v26 = (uint64_t *)*a1;
    *a1 = v22;
    a1[1] = (uint64_t)v25;
    float v27 = (char *)a1[2];
    a1[2] = (uint64_t)v34;
    unint64_t v33 = v9;
    unsigned int v34 = v27;
    stat __p = v26;
    unint64_t v32 = v26;
    while (1)
    {
      float v28 = v33;
      if (v33 == v26) {
        break;
      }
      v33 -= 2;
      sub_5521C((uint64_t *)*((unsigned int *)v28 - 2), v33);
    }
    if (__p) {
      operator delete(__p);
    }
    return v20;
  }
  else
  {
    if (v9 != (uint64_t *)v6)
    {
      char v11 = v9 + 2;
      uint64_t v12 = v6 - 16;
      if (v6 < 0x10)
      {
        a1[1] = v6;
        if ((uint64_t *)v6 == v11)
        {
LABEL_34:
          sub_58A78((uint64_t)v9, a3);
          return v9;
        }
      }
      else
      {
        unint64_t v13 = v6 - 16;
        uint64_t v14 = a1[1];
        do
        {
          uint64_t v15 = sub_584A4(v14, v13);
          v13 += 16;
          uint64_t v14 = v15 + 16;
        }
        while (v13 < v6);
        a1[1] = v14;
        if ((uint64_t *)v6 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v29 = 2 * ((uint64_t)(v6 - (void)v11) >> 4);
      do
      {
        sub_58A78(v12, (uint64_t)&v5[2 * v8 - 2 + v29]);
        v12 -= 16;
        v29 -= 2;
      }
      while (v29 * 8);
      goto LABEL_34;
    }
    sub_584A4((uint64_t)v9, a3);
    a1[1] = (uint64_t)(v9 + 2);
  }
  return v9;
}

void sub_588DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5844C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_588F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v4 == *(uint64_t **)(a1 + 24))
  {
    unint64_t v6 = *(uint64_t **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = v4 - v6;
      }
      if (v12 >> 60) {
        sub_188D718();
      }
      uint64_t v13 = 16 * v12;
      uint64_t v14 = (char *)operator new(16 * v12);
      uint64_t v15 = &v14[16 * (v12 >> 2)];
      unint64_t v16 = &v14[v13];
      uint64_t v17 = (uint64_t)v4 - v5;
      if (v4 == (uint64_t *)v5)
      {
        uint64_t v21 = v4;
        unint64_t v18 = v15;
      }
      else
      {
        unint64_t v18 = &v15[v17 & 0xFFFFFFFFFFFFFFF0];
        uint64_t v19 = 16 * (v17 >> 4);
        uint64_t v20 = (uint64_t)v15;
        do
        {
          uint64_t v20 = sub_584A4(v20, v5) + 16;
          v5 += 16;
          v19 -= 16;
        }
        while (v19);
        unint64_t v6 = *(uint64_t **)a1;
        uint64_t v21 = *(uint64_t **)(a1 + 8);
        unint64_t v4 = *(uint64_t **)(a1 + 16);
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v16;
      while (v4 != v21)
      {
        uint64_t v22 = (uint64_t *)*((unsigned int *)v4 - 2);
        v4 -= 2;
        sub_5521C(v22, v4);
      }
      if (v6) {
        operator delete(v6);
      }
      unint64_t v4 = *(uint64_t **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)(v5 - *(void *)a1) >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((uint64_t *)v5 == v4)
      {
        char v11 = (uint64_t *)(v5 - 16 * v9);
      }
      else
      {
        do
        {
          sub_58A78(v5 + 16 * v10, v5);
          v5 += 16;
        }
        while ((uint64_t *)v5 != v4);
        unint64_t v4 = *(uint64_t **)(a1 + 8);
        char v11 = (uint64_t *)(v5 + 16 * v10);
      }
      *(void *)(a1 + 8) = &v4[2 * v10];
      *(void *)(a1 + 16) = v11;
      unint64_t v4 = v11;
    }
  }
  uint64_t result = sub_584A4((uint64_t)v4, a2);
  *(void *)(a1 + 16) += 16;
  return result;
}

uint64_t sub_58A78(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = (uint64_t *)*(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a2 + 8))
  {
    if (v4 != 1)
    {
      if (!v4 || (v4 & 0xFFFFFFFE) == 2)
      {
        uint64_t v5 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v5;
      }
      return a1;
    }
    *(void *)a1 = *(void *)a2;
    return a1;
  }
  else
  {
    sub_5521C(v4, (uint64_t *)a1);
    uint64_t v7 = *(unsigned int *)(a2 + 8);
    if (v7 == 1)
    {
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      if (!v7) {
        operator new();
      }
      sub_585A0(v7);
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    return a1;
  }
}

void sub_58BA0()
{
}

uint64_t sub_58BC8(uint64_t *a1, void *a2)
{
  unint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v5 = ((uint64_t)v3 - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[16 * v5];
  unint64_t v12 = &v10[16 * v9];
  *(void *)uint64_t v11 = *a2;
  *(_DWORD *)(v11 + 8) = 1;
  uint64_t v13 = v11 + 16;
  if (v3 == v4)
  {
    uint64_t v14 = v3;
  }
  else
  {
    do
    {
      v3 -= 2;
      uint64_t v11 = sub_584A4(v11 - 16, (uint64_t)v3);
    }
    while (v3 != v4);
    uint64_t v14 = (uint64_t *)*a1;
    uint64_t v3 = (uint64_t *)a1[1];
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  while (v3 != v14)
  {
    uint64_t v15 = (uint64_t *)*((unsigned int *)v3 - 2);
    v3 -= 2;
    sub_5521C(v15, v3);
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void *sub_58CE4(void *a1, uint64_t a2)
{
  sub_59E50(a2, 6);
  uint64_t v3 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t v4 = &v17;
  }
  else
  {
    uint64_t v3 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
    unint64_t v4 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = v4;
  unint64_t v6 = v3;
  while (v6 != v4)
  {
    int v7 = HIBYTE(v6[-1].__r_.__value_.__r.__words[2]);
    unint64_t v6 = (std::string *)((char *)v6 - 1);
    if (v7 != 48)
    {
      uint64_t v5 = (std::string *)((char *)&v6->__r_.__value_.__l.__data_ + 1);
      break;
    }
  }
  std::string::erase(&v17, (char *)v5 - (char *)v4, (char *)v3 - (char *)v5);
  uint64_t v8 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t v9 = &v17;
  }
  else
  {
    uint64_t v8 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
    unint64_t v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  uint64_t v10 = v8;
  while (v10 != v9)
  {
    int v11 = HIBYTE(v10[-1].__r_.__value_.__r.__words[2]);
    uint64_t v10 = (std::string *)((char *)v10 - 1);
    if (v11 != 46)
    {
      unint64_t v12 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      goto LABEL_16;
    }
  }
  unint64_t v12 = v9;
LABEL_16:
  std::string::erase(&v17, (char *)v12 - (char *)v9, (char *)v8 - (char *)v12);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v17;
  }
  else {
    uint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  uint64_t result = sub_188FC78(a1, (uint64_t)v13, size);
  unint64_t v16 = result;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    return v16;
  }
  return result;
}

void sub_58E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_58E3C(uint64_t a1)
{
  sub_6BAC((uint64_t)v3);
  sub_58F84(v3, a1);
  std::stringbuf::str();
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_58F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_58F84(void *a1, uint64_t a2)
{
  char v7 = 123;
  sub_188FC78(a1, (uint64_t)&v7, 1);
  char v4 = *(uint64_t **)(a2 + 16);
  if (v4)
  {
    while (1)
    {
      sub_5A0D4(a1, (uint64_t)(v4 + 2));
      char v8 = 58;
      sub_188FC78(a1, (uint64_t)&v8, 1);
      int v5 = *((_DWORD *)v4 + 12);
      if (v5)
      {
        if (v5 != 1) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_5A0D4(a1, v4[5]);
        int v5 = *((_DWORD *)v4 + 12);
        if (v5 != 1)
        {
LABEL_4:
          if (v5 != 2) {
            goto LABEL_5;
          }
          goto LABEL_13;
        }
      }
      sub_58CE4(a1, (uint64_t)(v4 + 5));
      int v5 = *((_DWORD *)v4 + 12);
      if (v5 != 2)
      {
LABEL_5:
        if (v5 != 3) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
LABEL_13:
      sub_58F84(a1, v4[5]);
      int v5 = *((_DWORD *)v4 + 12);
      if (v5 != 3)
      {
LABEL_6:
        if (v5 != 4) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
LABEL_14:
      sub_5914C(a1, (uint64_t *)v4[5]);
      int v5 = *((_DWORD *)v4 + 12);
      if (v5 != 4)
      {
LABEL_7:
        if (v5 != 5) {
          goto LABEL_8;
        }
        goto LABEL_16;
      }
LABEL_15:
      sub_188FC78(a1, (uint64_t)"true", 4);
      int v5 = *((_DWORD *)v4 + 12);
      if (v5 != 5)
      {
LABEL_8:
        if (v5 != 6) {
          goto LABEL_9;
        }
        goto LABEL_17;
      }
LABEL_16:
      sub_188FC78(a1, (uint64_t)"false", 5);
      if (*((_DWORD *)v4 + 12) != 6)
      {
LABEL_9:
        char v4 = (uint64_t *)*v4;
        if (!v4) {
          break;
        }
        goto LABEL_18;
      }
LABEL_17:
      sub_188FC78(a1, (uint64_t)"null", 4);
      char v4 = (uint64_t *)*v4;
      if (!v4) {
        break;
      }
LABEL_18:
      char v9 = 44;
      sub_188FC78(a1, (uint64_t)&v9, 1);
    }
  }
  char v10 = 125;
  sub_188FC78(a1, (uint64_t)&v10, 1);
  return a1;
}

void *sub_5914C(void *a1, uint64_t *a2)
{
  char v7 = 91;
  sub_188FC78(a1, (uint64_t)&v7, 1);
  uint64_t v4 = *a2;
  while (v4 != a2[1])
  {
    char v8 = a1;
    int v5 = *(_DWORD *)(v4 + 8);
    if (v4 && !v5)
    {
      sub_5A0D4(a1, *(void *)v4);
      int v5 = *(_DWORD *)(v4 + 8);
    }
    if (v4 && v5 == 1) {
      sub_58CE4(a1, v4);
    }
    sub_5C21C(&v8, v4);
    v4 += 16;
    if (v4 == a2[1]) {
      break;
    }
    char v9 = 44;
    sub_188FC78(a1, (uint64_t)&v9, 1);
  }
  char v10 = 93;
  sub_188FC78(a1, (uint64_t)&v10, 1);
  return a1;
}

void sub_59234(void *a1, uint64_t a2)
{
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (!sub_58070(a1, (uint64_t)(i + 2)))
    {
      __p[0] = i + 2;
      uint64_t v4 = sub_5B948((uint64_t)a1, (uint64_t)(i + 2), (uint64_t)&unk_20F06E0, (long long **)__p) + 5;
LABEL_4:
      sub_59538((uint64_t)v4, (uint64_t)(i + 5));
      continue;
    }
    __p[0] = i + 2;
    int v5 = sub_5B948((uint64_t)a1, (uint64_t)(i + 2), (uint64_t)&unk_20F06E0, (long long **)__p);
    unint64_t v6 = v5 + 5;
    int v7 = *((_DWORD *)v5 + 12);
    int v8 = *((_DWORD *)i + 12);
    if (v7 != 2 || v8 != 2)
    {
      if (v7 != v8)
      {
        unsigned int v10 = v8 & 0xFFFFFFFE;
        if ((v7 & 0xFFFFFFFE) != 4 || v10 != 4)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          std::operator+<char>();
          char v25 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
        }
      }
      uint64_t v4 = v5 + 5;
      goto LABEL_4;
    }
    unint64_t v12 = v5;
    uint64_t v13 = (void *)i[5];
    char v28 = 8;
    strcpy((char *)__p, "_DELETE_");
    uint64_t v14 = sub_58070(v13, (uint64_t)__p);
    uint64_t v15 = v14;
    if (v28 < 0)
    {
      operator delete(__p[0]);
      if (v15)
      {
LABEL_20:
        unint64_t v16 = sub_57E40(a1, (uint64_t)(i + 2));
        if (v16)
        {
          sub_256F0(a1, v16, (uint64_t)__p);
          std::string v17 = (void **)__p[0];
          __p[0] = 0;
          if (v17) {
            sub_5B120((uint64_t)&__p[1], v17);
          }
        }
        continue;
      }
    }
    else if (v14)
    {
      goto LABEL_20;
    }
    char v28 = 7;
    strcpy((char *)__p, "_CLEAR_");
    unint64_t v18 = sub_58070(v13, (uint64_t)__p);
    uint64_t v19 = v18;
    if (v28 < 0)
    {
      operator delete(__p[0]);
      BOOL v20 = *((_DWORD *)v12 + 12) == 2;
      if (v19)
      {
LABEL_26:
        if (!v20) {
          goto LABEL_38;
        }
        uint64_t v21 = *v6;
        if (*(void *)(*v6 + 24))
        {
          sub_55154(*v6, *(void **)(v21 + 16));
          *(void *)(v21 + 16) = 0;
          uint64_t v22 = *(void *)(v21 + 8);
          if (v22)
          {
            for (uint64_t j = 0; j != v22; ++j)
              *(void *)(*(void *)v21 + 8 * j) = 0;
          }
          *(void *)(v21 + 24) = 0;
        }
        continue;
      }
    }
    else
    {
      BOOL v20 = *((_DWORD *)v12 + 12) == 2;
      if (v18) {
        goto LABEL_26;
      }
    }
    if (!v20)
    {
LABEL_38:
      unsigned int v26 = __cxa_allocate_exception(8uLL);
      *unsigned int v26 = &off_23FDF58;
    }
    sub_59234(*v6, v13);
  }
}

void sub_59508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_59538(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = (uint64_t *)*(unsigned int *)(a1 + 8);
  if (v4 == *(_DWORD *)(a2 + 8))
  {
    switch((int)v4)
    {
      case 0:
        std::string::operator=(*(std::string **)a1, *(const std::string **)a2);
        return a1;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t result = a1;
        break;
      case 2:
        int v7 = *(const std::string **)a2;
        int v8 = *(std::string **)a1;
        if (*(void *)a1 != *(void *)a2)
        {
          LODWORD(v8[1].__r_.__value_.__r.__words[1]) = v7[1].__r_.__value_.__r.__words[1];
          sub_5A4DC(v8, (uint64_t *)v7->__r_.__value_.__r.__words[2], 0);
        }
        return a1;
      case 3:
        if (*(void *)a1 != *(void *)a2) {
          sub_5B1F0(*(uint64_t **)a1, **(void **)a2, *(void *)(*(void *)a2 + 8), (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 4);
        }
        return a1;
      default:
        return a1;
    }
  }
  else
  {
    sub_5521C(v4, (uint64_t *)a1);
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
    }
    else
    {
      if (!v5) {
        operator new();
      }
      sub_5B860(v5);
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    return a1;
  }
  return result;
}

void sub_596BC()
{
}

void sub_596F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *((char *)a2 + 23);
  BOOL v6 = v5 < 0;
  int v7 = (uint64_t *)*a2;
  if (v5 >= 0) {
    int v7 = a2;
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  if (v6) {
    uint64_t v8 = a2[1];
  }
  *(void *)&long long __s2 = v7;
  *((void *)&__s2 + 1) = v8;
  sub_230E8((unsigned __int8 **)&__s2, 0x2Eu, (uint64_t)&v48);
  if (*((char *)v49 - 1) < 0)
  {
    sub_4200(__p, *(v49 - 3), (unint64_t)*(v49 - 2));
    char v9 = v49 - 3;
    if (*((char *)v49 - 1) < 0)
    {
      operator delete(*v9);
      unsigned int v49 = v9;
      int v11 = (void **)v48;
      if (v48 == v9) {
        goto LABEL_17;
      }
    }
    else
    {
      v49 -= 3;
      int v11 = (void **)v48;
      if (v48 == v9) {
        goto LABEL_17;
      }
    }
LABEL_10:
    unint64_t v12 = (void *)a1;
    do
    {
      a1 = sub_55FA4(v12, (uint64_t)v11);
      v11 += 3;
      uint64_t v13 = v12;
      unint64_t v12 = (void *)a1;
    }
    while (v11 != v9);
    int v14 = HIBYTE(v47);
    if (SHIBYTE(v47) < 0) {
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v15 = __p;
    if (v14 == 7)
    {
LABEL_33:
      int v20 = *(_DWORD *)v15;
      int v21 = *(_DWORD *)((char *)v15 + 3);
      if (v20 == 1162625887 && v21 == 1599226181)
      {
        int v23 = *(_DWORD *)(a3 + 8);
        if ((v23 & 0xFFFFFFFE) == 4 && a1 && v23 == 4)
        {
          if (*(void *)(a1 + 24))
          {
            sub_55154(a1, *(void **)(a1 + 16));
            *(void *)(a1 + 16) = 0;
            uint64_t v24 = *(void *)(a1 + 8);
            if (v24)
            {
              for (uint64_t i = 0; i != v24; ++i)
                *(void *)(*(void *)a1 + 8 * i) = 0;
            }
            *(void *)(a1 + 24) = 0;
          }
          goto LABEL_69;
        }
      }
LABEL_46:
      if (!sub_58070((void *)a1, (uint64_t)__p))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        char v43 = (void *)sub_2F404((uint64_t)exception, &__s2);
      }
      if (!*(_DWORD *)(a3 + 8))
      {
        uint64_t v26 = *(void *)a3;
        strcpy((char *)&__s2, "_DELETE_");
        char v51 = 8;
        uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
        uint64_t v28 = (v27 & 0x80u) == 0 ? *(unsigned __int8 *)(v26 + 23) : *(void *)(v26 + 8);
        if (v28 == 8)
        {
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v26, &__s2, *(void *)(v26 + 8))) {
              goto LABEL_61;
            }
          }
          else
          {
            if (!*(unsigned char *)(v26 + 23)) {
              goto LABEL_61;
            }
            uint64_t v29 = 0;
            uint64_t v30 = v27 - 1;
            do
            {
              int v31 = *(unsigned __int8 *)(v26 + v29);
              int v32 = *((unsigned __int8 *)&__s2 + v29);
            }
            while (v31 == v32 && v30 != v29++);
            if (v31 == v32)
            {
LABEL_61:
              unsigned int v34 = sub_57E40((void *)a1, (uint64_t)__p);
              if (v34)
              {
                sub_256F0((void *)a1, v34, (uint64_t)&__s2);
                uint64_t v19 = (void **)__s2;
                *(void *)&long long __s2 = 0;
                if (v19) {
                  goto LABEL_26;
                }
              }
              goto LABEL_69;
            }
          }
        }
      }
      *(void *)&long long __s2 = __p;
      int8x8_t v35 = sub_5B948(a1, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&__s2);
      int v36 = *(_DWORD *)(a3 + 8);
      int v37 = *((_DWORD *)v35 + 12);
      if (v36 != v37 && ((v36 & 0xFFFFFFFE) != 4 || (v37 & 0xFFFFFFFE) != 4))
      {
        unsigned int v44 = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        unsigned int v45 = (void *)sub_2F404((uint64_t)v44, &__s2);
      }
      *(void *)&long long __s2 = __p;
      uint64_t v38 = sub_5B948(a1, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&__s2);
      sub_59538((uint64_t)(v38 + 5), a3);
      goto LABEL_69;
    }
    if (v14 != 8) {
      goto LABEL_46;
    }
    goto LABEL_20;
  }
  char v9 = v49 - 3;
  long long v10 = *(_OWORD *)(v49 - 3);
  uint64_t v47 = (uint64_t)*(v49 - 1);
  *(_OWORD *)stat __p = v10;
  unsigned int v49 = v9;
  int v11 = (void **)v48;
  if (v48 != v9) {
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v13 = 0;
  int v14 = HIBYTE(v47);
  if ((SHIBYTE(v47) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_18:
  unint64_t v16 = (char *)__p[1];
  if (__p[1] != dword_8) {
    goto LABEL_31;
  }
  uint64_t v15 = (void **)__p[0];
LABEL_20:
  if (*v15 != (void *)0x5F4554454C45445FLL || (int v17 = *(_DWORD *)(a3 + 8), (v17 & 0xFFFFFFFE) != 4) || !v13 || v17 != 4)
  {
    if ((v14 & 0x80) == 0)
    {
      if (v14 != 7) {
        goto LABEL_46;
      }
      uint64_t v15 = __p;
      goto LABEL_33;
    }
    unint64_t v16 = (char *)__p[1];
LABEL_31:
    if (v16 != (unsigned char *)dword_4 + 3) {
      goto LABEL_46;
    }
    uint64_t v15 = (void **)__p[0];
    goto LABEL_33;
  }
  unint64_t v18 = sub_57E40(v13, (uint64_t)(v49 - 3));
  if (v18)
  {
    sub_256F0(v13, v18, (uint64_t)&__s2);
    uint64_t v19 = (void **)__s2;
    *(void *)&long long __s2 = 0;
    if (v19) {
LABEL_26:
    }
      sub_5B120((uint64_t)&__s2 + 8, v19);
  }
LABEL_69:
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v39 = (void **)v48;
  if (v48)
  {
    unint64_t v40 = v49;
    unsigned int v41 = v48;
    if (v49 != v48)
    {
      do
      {
        if (*((char *)v40 - 1) < 0) {
          operator delete(*(v40 - 3));
        }
        v40 -= 3;
      }
      while (v40 != v39);
      unsigned int v41 = v48;
    }
    unsigned int v49 = v39;
    operator delete(v41);
  }
}

void sub_59BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      sub_1A668(&a15);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  sub_1A668(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_59C40(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    do
    {
      if (sub_58070(v3, (uint64_t)(v2 + 2)))
      {
        int v5 = (long long *)(v2 + 2);
        uint64_t result = (uint64_t)sub_5B948((uint64_t)v3, (uint64_t)(v2 + 2), (uint64_t)&unk_20F06E0, &v5);
        if (*(_DWORD *)(result + 48) == 2 && *((_DWORD *)v2 + 12) == 2) {
          uint64_t result = sub_59C40(*(void *)(result + 40), v2[5]);
        }
      }
      else
      {
        int v5 = (long long *)(v2 + 2);
        uint64_t v4 = sub_5B948((uint64_t)v3, (uint64_t)(v2 + 2), (uint64_t)&unk_20F06E0, &v5);
        uint64_t result = sub_59538((uint64_t)(v4 + 5), (uint64_t)(v2 + 5));
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

unsigned __int8 *sub_59D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_5BDD8(a1, a2, a2, a3);
  if (!v4)
  {
    sub_E1B4((uint64_t)v12);
    BOOL v6 = sub_188FC78(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/common/src/json/JSON.cpp", 101);
    sub_188FC78(v6, (uint64_t)":", 1);
    int v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = sub_188FC78(v7, (uint64_t)":", 1);
    sub_188FC78(v8, (uint64_t)"Cannot insert the json::Value because the json::Object already contains the key.", 80);
    exception = __cxa_allocate_exception(0x40uLL);
    std::stringbuf::str();
    long long v10 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return v3 + 40;
}

void sub_59DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1C02990((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_59E50(uint64_t a1, int a2)
{
  sub_6BAC((uint64_t)v10);
  uint64_t v3 = *(void *)(v10[0] - 24);
  char v4 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + v3));
  std::ios_base::imbue((std::ios_base *)((char *)v10 + v3), v4);
  std::locale::~locale(&v13);
  int v5 = *(std::locale **)((char *)&v10[5] + v3);
  if (v5)
  {
    (*((void (**)(std::locale *, const std::locale *))v5->__locale_ + 2))(v5, v4);
    BOOL v6 = v5 + 1;
    std::locale::locale(&v12, v6);
    std::locale::operator=(v6, v4);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v9);
  uint64_t v7 = v10[0];
  *(void *)((char *)&v10[2] + *(void *)(v10[0] - 24)) = a2;
  *(_DWORD *)((char *)&v10[1] + *(void *)(v7 - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v7 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_5A0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_5A0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_5A0D4(void *a1, uint64_t a2)
{
  char v11 = 34;
  sub_188FC78(a1, (uint64_t)&v11, 1);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    int v5 = (char *)a2;
  }
  else {
    int v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  for (; v6; --v6)
  {
    switch(*v5)
    {
      case 8:
        uint64_t v8 = a1;
        uint64_t v7 = "\\b";
        uint64_t v9 = 2;
        break;
      case 9:
        uint64_t v8 = a1;
        uint64_t v7 = "\\t";
        uint64_t v9 = 2;
        break;
      case 10:
        uint64_t v8 = a1;
        uint64_t v7 = "\\n";
        uint64_t v9 = 2;
        break;
      case 11:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
        goto LABEL_9;
      case 12:
        uint64_t v8 = a1;
        uint64_t v7 = "\\f";
        uint64_t v9 = 2;
        break;
      case 13:
        uint64_t v8 = a1;
        uint64_t v7 = "\\r";
        uint64_t v9 = 2;
        break;
      case 34:
        uint64_t v8 = a1;
        uint64_t v7 = "\\\"";
        uint64_t v9 = 2;
        break;
      default:
        if (*v5 == 92)
        {
          uint64_t v8 = a1;
          uint64_t v7 = "\\\\"";
          uint64_t v9 = 2;
        }
        else
        {
LABEL_9:
          char v12 = *v5;
          uint64_t v7 = &v12;
          uint64_t v8 = a1;
          uint64_t v9 = 1;
        }
        break;
    }
    sub_188FC78(v8, (uint64_t)v7, v9);
    ++v5;
  }
  char v13 = 34;
  return sub_188FC78(a1, (uint64_t)&v13, 1);
}

void *sub_5A2DC(void *a1, uint64_t a2)
{
  uint64_t v6 = a1;
  int v4 = *(_DWORD *)(a2 + 8);
  if (!v4)
  {
    sub_5A0D4(a1, *(void *)a2);
    if (*(_DWORD *)(a2 + 8) != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4 == 1) {
LABEL_3:
  }
    sub_58CE4(a1, a2);
LABEL_4:
  sub_5C21C(&v6, a2);
  return a1;
}

uint64_t sub_5A354(uint64_t a1)
{
  sub_6BAC((uint64_t)v4);
  uint64_t v6 = v4;
  int v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    sub_5A0D4(v4, *(void *)a1);
    if (*(_DWORD *)(a1 + 8) != 1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v2 == 1) {
LABEL_5:
  }
    sub_58CE4(v4, a1);
LABEL_6:
  sub_5C21C(&v6, a1);
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_5A4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_5A4DC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_22;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      if ((uint64_t *)v8 != a2)
      {
        uint64_t v9 = (std::string **)(v8 + 40);
        long long v10 = (const std::string **)(a2 + 5);
        char v11 = (uint64_t *)*(unsigned int *)(v8 + 48);
        if (v11 == *((_DWORD *)a2 + 12))
        {
          switch((int)v11)
          {
            case 0:
              std::string::operator=(*v9, *v10);
              break;
            case 1:
              std::string *v9 = (std::string *)*v10;
              break;
            case 2:
              if (*v9 != *v10)
              {
                LODWORD((*v9)[1].__r_.__value_.__r.__words[1]) = (*v10)[1].__r_.__value_.__r.__words[1];
                sub_5A4DC();
              }
              break;
            case 3:
              if (*v9 != *v10) {
                sub_5B1F0((uint64_t *)*v9, (*v10)->__r_.__value_.__r.__words[0], (*v10)->__r_.__value_.__l.__size_, (uint64_t)((*v10)->__r_.__value_.__l.__size_ - (*v10)->__r_.__value_.__r.__words[0]) >> 4);
              }
              break;
            default:
              break;
          }
        }
        else
        {
          sub_5521C(v11, (uint64_t *)(v8 + 40));
          uint64_t v12 = *((unsigned int *)a2 + 12);
          if (v12 == 1)
          {
            std::string *v9 = (std::string *)*v10;
          }
          else
          {
            if (!v12) {
              operator new();
            }
            sub_5B860(v12);
          }
          *(_DWORD *)(v8 + 48) = *((_DWORD *)a2 + 12);
        }
      }
      uint64_t v13 = *(void *)v8;
      sub_5A7B0(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v13;
      if (!v13) {
        goto LABEL_22;
      }
    }
    sub_55154((uint64_t)a1, (void *)v8);
  }
  else
  {
LABEL_22:
    while (a2 != a3)
    {
      sub_5B010((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v14);
      sub_5A7B0(a1, v14[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_5A720()
{
}

void sub_5A748(void *a1)
{
  __cxa_begin_catch(a1);
  sub_55154(v1, v2);
  __cxa_rethrow();
}

void sub_5A764(_Unwind_Exception *a1)
{
}

uint64_t sub_5A7B0(void *a1, uint64_t a2)
{
  int v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  long long v10 = sub_5A90C((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  *long long v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t *sub_5A90C(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_15;
    }
    if (prime < v6)
    {
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          uint64_t v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2) {
            size_t v16 = v18;
          }
          if (prime <= v16) {
            size_t prime = v16;
          }
          if (prime >= v6) {
            goto LABEL_28;
          }
LABEL_15:
          sub_5AC68(a1, prime);
          goto LABEL_28;
        }
      }
      size_t v19 = std::__next_prime(v16);
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
        goto LABEL_15;
      }
    }
LABEL_28:
    unint64_t v6 = *(void *)(a1 + 8);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  int v21 = *(uint64_t **)(*(void *)a1 + 8 * v11);
  if (!v21) {
    return 0;
  }
  char v22 = a3[23];
  if (v22 >= 0) {
    uint64_t v23 = a3[23];
  }
  else {
    uint64_t v23 = *((void *)a3 + 1);
  }
  if (v22 < 0) {
    a3 = *(unsigned char **)a3;
  }
  if (v10 >= 2)
  {
    int v43 = 0;
    do
    {
      uint64_t v28 = v21;
      int v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      unint64_t v46 = v21[1];
      unint64_t v47 = v46;
      if (v46 >= v6) {
        unint64_t v47 = v46 % v6;
      }
      if (v47 != v11) {
        break;
      }
      if (v46 == a2
        && ((uint64_t v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (uint64_t v49 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v49 = v21[3]),
            v49 == v23))
      {
        unsigned int v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          BOOL v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v51 = v48 - 1;
          unsigned int v52 = a3;
          do
          {
            int v54 = *(unsigned __int8 *)v50;
            unsigned int v50 = (const void **)((char *)v50 + 1);
            int v53 = v54;
            int v56 = *v52++;
            int v55 = v56;
            BOOL v39 = v51-- != 0;
            char v57 = v39;
            BOOL v41 = v53 == v55;
            BOOL v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          BOOL v44 = 1;
        }
      }
      else
      {
        BOOL v44 = 0;
      }
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    int v24 = 0;
    unint64_t v25 = v6 - 1;
    do
    {
      uint64_t v28 = v21;
      int v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      uint64_t v29 = v21[1];
      if ((v29 & v25) != v11) {
        break;
      }
      if (v29 == a2
        && ((uint64_t v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (uint64_t v31 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v31 = v21[3]),
            v31 == v23))
      {
        int v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          BOOL v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v33 = v30 - 1;
          unsigned int v34 = a3;
          do
          {
            int v36 = *(unsigned __int8 *)v32;
            int v32 = (const void **)((char *)v32 + 1);
            int v35 = v36;
            int v38 = *v34++;
            int v37 = v38;
            BOOL v39 = v33-- != 0;
            char v40 = v39;
            BOOL v41 = v35 == v37;
            BOOL v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          BOOL v26 = 1;
        }
      }
      else
      {
        BOOL v26 = 0;
      }
      char v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

void sub_5AC68(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_188D718();
    }
    int v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    float v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      BOOL v12 = *v7;
      if (*v7)
      {
        unint64_t v35 = v9.u32[0];
        do
        {
          unint64_t v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            float v7 = (uint64_t **)v12;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              unint64_t v14 = (uint64_t *)*v12;
              unint64_t v36 = v8;
              if (*v12)
              {
                size_t v15 = v12[3];
                if (*((char *)v12 + 39) >= 0) {
                  uint64_t v16 = *((unsigned __int8 *)v12 + 39);
                }
                else {
                  uint64_t v16 = v12[3];
                }
                if ((*((unsigned char *)v12 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v12 + 39))
                  {
                    uint8x8_t v17 = (uint64_t *)*v12;
                    uint64_t v18 = v12;
LABEL_32:
                    unint64_t v14 = v17;
                    uint64_t v19 = *((unsigned __int8 *)v17 + 39);
                    int v20 = (char)v19;
                    if ((v19 & 0x80u) != 0) {
                      uint64_t v19 = v14[3];
                    }
                    if (v16 == v19)
                    {
                      if (v20 >= 0) {
                        int v21 = (unsigned __int8 *)(v14 + 2);
                      }
                      else {
                        int v21 = (unsigned __int8 *)v14[2];
                      }
                      char v22 = (unsigned __int8 *)(v12 + 2);
                      uint64_t v23 = *((unsigned __int8 *)v12 + 39);
                      while (*v22 == *v21)
                      {
                        ++v22;
                        ++v21;
                        if (!--v23)
                        {
                          uint8x8_t v17 = (uint64_t *)*v14;
                          uint64_t v18 = v14;
                          unint64_t v14 = 0;
                          if (v17) {
                            goto LABEL_32;
                          }
                          goto LABEL_58;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v33 = *((unsigned __int8 *)v14 + 39);
                    if ((v33 & 0x80u) != 0) {
                      uint64_t v33 = v14[3];
                    }
                    uint64_t v18 = v12;
                    if (v33 == *((unsigned __int8 *)v12 + 39))
                    {
                      do
                      {
                        uint64_t v18 = v14;
                        unint64_t v14 = (uint64_t *)*v14;
                        if (!v14) {
                          break;
                        }
                        uint64_t v34 = *((unsigned __int8 *)v14 + 39);
                        if ((v34 & 0x80u) != 0) {
                          uint64_t v34 = v14[3];
                        }
                      }
                      while (v16 == v34);
                    }
                  }
                  goto LABEL_58;
                }
                BOOL v24 = *((char *)v14 + 39) < 0;
                uint64_t v25 = *((unsigned __int8 *)v14 + 39);
                if ((v25 & 0x80u) != 0) {
                  uint64_t v25 = v14[3];
                }
                if (v16 == v25)
                {
                  BOOL v26 = (const void *)v12[2];
                  uint64_t v18 = v12;
                  while (1)
                  {
                    char v27 = v14;
                    uint64_t v30 = (const void *)v14[2];
                    uint64_t v28 = v14 + 2;
                    uint64_t v29 = v30;
                    if (v24) {
                      uint64_t v31 = v29;
                    }
                    else {
                      uint64_t v31 = v28;
                    }
                    if (memcmp(v26, v31, v15))
                    {
                      unint64_t v14 = v27;
                      goto LABEL_58;
                    }
                    unint64_t v14 = (uint64_t *)*v27;
                    if (!*v27) {
                      break;
                    }
                    BOOL v24 = *((char *)v14 + 39) < 0;
                    uint64_t v32 = *((unsigned __int8 *)v14 + 39);
                    if ((v32 & 0x80u) != 0) {
                      uint64_t v32 = v14[3];
                    }
                    uint64_t v18 = v27;
                    if (v16 != v32) {
                      goto LABEL_58;
                    }
                  }
                  uint64_t v18 = v27;
                  goto LABEL_58;
                }
              }
              uint64_t v18 = v12;
LABEL_58:
              *float v7 = v14;
              *uint64_t v18 = **(void **)(*(void *)a1 + 8 * v13);
              **(void **)(*(void *)a1 + 8 * v13) = v12;
              unint64_t v8 = v36;
              unint64_t v10 = v35;
              goto LABEL_18;
            }
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            float v7 = (uint64_t **)v12;
            unint64_t v8 = v13;
          }
LABEL_18:
          BOOL v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    uint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_5AF78(uint64_t a1)
{
  int v2 = (uint64_t *)*(unsigned int *)(a1 + 32);
  if (v2 != 1)
  {
    uint64_t v3 = (uint64_t **)(a1 + 24);
    if (v2)
    {
      sub_552D8(v2, v3);
    }
    else
    {
      int v4 = *v3;
      unsigned __int8 *v3 = 0;
      if (v4)
      {
        if (*((char *)v4 + 23) < 0) {
          operator delete((void *)*v4);
        }
        operator delete();
      }
    }
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_5B010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x38uLL);
  float v7 = v6;
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v6 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  sub_54A68((uint64_t)(v7 + 40), a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = sub_B128((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_5B0D4(_Unwind_Exception *a1)
{
  *int v2 = 0;
  sub_5B120(v3, v1);
  _Unwind_Resume(a1);
}

void sub_5B0F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v4);
  }
  *int v2 = 0;
  sub_5B120(v3, (void **)v1);
  _Unwind_Resume(a1);
}

void sub_5B120(uint64_t a1, void **__p)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!__p) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v3 = (uint64_t *)*((unsigned int *)__p + 12);
  if (v3 != 1)
  {
    int v4 = (uint64_t **)(__p + 5);
    if (v3)
    {
      sub_552D8(v3, v4);
    }
    else
    {
      uint64_t v5 = *v4;
      uint64_t *v4 = 0;
      if (v5)
      {
        if (*((char *)v5 + 23) < 0) {
          operator delete((void *)*v5);
        }
        operator delete();
      }
    }
  }
  if ((*((char *)__p + 39) & 0x80000000) == 0)
  {
LABEL_9:
    uint64_t v6 = __p;
    goto LABEL_11;
  }
  operator delete(__p[2]);
  uint64_t v6 = __p;

LABEL_11:
  operator delete(v6);
}

uint64_t *sub_5B1F0(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  float v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = *result;
  if (__sz <= (v8 - *result) >> 4)
  {
    uint64_t v16 = result[1];
    unint64_t v17 = (v16 - v9) >> 4;
    if (v17 >= __sz)
    {
      sub_5B5C0((uint64_t)&v23, a2, a3, v9);
      return sub_5B3E8(v7, v22);
    }
    else
    {
      unint64_t v18 = a2 + 16 * v17;
      if (v16 != v9)
      {
        uint64_t v19 = 16 * v17;
        do
        {
          unint64_t result = (uint64_t *)sub_59538(v9, v6);
          v6 += 16;
          v9 += 16;
          v19 -= 16;
        }
        while (v19);
        uint64_t v9 = v7[1];
      }
      uint64_t v20 = v9;
      if (v18 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          unint64_t result = (uint64_t *)sub_54A68(v9 + v21, v18 + v21);
          v21 += 16;
        }
        while (v18 + v21 != a3);
        uint64_t v20 = v9 + v21;
      }
      v7[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      sub_5B788(result);
      operator delete((void *)*v7);
      uint64_t v8 = 0;
      *float v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_27;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_27:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    unint64_t result = (uint64_t *)operator new(16 * v12);
    unint64_t v14 = result;
    *float v7 = (uint64_t)result;
    v7[1] = (uint64_t)result;
    v7[2] = (uint64_t)&result[v13];
    if (v6 != a3)
    {
      unint64_t v15 = 0;
      do
      {
        unint64_t result = (uint64_t *)sub_54A68((uint64_t)&v14[v15 / 8], v6 + v15);
        v15 += 16;
      }
      while (v6 + v15 != a3);
      unint64_t v14 = (uint64_t *)((char *)v14 + v15);
    }
    v7[1] = (uint64_t)v14;
  }
  return result;
}

uint64_t *sub_5B3E8(uint64_t *result, uint64_t a2)
{
  int v2 = result;
  for (uint64_t i = result[1]; i != a2; i -= 16)
  {
    int v4 = *(_DWORD *)(i - 8);
    switch(v4)
    {
      case 3:
        unint64_t result = *(uint64_t **)(i - 16);
        *(void *)(i - 16) = 0;
        if (result)
        {
          sub_55500(result);
          goto LABEL_3;
        }
        break;
      case 2:
        unint64_t result = *(uint64_t **)(i - 16);
        *(void *)(i - 16) = 0;
        if (result)
        {
          sub_5450C((uint64_t)result);
          goto LABEL_3;
        }
        break;
      case 0:
        uint64_t v5 = *(void *)(i - 16);
        *(void *)(i - 16) = 0;
        if (v5)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
LABEL_3:
          operator delete();
        }
        break;
    }
  }
  v2[1] = a2;
  return result;
}

void sub_5B4C8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 3:
      int v4 = *(uint64_t **)a2;
      *(void *)a2 = 0;
      if (!v4) {
        return;
      }
      sub_55500(v4);
      goto LABEL_9;
    case 2:
      uint64_t v5 = *(void *)a2;
      *(void *)a2 = 0;
      if (!v5) {
        return;
      }
      sub_5450C(v5);
LABEL_9:
      operator delete();
    case 0:
      uint64_t v3 = *(uint64_t **)a2;
      *(void *)a2 = 0;
      if (v3)
      {
        if (*((char *)v3 + 23) < 0) {
          operator delete((void *)*v3);
        }
        goto LABEL_9;
      }
      break;
  }
}

uint64_t sub_5B5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        float v7 = (uint64_t *)*(unsigned int *)(a4 + 8);
        if (v7 == *(_DWORD *)(v5 + 8))
        {
          switch((int)v7)
          {
            case 0:
              std::string::operator=(*(std::string **)a4, *(const std::string **)v5);
              break;
            case 1:
              *(void *)a4 = *(void *)v5;
              break;
            case 2:
              if (*(void *)a4 != *(void *)v5)
              {
                *(_DWORD *)(*(void *)a4 + 32) = *(_DWORD *)(*(void *)v5 + 32);
                sub_5A4DC();
              }
              break;
            case 3:
              if (*(void *)a4 != *(void *)v5) {
                sub_5B1F0(*(void *)a4, **(void **)v5, *(void *)(*(void *)v5 + 8), (uint64_t)(*(void *)(*(void *)v5 + 8) - **(void **)v5) >> 4);
              }
              break;
            default:
              break;
          }
        }
        else
        {
          sub_5521C(v7, (uint64_t *)a4);
          uint64_t v8 = *(unsigned int *)(v5 + 8);
          if (v8 == 1)
          {
            *(void *)a4 = *(void *)v5;
          }
          else
          {
            if (!v8) {
              operator new();
            }
            sub_5B860(v8);
          }
          *(_DWORD *)(a4 + 8) = *(_DWORD *)(v5 + 8);
        }
      }
      v5 += 16;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_5B750()
{
}

uint64_t *sub_5B788(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  for (uint64_t i = result[1]; i != v2; i -= 16)
  {
    int v4 = *(_DWORD *)(i - 8);
    switch(v4)
    {
      case 3:
        unint64_t result = *(uint64_t **)(i - 16);
        *(void *)(i - 16) = 0;
        if (result)
        {
          sub_55500(result);
          goto LABEL_2;
        }
        break;
      case 2:
        unint64_t result = *(uint64_t **)(i - 16);
        *(void *)(i - 16) = 0;
        if (result)
        {
          sub_5450C((uint64_t)result);
          goto LABEL_2;
        }
        break;
      case 0:
        uint64_t v5 = *(void *)(i - 16);
        *(void *)(i - 16) = 0;
        if (v5)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
LABEL_2:
          operator delete();
        }
        break;
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_5B860(uint64_t result)
{
  if (result == 3) {
    operator new();
  }
  if (result == 2) {
    operator new();
  }
  return result;
}

void sub_5B900()
{
}

void sub_5B924()
{
}

uint64_t *sub_5B948(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          unint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  BOOL v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *BOOL v26 = 0;
  v26[1] = v11;
  char v27 = v26 + 2;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)char v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  *((_DWORD *)v26 + 12) = -1;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  unint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_5BDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  sub_5B120(v10, v11);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_5BDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v43, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      char v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          float v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v16 + 1);
            if (v23 == v12)
            {
              uint64_t v24 = v16[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v16[39];
              }
              else {
                uint64_t v25 = *((void *)v16 + 3);
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                    return v16;
                  }
                }
                else
                {
                  if (!v16[39]) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (v16[v26 + 16] == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v16 = *(unsigned __int8 **)v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v12)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          char v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  char v27 = (void *)(a1 + 16);
  char v16 = (unsigned __int8 *)operator new(0x38uLL);
  uint64_t v44 = a1 + 16;
  *(void *)char v16 = 0;
  *((void *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_584A4((uint64_t)(v16 + 40), a4);
  char v45 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (v13 && (float)(v29 * (float)v13) >= v28)
  {
    uint64_t v30 = *(void *)a1;
    float v31 = *(void **)(*(void *)a1 + 8 * v4);
    if (v31)
    {
LABEL_54:
      *(void *)char v16 = *v31;
LABEL_89:
      *float v31 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v32 = 1;
    if (v13 >= 3) {
      BOOL v32 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v13);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v30 = *(void *)a1;
        float v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v30 = *(void *)a1;
        float v31 = *(void **)(*(void *)a1 + 8 * v12);
        if (v31) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v40 & v12;
      uint64_t v30 = *(void *)a1;
      float v31 = *(void **)(*(void *)a1 + 8 * (v40 & v12));
      if (v31) {
        goto LABEL_54;
      }
    }
  }
  *(void *)char v16 = *v27;
  void *v27 = v16;
  *(void *)(v30 + 8 * v4) = v27;
  if (*(void *)v16)
  {
    unint64_t v41 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v41 >= v13) {
        v41 %= v13;
      }
    }
    else
    {
      v41 &= v13 - 1;
    }
    float v31 = (void *)(*(void *)a1 + 8 * v41);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_5C1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_5B120(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_5C21C(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 2)
  {
    unint64_t result = (void *)sub_58F84(*result, *(void *)a2);
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4 != 3)
    {
LABEL_3:
      if (v4 != 4) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (v4 != 3)
  {
    goto LABEL_3;
  }
  unint64_t result = (void *)sub_5914C(*v3, *(void *)a2);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != 4)
  {
LABEL_4:
    if (v4 != 5) {
      goto LABEL_5;
    }
LABEL_12:
    unint64_t result = sub_188FC78((void *)*v3, (uint64_t)"false", 5);
    if (*(_DWORD *)(a2 + 8) != 6) {
      return result;
    }
    goto LABEL_6;
  }
LABEL_11:
  unint64_t result = sub_188FC78((void *)*v3, (uint64_t)"true", 4);
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 5) {
    goto LABEL_12;
  }
LABEL_5:
  if (v4 != 6) {
    return result;
  }
LABEL_6:
  uint64_t v5 = (void *)*v3;

  return sub_188FC78(v5, (uint64_t)"null", 4);
}

void sub_5C308(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (void *)sub_5C4AC(a1, a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_23708(a3, (uint64_t)(v4[1] - *v4) >> 4);
  uint64_t v5 = (_DWORD *)*v4;
  uint64_t v6 = (_DWORD *)v4[1];
  if ((_DWORD *)*v4 != v6)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    do
    {
      if (v5[2])
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unint64_t v8 = *(long long **)v5;
      if (*(char *)(*(void *)v5 + 23) < 0)
      {
        sub_4200(&__p, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      unint64_t v10 = sub_5D6D4((std::string **)a3, v7, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = (uint64_t)&v10[1];
      v5 += 4;
    }
    while (v5 != v6);
  }
}

void sub_5C420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  char v16 = (void **)*v14;
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  char v17 = (void **)v14[1];
  uint64_t v18 = *v14;
  if (v17 != v16)
  {
    do
    {
      if (*((char *)v17 - 1) < 0) {
        operator delete(*(v17 - 3));
      }
      v17 -= 3;
    }
    while (v17 != v16);
    uint64_t v18 = *v14;
  }
  v14[1] = v16;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5C4AC(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2[5];
}

void sub_5C538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5C568(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = (void *)sub_5C4AC(a1, a2);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  sub_5DC3C((uint64_t)__p, a3, v4);
  long long v6 = (_DWORD *)*v4;
  uint64_t v5 = (_DWORD *)v4[1];
  while (v6 != v5)
  {
    if (v6[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v7 = *(long long **)v6;
    if (*(char *)(*(void *)v6 + 23) < 0)
    {
      sub_4200(__p, *(void **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      uint64_t v11 = *((void *)v7 + 2);
      *(_OWORD *)std::string __p = v8;
    }
    sub_24AFC(a3, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    v6 += 4;
  }
}

void sub_5C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  char v16 = *(void ***)(v14 + 16);
  if (v16)
  {
    do
    {
      uint64_t v18 = (void **)*v16;
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      char v16 = v18;
    }
    while (v18);
  }
  char v17 = *(void **)v14;
  *(void *)uint64_t v14 = 0;
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_5C6DC(void *a1, uint64_t a2, uint64_t *a3)
{
  if (sub_58070(a1, a2))
  {
    double v6 = sub_5C7E8(a1, a2);
    if (v6 >= 0.0)
    {
      double v7 = v6;
      if (v6 >= 4.50359963e15) {
        goto LABEL_10;
      }
      uint64_t v8 = (uint64_t)(v6 + v6) + 1;
    }
    else
    {
      double v7 = v6;
      if (v6 <= -4.50359963e15) {
        goto LABEL_10;
      }
      uint64_t v8 = (uint64_t)(v6 + v6);
      if (v8 >= 1) {
        --v8;
      }
    }
    double v7 = (double)(v8 >> 1);
LABEL_10:
    if (v7 >= 9.22337204e18)
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFELL;
LABEL_21:
      *a3 = v10;
      return;
    }
    if (v6 >= 0.0)
    {
      if (v6 < 4.50359963e15)
      {
        uint64_t v9 = (uint64_t)(v6 + v6) + 1;
LABEL_19:
        double v6 = (double)(v9 >> 1);
      }
    }
    else if (v6 > -4.50359963e15)
    {
      uint64_t v9 = (uint64_t)(v6 + v6);
      if (v9 >= 1) {
        --v9;
      }
      goto LABEL_19;
    }
    uint64_t v10 = (uint64_t)v6;
    goto LABEL_21;
  }
}

double sub_5C7E8(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_5C874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5C8A4(void *a1, uint64_t a2, uint64_t *a3)
{
  if (sub_58070(a1, a2))
  {
    double v6 = sub_5C7E8(a1, a2) * 100.0;
    if (v6 >= 0.0)
    {
      double v7 = v6;
      if (v6 >= 4.50359963e15) {
        goto LABEL_10;
      }
      uint64_t v8 = (uint64_t)(v6 + v6) + 1;
    }
    else
    {
      double v7 = v6;
      if (v6 <= -4.50359963e15) {
        goto LABEL_10;
      }
      uint64_t v8 = (uint64_t)(v6 + v6);
      if (v8 >= 1) {
        --v8;
      }
    }
    double v7 = (double)(v8 >> 1);
LABEL_10:
    if (v7 >= 9.22337204e18)
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFELL;
LABEL_21:
      *a3 = v10;
      return;
    }
    if (v6 >= 0.0)
    {
      if (v6 < 4.50359963e15)
      {
        uint64_t v9 = (uint64_t)(v6 + v6) + 1;
LABEL_19:
        double v6 = (double)(v9 >> 1);
      }
    }
    else if (v6 > -4.50359963e15)
    {
      uint64_t v9 = (uint64_t)(v6 + v6);
      if (v9 >= 1) {
        --v9;
      }
      goto LABEL_19;
    }
    uint64_t v10 = (uint64_t)v6;
    goto LABEL_21;
  }
}

unint64_t sub_5C9BC(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (unint64_t)*((double *)v2 + 5);
}

void sub_5CA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5CA7C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int64x2_t **a4@<X8>, uint64_t a5@<D0>)
{
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v11 = v9 - v10;
  if (v11)
  {
    uint64_t v12 = v11 / 24;
    if ((unint64_t)(v11 / 24) >> 61) {
      sub_2E00();
    }
    unint64_t v13 = (int64x2_t *)operator new(8 * v12);
    uint64_t v14 = v13;
    *a4 = v13;
    unint64_t v15 = (double *)&v13->i64[v12];
    a4[2] = (int64x2_t *)v15;
    unint64_t v16 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    char v17 = (double *)v13;
    if (v16 < 3) {
      goto LABEL_20;
    }
    unint64_t v18 = v16 + 1;
    char v17 = (double *)&v13->i64[v18 & 0x3FFFFFFFFFFFFFFCLL];
    int64x2_t v19 = vdupq_lane_s64(a5, 0);
    uint64_t v20 = v13 + 1;
    uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20[-1] = v19;
      *uint64_t v20 = v19;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_20:
      do
        *v17++ = *(double *)&a5;
      while (v17 != v15);
    }
    a4[1] = (int64x2_t *)v15;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (sub_58070(a1, a2))
  {
    uint64_t v22 = sub_560F4(a1, a2);
    uint64_t v23 = a3[1] - *a3;
    if (v23)
    {
      uint64_t v24 = (void *)v22;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = v23 / 24;
      do
      {
        if (sub_58070(v24, *a3 + v25)) {
          *(double *)&v14->i64[v26] = sub_5C7E8(v24, *a3 + v25);
        }
        ++v26;
        v25 += 24;
      }
      while (v27 != v26);
    }
  }
}

void sub_5CC10(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5CC38(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_5DD54(a1, a2, &v15);
  std::string::size_type v3 = std::string::rfind((const std::string *)v2, 95, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v4 = v3;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(v2 + 23);
    if (v3 <= v5)
    {
      size_t v6 = v5 - v3;
      if (v5 - v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_16:
      sub_188D690();
    }
LABEL_19:
    sub_5AD0();
  }
  std::string::size_type v5 = *(void *)(v2 + 8);
  if (v5 < v3) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)v2;
  size_t v6 = v5 - v3;
  if (v5 - v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
LABEL_4:
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v7 = (unsigned __int16 *)operator new(v8 + 1);
    __dst[1] = (unsigned __int16 *)v6;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_10;
  }
  HIBYTE(v14) = v6;
  double v7 = (unsigned __int16 *)__dst;
  if (v5 != v3) {
LABEL_10:
  }
    memmove(v7, (const void *)(v2 + v4), v6);
  *((unsigned char *)v7 + v6) = 0;
  double v10 = sub_5C7E8(v15, (uint64_t)&__p);
  uint64_t v11 = sub_5DEF8(__dst, v10);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if ((v17 & 0x80000000) == 0) {
      return v11;
    }
LABEL_18:
    operator delete(__p);
    return v11;
  }
  if (v17 < 0) {
    goto LABEL_18;
  }
  return v11;
}

void sub_5CD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5CDE4(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_5DD54(a1, a2, &v15);
  std::string::size_type v3 = std::string::rfind((const std::string *)v2, 95, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v4 = v3;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(v2 + 23);
    if (v3 <= v5)
    {
      size_t v6 = v5 - v3;
      if (v5 - v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_16:
      sub_188D690();
    }
LABEL_19:
    sub_5AD0();
  }
  std::string::size_type v5 = *(void *)(v2 + 8);
  if (v5 < v3) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)v2;
  size_t v6 = v5 - v3;
  if (v5 - v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
LABEL_4:
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v7 = (void **)operator new(v8 + 1);
    __dst[1] = (void *)v6;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_10;
  }
  HIBYTE(v14) = v6;
  double v7 = __dst;
  if (v5 != v3) {
LABEL_10:
  }
    memmove(v7, (const void *)(v2 + v4), v6);
  *((unsigned char *)v7 + v6) = 0;
  double v10 = sub_5C7E8(v15, (uint64_t)&__p);
  uint64_t v11 = sub_5E1B4((unsigned __int16 *)__dst, v10);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if ((v17 & 0x80000000) == 0) {
      return v11;
    }
LABEL_18:
    operator delete(__p);
    return v11;
  }
  if (v17 < 0) {
    goto LABEL_18;
  }
  return v11;
}

void sub_5CF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5CF90(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_5DD54(a1, a2, &v15);
  std::string::size_type v3 = std::string::rfind((const std::string *)v2, 95, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v4 = v3;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(v2 + 23);
    if (v3 <= v5)
    {
      size_t v6 = v5 - v3;
      if (v5 - v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_16:
      sub_188D690();
    }
LABEL_19:
    sub_5AD0();
  }
  std::string::size_type v5 = *(void *)(v2 + 8);
  if (v5 < v3) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)v2;
  size_t v6 = v5 - v3;
  if (v5 - v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
LABEL_4:
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v7 = (void **)operator new(v8 + 1);
    __dst[1] = (void *)v6;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_10;
  }
  HIBYTE(v14) = v6;
  double v7 = __dst;
  if (v5 != v3) {
LABEL_10:
  }
    memmove(v7, (const void *)(v2 + v4), v6);
  *((unsigned char *)v7 + v6) = 0;
  double v10 = sub_5C7E8(v15, (uint64_t)&__p);
  uint64_t v11 = sub_5E584((unsigned __int16 *)__dst, v10);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if ((v17 & 0x80000000) == 0) {
      return v11;
    }
LABEL_18:
    operator delete(__p);
    return v11;
  }
  if (v17 < 0) {
    goto LABEL_18;
  }
  return v11;
}

void sub_5D0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

double sub_5D13C(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_5DD54(a1, a2, &v15);
  std::string::size_type v3 = std::string::rfind((const std::string *)v2, 95, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v4 = v3;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(v2 + 23);
    if (v3 <= v5)
    {
      size_t v6 = v5 - v3;
      if (v5 - v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_16:
      sub_188D690();
    }
LABEL_19:
    sub_5AD0();
  }
  std::string::size_type v5 = *(void *)(v2 + 8);
  if (v5 < v3) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)v2;
  size_t v6 = v5 - v3;
  if (v5 - v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
LABEL_4:
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v7 = (void **)operator new(v8 + 1);
    __dst[1] = (void *)v6;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_10;
  }
  HIBYTE(v14) = v6;
  double v7 = __dst;
  if (v5 != v3) {
LABEL_10:
  }
    memmove(v7, (const void *)(v2 + v4), v6);
  *((unsigned char *)v7 + v6) = 0;
  double v10 = sub_5C7E8(v15, (uint64_t)&__p);
  double v11 = sub_5E828((uint64_t)__dst, v10);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if ((v17 & 0x80000000) == 0) {
      return v11;
    }
LABEL_18:
    operator delete(__p);
    return v11;
  }
  if (v17 < 0) {
    goto LABEL_18;
  }
  return v11;
}

void sub_5D2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_5D2F0(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_5DD54(a1, a2, &v15);
  std::string::size_type v3 = std::string::rfind((const std::string *)v2, 95, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v4 = v3;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(v2 + 23);
    if (v3 <= v5)
    {
      size_t v6 = v5 - v3;
      if (v5 - v3 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_4;
      }
LABEL_16:
      sub_188D690();
    }
LABEL_19:
    sub_5AD0();
  }
  std::string::size_type v5 = *(void *)(v2 + 8);
  if (v5 < v3) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)v2;
  size_t v6 = v5 - v3;
  if (v5 - v3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_16;
  }
LABEL_4:
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    double v7 = (unsigned __int16 *)operator new(v8 + 1);
    __dst[1] = (unsigned __int16 *)v6;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_10;
  }
  HIBYTE(v14) = v6;
  double v7 = (unsigned __int16 *)__dst;
  if (v5 != v3) {
LABEL_10:
  }
    memmove(v7, (const void *)(v2 + v4), v6);
  *((unsigned char *)v7 + v6) = 0;
  double v10 = sub_5C7E8(v15, (uint64_t)&__p);
  uint64_t v11 = sub_5E9BC(__dst, v10);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if ((v17 & 0x80000000) == 0) {
      return v11;
    }
LABEL_18:
    operator delete(__p);
    return v11;
  }
  if (v17 < 0) {
    goto LABEL_18;
  }
  return v11;
}

void sub_5D44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_5D498(void *a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result = sub_58070(a1, a2);
  if (result)
  {
    unint64_t result = sub_5D58C(a1, a2);
    if (*((_DWORD *)result + 2) != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    double v7 = *(double *)result * 10.0;
    if (v7 >= 0.0)
    {
      if (v7 < 4.50359963e15)
      {
        uint64_t v8 = (uint64_t)(v7 + v7) + 1;
LABEL_10:
        double v7 = (double)(v8 >> 1);
      }
    }
    else if (v7 > -4.50359963e15)
    {
      uint64_t v8 = (uint64_t)(v7 + v7);
      if (v8 >= 1) {
        --v8;
      }
      goto LABEL_10;
    }
    *a3 = (int)v7;
  }
  return result;
}

uint64_t *sub_5D58C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    std::string::size_type v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return v2 + 5;
}

void sub_5D60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_5D63C(void *a1, uint64_t a2, uint64_t *a3)
{
  if (sub_58070(a1, a2))
  {
    double v7 = sub_5D58C(a1, a2);
    if (*((_DWORD *)v7 + 2) != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    double result = *(double *)v7;
    *a3 = *v7;
  }
  return result;
}

std::string *sub_5D6D4(std::string **a1, uint64_t a2, std::string *__str)
{
  std::string::size_type v3 = (long long *)__str;
  long long v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = &(*a1)[v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v40 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v18 = (std::string *)operator new(24 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    int8x8_t v36 = v18;
    unint64_t v37 = &v18[v7];
    uint8x8_t v38 = v37;
    uint64_t v39 = (char *)&v18[v17];
    sub_5DA18((uint64_t)&v36, v3);
    uint64_t v20 = v37;
    uint64_t v21 = *a1;
    uint64_t v22 = v37;
    if (*a1 != v8)
    {
      uint64_t v23 = v37;
      uint64_t v24 = v8;
      do
      {
        uint64_t v22 = v23 - 1;
        long long v25 = *(_OWORD *)&v24[-1].__r_.__value_.__l.__data_;
        v23[-1].__r_.__value_.__r.__words[2] = v24[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23[-1].__r_.__value_.__l.__data_ = v25;
        v24[-1].__r_.__value_.__l.__size_ = 0;
        v24[-1].__r_.__value_.__r.__words[2] = 0;
        v24[-1].__r_.__value_.__r.__words[0] = 0;
        --v23;
        --v24;
      }
      while (v24 != v21);
    }
    unint64_t v37 = v22;
    uint64_t v26 = a1[1];
    uint64_t v27 = v38;
    if (v26 != v8)
    {
      do
      {
        long long v28 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        ++v27;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        ++v8;
      }
      while (v8 != v26);
      uint64_t v22 = v37;
      uint64_t v8 = a1[1];
    }
    float v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    uint64_t v30 = (char *)a1[2];
    a1[2] = (std::string *)v39;
    uint8x8_t v38 = v8;
    uint64_t v39 = v30;
    int8x8_t v36 = v29;
    unint64_t v37 = v29;
    if (v8 == v29)
    {
      if (!v8) {
        return v20;
      }
    }
    else
    {
      do
      {
        p_data = (void **)&v8[-1].__r_.__value_.__l.__data_;
        uint8x8_t v38 = v8 - 1;
        if (SHIBYTE(v8[-1].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(*p_data);
          p_data = (void **)&v38->__r_.__value_.__l.__data_;
        }
        uint64_t v8 = (std::string *)p_data;
      }
      while (p_data != (void **)v29);
      uint64_t v8 = v36;
      if (!v36) {
        return v20;
      }
    }
    operator delete(v8);
    return v20;
  }
  if (v8 == (std::string *)v5)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(&(*a1)[v7], __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v19 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      v8->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v19;
    }
    a1[1] = v8 + 1;
    return v8;
  }
  double v10 = v8 + 1;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    unint64_t v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      v13->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      ++v13;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((std::string *)v5 == v10) {
      goto LABEL_40;
    }
LABEL_36:
    uint64_t v32 = 8 * ((uint64_t)(v5 - (void)v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      unint64_t v33 = (long long *)((char *)&v8[-1] + v32);
      long long v34 = *v33;
      *(void *)(v11 + 16) = *(void *)((char *)&v8->__r_.__value_.__l + v32 - 8);
      *(_OWORD *)unint64_t v11 = v34;
      v11 -= 24;
      v8->__r_.__value_.__s.__data_[v32 - 1] = 0;
      *(unsigned char *)unint64_t v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_40;
  }
  a1[1] = (std::string *)v5;
  if ((std::string *)v5 != v10) {
    goto LABEL_36;
  }
LABEL_40:
  if (v8 <= (std::string *)v3) {
    std::string::size_type v3 = (long long *)((char *)v3 + 24 * (a1[1] > (std::string *)v3));
  }
  std::string::operator=(v8, (const std::string *)v3);
  return v8;
}

void sub_5D9FC(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_5DA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5DA18(uint64_t a1, long long *a2)
{
  std::string::size_type v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v5 = *(char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 24 * v14;
      unint64_t v17 = (char *)operator new(24 * v14);
      unint64_t v18 = &v17[24 * v15];
      long long v19 = &v17[v16];
      if (v4 == (char *)v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        uint64_t v20 = (uint64_t)&v4[-v6] / 24;
        uint64_t v21 = &v18[24 * v20];
        uint64_t v22 = 24 * v20;
        uint64_t v23 = 24 * v15;
        do
        {
          uint64_t v24 = &v17[v23];
          long long v25 = *(_OWORD *)v6;
          *((void *)v24 + 2) = *(void *)(v6 + 16);
          *(_OWORD *)uint64_t v24 = v25;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)unint64_t v6 = 0;
          v6 += 24;
          v23 += 24;
          v22 -= 24;
        }
        while (v22);
        unint64_t v5 = *(char **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v19;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 1) < 0) {
            operator delete(*(void **)(v27 - 24));
          }
          v27 -= 24;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      std::string::size_type v4 = *(char **)(a1 + 16);
      if ((*((char *)a2 + 23) & 0x80000000) == 0) {
        goto LABEL_26;
      }
LABEL_31:
      sub_4200(v4, *(void **)a2, *((void *)a2 + 1));
      goto LABEL_32;
    }
    int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if ((char *)v6 == v4)
    {
      long long v28 = (char *)(v6 - 24 * v9);
    }
    else
    {
      uint64_t v11 = -24 * v9;
      do
      {
        unint64_t v13 = v6 + v11;
        if (*(char *)(v6 + v11 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        long long v12 = *(_OWORD *)v6;
        *(void *)(v13 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)unint64_t v13 = v12;
        *(unsigned char *)(v6 + 23) = 0;
        *(unsigned char *)unint64_t v6 = 0;
        v6 += 24;
      }
      while ((char *)v6 != v4);
      std::string::size_type v4 = *(char **)(a1 + 8);
      long long v28 = (char *)(v6 + 24 * v10);
    }
    *(void *)(a1 + 8) = &v4[24 * v10];
    *(void *)(a1 + 16) = v28;
    std::string::size_type v4 = v28;
  }
  if (*((char *)a2 + 23) < 0) {
    goto LABEL_31;
  }
LABEL_26:
  long long v29 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *(_OWORD *)std::string::size_type v4 = v29;
LABEL_32:
  *(void *)(a1 + 16) += 24;
}

void sub_5DC3C(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(*(void *)(a2 + 24) + ((uint64_t)(a3[1] - *a3) >> 4)) / *(float *)(a2 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v5 = *(int8x8_t *)(a2 + 8);
  if (prime > *(void *)&v5) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v5) {
    return;
  }
  size_t v6 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
  if (*(void *)&v5 >= 3uLL)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] <= 1uLL)
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        size_t v6 = v8;
      }
      if (prime <= v6) {
        unint64_t prime = v6;
      }
      if (prime >= *(void *)&v5) {
        return;
      }
LABEL_18:
      sub_B6C0(a2, prime);
      return;
    }
  }
  size_t v9 = std::__next_prime(v6);
  if (prime <= v9) {
    unint64_t prime = v9;
  }
  if (prime < *(void *)&v5) {
    goto LABEL_18;
  }
}

void sub_5DD54(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  uint8x8_t v7 = *(void **)a2;
  if (v5 >= 0) {
    uint8x8_t v7 = (void *)a2;
  }
  uint64_t v8 = (void *)*(unsigned __int8 *)(a2 + 23);
  if (v6) {
    uint64_t v8 = *(void **)(a2 + 8);
  }
  __p[0] = v7;
  __p[1] = v8;
  sub_230E8((unsigned __int8 **)__p, 0x2Eu, (uint64_t)&v18);
  if ((*((char *)v19 - 1) & 0x80000000) == 0)
  {
    size_t v9 = v19 - 3;
    long long v10 = *(_OWORD *)(v19 - 3);
    uint64_t v17 = (uint64_t)*(v19 - 1);
    *(_OWORD *)std::string __p = v10;
    long long v19 = v9;
    uint64_t v11 = (void **)v18;
    if (v18 == v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  sub_4200(__p, *(v19 - 3), (unint64_t)*(v19 - 2));
  size_t v9 = v19 - 3;
  if (*((char *)v19 - 1) < 0) {
    operator delete(*v9);
  }
  long long v19 = v9;
  uint64_t v11 = (void **)v18;
  if (v18 != v9)
  {
    do
    {
LABEL_11:
      a1 = (void *)sub_560F4(a1, (uint64_t)v11);
      v11 += 3;
    }
    while (v11 != v9);
  }
LABEL_12:
  *a3 = a1;
  long long v12 = a3 + 1;
  if (SHIBYTE(v17) < 0)
  {
    sub_4200(v12, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v12 = *(_OWORD *)__p;
    v12[2] = v17;
  }
  unint64_t v13 = (void **)v18;
  if (v18)
  {
    unint64_t v14 = v19;
    unint64_t v15 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v15 = v18;
    }
    long long v19 = v13;
    operator delete(v15);
  }
}

void sub_5DEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a15);
  _Unwind_Resume(a1);
}

unsigned int sub_5DEF8(unsigned __int16 **a1, double a2)
{
  if (*((char *)a1 + 23) < 0)
  {
    std::string::size_type v4 = a1[1];
    if (v4 == (unsigned __int16 *)((char *)&def_332C + 3))
    {
      int v5 = *a1;
      if (**a1 == 22367 && *((unsigned char *)*a1 + 2) == 104) {
        return llround(a2 * 1000.0);
      }
      std::string::size_type v4 = a1[1];
      if (v4 == (unsigned __int16 *)((char *)&def_332C + 3))
      {
        int v7 = *v5;
        int v8 = *((unsigned __int8 *)v5 + 2);
        if (v7 == 30559 && v8 == 104) {
          return llround(a2 * 1000.0);
        }
      }
    }
    else if (v4 == (unsigned __int16 *)&dword_4 && (*(_DWORD *)*a1 == 1750560095 || *(_DWORD *)*a1 == 1752657247))
    {
      return llround(a2);
    }
    if (v4 != (unsigned __int16 *)&dword_4) {
      goto LABEL_38;
    }
    long long v10 = *a1;
    if (*(_DWORD *)*a1 == 1750559583) {
      return llround(a2 * 1000.0 * 1000.0);
    }
    if (a1[1] != (unsigned __int16 *)&dword_4)
    {
LABEL_38:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      unint64_t v14 = std::string::append(&v17, "\".");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
      long long v18 = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      uint64_t v16 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
LABEL_23:
    if (*(_DWORD *)v10 == 1752656735) {
      return llround(a2 * 1000.0 * 1000.0);
    }
    goto LABEL_38;
  }
  int v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 != 3)
  {
    if (v2 != 4) {
      goto LABEL_38;
    }
    if ((*(_DWORD *)a1 | 0x200000) == 0x68776D5F) {
      return llround(a2);
    }
    if (*(_DWORD *)a1 == 1750559583) {
      return llround(a2 * 1000.0 * 1000.0);
    }
    long long v10 = (unsigned __int16 *)a1;
    goto LABEL_23;
  }
  if ((*(_WORD *)a1 != 22367 || *((unsigned char *)a1 + 2) != 104) && (*(_WORD *)a1 != 30559 || *((unsigned char *)a1 + 2) != 104)) {
    goto LABEL_38;
  }
  return llround(a2 * 1000.0);
}

void sub_5E15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5E1B4(unsigned __int16 *a1, double a2)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a1 + 23);
    if (v2 != 2)
    {
      if (v2 != 3) {
        goto LABEL_79;
      }
      if (*a1 != 25439 || *((unsigned char *)a1 + 2) != 109)
      {
        if (*a1 != 27487 || *((unsigned char *)a1 + 2) != 109)
        {
          if (*a1 != 26975 || *((unsigned char *)a1 + 2) != 110)
          {
            if (*a1 != 26207 || *((unsigned char *)a1 + 2) != 116)
            {
              int v7 = a1;
              goto LABEL_46;
            }
            goto LABEL_77;
          }
          goto LABEL_75;
        }
        goto LABEL_59;
      }
LABEL_60:
      if (a2 >= 0.0) {
        goto LABEL_61;
      }
      goto LABEL_55;
    }
    if (*a1 != 27999) {
      goto LABEL_79;
    }
LABEL_54:
    a2 = a2 * 100.0;
    if (a2 >= 0.0) {
      goto LABEL_61;
    }
LABEL_55:
    double v19 = a2;
    if (a2 <= -4.50359963e15) {
      goto LABEL_64;
    }
    uint64_t v20 = (uint64_t)(a2 + a2);
    if (v20 >= 1) {
      --v20;
    }
    goto LABEL_63;
  }
  uint64_t v8 = *((void *)a1 + 1);
  if (v8 == 2)
  {
    if (**(_WORD **)a1 == 27999) {
      goto LABEL_54;
    }
    uint64_t v8 = *((void *)a1 + 1);
  }
  else if (v8 == 3 && **(_WORD **)a1 == 25439 && *(unsigned char *)(*(void *)a1 + 2) == 109)
  {
    goto LABEL_60;
  }
  if (v8 != 3) {
    goto LABEL_79;
  }
  long long v10 = *(unsigned __int16 **)a1;
  if (**(_WORD **)a1 == 27487 && *(unsigned char *)(*(void *)a1 + 2) == 109)
  {
LABEL_59:
    a2 = a2 * 100000.0;
    goto LABEL_60;
  }
  if (*((void *)a1 + 1) != 3) {
    goto LABEL_79;
  }
  if (*v10 == 26975 && *((unsigned char *)v10 + 2) == 110)
  {
LABEL_75:
    a2 = a2 * 2.54;
    if (a2 >= 0.0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
  int v13 = *v10;
  int v14 = *((unsigned __int8 *)v10 + 2);
  if (v13 == 26207 && v14 == 116)
  {
LABEL_77:
    a2 = a2 * 30.48;
    if (a2 >= 0.0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
  if (*((void *)a1 + 1) != 3) {
    goto LABEL_79;
  }
  int v7 = *(unsigned __int16 **)a1;
LABEL_46:
  int v16 = *v7;
  int v17 = *((unsigned __int8 *)v7 + 2);
  if (v16 != 27999 || v17 != 105)
  {
LABEL_79:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v24 = std::string::append(&v27, "\".");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v29 = v24->__r_.__value_.__r.__words[2];
    long long v28 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = (void *)sub_2F404((uint64_t)exception, &v28);
  }
  a2 = a2 * 160934.4;
  if (a2 < 0.0) {
    goto LABEL_55;
  }
LABEL_61:
  double v19 = a2;
  if (a2 >= 4.50359963e15) {
    goto LABEL_64;
  }
  uint64_t v20 = (uint64_t)(a2 + a2) + 1;
LABEL_63:
  double v19 = (double)(v20 >> 1);
LABEL_64:
  if (v19 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (a2 >= 0.0)
  {
    if (a2 < 4.50359963e15)
    {
      uint64_t v21 = (uint64_t)(a2 + a2) + 1;
      return (uint64_t)(double)(v21 >> 1);
    }
  }
  else if (a2 > -4.50359963e15)
  {
    uint64_t v21 = (uint64_t)(a2 + a2);
    if (v21 >= 1) {
      --v21;
    }
    return (uint64_t)(double)(v21 >> 1);
  }
  return (uint64_t)a2;
}

void sub_5E52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int sub_5E584(unsigned __int16 *a1, double a2)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *((void *)a1 + 1);
    if (v5 == 2)
    {
      if (**(_WORD **)a1 == 22367) {
        goto LABEL_48;
      }
      uint64_t v5 = *((void *)a1 + 1);
      if (v5 == 2 && **(_WORD **)a1 == 30559) {
        goto LABEL_48;
      }
    }
    else if (v5 == 3)
    {
      BOOL v6 = *(unsigned __int16 **)a1;
      if (**(_WORD **)a1 == 27999 && *(unsigned char *)(*(void *)a1 + 2) == 87) {
        return llround(a2);
      }
      int v8 = *v6;
      int v9 = *((unsigned __int8 *)v6 + 2);
      if (v8 == 27999 && v9 == 119) {
        return llround(a2);
      }
    }
    if (v5 != 3) {
      goto LABEL_50;
    }
    uint64_t v11 = *(unsigned __int16 **)a1;
    if (**(_WORD **)a1 != 27487 || *(unsigned char *)(*(void *)a1 + 2) != 87)
    {
      if (*((void *)a1 + 1) != 3) {
        goto LABEL_50;
      }
LABEL_42:
      int v14 = *v11;
      int v15 = *((unsigned __int8 *)v11 + 2);
      if (v14 != 27487 || v15 != 119)
      {
LABEL_50:
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        double v19 = std::string::append(&v22, "\".");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        std::string::size_type v24 = v19->__r_.__value_.__r.__words[2];
        long long v23 = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        uint64_t v21 = (void *)sub_2F404((uint64_t)exception, &v23);
      }
    }
LABEL_47:
    a2 = a2 * 1000.0;
LABEL_48:
    a2 = a2 * 1000.0;
    return llround(a2);
  }
  int v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 == 2)
  {
    if (*a1 != 22367 && *a1 != 30559) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v2 != 3) {
    goto LABEL_50;
  }
  if ((*a1 != 27999 || *((unsigned char *)a1 + 2) != 87) && (*a1 != 27999 || *((unsigned char *)a1 + 2) != 119))
  {
    if (*a1 != 27487 || *((unsigned char *)a1 + 2) != 87)
    {
      uint64_t v11 = a1;
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  return llround(a2);
}

void sub_5E7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_5E828(uint64_t a1, double result)
{
  int v2 = *(char *)(a1 + 23);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 != 4) {
      goto LABEL_13;
    }
    if (*(_DWORD *)a1 == 1752197983) {
      return result;
    }
    std::string::size_type v3 = (_DWORD *)a1;
    if (*(_DWORD *)a1 != 1936747871) {
      goto LABEL_5;
    }
LABEL_10:
    double v4 = 3.6;
    return result * v4;
  }
  if (*(void *)(a1 + 8) != 4)
  {
LABEL_13:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    BOOL v6 = std::string::append(&v9, "\".");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  std::string::size_type v3 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 == 1752197983) {
    return result;
  }
  if (*v3 == 1936747871) {
    goto LABEL_10;
  }
LABEL_5:
  if (*v3 != 1752198495) {
    goto LABEL_13;
  }
  double v4 = 1.609344;
  return result * v4;
}

void sub_5E964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5E9BC(unsigned __int16 **a1, double a2)
{
  if (*((char *)a1 + 23) < 0)
  {
    std::string::size_type v3 = a1[1];
    if (v3 == (_WORD *)&def_332C + 1)
    {
      if (**a1 == 29535) {
        goto LABEL_39;
      }
      std::string::size_type v3 = a1[1];
    }
    else if (v3 == (unsigned __int16 *)((char *)&def_332C + 3))
    {
      double v4 = *a1;
      if (**a1 == 27999 && *((unsigned char *)*a1 + 2) == 115) {
        goto LABEL_45;
      }
      int v6 = *v4;
      int v7 = *((unsigned __int8 *)v4 + 2);
      if (v6 == 25695 && v7 == 115) {
        goto LABEL_40;
      }
    }
    if (v3 == (unsigned __int16 *)&dword_4)
    {
      if (*(_DWORD *)*a1 == 1852403039)
      {
LABEL_38:
        a2 = a2 * 60.0;
        goto LABEL_39;
      }
      std::string::size_type v3 = a1[1];
    }
    if (v3 != (_WORD *)&def_332C + 1)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      int v15 = std::string::append(&v18, "\".");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v20 = v15->__r_.__value_.__r.__words[2];
      long long v19 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      int v17 = (void *)sub_2F404((uint64_t)exception, &v19);
    }
    std::string v9 = *a1;
LABEL_36:
    if (*v9 == 26719)
    {
      a2 = a2 * 60.0;
      goto LABEL_38;
    }
    goto LABEL_50;
  }
  int v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 == 2)
  {
    if (*(_WORD *)a1 != 29535) {
      goto LABEL_35;
    }
LABEL_39:
    a2 = a2 * 10.0;
    goto LABEL_40;
  }
  if (v2 != 3)
  {
    if (v2 != 4) {
      goto LABEL_50;
    }
    if (*(_DWORD *)a1 == 1852403039) {
      goto LABEL_38;
    }
LABEL_35:
    std::string v9 = (unsigned __int16 *)a1;
    if (v2 != 2) {
      goto LABEL_50;
    }
    goto LABEL_36;
  }
  if (*(_WORD *)a1 != 27999 || *((unsigned char *)a1 + 2) != 115)
  {
    if (*(_WORD *)a1 != 25695 || *((unsigned char *)a1 + 2) != 115) {
      goto LABEL_50;
    }
LABEL_40:
    if (a2 < 0.0) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
LABEL_45:
  a2 = a2 / 100.0;
  if (a2 < 0.0)
  {
LABEL_41:
    if (a2 > -4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(a2 + a2);
      if (v12 >= 1) {
        --v12;
      }
      goto LABEL_48;
    }
    return (int)a2;
  }
LABEL_46:
  if (a2 < 4.50359963e15)
  {
    uint64_t v12 = (uint64_t)(a2 + a2) + 1;
LABEL_48:
    a2 = (double)(v12 >> 1);
  }
  return (int)a2;
}

void sub_5EC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5EC80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  return sub_5ECAC(a2, (uint64_t)&v3);
}

void *sub_5ECAC(void *result, uint64_t a2)
{
  if (*(char *)(*(void *)a2 + 23) < 0)
  {
    if (*(void *)(*(void *)a2 + 8))
    {
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      int v5 = -1;
LABEL_6:
      operator new();
    }
  }
  else if (*(unsigned char *)(*(void *)a2 + 23))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    int v5 = -1;
    goto LABEL_6;
  }
  uint64_t *result = 0;
  result[1] = 0;
  *((_DWORD *)result + 2) = -1;
  return result;
}

void sub_608A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  sub_111ECAC((uint64_t)&__p);
  sub_610A8((uint64_t *)(v16 - 200));
  sub_610A8((uint64_t *)(v16 - 192));
  sub_55198(v16 - 112);
  sub_61DDC((void *)(v16 - 184));
  _Unwind_Resume(a1);
}

void sub_60C08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_69894((uint64_t)v19);
  if (!v19[0])
  {
    sub_E1B4((uint64_t)&v22);
    uint64_t v4 = sub_188FC78(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/common/src/json/JSONParser.cpp", 107);
    sub_188FC78(v4, (uint64_t)":", 1);
    int v5 = (void *)std::ostream::operator<<();
    int v6 = sub_188FC78(v5, (uint64_t)":", 1);
    int v7 = sub_188FC78(v6, (uint64_t)"Failed reading ", 15);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    std::string::size_type v11 = sub_188FC78(v7, v9, v10);
    uint64_t v12 = sub_188FC78(v11, (uint64_t)": ", 2);
    std::error_condition::message(&v18, &__p);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v18;
    }
    else {
      int v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v12, (uint64_t)v13, size);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    std::stringbuf::str();
    uint64_t v16 = (void *)sub_2F404((uint64_t)exception, (long long *)&v18);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_5ECAC(&v22, (uint64_t)&v18);
  if (v23 != 2)
  {
    int v17 = __cxa_allocate_exception(8uLL);
    *int v17 = &off_23FDF58;
  }
  sub_54214(a2, v22);
  sub_5521C((uint64_t *)v23, &v22);
  if (v19[0])
  {
    if (v21 < 0) {
      operator delete(*(void **)&__p.__val_);
    }
  }
}

void sub_60E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1C02990((uint64_t)&a23);
  if (a16)
  {
    if (a22 < 0) {
      operator delete(a17);
    }
  }
  _Unwind_Resume(a1);
}

void sub_60EB4(void *a1, uint64_t *a2)
{
  int v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    *int v5 = v6;
    int v7 = v5 + 1;
LABEL_3:
    a1[1] = v7;
    return;
  }
  uint64_t v8 = (uint64_t)v5 - *a1;
  uint64_t v9 = v8 >> 3;
  unint64_t v10 = (v8 >> 3) + 1;
  if (v10 >> 61) {
    sub_2E00();
  }
  uint64_t v11 = v4 - *a1;
  uint64_t v12 = v11 >> 2;
  if (v11 >> 2 <= v10) {
    uint64_t v12 = (v8 >> 3) + 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_188D718();
    }
    int v14 = (char *)operator new(8 * v13);
  }
  else
  {
    int v14 = 0;
  }
  int v15 = &v14[8 * v9];
  uint64_t v16 = &v14[8 * v13];
  uint64_t v17 = *a2;
  *a2 = 0;
  *(void *)int v15 = v17;
  int v7 = v15 + 8;
  std::string v18 = (char *)*a1;
  long long v19 = (char *)a1[1];
  if (v19 == (char *)*a1)
  {
    *a1 = v15;
    a1[1] = v7;
    a1[2] = v16;
  }
  else
  {
    unint64_t v20 = (unint64_t)&v19[-*a1 - 8];
    if (v20 < 0x78
      || &v19[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v15 && &v14[v8 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v19)
    {
      goto LABEL_35;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v15 -= v22;
    unsigned int v23 = &v19[-v22];
    std::string::size_type v24 = v19 - 16;
    long long v25 = &v14[8 * v9 - 16];
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *((_OWORD *)v24 - 1);
      long long v27 = *(_OWORD *)v24;
      *((_OWORD *)v24 - 1) = 0uLL;
      *(_OWORD *)std::string::size_type v24 = 0uLL;
      *((_OWORD *)v25 - 1) = v28;
      *(_OWORD *)long long v25 = v27;
      v24 -= 32;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    long long v19 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        uint64_t v29 = *((void *)v19 - 1);
        v19 -= 8;
        *(void *)long long v19 = 0;
        *((void *)v15 - 1) = v29;
        v15 -= 8;
      }
      while (v19 != v18);
    }
    long long v19 = (char *)*a1;
    uint64_t v30 = (char *)a1[1];
    *a1 = v15;
    a1[1] = v7;
    a1[2] = v16;
    while (v30 != v19)
    {
      uint64_t v32 = *((void *)v30 - 1);
      v30 -= 8;
      uint64_t v31 = v32;
      *(void *)uint64_t v30 = 0;
      if (v32)
      {
        if (*(char *)(v31 + 39) < 0) {
          operator delete(*(void **)(v31 + 16));
        }
        sub_5521C((uint64_t *)*(unsigned int *)(v31 + 8), (uint64_t *)v31);
        operator delete();
      }
    }
  }
  if (!v19) {
    goto LABEL_3;
  }
  operator delete(v19);
  a1[1] = v7;
}

uint64_t *sub_610A8(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    sub_5521C((uint64_t *)*(unsigned int *)(v1 + 8), (uint64_t *)v1);
    operator delete();
  }
  return result;
}

char *sub_61110(char *a1)
{
  uint64_t v1 = a1;
  LOBYTE(v2) = *a1;
  if (*a1)
  {
    while (1)
    {
      if ((v2 & 0x80) != 0)
      {
        if (__maskrune((char)v2, 0x4000uLL)) {
          goto LABEL_3;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[(char)v2] & 0x4000) != 0)
      {
        goto LABEL_3;
      }
      __darwin_ct_rune_t v4 = *v1;
      if (v4 < 0)
      {
        if (__maskrune(v4, 0x40000uLL)) {
          goto LABEL_12;
        }
LABEL_3:
        int v3 = *++v1;
        LOBYTE(v2) = v3;
        if (!v3) {
          return v1;
        }
      }
      else
      {
        if ((_DefaultRuneLocale.__runetype[v4] & 0x40000) == 0) {
          goto LABEL_3;
        }
LABEL_12:
        if (*v1 != 47) {
          return v1;
        }
        int v2 = v1[1];
        if (v2 != 47) {
          return v1;
        }
        int v5 = 47;
        while (v5 != 10)
        {
          unsigned __int8 v6 = *++v1;
          LOBYTE(v2) = v6;
          int v5 = v6;
          if (!v6) {
            return v1;
          }
        }
      }
    }
  }
  return v1;
}

uint64_t sub_611D4(uint64_t a1, unsigned __int8 *a2)
{
  LOBYTE(v2) = *a2;
  if (!*a2) {
    return 0;
  }
  int v3 = a2;
  while (1)
  {
    while (1)
    {
      if ((v2 & 0x80) != 0)
      {
        if (__maskrune((char)v2, 0x4000uLL)) {
          goto LABEL_4;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[(char)v2] & 0x4000) != 0)
      {
        goto LABEL_4;
      }
      __darwin_ct_rune_t v6 = (char)*v3;
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v6, 0x40000uLL)) {
        goto LABEL_11;
      }
LABEL_4:
      int v5 = *++v3;
      LOBYTE(v2) = v5;
      if (!v5) {
        return 0;
      }
    }
    if ((_DefaultRuneLocale.__runetype[v6] & 0x40000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    int v7 = *v3;
    if (v7 != 47) {
      break;
    }
    int v2 = v3[1];
    if (v2 != 47) {
      return 0;
    }
    int v8 = 47;
    while (v8 != 10)
    {
      unsigned __int8 v9 = *++v3;
      LOBYTE(v2) = v9;
      int v8 = v9;
      if (!v9) {
        return 0;
      }
    }
  }
  if (v7 != 34) {
    return 0;
  }
  uint64_t v11 = *(void **)a1;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)a1 + 23);
  if (*(char *)(*(void *)a1 + 23) < 0)
  {
    unint64_t v13 = (unsigned __int8 *)(*v11 + v11[1]);
    int v14 = v3;
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)memchr(v14 + 1, 34, v13 - (v14 + 1));
      int v14 = v16 ? v16 : v13;
      if (v14 == v13) {
        break;
      }
      if (*(v14 - 1) != 92) {
        goto LABEL_34;
      }
    }
  }
  else
  {
    unint64_t v13 = (unsigned __int8 *)v11 + v12;
    int v14 = v3;
    while (1)
    {
      int v15 = (char *)memchr(v14 + 1, 34, v13 - (v14 + 1));
      int v14 = v15 ? (unsigned __int8 *)v15 : (unsigned __int8 *)v11 + v12;
      if (v14 == v13) {
        break;
      }
      if (*(v14 - 1) != 92) {
        goto LABEL_34;
      }
    }
  }
  int v14 = v13;
LABEL_34:
  if ((v12 & 0x80) != 0)
  {
    uint64_t v17 = v11;
    uint64_t v11 = (void *)*v11;
    uint64_t v12 = v17[1];
  }
  if ((unsigned __int8 *)((char *)v11 + v12) >= v14 + 1) {
    std::string v18 = (char *)(v14 + 1);
  }
  else {
    std::string v18 = (char *)v11 + v12;
  }
  unsigned int v19 = *v18;
  if (!*v18) {
    goto LABEL_55;
  }
  while (1)
  {
    if ((v19 & 0x80) != 0)
    {
      if (__maskrune((char)v19, 0x4000uLL)) {
        goto LABEL_42;
      }
    }
    else if ((_DefaultRuneLocale.__runetype[(char)v19] & 0x4000) != 0)
    {
      goto LABEL_42;
    }
    __darwin_ct_rune_t v21 = *v18;
    if (v21 < 0) {
      __uint32_t v22 = __maskrune(v21, 0x40000uLL);
    }
    else {
      __uint32_t v22 = _DefaultRuneLocale.__runetype[v21] & 0x40000;
    }
    if (!v22)
    {
LABEL_42:
      unsigned int v20 = *++v18;
      unsigned int v19 = v20;
      if (!v20) {
        goto LABEL_55;
      }
      continue;
    }
    int v23 = *v18;
    if (v23 != 47) {
      break;
    }
    unsigned int v19 = v18[1];
    if (v19 != 47) {
      goto LABEL_54;
    }
    int v24 = 47;
    while (v24 != 10)
    {
      unsigned __int8 v25 = *++v18;
      LOBYTE(v19) = v25;
      int v24 = v25;
      if (!v25) {
        goto LABEL_54;
      }
    }
  }
  if (v23 != 58)
  {
LABEL_54:
    unsigned int v19 = 0;
    goto LABEL_55;
  }
  uint64_t v26 = *(void **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0)
  {
    uint64_t v27 = v26[1];
    if (v14 != (unsigned __int8 *)(*v26 + v27))
    {
      uint64_t v26 = (void *)*v26;
      goto LABEL_66;
    }
    goto LABEL_54;
  }
  uint64_t v27 = *(unsigned __int8 *)(*(void *)a1 + 23);
  if (v14 == (unsigned __int8 *)((char *)v26 + v27)) {
    goto LABEL_54;
  }
LABEL_66:
  unsigned int v19 = v18 != (char *)v26 + v27;
LABEL_55:
  if (v14 >= (unsigned __int8 *)v18) {
    unsigned int v19 = 0;
  }
  if (v3 < v14) {
    return v19;
  }
  else {
    return 0;
  }
}

double sub_61460(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v3 = (unint64_t)a3;
  LOBYTE(v6) = *a3;
  if (*a3)
  {
    while (1)
    {
      if ((v6 & 0x80) != 0)
      {
        if (__maskrune((char)v6, 0x4000uLL)) {
          goto LABEL_3;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[(char)v6] & 0x4000) != 0)
      {
        goto LABEL_3;
      }
      __darwin_ct_rune_t v8 = *(char *)v3;
      if (v8 < 0)
      {
        if (__maskrune(v8, 0x40000uLL)) {
          goto LABEL_12;
        }
LABEL_3:
        int v7 = *(unsigned __int8 *)++v3;
        LOBYTE(v6) = v7;
        if (!v7) {
          break;
        }
      }
      else
      {
        if ((_DefaultRuneLocale.__runetype[v8] & 0x40000) == 0) {
          goto LABEL_3;
        }
LABEL_12:
        if (*(unsigned char *)v3 != 47) {
          break;
        }
        int v6 = *(unsigned __int8 *)(v3 + 1);
        if (v6 != 47) {
          break;
        }
        int v9 = 47;
        while (v9 != 10)
        {
          unsigned __int8 v10 = *(unsigned char *)++v3;
          LOBYTE(v6) = v10;
          int v9 = v10;
          if (!v10) {
            goto LABEL_17;
          }
        }
      }
    }
  }
LABEL_17:
  uint64_t v11 = *(void **)a2;
  if (*(char *)(*(void *)a2 + 23) < 0)
  {
    uint64_t v12 = 0;
    __uint32_t v22 = (char *)(*v11 + v11[1]);
    do
    {
      uint64_t v14 = v12;
      uint64_t v23 = v12 + 1;
      int v24 = (char *)(v3 + v12 + 1);
      unsigned __int8 v25 = (char *)memchr(v24, 34, v22 - v24);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = v22;
      }
      int64_t v19 = v26 - v24;
      uint64_t v12 = v19 + v23;
      unsigned int v20 = (char *)(v3 + v19 + v23);
    }
    while (*(v20 - 1) == 92 && v20 < v22);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)v11 + *(unsigned __int8 *)(*(void *)a2 + 23);
    do
    {
      uint64_t v14 = v12;
      uint64_t v15 = v12 + 1;
      uint64_t v16 = (char *)(v3 + v12 + 1);
      uint64_t v17 = (char *)memchr(v16, 34, v13 - v16);
      if (v17) {
        std::string v18 = v17;
      }
      else {
        std::string v18 = v13;
      }
      int64_t v19 = v18 - v16;
      uint64_t v12 = v19 + v15;
      unsigned int v20 = (char *)(v3 + v19 + v15);
    }
    while (*(v20 - 1) == 92 && v20 < v13);
  }
  std::string::size_type v28 = v19 + v14;
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v28 > 0x16)
  {
    uint64_t v37 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v37 = v28 | 7;
    }
    uint64_t v38 = v37 + 1;
    p_p = (std::string *)operator new(v37 + 1);
    __p.__r_.__value_.__l.__size_ = v28;
    __p.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    if (v12 != 1) {
      goto LABEL_40;
    }
LABEL_49:
    uint64_t v32 = p_p;
    goto LABEL_53;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v28;
  p_p = &__p;
  if (v12 == 1) {
    goto LABEL_49;
  }
LABEL_40:
  uint64_t v30 = (char *)(v3 + 1);
  unint64_t v31 = (unint64_t)&v20[~v3];
  if (v31 < 0x20)
  {
    uint64_t v32 = p_p;
  }
  else if ((unint64_t)p_p + ~v3 < 0x20)
  {
    uint64_t v32 = p_p;
  }
  else
  {
    uint64_t v32 = (std::string *)((char *)p_p + (v31 & 0xFFFFFFFFFFFFFFE0));
    v30 += v31 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v33 = (long long *)(v3 + 17);
    long long v34 = &p_p->__r_.__value_.__r.__words[2];
    unint64_t v35 = v31 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *((_OWORD *)v34 - 1) = *(v33 - 1);
      *(_OWORD *)long long v34 = v36;
      v33 += 2;
      v34 += 4;
      v35 -= 32;
    }
    while (v35);
    if (v31 == (v31 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_53;
    }
  }
  do
  {
    std::string::value_type v39 = *v30++;
    v32->__r_.__value_.__s.__data_[0] = v39;
    uint64_t v32 = (std::string *)((char *)v32 + 1);
  }
  while (v30 != v20);
LABEL_53:
  v32->__r_.__value_.__s.__data_[0] = 0;
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  unint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  else {
    unint64_t v41 = &__p;
  }
  v46[0] = (uint64_t)v41;
  v46[1] = size;
  sub_62414(v46, &v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  double result = *(double *)&v49.__r_.__value_.__l.__data_;
  std::string __p = v49;
  v48[0] = v49.__r_.__value_.__l.__size_;
  std::string::size_type v43 = v49.__r_.__value_.__r.__words[0];
  *(void *)((char *)v48 + 7) = *(_OWORD *)&v49.__r_.__value_.__r.__words[1] >> 56;
  char v44 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  v49.__r_.__value_.__r.__words[0] = v48[0];
  *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  std::string::size_type v45 = v49.__r_.__value_.__r.__words[0];
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v45;
  *(void *)(a1 + 15) = *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a1 + 23) = v44;
  *(void *)(a1 + 24) = v20 + 1;
  return result;
}

void sub_6179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_617C4(unsigned __int8 *a1)
{
  uint64_t v1 = a1;
  LOBYTE(v2) = *a1;
  if (!*a1) {
    return v1;
  }
  while (1)
  {
    while (1)
    {
      if ((v2 & 0x80) != 0)
      {
        if (__maskrune((char)v2, 0x4000uLL)) {
          goto LABEL_3;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[(char)v2] & 0x4000) != 0)
      {
        goto LABEL_3;
      }
      __darwin_ct_rune_t v4 = (char)*v1;
      if ((v4 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v4, 0x40000uLL)) {
        goto LABEL_12;
      }
LABEL_3:
      int v3 = *++v1;
      LOBYTE(v2) = v3;
      if (!v3) {
        return v1;
      }
    }
    if ((_DefaultRuneLocale.__runetype[v4] & 0x40000) == 0) {
      goto LABEL_3;
    }
LABEL_12:
    int v5 = *v1;
    if (v5 != 47) {
      break;
    }
    int v2 = v1[1];
    if (v2 != 47) {
      return v1;
    }
    int v6 = 47;
    while (v6 != 10)
    {
      unsigned __int8 v7 = *++v1;
      LOBYTE(v2) = v7;
      int v6 = v7;
      if (!v7) {
        return v1;
      }
    }
  }
  if (v5 == 44)
  {
LABEL_19:
    while (1)
    {
      int v10 = *++v1;
      LOBYTE(v9) = v10;
      if (!v10) {
        break;
      }
      while (1)
      {
        if ((v9 & 0x80) != 0)
        {
          if (__maskrune((char)v9, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else if ((_DefaultRuneLocale.__runetype[(char)v9] & 0x4000) != 0)
        {
          goto LABEL_19;
        }
        __darwin_ct_rune_t v11 = (char)*v1;
        if (!(v11 < 0 ? __maskrune(v11, 0x40000uLL) : _DefaultRuneLocale.__runetype[v11] & 0x40000)) {
          break;
        }
        if (*v1 != 47) {
          return v1;
        }
        int v9 = v1[1];
        if (v9 != 47) {
          return v1;
        }
        int v13 = 47;
        while (v13 != 10)
        {
          unsigned __int8 v14 = *++v1;
          LOBYTE(v9) = v14;
          int v13 = v14;
          if (!v14) {
            return v1;
          }
        }
      }
    }
  }
  return v1;
}

uint64_t sub_6191C(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  int v2 = a2 + 1;
  int v3 = v4;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (a1 + (unint64_t)*(unsigned __int8 *)(a1 + 23) >= (unint64_t)v2) {
      int v5 = (char *)v2;
    }
    else {
      int v5 = (char *)(a1 + *(unsigned __int8 *)(a1 + 23));
    }
    unsigned int v6 = *v5;
    if (*v5) {
      goto LABEL_15;
    }
    goto LABEL_6;
  }
  if (*(void *)a1 + *(void *)(a1 + 8) >= (unint64_t)v2) {
    int v5 = (char *)v2;
  }
  else {
    int v5 = (char *)(*(void *)a1 + *(void *)(a1 + 8));
  }
  unsigned int v6 = *v5;
  if (!*v5)
  {
LABEL_6:
    if (v3 == 123) {
      return v6;
    }
    else {
      return 0;
    }
  }
  while (1)
  {
    while (1)
    {
LABEL_15:
      if ((v6 & 0x80) != 0)
      {
        if (__maskrune((char)v6, 0x4000uLL)) {
          goto LABEL_14;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[(char)v6] & 0x4000) != 0)
      {
        goto LABEL_14;
      }
      __darwin_ct_rune_t v9 = *v5;
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x40000uLL)) {
        goto LABEL_23;
      }
LABEL_14:
      unsigned int v8 = *++v5;
      unsigned int v6 = v8;
      if (!v8) {
        goto LABEL_6;
      }
    }
    if ((_DefaultRuneLocale.__runetype[v9] & 0x40000) == 0) {
      goto LABEL_14;
    }
LABEL_23:
    int v10 = *v5;
    if (v10 != 47 || v5[1] != 47) {
      break;
    }
    LOBYTE(v6) = 47;
    int v11 = 47;
    while (v11 != 10)
    {
      unsigned __int8 v12 = *++v5;
      LOBYTE(v6) = v12;
      int v11 = v12;
      if (!v12) {
        return 0;
      }
    }
  }
  BOOL v13 = v10 == 125;
  return v3 == 123 && v13;
}

void sub_61A5C()
{
}

void sub_61B1C()
{
}

uint64_t sub_61B80(unsigned __int8 *a1)
{
  char v2 = 0;
  for (uint64_t i = *a1 == 45; ; ++i)
  {
    uint64_t v4 = a1[i];
    if (a1[i] > 0x44u) {
      break;
    }
    if (v4 == 46)
    {
      if (v2) {
        goto LABEL_13;
      }
      char v2 = 1;
      continue;
    }
    if (!a1[i]) {
      goto LABEL_13;
    }
LABEL_11:
    if ((v4 & 0x80) != 0 || (_DefaultRuneLocale.__runetype[v4] & 0x400) == 0)
    {
LABEL_13:
      int v5 = &a1[i];
      goto LABEL_14;
    }
  }
  if (v4 != 69 && v4 != 101) {
    goto LABEL_11;
  }
  int v5 = &a1[i];
  if (i)
  {
    int v16 = *++v5;
    if (v16 == 45) {
      ++v5;
    }
    while (1)
    {
      uint64_t v17 = *v5;
      BOOL v18 = (v17 - 46) > 0x37 || ((1 << (v17 - 46)) & 0x80000000800001) == 0;
      BOOL v19 = !v18 || v17 == 0;
      if (v19 || (v17 & 0x80) != 0 || (_DefaultRuneLocale.__runetype[v17] & 0x400) == 0) {
        break;
      }
      ++v5;
    }
  }
LABEL_14:
  size_t __idx = 0;
  unint64_t v6 = v5 - a1;
  if ((unint64_t)(v5 - a1) >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 > 0x16)
  {
    uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v14 = v6 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_p = (std::string *)operator new(v14 + 1);
    __p.__r_.__value_.__l.__size_ = v5 - a1;
    __p.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    if (v5 == a1) {
      goto LABEL_26;
    }
LABEL_17:
    if (v6 < 0x20 || (unint64_t)((char *)p_p - (char *)a1) < 0x20)
    {
      unsigned int v8 = p_p;
      __darwin_ct_rune_t v9 = a1;
    }
    else
    {
      unsigned int v8 = (std::string *)((char *)p_p + (v6 & 0xFFFFFFFFFFFFFFE0));
      __darwin_ct_rune_t v9 = &a1[v6 & 0xFFFFFFFFFFFFFFE0];
      int v10 = (long long *)(a1 + 16);
      int v11 = &p_p->__r_.__value_.__r.__words[2];
      unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v13 = *v10;
        *((_OWORD *)v11 - 1) = *(v10 - 1);
        *(_OWORD *)int v11 = v13;
        v10 += 2;
        v11 += 4;
        v12 -= 32;
      }
      while (v12);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_42;
      }
    }
    do
    {
      std::string::value_type v20 = *v9++;
      v8->__r_.__value_.__s.__data_[0] = v20;
      unsigned int v8 = (std::string *)((char *)v8 + 1);
    }
    while (v9 != v5);
    goto LABEL_42;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = (_BYTE)v5 - (_BYTE)a1;
  p_p = &__p;
  if (v5 != a1) {
    goto LABEL_17;
  }
LABEL_26:
  unsigned int v8 = p_p;
LABEL_42:
  v8->__r_.__value_.__s.__data_[0] = 0;
  double v21 = std::stod(&__p, &__idx);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (&a1[__idx] == v5) {
    return *(void *)&v21;
  }
  else {
    return 0;
  }
}

void sub_61D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x61D70);
  }
  _Unwind_Resume(exception_object);
}

void *sub_61DDC(void *a1)
{
  char v2 = (void *)*a1;
  if (*a1)
  {
    int v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6)
        {
          if (*(char *)(v5 + 39) < 0) {
            operator delete(*(void **)(v5 + 16));
          }
          sub_5521C((uint64_t *)*(unsigned int *)(v5 + 8), (uint64_t *)v5);
          operator delete();
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_61E80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_188D718();
    }
    unsigned int v8 = (char *)operator new(16 * v7);
  }
  else
  {
    unsigned int v8 = 0;
  }
  __darwin_ct_rune_t v9 = &v8[16 * v7];
  uint64_t v10 = sub_584A4((uint64_t)&v8[16 * v3], a2);
  uint64_t v11 = v10 + 16;
  long long v13 = (uint64_t *)*a1;
  unint64_t v12 = (uint64_t *)a1[1];
  if (v12 == (uint64_t *)*a1)
  {
    uint64_t v14 = (uint64_t *)a1[1];
  }
  else
  {
    do
    {
      v12 -= 2;
      uint64_t v10 = sub_584A4(v10 - 16, (uint64_t)v12);
    }
    while (v12 != v13);
    uint64_t v14 = (uint64_t *)*a1;
    unint64_t v12 = (uint64_t *)a1[1];
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = (uint64_t)v9;
  while (v12 != v14)
  {
    uint64_t v15 = (uint64_t *)*((unsigned int *)v12 - 2);
    v12 -= 2;
    sub_5521C(v15, v12);
  }
  if (v14) {
    operator delete(v14);
  }
  return v11;
}

uint64_t *sub_61F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v44, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          unint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v27 = operator new(0x38uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  void *v27 = 0;
  v27[1] = v12;
  std::string::size_type v28 = v27 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v28, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string::size_type v28 = *(_OWORD *)a3;
    v27[4] = *(void *)(a3 + 16);
  }
  sub_584A4((uint64_t)(v27 + 5), a4);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v33 = 1;
    if (v13 >= 3) {
      BOOL v33 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v13);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v41 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v12;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v12));
      uint64_t v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v42 >= v13) {
          v42 %= v13;
        }
      }
      else
      {
        v42 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  unint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  *unint64_t v31 = v44[0];
LABEL_92:
  int v16 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_623E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_623FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_62414(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char v2 = a2;
  unint64_t v3 = a1[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v4 = *a1;
  if (v3 < 0x17)
  {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v3;
    uint64_t v5 = (char *)a2;
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17) {
    uint64_t v6 = v3 | 7;
  }
  uint64_t v7 = v6 + 1;
  uint64_t v5 = (char *)operator new(v6 + 1);
  v2->__r_.__value_.__l.__size_ = v3;
  v2->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v3 < 0x20 || (unint64_t)&v5[-v4] < 0x20)
  {
LABEL_13:
    unsigned int v8 = (std::string::value_type *)v4;
    a2 = (std::string *)v5;
    do
    {
LABEL_14:
      std::string::value_type v13 = *v8++;
      a2->__r_.__value_.__s.__data_[0] = v13;
      a2 = (std::string *)((char *)a2 + 1);
    }
    while (v8 != (std::string::value_type *)(v4 + v3));
    goto LABEL_15;
  }
  unsigned int v8 = (std::string::value_type *)(v4 + (v3 & 0xFFFFFFFFFFFFFFE0));
  a2 = (std::string *)&v5[v3 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v9 = v5 + 16;
  unint64_t v10 = (long long *)(v4 + 16);
  unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v12 = *v10;
    *(v9 - 1) = *(v10 - 1);
    _OWORD *v9 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 32;
  }
  while (v11);
  if (v3 != (v3 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_14;
  }
LABEL_15:
  a2->__r_.__value_.__s.__data_[0] = 0;
  char v17 = 2;
  strcpy((char *)v16, "\\\"");
  char v15 = 1;
  LOWORD(__p) = 34;
  sub_625E4(v2, (char *)v16, (uint64_t)&__p);
  if ((v15 & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v16[0]);
    return;
  }
  operator delete(__p);
  if (v17 < 0) {
    goto LABEL_19;
  }
}

void sub_62590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

std::string *sub_625E4(std::string *this, char *a2, uint64_t a3)
{
  int v3 = a2[23];
  BOOL v25 = v3 < 0;
  std::string::size_type v4 = *((void *)a2 + 1);
  std::string::size_type v5 = a2[23];
  if (v3 >= 0) {
    int64_t v6 = a2[23];
  }
  else {
    int64_t v6 = *((void *)a2 + 1);
  }
  if (v6)
  {
    unsigned int v8 = this;
    std::string::size_type v9 = 0;
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      unint64_t v11 = this;
    }
    else {
      unint64_t v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if ((v5 & 0x80u) == 0) {
      long long v12 = a2;
    }
    else {
      long long v12 = *(char **)a2;
    }
    while (!v6)
    {
LABEL_23:
      if (v9 != -1)
      {
        if (v25) {
          std::string::size_type v18 = v4;
        }
        else {
          std::string::size_type v18 = v5;
        }
        int v19 = *(char *)(a3 + 23);
        if (v19 >= 0) {
          uint64_t v20 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v20 = *(const std::string::value_type **)a3;
        }
        if (v19 >= 0) {
          std::string::size_type v21 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v21 = *(void *)(a3 + 8);
        }
        this = std::string::replace(v8, v9, v18, v20, v21);
        uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(a3 + 8);
        }
        v9 += v22;
        std::string::size_type size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0) {
          unint64_t v11 = v8;
        }
        else {
          unint64_t v11 = (std::string *)v8->__r_.__value_.__r.__words[0];
        }
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v8->__r_.__value_.__l.__size_;
        }
        int v23 = a2[23];
        BOOL v25 = v23 < 0;
        std::string::size_type v4 = *((void *)a2 + 1);
        std::string::size_type v5 = a2[23];
        long long v12 = v23 >= 0 ? a2 : *(char **)a2;
        int64_t v6 = v23 >= 0 ? a2[23] : *((void *)a2 + 1);
        if (size >= v9) {
          continue;
        }
      }
      return this;
    }
    this = (std::string *)((char *)v11 + v9);
    std::string::value_type v13 = (std::string *)((char *)v11 + size);
    int64_t v14 = size - v9;
    if (v14 >= v6)
    {
      int v15 = *v12;
      do
      {
        int64_t v16 = v14 - v6;
        if (v16 == -1) {
          break;
        }
        this = (std::string *)memchr(this, v15, v16 + 1);
        if (!this) {
          break;
        }
        char v17 = this;
        this = (std::string *)memcmp(this, v12, v6);
        if (!this)
        {
          if (v17 == v13) {
            return this;
          }
          std::string::size_type v9 = (char *)v17 - (char *)v11;
          goto LABEL_23;
        }
        this = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        int64_t v14 = (char *)v13 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
      }
      while (v14 >= v6);
    }
  }
  return this;
}

std::string *sub_6277C(uint64_t a1, std::string *__str)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 1) {
    operator new();
  }
  if (v3) {
    sub_6287C(v3, (void ***)a1);
  }
  double result = std::string::operator=(*(std::string **)a1, __str);
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

void sub_62858()
{
}

void sub_6287C(int a1, void ***a2)
{
  if (a1 == 2)
  {
    char v2 = *a2;
    *a2 = 0;
    if (v2)
    {
      sub_5450C((uint64_t)v2);
      operator delete();
    }
    operator new();
  }

  sub_62978(a1, a2);
}

void sub_62954()
{
}

void sub_62978(int a1, void ***a2)
{
  if (a1 != 4)
  {
    if (a1 == 3)
    {
      char v2 = *a2;
      *a2 = 0;
      if (v2)
      {
        int v3 = v2;
        sub_54FE0(&v3);
        operator delete();
      }
      operator new();
    }
    sub_62AD0(a1);
  }
  operator new();
}

void sub_62AA8()
{
}

void sub_62AD0(int a1)
{
  if (a1 == 5) {
    operator new();
  }
  operator new();
}

void sub_62BB0()
{
}

void sub_62BDC(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::string::size_type v4 = *(char **)(a1 + 16);
    if (v4)
    {
      do
      {
        int64_t v16 = *(char **)v4;
        sub_57AC8((uint64_t *)v4 + 5);
        if (v4[39] < 0) {
          operator delete(*((void **)v4 + 2));
        }
        operator delete(v4);
        std::string::size_type v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  unsigned int v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *unint64_t v10 = 0;
    v10[1] = 0;
  }
}

uint64_t *sub_62CF0(uint64_t *a1)
{
  if (*a1)
  {
    sub_5B788(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_62D2C(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  size_t v7 = *((unsigned __int8 *)a2 + 23);
  int v19 = "/";
  int v8 = (char)v7;
  if ((v7 & 0x80u) == 0) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  if (v9)
  {
    unint64_t v10 = v9 + 7;
    if (v9 + 7 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v10 > 0x16)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_p = operator new(v13 + 1);
      size_t v17 = v9 + 7;
      unint64_t v18 = v14 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      size_t v17 = 0;
      unint64_t v18 = 0;
      std::string __p = 0;
      p_p = &__p;
      HIBYTE(v18) = v9 + 7;
    }
    if (v8 >= 0) {
      unint64_t v15 = a2;
    }
    else {
      unint64_t v15 = *a2;
    }
    memmove(p_p, v15, v9);
    strcpy((char *)p_p + v9, ".lproj/");
  }
  else
  {
    HIBYTE(v18) = 0;
    LOBYTE(__p) = 0;
  }
  sub_62E98(a1, &v19, (uint64_t)&__p, a3, a4);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
}

void sub_62E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_62E98(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_E1B4((uint64_t)v26);
  int v10 = *(char *)(a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  sub_188FC78(v27, v11, v12);
  uint64_t v13 = *a2;
  size_t v14 = strlen(v13);
  sub_188FC78(v27, (uint64_t)v13, v14);
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = *(void *)a3;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  sub_188FC78(v27, v16, v17);
  int v18 = *(char *)(a4 + 23);
  if (v18 >= 0) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = *(void *)a4;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v20 = *(void *)(a4 + 8);
  }
  sub_188FC78(v27, v19, v20);
  int v21 = *(char *)(a5 + 23);
  if (v21 >= 0) {
    uint64_t v22 = a5;
  }
  else {
    uint64_t v22 = *(void *)a5;
  }
  if (v21 >= 0) {
    uint64_t v23 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v23 = *(void *)(a5 + 8);
  }
  sub_188FC78(v27, v22, v23);
  std::stringbuf::str();
  *(void *)((char *)v26
  v27[0] = v24;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_630B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_630C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_630DC(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  char v23 = 5;
  strcpy((char *)v22, ".json");
  sub_62D2C(a1, a2, a3, (uint64_t)v22);
  sub_636CC(v40);
  if (!v40[17])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    uint64_t v16 = (void *)sub_2F480((uint64_t)exception, 8u);
  }
  memset(&v29, 0, sizeof(v29));
  std::istream::tellg();
  std::string::resize(&v29, __n, 0);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  std::string::size_type __n = 0;
  std::istream::seekg();
  std::istream::read();
  if (*((unsigned char *)&v40[4] + (unint64_t)*(v40[0] - 3)))
  {
    uint64_t v17 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    int v18 = std::string::append(&v30, "'");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    uint64_t v27 = (void **)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = (void *)sub_2F404((uint64_t)v17, (long long *)__p);
  }
  sub_5EC80((uint64_t)&v29, &v30);
  if (LODWORD(v30.__r_.__value_.__r.__words[1]) != 2)
  {
    int v21 = __cxa_allocate_exception(8uLL);
    *int v21 = &off_23FDF58;
  }
  sub_54214((uint64_t)__p, (uint64_t)v30.__r_.__value_.__l.__data_);
  sub_5521C((uint64_t *)LODWORD(v30.__r_.__value_.__r.__words[1]), (uint64_t *)&v30);
  unint64_t prime = vcvtps_u32_f32((float)v28 / *(float *)(a4 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v6 = *(int8x8_t *)(a4 + 8);
  if (prime > *(void *)&v6) {
    goto LABEL_9;
  }
  if (prime < *(void *)&v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      unint64_t prime = v7;
    }
    if (prime < *(void *)&v6) {
LABEL_9:
    }
      sub_B6C0(a4, prime);
  }
  int v10 = v27;
  if (v27)
  {
    do
    {
      if (*((_DWORD *)v10 + 12))
      {
        size_t v14 = __cxa_allocate_exception(8uLL);
        *size_t v14 = &off_23FDF58;
      }
      sub_63974(a4, (uint64_t)(v10 + 2), (uint64_t)(v10 + 2), (uint64_t)v10[5]);
      int v10 = (void **)*v10;
    }
    while (v10);
    uint64_t v11 = v27;
    if (v27)
    {
      do
      {
        uint64_t v13 = (void **)*v11;
        sub_55198((uint64_t)(v11 + 5));
        if (*((char *)v11 + 39) < 0) {
          operator delete(v11[2]);
        }
        operator delete(v11);
        uint64_t v11 = v13;
      }
      while (v13);
    }
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  if ((v25 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(v22[0]);
    return;
  }
  operator delete(v24);
  if (v23 < 0) {
    goto LABEL_35;
  }
}

void sub_63594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
      {
LABEL_8:
        sub_638A8(&a59);
        if (a20 < 0) {
          operator delete(a15);
        }
        if (a14 < 0) {
          operator delete(a9);
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a30);
      goto LABEL_8;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if ((a35 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void (__cdecl ***sub_636CC(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  std::string::size_type v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_63864(_Unwind_Exception *a1)
{
}

void *sub_638A8(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t *sub_63974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v41, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    int v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          unint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  sub_63D9C(a1, v12, a3, a4, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v13 || (float)(v28 * (float)v13) < v27)
  {
    BOOL v30 = 1;
    if (v13 >= 3) {
      BOOL v30 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v13);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v38 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        std::string v29 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        std::string v29 = *(void **)(*(void *)a1 + 8 * v12);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v38 & v12;
      std::string v29 = *(void **)(*(void *)a1 + 8 * (v38 & v12));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v39 >= v13) {
          v39 %= v13;
        }
      }
      else
      {
        v39 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  std::string v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  *std::string v29 = v41[0];
LABEL_89:
  uint64_t v16 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_63D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_63D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x40uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v10 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  double result = v11 + 5;
  if (*(char *)(a4 + 23) < 0)
  {
    double result = sub_4200(result, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)double result = *(_OWORD *)a4;
    v11[7] = *(void *)(a4 + 16);
  }
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_63E50(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    sub_2D9D4(v1);
    _Unwind_Resume(a1);
  }
  sub_2D9D4(v1);
  _Unwind_Resume(a1);
}

void sub_63E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint8x8_t v8 = (const char *)a1;
  }
  else {
    uint8x8_t v8 = *(const char **)a1;
  }
  CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
  CFURLRef v10 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v9, kCFURLPOSIXPathStyle, 1u);
  CFRelease(v9);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v44 = std::string::append(&v80, "'");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    std::string::size_type v72 = v44->__r_.__value_.__r.__words[2];
    long long v71 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    char v46 = (void *)sub_2F404((uint64_t)exception, &v71);
  }
  CFBundleRef v11 = CFBundleCreate(kCFAllocatorDefault, v10);
  CFRelease(v10);
  if (!v11)
  {
    unint64_t v47 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v48 = std::string::append(&v80, "'");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    std::string::size_type v72 = v48->__r_.__value_.__r.__words[2];
    long long v71 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    unsigned int v50 = (void *)sub_2F404((uint64_t)v47, &v71);
  }
  if (*(char *)(a3 + 23) >= 0) {
    unint64_t v12 = (const char *)a3;
  }
  else {
    unint64_t v12 = *(const char **)a3;
  }
  CFStringRef v13 = CFStringCreateWithCString(0, v12, 0x8000100u);
  if (*(char *)(a2 + 23) >= 0) {
    uint8x8_t v14 = (const char *)a2;
  }
  else {
    uint8x8_t v14 = *(const char **)a2;
  }
  CFStringRef v15 = CFStringCreateWithCString(0, v14, 0x8000100u);
  CFDictionaryRef v16 = (const __CFDictionary *)CFBundleCopyLocalizedStringTableForLocalization();
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  if (!v16)
  {
    uint64_t v51 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unsigned int v52 = std::string::append(&v75, "' ");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    int v54 = std::string::append(&v76, " (locale: '");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    int v56 = *(char *)(a2 + 23);
    if (v56 >= 0) {
      char v57 = (const std::string::value_type *)a2;
    }
    else {
      char v57 = *(const std::string::value_type **)a2;
    }
    if (v56 >= 0) {
      std::string::size_type v58 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v58 = *(void *)(a2 + 8);
    }
    unsigned int v59 = std::string::append(&v77, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    unsigned int v61 = std::string::append(&v78, "') from bundle '");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    int v63 = *(char *)(a1 + 23);
    if (v63 >= 0) {
      unsigned int v64 = (const std::string::value_type *)a1;
    }
    else {
      unsigned int v64 = *(const std::string::value_type **)a1;
    }
    if (v63 >= 0) {
      std::string::size_type v65 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v65 = *(void *)(a1 + 8);
    }
    unsigned int v66 = std::string::append(&v79, v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    int v68 = std::string::append(&v80, "'");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    std::string::size_type v72 = v68->__r_.__value_.__r.__words[2];
    long long v71 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    int v70 = (void *)sub_2F404((uint64_t)v51, &v71);
  }
  unint64_t Count = CFDictionaryGetCount(v16);
  unint64_t prime = vcvtps_u32_f32((float)Count / *(float *)(a4 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v19 = *(int8x8_t *)(a4 + 8);
  if (prime > *(void *)&v19) {
    goto LABEL_18;
  }
  if (prime < *(void *)&v19)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
    if (*(void *)&v19 >= 3uLL)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          size_t v20 = v22;
        }
        if (prime <= v20) {
          unint64_t prime = v20;
        }
        if (prime >= *(void *)&v19) {
          goto LABEL_31;
        }
LABEL_18:
        sub_B6C0(a4, prime);
        goto LABEL_31;
      }
    }
    size_t v23 = std::__next_prime(v20);
    if (prime <= v23) {
      unint64_t prime = v23;
    }
    if (prime < *(void *)&v19) {
      goto LABEL_18;
    }
  }
LABEL_31:
  if (Count)
  {
    long long v71 = 0uLL;
    std::string::size_type v72 = 0;
    if (Count >> 61) {
      sub_2E00();
    }
    uint64_t v24 = operator new(8 * Count);
    bzero(v24, 8 * Count);
    uint64_t v25 = operator new(8 * Count);
    bzero(v25, 8 * Count);
    CFDictionaryGetKeysAndValues(v16, (const void **)v24, (const void **)v25);
    uint64_t v26 = 0;
    while (1)
    {
      sub_67D0(*((const __CFString **)v24 + v26), &v80);
      sub_67D0(*((const __CFString **)v25 + v26), &v79);
      sub_64808(a4, (uint64_t)&v80, (uint64_t)&v80, (uint64_t)&v79);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v79.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_38:
        operator delete(v80.__r_.__value_.__l.__data_);
        if (Count == ++v26)
        {
LABEL_39:
          operator delete(v25);
          operator delete(v24);
          CFRelease(v16);
          return;
        }
      }
      else
      {
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_38;
        }
LABEL_35:
        if (Count == ++v26) {
          goto LABEL_39;
        }
      }
    }
  }
  CFRelease(v16);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v71);
    float v27 = sub_188FC78(&v71, (uint64_t)"Falling back to JSON. Could not load '", 38);
    int v28 = *(char *)(a3 + 23);
    if (v28 >= 0) {
      uint64_t v29 = a3;
    }
    else {
      uint64_t v29 = *(void *)a3;
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v30 = *(void *)(a3 + 8);
    }
    unint64_t v31 = sub_188FC78(v27, v29, v30);
    unint64_t v32 = sub_188FC78(v31, (uint64_t)"' ", 2);
    long long v33 = sub_188FC78(v32, (uint64_t)" (locale: '", 11);
    int v34 = *(char *)(a2 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a2;
    }
    else {
      uint64_t v35 = *(void *)a2;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a2 + 8);
    }
    uint64_t v37 = sub_188FC78(v33, v35, v36);
    unint64_t v38 = sub_188FC78(v37, (uint64_t)"') from bundle '", 16);
    int v39 = *(char *)(a1 + 23);
    if (v39 >= 0) {
      uint64_t v40 = a1;
    }
    else {
      uint64_t v40 = *(void *)a1;
    }
    if (v39 >= 0) {
      uint64_t v41 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v41 = *(void *)(a1 + 8);
    }
    unint64_t v42 = sub_188FC78(v38, v40, v41);
    sub_188FC78(v42, (uint64_t)"'", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v80, 1u);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (v74 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_630DC(a1, (const void **)a2, a3, a4);
}

void sub_645B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v50 - 89) < 0)
  {
    operator delete(*(void **)(v50 - 112));
    if (*(char *)(v50 - 121) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v50 - 144));
      if (*(char *)(v50 - 153) < 0)
      {
LABEL_10:
        operator delete(*(void **)(v50 - 176));
        if (*(char *)(v50 - 185) < 0)
        {
LABEL_13:
          operator delete(*(void **)(v50 - 208));
          if (*(char *)(v50 - 217) < 0)
          {
LABEL_16:
            operator delete(*(void **)(v50 - 240));
            if ((a50 & 0x80000000) == 0) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
LABEL_18:
          if ((a50 & 0x80000000) == 0) {
LABEL_20:
          }
            _Unwind_Resume(a1);
LABEL_19:
          operator delete(a45);
          goto LABEL_20;
        }
LABEL_15:
        if (*(char *)(v50 - 217) < 0) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
LABEL_12:
      if (*(char *)(v50 - 185) < 0) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*(char *)(v50 - 121) < 0)
  {
    goto LABEL_7;
  }
  if (*(char *)(v50 - 153) < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

unsigned __int8 *sub_64808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v43, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    CFStringRef v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      CFDictionaryRef v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          unint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v16 + 1);
            if (v23 == v12)
            {
              uint64_t v24 = v16[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v16[39];
              }
              else {
                uint64_t v25 = *((void *)v16 + 3);
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                    return v16;
                  }
                }
                else
                {
                  if (!v16[39]) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (v16[v26 + 16] == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            CFDictionaryRef v16 = *(unsigned __int8 **)v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v12)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v7, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          CFDictionaryRef v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  float v27 = (void *)(a1 + 16);
  CFDictionaryRef v16 = (unsigned __int8 *)operator new(0x40uLL);
  v43[0] = v16;
  v43[1] = a1 + 16;
  *(void *)CFDictionaryRef v16 = 0;
  *((void *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)a4;
  *((void *)v16 + 7) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (v13 && (float)(v29 * (float)v13) >= v28)
  {
    uint64_t v30 = *(void *)a1;
    unint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
    if (v31)
    {
LABEL_54:
      *(void *)CFDictionaryRef v16 = *v31;
LABEL_89:
      *unint64_t v31 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v32 = 1;
    if (v13 >= 3) {
      BOOL v32 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v13);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v30 = *(void *)a1;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v30 = *(void *)a1;
        unint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        if (v31) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v40 & v12;
      uint64_t v30 = *(void *)a1;
      unint64_t v31 = *(void **)(*(void *)a1 + 8 * (v40 & v12));
      if (v31) {
        goto LABEL_54;
      }
    }
  }
  *(void *)CFDictionaryRef v16 = *v27;
  void *v27 = v16;
  *(void *)(v30 + 8 * v4) = v27;
  if (*(void *)v16)
  {
    unint64_t v41 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v41 >= v13) {
        v41 %= v13;
      }
    }
    else
    {
      v41 &= v13 - 1;
    }
    unint64_t v31 = (void *)(*(void *)a1 + 8 * v41);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_64C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_64C48@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1[23];
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = *(unsigned __int8 **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = *((void *)a1 + 1);
  }
  if (v3 >= 3) {
    unint64_t v3 = 3;
  }
  if (v3)
  {
    if (v3 == 1)
    {
      int v6 = *v4;
    }
    else
    {
      int v5 = *v4;
      if (v3 == 2) {
        int v6 = v5 | (v4[1] << 8);
      }
      else {
        int v6 = v5 | (v4[1] << 8) | (v4[2] << 16);
      }
    }
  }
  else
  {
    int v6 = 0;
  }
  int __src = v6 - (v3 << 24) + 50331648;
  unint64_t v13 = sub_1133F08(&__src);
  uint64_t result = sub_1133EF0((uint64_t)&v13);
  if (result == 16800346)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  uint64_t result = sub_1133EFC((uint64_t)&v13);
  int __src = result;
  size_t v8 = 3 - BYTE3(result);
  if (v8 >= 0x17)
  {
    uint64_t v9 = (v8 & 0xFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v9 = v8 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = operator new(v9 + 1);
    a2[1] = v8;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = v11;
    a2 = v11;
  }
  else
  {
    *((unsigned char *)a2 + 23) = 3 - BYTE3(result);
    if (BYTE3(result) == 3)
    {
      *((unsigned char *)a2 + v8) = 0;
      return result;
    }
  }
  uint64_t result = (uint64_t)memcpy(a2, &__src, v8);
  *((unsigned char *)a2 + v8) = 0;
  return result;
}

BOOL sub_64DBC(uint64_t *a1)
{
  uint64_t v2 = sub_1133030(a1);
  return *(void *)sub_1132EF8(&v2) == 0x30000006E74614CLL;
}

uint64_t sub_64E00(unsigned int a1, int a2)
{
  uint64_t v2 = 4;
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 23:
    case 25:
    case 29:
    case 30:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return 4 * (a1 != 1);
    case 1:
      if (a1 == 1) {
        return 0;
      }
      if (a1 == 2) {
        return 1;
      }
      if (a1 % 0x64 - 3 < 8) {
        return 2;
      }
      if (a1 % 0x64 > 0xA) {
        return 3;
      }
      else {
        return 4;
      }
    case 7:
      unsigned int v8 = a1 % 0x64;
      if (a1 % 0xA == 1 && v8 != 11) {
        return 0;
      }
      if (v8 - 12 >= 3 && a1 % 0xA - 5 >= 0xFFFFFFFD) {
        return 2;
      }
      else {
        return 4;
      }
    case 8:
    case 28:
      if (a1 - 1 < 4) {
        return dword_20B9190[a1 - 1];
      }
      return 4;
    case 16:
      if (a1 == 2) {
        unsigned int v11 = 1;
      }
      else {
        unsigned int v11 = 4;
      }
      if (a1 == 1) {
        return 0;
      }
      else {
        return v11;
      }
    case 24:
      if (a1 == 1) {
        return 0;
      }
      if (a1 % 0xA - 2 > 2)
      {
        if (a1 % 0xA - 5 < 0xFFFFFFFD) {
          return 3;
        }
      }
      else if (a1 % 0x64 - 12 >= 3)
      {
        return 2;
      }
      if (a1 % 0x64 - 12 < 3) {
        return 3;
      }
      else {
        return 4;
      }
    case 26:
      if (a1 == 1) {
        return 0;
      }
      if (~(100 * (a1 / 0x64)) + a1 >= 0x13) {
        return 4;
      }
      else {
        return 2;
      }
    case 27:
    case 33:
      unsigned int v4 = a1 % 0x64;
      if (a1 % 0xA == 1 && v4 != 11) {
        return 0;
      }
      unsigned int v6 = a1 % 0xA - 5;
      if (v6 >= 0xFFFFFFFD && v4 - 12 > 2) {
        return 2;
      }
      uint64_t v2 = 3;
      if (v6 < 0xFFFFFFFC) {
        return v2;
      }
      if (v4 - 11 < 4) {
        return 3;
      }
      else {
        return 4;
      }
    default:
      return v2;
  }
}

void sub_65140()
{
}

void sub_651A0()
{
}

id **sub_651C4(id **result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

void sub_65214(id **a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a3;
  if (*a2 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  unsigned int v6 = objc_opt_new();
  unint64_t v7 = *a2;
  unsigned int v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      if (*((char *)v7 + 23) >= 0) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = (uint64_t *)*v7;
      }
      uint64_t v10 = +[NSString stringWithUTF8String:v9];
      [v6 addObject:v10];

      v7 += 3;
    }
    while (v7 != v8);
  }
  unsigned int v11 = [**a1 stringFromItems:v6];
  unint64_t v12 = v11;
  if (!v11)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v22);
      sub_188FC78(v22, (uint64_t)"Failed to format list of strings in NSListFormatter.", 52);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v21 < 0) {
        operator delete(__p);
      }
      if (v23 < 0) {
        operator delete((void *)v22[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    void *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    goto LABEL_25;
  }
  id v13 = v11;
  id v14 = [v13 UTF8String];
  unint64_t v15 = (unint64_t)[v13 lengthOfBytesUsingEncoding:4];
  size_t v16 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    unint64_t v19 = operator new(v17 + 1);
    v3[1] = v16;
    v3[2] = v18 | 0x8000000000000000;
    void *v3 = v19;
    unint64_t v3 = v19;
  }
  else
  {
    *((unsigned char *)v3 + 23) = v15;
    if (!v15) {
      goto LABEL_24;
    }
  }
  memmove(v3, v14, v16);
LABEL_24:
  *((unsigned char *)v3 + v16) = 0;

LABEL_25:
}

void sub_654C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_65500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_65518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_65528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_65540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_65550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_65564(id *a1, unsigned int a2)
{
  *a1 = 0;
  uint64_t v4 = objc_opt_new();
  id v5 = *a1;
  *a1 = (id)v4;

  sub_65AF0(a2, __p);
  if (v11 >= 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = (void **)__p[0];
  }
  unint64_t v7 = +[NSString stringWithUTF8String:v6];
  unsigned int v8 = +[NSLocale localeWithLocaleIdentifier:v7];

  [*a1 setLocale:v8];
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_65644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v16;

  if (a15 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_656AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550880, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2550880))
  {
    return qword_2550878;
  }
  double v1 = sub_11207C4(&v3);
  (*(void (**)(void *__return_ptr, double))(*(void *)v3 + 16))(v4, v1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4[0] + 56))(v5);
  uint64_t v2 = sub_1134760(v5);
  sub_14A84((uint64_t)v5);
  sub_14A84((uint64_t)v4);
  sub_14A84((uint64_t)&v3);
  qword_2550878 = (uint64_t)v2;
  __cxa_guard_release(&qword_2550880);
  return qword_2550878;
}

void sub_657A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_657E8(_Unwind_Exception *a1)
{
}

uint64_t sub_65800()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2550890, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2550890))
  {
    return qword_2550888;
  }
  double v1 = sub_11207C4(&v3);
  (*(void (**)(void *__return_ptr, double))(*(void *)v3 + 16))(v4, v1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4[0] + 56))(v5);
  uint64_t v2 = sub_1134760(v5);
  sub_14A84((uint64_t)v5);
  sub_14A84((uint64_t)v4);
  sub_14A84((uint64_t)&v3);
  qword_2550888 = (uint64_t)v2;
  __cxa_guard_release(&qword_2550890);
  return qword_2550888;
}

void sub_658FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_6593C(_Unwind_Exception *a1)
{
}

uint64_t sub_65954()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25508A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_25508A0))
  {
    return qword_2550898;
  }
  double v1 = sub_11207C4(&v3);
  (*(void (**)(void *__return_ptr, double))(*(void *)v3 + 16))(v4, v1);
  (*(void (**)(void *__return_ptr))(*(void *)v4[0] + 24))(v5);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5[0] + 56))(v6);
  uint64_t v2 = sub_1134760(v6);
  sub_14A84((uint64_t)v6);
  sub_14A84((uint64_t)v5);
  sub_14A84((uint64_t)v4);
  sub_14A84((uint64_t)&v3);
  qword_2550898 = (uint64_t)v2;
  __cxa_guard_release(&qword_25508A0);
  return qword_2550898;
}

void sub_65A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_14A84(v13 - 32);
  sub_14A84((uint64_t)&a13);
  sub_14A84((uint64_t)&a11);
  sub_14A84((uint64_t)&a9);
  __cxa_guard_abort(&qword_25508A0);
  _Unwind_Resume(a1);
}

void sub_65AD8(_Unwind_Exception *a1)
{
}

uint64_t sub_65AF0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  uint64_t v9 = sub_1133298(a1);
  uint64_t result = sub_1132F04(&v9);
  size_t v4 = *(void *)(result + 8);
  if (v4 >= 8) {
    id v5 = (const void *)(result + 16);
  }
  else {
    id v5 = (const void *)result;
  }
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    unsigned int v8 = operator new(v6 + 1);
    a2[1] = v4;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  uint64_t result = (uint64_t)memcpy(a2, v5, v4);
  *((unsigned char *)a2 + v4) = 0;
  return result;
}

double sub_65BC8(uint64_t a1)
{
  return *(double *)a1;
}

uint64_t sub_65BD0(uint64_t a1, int a2)
{
  return a2 ^ 1u;
}

uint64_t sub_65BD8()
{
  return 1;
}

BOOL sub_65BE0(double *a1, double *a2)
{
  return *a1 == *a2;
}

long double sub_65BF4(double *a1, double a2)
{
  double v2 = *a1;
  return a1[2] + v2 * exp(a1[1] * a2);
}

uint64_t sub_65C34(double *a1, int a2)
{
  if (*a1 == 0.0) {
    return a2 ^ 1u;
  }
  double v2 = a1[1];
  if (v2 == 0.0) {
    return a2 ^ 1u;
  }
  else {
    return (*a1 >= 0.0) ^ (v2 < 0.0);
  }
}

BOOL sub_65C6C(double *a1)
{
  return *a1 == 0.0 || a1[1] == 0.0;
}

BOOL sub_65C90(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double sub_65CCC(double *a1, double a2)
{
  return *a1 * a2 + a1[1];
}

BOOL sub_65CDC(double *a1, int a2)
{
  if (a2) {
    return *a1 > 0.0;
  }
  else {
    return *a1 >= 0.0;
  }
}

BOOL sub_65CF8(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

long double sub_65D24(double *a1, double a2)
{
  double v2 = *a1;
  return a1[3] + v2 * log(a1[1] * a2 + a1[2]);
}

BOOL sub_65D6C(double *a1, double *a2)
{
  return *a1 == *a2 && a1[2] == a2[2] && a1[3] == a2[3];
}

void *sub_65DA8(void *result)
{
  unsigned char *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x7FF0000000000000;
  return result;
}

uint64_t sub_65DB8@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0x7FF0000000000000;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(void *)result + 16;
  if (*(void *)result != v5 && v6 != v5)
  {
    while (1)
    {
      double v9 = *(double *)(v6 - 16);
      double v8 = *(double *)(v6 - 8);
      double v11 = *(double *)v6;
      double v10 = *(double *)(v6 + 8);
      double v12 = v9 - *(double *)v6;
      double v13 = (v8 - v10) / v12;
      double v14 = (v9 * v10 - v8 * *(double *)v6) / v12;
      *(double *)uint64_t v18 = v13;
      *((double *)v18 + 1) = v14;
      int v19 = 1;
      double v17 = v9;
      unint64_t v16 = *a3;
      uint64_t v15 = a3[1];
      if (*a3 == v15) {
        goto LABEL_16;
      }
      uint64_t result = sub_66760((uint64_t)v18, v15 - 48);
      if ((result & 1) == 0) {
        break;
      }
LABEL_12:
      *((double *)a3 + 3) = v11;
      v6 += 16;
      if (v6 == v5) {
        goto LABEL_6;
      }
    }
    unint64_t v16 = a3[1];
LABEL_16:
    if (v16 >= a3[2])
    {
      uint64_t result = sub_66818(a3, v18, &v17);
    }
    else
    {
      sub_66DAC(v16, v18, v9);
      uint64_t result = v16 + 48;
      a3[1] = v16 + 48;
    }
    a3[1] = result;
    goto LABEL_12;
  }
LABEL_6:
  if (a2)
  {
    if (a3[1] == *a3) {
      sub_66748();
    }
    *(void *)(*a3 + 40) = 0xFFF0000000000000;
    a3[3] = 0x7FF0000000000000;
  }
  return result;
}

void sub_65F18(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_65F44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_669E8(&v3, (uint64_t)a1, &v2);
  return v3;
}

uint64_t sub_65F7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  sub_669E8(&v3, a1, &v2);
  return v3;
}

void *sub_65FB4(void *result)
{
  result[1] = *result;
  result[3] = 0x7FF0000000000000;
  return result;
}

BOOL sub_65FC8(void *a1)
{
  return *a1 != a1[1];
}

double sub_65FD8(uint64_t a1)
{
  return *(double *)(*(void *)a1 + 40);
}

uint64_t sub_65FE8(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + 48;
  if (*(void *)a1 == v5 || v6 == v5)
  {
    int v9 = 1;
  }
  else
  {
    int v9 = 1;
    do
    {
      v9 &= sub_66FB8(v6 - 48, a2, *(double *)(v6 - 8), *(double *)(v6 + 40));
      sub_66E30(v6 - 48, *(double *)(v6 + 40));
      double v11 = v10;
      sub_66E30(v6, *(double *)(v6 + 40));
      if (v11 > v12 + a3) {
        int v9 = 0;
      }
      v6 += 48;
    }
    while (v6 != v5);
    uint64_t v5 = *(void *)(a1 + 8);
  }
  return v9 & sub_66FB8(v5 - 48, a2, *(double *)(v5 - 8), *(double *)(a1 + 24));
}

BOOL sub_660B4(void *a1, double a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  if (v2 <= 1) {
    unint64_t v3 = 1;
  }
  else {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  }
  if (v2 < 2) {
    return 1;
  }
  uint64_t v7 = 0;
  unint64_t v8 = v3 - 2;
  do
  {
    uint64_t v9 = *a1 + v7;
    double v10 = *(double *)(v9 + 88);
    sub_66E30(v9 + 48, v10);
    double v12 = v11;
    sub_66E30(*a1 + v7, v10);
    double v14 = vabdd_f64(v12, v13);
    BOOL v16 = v8-- != 0;
    BOOL result = v14 <= a2;
    if (v14 > a2) {
      break;
    }
    v7 += 48;
  }
  while (v16);
  return result;
}

void sub_66188(uint64_t a1, double a2)
{
  if (*(double *)(*(void *)a1 + 40) <= a2 && *(double *)(a1 + 24) >= a2)
  {
    uint64_t v3 = *(void *)a1 + 48;
    uint64_t v4 = *(void *)(a1 + 8) - v3;
    if (v4 >= 48)
    {
      if (v4 != 48)
      {
        unint64_t v5 = v4 / 0x30uLL;
        do
        {
          uint64_t v6 = 48 * (v5 >> 2);
          _X13 = v3 + v6;
          __asm { PRFM            #0, [X13] }
          unint64_t v12 = v3 + 48 * (v5 >> 1);
          _X12 = v12 + v6;
          __asm { PRFM            #0, [X12] }
          if (*(double *)(v12 + 40) > a2) {
            unint64_t v15 = 0;
          }
          else {
            unint64_t v15 = v5 >> 1;
          }
          v3 += 48 * v15;
          v5 -= v5 >> 1;
        }
        while ((uint64_t)v5 > 1);
      }
      v3 += 48 * (*(double *)(v3 + 40) <= a2);
    }
    sub_66E30(v3 - 48, a2);
  }
}

uint64_t sub_66234(uint64_t a1, long long *a2, double a3, double a4)
{
  double v11 = a3;
  unint64_t v9 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(void *)a1 != v8)
  {
    uint64_t result = sub_66760((uint64_t)a2, v8 - 48);
    if (result) {
      goto LABEL_8;
    }
    unint64_t v9 = *(void *)(a1 + 8);
  }
  if (v9 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_66818((uint64_t *)a1, a2, &v11);
  }
  else
  {
    sub_66DAC(v9, a2, a3);
    uint64_t result = v9 + 48;
    *(void *)(a1 + 8) = v9 + 48;
  }
  *(void *)(a1 + 8) = result;
LABEL_8:
  *(double *)(a1 + 24) = a4;
  return result;
}

void sub_662DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_662E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0x7FF0000000000000;
  uint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  do
  {
    while (1)
    {
      int v10 = *(_DWORD *)(v7 + 32);
      switch(v10)
      {
        case 0:
          *((void *)&v11 + 1) = *((void *)&v23 + 1);
          *(void *)&long long v11 = *(void *)v7;
          goto LABEL_8;
        case 1:
        case 2:
        case 3:
        case 4:
          long long v11 = *(_OWORD *)v7;
LABEL_8:
          long long v23 = v11;
          break;
        default:
          break;
      }
      double v12 = *(double *)(v7 + 40);
      unint64_t v14 = *a2;
      uint64_t v13 = a2[1];
      uint64_t v15 = *a2;
      if (*a2 != v13)
      {
        uint64_t v15 = a2[1];
        if (v12 <= *(double *)(v13 - 8))
        {
          uint64_t v15 = v13 - 48;
          a2[1] = v13 - 48;
        }
      }
      if (v10 == 1) {
        break;
      }
      if (v10)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      double v16 = *(double *)&v23;
      if (*(double *)&v23 >= a3) {
        double v16 = a3;
      }
      double v22 = v16;
      *(double *)float v27 = v16;
      int v28 = 0;
      *(double *)uint64_t v25 = v12;
      if (v14 == v15) {
        goto LABEL_19;
      }
      uint64_t result = sub_66760((uint64_t)v27, v15 - 48);
      if ((result & 1) == 0)
      {
        unint64_t v14 = a2[1];
LABEL_19:
        if (v14 >= a2[2])
        {
          uint64_t result = sub_66818(a2, v27, (double *)v25);
        }
        else
        {
          sub_66DAC(v14, v27, v12);
          uint64_t result = v14 + 48;
          a2[1] = v14 + 48;
        }
        a2[1] = result;
      }
      a2[3] = 0x7FF0000000000000;
      *((void *)&v9 + 1) = *((void *)&v23 + 1);
      v7 += 48;
      *(double *)&long long v9 = v22;
      long long v23 = v9;
      if (v7 == v6) {
        goto LABEL_55;
      }
    }
    double v17 = *((double *)&v23 + 1);
    if (*(double *)&v23 != 0.0)
    {
      if (*(double *)&v23 <= 0.0)
      {
        *(double *)float v27 = a3;
        int v28 = 0;
        v25[0] = v23;
        double v18 = (a3 - *((double *)&v23 + 1)) / *(double *)&v23;
        int v26 = 1;
        if (v18 <= v12)
        {
LABEL_31:
          double v24 = v12;
          if (v14 != v15)
          {
            uint64_t result = sub_66760((uint64_t)v25, v15 - 48);
            if (result) {
              goto LABEL_52;
            }
            unint64_t v14 = a2[1];
          }
          if (v14 < a2[2])
          {
            sub_66DAC(v14, v25, v12);
            goto LABEL_50;
          }
          goto LABEL_42;
        }
      }
      else
      {
        v27[0] = v23;
        int v28 = 1;
        *(double *)uint64_t v25 = a3;
        double v18 = (a3 - *((double *)&v23 + 1)) / *(double *)&v23;
        int v26 = 0;
        if (v18 <= v12) {
          goto LABEL_31;
        }
      }
      double v24 = v12;
      if (v14 == v15 || (v19 = sub_66760((uint64_t)v27, v15 - 48), unint64_t v14 = a2[1], !v19))
      {
        if (v14 >= a2[2])
        {
          unint64_t v14 = sub_66818(a2, v27, &v24);
        }
        else
        {
          sub_66DAC(v14, v27, v12);
          v14 += 48;
          a2[1] = v14;
        }
        a2[1] = v14;
      }
      a2[3] = 0x7FF0000000000000;
      double v24 = v18;
      if (*a2 != v14)
      {
        uint64_t result = sub_66760((uint64_t)v25, v14 - 48);
        if (result) {
          goto LABEL_52;
        }
        unint64_t v14 = a2[1];
      }
      if (v14 < a2[2])
      {
        sub_66DAC(v14, v25, v18);
        goto LABEL_50;
      }
LABEL_42:
      uint64_t result = sub_66818(a2, v25, &v24);
      goto LABEL_51;
    }
    if (*((double *)&v23 + 1) >= a3) {
      double v17 = a3;
    }
    *(double *)float v27 = v17;
    int v28 = 0;
    *(double *)uint64_t v25 = v12;
    if (v14 != v15)
    {
      uint64_t result = sub_66760((uint64_t)v27, v15 - 48);
      if (result) {
        goto LABEL_52;
      }
      unint64_t v14 = a2[1];
    }
    if (v14 < a2[2])
    {
      sub_66DAC(v14, v27, v12);
LABEL_50:
      uint64_t result = v14 + 48;
      a2[1] = v14 + 48;
      goto LABEL_51;
    }
    uint64_t result = sub_66818(a2, v27, (double *)v25);
LABEL_51:
    a2[1] = result;
LABEL_52:
    a2[3] = 0x7FF0000000000000;
    v7 += 48;
  }
  while (v7 != v6);
LABEL_55:
  uint64_t v20 = a1[3];
  *(void *)(*a2 + 40) = *(void *)(*a1 + 40);
  a2[3] = v20;
  return result;
}

void sub_666F0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_66748()
{
}

BOOL sub_66760(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  BOOL result = 1;
  switch(v2)
  {
    case -1:
      return result;
    case 0:
      BOOL result = sub_65BE0((double *)a1, (double *)a2);
      break;
    case 1:
      BOOL result = sub_65CF8((double *)a1, (double *)a2);
      break;
    case 2:
      BOOL result = sub_66D60((double *)a1, (double *)a2);
      break;
    case 3:
      BOOL result = sub_65C90((double *)a1, (double *)a2);
      break;
    case 4:
      BOOL result = sub_65D6C((double *)a1, (double *)a2);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_66818(uint64_t *a1, long long *a2, double *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(48 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v10 = sub_66DAC((uint64_t)&v9[48 * v4], a2, *a3);
  uint64_t v11 = v10 + 48;
  uint64_t v13 = (char *)*a1;
  double v12 = (char *)a1[1];
  if (v12 != (char *)*a1)
  {
    uint64_t v14 = 0;
    do
    {
      *(_DWORD *)(v10 + v14 - 16) = *(_DWORD *)&v12[v14 - 16];
      double v16 = (void *)(v10 + v14 - 48);
      double v17 = &v12[v14 - 48];
      switch(*(_DWORD *)&v12[v14 - 16])
      {
        case 0:
          *double v16 = *(void *)v17;
          break;
        case 1:
          long long v15 = *(_OWORD *)v17;
          goto LABEL_14;
        case 2:
        case 4:
          long long v15 = *(_OWORD *)v17;
          *(_OWORD *)(v10 + v14 - 32) = *(_OWORD *)&v12[v14 - 32];
          goto LABEL_14;
        case 3:
          long long v15 = *(_OWORD *)v17;
          *(void *)(v10 + v14 - 32) = *(void *)&v12[v14 - 32];
LABEL_14:
          *(_OWORD *)double v16 = v15;
          break;
        default:
          break;
      }
      *(void *)(v10 + v14 - 8) = *(void *)&v12[v14 - 8];
      v14 -= 48;
    }
    while (&v12[v14] != v13);
    double v12 = (char *)*a1;
    v10 += v14;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = (uint64_t)&v9[48 * v8];
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_669BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_669E8(void *result, uint64_t a2, void *a3)
{
  unsigned char *result = a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_669F8(uint64_t result)
{
  *(void *)(result + 8) += 48;
  return result;
}

uint64_t sub_66A08(void *a1)
{
  return a1[1];
}

void *sub_66A30(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < *(void *)*result || v1 >= *(void *)(*result + 8))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "access to invalid math sub-function iterator");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_66AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_66AE8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

BOOL sub_66AFC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

double sub_66B10(void *a1)
{
  return *(double *)(a1[1] + 40);
}

double sub_66B3C(uint64_t *a1)
{
  sub_66A30(a1);
  uint64_t v2 = a1[1] + 48;
  sub_65F7C(*a1);
  if (v2 != v3) {
    return *(double *)(a1[1] + 88);
  }
  sub_65FD8(*a1);
  return v5;
}

void sub_66B94(void *a1, double a2)
{
  sub_66A30(a1);
  uint64_t v4 = a1[1];

  sub_66E30(v4, a2);
}

uint64_t sub_66BDC(void *a1)
{
  sub_66A30(a1);
  uint64_t v2 = a1[1];

  return sub_66F0C(v2);
}

double sub_66C14(double *a1, double a2)
{
  return a1[3] + a2 * a2 * a2 * *a1 + a2 * a2 * a1[1] + a1[2] * a2;
}

BOOL sub_66C40(double *a1, int a2, double a3, double a4)
{
  int v4 = a2 ^ 1;
  double v6 = *a1;
  double v5 = a1[1];
  BOOL v7 = 1;
  if (((a2 ^ 1) & 1) == 0 && v6 == 0.0 && v5 == 0.0) {
    BOOL v7 = a1[2] != 0.0;
  }
  double v8 = v5 + v5;
  double v9 = v6 * 3.0;
  double v10 = v8 / (v6 * 3.0);
  double v11 = a1[2];
  double v12 = v10 * v10 * 0.25;
  if (v12 >= v11 / v9)
  {
    double v13 = v10 * -0.5;
    double v14 = sqrt(v12 - v11 / v9);
    double v15 = v10 * -0.5 + v14;
    double v16 = v13 - v14;
    if (v15 > a3 && v15 < a4)
    {
      BOOL v18 = 0;
      if (!v7) {
        return 0;
      }
    }
    else
    {
      BOOL v18 = v16 <= a3;
      if (v16 >= a4) {
        BOOL v18 = 1;
      }
      if (!v7) {
        return 0;
      }
    }
    if (v15 != v16) {
      int v4 = 0;
    }
    if ((v4 | v18)) {
      goto LABEL_20;
    }
  }
  else if (v7)
  {
LABEL_20:
    double v19 = (a4 - a3) * 0.5 + a3;
    return v11 + v19 * (v19 * v19) * 0.0 + v19 * v19 * v9 + v19 * v8 >= 0.0;
  }
  return 0;
}

BOOL sub_66D3C(double *a1)
{
  return *a1 == 0.0 && a1[1] == 0.0;
}

BOOL sub_66D60(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_66DAC(uint64_t result, long long *a2, double a3)
{
  *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
  switch(*((_DWORD *)a2 + 8))
  {
    case 0:
      *(void *)BOOL result = *(void *)a2;
      *(double *)(result + 40) = a3;
      return result;
    case 1:
      long long v3 = *a2;
      goto LABEL_6;
    case 2:
    case 4:
      long long v3 = *a2;
      *(_OWORD *)(result + 16) = a2[1];
      goto LABEL_6;
    case 3:
      long long v3 = *a2;
      *(void *)(result + 16) = *((void *)a2 + 2);
LABEL_6:
      *(_OWORD *)BOOL result = v3;
      break;
    default:
      break;
  }
  *(double *)(result + 40) = a3;
  return result;
}

void sub_66E30(uint64_t a1, double a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_65BC8(a1);
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 == 1)
  {
LABEL_3:
    sub_65CCC((double *)a1, a2);
    int v4 = *(_DWORD *)(a1 + 32);
  }
LABEL_4:
  if (v4 != 2)
  {
    if (v4 != 3) {
      goto LABEL_6;
    }
LABEL_11:
    sub_65BF4((double *)a1, a2);
    if (*(_DWORD *)(a1 + 32) != 4) {
      return;
    }
    goto LABEL_7;
  }
  sub_66C14((double *)a1, a2);
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 == 3) {
    goto LABEL_11;
  }
LABEL_6:
  if (v4 != 4) {
    return;
  }
LABEL_7:

  sub_65D24((double *)a1, a2);
}

uint64_t sub_66F0C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    if (v2 != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t result = sub_65BD8();
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 1)
  {
LABEL_3:
    uint64_t result = sub_65BD8();
    int v2 = *(_DWORD *)(a1 + 32);
  }
LABEL_4:
  if (v2 == 2)
  {
    uint64_t result = sub_66D3C((double *)a1);
    int v2 = *(_DWORD *)(a1 + 32);
    if (v2 != 3)
    {
LABEL_6:
      if (v2 != 4) {
        return result;
      }
      return sub_65C6C((double *)a1);
    }
  }
  else if (v2 != 3)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_65C6C((double *)a1);
  if (*(_DWORD *)(a1 + 32) == 4) {
    return sub_65C6C((double *)a1);
  }
  return result;
}

uint64_t sub_66FB8(uint64_t a1, int a2, double a3, double a4)
{
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8)
  {
    uint64_t result = 0;
    if (v8 != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t result = sub_65BD0(a1, a2);
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 1)
  {
LABEL_3:
    uint64_t result = sub_65CDC((double *)a1, a2);
    int v8 = *(_DWORD *)(a1 + 32);
  }
LABEL_4:
  if (v8 == 2)
  {
    uint64_t result = sub_66C40((double *)a1, a2, a3, a4);
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 != 3)
    {
LABEL_6:
      if (v8 != 4) {
        return result;
      }
      return sub_65C34((double *)a1, a2);
    }
  }
  else if (v8 != 3)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_65C34((double *)a1, a2);
  if (*(_DWORD *)(a1 + 32) == 4) {
    return sub_65C34((double *)a1, a2);
  }
  return result;
}

void *sub_670B8(void *a1, int a2)
{
  if (a2) {
    long long v3 = "common::Direction::REVERSE";
  }
  else {
    long long v3 = "common::Direction::FORWARD";
  }
  sub_188FC78(a1, (uint64_t)v3, 26);
  return a1;
}

void *sub_670FC(void *a1, int a2)
{
  switch(a2)
  {
    case 2:
      long long v3 = "common::RelativeSide::CENTER";
      uint64_t v4 = 28;
      goto LABEL_7;
    case 1:
      long long v3 = "common::RelativeSide::RIGHT";
      uint64_t v4 = 27;
      goto LABEL_7;
    case 0:
      long long v3 = "common::RelativeSide::LEFT";
      uint64_t v4 = 26;
LABEL_7:
      sub_188FC78(a1, (uint64_t)v3, v4);
      break;
  }
  return a1;
}

uint64_t sub_67170@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_67504((uint64_t)v19, a1, 8);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  __p[0] = 0;
  __p[1] = 0;
  *(_DWORD *)((char *)&v19[1] + *(void *)(v19[0] - 24)) &= ~0x1000u;
  std::istream::operator>>();
  if ((*((unsigned char *)&v19[4] + *(void *)(v19[0] - 24)) & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    double v6 = std::string::append(&v13, "\"");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v6->__r_.__value_.__r.__words[2];
    long long v14 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  sub_51978(v19, (uint64_t)__p);
  if ((*((unsigned char *)&v19[4] + *(void *)(v19[0] - 24)) & 5) != 0)
  {
    double v9 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    double v10 = std::string::append(&v13, "\"");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    double v12 = (void *)sub_2F404((uint64_t)v9, &v14);
  }
  *a2 = v18;
  long long v3 = a2 + 1;
  if (SHIBYTE(v17) < 0)
  {
    sub_4200(v3, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v3 = *(_OWORD *)__p;
    v3[2] = v17;
  }
  if (v20 < 0) {
    operator delete((void *)v19[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_67454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    sub_676EC((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a23);
  sub_676EC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_67504(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v5;
  *(void *)(a1 + 8) = 0;
  long long v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v7, (void *)(a1 + 16));
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  std::stringbuf::str();
  return a1;
}

void sub_67698(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_676D8(_Unwind_Exception *a1)
{
}

uint64_t sub_676EC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

std::string *sub_677F0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (std::string *)*a1;
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "UNKNOWN");
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
      goto LABEL_6;
    case 43:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "GEOCODER");
      break;
    case 44:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "DIRECTIONS");
      break;
    case 48:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "ETA_UPDATE");
      break;
    case 52:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 4281413;
      break;
    case 60:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "PLACE_DATA");
      break;
    case 62:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "TRANSIT_REVGEO");
      break;
    default:
      if (result == 1026)
      {
        *(unsigned char *)(a2 + 23) = 20;
        strcpy((char *)a2, "TRANSIT_ROUTE_UPDATE");
      }
      else if (result == 1030)
      {
        *(unsigned char *)(a2 + 23) = 7;
        strcpy((char *)a2, "RIO_ETA");
      }
      else
      {
LABEL_6:
        uint64_t result = std::to_string((std::string *)a2, (int)result);
      }
      break;
  }
  return result;
}

void sub_67A88(char *a1@<X8>)
{
  sub_67F00(v35);
  float v27 = a1;
  if (SHIBYTE(v36) < 0)
  {
    sub_4200(__p, v35[0], (unint64_t)v35[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v35;
    int64_t v34 = v36;
  }
  int v2 = 5;
  while (1)
  {
    sub_695DC((uint64_t)__p, &__dst);
    if (SHIBYTE(v34) < 0) {
      operator delete(__p[0]);
    }
    int64_t v34 = v32;
    *(_OWORD *)std::string __p = __dst;
    int v3 = SHIBYTE(v32);
    if ((v32 & 0x8000000000000000) == 0) {
      size_t v4 = HIBYTE(v32);
    }
    else {
      size_t v4 = *((void *)&__dst + 1);
    }
    if (!v4)
    {
LABEL_44:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Project directory not found");
    }
    unint64_t v5 = v4 + 19;
    if (v4 + 19 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v5 > 0x16)
    {
      uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v7 = v5 | 7;
      }
      uint64_t v8 = v7 + 1;
      p_dst = (long long *)operator new(v7 + 1);
      *((void *)&__dst + 1) = v4 + 19;
      unint64_t v32 = v8 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      unint64_t v32 = 0;
      long long __dst = 0uLL;
      p_dst = &__dst;
      HIBYTE(v32) = v4 + 19;
    }
    if (v3 >= 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    memmove(p_dst, v9, v4);
    strcpy((char *)p_dst + v4, "/etc/config/routing");
    if (sub_696C0())
    {
      BOOL v10 = 1;
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_42;
    }
    int v11 = SHIBYTE(v34);
    if (v34 >= 0) {
      size_t v12 = HIBYTE(v34);
    }
    else {
      size_t v12 = (size_t)__p[1];
    }
    unint64_t v13 = v12 + 21;
    if (v12 + 21 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v13 >= 0x17)
    {
      uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v15 = v13 | 7;
      }
      uint64_t v16 = v15 + 1;
      long long v14 = operator new(v15 + 1);
      size_t v29 = v12 + 21;
      unint64_t v30 = v16 | 0x8000000000000000;
      int v28 = v14;
    }
    else
    {
      size_t v29 = 0;
      unint64_t v30 = 0;
      int v28 = 0;
      long long v14 = &v28;
      HIBYTE(v30) = v12 + 21;
      if (!v12) {
        goto LABEL_37;
      }
    }
    uint64_t v17 = v11 >= 0 ? __p : (void **)__p[0];
    memmove(v14, v17, v12);
LABEL_37:
    strcpy((char *)v14 + v12, "/etc/config-generated");
    BOOL v10 = sub_696C0();
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
      {
LABEL_39:
        if (v10) {
          break;
        }
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_42:
    operator delete((void *)__dst);
    if (v10) {
      break;
    }
LABEL_43:
    if (!--v2) {
      goto LABEL_44;
    }
  }
  int v19 = SHIBYTE(v34);
  if (v34 >= 0) {
    size_t v20 = HIBYTE(v34);
  }
  else {
    size_t v20 = (size_t)__p[1];
  }
  unint64_t v21 = v20 + 1;
  if (v20 + 1 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  double v22 = v27;
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v25 = (char *)operator new(v23 + 1);
    *((void *)v27 + 1) = v21;
    *((void *)v27 + 2) = v24 | 0x8000000000000000;
    *(void *)float v27 = v25;
    double v22 = v25;
  }
  else
  {
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = 0;
    *(void *)float v27 = 0;
    v27[23] = v21;
    if (!v20)
    {
      *(_WORD *)float v27 = 47;
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_52;
      }
LABEL_61:
      operator delete(__p[0]);
      if (SHIBYTE(v36) < 0) {
        goto LABEL_62;
      }
      return;
    }
  }
  if (v19 >= 0) {
    int v26 = __p;
  }
  else {
    int v26 = (void **)__p[0];
  }
  memmove(v22, v26, v20);
  *(_WORD *)&v22[v20] = 47;
  if (v19 < 0) {
    goto LABEL_61;
  }
LABEL_52:
  if (SHIBYTE(v36) < 0) {
LABEL_62:
  }
    operator delete(v35[0]);
}

void sub_67E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_67F00(void *a1@<X8>)
{
  bufstd::string::size_type size = 1024;
  if (_NSGetExecutablePath((char *)buf, &bufsize))
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_31;
  }
  size_t v2 = strlen((const char *)buf);
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  std::string::size_type v3 = v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2) {
LABEL_9:
  }
    memcpy(p_dst, buf, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Exec path could not be found");
  }
  std::string::size_type v8 = std::string::rfind(&__dst, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 == -1)
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v16, buf);
  }
  std::string::size_type v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    BOOL v10 = &__dst;
  }
  else
  {
    std::string::size_type v9 = __dst.__r_.__value_.__l.__size_;
    BOOL v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v9 >= v8 + 1) {
    size_t v11 = v8 + 1;
  }
  else {
    size_t v11 = v9;
  }
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v11 >= 0x17)
  {
    uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v12 = v11 | 7;
    }
    uint64_t v13 = v12 + 1;
    long long v14 = operator new(v12 + 1);
    a1[1] = v11;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v14;
    a1 = v14;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v11;
    if (!v11)
    {
      *(unsigned char *)a1 = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_29:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  memmove(a1, v10, v11);
  *((unsigned char *)a1 + v11) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
}

void sub_68194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a15 < 0)
      {
        operator delete(a10);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void sub_681F8()
{
}

void sub_682A0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
  {
    unint64_t v5 = *(void *)(a1 + 112);
    if (v5)
    {
      sub_4200(v42, *v4, v5);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 127))
  {
    *(_OWORD *)unint64_t v42 = *(_OWORD *)v4;
    uint64_t v43 = *(void *)(a1 + 120);
    goto LABEL_7;
  }
  HIBYTE(v43) = 8;
  strcpy((char *)v42, "Instance");
LABEL_7:
  int v6 = *(unsigned __int8 *)(a1 + 249);
  int v7 = SHIBYTE(v43);
  if (v43 >= 0) {
    size_t v8 = HIBYTE(v43);
  }
  else {
    size_t v8 = (size_t)v42[1];
  }
  if (*(unsigned char *)(a1 + 249)) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + v9;
  if (v8 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v10 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + v9;
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v22 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17) {
    uint64_t v22 = v10 | 7;
  }
  uint64_t v23 = v22 + 1;
  p_dst = (std::string *)operator new(v22 + 1);
  __dst.__r_.__value_.__l.__size_ = v8 + v9;
  __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v8)
  {
LABEL_16:
    if (v7 >= 0) {
      uint64_t v12 = v42;
    }
    else {
      uint64_t v12 = (void **)v42[0];
    }
    memmove(p_dst, v12, v8);
  }
LABEL_20:
  uint64_t v13 = (char *)p_dst + v8;
  if (v6)
  {
    v13[2] = 70;
    *(_WORD *)uint64_t v13 = 17198;
  }
  v13[v9] = 0;
  if (*(unsigned char *)(a1 + 152)) {
    long long v14 = ".filtered";
  }
  else {
    long long v14 = "";
  }
  uint64_t v15 = std::string::append(&__dst, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = *(void *)(a1 + 224);
  uint64_t v18 = *(void *)(a1 + 232);
  if (v17 == v18)
  {
    unsigned int v21 = 0;
    HIBYTE(v41) = 0;
    LOBYTE(v40[0]) = 0;
  }
  else
  {
    sub_68BF8(*(void *)(a1 + 224), *(void *)(a1 + 232), ",");
    int v19 = std::string::insert(&v39, 0, "--");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v40 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = HIBYTE(v41);
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v24 = v40;
  }
  else {
    uint64_t v24 = (void **)v40[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v25 = v21;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v40[1];
  }
  int v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t v29 = *(void *)(a1 + 200);
  uint64_t v28 = *(void *)(a1 + 208);
  if (v29 == v28)
  {
    unsigned int v32 = 0;
    HIBYTE(v38) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    sub_68BF8(v29, v28, ",");
    unint64_t v30 = std::string::insert(&v36, 0, "--");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v38 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    unsigned int v32 = HIBYTE(v38);
  }
  if ((v32 & 0x80u) == 0) {
    unint64_t v33 = __p;
  }
  else {
    unint64_t v33 = (void **)__p[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v34 = v32;
  }
  else {
    std::string::size_type v34 = (std::string::size_type)__p[1];
  }
  uint64_t v35 = std::string::append(&v46, (const std::string::value_type *)v33, v34);
  *a2 = *v35;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  if (v29 != v28 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v41) & 0x80000000) == 0) {
        goto LABEL_53;
      }
LABEL_57:
      operator delete(v40[0]);
      if (v17 == v18) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0) {
    goto LABEL_57;
  }
LABEL_53:
  if (v17 == v18)
  {
LABEL_59:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_64;
  }
LABEL_58:
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_59;
  }
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v45.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      return;
    }
LABEL_66:
    operator delete(v42[0]);
    return;
  }
LABEL_65:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43) < 0) {
    goto LABEL_66;
  }
}

void sub_6865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 89) < 0)
  {
    operator delete(*(void **)(v48 - 112));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if (v46 == v47) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if (v46 == v47) {
    goto LABEL_11;
  }
LABEL_9:
  if (a27 < 0) {
    operator delete(a22);
  }
LABEL_11:
  if (*(char *)(v48 - 121) < 0)
  {
    operator delete(*(void **)(v48 - 144));
    if ((a46 & 0x80000000) == 0)
    {
LABEL_13:
      if ((a40 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_17;
    }
  }
  else if ((a46 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(a41);
  if ((a40 & 0x80000000) == 0) {
LABEL_14:
  }
    _Unwind_Resume(exception_object);
LABEL_17:
  operator delete(a35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_68774(uint64_t a1)
{
  return sub_68BF8(*(void *)(a1 + 224), *(void *)(a1 + 232), ",");
}

uint64_t sub_68788(uint64_t a1)
{
  return sub_68BF8(*(void *)(a1 + 200), *(void *)(a1 + 208), ",");
}

void sub_6879C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
  {
    unint64_t v5 = *(void *)(a1 + 136);
    if (v5)
    {
      sub_4200(v39, *v4, v5);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a1 + 151))
  {
    *(_OWORD *)std::string v39 = *(_OWORD *)v4;
    uint64_t v40 = *(void *)(a1 + 144);
    goto LABEL_7;
  }
  HIBYTE(v40) = 8;
  strcpy((char *)v39, "Instance");
LABEL_7:
  int v6 = *(unsigned __int8 *)(a1 + 152);
  int v7 = SHIBYTE(v40);
  if (v40 >= 0) {
    size_t v8 = HIBYTE(v40);
  }
  else {
    size_t v8 = (size_t)v39[1];
  }
  if (*(unsigned char *)(a1 + 152)) {
    uint64_t v9 = 9;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 + v9;
  if (v8 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v10 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + v9;
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v10 | 7) != 0x17) {
    uint64_t v19 = v10 | 7;
  }
  uint64_t v20 = v19 + 1;
  p_dst = (std::string *)operator new(v19 + 1);
  __dst.__r_.__value_.__l.__size_ = v8 + v9;
  __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v8)
  {
LABEL_16:
    if (v7 >= 0) {
      uint64_t v12 = v39;
    }
    else {
      uint64_t v12 = (void **)v39[0];
    }
    memmove(p_dst, v12, v8);
  }
LABEL_20:
  uint64_t v13 = (char *)p_dst + v8;
  if (v6)
  {
    v13[8] = 100;
    *(void *)uint64_t v13 = *(void *)".filtered";
  }
  v13[v9] = 0;
  uint64_t v14 = *(void *)(a1 + 224);
  uint64_t v15 = *(void *)(a1 + 232);
  if (v14 == v15)
  {
    unsigned int v18 = 0;
    HIBYTE(v38) = 0;
    LOBYTE(v37[0]) = 0;
  }
  else
  {
    sub_68BF8(*(void *)(a1 + 224), *(void *)(a1 + 232), ",");
    long long v16 = std::string::insert(&v36, 0, "--");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v38 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v37 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unsigned int v18 = HIBYTE(v38);
  }
  if ((v18 & 0x80u) == 0) {
    unsigned int v21 = v37;
  }
  else {
    unsigned int v21 = (void **)v37[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v22 = v18;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v37[1];
  }
  uint64_t v23 = std::string::append(&__dst, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = *(void *)(a1 + 200);
  uint64_t v25 = *(void *)(a1 + 208);
  if (v26 == v25)
  {
    unsigned int v29 = 0;
    HIBYTE(v35) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    sub_68BF8(v26, v25, ",");
    long long v27 = std::string::insert(&v33, 0, "--");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v35 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    unsigned int v29 = HIBYTE(v35);
  }
  if ((v29 & 0x80u) == 0) {
    unint64_t v30 = __p;
  }
  else {
    unint64_t v30 = (void **)__p[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v31 = v29;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)__p[1];
  }
  unsigned int v32 = std::string::append(&v42, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  if (v26 != v25 && SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_50;
      }
LABEL_54:
      operator delete(v37[0]);
      if (v14 == v15) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
  else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0) {
    goto LABEL_54;
  }
LABEL_50:
  if (v14 == v15)
  {
LABEL_56:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_60;
  }
LABEL_55:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_56;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v40) & 0x80000000) == 0) {
      return;
    }
LABEL_61:
    operator delete(v39[0]);
    return;
  }
LABEL_60:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0) {
    goto LABEL_61;
  }
}

void sub_68B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 89) < 0)
  {
    operator delete(*(void **)(v48 - 112));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if (v46 == v47) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if (v46 == v47) {
    goto LABEL_11;
  }
LABEL_9:
  if (a27 < 0) {
    operator delete(a22);
  }
LABEL_11:
  if (a46 < 0)
  {
    operator delete(a41);
    if ((a40 & 0x80000000) == 0) {
LABEL_13:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(a35);
  _Unwind_Resume(exception_object);
}

uint64_t sub_68BF8(uint64_t a1, uint64_t a2, const char *a3)
{
  sub_6BAC((uint64_t)v16);
  if (a1 != a2)
  {
    int v6 = *(char *)(a1 + 23);
    uint64_t v7 = v6 >= 0 ? a1 : *(void *)a1;
    uint64_t v8 = v6 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    sub_188FC78(v16, v7, v8);
    uint64_t v9 = a1 + 24;
    if (v9 != a2)
    {
      uint64_t v10 = -24;
      do
      {
        if (v10)
        {
          size_t v11 = strlen(a3);
          sub_188FC78(v16, (uint64_t)a3, v11);
        }
        int v12 = *(char *)(v9 + 23);
        if (v12 >= 0) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = *(void *)v9;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v9 + 8);
        }
        sub_188FC78(v16, v13, v14);
        v9 += 24;
        v10 -= 24;
      }
      while (v9 != a2);
    }
  }
  std::stringbuf::str();
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_68DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_68DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_68DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_68DF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  std::string::size_type v3 = (void *)(v1 + 16);
  do
  {
    std::string::size_type v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    v2 += v3[1] - v3[2];
  }
  while (v3 != *(void **)(v1 + 24));
  size_t v4 = *(void **)(v1 + 40);
  if (!v4) {
    return v2;
  }
  uint64_t v5 = 0;
  do
  {
    v5 += v4[2];
    size_t v4 = (void *)*v4;
  }
  while (v4);
  return v5 + v2;
}

uint64_t sub_68E5C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = v1[4];
  size_t v4 = (void *)v1[5];
  if (!v4) {
    return v2 * v3;
  }
  uint64_t v5 = 0;
  do
  {
    v5 += v4[2];
    size_t v4 = (void *)*v4;
  }
  while (v4);
  return v5 + v2 * v3;
}

uint64_t sub_68E9C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_68EA4(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_68EAC(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_68EB4(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_68EBC(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_68EC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 248);
}

uint64_t sub_68ECC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 249);
}

uint64_t sub_68ED4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 250);
}

uint64_t sub_68EDC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 251);
}

uint64_t sub_68EE4(uint64_t a1)
{
  return a1 + 256;
}

void sub_68EEC(uint64_t a1, std::string **a2)
{
  uint64_t v2 = a1 + 280;
  if ((std::string **)v2 != a2) {
    sub_69208(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

uint64_t sub_68F1C(uint64_t a1)
{
  return a1 + 280;
}

uint64_t sub_68F24(uint64_t a1, uint64_t a2, const char *a3)
{
  sub_6BAC((uint64_t)v16);
  if (a1 != a2)
  {
    int v6 = *(char *)(a1 + 23);
    uint64_t v7 = v6 >= 0 ? a1 : *(void *)a1;
    uint64_t v8 = v6 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    sub_188FC78(v16, v7, v8);
    uint64_t v9 = a1 + 24;
    if (v9 != a2)
    {
      uint64_t v10 = -24;
      do
      {
        if (v10)
        {
          size_t v11 = strlen(a3);
          sub_188FC78(v16, (uint64_t)a3, v11);
        }
        int v12 = *(char *)(v9 + 23);
        if (v12 >= 0) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = *(void *)v9;
        }
        if (v12 >= 0) {
          uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          uint64_t v14 = *(void *)(v9 + 8);
        }
        sub_188FC78(v16, v13, v14);
        v9 += 24;
        v10 -= 24;
      }
      while (v9 != a2);
    }
  }
  std::stringbuf::str();
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_690E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_690FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_69110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_69124(uint64_t a1)
{
  return *(unsigned int *)(a1 + 352);
}

uint64_t sub_6912C(uint64_t a1)
{
  return a1 + 304;
}

uint64_t sub_69134(uint64_t a1)
{
  return a1 + 328;
}

uint64_t sub_6913C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 356);
}

uint64_t sub_69144(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 357);
}

uint64_t sub_6914C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 358);
}

uint64_t sub_69154(uint64_t a1)
{
  return a1 + 360;
}

uint64_t sub_6915C(uint64_t a1)
{
  return a1 + 368;
}

void sub_69164(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v4 = *(std::__shared_weak_count **)(a1 + 376);
  *(void *)(a1 + 368) = v3;
  *(void *)(a1 + 376) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_691F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 384);
}

uint64_t sub_69200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 384) = a2;
  return result;
}

void sub_69208(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  int v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    int v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        int v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          unsigned int v18 = &v9[v16];
          uint64_t v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        uint64_t v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      size_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        size_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      sub_2E00();
    uint64_t v24 = 24 * v23;
    uint64_t v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        long long v27 = &v25[v26 * 24];
        long long v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)long long v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

void *sub_69510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25508A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25508A8))
  {
    sub_681F8();
  }
  return &unk_25508B0;
}

void sub_69580(_Unwind_Exception *a1)
{
}

uint64_t sub_69598(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v2)) {
    return 0;
  }
  else {
    return (v2.st_mode >> 14) & 1;
  }
}

std::string::size_type sub_695DC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  std::string::size_type result = std::string::rfind((const std::string *)a1, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (result == -1)
  {
    a2[23] = 0;
    *a2 = 0;
    return result;
  }
  size_t v5 = *(unsigned __int8 *)(a1 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    size_t v5 = *(void *)(a1 + 8);
  }
  if (v6 >= 0) {
    uint64_t v7 = (const void *)a1;
  }
  else {
    uint64_t v7 = *(const void **)a1;
  }
  if (v5 >= result) {
    size_t v8 = result;
  }
  else {
    size_t v8 = v5;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v8 >= 0x17)
  {
    uint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v9 = v8 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v11 = operator new(v9 + 1);
    *((void *)a2 + 1) = v8;
    *((void *)a2 + 2) = v10 | 0x8000000000000000;
    *(void *)a2 = v11;
    a2 = v11;
  }
  else
  {
    a2[23] = v8;
    if (!v8) {
      goto LABEL_19;
    }
  }
  std::string::size_type result = (std::string::size_type)memmove(a2, v7, v8);
LABEL_19:
  a2[v8] = 0;
  return result;
}

BOOL sub_696C0()
{
  sub_636CC(v2);
  BOOL v0 = *(_DWORD *)((char *)&v2[4] + (unint64_t)*(v2[0] - 3)) == 0;
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return v0;
}

uint64_t *sub_69800(uint64_t *a1)
{
  uint64_t v3 = (void **)(a1 + 4);
  uint64_t v2 = a1[4];
  if (v2)
  {
    sub_53270((uint64_t)(a1 + 4), v2);
    operator delete(*v3);
  }
  if (*a1)
  {
    sub_53270((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t *sub_69858(uint64_t *a1)
{
  if (*a1)
  {
    sub_53270((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_69894@<X0>(uint64_t a1@<X8>)
{
  *__error() = 0;
  sub_636CC(v18);
  if ((*((unsigned char *)&v18[4] + (unint64_t)*(v18[0] - 3)) & 5) != 0)
  {
    uint64_t v2 = *__error();
    uint64_t v3 = std::generic_category();
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = v2;
    *(void *)(a1 + 16) = v3;
    goto LABEL_3;
  }
  memset(&v7, 0, sizeof(v7));
  std::istream::tellg();
  std::string::resize(&v7, __n, 0);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  std::istream::seekg();
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v7.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
  }
  else if (!*((unsigned char *)&v7.__r_.__value_.__s + 23))
  {
    goto LABEL_9;
  }
  std::istream::read();
LABEL_9:
  if ((*((unsigned char *)&v18[4] + (unint64_t)*(v18[0] - 3)) & 5) != 0)
  {
    uint64_t v5 = *__error();
    int v6 = std::generic_category();
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    *(std::string *)(a1 + 8) = v7;
  }
LABEL_3:
  std::filebuf::~filebuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_69ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_638A8(&a51);
  _Unwind_Resume(a1);
}

void *sub_69B20(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    std::string::size_type result = operator new(96 * a4);
    *uint64_t v5 = result;
    v5[1] = result;
    void v5[2] = &result[12 * a4];
    for (uint64_t i = result; a2 != a3; a2 += 96)
    {
      *(_DWORD *)(sub_69C9C((uint64_t)result, a2) + 88) = *(_DWORD *)(a2 + 88);
      std::string::size_type result = i + 12;
      i += 12;
    }
    v5[1] = result;
  }
  return result;
}

void sub_69C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_69C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_69DF0((uint64_t)&a11);
  *(void *)(v11 + 8) = v12;
  sub_69C44(&a9);
  _Unwind_Resume(a1);
}

void ***sub_69C44(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t)**a1;
  if (!v4) {
    return a1;
  }
  sub_53270((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_69C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_4200((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  std::string v7 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)std::string v7 = v8;
  }
  return a1;
}

void sub_69D80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      sub_14A84(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_69DDC(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_69DF0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  while (v3 != v4)
  {
    if (*(char *)(v3 - 9) < 0)
    {
      operator delete(*(void **)(v3 - 32));
      if ((*(char *)(v3 - 33) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(v3 - 57) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*(char *)(v3 - 33) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(v3 - 56));
    if ((*(char *)(v3 - 57) & 0x80000000) == 0)
    {
LABEL_7:
      long long v5 = *(std::__shared_weak_count **)(v3 - 88);
      if (v5) {
        goto LABEL_12;
      }
      goto LABEL_3;
    }
LABEL_11:
    operator delete(*(void **)(v3 - 80));
    long long v5 = *(std::__shared_weak_count **)(v3 - 88);
    if (v5)
    {
LABEL_12:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
LABEL_3:
    v3 -= 96;
  }
}

void sub_69ED0(uint64_t a1, uint64_t a2, int a3)
{
  long long v5 = std::locale::locale((std::locale *)a1);
  *(void *)(a1 + 8) = std::locale::use_facet(v5, &std::ctype<char>::id);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, &std::collate<char>::id);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  sub_69FAC();
}

void sub_69F7C(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_69F98(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_69FAC()
{
}

void sub_6A218(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_6A27C(uint64_t a1, char *a2, char *a3)
{
  long long v6 = a2;
  while (1)
  {
    std::string v7 = (unsigned __int8 *)v6;
    long long v6 = sub_6AD48(a1, v6, a3);
    if (v7 == (unsigned __int8 *)v6) {
      break;
    }
LABEL_2:
    if (v6 == (char *)v7) {
      goto LABEL_6;
    }
  }
  long long v8 = sub_6B0EC(a1, v7, (unsigned __int8 *)a3);
  if (v7 != v8)
  {
    long long v6 = sub_6B488(a1, (char *)v8, a3);
    goto LABEL_2;
  }
LABEL_6:
  if (v7 == (unsigned __int8 *)a2) {
    operator new();
  }
  if (v7 == (unsigned __int8 *)a3) {
    return (unsigned __int8 *)a3;
  }
  if (*v7 == 124)
  {
    long long v9 = v7 + 1;
    long long v10 = (char *)(v7 + 1);
    while (1)
    {
      uint64_t v11 = (unsigned __int8 *)v10;
      long long v10 = sub_6AD48(a1, v10, a3);
      if (v11 == (unsigned __int8 *)v10)
      {
        uint64_t v12 = sub_6B0EC(a1, v11, (unsigned __int8 *)a3);
        if (v11 == v12)
        {
LABEL_15:
          if (v11 == v9) {
            operator new();
          }
          operator new();
        }
        long long v10 = sub_6B488(a1, (char *)v12, a3);
      }
      if (v10 == (char *)v11) {
        goto LABEL_15;
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_6A544(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != a3)
    {
      long long v6 = v3;
      std::string v7 = sub_6D914(a1, v3, a3);
      if (v3 != v7)
      {
        uint64_t v3 = sub_6DB54(a1, v7, a3);
        if (v6 != v3) {
          continue;
        }
      }
      if (v6 + 1 == a3 && *v6 == 36) {
        operator new();
      }
      sub_1EFEC();
    }
  }
  return a3;
}

char *sub_6A6F8(uint64_t a1, char *a2, char *a3)
{
  long long v6 = sub_6DF94(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    std::string v7 = v6;
    long long v6 = sub_6DF94(a1, v6, a3);
  }
  while (v7 != v6);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (*v7 == 124)
  {
    long long v8 = v7 + 1;
    long long v9 = sub_6DF94(a1, v7 + 1, a3);
    if (v7 + 1 != v9)
    {
      do
      {
        long long v10 = v9;
        long long v9 = sub_6DF94(a1, v9, a3);
      }
      while (v10 != v9);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    sub_1EFEC();
  }
  return v7;
}

unsigned __int8 *sub_6A8A8(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  long long v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    std::string v7 = v6;
  }
  else {
    std::string v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_6A544(a1, __s, v7);
  if (v7 == a3) {
    long long v8 = v7;
  }
  else {
    long long v8 = v7 + 1;
  }
  if (v8 != a3)
  {
    long long v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9) {
      long long v10 = v9;
    }
    else {
      long long v10 = a3;
    }
    if (v10 != v8)
    {
      sub_6A544(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

char *sub_6AAF8(uint64_t a1, char *__s, char *a3)
{
  long long v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6) {
    std::string v7 = v6;
  }
  else {
    std::string v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_6A6F8(a1, __s, v7);
  if (v7 == a3) {
    long long v8 = v7;
  }
  else {
    long long v8 = v7 + 1;
  }
  if (v8 != a3)
  {
    long long v9 = (char *)memchr(v8, 10, a3 - v8);
    if (v9) {
      long long v10 = v9;
    }
    else {
      long long v10 = a3;
    }
    if (v10 != v8)
    {
      sub_6A6F8(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

char *sub_6AD48(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v9 = a2[1];
          if (v9 == 66) {
            operator new();
          }
          if (v9 == 98) {
            operator new();
          }
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36) {
        operator new();
      }
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          sub_16A38((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_69FAC(v10, a2 + 3, a3);
          sub_16AA8();
        }
        if (v7 == 61)
        {
          sub_16A38((uint64_t)v10);
          int v11 = *(_DWORD *)(a1 + 24);
          sub_69FAC(v10, a2 + 3, a3);
          sub_16AA8();
        }
      }
    }
  }
  return a2;
}

void sub_6B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_6B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_6B0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_6B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_6B0EC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  switch(*a2)
  {
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_25;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        long long v5 = (unsigned __int8 *)sub_6A27C(a1, a2 + 3, a3);
        if (v5 != a3 && *v5 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v5 + 1;
        }
LABEL_25:
        sub_16B78();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      ++*(_DWORD *)(a1 + 36);
      int v7 = (unsigned __int8 *)sub_6A27C(a1, a2 + 1, a3);
      if (v7 == a3 || *v7 != 41) {
        goto LABEL_25;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      --*(_DWORD *)(a1 + 36);
      std::string::size_type result = v7 + 1;
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return sub_6BB64(a1, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_24;
    case '.':
      operator new();
    case '[':
      return sub_6B9F0(a1, a2, a3);
    case '\\':
      return sub_6B888(a1, a2, a3);
    default:
      if (*a2 == 123) {
LABEL_24:
      }
        sub_18618();
      return sub_6BB64(a1, a2, a3);
  }
  return result;
}

char *sub_6B488(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v4 = *a2;
  if (v4 > 62)
  {
    if (v4 == 63)
    {
      long long v17 = a2 + 1;
      if (v3) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v17 == a3;
      }
      if (!v18 && *v17 == 63) {
        sub_1E5E0();
      }
      sub_1E5E0();
    }
    long long v5 = a2;
    if (v4 != 123) {
      return v5;
    }
    long long v8 = a2 + 1;
    if (a2 + 1 != a3)
    {
      int v9 = *v8;
      if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
      {
        int v10 = v9 - 48;
        int v11 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_21:
          int v11 = a3;
        }
        else
        {
          while (1)
          {
            int v12 = *v11;
            if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
              break;
            }
            if (v10 >= 214748364) {
              goto LABEL_69;
            }
            int v10 = v12 + 10 * v10 - 48;
            if (++v11 == a3) {
              goto LABEL_21;
            }
          }
        }
        if (v11 != v8)
        {
          if (v11 == a3) {
            goto LABEL_70;
          }
          int v13 = *v11;
          if (v13 != 44)
          {
            if (v13 == 125)
            {
              long long v14 = v11 + 1;
              if (!v3 && v14 != a3 && *v14 == 63) {
                sub_1E5E0();
              }
              sub_1E5E0();
            }
            goto LABEL_69;
          }
          uint64_t v19 = v11 + 1;
          if (v11 + 1 == a3) {
            goto LABEL_69;
          }
          int v20 = *v19;
          if (v20 == 125)
          {
            unint64_t v21 = v11 + 2;
            if (v3 || v21 == a3 || *v21 != 63) {
              goto LABEL_42;
            }
            goto LABEL_35;
          }
          if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38) {
            goto LABEL_70;
          }
          int v22 = v20 - 48;
          unint64_t v23 = v11 + 2;
          if (v23 == a3)
          {
LABEL_58:
            unint64_t v23 = a3;
          }
          else
          {
            while (1)
            {
              int v24 = *v23;
              if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38) {
                break;
              }
              if (v22 >= 214748364) {
                goto LABEL_69;
              }
              int v22 = v24 + 10 * v22 - 48;
              if (++v23 == a3) {
                goto LABEL_58;
              }
            }
          }
          if (v23 == v19 || v23 == a3 || *v23 != 125) {
LABEL_70:
          }
            sub_1E7C8();
          if (v22 >= v10)
          {
            uint64_t v25 = v23 + 1;
            if (!v3 && v25 != a3 && *v25 == 63) {
              sub_1E5E0();
            }
            sub_1E5E0();
          }
        }
      }
    }
LABEL_69:
    sub_1E770();
  }
  if (v4 == 42)
  {
    long long v15 = a2 + 1;
    if (v3) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v15 == a3;
    }
    if (v16 || *v15 != 63) {
      goto LABEL_42;
    }
LABEL_35:
    sub_1E5E0();
  }
  long long v5 = a2;
  if (v4 == 43)
  {
    int v6 = a2 + 1;
    if (!v3 && v6 != a3 && *v6 == 63) {
      goto LABEL_35;
    }
LABEL_42:
    sub_1E5E0();
  }
  return v5;
}

unsigned __int8 *sub_6B888(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      sub_1894C();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48) {
      sub_191E8(a1);
    }
    if ((v8 - 49) <= 8)
    {
      int v11 = a2 + 2;
      if (a2 + 2 == a3) {
        goto LABEL_14;
      }
      do
      {
        int v12 = *v11;
        if ((v12 - 48) > 9) {
          break;
        }
        if (v9 >= 0x19999999) {
          goto LABEL_21;
        }
        ++v11;
        unsigned int v9 = v12 + 10 * v9 - 48;
      }
      while (v11 != a3);
      if (v9)
      {
LABEL_14:
        if (v9 <= *(_DWORD *)(a1 + 28)) {
          sub_1940C(a1);
        }
      }
LABEL_21:
      sub_193B4();
    }
    int v4 = sub_6BD48(a1, a2 + 1, a3);
    if (v6 == v4)
    {
      int v13 = sub_6C08C(a1, a2 + 1, a3, 0);
      if (v6 == v13) {
        return a2;
      }
      else {
        return v13;
      }
    }
  }
  return v4;
}

unsigned char *sub_6B9F0(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    sub_1B95C();
  }
  return a2;
}

void sub_6BB40()
{
}

unsigned char *sub_6BB64(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case ')':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '{':
      case '|':
      case '}':
        return a2;
      default:
        sub_191E8(a1);
    }
  }
  return a2;
}

unsigned char *sub_6BD48(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        operator new();
      case 'S':
        operator new();
      case 'W':
        operator new();
      case 'd':
        operator new();
      case 's':
        operator new();
      case 'w':
        operator new();
      default:
        return a2;
    }
  }
  return a2;
}

void sub_6BF84()
{
}

unsigned __int8 *sub_6C08C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  int v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  char v5 = 0;
  switch(*a2)
  {
    case '0':
      if (!this) {
        goto LABEL_52;
      }
      std::string::operator=(this, 0);
      return v4 + 1;
    case 'c':
      if (a2 + 1 == a3 || (char)a2[1] < 65) {
        goto LABEL_59;
      }
      unsigned int v8 = a2[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_59;
      }
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v8 & 0x1F);
      v4 += 2;
      return v4;
    case 'f':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 12);
      return v4 + 1;
    case 'n':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 10);
      return v4 + 1;
    case 'r':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 13);
      return v4 + 1;
    case 't':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 == a3) {
        goto LABEL_59;
      }
      int v10 = a2[1];
      if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38 && (v10 | 0x20u) - 97 >= 6) {
        goto LABEL_59;
      }
      int v4 = a2 + 2;
      if (a2 + 2 == a3) {
        goto LABEL_59;
      }
      int v11 = *v4;
      char v12 = -48;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
        goto LABEL_36;
      }
      v11 |= 0x20u;
      if ((v11 - 97) >= 6) {
        goto LABEL_59;
      }
      char v12 = -87;
LABEL_36:
      char v5 = 16 * (v12 + v11);
LABEL_37:
      if (v4 + 1 == a3) {
        goto LABEL_59;
      }
      int v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_42;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6) {
        goto LABEL_59;
      }
      char v14 = -87;
LABEL_42:
      if (v4 + 2 == a3) {
        goto LABEL_59;
      }
      int v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6) {
LABEL_59:
        }
          sub_1894C();
        char v16 = -87;
      }
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v16 + v15 + 16 * (v14 + v13 + v5));
      std::string::size_type result = v4 + 3;
      break;
    case 'v':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 11);
      return v4 + 1;
    case 'x':
      goto LABEL_37;
    default:
      uint64_t v7 = *a2;
      if (*a2 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v7) & 0x500) != 0) {
        goto LABEL_59;
      }
      if (!this) {
LABEL_52:
      }
        sub_191E8(a1);
      std::string::operator=(this, v7);
      return v4 + 1;
  }
  return result;
}

std::string::value_type *sub_6C598(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  int v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      int v10 = sub_6CC70(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (v9 == 61)
    {
      int v10 = sub_6C9E4(a1, a2 + 2, a3, a4);
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v19 = sub_6CD30(a1, a2 + 2, a3, (uint64_t)&v26);
  int v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  char v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        int v13 = v4 + 1;
        if (v11)
        {
          char v14 = sub_6D060(a1, v13, a3, &v26);
        }
        else
        {
          char v14 = (char *)sub_6CE24(a1, (unsigned __int8 *)v13, (unsigned __int8 *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    char v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (long long v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v26.__r_.__value_.__l.__size_) {
        goto LABEL_42;
      }
      if (v26.__r_.__value_.__l.__size_ != 1)
      {
        char v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_41:
        sub_1CE84(v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
LABEL_42:
        char v21 = 1;
        int v4 = v14;
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      char v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v26.__r_.__value_.__s + 23)) {
        goto LABEL_42;
      }
      char v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_41;
      }
    }
    sub_19FC8(v6, v16->__r_.__value_.__s.__data_[0]);
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  int v4 = v14 + 2;
  if (v14 + 2 == a3 || *v17 != 91 || *v4 != 46)
  {
    if ((v11 | 0x40) == 0x40)
    {
      LODWORD(v17) = *v17;
      if (v17 == 92)
      {
        if (v11) {
          BOOL v18 = sub_6D060(a1, v14 + 2, a3, &v25);
        }
        else {
          BOOL v18 = (std::string::value_type *)sub_6CE24(a1, (unsigned __int8 *)v14 + 2, (unsigned __int8 *)a3, &v25, v6);
        }
        goto LABEL_55;
      }
    }
    else
    {
      LOBYTE(v17) = *v17;
    }
    std::string::operator=(&v25, (std::string::value_type)v17);
    goto LABEL_56;
  }
  BOOL v18 = sub_6CD30(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
  int v4 = v18;
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_1C8F4(v6, (char *)&v24, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_59;
      }
LABEL_63:
      operator delete(v25.__r_.__value_.__l.__data_);
      char v21 = 1;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_43;
      }
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_63;
  }
LABEL_59:
  char v21 = 1;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
  }
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_44:
  if (v21) {
    return v4;
  }
  return (std::string::value_type *)v6;
}

void sub_6C918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v28 - 49) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v28 - 49) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

std::string::value_type *sub_6C9E4(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  uint64_t v6 = a3 - 2;
  uint64_t v7 = a2;
  unsigned int v8 = a2;
  int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    sub_1B95C();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  sub_6D4AC(a1, (uint64_t)a2, v7, (uint64_t)&v22);
  if (((char)v24 & 0x80000000) == 0)
  {
    uint64_t v11 = v24;
    if (v24)
    {
      int v12 = (char *)&v22;
      goto LABEL_14;
    }
LABEL_40:
    sub_1D280();
  }
  uint64_t v11 = v23;
  if (!v23) {
    goto LABEL_40;
  }
  int v12 = (char *)v22;
LABEL_14:
  sub_1D530(a1, (uint64_t)v12, &v12[v11], (uint64_t)__p);
  int v13 = (void *)HIBYTE(v21);
  if (v21 < 0) {
    int v13 = __p[1];
  }
  if (v13)
  {
    unint64_t v14 = *(void *)(a4 + 144);
    if (v14 >= *(void *)(a4 + 152))
    {
      *(void *)(a4 + 144) = sub_1D740((char **)(a4 + 136), (uint64_t)__p);
      if (SHIBYTE(v21) < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v21) < 0)
      {
        sub_4200(*(unsigned char **)(a4 + 144), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v14 + 16) = v21;
        *(_OWORD *)unint64_t v14 = v15;
      }
      *(void *)(a4 + 144) = v14 + 24;
      *(void *)(a4 + 144) = v14 + 24;
      if (SHIBYTE(v21) < 0) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    uint64_t v16 = v24;
    if ((v24 & 0x80u) != 0) {
      uint64_t v16 = v23;
    }
    if (v16 == 2)
    {
      BOOL v18 = (char *)&v22;
      if ((v24 & 0x80u) != 0) {
        BOOL v18 = (char *)v22;
      }
      sub_1CE84(a4, *v18, v18[1]);
    }
    else
    {
      if (v16 != 1) {
        sub_1D280();
      }
      long long v17 = (char *)&v22;
      if ((v24 & 0x80u) != 0) {
        long long v17 = (char *)v22;
      }
      sub_19FC8(a4, *v17);
    }
    if (SHIBYTE(v21) < 0)
    {
LABEL_37:
      operator delete(__p[0]);
      if ((char)v24 < 0) {
        goto LABEL_38;
      }
      return v7 + 2;
    }
  }
  if (((char)v24 & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v22);
  return v7 + 2;
}

void sub_6CC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_6CC70(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  uint64_t v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 58) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      uint64_t v7 = v8;
      int v9 = *v8++;
      if (v9 == 58) {
        goto LABEL_4;
      }
    }
LABEL_11:
    sub_1B95C();
  }
  if (v7 == a3) {
    goto LABEL_11;
  }
  int v10 = sub_6D764(a1, (uint64_t)a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    sub_1D980();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

std::string::value_type *sub_6CD30(uint64_t a1, std::string::value_type *a2, std::string::value_type *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  uint64_t v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      uint64_t v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    sub_1B95C();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  sub_6D4AC(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    sub_1D280();
  }
  return v6 + 2;
}

unsigned __int8 *sub_6CE24(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_1894C();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      std::string::size_type result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      std::string::size_type result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_1DB3C(a5, 95);
      std::string::size_type result = a2 + 1;
      break;
    case 'b':
      std::string::operator=(this, 8);
      std::string::size_type result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      std::string::size_type result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      std::string::size_type result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_19FC8(a5, 95);
      std::string::size_type result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_6:
        std::string::size_type result = sub_6C08C(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        std::string::size_type result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_6D060(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_43:
  }
    sub_1894C();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, v5);
      return a2 + 1;
    case 'a':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 7);
      return a2 + 1;
    case 'b':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 8);
      return a2 + 1;
    case 'f':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 12);
      return a2 + 1;
    case 'n':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 10);
      return a2 + 1;
    case 'r':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 13);
      return a2 + 1;
    case 't':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 9);
      return a2 + 1;
    case 'v':
      if (!this) {
        sub_191E8(a1);
      }
      std::string::operator=(this, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_43;
      }
      uint64_t v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        uint64_t v7 = a3;
LABEL_32:
        std::string::value_type v12 = v5 - 48;
        if (!this) {
          goto LABEL_42;
        }
        goto LABEL_33;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_32;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 == a3)
      {
        uint64_t v7 = a3;
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_42;
        }
      }
      else
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          uint64_t v7 = a2 + 3;
        }
        else {
          uint64_t v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
LABEL_42:
        }
          sub_191E8(a1);
      }
LABEL_33:
      std::string::operator=(this, v12);
      return v7;
  }
}

void sub_6D4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string::value_type *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v5 = (std::string::size_type)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = (_BYTE)a3 - a2;
    p_s = &__s;
    if ((std::string::value_type *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = p_s;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  p_s = (std::string *)operator new(v16 + 1);
  __s.__r_.__value_.__l.__size_ = v5;
  __s.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  if ((std::string::value_type *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_s - a2 < 0x20)
  {
    int v10 = p_s;
    std::string::value_type v11 = (std::string::value_type *)a2;
    do
    {
LABEL_15:
      std::string::value_type v18 = *v11++;
      v10->__r_.__value_.__s.__data_[0] = v18;
      int v10 = (std::string *)((char *)v10 + 1);
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = (std::string *)((char *)p_s + (v5 & 0xFFFFFFFFFFFFFFE0));
  std::string::value_type v11 = (std::string::value_type *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  std::string::value_type v12 = (long long *)(a2 + 16);
  long long v13 = &p_s->__r_.__value_.__r.__words[2];
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *((_OWORD *)v13 - 1) = *(v12 - 1);
    *(_OWORD *)long long v13 = v15;
    v12 += 2;
    v13 += 4;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  v10->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_24;
    }
    uint64_t v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v19 = &__s;
  }
  std::__get_collation_name(&v24, (const char *)v19);
  *(_OWORD *)a4 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  unint64_t v20 = v24.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v24.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21) {
    goto LABEL_24;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_24;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v24);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v24;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v22 = *(unsigned __int8 *)(a4 + 23);
    if (v22 != 12 && v22 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_24;
    }
    goto LABEL_39;
  }
  uint64_t v23 = *(void *)(a4 + 8);
  if (v23 == 1 || v23 == 12)
  {
LABEL_39:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_24;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_24:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_6D720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_6D764(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    unint64_t v25 = v4;
    int64_t v26 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    int v10 = p_p;
    std::string::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::string::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    std::string::value_type v12 = (long long *)(a2 + 16);
    long long v13 = p_p + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *long long v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *int v10 = 0;
  unint64_t v19 = HIBYTE(v26);
  if (v26 >= 0) {
    unint64_t v20 = (char *)&__p;
  }
  else {
    unint64_t v20 = (char *)__p;
  }
  if (v26 < 0) {
    unint64_t v19 = v25;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v20[v19]);
  if (v26 >= 0) {
    unint64_t v21 = (const char *)&__p;
  }
  else {
    unint64_t v21 = (const char *)__p;
  }
  uint64_t classname = std::__get_classname(v21, a4);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  return classname;
}

void sub_6D8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_6D914(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_6DE08(a1, a2, a3);
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v8 = a2[1];
    if (v8 == 40)
    {
      char v9 = a2 + 2;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      do
      {
        if (v9 == a3) {
          goto LABEL_22;
        }
        int v10 = v9;
        std::string::value_type v11 = (unsigned __int8 *)sub_6D914(a1, v9, a3);
        if (v9 == v11) {
          break;
        }
        char v9 = sub_6DB54(a1, v11, a3);
      }
      while (v10 != v9);
      if (v10 + 1 == a3 || *v10 != 92 || v10[1] != 41) {
LABEL_22:
      }
        sub_16B78();
      uint64_t v6 = &v10[2 * (v10[1] == 41)];
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
    }
    else if (((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38) && (v8 - 49) <= 8)
    {
      if ((v8 - 48) <= *(_DWORD *)(a1 + 28)) {
        sub_1940C(a1);
      }
      sub_193B4();
    }
  }
  return v6;
}

unsigned __int8 *sub_6DB54(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    if (v3 == 42) {
      sub_1E5E0();
    }
    unint64_t v4 = a3;
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      std::string::size_type v5 = &a2[2 * (a2[1] == 123)];
      if (v5 == a3) {
        goto LABEL_45;
      }
      int v6 = *v5;
      if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
        goto LABEL_45;
      }
      int v7 = v6 - 48;
      int v8 = v5 + 1;
      if (v5 + 1 == a3)
      {
LABEL_15:
        int v8 = a3;
      }
      else
      {
        while (1)
        {
          int v9 = *v8;
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38) {
            break;
          }
          if (v7 >= 214748364) {
            goto LABEL_45;
          }
          int v7 = v9 + 10 * v7 - 48;
          if (++v8 == a3) {
            goto LABEL_15;
          }
        }
      }
      if (v8 == v5) {
LABEL_45:
      }
        sub_1E770();
      if (v8 == a3) {
LABEL_46:
      }
        sub_1E7C8();
      int v10 = v8 + 1;
      int v11 = *v8;
      if (v11 != 44)
      {
        if (v10 != a3 && v11 == 92 && *v10 == 125) {
          sub_1E5E0();
        }
        goto LABEL_46;
      }
      if (v10 == a3) {
        goto LABEL_46;
      }
      int v12 = *v10;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
      {
        int v13 = v12 - 48;
        int v10 = v8 + 2;
        if (v8 + 2 == a3)
        {
LABEL_37:
          int v10 = a3;
          goto LABEL_40;
        }
        while (1)
        {
          int v15 = *v10;
          if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
            break;
          }
          if (v13 >= 214748364) {
            goto LABEL_45;
          }
          int v13 = v15 + 10 * v13 - 48;
          if (++v10 == a3) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        int v13 = -1;
      }
      if (v10 == a3)
      {
        uint64_t v16 = v10;
        int v10 = a3;
        unint64_t v4 = v16;
      }
      else if (v10 + 1 == a3 || *v10 != 92)
      {
        unint64_t v4 = v10;
      }
      else
      {
        unint64_t v4 = &v10[2 * (v10[1] == 125)];
      }
LABEL_40:
      if (v10 != v4)
      {
        if (v13 == -1) {
          sub_1E5E0();
        }
        if (v13 >= v7) {
          sub_1E5E0();
        }
        goto LABEL_45;
      }
      goto LABEL_46;
    }
  }
  return a2;
}

unsigned char *sub_6DE08(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
LABEL_18:
    return sub_6B9F0(a1, a2, a3);
  }
  std::string::size_type v5 = a2 + 1;
  int v4 = *a2;
  if ((a2 + 1 != a3 || v4 != 36)
    && ((v4 - 46) > 0x2E || ((1 << (v4 - 46)) & 0x600000000001) == 0))
  {
    sub_191E8(a1);
  }
  std::string::size_type result = a2;
  if (v5 != a3)
  {
    std::string::size_type result = a2;
    if (*a2 == 92)
    {
      BOOL v8 = ((char)*v5 - 36) > 0x3A || ((1 << (*v5 - 36)) & 0x580000000000441) == 0;
      std::string::size_type result = a2;
      if (!v8) {
        sub_191E8(a1);
      }
    }
  }
  if (result == a2)
  {
    if (*a2 == 46) {
      operator new();
    }
    goto LABEL_18;
  }
  return result;
}

char *sub_6DF94(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_6E2CC(a1, a2, a3);
  if (v6 == a2)
  {
    int v6 = sub_6E4B4(a1, a2, a3);
    if (v6 == a2)
    {
      if (a2 != a3 && *a2 == 46) {
        operator new();
      }
      int v6 = sub_6B9F0(a1, a2, a3);
    }
  }
  if (v6 == a2 && v6 != a3)
  {
    int v7 = *a2;
    if (v7 == 36) {
      operator new();
    }
    if (v7 != 40)
    {
      if (v7 == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    BOOL v8 = (char *)sub_6A6F8(a1, a2 + 1, a3);
    if (v8 == a3 || *v8 != 41) {
      sub_16B78();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    int v6 = v8 + 1;
  }
  if (v6 == a2) {
    return a2;
  }

  return sub_6B488(a1, v6, a3);
}

unsigned char *sub_6E2CC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        return a2;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_5;
        }
        return a2;
      default:
LABEL_5:
        sub_191E8(a1);
    }
  }
  return a2;
}

char *sub_6E4B4(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = a2 + 1;
  if (a2 + 1 == a3 || *a2 != 92) {
    return a2;
  }
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_191E8(a1);
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        std::string::size_type result = sub_6D060(a1, v4, a3, 0);
      }
      else
      {
        int v6 = sub_1F7C4(a1, *v4);
        uint64_t v7 = 2;
        if (!v6) {
          uint64_t v7 = 0;
        }
        std::string::size_type result = &a2[v7];
      }
      break;
  }
  return result;
}

char *sub_6E6EC(char **a1, uint64_t a2)
{
  int v3 = *a1;
  int v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    int v9 = (char *)operator new(24 * v8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = &v9[24 * v5];
  uint64_t v16 = v10;
  uint64_t v17 = v10;
  char v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    int v3 = *a1;
    int v4 = a1[1];
    int v10 = v16;
    int v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      int v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)int v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    int v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  int v13 = *a1;
  int v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    unint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    int v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_6E8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_6E8C4(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  int v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  int v11 = (char *)*a1;
  long long v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  unint64_t v14 = (char *)*a1;
  long long v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    long long v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_6EA30(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_6EF14(uint64_t result, const void **a2)
{
  if ((const void **)result != a2)
  {
    uint64_t v35 = v2;
    uint64_t v36 = v3;
    uint64_t v5 = result;
    char v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (const void **)result;
      do
      {
        int v10 = v8;
        unint64_t v8 = v6;
        int v11 = *((char *)v10 + 23);
        int v12 = *((char *)v10 + 47);
        if (v12 >= 0) {
          size_t v13 = *((unsigned __int8 *)v10 + 47);
        }
        else {
          size_t v13 = (size_t)v10[4];
        }
        if (v12 >= 0) {
          uint64_t v14 = v6;
        }
        else {
          uint64_t v14 = (const void **)v10[3];
        }
        if (v11 >= 0) {
          size_t v15 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          size_t v15 = (size_t)v10[1];
        }
        if (v11 >= 0) {
          unint64_t v16 = v10;
        }
        else {
          unint64_t v16 = *v10;
        }
        if (v15 >= v13) {
          size_t v17 = v13;
        }
        else {
          size_t v17 = v15;
        }
        std::string::size_type result = memcmp(v14, v16, v17);
        BOOL v18 = v13 < v15;
        if (result) {
          BOOL v18 = (int)result < 0;
        }
        if (v18)
        {
          std::string::size_type v34 = v8[2];
          unint64_t v19 = (unint64_t)v34;
          long long v33 = *(_OWORD *)v8;
          v8[1] = 0;
          void v8[2] = 0;
          char *v8 = 0;
          size_t v20 = HIBYTE(v19);
          if ((v20 & 0x80u) == 0) {
            size_t v21 = v20;
          }
          else {
            size_t v21 = *((void *)&v33 + 1);
          }
          if ((v20 & 0x80u) == 0) {
            int v22 = &v33;
          }
          else {
            int v22 = (long long *)v33;
          }
          uint64_t v23 = v7;
          do
          {
            uint64_t v24 = v5 + v23;
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v5 + v23);
            *(void *)(v24 + 40) = *(void *)(v5 + v23 + 16);
            *(unsigned char *)(v24 + 23) = 0;
            *(unsigned char *)uint64_t v24 = 0;
            if (!v23)
            {
              uint64_t v9 = v5;
              goto LABEL_5;
            }
            size_t v27 = *(const void **)(v24 - 24);
            uint64_t v25 = v24 - 24;
            int64_t v26 = v27;
            int v28 = *(char *)(v25 + 23);
            if (v28 >= 0) {
              size_t v29 = *(unsigned __int8 *)(v25 + 23);
            }
            else {
              size_t v29 = *(void *)(v25 + 8);
            }
            if (v28 >= 0) {
              unint64_t v30 = (const void *)v25;
            }
            else {
              unint64_t v30 = v26;
            }
            if (v29 >= v21) {
              size_t v31 = v21;
            }
            else {
              size_t v31 = v29;
            }
            std::string::size_type result = memcmp(v22, v30, v31);
            BOOL v32 = v21 < v29;
            if (result) {
              BOOL v32 = (int)result < 0;
            }
            v23 -= 24;
          }
          while (v32);
          uint64_t v9 = v5 + v23 + 24;
LABEL_5:
          *(_OWORD *)uint64_t v9 = v33;
          *(void *)(v9 + 16) = v34;
        }
        char v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

const void **sub_6F0B4(const void **result, const void **a2)
{
  if (result != a2)
  {
    uint64_t v32 = v2;
    uint64_t v33 = v3;
    uint64_t v5 = result;
    for (uint64_t i = result + 3; v5 + 3 != a2; uint64_t i = v5 + 3)
    {
      uint64_t v7 = v5;
      uint64_t v5 = i;
      int v8 = *((char *)v7 + 23);
      int v9 = *((char *)v7 + 47);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)v7 + 47);
      }
      else {
        size_t v10 = (size_t)v7[4];
      }
      if (v9 >= 0) {
        int v11 = i;
      }
      else {
        int v11 = (const void **)v7[3];
      }
      if (v8 >= 0) {
        size_t v12 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v12 = (size_t)v7[1];
      }
      if (v8 >= 0) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = *v7;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      std::string::size_type result = (const void **)memcmp(v11, v13, v14);
      BOOL v15 = v10 < v12;
      if (result) {
        BOOL v15 = (int)result < 0;
      }
      if (v15)
      {
        size_t v31 = v5[2];
        unint64_t v16 = (unint64_t)v31;
        long long v30 = *(_OWORD *)v5;
        v5[1] = 0;
        void v5[2] = 0;
        *uint64_t v5 = 0;
        size_t v17 = HIBYTE(v16);
        if ((v17 & 0x80u) == 0) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = *((void *)&v30 + 1);
        }
        if ((v17 & 0x80u) == 0) {
          unint64_t v19 = &v30;
        }
        else {
          unint64_t v19 = (long long *)v30;
        }
        size_t v20 = v5;
        do
        {
          size_t v21 = v20 - 3;
          *(_OWORD *)size_t v20 = *(_OWORD *)(v20 - 3);
          v20[2] = *(v20 - 1);
          *((unsigned char *)v20 - 1) = 0;
          *((unsigned char *)v20 - 24) = 0;
          size_t v22 = *((unsigned __int8 *)v20 - 25);
          uint64_t v23 = v20 - 6;
          uint64_t v24 = (const void **)*(v20 - 6);
          size_t v25 = (size_t)*(v20 - 5);
          if ((v22 & 0x80u) == 0) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v25;
          }
          if ((v22 & 0x80u) == 0) {
            size_t v27 = v23;
          }
          else {
            size_t v27 = v24;
          }
          if (v26 >= v18) {
            size_t v28 = v18;
          }
          else {
            size_t v28 = v26;
          }
          std::string::size_type result = (const void **)memcmp(v19, v27, v28);
          BOOL v29 = (int)result < 0;
          if (!result) {
            BOOL v29 = v18 < v26;
          }
          size_t v20 = v21;
        }
        while (v29);
        *(_OWORD *)size_t v21 = v30;
        v21[2] = v31;
      }
    }
  }
  return result;
}

uint64_t sub_6F234(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    size_t v17 = a3;
  }
  else {
    size_t v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  int v19 = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v14)
  {
    if (v20)
    {
      size_t v21 = a1[2];
      long long v22 = *(_OWORD *)a1;
      uint64_t v23 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
      return 1;
    }
    unint64_t v39 = (unint64_t)a1[2];
    long long v40 = *(_OWORD *)a1;
    std::string::size_type v41 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v41;
    *(_OWORD *)a2 = v40;
    a2[2] = (const void *)v39;
    size_t v42 = HIBYTE(v39);
    int v43 = *((char *)a3 + 23);
    if (v43 >= 0) {
      size_t v44 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v44 = (size_t)a3[1];
    }
    if (v43 >= 0) {
      long long v45 = a3;
    }
    else {
      long long v45 = *a3;
    }
    if ((v42 & 0x80u) == 0) {
      size_t v46 = v42;
    }
    else {
      size_t v46 = (size_t)a2[1];
    }
    if ((v42 & 0x80u) == 0) {
      unint64_t v47 = a2;
    }
    else {
      unint64_t v47 = *a2;
    }
    if (v46 >= v44) {
      size_t v48 = v44;
    }
    else {
      size_t v48 = v46;
    }
    int v49 = memcmp(v45, v47, v48);
    BOOL v50 = v44 < v46;
    if (v49) {
      BOOL v50 = v49 < 0;
    }
    if (!v50) {
      return 1;
    }
    long long v51 = a2[2];
    long long v52 = *(_OWORD *)a2;
    uint64_t v53 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v53;
    *(_OWORD *)a3 = v52;
    a3[2] = v51;
    return 2;
  }
  if (v20)
  {
    uint64_t v24 = a2[2];
    long long v25 = *(_OWORD *)a2;
    size_t v26 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v26;
    *(_OWORD *)a3 = v25;
    a3[2] = v24;
    int v27 = *((char *)a1 + 23);
    int v28 = *((char *)a2 + 23);
    if (v28 >= 0) {
      size_t v29 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v29 = (size_t)a2[1];
    }
    if (v28 >= 0) {
      long long v30 = a2;
    }
    else {
      long long v30 = *a2;
    }
    if (v27 >= 0) {
      size_t v31 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v31 = (size_t)a1[1];
    }
    if (v27 >= 0) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = *a1;
    }
    if (v31 >= v29) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v31;
    }
    int v34 = memcmp(v30, v32, v33);
    BOOL v35 = v29 < v31;
    if (v34) {
      BOOL v35 = v34 < 0;
    }
    if (!v35) {
      return 1;
    }
    uint64_t v36 = a1[2];
    long long v37 = *(_OWORD *)a1;
    size_t v38 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
    return 2;
  }
  return 0;
}

const void **sub_6F484(const void **a1, const void **a2)
{
  uint64_t v2 = a2;
  std::string::size_type v58 = a1[2];
  long long v57 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v4 = *((char *)a2 - 1);
  if (SHIBYTE(v58) >= 0) {
    size_t v5 = HIBYTE(v58);
  }
  else {
    size_t v5 = *((void *)&v57 + 1);
  }
  if (SHIBYTE(v58) >= 0) {
    int v6 = &v57;
  }
  else {
    int v6 = (long long *)v57;
  }
  if (v4 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 - 1);
  }
  else {
    size_t v7 = (size_t)*(a2 - 2);
  }
  if (v4 >= 0) {
    size_t v8 = a2 - 3;
  }
  else {
    size_t v8 = (const void **)*(a2 - 3);
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  BOOL v11 = v5 < v7;
  if (v10) {
    BOOL v11 = v10 < 0;
  }
  if (v11)
  {
    size_t v12 = a1 + 3;
    do
    {
      int v13 = *((char *)v12 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v14 = (size_t)v12[1];
      }
      if (v13 >= 0) {
        int v15 = v12;
      }
      else {
        int v15 = *v12;
      }
      if (v14 >= v5) {
        size_t v16 = v5;
      }
      else {
        size_t v16 = v14;
      }
      int v17 = memcmp(v6, v15, v16);
      BOOL v18 = v5 < v14;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      v12 += 3;
    }
    while (!v18);
    int v19 = v12 - 3;
  }
  else
  {
    BOOL v20 = a1 + 3;
    do
    {
      int v19 = v20;
      if (v20 >= v2) {
        break;
      }
      int v21 = *((char *)v20 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        size_t v22 = (size_t)v20[1];
      }
      if (v21 >= 0) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = *v20;
      }
      if (v22 >= v5) {
        size_t v24 = v5;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v6, v23, v24);
      BOOL v26 = v25 < 0;
      if (!v25) {
        BOOL v26 = v5 < v22;
      }
      BOOL v20 = v19 + 3;
    }
    while (!v26);
  }
  if (v19 < v2)
  {
    int v27 = v2 - 3;
    do
    {
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        size_t v29 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        size_t v29 = (size_t)v27[1];
      }
      if (v28 >= 0) {
        long long v30 = v27;
      }
      else {
        long long v30 = *v27;
      }
      if (v29 >= v5) {
        size_t v31 = v5;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(v6, v30, v31);
      BOOL v33 = v5 < v29;
      if (v32) {
        BOOL v33 = v32 < 0;
      }
      v27 -= 3;
    }
    while (v33);
    uint64_t v2 = v27 + 3;
  }
  for (; v19 < v2; uint64_t v2 = v46 + 3)
  {
    long long v34 = *(_OWORD *)v19;
    long long v60 = v19[2];
    long long v59 = v34;
    long long v35 = *(_OWORD *)v2;
    v19[2] = v2[2];
    *(_OWORD *)int v19 = v35;
    uint64_t v36 = v19 + 3;
    long long v37 = v59;
    v2[2] = v60;
    *(_OWORD *)uint64_t v2 = v37;
    if (SHIBYTE(v58) >= 0) {
      size_t v38 = HIBYTE(v58);
    }
    else {
      size_t v38 = *((void *)&v57 + 1);
    }
    if (SHIBYTE(v58) >= 0) {
      unint64_t v39 = &v57;
    }
    else {
      unint64_t v39 = (long long *)v57;
    }
    do
    {
      int v40 = *((char *)v36 + 23);
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v36 + 23);
      }
      else {
        size_t v41 = (size_t)v36[1];
      }
      if (v40 >= 0) {
        size_t v42 = v36;
      }
      else {
        size_t v42 = *v36;
      }
      if (v41 >= v38) {
        size_t v43 = v38;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v39, v42, v43);
      BOOL v45 = v38 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      v36 += 3;
    }
    while (!v45);
    int v19 = v36 - 3;
    size_t v46 = v2 - 3;
    do
    {
      int v47 = *((char *)v46 + 23);
      if (v47 >= 0) {
        size_t v48 = *((unsigned __int8 *)v46 + 23);
      }
      else {
        size_t v48 = (size_t)v46[1];
      }
      if (v47 >= 0) {
        int v49 = v46;
      }
      else {
        int v49 = *v46;
      }
      if (v48 >= v38) {
        size_t v50 = v38;
      }
      else {
        size_t v50 = v48;
      }
      int v51 = memcmp(v39, v49, v50);
      BOOL v52 = v38 < v48;
      if (v51) {
        BOOL v52 = v51 < 0;
      }
      v46 -= 3;
    }
    while (v52);
  }
  uint64_t v53 = (void **)(v19 - 3);
  if (v19 - 3 == a1)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*v53);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v54 = *(_OWORD *)v53;
    a1[2] = *(v19 - 1);
    *(_OWORD *)a1 = v54;
    *((unsigned char *)v19 - 1) = 0;
    *((unsigned char *)v19 - 24) = 0;
  }
  long long v55 = v57;
  *(v19 - 1) = v58;
  *(_OWORD *)uint64_t v53 = v55;
  return v19;
}

unint64_t sub_6F78C(long long *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v57 = *((void *)a1 + 2);
  unint64_t v5 = v57;
  long long v56 = *a1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  size_t v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = *((void *)&v56 + 1);
  }
  if ((v6 & 0x80u) == 0) {
    size_t v8 = &v56;
  }
  else {
    size_t v8 = (long long *)v56;
  }
  do
  {
    int v9 = *((char *)a1 + v4 + 47);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + v4 + 47);
    }
    else {
      size_t v10 = *(void *)((char *)a1 + v4 + 32);
    }
    if (v9 >= 0) {
      BOOL v11 = (char *)a1 + v4 + 24;
    }
    else {
      BOOL v11 = *(char **)((char *)a1 + v4 + 24);
    }
    if (v7 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v7;
    }
    int v13 = memcmp(v11, v8, v12);
    BOOL v14 = v10 < v7;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    v4 += 24;
  }
  while (v14);
  unint64_t v15 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    size_t v24 = (const void **)(a2 - 24);
    while (1)
    {
      unint64_t v23 = (unint64_t)(v24 + 3);
      if (v15 >= (unint64_t)(v24 + 3)) {
        break;
      }
      int v25 = *((char *)v24 + 23);
      if (v25 >= 0) {
        size_t v26 = *((unsigned __int8 *)v24 + 23);
      }
      else {
        size_t v26 = (size_t)v24[1];
      }
      if (v25 >= 0) {
        int v27 = v24;
      }
      else {
        int v27 = *v24;
      }
      if (v7 >= v26) {
        size_t v28 = v26;
      }
      else {
        size_t v28 = v7;
      }
      int v29 = memcmp(v27, v8, v28);
      BOOL v30 = v26 < v7;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      v24 -= 3;
      if (v30)
      {
        unint64_t v23 = (unint64_t)(v24 + 3);
        break;
      }
    }
  }
  else
  {
    size_t v16 = (const void **)(a2 - 24);
    do
    {
      int v17 = *((char *)v16 + 23);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)v16 + 23);
      }
      else {
        size_t v18 = (size_t)v16[1];
      }
      if (v17 >= 0) {
        int v19 = v16;
      }
      else {
        int v19 = *v16;
      }
      if (v7 >= v18) {
        size_t v20 = v18;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v19, v8, v20);
      BOOL v22 = v18 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      v16 -= 3;
    }
    while (!v22);
    unint64_t v23 = (unint64_t)(v16 + 3);
  }
  if (v15 >= v23)
  {
    unint64_t v31 = v15;
    unint64_t v52 = v15 - 24;
    if ((long long *)(v15 - 24) != a1)
    {
LABEL_84:
      if (*((char *)a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v53 = *(_OWORD *)v52;
      *((void *)a1 + 2) = *(void *)(v52 + 16);
      *a1 = v53;
      *(unsigned char *)(v31 - 1) = 0;
      *(unsigned char *)(v31 - 24) = 0;
      goto LABEL_90;
    }
  }
  else
  {
    unint64_t v31 = v15;
    int v32 = (const void **)v23;
    do
    {
      long long v33 = *(_OWORD *)v31;
      long long v59 = *(const void **)(v31 + 16);
      long long v58 = v33;
      long long v34 = *(_OWORD *)v32;
      *(void *)(v31 + 16) = v32[2];
      *(_OWORD *)unint64_t v31 = v34;
      long long v35 = (const void **)(v31 + 24);
      long long v36 = v58;
      v32[2] = v59;
      *(_OWORD *)int v32 = v36;
      if (v57 >= 0) {
        size_t v37 = HIBYTE(v57);
      }
      else {
        size_t v37 = *((void *)&v56 + 1);
      }
      if (v57 >= 0) {
        size_t v38 = &v56;
      }
      else {
        size_t v38 = (long long *)v56;
      }
      do
      {
        int v39 = *((char *)v35 + 23);
        if (v39 >= 0) {
          size_t v40 = *((unsigned __int8 *)v35 + 23);
        }
        else {
          size_t v40 = (size_t)v35[1];
        }
        if (v39 >= 0) {
          size_t v41 = v35;
        }
        else {
          size_t v41 = *v35;
        }
        if (v37 >= v40) {
          size_t v42 = v40;
        }
        else {
          size_t v42 = v37;
        }
        int v43 = memcmp(v41, v38, v42);
        BOOL v44 = v40 < v37;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        v35 += 3;
      }
      while (v44);
      unint64_t v31 = (unint64_t)(v35 - 3);
      BOOL v45 = v32 - 3;
      do
      {
        int v46 = *((char *)v45 + 23);
        if (v46 >= 0) {
          size_t v47 = *((unsigned __int8 *)v45 + 23);
        }
        else {
          size_t v47 = (size_t)v45[1];
        }
        if (v46 >= 0) {
          size_t v48 = v45;
        }
        else {
          size_t v48 = *v45;
        }
        if (v37 >= v47) {
          size_t v49 = v47;
        }
        else {
          size_t v49 = v37;
        }
        int v50 = memcmp(v48, v38, v49);
        BOOL v51 = v47 < v37;
        if (v50) {
          BOOL v51 = v50 < 0;
        }
        v45 -= 3;
      }
      while (!v51);
      int v32 = v45 + 3;
    }
    while (v31 < (unint64_t)v32);
    unint64_t v52 = v31 - 24;
    if ((long long *)(v31 - 24) != a1) {
      goto LABEL_84;
    }
  }
  if (*(char *)(v31 - 1) < 0) {
    operator delete(*(void **)v52);
  }
LABEL_90:
  long long v54 = v56;
  *(void *)(v52 + 16) = v57;
  *(_OWORD *)unint64_t v52 = v54;
  return v52;
}

BOOL sub_6FA80(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v6 = a2 - 3;
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 1);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      if (v8 >= 0) {
        size_t v10 = a2 - 3;
      }
      else {
        size_t v10 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15)
      {
        size_t v16 = *(const void **)(a1 + 16);
        long long v17 = *(_OWORD *)a1;
        size_t v18 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v18;
        *(_OWORD *)size_t v6 = v17;
        uint64_t v6[2] = v16;
      }
      return 1;
    case 3uLL:
      sub_6F234((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_6FD74(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_6FF28(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
      return 1;
    default:
      int v19 = (const void **)(a1 + 48);
      sub_6F234((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      size_t v20 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    int v24 = *((char *)v19 + 23);
    int v25 = *((char *)v20 + 23);
    if (v25 >= 0) {
      size_t v26 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      size_t v26 = (size_t)v20[1];
    }
    if (v25 >= 0) {
      int v27 = v20;
    }
    else {
      int v27 = *v20;
    }
    if (v24 >= 0) {
      size_t v28 = *((unsigned __int8 *)v19 + 23);
    }
    else {
      size_t v28 = (size_t)v19[1];
    }
    if (v24 >= 0) {
      int v29 = v19;
    }
    else {
      int v29 = *v19;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      long long v46 = *(_OWORD *)v20;
      size_t v47 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *size_t v20 = 0;
      uint64_t v33 = v21;
      do
      {
        uint64_t v34 = a1 + v33;
        *(_OWORD *)(v34 + 72) = *(_OWORD *)(a1 + v33 + 48);
        *(void *)(v34 + 88) = *(void *)(a1 + v33 + 64);
        *(unsigned char *)(v34 + 71) = 0;
        *(unsigned char *)(v34 + 48) = 0;
        if (v33 == -48)
        {
          uint64_t v23 = a1;
          goto LABEL_24;
        }
        size_t v37 = *(const void **)(v34 + 24);
        uint64_t v35 = v34 + 24;
        long long v36 = v37;
        int v38 = *(char *)(v35 + 23);
        if (SHIBYTE(v47) >= 0) {
          size_t v39 = HIBYTE(v47);
        }
        else {
          size_t v39 = *((void *)&v46 + 1);
        }
        if (SHIBYTE(v47) >= 0) {
          size_t v40 = &v46;
        }
        else {
          size_t v40 = (long long *)v46;
        }
        if (v38 >= 0) {
          size_t v41 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          size_t v41 = *(void *)(v35 + 8);
        }
        if (v38 >= 0) {
          size_t v42 = (const void *)v35;
        }
        else {
          size_t v42 = v36;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v33 -= 24;
      }
      while (v45);
      uint64_t v23 = a1 + v33 + 72;
LABEL_24:
      *(_OWORD *)uint64_t v23 = v46;
      *(void *)(v23 + 16) = v47;
      if (++v22 == 8) {
        return v20 + 3 == a2;
      }
    }
    int v19 = v20;
    v21 += 24;
    v20 += 3;
    if (v20 == a2) {
      return 1;
    }
  }
}

__n128 sub_6FD74(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  sub_6F234((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    size_t v13 = a3;
  }
  else {
    size_t v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    size_t v18 = (const void *)*((void *)a3 + 2);
    long long v19 = *a3;
    size_t v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    int v21 = *((char *)a2 + 23);
    int v22 = *((char *)a3 + 23);
    if (v22 >= 0) {
      size_t v23 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v23 = *((void *)a3 + 1);
    }
    if (v22 >= 0) {
      int v24 = a3;
    }
    else {
      int v24 = *(const void **)a3;
    }
    if (v21 >= 0) {
      size_t v25 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v25 = *((void *)a2 + 1);
    }
    if (v21 >= 0) {
      size_t v26 = a2;
    }
    else {
      size_t v26 = *(const void **)a2;
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v23 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (v29)
    {
      uint64_t v30 = *((void *)a2 + 2);
      long long v31 = *a2;
      uint64_t v32 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v32;
      *a3 = v31;
      *((void *)a3 + 2) = v30;
      int v33 = *(char *)(a1 + 23);
      int v34 = *((char *)a2 + 23);
      if (v34 >= 0) {
        size_t v35 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v35 = *((void *)a2 + 1);
      }
      if (v34 >= 0) {
        long long v36 = a2;
      }
      else {
        long long v36 = *(const void **)a2;
      }
      if (v33 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v37 = *(void *)(a1 + 8);
      }
      if (v33 >= 0) {
        int v38 = (const void *)a1;
      }
      else {
        int v38 = *(const void **)a1;
      }
      if (v37 >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = v37;
      }
      int v40 = memcmp(v36, v38, v39);
      BOOL v41 = v35 < v37;
      if (v40) {
        BOOL v41 = v40 < 0;
      }
      if (v41)
      {
        uint64_t v42 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v43 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(void *)(a1 + 16) = v43;
        *a2 = (__int128)result;
        *((void *)a2 + 2) = v42;
      }
    }
  }
  return result;
}

__n128 sub_6FF28(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  sub_6FD74(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    size_t v13 = a5;
  }
  else {
    size_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v14 = *((void *)a4 + 1);
  }
  if (v10 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = *(long long **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    size_t v20 = (const void *)*((void *)a4 + 2);
    long long v21 = *a4;
    int v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    int v23 = *(char *)(a3 + 23);
    int v24 = *((char *)a4 + 23);
    if (v24 >= 0) {
      size_t v25 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v25 = *((void *)a4 + 1);
    }
    if (v24 >= 0) {
      size_t v26 = a4;
    }
    else {
      size_t v26 = *(long long **)a4;
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v27 = *(void *)(a3 + 8);
    }
    if (v23 >= 0) {
      int v28 = (const void *)a3;
    }
    else {
      int v28 = *(const void **)a3;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      uint64_t v32 = *(void *)(a3 + 16);
      long long v33 = *(_OWORD *)a3;
      uint64_t v34 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(void *)(a3 + 16) = v34;
      *a4 = v33;
      *((void *)a4 + 2) = v32;
      int v35 = *(char *)(a2 + 23);
      int v36 = *(char *)(a3 + 23);
      if (v36 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v37 = *(void *)(a3 + 8);
      }
      if (v36 >= 0) {
        int v38 = (const void *)a3;
      }
      else {
        int v38 = *(const void **)a3;
      }
      if (v35 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v39 = *(void *)(a2 + 8);
      }
      if (v35 >= 0) {
        int v40 = (const void *)a2;
      }
      else {
        int v40 = *(const void **)a2;
      }
      if (v39 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v39;
      }
      int v42 = memcmp(v38, v40, v41);
      BOOL v43 = v37 < v39;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (v43)
      {
        uint64_t v44 = *(void *)(a2 + 16);
        long long v45 = *(_OWORD *)a2;
        uint64_t v46 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v46;
        *(_OWORD *)a3 = v45;
        *(void *)(a3 + 16) = v44;
        int v47 = *(char *)(a1 + 23);
        int v48 = *(char *)(a2 + 23);
        if (v48 >= 0) {
          size_t v49 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v49 = *(void *)(a2 + 8);
        }
        if (v48 >= 0) {
          int v50 = (const void *)a2;
        }
        else {
          int v50 = *(const void **)a2;
        }
        if (v47 >= 0) {
          size_t v51 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v51 = *(void *)(a1 + 8);
        }
        if (v47 >= 0) {
          unint64_t v52 = (const void *)a1;
        }
        else {
          unint64_t v52 = *(const void **)a1;
        }
        if (v51 >= v49) {
          size_t v53 = v49;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v50, v52, v53);
        BOOL v55 = v49 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (v55)
        {
          uint64_t v56 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v57 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v57;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

__n128 sub_70160(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v67 = v4;
    uint64_t v68 = v5;
    int v7 = a4;
    uint64_t v8 = a1;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v10 = a3;
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      size_t v12 = (__n128 *)(a1 + 24 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        size_t v25 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        signed __int8 v14 = v12[2].n128_i8[15];
        signed __int8 v15 = v12[1].n128_i8[7];
        unsigned int v61 = (__n128 *)v12[1].n128_u64[1];
        long long v62 = (__n128 *)v12->n128_u64[0];
        if (v15 >= 0) {
          size_t v16 = v12[1].n128_u8[7];
        }
        else {
          size_t v16 = v12->n128_u64[1];
        }
        if (v15 >= 0) {
          int v17 = (const void *)(a1 + 24 * v11);
        }
        else {
          int v17 = (const void *)v12->n128_u64[0];
        }
        unint64_t v18 = v6 >> 1;
        if (v14 >= 0) {
          size_t v19 = v12[2].n128_u8[15];
        }
        else {
          size_t v19 = v12[2].n128_u64[0];
        }
        if (v14 >= 0) {
          size_t v20 = &v12[1].n128_i8[8];
        }
        else {
          size_t v20 = (__int8 *)v12[1].n128_u64[1];
        }
        if (v19 >= v16) {
          size_t v21 = v16;
        }
        else {
          size_t v21 = v19;
        }
        int v22 = memcmp(v17, v20, v21);
        BOOL v23 = v16 >= v19;
        uint64_t v9 = v18;
        BOOL v24 = !v23;
        if (v22) {
          BOOL v24 = v22 < 0;
        }
        BOOL v48 = !v24;
        size_t v25 = v62;
        if (!v48)
        {
          size_t v25 = v61;
          size_t v12 = (__n128 *)((char *)v12 + 24);
          uint64_t v11 = v13;
        }
      }
      int v26 = v7[1].n128_i8[7];
      int v27 = v12[1].n128_i8[7];
      if (v27 >= 0) {
        size_t v28 = v12[1].n128_u8[7];
      }
      else {
        size_t v28 = v12->n128_u64[1];
      }
      if (v27 >= 0) {
        size_t v29 = v12;
      }
      else {
        size_t v29 = v25;
      }
      if (v26 >= 0) {
        size_t v30 = v7[1].n128_u8[7];
      }
      else {
        size_t v30 = v7->n128_u64[1];
      }
      if (v26 >= 0) {
        BOOL v31 = v7;
      }
      else {
        BOOL v31 = (__n128 *)v7->n128_u64[0];
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v29, v31, v32);
      BOOL v35 = v28 < v30;
      if (v33) {
        BOOL v35 = v33 < 0;
      }
      if (!v35)
      {
        __n128 v65 = *v7;
        int64_t v66 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        uint64_t v63 = v9;
        uint64_t v64 = v10;
        do
        {
          long long v58 = v12;
          __n128 v59 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *int v7 = v59;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v60 = (2 * v11) | 1;
          size_t v12 = (__n128 *)(v8 + 24 * v60);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            int v36 = v12[2].n128_i8[15];
            unint64_t v37 = v12[1].n128_u64[1];
            int v38 = v12[1].n128_i8[7];
            unint64_t v39 = v12->n128_u64[0];
            uint64_t v40 = v8;
            if (v38 >= 0) {
              size_t v41 = v12[1].n128_u8[7];
            }
            else {
              size_t v41 = v12->n128_u64[1];
            }
            if (v38 >= 0) {
              int v42 = v12;
            }
            else {
              int v42 = (__n128 *)v12->n128_u64[0];
            }
            if (v36 >= 0) {
              size_t v43 = v12[2].n128_u8[15];
            }
            else {
              size_t v43 = v12[2].n128_u64[0];
            }
            if (v36 >= 0) {
              uint64_t v44 = &v12[1].n128_i8[8];
            }
            else {
              uint64_t v44 = (__int8 *)v12[1].n128_u64[1];
            }
            if (v43 >= v41) {
              size_t v45 = v41;
            }
            else {
              size_t v45 = v43;
            }
            int v46 = memcmp(v42, v44, v45);
            BOOL v23 = v41 >= v43;
            uint64_t v8 = v40;
            BOOL v47 = !v23;
            if (v46) {
              BOOL v47 = v46 < 0;
            }
            BOOL v48 = !v47;
            if (v47) {
              size_t v49 = (__n128 *)v37;
            }
            else {
              size_t v49 = (__n128 *)v39;
            }
            if (!v48) {
              size_t v12 = (__n128 *)((char *)v12 + 24);
            }
            uint64_t v9 = v63;
            uint64_t v10 = v64;
            if (v48) {
              uint64_t v11 = v60;
            }
          }
          else
          {
            size_t v49 = (__n128 *)v12->n128_u64[0];
            uint64_t v11 = v60;
          }
          int v50 = v12[1].n128_i8[7];
          unint64_t v51 = v50 >= 0 ? v12[1].n128_u8[7] : v12->n128_u64[1];
          unint64_t v52 = v50 >= 0 ? v12 : v49;
          unint64_t v53 = v66 >= 0 ? HIBYTE(v66) : v65.n128_u64[1];
          int v54 = v66 >= 0 ? &v65 : (__n128 *)v65.n128_u64[0];
          size_t v55 = v53 >= v51 ? v51 : v53;
          int v56 = memcmp(v52, v54, v55);
          BOOL v57 = v51 < v53;
          if (v56) {
            BOOL v57 = v56 < 0;
          }
          int v7 = v58;
        }
        while (!v57);
        __n128 result = v65;
        v58[1].n128_u64[0] = v66;
        *long long v58 = result;
      }
    }
  }
  return result;
}

void sub_7042C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v24 = *(void *)a1;
    *(void *)int v27 = *(void *)(a1 + 8);
    *(void *)&v27[7] = *(void *)(a1 + 15);
    char v25 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1;
    do
    {
      uint64_t v9 = v7 + 24 * v5 + 24;
      uint64_t v10 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        int v12 = *(char *)(v9 + 47);
        int v13 = *(char *)(v9 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          size_t v14 = *(void *)(v9 + 8);
        }
        if (v13 >= 0) {
          signed __int8 v15 = (const void *)v9;
        }
        else {
          signed __int8 v15 = *(const void **)v9;
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v9 + 47);
        }
        else {
          size_t v16 = *(void *)(v9 + 32);
        }
        if (v12 >= 0) {
          int v17 = (const void *)(v9 + 24);
        }
        else {
          int v17 = *(const void **)(v9 + 24);
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v15, v17, v18);
        BOOL v20 = v14 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (v20)
        {
          v9 += 24;
          uint64_t v5 = v11;
        }
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)v9;
      *(void *)(v7 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v9 + 23) = 0;
      *(unsigned char *)uint64_t v9 = 0;
      uint64_t v7 = v9;
    }
    while (v5 <= v6);
    if (v9 == a2 - 24)
    {
      *(void *)uint64_t v9 = v24;
      *(void *)(v9 + 8) = *(void *)v27;
      *(void *)(v9 + 15) = *(void *)&v27[7];
      *(unsigned char *)(v9 + 23) = v25;
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 - 24);
      *(void *)(v9 + 16) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v9 = v21;
      *(void *)(a2 - 24) = v24;
      *(void *)(a2 - 16) = *(void *)v27;
      *(void *)(a2 - 9) = *(void *)&v27[7];
      *(unsigned char *)(a2 - 1) = v25;
      sub_7063C(a1, v9 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 24 - a1) >> 3));
    }
  }
}

double sub_7063C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v35 = v4;
    uint64_t v36 = v5;
    unint64_t v8 = v6 >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * (v6 >> 1));
    uint64_t v10 = (long long *)(a2 - 24);
    int v11 = *(char *)(a2 - 1);
    int v12 = *((char *)v9 + 23);
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      size_t v13 = *((void *)v9 + 1);
    }
    if (v12 >= 0) {
      size_t v14 = (const void *)(a1 + 24 * (v6 >> 1));
    }
    else {
      size_t v14 = *(const void **)v9;
    }
    if (v11 >= 0) {
      size_t v15 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      size_t v15 = *(void *)(a2 - 16);
    }
    if (v11 >= 0) {
      size_t v16 = (const void *)(a2 - 24);
    }
    else {
      size_t v16 = *(const void **)(a2 - 24);
    }
    if (v15 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v15;
    }
    int v18 = memcmp(v14, v16, v17);
    BOOL v20 = v13 < v15;
    if (v18) {
      BOOL v20 = v18 < 0;
    }
    if (v20)
    {
      unint64_t v34 = *((void *)v10 + 2);
      unint64_t v21 = v34;
      long long v33 = *v10;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      unint64_t v22 = HIBYTE(v21);
      if ((v22 & 0x80u) == 0) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = *((void *)&v33 + 1);
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v24 = &v33;
      }
      else {
        uint64_t v24 = (long long *)v33;
      }
      do
      {
        char v25 = v9;
        long long v26 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v26;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        int v27 = *((char *)v9 + 23);
        unint64_t v28 = v27 >= 0 ? *((unsigned __int8 *)v9 + 23) : *((void *)v9 + 1);
        size_t v29 = v27 >= 0 ? (const void *)(a1 + 24 * v8) : *(const void **)v9;
        size_t v30 = v23 >= v28 ? v28 : v23;
        int v31 = memcmp(v29, v24, v30);
        BOOL v32 = v28 < v23;
        if (v31) {
          BOOL v32 = v31 < 0;
        }
        uint64_t v10 = v25;
      }
      while (v32);
      double result = *(double *)&v33;
      *char v25 = v33;
      *((void *)v25 + 2) = v34;
    }
  }
  return result;
}

void sub_707AC(uint64_t a1)
{
  for (uint64_t i = *(uint64_t **)(a1 + 184); i; uint64_t i = (uint64_t *)*i)
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    uint64_t v3 = (long long *)i[5];
    uint64_t v4 = (long long *)i[6];
    while (v3 != v4)
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_4200(__p, *(void **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v5 = *v3;
        uint64_t v14 = *((void *)v3 + 2);
        *(_OWORD *)std::string __p = v5;
      }
      char v6 = HIBYTE(v14);
      uint64_t v7 = (void **)__p[0];
      if (v14 >= 0) {
        unint64_t v8 = __p;
      }
      else {
        unint64_t v8 = (void **)__p[0];
      }
      if (v14 >= 0) {
        uint64_t v9 = (char *)HIBYTE(v14);
      }
      else {
        uint64_t v9 = (char *)__p[1];
      }
      if (v9)
      {
        while (1)
        {
          __darwin_ct_rune_t v10 = *(char *)v8;
          if (v10 < 0)
          {
            if (__maskrune(v10, 0x100uLL)) {
              goto LABEL_17;
            }
          }
          else if ((_DefaultRuneLocale.__runetype[v10] & 0x500) != 0)
          {
            goto LABEL_17;
          }
          *(unsigned char *)unint64_t v8 = 95;
LABEL_17:
          unint64_t v8 = (void **)((char *)v8 + 1);
          if (!--v9)
          {
            char v6 = HIBYTE(v14);
            uint64_t v7 = (void **)__p[0];
            break;
          }
        }
      }
      if (v6 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = v7;
      }
      xpc_dictionary_set_int64(empty, (const char *)v11, *((void *)v3 + 3));
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      v3 += 2;
    }
    int v12 = (const char *)(i + 2);
    if (*((char *)i + 39) < 0) {
      int v12 = *(const char **)v12;
    }
    xpc_dictionary_set_string(empty, "entityType", v12);
    analytics_send_event();
  }
}

void sub_7091C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_70930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_70954@<Q0>(int a1@<W0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "Instance");
      return result;
    case 1:
      uint64_t v4 = "RoutingService";
      goto LABEL_14;
    case 2:
      *(unsigned char *)(a2 + 23) = 17;
      result.n128_u64[0] = *(void *)"TrafficUpdatePlan";
      strcpy((char *)a2, "TrafficUpdatePlan");
      return result;
    case 3:
      long long v5 = "DrivingDirectionsPlan";
      goto LABEL_23;
    case 4:
      char v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      long long v7 = xmmword_20B91A0;
      unint64_t v8 = "DrivingDirectionsUpdatePlan";
      goto LABEL_30;
    case 5:
      uint64_t v9 = (char *)operator new(0x20uLL);
      *(void *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_20B91C0;
      result.n128_u64[0] = *(void *)"DrivingEndNavSessionPlan";
      strcpy(v9, "DrivingEndNavSessionPlan");
      return result;
    case 6:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "DrivingDooMPlan");
      return result;
    case 7:
      __darwin_ct_rune_t v10 = (char *)operator new(0x20uLL);
      *(void *)a2 = v10;
      long long v11 = xmmword_20B5EB0;
      int v12 = "ETAForSearchAlongRoutePlan";
      goto LABEL_38;
    case 8:
      size_t v13 = (char *)operator new(0x20uLL);
      *(void *)a2 = v13;
      *(_OWORD *)(a2 + 8) = xmmword_20B91B0;
      strcpy(v13, "ETAForSearchWhileDrivingPlan");
      result.n128_u64[0] = *(void *)"WhileDrivingPlan";
      return result;
    case 9:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "ETAPlan");
      return result;
    case 10:
      uint64_t v4 = "FareCalculator";
LABEL_14:
      *(unsigned char *)(a2 + 23) = 14;
      *(void *)a2 = *(void *)v4;
      *(void *)(a2 + 6) = *(void *)(v4 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      return result;
    case 11:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"TransitRealtimeFeed";
      strcpy((char *)a2, "TransitRealtimeFeed");
      return result;
    case 12:
      uint64_t v14 = "TransitRealtimeService";
      goto LABEL_40;
    case 13:
      long long v5 = "TransitRealtimeUpdate";
      goto LABEL_23;
    case 14:
      long long v5 = "TransitDirectionsPlan";
      goto LABEL_23;
    case 15:
      long long v5 = "TransitIncidentUpdate";
      goto LABEL_23;
    case 16:
      long long v5 = "WalkingDirectionsPlan";
      goto LABEL_23;
    case 17:
      uint64_t v14 = "TransitRouteUpdatePlan";
      goto LABEL_40;
    case 18:
      long long v5 = "CyclingDirectionsPlan";
LABEL_23:
      *(unsigned char *)(a2 + 23) = 21;
      double result = *(__n128 *)v5;
      *(_OWORD *)a2 = *(_OWORD *)v5;
      *(void *)(a2 + 13) = *(void *)(v5 + 13);
      *(unsigned char *)(a2 + 21) = 0;
      return result;
    case 19:
      size_t v15 = (char *)operator new(0x20uLL);
      *(void *)a2 = v15;
      long long v16 = xmmword_20B8870;
      size_t v17 = "TransitScheduleLookupPlan";
      goto LABEL_34;
    case 20:
      int v18 = (char *)operator new(0x20uLL);
      *(void *)a2 = v18;
      *(_OWORD *)(a2 + 8) = xmmword_20B8E90;
      strcpy(v18, "TransitNearbyScheduleLookupPlan");
      result.n128_u64[0] = *(void *)"heduleLookupPlan";
      return result;
    case 21:
      char v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      long long v7 = xmmword_20B91A0;
      unint64_t v8 = "TransitVehiclePositionsFeed";
      goto LABEL_30;
    case 22:
      char v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      long long v7 = xmmword_20B91A0;
      unint64_t v8 = "CyclingRawPathRetrievalPlan";
      goto LABEL_30;
    case 23:
      char v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      long long v7 = xmmword_20B91A0;
      unint64_t v8 = "DrivingRawPathRetrievalPlan";
      goto LABEL_30;
    case 24:
      char v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      long long v7 = xmmword_20B91A0;
      unint64_t v8 = "WalkingRawPathRetrievalPlan";
LABEL_30:
      *(_OWORD *)(a2 + 8) = v7;
      *(_OWORD *)char v6 = *(_OWORD *)v8;
      double result = *(__n128 *)(v8 + 11);
      *(__n128 *)(v6 + 11) = result;
      v6[27] = 0;
      return result;
    case 25:
      size_t v15 = (char *)operator new(0x20uLL);
      *(void *)a2 = v15;
      long long v16 = xmmword_20B8870;
      size_t v17 = "CyclingRouteRetrievalPlan";
      goto LABEL_34;
    case 26:
      size_t v15 = (char *)operator new(0x20uLL);
      *(void *)a2 = v15;
      long long v16 = xmmword_20B8870;
      size_t v17 = "DrivingRouteRetrievalPlan";
      goto LABEL_34;
    case 27:
      size_t v15 = (char *)operator new(0x20uLL);
      *(void *)a2 = v15;
      long long v16 = xmmword_20B8870;
      size_t v17 = "WalkingRouteRetrievalPlan";
LABEL_34:
      *(_OWORD *)(a2 + 8) = v16;
      *(_OWORD *)size_t v15 = *(_OWORD *)v17;
      double result = *(__n128 *)(v17 + 9);
      *(__n128 *)(v15 + 9) = result;
      v15[25] = 0;
      break;
    case 28:
      int v19 = (char *)operator new(0x28uLL);
      *(void *)a2 = v19;
      *(_OWORD *)(a2 + 8) = xmmword_20B8FD0;
      result.n128_u64[0] = *(void *)"TransitNearbyPaymentMethodLookupPlan";
      strcpy(v19, "TransitNearbyPaymentMethodLookupPlan");
      break;
    case 29:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "RioETAPlan");
      break;
    case 30:
      __darwin_ct_rune_t v10 = (char *)operator new(0x20uLL);
      *(void *)a2 = v10;
      long long v11 = xmmword_20B5EB0;
      int v12 = "TransitVehiclePositionPlan";
LABEL_38:
      *(_OWORD *)(a2 + 8) = v11;
      *(_OWORD *)__darwin_ct_rune_t v10 = *(_OWORD *)v12;
      double result = *(__n128 *)(v12 + 10);
      *(__n128 *)(v10 + 10) = result;
      v10[26] = 0;
      break;
    case 31:
      uint64_t v14 = "WalkingCustomRoutePlan";
LABEL_40:
      double result = *(__n128 *)v14;
      *(_OWORD *)a2 = *(_OWORD *)v14;
      *(void *)(a2 + 14) = *(void *)(v14 + 14);
      *(_WORD *)(a2 + 22) = 5632;
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Unknown");
      break;
  }
  return result;
}

uint64_t sub_70F28@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 2;
      strcpy(a2, "_s");
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 7564639;
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "_byte");
      break;
    case 3:
      a2[23] = 3;
      *(_DWORD *)a2 = 4345183;
      break;
    case 4:
      a2[23] = 6;
      strcpy(a2, "_count");
      break;
    case 5:
      a2[23] = 9;
      strcpy(a2, "_permille");
      break;
    case 6:
      a2[23] = 8;
      strcpy(a2, "_percent");
      break;
    case 7:
      a2[23] = 2;
      strcpy(a2, "_m");
      break;
    case 8:
      a2[23] = 5;
      strcpy(a2, "_MBps");
      break;
    default:
      a2[23] = 8;
      strcpy(a2, "_unknown");
      break;
  }
  return result;
}

void sub_710A8(int a1, uint64_t a2, uint64_t a3)
{
  sub_71184(&v8, a2, 4);
  sub_70954(a1, (uint64_t)__p, v5);
  sub_71320(a3, __p, (uint64_t)&v8, 1);
  if ((v7 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void sub_71138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_71184(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    sub_70F28(a3, (char *)&__p);
    goto LABEL_13;
  }
  *((unsigned char *)&v17.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v17, "Unknown");
  sub_70F28(a3, (char *)v15);
  if ((v16 & 0x80u) == 0) {
    char v6 = v15;
  }
  else {
    char v6 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v7 = v16;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v15[1];
  }
  std::string v8 = std::string::append(&v17, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
  {
    operator delete(v15[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
LABEL_13:
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)a2;
  }
  else {
    long long v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  size_t v13 = std::string::insert(&__p, 0, v11, v12);
  *a1 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_712D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_71320(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  __p[0] = a2;
  char v6 = sub_71BF4(a1 + 168, (uint64_t)a2, (uint64_t)&unk_20F06E0, (long long **)__p);
  std::string::size_type v7 = v6;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(__p, *(void **)a3, *(void *)(a3 + 8));
    uint64_t v14 = a4;
    unint64_t v8 = v7[6];
    if (v8 < v7[7]) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = a4;
    unint64_t v8 = v6[6];
    if (v8 < v6[7])
    {
LABEL_3:
      long long v9 = *(_OWORD *)__p;
      *(void *)(v8 + 16) = v13;
      *(_OWORD *)unint64_t v8 = v9;
      *(void *)(v8 + 24) = v14;
      v7[6] = v8 + 32;
      return;
    }
  }
  int v10 = sub_7210C((void **)v7 + 5, (uint64_t)__p);
  int v11 = SHIBYTE(v13);
  v7[6] = (uint64_t)v10;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_71408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_71424(int a1, const std::error_condition *a2, uint64_t a3)
{
  char v6 = (const char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  *((unsigned char *)&__s1.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__s1, "RoutingError");
  if (strlen(v6) == 12 && !memcmp(&__s1, v6, 0xCuLL))
  {
    std::error_condition::message(&v12, a2);
  }
  else
  {
    *((unsigned char *)&v12.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v12, "NoneRoutingError");
  }
  char v10 = 13;
  strcpy((char *)v9, "InternalError");
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    sub_4200(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v12;
  }
  sub_7166C(&__s1, (uint64_t)v9, (const std::string::value_type *)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v9[0]);
LABEL_9:
  sub_70954(a1, (uint64_t)v9, v7);
  sub_71320(a3, v9, (uint64_t)&__s1, 1);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete(v12.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_715FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_7166C(std::string *a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6) {
    sub_72254(&v11, a3, a4);
  }
  else {
    sub_71184(&v11, (uint64_t)a3, a4);
  }
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  char v10 = std::string::insert(&v11, 0, v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_71724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_71740(int a1, uint64_t a2, uint64_t a3)
{
  char v4 = 0;
  LOBYTE(__p) = 0;
  sub_717B8(a1, (uint64_t)&__p, a2, a3);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_7179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_717B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(long long **)(a3 + 24);
  uint64_t v5 = *(long long **)(a3 + 32);
  while (v4 != v5)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
      if ((*((char *)v4 + 23) & 0x80000000) == 0)
      {
LABEL_6:
        long long v10 = *v4;
        v27.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
        goto LABEL_9;
      }
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)a3;
      uint64_t v29 = *(void *)(a3 + 16);
      if ((*((char *)v4 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    sub_4200(&v27, *(void **)v4, *((void *)v4 + 1));
LABEL_9:
    uint64_t v11 = *((unsigned __int8 *)v4 + 24);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    if (!v12)
    {
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        sub_4200(&v36, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = v27;
      }
      sub_7166C(&v33, (uint64_t)__dst, (const std::string::value_type *)&v36, v11);
      goto LABEL_43;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_4200(&v32, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string v32 = v27;
    }
    if (v29 >= 0) {
      std::string::size_type v13 = HIBYTE(v29);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__dst[1];
    }
    if (v13)
    {
      *((unsigned char *)&v35.__r_.__value_.__s + 23) = 1;
      LOWORD(v35.__r_.__value_.__l.__data_) = 46;
      if (v29 >= 0) {
        uint64_t v14 = __dst;
      }
      else {
        uint64_t v14 = (void **)__dst[0];
      }
      size_t v15 = std::string::append(&v35, (const std::string::value_type *)v14, v13);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v16;
    }
    else
    {
      size_t v15 = &v36;
    }
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    sub_72254(&__p, (const std::string::value_type *)&v32, v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v19 = std::string::append(&v36, (const std::string::value_type *)p_p, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_35:
        if (!v13) {
          goto LABEL_43;
        }
        goto LABEL_39;
      }
    }
    else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(v36.__r_.__value_.__l.__data_);
    if (!v13) {
      goto LABEL_43;
    }
LABEL_39:
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
LABEL_43:
    int v21 = *(char *)(a2 + 23);
    if (v21 >= 0) {
      unint64_t v22 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v22 = *(const std::string::value_type **)a2;
    }
    if (v21 >= 0) {
      std::string::size_type v23 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v23 = *(void *)(a2 + 8);
    }
    uint64_t v24 = std::string::insert(&v33, 0, v22, v23);
    __n128 v25 = *(__n128 *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v24->__r_.__value_.__r.__words[2];
    *(__n128 *)size_t v30 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if (v12)
      {
LABEL_51:
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_57;
        }
        long long v26 = &v32;
        goto LABEL_56;
      }
    }
    else if (v12)
    {
      goto LABEL_51;
    }
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_57;
    }
    long long v26 = &v36;
LABEL_56:
    operator delete(v26->__r_.__value_.__l.__data_);
LABEL_57:
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v27.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29) & 0x80000000) == 0) {
        goto LABEL_59;
      }
    }
    else if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
      goto LABEL_59;
    }
    operator delete(__dst[0]);
LABEL_59:
    sub_70954(a1, (uint64_t)&v36, v25);
    sub_71320(a4, &v36, (uint64_t)v30, *((void *)v4 + 4));
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31) < 0) {
LABEL_65:
      }
        operator delete(v30[0]);
    }
    else if (SHIBYTE(v31) < 0)
    {
      goto LABEL_65;
    }
    v4 += 3;
  }
}

void sub_71AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_71BF4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  long long v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *long long v26 = 0;
  v26[1] = v11;
  std::string v27 = v26 + 2;
  unint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)std::string v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        std::string v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        std::string v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        std::string v32 = *(void **)(*(void *)a1 + 8 * v11);
        std::string v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      std::string v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      std::string v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  std::string v32 = *(void **)(*(void *)a1 + 8 * v4);
  std::string v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  size_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_72040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7206C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_72054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7206C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_7206C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 48);
        uint64_t v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 9) < 0) {
              operator delete(*(void **)(v4 - 32));
            }
            v4 -= 32;
          }
          while (v4 != v3);
          uint64_t v5 = *(void **)(v2 + 40);
        }
        *(void *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_7210C(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v9 = 32 * v7;
  unint64_t v10 = (char *)operator new(32 * v7);
  unint64_t v11 = &v10[32 * v3];
  unint64_t v12 = &v10[v9];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 2) = v13;
  *((void *)v11 + 3) = v14;
  size_t v15 = v11 + 32;
  char v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v17) {
      return v15;
    }
    goto LABEL_16;
  }
  do
  {
    long long v18 = *((_OWORD *)v17 - 2);
    *((void *)v11 - 2) = *((void *)v17 - 2);
    *((_OWORD *)v11 - 2) = v18;
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v11 - 1) = *((void *)v17 - 1);
    v11 -= 32;
    v17 -= 32;
  }
  while (v17 != v16);
  uint64_t v19 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v15;
  a1[2] = v12;
  if (v17 != v19)
  {
    do
    {
      if (*(v17 - 9) < 0) {
        operator delete(*((void **)v17 - 4));
      }
      v17 -= 32;
    }
    while (v17 != v19);
    uint64_t v17 = v19;
  }
  if (v17) {
LABEL_16:
  }
    operator delete(v17);
  return v15;
}

void sub_72254(std::string *a1, const std::string::value_type *a2, uint64_t a3)
{
  int v5 = a2[23];
  if (v5 >= 0) {
    std::string::size_type v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v6 = *((void *)a2 + 1);
  }
  if (v6)
  {
    *((unsigned char *)&v14.__r_.__value_.__s + 23) = 1;
    LOWORD(v14.__r_.__value_.__l.__data_) = 46;
    if (v5 < 0) {
      a2 = *(const std::string::value_type **)a2;
    }
    unint64_t v7 = std::string::append(&v14, a2, v6);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
  }
  else
  {
    unint64_t v7 = &v15;
  }
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  sub_70F28(a3, (char *)__p);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  unint64_t v11 = std::string::append(&v15, (const std::string::value_type *)v9, v10);
  *a1 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (((char)v13 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v15.__r_.__value_.__l.__data_);
    if (!v6) {
      return;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if (!v6) {
    return;
  }
LABEL_21:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_72384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_723EC(unsigned int a1)
{
  if (qword_2550A38 != -1) {
    dispatch_once(&qword_2550A38, &stru_23FDF90);
  }
  uint64_t v2 = qword_2550A40;
  unint64_t v3 = 0x1110020100uLL >> (8 * a1);
  if (a1 >= 5) {
    LOBYTE(v3) = 0;
  }

  return os_log_type_enabled(v2, (os_log_type_t)v3);
}

void sub_7246C(uint64_t *a1, unsigned int a2)
{
  if (qword_2550A38 != -1) {
    dispatch_once(&qword_2550A38, &stru_23FDF90);
  }
  unint64_t v4 = qword_2550A40;
  unint64_t v5 = 0x1110020100uLL >> (8 * a2);
  if (a2 >= 5) {
    LOBYTE(v5) = 0;
  }
  os_log_type_t v6 = v5;
  if (os_log_type_enabled((os_log_t)qword_2550A40, (os_log_type_t)v5))
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v7 = a1;
    }
    else {
      unint64_t v7 = (uint64_t *)*a1;
    }
    int v8 = 136315138;
    uint64_t v9 = v7;
    _os_log_impl(&def_332C, v4, v6, "%s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_72570(id a1)
{
  qword_2550A40 = (uint64_t)os_log_create("com.apple.maps.offline.routing", "default");
}

std::chrono::steady_clock::time_point sub_725A0(uint64_t a1)
{
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::steady_clock::time_point *)a1 = result;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_725D0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(std::chrono::steady_clock::time_point *)a1 = std::chrono::steady_clock::now();
  *(unsigned char *)(a1 + 16) = 1;
  return a1;
}

std::chrono::steady_clock::time_point sub_7260C(uint64_t a1)
{
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::steady_clock::time_point *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

double sub_72638(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  }
  else {
    v2.__d_.__rep_ = *(void *)(a1 + 8);
  }
  return (double)(v2.__d_.__rep_ - *(void *)a1) / 1000.0;
}

double sub_72688(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  }
  else {
    v2.__d_.__rep_ = *(void *)(a1 + 8);
  }
  return (double)(v2.__d_.__rep_ - *(void *)a1) / 1000000.0;
}

uint64_t sub_726D8(uint64_t a1, void *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v4 = a2[1];
  if (!v4) {
    return a1;
  }
  if (v4 == 15 && *(void *)*a2 == 0x5F44494C41564E49 && *(void *)(*a2 + 7) == 0x4E4F49535245565FLL) {
    return a1;
  }
  sub_72B08((unint64_t)a2, __p);
  os_log_type_t v6 = (unsigned __int8 *)__p[0];
  if (v28 >= 0) {
    os_log_type_t v6 = (unsigned __int8 *)__p;
  }
  unint64_t v7 = (void *)HIBYTE(v28);
  if (v28 < 0) {
    unint64_t v7 = __p[1];
  }
  long long v29 = v6;
  unint64_t v30 = (unint64_t)v7;
  sub_230E8(&v29, 0x2Du, (uint64_t)&v31);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__p[0]);
    int v8 = (unsigned __int8 *)v31;
    uint64_t v9 = v32;
    if (v32 != v31) {
      goto LABEL_13;
    }
LABEL_29:
    char v16 = v9;
    goto LABEL_33;
  }
  int v8 = (unsigned __int8 *)v31;
  uint64_t v9 = v32;
  if (v32 == v31) {
    goto LABEL_29;
  }
LABEL_13:
  LODWORD(v10) = (char)v8[23];
  BOOL v11 = (v10 & 0x80000000) != 0;
  unint64_t v12 = *((void *)v8 + 1);
  if ((v10 & 0x80000000) != 0) {
    int v8 = *(unsigned __int8 **)v8;
  }
  unint64_t v10 = v10;
  if (v11) {
    unint64_t v10 = v12;
  }
  long long v29 = v8;
  unint64_t v30 = v10;
  sub_230E8(&v29, 0x2Eu, (uint64_t)__p);
  if (__p[1] == __p[0]
    || (*(_DWORD *)a1 = std::stoi((const std::string *)__p[0], 0, 10),
        0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) < 2)
    || (*(_DWORD *)(a1 + 4) = std::stoi((const std::string *)__p[0] + 1, 0, 10),
        0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= 2))
  {
    sub_66748();
  }
  *(_DWORD *)(a1 + 8) = std::stoi((const std::string *)__p[0] + 2, 0, 10);
  unsigned __int8 v13 = (void **)__p[0];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) >= 4)
  {
    *(_DWORD *)(a1 + 12) = std::stoi((const std::string *)__p[0] + 3, 0, 10);
    unsigned __int8 v13 = (void **)__p[0];
  }
  if (v13)
  {
    std::string v14 = (void **)__p[1];
    std::string v15 = v13;
    if (__p[1] != v13)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      std::string v15 = (void **)__p[0];
    }
    __p[1] = v13;
    operator delete(v15);
  }
  uint64_t v9 = (const std::string *)v31;
  char v16 = v32;
LABEL_33:
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v9) >> 3) >= 2)
  {
    *(_DWORD *)(a1 + 16) = std::stoi(v9 + 1, 0, 10);
    uint64_t v9 = (const std::string *)v31;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (unsigned char *)v31) >> 3) >= 3)
    {
      uint64_t v17 = (char *)v31 + 48;
      if (*((char *)v31 + 71) < 0)
      {
        uint64_t v26 = *((void *)v31 + 7);
        if (v26)
        {
          uint64_t v17 = (void *)*v17;
          size_t v19 = v26 - 1;
          if ((unint64_t)(v26 - 1) < 0x7FFFFFFFFFFFFFF8)
          {
LABEL_38:
            if (v19 >= 0x17)
            {
              uint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17) {
                uint64_t v21 = v19 | 7;
              }
              uint64_t v22 = v21 + 1;
              uint64_t v20 = operator new(v21 + 1);
              __p[1] = (void *)v19;
              int64_t v28 = v22 | 0x8000000000000000;
              __p[0] = v20;
            }
            else
            {
              HIBYTE(v28) = v19;
              uint64_t v20 = __p;
              if (!v19) {
                goto LABEL_45;
              }
            }
            memmove(v20, (char *)v17 + 1, v19);
LABEL_45:
            *((unsigned char *)v20 + v19) = 0;
            if (*(char *)(a1 + 47) < 0) {
              operator delete(*(void **)v3);
            }
            *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
            *(void *)(v3 + 16) = v28;
            uint64_t v9 = (const std::string *)v31;
            goto LABEL_48;
          }
LABEL_59:
          sub_188D690();
        }
      }
      else
      {
        uint64_t v18 = *((unsigned __int8 *)v31 + 71);
        if (*((unsigned char *)v31 + 71))
        {
          size_t v19 = v18 - 1;
          if ((unint64_t)(v18 - 1) < 0x7FFFFFFFFFFFFFF8) {
            goto LABEL_38;
          }
          goto LABEL_59;
        }
      }
      sub_5AD0();
    }
  }
LABEL_48:
  if (v9)
  {
    uint64_t v23 = v32;
    uint64_t v24 = (void *)v9;
    if (v32 != v9)
    {
      do
      {
        if (SHIBYTE(v23[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23[-1].__r_.__value_.__l.__data_);
        }
        --v23;
      }
      while (v23 != v9);
      uint64_t v24 = v31;
    }
    std::string v32 = v9;
    operator delete(v24);
  }
  return a1;
}

void sub_72A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19)
{
  sub_1A668(&a19);
  if (*(char *)(v19 + 47) < 0)
  {
    operator delete(*v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_72B08@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(char **)result;
  uint64_t v3 = *(char **)(result + 8);
  unint64_t v5 = &v3[*(void *)result];
  if (v3)
  {
    uint64_t v6 = *(void *)(result + 8);
    unint64_t v7 = *(char **)result;
    do
    {
      __darwin_ct_rune_t v8 = *v7;
      if (v8 < 0)
      {
        std::chrono::steady_clock::time_point result = __maskrune(v8, 0x4000uLL);
        if (!result) {
          goto LABEL_10;
        }
      }
      else
      {
        std::chrono::steady_clock::time_point result = _DefaultRuneLocale.__runetype[v8] & 0x4000;
        if (!result) {
          goto LABEL_10;
        }
      }
      ++v7;
      --v6;
    }
    while (v6);
    unint64_t v7 = v5;
  }
  else
  {
    unint64_t v7 = *(char **)result;
  }
LABEL_10:
  uint64_t v9 = (char *)(v7 - v4);
  if (v7 - v4 >= (unint64_t)v3) {
    uint64_t v9 = v3;
  }
  unint64_t v10 = &v9[(void)v4];
  unint64_t v11 = v3 - v9;
  uint64_t v12 = (uint64_t)&v4[(void)v3 + 1];
  unsigned __int8 v13 = (char *)(v9 - v3);
  while (v13)
  {
    __darwin_ct_rune_t v14 = *(char *)(v12 - 2);
    if (v14 < 0)
    {
      std::chrono::steady_clock::time_point result = __maskrune(v14, 0x4000uLL);
      --v12;
      ++v13;
      if (!result) {
        goto LABEL_19;
      }
    }
    else
    {
      std::chrono::steady_clock::time_point result = _DefaultRuneLocale.__runetype[v14] & 0x4000;
      --v12;
      ++v13;
      if (!result) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v12 = (uint64_t)v10;
LABEL_19:
  std::string v15 = &v5[-v12];
  if (v11 >= (unint64_t)&v5[-v12]) {
    size_t v16 = v11 - (void)&v5[-v12];
  }
  else {
    size_t v16 = 0;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    a2[1] = v16;
    a2[2] = v18 | 0x8000000000000000;
    *a2 = v19;
    a2 = v19;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v16;
    if (v11 <= (unint64_t)v15) {
      goto LABEL_30;
    }
  }
  std::chrono::steady_clock::time_point result = (unint64_t)memmove(a2, v10, v16);
LABEL_30:
  *((unsigned char *)a2 + v16) = 0;
  return result;
}

uint64_t sub_72C80@<X0>(uint64_t a1@<X8>)
{
  v2[0] = "24.28.43.4";
  v2[1] = 10;
  return sub_726D8(a1, v2);
}

BOOL sub_72CB8(long long *a1)
{
  long long v1 = *a1;
  long long v16 = *a1;
  int v17 = *((_DWORD *)a1 + 4);
  p_p = &__p;
  if (*((char *)a1 + 47) < 0)
  {
    sub_4200(&__p, *((void **)a1 + 3), *((void *)a1 + 4));
    int v3 = DWORD1(v16);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    BOOL v4 = 1;
    uint64_t v13 = 0;
    if (v16) {
      goto LABEL_12;
    }
  }
  else
  {
    long long __p = *(long long *)((char *)a1 + 24);
    uint64_t v19 = *((void *)a1 + 5);
    int v3 = DWORD1(v1);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    BOOL v4 = 1;
    uint64_t v13 = 0;
    if (v1) {
      goto LABEL_12;
    }
  }
  if (!v3 && !*((void *)&v16 + 1) && !v17 && !(v19 >= 0 ? HIBYTE(v19) : *((void *)&__p + 1)))
  {
    unint64_t v7 = (unsigned __int8 *)&v13;
    if (v19 < 0)
    {
      BOOL v4 = memcmp((const void *)__p, &v13, *((size_t *)&__p + 1)) != 0;
    }
    else if (HIBYTE(v19))
    {
      uint64_t v8 = HIBYTE(v19) - 1;
      do
      {
        int v10 = *(unsigned __int8 *)p_p;
        p_p = (long long *)((char *)p_p + 1);
        int v9 = v10;
        int v11 = *v7++;
        BOOL v4 = v9 != v11;
      }
      while (v9 == v11 && v8-- != 0);
    }
    else
    {
      BOOL v4 = 0;
    }
  }
LABEL_12:
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  return v4;
}

BOOL sub_72E08(long long *a1, long long *a2)
{
  long long v18 = *a1;
  unsigned int v19 = *((_DWORD *)a1 + 4);
  if (*((char *)a1 + 47) < 0)
  {
    sub_4200(&v20, *((void **)a1 + 3), *((void *)a1 + 4));
  }
  else
  {
    long long v20 = *(long long *)((char *)a1 + 24);
    uint64_t v21 = *((void *)a1 + 5);
  }
  long long v3 = *a2;
  long long v14 = *a2;
  unsigned int v15 = *((_DWORD *)a2 + 4);
  if (*((char *)a2 + 47) < 0)
  {
    sub_4200(&__p, *((void **)a2 + 3), *((void *)a2 + 4));
    unsigned int v4 = v14;
    unsigned int v5 = v18;
    if (v14 < v18) {
      goto LABEL_12;
    }
  }
  else
  {
    long long __p = *(long long *)((char *)a2 + 24);
    uint64_t v17 = *((void *)a2 + 5);
    unsigned int v4 = v3;
    unsigned int v5 = v18;
    if (v3 < v18)
    {
LABEL_12:
      BOOL v6 = 0;
      if ((SHIBYTE(v17) & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_41:
      operator delete((void *)__p);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        return v6;
      }
      goto LABEL_42;
    }
  }
  if (v5 < v4) {
    goto LABEL_9;
  }
  if (DWORD1(v14) < DWORD1(v18)) {
    goto LABEL_12;
  }
  if (DWORD1(v18) < DWORD1(v14)) {
    goto LABEL_9;
  }
  if (DWORD2(v14) < DWORD2(v18)) {
    goto LABEL_12;
  }
  if (DWORD2(v18) < DWORD2(v14)) {
    goto LABEL_9;
  }
  if (HIDWORD(v14) < HIDWORD(v18)) {
    goto LABEL_12;
  }
  if (HIDWORD(v18) < HIDWORD(v14)) {
    goto LABEL_9;
  }
  if (v15 < v19) {
    goto LABEL_12;
  }
  if (v19 < v15)
  {
LABEL_9:
    BOOL v6 = 1;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
  if (v17 >= 0) {
    size_t v8 = HIBYTE(v17);
  }
  else {
    size_t v8 = *((void *)&__p + 1);
  }
  if (v17 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  if (v21 >= 0) {
    size_t v10 = HIBYTE(v21);
  }
  else {
    size_t v10 = *((void *)&v20 + 1);
  }
  if (v21 >= 0) {
    int v11 = &v20;
  }
  else {
    int v11 = (long long *)v20;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(p_p, v11, v12);
  if (v13) {
    BOOL v6 = v13 >= 0;
  }
  else {
    BOOL v6 = v8 >= v10;
  }
  if (SHIBYTE(v17) < 0) {
    goto LABEL_41;
  }
LABEL_13:
  if ((SHIBYTE(v21) & 0x80000000) == 0) {
    return v6;
  }
LABEL_42:
  operator delete((void *)v20);
  return v6;
}

void sub_72FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_73014(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_72CB8((long long *)a1))
  {
    *(unsigned char *)(a2 + 23) = 15;
    strcpy((char *)a2, "INVALID_VERSION");
    return;
  }
  sub_73298(a1, ".", a1 + 4, ".");
  if (*(_DWORD *)(a1 + 12))
  {
    sub_73494(".");
    unsigned int v4 = v16 >= 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    unsigned int v5 = v16 >= 0 ? (void *)HIBYTE(v16) : __p[1];
    std::string::append((std::string *)a2, v4, (std::string::size_type)v5);
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__p[0]);
      unsigned int v6 = *(_DWORD *)(a1 + 16);
      if (v6) {
        goto LABEL_11;
      }
LABEL_27:
      int v11 = *(char *)(a1 + 47);
      if (v11 < 0)
      {
        if (*(void *)(a1 + 32)) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(a1 + 47))
      {
        goto LABEL_11;
      }
      if ((v11 & 0x80) == 0) {
        goto LABEL_32;
      }
      goto LABEL_20;
    }
  }
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6) {
    goto LABEL_27;
  }
LABEL_11:
  std::to_string(&v14, v6);
  unint64_t v7 = std::string::insert(&v14, 0, "-");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v16 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v10 = HIBYTE(v16);
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      LOBYTE(v11) = *(unsigned char *)(a1 + 47);
      if ((v11 & 0x80) != 0) {
        goto LABEL_20;
      }
LABEL_32:
      if (!(_BYTE)v11) {
        return;
      }
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  LOBYTE(v11) = *(unsigned char *)(a1 + 47);
  if ((v11 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  if (!*(void *)(a1 + 32)) {
    return;
  }
LABEL_33:
  std::operator+<char>();
  if (v16 >= 0) {
    size_t v12 = __p;
  }
  else {
    size_t v12 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v13 = HIBYTE(v16);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)a2, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_7322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_73298(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  sub_E1B4((uint64_t)v10);
  std::ostream::operator<<();
  size_t v6 = strlen(a2);
  sub_188FC78(v11, (uint64_t)a2, v6);
  std::ostream::operator<<();
  size_t v7 = strlen(a4);
  sub_188FC78(v11, (uint64_t)a4, v7);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v10
  v11[0] = v8;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_7346C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_73480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_73494(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_73624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_73638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_7364C(void *a1, uint64_t a2)
{
  sub_73014(a2, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::chrono::steady_clock::time_point result = sub_188FC78(a1, (uint64_t)v3, v4);
  size_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_736D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_736EC(unsigned int a1)
{
  if (a1 >= 0x28) {
    sub_5AE8("array::at");
  }
  return (&off_23FDFB0)[4 * a1];
}

char *sub_73724(unsigned int a1)
{
  if (a1 >= 0x28) {
    sub_5AE8("array::at");
  }
  return (char *)&off_23FDFB0 + 32 * a1 + 20;
}

uint64_t sub_7375C(unsigned int a1, unsigned int a2)
{
  if (a2 >= 3 || a1 >= 0x28 || (uint64_t v2 = LODWORD((&off_23FDFB0)[4 * a1 + 2]), v2 >= 5)) {
    sub_5AE8("array::at");
  }
  return dword_20B91D8[5 * a2 + v2];
}

uint64_t *sub_737BC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  size_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  char v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    int v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      sub_2E00();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_188D718();
      }
      unsigned int v15 = operator new(4 * v14);
    }
    else
    {
      unsigned int v15 = 0;
    }
    int64_t v16 = &v15[4 * v11];
    *int64_t v16 = *a2;
    unsigned __int8 v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      char v7 = &v6[-v19];
      int64_t v16 = (_DWORD *)((char *)v16 - v19);
      long long v20 = &v15[4 * v11 - 16];
      uint64_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *long long v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--int64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[4 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)size_t v6 = *a2;
    unsigned __int8 v8 = v6 + 4;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_73930(void ***a1, _DWORD *a2)
{
  if (!sub_2ABCE4(*a1)) {
    return 1;
  }
  uint64_t v4 = sub_2ABD74(*a1);
  uint64_t v5 = v4[1];
  if (*v4 == v5) {
    return 0;
  }
  uint64_t v6 = *v4 + 24;
  do
  {
    long long v7 = *(_OWORD *)(v6 - 24);
    uint64_t v11 = *(void *)(v6 - 8);
    long long v10 = v7;
    uint64_t result = sub_34554(&v10, a2);
    if (result) {
      break;
    }
    BOOL v9 = v6 == v5;
    v6 += 24;
  }
  while (!v9);
  return result;
}

uint64_t sub_739E8(void ***a1, unsigned int *a2)
{
  if (!sub_2ABCE4(*a1)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  v152 = 0;
  v153 = 0;
  uint64_t v154 = 0;
  v149 = 0;
  v150 = 0;
  uint64_t v151 = 0;
  uint64_t v4 = sub_2ABD74(*a1);
  uint64_t v5 = (_DWORD *)*v4;
  uint64_t v6 = (_DWORD *)v4[1];
  if ((_DWORD *)*v4 != v6)
  {
    do
    {
      LODWORD(v146) = v5[3];
      sub_745A4((uint64_t)&v152, &v146);
      LODWORD(v146) = v5[4];
      sub_745A4((uint64_t)&v149, &v146);
      LODWORD(v146) = *v5;
      sub_745A4((uint64_t)&v152, &v146);
      LODWORD(v146) = v5[1];
      sub_745A4((uint64_t)&v149, &v146);
      v5 += 6;
    }
    while (v5 != v6);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  long long v7 = v153;
  if (v152 != v153)
  {
    unsigned __int8 v8 = (char *)v152 + 4;
    while (v8 != v153)
    {
      int v9 = *((_DWORD *)v8 - 1);
      int v10 = *(_DWORD *)v8;
      v8 += 4;
      if (v9 == v10)
      {
        uint64_t v11 = v8 - 8;
        while (v8 != v7)
        {
          int v12 = v9;
          int v9 = *(_DWORD *)v8;
          if (v12 != *(_DWORD *)v8)
          {
            *((_DWORD *)v11 + 1) = v9;
            v11 += 4;
          }
          v8 += 4;
        }
        unint64_t v14 = v11 + 4;
        int64_t v15 = v7 - (v11 + 4);
        if (v7 != v11 + 4)
        {
          if (v7 != &v14[v15]) {
            memmove(v11 + 4, &v14[v15], 0);
          }
          v153 = v14;
        }
        break;
      }
    }
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  int64_t v16 = v149;
  unint64_t v17 = v150;
  if (v149 != v150)
  {
    uint64_t v18 = (char *)v149 + 4;
    while (v18 != v150)
    {
      int v19 = *((_DWORD *)v18 - 1);
      int v20 = *(_DWORD *)v18;
      v18 += 4;
      if (v19 == v20)
      {
        uint64_t v21 = v18 - 8;
        while (v18 != v17)
        {
          int v22 = v19;
          int v19 = *(_DWORD *)v18;
          if (v22 != *(_DWORD *)v18)
          {
            *((_DWORD *)v21 + 1) = v19;
            v21 += 4;
          }
          v18 += 4;
        }
        long long v23 = v21 + 4;
        int64_t v24 = v17 - (v21 + 4);
        if (v17 != v21 + 4)
        {
          if (v17 != &v23[v24])
          {
            memmove(v21 + 4, &v23[v24], 0);
            int64_t v16 = v149;
          }
          unint64_t v17 = v23;
          v150 = v23;
        }
        break;
      }
    }
  }
  uint64_t v26 = v152;
  uint64_t v25 = v153;
  uint64_t v27 = v17 - v16;
  long long __p = 0;
  uint64_t v144 = 0;
  unint64_t v145 = 0;
  unint64_t v28 = (v27 >> 2) + 1;
  if (v27 >> 2 != -1)
  {
    if (v27 <= -5) {
      sub_2E00();
    }
    unint64_t v29 = ((unint64_t)(v27 >> 2) >> 6) + 1;
    long long __p = operator new(8 * v29);
    uint64_t v144 = 0;
    unint64_t v145 = v29;
    sub_43284(&__p, v28, 0);
  }
  uint64_t v30 = (v25 - v26) >> 2;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  unint64_t v31 = v30 + 1;
  if (v30 != -1)
  {
    if (v31 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    std::string v32 = (char *)operator new(24 * v31);
    v146 = v32;
    v147 = v32;
    std::string v33 = &v32[24 * v31];
    v148 = v33;
    uint64_t v34 = 24 * v30 + 24;
    do
    {
      sub_74F38(v32, (uint64_t)&__p);
      v32 += 24;
      v34 -= 24;
    }
    while (v34);
    v147 = v33;
  }
  if (__p) {
    operator delete(__p);
  }
  unint64_t v35 = (unsigned int **)sub_2ABD74(*a1);
  unint64_t v36 = *v35;
  unint64_t v37 = v35[1];
  int8x8_t v38 = (unsigned int *)v149;
  if (*v35 != v37)
  {
    unint64_t v39 = (unsigned int *)v152;
    uint64_t v40 = v153 - (unsigned char *)v152;
    unint64_t v41 = (unint64_t)(v153 - (unsigned char *)v152) >> 2;
    uint64_t v42 = v150 - (unsigned char *)v149;
    while (1)
    {
      if (v40 >= 4)
      {
        unsigned int v61 = *v36;
        unint64_t v62 = v41;
        uint64_t v63 = v39;
        if (v40 == 4)
        {
          uint64_t v64 = &v39[*v39 < v61];
          unsigned int v65 = v36[3];
          int64_t v66 = v39;
        }
        else
        {
          do
          {
            _X5 = (char *)v63 + (v62 & 0xFFFFFFFFFFFFFFFCLL);
            __asm { PRFM            #0, [X5] }
            long long v69 = &v63[v62 >> 1];
            _X4 = (char *)v69 + (v62 & 0xFFFFFFFFFFFFFFFCLL);
            __asm { PRFM            #0, [X4] }
            if (*v69 >= v61) {
              unint64_t v72 = 0;
            }
            else {
              unint64_t v72 = v62 >> 1;
            }
            v63 += v72;
            v62 -= v62 >> 1;
          }
          while ((uint64_t)v62 > 1);
          uint64_t v64 = &v63[*v63 < v61];
          unsigned int v65 = v36[3];
          unint64_t v82 = v41;
          int64_t v66 = v39;
          do
          {
            _X6 = (char *)v66 + (v82 & 0xFFFFFFFFFFFFFFFCLL);
            __asm { PRFM            #0, [X6] }
            unsigned int v85 = &v66[v82 >> 1];
            _X5 = (char *)v85 + (v82 & 0xFFFFFFFFFFFFFFFCLL);
            __asm { PRFM            #0, [X5] }
            if (*v85 >= v65) {
              unint64_t v88 = 0;
            }
            else {
              unint64_t v88 = v82 >> 1;
            }
            v66 += v88;
            v82 -= v82 >> 1;
          }
          while ((uint64_t)v82 > 1);
        }
        uint64_t v43 = v64 - v39 + 1;
        uint64_t v44 = &v66[*v66 < v65];
        _ZF = v42 == 4;
        if (v42 >= 4)
        {
LABEL_48:
          unsigned int v46 = v36[4];
          unint64_t v47 = (unint64_t)v42 >> 2;
          BOOL v48 = v38;
          if (_ZF)
          {
            uint64_t v49 = &v38[*v38 < v46];
            unsigned int v50 = v36[1];
            unint64_t v51 = v38;
          }
          else
          {
            do
            {
              _X7 = (char *)v48 + (v47 & 0xFFFFFFFFFFFFFFFCLL);
              __asm { PRFM            #0, [X7] }
              BOOL v57 = &v48[v47 >> 1];
              _X6 = (char *)v57 + (v47 & 0xFFFFFFFFFFFFFFFCLL);
              __asm { PRFM            #0, [X6] }
              if (*v57 >= v46) {
                unint64_t v60 = 0;
              }
              else {
                unint64_t v60 = v47 >> 1;
              }
              v48 += v60;
              v47 -= v47 >> 1;
            }
            while ((uint64_t)v47 > 1);
            uint64_t v49 = &v48[*v48 < v46];
            unsigned int v50 = v36[1];
            if (v42 == 4)
            {
              unint64_t v51 = v38;
            }
            else
            {
              unint64_t v73 = (unint64_t)v42 >> 2;
              unint64_t v51 = v38;
              do
              {
                _X20 = (char *)v51 + (v73 & 0xFFFFFFFFFFFFFFFCLL);
                __asm { PRFM            #0, [X20] }
                std::string v76 = &v51[v73 >> 1];
                _X7 = (char *)v76 + (v73 & 0xFFFFFFFFFFFFFFFCLL);
                __asm { PRFM            #0, [X7] }
                if (*v76 >= v50) {
                  unint64_t v79 = 0;
                }
                else {
                  unint64_t v79 = v73 >> 1;
                }
                v51 += v79;
                v73 -= v73 >> 1;
              }
              while ((uint64_t)v73 > 1);
            }
          }
          uint64_t v80 = v49 - v38 + 1;
          unsigned int v81 = &v51[*v51 < v50];
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v43 = 1;
        uint64_t v44 = v39;
        _ZF = v42 == 4;
        if (v42 >= 4) {
          goto LABEL_48;
        }
      }
      uint64_t v80 = 1;
      unsigned int v81 = v38;
LABEL_76:
      uint64_t v89 = v44 - v39;
      uint64_t v90 = v89 + 1;
      if (v43 > v89 + 1) {
        uint64_t v90 = v43;
      }
      if (v43 <= v89)
      {
        uint64_t v91 = v81 - v38;
        uint64_t v92 = v80 <= v91 + 1 ? v91 + 1 : v80;
        if (v80 <= v91)
        {
          unsigned int v93 = v146;
          do
          {
            uint64_t v94 = v93[3 * v43];
            unint64_t v95 = v80;
            do
            {
              *(void *)(v94 + ((v95 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v95;
              ++v95;
            }
            while (v92 != v95);
            ++v43;
          }
          while (v43 != v90);
        }
      }
      v36 += 6;
      if (v36 == v37) {
        goto LABEL_89;
      }
    }
  }
  uint64_t v42 = v150 - (unsigned char *)v149;
LABEL_89:
  uint64_t v96 = v42 >> 2;
  if ((unint64_t)(v42 >> 2) <= 1) {
    uint64_t v96 = 1;
  }
  uint64_t v138 = v96;
  double v97 = INFINITY;
  if ((unint64_t)v42 >= 8)
  {
    unint64_t v108 = 1;
    do
    {
      if (v153 != v152)
      {
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        uint64_t v111 = (v153 - (unsigned char *)v152) >> 2;
        do
        {
          if (((*(void *)(*(void *)((char *)v146 + v109) + 8 * (v108 >> 6)) & (1 << v108)) != 0) != ((*(void *)(*(void *)((char *)v146 + v109 + 24) + 8 * (v108 >> 6)) & (1 << v108)) != 0))
          {
            LODWORD(v112) = *((_DWORD *)v149 + v108 - 1);
            uint64_t v112 = v112 >= 0xFFFFFFFE ? 4294967294 : v112;
            unint64_t v141 = *((unsigned int *)v152 + v110) | (unint64_t)(v112 << 32);
            int v142 = 0x7FFFFFFF;
            LODWORD(v113) = *((_DWORD *)v149 + v108);
            uint64_t v113 = v113 >= 0xFFFFFFFE ? 4294967294 : v113;
            unint64_t v139 = *((unsigned int *)v152 + v110) | (unint64_t)(v113 << 32);
            int v140 = 0x7FFFFFFF;
            long long __p = (void *)-1;
            LODWORD(v144) = 0x7FFFFFFF;
            double v114 = sub_7470C((unsigned int *)&v141, (unsigned int *)&v139, a2, (unsigned int *)&__p);
            if (v114 < v97) {
              double v97 = v114;
            }
          }
          ++v110;
          v109 += 24;
        }
        while (v111 != v110);
      }
      ++v108;
    }
    while (v108 != v138);
  }
  unsigned int v98 = (char *)v152;
  char v99 = v153;
  if ((unint64_t)((v153 - (unsigned char *)v152) >> 2) <= 1) {
    uint64_t v100 = 1;
  }
  else {
    uint64_t v100 = (v153 - (unsigned char *)v152) >> 2;
  }
  if ((unint64_t)(v153 - (unsigned char *)v152) >= 8)
  {
    uint64_t v101 = 1;
    do
    {
      if (v150 != v149)
      {
        unint64_t v102 = 0;
        uint64_t v103 = (v150 - (unsigned char *)v149) >> 2;
        do
        {
          unint64_t v104 = v102 + 1;
          if (((*(void *)(*((void *)v146 + 3 * v101) + ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v102) & 1) != ((*(void *)(*((void *)v146 + 3 * v101) + (((v102 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v102 + 1)) & 1))
          {
            uint64_t v105 = 4 * v102;
            LODWORD(v106) = *(_DWORD *)((char *)v149 + v105);
            uint64_t v106 = v106 >= 0xFFFFFFFE ? 4294967294 : v106;
            unint64_t v141 = *((unsigned int *)v152 + v101 - 1) | (unint64_t)(v106 << 32);
            int v142 = 0x7FFFFFFF;
            LODWORD(v105) = *(_DWORD *)((char *)v149 + v105);
            uint64_t v105 = v105 >= 0xFFFFFFFE ? 4294967294 : v105;
            unint64_t v139 = *((unsigned int *)v152 + v101) | (unint64_t)(v105 << 32);
            int v140 = 0x7FFFFFFF;
            long long __p = (void *)-1;
            LODWORD(v144) = 0x7FFFFFFF;
            double v107 = sub_7470C((unsigned int *)&v141, (unsigned int *)&v139, a2, (unsigned int *)&__p);
            if (v107 < v97) {
              double v97 = v107;
            }
          }
          unint64_t v102 = v104;
        }
        while (v103 != v104);
      }
      ++v101;
    }
    while (v101 != v100);
    unsigned int v98 = (char *)v152;
    char v99 = v153;
  }
  if (v99 != v98)
  {
    unint64_t v115 = (v99 - v98) >> 2;
    char v99 = v98;
    do
    {
      unint64_t v116 = v115 >> 1;
      unsigned int v117 = (unsigned int *)&v99[4 * (v115 >> 1)];
      unsigned int v119 = *v117;
      int v118 = (char *)(v117 + 1);
      v115 += ~(v115 >> 1);
      if (*a2 < v119) {
        unint64_t v115 = v116;
      }
      else {
        char v99 = v118;
      }
    }
    while (v115);
  }
  uint64_t v120 = (v99 - v98) >> 2;
  v121 = v150;
  if (v150 != v149)
  {
    unint64_t v122 = (v150 - (unsigned char *)v149) >> 2;
    v121 = v149;
    do
    {
      unint64_t v123 = v122 >> 1;
      v124 = (unsigned int *)&v121[4 * (v122 >> 1)];
      unsigned int v126 = *v124;
      v125 = v124 + 1;
      v122 += ~(v122 >> 1);
      if (a2[1] < v126) {
        unint64_t v122 = v123;
      }
      else {
        v121 = v125;
      }
    }
    while (v122);
  }
  v127 = (char *)v146;
  double v128 = -v97;
  if (((*(void *)(*((void *)v146 + 3 * v120)
                   + (((unint64_t)((v121 - (unsigned char *)v149) >> 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v121 - (unsigned char *)v149) >> 2)) & 1) == 0)
    double v128 = v97;
  double v129 = v128 * 100.0;
  if (v129 >= 0.0)
  {
    double v130 = v129;
    if (v129 >= 4.50359963e15) {
      goto LABEL_149;
    }
    uint64_t v131 = (uint64_t)(v129 + v129) + 1;
  }
  else
  {
    double v130 = v129;
    if (v129 <= -4.50359963e15) {
      goto LABEL_149;
    }
    uint64_t v131 = (uint64_t)(v129 + v129);
    if (v131 >= 1) {
      --v131;
    }
  }
  double v130 = (double)(v131 >> 1);
LABEL_149:
  if (v130 < 9.22337204e18)
  {
    if (v129 >= 0.0)
    {
      if (v129 >= 4.50359963e15) {
        goto LABEL_160;
      }
      uint64_t v132 = (uint64_t)(v129 + v129) + 1;
    }
    else
    {
      if (v129 <= -4.50359963e15) {
        goto LABEL_160;
      }
      uint64_t v132 = (uint64_t)(v129 + v129);
      if (v132 >= 1) {
        --v132;
      }
    }
    double v129 = (double)(v132 >> 1);
LABEL_160:
    uint64_t v13 = (uint64_t)v129;
    v133 = v147;
    v134 = v146;
    if (v147 == v146) {
      goto LABEL_166;
    }
    do
    {
LABEL_163:
      v136 = (void *)*((void *)v133 - 3);
      v133 -= 24;
      v135 = v136;
      if (v136) {
        operator delete(v135);
      }
    }
    while (v133 != v127);
    v134 = v146;
    goto LABEL_166;
  }
  uint64_t v13 = 0x7FFFFFFFFFFFFFFELL;
  v133 = v147;
  v134 = v146;
  if (v147 != v146) {
    goto LABEL_163;
  }
LABEL_166:
  v147 = v127;
  operator delete(v134);
  if (v149)
  {
    v150 = (char *)v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = (char *)v152;
    operator delete(v152);
  }
  return v13;
}

void sub_743D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_7448C(&a17);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
    int64_t v24 = a23;
    if (a23)
    {
LABEL_6:
      a24 = (uint64_t)v24;
      operator delete(v24);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64_t v24 = a23;
    if (a23) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

void **sub_7448C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v3 - 3);
        v3 -= 24;
        uint64_t v5 = v6;
        if (v6) {
          operator delete(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_744F8(void ***a1, unsigned int *a2)
{
  if (sub_2ABCE4(*a1))
  {
    uint64_t v4 = (unsigned int **)sub_2ABD74(*a1);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    unsigned __int8 v7 = 1;
    if (*v4 == v6) {
      return v7;
    }
    while (!sub_345AC(v5, a2))
    {
      if (sub_34658(v5, a2)) {
        unsigned __int8 v7 = 2;
      }
      v5 += 6;
      if (v5 == v6) {
        return v7;
      }
    }
  }
  return 0;
}

_DWORD *sub_745A4(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned __int8 v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_188D718();
      }
      unint64_t v14 = operator new(4 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    int64_t v15 = &v14[4 * v10];
    _DWORD *v15 = *a2;
    unsigned __int8 v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      int64_t v15 = (_DWORD *)((char *)v15 - v18);
      int v19 = &v14[4 * v10 - 16];
      int v20 = v5 - 16;
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--int64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[4 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = *a2;
    unsigned __int8 v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

long double sub_7470C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v8 = *a1;
  if (*a1 != *a3 || (double v9 = 0.0, a1[1] != a3[1]))
  {
    unsigned int v11 = *a2;
    unsigned int v10 = a2[1];
    double v9 = 0.0;
    if (*a2 != *a3 || v10 != a3[1])
    {
      double v13 = (double)v10;
      unsigned int v14 = v11 - v8;
      unsigned int v15 = a1[1];
      double v16 = vabdd_f64((double)v10, (double)v15);
      if (v11 - v8 <= 1 && v16 < 2.0) {
        goto LABEL_9;
      }
      double v34 = (double)v14;
      v84[0] = a1;
      v84[1] = a2;
      v84[2] = a3;
      v84[3] = a4;
      if (v16 + (double)v14 > 429496730.0) {
        goto LABEL_12;
      }
      double __y = v13 - (double)v15;
      if (v11 != v8 || (double i = 0.0, v15 != v10))
      {
        if (v11 - v8 >= v8 - v11) {
          double v37 = -(double)(v8 - v11);
        }
        else {
          double v37 = (double)v14;
        }
        for (double i = (atan2(__y, v37) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
          ;
        for (; i < -180.0; double i = i + 360.0)
          ;
      }
      for (double j = i + -90.0; j >= 180.0; double j = j + -360.0)
        ;
      for (; j < -180.0; double j = j + 360.0)
        ;
      for (double k = i + 90.0; k >= 180.0; double k = k + -360.0)
        ;
      for (; k < -180.0; double k = k + 360.0)
        ;
      sub_35A38(a1, a3);
      double v41 = v40;
      sub_35A38(a2, a3);
      if (j >= k)
      {
        if (j <= v41) {
          goto LABEL_58;
        }
        if (k < v41 && j > v13 && k < v13) {
          goto LABEL_9;
        }
        if (k >= v41)
        {
LABEL_58:
          if (j <= v13 || k >= v13) {
            goto LABEL_78;
          }
        }
        else if (j <= v13 || k >= v13)
        {
          goto LABEL_12;
        }
      }
      else
      {
        if (j > v41 || k < v41)
        {
          if (j > v13 || k < v13)
          {
LABEL_9:
            uint64_t v17 = *(void *)a1;
            a4[2] = a1[2];
            *(void *)a4 = v17;
            LODWORD(v13) = a3[1];
            long double v18 = exp(3.14159265 - (double)*(unint64_t *)&v13 * 6.28318531 / 4294967300.0);
            long double v19 = atan((v18 - 1.0 / v18) * 0.5) * 57.2957795 * 0.0174532925;
            unint64_t v20 = *(void *)a3;
            unsigned int __ya = *(void *)a3;
            LODWORD(v20) = a1[1];
            long double v21 = exp(3.14159265 - (double)v20 * 6.28318531 / 4294967300.0);
            long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
            v23.i64[0] = __ya;
            v23.i64[1] = *a1;
            int64x2_t v24 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
            double __yb = vsubq_f64((float64x2_t)v24, (float64x2_t)vdupq_laneq_s64(v24, 1)).f64[0];
            long double v25 = sin((v19 - v22) * 0.5);
            long double v26 = v25 * v25;
            double v27 = cos(v19);
            long double v28 = v27 * cos(v22);
            long double v29 = sin(0.5 * __yb);
            double v30 = v26 + v28 * (v29 * v29);
            double v31 = sqrt(v30);
            double v32 = 1.0 - v30;
LABEL_10:
            long double v33 = atan2(v31, sqrt(v32));
            return (v33 + v33) * 6372797.56;
          }
          if (j > v41) {
            goto LABEL_12;
          }
        }
        if (k >= v41 && j <= v13 && k >= v13)
        {
LABEL_78:
          uint64_t v62 = *(void *)a2;
          a4[2] = a2[2];
          *(void *)a4 = v62;
          sub_33150((uint64_t)a3, a2, v13);
          return v35;
        }
        if (k < v41 && j <= v13 && k >= v13)
        {
LABEL_12:
          sub_74E54((uint64_t)v84);
          return v35;
        }
      }
      unsigned int v47 = a1[1];
      unsigned int v48 = a2[1];
      unsigned int v49 = v48 - v47;
      BOOL v50 = v47 >= v48;
      unsigned int v51 = v47 - v48;
      if (!v50) {
        unsigned int v51 = v49;
      }
      double v52 = sqrt((double)(*a2 - *a1) * (double)(*a2 - *a1) + (double)v51 * (double)v51) * 0.00932288077;
      double v53 = 1.0 / v52;
      if (1.0 / v52 >= 1.0)
      {
LABEL_92:
        LODWORD(v52) = a3[1];
        long double v66 = exp(3.14159265 - (double)*(unint64_t *)&v52 * 6.28318531 / 4294967300.0);
        long double v67 = atan((v66 - 1.0 / v66) * 0.5) * 57.2957795 * 0.0174532925;
        unint64_t v68 = *(void *)a3;
        unsigned int __yc = *(void *)a3;
        LODWORD(v68) = a4[1];
        long double v69 = exp(3.14159265 - (double)v68 * 6.28318531 / 4294967300.0);
        long double v70 = atan((v69 - 1.0 / v69) * 0.5) * 57.2957795 * 0.0174532925;
        v71.i64[0] = __yc;
        v71.i64[1] = *a4;
        int64x2_t v72 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v71), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
        double __yd = vsubq_f64((float64x2_t)v72, (float64x2_t)vdupq_laneq_s64(v72, 1)).f64[0];
        long double v73 = sin((v67 - v70) * 0.5);
        long double v74 = v73 * v73;
        double v75 = cos(v67);
        long double v76 = v75 * cos(v70);
        long double v77 = sin(0.5 * __yd);
        double v78 = v74 + v76 * (v77 * v77);
        double v31 = sqrt(v78);
        double v32 = 1.0 - v78;
        goto LABEL_10;
      }
      double v9 = 0.0;
      double v54 = 0.0;
      double v55 = 1.0;
      while (1)
      {
        double v56 = (v55 + v54) * 0.5;
        *(double *)&unint64_t v57 = v56 * v34;
        uint64_t v58 = *a1 + (v56 * v34);
        LODWORD(v57) = a1[1];
        LODWORD(v59) = (__y * v56 + (double)v57);
        if (v59 >= 0xFFFFFFFE) {
          uint64_t v59 = 4294967294;
        }
        else {
          uint64_t v59 = v59;
        }
        *(void *)a4 = v58 | (v59 << 32);
        a4[2] = 0x7FFFFFFF;
        if (v58 == *a3 && v59 == a3[1]) {
          return v9;
        }
        sub_35A38(a4, a3);
        if (j >= k) {
          break;
        }
        if (j <= v61) {
          goto LABEL_76;
        }
LABEL_63:
        double v55 = (v55 + v54) * 0.5;
        double v56 = v54;
LABEL_64:
        double v52 = v55 - v56;
        double v54 = v56;
        if (v55 - v56 <= v53) {
          goto LABEL_92;
        }
      }
      if (j <= v61) {
        goto LABEL_64;
      }
LABEL_76:
      if (k >= v61) {
        goto LABEL_64;
      }
      goto LABEL_63;
    }
  }
  return v9;
}

void sub_74E54(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *v2 + ((*(_DWORD *)v4 - *v2) >> 1);
  LODWORD(v4) = (*(_DWORD *)(v4 + 4) >> 1)
              + (v2[1] >> 1)
              + (v2[1] & *(_DWORD *)(v4 + 4) & 1);
  if (v4 >= 0xFFFFFFFE) {
    uint64_t v4 = 4294967294;
  }
  else {
    uint64_t v4 = v4;
  }
  uint64_t v14 = v3 | (v4 << 32);
  int v15 = 0x7FFFFFFF;
  uint64_t v12 = -1;
  int v13 = 0x7FFFFFFF;
  double v5 = ((double (*)(void))sub_7470C)();
  uint64_t v10 = -1;
  int v11 = 0x7FFFFFFF;
  double v6 = sub_7470C(&v14, *(void *)(a1 + 8), *(void *)(a1 + 16), &v10);
  if (v5 >= v6) {
    unsigned __int8 v7 = &v10;
  }
  else {
    unsigned __int8 v7 = &v12;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = *((_DWORD *)v7 + 2);
  *(void *)uint64_t v8 = *v7;
  *(_DWORD *)(v8 + 8) = v9;
}

void *sub_74F38(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0) {
      sub_2E00();
    }
    unint64_t v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    double v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    unsigned __int8 v7 = *(void **)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    a1[1] = v8;
    unint64_t v9 = (v8 - 1) >> 6;
    if (v8 < 0x41) {
      unint64_t v9 = 0;
    }
    v6[v9] = 0;
    int v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = &v7[v8 >> 6];
      do
      {
        uint64_t v15 = 1 << v11;
        if ((*v7 >> v13)) {
          uint64_t v16 = *v6 | v15;
        }
        else {
          uint64_t v16 = *v6 & ~v15;
        }
        *double v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63) {
          int v13 = 0;
        }
        v6 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
        int v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

std::string *sub_75044(std::string *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = this;
    unsigned int v51 = this + 7;
    double v52 = this + 6;
    BOOL v50 = this + 1;
    unsigned int v48 = this + 5;
    unsigned int v49 = this + 4;
    unsigned int v46 = this + 3;
    unsigned int v47 = this + 2;
    uint64_t v44 = this + 13;
    size_t v45 = this + 12;
    uint64_t v42 = this + 11;
    uint64_t v43 = this + 10;
    double v40 = this + 9;
    double v41 = this + 8;
    do
    {
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
      {
        switch(*(unsigned char *)(v2 + 23))
        {
          case 6:
            if (*(_DWORD *)v2 != 1768777063 || *(_WORD *)(v2 + 4) != 26990) {
              goto LABEL_111;
            }
            goto LABEL_20;
          case 7:
            if (*(_DWORD *)v2 != 2003135585 || *(_DWORD *)(v2 + 3) != 1701210487) {
              goto LABEL_111;
            }
            goto LABEL_66;
          case 0xD:
            if (*(void *)v2 != 0x682D736568637261 || *(void *)(v2 + 5) != 0x6E6F726461682D73) {
              goto LABEL_111;
            }
            goto LABEL_72;
          case 0x11:
            if (*(void *)v2 != 0x682D736568637261
              || *(void *)(v2 + 8) != 0x6F702D6E6F726461
              || *(unsigned char *)(v2 + 16) != 105)
            {
              goto LABEL_111;
            }
            goto LABEL_81;
          case 0x13:
            if (*(void *)v2 != 0x742D736568637261
              || *(void *)(v2 + 8) != 0x642D636966666172
              || *(void *)(v2 + 11) != 0x617461642D636966)
            {
              goto LABEL_111;
            }
            goto LABEL_90;
          case 0x14:
            if (*(void *)v2 != 0x632D736568637261
              || *(void *)(v2 + 8) != 0x65766F632D6C6C65
              || *(_DWORD *)(v2 + 16) != 1701273970)
            {
              goto LABEL_111;
            }
            goto LABEL_99;
          case 0x19:
            uint64_t v19 = v2;
            goto LABEL_101;
          default:
            goto LABEL_111;
        }
      }
      switch(*(void *)(v2 + 8))
      {
        case 6:
          if (**(_DWORD **)v2 != 1768777063 || *(_WORD *)(*(void *)v2 + 4) != 26990) {
            goto LABEL_111;
          }
LABEL_20:
          std::string::operator=(v52, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v51;
          goto LABEL_4;
        case 7:
          if (**(_DWORD **)v2 != 2003135585 || *(_DWORD *)(*(void *)v2 + 3) != 1701210487) {
            goto LABEL_111;
          }
LABEL_66:
          std::string::operator=(v4, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v50;
          goto LABEL_4;
        case 0xDLL:
          if (**(void **)v2 != 0x682D736568637261 || *(void *)(*(void *)v2 + 5) != 0x6E6F726461682D73) {
            goto LABEL_111;
          }
LABEL_72:
          std::string::operator=(v41, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v40;
          goto LABEL_4;
        case 0x11:
          if (**(void **)v2 != 0x682D736568637261
            || *(void *)(*(void *)v2 + 8) != 0x6F702D6E6F726461
            || *(unsigned char *)(*(void *)v2 + 16) != 105)
          {
            goto LABEL_111;
          }
LABEL_81:
          std::string::operator=(v43, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v42;
          goto LABEL_4;
        case 0x13:
          if (**(void **)v2 != 0x742D736568637261
            || *(void *)(*(void *)v2 + 8) != 0x642D636966666172
            || *(void *)(*(void *)v2 + 11) != 0x617461642D636966)
          {
            goto LABEL_111;
          }
LABEL_90:
          std::string::operator=(v47, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v46;
          goto LABEL_4;
        case 0x14:
          if (**(void **)v2 != 0x632D736568637261
            || *(void *)(*(void *)v2 + 8) != 0x65766F632D6C6C65
            || *(_DWORD *)(*(void *)v2 + 16) != 1701273970)
          {
            goto LABEL_111;
          }
LABEL_99:
          std::string::operator=(v45, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v44;
          goto LABEL_4;
        case 0x19:
          uint64_t v19 = *(void *)v2;
LABEL_101:
          uint64_t v28 = *(void *)v19;
          uint64_t v29 = *(void *)(v19 + 8);
          uint64_t v30 = *(void *)(v19 + 16);
          int v31 = *(unsigned __int8 *)(v19 + 24);
          if (v28 != 0x722D736568637261 || v29 != 0x702D676E6974756FLL || v30 != 0x656E696C65626F72 || v31 != 115) {
            goto LABEL_111;
          }
          std::string::operator=(v49, (const std::string *)v2);
          unsigned __int8 v7 = (const std::string *)(v2 + 24);
          unint64_t v8 = v48;
LABEL_4:
          this = std::string::operator=(v8, v7);
          break;
        default:
LABEL_111:
          this = (std::string *)sub_723EC(1u);
          if (this)
          {
            sub_6BAC((uint64_t)v55);
            double v35 = sub_188FC78(v55, (uint64_t)"Encountered unknown data source of type ", 40);
            int v36 = *(char *)(v2 + 23);
            if (v36 >= 0) {
              uint64_t v37 = v2;
            }
            else {
              uint64_t v37 = *(void *)v2;
            }
            if (v36 >= 0) {
              uint64_t v38 = *(unsigned __int8 *)(v2 + 23);
            }
            else {
              uint64_t v38 = *(void *)(v2 + 8);
            }
            unint64_t v39 = sub_188FC78(v35, v37, v38);
            sub_188FC78(v39, (uint64_t)"; ignoring data source", 22);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (v54 < 0) {
              operator delete(__p);
            }
            v55[0] = v5;
            *(void *)((char *)v55 + *(void *)(v5 - 24)) = v6;
            if (v56 < 0) {
              operator delete((void *)v55[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            this = (std::string *)std::ios::~ios();
          }
          break;
      }
      v2 += 48;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_75688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void (__cdecl **a29)(std::stringbuf *__hidden this),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  a28 = v43;
  *(uint64_t *)((char *)&a28 + *(void *)(v43 - 24)) = v42;
  if (a42 < 0) {
    operator delete(a37);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

char *sub_75828@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[455] < 0) {
    return (char *)sub_4200((unsigned char *)a2, *((void **)result + 54), *((void *)result + 55));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 27);
  *(void *)(a2 + 16) = *((void *)result + 56);
  return result;
}

std::string *sub_75854(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 18, a2);
}

char *sub_7585C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[383] < 0) {
    return (char *)sub_4200((unsigned char *)a2, *((void **)result + 45), *((void *)result + 46));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 360);
  *(void *)(a2 + 16) = *((void *)result + 47);
  return result;
}

std::string *sub_75888(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 15, a2);
}

uint64_t sub_75890(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_75914()
{
  byte_2550A5F = 15;
  strcpy((char *)&qword_2550A48, "build-info.json");
}

uint64_t sub_75944(int a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*a2) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(v37, "Compatibility check requires valid config and fb providers");
    int v36 = (void *)sub_2F404((uint64_t)exception, (long long *)v37);
  }
  sub_291634(&v54, a3);
  sub_72C80((uint64_t)&v51);
  sub_291CC0(&v54, &v48);
  if (a1) {
    sub_292004(&v54, &v45);
  }
  else {
    sub_2921A8(&v54, &v45);
  }
  uint64_t v8 = *a2;
  v37[23] = 19;
  strcpy(v37, "common/Version.json");
  memset(__p, 0, 24);
  unint64_t v9 = sub_81C38(v8, (uint64_t)v37, (uint64_t *)__p);
  int v10 = (void **)__p[0];
  if (__p[0])
  {
    int v11 = (void **)__p[1];
    int v12 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      int v12 = __p[0];
    }
    __p[1] = v10;
    operator delete(v12);
  }
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
  if (a1) {
    int v13 = "offline";
  }
  else {
    int v13 = "online";
  }
  if (a1) {
    size_t v14 = 7;
  }
  else {
    size_t v14 = 6;
  }
  v37[23] = v14;
  memcpy(v37, v13, v14);
  *(unsigned char *)((unint64_t)v37 | v14) = 0;
  uint64_t v15 = (void *)sub_560F4(v9, (uint64_t)v37);
  double v40 = operator new(0x20uLL);
  long long v41 = xmmword_20B5EB0;
  strcpy((char *)v40, "min_supported_data_version");
  uint64_t v16 = sub_561B0(v15, (uint64_t)&v40);
  int v17 = *(char *)(v16 + 23);
  BOOL v18 = v17 < 0;
  uint64_t v19 = *(void *)v16;
  if (v17 >= 0) {
    uint64_t v19 = v16;
  }
  uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  if (v18) {
    uint64_t v20 = *(void *)(v16 + 8);
  }
  v42[0] = v19;
  v42[1] = v20;
  sub_72C7C((uint64_t)__p, v42);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if ((v37[23] & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_33:
    operator delete(*(void **)v37);
    if (!a4) {
      goto LABEL_60;
    }
    goto LABEL_34;
  }
  operator delete(v40);
  if ((v37[23] & 0x80000000) != 0) {
    goto LABEL_33;
  }
LABEL_30:
  if (!a4) {
    goto LABEL_60;
  }
LABEL_34:
  if (!sub_72CB8(&v48) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v37);
    sub_188FC78(v37, (uint64_t)"Unable to determine routing data version; skipping data compatibility check", 75);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 1u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (!sub_72CB8((long long *)__p) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v37);
    sub_188FC78(v37, (uint64_t)"Unable to determine minimum supported routing data version; skipping data compatibility check",
      93);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 1u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (!sub_72CB8(&v51) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v37);
    sub_188FC78(v37, (uint64_t)"Unable to determine routing service version; skipping service compatibility check", 81);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 1u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (!sub_72CB8(&v45) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v37);
    sub_188FC78(v37, (uint64_t)"Unable to determine minimum supported routing service version; skipping service compatibility check",
      99);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 1u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    sub_111ECAC((uint64_t)v37);
  }
LABEL_60:
  BOOL v21 = !sub_72CB8(&v48) || !sub_72CB8((long long *)__p) || sub_72E08((long long *)__p, &v48);
  if (sub_72CB8(&v51) && sub_72CB8(&v45))
  {
    BOOL v22 = sub_72E08(&v45, &v51);
    int v23 = a4 ^ 1;
    if ((a4 ^ 1 | v21)) {
      goto LABEL_75;
    }
  }
  else
  {
    BOOL v22 = 1;
    int v23 = a4 ^ 1;
    if ((a4 ^ 1 | v21)) {
      goto LABEL_75;
    }
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v37);
    int64x2_t v24 = sub_188FC78(v37, (uint64_t)"Routing service ", 16);
    long double v25 = sub_7364C(v24, (uint64_t)&v51);
    long double v26 = sub_188FC78(v25, (uint64_t)" requires at least routing data version ", 40);
    double v27 = sub_7364C(v26, (uint64_t)__p);
    uint64_t v28 = sub_188FC78(v27, (uint64_t)", but the routing data has version ", 35);
    sub_7364C(v28, (uint64_t)&v48);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 3u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_75:
  if (((v23 | v22) & 1) == 0 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v37);
    uint64_t v29 = sub_188FC78(v37, (uint64_t)"Routing data ", 13);
    uint64_t v30 = sub_7364C(v29, (uint64_t)&v48);
    int v31 = sub_188FC78(v30, (uint64_t)" requires at least routing service version ", 43);
    double v32 = sub_7364C(v31, (uint64_t)&v45);
    long double v33 = sub_188FC78(v32, (uint64_t)", but the routing service has version ", 38);
    sub_7364C(v33, (uint64_t)&v51);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v40, 3u);
    if (SHIBYTE(v41) < 0) {
      operator delete(v40);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v44 < 0)
  {
    operator delete(__p[3]);
    if ((v47 & 0x80000000) == 0)
    {
LABEL_84:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete(v49);
      if ((v53 & 0x80000000) == 0) {
        return v21 & v22;
      }
LABEL_90:
      operator delete(v52);
      return v21 & v22;
    }
  }
  else if ((v47 & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v46);
  if (v50 < 0) {
    goto LABEL_89;
  }
LABEL_85:
  if (v53 < 0) {
    goto LABEL_90;
  }
  return v21 & v22;
}

void sub_7637C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a9);
  if (a62 < 0) {
    operator delete(a57);
  }
  if (*(char *)(v62 - 169) < 0)
  {
    operator delete(*(void **)(v62 - 192));
    if ((*(char *)(v62 - 121) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v62 - 121) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v62 - 73) & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(*(void **)(v62 - 96));
    goto LABEL_12;
  }
  operator delete(*(void **)(v62 - 144));
  if ((*(char *)(v62 - 73) & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_764F0(uint64_t *a1, uint64_t *a2, int a3)
{
  return sub_75944(1, a1, a2, a3);
}

__n128 sub_76504(uint64_t a1, long long *a2, __n128 *a3)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *a3;
  *(void *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

BOOL sub_76538(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23)) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
LABEL_3:
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)(a1 + 32) != 0;
  }
  else {
    return *(unsigned char *)(a1 + 47) != 0;
  }
}

uint64_t sub_76580(unsigned __int8 *a1)
{
  unint64_t v1 = a1[23];
  unint64_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) != 0)
  {
    a1 = *(unsigned __int8 **)a1;
    unint64_t v1 = v2;
  }
  if (v1 >= 0x1F) {
    uint64_t v3 = 31;
  }
  else {
    uint64_t v3 = v1;
  }
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = *a1;
      uint64_t v5 = 1;
    }
    else
    {
      if (v3 != 2)
      {
        sub_76DEC(a1, v3, (uint64_t)&v7);
        return sub_1133038((uint64_t)&v7, 0);
      }
      uint64_t v4 = *(unsigned __int16 *)a1;
      uint64_t v5 = 2;
    }
    *(void *)&long long v7 = v4;
    *((void *)&v7 + 1) = v5;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
  }
  return sub_1133038((uint64_t)&v7, 0);
}

BOOL sub_76648(unsigned __int8 *a1)
{
  uint64_t v25 = sub_1133328();
  unint64_t v2 = (_DWORD *)sub_40EFE8((uint64_t)&v25);
  int v3 = HIBYTE(*v2);
  size_t v4 = (3 - v3);
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    size_t v23 = v4;
    int64_t v24 = v7 | 0x8000000000000000;
    long long __p = p_p;
    goto LABEL_7;
  }
  HIBYTE(v24) = 3 - v3;
  p_p = &__p;
  if (v3 != 3) {
LABEL_7:
  }
    memcpy(p_p, v2, v4);
  BOOL v8 = 0;
  *((unsigned char *)p_p + v4) = 0;
  uint64_t v9 = a1[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[23];
  }
  else {
    uint64_t v10 = *((void *)a1 + 1);
  }
  size_t v11 = HIBYTE(v24);
  int v12 = SHIBYTE(v24);
  if (v24 < 0) {
    size_t v11 = v23;
  }
  if (v10 == v11)
  {
    if (v24 >= 0) {
      int v13 = (unsigned __int8 *)&__p;
    }
    else {
      int v13 = (unsigned __int8 *)__p;
    }
    if ((v9 & 0x80) != 0)
    {
      BOOL v8 = memcmp(*(const void **)a1, v13, *((void *)a1 + 1)) == 0;
    }
    else
    {
      if (!a1[23])
      {
        BOOL v8 = 1;
        if ((SHIBYTE(v24) & 0x80000000) == 0) {
          return v8;
        }
        goto LABEL_28;
      }
      uint64_t v14 = v9 - 1;
      do
      {
        int v16 = *a1++;
        int v15 = v16;
        int v18 = *v13++;
        int v17 = v18;
        BOOL v20 = v14-- != 0;
        BOOL v8 = v15 == v17;
      }
      while (v15 == v17 && v20);
    }
  }
  if (v12 < 0) {
LABEL_28:
  }
    operator delete(__p);
  return v8;
}

void sub_767A8(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1)
  {
    unint64_t v2 = a1;
    sub_76C8C(a2, *a1);
    uint64_t v5 = v2 + 1;
    uint64_t v4 = *v2;
    if (v4)
    {
      unsigned int v49 = &v5[v4];
      do
      {
        uint64_t v6 = *v5;
        uint64_t v7 = (int *)((char *)v5 + v6);
        BOOL v8 = (unsigned __int16 *)((char *)v5 + v6 - *(int *)((char *)v5 + v6));
        unsigned int v9 = *v8;
        if (v9 < 5) {
          goto LABEL_4;
        }
        if (!v8[2]) {
          goto LABEL_4;
        }
        uint64_t v10 = (unsigned int *)((char *)v7 + v8[2] + *(unsigned int *)((char *)v7 + v8[2]));
        size_t v11 = *v10;
        if (!v11) {
          goto LABEL_4;
        }
        if (v9 >= 9)
        {
          uint64_t v12 = v8[4];
          if (v12)
          {
            if (*(int *)((char *)v7 + v12 + *(unsigned int *)((char *)v7 + v12)))
            {
              if (v11 >= 0x17)
              {
                uint64_t v33 = (v11 & 0xFFFFFFF8) + 8;
                if ((v11 | 7) != 0x17) {
                  uint64_t v33 = v11 | 7;
                }
                uint64_t v34 = v33 + 1;
                p_dst = (long long *)operator new(v33 + 1);
                *((void *)&__dst + 1) = v11;
                unint64_t v54 = v34 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
              }
              else
              {
                HIBYTE(v54) = *v10;
                p_dst = &__dst;
              }
              memcpy(p_dst, v10 + 1, v11);
              *((unsigned char *)p_dst + v11) = 0;
              uint64_t v35 = *(unsigned __int16 *)((char *)v7 - *v7 + 8);
              uint64_t v36 = *(unsigned int *)((char *)v7 + v35);
              uint64_t v37 = *(unsigned int *)((char *)v7 + v35 + v36);
              if (v37)
              {
                uint64_t v38 = 0;
                uint64_t v39 = 4 * v37;
                double v40 = (char *)v2 + v35 + v6 + v36;
                while (1)
                {
                  long long v41 = &v40[v38 + *(unsigned int *)&v40[v38 + 8]];
                  size_t v42 = *((unsigned int *)v41 + 2);
                  if (v42 >= 0x17)
                  {
                    uint64_t v47 = (v42 & 0xFFFFFFF8) + 8;
                    if ((v42 | 7) != 0x17) {
                      uint64_t v47 = v42 | 7;
                    }
                    uint64_t v48 = v47 + 1;
                    uint64_t v43 = operator new(v47 + 1);
                    __p[1] = (void *)v42;
                    unint64_t v51 = v48 | 0x8000000000000000;
                    __p[0] = v43;
                  }
                  else
                  {
                    HIBYTE(v51) = *((_DWORD *)v41 + 2);
                    uint64_t v43 = __p;
                    if (!v42)
                    {
                      *((unsigned char *)__p + v42) = 0;
                      unint64_t v44 = *(void *)(a2 + 8);
                      if (v44 < *(void *)(a2 + 16)) {
                        goto LABEL_43;
                      }
                      goto LABEL_49;
                    }
                  }
                  memcpy(v43, v41 + 12, v42);
                  *((unsigned char *)v43 + v42) = 0;
                  unint64_t v44 = *(void *)(a2 + 8);
                  if (v44 < *(void *)(a2 + 16))
                  {
LABEL_43:
                    long long v45 = *(_OWORD *)__p;
                    *(void *)(v44 + 16) = v51;
                    *(_OWORD *)unint64_t v44 = v45;
                    __p[1] = 0;
                    unint64_t v51 = 0;
                    __p[0] = 0;
                    unsigned int v46 = (unsigned char *)(v44 + 24);
                    if (SHIBYTE(v54) < 0)
                    {
                      sub_4200(v46, (void *)__dst, *((unint64_t *)&__dst + 1));
                    }
                    else
                    {
                      *(_OWORD *)unsigned int v46 = __dst;
                      *(void *)(v44 + 40) = v54;
                    }
                    *(void *)(a2 + 8) = v44 + 48;
                    *(void *)(a2 + 8) = v44 + 48;
                    if ((SHIBYTE(v51) & 0x80000000) == 0) {
                      goto LABEL_39;
                    }
LABEL_53:
                    operator delete(__p[0]);
                    goto LABEL_39;
                  }
LABEL_49:
                  *(void *)(a2 + 8) = sub_7B120((void **)a2, (uint64_t)__p, (uint64_t)&__dst);
                  if (SHIBYTE(v51) < 0) {
                    goto LABEL_53;
                  }
LABEL_39:
                  v38 += 4;
                  if (v39 == v38) {
                    goto LABEL_54;
                  }
                }
              }
              goto LABEL_54;
            }
          }
        }
        uint64_t v52 = sub_1133328();
        uint64_t v14 = (_DWORD *)sub_40EFE8((uint64_t)&v52);
        int v15 = HIBYTE(*v14);
        size_t v16 = (3 - v15);
        if (v16 >= 0x17)
        {
          uint64_t v19 = (v16 & 0xFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17) {
            uint64_t v19 = v16 | 7;
          }
          uint64_t v20 = v19 + 1;
          int v17 = (long long *)operator new(v19 + 1);
          *((void *)&__dst + 1) = v16;
          unint64_t v54 = v20 | 0x8000000000000000;
          *(void *)&long long __dst = v17;
        }
        else
        {
          HIBYTE(v54) = 3 - v15;
          int v17 = &__dst;
          if (v15 == 3)
          {
            *((unsigned char *)&__dst + v16) = 0;
            int v18 = (unsigned __int16 *)((char *)v7 - *v7);
            if (*v18 < 5u) {
              goto LABEL_25;
            }
            goto LABEL_21;
          }
        }
        memcpy(v17, v14, v16);
        *((unsigned char *)v17 + v16) = 0;
        int v18 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v18 < 5u) {
          goto LABEL_25;
        }
LABEL_21:
        uint64_t v21 = v18[2];
        if (!v21)
        {
LABEL_25:
          HIBYTE(v51) = 0;
          LOBYTE(__p[0]) = 0;
          unint64_t v27 = *(void *)(a2 + 8);
          if (v27 >= *(void *)(a2 + 16)) {
            goto LABEL_32;
          }
          goto LABEL_26;
        }
        BOOL v22 = (unsigned int *)((char *)v7 + v21);
        uint64_t v23 = *v22;
        uint64_t v25 = (char *)v22 + v23 + 4;
        size_t v24 = *(unsigned int *)((char *)v22 + v23);
        if (v24 >= 0x17)
        {
          uint64_t v29 = (v24 & 0xFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17) {
            uint64_t v29 = v24 | 7;
          }
          uint64_t v30 = v29 + 1;
          long double v26 = operator new(v29 + 1);
          __p[1] = (void *)v24;
          unint64_t v51 = v30 | 0x8000000000000000;
          __p[0] = v26;
LABEL_30:
          memcpy(v26, v25, v24);
          goto LABEL_31;
        }
        HIBYTE(v51) = *(unsigned int *)((char *)v22 + v23);
        long double v26 = __p;
        if (v24) {
          goto LABEL_30;
        }
LABEL_31:
        *((unsigned char *)v26 + v24) = 0;
        unint64_t v27 = *(void *)(a2 + 8);
        if (v27 >= *(void *)(a2 + 16))
        {
LABEL_32:
          int v31 = sub_7AF5C((void **)a2, (uint64_t)&__dst, (uint64_t)__p);
          int v32 = SHIBYTE(v51);
          *(void *)(a2 + 8) = v31;
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_54;
        }
LABEL_26:
        long long v28 = __dst;
        *(void *)(v27 + 16) = v54;
        *(_OWORD *)unint64_t v27 = v28;
        unint64_t v54 = 0;
        long long __dst = 0uLL;
        *(_OWORD *)(v27 + 24) = *(_OWORD *)__p;
        *(void *)(v27 + 40) = v51;
        *(void *)(a2 + 8) = v27 + 48;
LABEL_54:
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)__dst);
        }
LABEL_4:
        ++v5;
        ++v2;
      }
      while (v5 != v49);
    }
  }
}

void sub_76BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1A6DC(v22);
  _Unwind_Resume(a1);
}

void sub_76C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    JUMPOUT(0x76C74);
  }
  JUMPOUT(0x76C44);
}

void sub_76C8C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x555555555555556) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 48 * a2;
  uint64_t v6 = (char *)operator new(48 * a2);
  uint64_t v7 = &v6[v5];
  BOOL v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  unsigned int v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 3);
    *((void *)v9 - 4) = *(v4 - 4);
    *((_OWORD *)v9 - 3) = v10;
    *(v4 - 5) = 0;
    *(v4 - 4) = 0;
    *(v4 - 6) = 0;
    long long v11 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - 24) = v11;
    v9 -= 48;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 6;
  }
  while (v4 != v2);
  uint64_t v12 = *(void ***)a1;
  unint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    while (1)
    {
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*(v2 - 3));
        if (*((char *)v2 - 25) < 0) {
LABEL_13:
        }
          operator delete(*(v2 - 6));
      }
      else if (*((char *)v2 - 25) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 6;
      if (v2 == v12)
      {
        unint64_t v2 = v12;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_16:

  operator delete(v2);
}

unsigned __int8 *sub_76DEC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 3:
      *(void *)a3 = *(unsigned __int16 *)a1 | ((unint64_t)a1[2] << 16);
      *(void *)(a3 + 8) = 3;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      break;
    case 4:
      *(void *)a3 = *(unsigned int *)a1;
      *(void *)(a3 + 8) = 4;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      break;
    case 5:
      *(void *)a3 = *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8);
      *(void *)(a3 + 8) = 5;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      break;
    case 6:
      *(void *)a3 = *(unsigned __int16 *)a1 | ((unint64_t)*(unsigned int *)(a1 + 2) << 16);
      *(void *)(a3 + 8) = 6;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      break;
    case 7:
      *(void *)a3 = *(unsigned __int16 *)a1 | ((unint64_t)a1[2] << 16) | ((unint64_t)*(unsigned int *)(a1 + 3) << 24);
      *(void *)(a3 + 8) = 7;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      break;
    default:
      return (unsigned __int8 *)sub_76EB8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_76EB8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 != 8) {
    return sub_76F9C(a1, a2, a3);
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EDLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EDLL) >> 2)
      - 0x61C8864680B583EDLL) ^ (v3 - 0x61C8864680B583EDLL);
  uint64_t v6 = a1[2];
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EDLL) ^ v5;
  uint64_t v8 = a1[3];
  unint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EDLL) ^ v7;
  uint64_t v10 = a1[4];
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EDLL) ^ v9;
  uint64_t v12 = a1[5];
  unint64_t v13 = (v12 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EDLL) ^ v11;
  uint64_t v14 = a1[6];
  unint64_t v15 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EDLL) ^ v13;
  uint64_t result = a1[7];
  *(void *)a3 = (result + (v15 << 6) + (v15 >> 2) - 0x61C8864680B583EDLL) ^ v15;
  *(void *)(a3 + 8) = 8;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 16) = v3;
  *(unsigned char *)(a3 + 17) = v4;
  *(unsigned char *)(a3 + 18) = v6;
  *(unsigned char *)(a3 + 19) = v8;
  *(unsigned char *)(a3 + 20) = v10;
  *(unsigned char *)(a3 + 21) = v12;
  *(unsigned char *)(a3 + 22) = v14;
  *(unsigned char *)(a3 + 23) = result;
  return result;
}

uint64_t sub_76F9C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 9:
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      unint64_t v6 = (v5
          + ((v4 - 0x61C8864680B583EDLL) << 6)
          + ((unint64_t)(v4 - 0x61C8864680B583EDLL) >> 2)
          - 0x61C8864680B583EDLL) ^ (v4 - 0x61C8864680B583EDLL);
      uint64_t v7 = a1[2];
      unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EDLL) ^ v6;
      uint64_t v9 = a1[3];
      unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EDLL) ^ v8;
      uint64_t v11 = a1[4];
      unint64_t v12 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EDLL) ^ v10;
      uint64_t v13 = a1[5];
      unint64_t v14 = (v13 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EDLL) ^ v12;
      uint64_t result = a1[6];
      unint64_t v16 = (result + (v14 << 6) + (v14 >> 2) - 0x61C8864680B583EDLL) ^ v14;
      uint64_t v17 = a1[7];
      uint64_t v18 = a1[8];
      unint64_t v19 = (v17 + (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EDLL) ^ v16;
      *(void *)a3 = (v18 + (v19 << 6) + (v19 >> 2) - 0x61C8864680B583EDLL) ^ v19;
      *(void *)(a3 + 8) = 9;
      *(unsigned char *)(a3 + 16) = v4;
      *(unsigned char *)(a3 + 17) = v5;
      *(unsigned char *)(a3 + 18) = v7;
      *(unsigned char *)(a3 + 19) = v9;
      *(unsigned char *)(a3 + 20) = v11;
      *(unsigned char *)(a3 + 21) = v13;
      *(unsigned char *)(a3 + 22) = result;
      *(unsigned char *)(a3 + 23) = v17;
      *(unsigned char *)(a3 + 24) = v18;
      *(void *)(a3 + 33) = 0;
      *(void *)(a3 + 25) = 0;
      *(void *)(a3 + 40) = 0;
      break;
    case 10:
      return sub_77120(a3, a1);
    case 11:
      return sub_77350(a3, a1);
    default:
      return sub_77278(a1, a2, a3);
  }
  return result;
}

uint64_t sub_77120(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  *(void *)uint64_t result = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  *(void *)(result + 8) = 10;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(void *)(result + 34) = 0;
  *(void *)(result + 26) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_77278@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 12:
      return sub_774C8(a3, a1);
    case 13:
      return sub_77660(a3, a1);
    case 14:
      return sub_77818(a3, a1);
    case 15:
      return sub_77AC8(a3, a1);
  }
  return sub_779F0(a1, a2, a3);
}

uint64_t sub_77350(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  *(void *)uint64_t result = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  *(void *)(result + 8) = 11;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(void *)(result + 35) = 0;
  *(void *)(result + 27) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_774C8(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  *(void *)uint64_t result = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  *(void *)(result + 8) = 12;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(void *)(result + 36) = 0;
  *(void *)(result + 28) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_77660(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  *(void *)uint64_t result = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  *(void *)(result + 8) = 13;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(void *)(result + 37) = 0;
  *(void *)(result + 29) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_77818(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  *(void *)uint64_t result = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  *(void *)(result + 8) = 14;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(void *)(result + 38) = 0;
  *(void *)(result + 30) = 0;
  *(_WORD *)(result + 46) = 0;
  return result;
}

uint64_t sub_779F0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 16:
      return sub_77CC0(a3, a1);
    case 17:
      return sub_77ED0(a3, a1);
    case 18:
      return sub_78104(a3, a1);
    case 19:
      return sub_78430(a3, a1);
  }
  return sub_78358(a1, a2, a3);
}

uint64_t sub_77AC8(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  *(void *)uint64_t result = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  *(void *)(result + 8) = 15;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(void *)(result + 39) = 0;
  *(void *)(result + 31) = 0;
  *(unsigned char *)(result + 47) = 0;
  return result;
}

uint64_t sub_77CC0(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  *(void *)uint64_t result = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  *(void *)(result + 8) = 16;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_77ED0(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  *(void *)uint64_t result = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  *(void *)(result + 8) = 17;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(void *)(result + 33) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_78104(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  *(void *)uint64_t result = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  *(void *)(result + 8) = 18;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(void *)(result + 34) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_78358@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 20:
      return sub_786A4(a3, a1);
    case 21:
      return sub_78938(a3, a1);
    case 22:
      return sub_78BEC(a3, a1);
    case 23:
      return sub_78F98(a3, a1);
  }
  return sub_78EC0(a1, a2, a3);
}

uint64_t sub_78430(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  *(void *)uint64_t result = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  *(void *)(result + 8) = 19;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(void *)(result + 35) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_786A4(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  *(void *)uint64_t result = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  *(void *)(result + 8) = 20;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(void *)(result + 36) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_78938(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  *(void *)uint64_t result = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  *(void *)(result + 8) = 21;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(void *)(result + 37) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_78BEC(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  *(void *)uint64_t result = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  *(void *)(result + 8) = 22;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(void *)(result + 38) = 0;
  *(_WORD *)(result + 46) = 0;
  return result;
}

uint64_t sub_78EC0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 24:
      return sub_7928C(a3, a1);
    case 25:
      return sub_7959C(a3, a1);
    case 26:
      return sub_798D0(a3, a1);
    case 27:
      return sub_79CE4(a3, a1);
  }
  return sub_79C24(a1, a2, a3);
}

uint64_t sub_78F98(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  *(void *)uint64_t result = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  *(void *)(result + 8) = 23;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(_WORD *)(result + 38) = a2[22];
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_7928C(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  *(void *)uint64_t result = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  *(void *)(result + 8) = 24;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_7959C(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  *(void *)uint64_t result = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  *(void *)(result + 8) = 25;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(_DWORD *)(result + 41) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_798D0(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  *(void *)uint64_t result = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  *(void *)(result + 8) = 26;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(_DWORD *)(result + 42) = 0;
  *(_WORD *)(result + 46) = 0;
  return result;
}

uint64_t sub_79C24@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 28:
      return sub_7A058(a3, a1);
    case 29:
      return sub_7A3E8(a3, a1);
    case 30:
      return sub_7A79C(a3, a1);
  }
  return sub_7AB6C(a3, a1);
}

uint64_t sub_79CE4(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  unint64_t v26 = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  *(void *)uint64_t result = ((v26 << 6) + (v26 >> 2) + a2[26] - 0x61C8864680B583EDLL) ^ v26;
  *(void *)(result + 8) = 27;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(_WORD *)(result + 42) = a2[26];
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_7A058(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  unint64_t v26 = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  unint64_t v27 = ((v26 << 6) + (v26 >> 2) + a2[26] - 0x61C8864680B583EDLL) ^ v26;
  *(void *)uint64_t result = ((v27 << 6) + (v27 >> 2) + a2[27] - 0x61C8864680B583EDLL) ^ v27;
  *(void *)(result + 8) = 28;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(unsigned char *)(result + 42) = a2[26];
  *(unsigned char *)(result + 43) = a2[27];
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_7A3E8(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  unint64_t v26 = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  unint64_t v27 = ((v26 << 6) + (v26 >> 2) + a2[26] - 0x61C8864680B583EDLL) ^ v26;
  unint64_t v28 = ((v27 << 6) + (v27 >> 2) + a2[27] - 0x61C8864680B583EDLL) ^ v27;
  *(void *)uint64_t result = ((v28 << 6) + (v28 >> 2) + a2[28] - 0x61C8864680B583EDLL) ^ v28;
  *(void *)(result + 8) = 29;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(unsigned char *)(result + 42) = a2[26];
  *(unsigned char *)(result + 43) = a2[27];
  *(_WORD *)(result + 44) = a2[28];
  *(_WORD *)(result + 46) = 0;
  return result;
}

uint64_t sub_7A79C(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  unint64_t v26 = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  unint64_t v27 = ((v26 << 6) + (v26 >> 2) + a2[26] - 0x61C8864680B583EDLL) ^ v26;
  unint64_t v28 = ((v27 << 6) + (v27 >> 2) + a2[27] - 0x61C8864680B583EDLL) ^ v27;
  unint64_t v29 = ((v28 << 6) + (v28 >> 2) + a2[28] - 0x61C8864680B583EDLL) ^ v28;
  *(void *)uint64_t result = ((v29 << 6) + (v29 >> 2) + a2[29] - 0x61C8864680B583EDLL) ^ v29;
  *(void *)(result + 8) = 30;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(unsigned char *)(result + 42) = a2[26];
  *(unsigned char *)(result + 43) = a2[27];
  *(unsigned char *)(result + 44) = a2[28];
  *(unsigned char *)(result + 45) = a2[29];
  *(_WORD *)(result + 46) = 0;
  return result;
}

uint64_t sub_7AB6C(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = (((*a2 - 0x61C8864680B583EDLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EDLL) >> 2)
      + a2[1]
      - 0x61C8864680B583EDLL) ^ (*a2 - 0x61C8864680B583EDLL);
  unint64_t v3 = ((v2 << 6) + (v2 >> 2) + a2[2] - 0x61C8864680B583EDLL) ^ v2;
  unint64_t v4 = ((v3 << 6) + (v3 >> 2) + a2[3] - 0x61C8864680B583EDLL) ^ v3;
  unint64_t v5 = ((v4 << 6) + (v4 >> 2) + a2[4] - 0x61C8864680B583EDLL) ^ v4;
  unint64_t v6 = ((v5 << 6) + (v5 >> 2) + a2[5] - 0x61C8864680B583EDLL) ^ v5;
  unint64_t v7 = ((v6 << 6) + (v6 >> 2) + a2[6] - 0x61C8864680B583EDLL) ^ v6;
  unint64_t v8 = ((v7 << 6) + (v7 >> 2) + a2[7] - 0x61C8864680B583EDLL) ^ v7;
  unint64_t v9 = ((v8 << 6) + (v8 >> 2) + a2[8] - 0x61C8864680B583EDLL) ^ v8;
  unint64_t v10 = ((v9 << 6) + (v9 >> 2) + a2[9] - 0x61C8864680B583EDLL) ^ v9;
  unint64_t v11 = ((v10 << 6) + (v10 >> 2) + a2[10] - 0x61C8864680B583EDLL) ^ v10;
  unint64_t v12 = ((v11 << 6) + (v11 >> 2) + a2[11] - 0x61C8864680B583EDLL) ^ v11;
  unint64_t v13 = ((v12 << 6) + (v12 >> 2) + a2[12] - 0x61C8864680B583EDLL) ^ v12;
  unint64_t v14 = ((v13 << 6) + (v13 >> 2) + a2[13] - 0x61C8864680B583EDLL) ^ v13;
  unint64_t v15 = ((v14 << 6) + (v14 >> 2) + a2[14] - 0x61C8864680B583EDLL) ^ v14;
  unint64_t v16 = ((v15 << 6) + (v15 >> 2) + a2[15] - 0x61C8864680B583EDLL) ^ v15;
  unint64_t v17 = ((v16 << 6) + (v16 >> 2) + a2[16] - 0x61C8864680B583EDLL) ^ v16;
  unint64_t v18 = ((v17 << 6) + (v17 >> 2) + a2[17] - 0x61C8864680B583EDLL) ^ v17;
  unint64_t v19 = ((v18 << 6) + (v18 >> 2) + a2[18] - 0x61C8864680B583EDLL) ^ v18;
  unint64_t v20 = ((v19 << 6) + (v19 >> 2) + a2[19] - 0x61C8864680B583EDLL) ^ v19;
  unint64_t v21 = ((v20 << 6) + (v20 >> 2) + a2[20] - 0x61C8864680B583EDLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + (v21 >> 2) + a2[21] - 0x61C8864680B583EDLL) ^ v21;
  unint64_t v23 = ((v22 << 6) + (v22 >> 2) + a2[22] - 0x61C8864680B583EDLL) ^ v22;
  unint64_t v24 = ((v23 << 6) + (v23 >> 2) + a2[23] - 0x61C8864680B583EDLL) ^ v23;
  unint64_t v25 = ((v24 << 6) + (v24 >> 2) + a2[24] - 0x61C8864680B583EDLL) ^ v24;
  unint64_t v26 = ((v25 << 6) + (v25 >> 2) + a2[25] - 0x61C8864680B583EDLL) ^ v25;
  unint64_t v27 = ((v26 << 6) + (v26 >> 2) + a2[26] - 0x61C8864680B583EDLL) ^ v26;
  unint64_t v28 = ((v27 << 6) + (v27 >> 2) + a2[27] - 0x61C8864680B583EDLL) ^ v27;
  unint64_t v29 = ((v28 << 6) + (v28 >> 2) + a2[28] - 0x61C8864680B583EDLL) ^ v28;
  unint64_t v30 = ((v29 << 6) + (v29 >> 2) + a2[29] - 0x61C8864680B583EDLL) ^ v29;
  *(void *)uint64_t result = ((v30 << 6) + (v30 >> 2) + a2[30] - 0x61C8864680B583EDLL) ^ v30;
  *(void *)(result + 8) = 31;
  *(unsigned char *)(result + 16) = *a2;
  *(unsigned char *)(result + 17) = a2[1];
  *(unsigned char *)(result + 18) = a2[2];
  *(unsigned char *)(result + 19) = a2[3];
  *(unsigned char *)(result + 20) = a2[4];
  *(unsigned char *)(result + 21) = a2[5];
  *(unsigned char *)(result + 22) = a2[6];
  *(unsigned char *)(result + 23) = a2[7];
  *(unsigned char *)(result + 24) = a2[8];
  *(unsigned char *)(result + 25) = a2[9];
  *(unsigned char *)(result + 26) = a2[10];
  *(unsigned char *)(result + 27) = a2[11];
  *(unsigned char *)(result + 28) = a2[12];
  *(unsigned char *)(result + 29) = a2[13];
  *(unsigned char *)(result + 30) = a2[14];
  *(unsigned char *)(result + 31) = a2[15];
  *(unsigned char *)(result + 32) = a2[16];
  *(unsigned char *)(result + 33) = a2[17];
  *(unsigned char *)(result + 34) = a2[18];
  *(unsigned char *)(result + 35) = a2[19];
  *(unsigned char *)(result + 36) = a2[20];
  *(unsigned char *)(result + 37) = a2[21];
  *(unsigned char *)(result + 38) = a2[22];
  *(unsigned char *)(result + 39) = a2[23];
  *(unsigned char *)(result + 40) = a2[24];
  *(unsigned char *)(result + 41) = a2[25];
  *(unsigned char *)(result + 42) = a2[26];
  *(unsigned char *)(result + 43) = a2[27];
  *(unsigned char *)(result + 44) = a2[28];
  *(unsigned char *)(result + 45) = a2[29];
  *(_WORD *)(result + 46) = a2[30];
  return result;
}

char *sub_7AF5C(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[48 * v4];
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  unint64_t v11 = &v9[48 * v8];
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((void *)v10 + 5) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unint64_t v12 = v10 + 48;
  unint64_t v13 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_23;
  }
  do
  {
    long long v15 = *((_OWORD *)v14 - 3);
    *((void *)v10 - 4) = *((void *)v14 - 4);
    *((_OWORD *)v10 - 3) = v15;
    *((void *)v14 - 5) = 0;
    *((void *)v14 - 4) = 0;
    *((void *)v14 - 6) = 0;
    long long v16 = *(_OWORD *)(v14 - 24);
    *((void *)v10 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v10 - 24) = v16;
    v10 -= 48;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 48;
  }
  while (v14 != v13);
  unint64_t v17 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v17)
  {
    while (1)
    {
      if (*(v14 - 1) < 0)
      {
        operator delete(*((void **)v14 - 3));
        if (*(v14 - 25) < 0) {
LABEL_20:
        }
          operator delete(*((void **)v14 - 6));
      }
      else if (*(v14 - 25) < 0)
      {
        goto LABEL_20;
      }
      v14 -= 48;
      if (v14 == v17)
      {
        unint64_t v14 = v17;
        break;
      }
    }
  }
  if (v14) {
LABEL_23:
  }
    operator delete(v14);
  return v12;
}

char *sub_7B120(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[48 * v4];
  unint64_t v19 = &v9[48 * v8];
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v11 = v10 + 24;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v11, *(void **)a3, *(void *)(a3 + 8));
    unint64_t v12 = v10 + 48;
    unint64_t v13 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    if (v14 == *a1)
    {
LABEL_18:
      *a1 = v10;
      a1[1] = v12;
      a1[2] = v19;
      goto LABEL_26;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)a3;
    *((void *)v10 + 5) = *(void *)(a3 + 16);
    unint64_t v12 = v10 + 48;
    unint64_t v13 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    if (v14 == *a1) {
      goto LABEL_18;
    }
  }
  do
  {
    long long v15 = *((_OWORD *)v14 - 3);
    *((void *)v10 - 4) = *((void *)v14 - 4);
    *((_OWORD *)v10 - 3) = v15;
    *((void *)v14 - 5) = 0;
    *((void *)v14 - 4) = 0;
    *((void *)v14 - 6) = 0;
    long long v16 = *(_OWORD *)(v14 - 24);
    *((void *)v10 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v10 - 24) = v16;
    v10 -= 48;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 48;
  }
  while (v14 != v13);
  unint64_t v17 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v19;
  if (v14 == v17) {
    goto LABEL_26;
  }
  do
  {
    if (*(v14 - 1) < 0)
    {
      operator delete(*((void **)v14 - 3));
      if ((*(v14 - 25) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((*(v14 - 25) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*((void **)v14 - 6));
LABEL_19:
    v14 -= 48;
  }
  while (v14 != v17);
  unint64_t v14 = v17;
LABEL_26:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_7B334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7B358(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7B3F4(a1, (uint64_t)&__p);
  sub_33C90(a2, (unsigned int ***)&__p);
  unint64_t v3 = (char *)__p;
  if (__p)
  {
    unint64_t v4 = v10;
    unint64_t v5 = __p;
    if (v10 != __p)
    {
      unint64_t v6 = v10;
      do
      {
        unint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        unint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = __p;
    }
    unint64_t v10 = v3;
    operator delete(v5);
  }
}

void sub_7B3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_7B3F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if ((int)v4 < 1)
  {
    if ((~*(_DWORD *)(a1 + 16) & 0xF) != 0)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      double v16 = *(double *)(a1 + 56);
      uint64_t v17 = -1;
      if (v16 <= 180.0)
      {
        double v18 = *(double *)(a1 + 64);
        if (v18 >= -85.0511288 && v18 <= 85.0511288 && v16 >= -180.0)
        {
          double v19 = fmax(v18, -85.0511288);
          double v20 = v19 * 3.14159265 / 180.0;
          BOOL v21 = v19 < 85.0511288;
          double v22 = 1.48442223;
          if (v21) {
            double v22 = v20;
          }
          long double v23 = sin(v22);
          LODWORD(v24) = ((log((v23 + 1.0) / (1.0 - v23)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v24 >= 0xFFFFFFFE) {
            uint64_t v24 = 4294967294;
          }
          else {
            uint64_t v24 = v24;
          }
          uint64_t v17 = ((v16 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v24 << 32);
        }
      }
      uint64_t v35 = v17;
      int v36 = 0x7FFFFFFF;
      double v25 = *(double *)(a1 + 72);
      uint64_t v26 = -1;
      if (v25 <= 180.0)
      {
        double v27 = *(double *)(a1 + 48);
        if (v27 >= -85.0511288 && v27 <= 85.0511288 && v25 >= -180.0)
        {
          double v28 = fmax(v27, -85.0511288);
          double v29 = v28 * 3.14159265 / 180.0;
          BOOL v21 = v28 < 85.0511288;
          double v30 = 1.48442223;
          if (v21) {
            double v30 = v29;
          }
          long double v31 = sin(v30);
          LODWORD(v32) = ((log((v31 + 1.0) / (1.0 - v31)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v32 >= 0xFFFFFFFE) {
            uint64_t v32 = 4294967294;
          }
          else {
            uint64_t v32 = v32;
          }
          uint64_t v26 = ((v25 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v32 << 32);
        }
      }
      uint64_t v33 = v26;
      int v34 = 0x7FFFFFFF;
      sub_3392C((uint64_t)&__p, (unsigned int *)&v35, (unsigned int *)&v33);
      sub_35F78((uint64_t *)&__p, (char ***)a2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    unint64_t v6 = (char *)operator new(12 * v4);
    long long __p = v6;
    uint64_t v38 = v6;
    uint64_t v39 = &v6[12 * v4];
    if (v5) {
      uint64_t v7 = v5 + 8;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = 8 * v4;
    do
    {
      double v9 = *(double *)(*(void *)v7 + 56);
      uint64_t v10 = -1;
      if (v9 <= 180.0)
      {
        double v11 = *(double *)(*(void *)v7 + 48);
        if (v11 >= -85.0511288 && v11 <= 85.0511288 && v9 >= -180.0)
        {
          double v12 = fmax(v11, -85.0511288);
          if (v12 >= 85.0511288) {
            double v13 = 1.48442223;
          }
          else {
            double v13 = v12 * 3.14159265 / 180.0;
          }
          long double v14 = sin(v13);
          LODWORD(v15) = ((log((v14 + 1.0) / (1.0 - v14)) / -12.5663706 + 0.5) * 4294967300.0);
          if (v15 >= 0xFFFFFFFE) {
            uint64_t v15 = 4294967294;
          }
          else {
            uint64_t v15 = v15;
          }
          uint64_t v10 = ((v9 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v15 << 32);
        }
      }
      uint64_t v35 = v10;
      int v36 = 0x7FFFFFFF;
      unint64_t v6 = sub_32ACC((char **)&__p, (uint64_t)v6, (uint64_t)&v35) + 12;
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
    sub_46968((void *)a2, (uint64_t)&__p, 1uLL);
    if (__p)
    {
      uint64_t v38 = __p;
      operator delete(__p);
    }
  }
}

void sub_7B864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7B894(int a1)
{
  if ((a1 - 1) > 2) {
    return 0;
  }
  else {
    return dword_20B9228[(char)(a1 - 1)];
  }
}

uint64_t sub_7B8BC@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 7;
      strcpy(a2, "Driving");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "Transit");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "Walking");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Cycling");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "Ferry");
      break;
    case 5:
      a2[23] = 9;
      strcpy(a2, "Undefined");
      break;
    default:
      a2[23] = 0;
      *a2 = 0;
      break;
  }
  return result;
}

void *sub_7B9F0(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 7;
      char v8 = 7;
      LODWORD(__p[0]) = 1986622020;
      unsigned __int16 v3 = 26998;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 7;
      char v8 = 7;
      LODWORD(__p[0]) = 1851880020;
      int v4 = 1953067886;
      goto LABEL_8;
    case 2:
      uint64_t v2 = 7;
      char v8 = 7;
      LODWORD(__p[0]) = 1802264919;
      unsigned __int16 v3 = 26987;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 7;
      char v8 = 7;
      LODWORD(__p[0]) = 1818458435;
      unsigned __int16 v3 = 26988;
LABEL_7:
      int v4 = v3 | 0x676E0000;
LABEL_8:
      *(_DWORD *)((char *)__p + 3) = v4;
      HIBYTE(__p[0]) = 0;
      break;
    case 4:
      uint64_t v2 = 5;
      char v8 = 5;
      strcpy((char *)__p, "Ferry");
      break;
    case 5:
      uint64_t v2 = 9;
      char v8 = 9;
      strcpy((char *)__p, "Undefined");
      break;
    default:
      uint64_t v2 = 0;
      char v8 = 0;
      LOBYTE(__p[0]) = 0;
      break;
  }
  uint64_t result = sub_188FC78(a1, (uint64_t)__p, v2);
  unint64_t v6 = result;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_7BB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7BB78(unsigned int a1)
{
  if (a1 < 7) {
    return (0x5040503020100uLL >> (8 * a1));
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown transport type encountered: ", 36);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 5;
}

void sub_7BD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_7BD6C(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_7BDB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_20A64BC(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_7BDD4(uint64_t *result)
{
  uint64_t v1 = result[1];
  result[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  uint64_t v3 = *result;
  void *result = 0;
  if (v3)
  {
    int v4 = *(void **)v3;
    if (*(void *)v3)
    {
      *(void *)(v3 + 8) = v4;
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_7BE60(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (*v1 == v1[1]) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_7BE74(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16);
}

void sub_7BE84(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(unsigned int *)(*a1 + 24) + a2;
  if ((v3 & 7) != 0) {
    unint64_t v4 = (v3 >> 3) + 1;
  }
  else {
    unint64_t v4 = v3 >> 3;
  }
  unint64_t v6 = *(char **)v2;
  char v5 = *(char **)(v2 + 8);
  unint64_t v7 = (unint64_t)&v5[-*(void *)v2];
  if (v7 >= v4) {
    return;
  }
  unint64_t v9 = a2 >> 3;
  if ((a2 & 7) != 0) {
    ++v9;
  }
  unint64_t v10 = 2 * (v9 + v7);
  size_t v11 = v10 - v7;
  if (v10 <= v7)
  {
    if (v10 < v7) {
      *(void *)(v2 + 8) = &v6[v10];
    }
    goto LABEL_38;
  }
  uint64_t v12 = *(void *)(v2 + 16);
  if (v12 - (uint64_t)v5 < v11)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    unint64_t v13 = v12 - (void)v6;
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v10) {
      uint64_t v14 = v10;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v14;
    }
    double v16 = (char *)operator new(v15);
    uint64_t v17 = &v16[v7];
    double v18 = &v16[v15];
    double v19 = &v16[v10];
    bzero(&v16[v7], v11);
    if (v5 == v6) {
      goto LABEL_36;
    }
    if (v7 >= 8 && (unint64_t)(v6 - v16) >= 0x20)
    {
      if (v7 < 0x20)
      {
        unint64_t v20 = 0;
        goto LABEL_28;
      }
      unint64_t v20 = v7 & 0xFFFFFFFFFFFFFFE0;
      BOOL v21 = v5 - 16;
      double v22 = &v16[v5 - 16 - v6];
      unint64_t v23 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v24 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)double v22 = v24;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v7 == v20) {
        goto LABEL_35;
      }
      if ((v7 & 0x18) != 0)
      {
LABEL_28:
        v17 -= v7 & 0xFFFFFFFFFFFFFFF8;
        double v25 = &v5[-v20 - 8];
        uint64_t v26 = (char *)(v25 - v6);
        unint64_t v27 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v28 = *(void *)v25;
          v25 -= 8;
          *(void *)&v26[(void)v16] = v28;
          v26 -= 8;
          v27 += 8;
        }
        while (v27);
        v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      v17 -= v20;
      v5 -= v20;
    }
LABEL_33:
    double v29 = v17 - 1;
    do
    {
      char v30 = *--v5;
      *v29-- = v30;
    }
    while (v5 != v6);
LABEL_35:
    char v5 = v6;
    uint64_t v17 = v16;
LABEL_36:
    *(void *)uint64_t v2 = v17;
    *(void *)(v2 + 8) = v19;
    *(void *)(v2 + 16) = v18;
    if (v5) {
      operator delete(v5);
    }
    goto LABEL_38;
  }
  bzero(*(void **)(v2 + 8), v10 - v7);
  *(void *)(v2 + 8) = &v5[v11];
LABEL_38:
  long double v31 = (void *)(v7 + *(void *)*a1);
  size_t v32 = *(void *)(*a1 + 8) - (void)v31;

  bzero(v31, v32);
}

void sub_7C0B4(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    char v3 = a3;
    uint64_t v6 = a3;
    sub_7BE84(a1, a3);
    uint64_t v7 = 0;
    char v8 = (void *)*a1;
    unsigned int v9 = *(_DWORD *)(*a1 + 24);
    do
    {
      *(unsigned char *)(*v8 + ((unint64_t)v9 >> 3)) |= (((unint64_t)(a2 << -v3) >> (v7 + 63)) & 1) << (~(_BYTE)v9 & 7);
      char v8 = (void *)*a1;
      unsigned int v9 = *(_DWORD *)(*a1 + 24) + 1;
      *(_DWORD *)(*a1 + 24) = v9;
      --v7;
    }
    while (-v6 != v7);
  }
}

void sub_7C15C(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    char v3 = a3;
    uint64_t v5 = a3;
    uint64_t v6 = -1;
    if (a3 < 0x40) {
      uint64_t v6 = ~(-1 << a3);
    }
    uint64_t v7 = v6 & a2;
    sub_7BE84(a1, a3);
    uint64_t v8 = 0;
    unsigned int v9 = (void *)*a1;
    unsigned int v10 = *(_DWORD *)(*a1 + 24);
    do
    {
      *(unsigned char *)(*v9 + ((unint64_t)v10 >> 3)) |= (((unint64_t)(v7 << -v3) >> (v8 + 63)) & 1) << (~(_BYTE)v10 & 7);
      unsigned int v9 = (void *)*a1;
      unsigned int v10 = *(_DWORD *)(*a1 + 24) + 1;
      *(_DWORD *)(*a1 + 24) = v10;
      --v8;
    }
    while (-v5 != v8);
  }
}

void sub_7C214()
{
}

char *sub_7C2A4(uint64_t *a1)
{
  if ((*(_DWORD *)(*a1 + 24) & 7) != 0) {
    unint64_t v2 = 8 - (*(_DWORD *)(*a1 + 24) & 7u);
  }
  else {
    unint64_t v2 = 0;
  }
  sub_7BE84(a1, v2);
  uint64_t v3 = *a1;
  unsigned int v4 = *(_DWORD *)(*a1 + 24) + v2;
  *(_DWORD *)(v3 + 24) = v4;
  uint64_t result = sub_7C374(a1[2], *(char **)(a1[2] + 8), *(char **)v3, (char *)(*(void *)v3 + (v4 >> 3)), v4 >> 3);
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    uint64_t v7 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v7;
      operator delete(v7);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_7C35C(unint64_t a1)
{
  unsigned int v1 = 64 - __clz(a1);
  if (a1) {
    return v1;
  }
  else {
    return 1;
  }
}

char *sub_7C374(uint64_t a1, char *__dst, char *__src, char *a4, unint64_t a5)
{
  uint64_t v5 = __dst;
  if ((uint64_t)a5 < 1) {
    return v5;
  }
  unsigned int v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      double v16 = operator new(v15);
      uint64_t v17 = &v13[(void)v16];
      double v18 = &v13[(void)v16 + a5];
      double v19 = &v13[(void)v16];
      unint64_t v20 = __src;
      if (a5 < 8) {
        goto LABEL_43;
      }
    }
    else
    {
      double v16 = 0;
      uint64_t v17 = (char *)(__dst - v11);
      double v18 = &v13[a5];
      double v19 = (char *)(__dst - v11);
      unint64_t v20 = __src;
      if (a5 < 8) {
        goto LABEL_43;
      }
    }
    double v19 = v17;
    unint64_t v20 = __src;
    if ((segment_command_64 *)(&v5[(void)v16] - &__src[(void)v11]) >= &stru_20)
    {
      if (a5 >= 0x20)
      {
        uint64_t v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        int v36 = (long long *)(__src + 16);
        uint64_t v37 = (char *)v16 + (void)v13 + 16;
        unint64_t v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *uint64_t v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_44:
          long long v45 = *(char **)a1;
          if (*(char **)a1 == v5)
          {
            uint64_t v48 = v17;
            double v55 = (char *)v16 + v15;
            size_t v56 = v10 - v5;
            if (v10 == v5) {
              goto LABEL_53;
            }
          }
          else
          {
            int64_t v46 = v5 - v45;
            uint64_t v47 = v5;
            uint64_t v48 = v17;
            if ((unint64_t)(v5 - v45) < 0x20) {
              goto LABEL_62;
            }
            uint64_t v47 = v5;
            uint64_t v48 = v17;
            if ((unint64_t)(v11 - (unsigned char *)v16) < 0x20) {
              goto LABEL_62;
            }
            uint64_t v47 = &v5[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            uint64_t v48 = &v17[-(v46 & 0xFFFFFFFFFFFFFFE0)];
            unsigned int v49 = v5 - 16;
            char v50 = (char *)v16 + v5 - 16 - v11;
            unint64_t v51 = v46 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v52 = *(_OWORD *)v49;
              *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
              *(_OWORD *)char v50 = v52;
              v50 -= 32;
              v49 -= 32;
              v51 -= 32;
            }
            while (v51);
            if (v46 != (v46 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_62:
              do
              {
                char v53 = *--v47;
                *--uint64_t v48 = v53;
              }
              while (v47 != v45);
            }
            unint64_t v54 = *(char **)(a1 + 8);
            double v55 = (char *)v16 + v15;
            size_t v56 = v54 - v5;
            if (v54 == v5) {
              goto LABEL_53;
            }
          }
          memmove(v18, v5, v56);
LABEL_53:
          unint64_t v57 = *(char **)a1;
          *(void *)a1 = v48;
          *(void *)(a1 + 8) = &v18[v56];
          *(void *)(a1 + 16) = v55;
          if (v57) {
            operator delete(v57);
          }
          return v17;
        }
        if ((a5 & 0x18) == 0)
        {
          unint64_t v20 = &__src[v29];
          double v19 = &v17[v29];
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      double v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      double v40 = &__src[v29];
      long long v41 = (char *)v16 + &v5[v29] - v11;
      unint64_t v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v43 = *(void *)v40;
        v40 += 8;
        *(void *)long long v41 = v43;
        v41 += 8;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5) {
        goto LABEL_44;
      }
    }
    do
    {
LABEL_43:
      char v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_44;
  }
  uint64_t v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    double v22 = &__src[a5];
    long long v24 = *(char **)(a1 + 8);
    double v25 = &__dst[a5];
    uint64_t v26 = &v10[-a5];
    unint64_t v27 = v24;
    if ((unint64_t)v10 < a5) {
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  double v22 = &__src[v21];
  int64_t v23 = a4 - &__src[v21];
  if (a4 != &__src[v21]) {
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  }
  long long v24 = &v10[v23];
  *(void *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    double v25 = &v5[a5];
    uint64_t v26 = &v24[-a5];
    unint64_t v27 = &v10[v23];
    if (&v24[-a5] >= v10) {
      goto LABEL_30;
    }
LABEL_19:
    unint64_t v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      unint64_t v27 = v24;
      if (a5 >= 0x20)
      {
        char v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        long double v31 = v24 + 16;
        size_t v32 = (long long *)(v26 + 16);
        unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *long double v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        uint64_t v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unint64_t v27 = v24;
    }
    do
    {
      char v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(void *)(a1 + 8) = v27;
    if (v24 != v25) {
      memmove(v25, v5, v24 - v25);
    }
    if (v22 != __src) {
      memmove(v5, __src, v22 - __src);
    }
  }
  return v5;
}

uint64_t sub_7C710(uint64_t result)
{
  if (result != 3) {
    return result;
  }
  unsigned int v1 = getenv("SERVER_MODE");
  if (!v1)
  {
    LOBYTE(result) = 1;
    return result;
  }
  unint64_t v2 = v1;
  if (strlen(v1) != 6) {
    goto LABEL_55;
  }
  __darwin_ct_rune_t v3 = *v2;
  __darwin_ct_rune_t v4 = __toupper(79);
  if (v4 != __toupper(v3)) {
    goto LABEL_55;
  }
  __darwin_ct_rune_t v5 = v2[1];
  __darwin_ct_rune_t v6 = __toupper(78);
  if (v6 != __toupper(v5)) {
    goto LABEL_55;
  }
  __darwin_ct_rune_t v7 = v2[2];
  __darwin_ct_rune_t v8 = __toupper(76);
  if (v8 != __toupper(v7)) {
    goto LABEL_55;
  }
  __darwin_ct_rune_t v9 = v2[3];
  __darwin_ct_rune_t v10 = __toupper(73);
  if (v10 == __toupper(v9))
  {
    __darwin_ct_rune_t v11 = v2[4];
    __darwin_ct_rune_t v12 = __toupper(78);
    if (v12 == __toupper(v11))
    {
      __darwin_ct_rune_t v13 = v2[5];
      __darwin_ct_rune_t v14 = __toupper(69);
      if (v14 == __toupper(v13)) {
        return 0;
      }
    }
  }
LABEL_55:
  if (strlen(v2) == 7)
  {
    __darwin_ct_rune_t v15 = *v2;
    __darwin_ct_rune_t v16 = __toupper(79);
    if (v16 == __toupper(v15))
    {
      __darwin_ct_rune_t v17 = v2[1];
      __darwin_ct_rune_t v18 = __toupper(70);
      if (v18 == __toupper(v17))
      {
        __darwin_ct_rune_t v19 = v2[2];
        __darwin_ct_rune_t v20 = __toupper(70);
        if (v20 == __toupper(v19))
        {
          __darwin_ct_rune_t v21 = v2[3];
          __darwin_ct_rune_t v22 = __toupper(76);
          if (v22 == __toupper(v21))
          {
            __darwin_ct_rune_t v23 = v2[4];
            __darwin_ct_rune_t v24 = __toupper(73);
            if (v24 == __toupper(v23))
            {
              __darwin_ct_rune_t v25 = v2[5];
              __darwin_ct_rune_t v26 = __toupper(78);
              if (v26 == __toupper(v25))
              {
                __darwin_ct_rune_t v27 = v2[6];
                __darwin_ct_rune_t v28 = __toupper(69);
                if (v28 == __toupper(v27)) {
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  if (strlen(v2) == 11)
  {
    __darwin_ct_rune_t v29 = *v2;
    __darwin_ct_rune_t v30 = __toupper(79);
    if (v30 == __toupper(v29))
    {
      __darwin_ct_rune_t v31 = v2[1];
      __darwin_ct_rune_t v32 = __toupper(70);
      if (v32 == __toupper(v31))
      {
        __darwin_ct_rune_t v33 = v2[2];
        __darwin_ct_rune_t v34 = __toupper(70);
        if (v34 == __toupper(v33))
        {
          __darwin_ct_rune_t v35 = v2[3];
          __darwin_ct_rune_t v36 = __toupper(76);
          if (v36 == __toupper(v35))
          {
            __darwin_ct_rune_t v37 = v2[4];
            __darwin_ct_rune_t v38 = __toupper(73);
            if (v38 == __toupper(v37))
            {
              __darwin_ct_rune_t v39 = v2[5];
              __darwin_ct_rune_t v40 = __toupper(78);
              if (v40 == __toupper(v39))
              {
                __darwin_ct_rune_t v41 = v2[6];
                __darwin_ct_rune_t v42 = __toupper(69);
                if (v42 == __toupper(v41))
                {
                  __darwin_ct_rune_t v43 = v2[7];
                  __darwin_ct_rune_t v44 = __toupper(95);
                  if (v44 == __toupper(v43))
                  {
                    __darwin_ct_rune_t v45 = v2[8];
                    __darwin_ct_rune_t v46 = __toupper(73);
                    if (v46 == __toupper(v45))
                    {
                      __darwin_ct_rune_t v47 = v2[9];
                      __darwin_ct_rune_t v48 = __toupper(79);
                      if (v48 == __toupper(v47))
                      {
                        __darwin_ct_rune_t v49 = v2[10];
                        __darwin_ct_rune_t v50 = __toupper(83);
                        if (v50 == __toupper(v49)) {
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (strlen(v2) != 15) {
    return 1;
  }
  __darwin_ct_rune_t v51 = *v2;
  __darwin_ct_rune_t v52 = __toupper(79);
  if (v52 != __toupper(v51)) {
    return 1;
  }
  __darwin_ct_rune_t v53 = v2[1];
  __darwin_ct_rune_t v54 = __toupper(70);
  if (v54 != __toupper(v53)) {
    return 1;
  }
  __darwin_ct_rune_t v55 = v2[2];
  __darwin_ct_rune_t v56 = __toupper(70);
  if (v56 != __toupper(v55)) {
    return 1;
  }
  __darwin_ct_rune_t v57 = v2[3];
  __darwin_ct_rune_t v58 = __toupper(76);
  if (v58 != __toupper(v57)) {
    return 1;
  }
  __darwin_ct_rune_t v59 = v2[4];
  __darwin_ct_rune_t v60 = __toupper(73);
  if (v60 != __toupper(v59)) {
    return 1;
  }
  __darwin_ct_rune_t v61 = v2[5];
  __darwin_ct_rune_t v62 = __toupper(78);
  if (v62 != __toupper(v61)) {
    return 1;
  }
  __darwin_ct_rune_t v63 = v2[6];
  __darwin_ct_rune_t v64 = __toupper(69);
  if (v64 != __toupper(v63)) {
    return 1;
  }
  __darwin_ct_rune_t v65 = v2[7];
  __darwin_ct_rune_t v66 = __toupper(95);
  if (v66 != __toupper(v65)) {
    return 1;
  }
  __darwin_ct_rune_t v67 = v2[8];
  __darwin_ct_rune_t v68 = __toupper(87);
  if (v68 != __toupper(v67)) {
    return 1;
  }
  __darwin_ct_rune_t v69 = v2[9];
  __darwin_ct_rune_t v70 = __toupper(65);
  if (v70 != __toupper(v69)) {
    return 1;
  }
  __darwin_ct_rune_t v71 = v2[10];
  __darwin_ct_rune_t v72 = __toupper(84);
  if (v72 != __toupper(v71)) {
    return 1;
  }
  __darwin_ct_rune_t v73 = v2[11];
  __darwin_ct_rune_t v74 = __toupper(67);
  if (v74 != __toupper(v73)) {
    return 1;
  }
  __darwin_ct_rune_t v75 = v2[12];
  __darwin_ct_rune_t v76 = __toupper(72);
  if (v76 != __toupper(v75)) {
    return 1;
  }
  __darwin_ct_rune_t v77 = v2[13];
  __darwin_ct_rune_t v78 = __toupper(79);
  if (v78 != __toupper(v77)) {
    return 1;
  }
  __darwin_ct_rune_t v79 = v2[14];
  __darwin_ct_rune_t v80 = __toupper(83);
  if (v80 == __toupper(v79)) {
    LOBYTE(result) = 2;
  }
  else {
    LOBYTE(result) = 1;
  }
  return result;
}

std::string *sub_7CCCC@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (result < 4) {
    return std::string::assign(a2, off_23FE4B0[(char)result]);
  }
  return result;
}

void sub_7CD14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7CD30(const std::string *a1@<X0>, char *a2@<X8>)
{
  unint64_t v2 = a1;
  if (std::string::find(a1, 47, 0) != -1)
  {
    std::string::size_type v4 = std::string::rfind(v2, 47, 0xFFFFFFFFFFFFFFFFLL) + 1;
    std::string::size_type v5 = std::string::rfind(v2, 46, 0xFFFFFFFFFFFFFFFFLL);
    LODWORD(size) = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    std::string::size_type size = v2->__r_.__value_.__l.__size_;
    if (size < v4) {
      goto LABEL_48;
    }
    unint64_t v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  std::string::size_type v4 = 0;
  std::string::size_type v5 = std::string::rfind(v2, 46, 0xFFFFFFFFFFFFFFFFLL);
  LODWORD(size) = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  std::string::size_type size = size;
  if (v4 > size) {
LABEL_48:
  }
    sub_5AD0();
LABEL_8:
  size_t v7 = size - v4;
  if (v7 >= v5 - v4) {
    size_t v8 = v5 - v4;
  }
  else {
    size_t v8 = v7;
  }
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v27 = v8;
    int64_t v28 = v11 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v28) = v8;
  p_dst = (void **)&__dst;
  if (v8) {
LABEL_18:
  }
    memmove(p_dst, (char *)v2 + v4, v8);
  *((unsigned char *)p_dst + v8) = 0;
  char v12 = HIBYTE(v28);
  if (v28 >= 0) {
    __darwin_ct_rune_t v13 = (void **)&__dst;
  }
  else {
    __darwin_ct_rune_t v13 = __dst;
  }
  if (v28 >= 0) {
    unint64_t v14 = HIBYTE(v28);
  }
  else {
    unint64_t v14 = v27;
  }
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    __darwin_ct_rune_t v15 = (char *)operator new(v16 + 1);
    *((void *)a2 + 1) = v14;
    *((void *)a2 + 2) = v17 | 0x8000000000000000;
    *(void *)a2 = v15;
  }
  else
  {
    a2[23] = v14;
    __darwin_ct_rune_t v15 = a2;
    if (!v14)
    {
      *a2 = 0;
      goto LABEL_45;
    }
  }
  if (v14 < 0x20 || (unint64_t)(v15 - (char *)v13) < 0x20)
  {
    __darwin_ct_rune_t v18 = v13;
    __darwin_ct_rune_t v19 = v15;
    do
    {
LABEL_39:
      char v24 = *(unsigned char *)v18;
      __darwin_ct_rune_t v18 = (void **)((char *)v18 + 1);
      *v19++ = v24;
    }
    while (v18 != (void **)((char *)v13 + v14));
    goto LABEL_40;
  }
  __darwin_ct_rune_t v18 = (void **)((char *)v13 + (v14 & 0xFFFFFFFFFFFFFFE0));
  __darwin_ct_rune_t v19 = &v15[v14 & 0xFFFFFFFFFFFFFFE0];
  __darwin_ct_rune_t v20 = v15 + 16;
  __darwin_ct_rune_t v21 = (long long *)(v13 + 2);
  unint64_t v22 = v14 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v23 = *v21;
    *(v20 - 1) = *(v21 - 1);
    *__darwin_ct_rune_t v20 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 32;
  }
  while (v22);
  if (v14 != (v14 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_39;
  }
LABEL_40:
  char *v19 = 0;
  if (a2[23] >= 0) {
    __darwin_ct_rune_t v25 = a2;
  }
  else {
    __darwin_ct_rune_t v25 = *(char **)a2;
  }
  do
  {
    *v25++ = __tolower(*(char *)v13);
    __darwin_ct_rune_t v13 = (void **)((char *)v13 + 1);
    --v14;
  }
  while (v14);
  char v12 = HIBYTE(v28);
LABEL_45:
  if (v12 < 0) {
    operator delete(__dst);
  }
}

void sub_7CFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7CFEC(const std::string *a1, void *a2)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  sub_7CD30(a1, (char *)__p);
  __darwin_ct_rune_t v3 = (unsigned char **)*a2;
  std::string::size_type v4 = (unsigned char **)a2[1];
  if ((unsigned char **)*a2 != v4)
  {
    while (1)
    {
      size_t v7 = *((unsigned __int8 *)v3 + 23);
      if ((v7 & 0x80u) == 0) {
        size_t v8 = v3;
      }
      else {
        size_t v8 = *v3;
      }
      if ((v7 & 0x80u) != 0) {
        size_t v7 = (size_t)v3[1];
      }
      if (v7)
      {
        size_t v9 = v7;
        uint64_t v10 = v8;
        while (*v10 != 46)
        {
          ++v10;
          if (!--v9)
          {
            uint64_t v10 = &v8[v7];
            break;
          }
        }
        if (v10 == &v8[v7]) {
          unint64_t v11 = -1;
        }
        else {
          unint64_t v11 = v10 - v8;
        }
        if (v7 >= v11) {
          size_t v12 = v11;
        }
        else {
          size_t v12 = v7;
        }
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          sub_188D690();
        }
      }
      else
      {
        size_t v12 = 0;
      }
      if (v12 >= 0x17) {
        break;
      }
      HIBYTE(v26) = v12;
      p_s1 = &__s1;
      if (v12) {
        goto LABEL_31;
      }
LABEL_32:
      p_s1[v12] = 0;
      if (v26 >= 0) {
        size_t v16 = HIBYTE(v26);
      }
      else {
        size_t v16 = __n;
      }
      unint64_t v17 = v23;
      if ((v23 & 0x80u) != 0) {
        unint64_t v17 = (unint64_t)__p[1];
      }
      if (v16 != v17) {
        goto LABEL_47;
      }
      if ((v23 & 0x80u) == 0) {
        __darwin_ct_rune_t v18 = __p;
      }
      else {
        __darwin_ct_rune_t v18 = (void **)__p[0];
      }
      if ((v26 & 0x8000000000000000) == 0)
      {
        if (!HIBYTE(v26))
        {
LABEL_50:
          uint64_t v20 = 1;
          if ((char)v23 < 0) {
            goto LABEL_51;
          }
          return v20;
        }
        uint64_t v19 = 0;
        while (*((unsigned __int8 *)&__s1 + v19) == *((unsigned __int8 *)v18 + v19))
        {
          if (HIBYTE(v26) == ++v19) {
            goto LABEL_50;
          }
        }
LABEL_47:
        if (v26 < 0) {
          operator delete(__s1);
        }
        goto LABEL_5;
      }
      std::string::size_type v5 = __s1;
      int v6 = memcmp(__s1, v18, __n);
      operator delete(v5);
      if (!v6) {
        goto LABEL_50;
      }
LABEL_5:
      v3 += 6;
      if (v3 == v4) {
        goto LABEL_53;
      }
    }
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_s1 = operator new(v14 + 1);
    size_t __n = v12;
    int64_t v26 = v15 | 0x8000000000000000;
    std::string __s1 = p_s1;
LABEL_31:
    memmove(p_s1, v8, v12);
    goto LABEL_32;
  }
LABEL_53:
  uint64_t v20 = 0;
  if ((char)v23 < 0) {
LABEL_51:
  }
    operator delete(__p[0]);
  return v20;
}

void sub_7D214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_7D234(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 0;
  int v6 = 0;
  if (!*a2) {
    return 0;
  }
  BOOL result = sub_111FFF4(*a2, a1, &v5);
  BOOL v3 = result;
  std::string::size_type v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v3;
    }
  }
  return result;
}

void sub_7D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_7D304(void *a1, void *a2)
{
  if (!a1[3]) {
    return;
  }
  char v34 = 14;
  strcpy((char *)__p, "default_region");
  std::string::size_type v4 = sub_58070(a1, (uint64_t)__p);
  uint64_t v5 = v4;
  if ((v34 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_51;
  }
  operator delete(__p[0]);
  if (!v5)
  {
LABEL_51:
    char v34 = 14;
    strcpy((char *)__p, "default_region");
    __darwin_ct_rune_t v35 = __p;
    unsigned __int8 v23 = sub_7EE88((uint64_t)a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v35);
    sub_59234((void *)v23 + 5, (uint64_t)a1);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    char v24 = (uint64_t *)a2[2];
    if (!v24) {
      return;
    }
    while (1)
    {
      __darwin_ct_rune_t v25 = (uint64_t **)(v24 + 2);
      int v26 = *((char *)v24 + 39);
      if (v26 < 0)
      {
        if (v24[3] == 14)
        {
          int64_t v28 = *v25;
          uint64_t v29 = *v28;
          uint64_t v30 = *(uint64_t *)((char *)v28 + 6);
          if (v29 == 0x5F746C7561666564 && v30 == 0x6E6F696765725F74) {
            goto LABEL_56;
          }
        }
      }
      else if (v26 == 14 {
             && *v25 == (uint64_t *)0x5F746C7561666564
      }
             && *(uint64_t *)((char *)v24 + 22) == 0x6E6F696765725F74)
      {
        goto LABEL_56;
      }
      sub_59C40((uint64_t)(v24 + 5), (uint64_t)a1);
LABEL_56:
      char v24 = (uint64_t *)*v24;
      if (!v24) {
        return;
      }
    }
  }
LABEL_4:
  char v34 = 14;
  strcpy((char *)__p, "default_region");
  uint64_t v6 = sub_560F4(a1, (uint64_t)__p);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  char v34 = 14;
  strcpy((char *)__p, "default_region");
  __darwin_ct_rune_t v35 = __p;
  size_t v7 = sub_7EE88((uint64_t)a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v35);
  sub_59234((void *)v7 + 5, v6);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = (uint64_t *)a2[2]; i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v10 = (uint64_t **)(i + 2);
    int v11 = *((char *)i + 39);
    if (v11 < 0)
    {
      if (i[3] == 14)
      {
        __darwin_ct_rune_t v13 = *v10;
        uint64_t v14 = *v13;
        uint64_t v15 = *(uint64_t *)((char *)v13 + 6);
        if (v14 == 0x5F746C7561666564 && v15 == 0x6E6F696765725F74) {
          continue;
        }
      }
    }
    else if (v11 == 14 {
           && *v10 == (uint64_t *)0x5F746C7561666564
    }
           && *(uint64_t *)((char *)i + 22) == 0x6E6F696765725F74)
    {
      continue;
    }
    sub_59C40((uint64_t)(i + 5), v6);
  }
  for (double j = (uint64_t *)a1[2]; j; double j = (uint64_t *)*j)
  {
    __darwin_ct_rune_t v18 = j + 2;
    int v19 = *((char *)j + 39);
    if (v19 < 0)
    {
      if (j[3] != 14
        || (*(void *)*v18 == 0x5F746C7561666564 ? (BOOL v21 = *(void *)(*v18 + 6) == 0x6E6F696765725F74) : (BOOL v21 = 0),
            !v21))
      {
LABEL_28:
        if (!sub_7F3A8(a2, (uint64_t)(j + 2)))
        {
          char v34 = 14;
          strcpy((char *)__p, "default_region");
          unint64_t v22 = sub_7F5D8(a2, (uint64_t)__p);
          if (!v22) {
            sub_5AE8("unordered_map::at: key not found");
          }
          sub_7F808((uint64_t)a2, (uint64_t)(j + 2), (uint64_t)(j + 2), (uint64_t)(v22 + 5));
          if (v34 < 0) {
            operator delete(__p[0]);
          }
        }
        __p[0] = j + 2;
        unint64_t v17 = sub_7FCB8((uint64_t)a2, (uint64_t)(j + 2), (uint64_t)&unk_20F06E0, (long long **)__p) + 5;
        sub_59234(v17, v6);
        if (*((_DWORD *)j + 12) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        sub_59234(v17, j[5]);
      }
    }
    else
    {
      if (v19 != 14) {
        goto LABEL_28;
      }
      if (*v18 != 0x5F746C7561666564 || *(uint64_t *)((char *)j + 22) != 0x6E6F696765725F74) {
        goto LABEL_28;
      }
    }
  }
}

void sub_7D704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7D734(void *a1, void *a2)
{
  if (!a1[3]) {
    return;
  }
  char v24 = 14;
  strcpy((char *)__p, "default_region");
  std::string::size_type v4 = sub_7F3A8(a1, (uint64_t)__p);
  if (!v4) {
    sub_5AE8("unordered_map::at: key not found");
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  char v24 = 14;
  strcpy((char *)__p, "default_region");
  __darwin_ct_rune_t v25 = __p;
  uint64_t v5 = sub_7EE88((uint64_t)a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v25);
  uint64_t v6 = (uint64_t)(v4 + 5);
  sub_59234((void *)v5 + 5, v6);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = (uint64_t *)a2[2]; i; uint64_t i = (uint64_t *)*i)
  {
    size_t v9 = (uint64_t **)(i + 2);
    int v10 = *((char *)i + 39);
    if (v10 < 0)
    {
      if (i[3] == 14)
      {
        size_t v12 = *v9;
        uint64_t v13 = *v12;
        uint64_t v14 = *(uint64_t *)((char *)v12 + 6);
        if (v13 == 0x5F746C7561666564 && v14 == 0x6E6F696765725F74) {
          continue;
        }
      }
    }
    else if (v10 == 14 {
           && *v9 == (uint64_t *)0x5F746C7561666564
    }
           && *(uint64_t *)((char *)i + 22) == 0x6E6F696765725F74)
    {
      continue;
    }
    sub_59C40((uint64_t)(i + 5), v6);
  }
  for (double j = (uint64_t *)a1[2]; j; double j = (uint64_t *)*j)
  {
    __darwin_ct_rune_t v18 = j + 2;
    int v19 = *((char *)j + 39);
    if (v19 < 0)
    {
      if (j[3] != 14
        || (*(void *)*v18 == 0x5F746C7561666564 ? (BOOL v21 = *(void *)(*v18 + 6) == 0x6E6F696765725F74) : (BOOL v21 = 0),
            !v21))
      {
LABEL_27:
        if (sub_7F3A8(a2, (uint64_t)(j + 2)))
        {
          __p[0] = j + 2;
          size_t v16 = sub_7FCB8((uint64_t)a2, (uint64_t)(j + 2), (uint64_t)&unk_20F06E0, (long long **)__p);
          sub_59234(v16 + 5, v6);
        }
        else
        {
          char v24 = 14;
          strcpy((char *)__p, "default_region");
          unint64_t v22 = sub_7F5D8(a2, (uint64_t)__p);
          if (!v22) {
            sub_5AE8("unordered_map::at: key not found");
          }
          sub_7F808((uint64_t)a2, (uint64_t)(j + 2), (uint64_t)(j + 2), (uint64_t)(v22 + 5));
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
        __p[0] = j + 2;
        unint64_t v17 = sub_7FCB8((uint64_t)a2, (uint64_t)(j + 2), (uint64_t)&unk_20F06E0, (long long **)__p);
        sub_59234(v17 + 5, (uint64_t)(j + 5));
      }
    }
    else
    {
      if (v19 != 14) {
        goto LABEL_27;
      }
      if (*v18 != 0x5F746C7561666564 || *(uint64_t *)((char *)j + 22) != 0x6E6F696765725F74) {
        goto LABEL_27;
      }
    }
  }
}

void sub_7D9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DA1C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    __darwin_ct_rune_t v18 = 0;
    int v19 = 0;
    *(_OWORD *)uint64_t v15 = 0u;
    long long v16 = 0u;
    int v17 = 1065353216;
    if (sub_111FFF4(v4, a1, &v18))
    {
      sub_53FD4(&v18, (uint64_t)__p);
      sub_62BDC((uint64_t)v15, (uint64_t *)__p);
      uint64_t v6 = v14;
      if (v14)
      {
        do
        {
          size_t v12 = *(char **)v6;
          sub_57AC8((uint64_t *)v6 + 5);
          if (v6[39] < 0) {
            operator delete(*((void **)v6 + 2));
          }
          operator delete(v6);
          uint64_t v6 = v12;
        }
        while (v12);
      }
      size_t v7 = __p[0];
      __p[0] = 0;
      if (v7) {
        operator delete(v7);
      }
    }
    if (*((void *)&v16 + 1)) {
      sub_7D304(v15, a3);
    }
    size_t v8 = (char *)v16;
    if ((void)v16)
    {
      do
      {
        int v11 = *(char **)v8;
        sub_57AC8((uint64_t *)v8 + 5);
        if (v8[39] < 0) {
          operator delete(*((void **)v8 + 2));
        }
        operator delete(v8);
        size_t v8 = v11;
      }
      while (v11);
    }
    size_t v9 = v15[0];
    v15[0] = 0;
    if (v9) {
      operator delete(v9);
    }
    int v10 = v19;
    if (v19)
    {
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_7DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_5450C((uint64_t)va);
  sub_14A84(v7 - 48);
  _Unwind_Resume(a1);
}

void sub_7DBB4(const std::string *a1, const std::string **a2, uint64_t a3)
{
  sub_7CD30(a1, (char *)v90);
  uint64_t v5 = *a2;
  __darwin_ct_rune_t v67 = (uint64_t *)a2[1];
  if (*a2 != (const std::string *)v67)
  {
    __darwin_ct_rune_t v66 = (void *)(a3 + 16);
    while (1)
    {
      unint64_t v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v8 = (const std::string *)v5->__r_.__value_.__r.__words[0];
        std::string::size_type size = v5->__r_.__value_.__l.__size_;
        if (!size)
        {
LABEL_21:
          unint64_t v12 = -1;
          if ((v7 & 0x80) == 0) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
      }
      else
      {
        size_t v8 = v5;
        std::string::size_type size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        if (!*((unsigned char *)&v5->__r_.__value_.__s + 23)) {
          goto LABEL_21;
        }
      }
      int v10 = (const std::string *)((char *)v8 + size);
      int v11 = v8;
      while (v11->__r_.__value_.__s.__data_[0] != 46)
      {
        int v11 = (const std::string *)((char *)v11 + 1);
        if (!--size)
        {
          int v11 = v10;
          break;
        }
      }
      unint64_t v12 = (char *)v11 - (char *)v8;
      if (v11 == v10) {
        unint64_t v12 = -1;
      }
      if ((v7 & 0x80) == 0)
      {
LABEL_15:
        uint64_t v13 = v5;
        if (v7 >= v12) {
          size_t v14 = v12;
        }
        else {
          size_t v14 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        }
        if (v14 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_104;
        }
        goto LABEL_26;
      }
LABEL_22:
      uint64_t v13 = (const std::string *)v5->__r_.__value_.__r.__words[0];
      if (v5->__r_.__value_.__l.__size_ >= v12) {
        size_t v14 = v12;
      }
      else {
        size_t v14 = v5->__r_.__value_.__l.__size_;
      }
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
LABEL_104:
      }
        sub_188D690();
LABEL_26:
      if (v14 >= 0x17)
      {
        uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v16 = v14 | 7;
        }
        uint64_t v17 = v16 + 1;
        p_dst = (void **)operator new(v16 + 1);
        size_t v88 = v14;
        int64_t v89 = v17 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v89) = v14;
        p_dst = (void **)&__dst;
        if (!v14) {
          goto LABEL_33;
        }
      }
      memmove(p_dst, v13, v14);
LABEL_33:
      *((unsigned char *)p_dst + v14) = 0;
      uint64_t v18 = HIBYTE(v89);
      char v6 = HIBYTE(v89);
      if (v89 >= 0) {
        size_t v19 = HIBYTE(v89);
      }
      else {
        size_t v19 = v88;
      }
      unint64_t v20 = v91;
      if ((v91 & 0x80u) != 0) {
        unint64_t v20 = (unint64_t)v90[1];
      }
      if (v19 == v20)
      {
        BOOL v21 = (v91 & 0x80u) == 0 ? v90 : (void **)v90[0];
        if (SHIBYTE(v89) < 0)
        {
          if (memcmp(__dst, v21, v88)) {
            goto LABEL_49;
          }
        }
        else if (HIBYTE(v89))
        {
          unint64_t v22 = (void **)&__dst;
          while (*(unsigned __int8 *)v22 == *(unsigned __int8 *)v21)
          {
            unint64_t v22 = (void **)((char *)v22 + 1);
            BOOL v21 = (void **)((char *)v21 + 1);
            if (!--v18) {
              goto LABEL_51;
            }
          }
          goto LABEL_4;
        }
LABEL_51:
        unint64_t v23 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        int v24 = (char)v23;
        if ((v23 & 0x80u) != 0) {
          unint64_t v23 = v5->__r_.__value_.__l.__size_;
        }
        if (v23 < 0xD
          || (v24 >= 0 ? (__darwin_ct_rune_t v25 = (uint64_t *)v5) : (__darwin_ct_rune_t v25 = (uint64_t *)v5->__r_.__value_.__r.__words[0]),
              (uint64_t v26 = *v25, v27 = *(uint64_t *)((char *)v25 + 5), v26 == 0x6C616E7265746E69)
            ? (BOOL v28 = v27 == 0x7365646F6D6C616ELL)
            : (BOOL v28 = 0),
              !v28))
        {
          std::string::size_type v29 = std::string::find(v5, 46, 0) + 1;
          if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v30 = v5->__r_.__value_.__l.__size_;
            if (v30 < v29) {
LABEL_119:
            }
              sub_5AD0();
            __darwin_ct_rune_t v31 = (const std::string *)v5->__r_.__value_.__r.__words[0];
            size_t v32 = v30 - v29;
            if (v30 - v29 > 0x7FFFFFFFFFFFFFF7) {
LABEL_118:
            }
              sub_188D690();
          }
          else
          {
            std::string::size_type v30 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
            __darwin_ct_rune_t v31 = v5;
            if (v29 > v30) {
              goto LABEL_119;
            }
            size_t v32 = v30 - v29;
            if (v30 - v29 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_118;
            }
          }
          if (v32 >= 0x17)
          {
            uint64_t v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v34 = v32 | 7;
            }
            uint64_t v35 = v34 + 1;
            __darwin_ct_rune_t v33 = (void **)operator new(v34 + 1);
            unsigned int v85 = (void *)v32;
            int64_t v86 = v35 | 0x8000000000000000;
            unsigned int v84 = v33;
          }
          else
          {
            HIBYTE(v86) = v32;
            __darwin_ct_rune_t v33 = (void **)&v84;
            if (v30 == v29) {
              goto LABEL_74;
            }
          }
          memmove(v33, (char *)v31 + v29, v32);
LABEL_74:
          *((unsigned char *)v33 + v32) = 0;
          __darwin_ct_rune_t v36 = (void *)HIBYTE(v86);
          __darwin_ct_rune_t v37 = v84;
          if (v86 < 0) {
            __darwin_ct_rune_t v36 = v85;
          }
          else {
            __darwin_ct_rune_t v37 = (void **)&v84;
          }
          v75[0] = v37;
          v75[1] = v36;
          sub_230E8((unsigned __int8 **)v75, 0x2Eu, (uint64_t)&v82);
          __darwin_ct_rune_t v38 = v83;
          if (v82 == v83)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            std::operator+<char>();
            __darwin_ct_rune_t v50 = std::string::append(&v78, ": ");
            long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v79.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            if (v86 >= 0) {
              __darwin_ct_rune_t v52 = (const std::string::value_type *)&v84;
            }
            else {
              __darwin_ct_rune_t v52 = (const std::string::value_type *)v84;
            }
            if (v86 >= 0) {
              std::string::size_type v53 = HIBYTE(v86);
            }
            else {
              std::string::size_type v53 = (std::string::size_type)v85;
            }
            __darwin_ct_rune_t v54 = std::string::append(&v79, v52, v53);
            long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v80.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            __darwin_ct_rune_t v56 = std::string::append(&v80, " with '");
            long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            int v58 = SHIBYTE(v5[1].__r_.__value_.__r.__words[2]);
            if (v58 >= 0) {
              data = (const std::string::value_type *)&v5[1];
            }
            else {
              data = v5[1].__r_.__value_.__l.__data_;
            }
            if (v58 >= 0) {
              std::string::size_type v60 = HIBYTE(v5[1].__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v60 = v5[1].__r_.__value_.__l.__size_;
            }
            __darwin_ct_rune_t v61 = std::string::append(&v81, data, v60);
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            *(void *)&long long v71 = *((void *)&v61->__r_.__value_.__l + 2);
            *(_OWORD *)long long __p = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            __darwin_ct_rune_t v63 = std::string::append((std::string *)__p, "'. No valid key.");
            long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            *(void *)&long long v76 = *((void *)&v63->__r_.__value_.__l + 2);
            *(_OWORD *)__darwin_ct_rune_t v75 = v64;
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            __darwin_ct_rune_t v65 = (void *)sub_2F404((uint64_t)exception, (long long *)v75);
          }
          *(_OWORD *)__darwin_ct_rune_t v75 = 0u;
          long long v76 = 0u;
          int v77 = 1065353216;
          if (-1 != 0x5555555555555555 * (v83 - v82))
          {
            __darwin_ct_rune_t v39 = v82;
            uint64_t v40 = v82[2];
            *(_OWORD *)__darwin_ct_rune_t v73 = *(_OWORD *)v82;
            uint64_t v74 = v40;
            v82[1] = 0;
            v39[2] = 0;
            *__darwin_ct_rune_t v39 = 0;
            *(_OWORD *)long long __p = 0u;
            long long v71 = 0u;
            int v72 = 1065353216;
            operator new();
          }
          long long v41 = *(_OWORD *)(v83 - 3);
          uint64_t v69 = *(v83 - 1);
          *(_OWORD *)__darwin_ct_rune_t v68 = v41;
          *(v83 - 2) = 0;
          *(v38 - 1) = 0;
          *(v38 - 3) = 0;
          sub_5EC80((uint64_t)&v5[1], &v92);
          sub_59D18((uint64_t)v75, (uint64_t)v68, (uint64_t)&v92);
          sub_5521C((uint64_t *)v93, &v92);
          if (SHIBYTE(v69) < 0) {
            operator delete(v68[0]);
          }
          for (uint64_t i = v66; ; sub_59234(i + 5, (uint64_t)v75))
          {
            uint64_t i = (void *)*i;
            if (!i) {
              break;
            }
          }
          __darwin_ct_rune_t v43 = (char *)v76;
          if ((void)v76)
          {
            do
            {
              __darwin_ct_rune_t v48 = *(char **)v43;
              sub_57AC8((uint64_t *)v43 + 5);
              if (v43[39] < 0) {
                operator delete(*((void **)v43 + 2));
              }
              operator delete(v43);
              __darwin_ct_rune_t v43 = v48;
            }
            while (v48);
          }
          __darwin_ct_rune_t v44 = v75[0];
          v75[0] = 0;
          if (v44) {
            operator delete(v44);
          }
          __darwin_ct_rune_t v45 = v82;
          if (v82)
          {
            __darwin_ct_rune_t v46 = v83;
            __darwin_ct_rune_t v47 = v82;
            if (v83 != v82)
            {
              do
              {
                if (*((char *)v46 - 1) < 0) {
                  operator delete((void *)*(v46 - 3));
                }
                v46 -= 3;
              }
              while (v46 != v45);
              __darwin_ct_rune_t v47 = v82;
            }
            unsigned int v83 = v45;
            operator delete(v47);
          }
          if (SHIBYTE(v86) < 0) {
            operator delete(v84);
          }
          char v6 = HIBYTE(v89);
        }
      }
LABEL_4:
      if (v6 < 0)
      {
LABEL_49:
        operator delete(__dst);
        v5 += 2;
        if (v5 == (const std::string *)v67) {
          break;
        }
      }
      else
      {
        v5 += 2;
        if (v5 == (const std::string *)v67) {
          break;
        }
      }
    }
  }
  if ((char)v91 < 0) {
    operator delete(v90[0]);
  }
}

void sub_7E3A8(_Unwind_Exception *a1, int a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, std::string *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, long long a15, std::string::size_type a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,std::string *a25,std::string *a26,long long __pa,std::string::size_type a28,std::string *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,long long a37,std::string::size_type a38,uint64_t a39,long long a40,std::string::size_type a41,uint64_t a42,long long a43,std::string::size_type a44)
{
  if (SHIBYTE(a28) < 0) {
    operator delete((void *)__pa);
  }
  if (SHIBYTE(a16) < 0)
  {
    operator delete((void *)a15);
    if ((SHIBYTE(a44) & 0x80000000) == 0)
    {
LABEL_5:
      if ((SHIBYTE(a41) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(a44) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete((void *)a43);
  if ((SHIBYTE(a41) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(a38) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete((void *)a40);
  if ((SHIBYTE(a38) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a36 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete((void *)a37);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_13:
    sub_1A668((void **)(v45 - 224));
    if (a2 == 1)
    {
      __darwin_ct_rune_t v48 = __cxa_begin_catch(a1);
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      __darwin_ct_rune_t v50 = std::string::append((std::string *)&a31, ": ");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      a38 = v50->__r_.__value_.__r.__words[2];
      a37 = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      char v52 = *(unsigned char *)(v45 - 177);
      if (v52 >= 0) {
        std::string::size_type v53 = (const std::string::value_type *)(v45 - 200);
      }
      else {
        std::string::size_type v53 = *(const std::string::value_type **)(v45 - 200);
      }
      if (v52 >= 0) {
        std::string::size_type v54 = *(unsigned __int8 *)(v45 - 177);
      }
      else {
        std::string::size_type v54 = *(void *)(v45 - 192);
      }
      long long v55 = std::string::append((std::string *)&a37, v53, v54);
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      a41 = v55->__r_.__value_.__r.__words[2];
      a40 = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      long long v57 = std::string::append((std::string *)&a40, " with '");
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      a44 = v57->__r_.__value_.__r.__words[2];
      a43 = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      __darwin_ct_rune_t v61 = *(const std::string::value_type **)(v44 + 24);
      uint64_t v60 = v44 + 24;
      __darwin_ct_rune_t v59 = v61;
      int v62 = *(char *)(v60 + 23);
      if (v62 >= 0) {
        __darwin_ct_rune_t v63 = (const std::string::value_type *)v60;
      }
      else {
        __darwin_ct_rune_t v63 = v59;
      }
      if (v62 >= 0) {
        std::string::size_type v64 = *(unsigned __int8 *)(v60 + 23);
      }
      else {
        std::string::size_type v64 = *(void *)(v60 + 8);
      }
      __darwin_ct_rune_t v65 = std::string::append((std::string *)&a43, v63, v64);
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      *(void *)(v45 - 208) = *((void *)&v65->__r_.__value_.__l + 2);
      *(_OWORD *)(v45 - 224) = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      __darwin_ct_rune_t v67 = std::string::append((std::string *)(v45 - 224), "'. Exception: ");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      a16 = v67->__r_.__value_.__r.__words[2];
      a15 = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      uint64_t v69 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v48 + 16))(v48);
      __darwin_ct_rune_t v70 = std::string::append((std::string *)&a15, v69);
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      a28 = v70->__r_.__value_.__r.__words[2];
      __pa = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      int v72 = (void *)sub_2F404((uint64_t)exception, &__pa);
    }
    if (*(char *)(v45 - 177) < 0)
    {
      operator delete(*(void **)(v45 - 200));
      if ((*(char *)(v45 - 153) & 0x80000000) == 0)
      {
LABEL_29:
        if ((*(char *)(v45 - 129) & 0x80000000) == 0) {
LABEL_34:
        }
          _Unwind_Resume(a1);
LABEL_33:
        operator delete(*(void **)(v45 - 152));
        _Unwind_Resume(a1);
      }
    }
    else if ((*(char *)(v45 - 153) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(*(void **)(v45 - 176));
    if ((*(char *)(v45 - 129) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_8:
  operator delete(a31);
  goto LABEL_13;
}

void sub_7E744(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((*(char *)(v61 - 201) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a61 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((*(char *)(v61 - 201) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v61 - 224));
  if ((a61 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a56);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a41 & 0x80000000) == 0)
    {
LABEL_15:
      __cxa_end_catch();
      JUMPOUT(0x7E878);
    }
LABEL_9:
    operator delete(a36);
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a42);
  if ((a41 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  goto LABEL_9;
}

void sub_7E8DC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  char v20 = 14;
  strcpy((char *)__p, "default_region");
  uint64_t v4 = sub_58070(a1, (uint64_t)__p);
  uint64_t v5 = v4;
  if ((v20 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    char v20 = 14;
    strcpy((char *)__p, "default_region");
    BOOL v21 = __p;
    size_t v9 = sub_7EE88(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v21);
    sub_62BDC((uint64_t)(v9 + 40), a1);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  char v20 = 14;
  strcpy((char *)__p, "default_region");
  char v6 = (uint64_t *)sub_55FA4(a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  char v20 = 14;
  strcpy((char *)__p, "default_region");
  BOOL v21 = __p;
  unint64_t v7 = sub_7EE88(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v21);
  sub_62BDC((uint64_t)(v7 + 40), v6);
  if (v20 < 0)
  {
    operator delete(__p[0]);
    uint64_t v8 = a1[2];
    if (!v8) {
      return;
    }
    while (1)
    {
LABEL_14:
      int v10 = *(char *)(v8 + 39);
      if (v10 < 0)
      {
        if (*(void *)(v8 + 24) != 14) {
          goto LABEL_23;
        }
        int v11 = *(uint64_t **)(v8 + 16);
      }
      else
      {
        int v11 = (uint64_t *)(v8 + 16);
        if (v10 != 14) {
          goto LABEL_23;
        }
      }
      uint64_t v12 = *v11;
      uint64_t v13 = *(uint64_t *)((char *)v11 + 6);
      if (v12 != 0x5F746C7561666564 || v13 != 0x6E6F696765725F74)
      {
LABEL_23:
        char v20 = 14;
        strcpy((char *)__p, "default_region");
        BOOL v21 = __p;
        uint64_t v15 = sub_7EE88(a2, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v21);
        BOOL v21 = (void **)(v8 + 16);
        uint64_t v16 = sub_7FCB8(a2, v8 + 16, (uint64_t)&unk_20F06E0, (long long **)&v21);
        if (v16 != (uint64_t *)v15)
        {
          *((_DWORD *)v16 + 18) = *((_DWORD *)v15 + 18);
          sub_5A4DC(v16 + 5, *((uint64_t **)v15 + 7), 0);
        }
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = (void *)(v8 + 16);
        uint64_t v17 = sub_7FCB8(a2, v8 + 16, (uint64_t)&unk_20F06E0, (long long **)__p);
        if (*(_DWORD *)(v8 + 48) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        sub_59234(v17 + 5, *(void *)(v8 + 40));
      }
      uint64_t v8 = *(void *)v8;
      if (!v8) {
        return;
      }
    }
  }
  uint64_t v8 = a1[2];
  if (v8) {
    goto LABEL_14;
  }
}

void sub_7EBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_7EC38(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_7EC38(uint64_t a1)
{
  sub_80150(a1, *(char **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_7EC74(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v4 == v5)
  {
    switch(v4)
    {
      case 0:
        std::string::operator=(*(std::string **)a1, *(const std::string **)a2);
        return a1;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t result = a1;
        break;
      case 2:
        uint64_t v8 = *(const std::string **)a2;
        size_t v9 = *(std::string **)a1;
        if (*(void *)a1 != *(void *)a2)
        {
          LODWORD(v9[1].__r_.__value_.__r.__words[1]) = v8[1].__r_.__value_.__r.__words[1];
          sub_5A4DC(v9, (uint64_t *)v8->__r_.__value_.__r.__words[2], 0);
        }
        return a1;
      case 3:
        if (*(void *)a1 != *(void *)a2) {
          sub_5B1F0(*(uint64_t **)a1, **(void **)a2, *(void *)(*(void *)a2 + 8), (uint64_t)(*(void *)(*(void *)a2 + 8) - **(void **)a2) >> 4);
        }
        return a1;
      default:
        return a1;
    }
    return result;
  }
  switch(v4)
  {
    case 3:
      sub_5543C((void ***)a1);
LABEL_14:
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      break;
    case 2:
      sub_55370((uint64_t *)a1, 0);
      goto LABEL_14;
    case 0:
      char v6 = *(std::string **)a1;
      *(void *)a1 = 0;
      if (v6)
      {
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v6->__r_.__value_.__l.__data_);
        }
        operator delete();
      }
      goto LABEL_14;
  }
  if (v5 == 1)
  {
    *(void *)a1 = *(void *)a2;
  }
  else
  {
    if (!v5) {
      operator new();
    }
    sub_5B860(v5);
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

void sub_7EE50()
{
}

unsigned __int8 *sub_7EE88(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  char v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    size_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          char v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x50uLL);
  uint64_t v45 = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)uint64_t v27 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_DWORD *)v15 + 18) = 1065353216;
  char v46 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    size_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        size_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        size_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      size_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  *uint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    size_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_7F2B4(_Unwind_Exception *a1)
{
  sub_7F2D4(v2, v1);
  _Unwind_Resume(a1);
}

void sub_7F2D4(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v3 = (char *)*((void *)__p + 7);
    if (v3)
    {
      do
      {
        char v6 = *(char **)v3;
        sub_57AC8((uint64_t *)v3 + 5);
        if (v3[39] < 0) {
          operator delete(*((void **)v3 + 2));
        }
        operator delete(v3);
        BOOL v3 = v6;
      }
      while (v6);
    }
    unint64_t v4 = (void *)*((void *)__p + 5);
    *((void *)__p + 5) = 0;
    if (v4) {
      operator delete(v4);
    }
    if (__p[39] < 0)
    {
      operator delete(*((void **)__p + 2));
      uint64_t v5 = __p;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v5 = __p;
LABEL_8:
    operator delete(v5);
    return;
  }
  if (__p) {
    goto LABEL_6;
  }
}

uint64_t *sub_7F3A8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_7F5D8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_7F808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x8_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v44, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int8x8_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v27 = operator new(0x50uLL);
  long long v28 = v27;
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  void *v27 = 0;
  v27[1] = v12;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v27 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    v27[4] = *(void *)(a3 + 16);
  }
  sub_54214((uint64_t)(v28 + 5), a4);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v33 = 1;
    if (v13 >= 3) {
      BOOL v33 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v13);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v41 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        size_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        size_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v12;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v12));
      size_t v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v42 >= v13) {
          v42 %= v13;
        }
      }
      else
      {
        v42 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
  size_t v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  *uint64_t v31 = v44[0];
LABEL_92:
  uint64_t v16 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_7FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_7F2D4(v10, v11);
  _Unwind_Resume(a1);
}

uint64_t *sub_7FCB8(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint8x8_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = v26 + 16;
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        size_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        size_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      size_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  size_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_80118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  sub_7F2D4(v10, v11);
  _Unwind_Resume(a1);
}

void sub_80150(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      BOOL v3 = *(char **)v2;
      unint64_t v4 = (char *)*((void *)v2 + 7);
      if (v4)
      {
        do
        {
          unint64_t v6 = *(char **)v4;
          sub_57AC8((uint64_t *)v4 + 5);
          if (v4[39] < 0) {
            operator delete(*((void **)v4 + 2));
          }
          operator delete(v4);
          unint64_t v4 = v6;
        }
        while (v6);
      }
      unint64_t v5 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_801F4(uint64_t a1, long long *a2, long long *a3, __n128 *a4, long long *a5, uint64_t a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  long long v221 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&v219, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v219 = *a3;
    uint64_t v220 = *((void *)a3 + 2);
  }
  __n128 v217 = *a4;
  unint64_t v218 = a4[1].n128_u64[0];
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  v209 = (uint64_t *)(a1 + 48);
  __n128 v11 = sub_289554(a1 + 48, (uint64_t)&v221, &v219, &v217);
  if (SHIBYTE(v218) < 0)
  {
    operator delete((void *)v217.n128_u64[0]);
    if ((SHIBYTE(v220) & 0x80000000) == 0)
    {
LABEL_6:
      unint64_t v12 = (std::__shared_weak_count *)*((void *)&v221 + 1);
      if (!*((void *)&v221 + 1)) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v220) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete((void *)v219);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)&v221 + 1);
  if (!*((void *)&v221 + 1)) {
    goto LABEL_12;
  }
LABEL_10:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  *(_OWORD *)(a1 + 136) = 0u;
  uint64_t v13 = a1 + 136;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_DWORD *)(v13 + 32) = 1065353216;
  *(_OWORD *)(v13 + 40) = 0u;
  uint64_t v14 = v13 + 40;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_DWORD *)(v13 + 72) = 1065353216;
  *(void *)(v13 + 80) = 850045863;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(void *)(v13 + 136) = 0;
  long long v15 = *a3;
  *(void *)(v13 + 160) = *((void *)a3 + 2);
  *(_OWORD *)(v13 + 144) = v15;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v16 = *a5;
  *(void *)(v13 + 184) = *((void *)a5 + 2);
  *(_OWORD *)(v13 + 168) = v16;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  v206 = (void **)(v13 + 192);
  uint64_t v204 = v13 + 144;
  v205 = (void **)(v13 + 216);
  *(_OWORD *)(v13 + 240) = 0u;
  *(_OWORD *)(v13 + 256) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_DWORD *)(v13 + 272) = 1065353216;
  *(void *)(v13 + 288) = 0;
  *(void *)(v13 + 296) = 0;
  *(void *)(v13 + 280) = 0;
  *(unsigned char *)(a1 + 440) = sub_7C710(a6);
  uint64_t v17 = *(unsigned char **)(a1 + 328);
  if (*(void *)(a1 + 344) - (void)v17 > 2uLL) {
    goto LABEL_33;
  }
  unint64_t v18 = *(unsigned char **)(a1 + 336);
  uint64_t v19 = operator new(3uLL);
  unint64_t v20 = v18 - v17;
  uint64_t v21 = &v19[v18 - v17];
  uint64_t v22 = v21;
  if (v18 != v17)
  {
    if (v20 < 8)
    {
      uint64_t v23 = &v19[v18 - v17];
      goto LABEL_28;
    }
    uint64_t v23 = &v19[v18 - v17];
    if ((unint64_t)(v17 - v19) >= 0x20)
    {
      if (v20 < 0x20)
      {
        unint64_t v24 = 0;
        goto LABEL_23;
      }
      unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v25 = (long long *)(v18 - 16);
      uint64_t v26 = &v19[v18 - 16 - v17];
      unint64_t v27 = v20 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *uint64_t v26 = v28;
        v26 -= 2;
        v25 -= 2;
        v27 -= 32;
      }
      while (v27);
      if (v20 == v24) {
        goto LABEL_30;
      }
      if ((v20 & 0x18) != 0)
      {
LABEL_23:
        uint64_t v23 = &v21[-(v20 & 0xFFFFFFFFFFFFFFF8)];
        long long v29 = &v18[-v24 - 8];
        int64_t v30 = v29 - v17;
        unint64_t v31 = v24 - (v20 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v32 = *(void *)v29;
          v29 -= 8;
          *(void *)&v19[v30] = v32;
          v30 -= 8;
          v31 += 8;
        }
        while (v31);
        v18 -= v20 & 0xFFFFFFFFFFFFFFF8;
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_30;
        }
        goto LABEL_28;
      }
      uint64_t v23 = &v21[-v24];
      v18 -= v24;
    }
LABEL_28:
    BOOL v33 = v23 - 1;
    do
    {
      char v34 = *--v18;
      *v33-- = v34;
    }
    while (v18 != v17);
LABEL_30:
    uint64_t v22 = v19;
  }
  *(void *)(a1 + 328) = v22;
  *(void *)(a1 + 336) = v21;
  *(void *)(a1 + 344) = v19 + 3;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  if (!sub_28959C(v209, 1)) {
    goto LABEL_70;
  }
  unint64_t v36 = *(unsigned char **)(a1 + 336);
  unint64_t v35 = *(void *)(a1 + 344);
  if ((unint64_t)v36 >= v35)
  {
    int8x8_t v38 = *v206;
    unint64_t v39 = v36 - (unsigned char *)*v206;
    unint64_t v40 = v39 + 1;
    if ((uint64_t)(v39 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v41 = v35 - (void)v38;
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v42 = v40;
    }
    if (v42) {
      unint64_t v43 = (char *)operator new(v42);
    }
    else {
      unint64_t v43 = 0;
    }
    uint64_t v44 = &v43[v39];
    v43[v39] = 1;
    uint64_t v37 = (uint64_t)&v43[v39 + 1];
    if (v36 == v38) {
      goto LABEL_62;
    }
    if (v39 >= 8 && (unint64_t)(v38 - v43) >= 0x20)
    {
      if (v39 < 0x20)
      {
        unint64_t v45 = 0;
        goto LABEL_54;
      }
      unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFE0;
      char v46 = (long long *)(v36 - 16);
      __darwin_ct_rune_t v47 = &v43[v36 - 16 - v38];
      unint64_t v48 = v39 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v49 = *v46;
        *((_OWORD *)v47 - 1) = *(v46 - 1);
        *(_OWORD *)__darwin_ct_rune_t v47 = v49;
        v47 -= 32;
        v46 -= 2;
        v48 -= 32;
      }
      while (v48);
      if (v39 == v45) {
        goto LABEL_61;
      }
      if ((v39 & 0x18) != 0)
      {
LABEL_54:
        v44 -= v39 & 0xFFFFFFFFFFFFFFF8;
        __darwin_ct_rune_t v50 = &v36[-v45 - 8];
        int64_t v51 = v50 - v38;
        unint64_t v52 = v45 - (v39 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v53 = *(void *)v50;
          v50 -= 8;
          *(void *)&v43[v51] = v53;
          v51 -= 8;
          v52 += 8;
        }
        while (v52);
        v36 -= v39 & 0xFFFFFFFFFFFFFFF8;
        if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
      v44 -= v45;
      v36 -= v45;
    }
LABEL_59:
    std::string::size_type v54 = v44 - 1;
    do
    {
      char v55 = *--v36;
      *v54-- = v55;
    }
    while (v36 != v38);
LABEL_61:
    uint64_t v44 = v43;
LABEL_62:
    *(void *)(a1 + 328) = v44;
    *(void *)(a1 + 336) = v37;
    *(void *)(a1 + 344) = &v43[v42];
    if (v38) {
      operator delete(v38);
    }
    goto LABEL_64;
  }
  *unint64_t v36 = 1;
  uint64_t v37 = (uint64_t)(v36 + 1);
LABEL_64:
  *(void *)(a1 + 336) = v37;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__dst);
    sub_188FC78(__dst, (uint64_t)"Using FB config layer as configuration source.", 46);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_70:
  if (!sub_28959C(v209, 0) || *(unsigned char *)(a1 + 440))
  {
    if (!sub_28959C(v209, 2)) {
      goto LABEL_178;
    }
    long long v57 = *(unsigned char **)(a1 + 336);
    unint64_t v56 = *(void *)(a1 + 344);
    if ((unint64_t)v57 < v56)
    {
      *long long v57 = 2;
      uint64_t v58 = (uint64_t)(v57 + 1);
LABEL_127:
      *(void *)(a1 + 336) = v58;
      if (!sub_723EC(2u)) {
        goto LABEL_178;
      }
      sub_6BAC((uint64_t)__dst);
      sub_188FC78(__dst, (uint64_t)"Using FB config file as configuration source.", 45);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      goto LABEL_173;
    }
    __darwin_ct_rune_t v59 = *v206;
    unint64_t v60 = v57 - (unsigned char *)*v206;
    unint64_t v61 = v60 + 1;
    if ((uint64_t)(v60 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v62 = v56 - (void)v59;
    if (2 * v62 > v61) {
      unint64_t v61 = 2 * v62;
    }
    if (v62 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v63 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v63 = v61;
    }
    if (v63) {
      std::string::size_type v64 = (char *)operator new(v63);
    }
    else {
      std::string::size_type v64 = 0;
    }
    long long v76 = &v64[v60];
    v64[v60] = 2;
    uint64_t v58 = (uint64_t)&v64[v60 + 1];
    if (v57 == v59)
    {
LABEL_125:
      *(void *)(a1 + 328) = v76;
      *(void *)(a1 + 336) = v58;
      *(void *)(a1 + 344) = &v64[v63];
      if (v59) {
        operator delete(v59);
      }
      goto LABEL_127;
    }
    if (v60 >= 8 && (unint64_t)(v59 - v64) >= 0x20)
    {
      if (v60 < 0x20)
      {
        unint64_t v77 = 0;
        goto LABEL_109;
      }
      unint64_t v77 = v60 & 0xFFFFFFFFFFFFFFE0;
      std::string v79 = (long long *)(v57 - 16);
      std::string v80 = &v64[v57 - 16 - v59];
      unint64_t v81 = v60 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v82 = *v79;
        *((_OWORD *)v80 - 1) = *(v79 - 1);
        *(_OWORD *)std::string v80 = v82;
        v80 -= 32;
        v79 -= 2;
        v81 -= 32;
      }
      while (v81);
      if (v60 == v77) {
        goto LABEL_124;
      }
      if ((v60 & 0x18) != 0)
      {
LABEL_109:
        v76 -= v60 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v83 = &v57[-v77 - 8];
        int64_t v84 = v83 - v59;
        unint64_t v85 = v77 - (v60 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v86 = *(void *)v83;
          v83 -= 8;
          *(void *)&v64[v84] = v86;
          v84 -= 8;
          v85 += 8;
        }
        while (v85);
        v57 -= v60 & 0xFFFFFFFFFFFFFFF8;
        if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_124;
        }
        goto LABEL_122;
      }
      v76 -= v77;
      v57 -= v77;
    }
LABEL_122:
    unint64_t v95 = v76 - 1;
    do
    {
      char v96 = *--v57;
      *v95-- = v96;
    }
    while (v57 != v59);
LABEL_124:
    long long v76 = v64;
    goto LABEL_125;
  }
  long long v66 = *(unsigned char **)(a1 + 360);
  unint64_t v65 = *(void *)(a1 + 368);
  if ((unint64_t)v66 < v65)
  {
    *long long v66 = 0;
    uint64_t v67 = (uint64_t)(v66 + 1);
    goto LABEL_135;
  }
  long long v68 = *v205;
  unint64_t v69 = v66 - (unsigned char *)*v205;
  unint64_t v70 = v69 + 1;
  if ((uint64_t)(v69 + 1) < 0) {
    sub_2E00();
  }
  unint64_t v71 = v65 - (void)v68;
  if (2 * v71 > v70) {
    unint64_t v70 = 2 * v71;
  }
  if (v71 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v72 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v72 = v70;
  }
  if (!v72)
  {
    __darwin_ct_rune_t v73 = 0;
    uint64_t v74 = (char *)(v66 - (unsigned char *)*v205);
    __darwin_ct_rune_t v75 = 0;
    *(unsigned char *)unint64_t v69 = 0;
    uint64_t v67 = v69 + 1;
    if (v66 == v68) {
      goto LABEL_133;
    }
LABEL_101:
    if (v69 >= 8 && (unint64_t)(v68 - v73) >= 0x20)
    {
      if (v69 < 0x20)
      {
        unint64_t v78 = 0;
        goto LABEL_117;
      }
      unint64_t v78 = v69 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v87 = (long long *)(v66 - 16);
      size_t v88 = &v73[v66 - 16 - v68];
      unint64_t v89 = v69 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v90 = *v87;
        *((_OWORD *)v88 - 1) = *(v87 - 1);
        *(_OWORD *)size_t v88 = v90;
        v88 -= 32;
        v87 -= 2;
        v89 -= 32;
      }
      while (v89);
      if (v69 == v78) {
        goto LABEL_132;
      }
      if ((v69 & 0x18) != 0)
      {
LABEL_117:
        v74 -= v69 & 0xFFFFFFFFFFFFFFF8;
        unsigned __int8 v91 = &v66[-v78 - 8];
        int64_t v92 = v91 - v68;
        unint64_t v93 = v78 - (v69 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v94 = *(void *)v91;
          v91 -= 8;
          *(void *)&v73[v92] = v94;
          v92 -= 8;
          v93 += 8;
        }
        while (v93);
        v66 -= v69 & 0xFFFFFFFFFFFFFFF8;
        if (v69 == (v69 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_132;
        }
        goto LABEL_130;
      }
      v74 -= v78;
      v66 -= v78;
    }
LABEL_130:
    double v97 = v74 - 1;
    do
    {
      char v98 = *--v66;
      *v97-- = v98;
    }
    while (v66 != v68);
LABEL_132:
    uint64_t v74 = v73;
    goto LABEL_133;
  }
  __darwin_ct_rune_t v73 = (char *)operator new(v72);
  uint64_t v74 = &v73[v69];
  __darwin_ct_rune_t v75 = &v73[v72];
  v73[v69] = 0;
  uint64_t v67 = (uint64_t)&v73[v69 + 1];
  if (v66 != v68) {
    goto LABEL_101;
  }
LABEL_133:
  *(void *)(a1 + 352) = v74;
  *(void *)(a1 + 360) = v67;
  *(void *)(a1 + 368) = v75;
  if (v68) {
    operator delete(v68);
  }
LABEL_135:
  *(void *)(a1 + 360) = v67;
  uint64_t v100 = *(unsigned char **)(a1 + 336);
  unint64_t v99 = *(void *)(a1 + 344);
  if ((unint64_t)v100 < v99)
  {
    *uint64_t v100 = 0;
    uint64_t v101 = (uint64_t)(v100 + 1);
    goto LABEL_165;
  }
  unint64_t v102 = *v206;
  unint64_t v103 = v100 - (unsigned char *)*v206;
  unint64_t v104 = v103 + 1;
  if ((uint64_t)(v103 + 1) < 0) {
    sub_2E00();
  }
  unint64_t v105 = v99 - (void)v102;
  if (2 * v105 > v104) {
    unint64_t v104 = 2 * v105;
  }
  if (v105 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v106 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v106 = v104;
  }
  if (!v106)
  {
    double v107 = 0;
    unint64_t v108 = (char *)(v100 - (unsigned char *)*v206);
    uint64_t v109 = 0;
    *(unsigned char *)unint64_t v103 = 0;
    uint64_t v101 = v103 + 1;
    if (v100 == v102) {
      goto LABEL_163;
    }
LABEL_147:
    if (v103 >= 8 && (unint64_t)(v102 - v107) >= 0x20)
    {
      if (v103 < 0x20)
      {
        unint64_t v110 = 0;
        goto LABEL_155;
      }
      unint64_t v110 = v103 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v111 = (long long *)(v100 - 16);
      uint64_t v112 = &v107[v100 - 16 - v102];
      unint64_t v113 = v103 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v114 = *v111;
        *((_OWORD *)v112 - 1) = *(v111 - 1);
        *(_OWORD *)uint64_t v112 = v114;
        v112 -= 32;
        v111 -= 2;
        v113 -= 32;
      }
      while (v113);
      if (v103 == v110) {
        goto LABEL_162;
      }
      if ((v103 & 0x18) != 0)
      {
LABEL_155:
        v108 -= v103 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v115 = &v100[-v110 - 8];
        int64_t v116 = v115 - v102;
        unint64_t v117 = v110 - (v103 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v118 = *(void *)v115;
          v115 -= 8;
          *(void *)&v107[v116] = v118;
          v116 -= 8;
          v117 += 8;
        }
        while (v117);
        v100 -= v103 & 0xFFFFFFFFFFFFFFF8;
        if (v103 == (v103 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_162;
        }
        goto LABEL_160;
      }
      v108 -= v110;
      v100 -= v110;
    }
LABEL_160:
    unsigned int v119 = v108 - 1;
    do
    {
      char v120 = *--v100;
      *v119-- = v120;
    }
    while (v100 != v102);
LABEL_162:
    unint64_t v108 = v107;
    goto LABEL_163;
  }
  double v107 = (char *)operator new(v106);
  unint64_t v108 = &v107[v103];
  uint64_t v109 = &v107[v106];
  v107[v103] = 0;
  uint64_t v101 = (uint64_t)&v107[v103 + 1];
  if (v100 != v102) {
    goto LABEL_147;
  }
LABEL_163:
  *(void *)(a1 + 328) = v108;
  *(void *)(a1 + 336) = v101;
  *(void *)(a1 + 344) = v109;
  if (v102) {
    operator delete(v102);
  }
LABEL_165:
  *(void *)(a1 + 336) = v101;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__dst);
    sub_188FC78(__dst, (uint64_t)"Using JSON files as configuration source.", 41);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__dst);
    sub_188FC78(__dst, (uint64_t)"Using JSON files as EV configuration source.", 44);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
LABEL_173:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_178:
  uint64_t v121 = a1;
  if (*(void *)(a1 + 328) == *(void *)(a1 + 336))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__dst, "No configuration source has configuration data available.");
    v203 = (void *)sub_2F404((uint64_t)exception, __dst);
  }
  if (*(unsigned char *)(a1 + 440)) {
    goto LABEL_231;
  }
  if ((sub_28959C(v209, 0) & 1) == 0 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__dst);
    unint64_t v122 = sub_188FC78(__dst, (uint64_t)"No valid JSON root directory provided (", 39);
    char v123 = *(unsigned char *)(a1 + 303);
    if (v123 >= 0) {
      uint64_t v124 = v204;
    }
    else {
      uint64_t v124 = *(void *)(a1 + 280);
    }
    if (v123 >= 0) {
      uint64_t v125 = *(unsigned __int8 *)(a1 + 303);
    }
    else {
      uint64_t v125 = *(void *)(a1 + 288);
    }
    unsigned int v126 = sub_188FC78(v122, v124, v125);
    sub_188FC78(v126, (uint64_t)"). Continuing with FB config layer/file.", 40);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v121 = a1;
  if (*(unsigned char *)(a1 + 440)) {
    goto LABEL_231;
  }
  int v127 = sub_28959C(v209, 3);
  uint64_t v121 = a1;
  if (!v127) {
    goto LABEL_231;
  }
  double v129 = *(unsigned char **)(a1 + 360);
  unint64_t v128 = *(void *)(a1 + 368);
  if ((unint64_t)v129 >= v128)
  {
    uint64_t v131 = *v205;
    unint64_t v132 = v129 - (unsigned char *)*v205;
    unint64_t v133 = v132 + 1;
    if ((uint64_t)(v132 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v134 = v128 - (void)v131;
    if (2 * v134 > v133) {
      unint64_t v133 = 2 * v134;
    }
    if (v134 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v135 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v135 = v133;
    }
    if (v135) {
      v136 = (char *)operator new(v135);
    }
    else {
      v136 = 0;
    }
    v137 = &v136[v132];
    v136[v132] = 3;
    uint64_t v130 = (uint64_t)&v136[v132 + 1];
    if (v129 == v131) {
      goto LABEL_223;
    }
    if (v132 >= 8 && (unint64_t)(v131 - v136) >= 0x20)
    {
      if (v132 < 0x20)
      {
        unint64_t v138 = 0;
        goto LABEL_215;
      }
      unint64_t v138 = v132 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v139 = (long long *)(v129 - 16);
      int v140 = &v136[v129 - 16 - v131];
      unint64_t v141 = v132 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v142 = *v139;
        *((_OWORD *)v140 - 1) = *(v139 - 1);
        *(_OWORD *)int v140 = v142;
        v140 -= 32;
        v139 -= 2;
        v141 -= 32;
      }
      while (v141);
      if (v132 == v138) {
        goto LABEL_222;
      }
      if ((v132 & 0x18) != 0)
      {
LABEL_215:
        v137 -= v132 & 0xFFFFFFFFFFFFFFF8;
        v143 = &v129[-v138 - 8];
        int64_t v144 = v143 - v131;
        unint64_t v145 = v138 - (v132 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v146 = *(void *)v143;
          v143 -= 8;
          *(void *)&v136[v144] = v146;
          v144 -= 8;
          v145 += 8;
        }
        while (v145);
        v129 -= v132 & 0xFFFFFFFFFFFFFFF8;
        if (v132 == (v132 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_222;
        }
        goto LABEL_220;
      }
      v137 -= v138;
      v129 -= v138;
    }
LABEL_220:
    v147 = v137 - 1;
    do
    {
      char v148 = *--v129;
      *v147-- = v148;
    }
    while (v129 != v131);
LABEL_222:
    v137 = v136;
LABEL_223:
    *(void *)(a1 + 352) = v137;
    *(void *)(a1 + 360) = v130;
    *(void *)(a1 + 368) = &v136[v135];
    if (v131) {
      operator delete(v131);
    }
    goto LABEL_225;
  }
  *double v129 = 3;
  uint64_t v130 = (uint64_t)(v129 + 1);
LABEL_225:
  *(void *)(a1 + 360) = v130;
  BOOL v149 = sub_723EC(2u);
  uint64_t v121 = a1;
  if (v149)
  {
    sub_6BAC((uint64_t)__dst);
    sub_188FC78(__dst, (uint64_t)"Using FB EVModelLayer as source.", 32);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    uint64_t v121 = a1;
  }
LABEL_231:
  uint64_t v150 = *(void *)(v121 + 336);
  uint64_t v208 = *(void *)(v121 + 328);
  if (v150 == v208) {
    goto LABEL_273;
  }
  while (2)
  {
    int v152 = *(unsigned __int8 *)--v150;
    sub_28B0EC((uint64_t)v209, v152, &__p);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v154 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_268;
      }
      goto LABEL_235;
    }
    do
    {
      int v155 = *(char *)(v154 + 23);
      BOOL v156 = v155 < 0;
      std::string::size_type v158 = *(void *)v154;
      unint64_t v157 = *(void *)(v154 + 8);
      if (v155 >= 0) {
        std::string::size_type v159 = v154;
      }
      else {
        std::string::size_type v159 = *(void *)v154;
      }
      unint64_t v160 = *(unsigned __int8 *)(v154 + 23);
      if (v156) {
        uint64_t v161 = *(void *)(v154 + 8);
      }
      else {
        uint64_t v161 = *(unsigned __int8 *)(v154 + 23);
      }
      std::string::size_type v162 = v159 - 1;
      while (v161)
      {
        int v163 = *(unsigned __int8 *)(v162 + v161--);
        if (v163 == 47)
        {
          unint64_t v164 = v161 + 1;
          if ((v160 & 0x80) != 0) {
            goto LABEL_250;
          }
LABEL_253:
          unint64_t v157 = *(unsigned __int8 *)(v154 + 23);
          std::string::size_type v158 = v154;
          if (v164 <= v160) {
            goto LABEL_254;
          }
LABEL_337:
          sub_5AD0();
        }
      }
      unint64_t v164 = 0;
      if ((v160 & 0x80) == 0) {
        goto LABEL_253;
      }
LABEL_250:
      if (v157 < v164) {
        goto LABEL_337;
      }
LABEL_254:
      unint64_t v165 = v157 - v164;
      if (v165 >= v165 - 5) {
        size_t v166 = v165 - 5;
      }
      else {
        size_t v166 = v165;
      }
      if (v166 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v166 >= 0x17)
      {
        uint64_t v168 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v166 | 7) != 0x17) {
          uint64_t v168 = v166 | 7;
        }
        uint64_t v169 = v168 + 1;
        v167 = (long long *)operator new(v168 + 1);
        *((void *)&__dst[0] + 1) = v166;
        *(void *)&__dst[1] = v169 | 0x8000000000000000;
        *(void *)&__dst[0] = v167;
LABEL_264:
        memmove(v167, (const void *)(v158 + v164), v166);
        goto LABEL_265;
      }
      BYTE7(__dst[1]) = v166;
      v167 = __dst;
      if (v166) {
        goto LABEL_264;
      }
LABEL_265:
      *((unsigned char *)v167 + v166) = 0;
      sub_8713C(v14, v154, v154, v154);
      sub_8713C(v14, (uint64_t)__dst, (uint64_t)__dst, v154);
      if (SBYTE7(__dst[1]) < 0) {
        operator delete(*(void **)&__dst[0]);
      }
      v154 += 24;
    }
    while (v154 != size);
    std::string::size_type v154 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
LABEL_268:
      std::string::size_type v170 = __p.__r_.__value_.__l.__size_;
      uint64_t v151 = (void *)v154;
      if (__p.__r_.__value_.__l.__size_ != v154)
      {
        do
        {
          if (*(char *)(v170 - 1) < 0) {
            operator delete(*(void **)(v170 - 24));
          }
          v170 -= 24;
        }
        while (v170 != v154);
        uint64_t v151 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v154;
      operator delete(v151);
    }
LABEL_235:
    if (v150 != v208) {
      continue;
    }
    break;
  }
LABEL_273:
  *(void *)&__dst[0] = operator new(0x28uLL);
  *(long long *)((char *)__dst + 8) = xmmword_20B9240;
  strcpy(*(char **)&__dst[0], "data/config/StaticConfigProvider.json");
  memset(&__p, 0, sizeof(__p));
  v171 = sub_81C38(a1, (uint64_t)__dst, (uint64_t *)&__p);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "ev_models");
  sub_5C308(v171, (uint64_t)&__p, (uint64_t)__dst);
  v172 = (void *)a1;
  v173 = *(void ***)a1;
  if (*(void *)a1)
  {
    v174 = *(void ***)(a1 + 8);
    v175 = *(void ***)a1;
    if (v174 != v173)
    {
      do
      {
        if (*((char *)v174 - 1) < 0) {
          operator delete(*(v174 - 3));
        }
        v174 -= 3;
      }
      while (v174 != v173);
      v172 = (void *)a1;
      v175 = *(void ***)a1;
    }
    v172[1] = v173;
    operator delete(v175);
    void *v172 = 0;
    v172[1] = 0;
    v172[2] = 0;
  }
  *(_OWORD *)v172 = __dst[0];
  v172[2] = *(void *)&__dst[1];
  memset(__dst, 0, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BYTE7(__dst[1]) = 21;
  strcpy((char *)__dst, "active_internal_modes");
  v176 = (void *)sub_560F4(v171, (uint64_t)__dst);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  uint64_t v177 = *(void *)(a1 + 24);
  uint64_t v178 = *(void *)(a1 + 32);
  v179 = (void **)(a1 + 24);
  while (v178 != v177)
  {
    if (*(char *)(v178 - 1) < 0) {
      operator delete(*(void **)(v178 - 24));
    }
    v178 -= 24;
  }
  *(void *)(a1 + 32) = v177;
  v180 = (std::string *)*(unsigned __int8 *)(a1 + 440);
  if (((_BYTE)v180 - 1) <= 1u)
  {
    BYTE7(__dst[1]) = 7;
    strcpy((char *)__dst, "offline");
    v181 = sub_58070(v176, (uint64_t)__dst);
    v182 = v181;
    if (SBYTE7(__dst[1]) < 0)
    {
      operator delete(*(void **)&__dst[0]);
      if (v182) {
        goto LABEL_295;
      }
    }
    else if (v181)
    {
LABEL_295:
      char v211 = 7;
      strcpy((char *)v210, "offline");
      v183 = sub_58070(v176, (uint64_t)v210);
      if (v183 && !*((_DWORD *)v183 + 12))
      {
        uint64_t v200 = v183[5];
        if (*(char *)(v200 + 23) < 0)
        {
          sub_4200(&__p, *(void **)v200, *(void *)(v200 + 8));
        }
        else
        {
          long long v201 = *(_OWORD *)v200;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v200 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v201;
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v185 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v185 = __p.__r_.__value_.__l.__size_;
      }
      v212[0] = (unsigned __int8 *)p_p;
      v212[1] = (unsigned __int8 *)v185;
      sub_230E8(v212, 0x2Cu, (uint64_t)__dst);
      v186 = (void **)*v179;
      uint64_t v187 = a1;
      if (*v179)
      {
        v188 = *(void ***)(a1 + 32);
        v189 = *v179;
        if (v188 != v186)
        {
          do
          {
            if (*((char *)v188 - 1) < 0) {
              operator delete(*(v188 - 3));
            }
            v188 -= 3;
          }
          while (v188 != v186);
          v189 = *v179;
        }
        uint64_t v187 = a1;
        *(void *)(a1 + 32) = v186;
        operator delete(v189);
        *v179 = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
      }
      *(_OWORD *)(v187 + 24) = __dst[0];
      *(void *)(v187 + 40) = *(void *)&__dst[1];
      memset(__dst, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v211 < 0) {
          goto LABEL_330;
        }
      }
      else if (v211 < 0)
      {
LABEL_330:
        v198 = v210[0];
LABEL_331:
        operator delete(v198);
      }
      goto LABEL_332;
    }
    v180 = (std::string *)*(unsigned __int8 *)(a1 + 440);
  }
  sub_7CCCC(v180, &__p);
  uint64_t v190 = sub_561B0(v176, (uint64_t)&__p);
  int v191 = *(char *)(v190 + 23);
  BOOL v192 = v191 < 0;
  v193 = *(void **)v190;
  if (v191 >= 0) {
    v193 = (void *)v190;
  }
  v194 = (void *)*(unsigned __int8 *)(v190 + 23);
  if (v192) {
    v194 = *(void **)(v190 + 8);
  }
  v210[0] = v193;
  v210[1] = v194;
  sub_230E8((unsigned __int8 **)v210, 0x2Cu, (uint64_t)__dst);
  sub_84F50(v179, *(void *)(a1 + 32), *(std::string **)&__dst[0], *((std::string **)&__dst[0] + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__dst[0] + 1) - *(void *)&__dst[0]) >> 3));
  uint64_t v195 = *(void *)&__dst[0];
  if (*(void *)&__dst[0])
  {
    uint64_t v196 = *((void *)&__dst[0] + 1);
    v197 = *(void **)&__dst[0];
    if (*((void *)&__dst[0] + 1) != *(void *)&__dst[0])
    {
      do
      {
        if (*(char *)(v196 - 1) < 0) {
          operator delete(*(void **)(v196 - 24));
        }
        v196 -= 24;
      }
      while (v196 != v195);
      v197 = *(void **)&__dst[0];
    }
    *((void *)&__dst[0] + 1) = v195;
    operator delete(v197);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v198 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_331;
  }
LABEL_332:
  sub_81D48(a1);
  return a1;
}

void sub_8199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a33);
  a18 = (void *)(a11 + 280);
  sub_84854((void ***)&a18);
  sub_7EC38(a9);
  unint64_t v40 = *a13;
  if (*a13)
  {
    *(void *)(a15 + 360) = v40;
    operator delete(v40);
    unint64_t v41 = *a14;
    if (!*a14)
    {
LABEL_5:
      if (*(char *)(a15 + 327) < 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v41 = *a14;
    if (!*a14) {
      goto LABEL_5;
    }
  }
  *(void *)(a15 + 336) = v41;
  operator delete(v41);
  if (*(char *)(a15 + 327) < 0)
  {
LABEL_6:
    operator delete(*(void **)(a11 + 168));
    if ((*(char *)(a15 + 303) & 0x80000000) == 0)
    {
LABEL_12:
      std::mutex::~mutex(a10);
      sub_50828(v38);
      sub_82C9C(a11);
      sub_82D24(a17);
      sub_82DE8((void **)a15);
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(*a12);
    goto LABEL_12;
  }
LABEL_10:
  if ((*(char *)(a15 + 303) & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t *sub_81C38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = sub_8407C(a1, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (v5 != v6)
  {
    while (!sub_7F3A8(v4, v5))
    {
      v5 += 24;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    int8x8_t v7 = sub_7F3A8(v4, v5);
    if (!v7) {
      sub_5AE8("unordered_map::at: key not found");
    }
    return v7 + 5;
  }
LABEL_4:
  char v10 = 14;
  strcpy((char *)__p, "default_region");
  int8x8_t v7 = sub_7F3A8(v4, (uint64_t)__p);
  if (!v7) {
    sub_5AE8("unordered_map::at: key not found");
  }
  if ((v10 & 0x80000000) == 0) {
    return v7 + 5;
  }
  operator delete(__p[0]);
  return v7 + 5;
}

void sub_81D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_81D48(uint64_t a1)
{
  *(_OWORD *)unint64_t v85 = 0u;
  long long v86 = 0u;
  int v87 = 1065353216;
  uint64_t v1 = *(void *)(a1 + 336);
  uint64_t v81 = *(void *)(a1 + 328);
  uint64_t v82 = a1;
  if (v1 != v81)
  {
    uint64_t v80 = a1 + 48;
    qmemcpy(v79, "al_modesinternal", sizeof(v79));
    while (1)
    {
      int v2 = *(unsigned __int8 *)--v1;
      HIBYTE(__p[2]) = 14;
      __p[0] = (void *)v79[1];
      *(void **)((char *)__p + 6) = (void *)v79[0];
      BYTE6(__p[1]) = 0;
      sub_28A980(v80, (uint64_t)__p, v2, (uint64_t)&v98);
      if (SHIBYTE(__p[2]) < 0) {
        break;
      }
      BOOL v3 = (uint64_t *)v99;
      if ((void)v99) {
        goto LABEL_10;
      }
LABEL_46:
      long long v16 = (void *)v98;
      *(void *)&long long v98 = 0;
      if (v16) {
        operator delete(v16);
      }
      if (v1 == v81)
      {
        unint64_t v24 = *((void *)&v86 + 1);
        goto LABEL_65;
      }
    }
    operator delete(__p[0]);
    BOOL v3 = (uint64_t *)v99;
    if (!(void)v99) {
      goto LABEL_46;
    }
    while (1)
    {
LABEL_10:
      if (*((char *)v3 + 39) < 0)
      {
        unint64_t v8 = (_DWORD *)v3[2];
        unint64_t v9 = v3[3];
        if (v9 == 12 && *(void *)v8 == 0x5F656E696C66666FLL && v8[2] == 1701080941)
        {
LABEL_42:
          HIBYTE(__p[2]) = 16;
          strcpy((char *)__p, "offline_ios_mode");
          goto LABEL_43;
        }
        if (v9 == 18)
        {
          BOOL v11 = *(void *)v8 == 0x5F656E696C66666FLL && *((void *)v8 + 1) == 0x6F6D5F616E696863;
          if (v11 && *((_WORD *)v8 + 8) == 25956)
          {
LABEL_41:
            strcpy((char *)__p, "offline_china_ios_mode");
            HIBYTE(__p[2]) = 22;
            goto LABEL_43;
          }
        }
        sub_4200(__p, v8, v9);
      }
      else
      {
        unint64_t v4 = v3 + 2;
        int v5 = *((unsigned __int8 *)v3 + 39);
        if (v5 == 12)
        {
          if (*v4 == 0x5F656E696C66666FLL && *((_DWORD *)v3 + 6) == 1701080941) {
            goto LABEL_42;
          }
        }
        else if (v5 == 18)
        {
          BOOL v6 = *v4 == 0x5F656E696C66666FLL && v3[3] == 0x6F6D5F616E696863;
          if (v6 && *((_WORD *)v3 + 16) == 25956) {
            goto LABEL_41;
          }
        }
        *(_OWORD *)std::string __p = *(_OWORD *)v4;
        __p[2] = (void *)v3[4];
      }
LABEL_43:
      __dst[0] = __p;
      uint64_t v14 = sub_8681C((uint64_t)v85, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)__dst);
      sub_7D734(v3 + 5, v14 + 5);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      BOOL v3 = (uint64_t *)*v3;
      if (!v3)
      {
        long long v15 = (char *)v99;
        if ((void)v99)
        {
          do
          {
            uint64_t v17 = *(char **)v15;
            unint64_t v18 = (char *)*((void *)v15 + 7);
            if (v18)
            {
              do
              {
                unint64_t v20 = *(char **)v18;
                uint64_t v21 = (char *)*((void *)v18 + 7);
                if (v21)
                {
                  do
                  {
                    uint64_t v23 = *(char **)v21;
                    sub_57AC8((uint64_t *)v21 + 5);
                    if (v21[39] < 0) {
                      operator delete(*((void **)v21 + 2));
                    }
                    operator delete(v21);
                    uint64_t v21 = v23;
                  }
                  while (v23);
                }
                uint64_t v22 = (void *)*((void *)v18 + 5);
                *((void *)v18 + 5) = 0;
                if (v22) {
                  operator delete(v22);
                }
                if (v18[39] < 0) {
                  operator delete(*((void **)v18 + 2));
                }
                operator delete(v18);
                unint64_t v18 = v20;
              }
              while (v20);
            }
            uint64_t v19 = (void *)*((void *)v15 + 5);
            *((void *)v15 + 5) = 0;
            if (v19) {
              operator delete(v19);
            }
            if (v15[39] < 0) {
              operator delete(*((void **)v15 + 2));
            }
            operator delete(v15);
            long long v15 = v17;
          }
          while (v17);
        }
        goto LABEL_46;
      }
    }
  }
  unint64_t v24 = 0;
LABEL_65:
  uint64_t v25 = (int8x8_t *)v82;
  unint64_t prime = vcvtps_u32_f32((float)v24 / *(float *)(v82 + 408));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
    uint64_t v25 = (int8x8_t *)v82;
  }
  uint64_t v27 = (uint64_t)&v25[47];
  int8x8_t v28 = v25[48];
  if (prime > *(void *)&v28) {
    goto LABEL_70;
  }
  if (prime < *(void *)&v28)
  {
    unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(v82 + 400) / *(float *)(v82 + 408));
    if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
    {
      unint64_t v29 = std::__next_prime(v29);
    }
    else
    {
      uint64_t v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2) {
        unint64_t v29 = v31;
      }
    }
    if (prime <= v29) {
      unint64_t prime = v29;
    }
    if (prime < *(void *)&v28) {
LABEL_70:
    }
      sub_B6C0(v27, prime);
  }
  for (uint64_t i = (uint64_t *)v86; i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_4200(__dst, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)long long __dst = *((_OWORD *)i + 1);
      unint64_t v89 = (void *)i[4];
    }
    sub_853C4((uint64_t)v90, (uint64_t)(i + 5));
    char v104 = 14;
    strcpy((char *)v103, "default_region");
    BOOL v33 = sub_7F3A8(v90, (uint64_t)v103);
    if (!v33) {
      sub_5AE8("unordered_map::at: key not found");
    }
    if (SHIBYTE(v89) < 0)
    {
      sub_4200(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)__dst;
      __p[2] = v89;
    }
    sub_54214((uint64_t)&v93, (uint64_t)(v33 + 5));
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    long long v98 = *(_OWORD *)__p;
    memset(__p, 0, sizeof(__p));
    char v34 = v93;
    unint64_t v35 = v94;
    unint64_t v93 = 0;
    unint64_t v94 = 0;
    *(void **)&long long v99 = __p[2];
    *((void *)&v99 + 1) = v34;
    unint64_t v100 = v35;
    v101[0] = v95;
    v101[1] = v96;
    int v102 = v97;
    if (v96)
    {
      unint64_t v36 = *((void *)v95 + 1);
      if ((v35 & (v35 - 1)) != 0)
      {
        if (v36 >= v35) {
          v36 %= v35;
        }
      }
      else
      {
        v36 &= v35 - 1;
      }
      v34[v36] = v101;
      unint64_t v95 = 0;
      uint64_t v96 = 0;
    }
    sub_87650(v27, (uint64_t)&v98, (uint64_t)&v98);
    uint64_t v37 = (char *)v101[0];
    if (v101[0])
    {
      do
      {
        unint64_t v40 = *(char **)v37;
        sub_57AC8((uint64_t *)v37 + 5);
        if (v37[39] < 0) {
          operator delete(*((void **)v37 + 2));
        }
        operator delete(v37);
        uint64_t v37 = v40;
      }
      while (v40);
    }
    uint64_t v38 = (void *)*((void *)&v99 + 1);
    *((void *)&v99 + 1) = 0;
    if (v38) {
      operator delete(v38);
    }
    if (SBYTE7(v99) < 0)
    {
      operator delete((void *)v98);
      unint64_t v39 = v95;
      if (!v95) {
        goto LABEL_109;
      }
    }
    else
    {
      unint64_t v39 = v95;
      if (!v95) {
        goto LABEL_109;
      }
    }
    do
    {
      unint64_t v43 = *(char **)v39;
      sub_57AC8((uint64_t *)v39 + 5);
      if (v39[39] < 0) {
        operator delete(*((void **)v39 + 2));
      }
      operator delete(v39);
      unint64_t v39 = v43;
    }
    while (v43);
LABEL_109:
    unint64_t v41 = v93;
    unint64_t v93 = 0;
    if (v41) {
      operator delete(v41);
    }
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      sub_80150((int)v90, (char *)v91);
      size_t v42 = v90[0];
      v90[0] = 0;
      if (!v42) {
        goto LABEL_114;
      }
LABEL_113:
      operator delete(v42);
      goto LABEL_114;
    }
    sub_80150((int)v90, (char *)v91);
    size_t v42 = v90[0];
    v90[0] = 0;
    if (v42) {
      goto LABEL_113;
    }
LABEL_114:
    if (SHIBYTE(v89) < 0) {
      operator delete(__dst[0]);
    }
  }
  uint64_t v44 = *(long long **)(v82 + 24);
  unint64_t v45 = *(long long **)(v82 + 32);
  if (v44 == v45) {
    goto LABEL_187;
  }
  long long v98 = 0u;
  long long v99 = 0u;
  LODWORD(v100) = 1065353216;
  char v46 = *(void **)(v82 + 392);
  if (!v46) {
    goto LABEL_141;
  }
  do
  {
    __darwin_ct_rune_t v47 = (uint64_t *)v46[7];
    if (v47)
    {
      while (*((_DWORD *)v47 + 12) != 2)
      {
        __darwin_ct_rune_t v47 = (uint64_t *)*v47;
        if (!v47) {
          goto LABEL_124;
        }
      }
      if (*((char *)v47 + 39) < 0)
      {
        sub_4200(v83, (void *)v47[2], v47[3]);
        if (*((_DWORD *)v47 + 12) != 2) {
          goto LABEL_200;
        }
      }
      else
      {
        *(_OWORD *)unsigned int v83 = *((_OWORD *)v47 + 1);
        uint64_t v84 = v47[4];
      }
      unint64_t v48 = (void *)v47[5];
      HIBYTE(v89) = 12;
      strcpy((char *)__dst, "environments");
      long long v49 = sub_58070(v48, (uint64_t)__dst);
      int v50 = *((_DWORD *)v47 + 12);
      if (v49)
      {
        if (v50 != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        int64_t v51 = (void *)v47[5];
        char v104 = 6;
        strcpy((char *)v103, "values");
        unint64_t v52 = sub_58070(v51, (uint64_t)v103);
        if (!v52 || *((_DWORD *)v52 + 12) != 2)
        {
          __darwin_ct_rune_t v73 = __cxa_allocate_exception(0x40uLL);
          std::operator+<char>();
          uint64_t v74 = (void *)sub_2F404((uint64_t)v73, (long long *)__p);
        }
LABEL_139:
        operator new();
      }
      if (v50 == 2) {
        goto LABEL_139;
      }
LABEL_200:
      long long v76 = __cxa_allocate_exception(8uLL);
      *long long v76 = &off_23FDF58;
    }
LABEL_124:
    char v46 = (void *)*v46;
  }
  while (v46);
  uint64_t v44 = *(long long **)(v82 + 24);
  unint64_t v45 = *(long long **)(v82 + 32);
LABEL_141:
  if (v44 != v45)
  {
    uint64_t v53 = (void **)(v82 + 416);
    do
    {
      if (*((char *)v44 + 23) < 0)
      {
        long long v57 = *(void **)v44;
        unint64_t v58 = *((void *)v44 + 1);
        if (v58 != 12
          || (*v57 == 0x5F656E696C66666FLL ? (BOOL v59 = *((unsigned int *)v57 + 2) == 1701080941) : (BOOL v59 = 0), !v59))
        {
          if (v58 != 18
            || (*v57 == 0x5F656E696C66666FLL ? (BOOL v60 = v57[1] == 0x6F6D5F616E696863) : (BOOL v60 = 0),
                v60 ? (BOOL v61 = *((unsigned __int16 *)v57 + 8) == 25956) : (BOOL v61 = 0),
                !v61))
          {
            sub_4200(__p, v57, v58);
            goto LABEL_178;
          }
LABEL_176:
          strcpy((char *)__p, "offline_china_ios_mode");
          HIBYTE(__p[2]) = 22;
          goto LABEL_178;
        }
      }
      else
      {
        int v54 = *((unsigned __int8 *)v44 + 23);
        if (v54 != 12)
        {
          if (v54 != 18) {
            goto LABEL_175;
          }
          BOOL v55 = *(void *)v44 == 0x5F656E696C66666FLL && *((void *)v44 + 1) == 0x6F6D5F616E696863;
          if (!v55 || *((_WORD *)v44 + 8) != 25956) {
            goto LABEL_175;
          }
          goto LABEL_176;
        }
        if (*(void *)v44 != 0x5F656E696C66666FLL || *((_DWORD *)v44 + 2) != 1701080941)
        {
LABEL_175:
          long long v63 = *v44;
          __p[2] = *((void **)v44 + 2);
          *(_OWORD *)std::string __p = v63;
          goto LABEL_178;
        }
      }
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "offline_ios_mode");
LABEL_178:
      if (!sub_58070(&v98, (uint64_t)__p))
      {
        unint64_t v77 = __cxa_allocate_exception(0x40uLL);
        sub_8466C("Could not find internal mode ", (uint64_t)__p, " for patching static configurations.");
        unint64_t v78 = (void *)sub_2F404((uint64_t)v77, (long long *)__dst);
      }
      uint64_t v64 = sub_560F4(&v98, (uint64_t)__p);
      unint64_t v65 = *(void *)(v82 + 424);
      if (v65 >= *(void *)(v82 + 432))
      {
        *(void *)(v82 + 424) = sub_87B7C(v53, v64);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else
      {
        sub_54214(*(void *)(v82 + 424), v64);
        *(void *)(v82 + 424) = v65 + 40;
        *(void *)(v82 + 424) = v65 + 40;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      operator delete(__p[0]);
LABEL_144:
      uint64_t v44 = (long long *)((char *)v44 + 24);
    }
    while (v44 != v45);
  }
  long long v66 = (char *)v99;
  if ((void)v99)
  {
    do
    {
      size_t v72 = *(char **)v66;
      sub_57AC8((uint64_t *)v66 + 5);
      if (v66[39] < 0) {
        operator delete(*((void **)v66 + 2));
      }
      operator delete(v66);
      long long v66 = v72;
    }
    while (v72);
  }
  uint64_t v67 = (void *)v98;
  *(void *)&long long v98 = 0;
  if (v67) {
    operator delete(v67);
  }
LABEL_187:
  long long v68 = (char *)v86;
  if ((void)v86)
  {
    do
    {
      unint64_t v70 = *(char **)v68;
      sub_80150(v68 + 40, *((char **)v68 + 7));
      unint64_t v71 = (void *)*((void *)v68 + 5);
      *((void *)v68 + 5) = 0;
      if (v71) {
        operator delete(v71);
      }
      if (v68[39] < 0) {
        operator delete(*((void **)v68 + 2));
      }
      operator delete(v68);
      long long v68 = v70;
    }
    while (v70);
  }
  unint64_t v69 = v85[0];
  v85[0] = 0;
  if (v69) {
    operator delete(v69);
  }
}

void sub_829B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_82C9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_829CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44)
{
  sub_5450C(v44 - 208);
  sub_82C9C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_82B84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 121) < 0) {
    operator delete(*(void **)(v44 - 144));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    JUMPOUT(0x82C44);
  }
  JUMPOUT(0x82C48);
}

void sub_82C60(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0x82C94);
}

void sub_82C70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_82C9C(v38 - 208);
  JUMPOUT(0x82C8CLL);
}

uint64_t sub_82C9C(uint64_t a1)
{
  int v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v5 = *(char **)v2;
      sub_80150(v2 + 40, *((char **)v2 + 7));
      BOOL v6 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6) {
        operator delete(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  BOOL v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_82D24(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 16));
      int v2 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v2) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2) {
    return a1;
  }
LABEL_9:
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void **sub_82DE8(void **a1)
{
  int v2 = (void **)a1[3];
  if (v2)
  {
    BOOL v3 = (void **)a1[4];
    unint64_t v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      unint64_t v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  int v5 = (void **)*a1;
  if (*a1)
  {
    BOOL v6 = (void **)a1[1];
    int8x8_t v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      int8x8_t v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_82EA4(std::string *__str@<X3>, long long *a2@<X0>, uint64_t **a3@<X1>, long long *a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*((char *)a4 + 23) < 0)
  {
    if (*((void *)a4 + 1))
    {
      sub_4200(&__dst, *(void **)a4, *((void *)a4 + 1));
      memset(&v30, 0, sizeof(v30));
      memset(&v29, 0, sizeof(v29));
      BOOL v11 = *a3;
      if (!*a3) {
        goto LABEL_40;
      }
      goto LABEL_10;
    }
  }
  else if (*((unsigned char *)a4 + 23))
  {
    long long __dst = *a4;
    std::string::size_type v32 = *((void *)a4 + 2);
    memset(&v30, 0, sizeof(v30));
    memset(&v29, 0, sizeof(v29));
    BOOL v11 = *a3;
    if (!*a3) {
      goto LABEL_40;
    }
    goto LABEL_10;
  }
  sub_67A88((char *)__p);
  unint64_t v12 = std::string::append(__p, "/etc/");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v12->__r_.__value_.__r.__words[2];
  long long __dst = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    memset(&v30, 0, sizeof(v30));
    memset(&v29, 0, sizeof(v29));
    BOOL v11 = *a3;
    if (!*a3) {
      goto LABEL_40;
    }
  }
  else
  {
    memset(&v30, 0, sizeof(v30));
    memset(&v29, 0, sizeof(v29));
    BOOL v11 = *a3;
    if (!*a3) {
      goto LABEL_40;
    }
  }
LABEL_10:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 21;
  strcpy((char *)__p, "json_config_root_path");
  sub_84928(v11, (uint64_t)__p, (uint64_t)&v28);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
LABEL_12:
  std::string v30 = v28;
  uint64_t v14 = *a3;
  strcpy((char *)__p, "localization_root_path");
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 22;
  sub_84928(v14, (uint64_t)__p, (uint64_t)&v28);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string v29 = v28;
  if (!sub_69598((const char *)&v30)) {
    goto LABEL_25;
  }
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) != 1 || v30.__r_.__value_.__s.__data_[0] != 47) {
      goto LABEL_40;
    }
LABEL_25:
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      long long v15 = sub_188FC78(__p, (uint64_t)"Invalid JSON root directory provided via service config (", 57);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v16 = &v30;
      }
      else {
        long long v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v30.__r_.__value_.__l.__size_;
      }
      unint64_t v18 = sub_188FC78(v15, (uint64_t)v16, size);
      sub_188FC78(v18, (uint64_t)"). Falling back to project defaults for JSON root dir and localization root dir.", 80);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v28, 1u);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
      if (v27 < 0) {
        operator delete(v26);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      *v30.__r_.__value_.__l.__data_ = 0;
      v30.__r_.__value_.__l.__size_ = 0;
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v30.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v30.__r_.__value_.__s + 23) = 0;
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_39:
        v29.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v29.__r_.__value_.__s + 23) = 0;
        goto LABEL_40;
      }
    }
    *v29.__r_.__value_.__l.__data_ = 0;
    v29.__r_.__value_.__l.__size_ = 0;
    std::string::size_type v20 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v20 = v30.__r_.__value_.__l.__size_;
    }
    if (!v20) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
  if (v30.__r_.__value_.__l.__size_ == 1 && *v30.__r_.__value_.__l.__data_ == 47) {
    goto LABEL_25;
  }
LABEL_40:
  std::string::size_type v19 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v19 = v30.__r_.__value_.__l.__size_;
  }
  if (!v19)
  {
LABEL_43:
    *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
    strcpy((char *)&v28, "/");
    sub_8354C((uint64_t)&v28, (const void **)&__dst, (const char **)off_23FE4D0, __p);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string v30 = __p[0];
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
LABEL_51:
  std::string::size_type v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  int v22 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = v29.__r_.__value_.__l.__size_;
  }
  if (v21) {
    goto LABEL_57;
  }
  *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v28, "/");
  sub_8354C((uint64_t)&v28, (const void **)&__dst, (const char **)off_23FE4D8, __p);
  if (v22 < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string v29 = __p[0];
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    std::string::size_type v24 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80u) != 0) {
      std::string::size_type v24 = __str->__r_.__value_.__l.__size_;
    }
    if (v24) {
      goto LABEL_60;
    }
  }
  else
  {
LABEL_57:
    std::string::size_type v23 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v23 & 0x80u) != 0) {
      std::string::size_type v23 = __str->__r_.__value_.__l.__size_;
    }
    if (v23) {
LABEL_60:
    }
      std::string::operator=(&v29, __str);
  }
  *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v28, "/");
  sub_8354C((uint64_t)&v28, (const void **)&__dst, (const char **)&off_23FE4E0, __p);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  sub_801F4(a6, a2, (long long *)&v30, (__n128 *)__p, (long long *)&v29, a5);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      return;
    }
LABEL_71:
    operator delete((void *)__dst);
    return;
  }
LABEL_70:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0) {
    goto LABEL_71;
  }
}

void sub_8347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 161) < 0) {
    operator delete(*(void **)(v9 - 184));
  }
  sub_111ECAC((uint64_t)&a9);
  if (*(char *)(v9 - 137) < 0)
  {
    operator delete(*(void **)(v9 - 160));
    if ((*(char *)(v9 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v9 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v9 - 73) & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(*(void **)(v9 - 96));
    goto LABEL_10;
  }
  operator delete(*(void **)(v9 - 128));
  if ((*(char *)(v9 - 73) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_8354C(uint64_t a1@<X0>, const void **a2@<X1>, const char **a3@<X2>, std::string *a4@<X8>)
{
  int8x8_t v7 = *a3;
  size_t v8 = strlen(*a3);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v35 = v9;
    int64_t v36 = v12 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v8;
    p_dst = (void **)&__dst;
    if (!v8) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v7, v9);
LABEL_9:
  *((unsigned char *)p_dst + v9) = 0;
  size_t v13 = *((unsigned __int8 *)a2 + 23);
  char v14 = v13;
  size_t v15 = (size_t)a2[1];
  if ((v13 & 0x80u) == 0) {
    long long v16 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    long long v16 = a2[1];
  }
  if (!v16) {
    goto LABEL_18;
  }
  size_t v17 = HIBYTE(v36);
  if (v36 < 0) {
    size_t v17 = v35;
  }
  if (v17)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
      size_t v13 = *((unsigned __int8 *)a2 + 23);
      size_t v15 = (size_t)a2[1];
      char v14 = *((unsigned char *)a2 + 23);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v33 = *(void *)(a1 + 16);
    }
  }
  else
  {
LABEL_18:
    HIBYTE(v33) = 0;
    LOBYTE(__p[0]) = 0;
  }
  int v18 = v14;
  if (v14 >= 0) {
    size_t v19 = v13;
  }
  else {
    size_t v19 = v15;
  }
  int v20 = SHIBYTE(v33);
  if (v33 >= 0) {
    size_t v21 = HIBYTE(v33);
  }
  else {
    size_t v21 = (size_t)__p[1];
  }
  unint64_t v22 = v21 + v19;
  if (v21 + v19 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v22 <= 0x16)
  {
    memset(&v31, 0, sizeof(v31));
    std::string::size_type v23 = (char *)&v31;
    *((unsigned char *)&v31.__r_.__value_.__s + 23) = v21 + v19;
    if (!v19) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  uint64_t v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v22 | 7) != 0x17) {
    uint64_t v29 = v22 | 7;
  }
  uint64_t v30 = v29 + 1;
  std::string::size_type v23 = (char *)operator new(v29 + 1);
  v31.__r_.__value_.__l.__size_ = v21 + v19;
  v31.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  if (v19)
  {
LABEL_28:
    if (v18 >= 0) {
      std::string::size_type v24 = a2;
    }
    else {
      std::string::size_type v24 = *a2;
    }
    memmove(v23, v24, v19);
  }
LABEL_32:
  if (v21)
  {
    if (v20 >= 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    memmove(&v23[v19], v25, v21);
  }
  v23[v19 + v21] = 0;
  if (v36 >= 0) {
    uint64_t v26 = (const std::string::value_type *)&__dst;
  }
  else {
    uint64_t v26 = (const std::string::value_type *)__dst;
  }
  if (v36 >= 0) {
    std::string::size_type v27 = HIBYTE(v36);
  }
  else {
    std::string::size_type v27 = v35;
  }
  std::string v28 = std::string::append(&v31, v26, v27);
  *a4 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v36) & 0x80000000) == 0) {
        return;
      }
LABEL_53:
      operator delete(__dst);
      return;
    }
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v36) < 0) {
    goto LABEL_53;
  }
}

void sub_837DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((a27 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_83850(uint64_t a1@<X8>)
{
  sub_67A88((char *)&__dst);
  int v2 = std::string::append(&__dst, "/etc/");
  std::string v29 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  long long v27 = 0uLL;
  int v3 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v29.__r_.__value_.__l.__size_;
  }
  unint64_t v5 = size + 7;
  if (size + 7 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 7;
    if (!size)
    {
      strcpy((char *)&__dst, "/config");
      char v7 = 1;
      unint64_t v8 = 27;
      goto LABEL_20;
    }
  }
  if (v3 >= 0) {
    uint64_t v11 = &v29;
  }
  else {
    uint64_t v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  memmove(p_dst, v11, size);
  strcpy((char *)p_dst + size, "/config");
  unint64_t v8 = size + 27;
  if (size + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v8 <= 0x16)
  {
    unint64_t v26 = 0;
    __n128 v25 = 0uLL;
    uint64_t v12 = &v25;
    HIBYTE(v26) = size + 27;
    goto LABEL_24;
  }
  char v7 = 0;
LABEL_20:
  uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v13 = v8 | 7;
  }
  uint64_t v14 = v13 + 1;
  uint64_t v12 = (__n128 *)operator new(v13 + 1);
  v25.n128_u64[1] = v8;
  unint64_t v26 = v14 | 0x8000000000000000;
  v25.n128_u64[0] = (unint64_t)v12;
  if (v7)
  {
    char v15 = 1;
    goto LABEL_28;
  }
LABEL_24:
  if (v3 >= 0) {
    long long v16 = &v29;
  }
  else {
    long long v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  memmove(v12, v16, size);
  char v15 = 0;
LABEL_28:
  strcpy((char *)v12 + size, "/config-generated/config.fb");
  size_t v17 = size + 11;
  if (size + 11 <= 0x16)
  {
    unint64_t v24 = 0;
    long long __p = 0uLL;
    p_p = &__p;
    HIBYTE(v24) = size + 11;
    if (v15) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v21 = v17 | 7;
  }
  uint64_t v22 = v21 + 1;
  p_p = operator new(v21 + 1);
  *((void *)&__p + 1) = size + 11;
  unint64_t v24 = v22 | 0x8000000000000000;
  *(void *)&long long __p = p_p;
  if ((v15 & 1) == 0)
  {
LABEL_30:
    if (v3 >= 0) {
      size_t v19 = &v29;
    }
    else {
      size_t v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v19, size);
  }
LABEL_34:
  strcpy((char *)p_p + size, "/Translated");
  sub_801F4(a1, &v27, (long long *)&__dst, &v25, &__p, 3);
  if (SHIBYTE(v24) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
LABEL_45:
      operator delete(__dst.__r_.__value_.__l.__data_);
      int v20 = (std::__shared_weak_count *)*((void *)&v27 + 1);
      if (!*((void *)&v27 + 1)) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
  }
  else if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete((void *)v25.n128_u64[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
LABEL_37:
  int v20 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (!*((void *)&v27 + 1))
  {
LABEL_47:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_48;
  }
LABEL_46:
  if (atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
LABEL_48:
  }
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_83BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      sub_14A84((uint64_t)&a22);
      if ((v30 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a30);
      goto LABEL_8;
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  sub_14A84((uint64_t)&a22);
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t *sub_83C8C(uint64_t *a1, uint64_t a2)
{
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_84DFC((uint64_t)(a1 + 6), a2 + 48);
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 1065353216;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 52) = 1065353216;
  a1[27] = 850045863;
  *((_OWORD *)a1 + 19) = 0u;
  unint64_t v4 = (void **)(a1 + 38);
  unint64_t v5 = (void **)(a1 + 41);
  *((_OWORD *)a1 + 22) = 0u;
  std::string::size_type v23 = (void **)(a1 + 35);
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  a1[50] = 0;
  *((_DWORD *)a1 + 102) = 1065353216;
  a1[53] = 0;
  a1[54] = 0;
  a1[52] = 0;
  *((unsigned char *)a1 + 440) = 3;
  uint64_t v6 = *((void *)sub_69510() + 2);
  *((void *)sub_69510() + 2) = 0;
  std::mutex::lock((std::mutex *)(a2 + 216));
  sub_86118(a1 + 17);
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  unint64_t v8 = (void *)a1[17];
  a1[17] = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a2 + 152);
  uint64_t v10 = *(void *)(a2 + 144);
  a1[19] = v9;
  a1[18] = v10;
  *(void *)(a2 + 144) = 0;
  uint64_t v11 = *(void *)(a2 + 160);
  a1[20] = v11;
  *((_DWORD *)a1 + 42) = *(_DWORD *)(a2 + 168);
  if (v11)
  {
    unint64_t v12 = *(void *)(v9 + 8);
    unint64_t v13 = a1[18];
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        v12 %= v13;
      }
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(void *)(a1[17] + 8 * v12) = a1 + 19;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
  }
  std::mutex::unlock((std::mutex *)(a2 + 216));
  sub_861BC((uint64_t)(a1 + 22), (uint64_t *)(a2 + 176));
  if (*((char *)a1 + 303) < 0) {
    operator delete(*v23);
  }
  long long v14 = *(_OWORD *)(a2 + 280);
  a1[37] = *(void *)(a2 + 296);
  *(_OWORD *)std::string::size_type v23 = v14;
  *(unsigned char *)(a2 + 303) = 0;
  *(unsigned char *)(a2 + 280) = 0;
  if (*((char *)a1 + 327) < 0) {
    operator delete(*v4);
  }
  long long v15 = *(_OWORD *)(a2 + 304);
  a1[40] = *(void *)(a2 + 320);
  *(_OWORD *)unint64_t v4 = v15;
  *(unsigned char *)(a2 + 327) = 0;
  *(unsigned char *)(a2 + 304) = 0;
  long long v16 = *v5;
  if (*v5)
  {
    a1[42] = (uint64_t)v16;
    operator delete(v16);
    *unint64_t v5 = 0;
    a1[42] = 0;
    a1[43] = 0;
  }
  uint64_t v17 = *(void *)(a2 + 336);
  a1[41] = *(void *)(a2 + 328);
  a1[42] = v17;
  a1[43] = *(void *)(a2 + 344);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  int v18 = (void *)a1[44];
  if (v18)
  {
    a1[45] = (uint64_t)v18;
    operator delete(v18);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  sub_862E0((uint64_t)(a1 + 47), (uint64_t *)(a2 + 376));
  sub_85FE8(a1 + 52);
  *((_OWORD *)a1 + 26) = *(_OWORD *)(a2 + 416);
  a1[54] = *(void *)(a2 + 432);
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  *(void *)(a2 + 416) = 0;
  *((unsigned char *)a1 + 440) = *(unsigned char *)(a2 + 440);
  uint64_t v19 = *a1;
  if (*a1)
  {
    uint64_t v20 = a1[1];
    uint64_t v21 = (void *)*a1;
    if (v20 != v19)
    {
      do
      {
        if (*(char *)(v20 - 1) < 0) {
          operator delete(*(void **)(v20 - 24));
        }
        v20 -= 24;
      }
      while (v20 != v19);
      uint64_t v21 = (void *)*a1;
    }
    a1[1] = v19;
    operator delete(v21);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)sub_69510() + 2) = v6;
  return a1;
}

void sub_83FB8(_Unwind_Exception *a1)
{
  sub_82DE8(v1);
  _Unwind_Resume(a1);
}

void sub_83FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14)
{
  a14 = a11;
  sub_84854((void ***)&a14);
  sub_7EC38(a12);
  uint64_t v21 = *v19;
  if (*v19)
  {
    *(void *)(v14 + 360) = v21;
    operator delete(v21);
    uint64_t v22 = *v18;
    if (!*v18)
    {
LABEL_3:
      if ((*(char *)(v14 + 327) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v22 = *v18;
    if (!*v18) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 336) = v22;
  operator delete(v22);
  if ((*(char *)(v14 + 327) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v14 + 303) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*v15);
  if ((*(char *)(v14 + 303) & 0x80000000) == 0)
  {
LABEL_6:
    std::mutex::~mutex(a9);
    sub_50828(v17);
    sub_82C9C(v16);
    sub_82D24(a10);
    sub_82DE8((void **)v14);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(*a13);
  goto LABEL_6;
}

uint64_t *sub_8407C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)sub_84330(a1, a2);
  if (!result[3])
  {
    uint64_t v5 = *((void *)sub_69510() + 2);
    *((void *)sub_69510() + 2) = 0;
    std::mutex::lock((std::mutex *)(a1 + 216));
    if (!sub_863BC((void *)(a1 + 136), a2))
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(void *)a1 != v7)
      {
        char v8 = *(unsigned char *)(a2 + 23);
        if (v8 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        if (v8 >= 0) {
          uint64_t v10 = (unsigned __int8 *)a2;
        }
        else {
          uint64_t v10 = *(unsigned __int8 **)a2;
        }
        do
        {
          uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
          if ((v11 & 0x80u) == 0) {
            uint64_t v12 = *(unsigned __int8 *)(v6 + 23);
          }
          else {
            uint64_t v12 = *(void *)(v6 + 8);
          }
          if (v12 == v9)
          {
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v6, v10, *(void *)(v6 + 8))) {
                goto LABEL_23;
              }
            }
            else
            {
              if (!*(unsigned char *)(v6 + 23)) {
                goto LABEL_23;
              }
              uint64_t v13 = 0;
              while (*(unsigned __int8 *)(v6 + v13) == v10[v13])
              {
                if (v11 == ++v13) {
                  goto LABEL_23;
                }
              }
            }
          }
          v6 += 24;
        }
        while (v6 != v7);
        uint64_t v6 = v7;
      }
LABEL_23:
      uint64_t v14 = a1 + 352;
      uint64_t v15 = 352;
      if (v6 == v7)
      {
        uint64_t v15 = 328;
        uint64_t v14 = a1 + 328;
      }
      uint64_t v16 = *(void *)(a1 + v15);
      for (uint64_t i = *(void *)(v14 + 8); i != v16; --i)
      {
        int v19 = *(unsigned __int8 *)(i - 1);
        int v18 = v19;
        if (sub_289694(a1 + 48, a2, v19))
        {
          sub_289FEC(a1 + 48, a2, v18, (uint64_t)__p);
          std::string v28 = (long long *)a2;
          uint64_t v20 = sub_8681C(a1 + 136, a2, (uint64_t)&unk_20F06E0, &v28);
          sub_7D734(__p, v20 + 5);
          sub_80150((int)__p, (char *)__p[2]);
          uint64_t v21 = __p[0];
          __p[0] = 0;
          if (v21) {
            operator delete(v21);
          }
        }
      }
      if (sub_863BC((void *)(a1 + 136), a2))
      {
        __p[0] = (void *)a2;
        uint64_t v22 = sub_8681C(a1 + 136, a2, (uint64_t)&unk_20F06E0, (long long **)__p);
        std::string::size_type v23 = *(void **)(a1 + 416);
        unint64_t v24 = *(void **)(a1 + 424);
        if (v23 != v24)
        {
          __n128 v25 = v22 + 5;
          do
          {
            if (sub_58070(v23, a2))
            {
              unint64_t v26 = (void *)sub_560F4(v23, a2);
              sub_7D304(v26, v25);
            }
            v23 += 5;
          }
          while (v23 != v24);
        }
      }
    }
    std::mutex::unlock((std::mutex *)(a1 + 216));
    *((void *)sub_69510() + 2) = v5;
    return sub_84414(a1, a2);
  }
  return result;
}

void sub_842E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

long long *sub_84330(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5B10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5B10))
  {
    xmmword_24F5AE8 = 0u;
    unk_24F5AF8 = 0u;
    dword_24F5B08 = 1065353216;
    __cxa_guard_release(&qword_24F5B10);
  }
  unint64_t v4 = (std::mutex *)(a1 + 216);
  std::mutex::lock((std::mutex *)(a1 + 216));
  uint64_t v5 = (void *)(a1 + 136);
  if (sub_863BC(v5, a2))
  {
    uint64_t v6 = sub_865EC(v5, a2);
    if (!v6) {
      sub_5AE8("unordered_map::at: key not found");
    }
    uint64_t v7 = (long long *)(v6 + 5);
  }
  else
  {
    uint64_t v7 = &xmmword_24F5AE8;
  }
  std::mutex::unlock(v4);
  return v7;
}

void sub_84400(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_84414(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5B40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5B40))
  {
    xmmword_24F5B18 = 0u;
    unk_24F5B28 = 0u;
    dword_24F5B38 = 1065353216;
    __cxa_guard_release(&qword_24F5B40);
  }
  unint64_t v4 = (std::mutex *)(a1 + 216);
  std::mutex::lock((std::mutex *)(a1 + 216));
  uint64_t v5 = (void *)(a1 + 136);
  if (!sub_863BC(v5, a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_86CA0("No valid config found for configuration ", a2, ".");
    uint64_t v10 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  uint64_t v6 = sub_865EC(v5, a2);
  if (!v6) {
    sub_5AE8("unordered_map::at: key not found");
  }
  uint64_t v7 = v6 + 5;
  std::mutex::unlock(v4);
  return v7;
}

void sub_84534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(v15);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_84588(uint64_t a1)
{
  return a1 + 376;
}

uint64_t *sub_84590(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a1 + 176);
  if (!sub_2D298((void *)(a1 + 176), a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  unint64_t v4 = sub_2D298(v3, a2);
  if (!v4) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v4 + 5;
}

void sub_84634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_84664(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 440);
}

uint64_t sub_8466C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8482C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_84840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_84854(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        size_t v6 = (char *)*(v4 - 3);
        if (v6)
        {
          do
          {
            uint64_t v9 = *(char **)v6;
            sub_57AC8((uint64_t *)v6 + 5);
            if (v6[39] < 0) {
              operator delete(*((void **)v6 + 2));
            }
            operator delete(v6);
            size_t v6 = v9;
          }
          while (v9);
        }
        uint64_t v8 = (void *)*(v4 - 5);
        v4 -= 5;
        int v7 = v8;
        void *v4 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_84928(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __p[1] = 0;
  uint64_t v14 = 0;
  __p[0] = 0;
  sub_84B24(a1, a2, (uint64_t)__p, &v15);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    if ((*v15.__r_.__value_.__l.__data_ & 0xFE) == 0x2E)
    {
      sub_4200((unsigned char *)a3, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      goto LABEL_17;
    }
LABEL_9:
    sub_695DC((uint64_t)(a1 + 4), &v11);
    uint64_t v5 = std::string::append(&v11, "/");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v15;
    }
    else {
      int v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::string::append(&v12, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)(a3 + 16) = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v15.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v15.__r_.__value_.__s.__data_[0] & 0xFE) != 0x2E) {
    goto LABEL_9;
  }
  *(std::string *)a3 = v15;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_84A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_84B24(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  sub_84D2C(a1, &v16);
  uint64_t v8 = std::string::append(&v16, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    std::string v11 = (const std::string::value_type *)a2;
  }
  else {
    std::string v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&v17, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v13->__r_.__value_.__r.__words[2];
  long long v18 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0) {
    sub_4200(&__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  sub_111FFAC(*a1, (uint64_t)&v18, a4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete((void *)v18);
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_84C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0)
  {
    operator delete(*(void **)(v26 - 64));
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_84D2C(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char v4 = 8;
  strcpy((char *)v3, "app_name");
  memset(&__p, 0, sizeof(__p));
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  sub_111FFAC(*a1, (uint64_t)v3, a2, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v3[0]);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v4 < 0) {
    goto LABEL_5;
  }
}

void sub_84DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  sub_20A655C((uint64_t)&a9, &a17, &a12);
  _Unwind_Resume(a1);
}

uint64_t sub_84DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 39) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_4200((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }
  int v7 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)int v7 = v8;
  }
  return a1;
}

void sub_84EE0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 63) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      sub_14A84(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_84F3C(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

char *sub_84F50(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  long long v9 = __str;
  std::string v11 = a1[2];
  std::string::size_type v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    uint64_t v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      uint64_t v20 = &__str[a5];
      __n128 v25 = (char *)a1[1];
      goto LABEL_42;
    }
    uint64_t v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        std::string::size_type v23 = (char *)v12 + v21 * 24;
        unint64_t v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          *((void *)v23 + 2) = *((void *)&v24->__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v23 = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      __n128 v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1) {
        return (char *)v7;
      }
LABEL_42:
      uint64_t v39 = v7 + 24 * a5;
      unint64_t v40 = (long long *)&v25[-24 * a5];
      unint64_t v41 = v25;
      if (v40 < v12)
      {
        unint64_t v41 = v25;
        do
        {
          long long v42 = *v40;
          *((void *)v41 + 2) = *((void *)v40 + 2);
          *(_OWORD *)unint64_t v41 = v42;
          v41 += 24;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *(void *)unint64_t v40 = 0;
          unint64_t v40 = (long long *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        unint64_t v43 = v25 - 24;
        uint64_t v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0) {
            operator delete(*(void **)v43);
          }
          unint64_t v45 = (long long *)(v7 + v44 - 24);
          long long v46 = *v45;
          *((void *)v43 + 2) = *(void *)(v7 + v44 - 8);
          *(_OWORD *)unint64_t v43 = v46;
          v43 -= 24;
          *(unsigned char *)(v7 + v44 - 1) = 0;
          *(unsigned char *)unint64_t v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        __darwin_ct_rune_t v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (char *)v7;
    }
    __n128 v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1) {
      goto LABEL_42;
    }
    return (char *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(24 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v26 = &v17[24 * v6];
  long long v49 = v26;
  int v50 = &v17[24 * v16];
  uint64_t v27 = 24 * a5;
  uint64_t v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v26 = v29;
    }
    v26 += 24;
    ++v9;
    v27 -= 24;
  }
  while (v27);
  int v30 = v49;
  std::string v31 = *a1;
  std::string::size_type v32 = v49;
  if (*a1 != (void *)v7)
  {
    uint64_t v33 = v49;
    uint64_t v34 = v7;
    do
    {
      std::string::size_type v32 = v33 - 24;
      long long v35 = *(_OWORD *)(v34 - 24);
      *((void *)v33 - 1) = *(void *)(v34 - 8);
      *(_OWORD *)(v33 - 24) = v35;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      *(void *)(v34 - 24) = 0;
      v33 -= 24;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  int64_t v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      long long v37 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)uint64_t v28 = v37;
      v28 += 24;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v38) {
    operator delete(v38);
  }
  return v30;
}

void sub_85340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_85358(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_80150(v2 + 40, *(char **)(v2 + 56));
      int v3 = *(void **)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_853C4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_85508(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_854E0(_Unwind_Exception *a1)
{
  sub_7EC38(v1);
  _Unwind_Resume(a1);
}

void sub_854F4(_Unwind_Exception *a1)
{
  sub_7EC38(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_85508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  __n128 v25 = operator new(0x50uLL);
  uint64_t v26 = v25;
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *__n128 v25 = 0;
  v25[1] = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v25 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v25 + 1) = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  sub_54214((uint64_t)(v26 + 5), a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      int v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  int v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *int v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_85964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_7F2D4(v10, v11);
  _Unwind_Resume(a1);
}

void sub_859B4(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      if ((uint64_t *)v8 != a2)
      {
        *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
        sub_5A4DC((void *)(v8 + 40), (uint64_t *)a2[7], 0);
      }
      uint64_t v9 = *(void *)v8;
      sub_85B20(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    sub_80150((int)a1, (char *)v8);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_85C7C((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v10);
      sub_85B20(a1, v10[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_85ACC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_80150(v1, v2);
  __cxa_rethrow();
}

void sub_85AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11)
{
  if (__p)
  {
    sub_7F2D4((uint64_t)&a11, __p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_85B20(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    unint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    unint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t v10 = sub_5A90C((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!v10)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *v10;
  *uint64_t v10 = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

unint64_t sub_85C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0x50uLL);
  unint64_t v7 = v6;
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v6 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  sub_54214((uint64_t)(v7 + 40), a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = sub_B128((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_85D40(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  sub_7F2D4(v3, v1);
  _Unwind_Resume(a1);
}

void sub_85D60(_Unwind_Exception *a1)
{
  if (v1[39] < 0) {
    operator delete(*v4);
  }
  *uint64_t v2 = 0;
  sub_7F2D4(v3, v1);
  _Unwind_Resume(a1);
}

void sub_85D8C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_85FE8(a1);
    if (a4 > 0x666666666666666) {
      goto LABEL_34;
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333 ? 0x666666666666666 : v10;
    if (v11 > 0x666666666666666) {
LABEL_34:
    }
      sub_2E00();
    uint64_t v12 = 40 * v11;
    char v13 = (char *)operator new(40 * v11);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[v12];
    uint64_t v14 = sub_8609C(v8, v6, a3, (uint64_t)v13);
LABEL_23:
    a1[1] = v14;
    return;
  }
  char v15 = (void *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v15 - v9) >> 3) < a4)
  {
    uint64_t v16 = a2 + 8 * (((uint64_t)v15 - v9) >> 3);
    if (v15 != (void *)v9)
    {
      uint64_t v17 = 8 * (((uint64_t)v15 - v9) >> 3);
      do
      {
        if (v6 != v9)
        {
          *(_DWORD *)(v9 + 32) = *(_DWORD *)(v6 + 32);
          sub_5A4DC((void *)v9, *(uint64_t **)(v6 + 16), 0);
        }
        v6 += 40;
        v9 += 40;
        v17 -= 40;
      }
      while (v17);
      uint64_t v9 = a1[1];
    }
    uint64_t v14 = sub_8609C(v8, v16, a3, v9);
    goto LABEL_23;
  }
  if (a2 == a3)
  {
    uint64_t v18 = (void *)*a1;
  }
  else
  {
    uint64_t v18 = (void *)*a1;
    do
    {
      if (v6 != v9)
      {
        *(_DWORD *)(v9 + 32) = *(_DWORD *)(v6 + 32);
        sub_5A4DC((void *)v9, *(uint64_t **)(v6 + 16), 0);
      }
      v6 += 40;
      v9 += 40;
      v18 += 5;
    }
    while (v6 != a3);
    char v15 = (void *)a1[1];
  }
  while (v15 != v18)
  {
    uint64_t v19 = (char *)*(v15 - 3);
    if (v19)
    {
      do
      {
        uint64_t v22 = *(char **)v19;
        sub_57AC8((uint64_t *)v19 + 5);
        if (v19[39] < 0) {
          operator delete(*((void **)v19 + 2));
        }
        operator delete(v19);
        uint64_t v19 = v22;
      }
      while (v22);
    }
    uint64_t v21 = (void *)*(v15 - 5);
    v15 -= 5;
    uint64_t v20 = v21;
    void *v15 = 0;
    if (v21) {
      operator delete(v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void sub_85FD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_85FE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_85FE8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = (char *)*(v3 - 3);
        if (v5)
        {
          do
          {
            uint64_t v8 = *(char **)v5;
            sub_57AC8((uint64_t *)v5 + 5);
            if (v5[39] < 0) {
              operator delete(*((void **)v5 + 2));
            }
            operator delete(v5);
            uint64_t v5 = v8;
          }
          while (v8);
        }
        unint64_t v7 = (void *)*(v3 - 5);
        v3 -= 5;
        uint64_t v6 = v7;
        void *v3 = 0;
        if (v7) {
          operator delete(v6);
        }
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_8609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_54214(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_860FC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20A65A0((void *)((char *)v1 + v2), v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_86118(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (char *)a1[2];
    if (v2)
    {
      do
      {
        uint64_t v5 = *(char **)v2;
        sub_80150(v2 + 40, *((char **)v2 + 7));
        uint64_t v6 = (void *)*((void *)v2 + 5);
        *((void *)v2 + 5) = 0;
        if (v6) {
          operator delete(v6);
        }
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    uint64_t v3 = a1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_861BC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void ***)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v16 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_17:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v4);
      uint64_t v4 = v16;
    }
    while (v16);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
      *(void *)(*(void *)a1 + 8 * i) = 0;
  }
  *(void *)(a1 + 24) = 0;
LABEL_7:
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *unint64_t v10 = 0;
    v10[1] = 0;
  }
}

void sub_862E0(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_80150(a1, *(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

uint64_t *sub_863BC(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_865EC(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          unint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        unint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_8681C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  float v27 = v26 + 16;
  float v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)float v27 = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_86C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_85358((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_86C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_85358((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_86CA0(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_86E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_86E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_86E88(const void ***a1)
{
  uint64_t v2 = sub_86F68(*a1, a1[1]);
  uint64_t v3 = (void **)a1[1];
  if (v3 != v2)
  {
    unint64_t v4 = v2;
    while (v3 != v4)
    {
      if (*((char *)v3 - 1) < 0) {
        operator delete(*(v3 - 3));
      }
      v3 -= 3;
    }
    a1[1] = (const void **)v4;
  }
}

void **sub_86F68(const void **a1, const void **a2)
{
  if (a1 == a2) {
    return (void **)a2;
  }
  uint64_t v3 = a1;
  unint64_t v4 = a1 + 3;
  if (a1 + 3 == a2) {
    return (void **)a2;
  }
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v3 + 23);
    if ((v5 & 0x80u) == 0) {
      size_t v6 = (const void *)*((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v6 = v3[1];
    }
    int v7 = (const void *)*((unsigned __int8 *)v3 + 47);
    int v8 = (char)v7;
    if ((char)v7 < 0) {
      int v7 = v3[4];
    }
    if (v6 == v7) {
      break;
    }
LABEL_5:
    v4 += 3;
    v3 += 3;
    if (v4 == a2) {
      return (void **)a2;
    }
  }
  if (v8 >= 0) {
    uint64_t v9 = (unsigned __int8 *)v4;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*v4;
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v3, v9, (size_t)v3[1])) {
      goto LABEL_20;
    }
    goto LABEL_5;
  }
  if (*((unsigned char *)v3 + 23))
  {
    uint64_t v10 = 0;
    while (*((unsigned __int8 *)v3 + v10) == v9[v10])
    {
      if (v5 == ++v10) {
        goto LABEL_20;
      }
    }
    goto LABEL_5;
  }
LABEL_20:
  if (v3 == a2) {
    return (void **)v3;
  }
  uint64_t v11 = (unsigned __int8 **)(v3 + 6);
  if (v3 + 6 != a2)
  {
    unint64_t v12 = (unsigned __int8 **)(v3 + 3);
    while (1)
    {
      char v15 = v12;
      unint64_t v12 = v11;
      uint64_t v16 = *((unsigned __int8 *)v3 + 23);
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
      }
      else {
        uint64_t v17 = (unsigned __int8 *)v3[1];
      }
      unint64_t v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 47);
      int v19 = (char)v18;
      if ((char)v18 < 0) {
        unint64_t v18 = v15[4];
      }
      if (v17 != v18) {
        goto LABEL_24;
      }
      if (v19 >= 0) {
        uint64_t v20 = (unsigned __int8 *)v12;
      }
      else {
        uint64_t v20 = *v12;
      }
      if ((v16 & 0x80) != 0)
      {
        if (!memcmp(*v3, v20, (size_t)v3[1])) {
          goto LABEL_41;
        }
LABEL_24:
        uint8x8_t v13 = (void **)(v3 + 3);
        if (*((char *)v3 + 47) < 0) {
          operator delete(*v13);
        }
        long long v14 = *(_OWORD *)v12;
        v3[5] = v12[2];
        *(_OWORD *)uint8x8_t v13 = v14;
        *((unsigned char *)v15 + 47) = 0;
        *(unsigned char *)unint64_t v12 = 0;
        uint64_t v11 = v12 + 3;
        v3 += 3;
        if (v12 + 3 == (unsigned __int8 **)a2) {
          return v13 + 3;
        }
      }
      else
      {
        if (*((unsigned char *)v3 + 23))
        {
          uint64_t v21 = 0;
          while (*((unsigned __int8 *)v3 + v21) == v20[v21])
          {
            if (v16 == ++v21) {
              goto LABEL_41;
            }
          }
          goto LABEL_24;
        }
LABEL_41:
        uint8x8_t v13 = (void **)v3;
        uint64_t v11 = v12 + 3;
        if (v12 + 3 == (unsigned __int8 **)a2) {
          return v13 + 3;
        }
      }
    }
  }
  uint8x8_t v13 = (void **)v3;
  return v13 + 3;
}

uint64_t *sub_8713C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v41, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    char v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  sub_87564(a1, v12, a3, a4, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v13 || (float)(v28 * (float)v13) < v27)
  {
    BOOL v30 = 1;
    if (v13 >= 3) {
      BOOL v30 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v13);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v38 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        long long v29 = *(void **)(*(void *)a1 + 8 * v12);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v38 & v12;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v38 & v12));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v39 >= v13) {
          v39 %= v13;
        }
      }
      else
      {
        v39 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  *long long v29 = v41[0];
LABEL_89:
  uint64_t v16 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_8754C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_87564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x40uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v10 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  unint64_t result = v11 + 5;
  if (*(char *)(a4 + 23) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a4;
    v11[7] = *(void *)(a4 + 16);
  }
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_87618(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    sub_2D9D4(v1);
    _Unwind_Resume(a1);
  }
  sub_2D9D4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_87650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint8x8_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint8x8_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint8x8_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_87A80(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      float v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  float v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  void *v27 = v39[0];
LABEL_89:
  uint8x8_t v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_87A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11)
{
  if (__p) {
    sub_7F2D4((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_87A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x50uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v11 = a3 + 40;
  uint64_t v10 = v12;
  uint64_t v13 = *(void *)(v11 - 16);
  unint64_t v14 = *(void *)(v11 - 8);
  *(void *)(v11 - 16) = 0;
  *(void *)(v11 - 8) = 0;
  v8[7] = v12;
  char v15 = v8 + 7;
  *(v15 - 2) = v13;
  *(v15 - 1) = v14;
  uint64_t v16 = *(void *)(v11 + 8);
  v15[1] = v16;
  *((_DWORD *)v15 + 4) = *(_DWORD *)(v11 + 16);
  if (v16)
  {
    unint64_t v17 = *(void *)(v10 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v17 >= v14) {
        v17 %= v14;
      }
    }
    else
    {
      v17 &= v14 - 1;
    }
    *(void *)(v13 + 8 * v17) = v15;
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_87B60(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_7F2D4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_87B7C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v25 = (uint64_t)&v7[40 * v3];
  float v27 = &v7[40 * v6];
  sub_54214(v25, a2);
  uint64_t v8 = v25;
  uint64_t v10 = (char *)*a1;
  unint64_t v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    uint64_t v19 = (char *)a1[1];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v13 = v25 + v11;
      unint64_t v14 = &v9[v11];
      uint64_t v15 = *(void *)&v9[v11 - 40];
      *((void *)v14 - 5) = 0;
      *(void *)(v13 - 40) = v15;
      *(void *)(v13 - 32) = *(void *)&v9[v11 - 32];
      *((void *)v14 - 4) = 0;
      uint64_t v16 = *(void *)&v9[v11 - 24];
      *(void *)(v25 + v11 - 24) = v16;
      uint64_t v17 = *(void *)&v9[v11 - 16];
      *(void *)(v13 - 16) = v17;
      *(_DWORD *)(v13 - 8) = *(_DWORD *)&v9[v11 - 8];
      if (v17)
      {
        unint64_t v12 = *(void *)(v16 + 8);
        unint64_t v18 = *(void *)(v13 - 32);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v12 >= v18) {
            v12 %= v18;
          }
        }
        else
        {
          v12 &= v18 - 1;
        }
        *(void *)(v15 + 8 * v12) = v25 + v11 - 24;
        *(void *)&v9[v11 - 24] = 0;
        *(void *)&v9[v11 - 16] = 0;
      }
      v11 -= 40;
    }
    while (&v9[v11] != v10);
    uint64_t v19 = (char *)*a1;
    unint64_t v9 = (char *)a1[1];
    uint64_t v8 = v25 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v25 + 40);
  a1[2] = v27;
  if (v9 == v19)
  {
    if (v9) {
LABEL_24:
    }
      operator delete(v9);
  }
  else
  {
    do
    {
      uint64_t v21 = (void **)(v9 - 40);
      float v26 = v9 - 40;
      uint64_t v22 = (char *)*((void *)v9 - 3);
      if (v22)
      {
        do
        {
          uint64_t v24 = *(char **)v22;
          sub_57AC8((uint64_t *)v22 + 5);
          if (v22[39] < 0) {
            operator delete(*((void **)v22 + 2));
          }
          operator delete(v22);
          uint64_t v22 = v24;
        }
        while (v24);
      }
      uint64_t v23 = *v21;
      *uint64_t v21 = 0;
      if (v23) {
        operator delete(v23);
      }
      unint64_t v9 = v26;
    }
    while (v26 != v19);
    unint64_t v9 = v19;
    if (v19) {
      goto LABEL_24;
    }
  }
  return v25 + 40;
}

void sub_87DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_87DC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_87DC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = *(char **)(i - 24);
    if (v5)
    {
      do
      {
        uint64_t v7 = *(char **)v5;
        sub_57AC8((uint64_t *)v5 + 5);
        if (v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7);
    }
    unint64_t v6 = *v4;
    void *v4 = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_87E68(uint64_t result, char a2, int a3, char a4)
{
  *(unsigned char *)unint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(unsigned char *)(result + 8) = a4;
  return result;
}

BOOL sub_87E78(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  int v1 = *(_DWORD *)(a1 + 4);
  return v1 != 0x7FFFFFFF && v1 != 0;
}

BOOL sub_87EA0(unsigned char *a1)
{
  return *a1 == 0;
}

uint64_t sub_87EB0(unsigned char *a1)
{
  return (*a1 < 0xBuLL) & (0x4BAu >> *a1);
}

BOOL sub_87ECC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1) && a1[8] == a2[8];
}

uint64_t sub_87F08(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v4;
  *(void *)(result + 16) = a3;
  *(unsigned char *)(result + 24) = a4;
  return result;
}

BOOL sub_87F24(unsigned int *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)(*a2 + *(unsigned __int16 *)(*a2 - *(int *)*a2 + 6));
  uint64_t v5 = *v3;
  unsigned int v4 = v3[1];
  if (v4 >= 0xFFFFFFFE) {
    unsigned int v6 = -2;
  }
  else {
    unsigned int v6 = v4;
  }
  uint64_t v7 = a1[1];
  if (!*((unsigned char *)a1 + 24))
  {
    double v22 = sqrt((double)((*a1 - v5) * (*a1 - v5) + (v7 - v6) * (v7 - (unint64_t)v6))) / 100.0 * 100.0;
    if (v22 >= 0.0)
    {
      double v25 = v22;
      if (v22 >= 4.50359963e15) {
        goto LABEL_23;
      }
      uint64_t v26 = (uint64_t)(v22 + v22) + 1;
    }
    else
    {
      double v25 = v22;
      if (v22 <= -4.50359963e15) {
        goto LABEL_23;
      }
      uint64_t v26 = (uint64_t)(v22 + v22);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v25 = (double)(v26 >> 1);
LABEL_23:
    if (v25 >= 9.22337204e18)
    {
LABEL_37:
      uint64_t v27 = 0x7FFFFFFFFFFFFFFELL;
      return v27 > *((void *)a1 + 2);
    }
LABEL_24:
    if (v22 >= 0.0)
    {
      if (v22 < 4.50359963e15)
      {
        uint64_t v28 = (uint64_t)(v22 + v22) + 1;
LABEL_31:
        double v22 = (double)(v28 >> 1);
      }
    }
    else if (v22 > -4.50359963e15)
    {
      uint64_t v28 = (uint64_t)(v22 + v22);
      if (v28 >= 1) {
        --v28;
      }
      goto LABEL_31;
    }
    uint64_t v27 = (uint64_t)v22;
    return v27 > *((void *)a1 + 2);
  }
  unsigned int v8 = *a1;
  if (*a1 != -1 || v7 != -1)
  {
    long double v10 = exp(3.14159265 - (double)v7 * 6.28318531 / 4294967300.0);
    long double v11 = atan((v10 - 1.0 / v10) * 0.5) * 57.2957795 * 0.0174532925;
    v12.i64[0] = v8;
    v12.i64[1] = v5;
    long double v13 = exp(3.14159265 - (double)v6 * 6.28318531 / 4294967300.0);
    long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
    float64x2_t v15 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v12), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v30 = vsubq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)).f64[0];
    long double v16 = sin((v11 - v14) * 0.5);
    long double v17 = v16 * v16;
    double v18 = cos(v11);
    long double v19 = v18 * cos(v14);
    long double v20 = sin(0.5 * v30);
    long double v21 = atan2(sqrt(v20 * v20 * v19 + v17), sqrt(1.0 - (v20 * v20 * v19 + v17)));
    double v22 = (v21 + v21) * 6372797.56 * 100.0;
    if (v22 >= 0.0)
    {
      double v23 = v22;
      if (v22 >= 4.50359963e15) {
        goto LABEL_36;
      }
      uint64_t v24 = (uint64_t)(v22 + v22) + 1;
    }
    else
    {
      double v23 = v22;
      if (v22 <= -4.50359963e15) {
        goto LABEL_36;
      }
      uint64_t v24 = (uint64_t)(v22 + v22);
      if (v24 >= 1) {
        --v24;
      }
    }
    double v23 = (double)(v24 >> 1);
LABEL_36:
    if (v23 >= 9.22337204e18) {
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  return v27 > *((void *)a1 + 2);
}

uint64_t sub_88284(int *a1)
{
  int v1 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v2 = *v1;
  if (v2 < 0xB) {
    return 2;
  }
  if (v1[5] && *((unsigned char *)a1 + v1[5])) {
    return 0;
  }
  if (v2 < 0xD) {
    return 2;
  }
  uint64_t v4 = v1[6];
  if (!v4) {
    return 2;
  }
  if (*((unsigned char *)a1 + v4)) {
    return 1;
  }
  else {
    return 2;
  }
}

BOOL sub_882E4(int a1)
{
  return a1 == 1;
}

uint64_t sub_882F0(uint64_t result)
{
  if (result >= 2) {
    return 2;
  }
  else {
    return result;
  }
}

uint64_t sub_88300@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  if (*(unsigned __int16 *)((char *)a1 - v4) < 7u || !*(_WORD *)((char *)a1 - v4 + 6))
  {
    memset(v136, 0, sizeof(v136));
    long double v13 = (unsigned __int16 *)((char *)a1 - v4);
    if (*v13 < 5u) {
      goto LABEL_140;
    }
    goto LABEL_138;
  }
  uint64_t v5 = (int *)((char *)a1
             + *(unsigned __int16 *)((char *)a1 - v4 + 6)
             + *(unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - v4 + 6)));
  uint64_t v6 = *v5;
  if (*(unsigned __int16 *)((char *)v5 - v6) < 5u
    || (uint64_t v7 = *(unsigned __int16 *)((char *)v5 - v6 + 4), !*(_WORD *)((char *)v5 - v6 + 4)))
  {
    uint64_t v14 = -v6;
    HIBYTE(v138) = 0;
    __dst.n128_u8[0] = 0;
    float64x2_t v15 = (unsigned __int16 *)((char *)v5 + v14);
    if (*(unsigned __int16 *)((char *)v5 + v14) < 7u) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  unsigned int v8 = (char *)v5 + v7;
  uint64_t v9 = *(unsigned int *)((char *)v5 + v7);
  long double v11 = &v8[v9 + 4];
  size_t v10 = *(unsigned int *)&v8[v9];
  if (v10 >= 0x17)
  {
    if ((v10 | 7) == 0x17) {
      uint64_t v16 = (v10 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v16 = v10 | 7;
    }
    p_dst = (__n128 *)operator new(v16 + 1);
    __dst.n128_u64[1] = v10;
    unint64_t v138 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_16;
  }
  HIBYTE(v138) = *(_DWORD *)&v8[v9];
  p_dst = &__dst;
  if (v10) {
LABEL_16:
  }
    memcpy(p_dst, v11, v10);
  p_dst->n128_u8[v10] = 0;
  uint64_t v14 = -(uint64_t)*v5;
  float64x2_t v15 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v15 < 7u) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v17 = v15[3];
  if (v17)
  {
    double v18 = (char *)v5 + v17;
    uint64_t v19 = *(unsigned int *)((char *)v5 + v17);
    long double v21 = &v18[v19 + 4];
    size_t v20 = *(unsigned int *)&v18[v19];
    if (v20 >= 0x17)
    {
      uint64_t v24 = (v20 & 0xFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v24 = v20 | 7;
      }
      uint64_t v25 = v24 + 1;
      double v22 = operator new(v24 + 1);
      *((void *)&v134 + 1) = v20;
      unint64_t v135 = v25 | 0x8000000000000000;
      *(void *)&long long v134 = v22;
    }
    else
    {
      HIBYTE(v135) = *(_DWORD *)&v18[v19];
      double v22 = &v134;
      if (!v20)
      {
LABEL_28:
        v22[v20] = 0;
        uint64_t v14 = -(uint64_t)*v5;
        double v23 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v23 < 9u) {
          goto LABEL_33;
        }
        goto LABEL_29;
      }
    }
    memcpy(v22, v21, v20);
    goto LABEL_28;
  }
LABEL_22:
  HIBYTE(v135) = 0;
  LOBYTE(v134) = 0;
  double v23 = (unsigned __int16 *)((char *)v5 + v14);
  if (*(unsigned __int16 *)((char *)v5 + v14) < 9u)
  {
LABEL_33:
    HIBYTE(v133) = 0;
    LOBYTE(v132) = 0;
    int8x8_t v32 = (unsigned __int16 *)((char *)v5 + v14);
    if (*(unsigned __int16 *)((char *)v5 + v14) < 0xBu) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
LABEL_29:
  uint64_t v26 = v23[4];
  if (!v26) {
    goto LABEL_33;
  }
  uint64_t v27 = (char *)v5 + v26;
  uint64_t v28 = *(unsigned int *)((char *)v5 + v26);
  double v30 = &v27[v28 + 4];
  size_t v29 = *(unsigned int *)&v27[v28];
  if (v29 >= 0x17)
  {
    uint64_t v33 = (v29 & 0xFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v33 = v29 | 7;
    }
    uint64_t v34 = v33 + 1;
    unint64_t v31 = operator new(v33 + 1);
    *((void *)&v132 + 1) = v29;
    unint64_t v133 = v34 | 0x8000000000000000;
    *(void *)&long long v132 = v31;
    goto LABEL_38;
  }
  HIBYTE(v133) = *(_DWORD *)&v27[v28];
  unint64_t v31 = &v132;
  if (v29) {
LABEL_38:
  }
    memcpy(v31, v30, v29);
  *((unsigned char *)v31 + v29) = 0;
  uint64_t v14 = -(uint64_t)*v5;
  int8x8_t v32 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v32 < 0xBu) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v35 = v32[5];
  if (v35)
  {
    unint64_t v36 = (char *)v5 + v35;
    uint64_t v37 = *(unsigned int *)((char *)v5 + v35);
    unint64_t v39 = &v36[v37 + 4];
    size_t v38 = *(unsigned int *)&v36[v37];
    if (v38 >= 0x17)
    {
      uint64_t v42 = (v38 & 0xFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v42 = v38 | 7;
      }
      uint64_t v43 = v42 + 1;
      uint8x8_t v40 = operator new(v42 + 1);
      *((void *)&v130 + 1) = v38;
      unint64_t v131 = v43 | 0x8000000000000000;
      *(void *)&long long v130 = v40;
    }
    else
    {
      HIBYTE(v131) = *(_DWORD *)&v36[v37];
      uint8x8_t v40 = &v130;
      if (!v38)
      {
LABEL_50:
        v40[v38] = 0;
        uint64_t v14 = -(uint64_t)*v5;
        uint64_t v41 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v41 < 0xDu) {
          goto LABEL_55;
        }
        goto LABEL_51;
      }
    }
    memcpy(v40, v39, v38);
    goto LABEL_50;
  }
LABEL_44:
  HIBYTE(v131) = 0;
  LOBYTE(v130) = 0;
  uint64_t v41 = (unsigned __int16 *)((char *)v5 + v14);
  if (*(unsigned __int16 *)((char *)v5 + v14) < 0xDu)
  {
LABEL_55:
    HIBYTE(v129) = 0;
    LOBYTE(v128) = 0;
    int v50 = (unsigned __int16 *)((char *)v5 + v14);
    if (*(unsigned __int16 *)((char *)v5 + v14) < 0xFu) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
LABEL_51:
  uint64_t v44 = v41[6];
  if (!v44) {
    goto LABEL_55;
  }
  unint64_t v45 = (char *)v5 + v44;
  uint64_t v46 = *(unsigned int *)((char *)v5 + v44);
  unint64_t v48 = &v45[v46 + 4];
  size_t v47 = *(unsigned int *)&v45[v46];
  if (v47 >= 0x17)
  {
    uint64_t v51 = (v47 & 0xFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17) {
      uint64_t v51 = v47 | 7;
    }
    uint64_t v52 = v51 + 1;
    long long v49 = operator new(v51 + 1);
    *((void *)&v128 + 1) = v47;
    unint64_t v129 = v52 | 0x8000000000000000;
    *(void *)&long long v128 = v49;
    goto LABEL_60;
  }
  HIBYTE(v129) = *(_DWORD *)&v45[v46];
  long long v49 = &v128;
  if (v47) {
LABEL_60:
  }
    memcpy(v49, v48, v47);
  *((unsigned char *)v49 + v47) = 0;
  uint64_t v14 = -(uint64_t)*v5;
  int v50 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v50 < 0xFu) {
    goto LABEL_66;
  }
LABEL_62:
  uint64_t v53 = v50[7];
  if (v53)
  {
    int v54 = (char *)v5 + v53;
    uint64_t v55 = *(unsigned int *)((char *)v5 + v53);
    long long v57 = &v54[v55 + 4];
    size_t v56 = *(unsigned int *)&v54[v55];
    if (v56 >= 0x17)
    {
      uint64_t v60 = (v56 & 0xFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v60 = v56 | 7;
      }
      uint64_t v61 = v60 + 1;
      unint64_t v58 = operator new(v60 + 1);
      *((void *)&v126 + 1) = v56;
      unint64_t v127 = v61 | 0x8000000000000000;
      *(void *)&long long v126 = v58;
    }
    else
    {
      HIBYTE(v127) = *(_DWORD *)&v54[v55];
      unint64_t v58 = &v126;
      if (!v56)
      {
LABEL_72:
        v58[v56] = 0;
        uint64_t v14 = -(uint64_t)*v5;
        BOOL v59 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v59 < 0x11u) {
          goto LABEL_77;
        }
        goto LABEL_73;
      }
    }
    memcpy(v58, v57, v56);
    goto LABEL_72;
  }
LABEL_66:
  HIBYTE(v127) = 0;
  LOBYTE(v126) = 0;
  BOOL v59 = (unsigned __int16 *)((char *)v5 + v14);
  if (*(unsigned __int16 *)((char *)v5 + v14) < 0x11u)
  {
LABEL_77:
    HIBYTE(v125) = 0;
    LOBYTE(v124) = 0;
    long long v68 = (unsigned __int16 *)((char *)v5 + v14);
    if (*(unsigned __int16 *)((char *)v5 + v14) < 0x13u) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
LABEL_73:
  uint64_t v62 = v59[8];
  if (!v62) {
    goto LABEL_77;
  }
  long long v63 = (char *)v5 + v62;
  uint64_t v64 = *(unsigned int *)((char *)v5 + v62);
  long long v66 = &v63[v64 + 4];
  size_t v65 = *(unsigned int *)&v63[v64];
  if (v65 >= 0x17)
  {
    uint64_t v69 = (v65 & 0xFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17) {
      uint64_t v69 = v65 | 7;
    }
    uint64_t v70 = v69 + 1;
    uint64_t v67 = operator new(v69 + 1);
    *((void *)&v124 + 1) = v65;
    unint64_t v125 = v70 | 0x8000000000000000;
    *(void *)&long long v124 = v67;
    goto LABEL_82;
  }
  HIBYTE(v125) = *(_DWORD *)&v63[v64];
  uint64_t v67 = &v124;
  if (v65) {
LABEL_82:
  }
    memcpy(v67, v66, v65);
  *((unsigned char *)v67 + v65) = 0;
  uint64_t v14 = -(uint64_t)*v5;
  long long v68 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v68 < 0x13u) {
    goto LABEL_88;
  }
LABEL_84:
  uint64_t v71 = v68[9];
  if (v71)
  {
    size_t v72 = (char *)v5 + v71;
    uint64_t v73 = *(unsigned int *)((char *)v5 + v71);
    __darwin_ct_rune_t v75 = &v72[v73 + 4];
    size_t v74 = *(unsigned int *)&v72[v73];
    if (v74 >= 0x17)
    {
      uint64_t v78 = (v74 & 0xFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17) {
        uint64_t v78 = v74 | 7;
      }
      uint64_t v79 = v78 + 1;
      long long v76 = operator new(v78 + 1);
      *((void *)&v122 + 1) = v74;
      unint64_t v123 = v79 | 0x8000000000000000;
      *(void *)&long long v122 = v76;
    }
    else
    {
      HIBYTE(v123) = *(_DWORD *)&v72[v73];
      long long v76 = &v122;
      if (!v74)
      {
LABEL_94:
        v76[v74] = 0;
        uint64_t v14 = -(uint64_t)*v5;
        unint64_t v77 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v77 < 0x15u) {
          goto LABEL_99;
        }
        goto LABEL_95;
      }
    }
    memcpy(v76, v75, v74);
    goto LABEL_94;
  }
LABEL_88:
  HIBYTE(v123) = 0;
  LOBYTE(v122) = 0;
  unint64_t v77 = (unsigned __int16 *)((char *)v5 + v14);
  if (*(unsigned __int16 *)((char *)v5 + v14) < 0x15u)
  {
LABEL_99:
    HIBYTE(v121) = 0;
    LOBYTE(v120) = 0;
    long long v86 = (unsigned __int16 *)((char *)v5 + v14);
    if (*v86 < 0x17u) {
      goto LABEL_110;
    }
    goto LABEL_106;
  }
LABEL_95:
  uint64_t v80 = v77[10];
  if (!v80) {
    goto LABEL_99;
  }
  uint64_t v81 = (char *)v5 + v80;
  uint64_t v82 = *(unsigned int *)((char *)v5 + v80);
  uint64_t v84 = &v81[v82 + 4];
  size_t v83 = *(unsigned int *)&v81[v82];
  if (v83 >= 0x17)
  {
    uint64_t v87 = (v83 & 0xFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17) {
      uint64_t v87 = v83 | 7;
    }
    uint64_t v88 = v87 + 1;
    unint64_t v85 = operator new(v87 + 1);
    *((void *)&v120 + 1) = v83;
    unint64_t v121 = v88 | 0x8000000000000000;
    *(void *)&long long v120 = v85;
    goto LABEL_104;
  }
  HIBYTE(v121) = *(_DWORD *)&v81[v82];
  unint64_t v85 = &v120;
  if (v83) {
LABEL_104:
  }
    memcpy(v85, v84, v83);
  *((unsigned char *)v85 + v83) = 0;
  long long v86 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v86 < 0x17u)
  {
LABEL_110:
    HIBYTE(v119) = 0;
    LOBYTE(__p) = 0;
    goto LABEL_116;
  }
LABEL_106:
  uint64_t v89 = v86[11];
  if (!v89) {
    goto LABEL_110;
  }
  long long v90 = (unsigned int *)((char *)v5 + v89);
  uint64_t v91 = *v90;
  unint64_t v93 = (char *)v90 + v91 + 4;
  size_t v92 = *(unsigned int *)((char *)v90 + v91);
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    p_p = operator new(v95 + 1);
    *((void *)&__p + 1) = v92;
    unint64_t v119 = v96 | 0x8000000000000000;
    *(void *)&long long __p = p_p;
  }
  else
  {
    HIBYTE(v119) = *(unsigned int *)((char *)v90 + v91);
    p_p = &__p;
    if (!v92) {
      goto LABEL_115;
    }
  }
  memcpy(p_p, v93, v92);
LABEL_115:
  *((unsigned char *)p_p + v92) = 0;
LABEL_116:
  sub_8A370((char *)v136, (long long *)&__dst, &v134, &v132, &v130, &v128, &v126, &v124, &v122, &v120, &__p);
  if (SHIBYTE(v119) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v121) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v123) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_130;
    }
  }
  else if ((SHIBYTE(v121) & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete((void *)v120);
  if ((SHIBYTE(v123) & 0x80000000) == 0)
  {
LABEL_119:
    if ((SHIBYTE(v125) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_131;
  }
LABEL_130:
  operator delete((void *)v122);
  if ((SHIBYTE(v125) & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v127) & 0x80000000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_132;
  }
LABEL_131:
  operator delete((void *)v124);
  if ((SHIBYTE(v127) & 0x80000000) == 0)
  {
LABEL_121:
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_133;
  }
LABEL_132:
  operator delete((void *)v126);
  if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_122:
    if ((SHIBYTE(v131) & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_134;
  }
LABEL_133:
  operator delete((void *)v128);
  if ((SHIBYTE(v131) & 0x80000000) == 0)
  {
LABEL_123:
    if ((SHIBYTE(v133) & 0x80000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_135;
  }
LABEL_134:
  operator delete((void *)v130);
  if ((SHIBYTE(v133) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v135) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_136;
  }
LABEL_135:
  operator delete((void *)v132);
  if ((SHIBYTE(v135) & 0x80000000) == 0)
  {
LABEL_125:
    if ((SHIBYTE(v138) & 0x80000000) == 0) {
      goto LABEL_126;
    }
LABEL_137:
    operator delete((void *)__dst.n128_u64[0]);
    long double v13 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v13 < 5u) {
      goto LABEL_140;
    }
    goto LABEL_138;
  }
LABEL_136:
  operator delete((void *)v134);
  if (SHIBYTE(v138) < 0) {
    goto LABEL_137;
  }
LABEL_126:
  long double v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 5u) {
    goto LABEL_140;
  }
LABEL_138:
  uint64_t v97 = v13[2];
  if (v97)
  {
    long long v98 = (unsigned int *)((char *)a1 + v97 + *(unsigned int *)((char *)a1 + v97));
    goto LABEL_141;
  }
LABEL_140:
  long long v98 = 0;
LABEL_141:
  long long v134 = 0uLL;
  unint64_t v135 = 0;
  sub_23708((uint64_t)&v134, *v98);
  uint64_t v99 = *v98;
  if (v99)
  {
    uint64_t v100 = 4 * v99;
    uint64_t v101 = *((void *)&v134 + 1);
    int v102 = v98;
    do
    {
      unsigned int v103 = v102[1];
      ++v102;
      char v104 = (char *)v98 + v103;
      size_t v105 = *((unsigned int *)v104 + 1);
      if (v105 >= 0x17)
      {
        uint64_t v107 = (v105 & 0xFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17) {
          uint64_t v107 = v105 | 7;
        }
        uint64_t v108 = v107 + 1;
        size_t v106 = (__n128 *)operator new(v107 + 1);
        __dst.n128_u64[1] = v105;
        unint64_t v138 = v108 | 0x8000000000000000;
        __dst.n128_u64[0] = (unint64_t)v106;
      }
      else
      {
        HIBYTE(v138) = *((_DWORD *)v104 + 1);
        size_t v106 = &__dst;
        if (!v105) {
          goto LABEL_151;
        }
      }
      memcpy(v106, v104 + 8, v105);
LABEL_151:
      v106->n128_u8[v105] = 0;
      uint64_t v109 = sub_8B3D0((void ***)&v134, v101, &__dst);
      if (SHIBYTE(v138) < 0) {
        operator delete((void *)__dst.n128_u64[0]);
      }
      uint64_t v101 = v109 + 24;
      long long v98 = v102;
      v100 -= 4;
    }
    while (v100);
  }
  unint64_t v110 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v110 >= 9u && (uint64_t v111 = v110[4]) != 0)
  {
    int v112 = *((unsigned __int8 *)a1 + v111);
    if (v112 == 2) {
      char v113 = 2;
    }
    else {
      char v113 = v112 == 1;
    }
  }
  else
  {
    char v113 = 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_8A6F8((char *)a2, v134, *((uint64_t *)&v134 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v134 + 1) - v134) >> 3));
  sub_8A8C4((char *)(a2 + 24), v136);
  *(unsigned char *)(a2 + 264) = v113;
  uint64_t v114 = v134;
  if ((void)v134)
  {
    uint64_t v115 = *((void *)&v134 + 1);
    int64_t v116 = (void *)v134;
    if (*((void *)&v134 + 1) != (void)v134)
    {
      do
      {
        if (*(char *)(v115 - 1) < 0) {
          operator delete(*(void **)(v115 - 24));
        }
        v115 -= 24;
      }
      while (v115 != v114);
      int64_t v116 = (void *)v134;
    }
    *((void *)&v134 + 1) = v114;
    operator delete(v116);
  }
  return sub_8AC4C((uint64_t)v136);
}

void sub_88D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a20 < 0)
  {
    operator delete(a15);
    if (a26 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_3;
  }
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if (a38 < 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a27);
  if (a38 < 0)
  {
LABEL_5:
    operator delete(a33);
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a44 & 0x80000000) == 0)
  {
LABEL_6:
    if (a50 < 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a39);
  if (a50 < 0)
  {
LABEL_7:
    operator delete(a45);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  if ((a56 & 0x80000000) == 0)
  {
LABEL_8:
    if (a62 < 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a51);
  if (a62 < 0)
  {
LABEL_9:
    operator delete(a57);
    if (*(char *)(v62 - 81) < 0)
    {
LABEL_19:
      operator delete(*(void **)(v62 - 104));
      _Unwind_Resume(a1);
    }
LABEL_20:
    _Unwind_Resume(a1);
  }
LABEL_18:
  if (*(char *)(v62 - 81) < 0) {
    goto LABEL_19;
  }
  goto LABEL_20;
}

void sub_88F5C(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 >= 7u && (uint64_t v4 = v3[3]) != 0) {
    uint64_t v5 = (unsigned int *)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_23708(a2, *v5);
  uint64_t v6 = *v5;
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 4 * v6;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      uint64_t v10 = v5[v7 / 4 + 1];
      long double v11 = (char *)&v5[v7 / 4] + v10 - *(int *)((char *)&v5[v7 / 4 + 1] + v10);
      if (*((unsigned __int16 *)v11 + 2) < 5u || (uint64_t v12 = *((unsigned __int16 *)v11 + 4)) == 0)
      {
        HIBYTE(v23) = 0;
        LOBYTE(__dst) = 0;
        goto LABEL_15;
      }
      long double v13 = (char *)v5 + v10 + v12 + v7 + *(unsigned int *)((char *)&v5[v7 / 4 + 1] + v10 + v12);
      size_t v14 = *((unsigned int *)v13 + 1);
      if (v14 >= 0x17)
      {
        uint64_t v17 = (v14 & 0xFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v17 = v14 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_dst = (long long *)operator new(v17 + 1);
        *((void *)&__dst + 1) = v14;
        unint64_t v23 = v18 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v23) = *((_DWORD *)v13 + 1);
        p_dst = &__dst;
        if (!v14)
        {
          *((unsigned char *)&__dst + v14) = 0;
          if (SHIBYTE(v23) < 0) {
            goto LABEL_22;
          }
          goto LABEL_15;
        }
      }
      memcpy(p_dst, v13 + 8, v14);
      *((unsigned char *)p_dst + v14) = 0;
      if (SHIBYTE(v23) < 0)
      {
LABEL_22:
        uint64_t v19 = (void *)__dst;
        sub_4200(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
        operator delete(v19);
        goto LABEL_16;
      }
LABEL_15:
      *(_OWORD *)long long __p = __dst;
      unint64_t v21 = v23;
LABEL_16:
      uint64_t v16 = sub_8B90C((void ***)a2, v9, (__n128 *)__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v16 + 24;
      v7 += 4;
    }
    while (v8 != v7);
  }
}

void sub_89128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = (void **)*v14;
  if (*v14)
  {
    uint64_t v17 = (void **)v14[1];
    uint64_t v18 = *v14;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      uint64_t v18 = *v14;
    }
    v14[1] = v16;
    operator delete(v18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_891C8(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_88F5C(a1, (uint64_t)&v16);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
  }
  else {
    uint64_t v6 = 0;
  }
  sub_88300(v6, (uint64_t)&__p);
  sub_8AD68(a2, (uint64_t)&__p, (uint64_t *)&v16);
  sub_8AC4C((uint64_t)&v15);
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v14;
    uint64_t v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    size_t v14 = v7;
    operator delete(v9);
  }
  uint64_t v10 = (uint64_t)v16;
  if (v16)
  {
    uint64_t v11 = v17;
    uint64_t v12 = v16;
    if ((void *)v17 != v16)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = v16;
    }
    uint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_892E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_89318((void **)va);
  sub_1A668((void **)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_89304(_Unwind_Exception *a1)
{
  sub_1A668((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void **sub_89318(void **a1)
{
  sub_8AC4C((uint64_t)(a1 + 3));
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_89394(uint64_t result)
{
  if (result >= 4) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t sub_893A0(uint64_t result)
{
  if (result >= 5) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t sub_893AC(uint64_t result)
{
  if ((result - 1) >= 0xA) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_893BC(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 < 5)
  {
    uint64_t v42 = 0;
LABEL_19:
    char v9 = 0;
    LODWORD(v11) = 0;
    char v12 = 1;
    goto LABEL_20;
  }
  if (!v4[2])
  {
    LOBYTE(v42) = 0;
    if (v5 >= 7) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
  int v6 = *((unsigned __int8 *)a1 + v4[2]);
  if ((v6 - 1) >= 0xA) {
    LOBYTE(v6) = 0;
  }
  LOBYTE(v42) = v6;
  if (v5 < 7)
  {
LABEL_18:
    BYTE4(v42) = 0;
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v7 = v4[3];
  if (v4[3])
  {
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    LODWORD(v7) = (v8 & 0xF) == 3;
    if (v8 <= 3)
    {
      char v9 = v8;
    }
    else
    {
      LODWORD(v7) = 0;
      char v9 = 0;
    }
    if (v5 >= 0xD)
    {
LABEL_11:
      if (v4[6])
      {
        unsigned int v10 = *((unsigned __int8 *)a1 + v4[6]);
        if (v10 >= 4) {
          LOBYTE(v10) = 0;
        }
        BYTE4(v42) = v10;
        if (v5 <= 0x12) {
          goto LABEL_47;
        }
      }
      else
      {
        BYTE4(v42) = 0;
        if (v5 <= 0x12) {
          goto LABEL_47;
        }
      }
      if (v4[9])
      {
        int v19 = *((unsigned __int8 *)a1 + v4[9]);
        char v12 = 1;
        if (v19 != 1)
        {
          char v12 = v7 ? 2 : 1;
          if (v19 == 2) {
            char v12 = 2;
          }
        }
        goto LABEL_50;
      }
LABEL_47:
      if (v7) {
        char v12 = 2;
      }
      else {
        char v12 = 1;
      }
      goto LABEL_50;
    }
  }
  else
  {
    char v9 = 0;
    if (v5 >= 0xD) {
      goto LABEL_11;
    }
  }
  BYTE4(v42) = 0;
  if (v7)
  {
    char v9 = 3;
    char v12 = 2;
  }
  else
  {
    char v12 = 1;
  }
  if (v5 < 9)
  {
    LODWORD(v11) = 0;
    goto LABEL_20;
  }
LABEL_50:
  uint64_t v11 = v4[4];
  if (v11)
  {
    LODWORD(v11) = *(int *)((char *)a1 + v11);
    if (v11 > 0x20C49B)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__dst);
        sub_188FC78(&__dst, (uint64_t)"Excessive power (", 17);
        size_t v20 = (void *)std::ostream::operator<<();
        sub_188FC78(v20, (uint64_t)" kW) in EV port.", 16);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        if (v49 < 0) {
          operator delete(v48);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      int v13 = 0x7FFFFFFF;
      size_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v14 < 0xFu) {
        goto LABEL_59;
      }
      goto LABEL_21;
    }
  }
LABEL_20:
  int v13 = 1000 * v11;
  size_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xFu)
  {
LABEL_59:
    LODWORD(v15) = 0;
    goto LABEL_60;
  }
LABEL_21:
  uint64_t v15 = v14[7];
  if (v15)
  {
    LODWORD(v15) = *(int *)((char *)a1 + v15);
    if (v15 > 0x20C49B)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__dst);
        sub_188FC78(&__dst, (uint64_t)"Excessive voltage (", 19);
        uint64_t v18 = (void *)std::ostream::operator<<();
        sub_188FC78(v18, (uint64_t)" V) in EV port.", 15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        if (v49 < 0) {
          operator delete(v48);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        int v16 = 0x7FFFFFFF;
        uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v17 < 0x11u) {
          goto LABEL_65;
        }
      }
      else
      {
        int v16 = 0x7FFFFFFF;
        uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v17 < 0x11u) {
          goto LABEL_65;
        }
      }
      goto LABEL_61;
    }
  }
LABEL_60:
  int v16 = 1000 * v15;
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0x11u)
  {
LABEL_65:
    int v23 = 0;
    goto LABEL_66;
  }
LABEL_61:
  uint64_t v21 = v17[8];
  if (!v21) {
    goto LABEL_65;
  }
  unsigned int v22 = *(int *)((char *)a1 + v21);
  if (v22 <= 0x20C49B)
  {
    int v23 = 1000 * v22;
  }
  else if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__dst);
    sub_188FC78(&__dst, (uint64_t)"Excessive current (", 19);
    uint8x8_t v40 = (void *)std::ostream::operator<<();
    sub_188FC78(v40, (uint64_t)" A) in EV port.", 15);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v49 < 0) {
      operator delete(v48);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    int v23 = 0x7FFFFFFF;
  }
  else
  {
    int v23 = 0x7FFFFFFF;
  }
LABEL_66:
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  uint64_t v24 = *a1;
  uint64_t v25 = -v24;
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - v24);
  if (*v26 >= 0x15u)
  {
    uint64_t v27 = v26[10];
    if (!v27)
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      unint64_t v36 = (unsigned __int16 *)((char *)a1 + v25);
      if (*v36 < 0xBu) {
        goto LABEL_82;
      }
      goto LABEL_72;
    }
    int v28 = v13;
    size_t v29 = (unsigned int *)((char *)a1 + v27);
    uint64_t v30 = *v29;
    int8x8_t v32 = (char *)v29 + v30 + 4;
    size_t v31 = *(unsigned int *)((char *)v29 + v30);
    if (v31 >= 0x17)
    {
      char v41 = v12;
      uint64_t v38 = (v31 & 0xFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17) {
        uint64_t v38 = v31 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_dst = operator new(v38 + 1);
      uint64_t v46 = (void (__cdecl **)(std::stringbuf *__hidden))v31;
      unint64_t v47 = v39 | 0x8000000000000000;
      long long __dst = p_dst;
      char v12 = v41;
    }
    else
    {
      HIBYTE(v47) = *(unsigned int *)((char *)v29 + v30);
      p_dst = &__dst;
      if (!v31)
      {
LABEL_81:
        int v13 = v28;
        *((unsigned char *)p_dst + v31) = 0;
        uint64_t v34 = __dst;
        unint64_t v35 = (unint64_t)v46;
        LODWORD(__p[0]) = v47;
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v47 + 3);
        LOBYTE(v27) = HIBYTE(v47);
        unint64_t v36 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v36 < 0xBu) {
          goto LABEL_82;
        }
        goto LABEL_72;
      }
    }
    memcpy(p_dst, v32, v31);
    goto LABEL_81;
  }
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  LOBYTE(v27) = 0;
  unint64_t v36 = (unsigned __int16 *)((char *)a1 + v25);
  if (*v36 < 0xBu)
  {
LABEL_82:
    LODWORD(v37) = 0;
    goto LABEL_83;
  }
LABEL_72:
  uint64_t v37 = v36[5];
  if (v37) {
    LODWORD(v37) = 10 * *(int *)((char *)a1 + v37);
  }
LABEL_83:
  *(unsigned char *)a2 = v42;
  *(unsigned char *)(a2 + 1) = v9;
  *(unsigned char *)(a2 + 2) = BYTE4(v42);
  *(_DWORD *)(a2 + 4) = v13;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v23;
  *(unsigned char *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v37;
  if ((v27 & 0x80) != 0)
  {
    sub_4200((unsigned char *)(a2 + 24), v34, v35);
    operator delete(v34);
  }
  else
  {
    *(void *)(a2 + 24) = v34;
    *(void *)(a2 + 32) = v35;
    *(_DWORD *)(a2 + 40) = __p[0];
    *(_DWORD *)(a2 + 43) = *(_DWORD *)((char *)__p + 3);
    *(unsigned char *)(a2 + 47) = v27;
  }
}

void sub_89C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_89CC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_89CD4@<X0>(char *result@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 != v3)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 4) >= 0x1555555555555556) {
      sub_2E00();
    }
    unsigned int v5 = (char *)operator new(4 * ((v4 - v3) >> 4));
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[4 * ((v4 - v3) >> 4)];
    do
    {
      sub_87E68((uint64_t)&v6, *(unsigned char *)v3, *(_DWORD *)(v3 + 4), 2);
      unint64_t result = sub_8BC38(a2, v5, (uint64_t)&v6);
      unsigned int v5 = result + 12;
      v3 += 48;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_89DB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_89DD4(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  unint64_t v3 = v1 - v2 - 12;
  if (v3 < 0xC)
  {
    LODWORD(result) = 0;
    unsigned int v5 = v2;
    do
    {
LABEL_8:
      char v10 = *v5;
      v5 += 12;
      uint64_t result = (1 << v10) | result;
    }
    while (v5 != v1);
    return result;
  }
  unsigned int v6 = 0;
  int v7 = 0;
  unint64_t v8 = v3 / 0xC + 1;
  unsigned int v5 = &v2[12 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v8 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v6 |= 1 << *v2;
    v7 |= 1 << v2[12];
    v2 += 24;
    v9 -= 2;
  }
  while (v9);
  uint64_t result = v7 | v6;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_89E80(char *a1)
{
  int v1 = a1[23];
  if (v1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = *(char **)a1;
  }
  if (v1 >= 0) {
    unint64_t v3 = a1[23];
  }
  else {
    unint64_t v3 = *((void *)a1 + 1);
  }
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v3 < 0x17)
  {
    HIBYTE(v29) = v3;
    if (!v3)
    {
      LOBYTE(v28[0]) = 0;
      goto LABEL_27;
    }
    unsigned int v5 = v28;
    goto LABEL_19;
  }
  uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17) {
    uint64_t v6 = v3 | 7;
  }
  uint64_t v7 = v6 + 1;
  unsigned int v5 = (void **)operator new(v6 + 1);
  v28[1] = (void *)v3;
  int64_t v29 = v7 | 0x8000000000000000;
  v28[0] = v5;
  if (v3 < 0x20 || (unint64_t)((char *)v5 - v2) < 0x20)
  {
LABEL_19:
    unint64_t v8 = v2;
    uint64_t v9 = v5;
    do
    {
LABEL_20:
      char v14 = *v8++;
      *v9++ = v14;
    }
    while (v8 != &v2[v3]);
    goto LABEL_21;
  }
  unint64_t v8 = &v2[v3 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v9 = (char *)v5 + (v3 & 0xFFFFFFFFFFFFFFE0);
  char v10 = v5 + 2;
  uint64_t v11 = (long long *)(v2 + 16);
  unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v13 = *v11;
    *(v10 - 1) = *(v11 - 1);
    *char v10 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 32;
  }
  while (v12);
  if (v3 != (v3 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_20;
  }
LABEL_21:
  unsigned char *v9 = 0;
  if (v29 >= 0) {
    uint64_t v15 = v28;
  }
  else {
    uint64_t v15 = (void **)v28[0];
  }
  do
  {
    *(unsigned char *)uint64_t v15 = __tolower(*v2);
    uint64_t v15 = (void **)((char *)v15 + 1);
    ++v2;
    --v3;
  }
  while (v3);
LABEL_27:
  int v16 = sub_8C070(&xmmword_2550A60, (uint64_t)v28);
  if (v16)
  {
    uint64_t v17 = *((unsigned __int8 *)v16 + 40);
    if (SHIBYTE(v29) < 0) {
LABEL_29:
    }
      operator delete(v28[0]);
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v26);
      int v19 = sub_188FC78(v26, (uint64_t)"Connector type ", 15);
      int v20 = a1[23];
      if (v20 >= 0) {
        uint64_t v21 = (uint64_t)a1;
      }
      else {
        uint64_t v21 = *(void *)a1;
      }
      if (v20 >= 0) {
        uint64_t v22 = a1[23];
      }
      else {
        uint64_t v22 = *((void *)a1 + 1);
      }
      int v23 = sub_188FC78(v19, v21, v22);
      sub_188FC78(v23, (uint64_t)" is not defined.", 16);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v27 < 0) {
        operator delete((void *)v26[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v17 = 0;
    if (SHIBYTE(v29) < 0) {
      goto LABEL_29;
    }
  }
  return v17;
}

void sub_8A170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8A1C0@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      a2[23] = 7;
      strcpy(a2, "CHADEMO");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "J1772");
      break;
    case 3:
      a2[23] = 5;
      strcpy(a2, "TESLA");
      break;
    case 4:
      a2[23] = 4;
      strcpy(a2, "CCS1");
      break;
    case 5:
      a2[23] = 4;
      strcpy(a2, "CCS2");
      break;
    case 6:
      a2[23] = 4;
      strcpy(a2, "GBT1");
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "GBT2");
      break;
    case 8:
      a2[23] = 8;
      strcpy(a2, "MENNEKES");
      break;
    case 9:
      a2[23] = 7;
      strcpy(a2, "NACS_AC");
      break;
    case 10:
      a2[23] = 7;
      strcpy(a2, "NACS_DC");
      break;
    default:
      a2[23] = 0;
      *a2 = 0;
      break;
  }
  return result;
}

char *sub_8A370(char *__dst, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6, long long *a7, long long *a8, long long *a9, long long *a10, long long *a11)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    int v19 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v18 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v18;
    int v19 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v20 = *a3;
      *((void *)v19 + 2) = *((void *)a3 + 2);
      *(_OWORD *)int v19 = v20;
      goto LABEL_6;
    }
  }
  sub_4200(v19, *(void **)a3, *((void *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v21 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v21;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_4200(__dst + 72, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v22 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v22;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_4200(__dst + 96, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v23 = *a6;
    *((void *)__dst + 14) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 6) = v23;
  }
  if (*((char *)a7 + 23) < 0)
  {
    sub_4200(__dst + 120, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v24 = *a7;
    *((void *)__dst + 17) = *((void *)a7 + 2);
    *(_OWORD *)(__dst + 120) = v24;
  }
  if (*((char *)a8 + 23) < 0)
  {
    sub_4200(__dst + 144, *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v25 = *a8;
    *((void *)__dst + 20) = *((void *)a8 + 2);
    *((_OWORD *)__dst + 9) = v25;
  }
  if (*((char *)a9 + 23) < 0)
  {
    sub_4200(__dst + 168, *(void **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v26 = *a9;
    *((void *)__dst + 23) = *((void *)a9 + 2);
    *(_OWORD *)(__dst + 168) = v26;
  }
  if (*((char *)a10 + 23) < 0)
  {
    sub_4200(__dst + 192, *(void **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v27 = *a10;
    *((void *)__dst + 26) = *((void *)a10 + 2);
    *((_OWORD *)__dst + 12) = v27;
  }
  int v28 = __dst + 216;
  if (*((char *)a11 + 23) < 0)
  {
    sub_4200(v28, *(void **)a11, *((void *)a11 + 1));
  }
  else
  {
    long long v29 = *a11;
    *((void *)__dst + 29) = *((void *)a11 + 2);
    *(_OWORD *)int v28 = v29;
  }
  return __dst;
}

void sub_8A594(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 215) < 0)
  {
    operator delete(*v9);
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 167) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v8);
  if ((*(char *)(v1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 143) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*v7);
  if ((*(char *)(v1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 119) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*v6);
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_10:
  }
    _Unwind_Resume(exception_object);
LABEL_19:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_8A6F8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(24 * a4);
    unint64_t v8 = result;
    *unsigned int v5 = result;
    v5[1] = result;
    void v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8A7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_8A82C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      unsigned int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        unsigned int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_8A8C4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    unsigned int v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    unsigned int v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)unsigned int v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_4200(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_4200(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_4200(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_4200(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v10;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_4200(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v11;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_4200(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v12;
  }
  if (*((char *)a2 + 215) < 0)
  {
    sub_4200(__dst + 192, *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v13 = a2[12];
    *((void *)__dst + 26) = *((void *)a2 + 26);
    *((_OWORD *)__dst + 12) = v13;
  }
  char v14 = __dst + 216;
  if (*((char *)a2 + 239) < 0)
  {
    sub_4200(v14, *((void **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 216);
    *((void *)__dst + 29) = *((void *)a2 + 29);
    *(_OWORD *)char v14 = v15;
  }
  return __dst;
}

void sub_8AAE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 215) < 0)
  {
    operator delete(*v9);
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 167) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v8);
  if ((*(char *)(v1 + 167) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 143) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*v7);
  if ((*(char *)(v1 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 119) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*v6);
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_10:
  }
    _Unwind_Resume(exception_object);
LABEL_19:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_8AC4C(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0)
  {
    operator delete(*(void **)(a1 + 216));
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 167) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_21;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_21:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_8AD68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_8A8C4((char *)(a1 + 24), (long long *)(a2 + 24));
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  sub_8AE28((char *)(a1 + 272), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_8ADF8(_Unwind_Exception *a1)
{
  sub_89318(v1);
  _Unwind_Resume(a1);
}

void sub_8AE0C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A666C((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_8AE28(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(24 * a4);
    long long v8 = result;
    *unsigned int v5 = result;
    v5[1] = result;
    void v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_8AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_8AF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_8A82C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_8AF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unsigned int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  long long v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = v10;
  long long v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_8B3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_8B3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8B3D0(void ***a1, uint64_t a2, __n128 *a3)
{
  long long v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (uint64_t)&(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    char v41 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v18 = (void **)operator new(24 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint8x8_t v37 = v18;
    uint64_t v38 = &v18[3 * v7];
    unint64_t v39 = v38;
    unint64_t v40 = (char *)&v18[3 * v17];
    sub_8B6FC((uint64_t)&v37, a3);
    uint64_t v20 = v38;
    uint64_t v21 = *a1;
    uint64_t v22 = v38;
    if (*a1 != (void **)v8)
    {
      uint64_t v23 = v38;
      uint64_t v24 = v8;
      do
      {
        uint64_t v22 = v23 - 3;
        long long v25 = *(_OWORD *)(v24 - 24);
        *(v23 - 1) = *(void **)(v24 - 8);
        *(_OWORD *)(v23 - 3) = v25;
        *(void *)(v24 - 16) = 0;
        *(void *)(v24 - 8) = 0;
        *(void *)(v24 - 24) = 0;
        v23 -= 3;
        v24 -= 24;
      }
      while ((void **)v24 != v21);
    }
    uint64_t v38 = v22;
    long long v26 = a1[1];
    float v27 = v39;
    if (v26 != (void **)v8)
    {
      do
      {
        long long v28 = *(_OWORD *)v8;
        long long v27[2] = *(void **)(v8 + 16);
        *(_OWORD *)float v27 = v28;
        v27 += 3;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        v8 += 24;
      }
      while ((void **)v8 != v26);
      uint64_t v22 = v38;
      uint64_t v8 = (uint64_t)a1[1];
    }
    long long v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    uint64_t v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    unint64_t v39 = (void **)v8;
    unint64_t v40 = v30;
    uint8x8_t v37 = v29;
    uint64_t v38 = v29;
    if ((void **)v8 == v29)
    {
      if (!v8) {
        return (uint64_t)v20;
      }
    }
    else
    {
      do
      {
        BOOL v31 = (void **)(v8 - 24);
        unint64_t v39 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*v31);
          BOOL v31 = v39;
        }
        uint64_t v8 = (uint64_t)v31;
      }
      while (v31 != v29);
      uint64_t v8 = (uint64_t)v37;
      if (!v37) {
        return (uint64_t)v20;
      }
    }
    operator delete((void *)v8);
    return (uint64_t)v20;
  }
  if (v8 == v5)
  {
    __n128 v19 = *a3;
    *(void *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)uint64_t v8 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = (void **)(v8 + 24);
    return v8;
  }
  uint64_t v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    long long v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      void v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)long long v13 = v14;
      v13 += 3;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if (v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 8 * ((uint64_t)(v5 - v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      unint64_t v33 = (long long *)(v8 + v32 - 24);
      long long v34 = *v33;
      *(void *)(v11 + 16) = *(void *)(v8 + v32 - 8);
      *(_OWORD *)unint64_t v11 = v34;
      v11 -= 24;
      *(unsigned char *)(v8 + v32 - 1) = 0;
      *(unsigned char *)unint64_t v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  a1[1] = (void **)v5;
  if (v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  __n128 v35 = *a3;
  *(void *)(v8 + 16) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v8 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return v8;
}

void sub_8B6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_8B6FC(uint64_t a1, __n128 *a2)
{
  long long v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v5 = *(__n128 **)a1;
    long long v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 24 * v14;
      unint64_t v17 = (char *)operator new(24 * v14);
      uint64_t v18 = &v17[24 * v15];
      __n128 v19 = &v17[v16];
      if (v4 == v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        uint64_t v20 = ((char *)v4 - (char *)v6) / 24;
        uint64_t v21 = &v18[24 * v20];
        uint64_t v22 = 24 * v20;
        uint64_t v23 = 24 * v15;
        do
        {
          uint64_t v24 = &v17[v23];
          __n128 v25 = *v6;
          *((void *)v24 + 2) = v6[1].n128_u64[0];
          *(__n128 *)uint64_t v24 = v25;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v6->n128_u64[0] = 0;
          long long v6 = (__n128 *)((char *)v6 + 24);
          v23 += 24;
          v22 -= 24;
        }
        while (v22);
        unint64_t v5 = *(__n128 **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v19;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 1) < 0) {
            operator delete(*(void **)(v27 - 24));
          }
          v27 -= 24;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      long long v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        long long v28 = (__n128 *)((char *)v6 - 24 * v9);
      }
      else
      {
        uint64_t v11 = -24 * v9;
        do
        {
          long long v13 = (char *)v6 + v11;
          if (v6[1].n128_i8[v11 + 7] < 0) {
            operator delete(*(void **)v13);
          }
          __n128 v12 = *v6;
          *((void *)v13 + 2) = v6[1].n128_u64[0];
          *(__n128 *)long long v13 = v12;
          v6[1].n128_u8[7] = 0;
          v6->n128_u8[0] = 0;
          long long v6 = (__n128 *)((char *)v6 + 24);
        }
        while (v6 != v4);
        long long v4 = *(__n128 **)(a1 + 8);
        long long v28 = (__n128 *)((char *)v6 + 24 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(void *)(a1 + 16) = v28;
      long long v4 = v28;
    }
  }
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(void *)(a1 + 16) += 24;
  return result;
}

uint64_t sub_8B90C(void ***a1, uint64_t a2, __n128 *a3)
{
  long long v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (uint64_t)&(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    char v41 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v18 = (void **)operator new(24 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint8x8_t v37 = v18;
    uint64_t v38 = &v18[3 * v7];
    unint64_t v39 = v38;
    unint64_t v40 = (char *)&v18[3 * v17];
    sub_8B6FC((uint64_t)&v37, a3);
    uint64_t v20 = v38;
    uint64_t v21 = *a1;
    uint64_t v22 = v38;
    if (*a1 != (void **)v8)
    {
      uint64_t v23 = v38;
      uint64_t v24 = v8;
      do
      {
        uint64_t v22 = v23 - 3;
        long long v25 = *(_OWORD *)(v24 - 24);
        *(v23 - 1) = *(void **)(v24 - 8);
        *(_OWORD *)(v23 - 3) = v25;
        *(void *)(v24 - 16) = 0;
        *(void *)(v24 - 8) = 0;
        *(void *)(v24 - 24) = 0;
        v23 -= 3;
        v24 -= 24;
      }
      while ((void **)v24 != v21);
    }
    uint64_t v38 = v22;
    uint64_t v26 = a1[1];
    uint64_t v27 = v39;
    if (v26 != (void **)v8)
    {
      do
      {
        long long v28 = *(_OWORD *)v8;
        long long v27[2] = *(void **)(v8 + 16);
        *(_OWORD *)uint64_t v27 = v28;
        v27 += 3;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        v8 += 24;
      }
      while ((void **)v8 != v26);
      uint64_t v22 = v38;
      uint64_t v8 = (uint64_t)a1[1];
    }
    long long v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    uint64_t v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    unint64_t v39 = (void **)v8;
    unint64_t v40 = v30;
    uint8x8_t v37 = v29;
    uint64_t v38 = v29;
    if ((void **)v8 == v29)
    {
      if (!v8) {
        return (uint64_t)v20;
      }
    }
    else
    {
      do
      {
        BOOL v31 = (void **)(v8 - 24);
        unint64_t v39 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*v31);
          BOOL v31 = v39;
        }
        uint64_t v8 = (uint64_t)v31;
      }
      while (v31 != v29);
      uint64_t v8 = (uint64_t)v37;
      if (!v37) {
        return (uint64_t)v20;
      }
    }
    operator delete((void *)v8);
    return (uint64_t)v20;
  }
  if (v8 == v5)
  {
    __n128 v19 = *a3;
    *(void *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)uint64_t v8 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = (void **)(v8 + 24);
    return v8;
  }
  uint64_t v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    long long v13 = a1[1];
    do
    {
      long long v14 = *(_OWORD *)v12;
      void v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)long long v13 = v14;
      v13 += 3;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)unint64_t v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if (v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 8 * ((uint64_t)(v5 - v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      unint64_t v33 = (long long *)(v8 + v32 - 24);
      long long v34 = *v33;
      *(void *)(v11 + 16) = *(void *)(v8 + v32 - 8);
      *(_OWORD *)unint64_t v11 = v34;
      v11 -= 24;
      *(unsigned char *)(v8 + v32 - 1) = 0;
      *(unsigned char *)unint64_t v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  a1[1] = (void **)v5;
  if (v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  __n128 v35 = *a3;
  *(void *)(v8 + 16) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v8 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return v8;
}

void sub_8BC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_8BC38(void *a1, char *__src, uint64_t a3)
{
  long long v4 = __src;
  long long v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = (char *)*a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    __n128 v35 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    BOOL v31 = v17;
    uint64_t v32 = &v17[4 * ((v4 - v13) >> 2)];
    long long __dst = v32;
    long long v34 = &v17[12 * v16];
    sub_8BEE8((uint64_t)&v31, (uint64_t *)a3);
    __n128 v19 = v32;
    uint64_t v20 = (char *)*a1;
    uint64_t v21 = v32;
    if ((char *)*a1 != v4)
    {
      uint64_t v22 = v4;
      uint64_t v21 = v32;
      do
      {
        uint64_t v23 = *(void *)(v22 - 12);
        v22 -= 12;
        char v24 = v22[8];
        *(void *)(v21 - 12) = v23;
        v21 -= 12;
        v21[8] = v24;
      }
      while (v22 != v20);
    }
    uint64_t v32 = v21;
    long long v25 = (unsigned char *)a1[1];
    uint64_t v26 = (char *)__dst;
    uint64_t v27 = v25 - v4;
    if (v25 != v4)
    {
      memmove(__dst, v4, v27 - 3);
      uint64_t v21 = v32;
      long long v4 = (char *)a1[1];
    }
    long long v28 = (char *)*a1;
    *a1 = v21;
    a1[1] = &v26[v27];
    long long v29 = (char *)a1[2];
    a1[2] = v34;
    long long __dst = v4;
    long long v34 = v29;
    BOOL v31 = v28;
    uint64_t v32 = v28;
    if (v4 != v28) {
      long long __dst = &v28[(v4 - v28 - 12) % 0xCuLL];
    }
    if (v28) {
      operator delete(v28);
    }
    return v19;
  }
  else if (__src == v6)
  {
    uint64_t v18 = *(void *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(void *)int __src = v18;
    a1[1] = __src + 12;
  }
  else
  {
    uint64_t v8 = __src + 12;
    unint64_t v9 = v6 - 12;
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0xC)
    {
      do
      {
        uint64_t v11 = *(void *)v9;
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
        *(void *)uint64_t v10 = v11;
        v10 += 12;
        v9 += 12;
      }
      while (v9 < v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, v6 - v8 - 3);
    }
    uint64_t v12 = *(void *)a3;
    v4[8] = *(unsigned char *)(a3 + 8);
    *(void *)long long v4 = v12;
  }
  return v4;
}

void sub_8BE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_8BEE8(uint64_t a1, uint64_t *a2)
{
  long long v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    long long v6 = *(char **)a1;
    unint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * ((v4 - v6) >> 2);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x1555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 12 * v15;
      uint64_t v18 = (char *)operator new(12 * v15);
      __n128 v19 = &v18[12 * v16];
      int64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      long long v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 12;
        long long v4 = &v19[12 * v22];
        uint64_t v23 = 12 * v22;
        char v24 = &v18[12 * v16];
        do
        {
          uint64_t v25 = *(void *)v5;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v5 + 2);
          *(void *)char v24 = v25;
          v24 += 12;
          v5 += 12;
          v23 -= 12;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        long long v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -12 * v9;
      uint64_t v12 = &v5[v11];
      long long v13 = (char *)(v4 - v5);
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), (size_t)(v13 - 3));
        long long v4 = *(char **)(a1 + 8);
      }
      unint64_t v14 = &v4[12 * v10];
      long long v4 = &v13[(void)v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[(void)v12];
    }
  }
  uint64_t v26 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)long long v4 = v26;
  *(void *)(a1 + 16) += 12;
}

uint64_t *sub_8C070(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    long long v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          long long v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_8C2A0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_8C2B8()
{
  __int16 v1 = 263;
  strcpy((char *)v0, "chademo");
  __int16 v3 = 517;
  strcpy((char *)v2, "j1772");
  __int16 v5 = 773;
  strcpy((char *)v4, "tesla");
  __int16 v7 = 1028;
  strcpy((char *)v6, "ccs1");
  __int16 v9 = 1284;
  strcpy((char *)v8, "ccs2");
  __int16 v11 = 1540;
  strcpy((char *)v10, "gbt1");
  char v13 = 4;
  strcpy((char *)v12, "gbt2");
  char v14 = 7;
  __int16 v16 = 2056;
  strcpy((char *)v15, "mennekes");
  __int16 v18 = 2311;
  strcpy((char *)v17, "nacs_ac");
  __int16 v20 = 2567;
  strcpy((char *)__p, "nacs_dc");
  xmmword_2550A60 = 0u;
  *(_OWORD *)&qword_2550A70 = 0u;
  dword_2550A80 = 1065353216;
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v0, (uint64_t)v0);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v2, (uint64_t)v2);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v4, (uint64_t)v4);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v6, (uint64_t)v6);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v8, (uint64_t)v8);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v10, (uint64_t)v10);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v12, (uint64_t)v12);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v15, (uint64_t)v15);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)v17, (uint64_t)v17);
  sub_8AF5C((uint64_t)&xmmword_2550A60, (uint64_t)__p, (uint64_t)__p);
  if ((char)v20 < 0)
  {
    operator delete(__p[0]);
    if (((char)v18 & 0x80000000) == 0)
    {
LABEL_3:
      if (((char)v16 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if (((char)v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17[0]);
  if (((char)v16 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v15[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    if (((char)v11 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v12[0]);
  if (((char)v11 & 0x80000000) == 0)
  {
LABEL_6:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_7:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v8[0]);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_8:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v6[0]);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_9:
    if (((char)v3 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v4[0]);
  if (((char)v3 & 0x80000000) == 0)
  {
LABEL_10:
    if (((char)v1 & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v0[0]);
    return;
  }
LABEL_20:
  operator delete(v2[0]);
  if ((char)v1 < 0) {
    goto LABEL_21;
  }
}

void sub_8C620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (qword_2550A70) {
    sub_20A66CC((void **)qword_2550A70);
  }
  size_t v74 = (void *)xmmword_2550A60;
  *(void *)&xmmword_2550A60 = 0;
  if (v74)
  {
    operator delete(v74);
    if ((a73 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a71 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_17;
    }
  }
  else if ((a73 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a71 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a64 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a66);
  if ((a64 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a57 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a59);
  if ((a57 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a52);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a43 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a45);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a36 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a38);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a29 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a31);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a15 & 0x80000000) == 0) {
LABEL_26:
    }
      _Unwind_Resume(a1);
LABEL_25:
    operator delete(a10);
    _Unwind_Resume(a1);
  }
LABEL_24:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_26;
  }
  goto LABEL_25;
}

void sub_8C750(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

void sub_8C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a16);
  sub_8CDBC(v17);
  sub_92364(v16);
  _Unwind_Resume(a1);
}

void sub_8C980(std::string *a1, void *a2, void *a3)
{
  *(_OWORD *)char v25 = 0u;
  long long v26 = 0u;
  int v27 = 1065353216;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "model_parameters");
  unint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 2) {
    __int16 v7 = (void **)v6[5];
  }
  else {
    __int16 v7 = v25;
  }
  sub_A6360((uint64_t)a1, v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_A6360((uint64_t)a1, a3);
  memset(__p, 0, 24);
  v23[0] = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)&v23[1] = xmmword_20B9250;
  strcpy((char *)v23[0], "common_charging_formula");
  unint64_t v8 = sub_58070(a2, (uint64_t)v23);
  if (v8 && *((_DWORD *)v8 + 12) == 3)
  {
    __int16 v9 = (void **)v8[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    __int16 v9 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_12:
    }
      operator delete((void *)v23[0]);
  }
  sub_A0F44(a1, 0, (uint64_t **)v9);
  sub_A0F44(a1, 1u, (uint64_t **)v9);
  HIBYTE(v23[2]) = 19;
  strcpy((char *)v23, "ac_charging_formula");
  unint64_t v10 = sub_58070(a2, (uint64_t)v23);
  if (v10 && *((_DWORD *)v10 + 12) == 3)
  {
    __int16 v11 = (void **)v10[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_18;
    }
  }
  else
  {
    __int16 v11 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_18:
    }
      operator delete((void *)v23[0]);
  }
  sub_A0F44(a1, 0, (uint64_t **)v11);
  HIBYTE(v23[2]) = 19;
  strcpy((char *)v23, "dc_charging_formula");
  uint64_t v12 = sub_58070(a2, (uint64_t)v23);
  if (v12 && *((_DWORD *)v12 + 12) == 3)
  {
    char v13 = (void **)v12[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    char v13 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_24:
    }
      operator delete((void *)v23[0]);
  }
  sub_A0F44(a1, 1u, (uint64_t **)v13);
  strcpy((char *)v23, "charging_curve_formula");
  HIBYTE(v23[2]) = 22;
  char v14 = sub_58070(a2, (uint64_t)v23);
  if (v14 && *((_DWORD *)v14 + 12) == 3)
  {
    uint64_t v15 = (void **)v14[5];
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v15 = __p;
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  operator delete((void *)v23[0]);
LABEL_31:
  sub_A0F44(a1, 0, (uint64_t **)v15);
  sub_A0F44(a1, 1u, (uint64_t **)v15);
  v23[0] = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)&v23[1] = xmmword_20B9260;
  strcpy((char *)v23[0], "derive_from_charging_times_at_soc");
  sub_A8DCC((uint64_t)a1, v23, a1[27].__r_.__value_.__l.__size_);
  if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
  {
    __int16 v16 = (uint64_t *)__p[0];
    if (__p[0]) {
      goto LABEL_33;
    }
LABEL_39:
    __int16 v20 = (void **)v26;
    if (!(void)v26) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }
  operator delete((void *)v23[0]);
  __int16 v16 = (uint64_t *)__p[0];
  if (!__p[0]) {
    goto LABEL_39;
  }
LABEL_33:
  unint64_t v17 = (uint64_t *)__p[1];
  __int16 v18 = v16;
  if (__p[1] != v16)
  {
    do
    {
      uint64_t v19 = v17 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v17 - 2), v17 - 2);
      unint64_t v17 = v19;
    }
    while (v19 != v16);
    __int16 v18 = (uint64_t *)__p[0];
  }
  __p[1] = v16;
  operator delete(v18);
  __int16 v20 = (void **)v26;
  if ((void)v26)
  {
    do
    {
LABEL_44:
      uint64_t v22 = (void **)*v20;
      sub_55198((uint64_t)(v20 + 5));
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      __int16 v20 = v22;
    }
    while (v22);
  }
LABEL_40:
  uint64_t v21 = v25[0];
  v25[0] = 0;
  if (v21) {
    operator delete(v21);
  }
}

void sub_8CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_55758(&a16);
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_8CD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_5450C((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x8CD84);
}

uint64_t *sub_8CDBC(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 64);
    if (v2)
    {
      *(void *)(v1 + 72) = v2;
      operator delete(v2);
    }
    *(void *)uint64_t v1 = off_23FE588;
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    operator delete();
  }
  return result;
}

void sub_8CE40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

uint64_t sub_8CE50(void *a1)
{
  uint64_t v1 = a1[82];
  a1[82] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 64);
    if (v2)
    {
      *(void *)(v1 + 72) = v2;
      operator delete(v2);
    }
    *(void *)uint64_t v1 = off_23FE588;
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    operator delete();
  }

  return sub_92364(a1);
}

void sub_8CEE4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  sub_92BE4(a1);
  if (*(unsigned char *)(*(void *)(a1 + 656) + 60)) {
    sub_8D280(a1);
  }
  double v6 = *(double *)(a1 + 576);
  if (v6 < -0.00001)
  {
    sub_8D70C("Negative initialization time in EV charging curve formula (", a1 + 576, "seconds).");
    sub_A4F9C(a1 + 360, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    double v6 = *(double *)(a1 + 576);
  }
  double v7 = *(double *)(a1 + 440);
  if (v6 > v7)
  {
    double v17 = v6 / 3600.0;
    double v8 = v7 * 10.0;
    if (v7 * 10.0 >= 0.0)
    {
      if (v8 < 4.50359963e15)
      {
        uint64_t v9 = (uint64_t)(v8 + v8) + 1;
LABEL_15:
        double v8 = (double)(v9 >> 1);
      }
    }
    else if (v8 > -4.50359963e15)
    {
      uint64_t v9 = (uint64_t)(v8 + v8);
      if (v9 >= 1) {
        --v9;
      }
      goto LABEL_15;
    }
    if ((int)v8 >= 0) {
      int v10 = 18000;
    }
    else {
      int v10 = -18000;
    }
    int v16 = (v10 + (int)v8 % 36000) / 36000 + (int)v8 / 36000;
    sub_8D8E0("Initialization time in EV charging curve formula (", (uint64_t)&v17, " hours) exceeds maximum allowed charging time (", (uint64_t)&v16, " hours).");
    sub_A4F9C(a1 + 360, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    double v7 = *(double *)(a1 + 440);
    double v6 = *(double *)(a1 + 576);
  }
  if (v7 < v6) {
    double v6 = v7;
  }
  double v11 = v6 * 10.0;
  BOOL v12 = v6 <= 0.0;
  double v13 = 0.0;
  if (!v12) {
    double v13 = v11;
  }
  if (v13 >= 0.0)
  {
    if (v13 >= 4.50359963e15) {
      goto LABEL_34;
    }
    uint64_t v14 = (uint64_t)(v13 + v13) + 1;
  }
  else
  {
    if (v13 <= -4.50359963e15) {
      goto LABEL_34;
    }
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v13 = (double)(v14 >> 1);
LABEL_34:
  int v15 = (int)v13;
  sub_8DAE8(a1, a2, (uint64_t)__p);
  *(_DWORD *)a3 = v15;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)__p;
  *(void *)(a3 + 24) = *(void *)&__p[16];
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "EV charging curve model evaluation");
  sub_A50CC(a1 + 360, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
}

void sub_8D22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_8D280(uint64_t a1)
{
  uint64_t v2 = (__n128 *)(a1 + 520);
  uint64_t v3 = *(void *)(a1 + 584);
  uint64_t v4 = *(void *)(a1 + 592);
  if (v3 == v4)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v5 = v3 + 8;
    do
    {
      double v6 = *(double *)(v5 - 8);
      BOOL v7 = v6 != INFINITY;
      BOOL v8 = v6 != INFINITY || v5 == v4;
      v5 += 8;
    }
    while (!v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  __n128 v35 = *v2;
  int v10 = *(double **)(a1 + 608);
  double v11 = *(double **)(a1 + 616);
  if (v10 == v11)
  {
LABEL_13:
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    while (*v10 == INFINITY)
    {
      if (++v10 == v11) {
        goto LABEL_13;
      }
    }
  }
  long long __p = operator new(0x60uLL);
  long long v44 = xmmword_20B9290;
  strcpy((char *)__p, "Custom function derive_from_charging_times_at_soc() overwrites an existing charging curve.");
  sub_A4F9C(a1 + 360, (uint64_t)&__p);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  uint64_t v4 = *(void *)(a1 + 592);
  uint64_t v3 = *(void *)(a1 + 584);
LABEL_17:
  long long __p = 0;
  long long v44 = 0uLL;
  uint64_t v12 = v4 - v3;
  if (v4 != v3)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    double v13 = (char *)operator new(v4 - v3);
    unint64_t v36 = &v13[8 * (v12 >> 3)];
    memset_pattern16(v13, &unk_20B92C0, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *(void *)(a1 + 616);
    uint64_t v15 = *(void *)(a1 + 608);
    char v41 = 0;
    uint64_t v42 = 0;
    unint64_t v40 = 0;
    int64_t v16 = v14 - v15;
    if (v14 != v15) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v18 = 0;
    double v17 = 0;
    goto LABEL_24;
  }
  double v13 = 0;
  unint64_t v36 = 0;
  uint64_t v19 = *(void *)(a1 + 616);
  uint64_t v20 = *(void *)(a1 + 608);
  char v41 = 0;
  uint64_t v42 = 0;
  unint64_t v40 = 0;
  int64_t v16 = v19 - v20;
  if (v19 == v20) {
    goto LABEL_23;
  }
LABEL_20:
  if (v16 < 0) {
    sub_2E00();
  }
  double v17 = (char *)operator new(v16);
  __int16 v18 = &v17[8 * (v16 >> 3)];
  unint64_t v40 = v17;
  uint64_t v42 = v18;
  memset_pattern16(v17, &unk_20B92C0, v16 & 0xFFFFFFFFFFFFFFF8);
  char v41 = v18;
LABEL_24:
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 520) = v21;
  *(void *)(a1 + 40) = v21;
  uint64_t v22 = *(void *)(a1 + 656);
  uint64_t v24 = *(void *)(v22 + 64);
  uint64_t v23 = *(void *)(v22 + 72);
  if (v24 == v23)
  {
    sub_8E770("Custom function generate_curve_from_charging_time() must not be called without parameters.");
    sub_A5034(a1 + 360, (uint64_t)v38);
    if (v39 < 0)
    {
      operator delete(v38[0]);
      uint64_t v25 = *(void *)(v22 + 72) - *(void *)(v22 + 64);
      if (!v25) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v25 = *(void *)(v22 + 72) - *(void *)(v22 + 64);
      if (!v25) {
        goto LABEL_47;
      }
    }
  }
  else
  {
    uint64_t v25 = v23 - v24;
    if (!v25) {
      goto LABEL_47;
    }
  }
  unint64_t v26 = 0;
  uint64_t v27 = v25 >> 3;
  while (v26 < (v36 - v13) >> 3)
  {
    long long v28 = (double *)(*(void *)(v22 + 64) + 8 * v26);
    double v29 = *v28;
    if (*v28 < -0.00001 || v29 > 100.00001)
    {
      sub_8EAE8("Invalid parameter value in call to derive_from_charging_times_at_soc(): expected a percentage value in the range [0,100], got ", (uint64_t)v28, ".");
      sub_A4F9C(a1 + 360, (uint64_t)v38);
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      double v29 = *(double *)(*(void *)(v22 + 64) + 8 * v26);
    }
    if (v29 > 100.0) {
      double v29 = 100.0;
    }
    if (v29 <= 0.0) {
      double v30 = 0.0;
    }
    else {
      double v30 = v29 / 100.0;
    }
    *(double *)(a1 + 528) = *(double *)(a1 + 8) + (*(double *)(a1 + 16) - *(double *)(a1 + 8)) * v30;
    sub_92BE4(a1);
    uint64_t v31 = 8 * v26;
    *(void *)&v13[v31] = *(void *)(a1 + 632);
    *(void *)&v17[v31] = *(void *)(a1 + 640);
    if (++v26 == v27) {
      goto LABEL_47;
    }
  }
  uint64_t v37 = (v36 - v13) >> 3;
  sub_8E914("Generated EV charging curve exceeds the maximum allowed number of interpolation points (", (uint64_t)&v37, ").");
  sub_A5034(a1 + 360, (uint64_t)v38);
  if (v39 < 0) {
    operator delete(v38[0]);
  }
LABEL_47:
  uint64_t v32 = *(void **)(a1 + 584);
  if (v32)
  {
    *(void *)(a1 + 592) = v32;
    operator delete(v32);
    *(void *)(a1 + 584) = 0;
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 600) = 0;
  }
  *(void *)(a1 + 584) = v13;
  *(void *)(a1 + 592) = v36;
  *(void *)(a1 + 600) = v36;
  unint64_t v33 = *(void **)(a1 + 608);
  if (v33)
  {
    *(void *)(a1 + 616) = v33;
    operator delete(v33);
    *(void *)(a1 + 608) = 0;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 624) = 0;
  }
  *(void *)(a1 + 608) = v17;
  *(void *)(a1 + 616) = v18;
  *(void *)(a1 + 624) = v18;
  *(void *)(a1 + 40) = v9;
  __n128 result = v35;
  *uint64_t v2 = v35;
  return result;
}

void sub_8D68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if (!v30)
    {
LABEL_3:
      if (!v29) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v29);
      goto LABEL_8;
    }
  }
  else if (!v30)
  {
    goto LABEL_3;
  }
  operator delete(v30);
  if (!v29) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_8D70C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8D8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8D8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8D8E0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8DAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8DAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8DAE8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5 = *(double **)(a1 + 584);
  size_t v6 = *(double **)(a1 + 608);
  uint64_t v7 = *(double **)(a1 + 592);
  unint64_t v47 = 0;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  if (v5 != v7)
  {
    size_t v8 = (double *)(a1 + 16);
    do
    {
      double v46 = *v5;
      double v9 = v46;
      double v10 = *v6;
      double v45 = *v6;
      if (v46 == INFINITY || v10 == INFINITY) {
        break;
      }
      if (v46 < -0.00001)
      {
        sub_8ECBC("Negative charging time in EV charging curve (", (uint64_t)&v46, " seconds).");
        sub_A4F9C(a1 + 360, (uint64_t)&__p);
        if (SHIBYTE(v44) < 0) {
          operator delete(__p);
        }
        double v9 = v46;
      }
      double v12 = *(double *)(a1 + 440);
      if (v9 <= v12 + 0.00001) {
        goto LABEL_26;
      }
      double v42 = v9 / 3600.0;
      double v13 = v12 * 10.0;
      if (v12 * 10.0 >= 0.0)
      {
        if (v13 >= 4.50359963e15) {
          goto LABEL_22;
        }
        uint64_t v14 = (uint64_t)(v13 + v13) + 1;
      }
      else
      {
        if (v13 <= -4.50359963e15) {
          goto LABEL_22;
        }
        uint64_t v14 = (uint64_t)(v13 + v13);
        if (v14 >= 1) {
          --v14;
        }
      }
      double v13 = (double)(v14 >> 1);
LABEL_22:
      if ((int)v13 >= 0) {
        int v15 = 18000;
      }
      else {
        int v15 = -18000;
      }
      LODWORD(v41) = (v15 + (int)v13 % 36000) / 36000 + (int)v13 / 36000;
      sub_8EE90("Evaluated charging time in EV charging curve (", (uint64_t)&v42, " hours) exceeds maximum allowed charging time (", (uint64_t)&v41, " hours).");
      sub_A4F9C(a1 + 360, (uint64_t)&__p);
      if (SHIBYTE(v44) < 0)
      {
        operator delete(__p);
        double v16 = v45;
        if (v45 >= -0.00001) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
LABEL_26:
      double v16 = v45;
      if (v45 >= -0.00001) {
        goto LABEL_30;
      }
LABEL_27:
      sub_8F098("Negative energy after charging in EV charging curve (", (uint64_t)&v45, " Wh).");
      sub_A4F9C(a1 + 360, (uint64_t)&__p);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      double v16 = v45;
LABEL_30:
      if (v16 > *v8 + 0.00001)
      {
        sub_8F26C("Evaluated energy after charging in EV charging curve (", (uint64_t)&v45, " Wh) exceeds the battery capacity (", a1 + 16, " Wh).");
        sub_A4F9C(a1 + 360, (uint64_t)&__p);
        if (SHIBYTE(v44) < 0) {
          operator delete(__p);
        }
        double v24 = *(double *)(a1 + 440);
        if (v24 >= v46) {
          double v25 = v46;
        }
        else {
          double v25 = *(double *)(a1 + 440);
        }
        long long __p = COERCE_VOID_(fmax(v25, 0.0));
        if (v47 == v48) {
          goto LABEL_64;
        }
        double v26 = *v8;
        double v27 = (*v8 - *((double *)v48 - 1)) / (v45 - *((double *)v48 - 1));
        double v28 = *((double *)v48 - 2) * (1.0 - v27);
        if (v24 >= v46 * v27 + v28) {
          double v24 = v46 * v27 + v28;
        }
        long long __p = *(void **)&v24;
        if (v24 > *((double *)v48 - 2) && v26 > *((double *)v48 - 1)) {
LABEL_64:
        }
          sub_8F474((uint64_t)&v47, &__p, (void *)(a1 + 16));
        break;
      }
      double v17 = 0.0;
      double v18 = 0.0;
      if (v46 >= 0.0)
      {
        double v18 = *(double *)(a1 + 440);
        if (v18 >= v46) {
          double v18 = v46;
        }
        if (v16 < 0.0)
        {
LABEL_33:
          double v19 = v18 * 10.0;
          if (v18 * 10.0 < 0.0) {
            goto LABEL_34;
          }
          goto LABEL_44;
        }
      }
      else if (v16 < 0.0)
      {
        goto LABEL_33;
      }
      uint64_t v21 = &v45;
      if (*v8 < v16) {
        uint64_t v21 = (double *)(a1 + 16);
      }
      double v17 = *v21;
      double v19 = v18 * 10.0;
      if (v18 * 10.0 < 0.0)
      {
LABEL_34:
        if (v19 <= -4.50359963e15) {
          goto LABEL_47;
        }
        uint64_t v20 = (uint64_t)(v19 + v19);
        if (v20 >= 1) {
          --v20;
        }
        goto LABEL_46;
      }
LABEL_44:
      if (v19 >= 4.50359963e15) {
        goto LABEL_47;
      }
      uint64_t v20 = (uint64_t)(v19 + v19) + 1;
LABEL_46:
      double v19 = (double)(v20 >> 1);
LABEL_47:
      double v22 = (double)(int)v19 / 10.0;
      double v23 = (double)(int)llround(v17 * 1000.0) / 1000.0;
      double v41 = v23;
      double v42 = v22;
      if (v47 == v48 || v22 > *((double *)v48 - 2) && v23 >= *((double *)v48 - 1))
      {
        sub_8F474((uint64_t)&v47, &v42, &v41);
      }
      else
      {
        uint64_t v40 = *((void *)v48 - 2);
        uint64_t v39 = *((void *)v48 - 1);
        sub_8F5A0("Dropping interpolation point (", (int)&v42, " seconds, ", (int)&v41, " Wh) from charging curve since it would violate the requirement that its points must be increasing in time and non-decreasing in energy; predecessor on the curve is (",
          (int)&v40,
          " seconds, ",
          (int)&v39,
          " Wh).");
        sub_A4F9C(a1 + 360, (uint64_t)&__p);
        if (SHIBYTE(v44) < 0) {
          operator delete(__p);
        }
      }
      ++v5;
      ++v6;
    }
    while (v5 != v7);
  }
  double v29 = v47;
  if (v47 != v48)
  {
    if ((unint64_t)((unsigned char *)v48 - (unsigned char *)v47) > 0x1F) {
      goto LABEL_74;
    }
    goto LABEL_71;
  }
  sub_8F808("EV charging curve is empty.");
  sub_A5034(a1 + 360, (uint64_t)&__p);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p);
  }
  long long __p = 0;
  double v46 = 0.0;
  sub_8F474((uint64_t)&v47, &__p, &v46);
  double v29 = v47;
  if ((unint64_t)((unsigned char *)v48 - (unsigned char *)v47) <= 0x1F)
  {
LABEL_71:
    sub_8F9AC("EV charging curve has less than two interpolation points.");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
    double v29 = v47;
  }
LABEL_74:
  double v30 = *v29;
  if (v29[1] >= *v29) {
    double v31 = *v29;
  }
  else {
    double v31 = v29[1];
  }
  if (v31 > 0.00001)
  {
    double v45 = v29[1];
    double v46 = v30;
    sub_8FB50("First point of the EV charging curve must be zero in at least one dimension, got ", (uint64_t)&v46, " seconds and ", (uint64_t)&v45, " Wh.");
    sub_A5034(a1 + 360, (uint64_t)&__p);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
    double v29 = v47;
  }
  uint64_t v32 = (double *)v48;
  if (a2 >= 3 && a2 < (unint64_t)(((unsigned char *)v48 - (unsigned char *)v29) >> 4))
  {
    long long __p = 0;
    long long v44 = 0uLL;
    sub_42A00((uint64_t *)&v47, a2, 0.0, 0, 2, &__p);
    if (__p) {
      operator delete(__p);
    }
    double v29 = v47;
    uint64_t v32 = (double *)v48;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v33 = (char *)v32 - (char *)v29;
  if (v32 != v29)
  {
    if (v33 < 0) {
      sub_2E00();
    }
    long long v34 = (char *)operator new((unint64_t)v33 >> 1);
    *(void *)a3 = v34;
    *(void *)(a3 + 8) = v34;
    *(void *)(a3 + 16) = &v34[8 * (v33 >> 4)];
    while (1)
    {
      double v36 = *v29 * 10.0;
      if (v36 >= 0.0)
      {
        if (v36 < 4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v36 + v36) + 1;
LABEL_96:
          double v36 = (double)(v37 >> 1);
        }
      }
      else if (v36 > -4.50359963e15)
      {
        uint64_t v37 = (uint64_t)(v36 + v36);
        uint64_t v35 = v37 - 1;
        if (v37 >= 1) {
          --v37;
        }
        goto LABEL_96;
      }
      LODWORD(v35) = llround(v29[1] * 1000.0);
      long long __p = (void *)((int)v36 | (unint64_t)(v35 << 32));
      long long v34 = sub_90908((char **)a3, (uint64_t)v34, (uint64_t)&__p) + 8;
      v29 += 2;
      if (v29 == v32)
      {
        uint64_t v32 = v47;
        break;
      }
    }
  }
  if (v32)
  {
    unint64_t v48 = v32;
    operator delete(v32);
  }
}

void sub_8E2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8E350()
{
  long long v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  operator new();
}

void sub_8E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_92364(&a9);
  sub_9FDC0((uint64_t)&STACK[0x2A0]);
  sub_5450C(v9 - 144);
  _Unwind_Resume(a1);
}

void sub_8E754(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t sub_8E770(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8E8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8E900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8E914(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8EAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8EAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8EAE8(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8EC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8ECA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8ECBC(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8EE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8EE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8EE90(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8F070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8F084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8F098(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8F244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8F258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8F26C(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8F44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8F460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_8F474(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    *uint64_t v7 = *a2;
    v7[1] = *a3;
    size_t v8 = v7 + 2;
    goto LABEL_13;
  }
  size_t v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  double v16 = (char *)operator new(16 * v14);
  uint64_t v17 = *a3;
  double v18 = &v16[16 * v10];
  double v19 = &v16[v15];
  *(void *)double v18 = *a2;
  *((void *)v18 + 1) = v17;
  size_t v8 = v18 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v19;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v20 = v18 - 16;
    *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v18 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v19;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

uint64_t sub_8F5A0(const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, const char *a7, int a8, char *__s)
{
  sub_E1B4((uint64_t)v20);
  size_t v13 = strlen(a1);
  sub_188FC78(v21, (uint64_t)a1, v13);
  std::ostream::operator<<();
  size_t v14 = strlen(a3);
  sub_188FC78(v21, (uint64_t)a3, v14);
  std::ostream::operator<<();
  size_t v15 = strlen(a5);
  sub_188FC78(v21, (uint64_t)a5, v15);
  std::ostream::operator<<();
  size_t v16 = strlen(a7);
  sub_188FC78(v21, (uint64_t)a7, v16);
  std::ostream::operator<<();
  size_t v17 = strlen(__s);
  sub_188FC78(v21, (uint64_t)__s, v17);
  std::stringbuf::str();
  *(void *)((char *)v20
  v21[0] = v18;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_8F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_8F808(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8F984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8F998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8F9AC(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8FB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8FB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8FB50(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_8FD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8FD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8FD58(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_8FDC8(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

double sub_8FE48(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 64;
  uint64_t v2 = *(void *)(a1 + 64);
  *(unsigned char *)(a1 + 60) = 1;
  if (v2 == *(void *)(a1 + 72))
  {
    uint64_t v5 = a2[1] - *a2;
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5 / 24;
      do
      {
        sub_319A8(v3, *(void **)(*a2 + v6));
        v6 += 24;
        --v7;
      }
      while (v7);
    }
  }
  return 0.0;
}

double sub_8FED4()
{
  return NAN;
}

double sub_8FEE0()
{
  return NAN;
}

double sub_8FEEC()
{
  return NAN;
}

uint64_t sub_8FEF8(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)__n128 result = off_23FE588;
  if (*(char *)(result + 55) < 0)
  {
    operator delete(*(void **)(result + 32));
    return v1;
  }
  return result;
}

void sub_8FF58(uint64_t a1)
{
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

double sub_8FFC8()
{
  return NAN;
}

unsigned __int8 *sub_8FFD4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    size_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  double v26 = (void *)(a1 + 16);
  char v15 = (unsigned __int8 *)operator new(0x38uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = v11;
  double v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)double v27 = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 6) = 0;
  *((_DWORD *)v15 + 12) = -1;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)char v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)char v15 = *v26;
  *double v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_903F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_90408(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      sub_2E00();
    }
    uint64_t v5 = 16 * a3;
    uint64_t v6 = (char *)operator new(16 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_54A68((uint64_t)&v6[v7], a2 + v7);
      v7 += 16;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_904A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    for (uint64_t i = v1[1]; i != v3; sub_5521C(v5, i))
    {
      uint64_t v5 = (uint64_t *)*((unsigned int *)i - 2);
      i -= 2;
    }
    v1[1] = v3;
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_9051C(int a1, uint64_t **a2, uint64_t *a3)
{
  if (a1 == 1) {
    operator new();
  }
  if (!a1)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3)
    {
      if (*((char *)v3 + 23) < 0) {
        operator delete((void *)*v3);
      }
      operator delete();
    }
    operator new();
  }

  return sub_90648(a1, a2, a3);
}

void sub_90620()
{
}

uint64_t *sub_90648(int a1, uint64_t **a2, uint64_t *a3)
{
  if (a1 == 2)
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3)
    {
      sub_553C4((uint64_t)v3);
      operator delete();
    }
    operator new();
  }

  return sub_90724(a1, a2, a3);
}

void sub_90700()
{
}

uint64_t *sub_90724(int a1, uint64_t **a2, uint64_t *a3)
{
  if (a1 == 4) {
    operator new();
  }
  if (a1 != 3)
  {
    sub_9081C(a1);
  }
  __n128 result = *a2;
  if (*a2 != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
    size_t v7 = (v6 - *a3) >> 4;
    return sub_5B1F0(result, v5, v6, v7);
  }
  return result;
}

void sub_907F8()
{
}

void sub_9081C(int a1)
{
  if (a1 == 5) {
    operator new();
  }
  operator new();
}

void sub_908DC()
{
}

char *sub_90908(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    unint64_t v35 = ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v35 >> 61) {
      sub_2E00();
    }
    uint64_t v36 = v10 - (void)v6;
    if (v36 >> 2 > v35) {
      unint64_t v35 = v36 >> 2;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    uint64_t v71 = a1 + 2;
    if (v37)
    {
      if (v37 >> 61) {
        sub_188D718();
      }
      unint64_t v38 = (char *)operator new(8 * v37);
    }
    else
    {
      unint64_t v38 = 0;
    }
    uint64_t v67 = v38;
    long long v68 = &v38[8 * v8];
    uint64_t v69 = v68;
    uint64_t v70 = &v38[8 * v37];
    sub_90D60(&v67, (void *)a3);
    uint8x8_t v39 = v68;
    uint64_t v40 = *a1;
    unint64_t v41 = v68;
    if (*a1 != v9)
    {
      unint64_t v42 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v43 = v42 - v40 - 8;
      long long v44 = v9;
      unint64_t v41 = v68;
      if (v43 < 0x58) {
        goto LABEL_59;
      }
      long long v44 = v9;
      unint64_t v41 = v68;
      if ((unint64_t)(v42 - v68) < 0x20) {
        goto LABEL_59;
      }
      uint64_t v45 = (v43 >> 3) + 1;
      uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      long long v44 = &v9[-v46];
      unint64_t v41 = &v68[-v46];
      unint64_t v47 = v68 - 16;
      unint64_t v48 = &v6[8 * v8 - 16];
      uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *(_OWORD *)v48;
        *((_OWORD *)v47 - 1) = *((_OWORD *)v48 - 1);
        *(_OWORD *)unint64_t v47 = v50;
        v47 -= 32;
        v48 -= 32;
        v49 -= 4;
      }
      while (v49);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          uint64_t v51 = *((void *)v44 - 1);
          v44 -= 8;
          *((void *)v41 - 1) = v51;
          v41 -= 8;
        }
        while (v44 != v40);
      }
    }
    long long v68 = v41;
    uint64_t v52 = a1[1];
    uint64_t v53 = v69;
    if (v52 != v9)
    {
      int v54 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v55 = v52 - v54 - 8;
      if (v55 < 0x38) {
        goto LABEL_46;
      }
      if ((unint64_t)(v69 - v54) < 0x20) {
        goto LABEL_46;
      }
      uint64_t v56 = (v55 >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v9 += v57;
      unint64_t v58 = &v69[v57];
      BOOL v59 = v69 + 16;
      uint64_t v60 = &v6[8 * v8 + 16];
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *BOOL v59 = v62;
        v59 += 2;
        v60 += 32;
        v61 -= 4;
      }
      while (v61);
      uint64_t v53 = v58;
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        unint64_t v58 = v53;
        do
        {
          uint64_t v63 = *(void *)v9;
          v9 += 8;
          *(void *)unint64_t v58 = v63;
          v58 += 8;
        }
        while (v9 != v52);
      }
      unint64_t v41 = v68;
      unint64_t v9 = a1[1];
      uint64_t v53 = v58;
    }
    uint64_t v64 = *a1;
    *a1 = v41;
    a1[1] = v53;
    size_t v65 = a1[2];
    a1[2] = v70;
    uint64_t v69 = v9;
    uint64_t v70 = v65;
    uint64_t v67 = v64;
    long long v68 = v64;
    if (v9 != v64) {
      uint64_t v69 = &v9[(v64 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    if (v64) {
      operator delete(v64);
    }
    return v39;
  }
  else if (v9 == (char *)v5)
  {
    *(void *)unint64_t v9 = *(void *)a3;
    a1[1] = v9 + 8;
  }
  else
  {
    uint64_t v11 = v5 - (void)(v9 + 8);
    unint64_t v12 = v5 - 8;
    uint8x8_t v13 = a1[1];
    if (v5 >= 8)
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      char v15 = &v6[v14];
      unint64_t v16 = (unint64_t)&v6[v14 + 8];
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~(unint64_t)v6 - v14;
      unint64_t v18 = (uint64_t *)(v5 - 8);
      uint8x8_t v13 = a1[1];
      if (v17 < 0x58) {
        goto LABEL_60;
      }
      unint64_t v18 = (uint64_t *)(v5 - 8);
      uint8x8_t v13 = a1[1];
      if (v5 - (unint64_t)v15 < 0x20) {
        goto LABEL_60;
      }
      uint64_t v19 = (v17 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v18 = (uint64_t *)(v12 + v20);
      uint8x8_t v13 = (char *)(v5 + v20);
      uint64_t v21 = (_OWORD *)(v5 + 16);
      uint64_t v22 = &v6[8 * (v11 >> 3) + 16 + 8 * v8];
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 += 2;
        v22 += 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_60:
        do
        {
          uint64_t v25 = *v18++;
          *(void *)uint8x8_t v13 = v25;
          v13 += 8;
        }
        while ((unint64_t)v18 < v5);
      }
    }
    a1[1] = v13;
    if ((char *)v5 != v9 + 8)
    {
      if ((unint64_t)(v11 - 8) < 0x78
        || v5 - (v11 & 0xFFFFFFFFFFFFFFF8) < v12
        && (unint64_t)&v6[v11 + (v7 & 0xFFFFFFFFFFFFFFF8) - (v11 & 0xFFFFFFFFFFFFFFF8)] < v5)
      {
        goto LABEL_19;
      }
      unint64_t v26 = ((unint64_t)(v11 - 8) >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v28 = v5 - v27;
      unint64_t v29 = v12 - v27;
      float v30 = (const float *)(v5 - 40);
      uint64_t v31 = (float *)(v5 - 32);
      uint64_t v32 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        float32x4x2_t v72 = vld2q_f32(v30);
        v30 -= 8;
        vst2q_f32(v31, v72);
        v31 -= 8;
        v32 -= 4;
      }
      while (v32);
      unint64_t v5 = v28;
      unint64_t v12 = v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_19:
        BOOL v33 = (_DWORD *)(v5 - 4);
        do
        {
          int v34 = *(_DWORD *)(v12 - 8);
          v12 -= 8;
          *(v33 - 1) = v34;
          _DWORD *v33 = *(_DWORD *)(v12 + 4);
          v33 -= 2;
        }
        while ((char *)v12 != v9);
      }
    }
    *(_DWORD *)unint64_t v9 = *(_DWORD *)a3;
    *(_DWORD *)&v6[8 * v8 + 4] = *(_DWORD *)(a3 + 4);
  }
  return v9;
}

void sub_90D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint8x8_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint8x8_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_90D60(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_66;
  }
  unint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    if (v6 == v4) {
      goto LABEL_65;
    }
    unint64_t v12 = v4 - v6 - 8;
    if (v12 >= 0x118)
    {
      unint64_t v23 = 8 * v10 + (v12 & 0xFFFFFFFFFFFFFFF8);
      long long v24 = v6 + 4;
      uint64_t v25 = &v6[v23 + 4];
      unint64_t v26 = (unint64_t)&v6[8 * v10 + 4];
      unint64_t v27 = (unint64_t)&v6[v23 + 8];
      unint64_t v28 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF8) + 4];
      unint64_t v29 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF8) + 8];
      BOOL v31 = (unint64_t)v11 < v28 && v6 < v25;
      BOOL v33 = (unint64_t)v11 < v29 && v24 < v25;
      BOOL v35 = v26 < v28 && (unint64_t)v6 < v27;
      BOOL v37 = v26 < v29 && (unint64_t)v24 < v27;
      if (v26 >= (unint64_t)v25 || (unint64_t)v11 >= v27)
      {
        if (v31)
        {
          uint8x8_t v13 = a1[1];
        }
        else if (v33)
        {
          uint8x8_t v13 = a1[1];
        }
        else if (v35)
        {
          uint8x8_t v13 = a1[1];
        }
        else if (v37)
        {
          uint8x8_t v13 = a1[1];
        }
        else
        {
          uint64_t v39 = (v12 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFF8);
          v11 += v40;
          uint8x8_t v13 = &v6[v40];
          uint64_t v41 = v39 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            unint64_t v42 = &v6[8 * v10];
            long long v43 = *((_OWORD *)v6 + 1);
            long long v45 = *((_OWORD *)v6 + 2);
            long long v44 = *((_OWORD *)v6 + 3);
            *(_OWORD *)unint64_t v42 = *(_OWORD *)v6;
            *((_OWORD *)v42 + 1) = v43;
            *((_OWORD *)v42 + 2) = v45;
            *((_OWORD *)v42 + 3) = v44;
            v6 += 64;
            v41 -= 8;
          }
          while (v41);
          if (v39 == (v39 & 0x3FFFFFFFFFFFFFF8)) {
            goto LABEL_64;
          }
        }
      }
      else
      {
        uint8x8_t v13 = a1[1];
      }
    }
    else
    {
      uint8x8_t v13 = a1[1];
    }
    do
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v13;
      *((_DWORD *)v11 + 1) = *((_DWORD *)v13 + 1);
      v11 += 8;
      v13 += 8;
    }
    while (v13 != v4);
LABEL_64:
    unint64_t v4 = a1[1];
LABEL_65:
    a1[1] = &v4[8 * v10];
    a1[2] = v11;
    unint64_t v4 = v11;
    goto LABEL_66;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_188D718();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  unint64_t v17 = (char *)operator new(8 * v14);
  unint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_56:
        uint64_t v54 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v54;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_57;
    }
    uint64_t v46 = &v17[8 * v15];
    uint64_t v22 = v46;
    if ((unint64_t)(v46 - v6) < 0x20) {
      goto LABEL_56;
    }
    uint64_t v47 = (v21 >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v48];
    uint64_t v49 = &v6[v48];
    long long v50 = (long long *)(v6 + 16);
    uint64_t v51 = v46 + 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *v50;
      *(v51 - 1) = *(v50 - 1);
      *uint64_t v51 = v53;
      v50 += 2;
      v51 += 2;
      v52 -= 4;
    }
    while (v52);
    uint64_t v6 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_56;
    }
  }
LABEL_57:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_66:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

uint64_t sub_90FFC()
{
  strcpy((char *)&dword_25515F8, "break");
  strcpy((char *)&dword_2551610, "case");
  strcpy((char *)&qword_2551628, "continue");
  strcpy((char *)&dword_2551640, "default");
  uint64_t result = 4;
  strcpy((char *)&dword_2551658, "false");
  strcpy((char *)&dword_25516A0, "else");
  strcpy((char *)&dword_25516B8, "ilike");
  strcpy((char *)&word_25516D0, "in");
  dword_2551730 = 7499630;
  dword_2551748 = 7630702;
  strcpy((char *)&dword_2551760, "null");
  word_25517C0 = 26739;
  word_25517D8 = 26739;
  strcpy((char *)&dword_2551820, "true");
  dword_2551838 = 1769238133;
  word_2551850 = 24950;
  byte_2550A9F = 3;
  byte_2550A8A = 115;
  word_2550A88 = 25185;
  byte_2550A8B = 0;
  byte_2550AB7 = 4;
  strcpy((char *)&dword_2550AA0, "acos");
  byte_2550ACF = 5;
  byte_2550B7C = 107;
  byte_2550ABC = 104;
  dword_2550AB8 = 1936679777;
  byte_2550ABD = 0;
  byte_2550AE7 = 3;
  byte_2550AD2 = 100;
  word_2550AD0 = 28257;
  byte_2550AD3 = 0;
  byte_2550AFF = 4;
  dword_2550B78 = 1634038370;
  strcpy((char *)&dword_2550AE8, "asin");
  byte_2550B17 = 5;
  byte_2550B04 = 104;
  dword_2550B00 = 1852404577;
  byte_2550B05 = 0;
  byte_2550B2F = 4;
  strcpy((char *)&dword_2550B90, "case");
  strcpy((char *)&dword_2550B18, "atan");
  byte_2550B47 = 5;
  byte_2550B34 = 104;
  dword_2550B30 = 1851880545;
  byte_2550B35 = 0;
  byte_2550B5F = 5;
  strcpy((char *)&qword_2550BD8, "continue");
  byte_2550B4C = 50;
  dword_2550B48 = 1851880545;
  byte_2550B4D = 0;
  byte_2550B77 = 3;
  strcpy((char *)&dword_2550C50, "default");
  byte_2550B62 = 103;
  dword_2550D10 = 1936482662;
  word_2550B60 = 30305;
  byte_2550B63 = 0;
  byte_2550B8F = 5;
  byte_2550B7D = 0;
  byte_2550BA7 = 4;
  byte_2550BBF = 4;
  strcpy((char *)&dword_2550DD0, "else");
  strcpy((char *)&dword_2550BA8, "ceil");
  byte_2550BD7 = 5;
  dword_2550DE8 = 1802071145;
  byte_2550BC4 = 112;
  strcpy((char *)&word_2550E00, "in");
  dword_2550BC0 = 1835101283;
  byte_2550BC5 = 0;
  byte_2550BEF = 8;
  byte_2550C07 = 3;
  byte_2550BF2 = 115;
  word_2550BF0 = 28515;
  byte_2550BF3 = 0;
  byte_2550C1F = 4;
  word_25510D0 = 26739;
  word_25510E8 = 26739;
  strcpy((char *)&dword_2550C08, "cosh");
  byte_2550C37 = 3;
  strcpy((char *)&dword_25511D8, "true");
  byte_2550C22 = 116;
  word_2550C20 = 28515;
  byte_2550C23 = 0;
  byte_2550C4F = 3;
  dword_2551208 = 1769238133;
  byte_2550C3A = 99;
  word_2551220 = 24950;
  word_2550C38 = 29539;
  byte_2550C3B = 0;
  byte_2550C67 = 7;
  byte_2550C7F = 8;
  word_25518E0 = 25185;
  strcpy((char *)&qword_2550C68, "deg2grad");
  byte_2550C97 = 7;
  strcpy((char *)&dword_25518F8, "acos");
  dword_2551910 = 1936679777;
  strcpy((char *)&dword_2550C80, "deg2rad");
  byte_2550CAF = 5;
  byte_2550C9C = 108;
  strcpy((char *)&dword_2551928, "asin");
  dword_2551940 = 1852404577;
  dword_2550C98 = 1635086693;
  byte_2550C9D = 0;
  byte_2550CC7 = 3;
  byte_2551914 = 104;
  byte_2551944 = 104;
  byte_2551974 = 104;
  byte_2550CB2 = 102;
  byte_255198C = 50;
  word_2550CB0 = 29285;
  byte_2550CB3 = 0;
  byte_2550CDF = 4;
  strcpy((char *)&dword_2551958, "atan");
  dword_2551970 = 1851880545;
  dword_2551988 = 1851880545;
  strcpy((char *)&dword_2550CC8, "erfc");
  byte_2550CF7 = 3;
  byte_2550CE2 = 112;
  word_25519A0 = 30305;
  word_2550CE0 = 30821;
  byte_2550CE3 = 0;
  byte_2550D0F = 5;
  strcpy((char *)&dword_25519B8, "ceil");
  byte_2550CFC = 49;
  dword_25519D0 = 1835101283;
  dword_2550CF8 = 1836087397;
  byte_2550CFD = 0;
  byte_2550D27 = 5;
  byte_2550D14 = 101;
  byte_2550D15 = 0;
  byte_2550D3F = 5;
  byte_2550D2C = 114;
  byte_25518E2 = 115;
  byte_25519EA = 115;
  dword_2550D28 = 1869573222;
  byte_2550D2D = 0;
  byte_2550D57 = 3;
  byte_2550D42 = 114;
  word_2550D40 = 28518;
  byte_2550D43 = 0;
  byte_2550D6F = 4;
  strcpy((char *)&dword_2551A00, "cosh");
  strcpy((char *)&dword_2550D58, "frac");
  byte_2550D87 = 8;
  word_25519E8 = 28515;
  word_2551A18 = 28515;
  strcpy((char *)&qword_2550D70, "grad2deg");
  byte_2550D9F = 5;
  byte_2550D8C = 116;
  word_2551A30 = 29539;
  dword_2550D88 = 1869642088;
  byte_2550D8D = 0;
  byte_2550DB7 = 6;
  strcpy((char *)&dword_2550DA0, "iclamp");
  byte_2550DCF = 2;
  strcpy((char *)&word_2550DB8, "if");
  byte_2550DE7 = 4;
  byte_2550DFF = 5;
  byte_2550DEC = 101;
  byte_2550DED = 0;
  byte_2550E17 = 2;
  byte_2550E2F = 7;
  strcpy((char *)&dword_2550E18, "inrange");
  byte_2550E47 = 4;
  strcpy((char *)&dword_2550E30, "like");
  byte_2550E5F = 3;
  byte_2550E4A = 103;
  word_2550E48 = 28524;
  byte_2550E4B = 0;
  byte_2550E77 = 5;
  byte_2550E64 = 48;
  dword_2550E60 = 828862316;
  byte_2550E65 = 0;
  byte_2550E8F = 4;
  strcpy((char *)&dword_2550E78, "log2");
  byte_2550EA7 = 4;
  strcpy((char *)&dword_2550E90, "logn");
  byte_2550EBF = 5;
  byte_2550EAC = 112;
  dword_2550EA8 = 828862316;
  byte_2550EAD = 0;
  byte_2550ED7 = 4;
  strcpy((char *)&dword_2550EC0, "mand");
  byte_2550EEF = 3;
  byte_2550EDA = 120;
  word_2550ED8 = 24941;
  byte_2550EDB = 0;
  byte_2550F07 = 3;
  byte_2550EF2 = 110;
  word_2550EF0 = 26989;
  byte_2550EF3 = 0;
  byte_2550F1F = 3;
  byte_2550F0A = 100;
  word_2550F08 = 28525;
  byte_2550F0B = 0;
  byte_2550F37 = 3;
  byte_2550F22 = 114;
  word_2550F20 = 28525;
  byte_2550F23 = 0;
  byte_2550F4F = 3;
  byte_2550F3A = 108;
  word_2550F38 = 30061;
  byte_2550F3B = 0;
  byte_2550F67 = 4;
  strcpy((char *)&dword_2550F50, "ncdf");
  byte_2550F7F = 4;
  strcpy((char *)&dword_2550F68, "nand");
  byte_2550F97 = 3;
  byte_2550F82 = 114;
  word_2550F80 = 28526;
  byte_2550F83 = 0;
  byte_2550FAF = 3;
  byte_2550F9A = 116;
  word_2550F98 = 28526;
  byte_2550F9B = 0;
  strcpy(&byte_2550FC7, "\tnull");
  strcpy((char *)&qword_2550FB0, "not_equal");
  byte_2550FDF = 4;
  byte_2550FF7 = 2;
  byte_2551A47 = 3;
  byte_2551A32 = 99;
  byte_2551A33 = 0;
  strcpy((char *)&word_2550FE0, "or");
  byte_2551A2F = 3;
  byte_2551A1A = 116;
  byte_2551A1B = 0;
  byte_255100F = 3;
  byte_25519FF = 3;
  byte_25519EB = 0;
  byte_2551A17 = 4;
  byte_2550FFA = 119;
  byte_25519E7 = 5;
  byte_25519D4 = 112;
  byte_25519D5 = 0;
  word_2550FF8 = 28528;
  byte_2550FFB = 0;
  byte_2551027 = 7;
  byte_25519A3 = 0;
  byte_25519CF = 4;
  strcpy((char *)&dword_2551010, "rad2deg");
  byte_255103F = 6;
  byte_255198D = 0;
  byte_25519B7 = 3;
  byte_25519A2 = 103;
  byte_2551987 = 5;
  byte_2551975 = 0;
  byte_255199F = 5;
  strcpy((char *)&dword_2551028, "repeat");
  byte_2551057 = 6;
  byte_2551945 = 0;
  byte_255196F = 4;
  byte_255193F = 4;
  byte_2551957 = 5;
  strcpy((char *)&dword_2551040, "return");
  byte_255106F = 4;
  byte_2551927 = 5;
  byte_2551915 = 0;
  strcpy((char *)&dword_2551058, "root");
  byte_2551087 = 5;
  byte_25518E3 = 0;
  byte_255190F = 4;
  byte_255126A = 114;
  byte_25512AF = 1;
  word_2551298 = 124;
  byte_25518F7 = 3;
  word_2551268 = 28536;
  byte_255126B = 0;
  byte_2551297 = 1;
  word_2551280 = 38;
  byte_255123D = 0;
  byte_2551267 = 4;
  strcpy((char *)&dword_2551250, "xnor");
  byte_255127F = 3;
  byte_2551074 = 100;
  byte_2551223 = 0;
  byte_255124F = 5;
  byte_255123C = 101;
  dword_2551238 = 1818847351;
  dword_2551070 = 1853190002;
  byte_255120C = 108;
  byte_255120D = 0;
  byte_2551237 = 3;
  byte_2551222 = 114;
  byte_2551207 = 5;
  byte_25511F4 = 99;
  dword_25511F0 = 1853190772;
  byte_25511F5 = 0;
  byte_255121F = 5;
  word_2551100 = 26995;
  byte_25511EF = 4;
  word_25511A8 = 24948;
  byte_25511AB = 0;
  byte_25511D7 = 4;
  strcpy((char *)&dword_25511C0, "tanh");
  strcpy((char *)&dword_2551190, "switch");
  byte_25511BF = 3;
  byte_25511AA = 110;
  byte_2551177 = 3;
  byte_255118F = 4;
  strcpy((char *)&dword_2551178, "swap");
  byte_25511A7 = 6;
  byte_2551162 = 109;
  word_2551160 = 30067;
  byte_2551163 = 0;
  strcpy((char *)&dword_2551130, "sinh");
  byte_255115F = 4;
  strcpy((char *)&dword_2551148, "sqrt");
  byte_2551103 = 0;
  byte_255112F = 4;
  strcpy((char *)&dword_2551118, "sinc");
  byte_2551147 = 4;
  byte_2551075 = 0;
  byte_255109F = 6;
  byte_25510EA = 114;
  byte_25510EB = 0;
  byte_2551117 = 3;
  byte_2551102 = 110;
  byte_25510E7 = 3;
  byte_25510D2 = 108;
  byte_25510D3 = 0;
  byte_25510FF = 3;
  byte_25510A3 = 0;
  byte_25510CF = 3;
  byte_25510BA = 110;
  word_25510B8 = 26483;
  byte_25510BB = 0;
  strcpy((char *)&dword_2551088, "roundn");
  byte_25510B7 = 3;
  byte_25510A2 = 99;
  word_25510A0 = 25971;
  dword_2551A48 = 1635086693;
  byte_2551A62 = 102;
  word_2551A60 = 29285;
  strcpy((char *)&dword_2551A78, "erfc");
  word_2551A90 = 30821;
  byte_2551AAC = 49;
  dword_2551AA8 = 1836087397;
  dword_2551AC0 = 1869573222;
  strcpy((char *)&dword_2551AD8, "frac");
  dword_2551AF0 = 1869642088;
  strcpy((char *)&dword_2551B08, "iclamp");
  strcpy((char *)&dword_25516E8, "like");
  strcpy((char *)&dword_2551B20, "like");
  byte_2551B3A = 103;
  word_2551B38 = 28524;
  byte_2551B54 = 48;
  strcpy((char *)&dword_2551B68, "log2");
  strcpy((char *)&dword_2551B80, "logn");
  byte_2551A92 = 112;
  byte_2551B9C = 112;
  dword_2551B50 = 828862316;
  dword_2551B98 = 828862316;
  strcpy((char *)&dword_2551BB0, "mand");
  byte_2551BCA = 120;
  word_2551BC8 = 24941;
  word_2551BE0 = 26989;
  word_2551BF8 = 28525;
  word_2551C10 = 28525;
  word_2551C28 = 30061;
  strcpy((char *)&dword_2551C40, "ncdf");
  byte_2551C5A = 119;
  word_2551C58 = 28528;
  strcpy((char *)&dword_2551C70, "root");
  dword_2551C88 = 1853190002;
  strcpy((char *)&dword_2551CA0, "roundn");
  word_2551CB8 = 25971;
  word_2551CD0 = 26483;
  word_2551CE8 = 26995;
  strcpy((char *)&dword_2551D00, "sinc");
  strcpy((char *)&dword_2551D18, "sinh");
  strcpy((char *)&dword_2551D30, "sqrt");
  byte_2551D4A = 109;
  word_2551D48 = 30067;
  strcpy((char *)&dword_25517F0, "swap");
  strcpy((char *)&dword_2551D60, "swap");
  byte_2551BE2 = 110;
  byte_2551CD2 = 110;
  byte_2551CEA = 110;
  byte_2551D7A = 110;
  word_2551D78 = 24948;
  strcpy((char *)&dword_2551D90, "tanh");
  byte_2551CBA = 99;
  byte_2551DAC = 99;
  dword_2551DA8 = 1853190772;
  strcpy(&byte_2551DD7, "\tinrange");
  byte_25517C2 = 108;
  byte_255183C = 108;
  byte_2551A4C = 108;
  byte_2551C2A = 108;
  strcpy((char *)&qword_2551DC0, "not_equal");
  strcpy((char *)&qword_2551DF0, "deg2grad");
  strcpy((char *)&dword_2551E08, "deg2rad");
  byte_2551657 = 7;
  byte_2551DEF = 7;
  byte_2551E1F = 7;
  byte_2551E37 = 7;
  strcpy((char *)&dword_2551E20, "rad2deg");
  byte_255163F = 8;
  byte_2551E07 = 8;
  byte_2551E4F = 8;
  strcpy((char *)&qword_2551E38, "grad2deg");
  byte_2551702 = 100;
  byte_2551BFA = 100;
  byte_2551C8C = 100;
  byte_2551522 = 100;
  word_2551700 = 28257;
  word_2551520 = 28257;
  strcpy((char *)&dword_2551718, "nand");
  strcpy((char *)&dword_2551538, "nand");
  byte_2551AF4 = 116;
  byte_255156A = 116;
  word_2551550 = 28526;
  word_2551568 = 28526;
  strcpy((char *)&word_2551778, "or");
  strcpy((char *)&word_2551580, "or");
  byte_2551627 = 4;
  byte_25516B7 = 4;
  byte_25516FF = 4;
  byte_255172F = 4;
  byte_2551777 = 4;
  byte_2551807 = 4;
  byte_2551837 = 4;
  byte_2551897 = 4;
  byte_2551A8F = 4;
  byte_2551AEF = 4;
  byte_2551B37 = 4;
  byte_2551B7F = 4;
  byte_2551B97 = 4;
  byte_2551BC7 = 4;
  byte_2551C57 = 4;
  byte_2551C87 = 4;
  byte_2551D17 = 4;
  byte_2551D2F = 4;
  byte_2551D47 = 4;
  byte_2551D77 = 4;
  byte_2551DA7 = 4;
  byte_255154F = 4;
  byte_25515AF = 4;
  strcpy((char *)&dword_2551880, "xnor");
  strcpy((char *)&dword_2551598, "xnor");
  word_2551898 = 28536;
  word_25515B0 = 28536;
  word_25518B0 = 38;
  word_25515C8 = 38;
  word_25518C8 = 124;
  word_25515E0 = 124;
  strcpy((char *)&word_2551688, "if");
  strcpy((char *)&word_25512B0, "if");
  strcpy((char *)&dword_2551808, "switch");
  strcpy((char *)&dword_25512C8, "switch");
  byte_2551687 = 3;
  byte_2551717 = 3;
  byte_2551747 = 3;
  byte_255175F = 3;
  byte_25517D7 = 3;
  byte_25517EF = 3;
  byte_2551867 = 3;
  byte_25518AF = 3;
  byte_2551A77 = 3;
  byte_2551AA7 = 3;
  byte_2551B4F = 3;
  byte_2551BDF = 3;
  byte_2551BF7 = 3;
  byte_2551C0F = 3;
  byte_2551C27 = 3;
  byte_2551C3F = 3;
  byte_2551C6F = 3;
  byte_2551CCF = 3;
  byte_2551CE7 = 3;
  byte_2551CFF = 3;
  byte_2551D5F = 3;
  byte_2551D8F = 3;
  byte_2551537 = 3;
  byte_2551567 = 3;
  byte_255157F = 3;
  byte_25515C7 = 3;
  byte_25512F7 = 3;
  byte_2551672 = 114;
  byte_25517DA = 114;
  byte_2551852 = 114;
  byte_255189A = 114;
  byte_2551AC4 = 114;
  byte_2551C12 = 114;
  byte_2551552 = 114;
  byte_25515B2 = 114;
  byte_25512E2 = 114;
  word_2551670 = 28518;
  word_25512E0 = 28518;
  byte_255160F = 5;
  byte_255166F = 5;
  byte_25516CF = 5;
  byte_255184F = 5;
  byte_255187F = 5;
  byte_2551A5F = 5;
  byte_2551ABF = 5;
  byte_2551AD7 = 5;
  byte_2551B07 = 5;
  byte_2551B67 = 5;
  byte_2551BAF = 5;
  byte_2551C9F = 5;
  byte_2551DBF = 5;
  byte_255130F = 5;
  byte_255186C = 101;
  byte_25512FC = 101;
  dword_2551868 = 1818847351;
  dword_25512F8 = 1818847351;
  strcpy((char *)&dword_2551790, "repeat");
  strcpy((char *)&dword_2551310, "repeat");
  byte_25517A7 = 6;
  byte_25517BF = 6;
  byte_255181F = 6;
  byte_2551B1F = 6;
  byte_2551CB7 = 6;
  byte_25512DF = 6;
  byte_2551327 = 6;
  byte_255133F = 6;
  strcpy((char *)&dword_25517A8, "return");
  strcpy((char *)&dword_2551328, "return");
  word_2551340 = 43;
  word_2551358 = 45;
  word_2551370 = 42;
  word_2551388 = 47;
  word_25513A0 = 37;
  word_25513B8 = 94;
  strcpy((char *)&word_25513D0, ":=");
  strcpy((char *)&word_25513E8, "+=");
  strcpy((char *)&word_2551400, "-=");
  strcpy((char *)&word_2551418, "*=");
  strcpy((char *)&word_2551430, "/=");
  strcpy((char *)&word_2551448, "%=");
  word_2551460 = 60;
  strcpy((char *)&word_2551478, "<=");
  strcpy((char *)&word_2551490, "==");
  word_25514A8 = 61;
  strcpy((char *)&word_25514C0, "!=");
  strcpy((char *)&word_25514D8, "<>");
  byte_255169F = 2;
  byte_25516E7 = 2;
  byte_255178F = 2;
  byte_2551597 = 2;
  byte_25512C7 = 2;
  byte_25513E7 = 2;
  byte_25513FF = 2;
  byte_2551417 = 2;
  byte_255142F = 2;
  byte_2551447 = 2;
  byte_255145F = 2;
  byte_255148F = 2;
  byte_25514A7 = 2;
  byte_25514D7 = 2;
  byte_25514EF = 2;
  byte_2551507 = 2;
  strcpy((char *)&word_25514F0, ">=");
  byte_2551853 = 0;
  byte_255189B = 0;
  byte_25518C7 = 1;
  byte_25518DF = 1;
  byte_255186D = 0;
  byte_25515DF = 1;
  byte_25515F7 = 1;
  byte_2551357 = 1;
  byte_255136F = 1;
  byte_2551387 = 1;
  byte_255139F = 1;
  byte_25513B7 = 1;
  byte_25513CF = 1;
  byte_2551477 = 1;
  byte_25514BF = 1;
  byte_255151F = 1;
  word_2551508 = 62;
  byte_255183D = 0;
  byte_2551673 = 0;
  byte_2551703 = 0;
  byte_25517DB = 0;
  byte_25517C3 = 0;
  byte_2551A4D = 0;
  byte_2551A63 = 0;
  byte_2551A93 = 0;
  byte_2551AAD = 0;
  byte_2551AC5 = 0;
  byte_2551AF5 = 0;
  byte_2551B3B = 0;
  byte_2551B55 = 0;
  byte_2551B9D = 0;
  byte_2551BCB = 0;
  byte_2551BE3 = 0;
  byte_2551BFB = 0;
  byte_2551C13 = 0;
  byte_2551C2B = 0;
  byte_2551C5B = 0;
  byte_2551C8D = 0;
  byte_2551CBB = 0;
  byte_2551CD3 = 0;
  byte_2551CEB = 0;
  byte_2551D4B = 0;
  byte_2551D7B = 0;
  byte_2551DAD = 0;
  byte_2551523 = 0;
  byte_2551553 = 0;
  byte_255156B = 0;
  byte_25515B3 = 0;
  byte_25512E3 = 0;
  byte_25512FD = 0;
  return result;
}

double sub_92054(uint64_t a1, int a2)
{
  double result = (double)a2 / 1000.0;
  *(double *)(a1 + 520) = result;
  return result;
}

double sub_92070(uint64_t a1, int a2)
{
  double result = (double)a2 / 1000.0;
  *(double *)(a1 + 40) = result;
  return result;
}

double sub_9208C(uint64_t a1, int a2)
{
  double result = (double)a2 / 1000.0;
  *(double *)(a1 + 528) = result;
  return result;
}

double sub_920A8(uint64_t a1, int a2)
{
  double result = (double)a2 / 1000.0;
  *(double *)(a1 + 536) = result;
  return result;
}

double sub_920C4(uint64_t a1, int a2, int a3)
{
  double v3 = 0.0;
  if (a2 == 2) {
    double v3 = 1.0;
  }
  *(double *)(a1 + 560) = v3;
  double result = (double)a3 / 1000.0;
  *(double *)(a1 + 544) = result;
  return result;
}

double sub_920F4(uint64_t a1, int a2)
{
  double result = (double)a2 / 1000.0;
  *(double *)(a1 + 552) = result;
  return result;
}

double sub_92110(uint64_t a1, int a2)
{
  double result = (double)a2 / 10.0;
  *(double *)(a1 + 568) = result;
  return result;
}

void sub_92124(uint64_t a1, int a2, int a3, int a4)
{
}

void sub_92284(_Unwind_Exception *a1)
{
  uint64_t v7 = v1[81];
  v1[81] = 0;
  if (v7) {
    operator delete();
  }
  uint64_t v8 = *v5;
  if (*v5)
  {
    v1[77] = v8;
    operator delete(v8);
    uint64_t v9 = *v4;
    if (!*v4)
    {
LABEL_4:
      uint64_t v10 = *v3;
      if (!*v3) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = *v4;
    if (!*v4) {
      goto LABEL_4;
    }
  }
  v1[74] = v9;
  operator delete(v9);
  uint64_t v10 = *v3;
  if (!*v3)
  {
LABEL_5:
    uint64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  v1[62] = v10;
  operator delete(v10);
  uint64_t v11 = *v2;
  if (!*v2)
  {
LABEL_6:
    sub_A5E7C((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_11:
  v1[58] = v11;
  operator delete(v11);
  sub_A5E7C((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_92350(_Unwind_Exception *a1)
{
  sub_A5E7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_92364(void *a1)
{
  uint64_t v2 = a1[81];
  a1[81] = 0;
  if (v2) {
    operator delete();
  }
  double v3 = (void *)a1[76];
  if (v3)
  {
    a1[77] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[73];
  if (v4)
  {
    a1[74] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[61];
  if (v5)
  {
    a1[62] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[57];
  if (v6)
  {
    a1[58] = v6;
    operator delete(v6);
  }

  return sub_A5E7C((uint64_t)a1);
}

void sub_923F8(void *a1)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "battery_initial_energy_wh");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 65));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "battery_target_energy_wh");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 66));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "charger_max_voltage_v");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 67));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "charger_max_current_a");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 68));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "charger_max_power_w");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 69));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "charger_supports_dc_charging");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 70));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "trip_remaining_time_before_stop_s");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 71));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "out_linear_charging_curve_initialization_time_s");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 72));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "out_linear_charging_curve_time_s");
  sub_A6200((uint64_t)a1, (uint64_t *)__p, a1 + 73);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "out_linear_charging_curve_energy_wh");
  sub_A6200((uint64_t)a1, (uint64_t *)__p, a1 + 76);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "out_charging_time_s");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 79));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "out_energy_after_charging_wh");
  sub_A6000((uint64_t)a1, (uint64_t *)__p, (uint64_t)(a1 + 80));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "power_function_add_constant_segment");
  sub_A8ECC((uint64_t)a1, __p, a1[81]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "power_function_add_linear_segment");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 56);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "power_function_cap");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 112);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "power_function_transform_to_charging_function");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 168);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "charging_function_add_linear_segment");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 232);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "charging_function_add_polynomial_segment");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 288);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93D0;
  strcpy((char *)__p[0], "charging_function_add_logarithmic_segment");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 344);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "evaluate_charging_function");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 400);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "charging_function_transform_to_linear_curve");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 472);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "state_of_charge_to_energy_wh");
  sub_A8ECC((uint64_t)a1, __p, a1[81] + 544);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_92B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_92BAC(void *a1)
{
  sub_923F8(a1);

  sub_A7920((uint64_t)a1);
}

uint64_t sub_92BE4(uint64_t a1)
{
  sub_65FB4((void *)(a1 + 456));
  sub_65FB4((void *)(a1 + 488));
  *(void *)(a1 + 632) = 0x7FF0000000000000;
  *(void *)(a1 + 640) = 0x7FF0000000000000;
  *(void *)(a1 + 576) = 0;
  uint64_t v2 = *(void **)(a1 + 584);
  uint64_t v3 = *(void *)(a1 + 592) - (void)v2;
  if (v3 >= 1) {
    memset_pattern16(v2, &unk_20B92C0, 8 * (((unint64_t)v3 >> 3) - ((unint64_t)v3 > 7)) + 8);
  }
  unint64_t v4 = *(void **)(a1 + 608);
  uint64_t v5 = *(void *)(a1 + 616) - (void)v4;
  if (v5 >= 1) {
    memset_pattern16(v4, &unk_20B92C0, 8 * (((unint64_t)v5 >> 3) - ((unint64_t)v5 > 7)) + 8);
  }
  unsigned int v6 = *(double *)(a1 + 560) != 0.0;

  return sub_A7C58(a1, v6);
}

BOOL sub_92CB4(void *a1)
{
  sub_923F8(a1);
  sub_A7920((uint64_t)a1);
  long long __p = operator new(0x20uLL);
  long long v4 = xmmword_20B8890;
  strcpy((char *)__p, "EV charging model compilation");
  sub_A50CC((uint64_t)(a1 + 45), (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  return !sub_A4F8C((uint64_t)a1);
}

void sub_92D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_92D68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v14 = a1;
  sub_65FD8((uint64_t)a1);
  sub_66188((uint64_t)a1, v6);
  double v8 = v7 * 0.00001;
  if (sub_660B4(a1, v7 * 0.00001))
  {
    if (sub_65FE8((uint64_t)a1, 0, v8)) {
      return 1;
    }
    sub_9314C((uint64_t)v10, &v14);
    sub_93430("Custom function ", a2, " called on a charging function with the following subdomains:", (uint64_t)v10, " but this function is not monotonically increasing.");
    sub_A5034(a3, (uint64_t)__p);
  }
  else
  {
    sub_9314C((uint64_t)v10, &v14);
    sub_92F1C("Custom function ", a2, " called on a charging function with the following subdomains: ", (uint64_t)v10, " but this function is not continuous.");
    sub_A5034(a3, (uint64_t)__p);
  }
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0) {
      return 0;
    }
LABEL_10:
    operator delete(v10[0]);
    return 0;
  }
  if (v11 < 0) {
    goto LABEL_10;
  }
  return 0;
}

void sub_92EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_92F1C(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v21);
  size_t v10 = strlen(a1);
  sub_188FC78(v22, (uint64_t)a1, v10);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  sub_188FC78(v22, v12, v13);
  size_t v14 = strlen(a3);
  sub_188FC78(v22, (uint64_t)a3, v14);
  int v15 = *(char *)(a4 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = *(void *)a4;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a4 + 8);
  }
  sub_188FC78(v22, v16, v17);
  size_t v18 = strlen(a5);
  sub_188FC78(v22, (uint64_t)a5, v18);
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v19;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_93124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_93138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9314C(uint64_t a1, uint64_t **a2)
{
  sub_E1B4((uint64_t)v15);
  v14[0] = sub_65F44(*a2);
  v14[1] = v3;
  while (1)
  {
    v13[0] = sub_65F7C((uint64_t)*a2);
    v13[1] = v4;
    if (!sub_66AFC((uint64_t)v14, (uint64_t)v13)) {
      break;
    }
    double v5 = sub_66B10(v14);
    double v6 = sub_66B3C(v14);
    sub_188FC78(v16, (uint64_t)" energy range [", 15);
    double v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)", ", 2);
    double v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)"] Wh, time range [", 18);
    sub_66B94(v14, v5);
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)", ", 2);
    sub_66B94(v14, v6);
    size_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)"] seconds;", 10);
    sub_669F8((uint64_t)v14);
  }
  std::stringbuf::str();
  *(void *)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_933B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_933CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_933E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_933F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_93408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_93430(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v21);
  size_t v10 = strlen(a1);
  sub_188FC78(v22, (uint64_t)a1, v10);
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(void *)a2;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  sub_188FC78(v22, v12, v13);
  size_t v14 = strlen(a3);
  sub_188FC78(v22, (uint64_t)a3, v14);
  int v15 = *(char *)(a4 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = *(void *)a4;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a4 + 8);
  }
  sub_188FC78(v22, v16, v17);
  size_t v18 = strlen(a5);
  sub_188FC78(v22, (uint64_t)a5, v18);
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v19;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_93638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9364C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_93660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(_WORD *)(a1 + 8) = 256;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_20B93F0;
  *(void *)(a1 + 32) = 2;
  *(void *)(a1 + 40) = a2;
  *(void *)a1 = off_23FE5C8;
  *(_WORD *)(a1 + 64) = 256;
  *(_OWORD *)(a1 + 72) = xmmword_20B93F0;
  *(void *)(a1 + 88) = 3;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 48) = a9;
  *(void *)(a1 + 56) = off_23FE6D0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_20B93F0;
  *(void *)(a1 + 144) = 1;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 104) = a9;
  *(void *)(a1 + 112) = off_23FE7B0;
  *(unsigned char *)(a1 + 121) = 1;
  *(_WORD *)(a1 + 176) = 256;
  *(_OWORD *)(a1 + 184) = xmmword_20B93F0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a2;
  *(void *)(a1 + 160) = a9;
  *(void *)(a1 + 168) = off_23FE890;
  *(void *)(a1 + 216) = a3;
  *(void *)(a1 + 224) = a9;
  *(_WORD *)(a1 + 240) = 256;
  *(_OWORD *)(a1 + 248) = xmmword_20B93F0;
  *(void *)(a1 + 264) = 2;
  *(void *)(a1 + 272) = a3;
  *(void *)(a1 + 232) = off_23FE970;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = xmmword_20B93F0;
  *(void *)(a1 + 320) = 5;
  *(void *)(a1 + 328) = a3;
  *(void *)(a1 + 280) = a9;
  *(void *)(a1 + 288) = off_23FEA50;
  *(unsigned char *)(a1 + 297) = 1;
  *(_WORD *)(a1 + 352) = 256;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_20B9400;
  *(void *)(a1 + 336) = a9;
  *(void *)(a1 + 344) = off_23FEB30;
  *(void *)(a1 + 384) = a3;
  *(void *)(a1 + 392) = a9;
  *(_WORD *)(a1 + 408) = 256;
  *(_OWORD *)(a1 + 416) = xmmword_20B93F0;
  *(void *)(a1 + 432) = 2;
  *(void *)(a1 + 440) = a3;
  *(void *)(a1 + 400) = off_23FEC10;
  *(void *)(a1 + 448) = a4;
  *(void *)(a1 + 456) = a5;
  *(_WORD *)(a1 + 480) = 256;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_20B9410;
  *(void *)(a1 + 464) = a9;
  *(void *)(a1 + 472) = off_23FECF0;
  *(void *)(a1 + 512) = a3;
  *(void *)(a1 + 520) = a6;
  *(void *)(a1 + 528) = a7;
  *(void *)(a1 + 536) = a9;
  *(_WORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_20B93F0;
  *(void *)(a1 + 576) = 1;
  *(void *)(a1 + 544) = off_23FEDD0;
  *(void *)(a1 + 584) = a8;
  *(void *)(a1 + 592) = a9;
  return result;
}

void sub_93898()
{
}

double sub_938AC()
{
  return NAN;
}

double sub_938B8()
{
  return NAN;
}

double sub_938C4(uint64_t a1, double *a2, double *a3)
{
  if (*a2 <= 0.0 || *a3 <= 0.0)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    sub_93AE4("Custom function power_function_add_constant_segment() expects strictly positive arguments, got energy ", (uint64_t)a2, " Wh and power ", (uint64_t)a3, " W instead.");
    sub_A4F9C(v6, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v7 = sub_65FC8(*(void **)(a1 + 40));
  double v8 = 0.0;
  if (v7) {
    sub_65FD8(*(void *)(a1 + 40));
  }
  double v9 = *a2;
  if (*a2 > v8 && *a3 > 0.0)
  {
    uint64_t v10 = *(void *)(a1 + 40);
    __p[0] = *(void **)a3;
    int v14 = 0;
    sub_66234(v10, (long long *)__p, v8, v9);
  }
  return 0.0;
}

void sub_939D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_93A00()
{
  return NAN;
}

double sub_93A0C()
{
  return NAN;
}

double sub_93A18()
{
  return NAN;
}

double sub_93A24()
{
  return NAN;
}

double sub_93A30()
{
  return NAN;
}

double sub_93A3C()
{
  return NAN;
}

double sub_93A48()
{
  return NAN;
}

double sub_93A54()
{
  return NAN;
}

double sub_93A60()
{
  return NAN;
}

double sub_93A6C()
{
  return NAN;
}

double sub_93A78()
{
  return NAN;
}

double sub_93A84()
{
  return NAN;
}

double sub_93A90()
{
  return NAN;
}

double sub_93A9C()
{
  return NAN;
}

double sub_93AA8()
{
  return NAN;
}

double sub_93AB4()
{
  return NAN;
}

double sub_93AC0()
{
  return NAN;
}

double sub_93ACC()
{
  return NAN;
}

double sub_93AD8()
{
  return NAN;
}

uint64_t sub_93AE4(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_93CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_93CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_93CEC()
{
}

double sub_93D00(uint64_t a1, double *a2, double *a3, double *a4)
{
  if (*a2 <= 0.0 || *a3 < 0.0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    sub_93EF0("Custom function power_function_add_linear_segment() expects strictly positive energy argument and non-negative power argument, got energy ", (uint64_t)a2, " Wh and power ", (uint64_t)a3, " W instead.");
    sub_A4F9C(v8, (uint64_t)__p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v9 = sub_65FC8(*(void **)(a1 + 40));
  double v10 = 0.0;
  if (v9) {
    sub_65FD8(*(void *)(a1 + 40));
  }
  double v11 = *a2;
  if (*a3 >= 0.0) {
    double v12 = *a3;
  }
  else {
    double v12 = 0.0;
  }
  if (v11 > v10)
  {
    double v13 = *a4;
    if (fabs(*a4) <= 0.00001)
    {
      if (*a3 <= 0.0)
      {
        uint64_t v16 = *(void *)(a1 + 48);
        sub_940F8("Custom function power_function_add_linear_segment() expects that either the power or the slope argument is not zero, got power ", (uint64_t)a3, " W and slope ", (uint64_t)a4, " instead.");
        sub_A5034(v16, (uint64_t)__p);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 40);
        __p[0] = *(void **)a3;
        int v20 = 0;
        sub_66234(v15, (long long *)__p, v10, v11);
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 40);
      __p[0] = *(void **)a4;
      *(double *)&__p[1] = v12 - v11 * v13;
      int v20 = 1;
      sub_66234(v14, (long long *)__p, v10, v11);
    }
  }
  return 0.0;
}

void sub_93EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_93EF0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_940D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_940E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_940F8(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_942D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_942EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94300()
{
}

double sub_94314(uint64_t a1, double *a2)
{
  if (sub_65FC8(*(void **)(a1 + 40)))
  {
    if (*a2 > 0.0)
    {
      sub_662E4(*(void **)(a1 + 40), (uint64_t *)__p, *a2);
      uint64_t v4 = *(void *)(a1 + 40);
      double v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + 8) = v5;
        operator delete(v5);
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
      }
      *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
      *(void *)(v4 + 16) = *(void *)&__p[16];
      *(void *)(v4 + 24) = v10;
      return 0.0;
    }
    uint64_t v8 = *(void *)(a1 + 48);
    sub_9445C("Custom function power_function_cap() expects strictly positive power argument, got ", (uint64_t)a2, " W instead.");
    sub_A5034(v8, (uint64_t)__p);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    *(void *)long long __p = operator new(0x50uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9420;
    strcpy(*(char **)__p, "Custom function power_function_cap() called on an uninitialized power function.");
    sub_A4F9C(v7, (uint64_t)__p);
  }
  if ((__p[23] & 0x80000000) == 0) {
    return 0.0;
  }
  operator delete(*(void **)__p);
  return 0.0;
}

void sub_9443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9445C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_94608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9461C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94630()
{
}

double sub_94644(uint64_t a1)
{
  if (sub_65FC8(*(void **)(a1 + 40)))
  {
    if (sub_65FC8(*(void **)(a1 + 48)))
    {
      uint64_t v2 = *(void *)(a1 + 56);
      *(void *)long long __p = operator new(0x70uLL);
      *(_OWORD *)&__p[8] = xmmword_20B9440;
      strcpy(*(char **)__p, "Custom function power_function_transform_to_charging_function() overwrites an existing charging function.");
      sub_A4F9C(v2, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_65FB4(*(void **)(a1 + 48));
    }
    v28[0] = sub_65F44(*(uint64_t **)(a1 + 40));
    v28[1] = v3;
    *(void *)long long __p = sub_65F7C(*(void *)(a1 + 40));
    *(void *)&__p[8] = v4;
    if (sub_66AFC((uint64_t)v28, (uint64_t)__p))
    {
      double v5 = 0.0;
      do
      {
        uint64_t v6 = sub_66A08(v28);
        double v7 = sub_66B10(v28);
        double v27 = v7;
        double v26 = 0.0;
        double v26 = sub_66B3C(v28);
        int v8 = *(_DWORD *)(v6 + 32);
        if (!v8) {
          goto LABEL_11;
        }
        if (v8 != 1)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        if (*(double *)v6 != 0.0)
        {
          if (sub_65CCC((double *)v6, v7) < 0.00001)
          {
            uint64_t v21 = *(void *)(a1 + 56);
            *(void *)&long long v23 = sub_65CCC((double *)v6, v7);
            sub_94AD8("Custom function power_function_transform_to_charging_function() called on a linear segment that is not strictly positive at its left sub-domain border ", (uint64_t)&v27, " Wh (function value: ", (uint64_t)&v23, " W).");
            sub_A5034(v21, (uint64_t)__p);
            goto LABEL_24;
          }
          if (sub_65CCC((double *)v6, v26) < -0.00001)
          {
            uint64_t v13 = *(void *)(a1 + 56);
            *(void *)&long long v23 = sub_65CCC((double *)v6, v26);
            sub_94CE0("Custom function power_function_transform_to_charging_function() called on a linear segment that is negative at its right sub-domain border ", (uint64_t)&v26, " Wh (function value: ", (uint64_t)&v23, " W).");
            sub_A4F9C(v13, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          double v14 = *(double *)v6;
          double v15 = -*(double *)(v6 + 8) / *(double *)v6;
          if (sub_65CCC((double *)v6, v26) >= 0.00001) {
            double v16 = v26;
          }
          else {
            double v16 = v15 * 0.995;
          }
          if (v7 >= v16) {
            return 0.0;
          }
          long double v17 = (v7 - v15) / exp(v5 * v14 / 3600.0);
          *(double *)&long long v23 = 3600.0 / v14;
          *((double *)&v23 + 1) = 1.0 / v17;
          *(double *)&unint64_t v24 = -v15 / v17;
          uint64_t v25 = 0;
          uint64_t v18 = *(void *)(a1 + 48);
          *(_OWORD *)long long __p = v23;
          *(_OWORD *)&__p[16] = v24;
          int v30 = 4;
          sub_66234(v18, (long long *)__p, v7, v16);
          double v5 = sub_65D24((double *)&v23, v16);
        }
        else
        {
LABEL_11:
          sub_66B94(v28, 0.0);
          double v10 = v5 + (v26 - v7) * 3600.0 / v9;
          uint64_t v11 = *(void *)(a1 + 48);
          *(double *)long long __p = (v10 - v5) / (v26 - v7);
          *(double *)&__p[8] = v10 - v26 * *(double *)__p;
          int v30 = 1;
          sub_66234(v11, (long long *)__p, v7, v26);
          double v5 = v10;
        }
        sub_669F8((uint64_t)v28);
        *(void *)long long __p = sub_65F7C(*(void *)(a1 + 40));
        *(void *)&__p[8] = v12;
      }
      while (sub_66AFC((uint64_t)v28, (uint64_t)__p));
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 56);
    *(void *)long long __p = operator new(0x70uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9430;
    strcpy(*(char **)__p, "Custom function power_function_transform_to_charging_function() called on an uninitialized power function.");
    sub_A4F9C(v19, (uint64_t)__p);
LABEL_24:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  return 0.0;
}

void sub_94A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_94AD8(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_94CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_94CE0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_94EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_94EE8()
{
}

double sub_94EFC(uint64_t a1, double *a2, double *a3)
{
  if (*a2 <= 0.0 || *a3 <= 0.0)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    sub_9506C("Custom function charging_function_add_linear_segment() expects strictly positive arguments, got energy ", (uint64_t)a2, " Wh and time ", (uint64_t)a3, " seconds instead.");
    sub_A4F9C(v6, (uint64_t)__p);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  double v7 = 0.0;
  if (sub_65FC8(*(void **)(a1 + 40)))
  {
    sub_65FD8(*(void *)(a1 + 40));
    double v7 = v8;
  }
  BOOL v9 = sub_65FC8(*(void **)(a1 + 40));
  double v10 = 0.0;
  if (v9) {
    sub_66188(*(void *)(a1 + 40), v7);
  }
  double v11 = *a2;
  if (*a2 > v7)
  {
    double v12 = (*a3 - v10) / (v11 - v7);
    double v13 = *a3 - v11 * v12;
    uint64_t v14 = *(void *)(a1 + 40);
    __p[0] = *(void **)&v12;
    __p[1] = *(void **)&v13;
    int v18 = 1;
    sub_66234(v14, (long long *)__p, v7, v11);
  }
  return 0.0;
}

void sub_95044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9506C(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9524C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_95260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_95274()
{
}

double sub_95288(uint64_t a1, double *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (*a2 <= 0.0)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    sub_953E4("Custom function charging_function_add_polynomial_segment() expects a strictly positive max_energy argument, got ", (uint64_t)a2, " Wh instead.");
    sub_A4F9C(v12, (uint64_t)&__p);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = *a6;
  BOOL v17 = sub_65FC8(*(void **)(a1 + 40));
  double v18 = 0.0;
  if (v17) {
    sub_65FD8(*(void *)(a1 + 40));
  }
  double v19 = *a2;
  if (*a2 > v18)
  {
    uint64_t v20 = *(void *)(a1 + 40);
    *(void *)&long long __p = v13;
    *((void *)&__p + 1) = v14;
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    int v25 = 2;
    sub_66234(v20, &__p, v18, v19);
  }
  return 0.0;
}

void sub_953BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_953E4(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_95590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_955A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_955B8()
{
}

double sub_955CC(uint64_t a1, double *a2, uint64_t *a3, double *a4, double *a5, uint64_t *a6)
{
  if (*a2 <= 0.0)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    sub_957C4("Custom function charging_function_add_logarithmic_segment() expects a strictly positive max_energy argument, got ", (uint64_t)a2, " Wh instead.");
    sub_A4F9C(v12, (uint64_t)&__p);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v13 = *a3;
  double v14 = *a4;
  double v15 = *a5;
  uint64_t v16 = *a6;
  BOOL v17 = sub_65FC8(*(void **)(a1 + 40));
  double v18 = 0.0;
  if (v17) {
    sub_65FD8(*(void *)(a1 + 40));
  }
  double v19 = *a2;
  double v23 = *a2;
  double v24 = v18;
  if (v18 * *a4 + *a5 <= 0.0 || v19 * *a4 + *a5 <= 0.0)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    sub_95998("Custom function charging_function_add_logarithmic_segment(max_energy, a, b, c, d) expects that b * x + c is strictly positive for all x in the sub-domain of the logarithmic segment, got b = ", (int)a4, ", c = ", (int)a5, ", and the sub-domain is [", (int)&v24, ", ", (int)&v23, "].");
    sub_A5034(v21, (uint64_t)&__p);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)__p);
    }
  }
  else if (v19 > v18)
  {
    uint64_t v20 = *(void *)(a1 + 40);
    *(void *)&long long __p = v13;
    *((double *)&__p + 1) = v14;
    double v26 = v15;
    uint64_t v27 = v16;
    int v28 = 4;
    sub_66234(v20, &__p, v18, v19);
  }
  return 0.0;
}

void sub_95794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_957C4(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_95970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_95984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_95998(const char *a1, int a2, const char *a3, int a4, const char *a5, int a6, const char *a7, int a8, char *__s)
{
  sub_E1B4((uint64_t)v20);
  size_t v13 = strlen(a1);
  sub_188FC78(v21, (uint64_t)a1, v13);
  std::ostream::operator<<();
  size_t v14 = strlen(a3);
  sub_188FC78(v21, (uint64_t)a3, v14);
  std::ostream::operator<<();
  size_t v15 = strlen(a5);
  sub_188FC78(v21, (uint64_t)a5, v15);
  std::ostream::operator<<();
  size_t v16 = strlen(a7);
  sub_188FC78(v21, (uint64_t)a7, v16);
  std::ostream::operator<<();
  size_t v17 = strlen(__s);
  sub_188FC78(v21, (uint64_t)__s, v17);
  std::stringbuf::str();
  *(void *)((char *)v20
  v21[0] = v18;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_95BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_95BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_95C00()
{
}

double sub_95C14(uint64_t a1, double *a2, double *a3)
{
  if (sub_65FC8(*(void **)(a1 + 40)))
  {
    size_t v6 = *(uint64_t **)(a1 + 40);
    long long __p = operator new(0x20uLL);
    long long v23 = xmmword_20B91B0;
    strcpy((char *)__p, "evaluate_charging_function()");
    char v7 = sub_92D68(v6, (uint64_t)&__p, *(void *)(a1 + 64));
    char v8 = v7;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(__p);
      if ((v8 & 1) == 0) {
        return 0.0;
      }
    }
    else if ((v7 & 1) == 0)
    {
      return 0.0;
    }
    double v10 = *a2;
    if (*a2 < -0.00001)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      sub_95E84("Custom function evaluate_charging_function() called with negative current energy (", (uint64_t)a2, " Wh).");
      sub_A4F9C(v11, (uint64_t)&__p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
      double v10 = *a2;
    }
    if (v10 > *a3 + 0.00001)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      sub_96058("Custom function evaluate_charging_function() expects current energy to be less than (or equal to) the target energy, got ", (uint64_t)a2, " Wh > ", (uint64_t)a3, " Wh.");
      sub_A4F9C(v12, (uint64_t)&__p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
    }
    double v13 = sub_65FD8(*(void *)(a1 + 40));
    sub_65FD8(*(void *)(a1 + 40));
    double v15 = *a3;
    if (v14 < *a3) {
      double v15 = v14;
    }
    if (v13 >= v15) {
      double v15 = v13;
    }
    **(double **)(a1 + 56) = v15;
    double v16 = *a2;
    if (v15 < *a2) {
      double v16 = v15;
    }
    double v17 = fmax(v16, 0.0);
    sub_66188(*(void *)(a1 + 40), v15);
    double v19 = v18;
    sub_66188(*(void *)(a1 + 40), v17);
    **(double **)(a1 + 48) = fmax(v19 - v20, 0.0);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 64);
    long long __p = operator new(0x60uLL);
    long long v23 = xmmword_20B9450;
    strcpy((char *)__p, "Custom function evaluate_charging_function() called on an uninitialized charging function");
    sub_A4F9C(v9, (uint64_t)&__p);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
  }
  return 0.0;
}

void sub_95E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_95E84(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_96030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96058(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_96238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9624C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96260()
{
}

double sub_96274(uint64_t a1, double *a2)
{
  uint64_t v4 = *(double ***)(a1 + 48);
  size_t v6 = *v4;
  size_t v5 = v4[1];
  if (*v4 == v5)
  {
    BOOL v9 = 0;
    double v14 = *(double ***)(a1 + 56);
    double v13 = *v14;
    uint64_t v12 = v14[1];
    if (v13 == v12) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = v6 + 1;
    do
    {
      double v8 = *(v7 - 1);
      BOOL v9 = v8 != INFINITY;
    }
    while (v8 == INFINITY && v7++ != v5);
    uint64_t v11 = *(double ***)(a1 + 56);
    double v13 = *v11;
    uint64_t v12 = v11[1];
    if (v13 == v12)
    {
LABEL_14:
      if (!v9) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
  }
  char v15 = v13;
  while (*v15 == INFINITY)
  {
    if (++v15 == v12) {
      goto LABEL_14;
    }
  }
LABEL_15:
  uint64_t v16 = *(void *)(a1 + 64);
  long long __p = operator new(0x68uLL);
  long long v47 = xmmword_20B9460;
  strcpy((char *)__p, "Custom function charging_function_transform_to_linear_curve() overwrites an existing charging curve.");
  sub_A4F9C(v16, (uint64_t)&__p);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  size_t v6 = *(double **)v17;
  uint64_t v18 = *(void *)(v17 + 8) - *(void *)v17;
  if (v18 >= 1) {
    memset_pattern16(v6, &unk_20B92C0, 8 * (((unint64_t)v18 >> 3) - ((unint64_t)v18 > 7)) + 8);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  double v13 = *(double **)v19;
  uint64_t v20 = *(void *)(v19 + 8) - *(void *)v19;
  if (v20 >= 1) {
    memset_pattern16(v13, &unk_20B92C0, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
  }
LABEL_21:
  *double v13 = 0.0;
  *size_t v6 = 0.0;
  if (sub_65FC8(*(void **)(a1 + 40)))
  {
    uint64_t v21 = *(uint64_t **)(a1 + 40);
    long long __p = operator new(0x30uLL);
    long long v47 = xmmword_20B93B0;
    strcpy((char *)__p, "charging_function_transform_to_linear_curve()");
    char v22 = sub_92D68(v21, (uint64_t)&__p, *(void *)(a1 + 64));
    char v23 = v22;
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p);
      if ((v23 & 1) == 0) {
        return 0.0;
      }
    }
    else if ((v22 & 1) == 0)
    {
      return 0.0;
    }
    v45[0] = sub_65F44(*(uint64_t **)(a1 + 40));
    v45[1] = v25;
    long long __p = (void *)sub_65F7C(*(void *)(a1 + 40));
    *(void *)&long long v47 = v26;
    if (!sub_66AE8((uint64_t)v45, (uint64_t)&__p)) {
      return 0.0;
    }
    int v27 = 1;
    while (1)
    {
      unsigned int v29 = *a2;
      unsigned int v30 = sub_66BDC(v45) ? 1 : v29 + 1;
      double v31 = sub_66B3C(v45);
      double v32 = sub_66B10(v45);
      if (v30) {
        break;
      }
LABEL_31:
      sub_669F8((uint64_t)v45);
      long long __p = (void *)sub_65F7C(*(void *)(a1 + 40));
      *(void *)&long long v47 = v28;
      if (!sub_66AE8((uint64_t)v45, (uint64_t)&__p)) {
        return 0.0;
      }
    }
    int v33 = 0;
    double v34 = (v31 - v32) / (double)v30;
    BOOL v35 = *(uint64_t **)(a1 + 48);
    uint64_t v36 = *v35;
    while (1)
    {
      unint64_t v37 = (v27 + v33);
      unint64_t v38 = (v35[1] - v36) >> 3;
      if (v38 <= v37) {
        break;
      }
      double v39 = v34 * (double)++v33 + sub_66B10(v45);
      sub_66B94(v45, v39);
      uint64_t v40 = 8 * v37;
      *(double *)(**(void **)(a1 + 56) + v40) = v39;
      BOOL v35 = *(uint64_t **)(a1 + 48);
      uint64_t v36 = *v35;
      *(void *)(*v35 + v40) = v41;
      if (v30 == v33)
      {
        v27 += v33;
        goto LABEL_31;
      }
    }
    uint64_t v43 = *(void *)(a1 + 64);
    unint64_t v44 = v38;
    sub_96670("EV charging curve exceeds the maximum allowed charging curve length (", (uint64_t)&v44, ").");
    sub_A5034(v43, (uint64_t)&__p);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 64);
    long long __p = operator new(0x70uLL);
    long long v47 = xmmword_20B9470;
    strcpy((char *)__p, "Custom function charging_function_transform_to_linear_curve() called on an uninitialized charging function.");
    sub_A4F9C(v24, (uint64_t)&__p);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(__p);
  }
  return 0.0;
}

void sub_96648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_96670(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9681C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96848()
{
}

double sub_9685C(uint64_t a1, double *a2)
{
  if ((*a2 < -0.00001 || *a2 > 100.00001)
    && (uint64_t v4 = *(void *)(a1 + 48),
        sub_969A0("Input parameter to custom function state_of_charge_to_energy_wh() is expected to be a percentage in the range [0, 100], got ", (uint64_t)a2, "."), sub_A4F9C(v4, (uint64_t)__p), v9 < 0))
  {
    operator delete(__p[0]);
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      return (double)(int)sub_286C14(v5, *a2, 10.0) / 1000.0;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      return (double)(int)sub_286C14(v5, *a2, 10.0) / 1000.0;
    }
  }
  uint64_t v7 = *(void *)(a1 + 48);
  sub_96B74("Custom function state_of_charge_to_energy_wh() called without initializing the state of charge conversion model.");
  sub_A5034(v7, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_96980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_969A0(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_96B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_96B74(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_96CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_96D18(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  double v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      double v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int64x2_t v18 = vdupq_lane_s64(*a3, 0);
      uint64_t v19 = (int64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        int64x2_t *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      double v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    char v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_188D718();
      }
      char v15 = (char *)operator new(8 * v14);
    }
    else
    {
      char v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    char v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    int v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      int64x2_t *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      double v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      double v32 = &v15[8 * v11 - 16];
      int v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)double v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

uint64_t sub_96F94()
{
  strcpy((char *)&dword_25529C0, "break");
  strcpy((char *)&dword_25529D8, "case");
  strcpy((char *)&qword_25529F0, "continue");
  strcpy((char *)&dword_2552A08, "default");
  uint64_t result = 4;
  strcpy((char *)&dword_2552A20, "false");
  strcpy((char *)&dword_2552A68, "else");
  strcpy((char *)&dword_2552A80, "ilike");
  strcpy((char *)&word_2552A98, "in");
  dword_2552AF8 = 7499630;
  dword_2552B10 = 7630702;
  strcpy((char *)&dword_2552B28, "null");
  word_2552B88 = 26739;
  word_2552BA0 = 26739;
  strcpy((char *)&dword_2552BE8, "true");
  dword_2552C00 = 1769238133;
  word_2552C18 = 24950;
  byte_2551E67 = 3;
  byte_2551E52 = 115;
  word_2551E50 = 25185;
  byte_2551E53 = 0;
  byte_2551E7F = 4;
  strcpy((char *)&dword_2551E68, "acos");
  byte_2551E97 = 5;
  byte_2551F44 = 107;
  byte_2551E84 = 104;
  dword_2551E80 = 1936679777;
  byte_2551E85 = 0;
  byte_2551EAF = 3;
  byte_2551E9A = 100;
  word_2551E98 = 28257;
  byte_2551E9B = 0;
  byte_2551EC7 = 4;
  dword_2551F40 = 1634038370;
  strcpy((char *)&dword_2551EB0, "asin");
  byte_2551EDF = 5;
  byte_2551ECC = 104;
  dword_2551EC8 = 1852404577;
  byte_2551ECD = 0;
  byte_2551EF7 = 4;
  strcpy((char *)&dword_2551F58, "case");
  strcpy((char *)&dword_2551EE0, "atan");
  byte_2551F0F = 5;
  byte_2551EFC = 104;
  dword_2551EF8 = 1851880545;
  byte_2551EFD = 0;
  byte_2551F27 = 5;
  strcpy((char *)&qword_2551FA0, "continue");
  byte_2551F14 = 50;
  dword_2551F10 = 1851880545;
  byte_2551F15 = 0;
  byte_2551F3F = 3;
  strcpy((char *)&dword_2552018, "default");
  byte_2551F2A = 103;
  dword_25520D8 = 1936482662;
  word_2551F28 = 30305;
  byte_2551F2B = 0;
  byte_2551F57 = 5;
  byte_2551F45 = 0;
  byte_2551F6F = 4;
  byte_2551F87 = 4;
  strcpy((char *)&dword_2552198, "else");
  strcpy((char *)&dword_2551F70, "ceil");
  byte_2551F9F = 5;
  dword_25521B0 = 1802071145;
  byte_2551F8C = 112;
  strcpy((char *)&word_25521C8, "in");
  dword_2551F88 = 1835101283;
  byte_2551F8D = 0;
  byte_2551FB7 = 8;
  byte_2551FCF = 3;
  byte_2551FBA = 115;
  word_2551FB8 = 28515;
  byte_2551FBB = 0;
  byte_2551FE7 = 4;
  word_2552498 = 26739;
  word_25524B0 = 26739;
  strcpy((char *)&dword_2551FD0, "cosh");
  byte_2551FFF = 3;
  strcpy((char *)&dword_25525A0, "true");
  byte_2551FEA = 116;
  word_2551FE8 = 28515;
  byte_2551FEB = 0;
  byte_2552017 = 3;
  dword_25525D0 = 1769238133;
  byte_2552002 = 99;
  word_25525E8 = 24950;
  word_2552000 = 29539;
  byte_2552003 = 0;
  byte_255202F = 7;
  byte_2552047 = 8;
  word_2552CA8 = 25185;
  strcpy((char *)&qword_2552030, "deg2grad");
  byte_255205F = 7;
  strcpy((char *)&dword_2552CC0, "acos");
  dword_2552CD8 = 1936679777;
  strcpy((char *)&dword_2552048, "deg2rad");
  byte_2552077 = 5;
  byte_2552064 = 108;
  strcpy((char *)&dword_2552CF0, "asin");
  dword_2552D08 = 1852404577;
  dword_2552060 = 1635086693;
  byte_2552065 = 0;
  byte_255208F = 3;
  byte_2552CDC = 104;
  byte_2552D0C = 104;
  byte_2552D3C = 104;
  byte_255207A = 102;
  byte_2552D54 = 50;
  word_2552078 = 29285;
  byte_255207B = 0;
  byte_25520A7 = 4;
  strcpy((char *)&dword_2552D20, "atan");
  dword_2552D38 = 1851880545;
  dword_2552D50 = 1851880545;
  strcpy((char *)&dword_2552090, "erfc");
  byte_25520BF = 3;
  byte_25520AA = 112;
  word_2552D68 = 30305;
  word_25520A8 = 30821;
  byte_25520AB = 0;
  byte_25520D7 = 5;
  strcpy((char *)&dword_2552D80, "ceil");
  byte_25520C4 = 49;
  dword_2552D98 = 1835101283;
  dword_25520C0 = 1836087397;
  byte_25520C5 = 0;
  byte_25520EF = 5;
  byte_25520DC = 101;
  byte_25520DD = 0;
  byte_2552107 = 5;
  byte_25520F4 = 114;
  byte_2552CAA = 115;
  byte_2552DB2 = 115;
  dword_25520F0 = 1869573222;
  byte_25520F5 = 0;
  byte_255211F = 3;
  byte_255210A = 114;
  word_2552108 = 28518;
  byte_255210B = 0;
  byte_2552137 = 4;
  strcpy((char *)&dword_2552DC8, "cosh");
  strcpy((char *)&dword_2552120, "frac");
  byte_255214F = 8;
  word_2552DB0 = 28515;
  word_2552DE0 = 28515;
  strcpy((char *)&qword_2552138, "grad2deg");
  byte_2552167 = 5;
  byte_2552154 = 116;
  word_2552DF8 = 29539;
  dword_2552150 = 1869642088;
  byte_2552155 = 0;
  byte_255217F = 6;
  strcpy((char *)&dword_2552168, "iclamp");
  byte_2552197 = 2;
  strcpy((char *)&word_2552180, "if");
  byte_25521AF = 4;
  byte_25521C7 = 5;
  byte_25521B4 = 101;
  byte_25521B5 = 0;
  byte_25521DF = 2;
  byte_25521F7 = 7;
  strcpy((char *)&dword_25521E0, "inrange");
  byte_255220F = 4;
  strcpy((char *)&dword_25521F8, "like");
  byte_2552227 = 3;
  byte_2552212 = 103;
  word_2552210 = 28524;
  byte_2552213 = 0;
  byte_255223F = 5;
  byte_255222C = 48;
  dword_2552228 = 828862316;
  byte_255222D = 0;
  byte_2552257 = 4;
  strcpy((char *)&dword_2552240, "log2");
  byte_255226F = 4;
  strcpy((char *)&dword_2552258, "logn");
  byte_2552287 = 5;
  byte_2552274 = 112;
  dword_2552270 = 828862316;
  byte_2552275 = 0;
  byte_255229F = 4;
  strcpy((char *)&dword_2552288, "mand");
  byte_25522B7 = 3;
  byte_25522A2 = 120;
  word_25522A0 = 24941;
  byte_25522A3 = 0;
  byte_25522CF = 3;
  byte_25522BA = 110;
  word_25522B8 = 26989;
  byte_25522BB = 0;
  byte_25522E7 = 3;
  byte_25522D2 = 100;
  word_25522D0 = 28525;
  byte_25522D3 = 0;
  byte_25522FF = 3;
  byte_25522EA = 114;
  word_25522E8 = 28525;
  byte_25522EB = 0;
  byte_2552317 = 3;
  byte_2552302 = 108;
  word_2552300 = 30061;
  byte_2552303 = 0;
  byte_255232F = 4;
  strcpy((char *)&dword_2552318, "ncdf");
  byte_2552347 = 4;
  strcpy((char *)&dword_2552330, "nand");
  byte_255235F = 3;
  byte_255234A = 114;
  word_2552348 = 28526;
  byte_255234B = 0;
  byte_2552377 = 3;
  byte_2552362 = 116;
  word_2552360 = 28526;
  byte_2552363 = 0;
  strcpy(&byte_255238F, "\tnull");
  strcpy((char *)&qword_2552378, "not_equal");
  byte_25523A7 = 4;
  byte_25523BF = 2;
  byte_2552E0F = 3;
  byte_2552DFA = 99;
  byte_2552DFB = 0;
  strcpy((char *)&word_25523A8, "or");
  byte_2552DF7 = 3;
  byte_2552DE2 = 116;
  byte_2552DE3 = 0;
  byte_25523D7 = 3;
  byte_2552DC7 = 3;
  byte_2552DB3 = 0;
  byte_2552DDF = 4;
  byte_25523C2 = 119;
  byte_2552DAF = 5;
  byte_2552D9C = 112;
  byte_2552D9D = 0;
  word_25523C0 = 28528;
  byte_25523C3 = 0;
  byte_25523EF = 7;
  byte_2552D6B = 0;
  byte_2552D97 = 4;
  strcpy((char *)&dword_25523D8, "rad2deg");
  byte_2552407 = 6;
  byte_2552D55 = 0;
  byte_2552D7F = 3;
  byte_2552D6A = 103;
  byte_2552D4F = 5;
  byte_2552D3D = 0;
  byte_2552D67 = 5;
  strcpy((char *)&dword_25523F0, "repeat");
  byte_255241F = 6;
  byte_2552D0D = 0;
  byte_2552D37 = 4;
  byte_2552D07 = 4;
  byte_2552D1F = 5;
  strcpy((char *)&dword_2552408, "return");
  byte_2552437 = 4;
  byte_2552CEF = 5;
  byte_2552CDD = 0;
  strcpy((char *)&dword_2552420, "root");
  byte_255244F = 5;
  byte_2552CAB = 0;
  byte_2552CD7 = 4;
  byte_2552632 = 114;
  byte_2552677 = 1;
  word_2552660 = 124;
  byte_2552CBF = 3;
  word_2552630 = 28536;
  byte_2552633 = 0;
  byte_255265F = 1;
  word_2552648 = 38;
  byte_2552605 = 0;
  byte_255262F = 4;
  strcpy((char *)&dword_2552618, "xnor");
  byte_2552647 = 3;
  byte_255243C = 100;
  byte_25525EB = 0;
  byte_2552617 = 5;
  byte_2552604 = 101;
  dword_2552600 = 1818847351;
  dword_2552438 = 1853190002;
  byte_25525D4 = 108;
  byte_25525D5 = 0;
  byte_25525FF = 3;
  byte_25525EA = 114;
  byte_25525CF = 5;
  byte_25525BC = 99;
  dword_25525B8 = 1853190772;
  byte_25525BD = 0;
  byte_25525E7 = 5;
  word_25524C8 = 26995;
  byte_25525B7 = 4;
  word_2552570 = 24948;
  byte_2552573 = 0;
  byte_255259F = 4;
  strcpy((char *)&dword_2552588, "tanh");
  strcpy((char *)&dword_2552558, "switch");
  byte_2552587 = 3;
  byte_2552572 = 110;
  byte_255253F = 3;
  byte_2552557 = 4;
  strcpy((char *)&dword_2552540, "swap");
  byte_255256F = 6;
  byte_255252A = 109;
  word_2552528 = 30067;
  byte_255252B = 0;
  strcpy((char *)&dword_25524F8, "sinh");
  byte_2552527 = 4;
  strcpy((char *)&dword_2552510, "sqrt");
  byte_25524CB = 0;
  byte_25524F7 = 4;
  strcpy((char *)&dword_25524E0, "sinc");
  byte_255250F = 4;
  byte_255243D = 0;
  byte_2552467 = 6;
  byte_25524B2 = 114;
  byte_25524B3 = 0;
  byte_25524DF = 3;
  byte_25524CA = 110;
  byte_25524AF = 3;
  byte_255249A = 108;
  byte_255249B = 0;
  byte_25524C7 = 3;
  byte_255246B = 0;
  byte_2552497 = 3;
  byte_2552482 = 110;
  word_2552480 = 26483;
  byte_2552483 = 0;
  strcpy((char *)&dword_2552450, "roundn");
  byte_255247F = 3;
  byte_255246A = 99;
  word_2552468 = 25971;
  dword_2552E10 = 1635086693;
  byte_2552E2A = 102;
  word_2552E28 = 29285;
  strcpy((char *)&dword_2552E40, "erfc");
  word_2552E58 = 30821;
  byte_2552E74 = 49;
  dword_2552E70 = 1836087397;
  dword_2552E88 = 1869573222;
  strcpy((char *)&dword_2552EA0, "frac");
  dword_2552EB8 = 1869642088;
  strcpy((char *)&dword_2552ED0, "iclamp");
  strcpy((char *)&dword_2552AB0, "like");
  strcpy((char *)&dword_2552EE8, "like");
  byte_2552F02 = 103;
  word_2552F00 = 28524;
  byte_2552F1C = 48;
  strcpy((char *)&dword_2552F30, "log2");
  strcpy((char *)&dword_2552F48, "logn");
  byte_2552E5A = 112;
  byte_2552F64 = 112;
  dword_2552F18 = 828862316;
  dword_2552F60 = 828862316;
  strcpy((char *)&dword_2552F78, "mand");
  byte_2552F92 = 120;
  word_2552F90 = 24941;
  word_2552FA8 = 26989;
  word_2552FC0 = 28525;
  word_2552FD8 = 28525;
  word_2552FF0 = 30061;
  strcpy((char *)&dword_2553008, "ncdf");
  byte_2553022 = 119;
  word_2553020 = 28528;
  strcpy((char *)&dword_2553038, "root");
  dword_2553050 = 1853190002;
  strcpy((char *)&dword_2553068, "roundn");
  word_2553080 = 25971;
  word_2553098 = 26483;
  word_25530B0 = 26995;
  strcpy((char *)&dword_25530C8, "sinc");
  strcpy((char *)&dword_25530E0, "sinh");
  strcpy((char *)&dword_25530F8, "sqrt");
  byte_2553112 = 109;
  word_2553110 = 30067;
  strcpy((char *)&dword_2552BB8, "swap");
  strcpy((char *)&dword_2553128, "swap");
  byte_2552FAA = 110;
  byte_255309A = 110;
  byte_25530B2 = 110;
  byte_2553142 = 110;
  word_2553140 = 24948;
  strcpy((char *)&dword_2553158, "tanh");
  byte_2553082 = 99;
  byte_2553174 = 99;
  dword_2553170 = 1853190772;
  strcpy(&byte_255319F, "\tinrange");
  byte_2552B8A = 108;
  byte_2552C04 = 108;
  byte_2552E14 = 108;
  byte_2552FF2 = 108;
  strcpy((char *)&qword_2553188, "not_equal");
  strcpy((char *)&qword_25531B8, "deg2grad");
  strcpy((char *)&dword_25531D0, "deg2rad");
  byte_2552A1F = 7;
  byte_25531B7 = 7;
  byte_25531E7 = 7;
  byte_25531FF = 7;
  strcpy((char *)&dword_25531E8, "rad2deg");
  byte_2552A07 = 8;
  byte_25531CF = 8;
  byte_2553217 = 8;
  strcpy((char *)&qword_2553200, "grad2deg");
  byte_2552ACA = 100;
  byte_2552FC2 = 100;
  byte_2553054 = 100;
  byte_25528EA = 100;
  word_2552AC8 = 28257;
  word_25528E8 = 28257;
  strcpy((char *)&dword_2552AE0, "nand");
  strcpy((char *)&dword_2552900, "nand");
  byte_2552EBC = 116;
  byte_2552932 = 116;
  word_2552918 = 28526;
  word_2552930 = 28526;
  strcpy((char *)&word_2552B40, "or");
  strcpy((char *)&word_2552948, "or");
  byte_25529EF = 4;
  byte_2552A7F = 4;
  byte_2552AC7 = 4;
  byte_2552AF7 = 4;
  byte_2552B3F = 4;
  byte_2552BCF = 4;
  byte_2552BFF = 4;
  byte_2552C5F = 4;
  byte_2552E57 = 4;
  byte_2552EB7 = 4;
  byte_2552EFF = 4;
  byte_2552F47 = 4;
  byte_2552F5F = 4;
  byte_2552F8F = 4;
  byte_255301F = 4;
  byte_255304F = 4;
  byte_25530DF = 4;
  byte_25530F7 = 4;
  byte_255310F = 4;
  byte_255313F = 4;
  byte_255316F = 4;
  byte_2552917 = 4;
  byte_2552977 = 4;
  strcpy((char *)&dword_2552C48, "xnor");
  strcpy((char *)&dword_2552960, "xnor");
  word_2552C60 = 28536;
  word_2552978 = 28536;
  word_2552C78 = 38;
  word_2552990 = 38;
  word_2552C90 = 124;
  word_25529A8 = 124;
  strcpy((char *)&word_2552A50, "if");
  strcpy((char *)&word_2552678, "if");
  strcpy((char *)&dword_2552BD0, "switch");
  strcpy((char *)&dword_2552690, "switch");
  byte_2552A4F = 3;
  byte_2552ADF = 3;
  byte_2552B0F = 3;
  byte_2552B27 = 3;
  byte_2552B9F = 3;
  byte_2552BB7 = 3;
  byte_2552C2F = 3;
  byte_2552C77 = 3;
  byte_2552E3F = 3;
  byte_2552E6F = 3;
  byte_2552F17 = 3;
  byte_2552FA7 = 3;
  byte_2552FBF = 3;
  byte_2552FD7 = 3;
  byte_2552FEF = 3;
  byte_2553007 = 3;
  byte_2553037 = 3;
  byte_2553097 = 3;
  byte_25530AF = 3;
  byte_25530C7 = 3;
  byte_2553127 = 3;
  byte_2553157 = 3;
  byte_25528FF = 3;
  byte_255292F = 3;
  byte_2552947 = 3;
  byte_255298F = 3;
  byte_25526BF = 3;
  byte_2552A3A = 114;
  byte_2552BA2 = 114;
  byte_2552C1A = 114;
  byte_2552C62 = 114;
  byte_2552E8C = 114;
  byte_2552FDA = 114;
  byte_255291A = 114;
  byte_255297A = 114;
  byte_25526AA = 114;
  word_2552A38 = 28518;
  word_25526A8 = 28518;
  byte_25529D7 = 5;
  byte_2552A37 = 5;
  byte_2552A97 = 5;
  byte_2552C17 = 5;
  byte_2552C47 = 5;
  byte_2552E27 = 5;
  byte_2552E87 = 5;
  byte_2552E9F = 5;
  byte_2552ECF = 5;
  byte_2552F2F = 5;
  byte_2552F77 = 5;
  byte_2553067 = 5;
  byte_2553187 = 5;
  byte_25526D7 = 5;
  byte_2552C34 = 101;
  byte_25526C4 = 101;
  dword_2552C30 = 1818847351;
  dword_25526C0 = 1818847351;
  strcpy((char *)&dword_2552B58, "repeat");
  strcpy((char *)&dword_25526D8, "repeat");
  byte_2552B6F = 6;
  byte_2552B87 = 6;
  byte_2552BE7 = 6;
  byte_2552EE7 = 6;
  byte_255307F = 6;
  byte_25526A7 = 6;
  byte_25526EF = 6;
  byte_2552707 = 6;
  strcpy((char *)&dword_2552B70, "return");
  strcpy((char *)&dword_25526F0, "return");
  word_2552708 = 43;
  word_2552720 = 45;
  word_2552738 = 42;
  word_2552750 = 47;
  word_2552768 = 37;
  word_2552780 = 94;
  strcpy((char *)&word_2552798, ":=");
  strcpy((char *)&word_25527B0, "+=");
  strcpy((char *)&word_25527C8, "-=");
  strcpy((char *)&word_25527E0, "*=");
  strcpy((char *)&word_25527F8, "/=");
  strcpy((char *)&word_2552810, "%=");
  word_2552828 = 60;
  strcpy((char *)&word_2552840, "<=");
  strcpy((char *)&word_2552858, "==");
  word_2552870 = 61;
  strcpy((char *)&word_2552888, "!=");
  strcpy((char *)&word_25528A0, "<>");
  byte_2552A67 = 2;
  byte_2552AAF = 2;
  byte_2552B57 = 2;
  byte_255295F = 2;
  byte_255268F = 2;
  byte_25527AF = 2;
  byte_25527C7 = 2;
  byte_25527DF = 2;
  byte_25527F7 = 2;
  byte_255280F = 2;
  byte_2552827 = 2;
  byte_2552857 = 2;
  byte_255286F = 2;
  byte_255289F = 2;
  byte_25528B7 = 2;
  byte_25528CF = 2;
  strcpy((char *)&word_25528B8, ">=");
  byte_2552C1B = 0;
  byte_2552C63 = 0;
  byte_2552C8F = 1;
  byte_2552CA7 = 1;
  byte_2552C35 = 0;
  byte_25529A7 = 1;
  byte_25529BF = 1;
  byte_255271F = 1;
  byte_2552737 = 1;
  byte_255274F = 1;
  byte_2552767 = 1;
  byte_255277F = 1;
  byte_2552797 = 1;
  byte_255283F = 1;
  byte_2552887 = 1;
  byte_25528E7 = 1;
  word_25528D0 = 62;
  byte_2552C05 = 0;
  byte_2552A3B = 0;
  byte_2552ACB = 0;
  byte_2552BA3 = 0;
  byte_2552B8B = 0;
  byte_2552E15 = 0;
  byte_2552E2B = 0;
  byte_2552E5B = 0;
  byte_2552E75 = 0;
  byte_2552E8D = 0;
  byte_2552EBD = 0;
  byte_2552F03 = 0;
  byte_2552F1D = 0;
  byte_2552F65 = 0;
  byte_2552F93 = 0;
  byte_2552FAB = 0;
  byte_2552FC3 = 0;
  byte_2552FDB = 0;
  byte_2552FF3 = 0;
  byte_2553023 = 0;
  byte_2553055 = 0;
  byte_2553083 = 0;
  byte_255309B = 0;
  byte_25530B3 = 0;
  byte_2553113 = 0;
  byte_2553143 = 0;
  byte_2553175 = 0;
  byte_25528EB = 0;
  byte_255291B = 0;
  byte_2552933 = 0;
  byte_255297B = 0;
  byte_25526AB = 0;
  byte_25526C5 = 0;
  return result;
}

void sub_97FEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

void sub_981D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_5450C((uint64_t)&a16);
    uint64_t v18 = v16[82];
    v16[82] = 0;
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_5450C((uint64_t)&a16);
    uint64_t v19 = v16[82];
    v16[82] = 0;
    if (v19) {
LABEL_3:
    }
      operator delete();
  }
  sub_92364(v16);
  _Unwind_Resume(a1);
}

void sub_98294(std::string *a1, void *a2, void *a3)
{
  *(_OWORD *)unint64_t v25 = 0u;
  long long v26 = 0u;
  int v27 = 1065353216;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "model_parameters");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 2) {
    unint64_t v7 = (void **)v6[5];
  }
  else {
    unint64_t v7 = v25;
  }
  sub_A6360((uint64_t)a1, v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_A6360((uint64_t)a1, a3);
  memset(__p, 0, 24);
  v23[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v23[1] = xmmword_20B9250;
  strcpy(v23[0], "common_charging_formula");
  double v8 = sub_58070(a2, (uint64_t)v23);
  if (v8 && *((_DWORD *)v8 + 12) == 3)
  {
    char v9 = (void **)v8[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    char v9 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_12:
    }
      operator delete(v23[0]);
  }
  sub_A0F44(a1, 0, (uint64_t **)v9);
  sub_A0F44(a1, 1u, (uint64_t **)v9);
  HIBYTE(v23[2]) = 19;
  strcpy((char *)v23, "ac_charging_formula");
  uint64_t v10 = sub_58070(a2, (uint64_t)v23);
  if (v10 && *((_DWORD *)v10 + 12) == 3)
  {
    uint64_t v11 = (void **)v10[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_18:
    }
      operator delete(v23[0]);
  }
  sub_A0F44(a1, 0, (uint64_t **)v11);
  HIBYTE(v23[2]) = 19;
  strcpy((char *)v23, "dc_charging_formula");
  unint64_t v12 = sub_58070(a2, (uint64_t)v23);
  if (v12 && *((_DWORD *)v12 + 12) == 3)
  {
    uint64_t v13 = (void **)v12[5];
    if (SHIBYTE(v23[2]) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (SHIBYTE(v23[2]) < 0) {
LABEL_24:
    }
      operator delete(v23[0]);
  }
  sub_A0F44(a1, 1u, (uint64_t **)v13);
  HIBYTE(v23[2]) = 21;
  strcpy((char *)v23, "charging_time_formula");
  unint64_t v14 = sub_58070(a2, (uint64_t)v23);
  if (v14 && *((_DWORD *)v14 + 12) == 3)
  {
    char v15 = (void **)v14[5];
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  else
  {
    char v15 = __p;
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  operator delete(v23[0]);
LABEL_31:
  sub_A0F44(a1, 0, (uint64_t **)v15);
  sub_A0F44(a1, 1u, (uint64_t **)v15);
  v23[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v23[1] = xmmword_20B9800;
  strcpy(v23[0], "evaluate_linear_charging_curve");
  sub_A8ECC((uint64_t)a1, v23, a1[27].__r_.__value_.__l.__size_);
  if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
  {
    unint64_t v16 = (uint64_t *)__p[0];
    if (__p[0]) {
      goto LABEL_33;
    }
LABEL_39:
    uint64_t v20 = (void **)v26;
    if (!(void)v26) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }
  operator delete(v23[0]);
  unint64_t v16 = (uint64_t *)__p[0];
  if (!__p[0]) {
    goto LABEL_39;
  }
LABEL_33:
  unint64_t v17 = (uint64_t *)__p[1];
  uint64_t v18 = v16;
  if (__p[1] != v16)
  {
    do
    {
      uint64_t v19 = v17 - 2;
      sub_5521C((uint64_t *)*((unsigned int *)v17 - 2), v17 - 2);
      unint64_t v17 = v19;
    }
    while (v19 != v16);
    uint64_t v18 = (uint64_t *)__p[0];
  }
  __p[1] = v16;
  operator delete(v18);
  uint64_t v20 = (void **)v26;
  if ((void)v26)
  {
    do
    {
LABEL_44:
      char v22 = (void **)*v20;
      sub_55198((uint64_t)(v20 + 5));
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      uint64_t v20 = v22;
    }
    while (v22);
  }
LABEL_40:
  unint64_t v21 = v25[0];
  v25[0] = 0;
  if (v21) {
    operator delete(v21);
  }
}

void sub_98644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_55758(&a16);
  sub_5450C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_986B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_5450C((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x986A0);
}

void sub_986D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
}

uint64_t sub_986E8(uint64_t a1)
{
  sub_92BE4(a1);
  double v22 = v2;
  uint64_t v3 = (double *)(a1 + 632);
  double v4 = *(double *)(a1 + 632);
  if (v4 == INFINITY)
  {
    sub_98C7C("Charging time value not set explicitly in formula, falling back to formula result (", (uint64_t)&v22, " seconds).");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
    double v4 = v22;
    double *v3 = v22;
  }
  if (*(double *)(a1 + 640) == INFINITY) {
    *(void *)(a1 + 640) = *(void *)(a1 + 528);
  }
  if (v4 < -0.00001)
  {
    sub_98E50("Negative charging time in EV charging time formula (", a1 + 632, " seconds).");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
    double v4 = *v3;
  }
  double v5 = *(double *)(a1 + 440);
  if (v4 > v5 + 0.00001)
  {
    double v19 = v4 / 3600.0;
    double v6 = v5 * 10.0;
    if (v5 * 10.0 >= 0.0)
    {
      if (v6 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v6 + v6) + 1;
    }
    else
    {
      if (v6 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v7 = (uint64_t)(v6 + v6);
      if (v7 >= 1) {
        --v7;
      }
    }
    double v6 = (double)(v7 >> 1);
LABEL_20:
    if ((int)v6 >= 0) {
      int v8 = 18000;
    }
    else {
      int v8 = -18000;
    }
    int v18 = (v8 + (int)v6 % 36000) / 36000 + (int)v6 / 36000;
    sub_99024("Evaluated charging time in EV charging time formula (", (uint64_t)&v19, " hours) exceeds maximum allowed charging time (", (uint64_t)&v18, " hours).");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
  }
  char v9 = (double *)(a1 + 640);
  double v10 = *(double *)(a1 + 640);
  if (v10 >= -0.00001)
  {
    if (v10 >= *(double *)(a1 + 40) + -0.00001) {
      goto LABEL_30;
    }
    sub_99400("Energy after charging in EV charging time formula is less than the current energy before charging (", a1 + 640, " Wh < ", a1 + 40, " Wh).");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
  }
  else
  {
    sub_9922C("Negative energy after charging in EV charging time formula (", a1 + 640, " Wh).");
    sub_A4F9C(a1 + 360, (uint64_t)&__p);
  }
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_30:
    uint64_t v11 = (double *)(a1 + 16);
    double v12 = *(double *)(a1 + 16);
    double v13 = *(double *)(a1 + 640);
    if (v13 <= v12 + 0.00001) {
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  operator delete(__p);
  uint64_t v11 = (double *)(a1 + 16);
  double v12 = *(double *)(a1 + 16);
  double v13 = *(double *)(a1 + 640);
  if (v13 <= v12 + 0.00001) {
    goto LABEL_36;
  }
LABEL_33:
  sub_99608("Energy after charging in EV charging time formula exceeds the battery's maximum battery threshold (", a1 + 640, " Wh > ", (uint64_t)v11, " Wh).");
  sub_A4F9C(a1 + 360, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  double v12 = *v11;
  double v13 = *v9;
LABEL_36:
  double v14 = *(double *)(a1 + 440);
  if (v14 >= *(double *)(a1 + 632)) {
    double v14 = *(double *)(a1 + 632);
  }
  *(double *)(a1 + 632) = fmax(v14, 0.0);
  if (v12 >= v13) {
    double v12 = v13;
  }
  if (*(double *)(a1 + 40) >= v12) {
    double v12 = *(double *)(a1 + 40);
  }
  *(double *)(a1 + 640) = v12;
  long long __p = operator new(0x28uLL);
  long long v21 = xmmword_20B9260;
  strcpy((char *)__p, "EV charging time model evaluation");
  sub_A50CC(a1 + 360, (uint64_t)&__p);
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p);
    double v15 = *v3 * 10.0;
    if (v15 < 0.0)
    {
LABEL_44:
      if (v15 > -4.50359963e15)
      {
        uint64_t v16 = (uint64_t)(v15 + v15);
        if (v16 >= 1) {
          --v16;
        }
        goto LABEL_51;
      }
      return (int)v15 | ((llround(*v9 * 1000.0) | 0x408F400000000000) << 32);
    }
  }
  else
  {
    double v15 = *v3 * 10.0;
    if (v15 < 0.0) {
      goto LABEL_44;
    }
  }
  if (v15 < 4.50359963e15)
  {
    uint64_t v16 = (uint64_t)(v15 + v15) + 1;
LABEL_51:
    double v15 = (double)(v16 >> 1);
  }
  return (int)v15 | ((llround(*v9 * 1000.0) | 0x408F400000000000) << 32);
}

void sub_98C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_98C7C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_98E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_98E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_98E50(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_98FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_99010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_99024(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_99204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_99218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9922C(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_993D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_993EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_99400(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_995E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_995F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_99608(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_997E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_997FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_99810()
{
  long long v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  operator new();
}

void sub_99B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_92364(&a9);
  sub_9FDC0((uint64_t)&STACK[0x2A0]);
  sub_5450C(v9 - 144);
  _Unwind_Resume(a1);
}

void sub_99BE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t sub_99C04(void *a1)
{
  uint64_t v2 = a1[82];
  a1[82] = 0;
  if (v2) {
    operator delete();
  }

  return sub_92364(a1);
}

void sub_99C5C()
{
}

double sub_99C70(uint64_t a1, double *a2, double *a3)
{
  if (***(double ***)(a1 + 40) != INFINITY && ***(double ***)(a1 + 48) != INFINITY)
  {
    double v8 = *a2;
    if (*a2 < -0.00001)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      sub_9A170("Custom function evaluate_linear_charging_curve() called with negative initial energy (", (uint64_t)a2, " Wh).");
      sub_A4F9C(v9, (uint64_t)__p);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      double v8 = *a2;
    }
    if (v8 > *a3 + 0.00001)
    {
      uint64_t v10 = *(void *)(a1 + 80);
      sub_9A344("Custom function evaluate_linear_charging_curve() expects initial energy to be less than (or equal to) the target energy, got ", (uint64_t)a2, " Wh > ", (uint64_t)a3, " Wh.");
      sub_A4F9C(v10, (uint64_t)__p);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
      double v8 = *a2;
    }
    uint64_t v11 = *(double ***)(a1 + 48);
    double v12 = *v11;
    double v13 = v11[1];
    uint64_t v14 = (char *)v13 - (char *)*v11;
    if (v14)
    {
      unint64_t v15 = v14 >> 3;
      uint64_t v16 = v12;
      do
      {
        unint64_t v17 = v15 >> 1;
        int v18 = &v16[v15 >> 1];
        double v20 = *v18;
        double v19 = v18 + 1;
        v15 += ~(v15 >> 1);
        if (v20 < v8) {
          uint64_t v16 = v19;
        }
        else {
          unint64_t v15 = v17;
        }
      }
      while (v15);
      long long v21 = **(double ***)(a1 + 40);
      int64_t v22 = (char *)v16 - (char *)v12;
      if (v16 != v12)
      {
LABEL_21:
        unint64_t v23 = (double *)((char *)v21 + v22);
        if (v13 == v16 || (double v24 = *v16, *v16 == INFINITY))
        {
          double v25 = *(v23 - 1);
          double v26 = *a3;
          uint64_t v27 = (char *)v13 - (char *)v12;
          if (v13 == v12) {
            goto LABEL_42;
          }
        }
        else
        {
          double v38 = *(v16 - 1);
          if (v38 == v24) {
            double v39 = 0.0;
          }
          else {
            double v39 = (v8 - v38) / (v24 - v38);
          }
          double v25 = *(v23 - 1) + (*v23 - *(v23 - 1)) * v39;
          double v26 = *a3;
          uint64_t v27 = (char *)v13 - (char *)v12;
          if (v13 == v12)
          {
LABEL_42:
            unint64_t v29 = v13;
            int64_t v34 = (char *)v13 - (char *)v12;
            if (v13 == v12)
            {
LABEL_43:
              double v37 = *v21;
              double v26 = *v12;
LABEL_46:
              **(double **)(a1 + 72) = v26;
              **(double **)(a1 + 64) = v37 + **(double **)(a1 + 56) + *v21 - v25;
              return 0.0;
            }
LABEL_33:
            long long v35 = (double *)((char *)v21 + v34);
            if (v13 == v29 || (double v36 = *v29, *v29 == INFINITY))
            {
              double v37 = *(v35 - 1);
              double v26 = *(v29 - 1);
            }
            else
            {
              double v40 = *(v29 - 1);
              if (v40 == v36) {
                double v41 = 0.0;
              }
              else {
                double v41 = (v26 - v40) / (v36 - v40);
              }
              double v37 = *(v35 - 1) + (*v35 - *(v35 - 1)) * v41;
            }
            goto LABEL_46;
          }
        }
LABEL_27:
        unint64_t v28 = v27 >> 3;
        unint64_t v29 = v12;
        do
        {
          unint64_t v30 = v28 >> 1;
          uint64_t v31 = &v29[v28 >> 1];
          double v33 = *v31;
          double v32 = v31 + 1;
          v28 += ~(v28 >> 1);
          if (v33 < v26) {
            unint64_t v29 = v32;
          }
          else {
            unint64_t v28 = v30;
          }
        }
        while (v28);
        int64_t v34 = (char *)v29 - (char *)v12;
        if (v29 == v12) {
          goto LABEL_43;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v16 = v13;
      long long v21 = **(double ***)(a1 + 40);
      int64_t v22 = (char *)v13 - (char *)v12;
      if (v13 != v12) {
        goto LABEL_21;
      }
    }
    double v25 = *v21;
    double v26 = *a3;
    uint64_t v27 = (char *)v13 - (char *)v12;
    if (v13 == v12) {
      goto LABEL_42;
    }
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)(a1 + 80);
  sub_99FCC("Custom function evaluate_linear_charging_curve() called on an uninitialized charging curve.");
  sub_A5034(v4, (uint64_t)__p);
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_99FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_99FCC(const char *a1)
{
  sub_E1B4((uint64_t)v5);
  size_t v2 = strlen(a1);
  sub_188FC78(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9A148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9A15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A170(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9A31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9A330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A344(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9A524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9A538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9A54C()
{
  strcpy((char *)&dword_2553D88, "break");
  strcpy((char *)&dword_2553DA0, "case");
  strcpy((char *)&qword_2553DB8, "continue");
  strcpy((char *)&dword_2553DD0, "default");
  uint64_t result = 4;
  strcpy((char *)&dword_2553DE8, "false");
  strcpy((char *)&dword_2553E30, "else");
  strcpy((char *)&dword_2553E48, "ilike");
  strcpy((char *)&word_2553E60, "in");
  dword_2553EC0 = 7499630;
  dword_2553ED8 = 7630702;
  strcpy((char *)&dword_2553EF0, "null");
  word_2553F50 = 26739;
  word_2553F68 = 26739;
  strcpy((char *)&dword_2553FB0, "true");
  dword_2553FC8 = 1769238133;
  word_2553FE0 = 24950;
  byte_255322F = 3;
  byte_255321A = 115;
  word_2553218 = 25185;
  byte_255321B = 0;
  byte_2553247 = 4;
  strcpy((char *)&dword_2553230, "acos");
  byte_255325F = 5;
  byte_255330C = 107;
  byte_255324C = 104;
  dword_2553248 = 1936679777;
  byte_255324D = 0;
  byte_2553277 = 3;
  byte_2553262 = 100;
  word_2553260 = 28257;
  byte_2553263 = 0;
  byte_255328F = 4;
  dword_2553308 = 1634038370;
  strcpy((char *)&dword_2553278, "asin");
  byte_25532A7 = 5;
  byte_2553294 = 104;
  dword_2553290 = 1852404577;
  byte_2553295 = 0;
  byte_25532BF = 4;
  strcpy((char *)&dword_2553320, "case");
  strcpy((char *)&dword_25532A8, "atan");
  byte_25532D7 = 5;
  byte_25532C4 = 104;
  dword_25532C0 = 1851880545;
  byte_25532C5 = 0;
  byte_25532EF = 5;
  strcpy((char *)&qword_2553368, "continue");
  byte_25532DC = 50;
  dword_25532D8 = 1851880545;
  byte_25532DD = 0;
  byte_2553307 = 3;
  strcpy((char *)&dword_25533E0, "default");
  byte_25532F2 = 103;
  dword_25534A0 = 1936482662;
  word_25532F0 = 30305;
  byte_25532F3 = 0;
  byte_255331F = 5;
  byte_255330D = 0;
  byte_2553337 = 4;
  byte_255334F = 4;
  strcpy((char *)&dword_2553560, "else");
  strcpy((char *)&dword_2553338, "ceil");
  byte_2553367 = 5;
  dword_2553578 = 1802071145;
  byte_2553354 = 112;
  strcpy((char *)&word_2553590, "in");
  dword_2553350 = 1835101283;
  byte_2553355 = 0;
  byte_255337F = 8;
  byte_2553397 = 3;
  byte_2553382 = 115;
  word_2553380 = 28515;
  byte_2553383 = 0;
  byte_25533AF = 4;
  word_2553860 = 26739;
  word_2553878 = 26739;
  strcpy((char *)&dword_2553398, "cosh");
  byte_25533C7 = 3;
  strcpy((char *)&dword_2553968, "true");
  byte_25533B2 = 116;
  word_25533B0 = 28515;
  byte_25533B3 = 0;
  byte_25533DF = 3;
  dword_2553998 = 1769238133;
  byte_25533CA = 99;
  word_25539B0 = 24950;
  word_25533C8 = 29539;
  byte_25533CB = 0;
  byte_25533F7 = 7;
  byte_255340F = 8;
  word_2554070 = 25185;
  strcpy((char *)&qword_25533F8, "deg2grad");
  byte_2553427 = 7;
  strcpy((char *)&dword_2554088, "acos");
  dword_25540A0 = 1936679777;
  strcpy((char *)&dword_2553410, "deg2rad");
  byte_255343F = 5;
  byte_255342C = 108;
  strcpy((char *)&dword_25540B8, "asin");
  dword_25540D0 = 1852404577;
  dword_2553428 = 1635086693;
  byte_255342D = 0;
  byte_2553457 = 3;
  byte_25540A4 = 104;
  byte_25540D4 = 104;
  byte_2554104 = 104;
  byte_2553442 = 102;
  byte_255411C = 50;
  word_2553440 = 29285;
  byte_2553443 = 0;
  byte_255346F = 4;
  strcpy((char *)&dword_25540E8, "atan");
  dword_2554100 = 1851880545;
  dword_2554118 = 1851880545;
  strcpy((char *)&dword_2553458, "erfc");
  byte_2553487 = 3;
  byte_2553472 = 112;
  word_2554130 = 30305;
  word_2553470 = 30821;
  byte_2553473 = 0;
  byte_255349F = 5;
  strcpy((char *)&dword_2554148, "ceil");
  byte_255348C = 49;
  dword_2554160 = 1835101283;
  dword_2553488 = 1836087397;
  byte_255348D = 0;
  byte_25534B7 = 5;
  byte_25534A4 = 101;
  byte_25534A5 = 0;
  byte_25534CF = 5;
  byte_25534BC = 114;
  byte_2554072 = 115;
  byte_255417A = 115;
  dword_25534B8 = 1869573222;
  byte_25534BD = 0;
  byte_25534E7 = 3;
  byte_25534D2 = 114;
  word_25534D0 = 28518;
  byte_25534D3 = 0;
  byte_25534FF = 4;
  strcpy((char *)&dword_2554190, "cosh");
  strcpy((char *)&dword_25534E8, "frac");
  byte_2553517 = 8;
  word_2554178 = 28515;
  word_25541A8 = 28515;
  strcpy((char *)&qword_2553500, "grad2deg");
  byte_255352F = 5;
  byte_255351C = 116;
  word_25541C0 = 29539;
  dword_2553518 = 1869642088;
  byte_255351D = 0;
  byte_2553547 = 6;
  strcpy((char *)&dword_2553530, "iclamp");
  byte_255355F = 2;
  strcpy((char *)&word_2553548, "if");
  byte_2553577 = 4;
  byte_255358F = 5;
  byte_255357C = 101;
  byte_255357D = 0;
  byte_25535A7 = 2;
  byte_25535BF = 7;
  strcpy((char *)&dword_25535A8, "inrange");
  byte_25535D7 = 4;
  strcpy((char *)&dword_25535C0, "like");
  byte_25535EF = 3;
  byte_25535DA = 103;
  word_25535D8 = 28524;
  byte_25535DB = 0;
  byte_2553607 = 5;
  byte_25535F4 = 48;
  dword_25535F0 = 828862316;
  byte_25535F5 = 0;
  byte_255361F = 4;
  strcpy((char *)&dword_2553608, "log2");
  byte_2553637 = 4;
  strcpy((char *)&dword_2553620, "logn");
  byte_255364F = 5;
  byte_255363C = 112;
  dword_2553638 = 828862316;
  byte_255363D = 0;
  byte_2553667 = 4;
  strcpy((char *)&dword_2553650, "mand");
  byte_255367F = 3;
  byte_255366A = 120;
  word_2553668 = 24941;
  byte_255366B = 0;
  byte_2553697 = 3;
  byte_2553682 = 110;
  word_2553680 = 26989;
  byte_2553683 = 0;
  byte_25536AF = 3;
  byte_255369A = 100;
  word_2553698 = 28525;
  byte_255369B = 0;
  byte_25536C7 = 3;
  byte_25536B2 = 114;
  word_25536B0 = 28525;
  byte_25536B3 = 0;
  byte_25536DF = 3;
  byte_25536CA = 108;
  word_25536C8 = 30061;
  byte_25536CB = 0;
  byte_25536F7 = 4;
  strcpy((char *)&dword_25536E0, "ncdf");
  byte_255370F = 4;
  strcpy((char *)&dword_25536F8, "nand");
  byte_2553727 = 3;
  byte_2553712 = 114;
  word_2553710 = 28526;
  byte_2553713 = 0;
  byte_255373F = 3;
  byte_255372A = 116;
  word_2553728 = 28526;
  byte_255372B = 0;
  strcpy(&byte_2553757, "\tnull");
  strcpy((char *)&qword_2553740, "not_equal");
  byte_255376F = 4;
  byte_2553787 = 2;
  byte_25541D7 = 3;
  byte_25541C2 = 99;
  byte_25541C3 = 0;
  strcpy((char *)&word_2553770, "or");
  byte_25541BF = 3;
  byte_25541AA = 116;
  byte_25541AB = 0;
  byte_255379F = 3;
  byte_255418F = 3;
  byte_255417B = 0;
  byte_25541A7 = 4;
  byte_255378A = 119;
  byte_2554177 = 5;
  byte_2554164 = 112;
  byte_2554165 = 0;
  word_2553788 = 28528;
  byte_255378B = 0;
  byte_25537B7 = 7;
  byte_2554133 = 0;
  byte_255415F = 4;
  strcpy((char *)&dword_25537A0, "rad2deg");
  byte_25537CF = 6;
  byte_255411D = 0;
  byte_2554147 = 3;
  byte_2554132 = 103;
  byte_2554117 = 5;
  byte_2554105 = 0;
  byte_255412F = 5;
  strcpy((char *)&dword_25537B8, "repeat");
  byte_25537E7 = 6;
  byte_25540D5 = 0;
  byte_25540FF = 4;
  byte_25540CF = 4;
  byte_25540E7 = 5;
  strcpy((char *)&dword_25537D0, "return");
  byte_25537FF = 4;
  byte_25540B7 = 5;
  byte_25540A5 = 0;
  strcpy((char *)&dword_25537E8, "root");
  byte_2553817 = 5;
  byte_2554073 = 0;
  byte_255409F = 4;
  byte_25539FA = 114;
  byte_2553A3F = 1;
  word_2553A28 = 124;
  byte_2554087 = 3;
  word_25539F8 = 28536;
  byte_25539FB = 0;
  byte_2553A27 = 1;
  word_2553A10 = 38;
  byte_25539CD = 0;
  byte_25539F7 = 4;
  strcpy((char *)&dword_25539E0, "xnor");
  byte_2553A0F = 3;
  byte_2553804 = 100;
  byte_25539B3 = 0;
  byte_25539DF = 5;
  byte_25539CC = 101;
  dword_25539C8 = 1818847351;
  dword_2553800 = 1853190002;
  byte_255399C = 108;
  byte_255399D = 0;
  byte_25539C7 = 3;
  byte_25539B2 = 114;
  byte_2553997 = 5;
  byte_2553984 = 99;
  dword_2553980 = 1853190772;
  byte_2553985 = 0;
  byte_25539AF = 5;
  word_2553890 = 26995;
  byte_255397F = 4;
  word_2553938 = 24948;
  byte_255393B = 0;
  byte_2553967 = 4;
  strcpy((char *)&dword_2553950, "tanh");
  strcpy((char *)&dword_2553920, "switch");
  byte_255394F = 3;
  byte_255393A = 110;
  byte_2553907 = 3;
  byte_255391F = 4;
  strcpy((char *)&dword_2553908, "swap");
  byte_2553937 = 6;
  byte_25538F2 = 109;
  word_25538F0 = 30067;
  byte_25538F3 = 0;
  strcpy((char *)&dword_25538C0, "sinh");
  byte_25538EF = 4;
  strcpy((char *)&dword_25538D8, "sqrt");
  byte_2553893 = 0;
  byte_25538BF = 4;
  strcpy((char *)&dword_25538A8, "sinc");
  byte_25538D7 = 4;
  byte_2553805 = 0;
  byte_255382F = 6;
  byte_255387A = 114;
  byte_255387B = 0;
  byte_25538A7 = 3;
  byte_2553892 = 110;
  byte_2553877 = 3;
  byte_2553862 = 108;
  byte_2553863 = 0;
  byte_255388F = 3;
  byte_2553833 = 0;
  byte_255385F = 3;
  byte_255384A = 110;
  word_2553848 = 26483;
  byte_255384B = 0;
  strcpy((char *)&dword_2553818, "roundn");
  byte_2553847 = 3;
  byte_2553832 = 99;
  word_2553830 = 25971;
  dword_25541D8 = 1635086693;
  byte_25541F2 = 102;
  word_25541F0 = 29285;
  strcpy((char *)&dword_2554208, "erfc");
  word_2554220 = 30821;
  byte_255423C = 49;
  dword_2554238 = 1836087397;
  dword_2554250 = 1869573222;
  strcpy((char *)&dword_2554268, "frac");
  dword_2554280 = 1869642088;
  strcpy((char *)&dword_2554298, "iclamp");
  strcpy((char *)&dword_2553E78, "like");
  strcpy((char *)&dword_25542B0, "like");
  byte_25542CA = 103;
  word_25542C8 = 28524;
  byte_25542E4 = 48;
  strcpy((char *)&dword_25542F8, "log2");
  strcpy((char *)&dword_2554310, "logn");
  byte_2554222 = 112;
  byte_255432C = 112;
  dword_25542E0 = 828862316;
  dword_2554328 = 828862316;
  strcpy((char *)&dword_2554340, "mand");
  byte_255435A = 120;
  word_2554358 = 24941;
  word_2554370 = 26989;
  word_2554388 = 28525;
  word_25543A0 = 28525;
  word_25543B8 = 30061;
  strcpy((char *)&dword_25543D0, "ncdf");
  byte_25543EA = 119;
  word_25543E8 = 28528;
  strcpy((char *)&dword_2554400, "root");
  dword_2554418 = 1853190002;
  strcpy((char *)&dword_2554430, "roundn");
  word_2554448 = 25971;
  word_2554460 = 26483;
  word_2554478 = 26995;
  strcpy((char *)&dword_2554490, "sinc");
  strcpy((char *)&dword_25544A8, "sinh");
  strcpy((char *)&dword_25544C0, "sqrt");
  byte_25544DA = 109;
  word_25544D8 = 30067;
  strcpy((char *)&dword_2553F80, "swap");
  strcpy((char *)&dword_25544F0, "swap");
  byte_2554372 = 110;
  byte_2554462 = 110;
  byte_255447A = 110;
  byte_255450A = 110;
  word_2554508 = 24948;
  strcpy((char *)&dword_2554520, "tanh");
  byte_255444A = 99;
  byte_255453C = 99;
  dword_2554538 = 1853190772;
  strcpy(&byte_2554567, "\tinrange");
  byte_2553F52 = 108;
  byte_2553FCC = 108;
  byte_25541DC = 108;
  byte_25543BA = 108;
  strcpy((char *)&qword_2554550, "not_equal");
  strcpy((char *)&qword_2554580, "deg2grad");
  strcpy((char *)&dword_2554598, "deg2rad");
  byte_2553DE7 = 7;
  byte_255457F = 7;
  byte_25545AF = 7;
  byte_25545C7 = 7;
  strcpy((char *)&dword_25545B0, "rad2deg");
  byte_2553DCF = 8;
  byte_2554597 = 8;
  byte_25545DF = 8;
  strcpy((char *)&qword_25545C8, "grad2deg");
  byte_2553E92 = 100;
  byte_255438A = 100;
  byte_255441C = 100;
  byte_2553CB2 = 100;
  word_2553E90 = 28257;
  word_2553CB0 = 28257;
  strcpy((char *)&dword_2553EA8, "nand");
  strcpy((char *)&dword_2553CC8, "nand");
  byte_2554284 = 116;
  byte_2553CFA = 116;
  word_2553CE0 = 28526;
  word_2553CF8 = 28526;
  strcpy((char *)&word_2553F08, "or");
  strcpy((char *)&word_2553D10, "or");
  byte_2553DB7 = 4;
  byte_2553E47 = 4;
  byte_2553E8F = 4;
  byte_2553EBF = 4;
  byte_2553F07 = 4;
  byte_2553F97 = 4;
  byte_2553FC7 = 4;
  byte_2554027 = 4;
  byte_255421F = 4;
  byte_255427F = 4;
  byte_25542C7 = 4;
  byte_255430F = 4;
  byte_2554327 = 4;
  byte_2554357 = 4;
  byte_25543E7 = 4;
  byte_2554417 = 4;
  byte_25544A7 = 4;
  byte_25544BF = 4;
  byte_25544D7 = 4;
  byte_2554507 = 4;
  byte_2554537 = 4;
  byte_2553CDF = 4;
  byte_2553D3F = 4;
  strcpy((char *)&dword_2554010, "xnor");
  strcpy((char *)&dword_2553D28, "xnor");
  word_2554028 = 28536;
  word_2553D40 = 28536;
  word_2554040 = 38;
  word_2553D58 = 38;
  word_2554058 = 124;
  word_2553D70 = 124;
  strcpy((char *)&word_2553E18, "if");
  strcpy((char *)&word_2553A40, "if");
  strcpy((char *)&dword_2553F98, "switch");
  strcpy((char *)&dword_2553A58, "switch");
  byte_2553E17 = 3;
  byte_2553EA7 = 3;
  byte_2553ED7 = 3;
  byte_2553EEF = 3;
  byte_2553F67 = 3;
  byte_2553F7F = 3;
  byte_2553FF7 = 3;
  byte_255403F = 3;
  byte_2554207 = 3;
  byte_2554237 = 3;
  byte_25542DF = 3;
  byte_255436F = 3;
  byte_2554387 = 3;
  byte_255439F = 3;
  byte_25543B7 = 3;
  byte_25543CF = 3;
  byte_25543FF = 3;
  byte_255445F = 3;
  byte_2554477 = 3;
  byte_255448F = 3;
  byte_25544EF = 3;
  byte_255451F = 3;
  byte_2553CC7 = 3;
  byte_2553CF7 = 3;
  byte_2553D0F = 3;
  byte_2553D57 = 3;
  byte_2553A87 = 3;
  byte_2553E02 = 114;
  byte_2553F6A = 114;
  byte_2553FE2 = 114;
  byte_255402A = 114;
  byte_2554254 = 114;
  byte_25543A2 = 114;
  byte_2553CE2 = 114;
  byte_2553D42 = 114;
  byte_2553A72 = 114;
  word_2553E00 = 28518;
  word_2553A70 = 28518;
  byte_2553D9F = 5;
  byte_2553DFF = 5;
  byte_2553E5F = 5;
  byte_2553FDF = 5;
  byte_255400F = 5;
  byte_25541EF = 5;
  byte_255424F = 5;
  byte_2554267 = 5;
  byte_2554297 = 5;
  byte_25542F7 = 5;
  byte_255433F = 5;
  byte_255442F = 5;
  byte_255454F = 5;
  byte_2553A9F = 5;
  byte_2553FFC = 101;
  byte_2553A8C = 101;
  dword_2553FF8 = 1818847351;
  dword_2553A88 = 1818847351;
  strcpy((char *)&dword_2553F20, "repeat");
  strcpy((char *)&dword_2553AA0, "repeat");
  byte_2553F37 = 6;
  byte_2553F4F = 6;
  byte_2553FAF = 6;
  byte_25542AF = 6;
  byte_2554447 = 6;
  byte_2553A6F = 6;
  byte_2553AB7 = 6;
  byte_2553ACF = 6;
  strcpy((char *)&dword_2553F38, "return");
  strcpy((char *)&dword_2553AB8, "return");
  word_2553AD0 = 43;
  word_2553AE8 = 45;
  word_2553B00 = 42;
  word_2553B18 = 47;
  word_2553B30 = 37;
  word_2553B48 = 94;
  strcpy((char *)&word_2553B60, ":=");
  strcpy((char *)&word_2553B78, "+=");
  strcpy((char *)&word_2553B90, "-=");
  strcpy((char *)&word_2553BA8, "*=");
  strcpy((char *)&word_2553BC0, "/=");
  strcpy((char *)&word_2553BD8, "%=");
  word_2553BF0 = 60;
  strcpy((char *)&word_2553C08, "<=");
  strcpy((char *)&word_2553C20, "==");
  word_2553C38 = 61;
  strcpy((char *)&word_2553C50, "!=");
  strcpy((char *)&word_2553C68, "<>");
  byte_2553E2F = 2;
  byte_2553E77 = 2;
  byte_2553F1F = 2;
  byte_2553D27 = 2;
  byte_2553A57 = 2;
  byte_2553B77 = 2;
  byte_2553B8F = 2;
  byte_2553BA7 = 2;
  byte_2553BBF = 2;
  byte_2553BD7 = 2;
  byte_2553BEF = 2;
  byte_2553C1F = 2;
  byte_2553C37 = 2;
  byte_2553C67 = 2;
  byte_2553C7F = 2;
  byte_2553C97 = 2;
  strcpy((char *)&word_2553C80, ">=");
  byte_2553FE3 = 0;
  byte_255402B = 0;
  byte_2554057 = 1;
  byte_255406F = 1;
  byte_2553FFD = 0;
  byte_2553D6F = 1;
  byte_2553D87 = 1;
  byte_2553AE7 = 1;
  byte_2553AFF = 1;
  byte_2553B17 = 1;
  byte_2553B2F = 1;
  byte_2553B47 = 1;
  byte_2553B5F = 1;
  byte_2553C07 = 1;
  byte_2553C4F = 1;
  byte_2553CAF = 1;
  word_2553C98 = 62;
  byte_2553FCD = 0;
  byte_2553E03 = 0;
  byte_2553E93 = 0;
  byte_2553F6B = 0;
  byte_2553F53 = 0;
  byte_25541DD = 0;
  byte_25541F3 = 0;
  byte_2554223 = 0;
  byte_255423D = 0;
  byte_2554255 = 0;
  byte_2554285 = 0;
  byte_25542CB = 0;
  byte_25542E5 = 0;
  byte_255432D = 0;
  byte_255435B = 0;
  byte_2554373 = 0;
  byte_255438B = 0;
  byte_25543A3 = 0;
  byte_25543BB = 0;
  byte_25543EB = 0;
  byte_255441D = 0;
  byte_255444B = 0;
  byte_2554463 = 0;
  byte_255447B = 0;
  byte_25544DB = 0;
  byte_255450B = 0;
  byte_255453D = 0;
  byte_2553CB3 = 0;
  byte_2553CE3 = 0;
  byte_2553CFB = 0;
  byte_2553D43 = 0;
  byte_2553A73 = 0;
  byte_2553A8D = 0;
  return result;
}

void sub_9B5A4(uint64_t a1, int *a2, int a3, int a4)
{
}

void sub_9B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_553C0(&a9);
  sub_55758((uint64_t **)(v21 - 56));
  sub_9BB98(v20 + 416);
  sub_9FDC0(v20);
  _Unwind_Resume(a1);
}

void sub_9B85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18)
{
  sub_55758(&a18);
  if (a14 < 0)
  {
    operator delete(__p);
    sub_9BB98(v18 + 416);
    sub_9FDC0(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x9B844);
}

void sub_9B890(uint64_t a1)
{
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "road_speed_mps");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 528);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "road_freeflow_speed_mps");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 536);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "road_length_m");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 544);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "road_time_s");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 552);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "road_elevation_change_m");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 560);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "road_speed_volatility");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 568);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "road_acceleration_mps2");
  HIBYTE(__p[2]) = 22;
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 576);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_A2A84(a1);
  sub_9E524(a1, (uint64_t)__p);
  sub_9C594(a1 + 416, (uint64_t)__p);
  size_t v2 = v10;
  if (v10)
  {
    uint64_t v3 = v7;
    if (v7)
    {
      uint64_t v4 = 0;
      do
      {
        if (*((char *)v10 + v4 + 23) < 0) {
          operator delete(*(void **)((char *)v10 + v4));
        }
        v4 += 24;
        --v3;
      }
      while (v3);
      size_t v2 = v10;
    }
    free(v2);
  }
  if ((v9 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_27:
    operator delete(__p[4]);
    return;
  }
  operator delete(v8);
  if (v6 < 0) {
    goto LABEL_27;
  }
}

void sub_9BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_9BB98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9BB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9BB98(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(a1 + 104) + v4;
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        v4 += 24;
        --v3;
      }
      while (v3);
      size_t v2 = *(void **)(a1 + 104);
    }
    free(v2);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_9BC48(uint64_t a1, int *a2, int a3, int a4)
{
}

void sub_9BC54()
{
  int v0 = 42;
  sub_9B5A4((uint64_t)v1, &v0, 0, 100000000);
}

void sub_9BD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9BE48((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_9BD54(uint64_t a1)
{
  uint64_t v2 = a1 + 336;
  long long __p = operator new(0x28uLL);
  long long v5 = xmmword_20B9390;
  strcpy((char *)__p, "EV consumption model compilation");
  sub_9E938(v2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 400) = 1;
  sub_9E4E8(a1, 0x4884Fu);
  *(void *)(a1 + 560) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 528) = vdupq_n_s64(0x403AD288CE703AFCuLL);
  *(_OWORD *)(a1 + 544) = xmmword_20B98B0;
  sub_9E4D4(a1, 6000);
  sub_9C064(a1);
  return !sub_9E7F8(a1);
}

void sub_9BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9BE48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 520);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 488);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(a1 + 520) + v4;
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        v4 += 24;
        --v3;
      }
      while (v3);
      uint64_t v2 = *(void **)(a1 + 520);
    }
    free(v2);
  }
  if (*(char *)(a1 + 519) < 0)
  {
    operator delete(*(void **)(a1 + 496));
    if ((*(char *)(a1 + 471) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v6 = a1;
      return sub_9FDC0(v6);
    }
  }
  else if ((*(char *)(a1 + 471) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 448));
  uint64_t v6 = a1;

  return sub_9FDC0(v6);
}

BOOL sub_9BF18(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 52;
  if (a1[60] == a1[59] || (uint64_t v4 = sub_9D1D4((uint64_t)(a1 + 52), a2), v4 == -1))
  {
    uint64_t v8 = a1[65] + 24 * a1[61];
    uint64_t v14 = v3;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    sub_9D08C(&v14);
  }
  else
  {
    uint64_t v5 = a1[65];
    uint64_t v6 = v5 + 24 * v4;
    uint64_t v7 = v5 + 24 * a1[61];
    uint64_t v14 = v3;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
  }
  uint64_t v9 = a1[65] + 24 * a1[61];
  uint64_t v11 = v3;
  uint64_t v12 = v9;
  uint64_t v13 = v9;
  sub_9D08C(&v11);
  return v15 != v12;
}

double sub_9BFD0(uint64_t a1, uint64_t a2)
{
  double result = (double)a2 / 100.0;
  *(double *)(a1 + 544) = result;
  return result;
}

double sub_9BFE8(uint64_t a1, double a2)
{
  double result = a2 / 3.6;
  *(double *)(a1 + 528) = result;
  return result;
}

double sub_9BFFC(uint64_t a1, double a2)
{
  double result = a2 / 3.6;
  *(double *)(a1 + 536) = result;
  return result;
}

double sub_9C010(uint64_t a1, int a2)
{
  double result = (double)a2 / 10.0;
  *(double *)(a1 + 552) = result;
  return result;
}

double sub_9C024(uint64_t a1, int a2)
{
  double result = (double)a2 / 100.0;
  *(double *)(a1 + 560) = result;
  return result;
}

uint64_t sub_9C03C(uint64_t result, double a2)
{
  *(double *)(result + 568) = a2;
  return result;
}

double sub_9C044(uint64_t a1, double a2)
{
  double result = a2 * 0.0000771604938;
  *(double *)(a1 + 576) = result;
  return result;
}

double sub_9C058(uint64_t a1, unsigned int a2)
{
  double result = (double)a2;
  *(double *)(a1 + 48) = (double)a2;
  return result;
}

unsigned int sub_9C064(uint64_t a1)
{
  if (*(double *)(a1 + 544) == 0.0)
  {
    double v11 = 0.0;
    double v2 = 0.0;
LABEL_3:
    char v3 = 0;
    if ((double)(((uint64_t)(v2 + v2) + 1) >> 1) < -2147484.0) {
      goto LABEL_23;
    }
    goto LABEL_14;
  }
  sub_A3A80(a1, 0);
  double v11 = v4;
  double v2 = v4;
  if (v4 < 0.0)
  {
    uint64_t v5 = (uint64_t)(v4 + v4);
    if (v5 >= 1) {
      --v5;
    }
    char v3 = 1;
    if (v4 > -4.50359963e15) {
      double v4 = (double)(v5 >> 1);
    }
    if (v4 < -2147484.0) {
      goto LABEL_23;
    }
    goto LABEL_14;
  }
  if (v4 < 4.50359963e15) {
    goto LABEL_3;
  }
  char v3 = 0;
  if (v4 < -2147484.0)
  {
LABEL_23:
    sub_9C3C0("EVConsumptionModel expression produced an out-of-range energy value: ", (uint64_t)&v11, " Wh.");
    sub_9E8A0(a1 + 336, (uint64_t)&__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    long long __p = operator new(0x20uLL);
    long long v10 = xmmword_20B8E90;
    strcpy((char *)__p, "EV consumption model evaluation");
    sub_9E938(a1 + 336, (uint64_t)&__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    return 0;
  }
LABEL_14:
  if (v3)
  {
    double v6 = v2;
    if (v2 <= -4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v7 = (uint64_t)(v2 + v2);
    if (v7 >= 1) {
      --v7;
    }
  }
  else
  {
    double v6 = v2;
    if (v2 >= 4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v7 = (uint64_t)(v2 + v2) + 1;
  }
  double v6 = (double)(v7 >> 1);
LABEL_22:
  if (v6 > 2147484.0) {
    goto LABEL_23;
  }
  long long __p = operator new(0x20uLL);
  long long v10 = xmmword_20B8E90;
  strcpy((char *)__p, "EV consumption model evaluation");
  sub_9E938(a1 + 336, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  return llround(v2 * 1000.0);
}

void sub_9C394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9C3C0(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9C56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9C580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9C594(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return a1;
  }
  if (*(unsigned char *)(a2 + 25))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
    size_t v5 = (void **)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*v5);
      if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((*(char *)(a2 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      long long v6 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)size_t v5 = v6;
LABEL_14:
      sub_9C928((float32x2_t *)a1, a2, 4uLL);
      return a1;
    }
    sub_4200((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
    goto LABEL_14;
  }
  sub_9CC6C(v11, a2, 0x20uLL);
  sub_9C704(a1, (uint64_t)v11);
  uint64_t v7 = v16;
  if (v16)
  {
    uint64_t v8 = v13;
    if (v13)
    {
      uint64_t v9 = 0;
      do
      {
        if (*((char *)v16 + v9 + 23) < 0) {
          operator delete(*(void **)((char *)v16 + v9));
        }
        v9 += 24;
        --v8;
      }
      while (v8);
      uint64_t v7 = v16;
    }
    free(v7);
  }
  if (v15 < 0)
  {
    operator delete(__p);
    if ((v12 & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)&v11[4]);
  return a1;
}

void sub_9C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64x2_t sub_9C704(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  __p[0] = *(void **)(a1 + 40);
  *(void **)((char *)__p + 7) = *(void **)(a1 + 47);
  char v8 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v9;
  *(void **)(a2 + 47) = *(void **)((char *)__p + 7);
  long long v10 = __p[0];
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 55) = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v11;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v13;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  uint64_t v14 = a1 + 80;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    *(_OWORD *)long long __p = *(_OWORD *)v14;
    uint64_t v20 = *(void *)(a1 + 96);
    char v15 = (long long *)(a2 + 80);
    if (*(char *)(a2 + 103) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    long long v16 = *v15;
    *(void *)(v14 + 16) = *((void *)v15 + 2);
    *(_OWORD *)uint64_t v14 = v16;
    goto LABEL_9;
  }
  sub_4200(__p, *(void **)(a1 + 80), *(void *)(a1 + 88));
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)v14);
    char v15 = (long long *)(a2 + 80);
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    char v15 = (long long *)(a2 + 80);
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  sub_4200((unsigned char *)v14, *(void **)(a2 + 80), *(void *)(a2 + 88));
LABEL_9:
  if (*(char *)(a2 + 103) < 0)
  {
    operator delete(*(void **)v15);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_11:
    long long *v15 = *(_OWORD *)__p;
    *((void *)v15 + 2) = v20;
    goto LABEL_15;
  }
  sub_4200(v15, __p[0], (unint64_t)__p[1]);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
LABEL_15:
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v17;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 72))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_9C90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_9C928(float32x2_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  long long v4 = a1;
  unint64_t v5 = *(void *)(a2 + 64) - *(void *)(a2 + 56);
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(a1[2].f32[0] * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_9CE88(a1, v6);
  uint64_t v7 = *(long long **)(v3 + 104);
  uint64_t v8 = (uint64_t)v7 + 24 * *(void *)(v3 + 72);
  uint64_t v48 = v3;
  uint64_t v49 = v7;
  uint64_t v50 = v8;
  sub_9D08C(&v48);
  uint64_t v9 = *(void *)(v3 + 104) + 24 * *(void *)(v3 + 72);
  uint64_t v45 = v3;
  uint64_t v46 = v9;
  uint64_t v47 = v9;
  uint64x2_t result = sub_9D08C(&v45);
  uint64_t v11 = v49;
  if (v49 != (long long *)v46)
  {
    uint64_t v12 = (const void **)&v4[10];
    uint64_t v43 = v3;
    unint64_t v44 = v4;
    do
    {
      float32x2_t v14 = v4[9];
      int v15 = *((char *)v11 + 23);
      if (v15 >= 0) {
        long long v16 = (uint64_t *)v11;
      }
      else {
        long long v16 = *(uint64_t **)v11;
      }
      if (v15 >= 0) {
        unint64_t v17 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        unint64_t v17 = *((void *)v11 + 1);
      }
      unint64_t v18 = sub_B128((uint64_t)&v45, v16, v17);
      uint64_t v19 = *(void *)&v14 - 1;
      float32x2_t v20 = v4[13];
      size_t v21 = (size_t)v4[11];
      if (v4[12].i8[7] >= 0) {
        float32x2_t v22 = (float32x2_t)v4[12].u8[7];
      }
      else {
        float32x2_t v22 = v4[11];
      }
      if (v4[12].i8[7] < 0)
      {
        for (uint64_t i = 1; ; ++i)
        {
          unint64_t v32 = v18 & v19;
          double v24 = (void **)(*(void *)&v20 + 24 * (v18 & v19));
          int v33 = *((char *)v24 + 23);
          int64_t v34 = (unsigned __int8 *)v24[1];
          if (v33 >= 0) {
            int64_t v34 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
          }
          if ((unsigned __int8 *)v22 == v34)
          {
            long long v35 = v33 >= 0 ? (unsigned __int8 *)(*(void *)&v20 + 24 * (v18 & v19)) : (unsigned __int8 *)*v24;
            if (!memcmp(*v12, v35, v21)) {
              break;
            }
          }
          unint64_t v18 = i + v32;
        }
        BOOL v27 = v33 >> 31;
        uint64_t v3 = v43;
        long long v4 = v44;
      }
      else
      {
        if (v4[12].i8[7])
        {
          for (j = 0; ; unint64_t v18 = (v18 & v19) + j)
          {
            double v24 = (void **)(*(void *)&v20 + 24 * (v18 & v19));
            int v25 = *((char *)v24 + 23);
            double v26 = (unsigned __int8 *)v24[1];
            if (v25 >= 0) {
              double v26 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
            }
            if ((unsigned __int8 *)v22 == v26)
            {
              BOOL v27 = v25 >> 31;
              if (v25 >= 0) {
                unint64_t v28 = (unsigned __int8 *)(*(void *)&v20 + 24 * (v18 & v19));
              }
              else {
                unint64_t v28 = (unsigned __int8 *)*v24;
              }
              unint64_t v29 = v12;
              uint64_t v30 = v4[12].u8[7];
              while (*(unsigned __int8 *)v29 == *v28)
              {
                unint64_t v29 = (const void **)((char *)v29 + 1);
                ++v28;
                if (!--v30) {
                  goto LABEL_50;
                }
              }
            }
            ++j;
          }
        }
        unint64_t v36 = v18 & v19;
        double v24 = (void **)(*(void *)&v20 + 24 * (v18 & v19));
        BOOL v27 = *((char *)v24 + 23) < 0;
        double v37 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
        if (*((char *)v24 + 23) < 0) {
          double v37 = (unsigned __int8 *)v24[1];
        }
        if (v37 != (unsigned __int8 *)v4[12].u8[7])
        {
          uint64_t v38 = 1;
          do
          {
            unint64_t v36 = (v36 + v38) & v19;
            double v24 = (void **)(*(void *)&v20 + 24 * v36);
            BOOL v27 = *((char *)v24 + 23) < 0;
            double v39 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
            if (*((char *)v24 + 23) < 0) {
              double v39 = (unsigned __int8 *)v24[1];
            }
            ++v38;
          }
          while ((unsigned __int8 *)v22 != v39);
        }
      }
LABEL_50:
      double v40 = v49;
      if (v27) {
        operator delete(*v24);
      }
      if (*((char *)v40 + 23) < 0)
      {
        sub_4200(v24, *(void **)v40, *((void *)v40 + 1));
      }
      else
      {
        long long v41 = *v40;
        v24[2] = (void *)*((void *)v40 + 2);
        *(_OWORD *)double v24 = v41;
      }
      ++*(void *)&v4[8];
      uint64_t v49 = (long long *)((char *)v49 + 24);
      sub_9D08C(&v48);
      uint64_t v13 = *(void *)(v3 + 104) + 24 * *(void *)(v3 + 72);
      uint64_t v45 = v3;
      uint64_t v46 = v13;
      uint64_t v47 = v13;
      uint64x2_t result = sub_9D08C(&v45);
      uint64_t v11 = v49;
    }
    while (v49 != (long long *)v46);
  }
  ++v4[3].i32[1];
  return result;
}

void sub_9CC58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float32x2_t *sub_9CC6C(float32x2_t *a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1->f32 = *(_OWORD *)a2;
  *(_OWORD *)a1[2].f32 = v6;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200(&a1[4], *(void **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v8 = a1 + 10;
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    a1[6] = *(float32x2_t *)(a2 + 48);
    *(_OWORD *)a1[4].f32 = v7;
    uint64_t v8 = a1 + 10;
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      long long v9 = *(_OWORD *)(a2 + 80);
      void v8[2] = *(float32x2_t *)(a2 + 96);
      *(_OWORD *)v8->f32 = v9;
      goto LABEL_6;
    }
  }
  sub_4200(v8, *(void **)(a2 + 80), *(void *)(a2 + 88));
LABEL_6:
  a1[13] = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1->f32 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(a1[2], (float)(unint64_t)a1[9])));
    a1[3].i8[0] = 0;
    sub_9C928(a1, a2, a3);
    return a1;
  }
  else
  {
    unint64_t v11 = 4;
    if (a3 > 4) {
      goto LABEL_10;
    }
    while (1)
    {
      float v12 = a1[2].f32[0] * (float)v11;
      if (*(void *)(a2 + 64) - *(void *)(a2 + 56) < (unint64_t)v12) {
        break;
      }
      do
      {
LABEL_10:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a3);
    }
    a1[9] = (float32x2_t)v11;
    float v13 = a1[2].f32[1] * (float)v11;
    *a1 = (float32x2_t)(unint64_t)v12;
    a1[1] = (float32x2_t)(unint64_t)v13;
    a1[3].i8[0] = 0;
    return a1;
  }
}

void sub_9CE2C(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64x2_t sub_9CE88(float32x2_t *a1, unint64_t a2)
{
  long long v4 = (void *)a1[13];
  if (!v4)
  {
    uint64_t v8 = malloc_type_malloc(24 * a2, 0x1012040EC159624uLL);
LABEL_12:
    a1[13] = (float32x2_t)v8;
    long long v4 = v8;
    goto LABEL_13;
  }
  float32x2_t v5 = a1[9];
  if (!*(void *)&v5)
  {
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)&a1[13] + v6;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    v6 += 24;
    --*(void *)&v5;
  }
  while (v5);
  long long v4 = (void *)a1[13];
  if (*(void *)&a1[9] != a2)
  {
LABEL_11:
    uint64_t v8 = malloc_type_realloc(v4, 24 * a2, 0x1012040EC159624uLL);
    if (!v8)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_9CFC4((char *)a1, (uint64_t)v4, (uint64_t)v4 + 24 * a2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = (float32x2_t)a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(a1[2], (float)a2)));
  *(uint64x2_t *)a1->f32 = result;
  a1[3].i8[0] = 0;
  return result;
}

char *sub_9CFC4(char *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    float32x2_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = result + 80;
    do
    {
      uint64x2_t result = (char *)(a2 + v6);
      if (v5[103] < 0)
      {
        uint64x2_t result = (char *)sub_4200(result, *((void **)v5 + 10), *((void *)v5 + 11));
      }
      else
      {
        long long v8 = *(_OWORD *)v7;
        *((void *)result + 2) = *((void *)v7 + 2);
        *(_OWORD *)uint64x2_t result = v8;
      }
      v6 += 24;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

void sub_9D048(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_9D078(_Unwind_Exception *a1)
{
}

void *sub_9D08C(void *result)
{
  uint64_t v2 = (unsigned __int8 *)result[1];
  uint64_t v1 = (unsigned __int8 *)result[2];
  if (v2 == v1) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *result;
  float32x2_t v5 = (const void **)(*result + 80);
  uint64_t v6 = (const void **)(*result + 32);
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 103);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 103);
    }
    else {
      uint64_t v8 = *(void *)(v4 + 88);
    }
    int v9 = (char)v2[23];
    if (v9 >= 0) {
      uint64_t v10 = v2[23];
    }
    else {
      uint64_t v10 = *((void *)v2 + 1);
    }
    if (v8 == v10)
    {
      if (v9 >= 0) {
        unint64_t v11 = v2;
      }
      else {
        unint64_t v11 = *(unsigned __int8 **)v2;
      }
      if ((v7 & 0x80) != 0)
      {
        uint64x2_t result = (void *)memcmp(*v5, v11, *(void *)(v4 + 88));
        if (!result) {
          goto LABEL_4;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 103)) {
          goto LABEL_4;
        }
        float v12 = v5;
        while (*(unsigned __int8 *)v12 == *v11)
        {
          float v12 = (const void **)((char *)v12 + 1);
          ++v11;
          if (!--v7) {
            goto LABEL_4;
          }
        }
      }
    }
    if (!*(void *)(v4 + 56)) {
      return result;
    }
    uint64_t v13 = *(unsigned __int8 *)(v4 + 55);
    uint64_t v14 = (v13 & 0x80u) == 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
    if (v14 != v10) {
      return result;
    }
    if (v9 >= 0) {
      int v15 = v2;
    }
    else {
      int v15 = *(unsigned __int8 **)v2;
    }
    if ((v13 & 0x80) != 0)
    {
      uint64x2_t result = (void *)memcmp(*v6, v15, *(void *)(v4 + 40));
      if (result) {
        return result;
      }
      goto LABEL_4;
    }
    if (*(unsigned char *)(v4 + 55)) {
      break;
    }
LABEL_4:
    v2 += 24;
    v3[1] = v2;
    if (v2 == v1) {
      return result;
    }
  }
  long long v16 = v6;
  while (*(unsigned __int8 *)v16 == *v15)
  {
    long long v16 = (const void **)((char *)v16 + 1);
    ++v15;
    if (!--v13) {
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_9D1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v6 = v5;
  }
  unint64_t v7 = sub_B128((uint64_t)&v44, (uint64_t *)a2, v6);
  uint64_t v8 = 0;
  uint64_t v9 = v4 - 1;
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 88);
  }
  size_t __n = *(void *)(a1 + 88);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 23);
  double v37 = *(const void **)v2;
  size_t v38 = *(void *)(v2 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v2 + 8);
  }
  uint64_t v43 = -1;
  uint64_t v42 = *(unsigned __int8 *)(v2 + 23);
  double v40 = (unsigned __int8 *)v2;
  uint64_t v41 = v14;
  while (1)
  {
    unint64_t v16 = v7 & v9;
    unint64_t v17 = (unsigned __int8 *)(v10 + 24 * (v7 & v9));
    int v18 = (char)v17[23];
    if (v18 >= 0) {
      uint64_t v19 = v17[23];
    }
    else {
      uint64_t v19 = *((void *)v17 + 1);
    }
    if (v12 != v19) {
      goto LABEL_29;
    }
    float32x2_t v20 = v18 >= 0 ? (unsigned __int8 *)(v10 + 24 * (v7 & v9)) : *(unsigned __int8 **)v17;
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!v11) {
      return -1;
    }
    size_t v21 = (unsigned __int8 *)(a1 + 80);
    uint64_t v22 = v11;
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v22) {
        return -1;
      }
    }
LABEL_29:
    if (*(void *)(a1 + 56))
    {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 55);
      uint64_t v26 = (v25 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 55) : *(void *)(a1 + 40);
      if (v26 == v19)
      {
        if (v18 >= 0) {
          BOOL v27 = v17;
        }
        else {
          BOOL v27 = *(unsigned __int8 **)v17;
        }
        if ((v25 & 0x80) != 0)
        {
          uint64_t v29 = v11;
          int v30 = memcmp(*(const void **)(a1 + 32), v27, *(void *)(a1 + 40));
          uint64_t v14 = v41;
          uint64_t v13 = v42;
          uint64_t v11 = v29;
          if (!v30)
          {
LABEL_11:
            uint64_t v15 = v43;
            if (v43 == -1) {
              uint64_t v15 = v16;
            }
            uint64_t v43 = v15;
            goto LABEL_14;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 55)) {
            goto LABEL_11;
          }
          unint64_t v28 = (unsigned __int8 *)(a1 + 32);
          while (*v28 == *v27)
          {
            ++v28;
            ++v27;
            if (!--v25) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (v14 == v19)
    {
      if (v18 >= 0) {
        uint64_t v31 = v17;
      }
      else {
        uint64_t v31 = *(unsigned __int8 **)v17;
      }
      if ((v13 & 0x80) != 0)
      {
        uint64_t v34 = v11;
        int v35 = memcmp(v37, v31, v38);
        uint64_t v14 = v41;
        uint64_t v13 = v42;
        uint64_t v11 = v34;
        if (!v35) {
          return v16;
        }
      }
      else
      {
        unint64_t v32 = v40;
        if (!v13) {
          return v16;
        }
        uint64_t v33 = v13;
        while (*v32 == *v31)
        {
          ++v32;
          ++v31;
          if (!--v33) {
            return v16;
          }
        }
      }
    }
LABEL_14:
    unint64_t v7 = ++v8 + v16;
  }
  uint64_t v23 = v11;
  int v24 = memcmp(*(const void **)(a1 + 80), v20, __n);
  uint64_t v14 = v41;
  uint64_t v13 = v42;
  uint64_t v11 = v23;
  if (v24) {
    goto LABEL_29;
  }
  return -1;
}

uint64_t sub_9D444()
{
  strcpy((char *)&dword_2555150, "break");
  strcpy((char *)&dword_2555168, "case");
  strcpy((char *)&qword_2555180, "continue");
  strcpy((char *)&dword_2555198, "default");
  uint64_t result = 4;
  strcpy((char *)&dword_25551B0, "false");
  strcpy((char *)&dword_25551F8, "else");
  strcpy((char *)&dword_2555210, "ilike");
  strcpy((char *)&word_2555228, "in");
  dword_2555288 = 7499630;
  dword_25552A0 = 7630702;
  strcpy((char *)&dword_25552B8, "null");
  word_2555318 = 26739;
  word_2555330 = 26739;
  strcpy((char *)&dword_2555378, "true");
  dword_2555390 = 1769238133;
  word_25553A8 = 24950;
  byte_25545F7 = 3;
  byte_25545E2 = 115;
  word_25545E0 = 25185;
  byte_25545E3 = 0;
  byte_255460F = 4;
  strcpy((char *)&dword_25545F8, "acos");
  byte_2554627 = 5;
  byte_25546D4 = 107;
  byte_2554614 = 104;
  dword_2554610 = 1936679777;
  byte_2554615 = 0;
  byte_255463F = 3;
  byte_255462A = 100;
  word_2554628 = 28257;
  byte_255462B = 0;
  byte_2554657 = 4;
  dword_25546D0 = 1634038370;
  strcpy((char *)&dword_2554640, "asin");
  byte_255466F = 5;
  byte_255465C = 104;
  dword_2554658 = 1852404577;
  byte_255465D = 0;
  byte_2554687 = 4;
  strcpy((char *)&dword_25546E8, "case");
  strcpy((char *)&dword_2554670, "atan");
  byte_255469F = 5;
  byte_255468C = 104;
  dword_2554688 = 1851880545;
  byte_255468D = 0;
  byte_25546B7 = 5;
  strcpy((char *)&qword_2554730, "continue");
  byte_25546A4 = 50;
  dword_25546A0 = 1851880545;
  byte_25546A5 = 0;
  byte_25546CF = 3;
  strcpy((char *)&dword_25547A8, "default");
  byte_25546BA = 103;
  dword_2554868 = 1936482662;
  word_25546B8 = 30305;
  byte_25546BB = 0;
  byte_25546E7 = 5;
  byte_25546D5 = 0;
  byte_25546FF = 4;
  byte_2554717 = 4;
  strcpy((char *)&dword_2554928, "else");
  strcpy((char *)&dword_2554700, "ceil");
  byte_255472F = 5;
  dword_2554940 = 1802071145;
  byte_255471C = 112;
  strcpy((char *)&word_2554958, "in");
  dword_2554718 = 1835101283;
  byte_255471D = 0;
  byte_2554747 = 8;
  byte_255475F = 3;
  byte_255474A = 115;
  word_2554748 = 28515;
  byte_255474B = 0;
  byte_2554777 = 4;
  word_2554C28 = 26739;
  word_2554C40 = 26739;
  strcpy((char *)&dword_2554760, "cosh");
  byte_255478F = 3;
  strcpy((char *)&dword_2554D30, "true");
  byte_255477A = 116;
  word_2554778 = 28515;
  byte_255477B = 0;
  byte_25547A7 = 3;
  dword_2554D60 = 1769238133;
  byte_2554792 = 99;
  word_2554D78 = 24950;
  word_2554790 = 29539;
  byte_2554793 = 0;
  byte_25547BF = 7;
  byte_25547D7 = 8;
  word_2555438 = 25185;
  strcpy((char *)&qword_25547C0, "deg2grad");
  byte_25547EF = 7;
  strcpy((char *)&dword_2555450, "acos");
  dword_2555468 = 1936679777;
  strcpy((char *)&dword_25547D8, "deg2rad");
  byte_2554807 = 5;
  byte_25547F4 = 108;
  strcpy((char *)&dword_2555480, "asin");
  dword_2555498 = 1852404577;
  dword_25547F0 = 1635086693;
  byte_25547F5 = 0;
  byte_255481F = 3;
  byte_255546C = 104;
  byte_255549C = 104;
  byte_25554CC = 104;
  byte_255480A = 102;
  byte_25554E4 = 50;
  word_2554808 = 29285;
  byte_255480B = 0;
  byte_2554837 = 4;
  strcpy((char *)&dword_25554B0, "atan");
  dword_25554C8 = 1851880545;
  dword_25554E0 = 1851880545;
  strcpy((char *)&dword_2554820, "erfc");
  byte_255484F = 3;
  byte_255483A = 112;
  word_25554F8 = 30305;
  word_2554838 = 30821;
  byte_255483B = 0;
  byte_2554867 = 5;
  strcpy((char *)&dword_2555510, "ceil");
  byte_2554854 = 49;
  dword_2555528 = 1835101283;
  dword_2554850 = 1836087397;
  byte_2554855 = 0;
  byte_255487F = 5;
  byte_255486C = 101;
  byte_255486D = 0;
  byte_2554897 = 5;
  byte_2554884 = 114;
  byte_255543A = 115;
  byte_2555542 = 115;
  dword_2554880 = 1869573222;
  byte_2554885 = 0;
  byte_25548AF = 3;
  byte_255489A = 114;
  word_2554898 = 28518;
  byte_255489B = 0;
  byte_25548C7 = 4;
  strcpy((char *)&dword_2555558, "cosh");
  strcpy((char *)&dword_25548B0, "frac");
  byte_25548DF = 8;
  word_2555540 = 28515;
  word_2555570 = 28515;
  strcpy((char *)&qword_25548C8, "grad2deg");
  byte_25548F7 = 5;
  byte_25548E4 = 116;
  word_2555588 = 29539;
  dword_25548E0 = 1869642088;
  byte_25548E5 = 0;
  byte_255490F = 6;
  strcpy((char *)&dword_25548F8, "iclamp");
  byte_2554927 = 2;
  strcpy((char *)&word_2554910, "if");
  byte_255493F = 4;
  byte_2554957 = 5;
  byte_2554944 = 101;
  byte_2554945 = 0;
  byte_255496F = 2;
  byte_2554987 = 7;
  strcpy((char *)&dword_2554970, "inrange");
  byte_255499F = 4;
  strcpy((char *)&dword_2554988, "like");
  byte_25549B7 = 3;
  byte_25549A2 = 103;
  word_25549A0 = 28524;
  byte_25549A3 = 0;
  byte_25549CF = 5;
  byte_25549BC = 48;
  dword_25549B8 = 828862316;
  byte_25549BD = 0;
  byte_25549E7 = 4;
  strcpy((char *)&dword_25549D0, "log2");
  byte_25549FF = 4;
  strcpy((char *)&dword_25549E8, "logn");
  byte_2554A17 = 5;
  byte_2554A04 = 112;
  dword_2554A00 = 828862316;
  byte_2554A05 = 0;
  byte_2554A2F = 4;
  strcpy((char *)&dword_2554A18, "mand");
  byte_2554A47 = 3;
  byte_2554A32 = 120;
  word_2554A30 = 24941;
  byte_2554A33 = 0;
  byte_2554A5F = 3;
  byte_2554A4A = 110;
  word_2554A48 = 26989;
  byte_2554A4B = 0;
  byte_2554A77 = 3;
  byte_2554A62 = 100;
  word_2554A60 = 28525;
  byte_2554A63 = 0;
  byte_2554A8F = 3;
  byte_2554A7A = 114;
  word_2554A78 = 28525;
  byte_2554A7B = 0;
  byte_2554AA7 = 3;
  byte_2554A92 = 108;
  word_2554A90 = 30061;
  byte_2554A93 = 0;
  byte_2554ABF = 4;
  strcpy((char *)&dword_2554AA8, "ncdf");
  byte_2554AD7 = 4;
  strcpy((char *)&dword_2554AC0, "nand");
  byte_2554AEF = 3;
  byte_2554ADA = 114;
  word_2554AD8 = 28526;
  byte_2554ADB = 0;
  byte_2554B07 = 3;
  byte_2554AF2 = 116;
  word_2554AF0 = 28526;
  byte_2554AF3 = 0;
  strcpy(&byte_2554B1F, "\tnull");
  strcpy((char *)&qword_2554B08, "not_equal");
  byte_2554B37 = 4;
  byte_2554B4F = 2;
  byte_255559F = 3;
  byte_255558A = 99;
  byte_255558B = 0;
  strcpy((char *)&word_2554B38, "or");
  byte_2555587 = 3;
  byte_2555572 = 116;
  byte_2555573 = 0;
  byte_2554B67 = 3;
  byte_2555557 = 3;
  byte_2555543 = 0;
  byte_255556F = 4;
  byte_2554B52 = 119;
  byte_255553F = 5;
  byte_255552C = 112;
  byte_255552D = 0;
  word_2554B50 = 28528;
  byte_2554B53 = 0;
  byte_2554B7F = 7;
  byte_25554FB = 0;
  byte_2555527 = 4;
  strcpy((char *)&dword_2554B68, "rad2deg");
  byte_2554B97 = 6;
  byte_25554E5 = 0;
  byte_255550F = 3;
  byte_25554FA = 103;
  byte_25554DF = 5;
  byte_25554CD = 0;
  byte_25554F7 = 5;
  strcpy((char *)&dword_2554B80, "repeat");
  byte_2554BAF = 6;
  byte_255549D = 0;
  byte_25554C7 = 4;
  byte_2555497 = 4;
  byte_25554AF = 5;
  strcpy((char *)&dword_2554B98, "return");
  byte_2554BC7 = 4;
  byte_255547F = 5;
  byte_255546D = 0;
  strcpy((char *)&dword_2554BB0, "root");
  byte_2554BDF = 5;
  byte_255543B = 0;
  byte_2555467 = 4;
  byte_2554DC2 = 114;
  byte_2554E07 = 1;
  word_2554DF0 = 124;
  byte_255544F = 3;
  word_2554DC0 = 28536;
  byte_2554DC3 = 0;
  byte_2554DEF = 1;
  word_2554DD8 = 38;
  byte_2554D95 = 0;
  byte_2554DBF = 4;
  strcpy((char *)&dword_2554DA8, "xnor");
  byte_2554DD7 = 3;
  byte_2554BCC = 100;
  byte_2554D7B = 0;
  byte_2554DA7 = 5;
  byte_2554D94 = 101;
  dword_2554D90 = 1818847351;
  dword_2554BC8 = 1853190002;
  byte_2554D64 = 108;
  byte_2554D65 = 0;
  byte_2554D8F = 3;
  byte_2554D7A = 114;
  byte_2554D5F = 5;
  byte_2554D4C = 99;
  dword_2554D48 = 1853190772;
  byte_2554D4D = 0;
  byte_2554D77 = 5;
  word_2554C58 = 26995;
  byte_2554D47 = 4;
  word_2554D00 = 24948;
  byte_2554D03 = 0;
  byte_2554D2F = 4;
  strcpy((char *)&dword_2554D18, "tanh");
  strcpy((char *)&dword_2554CE8, "switch");
  byte_2554D17 = 3;
  byte_2554D02 = 110;
  byte_2554CCF = 3;
  byte_2554CE7 = 4;
  strcpy((char *)&dword_2554CD0, "swap");
  byte_2554CFF = 6;
  byte_2554CBA = 109;
  word_2554CB8 = 30067;
  byte_2554CBB = 0;
  strcpy((char *)&dword_2554C88, "sinh");
  byte_2554CB7 = 4;
  strcpy((char *)&dword_2554CA0, "sqrt");
  byte_2554C5B = 0;
  byte_2554C87 = 4;
  strcpy((char *)&dword_2554C70, "sinc");
  byte_2554C9F = 4;
  byte_2554BCD = 0;
  byte_2554BF7 = 6;
  byte_2554C42 = 114;
  byte_2554C43 = 0;
  byte_2554C6F = 3;
  byte_2554C5A = 110;
  byte_2554C3F = 3;
  byte_2554C2A = 108;
  byte_2554C2B = 0;
  byte_2554C57 = 3;
  byte_2554BFB = 0;
  byte_2554C27 = 3;
  byte_2554C12 = 110;
  word_2554C10 = 26483;
  byte_2554C13 = 0;
  strcpy((char *)&dword_2554BE0, "roundn");
  byte_2554C0F = 3;
  byte_2554BFA = 99;
  word_2554BF8 = 25971;
  dword_25555A0 = 1635086693;
  byte_25555BA = 102;
  word_25555B8 = 29285;
  strcpy((char *)&dword_25555D0, "erfc");
  word_25555E8 = 30821;
  byte_2555604 = 49;
  dword_2555600 = 1836087397;
  dword_2555618 = 1869573222;
  strcpy((char *)&dword_2555630, "frac");
  dword_2555648 = 1869642088;
  strcpy((char *)&dword_2555660, "iclamp");
  strcpy((char *)&dword_2555240, "like");
  strcpy((char *)&dword_2555678, "like");
  byte_2555692 = 103;
  word_2555690 = 28524;
  byte_25556AC = 48;
  strcpy((char *)&dword_25556C0, "log2");
  strcpy((char *)&dword_25556D8, "logn");
  byte_25555EA = 112;
  byte_25556F4 = 112;
  dword_25556A8 = 828862316;
  dword_25556F0 = 828862316;
  strcpy((char *)&dword_2555708, "mand");
  byte_2555722 = 120;
  word_2555720 = 24941;
  word_2555738 = 26989;
  word_2555750 = 28525;
  word_2555768 = 28525;
  word_2555780 = 30061;
  strcpy((char *)&dword_2555798, "ncdf");
  byte_25557B2 = 119;
  word_25557B0 = 28528;
  strcpy((char *)&dword_25557C8, "root");
  dword_25557E0 = 1853190002;
  strcpy((char *)&dword_25557F8, "roundn");
  word_2555810 = 25971;
  word_2555828 = 26483;
  word_2555840 = 26995;
  strcpy((char *)&dword_2555858, "sinc");
  strcpy((char *)&dword_2555870, "sinh");
  strcpy((char *)&dword_2555888, "sqrt");
  byte_25558A2 = 109;
  word_25558A0 = 30067;
  strcpy((char *)&dword_2555348, "swap");
  strcpy((char *)&dword_25558B8, "swap");
  byte_255573A = 110;
  byte_255582A = 110;
  byte_2555842 = 110;
  byte_25558D2 = 110;
  word_25558D0 = 24948;
  strcpy((char *)&dword_25558E8, "tanh");
  byte_2555812 = 99;
  byte_2555904 = 99;
  dword_2555900 = 1853190772;
  strcpy(&byte_255592F, "\tinrange");
  byte_255531A = 108;
  byte_2555394 = 108;
  byte_25555A4 = 108;
  byte_2555782 = 108;
  strcpy((char *)&qword_2555918, "not_equal");
  strcpy((char *)&qword_2555948, "deg2grad");
  strcpy((char *)&dword_2555960, "deg2rad");
  byte_25551AF = 7;
  byte_2555947 = 7;
  byte_2555977 = 7;
  byte_255598F = 7;
  strcpy((char *)&dword_2555978, "rad2deg");
  byte_2555197 = 8;
  byte_255595F = 8;
  byte_25559A7 = 8;
  strcpy((char *)&qword_2555990, "grad2deg");
  byte_255525A = 100;
  byte_2555752 = 100;
  byte_25557E4 = 100;
  byte_255507A = 100;
  word_2555258 = 28257;
  word_2555078 = 28257;
  strcpy((char *)&dword_2555270, "nand");
  strcpy((char *)&dword_2555090, "nand");
  byte_255564C = 116;
  byte_25550C2 = 116;
  word_25550A8 = 28526;
  word_25550C0 = 28526;
  strcpy((char *)&word_25552D0, "or");
  strcpy((char *)&word_25550D8, "or");
  byte_255517F = 4;
  byte_255520F = 4;
  byte_2555257 = 4;
  byte_2555287 = 4;
  byte_25552CF = 4;
  byte_255535F = 4;
  byte_255538F = 4;
  byte_25553EF = 4;
  byte_25555E7 = 4;
  byte_2555647 = 4;
  byte_255568F = 4;
  byte_25556D7 = 4;
  byte_25556EF = 4;
  byte_255571F = 4;
  byte_25557AF = 4;
  byte_25557DF = 4;
  byte_255586F = 4;
  byte_2555887 = 4;
  byte_255589F = 4;
  byte_25558CF = 4;
  byte_25558FF = 4;
  byte_25550A7 = 4;
  byte_2555107 = 4;
  strcpy((char *)&dword_25553D8, "xnor");
  strcpy((char *)&dword_25550F0, "xnor");
  word_25553F0 = 28536;
  word_2555108 = 28536;
  word_2555408 = 38;
  word_2555120 = 38;
  word_2555420 = 124;
  word_2555138 = 124;
  strcpy((char *)&word_25551E0, "if");
  strcpy((char *)&word_2554E08, "if");
  strcpy((char *)&dword_2555360, "switch");
  strcpy((char *)&dword_2554E20, "switch");
  byte_25551DF = 3;
  byte_255526F = 3;
  byte_255529F = 3;
  byte_25552B7 = 3;
  byte_255532F = 3;
  byte_2555347 = 3;
  byte_25553BF = 3;
  byte_2555407 = 3;
  byte_25555CF = 3;
  byte_25555FF = 3;
  byte_25556A7 = 3;
  byte_2555737 = 3;
  byte_255574F = 3;
  byte_2555767 = 3;
  byte_255577F = 3;
  byte_2555797 = 3;
  byte_25557C7 = 3;
  byte_2555827 = 3;
  byte_255583F = 3;
  byte_2555857 = 3;
  byte_25558B7 = 3;
  byte_25558E7 = 3;
  byte_255508F = 3;
  byte_25550BF = 3;
  byte_25550D7 = 3;
  byte_255511F = 3;
  byte_2554E4F = 3;
  byte_25551CA = 114;
  byte_2555332 = 114;
  byte_25553AA = 114;
  byte_25553F2 = 114;
  byte_255561C = 114;
  byte_255576A = 114;
  byte_25550AA = 114;
  byte_255510A = 114;
  byte_2554E3A = 114;
  word_25551C8 = 28518;
  word_2554E38 = 28518;
  byte_2555167 = 5;
  byte_25551C7 = 5;
  byte_2555227 = 5;
  byte_25553A7 = 5;
  byte_25553D7 = 5;
  byte_25555B7 = 5;
  byte_2555617 = 5;
  byte_255562F = 5;
  byte_255565F = 5;
  byte_25556BF = 5;
  byte_2555707 = 5;
  byte_25557F7 = 5;
  byte_2555917 = 5;
  byte_2554E67 = 5;
  byte_25553C4 = 101;
  byte_2554E54 = 101;
  dword_25553C0 = 1818847351;
  dword_2554E50 = 1818847351;
  strcpy((char *)&dword_25552E8, "repeat");
  strcpy((char *)&dword_2554E68, "repeat");
  byte_25552FF = 6;
  byte_2555317 = 6;
  byte_2555377 = 6;
  byte_2555677 = 6;
  byte_255580F = 6;
  byte_2554E37 = 6;
  byte_2554E7F = 6;
  byte_2554E97 = 6;
  strcpy((char *)&dword_2555300, "return");
  strcpy((char *)&dword_2554E80, "return");
  word_2554E98 = 43;
  word_2554EB0 = 45;
  word_2554EC8 = 42;
  word_2554EE0 = 47;
  word_2554EF8 = 37;
  word_2554F10 = 94;
  strcpy((char *)&word_2554F28, ":=");
  strcpy((char *)&word_2554F40, "+=");
  strcpy((char *)&word_2554F58, "-=");
  strcpy((char *)&word_2554F70, "*=");
  strcpy((char *)&word_2554F88, "/=");
  strcpy((char *)&word_2554FA0, "%=");
  word_2554FB8 = 60;
  strcpy((char *)&word_2554FD0, "<=");
  strcpy((char *)&word_2554FE8, "==");
  word_2555000 = 61;
  strcpy((char *)&word_2555018, "!=");
  strcpy((char *)&word_2555030, "<>");
  byte_25551F7 = 2;
  byte_255523F = 2;
  byte_25552E7 = 2;
  byte_25550EF = 2;
  byte_2554E1F = 2;
  byte_2554F3F = 2;
  byte_2554F57 = 2;
  byte_2554F6F = 2;
  byte_2554F87 = 2;
  byte_2554F9F = 2;
  byte_2554FB7 = 2;
  byte_2554FE7 = 2;
  byte_2554FFF = 2;
  byte_255502F = 2;
  byte_2555047 = 2;
  byte_255505F = 2;
  strcpy((char *)&word_2555048, ">=");
  byte_25553AB = 0;
  byte_25553F3 = 0;
  byte_255541F = 1;
  byte_2555437 = 1;
  byte_25553C5 = 0;
  byte_2555137 = 1;
  byte_255514F = 1;
  byte_2554EAF = 1;
  byte_2554EC7 = 1;
  byte_2554EDF = 1;
  byte_2554EF7 = 1;
  byte_2554F0F = 1;
  byte_2554F27 = 1;
  byte_2554FCF = 1;
  byte_2555017 = 1;
  byte_2555077 = 1;
  word_2555060 = 62;
  byte_2555395 = 0;
  byte_25551CB = 0;
  byte_255525B = 0;
  byte_2555333 = 0;
  byte_255531B = 0;
  byte_25555A5 = 0;
  byte_25555BB = 0;
  byte_25555EB = 0;
  byte_2555605 = 0;
  byte_255561D = 0;
  byte_255564D = 0;
  byte_2555693 = 0;
  byte_25556AD = 0;
  byte_25556F5 = 0;
  byte_2555723 = 0;
  byte_255573B = 0;
  byte_2555753 = 0;
  byte_255576B = 0;
  byte_2555783 = 0;
  byte_25557B3 = 0;
  byte_25557E5 = 0;
  byte_2555813 = 0;
  byte_255582B = 0;
  byte_2555843 = 0;
  byte_25558A3 = 0;
  byte_25558D3 = 0;
  byte_2555905 = 0;
  byte_255507B = 0;
  byte_25550AB = 0;
  byte_25550C3 = 0;
  byte_255510B = 0;
  byte_2554E3B = 0;
  byte_2554E55 = 0;
  return result;
}

unsigned int sub_9E49C(uint64_t a1)
{
  return llround(*(double *)(a1 + 8) * 1000.0);
}

unsigned int sub_9E4B8(uint64_t a1)
{
  return llround(*(double *)(a1 + 16) * 1000.0);
}

double sub_9E4D4(uint64_t a1, int a2)
{
  double result = (double)a2 / 10.0;
  *(double *)(a1 + 24) = result;
  return result;
}

double sub_9E4E8(uint64_t a1, unsigned int a2)
{
  if (a2 == -1)
  {
    double result = 25.0;
    *(double *)(a1 + 32) = 25.0;
  }
  else
  {
    double result = (double)a2 / 1000.0 + -273.15;
    *(double *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_9E524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 26) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 16) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 32;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)a2 = xmmword_20B98A0;
  *(_WORD *)(a2 + 24) = 256;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 103) = 0;
  uint64_t v4 = malloc_type_malloc(0x300uLL, 0x1012040EC159624uLL);
  *(void *)(a2 + 104) = v4;
  sub_9CFC4((char *)a2, (uint64_t)v4, (uint64_t)v4 + 24 * *(void *)(a2 + 72));
  uint64_t v5 = *(void *)(a1 + 408);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  sub_9E6BC(v5 + 472, &v12);
  if ((void)v13 != *((void *)&v12 + 1))
  {
    unint64_t v6 = (void *)(*((void *)&v12 + 1) + 8 * ((unint64_t)v14 >> 7));
    unint64_t v7 = (long long *)(*v6 + 32 * (v14 & 0x7F));
    uint64_t v8 = *(void *)(*((void *)&v12 + 1) + (((*((void *)&v14 + 1) + (void)v14) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((void *)&v14 + 1) + v14) & 0x7F);
    while (v7 != (long long *)v8)
    {
      sub_AD0D8(a2, 1);
      if (sub_9D1D4(a2, (uint64_t)v7) == -1) {
        sub_AD4E8(a2, v7, v9, v15);
      }
      v7 += 2;
      if ((uint32_t *)((char *)v7 - *v6) == &stru_FF0.dylib.current_version)
      {
        uint64_t v10 = (long long *)v6[1];
        ++v6;
        unint64_t v7 = v10;
      }
    }
  }
  return sub_A9BD0((uint64_t)&v12);
}

void sub_9E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_A9BD0((uint64_t)&a9);
  sub_9BB98(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_9E6BC(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 8) && !*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(char **)(a1 + 24);
  if ((char *)v4 == v5) {
    return 0;
  }
  unint64_t v6 = 0;
  do
  {
    uint64_t v8 = v4 + 32 * v6;
    BOOL v9 = *(char *)(v8 + 23) < 0;
    uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(v8 + 8);
    }
    if (v10)
    {
      unint64_t v11 = 0;
      do
      {
        if (v9) {
          uint64_t v12 = *(void *)v8;
        }
        else {
          uint64_t v12 = v8;
        }
        char v13 = __tolower(*(char *)(v12 + v11));
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = *(void *)v8;
        }
        *(unsigned char *)(v14 + v11++) = v13;
        BOOL v9 = *(char *)(v8 + 23) < 0;
        unint64_t v15 = *(unsigned __int8 *)(v8 + 23);
        if ((v15 & 0x80u) != 0) {
          unint64_t v15 = *(void *)(v8 + 8);
        }
      }
      while (v11 < v15);
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(char **)(a1 + 24);
    }
    ++v6;
    unint64_t v7 = (uint64_t)&v5[-v4] >> 5;
  }
  while (v6 < v7);
  unint64_t v16 = 126 - 2 * __clz(v7);
  if (v5 == (char *)v4) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_A9D5C(v4, v5, (uint64_t)&v19, v17, 1);
  sub_AC898(*(unsigned __int8 **)(a1 + 16), *(unsigned __int8 **)(a1 + 24), a2);
  return a2[5];
}

BOOL sub_9E7F8(uint64_t a1)
{
  return *(void *)(a1 + 360) != *(void *)(a1 + 368);
}

char *sub_9E808(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    double result = sub_6E6EC((char **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    double result = (char *)(v3 + 24);
    *(void *)(a1 + 8) = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
  }
  return result;
}

void sub_9E898(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_9E8A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= *(void *)(a1 + 40))
  {
    double result = sub_6E6EC((char **)(a1 + 24), a2);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 32), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    double result = (char *)(v3 + 24);
    *(void *)(a1 + 32) = v3 + 24;
    *(void *)(a1 + 32) = v3 + 24;
  }
  return result;
}

void sub_9E930(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_9E938(uint64_t result, uint64_t a2)
{
  unint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 56);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 32) - *(void *)(result + 24)) >> 3);
  if (v5 == v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3) == *(void *)(result + 48)) {
      goto LABEL_36;
    }
    double result = sub_723EC(2u);
    if (!result) {
      goto LABEL_36;
    }
    sub_6BAC((uint64_t)&v69);
    if (byte_25561E7 >= 0) {
      unint64_t v6 = &xmmword_25561D0;
    }
    else {
      unint64_t v6 = (long long *)xmmword_25561D0;
    }
    if (byte_25561E7 >= 0) {
      uint64_t v7 = byte_25561E7;
    }
    else {
      uint64_t v7 = *((void *)&xmmword_25561D0 + 1);
    }
    uint64_t v8 = sub_188FC78(&v69, (uint64_t)v6, v7);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    uint64_t v12 = sub_188FC78(v8, v10, v11);
    sub_188FC78(v12, (uint64_t)": ", 2);
    char v13 = (void *)std::ostream::operator<<();
    sub_188FC78(v13, (uint64_t)" errors and ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" warnings occurred (model id ", 29);
    std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
  }
  else
  {
    double result = sub_723EC(3u);
    if (!result) {
      goto LABEL_36;
    }
    sub_6BAC((uint64_t)&v69);
    if (byte_25561E7 >= 0) {
      unint64_t v16 = &xmmword_25561D0;
    }
    else {
      unint64_t v16 = (long long *)xmmword_25561D0;
    }
    if (byte_25561E7 >= 0) {
      uint64_t v17 = byte_25561E7;
    }
    else {
      uint64_t v17 = *((void *)&xmmword_25561D0 + 1);
    }
    int v18 = sub_188FC78(&v69, (uint64_t)v16, v17);
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a2;
    }
    else {
      uint64_t v20 = *(void *)a2;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    uint64_t v22 = sub_188FC78(v18, v20, v21);
    sub_188FC78(v22, (uint64_t)": ", 2);
    uint64_t v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" errors and ", 12);
    int v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = sub_188FC78(v24, (uint64_t)" warnings occurred (model id ", 29);
    std::ostream::operator<<();
    sub_188FC78(v25, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  double result = std::ios::~ios();
LABEL_36:
  unint64_t v26 = v3[7];
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3);
  BOOL v28 = v26 >= v27;
  if (v26 > v27) {
    unint64_t v27 = v3[7];
  }
  if (!v28)
  {
    uint64_t v31 = 24 * v26;
    unint64_t v32 = v27 - v26;
    do
    {
      double result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)&v69);
        if (byte_25561E7 >= 0) {
          uint64_t v33 = &xmmword_25561D0;
        }
        else {
          uint64_t v33 = (long long *)xmmword_25561D0;
        }
        if (byte_25561E7 >= 0) {
          uint64_t v34 = byte_25561E7;
        }
        else {
          uint64_t v34 = *((void *)&xmmword_25561D0 + 1);
        }
        int v35 = sub_188FC78(&v69, (uint64_t)v33, v34);
        unint64_t v36 = sub_188FC78(v35, (uint64_t)"Error: ", 7);
        uint64_t v37 = v3[3] + v31;
        int v38 = *(char *)(v37 + 23);
        if (v38 >= 0) {
          uint64_t v39 = v3[3] + v31;
        }
        else {
          uint64_t v39 = *(void *)v37;
        }
        if (v38 >= 0) {
          uint64_t v40 = *(unsigned __int8 *)(v37 + 23);
        }
        else {
          uint64_t v40 = *(void *)(v37 + 8);
        }
        sub_188FC78(v36, v39, v40);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v68 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v69 = v29;
        *(uint64_t *)((char *)&v69 + *(void *)(v29 - 24)) = v30;
        if (v72 < 0) {
          operator delete(v71);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        double result = std::ios::~ios();
      }
      v31 += 24;
      --v32;
    }
    while (v32);
  }
  unint64_t v41 = v3[6];
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  if (v41 <= v42) {
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  else {
    unint64_t v43 = v3[6];
  }
  if (v41 < v42)
  {
    if (v5 == v4)
    {
      unint64_t v45 = v43 - v41;
      uint64_t v46 = 24 * v41;
      do
      {
        double result = sub_723EC(2u);
        if (result)
        {
          sub_6BAC((uint64_t)&v69);
          if (byte_25561E7 >= 0) {
            uint64_t v47 = &xmmword_25561D0;
          }
          else {
            uint64_t v47 = (long long *)xmmword_25561D0;
          }
          if (byte_25561E7 >= 0) {
            uint64_t v48 = byte_25561E7;
          }
          else {
            uint64_t v48 = *((void *)&xmmword_25561D0 + 1);
          }
          uint64_t v49 = sub_188FC78(&v69, (uint64_t)v47, v48);
          uint64_t v50 = sub_188FC78(v49, (uint64_t)"Warning: ", 9);
          uint64_t v51 = *v3 + v46;
          int v52 = *(char *)(v51 + 23);
          if (v52 >= 0) {
            uint64_t v53 = *v3 + v46;
          }
          else {
            uint64_t v53 = *(void *)v51;
          }
          if (v52 >= 0) {
            uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
          }
          else {
            uint64_t v54 = *(void *)(v51 + 8);
          }
          sub_188FC78(v50, v53, v54);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 2u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v69 = v66;
          *(uint64_t *)((char *)&v69 + *(void *)(v66 - 24)) = v44;
          if (v72 < 0) {
            operator delete(v71);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          double result = std::ios::~ios();
        }
        v46 += 24;
        --v45;
      }
      while (v45);
    }
    else
    {
      uint64_t v55 = 24 * v41;
      unint64_t v56 = v43 - v41;
      do
      {
        double result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)&v69);
          if (byte_25561E7 >= 0) {
            uint64_t v57 = &xmmword_25561D0;
          }
          else {
            uint64_t v57 = (long long *)xmmword_25561D0;
          }
          if (byte_25561E7 >= 0) {
            uint64_t v58 = byte_25561E7;
          }
          else {
            uint64_t v58 = *((void *)&xmmword_25561D0 + 1);
          }
          BOOL v59 = sub_188FC78(&v69, (uint64_t)v57, v58);
          uint64_t v60 = sub_188FC78(v59, (uint64_t)"Warning: ", 9);
          uint64_t v61 = *v3 + v55;
          int v62 = *(char *)(v61 + 23);
          if (v62 >= 0) {
            uint64_t v63 = *v3 + v55;
          }
          else {
            uint64_t v63 = *(void *)v61;
          }
          if (v62 >= 0) {
            uint64_t v64 = *(unsigned __int8 *)(v61 + 23);
          }
          else {
            uint64_t v64 = *(void *)(v61 + 8);
          }
          sub_188FC78(v60, v63, v64);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v69 = v66;
          *(uint64_t *)((char *)&v69 + *(void *)(v66 - 24)) = v44;
          if (v72 < 0) {
            operator delete(v71);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          double result = std::ios::~ios();
        }
        v55 += 24;
        --v56;
      }
      while (v56);
    }
  }
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3);
  v3[6] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  v3[7] = v65;
  return result;
}

void sub_9F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_9F2C4(uint64_t a1, uint64_t a2)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = 0;
    *(unsigned char *)(a1 + 25) = 1;
    uint64_t v3 = a1 + 80;
    if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)v3);
    if ((SHIBYTE(v6) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
  uint64_t v7 = 0;
  *(unsigned char *)(a1 + 25) = 1;
  uint64_t v3 = a1 + 80;
  if (*(char *)(a1 + 103) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
LABEL_4:
    *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
    *(void *)(v3 + 16) = v6;
    goto LABEL_8;
  }
LABEL_7:
  sub_4200((unsigned char *)v3, __p[0], (unint64_t)__p[1]);
LABEL_8:
  *(void *)(a1 + 104) = v7;
  uint64_t v4 = malloc_type_malloc(32 * *(void *)(a1 + 72), 0x101204092066FB6uLL);
  *(void *)(a1 + 112) = v4;
  sub_AD794(a1, (uint64_t)v4, (uint64_t)v4 + 32 * *(void *)(a1 + 72));
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_9F3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F3F0(uint64_t a1, uint64_t a2)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    long long __p = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(unsigned char *)(a1 + 25) = 1;
    uint64_t v3 = *(void **)(a1 + 104);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_4200(v5, *(void **)a2, *(void *)(a2 + 8));
  long long __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(unsigned char *)(a1 + 25) = 1;
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
LABEL_3:
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
LABEL_4:
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_AD8F0((void *)(a1 + 80), (long long *)v5);
  uint64_t v4 = malloc_type_malloc(48 * *(void *)(a1 + 72), 0x109204087733E69uLL);
  *(void *)(a1 + 128) = v4;
  sub_AD868((void *)a1, (uint64_t)v4, (uint64_t)v4 + 48 * *(void *)(a1 + 72));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_9F508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9F51C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(a1 + 112) + v4;
        if (*(char *)(v5 + 23) < 0) {
          operator delete(*(void **)v5);
        }
        v4 += 32;
        --v3;
      }
      while (v3);
      uint64_t v2 = *(void **)(a1 + 112);
    }
    free(v2);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_9F5CC(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(double *)(a1 + 8) = (double)a3 / 1000.0;
  *(double *)(a1 + 16) = (double)a4 / 1000.0;
  *(_WORD *)(a1 + 105) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 32;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 200) = xmmword_20B98A0;
  *(_WORD *)(a1 + 225) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(void *)(a1 + 216) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 32;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(unsigned char *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(unsigned char *)(a1 + 400) = 0;
  operator new();
}

void sub_9F928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 368) = v20;
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_AD69C(v19, 0);
  sub_82DE8(v18);
  sub_A925C(v17);
  sub_9F51C(v16);
  if (*(char *)(v15 + 79) < 0) {
    operator delete(*(void **)(v15 + 56));
  }
  _Unwind_Resume(a1);
}

void sub_9F9BC()
{
}

void sub_9F9DC()
{
}

uint64_t sub_9F9E4(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9FB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9FBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9FBB8(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_9FD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9FDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9FDC0(uint64_t a1)
{
  sub_AD69C((uint64_t *)(a1 + 408), 0);
  uint64_t v2 = *(void *)(a1 + 360);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 368);
    uint64_t v4 = *(void **)(a1 + 360);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 360);
    }
    *(void *)(a1 + 368) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 336);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 344);
    uint64_t v7 = *(void **)(a1 + 336);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 336);
    }
    *(void *)(a1 + 344) = v5;
    operator delete(v7);
  }
  sub_A925C(a1 + 200);
  size_t v8 = *(void **)(a1 + 192);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 152);
    if (v9)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(a1 + 192) + v10;
        if (*(char *)(v11 + 23) < 0) {
          operator delete(*(void **)v11);
        }
        v10 += 32;
        --v9;
      }
      while (v9);
      size_t v8 = *(void **)(a1 + 192);
    }
    free(v8);
  }
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 135) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_31;
  }
  operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 135) < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
    return a1;
  }
LABEL_31:
  operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_9FF2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 408);
  if (*(void *)v6
    && *(void *)(*(void *)v6 + 8)
    && sub_AD9E4(*(void *)(a1 + 408), a2, 1)
    && (sub_ADC14(v6, (uint64_t)a2, 1) & 1) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)v6 + 8);
    if ((uint64_t *)(v9 + 8) == sub_ADE40(v9, (uint64_t)a2)) {
      operator new();
    }
  }
  else
  {
    sub_A012C("Error adding the variable with name '", (uint64_t)a2, "' and value ", a3, ".");
    unint64_t v7 = *(void *)(a1 + 368);
    if (v7 >= *(void *)(a1 + 376))
    {
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)__p);
      if (SHIBYTE(v11) < 0) {
LABEL_12:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v11) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v11;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 368) = v7 + 24;
      *(void *)(a1 + 368) = v7 + 24;
      if (SHIBYTE(v11) < 0) {
        goto LABEL_12;
      }
    }
  }
}

void sub_A0104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 368) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A012C(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v17);
  size_t v9 = strlen(a1);
  sub_188FC78(v18, (uint64_t)a1, v9);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  sub_188FC78(v18, v11, v12);
  size_t v13 = strlen(a3);
  sub_188FC78(v18, (uint64_t)a3, v13);
  std::ostream::operator<<();
  size_t v14 = strlen(a5);
  sub_188FC78(v18, (uint64_t)a5, v14);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A0320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A0334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A0348(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A0508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A051C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A0530(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    uint64_t v61 = a1 + 80;
    int v62 = (char **)(a1 + 360);
    uint64_t v60 = a1 + 200;
    while (1)
    {
      uint64_t v65 = v2 + 16;
      int v6 = *(_DWORD *)(v2 + 48);
      uint64_t v63 = (uint64_t *)v2;
      if (v6 == 3) {
        break;
      }
      if (v6 == 1)
      {
        double v5 = sub_5C7E8(v3, v65);
        *(double *)(sub_AE814(v61, v65) + 24) = v5;
        goto LABEL_4;
      }
      sub_5A354(v2 + 40);
      sub_A0D30("Unexpected parameter type while parsing EV model JSON: ", v65, ": ", (uint64_t)__p);
      unint64_t v7 = *(void *)(v4 + 368);
      if (v7 >= *(void *)(v4 + 376))
      {
        *(void *)(v4 + 368) = sub_6E6EC(v62, (uint64_t)v69);
        if ((SHIBYTE(v70) & 0x80000000) == 0) {
          goto LABEL_75;
        }
      }
      else
      {
        if (SHIBYTE(v70) < 0)
        {
          sub_4200(*(unsigned char **)(v4 + 368), v69[0], (unint64_t)v69[1]);
        }
        else
        {
          long long v8 = *(_OWORD *)v69;
          *(void *)(v7 + 16) = v70;
          *(_OWORD *)unint64_t v7 = v8;
        }
        *(void *)(v4 + 368) = v7 + 24;
        *(void *)(v4 + 368) = v7 + 24;
        if ((SHIBYTE(v70) & 0x80000000) == 0)
        {
LABEL_75:
          if (SHIBYTE(v68) < 0) {
            goto LABEL_80;
          }
          goto LABEL_4;
        }
      }
      operator delete(v69[0]);
      if (SHIBYTE(v68) < 0) {
LABEL_80:
      }
        operator delete(__p[0]);
LABEL_4:
      uint64_t v2 = *v63;
      if (!*v63) {
        return;
      }
    }
    uint64_t v9 = (void *)sub_5C4AC(v3, v65);
    v69[0] = 0;
    v69[1] = 0;
    uint64_t v70 = 0;
    uint64_t v11 = (_DWORD *)*v9;
    size_t v10 = (_DWORD *)v9[1];
    for (i = v10; ; size_t v10 = i)
    {
      if (v11 == v10)
      {
        uint64_t v57 = (void **)(sub_AFBF0(v60, v65) + 24);
        if (v57 != v69) {
          sub_326C0(v57, (char *)v69[0], (char *)v69[1], ((char *)v69[1] - (char *)v69[0]) >> 3);
        }
        uint64_t v4 = a1;
        uint64_t v3 = a2;
        if (v69[0])
        {
          v69[1] = v69[0];
          operator delete(v69[0]);
        }
        goto LABEL_4;
      }
      int v13 = v11[2];
      if (v13 == 3) {
        break;
      }
      if (v13 == 1)
      {
        size_t v14 = *(void **)v11;
        char v15 = (char *)v69[1];
        if (v69[1] >= v70)
        {
          uint64_t v16 = (char *)v69[0];
          int64_t v17 = (char *)v69[1] - (char *)v69[0];
          int64_t v18 = ((char *)v69[1] - (char *)v69[0]) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v20 = v70 - (char *)v69[0];
          if ((v70 - (char *)v69[0]) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            if (v21 >> 61) {
              sub_188D718();
            }
            uint64_t v22 = operator new(8 * v21);
            uint64_t v23 = &v22[8 * v18];
            *uint64_t v23 = v14;
            uint64_t v12 = v23 + 1;
            if (v15 == v16)
            {
LABEL_65:
              v69[0] = v23;
              v69[1] = v12;
              uint64_t v70 = &v22[8 * v21];
              if (v16) {
                operator delete(v16);
              }
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v22 = 0;
            uint64_t v23 = (void *)(8 * v18);
            *(void *)(8 * v18) = v14;
            uint64_t v12 = (void *)(8 * v18 + 8);
            if (v15 == v16) {
              goto LABEL_65;
            }
          }
          unint64_t v48 = v15 - 8 - v16;
          if (v48 < 0x58) {
            goto LABEL_89;
          }
          if ((unint64_t)(v15 - &v22[v17]) < 0x20) {
            goto LABEL_89;
          }
          uint64_t v49 = (v48 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v51 = &v15[-v50];
          uint64_t v23 = (void *)((char *)v23 - v50);
          int v52 = &v22[8 * v18 - 16];
          uint64_t v53 = v15 - 16;
          uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *int v52 = v55;
            v52 -= 2;
            v53 -= 32;
            v54 -= 4;
          }
          while (v54);
          char v15 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_89:
            do
            {
              uint64_t v56 = *((void *)v15 - 1);
              v15 -= 8;
              *--uint64_t v23 = v56;
            }
            while (v15 != v16);
          }
          goto LABEL_65;
        }
        *(void *)v69[1] = v14;
        uint64_t v12 = v15 + 8;
LABEL_12:
        v69[1] = v12;
        goto LABEL_13;
      }
      sub_A0B48("Unexpected parameter type in array ", v65, " while parsing EV model JSON.");
      unint64_t v46 = *(void *)(a1 + 368);
      if (v46 >= *(void *)(a1 + 376))
      {
        *(void *)(a1 + 368) = sub_6E6EC(v62, (uint64_t)__p);
        if ((SHIBYTE(v68) & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_69:
        operator delete(__p[0]);
        goto LABEL_13;
      }
      if (SHIBYTE(v68) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v47 = *(_OWORD *)__p;
        *(void *)(v46 + 16) = v68;
        *(_OWORD *)unint64_t v46 = v47;
      }
      *(void *)(a1 + 368) = v46 + 24;
      *(void *)(a1 + 368) = v46 + 24;
      if (SHIBYTE(v68) < 0) {
        goto LABEL_69;
      }
LABEL_13:
      v11 += 4;
    }
    uint64_t v25 = **(uint64_t ***)v11;
    int v24 = *(uint64_t **)(*(void *)v11 + 8);
    while (1)
    {
      if (v25 == v24) {
        goto LABEL_13;
      }
      if (*((_DWORD *)v25 + 2) != 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v27 = *v25;
      BOOL v28 = (char *)v69[1];
      if (v69[1] < v70)
      {
        *(void *)v69[1] = v27;
        unint64_t v26 = v28 + 8;
        goto LABEL_30;
      }
      uint64_t v29 = (char *)v69[0];
      int64_t v30 = (char *)v69[1] - (char *)v69[0];
      int64_t v31 = ((char *)v69[1] - (char *)v69[0]) >> 3;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v33 = v70 - (char *)v69[0];
      if ((v70 - (char *)v69[0]) >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v32;
      if (v34) {
        break;
      }
      int v35 = 0;
      unint64_t v36 = (void *)(8 * v31);
      *(void *)(8 * v31) = v27;
      unint64_t v26 = (void *)(8 * v31 + 8);
      if (v28 != v29) {
        goto LABEL_45;
      }
LABEL_51:
      v69[0] = v36;
      v69[1] = v26;
      uint64_t v70 = &v35[8 * v34];
      if (v29) {
        operator delete(v29);
      }
LABEL_30:
      v69[1] = v26;
      v25 += 2;
    }
    if (v34 >> 61) {
      sub_188D718();
    }
    int v35 = operator new(8 * v34);
    unint64_t v36 = &v35[8 * v31];
    *unint64_t v36 = v27;
    unint64_t v26 = v36 + 1;
    if (v28 == v29) {
      goto LABEL_51;
    }
LABEL_45:
    unint64_t v37 = v28 - 8 - v29;
    if (v37 < 0x58) {
      goto LABEL_90;
    }
    if ((unint64_t)(v28 - &v35[v30]) < 0x20) {
      goto LABEL_90;
    }
    uint64_t v38 = (v37 >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v28[-v39];
    unint64_t v36 = (void *)((char *)v36 - v39);
    unint64_t v41 = &v35[8 * v31 - 16];
    unint64_t v42 = v28 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      *unint64_t v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    BOOL v28 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_90:
      do
      {
        uint64_t v45 = *((void *)v28 - 1);
        v28 -= 8;
        *--unint64_t v36 = v45;
      }
      while (v28 != v29);
    }
    goto LABEL_51;
  }
}

void sub_A0ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 368) = v29;
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A0B48(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A0D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A0D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A0D30(const char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  sub_E1B4((uint64_t)v18);
  size_t v8 = strlen(a1);
  sub_188FC78(v19, (uint64_t)a1, v8);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  sub_188FC78(v19, v10, v11);
  size_t v12 = strlen(a3);
  sub_188FC78(v19, (uint64_t)a3, v12);
  int v13 = *(char *)(a4 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = *(void *)a4;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a4 + 8);
  }
  sub_188FC78(v19, v14, v15);
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A0F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A0F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_A0F44(std::string *result, unsigned int a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    double v5 = (std::string *)&result[a2 + 2].__r_.__value_.__r.__words[1];
    do
    {
      if (*((_DWORD *)v3 + 2))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v7 = *v3;
      v3 += 2;
      size_t v6 = (const std::string::value_type *)v7;
      std::string::size_type v8 = *(unsigned __int8 *)(v7 + 23);
      int v9 = *(const std::string::value_type **)v7;
      std::string::size_type v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = v9;
      }
      if ((v8 & 0x80u) == 0) {
        std::string::size_type v12 = v8;
      }
      else {
        std::string::size_type v12 = v10;
      }
      double result = std::string::append(v5, v11, v12);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t **sub_A0FF4(uint64_t a1)
{
  sub_A1BB0(*(void *)(a1 + 408) + 192);
  uint64_t v2 = *(void *)(a1 + 408);
  uint64_t v3 = (uint64_t **)(v2 + 232);
  uint64_t v4 = sub_ADE40(v2 + 232, (uint64_t)&word_2556218);
  if ((uint64_t *)(v2 + 240) != v4)
  {
    double v5 = v4;
    size_t v6 = (uint64_t *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        size_t v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      std::string::size_type v8 = v4;
      do
      {
        uint64_t v7 = (uint64_t *)v8[2];
        BOOL v9 = *v7 == (void)v8;
        std::string::size_type v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4) {
      uint64_t *v3 = v7;
    }
    std::string::size_type v10 = *(uint64_t **)(v2 + 240);
    --*(void *)(v2 + 248);
    sub_B13A0(v10, v5);
    if (*((char *)v5 + 55) < 0) {
      operator delete((void *)v5[4]);
    }
    operator delete(v5);
  }
  uint64_t v11 = *(void *)(a1 + 408);
  uint64_t v14 = *(uint64_t **)(v11 + 208);
  int v13 = (void **)(v11 + 208);
  std::string::size_type v12 = v14;
  uint64_t v15 = &word_2556818;
  do
  {
    uint64_t v16 = sub_B0E28(v13, v12, (uint64_t)v15, (uint64_t)v15);
    int64_t v17 = (uint64_t *)v16[1];
    if (v17)
    {
      do
      {
        std::string::size_type v12 = v17;
        int64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        std::string::size_type v12 = (uint64_t *)v16[2];
        BOOL v9 = *v12 == (void)v16;
        uint64_t v16 = v12;
      }
      while (!v9);
    }
    v15 += 12;
  }
  while (v15 != &word_2556D88);
  uint64_t v18 = *(void *)(a1 + 408);
  unint64_t v19 = (uint64_t **)(v18 + 208);
  char v20 = sub_ADE40(v18 + 208, (uint64_t)&word_2556818);
  if ((uint64_t *)(v18 + 216) != v20)
  {
    unint64_t v21 = v20;
    uint64_t v22 = (uint64_t *)v20[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = v22;
        uint64_t v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      int v24 = v20;
      do
      {
        uint64_t v23 = (uint64_t *)v24[2];
        BOOL v9 = *v23 == (void)v24;
        int v24 = v23;
      }
      while (!v9);
    }
    if (*v19 == v20) {
      uint64_t *v19 = v23;
    }
    uint64_t v25 = *(uint64_t **)(v18 + 216);
    --*(void *)(v18 + 224);
    sub_B13A0(v25, v21);
    if (*((char *)v21 + 55) < 0) {
      operator delete((void *)v21[4]);
    }
    operator delete(v21);
  }
  uint64_t v26 = *(void *)(a1 + 408);
  uint64_t v27 = (uint64_t **)(v26 + 208);
  uint64_t v28 = sub_ADE40(v26 + 208, (uint64_t)&word_2556B00);
  if ((uint64_t *)(v26 + 216) != v28)
  {
    uint64_t v29 = v28;
    int64_t v30 = (uint64_t *)v28[1];
    if (v30)
    {
      do
      {
        int64_t v31 = v30;
        int64_t v30 = (uint64_t *)*v30;
      }
      while (v30);
    }
    else
    {
      unint64_t v32 = v28;
      do
      {
        int64_t v31 = (uint64_t *)v32[2];
        BOOL v9 = *v31 == (void)v32;
        unint64_t v32 = v31;
      }
      while (!v9);
    }
    if (*v27 == v28) {
      unsigned __int8 *v27 = v31;
    }
    uint64_t v33 = *(uint64_t **)(v26 + 216);
    --*(void *)(v26 + 224);
    sub_B13A0(v33, v29);
    if (*((char *)v29 + 55) < 0) {
      operator delete((void *)v29[4]);
    }
    operator delete(v29);
  }
  uint64_t v34 = *(void *)(a1 + 408);
  int v35 = (uint64_t **)(v34 + 208);
  unint64_t v36 = sub_ADE40(v34 + 208, (uint64_t)&word_2556B18);
  if ((uint64_t *)(v34 + 216) != v36)
  {
    unint64_t v37 = v36;
    uint64_t v38 = (uint64_t *)v36[1];
    if (v38)
    {
      do
      {
        uint64_t v39 = v38;
        uint64_t v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      uint64_t v40 = v36;
      do
      {
        uint64_t v39 = (uint64_t *)v40[2];
        BOOL v9 = *v39 == (void)v40;
        uint64_t v40 = v39;
      }
      while (!v9);
    }
    if (*v35 == v36) {
      *int v35 = v39;
    }
    unint64_t v41 = *(uint64_t **)(v34 + 216);
    --*(void *)(v34 + 224);
    sub_B13A0(v41, v37);
    if (*((char *)v37 + 55) < 0) {
      operator delete((void *)v37[4]);
    }
    operator delete(v37);
  }
  uint64_t v42 = *(void *)(a1 + 408);
  uint64_t v43 = (uint64_t **)(v42 + 208);
  long long v44 = sub_ADE40(v42 + 208, (uint64_t)&word_2556C20);
  if ((uint64_t *)(v42 + 216) != v44)
  {
    uint64_t v45 = v44;
    unint64_t v46 = (uint64_t *)v44[1];
    if (v46)
    {
      do
      {
        long long v47 = v46;
        unint64_t v46 = (uint64_t *)*v46;
      }
      while (v46);
    }
    else
    {
      unint64_t v48 = v44;
      do
      {
        long long v47 = (uint64_t *)v48[2];
        BOOL v9 = *v47 == (void)v48;
        unint64_t v48 = v47;
      }
      while (!v9);
    }
    if (*v43 == v44) {
      *uint64_t v43 = v47;
    }
    uint64_t v49 = *(uint64_t **)(v42 + 216);
    --*(void *)(v42 + 224);
    sub_B13A0(v49, v45);
    if (*((char *)v45 + 55) < 0) {
      operator delete((void *)v45[4]);
    }
    operator delete(v45);
  }
  uint64_t v50 = *(void *)(a1 + 408);
  uint64_t v51 = (uint64_t **)(v50 + 208);
  int v52 = sub_ADE40(v50 + 208, (uint64_t)&word_2556920);
  if ((uint64_t *)(v50 + 216) != v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = (uint64_t *)v52[1];
    if (v54)
    {
      do
      {
        long long v55 = v54;
        uint64_t v54 = (uint64_t *)*v54;
      }
      while (v54);
    }
    else
    {
      uint64_t v56 = v52;
      do
      {
        long long v55 = (uint64_t *)v56[2];
        BOOL v9 = *v55 == (void)v56;
        uint64_t v56 = v55;
      }
      while (!v9);
    }
    if (*v51 == v52) {
      *uint64_t v51 = v55;
    }
    uint64_t v57 = *(uint64_t **)(v50 + 216);
    --*(void *)(v50 + 224);
    sub_B13A0(v57, v53);
    if (*((char *)v53 + 55) < 0) {
      operator delete((void *)v53[4]);
    }
    operator delete(v53);
  }
  sub_A1D30(*(void *)(a1 + 408) + 192);
  sub_B1764(*(void *)(a1 + 408) + 280, (uint64_t)&word_25562D8, (uint64_t)&word_25562D8);
  sub_B1764(*(void *)(a1 + 408) + 280, (uint64_t)&word_25562F0, (uint64_t)&word_25562F0);
  sub_B1764(*(void *)(a1 + 408) + 304, (uint64_t)&word_2556380, (uint64_t)&word_2556380);
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "battery_min_energy_wh");
  uint64_t v58 = *(void *)(a1 + 8);
  *(void *)(sub_AE814(a1 + 80, (uint64_t)__p) + 24) = v58;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "battery_max_energy_wh");
  uint64_t v59 = *(void *)(a1 + 16);
  *(void *)(sub_AE814(a1 + 80, (uint64_t)__p) + 24) = v59;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "trip_elapsed_time_s");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 24);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "road_ambient_temperature_c");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 32);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "battery_current_energy_wh");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 40);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "battery_current_soc_percentage");
  sub_9FF2C(a1, (uint64_t *)__p, a1 + 48);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v60 = *(char **)(a1 + 192);
  uint64_t v61 = &v60[32 * *(void *)(a1 + 152)];
  __p[0] = (void *)(a1 + 80);
  __p[1] = v60;
  __p[2] = v61;
  sub_AFAA8(__p);
  uint64_t v62 = *(void *)(a1 + 192) + 32 * *(void *)(a1 + 152);
  uint64_t v82 = a1 + 80;
  size_t v83 = (void *)v62;
  uint64_t v84 = v62;
  sub_AFAA8(&v82);
  for (uint64_t i = (uint64_t *)__p[1]; __p[1] != v83; uint64_t i = (uint64_t *)__p[1])
  {
    if ((sub_A1F70(*(void *)(a1 + 408), i, i + 3) & 1) == 0)
    {
      sub_A20FC("Error adding constant with name '", (uint64_t)i, "' and value ", (uint64_t)(i + 3), ".");
      unint64_t v64 = *(void *)(a1 + 368);
      if (v64 < *(void *)(a1 + 376))
      {
        if (SHIBYTE(v81) < 0)
        {
          sub_4200(*(unsigned char **)(a1 + 368), v80[0], (unint64_t)v80[1]);
        }
        else
        {
          long long v65 = *(_OWORD *)v80;
          *(void *)(v64 + 16) = v81;
          *(_OWORD *)unint64_t v64 = v65;
        }
        *(void *)(a1 + 368) = v64 + 24;
        *(void *)(a1 + 368) = v64 + 24;
        if ((SHIBYTE(v81) & 0x80000000) == 0) {
          goto LABEL_95;
        }
LABEL_104:
        operator delete(v80[0]);
        goto LABEL_95;
      }
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)v80);
      if (SHIBYTE(v81) < 0) {
        goto LABEL_104;
      }
    }
LABEL_95:
    __p[1] = (char *)__p[1] + 32;
    sub_AFAA8(__p);
  }
  uint64_t v66 = *(char **)(a1 + 328);
  uint64_t v67 = &v66[48 * *(void *)(a1 + 272)];
  __p[0] = (void *)(a1 + 200);
  __p[1] = v66;
  __p[2] = v67;
  sub_B0CE0(__p);
  uint64_t v68 = *(void *)(a1 + 328) + 48 * *(void *)(a1 + 272);
  uint64_t v82 = a1 + 200;
  size_t v83 = (void *)v68;
  uint64_t v84 = v68;
  sub_B0CE0(&v82);
  uint64_t v69 = (uint64_t *)__p[1];
  if (__p[1] != v83)
  {
    while (1)
    {
      uint64_t v70 = *(void *)(a1 + 408);
      if (*(void *)v70
        && *(void *)(*(void *)v70 + 8)
        && sub_AD9E4(*(void *)(a1 + 408), v69, 1)
        && (sub_ADC14(v70, (uint64_t)v69, 1) & 1) == 0
        && v69[4] != v69[3]
        && (sub_AE404(*(void *)(*(void *)v70 + 8) + 192, (uint64_t)v69) & 1) != 0)
      {
        goto LABEL_107;
      }
      sub_A2318("Error adding vector with name '", (uint64_t)v69, "'.");
      unint64_t v71 = *(void *)(a1 + 368);
      if (v71 < *(void *)(a1 + 376)) {
        break;
      }
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)v80);
      if (SHIBYTE(v81) < 0) {
        goto LABEL_121;
      }
LABEL_107:
      __p[1] = (char *)__p[1] + 48;
      sub_B0CE0(__p);
      uint64_t v69 = (uint64_t *)__p[1];
      if (__p[1] == v83) {
        goto LABEL_122;
      }
    }
    if (SHIBYTE(v81) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 368), v80[0], (unint64_t)v80[1]);
    }
    else
    {
      long long v72 = *(_OWORD *)v80;
      *(void *)(v71 + 16) = v81;
      *(_OWORD *)unint64_t v71 = v72;
    }
    *(void *)(a1 + 368) = v71 + 24;
    *(void *)(a1 + 368) = v71 + 24;
    if ((SHIBYTE(v81) & 0x80000000) == 0) {
      goto LABEL_107;
    }
LABEL_121:
    operator delete(v80[0]);
    goto LABEL_107;
  }
LABEL_122:
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "curve_fit");
  sub_A2500(a1, (uint64_t *)__p, *(void *)(a1 + 408) + 1568);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "curve_lookup");
  sub_A2600(a1, (uint64_t *)__p, *(void *)(a1 + 408) + 1640);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_2d");
  sub_A2600(a1, (uint64_t *)__p, *(void *)(a1 + 408) + 1640);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_3d");
  sub_A2600(a1, (uint64_t *)__p, *(void *)(a1 + 408) + 1640);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_Nd");
  sub_A2600(a1, (uint64_t *)__p, *(void *)(a1 + 408) + 1640);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "percentage_to_energy_wh");
  sub_A2700(a1, __p, *(void *)(a1 + 408) + 1720);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_A28A0(*(void *)(a1 + 408));
  uint64_t v73 = *(void *)(a1 + 408);
  *(_WORD *)(v73 + 480) = 257;
  sub_2F020(v73 + 304, *(char **)(v73 + 312));
  *(void *)(v73 + 312) = 0;
  *(void *)(v73 + 320) = 0;
  *(void *)(v73 + 304) = v73 + 312;
  size_t v74 = *(void **)(a1 + 408);
  __darwin_ct_rune_t v75 = (char *)v74[27];
  v74 += 27;
  sub_2F020((uint64_t)(v74 - 1), v75);
  *(v74 - 1) = v74;
  *size_t v74 = 0;
  v74[1] = 0;
  uint64_t v76 = *(void *)(a1 + 408);
  unint64_t v77 = *(void **)(v76 + 1552);
  if ((unint64_t)v77 >= *(void *)(v76 + 1560))
  {
    double result = sub_B1858((uint64_t ***)(v76 + 1544), (void **)v76);
  }
  else
  {
    uint64_t v78 = *(void **)v76;
    *unint64_t v77 = *(void *)v76;
    double result = (uint64_t **)(v77 + 1);
    ++*v78;
  }
  *(void *)(v76 + 1552) = result;
  return result;
}

void sub_A1B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A1BB0(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  uint64_t v3 = sub_B0E28((void **)(a1 + 40), *(uint64_t **)(a1 + 40), (uint64_t)&word_25561E8, (uint64_t)&word_25561E8);
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      double v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      double v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  uint64_t v7 = sub_B0E28(v2, v5, (uint64_t)&dword_2556200, (uint64_t)&dword_2556200);
  std::string::size_type v8 = (uint64_t *)v7[1];
  if (v8)
  {
    do
    {
      BOOL v9 = v8;
      std::string::size_type v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    do
    {
      BOOL v9 = (uint64_t *)v7[2];
      BOOL v6 = *v9 == (void)v7;
      uint64_t v7 = v9;
    }
    while (!v6);
  }
  std::string::size_type v10 = sub_B0E28(v2, v9, (uint64_t)&word_2556218, (uint64_t)&word_2556218);
  uint64_t v11 = (uint64_t *)v10[1];
  if (v11)
  {
    do
    {
      std::string::size_type v12 = v11;
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      std::string::size_type v12 = (uint64_t *)v10[2];
      BOOL v6 = *v12 == (void)v10;
      std::string::size_type v10 = v12;
    }
    while (!v6);
  }
  int v13 = sub_B0E28(v2, v12, (uint64_t)&dword_2556230, (uint64_t)&dword_2556230);
  uint64_t v14 = (uint64_t *)v13[1];
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  else
  {
    do
    {
      uint64_t v15 = (uint64_t *)v13[2];
      BOOL v6 = *v15 == (void)v13;
      int v13 = v15;
    }
    while (!v6);
  }
  uint64_t v16 = sub_B0E28(v2, v15, (uint64_t)&dword_2556248, (uint64_t)&dword_2556248);
  int64_t v17 = (uint64_t *)v16[1];
  if (v17)
  {
    do
    {
      uint64_t v18 = v17;
      int64_t v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  else
  {
    do
    {
      uint64_t v18 = (uint64_t *)v16[2];
      BOOL v6 = *v18 == (void)v16;
      uint64_t v16 = v18;
    }
    while (!v6);
  }
  sub_B0E28(v2, v18, (uint64_t)&dword_2556260, (uint64_t)&dword_2556260);
  return a1;
}

uint64_t sub_A1D30(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  uint64_t v3 = sub_B0E28((void **)(a1 + 64), *(uint64_t **)(a1 + 64), (uint64_t)&word_2556458, (uint64_t)&word_2556458);
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      double v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      double v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  uint64_t v7 = sub_B0E28(v2, v5, (uint64_t)&dword_2556470, (uint64_t)&dword_2556470);
  std::string::size_type v8 = (uint64_t *)v7[1];
  if (v8)
  {
    do
    {
      BOOL v9 = v8;
      std::string::size_type v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    do
    {
      BOOL v9 = (uint64_t *)v7[2];
      BOOL v6 = *v9 == (void)v7;
      uint64_t v7 = v9;
    }
    while (!v6);
  }
  std::string::size_type v10 = sub_B0E28(v2, v9, (uint64_t)&word_2556488, (uint64_t)&word_2556488);
  uint64_t v11 = (uint64_t *)v10[1];
  if (v11)
  {
    do
    {
      std::string::size_type v12 = v11;
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      std::string::size_type v12 = (uint64_t *)v10[2];
      BOOL v6 = *v12 == (void)v10;
      std::string::size_type v10 = v12;
    }
    while (!v6);
  }
  int v13 = sub_B0E28(v2, v12, (uint64_t)&word_25564A0, (uint64_t)&word_25564A0);
  uint64_t v14 = (uint64_t *)v13[1];
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  else
  {
    do
    {
      uint64_t v15 = (uint64_t *)v13[2];
      BOOL v6 = *v15 == (void)v13;
      int v13 = v15;
    }
    while (!v6);
  }
  uint64_t v16 = sub_B0E28(v2, v15, (uint64_t)&word_25564B8, (uint64_t)&word_25564B8);
  int64_t v17 = (uint64_t *)v16[1];
  if (v17)
  {
    do
    {
      uint64_t v18 = v17;
      int64_t v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  else
  {
    do
    {
      uint64_t v18 = (uint64_t *)v16[2];
      BOOL v6 = *v18 == (void)v16;
      uint64_t v16 = v18;
    }
    while (!v6);
  }
  unint64_t v19 = sub_B0E28(v2, v18, (uint64_t)&dword_25564D0, (uint64_t)&dword_25564D0);
  char v20 = (uint64_t *)v19[1];
  if (v20)
  {
    do
    {
      unint64_t v21 = v20;
      char v20 = (uint64_t *)*v20;
    }
    while (v20);
  }
  else
  {
    do
    {
      unint64_t v21 = (uint64_t *)v19[2];
      BOOL v6 = *v21 == (void)v19;
      unint64_t v19 = v21;
    }
    while (!v6);
  }
  uint64_t v22 = sub_B0E28(v2, v21, (uint64_t)&word_25564E8, (uint64_t)&word_25564E8);
  uint64_t v23 = (uint64_t *)v22[1];
  if (v23)
  {
    do
    {
      int v24 = v23;
      uint64_t v23 = (uint64_t *)*v23;
    }
    while (v23);
  }
  else
  {
    do
    {
      int v24 = (uint64_t *)v22[2];
      BOOL v6 = *v24 == (void)v22;
      uint64_t v22 = v24;
    }
    while (!v6);
  }
  uint64_t v25 = sub_B0E28(v2, v24, (uint64_t)&word_2556500, (uint64_t)&word_2556500);
  uint64_t v26 = (uint64_t *)v25[1];
  if (v26)
  {
    do
    {
      uint64_t v27 = v26;
      uint64_t v26 = (uint64_t *)*v26;
    }
    while (v26);
  }
  else
  {
    do
    {
      uint64_t v27 = (uint64_t *)v25[2];
      BOOL v6 = *v27 == (void)v25;
      uint64_t v25 = v27;
    }
    while (!v6);
  }
  sub_B0E28(v2, v27, (uint64_t)&word_2556518, (uint64_t)&word_2556518);
  return a1;
}

uint64_t sub_A1F70(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (!*(void *)(*(void *)a1 + 8)) {
    return 0;
  }
  if (!sub_AD9E4(a1, a2, 1)) {
    return 0;
  }
  if (sub_ADC14(a1, (uint64_t)a2, 1)) {
    return 0;
  }
  BOOL v6 = *(void **)(*(void *)a1 + 8);
  uint64_t v7 = operator new(0x18uLL);
  uint64_t v8 = *a3;
  uint64_t v9 = v6[28];
  v6 += 28;
  *uint64_t v7 = v9;
  v7[1] = v6;
  *(void *)(v9 + 8) = v7;
  *BOOL v6 = v7;
  v7[2] = v8;
  ++v6[2];
  if (!sub_AD9E4(a1, a2, 1)) {
    return 0;
  }
  if (sub_ADC14(a1, (uint64_t)a2, 1)) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)a1 + 8);
  uint64_t v10 = 1;
  if ((uint64_t *)(v12 + 8) == sub_ADE40(v12, (uint64_t)a2)) {
    operator new();
  }
  return v10;
}

uint64_t sub_A20FC(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v17);
  size_t v9 = strlen(a1);
  sub_188FC78(v18, (uint64_t)a1, v9);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  sub_188FC78(v18, v11, v12);
  size_t v13 = strlen(a3);
  sub_188FC78(v18, (uint64_t)a3, v13);
  std::ostream::operator<<();
  size_t v14 = strlen(a5);
  sub_188FC78(v18, (uint64_t)a5, v14);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A22F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A2304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A2318(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A24D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A24EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A2500(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_A8A24(*(void *)(a1 + 408), a2, a3) & 1) == 0)
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v5 = *(void *)(a1 + 368);
    if (v5 >= *(void *)(a1 + 376))
    {
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)__p);
      if (SHIBYTE(v8) < 0) {
LABEL_9:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v8;
        *(_OWORD *)unint64_t v5 = v6;
      }
      *(void *)(a1 + 368) = v5 + 24;
      *(void *)(a1 + 368) = v5 + 24;
      if (SHIBYTE(v8) < 0) {
        goto LABEL_9;
      }
    }
  }
}

void sub_A25D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 368) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2600(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_A8A24(*(void *)(a1 + 408), a2, a3) & 1) == 0)
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v5 = *(void *)(a1 + 368);
    if (v5 >= *(void *)(a1 + 376))
    {
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)__p);
      if (SHIBYTE(v8) < 0) {
LABEL_9:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v8;
        *(_OWORD *)unint64_t v5 = v6;
      }
      *(void *)(a1 + 368) = v5 + 24;
      *(void *)(a1 + 368) = v5 + 24;
      if (SHIBYTE(v8) < 0) {
        goto LABEL_9;
      }
    }
  }
}

void sub_A26D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 368) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2700(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 408);
  if (*(void *)v5
    && *(void *)(*(void *)v5 + 8)
    && sub_AD9E4(*(void *)(a1 + 408), (uint64_t *)a2, 1)
    && (sub_ADC14(v5, (uint64_t)a2, 1) & 1) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)v5 + 8);
    if ((uint64_t *)(v9 + 40) == sub_ADE40(v9 + 32, (uint64_t)a2))
    {
      __p[0] = a2;
      size_t v10 = sub_285AA4(v9 + 32, (uint64_t)a2, (uint64_t)&unk_20F06E0, (long long **)__p);
      v10[56] = 0;
      *((void *)v10 + 8) = a3;
      ++*(void *)(v9 + 56);
    }
  }
  else
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v7 = *(void *)(a1 + 368);
    if (v7 >= *(void *)(a1 + 376))
    {
      *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)__p);
      if (SHIBYTE(v12) < 0) {
LABEL_12:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v12;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 368) = v7 + 24;
      *(void *)(a1 + 368) = v7 + 24;
      if (SHIBYTE(v12) < 0) {
        goto LABEL_12;
      }
    }
  }
}

void sub_A2878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 368) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A28A0(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5B50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5B50))
  {
    qword_24F5B48 = 0x400921FB54442D18;
    __cxa_guard_release(&qword_24F5B50);
  }
  char v9 = 2;
  strcpy((char *)__p, "pi");
  int v2 = sub_A1F70(a1, (uint64_t *)__p, &qword_24F5B48);
  int v3 = v2;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!v3) {
      return 0;
    }
  }
  else if (!v2)
  {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5B60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5B60))
  {
    qword_24F5B58 = 0x3DDB7CDFD9D7BDBBLL;
    __cxa_guard_release(&qword_24F5B60);
  }
  char v9 = 7;
  strcpy((char *)__p, "epsilon");
  int v4 = sub_A1F70(a1, (uint64_t *)__p, &qword_24F5B58);
  int v5 = v4;
  if ((v9 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_9;
    }
    return 0;
  }
  operator delete(__p[0]);
  if (!v5) {
    return 0;
  }
LABEL_9:
  char v9 = 3;
  LODWORD(__p[0]) = 6712937;
  uint64_t result = sub_A1F70(a1, (uint64_t *)__p, &qword_20B9D50);
  uint64_t v7 = result;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    return v7;
  }
  return result;
}

void sub_A2A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A2A84(uint64_t a1)
{
  sub_A0FF4(a1);
  if (sub_A2C58(*(void *)(a1 + 408) + 8, a1 + 56, *(void *)(a1 + 408) + 1536)) {
    return;
  }
  int v2 = *(void **)(a1 + 408);
  if (v2[75])
  {
    unint64_t v3 = *(void *)(v2[71] + 8 * (v2[74] / 0x1EuLL)) + 136 * (v2[74] % 0x1EuLL);
    if (*(char *)(v3 + 71) < 0)
    {
      sub_4200(v7, *(void **)(v3 + 48), *(void *)(v3 + 56));
    }
    else
    {
      long long v4 = *(_OWORD *)(v3 + 48);
      uint64_t v8 = *(void *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = v4;
    }
  }
  else
  {
    HIBYTE(v8) = 8;
    strcpy((char *)v7, "No Error");
  }
  sub_A3898("Error parsing the formula: ", (uint64_t)v7, ".");
  unint64_t v5 = *(void *)(a1 + 368);
  if (v5 >= *(void *)(a1 + 376))
  {
    *(void *)(a1 + 368) = sub_6E6EC((char **)(a1 + 360), (uint64_t)__p);
    if (SHIBYTE(v10) < 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if (SHIBYTE(v10) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 368), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v6 = *(_OWORD *)__p;
      *(void *)(v5 + 16) = v10;
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(void *)(a1 + 368) = v5 + 24;
    *(void *)(a1 + 368) = v5 + 24;
    if (SHIBYTE(v10) < 0)
    {
LABEL_15:
      operator delete(__p[0]);
      if (SHIBYTE(v8) < 0) {
        goto LABEL_16;
      }
      return;
    }
  }
  if (SHIBYTE(v8) < 0) {
LABEL_16:
  }
    operator delete(v7[0]);
}

void sub_A2BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 368) = v22;
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void *sub_A2C58(std::string::size_type a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  uint64_t v6 = a1 + 552;
  sub_B1980((void *)(a1 + 552));
  uint64_t v7 = *(void ***)(a1 + 608);
  uint64_t v8 = *(void *)(a1 + 616);
  *(void *)(a1 + 640) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v7 = (void **)(*(void *)(a1 + 608) + 8);
      *(void *)(a1 + 608) = v7;
      unint64_t v9 = *(void *)(a1 + 616) - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v10 = 2048;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v10 = 4096;
  }
  *(void *)(a1 + 632) = v10;
LABEL_8:
  if (*(char *)(a1 + 871) < 0)
  {
    **(unsigned char **)(a1 + 848) = 0;
    *(void *)(a1 + 856) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 848) = 0;
    *(unsigned char *)(a1 + 871) = 0;
  }
  sub_B1B18((void *)(a1 + 872));
  *(void *)(a1 + 352) = a1 + 432;
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (!v11)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR000 - Empty expression!");
    memset(&v72, 0, sizeof(v72));
    std::string::push_back(&v72, 56);
    std::string::push_back(&v72, 52);
    std::string::push_back(&v72, 49);
    std::string::push_back(&v72, 48);
    std::string::push_back(&v72, 50);
    std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v72;
    }
    else {
      uint64_t v15 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v72.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v16 = (std::string *)((char *)v15 + size - 1);
      if (v16 > v15)
      {
        int64_t v17 = &v15->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v18 = *(v17 - 1);
          *(v17 - 1) = v16->__r_.__value_.__s.__data_[0];
          v16->__r_.__value_.__s.__data_[0] = v18;
          uint64_t v16 = (std::string *)((char *)v16 - 1);
          BOOL v19 = v17++ >= (char *)v16;
        }
        while (!v19);
      }
    }
    uint64_t v20 = std::string::insert(&v72, 0, "exprtk.hpp:");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    char v77 = 0;
    LOBYTE(v75[1]) = 0;
    uint64_t v78 = -1;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long __p = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0;
    int v79 = 1;
    LODWORD(v75[0]) = 1;
    std::string::operator=((std::string *)v80, &__str);
    std::string::operator=((std::string *)((char *)&v81 + 8), &v73);
    uint64_t v22 = *(void *)(a1 + 568);
    uint64_t v23 = *(void *)(a1 + 560);
    uint64_t v24 = 30 * ((v22 - v23) >> 3) - 1;
    if (v22 == v23) {
      uint64_t v24 = 0;
    }
    if (v24 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(v6);
      uint64_t v23 = *(void *)(a1 + 560);
      uint64_t v22 = *(void *)(a1 + 568);
    }
    if (v22 == v23)
    {
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v25 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v26 = *(void *)(v23 + 8 * (v25 / 0x1E)) + 136 * (v25 % 0x1E);
    }
LABEL_77:
    sub_B5158(v26, (uint64_t)v75);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v84) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v82) & 0x80000000) == 0)
      {
LABEL_79:
        if ((SBYTE7(v81) & 0x80000000) == 0) {
          goto LABEL_80;
        }
        goto LABEL_87;
      }
    }
    else if ((SHIBYTE(v82) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    operator delete(*((void **)&v81 + 1));
    if ((SBYTE7(v81) & 0x80000000) == 0)
    {
LABEL_80:
      if ((v77 & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_88;
    }
LABEL_87:
    operator delete(v80[0]);
    if ((v77 & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v75[1]);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_90;
    }
LABEL_89:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_91:
      operator delete(__str.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_90:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_91;
  }
  if (!sub_B52E0(a1, (uint64_t *)a2))
  {
    sub_B1F60((void *)a1);
    return 0;
  }
  std::string::size_type v13 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 24) = *(void *)a1;
  *(void *)(a1 + 32) = v13;
  if (v12 == v13) {
    std::string::size_type v13 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v13 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v13;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v13 + 8));
  *(void *)(a1 + 136) = *(void *)(v13 + 32);
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR001 - Empty expression!");
    memset(&v72, 0, sizeof(v72));
    std::string::push_back(&v72, 52);
    std::string::push_back(&v72, 54);
    std::string::push_back(&v72, 49);
    std::string::push_back(&v72, 48);
    std::string::push_back(&v72, 50);
    std::string::size_type v34 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v35 = &v72;
    }
    else {
      int v35 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v34 = v72.__r_.__value_.__l.__size_;
    }
    if (v34)
    {
      unint64_t v36 = (std::string *)((char *)v35 + v34 - 1);
      if (v36 > v35)
      {
        unint64_t v37 = &v35->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v38 = *(v37 - 1);
          *(v37 - 1) = v36->__r_.__value_.__s.__data_[0];
          v36->__r_.__value_.__s.__data_[0] = v38;
          unint64_t v36 = (std::string *)((char *)v36 - 1);
          BOOL v19 = v37++ >= (char *)v36;
        }
        while (!v19);
      }
    }
    uint64_t v39 = std::string::insert(&v72, 0, "exprtk.hpp:");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    char v77 = 0;
    LOBYTE(v75[1]) = 0;
    uint64_t v78 = -1;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long __p = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0;
    int v79 = 1;
    LODWORD(v75[0]) = 1;
    std::string::operator=((std::string *)v80, &__str);
    std::string::operator=((std::string *)((char *)&v81 + 8), &v73);
    uint64_t v41 = *(void *)(a1 + 568);
    uint64_t v42 = *(void *)(a1 + 560);
    uint64_t v43 = 30 * ((v41 - v42) >> 3) - 1;
    if (v41 == v42) {
      uint64_t v43 = 0;
    }
    if (v43 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(v6);
      uint64_t v42 = *(void *)(a1 + 560);
      uint64_t v41 = *(void *)(a1 + 568);
    }
    if (v41 == v42)
    {
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v44 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v26 = *(void *)(v42 + 8 * (v44 / 0x1E)) + 136 * (v44 % 0x1E);
    }
    goto LABEL_77;
  }
  uint64_t result = sub_B2544(a1);
  if (!result) {
    return result;
  }
  sub_B7F2C(v75, (uint64_t *)(a3 + 8));
  uint64_t v28 = (void **)(a1 + 440);
  uint64_t v29 = *(uint64_t ***)(a1 + 440);
  if (v29)
  {
    int64_t v30 = *(uint64_t ***)(a1 + 448);
    int64_t v31 = *(void **)(a1 + 440);
    if (v30 != v29)
    {
      do
        int64_t v30 = sub_285120(v30 - 1);
      while (v30 != v29);
      int64_t v31 = *v28;
    }
    *(void *)(a1 + 448) = v29;
    operator delete(v31);
    *uint64_t v28 = 0;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
  }
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v75;
  *(void *)(a1 + 456) = v76;
  uint64_t v32 = *(void *)(a1 + 480);
  for (uint64_t i = *(void *)(a1 + 488); i != v32; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  *(void *)(a1 + 488) = v32;
  uint64_t v45 = *(void *)(a1 + 504);
  for (uint64_t j = *(void *)(a1 + 512); j != v45; j -= 32)
  {
    if (*(char *)(j - 9) < 0) {
      operator delete(*(void **)(j - 32));
    }
  }
  *(void *)(a1 + 512) = v45;
  uint64_t v47 = *(void *)(a1 + 536);
  uint64_t v48 = *(void *)(a1 + 528);
  while (v47 != v48)
  {
    if (*(char *)(v47 - 1) < 0) {
      operator delete(*(void **)(v47 - 24));
    }
    v47 -= 24;
  }
  *(void *)(a1 + 536) = v48;
  *(_WORD *)(a1 + 475) = 0;
  std::string::size_type v50 = *(void *)a1;
  uint64_t v49 = *(void *)(a1 + 8);
  *(void *)(a1 + 24) = *(void *)a1;
  *(void *)(a1 + 32) = v50;
  if (v49 == v50) {
    std::string::size_type v50 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v50 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v50;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v50 + 8));
  *(void *)(a1 + 136) = *(void *)(v50 + 32);
  uint64_t v51 = sub_B3C54(a1);
  if (!v51 || *(_DWORD *)(a1 + 104) != 6)
  {
    if (*(void *)(a1 + 592)) {
      goto LABEL_129;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9960;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR002 - Invalid expression encountered");
    memset(&v72, 0, sizeof(v72));
    std::string::push_back(&v72, 49);
    std::string::push_back(&v72, 49);
    std::string::push_back(&v72, 50);
    std::string::push_back(&v72, 48);
    std::string::push_back(&v72, 50);
    std::string::size_type v54 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v55 = &v72;
    }
    else {
      long long v55 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v54 = v72.__r_.__value_.__l.__size_;
    }
    if (v54)
    {
      uint64_t v56 = (std::string *)((char *)v55 + v54 - 1);
      if (v56 > v55)
      {
        uint64_t v57 = &v55->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v58 = *(v57 - 1);
          *(v57 - 1) = v56->__r_.__value_.__s.__data_[0];
          v56->__r_.__value_.__s.__data_[0] = v58;
          uint64_t v56 = (std::string *)((char *)v56 - 1);
          BOOL v19 = v57++ >= (char *)v56;
        }
        while (!v19);
      }
    }
    uint64_t v59 = std::string::insert(&v72, 0, "exprtk.hpp:");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    char v77 = 0;
    LOBYTE(v75[1]) = 0;
    uint64_t v78 = -1;
    *(_OWORD *)uint64_t v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long __p = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0;
    int v79 = 1;
    LODWORD(v75[0]) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)&v75[1], (const std::string *)(a1 + 112));
    uint64_t v78 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v80, &__str);
    std::string::operator=((std::string *)((char *)&v81 + 8), &v73);
    uint64_t v61 = *(void *)(a1 + 568);
    uint64_t v62 = *(void *)(a1 + 560);
    uint64_t v63 = 30 * ((v61 - v62) >> 3) - 1;
    if (v61 == v62) {
      uint64_t v63 = 0;
    }
    if (v63 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(v6);
      uint64_t v62 = *(void *)(a1 + 560);
      uint64_t v61 = *(void *)(a1 + 568);
    }
    if (v61 == v62)
    {
      uint64_t v65 = 0;
    }
    else
    {
      unint64_t v64 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v65 = *(void *)(v62 + 8 * (v64 / 0x1E)) + 136 * (v64 % 0x1E);
    }
    sub_B5158(v65, (uint64_t)v75);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v84) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v82) & 0x80000000) == 0)
      {
LABEL_124:
        if ((SBYTE7(v81) & 0x80000000) == 0) {
          goto LABEL_125;
        }
        goto LABEL_135;
      }
    }
    else if ((SHIBYTE(v82) & 0x80000000) == 0)
    {
      goto LABEL_124;
    }
    operator delete(*((void **)&v81 + 1));
    if ((SBYTE7(v81) & 0x80000000) == 0)
    {
LABEL_125:
      if ((v77 & 0x80000000) == 0) {
        goto LABEL_126;
      }
      goto LABEL_136;
    }
LABEL_135:
    operator delete(v80[0]);
    if ((v77 & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_127;
      }
      goto LABEL_137;
    }
LABEL_136:
    operator delete(v75[1]);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_127:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
      goto LABEL_138;
    }
LABEL_137:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_139;
    }
LABEL_138:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_129:
      if (v51)
      {
LABEL_130:
        if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 32))(v51) != 17
          && (*(unsigned int (**)(uint64_t))(*(void *)v51 + 32))(v51) != 18)
        {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
      }
LABEL_140:
      uint64_t v66 = *(void *)(a1 + 480);
      for (uint64_t k = *(void *)(a1 + 488); k != v66; k -= 32)
      {
        if (*(char *)(k - 9) < 0) {
          operator delete(*(void **)(k - 32));
        }
      }
      *(void *)(a1 + 488) = v66;
      uint64_t v68 = *(void *)(a1 + 504);
      for (uint64_t m = *(void *)(a1 + 512); m != v68; m -= 32)
      {
        if (*(char *)(m - 9) < 0) {
          operator delete(*(void **)(m - 32));
        }
      }
      *(void *)(a1 + 512) = v68;
      uint64_t v70 = *(void *)(a1 + 536);
      uint64_t v71 = *(void *)(a1 + 528);
      while (v70 != v71)
      {
        if (*(char *)(v70 - 1) < 0) {
          operator delete(*(void **)(v70 - 24));
        }
        v70 -= 24;
      }
      *(void *)(a1 + 536) = v71;
      *(_WORD *)(a1 + 475) = 0;
      sub_B1B18((void *)(a1 + 872));
      return 0;
    }
LABEL_139:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v51) {
      goto LABEL_130;
    }
    goto LABEL_140;
  }
  if (*(unsigned char *)(a1 + 650))
  {
    uint64_t v51 = 0;
    *(unsigned char *)(a1 + 475) = 1;
  }
  sub_A9528((void **)a3, v51);
  if (*(void *)a3) {
    *(void *)(*(void *)a3 + 56) = 0;
  }
  sub_B4434(a1, (void *)a3);
  uint64_t v52 = *(void *)(a1 + 672);
  uint64_t v53 = *(void **)a3;
  if (v52 && v53)
  {
    v53[5] = v52;
    *(void *)(a1 + 672) = 0;
    return (void *)(v53[1] != 0);
  }
  *(void *)(a1 + 672) = 0;
  if (v53) {
    return (void *)(v53[1] != 0);
  }
  return 0;
}

void sub_A37C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t sub_A3898(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A3A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A3A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A3A80(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 408) + 32 * a2 + 1536) + 8) + 16))();
}

double sub_A3AB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (v3 != 72)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    sub_A3F00("Custom function curve_fit() called with wrong number of parameters: Expected 3, got ", (uint64_t)&v46, ".");
    unint64_t v15 = *(void *)(v14 + 32);
    if (v15 < *(void *)(v14 + 40))
    {
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_4200(*(unsigned char **)(v14 + 32), *(void **)__p, *(unint64_t *)&__p[8]);
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    std::string::value_type v18 = sub_6E6EC((char **)(v14 + 24), (uint64_t)__p);
LABEL_24:
    *(void *)(v14 + 32) = v18;
    if ((__p[23] & 0x80000000) == 0) {
      return 0.0;
    }
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4 != *(void *)(v2 + 32))
  {
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v45 = *(void *)(v2 + 32);
    unint64_t v46 = v4;
    sub_A40D4("Custom function curve_fit() expects the first and second argument to be vectors of equal size, got vectors of size ", (uint64_t)&v46, " and ", (uint64_t)&v45, " instead.");
    unint64_t v15 = *(void *)(v14 + 32);
    if (v15 < *(void *)(v14 + 40))
    {
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_4200(*(unsigned char **)(v14 + 32), *(void **)__p, *(unint64_t *)&__p[8]);
LABEL_17:
        *(void *)(v14 + 32) = v15 + 24;
        *(void *)(v14 + 32) = v15 + 24;
        if ((__p[23] & 0x80000000) == 0) {
          return 0.0;
        }
LABEL_25:
        operator delete(*(void **)__p);
        return 0.0;
      }
LABEL_16:
      long long v16 = *(_OWORD *)__p;
      *(void *)(v15 + 16) = *(void *)&__p[16];
      *(_OWORD *)unint64_t v15 = v16;
      goto LABEL_17;
    }
    std::string::value_type v18 = sub_6E6EC((char **)(v14 + 24), (uint64_t)__p);
    goto LABEL_24;
  }
  unint64_t v5 = *(double **)v2;
  uint64_t v6 = *(void *)(v2 + 24);
  int v7 = *(double **)v2;
  if (v4)
  {
    uint64_t v8 = 8 * v4 - 8;
    uint64_t v9 = *(double **)v2;
    while (v8)
    {
      int v7 = v9 + 1;
      v8 -= 8;
      _NF = v9[1] < *v9;
      ++v9;
      if (_NF) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v7 != &v5[v4])
    {
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = (char *)operator new(0x88uLL);
      *(void *)long long __p = v12;
      *(_OWORD *)&__p[8] = xmmword_20B9970;
      strcpy(v12, "Custom function curve_fit() called on an x-range (first argument) that does not have its values sorted in (strictly) increasing order.");
      unint64_t v13 = *(void *)(v11 + 32);
      if (v13 >= *(void *)(v11 + 40))
      {
        std::string::value_type v38 = sub_6E6EC((char **)(v11 + 24), (uint64_t)__p);
        int v39 = __p[23];
        *(void *)(v11 + 32) = v38;
        if ((v39 & 0x80000000) == 0) {
          return 0.0;
        }
      }
      else
      {
        sub_4200(*(unsigned char **)(v11 + 32), v12, 0x86uLL);
        *(void *)(v11 + 32) = v13 + 24;
      }
      operator delete(*(void **)__p);
      return 0.0;
    }
  }
  if ((unint64_t)v4 <= 1)
  {
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = (char *)operator new(0x58uLL);
    *(void *)long long __p = v20;
    *(_OWORD *)&__p[8] = xmmword_20B9980;
    strcpy(v20, "Custom function curve_fit() called on input ranges consisting of less than 2 values.");
    unint64_t v21 = *(void *)(v19 + 8);
    if (v21 >= *(void *)(v19 + 16))
    {
      long long v40 = sub_6E6EC((char **)v19, (uint64_t)__p);
      int v41 = __p[23];
      *(void *)(v19 + 8) = v40;
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      sub_4200(*(unsigned char **)(v19 + 8), v20, 0x54uLL);
      *(void *)(v19 + 8) = v21 + 24;
    }
    operator delete(*(void **)__p);
LABEL_39:
    if (*(void *)(v2 + 32)) {
      return *(double *)v6;
    }
    return 0.0;
  }
  uint64_t v22 = *(double **)(v2 + 48);
  double v23 = *v22;
  if (*v22 <= *v5) {
    return *(double *)v6;
  }
  unint64_t v24 = v4 - 1;
  if (v4 < 1)
  {
    unint64_t v37 = *(double **)v2;
  }
  else
  {
    unint64_t v25 = v4 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v26 = *(double **)v2;
    do
    {
      unint64_t v27 = (2 * v25) & 0xFFFFFFFFFFFFFFF8;
      _X14 = (char *)v26 + v27;
      __asm { PRFM            #0, [X14] }
      uint64_t v33 = &v26[v25 >> 1];
      _X13 = (char *)v33 + v27;
      __asm { PRFM            #0, [X13] }
      if (*v33 >= v23) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = v25 >> 1;
      }
      v26 += v36;
      v25 -= v25 >> 1;
    }
    while ((uint64_t)v25 > 1);
    unint64_t v37 = &v26[*v26 < v23];
  }
  unint64_t v42 = v37 - v5;
  if (v24 < v42) {
    unint64_t v42 = v24;
  }
  uint64_t v43 = v42;
  double v44 = (v23 - v5[v43 - 1]) / (v5[v43] - v5[v43 - 1]);
  return *(double *)(v6 + v43 * 8) * v44 + *(double *)(v6 + v43 * 8 - 8) * (1.0 - v44);
}

void sub_A3EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A3F00(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A40AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A40C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A40D4(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  sub_E1B4((uint64_t)v13);
  size_t v8 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v8);
  std::ostream::operator<<();
  size_t v9 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v9);
  std::ostream::operator<<();
  size_t v10 = strlen(a5);
  sub_188FC78(v14, (uint64_t)a5, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A42B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A42C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_A42DC(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  unint64_t v5 = v4 >> 1;
  size_t v6 = *(void **)(*a2 + 24 * (v4 >> 1));
  if (**(unsigned char **)(a1 + 72))
  {
    uint64_t v7 = *(void *)(v3 + 24 * v5 + 8);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a1 + 64);
      size_t v9 = operator new(0x50uLL);
      long long __p = v9;
      long long v61 = xmmword_20B99B0;
      strcpy((char *)v9, "Custom function curve_lookup_Nd() called on an empty vector of y-values.");
      unint64_t v10 = *(void *)(v8 + 8);
      if (v10 < *(void *)(v8 + 16))
      {
        sub_4200(*(unsigned char **)(v8 + 8), v9, 0x48uLL);
        *(void *)(v8 + 8) = v10 + 24;
LABEL_44:
        operator delete(__p);
        return 0.0;
      }
      unint64_t v13 = sub_6E6EC((char **)v8, (uint64_t)&__p);
      int v14 = SHIBYTE(v61);
      *(void *)(v8 + 8) = v13;
      if (v14 < 0) {
        goto LABEL_44;
      }
      return 0.0;
    }
    if (v4 < 2)
    {
      if (v7 != 1) {
        goto LABEL_37;
      }
      return *(double *)v6;
    }
    if (v4 >= 4)
    {
      uint64_t v11 = v5 & 0x7FFFFFFFFFFFFFFELL;
      char v15 = (uint64_t *)(v3 + 32);
      uint64_t v16 = 1;
      uint64_t v17 = v5 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v18 = 1;
      do
      {
        uint64_t v19 = *(v15 - 3);
        uint64_t v20 = *v15;
        v15 += 6;
        v16 *= v19;
        v18 *= v20;
        v17 -= 2;
      }
      while (v17);
      uint64_t v12 = v18 * v16;
      if (v5 == v11)
      {
LABEL_17:
        if (v12 == v7)
        {
          unint64_t v24 = (uint64_t *)(v3 + 8);
          unint64_t v25 = v4 >> 1;
          while (1)
          {
            uint64_t v26 = *v24;
            v24 += 3;
            if (!v26) {
              break;
            }
            if (!--v25) {
              goto LABEL_21;
            }
          }
          uint64_t v52 = *(void *)(a1 + 64);
          long long v55 = operator new(0x50uLL);
          long long __p = v55;
          long long v61 = xmmword_20B9990;
          strcpy((char *)v55, "Custom function curve_lookup_Nd() should not have size 0 input bounds vectors.");
          unint64_t v54 = *(void *)(v52 + 32);
          if (v54 < *(void *)(v52 + 40))
          {
            sub_4200(*(unsigned char **)(v52 + 32), v55, 0x4EuLL);
            goto LABEL_42;
          }
          goto LABEL_43;
        }
LABEL_37:
        uint64_t v52 = *(void *)(a1 + 64);
        uint64_t v53 = operator new(0x78uLL);
        long long __p = v53;
        long long v61 = xmmword_20B99A0;
        strcpy((char *)v53, "Custom function curve_lookup_Nd() expects that the size of the lookup table is the multiple of the input bounds sizes");
        unint64_t v54 = *(void *)(v52 + 32);
        if (v54 < *(void *)(v52 + 40))
        {
          sub_4200(*(unsigned char **)(v52 + 32), v53, 0x75uLL);
LABEL_42:
          *(void *)(v52 + 32) = v54 + 24;
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v56 = sub_6E6EC((char **)(v52 + 24), (uint64_t)&__p);
        int v57 = SHIBYTE(v61);
        *(void *)(v52 + 32) = v56;
        if (v57 < 0) {
          goto LABEL_44;
        }
        return 0.0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 1;
    }
    unint64_t v21 = v5 - v11;
    uint64_t v22 = (uint64_t *)(v3 + 24 * v11 + 8);
    do
    {
      uint64_t v23 = *v22;
      v22 += 3;
      v12 *= v23;
      --v21;
    }
    while (v21);
    goto LABEL_17;
  }
LABEL_21:
  long long __p = 0;
  long long v61 = 0uLL;
  if (v4 < 2) {
    return *(double *)v6;
  }
  uint64_t v28 = 0;
  do
  {
    uint64_t v29 = (double **)(*a2 + 24 * v28);
    int64_t v30 = *v29;
    uint64_t v31 = 8 * (void)v29[1] - 8;
    uint64_t v32 = v30;
    if (v31 >= 8)
    {
      double v33 = **(double **)(*a2 + 24 * (v5 + 1 + v28));
      if (v31 == 8)
      {
        std::string::size_type v34 = v30;
      }
      else
      {
        unint64_t v35 = (unint64_t)v31 >> 3;
        std::string::size_type v34 = v30;
        do
        {
          unint64_t v36 = (2 * v35) & 0xFFFFFFFFFFFFFFF8;
          _X13 = (char *)v34 + v36;
          __asm { PRFM            #0, [X13] }
          uint64_t v43 = &v34[v35 >> 1];
          _X12 = (char *)v43 + v36;
          __asm { PRFM            #0, [X12] }
          if (*v43 >= v33) {
            unint64_t v46 = 0;
          }
          else {
            unint64_t v46 = v35 >> 1;
          }
          v34 += v46;
          v35 -= v35 >> 1;
        }
        while ((uint64_t)v35 > 1);
      }
      uint64_t v32 = &v34[*v34 < v33];
    }
    uint64_t v59 = v32 - v30;
    sub_A4710((uint64_t)&__p, &v59);
    ++v28;
  }
  while (v28 != v5);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = (uint64_t *)(*a2 + 8);
  uint64_t v50 = 1;
  do
  {
    v48 += *((void *)__p + v47) * v50;
    uint64_t v51 = *v49;
    v49 += 3;
    v50 *= v51;
    ++v47;
  }
  while (v5 != v47);
  double v27 = *(double *)&v6[v48];
  *(void *)&long long v61 = __p;
  operator delete(__p);
  return v27;
}

void sub_A46B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_A4710(uint64_t a1, void *a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  size_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      int v14 = operator new(8 * v13);
    }
    else
    {
      int v14 = 0;
    }
    char v15 = &v14[8 * v10];
    void *v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      size_t v6 = &v5[-v18];
      char v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--char v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

double sub_A4878(uint64_t a1, double *a2)
{
  double v4 = *a2;
  if (*a2 < -0.00001 || v4 > 100.00001)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    sub_A49C0("Input parameter to custom function percentage_to_energy_wh() is expected to be a percentage in the range [0, 100], got ", (uint64_t)a2, ".");
    unint64_t v6 = *(void *)(v5 + 8);
    if (v6 >= *(void *)(v5 + 16))
    {
      *(void *)(v5 + 8) = sub_6E6EC((char **)v5, (uint64_t)__p);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_7:
        double v4 = *a2;
        goto LABEL_8;
      }
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_4200(*(unsigned char **)(v5 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v7 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v13;
        *(_OWORD *)unint64_t v6 = v7;
      }
      *(void *)(v5 + 8) = v6 + 24;
      *(void *)(v5 + 8) = v6 + 24;
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    operator delete(__p[0]);
    goto LABEL_7;
  }
LABEL_8:
  if (v4 > 100.0) {
    double v4 = 100.0;
  }
  double v8 = v4 / 100.0;
  BOOL v9 = v4 <= 0.0;
  double v10 = 0.0;
  if (!v9) {
    double v10 = v8;
  }
  return **(double **)(a1 + 40) + v10 * (**(double **)(a1 + 48) - **(double **)(a1 + 40));
}

void sub_A4998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A49C0(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A4B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A4B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A4B94()
{
}

void sub_A4DE4(_Unwind_Exception *a1)
{
  sub_285354(v2);
  sub_285120(v1);
  _Unwind_Resume(a1);
}

void sub_A4E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_A4E60((char **)va);
  sub_285120(v4);
  _Unwind_Resume(a1);
}

void sub_A4E1C()
{
}

char **sub_A4E60(char **a1)
{
  return a1;
}

uint64_t sub_A4ECC(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = off_23FE588;
  if (*(char *)(result + 55) < 0)
  {
    operator delete(*(void **)(result + 32));
    return v1;
  }
  return result;
}

uint64_t sub_A4F2C(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = off_23FE588;
  if (*(char *)(result + 55) < 0)
  {
    operator delete(*(void **)(result + 32));
    return v1;
  }
  return result;
}

BOOL sub_A4F8C(uint64_t a1)
{
  return *(void *)(a1 + 384) != *(void *)(a1 + 392);
}

char *sub_A4F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_6E6EC((char **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = (char *)(v3 + 24);
    *(void *)(a1 + 8) = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
  }
  return result;
}

void sub_A502C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_A5034(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_6E6EC((char **)(a1 + 24), a2);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 32), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = (char *)(v3 + 24);
    *(void *)(a1 + 32) = v3 + 24;
    *(void *)(a1 + 32) = v3 + 24;
  }
  return result;
}

void sub_A50C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_A50CC(uint64_t result, uint64_t a2)
{
  unint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 56);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 32) - *(void *)(result + 24)) >> 3);
  if (v5 == v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3) == *(void *)(result + 48)) {
      goto LABEL_36;
    }
    uint64_t result = sub_723EC(2u);
    if (!result) {
      goto LABEL_36;
    }
    sub_6BAC((uint64_t)&v69);
    if (byte_25561E7 >= 0) {
      size_t v6 = &xmmword_25561D0;
    }
    else {
      size_t v6 = (long long *)xmmword_25561D0;
    }
    if (byte_25561E7 >= 0) {
      uint64_t v7 = byte_25561E7;
    }
    else {
      uint64_t v7 = *((void *)&xmmword_25561D0 + 1);
    }
    double v8 = sub_188FC78(&v69, (uint64_t)v6, v7);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    uint64_t v12 = sub_188FC78(v8, v10, v11);
    sub_188FC78(v12, (uint64_t)": ", 2);
    uint64_t v13 = (void *)std::ostream::operator<<();
    sub_188FC78(v13, (uint64_t)" errors and ", 12);
    int v14 = (void *)std::ostream::operator<<();
    uint64_t v15 = sub_188FC78(v14, (uint64_t)" warnings occurred (model id ", 29);
    std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
  }
  else
  {
    uint64_t result = sub_723EC(3u);
    if (!result) {
      goto LABEL_36;
    }
    sub_6BAC((uint64_t)&v69);
    if (byte_25561E7 >= 0) {
      uint64_t v16 = &xmmword_25561D0;
    }
    else {
      uint64_t v16 = (long long *)xmmword_25561D0;
    }
    if (byte_25561E7 >= 0) {
      uint64_t v17 = byte_25561E7;
    }
    else {
      uint64_t v17 = *((void *)&xmmword_25561D0 + 1);
    }
    uint64_t v18 = sub_188FC78(&v69, (uint64_t)v16, v17);
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a2;
    }
    else {
      uint64_t v20 = *(void *)a2;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    long long v22 = sub_188FC78(v18, v20, v21);
    sub_188FC78(v22, (uint64_t)": ", 2);
    uint64_t v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" errors and ", 12);
    unint64_t v24 = (void *)std::ostream::operator<<();
    unint64_t v25 = sub_188FC78(v24, (uint64_t)" warnings occurred (model id ", 29);
    std::ostream::operator<<();
    sub_188FC78(v25, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  uint64_t result = std::ios::~ios();
LABEL_36:
  unint64_t v26 = v3[7];
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3);
  BOOL v28 = v26 >= v27;
  if (v26 > v27) {
    unint64_t v27 = v3[7];
  }
  if (!v28)
  {
    uint64_t v31 = 24 * v26;
    unint64_t v32 = v27 - v26;
    do
    {
      uint64_t result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)&v69);
        if (byte_25561E7 >= 0) {
          double v33 = &xmmword_25561D0;
        }
        else {
          double v33 = (long long *)xmmword_25561D0;
        }
        if (byte_25561E7 >= 0) {
          uint64_t v34 = byte_25561E7;
        }
        else {
          uint64_t v34 = *((void *)&xmmword_25561D0 + 1);
        }
        unint64_t v35 = sub_188FC78(&v69, (uint64_t)v33, v34);
        unint64_t v36 = sub_188FC78(v35, (uint64_t)"Error: ", 7);
        uint64_t v37 = v3[3] + v31;
        int v38 = *(char *)(v37 + 23);
        if (v38 >= 0) {
          uint64_t v39 = v3[3] + v31;
        }
        else {
          uint64_t v39 = *(void *)v37;
        }
        if (v38 >= 0) {
          uint64_t v40 = *(unsigned __int8 *)(v37 + 23);
        }
        else {
          uint64_t v40 = *(void *)(v37 + 8);
        }
        sub_188FC78(v36, v39, v40);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v68 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v69 = v29;
        *(uint64_t *)((char *)&v69 + *(void *)(v29 - 24)) = v30;
        if (v72 < 0) {
          operator delete(v71);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        uint64_t result = std::ios::~ios();
      }
      v31 += 24;
      --v32;
    }
    while (v32);
  }
  unint64_t v41 = v3[6];
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  if (v41 <= v42) {
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  else {
    unint64_t v43 = v3[6];
  }
  if (v41 < v42)
  {
    if (v5 == v4)
    {
      unint64_t v45 = v43 - v41;
      uint64_t v46 = 24 * v41;
      do
      {
        uint64_t result = sub_723EC(2u);
        if (result)
        {
          sub_6BAC((uint64_t)&v69);
          if (byte_25561E7 >= 0) {
            uint64_t v47 = &xmmword_25561D0;
          }
          else {
            uint64_t v47 = (long long *)xmmword_25561D0;
          }
          if (byte_25561E7 >= 0) {
            uint64_t v48 = byte_25561E7;
          }
          else {
            uint64_t v48 = *((void *)&xmmword_25561D0 + 1);
          }
          uint64_t v49 = sub_188FC78(&v69, (uint64_t)v47, v48);
          uint64_t v50 = sub_188FC78(v49, (uint64_t)"Warning: ", 9);
          uint64_t v51 = *v3 + v46;
          int v52 = *(char *)(v51 + 23);
          if (v52 >= 0) {
            uint64_t v53 = *v3 + v46;
          }
          else {
            uint64_t v53 = *(void *)v51;
          }
          if (v52 >= 0) {
            uint64_t v54 = *(unsigned __int8 *)(v51 + 23);
          }
          else {
            uint64_t v54 = *(void *)(v51 + 8);
          }
          sub_188FC78(v50, v53, v54);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 2u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v69 = v66;
          *(uint64_t *)((char *)&v69 + *(void *)(v66 - 24)) = v44;
          if (v72 < 0) {
            operator delete(v71);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          uint64_t result = std::ios::~ios();
        }
        v46 += 24;
        --v45;
      }
      while (v45);
    }
    else
    {
      uint64_t v55 = 24 * v41;
      unint64_t v56 = v43 - v41;
      do
      {
        uint64_t result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)&v69);
          if (byte_25561E7 >= 0) {
            int v57 = &xmmword_25561D0;
          }
          else {
            int v57 = (long long *)xmmword_25561D0;
          }
          if (byte_25561E7 >= 0) {
            uint64_t v58 = byte_25561E7;
          }
          else {
            uint64_t v58 = *((void *)&xmmword_25561D0 + 1);
          }
          uint64_t v59 = sub_188FC78(&v69, (uint64_t)v57, v58);
          long long v60 = sub_188FC78(v59, (uint64_t)"Warning: ", 9);
          uint64_t v61 = *v3 + v55;
          int v62 = *(char *)(v61 + 23);
          if (v62 >= 0) {
            uint64_t v63 = *v3 + v55;
          }
          else {
            uint64_t v63 = *(void *)v61;
          }
          if (v62 >= 0) {
            uint64_t v64 = *(unsigned __int8 *)(v61 + 23);
          }
          else {
            uint64_t v64 = *(void *)(v61 + 8);
          }
          sub_188FC78(v60, v63, v64);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v69 = v66;
          *(uint64_t *)((char *)&v69 + *(void *)(v66 - 24)) = v44;
          if (v72 < 0) {
            operator delete(v71);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          uint64_t result = std::ios::~ios();
        }
        v55 += 24;
        --v56;
      }
      while (v56);
    }
  }
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[4] - v3[3]) >> 3);
  v3[6] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  v3[7] = v65;
  return result;
}

void sub_A595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_A5A58(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(double *)(a1 + 8) = (double)a3 / 1000.0;
  *(double *)(a1 + 16) = (double)a4 / 1000.0;
  *(_WORD *)(a1 + 129) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 32;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_20B98A0;
  *(unsigned char *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_20B98A0;
  *(_WORD *)(a1 + 249) = 0;
  *(_DWORD *)(a1 + 252) = 0;
  *(void *)(a1 + 240) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 32;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(unsigned char *)(a1 + 424) = 0;
  operator new();
}

void sub_A5DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 392) = v20;
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_285810(v19, 0);
  sub_82DE8(v18);
  sub_A925C(v17);
  sub_9F51C(v16);
  sub_1B23C(v15 + 56);
  _Unwind_Resume(a1);
}

void sub_A5E54()
{
}

void sub_A5E74()
{
}

uint64_t sub_A5E7C(uint64_t a1)
{
  sub_285810((uint64_t *)(a1 + 432), 0);
  uint64_t v2 = *(void *)(a1 + 384);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 392);
    uint64_t v4 = *(void **)(a1 + 384);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 384);
    }
    *(void *)(a1 + 392) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 360);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 368);
    uint64_t v7 = *(void **)(a1 + 360);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 360);
    }
    *(void *)(a1 + 368) = v5;
    operator delete(v7);
  }
  sub_A925C(a1 + 224);
  double v8 = *(void **)(a1 + 216);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 176);
    if (v9)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(a1 + 216) + v10;
        if (*(char *)(v11 + 23) < 0) {
          operator delete(*(void **)v11);
        }
        v10 += 32;
        --v9;
      }
      while (v9);
      double v8 = *(void **)(a1 + 216);
    }
    free(v8);
  }
  if (*(char *)(a1 + 207) < 0)
  {
    operator delete(*(void **)(a1 + 184));
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_27:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_28;
      }
LABEL_32:
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_33;
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 103) < 0) {
    goto LABEL_32;
  }
LABEL_28:
  if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
    return a1;
  }
LABEL_33:
  operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_A6000(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 432);
  if (*(void *)v6
    && *(void *)(*(void *)v6 + 8)
    && sub_AD9E4(*(void *)(a1 + 432), a2, 1)
    && (sub_ADC14(v6, (uint64_t)a2, 1) & 1) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)v6 + 8);
    if ((uint64_t *)(v9 + 8) == sub_ADE40(v9, (uint64_t)a2)) {
      operator new();
    }
  }
  else
  {
    sub_A012C("Error adding the variable with name '", (uint64_t)a2, "' and value ", a3, ".");
    unint64_t v7 = *(void *)(a1 + 392);
    if (v7 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v11) < 0) {
LABEL_12:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v11) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v11;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 392) = v7 + 24;
      *(void *)(a1 + 392) = v7 + 24;
      if (SHIBYTE(v11) < 0) {
        goto LABEL_12;
      }
    }
  }
}

void sub_A61D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 392) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A6200(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 432);
  if (!*(void *)v5
    || !*(void *)(*(void *)v5 + 8)
    || !sub_AD9E4(*(void *)(a1 + 432), a2, 1)
    || (sub_ADC14(v5, (uint64_t)a2, 1) & 1) != 0
    || a3[1] == *a3
    || (sub_AE404(*(void *)(*(void *)v5 + 8) + 192, (uint64_t)a2) & 1) == 0)
  {
    sub_A0348("Error adding the vector with name '", (uint64_t)a2, "'.");
    unint64_t v7 = *(void *)(a1 + 392);
    if (v7 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v10) < 0) {
LABEL_14:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v10) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v10;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 392) = v7 + 24;
      *(void *)(a1 + 392) = v7 + 24;
      if (SHIBYTE(v10) < 0) {
        goto LABEL_14;
      }
    }
  }
}

void sub_A6338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 392) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A6360(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    uint64_t v61 = a1 + 104;
    int v62 = (char **)(a1 + 384);
    uint64_t v60 = a1 + 224;
    while (1)
    {
      uint64_t v65 = v2 + 16;
      int v6 = *(_DWORD *)(v2 + 48);
      uint64_t v63 = (uint64_t *)v2;
      if (v6 == 3) {
        break;
      }
      if (v6 == 1)
      {
        double v5 = sub_5C7E8(v3, v65);
        *(double *)(sub_AE814(v61, v65) + 24) = v5;
        goto LABEL_4;
      }
      sub_5A354(v2 + 40);
      sub_A0D30("Unexpected parameter type while parsing EV model JSON: ", v65, ": ", (uint64_t)__p);
      unint64_t v7 = *(void *)(v4 + 392);
      if (v7 >= *(void *)(v4 + 400))
      {
        *(void *)(v4 + 392) = sub_6E6EC(v62, (uint64_t)v69);
        if ((SHIBYTE(v70) & 0x80000000) == 0) {
          goto LABEL_75;
        }
      }
      else
      {
        if (SHIBYTE(v70) < 0)
        {
          sub_4200(*(unsigned char **)(v4 + 392), v69[0], (unint64_t)v69[1]);
        }
        else
        {
          long long v8 = *(_OWORD *)v69;
          *(void *)(v7 + 16) = v70;
          *(_OWORD *)unint64_t v7 = v8;
        }
        *(void *)(v4 + 392) = v7 + 24;
        *(void *)(v4 + 392) = v7 + 24;
        if ((SHIBYTE(v70) & 0x80000000) == 0)
        {
LABEL_75:
          if (SHIBYTE(v68) < 0) {
            goto LABEL_80;
          }
          goto LABEL_4;
        }
      }
      operator delete(v69[0]);
      if (SHIBYTE(v68) < 0) {
LABEL_80:
      }
        operator delete(__p[0]);
LABEL_4:
      uint64_t v2 = *v63;
      if (!*v63) {
        return;
      }
    }
    uint64_t v9 = (void *)sub_5C4AC(v3, v65);
    v69[0] = 0;
    v69[1] = 0;
    uint64_t v70 = 0;
    uint64_t v11 = (_DWORD *)*v9;
    uint64_t v10 = (_DWORD *)v9[1];
    for (i = v10; ; uint64_t v10 = i)
    {
      if (v11 == v10)
      {
        int v57 = (void **)(sub_AFBF0(v60, v65) + 24);
        if (v57 != v69) {
          sub_326C0(v57, (char *)v69[0], (char *)v69[1], ((char *)v69[1] - (char *)v69[0]) >> 3);
        }
        uint64_t v4 = a1;
        uint64_t v3 = a2;
        if (v69[0])
        {
          v69[1] = v69[0];
          operator delete(v69[0]);
        }
        goto LABEL_4;
      }
      int v13 = v11[2];
      if (v13 == 3) {
        break;
      }
      if (v13 == 1)
      {
        uint64_t v14 = *(void **)v11;
        uint64_t v15 = (char *)v69[1];
        if (v69[1] >= v70)
        {
          uint64_t v16 = (char *)v69[0];
          int64_t v17 = (char *)v69[1] - (char *)v69[0];
          int64_t v18 = ((char *)v69[1] - (char *)v69[0]) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v20 = v70 - (char *)v69[0];
          if ((v70 - (char *)v69[0]) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            if (v21 >> 61) {
              sub_188D718();
            }
            long long v22 = operator new(8 * v21);
            uint64_t v23 = &v22[8 * v18];
            *uint64_t v23 = v14;
            uint64_t v12 = v23 + 1;
            if (v15 == v16)
            {
LABEL_65:
              v69[0] = v23;
              v69[1] = v12;
              uint64_t v70 = &v22[8 * v21];
              if (v16) {
                operator delete(v16);
              }
              goto LABEL_12;
            }
          }
          else
          {
            long long v22 = 0;
            uint64_t v23 = (void *)(8 * v18);
            *(void *)(8 * v18) = v14;
            uint64_t v12 = (void *)(8 * v18 + 8);
            if (v15 == v16) {
              goto LABEL_65;
            }
          }
          unint64_t v48 = v15 - 8 - v16;
          if (v48 < 0x58) {
            goto LABEL_89;
          }
          if ((unint64_t)(v15 - &v22[v17]) < 0x20) {
            goto LABEL_89;
          }
          uint64_t v49 = (v48 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v51 = &v15[-v50];
          uint64_t v23 = (void *)((char *)v23 - v50);
          int v52 = &v22[8 * v18 - 16];
          uint64_t v53 = v15 - 16;
          uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *int v52 = v55;
            v52 -= 2;
            v53 -= 32;
            v54 -= 4;
          }
          while (v54);
          uint64_t v15 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_89:
            do
            {
              uint64_t v56 = *((void *)v15 - 1);
              v15 -= 8;
              *--uint64_t v23 = v56;
            }
            while (v15 != v16);
          }
          goto LABEL_65;
        }
        *(void *)v69[1] = v14;
        uint64_t v12 = v15 + 8;
LABEL_12:
        v69[1] = v12;
        goto LABEL_13;
      }
      sub_A0B48("Unexpected parameter type in array ", v65, " while parsing EV model JSON.");
      unint64_t v46 = *(void *)(a1 + 392);
      if (v46 >= *(void *)(a1 + 400))
      {
        *(void *)(a1 + 392) = sub_6E6EC(v62, (uint64_t)__p);
        if ((SHIBYTE(v68) & 0x80000000) == 0) {
          goto LABEL_13;
        }
LABEL_69:
        operator delete(__p[0]);
        goto LABEL_13;
      }
      if (SHIBYTE(v68) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v47 = *(_OWORD *)__p;
        *(void *)(v46 + 16) = v68;
        *(_OWORD *)unint64_t v46 = v47;
      }
      *(void *)(a1 + 392) = v46 + 24;
      *(void *)(a1 + 392) = v46 + 24;
      if (SHIBYTE(v68) < 0) {
        goto LABEL_69;
      }
LABEL_13:
      v11 += 4;
    }
    unint64_t v25 = **(uint64_t ***)v11;
    unint64_t v24 = *(uint64_t **)(*(void *)v11 + 8);
    while (1)
    {
      if (v25 == v24) {
        goto LABEL_13;
      }
      if (*((_DWORD *)v25 + 2) != 1)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v27 = *v25;
      BOOL v28 = (char *)v69[1];
      if (v69[1] < v70)
      {
        *(void *)v69[1] = v27;
        unint64_t v26 = v28 + 8;
        goto LABEL_30;
      }
      uint64_t v29 = (char *)v69[0];
      int64_t v30 = (char *)v69[1] - (char *)v69[0];
      int64_t v31 = ((char *)v69[1] - (char *)v69[0]) >> 3;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v33 = v70 - (char *)v69[0];
      if ((v70 - (char *)v69[0]) >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      unint64_t v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v32;
      if (v34) {
        break;
      }
      unint64_t v35 = 0;
      unint64_t v36 = (void *)(8 * v31);
      *(void *)(8 * v31) = v27;
      unint64_t v26 = (void *)(8 * v31 + 8);
      if (v28 != v29) {
        goto LABEL_45;
      }
LABEL_51:
      v69[0] = v36;
      v69[1] = v26;
      uint64_t v70 = &v35[8 * v34];
      if (v29) {
        operator delete(v29);
      }
LABEL_30:
      v69[1] = v26;
      v25 += 2;
    }
    if (v34 >> 61) {
      sub_188D718();
    }
    unint64_t v35 = operator new(8 * v34);
    unint64_t v36 = &v35[8 * v31];
    *unint64_t v36 = v27;
    unint64_t v26 = v36 + 1;
    if (v28 == v29) {
      goto LABEL_51;
    }
LABEL_45:
    unint64_t v37 = v28 - 8 - v29;
    if (v37 < 0x58) {
      goto LABEL_90;
    }
    if ((unint64_t)(v28 - &v35[v30]) < 0x20) {
      goto LABEL_90;
    }
    uint64_t v38 = (v37 >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v28[-v39];
    unint64_t v36 = (void *)((char *)v36 - v39);
    unint64_t v41 = &v35[8 * v31 - 16];
    unint64_t v42 = v28 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      *unint64_t v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    BOOL v28 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_90:
      do
      {
        uint64_t v45 = *((void *)v28 - 1);
        v28 -= 8;
        *--unint64_t v36 = v45;
      }
      while (v28 != v29);
    }
    goto LABEL_51;
  }
}

void sub_A68EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 392) = v29;
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_A6978(uint64_t a1)
{
  sub_A1BB0(*(void *)(a1 + 432) + 192);
  uint64_t v2 = *(void *)(a1 + 432);
  uint64_t v3 = (uint64_t **)(v2 + 232);
  uint64_t v4 = sub_ADE40(v2 + 232, (uint64_t)&word_2556218);
  if ((uint64_t *)(v2 + 240) != v4)
  {
    double v5 = v4;
    int v6 = (uint64_t *)v4[1];
    if (v6)
    {
      do
      {
        unint64_t v7 = v6;
        int v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      long long v8 = v4;
      do
      {
        unint64_t v7 = (uint64_t *)v8[2];
        BOOL v9 = *v7 == (void)v8;
        long long v8 = v7;
      }
      while (!v9);
    }
    if (*v3 == v4) {
      void *v3 = v7;
    }
    uint64_t v10 = *(uint64_t **)(v2 + 240);
    --*(void *)(v2 + 248);
    sub_B13A0(v10, v5);
    if (*((char *)v5 + 55) < 0) {
      operator delete((void *)v5[4]);
    }
    operator delete(v5);
  }
  uint64_t v11 = *(void *)(a1 + 432);
  uint64_t v14 = *(uint64_t **)(v11 + 208);
  int v13 = (void **)(v11 + 208);
  uint64_t v12 = v14;
  uint64_t v15 = &word_2556818;
  do
  {
    uint64_t v16 = sub_B0E28(v13, v12, (uint64_t)v15, (uint64_t)v15);
    int64_t v17 = (uint64_t *)v16[1];
    if (v17)
    {
      do
      {
        uint64_t v12 = v17;
        int64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v12 = (uint64_t *)v16[2];
        BOOL v9 = *v12 == (void)v16;
        uint64_t v16 = v12;
      }
      while (!v9);
    }
    v15 += 12;
  }
  while (v15 != &word_2556D88);
  uint64_t v18 = *(void *)(a1 + 432);
  unint64_t v19 = (uint64_t **)(v18 + 208);
  uint64_t v20 = sub_ADE40(v18 + 208, (uint64_t)&word_2556818);
  if ((uint64_t *)(v18 + 216) != v20)
  {
    unint64_t v21 = v20;
    long long v22 = (uint64_t *)v20[1];
    if (v22)
    {
      do
      {
        uint64_t v23 = v22;
        long long v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      unint64_t v24 = v20;
      do
      {
        uint64_t v23 = (uint64_t *)v24[2];
        BOOL v9 = *v23 == (void)v24;
        unint64_t v24 = v23;
      }
      while (!v9);
    }
    if (*v19 == v20) {
      uint64_t *v19 = v23;
    }
    unint64_t v25 = *(uint64_t **)(v18 + 216);
    --*(void *)(v18 + 224);
    sub_B13A0(v25, v21);
    if (*((char *)v21 + 55) < 0) {
      operator delete((void *)v21[4]);
    }
    operator delete(v21);
  }
  uint64_t v26 = *(void *)(a1 + 432);
  uint64_t v27 = (uint64_t **)(v26 + 208);
  uint64_t v28 = sub_ADE40(v26 + 208, (uint64_t)&word_2556B00);
  if ((uint64_t *)(v26 + 216) != v28)
  {
    uint64_t v29 = v28;
    int64_t v30 = (uint64_t *)v28[1];
    if (v30)
    {
      do
      {
        int64_t v31 = v30;
        int64_t v30 = (uint64_t *)*v30;
      }
      while (v30);
    }
    else
    {
      unint64_t v32 = v28;
      do
      {
        int64_t v31 = (uint64_t *)v32[2];
        BOOL v9 = *v31 == (void)v32;
        unint64_t v32 = v31;
      }
      while (!v9);
    }
    if (*v27 == v28) {
      uint64_t *v27 = v31;
    }
    uint64_t v33 = *(uint64_t **)(v26 + 216);
    --*(void *)(v26 + 224);
    sub_B13A0(v33, v29);
    if (*((char *)v29 + 55) < 0) {
      operator delete((void *)v29[4]);
    }
    operator delete(v29);
  }
  uint64_t v34 = *(void *)(a1 + 432);
  unint64_t v35 = (uint64_t **)(v34 + 208);
  unint64_t v36 = sub_ADE40(v34 + 208, (uint64_t)&word_2556B18);
  if ((uint64_t *)(v34 + 216) != v36)
  {
    unint64_t v37 = v36;
    uint64_t v38 = (uint64_t *)v36[1];
    if (v38)
    {
      do
      {
        uint64_t v39 = v38;
        uint64_t v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      uint64_t v40 = v36;
      do
      {
        uint64_t v39 = (uint64_t *)v40[2];
        BOOL v9 = *v39 == (void)v40;
        uint64_t v40 = v39;
      }
      while (!v9);
    }
    if (*v35 == v36) {
      *unint64_t v35 = v39;
    }
    unint64_t v41 = *(uint64_t **)(v34 + 216);
    --*(void *)(v34 + 224);
    sub_B13A0(v41, v37);
    if (*((char *)v37 + 55) < 0) {
      operator delete((void *)v37[4]);
    }
    operator delete(v37);
  }
  uint64_t v42 = *(void *)(a1 + 432);
  uint64_t v43 = (uint64_t **)(v42 + 208);
  long long v44 = sub_ADE40(v42 + 208, (uint64_t)&word_2556C20);
  if ((uint64_t *)(v42 + 216) != v44)
  {
    uint64_t v45 = v44;
    unint64_t v46 = (uint64_t *)v44[1];
    if (v46)
    {
      do
      {
        long long v47 = v46;
        unint64_t v46 = (uint64_t *)*v46;
      }
      while (v46);
    }
    else
    {
      unint64_t v48 = v44;
      do
      {
        long long v47 = (uint64_t *)v48[2];
        BOOL v9 = *v47 == (void)v48;
        unint64_t v48 = v47;
      }
      while (!v9);
    }
    if (*v43 == v44) {
      *uint64_t v43 = v47;
    }
    uint64_t v49 = *(uint64_t **)(v42 + 216);
    --*(void *)(v42 + 224);
    sub_B13A0(v49, v45);
    if (*((char *)v45 + 55) < 0) {
      operator delete((void *)v45[4]);
    }
    operator delete(v45);
  }
  uint64_t v50 = *(void *)(a1 + 432);
  uint64_t v51 = (uint64_t **)(v50 + 208);
  int v52 = sub_ADE40(v50 + 208, (uint64_t)&word_2556920);
  if ((uint64_t *)(v50 + 216) != v52)
  {
    uint64_t v53 = v52;
    uint64_t v54 = (uint64_t *)v52[1];
    if (v54)
    {
      do
      {
        long long v55 = v54;
        uint64_t v54 = (uint64_t *)*v54;
      }
      while (v54);
    }
    else
    {
      uint64_t v56 = v52;
      do
      {
        long long v55 = (uint64_t *)v56[2];
        BOOL v9 = *v55 == (void)v56;
        uint64_t v56 = v55;
      }
      while (!v9);
    }
    if (*v51 == v52) {
      *uint64_t v51 = v55;
    }
    int v57 = *(uint64_t **)(v50 + 216);
    --*(void *)(v50 + 224);
    sub_B13A0(v57, v53);
    if (*((char *)v53 + 55) < 0) {
      operator delete((void *)v53[4]);
    }
    operator delete(v53);
  }
  sub_A1D30(*(void *)(a1 + 432) + 192);
  sub_B1764(*(void *)(a1 + 432) + 280, (uint64_t)&word_25562D8, (uint64_t)&word_25562D8);
  sub_B1764(*(void *)(a1 + 432) + 280, (uint64_t)&word_25562F0, (uint64_t)&word_25562F0);
  sub_B1764(*(void *)(a1 + 432) + 304, (uint64_t)&word_2556380, (uint64_t)&word_2556380);
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "battery_min_energy_wh");
  uint64_t v58 = *(void *)(a1 + 8);
  *(void *)(sub_AE814(a1 + 104, (uint64_t)__p) + 24) = v58;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "battery_max_energy_wh");
  uint64_t v59 = *(void *)(a1 + 16);
  *(void *)(sub_AE814(a1 + 104, (uint64_t)__p) + 24) = v59;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "trip_elapsed_time_s");
  sub_A6000(a1, (uint64_t *)__p, a1 + 24);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "road_ambient_temperature_c");
  sub_A6000(a1, (uint64_t *)__p, a1 + 32);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "battery_current_energy_wh");
  sub_A6000(a1, (uint64_t *)__p, a1 + 40);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "battery_current_soc_percentage");
  sub_A6000(a1, (uint64_t *)__p, a1 + 48);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v60 = *(char **)(a1 + 216);
  uint64_t v61 = &v60[32 * *(void *)(a1 + 176)];
  __p[0] = (void *)(a1 + 104);
  __p[1] = v60;
  __p[2] = v61;
  sub_AFAA8(__p);
  uint64_t v62 = *(void *)(a1 + 216) + 32 * *(void *)(a1 + 176);
  uint64_t v85 = a1 + 104;
  long long v86 = (void *)v62;
  uint64_t v87 = v62;
  sub_AFAA8(&v85);
  for (uint64_t i = (uint64_t *)__p[1]; __p[1] != v86; uint64_t i = (uint64_t *)__p[1])
  {
    if ((sub_A1F70(*(void *)(a1 + 432), i, i + 3) & 1) == 0)
    {
      sub_A20FC("Error adding constant with name '", (uint64_t)i, "' and value ", (uint64_t)(i + 3), ".");
      unint64_t v64 = *(void *)(a1 + 392);
      if (v64 < *(void *)(a1 + 400))
      {
        if (SHIBYTE(v84) < 0)
        {
          sub_4200(*(unsigned char **)(a1 + 392), v83[0], (unint64_t)v83[1]);
        }
        else
        {
          long long v65 = *(_OWORD *)v83;
          *(void *)(v64 + 16) = v84;
          *(_OWORD *)unint64_t v64 = v65;
        }
        *(void *)(a1 + 392) = v64 + 24;
        *(void *)(a1 + 392) = v64 + 24;
        if ((SHIBYTE(v84) & 0x80000000) == 0) {
          goto LABEL_95;
        }
LABEL_104:
        operator delete(v83[0]);
        goto LABEL_95;
      }
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)v83);
      if (SHIBYTE(v84) < 0) {
        goto LABEL_104;
      }
    }
LABEL_95:
    __p[1] = (char *)__p[1] + 32;
    sub_AFAA8(__p);
  }
  uint64_t v66 = *(char **)(a1 + 352);
  uint64_t v67 = &v66[48 * *(void *)(a1 + 296)];
  __p[0] = (void *)(a1 + 224);
  __p[1] = v66;
  __p[2] = v67;
  sub_B0CE0(__p);
  uint64_t v68 = *(void *)(a1 + 352) + 48 * *(void *)(a1 + 296);
  uint64_t v85 = a1 + 224;
  long long v86 = (void *)v68;
  uint64_t v87 = v68;
  sub_B0CE0(&v85);
  uint64_t v69 = (uint64_t *)__p[1];
  if (__p[1] != v86)
  {
    while (1)
    {
      uint64_t v70 = *(void *)(a1 + 432);
      if (*(void *)v70
        && *(void *)(*(void *)v70 + 8)
        && sub_AD9E4(*(void *)(a1 + 432), v69, 1)
        && (sub_ADC14(v70, (uint64_t)v69, 1) & 1) == 0
        && v69[4] != v69[3]
        && (sub_AE404(*(void *)(*(void *)v70 + 8) + 192, (uint64_t)v69) & 1) != 0)
      {
        goto LABEL_107;
      }
      sub_A2318("Error adding vector with name '", (uint64_t)v69, "'.");
      unint64_t v71 = *(void *)(a1 + 392);
      if (v71 < *(void *)(a1 + 400)) {
        break;
      }
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)v83);
      if (SHIBYTE(v84) < 0) {
        goto LABEL_121;
      }
LABEL_107:
      __p[1] = (char *)__p[1] + 48;
      sub_B0CE0(__p);
      uint64_t v69 = (uint64_t *)__p[1];
      if (__p[1] == v86) {
        goto LABEL_122;
      }
    }
    if (SHIBYTE(v84) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 392), v83[0], (unint64_t)v83[1]);
    }
    else
    {
      long long v72 = *(_OWORD *)v83;
      *(void *)(v71 + 16) = v84;
      *(_OWORD *)unint64_t v71 = v72;
    }
    *(void *)(a1 + 392) = v71 + 24;
    *(void *)(a1 + 392) = v71 + 24;
    if ((SHIBYTE(v84) & 0x80000000) == 0) {
      goto LABEL_107;
    }
LABEL_121:
    operator delete(v83[0]);
    goto LABEL_107;
  }
LABEL_122:
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "curve_fit");
  sub_A7580(a1, (uint64_t *)__p, *(void *)(a1 + 432) + 1600);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "curve_lookup");
  sub_A7680(a1, (uint64_t *)__p, *(void *)(a1 + 432) + 1672);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_2d");
  sub_A7680(a1, (uint64_t *)__p, *(void *)(a1 + 432) + 1672);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_3d");
  sub_A7680(a1, (uint64_t *)__p, *(void *)(a1 + 432) + 1672);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "curve_lookup_Nd");
  sub_A7680(a1, (uint64_t *)__p, *(void *)(a1 + 432) + 1672);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "percentage_to_energy_wh");
  sub_A7780(a1, __p, *(void *)(a1 + 432) + 1752);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_A28A0(*(void *)(a1 + 432));
  uint64_t v73 = *(void *)(a1 + 432);
  *(_WORD *)(v73 + 480) = 257;
  sub_2F020(v73 + 304, *(char **)(v73 + 312));
  *(void *)(v73 + 312) = 0;
  *(void *)(v73 + 320) = 0;
  *(void *)(v73 + 304) = v73 + 312;
  size_t v74 = *(void **)(a1 + 432);
  __darwin_ct_rune_t v75 = (char *)v74[27];
  v74 += 27;
  sub_2F020((uint64_t)(v74 - 1), v75);
  *(v74 - 1) = v74;
  *size_t v74 = 0;
  v74[1] = 0;
  uint64_t v76 = *(void *)(a1 + 432);
  char v77 = *(void **)(v76 + 1552);
  if ((unint64_t)v77 >= *(void *)(v76 + 1560))
  {
    *(void *)(v76 + 1552) = sub_B1858((uint64_t ***)(v76 + 1544), *(void ***)(a1 + 432));
    int v79 = *(void ***)(a1 + 432);
    uint64_t v80 = *(void **)(v76 + 1584);
    if ((unint64_t)v80 >= *(void *)(v76 + 1592)) {
      goto LABEL_136;
    }
LABEL_138:
    long long v82 = *v79;
    *uint64_t v80 = *v79;
    uint64_t result = (uint64_t **)(v80 + 1);
    ++*v82;
    goto LABEL_139;
  }
  uint64_t v78 = *(void **)v76;
  *char v77 = *(void *)v76;
  ++*v78;
  *(void *)(v76 + 1552) = v77 + 1;
  int v79 = *(void ***)(a1 + 432);
  uint64_t v80 = *(void **)(v76 + 1584);
  if ((unint64_t)v80 < *(void *)(v76 + 1592)) {
    goto LABEL_138;
  }
LABEL_136:
  uint64_t result = sub_B1858((uint64_t ***)(v76 + 1576), v79);
LABEL_139:
  *(void *)(v76 + 1584) = result;
  return result;
}

void sub_A7508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A7580(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_A8A24(*(void *)(a1 + 432), a2, a3) & 1) == 0)
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v5 = *(void *)(a1 + 392);
    if (v5 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v8) < 0) {
LABEL_9:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v8;
        *(_OWORD *)unint64_t v5 = v6;
      }
      *(void *)(a1 + 392) = v5 + 24;
      *(void *)(a1 + 392) = v5 + 24;
      if (SHIBYTE(v8) < 0) {
        goto LABEL_9;
      }
    }
  }
}

void sub_A7658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 392) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A7680(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_A8A24(*(void *)(a1 + 432), a2, a3) & 1) == 0)
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v5 = *(void *)(a1 + 392);
    if (v5 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v8) < 0) {
LABEL_9:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v8;
        *(_OWORD *)unint64_t v5 = v6;
      }
      *(void *)(a1 + 392) = v5 + 24;
      *(void *)(a1 + 392) = v5 + 24;
      if (SHIBYTE(v8) < 0) {
        goto LABEL_9;
      }
    }
  }
}

void sub_A7758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 392) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A7780(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 432);
  if (*(void *)v5
    && *(void *)(*(void *)v5 + 8)
    && sub_AD9E4(*(void *)(a1 + 432), (uint64_t *)a2, 1)
    && (sub_ADC14(v5, (uint64_t)a2, 1) & 1) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)v5 + 8);
    if ((uint64_t *)(v9 + 40) == sub_ADE40(v9 + 32, (uint64_t)a2))
    {
      __p[0] = a2;
      uint64_t v10 = sub_285AA4(v9 + 32, (uint64_t)a2, (uint64_t)&unk_20F06E0, (long long **)__p);
      v10[56] = 0;
      *((void *)v10 + 8) = a3;
      ++*(void *)(v9 + 56);
    }
  }
  else
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v7 = *(void *)(a1 + 392);
    if (v7 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v12) < 0) {
LABEL_12:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v12;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 392) = v7 + 24;
      *(void *)(a1 + 392) = v7 + 24;
      if (SHIBYTE(v12) < 0) {
        goto LABEL_12;
      }
    }
  }
}

void sub_A78F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 392) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A7920(uint64_t a1)
{
  sub_A6978(a1);
  uint64_t v2 = *(void *)(a1 + 432);
  if (sub_A2C58(v2 + 8, a1 + 56, v2 + 1536)) {
    goto LABEL_12;
  }
  uint64_t v3 = *(void **)(a1 + 432);
  if (v3[75])
  {
    unint64_t v4 = *(void *)(v3[71] + 8 * (v3[74] / 0x1EuLL)) + 136 * (v3[74] % 0x1EuLL);
    if (*(char *)(v4 + 71) < 0)
    {
      sub_4200(v13, *(void **)(v4 + 48), *(void *)(v4 + 56));
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 48);
      uint64_t v14 = *(void *)(v4 + 64);
      *(_OWORD *)int v13 = v5;
    }
  }
  else
  {
    HIBYTE(v14) = 8;
    strcpy((char *)v13, "No Error");
  }
  sub_A3898("Error parsing the formula: ", (uint64_t)v13, ".");
  unint64_t v6 = *(void *)(a1 + 392);
  if (v6 >= *(void *)(a1 + 400))
  {
    *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
    if (SHIBYTE(v16) < 0) {
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  if (SHIBYTE(v16) < 0)
  {
    sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    *(void *)(v6 + 16) = v16;
    *(_OWORD *)unint64_t v6 = v7;
  }
  *(void *)(a1 + 392) = v6 + 24;
  *(void *)(a1 + 392) = v6 + 24;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_11:
    if (SHIBYTE(v14) < 0) {
      goto LABEL_27;
    }
LABEL_12:
    if (sub_A2C58(*(void *)(a1 + 432) + 8, a1 + 80, v2 + 1568)) {
      return;
    }
LABEL_13:
    long long v8 = *(void **)(a1 + 432);
    if (v8[75])
    {
      unint64_t v9 = *(void *)(v8[71] + 8 * (v8[74] / 0x1EuLL)) + 136 * (v8[74] % 0x1EuLL);
      if (*(char *)(v9 + 71) < 0)
      {
        sub_4200(v13, *(void **)(v9 + 48), *(void *)(v9 + 56));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 48);
        uint64_t v14 = *(void *)(v9 + 64);
        *(_OWORD *)int v13 = v10;
      }
    }
    else
    {
      HIBYTE(v14) = 8;
      strcpy((char *)v13, "No Error");
    }
    sub_A3898("Error parsing the formula: ", (uint64_t)v13, ".");
    unint64_t v11 = *(void *)(a1 + 392);
    if (v11 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v16) < 0) {
        goto LABEL_31;
      }
    }
    else
    {
      if (SHIBYTE(v16) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v12 = *(_OWORD *)__p;
        *(void *)(v11 + 16) = v16;
        *(_OWORD *)unint64_t v11 = v12;
      }
      *(void *)(a1 + 392) = v11 + 24;
      *(void *)(a1 + 392) = v11 + 24;
      if (SHIBYTE(v16) < 0)
      {
LABEL_31:
        operator delete(__p[0]);
        if ((SHIBYTE(v14) & 0x80000000) == 0) {
          return;
        }
LABEL_32:
        operator delete(v13[0]);
        return;
      }
    }
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_32;
  }
LABEL_26:
  operator delete(__p[0]);
  if ((SHIBYTE(v14) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_27:
  operator delete(v13[0]);
  if ((sub_A2C58(*(void *)(a1 + 432) + 8, a1 + 80, v2 + 1568) & 1) == 0) {
    goto LABEL_13;
  }
}

void sub_A7C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 392) = v21;
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A7C58(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 432) + 32 * a2 + 1536) + 8) + 16))();
}

double sub_A7C90(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if (v3 != 72)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    sub_A3F00("Custom function curve_fit() called with wrong number of parameters: Expected 3, got ", (uint64_t)&v46, ".");
    unint64_t v15 = *(void *)(v14 + 32);
    if (v15 < *(void *)(v14 + 40))
    {
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_4200(*(unsigned char **)(v14 + 32), *(void **)__p, *(unint64_t *)&__p[8]);
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    uint64_t v18 = sub_6E6EC((char **)(v14 + 24), (uint64_t)__p);
LABEL_24:
    *(void *)(v14 + 32) = v18;
    if ((__p[23] & 0x80000000) == 0) {
      return 0.0;
    }
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  if (v4 != *(void *)(v2 + 32))
  {
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v45 = *(void *)(v2 + 32);
    unint64_t v46 = v4;
    sub_A40D4("Custom function curve_fit() expects the first and second argument to be vectors of equal size, got vectors of size ", (uint64_t)&v46, " and ", (uint64_t)&v45, " instead.");
    unint64_t v15 = *(void *)(v14 + 32);
    if (v15 < *(void *)(v14 + 40))
    {
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_4200(*(unsigned char **)(v14 + 32), *(void **)__p, *(unint64_t *)&__p[8]);
LABEL_17:
        *(void *)(v14 + 32) = v15 + 24;
        *(void *)(v14 + 32) = v15 + 24;
        if ((__p[23] & 0x80000000) == 0) {
          return 0.0;
        }
LABEL_25:
        operator delete(*(void **)__p);
        return 0.0;
      }
LABEL_16:
      long long v16 = *(_OWORD *)__p;
      *(void *)(v15 + 16) = *(void *)&__p[16];
      *(_OWORD *)unint64_t v15 = v16;
      goto LABEL_17;
    }
    uint64_t v18 = sub_6E6EC((char **)(v14 + 24), (uint64_t)__p);
    goto LABEL_24;
  }
  long long v5 = *(double **)v2;
  uint64_t v6 = *(void *)(v2 + 24);
  long long v7 = *(double **)v2;
  if (v4)
  {
    uint64_t v8 = 8 * v4 - 8;
    unint64_t v9 = *(double **)v2;
    while (v8)
    {
      long long v7 = v9 + 1;
      v8 -= 8;
      _NF = v9[1] < *v9;
      ++v9;
      if (_NF) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v7 != &v5[v4])
    {
      uint64_t v11 = *(void *)(a1 + 64);
      long long v12 = (char *)operator new(0x88uLL);
      *(void *)long long __p = v12;
      *(_OWORD *)&__p[8] = xmmword_20B9970;
      strcpy(v12, "Custom function curve_fit() called on an x-range (first argument) that does not have its values sorted in (strictly) increasing order.");
      unint64_t v13 = *(void *)(v11 + 32);
      if (v13 >= *(void *)(v11 + 40))
      {
        uint64_t v38 = sub_6E6EC((char **)(v11 + 24), (uint64_t)__p);
        int v39 = __p[23];
        *(void *)(v11 + 32) = v38;
        if ((v39 & 0x80000000) == 0) {
          return 0.0;
        }
      }
      else
      {
        sub_4200(*(unsigned char **)(v11 + 32), v12, 0x86uLL);
        *(void *)(v11 + 32) = v13 + 24;
      }
      operator delete(*(void **)__p);
      return 0.0;
    }
  }
  if ((unint64_t)v4 <= 1)
  {
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v20 = (char *)operator new(0x58uLL);
    *(void *)long long __p = v20;
    *(_OWORD *)&__p[8] = xmmword_20B9980;
    strcpy(v20, "Custom function curve_fit() called on input ranges consisting of less than 2 values.");
    unint64_t v21 = *(void *)(v19 + 8);
    if (v21 >= *(void *)(v19 + 16))
    {
      uint64_t v40 = sub_6E6EC((char **)v19, (uint64_t)__p);
      int v41 = __p[23];
      *(void *)(v19 + 8) = v40;
      if ((v41 & 0x80000000) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      sub_4200(*(unsigned char **)(v19 + 8), v20, 0x54uLL);
      *(void *)(v19 + 8) = v21 + 24;
    }
    operator delete(*(void **)__p);
LABEL_39:
    if (*(void *)(v2 + 32)) {
      return *(double *)v6;
    }
    return 0.0;
  }
  long long v22 = *(double **)(v2 + 48);
  double v23 = *v22;
  if (*v22 <= *v5) {
    return *(double *)v6;
  }
  unint64_t v24 = v4 - 1;
  if (v4 < 1)
  {
    unint64_t v37 = *(double **)v2;
  }
  else
  {
    unint64_t v25 = v4 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v26 = *(double **)v2;
    do
    {
      unint64_t v27 = (2 * v25) & 0xFFFFFFFFFFFFFFF8;
      _X14 = (char *)v26 + v27;
      __asm { PRFM            #0, [X14] }
      uint64_t v33 = &v26[v25 >> 1];
      _X13 = (char *)v33 + v27;
      __asm { PRFM            #0, [X13] }
      if (*v33 >= v23) {
        unint64_t v36 = 0;
      }
      else {
        unint64_t v36 = v25 >> 1;
      }
      v26 += v36;
      v25 -= v25 >> 1;
    }
    while ((uint64_t)v25 > 1);
    unint64_t v37 = &v26[*v26 < v23];
  }
  unint64_t v42 = v37 - v5;
  if (v24 < v42) {
    unint64_t v42 = v24;
  }
  uint64_t v43 = v42;
  double v44 = (v23 - v5[v43 - 1]) / (v5[v43] - v5[v43 - 1]);
  return *(double *)(v6 + v43 * 8) * v44 + *(double *)(v6 + v43 * 8 - 8) * (1.0 - v44);
}

void sub_A807C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A80D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  unint64_t v5 = v4 >> 1;
  uint64_t v6 = *(void **)(*a2 + 24 * (v4 >> 1));
  if (**(unsigned char **)(a1 + 72))
  {
    uint64_t v7 = *(void *)(v3 + 24 * v5 + 8);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a1 + 64);
      unint64_t v9 = operator new(0x50uLL);
      long long __p = v9;
      long long v61 = xmmword_20B99B0;
      strcpy((char *)v9, "Custom function curve_lookup_Nd() called on an empty vector of y-values.");
      unint64_t v10 = *(void *)(v8 + 8);
      if (v10 < *(void *)(v8 + 16))
      {
        sub_4200(*(unsigned char **)(v8 + 8), v9, 0x48uLL);
        *(void *)(v8 + 8) = v10 + 24;
LABEL_44:
        operator delete(__p);
        return 0.0;
      }
      unint64_t v13 = sub_6E6EC((char **)v8, (uint64_t)&__p);
      int v14 = SHIBYTE(v61);
      *(void *)(v8 + 8) = v13;
      if (v14 < 0) {
        goto LABEL_44;
      }
      return 0.0;
    }
    if (v4 < 2)
    {
      if (v7 != 1) {
        goto LABEL_37;
      }
      return *(double *)v6;
    }
    if (v4 >= 4)
    {
      uint64_t v11 = v5 & 0x7FFFFFFFFFFFFFFELL;
      unint64_t v15 = (uint64_t *)(v3 + 32);
      uint64_t v16 = 1;
      uint64_t v17 = v5 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v18 = 1;
      do
      {
        uint64_t v19 = *(v15 - 3);
        uint64_t v20 = *v15;
        v15 += 6;
        v16 *= v19;
        v18 *= v20;
        v17 -= 2;
      }
      while (v17);
      uint64_t v12 = v18 * v16;
      if (v5 == v11)
      {
LABEL_17:
        if (v12 == v7)
        {
          unint64_t v24 = (uint64_t *)(v3 + 8);
          unint64_t v25 = v4 >> 1;
          while (1)
          {
            uint64_t v26 = *v24;
            v24 += 3;
            if (!v26) {
              break;
            }
            if (!--v25) {
              goto LABEL_21;
            }
          }
          uint64_t v52 = *(void *)(a1 + 64);
          long long v55 = operator new(0x50uLL);
          long long __p = v55;
          long long v61 = xmmword_20B9990;
          strcpy((char *)v55, "Custom function curve_lookup_Nd() should not have size 0 input bounds vectors.");
          unint64_t v54 = *(void *)(v52 + 32);
          if (v54 < *(void *)(v52 + 40))
          {
            sub_4200(*(unsigned char **)(v52 + 32), v55, 0x4EuLL);
            goto LABEL_42;
          }
          goto LABEL_43;
        }
LABEL_37:
        uint64_t v52 = *(void *)(a1 + 64);
        uint64_t v53 = operator new(0x78uLL);
        long long __p = v53;
        long long v61 = xmmword_20B99A0;
        strcpy((char *)v53, "Custom function curve_lookup_Nd() expects that the size of the lookup table is the multiple of the input bounds sizes");
        unint64_t v54 = *(void *)(v52 + 32);
        if (v54 < *(void *)(v52 + 40))
        {
          sub_4200(*(unsigned char **)(v52 + 32), v53, 0x75uLL);
LABEL_42:
          *(void *)(v52 + 32) = v54 + 24;
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v56 = sub_6E6EC((char **)(v52 + 24), (uint64_t)&__p);
        int v57 = SHIBYTE(v61);
        *(void *)(v52 + 32) = v56;
        if (v57 < 0) {
          goto LABEL_44;
        }
        return 0.0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 1;
    }
    unint64_t v21 = v5 - v11;
    long long v22 = (uint64_t *)(v3 + 24 * v11 + 8);
    do
    {
      uint64_t v23 = *v22;
      v22 += 3;
      v12 *= v23;
      --v21;
    }
    while (v21);
    goto LABEL_17;
  }
LABEL_21:
  long long __p = 0;
  long long v61 = 0uLL;
  if (v4 < 2) {
    return *(double *)v6;
  }
  uint64_t v28 = 0;
  do
  {
    uint64_t v29 = (double **)(*a2 + 24 * v28);
    int64_t v30 = *v29;
    uint64_t v31 = 8 * (void)v29[1] - 8;
    unint64_t v32 = v30;
    if (v31 >= 8)
    {
      double v33 = **(double **)(*a2 + 24 * (v5 + 1 + v28));
      if (v31 == 8)
      {
        uint64_t v34 = v30;
      }
      else
      {
        unint64_t v35 = (unint64_t)v31 >> 3;
        uint64_t v34 = v30;
        do
        {
          unint64_t v36 = (2 * v35) & 0xFFFFFFFFFFFFFFF8;
          _X13 = (char *)v34 + v36;
          __asm { PRFM            #0, [X13] }
          uint64_t v43 = &v34[v35 >> 1];
          _X12 = (char *)v43 + v36;
          __asm { PRFM            #0, [X12] }
          if (*v43 >= v33) {
            unint64_t v46 = 0;
          }
          else {
            unint64_t v46 = v35 >> 1;
          }
          v34 += v46;
          v35 -= v35 >> 1;
        }
        while ((uint64_t)v35 > 1);
      }
      unint64_t v32 = &v34[*v34 < v33];
    }
    uint64_t v59 = v32 - v30;
    sub_A4710((uint64_t)&__p, &v59);
    ++v28;
  }
  while (v28 != v5);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = (uint64_t *)(*a2 + 8);
  uint64_t v50 = 1;
  do
  {
    v48 += *((void *)__p + v47) * v50;
    uint64_t v51 = *v49;
    v49 += 3;
    v50 *= v51;
    ++v47;
  }
  while (v5 != v47);
  double v27 = *(double *)&v6[v48];
  *(void *)&long long v61 = __p;
  operator delete(__p);
  return v27;
}

void sub_A84B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A850C(uint64_t a1, double *a2)
{
  double v4 = *a2;
  if (*a2 < -0.00001 || v4 > 100.00001)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    sub_A49C0("Input parameter to custom function percentage_to_energy_wh() is expected to be a percentage in the range [0, 100], got ", (uint64_t)a2, ".");
    unint64_t v6 = *(void *)(v5 + 8);
    if (v6 >= *(void *)(v5 + 16))
    {
      *(void *)(v5 + 8) = sub_6E6EC((char **)v5, (uint64_t)__p);
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
LABEL_7:
        double v4 = *a2;
        goto LABEL_8;
      }
    }
    else
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_4200(*(unsigned char **)(v5 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v7 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v13;
        *(_OWORD *)unint64_t v6 = v7;
      }
      *(void *)(v5 + 8) = v6 + 24;
      *(void *)(v5 + 8) = v6 + 24;
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    operator delete(__p[0]);
    goto LABEL_7;
  }
LABEL_8:
  if (v4 > 100.0) {
    double v4 = 100.0;
  }
  double v8 = v4 / 100.0;
  BOOL v9 = v4 <= 0.0;
  double v10 = 0.0;
  if (!v9) {
    double v10 = v8;
  }
  return **(double **)(a1 + 40) + v10 * (**(double **)(a1 + 48) - **(double **)(a1 + 40));
}

void sub_A862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A8654()
{
}

void sub_A88B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12)
{
  if (*v14) {
    sub_20A678C(*v14, v14);
  }
  sub_20A6710((uint64_t)v12, a1, a2, (uint64_t)&a12);
  uint64_t v17 = a12;
  sub_285354(v13);
  sub_285120(v12);
  _Unwind_Resume(v17);
}

void sub_A8904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_A4E60((char **)va);
  sub_285120(v4);
  _Unwind_Resume(a1);
}

void sub_A8920()
{
}

uint64_t sub_A8964(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = off_23FE588;
  if (*(char *)(result + 55) < 0)
  {
    operator delete(*(void **)(result + 32));
    return v1;
  }
  return result;
}

uint64_t sub_A89C4(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)uint64_t result = off_23FE588;
  if (*(char *)(result + 55) < 0)
  {
    operator delete(*(void **)(result + 32));
    return v1;
  }
  return result;
}

uint64_t sub_A8A24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!*(void *)a1
    || !*(void *)(*(void *)a1 + 8)
    || !sub_AD9E4(a1, a2, 1)
    || (sub_ADC14(a1, (uint64_t)a2, 1) & 1) != 0)
  {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a3 + 56);
  if (v7 <= 1)
  {
    int v8 = *(char *)(a3 + 55);
    if (v8 >= 0) {
      uint64_t v9 = a3 + 32;
    }
    else {
      uint64_t v9 = *(void *)(a3 + 32);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 55);
    }
    else {
      uint64_t v10 = *(void *)(a3 + 40);
    }
    if (!v10) {
      goto LABEL_34;
    }
    uint64_t v11 = 0;
    while (memchr("STVZ*?|", *(char *)(v9 + v11), 7uLL))
    {
      if (v10 == ++v11) {
        goto LABEL_19;
      }
    }
    if (v11 != -1) {
      return 0;
    }
  }
LABEL_19:
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_37;
    }
    if (v7 != 2) {
      return 0;
    }
    int v12 = *(char *)(a3 + 55);
    if (v12 >= 0) {
      uint64_t v13 = a3 + 32;
    }
    else {
      uint64_t v13 = *(void *)(a3 + 32);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a3 + 55);
    }
    else {
      uint64_t v14 = *(void *)(a3 + 40);
    }
    if (!v14)
    {
LABEL_38:
      uint64_t v16 = *(void *)(*(void *)a1 + 8) + 160;
      goto LABEL_39;
    }
    uint64_t v15 = 0;
    while (memchr("STVZ*?|:", *(char *)(v13 + v15), 8uLL))
    {
      if (v14 == ++v15) {
        goto LABEL_34;
      }
    }
    if (v15 != -1) {
      return 0;
    }
LABEL_34:
    if (v7 != 2)
    {
      if (v7 != 1) {
        goto LABEL_36;
      }
LABEL_37:
      uint64_t v16 = *(void *)(*(void *)a1 + 8) + 128;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_36:
  uint64_t v16 = *(void *)(*(void *)a1 + 8) + 96;
LABEL_39:

  return sub_285908(v16, (long long *)a2, a3, 0);
}

uint64_t sub_A8BE4(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_A8DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A8DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A8DCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((sub_A8A24(*(void *)(a1 + 432), a2, a3) & 1) == 0)
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v5 = *(void *)(a1 + 392);
    if (v5 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v8) < 0) {
LABEL_9:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v8;
        *(_OWORD *)unint64_t v5 = v6;
      }
      *(void *)(a1 + 392) = v5 + 24;
      *(void *)(a1 + 392) = v5 + 24;
      if (SHIBYTE(v8) < 0) {
        goto LABEL_9;
      }
    }
  }
}

void sub_A8EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 392) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A8ECC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 432);
  if (*(void *)v5
    && *(void *)(*(void *)v5 + 8)
    && sub_AD9E4(*(void *)(a1 + 432), (uint64_t *)a2, 1)
    && (sub_ADC14(v5, (uint64_t)a2, 1) & 1) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)v5 + 8);
    if ((uint64_t *)(v9 + 40) == sub_ADE40(v9 + 32, (uint64_t)a2))
    {
      __p[0] = a2;
      size_t v10 = sub_285AA4(v9 + 32, (uint64_t)a2, (uint64_t)&unk_20F06E0, (long long **)__p);
      v10[56] = 0;
      *((void *)v10 + 8) = a3;
      ++*(void *)(v9 + 56);
    }
  }
  else
  {
    sub_A8BE4("Error adding function with name '", (uint64_t)a2, "'.");
    unint64_t v7 = *(void *)(a1 + 392);
    if (v7 >= *(void *)(a1 + 400))
    {
      *(void *)(a1 + 392) = sub_6E6EC((char **)(a1 + 384), (uint64_t)__p);
      if (SHIBYTE(v12) < 0) {
LABEL_12:
      }
        operator delete(__p[0]);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 392), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v12;
        *(_OWORD *)unint64_t v7 = v8;
      }
      *(void *)(a1 + 392) = v7 + 24;
      *(void *)(a1 + 392) = v7 + 24;
      if (SHIBYTE(v12) < 0) {
        goto LABEL_12;
      }
    }
  }
}

void sub_A9044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 392) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A906C(uint64_t a1)
{
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_A90DC(uint64_t a1)
{
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_A9150()
{
}

void sub_A9164(uint64_t a1)
{
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_A91D4(uint64_t a1)
{
  *(void *)a1 = off_23FE588;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_A9248()
{
}

uint64_t sub_A925C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(a1 + 128);
        uint64_t v6 = v5 + v4;
        unint64_t v7 = *(void **)(v5 + v4 + 24);
        if (v7)
        {
          *(void *)(v6 + 32) = v7;
          operator delete(v7);
        }
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)(v5 + v4));
        }
        v4 += 48;
        --v3;
      }
      while (v3);
      uint64_t v2 = *(void **)(a1 + 128);
    }
    free(v2);
  }
  long long v8 = *(void **)(a1 + 104);
  if (v8)
  {
    *(void *)(a1 + 112) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_A9338(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_A938C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_A9448(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  operator new();
}

void sub_A9514(_Unwind_Exception *a1)
{
  sub_A95BC((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void **sub_A9528(void **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *result;
    if (v2)
    {
      if ((*v2)-- == 1)
      {
        sub_A9618(v2);
        operator delete();
      }
    }
    operator new();
  }
  return result;
}

void **sub_A95BC(void **a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t **)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_285120(v3 - 1);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_A9618(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2
    && (*(unsigned int (**)(void))(*(void *)v2 + 32))(a1[1]) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2) != 18)
  {
    uint64_t v3 = a1[1];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    a1[1] = 0;
  }
  uint64_t v4 = (char *)a1[2];
  if (v4 != (char *)a1[3])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (2)
    {
      int v7 = &v4[v5];
      switch(*(_DWORD *)&v4[v5 + 8])
      {
        case 1:
          if (*(void *)v7) {
            (*(void (**)(void))(**(void **)v7 + 8))(*(void *)v7);
          }
          goto LABEL_10;
        case 2:
          if (*(void *)v7) {
            goto LABEL_9;
          }
          goto LABEL_10;
        case 3:
          if (*(void *)v7) {
            goto LABEL_9;
          }
          goto LABEL_10;
        case 4:
          if (*(void *)v7) {
            operator delete[]();
          }
          goto LABEL_10;
        case 5:
          uint64_t v8 = *(void *)v7;
          if (!*(void *)v7) {
            goto LABEL_10;
          }
          if (*(char *)(v8 + 23) < 0) {
            operator delete(*(void **)v8);
          }
LABEL_9:
          operator delete();
        default:
LABEL_10:
          ++v6;
          uint64_t v4 = (char *)a1[2];
          v5 += 24;
          if (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3] - (void)v4) >> 3)) {
            continue;
          }
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  uint64_t v9 = a1[5];
  if (v9)
  {
    int v10 = *(void **)(v9 + 8);
    if (v10)
    {
      *(void *)(v9 + 16) = v10;
      operator delete(v10);
    }
    operator delete();
  }
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_A9870()
{
}

double sub_A9884()
{
  return NAN;
}

uint64_t sub_A9890()
{
  return 0;
}

uint64_t sub_A9898()
{
  return 1;
}

uint64_t sub_A98A0()
{
  return 0;
}

uint64_t sub_A98A8(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (v2)
  {
    if (*v2)
    {
      uint64_t v3 = *v2 - 1;
      *uint64_t v2 = v3;
      if (!v3)
      {
        sub_A9618(v2);
        operator delete();
      }
    }
    *(void *)a1 = 0;
  }
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(uint64_t ***)(a1 + 16);
    unint64_t v6 = *(void **)(a1 + 8);
    if (v5 != v4)
    {
      int v7 = v5 - 1;
      do
      {
        uint64_t v9 = *v7;
        if (*v7)
        {
          if (*v9)
          {
            uint64_t v10 = *v9 - 1;
            uint64_t *v9 = v10;
            if (!v10)
            {
              sub_220A54((uint64_t)v7);
              uint64_t v11 = *v7;
              if (*v7)
              {
                uint64_t v12 = v11[1];
                if (v12)
                {
                  if (!*v11)
                  {
                    sub_2851BC(v12);
                    operator delete();
                  }
                }
                operator delete();
              }
            }
          }
          *int v7 = 0;
        }
      }
      while (v7-- != v4);
      unint64_t v6 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_A99C4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    if (*v2)
    {
      uint64_t v3 = *v2 - 1;
      *uint64_t v2 = v3;
      if (!v3)
      {
        sub_A9618(v2);
        operator delete();
      }
    }
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v4 = *(uint64_t ***)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(uint64_t ***)(a1 + 48);
    unint64_t v6 = *(void **)(a1 + 40);
    if (v5 != v4)
    {
      int v7 = v5 - 1;
      do
      {
        uint64_t v9 = *v7;
        if (*v7)
        {
          if (*v9)
          {
            uint64_t v10 = *v9 - 1;
            uint64_t *v9 = v10;
            if (!v10)
            {
              sub_220A54((uint64_t)v7);
              uint64_t v11 = *v7;
              if (*v7)
              {
                uint64_t v12 = v11[1];
                if (v12)
                {
                  if (!*v11)
                  {
                    sub_2851BC(v12);
                    operator delete();
                  }
                }
                operator delete();
              }
            }
          }
          *int v7 = 0;
        }
        BOOL v8 = v7-- == v4;
      }
      while (!v8);
      unint64_t v6 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v4;
    operator delete(v6);
  }
  BOOL v13 = *(uint64_t **)a1;
  if (*(void *)a1)
  {
    if (*v13)
    {
      uint64_t v14 = *v13 - 1;
      *BOOL v13 = v14;
      if (!v14)
      {
        sub_A9618(v13);
        operator delete();
      }
    }
    *(void *)a1 = 0;
  }
  uint64_t v15 = *(uint64_t ***)(a1 + 8);
  if (v15)
  {
    uint64_t v16 = *(uint64_t ***)(a1 + 16);
    uint64_t v17 = *(void **)(a1 + 8);
    if (v16 != v15)
    {
      uint64_t v18 = v16 - 1;
      do
      {
        uint64_t v19 = *v18;
        if (*v18)
        {
          if (*v19)
          {
            uint64_t v20 = *v19 - 1;
            uint64_t *v19 = v20;
            if (!v20)
            {
              sub_220A54((uint64_t)v18);
              unint64_t v21 = *v18;
              if (*v18)
              {
                uint64_t v22 = v21[1];
                if (v22 && !*v21)
                {
                  sub_2851BC(v22);
                  operator delete();
                }
                operator delete();
              }
            }
          }
          *uint64_t v18 = 0;
        }
        BOOL v8 = v18-- == v15;
      }
      while (!v8);
      uint64_t v17 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v15;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_A9BD0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v11 = 0;
    goto LABEL_13;
  }
  unint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = &v2[v4 >> 7];
  uint64_t v6 = (uint64_t)*v5;
  uint64_t v7 = (uint64_t)*v5 + 32 * (v4 & 0x7F);
  uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
     + 32 * ((*(void *)(a1 + 40) + v4) & 0x7F);
  if (v7 == v8) {
    goto LABEL_11;
  }
  do
  {
    if (*(char *)(v7 + 23) < 0)
    {
      uint64_t v9 = *(void **)v7;
      v7 += 32;
      operator delete(v9);
      uint64_t v6 = (uint64_t)*v5;
      if (v7 - (void)*v5 != 4096) {
        continue;
      }
    }
    else
    {
      v7 += 32;
      if (v7 - v6 != 4096) {
        continue;
      }
    }
    uint64_t v10 = (uint64_t)v5[1];
    ++v5;
    uint64_t v6 = v10;
    uint64_t v7 = v10;
  }
  while (v7 != v8);
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
LABEL_11:
  *(void *)(a1 + 40) = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_13:
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
LABEL_18:
    *(void *)(a1 + 32) = v13;
  }
  else if (v12 == 2)
  {
    uint64_t v13 = 128;
    goto LABEL_18;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_A9D5C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_AA2D0(char *a1, char *a2)
{
  if (a1 != a2)
  {
    uint64_t v38 = v2;
    uint64_t v39 = v3;
    char v6 = (const void **)(a1 + 32);
    if (a1 + 32 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (const void **)a1;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = v6;
        int v10 = *((char *)v9 + 23);
        int v11 = *((char *)v9 + 55);
        if (v11 >= 0) {
          size_t v12 = *((unsigned __int8 *)v9 + 55);
        }
        else {
          size_t v12 = (size_t)v9[5];
        }
        if (v11 >= 0) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = (const void **)v9[4];
        }
        if (v10 >= 0) {
          size_t v14 = *((unsigned __int8 *)v9 + 23);
        }
        else {
          size_t v14 = (size_t)v9[1];
        }
        if (v10 >= 0) {
          uint64_t v15 = v9;
        }
        else {
          uint64_t v15 = *v9;
        }
        if (v14 >= v12) {
          size_t v16 = v12;
        }
        else {
          size_t v16 = v14;
        }
        int v17 = memcmp(v13, v15, v16);
        BOOL v18 = v12 < v14;
        if (v17) {
          BOOL v18 = v17 < 0;
        }
        if (v18) {
          goto LABEL_24;
        }
        int v33 = memcmp(v15, v13, v16);
        BOOL v34 = v14 < v12;
        if (v33) {
          BOOL v34 = v33 < 0;
        }
        if (!v34 && *((_DWORD *)v9 + 14) < *((_DWORD *)v9 + 6))
        {
LABEL_24:
          int v36 = v8[2];
          long long v35 = *(_OWORD *)v8;
          v8[1] = 0;
          void v8[2] = 0;
          void *v8 = 0;
          int v37 = *((_DWORD *)v9 + 14);
          if (SHIBYTE(v36) >= 0) {
            size_t v19 = HIBYTE(v36);
          }
          else {
            size_t v19 = *((void *)&v35 + 1);
          }
          if (SHIBYTE(v36) >= 0) {
            int v20 = &v35;
          }
          else {
            int v20 = (long long *)v35;
          }
          for (uint64_t i = v7; ; i -= 32)
          {
            int v22 = &a1[i];
            size_t v23 = (void **)&a1[i + 32];
            if (a1[i + 55] < 0) {
              operator delete(*v23);
            }
            *(_OWORD *)size_t v23 = *(_OWORD *)v22;
            *(void *)&a1[i + 48] = *((void *)v22 + 2);
            v22[23] = 0;
            char *v22 = 0;
            *((_DWORD *)v22 + 14) = *((_DWORD *)v22 + 6);
            if (!i) {
              break;
            }
            int v24 = a1[i - 9];
            if (v24 >= 0) {
              size_t v25 = a1[i - 9];
            }
            else {
              size_t v25 = *(void *)&a1[i - 24];
            }
            if (v24 >= 0) {
              uint64_t v26 = &a1[i - 32];
            }
            else {
              uint64_t v26 = *(char **)&a1[i - 32];
            }
            if (v25 >= v19) {
              size_t v27 = v19;
            }
            else {
              size_t v27 = v25;
            }
            int v28 = memcmp(v20, v26, v27);
            BOOL v29 = v19 < v25;
            if (v28) {
              BOOL v29 = v28 < 0;
            }
            if (!v29)
            {
              int v30 = memcmp(v26, v20, v27);
              BOOL v31 = v25 < v19;
              if (v30) {
                BOOL v31 = v30 < 0;
              }
              if (v31 || v37 >= *(_DWORD *)&a1[i - 8])
              {
                unint64_t v32 = &a1[i];
                if ((a1[i + 23] & 0x80000000) == 0) {
                  goto LABEL_4;
                }
                goto LABEL_59;
              }
            }
          }
          unint64_t v32 = a1;
          if ((a1[23] & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_59:
          operator delete(*(void **)v32);
LABEL_4:
          *(_OWORD *)unint64_t v32 = v35;
          *((void *)v32 + 2) = v36;
          *((_DWORD *)v32 + 6) = v37;
        }
        char v6 = v8 + 4;
        v7 += 32;
      }
      while (v8 + 4 != (const void **)a2);
    }
  }
}

void sub_AA544(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v36 = v2;
    uint64_t v37 = v3;
    char v5 = a1;
    char v6 = a1 + 4;
    if (a1 + 4 != a2)
    {
      uint64_t v7 = a1 + 7;
      do
      {
        uint64_t v8 = v5;
        char v5 = v6;
        int v9 = *((char *)v8 + 23);
        int v10 = *((char *)v8 + 55);
        if (v10 >= 0) {
          size_t v11 = *((unsigned __int8 *)v8 + 55);
        }
        else {
          size_t v11 = (size_t)v8[5];
        }
        if (v10 >= 0) {
          size_t v12 = v6;
        }
        else {
          size_t v12 = (const void **)v8[4];
        }
        if (v9 >= 0) {
          size_t v13 = *((unsigned __int8 *)v8 + 23);
        }
        else {
          size_t v13 = (size_t)v8[1];
        }
        if (v9 >= 0) {
          size_t v14 = v8;
        }
        else {
          size_t v14 = *v8;
        }
        if (v13 >= v11) {
          size_t v15 = v11;
        }
        else {
          size_t v15 = v13;
        }
        int v16 = memcmp(v12, v14, v15);
        BOOL v17 = v11 < v13;
        if (v16) {
          BOOL v17 = v16 < 0;
        }
        if (v17) {
          goto LABEL_24;
        }
        int v31 = memcmp(v14, v12, v15);
        BOOL v32 = v13 < v11;
        if (v31) {
          BOOL v32 = v31 < 0;
        }
        if (!v32 && *((_DWORD *)v8 + 14) < *((_DWORD *)v8 + 6))
        {
LABEL_24:
          BOOL v34 = v5[2];
          long long v33 = *(_OWORD *)v5;
          v5[1] = 0;
          void v5[2] = 0;
          *char v5 = 0;
          int v35 = *((_DWORD *)v8 + 14);
          if (SHIBYTE(v34) >= 0) {
            size_t v18 = HIBYTE(v34);
          }
          else {
            size_t v18 = *((void *)&v33 + 1);
          }
          if (SHIBYTE(v34) >= 0) {
            size_t v19 = &v33;
          }
          else {
            size_t v19 = (long long *)v33;
          }
          for (uint64_t i = v7; ; i -= 8)
          {
            int v21 = (void **)(i - 6);
            if (*((char *)i - 1) < 0) {
              operator delete(*v21);
            }
            int v22 = (void **)(i - 14);
            *(_OWORD *)int v21 = *(_OWORD *)(i - 14);
            *((void *)i - 1) = *((void *)i - 5);
            *((unsigned char *)i - 33) = 0;
            *((unsigned char *)i - 56) = 0;
            _DWORD *i = *(i - 8);
            int v23 = *((char *)i - 65);
            if (v23 >= 0) {
              size_t v24 = *((unsigned __int8 *)i - 65);
            }
            else {
              size_t v24 = *((void *)i - 10);
            }
            if (v23 >= 0) {
              size_t v25 = i - 22;
            }
            else {
              size_t v25 = (_DWORD *)*((void *)i - 11);
            }
            if (v24 >= v18) {
              size_t v26 = v18;
            }
            else {
              size_t v26 = v24;
            }
            int v27 = memcmp(v19, v25, v26);
            BOOL v28 = v18 < v24;
            if (v27) {
              BOOL v28 = v27 < 0;
            }
            if (!v28)
            {
              int v29 = memcmp(v25, v19, v26);
              BOOL v30 = v24 < v18;
              if (v29) {
                BOOL v30 = v29 < 0;
              }
              if (v30 || v35 >= *(i - 16)) {
                break;
              }
            }
          }
          if (*((char *)i - 33) < 0) {
            operator delete(*v22);
          }
          *(_OWORD *)int v22 = v33;
          *((void *)i - 5) = v34;
          *(i - 8) = v35;
        }
        char v6 = v5 + 4;
        v7 += 8;
      }
      while (v5 + 4 != a2);
    }
  }
}

uint64_t sub_AA798(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    size_t v11 = a1;
  }
  else {
    size_t v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  BOOL v14 = v8 < v10;
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  if (v14) {
    goto LABEL_23;
  }
  int v15 = memcmp(v11, v9, v12);
  BOOL v16 = v10 < v8;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (!v16 && *((_DWORD *)a2 + 6) < *((_DWORD *)a1 + 6))
  {
LABEL_23:
    int v17 = *((char *)a3 + 23);
    if (v17 >= 0) {
      size_t v18 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v18 = (size_t)a3[1];
    }
    if (v17 >= 0) {
      size_t v19 = a3;
    }
    else {
      size_t v19 = *a3;
    }
    if (v8 >= v18) {
      size_t v20 = v18;
    }
    else {
      size_t v20 = v8;
    }
    int v21 = memcmp(v19, v9, v20);
    BOOL v22 = v18 < v8;
    if (v21) {
      BOOL v22 = v21 < 0;
    }
    if (v22) {
      goto LABEL_35;
    }
    int v50 = memcmp(v9, v19, v20);
    BOOL v51 = v8 < v18;
    if (v50) {
      BOOL v51 = v50 < 0;
    }
    if (!v51 && *((_DWORD *)a3 + 6) < *((_DWORD *)a2 + 6))
    {
LABEL_35:
      int v23 = a1[2];
      long long v24 = *(_OWORD *)a1;
      size_t v25 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v25;
      *(_OWORD *)a3 = v24;
      a3[2] = v23;
      size_t v26 = (int *)(a1 + 3);
      int v27 = (int *)(a3 + 3);
      uint64_t result = 1;
LABEL_91:
      int v68 = *v26;
      *size_t v26 = *v27;
      int *v27 = v68;
      return result;
    }
    unint64_t v52 = a1[2];
    long long v53 = *(_OWORD *)a1;
    unint64_t v54 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v54;
    *(_OWORD *)a2 = v53;
    a2[2] = v52;
    size_t v26 = (int *)(a2 + 3);
    int v55 = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v55;
    int v56 = *((char *)a2 + 23);
    int v57 = *((char *)a3 + 23);
    if (v57 >= 0) {
      size_t v58 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v58 = (size_t)a3[1];
    }
    if (v57 >= 0) {
      uint64_t v59 = a3;
    }
    else {
      uint64_t v59 = *a3;
    }
    if (v56 >= 0) {
      size_t v60 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v60 = (size_t)a2[1];
    }
    if (v56 >= 0) {
      long long v61 = a2;
    }
    else {
      long long v61 = *a2;
    }
    if (v60 >= v58) {
      size_t v62 = v58;
    }
    else {
      size_t v62 = v60;
    }
    int v63 = memcmp(v59, v61, v62);
    BOOL v64 = v58 < v60;
    if (v63) {
      BOOL v64 = v63 < 0;
    }
    if (!v64)
    {
      int v73 = memcmp(v61, v59, v62);
      BOOL v74 = v60 < v58;
      if (v73) {
        BOOL v74 = v73 < 0;
      }
      if (v74 || *((_DWORD *)a3 + 6) >= v55) {
        return 1;
      }
    }
    long long v65 = a2[2];
    long long v66 = *(_OWORD *)a2;
    uint64_t v67 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v67;
    *(_OWORD *)a3 = v66;
    a3[2] = v65;
    int v27 = (int *)(a3 + 3);
LABEL_90:
    uint64_t result = 2;
    goto LABEL_91;
  }
  int v29 = *((char *)a3 + 23);
  if (v29 >= 0) {
    size_t v30 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v30 = (size_t)a3[1];
  }
  if (v29 >= 0) {
    int v31 = a3;
  }
  else {
    int v31 = *a3;
  }
  if (v8 >= v30) {
    size_t v32 = v30;
  }
  else {
    size_t v32 = v8;
  }
  int v33 = memcmp(v31, v9, v32);
  BOOL v34 = v30 < v8;
  if (v33) {
    BOOL v34 = v33 < 0;
  }
  if (!v34)
  {
    int v69 = memcmp(v9, v31, v32);
    BOOL v70 = v8 < v30;
    if (v69) {
      BOOL v70 = v69 < 0;
    }
    if (v70 || *((_DWORD *)a3 + 6) >= *((_DWORD *)a2 + 6)) {
      return 0;
    }
  }
  int v35 = a2[2];
  long long v36 = *(_OWORD *)a2;
  uint64_t v37 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v37;
  *(_OWORD *)a3 = v36;
  a3[2] = v35;
  int v27 = (int *)(a2 + 3);
  LODWORD(v35) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = v35;
  int v38 = *((char *)a1 + 23);
  int v39 = *((char *)a2 + 23);
  if (v39 >= 0) {
    size_t v40 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v40 = (size_t)a2[1];
  }
  if (v39 >= 0) {
    int v41 = a2;
  }
  else {
    int v41 = *a2;
  }
  if (v38 >= 0) {
    size_t v42 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v42 = (size_t)a1[1];
  }
  if (v38 >= 0) {
    int v43 = a1;
  }
  else {
    int v43 = *a1;
  }
  if (v42 >= v40) {
    size_t v44 = v40;
  }
  else {
    size_t v44 = v42;
  }
  int v45 = memcmp(v41, v43, v44);
  BOOL v46 = v40 < v42;
  if (v45) {
    BOOL v46 = v45 < 0;
  }
  if (v46) {
    goto LABEL_66;
  }
  int v71 = memcmp(v43, v41, v44);
  BOOL v72 = v42 < v40;
  if (v71) {
    BOOL v72 = v71 < 0;
  }
  if (!v72 && *v27 < *((_DWORD *)a1 + 6))
  {
LABEL_66:
    long long v47 = a1[2];
    long long v48 = *(_OWORD *)a1;
    unint64_t v49 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v49;
    *(_OWORD *)a2 = v48;
    a2[2] = v47;
    size_t v26 = (int *)(a1 + 3);
    goto LABEL_90;
  }
  return 1;
}

const void **sub_AABB8(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  BOOL v70 = *(const void **)(a1 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  int v68 = *(_DWORD *)(a1 + 24);
  int v71 = v68;
  unint64_t v4 = (const void *)*((void *)a2 - 4);
  size_t v5 = *((unsigned __int8 *)a2 - 9);
  size_t v6 = *((void *)a2 - 3);
  if (SHIBYTE(v70) >= 0) {
    int v7 = (void *)HIBYTE(v70);
  }
  else {
    int v7 = __p[1];
  }
  if (SHIBYTE(v70) >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  if ((v5 & 0x80u) == 0) {
    size_t v9 = *((unsigned __int8 *)a2 - 9);
  }
  else {
    size_t v9 = *((void *)a2 - 3);
  }
  if ((v5 & 0x80u) == 0) {
    size_t v10 = a2 - 2;
  }
  else {
    size_t v10 = (_OWORD *)*((void *)a2 - 4);
  }
  if (v9 >= (unint64_t)v7) {
    size_t v11 = (size_t)v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = (unint64_t)v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  uint64_t v67 = a1;
  if (v13) {
    goto LABEL_23;
  }
  int v14 = memcmp(v10, v8, v11);
  BOOL v15 = v9 < (unint64_t)v7;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15 || v68 >= *((_DWORD *)v2 - 2))
  {
    for (uint64_t i = (const void **)(a1 + 32); i < (const void **)v2; i += 4)
    {
      int v59 = *((char *)i + 23);
      if (v59 >= 0) {
        size_t v60 = *((unsigned __int8 *)i + 23);
      }
      else {
        size_t v60 = (size_t)i[1];
      }
      if (v59 >= 0) {
        long long v61 = i;
      }
      else {
        long long v61 = *i;
      }
      if (v60 >= (unint64_t)v7) {
        size_t v62 = (size_t)v7;
      }
      else {
        size_t v62 = v60;
      }
      int v63 = memcmp(v8, v61, v62);
      BOOL v64 = (unint64_t)v7 < v60;
      if (v63) {
        BOOL v64 = v63 < 0;
      }
      if (v64) {
        break;
      }
      int v65 = memcmp(v61, v8, v62);
      BOOL v66 = v60 < (unint64_t)v7;
      if (v65) {
        BOOL v66 = v65 < 0;
      }
      if (!v66 && v68 < *((_DWORD *)i + 6)) {
        break;
      }
    }
  }
  else
  {
LABEL_23:
    for (uint64_t i = (const void **)(a1 + 32); ; i += 4)
    {
      int v17 = *((char *)i + 23);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)i + 23);
      }
      else {
        size_t v18 = (size_t)i[1];
      }
      if (v17 >= 0) {
        size_t v19 = i;
      }
      else {
        size_t v19 = *i;
      }
      if (v18 >= (unint64_t)v7) {
        size_t v20 = (size_t)v7;
      }
      else {
        size_t v20 = v18;
      }
      int v21 = memcmp(v8, v19, v20);
      BOOL v22 = (unint64_t)v7 < v18;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22) {
        break;
      }
      int v23 = memcmp(v19, v8, v20);
      BOOL v24 = v18 < (unint64_t)v7;
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      if (!v24 && v68 < *((_DWORD *)i + 6)) {
        break;
      }
    }
  }
  if (i < (const void **)v2)
  {
    for (v2 -= 2; ; size_t v6 = *((void *)v2 + 1))
    {
      if ((v5 & 0x80u) != 0)
      {
        size_t v26 = v4;
      }
      else
      {
        size_t v6 = v5;
        size_t v26 = v2;
      }
      if (v6 >= (unint64_t)v7) {
        size_t v27 = (size_t)v7;
      }
      else {
        size_t v27 = v6;
      }
      int v28 = memcmp(v8, v26, v27);
      BOOL v29 = (unint64_t)v7 < v6;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (!v29)
      {
        int v30 = memcmp(v26, v8, v27);
        BOOL v31 = v6 < (unint64_t)v7;
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        if (v31 || v68 >= *((_DWORD *)v2 + 6)) {
          break;
        }
      }
      size_t v25 = (const void *)*((void *)v2 - 4);
      v2 -= 2;
      unint64_t v4 = v25;
      size_t v5 = *((unsigned __int8 *)v2 + 23);
    }
  }
  while (i < (const void **)v2)
  {
    long long v32 = *(_OWORD *)i;
    int v73 = i[2];
    long long v72 = v32;
    long long v33 = *v2;
    i[2] = (const void *)*((void *)v2 + 2);
    *(_OWORD *)uint64_t i = v33;
    long long v34 = v72;
    *((void *)v2 + 2) = v73;
    *uint64_t v2 = v34;
    int v35 = *((_DWORD *)i + 6);
    *((_DWORD *)i + 6) = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v35;
    if (SHIBYTE(v70) >= 0) {
      long long v36 = (void *)HIBYTE(v70);
    }
    else {
      long long v36 = __p[1];
    }
    if (SHIBYTE(v70) >= 0) {
      uint64_t v37 = __p;
    }
    else {
      uint64_t v37 = (void **)__p[0];
    }
    int v38 = v71;
    do
    {
      i += 4;
      int v39 = *((char *)i + 23);
      if (v39 >= 0) {
        size_t v40 = *((unsigned __int8 *)i + 23);
      }
      else {
        size_t v40 = (size_t)i[1];
      }
      if (v39 >= 0) {
        int v41 = i;
      }
      else {
        int v41 = *i;
      }
      if (v40 >= (unint64_t)v36) {
        size_t v42 = (size_t)v36;
      }
      else {
        size_t v42 = v40;
      }
      int v43 = memcmp(v37, v41, v42);
      BOOL v44 = (unint64_t)v36 < v40;
      if (v43) {
        BOOL v44 = v43 < 0;
      }
      if (v44) {
        break;
      }
      int v45 = memcmp(v41, v37, v42);
      BOOL v46 = v40 < (unint64_t)v36;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
    }
    while (v46 || v38 >= *((_DWORD *)i + 6));
    while (1)
    {
      v2 -= 2;
      int v47 = *((char *)v2 + 23);
      if (v47 >= 0) {
        size_t v48 = *((unsigned __int8 *)v2 + 23);
      }
      else {
        size_t v48 = *((void *)v2 + 1);
      }
      if (v47 >= 0) {
        unint64_t v49 = v2;
      }
      else {
        unint64_t v49 = *(const void **)v2;
      }
      if (v48 >= (unint64_t)v36) {
        size_t v50 = (size_t)v36;
      }
      else {
        size_t v50 = v48;
      }
      int v51 = memcmp(v37, v49, v50);
      BOOL v52 = (unint64_t)v36 < v48;
      if (v51) {
        BOOL v52 = v51 < 0;
      }
      if (!v52)
      {
        int v53 = memcmp(v49, v37, v50);
        BOOL v54 = v48 < (unint64_t)v36;
        if (v53) {
          BOOL v54 = v53 < 0;
        }
        if (v54 || v38 >= *((_DWORD *)v2 + 6)) {
          break;
        }
      }
    }
  }
  int v55 = (void **)(i - 4);
  if (i - 4 != (const void **)v67)
  {
    if (*(char *)(v67 + 23) < 0) {
      operator delete(*(void **)v67);
    }
    long long v56 = *(_OWORD *)v55;
    *(void *)(v67 + 16) = *(i - 2);
    *(_OWORD *)uint64_t v67 = v56;
    *((unsigned char *)i - 9) = 0;
    *((unsigned char *)i - 32) = 0;
    *(_DWORD *)(v67 + 24) = *((_DWORD *)i - 2);
  }
  if (*((char *)i - 9) < 0) {
    operator delete(*v55);
  }
  long long v57 = *(_OWORD *)__p;
  *(i - 2) = v70;
  *(_OWORD *)int v55 = v57;
  HIBYTE(v70) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)i - 2) = v71;
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  return i;
}

const void **sub_AB088(uint64_t a1, const void **a2)
{
  uint64_t v4 = 0;
  int v65 = *(const void **)(a1 + 16);
  unint64_t v5 = (unint64_t)v65;
  *(_OWORD *)long long __p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  int v6 = *(_DWORD *)(a1 + 24);
  int v66 = v6;
  int v7 = (void *)HIBYTE(v5);
  if ((char)v7 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = __p[1];
  }
  if ((char)v7 >= 0) {
    size_t v9 = __p;
  }
  else {
    size_t v9 = (void **)__p[0];
  }
  while (1)
  {
    int v10 = *(char *)(a1 + v4 + 55);
    if (v10 >= 0) {
      size_t v11 = *(unsigned __int8 *)(a1 + v4 + 55);
    }
    else {
      size_t v11 = *(void *)(a1 + v4 + 40);
    }
    if (v10 >= 0) {
      int v12 = (const void *)(a1 + v4 + 32);
    }
    else {
      int v12 = *(const void **)(a1 + v4 + 32);
    }
    if ((unint64_t)v8 >= v11) {
      size_t v13 = v11;
    }
    else {
      size_t v13 = (size_t)v8;
    }
    int v14 = memcmp(v12, v9, v13);
    BOOL v15 = v11 < (unint64_t)v8;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (!v15)
    {
      int v16 = memcmp(v9, v12, v13);
      BOOL v17 = (unint64_t)v8 < v11;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (v17 || *(_DWORD *)(a1 + v4 + 56) >= v6) {
        break;
      }
    }
    v4 += 32;
  }
  unint64_t v18 = a1 + v4 + 32;
  if (v4)
  {
    do
    {
      a2 -= 4;
      int v19 = *((char *)a2 + 23);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v20 = (size_t)a2[1];
      }
      if (v19 >= 0) {
        int v21 = a2;
      }
      else {
        int v21 = *a2;
      }
      if ((unint64_t)v8 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = (size_t)v8;
      }
      int v23 = memcmp(v21, v9, v22);
      BOOL v24 = v20 < (unint64_t)v8;
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      if (v24) {
        break;
      }
      int v25 = memcmp(v9, v21, v22);
      BOOL v26 = (unint64_t)v8 < v20;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
    }
    while (v26 || *((_DWORD *)a2 + 6) >= v6);
  }
  else
  {
    do
    {
      if (v18 >= (unint64_t)a2) {
        break;
      }
      a2 -= 4;
      int v27 = *((char *)a2 + 23);
      if (v27 >= 0) {
        size_t v28 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v28 = (size_t)a2[1];
      }
      if (v27 >= 0) {
        BOOL v29 = a2;
      }
      else {
        BOOL v29 = *a2;
      }
      if ((unint64_t)v8 >= v28) {
        size_t v30 = v28;
      }
      else {
        size_t v30 = (size_t)v8;
      }
      int v31 = memcmp(v29, v9, v30);
      BOOL v32 = v28 < (unint64_t)v8;
      if (v31) {
        BOOL v32 = v31 < 0;
      }
      if (v32) {
        break;
      }
      int v33 = memcmp(v9, v29, v30);
      BOOL v34 = (unint64_t)v8 < v28;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
    }
    while (v34 || *((_DWORD *)a2 + 6) >= v6);
  }
  int v35 = (const void **)v18;
  if (v18 < (unint64_t)a2)
  {
    long long v36 = a2;
    do
    {
      long long v37 = *(_OWORD *)v35;
      int v68 = v35[2];
      long long v67 = v37;
      long long v38 = *(_OWORD *)v36;
      v35[2] = v36[2];
      *(_OWORD *)int v35 = v38;
      long long v39 = v67;
      v36[2] = v68;
      *(_OWORD *)long long v36 = v39;
      int v40 = *((_DWORD *)v35 + 6);
      *((_DWORD *)v35 + 6) = *((_DWORD *)v36 + 6);
      *((_DWORD *)v36 + 6) = v40;
      if (SHIBYTE(v65) >= 0) {
        int v41 = (void *)HIBYTE(v65);
      }
      else {
        int v41 = __p[1];
      }
      if (SHIBYTE(v65) >= 0) {
        size_t v42 = __p;
      }
      else {
        size_t v42 = (void **)__p[0];
      }
      int v43 = v66;
      while (1)
      {
        v35 += 4;
        int v44 = *((char *)v35 + 23);
        if (v44 >= 0) {
          size_t v45 = *((unsigned __int8 *)v35 + 23);
        }
        else {
          size_t v45 = (size_t)v35[1];
        }
        if (v44 >= 0) {
          BOOL v46 = v35;
        }
        else {
          BOOL v46 = *v35;
        }
        if ((unint64_t)v41 >= v45) {
          size_t v47 = v45;
        }
        else {
          size_t v47 = (size_t)v41;
        }
        int v48 = memcmp(v46, v42, v47);
        BOOL v49 = v45 < (unint64_t)v41;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49)
        {
          int v50 = memcmp(v42, v46, v47);
          BOOL v51 = (unint64_t)v41 < v45;
          if (v50) {
            BOOL v51 = v50 < 0;
          }
          if (v51 || *((_DWORD *)v35 + 6) >= v43) {
            break;
          }
        }
      }
      do
      {
        v36 -= 4;
        int v52 = *((char *)v36 + 23);
        if (v52 >= 0) {
          size_t v53 = *((unsigned __int8 *)v36 + 23);
        }
        else {
          size_t v53 = (size_t)v36[1];
        }
        if (v52 >= 0) {
          BOOL v54 = v36;
        }
        else {
          BOOL v54 = *v36;
        }
        if ((unint64_t)v41 >= v53) {
          size_t v55 = v53;
        }
        else {
          size_t v55 = (size_t)v41;
        }
        int v56 = memcmp(v54, v42, v55);
        BOOL v57 = v53 < (unint64_t)v41;
        if (v56) {
          BOOL v57 = v56 < 0;
        }
        if (v57) {
          break;
        }
        int v58 = memcmp(v42, v54, v55);
        BOOL v59 = (unint64_t)v41 < v53;
        if (v58) {
          BOOL v59 = v58 < 0;
        }
      }
      while (v59 || *((_DWORD *)v36 + 6) >= v43);
    }
    while (v35 < v36);
  }
  size_t v60 = (void **)(v35 - 4);
  if (v35 - 4 != (const void **)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v61 = *(_OWORD *)v60;
    *(void *)(a1 + 16) = *(v35 - 2);
    *(_OWORD *)a1 = v61;
    *((unsigned char *)v35 - 9) = 0;
    *((unsigned char *)v35 - 32) = 0;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)v35 - 2);
  }
  if (*((char *)v35 - 9) < 0) {
    operator delete(*v60);
  }
  long long v62 = *(_OWORD *)__p;
  *(v35 - 2) = v65;
  *(_OWORD *)size_t v60 = v62;
  HIBYTE(v65) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)v35 - 2) = v66;
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  return v35 - 4;
}

BOOL sub_AB4CC(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v7 = a2 - 4;
      int v8 = *(char *)(a1 + 23);
      int v9 = *((char *)a2 - 9);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)a2 - 9);
      }
      else {
        size_t v10 = (size_t)*(a2 - 3);
      }
      if (v9 >= 0) {
        size_t v11 = a2 - 4;
      }
      else {
        size_t v11 = (const void **)*(a2 - 4);
      }
      if (v8 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v12 = *(void *)(a1 + 8);
      }
      if (v8 >= 0) {
        size_t v13 = (const void *)a1;
      }
      else {
        size_t v13 = *(const void **)a1;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v11, v13, v14);
      BOOL v16 = v10 < v12;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      if (v16) {
        goto LABEL_24;
      }
      int v17 = memcmp(v13, v11, v14);
      BOOL v18 = v12 < v10;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      if (!v18 && *((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
      {
LABEL_24:
        int v19 = *(const void **)(a1 + 16);
        long long v20 = *(_OWORD *)a1;
        int v21 = v7[2];
        *(_OWORD *)a1 = *(_OWORD *)v7;
        *(void *)(a1 + 16) = v21;
        *(_OWORD *)int v7 = v20;
        v7[2] = v19;
        LODWORD(v19) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v19;
      }
      return 1;
    case 3:
      sub_AA798((const void **)a1, (const void **)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      sub_AB920((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), a2 - 4);
      return 1;
    case 5:
      sub_ABBDC(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), a2 - 4);
      return 1;
    default:
      uint64_t v22 = a1 + 64;
      sub_AA798((const void **)a1, (const void **)(a1 + 32), (const void **)(a1 + 64));
      int v23 = (const void **)(a1 + 96);
      if ((const void **)(a1 + 96) == v2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v24 = 0;
      size_t v53 = v2;
      break;
  }
  while (2)
  {
    int v26 = *(char *)(v22 + 23);
    int v27 = *((char *)v23 + 23);
    if (v27 >= 0) {
      size_t v28 = *((unsigned __int8 *)v23 + 23);
    }
    else {
      size_t v28 = (size_t)v23[1];
    }
    if (v27 >= 0) {
      BOOL v29 = v23;
    }
    else {
      BOOL v29 = *v23;
    }
    if (v26 >= 0) {
      size_t v30 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      size_t v30 = *(void *)(v22 + 8);
    }
    if (v26 >= 0) {
      int v31 = (const void *)v22;
    }
    else {
      int v31 = *(const void **)v22;
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    int v33 = memcmp(v29, v31, v32);
    BOOL v34 = v28 < v30;
    if (v33) {
      BOOL v34 = v33 < 0;
    }
    if (v34)
    {
      int v35 = *((_DWORD *)v23 + 6);
    }
    else
    {
      int v36 = memcmp(v31, v29, v32);
      BOOL v37 = v30 < v28;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (v37) {
        goto LABEL_28;
      }
      int v35 = *((_DWORD *)v23 + 6);
      if (v35 >= *(_DWORD *)(v22 + 24)) {
        goto LABEL_28;
      }
    }
    int v54 = v24;
    char v38 = 0;
    long long v56 = *(_OWORD *)v23;
    BOOL v57 = v23[2];
    v23[1] = 0;
    v23[2] = 0;
    *int v23 = 0;
    int v58 = v35;
    for (uint64_t i = v55; ; i -= 32)
    {
      uint64_t v40 = a1 + i;
      int v41 = (void **)(a1 + i + 96);
      if (v38 < 0) {
        operator delete(*v41);
      }
      *(_OWORD *)int v41 = *(_OWORD *)(v40 + 64);
      *(void *)(a1 + i + 112) = *(void *)(v40 + 80);
      *(unsigned char *)(v40 + 87) = 0;
      *(unsigned char *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 120) = *(_DWORD *)(v40 + 88);
      if (i == -64)
      {
        uint64_t v22 = a1;
LABEL_81:
        uint64_t v2 = v53;
        int v52 = v54;
        if ((*(char *)(v22 + 23) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_82:
        operator delete(*(void **)v22);
        goto LABEL_27;
      }
      int v42 = *(char *)(a1 + i + 55);
      if (SHIBYTE(v57) >= 0) {
        size_t v43 = HIBYTE(v57);
      }
      else {
        size_t v43 = *((void *)&v56 + 1);
      }
      if (SHIBYTE(v57) >= 0) {
        int v44 = &v56;
      }
      else {
        int v44 = (long long *)v56;
      }
      if (v42 >= 0) {
        size_t v45 = *(unsigned __int8 *)(a1 + i + 55);
      }
      else {
        size_t v45 = *(void *)(a1 + i + 40);
      }
      if (v42 >= 0) {
        BOOL v46 = (const void *)(a1 + i + 32);
      }
      else {
        BOOL v46 = *(const void **)(a1 + i + 32);
      }
      if (v45 >= v43) {
        size_t v47 = v43;
      }
      else {
        size_t v47 = v45;
      }
      int v48 = memcmp(v44, v46, v47);
      BOOL v49 = v43 < v45;
      if (v48) {
        BOOL v49 = v48 < 0;
      }
      if (!v49) {
        break;
      }
LABEL_53:
      v22 -= 32;
      char v38 = *(unsigned char *)(v40 + 87);
    }
    int v50 = memcmp(v46, v44, v47);
    BOOL v51 = v45 < v43;
    if (v50) {
      BOOL v51 = v50 < 0;
    }
    if (!v51)
    {
      if (v58 >= *(_DWORD *)(a1 + i + 56)) {
        goto LABEL_81;
      }
      goto LABEL_53;
    }
    uint64_t v22 = a1 + i + 64;
    uint64_t v2 = v53;
    int v52 = v54;
    if (*(char *)(a1 + i + 87) < 0) {
      goto LABEL_82;
    }
LABEL_27:
    long long v25 = v56;
    *(void *)(v22 + 16) = v57;
    *(_OWORD *)uint64_t v22 = v25;
    HIBYTE(v57) = 0;
    LOBYTE(v56) = 0;
    *(_DWORD *)(v22 + 24) = v58;
    int v24 = v52 + 1;
    if (v24 == 8) {
      return v23 + 4 == v2;
    }
LABEL_28:
    uint64_t v22 = (uint64_t)v23;
    v55 += 32;
    v23 += 4;
    if (v23 != v2) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_AB920(long long *a1, long long *a2, long long *a3, const void **a4)
{
  sub_AA798((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    size_t v13 = a3;
  }
  else {
    size_t v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v16 = v10 < v12;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    goto LABEL_19;
  }
  uint64_t result = memcmp(v13, v11, v14);
  BOOL v45 = v12 < v10;
  if (result) {
    BOOL v45 = (int)result < 0;
  }
  if (!v45 && *((_DWORD *)a4 + 6) < *((_DWORD *)a3 + 6))
  {
LABEL_19:
    int v17 = (const void *)*((void *)a3 + 2);
    long long v18 = *a3;
    int v19 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v19;
    *(_OWORD *)a4 = v18;
    a4[2] = v17;
    LODWORD(v17) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = v17;
    int v20 = *((char *)a2 + 23);
    int v21 = *((char *)a3 + 23);
    if (v21 >= 0) {
      size_t v22 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v22 = *((void *)a3 + 1);
    }
    if (v21 >= 0) {
      int v23 = a3;
    }
    else {
      int v23 = *(const void **)a3;
    }
    if (v20 >= 0) {
      size_t v24 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v24 = *((void *)a2 + 1);
    }
    if (v20 >= 0) {
      long long v25 = a2;
    }
    else {
      long long v25 = *(const void **)a2;
    }
    if (v24 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v23, v25, v26);
    BOOL v28 = v22 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28) {
      goto LABEL_37;
    }
    uint64_t result = memcmp(v25, v23, v26);
    BOOL v46 = v24 < v22;
    if (result) {
      BOOL v46 = (int)result < 0;
    }
    if (!v46 && *((_DWORD *)a3 + 6) < *((_DWORD *)a2 + 6))
    {
LABEL_37:
      uint64_t v29 = *((void *)a2 + 2);
      long long v30 = *a2;
      uint64_t v31 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v31;
      *a3 = v30;
      *((void *)a3 + 2) = v29;
      LODWORD(v29) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v29;
      int v32 = *((char *)a1 + 23);
      int v33 = *((char *)a2 + 23);
      if (v33 >= 0) {
        size_t v34 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v34 = *((void *)a2 + 1);
      }
      if (v33 >= 0) {
        int v35 = a2;
      }
      else {
        int v35 = *(const void **)a2;
      }
      if (v32 >= 0) {
        size_t v36 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v36 = *((void *)a1 + 1);
      }
      if (v32 >= 0) {
        BOOL v37 = a1;
      }
      else {
        BOOL v37 = *(const void **)a1;
      }
      if (v36 >= v34) {
        size_t v38 = v34;
      }
      else {
        size_t v38 = v36;
      }
      uint64_t result = memcmp(v35, v37, v38);
      BOOL v40 = v34 < v36;
      if (result) {
        BOOL v40 = (int)result < 0;
      }
      if (v40) {
        goto LABEL_59;
      }
      uint64_t result = memcmp(v37, v35, v38);
      BOOL v41 = v36 < v34;
      if (result) {
        BOOL v41 = (int)result < 0;
      }
      if (!v41 && *((_DWORD *)a2 + 6) < *((_DWORD *)a1 + 6))
      {
LABEL_59:
        uint64_t v42 = *((void *)a1 + 2);
        long long v43 = *a1;
        uint64_t v44 = *((void *)a2 + 2);
        *a1 = *a2;
        *((void *)a1 + 2) = v44;
        *a2 = v43;
        *((void *)a2 + 2) = v42;
        LODWORD(v42) = *((_DWORD *)a1 + 6);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = v42;
      }
    }
  }
  return result;
}

uint64_t sub_ABBDC(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  sub_AB920((long long *)a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    size_t v13 = a5;
  }
  else {
    size_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v14 = *((void *)a4 + 1);
  }
  if (v10 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = *(long long **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18) {
    goto LABEL_19;
  }
  uint64_t result = memcmp(v15, v13, v16);
  BOOL v58 = v14 < v12;
  if (result) {
    BOOL v58 = (int)result < 0;
  }
  if (!v58 && *((_DWORD *)a5 + 6) < *((_DWORD *)a4 + 6))
  {
LABEL_19:
    int v19 = (const void *)*((void *)a4 + 2);
    long long v20 = *a4;
    int v21 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v21;
    *(_OWORD *)a5 = v20;
    a5[2] = v19;
    LODWORD(v19) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = *((_DWORD *)a5 + 6);
    *((_DWORD *)a5 + 6) = v19;
    int v22 = *(char *)(a3 + 23);
    int v23 = *((char *)a4 + 23);
    if (v23 >= 0) {
      size_t v24 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v24 = *((void *)a4 + 1);
    }
    if (v23 >= 0) {
      long long v25 = a4;
    }
    else {
      long long v25 = *(long long **)a4;
    }
    if (v22 >= 0) {
      size_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v26 = *(void *)(a3 + 8);
    }
    if (v22 >= 0) {
      int v27 = (const void *)a3;
    }
    else {
      int v27 = *(const void **)a3;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v25, v27, v28);
    BOOL v30 = v24 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30) {
      goto LABEL_37;
    }
    uint64_t result = memcmp(v27, v25, v28);
    BOOL v59 = v26 < v24;
    if (result) {
      BOOL v59 = (int)result < 0;
    }
    if (!v59 && *((_DWORD *)a4 + 6) < *(_DWORD *)(a3 + 24))
    {
LABEL_37:
      uint64_t v31 = *(void *)(a3 + 16);
      long long v32 = *(_OWORD *)a3;
      uint64_t v33 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(void *)(a3 + 16) = v33;
      *a4 = v32;
      *((void *)a4 + 2) = v31;
      LODWORD(v31) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *((_DWORD *)a4 + 6);
      *((_DWORD *)a4 + 6) = v31;
      int v34 = *(char *)(a2 + 23);
      int v35 = *(char *)(a3 + 23);
      if (v35 >= 0) {
        size_t v36 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v36 = *(void *)(a3 + 8);
      }
      if (v35 >= 0) {
        BOOL v37 = (const void *)a3;
      }
      else {
        BOOL v37 = *(const void **)a3;
      }
      if (v34 >= 0) {
        size_t v38 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v38 = *(void *)(a2 + 8);
      }
      if (v34 >= 0) {
        long long v39 = (const void *)a2;
      }
      else {
        long long v39 = *(const void **)a2;
      }
      if (v38 >= v36) {
        size_t v40 = v36;
      }
      else {
        size_t v40 = v38;
      }
      int v41 = memcmp(v37, v39, v40);
      BOOL v42 = v36 < v38;
      if (v41) {
        BOOL v42 = v41 < 0;
      }
      if (v42) {
        goto LABEL_55;
      }
      uint64_t result = memcmp(v39, v37, v40);
      BOOL v60 = v38 < v36;
      if (result) {
        BOOL v60 = (int)result < 0;
      }
      if (!v60 && *(_DWORD *)(a3 + 24) < *(_DWORD *)(a2 + 24))
      {
LABEL_55:
        uint64_t v43 = *(void *)(a2 + 16);
        long long v44 = *(_OWORD *)a2;
        uint64_t v45 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v45;
        *(_OWORD *)a3 = v44;
        *(void *)(a3 + 16) = v43;
        LODWORD(v43) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v43;
        int v46 = *(char *)(a1 + 23);
        int v47 = *(char *)(a2 + 23);
        if (v47 >= 0) {
          size_t v48 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v48 = *(void *)(a2 + 8);
        }
        if (v47 >= 0) {
          BOOL v49 = (const void *)a2;
        }
        else {
          BOOL v49 = *(const void **)a2;
        }
        if (v46 >= 0) {
          size_t v50 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v50 = *(void *)(a1 + 8);
        }
        if (v46 >= 0) {
          BOOL v51 = (const void *)a1;
        }
        else {
          BOOL v51 = *(const void **)a1;
        }
        if (v50 >= v48) {
          size_t v52 = v48;
        }
        else {
          size_t v52 = v50;
        }
        uint64_t result = memcmp(v49, v51, v52);
        BOOL v54 = v48 < v50;
        if (result) {
          BOOL v54 = (int)result < 0;
        }
        if (v54) {
          goto LABEL_73;
        }
        uint64_t result = memcmp(v51, v49, v52);
        BOOL v61 = v50 < v48;
        if (result) {
          BOOL v61 = (int)result < 0;
        }
        if (!v61 && *(_DWORD *)(a2 + 24) < *(_DWORD *)(a1 + 24))
        {
LABEL_73:
          uint64_t v55 = *(void *)(a1 + 16);
          long long v56 = *(_OWORD *)a1;
          uint64_t v57 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v57;
          *(_OWORD *)a2 = v56;
          *(void *)(a2 + 16) = v55;
          LODWORD(v55) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v55;
        }
      }
    }
  }
  return result;
}

__n128 sub_ABF6C(char *a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    int64_t v64 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - a1) >> 5)
    {
      uint64_t v7 = ((char *)a4 - a1) >> 4;
      uint64_t v8 = v7 + 1;
      int v9 = (__n128 *)&a1[32 * v7 + 32];
      uint64_t v10 = v7 + 2;
      if (v7 + 2 < a3)
      {
        int v11 = v9[3].n128_i8[7];
        int v12 = v9[1].n128_i8[7];
        if (v12 >= 0) {
          size_t v13 = v9[1].n128_u8[7];
        }
        else {
          size_t v13 = v9->n128_u64[1];
        }
        if (v12 >= 0) {
          size_t v14 = &a1[32 * v7 + 32];
        }
        else {
          size_t v14 = (char *)v9->n128_u64[0];
        }
        if (v11 >= 0) {
          size_t v15 = v9[3].n128_u8[7];
        }
        else {
          size_t v15 = v9[2].n128_u64[1];
        }
        if (v11 >= 0) {
          size_t v16 = v9 + 2;
        }
        else {
          size_t v16 = (__n128 *)v9[2].n128_u64[0];
        }
        if (v15 >= v13) {
          size_t v17 = v13;
        }
        else {
          size_t v17 = v15;
        }
        long long __s2 = v14;
        int v18 = memcmp(v14, v16, v17);
        BOOL v19 = v13 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (v19) {
          goto LABEL_26;
        }
        int v20 = memcmp(v16, __s2, v17);
        BOOL v21 = v15 < v13;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        if (!v21 && *(_DWORD *)&a1[32 * v8 + 24] < (signed __int32)v9[3].n128_u32[2])
        {
LABEL_26:
          v9 += 2;
          uint64_t v8 = v10;
        }
      }
      int v22 = v5[1].n128_i8[7];
      int v23 = v9[1].n128_i8[7];
      if (v23 >= 0) {
        size_t v24 = v9[1].n128_u8[7];
      }
      else {
        size_t v24 = v9->n128_u64[1];
      }
      if (v23 >= 0) {
        long long v25 = v9;
      }
      else {
        long long v25 = (__n128 *)v9->n128_u64[0];
      }
      if (v22 >= 0) {
        size_t v26 = v5[1].n128_u8[7];
      }
      else {
        size_t v26 = v5->n128_u64[1];
      }
      if (v22 >= 0) {
        int v27 = v5;
      }
      else {
        int v27 = (__n128 *)v5->n128_u64[0];
      }
      if (v26 >= v24) {
        size_t v28 = v24;
      }
      else {
        size_t v28 = v26;
      }
      int v29 = memcmp(v25, v27, v28);
      BOOL v31 = v24 < v26;
      if (v29) {
        BOOL v31 = v29 < 0;
      }
      if (!v31)
      {
        int v32 = memcmp(v27, v25, v28);
        BOOL v33 = v26 < v24;
        if (v32) {
          BOOL v33 = v32 < 0;
        }
        if (v33)
        {
          signed __int32 v34 = v5[1].n128_i32[2];
        }
        else
        {
          signed __int32 v34 = v5[1].n128_i32[2];
          if ((signed __int32)v9[1].n128_u32[2] < v34) {
            return result;
          }
        }
        __s2a = a1;
        __int8 v35 = 0;
        __n128 v66 = *v5;
        int64_t v67 = v5[1].n128_i64[0];
        v5->n128_u64[1] = 0;
        v5[1].n128_u64[0] = 0;
        v5->n128_u64[0] = 0;
        signed __int32 v68 = v34;
        while (1)
        {
          if (v35 < 0) {
            operator delete((void *)v5->n128_u64[0]);
          }
          __n128 v36 = *v9;
          v5[1].n128_u64[0] = v9[1].n128_u64[0];
          *unint64_t v5 = v36;
          v9[1].n128_u8[7] = 0;
          v9->n128_u8[0] = 0;
          v5[1].n128_u32[2] = v9[1].n128_u32[2];
          if (v64 < v8) {
            break;
          }
          uint64_t v37 = 2 * v8;
          uint64_t v38 = (2 * v8) | 1;
          long long v39 = (__n128 *)&__s2a[32 * v38];
          uint64_t v40 = v37 + 2;
          if (v37 + 2 < a3)
          {
            int v41 = v39[3].n128_i8[7];
            int v42 = v39[1].n128_i8[7];
            if (v42 >= 0) {
              size_t v43 = v39[1].n128_u8[7];
            }
            else {
              size_t v43 = v39->n128_u64[1];
            }
            if (v42 >= 0) {
              long long v44 = &__s2a[32 * v38];
            }
            else {
              long long v44 = (char *)v39->n128_u64[0];
            }
            if (v41 >= 0) {
              size_t v45 = v39[3].n128_u8[7];
            }
            else {
              size_t v45 = v39[2].n128_u64[1];
            }
            if (v41 >= 0) {
              int v46 = v39 + 2;
            }
            else {
              int v46 = (__n128 *)v39[2].n128_u64[0];
            }
            if (v45 >= v43) {
              size_t v47 = v43;
            }
            else {
              size_t v47 = v45;
            }
            int v48 = memcmp(v44, v46, v47);
            BOOL v49 = v43 < v45;
            if (v48) {
              BOOL v49 = v48 < 0;
            }
            if (v49) {
              goto LABEL_78;
            }
            int v50 = memcmp(v46, v44, v47);
            BOOL v51 = v45 < v43;
            if (v50) {
              BOOL v51 = v50 < 0;
            }
            if (!v51 && *(_DWORD *)&__s2a[32 * v38 + 24] < (signed __int32)v39[3].n128_u32[2])
            {
LABEL_78:
              v39 += 2;
              uint64_t v38 = v40;
            }
          }
          int v52 = v39[1].n128_i8[7];
          if (v52 >= 0) {
            size_t v53 = v39[1].n128_u8[7];
          }
          else {
            size_t v53 = v39->n128_u64[1];
          }
          if (v52 >= 0) {
            BOOL v54 = v39;
          }
          else {
            BOOL v54 = (__n128 *)v39->n128_u64[0];
          }
          if (v67 >= 0) {
            size_t v55 = HIBYTE(v67);
          }
          else {
            size_t v55 = v66.n128_u64[1];
          }
          if (v67 >= 0) {
            long long v56 = &v66;
          }
          else {
            long long v56 = (__n128 *)v66.n128_u64[0];
          }
          if (v55 >= v53) {
            size_t v57 = v53;
          }
          else {
            size_t v57 = v55;
          }
          int v58 = memcmp(v54, v56, v57);
          BOOL v59 = v53 < v55;
          if (v58) {
            BOOL v59 = v58 < 0;
          }
          if (v59) {
            break;
          }
          int v60 = memcmp(v56, v54, v57);
          BOOL v61 = v55 < v53;
          if (v60) {
            BOOL v61 = v60 < 0;
          }
          if (!v61 && (signed __int32)v39[1].n128_u32[2] < v68) {
            break;
          }
          __int8 v35 = v9[1].n128_i8[7];
          unint64_t v5 = v9;
          int v9 = v39;
          uint64_t v8 = v38;
        }
        if (v9[1].n128_i8[7] < 0) {
          operator delete((void *)v9->n128_u64[0]);
        }
        __n128 result = v66;
        v9[1].n128_u64[0] = v67;
        __n128 *v9 = result;
        v9[1].n128_u32[2] = v68;
      }
    }
  }
  return result;
}

void sub_AC34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *(void *)a1;
    *(void *)size_t v16 = *(void *)(a1 + 8);
    *(void *)&v16[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    uint64_t v10 = sub_AC4CC((long long *)a1, a3, a4);
    int v11 = v10;
    int v12 = (void **)(a2 - 32);
    int v13 = *((char *)v10 + 23);
    if (v10 == (long long *)(a2 - 32))
    {
      if (v13 < 0) {
        operator delete(*(void **)v10);
      }
      *(void *)int v11 = v7;
      *((void *)v11 + 1) = *(void *)v16;
      *(void *)((char *)v11 + 15) = *(void *)&v16[7];
      *((unsigned char *)v11 + 23) = v8;
      *((_DWORD *)v11 + 6) = v9;
    }
    else
    {
      if (v13 < 0) {
        operator delete(*(void **)v10);
      }
      long long v14 = *(_OWORD *)v12;
      *((void *)v11 + 2) = *(void *)(a2 - 16);
      *int v11 = v14;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 - 8);
      uint64_t v15 = (uint64_t)(v11 + 2);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v12);
      }
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = *(void *)v16;
      *(void *)(a2 - 17) = *(void *)&v16[7];
      *(unsigned char *)(a2 - 9) = v8;
      *(_DWORD *)(a2 - 8) = v9;
      sub_AC658(a1, v15, a3, (v15 - a1) >> 5);
    }
  }
}

void sub_AC4B4(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_AC4CC(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v24 = v5 >> 1;
  do
  {
    uint64_t v8 = v4 + 1;
    int v6 = &a1[2 * v4 + 2];
    uint64_t v9 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3)
    {
      uint64_t v23 = v8;
      int v11 = *((char *)v6 + 55);
      int v12 = *((char *)v6 + 23);
      if (v12 >= 0) {
        size_t v13 = *((unsigned __int8 *)v6 + 23);
      }
      else {
        size_t v13 = *((void *)v6 + 1);
      }
      if (v12 >= 0) {
        long long v14 = v6;
      }
      else {
        long long v14 = *(const void **)v6;
      }
      if (v11 >= 0) {
        size_t v15 = *((unsigned __int8 *)v6 + 55);
      }
      else {
        size_t v15 = *((void *)v6 + 5);
      }
      if (v11 >= 0) {
        size_t v16 = v6 + 2;
      }
      else {
        size_t v16 = (const void *)*((void *)v6 + 4);
      }
      if (v15 >= v13) {
        size_t v17 = v13;
      }
      else {
        size_t v17 = v15;
      }
      int v18 = memcmp(v14, v16, v17);
      BOOL v19 = v13 < v15;
      if (v18) {
        BOOL v19 = v18 < 0;
      }
      if (v19) {
        goto LABEL_4;
      }
      int v20 = memcmp(v16, v14, v17);
      BOOL v21 = v15 < v13;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21 && SDWORD2(a1[2 * v23 + 1]) < *((_DWORD *)v6 + 14))
      {
LABEL_4:
        v6 += 2;
        uint64_t v4 = v10;
      }
    }
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v7 = *v6;
    *((void *)a1 + 2) = *((void *)v6 + 2);
    *a1 = v7;
    *((unsigned char *)v6 + 23) = 0;
    *(unsigned char *)int v6 = 0;
    *((_DWORD *)a1 + 6) = *((_DWORD *)v6 + 6);
    a1 = v6;
  }
  while (v4 <= v24);
  return v6;
}

double sub_AC658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  uint64_t v41 = v4;
  uint64_t v42 = v5;
  unint64_t v9 = v6 >> 1;
  uint64_t v10 = (long long *)(a1 + 32 * (v6 >> 1));
  int v11 = (long long *)(a2 - 32);
  int v12 = *(char *)(a2 - 9);
  int v13 = *((char *)v10 + 23);
  if (v13 >= 0) {
    size_t v14 = *((unsigned __int8 *)v10 + 23);
  }
  else {
    size_t v14 = *((void *)v10 + 1);
  }
  if (v13 >= 0) {
    size_t v15 = (const void *)(a1 + 32 * (v6 >> 1));
  }
  else {
    size_t v15 = *(const void **)v10;
  }
  if (v12 >= 0) {
    size_t v16 = *(unsigned __int8 *)(a2 - 9);
  }
  else {
    size_t v16 = *(void *)(a2 - 24);
  }
  if (v12 >= 0) {
    size_t v17 = (const void *)(a2 - 32);
  }
  else {
    size_t v17 = *(const void **)(a2 - 32);
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  int v19 = memcmp(v15, v17, v18);
  BOOL v20 = v14 < v16;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v20)
  {
    int v21 = *(_DWORD *)(a2 - 8);
LABEL_25:
    uint64_t v39 = *((void *)v11 + 2);
    int64_t v25 = v39;
    long long v38 = *v11;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)int v11 = 0;
    int v40 = v21;
    if (v25 >= 0) {
      size_t v26 = HIBYTE(v25);
    }
    else {
      size_t v26 = *((void *)&v38 + 1);
    }
    if (v25 >= 0) {
      int v27 = &v38;
    }
    else {
      int v27 = (long long *)v38;
    }
    while (1)
    {
      size_t v28 = v10;
      if (*((char *)v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      long long v29 = *v10;
      *((void *)v11 + 2) = *((void *)v10 + 2);
      *int v11 = v29;
      *((unsigned char *)v10 + 23) = 0;
      *(unsigned char *)uint64_t v10 = 0;
      *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 6);
      if (!v9) {
        break;
      }
      unint64_t v9 = (v9 - 1) >> 1;
      uint64_t v10 = (long long *)(a1 + 32 * v9);
      int v30 = *((char *)v10 + 23);
      if (v30 >= 0) {
        size_t v31 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        size_t v31 = *((void *)v10 + 1);
      }
      if (v30 >= 0) {
        int v32 = (const void *)(a1 + 32 * v9);
      }
      else {
        int v32 = *(const void **)v10;
      }
      if (v26 >= v31) {
        size_t v33 = v31;
      }
      else {
        size_t v33 = v26;
      }
      int v34 = memcmp(v32, v27, v33);
      BOOL v35 = v31 < v26;
      if (v34) {
        BOOL v35 = v34 < 0;
      }
      int v11 = v28;
      if (!v35)
      {
        int v36 = memcmp(v27, v32, v33);
        BOOL v37 = v26 < v31;
        if (v36) {
          BOOL v37 = v36 < 0;
        }
        if (v37) {
          break;
        }
        int v11 = v28;
        if (*(_DWORD *)(a1 + 32 * v9 + 24) >= v40) {
          break;
        }
      }
    }
    if (*((char *)v28 + 23) < 0) {
      operator delete(*(void **)v28);
    }
    double result = *(double *)&v38;
    *size_t v28 = v38;
    *((void *)v28 + 2) = v39;
    *((_DWORD *)v28 + 6) = v40;
    return result;
  }
  int v22 = memcmp(v17, v15, v18);
  BOOL v24 = v16 < v14;
  if (v22) {
    BOOL v24 = v22 < 0;
  }
  if (!v24)
  {
    int v21 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)(a1 + 32 * v9 + 24) < v21) {
      goto LABEL_25;
    }
  }
  return result;
}

unsigned __int8 *sub_AC898(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return v4;
  }
  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = 16 * (v7 - v6) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a3[5] + a3[4])
  {
    sub_ACB08((uint64_t)a3);
    uint64_t v6 = a3[1];
    uint64_t v7 = a3[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
    if (((char)v4[23] & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    sub_4200((unsigned char *)v10, *(void **)v4, *((void *)v4 + 1));
    goto LABEL_11;
  }
  unint64_t v9 = a3[5] + a3[4];
  uint64_t v10 = *(void *)(v6 + ((v9 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v9 & 0x7F);
  if ((char)v4[23] < 0) {
    goto LABEL_10;
  }
LABEL_8:
  long long v11 = *(_OWORD *)v4;
  *(void *)(v10 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v10 = v11;
LABEL_11:
  *(_DWORD *)(v10 + 24) = *((_DWORD *)v4 + 6);
  uint64_t v12 = a3[5] + 1;
  a3[5] = v12;
  int v13 = v4 + 32;
  if (v4 + 32 != a2)
  {
    size_t v14 = v4;
    do
    {
      size_t v17 = v13;
      uint64_t v18 = v4[23];
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = v4[23];
      }
      else {
        uint64_t v19 = *((void *)v4 + 1);
      }
      uint64_t v20 = v14[55];
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *((void *)v14 + 5);
      }
      if (v19 != v20) {
        goto LABEL_31;
      }
      if (v21 >= 0) {
        int v22 = v17;
      }
      else {
        int v22 = *(unsigned __int8 **)v17;
      }
      if ((v18 & 0x80) != 0)
      {
        BOOL v30 = memcmp(*(const void **)v4, v22, *((void *)v4 + 1)) == 0;
        int64_t v25 = v14 + 56;
        int v24 = *((_DWORD *)v14 + 14);
        if (!v30) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v23 = v4;
        if (v4[23])
        {
          while (*v23 == *v22)
          {
            ++v23;
            ++v22;
            if (!--v18) {
              goto LABEL_30;
            }
          }
LABEL_31:
          int64_t v25 = v14 + 56;
          goto LABEL_32;
        }
LABEL_30:
        int64_t v25 = v14 + 56;
        int v24 = *((_DWORD *)v14 + 14);
      }
      if (*((_DWORD *)v4 + 6) == v24) {
        goto LABEL_16;
      }
LABEL_32:
      uint64_t v26 = a3[1];
      uint64_t v27 = a3[2];
      uint64_t v28 = 16 * (v27 - v26) - 1;
      if (v27 == v26) {
        uint64_t v28 = 0;
      }
      if (v28 == v12 + a3[4])
      {
        sub_ACB08((uint64_t)a3);
        uint64_t v26 = a3[1];
        uint64_t v27 = a3[2];
      }
      if (v27 == v26)
      {
        uint64_t v15 = 0;
        if ((char)v14[55] < 0) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v29 = a3[5] + a3[4];
        uint64_t v15 = *(void *)(v26 + ((v29 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v29 & 0x7F);
        if ((char)v14[55] < 0)
        {
LABEL_38:
          sub_4200((unsigned char *)v15, *(void **)v17, *((void *)v14 + 5));
          goto LABEL_15;
        }
      }
      long long v16 = *(_OWORD *)v17;
      *(void *)(v15 + 16) = *((void *)v17 + 2);
      *(_OWORD *)uint64_t v15 = v16;
LABEL_15:
      *(_DWORD *)(v15 + 24) = *v25;
      uint64_t v12 = a3[5] + 1;
      a3[5] = v12;
      uint64_t v4 = v17;
LABEL_16:
      int v13 = v17 + 32;
      size_t v14 = v17;
    }
    while (v17 + 32 != a2);
  }
  return a2;
}

void sub_ACB08(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        int v34 = (char *)operator new(8 * v31);
        BOOL v35 = &v34[8 * v32];
        int v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            BOOL v74 = &v34[8 * v32];
            int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              int v40 = &v35[v76];
              v7 += v76;
              char v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        int v34 = (char *)operator new(8 * v42);
        BOOL v35 = &v34[8 * v43];
        int v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            long long v82 = &v34[8 * v43];
            size_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              size_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *long long v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            size_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)size_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  int64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      BOOL v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      int64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          int v60 = (char *)operator new(8 * v59);
          int64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          size_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int64_t v64 = &v53[v68];
            int v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            BOOL v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)BOOL v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          size_t v57 = &v29[8 * (v56 >> 1)];
          size_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          int64_t v25 = v27;
        }
      }
      else
      {
        size_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      BOOL v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  BOOL v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_AD078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_AD094(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_AD0A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_AD0C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AD0D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AD3A8(a1);
    unint64_t v5 = *(void *)(a1 + 64);
    if (v5 >= ~a2) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 64);
    if (v5 >= ~a2) {
      goto LABEL_37;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_37:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 56);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_37;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_37;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_9CC6C(v20, a1, v13);
      sub_9C704(a1, (uint64_t)v20);
      int64_t v16 = v25;
      if (v25)
      {
        uint64_t v17 = v22;
        if (v22)
        {
          uint64_t v18 = 0;
          do
          {
            if (*((char *)v25 + v18 + 23) < 0) {
              operator delete(*(void **)((char *)v25 + v18));
            }
            v18 += 24;
            --v17;
          }
          while (v17);
          int64_t v16 = v25;
        }
        free(v16);
      }
      if (v24 < 0)
      {
        operator delete(__p);
        if ((v21 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if ((v21 & 0x80000000) == 0)
      {
        return 1;
      }
      operator delete(*(void **)&v20[4]);
      return 1;
    }
  }
  return result;
}

void sub_AD344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_AD358(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD36C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AD3A8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  float v6 = (float)v2;
  do
  {
    unint64_t v7 = v5;
    v5 >>= 1;
  }
  while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
  sub_9CC6C(v12, a1, v5);
  sub_9C704(a1, (uint64_t)v12);
  float v8 = v17;
  if (v17)
  {
    uint64_t v9 = v14;
    if (v14)
    {
      uint64_t v10 = 0;
      do
      {
        if (*((char *)v17 + v10 + 23) < 0) {
          operator delete(*(void **)((char *)v17 + v10));
        }
        v10 += 24;
        --v9;
      }
      while (v9);
      float v8 = v17;
    }
    free(v8);
  }
  if (v16 < 0)
  {
    operator delete(__p);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_22:
    operator delete(*(void **)&v12[4]);
    goto LABEL_20;
  }
  if (v13 < 0) {
    goto LABEL_22;
  }
LABEL_20:
  uint64_t result = 1;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_AD4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_AD4E8(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)(v5 - v6) >= 0xAAAAAAAAAAAAAAALL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 104);
  if (!v6) {
    goto LABEL_18;
  }
  unint64_t v11 = (unsigned __int8 **)(v10 + 24 * a3);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
  if ((v12 & 0x80u) == 0) {
    char v13 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 55);
  }
  else {
    char v13 = *(unsigned __int8 **)(a1 + 40);
  }
  uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    uint64_t v14 = v11[1];
  }
  if (v13 != v14) {
    goto LABEL_18;
  }
  char v16 = (const void **)(a1 + 32);
  if (v15 >= 0) {
    uint64_t v17 = (unsigned __int8 *)(v10 + 24 * a3);
  }
  else {
    uint64_t v17 = *v11;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v17, *(void *)(a1 + 40))) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v16 == *v17)
    {
      char v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_21;
      }
    }
LABEL_18:
    *(void *)(a1 + 64) = v5 + 1;
    uint64_t v18 = v10 + 24 * a3;
    if ((*(char *)(v18 + 23) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    operator delete(*(void **)v18);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    sub_4200((unsigned char *)v18, *(void **)a2, *((void *)a2 + 1));
    goto LABEL_24;
  }
LABEL_21:
  *(void *)(a1 + 56) = v6 - 1;
  uint64_t v18 = v10 + 24 * a3;
  if (*(char *)(v18 + 23) < 0) {
    goto LABEL_22;
  }
LABEL_19:
  if (*((char *)a2 + 23) < 0) {
    goto LABEL_23;
  }
LABEL_20:
  long long v19 = *a2;
  *(void *)(v18 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v18 = v19;
LABEL_24:
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = v20 + 24 * a3;
  uint64_t v22 = v20 + 24 * *(void *)(a1 + 72);
  *a4 = a1;
  a4[1] = v21;
  a4[2] = v22;
}

void sub_AD688(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_AD69C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    *(void *)(v2 + 1640) = off_23FE588;
    if (*(char *)(v2 + 1695) < 0)
    {
      operator delete(*(void **)(v2 + 1672));
      *(void *)(v2 + 1568) = off_23FE588;
      if ((*(char *)(v2 + 1623) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      *(void *)(v2 + 1568) = off_23FE588;
      if ((*(char *)(v2 + 1623) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    operator delete(*(void **)(v2 + 1600));
LABEL_4:
    sub_A98A8(v2 + 1536);
    sub_285354(v2 + 8);
    sub_285120((uint64_t **)v2);
    operator delete();
  }
  return result;
}

double sub_AD794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (long long *)(a1 + 80);
    do
    {
      uint64_t v10 = a2 + v6;
      if (*(char *)(a1 + 103) < 0)
      {
        sub_4200((unsigned char *)v10, *(void **)(a1 + 80), *(void *)(a1 + 88));
      }
      else
      {
        long long v8 = *v7;
        *(void *)(v10 + 16) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v10 = v8;
      }
      double result = *(double *)(a1 + 104);
      *(double *)(a2 + v6 + 24) = result;
      v6 += 32;
    }
    while (a2 + v6 != a3);
  }
  return result;
}

void sub_AD824(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 32)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
  __cxa_rethrow();
}

void sub_AD854(_Unwind_Exception *a1)
{
}

void *sub_AD868(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (long long *)(result + 10);
    do
    {
      double result = sub_AD8F0((void *)(a2 + v5), v6);
      v5 += 48;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_AD8C0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v2) {
    sub_20A67DC(v1, v1 + v2);
  }
  __cxa_rethrow();
}

void sub_AD8DC(_Unwind_Exception *a1)
{
}

void *sub_AD8F0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    long long __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    long long __dst[4] = 0;
    __dst[5] = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  uint64_t v10 = (char *)operator new(v7);
  __dst[3] = v10;
  long long __dst[4] = v10;
  unint64_t v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  long long __dst[4] = v11;
  return __dst;
}

void sub_AD9C0(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A682C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AD9E4(uint64_t a1, uint64_t *a2, int a3)
{
  char v3 = *((unsigned char *)a2 + 23);
  if ((v3 & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23) && (*(unsigned char *)a2 & 0xDFu) - 65 < 0x1A)
    {
      unint64_t v4 = *((unsigned __int8 *)a2 + 23);
      goto LABEL_7;
    }
    return 0;
  }
  unint64_t v4 = a2[1];
  if (!v4 || (*(unsigned char *)*a2 & 0xDFu) - 65 >= 0x1A) {
    return 0;
  }
LABEL_7:
  if (v4 < 2)
  {
    if (!a3) {
      return 1;
    }
  }
  else
  {
    if (v3 >= 0) {
      unint64_t v5 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v5 = a2[1];
    }
    if (v5 >= 2)
    {
      if (v3 >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = (uint64_t *)*a2;
      }
      for (unint64_t i = 1; v5 != i; ++i)
      {
        int v9 = *((unsigned __int8 *)v6 + i);
        BOOL v10 = (v9 - 48) >= 0xA && (v9 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (v10 && v9 != 95)
        {
          if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
          {
            uint64_t v8 = a2[1];
            if (*(unsigned char *)(*a2 + i) != 46) {
              return 0;
            }
          }
          else
          {
            uint64_t v8 = *((unsigned __int8 *)a2 + 23);
            if (*((unsigned char *)a2 + i) != 46) {
              return 0;
            }
          }
          if (i >= v8 - 1) {
            return 0;
          }
        }
      }
    }
    if ((a3 & 1) == 0) {
      return 1;
    }
  }
  uint64_t v12 = (uint64_t *)(*(void *)(*(void *)a1 + 8) + 280);
  uint64_t v13 = *v12;
  if (!*v12) {
    goto LABEL_68;
  }
  size_t v14 = v3 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
  int v15 = v3 >= 0 ? a2 : (uint64_t *)*a2;
  uint64_t v16 = *(void *)(*(void *)a1 + 8) + 280;
  do
  {
    int v17 = *(char *)(v13 + 55);
    if (v17 >= 0) {
      size_t v18 = *(unsigned __int8 *)(v13 + 55);
    }
    else {
      size_t v18 = *(void *)(v13 + 40);
    }
    if (v17 >= 0) {
      long long v19 = (const void *)(v13 + 32);
    }
    else {
      long long v19 = *(const void **)(v13 + 32);
    }
    if (v14 >= v18) {
      size_t v20 = v18;
    }
    else {
      size_t v20 = v14;
    }
    int v21 = memcmp(v19, v15, v20);
    BOOL v22 = v18 < v14;
    if (v21) {
      BOOL v22 = v21 < 0;
    }
    BOOL v23 = !v22;
    if (v22) {
      char v24 = (uint64_t *)(v13 + 8);
    }
    else {
      char v24 = (uint64_t *)v13;
    }
    if (v23) {
      uint64_t v16 = v13;
    }
    uint64_t v13 = *v24;
  }
  while (*v24);
  if ((uint64_t *)v16 == v12) {
    goto LABEL_68;
  }
  int v25 = *(char *)(v16 + 55);
  size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
  uint64_t v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
  size_t v28 = v26 >= v14 ? v14 : v26;
  int v29 = memcmp(v15, v27, v28);
  BOOL v30 = v14 < v26;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30) {
LABEL_68:
  }
    uint64_t v16 = (uint64_t)v12;
  return v12 == (uint64_t *)v16;
}

uint64_t sub_ADC14(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)a1 + 8);
  if (!result) {
    return result;
  }
  uint64_t v6 = a2;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(a2 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (!v10)
  {
LABEL_11:
    if (v8 >= 0) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)a1 + 8);
      if ((uint64_t *)(v12 + 200) != sub_ADE40(v12 + 192, v6)) {
        return 1;
      }
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    if (v8 < 0) {
      uint64_t v7 = v9;
    }
    if (v7)
    {
      uint64_t v13 = *(void *)(*(void *)a1 + 8);
      if ((uint64_t *)(v13 + 40) != sub_ADE40(v13 + 32, v6)) {
        return 1;
      }
    }
    if (a3)
    {
      uint64_t v14 = *(void *)(*(void *)a1 + 8);
      uint64_t v15 = *(void *)(v14 + 280);
      if (v15)
      {
        uint64_t v16 = v14 + 280;
        int v17 = *(char *)(v6 + 23);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          size_t v18 = *(void *)(v6 + 8);
        }
        if (v17 < 0) {
          uint64_t v6 = *(void *)v6;
        }
        uint64_t v19 = v14 + 280;
        do
        {
          int v20 = *(char *)(v15 + 55);
          if (v20 >= 0) {
            size_t v21 = *(unsigned __int8 *)(v15 + 55);
          }
          else {
            size_t v21 = *(void *)(v15 + 40);
          }
          if (v20 >= 0) {
            BOOL v22 = (const void *)(v15 + 32);
          }
          else {
            BOOL v22 = *(const void **)(v15 + 32);
          }
          if (v18 >= v21) {
            size_t v23 = v21;
          }
          else {
            size_t v23 = v18;
          }
          int v24 = memcmp(v22, (const void *)v6, v23);
          BOOL v25 = v21 < v18;
          if (v24) {
            BOOL v25 = v24 < 0;
          }
          BOOL v26 = !v25;
          if (v25) {
            uint64_t v27 = (uint64_t *)(v15 + 8);
          }
          else {
            uint64_t v27 = (uint64_t *)v15;
          }
          if (v26) {
            uint64_t v19 = v15;
          }
          uint64_t v15 = *v27;
        }
        while (*v27);
        if (v19 != v16)
        {
          uint64_t v30 = *(void *)(v19 + 32);
          uint64_t v29 = v19 + 32;
          uint64_t v28 = v30;
          int v31 = *(char *)(v29 + 23);
          size_t v32 = v31 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(void *)(v29 + 8);
          uint64_t v33 = (const void *)(v31 >= 0 ? v29 : v28);
          size_t v34 = v32 >= v18 ? v18 : v32;
          int v35 = memcmp((const void *)v6, v33, v34);
          BOOL v36 = v18 >= v32;
          if (v35) {
            BOOL v36 = v35 >= 0;
          }
          if (v36) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  if ((uint64_t *)(result + 8) == sub_ADE40(result, a2))
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    char v8 = *(unsigned char *)(v6 + 23);
    goto LABEL_11;
  }
  return 1;
}

uint64_t *sub_ADE40(uint64_t a1, uint64_t a2)
{
  char v3 = (uint64_t *)(a1 + 8);
  unint64_t v4 = sub_ADF64(a1, (uint64_t *)a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  unint64_t v5 = v4;
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  char v7 = v6;
  unint64_t v8 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = *((unsigned __int8 *)v4 + 55);
  char v11 = v10;
  uint64_t v12 = v4[5];
  if ((v10 & 0x80u) == 0) {
    unint64_t v13 = *((unsigned __int8 *)v4 + 55);
  }
  else {
    unint64_t v13 = v4[5];
  }
  if (v13 >= v9) {
    unint64_t v14 = v9;
  }
  else {
    unint64_t v14 = v13;
  }
  if (!v14)
  {
LABEL_23:
    if (v7 < 0) {
      unint64_t v6 = v8;
    }
    if (v11 >= 0) {
      unint64_t v20 = v10;
    }
    else {
      unint64_t v20 = v12;
    }
    if (v6 >= v20) {
      return v5;
    }
    return v3;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    char v17 = __tolower(*(char *)(v16 + v15));
    uint64_t v18 = *((char *)v5 + 55) >= 0 ? (uint64_t)(v5 + 4) : v5[4];
    char v19 = __tolower(*(char *)(v18 + v15));
    if (v17 > v19) {
      return v5;
    }
    if (v17 < v19) {
      return v3;
    }
    if (v14 == ++v15)
    {
      unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      unint64_t v8 = *(void *)(a2 + 8);
      unint64_t v10 = *((unsigned __int8 *)v5 + 55);
      uint64_t v12 = v5[5];
      char v11 = *((unsigned char *)v5 + 55);
      char v7 = *(unsigned char *)(a2 + 23);
      goto LABEL_23;
    }
  }
}

uint64_t *sub_ADF64(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3)
  {
    unint64_t v5 = a3;
    do
    {
      unint64_t v7 = *((unsigned __int8 *)v5 + 55);
      char v9 = v7;
      unint64_t v10 = v5[5];
      if ((v7 & 0x80u) == 0) {
        unint64_t v11 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        unint64_t v11 = v5[5];
      }
      unint64_t v12 = *((unsigned __int8 *)a2 + 23);
      char v13 = v12;
      unint64_t v14 = a2[1];
      if ((v12 & 0x80u) == 0) {
        unint64_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        unint64_t v15 = a2[1];
      }
      if (v15 >= v11) {
        unint64_t v16 = v11;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        uint64_t v17 = 0;
        while (1)
        {
          if (*((char *)v5 + 55) >= 0) {
            uint64_t v18 = v5 + 4;
          }
          else {
            uint64_t v18 = (uint64_t *)v5[4];
          }
          char v19 = __tolower(*((char *)v18 + v17));
          if (*((char *)a2 + 23) >= 0) {
            unint64_t v20 = a2;
          }
          else {
            unint64_t v20 = (uint64_t *)*a2;
          }
          char v21 = __tolower(*((char *)v20 + v17));
          if (v19 > v21)
          {
            a4 = v5;
            goto LABEL_11;
          }
          if (v19 < v21) {
            break;
          }
          if (v16 == ++v17)
          {
            unint64_t v7 = *((unsigned __int8 *)v5 + 55);
            unint64_t v10 = v5[5];
            unint64_t v12 = *((unsigned __int8 *)a2 + 23);
            unint64_t v14 = a2[1];
            char v13 = *((unsigned char *)a2 + 23);
            char v9 = *((unsigned char *)v5 + 55);
            goto LABEL_3;
          }
        }
        ++v5;
      }
      else
      {
LABEL_3:
        if (v9 < 0) {
          unint64_t v7 = v10;
        }
        if (v13 >= 0) {
          unint64_t v8 = v12;
        }
        else {
          unint64_t v8 = v14;
        }
        if (v7 < v8) {
          ++v5;
        }
        else {
          a4 = v5;
        }
      }
LABEL_11:
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a4;
}

void sub_AE0A8()
{
}

double sub_AE0BC(uint64_t a1)
{
  return **(double **)(a1 + 16);
}

uint64_t sub_AE0C8()
{
  return 17;
}

uint64_t sub_AE0D0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_AE0D8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_AE0E4()
{
}

uint64_t sub_AE0FC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_AE104(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

char *sub_AE10C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = sub_AE20C(a1, &v16, a2);
  if (*v6) {
    return (char *)*v6;
  }
  unint64_t v8 = v6;
  char v9 = (char *)operator new(0x48uLL);
  unint64_t v10 = v9 + 32;
  unint64_t v11 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v10, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    *((void *)v9 + 6) = *((void *)v11 + 2);
    *(_OWORD *)unint64_t v10 = v12;
  }
  v9[56] = 0;
  *((void *)v9 + 8) = 0;
  uint64_t v13 = v16;
  *(void *)char v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v13;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v14 = **(void **)a1;
  unint64_t v15 = (uint64_t *)v9;
  if (v14)
  {
    *(void *)a1 = v14;
    unint64_t v15 = (uint64_t *)*v8;
  }
  sub_2F250(*(uint64_t **)(a1 + 8), v15);
  ++*(void *)(a1 + 16);
  return v9;
}

void sub_AE1F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_AE20C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
  {
    unint64_t v7 = (uint64_t *)(a1 + 8);
    goto LABEL_63;
  }
  while (1)
  {
    while (1)
    {
      unint64_t v7 = v4;
      unint64_t v8 = v4 + 4;
      unint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      unint64_t v10 = *(void *)(a3 + 8);
      unint64_t v11 = (v9 & 0x80u) == 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
      unint64_t v12 = *((unsigned __int8 *)v7 + 55);
      unint64_t v13 = v7[5];
      unint64_t v14 = (v12 & 0x80u) == 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      uint64_t v15 = v14 >= v11 ? v11 : v14;
      if (v15) {
        break;
      }
LABEL_25:
      if ((v9 & 0x80u) == 0) {
        unint64_t v21 = v9;
      }
      else {
        unint64_t v21 = v10;
      }
      if ((v12 & 0x80u) == 0) {
        unint64_t v22 = v12;
      }
      else {
        unint64_t v22 = v13;
      }
      if (v21 >= v22) {
        goto LABEL_34;
      }
LABEL_3:
      unint64_t v4 = (uint64_t *)*v7;
      unint64_t v5 = v7;
      if (!*v7) {
        goto LABEL_63;
      }
    }
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
      char v18 = __tolower(*(char *)(v17 + v16));
      uint64_t v19 = *((char *)v7 + 55) >= 0 ? (uint64_t)v8 : v7[4];
      char v20 = __tolower(*(char *)(v19 + v16));
      if (v18 > v20) {
        break;
      }
      if (v18 < v20) {
        goto LABEL_3;
      }
      if (v15 == ++v16)
      {
        unint64_t v9 = *(unsigned __int8 *)(a3 + 23);
        unint64_t v10 = *(void *)(a3 + 8);
        unint64_t v12 = *((unsigned __int8 *)v7 + 55);
        unint64_t v13 = v7[5];
        goto LABEL_25;
      }
    }
    unint64_t v12 = *((unsigned __int8 *)v7 + 55);
    unint64_t v13 = v7[5];
    unint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    unint64_t v10 = *(void *)(a3 + 8);
LABEL_34:
    unint64_t v23 = (v12 & 0x80u) == 0 ? v12 : v13;
    unint64_t v24 = (v9 & 0x80u) == 0 ? v9 : v10;
    uint64_t v25 = v24 >= v23 ? v23 : v24;
    if (v25) {
      break;
    }
LABEL_55:
    if ((v12 & 0x80u) != 0) {
      unint64_t v12 = v13;
    }
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = v10;
    }
    if (v12 >= v9) {
      goto LABEL_63;
    }
LABEL_60:
    unint64_t v5 = v7 + 1;
    unint64_t v4 = (uint64_t *)v7[1];
    if (!v4) {
      goto LABEL_63;
    }
  }
  uint64_t v26 = 0;
  while (1)
  {
    uint64_t v27 = *((char *)v7 + 55) >= 0 ? (uint64_t)v8 : v7[4];
    char v28 = __tolower(*(char *)(v27 + v26));
    uint64_t v29 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
    char v30 = __tolower(*(char *)(v29 + v26));
    if (v28 > v30) {
      break;
    }
    if (v28 < v30) {
      goto LABEL_60;
    }
    if (v25 == ++v26)
    {
      unint64_t v12 = *((unsigned __int8 *)v7 + 55);
      unint64_t v13 = v7[5];
      unint64_t v9 = *(unsigned __int8 *)(a3 + 23);
      unint64_t v10 = *(void *)(a3 + 8);
      goto LABEL_55;
    }
  }
LABEL_63:
  *a2 = v7;
  return v5;
}

uint64_t sub_AE404(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4 >= 2)
  {
    for (uint64_t i = 0; i != 87; ++i)
    {
      unint64_t v6 = &word_25559A8[12 * i];
      BOOL v7 = *(char *)(a2 + 23) < 0;
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      uint64_t v9 = *((unsigned __int8 *)v6 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *((void *)v6 + 1);
      }
      if (v8 == v9)
      {
        if (!v8) {
          return 0;
        }
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = v7 ? *(void *)a2 : a2;
          __darwin_ct_rune_t v12 = __tolower(*(char *)(v11 + v10));
          unint64_t v13 = *((char *)v6 + 23) >= 0 ? &word_25559A8[12 * i] : *(__int16 **)v6;
          if (v12 != __tolower(*((char *)v13 + v10))) {
            break;
          }
          ++v10;
          BOOL v7 = *(char *)(a2 + 23) < 0;
          unint64_t v14 = *(unsigned __int8 *)(a2 + 23);
          if ((v14 & 0x80u) != 0) {
            unint64_t v14 = *(void *)(a2 + 8);
          }
          if (v10 >= v14) {
            return 0;
          }
        }
      }
    }
  }
  if ((uint64_t *)(a1 + 8) == sub_ADE40(a1, a2)) {
    operator new();
  }
  return 1;
}

uint64_t sub_AE5C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(char *)(a1 + 23) < 0;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v3 != v4) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = v2 ? *(void *)a1 : a1;
    __darwin_ct_rune_t v9 = __tolower(*(char *)(v8 + v7));
    uint64_t v10 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    BOOL v11 = v9 == __tolower(*(char *)(v10 + v7));
    uint64_t result = v11;
    if (!v11) {
      break;
    }
    ++v7;
    BOOL v2 = *(char *)(a1 + 23) < 0;
    unint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    if ((v13 & 0x80u) != 0) {
      unint64_t v13 = *(void *)(a1 + 8);
    }
    if (v7 >= v13) {
      return 1;
    }
  }
  return result;
}

void sub_AE6C0()
{
}

uint64_t sub_AE6D4()
{
  return 0;
}

uint64_t sub_AE6E0(uint64_t a1, void *a2)
{
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8) - v2;
  uint64_t v4 = v2 + 8 * *a2;
  if (*a2 >= (unint64_t)(v3 >> 3)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_AE700(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3;
}

char *sub_AE714(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = sub_AE20C(a1, &v16, a2);
  if (*v6) {
    return (char *)*v6;
  }
  uint64_t v8 = v6;
  __darwin_ct_rune_t v9 = (char *)operator new(0x48uLL);
  uint64_t v10 = v9 + 32;
  BOOL v11 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v10, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    *((void *)v9 + 6) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v10 = v12;
  }
  v9[56] = 0;
  *((void *)v9 + 8) = 0;
  uint64_t v13 = v16;
  *(void *)__darwin_ct_rune_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v13;
  uint64_t *v8 = (uint64_t)v9;
  uint64_t v14 = **(void **)a1;
  uint64_t v15 = (uint64_t *)v9;
  if (v14)
  {
    *(void *)a1 = v14;
    uint64_t v15 = (uint64_t *)*v8;
  }
  sub_2F250(*(uint64_t **)(a1 + 8), v15);
  ++*(void *)(a1 + 16);
  return v9;
}

void sub_AE800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AE814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_AE990(a1, a2);
  if (v4 != -1) {
    return *(void *)(a1 + 112) + 32 * v4;
  }
  uint64_t v8 = v5;
  if (sub_AEBF0(a1, 1))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long __dst = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a2 + 16);
    }
    *(_OWORD *)long long __p = __dst;
    uint64_t v13 = v16;
    uint64_t v14 = 0;
    uint64_t v9 = sub_AE990(a1, (uint64_t)__p);
    if (v9 == -1)
    {
      sub_AEEC0(a1, (long long *)__p, v10, &__dst);
      unint64_t v6 = (void *)*((void *)&__dst + 1);
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        return (uint64_t)v6;
      }
    }
    else
    {
      unint64_t v6 = (void *)(*(void *)(a1 + 112) + 32 * v9);
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        return (uint64_t)v6;
      }
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long __dst = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a2 + 16);
    }
    *(_OWORD *)long long __p = __dst;
    uint64_t v13 = v16;
    uint64_t v14 = 0;
    sub_AEEC0(a1, (long long *)__p, v8, v11);
    unint64_t v6 = v11[1];
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return (uint64_t)v6;
    }
  }
  operator delete(__p[0]);
  return (uint64_t)v6;
}

void sub_AE970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AE990(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v6 = v5;
  }
  unint64_t v7 = sub_B128((uint64_t)&v44, (uint64_t *)a2, v6);
  uint64_t v8 = 0;
  uint64_t v9 = v4 - 1;
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 88);
  }
  size_t __n = *(void *)(a1 + 88);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 23);
  BOOL v37 = *(const void **)v2;
  size_t v38 = *(void *)(v2 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v2 + 8);
  }
  uint64_t v43 = -1;
  uint64_t v42 = *(unsigned __int8 *)(v2 + 23);
  int v40 = (unsigned __int8 *)v2;
  uint64_t v41 = v14;
  while (1)
  {
    unint64_t v16 = v7 & v9;
    uint64_t v17 = (unsigned __int8 *)(v10 + 32 * (v7 & v9));
    int v18 = (char)v17[23];
    if (v18 >= 0) {
      uint64_t v19 = v17[23];
    }
    else {
      uint64_t v19 = *((void *)v17 + 1);
    }
    if (v12 != v19) {
      goto LABEL_29;
    }
    char v20 = v18 >= 0 ? (unsigned __int8 *)(v10 + 32 * (v7 & v9)) : *(unsigned __int8 **)v17;
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!v11) {
      return -1;
    }
    unint64_t v21 = (unsigned __int8 *)(a1 + 80);
    uint64_t v22 = v11;
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v22) {
        return -1;
      }
    }
LABEL_29:
    if (*(void *)(a1 + 56))
    {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 55);
      uint64_t v26 = (v25 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 55) : *(void *)(a1 + 40);
      if (v26 == v19)
      {
        if (v18 >= 0) {
          uint64_t v27 = v17;
        }
        else {
          uint64_t v27 = *(unsigned __int8 **)v17;
        }
        if ((v25 & 0x80) != 0)
        {
          uint64_t v29 = v11;
          int v30 = memcmp(*(const void **)(a1 + 32), v27, *(void *)(a1 + 40));
          uint64_t v14 = v41;
          uint64_t v13 = v42;
          uint64_t v11 = v29;
          if (!v30)
          {
LABEL_11:
            uint64_t v15 = v43;
            if (v43 == -1) {
              uint64_t v15 = v16;
            }
            uint64_t v43 = v15;
            goto LABEL_14;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 55)) {
            goto LABEL_11;
          }
          char v28 = (unsigned __int8 *)(a1 + 32);
          while (*v28 == *v27)
          {
            ++v28;
            ++v27;
            if (!--v25) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (v14 == v19)
    {
      if (v18 >= 0) {
        int v31 = v17;
      }
      else {
        int v31 = *(unsigned __int8 **)v17;
      }
      if ((v13 & 0x80) != 0)
      {
        uint64_t v34 = v11;
        int v35 = memcmp(v37, v31, v38);
        uint64_t v14 = v41;
        uint64_t v13 = v42;
        uint64_t v11 = v34;
        if (!v35) {
          return v16;
        }
      }
      else
      {
        size_t v32 = v40;
        if (!v13) {
          return v16;
        }
        uint64_t v33 = v13;
        while (*v32 == *v31)
        {
          ++v32;
          ++v31;
          if (!--v33) {
            return v16;
          }
        }
      }
    }
LABEL_14:
    unint64_t v7 = ++v8 + v16;
  }
  uint64_t v23 = v11;
  int v24 = memcmp(*(const void **)(a1 + 80), v20, __n);
  uint64_t v14 = v41;
  uint64_t v13 = v42;
  uint64_t v11 = v23;
  if (v24) {
    goto LABEL_29;
  }
  return -1;
}

uint64_t sub_AEBF0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AF070(a1);
    unint64_t v5 = *(void *)(a1 + 64);
    if (v5 >= ~a2) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 64);
    if (v5 >= ~a2) {
      goto LABEL_37;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_37:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 56);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_37;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_37;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_AF40C((uint64_t)v20, a1, v13);
      sub_AF1B0(a1, (uint64_t)v20);
      unint64_t v16 = v26;
      if (v26)
      {
        uint64_t v17 = v23;
        if (v23)
        {
          uint64_t v18 = 0;
          do
          {
            if (*((char *)v26 + v18 + 23) < 0) {
              operator delete(*(void **)((char *)v26 + v18));
            }
            v18 += 32;
            --v17;
          }
          while (v17);
          unint64_t v16 = v26;
        }
        free(v16);
      }
      if (v25 < 0)
      {
        operator delete(__p);
        if ((v22 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        return 1;
      }
      operator delete(v21);
      return 1;
    }
  }
  return result;
}

void sub_AEE5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9F51C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AEE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AEE84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AEE98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AEEAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_AEEC0@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)(v5 - v6) >= 0x7FFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 112);
  if (!v6) {
    goto LABEL_18;
  }
  unint64_t v11 = (unsigned __int8 **)(v10 + 32 * a3);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
  if ((v12 & 0x80u) == 0) {
    unint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 55);
  }
  else {
    unint64_t v13 = *(unsigned __int8 **)(a1 + 40);
  }
  unint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    unint64_t v14 = v11[1];
  }
  if (v13 != v14) {
    goto LABEL_18;
  }
  unint64_t v16 = (const void **)(a1 + 32);
  if (v15 >= 0) {
    uint64_t v17 = (unsigned __int8 *)(v10 + 32 * a3);
  }
  else {
    uint64_t v17 = *v11;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v17, *(void *)(a1 + 40))) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v16 == *v17)
    {
      unint64_t v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_21;
      }
    }
LABEL_18:
    *(void *)(a1 + 64) = v5 + 1;
    uint64_t v18 = v10 + 32 * a3;
    if ((*(char *)(v18 + 23) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    operator delete(*(void **)v18);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    sub_4200((unsigned char *)v18, *(void **)a2, *((void *)a2 + 1));
    goto LABEL_24;
  }
LABEL_21:
  *(void *)(a1 + 56) = v6 - 1;
  uint64_t v18 = v10 + 32 * a3;
  if (*(char *)(v18 + 23) < 0) {
    goto LABEL_22;
  }
LABEL_19:
  if (*((char *)a2 + 23) < 0) {
    goto LABEL_23;
  }
LABEL_20:
  long long v19 = *a2;
  *(void *)(v18 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v18 = v19;
LABEL_24:
  double result = *((double *)a2 + 3);
  *(double *)(v10 + 32 * a3 + 24) = result;
  uint64_t v21 = *(void *)(a1 + 112);
  uint64_t v22 = v21 + 32 * a3;
  uint64_t v23 = v21 + 32 * *(void *)(a1 + 72);
  *a4 = a1;
  a4[1] = v22;
  a4[2] = v23;
  return result;
}

void sub_AF05C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AF070(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  float v6 = (float)v2;
  do
  {
    unint64_t v7 = v5;
    v5 >>= 1;
  }
  while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
  sub_AF40C((uint64_t)v12, a1, v5);
  sub_AF1B0(a1, (uint64_t)v12);
  float v8 = v18;
  if (v18)
  {
    uint64_t v9 = v15;
    if (v15)
    {
      uint64_t v10 = 0;
      do
      {
        if (*((char *)v18 + v10 + 23) < 0) {
          operator delete(*(void **)((char *)v18 + v10));
        }
        v10 += 32;
        --v9;
      }
      while (v9);
      float v8 = v18;
    }
    free(v8);
  }
  if (v17 < 0)
  {
    operator delete(__p);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_22:
    operator delete(v13);
    goto LABEL_20;
  }
  if (v14 < 0) {
    goto LABEL_22;
  }
LABEL_20:
  uint64_t result = 1;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_AF19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9F51C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64x2_t sub_AF1B0(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  __p[0] = *(void **)(a1 + 40);
  *(void **)((char *)__p + 7) = *(void **)(a1 + 47);
  char v8 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v9;
  *(void **)(a2 + 47) = *(void **)((char *)__p + 7);
  uint64_t v10 = __p[0];
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 55) = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v11;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v13;
  *(_OWORD *)long long __p = 0u;
  long long v23 = 0u;
  uint64_t v14 = a1 + 80;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    *(_OWORD *)long long __p = *(_OWORD *)v14;
    long long v23 = *(_OWORD *)(a1 + 96);
    uint64_t v15 = (void *)(a1 + 104);
    unint64_t v16 = (long long *)(a2 + 80);
    if (*(char *)(a2 + 103) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    long long v18 = *v16;
    *(void *)(v14 + 16) = *((void *)v16 + 2);
    *(_OWORD *)uint64_t v14 = v18;
    goto LABEL_9;
  }
  sub_4200(__p, *(void **)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v15 = (void *)(a1 + 104);
  int v17 = *(char *)(a1 + 103);
  *((void *)&v23 + 1) = *(void *)(a1 + 104);
  if (v17 < 0)
  {
    operator delete(*(void **)v14);
    unint64_t v16 = (long long *)(a2 + 80);
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v16 = (long long *)(a2 + 80);
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  sub_4200((unsigned char *)v14, *(void **)(a2 + 80), *(void *)(a2 + 88));
LABEL_9:
  void *v15 = *(void *)(a2 + 104);
  if (*(char *)(a2 + 103) < 0)
  {
    operator delete(*(void **)v16);
    if ((SBYTE7(v23) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((SBYTE7(v23) & 0x80000000) == 0)
  {
LABEL_11:
    *unint64_t v16 = *(_OWORD *)__p;
    *((void *)v16 + 2) = v23;
    *(void *)(a2 + 104) = *((void *)&v23 + 1);
    goto LABEL_15;
  }
  sub_4200(v16, __p[0], (unint64_t)__p[1]);
  int v19 = SBYTE7(v23);
  *(void *)(a2 + 104) = *((void *)&v23 + 1);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
LABEL_15:
  uint64_t v20 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v20;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 72))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_AF3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AF40C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v8 = a1 + 80;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v7;
    uint64_t v8 = a1 + 80;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    if ((*(char *)(a2 + 103) & 0x80000000) == 0)
    {
LABEL_3:
      long long v9 = *(_OWORD *)(a2 + 80);
      *(void *)(v8 + 16) = *(void *)(a2 + 96);
      *(_OWORD *)uint64_t v8 = v9;
      goto LABEL_6;
    }
  }
  sub_4200((unsigned char *)v8, *(void **)(a2 + 80), *(void *)(a2 + 88));
LABEL_6:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
    sub_AF630(a1, a2, a3);
    return a1;
  }
  else
  {
    unint64_t v11 = 4;
    if (a3 > 4) {
      goto LABEL_10;
    }
    while (1)
    {
      float v12 = *(float *)(a1 + 16) * (float)v11;
      if (*(void *)(a2 + 64) - *(void *)(a2 + 56) < (unint64_t)v12) {
        break;
      }
      do
      {
LABEL_10:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a3);
    }
    *(void *)(a1 + 72) = v11;
    float v13 = *(float *)(a1 + 20) * (float)v11;
    *(void *)a1 = (unint64_t)v12;
    *(void *)(a1 + 8) = (unint64_t)v13;
    *(unsigned char *)(a1 + 24) = 0;
    return a1;
  }
}

void sub_AF5D4(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void *sub_AF630(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v5 = *(void *)(a2 + 64) - *(void *)(a2 + 56);
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_AF978(a1, v6);
  long long v7 = *(long long **)(v3 + 112);
  uint64_t v8 = &v7[2 * *(void *)(v3 + 72)];
  uint64_t v45 = v3;
  unint64_t v46 = v7;
  size_t v47 = v8;
  sub_AFAA8(&v45);
  uint64_t v9 = *(void *)(v3 + 112) + 32 * *(void *)(v3 + 72);
  uint64_t v42 = v3;
  uint64_t v43 = v9;
  uint64_t v44 = v9;
  uint64x2_t result = sub_AFAA8(&v42);
  unint64_t v11 = v46;
  if (v46 != (long long *)v43)
  {
    uint64_t v41 = v3;
    do
    {
      uint64_t v13 = *(void *)(a1 + 72);
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = *(uint64_t **)v11;
      }
      if (v14 >= 0) {
        unint64_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        unint64_t v16 = *((void *)v11 + 1);
      }
      unint64_t v17 = sub_B128((uint64_t)&v42, v15, v16);
      uint64_t v18 = v13 - 1;
      uint64_t v19 = *(void *)(a1 + 112);
      size_t v20 = *(void *)(a1 + 88);
      if (*(char *)(a1 + 103) >= 0) {
        uint64_t v21 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103);
      }
      else {
        uint64_t v21 = *(unsigned __int8 **)(a1 + 88);
      }
      if ((*(unsigned char *)(a1 + 103) & 0x80) != 0)
      {
        for (uint64_t i = 1; ; ++i)
        {
          unint64_t v23 = v17 & v18;
          int v24 = (void **)(v19 + 32 * (v17 & v18));
          int v32 = *((char *)v24 + 23);
          uint64_t v33 = (unsigned __int8 *)v24[1];
          if (v32 >= 0) {
            uint64_t v33 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
          }
          if (v21 == v33)
          {
            uint64_t v34 = v32 >= 0 ? (unsigned __int8 *)(v19 + 32 * (v17 & v18)) : (unsigned __int8 *)*v24;
            if (!memcmp(*(const void **)(a1 + 80), v34, v20)) {
              break;
            }
          }
          unint64_t v17 = i + v23;
        }
        BOOL v27 = v32 >> 31;
        uint64_t v3 = v41;
      }
      else
      {
        if (*(unsigned char *)(a1 + 103))
        {
          for (j = 0; ; unint64_t v17 = v23 + j)
          {
            unint64_t v23 = v17 & v18;
            int v24 = (void **)(v19 + 32 * (v17 & v18));
            int v25 = *((char *)v24 + 23);
            uint64_t v26 = (unsigned __int8 *)v24[1];
            if (v25 >= 0) {
              uint64_t v26 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
            }
            if (v21 == v26)
            {
              BOOL v27 = v25 >> 31;
              if (v25 >= 0) {
                char v28 = (unsigned __int8 *)(v19 + 32 * (v17 & v18));
              }
              else {
                char v28 = (unsigned __int8 *)*v24;
              }
              uint64_t v29 = (unsigned __int8 *)(a1 + 80);
              uint64_t v30 = *(unsigned __int8 *)(a1 + 103);
              while (*v29 == *v28)
              {
                ++v29;
                ++v28;
                if (!--v30) {
                  goto LABEL_50;
                }
              }
            }
            ++j;
          }
        }
        unint64_t v23 = v17 & v18;
        int v24 = (void **)(v19 + 32 * (v17 & v18));
        BOOL v27 = *((char *)v24 + 23) < 0;
        int v35 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
        if (*((char *)v24 + 23) < 0) {
          int v35 = (unsigned __int8 *)v24[1];
        }
        if (v35 != (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103))
        {
          uint64_t v36 = 1;
          do
          {
            unint64_t v23 = (v23 + v36) & v18;
            int v24 = (void **)(v19 + 32 * v23);
            BOOL v27 = *((char *)v24 + 23) < 0;
            BOOL v37 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
            if (*((char *)v24 + 23) < 0) {
              BOOL v37 = (unsigned __int8 *)v24[1];
            }
            ++v36;
          }
          while (v21 != v37);
        }
      }
LABEL_50:
      size_t v38 = v46;
      if (v27) {
        operator delete(*v24);
      }
      if (*((char *)v38 + 23) < 0)
      {
        sub_4200(v24, *(void **)v38, *((void *)v38 + 1));
      }
      else
      {
        long long v39 = *v38;
        v24[2] = (void *)*((void *)v38 + 2);
        *(_OWORD *)int v24 = v39;
      }
      *(void *)(v19 + 32 * v23 + 24) = *((void *)v38 + 3);
      ++*(void *)(a1 + 64);
      v46 += 2;
      sub_AFAA8(&v45);
      uint64_t v12 = *(void *)(v3 + 112) + 32 * *(void *)(v3 + 72);
      uint64_t v42 = v3;
      uint64_t v43 = v12;
      uint64_t v44 = v12;
      uint64x2_t result = sub_AFAA8(&v42);
      unint64_t v11 = v46;
    }
    while (v46 != (long long *)v43);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_AF964(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_AF978(uint64_t a1, unint64_t a2)
{
  long long v4 = *(void **)(a1 + 112);
  if (!v4)
  {
    uint64_t v8 = malloc_type_malloc(32 * a2, 0x101204092066FB6uLL);
LABEL_12:
    *(void *)(a1 + 112) = v8;
    long long v4 = v8;
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5)
  {
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(a1 + 112) + v6;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    v6 += 32;
    --v5;
  }
  while (v5);
  long long v4 = *(void **)(a1 + 112);
  if (*(void *)(a1 + 72) != a2)
  {
LABEL_11:
    uint64_t v8 = malloc_type_realloc(v4, 32 * a2, 0x101204092066FB6uLL);
    if (!v8)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_AD794(a1, (uint64_t)v4, (uint64_t)v4 + 32 * a2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void *sub_AFAA8(void *result)
{
  unint64_t v2 = (unsigned __int8 *)result[1];
  uint64_t v1 = (unsigned __int8 *)result[2];
  if (v2 == v1) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *result;
  uint64_t v5 = (const void **)(*result + 80);
  uint64_t v6 = (const void **)(*result + 32);
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 103);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 103);
    }
    else {
      uint64_t v8 = *(void *)(v4 + 88);
    }
    int v9 = (char)v2[23];
    if (v9 >= 0) {
      uint64_t v10 = v2[23];
    }
    else {
      uint64_t v10 = *((void *)v2 + 1);
    }
    if (v8 == v10)
    {
      if (v9 >= 0) {
        unint64_t v11 = v2;
      }
      else {
        unint64_t v11 = *(unsigned __int8 **)v2;
      }
      if ((v7 & 0x80) != 0)
      {
        uint64x2_t result = (void *)memcmp(*v5, v11, *(void *)(v4 + 88));
        if (!result) {
          goto LABEL_4;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 103)) {
          goto LABEL_4;
        }
        uint64_t v12 = v5;
        while (*(unsigned __int8 *)v12 == *v11)
        {
          uint64_t v12 = (const void **)((char *)v12 + 1);
          ++v11;
          if (!--v7) {
            goto LABEL_4;
          }
        }
      }
    }
    if (!*(void *)(v4 + 56)) {
      return result;
    }
    uint64_t v13 = *(unsigned __int8 *)(v4 + 55);
    uint64_t v14 = (v13 & 0x80u) == 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
    if (v14 != v10) {
      return result;
    }
    if (v9 >= 0) {
      uint64_t v15 = v2;
    }
    else {
      uint64_t v15 = *(unsigned __int8 **)v2;
    }
    if ((v13 & 0x80) != 0)
    {
      uint64x2_t result = (void *)memcmp(*v6, v15, *(void *)(v4 + 40));
      if (result) {
        return result;
      }
      goto LABEL_4;
    }
    if (*(unsigned char *)(v4 + 55)) {
      break;
    }
LABEL_4:
    v2 += 32;
    v3[1] = v2;
    if (v2 == v1) {
      return result;
    }
  }
  unint64_t v16 = v6;
  while (*(unsigned __int8 *)v16 == *v15)
  {
    unint64_t v16 = (const void **)((char *)v16 + 1);
    ++v15;
    if (!--v13) {
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_AFBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_AFD94(a1, a2);
  if (v4 != -1) {
    return *(void *)(a1 + 128) + 48 * v4;
  }
  uint64_t v8 = v5;
  if (sub_B0004(a1, 1))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long __dst = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a2 + 16);
    }
    *(_OWORD *)uint64_t v13 = __dst;
    uint64_t v14 = v19;
    long long __p = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v9 = sub_AFD94(a1, (uint64_t)v13);
    if (v9 != -1)
    {
      uint64_t v6 = (void *)(*(void *)(a1 + 128) + 48 * v9);
      unint64_t v11 = __p;
      if (!__p) {
        goto LABEL_16;
      }
LABEL_15:
      unint64_t v16 = v11;
      operator delete(v11);
      goto LABEL_16;
    }
    sub_B0300(a1, (long long *)v13, v10, &__dst);
    uint64_t v6 = (void *)*((void *)&__dst + 1);
    unint64_t v11 = __p;
    if (__p) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long __dst = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a2 + 16);
    }
    *(_OWORD *)uint64_t v13 = __dst;
    uint64_t v14 = v19;
    long long __p = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_B0300(a1, (long long *)v13, v8, v12);
    uint64_t v6 = v12[1];
    unint64_t v11 = __p;
    if (__p) {
      goto LABEL_15;
    }
  }
LABEL_16:
  if ((SHIBYTE(v14) & 0x80000000) == 0) {
    return (uint64_t)v6;
  }
  operator delete(v13[0]);
  return (uint64_t)v6;
}

void sub_AFD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A9338((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AFD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A9338((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AFD94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v6 = v5;
  }
  unint64_t v7 = sub_B128((uint64_t)&v44, (uint64_t *)a2, v6);
  uint64_t v8 = 0;
  uint64_t v9 = v4 - 1;
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 88);
  }
  size_t __n = *(void *)(a1 + 88);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 23);
  BOOL v37 = *(const void **)v2;
  size_t v38 = *(void *)(v2 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v2 + 8);
  }
  uint64_t v43 = -1;
  uint64_t v42 = *(unsigned __int8 *)(v2 + 23);
  int v40 = (unsigned __int8 *)v2;
  uint64_t v41 = v14;
  while (1)
  {
    unint64_t v16 = v7 & v9;
    uint64_t v17 = (unsigned __int8 *)(v10 + 48 * (v7 & v9));
    int v18 = (char)v17[23];
    if (v18 >= 0) {
      uint64_t v19 = v17[23];
    }
    else {
      uint64_t v19 = *((void *)v17 + 1);
    }
    if (v12 != v19) {
      goto LABEL_29;
    }
    size_t v20 = v18 >= 0 ? (unsigned __int8 *)(v10 + 48 * (v7 & v9)) : *(unsigned __int8 **)v17;
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!v11) {
      return -1;
    }
    uint64_t v21 = (unsigned __int8 *)(a1 + 80);
    uint64_t v22 = v11;
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v22) {
        return -1;
      }
    }
LABEL_29:
    if (*(void *)(a1 + 56))
    {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 55);
      uint64_t v26 = (v25 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 55) : *(void *)(a1 + 40);
      if (v26 == v19)
      {
        if (v18 >= 0) {
          BOOL v27 = v17;
        }
        else {
          BOOL v27 = *(unsigned __int8 **)v17;
        }
        if ((v25 & 0x80) != 0)
        {
          uint64_t v29 = v11;
          int v30 = memcmp(*(const void **)(a1 + 32), v27, *(void *)(a1 + 40));
          uint64_t v14 = v41;
          uint64_t v13 = v42;
          uint64_t v11 = v29;
          if (!v30)
          {
LABEL_11:
            uint64_t v15 = v43;
            if (v43 == -1) {
              uint64_t v15 = v16;
            }
            uint64_t v43 = v15;
            goto LABEL_14;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 55)) {
            goto LABEL_11;
          }
          char v28 = (unsigned __int8 *)(a1 + 32);
          while (*v28 == *v27)
          {
            ++v28;
            ++v27;
            if (!--v25) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (v14 == v19)
    {
      if (v18 >= 0) {
        int v31 = v17;
      }
      else {
        int v31 = *(unsigned __int8 **)v17;
      }
      if ((v13 & 0x80) != 0)
      {
        uint64_t v34 = v11;
        int v35 = memcmp(v37, v31, v38);
        uint64_t v14 = v41;
        uint64_t v13 = v42;
        uint64_t v11 = v34;
        if (!v35) {
          return v16;
        }
      }
      else
      {
        int v32 = v40;
        if (!v13) {
          return v16;
        }
        uint64_t v33 = v13;
        while (*v32 == *v31)
        {
          ++v32;
          ++v31;
          if (!--v33) {
            return v16;
          }
        }
      }
    }
LABEL_14:
    unint64_t v7 = ++v8 + v16;
  }
  uint64_t v23 = v11;
  int v24 = memcmp(*(const void **)(a1 + 80), v20, __n);
  uint64_t v14 = v41;
  uint64_t v13 = v42;
  uint64_t v11 = v23;
  if (v24) {
    goto LABEL_29;
  }
  return -1;
}

uint64_t sub_B0004(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      BOOL v6 = v4 >= v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6 || (unint64_t v7 = *(void *)(a1 + 72), v7 < 0x21))
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 24) = 0;
      unint64_t v11 = *(void *)(a1 + 64);
      if (v11 >= ~a2) {
        goto LABEL_33;
      }
    }
    else
    {
      float v8 = (float)v4;
      do
      {
        unint64_t v9 = v7;
        v7 >>= 1;
      }
      while (v9 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v7) > v8);
      sub_B0688(v23, a1, v7);
      sub_B04AC(a1, (uint64_t)v23);
      sub_A925C((uint64_t)v23);
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 0;
      unint64_t v11 = *(void *)(a1 + 64);
      if (v11 >= ~a2) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v11 = *(void *)(a1 + 64);
    if (v11 >= ~a2) {
      goto LABEL_33;
    }
  }
  unint64_t v12 = *(void *)(a1 + 72);
  unint64_t v13 = v11 + a2;
  if (v12 < 4 || v13 > *(void *)a1)
  {
    float v14 = *(float *)(a1 + 16);
    unint64_t v15 = vcvts_n_u32_f32(v14, 2uLL);
    unint64_t v16 = 4;
    if (v13 >= v15)
    {
      while ((v16 & 0x8000000000000000) == 0)
      {
        v16 *= 2;
        if (v13 < (unint64_t)(float)(v14 * (float)v16)) {
          goto LABEL_18;
        }
      }
LABEL_33:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_18:
    if (v16 > v12)
    {
      unint64_t v17 = *(void *)(a1 + 56);
      unint64_t v18 = v11 - v17 + a2;
      unint64_t v19 = 4;
      if (v12 <= 4) {
        goto LABEL_22;
      }
      do
      {
        do
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          v19 *= 2;
        }
        while (v19 < v12);
LABEL_22:
        ;
      }
      while (v18 >= (unint64_t)(float)(v14 * (float)v19));
      unint64_t v20 = v13 - (v17 >> 2);
      unint64_t v21 = 4;
      if (v20 >= v15)
      {
        while ((v21 & 0x8000000000000000) == 0)
        {
          v21 *= 2;
          if (v20 < (unint64_t)(float)(v14 * (float)v21)) {
            goto LABEL_26;
          }
        }
        goto LABEL_33;
      }
LABEL_26:
      if (v19 <= 0x7FFFFFFFFFFFFFFELL
        && v19 < v21
        && v18 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v19)))
      {
        v19 *= 2;
      }
      sub_B0688(v23, a1, v19);
      sub_B04AC(a1, (uint64_t)v23);
      sub_A925C((uint64_t)v23);
      return 1;
    }
  }
  return result;
}

void sub_B0288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A925C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B029C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A925C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B02B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B02C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B02D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B02EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_B0300@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)(v5 - v6) >= 0x555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 128);
  if (!v6) {
    goto LABEL_18;
  }
  unint64_t v11 = (unsigned __int8 **)(v10 + 48 * a3);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
  if ((v12 & 0x80u) == 0) {
    unint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 55);
  }
  else {
    unint64_t v13 = *(unsigned __int8 **)(a1 + 40);
  }
  float v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
  int v15 = (char)v14;
  if ((char)v14 < 0) {
    float v14 = v11[1];
  }
  if (v13 != v14) {
    goto LABEL_18;
  }
  unint64_t v16 = (const void **)(a1 + 32);
  if (v15 >= 0) {
    unint64_t v17 = (unsigned __int8 *)(v10 + 48 * a3);
  }
  else {
    unint64_t v17 = *v11;
  }
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v17, *(void *)(a1 + 40))) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v16 == *v17)
    {
      unint64_t v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_23;
      }
    }
LABEL_18:
    *(void *)(a1 + 64) = v5 + 1;
    uint64_t v18 = v10 + 48 * a3;
    unint64_t v19 = *(void **)(v18 + 24);
    if (!v19) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_23:
  *(void *)(a1 + 56) = v6 - 1;
  uint64_t v18 = v10 + 48 * a3;
  unint64_t v19 = *(void **)(v18 + 24);
  if (v19)
  {
LABEL_19:
    *(void *)(v10 + 48 * a3 + 32) = v19;
    operator delete(v19);
  }
LABEL_20:
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  uint64_t result = sub_AD8F0((void *)v18, a2);
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t v22 = v21 + 48 * a3;
  uint64_t v23 = v21 + 48 * *(void *)(a1 + 72);
  *a4 = a1;
  a4[1] = v22;
  a4[2] = v23;
  return result;
}

void sub_B0498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_B04AC(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  __dst[0] = *(void **)(a1 + 40);
  *(void **)((char *)__dst + 7) = *(void **)(a1 + 47);
  char v8 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v9;
  *(void **)(a2 + 47) = *(void **)((char *)__dst + 7);
  uint64_t v10 = __dst[0];
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 55) = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v11;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v13;
  *(_OWORD *)long long __p = 0u;
  long long v21 = 0u;
  *(_OWORD *)long long __dst = 0u;
  float v14 = (void **)(a1 + 80);
  sub_AD8F0(__dst, (long long *)(a1 + 80));
  int v15 = *(void **)(a1 + 104);
  if (v15)
  {
    *(void *)(a1 + 112) = v15;
    operator delete(v15);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v14);
  }
  sub_AD8F0(v14, (long long *)(a2 + 80));
  unint64_t v16 = *(void **)(a2 + 104);
  if (v16)
  {
    *(void *)(a2 + 112) = v16;
    operator delete(v16);
  }
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  sub_AD8F0((void *)(a2 + 80), (long long *)__dst);
  if (__p[1])
  {
    *(void **)&long long v21 = __p[1];
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v17 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v17;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 72))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_B0674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A9338((uint64_t)va);
  _Unwind_Resume(a1);
}

float32x2_t *sub_B0688(float32x2_t *a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1->f32 = *(_OWORD *)a2;
  *(_OWORD *)a1[2].f32 = v6;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200(&a1[4], *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    a1[6] = *(float32x2_t *)(a2 + 48);
    *(_OWORD *)a1[4].f32 = v7;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_AD8F0(&a1[10], (long long *)(a2 + 80));
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1->f32 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(a1[2], (float)(unint64_t)a1[9])));
    a1[3].i8[0] = 0;
    sub_B0854(a1, (void *)a2, a3);
    return a1;
  }
  else
  {
    unint64_t v9 = 4;
    if (a3 > 4) {
      goto LABEL_8;
    }
    while (1)
    {
      float v10 = a1[2].f32[0] * (float)v9;
      if (*(void *)(a2 + 64) - *(void *)(a2 + 56) < (unint64_t)v10) {
        break;
      }
      do
      {
LABEL_8:
        if ((v9 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v9 *= 2;
      }
      while (v9 < a3);
    }
    a1[9] = (float32x2_t)v9;
    float v11 = a1[2].f32[1] * (float)v9;
    *a1 = (float32x2_t)(unint64_t)v10;
    a1[1] = (float32x2_t)(unint64_t)v11;
    a1[3].i8[0] = 0;
    return a1;
  }
}

void sub_B0818(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B0854(float32x2_t *a1, void *a2, unint64_t a3)
{
  unint64_t v4 = a2[8] - a2[7];
  unint64_t v5 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v4 >= (unint64_t)(float)(a1[2].f32[0] * (float)v5))
  {
    do
    {
LABEL_3:
      if ((v5 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v5 *= 2;
    }
    while (v5 < a3);
  }
  sub_B0B8C(a1, v5);
  long long v6 = (long long *)a2[16];
  long long v7 = &v6[3 * a2[9]];
  uint64_t v43 = a2;
  char v44 = v6;
  uint64_t v45 = v7;
  sub_B0CE0(&v43);
  uint64_t v8 = a2[16] + 48 * a2[9];
  int v40 = a2;
  uint64_t v41 = v8;
  uint64_t v42 = v8;
  uint64x2_t result = sub_B0CE0(&v40);
  for (uint64_t i = v44; v44 != (long long *)v41; uint64_t i = v44)
  {
    float32x2_t v12 = a1[9];
    int v13 = *((char *)i + 23);
    if (v13 >= 0) {
      float v14 = (uint64_t *)i;
    }
    else {
      float v14 = *(uint64_t **)i;
    }
    if (v13 >= 0) {
      unint64_t v15 = *((unsigned __int8 *)i + 23);
    }
    else {
      unint64_t v15 = *((void *)i + 1);
    }
    unint64_t v16 = sub_B128((uint64_t)&v40, v14, v15);
    uint64_t v17 = *(void *)&v12 - 1;
    float32x2_t v18 = a1[16];
    size_t v19 = (size_t)a1[11];
    if (a1[12].i8[7] >= 0) {
      float32x2_t v20 = (float32x2_t)a1[12].u8[7];
    }
    else {
      float32x2_t v20 = a1[11];
    }
    if (a1[12].i8[7] < 0)
    {
      for (uint64_t j = 1; ; ++j)
      {
        unint64_t v22 = v16 & v17;
        uint64_t v23 = (void **)(*(void *)&v18 + 48 * (v16 & v17));
        int v30 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
        int v31 = (char)v30;
        if ((char)v30 < 0) {
          int v30 = (unsigned __int8 *)v23[1];
        }
        if ((unsigned __int8 *)v20 == v30)
        {
          int v32 = v31 >= 0 ? (unsigned __int8 *)(*(void *)&v18 + 48 * (v16 & v17)) : (unsigned __int8 *)*v23;
          if (!memcmp(*(const void **)&a1[10], v32, v19)) {
            break;
          }
        }
        unint64_t v16 = j + v22;
      }
    }
    else
    {
      if (a1[12].i8[7])
      {
        for (k = 0; ; unint64_t v16 = v22 + k)
        {
          unint64_t v22 = v16 & v17;
          uint64_t v23 = (void **)(*(void *)&v18 + 48 * (v16 & v17));
          int v24 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
          int v25 = (char)v24;
          if ((char)v24 < 0) {
            int v24 = (unsigned __int8 *)v23[1];
          }
          if ((unsigned __int8 *)v20 == v24)
          {
            if (v25 >= 0) {
              uint64_t v26 = (unsigned __int8 *)(*(void *)&v18 + 48 * (v16 & v17));
            }
            else {
              uint64_t v26 = (unsigned __int8 *)*v23;
            }
            BOOL v27 = a1 + 10;
            uint64_t v28 = a1[12].u8[7];
            while (v27->u8[0] == *v26)
            {
              BOOL v27 = (float32x2_t *)((char *)v27 + 1);
              ++v26;
              if (!--v28) {
                goto LABEL_49;
              }
            }
          }
          ++k;
        }
      }
      unint64_t v22 = v16 & v17;
      uint64_t v23 = (void **)(*(void *)&v18 + 48 * (v16 & v17));
      uint64_t v33 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
      if ((char)v33 < 0) {
        uint64_t v33 = (unsigned __int8 *)v23[1];
      }
      if (v33 != (unsigned __int8 *)a1[12].u8[7])
      {
        uint64_t v34 = 1;
        do
        {
          unint64_t v22 = (v22 + v34) & v17;
          uint64_t v23 = (void **)(*(void *)&v18 + 48 * v22);
          int v35 = (unsigned __int8 *)*((unsigned __int8 *)v23 + 23);
          if ((char)v35 < 0) {
            int v35 = (unsigned __int8 *)v23[1];
          }
          ++v34;
        }
        while ((unsigned __int8 *)v20 != v35);
      }
    }
LABEL_49:
    uint64_t v36 = v44;
    BOOL v37 = *(void **)(*(void *)&v18 + 48 * v22 + 24);
    if (v37)
    {
      *(void *)(*(void *)&v18 + 48 * v22 + 32) = v37;
      operator delete(v37);
    }
    if (*((char *)v23 + 23) < 0) {
      operator delete(*v23);
    }
    sub_AD8F0(v23, v36);
    ++*(void *)&a1[8];
    v44 += 3;
    sub_B0CE0(&v43);
    uint64_t v11 = a2[16] + 48 * a2[9];
    int v40 = a2;
    uint64_t v41 = v11;
    uint64_t v42 = v11;
    uint64x2_t result = sub_B0CE0(&v40);
  }
  ++a1[3].i32[1];
  return result;
}

void sub_B0B78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_B0B8C(float32x2_t *a1, unint64_t a2)
{
  unint64_t v4 = (void *)a1[16];
  if (!v4)
  {
    float v10 = malloc_type_malloc(48 * a2, 0x109204087733E69uLL);
LABEL_14:
    a1[16] = (float32x2_t)v10;
    unint64_t v4 = v10;
    goto LABEL_15;
  }
  float32x2_t v5 = a1[9];
  if (!*(void *)&v5)
  {
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  do
  {
    float32x2_t v7 = a1[16];
    uint64_t v8 = *(void *)&v7 + v6;
    unint64_t v9 = *(void **)(*(void *)&v7 + v6 + 24);
    if (v9)
    {
      *(void *)(v8 + 32) = v9;
      operator delete(v9);
    }
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)(*(void *)&v7 + v6));
    }
    v6 += 48;
    --*(void *)&v5;
  }
  while (v5);
  unint64_t v4 = (void *)a1[16];
  if (*(void *)&a1[9] != a2)
  {
LABEL_13:
    float v10 = malloc_type_realloc(v4, 48 * a2, 0x109204087733E69uLL);
    if (!v10)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_14;
  }
LABEL_15:
  sub_AD868(a1, (uint64_t)v4, (uint64_t)v4 + 48 * a2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = (float32x2_t)a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(a1[2], (float)a2)));
  *(uint64x2_t *)a1->f32 = result;
  a1[3].i8[0] = 0;
  return result;
}

void *sub_B0CE0(void *result)
{
  uint64_t v2 = (unsigned __int8 *)result[1];
  uint64_t v1 = (unsigned __int8 *)result[2];
  if (v2 == v1) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *result;
  float32x2_t v5 = (const void **)(*result + 80);
  uint64_t v6 = (const void **)(*result + 32);
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 103);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 103);
    }
    else {
      uint64_t v8 = *(void *)(v4 + 88);
    }
    int v9 = (char)v2[23];
    if (v9 >= 0) {
      uint64_t v10 = v2[23];
    }
    else {
      uint64_t v10 = *((void *)v2 + 1);
    }
    if (v8 == v10)
    {
      if (v9 >= 0) {
        uint64_t v11 = v2;
      }
      else {
        uint64_t v11 = *(unsigned __int8 **)v2;
      }
      if ((v7 & 0x80) != 0)
      {
        uint64x2_t result = (void *)memcmp(*v5, v11, *(void *)(v4 + 88));
        if (!result) {
          goto LABEL_4;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 103)) {
          goto LABEL_4;
        }
        float32x2_t v12 = v5;
        while (*(unsigned __int8 *)v12 == *v11)
        {
          float32x2_t v12 = (const void **)((char *)v12 + 1);
          ++v11;
          if (!--v7) {
            goto LABEL_4;
          }
        }
      }
    }
    if (!*(void *)(v4 + 56)) {
      return result;
    }
    uint64_t v13 = *(unsigned __int8 *)(v4 + 55);
    uint64_t v14 = (v13 & 0x80u) == 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
    if (v14 != v10) {
      return result;
    }
    if (v9 >= 0) {
      unint64_t v15 = v2;
    }
    else {
      unint64_t v15 = *(unsigned __int8 **)v2;
    }
    if ((v13 & 0x80) != 0)
    {
      uint64x2_t result = (void *)memcmp(*v6, v15, *(void *)(v4 + 40));
      if (result) {
        return result;
      }
      goto LABEL_4;
    }
    if (*(unsigned char *)(v4 + 55)) {
      break;
    }
LABEL_4:
    v2 += 48;
    v3[1] = v2;
    if (v2 == v1) {
      return result;
    }
  }
  unint64_t v16 = v6;
  while (*(unsigned __int8 *)v16 == *v15)
  {
    unint64_t v16 = (const void **)((char *)v16 + 1);
    ++v15;
    if (!--v13) {
      goto LABEL_4;
    }
  }
  return result;
}

void *sub_B0E28(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_B0F20(a1, a2, &v15, &v14, a3);
  if (*v6) {
    return (void *)*v6;
  }
  uint64_t v8 = v6;
  int v9 = operator new(0x38uLL);
  uint64_t v10 = v9 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_4200(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    v9[6] = *(void *)(a4 + 16);
  }
  uint64_t v11 = v15;
  void *v9 = 0;
  v9[1] = 0;
  void v9[2] = v11;
  uint64_t *v8 = (uint64_t)v9;
  float32x2_t v12 = (void *)**a1;
  uint64_t v13 = v9;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = (uint64_t *)*v8;
  }
  sub_2F250(a1[1], v13);
  a1[2] = (void *)((char *)a1[2] + 1);
  return v9;
}

void sub_B0F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B0F20(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  int v9 = a1 + 1;
  if (a1 + 1 != a2)
  {
    unint64_t v11 = *(unsigned __int8 *)(a5 + 23);
    unsigned __int8 v12 = v11;
    unint64_t v13 = *(void *)(a5 + 8);
    if ((v11 & 0x80u) == 0) {
      unint64_t v14 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      unint64_t v14 = *(void *)(a5 + 8);
    }
    unint64_t v15 = *((unsigned __int8 *)a2 + 55);
    unsigned __int8 v16 = v15;
    unint64_t v17 = a2[5];
    if ((v15 & 0x80u) == 0) {
      unint64_t v18 = *((unsigned __int8 *)a2 + 55);
    }
    else {
      unint64_t v18 = a2[5];
    }
    if (v18 >= v14) {
      unint64_t v19 = v14;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *(char *)(a5 + 23) >= 0 ? a5 : *(void *)a5;
        char v22 = __tolower(*(char *)(v21 + v20));
        uint64_t v23 = *((char *)a2 + 55) >= 0 ? (uint64_t)(a2 + 4) : a2[4];
        char v24 = __tolower(*(char *)(v23 + v20));
        if (v22 > v24) {
          break;
        }
        if (v22 < v24) {
          goto LABEL_28;
        }
        if (v19 == ++v20)
        {
          unint64_t v11 = *(unsigned __int8 *)(a5 + 23);
          unint64_t v13 = *(void *)(a5 + 8);
          unint64_t v15 = *((unsigned __int8 *)a2 + 55);
          unint64_t v17 = a2[5];
          unsigned __int8 v16 = *((unsigned char *)a2 + 55);
          unsigned __int8 v12 = *(unsigned char *)(a5 + 23);
          goto LABEL_23;
        }
      }
      unsigned __int8 v16 = *((unsigned char *)a2 + 55);
      unint64_t v17 = a2[5];
      unsigned __int8 v12 = *(unsigned char *)(a5 + 23);
      unint64_t v13 = *(void *)(a5 + 8);
      goto LABEL_66;
    }
LABEL_23:
    if ((v12 & 0x80u) != 0) {
      unint64_t v11 = v13;
    }
    if ((v16 & 0x80u) != 0) {
      unint64_t v15 = v17;
    }
    if (v11 >= v15)
    {
LABEL_66:
      unint64_t v44 = v16;
      if ((v16 & 0x80u) == 0) {
        unint64_t v45 = v16;
      }
      else {
        unint64_t v45 = v17;
      }
      unint64_t v46 = v12;
      if ((v12 & 0x80u) == 0) {
        unint64_t v47 = v12;
      }
      else {
        unint64_t v47 = v13;
      }
      if (v47 >= v45) {
        unint64_t v48 = v45;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48)
      {
        uint64_t v49 = 0;
        while (1)
        {
          uint64_t v50 = *((char *)a2 + 55) >= 0 ? (uint64_t)(a2 + 4) : a2[4];
          char v51 = __tolower(*(char *)(v50 + v49));
          uint64_t v52 = *(char *)(a5 + 23) >= 0 ? a5 : *(void *)a5;
          char v53 = __tolower(*(char *)(v52 + v49));
          if (v51 > v53) {
            goto LABEL_95;
          }
          if (v51 < v53) {
            goto LABEL_92;
          }
          if (v48 == ++v49)
          {
            unint64_t v44 = *((unsigned __int8 *)a2 + 55);
            unint64_t v17 = a2[5];
            unint64_t v46 = *(unsigned __int8 *)(a5 + 23);
            unint64_t v13 = *(void *)(a5 + 8);
            unsigned __int8 v12 = *(unsigned char *)(a5 + 23);
            unsigned __int8 v16 = *((unsigned char *)a2 + 55);
            break;
          }
        }
      }
      if ((v16 & 0x80u) == 0) {
        unint64_t v17 = v44;
      }
      if ((v12 & 0x80u) == 0) {
        unint64_t v13 = v46;
      }
      if (v17 >= v13)
      {
LABEL_95:
        *a3 = a2;
        *a4 = a2;
        return (uint64_t *)a4;
      }
LABEL_92:
      a4 = (uint64_t **)(a2 + 1);
      uint64_t v54 = (uint64_t *)a2[1];
      if (v54)
      {
        do
        {
          uint64_t v55 = v54;
          uint64_t v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        unint64_t v56 = a2;
        do
        {
          uint64_t v55 = (uint64_t *)v56[2];
          BOOL v28 = *v55 == (void)v56;
          unint64_t v56 = v55;
        }
        while (!v28);
      }
      if (v55 == v9) {
        goto LABEL_127;
      }
      unint64_t v57 = *(unsigned __int8 *)(a5 + 23);
      char v58 = v57;
      unint64_t v59 = *(void *)(a5 + 8);
      if ((v57 & 0x80u) == 0) {
        unint64_t v60 = *(unsigned __int8 *)(a5 + 23);
      }
      else {
        unint64_t v60 = *(void *)(a5 + 8);
      }
      uint64_t v61 = *((unsigned __int8 *)v55 + 55);
      char v62 = v61;
      uint64_t v63 = v55[5];
      if ((v61 & 0x80u) == 0) {
        unint64_t v64 = *((unsigned __int8 *)v55 + 55);
      }
      else {
        unint64_t v64 = v55[5];
      }
      if (v64 >= v60) {
        unint64_t v65 = v60;
      }
      else {
        unint64_t v65 = v64;
      }
      if (v65)
      {
        uint64_t v66 = 0;
        while (1)
        {
          uint64_t v67 = *(char *)(a5 + 23) >= 0 ? a5 : *(void *)a5;
          char v68 = __tolower(*(char *)(v67 + v66));
          uint64_t v69 = *((char *)v55 + 55) >= 0 ? (uint64_t)(v55 + 4) : v55[4];
          char v70 = __tolower(*(char *)(v69 + v66));
          if (v68 > v70) {
            goto LABEL_129;
          }
          if (v68 < v70) {
            goto LABEL_127;
          }
          if (v65 == ++v66)
          {
            unint64_t v57 = *(unsigned __int8 *)(a5 + 23);
            unint64_t v59 = *(void *)(a5 + 8);
            uint64_t v61 = *((unsigned __int8 *)v55 + 55);
            uint64_t v63 = v55[5];
            char v62 = *((unsigned char *)v55 + 55);
            char v58 = *(unsigned char *)(a5 + 23);
            break;
          }
        }
      }
      if (v58 < 0) {
        unint64_t v57 = v59;
      }
      unint64_t v71 = v62 >= 0 ? v61 : v63;
      if (v57 < v71)
      {
LABEL_127:
        if (*a4)
        {
          *a3 = v55;
          return v55;
        }
        else
        {
          *a3 = a2;
        }
        return (uint64_t *)a4;
      }
      goto LABEL_129;
    }
  }
LABEL_28:
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v26 = a2;
    goto LABEL_62;
  }
  int v25 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v26 = v25;
      int v25 = (uint64_t *)v25[1];
    }
    while (v25);
  }
  else
  {
    BOOL v27 = a2;
    do
    {
      uint64_t v26 = (uint64_t *)v27[2];
      BOOL v28 = *v26 == (void)v27;
      BOOL v27 = v26;
    }
    while (v28);
  }
  unint64_t v29 = *((unsigned __int8 *)v26 + 55);
  char v30 = v29;
  unint64_t v31 = v26[5];
  if ((v29 & 0x80u) == 0) {
    unint64_t v32 = *((unsigned __int8 *)v26 + 55);
  }
  else {
    unint64_t v32 = v26[5];
  }
  unint64_t v33 = *(unsigned __int8 *)(a5 + 23);
  char v34 = v33;
  unint64_t v35 = *(void *)(a5 + 8);
  if ((v33 & 0x80u) == 0) {
    unint64_t v36 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    unint64_t v36 = *(void *)(a5 + 8);
  }
  if (v36 >= v32) {
    unint64_t v37 = v32;
  }
  else {
    unint64_t v37 = v36;
  }
  if (v37)
  {
    uint64_t v38 = 0;
    while (1)
    {
      uint64_t v39 = *((char *)v26 + 55) >= 0 ? (uint64_t)(v26 + 4) : v26[4];
      char v40 = __tolower(*(char *)(v39 + v38));
      uint64_t v41 = *(char *)(a5 + 23) >= 0 ? a5 : *(void *)a5;
      char v42 = __tolower(*(char *)(v41 + v38));
      if (v40 > v42) {
        goto LABEL_129;
      }
      if (v40 < v42) {
        goto LABEL_62;
      }
      if (v37 == ++v38)
      {
        unint64_t v29 = *((unsigned __int8 *)v26 + 55);
        unint64_t v31 = v26[5];
        unint64_t v33 = *(unsigned __int8 *)(a5 + 23);
        unint64_t v35 = *(void *)(a5 + 8);
        char v34 = *(unsigned char *)(a5 + 23);
        char v30 = *((unsigned char *)v26 + 55);
        break;
      }
    }
  }
  if (v30 < 0) {
    unint64_t v29 = v31;
  }
  if (v34 >= 0) {
    unint64_t v43 = v33;
  }
  else {
    unint64_t v43 = v35;
  }
  if (v29 < v43)
  {
LABEL_62:
    if (*a2)
    {
      *a3 = v26;
      return v26 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
LABEL_129:

  return sub_AE20C((uint64_t)a1, a3, a5);
}

uint64_t *sub_B13A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    uint64_t v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *uint64_t v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    uint64_t v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64x2_t result = v3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  uint64x2_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    unint64_t v14 = (uint64_t **)v7[2];
    if (*v14 == v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      unint64_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      unint64_t v17 = v14[1];
      unint64_t v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18) {
        void v18[2] = (uint64_t)v14;
      }
      void v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
      *unint64_t v17 = (uint64_t)v14;
      uint64_t v14[2] = v17;
      if (result == (uint64_t *)*v7) {
        uint64x2_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
      unint64_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    if (!*((unsigned char *)v15 + 24))
    {
      unint64_t v19 = (uint64_t *)v7[1];
      if (!v19) {
        goto LABEL_64;
      }
LABEL_63:
      if (*((unsigned char *)v19 + 24))
      {
LABEL_64:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v23 = v15[1];
        *uint64_t v7 = v23;
        if (v23) {
          *(void *)(v23 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v19 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v27 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v27 + 24);
      *(unsigned char *)(v27 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      BOOL v28 = *(uint64_t **)(v27 + 8);
      uint64_t v29 = *v28;
      *(void *)(v27 + 8) = *v28;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      uint64_t v28[2] = *(void *)(v27 + 16);
      *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
      *BOOL v28 = v27;
      *(void *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    unint64_t v19 = (uint64_t *)v7[1];
    if (v19 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_63;
    }
    *((unsigned char *)v7 + 24) = 0;
    unsigned __int8 v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      unsigned __int8 v12 = result;
LABEL_61:
      *((unsigned char *)v12 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v12 + 24)) {
      goto LABEL_61;
    }
LABEL_24:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    unsigned __int8 v16 = (void *)*v7;
    if (!*v7) {
      goto LABEL_49;
    }
LABEL_48:
    if (!*((unsigned char *)v16 + 24)) {
      goto LABEL_67;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    uint64_t v20 = (uint64_t *)v7[1];
    *unint64_t v14 = v20;
    if (v20) {
      void v20[2] = (uint64_t)v14;
    }
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    uint64_t v14[2] = v7;
    if (result == (uint64_t *)v14) {
      uint64x2_t result = v7;
    }
    uint64_t v7 = *v14;
    unsigned __int8 v16 = (void *)**v14;
    if (v16) {
      goto LABEL_48;
    }
  }
LABEL_49:
  uint64_t v21 = (uint64_t *)v7[1];
  if (!v21 || *((unsigned char *)v21 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    unsigned __int8 v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
    goto LABEL_24;
  }
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_67:
    uint64_t v21 = v7;
  }
  else
  {
    *((unsigned char *)v21 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = *v21;
    v7[1] = *v21;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    void v21[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
    *uint64_t v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    unsigned __int8 v16 = v7;
  }
  char v24 = (uint64_t *)v21[2];
  *((unsigned char *)v21 + 24) = *((unsigned char *)v24 + 24);
  *((unsigned char *)v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 8);
  uint64_t *v24 = v26;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  *(void *)(v25 + 16) = v24[2];
  *(void *)(v24[2] + 8 * (*(void *)v24[2] != (void)v24)) = v25;
  *(void *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

void *sub_B1764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_AE20C(a1, &v13, a2);
  if (*v5) {
    return (void *)*v5;
  }
  uint64_t v7 = v5;
  int v8 = operator new(0x38uLL);
  uint64_t v9 = v8 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    v8[6] = *(void *)(a3 + 16);
  }
  uint64_t v10 = v13;
  void *v8 = 0;
  v8[1] = 0;
  void v8[2] = v10;
  *uint64_t v7 = (uint64_t)v8;
  uint64_t v11 = **(void **)a1;
  unsigned __int8 v12 = v8;
  if (v11)
  {
    *(void *)a1 = v11;
    unsigned __int8 v12 = (uint64_t *)*v7;
  }
  sub_2F250(*(uint64_t **)(a1 + 8), v12);
  ++*(void *)(a1 + 16);
  return v8;
}

void sub_B1844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_B1858(uint64_t ***a1, void **a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61) {
    sub_2E00();
  }
  uint64_t v8 = (char *)a1[2] - (char *)v4;
  if (v8 >> 2 > v6) {
    unint64_t v6 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 61) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(8 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v5];
  unsigned __int8 v12 = (uint64_t **)&v10[8 * v9];
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  unint64_t v14 = (uint64_t **)(v11 + 8);
  ++*v13;
  if (v3 == v4)
  {
    *a1 = (uint64_t **)v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v14;
    }
    goto LABEL_17;
  }
  do
  {
    unint64_t v15 = *--v3;
    *((void *)v11 - 1) = v15;
    v11 -= 8;
    ++*v15;
  }
  while (v3 != v4);
  unsigned __int8 v16 = *a1;
  uint64_t v3 = a1[1];
  *a1 = (uint64_t **)v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v3 != v16)
  {
    do
      sub_285120(--v3);
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_17:
  }
    operator delete(v3);
  return v14;
}

void sub_B1980(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v9 = (char *)v3 - (char *)v2;
    if (v9 < 0x11) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unint64_t v4 = a1[4];
  uint64_t v5 = &v2[v4 / 0x1E];
  unint64_t v6 = (unint64_t)*v5 + 136 * (v4 % 0x1E);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x1E] + 136 * ((a1[5] + v4) % 0x1E);
  if (v6 != v7)
  {
    while (1)
    {
      if (*(char *)(v6 + 119) < 0)
      {
        operator delete(*(void **)(v6 + 96));
        if ((*(char *)(v6 + 95) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*(char *)(v6 + 71) & 0x80000000) == 0) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v6 + 95) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v6 + 72));
      if ((*(char *)(v6 + 71) & 0x80000000) == 0)
      {
LABEL_8:
        if ((*(char *)(v6 + 31) & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
LABEL_13:
      operator delete(*(void **)(v6 + 48));
      if ((*(char *)(v6 + 31) & 0x80000000) == 0)
      {
LABEL_9:
        v6 += 136;
        if (v6 - (void)*v5 == 4080) {
          goto LABEL_15;
        }
        goto LABEL_4;
      }
LABEL_14:
      operator delete(*(void **)(v6 + 8));
      v6 += 136;
      if (v6 - (void)*v5 == 4080)
      {
LABEL_15:
        unint64_t v8 = (unint64_t)v5[1];
        ++v5;
        unint64_t v6 = v8;
      }
LABEL_4:
      if (v6 == v7)
      {
        uint64_t v2 = (void **)a1[1];
        uint64_t v3 = (void **)a1[2];
        break;
      }
    }
  }
  a1[5] = 0;
  unint64_t v9 = (char *)v3 - (char *)v2;
  if (v9 < 0x11) {
    goto LABEL_19;
  }
  do
  {
LABEL_18:
    operator delete(*v2);
    uint64_t v10 = a1[2];
    uint64_t v2 = (void **)(a1[1] + 8);
    a1[1] = v2;
    unint64_t v9 = v10 - (void)v2;
  }
  while (v9 > 0x10);
LABEL_19:
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 15;
  }
  else
  {
    if (v9 >> 3 != 2) {
      return;
    }
    uint64_t v11 = 30;
  }
  a1[4] = v11;
}

void sub_B1B18(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v2) {
    goto LABEL_23;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  do
  {
    int v8 = *(_DWORD *)(v2 + v4 + 64);
    switch(v8)
    {
      case 3:
        uint64_t v6 = *(void *)(v2 + v4 + 80);
        if (v6) {
          goto LABEL_4;
        }
        goto LABEL_5;
      case 2:
        if (*(void *)(v2 + v4 + 72)) {
          operator delete[]();
        }
        if (*(void *)(v2 + v4 + 88)) {
          operator delete();
        }
        goto LABEL_5;
      case 1:
        if (*(void *)(v2 + v4 + 72)) {
          operator delete();
        }
        uint64_t v6 = *(void *)(v2 + v4 + 80);
        if (!v6) {
          goto LABEL_5;
        }
LABEL_4:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
LABEL_5:
        std::string::assign((std::string *)(v2 + v4), "???");
        unint64_t v7 = (void *)(v2 + v4);
        v7[3] = -1;
        v7[4] = -1;
        v7[6] = 0;
        v7[7] = 0;
        v7[5] = -1;
        *(void *)((char *)v7 + 61) = 0;
        v7[10] = 0;
        void v7[11] = 0;
        v7[9] = 0;
        uint64_t v2 = a1[1];
        uint64_t v3 = a1[2];
        break;
    }
    ++v5;
    v4 += 96;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5));
  while (v3 != v2)
  {
    if (*(char *)(v3 - 73) < 0) {
      operator delete(*(void **)(v3 - 96));
    }
    v3 -= 96;
  }
  uint64_t v3 = v2;
LABEL_23:
  a1[2] = v3;
  a1[16] = 0;
}

uint64_t sub_B1CB0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[71];
  uint64_t v5 = a1[70];
  uint64_t v6 = 30 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[74] + a1[73])
  {
    sub_B4B88((uint64_t)(a1 + 69));
    uint64_t v5 = a1[70];
    uint64_t v4 = a1[71];
  }
  if (v4 == v5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[74] + a1[73];
    uint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1E)) + 136 * (v7 % 0x1E);
  }
  uint64_t result = sub_B5158(v8, a2);
  ++a1[74];
  return result;
}

void sub_B1D70(unsigned int a1@<W0>, unint64_t a2@<X8>)
{
  if (a1)
  {
    unsigned int v3 = a1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if ((a1 & 0x80000000) != 0)
    {
      do
      {
        std::string::push_back((std::string *)a2, 10 * ((char)v3 / 10) - v3 + 48);
        unsigned int v4 = v3 + 9;
        unsigned int v3 = (int)v3 / 10;
      }
      while (v4 >= 0x13);
      std::string::push_back((std::string *)a2, 45);
    }
    else
    {
      do
      {
        std::string::push_back((std::string *)a2, (v3 % 0xA) | 0x30);
        BOOL v10 = v3 > 9;
        v3 /= 0xAu;
      }
      while (v10);
    }
    int v5 = *(char *)(a2 + 23);
    BOOL v6 = v5 < 0;
    if (v5 >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(void *)a2;
    }
    if (v6) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    unint64_t v9 = (unsigned char *)(v7 + v8 - 1);
    if (v8) {
      BOOL v10 = (unint64_t)v9 > v7;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      unint64_t v11 = v7 + 1;
      do
      {
        char v12 = *(unsigned char *)(v11 - 1);
        *(unsigned char *)(v11 - 1) = *v9;
        *v9-- = v12;
      }
      while (v11++ < (unint64_t)v9);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 1;
    *(_WORD *)a2 = 48;
  }
}

void sub_B1EB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B1ED4(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_B1F60(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (v1 != *a1)
  {
    unsigned int v3 = a1;
    unint64_t v4 = 0;
    int v5 = a1 + 5;
    BOOL v6 = (std::string *)&v53;
    unint64_t v7 = &v57;
    uint64_t v8 = (std::string *)&v59;
    uint64_t v45 = (uint64_t)(a1 + 69);
    do
    {
      if ((*(_DWORD *)(v2 + 40 * v4) - 1) > 4) {
        goto LABEL_4;
      }
      *((unsigned char *)&v63.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v63, "ERR003 - ");
      if (v4 >= 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 3)) {
        unint64_t v9 = v5;
      }
      else {
        unint64_t v9 = (_DWORD *)(v2 + 40 * v4);
      }
      unsigned int v10 = *v9 - 1;
      unint64_t v11 = "Unknown compiler error";
      if (v10 < 5) {
        unint64_t v11 = off_24381B8[v10];
      }
      std::string::append(&v63, v11);
      if (v4 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v3[1] - *v3) >> 3)) {
        uint64_t v12 = (uint64_t)v5;
      }
      else {
        uint64_t v12 = *v3 + 40 * v4;
      }
      int v13 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v63.__r_.__value_.__l.__size_;
      }
      unint64_t v15 = size + 2;
      if (size + 2 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      uint64_t v47 = v12;
      if (v15 >= 0x17)
      {
        unint64_t v46 = v4;
        unint64_t v17 = v8;
        unint64_t v18 = v3;
        unint64_t v19 = v7;
        uint64_t v20 = v6;
        uint64_t v21 = v5;
        uint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v22 = v15 | 7;
        }
        uint64_t v23 = v22 + 1;
        p_dst = (std::string *)operator new(v22 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 2;
        __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        int v5 = v21;
        BOOL v6 = v20;
        unint64_t v7 = v19;
        unsigned int v3 = v18;
        uint64_t v8 = v17;
        unint64_t v4 = v46;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 2;
        if (!size) {
          goto LABEL_28;
        }
      }
      if (v13 >= 0) {
        char v24 = &v63;
      }
      else {
        char v24 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      memmove(p_dst, v24, size);
LABEL_28:
      strcpy((char *)p_dst + size, ": ");
      uint64_t v25 = v47;
      uint64_t v26 = (const std::string *)(v47 + 8);
      int v27 = *(char *)(v47 + 31);
      if (v27 >= 0) {
        BOOL v28 = (const std::string::value_type *)(v47 + 8);
      }
      else {
        BOOL v28 = *(const std::string::value_type **)(v47 + 8);
      }
      if (v27 >= 0) {
        std::string::size_type v29 = *(unsigned __int8 *)(v47 + 31);
      }
      else {
        std::string::size_type v29 = *(void *)(v47 + 16);
      }
      char v30 = std::string::append(&__dst, v28, v29);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      memset(&v48, 0, sizeof(v48));
      std::string::push_back(&v48, 48);
      std::string::push_back(&v48, 55);
      std::string::push_back(&v48, 50);
      std::string::push_back(&v48, 48);
      std::string::push_back(&v48, 50);
      std::string::size_type v32 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      unint64_t v33 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v32 = v48.__r_.__value_.__l.__size_;
        unint64_t v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if (v32)
      {
        char v34 = (std::string *)((char *)v33 + v32 - 1);
        if (v34 > v33)
        {
          unint64_t v35 = &v33->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v36 = *(v35 - 1);
            *(v35 - 1) = v34->__r_.__value_.__s.__data_[0];
            v34->__r_.__value_.__s.__data_[0] = v36;
            char v34 = (std::string *)((char *)v34 - 1);
          }
          while (v35++ < (char *)v34);
        }
      }
      uint64_t v38 = std::string::insert(&v48, 0, "exprtk.hpp:");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      char v54 = 0;
      LOBYTE(v53) = 0;
      uint64_t v55 = -1;
      *(_OWORD *)unint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      v7[10] = 0;
      int v56 = 6;
      int v52 = *(_DWORD *)v25;
      std::string::operator=(v6, v26);
      uint64_t v55 = *(void *)(v25 + 32);
      std::string::operator=((std::string *)v7, &__str);
      std::string::operator=(v8, &v49);
      uint64_t v40 = v3[71];
      uint64_t v41 = v3[70];
      uint64_t v42 = 30 * ((v40 - v41) >> 3) - 1;
      if (v40 == v41) {
        uint64_t v42 = 0;
      }
      if (v42 == v3[74] + v3[73])
      {
        sub_B4B88(v45);
        uint64_t v41 = v3[70];
        uint64_t v40 = v3[71];
      }
      if (v40 == v41)
      {
        uint64_t v44 = 0;
      }
      else
      {
        unint64_t v43 = v3[74] + v3[73];
        uint64_t v44 = *(void *)(v41 + 8 * (v43 / 0x1E)) + 136 * (v43 % 0x1E);
      }
      sub_B5158(v44, (uint64_t)&v52);
      ++v3[74];
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_50:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_60;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_50;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_51:
        if ((v54 & 0x80000000) == 0) {
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_60:
      operator delete(v57);
      if ((v54 & 0x80000000) == 0)
      {
LABEL_52:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_53;
        }
        goto LABEL_62;
      }
LABEL_61:
      operator delete(v53);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_53:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_54;
        }
        goto LABEL_63;
      }
LABEL_62:
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_64;
      }
LABEL_63:
      operator delete(v48.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_55:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_56;
        }
        goto LABEL_65;
      }
LABEL_64:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_66;
        }
        goto LABEL_3;
      }
LABEL_65:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
      }
        operator delete(v63.__r_.__value_.__l.__data_);
LABEL_3:
      uint64_t v2 = *v3;
      uint64_t v1 = v3[1];
LABEL_4:
      ++v4;
    }
    while (v4 < 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 3));
  }
}

void sub_B2454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if ((*(char *)(v36 - 89) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(exception_object);
}

void *sub_B2544(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 189)
    || (*(void *)(a1 + 1128) = 0, uint64_t v2 = *(void *)(a1 + 1080), *(void *)(a1 + 1088) == v2))
  {
LABEL_6:
    if (!*(unsigned char *)(a1 + 185)) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, a1);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4) & 1) == 0) {
        break;
      }
      ++v3;
      uint64_t v2 = *(void *)(a1 + 1080);
      if (v3 >= (*(void *)(a1 + 1088) - v2) >> 3) {
        goto LABEL_6;
      }
    }
    *(void *)(a1 + 1128) = *(void *)(*(void *)(a1 + 1080) + 8 * v3);
    if (!*(unsigned char *)(a1 + 185)) {
      goto LABEL_13;
    }
  }
  *(void *)(a1 + 1120) = 0;
  uint64_t v5 = *(void *)(a1 + 1056);
  if (*(void *)(a1 + 1064) != v5)
  {
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a1);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7) & 1) == 0) {
        break;
      }
      ++v6;
      uint64_t v5 = *(void *)(a1 + 1056);
      if (v6 >= (*(void *)(a1 + 1064) - v5) >> 3) {
        goto LABEL_13;
      }
    }
    *(void *)(a1 + 1120) = *(void *)(*(void *)(a1 + 1056) + 8 * v6);
    if (!*(unsigned char *)(a1 + 184)) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_13:
  if (!*(unsigned char *)(a1 + 184)) {
    goto LABEL_20;
  }
LABEL_14:
  *(void *)(a1 + 1112) = 0;
  uint64_t v8 = *(void *)(a1 + 1032);
  if (*(void *)(a1 + 1040) != v8)
  {
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(v8 + 8 * v9);
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a1);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) & 1) == 0) {
        break;
      }
      ++v9;
      uint64_t v8 = *(void *)(a1 + 1032);
      if (v9 >= (*(void *)(a1 + 1040) - v8) >> 3) {
        goto LABEL_20;
      }
    }
    *(void *)(a1 + 1112) = *(void *)(*(void *)(a1 + 1032) + 8 * v9);
    if (*(unsigned char *)(a1 + 186)) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (*(unsigned char *)(a1 + 186)) {
    goto LABEL_25;
  }
LABEL_21:
  if (!*(unsigned char *)(a1 + 187) && !*(unsigned char *)(a1 + 188)) {
    return (void *)(&def_332C + 1);
  }
LABEL_25:
  *(void *)(a1 + 1104) = 0;
  uint64_t v11 = *(void *)(a1 + 1008);
  if (*(void *)(a1 + 1016) == v11) {
    return (void *)(&def_332C + 1);
  }
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(v11 + 8 * v12);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, a1);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13)) {
      break;
    }
    ++v12;
    uint64_t v11 = *(void *)(a1 + 1008);
    if (v12 >= (*(void *)(a1 + 1016) - v11) >> 3) {
      return (void *)(&def_332C + 1);
    }
  }
  unint64_t v15 = *(const void **)(*(void *)(a1 + 1008) + 8 * v12);
  *(void *)(a1 + 1104) = v15;
  if (!v15) {
    return 0;
  }
  uint64_t v110 = -1;
  if (v16)
  {
    unint64_t v17 = v16;
    int v18 = *((_DWORD *)v16 + 18);
    int v112 = v18;
    unint64_t v19 = v16 + 80;
    if (v16[103] < 0)
    {
      sub_4200(&__p, *((void **)v16 + 10), *((void *)v16 + 11));
      int v44 = *((_DWORD *)v17 + 18);
      int v45 = v17[103];
      uint64_t v20 = *((void *)v17 + 13);
      uint64_t v114 = v20;
      LODWORD(__str.__r_.__value_.__l.__data_) = v44;
      if (v45 < 0)
      {
        sub_4200(&__str.__r_.__value_.__s.__data_[8], *((void **)v17 + 10), *((void *)v17 + 11));
        uint64_t v20 = *((void *)v17 + 13);
LABEL_84:
        uint64_t v122 = v20;
        unint64_t v46 = std::string::insert((std::string *)&__str.__r_.__value_.__r.__words[1], 0, "ERR004 - Mismatched brackets: '");
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v123.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        std::string v48 = std::string::append(&v123, "'");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        memset(&v118, 0, sizeof(v118));
        std::string::push_back(&v118, 51);
        std::string::push_back(&v118, 49);
        std::string::push_back(&v118, 51);
        std::string::push_back(&v118, 48);
        std::string::push_back(&v118, 50);
        std::string::size_type size = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v51 = &v118;
        }
        else {
          char v51 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v118.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          int v52 = (std::string *)((char *)v51 + size - 1);
          if (v52 > v51)
          {
            char v53 = &v51->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v54 = *(v53 - 1);
              *(v53 - 1) = v52->__r_.__value_.__s.__data_[0];
              v52->__r_.__value_.__s.__data_[0] = v54;
              int v52 = (std::string *)((char *)v52 - 1);
              BOOL v36 = v53++ >= (char *)v52;
            }
            while (!v36);
          }
        }
        uint64_t v55 = std::string::insert(&v118, 0, "exprtk.hpp:");
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v119.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v126.__r_.__value_.__s + 23) = 0;
        v126.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v127 = -1;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        uint64_t v134 = 0;
        int v128 = 2;
        int v125 = v112;
        std::string::operator=(&v126, &__p);
        uint64_t v127 = v114;
        std::string::operator=((std::string *)&v129, &v124);
        std::string::operator=((std::string *)((char *)&v130 + 8), &v119);
        uint64_t v57 = *(void *)(a1 + 568);
        uint64_t v58 = *(void *)(a1 + 560);
        uint64_t v59 = v110 + 30 * ((v57 - v58) >> 3);
        if (v57 == v58) {
          uint64_t v59 = 0;
        }
        if (v59 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v58 = *(void *)(a1 + 560);
          uint64_t v57 = *(void *)(a1 + 568);
        }
        if (v57 == v58)
        {
          uint64_t v61 = 0;
        }
        else
        {
          unint64_t v60 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v61 = *(void *)(v58 + 8 * (v60 / 0x1E)) + 136 * (v60 % 0x1E);
        }
        sub_B5158(v61, (uint64_t)&v125);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v133) < 0)
        {
          operator delete((void *)v132);
          if ((SHIBYTE(v131) & 0x80000000) == 0)
          {
LABEL_103:
            if ((SBYTE7(v130) & 0x80000000) == 0) {
              goto LABEL_104;
            }
            goto LABEL_114;
          }
        }
        else if ((SHIBYTE(v131) & 0x80000000) == 0)
        {
          goto LABEL_103;
        }
        operator delete(*((void **)&v130 + 1));
        if ((SBYTE7(v130) & 0x80000000) == 0)
        {
LABEL_104:
          if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_105;
          }
          goto LABEL_115;
        }
LABEL_114:
        operator delete((void *)v129);
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_105:
          if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_106;
          }
          goto LABEL_116;
        }
LABEL_115:
        operator delete(v126.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_106:
          if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_107;
          }
          goto LABEL_117;
        }
LABEL_116:
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_107:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_108;
          }
          goto LABEL_118;
        }
LABEL_117:
        operator delete(v118.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_108:
          if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_109;
          }
          goto LABEL_119;
        }
LABEL_118:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_109:
          if ((SHIBYTE(v121) & 0x80000000) == 0) {
            goto LABEL_110;
          }
          goto LABEL_120;
        }
LABEL_119:
        operator delete(v123.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v121) & 0x80000000) == 0)
        {
LABEL_110:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
LABEL_121:
          operator delete(__p.__r_.__value_.__l.__data_);
          return 0;
        }
LABEL_120:
        operator delete((void *)__str.__r_.__value_.__l.__size_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_121;
      }
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      __p.__r_.__value_.__r.__words[2] = *((void *)v16 + 12);
      uint64_t v20 = *((void *)v16 + 13);
      uint64_t v114 = v20;
      LODWORD(__str.__r_.__value_.__l.__data_) = v18;
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v19;
    uint64_t v121 = *((void *)v19 + 2);
    goto LABEL_84;
  }
  if (!v21)
  {
    if (v62)
    {
      uint64_t v63 = (uint64_t)v62;
      if (v62[6] == v62[5]) {
        return 0;
      }
      unint64_t v64 = 0;
      while (1)
      {
        sub_B7A38(v63, v64, (uint64_t)&v112);
        std::operator+<char>();
        uint64_t v67 = std::string::append(&v119, "' and '");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v123.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if ((v117 & 0x80u) == 0) {
          uint64_t v69 = (const std::string::value_type *)&v115;
        }
        else {
          uint64_t v69 = (const std::string::value_type *)v115;
        }
        if ((v117 & 0x80u) == 0) {
          std::string::size_type v70 = v117;
        }
        else {
          std::string::size_type v70 = v116;
        }
        unint64_t v71 = std::string::append(&v123, v69, v70);
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        uint64_t v73 = std::string::append(&v124, "'");
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        memset(&v111, 0, sizeof(v111));
        std::string::push_back(&v111, 53);
        std::string::push_back(&v111, 52);
        std::string::push_back(&v111, 51);
        std::string::push_back(&v111, 48);
        std::string::push_back(&v111, 50);
        std::string::size_type v75 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        uint64_t v76 = &v111;
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type v75 = v111.__r_.__value_.__l.__size_;
          uint64_t v76 = (std::string *)v111.__r_.__value_.__r.__words[0];
        }
        if (v75)
        {
          char v77 = (std::string *)((char *)v76 + v75 - 1);
          if (v77 > v76)
          {
            uint64_t v78 = &v76->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v79 = *(v78 - 1);
              *(v78 - 1) = v77->__r_.__value_.__s.__data_[0];
              v77->__r_.__value_.__s.__data_[0] = v79;
              char v77 = (std::string *)((char *)v77 - 1);
              BOOL v36 = v78++ >= (char *)v77;
            }
            while (!v36);
          }
        }
        long long v80 = std::string::insert(&v111, 0, "exprtk.hpp:");
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v118.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v126.__r_.__value_.__s + 23) = 0;
        v126.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v127 = -1;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        uint64_t v134 = 0;
        int v128 = 2;
        int v125 = v112;
        std::string::operator=(&v126, &__p);
        uint64_t v127 = v114;
        std::string::operator=((std::string *)&v129, &__str);
        std::string::operator=((std::string *)((char *)&v130 + 8), &v118);
        uint64_t v82 = *(void *)(a1 + 568);
        uint64_t v83 = *(void *)(a1 + 560);
        uint64_t v84 = v110 + 30 * ((v82 - v83) >> 3);
        if (v82 == v83) {
          uint64_t v84 = 0;
        }
        if (v84 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v83 = *(void *)(a1 + 560);
          uint64_t v82 = *(void *)(a1 + 568);
        }
        if (v82 == v83)
        {
          uint64_t v86 = 0;
        }
        else
        {
          unint64_t v85 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v86 = *(void *)(v83 + 8 * (v85 / 0x1E)) + 136 * (v85 % 0x1E);
        }
        sub_B5158(v86, (uint64_t)&v125);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v133) < 0)
        {
          operator delete((void *)v132);
          if ((SHIBYTE(v131) & 0x80000000) == 0)
          {
LABEL_151:
            if ((SBYTE7(v130) & 0x80000000) == 0) {
              goto LABEL_152;
            }
            goto LABEL_163;
          }
        }
        else if ((SHIBYTE(v131) & 0x80000000) == 0)
        {
          goto LABEL_151;
        }
        operator delete(*((void **)&v130 + 1));
        if ((SBYTE7(v130) & 0x80000000) == 0)
        {
LABEL_152:
          if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_153;
          }
          goto LABEL_164;
        }
LABEL_163:
        operator delete((void *)v129);
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_153:
          if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_154;
          }
          goto LABEL_165;
        }
LABEL_164:
        operator delete(v126.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_154:
          if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_155;
          }
          goto LABEL_166;
        }
LABEL_165:
        operator delete(v118.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_155:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_156;
          }
          goto LABEL_167;
        }
LABEL_166:
        operator delete(v111.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_156:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_157;
          }
          goto LABEL_168;
        }
LABEL_167:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_157:
          if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_158;
          }
          goto LABEL_169;
        }
LABEL_168:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_158:
          if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_159;
          }
          goto LABEL_170;
        }
LABEL_169:
        operator delete(v123.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_159:
          if ((char)v117 < 0) {
            goto LABEL_127;
          }
          goto LABEL_171;
        }
LABEL_170:
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((char)v117 < 0)
        {
LABEL_127:
          operator delete(v115);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_172;
          }
          goto LABEL_128;
        }
LABEL_171:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_172:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_128:
        ++v64;
        uint64_t v66 = *(void *)(v63 + 40);
        uint64_t v65 = *(void *)(v63 + 48);
        if (v64 >= 0xCCCCCCCCCCCCCCCDLL * ((v65 - v66) >> 4))
        {
          if (v65 == v66) {
            return 0;
          }
          goto LABEL_175;
        }
      }
    }
    if (!result) {
      return result;
    }
    uint64_t v63 = (uint64_t)result;
    if (result[6] == result[5]) {
      return 0;
    }
    unint64_t v87 = 0;
    while (1)
    {
      sub_B7D18(v63, v87, (uint64_t)&v112);
      std::operator+<char>();
      long long v90 = std::string::append(&v119, "' and '");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if ((v117 & 0x80u) == 0) {
        size_t v92 = (const std::string::value_type *)&v115;
      }
      else {
        size_t v92 = (const std::string::value_type *)v115;
      }
      if ((v117 & 0x80u) == 0) {
        std::string::size_type v93 = v117;
      }
      else {
        std::string::size_type v93 = v116;
      }
      unint64_t v94 = std::string::append(&v123, v92, v93);
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      uint64_t v96 = std::string::append(&v124, "'");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      memset(&v111, 0, sizeof(v111));
      std::string::push_back(&v111, 53);
      std::string::push_back(&v111, 54);
      std::string::push_back(&v111, 51);
      std::string::push_back(&v111, 48);
      std::string::push_back(&v111, 50);
      std::string::size_type v98 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
      uint64_t v99 = &v111;
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v98 = v111.__r_.__value_.__l.__size_;
        uint64_t v99 = (std::string *)v111.__r_.__value_.__r.__words[0];
      }
      if (v98)
      {
        uint64_t v100 = (std::string *)((char *)v99 + v98 - 1);
        if (v100 > v99)
        {
          uint64_t v101 = &v99->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v102 = *(v101 - 1);
            *(v101 - 1) = v100->__r_.__value_.__s.__data_[0];
            v100->__r_.__value_.__s.__data_[0] = v102;
            uint64_t v100 = (std::string *)((char *)v100 - 1);
            BOOL v36 = v101++ >= (char *)v100;
          }
          while (!v36);
        }
      }
      unsigned int v103 = std::string::insert(&v111, 0, "exprtk.hpp:");
      long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v104;
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v126.__r_.__value_.__s + 23) = 0;
      v126.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v127 = -1;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v134 = 0;
      int v128 = 2;
      int v125 = v112;
      std::string::operator=(&v126, &__p);
      uint64_t v127 = v114;
      std::string::operator=((std::string *)&v129, &__str);
      std::string::operator=((std::string *)((char *)&v130 + 8), &v118);
      uint64_t v105 = *(void *)(a1 + 568);
      uint64_t v106 = *(void *)(a1 + 560);
      uint64_t v107 = v110 + 30 * ((v105 - v106) >> 3);
      if (v105 == v106) {
        uint64_t v107 = 0;
      }
      if (v107 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v106 = *(void *)(a1 + 560);
        uint64_t v105 = *(void *)(a1 + 568);
      }
      if (v105 == v106)
      {
        uint64_t v109 = 0;
      }
      else
      {
        unint64_t v108 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v109 = *(void *)(v106 + 8 * (v108 / 0x1E)) + 136 * (v108 % 0x1E);
      }
      sub_B5158(v109, (uint64_t)&v125);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v133) < 0)
      {
        operator delete((void *)v132);
        if ((SHIBYTE(v131) & 0x80000000) == 0)
        {
LABEL_203:
          if ((SBYTE7(v130) & 0x80000000) == 0) {
            goto LABEL_204;
          }
          goto LABEL_215;
        }
      }
      else if ((SHIBYTE(v131) & 0x80000000) == 0)
      {
        goto LABEL_203;
      }
      operator delete(*((void **)&v130 + 1));
      if ((SBYTE7(v130) & 0x80000000) == 0)
      {
LABEL_204:
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
        goto LABEL_216;
      }
LABEL_215:
      operator delete((void *)v129);
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_205:
        if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
        goto LABEL_217;
      }
LABEL_216:
      operator delete(v126.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_206:
        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
        goto LABEL_218;
      }
LABEL_217:
      operator delete(v118.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_207:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_208;
        }
        goto LABEL_219;
      }
LABEL_218:
      operator delete(v111.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_208:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_209;
        }
        goto LABEL_220;
      }
LABEL_219:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_209:
        if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_210;
        }
        goto LABEL_221;
      }
LABEL_220:
      operator delete(v124.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_210:
        if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_211;
        }
        goto LABEL_222;
      }
LABEL_221:
      operator delete(v123.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_211:
        if ((char)v117 < 0) {
          goto LABEL_179;
        }
        goto LABEL_223;
      }
LABEL_222:
      operator delete(v119.__r_.__value_.__l.__data_);
      if ((char)v117 < 0)
      {
LABEL_179:
        operator delete(v115);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_224;
        }
        goto LABEL_180;
      }
LABEL_223:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_224:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_180:
      ++v87;
      uint64_t v89 = *(void *)(v63 + 40);
      uint64_t v88 = *(void *)(v63 + 48);
      if (v87 >= 0xCCCCCCCCCCCCCCCDLL * ((v88 - v89) >> 4))
      {
        if (v88 == v89) {
          return 0;
        }
LABEL_175:
        sub_B7CA8(v63);
        return 0;
      }
    }
  }
  uint64_t v22 = v21;
  uint64_t v23 = v21[3];
  uint64_t v24 = v21[4];
  if (v24 == v23) {
    return 0;
  }
  unint64_t v25 = 0;
  do
  {
    while (1)
    {
      if (v25 >= (v24 - v23) >> 3) {
        unint64_t v26 = -1;
      }
      else {
        unint64_t v26 = *(void *)(v23 + 8 * v25);
      }
      if (v26 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)) {
        uint64_t v27 = a1 + 40;
      }
      else {
        uint64_t v27 = *(void *)a1 + 40 * v26;
      }
      int v112 = *(_DWORD *)v27;
      if (*(char *)(v27 + 31) < 0)
      {
        sub_4200(&__p, *(void **)(v27 + 8), *(void *)(v27 + 16));
      }
      else
      {
        long long v28 = *(_OWORD *)(v27 + 8);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v27 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      }
      uint64_t v114 = *(void *)(v27 + 32);
      std::operator+<char>();
      std::string::size_type v29 = std::string::append(&v124, "'");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      memset(&v119, 0, sizeof(v119));
      std::string::push_back(&v119, 53);
      std::string::push_back(&v119, 50);
      std::string::push_back(&v119, 51);
      std::string::push_back(&v119, 48);
      std::string::push_back(&v119, 50);
      std::string::size_type v31 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      std::string::size_type v32 = &v119;
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v31 = v119.__r_.__value_.__l.__size_;
        std::string::size_type v32 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if (v31)
      {
        unint64_t v33 = (std::string *)((char *)v32 + v31 - 1);
        if (v33 > v32)
        {
          char v34 = &v32->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v35 = *(v34 - 1);
            *(v34 - 1) = v33->__r_.__value_.__s.__data_[0];
            v33->__r_.__value_.__s.__data_[0] = v35;
            unint64_t v33 = (std::string *)((char *)v33 - 1);
            BOOL v36 = v34++ >= (char *)v33;
          }
          while (!v36);
        }
      }
      unint64_t v37 = std::string::insert(&v119, 0, "exprtk.hpp:");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v126.__r_.__value_.__s + 23) = 0;
      v126.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v127 = -1;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      uint64_t v134 = 0;
      int v128 = 2;
      int v125 = v112;
      std::string::operator=(&v126, &__p);
      uint64_t v127 = v114;
      std::string::operator=((std::string *)&v129, &__str);
      std::string::operator=((std::string *)((char *)&v130 + 8), &v123);
      uint64_t v39 = *(void *)(a1 + 568);
      uint64_t v40 = *(void *)(a1 + 560);
      uint64_t v41 = v110 + 30 * ((v39 - v40) >> 3);
      if (v39 == v40) {
        uint64_t v41 = 0;
      }
      if (v41 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v40 = *(void *)(a1 + 560);
        uint64_t v39 = *(void *)(a1 + 568);
      }
      if (v39 == v40)
      {
        uint64_t v43 = 0;
      }
      else
      {
        unint64_t v42 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v43 = *(void *)(v40 + 8 * (v42 / 0x1E)) + 136 * (v42 % 0x1E);
      }
      sub_B5158(v43, (uint64_t)&v125);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v133) < 0) {
        break;
      }
      if ((SHIBYTE(v131) & 0x80000000) == 0) {
        goto LABEL_64;
      }
LABEL_72:
      operator delete(*((void **)&v130 + 1));
      if (SBYTE7(v130) < 0) {
        goto LABEL_73;
      }
LABEL_65:
      if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_74:
      operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_75;
      }
LABEL_67:
      if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_76:
      operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_77;
      }
LABEL_69:
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_78;
      }
LABEL_37:
      operator delete(v124.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_79;
      }
LABEL_38:
      ++v25;
      uint64_t v23 = v22[3];
      uint64_t v24 = v22[4];
      if (v25 >= (v24 - v23) >> 3) {
        goto LABEL_80;
      }
    }
    operator delete((void *)v132);
    if (SHIBYTE(v131) < 0) {
      goto LABEL_72;
    }
LABEL_64:
    if ((SBYTE7(v130) & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_73:
    operator delete((void *)v129);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_74;
    }
LABEL_66:
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_75:
    operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_76;
    }
LABEL_68:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_77:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
LABEL_78:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_79:
    operator delete(__p.__r_.__value_.__l.__data_);
    ++v25;
    uint64_t v23 = v22[3];
    uint64_t v24 = v22[4];
  }
  while (v25 < (v24 - v23) >> 3);
LABEL_80:
  if (v24 != v23)
  {
    uint64_t result = 0;
    v22[4] = v23;
    return result;
  }
  return 0;
}

void sub_B390C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,void *a46,int a47,__int16 a48,char a49,char a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_B3BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    uint64_t v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  uint64_t result = std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  return result;
}

uint64_t sub_B3C54(std::string::size_type a1)
{
  long long v74 = 0uLL;
  std::string::size_type v75 = 0;
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  uint64_t v73 = 0;
  v68[0] = 1;
  std::string::size_type v69 = a1;
  std::string::size_type v70 = &v74;
  *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
  v66.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v67 = -1;
  int v61 = 0;
  long long v47 = (std::string *)&v62;
  char v63 = 0;
  uint64_t v2 = (std::string *)(a1 + 112);
  uint64_t v64 = -1;
  LOBYTE(v62) = 0;
  while (1)
  {
    *(unsigned char *)(a1 + 651) = 0;
    int v65 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v66, v2);
    uint64_t v67 = *(void *)(a1 + 136);
    uint64_t v3 = sub_B7FE4(a1, 0);
    uint64_t v4 = v3;
    if (!v3)
    {
      if (*(void *)(a1 + 592)) {
        goto LABEL_72;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9960;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR008 - Invalid expression encountered");
      memset(&v48, 0, sizeof(v48));
      std::string::push_back(&v48, 52);
      std::string::push_back(&v48, 53);
      std::string::push_back(&v48, 53);
      std::string::push_back(&v48, 48);
      std::string::push_back(&v48, 50);
      std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v31 = &v48;
      }
      else {
        std::string::size_type v31 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v48.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::size_type v32 = (std::string *)((char *)v31 + size - 1);
        if (v32 > v31)
        {
          unint64_t v33 = &v31->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v34 = *(v33 - 1);
            *(v33 - 1) = v32->__r_.__value_.__s.__data_[0];
            v32->__r_.__value_.__s.__data_[0] = v34;
            std::string::size_type v32 = (std::string *)((char *)v32 - 1);
          }
          while (v33++ < (char *)v32);
        }
      }
      BOOL v36 = std::string::insert(&v48, 0, "exprtk.hpp:");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v52.__r_.__value_.__s + 23) = 0;
      v52.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v53 = -1;
      *(_OWORD *)uint64_t v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v60 = 0;
      int v54 = 1;
      LODWORD(__p) = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v52, v2);
      uint64_t v53 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v55, &__str);
      std::string::operator=((std::string *)((char *)&v56 + 8), &v49);
      uint64_t v38 = *(void *)(a1 + 568);
      uint64_t v39 = *(void *)(a1 + 560);
      uint64_t v40 = 30 * ((v38 - v39) >> 3) - 1;
      if (v38 == v39) {
        uint64_t v40 = 0;
      }
      if (v40 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v39 = *(void *)(a1 + 560);
        uint64_t v38 = *(void *)(a1 + 568);
      }
      if (v38 == v39)
      {
        uint64_t v42 = 0;
      }
      else
      {
        unint64_t v41 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v42 = *(void *)(v39 + 8 * (v41 / 0x1E)) + 136 * (v41 % 0x1E);
      }
      sub_B5158(v42, (uint64_t)&__p);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v59) < 0)
      {
        operator delete((void *)v58);
        if ((SHIBYTE(v57) & 0x80000000) == 0)
        {
LABEL_67:
          if ((SBYTE7(v56) & 0x80000000) == 0) {
            goto LABEL_68;
          }
          goto LABEL_81;
        }
      }
      else if ((SHIBYTE(v57) & 0x80000000) == 0)
      {
        goto LABEL_67;
      }
      operator delete(*((void **)&v56 + 1));
      if ((SBYTE7(v56) & 0x80000000) == 0)
      {
LABEL_68:
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_82;
      }
LABEL_81:
      operator delete(v55[0]);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_69:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_70;
        }
        goto LABEL_83;
      }
LABEL_82:
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_70:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_84;
      }
LABEL_83:
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_71:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_72;
        }
        goto LABEL_85;
      }
LABEL_84:
      operator delete(v48.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_72:
        uint64_t v44 = 0;
        if (v63 < 0) {
          goto LABEL_86;
        }
        goto LABEL_73;
      }
LABEL_85:
      operator delete(__str.__r_.__value_.__l.__data_);
      uint64_t v44 = 0;
      if (v63 < 0) {
        goto LABEL_86;
      }
LABEL_73:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_87;
      }
      goto LABEL_74;
    }
    uint64_t v5 = (char *)*((void *)&v74 + 1);
    if (*((void *)&v74 + 1) < (unint64_t)v75)
    {
      **((void **)&v74 + 1) = v3;
      uint64_t v6 = (uint64_t)(v5 + 8);
      goto LABEL_25;
    }
    uint64_t v7 = (char *)v74;
    uint64_t v8 = (uint64_t)(*((void *)&v74 + 1) - v74) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v10 = (uint64_t)&v75[-v74];
    if ((uint64_t)&v75[-v74] >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    unint64_t v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v9;
    if (v11)
    {
      if (v11 >> 61) {
        sub_188D718();
      }
      unint64_t v12 = (char *)operator new(8 * v11);
      uint64_t v13 = (uint64_t *)&v12[8 * v8];
      *uint64_t v13 = v4;
      uint64_t v6 = (uint64_t)(v13 + 1);
      if (v5 == v7)
      {
LABEL_23:
        *(void *)&long long v74 = v13;
        *((void *)&v74 + 1) = v6;
        std::string::size_type v75 = &v12[8 * v11];
        if (!v5) {
          goto LABEL_25;
        }
LABEL_24:
        operator delete(v5);
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = (uint64_t *)(8 * v8);
      *(void *)(8 * v8) = v4;
      uint64_t v6 = 8 * v8 + 8;
      if (v5 == v7) {
        goto LABEL_23;
      }
    }
    unint64_t v14 = v5 - 8 - v7;
    if (v14 < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v7 - v12) < 0x20) {
      goto LABEL_94;
    }
    uint64_t v15 = (v14 >> 3) + 1;
    uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v17 = &v5[-v16];
    uint64_t v13 = (uint64_t *)((char *)v13 - v16);
    int v18 = &v12[8 * v8 - 16];
    unint64_t v19 = v5 - 16;
    uint64_t v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *(_OWORD *)v19;
      *((_OWORD *)v18 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)int v18 = v21;
      v18 -= 32;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    uint64_t v5 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v22 = *((void *)v5 - 1);
        v5 -= 8;
        *--uint64_t v13 = v22;
      }
      while (v5 != v7);
    }
    uint64_t v5 = (char *)v74;
    *(void *)&long long v74 = v13;
    *((void *)&v74 + 1) = v6;
    std::string::size_type v75 = &v12[8 * v11];
    if (v5) {
      goto LABEL_24;
    }
LABEL_25:
    *((void *)&v74 + 1) = v6;
    unint64_t v23 = v72;
    if (v72 == v73 << 6)
    {
      if ((uint64_t)(v72 + 1) < 0) {
        sub_2E00();
      }
      unint64_t v24 = v73 << 7;
      if (v73 << 7 <= (v72 & 0xFFFFFFFFFFFFFFC0) + 64) {
        unint64_t v24 = (v72 & 0xFFFFFFFFFFFFFFC0) + 64;
      }
      if (v72 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v25 = v24;
      }
      else {
        unint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_3D110((uint64_t)&v71, v25);
      unint64_t v23 = v72;
    }
    unint64_t v72 = v23 + 1;
    unint64_t v26 = v23 >> 6;
    uint64_t v27 = 1 << v23;
    if (*(unsigned char *)(a1 + 651)) {
      uint64_t v28 = v71[v26] | v27;
    }
    else {
      uint64_t v28 = v71[v26] & ~v27;
    }
    v71[v26] = v28;
    int v61 = *(_DWORD *)(a1 + 104);
    std::string::operator=(v47, v2);
    uint64_t v64 = *(void *)(a1 + 136);
    sub_BA2FC(a1, (uint64_t)&v65, (uint64_t)&v61, (char *)&__p);
    if (v52.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(__p);
    }
    uint64_t v29 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v29) {
      break;
    }
    if (*(_DWORD *)(a1 + 104) == 6)
    {
      *(void *)(a1 + 24) = v29 + 40;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v29;
      std::string::operator=(v2, (const std::string *)(v29 + 8));
      *(void *)(a1 + 136) = *(void *)(v29 + 32);
    }
  }
  if ((void)v74 != *((void *)&v74 + 1))
  {
    uint64_t v43 = *(void *)(*((void *)&v74 + 1) - 8);
    if (v43)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v43 + 32))(v43) == 15) {
        *(unsigned char *)(a1 + 476) = 1;
      }
    }
  }
  uint64_t v44 = sub_BA554(a1, &v74, &v71, 0);
  v68[0] = v44 == 0;
  if ((v63 & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_86:
  operator delete(v62);
  if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    sub_22094C((uint64_t)v68);
    int v45 = v71;
    if (!v71) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
LABEL_87:
  operator delete(v66.__r_.__value_.__l.__data_);
  sub_22094C((uint64_t)v68);
  int v45 = v71;
  if (v71) {
LABEL_75:
  }
    operator delete(v45);
LABEL_76:
  if ((void)v74)
  {
    *((void *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  return v44;
}

void sub_B4320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
LABEL_3:
    if (a51 < 0) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  operator delete(a22);
  if (a51 < 0)
  {
LABEL_4:
    operator delete(a46);
    if ((*(char *)(v51 - 177) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((*(char *)(v51 - 177) & 0x80000000) == 0)
  {
LABEL_5:
    sub_22094C(v51 - 168);
    uint64_t v53 = *(void **)(v51 - 144);
    if (!v53) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v51 - 200));
  sub_22094C(v51 - 168);
  uint64_t v53 = *(void **)(v51 - 144);
  if (!v53)
  {
LABEL_6:
    int v54 = *(void **)(v51 - 120);
    if (!v54) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v53);
  int v54 = *(void **)(v51 - 120);
  if (!v54) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_13:
  *(void *)(v51 - 112) = v54;
  operator delete(v54);
  _Unwind_Resume(a1);
}

void sub_B4434(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 880);
  if (*(void *)(a1 + 888) != v2)
  {
    uint64_t v3 = a2;
    unint64_t v5 = 0;
    while (1)
    {
      int v8 = *(_DWORD *)(v2 + 96 * v5 + 64);
      if (v8 == 3) {
        goto LABEL_9;
      }
      if (v8 != 2) {
        break;
      }
      uint64_t v14 = *(void *)(v2 + 96 * v5 + 88);
      if (v14)
      {
        uint64_t v15 = (void *)*v3;
        if (*v3)
        {
          unint64_t v17 = (void *)v15[3];
          unint64_t v16 = v15[4];
          if ((unint64_t)v17 >= v16)
          {
            unint64_t v24 = (void *)v15[2];
            unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v17 - v24) + 1;
            if (v25 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_94;
            }
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v24) >> 3);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x555555555555555) {
              unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v27 = v25;
            }
            unint64_t v61 = v27;
            if (v27)
            {
              if (v27 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_95;
              }
              uint64_t v28 = (char *)operator new(24 * v27);
            }
            else
            {
              uint64_t v28 = 0;
            }
            int v45 = &v28[8 * (v17 - v24)];
            *(void *)int v45 = v14;
            *((_DWORD *)v45 + 2) = 2;
            *((void *)v45 + 2) = 0;
            unint64_t v46 = v45;
            if (v17 != v24)
            {
              do
              {
                long long v47 = *(_OWORD *)(v17 - 3);
                *((void *)v46 - 1) = *(v17 - 1);
                *(_OWORD *)(v46 - 24) = v47;
                v46 -= 24;
                v17 -= 3;
              }
              while (v17 != v24);
              unint64_t v17 = (void *)v15[2];
            }
            int v18 = v45 + 24;
            void v15[2] = v46;
            void v15[3] = v45 + 24;
            v15[4] = &v28[24 * v61];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *unint64_t v17 = v14;
            *((_DWORD *)v17 + 2) = 2;
            int v18 = v17 + 3;
            void v17[2] = 0;
          }
          void v15[3] = v18;
        }
      }
      uint64_t v48 = *(void *)(v2 + 96 * v5 + 72);
      if (v48)
      {
        unint64_t v33 = (void *)*v3;
        if (*v3)
        {
          uint64_t v49 = *(void *)(v2 + 96 * v5 + 24);
          unint64_t v35 = v33[3];
          unint64_t v50 = v33[4];
          if (v35 < v50)
          {
            *(void *)unint64_t v35 = v48;
            *(_DWORD *)(v35 + 8) = 4;
            uint64_t v6 = (char *)(v35 + 24);
            *(void *)(v35 + 16) = v49;
            goto LABEL_4;
          }
          uint64_t v51 = v33 + 2;
          uint64_t v52 = v33[2];
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v52) >> 3) + 1;
          if (v53 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - v52) >> 3);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0x555555555555555) {
            unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v55 = v53;
          }
          unint64_t v62 = v55;
          if (v55)
          {
            if (v55 > 0xAAAAAAAAAAAAAAALL) {
LABEL_95:
            }
              sub_188D718();
            long long v56 = (char *)operator new(24 * v55);
            uint64_t v51 = v33 + 2;
            uint64_t v3 = a2;
          }
          else
          {
            long long v56 = 0;
          }
          long long v57 = &v56[8 * ((uint64_t)(v35 - v52) >> 3)];
          *(void *)long long v57 = v48;
          *((_DWORD *)v57 + 2) = 4;
          *((void *)v57 + 2) = v49;
          long long v58 = v57;
          if (v35 == v52)
          {
            unint64_t v59 = v62;
          }
          else
          {
            unint64_t v59 = v62;
            do
            {
              long long v60 = *(_OWORD *)(v35 - 24);
              *((void *)v58 - 1) = *(void *)(v35 - 8);
              *(_OWORD *)(v58 - 24) = v60;
              v58 -= 24;
              v35 -= 24;
            }
            while (v35 != v52);
            unint64_t v35 = *v51;
          }
          uint64_t v6 = v57 + 24;
          v33[2] = v58;
          v33[3] = v57 + 24;
          v33[4] = &v56[24 * v59];
          if (!v35) {
            goto LABEL_4;
          }
LABEL_63:
          operator delete((void *)v35);
          goto LABEL_4;
        }
      }
LABEL_5:
      uint64_t v7 = v2 + 96 * v5;
      *(void *)(v7 + 48) = 0;
      *(unsigned char *)(v7 + 68) = 0;
      ++v5;
      *(void *)(v7 + 80) = 0;
      *(void *)(v7 + 88) = 0;
      *(void *)(v7 + 72) = 0;
      uint64_t v2 = *(void *)(a1 + 880);
      if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v2) >> 5)) {
        return;
      }
    }
    if (v8 != 1) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = *(void *)(v2 + 96 * v5 + 80);
    if (!v9 || (uint64_t v10 = (void *)*v3) == 0)
    {
LABEL_42:
      uint64_t v32 = *(void *)(v2 + 96 * v5 + 72);
      if (!v32) {
        goto LABEL_5;
      }
      unint64_t v33 = (void *)*v3;
      if (!*v3) {
        goto LABEL_5;
      }
      unint64_t v35 = v33[3];
      unint64_t v34 = v33[4];
      if (v35 < v34)
      {
        *(void *)unint64_t v35 = v32;
        *(_DWORD *)(v35 + 8) = 3;
        uint64_t v6 = (char *)(v35 + 24);
        *(void *)(v35 + 16) = 1;
LABEL_4:
        v33[3] = v6;
        goto LABEL_5;
      }
      uint64_t v36 = v33[2];
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v36) >> 3) + 1;
      if (v37 > 0xAAAAAAAAAAAAAAALL) {
LABEL_94:
      }
        sub_2E00();
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v36) >> 3);
      if (2 * v38 > v37) {
        unint64_t v37 = 2 * v38;
      }
      if (v38 >= 0x555555555555555) {
        unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        if (v39 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_95;
        }
        uint64_t v40 = (char *)operator new(24 * v39);
      }
      else
      {
        uint64_t v40 = 0;
      }
      unint64_t v41 = &v40[8 * ((uint64_t)(v35 - v36) >> 3)];
      *(void *)unint64_t v41 = v32;
      *((_DWORD *)v41 + 2) = 3;
      *((void *)v41 + 2) = 1;
      uint64_t v42 = v41;
      if (v35 == v36)
      {
        uint64_t v3 = a2;
      }
      else
      {
        uint64_t v3 = a2;
        do
        {
          long long v43 = *(_OWORD *)(v35 - 24);
          *((void *)v42 - 1) = *(void *)(v35 - 8);
          *(_OWORD *)(v42 - 24) = v43;
          v42 -= 24;
          v35 -= 24;
        }
        while (v35 != v36);
        unint64_t v35 = v33[2];
      }
      uint64_t v44 = &v40[24 * v39];
      uint64_t v6 = v41 + 24;
      v33[2] = v42;
      v33[3] = v41 + 24;
      v33[4] = v44;
      if (!v35) {
        goto LABEL_4;
      }
      goto LABEL_63;
    }
    unint64_t v12 = (void *)v10[3];
    unint64_t v11 = v10[4];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v19 = (void *)v10[2];
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v12 - v19) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_94;
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v19) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_95;
        }
        unint64_t v23 = (char *)operator new(24 * v22);
      }
      else
      {
        unint64_t v23 = 0;
      }
      uint64_t v29 = &v23[8 * (v12 - v19)];
      *(void *)uint64_t v29 = v9;
      *((_DWORD *)v29 + 2) = 1;
      *((void *)v29 + 2) = 0;
      long long v30 = v29;
      if (v12 == v19)
      {
        uint64_t v3 = a2;
        uint64_t v13 = v29 + 24;
        void v10[2] = v29;
        uint64_t v10[3] = v29 + 24;
        v10[4] = &v23[24 * v22];
        if (!v12) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v3 = a2;
        do
        {
          long long v31 = *(_OWORD *)(v12 - 3);
          *((void *)v30 - 1) = *(v12 - 1);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v12 -= 3;
        }
        while (v12 != v19);
        unint64_t v12 = (void *)v10[2];
        uint64_t v13 = v29 + 24;
        void v10[2] = v30;
        uint64_t v10[3] = v29 + 24;
        v10[4] = &v23[24 * v22];
        if (!v12) {
          goto LABEL_41;
        }
      }
      operator delete(v12);
    }
    else
    {
      *unint64_t v12 = v9;
      *((_DWORD *)v12 + 2) = 1;
      uint64_t v13 = v12 + 3;
      v12[2] = 0;
    }
LABEL_41:
    uint64_t v10[3] = v13;
    goto LABEL_42;
  }
}

std::string *sub_B49F0@<X0>(int a1@<W0>, uint64_t a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)(a5 + 31) = 0;
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 32) = -1;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(void *)(a5 + 128) = 0;
  *(_DWORD *)(a5 + 40) = a1;
  *(_DWORD *)a5 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a5 + 8), (const std::string *)(a2 + 8));
  *(void *)(a5 + 32) = *(void *)(a2 + 32);
  std::string::operator=((std::string *)(a5 + 48), a3);
  return std::string::operator=((std::string *)(a5 + 72), a4);
}

void sub_B4A88(_Unwind_Exception *a1)
{
  sub_B1ED4(v1);
  _Unwind_Resume(a1);
}

void sub_B4A9C(int a1, std::string *this)
{
  int v3 = this[2].__r_.__value_.__r.__words[2];
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      if (this[3].__r_.__value_.__r.__words[0]) {
        operator delete[]();
      }
      if (this[3].__r_.__value_.__r.__words[2]) {
        operator delete();
      }
      goto LABEL_12;
    }
    if (v3 != 1) {
      return;
    }
    if (this[3].__r_.__value_.__r.__words[0]) {
      operator delete();
    }
  }
  std::string::size_type size = this[3].__r_.__value_.__l.__size_;
  if (size) {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
LABEL_12:
  std::string::assign(this, "???");
  this[1].__r_.__value_.__r.__words[0] = -1;
  this[1].__r_.__value_.__l.__size_ = -1;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = -1;
  *(std::string::size_type *)((char *)&this[2].__r_.__value_.__r.__words[1] + 5) = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
}

void sub_B4B88(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x1E;
  unint64_t v4 = v2 - 30;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        unint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            long long v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              char v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v91 = operator new(0xFF0uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    long long v91 = operator new(0xFF0uLL);
    sub_224F8((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        unint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            long long v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              long long v47 = &v35[v84];
              v7 += v84;
              unint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            long long v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)long long v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0xFF0uLL);
  unint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          long long v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          unint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            int v65 = &v27[v68];
            std::string::size_type v69 = (long long *)(v27 + 16);
            std::string::size_type v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)std::string::size_type v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          long long v57 = &v29[8 * (v56 >> 1)];
          unint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        unint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_B50F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_B5114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_B5128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_B5140(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B5158(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_4200((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    sub_4200((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
  }
  uint64_t v7 = (unsigned char *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

void sub_B526C(_Unwind_Exception *exception_object)
{
  if (v1[95] < 0)
  {
    operator delete(*v4);
    if ((v1[71] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v1[71] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_B52E0(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    BOOL v3 = a2;
  }
  else {
    BOOL v3 = (uint64_t *)*a2;
  }
  *(void *)(a1 + 80) = v3;
  if (*((char *)a2 + 23) >= 0) {
    long long v4 = a2;
  }
  else {
    long long v4 = (uint64_t *)*a2;
  }
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) == 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = (uint64_t *)*a2;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  uint64_t v7 = (uint64_t)v6 + v5;
  *(void *)(a1 + 96) = v7;
  *(_DWORD *)(a1 + 40) = 6;
  long long v8 = (unsigned char **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0 && (*(void *)(a1 + 64) & 0x8000000000000000) != 0)
  {
    *std::string *v8 = 0;
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_15:
      *(unsigned char *)(a1 + 71) = 0;
      if (!v3) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else
  {
    *(unsigned char *)long long v8 = 0;
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  *(void *)(a1 + 56) = 0;
  if (v3) {
LABEL_16:
  }
    *(void *)(a1 + 72) = v7 - (void)v3;
LABEL_17:
  uint64_t v9 = *(void *)a1;
  for (uint64_t i = *(void *)(a1 + 8); i != v9; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  *(void *)(a1 + 8) = v9;
  while (*(void *)(a1 + 96) != *(void *)(a1 + 88))
  {
    sub_B5418((uint64_t *)a1);
    uint64_t v11 = *(void *)(a1 + 8);
    if (*(void *)a1 != v11 && (*(_DWORD *)(v11 - 40) - 1) < 5) {
      return 0;
    }
  }
  return 1;
}

void sub_B5418(uint64_t *a1)
{
  unint64_t v2 = (unsigned __int8 *)a1[11];
  int v3 = *v2;
  if ((v3 - 8) < 6 || v3 == 32)
  {
    for (uint64_t i = (unsigned __int8 *)a1[12]; v2 != i; a1[11] = (uint64_t)++v2)
    {
      int v5 = *v2;
      if ((v5 - 8) >= 6 && v5 != 32) {
        break;
      }
    }
  }
  else
  {
    if (v3 == 35
      || (int v6 = v2[1], (unsigned __int8 *)a1[12] != v2 + 1)
      && (v6 != 47 ? (BOOL v7 = v6 == 42) : (BOOL v7 = 1), !v7 ? (v8 = 0) : (v8 = 1), v3 == 47 ? (v9 = v8 == 0) : (v9 = 1), !v9))
    {
      sub_B5680((uint64_t)a1);
      return;
    }
    if (sub_B58DC((char)v3))
    {
      sub_B5A8C((uint64_t)a1);
      return;
    }
    uint64_t v10 = (char *)a1[11];
    int v11 = *v10;
    if ((v11 & 0xFFFFFFDF) - 65 <= 0x19)
    {
      sub_B5F4C((uint64_t)a1);
      return;
    }
    if ((v11 - 48) < 0xA) {
      goto LABEL_34;
    }
    if (v11 == 36)
    {
      sub_B6FE8((uint64_t)a1);
    }
    else
    {
      if (v11 == 126)
      {
        int v12 = 0;
        char v14 = 0;
        LOBYTE(__p) = 0;
        uint64_t v15 = -1;
        sub_B7440((uint64_t)&v12, (uint64_t)v10, v10 + 1, a1[10]);
        sub_B75A8((uint64_t)a1, (uint64_t)&v12);
      }
      else
      {
        if (v11 == 46)
        {
LABEL_34:
          sub_B6240((uint64_t)a1);
          return;
        }
        int v12 = 0;
        char v14 = 0;
        LOBYTE(__p) = 0;
        uint64_t v15 = -1;
        sub_B7650((uint64_t)&v12, 1, (uint64_t)v10, v10 + 2, a1[10]);
        sub_B75A8((uint64_t)a1, (uint64_t)&v12);
      }
      ++a1[11];
      if (v14 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_B5660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B5680(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 88);
  unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
  if (v2 != v1)
  {
    int v4 = *v1;
    if (v4 == 35)
    {
      int v6 = 0;
      int v7 = 1;
      int v8 = v1 + 1;
      *(void *)(a1 + 88) = v1 + 1;
      if (v2 != v1 + 1) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v4 != 47) {
        return;
      }
      int v5 = v1[1];
      if (v5 == 47)
      {
        int v6 = 0;
        int v7 = 1;
        int v8 = v1 + 2;
        *(void *)(a1 + 88) = v1 + 2;
        while (v8 != v2)
        {
LABEL_17:
          if (v7 == 2)
          {
            if (v8 + 1 != v2 && *v8 == 42 && v8[1] == 47)
            {
              *(void *)(a1 + 88) = v8 + 2;
              return;
            }
          }
          else if (*v8 == 10)
          {
            *(void *)(a1 + 88) = v8 + 1;
            return;
          }
          *(void *)(a1 + 88) = ++v8;
        }
      }
      else
      {
        if (v5 != 42) {
          return;
        }
        int v6 = 1;
        int v7 = 2;
        int v8 = v1 + 2;
        *(void *)(a1 + 88) = v1 + 2;
        if (v2 != v1 + 2) {
          goto LABEL_17;
        }
      }
    }
    if (v6)
    {
      HIBYTE(v16) = 0;
      LOBYTE(__p) = 0;
      uint64_t v17 = -1;
      uint64_t v9 = *(void *)(a1 + 80);
      int v14 = 1;
      LOBYTE(__p) = *v1;
      *(_WORD *)((char *)&__p + 1) = v1[1];
      HIBYTE(v16) = 2;
      if (v9) {
        uint64_t v17 = (uint64_t)&v1[-v9];
      }
      unint64_t v10 = *(void *)(a1 + 8);
      if (v10 >= *(void *)(a1 + 16))
      {
        uint64_t v12 = sub_B77C0((char **)a1, (uint64_t)&v14);
        char v13 = HIBYTE(v16);
        *(void *)(a1 + 8) = v12;
        if (v13 < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v10 = v14;
        long long v11 = __p;
        *(void *)(v10 + 24) = v16;
        *(_OWORD *)(v10 + 8) = v11;
        *(void *)(v10 + 32) = v17;
        *(void *)(a1 + 8) = v10 + 40;
        *(void *)(a1 + 8) = v10 + 40;
      }
    }
  }
}

void sub_B58B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_B58DC(int a1)
{
  int v1 = a1 - 33;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 58:
    case 60:
    case 61:
    case 90:
    case 91:
    case 92:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_B5A8C(uint64_t a1)
{
  uint64_t v28 = -1;
  unint64_t v2 = *(char **)(a1 + 88);
  int v3 = *(char **)(a1 + 96);
  int v4 = *v2;
  if (v3 == v2 + 1) {
    goto LABEL_70;
  }
  int v5 = v2[1];
  if (v3 == v2 + 2 || v4 != 60 || v5 != 61 || v2[2] != 62)
  {
    if (v4 == 60 && v5 == 61)
    {
      int v10 = 18;
      goto LABEL_17;
    }
    if (v4 == 62 && v5 == 61)
    {
      int v10 = 20;
      goto LABEL_17;
    }
    BOOL v17 = v4 == 33 && v5 == 61;
    BOOL v18 = v5 == 62 && v4 == 60;
    int v10 = 19;
    if (v18 || v17)
    {
LABEL_17:
      uint64_t v11 = *(void *)(a1 + 80);
      int v25 = v10;
      LOWORD(__p) = *(_WORD *)v2;
      BYTE2(__p) = 0;
      HIBYTE(v27) = 2;
      if (v11) {
        uint64_t v28 = (uint64_t)&v2[-v11];
      }
      unint64_t v12 = *(void *)(a1 + 8);
      if (v12 >= *(void *)(a1 + 16))
      {
        uint64_t v15 = sub_B77C0((char **)a1, (uint64_t)&v25);
      }
      else
      {
        *(_DWORD *)unint64_t v12 = v10;
        char v13 = (unsigned char *)(v12 + 8);
        if (SHIBYTE(v27) < 0)
        {
          sub_4200(v13, (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          long long v14 = __p;
          *(void *)(v12 + 24) = v27;
          *(_OWORD *)char v13 = v14;
        }
        *(void *)(v12 + 32) = v28;
        uint64_t v15 = v12 + 40;
        *(void *)(a1 + 8) = v12 + 40;
      }
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 88) += 2;
      if (SHIBYTE(v27) < 0) {
        goto LABEL_87;
      }
      return;
    }
    if (v4 == 61 && v5 == 61)
    {
      int v10 = 61;
      goto LABEL_17;
    }
    if (v4 == 58 && v5 == 61)
    {
      int v10 = 10;
      goto LABEL_17;
    }
    if (v4 == 60 && v5 == 60)
    {
      int v10 = 17;
      goto LABEL_17;
    }
    if (v4 == 62 && v5 == 62)
    {
      int v10 = 16;
      goto LABEL_17;
    }
    if (v4 == 43 && v5 == 61)
    {
      int v10 = 11;
      goto LABEL_17;
    }
    if (v4 == 45 && v5 == 61)
    {
      int v10 = 12;
      goto LABEL_17;
    }
    if (v4 == 42 && v5 == 61)
    {
      int v10 = 13;
      goto LABEL_17;
    }
    if (v4 == 47 && v5 == 61)
    {
      int v10 = 14;
      goto LABEL_17;
    }
    if (v4 == 37 && v5 == 61)
    {
      int v10 = 15;
      goto LABEL_17;
    }
LABEL_70:
    switch(*v2)
    {
      case '&':
        goto LABEL_73;
      case '\'':
      case '(':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case '=':
        goto LABEL_74;
      case ';':
        uint64_t v20 = *(void *)(a1 + 80);
        int v4 = 6;
        goto LABEL_77;
      case '<':
        uint64_t v20 = *(void *)(a1 + 80);
        int v4 = 60;
        goto LABEL_77;
      case '>':
        uint64_t v20 = *(void *)(a1 + 80);
        int v4 = 62;
        goto LABEL_77;
      default:
        if (*v2 == 124)
        {
LABEL_73:
          uint64_t v20 = *(void *)(a1 + 80);
          int v4 = 8;
        }
        else
        {
LABEL_74:
          uint64_t v20 = *(void *)(a1 + 80);
        }
LABEL_77:
        int v25 = v4;
        LOWORD(__p) = *v2;
        HIBYTE(v27) = 1;
        if (v20) {
          uint64_t v28 = (uint64_t)&v2[-v20];
        }
        unint64_t v21 = *(void *)(a1 + 8);
        if (v21 >= *(void *)(a1 + 16))
        {
          uint64_t v24 = sub_B77C0((char **)a1, (uint64_t)&v25);
        }
        else
        {
          *(_DWORD *)unint64_t v21 = v4;
          uint64_t v22 = (unsigned char *)(v21 + 8);
          if (SHIBYTE(v27) < 0)
          {
            sub_4200(v22, (void *)__p, *((unint64_t *)&__p + 1));
          }
          else
          {
            long long v23 = __p;
            *(void *)(v21 + 24) = v27;
            *(_OWORD *)uint64_t v22 = v23;
          }
          *(void *)(v21 + 32) = v28;
          uint64_t v24 = v21 + 40;
          *(void *)(a1 + 8) = v21 + 40;
        }
        *(void *)(a1 + 8) = v24;
        ++*(void *)(a1 + 88);
        if ((SHIBYTE(v27) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_87;
    }
  }
  uint64_t v6 = *(void *)(a1 + 80);
  int v25 = 21;
  LOWORD(__p) = *(_WORD *)v2;
  WORD1(__p) = v2[2];
  HIBYTE(v27) = 3;
  if (v6) {
    uint64_t v28 = (uint64_t)&v2[-v6];
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7 >= *(void *)(a1 + 16))
  {
    uint64_t v19 = sub_B77C0((char **)a1, (uint64_t)&v25);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = 21;
    int v8 = (unsigned char *)(v7 + 8);
    if (SHIBYTE(v27) < 0)
    {
      sub_4200(v8, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long v9 = __p;
      *(void *)(v7 + 24) = v27;
      *(_OWORD *)int v8 = v9;
    }
    *(void *)(v7 + 32) = v28;
    uint64_t v19 = v7 + 40;
    *(void *)(a1 + 8) = v7 + 40;
  }
  *(void *)(a1 + 8) = v19;
  *(void *)(a1 + 88) += 3;
  if (SHIBYTE(v27) < 0) {
LABEL_87:
  }
    operator delete((void *)__p);
}

void sub_B5EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 8) = v18;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B5F4C(uint64_t a1)
{
  int v3 = *(unsigned __int8 **)(a1 + 88);
  unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v4 = (uint64_t)v3;
  if (v2 != v3)
  {
    int v5 = *v3;
    BOOL v6 = (v5 - 48) >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A;
    if (!v6 || v5 == 95 || (uint64_t v4 = *(void *)(a1 + 88), v5 == 46))
    {
      uint64_t v4 = (uint64_t)(v3 + 1);
      *(void *)(a1 + 88) = v3 + 1;
      if (v2 == v3 + 1)
      {
LABEL_25:
        uint64_t v4 = (uint64_t)v2;
      }
      else
      {
        uint64_t v7 = 0;
        while (1)
        {
          int v8 = v3[v7 + 1];
          BOOL v9 = (v8 - 48) >= 0xA && (v8 & 0xFFFFFFDF) - 65 >= 0x1A;
          if (v9 && v8 != 95)
          {
            if (v8 != 46) {
              goto LABEL_26;
            }
            if (v7 != -1)
            {
              int v10 = &v3[v7 + 2];
              if (v10 != v2)
              {
                int v11 = *v10;
                if (v11 != 95 && (v11 - 48) >= 0xA && (v11 & 0xFFFFFFDF) - 65 > 0x19) {
                  break;
                }
              }
            }
          }
          ++v4;
          *(void *)(a1 + 88) = &v3[v7++ + 2];
          if (&v3[v7 + 1] == v2) {
            goto LABEL_25;
          }
        }
        uint64_t v4 = (uint64_t)&v3[v7 + 1];
      }
    }
  }
LABEL_26:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v27 = -1;
  uint64_t v12 = *(void *)(a1 + 80);
  int v25 = 8;
  unint64_t v13 = v4 - (void)v3;
  p_p = &__p;
  if ((unint64_t)(v4 - (void)v3) >= 0x17)
  {
    std::string::__grow_by(&__p, 0x16uLL, v13 - 22, 0, 0, 0, 0);
    __p.__r_.__value_.__l.__size_ = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  if (v3 == (unsigned __int8 *)v4)
  {
    uint64_t v15 = p_p;
    goto LABEL_40;
  }
  if (v13 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
  {
    uint64_t v15 = p_p;
    uint64_t v16 = v3;
    do
    {
LABEL_39:
      std::string::value_type v21 = *v16++;
      v15->__r_.__value_.__s.__data_[0] = v21;
      uint64_t v15 = (std::string *)((char *)v15 + 1);
    }
    while (v16 != (unsigned __int8 *)v4);
    goto LABEL_40;
  }
  uint64_t v15 = (std::string *)((char *)p_p + (v13 & 0xFFFFFFFFFFFFFFE0));
  uint64_t v16 = &v3[v13 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v17 = (long long *)(v3 + 16);
  uint64_t v18 = &p_p->__r_.__value_.__r.__words[2];
  unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v20 = *v17;
    *((_OWORD *)v18 - 1) = *(v17 - 1);
    *(_OWORD *)uint64_t v18 = v20;
    v17 += 2;
    v18 += 4;
    v19 -= 32;
  }
  while (v19);
  if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_39;
  }
LABEL_40:
  v15->__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v13 & 0x7F;
    if (!v12) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  __p.__r_.__value_.__l.__size_ = v4 - (void)v3;
  if (v12) {
LABEL_42:
  }
    uint64_t v27 = (uint64_t)&v3[-v12];
LABEL_43:
  unint64_t v22 = *(void *)(a1 + 8);
  if (v22 >= *(void *)(a1 + 16))
  {
    *(void *)(a1 + 8) = sub_B77C0((char **)a1, (uint64_t)&v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_52:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)unint64_t v22 = v25;
    long long v23 = (unsigned char *)(v22 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v22 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)long long v23 = v24;
    }
    *(void *)(v22 + 32) = v27;
    *(void *)(a1 + 8) = v22 + 40;
    *(void *)(a1 + 8) = v22 + 40;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_52;
    }
  }
}

void sub_B6218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6240(uint64_t a1)
{
  int v113 = 0;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v115 = -1;
  int v3 = *(unsigned __int8 **)(a1 + 88);
  unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v4 = v3;
  if (v2 == v3)
  {
LABEL_132:
    uint64_t v44 = *(void *)(a1 + 80);
    int v113 = 7;
    unint64_t v45 = v4 - v3;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v48 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v48 >= v45)
      {
        std::string::size_type v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_139:
        if ((v49 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_142:
        if (v3 == v4)
        {
          uint64_t v50 = p_p;
          goto LABEL_152;
        }
        if (v45 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
        {
          uint64_t v50 = p_p;
          uint64_t v51 = v3;
        }
        else
        {
          uint64_t v50 = (std::string *)((char *)p_p + (v45 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v51 = &v3[v45 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v52 = (long long *)(v3 + 16);
          unint64_t v53 = &p_p->__r_.__value_.__r.__words[2];
          unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v55 = *v52;
            *((_OWORD *)v53 - 1) = *(v52 - 1);
            *(_OWORD *)unint64_t v53 = v55;
            v52 += 2;
            v53 += 4;
            v54 -= 32;
          }
          while (v54);
          if (v45 == (v45 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_152:
            v50->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              __p.__r_.__value_.__l.__size_ = v4 - v3;
              if (!v44)
              {
LABEL_155:
                unint64_t v57 = *(void *)(a1 + 8);
                if (v57 < *(void *)(a1 + 16))
                {
                  *(_DWORD *)unint64_t v57 = v113;
                  unint64_t v58 = v57 + 8;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    goto LABEL_161;
                  }
                  goto LABEL_157;
                }
                goto LABEL_282;
              }
            }
            else
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v45 & 0x7F;
              if (!v44) {
                goto LABEL_155;
              }
            }
            uint64_t v115 = (uint64_t)&v3[-v44];
            goto LABEL_155;
          }
        }
        do
        {
          std::string::value_type v56 = *v51++;
          v50->__r_.__value_.__s.__data_[0] = v56;
          uint64_t v50 = (std::string *)((char *)v50 + 1);
        }
        while (v51 != v4);
        goto LABEL_152;
      }
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      p_p = &__p;
      if (v45 <= 0x16) {
        goto LABEL_142;
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v48 = 22;
    }
    std::string::__grow_by(&__p, v48, v45 - v48, size, 0, size, 0);
    __p.__r_.__value_.__l.__size_ = 0;
    LOBYTE(v49) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    goto LABEL_139;
  }
  char v5 = 0;
  uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
  while ((v5 & 1) != 0)
  {
    while (1)
    {
      while (1)
      {
        int v15 = *v4;
        if (v15 == 46) {
          goto LABEL_80;
        }
        __darwin_ct_rune_t v16 = __tolower((char)v15);
        unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
        if (v16 != 101) {
          break;
        }
        unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
        uint64_t v4 = v13 + 1;
        if (v2 == v13 + 1) {
          goto LABEL_166;
        }
        int v17 = *v4;
        if (v17 != 43 && v17 != 45 && (v17 - 48) > 9) {
          goto LABEL_176;
        }
        *(void *)(a1 + 88) = v4;
      }
      int v18 = *v13;
      if ((v18 - 48) < 0xA) {
        break;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
      if (v18 == 46)
      {
        uint64_t v4 = v13 + 1;
        *(void *)(a1 + 88) = v13 + 1;
        unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
        if (v2 != v13 + 1) {
          continue;
        }
      }
      goto LABEL_132;
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
LABEL_41:
    *(void *)(a1 + 88) = ++v4;
    unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
    char v5 = 1;
    if (v2 == v4) {
      goto LABEL_132;
    }
  }
  char v6 = 0;
  int v7 = *v4;
  if (v7 == 46) {
    goto LABEL_79;
  }
  while (__tolower((char)v7) != 101)
  {
    uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
    int v11 = *v4;
    if (v11 != 46 && (v11 - 48) >= 0xA) {
      goto LABEL_132;
    }
    BOOL v9 = v4 + 1;
    *(void *)(a1 + 88) = v4 + 1;
    unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
    if (v2 == v4 + 1)
    {
LABEL_78:
      uint64_t v4 = v9;
      goto LABEL_132;
    }
    int v7 = *v9;
    if (v7 == 46)
    {
      char v28 = 0;
      char v29 = 0;
      char v6 = 0;
      goto LABEL_83;
    }
  }
LABEL_23:
  unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
  unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v4 = v13 + 1;
  if (v2 == v13 + 1)
  {
LABEL_166:
    uint64_t v4 = v13;
LABEL_167:
    uint64_t v61 = *(void *)(a1 + 80);
    int v113 = 3;
    unint64_t v62 = v4 - v3;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v65 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v65 >= v62)
      {
        std::string::size_type v71 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_183:
        if ((v71 & 0x80u) == 0) {
          unint64_t v63 = &__p;
        }
        else {
          unint64_t v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_186:
        if (v3 == v4)
        {
          uint64_t v78 = v63;
          goto LABEL_196;
        }
        if (v62 < 0x20 || (unint64_t)((char *)v63 - (char *)v3) < 0x20)
        {
          uint64_t v78 = v63;
          uint64_t v79 = v3;
        }
        else
        {
          uint64_t v78 = (std::string *)((char *)v63 + (v62 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v79 = &v3[v62 & 0xFFFFFFFFFFFFFFE0];
          long long v80 = (long long *)(v3 + 16);
          uint64_t v81 = &v63->__r_.__value_.__r.__words[2];
          unint64_t v82 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v83 = *v80;
            *((_OWORD *)v81 - 1) = *(v80 - 1);
            *(_OWORD *)uint64_t v81 = v83;
            v80 += 2;
            v81 += 4;
            v82 -= 32;
          }
          while (v82);
          if (v62 == (v62 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_196:
            v78->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              __p.__r_.__value_.__l.__size_ = v4 - v3;
              if (!v61)
              {
LABEL_199:
                unint64_t v57 = *(void *)(a1 + 8);
                if (v57 < *(void *)(a1 + 16))
                {
                  *(_DWORD *)unint64_t v57 = v113;
                  unint64_t v58 = v57 + 8;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    goto LABEL_161;
                  }
                  goto LABEL_157;
                }
                goto LABEL_282;
              }
            }
            else
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v62 & 0x7F;
              if (!v61) {
                goto LABEL_199;
              }
            }
            uint64_t v115 = (uint64_t)&v3[-v61];
            goto LABEL_199;
          }
        }
        do
        {
          std::string::value_type v84 = *v79++;
          v78->__r_.__value_.__s.__data_[0] = v84;
          uint64_t v78 = (std::string *)((char *)v78 + 1);
        }
        while (v79 != v4);
        goto LABEL_196;
      }
      std::string::size_type v64 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      unint64_t v63 = &__p;
      if (v62 <= 0x16) {
        goto LABEL_186;
      }
      std::string::size_type v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v65 = 22;
    }
    std::string::__grow_by(&__p, v65, v62 - v65, v64, 0, v64, 0);
    __p.__r_.__value_.__l.__size_ = 0;
    LOBYTE(v71) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    goto LABEL_183;
  }
  int v14 = *v4;
  if (v14 != 43 && v14 != 45 && (v14 - 48) >= 0xA)
  {
LABEL_176:
    uint64_t v72 = *(void *)(a1 + 80);
    int v113 = 3;
    unint64_t v73 = v13 - v3;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v76 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v76 >= v73)
      {
        std::string::size_type v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_235:
        if ((v92 & 0x80u) == 0) {
          long long v74 = &__p;
        }
        else {
          long long v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_238:
        if (v3 == v13)
        {
          std::string::size_type v98 = v74;
        }
        else
        {
          if (v73 < 0x20 || (unint64_t)((char *)v74 - (char *)v3) < 0x20)
          {
            std::string::size_type v98 = v74;
            uint64_t v99 = v3;
          }
          else
          {
            std::string::size_type v98 = (std::string *)((char *)v74 + (v73 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v99 = &v3[v73 & 0xFFFFFFFFFFFFFFE0];
            uint64_t v100 = (long long *)(v3 + 16);
            uint64_t v101 = &v74->__r_.__value_.__r.__words[2];
            unint64_t v102 = v73 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v103 = *v100;
              *((_OWORD *)v101 - 1) = *(v100 - 1);
              *(_OWORD *)uint64_t v101 = v103;
              v100 += 2;
              v101 += 4;
              v102 -= 32;
            }
            while (v102);
            if (v73 == (v73 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_248;
            }
          }
          do
          {
            std::string::value_type v104 = *v99++;
            v98->__r_.__value_.__s.__data_[0] = v104;
            std::string::size_type v98 = (std::string *)((char *)v98 + 1);
          }
          while (v99 != v13);
        }
LABEL_248:
        v98->__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          __p.__r_.__value_.__l.__size_ = v13 - v3;
        }
        else {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v73 & 0x7F;
        }
        if (v72) {
          uint64_t v115 = (uint64_t)&v3[-v72];
        }
        unint64_t v57 = *(void *)(a1 + 8);
        if (v57 < *(void *)(a1 + 16))
        {
          *(_DWORD *)unint64_t v57 = v113;
          unint64_t v58 = v57 + 8;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_157;
          }
LABEL_161:
          sub_4200((unsigned char *)v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          goto LABEL_162;
        }
LABEL_282:
        uint64_t v60 = sub_B77C0((char **)a1, (uint64_t)&v113);
        goto LABEL_163;
      }
      std::string::size_type v75 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      long long v74 = &__p;
      if (v73 <= 0x16) {
        goto LABEL_238;
      }
      std::string::size_type v75 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v76 = 22;
    }
    std::string::__grow_by(&__p, v76, v73 - v76, v75, 0, v75, 0);
    __p.__r_.__value_.__l.__size_ = 0;
    LOBYTE(v92) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    goto LABEL_235;
  }
  *(void *)(a1 + 88) = v4;
  char v6 = 1;
  int v10 = *v4;
  if (v10 != 46)
  {
    while (1)
    {
      if (__tolower((char)v10) == 101) {
        goto LABEL_23;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
      int v8 = *v4;
      if (v8 == 43 || v8 == 45) {
        break;
      }
      if ((v8 - 48) < 0xA) {
        goto LABEL_41;
      }
      if (v8 != 46) {
        goto LABEL_132;
      }
      BOOL v9 = v4 + 1;
      *(void *)(a1 + 88) = v4 + 1;
      unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
      if (v2 == v4 + 1) {
        goto LABEL_78;
      }
      int v10 = *v9;
      if (v10 == 46)
      {
        char v28 = 0;
        char v29 = 0;
        char v6 = 1;
        goto LABEL_83;
      }
    }
    *(void *)(a1 + 88) = ++v4;
    unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
    if (v2 == v4) {
      goto LABEL_132;
    }
    char v19 = 0;
    while (1)
    {
      int v20 = *v4;
      if (v19) {
        break;
      }
      if (v20 == 46)
      {
        char v29 = 0;
        char v28 = 1;
        goto LABEL_81;
      }
      while (1)
      {
        while (1)
        {
          __darwin_ct_rune_t v25 = __tolower((char)v20);
          uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
          if (v25 != 101) {
            break;
          }
          unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
          BOOL v9 = v4 + 1;
          if (v2 == v4 + 1) {
            goto LABEL_167;
          }
          int v26 = *v9;
          if (v26 != 43 && v26 != 45)
          {
            unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
            if ((v26 - 48) > 9) {
              goto LABEL_176;
            }
          }
          char v29 = 0;
          *(void *)(a1 + 88) = v9;
          int v20 = *v9;
          char v28 = 1;
          char v6 = 1;
          if (v20 == 46) {
            goto LABEL_83;
          }
        }
        int v27 = *v4;
        if (v27 == 43 || v27 == 45)
        {
LABEL_231:
          uint64_t v93 = *(void *)(a1 + 80);
          int v113 = 3;
          unint64_t v94 = v4 - v3;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v97 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v97 >= v94)
            {
              std::string::size_type v105 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else
            {
              std::string::size_type v96 = __p.__r_.__value_.__l.__size_;
LABEL_259:
              std::string::__grow_by(&__p, v97, v94 - v97, v96, 0, v96, 0);
              __p.__r_.__value_.__l.__size_ = 0;
              LOBYTE(v105) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
            }
            if ((v105 & 0x80u) == 0) {
              long long v95 = &__p;
            }
            else {
              long long v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
          }
          else
          {
            long long v95 = &__p;
            if (v94 > 0x16)
            {
              std::string::size_type v96 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v97 = 22;
              goto LABEL_259;
            }
          }
          if (v3 == v4)
          {
            uint64_t v106 = v95;
          }
          else
          {
            if (v94 < 0x20 || (unint64_t)((char *)v95 - (char *)v3) < 0x20)
            {
              uint64_t v106 = v95;
              uint64_t v107 = v3;
            }
            else
            {
              uint64_t v106 = (std::string *)((char *)v95 + (v94 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v107 = &v3[v94 & 0xFFFFFFFFFFFFFFE0];
              unint64_t v108 = (long long *)(v3 + 16);
              uint64_t v109 = &v95->__r_.__value_.__r.__words[2];
              unint64_t v110 = v94 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v111 = *v108;
                *((_OWORD *)v109 - 1) = *(v108 - 1);
                *(_OWORD *)uint64_t v109 = v111;
                v108 += 2;
                v109 += 4;
                v110 -= 32;
              }
              while (v110);
              if (v94 == (v94 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_274;
              }
            }
            do
            {
              std::string::value_type v112 = *v107++;
              v106->__r_.__value_.__s.__data_[0] = v112;
              uint64_t v106 = (std::string *)((char *)v106 + 1);
            }
            while (v107 != v4);
          }
LABEL_274:
          v106->__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            __p.__r_.__value_.__l.__size_ = v4 - v3;
          }
          else {
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v94 & 0x7F;
          }
          if (v93) {
            uint64_t v115 = (uint64_t)&v3[-v93];
          }
          unint64_t v57 = *(void *)(a1 + 8);
          if (v57 < *(void *)(a1 + 16))
          {
            *(_DWORD *)unint64_t v57 = v113;
            unint64_t v58 = v57 + 8;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_157;
            }
            goto LABEL_161;
          }
          goto LABEL_282;
        }
        if ((v27 - 48) < 0xA) {
          break;
        }
        if (v27 != 46) {
          goto LABEL_132;
        }
        BOOL v9 = v4 + 1;
        *(void *)(a1 + 88) = v4 + 1;
        unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
        if (v2 == v4 + 1) {
          goto LABEL_78;
        }
        char v29 = 0;
        int v20 = *v9;
        char v28 = 1;
        char v6 = 1;
        if (v20 == 46) {
          goto LABEL_83;
        }
      }
LABEL_76:
      *(void *)(a1 + 88) = ++v4;
      unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
      char v19 = 1;
      if (v2 == v4) {
        goto LABEL_132;
      }
    }
    if (v20 != 46)
    {
      do
      {
        while (1)
        {
          __darwin_ct_rune_t v21 = __tolower((char)v20);
          uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
          if (v21 == 101) {
            break;
          }
          int v24 = *v4;
          if ((v24 - 48) < 0xA) {
            goto LABEL_76;
          }
          if (v24 != 46) {
            goto LABEL_132;
          }
          *(void *)(a1 + 88) = ++v4;
          unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
          if (v2 == v4) {
            goto LABEL_132;
          }
          int v20 = *v4;
          if (v20 == 46) {
            goto LABEL_80;
          }
        }
        unint64_t v2 = *(unsigned __int8 **)(a1 + 96);
        unint64_t v22 = v4 + 1;
        if (v2 == v4 + 1) {
          goto LABEL_167;
        }
        int v23 = *v22;
        if (v23 != 43 && v23 != 45)
        {
          unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
          if ((v23 - 48) > 9) {
            goto LABEL_176;
          }
        }
        *(void *)(a1 + 88) = v22;
        int v20 = *v22;
      }
      while (v20 != 46);
      ++v4;
    }
LABEL_80:
    char v28 = v5 ^ 1;
    char v29 = 1;
LABEL_81:
    char v6 = 1;
    goto LABEL_82;
  }
LABEL_79:
  char v28 = 0;
  char v29 = 0;
LABEL_82:
  BOOL v9 = v4;
LABEL_83:
  unint64_t v30 = v9 + 1;
  *(void *)(a1 + 88) = v30;
  uint64_t v4 = v2;
  if (v2 == v30) {
    goto LABEL_132;
  }
  uint64_t v4 = v30;
  while ((v29 & 1) == 0)
  {
    while ((v6 & 1) == 0)
    {
      while (1)
      {
        __darwin_ct_rune_t v39 = (char)*v4;
        if (v39 == 46) {
          goto LABEL_170;
        }
        if (__tolower(v39) == 101) {
          break;
        }
        uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
        int v40 = *v4;
        if (v40 == 46 || (v40 - 48) <= 9)
        {
          *(void *)(a1 + 88) = ++v4;
          if (*(unsigned __int8 **)(a1 + 96) != v4) {
            continue;
          }
        }
        goto LABEL_132;
      }
LABEL_123:
      unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
      uint64_t v4 = v13 + 1;
      if (*(unsigned __int8 **)(a1 + 96) == v13 + 1) {
        goto LABEL_166;
      }
      int v42 = *v4;
      if (v42 != 43 && v42 != 45 && (v42 - 48) > 9) {
        goto LABEL_176;
      }
      *(void *)(a1 + 88) = v4;
      char v6 = 1;
    }
    while (1)
    {
      __darwin_ct_rune_t v37 = (char)*v4;
      if (v37 == 46) {
        goto LABEL_170;
      }
      if (__tolower(v37) == 101) {
        goto LABEL_123;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
      int v38 = *v4;
      if (v38 == 45 || v38 == 43) {
        break;
      }
      if ((v38 - 48) < 0xA) {
        goto LABEL_128;
      }
      if (v38 == 46)
      {
        *(void *)(a1 + 88) = ++v4;
        if (*(unsigned __int8 **)(a1 + 96) != v4) {
          continue;
        }
      }
      goto LABEL_132;
    }
    if (v28) {
      goto LABEL_231;
    }
    char v29 = 0;
    *(void *)(a1 + 88) = ++v4;
    unint64_t v43 = *(unsigned __int8 **)(a1 + 96);
    char v28 = 1;
LABEL_131:
    char v6 = 1;
    if (v43 == v4) {
      goto LABEL_132;
    }
  }
  if ((v6 & 1) == 0)
  {
    while (1)
    {
      __darwin_ct_rune_t v33 = (char)*v4;
      if (v33 == 46) {
        goto LABEL_170;
      }
      if (__tolower(v33) == 101) {
        goto LABEL_101;
      }
      uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
      int v34 = *v4;
      if (v34 == 46 || (v34 - 48) <= 9)
      {
        *(void *)(a1 + 88) = ++v4;
        if (*(unsigned __int8 **)(a1 + 96) != v4) {
          continue;
        }
      }
      goto LABEL_132;
    }
  }
  while (1)
  {
    __darwin_ct_rune_t v31 = (char)*v4;
    if (v31 == 46) {
      break;
    }
    if (__tolower(v31) == 101)
    {
LABEL_101:
      unint64_t v13 = *(unsigned __int8 **)(a1 + 88);
      uint64_t v4 = v13 + 1;
      if (*(unsigned __int8 **)(a1 + 96) == v13 + 1) {
        goto LABEL_166;
      }
      int v36 = *v4;
      if (v36 != 43 && v36 != 45 && (v36 - 48) > 9) {
        goto LABEL_176;
      }
      *(void *)(a1 + 88) = v4;
    }
    else
    {
      uint64_t v4 = *(unsigned __int8 **)(a1 + 88);
      int v32 = *v4;
      if ((v32 - 48) < 0xA)
      {
LABEL_128:
        *(void *)(a1 + 88) = ++v4;
        unint64_t v43 = *(unsigned __int8 **)(a1 + 96);
        char v29 = 1;
        goto LABEL_131;
      }
      if (v32 != 46) {
        goto LABEL_132;
      }
      *(void *)(a1 + 88) = ++v4;
      if (*(unsigned __int8 **)(a1 + 96) == v4) {
        goto LABEL_132;
      }
    }
  }
LABEL_170:
  uint64_t v66 = *(void *)(a1 + 80);
  int v113 = 3;
  unint64_t v67 = v4 - v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v70 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v70 >= v67)
    {
      std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      std::string::size_type v69 = __p.__r_.__value_.__l.__size_;
LABEL_181:
      std::string::__grow_by(&__p, v70, v67 - v70, v69, 0, v69, 0);
      __p.__r_.__value_.__l.__size_ = 0;
      LOBYTE(v77) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    }
    if ((v77 & 0x80u) == 0) {
      uint64_t v68 = &__p;
    }
    else {
      uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    uint64_t v68 = &__p;
    if (v67 > 0x16)
    {
      std::string::size_type v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v70 = 22;
      goto LABEL_181;
    }
  }
  if (v3 == v4)
  {
    unint64_t v85 = v68;
  }
  else
  {
    if (v67 < 0x20 || (unint64_t)((char *)v68 - (char *)v3) < 0x20)
    {
      unint64_t v85 = v68;
      uint64_t v86 = v3;
    }
    else
    {
      unint64_t v85 = (std::string *)((char *)v68 + (v67 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v86 = &v3[v67 & 0xFFFFFFFFFFFFFFE0];
      uint64_t v87 = (long long *)(v3 + 16);
      long long v88 = &v68->__r_.__value_.__r.__words[2];
      unint64_t v89 = v67 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v90 = *v87;
        *((_OWORD *)v88 - 1) = *(v87 - 1);
        *(_OWORD *)long long v88 = v90;
        v87 += 2;
        v88 += 4;
        v89 -= 32;
      }
      while (v89);
      if (v67 == (v67 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_219;
      }
    }
    do
    {
      std::string::value_type v91 = *v86++;
      v85->__r_.__value_.__s.__data_[0] = v91;
      unint64_t v85 = (std::string *)((char *)v85 + 1);
    }
    while (v86 != v4);
  }
LABEL_219:
  v85->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    __p.__r_.__value_.__l.__size_ = v4 - v3;
  }
  else {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v67 & 0x7F;
  }
  if (v66) {
    uint64_t v115 = (uint64_t)&v3[-v66];
  }
  unint64_t v57 = *(void *)(a1 + 8);
  if (v57 >= *(void *)(a1 + 16)) {
    goto LABEL_282;
  }
  *(_DWORD *)unint64_t v57 = v113;
  unint64_t v58 = v57 + 8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_161;
  }
LABEL_157:
  long long v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v58 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v58 = v59;
LABEL_162:
  *(void *)(v57 + 32) = v115;
  uint64_t v60 = v57 + 40;
  *(void *)(a1 + 8) = v57 + 40;
LABEL_163:
  *(void *)(a1 + 8) = v60;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_B6F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6FE8(uint64_t a1)
{
  int v40 = 0;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v42 = -1;
  unint64_t v2 = *(std::string::value_type **)(a1 + 88);
  if ((uint64_t)(*(void *)(a1 + 96) - (void)v2) > 10)
  {
    char v6 = *(std::string::value_type **)(a1 + 88);
    if (*v2 == 36)
    {
      __darwin_ct_rune_t v7 = v2[1];
      __darwin_ct_rune_t v8 = __tolower(102);
      __darwin_ct_rune_t v9 = __tolower(v7);
      char v6 = *(std::string::value_type **)(a1 + 88);
      if (v8 == v9 && v6[2] - 48 <= 9 && v6[3] - 48 < 0xA)
      {
        int v10 = v6 + 4;
        *(void *)(a1 + 88) = v6 + 4;
        uint64_t v11 = *(void *)(a1 + 80);
        int v40 = 8;
        unint64_t v12 = v6 + 4 - v2;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v15 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v15 >= v12)
          {
            std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_53:
            if ((v31 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
LABEL_56:
            if (v2 == v10)
            {
              __darwin_ct_rune_t v33 = p_p;
            }
            else
            {
              unint64_t v32 = v6 - v2 + 4;
              if (v32 < 0x20 || (unint64_t)((char *)p_p - v2) < 0x20)
              {
                __darwin_ct_rune_t v33 = p_p;
                int v34 = v2;
              }
              else
              {
                __darwin_ct_rune_t v33 = (std::string *)((char *)p_p + (v32 & 0xFFFFFFFFFFFFFFE0));
                int v34 = &v2[v32 & 0xFFFFFFFFFFFFFFE0];
                unint64_t v35 = (long long *)(v2 + 16);
                int v36 = &p_p->__r_.__value_.__r.__words[2];
                unint64_t v37 = v32 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v38 = *v35;
                  *((_OWORD *)v36 - 1) = *(v35 - 1);
                  *(_OWORD *)int v36 = v38;
                  v35 += 2;
                  v36 += 4;
                  v37 -= 32;
                }
                while (v37);
                if (v32 == (v32 & 0xFFFFFFFFFFFFFFE0)) {
                  goto LABEL_66;
                }
              }
              do
              {
                std::string::value_type v39 = *v34++;
                v33->__r_.__value_.__s.__data_[0] = v39;
                __darwin_ct_rune_t v33 = (std::string *)((char *)v33 + 1);
              }
              while (v34 != v10);
            }
LABEL_66:
            v33->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              __p.__r_.__value_.__l.__size_ = v6 + 4 - v2;
            }
            else {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v12 & 0x7F;
            }
            if (v11) {
              uint64_t v42 = (uint64_t)&v2[-v11];
            }
            unint64_t v4 = *(void *)(a1 + 8);
            if (v4 < *(void *)(a1 + 16))
            {
              *(_DWORD *)unint64_t v4 = v40;
              unint64_t v5 = v4 + 8;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_46;
              }
              goto LABEL_42;
            }
            goto LABEL_43;
          }
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          p_p = &__p;
          if (v12 <= 0x16) {
            goto LABEL_56;
          }
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v15 = 22;
        }
        std::string::__grow_by(&__p, v15, v12 - v15, size, 0, size, 0);
        __p.__r_.__value_.__l.__size_ = 0;
        LOBYTE(v31) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
        goto LABEL_53;
      }
    }
    uint64_t v16 = *(void *)(a1 + 80);
    int v40 = 5;
    unint64_t v17 = v6 - v2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v20 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v20 >= v17)
      {
        std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_24:
        if ((v22 & 0x80u) == 0) {
          int v18 = &__p;
        }
        else {
          int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_27:
        if (v2 == v6)
        {
          int v23 = v18;
          goto LABEL_37;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - v2) < 0x20)
        {
          int v23 = v18;
          int v24 = v2;
        }
        else
        {
          int v23 = (std::string *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
          int v24 = &v2[v17 & 0xFFFFFFFFFFFFFFE0];
          __darwin_ct_rune_t v25 = (long long *)(v2 + 16);
          int v26 = &v18->__r_.__value_.__r.__words[2];
          unint64_t v27 = v17 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v28 = *v25;
            *((_OWORD *)v26 - 1) = *(v25 - 1);
            *(_OWORD *)int v26 = v28;
            v25 += 2;
            v26 += 4;
            v27 -= 32;
          }
          while (v27);
          if (v17 == (v17 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_37:
            v23->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              __p.__r_.__value_.__l.__size_ = v6 - v2;
              if (!v16)
              {
LABEL_40:
                unint64_t v4 = *(void *)(a1 + 8);
                if (v4 < *(void *)(a1 + 16))
                {
                  *(_DWORD *)unint64_t v4 = v40;
                  unint64_t v5 = v4 + 8;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
LABEL_46:
                    sub_4200((unsigned char *)v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_47:
                    *(void *)(v4 + 32) = v42;
                    *(void *)(a1 + 8) = v4 + 40;
                    *(void *)(a1 + 8) = v4 + 40;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      goto LABEL_48;
                    }
                    return;
                  }
LABEL_42:
                  long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v5 = v30;
                  goto LABEL_47;
                }
LABEL_43:
                uint64_t v21 = sub_B77C0((char **)a1, (uint64_t)&v40);
                goto LABEL_18;
              }
            }
            else
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v17 & 0x7F;
              if (!v16) {
                goto LABEL_40;
              }
            }
            uint64_t v42 = (uint64_t)&v2[-v16];
            goto LABEL_40;
          }
        }
        do
        {
          std::string::value_type v29 = *v24++;
          v23->__r_.__value_.__s.__data_[0] = v29;
          int v23 = (std::string *)((char *)v23 + 1);
        }
        while (v24 != v6);
        goto LABEL_37;
      }
      std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      int v18 = &__p;
      if (v17 <= 0x16) {
        goto LABEL_27;
      }
      std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = 22;
    }
    std::string::__grow_by(&__p, v20, v17 - v20, v19, 0, v19, 0);
    __p.__r_.__value_.__l.__size_ = 0;
    LOBYTE(v22) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  int v40 = 5;
  __p.__r_.__value_.__s.__data_[0] = 0;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  if (v3) {
    uint64_t v42 = (uint64_t)&v2[-v3];
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < *(void *)(a1 + 16))
  {
    *(_DWORD *)unint64_t v4 = 5;
    unint64_t v5 = v4 + 8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200((unsigned char *)v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      goto LABEL_47;
    }
    goto LABEL_42;
  }
  uint64_t v21 = sub_B77C0((char **)a1, (uint64_t)&v40);
LABEL_18:
  *(void *)(a1 + 8) = v21;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_48:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_B7410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7440(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  *(_DWORD *)a1 = 8;
  __darwin_ct_rune_t v8 = (void *)(a1 + 8);
  unint64_t v9 = (unint64_t)&a3[-a2];
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (v9 <= 0x16) {
      goto LABEL_7;
    }
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 31);
    std::string::size_type v11 = 22;
LABEL_6:
    std::string::__grow_by((std::string *)(a1 + 8), v11, v9 - v11, v10, 0, v10, 0);
    *(void *)(a1 + 16) = 0;
    if ((*(unsigned char *)(a1 + 31) & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_21:
    __darwin_ct_rune_t v8 = (void *)*v8;
    if ((char *)a2 != a3) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  std::string::size_type v11 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v11 < v9)
  {
    std::string::size_type v10 = *(void *)(a1 + 16);
    goto LABEL_6;
  }
  if (v12 < 0) {
    goto LABEL_21;
  }
LABEL_7:
  if ((char *)a2 != a3)
  {
LABEL_8:
    if (v9 < 0x20 || (unint64_t)v8 - a2 < 0x20)
    {
      unint64_t v13 = v8;
      int v14 = (char *)a2;
    }
    else
    {
      unint64_t v13 = (char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0);
      int v14 = (char *)(a2 + (v9 & 0xFFFFFFFFFFFFFFE0));
      std::string::size_type v15 = (long long *)(a2 + 16);
      uint64_t v16 = v8 + 2;
      unint64_t v17 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *uint64_t v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_16:
        *unint64_t v13 = 0;
        if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
          goto LABEL_17;
        }
LABEL_23:
        *(void *)(a1 + 16) = v9;
        if (!a4) {
          return a1;
        }
        goto LABEL_18;
      }
    }
    do
    {
      char v19 = *v14++;
      *v13++ = v19;
    }
    while (v14 != a3);
    goto LABEL_16;
  }
LABEL_22:
  *(unsigned char *)__darwin_ct_rune_t v8 = 0;
  if (*(char *)(a1 + 31) < 0) {
    goto LABEL_23;
  }
LABEL_17:
  *(unsigned char *)(a1 + 31) = v9 & 0x7F;
  if (a4) {
LABEL_18:
  }
    *(void *)(a1 + 32) = a2 - a4;
  return a1;
}

uint64_t sub_B75A8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_B77C0((char **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    unint64_t v5 = (unsigned char *)(v4 + 8);
    if (*(char *)(a2 + 31) < 0)
    {
      sub_4200(v5, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 8);
      *(void *)(v4 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(void *)(v4 + 32) = *(void *)(a2 + 32);
    uint64_t result = v4 + 40;
    *(void *)(a1 + 8) = v4 + 40;
    *(void *)(a1 + 8) = v4 + 40;
  }
  return result;
}

void sub_B7648(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_B7650(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  if ((a2 - 1) >= 5) {
    int v9 = 1;
  }
  else {
    int v9 = a2;
  }
  *(_DWORD *)a1 = v9;
  std::string::size_type v10 = (void *)(a1 + 8);
  unint64_t v11 = (unint64_t)&a4[-a3];
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (v11 <= 0x16) {
      goto LABEL_10;
    }
    std::string::size_type v12 = *(unsigned __int8 *)(a1 + 31);
    std::string::size_type v13 = 22;
LABEL_9:
    std::string::__grow_by((std::string *)(a1 + 8), v13, v11 - v13, v12, 0, v12, 0);
    *(void *)(a1 + 16) = 0;
    if ((*(unsigned char *)(a1 + 31) & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    std::string::size_type v10 = (void *)*v10;
    if ((char *)a3 != a4) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  std::string::size_type v13 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v13 < v11)
  {
    std::string::size_type v12 = *(void *)(a1 + 16);
    goto LABEL_9;
  }
  if (v14 < 0) {
    goto LABEL_24;
  }
LABEL_10:
  if ((char *)a3 != a4)
  {
LABEL_11:
    if (v11 < 0x20 || (unint64_t)v10 - a3 < 0x20)
    {
      std::string::size_type v15 = v10;
      uint64_t v16 = (char *)a3;
    }
    else
    {
      std::string::size_type v15 = (char *)v10 + (v11 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v16 = (char *)(a3 + (v11 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v17 = (long long *)(a3 + 16);
      long long v18 = v10 + 2;
      unint64_t v19 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *long long v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_19:
        unsigned char *v15 = 0;
        if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_26:
        *(void *)(a1 + 16) = v11;
        if (!a5) {
          return a1;
        }
        goto LABEL_21;
      }
    }
    do
    {
      char v21 = *v16++;
      *v15++ = v21;
    }
    while (v16 != a4);
    goto LABEL_19;
  }
LABEL_25:
  *(unsigned char *)std::string::size_type v10 = 0;
  if (*(char *)(a1 + 31) < 0) {
    goto LABEL_26;
  }
LABEL_20:
  *(unsigned char *)(a1 + 31) = v11 & 0x7F;
  if (a5) {
LABEL_21:
  }
    *(void *)(a1 + 32) = a3 - a5;
  return a1;
}

uint64_t sub_B77C0(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_188D718();
    }
    int v9 = operator new(40 * v8);
  }
  else
  {
    int v9 = 0;
  }
  std::string::size_type v10 = (char *)&v9[5 * v5];
  long long v20 = (char *)&v9[5 * v8];
  *(_DWORD *)std::string::size_type v10 = *(_DWORD *)a2;
  unint64_t v11 = v10 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200(v11, *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    std::string::size_type v10 = (char *)&v9[5 * v5];
  }
  else
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)(a2 + 8);
    *((void *)v10 + 3) = *(void *)(a2 + 24);
  }
  v9[5 * v5 + 4] = *(void *)(a2 + 32);
  uint64_t v12 = (uint64_t)&v9[5 * v5 + 5];
  if (v4 == v3)
  {
    unint64_t v17 = v3;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = &v10[v13];
      std::string::size_type v15 = &v4[v13];
      *((_DWORD *)v14 - 10) = *(_DWORD *)&v4[v13 - 40];
      long long v16 = *(_OWORD *)&v4[v13 - 32];
      *((void *)v14 - 2) = *(void *)&v4[v13 - 16];
      *((_OWORD *)v14 - 2) = v16;
      *((void *)v15 - 3) = 0;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v14 - 1) = *(void *)&v4[v13 - 8];
      v13 -= 40;
    }
    while (&v4[v13] != v3);
    unint64_t v17 = *a1;
    uint64_t v3 = a1[1];
    v10 += v13;
  }
  *a1 = v10;
  a1[1] = (char *)v12;
  a1[2] = v20;
  if (v3 == v17)
  {
    if (v3) {
LABEL_21:
    }
      operator delete(v3);
  }
  else
  {
    do
    {
      unint64_t v19 = v3 - 40;
      if (*(v3 - 9) < 0) {
        operator delete(*((void **)v3 - 4));
      }
      v3 -= 40;
    }
    while (v19 != v17);
    uint64_t v3 = v17;
    if (v17) {
      goto LABEL_21;
    }
  }
  return v12;
}

void sub_B79BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B79D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B79D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_B7A38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 48) - v4) >> 4) <= a2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5B90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F5B90))
    {
      dword_24F5B68 = 0;
      byte_24F5B87 = 0;
      LOBYTE(xmmword_24F5B70) = 0;
      qword_24F5B88 = -1;
      __cxa_guard_release(&qword_24F5B90);
    }
    int v8 = dword_24F5B68;
    *(_DWORD *)a3 = dword_24F5B68;
    if (byte_24F5B87 < 0)
    {
      sub_4200((unsigned char *)(a3 + 8), (void *)xmmword_24F5B70, *((unint64_t *)&xmmword_24F5B70 + 1));
      int v14 = dword_24F5B68;
      int v15 = byte_24F5B87;
      uint64_t v9 = qword_24F5B88;
      *(void *)(a3 + 32) = qword_24F5B88;
      *(_DWORD *)(a3 + 40) = v14;
      uint64_t result = (unsigned char *)(a3 + 48);
      if (v15 < 0)
      {
        uint64_t result = sub_4200(result, (void *)xmmword_24F5B70, *((unint64_t *)&xmmword_24F5B70 + 1));
        *(void *)(a3 + 72) = qword_24F5B88;
        return result;
      }
    }
    else
    {
      *(_OWORD *)(a3 + 8) = xmmword_24F5B70;
      uint64_t v9 = qword_24F5B88;
      *(void *)(a3 + 24) = unk_24F5B80;
      *(void *)(a3 + 32) = v9;
      *(_DWORD *)(a3 + 40) = v8;
      uint64_t result = (unsigned char *)(a3 + 48);
    }
    *(_OWORD *)uint64_t result = xmmword_24F5B70;
    *((void *)result + 2) = unk_24F5B80;
    *(void *)(a3 + 72) = v9;
    return result;
  }
  uint64_t v6 = v4 + 80 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v6;
  if (*(char *)(v6 + 31) < 0)
  {
    sub_4200((unsigned char *)(a3 + 8), *(void **)(v6 + 8), *(void *)(v6 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 8);
    *(void *)(a3 + 24) = *(void *)(v6 + 24);
    *(_OWORD *)(a3 + 8) = v7;
  }
  *(void *)(a3 + 32) = *(void *)(v6 + 32);
  uint64_t v11 = v4 + 80 * a2;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v11 + 40);
  uint64_t result = (unsigned char *)(a3 + 48);
  uint64_t v12 = (long long *)(v11 + 48);
  if (*(char *)(v6 + 71) < 0)
  {
    uint64_t result = sub_4200(result, *(void **)v12, *(void *)(v4 + 80 * a2 + 56));
  }
  else
  {
    long long v13 = *v12;
    *(void *)(a3 + 64) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t result = v13;
  }
  *(void *)(a3 + 72) = *(void *)(v4 + 80 * a2 + 72);
  return result;
}

void sub_B7C2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7C4C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_B7CA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  for (uint64_t i = *(void *)(a1 + 48); i != v2; i -= 80)
  {
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 49) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 49) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 72));
  }
  *(void *)(a1 + 48) = v2;
}

unsigned char *sub_B7D18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 48) - v4) >> 4) <= a2)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5BC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F5BC0))
    {
      dword_24F5B98 = 0;
      byte_24F5BB7 = 0;
      LOBYTE(xmmword_24F5BA0) = 0;
      qword_24F5BB8 = -1;
      __cxa_guard_release(&qword_24F5BC0);
    }
    int v8 = dword_24F5B98;
    *(_DWORD *)a3 = dword_24F5B98;
    if (byte_24F5BB7 < 0)
    {
      sub_4200((unsigned char *)(a3 + 8), (void *)xmmword_24F5BA0, *((unint64_t *)&xmmword_24F5BA0 + 1));
      int v14 = dword_24F5B98;
      int v15 = byte_24F5BB7;
      uint64_t v9 = qword_24F5BB8;
      *(void *)(a3 + 32) = qword_24F5BB8;
      *(_DWORD *)(a3 + 40) = v14;
      uint64_t result = (unsigned char *)(a3 + 48);
      if (v15 < 0)
      {
        uint64_t result = sub_4200(result, (void *)xmmword_24F5BA0, *((unint64_t *)&xmmword_24F5BA0 + 1));
        *(void *)(a3 + 72) = qword_24F5BB8;
        return result;
      }
    }
    else
    {
      *(_OWORD *)(a3 + 8) = xmmword_24F5BA0;
      uint64_t v9 = qword_24F5BB8;
      *(void *)(a3 + 24) = unk_24F5BB0;
      *(void *)(a3 + 32) = v9;
      *(_DWORD *)(a3 + 40) = v8;
      uint64_t result = (unsigned char *)(a3 + 48);
    }
    *(_OWORD *)uint64_t result = xmmword_24F5BA0;
    *((void *)result + 2) = unk_24F5BB0;
    *(void *)(a3 + 72) = v9;
    return result;
  }
  uint64_t v6 = v4 + 80 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v6;
  if (*(char *)(v6 + 31) < 0)
  {
    sub_4200((unsigned char *)(a3 + 8), *(void **)(v6 + 8), *(void *)(v6 + 16));
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 8);
    *(void *)(a3 + 24) = *(void *)(v6 + 24);
    *(_OWORD *)(a3 + 8) = v7;
  }
  *(void *)(a3 + 32) = *(void *)(v6 + 32);
  uint64_t v11 = v4 + 80 * a2;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v11 + 40);
  uint64_t result = (unsigned char *)(a3 + 48);
  uint64_t v12 = (long long *)(v11 + 48);
  if (*(char *)(v6 + 71) < 0)
  {
    uint64_t result = sub_4200(result, *(void **)v12, *(void *)(v4 + 80 * a2 + 56));
  }
  else
  {
    long long v13 = *v12;
    *(void *)(a3 + 64) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t result = v13;
  }
  *(void *)(a3 + 72) = *(void *)(v4 + 80 * a2 + 72);
  return result;
}

void sub_B7F0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B7F2C(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * (v5 >> 3)];
    do
    {
      int v8 = *(void **)(v3 + v7);
      *(void *)&v6[v7] = v8;
      ++*v8;
      v7 += 8;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_B7FC4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A6840(v1 + 1, *v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7FE4(std::string::size_type a1, int a2)
{
  uint64_t v4 = sub_BADB8(a1, a2);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = (std::string::size_type *)(a1 + 112);
  uint64_t v129 = a1 + 552;
  int v128 = (void **)(a1 + 848);
  while (1)
  {
    memset(v139, 0, 12);
    switch(*(_DWORD *)(a1 + 104))
    {
      case 8:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5BE0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5BE0))
        {
          sub_5E5C(&qword_24F5BC8, "and");
          __cxa_guard_release(&qword_24F5BE0);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5C00, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5C00))
        {
          sub_5E5C(&qword_24F5BE8, "nand");
          __cxa_guard_release(&qword_24F5C00);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5C20, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5C20))
        {
          sub_5E5C(&qword_24F5C08, "or");
          __cxa_guard_release(&qword_24F5C20);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5C40, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5C40))
        {
          sub_5E5C(qword_24F5C28, "nor");
          __cxa_guard_release(&qword_24F5C40);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5C60, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5C60))
        {
          sub_5E5C(qword_24F5C48, "xor");
          __cxa_guard_release(&qword_24F5C60);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5C80, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5C80))
        {
          sub_5E5C(qword_24F5C68, "xnor");
          __cxa_guard_release(&qword_24F5C80);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5CA0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5CA0))
        {
          sub_5E5C(qword_24F5C88, "in");
          __cxa_guard_release(&qword_24F5CA0);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5CC0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5CC0))
        {
          sub_5E5C(qword_24F5CA8, "like");
          __cxa_guard_release(&qword_24F5CC0);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5CE0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5CE0))
        {
          sub_5E5C(qword_24F5CC8, "ilike");
          __cxa_guard_release(&qword_24F5CE0);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5D00, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5D00))
        {
          sub_5E5C(&qword_24F5CE8, "&");
          __cxa_guard_release(&qword_24F5D00);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5D20, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5D20))
        {
          sub_5E5C(qword_24F5D08, "|");
          __cxa_guard_release(&qword_24F5D20);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5D40, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F5D40))
        {
          sub_5E5C(qword_24F5D28, "not");
          __cxa_guard_release(&qword_24F5D40);
        }
        int v7 = *(char *)(a1 + 135);
        uint64_t v8 = *(void *)(a1 + 120);
        uint64_t v9 = *(unsigned __int8 *)(a1 + 135);
        if (v7 >= 0) {
          uint64_t v10 = *(unsigned __int8 *)(a1 + 135);
        }
        else {
          uint64_t v10 = *(void *)(a1 + 120);
        }
        uint64_t v11 = byte_24F5BDF;
        if (byte_24F5BDF < 0) {
          uint64_t v11 = qword_24F5BD0;
        }
        if (v10 != v11) {
          goto LABEL_62;
        }
        if (!v10) {
          goto LABEL_79;
        }
        unint64_t v12 = 0;
        unsigned int v13 = v7 >> 31;
        break;
      case 0xA:
        int v19 = 0;
        uint64_t v20 = 0x5100000000;
        goto LABEL_45;
      case 0xB:
        int v19 = 0;
        uint64_t v20 = 0x5200000000;
LABEL_45:
        *(void *)((char *)v139 + 4) = v20;
        goto LABEL_121;
      case 0xC:
        int v19 = 0;
        *(void *)((char *)v139 + 4) = 0x5300000000;
        goto LABEL_121;
      case 0xD:
        int v19 = 0;
        *(void *)((char *)v139 + 4) = 0x5400000000;
        goto LABEL_121;
      case 0xE:
        int v19 = 0;
        *(void *)((char *)v139 + 4) = 0x5500000000;
        goto LABEL_121;
      case 0xF:
        int v19 = 0;
        *(void *)((char *)v139 + 4) = 0x5600000000;
        goto LABEL_121;
      case 0x12:
        v139[0] = 0x600000005;
        int v18 = 15;
        goto LABEL_55;
      case 0x13:
        v139[0] = 0x600000005;
        int v18 = 18;
        goto LABEL_55;
      case 0x14:
        v139[0] = 0x600000005;
        int v18 = 20;
        goto LABEL_55;
      case 0x15:
        int v19 = 0;
        *(void *)((char *)v139 + 4) = 0x5C00000000;
        goto LABEL_121;
      case 0x25:
        v139[0] = 0xB0000000ALL;
        int v21 = 6;
        goto LABEL_57;
      case 0x2A:
        v139[0] = 0xB0000000ALL;
        int v21 = 4;
        goto LABEL_57;
      case 0x2B:
        v139[0] = 0x800000007;
        int v22 = 2;
        goto LABEL_60;
      case 0x2D:
        v139[0] = 0x800000007;
        int v22 = 3;
LABEL_60:
        LODWORD(v139[1]) = v22;
        int v19 = 7;
        goto LABEL_121;
      case 0x2F:
        v139[0] = 0xB0000000ALL;
        int v21 = 5;
LABEL_57:
        LODWORD(v139[1]) = v21;
        int v19 = 10;
        goto LABEL_121;
      case 0x3C:
        v139[0] = 0x600000005;
        int v18 = 14;
        goto LABEL_55;
      case 0x3D:
        v139[0] = 0x600000005;
        int v18 = 16;
        goto LABEL_55;
      case 0x3E:
        v139[0] = 0x600000005;
        int v18 = 21;
LABEL_55:
        LODWORD(v139[1]) = v18;
        int v19 = 5;
        goto LABEL_121;
      case 0x5E:
        v139[0] = 0xC0000000CLL;
        LODWORD(v139[1]) = 7;
        int v19 = 12;
        goto LABEL_121;
      default:
        goto LABEL_344;
    }
    while (1)
    {
      std::string::size_type v14 = (v13 & 1) != 0 ? *v5 : a1 + 112;
      __darwin_ct_rune_t v15 = __tolower(*(char *)(v14 + v12));
      long long v16 = byte_24F5BDF >= 0 ? &qword_24F5BC8 : (uint64_t *)qword_24F5BC8;
      if (v15 != __tolower(*((char *)v16 + v12))) {
        break;
      }
      ++v12;
      LOBYTE(v13) = *(char *)(a1 + 135) < 0;
      unint64_t v17 = *(unsigned __int8 *)(a1 + 135);
      if ((v17 & 0x80u) != 0) {
        unint64_t v17 = *(void *)(a1 + 120);
      }
      if (v12 >= v17) {
        goto LABEL_79;
      }
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 135);
    uint64_t v8 = *(void *)(a1 + 120);
    LOBYTE(v7) = *(unsigned char *)(a1 + 135);
LABEL_62:
    BOOL v23 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) == 0) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v8;
    }
    uint64_t v25 = byte_24F5CFF;
    if (byte_24F5CFF < 0) {
      uint64_t v25 = qword_24F5CF0;
    }
    if (v24 == v25)
    {
      if (!v24)
      {
LABEL_79:
        v139[0] = 0x400000003;
        int v31 = 22;
LABEL_99:
        LODWORD(v139[1]) = v31;
        int v19 = 3;
        goto LABEL_121;
      }
      unint64_t v26 = 0;
      while (1)
      {
        std::string::size_type v27 = *v5;
        if (!v23) {
          std::string::size_type v27 = a1 + 112;
        }
        __darwin_ct_rune_t v28 = __tolower(*(char *)(v27 + v26));
        std::string::value_type v29 = byte_24F5CFF >= 0 ? &qword_24F5CE8 : (uint64_t *)qword_24F5CE8;
        if (v28 != __tolower(*((char *)v29 + v26))) {
          break;
        }
        ++v26;
        BOOL v23 = *(char *)(a1 + 135) < 0;
        unint64_t v30 = *(unsigned __int8 *)(a1 + 135);
        if ((v30 & 0x80u) != 0) {
          unint64_t v30 = *(void *)(a1 + 120);
        }
        if (v26 >= v30) {
          goto LABEL_79;
        }
      }
      uint64_t v9 = *(unsigned __int8 *)(a1 + 135);
      uint64_t v8 = *(void *)(a1 + 120);
      LOBYTE(v7) = *(unsigned char *)(a1 + 135);
    }
    BOOL v32 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) == 0) {
      uint64_t v33 = v9;
    }
    else {
      uint64_t v33 = v8;
    }
    uint64_t v34 = byte_24F5BFF;
    if (byte_24F5BFF < 0) {
      uint64_t v34 = qword_24F5BF0;
    }
    if (v33 != v34) {
      goto LABEL_101;
    }
    if (!v33)
    {
LABEL_98:
      v139[0] = 0x400000003;
      int v31 = 23;
      goto LABEL_99;
    }
    unint64_t v35 = 0;
    while (1)
    {
      std::string::size_type v36 = *v5;
      if (!v32) {
        std::string::size_type v36 = a1 + 112;
      }
      __darwin_ct_rune_t v37 = __tolower(*(char *)(v36 + v35));
      long long v38 = byte_24F5BFF >= 0 ? &qword_24F5BE8 : (uint64_t *)qword_24F5BE8;
      if (v37 != __tolower(*((char *)v38 + v35))) {
        break;
      }
      ++v35;
      BOOL v32 = *(char *)(a1 + 135) < 0;
      unint64_t v39 = *(unsigned __int8 *)(a1 + 135);
      if ((v39 & 0x80u) != 0) {
        unint64_t v39 = *(void *)(a1 + 120);
      }
      if (v35 >= v39) {
        goto LABEL_98;
      }
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 135);
    uint64_t v8 = *(void *)(a1 + 120);
    LOBYTE(v7) = *(unsigned char *)(a1 + 135);
LABEL_101:
    BOOL v40 = (v7 & 0x80u) != 0;
    if (v40) {
      uint64_t v9 = v8;
    }
    uint64_t v41 = byte_24F5C1F;
    if (byte_24F5C1F < 0) {
      uint64_t v41 = qword_24F5C10;
    }
    if (v9 != v41) {
      goto LABEL_118;
    }
    if (v9) {
      break;
    }
LABEL_119:
    v139[0] = 0x200000001;
    int v47 = 24;
LABEL_120:
    LODWORD(v139[1]) = v47;
    int v19 = 1;
LABEL_121:
    if (v19 < a2) {
      return v4;
    }
    int v136 = *(_DWORD *)(a1 + 104);
    if (*(char *)(a1 + 135) < 0)
    {
      sub_4200(&v137, *(void **)(a1 + 112), *(void *)(a1 + 120));
    }
    else
    {
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v137.__r_.__value_.__r.__words[2] = *(void *)(a1 + 128);
    }
    uint64_t v138 = *(void *)(a1 + 136);
    std::string::size_type v48 = *(void *)(a1 + 24);
    std::string::size_type v49 = a1 + 40;
    if (*(void *)(a1 + 8) != v48)
    {
      *(void *)(a1 + 24) = v48 + 40;
      std::string::size_type v49 = v48;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v49;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v49 + 8));
    *(void *)(a1 + 136) = *(void *)(v49 + 32);
    if (sub_22054C(a1 + 184, v139[1]))
    {
      if (v4
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v4 = 0;
      }
      sub_BBF68(LODWORD(v139[1]), (char *)&v133);
      uint64_t v50 = std::string::insert(&v133, 0, "ERR009 - Invalid arithmetic operation '");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      uint64_t v52 = std::string::append(&__p, "'");
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      memset(&v131, 0, sizeof(v131));
      std::string::push_back(&v131, 49);
      std::string::push_back(&v131, 57);
      std::string::push_back(&v131, 55);
      std::string::push_back(&v131, 48);
      std::string::push_back(&v131, 50);
      std::string::size_type size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      long long v55 = &v131;
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type size = v131.__r_.__value_.__l.__size_;
        long long v55 = (std::string *)v131.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        std::string::value_type v56 = (std::string *)((char *)v55 + size - 1);
        if (v56 > v55)
        {
          unint64_t v57 = &v55->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v58 = *(v57 - 1);
            *(v57 - 1) = v56->__r_.__value_.__s.__data_[0];
            v56->__r_.__value_.__s.__data_[0] = v58;
            std::string::value_type v56 = (std::string *)((char *)v56 - 1);
            BOOL v59 = v57++ >= (char *)v56;
          }
          while (!v59);
        }
      }
      uint64_t v60 = std::string::insert(&v131, 0, "exprtk.hpp:");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
      v141.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v142 = -1;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t v149 = 0;
      int v143 = 1;
      LODWORD(v140) = v136;
      std::string::operator=(&v141, &v137);
      uint64_t v142 = v138;
      std::string::operator=((std::string *)&v144, &__str);
      std::string::operator=((std::string *)((char *)&v145 + 8), &v132);
      uint64_t v62 = *(void *)(a1 + 568);
      uint64_t v63 = *(void *)(a1 + 560);
      uint64_t v64 = 30 * ((v62 - v63) >> 3) - 1;
      if (v62 == v63) {
        uint64_t v64 = 0;
      }
      if (v64 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(v129);
        uint64_t v63 = *(void *)(a1 + 560);
        uint64_t v62 = *(void *)(a1 + 568);
      }
      if (v62 == v63)
      {
        uint64_t v66 = 0;
      }
      else
      {
        unint64_t v65 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v66 = *(void *)(v63 + 8 * (v65 / 0x1E)) + 136 * (v65 % 0x1E);
      }
      goto LABEL_208;
    }
    LODWORD(v140) = v139[1];
    if (sub_22068C(a1 + 184, &v140))
    {
      if (v4
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v4 = 0;
      }
      sub_BBF68(LODWORD(v139[1]), (char *)&v133);
      unint64_t v67 = std::string::insert(&v133, 0, "ERR010 - Invalid inequality operation '");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v69 = std::string::append(&__p, "'");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      memset(&v131, 0, sizeof(v131));
      std::string::push_back(&v131, 51);
      std::string::push_back(&v131, 48);
      std::string::push_back(&v131, 56);
      std::string::push_back(&v131, 48);
      std::string::push_back(&v131, 50);
      std::string::size_type v71 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      uint64_t v72 = &v131;
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v71 = v131.__r_.__value_.__l.__size_;
        uint64_t v72 = (std::string *)v131.__r_.__value_.__r.__words[0];
      }
      if (v71)
      {
        unint64_t v73 = (std::string *)((char *)v72 + v71 - 1);
        if (v73 > v72)
        {
          long long v74 = &v72->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v75 = *(v74 - 1);
            *(v74 - 1) = v73->__r_.__value_.__s.__data_[0];
            v73->__r_.__value_.__s.__data_[0] = v75;
            unint64_t v73 = (std::string *)((char *)v73 - 1);
            BOOL v59 = v74++ >= (char *)v73;
          }
          while (!v59);
        }
      }
      std::string::size_type v76 = std::string::insert(&v131, 0, "exprtk.hpp:");
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
      v141.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v142 = -1;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t v149 = 0;
      int v143 = 1;
      LODWORD(v140) = v136;
      std::string::operator=(&v141, &v137);
      uint64_t v142 = v138;
      std::string::operator=((std::string *)&v144, &__str);
      std::string::operator=((std::string *)((char *)&v145 + 8), &v132);
      uint64_t v78 = *(void *)(a1 + 568);
      uint64_t v79 = *(void *)(a1 + 560);
      uint64_t v80 = 30 * ((v78 - v79) >> 3) - 1;
      if (v78 == v79) {
        uint64_t v80 = 0;
      }
      if (v80 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(v129);
        uint64_t v79 = *(void *)(a1 + 560);
        uint64_t v78 = *(void *)(a1 + 568);
      }
      if (v78 == v79)
      {
        uint64_t v66 = 0;
      }
      else
      {
        unint64_t v81 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v66 = *(void *)(v79 + 8 * (v81 / 0x1E)) + 136 * (v81 % 0x1E);
      }
      goto LABEL_208;
    }
    if (sub_220808(a1 + 184, v139[1]))
    {
      if (v4
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v4 = 0;
      }
      sub_BBF68(LODWORD(v139[1]), (char *)&v133);
      unint64_t v82 = std::string::insert(&v133, 0, "ERR011 - Invalid assignment operation '");
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      std::string::value_type v84 = std::string::append(&__p, "'");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      memset(&v131, 0, sizeof(v131));
      std::string::push_back(&v131, 53);
      std::string::push_back(&v131, 49);
      std::string::push_back(&v131, 56);
      std::string::push_back(&v131, 48);
      std::string::push_back(&v131, 50);
      std::string::size_type v86 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      uint64_t v87 = &v131;
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type v86 = v131.__r_.__value_.__l.__size_;
        uint64_t v87 = (std::string *)v131.__r_.__value_.__r.__words[0];
      }
      if (v86)
      {
        long long v88 = (std::string *)((char *)v87 + v86 - 1);
        if (v88 > v87)
        {
          unint64_t v89 = &v87->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v90 = *(v89 - 1);
            *(v89 - 1) = v88->__r_.__value_.__s.__data_[0];
            v88->__r_.__value_.__s.__data_[0] = v90;
            long long v88 = (std::string *)((char *)v88 - 1);
            BOOL v59 = v89++ >= (char *)v88;
          }
          while (!v59);
        }
      }
      std::string::value_type v91 = std::string::insert(&v131, 0, "exprtk.hpp:");
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
      v141.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v142 = -1;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      uint64_t v149 = 0;
      int v143 = 1;
      LODWORD(v140) = v136;
      std::string::operator=(&v141, &v137);
      uint64_t v142 = v138;
      std::string::operator=((std::string *)&v144, &__str);
      std::string::operator=((std::string *)((char *)&v145 + 8), &v132);
      uint64_t v93 = *(void *)(a1 + 568);
      uint64_t v94 = *(void *)(a1 + 560);
      uint64_t v95 = 30 * ((v93 - v94) >> 3) - 1;
      if (v93 == v94) {
        uint64_t v95 = 0;
      }
      if (v95 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(v129);
        uint64_t v94 = *(void *)(a1 + 560);
        uint64_t v93 = *(void *)(a1 + 568);
      }
      if (v93 == v94)
      {
        uint64_t v66 = 0;
      }
      else
      {
        unint64_t v96 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v66 = *(void *)(v94 + 8 * (v96 / 0x1E)) + 136 * (v96 % 0x1E);
      }
LABEL_208:
      sub_B5158(v66, (uint64_t)&v140);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v148) < 0)
      {
        operator delete((void *)v147);
        if (SHIBYTE(v146) < 0) {
          goto LABEL_218;
        }
LABEL_210:
        if ((SBYTE7(v145) & 0x80000000) == 0) {
          goto LABEL_211;
        }
LABEL_219:
        operator delete((void *)v144);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_220;
        }
LABEL_212:
        if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_213;
        }
LABEL_221:
        operator delete(v132.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_222;
        }
LABEL_214:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_215;
        }
LABEL_223:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_224;
        }
LABEL_3:
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else
      {
        if ((SHIBYTE(v146) & 0x80000000) == 0) {
          goto LABEL_210;
        }
LABEL_218:
        operator delete(*((void **)&v145 + 1));
        if (SBYTE7(v145) < 0) {
          goto LABEL_219;
        }
LABEL_211:
        if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_212;
        }
LABEL_220:
        operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_221;
        }
LABEL_213:
        if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_214;
        }
LABEL_222:
        operator delete(v131.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_223;
        }
LABEL_215:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_3;
        }
LABEL_224:
        if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      operator delete(v133.__r_.__value_.__l.__data_);
      goto LABEL_4;
    }
    uint64_t v97 = sub_B7FE4(a1, HIDWORD(v139[0]));
    if (v97)
    {
      if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) == 15) {
        goto LABEL_187;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v97 + 32))(v97) == 15)
      {
        if (v4)
        {
LABEL_187:
          if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17
            && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
          {
            (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
            uint64_t v4 = 0;
          }
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v97 + 32))(v97) != 17
          && (*(unsigned int (**)(uint64_t))(*(void *)v97 + 32))(v97) != 18)
        {
          (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR012 - Return statements cannot be part of sub-expressions");
        memset(&v133, 0, sizeof(v133));
        std::string::push_back(&v133, 52);
        std::string::push_back(&v133, 51);
        std::string::push_back(&v133, 56);
        std::string::push_back(&v133, 48);
        std::string::push_back(&v133, 50);
        std::string::size_type v98 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        uint64_t v99 = &v133;
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type v98 = v133.__r_.__value_.__l.__size_;
          uint64_t v99 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        if (v98)
        {
          uint64_t v100 = (std::string *)((char *)v99 + v98 - 1);
          if (v100 > v99)
          {
            uint64_t v101 = &v99->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v102 = *(v101 - 1);
              *(v101 - 1) = v100->__r_.__value_.__s.__data_[0];
              v100->__r_.__value_.__s.__data_[0] = v102;
              uint64_t v100 = (std::string *)((char *)v100 - 1);
              BOOL v59 = v101++ >= (char *)v100;
            }
            while (!v59);
          }
        }
        long long v103 = std::string::insert(&v133, 0, "exprtk.hpp:");
        long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
        v141.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v142 = -1;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        uint64_t v149 = 0;
        int v143 = 1;
        LODWORD(v140) = v136;
        std::string::operator=(&v141, &v137);
        uint64_t v142 = v138;
        std::string::operator=((std::string *)&v144, &__str);
        std::string::operator=((std::string *)((char *)&v145 + 8), &__p);
        uint64_t v105 = *(void *)(a1 + 568);
        uint64_t v106 = *(void *)(a1 + 560);
        uint64_t v107 = 30 * ((v105 - v106) >> 3) - 1;
        if (v105 == v106) {
          uint64_t v107 = 0;
        }
        if (v107 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(v129);
          uint64_t v106 = *(void *)(a1 + 560);
          uint64_t v105 = *(void *)(a1 + 568);
        }
        if (v105 == v106)
        {
          uint64_t v109 = 0;
        }
        else
        {
          unint64_t v108 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v109 = *(void *)(v106 + 8 * (v108 / 0x1E)) + 136 * (v108 % 0x1E);
        }
        sub_B5158(v109, (uint64_t)&v140);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v148) < 0)
        {
          operator delete((void *)v147);
          if (SHIBYTE(v146) < 0) {
            goto LABEL_247;
          }
LABEL_240:
          if ((SBYTE7(v145) & 0x80000000) == 0) {
            goto LABEL_241;
          }
LABEL_248:
          operator delete((void *)v144);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_249;
          }
LABEL_242:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_243;
          }
LABEL_250:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_251;
          }
LABEL_244:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        else
        {
          if ((SHIBYTE(v146) & 0x80000000) == 0) {
            goto LABEL_240;
          }
LABEL_247:
          operator delete(*((void **)&v145 + 1));
          if (SBYTE7(v145) < 0) {
            goto LABEL_248;
          }
LABEL_241:
          if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_242;
          }
LABEL_249:
          operator delete(v141.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_250;
          }
LABEL_243:
          if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_244;
          }
LABEL_251:
          operator delete(v133.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_4;
      }
      if (v4)
      {
        uint64_t v140 = v4;
        v141.__r_.__value_.__r.__words[0] = v97;
        uint64_t v4 = (uint64_t)sub_DC9C8(a1 + 344, (int *)&v139[1], &v140);
        if (v4)
        {
          if ((a2 || *(_DWORD *)(a1 + 104) != 63 || (uint64_t v4 = sub_BC348(a1, v4)) != 0)
            && !*(void *)(a1 + 592)
            && sub_115C38(v4)
            && *(_DWORD *)(a1 + 104) == 91)
          {
            uint64_t v4 = 0;
          }
          char v6 = 1;
          if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_5;
          }
          goto LABEL_301;
        }
        uint64_t v4 = v140;
        uint64_t v97 = v141.__r_.__value_.__r.__words[0];
      }
    }
    if (*(void *)(a1 + 592)) {
      goto LABEL_293;
    }
    if (*(char *)(a1 + 871) < 0)
    {
      unint64_t v111 = *(void *)(a1 + 856);
      if (v111)
      {
        sub_4200(&__str, *v128, v111);
        int v110 = 0;
        goto LABEL_261;
      }
    }
    else if (*(unsigned char *)(a1 + 871))
    {
      int v110 = 0;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v128;
      __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 864);
      goto LABEL_261;
    }
    std::operator+<char>();
    std::string::value_type v112 = std::string::append(&v130, "'");
    long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    int v110 = 1;
LABEL_261:
    memset(&v133, 0, sizeof(v133));
    std::string::push_back(&v133, 55);
    std::string::push_back(&v133, 53);
    std::string::push_back(&v133, 56);
    std::string::push_back(&v133, 48);
    std::string::push_back(&v133, 50);
    std::string::size_type v114 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    uint64_t v115 = &v133;
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v114 = v133.__r_.__value_.__l.__size_;
      uint64_t v115 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    if (v114)
    {
      std::string::size_type v116 = (std::string *)((char *)v115 + v114 - 1);
      if (v116 > v115)
      {
        unsigned __int8 v117 = &v115->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v118 = *(v117 - 1);
          *(v117 - 1) = v116->__r_.__value_.__s.__data_[0];
          v116->__r_.__value_.__s.__data_[0] = v118;
          std::string::size_type v116 = (std::string *)((char *)v116 - 1);
          BOOL v59 = v117++ >= (char *)v116;
        }
        while (!v59);
      }
    }
    std::string v119 = std::string::insert(&v133, 0, "exprtk.hpp:");
    long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v141.__r_.__value_.__s + 23) = 0;
    v141.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v142 = -1;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    uint64_t v149 = 0;
    int v143 = 1;
    LODWORD(v140) = v136;
    std::string::operator=(&v141, &v137);
    uint64_t v142 = v138;
    std::string::operator=((std::string *)&v144, &__str);
    std::string::operator=((std::string *)((char *)&v145 + 8), &__p);
    uint64_t v121 = *(void *)(a1 + 568);
    uint64_t v122 = *(void *)(a1 + 560);
    uint64_t v123 = 30 * ((v121 - v122) >> 3) - 1;
    if (v121 == v122) {
      uint64_t v123 = 0;
    }
    if (v123 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(v129);
      uint64_t v122 = *(void *)(a1 + 560);
      uint64_t v121 = *(void *)(a1 + 568);
    }
    if (v121 == v122)
    {
      uint64_t v125 = 0;
    }
    else
    {
      unint64_t v124 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v125 = *(void *)(v122 + 8 * (v124 / 0x1E)) + 136 * (v124 % 0x1E);
    }
    sub_B5158(v125, (uint64_t)&v140);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v148) < 0)
    {
      operator delete((void *)v147);
      if ((SHIBYTE(v146) & 0x80000000) == 0)
      {
LABEL_277:
        if ((SBYTE7(v145) & 0x80000000) == 0) {
          goto LABEL_278;
        }
        goto LABEL_286;
      }
    }
    else if ((SHIBYTE(v146) & 0x80000000) == 0)
    {
      goto LABEL_277;
    }
    operator delete(*((void **)&v145 + 1));
    if ((SBYTE7(v145) & 0x80000000) == 0)
    {
LABEL_278:
      if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_279;
      }
      goto LABEL_287;
    }
LABEL_286:
    operator delete((void *)v144);
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_279:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_280;
      }
      goto LABEL_288;
    }
LABEL_287:
    operator delete(v141.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_280:
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_281;
      }
      goto LABEL_289;
    }
LABEL_288:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_281:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_282;
      }
      goto LABEL_290;
    }
LABEL_289:
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_282:
      if (v110) {
        goto LABEL_291;
      }
      goto LABEL_293;
    }
LABEL_290:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v110)
    {
LABEL_291:
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
    }
LABEL_293:
    if (v4
      && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v4 = 0;
    }
    if (!v97
      || (*(unsigned int (**)(uint64_t))(*(void *)v97 + 32))(v97) == 17
      || (*(unsigned int (**)(uint64_t))(*(void *)v97 + 32))(v97) == 18)
    {
LABEL_4:
      char v6 = 0;
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_301;
      }
LABEL_5:
      if ((v6 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
      char v6 = 0;
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_301:
      operator delete(v137.__r_.__value_.__l.__data_);
      if ((v6 & 1) == 0) {
        return 0;
      }
    }
  }
  unint64_t v42 = 0;
  while (1)
  {
    std::string::size_type v43 = *v5;
    if (!v40) {
      std::string::size_type v43 = a1 + 112;
    }
    __darwin_ct_rune_t v44 = __tolower(*(char *)(v43 + v42));
    unint64_t v45 = byte_24F5C1F >= 0 ? &qword_24F5C08 : (uint64_t *)qword_24F5C08;
    if (v44 != __tolower(*((char *)v45 + v42))) {
      break;
    }
    ++v42;
    BOOL v40 = *(char *)(a1 + 135) < 0;
    unint64_t v46 = *(unsigned __int8 *)(a1 + 135);
    if ((v46 & 0x80u) != 0) {
      unint64_t v46 = *(void *)(a1 + 120);
    }
    if (v42 >= v46) {
      goto LABEL_119;
    }
  }
LABEL_118:
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5D08)) {
    goto LABEL_119;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5C28))
  {
    v139[0] = 0x200000001;
    int v47 = 25;
    goto LABEL_120;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5C48))
  {
    v139[0] = 0x200000001;
    int v47 = 26;
    goto LABEL_120;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5C68))
  {
    v139[0] = 0x200000001;
    int v47 = 27;
    goto LABEL_120;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5C88))
  {
    v139[0] = 0x400000004;
    int v126 = 87;
LABEL_315:
    LODWORD(v139[1]) = v126;
    int v19 = 4;
    goto LABEL_121;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5CA8))
  {
    v139[0] = 0x400000004;
    int v126 = 88;
    goto LABEL_315;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5CC8))
  {
    v139[0] = 0x400000004;
    int v126 = 89;
    goto LABEL_315;
  }
  if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5D28))
  {
    int v19 = v139[0];
    goto LABEL_121;
  }
LABEL_344:
  if (v4 && !*(void *)(a1 + 592) && sub_115C38(v4) && *(_DWORD *)(a1 + 104) == 91) {
    return 0;
  }
  return v4;
}

void sub_B9C74(_Unwind_Exception *a1)
{
}

void sub_B9C8C(_Unwind_Exception *a1)
{
}

void sub_B9CA4(_Unwind_Exception *a1)
{
}

void sub_B9CBC(_Unwind_Exception *a1)
{
}

void sub_B9CD4(_Unwind_Exception *a1)
{
}

void sub_B9CEC(_Unwind_Exception *a1)
{
}

void sub_B9D04(_Unwind_Exception *a1)
{
}

void sub_B9D1C(_Unwind_Exception *a1)
{
}

void sub_B9D34(_Unwind_Exception *a1)
{
}

void sub_B9D4C(_Unwind_Exception *a1)
{
}

void sub_B9D64(_Unwind_Exception *a1)
{
}

void sub_B9D7C(_Unwind_Exception *a1)
{
}

void sub_B9D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_BA194(void **a1, void *a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  char v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      std::string::size_type v14 = operator new(8 * v13);
    }
    else
    {
      std::string::size_type v14 = 0;
    }
    __darwin_ct_rune_t v15 = &v14[8 * v10];
    void *v15 = *a2;
    int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      char v6 = &v5[-v18];
      __darwin_ct_rune_t v15 = (void *)((char *)v15 - v18);
      int v19 = &v14[8 * v10 - 16];
      uint64_t v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--__darwin_ct_rune_t v15 = v23;
        }
        while (v6 != v8);
      }
      char v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    int v7 = v5 + 8;
  }
  a1[1] = v7;
}

char *sub_BA2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a1 + 96);
  if (v5 + v6 >= v7) {
    uint64_t v8 = *(void *)(a1 + 96);
  }
  else {
    uint64_t v8 = v5 + v6;
  }
  uint64_t v9 = *(void *)(a3 + 32);
  if (v5 + v9 >= v7) {
    uint64_t v10 = *(char **)(a1 + 96);
  }
  else {
    uint64_t v10 = (char *)(v5 + v9);
  }
  unint64_t v11 = (unint64_t)&v10[-v8];
  if ((unint64_t)&v10[-v8] >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v11 > 0x16)
  {
    uint64_t v22 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v22 = v11 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t result = (char *)operator new(v22 + 1);
    *((void *)a4 + 1) = v11;
    *((void *)a4 + 2) = v23 | 0x8000000000000000;
    *(void *)a4 = result;
    if ((char *)v8 != v10) {
      goto LABEL_10;
    }
LABEL_24:
    uint64_t v17 = result;
    goto LABEL_27;
  }
  a4[23] = v11;
  uint64_t result = a4;
  if ((char *)v8 == v10) {
    goto LABEL_24;
  }
LABEL_10:
  if (v7 >= v9 + v5) {
    unint64_t v13 = v9 + v5;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v14 = v6 + v5;
  if (v7 < v6 + v5) {
    unint64_t v14 = v7;
  }
  unint64_t v15 = v13 - v14;
  if (v13 - v14 < 0x20 || (unint64_t)&result[-v14] < 0x20)
  {
    unint64_t v16 = (char *)v8;
    uint64_t v17 = result;
  }
  else
  {
    unint64_t v16 = (char *)(v8 + (v15 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = &result[v15 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v18 = result + 16;
    int v19 = (long long *)(v8 + 16);
    unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *uint64_t v18 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_27;
    }
  }
  do
  {
    char v24 = *v16++;
    *v17++ = v24;
  }
  while (v16 != v10);
LABEL_27:
  *uint64_t v17 = 0;
  int v25 = a4[23];
  unint64_t v26 = a4[23];
  BOOL v27 = v25 < 0;
  unint64_t v28 = *((void *)a4 + 1);
  if (v25 >= 0) {
    uint64_t v29 = a4[23];
  }
  else {
    uint64_t v29 = *((void *)a4 + 1);
  }
  if (v29)
  {
    unint64_t v30 = 0;
    int v31 = *(char **)a4;
    do
    {
      if (v27) {
        uint64_t v33 = v31;
      }
      else {
        uint64_t v33 = a4;
      }
      int v34 = v33[v30];
      if ((v34 - 8) < 6 || v34 == 32)
      {
        v33[v30] = 32;
        unint64_t v26 = a4[23];
        int v31 = *(char **)a4;
        unint64_t v28 = *((void *)a4 + 1);
      }
      ++v30;
      BOOL v27 = (v26 & 0x80u) != 0;
      if ((v26 & 0x80u) == 0) {
        unint64_t v32 = v26;
      }
      else {
        unint64_t v32 = v28;
      }
    }
    while (v30 < v32);
  }
  return result;
}

BOOL sub_BA4D0(uint64_t a1, int *a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 104);
  int v4 = *a2;
  if (a3 == 1 && v3 == v4)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v6) {
      uint64_t v6 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v6 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
    *(void *)(a1 + 136) = *(void *)(v6 + 32);
  }
  return v3 == v4;
}

uint64_t sub_BA554(uint64_t a1, long long *a2, void *a3, int a4)
{
  uint64_t v5 = *(char **)a2;
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)a2 == v4) {
    return 0;
  }
  if (v4 - (void)v5 == 8) {
    return *(void *)v5;
  }
  unint64_t v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v101 = 0;
  do
  {
    uint64_t v12 = *(void *)&v5[8 * v9];
    if (!v12) {
      goto LABEL_21;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) == 17) {
      goto LABEL_8;
    }
    uint64_t v5 = *(char **)a2;
    uint64_t v13 = *(void *)(*(void *)a2 + 8 * v9);
    if (!v13) {
      goto LABEL_21;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13) == 15) {
      goto LABEL_61;
    }
    uint64_t v5 = *(char **)a2;
    uint64_t v14 = *(void *)(*(void *)a2 + 8 * v9);
    if (!v14) {
      goto LABEL_21;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 32))(v14) == 142) {
      goto LABEL_61;
    }
    uint64_t v5 = *(char **)a2;
    uint64_t v15 = *(void *)(*(void *)a2 + 8 * v9);
    if (!v15) {
      goto LABEL_21;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) == 143)
    {
LABEL_61:
      uint64_t v52 = *(char **)a2;
      long long v53 = (char *)__p[1];
      if (__p[1] >= v101)
      {
        long long v55 = __p[0];
        int64_t v56 = (char *)__p[1] - (char *)__p[0];
        int64_t v57 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 61) {
LABEL_121:
        }
          sub_2E00();
        uint64_t v59 = v101 - (char *)__p[0];
        if ((v101 - (char *)__p[0]) >> 2 > v58) {
          unint64_t v58 = v59 >> 2;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v60 = v58;
        }
        if (v60)
        {
          if (v60 >> 61) {
LABEL_122:
          }
            sub_188D718();
          long long v61 = operator new(8 * v60);
        }
        else
        {
          long long v61 = 0;
        }
        long long v77 = &v61[8 * v57];
        uint64_t v78 = &v61[8 * v60];
        *long long v77 = *(void *)&v52[8 * v9];
        unint64_t v54 = v77 + 1;
        if (v53 != v55)
        {
          unint64_t v79 = v53 - v55 - 8;
          if (v79 < 0x58) {
            goto LABEL_128;
          }
          if ((unint64_t)(v53 - &v61[v56]) < 0x20) {
            goto LABEL_128;
          }
          uint64_t v80 = (v79 >> 3) + 1;
          uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v82 = &v53[-v81];
          long long v77 = (void *)((char *)v77 - v81);
          long long v83 = &v61[8 * v57 - 16];
          std::string::value_type v84 = v53 - 16;
          uint64_t v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v86 = *(_OWORD *)v84;
            *(v83 - 1) = *((_OWORD *)v84 - 1);
            *long long v83 = v86;
            v83 -= 2;
            v84 -= 32;
            v85 -= 4;
          }
          while (v85);
          long long v53 = v82;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_128:
            do
            {
              uint64_t v87 = *((void *)v53 - 1);
              v53 -= 8;
              *--long long v77 = v87;
            }
            while (v53 != v55);
          }
          long long v53 = (char *)__p[0];
        }
        __p[0] = v77;
        uint64_t v101 = v78;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)__p[1] = *(void *)&v52[8 * v9];
        unint64_t v54 = v53 + 8;
      }
      __p[1] = v54;
      unint64_t v88 = v9 + 1;
      std::string::value_type v90 = *(char **)a2;
      unint64_t v89 = (void *)*((void *)a2 + 1);
      if (v9 + 1 >= ((uint64_t)v89 - *(void *)a2) >> 3)
      {
LABEL_114:
        uint64_t v94 = v101;
        *(void **)a2 = __p[0];
        *((void *)a2 + 1) = v54;
        __p[0] = v90;
        __p[1] = v89;
        uint64_t v95 = (unsigned char *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v94;
        uint64_t v101 = v95;
        goto LABEL_115;
      }
      while (2)
      {
        uint64_t v91 = *(void *)&v90[8 * v88];
        if (v91 && (*(unsigned int (**)(uint64_t))(*(void *)v91 + 32))(v91) != 17)
        {
          uint64_t v92 = *(void *)&v90[8 * v88];
          if (!v92) {
            goto LABEL_105;
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v92 + 32))(v92) != 18)
          {
            uint64_t v93 = *(void *)&v90[8 * v88];
            if (v93) {
              (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
            }
LABEL_105:
            *(void *)&v90[8 * v88] = 0;
          }
        }
        ++v88;
        std::string::value_type v90 = *(char **)a2;
        unint64_t v89 = (void *)*((void *)a2 + 1);
        if (v88 >= ((uint64_t)v89 - *(void *)a2) >> 3)
        {
          unint64_t v54 = __p[1];
          goto LABEL_114;
        }
        continue;
      }
    }
    uint64_t v5 = *(char **)a2;
    uint64_t v16 = *(void *)(*(void *)a2 + 8 * v9);
    if (!v16
      || (int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16), v5 = *(char **)a2, v17 != 2)
      && ((uint64_t v18 = *(void *)&v5[8 * v9]) == 0
       || (v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18), uint64_t v5 = *(char **)a2, v19 != 1)))
    {
LABEL_21:
      if ((*(void *)(*a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9))
      {
        unint64_t v20 = (char *)__p[1];
        if (__p[1] >= v101)
        {
          long long v21 = (char *)__p[0];
          int64_t v22 = (char *)__p[1] - (char *)__p[0];
          int64_t v23 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            goto LABEL_121;
          }
          uint64_t v25 = v101 - (char *)__p[0];
          if ((v101 - (char *)__p[0]) >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            if (v26 >> 61) {
              goto LABEL_122;
            }
            BOOL v27 = operator new(8 * v26);
            unint64_t v28 = &v27[8 * v23];
            *unint64_t v28 = *(void *)&v5[8 * v9];
            uint64_t v10 = v28 + 1;
            if (v20 == v21)
            {
LABEL_32:
              __p[0] = v28;
              uint64_t v101 = &v27[8 * v26];
              if (!v20) {
                goto LABEL_7;
              }
LABEL_49:
              operator delete(v20);
LABEL_7:
              __p[1] = v10;
              goto LABEL_8;
            }
          }
          else
          {
            BOOL v27 = 0;
            unint64_t v28 = (void *)(8 * v23);
            *(void *)(8 * v23) = *(void *)&v5[8 * v9];
            uint64_t v10 = (void *)(8 * v23 + 8);
            if (v20 == v21) {
              goto LABEL_32;
            }
          }
          unint64_t v32 = v20 - 8 - v21;
          if (v32 < 0x58) {
            goto LABEL_127;
          }
          if ((unint64_t)(v20 - &v27[v22]) < 0x20) {
            goto LABEL_127;
          }
          uint64_t v33 = (v32 >> 3) + 1;
          uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v35 = &v20[-v34];
          unint64_t v28 = (void *)((char *)v28 - v34);
          std::string::size_type v36 = &v27[8 * v23 - 16];
          __darwin_ct_rune_t v37 = v20 - 16;
          uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *std::string::size_type v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 4;
          }
          while (v38);
          unint64_t v20 = v35;
          if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_127:
            do
            {
              uint64_t v40 = *((void *)v20 - 1);
              v20 -= 8;
              *--unint64_t v28 = v40;
            }
            while (v20 != v21);
          }
          unint64_t v20 = (char *)__p[0];
          __p[0] = v28;
          uint64_t v101 = &v27[8 * v26];
          if (!v20) {
            goto LABEL_7;
          }
          goto LABEL_49;
        }
        *(void *)__p[1] = *(void *)&v5[8 * v9];
        uint64_t v10 = v20 + 8;
        goto LABEL_7;
      }
    }
    uint64_t v29 = *(void *)&v5[8 * v9];
    if (v29 && (*(unsigned int (**)(uint64_t))(*(void *)v29 + 32))(v29) != 17)
    {
      uint64_t v30 = *(void *)&v5[8 * v9];
      if (v30)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 32))(v30) == 18) {
          goto LABEL_8;
        }
        uint64_t v31 = *(void *)&v5[8 * v9];
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
      }
      *(void *)&v5[8 * v9] = 0;
    }
LABEL_8:
    ++v9;
    uint64_t v5 = *(char **)a2;
    uint64_t v11 = *((void *)a2 + 1);
  }
  while (v9 < ((v11 - *(void *)a2) >> 3) - 1);
  uint64_t v41 = __p[1];
  if (__p[1] >= v101)
  {
    unint64_t v45 = __p[0];
    int64_t v46 = (char *)__p[1] - (char *)__p[0];
    int64_t v47 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v49 = v101 - (char *)__p[0];
    if ((v101 - (char *)__p[0]) >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 61) {
        sub_188D718();
      }
      long long v51 = operator new(8 * v50);
    }
    else
    {
      long long v51 = 0;
    }
    unint64_t v42 = &v51[8 * v47];
    std::string::size_type v43 = &v51[8 * v50];
    *(void *)unint64_t v42 = *(void *)(v11 - 8);
    __darwin_ct_rune_t v44 = v42 + 8;
    if (v41 != v45)
    {
      unint64_t v62 = v41 - v45 - 8;
      if (v62 < 0x58) {
        goto LABEL_129;
      }
      if ((unint64_t)(v41 - v51 - v46) < 0x20) {
        goto LABEL_129;
      }
      uint64_t v63 = (v62 >> 3) + 1;
      uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v65 = &v41[-v64];
      v42 -= v64;
      uint64_t v66 = &v51[8 * v47 - 16];
      unint64_t v67 = (long long *)(v41 - 16);
      uint64_t v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v69 = *v67;
        *(v66 - 1) = *(v67 - 1);
        *uint64_t v66 = v69;
        v66 -= 2;
        v67 -= 2;
        v68 -= 4;
      }
      while (v68);
      uint64_t v41 = v65;
      if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_129:
        do
        {
          uint64_t v70 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v42 - 1) = v70;
          v42 -= 8;
        }
        while (v41 != v45);
      }
      uint64_t v41 = __p[0];
    }
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *(void *)__p[1] = *(void *)(v11 - 8);
    unint64_t v42 = (char *)__p[0];
    std::string::size_type v43 = v101;
    __darwin_ct_rune_t v44 = v41 + 8;
  }
  long long v71 = *a2;
  *(void *)a2 = v42;
  *((void *)a2 + 1) = v44;
  *(_OWORD *)std::string __p = v71;
  uint64_t v72 = (unsigned char *)*((void *)a2 + 2);
  *((void *)a2 + 2) = v43;
  uint64_t v101 = v72;
  if (((*(void *)(*a3 + (((unint64_t)(a3[1] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*((unsigned char *)a3 + 8) - 1)) & 1) != 0
    || (unint64_t)(v44 - v42) > 8)
  {
LABEL_115:
    uint64_t v73 = a1;
    if (!*(unsigned char *)(a1 + 651)) {
      *(unsigned char *)(a1 + 651) = 1;
    }
    unint64_t v42 = *(char **)a2;
    __darwin_ct_rune_t v44 = (char *)*((void *)a2 + 1);
    if (&v44[-*(void *)a2] == (char *)&dword_8) {
      goto LABEL_118;
    }
LABEL_86:
    if (a4 && (v74 = sub_115C38(*((void *)v44 - 1)), uint64_t v73 = a1, v74))
    {
      int v99 = 91;
      uint64_t v75 = sub_D167C(a1 + 344, &v99, (char **)a2);
    }
    else
    {
      int v99 = 90;
      uint64_t v75 = sub_D167C(v73 + 344, &v99, (char **)a2);
    }
    uint64_t v6 = v75;
    std::string::size_type v76 = __p[0];
    if (__p[0])
    {
LABEL_119:
      __p[1] = v76;
      operator delete(v76);
    }
  }
  else
  {
    uint64_t v73 = a1;
    if (v44 - v42 != 8) {
      goto LABEL_86;
    }
LABEL_118:
    uint64_t v6 = *(void *)v42;
    std::string::size_type v76 = __p[0];
    if (__p[0]) {
      goto LABEL_119;
    }
  }
  return v6;
}

void sub_BAD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BADB8(std::string::size_type a1, int a2)
{
  uint64_t v64 = 0;
  uint64_t v5 = (_DWORD *)(a1 + 104);
  int v4 = *(_DWORD *)(a1 + 104);
  switch(v4)
  {
    case 6:
      sub_5E5C(&__str, "ERR200 - Premature end of expression[1]");
      sub_B1D70(0x64E8u, (unint64_t)&v60);
      uint64_t v6 = std::string::insert(&v60, 0, "exprtk.hpp:");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v5, &__str, &__p, (uint64_t)&v65);
      sub_B1CB0((void *)a1, (uint64_t)&v65);
      sub_B1ED4((uint64_t)&v65);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_3;
    case 7:
      uint64_t v63 = 0;
      uint64_t v11 = *(unsigned __int8 **)(a1 + 112);
      uint64_t v12 = *(unsigned __int8 *)(a1 + 135);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a1 + 120);
      }
      else {
        uint64_t v11 = (unsigned __int8 *)(a1 + 112);
      }
      unint64_t v65 = v11;
      if (sub_BECC4(&v65, &v11[v12], (double *)&v63)) {
        operator new();
      }
      std::operator+<char>();
      unint64_t v20 = std::string::append(&__p, "' to a number");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      memset(&v59, 0, sizeof(v59));
      std::string::push_back(&v59, 53);
      std::string::push_back(&v59, 49);
      std::string::push_back(&v59, 55);
      std::string::push_back(&v59, 53);
      std::string::push_back(&v59, 50);
      std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v23 = &v59;
      }
      else {
        int64_t v23 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v59.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        unint64_t v24 = (std::string *)((char *)v23 + size - 1);
        if (v24 > v23)
        {
          uint64_t v25 = &v23->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v26 = *(v25 - 1);
            *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
            v24->__r_.__value_.__s.__data_[0] = v26;
            unint64_t v24 = (std::string *)((char *)v24 - 1);
            BOOL v27 = v25++ >= (char *)v24;
          }
          while (!v27);
        }
      }
      unint64_t v28 = std::string::insert(&v59, 0, "exprtk.hpp:");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v67 = -1;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      uint64_t v74 = 0;
      int v68 = 4;
      LODWORD(v65) = *v5;
      std::string::operator=(&v66, (const std::string *)(a1 + 112));
      uint64_t v67 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v69, &__str);
      std::string::operator=((std::string *)((char *)&v70 + 8), &v60);
      uint64_t v30 = *(void *)(a1 + 568);
      uint64_t v31 = *(void *)(a1 + 560);
      uint64_t v32 = 30 * ((v30 - v31) >> 3) - 1;
      if (v30 == v31) {
        uint64_t v32 = 0;
      }
      if (v32 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v31 = *(void *)(a1 + 560);
        uint64_t v30 = *(void *)(a1 + 568);
      }
      if (v30 == v31)
      {
        uint64_t v34 = 0;
      }
      else
      {
        unint64_t v33 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v34 = *(void *)(v31 + 8 * (v33 / 0x1E)) + 136 * (v33 % 0x1E);
      }
      sub_B5158(v34, (uint64_t)&v65);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v73) < 0)
      {
        operator delete((void *)v72);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_101:
          if ((SBYTE7(v70) & 0x80000000) == 0) {
            goto LABEL_102;
          }
          goto LABEL_110;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_101;
      }
      operator delete(*((void **)&v70 + 1));
      if ((SBYTE7(v70) & 0x80000000) == 0)
      {
LABEL_102:
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_103;
        }
        goto LABEL_111;
      }
LABEL_110:
      operator delete((void *)v69);
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_103:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_104;
        }
        goto LABEL_112;
      }
LABEL_111:
      operator delete(v66.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_104:
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_105;
        }
        goto LABEL_113;
      }
LABEL_112:
      operator delete(v60.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_105:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_106;
        }
        goto LABEL_114;
      }
LABEL_113:
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_106:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_115;
      }
LABEL_114:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_115:
      operator delete(__p.__r_.__value_.__l.__data_);
      return 0;
    case 8:
      uint64_t v13 = sub_BD2D4(a1);
      goto LABEL_28;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 44:
      goto LABEL_10;
    case 40:
      std::string::size_type v14 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v14) {
        std::string::size_type v14 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v14 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v14;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v14 + 8));
      *(void *)(a1 + 136) = *(void *)(v14 + 32);
      uint64_t result = sub_B7FE4(a1, 0);
      uint64_t v64 = (unsigned __int8 *)result;
      if (!result) {
        return result;
      }
      if (*v5 == 41)
      {
        std::string::size_type v35 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v35) {
          std::string::size_type v35 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v35 + 40;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v35;
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v35 + 8));
        *(void *)(a1 + 136) = *(void *)(v35 + 32);
        LODWORD(v65) = 40;
        if (sub_BE034(a1, (int *)&v65, (uint64_t *)&v64)) {
          goto LABEL_29;
        }
        goto LABEL_145;
      }
      std::operator+<char>();
      std::string::size_type v36 = std::string::append(&__p, "'");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      memset(&v59, 0, sizeof(v59));
      std::string::push_back(&v59, 50);
      std::string::push_back(&v59, 52);
      std::string::push_back(&v59, 55);
      std::string::push_back(&v59, 53);
      std::string::push_back(&v59, 50);
      std::string::size_type v38 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v39 = &v59;
      }
      else {
        long long v39 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v38 = v59.__r_.__value_.__l.__size_;
      }
      if (v38)
      {
        uint64_t v40 = (std::string *)((char *)v39 + v38 - 1);
        if (v40 > v39)
        {
          uint64_t v41 = &v39->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v42 = *(v41 - 1);
            *(v41 - 1) = v40->__r_.__value_.__s.__data_[0];
            v40->__r_.__value_.__s.__data_[0] = v42;
            uint64_t v40 = (std::string *)((char *)v40 - 1);
            BOOL v27 = v41++ >= (char *)v40;
          }
          while (!v27);
        }
      }
      std::string::size_type v43 = std::string::insert(&v59, 0, "exprtk.hpp:");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v66.__r_.__value_.__s + 23) = 0;
      v66.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v67 = -1;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      uint64_t v74 = 0;
      int v68 = 1;
      LODWORD(v65) = *v5;
      std::string::operator=(&v66, (const std::string *)(a1 + 112));
      uint64_t v67 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v69, &__str);
      std::string::operator=((std::string *)((char *)&v70 + 8), &v60);
      uint64_t v45 = *(void *)(a1 + 568);
      uint64_t v46 = *(void *)(a1 + 560);
      uint64_t v47 = 30 * ((v45 - v46) >> 3) - 1;
      if (v45 == v46) {
        uint64_t v47 = 0;
      }
      if (v47 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v46 = *(void *)(a1 + 560);
        uint64_t v45 = *(void *)(a1 + 568);
      }
      if (v45 == v46)
      {
        uint64_t v49 = 0;
      }
      else
      {
        unint64_t v48 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v49 = *(void *)(v46 + 8 * (v48 / 0x1E)) + 136 * (v48 % 0x1E);
      }
      sub_B5158(v49, (uint64_t)&v65);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v73) < 0)
      {
        operator delete((void *)v72);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_122:
          if ((SBYTE7(v70) & 0x80000000) == 0) {
            goto LABEL_123;
          }
          goto LABEL_132;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_122;
      }
      operator delete(*((void **)&v70 + 1));
      if ((SBYTE7(v70) & 0x80000000) == 0)
      {
LABEL_123:
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_124;
        }
        goto LABEL_133;
      }
LABEL_132:
      operator delete((void *)v69);
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_124:
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_125;
        }
        goto LABEL_134;
      }
LABEL_133:
      operator delete(v66.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_125:
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_126;
        }
        goto LABEL_135;
      }
LABEL_134:
      operator delete(v60.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_126:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_127;
        }
        goto LABEL_136;
      }
LABEL_135:
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_127:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_128;
        }
        goto LABEL_137;
      }
LABEL_136:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_128:
        uint64_t result = (uint64_t)v64;
        if (!v64) {
          return result;
        }
        goto LABEL_138;
      }
LABEL_137:
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t result = (uint64_t)v64;
      if (!v64) {
        return result;
      }
LABEL_138:
      if ((*(unsigned int (**)(uint64_t))(*(void *)result + 32))(result) == 17) {
        return 0;
      }
      uint64_t result = (uint64_t)v64;
      if (v64)
      {
        if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)v64 + 32))(v64) == 18) {
          return 0;
        }
        uint64_t result = (uint64_t)v64;
        if (v64)
        {
          (*(void (**)(unsigned __int8 *))(*(void *)v64 + 8))(v64);
          return 0;
        }
      }
      return result;
    case 43:
      sub_B3BF8(a1);
      uint64_t v13 = sub_B7FE4(a1, 13);
      goto LABEL_28;
    case 45:
      sub_B3BF8(a1);
      uint64_t v15 = sub_B7FE4(a1, 11);
      uint64_t v64 = (unsigned __int8 *)v15;
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v16 = (unsigned __int8 *)v15;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) != 75) {
        goto LABEL_27;
      }
      if ((sub_BE590(a1, (uint64_t *)&v64) & 1) == 0)
      {
        uint64_t v16 = v64;
LABEL_27:
        LODWORD(__str.__r_.__value_.__l.__data_) = 52;
        unint64_t v65 = v16;
        uint64_t v13 = sub_DC734(a1 + 344, (int *)&__str, (uint64_t *)&v65);
LABEL_28:
        uint64_t v64 = (unsigned __int8 *)v13;
      }
      goto LABEL_29;
    default:
      if (v4 == 91)
      {
        std::string::size_type v19 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v19) {
          std::string::size_type v19 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v19 + 40;
        }
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v19;
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v19 + 8));
        *(void *)(a1 + 136) = *(void *)(v19 + 32);
        uint64_t result = sub_B7FE4(a1, 0);
        uint64_t v64 = (unsigned __int8 *)result;
        if (!result) {
          return result;
        }
        if (*v5 == 93)
        {
          std::string::size_type v50 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) == v50) {
            std::string::size_type v50 = a1 + 40;
          }
          else {
            *(void *)(a1 + 24) = v50 + 40;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v50;
          std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v50 + 8));
          *(void *)(a1 + 136) = *(void *)(v50 + 32);
          LODWORD(v65) = 91;
          if ((sub_BE034(a1, (int *)&v65, (uint64_t *)&v64) & 1) == 0) {
            goto LABEL_145;
          }
          goto LABEL_29;
        }
        std::operator+<char>();
        long long v51 = std::string::append(&__p, "'");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        sub_B1D70(0x64A7u, (unint64_t)&v59);
        long long v53 = std::string::insert(&v59, 0, "exprtk.hpp:");
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v5, &__str, &v60, (uint64_t)&v65);
        sub_B1CB0((void *)a1, (uint64_t)&v65);
        sub_B1ED4((uint64_t)&v65);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v60.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_90:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_91;
            }
            goto LABEL_150;
          }
        }
        else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_90;
        }
        operator delete(v59.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_91:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_92:
            sub_BBE90(a1 + 432, (uint64_t *)&v64, 0);
            return 0;
          }
LABEL_151:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_92;
        }
LABEL_150:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_92;
        }
        goto LABEL_151;
      }
      if (v4 != 123)
      {
LABEL_10:
        sub_5E5C(&__str, "ERR201 - Premature end of expression[2]");
        sub_B1D70(0x64F2u, (unint64_t)&v60);
        unint64_t v9 = std::string::insert(&v60, 0, "exprtk.hpp:");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v5, &__str, &__p, (uint64_t)&v65);
        sub_B1CB0((void *)a1, (uint64_t)&v65);
        sub_B1ED4((uint64_t)&v65);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_3:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
LABEL_11:
          if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_12:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return 0;
            }
            goto LABEL_13;
          }
        }
        operator delete(v60.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
LABEL_13:
        operator delete(__str.__r_.__value_.__l.__data_);
        return 0;
      }
      std::string::size_type v8 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v8) {
        std::string::size_type v8 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v8 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v8;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v8 + 8));
      *(void *)(a1 + 136) = *(void *)(v8 + 32);
      uint64_t result = sub_B7FE4(a1, 0);
      uint64_t v64 = (unsigned __int8 *)result;
      if (result)
      {
        LODWORD(v65) = 125;
        if (sub_BA4D0(a1, (int *)&v65, 1))
        {
          LODWORD(v65) = 123;
          if ((sub_BE034(a1, (int *)&v65, (uint64_t *)&v64) & 1) == 0)
          {
LABEL_145:
            sub_BBE90(a1 + 432, (uint64_t *)&v64, 0);
            return 0;
          }
LABEL_29:
          uint64_t v17 = (uint64_t)v64;
          if (!a2 && v64)
          {
            if (*v5 != 63) {
              goto LABEL_34;
            }
            uint64_t v17 = sub_BC348(a1, (uint64_t)v64);
            uint64_t v64 = (unsigned __int8 *)v17;
          }
          if (!v17) {
            return (uint64_t)v64;
          }
LABEL_34:
          if (!*(void *)(a1 + 592) && sub_115C38(v17) && *v5 == 91) {
            return 0;
          }
          return (uint64_t)v64;
        }
        std::operator+<char>();
        long long v55 = std::string::append(&__p, "'");
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        sub_B1D70(0x64C0u, (unint64_t)&v59);
        int64_t v57 = std::string::insert(&v59, 0, "exprtk.hpp:");
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v5, &__str, &v60, (uint64_t)&v65);
        sub_B1CB0((void *)a1, (uint64_t)&v65);
        sub_B1ED4((uint64_t)&v65);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v60.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_95:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_96;
            }
LABEL_154:
            operator delete(__str.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_92;
            }
            goto LABEL_151;
          }
        }
        else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_95;
        }
        operator delete(v59.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_96:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_92;
          }
          goto LABEL_151;
        }
        goto LABEL_154;
      }
      return result;
  }
}

void sub_BBBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a35 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a28 & 0x80000000) == 0) {
LABEL_11:
    }
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(a23);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t sub_BBE90(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if (result != 17)
    {
      uint64_t result = *a2;
      if (!*a2
        || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), result != 18))
      {
        if ((a3 & 1) == 0)
        {
          uint64_t result = *a2;
          if (*a2) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          *a2 = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_BBF68@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 2:
      a2[23] = 1;
      *(_WORD *)a2 = 43;
      break;
    case 3:
      a2[23] = 1;
      *(_WORD *)a2 = 45;
      break;
    case 4:
      a2[23] = 1;
      *(_WORD *)a2 = 42;
      break;
    case 5:
      a2[23] = 1;
      *(_WORD *)a2 = 47;
      break;
    case 6:
      a2[23] = 1;
      *(_WORD *)a2 = 37;
      break;
    case 7:
      a2[23] = 1;
      *(_WORD *)a2 = 94;
      break;
    case 14:
      a2[23] = 1;
      *(_WORD *)a2 = 60;
      break;
    case 15:
      a2[23] = 2;
      strcpy(a2, "<=");
      break;
    case 16:
      a2[23] = 2;
      strcpy(a2, "==");
      break;
    case 17:
      a2[23] = 1;
      *(_WORD *)a2 = 61;
      break;
    case 18:
      a2[23] = 2;
      strcpy(a2, "!=");
      break;
    case 19:
      a2[23] = 2;
      strcpy(a2, "<>");
      break;
    case 20:
      a2[23] = 2;
      strcpy(a2, ">=");
      break;
    case 21:
      a2[23] = 1;
      *(_WORD *)a2 = 62;
      break;
    case 81:
      a2[23] = 2;
      strcpy(a2, ":=");
      break;
    case 82:
      a2[23] = 2;
      strcpy(a2, "+=");
      break;
    case 83:
      a2[23] = 2;
      strcpy(a2, "-=");
      break;
    case 84:
      a2[23] = 2;
      strcpy(a2, "*=");
      break;
    case 85:
      a2[23] = 2;
      strcpy(a2, "/=");
      break;
    case 86:
      a2[23] = 2;
      strcpy(a2, "%=");
      break;
    default:
      a2[23] = 3;
      *(_DWORD *)a2 = 4271950;
      break;
  }
  return result;
}

const void *sub_BC2BC(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (*a3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = v4;
  uint64_t result = sub_DC9C8(a1, a2, &v10);
  uint64_t v9 = v11;
  *a3 = v10;
  *a4 = v9;
  return result;
}

uint64_t sub_BC348(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B92A0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR046 - Encountered invalid condition branch for ternary if-statement");
    memset(&v69, 0, sizeof(v69));
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 48);
    std::string::push_back(&v69, 55);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v69;
    }
    else {
      uint64_t v6 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v69.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v7 = (std::string *)((char *)v6 + size - 1);
      if (v7 > v6)
      {
        std::string::size_type v8 = &v6->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v9 = *(v8 - 1);
          *(v8 - 1) = v7->__r_.__value_.__s.__data_[0];
          v7->__r_.__value_.__s.__data_[0] = v9;
          long long v7 = (std::string *)((char *)v7 - 1);
          BOOL v10 = v8++ >= (char *)v7;
        }
        while (!v10);
      }
    }
    uint64_t v11 = std::string::insert(&v69, 0, "exprtk.hpp:");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
    v73.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v74 = -1;
    *(_OWORD *)std::string::size_type v76 = 0u;
    *(_OWORD *)long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    int v75 = 1;
    int v72 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v73, (const std::string *)(a1 + 112));
    uint64_t v74 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v76, &__str);
    std::string::operator=((std::string *)&v77[1], &v70);
    uint64_t v13 = *(void *)(a1 + 568);
    uint64_t v14 = *(void *)(a1 + 560);
    uint64_t v15 = 30 * ((v13 - v14) >> 3) - 1;
    if (v13 == v14) {
      uint64_t v15 = 0;
    }
    if (v15 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v14 = *(void *)(a1 + 560);
      uint64_t v13 = *(void *)(a1 + 568);
    }
    if (v13 == v14)
    {
      uint64_t v17 = 0;
    }
    else
    {
      unint64_t v16 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v17 = *(void *)(v14 + 8 * (v16 / 0x1E)) + 136 * (v16 % 0x1E);
    }
    sub_B5158(v17, (uint64_t)&v72);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v80) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v78) & 0x80000000) == 0)
      {
LABEL_40:
        if ((SHIBYTE(v77[0]) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_48;
      }
    }
    else if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(v77[1]);
    if ((SHIBYTE(v77[0]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v76[0]);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v70.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_44:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_52;
      }
      return 0;
    }
LABEL_51:
    operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_52:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  if (*(_DWORD *)(a1 + 104) != 63)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9810;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR047 - Expected '?' after condition of ternary if-statement");
    memset(&v69, 0, sizeof(v69));
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 55);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::size_type v18 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = &v69;
    }
    else {
      std::string::size_type v19 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v18 = v69.__r_.__value_.__l.__size_;
    }
    if (v18)
    {
      unint64_t v20 = (std::string *)((char *)v19 + v18 - 1);
      if (v20 > v19)
      {
        long long v21 = &v19->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v22 = *(v21 - 1);
          *(v21 - 1) = v20->__r_.__value_.__s.__data_[0];
          v20->__r_.__value_.__s.__data_[0] = v22;
          unint64_t v20 = (std::string *)((char *)v20 - 1);
          BOOL v10 = v21++ >= (char *)v20;
        }
        while (!v10);
      }
    }
    int64_t v23 = std::string::insert(&v69, 0, "exprtk.hpp:");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
    v73.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v74 = -1;
    *(_OWORD *)std::string::size_type v76 = 0u;
    *(_OWORD *)long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    int v75 = 1;
    int v72 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v73, (const std::string *)(a1 + 112));
    uint64_t v74 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v76, &__str);
    std::string::operator=((std::string *)&v77[1], &v70);
    uint64_t v25 = *(void *)(a1 + 568);
    uint64_t v26 = *(void *)(a1 + 560);
    uint64_t v27 = 30 * ((v25 - v26) >> 3) - 1;
    if (v25 == v26) {
      uint64_t v27 = 0;
    }
    if (v27 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v26 = *(void *)(a1 + 560);
      uint64_t v25 = *(void *)(a1 + 568);
    }
    if (v25 == v26)
    {
      uint64_t v29 = 0;
    }
    else
    {
      unint64_t v28 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v29 = *(void *)(v26 + 8 * (v28 / 0x1E)) + 136 * (v28 % 0x1E);
    }
LABEL_92:
    sub_B5158(v29, (uint64_t)&v72);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v80) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v78) & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v77[0]) & 0x80000000) == 0) {
          goto LABEL_95;
        }
        goto LABEL_110;
      }
    }
    else if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      goto LABEL_94;
    }
    operator delete(v77[1]);
    if ((SHIBYTE(v77[0]) & 0x80000000) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_96;
      }
      goto LABEL_111;
    }
LABEL_110:
    operator delete(v76[0]);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_96:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_97;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_97:
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_98;
      }
      goto LABEL_113;
    }
LABEL_112:
    operator delete(v70.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_99:
        uint64_t v31 = 0;
        goto LABEL_100;
      }
LABEL_114:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_99;
    }
LABEL_113:
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_114;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  uint64_t v30 = sub_B7FE4(a1, 0);
  if (!v30)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR048 - Failed to parse consequent for ternary if-statement");
    memset(&v69, 0, sizeof(v69));
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::push_back(&v69, 55);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::size_type v33 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v69;
    }
    else {
      uint64_t v34 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v33 = v69.__r_.__value_.__l.__size_;
    }
    if (v33)
    {
      std::string::size_type v35 = (std::string *)((char *)v34 + v33 - 1);
      if (v35 > v34)
      {
        std::string::size_type v36 = &v34->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v37 = *(v36 - 1);
          *(v36 - 1) = v35->__r_.__value_.__s.__data_[0];
          v35->__r_.__value_.__s.__data_[0] = v37;
          std::string::size_type v35 = (std::string *)((char *)v35 - 1);
          BOOL v10 = v36++ >= (char *)v35;
        }
        while (!v10);
      }
    }
    std::string::size_type v38 = std::string::insert(&v69, 0, "exprtk.hpp:");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
    v73.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v74 = -1;
    *(_OWORD *)std::string::size_type v76 = 0u;
    *(_OWORD *)long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    int v75 = 1;
    int v72 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v73, (const std::string *)(a1 + 112));
    uint64_t v74 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v76, &__str);
    std::string::operator=((std::string *)&v77[1], &v70);
    uint64_t v40 = *(void *)(a1 + 568);
    uint64_t v41 = *(void *)(a1 + 560);
    uint64_t v42 = 30 * ((v40 - v41) >> 3) - 1;
    if (v40 == v41) {
      uint64_t v42 = 0;
    }
    if (v42 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v41 = *(void *)(a1 + 560);
      uint64_t v40 = *(void *)(a1 + 568);
    }
    if (v40 == v41)
    {
      uint64_t v29 = 0;
    }
    else
    {
      unint64_t v43 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v29 = *(void *)(v41 + 8 * (v43 / 0x1E)) + 136 * (v43 % 0x1E);
    }
    goto LABEL_92;
  }
  uint64_t v31 = v30;
  if (*(_DWORD *)(a1 + 104) != 58)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99D0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR049 - Expected ':' between ternary if-statement consequent and alternative");
    memset(&v69, 0, sizeof(v69));
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 51);
    std::string::push_back(&v69, 55);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::size_type v44 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v45 = &v69;
    }
    else {
      uint64_t v45 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v44 = v69.__r_.__value_.__l.__size_;
    }
    if (v44)
    {
      uint64_t v46 = (std::string *)((char *)v45 + v44 - 1);
      if (v46 > v45)
      {
        uint64_t v47 = &v45->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v48 = *(v47 - 1);
          *(v47 - 1) = v46->__r_.__value_.__s.__data_[0];
          v46->__r_.__value_.__s.__data_[0] = v48;
          uint64_t v46 = (std::string *)((char *)v46 - 1);
          BOOL v10 = v47++ >= (char *)v46;
        }
        while (!v10);
      }
    }
    uint64_t v49 = std::string::insert(&v69, 0, "exprtk.hpp:");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
    v73.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v74 = -1;
    *(_OWORD *)std::string::size_type v76 = 0u;
    *(_OWORD *)long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    int v75 = 1;
    int v72 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v73, (const std::string *)(a1 + 112));
    uint64_t v74 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v76, &__str);
    std::string::operator=((std::string *)&v77[1], &v70);
    uint64_t v51 = *(void *)(a1 + 568);
    uint64_t v52 = *(void *)(a1 + 560);
    uint64_t v53 = 30 * ((v51 - v52) >> 3) - 1;
    if (v51 == v52) {
      uint64_t v53 = 0;
    }
    if (v53 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v52 = *(void *)(a1 + 560);
      uint64_t v51 = *(void *)(a1 + 568);
    }
    if (v51 == v52)
    {
      uint64_t v55 = 0;
    }
    else
    {
      unint64_t v54 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v55 = *(void *)(v52 + 8 * (v54 / 0x1E)) + 136 * (v54 % 0x1E);
    }
LABEL_138:
    sub_B5158(v55, (uint64_t)&v72);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v80) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v78) & 0x80000000) == 0)
      {
LABEL_140:
        if ((SHIBYTE(v77[0]) & 0x80000000) == 0) {
          goto LABEL_141;
        }
        goto LABEL_148;
      }
    }
    else if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      goto LABEL_140;
    }
    operator delete(v77[1]);
    if ((SHIBYTE(v77[0]) & 0x80000000) == 0)
    {
LABEL_141:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_142;
      }
      goto LABEL_149;
    }
LABEL_148:
    operator delete(v76[0]);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_150;
    }
LABEL_149:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_144;
      }
      goto LABEL_151;
    }
LABEL_150:
    operator delete(v70.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
LABEL_152:
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_100:
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
      }
      if (v31
        && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)v31 + 32))(v31) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      return 0;
    }
LABEL_151:
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_152;
  }
  uint64_t v32 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v32) {
    uint64_t v32 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v32 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  uint64_t v57 = sub_B7FE4(a1, 0);
  if (!v57)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9810;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR050 - Failed to parse alternative for ternary if-statement");
    memset(&v69, 0, sizeof(v69));
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 52);
    std::string::push_back(&v69, 55);
    std::string::push_back(&v69, 49);
    std::string::push_back(&v69, 50);
    std::string::size_type v58 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v59 = &v69;
    }
    else {
      std::string v59 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v58 = v69.__r_.__value_.__l.__size_;
    }
    if (v58)
    {
      std::string v60 = (std::string *)((char *)v59 + v58 - 1);
      if (v60 > v59)
      {
        long long v61 = &v59->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v62 = *(v61 - 1);
          *(v61 - 1) = v60->__r_.__value_.__s.__data_[0];
          v60->__r_.__value_.__s.__data_[0] = v62;
          std::string v60 = (std::string *)((char *)v60 - 1);
          BOOL v10 = v61++ >= (char *)v60;
        }
        while (!v10);
      }
    }
    uint64_t v63 = std::string::insert(&v69, 0, "exprtk.hpp:");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v73.__r_.__value_.__s + 23) = 0;
    v73.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v74 = -1;
    *(_OWORD *)std::string::size_type v76 = 0u;
    *(_OWORD *)long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    int v75 = 1;
    int v72 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v73, (const std::string *)(a1 + 112));
    uint64_t v74 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v76, &__str);
    std::string::operator=((std::string *)&v77[1], &v70);
    uint64_t v65 = *(void *)(a1 + 568);
    uint64_t v66 = *(void *)(a1 + 560);
    uint64_t v67 = 30 * ((v65 - v66) >> 3) - 1;
    if (v65 == v66) {
      uint64_t v67 = 0;
    }
    if (v67 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v66 = *(void *)(a1 + 560);
      uint64_t v65 = *(void *)(a1 + 568);
    }
    if (v65 == v66)
    {
      uint64_t v55 = 0;
    }
    else
    {
      unint64_t v68 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v55 = *(void *)(v66 + 8 * (v68 / 0x1E)) + 136 * (v68 % 0x1E);
    }
    goto LABEL_138;
  }

  return sub_1C1350(a1 + 344, a2, v31, v57);
}

void sub_BD1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_BD2D4(std::string::size_type a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5D60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5D60))
  {
    sub_5E5C(&qword_24F5D48, "if");
    __cxa_guard_release(&qword_24F5D60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5D80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5D80))
  {
    sub_5E5C(&qword_24F5D68, "while");
    __cxa_guard_release(&qword_24F5D80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5DA0))
  {
    sub_5E5C(&qword_24F5D88, "repeat");
    __cxa_guard_release(&qword_24F5DA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5DC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5DC0))
  {
    sub_5E5C(&qword_24F5DA8, "for");
    __cxa_guard_release(&qword_24F5DC0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5DE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5DE0))
  {
    sub_5E5C(&qword_24F5DC8, "switch");
    __cxa_guard_release(&qword_24F5DE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5E00))
  {
    sub_5E5C(&qword_24F5DE8, "null");
    __cxa_guard_release(&qword_24F5E00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5E20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5E20))
  {
    sub_5E5C(qword_24F5E08, "break");
    __cxa_guard_release(&qword_24F5E20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5E40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5E40))
  {
    sub_5E5C(qword_24F5E28, "continue");
    __cxa_guard_release(&qword_24F5E40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5E60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5E60))
  {
    sub_5E5C(qword_24F5E48, "var");
    __cxa_guard_release(&qword_24F5E60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5E80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5E80))
  {
    sub_5E5C(qword_24F5E68, "swap");
    __cxa_guard_release(&qword_24F5E80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5EA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5EA0))
  {
    sub_5E5C(qword_24F5E88, "return");
    __cxa_guard_release(&qword_24F5EA0);
  }
  std::string::size_type v2 = a1 + 112;
  if (sub_BF5F0(a1, a1 + 112))
  {
    return sub_BFDF0(a1);
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 135);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 120);
  }
  if ((unint64_t)(v4 - 10) >= 0xFFFFFFFFFFFFFFF9
    && (!*(void *)(a1 + 216) || (uint64_t *)(a1 + 208) == sub_ADE40(a1 + 200, a1 + 112))
    && (uint64_t *)(a1 + 712) != sub_ADE40(a1 + 704, a1 + 112))
  {
    return sub_C0E34(a1);
  }
  BOOL v5 = *(char *)(a1 + 135) < 0;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 135);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 120);
  }
  uint64_t v7 = qword_24F5D50;
  if (byte_24F5D5F >= 0) {
    uint64_t v7 = byte_24F5D5F;
  }
  if (v6 == v7)
  {
    if (v6)
    {
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = v5 ? *(void *)v2 : a1 + 112;
        __darwin_ct_rune_t v10 = __tolower(*(char *)(v9 + v8));
        uint64_t v11 = byte_24F5D5F >= 0 ? &qword_24F5D48 : (uint64_t *)qword_24F5D48;
        if (v10 != __tolower(*((char *)v11 + v8))) {
          break;
        }
        ++v8;
        BOOL v5 = *(char *)(a1 + 135) < 0;
        unint64_t v12 = *(unsigned __int8 *)(a1 + 135);
        if ((v12 & 0x80u) != 0) {
          unint64_t v12 = *(void *)(a1 + 120);
        }
        if (v8 >= v12) {
          goto LABEL_42;
        }
      }
    }
    else
    {
LABEL_42:
      if (!*(void *)(a1 + 240) || (uint64_t *)(a1 + 232) == sub_ADE40(a1 + 224, a1 + 112))
      {
        return sub_C1BF4(a1);
      }
    }
  }
  BOOL v13 = *(char *)(a1 + 135) < 0;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 135);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a1 + 120);
  }
  uint64_t v15 = qword_24F5D70;
  if (byte_24F5D7F >= 0) {
    uint64_t v15 = byte_24F5D7F;
  }
  if (v14 == v15)
  {
    if (v14)
    {
      unint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = v13 ? *(void *)v2 : a1 + 112;
        __darwin_ct_rune_t v18 = __tolower(*(char *)(v17 + v16));
        std::string::size_type v19 = byte_24F5D7F >= 0 ? &qword_24F5D68 : (uint64_t *)qword_24F5D68;
        if (v18 != __tolower(*((char *)v19 + v16))) {
          break;
        }
        ++v16;
        BOOL v13 = *(char *)(a1 + 135) < 0;
        unint64_t v20 = *(unsigned __int8 *)(a1 + 135);
        if ((v20 & 0x80u) != 0) {
          unint64_t v20 = *(void *)(a1 + 120);
        }
        if (v16 >= v20) {
          goto LABEL_61;
        }
      }
    }
    else
    {
LABEL_61:
      if (!*(void *)(a1 + 240) || (uint64_t *)(a1 + 232) == sub_ADE40(a1 + 224, a1 + 112))
      {
        return sub_C2770(a1);
      }
    }
  }
  BOOL v21 = *(char *)(a1 + 135) < 0;
  uint64_t v22 = *(unsigned __int8 *)(a1 + 135);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a1 + 120);
  }
  uint64_t v23 = qword_24F5D90;
  if (byte_24F5D9F >= 0) {
    uint64_t v23 = byte_24F5D9F;
  }
  if (v22 == v23)
  {
    if (v22)
    {
      unint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = v21 ? *(void *)v2 : a1 + 112;
        __darwin_ct_rune_t v26 = __tolower(*(char *)(v25 + v24));
        uint64_t v27 = byte_24F5D9F >= 0 ? &qword_24F5D88 : (uint64_t *)qword_24F5D88;
        if (v26 != __tolower(*((char *)v27 + v24))) {
          break;
        }
        ++v24;
        BOOL v21 = *(char *)(a1 + 135) < 0;
        unint64_t v28 = *(unsigned __int8 *)(a1 + 135);
        if ((v28 & 0x80u) != 0) {
          unint64_t v28 = *(void *)(a1 + 120);
        }
        if (v24 >= v28) {
          goto LABEL_80;
        }
      }
    }
    else
    {
LABEL_80:
      if (!*(void *)(a1 + 240) || (uint64_t *)(a1 + 232) == sub_ADE40(a1 + 224, a1 + 112))
      {
        return sub_C385C(a1);
      }
    }
  }
  BOOL v29 = *(char *)(a1 + 135) < 0;
  uint64_t v30 = *(unsigned __int8 *)(a1 + 135);
  if ((v30 & 0x80u) != 0) {
    uint64_t v30 = *(void *)(a1 + 120);
  }
  uint64_t v31 = qword_24F5DB0;
  if (byte_24F5DBF >= 0) {
    uint64_t v31 = byte_24F5DBF;
  }
  if (v30 == v31)
  {
    if (v30)
    {
      unint64_t v32 = 0;
      while (1)
      {
        uint64_t v33 = v29 ? *(void *)v2 : a1 + 112;
        __darwin_ct_rune_t v34 = __tolower(*(char *)(v33 + v32));
        std::string::size_type v35 = byte_24F5DBF >= 0 ? &qword_24F5DA8 : (uint64_t *)qword_24F5DA8;
        if (v34 != __tolower(*((char *)v35 + v32))) {
          break;
        }
        ++v32;
        BOOL v29 = *(char *)(a1 + 135) < 0;
        unint64_t v36 = *(unsigned __int8 *)(a1 + 135);
        if ((v36 & 0x80u) != 0) {
          unint64_t v36 = *(void *)(a1 + 120);
        }
        if (v32 >= v36) {
          goto LABEL_99;
        }
      }
    }
    else
    {
LABEL_99:
      if (!*(void *)(a1 + 240) || (uint64_t *)(a1 + 232) == sub_ADE40(a1 + 224, a1 + 112))
      {
        return sub_C5884(a1);
      }
    }
  }
  BOOL v37 = *(char *)(a1 + 135) < 0;
  uint64_t v38 = *(unsigned __int8 *)(a1 + 135);
  if ((v38 & 0x80u) != 0) {
    uint64_t v38 = *(void *)(a1 + 120);
  }
  uint64_t v39 = qword_24F5DD0;
  if (byte_24F5DDF >= 0) {
    uint64_t v39 = byte_24F5DDF;
  }
  if (v38 == v39)
  {
    if (v38)
    {
      unint64_t v40 = 0;
      while (1)
      {
        uint64_t v41 = v37 ? *(void *)v2 : a1 + 112;
        __darwin_ct_rune_t v42 = __tolower(*(char *)(v41 + v40));
        unint64_t v43 = byte_24F5DDF >= 0 ? &qword_24F5DC8 : (uint64_t *)qword_24F5DC8;
        if (v42 != __tolower(*((char *)v43 + v40))) {
          break;
        }
        ++v40;
        BOOL v37 = *(char *)(a1 + 135) < 0;
        unint64_t v44 = *(unsigned __int8 *)(a1 + 135);
        if ((v44 & 0x80u) != 0) {
          unint64_t v44 = *(void *)(a1 + 120);
        }
        if (v40 >= v44) {
          goto LABEL_118;
        }
      }
    }
    else
    {
LABEL_118:
      if (!*(void *)(a1 + 240) || (uint64_t *)(a1 + 232) == sub_ADE40(a1 + 224, a1 + 112))
      {
        return sub_C81E0(a1);
      }
    }
  }
  LODWORD(v45) = *(char *)(a1 + 135);
  if ((v45 & 0x80000000) != 0)
  {
    if (*(void *)(a1 + 120) != 4 || (std::string::size_type v46 = *(void *)v2, **(unsigned char **)v2 != 36))
    {
LABEL_150:
      BOOL v51 = (int)v45 < 0;
      BOOL v52 = (int)v45 < 0;
      uint64_t v45 = v45;
      if (v51) {
        uint64_t v45 = *(void *)(a1 + 120);
      }
      uint64_t v53 = qword_24F5DF0;
      if (byte_24F5DFF >= 0) {
        uint64_t v53 = byte_24F5DFF;
      }
      if (v45 == v53)
      {
        if (!v45)
        {
LABEL_166:
          sub_CA680(a1);
        }
        unint64_t v54 = 0;
        while (1)
        {
          std::string::size_type v55 = *(void *)v2;
          if (!v52) {
            std::string::size_type v55 = a1 + 112;
          }
          __darwin_ct_rune_t v56 = __tolower(*(char *)(v55 + v54));
          uint64_t v57 = byte_24F5DFF >= 0 ? &qword_24F5DE8 : (uint64_t *)qword_24F5DE8;
          if (v56 != __tolower(*((char *)v57 + v54))) {
            break;
          }
          ++v54;
          BOOL v52 = *(char *)(a1 + 135) < 0;
          unint64_t v58 = *(unsigned __int8 *)(a1 + 135);
          if ((v58 & 0x80u) != 0) {
            unint64_t v58 = *(void *)(a1 + 120);
          }
          if (v54 >= v58) {
            goto LABEL_166;
          }
        }
      }
      if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5E48))
      {
        return sub_CA710(a1);
      }
      if (sub_AE5C8(a1 + 112, (uint64_t)qword_24F5E68))
      {
        return sub_CBEB4(a1);
      }
      if ((sub_CDAE8((uint64_t *)(a1 + 440)) & 1) != 0 || *(void *)(a1 + 880) != *(void *)(a1 + 888))
      {
        return sub_CDB34(a1);
      }
      std::operator+<char>();
      sub_B1D70(0x644Du, (unint64_t)&v61);
      std::string v59 = std::string::insert(&v61, 0, "exprtk.hpp:");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(5, a1 + 104, &v63, &__p, (uint64_t)v64);
      sub_B1CB0((void *)a1, (uint64_t)v64);
      sub_B1ED4((uint64_t)v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_184:
          if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
LABEL_188:
          operator delete(v63.__r_.__value_.__l.__data_);
          return 0;
        }
      }
      else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_184;
      }
      operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      goto LABEL_188;
    }
  }
  else
  {
    if (v45 != 4) {
      goto LABEL_150;
    }
    std::string::size_type v46 = a1 + 112;
    if (*(unsigned char *)v2 != 36) {
      goto LABEL_150;
    }
  }
  __darwin_ct_rune_t v47 = *(char *)(v46 + 1);
  __darwin_ct_rune_t v48 = __tolower(102);
  __darwin_ct_rune_t v49 = __tolower(v47);
  LODWORD(v45) = *(char *)(a1 + 135);
  if (v48 != v49) {
    goto LABEL_150;
  }
  if ((v45 & 0x80000000) != 0)
  {
    std::string::size_type v50 = *(void *)v2;
    if (*(unsigned __int8 *)(*(void *)v2 + 2) - 48 >= 0xA) {
      goto LABEL_150;
    }
  }
  else
  {
    std::string::size_type v50 = a1 + 112;
    if (*(unsigned __int8 *)(a1 + 114) - 48 > 9) {
      goto LABEL_150;
    }
  }
  if (*(unsigned __int8 *)(v50 + 3) - 48 > 9) {
    goto LABEL_150;
  }

  return sub_CA224(a1);
}

void sub_BDEA8(_Unwind_Exception *a1)
{
}

void sub_BDEC0(_Unwind_Exception *a1)
{
}

void sub_BDED8(_Unwind_Exception *a1)
{
}

void sub_BDEF0(_Unwind_Exception *a1)
{
}

void sub_BDF08(_Unwind_Exception *a1)
{
}

void sub_BDF20(_Unwind_Exception *a1)
{
}

void sub_BDF38(_Unwind_Exception *a1)
{
}

void sub_BDF50(_Unwind_Exception *a1)
{
}

void sub_BDF68(_Unwind_Exception *a1)
{
}

void sub_BDF80(_Unwind_Exception *a1)
{
}

void sub_BDF98(_Unwind_Exception *a1)
{
}

void sub_BDFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_BE034(uint64_t a1, int *a2, uint64_t *a3)
{
  if (sub_115C38(*a3)) {
    return 1;
  }
  int v5 = *a2;
  if (*a2 == 40) {
    goto LABEL_5;
  }
  if (v5 == 91)
  {
    int v6 = *(_DWORD *)(a1 + 104);
    if (v6 != 40 && v6 != 123 && v6 != 91) {
      return 1;
    }
    goto LABEL_12;
  }
  if (v5 == 123)
  {
LABEL_5:
    int v6 = *(_DWORD *)(a1 + 104);
    if (v6 != 40 && v6 != 91 && v6 != 123) {
      return 1;
    }
LABEL_12:
    if (*(unsigned char *)(a1 + 189))
    {
      unint64_t v8 = *(char **)a1;
      uint64_t v7 = *(char **)(a1 + 8);
      if (*(char **)a1 == v7)
      {
        uint64_t v7 = *(char **)a1;
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 24);
        if (v7 != (char *)v9)
        {
          int v33 = *(_DWORD *)v9;
          if (*(char *)(v9 + 31) < 0)
          {
            sub_4200(&v34, *(void **)(v9 + 8), *(void *)(v9 + 16));
            uint64_t v11 = *(void *)(a1 + 24);
          }
          else
          {
            long long v10 = *(_OWORD *)(v9 + 8);
            v34.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
            uint64_t v11 = v9;
          }
          uint64_t v35 = *(void *)(v9 + 32);
          int v33 = v6;
          *(void *)(a1 + 24) = sub_1F0CDC((char **)a1, v11, (unint64_t)&v33);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          unint64_t v8 = *(char **)a1;
          uint64_t v7 = *(char **)(a1 + 8);
        }
        if (v8 != v7)
        {
          uint64_t v26 = *(void *)(a1 + 24);
          if (v7 != (char *)v26)
          {
            int v33 = *(_DWORD *)v26;
            if (*(char *)(v26 + 31) < 0)
            {
              sub_4200(&v34, *(void **)(v26 + 8), *(void *)(v26 + 16));
              uint64_t v28 = *(void *)(a1 + 24);
            }
            else
            {
              long long v27 = *(_OWORD *)(v26 + 8);
              v34.__r_.__value_.__r.__words[2] = *(void *)(v26 + 24);
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
              uint64_t v28 = v26;
            }
            uint64_t v35 = *(void *)(v26 + 32);
            int v33 = 42;
            *(void *)(a1 + 24) = sub_1F0CDC((char **)a1, v28, (unint64_t)&v33);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v34.__r_.__value_.__l.__data_);
            }
            uint64_t v7 = *(char **)(a1 + 8);
          }
        }
      }
      uint64_t v29 = *(void *)(a1 + 24);
      if (v7 == (char *)v29) {
        uint64_t v29 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v29 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v29;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v29 + 8));
      *(void *)(a1 + 136) = *(void *)(v29 + 32);
      return 1;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9240;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR184 - Invalid sequence of brackets");
    memset(&v30, 0, sizeof(v30));
    std::string::push_back(&v30, 55);
    std::string::push_back(&v30, 52);
    std::string::push_back(&v30, 50);
    std::string::push_back(&v30, 53);
    std::string::push_back(&v30, 50);
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v13 = &v30;
    }
    else {
      BOOL v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v14 = (std::string *)((char *)v13 + size - 1);
      if (v14 > v13)
      {
        uint64_t v15 = &v13->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v16 = *(v15 - 1);
          *(v15 - 1) = v14->__r_.__value_.__s.__data_[0];
          v14->__r_.__value_.__s.__data_[0] = v16;
          uint64_t v14 = (std::string *)((char *)v14 - 1);
        }
        while (v15++ < (char *)v14);
      }
    }
    __darwin_ct_rune_t v18 = std::string::insert(&v30, 0, "exprtk.hpp:");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
    v34.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v35 = -1;
    *(_OWORD *)BOOL v37 = 0u;
    *(_OWORD *)uint64_t v38 = 0u;
    long long v39 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    uint64_t v42 = 0;
    int v36 = 1;
    int v33 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v34, (const std::string *)(a1 + 112));
    uint64_t v35 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v37, &__str);
    std::string::operator=((std::string *)&v38[1], &v31);
    uint64_t v20 = *(void *)(a1 + 568);
    uint64_t v21 = *(void *)(a1 + 560);
    uint64_t v22 = 30 * ((v20 - v21) >> 3) - 1;
    if (v20 == v21) {
      uint64_t v22 = 0;
    }
    if (v22 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v21 = *(void *)(a1 + 560);
      uint64_t v20 = *(void *)(a1 + 568);
    }
    if (v20 == v21)
    {
      uint64_t v24 = 0;
    }
    else
    {
      unint64_t v23 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v24 = *(void *)(v21 + 8 * (v23 / 0x1E)) + 136 * (v23 % 0x1E);
    }
    sub_B5158(v24, (uint64_t)&v33);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v41) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_37:
        if ((SHIBYTE(v38[0]) & 0x80000000) == 0) {
          goto LABEL_38;
        }
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v38[1]);
    if ((SHIBYTE(v38[0]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v37[0]);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_49:
      operator delete(__str.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_48:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_49;
  }
  return 1;
}

void sub_BE4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BE590(uint64_t a1, uint64_t *a2)
{
  std::string::size_type v2 = (const void *)*a2;
  if (!*a2) {
    return 0;
  }
  if (v5)
  {
    int v6 = v5;
    uint64_t v43 = 0;
    uint64_t v7 = (*(uint64_t (**)(unsigned char *, uint64_t *))(*(void *)v5 + 24))(v5, &v43);
    v6[16] = 0;
    unint64_t v8 = (const void *)*a2;
    if (!*a2) {
      goto LABEL_36;
    }
    goto LABEL_4;
  }
  if (result)
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)result + 48))(result);
    uint64_t v12 = *(void *)(a1 + 440);
    uint64_t v11 = *(void *)(a1 + 448);
    if (v11 != v12)
    {
      uint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(v12 + 8 * v13);
        if (v14)
        {
          uint64_t v15 = *(void **)(v14 + 8);
          if (v15)
          {
            __darwin_ct_rune_t v18 = (void *)*v15;
            std::string::value_type v16 = v15 + 1;
            uint64_t v17 = v18;
            if (v16 != v18) {
              break;
            }
          }
        }
LABEL_14:
        if (++v13 >= (unint64_t)((v11 - v12) >> 3)) {
          goto LABEL_27;
        }
      }
      while (1)
      {
        uint64_t v7 = v17[8];
        if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) == v10) {
          break;
        }
        long long v19 = (void *)v17[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            long long v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v17[2];
            BOOL v21 = *v20 == (void)v17;
            uint64_t v17 = v20;
          }
          while (!v21);
        }
        uint64_t v17 = v20;
        if (v16 == v20)
        {
          uint64_t v12 = *(void *)(a1 + 440);
          uint64_t v11 = *(void *)(a1 + 448);
          goto LABEL_14;
        }
      }
LABEL_35:
      unint64_t v8 = (const void *)*a2;
      if (!*a2) {
        goto LABEL_36;
      }
LABEL_4:
      if ((*(unsigned int (**)(const void *))(*(void *)v8 + 32))(v8) != 17)
      {
        if (!*a2)
        {
LABEL_9:
          *a2 = 0;
          goto LABEL_36;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)*a2 + 32))(*a2) != 18)
        {
          if (*a2) {
            (*(void (**)(uint64_t))(*(void *)*a2 + 8))(*a2);
          }
          goto LABEL_9;
        }
      }
LABEL_36:
      uint64_t result = &def_332C + 1;
LABEL_37:
      *a2 = v7;
      return result;
    }
LABEL_27:
    uint64_t v22 = *(void *)(a1 + 880);
    if (*(void *)(a1 + 888) != v22)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = v22 + v23;
        if (*(unsigned char *)(v22 + v23 + 68))
        {
          uint64_t v26 = *(void *)(v25 + 80);
          if (v26)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 32))(v26) == 17
              && (*(uint64_t (**)(void))(**(void **)(v25 + 80) + 40))(*(void *)(v25 + 80)) == v10)
            {
              break;
            }
          }
        }
        ++v24;
        uint64_t v22 = *(void *)(a1 + 880);
        v23 += 96;
        if (v24 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v22) >> 5)) {
          goto LABEL_38;
        }
      }
      uint64_t v7 = *(void *)(v22 + v23 + 80);
      if (v7) {
        goto LABEL_35;
      }
    }
LABEL_38:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99E0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR014 - Failed to find variable node in symbol table");
    memset(&v40, 0, sizeof(v40));
    std::string::push_back(&v40, 55);
    std::string::push_back(&v40, 50);
    std::string::push_back(&v40, 57);
    std::string::push_back(&v40, 48);
    std::string::push_back(&v40, 50);
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v40;
    }
    else {
      uint64_t v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v29 = (std::string *)((char *)v28 + size - 1);
      if (v29 > v28)
      {
        std::string v30 = &v28->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v31 = *(v30 - 1);
          *(v30 - 1) = v29->__r_.__value_.__s.__data_[0];
          v29->__r_.__value_.__s.__data_[0] = v31;
          uint64_t v29 = (std::string *)((char *)v29 - 1);
        }
        while (v30++ < (char *)v29);
      }
    }
    int v33 = std::string::insert(&v40, 0, "exprtk.hpp:");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v44.__r_.__value_.__s + 23) = 0;
    v44.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v45 = -1;
    *(_OWORD *)__darwin_ct_rune_t v47 = 0u;
    *(_OWORD *)__darwin_ct_rune_t v48 = 0u;
    long long v49 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v51 = 0u;
    uint64_t v52 = 0;
    int v46 = 1;
    LODWORD(v43) = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v44, (const std::string *)(a1 + 112));
    uint64_t v45 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v47, &__str);
    std::string::operator=((std::string *)&v48[1], &v41);
    uint64_t v35 = *(void *)(a1 + 568);
    uint64_t v36 = *(void *)(a1 + 560);
    uint64_t v37 = 30 * ((v35 - v36) >> 3) - 1;
    if (v35 == v36) {
      uint64_t v37 = 0;
    }
    if (v37 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v36 = *(void *)(a1 + 560);
      uint64_t v35 = *(void *)(a1 + 568);
    }
    if (v35 == v36)
    {
      uint64_t v39 = 0;
    }
    else
    {
      unint64_t v38 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v39 = *(void *)(v36 + 8 * (v38 / 0x1E)) + 136 * (v38 % 0x1E);
    }
    sub_B5158(v39, (uint64_t)&v43);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v51) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_57:
        if ((SHIBYTE(v48[0]) & 0x80000000) == 0) {
          goto LABEL_58;
        }
        goto LABEL_66;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      goto LABEL_57;
    }
    operator delete(v48[1]);
    if ((SHIBYTE(v48[0]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v47[0]);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_68;
    }
LABEL_67:
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_69;
    }
LABEL_68:
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      uint64_t result = (void *)*a2;
      if (!*a2) {
        return result;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete(__str.__r_.__value_.__l.__data_);
    uint64_t result = (void *)*a2;
    if (!*a2) {
      return result;
    }
LABEL_71:
    if ((*(unsigned int (**)(void *))(*(void *)result + 32))(result) != 17)
    {
      uint64_t result = (void *)*a2;
      if (*a2)
      {
        if ((*(unsigned int (**)(void *))(*(void *)result + 32))(result) == 18) {
          return 0;
        }
        uint64_t result = (void *)*a2;
        if (*a2)
        {
          (*(void (**)(void *))(*(void *)result + 8))(result);
          uint64_t v7 = 0;
          uint64_t result = 0;
          goto LABEL_37;
        }
      }
      uint64_t v7 = 0;
      goto LABEL_37;
    }
    return 0;
  }
  return result;
}

void sub_BEC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_BECC4(unsigned __int8 **a1, unsigned __int8 *a2, double *a3)
{
  int v3 = *a1;
  if (*a1 == a2) {
    return 0;
  }
  long long v49 = *a1;
  int v6 = *v3;
  if (v6 == 45 || (int v7 = *v3, v6 == 43))
  {
    long long v49 = ++v3;
    if (v3 == a2) {
      return 0;
    }
    int v7 = *v3;
  }
  if (v7 == 46)
  {
    BOOL v8 = 0;
    double v9 = 0.0;
    uint64_t v10 = v3;
    if (*v3 != 46)
    {
LABEL_47:
      if (v3 != a2) {
        goto LABEL_48;
      }
LABEL_81:
      int v18 = 0;
      goto LABEL_82;
    }
  }
  else
  {
    uint64_t v12 = v3;
    while (*v12 == 48)
    {
      if (++v12 == a2)
      {
        uint64_t v12 = a2;
        break;
      }
    }
    long long v49 = v12;
    if (v12 == a2)
    {
      int v18 = 0;
      BOOL v8 = 1;
      double v9 = 0.0;
      goto LABEL_82;
    }
    uint64_t v10 = v12 + 2;
    double v9 = 0.0;
    while (1)
    {
      unsigned int v13 = (char)*(v10 - 2) - 48;
      if (v13 > 9)
      {
        v10 -= 2;
LABEL_26:
        long long v49 = v10;
        BOOL v8 = v3 != v10;
        if (v10 == a2) {
          goto LABEL_81;
        }
        goto LABEL_27;
      }
      double v9 = v9 * 10.0 + (double)v13;
      uint64_t v14 = v10 - 1;
      if (v10 - 1 == a2) {
        goto LABEL_23;
      }
      unsigned int v15 = (char)*v14 - 48;
      if (v15 > 9) {
        break;
      }
      double v9 = v9 * 10.0 + (double)v15;
      if (v10 == a2) {
        goto LABEL_23;
      }
      unsigned int v16 = (char)*v10 - 48;
      if (v16 > 9) {
        goto LABEL_26;
      }
      double v9 = v9 * 10.0 + (double)v16;
      uint64_t v17 = v10 + 1;
      v10 += 3;
      if (v17 == a2)
      {
LABEL_23:
        long long v49 = a2;
        BOOL v8 = v3 != a2;
        goto LABEL_81;
      }
    }
    --v10;
    long long v49 = v14;
    BOOL v8 = v3 != v14;
    if (v10 == a2) {
      goto LABEL_81;
    }
LABEL_27:
    int v3 = v10;
    if (*v10 != 46) {
      goto LABEL_47;
    }
  }
  if (v3 + 1 == a2)
  {
    long long v49 = ++v3;
    goto LABEL_47;
  }
  uint64_t v19 = a2 - v10;
  double v20 = 0.0;
  uint64_t v21 = 1;
  while (1)
  {
    unsigned int v22 = (char)v3[v21] - 48;
    if (v22 > 9) {
      goto LABEL_37;
    }
    double v20 = v20 * 10.0 + (double)v22;
    uint64_t v23 = &v3[v21 + 1];
    if (v23 == a2) {
      goto LABEL_36;
    }
    unsigned int v24 = (char)*v23 - 48;
    if (v24 > 9)
    {
      ++v21;
      goto LABEL_75;
    }
    double v20 = v20 * 10.0 + (double)v24;
    uint64_t v25 = &v3[v21 + 2];
    if (v25 == a2) {
      goto LABEL_36;
    }
    unsigned int v26 = (char)*v25 - 48;
    if (v26 > 9) {
      break;
    }
    double v20 = v20 * 10.0 + (double)v26;
    v21 += 3;
    if (&v3[v21] == a2)
    {
LABEL_36:
      uint64_t v21 = v19;
LABEL_37:
      v3 += v21;
      long long v49 = v3;
      if (v21 == 1) {
        goto LABEL_47;
      }
      int v27 = 1 - v21;
      if (1 - (int)v21 >= 0) {
        unsigned int v28 = 1 - v21;
      }
      else {
        unsigned int v28 = v21 - 1;
      }
      if (v27 >= -307) {
        goto LABEL_42;
      }
LABEL_79:
      double v31 = v20 / 1.0e307 / dbl_20B9E48[(v21 - 308)];
      goto LABEL_80;
    }
  }
  v21 += 2;
LABEL_75:
  v3 += v21;
  long long v49 = v3;
  int v27 = 1 - v21;
  if (1 - (int)v21 >= 0) {
    unsigned int v28 = 1 - v21;
  }
  else {
    unsigned int v28 = v21 - 1;
  }
  if (v27 < -307) {
    goto LABEL_79;
  }
LABEL_42:
  if (v28 > 0x134)
  {
    double v31 = v20 * __exp10((double)v27 * 10.0);
  }
  else
  {
    double v29 = dbl_20B9E48[v28];
    double v30 = v20 / v29;
    double v31 = v20 * v29;
    if (v27 < 1) {
      double v31 = v30;
    }
  }
LABEL_80:
  double v9 = v9 + v31;
  BOOL v8 = 1;
  if (v3 == a2) {
    goto LABEL_81;
  }
LABEL_48:
  int v32 = *v3;
  if ((v32 & 0xFFFFFFDF) == 0x45)
  {
    int v33 = v3 + 1;
    long long v49 = v3 + 1;
    if (v3 + 1 == a2) {
      return 0;
    }
    int v34 = *v33;
    if (v34 == 45 || v34 == 43)
    {
      int v33 = v3 + 2;
      long long v49 = v3 + 2;
      if (v3 + 2 == a2) {
        return 0;
      }
    }
    if (v33 == a2)
    {
      int v33 = a2;
      int v3 = a2;
      uint64_t v37 = a2;
    }
    else
    {
      if (*v33 == 48)
      {
        uint64_t v35 = v33 + 1;
        while (v35 != a2)
        {
          int v36 = *v35++;
          ++v33;
          if (v36 != 48)
          {
            int v3 = v35 - 1;
            uint64_t v37 = v35 - 1;
            goto LABEL_104;
          }
        }
        int v33 = a2;
        int v3 = a2;
        uint64_t v37 = a2;
      }
      else
      {
        int v3 = v33;
        uint64_t v37 = v33;
      }
LABEL_104:
      long long v49 = v3;
    }
    int64_t v43 = a2 - v33;
    if ((unint64_t)(a2 - v33) > 4)
    {
LABEL_118:
      unsigned int v44 = 0;
LABEL_119:
      if (v3 == a2) {
        return 0;
      }
LABEL_120:
      if (v34 == 45) {
        int v18 = -v44;
      }
      else {
        int v18 = v44;
      }
      int v32 = *v3;
    }
    else
    {
      unsigned int v44 = 0;
      switch(v43)
      {
        case 1:
          goto LABEL_113;
        case 2:
          goto LABEL_111;
        case 3:
          goto LABEL_109;
        case 4:
          int v3 = v37 + 1;
          long long v49 = v37 + 1;
          unsigned int v44 = (char)*v37 - 48;
          if (v44 > 9) {
            goto LABEL_118;
          }
          ++v37;
LABEL_109:
          uint64_t v45 = (char *)v37++;
          long long v49 = v37;
          unsigned int v46 = *v45 - 48;
          if (v46 > 9)
          {
            int v3 = v37;
            if (v37 != a2) {
              goto LABEL_120;
            }
            return 0;
          }
          unsigned int v44 = v46 + 10 * v44;
LABEL_111:
          int v3 = v37 + 1;
          long long v49 = v37 + 1;
          unsigned int v47 = (char)*v37 - 48;
          if (v47 > 9) {
            goto LABEL_119;
          }
          unsigned int v44 = v47 + 10 * v44;
          uint64_t v37 = v3;
LABEL_113:
          unsigned int v48 = (char)*v37 - 48;
          if (v48 > 9) {
            goto LABEL_119;
          }
          unsigned int v44 = v48 + 10 * v44;
          int v3 = v37 + 1;
          long long v49 = v37 + 1;
LABEL_115:
          if (v34 == 45) {
            int v18 = -v44;
          }
          else {
            int v18 = v44;
          }
          break;
        default:
          goto LABEL_115;
      }
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v3 == a2)
  {
LABEL_82:
    unint64_t v38 = a2;
    goto LABEL_83;
  }
  if ((v32 - 70) <= 0x26 && ((1 << (v32 - 70)) & 0x4100000041) != 0)
  {
    unint64_t v38 = v3 + 1;
LABEL_83:
    uint64_t result = 0;
    if (v38 == a2 && v8)
    {
      if (v18)
      {
        if (v18 >= 0) {
          unsigned int v40 = v18;
        }
        else {
          unsigned int v40 = -v18;
        }
        if (v18 < -307)
        {
          double v9 = v9 / 1.0e307 / dbl_20B9E48[-307 - v18];
        }
        else if (v40 > 0x134)
        {
          double v9 = v9 * __exp10((double)v18 * 10.0);
        }
        else
        {
          double v41 = dbl_20B9E48[v40];
          if (v18 < 1) {
            double v9 = v9 / v41;
          }
          else {
            double v9 = v9 * v41;
          }
        }
      }
      double v42 = -v9;
      if (v6 != 45) {
        double v42 = v9;
      }
      *a3 = v42;
      return 1;
    }
    return result;
  }
  if (v32 == 35)
  {
    long long v49 = v3 + 1;
    if (v3 + 1 != a2 && v3[1] - 73 <= 0x25)
    {
      uint64_t result = 0;
      switch(v3[1])
      {
        case 'I':
        case 'i':
          goto LABEL_98;
        case 'N':
        case 'n':
          uint64_t v39 = v3 + 1;
          goto LABEL_127;
        default:
          return result;
      }
      return result;
    }
    return 0;
  }
  if (*v3 - 73 > 0x25) {
    return 0;
  }
  uint64_t result = 0;
  switch(*v3)
  {
    case 'I':
    case 'i':
LABEL_98:
      uint64_t result = sub_BF4D8(&v49, a2, a3, v6 == 45);
      break;
    case 'N':
    case 'n':
      uint64_t v39 = v3;
LABEL_127:
      uint64_t result = sub_BF560(v39, (uint64_t)a2, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_BF4D8(unsigned char **a1, unsigned char *a2, double *a3, int a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 - *a1;
  if (v5 != 8 && v5 != 3) {
    return 0;
  }
  if (v4 != a2)
  {
    if (*v4 == 105) {
      int v7 = "infinity";
    }
    else {
      int v7 = "INFINITY";
    }
    while (*(unsigned __int8 *)v7 == *v4)
    {
      *a1 = ++v4;
      ++v7;
      if (v4 == a2) {
        goto LABEL_12;
      }
    }
    return 0;
  }
LABEL_12:
  double v8 = INFINITY;
  if (a4) {
    double v8 = -INFINITY;
  }
  *a3 = v8;
  return 1;
}

uint64_t sub_BF560(unsigned char *a1, uint64_t a2, void *a3)
{
  if (a2 - (void)a1 != 3) {
    return 0;
  }
  int v3 = a1[1];
  if (*a1 != 110)
  {
    if (v3 != 65 || a1[2] != 78) {
      return 0;
    }
LABEL_8:
    *a3 = 0x7FF8000000000000;
    return 1;
  }
  if (v3 == 97 && a1[2] == 110) {
    goto LABEL_8;
  }
  return 0;
}

void sub_BF5C4()
{
}

double sub_BF5D8(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_BF5E0()
{
  return 0;
}

uint64_t sub_BF5E8()
{
  return 2;
}

uint64_t sub_BF5F0(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5EC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5EC0))
  {
    sub_5E5C(&qword_24F5EA8, "sum");
    __cxa_guard_release(&qword_24F5EC0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5EE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5EE0))
  {
    sub_5E5C(&qword_24F5EC8, "mul");
    __cxa_guard_release(&qword_24F5EE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5F00))
  {
    sub_5E5C(&qword_24F5EE8, "avg");
    __cxa_guard_release(&qword_24F5F00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5F20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5F20))
  {
    sub_5E5C(&qword_24F5F08, "min");
    __cxa_guard_release(&qword_24F5F20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5F40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5F40))
  {
    sub_5E5C(&qword_24F5F28, "max");
    __cxa_guard_release(&qword_24F5F40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5F60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5F60))
  {
    sub_5E5C(&qword_24F5F48, "mand");
    __cxa_guard_release(&qword_24F5F60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5F80))
  {
    sub_5E5C(qword_24F5F68, "mor");
    __cxa_guard_release(&qword_24F5F80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5FA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5FA0))
  {
    sub_5E5C(qword_24F5F88, "~");
    __cxa_guard_release(&qword_24F5FA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5FC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5FC0))
  {
    sub_5E5C(qword_24F5FA8, "[*]");
    __cxa_guard_release(&qword_24F5FC0);
  }
  int v4 = *(char *)(a2 + 23);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = qword_24F5EB0;
  if (byte_24F5EBF >= 0) {
    uint64_t v8 = byte_24F5EBF;
  }
  if (v7 == v8)
  {
    if (!v7) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
    unint64_t v9 = 0;
    unsigned int v10 = v4 >> 31;
    while (1)
    {
      uint64_t v11 = (v10 & 1) != 0 ? *(void *)a2 : a2;
      __darwin_ct_rune_t v12 = __tolower(*(char *)(v11 + v9));
      unsigned int v13 = byte_24F5EBF >= 0 ? &qword_24F5EA8 : (uint64_t *)qword_24F5EA8;
      if (v12 != __tolower(*((char *)v13 + v9))) {
        break;
      }
      ++v9;
      LOBYTE(v10) = *(char *)(a2 + 23) < 0;
      unint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0) {
        unint64_t v14 = *(void *)(a2 + 8);
      }
      if (v9 >= v14) {
        return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v5 = *(void *)(a2 + 8);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  BOOL v15 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) == 0) {
    uint64_t v16 = v6;
  }
  else {
    uint64_t v16 = v5;
  }
  uint64_t v17 = qword_24F5ED0;
  if (byte_24F5EDF >= 0) {
    uint64_t v17 = byte_24F5EDF;
  }
  if (v16 == v17)
  {
    if (!v16) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
    unint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *(void *)a2;
      if (!v15) {
        uint64_t v19 = a2;
      }
      __darwin_ct_rune_t v20 = __tolower(*(char *)(v19 + v18));
      uint64_t v21 = byte_24F5EDF >= 0 ? &qword_24F5EC8 : (uint64_t *)qword_24F5EC8;
      if (v20 != __tolower(*((char *)v21 + v18))) {
        break;
      }
      ++v18;
      BOOL v15 = *(char *)(a2 + 23) < 0;
      unint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      if ((v22 & 0x80u) != 0) {
        unint64_t v22 = *(void *)(a2 + 8);
      }
      if (v18 >= v22) {
        return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v5 = *(void *)(a2 + 8);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  BOOL v23 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) == 0) {
    uint64_t v24 = v6;
  }
  else {
    uint64_t v24 = v5;
  }
  uint64_t v25 = qword_24F5EF0;
  if (byte_24F5EFF >= 0) {
    uint64_t v25 = byte_24F5EFF;
  }
  if (v24 == v25)
  {
    if (!v24) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *(void *)a2;
      if (!v23) {
        uint64_t v27 = a2;
      }
      __darwin_ct_rune_t v28 = __tolower(*(char *)(v27 + v26));
      double v29 = byte_24F5EFF >= 0 ? &qword_24F5EE8 : (uint64_t *)qword_24F5EE8;
      if (v28 != __tolower(*((char *)v29 + v26))) {
        break;
      }
      ++v26;
      BOOL v23 = *(char *)(a2 + 23) < 0;
      unint64_t v30 = *(unsigned __int8 *)(a2 + 23);
      if ((v30 & 0x80u) != 0) {
        unint64_t v30 = *(void *)(a2 + 8);
      }
      if (v26 >= v30) {
        return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v5 = *(void *)(a2 + 8);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  BOOL v31 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) == 0) {
    uint64_t v32 = v6;
  }
  else {
    uint64_t v32 = v5;
  }
  uint64_t v33 = qword_24F5F10;
  if (byte_24F5F1F >= 0) {
    uint64_t v33 = byte_24F5F1F;
  }
  if (v32 == v33)
  {
    if (!v32) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
    unint64_t v34 = 0;
    while (1)
    {
      uint64_t v35 = *(void *)a2;
      if (!v31) {
        uint64_t v35 = a2;
      }
      __darwin_ct_rune_t v36 = __tolower(*(char *)(v35 + v34));
      uint64_t v37 = byte_24F5F1F >= 0 ? &qword_24F5F08 : (uint64_t *)qword_24F5F08;
      if (v36 != __tolower(*((char *)v37 + v34))) {
        break;
      }
      ++v34;
      BOOL v31 = *(char *)(a2 + 23) < 0;
      unint64_t v38 = *(unsigned __int8 *)(a2 + 23);
      if ((v38 & 0x80u) != 0) {
        unint64_t v38 = *(void *)(a2 + 8);
      }
      if (v34 >= v38) {
        return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v5 = *(void *)(a2 + 8);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  BOOL v39 = (v4 & 0x80u) != 0;
  if ((v4 & 0x80u) == 0) {
    uint64_t v40 = v6;
  }
  else {
    uint64_t v40 = v5;
  }
  uint64_t v41 = qword_24F5F30;
  if (byte_24F5F3F >= 0) {
    uint64_t v41 = byte_24F5F3F;
  }
  if (v40 == v41)
  {
    if (!v40) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
    unint64_t v42 = 0;
    while (1)
    {
      uint64_t v43 = *(void *)a2;
      if (!v39) {
        uint64_t v43 = a2;
      }
      __darwin_ct_rune_t v44 = __tolower(*(char *)(v43 + v42));
      uint64_t v45 = byte_24F5F3F >= 0 ? &qword_24F5F28 : (uint64_t *)qword_24F5F28;
      if (v44 != __tolower(*((char *)v45 + v42))) {
        break;
      }
      ++v42;
      BOOL v39 = *(char *)(a2 + 23) < 0;
      unint64_t v46 = *(unsigned __int8 *)(a2 + 23);
      if ((v46 & 0x80u) != 0) {
        unint64_t v46 = *(void *)(a2 + 8);
      }
      if (v42 >= v46) {
        return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
      }
    }
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v5 = *(void *)(a2 + 8);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  BOOL v47 = (v4 & 0x80u) != 0;
  if (v47) {
    uint64_t v6 = v5;
  }
  uint64_t v48 = qword_24F5F50;
  if (byte_24F5F5F >= 0) {
    uint64_t v48 = byte_24F5F5F;
  }
  if (v6 != v48) {
    goto LABEL_123;
  }
  if (!v6) {
    return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
  }
  unint64_t v49 = 0;
  while (1)
  {
    uint64_t v50 = *(void *)a2;
    if (!v47) {
      uint64_t v50 = a2;
    }
    __darwin_ct_rune_t v51 = __tolower(*(char *)(v50 + v49));
    uint64_t v52 = byte_24F5F5F >= 0 ? &qword_24F5F48 : (uint64_t *)qword_24F5F48;
    if (v51 != __tolower(*((char *)v52 + v49))) {
      break;
    }
    ++v49;
    BOOL v47 = *(char *)(a2 + 23) < 0;
    unint64_t v53 = *(unsigned __int8 *)(a2 + 23);
    if ((v53 & 0x80u) != 0) {
      unint64_t v53 = *(void *)(a2 + 8);
    }
    if (v49 >= v53) {
      return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
    }
  }
LABEL_123:
  if (sub_AE5C8(a2, (uint64_t)qword_24F5F68)) {
    return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
  }
  if (sub_AE5C8(a2, (uint64_t)qword_24F5F88)) {
    return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
  }
  uint64_t result = sub_AE5C8(a2, (uint64_t)qword_24F5FA8);
  if (result) {
    return !*(void *)(a1 + 216) || a1 + 208 == (void)sub_ADE40(a1 + 200, a2);
  }
  return result;
}

void sub_BFD18(_Unwind_Exception *a1)
{
}

void sub_BFD30(_Unwind_Exception *a1)
{
}

void sub_BFD48(_Unwind_Exception *a1)
{
}

void sub_BFD60(_Unwind_Exception *a1)
{
}

void sub_BFD78(_Unwind_Exception *a1)
{
}

void sub_BFD90(_Unwind_Exception *a1)
{
}

void sub_BFDA8(_Unwind_Exception *a1)
{
}

void sub_BFDC0(_Unwind_Exception *a1)
{
}

void sub_BFDD8(_Unwind_Exception *a1)
{
}

uint64_t sub_BFDF0(std::string::size_type a1)
{
  int v128 = 0;
  uint64_t v129 = 0;
  std::string v130 = 0;
  int v127 = 0;
  std::string::size_type v2 = (std::string *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
  {
    sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  }
  else
  {
    long long __dst = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    uint64_t v126 = *(void *)(a1 + 128);
  }
  int v3 = (_DWORD *)(a1 + 104);
  HIBYTE(v114) = 1;
  LOWORD(__p[0]) = 126;
  BOOL v4 = v126 < 0;
  uint64_t v5 = HIBYTE(v126);
  if (v126 < 0) {
    uint64_t v5 = *((void *)&__dst + 1);
  }
  if (v5 != 1)
  {
LABEL_17:
    HIBYTE(v114) = 3;
    LODWORD(__p[0]) = 6105691;
    BOOL v11 = v126 < 0;
    uint64_t v12 = HIBYTE(v126);
    if (v126 < 0) {
      uint64_t v12 = *((void *)&__dst + 1);
    }
    if (v12 == 3)
    {
      unint64_t v13 = 0;
      do
      {
        if (v11) {
          p_dst = (long long *)__dst;
        }
        else {
          p_dst = &__dst;
        }
        __darwin_ct_rune_t v15 = __tolower(*((char *)p_dst + v13));
        if (v15 != __tolower(*((char *)__p + v13))) {
          goto LABEL_30;
        }
        ++v13;
        BOOL v11 = v126 < 0;
        unint64_t v16 = HIBYTE(v126);
        if (v126 < 0) {
          unint64_t v16 = *((void *)&__dst + 1);
        }
      }
      while (v13 < v16);
      uint64_t v17 = sub_D0160(a1);
      if (SHIBYTE(v126) < 0) {
        goto LABEL_197;
      }
      goto LABEL_84;
    }
LABEL_30:
    HIBYTE(v114) = 3;
    LODWORD(__p[0]) = 6780513;
    BOOL v18 = v126 < 0;
    uint64_t v19 = HIBYTE(v126);
    if (v126 < 0) {
      uint64_t v19 = *((void *)&__dst + 1);
    }
    if (v19 == 3)
    {
      unint64_t v20 = 0;
      do
      {
        if (v18) {
          uint64_t v21 = (long long *)__dst;
        }
        else {
          uint64_t v21 = &__dst;
        }
        __darwin_ct_rune_t v22 = __tolower(*((char *)v21 + v20));
        if (v22 != __tolower(*((char *)__p + v20))) {
          goto LABEL_42;
        }
        ++v20;
        BOOL v18 = v126 < 0;
        unint64_t v23 = HIBYTE(v126);
        if (v126 < 0) {
          unint64_t v23 = *((void *)&__dst + 1);
        }
      }
      while (v20 < v23);
      int v24 = 11;
      goto LABEL_98;
    }
LABEL_42:
    HIBYTE(v114) = 4;
    strcpy((char *)__p, "mand");
    BOOL v25 = v126 < 0;
    uint64_t v26 = HIBYTE(v126);
    if (v126 < 0) {
      uint64_t v26 = *((void *)&__dst + 1);
    }
    if (v26 == 4)
    {
      unint64_t v27 = 0;
      do
      {
        if (v25) {
          __darwin_ct_rune_t v28 = (long long *)__dst;
        }
        else {
          __darwin_ct_rune_t v28 = &__dst;
        }
        __darwin_ct_rune_t v29 = __tolower(*((char *)v28 + v27));
        if (v29 != __tolower(*((char *)__p + v27))) {
          goto LABEL_54;
        }
        ++v27;
        BOOL v25 = v126 < 0;
        unint64_t v30 = HIBYTE(v126);
        if (v126 < 0) {
          unint64_t v30 = *((void *)&__dst + 1);
        }
      }
      while (v27 < v30);
      int v24 = 28;
      goto LABEL_98;
    }
LABEL_54:
    HIBYTE(v114) = 3;
    LODWORD(__p[0]) = 7889261;
    BOOL v31 = v126 < 0;
    uint64_t v32 = HIBYTE(v126);
    if (v126 < 0) {
      uint64_t v32 = *((void *)&__dst + 1);
    }
    if (v32 == 3)
    {
      unint64_t v33 = 0;
      do
      {
        if (v31) {
          unint64_t v34 = (long long *)__dst;
        }
        else {
          unint64_t v34 = &__dst;
        }
        __darwin_ct_rune_t v35 = __tolower(*((char *)v34 + v33));
        if (v35 != __tolower(*((char *)__p + v33))) {
          goto LABEL_66;
        }
        ++v33;
        BOOL v31 = v126 < 0;
        unint64_t v36 = HIBYTE(v126);
        if (v126 < 0) {
          unint64_t v36 = *((void *)&__dst + 1);
        }
      }
      while (v33 < v36);
      int v24 = 10;
      goto LABEL_98;
    }
LABEL_66:
    HIBYTE(v114) = 3;
    LODWORD(__p[0]) = 7235949;
    BOOL v37 = v126 < 0;
    uint64_t v38 = HIBYTE(v126);
    if (v126 < 0) {
      uint64_t v38 = *((void *)&__dst + 1);
    }
    if (v38 == 3)
    {
      unint64_t v39 = 0;
      do
      {
        if (v37) {
          uint64_t v40 = (long long *)__dst;
        }
        else {
          uint64_t v40 = &__dst;
        }
        __darwin_ct_rune_t v41 = __tolower(*((char *)v40 + v39));
        if (v41 != __tolower(*((char *)__p + v39))) {
          goto LABEL_78;
        }
        ++v39;
        BOOL v37 = v126 < 0;
        unint64_t v42 = HIBYTE(v126);
        if (v126 < 0) {
          unint64_t v42 = *((void *)&__dst + 1);
        }
      }
      while (v39 < v42);
      int v24 = 9;
      goto LABEL_98;
    }
LABEL_78:
    sub_5E5C(__p, "mor");
    int v43 = sub_AE5C8((uint64_t)&__dst, (uint64_t)__p);
    int v44 = v43;
    if (SHIBYTE(v114) < 0)
    {
      operator delete(__p[0]);
      if (v44) {
        goto LABEL_80;
      }
    }
    else if (v43)
    {
LABEL_80:
      int v24 = 29;
LABEL_98:
      int v127 = v24;
      v112.__r_.__value_.__s.__data_[0] = 1;
      v112.__r_.__value_.__l.__size_ = a1;
      v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&v128;
      if (!*(unsigned char *)(a1 + 473)) {
        goto LABEL_106;
      }
      if (SHIBYTE(v126) < 0)
      {
        sub_4200(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = __dst;
        uint64_t v114 = v126;
      }
      int v115 = 5;
      unint64_t v50 = *(void *)(a1 + 488);
      if (v50 < *(void *)(a1 + 496))
      {
        long long v51 = *(_OWORD *)__p;
        *(void *)(v50 + 16) = v114;
        *(_OWORD *)unint64_t v50 = v51;
        *(_DWORD *)(v50 + 24) = v115;
        *(void *)(a1 + 488) = v50 + 32;
        std::string::size_type v52 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v52) {
          goto LABEL_109;
        }
LABEL_107:
        *(void *)(a1 + 24) = v52 + 40;
        goto LABEL_110;
      }
      unint64_t v53 = sub_D2F30((void **)(a1 + 480), (uint64_t)__p);
      int v54 = SHIBYTE(v114);
      *(void *)(a1 + 488) = v53;
      if (v54 < 0)
      {
        operator delete(__p[0]);
        std::string::size_type v52 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) != v52) {
          goto LABEL_107;
        }
      }
      else
      {
LABEL_106:
        std::string::size_type v52 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) != v52) {
          goto LABEL_107;
        }
      }
LABEL_109:
      std::string::size_type v52 = a1 + 40;
LABEL_110:
      _DWORD *v3 = *(_DWORD *)v52;
      std::string::operator=(v2, (const std::string *)(v52 + 8));
      *(void *)(a1 + 136) = *(void *)(v52 + 32);
      if (*(_DWORD *)(a1 + 104) == 40)
      {
        std::string::size_type v55 = *(void *)(a1 + 24);
        if (*(void *)(a1 + 8) == v55) {
          std::string::size_type v55 = a1 + 40;
        }
        else {
          *(void *)(a1 + 24) = v55 + 40;
        }
        _DWORD *v3 = *(_DWORD *)v55;
        std::string::operator=(v2, (const std::string *)(v55 + 8));
        std::string::size_type v108 = a1 + 40;
        for (uint64_t i = v2; ; std::string::operator=(i, (const std::string *)(v55 + 8)))
        {
          *(void *)(a1 + 136) = *(void *)(v55 + 32);
          uint64_t v70 = sub_B7FE4(a1, 0);
          uint64_t v71 = v70;
          if (!v70) {
            goto LABEL_188;
          }
          int v72 = v129;
          if (v129 < v130)
          {
            *(void *)uint64_t v129 = v70;
            uint64_t v73 = (uint64_t)(v72 + 8);
            uint64_t v74 = (_DWORD *)(a1 + 104);
            goto LABEL_146;
          }
          int v75 = v128;
          uint64_t v76 = (v129 - v128) >> 3;
          unint64_t v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v78 = v130 - v128;
          if ((v130 - v128) >> 2 > v77) {
            unint64_t v77 = v78 >> 2;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            if (v79 >> 61) {
              sub_188D718();
            }
            long long v80 = operator new(8 * v79);
            uint64_t v81 = &v80[8 * v76];
            *(void *)uint64_t v81 = v71;
            uint64_t v73 = (uint64_t)(v81 + 8);
            if (v72 == v75)
            {
LABEL_144:
              int v128 = v81;
              uint64_t v129 = (char *)v73;
              std::string v130 = &v80[8 * v79];
              uint64_t v74 = (_DWORD *)(a1 + 104);
              if (!v72) {
                goto LABEL_146;
              }
LABEL_145:
              operator delete(v72);
              goto LABEL_146;
            }
          }
          else
          {
            long long v80 = 0;
            uint64_t v81 = (char *)(8 * v76);
            *(void *)(8 * v76) = v71;
            uint64_t v73 = 8 * v76 + 8;
            if (v72 == v75) {
              goto LABEL_144;
            }
          }
          unint64_t v83 = v72 - 8 - v75;
          if (v83 < 0x58) {
            goto LABEL_212;
          }
          if ((unint64_t)(v75 - v80) < 0x20) {
            goto LABEL_212;
          }
          uint64_t v84 = (v83 >> 3) + 1;
          uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          long long v86 = &v72[-v85];
          v81 -= v85;
          uint64_t v87 = &v80[8 * v76 - 16];
          unint64_t v88 = v72 - 16;
          uint64_t v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v90 = *(_OWORD *)v88;
            *(v87 - 1) = *((_OWORD *)v88 - 1);
            *uint64_t v87 = v90;
            v87 -= 2;
            v88 -= 32;
            v89 -= 4;
          }
          while (v89);
          int v72 = v86;
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_212:
            do
            {
              uint64_t v91 = *((void *)v72 - 1);
              v72 -= 8;
              *((void *)v81 - 1) = v91;
              v81 -= 8;
            }
            while (v72 != v75);
          }
          int v72 = v128;
          int v128 = v81;
          uint64_t v129 = (char *)v73;
          std::string v130 = &v80[8 * v79];
          uint64_t v74 = (_DWORD *)(a1 + 104);
          if (v72) {
            goto LABEL_145;
          }
LABEL_146:
          uint64_t v129 = (char *)v73;
          if (*v74 != 44)
          {
            uint64_t v92 = i;
            if (*v74 != 41)
            {
              std::operator+<char>();
              memset(&v109, 0, sizeof(v109));
              std::string::push_back(&v109, 50);
              std::string::push_back(&v109, 56);
              std::string::push_back(&v109, 53);
              std::string::push_back(&v109, 50);
              std::string::push_back(&v109, 50);
              std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v96 = &v109;
              }
              else {
                unint64_t v96 = (std::string *)v109.__r_.__value_.__r.__words[0];
              }
              if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v109.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                uint64_t v97 = (std::string *)((char *)v96 + size - 1);
                if (v97 > v96)
                {
                  std::string::size_type v98 = &v96->__r_.__value_.__s.__data_[1];
                  do
                  {
                    std::string::value_type v99 = *(v98 - 1);
                    *(v98 - 1) = v97->__r_.__value_.__s.__data_[0];
                    v97->__r_.__value_.__s.__data_[0] = v99;
                    uint64_t v97 = (std::string *)((char *)v97 - 1);
                    BOOL v61 = v98++ >= (char *)v97;
                  }
                  while (!v61);
                }
              }
              uint64_t v100 = std::string::insert(&v109, 0, "exprtk.hpp:");
              long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
              v110.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v101;
              v100->__r_.__value_.__l.__size_ = 0;
              v100->__r_.__value_.__r.__words[2] = 0;
              v100->__r_.__value_.__r.__words[0] = 0;
              char v116 = 0;
              LOBYTE(__p[1]) = 0;
              uint64_t v117 = -1;
              long long v119 = 0u;
              long long v120 = 0u;
              long long v121 = 0u;
              long long v122 = 0u;
              long long v123 = 0u;
              uint64_t v124 = 0;
              int v118 = 1;
              LODWORD(__p[0]) = *v74;
              std::string::operator=((std::string *)&__p[1], i);
              uint64_t v117 = *(void *)(a1 + 136);
              std::string::operator=((std::string *)&v119, &__str);
              std::string::operator=((std::string *)((char *)&v120 + 8), &v110);
              uint64_t v102 = *(void *)(a1 + 568);
              uint64_t v103 = *(void *)(a1 + 560);
              uint64_t v104 = 30 * ((v102 - v103) >> 3) - 1;
              if (v102 == v103) {
                uint64_t v104 = 0;
              }
              if (v104 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
              {
                sub_B4B88(a1 + 552);
                uint64_t v103 = *(void *)(a1 + 560);
                uint64_t v102 = *(void *)(a1 + 568);
              }
              if (v102 == v103)
              {
                uint64_t v68 = 0;
              }
              else
              {
                unint64_t v105 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
                uint64_t v68 = *(void *)(v103 + 8 * (v105 / 0x1E)) + 136 * (v105 % 0x1E);
              }
              goto LABEL_181;
            }
            std::string::size_type v93 = *(void *)(a1 + 24);
            std::string::size_type v94 = v108;
            if (*(void *)(a1 + 8) != v93)
            {
              *(void *)(a1 + 24) = v93 + 40;
              std::string::size_type v94 = v93;
            }
            *uint64_t v74 = *(_DWORD *)v94;
            std::string::operator=(v92, (const std::string *)(v94 + 8));
            *(void *)(a1 + 136) = *(void *)(v94 + 32);
            uint64_t v17 = sub_D167C(a1 + 344, &v127, &v128);
            v112.__r_.__value_.__s.__data_[0] = v17 == 0;
            sub_22094C((uint64_t)&v112);
            if ((SHIBYTE(v126) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            goto LABEL_197;
          }
          std::string::size_type v82 = *(void *)(a1 + 24);
          std::string::size_type v55 = v108;
          if (*(void *)(a1 + 8) != v82)
          {
            *(void *)(a1 + 24) = v82 + 40;
            std::string::size_type v55 = v82;
          }
          *uint64_t v74 = *(_DWORD *)v55;
        }
      }
      std::operator+<char>();
      memset(&v109, 0, sizeof(v109));
      std::string::push_back(&v109, 48);
      std::string::push_back(&v109, 54);
      std::string::push_back(&v109, 53);
      std::string::push_back(&v109, 50);
      std::string::push_back(&v109, 50);
      std::string::size_type v56 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v57 = &v109;
      }
      else {
        uint64_t v57 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v56 = v109.__r_.__value_.__l.__size_;
      }
      if (v56)
      {
        unint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
        if (v58 > v57)
        {
          std::string v59 = &v57->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v60 = *(v59 - 1);
            *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
            v58->__r_.__value_.__s.__data_[0] = v60;
            unint64_t v58 = (std::string *)((char *)v58 - 1);
            BOOL v61 = v59++ >= (char *)v58;
          }
          while (!v61);
        }
      }
      std::string::value_type v62 = std::string::insert(&v109, 0, "exprtk.hpp:");
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      char v116 = 0;
      LOBYTE(__p[1]) = 0;
      uint64_t v117 = -1;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v123 = 0u;
      uint64_t v124 = 0;
      int v118 = 1;
      LODWORD(__p[0]) = *v3;
      std::string::operator=((std::string *)&__p[1], v2);
      uint64_t v117 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v119, &__str);
      std::string::operator=((std::string *)((char *)&v120 + 8), &v110);
      uint64_t v64 = *(void *)(a1 + 568);
      uint64_t v65 = *(void *)(a1 + 560);
      uint64_t v66 = 30 * ((v64 - v65) >> 3) - 1;
      if (v64 == v65) {
        uint64_t v66 = 0;
      }
      if (v66 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v65 = *(void *)(a1 + 560);
        uint64_t v64 = *(void *)(a1 + 568);
      }
      if (v64 == v65)
      {
        uint64_t v68 = 0;
      }
      else
      {
        unint64_t v67 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v68 = *(void *)(v65 + 8 * (v67 / 0x1E)) + 136 * (v67 % 0x1E);
      }
LABEL_181:
      sub_B5158(v68, (uint64_t)__p);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v123) < 0)
      {
        operator delete((void *)v122);
        if ((SHIBYTE(v121) & 0x80000000) == 0)
        {
LABEL_183:
          if ((SBYTE7(v120) & 0x80000000) == 0) {
            goto LABEL_184;
          }
          goto LABEL_192;
        }
      }
      else if ((SHIBYTE(v121) & 0x80000000) == 0)
      {
        goto LABEL_183;
      }
      operator delete(*((void **)&v120 + 1));
      if ((SBYTE7(v120) & 0x80000000) == 0)
      {
LABEL_184:
        if ((v116 & 0x80000000) == 0) {
          goto LABEL_185;
        }
        goto LABEL_193;
      }
LABEL_192:
      operator delete((void *)v119);
      if ((v116 & 0x80000000) == 0)
      {
LABEL_185:
        if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_186;
        }
        goto LABEL_194;
      }
LABEL_193:
      operator delete(__p[1]);
      if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_186:
        if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_187;
        }
        goto LABEL_195;
      }
LABEL_194:
      operator delete(v110.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_187:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_188;
        }
        goto LABEL_196;
      }
LABEL_195:
      operator delete(v109.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        uint64_t v17 = 0;
        sub_22094C((uint64_t)&v112);
        if (SHIBYTE(v126) < 0) {
          goto LABEL_197;
        }
        goto LABEL_84;
      }
LABEL_196:
      operator delete(__str.__r_.__value_.__l.__data_);
      uint64_t v17 = 0;
      sub_22094C((uint64_t)&v112);
      if (SHIBYTE(v126) < 0) {
        goto LABEL_197;
      }
      goto LABEL_84;
    }
    sub_5E5C(__p, "mul");
    int v47 = sub_AE5C8((uint64_t)&__dst, (uint64_t)__p);
    int v48 = v47;
    if (SHIBYTE(v114) < 0)
    {
      operator delete(__p[0]);
      if (v48) {
        goto LABEL_92;
      }
    }
    else if (v47)
    {
LABEL_92:
      int v24 = 13;
      goto LABEL_98;
    }
    sub_5E5C(__p, "sum");
    int v49 = sub_AE5C8((uint64_t)&__dst, (uint64_t)__p);
    if (SHIBYTE(v114) < 0) {
      operator delete(__p[0]);
    }
    if (v49)
    {
      int v24 = 12;
      goto LABEL_98;
    }
    std::operator+<char>();
    sub_B1D70(0x580Fu, (unint64_t)&v110);
    uint64_t v106 = std::string::insert(&v110, 0, "exprtk.hpp:");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, a1 + 104, &v112, &__str, (uint64_t)__p);
    sub_B1CB0((void *)a1, (uint64_t)__p);
    sub_B1ED4((uint64_t)__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_201:
        if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_202;
        }
        goto LABEL_206;
      }
    }
    else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_201;
    }
    operator delete(v110.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_202:
      uint64_t v17 = 0;
      if (SHIBYTE(v126) < 0) {
        goto LABEL_197;
      }
      goto LABEL_84;
    }
LABEL_206:
    operator delete(v112.__r_.__value_.__l.__data_);
    uint64_t v17 = 0;
    if (SHIBYTE(v126) < 0) {
      goto LABEL_197;
    }
    goto LABEL_84;
  }
  unint64_t v6 = 0;
  do
  {
    if (v4) {
      uint64_t v7 = (long long *)__dst;
    }
    else {
      uint64_t v7 = &__dst;
    }
    __darwin_ct_rune_t v8 = __tolower(*((char *)v7 + v6));
    if (v8 != __tolower(*((char *)__p + v6))) {
      goto LABEL_17;
    }
    ++v6;
    BOOL v4 = v126 < 0;
    unint64_t v9 = HIBYTE(v126);
    if (v126 < 0) {
      unint64_t v9 = *((void *)&__dst + 1);
    }
  }
  while (v6 < v9);
  std::string::size_type v10 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v10) {
    std::string::size_type v10 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v10 + 40;
  }
  _DWORD *v3 = *(_DWORD *)v10;
  std::string::operator=(v2, (const std::string *)(v10 + 8));
  *(void *)(a1 + 136) = *(void *)(v10 + 32);
  HIBYTE(v114) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v17 = sub_CF240(a1, (uint64_t)__p);
  if ((SHIBYTE(v114) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v126) & 0x80000000) == 0) {
      goto LABEL_84;
    }
LABEL_197:
    operator delete((void *)__dst);
    uint64_t v45 = v128;
    if (!v128) {
      return v17;
    }
    goto LABEL_85;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v126) < 0) {
    goto LABEL_197;
  }
LABEL_84:
  uint64_t v45 = v128;
  if (v128)
  {
LABEL_85:
    uint64_t v129 = v45;
    operator delete(v45);
  }
  return v17;
}

void sub_C0C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_B1ED4((uint64_t)&a35);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v40 - 137) < 0)
        {
          operator delete(*(void **)(v40 - 160));
          unint64_t v42 = *(void **)(v40 - 120);
          if (!v42) {
LABEL_10:
          }
            _Unwind_Resume(a1);
        }
        else
        {
          unint64_t v42 = *(void **)(v40 - 120);
          if (!v42) {
            goto LABEL_10;
          }
        }
        *(void *)(v40 - 112) = v42;
        operator delete(v42);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a29);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a34 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_C0E34(uint64_t a1)
{
  std::string::size_type v2 = (long long *)(a1 + 112);
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    long long __dst = *v2;
    uint64_t v78 = *(void *)(a1 + 128);
    int v74 = *(_DWORD *)(a1 + 104);
LABEL_4:
    std::string v75 = *(std::string *)v2;
    goto LABEL_5;
  }
  sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  int v3 = *(char *)(a1 + 135);
  int v74 = *(_DWORD *)(a1 + 104);
  if ((v3 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  sub_4200(&v75, *(void **)(a1 + 112), *(void *)(a1 + 120));
LABEL_5:
  uint64_t v76 = *(void *)(a1 + 136);
  BOOL v4 = sub_DD150(a1 + 704, (uint64_t)&__dst);
  unint64_t v6 = v5;
  if (v4 == v5)
  {
    std::operator+<char>();
    memset(&v61, 0, sizeof(v61));
    std::string::push_back(&v61, 48);
    std::string::push_back(&v61, 51);
    std::string::push_back(&v61, 51);
    std::string::push_back(&v61, 49);
    std::string::push_back(&v61, 50);
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &v61;
    }
    else {
      int v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v25 = (std::string *)((char *)v24 + size - 1);
      if (v25 > v24)
      {
        uint64_t v26 = &v24->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v27 = *(v26 - 1);
          *(v26 - 1) = v25->__r_.__value_.__s.__data_[0];
          v25->__r_.__value_.__s.__data_[0] = v27;
          BOOL v25 = (std::string *)((char *)v25 - 1);
          BOOL v15 = v26++ >= (char *)v25;
        }
        while (!v15);
      }
    }
    __darwin_ct_rune_t v28 = std::string::insert(&v61, 0, "exprtk.hpp:");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(void *)&__str[16] = *((void *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __str = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    char v65 = 0;
    LOBYTE(v62[1]) = 0;
    uint64_t v66 = -1;
    *(_OWORD *)uint64_t v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long __p = 0u;
    long long v72 = 0u;
    uint64_t v73 = 0;
    int v67 = 1;
    LODWORD(v62[0]) = v74;
    std::string::operator=((std::string *)&v62[1], &v75);
    uint64_t v66 = v76;
    std::string::operator=((std::string *)v68, (const std::string *)&v80);
    std::string::operator=((std::string *)((char *)&v69 + 8), (const std::string *)__str);
    uint64_t v30 = *(void *)(a1 + 568);
    uint64_t v31 = *(void *)(a1 + 560);
    uint64_t v32 = 30 * ((v30 - v31) >> 3) - 1;
    if (v30 == v31) {
      uint64_t v32 = 0;
    }
    if (v32 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v31 = *(void *)(a1 + 560);
      uint64_t v30 = *(void *)(a1 + 568);
    }
    if (v30 == v31)
    {
      uint64_t v34 = 0;
    }
    else
    {
      unint64_t v33 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v34 = *(void *)(v31 + 8 * (v33 / 0x1E)) + 136 * (v33 % 0x1E);
    }
    sub_B5158(v34, (uint64_t)v62);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v72) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v70) & 0x80000000) == 0)
      {
LABEL_103:
        if ((SBYTE7(v69) & 0x80000000) == 0) {
          goto LABEL_104;
        }
        goto LABEL_111;
      }
    }
    else if ((SHIBYTE(v70) & 0x80000000) == 0)
    {
      goto LABEL_103;
    }
    operator delete(*((void **)&v69 + 1));
    if ((SBYTE7(v69) & 0x80000000) == 0)
    {
LABEL_104:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_112;
    }
LABEL_111:
    operator delete(v68[0]);
    if ((v65 & 0x80000000) == 0)
    {
LABEL_105:
      if ((__str[23] & 0x80000000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_113;
    }
LABEL_112:
    operator delete(v62[1]);
    if ((__str[23] & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_114;
    }
LABEL_113:
    operator delete(*(void **)__str);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SBYTE7(v81) & 0x80000000) == 0) {
        goto LABEL_117;
      }
LABEL_115:
      unint64_t v39 = (void *)v80;
      goto LABEL_116;
    }
LABEL_114:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SBYTE7(v81) & 0x80000000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_115;
  }
  long long v80 = 0u;
  long long v81 = 0u;
  unint64_t v7 = sub_DB7D8(a1, (uint64_t)&v80);
  if (v7 - 5 < 0xFFFFFFFFFFFFFFFCLL)
  {
LABEL_7:
    if ((void)v80 && (*(unsigned int (**)(void))(*(void *)v80 + 32))(v80) != 17)
    {
      if (!(void)v80)
      {
LABEL_13:
        *(void *)&long long v80 = 0;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(void))(*(void *)v80 + 32))(v80) != 18)
      {
        if ((void)v80) {
          (*(void (**)(void))(*(void *)v80 + 8))(v80);
        }
        goto LABEL_13;
      }
    }
LABEL_14:
    if (*((void *)&v80 + 1)
      && (*(unsigned int (**)(void))(**((void **)&v80 + 1) + 32))(*((void *)&v80 + 1)) != 17)
    {
      if (!*((void *)&v80 + 1))
      {
LABEL_20:
        *((void *)&v80 + 1) = 0;
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void))(**((void **)&v80 + 1) + 32))(*((void *)&v80 + 1)) != 18)
      {
        if (*((void *)&v80 + 1)) {
          (*(void (**)(void))(**((void **)&v80 + 1) + 8))(*((void *)&v80 + 1));
        }
        goto LABEL_20;
      }
    }
LABEL_21:
    if ((void)v81 && (*(unsigned int (**)(void))(*(void *)v81 + 32))(v81) != 17)
    {
      if (!(void)v81)
      {
LABEL_27:
        *(void *)&long long v81 = 0;
        goto LABEL_28;
      }
      if ((*(unsigned int (**)(void))(*(void *)v81 + 32))(v81) != 18)
      {
        if ((void)v81) {
          (*(void (**)(void))(*(void *)v81 + 8))(v81);
        }
        goto LABEL_27;
      }
    }
LABEL_28:
    if (!*((void *)&v81 + 1)
      || (*(unsigned int (**)(void))(**((void **)&v81 + 1) + 32))(*((void *)&v81 + 1)) == 17)
    {
      goto LABEL_35;
    }
    if (*((void *)&v81 + 1))
    {
      if ((*(unsigned int (**)(void))(**((void **)&v81 + 1) + 32))(*((void *)&v81 + 1)) == 18) {
        goto LABEL_35;
      }
      if (*((void *)&v81 + 1)) {
        (*(void (**)(void))(**((void **)&v81 + 1) + 8))(*((void *)&v81 + 1));
      }
    }
    *((void *)&v81 + 1) = 0;
LABEL_35:
    std::operator+<char>();
    __darwin_ct_rune_t v8 = std::string::append(&v61, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)&__str[16] = *((void *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __str = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v59, 0, sizeof(v59));
    std::string::push_back(&v59, 55);
    std::string::push_back(&v59, 55);
    std::string::push_back(&v59, 51);
    std::string::push_back(&v59, 49);
    std::string::push_back(&v59, 50);
    std::string::size_type v10 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v11 = &v59;
    }
    else {
      BOOL v11 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = v59.__r_.__value_.__l.__size_;
    }
    if (v10)
    {
      uint64_t v12 = (std::string *)((char *)v11 + v10 - 1);
      if (v12 > v11)
      {
        unint64_t v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          uint64_t v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    unint64_t v16 = std::string::insert(&v59, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    char v65 = 0;
    LOBYTE(v62[1]) = 0;
    uint64_t v66 = -1;
    *(_OWORD *)uint64_t v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long __p = 0u;
    long long v72 = 0u;
    uint64_t v73 = 0;
    int v67 = 1;
    LODWORD(v62[0]) = v74;
    std::string::operator=((std::string *)&v62[1], &v75);
    uint64_t v66 = v76;
    std::string::operator=((std::string *)v68, (const std::string *)__str);
    std::string::operator=((std::string *)((char *)&v69 + 8), &v60);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    sub_B5158(v22, (uint64_t)v62);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v72) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v70) & 0x80000000) == 0)
      {
LABEL_84:
        if ((SBYTE7(v69) & 0x80000000) == 0) {
          goto LABEL_85;
        }
        goto LABEL_93;
      }
    }
    else if ((SHIBYTE(v70) & 0x80000000) == 0)
    {
      goto LABEL_84;
    }
    operator delete(*((void **)&v69 + 1));
    if ((SBYTE7(v69) & 0x80000000) == 0)
    {
LABEL_85:
      if ((v65 & 0x80000000) == 0) {
        goto LABEL_86;
      }
      goto LABEL_94;
    }
LABEL_93:
    operator delete(v68[0]);
    if ((v65 & 0x80000000) == 0)
    {
LABEL_86:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_95;
    }
LABEL_94:
    operator delete(v62[1]);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_96;
    }
LABEL_95:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((__str[23] & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_97;
    }
LABEL_96:
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((__str[23] & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
LABEL_98:
      unint64_t v39 = (void *)v61.__r_.__value_.__r.__words[0];
LABEL_116:
      operator delete(v39);
LABEL_117:
      uint64_t v40 = 0;
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
LABEL_154:
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v78) & 0x80000000) == 0) {
        return v40;
      }
LABEL_155:
      operator delete((void *)__dst);
      return v40;
    }
LABEL_97:
    operator delete(*(void **)__str);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_98;
  }
  while (1)
  {
    unint64_t v35 = *((unsigned int *)v4 + 15);
    if (v7 == v35 && v7 <= v35) {
      break;
    }
    unint64_t v36 = (uint64_t *)v4[1];
    if (v36)
    {
      do
      {
        BOOL v37 = v36;
        unint64_t v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        BOOL v37 = (uint64_t *)v4[2];
        BOOL v38 = *v37 == (void)v4;
        BOOL v4 = v37;
      }
      while (!v38);
    }
    BOOL v4 = v37;
    if (v37 == v6) {
      goto LABEL_7;
    }
  }
  switch(v7)
  {
    case 1uLL:
      *(void *)std::string __str = v80;
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v78) < 0)
        {
          sub_4200(v62, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)std::string::value_type v62 = __dst;
          uint64_t v63 = v78;
        }
        int v64 = 5;
        unint64_t v42 = *(void *)(a1 + 488);
        if (v42 >= *(void *)(a1 + 496))
        {
          int v44 = sub_D2F30((void **)(a1 + 480), (uint64_t)v62);
          int v45 = SHIBYTE(v63);
          *(void *)(a1 + 488) = v44;
          if (v45 < 0) {
            operator delete(v62[0]);
          }
        }
        else
        {
          long long v43 = *(_OWORD *)v62;
          *(void *)(v42 + 16) = v63;
          *(_OWORD *)unint64_t v42 = v43;
          *(_DWORD *)(v42 + 24) = v64;
          *(void *)(a1 + 488) = v42 + 32;
        }
      }
      uint64_t v46 = sub_DC734(a1 + 344, (int *)v4 + 14, (uint64_t *)__str);
      break;
    case 2uLL:
      *(_OWORD *)std::string __str = v80;
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v78) < 0)
        {
          sub_4200(v62, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)std::string::value_type v62 = __dst;
          uint64_t v63 = v78;
        }
        int v64 = 5;
        unint64_t v47 = *(void *)(a1 + 488);
        if (v47 >= *(void *)(a1 + 496))
        {
          int v49 = sub_D2F30((void **)(a1 + 480), (uint64_t)v62);
          int v50 = SHIBYTE(v63);
          *(void *)(a1 + 488) = v49;
          if (v50 < 0) {
            operator delete(v62[0]);
          }
        }
        else
        {
          long long v48 = *(_OWORD *)v62;
          *(void *)(v47 + 16) = v63;
          *(_OWORD *)unint64_t v47 = v48;
          *(_DWORD *)(v47 + 24) = v64;
          *(void *)(a1 + 488) = v47 + 32;
        }
      }
      uint64_t v46 = (uint64_t)sub_DC9C8(a1 + 344, (int *)v4 + 14, (uint64_t *)__str);
      break;
    case 3uLL:
      *(_OWORD *)std::string __str = v80;
      *(void *)&__str[16] = v81;
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v78) < 0)
        {
          sub_4200(v62, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)std::string::value_type v62 = __dst;
          uint64_t v63 = v78;
        }
        int v64 = 5;
        unint64_t v51 = *(void *)(a1 + 488);
        if (v51 >= *(void *)(a1 + 496))
        {
          unint64_t v53 = sub_D2F30((void **)(a1 + 480), (uint64_t)v62);
          int v54 = SHIBYTE(v63);
          *(void *)(a1 + 488) = v53;
          if (v54 < 0) {
            operator delete(v62[0]);
          }
        }
        else
        {
          long long v52 = *(_OWORD *)v62;
          *(void *)(v51 + 16) = v63;
          *(_OWORD *)unint64_t v51 = v52;
          *(_DWORD *)(v51 + 24) = v64;
          *(void *)(a1 + 488) = v51 + 32;
        }
      }
      uint64_t v46 = sub_DD060(a1 + 344, (_DWORD *)v4 + 14, (uint64_t *)__str);
      break;
    case 4uLL:
      *(_OWORD *)std::string __str = v80;
      *(_OWORD *)&__str[16] = v81;
      if (*(unsigned char *)(a1 + 473))
      {
        if (SHIBYTE(v78) < 0)
        {
          sub_4200(v62, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)std::string::value_type v62 = __dst;
          uint64_t v63 = v78;
        }
        int v64 = 5;
        unint64_t v55 = *(void *)(a1 + 488);
        if (v55 >= *(void *)(a1 + 496))
        {
          uint64_t v57 = sub_D2F30((void **)(a1 + 480), (uint64_t)v62);
          int v58 = SHIBYTE(v63);
          *(void *)(a1 + 488) = v57;
          if (v58 < 0) {
            operator delete(v62[0]);
          }
        }
        else
        {
          long long v56 = *(_OWORD *)v62;
          *(void *)(v55 + 16) = v63;
          *(_OWORD *)unint64_t v55 = v56;
          *(_DWORD *)(v55 + 24) = v64;
          *(void *)(a1 + 488) = v55 + 32;
        }
      }
      uint64_t v46 = sub_1BE4DC(a1 + 344, (_DWORD *)v4 + 14, (int64x2_t *)__str);
      break;
    default:
      JUMPOUT(0);
  }
  uint64_t v40 = v46;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_154;
  }
LABEL_118:
  if (SHIBYTE(v78) < 0) {
    goto LABEL_155;
  }
  return v40;
}

void sub_C1A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 169) < 0) {
    operator delete(*(void **)(v33 - 192));
  }
  if (*(char *)(v33 - 137) < 0) {
    operator delete(*(void **)(v33 - 160));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C1BF4(std::string::size_type a1)
{
  std::string::size_type v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    std::string::size_type v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    BOOL v4 = std::string::append(&v50, "'");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    memset(&v48, 0, sizeof(v48));
    std::string::push_back(&v48, 56);
    std::string::push_back(&v48, 51);
    std::string::push_back(&v48, 54);
    std::string::push_back(&v48, 49);
    std::string::push_back(&v48, 50);
    std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v7 = &v48;
    }
    else {
      unint64_t v7 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v48.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      __darwin_ct_rune_t v8 = (std::string *)((char *)v7 + size - 1);
      if (v8 > v7)
      {
        long long v9 = &v7->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v10 = *(v9 - 1);
          *(v9 - 1) = v8->__r_.__value_.__s.__data_[0];
          v8->__r_.__value_.__s.__data_[0] = v10;
          __darwin_ct_rune_t v8 = (std::string *)((char *)v8 - 1);
          BOOL v11 = v9++ >= (char *)v8;
        }
        while (!v11);
      }
    }
    uint64_t v12 = std::string::insert(&v48, 0, "exprtk.hpp:");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v54 = -1;
    *(_OWORD *)long long v56 = 0u;
    *(_OWORD *)uint64_t v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
    int v55 = 1;
    int v52 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v53, (const std::string *)(a1 + 112));
    uint64_t v54 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v56, &__str);
    std::string::operator=((std::string *)&v57[1], &v49);
    uint64_t v14 = *(void *)(a1 + 568);
    uint64_t v15 = *(void *)(a1 + 560);
    uint64_t v16 = 30 * ((v14 - v15) >> 3) - 1;
    if (v14 == v15) {
      uint64_t v16 = 0;
    }
    if (v16 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v15 = *(void *)(a1 + 560);
      uint64_t v14 = *(void *)(a1 + 568);
    }
    if (v14 == v15)
    {
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v18 = *(void *)(v15 + 8 * (v17 / 0x1E)) + 136 * (v17 % 0x1E);
    }
    sub_B5158(v18, (uint64_t)&v52);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v60) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_49:
        if ((SHIBYTE(v57[0]) & 0x80000000) == 0) {
          goto LABEL_50;
        }
        goto LABEL_58;
      }
    }
    else if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v57[1]);
    if ((SHIBYTE(v57[0]) & 0x80000000) == 0)
    {
LABEL_50:
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_51;
      }
      goto LABEL_59;
    }
LABEL_58:
    operator delete(v56[0]);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_60;
    }
LABEL_59:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_61;
    }
LABEL_60:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_54;
      }
      goto LABEL_62;
    }
LABEL_61:
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_63:
      operator delete(v50.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_62:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_63;
  }
  std::string::size_type v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v3) {
    std::string::size_type v3 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v3 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v3;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v3 + 8));
  *(void *)(a1 + 136) = *(void *)(v3 + 32);
  uint64_t v19 = sub_B7FE4(a1, 0);
  if (!v19)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99F0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR044 - Failed to parse condition for if-statement");
    memset(&v49, 0, sizeof(v49));
    std::string::push_back(&v49, 56);
    std::string::push_back(&v49, 52);
    std::string::push_back(&v49, 54);
    std::string::push_back(&v49, 49);
    std::string::push_back(&v49, 50);
    std::string::size_type v23 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v24 = &v49;
    }
    else {
      int v24 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = v49.__r_.__value_.__l.__size_;
    }
    if (v23)
    {
      BOOL v25 = (std::string *)((char *)v24 + v23 - 1);
      if (v25 > v24)
      {
        uint64_t v26 = &v24->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v27 = *(v26 - 1);
          *(v26 - 1) = v25->__r_.__value_.__s.__data_[0];
          v25->__r_.__value_.__s.__data_[0] = v27;
          BOOL v25 = (std::string *)((char *)v25 - 1);
          BOOL v11 = v26++ >= (char *)v25;
        }
        while (!v11);
      }
    }
    __darwin_ct_rune_t v28 = std::string::insert(&v49, 0, "exprtk.hpp:");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v54 = -1;
    *(_OWORD *)long long v56 = 0u;
    *(_OWORD *)uint64_t v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
    int v55 = 1;
    int v52 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v53, (const std::string *)(a1 + 112));
    uint64_t v54 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v56, &__str);
    std::string::operator=((std::string *)&v57[1], &v50);
    uint64_t v30 = *(void *)(a1 + 568);
    uint64_t v31 = *(void *)(a1 + 560);
    uint64_t v32 = 30 * ((v30 - v31) >> 3) - 1;
    if (v30 == v31) {
      uint64_t v32 = 0;
    }
    if (v32 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v31 = *(void *)(a1 + 560);
      uint64_t v30 = *(void *)(a1 + 568);
    }
    if (v30 == v31)
    {
      uint64_t v34 = 0;
    }
    else
    {
      unint64_t v33 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v34 = *(void *)(v31 + 8 * (v33 / 0x1E)) + 136 * (v33 % 0x1E);
    }
    sub_B5158(v34, (uint64_t)&v52);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v60) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_85:
        if ((SHIBYTE(v57[0]) & 0x80000000) == 0) {
          goto LABEL_86;
        }
        goto LABEL_93;
      }
    }
    else if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(v57[1]);
    if ((SHIBYTE(v57[0]) & 0x80000000) == 0)
    {
LABEL_86:
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_94;
    }
LABEL_93:
    operator delete(v56[0]);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_95;
    }
LABEL_94:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_96;
    }
LABEL_95:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_97;
      }
      return 0;
    }
LABEL_96:
    operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_97:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  uint64_t v20 = v19;
  int v21 = *(_DWORD *)(a1 + 104);
  if (v21 != 41)
  {
    if (v21 == 44)
    {
      return sub_1BEE14(a1, v19);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B8890;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR045 - Invalid if-statement");
    memset(&v49, 0, sizeof(v49));
    std::string::push_back(&v49, 48);
    std::string::push_back(&v49, 56);
    std::string::push_back(&v49, 54);
    std::string::push_back(&v49, 49);
    std::string::push_back(&v49, 50);
    std::string::size_type v36 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v37 = &v49;
    }
    else {
      BOOL v37 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v49.__r_.__value_.__l.__size_;
    }
    if (v36)
    {
      BOOL v38 = (std::string *)((char *)v37 + v36 - 1);
      if (v38 > v37)
      {
        unint64_t v39 = &v37->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v40 = *(v39 - 1);
          *(v39 - 1) = v38->__r_.__value_.__s.__data_[0];
          v38->__r_.__value_.__s.__data_[0] = v40;
          BOOL v38 = (std::string *)((char *)v38 - 1);
          BOOL v11 = v39++ >= (char *)v38;
        }
        while (!v11);
      }
    }
    __darwin_ct_rune_t v41 = std::string::insert(&v49, 0, "exprtk.hpp:");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v54 = -1;
    *(_OWORD *)long long v56 = 0u;
    *(_OWORD *)uint64_t v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
    int v55 = 1;
    int v52 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v53, (const std::string *)(a1 + 112));
    uint64_t v54 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v56, &__str);
    std::string::operator=((std::string *)&v57[1], &v50);
    uint64_t v43 = *(void *)(a1 + 568);
    uint64_t v44 = *(void *)(a1 + 560);
    uint64_t v45 = 30 * ((v43 - v44) >> 3) - 1;
    if (v43 == v44) {
      uint64_t v45 = 0;
    }
    if (v45 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v44 = *(void *)(a1 + 560);
      uint64_t v43 = *(void *)(a1 + 568);
    }
    if (v43 == v44)
    {
      uint64_t v47 = 0;
    }
    else
    {
      unint64_t v46 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v47 = *(void *)(v44 + 8 * (v46 / 0x1E)) + 136 * (v46 % 0x1E);
    }
    sub_B5158(v47, (uint64_t)&v52);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v60) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_105:
        if ((SHIBYTE(v57[0]) & 0x80000000) == 0) {
          goto LABEL_106;
        }
        goto LABEL_116;
      }
    }
    else if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
      goto LABEL_105;
    }
    operator delete(v57[1]);
    if ((SHIBYTE(v57[0]) & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_117;
    }
LABEL_116:
    operator delete(v56[0]);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_108;
      }
      goto LABEL_118;
    }
LABEL_117:
    operator delete(v53.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_108:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_109;
      }
      goto LABEL_119;
    }
LABEL_118:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_109:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 17
          && (*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 18)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
        return 0;
      }
LABEL_120:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_110;
    }
LABEL_119:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_120;
  }
  std::string::size_type v35 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v35) {
    std::string::size_type v35 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v35 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v35;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v35 + 8));
  *(void *)(a1 + 136) = *(void *)(v35 + 32);

  return sub_1BFE8C(a1, v20);
}

void sub_C2630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a30);
  goto LABEL_6;
}

uint64_t sub_C2770(std::string::size_type a1)
{
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  std::string::size_type v2 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v2) {
    std::string::size_type v2 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v2 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v2;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v2 + 8));
  *(void *)(a1 + 136) = *(void *)(v2 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A00;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR052 - Expected '(' at start of while-loop condition statement");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 48);
    std::string::push_back(&v71, 56);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v5 = &v71;
    }
    else {
      long long v5 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unint64_t v6 = (std::string *)((char *)v5 + size - 1);
      if (v6 > v5)
      {
        unint64_t v7 = &v5->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v8 = *(v7 - 1);
          *(v7 - 1) = v6->__r_.__value_.__s.__data_[0];
          v6->__r_.__value_.__s.__data_[0] = v8;
          unint64_t v6 = (std::string *)((char *)v6 - 1);
          BOOL v9 = v7++ >= (char *)v6;
        }
        while (!v9);
      }
    }
    std::string::value_type v10 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    char v76 = 0;
    LOBYTE(v74[1]) = 0;
    uint64_t v77 = -1;
    *(_OWORD *)unint64_t v79 = 0u;
    *(_OWORD *)long long v80 = 0u;
    long long v81 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    LODWORD(v74[0]) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)&v74[1], (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v79, &__str);
    std::string::operator=((std::string *)&v80[1], &v72);
    uint64_t v12 = *(void *)(a1 + 568);
    uint64_t v13 = *(void *)(a1 + 560);
    uint64_t v14 = 30 * ((v12 - v13) >> 3) - 1;
    if (v12 == v13) {
      uint64_t v14 = 0;
    }
    if (v14 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v13 = *(void *)(a1 + 560);
      uint64_t v12 = *(void *)(a1 + 568);
    }
    if (v12 == v13)
    {
      uint64_t v16 = 0;
    }
    else
    {
      unint64_t v15 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v16 = *(void *)(v13 + 8 * (v15 / 0x1E)) + 136 * (v15 % 0x1E);
    }
    sub_B5158(v16, (uint64_t)v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_47:
        if ((SHIBYTE(v80[0]) & 0x80000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_56;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(v80[1]);
    if ((SHIBYTE(v80[0]) & 0x80000000) == 0)
    {
LABEL_48:
      if ((v76 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_57;
    }
LABEL_56:
    operator delete(v79[0]);
    if ((v76 & 0x80000000) == 0)
    {
LABEL_49:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
LABEL_57:
    operator delete(v74[1]);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_51;
      }
      goto LABEL_59;
    }
LABEL_58:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_60:
      operator delete(__str.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_59:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_60;
  }
  std::string::size_type v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v3) {
    std::string::size_type v3 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v3 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v3;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v3 + 8));
  *(void *)(a1 + 136) = *(void *)(v3 + 32);
  uint64_t v86 = sub_B7FE4(a1, 0);
  if (!v86)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A10;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR053 - Failed to parse condition for while-loop");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 56);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v19 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v71;
    }
    else {
      uint64_t v20 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = v71.__r_.__value_.__l.__size_;
    }
    if (v19)
    {
      int v21 = (std::string *)((char *)v20 + v19 - 1);
      if (v21 > v20)
      {
        uint64_t v22 = &v20->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v23 = *(v22 - 1);
          *(v22 - 1) = v21->__r_.__value_.__s.__data_[0];
          v21->__r_.__value_.__s.__data_[0] = v23;
          int v21 = (std::string *)((char *)v21 - 1);
          BOOL v9 = v22++ >= (char *)v21;
        }
        while (!v9);
      }
    }
    int v24 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    char v76 = 0;
    LOBYTE(v74[1]) = 0;
    uint64_t v77 = -1;
    *(_OWORD *)unint64_t v79 = 0u;
    *(_OWORD *)long long v80 = 0u;
    long long v81 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    LODWORD(v74[0]) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)&v74[1], (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v79, &__str);
    std::string::operator=((std::string *)&v80[1], &v72);
    uint64_t v26 = *(void *)(a1 + 568);
    uint64_t v27 = *(void *)(a1 + 560);
    uint64_t v28 = 30 * ((v26 - v27) >> 3) - 1;
    if (v26 == v27) {
      uint64_t v28 = 0;
    }
    if (v28 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v27 = *(void *)(a1 + 560);
      uint64_t v26 = *(void *)(a1 + 568);
    }
    if (v26 == v27)
    {
      uint64_t v30 = 0;
    }
    else
    {
      unint64_t v29 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v30 = *(void *)(v27 + 8 * (v29 / 0x1E)) + 136 * (v29 % 0x1E);
    }
    sub_B5158(v30, (uint64_t)v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_80:
        if ((SHIBYTE(v80[0]) & 0x80000000) == 0) {
          goto LABEL_81;
        }
        goto LABEL_88;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
    operator delete(v80[1]);
    if ((SHIBYTE(v80[0]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((v76 & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v79[0]);
    if ((v76 & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_90;
    }
LABEL_89:
    operator delete(v74[1]);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_84;
      }
      goto LABEL_91;
    }
LABEL_90:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_84:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_92;
      }
      return 0;
    }
LABEL_91:
    operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_92:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  int v17 = *(_DWORD *)(a1 + 104);
  if (v17 != 41)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B92B0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR054 - Expected ')' at end of while-loop condition statement");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::push_back(&v71, 56);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v32 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v33 = &v71;
    }
    else {
      unint64_t v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v32 = v71.__r_.__value_.__l.__size_;
    }
    if (v32)
    {
      uint64_t v34 = (std::string *)((char *)v33 + v32 - 1);
      if (v34 > v33)
      {
        std::string::size_type v35 = &v33->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v36 = *(v35 - 1);
          *(v35 - 1) = v34->__r_.__value_.__s.__data_[0];
          v34->__r_.__value_.__s.__data_[0] = v36;
          uint64_t v34 = (std::string *)((char *)v34 - 1);
          BOOL v9 = v35++ >= (char *)v34;
        }
        while (!v9);
      }
    }
    BOOL v37 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    char v76 = 0;
    LOBYTE(v74[1]) = 0;
    uint64_t v77 = -1;
    *(_OWORD *)unint64_t v79 = 0u;
    *(_OWORD *)long long v80 = 0u;
    long long v81 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    LODWORD(v74[0]) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)&v74[1], (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v79, &__str);
    std::string::operator=((std::string *)&v80[1], &v72);
    uint64_t v39 = *(void *)(a1 + 568);
    uint64_t v40 = *(void *)(a1 + 560);
    uint64_t v41 = 30 * ((v39 - v40) >> 3) - 1;
    if (v39 == v40) {
      uint64_t v41 = 0;
    }
    if (v41 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v40 = *(void *)(a1 + 560);
      uint64_t v39 = *(void *)(a1 + 568);
    }
    if (v39 == v40)
    {
      uint64_t v43 = 0;
    }
    else
    {
      unint64_t v42 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v43 = *(void *)(v40 + 8 * (v42 / 0x1E)) + 136 * (v42 % 0x1E);
    }
    sub_B5158(v43, (uint64_t)v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_99:
        if ((SHIBYTE(v80[0]) & 0x80000000) == 0) {
          goto LABEL_100;
        }
        goto LABEL_139;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_99;
    }
    operator delete(v80[1]);
    if ((SHIBYTE(v80[0]) & 0x80000000) == 0)
    {
LABEL_100:
      if ((v76 & 0x80000000) == 0) {
        goto LABEL_101;
      }
      goto LABEL_140;
    }
LABEL_139:
    operator delete(v79[0]);
    if ((v76 & 0x80000000) == 0)
    {
LABEL_101:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_102;
      }
      goto LABEL_141;
    }
LABEL_140:
    operator delete(v74[1]);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_103;
      }
      goto LABEL_142;
    }
LABEL_141:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_143;
    }
LABEL_142:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      unint64_t v44 = *(void *)(a1 + 632);
      if (v44) {
        goto LABEL_105;
      }
      goto LABEL_95;
    }
LABEL_143:
    operator delete(__str.__r_.__value_.__l.__data_);
    unint64_t v44 = *(void *)(a1 + 632);
    if (v44) {
      goto LABEL_105;
    }
LABEL_95:
    sub_1C2568(a1 + 600);
    unint64_t v44 = *(void *)(a1 + 632);
    goto LABEL_105;
  }
  std::string::size_type v18 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v18) {
    std::string::size_type v18 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v18 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v18;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v18 + 8));
  *(void *)(a1 + 136) = *(void *)(v18 + 32);
  unint64_t v44 = *(void *)(a1 + 632);
  if (!v44) {
    goto LABEL_95;
  }
LABEL_105:
  uint64_t v45 = *(void *)(a1 + 608);
  unint64_t v46 = (void *)(v45 + 8 * (v44 >> 12));
  if (*(void *)(a1 + 616) == v45) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = *v46 + (v44 & 0xFFF);
  }
  if (v47 == *v46) {
    uint64_t v47 = *(v46 - 1) + 4096;
  }
  *(unsigned char *)(v47 - 1) = 0;
  *(void *)(a1 + 632) = v44 - 1;
  ++*(void *)(a1 + 640);
  if (v17 == 41)
  {
    char v75 = 10;
    strcpy((char *)v74, "while-loop");
    uint64_t v48 = sub_CF240(a1, (uint64_t)v74);
    uint64_t v49 = v48;
    uint64_t v85 = v48;
    if (v75 < 0)
    {
      operator delete(v74[0]);
      if (v49)
      {
LABEL_113:
        uint64_t result = sub_1C20B8(a1 + 344, &v86, &v85, *(unsigned char *)(*(void *)(*(void *)(a1 + 608) + ((*(void *)(a1 + 632) >> 9) & 0x7FFFFFFFFFFFF8))+ (*(void *)(a1 + 632) & 0xFFFLL)));
        if (result) {
          return result;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B93C0;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR056 - Failed to synthesize while-loop");
        memset(&v71, 0, sizeof(v71));
        std::string::push_back(&v71, 54);
        std::string::push_back(&v71, 52);
        std::string::push_back(&v71, 56);
        std::string::push_back(&v71, 49);
        std::string::push_back(&v71, 50);
        std::string::size_type v50 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v51 = &v71;
        }
        else {
          unint64_t v51 = (std::string *)v71.__r_.__value_.__r.__words[0];
        }
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v50 = v71.__r_.__value_.__l.__size_;
        }
        if (v50)
        {
          int v52 = (std::string *)((char *)v51 + v50 - 1);
          if (v52 > v51)
          {
            std::string v53 = &v51->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v54 = *(v53 - 1);
              *(v53 - 1) = v52->__r_.__value_.__s.__data_[0];
              v52->__r_.__value_.__s.__data_[0] = v54;
              int v52 = (std::string *)((char *)v52 - 1);
              BOOL v9 = v53++ >= (char *)v52;
            }
            while (!v9);
          }
        }
        int v55 = std::string::insert(&v71, 0, "exprtk.hpp:");
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        char v76 = 0;
        LOBYTE(v74[1]) = 0;
        uint64_t v77 = -1;
        *(_OWORD *)unint64_t v79 = 0u;
        *(_OWORD *)long long v80 = 0u;
        long long v81 = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v83 = 0u;
        uint64_t v84 = 0;
        int v78 = 1;
        LODWORD(v74[0]) = *(_DWORD *)(a1 + 104);
        std::string::operator=((std::string *)&v74[1], (const std::string *)(a1 + 112));
        uint64_t v77 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)v79, &__str);
        std::string::operator=((std::string *)&v80[1], &v72);
        uint64_t v57 = *(void *)(a1 + 568);
        uint64_t v58 = *(void *)(a1 + 560);
        uint64_t v59 = 30 * ((v57 - v58) >> 3) - 1;
        if (v57 == v58) {
          uint64_t v59 = 0;
        }
        if (v59 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v58 = *(void *)(a1 + 560);
          uint64_t v57 = *(void *)(a1 + 568);
        }
        if (v57 == v58)
        {
          uint64_t v61 = 0;
        }
        else
        {
          unint64_t v60 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v61 = *(void *)(v58 + 8 * (v60 / 0x1E)) + 136 * (v60 % 0x1E);
        }
        sub_B5158(v61, (uint64_t)v74);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v83) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v81) & 0x80000000) == 0)
          {
LABEL_160:
            if ((SHIBYTE(v80[0]) & 0x80000000) == 0) {
              goto LABEL_161;
            }
            goto LABEL_167;
          }
        }
        else if ((SHIBYTE(v81) & 0x80000000) == 0)
        {
          goto LABEL_160;
        }
        operator delete(v80[1]);
        if ((SHIBYTE(v80[0]) & 0x80000000) == 0)
        {
LABEL_161:
          if ((v76 & 0x80000000) == 0) {
            goto LABEL_162;
          }
          goto LABEL_168;
        }
LABEL_167:
        operator delete(v79[0]);
        if ((v76 & 0x80000000) == 0)
        {
LABEL_162:
          if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_163;
          }
          goto LABEL_169;
        }
LABEL_168:
        operator delete(v74[1]);
        if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_163:
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_172;
          }
LABEL_170:
          int v67 = (void *)v71.__r_.__value_.__r.__words[0];
          goto LABEL_171;
        }
LABEL_169:
        operator delete(v72.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_172;
        }
        goto LABEL_170;
      }
    }
    else if (v48)
    {
      goto LABEL_113;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B93E0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR055 - Failed to parse body of while-loop");
    *((unsigned char *)&v72.__r_.__value_.__s + 23) = 0;
    v72.__r_.__value_.__s.__data_[0] = 0;
    char v76 = 0;
    LOBYTE(v74[1]) = 0;
    uint64_t v77 = -1;
    *(_OWORD *)unint64_t v79 = 0u;
    *(_OWORD *)long long v80 = 0u;
    long long v81 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    LODWORD(v74[0]) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)&v74[1], (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v79, &__str);
    std::string::operator=((std::string *)&v80[1], &v72);
    uint64_t v62 = *(void *)(a1 + 568);
    uint64_t v63 = *(void *)(a1 + 560);
    uint64_t v64 = 30 * ((v62 - v63) >> 3) - 1;
    if (v62 == v63) {
      uint64_t v64 = 0;
    }
    if (v64 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v63 = *(void *)(a1 + 560);
      uint64_t v62 = *(void *)(a1 + 568);
    }
    if (v62 == v63)
    {
      uint64_t v66 = 0;
    }
    else
    {
      unint64_t v65 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v66 = *(void *)(v63 + 8 * (v65 / 0x1E)) + 136 * (v65 % 0x1E);
    }
    sub_B5158(v66, (uint64_t)v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_148:
        if ((SHIBYTE(v80[0]) & 0x80000000) == 0) {
          goto LABEL_149;
        }
        goto LABEL_154;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_148;
    }
    operator delete(v80[1]);
    if ((SHIBYTE(v80[0]) & 0x80000000) == 0)
    {
LABEL_149:
      if ((v76 & 0x80000000) == 0) {
        goto LABEL_150;
      }
      goto LABEL_155;
    }
LABEL_154:
    operator delete(v79[0]);
    if ((v76 & 0x80000000) == 0)
    {
LABEL_150:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_172;
      }
LABEL_156:
      int v67 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_171:
      operator delete(v67);
LABEL_172:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      goto LABEL_174;
    }
LABEL_155:
    operator delete(v74[1]);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_156;
  }
LABEL_174:
  if (v85 && (*(unsigned int (**)(uint64_t))(*(void *)v85 + 32))(v85) != 17)
  {
    if (!v85)
    {
LABEL_180:
      uint64_t v85 = 0;
      goto LABEL_181;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v85 + 32))(v85) != 18)
    {
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
      }
      goto LABEL_180;
    }
  }
LABEL_181:
  uint64_t v68 = (int64x2_t *)(a1 + 632);
  if (!v86 || (*(unsigned int (**)(uint64_t))(*(void *)v86 + 32))(v86) == 17) {
    goto LABEL_188;
  }
  if (!v86) {
    goto LABEL_187;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v86 + 32))(v86) != 18)
  {
    if (v86) {
      (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
    }
LABEL_187:
    uint64_t v86 = 0;
  }
LABEL_188:
  long long v69 = *(void ***)(a1 + 608);
  int64x2_t v70 = vaddq_s64(*v68, (int64x2_t)xmmword_20B8D90);
  *uint64_t v68 = v70;
  if (v70.i64[0] < 0x2000uLL) {
    return 0;
  }
  operator delete(*v69);
  uint64_t result = 0;
  *(void *)(a1 + 608) += 8;
  *(void *)(a1 + 632) -= 4096;
  return result;
}