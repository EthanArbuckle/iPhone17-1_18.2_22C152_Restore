void sub_79B47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a12);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v42 - 136));
  _Unwind_Resume(a1);
}

void sub_79B50C(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_79B520(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2[149] - a2[148];
  if (v5)
  {
    unint64_t v8 = 0;
    v9 = a2 + 148;
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 5);
    do
    {
      v10 = (long long *)sub_4A65E4(v9, v8);
      if (!sub_6F2FD8((uint64_t)v10)) {
        goto LABEL_3;
      }
      unint64_t v11 = *(void *)(sub_4A65E4(v9, v8) + 152);
      if (v8 >= -1 - 0x3333333333333333 * ((uint64_t)(a2[149] - a2[148]) >> 5)) {
        unint64_t v12 = sub_46C760(a2);
      }
      else {
        unint64_t v12 = *(void *)(sub_4A65E4(v9, v8 + 1) + 152);
      }
      sub_4AA8E0((char *)__dst, v10);
      uint64_t v35 = a3;
      long long v24 = 0uLL;
      v13 = (double *)sub_79F498(a5, (uint64_t)__dst, (uint64_t)__dst, &v24);
      BOOL v14 = v11 >= v12;
      if (v11 > v12) {
        unint64_t v12 = v11;
      }
      if (!v14)
      {
        v15 = v13;
        do
        {
          unint64_t v23 = *(void *)(sub_46C8EC(a2, v11) + 32);
          *(void *)&long long v24 = &v23;
          unsigned int v16 = *((_DWORD *)sub_79F0E8(a4, &v23, (uint64_t)&unk_20F06E0, (void **)&v24) + 6);
          uint64_t v18 = sub_46CCC8(a2, v11, v17);
          double v19 = v15[23] + (double)v18;
          v15[22] = (double)v18 / (double)v16 + v15[22];
          v15[23] = v19;
          ++v11;
        }
        while (v12 != v11);
      }
      if (v34 < 0)
      {
        operator delete(__p);
        if ((v32 & 0x80000000) == 0)
        {
LABEL_15:
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((v32 & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_16:
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
LABEL_21:
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_17:
        if (v26 < 0) {
          goto LABEL_23;
        }
        goto LABEL_3;
      }
LABEL_22:
      operator delete(v27);
      if (v26 < 0) {
LABEL_23:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v8;
    }
    while (v8 != v22);
  }
}

void sub_79B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79B75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79B770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79B784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_79B798(void *a1, unint64_t a2)
{
  if (0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v10 = &v15;
    }
    else {
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 7560 * a2;
}

void sub_79B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_79B9D8@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[148];
  uint64_t v5 = result[149];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4 != v5)
  {
    long long v7 = result;
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 5);
    if (v8 != 1)
    {
      for (unint64_t i = 1; i != v8; ++i)
      {
        uint64_t v11 = sub_4A65E4(v7 + 148, i - 1);
        if (!sub_6F326C((unsigned __int8 *)v11, a2))
        {
          uint64_t v12 = sub_4A65E4(v7 + 148, i);
          uint64_t v24 = sub_46CE10(v7, 0, 1, *(void *)(v11 + 152), 0, v13);
          uint64_t v15 = sub_46CE10(v7, 0, 1, *(void *)(v12 + 152), 0, v14);
          uint64_t v23 = v15;
          unint64_t v16 = *(void *)(a3 + 8);
          if (v16 >= *(void *)(a3 + 16))
          {
            v10 = sub_7A05B4((void **)a3, &v24, &v23);
          }
          else
          {
            sub_2F99CC(*(void **)(a3 + 8), v24, v15);
            v10 = (void *)(v16 + 16);
            *(void *)(a3 + 8) = v16 + 16;
          }
          *(void *)(a3 + 8) = v10;
        }
      }
      uint64_t v5 = v7[149];
    }
    result = (void *)sub_6F317C((unsigned __int8 *)(v5 - 160), a2);
    if (result)
    {
      uint64_t v18 = sub_46CE10(v7, 0, 1, *(void *)(v7[149] - 8), 0, v17);
      uint64_t v24 = v18;
      unint64_t v19 = sub_46C760(v7);
      uint64_t v21 = sub_46CE10(v7, 0, 1, v19 - 1, 1u, v20);
      uint64_t v23 = v21;
      unint64_t v22 = *(void *)(a3 + 8);
      if (v22 >= *(void *)(a3 + 16))
      {
        result = sub_7A05B4((void **)a3, &v24, &v23);
      }
      else
      {
        sub_2F99CC(*(void **)(a3 + 8), v18, v21);
        result = (void *)(v22 + 16);
        *(void *)(a3 + 8) = v22 + 16;
      }
      *(void *)(a3 + 8) = result;
    }
  }
  return result;
}

void sub_79BBA4(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_79BBF8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  long long v7 = (void *)sub_5231C((uint64_t)a4);
  if (*v7 == v7[1])
  {
    unint64_t v8 = *(long long **)(a2 + 16);
    v23[0] = a3;
    long long v9 = sub_79E944(v8, 0, v23);
    if (v9) {
      uint64_t v10 = (uint64_t)sub_4AA8E0((char *)&__dst, v9 + 1);
    }
    else {
      uint64_t v10 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v10)) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void **)nullsub_1(a4);
    sub_4AA8E0((char *)v13, &__dst);
    sub_79B9D8(v11, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v23, (long long *)v13, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_29;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v19);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_31:
      operator delete(v13[0]);
LABEL_14:
      sub_64A5F0(a4, (uint64_t)v23);
      if (v33)
      {
        char v34 = v33;
        operator delete(v33);
      }
      if (v32 < 0)
      {
        operator delete(v31);
        if ((v30 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v28 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_34;
        }
      }
      else if ((v30 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_35:
        operator delete(v25);
        if (v24 < 0) {
          goto LABEL_36;
        }
LABEL_21:
        if ((v44 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_37;
      }
LABEL_34:
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_21;
        }
LABEL_36:
        operator delete(v23[0]);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_22:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_38;
        }
LABEL_37:
        operator delete(v43);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_23:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_39;
        }
LABEL_38:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_24:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_25:
          if ((v36 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0) {
          return;
        }
LABEL_41:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_35;
    }
LABEL_30:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
}

void sub_79BE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_79BE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_79BEA4(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79BEB8(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79BECC(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79BEE0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4[139] == a4[140])
  {
    uint64_t v5 = *(long long **)(a2 + 16);
    v21[0] = a3;
    v6 = sub_79E944(v5, 0, v21);
    if (v6) {
      uint64_t v7 = (uint64_t)sub_4AA8E0((char *)&__dst, v6 + 1);
    }
    else {
      uint64_t v7 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v7)) {
      goto LABEL_29;
    }
    sub_4AA8E0((char *)v11, &__dst);
    sub_79B9D8(a4, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v21, (long long *)v11, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_14:
      unint64_t v8 = a4[140];
      if (v8 < a4[141])
      {
LABEL_15:
        sub_598A38(v8, (uint64_t)v21);
        uint64_t v9 = v8 + 176;
        a4[140] = v8 + 176;
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v9 = sub_64CC70(a4 + 139, (uint64_t)v21);
LABEL_22:
      a4[140] = v9;
      if (v31)
      {
        uint64_t v32 = v31;
        operator delete(v31);
      }
      if (v30 < 0)
      {
        operator delete(v29);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_26:
          if ((v26 & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_37;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_27:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v23);
        if (v22 < 0) {
          goto LABEL_39;
        }
LABEL_29:
        if ((v42 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_40;
      }
LABEL_37:
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_28:
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_29;
        }
LABEL_39:
        operator delete(v21[0]);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_30:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_31;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_31:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_42;
        }
LABEL_41:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_32:
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v34 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_44;
        }
LABEL_43:
        operator delete(v35);
        if ((v34 & 0x80000000) == 0) {
          return;
        }
LABEL_44:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_38;
    }
LABEL_20:
    operator delete(v11[0]);
    unint64_t v8 = a4[140];
    if (v8 < a4[141]) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
}

void sub_79C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_79C188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_79C1BC(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79C1D0(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

BOOL *sub_79C1E4(BOOL *a1, void *a2)
{
  strcpy((char *)__p, "output_all_route_names");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "output_highest_weighted_route_names");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_79C2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_79C2DC(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  uint64_t v13 = 0;
  char v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB5E0(v5, (uint64_t)__p);
  sub_79E588(a1, __p);
  v6 = v19;
  if (v19)
  {
    do
    {
      uint64_t v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    uint64_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v13;
    }
    char v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 107);
  return a1;
}

void sub_79C40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_79C444(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  uint64_t v13 = 0;
  char v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB370(v5, 2, *(unsigned __int8 *)(a3 + 1525), __p);
  sub_79E588(a1, __p);
  v6 = v19;
  if (v19)
  {
    do
    {
      uint64_t v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    uint64_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v13;
    }
    char v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 1482);
  return a1;
}

void sub_79C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_79C5B4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 1))
  {
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v6 = 0u;
    int v7 = 1065353216;
    sub_79C640(a1, (uint64_t)a2, (uint64_t)__p);
    sub_79C778(a1, a2, (uint64_t)__p);
    sub_79ED4C((int)__p, (void **)v6[0]);
    BOOL v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_79C62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79C640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)__p = 0u;
  int v17 = 1065353216;
  v3 = *(void **)a2;
  BOOL v4 = *(void **)(a2 + 8);
  if (*(void **)a2 != v4)
  {
    do
    {
      sub_79D674(a1, v3, (uint64_t)v15);
      v3 += 1541;
    }
    while (v3 != v4);
    uint64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v8 / 12328;
      do
      {
        sub_79D8AC(a1, (void *)(*(void *)a2 + v9), v10++, (uint64_t)v15, a3);
        v9 += 12328;
      }
      while (v11 != v10);
    }
  }
  char v12 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      char v12 = v13;
    }
    while (v13);
  }
  char v14 = v15[0];
  v15[0] = 0;
  if (v14) {
    operator delete(v14);
  }
}

void sub_79C750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79C764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79C778(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v67 = 0uLL;
  unint64_t v68 = 0;
  v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v65 = v7;
      *((double *)&v65 + 1) = v8;
      uint64_t v66 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v67.i64[1];
        if (v67.i64[1] >= v68)
        {
          uint64_t v12 = sub_7A3F2C(&v67, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v67.i64[1], (long long *)__dst);
          long long v11 = v65;
          *(void *)(v10 + 168) = v66;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v67.i64[1] = v12;
        sub_79FC80(v67.i64[0], v12, (uint64_t)v52, 0x2E8BA2E8BA2E8BA3 * ((v12 - v67.i64[0]) >> 4));
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_13:
        if (v56 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v57);
      if (v56 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v67.i64[1];
        uint64_t v14 = v67.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)v53 = 0u;
  int v54 = 1065353216;
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)v50 = 0u;
  int v51 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v53[1];
      if (v53[1] >= (void *)(0xFF55E3181697D6CDLL * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_78;
      }
      if (sub_13A8C(v49, v14))
      {
LABEL_27:
        sub_7A44F8(v67.i64[0], v67.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
        sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v52[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v52[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v52[1]) {
            unint64_t v18 = v16 % (unint64_t)v52[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v52[1] - 1) & v16;
        }
        unint64_t v19 = (void *)*((void *)v52[0] + v18);
        if (v19)
        {
          char v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_27;
                  }
                }
                else if ((v22 & ((unint64_t)v52[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                char v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_27;
                }
              }
              else
              {
                if ((void *)v21 >= v52[1]) {
                  v21 %= (unint64_t)v52[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              char v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      sub_4AA8E0((char *)v39, (long long *)v14);
      sub_79DD7C((void *)(*a2 + 12328 * *(void *)(v14 + 152)), (unsigned __int8 *)v14, (uint64_t)v38);
      sub_7998A0((uint64_t)__dst, (long long *)v39, (uint64_t)v38);
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      if (v48 < 0)
      {
        operator delete(v47);
        if ((v46 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v44 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_68;
        }
      }
      else if ((v46 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v45);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_53:
        if (v42 < 0) {
          goto LABEL_69;
        }
        goto LABEL_54;
      }
LABEL_68:
      operator delete(v43);
      if (v42 < 0)
      {
LABEL_69:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_70;
      }
LABEL_54:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_70:
      operator delete(v39[0]);
LABEL_55:
      uint64_t v23 = *a2 + 12328 * *(void *)(v14 + 152);
      char v24 = (uint64_t *)(v23 + 1112);
      unint64_t v25 = *(void *)(v23 + 1120);
      if (v25 >= *(void *)(v23 + 1128))
      {
        uint64_t v26 = sub_7A0D64(v24, (uint64_t)__dst);
      }
      else
      {
        sub_598A38(v25, (uint64_t)__dst);
        uint64_t v26 = v25 + 176;
        v24[1] = v25 + 176;
      }
      v24[1] = v26;
      sub_24AFC((uint64_t)v49, v14, v14);
      sub_7A06C8((uint64_t)v52, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A44F8(v67.i64[0], v67.i64[1], (uint64_t)v69, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
      sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
      if ((void)v65)
      {
        *((void *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_62:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_73;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_62;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_63:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_74;
      }
LABEL_73:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_64:
        if (v56 < 0) {
          goto LABEL_75;
        }
        goto LABEL_24;
      }
LABEL_74:
      operator delete(v57);
      if (v56 < 0) {
LABEL_75:
      }
        operator delete(__dst[0]);
LABEL_24:
      uint64_t v14 = v67.i64[0];
      if (v67.i64[0] == v67.i64[1])
      {
        uint64_t v15 = v53[1];
        goto LABEL_78;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_78:
  uint64_t v27 = a2[1];
  unint64_t v28 = 0xFF55E3181697D6CDLL * ((v27 - *a2) >> 3);
  if (v15 != (void *)v28 && v27 != *a2)
  {
    uint64_t v30 = 0;
    v31 = 0;
    do
    {
      sub_79E284(a1, a3, v31++, (void *)(*a2 + v30));
      v30 += 12328;
    }
    while ((char *)v28 != v31);
  }
  uint64_t v32 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      v37 = (void **)*v32;
      if (*((char *)v32 + 39) < 0) {
        operator delete(v32[2]);
      }
      operator delete(v32);
      uint64_t v32 = v37;
    }
    while (v37);
  }
  uint64_t v33 = v49[0];
  v49[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  char v34 = v53[0];
  if (v53[0])
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      operator delete(v34);
      char v34 = v35;
    }
    while (v35);
  }
  char v36 = v52[0];
  v52[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  if (v67.i64[0])
  {
    sub_79E680((uint64_t)&v67, v67.i64[0]);
    operator delete((void *)v67.i64[0]);
  }
}

void sub_79CD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  *(void *)(v43 + 8) = v44;
  sub_799948((uint64_t)&a43);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v45 - 144));
  _Unwind_Resume(a1);
}

void sub_79CDE0(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_79CDF4(unsigned char *a1, uint64_t *a2)
{
  if (*a1 || a1[1])
  {
    BOOL v4 = (void *)*a2;
    BOOL v5 = (void *)a2[1];
    if ((void *)*a2 == v5) {
      goto LABEL_10;
    }
    do
    {
      int v6 = sub_6484B0(v4, a1[2]);
      v4 += 945;
      if (v6) {
        BOOL v7 = v4 == v5;
      }
      else {
        BOOL v7 = 1;
      }
    }
    while (!v7);
    if (v6)
    {
LABEL_10:
      *(_OWORD *)__p = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      int v11 = 1065353216;
      sub_79CEE8((uint64_t)a1, a2, (uint64_t)__p);
      if (a1[1]) {
        sub_79D030((uint64_t)a1, a2, (uint64_t)__p);
      }
      if (*a1) {
        sub_787614((uint64_t **)a2);
      }
      sub_79ED4C((int)__p, (void **)v10[0]);
      double v8 = __p[0];
      __p[0] = 0;
      if (v8) {
        operator delete(v8);
      }
    }
  }
}

void sub_79CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79CEE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)uint8x8_t v17 = 0u;
  *(_OWORD *)__p = 0u;
  int v19 = 1065353216;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      double v8 = (void **)nullsub_1(v3);
      sub_79D674(a1, *v8, (uint64_t)v17);
      v3 += 7560;
    }
    while (v3 != v4);
    uint64_t v9 = a2[1] - *a2;
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v9 / 7560;
      do
      {
        uint64_t v13 = (void **)nullsub_1(*a2 + v10);
        sub_79D8AC(a1, *v13, v11++, (uint64_t)v17, a3);
        v10 += 7560;
      }
      while (v12 != v11);
    }
  }
  uint64_t v14 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = v17[0];
  v17[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_79D008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79D030(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v65 = 0uLL;
  unint64_t v66 = 0;
  int v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v63 = v7;
      *((double *)&v63 + 1) = v8;
      uint64_t v64 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v65.i64[1];
        if (v65.i64[1] >= v66)
        {
          uint64_t v12 = sub_7A3F2C(&v65, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v65.i64[1], (long long *)__dst);
          long long v11 = v63;
          *(void *)(v10 + 168) = v64;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v65.i64[1] = v12;
        sub_79FC80(v65.i64[0], v12, (uint64_t)v50, 0x2E8BA2E8BA2E8BA3 * ((v12 - v65.i64[0]) >> 4));
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_13:
        if (v54 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v55);
      if (v54 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      int v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v65.i64[1];
        uint64_t v14 = v65.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)int v51 = 0u;
  int v52 = 1065353216;
  *(_OWORD *)v47 = 0u;
  *(_OWORD *)char v48 = 0u;
  int v49 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v51[1];
      if (v51[1] >= (void *)(0xBAA6550FFBAA6551 * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_75;
      }
      if (sub_13A8C(v47, v14))
      {
LABEL_24:
        sub_7A4180(v65.i64[0], v65.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
        sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v50[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v50[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v50[1]) {
            unint64_t v18 = v16 % (unint64_t)v50[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v50[1] - 1) & v16;
        }
        int v19 = (void *)*((void *)v50[0] + v18);
        if (v19)
        {
          char v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_24;
                  }
                }
                else if ((v22 & ((uint64_t)v50[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                char v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_24;
                }
              }
              else
              {
                if ((void *)v21 >= v50[1]) {
                  v21 %= (unint64_t)v50[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              char v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      uint64_t v23 = sub_79DB3C(a2, v16);
      char v24 = *(void **)nullsub_1(v23);
      sub_4AA8E0((char *)v37, (long long *)v14);
      sub_79DD7C(v24, (unsigned __int8 *)v14, (uint64_t)v36);
      sub_7998A0((uint64_t)__dst, (long long *)v37, (uint64_t)v36);
      if (v36[0])
      {
        v36[1] = v36[0];
        operator delete(v36[0]);
      }
      if (v46 < 0)
      {
        operator delete(v45);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_65;
        }
      }
      else if ((v44 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_53:
        if (v40 < 0) {
          goto LABEL_66;
        }
        goto LABEL_54;
      }
LABEL_65:
      operator delete(v41);
      if (v40 < 0)
      {
LABEL_66:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_67;
      }
LABEL_54:
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_67:
      operator delete(v37[0]);
LABEL_55:
      sub_64BB20((uint64_t *)(*a2 + 7560 * *(void *)(v14 + 152)), (uint64_t)__dst);
      sub_24AFC((uint64_t)v47, v14, v14);
      sub_7A06C8((uint64_t)v50, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A4180(v65.i64[0], v65.i64[1], (uint64_t)&v67, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
      sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
      if ((void)v63)
      {
        *((void *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_59:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_70;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_71;
      }
LABEL_70:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_61:
        if (v54 < 0) {
          goto LABEL_72;
        }
        goto LABEL_25;
      }
LABEL_71:
      operator delete(v55);
      if (v54 < 0) {
LABEL_72:
      }
        operator delete(__dst[0]);
LABEL_25:
      uint64_t v14 = v65.i64[0];
      if (v65.i64[0] == v65.i64[1])
      {
        uint64_t v15 = v51[1];
        goto LABEL_75;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_75:
  uint64_t v25 = a2[1];
  unint64_t v26 = 0xBAA6550FFBAA6551 * ((v25 - *a2) >> 3);
  if (v15 != (void *)v26 && v25 != *a2)
  {
    uint64_t v28 = 0;
    v29 = 0;
    do
    {
      sub_79DF9C(a1, a3, v29++, (uint64_t *)(*a2 + v28));
      v28 += 7560;
    }
    while ((char *)v26 != v29);
  }
  uint64_t v30 = (void **)v48[0];
  if (v48[0])
  {
    do
    {
      uint64_t v35 = (void **)*v30;
      if (*((char *)v30 + 39) < 0) {
        operator delete(v30[2]);
      }
      operator delete(v30);
      uint64_t v30 = v35;
    }
    while (v35);
  }
  v31 = v47[0];
  v47[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = v51[0];
  if (v51[0])
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  char v34 = v50[0];
  v50[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  if (v65.i64[0])
  {
    sub_79E680((uint64_t)&v65, v65.i64[0]);
    operator delete((void *)v65.i64[0]);
  }
}

void sub_79D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a12);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v42 - 136));
  _Unwind_Resume(a1);
}

void sub_79D660(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 136));
  _Unwind_Resume(a1);
}

unint64_t sub_79D674(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t result = (unint64_t)sub_470AF8(a2, v18);
  BOOL v5 = v18[0];
  int v6 = v18[1];
  uint64_t v7 = v19;
  unint64_t v8 = v20;
  if (v18[0])
  {
    if (v19)
    {
      while (1)
      {
        unint64_t v11 = sub_470ADC(v5);
        unint64_t result = sub_470ADC(v7);
        if ((unint64_t)v6 >= v11 || v8 >= result)
        {
          if ((unint64_t)v6 < v11 == v8 < result) {
            return result;
          }
        }
        else
        {
          uint64_t v12 = sub_470B40(v5, (uint64_t)v6);
          unint64_t result = sub_470B40(v7, v8);
          if (v12 == result) {
            return result;
          }
        }
        uint64_t v9 = (unsigned int *)sub_470B40(v5, (uint64_t)v6);
        unint64_t v17 = (((unint64_t)(v9[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v9[1] << 32) | *v9) ^ 0x1000000000000;
        unint64_t v21 = &v17;
        uint64_t v10 = sub_79F0E8(a3, &v17, (uint64_t)&unk_20F06E0, &v21);
        ++*((_DWORD *)v10 + 6);
        int v6 = (void *)((char *)v6 + 1);
      }
    }
    for (unint64_t result = sub_470ADC(v18[0]); (unint64_t)v6 < result; unint64_t result = sub_470ADC(v5))
    {
      uint64_t v15 = (unsigned int *)sub_470B40(v5, (uint64_t)v6);
      unint64_t v17 = (((unint64_t)(v15[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15[1] << 32) | *v15) ^ 0x1000000000000;
      unint64_t v21 = &v17;
      unint64_t v16 = sub_79F0E8(a3, &v17, (uint64_t)&unk_20F06E0, &v21);
      ++*((_DWORD *)v16 + 6);
      int v6 = (void *)((char *)v6 + 1);
    }
  }
  else if (v19)
  {
    for (unint64_t result = sub_470ADC(v19); v8 < result; unint64_t result = sub_470ADC(v7))
    {
      uint64_t v13 = (unsigned int *)sub_470B40(0, (uint64_t)v6);
      unint64_t v17 = (((unint64_t)(v13[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v13[1] << 32) | *v13) ^ 0x1000000000000;
      unint64_t v21 = &v17;
      uint64_t v14 = sub_79F0E8(a3, &v17, (uint64_t)&unk_20F06E0, &v21);
      ++*((_DWORD *)v14 + 6);
      int v6 = (void *)((char *)v6 + 1);
    }
  }
  return result;
}

void sub_79D8AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2[149] - a2[148];
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 148;
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 5);
    do
    {
      uint64_t v10 = (long long *)sub_4A65E4(v9, v8);
      if (!sub_6F2FD8((uint64_t)v10)) {
        goto LABEL_3;
      }
      unint64_t v11 = *(void *)(sub_4A65E4(v9, v8) + 152);
      if (v8 >= -1 - 0x3333333333333333 * ((uint64_t)(a2[149] - a2[148]) >> 5)) {
        unint64_t v12 = sub_470ADC(a2);
      }
      else {
        unint64_t v12 = *(void *)(sub_4A65E4(v9, v8 + 1) + 152);
      }
      sub_4AA8E0((char *)__dst, v10);
      uint64_t v36 = a3;
      long long v25 = 0uLL;
      uint64_t v13 = (double *)sub_79F498(a5, (uint64_t)__dst, (uint64_t)__dst, &v25);
      BOOL v14 = v11 >= v12;
      if (v11 > v12) {
        unint64_t v12 = v11;
      }
      if (!v14)
      {
        uint64_t v15 = v13;
        do
        {
          unint64_t v16 = (unsigned int *)sub_470B40(a2, v11);
          unint64_t v24 = (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000;
          *(void *)&long long v25 = &v24;
          unsigned int v17 = *((_DWORD *)sub_79F0E8(a4, &v24, (uint64_t)&unk_20F06E0, (void **)&v25) + 6);
          uint64_t v19 = sub_470F2C(a2, v11, v18);
          double v20 = v15[23] + (double)v19;
          v15[22] = (double)v19 / (double)v17 + v15[22];
          v15[23] = v20;
          ++v11;
        }
        while (v12 != v11);
      }
      if (v35 < 0)
      {
        operator delete(__p);
        if ((v33 & 0x80000000) == 0)
        {
LABEL_15:
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((v33 & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(v32);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_16:
        if ((v29 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
LABEL_21:
      operator delete(v30);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_17:
        if (v27 < 0) {
          goto LABEL_23;
        }
        goto LABEL_3;
      }
LABEL_22:
      operator delete(v28);
      if (v27 < 0) {
LABEL_23:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v8;
    }
    while (v8 != v23);
  }
}

void sub_79DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79DB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79DB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_79DB3C(void *a1, unint64_t a2)
{
  if (0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 7560 * a2;
}

void sub_79DC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_79DD7C@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[148];
  uint64_t v5 = result[149];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4 != v5)
  {
    long long v7 = result;
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 5);
    if (v8 != 1)
    {
      for (unint64_t i = 1; i != v8; ++i)
      {
        uint64_t v11 = sub_4A65E4(v7 + 148, i - 1);
        if (!sub_6F326C((unsigned __int8 *)v11, a2))
        {
          uint64_t v12 = sub_4A65E4(v7 + 148, i);
          uint64_t v24 = sub_471074(v7, 0, 1, *(void *)(v11 + 152), 0, v13);
          uint64_t v15 = sub_471074(v7, 0, 1, *(void *)(v12 + 152), 0, v14);
          uint64_t v23 = v15;
          unint64_t v16 = *(void *)(a3 + 8);
          if (v16 >= *(void *)(a3 + 16))
          {
            uint64_t v10 = sub_7A05B4((void **)a3, &v24, &v23);
          }
          else
          {
            sub_2F99CC(*(void **)(a3 + 8), v24, v15);
            uint64_t v10 = (void *)(v16 + 16);
            *(void *)(a3 + 8) = v16 + 16;
          }
          *(void *)(a3 + 8) = v10;
        }
      }
      uint64_t v5 = v7[149];
    }
    unint64_t result = (void *)sub_6F317C((unsigned __int8 *)(v5 - 160), a2);
    if (result)
    {
      uint64_t v18 = sub_471074(v7, 0, 1, *(void *)(v7[149] - 8), 0, v17);
      uint64_t v24 = v18;
      unint64_t v19 = sub_470ADC(v7);
      uint64_t v21 = sub_471074(v7, 0, 1, v19 - 1, 1u, v20);
      uint64_t v23 = v21;
      unint64_t v22 = *(void *)(a3 + 8);
      if (v22 >= *(void *)(a3 + 16))
      {
        unint64_t result = sub_7A05B4((void **)a3, &v24, &v23);
      }
      else
      {
        sub_2F99CC(*(void **)(a3 + 8), v18, v21);
        unint64_t result = (void *)(v22 + 16);
        *(void *)(a3 + 8) = v22 + 16;
      }
      *(void *)(a3 + 8) = result;
    }
  }
  return result;
}

void sub_79DF48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_79DF9C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  long long v7 = (void *)sub_5231C((uint64_t)a4);
  if (*v7 == v7[1])
  {
    unint64_t v8 = *(long long **)(a2 + 16);
    v23[0] = a3;
    long long v9 = sub_79EB48(v8, 0, v23);
    if (v9) {
      uint64_t v10 = (uint64_t)sub_4AA8E0((char *)&__dst, v9 + 1);
    }
    else {
      uint64_t v10 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v10)) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void **)nullsub_1(a4);
    sub_4AA8E0((char *)v13, &__dst);
    sub_79DD7C(v11, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v23, (long long *)v13, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_29;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v19);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_31:
      operator delete(v13[0]);
LABEL_14:
      sub_64BB20(a4, (uint64_t)v23);
      if (v33)
      {
        char v34 = v33;
        operator delete(v33);
      }
      if (v32 < 0)
      {
        operator delete(v31);
        if ((v30 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v28 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_34;
        }
      }
      else if ((v30 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_35:
        operator delete(v25);
        if (v24 < 0) {
          goto LABEL_36;
        }
LABEL_21:
        if ((v44 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_37;
      }
LABEL_34:
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_21;
        }
LABEL_36:
        operator delete(v23[0]);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_22:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_38;
        }
LABEL_37:
        operator delete(v43);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_23:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_39;
        }
LABEL_38:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_24:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_25:
          if ((v36 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0) {
          return;
        }
LABEL_41:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_35;
    }
LABEL_30:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
}

void sub_79E1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_79E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_79E248(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79E25C(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79E270(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79E284(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4[139] == a4[140])
  {
    uint64_t v5 = *(long long **)(a2 + 16);
    v21[0] = a3;
    int v6 = sub_79EB48(v5, 0, v21);
    if (v6) {
      uint64_t v7 = (uint64_t)sub_4AA8E0((char *)&__dst, v6 + 1);
    }
    else {
      uint64_t v7 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v7)) {
      goto LABEL_29;
    }
    sub_4AA8E0((char *)v11, &__dst);
    sub_79DD7C(a4, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v21, (long long *)v11, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_14:
      unint64_t v8 = a4[140];
      if (v8 < a4[141])
      {
LABEL_15:
        sub_598A38(v8, (uint64_t)v21);
        uint64_t v9 = v8 + 176;
        a4[140] = v8 + 176;
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v9 = sub_64CC70(a4 + 139, (uint64_t)v21);
LABEL_22:
      a4[140] = v9;
      if (v31)
      {
        uint64_t v32 = v31;
        operator delete(v31);
      }
      if (v30 < 0)
      {
        operator delete(v29);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_26:
          if ((v26 & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_37;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_27:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v23);
        if (v22 < 0) {
          goto LABEL_39;
        }
LABEL_29:
        if ((v42 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_40;
      }
LABEL_37:
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_28:
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_29;
        }
LABEL_39:
        operator delete(v21[0]);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_30:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_31;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_31:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_42;
        }
LABEL_41:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_32:
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v34 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_44;
        }
LABEL_43:
        operator delete(v35);
        if ((v34 & 0x80000000) == 0) {
          return;
        }
LABEL_44:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_38;
    }
LABEL_20:
    operator delete(v11[0]);
    unint64_t v8 = a4[140];
    if (v8 < a4[141]) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
}

void sub_79E500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_79E52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_79E560(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79E574(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

BOOL *sub_79E588(BOOL *a1, void *a2)
{
  strcpy((char *)__p, "output_all_route_names");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "output_highest_weighted_route_names");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_79E660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_79E680(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 176)
  {
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 81) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 81) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 121) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 104));
    if ((*(char *)(i - 121) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 153) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 144));
    if (*(char *)(i - 153) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 176));
  }
  *(void *)(a1 + 8) = a2;
}

long long *sub_79E740(long long *a1, long long *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    BOOL v5 = *(long long **)a1;
    if (*(long long **)a1 != a2)
    {
      while (1)
      {
        sub_4AA8E0((char *)&__dst, v3 + 1);
        uint64_t v32 = *((void *)v3 + 21);
        long long v33 = v3[11];
        sub_4AA8E0((char *)&v10, v5 + 1);
        uint64_t v7 = *((void *)v5 + 21);
        uint64_t v20 = v7;
        long long v21 = v5[11];
        if (v32 != *a3) {
          break;
        }
        if (v7 == v32)
        {
          BOOL v8 = *(double *)&v33 < *(double *)&v21;
          if ((v19 & 0x80000000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          operator delete(__p);
          goto LABEL_13;
        }
        BOOL v8 = 0;
        if (v19 < 0) {
          goto LABEL_12;
        }
LABEL_13:
        if (v17 < 0)
        {
          operator delete(v16);
          if ((v15 & 0x80000000) == 0)
          {
LABEL_15:
            if ((v13 & 0x80000000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_25;
          }
        }
        else if ((v15 & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(v14);
        if ((v13 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v11 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v12);
        if ((v11 & 0x80000000) == 0)
        {
LABEL_17:
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_27;
        }
LABEL_26:
        operator delete(v10);
        if ((v31 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v29 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
LABEL_27:
        operator delete(v30);
        if ((v29 & 0x80000000) == 0)
        {
LABEL_19:
          if ((v27 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v28);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_20:
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_30;
        }
LABEL_29:
        operator delete(v26);
        if ((v25 & 0x80000000) == 0)
        {
LABEL_21:
          if (v23 < 0) {
            goto LABEL_31;
          }
          goto LABEL_4;
        }
LABEL_30:
        operator delete(v24);
        if (v23 < 0) {
LABEL_31:
        }
          operator delete(__dst);
LABEL_4:
        if (v8) {
          uint64_t v3 = v5;
        }
        BOOL v5 = *(long long **)v5;
        if (v5 == a2) {
          return v3;
        }
      }
      BOOL v8 = 1;
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  return v3;
}

void sub_79E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

long long *sub_79E944(long long *a1, long long *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    BOOL v5 = *(long long **)a1;
    if (*(long long **)a1 != a2)
    {
      while (1)
      {
        sub_4AA8E0((char *)&__dst, v3 + 1);
        uint64_t v32 = *((void *)v3 + 21);
        long long v33 = v3[11];
        sub_4AA8E0((char *)&v10, v5 + 1);
        uint64_t v7 = *((void *)v5 + 21);
        uint64_t v20 = v7;
        long long v21 = v5[11];
        if (v32 != *a3) {
          break;
        }
        if (v7 == v32)
        {
          BOOL v8 = *(double *)&v33 < *(double *)&v21;
          if ((v19 & 0x80000000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          operator delete(__p);
          goto LABEL_13;
        }
        BOOL v8 = 0;
        if (v19 < 0) {
          goto LABEL_12;
        }
LABEL_13:
        if (v17 < 0)
        {
          operator delete(v16);
          if ((v15 & 0x80000000) == 0)
          {
LABEL_15:
            if ((v13 & 0x80000000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_25;
          }
        }
        else if ((v15 & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(v14);
        if ((v13 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v11 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v12);
        if ((v11 & 0x80000000) == 0)
        {
LABEL_17:
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_27;
        }
LABEL_26:
        operator delete(v10);
        if ((v31 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v29 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
LABEL_27:
        operator delete(v30);
        if ((v29 & 0x80000000) == 0)
        {
LABEL_19:
          if ((v27 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v28);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_20:
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_30;
        }
LABEL_29:
        operator delete(v26);
        if ((v25 & 0x80000000) == 0)
        {
LABEL_21:
          if (v23 < 0) {
            goto LABEL_31;
          }
          goto LABEL_4;
        }
LABEL_30:
        operator delete(v24);
        if (v23 < 0) {
LABEL_31:
        }
          operator delete(__dst);
LABEL_4:
        if (v8) {
          uint64_t v3 = v5;
        }
        BOOL v5 = *(long long **)v5;
        if (v5 == a2) {
          return v3;
        }
      }
      BOOL v8 = 1;
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  return v3;
}

void sub_79EB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

long long *sub_79EB48(long long *a1, long long *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    BOOL v5 = *(long long **)a1;
    if (*(long long **)a1 != a2)
    {
      while (1)
      {
        sub_4AA8E0((char *)&__dst, v3 + 1);
        uint64_t v32 = *((void *)v3 + 21);
        long long v33 = v3[11];
        sub_4AA8E0((char *)&v10, v5 + 1);
        uint64_t v7 = *((void *)v5 + 21);
        uint64_t v20 = v7;
        long long v21 = v5[11];
        if (v32 != *a3) {
          break;
        }
        if (v7 == v32)
        {
          BOOL v8 = *(double *)&v33 < *(double *)&v21;
          if ((v19 & 0x80000000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          operator delete(__p);
          goto LABEL_13;
        }
        BOOL v8 = 0;
        if (v19 < 0) {
          goto LABEL_12;
        }
LABEL_13:
        if (v17 < 0)
        {
          operator delete(v16);
          if ((v15 & 0x80000000) == 0)
          {
LABEL_15:
            if ((v13 & 0x80000000) == 0) {
              goto LABEL_16;
            }
            goto LABEL_25;
          }
        }
        else if ((v15 & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(v14);
        if ((v13 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v11 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v12);
        if ((v11 & 0x80000000) == 0)
        {
LABEL_17:
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_27;
        }
LABEL_26:
        operator delete(v10);
        if ((v31 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v29 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
LABEL_27:
        operator delete(v30);
        if ((v29 & 0x80000000) == 0)
        {
LABEL_19:
          if ((v27 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v28);
        if ((v27 & 0x80000000) == 0)
        {
LABEL_20:
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_30;
        }
LABEL_29:
        operator delete(v26);
        if ((v25 & 0x80000000) == 0)
        {
LABEL_21:
          if (v23 < 0) {
            goto LABEL_31;
          }
          goto LABEL_4;
        }
LABEL_30:
        operator delete(v24);
        if (v23 < 0) {
LABEL_31:
        }
          operator delete(__dst);
LABEL_4:
        if (v8) {
          uint64_t v3 = v5;
        }
        BOOL v5 = *(long long **)v5;
        if (v5 == a2) {
          return v3;
        }
      }
      BOOL v8 = 1;
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  return v3;
}

void sub_79ED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_79ED4C(int a1, void **__p)
{
  if (__p)
  {
    v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 167) < 0)
      {
        operator delete(v2[18]);
        if ((*((char *)v2 + 135) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*((char *)v2 + 111) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v2 + 135) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v2[14]);
      if ((*((char *)v2 + 111) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*((char *)v2 + 71) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(v2[11]);
      if ((*((char *)v2 + 71) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v2 + 39) < 0) {
          goto LABEL_14;
        }
        goto LABEL_3;
      }
LABEL_13:
      operator delete(v2[6]);
      if (*((char *)v2 + 39) < 0) {
LABEL_14:
      }
        operator delete(v2[2]);
LABEL_3:
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_79EE04(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 167) < 0)
    {
      operator delete(__p[18]);
      if ((*((char *)__p + 135) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*((char *)__p + 111) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((*((char *)__p + 135) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(__p[14]);
    if ((*((char *)__p + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)__p + 71) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_15:
      operator delete(__p[6]);
      if (*((char *)__p + 39) < 0) {
        goto LABEL_16;
      }
LABEL_7:
      uint64_t v3 = __p;
LABEL_9:
      operator delete(v3);
      return;
    }
LABEL_14:
    operator delete(__p[11]);
    if ((*((char *)__p + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)__p + 39) & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_16:
      operator delete(__p[2]);
      uint64_t v3 = __p;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (__p) {
    goto LABEL_7;
  }
}

uint64_t sub_79EEE0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBAA6550FFBAA6551 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AB355E008AB3) {
    sub_2E00();
  }
  if (0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= 0x4559AAF004559) {
    unint64_t v6 = 0x8AB355E008AB3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AB355E008AB3) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(7560 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[7560 * v3];
  char v15 = &v7[7560 * v6];
  sub_5A67C0(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 7560;
  char v11 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 7560;
      uint64_t v8 = sub_73AF14(v8 - 7560, (uint64_t)v10);
    }
    while (v10 != v11);
    char v12 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 7560;
        sub_574D4C((uint64_t)v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 7560;
}

void sub_79F074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_79F088((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_79F088(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 7560;
    sub_574D4C(i - 7560);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_79F0E8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v9 = 0x2127599BF4325C37 * ((v8 | ((*a2 & 0xFF000000000000) == 0)) ^ (v8 >> 23));
  unint64_t v10 = v9 ^ (v9 >> 47);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 47);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    char v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v14[1];
            if (v15 == v10)
            {
              if (__PAIR64__(*((unsigned __int16 *)v14 + 10), *((_DWORD *)v14 + 4)) == __PAIR64__(WORD2(v7), v7)
                && (HIWORD(v7) & 1) != (*((unsigned char *)v14 + 22) == 0))
              {
                return v14;
              }
            }
            else if ((v15 & (v11 - 1)) != v4)
            {
              goto LABEL_26;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            if (__PAIR64__(*((unsigned __int16 *)v14 + 10), *((_DWORD *)v14 + 4)) == __PAIR64__(WORD2(v7), v7)
              && (HIWORD(v7) & 1) != (*((unsigned char *)v14 + 22) == 0))
            {
              return v14;
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_26:
  char v18 = operator new(0x20uLL);
  *char v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  *((_DWORD *)v18 + 6) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    char v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_29:
      *char v18 = *v22;
LABEL_64:
      *char v22 = v18;
      goto LABEL_65;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_40;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_40:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        char v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        char v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      char v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_29;
      }
    }
  }
  *char v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_79F484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_79F498(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_79F86C(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v15 + 1);
            if (v17 == v11)
            {
              if (sub_6F317C((unsigned __int8 *)v15 + 16, (unsigned __int8 *)a2)
                && *((void *)v15 + 21) == *(void *)(a2 + 152))
              {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v15 = *(void **)v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v11)
          {
            if (sub_6F317C((unsigned __int8 *)v15 + 16, (unsigned __int8 *)a2)
              && *((void *)v15 + 21) == *(void *)(a2 + 152))
            {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  long long v33 = operator new(0xC0uLL);
  *(void *)long long v33 = 0;
  *((void *)v33 + 1) = v11;
  sub_4AA8E0((char *)v33 + 16, (long long *)a3);
  *((void *)v33 + 21) = *(void *)(a3 + 152);
  *((_OWORD *)v33 + 11) = *a4;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v30 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        float v20 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v21 = v33;
        if (v20) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v11;
        float v20 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v21 = v33;
        if (v20) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v11;
      float v20 = *(void **)(*(void *)a1 + 8 * (v30 & v11));
      uint64_t v21 = v33;
      if (v20) {
        goto LABEL_28;
      }
    }
LABEL_52:
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v33)
    {
      unint64_t v31 = *(void *)(*(void *)v33 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v31 >= v12) {
          v31 %= v12;
        }
      }
      else
      {
        v31 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v31) = v33;
    }
    goto LABEL_63;
  }
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v21 = v33;
  if (!v20) {
    goto LABEL_52;
  }
LABEL_28:
  *uint64_t v21 = *v20;
  *float v20 = v33;
LABEL_63:
  uint64_t v15 = v33;
  ++*v9;
  return v15;
}

void sub_79F838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10) {
    sub_79EE04(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_79F86C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  if (v8 >= 0) {
    uint64_t v3 = (uint64_t *)__p;
  }
  else {
    uint64_t v3 = (uint64_t *)__p[0];
  }
  if (v8 >= 0) {
    unint64_t v4 = HIBYTE(v8);
  }
  else {
    unint64_t v4 = (unint64_t)__p[1];
  }
  unint64_t v5 = sub_B128((uint64_t)&v9, v3, v4);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return ((((v5 + 2656449171u) ^ 0x7A69) << 6)
        + (((v5 + 2656449171u) ^ 0x7A69) >> 2)
        + *(void *)(a2 + 152)
        + 2654435769) ^ (v5 + 2656449171u) ^ 0x7A69;
}

uint64_t sub_79F92C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[1].i64[0] - a1->i64[0]) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v29 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  __p = v7;
  v27.i64[0] = (uint64_t)&v7[176 * v3];
  v27.i64[1] = v27.i64[0];
  uint8x8_t v28 = &v7[176 * v6];
  sub_4AA8E0((char *)v27.i64[0], (long long *)a2);
  uint64_t v8 = v27.i64[0];
  *(_OWORD *)(v27.i64[0] + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(v8 + 168) = *(void *)(a2 + 168);
  uint64_t v9 = v27.i64[0];
  uint64_t v10 = v27.i64[1] + 176;
  v27.i64[1] += 176;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v23 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      long long v15 = *(_OWORD *)(v11 + v13 - 176);
      uint64_t v16 = v9 + v13;
      *(void *)(v16 - 160) = *(void *)(v11 + v13 - 160);
      *(_OWORD *)(v16 - 176) = v15;
      *(void *)(v14 - 168) = 0;
      *(void *)(v14 - 160) = 0;
      uint64_t v17 = *(void *)(v11 + v13 - 152);
      *(void *)(v14 - 176) = 0;
      *(void *)(v16 - 152) = v17;
      long long v18 = *(_OWORD *)(v11 + v13 - 144);
      *(void *)(v16 - 128) = *(void *)(v11 + v13 - 128);
      *(_OWORD *)(v16 - 144) = v18;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 128) = 0;
      *(void *)(v14 - 144) = 0;
      *(void *)(v16 - 120) = *(void *)(v11 + v13 - 120);
      *(_DWORD *)(v16 - 112) = *(_DWORD *)(v11 + v13 - 112);
      long long v19 = *(_OWORD *)(v11 + v13 - 104);
      *(void *)(v16 - 88) = *(void *)(v11 + v13 - 88);
      *(_OWORD *)(v16 - 104) = v19;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 88) = 0;
      *(void *)(v14 - 104) = 0;
      long long v20 = *(_OWORD *)(v11 + v13 - 80);
      *(void *)(v16 - 64) = *(void *)(v11 + v13 - 64);
      *(_OWORD *)(v16 - 80) = v20;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      *(_DWORD *)(v16 - 56) = *(_DWORD *)(v11 + v13 - 56);
      long long v21 = *(_OWORD *)(v11 + v13 - 48);
      *(void *)(v16 - 32) = *(void *)(v11 + v13 - 32);
      *(_OWORD *)(v16 - 48) = v21;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 48) = 0;
      long long v22 = *(_OWORD *)(v11 + v13 - 24);
      *(void *)(v16 - 8) = *(void *)(v11 + v13 - 8);
      *(_OWORD *)(v16 - 24) = v22;
      v13 -= 176;
    }
    while (v11 + v13 != v12);
    int64x2_t v23 = *a1;
    uint64_t v10 = v27.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v27 = v23;
  unint64_t v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  uint8x8_t v28 = v24;
  __p = (void *)v23.i64[0];
  sub_79FBB8((uint64_t)&__p, v23.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_79FB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_79FB80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_79FB80(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_79FBB8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 81) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 81) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 121) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 104));
    if ((*(char *)(i - 121) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 153) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 144));
    if (*(char *)(i - 153) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 176));
  }
}

void sub_79FC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = a1 + 176 * (v4 >> 1);
  uint64_t v9 = a2 - 176;
  uint64_t v10 = (double *)(a2 - 24);
  unint64_t v11 = (unint64_t *)(v8 + 152);
  double v12 = *(double *)(v8 + 160);
  double v13 = *(double *)(a2 - 16);
  if (v12 >= v13)
  {
    if (v13 < v12) {
      return;
    }
    double v14 = *(double *)(v8 + 168);
    double v15 = *(double *)(a2 - 8);
    if (v14 >= v15)
    {
      if (v15 < v14) {
        return;
      }
      if (*(void *)v10 >= *v11)
      {
        if (*v11 < *(void *)v10) {
          return;
        }
        int v16 = *(char *)(a2 - 153);
        int v17 = *(char *)(v8 + 23);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v8 + 23);
        }
        else {
          size_t v18 = *(void *)(v8 + 8);
        }
        if (v17 >= 0) {
          long long v19 = (const void *)(a1 + 176 * (v4 >> 1));
        }
        else {
          long long v19 = *(const void **)v8;
        }
        if (v16 >= 0) {
          size_t v20 = *(unsigned __int8 *)(a2 - 153);
        }
        else {
          size_t v20 = *(void *)(a2 - 168);
        }
        if (v16 >= 0) {
          long long v21 = (const void *)(a2 - 176);
        }
        else {
          long long v21 = *(const void **)(a2 - 176);
        }
        if (v20 >= v18) {
          size_t v22 = v18;
        }
        else {
          size_t v22 = v20;
        }
        int v23 = memcmp(v19, v21, v22);
        BOOL v24 = v18 < v20;
        if (v23) {
          BOOL v24 = v23 < 0;
        }
        if (!v24) {
          return;
        }
      }
    }
  }
  *(_OWORD *)int64x2_t v65 = *(_OWORD *)v9;
  uint64_t v25 = *(void *)(v9 + 16);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  uint64_t v26 = *(void *)(a2 - 152);
  uint64_t v66 = v25;
  uint64_t v67 = v26;
  *(_OWORD *)unint64_t v68 = *(_OWORD *)(a2 - 144);
  uint64_t v27 = *(void *)(a2 - 128);
  uint64_t v28 = *(void *)(a2 - 120);
  *(void *)(a2 - 136) = 0;
  *(void *)(a2 - 128) = 0;
  *(void *)(a2 - 144) = 0;
  uint64_t v69 = v27;
  uint64_t v70 = v28;
  int v71 = *(_DWORD *)(a2 - 112);
  long long v29 = *(_OWORD *)(a2 - 104);
  uint64_t v73 = *(void *)(a2 - 88);
  *(_OWORD *)v72 = v29;
  *(void *)(a2 - 104) = 0;
  *(void *)(a2 - 96) = 0;
  long long v30 = *(_OWORD *)(a2 - 80);
  uint64_t v75 = *(void *)(a2 - 64);
  *(_OWORD *)__p = v30;
  *(void *)(a2 - 88) = 0;
  *(void *)(a2 - 80) = 0;
  *(void *)(a2 - 72) = 0;
  *(void *)(a2 - 64) = 0;
  int v76 = *(_DWORD *)(a2 - 56);
  long long v31 = *(_OWORD *)(a2 - 48);
  uint64_t v78 = *(void *)(a2 - 32);
  long long v77 = v31;
  *(void *)(a2 - 48) = 0;
  *(void *)(a2 - 40) = 0;
  *(void *)(a2 - 32) = 0;
  long long v32 = *(_OWORD *)v10;
  double v80 = v10[2];
  long long v79 = v32;
  sub_4C2034(v9, (long long *)v8);
  uint64_t v33 = *(void *)(v8 + 168);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((void *)v10 + 2) = v33;
  if (v4 >= 2)
  {
    double v34 = *((double *)&v79 + 1);
    double v35 = v80;
    unint64_t v36 = v79;
    if (v66 >= 0) {
      v37 = (void *)HIBYTE(v66);
    }
    else {
      v37 = v65[1];
    }
    if (v66 >= 0) {
      char v38 = v65;
    }
    else {
      char v38 = (void **)v65[0];
    }
    __s2 = v38;
    size_t v39 = (size_t)v37;
    while (1)
    {
      uint64_t v41 = v8;
      char v42 = v11;
      unint64_t v43 = v7 - 1;
      unint64_t v7 = (v7 - 1) >> 1;
      uint64_t v8 = a1 + 176 * v7;
      unint64_t v11 = (unint64_t *)(v8 + 152);
      double v44 = *(double *)(v8 + 160);
      if (v44 >= v34)
      {
        if (v34 < v44) {
          break;
        }
        double v45 = *(double *)(v8 + 168);
        if (v45 >= v35)
        {
          if (v35 < v45) {
            break;
          }
          if (v36 >= *v11)
          {
            if (*v11 < v36) {
              break;
            }
            int v46 = *(char *)(v8 + 23);
            unint64_t v47 = v36;
            if (v46 >= 0) {
              size_t v48 = *(unsigned __int8 *)(v8 + 23);
            }
            else {
              size_t v48 = *(void *)(v8 + 8);
            }
            if (v46 >= 0) {
              int v49 = (const void *)(a1 + 176 * v7);
            }
            else {
              int v49 = *(const void **)v8;
            }
            if (v39 >= v48) {
              size_t v50 = v48;
            }
            else {
              size_t v50 = v39;
            }
            int v51 = memcmp(v49, __s2, v50);
            BOOL v52 = v48 >= v39;
            unint64_t v36 = v47;
            BOOL v53 = !v52;
            if (v51) {
              BOOL v53 = v51 < 0;
            }
            if (!v53) {
              break;
            }
          }
        }
      }
      sub_4C2034(v41, (long long *)(a1 + 176 * v7));
      uint64_t v40 = *(void *)(v8 + 168);
      *(_OWORD *)(v41 + 152) = *(_OWORD *)v11;
      *(void *)(v41 + 168) = v40;
      if (v43 <= 1) {
        goto LABEL_57;
      }
    }
    uint64_t v8 = v41;
    unint64_t v11 = v42;
  }
LABEL_57:
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  long long v54 = *(_OWORD *)v65;
  *(void *)(v8 + 16) = v66;
  *(_OWORD *)uint64_t v8 = v54;
  HIBYTE(v66) = 0;
  LOBYTE(v65[0]) = 0;
  *(void *)(v8 + 24) = v67;
  v55 = (void **)(v8 + 32);
  if (*(char *)(v8 + 55) < 0) {
    operator delete(*v55);
  }
  long long v56 = *(_OWORD *)v68;
  *(void *)(v8 + 48) = v69;
  *(_OWORD *)v55 = v56;
  HIBYTE(v69) = 0;
  LOBYTE(v68[0]) = 0;
  *(void *)(v8 + 56) = v70;
  *(_DWORD *)(v8 + 64) = v71;
  v57 = (void **)(v8 + 72);
  if (*(char *)(v8 + 95) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)v72;
  *(void *)(v8 + 88) = v73;
  *(_OWORD *)v57 = v58;
  HIBYTE(v73) = 0;
  LOBYTE(v72[0]) = 0;
  v59 = (void **)(v8 + 96);
  if (*(char *)(v8 + 119) < 0) {
    operator delete(*v59);
  }
  long long v60 = *(_OWORD *)__p;
  *(void *)(v8 + 112) = v75;
  *(_OWORD *)v59 = v60;
  HIBYTE(v75) = 0;
  LOBYTE(__p[0]) = 0;
  *(_DWORD *)(v8 + 120) = v76;
  v61 = (void **)(v8 + 128);
  if (*(char *)(v8 + 151) < 0) {
    operator delete(*v61);
  }
  long long v62 = v77;
  *(void *)(v8 + 144) = v78;
  *(_OWORD *)v61 = v62;
  long long v63 = v79;
  *((double *)v11 + 2) = v80;
  *(_OWORD *)unint64_t v11 = v63;
  if ((SHIBYTE(v75) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_73:
    operator delete(v72[0]);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
    {
LABEL_70:
      if ((SHIBYTE(v66) & 0x80000000) == 0) {
        return;
      }
LABEL_75:
      operator delete(v65[0]);
      return;
    }
    goto LABEL_74;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v73) < 0) {
    goto LABEL_73;
  }
LABEL_69:
  if ((SHIBYTE(v69) & 0x80000000) == 0) {
    goto LABEL_70;
  }
LABEL_74:
  operator delete(v68[0]);
  if (SHIBYTE(v66) < 0) {
    goto LABEL_75;
  }
}

__n128 sub_7A00D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      long long v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)long long v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      size_t v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)size_t v20 = v29;
      long long v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)long long v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      size_t v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)size_t v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      double v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)double v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      double v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)double v14 = v29;
      int v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)int v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      int v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)int v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A0434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7A0448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v9 = a1;
    uint64_t v10 = v5 + 1;
    a1 += 176 * (v5 + 1);
    uint64_t v11 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 < a3)
    {
      uint64_t v13 = v9 + 176 * v10;
      double v14 = *(double *)(v13 + 160);
      double v15 = *(double *)(a1 + 336);
      if (v14 < v15) {
        goto LABEL_4;
      }
      if (v15 >= v14)
      {
        double v16 = *(double *)(v13 + 168);
        double v17 = *(double *)(a1 + 344);
        if (v16 < v17) {
          goto LABEL_4;
        }
        if (v17 >= v16)
        {
          size_t v18 = (unint64_t *)(v13 + 152);
          unint64_t v19 = *(void *)(a1 + 328);
          unint64_t v20 = *v18;
          if (v19 < v20) {
            goto LABEL_4;
          }
          if (v20 >= v19)
          {
            int v21 = *(char *)(a1 + 199);
            int v22 = *(char *)(a1 + 23);
            unint64_t v23 = v22 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
            int v24 = v22 >= 0 ? (const void *)a1 : *(const void **)a1;
            unint64_t v25 = v21 >= 0 ? *(unsigned __int8 *)(a1 + 199) : *(void *)(a1 + 184);
            uint64_t v26 = v21 >= 0 ? (const void *)(a1 + 176) : *(const void **)(a1 + 176);
            size_t v27 = v25 >= v23 ? v23 : v25;
            int v28 = memcmp(v24, v26, v27);
            BOOL v29 = v23 < v25;
            if (v28) {
              BOOL v29 = v28 < 0;
            }
            if (v29)
            {
LABEL_4:
              a1 += 176;
              uint64_t v5 = v12;
            }
          }
        }
      }
    }
    sub_4C2034(v9, (long long *)a1);
    uint64_t v8 = *(void *)(a1 + 168);
    *(_OWORD *)(v9 + 152) = *(_OWORD *)(a1 + 152);
    *(void *)(v9 + 168) = v8;
  }
  while (v5 <= v7);
  return a1;
}

void *sub_7A05B4(void **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_188D718();
    }
    uint64_t v10 = operator new(16 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = sub_2F99CC(&v10[2 * v4], *a2, *a3);
  uint64_t v12 = v11 + 2;
  double v14 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 != *a1)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v13 - 1);
      v11 -= 2;
      v13 -= 16;
    }
    while (v13 != v14);
    uint64_t v13 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[2 * v9];
  if (v13) {
    operator delete(v13);
  }
  return v12;
}

void sub_7A06B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7A06C8(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  double v14 = operator new(0x18uLL);
  *double v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    size_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *double v14 = *v18;
LABEL_61:
      *size_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        size_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        size_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      size_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *double v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    size_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_7A09D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_7A09EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      BOOL v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)BOOL v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      unint64_t v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)unint64_t v20 = v29;
      unint64_t v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)unint64_t v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      int v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)int v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      uint64_t v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)uint64_t v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      double v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)double v14 = v29;
      float v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)float v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      uint64_t v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)uint64_t v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A0D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7A0D64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v24 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v22 = (uint64_t)&v7[176 * v3];
  unint64_t v23 = &v7[176 * v6];
  sub_598A38(v22, a2);
  uint64_t v8 = v22 + 176;
  uint64_t v9 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v8;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      long long v12 = &v10[v11];
      long long v13 = *(_OWORD *)&v10[v11 - 176];
      uint64_t v14 = v22 + v11;
      *(void *)(v14 - 160) = *(void *)&v10[v11 - 160];
      *(_OWORD *)(v14 - 176) = v13;
      *((void *)v12 - 21) = 0;
      *((void *)v12 - 20) = 0;
      uint64_t v15 = *(void *)&v10[v11 - 152];
      *((void *)v12 - 22) = 0;
      *(void *)(v14 - 152) = v15;
      long long v16 = *(_OWORD *)&v10[v11 - 144];
      *(void *)(v14 - 128) = *(void *)&v10[v11 - 128];
      *(_OWORD *)(v14 - 144) = v16;
      *((void *)v12 - 17) = 0;
      *((void *)v12 - 16) = 0;
      *((void *)v12 - 18) = 0;
      *(void *)(v14 - 120) = *(void *)&v10[v11 - 120];
      *(_DWORD *)(v14 - 112) = *(_DWORD *)&v10[v11 - 112];
      long long v17 = *(_OWORD *)&v10[v11 - 104];
      *(void *)(v14 - 88) = *(void *)&v10[v11 - 88];
      *(_OWORD *)(v14 - 104) = v17;
      *((void *)v12 - 12) = 0;
      *((void *)v12 - 11) = 0;
      *((void *)v12 - 13) = 0;
      long long v18 = *(_OWORD *)&v10[v11 - 80];
      *(void *)(v14 - 64) = *(void *)&v10[v11 - 64];
      *(_OWORD *)(v14 - 80) = v18;
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 8) = 0;
      *((void *)v12 - 10) = 0;
      *(_DWORD *)(v14 - 56) = *(_DWORD *)&v10[v11 - 56];
      long long v19 = *(_OWORD *)&v10[v11 - 48];
      *(void *)(v14 - 32) = *(void *)&v10[v11 - 32];
      *(_OWORD *)(v14 - 48) = v19;
      *((void *)v12 - 5) = 0;
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 6) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)&v10[v11 - 24];
      *(void *)(v14 - 8) = *(void *)&v10[v11 - 8];
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      v11 -= 176;
    }
    while (&v10[v11] != v9);
    unint64_t v20 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v22 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v23;
    if (v10 != v20)
    {
      do
      {
        v10 -= 176;
        sub_57523C(v24, (uint64_t)v10);
      }
      while (v10 != v20);
      uint64_t v10 = v20;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v22 + 176;
}

void sub_7A0FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_64CECC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_7A0FC0(void **a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v5 = 0x555555555555555;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x555555555555555) {
    sub_188D718();
  }
  uint64_t v7 = 48 * v5;
  uint64_t v8 = (char *)operator new(48 * v5);
  uint64_t v9 = &v8[48 * v3];
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  unint64_t v12 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *(void *)uint64_t v9 = v11;
  *((void *)v9 + 1) = v10;
  *((void *)v9 + 2) = v12;
  uint64_t v13 = a2[3];
  *((void *)v9 + 3) = v13;
  uint64_t v14 = a2[4];
  *((void *)v9 + 4) = v14;
  *((_DWORD *)v9 + 10) = *((_DWORD *)a2 + 10);
  if (v14)
  {
    unint64_t v15 = *(void *)(v13 + 8);
    unint64_t v16 = v12 - 1;
    unint64_t v17 = v15 % v12;
    if (v15 < v12) {
      unint64_t v17 = v15;
    }
    uint64_t v18 = v15 & v16;
    if ((v12 & v16) != 0) {
      unint64_t v19 = v17;
    }
    else {
      unint64_t v19 = v18;
    }
    *(void *)(v10 + 8 * v19) = v9 + 24;
    a2[3] = 0;
    a2[4] = 0;
  }
  unint64_t v20 = &v8[v7];
  unint64_t v21 = v9 + 48;
  uint64_t v22 = (char *)*a1;
  unint64_t v23 = (char *)a1[1];
  if (v23 == *a1)
  {
    *a1 = v9;
    a1[1] = v21;
    a1[2] = v20;
    if (!v23) {
      return v21;
    }
    goto LABEL_35;
  }
  uint64_t v24 = 0;
  do
  {
    uint64_t v26 = &v9[v24];
    long long v27 = &v23[v24];
    uint64_t v29 = *(void *)&v23[v24 - 48];
    uint64_t v28 = *(void *)&v23[v24 - 40];
    *((void *)v27 - 5) = 0;
    *((void *)v26 - 6) = v29;
    *((void *)v26 - 5) = v28;
    *((void *)v26 - 4) = *(void *)&v23[v24 - 32];
    *((void *)v27 - 4) = 0;
    uint64_t v30 = *(void *)&v23[v24 - 24];
    *(void *)&v9[v24 - 24] = v30;
    uint64_t v31 = *(void *)&v23[v24 - 16];
    *((void *)v26 - 2) = v31;
    *((_DWORD *)v26 - 2) = *(_DWORD *)&v23[v24 - 8];
    if (v31)
    {
      unint64_t v25 = *(void *)(v30 + 8);
      unint64_t v32 = *((void *)v26 - 4);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v25 >= v32) {
          v25 %= v32;
        }
      }
      else
      {
        v25 &= v32 - 1;
      }
      *(void *)(v28 + 8 * v25) = &v9[v24 - 24];
      *(void *)&v23[v24 - 24] = 0;
      *(void *)&v23[v24 - 16] = 0;
    }
    v24 -= 48;
  }
  while (&v23[v24] != v22);
  long long v33 = (char *)*a1;
  unint64_t v23 = (char *)a1[1];
  *a1 = &v9[v24];
  a1[1] = v21;
  a1[2] = v20;
  if (v23 != v33)
  {
    do
    {
      uint64_t v34 = (void **)*((void *)v23 - 3);
      if (v34)
      {
        do
        {
          uint64_t v36 = (void **)*v34;
          if (*((char *)v34 + 39) < 0) {
            operator delete(v34[2]);
          }
          operator delete(v34);
          uint64_t v34 = v36;
        }
        while (v36);
      }
      __n128 v35 = (void *)*((void *)v23 - 5);
      *((void *)v23 - 5) = 0;
      if (v35) {
        operator delete(v35);
      }
      v23 -= 48;
    }
    while (v23 != v33);
    unint64_t v23 = v33;
  }
  if (v23) {
LABEL_35:
  }
    operator delete(v23);
  return v21;
}

uint64_t sub_7A120C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v6);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    unint64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11 - 7);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v15 = *(unsigned char **)(a2 + 48);
  uint64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    unint64_t v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  sub_3B1C7C((void *)(a1 + 72), a2 + 72);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_3B1DC8(a1 + 152, (long long *)(a2 + 152));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  sub_3B1DC8(a1 + 312, (long long *)(a2 + 312));
  uint64_t v19 = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 448) = v19;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  unint64_t v21 = *(unsigned char **)(a2 + 464);
  unint64_t v20 = *(unsigned char **)(a2 + 472);
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    unint64_t v23 = (char *)operator new(v22);
    *(void *)(a1 + 464) = v23;
    *(void *)(a1 + 472) = v23;
    uint64_t v24 = &v23[4 * (v22 >> 2)];
    *(void *)(a1 + 480) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 472) = v24;
  }
  uint64_t v25 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v25;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_3B1F44(a1 + 512, (uint64_t *)(a2 + 512));
  long long v26 = *(_OWORD *)(a2 + 800);
  long long v27 = *(_OWORD *)(a2 + 816);
  long long v28 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v28;
  *(_OWORD *)(a1 + 800) = v26;
  *(_OWORD *)(a1 + 816) = v27;
  sub_3B2460((void *)(a1 + 864), a2 + 864);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  uint64_t v29 = *(unsigned char **)(a2 + 1008);
  uint64_t v30 = *(unsigned char **)(a2 + 1016);
  int64_t v31 = v30 - v29;
  if (v30 != v29)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v31 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v32 = (char *)operator new(v31);
    *(void *)(a1 + 1008) = v32;
    *(void *)(a1 + 1016) = v32;
    long long v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 1024) = v33;
    memcpy(v32, v29, v31 - 4);
    *(void *)(a1 + 1016) = v33;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *(void *)(a2 + 1032), *(void *)(a2 + 1040), (uint64_t)(*(void *)(a2 + 1040) - *(void *)(a2 + 1032)) >> 6);
  return a1;
}

void sub_7A1564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void **a11, uint64_t a12)
{
  uint64_t v19 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 1016) = v19;
    operator delete(v19);
  }
  sub_3B01C8(v17);
  sub_3B0290(v16);
  unint64_t v20 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 472) = v20;
    operator delete(v20);
  }
  sub_3B024C(a10);
  sub_3B024C(v15);
  sub_3310C(a12);
  unint64_t v21 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 56) = v21;
    operator delete(v21);
  }
  int64_t v22 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 32) = v22;
    operator delete(v22);
    unint64_t v23 = *(void **)v12;
    if (!*(void *)v12) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v23 = *(void **)v12;
    if (!*(void *)v12) {
      goto LABEL_10;
    }
  }
  *(void *)(v12 + 8) = v23;
  operator delete(v23);
  goto LABEL_10;
}

void sub_7A165C()
{
  if (!*v0) {
    JUMPOUT(0x7A1640);
  }
  JUMPOUT(0x7A1638);
}

uint64_t sub_7A166C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[1].i64[0] - a1->i64[0]) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v29 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  __p = v7;
  v27.i64[0] = (uint64_t)&v7[176 * v3];
  v27.i64[1] = v27.i64[0];
  long long v28 = &v7[176 * v6];
  sub_4AA8E0((char *)v27.i64[0], (long long *)a2);
  uint64_t v8 = v27.i64[0];
  *(_OWORD *)(v27.i64[0] + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(v8 + 168) = *(void *)(a2 + 168);
  uint64_t v9 = v27.i64[0];
  uint64_t v10 = v27.i64[1] + 176;
  v27.i64[1] += 176;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v23 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      long long v15 = *(_OWORD *)(v11 + v13 - 176);
      uint64_t v16 = v9 + v13;
      *(void *)(v16 - 160) = *(void *)(v11 + v13 - 160);
      *(_OWORD *)(v16 - 176) = v15;
      *(void *)(v14 - 168) = 0;
      *(void *)(v14 - 160) = 0;
      uint64_t v17 = *(void *)(v11 + v13 - 152);
      *(void *)(v14 - 176) = 0;
      *(void *)(v16 - 152) = v17;
      long long v18 = *(_OWORD *)(v11 + v13 - 144);
      *(void *)(v16 - 128) = *(void *)(v11 + v13 - 128);
      *(_OWORD *)(v16 - 144) = v18;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 128) = 0;
      *(void *)(v14 - 144) = 0;
      *(void *)(v16 - 120) = *(void *)(v11 + v13 - 120);
      *(_DWORD *)(v16 - 112) = *(_DWORD *)(v11 + v13 - 112);
      long long v19 = *(_OWORD *)(v11 + v13 - 104);
      *(void *)(v16 - 88) = *(void *)(v11 + v13 - 88);
      *(_OWORD *)(v16 - 104) = v19;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 88) = 0;
      *(void *)(v14 - 104) = 0;
      long long v20 = *(_OWORD *)(v11 + v13 - 80);
      *(void *)(v16 - 64) = *(void *)(v11 + v13 - 64);
      *(_OWORD *)(v16 - 80) = v20;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      *(_DWORD *)(v16 - 56) = *(_DWORD *)(v11 + v13 - 56);
      long long v21 = *(_OWORD *)(v11 + v13 - 48);
      *(void *)(v16 - 32) = *(void *)(v11 + v13 - 32);
      *(_OWORD *)(v16 - 48) = v21;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 48) = 0;
      long long v22 = *(_OWORD *)(v11 + v13 - 24);
      *(void *)(v16 - 8) = *(void *)(v11 + v13 - 8);
      *(_OWORD *)(v16 - 24) = v22;
      v13 -= 176;
    }
    while (v11 + v13 != v12);
    int64x2_t v23 = *a1;
    uint64_t v10 = v27.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v27 = v23;
  uint64_t v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  long long v28 = v24;
  __p = (void *)v23.i64[0];
  sub_79FBB8((uint64_t)&__p, v23.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_7A18AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_79FB80((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_7A18C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      long long v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)long long v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      long long v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)long long v20 = v29;
      long long v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)long long v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      long long v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)long long v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      uint64_t v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)uint64_t v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      uint64_t v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)uint64_t v14 = v29;
      uint64_t v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)uint64_t v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      uint64_t v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)uint64_t v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A1C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_7A1C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      long long v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)long long v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      long long v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)long long v20 = v29;
      long long v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)long long v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      long long v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)long long v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      uint64_t v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)uint64_t v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      uint64_t v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)uint64_t v14 = v29;
      uint64_t v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)uint64_t v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      uint64_t v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)uint64_t v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A1F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7A1FB0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_7A2718(a1, *(void *)a2, *(void *)(a2 + 8), 0xFF55E3181697D6CDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_59888C(a1 + 24, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v5 = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 96) = v9;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_5A70C4(a1 + 152, *(void *)(a2 + 152), *(void *)(a2 + 160), 0x7E3F1F8FC7E3F1F9 * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 4));
  uint64_t v11 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v11;
  sub_4F58AC(a1 + 192, a2 + 192);
  sub_4F58AC(a1 + 352, a2 + 352);
  sub_4F58AC(a1 + 512, a2 + 512);
  sub_4F58AC(a1 + 672, a2 + 672);
  sub_4F58AC(a1 + 832, a2 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_8A6F8((char *)(a1 + 992), *(void *)(a2 + 992), *(void *)(a2 + 1000), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1000) - *(void *)(a2 + 992)) >> 3));
  sub_4F58AC(a1 + 1016, a2 + 1016);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  sub_4F57A0(a1 + 1184, a2 + 1184);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  sub_598C04(a1 + 1304, (uint64_t *)(a2 + 1304));
  sub_599260(a1 + 2392, a2 + 2392);
  *(void *)(a1 + 7208) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  long long v12 = *(unsigned char **)(a2 + 7192);
  uint64_t v13 = *(unsigned char **)(a2 + 7200);
  int64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v14 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)(a1 + 7192) = v15;
    *(void *)(a1 + 7200) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 7208) = v16;
    memcpy(v15, v12, v14 - 4);
    *(void *)(a1 + 7200) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v17;
  if (*(char *)(a2 + 7255) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7232), *(void **)(a2 + 7232), *(void *)(a2 + 7240));
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 7232);
    *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
    *(_OWORD *)(a1 + 7232) = v18;
  }
  if (*(char *)(a2 + 7279) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7256), *(void **)(a2 + 7256), *(void *)(a2 + 7264));
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 7256);
    *(void *)(a1 + 7272) = *(void *)(a2 + 7272);
    *(_OWORD *)(a1 + 7256) = v19;
  }
  sub_4F57A0(a1 + 7280, a2 + 7280);
  *(void *)(a1 + 7408) = 0;
  *(_OWORD *)(a1 + 7392) = 0u;
  sub_5A726C(a1 + 7392, *(void *)(a2 + 7392), *(void *)(a2 + 7400), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 7400) - *(void *)(a2 + 7392)) >> 5));
  *(void *)(a1 + 7432) = 0;
  *(_OWORD *)(a1 + 7416) = 0u;
  sub_4BFFA4((unsigned char *)(a1 + 7416), *(void *)(a2 + 7416), *(void *)(a2 + 7424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7424) - *(void *)(a2 + 7416)) >> 4));
  if (*(char *)(a2 + 7463) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7440), *(void **)(a2 + 7440), *(void *)(a2 + 7448));
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 7440);
    *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
    *(_OWORD *)(a1 + 7440) = v20;
  }
  if (*(char *)(a2 + 7487) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7464), *(void **)(a2 + 7464), *(void *)(a2 + 7472));
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 7464);
    *(void *)(a1 + 7480) = *(void *)(a2 + 7480);
    *(_OWORD *)(a1 + 7464) = v21;
  }
  if (*(char *)(a2 + 7511) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7488), *(void **)(a2 + 7488), *(void *)(a2 + 7496));
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 7488);
    *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
    *(_OWORD *)(a1 + 7488) = v22;
  }
  *(void *)(a1 + 7528) = 0;
  *(_OWORD *)(a1 + 7512) = 0u;
  int64x2_t v23 = *(unsigned char **)(a2 + 7512);
  int v24 = *(unsigned char **)(a2 + 7520);
  int64_t v25 = v24 - v23;
  if (v24 != v23)
  {
    if (v25 < 0) {
      sub_2E00();
    }
    uint64_t v26 = (char *)operator new(v24 - v23);
    *(void *)(a1 + 7512) = v26;
    *(void *)(a1 + 7520) = v26;
    long long v27 = &v26[4 * (v25 >> 2)];
    *(void *)(a1 + 7528) = v27;
    memcpy(v26, v23, v25);
    *(void *)(a1 + 7520) = v27;
  }
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  sub_510340(a1 + 7536, *(void *)(a2 + 7536), *(void *)(a2 + 7544), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7544) - *(void *)(a2 + 7536)) >> 5));
  return a1;
}

void sub_7A24B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23)
{
  if (a21[232] < 0)
  {
    operator delete(*v25);
    if ((a21[208] & 0x80000000) == 0)
    {
LABEL_4:
      sub_28F14C(a9);
      sub_574598(a11);
      sub_4D9814(a13);
      if (a21[24] < 0)
      {
        operator delete(*a10);
        if ((*a21 & 0x80000000) == 0)
        {
LABEL_6:
          long long v29 = *a14;
          if (!*a14) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
      }
      else if ((*a21 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*a12);
      long long v29 = *a14;
      if (!*a14)
      {
LABEL_8:
        sub_575104(a15);
        sub_4F2BD0(a16);
        sub_4D9814(a17);
        sub_4D4B58(a18);
        sub_1A668(a19);
        sub_4D4B58(a20);
        sub_4D4B58(a22);
        sub_4D4B58(a23);
        sub_4D4B58(*(void *)(v27 - 104));
        sub_4D4B58(*(void *)(v27 - 96));
        sub_5915D8(v24);
        sub_591648(*(void ***)(v27 - 88));
        sub_5916B4((void **)v23);
        _Unwind_Resume(a1);
      }
LABEL_7:
      *(void *)(v23 + 7200) = v29;
      operator delete(v29);
      goto LABEL_8;
    }
  }
  else if ((a21[208] & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*v26);
  goto LABEL_4;
}

void sub_7A2704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (!*a14) {
    JUMPOUT(0x7A2620);
  }
  JUMPOUT(0x7A2618);
}

uint64_t sub_7A2718(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x550E73F4B414ALL) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(12328 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = result + 12328 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_7A2828(v8 + v9, a2 + v9);
        v9 += 12328;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_7A27E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_7A27F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 12328)
    sub_5752F4(v10 - 12328 + v11);
  *(void *)(v9 + 8) = v10;
  sub_5A7038(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_7A2828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7A3ACC(a1, a2);
  *(_WORD *)(v4 + 1056) = *(_WORD *)(a2 + 1056);
  *(void *)(v4 + 1064) = 0;
  *(void *)(v4 + 1080) = 0;
  *(void *)(v4 + 1072) = 0;
  sub_593F6C(v4 + 1064, *(void *)(a2 + 1064), *(void *)(a2 + 1072), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 5));
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  sub_593F6C(a1 + 1088, *(void *)(a2 + 1088), *(void *)(a2 + 1096), 0x2FC962FC962FC963 * ((uint64_t)(*(void *)(a2 + 1096) - *(void *)(a2 + 1088)) >> 5));
  *(void *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  sub_59888C(a1 + 1112, *(void *)(a2 + 1112), *(void *)(a2 + 1120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 1120) - *(void *)(a2 + 1112)) >> 4));
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  long long v5 = *(unsigned char **)(a2 + 1136);
  uint64_t v6 = *(unsigned char **)(a2 + 1144);
  int64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6 - v5);
    *(void *)(a1 + 1136) = v8;
    *(void *)(a1 + 1144) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 1152) = v9;
    memcpy(v8, v5, v7);
    *(void *)(a1 + 1144) = v9;
  }
  *(void *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  uint64_t v10 = *(unsigned char **)(a2 + 1160);
  uint64_t v11 = *(unsigned char **)(a2 + 1168);
  int64_t v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v11 - v10);
    *(void *)(a1 + 1160) = v13;
    *(void *)(a1 + 1168) = v13;
    int64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 1176) = v14;
    memcpy(v13, v10, v12);
    *(void *)(a1 + 1168) = v14;
  }
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  sub_598AE0((void *)(a1 + 1184), *(void *)(a2 + 1184), *(void *)(a2 + 1192), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 1192) - *(void *)(a2 + 1184)) >> 5));
  if (*(char *)(a2 + 1231) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1208), *(void **)(a2 + 1208), *(void *)(a2 + 1216));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 1208);
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    *(_OWORD *)(a1 + 1208) = v15;
  }
  uint64_t v16 = (unsigned char *)(a1 + 1232);
  if (*(char *)(a2 + 1255) < 0)
  {
    sub_4200(v16, *(void **)(a2 + 1232), *(void *)(a2 + 1240));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 1232);
    *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
    *(_OWORD *)uint64_t v16 = v17;
  }
  sub_598C04(a1 + 1256, (uint64_t *)(a2 + 1256));
  sub_599260(a1 + 2344, a2 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_8A6F8((char *)(a1 + 7144), *(void *)(a2 + 7144), *(void *)(a2 + 7152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7152) - *(void *)(a2 + 7144)) >> 3));
  sub_4F58AC(a1 + 7168, a2 + 7168);
  *(void *)(a1 + 7344) = 0;
  *(_OWORD *)(a1 + 7328) = 0u;
  long long v18 = *(unsigned char **)(a2 + 7328);
  long long v19 = *(unsigned char **)(a2 + 7336);
  int64_t v20 = v19 - v18;
  if (v19 != v18)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v20 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    long long v21 = (char *)operator new(v20);
    *(void *)(a1 + 7328) = v21;
    *(void *)(a1 + 7336) = v21;
    *(void *)(a1 + 7344) = &v21[8 * (v20 >> 3)];
    size_t v22 = 24 * ((v20 - 24) / 0x18uLL) + 24;
    memcpy(v21, v18, v22);
    *(void *)(a1 + 7336) = &v21[v22];
  }
  *(void *)(a1 + 7368) = 0;
  *(_OWORD *)(a1 + 7352) = 0u;
  sub_510340(a1 + 7352, *(void *)(a2 + 7352), *(void *)(a2 + 7360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 7360) - *(void *)(a2 + 7352)) >> 5));
  if (*(char *)(a2 + 7399) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7376), *(void **)(a2 + 7376), *(void *)(a2 + 7384));
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 7376);
    *(void *)(a1 + 7392) = *(void *)(a2 + 7392);
    *(_OWORD *)(a1 + 7376) = v23;
  }
  if (*(char *)(a2 + 7423) < 0)
  {
    sub_4200((unsigned char *)(a1 + 7400), *(void **)(a2 + 7400), *(void *)(a2 + 7408));
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 7400);
    *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
    *(_OWORD *)(a1 + 7400) = v24;
  }
  *(void *)(a1 + 7440) = 0;
  *(_OWORD *)(a1 + 7424) = 0u;
  sub_8A6F8((char *)(a1 + 7424), *(void *)(a2 + 7424), *(void *)(a2 + 7432), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 7432) - *(void *)(a2 + 7424)) >> 3));
  *(void *)(a1 + 7464) = 0;
  *(_OWORD *)(a1 + 7448) = 0u;
  sub_5994B4(a1 + 7448, *(void *)(a2 + 7448), *(void *)(a2 + 7456), 0x1A8C536FE1A8C537 * ((uint64_t)(*(void *)(a2 + 7456) - *(void *)(a2 + 7448)) >> 3));
  *(void *)(a1 + 7488) = 0;
  *(_OWORD *)(a1 + 7472) = 0u;
  sub_599AAC((void *)(a1 + 7472), *(void *)(a2 + 7472), *(void *)(a2 + 7480), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7480) - *(void *)(a2 + 7472)) >> 3));
  *(void *)(a1 + 7512) = 0;
  *(_OWORD *)(a1 + 7496) = 0u;
  sub_599D50(a1 + 7496, *(void *)(a2 + 7496), *(void *)(a2 + 7504), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 7504) - *(void *)(a2 + 7496)) >> 4));
  sub_5998CC(a1 + 7520, a2 + 7520);
  sub_5998CC(a1 + 8336, a2 + 8336);
  sub_4F58AC(a1 + 9152, a2 + 9152);
  sub_4F58AC(a1 + 9312, a2 + 9312);
  sub_4F58AC(a1 + 9472, a2 + 9472);
  sub_4F58AC(a1 + 9632, a2 + 9632);
  sub_4F58AC(a1 + 9792, a2 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  sub_599EE0(a1 + 9952, *(void *)(a2 + 9952), *(void *)(a2 + 9960), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 9960) - *(void *)(a2 + 9952)) >> 6));
  *(_WORD *)(a1 + 9976) = *(_WORD *)(a2 + 9976);
  *(void *)(a1 + 9984) = 0;
  *(void *)(a1 + 10000) = 0;
  *(void *)(a1 + 9992) = 0;
  sub_59A084(a1 + 9984, *(void *)(a2 + 9984), *(void *)(a2 + 9992), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 9992) - *(void *)(a2 + 9984)) >> 3));
  *(void *)(a1 + 10024) = 0;
  *(_OWORD *)(a1 + 10008) = 0u;
  sub_59A230(a1 + 10008, *(void *)(a2 + 10008), *(void *)(a2 + 10016), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10016) - *(void *)(a2 + 10008)) >> 3));
  *(void *)(a1 + 10048) = 0;
  *(_OWORD *)(a1 + 10032) = 0u;
  sub_59A230(a1 + 10032, *(void *)(a2 + 10032), *(void *)(a2 + 10040), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10040) - *(void *)(a2 + 10032)) >> 3));
  *(void *)(a1 + 10072) = 0;
  *(_OWORD *)(a1 + 10056) = 0u;
  sub_59A230(a1 + 10056, *(void *)(a2 + 10056), *(void *)(a2 + 10064), 0x4FCACE213F2B3885 * ((uint64_t)(*(void *)(a2 + 10064) - *(void *)(a2 + 10056)) >> 3));
  int64_t v25 = (unsigned char *)(a1 + 10080);
  if (*(char *)(a2 + 10103) < 0)
  {
    sub_4200(v25, *(void **)(a2 + 10080), *(void *)(a2 + 10088));
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 10080);
    *(void *)(a1 + 10096) = *(void *)(a2 + 10096);
    *(_OWORD *)int64_t v25 = v26;
  }
  *(_OWORD *)(a1 + 10104) = *(_OWORD *)(a2 + 10104);
  *(void *)(a1 + 10120) = 0;
  *(void *)(a1 + 10136) = 0;
  *(void *)(a1 + 10128) = 0;
  uint64_t v27 = *(unsigned char **)(a2 + 10120);
  uint64_t v28 = *(unsigned char **)(a2 + 10128);
  int64_t v29 = v28 - v27;
  if (v28 != v27)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v30 = (char *)operator new(v29);
    *(void *)(a1 + 10120) = v30;
    *(void *)(a1 + 10128) = v30;
    long long v31 = &v30[8 * (v29 >> 3)];
    *(void *)(a1 + 10136) = v31;
    memcpy(v30, v27, v29);
    *(void *)(a1 + 10128) = v31;
  }
  *(void *)(a1 + 10152) = 0;
  *(void *)(a1 + 10144) = 0;
  *(void *)(a1 + 10160) = 0;
  sub_59A3E8((void *)(a1 + 10144), *(void *)(a2 + 10144), *(void *)(a2 + 10152), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 10152) - *(void *)(a2 + 10144)) >> 3));
  *(_DWORD *)(a1 + 10168) = *(_DWORD *)(a2 + 10168);
  *(void *)(a1 + 10176) = 0;
  *(void *)(a1 + 10192) = 0;
  *(void *)(a1 + 10184) = 0;
  sub_59A5F8((void *)(a1 + 10176), *(void *)(a2 + 10176), *(void *)(a2 + 10184), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 10184) - *(void *)(a2 + 10176)) >> 3));
  sub_59A7D4(a1 + 10200, a2 + 10200);
  sub_59A7D4(a1 + 10880, a2 + 10880);
  *(void *)(a1 + 11576) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  uint64_t v32 = *(unsigned char **)(a2 + 11560);
  long long v33 = *(unsigned char **)(a2 + 11568);
  int64_t v34 = v33 - v32;
  if (v33 != v32)
  {
    if (v34 < 0) {
      sub_2E00();
    }
    __n128 v35 = (char *)operator new(v33 - v32);
    *(void *)(a1 + 11560) = v35;
    *(void *)(a1 + 11568) = v35;
    uint64_t v36 = &v35[4 * (v34 >> 2)];
    *(void *)(a1 + 11576) = v36;
    memcpy(v35, v32, v34);
    *(void *)(a1 + 11568) = v36;
  }
  *(void *)(a1 + 11600) = 0;
  *(_OWORD *)(a1 + 11584) = 0u;
  sub_4BF330(a1 + 11584, *(void *)(a2 + 11584), *(void *)(a2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11592) - *(void *)(a2 + 11584)) >> 3));
  *(void *)(a1 + 11624) = 0;
  *(_OWORD *)(a1 + 11608) = 0u;
  sub_4BF330(a1 + 11608, *(void *)(a2 + 11608), *(void *)(a2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 11616) - *(void *)(a2 + 11608)) >> 3));
  *(void *)(a1 + 11648) = 0;
  *(_OWORD *)(a1 + 11632) = 0u;
  v37 = *(unsigned char **)(a2 + 11632);
  char v38 = *(unsigned char **)(a2 + 11640);
  int64_t v39 = v38 - v37;
  if (v38 != v37)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v39 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v40 = (char *)operator new(v39);
    *(void *)(a1 + 11632) = v40;
    *(void *)(a1 + 11640) = v40;
    uint64_t v41 = &v40[8 * (v39 >> 3)];
    *(void *)(a1 + 11648) = v41;
    memcpy(v40, v37, v39 - 4);
    *(void *)(a1 + 11640) = v41;
  }
  *(void *)(a1 + 11656) = *(void *)(a2 + 11656);
  *(void *)(a1 + 11664) = 0;
  *(void *)(a1 + 11680) = 0;
  *(void *)(a1 + 11672) = 0;
  char v42 = *(unsigned char **)(a2 + 11664);
  unint64_t v43 = *(unsigned char **)(a2 + 11672);
  int64_t v44 = v43 - v42;
  if (v43 != v42)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v44 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    double v45 = (char *)operator new(v44);
    *(void *)(a1 + 11664) = v45;
    *(void *)(a1 + 11672) = v45;
    int v46 = &v45[8 * (v44 >> 3)];
    *(void *)(a1 + 11680) = v46;
    memcpy(v45, v42, v44);
    *(void *)(a1 + 11672) = v46;
  }
  sub_593E8C(a1 + 11688, a2 + 11688);
  *(void *)(a1 + 11968) = 0;
  *(_OWORD *)(a1 + 11952) = 0u;
  sub_59AB94(a1 + 11952, *(void *)(a2 + 11952), *(void *)(a2 + 11960), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 11960) - *(void *)(a2 + 11952)) >> 5));
  *(void *)(a1 + 11992) = 0;
  *(_OWORD *)(a1 + 11976) = 0u;
  sub_4BFFA4((unsigned char *)(a1 + 11976), *(void *)(a2 + 11976), *(void *)(a2 + 11984), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 11984) - *(void *)(a2 + 11976)) >> 4));
  unint64_t v47 = (unsigned char *)(a1 + 12000);
  if (*(char *)(a2 + 12023) < 0)
  {
    sub_4200(v47, *(void **)(a2 + 12000), *(void *)(a2 + 12008));
  }
  else
  {
    long long v48 = *(_OWORD *)(a2 + 12000);
    *(void *)(a1 + 12016) = *(void *)(a2 + 12016);
    *(_OWORD *)unint64_t v47 = v48;
  }
  *(void *)(a1 + 12040) = 0;
  *(_OWORD *)(a1 + 12024) = 0u;
  int v49 = *(unsigned char **)(a2 + 12024);
  size_t v50 = *(unsigned char **)(a2 + 12032);
  uint64_t v51 = v50 - v49;
  if (v50 != v49)
  {
    if (v51 < 0) {
      sub_2E00();
    }
    BOOL v52 = (char *)operator new(v50 - v49);
    *(void *)(a1 + 12024) = v52;
    *(void *)(a1 + 12032) = v52;
    BOOL v53 = &v52[16 * (v51 >> 4)];
    *(void *)(a1 + 12040) = v53;
    memcpy(v52, v49, v51 - 4);
    *(void *)(a1 + 12032) = v53;
  }
  *(void *)(a1 + 12048) = *(void *)(a2 + 12048);
  *(void *)(a1 + 12056) = 0;
  *(void *)(a1 + 12072) = 0;
  *(void *)(a1 + 12064) = 0;
  long long v54 = *(unsigned char **)(a2 + 12056);
  v55 = *(unsigned char **)(a2 + 12064);
  uint64_t v56 = v55 - v54;
  if (v55 != v54)
  {
    if (v56 < 0) {
      sub_2E00();
    }
    v57 = (char *)operator new(v55 - v54);
    *(void *)(a1 + 12056) = v57;
    *(void *)(a1 + 12064) = v57;
    *(void *)(a1 + 12072) = &v57[16 * (v56 >> 4)];
    size_t v58 = v56 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v57, v54, v58);
    *(void *)(a1 + 12064) = &v57[v58];
  }
  sub_59ADF0((void *)(a1 + 12080), (uint64_t *)(a2 + 12080));
  sub_59B068(a1 + 12104, a2 + 12104);
  *(void *)(a1 + 12144) = off_2438EC8;
  if (*(char *)(a2 + 12175) < 0)
  {
    sub_4200((unsigned char *)(a1 + 12152), *(void **)(a2 + 12152), *(void *)(a2 + 12160));
  }
  else
  {
    long long v59 = *(_OWORD *)(a2 + 12152);
    *(void *)(a1 + 12168) = *(void *)(a2 + 12168);
    *(_OWORD *)(a1 + 12152) = v59;
  }
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = *(unsigned char *)(a2 + 12176);
  *(void *)(a1 + 12184) = off_2438EC8;
  long long v60 = (unsigned char *)(a1 + 12192);
  if (*(char *)(a2 + 12215) < 0)
  {
    sub_4200(v60, *(void **)(a2 + 12192), *(void *)(a2 + 12200));
  }
  else
  {
    long long v61 = *(_OWORD *)(a2 + 12192);
    *(void *)(a1 + 12208) = *(void *)(a2 + 12208);
    *(_OWORD *)long long v60 = v61;
  }
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = *(unsigned char *)(a2 + 12216);
  sub_59B7B0(a1 + 12224, a2 + 12224);
  sub_59BC18(a1 + 12264, a2 + 12264);
  sub_74F38((void *)(a1 + 12304), a2 + 12304);
  return a1;
}

void sub_7A3574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void *a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t **a22,void *a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t a29,void **a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void **a38,void **a39)
{
  *(void *)(v39 + 12144) = v41;
  if (v42[152] < 0) {
    operator delete(*v40);
  }
  sub_591918(v43);
  unint64_t v47 = *a9;
  if (*a9)
  {
    *(void *)(v39 + 12064) = v47;
    operator delete(v47);
  }
  long long v48 = *a11;
  if (*a11)
  {
    *(void *)(v39 + 12032) = v48;
    operator delete(v48);
  }
  if (*v42 < 0) {
    operator delete(*a10);
  }
  sub_28F14C(v44);
  sub_5919CC(a12);
  sub_591A38(a13);
  int v49 = *a14;
  if (*a14)
  {
    *(void *)(v39 + 11672) = v49;
    operator delete(v49);
  }
  size_t v50 = *a15;
  if (*a15)
  {
    *(void *)(v39 + 11640) = v50;
    operator delete(v50);
  }
  sub_4B1DB4(a16);
  sub_4B1DB4(a17);
  uint64_t v51 = *a19;
  if (*a19)
  {
    *(void *)(v39 + 11568) = v51;
    operator delete(v51);
  }
  sub_52F970(a20);
  sub_52F970(a21);
  sub_591AC8(a22);
  sub_591B4C(a23);
  if (*(char *)(*(void *)(v45 - 104) + 2704) < 0) {
    operator delete(*a18);
  }
  sub_591C10(a24);
  sub_591C10(a25);
  sub_591C10(a26);
  sub_591CA4(a27);
  sub_591D1C(a28);
  sub_4D4B58(a29);
  sub_4D4B58(a31);
  sub_4D4B58(a33);
  sub_4D4B58(a34);
  sub_4D4B58(a35);
  sub_52F090(a36);
  sub_52F090(a37);
  sub_591DA0(*(void ***)(v45 - 232));
  sub_591DFC(*(void **)(v45 - 224));
  sub_591E78(*(void ***)(v45 - 216));
  sub_1A668(*(void ***)(v45 - 208));
  if (*(char *)(*(void *)(v45 - 104) + 24) < 0) {
    operator delete(*a30);
  }
  if (**(char **)(v45 - 104) < 0) {
    operator delete(*a32);
  }
  sub_50E790(*(void ***)(v45 - 200));
  BOOL v52 = **(void ***)(v45 - 192);
  if (v52)
  {
    *(void *)(v39 + 7336) = v52;
    operator delete(v52);
  }
  sub_4D4B58(*(void *)(v45 - 184));
  sub_1A668(*(void ***)(v45 - 176));
  sub_575104(*(void *)(v45 - 168));
  sub_4F2BD0(*(void ***)(v45 - 160));
  if (*(char *)(v39 + 1255) < 0) {
    operator delete(*a38);
  }
  if (*(char *)(v39 + 1231) < 0) {
    operator delete(*a39);
  }
  sub_4A6814(*(uint64_t **)(v45 - 152));
  BOOL v53 = **(void ***)(v45 - 136);
  if (v53)
  {
    *(void *)(v39 + 1168) = v53;
    operator delete(v53);
  }
  long long v54 = **(void ***)(v45 - 144);
  if (v54)
  {
    *(void *)(v39 + 1144) = v54;
    operator delete(v54);
  }
  sub_591648(*(void ***)(v45 - 128));
  sub_591ED4(*(void ***)(v45 - 120));
  sub_591ED4(*(void ***)(v45 - 112));
  sub_3AFFFC(v39);
  _Unwind_Resume(a1);
}

void sub_7A3A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (!*a14) {
    JUMPOUT(0x7A3870);
  }
  JUMPOUT(0x7A3868);
}

void sub_7A3A60()
{
}

void sub_7A3A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (!*a19) {
    JUMPOUT(0x7A38A8);
  }
  JUMPOUT(0x7A38A0);
}

void sub_7A3A94()
{
  if (!**(void **)(v0 - 192)) {
    JUMPOUT(0x7A39ACLL);
  }
  JUMPOUT(0x7A39A4);
}

void sub_7A3AA8()
{
  if (!**(void **)(v0 - 136)) {
    JUMPOUT(0x7A3A10);
  }
  JUMPOUT(0x7A3A08);
}

void sub_7A3ABC()
{
  if (!*v0) {
    JUMPOUT(0x7A3A24);
  }
  JUMPOUT(0x7A3A1CLL);
}

uint64_t sub_7A3ACC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 4) >= 0x555555555555556) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v6);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[16 * (v6 >> 4)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    int64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11 - 7);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v15 = *(unsigned char **)(a2 + 48);
  int64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    long long v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v17;
    long long v18 = &v17[8 * (v16 >> 3)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  sub_3B1C7C((void *)(a1 + 72), a2 + 72);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_3B1DC8(a1 + 152, (long long *)(a2 + 152));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  sub_3B1DC8(a1 + 312, (long long *)(a2 + 312));
  uint64_t v19 = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 448) = v19;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  long long v21 = *(unsigned char **)(a2 + 464);
  int64_t v20 = *(unsigned char **)(a2 + 472);
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 464) = v23;
    *(void *)(a1 + 472) = v23;
    long long v24 = &v23[4 * (v22 >> 2)];
    *(void *)(a1 + 480) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 472) = v24;
  }
  uint64_t v25 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v25;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_3B1F44(a1 + 512, (uint64_t *)(a2 + 512));
  long long v26 = *(_OWORD *)(a2 + 800);
  long long v27 = *(_OWORD *)(a2 + 816);
  long long v28 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v28;
  *(_OWORD *)(a1 + 800) = v26;
  *(_OWORD *)(a1 + 816) = v27;
  sub_3B2460((void *)(a1 + 864), a2 + 864);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  int64_t v29 = *(unsigned char **)(a2 + 1008);
  uint64_t v30 = *(unsigned char **)(a2 + 1016);
  int64_t v31 = v30 - v29;
  if (v30 != v29)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v31 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v32 = (char *)operator new(v31);
    *(void *)(a1 + 1008) = v32;
    *(void *)(a1 + 1016) = v32;
    long long v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 1024) = v33;
    memcpy(v32, v29, v31 - 4);
    *(void *)(a1 + 1016) = v33;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *(void *)(a2 + 1032), *(void *)(a2 + 1040), (uint64_t)(*(void *)(a2 + 1040) - *(void *)(a2 + 1032)) >> 6);
  return a1;
}

void sub_7A3E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void **a11, uint64_t a12)
{
  uint64_t v19 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 1016) = v19;
    operator delete(v19);
  }
  sub_3B01C8(v17);
  sub_3B0290(v16);
  int64_t v20 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 472) = v20;
    operator delete(v20);
  }
  sub_3B024C(a10);
  sub_3B024C(v15);
  sub_3310C(a12);
  long long v21 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 56) = v21;
    operator delete(v21);
  }
  int64_t v22 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 32) = v22;
    operator delete(v22);
    long long v23 = *(void **)v12;
    if (!*(void *)v12) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v23 = *(void **)v12;
    if (!*(void *)v12) {
      goto LABEL_10;
    }
  }
  *(void *)(v12 + 8) = v23;
  operator delete(v23);
  goto LABEL_10;
}

void sub_7A3F1C()
{
  if (!*v0) {
    JUMPOUT(0x7A3F00);
  }
  JUMPOUT(0x7A3EF8);
}

uint64_t sub_7A3F2C(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[1].i64[0] - a1->i64[0]) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  int64_t v29 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  __p = v7;
  v27.i64[0] = (uint64_t)&v7[176 * v3];
  v27.i64[1] = v27.i64[0];
  long long v28 = &v7[176 * v6];
  sub_4AA8E0((char *)v27.i64[0], (long long *)a2);
  uint64_t v8 = v27.i64[0];
  *(_OWORD *)(v27.i64[0] + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(v8 + 168) = *(void *)(a2 + 168);
  uint64_t v9 = v27.i64[0];
  uint64_t v10 = v27.i64[1] + 176;
  v27.i64[1] += 176;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v23 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      long long v15 = *(_OWORD *)(v11 + v13 - 176);
      uint64_t v16 = v9 + v13;
      *(void *)(v16 - 160) = *(void *)(v11 + v13 - 160);
      *(_OWORD *)(v16 - 176) = v15;
      *(void *)(v14 - 168) = 0;
      *(void *)(v14 - 160) = 0;
      uint64_t v17 = *(void *)(v11 + v13 - 152);
      *(void *)(v14 - 176) = 0;
      *(void *)(v16 - 152) = v17;
      long long v18 = *(_OWORD *)(v11 + v13 - 144);
      *(void *)(v16 - 128) = *(void *)(v11 + v13 - 128);
      *(_OWORD *)(v16 - 144) = v18;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 128) = 0;
      *(void *)(v14 - 144) = 0;
      *(void *)(v16 - 120) = *(void *)(v11 + v13 - 120);
      *(_DWORD *)(v16 - 112) = *(_DWORD *)(v11 + v13 - 112);
      long long v19 = *(_OWORD *)(v11 + v13 - 104);
      *(void *)(v16 - 88) = *(void *)(v11 + v13 - 88);
      *(_OWORD *)(v16 - 104) = v19;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 88) = 0;
      *(void *)(v14 - 104) = 0;
      long long v20 = *(_OWORD *)(v11 + v13 - 80);
      *(void *)(v16 - 64) = *(void *)(v11 + v13 - 64);
      *(_OWORD *)(v16 - 80) = v20;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      *(_DWORD *)(v16 - 56) = *(_DWORD *)(v11 + v13 - 56);
      long long v21 = *(_OWORD *)(v11 + v13 - 48);
      *(void *)(v16 - 32) = *(void *)(v11 + v13 - 32);
      *(_OWORD *)(v16 - 48) = v21;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 48) = 0;
      long long v22 = *(_OWORD *)(v11 + v13 - 24);
      *(void *)(v16 - 8) = *(void *)(v11 + v13 - 8);
      *(_OWORD *)(v16 - 24) = v22;
      v13 -= 176;
    }
    while (v11 + v13 != v12);
    int64x2_t v23 = *a1;
    uint64_t v10 = v27.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v27 = v23;
  long long v24 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v28;
  long long v28 = v24;
  __p = (void *)v23.i64[0];
  sub_79FBB8((uint64_t)&__p, v23.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_7A416C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_79FB80((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_7A4180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      long long v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)long long v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      long long v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)long long v20 = v29;
      long long v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)long long v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      long long v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)long long v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      uint64_t v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)uint64_t v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      uint64_t v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)uint64_t v14 = v29;
      uint64_t v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)uint64_t v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      uint64_t v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)uint64_t v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A44E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_7A44F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 16);
    long long v25 = *(_OWORD *)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 56);
    long long v27 = *(_OWORD *)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 64);
    uint64_t v30 = *(void *)(a1 + 88);
    long long v29 = *(_OWORD *)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    uint64_t v32 = *(void *)(a1 + 112);
    long long v31 = *(_OWORD *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    int v24 = *(_DWORD *)(a1 + 120);
    uint64_t v34 = *(void *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v36 = *(void *)(a1 + 168);
    __n128 v35 = *(__n128 *)(a1 + 152);
    uint64_t v9 = sub_7A0448(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = (void **)(a2 - 176);
    if (a2 - 176 == v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      *(_OWORD *)uint64_t v10 = v25;
      *(void *)(v10 + 16) = v26;
      *(void *)(v10 + 24) = v6;
      long long v19 = (void **)(v10 + 32);
      if (*(char *)(v10 + 55) < 0) {
        operator delete(*v19);
      }
      *(void *)(v10 + 48) = v28;
      *(_OWORD *)long long v19 = v27;
      *(void *)(v10 + 56) = v7;
      *(_DWORD *)(v10 + 64) = v8;
      long long v20 = (void **)(v10 + 72);
      if (*(char *)(v10 + 95) < 0) {
        operator delete(*v20);
      }
      *(void *)(v10 + 88) = v30;
      *(_OWORD *)long long v20 = v29;
      long long v21 = (void **)(v10 + 96);
      if (*(char *)(v10 + 119) < 0) {
        operator delete(*v21);
      }
      *(void *)(v10 + 112) = v32;
      *(_OWORD *)long long v21 = v31;
      *(_DWORD *)(v10 + 120) = v24;
      long long v22 = (void **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0) {
        operator delete(*v22);
      }
      *(void *)(v10 + 144) = v34;
      *(_OWORD *)long long v22 = v33;
      __n128 result = v35;
      *(void *)(v10 + 168) = v36;
      *(__n128 *)(v10 + 152) = v35;
    }
    else
    {
      sub_4C2034(v9, (long long *)(a2 - 176));
      long long v12 = *(_OWORD *)(a2 - 24);
      *(void *)(v10 + 168) = *(void *)(a2 - 8);
      *(_OWORD *)(v10 + 152) = v12;
      if (*(char *)(a2 - 153) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 160) = v26;
      *(_OWORD *)unint64_t v11 = v25;
      *(void *)(a2 - 152) = v6;
      uint64_t v13 = (void **)(a2 - 144);
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v13);
      }
      *(void *)(a2 - 128) = v28;
      *(_OWORD *)uint64_t v13 = v27;
      *(void *)(a2 - 120) = v7;
      *(_DWORD *)(a2 - 112) = v8;
      uint64_t v14 = (void **)(a2 - 104);
      if (*(char *)(a2 - 81) < 0) {
        operator delete(*v14);
      }
      uint64_t v15 = v10 + 176;
      *(void *)(a2 - 88) = v30;
      *(_OWORD *)uint64_t v14 = v29;
      uint64_t v16 = (void **)(a2 - 80);
      if (*(char *)(a2 - 57) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 64) = v32;
      *(_OWORD *)uint64_t v16 = v31;
      *(_DWORD *)(a2 - 56) = v24;
      uint64_t v17 = (void **)(a2 - 48);
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 - 32) = v34;
      *(_OWORD *)uint64_t v17 = v33;
      *(void *)(a2 - 8) = v36;
      *(__n128 *)(a2 - 24) = v35;
      sub_79FC80(a1, v15, a3, 0x2E8BA2E8BA2E8BA3 * ((v15 - a1) >> 4));
    }
  }
  return result;
}

void sub_7A485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_7A4870()
{
  byte_25B8727 = 1;
  word_25B8710 = 65;
  byte_25B873F = 1;
  word_25B8728 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B87D0 = 0u;
  *(_OWORD *)&qword_25B87E0 = 0u;
  dword_25B87F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B87D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B87D0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B87D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B87D0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25B8757 = 8;
  strcpy((char *)&qword_25B8740, "any_mode");
  byte_25B876F = 7;
  strcpy((char *)&dword_25B8758, "cycling");
  byte_25B8787 = 7;
  strcpy((char *)&dword_25B8770, "driving");
  byte_25B879F = 7;
  strcpy((char *)&dword_25B8788, "walking");
  qword_25B87A8 = 0;
  qword_25B87B0 = 0;
  qword_25B87A0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B87A0 = (uint64_t)v0;
  qword_25B87A8 = (uint64_t)(v0 + 9);
  qword_25B87B0 = (uint64_t)(v0 + 9);
  qword_25B87B8 = 0;
  qword_25B87C0 = 0;
  unk_25B87C8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B87C0 = (uint64_t)(v1 + 9);
  unk_25B87C8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B87B8 = (uint64_t)v1;
  return result;
}

void sub_7A4B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B87E0) {
    sub_20AAF64((void **)qword_25B87E0);
  }
  v37 = (void *)xmmword_25B87D0;
  *(void *)&xmmword_25B87D0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_7A4BD8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *__src)
{
  *(void *)a1 = a2;
  memcpy((void *)(a1 + 8), __src, 0x76CuLL);
  if (__src[1927] < 0)
  {
    sub_4200((unsigned char *)(a1 + 1912), *((void **)__src + 238), *((void *)__src + 239));
  }
  else
  {
    long long v9 = *((_OWORD *)__src + 119);
    *(void *)(a1 + 1928) = *((void *)__src + 240);
    *(_OWORD *)(a1 + 1912) = v9;
  }
  long long v10 = *(_OWORD *)(__src + 1928);
  long long v11 = *(_OWORD *)(__src + 1944);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(__src + 1960);
  *(_OWORD *)(a1 + 1952) = v11;
  *(_OWORD *)(a1 + 1936) = v10;
  long long v12 = *(_OWORD *)(__src + 1976);
  long long v13 = *(_OWORD *)(__src + 1992);
  long long v14 = *(_OWORD *)(__src + 2008);
  *(_OWORD *)(a1 + 2026) = *(_OWORD *)(__src + 2018);
  *(_OWORD *)(a1 + 2016) = v14;
  *(_OWORD *)(a1 + 2000) = v13;
  *(_OWORD *)(a1 + 1984) = v12;
  sub_4BBDC0(a1 + 2048, a4);
  sub_688A04(a3, 4u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3584));
  sub_688A04(a3, 3u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3600));
  return a1;
}

void sub_7A4CD0(_Unwind_Exception *a1)
{
  sub_14A84(v4);
  sub_4BCED0(v3);
  if (*(char *)(v1 + 1935) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_7A4D10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v5 = (uint64_t *)sub_374DF4(a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      if (!*(unsigned char *)(v6 + 1162))
      {
        if (*(unsigned char *)(a1 + 3455) && *(void *)a3 != *(void *)(a3 + 8)) {
          return;
        }
        v16[0] = *(_DWORD *)v6;
        v16[2] = *(_DWORD *)(v6 + 8);
        char v18 = *(unsigned char *)(v6 + 1136);
        if (v18) {
          sub_4BE9F4((uint64_t)v17, v6 + 16);
        }
        long long v8 = *(_OWORD *)(v6 + 1144);
        *(_DWORD *)&v19[15] = *(_DWORD *)(v6 + 1159);
        *(_OWORD *)long long v19 = v8;
        sub_7A4F1C(a1, (uint64_t)v16, 0, (uint64_t)__p);
        if (v18)
        {
          sub_3A6B94((uint64_t)v17);
          char v18 = 0;
        }
        long long v9 = (void *)HIBYTE(v15);
        char v10 = HIBYTE(v15);
        if (v15 < 0) {
          long long v9 = __p[1];
        }
        if (v9)
        {
          unint64_t v11 = *(void *)(a3 + 8);
          if (v11 >= *(void *)(a3 + 16))
          {
            long long v13 = sub_1D740((char **)a3, (uint64_t)__p);
          }
          else
          {
            if (SHIBYTE(v15) < 0)
            {
              sub_4200(*(unsigned char **)(a3 + 8), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              long long v12 = *(_OWORD *)__p;
              *(void *)(v11 + 16) = v15;
              *(_OWORD *)unint64_t v11 = v12;
            }
            long long v13 = (char *)(v11 + 24);
            *(void *)(a3 + 8) = v11 + 24;
          }
          *(void *)(a3 + 8) = v13;
          char v10 = HIBYTE(v15);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 += 1168;
    }
    while (v6 != v7);
  }
}

void sub_7A4EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)v14);
  _Unwind_Resume(a1);
}

void sub_7A4F04(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_7A4F1C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 3) <= 1)
  {
    if (!*(unsigned char *)(a2 + 1136))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_4BE9F4((uint64_t)__p, a2 + 16);
    if (v44)
    {
      if (!sub_604340((uint64_t)v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1))
      {
        int v12 = *(_DWORD *)(a2 + 8);
        v36[0] = *(_DWORD *)a2;
        v36[2] = v12;
        char v38 = *(unsigned char *)(a2 + 1136);
        if (v38) {
          sub_4BE9F4((uint64_t)v37, a2 + 16);
        }
        *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 1144);
        *(_DWORD *)&v39[15] = *(_DWORD *)(a2 + 1159);
        sub_7A6E88(a1, (uint64_t)v36, a3, &v31);
        if (v38)
        {
          sub_3A6B94((uint64_t)v37);
          char v38 = 0;
        }
        std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v31.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v14 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)&v31);
          if (*((char *)v14 + 23) < 0)
          {
            sub_4200((unsigned char *)a4, (void *)*v14, v14[1]);
          }
          else
          {
            long long v15 = *(_OWORD *)v14;
            *(void *)(a4 + 16) = v14[2];
            *(_OWORD *)a4 = v15;
          }
          uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
          if ((v16 & 0x80u) == 0) {
            uint64_t v17 = (char *)a4;
          }
          else {
            uint64_t v17 = *(char **)a4;
          }
          if (byte_25BAEB7 >= 0) {
            char v18 = &qword_25BAEA0;
          }
          else {
            char v18 = (uint64_t *)qword_25BAEA0;
          }
          if (byte_25BAEB7 >= 0) {
            int64_t v19 = byte_25BAEB7;
          }
          else {
            int64_t v19 = unk_25BAEA8;
          }
          if (v19)
          {
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(a4 + 8);
            }
            if (v16 >= v19)
            {
              long long v20 = &v17[v16];
              int v21 = *(char *)v18;
              long long v22 = v17;
              do
              {
                uint64_t v23 = v16 - v19;
                if (v23 == -1) {
                  break;
                }
                int v24 = (char *)memchr(v22, v21, v23 + 1);
                if (!v24) {
                  break;
                }
                long long v25 = v24;
                if (!memcmp(v24, v18, v19))
                {
                  if (v25 != v20)
                  {
                    std::string::size_type v26 = v25 - v17;
                    if (v25 - v17 != -1) {
                      goto LABEL_51;
                    }
                  }
                  break;
                }
                long long v22 = v25 + 1;
                uint64_t v16 = v20 - (v25 + 1);
              }
              while (v16 >= v19);
            }
          }
          else
          {
            std::string::size_type v26 = 0;
LABEL_51:
            if ((v42 & 0x80u) == 0) {
              long long v27 = (const std::string::value_type *)v41;
            }
            else {
              long long v27 = (const std::string::value_type *)v41[0];
            }
            if ((v42 & 0x80u) == 0) {
              std::string::size_type v28 = v42;
            }
            else {
              std::string::size_type v28 = v41[1];
            }
            std::string::replace((std::string *)a4, v26, v19, v27, v28);
          }
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 0;
          *(unsigned char *)a4 = 0;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        goto LABEL_60;
      }
      if (v44)
      {
        sub_604384(v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1, a4);
LABEL_60:
        sub_3A6B94((uint64_t)__p);
        return;
      }
    }
    long long v29 = __cxa_allocate_exception(8uLL);
    void *v29 = &off_2439078;
  }
  v32[0] = *(_DWORD *)a2;
  v32[2] = v8;
  char v34 = *(unsigned char *)(a2 + 1136);
  if (v34) {
    sub_4BE9F4((uint64_t)v33, a2 + 16);
  }
  *(_OWORD *)__n128 v35 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)&v35[15] = *(_DWORD *)(a2 + 1159);
  sub_7A6E88(a1, (uint64_t)v32, a3, __p);
  if (v34)
  {
    sub_3A6B94((uint64_t)v33);
    char v34 = 0;
  }
  std::string::size_type v9 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p[0].__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    char v10 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)__p);
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200((unsigned char *)a4, (void *)*v10, v10[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      *(void *)(a4 + 16) = v10[2];
      *(_OWORD *)a4 = v11;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
}

void sub_7A5344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0)
  {
    operator delete(__p);
    sub_3A6B94((uint64_t)&STACK[0x938]);
    _Unwind_Resume(a1);
  }
  sub_3A6B94((uint64_t)&STACK[0x938]);
  _Unwind_Resume(a1);
}

void sub_7A541C(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  uint64_t v5 = sub_646C34(a1);
  char v4 = 1;
  sub_5F6090(a2, (uint64_t)&qword_25BA5E8, &v5, &v4);
  sub_5F41E8((uint64_t)a2, (uint64_t)&qword_25BA5E8);
}

void sub_7A548C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A54A0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_7A54E8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A54FC(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = sub_64695C(a2);
  if (sub_62D404(a1 + 2048) && *(unsigned char *)(a1 + 3459) && v6 != 0)
  {
    sub_503BC8(v6, (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v34);
    if (byte_25BC32F >= 0) {
      std::string::size_type v9 = (const std::string::value_type *)&qword_25BC318;
    }
    else {
      std::string::size_type v9 = (const std::string::value_type *)qword_25BC318;
    }
    if (byte_25BC32F >= 0) {
      std::string::size_type v10 = byte_25BC32F;
    }
    else {
      std::string::size_type v10 = unk_25BC320;
    }
    long long v11 = std::string::insert(&v34, 0, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (size >= 0x17)
    {
      uint64_t v16 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((size | 7) != 0x17) {
        uint64_t v16 = size | 7;
      }
      uint64_t v17 = v16 + 1;
      long long v15 = operator new(v16 + 1);
      v35[1] = (void *)size;
      int64_t v36 = v17 | 0x8000000000000000;
      v35[0] = v15;
      if (size >= 0x20 && (unint64_t)((char *)v15 - (char *)p_p) >= 0x20)
      {
        char v18 = (std::string *)((char *)p_p + (size & 0xFFFFFFFFFFFFFFE0));
        int64_t v19 = (char *)v15 + (size & 0xFFFFFFFFFFFFFFE0);
        long long v20 = v15 + 1;
        int v21 = &p_p->__r_.__value_.__r.__words[2];
        unint64_t v22 = size & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *long long v20 = v23;
          v20 += 2;
          v21 += 4;
          v22 -= 32;
        }
        while (v22);
        if (size == (size & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }
    else
    {
      HIBYTE(v36) = size;
      if (!size)
      {
        LOBYTE(v35[0]) = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_41;
        }
        goto LABEL_72;
      }
      long long v15 = v35;
    }
    char v18 = p_p;
    int64_t v19 = (std::string::value_type *)v15;
    do
    {
LABEL_35:
      std::string::value_type v24 = v18->__r_.__value_.__s.__data_[0];
      char v18 = (std::string *)((char *)v18 + 1);
      *v19++ = v24;
    }
    while (v18 != (std::string *)((char *)p_p + size));
LABEL_36:
    *int64_t v19 = 0;
    if (v36 >= 0) {
      long long v25 = v35;
    }
    else {
      long long v25 = (void **)v35[0];
    }
    do
    {
      *(unsigned char *)long long v25 = __toupper(p_p->__r_.__value_.__s.__data_[0]);
      long long v25 = (void **)((char *)v25 + 1);
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_73:
      operator delete(v34.__r_.__value_.__l.__data_);
LABEL_42:
      std::to_string(&v33, v6);
      if (byte_25BC390[23] < 0) {
        sub_4200(&__p, *(void **)byte_25BC390, *(unint64_t *)&byte_25BC390[8]);
      }
      else {
        std::string __p = *(std::string *)byte_25BC390;
      }
      std::string v38 = v33;
      memset(&v33, 0, sizeof(v33));
      sub_2AAA4((uint64_t)&v34, (uint64_t)&__p, 1);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_47:
          if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_48;
          }
          goto LABEL_69;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        std::string::size_type v26 = *(std::__shared_weak_count **)(a1 + 3592);
        uint64_t v31 = *(void *)(a1 + 3584);
        uint64_t v32 = v26;
        if (!v26)
        {
LABEL_50:
          sub_658310((uint64_t)v35, (uint64_t)&v34, &v31, 0, &__p);
          long long v27 = v32;
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          sub_5F41E8((uint64_t)a3, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::size_type v28 = (void **)v34.__r_.__value_.__r.__words[2];
          if (!v34.__r_.__value_.__r.__words[2])
          {
LABEL_56:
            long long v29 = (void *)v34.__r_.__value_.__r.__words[0];
            v34.__r_.__value_.__r.__words[0] = 0;
            if (v29) {
              operator delete(v29);
            }
            if (SHIBYTE(v36) < 0) {
              operator delete(v35[0]);
            }
            return;
          }
          while (1)
          {
            uint64_t v30 = (void **)*v28;
            if (*((char *)v28 + 63) < 0)
            {
              operator delete(v28[5]);
              if (*((char *)v28 + 39) < 0) {
LABEL_66:
              }
                operator delete(v28[2]);
            }
            else if (*((char *)v28 + 39) < 0)
            {
              goto LABEL_66;
            }
            operator delete(v28);
            std::string::size_type v28 = v30;
            if (!v30) {
              goto LABEL_56;
            }
          }
        }
LABEL_49:
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_50;
      }
LABEL_69:
      operator delete(v33.__r_.__value_.__l.__data_);
      std::string::size_type v26 = *(std::__shared_weak_count **)(a1 + 3592);
      uint64_t v31 = *(void *)(a1 + 3584);
      uint64_t v32 = v26;
      if (!v26) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_72:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_73;
  }
  uint64_t v8 = *(void *)nullsub_1(a2) + 11688;

  sub_7A7430(a1, v8, a3);
}

void sub_7A596C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_7A5A58(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5F3BA0((uint64_t)a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  uint64_t v7 = sub_646C34(a2);
  char v6 = 1;
  sub_5F6090(a3, (uint64_t)&qword_25BA5E8, &v7, &v6);
  sub_5F41E8((uint64_t)a3, (uint64_t)&qword_25BA5E8);
  sub_7A54FC(a1, a2, a3);
}

void sub_7A5AF0(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A5B04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3BA0(a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  if (*(unsigned char *)(a1 + 3455))
  {
    char v6 = (void *)sub_374DF4(a2);
    if (*v6 != v6[1])
    {
      uint64_t v7 = sub_374DF4(a2);
      uint64_t v8 = *(void *)v7;
      if (!*(unsigned char *)(*(void *)v7 + 1160))
      {
        int v9 = *(_DWORD *)(v8 + 8);
        v14[0] = *(_DWORD *)v8;
        v14[2] = v9;
        char v16 = *(unsigned char *)(v8 + 1136);
        if (v16) {
          sub_4BE9F4((uint64_t)v15, v8 + 16);
        }
        long long v10 = *(_OWORD *)(v8 + 1144);
        *(_DWORD *)&v17[15] = *(_DWORD *)(v8 + 1159);
        *(_OWORD *)uint64_t v17 = v10;
        sub_7A4F1C(a1, (uint64_t)v14, 1, (uint64_t)__p);
        if (v16)
        {
          sub_3A6B94((uint64_t)v15);
          char v16 = 0;
        }
        unint64_t v11 = v13;
        if ((v13 & 0x80u) != 0) {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if (v11)
        {
          sub_5F41E8(a3, (uint64_t)__p);
          if (*(_DWORD *)(v8 + 1144) == 1)
          {
            if (*(void *)(v8 + 1152)) {
              sub_7A5CE0(a1, v8 + 1144);
            }
          }
        }
        if ((char)v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_7A5C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_7A5CE0(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a2 + 8);
  if (*(_DWORD *)a2 == 1 && result != 0)
  {
    std::to_string(&v4, result);
    sub_5F1E5C(__dst, (long long *)byte_25BC390);
  }
  return result;
}

void sub_7A5D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7A5D98(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1[3455])
  {
    if (!a1[2032] || (uint64_t v6 = sub_62D414((uint64_t)(a1 + 2048)), v6 == 0x7FFFFFFF) || (int)v6 <= SHIDWORD(v6))
    {
      v86 = 0;
      v87 = 0;
      unint64_t v88 = 0;
      uint64_t v7 = (void *)sub_374DF4(a2);
      if (*v7 != v7[1] && !*(unsigned char *)(*(void *)sub_374DF4(a2) + 1161))
      {
        uint64_t v8 = (uint64_t *)sub_374DF4(a2);
        sub_7A648C(*v8, (uint64_t)__p);
        if (BYTE4(__p[0]))
        {
          int v9 = v87;
          if ((unint64_t)v87 >= v88)
          {
            unint64_t v11 = (char *)v86;
            int64_t v12 = v87 - (unsigned char *)v86;
            uint64_t v13 = (v87 - (unsigned char *)v86) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              sub_2E00();
            }
            uint64_t v15 = v88 - (void)v86;
            if ((uint64_t)(v88 - (void)v86) >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              if (v16 >> 62) {
                sub_188D718();
              }
              uint64_t v17 = (char *)operator new(4 * v16);
            }
            else
            {
              uint64_t v17 = 0;
            }
            char v18 = &v17[4 * v13];
            int64_t v19 = &v17[4 * v16];
            *(_DWORD *)char v18 = __p[0];
            long long v10 = v18 + 4;
            if (v9 != v11)
            {
              unint64_t v20 = v9 - v11 - 4;
              if (v20 < 0x2C) {
                goto LABEL_117;
              }
              if ((unint64_t)(v9 - v17 - v12) < 0x20) {
                goto LABEL_117;
              }
              uint64_t v21 = (v20 >> 2) + 1;
              uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
              long long v23 = &v9[-v22];
              v18 -= v22;
              std::string::value_type v24 = &v17[4 * v13 - 16];
              long long v25 = v9 - 16;
              uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v27 = *(_OWORD *)v25;
                *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
                *(_OWORD *)std::string::value_type v24 = v27;
                v24 -= 32;
                v25 -= 32;
                v26 -= 8;
              }
              while (v26);
              int v9 = v23;
              if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_117:
                do
                {
                  int v28 = *((_DWORD *)v9 - 1);
                  v9 -= 4;
                  *((_DWORD *)v18 - 1) = v28;
                  v18 -= 4;
                }
                while (v9 != v11);
              }
            }
            v86 = v18;
            v87 = v10;
            unint64_t v88 = (unint64_t)v19;
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_DWORD *)v87 = __p[0];
            long long v10 = v9 + 4;
          }
          v87 = v10;
        }
      }
      if (*(_DWORD *)(sub_6477D4(a2) + 56))
      {
        long long v29 = v87;
        if ((unint64_t)v87 >= v88)
        {
          uint64_t v31 = (char *)v86;
          int64_t v32 = v87 - (unsigned char *)v86;
          uint64_t v33 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v35 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            if (v36 >> 62) {
              sub_188D718();
            }
            v37 = (char *)operator new(4 * v36);
          }
          else
          {
            v37 = 0;
          }
          std::string v38 = &v37[4 * v33];
          uint64_t v39 = &v37[4 * v36];
          *(_DWORD *)std::string v38 = 42;
          uint64_t v30 = v38 + 4;
          if (v29 != v31)
          {
            unint64_t v40 = v29 - v31 - 4;
            if (v40 < 0x2C) {
              goto LABEL_118;
            }
            if ((unint64_t)(v29 - v37 - v32) < 0x20) {
              goto LABEL_118;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v43 = &v29[-v42];
            v38 -= v42;
            char v44 = &v37[4 * v33 - 16];
            uint64_t v45 = v29 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
              *(_OWORD *)char v44 = v47;
              v44 -= 32;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            long long v29 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_118:
              do
              {
                int v48 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v38 - 1) = v48;
                v38 -= 4;
              }
              while (v29 != v31);
            }
          }
          v86 = v38;
          v87 = v30;
          unint64_t v88 = (unint64_t)v39;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)v87 = 42;
          uint64_t v30 = v29 + 4;
        }
        v87 = v30;
      }
      uint64_t v49 = sub_6477D4(a2);
      size_t v50 = v87;
      if (*(unsigned char *)v49 || *(_DWORD *)(v49 + 52))
      {
        if ((unint64_t)v87 >= v88)
        {
          BOOL v52 = v86;
          int64_t v53 = v87 - (unsigned char *)v86;
          uint64_t v54 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v56 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            if (v57 >> 62) {
              sub_188D718();
            }
            size_t v58 = operator new(4 * v57);
          }
          else
          {
            size_t v58 = 0;
          }
          long long v59 = &v58[4 * v54];
          long long v60 = &v58[4 * v57];
          *(_DWORD *)long long v59 = 3;
          uint64_t v51 = v59 + 4;
          if (v50 != v52)
          {
            unint64_t v61 = v50 - v52 - 4;
            if (v61 < 0x2C) {
              goto LABEL_119;
            }
            if ((unint64_t)(v50 - v58 - v53) < 0x20) {
              goto LABEL_119;
            }
            uint64_t v62 = (v61 >> 2) + 1;
            uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v64 = &v50[-v63];
            v59 -= v63;
            int64x2_t v65 = &v58[4 * v54 - 16];
            uint64_t v66 = v50 - 16;
            uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v68 = *(_OWORD *)v66;
              *(v65 - 1) = *((_OWORD *)v66 - 1);
              *int64x2_t v65 = v68;
              v65 -= 2;
              v66 -= 32;
              v67 -= 8;
            }
            while (v67);
            size_t v50 = v64;
            if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_119:
              do
              {
                int v69 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v59 - 1) = v69;
                v59 -= 4;
              }
              while (v50 != v52);
            }
          }
          v86 = v59;
          v87 = v51;
          unint64_t v88 = (unint64_t)v60;
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(_DWORD *)v87 = 3;
          uint64_t v51 = v50 + 4;
        }
        v87 = v51;
        size_t v50 = v51;
      }
      unint64_t v70 = 126 - 2 * __clz((v50 - (unsigned char *)v86) >> 2);
      __p[0] = a1;
      if (v50 == v86) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = v70;
      }
      sub_7AD35C((uint64_t)v86, (int *)v50, (uint64_t *)__p, v71, 1);
      v72 = v87;
      if (v86 != v87)
      {
        uint64_t v73 = (char *)v86 + 4;
        while (v73 != v87)
        {
          int v74 = *((_DWORD *)v73 - 1);
          int v75 = *(_DWORD *)v73;
          v73 += 4;
          if (v74 == v75)
          {
            int v76 = v73 - 8;
            while (v73 != v72)
            {
              int v77 = v74;
              int v74 = *(_DWORD *)v73;
              if (v77 != *(_DWORD *)v73)
              {
                *((_DWORD *)v76 + 1) = v74;
                v76 += 4;
              }
              v73 += 4;
            }
            v82 = v76 + 4;
            v83 = (char *)(v72 - (v76 + 4));
            if (v72 == v76 + 4) {
              break;
            }
            if (v72 != &v83[(void)v82]) {
              memmove(v76 + 4, &v83[(void)v82], 0);
            }
            v87 = v82;
            uint64_t v78 = (unsigned int *)v86;
            if (v86 != v82) {
              goto LABEL_94;
            }
            goto LABEL_102;
          }
        }
      }
      uint64_t v78 = (unsigned int *)v86;
      if (v86 == v72)
      {
LABEL_102:
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_DWORD *)(a3 + 32) = -1;
        *(_DWORD *)(a3 + 40) = -1;
        *(_DWORD *)(a3 + 43) = -1;
        *(void *)(a3 + 47) = 0;
        *(void *)(a3 + 55) = 0;
        *(void *)(a3 + 63) = 0;
        *(_WORD *)(a3 + 71) = 0;
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(a3 + 104) = 0;
      }
      else
      {
LABEL_94:
        uint64_t v79 = *v78;
        if (v79 == 3)
        {
          uint64_t v80 = sub_648E68(a2);
          if (*(char *)(v80 + 23) < 0)
          {
            sub_4200(__p, *(void **)v80, *(void *)(v80 + 8));
          }
          else
          {
            long long v81 = *(_OWORD *)v80;
            uint64_t v85 = *(void *)(v80 + 16);
            *(_OWORD *)std::string __p = v81;
          }
          sub_524E5C((uint64_t)__p, a3);
          if (SHIBYTE(v85) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          sub_524D84(v79, a3);
        }
      }
      if (v86)
      {
        v87 = (char *)v86;
        operator delete(v86);
      }
    }
    else
    {
      sub_524D84(39, a3);
    }
  }
  else
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 43) = -1;
    *(void *)(a3 + 47) = 0;
    *(void *)(a3 + 55) = 0;
    *(void *)(a3 + 63) = 0;
    *(_WORD *)(a3 + 71) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 104) = 0;
  }
}

void sub_7A6428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    uint64_t v17 = a15;
    if (a15)
    {
LABEL_6:
      operator delete(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v17 = a15;
    if (a15) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

void sub_7A648C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      switch(*(_DWORD *)(a1 + 8))
      {
        case 2:
          int v3 = 999;
          goto LABEL_7;
        case 4:
          if (!*(unsigned char *)(a1 + 1136))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          sub_4BE9F4((uint64_t)v5, a1 + 16);
          sub_7A7734((uint64_t)v5, a2);
          sub_3A6B94((uint64_t)v5);
          break;
        default:
          goto LABEL_2;
      }
      return;
    case 9:
    case 0xA:
      int v3 = 3;
      goto LABEL_7;
    case 0x15:
      int v3 = 47;
      goto LABEL_7;
    case 0x16:
      int v3 = 5;
LABEL_7:
      *(_DWORD *)a2 = v3;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    default:
LABEL_2:
      *(void *)a2 = 0;
      break;
  }
}

void sub_7A65E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7A6670(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 80) = -1;
  *(_DWORD *)(a3 + 88) = -1;
  *(_DWORD *)(a3 + 91) = -1;
  *(void *)(a3 + 128) = 0;
  uint64_t v4 = a3 + 128;
  *(void *)(a3 + 95) = 0;
  *(void *)(a3 + 111) = 0;
  *(void *)(a3 + 103) = 0;
  *(_WORD *)(a3 + 119) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  if (!*(unsigned char *)(a1 + 2037)) {
    return;
  }
  uint64_t v7 = nullsub_1(a2);
  uint64_t v8 = *(unsigned int **)v7;
  int v9 = *(unsigned int **)(v7 + 8);
  if (*(unsigned int **)v7 == v9)
  {
LABEL_6:
    if (sub_DC6EDC(*(void *)a1) && !*(unsigned char *)(a1 + 3494) && *(unsigned char *)(a1 + 3275) != 2) {
      return;
    }
    *(_DWORD *)uint64_t v41 = sub_646CE8((uint64_t)a2);
    LODWORD(v39[0]) = sub_649908(a2);
    unsigned int v10 = sub_5ADA8C((int *)v41, (int *)v39);
    switch(v10)
    {
      case 0u:
      case 1u:
        unint64_t v11 = "_Traffic_Light";
        goto LABEL_14;
      case 2u:
        v41[23] = 17;
        strcpy(v41, "_Traffic_Moderate");
        break;
      case 3u:
        unint64_t v11 = "_Traffic_Heavy";
LABEL_14:
        v41[23] = 14;
        *(void *)uint64_t v41 = *(void *)v11;
        *(void *)&v41[6] = *(void *)(v11 + 6);
        v41[14] = 0;
        break;
      case 4u:
        *(void *)uint64_t v41 = operator new(0x19uLL);
        *(_OWORD *)&v41[8] = xmmword_20B9250;
        strcpy(*(char **)v41, "_Traffic_ExtremelyHeavy");
        break;
      default:
        memset(v41, 0, 24);
        break;
    }
    int64_t v12 = std::string::insert((std::string *)v41, 0, "Driving");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v40 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v39 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
    unint64_t v14 = (const std::string *)sub_8D7730(*(void *)(a1 + 3600), (uint64_t)v39);
    std::string::operator=((std::string *)a3, v14);
    if (v10 > 4)
    {
      uint64_t v42 = 0xFFFFFFFFLL;
      memset(v41, 0, sizeof(v41));
      *(_DWORD *)unint64_t v43 = -1;
      *(_DWORD *)&v43[3] = -1;
      memset(&v43[7], 0, 33);
      long long v44 = 0uLL;
      long long v45 = 0uLL;
    }
    else
    {
      sub_524D84(*(unsigned int *)&asc_20E98F0[4 * v10], (uint64_t)v41);
    }
    sub_4F377C(a3 + 48, (uint64_t)v41);
    *(void *)(a3 + 88) = *(void *)v43;
    uint64_t v15 = (void **)(a3 + 96);
    if (*(char *)(a3 + 119) < 0) {
      operator delete(*v15);
    }
    char v16 = 0;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)&v43[8];
    *(void *)(a3 + 112) = *(void *)&v43[24];
    v43[31] = 0;
    v43[8] = 0;
    *(unsigned char *)(a3 + 120) = v43[32];
    if (*(char *)(a3 + 151) < 0)
    {
      operator delete(*(void **)v4);
      char v16 = v43[31];
    }
    *(_OWORD *)uint64_t v4 = v44;
    *(void *)(v4 + 16) = v45;
    BYTE7(v45) = 0;
    LOBYTE(v44) = 0;
    *(unsigned char *)(a3 + 152) = BYTE8(v45);
    if (v16 < 0)
    {
      operator delete(*(void **)&v43[8]);
      int v17 = v42;
      if (v42 != 1) {
        goto LABEL_27;
      }
    }
    else
    {
      int v17 = v42;
      if (v42 != 1)
      {
LABEL_27:
        if (!v17 && (v41[31] & 0x80000000) != 0)
        {
          char v18 = *(void **)&v41[8];
LABEL_33:
          operator delete(v18);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
    }
    char v18 = *(void **)&v41[8];
    if (*(void *)&v41[8])
    {
      *(void *)&v41[16] = *(void *)&v41[8];
      goto LABEL_33;
    }
LABEL_34:
    if (*(unsigned char *)(a1 + 3455)
      || sub_45FB38(a2)
      || (uint64_t v19 = nullsub_1(a2),
          uint64_t v20 = *(void *)v19,
          uint64_t v21 = *(char **)(*(void *)v19 + 1112),
          v21 == *(char **)(v20 + 1120)))
    {
LABEL_64:
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      return;
    }
    memset(v41, 0, sizeof(v41));
    LODWORD(v42) = 1065353216;
    sub_6F3150(v21, (uint64_t)&__str);
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v37, "{RouteName}");
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    uint64_t v22 = sub_7AE4E0((uint64_t)v41, (uint64_t)&v37, (uint64_t)&unk_20F06E0, (long long **)&v36);
    std::string::operator=((std::string *)(v22 + 40), &__str);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_39:
        if (v10 > 5)
        {
LABEL_45:
          memset(&v36, 0, sizeof(v36));
          goto LABEL_50;
        }
LABEL_43:
        switch(v10)
        {
          case 0u:
          case 1u:
            long long v23 = "_Traffic_Light";
            goto LABEL_48;
          case 2u:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 17;
            strcpy((char *)&v36, "_Traffic_Moderate");
            break;
          case 3u:
            long long v23 = "_Traffic_Heavy";
LABEL_48:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 14;
            v36.__r_.__value_.__r.__words[0] = *(void *)v23;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 6) = *(void *)(v23 + 6);
            v36.__r_.__value_.__s.__data_[14] = 0;
            break;
          case 4u:
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
            *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_20B9250;
            strcpy(v36.__r_.__value_.__l.__data_, "_Traffic_ExtremelyHeavy");
            break;
          default:
            goto LABEL_45;
        }
LABEL_50:
        std::string::value_type v24 = std::string::insert(&v36, 0, "Proactive_Driving");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v37, "_RouteName");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v37.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            int v28 = *(std::__shared_weak_count **)(a1 + 3608);
            uint64_t v34 = *(void *)(a1 + 3600);
            uint64_t v35 = v28;
            if (!v28) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        int v28 = *(std::__shared_weak_count **)(a1 + 3608);
        uint64_t v34 = *(void *)(a1 + 3600);
        uint64_t v35 = v28;
        if (!v28)
        {
LABEL_54:
          sub_658310((uint64_t)&__str, (uint64_t)v41, &v34, 0, &v37);
          long long v29 = (void **)(a3 + 24);
          if (*(char *)(a3 + 47) < 0) {
            operator delete(*v29);
          }
          *(_OWORD *)long long v29 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          *(void *)(a3 + 40) = *((void *)&v37.__r_.__value_.__l + 2);
          *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
          v37.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v30 = v35;
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v31 = *(void ***)&v41[16];
          if (!*(void *)&v41[16])
          {
LABEL_62:
            int64_t v32 = *(void **)v41;
            *(void *)uint64_t v41 = 0;
            if (v32) {
              operator delete(v32);
            }
            goto LABEL_64;
          }
          while (1)
          {
            uint64_t v33 = (void **)*v31;
            if (*((char *)v31 + 63) < 0)
            {
              operator delete(v31[5]);
              if (*((char *)v31 + 39) < 0) {
LABEL_72:
              }
                operator delete(v31[2]);
            }
            else if (*((char *)v31 + 39) < 0)
            {
              goto LABEL_72;
            }
            operator delete(v31);
            uint64_t v31 = v33;
            if (!v33) {
              goto LABEL_62;
            }
          }
        }
LABEL_53:
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_54;
      }
    }
    else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
  while (sub_46CF0C(v8, 0) != 0x7FFFFFFF && sub_46CF0C(v8, 1) != 0x7FFFFFFF)
  {
    v8 += 3082;
    if (v8 == v9) {
      goto LABEL_6;
    }
  }
}

void sub_7A6D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_50828((uint64_t)&a39);
  if (a37 < 0)
  {
    operator delete(__p);
    sub_52FAE0(v44);
    _Unwind_Resume(a1);
  }
  sub_52FAE0(v44);
  _Unwind_Resume(a1);
}

void sub_7A6E88(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a2)
  {
    sub_7A6F50(*(_DWORD *)a2, a3, &v6);
LABEL_3:
    *a4 = v6;
    return;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    memset(&v6, 0, sizeof(v6));
    if (v5 < 5) {
      std::string::assign(&v6, off_243A640[v5 - 1]);
    }
    goto LABEL_3;
  }
  if (*(_DWORD *)(a2 + 1144) == 1 && *(void *)(a2 + 1152))
  {
    sub_7A7190(a1, a2 + 1144, &v6);
    goto LABEL_3;
  }
}

void sub_7A6F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_7A6F50@<X0>(int a1@<W1>, int a2@<W2>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  int v3 = a1 - 1;
  unsigned int v5 = "Fewer_turns";
  switch(v3)
  {
    case 0:
      std::string v6 = "Fastest_route";
      uint64_t v7 = "Fastest_route_label";
      goto LABEL_19;
    case 1:
      std::string v6 = "Best_route";
      uint64_t v7 = "Best_route_label";
      goto LABEL_19;
    case 2:
      std::string v6 = "Suggested_route";
      uint64_t v7 = "Suggested_route_label";
      goto LABEL_19;
    case 3:
      std::string v6 = "Simplest_route";
      uint64_t v7 = "Simplest_route_label";
      goto LABEL_19;
    case 4:
      goto LABEL_22;
    case 5:
      std::string v6 = "Shortest_route";
      uint64_t v7 = "Shortest_route_label";
      goto LABEL_19;
    case 6:
      unsigned int v5 = "Avoids_busy_roads";
      goto LABEL_22;
    case 7:
      std::string v6 = "Alternate_route";
      uint64_t v7 = "Alternate_route_label";
      goto LABEL_19;
    case 8:
      std::string v6 = "Tolls_required";
      goto LABEL_12;
    case 9:
      std::string v6 = "Toll_congestion_zone_required";
      goto LABEL_12;
    case 10:
      std::string v6 = "Avoids_tolls";
LABEL_12:
      uint64_t v7 = "";
      goto LABEL_19;
    case 11:
      std::string v6 = "Highways_required";
      uint64_t v7 = "Highways_required_label";
      goto LABEL_19;
    case 12:
      std::string v6 = "Avoids_highways";
      uint64_t v7 = "Avoids_highways_label";
      goto LABEL_19;
    case 13:
      std::string v6 = "Avoids_traffic";
      uint64_t v7 = "Avoids_traffic_label";
      goto LABEL_19;
    case 14:
      std::string v6 = "Avoids_ferries";
      uint64_t v7 = "Avoids_ferries_label";
      goto LABEL_19;
    case 15:
      std::string v6 = "Avoids_railway_shuttles";
      uint64_t v7 = "Avoids_railway_shuttles_label";
      goto LABEL_19;
    case 16:
      std::string v6 = "Avoids_environmental_zone_restrictions";
      uint64_t v7 = "Avoids_cz_restrictions_label";
LABEL_19:
      if (a2) {
        unsigned int v5 = v7;
      }
      else {
        unsigned int v5 = v6;
      }
      goto LABEL_22;
    case 17:
      unsigned int v5 = "Avoids_hills";
      goto LABEL_22;
    case 18:
      unsigned int v5 = "Avoids_stairs";
      goto LABEL_22;
    case 19:
      unsigned int v5 = "Avoids_walking";
      goto LABEL_22;
    case 20:
      unsigned int v5 = "Avoids_charge";
      goto LABEL_22;
    case 21:
      unsigned int v5 = "Other_network";
LABEL_22:
      unint64_t result = std::string::assign(a3, v5);
      break;
    default:
      return result;
  }
  return result;
}

void sub_7A711C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7A7190(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)a2 != 1) {
    return;
  }
  sub_503BC8(*(void *)(a2 + 8), (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v23);
  if (byte_25BC32F >= 0) {
    uint64_t v4 = (const std::string::value_type *)&qword_25BC318;
  }
  else {
    uint64_t v4 = (const std::string::value_type *)qword_25BC318;
  }
  if (byte_25BC32F >= 0) {
    std::string::size_type v5 = byte_25BC32F;
  }
  else {
    std::string::size_type v5 = unk_25BC320;
  }
  std::string v6 = std::string::insert(&v23, 0, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v25 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v25 >= 0) {
    unint64_t v9 = HIBYTE(v25);
  }
  else {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    unsigned int v10 = (long long *)operator new(v11 + 1);
    *((void *)&v26 + 1) = v9;
    int64_t v27 = v12 | 0x8000000000000000;
    *(void *)&long long v26 = v10;
    if (v9 >= 0x20 && (unint64_t)((char *)v10 - (char *)v8) >= 0x20)
    {
      long long v13 = (void **)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v14 = (long long *)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v15 = v10 + 1;
      char v16 = (long long *)(v8 + 2);
      unint64_t v17 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v16;
        *(v15 - 1) = *(v16 - 1);
        _OWORD *v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v9 == (v9 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    long long v13 = v8;
    unint64_t v14 = v10;
    do
    {
LABEL_27:
      char v19 = *(unsigned char *)v13;
      long long v13 = (void **)((char *)v13 + 1);
      *(unsigned char *)unint64_t v14 = v19;
      unint64_t v14 = (long long *)((char *)v14 + 1);
    }
    while (v13 != (void **)((char *)v8 + v9));
LABEL_28:
    *(unsigned char *)unint64_t v14 = 0;
    if (v27 >= 0) {
      uint64_t v20 = &v26;
    }
    else {
      uint64_t v20 = (long long *)v26;
    }
    do
    {
      *(unsigned char *)uint64_t v20 = __toupper(*(char *)v8);
      uint64_t v20 = (long long *)((char *)v20 + 1);
      uint64_t v8 = (void **)((char *)v8 + 1);
      --v9;
    }
    while (v9);
    int v21 = SHIBYTE(v25);
    *(_OWORD *)a3 = v26;
    a3[2] = v27;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v23.__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_36;
  }
  HIBYTE(v27) = v9;
  if (v9)
  {
    unsigned int v10 = &v26;
    goto LABEL_26;
  }
  LOBYTE(v26) = 0;
  int v22 = SHIBYTE(v25);
  *(_OWORD *)a3 = v26;
  a3[2] = v27;
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_36:
  operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
}

void sub_7A73BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_7A7430(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a2 + 256);
  if (v3)
  {
    switch(v3)
    {
      case 1:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1413565510;
        std::string v6 = "MOSTLY_FLAT";
        goto LABEL_18;
      case 2:
        long long v7 = "GENTLY_UPHILL";
        goto LABEL_12;
      case 3:
        HIBYTE(__p[2]) = 15;
        strcpy((char *)__p, "GENTLY_DOWNHILL");
        break;
      case 4:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1280067912;
        std::string v6 = "GENTLE_HILL";
        goto LABEL_18;
      case 5:
        HIBYTE(__p[2]) = 12;
        strcpy((char *)__p, "GENTLE_HILLS");
        break;
      case 6:
        HIBYTE(__p[2]) = 17;
        strcpy((char *)__p, "MODERATELY_UPHILL");
        break;
      case 7:
        HIBYTE(__p[2]) = 19;
        strcpy((char *)__p, "MODERATELY_DOWNHILL");
        break;
      case 8:
        long long v7 = "MODERATE_HILL";
LABEL_12:
        HIBYTE(__p[2]) = 13;
        __p[0] = *(void **)v7;
        *(void **)((char *)__p + 5) = *(void **)(v7 + 5);
        BYTE5(__p[1]) = 0;
        break;
      case 9:
        uint64_t v8 = "MODERATE_HILLS";
        goto LABEL_20;
      case 10:
        uint64_t v8 = "STEEPLY_UPHILL";
        goto LABEL_20;
      case 11:
        HIBYTE(__p[2]) = 16;
        strcpy((char *)__p, "STEEPLY_DOWNHILL");
        break;
      case 12:
        HIBYTE(__p[2]) = 10;
        strcpy((char *)__p, "STEEP_HILL");
        break;
      case 13:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1397509193;
        std::string v6 = "STEEP_HILLS";
LABEL_18:
        __p[0] = *(void **)v6;
        BYTE3(__p[1]) = 0;
        break;
      case 14:
        uint64_t v8 = "CLIMB_DISTANCE";
LABEL_20:
        HIBYTE(__p[2]) = 14;
        __p[0] = *(void **)v8;
        *(void **)((char *)__p + 6) = *(void **)(v8 + 6);
        BYTE6(__p[1]) = 0;
        break;
      default:
        memset(__p, 0, 24);
        break;
    }
    unint64_t v9 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)__p);
    sub_5F41E8((uint64_t)a3, (uint64_t)v9);
    if (*(_DWORD *)(a2 + 256) == 14)
    {
      sub_5F3038(&v10, 0);
      sub_5F6090(a3, (uint64_t)&qword_25BA660, (uint64_t *)a2, &v10);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_7A76DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7A7734@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(result + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  switch(*(_DWORD *)(result + 736))
  {
    case 0:
      *(_DWORD *)a2 = 999;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 1:
      *(_DWORD *)a2 = 20;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 2:
      *(_DWORD *)a2 = 21;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 3:
      *(_DWORD *)a2 = 22;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 4:
      *(_DWORD *)a2 = 23;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 5:
      *(_DWORD *)a2 = 24;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 6:
      *(_DWORD *)a2 = 25;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 7:
      *(_DWORD *)a2 = 26;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 8:
      *(_DWORD *)a2 = 27;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 9:
      *(_DWORD *)a2 = 28;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xA:
      *(_DWORD *)a2 = 29;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xB:
      *(_DWORD *)a2 = 30;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xC:
      *(_DWORD *)a2 = 31;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xD:
      *(_DWORD *)a2 = 32;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xE:
      *(_DWORD *)a2 = 33;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0xF:
      *(_DWORD *)a2 = 34;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0x10:
      *(_DWORD *)a2 = 35;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0x11:
      *(_DWORD *)a2 = 36;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0x12:
      *(_DWORD *)a2 = 37;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    case 0x13:
      *(_DWORD *)a2 = 50;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    default:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_7A79F0(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 1;
  switch(*a2)
  {
    case 1:
    case 2:
    case 4:
    case 0x2A:
    case 0x33:
      return result;
    case 3:
    case 5:
    case 6:
    case 0x2F:
      return 2;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x31:
      return 0;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x32:
      return 3;
    default:
      if (*a2 == 999) {
        return 3;
      }
      else {
        return 0;
      }
  }
}

uint64_t sub_7A7B10(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *__src)
{
  *(void *)a1 = a2;
  memcpy((void *)(a1 + 8), __src, 0x76CuLL);
  if (__src[1927] < 0)
  {
    sub_4200((unsigned char *)(a1 + 1912), *((void **)__src + 238), *((void *)__src + 239));
  }
  else
  {
    long long v9 = *((_OWORD *)__src + 119);
    *(void *)(a1 + 1928) = *((void *)__src + 240);
    *(_OWORD *)(a1 + 1912) = v9;
  }
  long long v10 = *(_OWORD *)(__src + 1928);
  long long v11 = *(_OWORD *)(__src + 1944);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(__src + 1960);
  *(_OWORD *)(a1 + 1952) = v11;
  *(_OWORD *)(a1 + 1936) = v10;
  long long v12 = *(_OWORD *)(__src + 1976);
  long long v13 = *(_OWORD *)(__src + 1992);
  long long v14 = *(_OWORD *)(__src + 2008);
  *(_OWORD *)(a1 + 2026) = *(_OWORD *)(__src + 2018);
  *(_OWORD *)(a1 + 2016) = v14;
  *(_OWORD *)(a1 + 2000) = v13;
  *(_OWORD *)(a1 + 1984) = v12;
  sub_4BBDC0(a1 + 2048, a4);
  sub_688A04(a3, 4u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3584));
  sub_688A04(a3, 3u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3600));
  return a1;
}

void sub_7A7C08(_Unwind_Exception *a1)
{
  sub_14A84(v4);
  sub_4BCED0(v3);
  if (*(char *)(v1 + 1935) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_7A7C48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string::size_type v5 = (uint64_t *)sub_374DF4(a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      if (!*(unsigned char *)(v6 + 1162))
      {
        if (*(unsigned char *)(a1 + 3455) && *(void *)a3 != *(void *)(a3 + 8)) {
          return;
        }
        v16[0] = *(_DWORD *)v6;
        v16[2] = *(_DWORD *)(v6 + 8);
        char v18 = *(unsigned char *)(v6 + 1136);
        if (v18) {
          sub_4BE9F4((uint64_t)v17, v6 + 16);
        }
        long long v8 = *(_OWORD *)(v6 + 1144);
        *(_DWORD *)&v19[15] = *(_DWORD *)(v6 + 1159);
        *(_OWORD *)char v19 = v8;
        sub_7A7E54(a1, (uint64_t)v16, 0, (uint64_t)__p);
        if (v18)
        {
          sub_3A6B94((uint64_t)v17);
          char v18 = 0;
        }
        long long v9 = (void *)HIBYTE(v15);
        char v10 = HIBYTE(v15);
        if (v15 < 0) {
          long long v9 = __p[1];
        }
        if (v9)
        {
          unint64_t v11 = *(void *)(a3 + 8);
          if (v11 >= *(void *)(a3 + 16))
          {
            long long v13 = sub_1D740((char **)a3, (uint64_t)__p);
          }
          else
          {
            if (SHIBYTE(v15) < 0)
            {
              sub_4200(*(unsigned char **)(a3 + 8), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              long long v12 = *(_OWORD *)__p;
              *(void *)(v11 + 16) = v15;
              *(_OWORD *)unint64_t v11 = v12;
            }
            long long v13 = (char *)(v11 + 24);
            *(void *)(a3 + 8) = v11 + 24;
          }
          *(void *)(a3 + 8) = v13;
          char v10 = HIBYTE(v15);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 += 1168;
    }
    while (v6 != v7);
  }
}

void sub_7A7DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)v14);
  _Unwind_Resume(a1);
}

void sub_7A7E3C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_7A7E54(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 3) <= 1)
  {
    if (!*(unsigned char *)(a2 + 1136))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_4BE9F4((uint64_t)__p, a2 + 16);
    if (v44)
    {
      if (!sub_604340((uint64_t)v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1))
      {
        int v12 = *(_DWORD *)(a2 + 8);
        v36[0] = *(_DWORD *)a2;
        v36[2] = v12;
        char v38 = *(unsigned char *)(a2 + 1136);
        if (v38) {
          sub_4BE9F4((uint64_t)v37, a2 + 16);
        }
        *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 1144);
        *(_DWORD *)&v39[15] = *(_DWORD *)(a2 + 1159);
        sub_7A9EB8(a1, (uint64_t)v36, a3, &v31);
        if (v38)
        {
          sub_3A6B94((uint64_t)v37);
          char v38 = 0;
        }
        std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v31.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v14 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)&v31);
          if (*((char *)v14 + 23) < 0)
          {
            sub_4200((unsigned char *)a4, (void *)*v14, v14[1]);
          }
          else
          {
            long long v15 = *(_OWORD *)v14;
            *(void *)(a4 + 16) = v14[2];
            *(_OWORD *)a4 = v15;
          }
          uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
          if ((v16 & 0x80u) == 0) {
            unint64_t v17 = (char *)a4;
          }
          else {
            unint64_t v17 = *(char **)a4;
          }
          if (byte_25BAEB7 >= 0) {
            char v18 = &qword_25BAEA0;
          }
          else {
            char v18 = (uint64_t *)qword_25BAEA0;
          }
          if (byte_25BAEB7 >= 0) {
            int64_t v19 = byte_25BAEB7;
          }
          else {
            int64_t v19 = unk_25BAEA8;
          }
          if (v19)
          {
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(a4 + 8);
            }
            if (v16 >= v19)
            {
              uint64_t v20 = &v17[v16];
              int v21 = *(char *)v18;
              int v22 = v17;
              do
              {
                uint64_t v23 = v16 - v19;
                if (v23 == -1) {
                  break;
                }
                std::string::value_type v24 = (char *)memchr(v22, v21, v23 + 1);
                if (!v24) {
                  break;
                }
                int64_t v25 = v24;
                if (!memcmp(v24, v18, v19))
                {
                  if (v25 != v20)
                  {
                    std::string::size_type v26 = v25 - v17;
                    if (v25 - v17 != -1) {
                      goto LABEL_51;
                    }
                  }
                  break;
                }
                int v22 = v25 + 1;
                uint64_t v16 = v20 - (v25 + 1);
              }
              while (v16 >= v19);
            }
          }
          else
          {
            std::string::size_type v26 = 0;
LABEL_51:
            if ((v42 & 0x80u) == 0) {
              int64_t v27 = (const std::string::value_type *)v41;
            }
            else {
              int64_t v27 = (const std::string::value_type *)v41[0];
            }
            if ((v42 & 0x80u) == 0) {
              std::string::size_type v28 = v42;
            }
            else {
              std::string::size_type v28 = v41[1];
            }
            std::string::replace((std::string *)a4, v26, v19, v27, v28);
          }
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 0;
          *(unsigned char *)a4 = 0;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        goto LABEL_60;
      }
      if (v44)
      {
        sub_604384(v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1, a4);
LABEL_60:
        sub_3A6B94((uint64_t)__p);
        return;
      }
    }
    long long v29 = __cxa_allocate_exception(8uLL);
    void *v29 = &off_2439078;
  }
  v32[0] = *(_DWORD *)a2;
  v32[2] = v8;
  char v34 = *(unsigned char *)(a2 + 1136);
  if (v34) {
    sub_4BE9F4((uint64_t)v33, a2 + 16);
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)&v35[15] = *(_DWORD *)(a2 + 1159);
  sub_7A9EB8(a1, (uint64_t)v32, a3, __p);
  if (v34)
  {
    sub_3A6B94((uint64_t)v33);
    char v34 = 0;
  }
  std::string::size_type v9 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p[0].__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    char v10 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)__p);
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200((unsigned char *)a4, (void *)*v10, v10[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      *(void *)(a4 + 16) = v10[2];
      *(_OWORD *)a4 = v11;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
}

void sub_7A827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0)
  {
    operator delete(__p);
    sub_3A6B94((uint64_t)&STACK[0x938]);
    _Unwind_Resume(a1);
  }
  sub_3A6B94((uint64_t)&STACK[0x938]);
  _Unwind_Resume(a1);
}

void sub_7A8354(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  uint64_t v5 = sub_646C34(a1);
  char v4 = 1;
  sub_5F6090(a2, (uint64_t)&qword_25BA5E8, &v5, &v4);
  sub_5F41E8((uint64_t)a2, (uint64_t)&qword_25BA5E8);
}

void sub_7A83C4(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A83D8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_7A8420(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A8434(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = sub_64695C(a2);
  if (sub_62D404(a1 + 2048) && *(unsigned char *)(a1 + 3459) && v6 != 0)
  {
    sub_503BC8(v6, (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v43);
    if (byte_25BC32F >= 0) {
      char v18 = (const std::string::value_type *)&qword_25BC318;
    }
    else {
      char v18 = (const std::string::value_type *)qword_25BC318;
    }
    if (byte_25BC32F >= 0) {
      std::string::size_type v19 = byte_25BC32F;
    }
    else {
      std::string::size_type v19 = unk_25BC320;
    }
    uint64_t v20 = std::string::insert(&v43, 0, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (size >= 0x17)
    {
      uint64_t v25 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((size | 7) != 0x17) {
        uint64_t v25 = size | 7;
      }
      uint64_t v26 = v25 + 1;
      std::string::value_type v24 = operator new(v25 + 1);
      v44[1] = size;
      int64_t v45 = v26 | 0x8000000000000000;
      v44[0] = v24;
      if (size >= 0x20 && (unint64_t)((char *)v24 - (char *)p_p) >= 0x20)
      {
        int64_t v27 = (std::string *)((char *)p_p + (size & 0xFFFFFFFFFFFFFFE0));
        std::string::size_type v28 = (char *)v24 + (size & 0xFFFFFFFFFFFFFFE0);
        long long v29 = v24 + 2;
        uint64_t v30 = &p_p->__r_.__value_.__r.__words[2];
        unint64_t v31 = size & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          _OWORD *v29 = v32;
          v29 += 2;
          v30 += 4;
          v31 -= 32;
        }
        while (v31);
        if (size == (size & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
    }
    else
    {
      HIBYTE(v45) = size;
      if (!size)
      {
        LOBYTE(v44[0]) = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_65;
        }
        goto LABEL_100;
      }
      std::string::value_type v24 = v44;
    }
    int64_t v27 = p_p;
    std::string::size_type v28 = (std::string::value_type *)v24;
    do
    {
LABEL_59:
      std::string::value_type v33 = v27->__r_.__value_.__s.__data_[0];
      int64_t v27 = (std::string *)((char *)v27 + 1);
      *v28++ = v33;
    }
    while (v27 != (std::string *)((char *)p_p + size));
LABEL_60:
    *std::string::size_type v28 = 0;
    if (v45 >= 0) {
      char v34 = v44;
    }
    else {
      char v34 = (unsigned char *)v44[0];
    }
    do
    {
      *v34++ = __toupper(p_p->__r_.__value_.__s.__data_[0]);
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_65:
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_101:
      operator delete(v43.__r_.__value_.__l.__data_);
LABEL_66:
      std::to_string(&v42, v6);
      if (byte_25BC390[23] < 0) {
        sub_4200(&__p, *(void **)byte_25BC390, *(unint64_t *)&byte_25BC390[8]);
      }
      else {
        std::string __p = *(std::string *)byte_25BC390;
      }
      std::string v47 = v42;
      memset(&v42, 0, sizeof(v42));
      sub_2AAA4((uint64_t)&v43, (uint64_t)&__p, 1);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v47.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_71:
          if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_92;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_71;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_72:
        uint64_t v35 = *(std::__shared_weak_count **)(a1 + 3592);
        uint64_t v40 = *(void *)(a1 + 3584);
        uint64_t v41 = v35;
        if (!v35)
        {
LABEL_74:
          sub_658310((uint64_t)v44, (uint64_t)&v43, &v40, 0, &__p);
          std::string v36 = v41;
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          sub_5F41E8((uint64_t)a3, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string v37 = (void **)v43.__r_.__value_.__r.__words[2];
          if (!v43.__r_.__value_.__r.__words[2])
          {
LABEL_80:
            char v38 = (void *)v43.__r_.__value_.__r.__words[0];
            v43.__r_.__value_.__r.__words[0] = 0;
            if (v38) {
              operator delete(v38);
            }
            if (SHIBYTE(v45) < 0)
            {
              long long v11 = (void *)v44[0];
LABEL_97:
              operator delete(v11);
              return;
            }
            return;
          }
          while (1)
          {
            uint64_t v39 = (void **)*v37;
            if (*((char *)v37 + 63) < 0)
            {
              operator delete(v37[5]);
              if (*((char *)v37 + 39) < 0) {
LABEL_89:
              }
                operator delete(v37[2]);
            }
            else if (*((char *)v37 + 39) < 0)
            {
              goto LABEL_89;
            }
            operator delete(v37);
            std::string v37 = v39;
            if (!v39) {
              goto LABEL_80;
            }
          }
        }
LABEL_73:
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_74;
      }
LABEL_92:
      operator delete(v42.__r_.__value_.__l.__data_);
      uint64_t v35 = *(std::__shared_weak_count **)(a1 + 3592);
      uint64_t v40 = *(void *)(a1 + 3584);
      uint64_t v41 = v35;
      if (!v35) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
LABEL_100:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_101;
  }
  if (*(unsigned char *)(a1 + 3455))
  {
    sub_7A7C48(a1, (uint64_t)a2, (uint64_t)&__p);
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      do
      {
        sub_5F41E8((uint64_t)a3, v8);
        v8 += 24;
      }
      while (v8 != v9);
      std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
      long long v11 = (void *)v8;
      if (__p.__r_.__value_.__l.__size_ != v8)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 24;
        }
        while (v10 != v8);
        long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v8;
      goto LABEL_97;
    }
  }
  else if (sub_6484D0((uint64_t)a2))
  {
    uint64_t v12 = a3[1];
    if (*a3 == v12)
    {
      sub_6484E0(a2, (uint64_t)&__p);
      sub_5F41E8((uint64_t)a3, (uint64_t)&__p);
    }
    else
    {
      long long v13 = byte_25BA6D7 >= 0
          ? (const std::string::value_type *)&qword_25BA6C0
          : (const std::string::value_type *)qword_25BA6C0;
      std::string::size_type v14 = byte_25BA6D7 >= 0 ? byte_25BA6D7 : unk_25BA6C8;
      long long v15 = std::string::append((std::string *)(v12 - 24), v13, v14);
      sub_6484E0(a2, (uint64_t)&__p);
      uint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      std::string::append(v15, (const std::string::value_type *)v16, v17);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v11 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_97;
    }
  }
}

void sub_7A8968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_7A8A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_7A8A88(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5F3BA0((uint64_t)a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  uint64_t v7 = sub_646C34(a2);
  char v6 = 1;
  sub_5F6090(a3, (uint64_t)&qword_25BA5E8, &v7, &v6);
  sub_5F41E8((uint64_t)a3, (uint64_t)&qword_25BA5E8);
  sub_7A8434(a1, a2, a3);
}

void sub_7A8B20(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7A8B34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3BA0(a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  if (*(unsigned char *)(a1 + 3455))
  {
    char v6 = (void *)sub_374DF4(a2);
    if (*v6 != v6[1])
    {
      uint64_t v7 = sub_374DF4(a2);
      uint64_t v8 = *(void *)v7;
      if (!*(unsigned char *)(*(void *)v7 + 1160))
      {
        int v9 = *(_DWORD *)(v8 + 8);
        v14[0] = *(_DWORD *)v8;
        v14[2] = v9;
        char v16 = *(unsigned char *)(v8 + 1136);
        if (v16) {
          sub_4BE9F4((uint64_t)v15, v8 + 16);
        }
        long long v10 = *(_OWORD *)(v8 + 1144);
        *(_DWORD *)&v17[15] = *(_DWORD *)(v8 + 1159);
        *(_OWORD *)std::string::size_type v17 = v10;
        sub_7A7E54(a1, (uint64_t)v14, 1, (uint64_t)__p);
        if (v16)
        {
          sub_3A6B94((uint64_t)v15);
          char v16 = 0;
        }
        unint64_t v11 = v13;
        if ((v13 & 0x80u) != 0) {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if (v11)
        {
          sub_5F41E8(a3, (uint64_t)__p);
          if (*(_DWORD *)(v8 + 1144) == 1)
          {
            if (*(void *)(v8 + 1152)) {
              sub_7A8D10(a1, v8 + 1144);
            }
          }
        }
        if ((char)v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_7A8CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_7A8D10(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a2 + 8);
  if (*(_DWORD *)a2 == 1 && result != 0)
  {
    std::to_string(&v4, result);
    sub_5F1E5C(__dst, (long long *)byte_25BC390);
  }
  return result;
}

void sub_7A8D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7A8DC8(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1[3455])
  {
    if (!a1[2032] || (uint64_t v6 = sub_62D414((uint64_t)(a1 + 2048)), v6 == 0x7FFFFFFF) || (int)v6 <= SHIDWORD(v6))
    {
      v86 = 0;
      v87 = 0;
      unint64_t v88 = 0;
      uint64_t v7 = (void *)sub_374DF4(a2);
      if (*v7 != v7[1] && !*(unsigned char *)(*(void *)sub_374DF4(a2) + 1161))
      {
        uint64_t v8 = (uint64_t *)sub_374DF4(a2);
        sub_7A94BC(*v8, (uint64_t)__p);
        if (BYTE4(__p[0]))
        {
          int v9 = v87;
          if ((unint64_t)v87 >= v88)
          {
            unint64_t v11 = (char *)v86;
            int64_t v12 = v87 - (unsigned char *)v86;
            uint64_t v13 = (v87 - (unsigned char *)v86) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              sub_2E00();
            }
            uint64_t v15 = v88 - (void)v86;
            if ((uint64_t)(v88 - (void)v86) >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              if (v16 >> 62) {
                sub_188D718();
              }
              std::string::size_type v17 = (char *)operator new(4 * v16);
            }
            else
            {
              std::string::size_type v17 = 0;
            }
            char v18 = &v17[4 * v13];
            std::string::size_type v19 = &v17[4 * v16];
            *(_DWORD *)char v18 = __p[0];
            long long v10 = v18 + 4;
            if (v9 != v11)
            {
              unint64_t v20 = v9 - v11 - 4;
              if (v20 < 0x2C) {
                goto LABEL_117;
              }
              if ((unint64_t)(v9 - v17 - v12) < 0x20) {
                goto LABEL_117;
              }
              uint64_t v21 = (v20 >> 2) + 1;
              uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v23 = &v9[-v22];
              v18 -= v22;
              std::string::value_type v24 = &v17[4 * v13 - 16];
              uint64_t v25 = v9 - 16;
              uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v27 = *(_OWORD *)v25;
                *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
                *(_OWORD *)std::string::value_type v24 = v27;
                v24 -= 32;
                v25 -= 32;
                v26 -= 8;
              }
              while (v26);
              int v9 = v23;
              if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_117:
                do
                {
                  int v28 = *((_DWORD *)v9 - 1);
                  v9 -= 4;
                  *((_DWORD *)v18 - 1) = v28;
                  v18 -= 4;
                }
                while (v9 != v11);
              }
            }
            v86 = v18;
            v87 = v10;
            unint64_t v88 = (unint64_t)v19;
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_DWORD *)v87 = __p[0];
            long long v10 = v9 + 4;
          }
          v87 = v10;
        }
      }
      if (*(_DWORD *)(sub_6477D4(a2) + 56))
      {
        long long v29 = v87;
        if ((unint64_t)v87 >= v88)
        {
          unint64_t v31 = (char *)v86;
          int64_t v32 = v87 - (unsigned char *)v86;
          uint64_t v33 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v35 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            if (v36 >> 62) {
              sub_188D718();
            }
            std::string v37 = (char *)operator new(4 * v36);
          }
          else
          {
            std::string v37 = 0;
          }
          char v38 = &v37[4 * v33];
          uint64_t v39 = &v37[4 * v36];
          *(_DWORD *)char v38 = 42;
          uint64_t v30 = v38 + 4;
          if (v29 != v31)
          {
            unint64_t v40 = v29 - v31 - 4;
            if (v40 < 0x2C) {
              goto LABEL_118;
            }
            if ((unint64_t)(v29 - v37 - v32) < 0x20) {
              goto LABEL_118;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            std::string v43 = &v29[-v42];
            v38 -= v42;
            char v44 = &v37[4 * v33 - 16];
            int64_t v45 = v29 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
              *(_OWORD *)char v44 = v47;
              v44 -= 32;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            long long v29 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_118:
              do
              {
                int v48 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v38 - 1) = v48;
                v38 -= 4;
              }
              while (v29 != v31);
            }
          }
          v86 = v38;
          v87 = v30;
          unint64_t v88 = (unint64_t)v39;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)v87 = 42;
          uint64_t v30 = v29 + 4;
        }
        v87 = v30;
      }
      uint64_t v49 = sub_6477D4(a2);
      size_t v50 = v87;
      if (*(unsigned char *)v49 || *(_DWORD *)(v49 + 52))
      {
        if ((unint64_t)v87 >= v88)
        {
          BOOL v52 = v86;
          int64_t v53 = v87 - (unsigned char *)v86;
          uint64_t v54 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v56 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            if (v57 >> 62) {
              sub_188D718();
            }
            size_t v58 = operator new(4 * v57);
          }
          else
          {
            size_t v58 = 0;
          }
          long long v59 = &v58[4 * v54];
          long long v60 = &v58[4 * v57];
          *(_DWORD *)long long v59 = 3;
          uint64_t v51 = v59 + 4;
          if (v50 != v52)
          {
            unint64_t v61 = v50 - v52 - 4;
            if (v61 < 0x2C) {
              goto LABEL_119;
            }
            if ((unint64_t)(v50 - v58 - v53) < 0x20) {
              goto LABEL_119;
            }
            uint64_t v62 = (v61 >> 2) + 1;
            uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v64 = &v50[-v63];
            v59 -= v63;
            int64x2_t v65 = &v58[4 * v54 - 16];
            uint64_t v66 = v50 - 16;
            uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v68 = *(_OWORD *)v66;
              *(v65 - 1) = *((_OWORD *)v66 - 1);
              *int64x2_t v65 = v68;
              v65 -= 2;
              v66 -= 32;
              v67 -= 8;
            }
            while (v67);
            size_t v50 = v64;
            if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_119:
              do
              {
                int v69 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v59 - 1) = v69;
                v59 -= 4;
              }
              while (v50 != v52);
            }
          }
          v86 = v59;
          v87 = v51;
          unint64_t v88 = (unint64_t)v60;
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(_DWORD *)v87 = 3;
          uint64_t v51 = v50 + 4;
        }
        v87 = v51;
        size_t v50 = v51;
      }
      unint64_t v70 = 126 - 2 * __clz((v50 - (unsigned char *)v86) >> 2);
      __p[0] = a1;
      if (v50 == v86) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = v70;
      }
      sub_7AE910((uint64_t)v86, (int *)v50, (uint64_t *)__p, v71, 1);
      v72 = v87;
      if (v86 != v87)
      {
        uint64_t v73 = (char *)v86 + 4;
        while (v73 != v87)
        {
          int v74 = *((_DWORD *)v73 - 1);
          int v75 = *(_DWORD *)v73;
          v73 += 4;
          if (v74 == v75)
          {
            int v76 = v73 - 8;
            while (v73 != v72)
            {
              int v77 = v74;
              int v74 = *(_DWORD *)v73;
              if (v77 != *(_DWORD *)v73)
              {
                *((_DWORD *)v76 + 1) = v74;
                v76 += 4;
              }
              v73 += 4;
            }
            v82 = v76 + 4;
            v83 = (char *)(v72 - (v76 + 4));
            if (v72 == v76 + 4) {
              break;
            }
            if (v72 != &v83[(void)v82]) {
              memmove(v76 + 4, &v83[(void)v82], 0);
            }
            v87 = v82;
            uint64_t v78 = (unsigned int *)v86;
            if (v86 != v82) {
              goto LABEL_94;
            }
            goto LABEL_102;
          }
        }
      }
      uint64_t v78 = (unsigned int *)v86;
      if (v86 == v72)
      {
LABEL_102:
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_DWORD *)(a3 + 32) = -1;
        *(_DWORD *)(a3 + 40) = -1;
        *(_DWORD *)(a3 + 43) = -1;
        *(void *)(a3 + 47) = 0;
        *(void *)(a3 + 55) = 0;
        *(void *)(a3 + 63) = 0;
        *(_WORD *)(a3 + 71) = 0;
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(a3 + 104) = 0;
      }
      else
      {
LABEL_94:
        uint64_t v79 = *v78;
        if (v79 == 3)
        {
          uint64_t v80 = sub_648E68(a2);
          if (*(char *)(v80 + 23) < 0)
          {
            sub_4200(__p, *(void **)v80, *(void *)(v80 + 8));
          }
          else
          {
            long long v81 = *(_OWORD *)v80;
            uint64_t v85 = *(void *)(v80 + 16);
            *(_OWORD *)std::string __p = v81;
          }
          sub_524E5C((uint64_t)__p, a3);
          if (SHIBYTE(v85) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          sub_524D84(v79, a3);
        }
      }
      if (v86)
      {
        v87 = (char *)v86;
        operator delete(v86);
      }
    }
    else
    {
      sub_524D84(39, a3);
    }
  }
  else
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 43) = -1;
    *(void *)(a3 + 47) = 0;
    *(void *)(a3 + 55) = 0;
    *(void *)(a3 + 63) = 0;
    *(_WORD *)(a3 + 71) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 104) = 0;
  }
}

void sub_7A9458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::string::size_type v17 = a15;
    if (a15)
    {
LABEL_6:
      operator delete(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::string::size_type v17 = a15;
    if (a15) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

void sub_7A94BC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      switch(*(_DWORD *)(a1 + 8))
      {
        case 2:
          int v3 = 999;
          goto LABEL_7;
        case 4:
          if (!*(unsigned char *)(a1 + 1136))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          sub_4BE9F4((uint64_t)v5, a1 + 16);
          sub_7A7734((uint64_t)v5, a2);
          sub_3A6B94((uint64_t)v5);
          break;
        default:
          goto LABEL_2;
      }
      return;
    case 9:
    case 0xA:
      int v3 = 3;
      goto LABEL_7;
    case 0x15:
      int v3 = 47;
      goto LABEL_7;
    case 0x16:
      int v3 = 5;
LABEL_7:
      *(_DWORD *)a2 = v3;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    default:
LABEL_2:
      *(void *)a2 = 0;
      break;
  }
}

void sub_7A9618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7A96A0(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 80) = -1;
  *(_DWORD *)(a3 + 88) = -1;
  *(_DWORD *)(a3 + 91) = -1;
  *(void *)(a3 + 128) = 0;
  uint64_t v4 = a3 + 128;
  *(void *)(a3 + 95) = 0;
  *(void *)(a3 + 111) = 0;
  *(void *)(a3 + 103) = 0;
  *(_WORD *)(a3 + 119) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  if (!*(unsigned char *)(a1 + 2037)) {
    return;
  }
  uint64_t v7 = nullsub_1(a2);
  uint64_t v8 = *(unsigned int **)v7;
  int v9 = *(unsigned int **)(v7 + 8);
  if (*(unsigned int **)v7 == v9)
  {
LABEL_6:
    if (sub_DC6EDC(*(void *)a1) && !*(unsigned char *)(a1 + 3494) && *(unsigned char *)(a1 + 3275) != 2) {
      return;
    }
    *(_DWORD *)uint64_t v41 = sub_646CE8((uint64_t)a2);
    LODWORD(v39[0]) = sub_646D60(a2);
    unsigned int v10 = sub_5ADA8C((int *)v41, (int *)v39);
    switch(v10)
    {
      case 0u:
      case 1u:
        unint64_t v11 = "_Traffic_Light";
        goto LABEL_14;
      case 2u:
        v41[23] = 17;
        strcpy(v41, "_Traffic_Moderate");
        break;
      case 3u:
        unint64_t v11 = "_Traffic_Heavy";
LABEL_14:
        v41[23] = 14;
        *(void *)uint64_t v41 = *(void *)v11;
        *(void *)&v41[6] = *(void *)(v11 + 6);
        v41[14] = 0;
        break;
      case 4u:
        *(void *)uint64_t v41 = operator new(0x19uLL);
        *(_OWORD *)&v41[8] = xmmword_20B9250;
        strcpy(*(char **)v41, "_Traffic_ExtremelyHeavy");
        break;
      default:
        memset(v41, 0, 24);
        break;
    }
    int64_t v12 = std::string::insert((std::string *)v41, 0, "Driving");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v40 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v39 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
    unint64_t v14 = (const std::string *)sub_8D7730(*(void *)(a1 + 3600), (uint64_t)v39);
    std::string::operator=((std::string *)a3, v14);
    if (v10 > 4)
    {
      uint64_t v42 = 0xFFFFFFFFLL;
      memset(v41, 0, sizeof(v41));
      *(_DWORD *)std::string v43 = -1;
      *(_DWORD *)&v43[3] = -1;
      memset(&v43[7], 0, 33);
      long long v44 = 0uLL;
      long long v45 = 0uLL;
    }
    else
    {
      sub_524D84(*(unsigned int *)&asc_20E98F0[4 * v10], (uint64_t)v41);
    }
    sub_4F377C(a3 + 48, (uint64_t)v41);
    *(void *)(a3 + 88) = *(void *)v43;
    uint64_t v15 = (void **)(a3 + 96);
    if (*(char *)(a3 + 119) < 0) {
      operator delete(*v15);
    }
    char v16 = 0;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)&v43[8];
    *(void *)(a3 + 112) = *(void *)&v43[24];
    v43[31] = 0;
    v43[8] = 0;
    *(unsigned char *)(a3 + 120) = v43[32];
    if (*(char *)(a3 + 151) < 0)
    {
      operator delete(*(void **)v4);
      char v16 = v43[31];
    }
    *(_OWORD *)uint64_t v4 = v44;
    *(void *)(v4 + 16) = v45;
    BYTE7(v45) = 0;
    LOBYTE(v44) = 0;
    *(unsigned char *)(a3 + 152) = BYTE8(v45);
    if (v16 < 0)
    {
      operator delete(*(void **)&v43[8]);
      int v17 = v42;
      if (v42 != 1) {
        goto LABEL_27;
      }
    }
    else
    {
      int v17 = v42;
      if (v42 != 1)
      {
LABEL_27:
        if (!v17 && (v41[31] & 0x80000000) != 0)
        {
          char v18 = *(void **)&v41[8];
LABEL_33:
          operator delete(v18);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
    }
    char v18 = *(void **)&v41[8];
    if (*(void *)&v41[8])
    {
      *(void *)&v41[16] = *(void *)&v41[8];
      goto LABEL_33;
    }
LABEL_34:
    if (*(unsigned char *)(a1 + 3455)
      || sub_45FB38(a2)
      || (uint64_t v19 = nullsub_1(a2),
          uint64_t v20 = *(void *)v19,
          uint64_t v21 = *(char **)(*(void *)v19 + 1112),
          v21 == *(char **)(v20 + 1120)))
    {
LABEL_64:
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      return;
    }
    memset(v41, 0, sizeof(v41));
    LODWORD(v42) = 1065353216;
    sub_6F3150(v21, (uint64_t)&__str);
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v37, "{RouteName}");
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    uint64_t v22 = sub_7AE4E0((uint64_t)v41, (uint64_t)&v37, (uint64_t)&unk_20F06E0, (long long **)&v36);
    std::string::operator=((std::string *)(v22 + 40), &__str);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_39:
        if (v10 > 5)
        {
LABEL_45:
          memset(&v36, 0, sizeof(v36));
          goto LABEL_50;
        }
LABEL_43:
        switch(v10)
        {
          case 0u:
          case 1u:
            uint64_t v23 = "_Traffic_Light";
            goto LABEL_48;
          case 2u:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 17;
            strcpy((char *)&v36, "_Traffic_Moderate");
            break;
          case 3u:
            uint64_t v23 = "_Traffic_Heavy";
LABEL_48:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 14;
            v36.__r_.__value_.__r.__words[0] = *(void *)v23;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 6) = *(void *)(v23 + 6);
            v36.__r_.__value_.__s.__data_[14] = 0;
            break;
          case 4u:
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
            *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_20B9250;
            strcpy(v36.__r_.__value_.__l.__data_, "_Traffic_ExtremelyHeavy");
            break;
          default:
            goto LABEL_45;
        }
LABEL_50:
        std::string::value_type v24 = std::string::insert(&v36, 0, "Proactive_Driving");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v37, "_RouteName");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v37.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            int v28 = *(std::__shared_weak_count **)(a1 + 3608);
            uint64_t v34 = *(void *)(a1 + 3600);
            uint64_t v35 = v28;
            if (!v28) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        int v28 = *(std::__shared_weak_count **)(a1 + 3608);
        uint64_t v34 = *(void *)(a1 + 3600);
        uint64_t v35 = v28;
        if (!v28)
        {
LABEL_54:
          sub_658310((uint64_t)&__str, (uint64_t)v41, &v34, 0, &v37);
          long long v29 = (void **)(a3 + 24);
          if (*(char *)(a3 + 47) < 0) {
            operator delete(*v29);
          }
          *(_OWORD *)long long v29 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          *(void *)(a3 + 40) = *((void *)&v37.__r_.__value_.__l + 2);
          *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
          v37.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v30 = v35;
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          unint64_t v31 = *(void ***)&v41[16];
          if (!*(void *)&v41[16])
          {
LABEL_62:
            int64_t v32 = *(void **)v41;
            *(void *)uint64_t v41 = 0;
            if (v32) {
              operator delete(v32);
            }
            goto LABEL_64;
          }
          while (1)
          {
            uint64_t v33 = (void **)*v31;
            if (*((char *)v31 + 63) < 0)
            {
              operator delete(v31[5]);
              if (*((char *)v31 + 39) < 0) {
LABEL_72:
              }
                operator delete(v31[2]);
            }
            else if (*((char *)v31 + 39) < 0)
            {
              goto LABEL_72;
            }
            operator delete(v31);
            unint64_t v31 = v33;
            if (!v33) {
              goto LABEL_62;
            }
          }
        }
LABEL_53:
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_54;
      }
    }
    else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
  while (sub_46E120(v8, 0) != 0x7FFFFFFF && sub_46E120(v8, 1) != 0x7FFFFFFF)
  {
    v8 += 3082;
    if (v8 == v9) {
      goto LABEL_6;
    }
  }
}

void sub_7A9D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_50828((uint64_t)&a39);
  if (a37 < 0)
  {
    operator delete(__p);
    sub_52FAE0(v44);
    _Unwind_Resume(a1);
  }
  sub_52FAE0(v44);
  _Unwind_Resume(a1);
}

void sub_7A9EB8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a2)
  {
    sub_7A9F80(*(_DWORD *)a2, a3, &v6);
LABEL_3:
    *a4 = v6;
    return;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    memset(&v6, 0, sizeof(v6));
    if (v5 < 5) {
      std::string::assign(&v6, off_243A640[v5 - 1]);
    }
    goto LABEL_3;
  }
  if (*(_DWORD *)(a2 + 1144) == 1 && *(void *)(a2 + 1152))
  {
    sub_7AA1C0(a1, a2 + 1144, &v6);
    goto LABEL_3;
  }
}

void sub_7A9F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_7A9F80@<X0>(int a1@<W1>, int a2@<W2>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  int v3 = a1 - 1;
  unsigned int v5 = "Fewer_turns";
  switch(v3)
  {
    case 0:
      std::string v6 = "Fastest_route";
      uint64_t v7 = "Fastest_route_label";
      goto LABEL_19;
    case 1:
      std::string v6 = "Best_route";
      uint64_t v7 = "Best_route_label";
      goto LABEL_19;
    case 2:
      std::string v6 = "Suggested_route";
      uint64_t v7 = "Suggested_route_label";
      goto LABEL_19;
    case 3:
      std::string v6 = "Simplest_route";
      uint64_t v7 = "Simplest_route_label";
      goto LABEL_19;
    case 4:
      goto LABEL_22;
    case 5:
      std::string v6 = "Shortest_route";
      uint64_t v7 = "Shortest_route_label";
      goto LABEL_19;
    case 6:
      unsigned int v5 = "Avoids_busy_roads";
      goto LABEL_22;
    case 7:
      std::string v6 = "Alternate_route";
      uint64_t v7 = "Alternate_route_label";
      goto LABEL_19;
    case 8:
      std::string v6 = "Tolls_required";
      goto LABEL_12;
    case 9:
      std::string v6 = "Toll_congestion_zone_required";
      goto LABEL_12;
    case 10:
      std::string v6 = "Avoids_tolls";
LABEL_12:
      uint64_t v7 = "";
      goto LABEL_19;
    case 11:
      std::string v6 = "Highways_required";
      uint64_t v7 = "Highways_required_label";
      goto LABEL_19;
    case 12:
      std::string v6 = "Avoids_highways";
      uint64_t v7 = "Avoids_highways_label";
      goto LABEL_19;
    case 13:
      std::string v6 = "Avoids_traffic";
      uint64_t v7 = "Avoids_traffic_label";
      goto LABEL_19;
    case 14:
      std::string v6 = "Avoids_ferries";
      uint64_t v7 = "Avoids_ferries_label";
      goto LABEL_19;
    case 15:
      std::string v6 = "Avoids_railway_shuttles";
      uint64_t v7 = "Avoids_railway_shuttles_label";
      goto LABEL_19;
    case 16:
      std::string v6 = "Avoids_environmental_zone_restrictions";
      uint64_t v7 = "Avoids_cz_restrictions_label";
LABEL_19:
      if (a2) {
        unsigned int v5 = v7;
      }
      else {
        unsigned int v5 = v6;
      }
      goto LABEL_22;
    case 17:
      unsigned int v5 = "Avoids_hills";
      goto LABEL_22;
    case 18:
      unsigned int v5 = "Avoids_stairs";
      goto LABEL_22;
    case 19:
      unsigned int v5 = "Avoids_walking";
      goto LABEL_22;
    case 20:
      unsigned int v5 = "Avoids_charge";
      goto LABEL_22;
    case 21:
      unsigned int v5 = "Other_network";
LABEL_22:
      unint64_t result = std::string::assign(a3, v5);
      break;
    default:
      return result;
  }
  return result;
}

void sub_7AA14C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7AA1C0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)a2 != 1) {
    return;
  }
  sub_503BC8(*(void *)(a2 + 8), (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v23);
  if (byte_25BC32F >= 0) {
    uint64_t v4 = (const std::string::value_type *)&qword_25BC318;
  }
  else {
    uint64_t v4 = (const std::string::value_type *)qword_25BC318;
  }
  if (byte_25BC32F >= 0) {
    std::string::size_type v5 = byte_25BC32F;
  }
  else {
    std::string::size_type v5 = unk_25BC320;
  }
  std::string v6 = std::string::insert(&v23, 0, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v25 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v25 >= 0) {
    unint64_t v9 = HIBYTE(v25);
  }
  else {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    unsigned int v10 = (long long *)operator new(v11 + 1);
    *((void *)&v26 + 1) = v9;
    int64_t v27 = v12 | 0x8000000000000000;
    *(void *)&long long v26 = v10;
    if (v9 >= 0x20 && (unint64_t)((char *)v10 - (char *)v8) >= 0x20)
    {
      long long v13 = (void **)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v14 = (long long *)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v15 = v10 + 1;
      char v16 = (long long *)(v8 + 2);
      unint64_t v17 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v16;
        *(v15 - 1) = *(v16 - 1);
        _OWORD *v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v9 == (v9 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    long long v13 = v8;
    unint64_t v14 = v10;
    do
    {
LABEL_27:
      char v19 = *(unsigned char *)v13;
      long long v13 = (void **)((char *)v13 + 1);
      *(unsigned char *)unint64_t v14 = v19;
      unint64_t v14 = (long long *)((char *)v14 + 1);
    }
    while (v13 != (void **)((char *)v8 + v9));
LABEL_28:
    *(unsigned char *)unint64_t v14 = 0;
    if (v27 >= 0) {
      uint64_t v20 = &v26;
    }
    else {
      uint64_t v20 = (long long *)v26;
    }
    do
    {
      *(unsigned char *)uint64_t v20 = __toupper(*(char *)v8);
      uint64_t v20 = (long long *)((char *)v20 + 1);
      uint64_t v8 = (void **)((char *)v8 + 1);
      --v9;
    }
    while (v9);
    int v21 = SHIBYTE(v25);
    *(_OWORD *)a3 = v26;
    a3[2] = v27;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v23.__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_36;
  }
  HIBYTE(v27) = v9;
  if (v9)
  {
    unsigned int v10 = &v26;
    goto LABEL_26;
  }
  LOBYTE(v26) = 0;
  int v22 = SHIBYTE(v25);
  *(_OWORD *)a3 = v26;
  a3[2] = v27;
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_36:
  operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
}

void sub_7AA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7AA460(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 1;
  switch(*a2)
  {
    case 1:
    case 2:
    case 4:
    case 0x2A:
    case 0x33:
      return result;
    case 3:
    case 5:
    case 6:
    case 0x2F:
      return 2;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x31:
      return 0;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x32:
      return 3;
    default:
      if (*a2 == 999) {
        return 3;
      }
      else {
        return 0;
      }
  }
}

uint64_t sub_7AA580(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *__src)
{
  *(void *)a1 = a2;
  memcpy((void *)(a1 + 8), __src, 0x76CuLL);
  if (__src[1927] < 0)
  {
    sub_4200((unsigned char *)(a1 + 1912), *((void **)__src + 238), *((void *)__src + 239));
  }
  else
  {
    long long v9 = *((_OWORD *)__src + 119);
    *(void *)(a1 + 1928) = *((void *)__src + 240);
    *(_OWORD *)(a1 + 1912) = v9;
  }
  long long v10 = *(_OWORD *)(__src + 1928);
  long long v11 = *(_OWORD *)(__src + 1944);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(__src + 1960);
  *(_OWORD *)(a1 + 1952) = v11;
  *(_OWORD *)(a1 + 1936) = v10;
  long long v12 = *(_OWORD *)(__src + 1976);
  long long v13 = *(_OWORD *)(__src + 1992);
  long long v14 = *(_OWORD *)(__src + 2008);
  *(_OWORD *)(a1 + 2026) = *(_OWORD *)(__src + 2018);
  *(_OWORD *)(a1 + 2016) = v14;
  *(_OWORD *)(a1 + 2000) = v13;
  *(_OWORD *)(a1 + 1984) = v12;
  sub_4BBDC0(a1 + 2048, a4);
  sub_688A04(a3, 4u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3584));
  sub_688A04(a3, 3u, *(_DWORD *)(a4 + 968), (uint64_t *)(a1 + 3600));
  return a1;
}

void sub_7AA678(_Unwind_Exception *a1)
{
  sub_14A84(v4);
  sub_4BCED0(v3);
  if (*(char *)(v1 + 1935) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_7AA6B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string::size_type v5 = (uint64_t *)sub_374DF4(a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      if (!*(unsigned char *)(v6 + 1162))
      {
        if (*(unsigned char *)(a1 + 3455) && *(void *)a3 != *(void *)(a3 + 8)) {
          return;
        }
        v16[0] = *(_DWORD *)v6;
        v16[2] = *(_DWORD *)(v6 + 8);
        char v18 = *(unsigned char *)(v6 + 1136);
        if (v18) {
          sub_4BE9F4((uint64_t)v17, v6 + 16);
        }
        long long v8 = *(_OWORD *)(v6 + 1144);
        *(_DWORD *)&v19[15] = *(_DWORD *)(v6 + 1159);
        *(_OWORD *)char v19 = v8;
        sub_7AA8C4(a1, (uint64_t)v16, 0, (uint64_t)__p);
        if (v18)
        {
          sub_3A6B94((uint64_t)v17);
          char v18 = 0;
        }
        long long v9 = (void *)HIBYTE(v15);
        char v10 = HIBYTE(v15);
        if (v15 < 0) {
          long long v9 = __p[1];
        }
        if (v9)
        {
          unint64_t v11 = *(void *)(a3 + 8);
          if (v11 >= *(void *)(a3 + 16))
          {
            long long v13 = sub_1D740((char **)a3, (uint64_t)__p);
          }
          else
          {
            if (SHIBYTE(v15) < 0)
            {
              sub_4200(*(unsigned char **)(a3 + 8), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              long long v12 = *(_OWORD *)__p;
              *(void *)(v11 + 16) = v15;
              *(_OWORD *)unint64_t v11 = v12;
            }
            long long v13 = (char *)(v11 + 24);
            *(void *)(a3 + 8) = v11 + 24;
          }
          *(void *)(a3 + 8) = v13;
          char v10 = HIBYTE(v15);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      v6 += 1168;
    }
    while (v6 != v7);
  }
}

void sub_7AA858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)v14);
  _Unwind_Resume(a1);
}

void sub_7AA8AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_7AA8C4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if ((v8 - 3) <= 1)
  {
    if (!*(unsigned char *)(a2 + 1136))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    sub_4BE9F4((uint64_t)__p, a2 + 16);
    if (v44)
    {
      if (!sub_604340((uint64_t)v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1))
      {
        int v12 = *(_DWORD *)(a2 + 8);
        v36[0] = *(_DWORD *)a2;
        v36[2] = v12;
        char v38 = *(unsigned char *)(a2 + 1136);
        if (v38) {
          sub_4BE9F4((uint64_t)v37, a2 + 16);
        }
        *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 1144);
        *(_DWORD *)&v39[15] = *(_DWORD *)(a2 + 1159);
        sub_7AC990(a1, (uint64_t)v36, a3, &v31);
        if (v38)
        {
          sub_3A6B94((uint64_t)v37);
          char v38 = 0;
        }
        std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v31.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v14 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)&v31);
          if (*((char *)v14 + 23) < 0)
          {
            sub_4200((unsigned char *)a4, (void *)*v14, v14[1]);
          }
          else
          {
            long long v15 = *(_OWORD *)v14;
            *(void *)(a4 + 16) = v14[2];
            *(_OWORD *)a4 = v15;
          }
          uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
          if ((v16 & 0x80u) == 0) {
            unint64_t v17 = (char *)a4;
          }
          else {
            unint64_t v17 = *(char **)a4;
          }
          if (byte_25BAEB7 >= 0) {
            char v18 = &qword_25BAEA0;
          }
          else {
            char v18 = (uint64_t *)qword_25BAEA0;
          }
          if (byte_25BAEB7 >= 0) {
            int64_t v19 = byte_25BAEB7;
          }
          else {
            int64_t v19 = unk_25BAEA8;
          }
          if (v19)
          {
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(a4 + 8);
            }
            if (v16 >= v19)
            {
              uint64_t v20 = &v17[v16];
              int v21 = *(char *)v18;
              int v22 = v17;
              do
              {
                uint64_t v23 = v16 - v19;
                if (v23 == -1) {
                  break;
                }
                std::string::value_type v24 = (char *)memchr(v22, v21, v23 + 1);
                if (!v24) {
                  break;
                }
                int64_t v25 = v24;
                if (!memcmp(v24, v18, v19))
                {
                  if (v25 != v20)
                  {
                    std::string::size_type v26 = v25 - v17;
                    if (v25 - v17 != -1) {
                      goto LABEL_51;
                    }
                  }
                  break;
                }
                int v22 = v25 + 1;
                uint64_t v16 = v20 - (v25 + 1);
              }
              while (v16 >= v19);
            }
          }
          else
          {
            std::string::size_type v26 = 0;
LABEL_51:
            if ((v42 & 0x80u) == 0) {
              int64_t v27 = (const std::string::value_type *)v41;
            }
            else {
              int64_t v27 = (const std::string::value_type *)v41[0];
            }
            if ((v42 & 0x80u) == 0) {
              std::string::size_type v28 = v42;
            }
            else {
              std::string::size_type v28 = v41[1];
            }
            std::string::replace((std::string *)a4, v26, v19, v27, v28);
          }
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 0;
          *(unsigned char *)a4 = 0;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        goto LABEL_60;
      }
      if (v44)
      {
        sub_604384(v43, (*(_DWORD *)(a2 + 8) & 0xFFFFFFFD) == 1, a4);
LABEL_60:
        sub_3A6B94((uint64_t)__p);
        return;
      }
    }
    long long v29 = __cxa_allocate_exception(8uLL);
    void *v29 = &off_2439078;
  }
  v32[0] = *(_DWORD *)a2;
  v32[2] = v8;
  char v34 = *(unsigned char *)(a2 + 1136);
  if (v34) {
    sub_4BE9F4((uint64_t)v33, a2 + 16);
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)&v35[15] = *(_DWORD *)(a2 + 1159);
  sub_7AC990(a1, (uint64_t)v32, a3, __p);
  if (v34)
  {
    sub_3A6B94((uint64_t)v33);
    char v34 = 0;
  }
  std::string::size_type v9 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p[0].__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    char v10 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)__p);
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200((unsigned char *)a4, (void *)*v10, v10[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      *(void *)(a4 + 16) = v10[2];
      *(_OWORD *)a4 = v11;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
}

void sub_7AACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0)
  {
    operator delete(__p);
    sub_3A6B94((uint64_t)&STACK[0x938]);
    _Unwind_Resume(a1);
  }
  sub_3A6B94((uint64_t)&STACK[0x938]);
  _Unwind_Resume(a1);
}

void sub_7AADC4(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  uint64_t v5 = sub_646C34(a1);
  char v4 = 1;
  sub_5F6090(a2, (uint64_t)&qword_25BA5E8, &v5, &v4);
  sub_5F41E8((uint64_t)a2, (uint64_t)&qword_25BA5E8);
}

void sub_7AAE34(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7AAE48(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_7AAE90(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7AAEA4(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = sub_64695C(a2);
  if (sub_62D404(a1 + 2048) && *(unsigned char *)(a1 + 3459) && v6 != 0)
  {
    sub_503BC8(v6, (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v44);
    if (byte_25BC32F >= 0) {
      long long v13 = (const std::string::value_type *)&qword_25BC318;
    }
    else {
      long long v13 = (const std::string::value_type *)qword_25BC318;
    }
    if (byte_25BC32F >= 0) {
      std::string::size_type v14 = byte_25BC32F;
    }
    else {
      std::string::size_type v14 = unk_25BC320;
    }
    long long v15 = std::string::insert(&v44, 0, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (size >= 0x17)
    {
      uint64_t v20 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((size | 7) != 0x17) {
        uint64_t v20 = size | 7;
      }
      uint64_t v21 = v20 + 1;
      int64_t v19 = operator new(v20 + 1);
      v45[1] = size;
      int64_t v46 = v21 | 0x8000000000000000;
      v45[0] = v19;
      if (size >= 0x20 && (unint64_t)((char *)v19 - (char *)p_p) >= 0x20)
      {
        int v22 = (std::string *)((char *)p_p + (size & 0xFFFFFFFFFFFFFFE0));
        uint64_t v23 = (char *)v19 + (size & 0xFFFFFFFFFFFFFFE0);
        std::string::value_type v24 = v19 + 2;
        int64_t v25 = &p_p->__r_.__value_.__r.__words[2];
        unint64_t v26 = size & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *std::string::value_type v24 = v27;
          v24 += 2;
          v25 += 4;
          v26 -= 32;
        }
        while (v26);
        if (size == (size & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
    }
    else
    {
      HIBYTE(v46) = size;
      if (!size)
      {
        LOBYTE(v45[0]) = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_67;
        }
        goto LABEL_101;
      }
      int64_t v19 = v45;
    }
    int v22 = p_p;
    uint64_t v23 = (std::string::value_type *)v19;
    do
    {
LABEL_61:
      std::string::value_type v34 = v22->__r_.__value_.__s.__data_[0];
      int v22 = (std::string *)((char *)v22 + 1);
      *v23++ = v34;
    }
    while (v22 != (std::string *)((char *)p_p + size));
LABEL_62:
    *uint64_t v23 = 0;
    if (v46 >= 0) {
      uint64_t v35 = v45;
    }
    else {
      uint64_t v35 = (unsigned char *)v45[0];
    }
    do
    {
      *v35++ = __toupper(p_p->__r_.__value_.__s.__data_[0]);
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_67:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_68;
      }
LABEL_102:
      operator delete(v44.__r_.__value_.__l.__data_);
LABEL_68:
      std::to_string(&v43, v6);
      if (byte_25BC390[23] < 0) {
        sub_4200(&__p, *(void **)byte_25BC390, *(unint64_t *)&byte_25BC390[8]);
      }
      else {
        std::string __p = *(std::string *)byte_25BC390;
      }
      std::string v48 = v43;
      memset(&v43, 0, sizeof(v43));
      sub_2AAA4((uint64_t)&v44, (uint64_t)&__p, 1);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v48.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_73:
          if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_74;
          }
          goto LABEL_94;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        std::string v36 = *(std::__shared_weak_count **)(a1 + 3592);
        uint64_t v41 = *(void *)(a1 + 3584);
        unsigned __int8 v42 = v36;
        if (!v36)
        {
LABEL_76:
          sub_658310((uint64_t)v45, (uint64_t)&v44, &v41, 0, &__p);
          std::string v37 = v42;
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
          sub_5F41E8((uint64_t)a3, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v38 = (void **)v44.__r_.__value_.__r.__words[2];
          if (!v44.__r_.__value_.__r.__words[2])
          {
LABEL_82:
            uint64_t v39 = (void *)v44.__r_.__value_.__r.__words[0];
            v44.__r_.__value_.__r.__words[0] = 0;
            if (v39) {
              operator delete(v39);
            }
            if (SHIBYTE(v46) < 0)
            {
              int v12 = (void *)v45[0];
LABEL_98:
              operator delete(v12);
              return;
            }
            return;
          }
          while (1)
          {
            std::string::size_type v40 = (void **)*v38;
            if (*((char *)v38 + 63) < 0)
            {
              operator delete(v38[5]);
              if (*((char *)v38 + 39) < 0) {
LABEL_91:
              }
                operator delete(v38[2]);
            }
            else if (*((char *)v38 + 39) < 0)
            {
              goto LABEL_91;
            }
            operator delete(v38);
            char v38 = v40;
            if (!v40) {
              goto LABEL_82;
            }
          }
        }
LABEL_75:
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_76;
      }
LABEL_94:
      operator delete(v43.__r_.__value_.__l.__data_);
      std::string v36 = *(std::__shared_weak_count **)(a1 + 3592);
      uint64_t v41 = *(void *)(a1 + 3584);
      unsigned __int8 v42 = v36;
      if (!v36) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }
LABEL_101:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_102;
  }
  if (*(unsigned char *)(a1 + 3488))
  {
    uint64_t v8 = *(void *)nullsub_1(a2) + 11688;
    sub_7ACF38(a1, v8, a3);
  }
  else if (*(unsigned char *)(a1 + 3455))
  {
    sub_7AA6B8(a1, (uint64_t)a2, (uint64_t)&__p);
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      do
      {
        sub_5F41E8((uint64_t)a3, v9);
        v9 += 24;
      }
      while (v9 != v10);
      std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
      int v12 = (void *)v9;
      if (__p.__r_.__value_.__l.__size_ != v9)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 24;
        }
        while (v11 != v9);
        int v12 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v9;
      goto LABEL_98;
    }
  }
  else if (sub_6484D0((uint64_t)a2))
  {
    uint64_t v28 = a3[1];
    if (*a3 == v28)
    {
      sub_6484E0(a2, (uint64_t)&__p);
      sub_5F41E8((uint64_t)a3, (uint64_t)&__p);
    }
    else
    {
      long long v29 = byte_25BA6D7 >= 0
          ? (const std::string::value_type *)&qword_25BA6C0
          : (const std::string::value_type *)qword_25BA6C0;
      std::string::size_type v30 = byte_25BA6D7 >= 0 ? byte_25BA6D7 : unk_25BA6C8;
      std::string v31 = std::string::append((std::string *)(v28 - 24), v29, v30);
      sub_6484E0(a2, (uint64_t)&__p);
      int64_t v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v33 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      std::string::append(v31, (const std::string::value_type *)v32, v33);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      int v12 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_98;
    }
  }
}

void sub_7AB440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_7AB560(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5F3BA0((uint64_t)a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  uint64_t v7 = sub_646C34(a2);
  char v6 = 1;
  sub_5F6090(a3, (uint64_t)&qword_25BA5E8, &v7, &v6);
  sub_5F41E8((uint64_t)a3, (uint64_t)&qword_25BA5E8);
  sub_7AAEA4(a1, a2, a3);
}

void sub_7AB5F8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_7AB60C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3BA0(a3, (__int16 *)(a1 + 3225), (long long *)&qword_25BA6C0);
  if (*(unsigned char *)(a1 + 3455))
  {
    char v6 = (void *)sub_374DF4(a2);
    if (*v6 != v6[1])
    {
      uint64_t v7 = sub_374DF4(a2);
      uint64_t v8 = *(void *)v7;
      if (!*(unsigned char *)(*(void *)v7 + 1160))
      {
        int v9 = *(_DWORD *)(v8 + 8);
        v14[0] = *(_DWORD *)v8;
        v14[2] = v9;
        char v16 = *(unsigned char *)(v8 + 1136);
        if (v16) {
          sub_4BE9F4((uint64_t)v15, v8 + 16);
        }
        long long v10 = *(_OWORD *)(v8 + 1144);
        *(_DWORD *)&v17[15] = *(_DWORD *)(v8 + 1159);
        *(_OWORD *)unint64_t v17 = v10;
        sub_7AA8C4(a1, (uint64_t)v14, 1, (uint64_t)__p);
        if (v16)
        {
          sub_3A6B94((uint64_t)v15);
          char v16 = 0;
        }
        unint64_t v11 = v13;
        if ((v13 & 0x80u) != 0) {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if (v11)
        {
          sub_5F41E8(a3, (uint64_t)__p);
          if (*(_DWORD *)(v8 + 1144) == 1)
          {
            if (*(void *)(v8 + 1152)) {
              sub_7AB7E8(a1, v8 + 1144);
            }
          }
        }
        if ((char)v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_7AB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_7AB7E8(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a2 + 8);
  if (*(_DWORD *)a2 == 1 && result != 0)
  {
    std::to_string(&v4, result);
    sub_5F1E5C(__dst, (long long *)byte_25BC390);
  }
  return result;
}

void sub_7AB874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7AB8A0(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1[3455])
  {
    if (!a1[2032] || (uint64_t v6 = sub_62D414((uint64_t)(a1 + 2048)), v6 == 0x7FFFFFFF) || (int)v6 <= SHIDWORD(v6))
    {
      v86 = 0;
      v87 = 0;
      unint64_t v88 = 0;
      uint64_t v7 = (void *)sub_374DF4(a2);
      if (*v7 != v7[1] && !*(unsigned char *)(*(void *)sub_374DF4(a2) + 1161))
      {
        uint64_t v8 = (uint64_t *)sub_374DF4(a2);
        sub_7ABF94(*v8, (uint64_t)__p);
        if (BYTE4(__p[0]))
        {
          int v9 = v87;
          if ((unint64_t)v87 >= v88)
          {
            unint64_t v11 = (char *)v86;
            int64_t v12 = v87 - (unsigned char *)v86;
            uint64_t v13 = (v87 - (unsigned char *)v86) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              sub_2E00();
            }
            uint64_t v15 = v88 - (void)v86;
            if ((uint64_t)(v88 - (void)v86) >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              if (v16 >> 62) {
                sub_188D718();
              }
              unint64_t v17 = (char *)operator new(4 * v16);
            }
            else
            {
              unint64_t v17 = 0;
            }
            char v18 = &v17[4 * v13];
            int64_t v19 = &v17[4 * v16];
            *(_DWORD *)char v18 = __p[0];
            long long v10 = v18 + 4;
            if (v9 != v11)
            {
              unint64_t v20 = v9 - v11 - 4;
              if (v20 < 0x2C) {
                goto LABEL_117;
              }
              if ((unint64_t)(v9 - v17 - v12) < 0x20) {
                goto LABEL_117;
              }
              uint64_t v21 = (v20 >> 2) + 1;
              uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v23 = &v9[-v22];
              v18 -= v22;
              std::string::value_type v24 = &v17[4 * v13 - 16];
              int64_t v25 = v9 - 16;
              uint64_t v26 = v21 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v27 = *(_OWORD *)v25;
                *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
                *(_OWORD *)std::string::value_type v24 = v27;
                v24 -= 32;
                v25 -= 32;
                v26 -= 8;
              }
              while (v26);
              int v9 = v23;
              if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_117:
                do
                {
                  int v28 = *((_DWORD *)v9 - 1);
                  v9 -= 4;
                  *((_DWORD *)v18 - 1) = v28;
                  v18 -= 4;
                }
                while (v9 != v11);
              }
            }
            v86 = v18;
            v87 = v10;
            unint64_t v88 = (unint64_t)v19;
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *(_DWORD *)v87 = __p[0];
            long long v10 = v9 + 4;
          }
          v87 = v10;
        }
      }
      if (*(_DWORD *)(sub_6477D4(a2) + 56))
      {
        long long v29 = v87;
        if ((unint64_t)v87 >= v88)
        {
          std::string v31 = (char *)v86;
          int64_t v32 = v87 - (unsigned char *)v86;
          uint64_t v33 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v35 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            if (v36 >> 62) {
              sub_188D718();
            }
            std::string v37 = (char *)operator new(4 * v36);
          }
          else
          {
            std::string v37 = 0;
          }
          char v38 = &v37[4 * v33];
          uint64_t v39 = &v37[4 * v36];
          *(_DWORD *)char v38 = 42;
          std::string::size_type v30 = v38 + 4;
          if (v29 != v31)
          {
            unint64_t v40 = v29 - v31 - 4;
            if (v40 < 0x2C) {
              goto LABEL_118;
            }
            if ((unint64_t)(v29 - v37 - v32) < 0x20) {
              goto LABEL_118;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            std::string v43 = &v29[-v42];
            v38 -= v42;
            std::string v44 = &v37[4 * v33 - 16];
            long long v45 = v29 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
              *(_OWORD *)std::string v44 = v47;
              v44 -= 32;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            long long v29 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_118:
              do
              {
                int v48 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v38 - 1) = v48;
                v38 -= 4;
              }
              while (v29 != v31);
            }
          }
          v86 = v38;
          v87 = v30;
          unint64_t v88 = (unint64_t)v39;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *(_DWORD *)v87 = 42;
          std::string::size_type v30 = v29 + 4;
        }
        v87 = v30;
      }
      uint64_t v49 = sub_6477D4(a2);
      size_t v50 = v87;
      if (*(unsigned char *)v49 || *(_DWORD *)(v49 + 52))
      {
        if ((unint64_t)v87 >= v88)
        {
          BOOL v52 = v86;
          int64_t v53 = v87 - (unsigned char *)v86;
          uint64_t v54 = (v87 - (unsigned char *)v86) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v56 = v88 - (void)v86;
          if ((uint64_t)(v88 - (void)v86) >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            if (v57 >> 62) {
              sub_188D718();
            }
            size_t v58 = operator new(4 * v57);
          }
          else
          {
            size_t v58 = 0;
          }
          long long v59 = &v58[4 * v54];
          long long v60 = &v58[4 * v57];
          *(_DWORD *)long long v59 = 3;
          uint64_t v51 = v59 + 4;
          if (v50 != v52)
          {
            unint64_t v61 = v50 - v52 - 4;
            if (v61 < 0x2C) {
              goto LABEL_119;
            }
            if ((unint64_t)(v50 - v58 - v53) < 0x20) {
              goto LABEL_119;
            }
            uint64_t v62 = (v61 >> 2) + 1;
            uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v64 = &v50[-v63];
            v59 -= v63;
            int64x2_t v65 = &v58[4 * v54 - 16];
            uint64_t v66 = v50 - 16;
            uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v68 = *(_OWORD *)v66;
              *(v65 - 1) = *((_OWORD *)v66 - 1);
              *int64x2_t v65 = v68;
              v65 -= 2;
              v66 -= 32;
              v67 -= 8;
            }
            while (v67);
            size_t v50 = v64;
            if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_119:
              do
              {
                int v69 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v59 - 1) = v69;
                v59 -= 4;
              }
              while (v50 != v52);
            }
          }
          v86 = v59;
          v87 = v51;
          unint64_t v88 = (unint64_t)v60;
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(_DWORD *)v87 = 3;
          uint64_t v51 = v50 + 4;
        }
        v87 = v51;
        size_t v50 = v51;
      }
      unint64_t v70 = 126 - 2 * __clz((v50 - (unsigned char *)v86) >> 2);
      __p[0] = a1;
      if (v50 == v86) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = v70;
      }
      sub_7AFA94((uint64_t)v86, (int *)v50, (uint64_t *)__p, v71, 1);
      v72 = v87;
      if (v86 != v87)
      {
        uint64_t v73 = (char *)v86 + 4;
        while (v73 != v87)
        {
          int v74 = *((_DWORD *)v73 - 1);
          int v75 = *(_DWORD *)v73;
          v73 += 4;
          if (v74 == v75)
          {
            int v76 = v73 - 8;
            while (v73 != v72)
            {
              int v77 = v74;
              int v74 = *(_DWORD *)v73;
              if (v77 != *(_DWORD *)v73)
              {
                *((_DWORD *)v76 + 1) = v74;
                v76 += 4;
              }
              v73 += 4;
            }
            v82 = v76 + 4;
            v83 = (char *)(v72 - (v76 + 4));
            if (v72 == v76 + 4) {
              break;
            }
            if (v72 != &v83[(void)v82]) {
              memmove(v76 + 4, &v83[(void)v82], 0);
            }
            v87 = v82;
            uint64_t v78 = (unsigned int *)v86;
            if (v86 != v82) {
              goto LABEL_94;
            }
            goto LABEL_102;
          }
        }
      }
      uint64_t v78 = (unsigned int *)v86;
      if (v86 == v72)
      {
LABEL_102:
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_DWORD *)(a3 + 32) = -1;
        *(_DWORD *)(a3 + 40) = -1;
        *(_DWORD *)(a3 + 43) = -1;
        *(void *)(a3 + 47) = 0;
        *(void *)(a3 + 55) = 0;
        *(void *)(a3 + 63) = 0;
        *(_WORD *)(a3 + 71) = 0;
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(a3 + 104) = 0;
      }
      else
      {
LABEL_94:
        uint64_t v79 = *v78;
        if (v79 == 3)
        {
          uint64_t v80 = sub_648E68(a2);
          if (*(char *)(v80 + 23) < 0)
          {
            sub_4200(__p, *(void **)v80, *(void *)(v80 + 8));
          }
          else
          {
            long long v81 = *(_OWORD *)v80;
            uint64_t v85 = *(void *)(v80 + 16);
            *(_OWORD *)std::string __p = v81;
          }
          sub_524E5C((uint64_t)__p, a3);
          if (SHIBYTE(v85) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          sub_524D84(v79, a3);
        }
      }
      if (v86)
      {
        v87 = (char *)v86;
        operator delete(v86);
      }
    }
    else
    {
      sub_524D84(39, a3);
    }
  }
  else
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 43) = -1;
    *(void *)(a3 + 47) = 0;
    *(void *)(a3 + 55) = 0;
    *(void *)(a3 + 63) = 0;
    *(_WORD *)(a3 + 71) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 104) = 0;
  }
}

void sub_7ABF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    unint64_t v17 = a15;
    if (a15)
    {
LABEL_6:
      operator delete(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v17 = a15;
    if (a15) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(a1);
}

void sub_7ABF94(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      switch(*(_DWORD *)(a1 + 8))
      {
        case 2:
          int v3 = 999;
          goto LABEL_7;
        case 4:
          if (!*(unsigned char *)(a1 + 1136))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          sub_4BE9F4((uint64_t)v5, a1 + 16);
          sub_7A7734((uint64_t)v5, a2);
          sub_3A6B94((uint64_t)v5);
          break;
        default:
          goto LABEL_2;
      }
      return;
    case 9:
    case 0xA:
      int v3 = 3;
      goto LABEL_7;
    case 0x15:
      int v3 = 47;
      goto LABEL_7;
    case 0x16:
      int v3 = 5;
LABEL_7:
      *(_DWORD *)a2 = v3;
      *(unsigned char *)(a2 + 4) = 1;
      break;
    default:
LABEL_2:
      *(void *)a2 = 0;
      break;
  }
}

void sub_7AC0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7AC178(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 80) = -1;
  *(_DWORD *)(a3 + 88) = -1;
  *(_DWORD *)(a3 + 91) = -1;
  *(void *)(a3 + 128) = 0;
  uint64_t v4 = a3 + 128;
  *(void *)(a3 + 95) = 0;
  *(void *)(a3 + 111) = 0;
  *(void *)(a3 + 103) = 0;
  *(_WORD *)(a3 + 119) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  if (!*(unsigned char *)(a1 + 2037)) {
    return;
  }
  uint64_t v7 = nullsub_1(a2);
  uint64_t v8 = *(unsigned int **)v7;
  int v9 = *(unsigned int **)(v7 + 8);
  if (*(unsigned int **)v7 == v9)
  {
LABEL_6:
    if (sub_DC6EDC(*(void *)a1) && !*(unsigned char *)(a1 + 3494) && *(unsigned char *)(a1 + 3275) != 2) {
      return;
    }
    *(_DWORD *)uint64_t v41 = sub_646CE8((uint64_t)a2);
    LODWORD(v39[0]) = sub_64AFA4(a2);
    unsigned int v10 = sub_5ADA8C((int *)v41, (int *)v39);
    switch(v10)
    {
      case 0u:
      case 1u:
        unint64_t v11 = "_Traffic_Light";
        goto LABEL_14;
      case 2u:
        v41[23] = 17;
        strcpy(v41, "_Traffic_Moderate");
        break;
      case 3u:
        unint64_t v11 = "_Traffic_Heavy";
LABEL_14:
        v41[23] = 14;
        *(void *)uint64_t v41 = *(void *)v11;
        *(void *)&v41[6] = *(void *)(v11 + 6);
        v41[14] = 0;
        break;
      case 4u:
        *(void *)uint64_t v41 = operator new(0x19uLL);
        *(_OWORD *)&v41[8] = xmmword_20B9250;
        strcpy(*(char **)v41, "_Traffic_ExtremelyHeavy");
        break;
      default:
        memset(v41, 0, 24);
        break;
    }
    int64_t v12 = std::string::insert((std::string *)v41, 0, "Driving");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v40 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v39 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
    unint64_t v14 = (const std::string *)sub_8D7730(*(void *)(a1 + 3600), (uint64_t)v39);
    std::string::operator=((std::string *)a3, v14);
    if (v10 > 4)
    {
      uint64_t v42 = 0xFFFFFFFFLL;
      memset(v41, 0, sizeof(v41));
      *(_DWORD *)std::string v43 = -1;
      *(_DWORD *)&v43[3] = -1;
      memset(&v43[7], 0, 33);
      long long v44 = 0uLL;
      long long v45 = 0uLL;
    }
    else
    {
      sub_524D84(*(unsigned int *)&asc_20E98F0[4 * v10], (uint64_t)v41);
    }
    sub_4F377C(a3 + 48, (uint64_t)v41);
    *(void *)(a3 + 88) = *(void *)v43;
    uint64_t v15 = (void **)(a3 + 96);
    if (*(char *)(a3 + 119) < 0) {
      operator delete(*v15);
    }
    char v16 = 0;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)&v43[8];
    *(void *)(a3 + 112) = *(void *)&v43[24];
    v43[31] = 0;
    v43[8] = 0;
    *(unsigned char *)(a3 + 120) = v43[32];
    if (*(char *)(a3 + 151) < 0)
    {
      operator delete(*(void **)v4);
      char v16 = v43[31];
    }
    *(_OWORD *)uint64_t v4 = v44;
    *(void *)(v4 + 16) = v45;
    BYTE7(v45) = 0;
    LOBYTE(v44) = 0;
    *(unsigned char *)(a3 + 152) = BYTE8(v45);
    if (v16 < 0)
    {
      operator delete(*(void **)&v43[8]);
      int v17 = v42;
      if (v42 != 1) {
        goto LABEL_27;
      }
    }
    else
    {
      int v17 = v42;
      if (v42 != 1)
      {
LABEL_27:
        if (!v17 && (v41[31] & 0x80000000) != 0)
        {
          char v18 = *(void **)&v41[8];
LABEL_33:
          operator delete(v18);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
    }
    char v18 = *(void **)&v41[8];
    if (*(void *)&v41[8])
    {
      *(void *)&v41[16] = *(void *)&v41[8];
      goto LABEL_33;
    }
LABEL_34:
    if (*(unsigned char *)(a1 + 3455)
      || sub_45FB38(a2)
      || (uint64_t v19 = nullsub_1(a2),
          uint64_t v20 = *(void *)v19,
          uint64_t v21 = *(char **)(*(void *)v19 + 1112),
          v21 == *(char **)(v20 + 1120)))
    {
LABEL_64:
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      return;
    }
    memset(v41, 0, sizeof(v41));
    LODWORD(v42) = 1065353216;
    sub_6F3150(v21, (uint64_t)&__str);
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&v37, "{RouteName}");
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    uint64_t v22 = sub_7AE4E0((uint64_t)v41, (uint64_t)&v37, (uint64_t)&unk_20F06E0, (long long **)&v36);
    std::string::operator=((std::string *)(v22 + 40), &__str);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_39:
        if (v10 > 5)
        {
LABEL_45:
          memset(&v36, 0, sizeof(v36));
          goto LABEL_50;
        }
LABEL_43:
        switch(v10)
        {
          case 0u:
          case 1u:
            uint64_t v23 = "_Traffic_Light";
            goto LABEL_48;
          case 2u:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 17;
            strcpy((char *)&v36, "_Traffic_Moderate");
            break;
          case 3u:
            uint64_t v23 = "_Traffic_Heavy";
LABEL_48:
            *((unsigned char *)&v36.__r_.__value_.__s + 23) = 14;
            v36.__r_.__value_.__r.__words[0] = *(void *)v23;
            *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 6) = *(void *)(v23 + 6);
            v36.__r_.__value_.__s.__data_[14] = 0;
            break;
          case 4u:
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
            *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_20B9250;
            strcpy(v36.__r_.__value_.__l.__data_, "_Traffic_ExtremelyHeavy");
            break;
          default:
            goto LABEL_45;
        }
LABEL_50:
        std::string::value_type v24 = std::string::insert(&v36, 0, "Proactive_Driving");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v37, "_RouteName");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v37.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_52:
            int v28 = *(std::__shared_weak_count **)(a1 + 3608);
            uint64_t v34 = *(void *)(a1 + 3600);
            uint64_t v35 = v28;
            if (!v28) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
        }
        else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_52;
        }
        operator delete(v36.__r_.__value_.__l.__data_);
        int v28 = *(std::__shared_weak_count **)(a1 + 3608);
        uint64_t v34 = *(void *)(a1 + 3600);
        uint64_t v35 = v28;
        if (!v28)
        {
LABEL_54:
          sub_658310((uint64_t)&__str, (uint64_t)v41, &v34, 0, &v37);
          long long v29 = (void **)(a3 + 24);
          if (*(char *)(a3 + 47) < 0) {
            operator delete(*v29);
          }
          *(_OWORD *)long long v29 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          *(void *)(a3 + 40) = *((void *)&v37.__r_.__value_.__l + 2);
          *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
          v37.__r_.__value_.__s.__data_[0] = 0;
          std::string::size_type v30 = v35;
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string v31 = *(void ***)&v41[16];
          if (!*(void *)&v41[16])
          {
LABEL_62:
            int64_t v32 = *(void **)v41;
            *(void *)uint64_t v41 = 0;
            if (v32) {
              operator delete(v32);
            }
            goto LABEL_64;
          }
          while (1)
          {
            uint64_t v33 = (void **)*v31;
            if (*((char *)v31 + 63) < 0)
            {
              operator delete(v31[5]);
              if (*((char *)v31 + 39) < 0) {
LABEL_72:
              }
                operator delete(v31[2]);
            }
            else if (*((char *)v31 + 39) < 0)
            {
              goto LABEL_72;
            }
            operator delete(v31);
            std::string v31 = v33;
            if (!v33) {
              goto LABEL_62;
            }
          }
        }
LABEL_53:
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_54;
      }
    }
    else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
  while (sub_471160(v8, 0) != 0x7FFFFFFF && sub_471160(v8, 1) != 0x7FFFFFFF)
  {
    v8 += 3082;
    if (v8 == v9) {
      goto LABEL_6;
    }
  }
}

void sub_7AC870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_50828((uint64_t)&a39);
  if (a37 < 0)
  {
    operator delete(__p);
    sub_52FAE0(v44);
    _Unwind_Resume(a1);
  }
  sub_52FAE0(v44);
  _Unwind_Resume(a1);
}

void sub_7AC990(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(_DWORD *)a2)
  {
    sub_7ACA58(*(_DWORD *)a2, a3, &v6);
LABEL_3:
    *a4 = v6;
    return;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    memset(&v6, 0, sizeof(v6));
    if (v5 < 5) {
      std::string::assign(&v6, off_243A640[v5 - 1]);
    }
    goto LABEL_3;
  }
  if (*(_DWORD *)(a2 + 1144) == 1 && *(void *)(a2 + 1152))
  {
    sub_7ACC98(a1, a2 + 1144, &v6);
    goto LABEL_3;
  }
}

void sub_7ACA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_7ACA58@<X0>(int a1@<W1>, int a2@<W2>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  int v3 = a1 - 1;
  unsigned int v5 = "Fewer_turns";
  switch(v3)
  {
    case 0:
      std::string v6 = "Fastest_route";
      uint64_t v7 = "Fastest_route_label";
      goto LABEL_19;
    case 1:
      std::string v6 = "Best_route";
      uint64_t v7 = "Best_route_label";
      goto LABEL_19;
    case 2:
      std::string v6 = "Suggested_route";
      uint64_t v7 = "Suggested_route_label";
      goto LABEL_19;
    case 3:
      std::string v6 = "Simplest_route";
      uint64_t v7 = "Simplest_route_label";
      goto LABEL_19;
    case 4:
      goto LABEL_22;
    case 5:
      std::string v6 = "Shortest_route";
      uint64_t v7 = "Shortest_route_label";
      goto LABEL_19;
    case 6:
      unsigned int v5 = "Avoids_busy_roads";
      goto LABEL_22;
    case 7:
      std::string v6 = "Alternate_route";
      uint64_t v7 = "Alternate_route_label";
      goto LABEL_19;
    case 8:
      std::string v6 = "Tolls_required";
      goto LABEL_12;
    case 9:
      std::string v6 = "Toll_congestion_zone_required";
      goto LABEL_12;
    case 10:
      std::string v6 = "Avoids_tolls";
LABEL_12:
      uint64_t v7 = "";
      goto LABEL_19;
    case 11:
      std::string v6 = "Highways_required";
      uint64_t v7 = "Highways_required_label";
      goto LABEL_19;
    case 12:
      std::string v6 = "Avoids_highways";
      uint64_t v7 = "Avoids_highways_label";
      goto LABEL_19;
    case 13:
      std::string v6 = "Avoids_traffic";
      uint64_t v7 = "Avoids_traffic_label";
      goto LABEL_19;
    case 14:
      std::string v6 = "Avoids_ferries";
      uint64_t v7 = "Avoids_ferries_label";
      goto LABEL_19;
    case 15:
      std::string v6 = "Avoids_railway_shuttles";
      uint64_t v7 = "Avoids_railway_shuttles_label";
      goto LABEL_19;
    case 16:
      std::string v6 = "Avoids_environmental_zone_restrictions";
      uint64_t v7 = "Avoids_cz_restrictions_label";
LABEL_19:
      if (a2) {
        unsigned int v5 = v7;
      }
      else {
        unsigned int v5 = v6;
      }
      goto LABEL_22;
    case 17:
      unsigned int v5 = "Avoids_hills";
      goto LABEL_22;
    case 18:
      unsigned int v5 = "Avoids_stairs";
      goto LABEL_22;
    case 19:
      unsigned int v5 = "Avoids_walking";
      goto LABEL_22;
    case 20:
      unsigned int v5 = "Avoids_charge";
      goto LABEL_22;
    case 21:
      unsigned int v5 = "Other_network";
LABEL_22:
      unint64_t result = std::string::assign(a3, v5);
      break;
    default:
      return result;
  }
  return result;
}

void sub_7ACC24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7ACC98(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)a2 != 1) {
    return;
  }
  sub_503BC8(*(void *)(a2 + 8), (const void **)&dword_25BC360, *(_DWORD *)(a1 + 3016), 0, &v23);
  if (byte_25BC32F >= 0) {
    uint64_t v4 = (const std::string::value_type *)&qword_25BC318;
  }
  else {
    uint64_t v4 = (const std::string::value_type *)qword_25BC318;
  }
  if (byte_25BC32F >= 0) {
    std::string::size_type v5 = byte_25BC32F;
  }
  else {
    std::string::size_type v5 = unk_25BC320;
  }
  std::string v6 = std::string::insert(&v23, 0, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v25 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v25 >= 0) {
    unint64_t v9 = HIBYTE(v25);
  }
  else {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    unsigned int v10 = (long long *)operator new(v11 + 1);
    *((void *)&v26 + 1) = v9;
    int64_t v27 = v12 | 0x8000000000000000;
    *(void *)&long long v26 = v10;
    if (v9 >= 0x20 && (unint64_t)((char *)v10 - (char *)v8) >= 0x20)
    {
      long long v13 = (void **)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
      unint64_t v14 = (long long *)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFE0));
      uint64_t v15 = v10 + 1;
      char v16 = (long long *)(v8 + 2);
      unint64_t v17 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *v16;
        *(v15 - 1) = *(v16 - 1);
        _OWORD *v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v9 == (v9 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    long long v13 = v8;
    unint64_t v14 = v10;
    do
    {
LABEL_27:
      char v19 = *(unsigned char *)v13;
      long long v13 = (void **)((char *)v13 + 1);
      *(unsigned char *)unint64_t v14 = v19;
      unint64_t v14 = (long long *)((char *)v14 + 1);
    }
    while (v13 != (void **)((char *)v8 + v9));
LABEL_28:
    *(unsigned char *)unint64_t v14 = 0;
    if (v27 >= 0) {
      uint64_t v20 = &v26;
    }
    else {
      uint64_t v20 = (long long *)v26;
    }
    do
    {
      *(unsigned char *)uint64_t v20 = __toupper(*(char *)v8);
      uint64_t v20 = (long long *)((char *)v20 + 1);
      uint64_t v8 = (void **)((char *)v8 + 1);
      --v9;
    }
    while (v9);
    int v21 = SHIBYTE(v25);
    *(_OWORD *)a3 = v26;
    a3[2] = v27;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v23.__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_36;
  }
  HIBYTE(v27) = v9;
  if (v9)
  {
    unsigned int v10 = &v26;
    goto LABEL_26;
  }
  LOBYTE(v26) = 0;
  int v22 = SHIBYTE(v25);
  *(_OWORD *)a3 = v26;
  a3[2] = v27;
  if ((v22 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_36:
  operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
}

void sub_7ACEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_7ACF38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a2 + 256);
  if (v3)
  {
    switch(v3)
    {
      case 1:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1413565510;
        std::string v6 = "MOSTLY_FLAT";
        goto LABEL_18;
      case 2:
        long long v7 = "GENTLY_UPHILL";
        goto LABEL_12;
      case 3:
        HIBYTE(__p[2]) = 15;
        strcpy((char *)__p, "GENTLY_DOWNHILL");
        break;
      case 4:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1280067912;
        std::string v6 = "GENTLE_HILL";
        goto LABEL_18;
      case 5:
        HIBYTE(__p[2]) = 12;
        strcpy((char *)__p, "GENTLE_HILLS");
        break;
      case 6:
        HIBYTE(__p[2]) = 17;
        strcpy((char *)__p, "MODERATELY_UPHILL");
        break;
      case 7:
        HIBYTE(__p[2]) = 19;
        strcpy((char *)__p, "MODERATELY_DOWNHILL");
        break;
      case 8:
        long long v7 = "MODERATE_HILL";
LABEL_12:
        HIBYTE(__p[2]) = 13;
        __p[0] = *(void **)v7;
        *(void **)((char *)__p + 5) = *(void **)(v7 + 5);
        BYTE5(__p[1]) = 0;
        break;
      case 9:
        uint64_t v8 = "MODERATE_HILLS";
        goto LABEL_20;
      case 10:
        uint64_t v8 = "STEEPLY_UPHILL";
        goto LABEL_20;
      case 11:
        HIBYTE(__p[2]) = 16;
        strcpy((char *)__p, "STEEPLY_DOWNHILL");
        break;
      case 12:
        HIBYTE(__p[2]) = 10;
        strcpy((char *)__p, "STEEP_HILL");
        break;
      case 13:
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1397509193;
        std::string v6 = "STEEP_HILLS";
LABEL_18:
        __p[0] = *(void **)v6;
        BYTE3(__p[1]) = 0;
        break;
      case 14:
        uint64_t v8 = "CLIMB_DISTANCE";
LABEL_20:
        HIBYTE(__p[2]) = 14;
        __p[0] = *(void **)v8;
        *(void **)((char *)__p + 6) = *(void **)(v8 + 6);
        BYTE6(__p[1]) = 0;
        break;
      default:
        memset(__p, 0, 24);
        break;
    }
    unint64_t v9 = sub_8D7730(*(void *)(a1 + 3584), (uint64_t)__p);
    sub_5F41E8((uint64_t)a3, (uint64_t)v9);
    if (*(_DWORD *)(a2 + 256) == 14)
    {
      sub_5F3038(&v10, 0);
      sub_5F6090(a3, (uint64_t)&qword_25BA660, (uint64_t *)a2, &v10);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_7AD1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7AD23C(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 1;
  switch(*a2)
  {
    case 1:
    case 2:
    case 4:
    case 0x2A:
    case 0x33:
      return result;
    case 3:
    case 5:
    case 6:
    case 0x2F:
      return 2;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x31:
      return 0;
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x32:
      return 3;
    default:
      if (*a2 == 999) {
        return 3;
      }
      else {
        return 0;
      }
  }
}

uint64_t sub_7AD35C(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, int a5)
{
  char v10 = (int *)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v54 = a5;
  while (1)
  {
    char v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *a3;
          int v28 = sub_7A79F0(v27, v11);
          uint64_t result = sub_7A79F0(v27, v10);
          if (v28 > (int)result)
          {
            int v29 = *v10;
            int *v10 = *v11;
            *uint64_t v11 = v29;
          }
          break;
        case 3uLL:
          uint64_t result = sub_7AD878(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t result = sub_7ADF74(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          uint64_t result = sub_7AE06C(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v42 = (v15 - 2) >> 1;
        unint64_t v43 = v42 + 1;
        uint64_t v44 = &v10[v42];
        do
        {
          sub_7AE1A0((uint64_t)v10, a3, v14 >> 2, v44--);
          --v43;
        }
        while (v43);
        unint64_t v45 = (unint64_t)v14 >> 2;
        do
          uint64_t result = (uint64_t)sub_7AE330((char *)v10, (uint64_t)a2--, a3, v45);
        while (v45-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    long long v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x201)
    {
      sub_7AD878(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_7AD878(v10, v18, v11, a3);
      char v19 = v11;
      uint64_t v20 = &v10[v17];
      sub_7AD878(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_7AD878(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_7AD878(v20 - 1, v18, &v10[v17 + 1], a3);
      int v21 = *v10;
      int *v10 = *v20;
      *uint64_t v20 = v21;
      uint64_t v11 = v19;
      a5 = v54;
      if (v54) {
        goto LABEL_13;
      }
    }
    uint64_t v22 = *a3;
    int v23 = sub_7A79F0(*a3, v10 - 1);
    if (v23 <= (int)sub_7A79F0(v22, v10))
    {
      uint64_t result = (uint64_t)sub_7AD9F4(v10, a2, a3);
      uint64_t v12 = (int *)result;
      goto LABEL_18;
    }
LABEL_13:
    std::string::value_type v24 = sub_7ADBA0(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_7ADD3C(v10, v24, a3);
    uint64_t v12 = v24 + 1;
    uint64_t result = sub_7ADD3C(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      uint64_t result = sub_7AD35C(v10, v24, a3, -v16, a5 & 1);
      uint64_t v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  std::string::size_type v30 = v10 + 1;
  BOOL v32 = v10 == a2 || v30 == a2;
  if (a5)
  {
    if (!v32)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v10;
      do
      {
        std::string v36 = v34;
        uint64_t v34 = v30;
        uint64_t v37 = *a3;
        int v38 = sub_7A79F0(*a3, v30);
        uint64_t result = sub_7A79F0(v37, v36);
        if (v38 > (int)result)
        {
          int v55 = *v34;
          uint64_t v39 = v33;
          do
          {
            *(int *)((char *)v10 + v39 + 4) = *(int *)((char *)v10 + v39);
            if (!v39)
            {
              uint64_t v35 = v10;
              goto LABEL_43;
            }
            v39 -= 4;
            uint64_t v40 = *a3;
            int v41 = sub_7A79F0(*a3, &v55);
            uint64_t result = sub_7A79F0(v40, (int *)((char *)v10 + v39));
          }
          while (v41 > (int)result);
          uint64_t v35 = (int *)((char *)v10 + v39 + 4);
LABEL_43:
          *uint64_t v35 = v55;
        }
        std::string::size_type v30 = v34 + 1;
        v33 += 4;
      }
      while (v34 + 1 != a2);
    }
  }
  else if (!v32)
  {
    long long v47 = v10 - 1;
    do
    {
      int v48 = v10;
      char v10 = v30;
      uint64_t v49 = *a3;
      int v50 = sub_7A79F0(*a3, v30);
      uint64_t result = sub_7A79F0(v49, v48);
      if (v50 > (int)result)
      {
        int v56 = *v10;
        uint64_t v51 = v47;
        do
        {
          v51[2] = v51[1];
          uint64_t v52 = *a3;
          int v53 = sub_7A79F0(*a3, &v56);
          uint64_t result = sub_7A79F0(v52, v51--);
        }
        while (v53 > (int)result);
        v51[2] = v56;
      }
      std::string::size_type v30 = v10 + 1;
      ++v47;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t sub_7AD878(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  int v9 = sub_7A79F0(*a4, a2);
  int v10 = sub_7A79F0(v8, a1);
  uint64_t v11 = *a4;
  int v12 = sub_7A79F0(*a4, a3);
  int v13 = sub_7A79F0(v11, a2);
  if (v9 > v10)
  {
    int v14 = *a1;
    if (v12 > v13)
    {
      *a1 = *a3;
      *a3 = v14;
      return 1;
    }
    *a1 = *a2;
    *a2 = v14;
    uint64_t v19 = *a4;
    int v20 = sub_7A79F0(*a4, a3);
    if (v20 <= (int)sub_7A79F0(v19, a2)) {
      return 1;
    }
    int v21 = *a2;
    *a2 = *a3;
    *a3 = v21;
    return 2;
  }
  if (v12 > v13)
  {
    int v15 = *a2;
    *a2 = *a3;
    *a3 = v15;
    uint64_t v16 = *a4;
    int v17 = sub_7A79F0(*a4, a2);
    if (v17 <= (int)sub_7A79F0(v16, a1)) {
      return 1;
    }
    int v18 = *a1;
    *a1 = *a2;
    *a2 = v18;
    return 2;
  }
  return 0;
}

int *sub_7AD9F4(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  int v24 = *a1;
  char v6 = a2 - 1;
  uint64_t v7 = *a3;
  int v8 = sub_7A79F0(*a3, &v24);
  if (v8 <= (int)sub_7A79F0(v7, v6))
  {
    int v12 = a1 + 1;
    do
    {
      int v9 = v12;
      if (v12 >= v4) {
        break;
      }
      uint64_t v13 = *a3;
      int v14 = sub_7A79F0(*a3, &v24);
      int v15 = sub_7A79F0(v13, v9);
      int v12 = v9 + 1;
    }
    while (v14 <= v15);
  }
  else
  {
    int v9 = a1;
    do
    {
      ++v9;
      uint64_t v10 = *a3;
      int v11 = sub_7A79F0(*a3, &v24);
    }
    while (v11 <= (int)sub_7A79F0(v10, v9));
  }
  if (v9 < v4)
  {
    do
    {
      --v4;
      uint64_t v16 = *a3;
      int v17 = sub_7A79F0(*a3, &v24);
    }
    while (v17 > (int)sub_7A79F0(v16, v4));
  }
  while (v9 < v4)
  {
    int v18 = *v9;
    int *v9 = *v4;
    *uint64_t v4 = v18;
    do
    {
      ++v9;
      uint64_t v19 = *a3;
      int v20 = sub_7A79F0(*a3, &v24);
    }
    while (v20 <= (int)sub_7A79F0(v19, v9));
    do
    {
      --v4;
      uint64_t v21 = *a3;
      int v22 = sub_7A79F0(*a3, &v24);
    }
    while (v22 > (int)sub_7A79F0(v21, v4));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v24;
  return v9;
}

int *sub_7ADBA0(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  int v23 = *a1;
  do
  {
    ++v6;
    uint64_t v7 = *a3;
    int v8 = sub_7A79F0(*a3, &a1[v6]);
  }
  while (v8 > (int)sub_7A79F0(v7, &v23));
  int v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      --a2;
      uint64_t v13 = *a3;
      int v14 = sub_7A79F0(*a3, a2);
    }
    while (v14 <= (int)sub_7A79F0(v13, &v23));
  }
  else
  {
    do
    {
      --a2;
      uint64_t v11 = *a3;
      int v12 = sub_7A79F0(*a3, a2);
    }
    while (v12 <= (int)sub_7A79F0(v11, &v23));
  }
  if (v9 < a2)
  {
    int v15 = v9;
    uint64_t v16 = a2;
    do
    {
      int v17 = *v15;
      int *v15 = *v16;
      *uint64_t v16 = v17;
      do
      {
        ++v15;
        uint64_t v18 = *a3;
        int v19 = sub_7A79F0(*a3, v15);
      }
      while (v19 > (int)sub_7A79F0(v18, &v23));
      do
      {
        --v16;
        uint64_t v20 = *a3;
        int v21 = sub_7A79F0(*a3, v16);
      }
      while (v21 <= (int)sub_7A79F0(v20, &v23));
    }
    while (v15 < v16);
    uint64_t v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  int *v10 = v23;
  return v10;
}

BOOL sub_7ADD3C(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      uint64_t v9 = *a3;
      int v10 = sub_7A79F0(*a3, a2 - 1);
      if (v10 > (int)sub_7A79F0(v9, a1))
      {
        int v11 = *a1;
        *a1 = *v8;
        *int v8 = v11;
      }
      return 1;
    case 3:
      sub_7AD878(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_7ADF74(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_7AE06C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v12 = a1 + 2;
      sub_7AD878(a1, a1 + 1, a1 + 2, a3);
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v16 = *a3;
    int v17 = sub_7A79F0(*a3, v13);
    if (v17 > (int)sub_7A79F0(v16, v12)) {
      break;
    }
LABEL_13:
    int v12 = v13;
    v14 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
  int v22 = *v13;
  uint64_t v18 = v14;
  do
  {
    *(int *)((char *)a1 + v18 + 12) = *(int *)((char *)a1 + v18 + 8);
    if (v18 == -8)
    {
      *a1 = v22;
      if (++v15 != 8) {
        goto LABEL_13;
      }
      return v13 + 1 == a2;
    }
    int v19 = (int *)((char *)a1 + v18 + 4);
    uint64_t v20 = *a3;
    int v21 = sub_7A79F0(*a3, &v22);
    v18 -= 4;
  }
  while (v21 > (int)sub_7A79F0(v20, v19));
  *(int *)((char *)a1 + v18 + 12) = v22;
  if (++v15 != 8) {
    goto LABEL_13;
  }
  return v13 + 1 == a2;
}

uint64_t sub_7ADF74(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  sub_7AD878(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  int v11 = sub_7A79F0(*a5, a4);
  uint64_t result = sub_7A79F0(v10, a3);
  if (v11 > (int)result)
  {
    int v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a5;
    int v15 = sub_7A79F0(*a5, a3);
    uint64_t result = sub_7A79F0(v14, a2);
    if (v15 > (int)result)
    {
      int v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a5;
      int v18 = sub_7A79F0(v17, a2);
      uint64_t result = sub_7A79F0(v17, a1);
      if (v18 > (int)result)
      {
        int v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_7AE06C(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  sub_7ADF74(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = sub_7A79F0(*a6, a5);
  uint64_t result = sub_7A79F0(v12, a4);
  if (v13 > (int)result)
  {
    int v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a6;
    int v17 = sub_7A79F0(*a6, a4);
    uint64_t result = sub_7A79F0(v16, a3);
    if (v17 > (int)result)
    {
      int v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a6;
      int v20 = sub_7A79F0(*a6, a3);
      uint64_t result = sub_7A79F0(v19, a2);
      if (v20 > (int)result)
      {
        int v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a6;
        int v23 = sub_7A79F0(v22, a2);
        uint64_t result = sub_7A79F0(v22, a1);
        if (v23 > (int)result)
        {
          int v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_7AE1A0(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v28 = v4;
    uint64_t v29 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v26 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v11 = ((uint64_t)a4 - result) >> 1;
      uint64_t v12 = v11 + 1;
      int v13 = (int *)(result + 4 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        uint64_t v15 = *a2;
        int v16 = sub_7A79F0(*a2, (_DWORD *)(result + 4 * (v11 + 1)));
        if (v16 > (int)sub_7A79F0(v15, v13 + 1))
        {
          ++v13;
          uint64_t v12 = v14;
        }
      }
      uint64_t v17 = *a2;
      int v18 = sub_7A79F0(*a2, v13);
      uint64_t result = sub_7A79F0(v17, v7);
      if (v18 <= (int)result)
      {
        int v27 = *v7;
        do
        {
          int v21 = v13;
          *uint64_t v7 = *v13;
          if (v26 < v12) {
            break;
          }
          uint64_t v22 = (2 * v12) | 1;
          int v13 = (int *)(v8 + 4 * v22);
          uint64_t v23 = 2 * v12 + 2;
          if (v23 < a3)
          {
            uint64_t v24 = *a2;
            int v25 = sub_7A79F0(*a2, (_DWORD *)(v8 + 4 * v22));
            if (v25 > (int)sub_7A79F0(v24, v13 + 1))
            {
              ++v13;
              uint64_t v22 = v23;
            }
          }
          uint64_t v19 = *a2;
          int v20 = sub_7A79F0(*a2, v13);
          uint64_t result = sub_7A79F0(v19, &v27);
          uint64_t v7 = v21;
          uint64_t v12 = v22;
        }
        while (v20 <= (int)result);
        *int v21 = v27;
      }
    }
  }
  return result;
}

char *sub_7AE330(char *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    int v25 = result;
    uint64_t v8 = 0;
    int v27 = *(_DWORD *)result;
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    do
    {
      uint64_t v11 = &v10[4 * v8 + 4];
      uint64_t v12 = (2 * v8) | 1;
      uint64_t v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        uint64_t v14 = *a3;
        int v15 = sub_7A79F0(*a3, &v10[4 * v8 + 4]);
        uint64_t result = (char *)sub_7A79F0(v14, (_DWORD *)v11 + 1);
        if (v15 > (int)result)
        {
          v11 += 4;
          uint64_t v12 = v13;
        }
      }
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
      uint64_t v10 = v11;
      uint64_t v8 = v12;
    }
    while (v12 <= v9);
    int v16 = (_DWORD *)(a2 - 4);
    if (v11 == (char *)(a2 - 4))
    {
      *(_DWORD *)uint64_t v11 = v27;
    }
    else
    {
      *(_DWORD *)uint64_t v11 = *v16;
      *int v16 = v27;
      uint64_t v17 = v11 - v25 + 4;
      if (v17 >= 5)
      {
        unint64_t v18 = (((unint64_t)v17 >> 2) - 2) >> 1;
        uint64_t v19 = &v25[4 * v18];
        uint64_t v20 = *a3;
        int v21 = sub_7A79F0(*a3, v19);
        uint64_t result = (char *)sub_7A79F0(v20, v11);
        if (v21 > (int)result)
        {
          int v28 = *(_DWORD *)v11;
          do
          {
            uint64_t v22 = v19;
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v19;
            if (!v18) {
              break;
            }
            unint64_t v18 = (v18 - 1) >> 1;
            uint64_t v19 = &v25[4 * v18];
            uint64_t v23 = *a3;
            int v24 = sub_7A79F0(*a3, v19);
            uint64_t result = (char *)sub_7A79F0(v23, &v28);
            uint64_t v11 = v22;
          }
          while (v24 > (int)result);
          *(_DWORD *)uint64_t v22 = v28;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_7AE4E0(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int64_t v26 = (void *)(a1 + 16);
  int v15 = (unsigned __int8 *)operator new(0x40uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = v11;
  int v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)int v27 = 0;
  *((void *)v15 + 6) = 0;
  *((void *)v15 + 7) = 0;
  *((void *)v15 + 5) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    BOOL v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)int v15 = *v32;
LABEL_89:
      *BOOL v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        BOOL v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        BOOL v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      BOOL v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)int v15 = *v26;
  *int64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    BOOL v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_7AE8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7AE910(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, int a5)
{
  unint64_t v10 = (int *)result;
LABEL_2:
  unint64_t v11 = a2 - 1;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v54 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *a3;
          int v28 = sub_7AA460(v27, v11);
          uint64_t result = sub_7AA460(v27, v10);
          if (v28 > (int)result)
          {
            int v29 = *v10;
            int *v10 = *v11;
            *unint64_t v11 = v29;
          }
          break;
        case 3uLL:
          uint64_t result = sub_7AEE2C(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t result = sub_7AF528(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          uint64_t result = sub_7AF620(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v42 = (v15 - 2) >> 1;
        unint64_t v43 = v42 + 1;
        uint64_t v44 = &v10[v42];
        do
        {
          sub_7AF754((uint64_t)v10, a3, v14 >> 2, v44--);
          --v43;
        }
        while (v43);
        unint64_t v45 = (unint64_t)v14 >> 2;
        do
          uint64_t result = (uint64_t)sub_7AF8E4((char *)v10, (uint64_t)a2--, a3, v45);
        while (v45-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x201)
    {
      sub_7AEE2C(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_7AEE2C(v10, v18, v11, a3);
      uint64_t v19 = v11;
      uint64_t v20 = &v10[v17];
      sub_7AEE2C(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_7AEE2C(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_7AEE2C(v20 - 1, v18, &v10[v17 + 1], a3);
      int v21 = *v10;
      int *v10 = *v20;
      *uint64_t v20 = v21;
      unint64_t v11 = v19;
      a5 = v54;
      if (v54) {
        goto LABEL_13;
      }
    }
    uint64_t v22 = *a3;
    int v23 = sub_7AA460(*a3, v10 - 1);
    if (v23 <= (int)sub_7AA460(v22, v10))
    {
      uint64_t result = (uint64_t)sub_7AEFA8(v10, a2, a3);
      unint64_t v12 = (int *)result;
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v24 = sub_7AF154(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_7AF2F0(v10, v24, a3);
    unint64_t v12 = v24 + 1;
    uint64_t result = sub_7AF2F0(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      uint64_t result = sub_7AE910(v10, v24, a3, -v16, a5 & 1);
      unint64_t v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  float v30 = v10 + 1;
  BOOL v32 = v10 == a2 || v30 == a2;
  if (a5)
  {
    if (!v32)
    {
      uint64_t v33 = 0;
      unint64_t v34 = v10;
      do
      {
        std::string v36 = v34;
        unint64_t v34 = v30;
        uint64_t v37 = *a3;
        int v38 = sub_7AA460(*a3, v30);
        uint64_t result = sub_7AA460(v37, v36);
        if (v38 > (int)result)
        {
          int v55 = *v34;
          uint64_t v39 = v33;
          do
          {
            *(int *)((char *)v10 + v39 + 4) = *(int *)((char *)v10 + v39);
            if (!v39)
            {
              unint64_t v35 = v10;
              goto LABEL_43;
            }
            v39 -= 4;
            uint64_t v40 = *a3;
            int v41 = sub_7AA460(*a3, &v55);
            uint64_t result = sub_7AA460(v40, (int *)((char *)v10 + v39));
          }
          while (v41 > (int)result);
          unint64_t v35 = (int *)((char *)v10 + v39 + 4);
LABEL_43:
          *unint64_t v35 = v55;
        }
        float v30 = v34 + 1;
        v33 += 4;
      }
      while (v34 + 1 != a2);
    }
  }
  else if (!v32)
  {
    long long v47 = v10 - 1;
    do
    {
      int v48 = v10;
      unint64_t v10 = v30;
      uint64_t v49 = *a3;
      int v50 = sub_7AA460(*a3, v30);
      uint64_t result = sub_7AA460(v49, v48);
      if (v50 > (int)result)
      {
        int v56 = *v10;
        uint64_t v51 = v47;
        do
        {
          v51[2] = v51[1];
          uint64_t v52 = *a3;
          int v53 = sub_7AA460(*a3, &v56);
          uint64_t result = sub_7AA460(v52, v51--);
        }
        while (v53 > (int)result);
        v51[2] = v56;
      }
      float v30 = v10 + 1;
      ++v47;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t sub_7AEE2C(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  int v9 = sub_7AA460(*a4, a2);
  int v10 = sub_7AA460(v8, a1);
  uint64_t v11 = *a4;
  int v12 = sub_7AA460(*a4, a3);
  int v13 = sub_7AA460(v11, a2);
  if (v9 > v10)
  {
    int v14 = *a1;
    if (v12 > v13)
    {
      *a1 = *a3;
      *a3 = v14;
      return 1;
    }
    *a1 = *a2;
    *a2 = v14;
    uint64_t v19 = *a4;
    int v20 = sub_7AA460(*a4, a3);
    if (v20 <= (int)sub_7AA460(v19, a2)) {
      return 1;
    }
    int v21 = *a2;
    *a2 = *a3;
    *a3 = v21;
    return 2;
  }
  if (v12 > v13)
  {
    int v15 = *a2;
    *a2 = *a3;
    *a3 = v15;
    uint64_t v16 = *a4;
    int v17 = sub_7AA460(*a4, a2);
    if (v17 <= (int)sub_7AA460(v16, a1)) {
      return 1;
    }
    int v18 = *a1;
    *a1 = *a2;
    *a2 = v18;
    return 2;
  }
  return 0;
}

int *sub_7AEFA8(int *a1, int *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v24 = *a1;
  char v6 = a2 - 1;
  uint64_t v7 = *a3;
  int v8 = sub_7AA460(*a3, &v24);
  if (v8 <= (int)sub_7AA460(v7, v6))
  {
    int v12 = a1 + 1;
    do
    {
      int v9 = v12;
      if (v12 >= v4) {
        break;
      }
      uint64_t v13 = *a3;
      int v14 = sub_7AA460(*a3, &v24);
      int v15 = sub_7AA460(v13, v9);
      int v12 = v9 + 1;
    }
    while (v14 <= v15);
  }
  else
  {
    int v9 = a1;
    do
    {
      ++v9;
      uint64_t v10 = *a3;
      int v11 = sub_7AA460(*a3, &v24);
    }
    while (v11 <= (int)sub_7AA460(v10, v9));
  }
  if (v9 < v4)
  {
    do
    {
      --v4;
      uint64_t v16 = *a3;
      int v17 = sub_7AA460(*a3, &v24);
    }
    while (v17 > (int)sub_7AA460(v16, v4));
  }
  while (v9 < v4)
  {
    int v18 = *v9;
    int *v9 = *v4;
    *unint64_t v4 = v18;
    do
    {
      ++v9;
      uint64_t v19 = *a3;
      int v20 = sub_7AA460(*a3, &v24);
    }
    while (v20 <= (int)sub_7AA460(v19, v9));
    do
    {
      --v4;
      uint64_t v21 = *a3;
      int v22 = sub_7AA460(*a3, &v24);
    }
    while (v22 > (int)sub_7AA460(v21, v4));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v24;
  return v9;
}

int *sub_7AF154(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  int v23 = *a1;
  do
  {
    ++v6;
    uint64_t v7 = *a3;
    int v8 = sub_7AA460(*a3, &a1[v6]);
  }
  while (v8 > (int)sub_7AA460(v7, &v23));
  int v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      --a2;
      uint64_t v13 = *a3;
      int v14 = sub_7AA460(*a3, a2);
    }
    while (v14 <= (int)sub_7AA460(v13, &v23));
  }
  else
  {
    do
    {
      --a2;
      uint64_t v11 = *a3;
      int v12 = sub_7AA460(*a3, a2);
    }
    while (v12 <= (int)sub_7AA460(v11, &v23));
  }
  if (v9 < a2)
  {
    int v15 = v9;
    uint64_t v16 = a2;
    do
    {
      int v17 = *v15;
      int *v15 = *v16;
      *uint64_t v16 = v17;
      do
      {
        ++v15;
        uint64_t v18 = *a3;
        int v19 = sub_7AA460(*a3, v15);
      }
      while (v19 > (int)sub_7AA460(v18, &v23));
      do
      {
        --v16;
        uint64_t v20 = *a3;
        int v21 = sub_7AA460(*a3, v16);
      }
      while (v21 <= (int)sub_7AA460(v20, &v23));
    }
    while (v15 < v16);
    uint64_t v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  int *v10 = v23;
  return v10;
}

BOOL sub_7AF2F0(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      uint64_t v9 = *a3;
      int v10 = sub_7AA460(*a3, a2 - 1);
      if (v10 > (int)sub_7AA460(v9, a1))
      {
        int v11 = *a1;
        *a1 = *v8;
        *int v8 = v11;
      }
      return 1;
    case 3:
      sub_7AEE2C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_7AF528(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_7AF620(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v12 = a1 + 2;
      sub_7AEE2C(a1, a1 + 1, a1 + 2, a3);
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v16 = *a3;
    int v17 = sub_7AA460(*a3, v13);
    if (v17 > (int)sub_7AA460(v16, v12)) {
      break;
    }
LABEL_13:
    int v12 = v13;
    v14 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
  int v22 = *v13;
  uint64_t v18 = v14;
  do
  {
    *(int *)((char *)a1 + v18 + 12) = *(int *)((char *)a1 + v18 + 8);
    if (v18 == -8)
    {
      *a1 = v22;
      if (++v15 != 8) {
        goto LABEL_13;
      }
      return v13 + 1 == a2;
    }
    int v19 = (int *)((char *)a1 + v18 + 4);
    uint64_t v20 = *a3;
    int v21 = sub_7AA460(*a3, &v22);
    v18 -= 4;
  }
  while (v21 > (int)sub_7AA460(v20, v19));
  *(int *)((char *)a1 + v18 + 12) = v22;
  if (++v15 != 8) {
    goto LABEL_13;
  }
  return v13 + 1 == a2;
}

uint64_t sub_7AF528(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  sub_7AEE2C(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  int v11 = sub_7AA460(*a5, a4);
  uint64_t result = sub_7AA460(v10, a3);
  if (v11 > (int)result)
  {
    int v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a5;
    int v15 = sub_7AA460(*a5, a3);
    uint64_t result = sub_7AA460(v14, a2);
    if (v15 > (int)result)
    {
      int v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a5;
      int v18 = sub_7AA460(v17, a2);
      uint64_t result = sub_7AA460(v17, a1);
      if (v18 > (int)result)
      {
        int v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_7AF620(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  sub_7AF528(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = sub_7AA460(*a6, a5);
  uint64_t result = sub_7AA460(v12, a4);
  if (v13 > (int)result)
  {
    int v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a6;
    int v17 = sub_7AA460(*a6, a4);
    uint64_t result = sub_7AA460(v16, a3);
    if (v17 > (int)result)
    {
      int v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a6;
      int v20 = sub_7AA460(*a6, a3);
      uint64_t result = sub_7AA460(v19, a2);
      if (v20 > (int)result)
      {
        int v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a6;
        int v23 = sub_7AA460(v22, a2);
        uint64_t result = sub_7AA460(v22, a1);
        if (v23 > (int)result)
        {
          int v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_7AF754(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v28 = v4;
    uint64_t v29 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v26 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v11 = ((uint64_t)a4 - result) >> 1;
      uint64_t v12 = v11 + 1;
      int v13 = (int *)(result + 4 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        uint64_t v15 = *a2;
        int v16 = sub_7AA460(*a2, (_DWORD *)(result + 4 * (v11 + 1)));
        if (v16 > (int)sub_7AA460(v15, v13 + 1))
        {
          ++v13;
          uint64_t v12 = v14;
        }
      }
      uint64_t v17 = *a2;
      int v18 = sub_7AA460(*a2, v13);
      uint64_t result = sub_7AA460(v17, v7);
      if (v18 <= (int)result)
      {
        int v27 = *v7;
        do
        {
          int v21 = v13;
          *uint64_t v7 = *v13;
          if (v26 < v12) {
            break;
          }
          uint64_t v22 = (2 * v12) | 1;
          int v13 = (int *)(v8 + 4 * v22);
          uint64_t v23 = 2 * v12 + 2;
          if (v23 < a3)
          {
            uint64_t v24 = *a2;
            int v25 = sub_7AA460(*a2, (_DWORD *)(v8 + 4 * v22));
            if (v25 > (int)sub_7AA460(v24, v13 + 1))
            {
              ++v13;
              uint64_t v22 = v23;
            }
          }
          uint64_t v19 = *a2;
          int v20 = sub_7AA460(*a2, v13);
          uint64_t result = sub_7AA460(v19, &v27);
          uint64_t v7 = v21;
          uint64_t v12 = v22;
        }
        while (v20 <= (int)result);
        *int v21 = v27;
      }
    }
  }
  return result;
}

char *sub_7AF8E4(char *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    int v25 = result;
    uint64_t v8 = 0;
    int v27 = *(_DWORD *)result;
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    do
    {
      uint64_t v11 = &v10[4 * v8 + 4];
      uint64_t v12 = (2 * v8) | 1;
      uint64_t v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        uint64_t v14 = *a3;
        int v15 = sub_7AA460(*a3, &v10[4 * v8 + 4]);
        uint64_t result = (char *)sub_7AA460(v14, (_DWORD *)v11 + 1);
        if (v15 > (int)result)
        {
          v11 += 4;
          uint64_t v12 = v13;
        }
      }
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
      uint64_t v10 = v11;
      uint64_t v8 = v12;
    }
    while (v12 <= v9);
    int v16 = (_DWORD *)(a2 - 4);
    if (v11 == (char *)(a2 - 4))
    {
      *(_DWORD *)uint64_t v11 = v27;
    }
    else
    {
      *(_DWORD *)uint64_t v11 = *v16;
      *int v16 = v27;
      uint64_t v17 = v11 - v25 + 4;
      if (v17 >= 5)
      {
        unint64_t v18 = (((unint64_t)v17 >> 2) - 2) >> 1;
        uint64_t v19 = &v25[4 * v18];
        uint64_t v20 = *a3;
        int v21 = sub_7AA460(*a3, v19);
        uint64_t result = (char *)sub_7AA460(v20, v11);
        if (v21 > (int)result)
        {
          int v28 = *(_DWORD *)v11;
          do
          {
            uint64_t v22 = v19;
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v19;
            if (!v18) {
              break;
            }
            unint64_t v18 = (v18 - 1) >> 1;
            uint64_t v19 = &v25[4 * v18];
            uint64_t v23 = *a3;
            int v24 = sub_7AA460(*a3, v19);
            uint64_t result = (char *)sub_7AA460(v23, &v28);
            uint64_t v11 = v22;
          }
          while (v24 > (int)result);
          *(_DWORD *)uint64_t v22 = v28;
        }
      }
    }
  }
  return result;
}

uint64_t sub_7AFA94(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v54 = a5;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 2;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = *a3;
          int v28 = sub_7AD23C(v27, v11);
          uint64_t result = sub_7AD23C(v27, v10);
          if (v28 > (int)result)
          {
            int v29 = *v10;
            int *v10 = *v11;
            *uint64_t v11 = v29;
          }
          break;
        case 3uLL:
          uint64_t result = sub_7AFFB0(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t result = sub_7B06AC(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          uint64_t result = sub_7B07A4(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v42 = (v15 - 2) >> 1;
        unint64_t v43 = v42 + 1;
        uint64_t v44 = &v10[v42];
        do
        {
          sub_7B08D8((uint64_t)v10, a3, v14 >> 2, v44--);
          --v43;
        }
        while (v43);
        unint64_t v45 = (unint64_t)v14 >> 2;
        do
          uint64_t result = (uint64_t)sub_7B0A68((char *)v10, (uint64_t)a2--, a3, v45);
        while (v45-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x201)
    {
      sub_7AFFB0(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_7AFFB0(v10, v18, v11, a3);
      uint64_t v19 = v11;
      uint64_t v20 = &v10[v17];
      sub_7AFFB0(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_7AFFB0(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_7AFFB0(v20 - 1, v18, &v10[v17 + 1], a3);
      int v21 = *v10;
      int *v10 = *v20;
      *uint64_t v20 = v21;
      uint64_t v11 = v19;
      a5 = v54;
      if (v54) {
        goto LABEL_13;
      }
    }
    uint64_t v22 = *a3;
    int v23 = sub_7AD23C(*a3, v10 - 1);
    if (v23 <= (int)sub_7AD23C(v22, v10))
    {
      uint64_t result = (uint64_t)sub_7B012C(v10, a2, a3);
      uint64_t v12 = (int *)result;
      goto LABEL_18;
    }
LABEL_13:
    int v24 = sub_7B02D8(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_7B0474(v10, v24, a3);
    uint64_t v12 = v24 + 1;
    uint64_t result = sub_7B0474(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      uint64_t result = sub_7AFA94(v10, v24, a3, -v16, a5 & 1);
      uint64_t v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  uint64_t v30 = v10 + 1;
  BOOL v32 = v10 == a2 || v30 == a2;
  if (a5)
  {
    if (!v32)
    {
      uint64_t v33 = 0;
      unint64_t v34 = v10;
      do
      {
        std::string v36 = v34;
        unint64_t v34 = v30;
        uint64_t v37 = *a3;
        int v38 = sub_7AD23C(*a3, v30);
        uint64_t result = sub_7AD23C(v37, v36);
        if (v38 > (int)result)
        {
          int v55 = *v34;
          uint64_t v39 = v33;
          do
          {
            *(int *)((char *)v10 + v39 + 4) = *(int *)((char *)v10 + v39);
            if (!v39)
            {
              unint64_t v35 = v10;
              goto LABEL_43;
            }
            v39 -= 4;
            uint64_t v40 = *a3;
            int v41 = sub_7AD23C(*a3, &v55);
            uint64_t result = sub_7AD23C(v40, (int *)((char *)v10 + v39));
          }
          while (v41 > (int)result);
          unint64_t v35 = (int *)((char *)v10 + v39 + 4);
LABEL_43:
          *unint64_t v35 = v55;
        }
        uint64_t v30 = v34 + 1;
        v33 += 4;
      }
      while (v34 + 1 != a2);
    }
  }
  else if (!v32)
  {
    long long v47 = v10 - 1;
    do
    {
      int v48 = v10;
      uint64_t v10 = v30;
      uint64_t v49 = *a3;
      int v50 = sub_7AD23C(*a3, v30);
      uint64_t result = sub_7AD23C(v49, v48);
      if (v50 > (int)result)
      {
        int v56 = *v10;
        uint64_t v51 = v47;
        do
        {
          v51[2] = v51[1];
          uint64_t v52 = *a3;
          int v53 = sub_7AD23C(*a3, &v56);
          uint64_t result = sub_7AD23C(v52, v51--);
        }
        while (v53 > (int)result);
        v51[2] = v56;
      }
      uint64_t v30 = v10 + 1;
      ++v47;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t sub_7AFFB0(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  int v9 = sub_7AD23C(*a4, a2);
  int v10 = sub_7AD23C(v8, a1);
  uint64_t v11 = *a4;
  int v12 = sub_7AD23C(*a4, a3);
  int v13 = sub_7AD23C(v11, a2);
  if (v9 > v10)
  {
    int v14 = *a1;
    if (v12 > v13)
    {
      *a1 = *a3;
      *a3 = v14;
      return 1;
    }
    *a1 = *a2;
    *a2 = v14;
    uint64_t v19 = *a4;
    int v20 = sub_7AD23C(*a4, a3);
    if (v20 <= (int)sub_7AD23C(v19, a2)) {
      return 1;
    }
    int v21 = *a2;
    *a2 = *a3;
    *a3 = v21;
    return 2;
  }
  if (v12 > v13)
  {
    int v15 = *a2;
    *a2 = *a3;
    *a3 = v15;
    uint64_t v16 = *a4;
    int v17 = sub_7AD23C(*a4, a2);
    if (v17 <= (int)sub_7AD23C(v16, a1)) {
      return 1;
    }
    int v18 = *a1;
    *a1 = *a2;
    *a2 = v18;
    return 2;
  }
  return 0;
}

int *sub_7B012C(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  int v24 = *a1;
  char v6 = a2 - 1;
  uint64_t v7 = *a3;
  int v8 = sub_7AD23C(*a3, &v24);
  if (v8 <= (int)sub_7AD23C(v7, v6))
  {
    int v12 = a1 + 1;
    do
    {
      int v9 = v12;
      if (v12 >= v4) {
        break;
      }
      uint64_t v13 = *a3;
      int v14 = sub_7AD23C(*a3, &v24);
      int v15 = sub_7AD23C(v13, v9);
      int v12 = v9 + 1;
    }
    while (v14 <= v15);
  }
  else
  {
    int v9 = a1;
    do
    {
      ++v9;
      uint64_t v10 = *a3;
      int v11 = sub_7AD23C(*a3, &v24);
    }
    while (v11 <= (int)sub_7AD23C(v10, v9));
  }
  if (v9 < v4)
  {
    do
    {
      --v4;
      uint64_t v16 = *a3;
      int v17 = sub_7AD23C(*a3, &v24);
    }
    while (v17 > (int)sub_7AD23C(v16, v4));
  }
  while (v9 < v4)
  {
    int v18 = *v9;
    int *v9 = *v4;
    *uint64_t v4 = v18;
    do
    {
      ++v9;
      uint64_t v19 = *a3;
      int v20 = sub_7AD23C(*a3, &v24);
    }
    while (v20 <= (int)sub_7AD23C(v19, v9));
    do
    {
      --v4;
      uint64_t v21 = *a3;
      int v22 = sub_7AD23C(*a3, &v24);
    }
    while (v22 > (int)sub_7AD23C(v21, v4));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v24;
  return v9;
}

int *sub_7B02D8(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  int v23 = *a1;
  do
  {
    ++v6;
    uint64_t v7 = *a3;
    int v8 = sub_7AD23C(*a3, &a1[v6]);
  }
  while (v8 > (int)sub_7AD23C(v7, &v23));
  int v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      --a2;
      uint64_t v13 = *a3;
      int v14 = sub_7AD23C(*a3, a2);
    }
    while (v14 <= (int)sub_7AD23C(v13, &v23));
  }
  else
  {
    do
    {
      --a2;
      uint64_t v11 = *a3;
      int v12 = sub_7AD23C(*a3, a2);
    }
    while (v12 <= (int)sub_7AD23C(v11, &v23));
  }
  if (v9 < a2)
  {
    int v15 = v9;
    uint64_t v16 = a2;
    do
    {
      int v17 = *v15;
      int *v15 = *v16;
      *uint64_t v16 = v17;
      do
      {
        ++v15;
        uint64_t v18 = *a3;
        int v19 = sub_7AD23C(*a3, v15);
      }
      while (v19 > (int)sub_7AD23C(v18, &v23));
      do
      {
        --v16;
        uint64_t v20 = *a3;
        int v21 = sub_7AD23C(*a3, v16);
      }
      while (v21 <= (int)sub_7AD23C(v20, &v23));
    }
    while (v15 < v16);
    uint64_t v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  int *v10 = v23;
  return v10;
}

BOOL sub_7B0474(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      uint64_t v9 = *a3;
      int v10 = sub_7AD23C(*a3, a2 - 1);
      if (v10 > (int)sub_7AD23C(v9, a1))
      {
        int v11 = *a1;
        *a1 = *v8;
        *int v8 = v11;
      }
      return 1;
    case 3:
      sub_7AFFB0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_7B06AC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_7B07A4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      int v12 = a1 + 2;
      sub_7AFFB0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v16 = *a3;
    int v17 = sub_7AD23C(*a3, v13);
    if (v17 > (int)sub_7AD23C(v16, v12)) {
      break;
    }
LABEL_13:
    int v12 = v13;
    v14 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
  int v22 = *v13;
  uint64_t v18 = v14;
  do
  {
    *(int *)((char *)a1 + v18 + 12) = *(int *)((char *)a1 + v18 + 8);
    if (v18 == -8)
    {
      *a1 = v22;
      if (++v15 != 8) {
        goto LABEL_13;
      }
      return v13 + 1 == a2;
    }
    int v19 = (int *)((char *)a1 + v18 + 4);
    uint64_t v20 = *a3;
    int v21 = sub_7AD23C(*a3, &v22);
    v18 -= 4;
  }
  while (v21 > (int)sub_7AD23C(v20, v19));
  *(int *)((char *)a1 + v18 + 12) = v22;
  if (++v15 != 8) {
    goto LABEL_13;
  }
  return v13 + 1 == a2;
}

uint64_t sub_7B06AC(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  sub_7AFFB0(a1, a2, a3, a5);
  uint64_t v10 = *a5;
  int v11 = sub_7AD23C(*a5, a4);
  uint64_t result = sub_7AD23C(v10, a3);
  if (v11 > (int)result)
  {
    int v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a5;
    int v15 = sub_7AD23C(*a5, a3);
    uint64_t result = sub_7AD23C(v14, a2);
    if (v15 > (int)result)
    {
      int v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a5;
      int v18 = sub_7AD23C(v17, a2);
      uint64_t result = sub_7AD23C(v17, a1);
      if (v18 > (int)result)
      {
        int v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t sub_7B07A4(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  sub_7B06AC(a1, a2, a3, a4, a6);
  uint64_t v12 = *a6;
  int v13 = sub_7AD23C(*a6, a5);
  uint64_t result = sub_7AD23C(v12, a4);
  if (v13 > (int)result)
  {
    int v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a6;
    int v17 = sub_7AD23C(*a6, a4);
    uint64_t result = sub_7AD23C(v16, a3);
    if (v17 > (int)result)
    {
      int v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a6;
      int v20 = sub_7AD23C(*a6, a3);
      uint64_t result = sub_7AD23C(v19, a2);
      if (v20 > (int)result)
      {
        int v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a6;
        int v23 = sub_7AD23C(v22, a2);
        uint64_t result = sub_7AD23C(v22, a1);
        if (v23 > (int)result)
        {
          int v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_7B08D8(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v28 = v4;
    uint64_t v29 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v26 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v11 = ((uint64_t)a4 - result) >> 1;
      uint64_t v12 = v11 + 1;
      int v13 = (int *)(result + 4 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        uint64_t v15 = *a2;
        int v16 = sub_7AD23C(*a2, (_DWORD *)(result + 4 * (v11 + 1)));
        if (v16 > (int)sub_7AD23C(v15, v13 + 1))
        {
          ++v13;
          uint64_t v12 = v14;
        }
      }
      uint64_t v17 = *a2;
      int v18 = sub_7AD23C(*a2, v13);
      uint64_t result = sub_7AD23C(v17, v7);
      if (v18 <= (int)result)
      {
        int v27 = *v7;
        do
        {
          int v21 = v13;
          *uint64_t v7 = *v13;
          if (v26 < v12) {
            break;
          }
          uint64_t v22 = (2 * v12) | 1;
          int v13 = (int *)(v8 + 4 * v22);
          uint64_t v23 = 2 * v12 + 2;
          if (v23 < a3)
          {
            uint64_t v24 = *a2;
            int v25 = sub_7AD23C(*a2, (_DWORD *)(v8 + 4 * v22));
            if (v25 > (int)sub_7AD23C(v24, v13 + 1))
            {
              ++v13;
              uint64_t v22 = v23;
            }
          }
          uint64_t v19 = *a2;
          int v20 = sub_7AD23C(*a2, v13);
          uint64_t result = sub_7AD23C(v19, &v27);
          uint64_t v7 = v21;
          uint64_t v12 = v22;
        }
        while (v20 <= (int)result);
        *int v21 = v27;
      }
    }
  }
  return result;
}

char *sub_7B0A68(char *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v5;
    int v25 = result;
    uint64_t v8 = 0;
    int v27 = *(_DWORD *)result;
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    do
    {
      uint64_t v11 = &v10[4 * v8 + 4];
      uint64_t v12 = (2 * v8) | 1;
      uint64_t v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        uint64_t v14 = *a3;
        int v15 = sub_7AD23C(*a3, &v10[4 * v8 + 4]);
        uint64_t result = (char *)sub_7AD23C(v14, (_DWORD *)v11 + 1);
        if (v15 > (int)result)
        {
          v11 += 4;
          uint64_t v12 = v13;
        }
      }
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
      uint64_t v10 = v11;
      uint64_t v8 = v12;
    }
    while (v12 <= v9);
    int v16 = (_DWORD *)(a2 - 4);
    if (v11 == (char *)(a2 - 4))
    {
      *(_DWORD *)uint64_t v11 = v27;
    }
    else
    {
      *(_DWORD *)uint64_t v11 = *v16;
      *int v16 = v27;
      uint64_t v17 = v11 - v25 + 4;
      if (v17 >= 5)
      {
        unint64_t v18 = (((unint64_t)v17 >> 2) - 2) >> 1;
        uint64_t v19 = &v25[4 * v18];
        uint64_t v20 = *a3;
        int v21 = sub_7AD23C(*a3, v19);
        uint64_t result = (char *)sub_7AD23C(v20, v11);
        if (v21 > (int)result)
        {
          int v28 = *(_DWORD *)v11;
          do
          {
            uint64_t v22 = v19;
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v19;
            if (!v18) {
              break;
            }
            unint64_t v18 = (v18 - 1) >> 1;
            uint64_t v19 = &v25[4 * v18];
            uint64_t v23 = *a3;
            int v24 = sub_7AD23C(*a3, v19);
            uint64_t result = (char *)sub_7AD23C(v23, &v28);
            uint64_t v11 = v22;
          }
          while (v24 > (int)result);
          *(_DWORD *)uint64_t v22 = v28;
        }
      }
    }
  }
  return result;
}

double sub_7B0C18()
{
  byte_25B8817 = 1;
  word_25B8800 = 65;
  byte_25B882F = 1;
  word_25B8818 = 65;
  strcpy(&byte_25B8847, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25B8830, "\x1B\\toi=lhp\\"");
  byte_25B885F = 11;
  qword_25B8860 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_25B8868 = xmmword_20B9250;
  strcpy((char *)qword_25B8860, "\x1B\\toi=x-sampa-internal\\"");
  byte_25B888F = 13;
  strcpy((char *)&qword_25B8878, "\x1B\\tn=address\\"");
  strcpy(&byte_25B88A7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25B8890, "\x1B\\tn=nav\\"");
  byte_25B88BF = 12;
  byte_25B88D7 = 7;
  strcpy((char *)&dword_25B88C0, "\x1B\\lang=");
  byte_25B88EF = 1;
  word_25B88D8 = 92;
  byte_25B8907 = 4;
  strcpy((char *)&qword_25B88F0, "DEV:");
  byte_25B891F = 8;
  strcpy((char *)&qword_25B8908, "Continue");
  byte_25B8937 = 11;
  strcpy((char *)&qword_25B8920, "Start_Route");
  byte_25B894F = 14;
  strcpy((char *)&qword_25B8938, "Continue_Route");
  byte_25B8967 = 12;
  strcpy((char *)&qword_25B8950, "Resume_Route");
  byte_25B897F = 18;
  strcpy((char *)&xmmword_25B8968, "Start_Route_U_Turn");
  byte_25B8997 = 7;
  strcpy((char *)&dword_25B8980, "_U_Turn");
  qword_25B89A8 = 0x1300000000000000;
  qmemcpy(&unk_25B89B0, "Continue_Route", 14);
  dword_25B89A0 = 1702131055;
  qword_25B8998 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25B89A4 + 3) = 1852994900;
  dword_25B89A4 = 1415533919;
  qword_25B89C0 = 0x1500000000000000;
  strcpy(byte_25B89C8, "Left_Turn");
  unk_25B89BE = 1415533919;
  *(_DWORD *)((char *)&qword_25B89C0 + 1) = 1852994900;
  strcpy(&byte_25B89DF, "\tRight_Turn");
  strcpy(&byte_25B89F7, "\nLeft_Turn_At_End");
  byte_25B8A0F = 16;
  byte_25B8A27 = 17;
  strcpy((char *)&xmmword_25B8A10, "Right_Turn_At_End");
  byte_25B8A3F = 15;
  strcpy((char *)&qword_25B8A28, "Sharp_Left_Turn");
  byte_25B8A57 = 16;
  strcpy((char *)&xmmword_25B8A40, "Sharp_Right_Turn");
  byte_25B8A6F = 16;
  strcpy((char *)&xmmword_25B8A58, "Slight_Left_Turn");
  byte_25B8A87 = 17;
  strcpy((char *)&xmmword_25B8A70, "Slight_Right_Turn");
  strcpy(&byte_25B8A9F, "\tKeep_Right");
  strcpy((char *)&qword_25B8A88, "Keep_Left");
  strcpy(&byte_25B8AB7, "\nU_Turn");
  byte_25B8ACF = 6;
  byte_25B8AE7 = 14;
  strcpy((char *)&qword_25B8AD0, "Walking_U_Turn");
  byte_25B8AFF = 20;
  strcpy((char *)&xmmword_25B8AE8, "U_Turn_When_Possible");
  byte_25B8B17 = 20;
  strcpy((char *)&xmmword_25B8B00, "U_Turn_At_Roundabout");
  byte_25B8B2F = 11;
  strcpy((char *)&qword_25B8B18, "Enter_Ferry");
  strcpy(&byte_25B8B47, "\nChange_Ferry");
  strcpy((char *)&qword_25B8B30, "Exit_Ferry");
  strcpy((char *)&xmmword_25B8B60, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25B8B78, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25B8B90, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25B8BA8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25B8BC0, "End_Of_Navigation");
  strcpy((char *)&qword_25B8BD8, "Destination");
  strcpy((char *)&xmmword_25B8BF0, "Destination_On_left");
  strcpy((char *)&xmmword_25B8C08, "Destination_On_Right");
  strcpy((char *)&xmmword_25B8C50, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25B8C98, "Next_Stop_On_Right");
  byte_25B8B5F = 12;
  byte_25B8B77 = 21;
  byte_25B8B8F = 20;
  strcpy((char *)&xmmword_25B8CC8, "Waypoint_Stop_On_Left");
  byte_25B8BA7 = 22;
  byte_25B8BBF = 17;
  byte_25B8BD7 = 17;
  byte_25B8BEF = 11;
  byte_25B8C07 = 19;
  byte_25B8C1F = 20;
  strcpy(&byte_25B8C37, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25B8C20, "First_Stop");
  byte_25B8C4F = 18;
  byte_25B8C67 = 19;
  strcpy(&byte_25B8C7F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25B8CB0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25B8CE0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25B8CF8, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25B8C68, "Next_Stop");
  byte_25B8C97 = 17;
  byte_25B8CAF = 18;
  byte_25B8CC7 = 13;
  byte_25B8CDF = 21;
  byte_25B8CF7 = 22;
  byte_25B8D0F = 11;
  byte_25B8D27 = 16;
  strcpy((char *)&xmmword_25B8D10, "Enter_Roundabout");
  qword_25B8D28 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_25B8D30 = xmmword_20B91C0;
  strcpy((char *)qword_25B8D28, "Walking_Enter_Roundabout");
  byte_25B8D57 = 16;
  strcpy((char *)&xmmword_25B8D40, "Leave_Roundabout");
  byte_25B8D6F = 21;
  strcpy((char *)&xmmword_25B8D58, "Roundabout_First_Exit");
  byte_25B8D87 = 22;
  strcpy((char *)&xmmword_25B8D70, "Roundabout_Second_Exit");
  byte_25B8D9F = 21;
  strcpy((char *)&xmmword_25B8D88, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25B8DA0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25B8DB6) = 22;
  byte_25B8DCF = 21;
  strcpy((char *)&xmmword_25B8DB8, "Roundabout_Fifth_Exit");
  byte_25B8DE7 = 21;
  strcpy((char *)&xmmword_25B8DD0, "Roundabout_Sixth_Exit");
  qword_25B8DE8 = (uint64_t)operator new(0x19uLL);
  xmmword_25B8DF0 = xmmword_20B9250;
  strcpy((char *)qword_25B8DE8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25B8E00, "Roundabout_Eighth_Exit");
  HIBYTE(word_25B8E16) = 22;
  byte_25B8E2F = 21;
  strcpy((char *)&xmmword_25B8E18, "Roundabout_Ninth_Exit");
  byte_25B8E47 = 21;
  strcpy((char *)&xmmword_25B8E30, "Roundabout_Tenth_Exit");
  qword_25B8E48 = (uint64_t)operator new(0x20uLL);
  xmmword_25B8E50 = xmmword_20B91C0;
  strcpy((char *)qword_25B8E48, "Roundabout_Eleventh_Exit");
  qword_25B8E60 = (uint64_t)operator new(0x19uLL);
  unk_25B8E68 = xmmword_20B9250;
  strcpy((char *)qword_25B8E60, "Roundabout_Twelfth_Exit");
  qword_25B8E78 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25B8E80 = xmmword_20B5EB0;
  strcpy((char *)qword_25B8E78, "Roundabout_Thirteenth_Exit");
  qword_25B8E90 = (uint64_t)operator new(0x20uLL);
  unk_25B8E98 = xmmword_20B5EB0;
  strcpy((char *)qword_25B8E90, "Roundabout_Fourteenth_Exit");
  qword_25B8EA8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25B8EB0 = xmmword_20B8870;
  strcpy((char *)qword_25B8EA8, "Roundabout_Fifteenth_Exit");
  qword_25B8EC0 = (uint64_t)operator new(0x20uLL);
  unk_25B8EC8 = xmmword_20B8870;
  strcpy((char *)qword_25B8EC0, "Roundabout_Sixteenth_Exit");
  qword_25B8ED8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25B8EE0 = xmmword_20B91A0;
  strcpy((char *)qword_25B8ED8, "Roundabout_Seventeenth_Exit");
  qword_25B8EF0 = (uint64_t)operator new(0x20uLL);
  unk_25B8EF8 = xmmword_20B5EB0;
  strcpy((char *)qword_25B8EF0, "Roundabout_Eighteenth_Exit");
  qword_25B8F08 = (uint64_t)operator new(0x20uLL);
  xmmword_25B8F10 = xmmword_20B5EB0;
  strcpy((char *)qword_25B8F08, "Roundabout_Nineteenth_Exit");
  byte_25B8F37 = 8;
  strcpy((char *)&qword_25B8F20, "Off_Ramp");
  byte_25B8F4F = 16;
  strcpy((char *)&xmmword_25B8F38, "Off_Ramp_On_Left");
  byte_25B8F67 = 17;
  strcpy((char *)&xmmword_25B8F50, "Off_Ramp_On_Right");
  byte_25B8F7F = 14;
  strcpy((char *)&qword_25B8F68, "Change_Highway");
  strcpy((char *)&xmmword_25B8F80, "Change_Highway_On_Left");
  HIBYTE(word_25B8F96) = 22;
  qword_25B8F98 = (uint64_t)operator new(0x19uLL);
  xmmword_25B8FA0 = xmmword_20B9250;
  strcpy((char *)qword_25B8F98, "Change_Highway_On_Right");
  byte_25B8FC7 = 5;
  dword_25B8FB0 = 1735550285;
  byte_25B8FB4 = 101;
  byte_25B8FB5 = 0;
  byte_25B8FDF = 12;
  strcpy((char *)&qword_25B8FC8, "Enter_Detour");
  byte_25B8FF7 = 11;
  strcpy((char *)&qword_25B8FE0, "Exit_Detour");
  byte_25B900F = 18;
  strcpy((char *)&xmmword_25B8FF8, "Walking_Turnaround");
  qword_25B9010 = (uint64_t)operator new(0x19uLL);
  unk_25B9018 = xmmword_20B9250;
  strcpy((char *)qword_25B9010, "Walking_Turnaround_Sign");
  byte_25B903F = 19;
  strcpy((char *)&xmmword_25B9028, "Distance_Title_List");
  qword_25B9040 = (uint64_t)operator new(0x19uLL);
  unk_25B9048 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25B9040, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_25B906F = 19;
  strcpy((char *)&xmmword_25B9058, "Arrival_Charge_List");
  byte_25B9087 = 15;
  strcpy((char *)&qword_25B9070, "Charge_At_Start");
  strcpy(&byte_25B909F, "\tPass_Street");
  strcpy((char *)&qword_25B9088, "Pass_Exit");
  byte_25B90B7 = 11;
  byte_25B90CF = 17;
  strcpy((char *)&xmmword_25B90B8, "Pass_Intersection");
  strcpy(&byte_25B90E7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25B90D0, "Next_Exit");
  byte_25B90FF = 15;
  strcpy(&byte_25B9117, "\t_PrevUTurn");
  strcpy((char *)&qword_25B9100, "_PrevRoad");
  strcpy(&byte_25B912F, "\nNext_");
  byte_25B9147 = 5;
  byte_25B915F = 15;
  strcpy((char *)&qword_25B9148, "_At_Next_Street");
  byte_25B9177 = 21;
  strcpy((char *)&xmmword_25B9160, "_At_Next_Intersection");
  byte_25B918F = 14;
  strcpy((char *)&qword_25B9178, "Charge_Station");
  byte_25B91A7 = 15;
  strcpy((char *)&qword_25B9190, "_Charge_Station");
  BYTE1(qword_25B91B8) = 0;
  WORD1(qword_25B91B8) = 25856;
  HIDWORD(qword_25B91B8) = 335544320;
  strcpy((char *)&qword_25B91A8, "_Charge_Station_");
  byte_25B91D7 = 8;
  strcpy((char *)&qword_25B91C0, "_Minimum");
  byte_25B91EF = 15;
  strcpy((char *)&qword_25B91D8, "ExitShield_Sign");
  byte_25B9207 = 8;
  strcpy((char *)&qword_25B91F0, "Walking_");
  byte_25B921F = 16;
  strcpy((char *)&xmmword_25B9208, "Walking_Continue");
  byte_25B9237 = 19;
  strcpy((char *)&xmmword_25B9220, "Walking_Start_Route");
  qword_25B9238 = (uint64_t)operator new(0x20uLL);
  xmmword_25B9240 = xmmword_20B5EB0;
  strcpy((char *)qword_25B9238, "Walking_Start_Route_U_Turn");
  byte_25B9267 = 17;
  strcpy((char *)&xmmword_25B9250, "Walking_Left_Turn");
  byte_25B927F = 18;
  strcpy((char *)&xmmword_25B9268, "Walking_Right_Turn");
  qword_25B9280 = (uint64_t)operator new(0x20uLL);
  unk_25B9288 = xmmword_20B5EB0;
  strcpy((char *)qword_25B9280, "Walking_Turn_At_Roundabout");
  qword_25B9298 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25B92A0 = xmmword_20B91B0;
  strcpy((char *)qword_25B9298, "Walking_U_Turn_When_Possible");
  qword_25B92B0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25B92B8 = xmmword_20B9390;
  strcpy((char *)qword_25B92B0, "Walking_Roundabout_Exit_Continue");
  qword_25B92C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B92D0 = xmmword_20B91B0;
  strcpy((char *)qword_25B92C8, "Walking_Roundabout_Exit_Left");
  qword_25B92E0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25B92E8 = xmmword_20B8890;
  strcpy((char *)qword_25B92E0, "Walking_Roundabout_Exit_Right");
  qword_25B92F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B9300 = xmmword_20B8870;
  strcpy((char *)qword_25B92F8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25B9310 = (uint64_t)v0;
  unk_25B9318 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25B933F = 8;
  strcpy((char *)&qword_25B9328, "Walking_");
  qword_25B9340 = (uint64_t)operator new(0x19uLL);
  unk_25B9348 = v282;
  strcpy((char *)qword_25B9340, "Walking_Sharp_Left_Turn");
  qword_25B9358 = (uint64_t)operator new(0x20uLL);
  xmmword_25B9360 = v281;
  strcpy((char *)qword_25B9358, "Walking_Sharp_Right_Turn");
  qword_25B9370 = (uint64_t)operator new(0x20uLL);
  unk_25B9378 = v281;
  strcpy((char *)qword_25B9370, "Walking_Slight_Left_Turn");
  qword_25B9388 = (uint64_t)operator new(0x20uLL);
  xmmword_25B9390 = v280;
  strcpy((char *)qword_25B9388, "Walking_Slight_Right_Turn");
  byte_25B93B7 = 4;
  strcpy((char *)&dword_25B93A0, "Exit");
  byte_25B93CF = 4;
  strcpy((char *)&dword_25B93B8, "Road");
  byte_25B93E7 = 7;
  strcpy((char *)&dword_25B93D0, "Freeway");
  byte_25B93FF = 12;
  strcpy((char *)&qword_25B93E8, "Intersection");
  byte_25B9417 = 5;
  strcpy((char *)&dword_25B9400, "Ferry");
  byte_25B942F = 11;
  strcpy((char *)&qword_25B9418, "ShuttleName");
  byte_25B9447 = 5;
  strcpy((char *)&dword_25B9430, "Road1");
  strcpy(&byte_25B945F, "\tName");
  strcpy((char *)&qword_25B9448, "Signpost1");
  byte_25B9477 = 4;
  byte_25B948F = 7;
  strcpy((char *)&dword_25B9478, "Address");
  byte_25B94A7 = 7;
  strcpy((char *)&dword_25B9490, "Shield1");
  byte_25B94BF = 13;
  strcpy((char *)&qword_25B94A8, "TowardShield1");
  byte_25B94D7 = 6;
  strcpy((char *)&dword_25B94C0, "Right_");
  byte_25B94EF = 5;
  byte_25B94DC = 95;
  dword_25B94D8 = 1952867660;
  byte_25B94DD = 0;
  strcpy(&byte_25B9507, "\tOn_Left_");
  strcpy((char *)&qword_25B94F0, "On_Right_");
  byte_25B951F = 8;
  byte_25B9537 = 12;
  strcpy((char *)&qword_25B9520, "ElevatorName");
  byte_25B954F = 13;
  strcpy((char *)&qword_25B9538, "EscalatorName");
  strcpy(&byte_25B9567, "\nBridgeName");
  strcpy((char *)&qword_25B9550, "StairsName");
  strcpy(&byte_25B957F, "\nTunnelName");
  strcpy(&byte_25B9597, "\nParking");
  byte_25B95AF = 7;
  strcpy(&byte_25B95C7, "\t_Escalator");
  strcpy((char *)&qword_25B95B0, "_Elevator");
  strcpy(&byte_25B95DF, "\n_ElevatorName");
  byte_25B95F7 = 13;
  byte_25B960F = 14;
  strcpy((char *)&qword_25B95F8, "_EscalatorName");
  byte_25B9627 = 5;
  strcpy((char *)&qword_25B9610, "_Road");
  byte_25B963F = 8;
  strcpy((char *)&qword_25B9628, "_Freeway");
  byte_25B9657 = 13;
  strcpy((char *)&qword_25B9640, "_Intersection");
  byte_25B966F = 6;
  strcpy((char *)&dword_25B9658, "_Road1");
  byte_25B9687 = 6;
  strcpy((char *)&dword_25B9670, "_Road2");
  strcpy(&byte_25B969F, "\n_Signpost2");
  strcpy((char *)&qword_25B9688, "_Signpost1");
  strcpy(&byte_25B96B7, "\n_Ferry");
  byte_25B96CF = 6;
  byte_25B96E7 = 12;
  strcpy((char *)&qword_25B96D0, "_Ferry_Ferry");
  byte_25B96FF = 12;
  strcpy((char *)&qword_25B96E8, "_ShuttleName");
  qword_25B9700 = (uint64_t)operator new(0x20uLL);
  unk_25B9708 = v279;
  strcpy((char *)qword_25B9700, "_Railway_Shuttle_ShuttleName");
  byte_25B972F = 11;
  strcpy((char *)&qword_25B9718, "_ExitNumber");
  byte_25B9747 = 5;
  dword_25B9730 = 1769489759;
  byte_25B9734 = 116;
  byte_25B9735 = 0;
  byte_25B975F = 7;
  strcpy((char *)&dword_25B9748, "_StayOn");
  byte_25B9777 = 7;
  strcpy((char *)&dword_25B9760, "_Stairs");
  byte_25B978F = 5;
  strcpy((char *)&dword_25B9778, "_Ramp");
  byte_25B97A7 = 11;
  strcpy((char *)&qword_25B9790, "_StairsName");
  strcpy(&byte_25B97BF, "\t_Down");
  strcpy((char *)&qword_25B97A8, "_RampName");
  byte_25B97D7 = 5;
  byte_25B97EF = 3;
  dword_25B97D8 = 7361887;
  byte_25B9807 = 7;
  strcpy((char *)&dword_25B97F0, "_Bridge");
  byte_25B981F = 7;
  strcpy((char *)&dword_25B9808, "_Tunnel");
  byte_25B9837 = 11;
  strcpy((char *)&qword_25B9820, "_Roundabout");
  byte_25B984F = 6;
  strcpy((char *)&dword_25B9838, "_Cross");
  byte_25B9867 = 8;
  strcpy((char *)&qword_25B9850, "_Parking");
  byte_25B987F = 8;
  strcpy((char *)&qword_25B9868, "_Shield1");
  byte_25B9897 = 14;
  strcpy((char *)&qword_25B9880, "_TowardShield1");
  byte_25B98AF = 8;
  strcpy((char *)&qword_25B9898, "_Shield2");
  byte_25B98C7 = 14;
  strcpy((char *)&qword_25B98B0, "_TowardShield2");
  byte_25B98DF = 11;
  strcpy((char *)&qword_25B98C8, "_Direction1");
  byte_25B98F7 = 11;
  strcpy((char *)&qword_25B98E0, "_Direction2");
  strcpy(&byte_25B990F, "\n_TowardDirection1");
  strcpy((char *)&qword_25B98F8, "Direction1");
  byte_25B9927 = 17;
  byte_25B993F = 17;
  strcpy((char *)&xmmword_25B9928, "_TowardDirection2");
  byte_25B9957 = 16;
  strcpy((char *)&xmmword_25B9940, "TowardDirection1");
  byte_25B996F = 7;
  strcpy((char *)&qword_25B9958, "_Spoken");
  byte_25B9987 = 5;
  strcpy((char *)&qword_25B9970, "_Sign");
  byte_25B999F = 15;
  strcpy((char *)&qword_25B9988, "_Secondary_Sign");
  byte_25B99B7 = 5;
  byte_25B99A4 = 116;
  dword_25B99A0 = 1936280671;
  byte_25B99A5 = 0;
  byte_25B99CF = 8;
  strcpy((char *)&qword_25B99B8, "_Primary");
  qword_25B99E0 = 0xF00000000000000;
  strcpy(byte_25B99E8, "_Secondary");
  strcpy((char *)&qword_25B99D0, "_Spoken_Primary");
  strcpy(&byte_25B99FF, "\n_Secondary");
  strcpy(&byte_25B9A17, "\n_Spoken_Secondar");
  BYTE1(qword_25B9A28) = 0;
  WORD1(qword_25B9A28) = 0;
  HIDWORD(qword_25B9A28) = 285212672;
  byte_25B9A47 = 13;
  strcpy((char *)&qword_25B9A30, "_To_Secondary");
  BYTE1(qword_25B9A58) = 0;
  WORD1(qword_25B9A58) = 0;
  HIDWORD(qword_25B9A58) = 335544320;
  strcpy((char *)&dword_25B9A48, "_Spoken_To_Secon");
  strcpy(&byte_25B9A77, "\t_ValidDistance");
  strcpy((char *)&qword_25B9A60, "_Distance");
  byte_25B9A8F = 14;
  byte_25B9AA7 = 6;
  strcpy((char *)&dword_25B9A90, "_Short");
  byte_25B9ABF = 1;
  word_25B9AA8 = 95;
  qword_25B9AC0 = (uint64_t)operator new(0x20uLL);
  unk_25B9AC8 = v281;
  strcpy((char *)qword_25B9AC0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25B9AD8 = (uint64_t)v1;
  xmmword_25B9AE0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_25B9B07 = 12;
  strcpy((char *)&qword_25B9AF0, "Chain_Spoken");
  byte_25B9B1F = 15;
  strcpy((char *)&qword_25B9B08, "Chain_To_Spoken");
  strcpy(&byte_25B9B37, "\nThen_Spoken");
  strcpy((char *)&qword_25B9B20, "And_Spoken");
  byte_25B9B4F = 11;
  byte_25B9B67 = 18;
  strcpy((char *)&xmmword_25B9B50, "Concatenate_Spoken");
  qword_25B9B68 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_25B9B70 = xmmword_20B9240;
  strcpy((char *)qword_25B9B68, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25B9B80 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_25B9B88 = xmmword_20B9260;
  strcpy((char *)qword_25B9B80, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25B9B98 = (uint64_t)operator new(0x40uLL);
  xmmword_25B9BA0 = xmmword_20B9A90;
  strcpy((char *)qword_25B9B98, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25B9BB0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25B9BB8 = xmmword_20B9A40;
  strcpy((char *)qword_25B9BB0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25B9BC8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_25B9BD0 = xmmword_20E12D0;
  strcpy((char *)qword_25B9BC8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25B9BE0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25B9BE8 = xmmword_20B9960;
  strcpy((char *)qword_25B9BE0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B9BF8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B9C00 = xmmword_20B93A0;
  strcpy((char *)qword_25B9BF8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B9C10 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25B9C18 = xmmword_20E1380;
  strcpy((char *)qword_25B9C10, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B9C28 = (uint64_t)operator new(0x30uLL);
  xmmword_25B9C30 = xmmword_20B93C0;
  strcpy((char *)qword_25B9C28, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B9C40 = (uint64_t)operator new(0x38uLL);
  unk_25B9C48 = xmmword_20B9A60;
  strcpy((char *)qword_25B9C40, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B9C58 = (uint64_t)operator new(0x30uLL);
  xmmword_25B9C60 = xmmword_20E1380;
  strcpy((char *)qword_25B9C58, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B9C70 = (uint64_t)operator new(0x28uLL);
  unk_25B9C78 = xmmword_20B9960;
  strcpy((char *)qword_25B9C70, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25B9C88 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25B9C90 = xmmword_20B93D0;
  strcpy((char *)qword_25B9C88, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25B9CA0 = (uint64_t)operator new(0x20uLL);
  unk_25B9CA8 = v277;
  strcpy((char *)qword_25B9CA0, "Walking_Distance_Chain_Spoken");
  qword_25B9CB8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B9CC0 = v277;
  strcpy((char *)qword_25B9CB8, "Walking_Continue_Chain_Spoken");
  int v3 = (char *)operator new(0x19uLL);
  qword_25B9CD0 = (uint64_t)v3;
  unk_25B9CD8 = v282;
  *(_OWORD *)int v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25B9CE8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B9CF0 = v271;
  strcpy((char *)qword_25B9CE8, "Distance_Cross_The_Street_Spoken");
  byte_25B9D17 = 22;
  strcpy((char *)&xmmword_25B9D00, "Walking_Continue_Cross");
  byte_25B9D2F = 14;
  strcpy((char *)&qword_25B9D18, "Continue_Cross");
  byte_25B9D47 = 5;
  strcpy((char *)&dword_25B9D30, "Cross");
  byte_25B9D5F = 19;
  strcpy((char *)&xmmword_25B9D48, "Cross_Street_Spoken");
  byte_25B9D77 = 17;
  strcpy((char *)&xmmword_25B9D60, "Cross_Road_Spoken");
  byte_25B9D8F = 20;
  strcpy((char *)&xmmword_25B9D78, "Use_Crosswalk_Spoken");
  byte_25B9DA7 = 15;
  strcpy((char *)&qword_25B9D90, "Distance_Spoken");
  byte_25B9DBF = 19;
  strcpy((char *)&xmmword_25B9DA8, "Distance_And_Spoken");
  byte_25B9DD7 = 21;
  strcpy((char *)&xmmword_25B9DC0, "Continue_Stage_Spoken");
  byte_25B9DEF = 13;
  qmemcpy(&qword_25B9DD8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25B99E0);
  if (qword_25B99E0 >= 0) {
    size_t v5 = HIBYTE(qword_25B99E0);
  }
  else {
    size_t v5 = unk_25B99D8;
  }
  unint64_t v6 = v5 + 13;
  byte_25B9DE5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_25B9DF8 = v5 + 13;
    unk_25B9E00 = v9 | 0x8000000000000000;
    qword_25B9DF0 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    uint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25B9DF8) = 0;
    WORD1(qword_25B9DF8) = 0;
    HIDWORD(qword_25B9DF8) = 0;
    unk_25B9E00 = 0;
    byte_25B9E07 = v5 + 13;
    uint64_t v7 = (char *)&qword_25B9DF8 + 5;
    strcpy((char *)&qword_25B9DF0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25B99D0;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25B99D0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25B9627;
  if (byte_25B9627 >= 0) {
    size_t v13 = byte_25B9627;
  }
  else {
    size_t v13 = qword_25B9618;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *unint64_t v18 = qword_25B9DD8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25B9DD8 + 5);
    int v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25B9DD8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25B9DD8;
    int v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_25B9610;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_25B9610;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25B99D0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25B99D0;
  }
  int v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25B9E18 = v21->__r_.__value_.__r.__words[2];
  xmmword_25B9E08 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25B9E37 = 5;
  strcpy((char *)&dword_25B9E20, "Merge");
  qword_25B9E38 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_25B9E40 = xmmword_20B8E90;
  strcpy((char *)qword_25B9E38, "Continue_Freeway_Spoken_Primary");
  byte_25B9E67 = 8;
  strcpy((char *)&qword_25B9E50, "Starting");
  byte_25B9E7F = 14;
  strcpy((char *)&qword_25B9E68, "Starting_Route");
  byte_25B9E97 = 14;
  strcpy((char *)&qword_25B9E80, "Resuming_Route");
  byte_25B9EAF = 16;
  strcpy((char *)&xmmword_25B9E98, "Continuing_Route");
  byte_25B9EC7 = 9;
  word_25B9EB8 = 112;
  qword_25B9EB0 = *(void *)&v266[48];
  strcpy(&byte_25B9EDF, "\nEnding");
  strcpy((char *)&word_25B9ED0, "op");
  qword_25B9EC8 = *(void *)&v270[0];
  byte_25B9EF7 = 6;
  strcpy((char *)&qword_25B9EF8, "_Destination");
  byte_25B9F0F = 12;
  byte_25B9F27 = 15;
  strcpy((char *)&qword_25B9F10, "_At_Destination");
  std::operator+<char>();
  qword_25B9F40 = (uint64_t)operator new(0x20uLL);
  unk_25B9F48 = v281;
  strcpy((char *)qword_25B9F40, "Spoken_Ending_At_Parking");
  qword_25B9F58 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_25B9F60 = xmmword_20B9800;
  strcpy((char *)qword_25B9F58, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25B9F70, "Sign_Ending_At_Parking");
  HIBYTE(word_25B9F86) = 22;
  byte_25B9F9F = 4;
  strcpy((char *)&dword_25B9F88, "Home");
  byte_25B9FB7 = 4;
  strcpy((char *)&dword_25B9FA0, "Work");
  byte_25B9FCF = 8;
  strcpy((char *)&qword_25B9FB8, "Business");
  byte_25B9FE7 = 4;
  strcpy((char *)&dword_25B9FD0, "Name");
  byte_25B9FFF = 13;
  strcpy((char *)&qword_25B9FE8, "Other_Contact");
  byte_25BA017 = 11;
  strcpy((char *)&qword_25BA000, "ContactHome");
  byte_25BA02F = 11;
  *(_DWORD *)((char *)&qword_25BA018 + 7) = 1802661719;
  byte_25BA047 = 7;
  *(int *)((char *)&dword_25BA030 + 3) = 1936942450;
  dword_25BA030 = 1919181889;
  strcpy((char *)&xmmword_25BA048, "Discoverability_Prompt");
  HIBYTE(word_25BA05E) = 22;
  byte_25BA077 = 6;
  dword_25BA060 = 1634878303;
  word_25BA064 = 26739;
  byte_25BA08F = 8;
  qword_25BA078 = 0x697269535F6F4E5FLL;
  byte_25BA0A7 = 9;
  strcpy((char *)&qword_25BA090, "_CityName");
  byte_25BA0BF = 8;
  qword_25BA0A8 = 0x636972656E65475FLL;
  int v23 = byte_25B9E67;
  if (byte_25B9E67 >= 0) {
    size_t v24 = byte_25B9E67;
  }
  else {
    size_t v24 = qword_25B9E58;
  }
  LODWORD(v272) = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v25 = byte_25B91A7;
  }
  else {
    size_t v25 = unk_25B9198;
  }
  qword_25BA018 = *(void *)"ContactWork";
  byte_25BA023 = 0;
  byte_25BA037 = 0;
  byte_25BA066 = 0;
  byte_25BA080 = 0;
  byte_25BA0B0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    int v27 = &qword_25BA0C0;
    qword_25BA0C8 = 0;
    unk_25BA0D0 = 0;
    qword_25BA0C0 = 0;
    byte_25BA0D7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  int v27 = (uint64_t *)operator new(v90 + 1);
  qword_25BA0C8 = v25 + v24;
  unk_25BA0D0 = v91 | 0x8000000000000000;
  qword_25BA0C0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      int v28 = &qword_25B9E50;
    }
    else {
      int v28 = (uint64_t *)qword_25B9E50;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v30 = &qword_25B9190;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25B9190;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25B9F0F;
  if (byte_25B9F0F >= 0) {
    size_t v32 = byte_25B9F0F;
  }
  else {
    size_t v32 = qword_25B9F00;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    unint64_t v34 = &qword_25BA0D8;
    qword_25BA0E0 = 0;
    unk_25BA0E8 = 0;
    qword_25BA0D8 = 0;
    byte_25BA0EF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  unint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_25BA0E0 = v32 + v24;
  unk_25BA0E8 = v93 | 0x8000000000000000;
  qword_25BA0D8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_25B9E50;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_25B9E50;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  std::string v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25B9EF8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25B9EF8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25BA0F0 = (uint64_t)operator new(0x19uLL);
  unk_25BA0F8 = v282;
  strcpy((char *)qword_25BA0F0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    int v38 = &qword_25BA108;
    qword_25BA110 = 0;
    unk_25BA118 = 0;
    qword_25BA108 = 0;
    byte_25BA11F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  int v38 = (uint64_t *)operator new(v94 + 1);
  qword_25BA110 = v32 + v24;
  unk_25BA118 = v95 | 0x8000000000000000;
  qword_25BA108 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      uint64_t v39 = &qword_25B9E50;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_25B9E50;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v41 = &qword_25B9EF8;
    }
    else {
      int v41 = (uint64_t *)qword_25B9EF8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25BA120, "{NewBatteryPercentage}");
  HIBYTE(word_25BA136) = 22;
  qword_25BA138 = (uint64_t)operator new(0x20uLL);
  xmmword_25BA140 = v275;
  strcpy((char *)qword_25BA138, "{OriginalBatteryPercentage}");
  byte_25BA167 = 19;
  strcpy((char *)&xmmword_25BA150, "_Arrival_Percentage");
  int v42 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v43 = byte_25B9EF7;
  }
  else {
    size_t v43 = qword_25B9EE8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      uint64_t v46 = &qword_25B9EE0;
    }
    else {
      uint64_t v46 = (uint64_t *)qword_25B9EE0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  long long v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      int v48 = &qword_25B9190;
    }
    else {
      int v48 = (uint64_t *)qword_25B9190;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  uint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25BA178 = v49->__r_.__value_.__r.__words[2];
  xmmword_25BA168 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v52 = byte_25B9EF7;
  }
  else {
    size_t v52 = qword_25B9EE8;
  }
  int v53 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v54 = byte_25B91A7;
  }
  else {
    size_t v54 = unk_25B9198;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    int v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  int v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      unint64_t v57 = &qword_25B9EE0;
    }
    else {
      unint64_t v57 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  size_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      long long v59 = &qword_25B9190;
    }
    else {
      long long v59 = (uint64_t *)qword_25B9190;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25B91D7 >= 0) {
    long long v60 = (const std::string::value_type *)&qword_25B91C0;
  }
  else {
    long long v60 = (const std::string::value_type *)qword_25B91C0;
  }
  if (byte_25B91D7 >= 0) {
    std::string::size_type v61 = byte_25B91D7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25B91C8;
  }
  uint64_t v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25BA190 = v64->__r_.__value_.__r.__words[2];
  xmmword_25BA180 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v67 = byte_25B9EF7;
  }
  else {
    size_t v67 = qword_25B9EE8;
  }
  int v68 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v69 = byte_25B91A7;
  }
  else {
    size_t v69 = unk_25B9198;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      v72 = &qword_25B9EE0;
    }
    else {
      v72 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      int v74 = &qword_25B9190;
    }
    else {
      int v74 = (uint64_t *)qword_25B9190;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25BA1A8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25BA198 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v78 = byte_25B9EF7;
  }
  else {
    size_t v78 = qword_25B9EE8;
  }
  int v79 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v80 = byte_25B91A7;
  }
  else {
    size_t v80 = unk_25B9198;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25BA1B8 = 0;
    unk_25BA1C0 = 0;
    qword_25BA1B0 = 0;
    v82 = &qword_25BA1B0;
    byte_25BA1C7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  v82 = (uint64_t *)operator new(v102 + 1);
  qword_25BA1B8 = v80 + v78;
  unk_25BA1C0 = v103 | 0x8000000000000000;
  qword_25BA1B0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      v83 = &qword_25B9EE0;
    }
    else {
      v83 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25B9190;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25B9190;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25BA1C7;
  if (byte_25BA1C7 >= 0) {
    size_t v87 = byte_25BA1C7;
  }
  else {
    size_t v87 = qword_25BA1B8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    v89 = (uint64_t *)operator new(v104 + 1);
    qword_25BA1D0 = v87 + 5;
    unk_25BA1D8 = v105 | 0x8000000000000000;
    qword_25BA1C8 = (uint64_t)v89;
  }
  else
  {
    v89 = &qword_25BA1C8;
    qword_25BA1D0 = 0;
    unk_25BA1D8 = 0;
    qword_25BA1C8 = 0;
    byte_25BA1DF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    v106 = &qword_25BA1B0;
  }
  else {
    v106 = (uint64_t *)qword_25BA1B0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v108 = byte_25B9EF7;
  }
  else {
    size_t v108 = qword_25B9EE8;
  }
  int v109 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v110 = byte_25B91A7;
  }
  else {
    size_t v110 = unk_25B9198;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      v113 = &qword_25B9EE0;
    }
    else {
      v113 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      v115 = &qword_25B9190;
    }
    else {
      v115 = (uint64_t *)qword_25B9190;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25BA1F0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25BA1E0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25BA1F0);
  if (qword_25BA1F0 >= 0) {
    size_t v119 = HIBYTE(qword_25BA1F0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25BA1E0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    v121 = (uint64_t *)operator new(v124 + 1);
    qword_25BA200 = v119 + 6;
    unk_25BA208 = v125 | 0x8000000000000000;
    qword_25BA1F8 = (uint64_t)v121;
  }
  else
  {
    v121 = &qword_25BA1F8;
    qword_25BA200 = 0;
    unk_25BA208 = 0;
    qword_25BA1F8 = 0;
    byte_25BA20F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    v126 = &xmmword_25BA1E0;
  }
  else {
    v126 = (long long *)xmmword_25BA1E0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v128 = byte_25B9EF7;
  }
  else {
    size_t v128 = qword_25B9EE8;
  }
  int v129 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v130 = byte_25B91A7;
  }
  else {
    size_t v130 = unk_25B9198;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      v133 = &qword_25B9EE0;
    }
    else {
      v133 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      v135 = &qword_25B9190;
    }
    else {
      v135 = (uint64_t *)qword_25B9190;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25B996F >= 0) {
    v136 = (const std::string::value_type *)&qword_25B9958;
  }
  else {
    v136 = (const std::string::value_type *)qword_25B9958;
  }
  if (byte_25B996F >= 0) {
    std::string::size_type v137 = byte_25B996F;
  }
  else {
    std::string::size_type v137 = unk_25B9960;
  }
  v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25BA220 = v138->__r_.__value_.__r.__words[2];
  xmmword_25BA210 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25B9EF7;
  if (byte_25B9EF7 >= 0) {
    size_t v141 = byte_25B9EF7;
  }
  else {
    size_t v141 = qword_25B9EE8;
  }
  int v142 = byte_25B91A7;
  if (byte_25B91A7 >= 0) {
    size_t v143 = byte_25B91A7;
  }
  else {
    size_t v143 = unk_25B9198;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_25B9EE0;
    }
    else {
      v146 = (uint64_t *)qword_25B9EE0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_25B9190;
    }
    else {
      v148 = (uint64_t *)qword_25B9190;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25B91D7 >= 0) {
    v149 = (const std::string::value_type *)&qword_25B91C0;
  }
  else {
    v149 = (const std::string::value_type *)qword_25B91C0;
  }
  if (byte_25B91D7 >= 0) {
    std::string::size_type v150 = byte_25B91D7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25B91C8;
  }
  v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25B996F >= 0) {
    v153 = (const std::string::value_type *)&qword_25B9958;
  }
  else {
    v153 = (const std::string::value_type *)qword_25B9958;
  }
  if (byte_25B996F >= 0) {
    std::string::size_type v154 = byte_25B996F;
  }
  else {
    std::string::size_type v154 = unk_25B9960;
  }
  v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25BA238 = v155->__r_.__value_.__r.__words[2];
  xmmword_25BA228 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25BA257 = 16;
  strcpy((char *)&xmmword_25BA240, "Use_NACS_Adapter");
  byte_25BA26F = 16;
  strcpy(byte_25BA258, "Start_Route_Sign");
  qword_25BA270 = (uint64_t)operator new(0x20uLL);
  unk_25BA278 = v278;
  strcpy((char *)qword_25BA270, "Start_Route_Spoken_Primary");
  int v157 = byte_25B8907;
  if (byte_25B8907 >= 0) {
    size_t v158 = byte_25B8907;
  }
  else {
    size_t v158 = qword_25B88F8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    v160 = &qword_25BA288;
    qword_25BA290 = 0;
    unk_25BA298 = 0;
    qword_25BA288 = 0;
    byte_25BA29F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_25B88F0;
    }
    else {
      v167 = (uint64_t *)qword_25B88F0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  v160 = (uint64_t *)operator new(v165 + 1);
  qword_25BA290 = v158 + 27;
  unk_25BA298 = v166 | 0x8000000000000000;
  qword_25BA288 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25BA2B7, "\t_Two_Lanes");
  strcpy((char *)&qword_25BA2A0, "_One_Lane");
  strcpy(&byte_25BA2CF, "\n_Three_Lanes");
  byte_25BA2E7 = 12;
  byte_25BA2FF = 11;
  strcpy((char *)&qword_25BA2E8, "_Four_Lanes");
  byte_25BA317 = 11;
  strcpy((char *)&qword_25BA300, "_Five_Lanes");
  strcpy(&byte_25BA32F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25BA318, "_Six_Lanes");
  byte_25BA347 = 12;
  byte_25BA35F = 12;
  strcpy((char *)&qword_25BA348, "_Eight_Lanes");
  byte_25BA377 = 12;
  strcpy((char *)&qword_25BA360, "_Second_Lane");
  byte_25BA38F = 11;
  strcpy((char *)&qword_25BA378, "_Third_Lane");
  byte_25BA3A7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25BA390, "_Second_Third_Lanes");
  byte_25BA3BF = 4;
  strcpy((char *)&dword_25BA3A8, "Left");
  byte_25BA3D7 = 5;
  byte_25BA3C4 = 116;
  dword_25BA3C0 = 1751607634;
  byte_25BA3C5 = 0;
  byte_25BA3EF = 6;
  strcpy((char *)&dword_25BA3D8, "Middle");
  BYTE1(qword_25BA400) = 0;
  WORD1(qword_25BA400) = 0;
  HIDWORD(qword_25BA400) = 0x10000000;
  strcpy((char *)dword_25BA3F0, "Left_Second_Lane");
  BYTE1(qword_25BA418) = 0;
  WORD1(qword_25BA418) = 0;
  HIDWORD(qword_25BA418) = 285212672;
  strcpy((char *)&dword_25BA408, "Right_Second_Lan");
  qword_25BA430 = 0xF00000000000000;
  strcpy((char *)&dword_25BA420, "Left_Third_Lane");
  qword_25BA448 = 0x1000000000000000;
  byte_25BA43C = 116;
  dword_25BA438 = 1751607634;
  dword_25BA444 = 1701732684;
  unk_25BA43D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_25BA450 = (uint64_t)v168;
  unk_25BA458 = v282;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  v169 = (char *)operator new(0x20uLL);
  qword_25BA468 = (uint64_t)v169;
  xmmword_25BA470 = v281;
  *(_DWORD *)v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_25BA497 = 5;
  strcpy((char *)&dword_25BA480, "_Stay");
  byte_25BA4AF = 13;
  strcpy((char *)&qword_25BA498, "Continue_Sign");
  byte_25BA4C7 = 8;
  strcpy((char *)&qword_25BA4B0, "Continue");
  int v170 = byte_25B9987;
  if (byte_25B9987 >= 0) {
    size_t v171 = byte_25B9987;
  }
  else {
    size_t v171 = qword_25B9978;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_25BA4D0 = v171 + 8;
    qword_25BA4D8 = v175 | 0x8000000000000000;
    qword_25BA4C8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    v173 = v176 + 1;
  }
  else
  {
    qword_25BA4D8 = 0;
    HIBYTE(qword_25BA4D8) = v171 + 8;
    qword_25BA4C8 = 0x65756E69746E6F43;
    qword_25BA4D0 = 0;
    v173 = &qword_25BA4D0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_25B9970;
  }
  else {
    v177 = (uint64_t *)qword_25B9970;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25B99E0);
  if (qword_25B99E0 >= 0) {
    size_t v179 = HIBYTE(qword_25B99E0);
  }
  else {
    size_t v179 = unk_25B99D8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25BA4E8 = v179 + 8;
    qword_25BA4F0 = v183 | 0x8000000000000000;
    qword_25BA4E0 = (uint64_t)v184;
    void *v184 = qword_25BA4B0;
    v181 = v184 + 1;
  }
  else
  {
    qword_25BA4F0 = 0;
    HIBYTE(qword_25BA4F0) = v179 + 8;
    qword_25BA4E0 = qword_25BA4B0;
    qword_25BA4E8 = 0;
    v181 = &qword_25BA4E8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_25B99D0;
  }
  else {
    v185 = (uint64_t *)qword_25B99D0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25BA4F8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25BA527 = 13;
  strcpy((char *)&qword_25BA510, "{instruction}");
  byte_25BA53F = 20;
  strcpy(byte_25BA528, "{primaryInstruction}");
  strcpy((char *)&xmmword_25BA540, "{secondaryInstruction}");
  HIBYTE(word_25BA556) = 22;
  qword_25BA558 = (uint64_t)operator new(0x20uLL);
  unk_25BA560 = v280;
  strcpy((char *)qword_25BA558, "{andSecondaryInstruction}");
  qword_25BA570 = (uint64_t)operator new(0x20uLL);
  unk_25BA578 = v281;
  strcpy((char *)qword_25BA570, "{toSecondaryInstruction}");
  byte_25BA59F = 21;
  strcpy(byte_25BA588, "{continueInstruction}");
  qword_25BA5A0 = (uint64_t)operator new(0x20uLL);
  unk_25BA5A8 = v278;
  strcpy((char *)qword_25BA5A0, "{thenSecondaryInstruction}");
  byte_25BA5CF = 14;
  strcpy((char *)&qword_25BA5B8, "{instruction1}");
  byte_25BA5E7 = 14;
  strcpy((char *)&qword_25BA5D0, "{instruction2}");
  strcpy(&byte_25BA5FF, "\n{nextDistance}");
  strcpy((char *)&qword_25BA5E8, "{distance}");
  byte_25BA617 = 14;
  byte_25BA62F = 16;
  strcpy(byte_25BA618, "{valid_distance}");
  strcpy(&byte_25BA647, "\n{valid_distance}");
  strcpy((char *)&qword_25BA630, "{distance}");
  byte_25BA65F = 16;
  byte_25BA677 = 15;
  strcpy((char *)&qword_25BA660, "{ClimbDistance}");
  byte_25BA68F = 17;
  strcpy(byte_25BA678, "{DescentDistance}");
  byte_25BA6A7 = 13;
  strcpy((char *)&qword_25BA690, "{nonBrkSpace}");
  byte_25BA6BF = 9;
  strcpy((char *)&qword_25BA6A8, "{newLine}");
  byte_25BA6D7 = 6;
  WORD2(qword_25BA6C0) = -24382;
  LODWORD(qword_25BA6C0) = -1211981630;
  BYTE6(qword_25BA6C0) = 0;
  byte_25BA6EF = 2;
  word_25BA6D8 = -24382;
  byte_25BA6DA = 0;
  byte_25BA707 = 1;
  word_25BA6F0 = 10;
  byte_25BA71F = 1;
  word_25BA708 = 32;
  byte_25BA737 = 2;
  strcpy((char *)&word_25BA720, "\n\n");
  strcpy(&byte_25BA74F, "\t{TowardShield1}");
  strcpy((char *)&qword_25BA738, "{Shield1}");
  byte_25BA767 = 15;
  strcpy(&byte_25BA77F, "\t{TowardShield2}");
  strcpy((char *)&qword_25BA768, "{Shield2}");
  byte_25BA797 = 15;
  byte_25BA7AF = 12;
  strcpy((char *)&qword_25BA798, "{Direction1}");
  byte_25BA7C7 = 12;
  strcpy((char *)&qword_25BA7B0, "{Direction2}");
  byte_25BA7DF = 18;
  strcpy((char *)&xmmword_25BA7C8, "{TowardDirection1}");
  byte_25BA7F7 = 18;
  strcpy((char *)&xmmword_25BA7E0, "{TowardDirection2}");
  byte_25BA80F = 7;
  strcpy((char *)&dword_25BA7F8, "{Icon1}");
  byte_25BA827 = 7;
  strcpy((char *)&dword_25BA810, "{Icon2}");
  byte_25BA828[23] = 14;
  strcpy(byte_25BA828, "{Intersection}");
  byte_25BA857 = 6;
  strcpy((char *)&xmmword_25BA840, "{Road}");
  byte_25BA86F = 7;
  strcpy((char *)&dword_25BA858, "{Road1}");
  byte_25BA887 = 7;
  strcpy((char *)&xmmword_25BA870, "{Road2}");
  strcpy(&byte_25BA89F, "\n{Freeway}");
  strcpy((char *)&qword_25BA888, "{Elevator}");
  strcpy(&byte_25BA8B7, "\t{Ferry}");
  byte_25BA8CF = 7;
  byte_25BA8E7 = 13;
  strcpy((char *)&xmmword_25BA8D0, "{ShuttleName}");
  byte_25BA8FF = 11;
  strcpy((char *)&xmmword_25BA8E8, "{Signpost1}");
  byte_25BA917 = 11;
  strcpy((char *)&xmmword_25BA900, "{Signpost2}");
  byte_25BA92F = 12;
  strcpy((char *)&xmmword_25BA918, "{ExitNumber}");
  strcpy(&byte_25BA947, "\t{Name}");
  strcpy((char *)&xmmword_25BA930, "{Address}");
  byte_25BA95F = 6;
  byte_25BA977 = 11;
  strcpy((char *)&xmmword_25BA960, "{PlaceName}");
  byte_25BA98F = 14;
  strcpy((char *)&xmmword_25BA978, "{ElevatorName}");
  byte_25BA9A7 = 15;
  strcpy((char *)&xmmword_25BA990, "{EscalatorName}");
  byte_25BA9BF = 12;
  strcpy((char *)&xmmword_25BA9A8, "{StairsName}");
  strcpy(&byte_25BA9D7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25BA9C0, "{RampName}");
  byte_25BA9EF = 12;
  byte_25BAA07 = 12;
  strcpy((char *)&xmmword_25BA9F0, "{TunnelName}");
  byte_25BAA1F = 13;
  strcpy((char *)&xmmword_25BAA08, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25BA828;
  *(_OWORD *)v285 = xmmword_25BA840;
  *(void *)&v285[16] = unk_25BA850;
  *(_OWORD *)v286 = *(_OWORD *)&dword_25BA858;
  *(void *)v287 = unk_25BA868;
  *(_OWORD *)&v287[8] = xmmword_25BA870;
  uint64_t v288 = unk_25BA880;
  *(_OWORD *)v289 = *(_OWORD *)&qword_25BA888;
  uint64_t v290 = unk_25BA898;
  uint64_t v292 = unk_25BA8B0;
  long long v291 = xmmword_25BA8A0;
  long long v293 = *(_OWORD *)&dword_25BA8B8;
  uint64_t v294 = unk_25BA8C8;
  uint64_t v296 = unk_25BA8E0;
  long long __p = xmmword_25BA8D0;
  long long v297 = xmmword_25BA8E8;
  uint64_t v298 = unk_25BA8F8;
  uint64_t v300 = unk_25BA910;
  long long v299 = xmmword_25BA900;
  long long v301 = xmmword_25BA918;
  long long v303 = xmmword_25BA930;
  uint64_t v302 = unk_25BA928;
  uint64_t v304 = unk_25BA940;
  long long v305 = xmmword_25BA948;
  long long v307 = xmmword_25BA960;
  uint64_t v306 = unk_25BA958;
  uint64_t v308 = unk_25BA970;
  long long v309 = xmmword_25BA978;
  long long v311 = xmmword_25BA990;
  uint64_t v310 = unk_25BA988;
  uint64_t v312 = unk_25BA9A0;
  long long v313 = xmmword_25BA9A8;
  long long v315 = xmmword_25BA9C0;
  uint64_t v314 = unk_25BA9B8;
  uint64_t v316 = unk_25BA9D0;
  long long v317 = xmmword_25BA9D8;
  long long v319 = xmmword_25BA9F0;
  uint64_t v318 = unk_25BA9E8;
  uint64_t v320 = unk_25BAA00;
  uint64_t v322 = unk_25BAA18;
  long long v321 = xmmword_25BAA08;
  sub_4BDC0C(qword_25BAA20, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25BAA38 = (uint64_t)operator new(0x19uLL);
  unk_25BAA40 = v282;
  strcpy((char *)qword_25BAA38, "From_User_Location_List");
  byte_25BAA67 = 20;
  strcpy(byte_25BAA50, "Origin_Waypoint_List");
  qword_25BAA68 = (uint64_t)operator new(0x20uLL);
  unk_25BAA70 = v278;
  strcpy((char *)qword_25BAA68, "Intermediate_Waypoint_List");
  unk_25BAA80 = operator new(0x20uLL);
  unk_25BAA88 = v280;
  strcpy(unk_25BAA80, "Destination_Waypoint_List");
  byte_25BAAAF = 15;
  strcpy(byte_25BAA98, "{toDestination}");
  byte_25BAAC7 = 13;
  strcpy((char *)&xmmword_25BAAB0, "{Destination}");
  byte_25BAADF = 7;
  strcpy(byte_25BAAC8, "To_Home");
  byte_25BAAF7 = 14;
  strcpy(byte_25BAAE0, "To_ContactHome");
  byte_25BAB0F = 7;
  strcpy(byte_25BAAF8, "To_Work");
  byte_25BAB27 = 14;
  strcpy(byte_25BAB10, "To_ContactWork");
  strcpy(&byte_25BAB3F, "\nTo_Business");
  strcpy(byte_25BAB28, "To_Address");
  byte_25BAB57 = 11;
  byte_25BAB6F = 16;
  strcpy(byte_25BAB58, "To_Other_Contact");
  strcpy(&byte_25BAB87, "\tTo_ContactSchool");
  strcpy(byte_25BAB70, "To_School");
  byte_25BAB9F = 16;
  byte_25BABB7 = 17;
  strcpy(byte_25BABA0, "To_PersonLocation");
  qword_25BABB8 = (uint64_t)operator new(0x20uLL);
  unk_25BABC0 = v279;
  strcpy((char *)qword_25BABB8, "To_ContactCustomLabelAddress");
  byte_25BABE7 = 7;
  strcpy((char *)&dword_25BABD0, "At_Home");
  byte_25BABFF = 14;
  strcpy((char *)&qword_25BABE8, "At_ContactHome");
  byte_25BAC17 = 7;
  strcpy((char *)&dword_25BAC00, "At_Work");
  byte_25BAC2F = 14;
  strcpy((char *)&qword_25BAC18, "At_ContactWork");
  strcpy(&byte_25BAC47, "\nAt_Business");
  strcpy((char *)&qword_25BAC30, "At_Address");
  byte_25BAC5F = 11;
  byte_25BAC77 = 16;
  strcpy(byte_25BAC60, "At_Other_Contact");
  byte_25BAC8F = 4;
  strcpy((char *)&dword_25BAC78, "Home");
  byte_25BACA7 = 11;
  strcpy((char *)&qword_25BAC90 + 7, "Home");
  qword_25BAC90 = *(void *)&v266[16];
  byte_25BACBF = 4;
  strcpy((char *)&dword_25BACA8, "Work");
  byte_25BACD7 = 11;
  strcpy((char *)&qword_25BACC0 + 7, "Work");
  qword_25BACC0 = *(void *)v266;
  byte_25BACEF = 7;
  strcpy((char *)&dword_25BACD8, "Address");
  byte_25BAD07 = 8;
  strcpy((char *)&qword_25BACF0, "Business");
  byte_25BAD1F = 13;
  qword_25BAD08 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25BAD08 + 5) = *(void *)&v266[32];
  byte_25BAD15 = 0;
  byte_25BAD37 = 6;
  strcpy((char *)&dword_25BAD20, "School");
  byte_25BAD4F = 13;
  strcpy((char *)&qword_25BAD38, "ContactSchool");
  byte_25BAD67 = 14;
  strcpy((char *)&qword_25BAD50, "PersonLocation");
  qword_25BAD68 = (uint64_t)operator new(0x20uLL);
  xmmword_25BAD70 = v280;
  strcpy((char *)qword_25BAD68, "ContactCustomLabelAddress");
  if (byte_25BAAC7 < 0)
  {
    sub_4200(&xmmword_25BAD80, (void *)xmmword_25BAAB0, *((unint64_t *)&xmmword_25BAAB0 + 1));
  }
  else
  {
    xmmword_25BAD80 = xmmword_25BAAB0;
    qword_25BAD90 = unk_25BAAC0;
  }
  byte_25BADAF = 16;
  strcpy((char *)&xmmword_25BAD98, "{PrevExitNumber}");
  byte_25BADC7 = 10;
  strcpy((char *)&qword_25BADB0, "{PrevRoad}");
  qword_25BADC8 = (uint64_t)operator new(0x20uLL);
  unk_25BADD0 = v281;
  strcpy((char *)qword_25BADC8, "{RouteTotalExpectedTime}");
  byte_25BADF7 = 18;
  strcpy(byte_25BADE0, "{ChargePercentage}");
  qword_25BADF8 = (uint64_t)operator new(0x20uLL);
  unk_25BAE00 = v275;
  strcpy((char *)qword_25BADF8, "{RemainingChargePercentage}");
  byte_25BAE27 = 16;
  strcpy(byte_25BAE10, "{ChargeDuration}");
  byte_25BAE3F = 15;
  strcpy((char *)&qword_25BAE28, "{ConnectorType}");
  byte_25BAE57 = 19;
  strcpy(byte_25BAE40, "{ChargeStationName}");
  byte_25BAE6F = 7;
  strcpy((char *)&dword_25BAE58, "{Power}");
  byte_25BAE87 = 13;
  strcpy((char *)&qword_25BAE70, "{VehicleName}");
  byte_25BAE9F = 18;
  strcpy((char *)&xmmword_25BAE88, "{AreaIncidentName}");
  byte_25BAEB7 = 14;
  strcpy((char *)&qword_25BAEA0, "{AreaIncident}");
  byte_25BAECF = 16;
  strcpy((char *)&xmmword_25BAEB8, "{AffectedRegion}");
  byte_25BAEE7 = 21;
  strcpy(byte_25BAED0, "{AreaIncidentWeblink}");
  byte_25BAEFF = 20;
  strcpy((char *)&xmmword_25BAEE8, "{AreaIncidentAgency}");
  byte_25BAF17 = 11;
  strcpy((char *)&qword_25BAF00, "{IssueTime}");
  byte_25BAF2F = 12;
  strcpy((char *)&qword_25BAF18, "{UpdateTime}");
  byte_25BAF47 = 11;
  strcpy((char *)&qword_25BAF30, "{IssueDate}");
  byte_25BAF5F = 12;
  strcpy((char *)&qword_25BAF48, "{UpdateDate}");
  qword_25BAF60 = (uint64_t)operator new(0x20uLL);
  unk_25BAF68 = v281;
  strcpy((char *)qword_25BAF60, "{AreaIncidentDataSource}");
  byte_25BAF8F = 13;
  strcpy((char *)&qword_25BAF78, "{AreaHectare}");
  byte_25BAFA7 = 10;
  strcpy((char *)&qword_25BAF90, "{AreaAcre}");
  qword_25BAFA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BAFB0 = v277;
  strcpy((char *)qword_25BAFA8, "{WildfirePercentageContained}");
  qword_25BAFC0 = (uint64_t)operator new(0x28uLL);
  unk_25BAFC8 = v270[2];
  strcpy((char *)qword_25BAFC0, "{WildfireExpectedContainmentDate}");
  qword_25BAFD8 = (uint64_t)operator new(0x20uLL);
  unk_25BAFE0 = v279;
  strcpy((char *)qword_25BAFD8, "{ServerRecommendedRouteName}");
  qword_25BAFF0 = (uint64_t)operator new(0x20uLL);
  unk_25BAFF8 = v279;
  strcpy((char *)qword_25BAFF0, "{ServerNonRecommendedRoute1}");
  qword_25BB008 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BB010 = v279;
  strcpy((char *)qword_25BB008, "{ServerNonRecommendedRoute2}");
  byte_25BB037 = 12;
  strcpy((char *)&qword_25BB020, "{ClientDest}");
  byte_25BB04F = 6;
  strcpy((char *)&dword_25BB038, "{Name}");
  qword_25BB050 = (uint64_t)operator new(0x20uLL);
  unk_25BB058 = v270[1];
  strcpy((char *)qword_25BB050, "ProactiveAlert_FasterRouteTitle");
  qword_25BB068 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BB070 = v278;
  strcpy((char *)qword_25BB068, "ProactiveAlert_RoadClosure");
  qword_25BB080 = (uint64_t)operator new(0x30uLL);
  unk_25BB088 = v273;
  strcpy((char *)qword_25BB080, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25BB098 = (uint64_t)operator new(0x28uLL);
  unk_25BB0A0 = v276;
  strcpy((char *)qword_25BB098, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25BB0B0 = (uint64_t)operator new(0x28uLL);
  unk_25BB0B8 = v276;
  strcpy((char *)qword_25BB0B0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25BB0C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BB0D0 = v276;
  strcpy((char *)qword_25BB0C8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25BB0E0 = (uint64_t)operator new(0x30uLL);
  unk_25BB0E8 = xmmword_20B93B0;
  strcpy((char *)qword_25BB0E0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25BB10F = 17;
  strcpy(byte_25BB0F8, "Proactive_Driving");
  strcpy(&byte_25BB127, "\n{RouteName}");
  strcpy((char *)&qword_25BB110, "_RouteName");
  byte_25BB13F = 11;
  qword_25BB140 = (uint64_t)operator new(0x28uLL);
  unk_25BB148 = v270[2];
  strcpy((char *)qword_25BB140, "Pass_Traffic_Light_Spoken_Primary");
  qword_25BB158 = (uint64_t)operator new(0x20uLL);
  unk_25BB160 = v277;
  strcpy((char *)qword_25BB158, "Pass_Stop_Sign_Spoken_Primary");
  unk_25BB170 = operator new(0x20uLL);
  unk_25BB178 = v270[0];
  strcpy(unk_25BB170, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25BB19F, "\nBannerBody");
  strcpy(byte_25BB188, "BannerHead");
  strcpy(&byte_25BB1B7, "\nBannerDescription");
  byte_25BB1CF = 17;
  strcpy(&byte_25BB1E7, "\n_Incident");
  strcpy((char *)&qword_25BB1D0, "VoiceAlert");
  strcpy(&byte_25BB1FF, "\t_Area_Incident");
  byte_25BB217 = 14;
  byte_25BB22F = 15;
  strcpy((char *)&qword_25BB218, "_Area_Incidents");
  strcpy(&byte_25BB247, "\t_Crash");
  strcpy((char *)&qword_25BB230, "_Accident");
  byte_25BB25F = 6;
  byte_25BB277 = 16;
  strcpy((char *)&xmmword_25BB260, "_Congestion_Zone");
  strcpy(&byte_25BB28F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25BB278, "_Toll_Zone");
  byte_25BB2A7 = 19;
  BYTE1(qword_25BB2B8) = 116;
  WORD1(qword_25BB2B8) = 0;
  HIDWORD(qword_25BB2B8) = 301989888;
  strcpy(byte_25BB2C0, "_Construction");
  strcpy((char *)&qword_25BB2A8, "_Incident_Accide");
  byte_25BB2D7 = 13;
  byte_25BB2EF = 7;
  strcpy((char *)&dword_25BB2D8, "_Hazard");
  byte_25BB307 = 12;
  strcpy((char *)&qword_25BB2F0, "_LaneClosure");
  byte_25BB31F = 12;
  strcpy((char *)&qword_25BB308, "_LaneTrailer");
  qmemcpy(&byte_25BB337, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25BB320, "_Shoulder");
  qword_25BB348 = 0x1500007200000000;
  *(void *)algn_25BB344 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25BB350, "_Causing_Traffic_Delay");
  HIBYTE(word_25BB366) = 22;
  byte_25BB37F = 6;
  strcpy((char *)&dword_25BB368, "_Timed");
  byte_25BB397 = 12;
  strcpy((char *)&qword_25BB380, "_HasDistance");
  byte_25BB3AF = 8;
  strcpy((char *)&qword_25BB398, "_Closure");
  strcpy(&byte_25BB3C7, "\n_BadRoad");
  strcpy((char *)&qword_25BB3B0, "_NoReroute");
  byte_25BB3DF = 8;
  byte_25BB3F7 = 12;
  strcpy((char *)&qword_25BB3E0, "_TollTrailer");
  byte_25BB40F = 12;
  strcpy((char *)&qword_25BB3F8, "_BestTrailer");
  byte_25BB427 = 8;
  strcpy((char *)&qword_25BB410, "_Trailer");
  byte_25BB43F = 18;
  strcpy((char *)&xmmword_25BB428, "_Secondary_Trailer");
  byte_25BB457 = 8;
  strcpy((char *)&qword_25BB440, "_Savings");
  byte_25BB46F = 8;
  strcpy((char *)&qword_25BB458, "_AltRoad");
  byte_25BB487 = 6;
  strcpy((char *)&dword_25BB470, "_Named");
  byte_25BB49F = 6;
  strcpy((char *)&dword_25BB488, "_NAMED");
  byte_25BB4B7 = 22;
  strcpy((char *)&xmmword_25BB4A0, "_Named_Suggested_Route");
  qword_25BB4D0 = 0x1000000000000000;
  xmmword_25BB4C0 = xmmword_20E81D0;
  byte_25BB4EF = 11;
  strcpy((char *)&qword_25BB4D8, "_Speed_Trap");
  byte_25BB507 = 4;
  strcpy((char *)&dword_25BB4F0, "_UGI");
  byte_25BB51F = 12;
  strcpy((char *)&qword_25BB508, "_Safer_Route");
  qword_25BB520 = (uint64_t)operator new(0x20uLL);
  unk_25BB528 = v270[1];
  strcpy((char *)qword_25BB520, "BlockedRouteByBlockingIncident_");
  qword_25BB538 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25BB540 = xmmword_20B9280;
  strcpy((char *)qword_25BB538, "BlockedRouteByManeuverRestriction_");
  qword_25BB550 = (uint64_t)operator new(0x20uLL);
  unk_25BB558 = v270[0];
  strcpy((char *)qword_25BB550, "BlockedRouteByTimeRestriction_");
  qword_25BB568 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BB570 = xmmword_20B8FD0;
  strcpy((char *)qword_25BB568, "SuggestRouteToAvoidBlockingIncident_");
  qword_25BB580 = (uint64_t)operator new(0x30uLL);
  unk_25BB588 = xmmword_20B9380;
  strcpy((char *)qword_25BB580, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25BB598 = (uint64_t)operator new(0x30uLL);
  unk_25BB5A0 = xmmword_20B93E0;
  strcpy((char *)qword_25BB598, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25BB5C7 = 1;
  word_25BB5B0 = 95;
  strcpy((char *)&xmmword_25BB5C8, "IncidentsCausingDelay_");
  HIBYTE(word_25BB5DE) = 22;
  qword_25BB5E0 = (uint64_t)operator new(0x19uLL);
  unk_25BB5E8 = v282;
  strcpy((char *)qword_25BB5E0, "NonVotableRoadIncident_");
  byte_25BB60F = 20;
  strcpy(byte_25BB5F8, "VotableRoadIncident_");
  byte_25BB627 = 13;
  strcpy((char *)&qword_25BB610, "AreaIncident_");
  byte_25BB63F = 15;
  strcpy((char *)&qword_25BB628, "CongestionZone_");
  qword_25BB640 = (uint64_t)operator new(0x20uLL);
  unk_25BB648 = v281;
  strcpy((char *)qword_25BB640, "EVModifiedChargingStops_");
  byte_25BB66F = 13;
  strcpy((char *)&qword_25BB658, "EVDisconnect_");
  byte_25BB687 = 12;
  strcpy((char *)&qword_25BB670, "EVReconnect_");
  qword_25BB688 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BB690 = v279;
  strcpy((char *)qword_25BB688, "EVOfflineToOnlineTransition_");
  byte_25BB6B7 = 13;
  strcpy((char *)&qword_25BB6A0, "EVOfflineSAR_");
  byte_25BB6CF = 21;
  strcpy((char *)&xmmword_25BB6B8, "EVTowingNotSupported_");
  byte_25BB6E7 = 18;
  strcpy(algn_25BB6D0, "EVInfeasibleRoute_");
  qword_25BB6E8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25BB6F0 = xmmword_20B8DF0;
  strcpy((char *)qword_25BB6E8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25BB700 = (uint64_t)operator new(0x40uLL);
  unk_25BB708 = xmmword_20B98C0;
  strcpy((char *)qword_25BB700, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25BB718 = (uint64_t)operator new(0x30uLL);
  unk_25BB720 = v274;
  strcpy((char *)qword_25BB718, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_25BB730 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25BB738 = xmmword_20B9A80;
  strcpy((char *)qword_25BB730, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25BB748 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25BB750 = v273;
  strcpy((char *)qword_25BB748, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_25BB760 = (uint64_t)v186;
  unk_25BB768 = v274;
  _OWORD *v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25BB778 = (uint64_t)operator new(0x28uLL);
  unk_25BB780 = v272;
  strcpy((char *)qword_25BB778, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_25BB790 = (uint64_t)v187;
  unk_25BB798 = *(_OWORD *)&v266[48];
  _OWORD *v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25BB7A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BB7B0 = v276;
  strcpy((char *)qword_25BB7A8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25BB7C0 = (uint64_t)operator new(0x28uLL);
  unk_25BB7C8 = v269;
  strcpy((char *)qword_25BB7C0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25BB7D8 = (uint64_t)operator new(0x20uLL);
  unk_25BB7E0 = v281;
  strcpy((char *)qword_25BB7D8, "OfflineToOnlineNewRoute_");
  qword_25BB7F0 = (uint64_t)operator new(0x40uLL);
  unk_25BB7F8 = xmmword_20B98C0;
  strcpy((char *)qword_25BB7F0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25BB81F = 20;
  strcpy(byte_25BB808, "LPR_OFFLINE_REROUTE_");
  byte_25BB837 = 16;
  strcpy((char *)&xmmword_25BB820, "LPR_OFFLINE_SAR_");
  byte_25BB84F = 20;
  strcpy(byte_25BB838, "LPR_OFFLINE_REROUTE_");
  byte_25BB867 = 16;
  strcpy((char *)&xmmword_25BB850, "LPR_OFFLINE_SAR_");
  byte_25BB87F = 19;
  strcpy(byte_25BB868, "SuggestFasterRoute_");
  qword_25BB880 = (char *)operator new(0x20uLL);
  xmmword_25BB888 = v280;
  strcpy(qword_25BB880, "AreaIncidentSaferReroute_");
  byte_25BB8AF = 12;
  strcpy((char *)&qword_25BB898, "_Remove_Stop");
  byte_25BB8C7 = 13;
  strcpy((char *)&qword_25BB8B0, "_Remove_Stops");
  strcpy(&byte_25BB8DF, "\t_Add_Stops");
  strcpy((char *)&qword_25BB8C8, "_Add_Stop");
  strcpy(&byte_25BB8F7, "\n_Change_Route");
  byte_25BB90F = 13;
  byte_25BB927 = 15;
  strcpy((char *)&qword_25BB910, "_Different_Stop");
  byte_25BB93F = 16;
  strcpy((char *)&xmmword_25BB928, "_Different_Stops");
  byte_25BB957 = 15;
  strcpy((char *)&qword_25BB940, "_EV_Remove_Stop");
  byte_25BB96F = 16;
  strcpy((char *)&xmmword_25BB958, "_EV_Remove_Stops");
  byte_25BB987 = 12;
  strcpy((char *)&qword_25BB970, "_EV_Add_Stop");
  byte_25BB99F = 13;
  strcpy((char *)&qword_25BB988, "_EV_Add_Stops");
  byte_25BB9B7 = 15;
  strcpy((char *)&qword_25BB9A0, "_EV_Low_Battery");
  byte_25BB9CF = 14;
  strcpy((char *)&qword_25BB9B8, "_EV_Infeasible");
  byte_25BB9E7 = 15;
  strcpy((char *)&qword_25BB9D0, "_EV_Last_Chance");
  qword_25BB9E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BB9F0 = v281;
  strcpy((char *)qword_25BB9E8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25BB8E8;
  qword_25BBA00 = (uint64_t)operator new(0x20uLL);
  unk_25BBA08 = v280;
  strcpy((char *)qword_25BBA00, "_EV_Low_Battery_Add_Stops");
  qword_25BBA18 = (uint64_t)operator new(0x19uLL);
  unk_25BBA20 = v282;
  strcpy((char *)qword_25BBA18, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25BB8F7;
  if (byte_25BB8F7 >= 0) {
    size_t v190 = byte_25BB8F7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    v196 = (char *)operator new(v194 + 1);
    qword_25BBA38 = v190 + 14;
    unk_25BBA40 = v195 | 0x8000000000000000;
    qword_25BBA30 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25BBA38) = 0;
    WORD1(qword_25BBA38) = 0;
    HIDWORD(qword_25BBA38) = 0;
    unk_25BBA40 = 0;
    byte_25BBA47 = v190 + 14;
    strcpy((char *)&qword_25BBA30, "_EV_Infe");
    v192 = (char *)&qword_25BBA38 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25BB8E0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  v198 = (char *)operator new(0x20uLL);
  qword_25BBA48 = (uint64_t)v198;
  *(_OWORD *)algn_25BBA50 = v281;
  *(void *)v198 = qword_25BB9D0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25BB9D0 + 7);
  *(void *)(v198 + 15) = qword_25BB8C8;
  v198[23] = word_25BB8D0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    v200 = (uint64_t *)operator new(v201 + 1);
    qword_25BBA68 = v190 + 15;
    unk_25BBA70 = v202 | 0x8000000000000000;
    qword_25BBA60 = (uint64_t)v200;
  }
  else
  {
    v200 = &qword_25BBA60;
    qword_25BBA68 = 0;
    unk_25BBA70 = 0;
    qword_25BBA60 = 0;
    byte_25BBA77 = v190 + 15;
  }
  uint64_t *v200 = qword_25BB9D0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25BB9D0 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_25BB8E0;
    }
    else {
      v204 = (uint64_t *)qword_25BB8E0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25BBA8F = 17;
  strcpy((char *)&xmmword_25BBA78, "_EV_Forced_Detour");
  qword_25BBA90 = (uint64_t)operator new(0x20uLL);
  unk_25BBA98 = v280;
  strcpy((char *)qword_25BBA90, "_EV_Higher_Arrival_Charge");
  qword_25BBAA8 = (uint64_t)operator new(0x28uLL);
  unk_25BBAB0 = xmmword_20B8FD0;
  strcpy((char *)qword_25BBAA8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25BBAD7 = 16;
  strcpy(byte_25BBAC0, "_EV_Out_Of_Range");
  qword_25BBAD8 = (uint64_t)operator new(0x20uLL);
  unk_25BBAE0 = v275;
  strcpy((char *)qword_25BBAD8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25BBAF0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25BBB06) = 22;
  qword_25BBB08 = (uint64_t)operator new(0x19uLL);
  unk_25BBB10 = v282;
  strcpy((char *)qword_25BBB08, "_EV_Forced_Modify_Stops");
  byte_25BBB37 = 19;
  strcpy(byte_25BBB20, "_EV_Forced_Add_Stop");
  byte_25BBB4F = 20;
  strcpy((char *)&xmmword_25BBB38, "_EV_Forced_Add_Stops");
  byte_25BBB67 = 21;
  strcpy(byte_25BBB50, "_EV_Battery_Info_Lost");
  qword_25BBB68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BBB70 = v280;
  strcpy((char *)qword_25BBB68, "_EV_Battery_Info_Restored");
  qword_25BBB80 = (uint64_t)operator new(0x20uLL);
  unk_25BBB88 = v281;
  strcpy((char *)qword_25BBB80, "_EV_Towing_Not_Supported");
  qword_25BBB98 = (uint64_t)operator new(0x28uLL);
  unk_25BBBA0 = v271;
  strcpy((char *)qword_25BBB98, "_EV_Offline_to_Online_Transition");
  byte_25BBBC7 = 15;
  strcpy((char *)&qword_25BBBB0, "_EV_Offline_SAR");
  qword_25BBBC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BBBD0 = v279;
  strcpy((char *)qword_25BBBC8, "_Offline_to_Online_New_Route");
  byte_25BBBF7 = 12;
  strcpy((char *)&qword_25BBBE0, "BannerButton");
  byte_25BBC0F = 8;
  strcpy((char *)&qword_25BBBF8, "_Dismiss");
  byte_25BBC27 = 3;
  word_25BBC10 = 20319;
  byte_25BBC12 = 75;
  byte_25BBC13 = 0;
  byte_25BBC3F = 11;
  strcpy((char *)&qword_25BBC28, "_Still_Here");
  byte_25BBC57 = 8;
  strcpy((char *)&qword_25BBC40, "_Cleared");
  qmemcpy(&byte_25BBC6F, "\nBannerButton", 13);
  strcpy((char *)&qword_25BBC58, "_No_Thanks");
  uint64_t v205 = qword_25BBBE8;
  qword_25BBC80 = 0x1400000000000000;
  *(void *)algn_25BBC7C = 0x7373696D7369445FLL;
  qword_25BBC98 = 0xF00000000000000;
  qword_25BBC90 = 0x4B4F5F6E6F7474;
  int v206 = byte_25BB987;
  if (byte_25BB987 >= 0) {
    size_t v207 = byte_25BB987;
  }
  else {
    size_t v207 = qword_25BB978;
  }
  unint64_t v208 = v207 + 12;
  qword_25BBC88 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_25BBCA8 = v207 + 12;
    unk_25BBCB0 = v211 | 0x8000000000000000;
    qword_25BBCA0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25BBCA8) = 0;
    HIWORD(qword_25BBCA8) = 0;
    unk_25BBCB0 = 0;
    byte_25BBCB7 = v207 + 12;
    strcpy((char *)&qword_25BBCA0, "BannerButton");
    v209 = (char *)&qword_25BBCA8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_25BB970;
  }
  else {
    v213 = (uint64_t *)qword_25BB970;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25BB99F;
  if (byte_25BB99F >= 0) {
    size_t v215 = byte_25BB99F;
  }
  else {
    size_t v215 = unk_25BB990;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_25BBCC0 = v215 + 12;
    unk_25BBCC8 = v219 | 0x8000000000000000;
    qword_25BBCB8 = (uint64_t)v220;
    *(void *)v220 = qword_25BBBE0;
    *((_DWORD *)v220 + 2) = qword_25BBBE8;
    v217 = v220 + 12;
  }
  else
  {
    qword_25BBCC0 = 0;
    unk_25BBCC8 = 0;
    byte_25BBCCF = v215 + 12;
    LODWORD(qword_25BBCC0) = qword_25BBBE8;
    qword_25BBCB8 = qword_25BBBE0;
    v217 = (char *)&qword_25BBCC0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_25BB988;
  }
  else {
    v221 = (uint64_t *)qword_25BB988;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25BB957;
  if (byte_25BB957 >= 0) {
    size_t v223 = byte_25BB957;
  }
  else {
    size_t v223 = unk_25BB948;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25BBCD8 = v223 + 12;
    unk_25BBCE0 = v227 | 0x8000000000000000;
    qword_25BBCD0 = (uint64_t)v228;
    *(void *)v228 = qword_25BBBE0;
    *((_DWORD *)v228 + 2) = qword_25BBBE8;
    v225 = v228 + 12;
  }
  else
  {
    qword_25BBCD8 = 0;
    unk_25BBCE0 = 0;
    byte_25BBCE7 = v223 + 12;
    LODWORD(qword_25BBCD8) = qword_25BBBE8;
    qword_25BBCD0 = qword_25BBBE0;
    v225 = (char *)&qword_25BBCD8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_25BB940;
  }
  else {
    v229 = (uint64_t *)qword_25BB940;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25BBBF7;
  if (byte_25BBBF7 >= 0) {
    size_t v231 = byte_25BBBF7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25BB96F;
  if (byte_25BB96F >= 0) {
    size_t v233 = byte_25BB96F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25BB958 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25BBCE8;
    qword_25BBCF0 = 0;
    unk_25BBCF8 = 0;
    qword_25BBCE8 = 0;
    byte_25BBCFF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25BBCF0 = v233 + v231;
  unk_25BBCF8 = v243 | 0x8000000000000000;
  qword_25BBCE8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_25BBBE0;
    }
    else {
      v236 = (uint64_t *)qword_25BBBE0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_25BB958;
    }
    else {
      v238 = (long long *)xmmword_25BB958;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_25BBD08 = v231 + 11;
    unk_25BBD10 = v245 | 0x8000000000000000;
    qword_25BBD00 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_25BBD00;
    qword_25BBD08 = 0;
    unk_25BBD10 = 0;
    qword_25BBD00 = 0;
    byte_25BBD17 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25BBD00 + 7) = *(_DWORD *)((char *)&qword_25BBC28 + 7);
      qword_25BBD00 = qword_25BBC28;
      BYTE3(qword_25BBD08) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_25BBBE0;
  }
  else {
    v246 = (uint64_t *)qword_25BBBE0;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25BBC28 + 7);
  *(void *)v247 = qword_25BBC28;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_25BBD18;
    qword_25BBD20 = 0;
    unk_25BBD28 = 0;
    qword_25BBD18 = 0;
    byte_25BBD2F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  v249 = (uint64_t *)operator new(v264 + 1);
  qword_25BBD20 = v231 + 8;
  unk_25BBD28 = v265 | 0x8000000000000000;
  qword_25BBD18 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_25BBBE0;
    }
    else {
      v250 = (uint64_t *)qword_25BBBE0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_25BBC40;
  v251[8] = 0;
  int v252 = byte_25BBC6F;
  if (byte_25BBC6F >= 0) {
    size_t v253 = byte_25BBC6F;
  }
  else {
    size_t v253 = qword_25BBC60;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_25BBD30;
    qword_25BBD38 = 0;
    unk_25BBD40 = 0;
    qword_25BBD30 = 0;
    byte_25BBD47 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  v255 = (uint64_t *)operator new(v262 + 1);
  qword_25BBD38 = v253 + v231;
  unk_25BBD40 = v263 | 0x8000000000000000;
  qword_25BBD30 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_25BBBE0;
    }
    else {
      v256 = (uint64_t *)qword_25BBBE0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_25BBC58;
    }
    else {
      v258 = (uint64_t *)qword_25BBC58;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25BBD5F, "\n{newroute}");
  strcpy((char *)&qword_25BBD48, "{roadname}");
  strcpy(&byte_25BBD77, "\n{count}");
  byte_25BBD8F = 7;
  strcpy(&byte_25BBDA7, "\n{dur}");
  strcpy((char *)&qword_25BBD90, "{duration}");
  byte_25BBDBF = 5;
  qword_25BBDC0 = (uint64_t)operator new(0x20uLL);
  unk_25BBDC8 = v278;
  strcpy((char *)qword_25BBDC0, "{PleaseProceedWithCaution}");
  byte_25BBDEF = 15;
  strcpy((char *)&qword_25BBDD8, "{UserRouteName}");
  byte_25BBE07 = 20;
  strcpy((char *)&xmmword_25BBDF0, "{SuggestedRouteName}");
  byte_25BBE1F = 18;
  strcpy(byte_25BBE08, "Speed_Camera_Ahead");
  qword_25BBE20 = (uint64_t)operator new(0x20uLL);
  unk_25BBE28 = v277;
  strcpy((char *)qword_25BBE20, "Red_Light_Camera_Ahead_Spoken");
  qword_25BBE38 = (uint64_t)operator new(0x20uLL);
  unk_25BBE40 = v277;
  strcpy((char *)qword_25BBE38, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25BBE50 = (uint64_t)operator new(0x28uLL);
  unk_25BBE58 = v272;
  strcpy((char *)qword_25BBE50, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25BBE68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BBE70 = v267;
  strcpy((char *)qword_25BBE68, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25BBE80 = (uint64_t)operator new(0x20uLL);
  unk_25BBE88 = v279;
  strcpy((char *)qword_25BBE80, "Camera_Ahead_Multiple_Spoken");
  qword_25BBE98 = (uint64_t)operator new(0x30uLL);
  unk_25BBEA0 = v268;
  strcpy((char *)qword_25BBE98, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25BBEB0 = (char *)operator new(0x30uLL);
  strcpy(qword_25BBEB0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25BBEDF = 16;
  xmmword_25BBEB8 = v268;
  strcpy(byte_25BBEC8, "_Speed_Limit_Mph");
  byte_25BBEF7 = 16;
  strcpy(byte_25BBEE0, "_Speed_Limit_Kph");
  byte_25BBF0F = 11;
  strcpy((char *)&qword_25BBEF8, "Watch_Speed");
  byte_25BBF27 = 4;
  strcpy((char *)&dword_25BBF10, "_One");
  byte_25BBF3F = 4;
  strcpy((char *)&dword_25BBF28, "_Two");
  byte_25BBF57 = 4;
  strcpy((char *)&dword_25BBF40, "_Few");
  byte_25BBF6F = 5;
  strcpy((char *)&dword_25BBF58, "_Many");
  byte_25BBF87 = 6;
  strcpy((char *)&dword_25BBF70, "_Other");
  byte_25BBF9F = 4;
  strcpy((char *)&dword_25BBF88, "_ONE");
  byte_25BBFB7 = 7;
  strcpy((char *)&dword_25BBFA0, "{Speed}");
  byte_25BBFCF = 8;
  strcpy((char *)&qword_25BBFB8, "Dismount");
  byte_25BBFE7 = 4;
  strcpy((char *)&dword_25BBFD0, "Walk");
  byte_25BBFFF = 5;
  strcpy((char *)&dword_25BBFE8, "Mount");
  byte_25BC017 = 7;
  strcpy((char *)&dword_25BC000, "Remount");
  strcpy(&byte_25BC02F, "\t_Crosswalk");
  strcpy((char *)&qword_25BC018, "Walk_Road");
  strcpy(&byte_25BC047, "\n_PLURAL");
  byte_25BC05F = 7;
  strcpy(&byte_25BC077, "\n{description1}");
  strcpy((char *)&qword_25BC060, "_SECONDARY");
  byte_25BC08F = 14;
  byte_25BC0A7 = 14;
  strcpy((char *)&qword_25BC090, "{description2}");
  byte_25BC0BF = 21;
  strcpy((char *)&xmmword_25BC0A8, "TWO_ROAD_DESCRIPTIONS");
  byte_25BC0D7 = 17;
  strcpy((char *)&xmmword_25BC0C0, "{SlopePercentage}");
  byte_25BC0EF = 15;
  strcpy((char *)&qword_25BC0D8, "_Protected_Lane");
  strcpy(&byte_25BC107, "\n_Paved_Path");
  strcpy((char *)&qword_25BC0F0, "_Bike_Path");
  byte_25BC11F = 11;
  byte_25BC137 = 15;
  strcpy((char *)&qword_25BC120, "_Dedicated_Lane");
  byte_25BC14F = 12;
  strcpy((char *)&qword_25BC138, "_Shared_Path");
  strcpy(&byte_25BC167, "\n_UnnamedRoad");
  strcpy((char *)&qword_25BC150, "_Bike_Lane");
  byte_25BC17F = 12;
  byte_25BC197 = 5;
  strcpy((char *)&dword_25BC180, "_Path");
  byte_25BC1AF = 6;
  strcpy((char *)&dword_25BC198, "_Trail");
  strcpy(&byte_25BC1C7, "\t_Plaza");
  strcpy((char *)&qword_25BC1B0, "_Sidewalk");
  byte_25BC1DF = 6;
  byte_25BC1F7 = 15;
  strcpy((char *)&qword_25BC1E0, "_Moving_Walkway");
  byte_25BC20F = 14;
  strcpy((char *)&qword_25BC1F8, "Two_Stage_Turn");
  byte_25BC227 = 16;
  strcpy((char *)&xmmword_25BC210, "{OptionalPeriod}");
  byte_25BC23F = 18;
  strcpy((char *)&xmmword_25BC228, "Advisory_Separator");
  byte_25BC257 = 6;
  strcpy((char *)&dword_25BC240, "Period");
  byte_25BC26F = 21;
  strcpy((char *)&xmmword_25BC258, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25BC270, "Advisory_Title_Notices");
  HIBYTE(word_25BC286) = 22;
  byte_25BC29F = 7;
  strcpy((char *)&dword_25BC288, "_DETAIL");
  byte_25BC2B7 = 17;
  strcpy((char *)&xmmword_25BC2A0, "_LONG_REGION_LIST");
  byte_25BC2CF = 16;
  strcpy((char *)&xmmword_25BC2B8, "Advisory_Grouped");
  byte_25BC2E7 = 11;
  strcpy((char *)&qword_25BC2D0, "_Advisories");
  qword_25BC2E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BC2F0 = v275;
  strcpy((char *)qword_25BC2E8, "Advisory_WILDFIRE_METADATA_");
  byte_25BC317 = 8;
  strcpy((char *)&qword_25BC300, "Advisory");
  byte_25BC32F = 13;
  strcpy((char *)&qword_25BC318, "MPR_NUM_STOPS");
  byte_25BC347 = 17;
  strcpy(algn_25BC330, "EV_CHARGE_STATION");
  byte_25BC35F = 11;
  strcpy((char *)&qword_25BC348, "_NAMED_CITY");
  byte_25BC377 = 5;
  strcpy((char *)&dword_25BC360, "_Stop");
  strcpy(&byte_25BC38F, "\n{StopsCount}");
  strcpy((char *)&qword_25BC378, "{CityName}");
  byte_25BC3A7 = 12;
  byte_25BC3BF = 11;
  strcpy((char *)&qword_25BC3A8, "_With_Other");
  byte_25BC3D7 = 15;
  strcpy((char *)&qword_25BC3C0, "{DepartureTime}");
  qword_25BC3D8 = (uint64_t)operator new(0x28uLL);
  unk_25BC3E0 = v276;
  strcpy((char *)qword_25BC3D8, "Ending_Charge_Station_Port_Availability");
  qword_25BC3F0 = (uint64_t)operator new(0x28uLL);
  unk_25BC3F8 = v269;
  strcpy((char *)qword_25BC3F0, "Ending_Charge_Station_No_Availability");
  qword_25BC408 = (uint64_t)operator new(0x28uLL);
  unk_25BC410 = v272;
  strcpy((char *)qword_25BC408, "Ending_Charge_Station_No_Real_Time");
  byte_25BC437 = 16;
  strcpy(byte_25BC420, "{AvailablePorts}");
  byte_25BC44F = 12;
  strcpy((char *)&qword_25BC438, "{TotalPorts}");
  byte_25BC467 = 14;
  strcpy((char *)&qword_25BC450, "{ManeuverIcon}");
  qword_25BC468 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25BC470 = xmmword_20B9A60;
  strcpy((char *)qword_25BC468, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25BC480 = (uint64_t)operator new(0x20uLL);
  unk_25BC488 = v275;
  strcpy((char *)qword_25BC480, "Walking_Destination_Unnamed");
  qword_25BC498 = (uint64_t)operator new(0x20uLL);
  unk_25BC4A0 = v277;
  strcpy((char *)qword_25BC498, "TrafficDelay_Label_Title_Sign");
  qword_25BC4B0 = (uint64_t)operator new(0x20uLL);
  unk_25BC4B8 = v279;
  strcpy((char *)qword_25BC4B0, "Special_Guidance_Instruction");
  byte_25BC4DF = 2;
  strcpy((char *)&word_25BC4C8, "CZ");
  byte_25BC4F7 = 3;
  dword_25BC4E0 = 5919811;
  unk_25BC50F = 3;
  dword_25BC4F8 = 6243649;
  byte_25BC527 = 0;
  byte_25BC53F = 7;
  strcpy((char *)&dword_25BC528, "TRANSIT");
  byte_25BC557 = 7;
  strcpy((char *)&dword_25BC540, "OFFLINE");
  qword_25BC558 = (uint64_t)operator new(0x28uLL);
  unk_25BC560 = v267;
  strcpy((char *)qword_25BC558, "Advisory_Card_French_Climate_Law_Title");
  qword_25BC570 = (uint64_t)operator new(0x30uLL);
  unk_25BC578 = xmmword_20B93C0;
  strcpy((char *)qword_25BC570, "Advisory_Card_French_Climate_Law_Details");
  qword_25BC588 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25BC590 = v273;
  strcpy((char *)qword_25BC588, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25BC5A0 = (uint64_t)operator new(0x20uLL);
  unk_25BC5A8 = v279;
  strcpy((char *)qword_25BC5A0, "{ClimateLawLearnMoreWeblink}");
  byte_25BC5CF = 3;
  dword_25BC5B8 = 4280902;
  qword_25BC5D0 = (uint64_t)operator new(0x70uLL);
  unk_25BC5D8 = xmmword_20E81E0;
  strcpy((char *)qword_25BC5D0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25BC678 = 0u;
  xmmword_25BC688 = 0u;
  dword_25BC698 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25BC678, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25BC678, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25BC678, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25BC678, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25BC5FF = 8;
  strcpy((char *)&qword_25BC5E8, "any_mode");
  byte_25BC617 = 7;
  strcpy((char *)&dword_25BC600, "cycling");
  byte_25BC62F = 7;
  strcpy((char *)&dword_25BC618, "driving");
  byte_25BC647 = 7;
  strcpy((char *)&dword_25BC630, "walking");
  qword_25BC648 = 0;
  unk_25BC650 = 0;
  qword_25BC658 = 0;
  v259 = (char *)operator new(9uLL);
  *(void *)v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25BC648 = (uint64_t)v259;
  unk_25BC650 = v259 + 9;
  qword_25BC658 = (uint64_t)(v259 + 9);
  qword_25BC660 = 0;
  qword_25BC668 = 0;
  unk_25BC670 = 0;
  v260 = (char *)operator new(9uLL);
  qword_25BC668 = (uint64_t)(v260 + 9);
  unk_25BC670 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25BC660 = (uint64_t)v260;
  return result;
}

void sub_7B8944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_7B8C9C(uint64_t result, _DWORD *a2)
{
  *(unsigned char *)(result + 1162) = (*a2 & 0xFFFFFFFD) != 1;
  return result;
}

void sub_7B8CB4()
{
  byte_25BC6B7 = 1;
  word_25BC6A0 = 65;
  byte_25BC6CF = 1;
  word_25BC6B8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25BC6D0 = 0u;
  *(_OWORD *)&qword_25BC6E0 = 0u;
  dword_25BC6F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25BC6D0, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25BC6D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25BC6D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25BC6D0, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v0[0]);
    return;
  }
LABEL_8:
  operator delete(v3[0]);
  if (v1 < 0) {
    goto LABEL_9;
  }
}

void sub_7B8E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25BC6E0) {
    sub_20AAFEC((void **)qword_25BC6E0);
  }
  uint64_t v37 = (void *)xmmword_25BC6D0;
  *(void *)&xmmword_25BC6D0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_7B8F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a3 + 1407);
  char v17 = 11;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteTagger");
  size_t v13 = 0;
  unint64_t v14 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB2F0(v5, (uint64_t)__p);
  sub_7BBA14(a1 + 16, __p);
  unint64_t v6 = v19;
  if (v19)
  {
    do
    {
      int v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      unint64_t v6 = v11;
    }
    while (v11);
  }
  char v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    char v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      char v10 = v13;
    }
    unint64_t v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  sub_4BBDC0(a1 + 152, a3);
  return a1;
}

void sub_7B907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7B90B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3 != a3[1] && *(unsigned char *)(a1 + 16))
  {
    sub_7B911C(a1, a3);
    sub_7B9DCC(a1, (uint64_t **)a3);
  }
}

void sub_7B911C(uint64_t a1, uint64_t *a2)
{
  uint64_t v85 = 0;
  int v86 = 0;
  unint64_t v87 = 0;
  v82 = 0;
  v83 = 0;
  unint64_t v84 = 0;
  uint64_t v2 = *a2;
  uint64_t v76 = a2[1];
  if (*a2 == v76)
  {
    int v51 = 0;
    unint64_t v55 = 0;
    goto LABEL_138;
  }
  while (2)
  {
    uint64_t v77 = v2;
    int v3 = (uint64_t *)sub_648B60(v2);
    long long __p = 0;
    size_t v80 = 0;
    uint64_t v81 = 0;
    sub_510340((uint64_t)&__p, *v3, v3[1], 0xAF8AF8AF8AF8AF8BLL * ((v3[1] - *v3) >> 5));
    char v4 = (char *)__p;
    size_t v78 = v80;
    if (__p == v80)
    {
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_103;
    }
    do
    {
      if (!v4[1112])
      {
LABEL_136:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (!sub_604320((uint64_t)(v4 + 680), 0)) {
        goto LABEL_14;
      }
      int v5 = v86;
      if ((unint64_t)v86 < v87)
      {
        sub_4BE9F4((uint64_t)v86, (uint64_t)v4);
        int v86 = v5 + 1120;
LABEL_14:
        if (!v4[1112]) {
          goto LABEL_136;
        }
        goto LABEL_15;
      }
      unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v86 - (unsigned char *)v85) >> 5);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x3A83A83A83A83ALL) {
        goto LABEL_178;
      }
      if (0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5) > v9) {
        unint64_t v9 = 0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5);
      }
      if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v87 - (void)v85) >> 5) >= 0x1D41D41D41D41DLL) {
        unint64_t v10 = 0x3A83A83A83A83ALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v92 = &v87;
      if (v10)
      {
        if (v10 > 0x3A83A83A83A83ALL) {
          goto LABEL_177;
        }
        int v11 = (char *)operator new(1120 * v10);
      }
      else
      {
        int v11 = 0;
      }
      unint64_t v88 = v11;
      v89 = &v11[1120 * v8];
      uint64_t v90 = v89;
      uint64_t v91 = &v11[1120 * v10];
      sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
      uint64_t v16 = v89;
      char v17 = v90 + 1120;
      unint64_t v18 = (char *)v85;
      uint64_t v19 = v86;
      if (v86 == v85)
      {
        uint64_t v85 = v89;
        int v86 = v90 + 1120;
        unint64_t v87 = (unint64_t)v91;
        if (v19) {
          goto LABEL_65;
        }
      }
      else
      {
        do
        {
          v19 -= 1120;
          uint64_t v16 = (void *)sub_4C09FC((uint64_t)v16 - 1120, (uint64_t)v19);
        }
        while (v19 != v18);
        uint64_t v19 = (char *)v85;
        uint64_t v20 = v86;
        uint64_t v85 = v16;
        int v86 = v17;
        unint64_t v87 = (unint64_t)v91;
        if (v20 != v19)
        {
          for (uint64_t i = 0; &v20[i] != v19; i -= 1120)
          {
            long long v22 = &v20[i];
            if (v20[i - 8])
            {
              sub_3A6CB8((uint64_t)(v22 - 440));
              *(v22 - 8) = 0;
            }
            *((void *)v22 - 60) = off_2438EC8;
            if (*(v22 - 449) < 0) {
              operator delete(*(void **)&v20[i - 472]);
            }
            int v23 = (void **)&v20[i];
            size_t v24 = &v20[i - 488];
            if (*v24) {
              *size_t v24 = 0;
            }
            if (*((char *)v23 - 505) < 0)
            {
              operator delete(*(void **)&v20[i - 528]);
              size_t v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0)
              {
LABEL_49:
                if ((*((char *)v25 - 561) & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_59;
              }
            }
            else
            {
              size_t v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0) {
                goto LABEL_49;
              }
            }
            operator delete(*(v25 - 70));
            if ((*((char *)v25 - 561) & 0x80000000) == 0)
            {
LABEL_50:
              unint64_t v26 = (void **)&v20[i];
              if ((v20[i - 601] & 0x80000000) == 0) {
                goto LABEL_51;
              }
              goto LABEL_60;
            }
LABEL_59:
            operator delete(*(void **)&v20[i - 584]);
            unint64_t v26 = (void **)&v20[i];
            if ((v20[i - 601] & 0x80000000) == 0)
            {
LABEL_51:
              if ((*((char *)v26 - 633) & 0x80000000) == 0) {
                goto LABEL_52;
              }
              goto LABEL_61;
            }
LABEL_60:
            operator delete(*(v26 - 78));
            if ((*((char *)v26 - 633) & 0x80000000) == 0)
            {
LABEL_52:
              int v27 = (void **)&v20[i];
              if (v20[i - 657] < 0) {
                goto LABEL_62;
              }
              goto LABEL_53;
            }
LABEL_61:
            operator delete(*(v23 - 82));
            int v27 = (void **)&v20[i];
            if (v20[i - 657] < 0)
            {
LABEL_62:
              operator delete(*(v27 - 85));
              int v28 = (char *)(v27 - 86);
              if (!*((unsigned char *)v27 - 688)) {
                goto LABEL_55;
              }
LABEL_54:
              *int v28 = 0;
              goto LABEL_55;
            }
LABEL_53:
            int v28 = (char *)(v27 - 86);
            if (*((unsigned char *)v27 - 688)) {
              goto LABEL_54;
            }
LABEL_55:
            sub_29D95C((uint64_t)(v22 - 1120));
          }
        }
        if (v19) {
LABEL_65:
        }
          operator delete(v19);
      }
      int v86 = v17;
      if (!v4[1112]) {
        goto LABEL_136;
      }
LABEL_15:
      if (sub_604320((uint64_t)(v4 + 680), 1))
      {
        unint64_t v6 = v83;
        if ((unint64_t)v83 < v84)
        {
          sub_4BE9F4((uint64_t)v83, (uint64_t)v4);
          char v7 = v6 + 1120;
LABEL_8:
          v83 = v7;
          goto LABEL_9;
        }
        unint64_t v12 = 0xAF8AF8AF8AF8AF8BLL * ((v83 - (unsigned char *)v82) >> 5);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x3A83A83A83A83ALL) {
LABEL_178:
        }
          sub_2E00();
        if (0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5) > v13) {
          unint64_t v13 = 0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5);
        }
        if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v84 - (void)v82) >> 5) >= 0x1D41D41D41D41DLL) {
          unint64_t v14 = 0x3A83A83A83A83ALL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v92 = &v84;
        if (v14)
        {
          if (v14 > 0x3A83A83A83A83ALL) {
LABEL_177:
          }
            sub_188D718();
          uint64_t v15 = (char *)operator new(1120 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v88 = v15;
        v89 = &v15[1120 * v12];
        uint64_t v90 = v89;
        uint64_t v91 = &v15[1120 * v14];
        sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
        uint64_t v29 = v89;
        char v7 = v90 + 1120;
        uint64_t v30 = (char *)v82;
        int v31 = v83;
        if (v83 == v82)
        {
          v82 = v89;
          v83 = v90 + 1120;
          unint64_t v84 = (unint64_t)v91;
          if (!v31) {
            goto LABEL_8;
          }
        }
        else
        {
          do
          {
            v31 -= 1120;
            uint64_t v29 = (void *)sub_4C09FC((uint64_t)v29 - 1120, (uint64_t)v31);
          }
          while (v31 != v30);
          int v31 = (char *)v82;
          size_t v32 = v83;
          v82 = v29;
          v83 = v7;
          unint64_t v84 = (unint64_t)v91;
          if (v32 != v31)
          {
            for (uint64_t j = 0; &v32[j] != v31; j -= 1120)
            {
              unint64_t v34 = &v32[j];
              if (v32[j - 8])
              {
                sub_3A6CB8((uint64_t)(v34 - 440));
                *(v34 - 8) = 0;
              }
              *((void *)v34 - 60) = off_2438EC8;
              if (*(v34 - 449) < 0) {
                operator delete(*(void **)&v32[j - 472]);
              }
              unint64_t v35 = (void **)&v32[j];
              std::string v36 = &v32[j - 488];
              if (*v36) {
                *std::string v36 = 0;
              }
              if (*((char *)v35 - 505) < 0)
              {
                operator delete(*(void **)&v32[j - 528]);
                uint64_t v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0)
                {
LABEL_83:
                  if ((*((char *)v37 - 561) & 0x80000000) == 0) {
                    goto LABEL_84;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                uint64_t v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0) {
                  goto LABEL_83;
                }
              }
              operator delete(*(v37 - 70));
              if ((*((char *)v37 - 561) & 0x80000000) == 0)
              {
LABEL_84:
                int v38 = (void **)&v32[j];
                if ((v32[j - 601] & 0x80000000) == 0) {
                  goto LABEL_85;
                }
                goto LABEL_94;
              }
LABEL_93:
              operator delete(*(void **)&v32[j - 584]);
              int v38 = (void **)&v32[j];
              if ((v32[j - 601] & 0x80000000) == 0)
              {
LABEL_85:
                if ((*((char *)v38 - 633) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_95;
              }
LABEL_94:
              operator delete(*(v38 - 78));
              if ((*((char *)v38 - 633) & 0x80000000) == 0)
              {
LABEL_86:
                uint64_t v39 = (void **)&v32[j];
                if (v32[j - 657] < 0) {
                  goto LABEL_96;
                }
                goto LABEL_87;
              }
LABEL_95:
              operator delete(*(v35 - 82));
              uint64_t v39 = (void **)&v32[j];
              if (v32[j - 657] < 0)
              {
LABEL_96:
                operator delete(*(v39 - 85));
                uint64_t v40 = (char *)(v39 - 86);
                if (!*((unsigned char *)v39 - 688)) {
                  goto LABEL_89;
                }
LABEL_88:
                *uint64_t v40 = 0;
                goto LABEL_89;
              }
LABEL_87:
              uint64_t v40 = (char *)(v39 - 86);
              if (*((unsigned char *)v39 - 688)) {
                goto LABEL_88;
              }
LABEL_89:
              sub_29D95C((uint64_t)(v34 - 1120));
            }
          }
          if (!v31) {
            goto LABEL_8;
          }
        }
        operator delete(v31);
        goto LABEL_8;
      }
LABEL_9:
      v4 += 1120;
    }
    while (v4 != v78);
    char v4 = (char *)__p;
    if (!__p) {
      goto LABEL_4;
    }
LABEL_103:
    int v41 = v80;
    int v42 = v4;
    if (v80 == v4) {
      goto LABEL_3;
    }
    uint64_t v43 = 0;
    do
    {
      unint64_t v44 = &v41[v43];
      if (v41[v43 - 8])
      {
        sub_3A6CB8((uint64_t)(v44 - 440));
        *(v44 - 8) = 0;
      }
      *((void *)v44 - 60) = off_2438EC8;
      if (*(v44 - 449) < 0) {
        operator delete(*(void **)&v41[v43 - 472]);
      }
      unint64_t v45 = (void **)&v41[v43];
      uint64_t v46 = &v41[v43 - 488];
      if (*v46) {
        *uint64_t v46 = 0;
      }
      if (*((char *)v45 - 505) < 0)
      {
        operator delete(*(void **)&v41[v43 - 528]);
        long long v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0)
        {
LABEL_113:
          if ((*((char *)v47 - 561) & 0x80000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_123;
        }
      }
      else
      {
        long long v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0) {
          goto LABEL_113;
        }
      }
      operator delete(*(v47 - 70));
      if ((*((char *)v47 - 561) & 0x80000000) == 0)
      {
LABEL_114:
        int v48 = (void **)&v41[v43];
        if ((v41[v43 - 601] & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_124;
      }
LABEL_123:
      operator delete(*(void **)&v41[v43 - 584]);
      int v48 = (void **)&v41[v43];
      if ((v41[v43 - 601] & 0x80000000) == 0)
      {
LABEL_115:
        if ((*((char *)v48 - 633) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete(*(v48 - 78));
      if ((*((char *)v48 - 633) & 0x80000000) == 0)
      {
LABEL_116:
        uint64_t v49 = (void **)&v41[v43];
        if ((v41[v43 - 657] & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(*(v45 - 82));
      uint64_t v49 = (void **)&v41[v43];
      if ((v41[v43 - 657] & 0x80000000) == 0)
      {
LABEL_117:
        long long v50 = (char *)(v49 - 86);
        if (!*((unsigned char *)v49 - 688)) {
          goto LABEL_119;
        }
LABEL_118:
        *long long v50 = 0;
        goto LABEL_119;
      }
LABEL_126:
      operator delete(*(v49 - 85));
      long long v50 = (char *)(v49 - 86);
      if (*((unsigned char *)v49 - 688)) {
        goto LABEL_118;
      }
LABEL_119:
      sub_29D95C((uint64_t)(v44 - 1120));
      v43 -= 1120;
    }
    while (&v41[v43] != v4);
    int v42 = __p;
LABEL_3:
    size_t v80 = v4;
    operator delete(v42);
LABEL_4:
    uint64_t v2 = v77 + 7560;
    if (v77 + 7560 != v76) {
      continue;
    }
    break;
  }
  size_t v52 = (char *)v82;
  int v51 = v83;
  if (v82 == v83)
  {
    unint64_t v55 = v83;
    goto LABEL_138;
  }
  do
  {
    BOOL v53 = sub_6054A8((uint64_t)v52);
    v52 += 1120;
  }
  while (v52 != v51 && v53);
  if (v53)
  {
    unint64_t v55 = v82;
    int v51 = v83;
LABEL_138:
    unint64_t v57 = (char *)sub_7C29DC((uint64_t)v55, (uint64_t)v51, (uint64_t *)&v82);
    size_t v58 = v83;
    if (v83 != v57)
    {
      while (v58 != v57)
      {
        v58 -= 1120;
        sub_3A6B94((uint64_t)v58);
      }
      v83 = v57;
    }
  }
  long long v60 = (char *)v85;
  long long v59 = v86;
  if (v85 == v86)
  {
    long long v63 = v85;
    goto LABEL_151;
  }
  do
  {
    BOOL v61 = sub_6054A8((uint64_t)v60);
    v60 += 1120;
  }
  while (v60 != v59 && v61);
  if (v61)
  {
    long long v63 = v85;
    long long v60 = v86;
LABEL_151:
    uint64_t v64 = (char *)sub_7C29DC((uint64_t)v63, (uint64_t)v60, (uint64_t *)&v85);
    long long v65 = v86;
    if (v86 != v64)
    {
      while (v65 != v64)
      {
        v65 -= 1120;
        sub_3A6B94((uint64_t)v65);
      }
      int v86 = v64;
    }
  }
  uint64_t v67 = *a2;
  uint64_t v66 = a2[1];
  if (*a2 != v66)
  {
    while (2)
    {
      int v68 = (void *)sub_648B60(v67);
      if (*v68 == v68[1])
      {
        if (v82 != v83)
        {
          sub_7BB558((uint64_t *)&v82, 1, (uint64_t)&v88);
          sub_64A284(v67, (uint64_t)&v88);
          goto LABEL_164;
        }
      }
      else if (v85 != v86)
      {
        sub_7BB558((uint64_t *)&v85, 0, (uint64_t)&v88);
        sub_64A284(v67, (uint64_t)&v88);
LABEL_164:
        if (v93) {
          sub_3A6B94((uint64_t)&v90);
        }
      }
      v67 += 7560;
      if (v67 == v66) {
        break;
      }
      continue;
    }
  }
  size_t v69 = (char *)v82;
  if (v82)
  {
    unint64_t v70 = v83;
    uint64_t v71 = v82;
    if (v83 != v82)
    {
      do
        unint64_t v70 = (char *)sub_3A6B94((uint64_t)(v70 - 1120));
      while (v70 != v69);
      uint64_t v71 = v82;
    }
    v83 = v69;
    operator delete(v71);
  }
  v72 = (char *)v85;
  if (v85)
  {
    uint64_t v73 = v86;
    int v74 = v85;
    if (v86 != v85)
    {
      do
        uint64_t v73 = (char *)sub_3A6B94((uint64_t)(v73 - 1120));
      while (v73 != v72);
      int v74 = v85;
    }
    int v86 = v72;
    operator delete(v74);
  }
}

void sub_7B9D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7B9D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50E790((void **)va);
  JUMPOUT(0x7B9DB4);
}

void sub_7B9DCC(uint64_t a1, uint64_t **a2)
{
  if (0xBAA6550FFBAA6551 * (a2[1] - *a2) < 2 || !*(unsigned char *)(a1 + 16)) {
    return;
  }
  int v3 = a2;
  uint64_t v4 = sub_79B798(a2, 0);
  int v5 = sub_646CE8(v4);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  double v7 = ceil((double)(int)(v5 / 10+ (((103 * (char)(v6 + v5 % 10)) >> 15) & 1)+ ((103 * (char)(v6 + v5 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  uint64_t v155 = a1;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_14;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_14;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_14:
  int v9 = sub_6488A0(*v3);
  int v151 = sub_6487C0(*v3);
  int v149 = sub_64A6C0(*v3);
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  unint64_t v164 = 0;
  uint64_t v10 = sub_646C34(*v3);
  int v11 = (char *)operator new(8uLL);
  *(void *)int v11 = v10;
  uint64_t v162 = v11;
  unint64_t v164 = (unint64_t)(v11 + 8);
  uint64_t v163 = v11 + 8;
  unint64_t v159 = 0;
  v160 = 0;
  uint64_t v161 = 0;
  double v12 = sub_7BB2DC((double *)a1, *v3);
  unint64_t v13 = (double *)operator new(8uLL);
  double *v13 = v12;
  unint64_t v159 = v13;
  uint64_t v161 = v13 + 1;
  v160 = v13 + 1;
  long long __p = 0;
  int v157 = 0;
  unint64_t v158 = 0;
  uint64_t v14 = sub_64894C(*v3);
  uint64_t v15 = (char *)operator new(8uLL);
  *(void *)uint64_t v15 = v14;
  long long __p = v15;
  unint64_t v158 = (unint64_t)(v15 + 8);
  int v157 = v15 + 8;
  unint64_t v16 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
  if (v16 <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
  }
  unint64_t v139 = v17;
  v153 = v3;
  if (v16 >= 2)
  {
    unint64_t v154 = 0;
    unint64_t v18 = 0;
    unint64_t v55 = 1;
    int v142 = (int)v7;
    while (1)
    {
      int v56 = (uint64_t *)sub_79B798(v3, v55);
      int v57 = sub_646CE8((uint64_t)v56);
      if (v57 < 0) {
        char v58 = -5;
      }
      else {
        char v58 = 5;
      }
      double v59 = ceil((double)(int)(v57 / 10+ (((103 * (char)(v58 + v57 % 10)) >> 15) & 1)+ ((103 * (char)(v58 + v57 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
      if (v59 >= 0.0)
      {
        unint64_t v60 = v154;
        if (v59 >= 4.50359963e15) {
          goto LABEL_124;
        }
        uint64_t v61 = (uint64_t)(v59 + v59) + 1;
      }
      else
      {
        unint64_t v60 = v154;
        if (v59 <= -4.50359963e15) {
          goto LABEL_124;
        }
        uint64_t v61 = (uint64_t)(v59 + v59);
        if (v61 >= 1) {
          --v61;
        }
      }
      double v59 = (double)(v61 >> 1);
LABEL_124:
      if (v142 == (int)v59)
      {
        unint64_t v154 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
        goto LABEL_141;
      }
      if (v142 > (int)v59) {
        unint64_t v60 = v55;
      }
      unint64_t v154 = v60;
      if (v60 < 0xBAA6550FFBAA6551 * (v3[1] - *v3))
      {
        uint64_t v62 = sub_79B798(v3, v60);
        int v63 = sub_646CE8(v62);
        if (v63 < 0) {
          char v64 = -5;
        }
        else {
          char v64 = 5;
        }
        double v65 = ceil((double)(int)(v63 / 10+ (((103 * (char)(v64 + v63 % 10)) >> 15) & 1)+ ((103 * (char)(v64 + v63 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
        if (v65 >= 0.0)
        {
          if (v65 < 4.50359963e15)
          {
            uint64_t v66 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_139;
          }
        }
        else if (v65 > -4.50359963e15)
        {
          uint64_t v66 = (uint64_t)(v65 + v65);
          if (v66 >= 1) {
            --v66;
          }
LABEL_139:
          double v65 = (double)(v66 >> 1);
        }
        int v142 = (int)v65;
      }
LABEL_141:
      BOOL v67 = sub_6488A0(v56);
      int v68 = sub_6487C0(v56);
      int v144 = sub_64A6C0(v56);
      int v145 = v68;
      BOOL v69 = v67;
      unint64_t v148 = v18;
      int v146 = v9;
      uint64_t v70 = sub_646C34(v56);
      uint64_t v71 = v70;
      v72 = v163;
      if ((unint64_t)v163 < v164)
      {
        *(void *)uint64_t v163 = v70;
        uint64_t v73 = v72 + 8;
        int v74 = (double *)v155;
        goto LABEL_164;
      }
      int v75 = (char *)v162;
      uint64_t v76 = v163 - (unsigned char *)v162;
      int64_t v77 = (v163 - (unsigned char *)v162) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v79 = v164 - (void)v162;
      if ((uint64_t)(v164 - (void)v162) >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        if (v80 >> 61) {
          sub_188D718();
        }
        uint64_t v81 = operator new(8 * v80);
        v82 = &v81[8 * v77];
        *(void *)v82 = v71;
        uint64_t v73 = v82 + 8;
        if (v72 != v75)
        {
LABEL_152:
          unint64_t v83 = v72 - 8 - v75;
          if (v83 < 0x58)
          {
            int v74 = (double *)v155;
            goto LABEL_161;
          }
          unint64_t v84 = v72 - &v81[v76];
          int v74 = (double *)v155;
          if (v84 < 0x20) {
            goto LABEL_219;
          }
          uint64_t v85 = (v83 >> 3) + 1;
          uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v87 = &v72[-v86];
          v82 -= v86;
          unint64_t v88 = &v81[8 * v77 - 16];
          v89 = v72 - 16;
          uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *(v88 - 1) = *((_OWORD *)v89 - 1);
            *unint64_t v88 = v91;
            v88 -= 2;
            v89 -= 32;
            v90 -= 4;
          }
          while (v90);
          v72 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_219:
            do
            {
LABEL_161:
              uint64_t v92 = *((void *)v72 - 1);
              v72 -= 8;
              *((void *)v82 - 1) = v92;
              v82 -= 8;
            }
            while (v72 != v75);
          }
          v72 = (char *)v162;
          uint64_t v162 = v82;
          unint64_t v164 = (unint64_t)&v81[8 * v80];
          if (!v72) {
            goto LABEL_164;
          }
LABEL_163:
          operator delete(v72);
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v81 = 0;
        v82 = (char *)(8 * v77);
        *(void *)(8 * v77) = v71;
        uint64_t v73 = (char *)(8 * v77 + 8);
        if (v72 != v75) {
          goto LABEL_152;
        }
      }
      int v74 = (double *)v155;
      uint64_t v162 = v82;
      unint64_t v164 = (unint64_t)&v81[8 * v80];
      if (v72) {
        goto LABEL_163;
      }
LABEL_164:
      uint64_t v163 = v73;
      double v93 = sub_7BB2DC(v74, v56);
      double v94 = v93;
      uint64_t v95 = v160;
      if (v160 < v161)
      {
        double *v160 = v93;
        uint64_t v96 = (uint64_t)(v95 + 1);
        goto LABEL_185;
      }
      uint64_t v97 = (double *)v159;
      int64_t v98 = (char *)v160 - (unsigned char *)v159;
      uint64_t v99 = ((char *)v160 - (unsigned char *)v159) >> 3;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v101 = (char *)v161 - (unsigned char *)v159;
      if (((char *)v161 - (unsigned char *)v159) >> 2 > v100) {
        unint64_t v100 = v101 >> 2;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 61) {
          sub_188D718();
        }
        uint64_t v103 = (char *)operator new(8 * v102);
        uint64_t v104 = (double *)&v103[8 * v99];
        *uint64_t v104 = v94;
        uint64_t v96 = (uint64_t)(v104 + 1);
        if (v95 == v97) {
          goto LABEL_183;
        }
LABEL_177:
        unint64_t v105 = (char *)(v95 - 1) - (char *)v97;
        if (v105 < 0x58) {
          goto LABEL_220;
        }
        if ((unint64_t)((char *)v95 - &v103[v98]) < 0x20) {
          goto LABEL_220;
        }
        uint64_t v106 = (v105 >> 3) + 1;
        uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
        size_t v108 = &v95[v107 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v104 = (double *)((char *)v104 - v107);
        int v109 = &v103[8 * v99 - 16];
        size_t v110 = v95 - 2;
        uint64_t v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v112 = *(_OWORD *)v110;
          *((_OWORD *)v109 - 1) = *((_OWORD *)v110 - 1);
          *(_OWORD *)int v109 = v112;
          v109 -= 32;
          v110 -= 4;
          v111 -= 4;
        }
        while (v111);
        uint64_t v95 = v108;
        if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_220:
          do
          {
            uint64_t v113 = *((void *)v95-- - 1);
            *((void *)v104-- - 1) = v113;
          }
          while (v95 != v97);
        }
        goto LABEL_183;
      }
      uint64_t v103 = 0;
      uint64_t v104 = (double *)(8 * v99);
      *(double *)(8 * v99) = v93;
      uint64_t v96 = 8 * v99 + 8;
      if (v95 != v97) {
        goto LABEL_177;
      }
LABEL_183:
      unint64_t v159 = v104;
      uint64_t v161 = (double *)&v103[8 * v102];
      if (v97) {
        operator delete(v97);
      }
LABEL_185:
      v160 = (double *)v96;
      uint64_t v114 = sub_64894C(v56);
      uint64_t v115 = v114;
      v116 = v157;
      if ((unint64_t)v157 >= v158)
      {
        size_t v119 = (char *)__p;
        uint64_t v120 = v157 - (unsigned char *)__p;
        int64_t v121 = (v157 - (unsigned char *)__p) >> 3;
        unint64_t v122 = v121 + 1;
        if ((unint64_t)(v121 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v123 = v158 - (void)__p;
        if ((uint64_t)(v158 - (void)__p) >> 2 > v122) {
          unint64_t v122 = v123 >> 2;
        }
        if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v124 = v122;
        }
        if (v124)
        {
          if (v124 >> 61) {
            sub_188D718();
          }
          uint64_t v125 = operator new(8 * v124);
          v126 = &v125[8 * v121];
          *(void *)v126 = v115;
          long long v117 = v126 + 8;
          if (v116 != v119)
          {
LABEL_203:
            unint64_t v127 = v116 - 8 - v119;
            if (v127 < 0x58) {
              goto LABEL_221;
            }
            if ((unint64_t)(v116 - &v125[v120]) < 0x20) {
              goto LABEL_221;
            }
            uint64_t v128 = (v127 >> 3) + 1;
            uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
            size_t v130 = &v116[-v129];
            v126 -= v129;
            unint64_t v131 = &v125[8 * v121 - 16];
            v132 = v116 - 16;
            uint64_t v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v134 = *(_OWORD *)v132;
              *(v131 - 1) = *((_OWORD *)v132 - 1);
              *unint64_t v131 = v134;
              v131 -= 2;
              v132 -= 32;
              v133 -= 4;
            }
            while (v133);
            v116 = v130;
            if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_221:
              do
              {
                uint64_t v135 = *((void *)v116 - 1);
                v116 -= 8;
                *((void *)v126 - 1) = v135;
                v126 -= 8;
              }
              while (v116 != v119);
            }
            v116 = (char *)__p;
            long long __p = v126;
            unint64_t v158 = (unint64_t)&v125[8 * v124];
            int v118 = v146;
            if (!v116) {
              goto LABEL_198;
            }
LABEL_197:
            operator delete(v116);
            goto LABEL_198;
          }
        }
        else
        {
          uint64_t v125 = 0;
          v126 = (char *)(8 * v121);
          *(void *)(8 * v121) = v115;
          long long v117 = (char *)(8 * v121 + 8);
          if (v116 != v119) {
            goto LABEL_203;
          }
        }
        long long __p = v126;
        unint64_t v158 = (unint64_t)&v125[8 * v124];
        int v118 = v146;
        if (v116) {
          goto LABEL_197;
        }
      }
      else
      {
        *(void *)int v157 = v114;
        long long v117 = v116 + 8;
        int v118 = v146;
      }
LABEL_198:
      unint64_t v18 = v148;
      int v157 = v117;
      int v3 = v153;
      int v9 = v118 | v69;
      v151 |= v145;
      v149 |= v144;
      if (sub_6477A0((uint64_t)v56)) {
        unint64_t v18 = v55;
      }
      if (++v55 == v139) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v18 = 0;
  unint64_t v154 = 0;
LABEL_19:
  unint64_t v19 = 126 - 2 * __clz((v163 - (unsigned char *)v162) >> 3);
  if (v163 == v162) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  sub_7C2B94((uint64_t)v162, v163, (uint64_t)&v165, v20, 1);
  uint64_t v143 = *(void *)sub_5D0188(&v162, 0);
  uint64_t v140 = *(void *)sub_5D0188(&v162, 1uLL);
  std::__sort<std::__less<double,double> &,double *>();
  double v21 = *(double *)v159;
  long long v22 = (double *)sub_7BB804(&v159, 1uLL);
  unint64_t v23 = 126 - 2 * __clz((v157 - (unsigned char *)__p) >> 3);
  double v24 = *v22;
  if (v157 == __p) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v23;
  }
  sub_7C2B94((uint64_t)__p, v157, (uint64_t)&v165, v25, 1);
  uint64_t v141 = *(void *)__p;
  uint64_t v137 = *(void *)sub_5D0188(&__p, 1uLL);
  uint64_t v138 = sub_79B798(v3, v18);
  uint64_t v26 = (char *)v3[1] - (char *)*v3;
  if (v26)
  {
    unint64_t v27 = 0;
    unint64_t v147 = 0xBAA6550FFBAA6551 * (v26 >> 3);
    int v136 = v9 ^ 1;
    int v150 = v149 ^ 1;
    int v152 = v151 ^ 1;
    while (1)
    {
      uint64_t v28 = sub_79B798(v3, v27);
      uint64_t v29 = (uint64_t *)v28;
      if (*(unsigned char *)(v155 + 8))
      {
        uint64_t v30 = (void *)sub_374DF4(v28);
        BOOL v31 = *v30 == v30[1];
      }
      else
      {
        BOOL v31 = 1;
      }
      uint64_t v32 = sub_646C34(v29);
      double v33 = sub_7BB2DC((double *)v155, v29);
      uint64_t v34 = sub_64894C(v29);
      int v35 = sub_648828(v29);
      BOOL v36 = sub_6488A0(v29);
      int v37 = sub_6487C0(v29);
      int v38 = sub_64A6C0(v29);
      BOOL v39 = sub_6477A0((uint64_t)v29);
      BOOL v40 = v39;
      if (v27 == v154 && !*(unsigned char *)(v155 + 69))
      {
        int v165 = 1;
        int v166 = 0;
        char v168 = 0;
        int v169 = 0;
        v170[0] = 0;
        *(_DWORD *)((char *)v170 + 7) = 0;
        nullsub_1(&v165);
        sub_64A284((uint64_t)v29, (uint64_t)&v165);
        goto LABEL_34;
      }
      if (v27 == v154)
      {
        if (v39 || (v41 = sub_374DF4(v138), int v42 = *(_DWORD **)v41, v43 = *(_DWORD **)(v41 + 8), *(_DWORD **)v41 == v43))
        {
LABEL_38:
          if (v31)
          {
            int v165 = 2;
            int v166 = 0;
            char v168 = 0;
            int v169 = 0;
            v170[0] = 0;
            *(_DWORD *)((char *)v170 + 7) = 0;
            nullsub_1(&v165);
            sub_64A284((uint64_t)v29, (uint64_t)&v165);
            goto LABEL_34;
          }
          goto LABEL_27;
        }
        while (*v42 != 2)
        {
          v42 += 292;
          if (v42 == v43) {
            goto LABEL_38;
          }
        }
      }
      if (*(unsigned char *)(v155 + 18) && v32 == v143) {
        break;
      }
LABEL_60:
      if (!v40)
      {
        if (*(unsigned char *)(v155 + 64) && v34 == v141)
        {
          double v49 = *(double *)(v155 + 128) * (double)v141;
          if (v49 >= 0.0)
          {
            if (v49 < 4.50359963e15)
            {
              uint64_t v50 = (uint64_t)(v49 + v49) + 1;
              goto LABEL_76;
            }
          }
          else if (v49 > -4.50359963e15)
          {
            uint64_t v50 = (uint64_t)(v49 + v49);
            if (v50 >= 1) {
              --v50;
            }
LABEL_76:
            double v49 = (double)(v50 >> 1);
          }
          uint64_t v51 = *(void *)(v155 + 120) + v141;
          if (v51 <= (uint64_t)v49) {
            uint64_t v51 = (uint64_t)v49;
          }
          if (v51 <= v137)
          {
            double v52 = *(double *)(v155 + 136) * (double)v32;
            if (v52 >= 0.0)
            {
              if (v52 < 4.50359963e15)
              {
                uint64_t v53 = (uint64_t)(v52 + v52) + 1;
                goto LABEL_87;
              }
            }
            else if (v52 > -4.50359963e15)
            {
              uint64_t v53 = (uint64_t)(v52 + v52);
              if (v53 >= 1) {
                --v53;
              }
LABEL_87:
              double v52 = (double)(v53 >> 1);
            }
            if (v141 <= (uint64_t)v52)
            {
              int v165 = 7;
              int v166 = 0;
              char v168 = 0;
              int v169 = 0;
              v170[0] = 0;
              *(_DWORD *)((char *)v170 + 7) = 0;
              nullsub_1(&v165);
              sub_64A284((uint64_t)v29, (uint64_t)&v165);
              goto LABEL_34;
            }
          }
        }
        if (v33 == v21)
        {
          double v54 = v33 + *(double *)(v155 + 72);
          if (v54 < v33 * *(double *)(v155 + 80)) {
            double v54 = v33 * *(double *)(v155 + 80);
          }
          if (v54 <= v24)
          {
            int v165 = 5;
            int v166 = 0;
            char v168 = 0;
            int v169 = 0;
            v170[0] = 0;
            *(_DWORD *)((char *)v170 + 7) = 0;
            nullsub_1(&v165);
            sub_64A284((uint64_t)v29, (uint64_t)&v165);
            goto LABEL_34;
          }
        }
        if (((v36 | v136) & 1) == 0 && ((v35 ^ 1) & 1) == 0 && *(unsigned char *)(v155 + 65))
        {
          int v165 = 18;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64A284((uint64_t)v29, (uint64_t)&v165);
          goto LABEL_34;
        }
        if (((v37 | v152) & 1) == 0 && *(unsigned char *)(v155 + 66))
        {
          int v165 = 19;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64A284((uint64_t)v29, (uint64_t)&v165);
          goto LABEL_34;
        }
        if (((v38 | v150) & 1) == 0 && *(unsigned char *)(v155 + 67))
        {
          int v165 = 20;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64A284((uint64_t)v29, (uint64_t)&v165);
          goto LABEL_34;
        }
        goto LABEL_27;
      }
      if (v31)
      {
        if (*(unsigned char *)(v155 + 69)) {
          int v48 = 2;
        }
        else {
          int v48 = 3;
        }
        int v165 = v48;
        int v166 = 0;
        char v168 = 0;
        int v169 = 0;
        v170[0] = 0;
        *(_DWORD *)((char *)v170 + 7) = 0;
        nullsub_1(&v165);
        sub_64A284((uint64_t)v29, (uint64_t)&v165);
LABEL_34:
        if (v168) {
          sub_3A6B94((uint64_t)&v167);
        }
      }
LABEL_27:
      ++v27;
      int v3 = v153;
      if (v27 == v147) {
        goto LABEL_105;
      }
    }
    double v45 = *(double *)(v155 + 40) * (double)v143;
    if (v45 >= 0.0)
    {
      if (v45 >= 4.50359963e15) {
        goto LABEL_57;
      }
      uint64_t v46 = (uint64_t)(v45 + v45) + 1;
    }
    else
    {
      if (v45 <= -4.50359963e15) {
        goto LABEL_57;
      }
      uint64_t v46 = (uint64_t)(v45 + v45);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v45 = (double)(v46 >> 1);
LABEL_57:
    uint64_t v47 = *(void *)(v155 + 32) + v143;
    if (v47 <= (uint64_t)v45) {
      uint64_t v47 = (uint64_t)v45;
    }
    if (v47 <= v140)
    {
      int v165 = 6;
      int v166 = 0;
      char v168 = 0;
      int v169 = 0;
      v170[0] = 0;
      *(_DWORD *)((char *)v170 + 7) = 0;
      nullsub_1(&v165);
      sub_64A284((uint64_t)v29, (uint64_t)&v165);
      goto LABEL_34;
    }
    goto LABEL_60;
  }
LABEL_105:
  if (__p)
  {
    int v157 = (char *)__p;
    operator delete(__p);
  }
  if (v159)
  {
    v160 = (double *)v159;
    operator delete(v159);
  }
  if (v162)
  {
    uint64_t v163 = (char *)v162;
    operator delete(v162);
  }
}

void sub_7BB1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  if (LOBYTE(STACK[0x520])) {
    sub_3A6B94(a15);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v29 = a25;
    if (!a25)
    {
LABEL_5:
      uint64_t v30 = a28;
      if (!a28) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v29 = a25;
    if (!a25) {
      goto LABEL_5;
    }
  }
  operator delete(v29);
  uint64_t v30 = a28;
  if (!a28) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(v30);
  _Unwind_Resume(a1);
}

double sub_7BB2DC(double *a1, uint64_t *a2)
{
  sub_649668(a2, &v8);
  double v3 = 0.0;
  if (v8 != v9)
  {
    uint64_t v4 = v8;
    while (2)
    {
      uint64_t v5 = *(void *)v4;
      int v6 = *(_DWORD *)(*(void *)v4 + 160);
      switch(v6)
      {
        case 1:
        case 2:
        case 4:
        case 6:
        case 7:
        case 20:
        case 21:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 33:
        case 34:
        case 35:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 86:
        case 87:
          goto LABEL_6;
        default:
          if ((v6 - 41) <= 0x12) {
LABEL_6:
          }
            double v3 = v3 + a1[11];
          if ((v6 - 91) < 3 || (v6 - 22) <= 2) {
            double v3 = v3 + a1[12];
          }
          if (*(unsigned char *)(v5 + 648) || *(unsigned char *)(v5 + 650) || *(unsigned char *)(v5 + 649)) {
            double v3 = v3 + a1[13];
          }
          if (*(void *)(v5 + 568) != -1 || *(void *)(v5 + 584) != -1) {
            double v3 = v3 + a1[14];
          }
          v4 += 8;
          if (v4 != v9) {
            continue;
          }
          goto LABEL_19;
      }
    }
  }
LABEL_19:
  if (v8)
  {
    int v9 = v8;
    operator delete(v8);
  }
  return v3;
}

void sub_7BB558(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v14 = a2;
  uint64_t v15 = &v14;
  sub_7C3B50(a1, (unsigned __int8 **)&v15, (uint64_t)&__p);
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3));
  if (v13 == __p) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_6EA30((uint64_t)__p, v13, (uint64_t)&v15, v6, 1);
  sub_86E88((const void ***)&__p);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3) < 2)
  {
    if (v14) {
      int v7 = 3;
    }
    else {
      int v7 = 4;
    }
    LODWORD(v15) = v7;
    char v17 = 0;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
    uint64_t v8 = *a1;
    if (*(unsigned char *)(a3 + 1136))
    {
      sub_4C9334(a3 + 16, v8);
    }
    else
    {
      sub_4BE9F4(a3 + 16, v8);
      *(unsigned char *)(a3 + 1136) = 1;
    }
  }
  else
  {
    if (v14)
    {
      LODWORD(v15) = 1;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 1;
    }
    else
    {
      LODWORD(v15) = 2;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 2;
    }
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
  }
  int v9 = (const void **)__p;
  if (__p)
  {
    uint64_t v10 = v13;
    int v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete((void *)*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = __p;
    }
    unint64_t v13 = v9;
    operator delete(v11);
  }
}

void sub_7BB780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (*(unsigned char *)(v2 + 1136))
  {
    sub_3A6B94(v2 + 16);
    *(unsigned char *)(v2 + 1136) = 0;
  }
  if (LOBYTE(STACK[0x490]))
  {
    sub_3A6B94((uint64_t)va1);
    sub_1A668((void **)va);
    _Unwind_Resume(a1);
  }
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7BB804(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_7BB934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_7BBA14(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_route_tags");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_simplest_route_tag");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_shortest_route_tag");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_use_traffic_level");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_absolute");
  char v8 = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_relative");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_absolute");
  double v10 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_21:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_32:
    *(void *)(a1 + 16) = (uint64_t)v10;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  operator delete(__p[0]);
LABEL_34:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_relative");
  double v14 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v14;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_min_traffic_level");
  double v15 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_max_traffic_level");
  double v16 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v16;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_quietest_route_tag");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 48) = v17;
  strcpy((char *)__p, "enable_hills_route_tag");
  HIBYTE(__p[2]) = 22;
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 49) = v18;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_stairs_route_tag");
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 50) = v19;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_avoids_walking_route_tag");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 51) = v20;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "enable_busy_roads_required_route_tag");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 52) = v21;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_best_route_tag");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 53) = v22;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_absolute");
  double v23 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v23;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_relative");
  double v24 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 64) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "route_complexity_turn_penalty");
  double v25 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 72) = v25;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "route_complexity_ferry_penalty");
  double v26 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 80) = v26;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "route_complexity_mount_dismount_penalty");
  double v27 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 88) = v27;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "route_complexity_stairs_penalty");
  double v28 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 96) = v28;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_absolute");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_72:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_83:
    *(void *)(a1 + 104) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_85;
  }
LABEL_84:
  operator delete(__p[0]);
LABEL_85:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_relative");
  double v33 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 112) = v33;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_max_busy_roads_relative_length");
  double v34 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 120) = v34;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_ev_avoids_charge_route_tag");
  BOOL v35 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 128) = v35;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_ev_other_network_tag");
  BOOL v36 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 129) = v36;
  return a1;
}

void sub_7BC4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7BC55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a3 + 1407);
  char v17 = 11;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteTagger");
  uint64_t v13 = 0;
  double v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB560(v5, (uint64_t)__p);
  sub_7BEA60(a1 + 16, __p);
  BOOL v6 = v19;
  if (v19)
  {
    do
    {
      double v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      BOOL v6 = v11;
    }
    while (v11);
  }
  BOOL v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  char v8 = (void **)v13;
  if (v13)
  {
    double v9 = v14;
    double v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      double v10 = v13;
    }
    double v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  sub_4BBDC0(a1 + 152, a3);
  return a1;
}

void sub_7BC6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_7BC6D8(uint64_t result, unsigned char *a2, uint64_t *a3)
{
  if (*a3 != a3[1])
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 16))
    {
      sub_7BC760(result, a3);
      sub_7BD410(v3, a2, a3);
      return sub_7BDD2C(v3, a3);
    }
  }
  return result;
}

void sub_7BC760(uint64_t a1, uint64_t *a2)
{
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  v82 = 0;
  unint64_t v83 = 0;
  unint64_t v84 = 0;
  uint64_t v2 = *a2;
  uint64_t v76 = a2[1];
  if (*a2 == v76)
  {
    uint64_t v51 = 0;
    unint64_t v55 = 0;
    goto LABEL_138;
  }
  while (2)
  {
    uint64_t v77 = v2;
    uint64_t v3 = (uint64_t *)sub_648B60(v2);
    long long __p = 0;
    unint64_t v80 = 0;
    uint64_t v81 = 0;
    sub_510340((uint64_t)&__p, *v3, v3[1], 0xAF8AF8AF8AF8AF8BLL * ((v3[1] - *v3) >> 5));
    BOOL v4 = (char *)__p;
    unint64_t v78 = v80;
    if (__p == v80)
    {
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_103;
    }
    do
    {
      if (!v4[1112])
      {
LABEL_136:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (!sub_604320((uint64_t)(v4 + 680), 0)) {
        goto LABEL_14;
      }
      BOOL v5 = v86;
      if ((unint64_t)v86 < v87)
      {
        sub_4BE9F4((uint64_t)v86, (uint64_t)v4);
        uint64_t v86 = v5 + 1120;
LABEL_14:
        if (!v4[1112]) {
          goto LABEL_136;
        }
        goto LABEL_15;
      }
      unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v86 - (unsigned char *)v85) >> 5);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x3A83A83A83A83ALL) {
        goto LABEL_178;
      }
      if (0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5) > v9) {
        unint64_t v9 = 0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5);
      }
      if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v87 - (void)v85) >> 5) >= 0x1D41D41D41D41DLL) {
        unint64_t v10 = 0x3A83A83A83A83ALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v92 = &v87;
      if (v10)
      {
        if (v10 > 0x3A83A83A83A83ALL) {
          goto LABEL_177;
        }
        double v11 = (char *)operator new(1120 * v10);
      }
      else
      {
        double v11 = 0;
      }
      unint64_t v88 = v11;
      v89 = &v11[1120 * v8];
      uint64_t v90 = v89;
      long long v91 = &v11[1120 * v10];
      sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
      double v16 = v89;
      char v17 = v90 + 1120;
      BOOL v18 = (char *)v85;
      BOOL v19 = v86;
      if (v86 == v85)
      {
        uint64_t v85 = v89;
        uint64_t v86 = v90 + 1120;
        unint64_t v87 = (unint64_t)v91;
        if (v19) {
          goto LABEL_65;
        }
      }
      else
      {
        do
        {
          v19 -= 1120;
          double v16 = (void *)sub_4C09FC((uint64_t)v16 - 1120, (uint64_t)v19);
        }
        while (v19 != v18);
        BOOL v19 = (char *)v85;
        BOOL v20 = v86;
        uint64_t v85 = v16;
        uint64_t v86 = v17;
        unint64_t v87 = (unint64_t)v91;
        if (v20 != v19)
        {
          for (uint64_t i = 0; &v20[i] != v19; i -= 1120)
          {
            BOOL v22 = &v20[i];
            if (v20[i - 8])
            {
              sub_3A6CB8((uint64_t)(v22 - 440));
              *(v22 - 8) = 0;
            }
            *((void *)v22 - 60) = off_2438EC8;
            if (*(v22 - 449) < 0) {
              operator delete(*(void **)&v20[i - 472]);
            }
            double v23 = (void **)&v20[i];
            double v24 = &v20[i - 488];
            if (*v24) {
              *double v24 = 0;
            }
            if (*((char *)v23 - 505) < 0)
            {
              operator delete(*(void **)&v20[i - 528]);
              double v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0)
              {
LABEL_49:
                if ((*((char *)v25 - 561) & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_59;
              }
            }
            else
            {
              double v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0) {
                goto LABEL_49;
              }
            }
            operator delete(*(v25 - 70));
            if ((*((char *)v25 - 561) & 0x80000000) == 0)
            {
LABEL_50:
              double v26 = (void **)&v20[i];
              if ((v20[i - 601] & 0x80000000) == 0) {
                goto LABEL_51;
              }
              goto LABEL_60;
            }
LABEL_59:
            operator delete(*(void **)&v20[i - 584]);
            double v26 = (void **)&v20[i];
            if ((v20[i - 601] & 0x80000000) == 0)
            {
LABEL_51:
              if ((*((char *)v26 - 633) & 0x80000000) == 0) {
                goto LABEL_52;
              }
              goto LABEL_61;
            }
LABEL_60:
            operator delete(*(v26 - 78));
            if ((*((char *)v26 - 633) & 0x80000000) == 0)
            {
LABEL_52:
              double v27 = (void **)&v20[i];
              if (v20[i - 657] < 0) {
                goto LABEL_62;
              }
              goto LABEL_53;
            }
LABEL_61:
            operator delete(*(v23 - 82));
            double v27 = (void **)&v20[i];
            if (v20[i - 657] < 0)
            {
LABEL_62:
              operator delete(*(v27 - 85));
              double v28 = (char *)(v27 - 86);
              if (!*((unsigned char *)v27 - 688)) {
                goto LABEL_55;
              }
LABEL_54:
              *double v28 = 0;
              goto LABEL_55;
            }
LABEL_53:
            double v28 = (char *)(v27 - 86);
            if (*((unsigned char *)v27 - 688)) {
              goto LABEL_54;
            }
LABEL_55:
            sub_29D95C((uint64_t)(v22 - 1120));
          }
        }
        if (v19) {
LABEL_65:
        }
          operator delete(v19);
      }
      uint64_t v86 = v17;
      if (!v4[1112]) {
        goto LABEL_136;
      }
LABEL_15:
      if (sub_604320((uint64_t)(v4 + 680), 1))
      {
        BOOL v6 = v83;
        if ((unint64_t)v83 < v84)
        {
          sub_4BE9F4((uint64_t)v83, (uint64_t)v4);
          BOOL v7 = v6 + 1120;
LABEL_8:
          unint64_t v83 = v7;
          goto LABEL_9;
        }
        unint64_t v12 = 0xAF8AF8AF8AF8AF8BLL * ((v83 - (unsigned char *)v82) >> 5);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x3A83A83A83A83ALL) {
LABEL_178:
        }
          sub_2E00();
        if (0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5) > v13) {
          unint64_t v13 = 0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5);
        }
        if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v84 - (void)v82) >> 5) >= 0x1D41D41D41D41DLL) {
          unint64_t v14 = 0x3A83A83A83A83ALL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v92 = &v84;
        if (v14)
        {
          if (v14 > 0x3A83A83A83A83ALL) {
LABEL_177:
          }
            sub_188D718();
          uint64_t v15 = (char *)operator new(1120 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v88 = v15;
        v89 = &v15[1120 * v12];
        uint64_t v90 = v89;
        long long v91 = &v15[1120 * v14];
        sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
        double v29 = v89;
        BOOL v7 = v90 + 1120;
        double v30 = (char *)v82;
        uint64_t v31 = v83;
        if (v83 == v82)
        {
          v82 = v89;
          unint64_t v83 = v90 + 1120;
          unint64_t v84 = (unint64_t)v91;
          if (!v31) {
            goto LABEL_8;
          }
        }
        else
        {
          do
          {
            v31 -= 1120;
            double v29 = (void *)sub_4C09FC((uint64_t)v29 - 1120, (uint64_t)v31);
          }
          while (v31 != v30);
          uint64_t v31 = (char *)v82;
          uint64_t v32 = v83;
          v82 = v29;
          unint64_t v83 = v7;
          unint64_t v84 = (unint64_t)v91;
          if (v32 != v31)
          {
            for (uint64_t j = 0; &v32[j] != v31; j -= 1120)
            {
              double v34 = &v32[j];
              if (v32[j - 8])
              {
                sub_3A6CB8((uint64_t)(v34 - 440));
                *(v34 - 8) = 0;
              }
              *((void *)v34 - 60) = off_2438EC8;
              if (*(v34 - 449) < 0) {
                operator delete(*(void **)&v32[j - 472]);
              }
              BOOL v35 = (void **)&v32[j];
              BOOL v36 = &v32[j - 488];
              if (*v36) {
                *BOOL v36 = 0;
              }
              if (*((char *)v35 - 505) < 0)
              {
                operator delete(*(void **)&v32[j - 528]);
                int v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0)
                {
LABEL_83:
                  if ((*((char *)v37 - 561) & 0x80000000) == 0) {
                    goto LABEL_84;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                int v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0) {
                  goto LABEL_83;
                }
              }
              operator delete(*(v37 - 70));
              if ((*((char *)v37 - 561) & 0x80000000) == 0)
              {
LABEL_84:
                int v38 = (void **)&v32[j];
                if ((v32[j - 601] & 0x80000000) == 0) {
                  goto LABEL_85;
                }
                goto LABEL_94;
              }
LABEL_93:
              operator delete(*(void **)&v32[j - 584]);
              int v38 = (void **)&v32[j];
              if ((v32[j - 601] & 0x80000000) == 0)
              {
LABEL_85:
                if ((*((char *)v38 - 633) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_95;
              }
LABEL_94:
              operator delete(*(v38 - 78));
              if ((*((char *)v38 - 633) & 0x80000000) == 0)
              {
LABEL_86:
                BOOL v39 = (void **)&v32[j];
                if (v32[j - 657] < 0) {
                  goto LABEL_96;
                }
                goto LABEL_87;
              }
LABEL_95:
              operator delete(*(v35 - 82));
              BOOL v39 = (void **)&v32[j];
              if (v32[j - 657] < 0)
              {
LABEL_96:
                operator delete(*(v39 - 85));
                BOOL v40 = (char *)(v39 - 86);
                if (!*((unsigned char *)v39 - 688)) {
                  goto LABEL_89;
                }
LABEL_88:
                *BOOL v40 = 0;
                goto LABEL_89;
              }
LABEL_87:
              BOOL v40 = (char *)(v39 - 86);
              if (*((unsigned char *)v39 - 688)) {
                goto LABEL_88;
              }
LABEL_89:
              sub_29D95C((uint64_t)(v34 - 1120));
            }
          }
          if (!v31) {
            goto LABEL_8;
          }
        }
        operator delete(v31);
        goto LABEL_8;
      }
LABEL_9:
      v4 += 1120;
    }
    while (v4 != v78);
    BOOL v4 = (char *)__p;
    if (!__p) {
      goto LABEL_4;
    }
LABEL_103:
    uint64_t v41 = v80;
    int v42 = v4;
    if (v80 == v4) {
      goto LABEL_3;
    }
    uint64_t v43 = 0;
    do
    {
      unint64_t v44 = &v41[v43];
      if (v41[v43 - 8])
      {
        sub_3A6CB8((uint64_t)(v44 - 440));
        *(v44 - 8) = 0;
      }
      *((void *)v44 - 60) = off_2438EC8;
      if (*(v44 - 449) < 0) {
        operator delete(*(void **)&v41[v43 - 472]);
      }
      double v45 = (void **)&v41[v43];
      uint64_t v46 = &v41[v43 - 488];
      if (*v46) {
        *uint64_t v46 = 0;
      }
      if (*((char *)v45 - 505) < 0)
      {
        operator delete(*(void **)&v41[v43 - 528]);
        uint64_t v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0)
        {
LABEL_113:
          if ((*((char *)v47 - 561) & 0x80000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_123;
        }
      }
      else
      {
        uint64_t v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0) {
          goto LABEL_113;
        }
      }
      operator delete(*(v47 - 70));
      if ((*((char *)v47 - 561) & 0x80000000) == 0)
      {
LABEL_114:
        int v48 = (void **)&v41[v43];
        if ((v41[v43 - 601] & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_124;
      }
LABEL_123:
      operator delete(*(void **)&v41[v43 - 584]);
      int v48 = (void **)&v41[v43];
      if ((v41[v43 - 601] & 0x80000000) == 0)
      {
LABEL_115:
        if ((*((char *)v48 - 633) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete(*(v48 - 78));
      if ((*((char *)v48 - 633) & 0x80000000) == 0)
      {
LABEL_116:
        double v49 = (void **)&v41[v43];
        if ((v41[v43 - 657] & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(*(v45 - 82));
      double v49 = (void **)&v41[v43];
      if ((v41[v43 - 657] & 0x80000000) == 0)
      {
LABEL_117:
        uint64_t v50 = (char *)(v49 - 86);
        if (!*((unsigned char *)v49 - 688)) {
          goto LABEL_119;
        }
LABEL_118:
        *uint64_t v50 = 0;
        goto LABEL_119;
      }
LABEL_126:
      operator delete(*(v49 - 85));
      uint64_t v50 = (char *)(v49 - 86);
      if (*((unsigned char *)v49 - 688)) {
        goto LABEL_118;
      }
LABEL_119:
      sub_29D95C((uint64_t)(v44 - 1120));
      v43 -= 1120;
    }
    while (&v41[v43] != v4);
    int v42 = __p;
LABEL_3:
    unint64_t v80 = v4;
    operator delete(v42);
LABEL_4:
    uint64_t v2 = v77 + 7560;
    if (v77 + 7560 != v76) {
      continue;
    }
    break;
  }
  double v52 = (char *)v82;
  uint64_t v51 = v83;
  if (v82 == v83)
  {
    unint64_t v55 = v83;
    goto LABEL_138;
  }
  do
  {
    BOOL v53 = sub_6054A8((uint64_t)v52);
    v52 += 1120;
  }
  while (v52 != v51 && v53);
  if (v53)
  {
    unint64_t v55 = v82;
    uint64_t v51 = v83;
LABEL_138:
    int v57 = (char *)sub_7C29DC((uint64_t)v55, (uint64_t)v51, (uint64_t *)&v82);
    char v58 = v83;
    if (v83 != v57)
    {
      while (v58 != v57)
      {
        v58 -= 1120;
        sub_3A6B94((uint64_t)v58);
      }
      unint64_t v83 = v57;
    }
  }
  unint64_t v60 = (char *)v85;
  double v59 = v86;
  if (v85 == v86)
  {
    int v63 = v85;
    goto LABEL_151;
  }
  do
  {
    BOOL v61 = sub_6054A8((uint64_t)v60);
    v60 += 1120;
  }
  while (v60 != v59 && v61);
  if (v61)
  {
    int v63 = v85;
    unint64_t v60 = v86;
LABEL_151:
    char v64 = (char *)sub_7C29DC((uint64_t)v63, (uint64_t)v60, (uint64_t *)&v85);
    double v65 = v86;
    if (v86 != v64)
    {
      while (v65 != v64)
      {
        v65 -= 1120;
        sub_3A6B94((uint64_t)v65);
      }
      uint64_t v86 = v64;
    }
  }
  uint64_t v67 = *a2;
  uint64_t v66 = a2[1];
  if (*a2 != v66)
  {
    while (2)
    {
      int v68 = (void *)sub_648B60(v67);
      if (*v68 == v68[1])
      {
        if (v82 != v83)
        {
          sub_7BE7B4((uint64_t *)&v82, 1, (uint64_t)&v88);
          sub_647834(v67, (uint64_t)&v88);
          goto LABEL_164;
        }
      }
      else if (v85 != v86)
      {
        sub_7BE7B4((uint64_t *)&v85, 0, (uint64_t)&v88);
        sub_647834(v67, (uint64_t)&v88);
LABEL_164:
        if (v93) {
          sub_3A6B94((uint64_t)&v90);
        }
      }
      v67 += 7560;
      if (v67 == v66) {
        break;
      }
      continue;
    }
  }
  BOOL v69 = (char *)v82;
  if (v82)
  {
    uint64_t v70 = v83;
    uint64_t v71 = v82;
    if (v83 != v82)
    {
      do
        uint64_t v70 = (char *)sub_3A6B94((uint64_t)(v70 - 1120));
      while (v70 != v69);
      uint64_t v71 = v82;
    }
    unint64_t v83 = v69;
    operator delete(v71);
  }
  v72 = (char *)v85;
  if (v85)
  {
    uint64_t v73 = v86;
    int v74 = v85;
    if (v86 != v85)
    {
      do
        uint64_t v73 = (char *)sub_3A6B94((uint64_t)(v73 - 1120));
      while (v73 != v72);
      int v74 = v85;
    }
    uint64_t v86 = v72;
    operator delete(v74);
  }
}

void sub_7BD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7BD3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50E790((void **)va);
  JUMPOUT(0x7BD3F8);
}

void sub_7BD410(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 144) && sub_647280(*a3))
  {
    sub_65422C(a3, &__p);
    uint64_t v6 = *a3;
    uint64_t v5 = a3[1];
    if (*a3 != v5) {
      goto LABEL_4;
    }
LABEL_34:
    char v24 = 0;
    char v22 = 0;
    BOOL v25 = 0;
    BOOL v56 = 1;
    BOOL v57 = 1;
LABEL_36:
    BOOL v54 = 1;
    BOOL v55 = 1;
    goto LABEL_37;
  }
  long long __p = 0;
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 == v5) {
    goto LABEL_34;
  }
  do
  {
LABEL_4:
    BOOL v7 = (unsigned __int8 *)sub_6477D4(v6);
    int v8 = *v7 | *((_DWORD *)v7 + 13);
    v6 += 7560;
    if (v8) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == v5;
    }
  }
  while (!v9);
  BOOL v56 = v8 == 0;
  uint64_t v10 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    char v24 = 0;
    char v22 = 0;
    BOOL v25 = 0;
    BOOL v57 = 1;
    goto LABEL_36;
  }
  do
  {
    uint64_t v11 = sub_6477D4(v10);
    v10 += 7560;
    if (*(unsigned char *)(v11 + 1)) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v10 == v6;
    }
  }
  while (!v12);
  BOOL v55 = *(unsigned char *)(v11 + 1) == 0;
  uint64_t v13 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    char v24 = 0;
    char v22 = 0;
    BOOL v25 = 0;
    BOOL v57 = 1;
    BOOL v54 = 1;
  }
  else
  {
    do
    {
      int v14 = *(_DWORD *)(sub_6477D4(v13) + 56);
      v13 += 7560;
      if (v14) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = v13 == v6;
      }
    }
    while (!v15);
    BOOL v57 = v14 == 0;
    double v16 = (unsigned int **)*a3;
    uint64_t v6 = a3[1];
    if (*a3 == v6)
    {
      char v24 = 0;
      char v22 = 0;
      BOOL v25 = 0;
      BOOL v54 = 1;
    }
    else
    {
      do
      {
        int v17 = sub_646CE8((uint64_t)v16);
        double v18 = (double)v17 / (double)(int)sub_646D60(v16);
        double v19 = *(double *)(a1 + 48);
        v16 += 945;
      }
      while (v18 < v19 && v16 != (unsigned int **)v6);
      BOOL v54 = v18 < v19;
      uint64_t v21 = *a3;
      uint64_t v6 = a3[1];
      if (*a3 == v6)
      {
LABEL_109:
        char v24 = 0;
        char v22 = 0;
        BOOL v25 = 0;
      }
      else
      {
        while (!sub_6477A0(v21))
        {
          v21 += 7560;
          if (v21 == v6)
          {
            if (v6 == a3[1]) {
              goto LABEL_109;
            }
            goto LABEL_31;
          }
        }
        uint64_t v6 = v21;
        if (v21 == a3[1]) {
          goto LABEL_109;
        }
LABEL_31:
        char v22 = sub_648A00(v6);
        uint64_t v23 = sub_6477D4(v6);
        if (*(unsigned char *)v23)
        {
          char v24 = 1;
          BOOL v25 = 1;
        }
        else
        {
          BOOL v25 = *(_DWORD *)(v23 + 52) != 0;
          char v24 = 1;
        }
      }
    }
  }
LABEL_37:
  uint64_t v26 = a3[1] - *a3;
  if (v26)
  {
    unint64_t v27 = 0;
    uint64_t v48 = (v6 - *a3) / 7560;
    uint64_t v49 = v26 / 7560;
    int v51 = !v25;
    int v52 = v22 & 0xFD;
    int v53 = v22 & 0xFE;
    char v50 = v24 ^ 1;
    while (1)
    {
      double v28 = (unsigned int **)sub_799440(a3, v27);
      double v29 = (unsigned __int8 *)sub_6477D4((uint64_t)v28);
      BOOL v30 = (*v29 | *((_DWORD *)v29 + 13)) != 0;
      int v31 = *(unsigned __int8 *)(sub_6477D4((uint64_t)v28) + 1);
      int v32 = *(_DWORD *)(sub_6477D4((uint64_t)v28) + 56);
      int v33 = sub_648A00((uint64_t)v28);
      int v34 = sub_646CE8((uint64_t)v28);
      int v35 = sub_646D60(v28);
      double v36 = *(double *)(a1 + 56);
      if (*(unsigned char *)(a1 + 8)) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v30;
      }
      if (v37)
      {
        uint64_t v38 = sub_6477D4((uint64_t)v28);
        if (*(unsigned char *)v38 || !*(_DWORD *)(v38 + 52))
        {
          int v63 = 9;
          int v64 = 0;
          char v66 = 0;
          int v67 = 0;
          v68[0] = 0;
          *(_DWORD *)((char *)v68 + 7) = 0;
          nullsub_1(&v63);
          sub_647834((uint64_t)v28, (uint64_t)&v63);
        }
        else
        {
          int v63 = 10;
          int v64 = 0;
          char v66 = 0;
          int v67 = 0;
          v68[0] = 0;
          *(_DWORD *)((char *)v68 + 7) = 0;
          nullsub_1(&v63);
          sub_647834((uint64_t)v28, (uint64_t)&v63);
        }
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      char v39 = v57;
      if (!a2[4]) {
        char v39 = 1;
      }
      if ((v39 & 1) == 0 && !v32)
      {
        int v63 = 17;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      if (v53 == 2 && (v33 & 0xFE) != 2)
      {
        int v63 = 16;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      if (v52 == 1 && (v33 | 2) != 3)
      {
        int v63 = 15;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      int v40 = a2[5];
      int v41 = v51;
      if (a2[5]) {
        int v41 = 1;
      }
      if (((v41 | v30) & 1) == 0)
      {
        int v63 = 11;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
        int v40 = a2[5];
      }
      if (v40) {
        int v42 = v30;
      }
      else {
        int v42 = 1;
      }
      if (((v56 | v42) & 1) == 0)
      {
        int v63 = 11;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      char v43 = v55;
      if (!a2[6]) {
        char v43 = 1;
      }
      if (v43) {
        goto LABEL_85;
      }
      if (!v31) {
        break;
      }
      if (!*(unsigned char *)(a1 + 8))
      {
        int v63 = 12;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        goto LABEL_83;
      }
LABEL_85:
      char v44 = v54;
      if (!*(unsigned char *)(a1 + 19)) {
        char v44 = 1;
      }
      if ((v44 & 1) == 0 && (double)v34 / (double)v35 < v36)
      {
        int v63 = 14;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        v68[0] = 0;
        *(_DWORD *)((char *)v68 + 7) = 0;
        nullsub_1(&v63);
        sub_647834((uint64_t)v28, (uint64_t)&v63);
        if (v66) {
          sub_3A6B94((uint64_t)v65);
        }
      }
      char v45 = v50;
      if (!*(unsigned char *)(a1 + 144)) {
        char v45 = 1;
      }
      if ((v45 & 1) == 0 && v48 != v27 && v27 < v61)
      {
        uint64_t v46 = (void *)sub_5BF948(&__p, v27);
        if ((*v46 & v47) != 0)
        {
          int v63 = 21;
          int v64 = 0;
          char v66 = 0;
          int v67 = 0;
          v68[0] = 0;
          *(_DWORD *)((char *)v68 + 7) = 0;
          nullsub_1(&v63);
          sub_647834((uint64_t)v28, (uint64_t)&v63);
          if (v66) {
            sub_3A6B94((uint64_t)v65);
          }
        }
      }
      if (*(unsigned char *)(a1 + 145))
      {
        if (*(unsigned char *)(sub_6477D4((uint64_t)v28) + 31))
        {
          int v63 = 22;
          int v64 = 0;
          char v66 = 0;
          int v67 = 0;
          v68[0] = 0;
          *(_DWORD *)((char *)v68 + 7) = 0;
          nullsub_1(&v63);
          sub_647834((uint64_t)v28, (uint64_t)&v63);
          if (v66) {
            sub_3A6B94((uint64_t)v65);
          }
        }
      }
      if (v49 == ++v27) {
        goto LABEL_103;
      }
    }
    int v63 = 13;
    int v64 = 0;
    char v66 = 0;
    int v67 = 0;
    v68[0] = 0;
    *(_DWORD *)((char *)v68 + 7) = 0;
    nullsub_1(&v63);
    sub_647834((uint64_t)v28, (uint64_t)&v63);
LABEL_83:
    if (v66) {
      sub_3A6B94((uint64_t)v65);
    }
    goto LABEL_85;
  }
LABEL_103:
  if (__p) {
    operator delete(__p);
  }
}

void sub_7BDC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_7BDD2C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  BOOL v4 = (uint64_t *)a2[1];
  uint64_t v5 = *a2 + 7560;
  if ((uint64_t *)*a2 != v4 && v5 != (void)v4)
  {
    do
    {
      int v14 = sub_646CE8(v5);
      double result = sub_646CE8(v3);
      if (v14 < (int)result) {
        uint64_t v3 = v5;
      }
      v5 += 7560;
    }
    while ((uint64_t *)v5 != v4);
    BOOL v7 = (uint64_t *)*a2;
    BOOL v4 = (uint64_t *)a2[1];
    int v8 = (uint64_t *)(*a2 + 7560);
    if ((uint64_t *)*a2 != v4 && v8 != v4) {
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v16 = (uint64_t)v7;
    uint64_t v10 = v7;
    int v17 = v7;
    if (v7 != v4) {
      goto LABEL_29;
    }
    goto LABEL_35;
  }
  BOOL v7 = (uint64_t *)*a2;
  int v8 = (uint64_t *)(v3 + 7560);
  if ((uint64_t *)v3 == v4 || v8 == v4) {
    goto LABEL_26;
  }
LABEL_10:
  uint64_t v10 = v7;
  do
  {
    uint64_t v11 = sub_646BEC(v8);
    if (v11 == sub_646BEC(v10))
    {
      int v12 = sub_646CE8((uint64_t)v8);
      double result = sub_646CE8((uint64_t)v10);
      if (v12 < (int)result) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v13 = sub_646BEC(v8);
      double result = sub_646BEC(v10);
      if (v13 < result) {
LABEL_11:
      }
        uint64_t v10 = v8;
    }
    v8 += 945;
  }
  while (v8 != v4);
  uint64_t v16 = *a2;
  BOOL v4 = (uint64_t *)a2[1];
  int v17 = (uint64_t *)*a2;
  if ((uint64_t *)*a2 == v4) {
    goto LABEL_35;
  }
LABEL_29:
  double v18 = v17 + 945;
  if (v17 + 945 == v4)
  {
LABEL_35:
    uint64_t v21 = v16;
    BOOL v20 = (uint64_t *)v16;
    if (v17 == v4) {
      return result;
    }
    goto LABEL_36;
  }
  do
  {
    uint64_t v19 = sub_646C34(v18);
    double result = sub_646C34(v17);
    if (v19 < result) {
      int v17 = v18;
    }
    v18 += 945;
  }
  while (v18 != v4);
  BOOL v20 = v17;
  uint64_t v21 = *a2;
  BOOL v4 = (uint64_t *)a2[1];
  int v17 = (uint64_t *)*a2;
  if ((uint64_t *)*a2 == v4) {
    return result;
  }
LABEL_36:
  unint64_t v60 = 0xBAA6550FFBAA6551 * ((v3 - (uint64_t)v7) >> 3);
  unint64_t v58 = 0xBAA6550FFBAA6551 * (((uint64_t)v20 - v21) >> 3);
  unint64_t v59 = 0xBAA6550FFBAA6551 * (((uint64_t)v10 - v16) >> 3);
  while (1)
  {
    double result = sub_6477A0((uint64_t)v17);
    if (result) {
      break;
    }
    v17 += 945;
    if (v17 == v4)
    {
      int v17 = v4;
      break;
    }
  }
  unint64_t v61 = (uint64_t *)a2[1];
  uint64_t v22 = (uint64_t)v61 - *a2;
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0xBAA6550FFBAA6551 * (v22 >> 3);
    while (1)
    {
      BOOL v25 = (uint64_t *)(*a2 + 7560 * v23);
      if (*(unsigned char *)(v2 + 8))
      {
        uint64_t v26 = (void *)sub_374DF4(*a2 + 7560 * v23);
        BOOL v27 = *v26 == v26[1];
      }
      else
      {
        BOOL v27 = 1;
      }
      double result = sub_6477A0((uint64_t)v25);
      if (result)
      {
        double result = sub_62D404(v2 + 152);
        if (result)
        {
          if (*(unsigned char *)(v2 + 1563))
          {
            double result = sub_64695C(v25);
            if (result) {
              goto LABEL_50;
            }
          }
        }
        if (*(unsigned char *)(v2 + 69))
        {
          if (v27) {
            goto LABEL_63;
          }
          goto LABEL_42;
        }
        int v34 = sub_646CE8((uint64_t)v25);
        if (v34 < 0) {
          char v35 = -5;
        }
        else {
          char v35 = 5;
        }
        double v36 = ceil((double)(int)(v34 / 10+ (((103 * (char)(v35 + v34 % 10)) >> 15) & 1)+ ((103 * (char)(v35 + v34 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
        if (v36 >= 0.0)
        {
          if (v36 < 4.50359963e15)
          {
            uint64_t v37 = (uint64_t)(v36 + v36) + 1;
            goto LABEL_123;
          }
        }
        else if (v36 > -4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v36 + v36);
          if (v37 >= 1) {
            --v37;
          }
LABEL_123:
          double v36 = (double)(v37 >> 1);
        }
        double result = sub_646CE8(v3);
        if ((int)result < 0) {
          char v55 = -5;
        }
        else {
          char v55 = 5;
        }
        double v56 = ceil((double)(int)((int)result / 10+ (((103 * (char)(v55 + (int)result % 10)) >> 15) & 1)+ ((103 * (char)(v55 + (int)result % 10)) >> 10))/ 60.0)* 60.0* 10.0;
        if (v56 >= 0.0)
        {
          if (v56 < 4.50359963e15)
          {
            uint64_t v57 = (uint64_t)(v56 + v56) + 1;
            goto LABEL_134;
          }
        }
        else if (v56 > -4.50359963e15)
        {
          uint64_t v57 = (uint64_t)(v56 + v56);
          if (v57 >= 1) {
            --v57;
          }
LABEL_134:
          double v56 = (double)(v57 >> 1);
        }
        if ((int)v36 == (int)v56) {
          goto LABEL_95;
        }
        if (v27)
        {
          int v63 = 3;
          int v64 = 0;
          char v66 = 0;
          int v67 = 0;
          memset(v68, 0, 11);
          nullsub_1(&v63);
          double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
          goto LABEL_144;
        }
        goto LABEL_42;
      }
      if (v17 == v61) {
        goto LABEL_42;
      }
      if (v23 == v60) {
        break;
      }
      BOOL v33 = 0;
LABEL_88:
      double result = sub_62D404(v2 + 152);
      if (result)
      {
        if (*(unsigned char *)(v2 + 1563))
        {
          double result = sub_64695C(v25);
          if (result)
          {
LABEL_50:
            unint64_t v28 = sub_64695C(v25);
            int v63 = 0;
            int v64 = 0;
            char v66 = 0;
            int v67 = 1;
            v68[0] = v28;
            LOWORD(v68[1]) = 0;
            BYTE2(v68[1]) = 0;
            double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
            goto LABEL_144;
          }
        }
      }
      if (*(unsigned char *)(v2 + 69)) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v33;
      }
      if (v42)
      {
LABEL_95:
        int v63 = 1;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        memset(v68, 0, 11);
        nullsub_1(&v63);
        double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
        goto LABEL_144;
      }
      if (*(unsigned char *)(v2 + 69) && v33)
      {
        double result = sub_374DF4((uint64_t)v17);
        char v43 = *(_DWORD **)result;
        char v44 = *(_DWORD **)(result + 8);
        if (*(_DWORD **)result == v44)
        {
LABEL_101:
          if (v27)
          {
LABEL_63:
            int v63 = 2;
            int v64 = 0;
            char v66 = 0;
            int v67 = 0;
            memset(v68, 0, 11);
            nullsub_1(&v63);
            double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
            goto LABEL_144;
          }
          goto LABEL_42;
        }
        while (*v43 != 2)
        {
          v43 += 292;
          if (v43 == v44) {
            goto LABEL_101;
          }
        }
      }
      if (*(unsigned char *)(v2 + 17)) {
        BOOL v45 = v23 == v59;
      }
      else {
        BOOL v45 = 0;
      }
      if (v45)
      {
        uint64_t v46 = sub_646BEC(v25);
        uint64_t v47 = *(unsigned __int8 *)(v2 + 20);
        double result = sub_646BEC(v17);
        if (v46 + v47 <= (unint64_t)result)
        {
          uint64_t v48 = sub_646BEC(v25);
          double v49 = *(double *)(v2 + 24);
          double result = sub_646BEC(v17);
          if (v49 * (double)(unint64_t)v48 <= (double)(unint64_t)result)
          {
            int v63 = 5;
            int v64 = 0;
            char v66 = 0;
            int v67 = 0;
            memset(v68, 0, 11);
            nullsub_1(&v63);
            double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
            goto LABEL_144;
          }
        }
      }
      if (*(unsigned char *)(v2 + 18)) {
        BOOL v50 = v23 == v58;
      }
      else {
        BOOL v50 = 0;
      }
      if (!v50) {
        goto LABEL_42;
      }
      uint64_t v51 = sub_646C34(v25);
      uint64_t v52 = *(void *)(v2 + 32);
      double result = sub_646C34(v17);
      if (v52 + v51 > result) {
        goto LABEL_42;
      }
      double v53 = *(double *)(v2 + 40) * (double)sub_646C34(v25);
      if (v53 >= 0.0)
      {
        if (v53 >= 4.50359963e15) {
          goto LABEL_142;
        }
        uint64_t v54 = (uint64_t)(v53 + v53) + 1;
      }
      else
      {
        if (v53 <= -4.50359963e15) {
          goto LABEL_142;
        }
        uint64_t v54 = (uint64_t)(v53 + v53);
        if (v54 >= 1) {
          --v54;
        }
      }
      double v53 = (double)(v54 >> 1);
LABEL_142:
      double result = sub_646C34(v17);
      if (result >= (uint64_t)v53)
      {
        int v63 = 6;
        int v64 = 0;
        char v66 = 0;
        int v67 = 0;
        memset(v68, 0, 11);
        nullsub_1(&v63);
        double result = (uint64_t)sub_647834((uint64_t)v25, (uint64_t)&v63);
LABEL_144:
        if (v66) {
          double result = sub_3A6B94((uint64_t)&v65);
        }
      }
LABEL_42:
      if (++v23 == v24) {
        return result;
      }
    }
    int v29 = sub_646CE8((uint64_t)v25);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    double v31 = ceil((double)(int)(v29 / 10+ (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)+ ((103 * (char)(v30 + v29 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v31 >= 0.0)
    {
      if (v31 < 4.50359963e15)
      {
        uint64_t v32 = (uint64_t)(v31 + v31) + 1;
        goto LABEL_75;
      }
    }
    else if (v31 > -4.50359963e15)
    {
      uint64_t v32 = (uint64_t)(v31 + v31);
      if (v32 >= 1) {
        --v32;
      }
LABEL_75:
      double v31 = (double)(v32 >> 1);
    }
    int v38 = sub_646CE8((uint64_t)v17);
    if (v38 < 0) {
      char v39 = -5;
    }
    else {
      char v39 = 5;
    }
    double v40 = ceil((double)(int)(v38 / 10+ (((103 * (char)(v39 + v38 % 10)) >> 15) & 1)+ ((103 * (char)(v39 + v38 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
    if (v40 >= 0.0)
    {
      if (v40 < 4.50359963e15)
      {
        uint64_t v41 = (uint64_t)(v40 + v40) + 1;
        goto LABEL_86;
      }
    }
    else if (v40 > -4.50359963e15)
    {
      uint64_t v41 = (uint64_t)(v40 + v40);
      if (v41 >= 1) {
        --v41;
      }
LABEL_86:
      double v40 = (double)(v41 >> 1);
    }
    BOOL v33 = (int)v31 < (int)v40;
    goto LABEL_88;
  }
  return result;
}

void sub_7BE750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x4B0]))
  {
    sub_3A6B94(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_7BE7B4(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v14 = a2;
  BOOL v15 = &v14;
  sub_7C3D64(a1, (unsigned __int8 **)&v15, (uint64_t)&__p);
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3));
  if (v13 == __p) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_6EA30((uint64_t)__p, v13, (uint64_t)&v15, v6, 1);
  sub_86E88((const void ***)&__p);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3) < 2)
  {
    if (v14) {
      int v7 = 3;
    }
    else {
      int v7 = 4;
    }
    LODWORD(v15) = v7;
    char v17 = 0;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
    uint64_t v8 = *a1;
    if (*(unsigned char *)(a3 + 1136))
    {
      sub_4C9334(a3 + 16, v8);
    }
    else
    {
      sub_4BE9F4(a3 + 16, v8);
      *(unsigned char *)(a3 + 1136) = 1;
    }
  }
  else
  {
    if (v14)
    {
      LODWORD(v15) = 1;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 1;
    }
    else
    {
      LODWORD(v15) = 2;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 2;
    }
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
  }
  BOOL v9 = (const void **)__p;
  if (__p)
  {
    uint64_t v10 = v13;
    uint64_t v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete((void *)*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    unint64_t v13 = v9;
    operator delete(v11);
  }
}

void sub_7BE9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  BOOL v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (*(unsigned char *)(v2 + 1136))
  {
    sub_3A6B94(v2 + 16);
    *(unsigned char *)(v2 + 1136) = 0;
  }
  if (LOBYTE(STACK[0x490]))
  {
    sub_3A6B94((uint64_t)va1);
    sub_1A668((void **)va);
    _Unwind_Resume(a1);
  }
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7BEA60(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_route_tags");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_simplest_route_tag");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_shortest_route_tag");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_use_traffic_level");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_absolute");
  char v8 = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_relative");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_absolute");
  double v10 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_21:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_32:
    *(void *)(a1 + 16) = (uint64_t)v10;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  operator delete(__p[0]);
LABEL_34:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_relative");
  double v14 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v14;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_min_traffic_level");
  double v15 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_max_traffic_level");
  double v16 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v16;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_quietest_route_tag");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 48) = v17;
  strcpy((char *)__p, "enable_hills_route_tag");
  HIBYTE(__p[2]) = 22;
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 49) = v18;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_stairs_route_tag");
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 50) = v19;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_avoids_walking_route_tag");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 51) = v20;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "enable_busy_roads_required_route_tag");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 52) = v21;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_best_route_tag");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 53) = v22;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_absolute");
  double v23 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v23;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_relative");
  double v24 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 64) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "route_complexity_turn_penalty");
  double v25 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 72) = v25;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "route_complexity_ferry_penalty");
  double v26 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 80) = v26;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "route_complexity_mount_dismount_penalty");
  double v27 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 88) = v27;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "route_complexity_stairs_penalty");
  double v28 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 96) = v28;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_absolute");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_72:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_83:
    *(void *)(a1 + 104) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_85;
  }
LABEL_84:
  operator delete(__p[0]);
LABEL_85:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_relative");
  double v33 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 112) = v33;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_max_busy_roads_relative_length");
  double v34 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 120) = v34;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_ev_avoids_charge_route_tag");
  BOOL v35 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 128) = v35;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_ev_other_network_tag");
  BOOL v36 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 129) = v36;
  return a1;
}

void sub_7BF524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7BF5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a3 + 1407);
  char v17 = 11;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteTagger");
  uint64_t v13 = 0;
  double v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB5E0(v5, (uint64_t)__p);
  sub_7C1E94(a1 + 16, __p);
  BOOL v6 = v19;
  if (v19)
  {
    do
    {
      double v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      BOOL v6 = v11;
    }
    while (v11);
  }
  BOOL v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  char v8 = (void **)v13;
  if (v13)
  {
    double v9 = v14;
    double v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      double v10 = v13;
    }
    double v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  sub_4BBDC0(a1 + 152, a3);
  return a1;
}

void sub_7BF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7BF724(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3 != a3[1] && *(unsigned char *)(a1 + 16))
  {
    sub_7BF78C(a1, a3);
    sub_7C043C(a1, (uint64_t **)a3);
  }
}

void sub_7BF78C(uint64_t a1, uint64_t *a2)
{
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  v82 = 0;
  unint64_t v83 = 0;
  unint64_t v84 = 0;
  uint64_t v2 = *a2;
  uint64_t v76 = a2[1];
  if (*a2 == v76)
  {
    uint64_t v51 = 0;
    char v55 = 0;
    goto LABEL_138;
  }
  while (2)
  {
    uint64_t v77 = v2;
    uint64_t v3 = (uint64_t *)sub_648B60(v2);
    long long __p = 0;
    unint64_t v80 = 0;
    uint64_t v81 = 0;
    sub_510340((uint64_t)&__p, *v3, v3[1], 0xAF8AF8AF8AF8AF8BLL * ((v3[1] - *v3) >> 5));
    BOOL v4 = (char *)__p;
    unint64_t v78 = v80;
    if (__p == v80)
    {
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_103;
    }
    do
    {
      if (!v4[1112])
      {
LABEL_136:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (!sub_604320((uint64_t)(v4 + 680), 0)) {
        goto LABEL_14;
      }
      BOOL v5 = v86;
      if ((unint64_t)v86 < v87)
      {
        sub_4BE9F4((uint64_t)v86, (uint64_t)v4);
        uint64_t v86 = v5 + 1120;
LABEL_14:
        if (!v4[1112]) {
          goto LABEL_136;
        }
        goto LABEL_15;
      }
      unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v86 - (unsigned char *)v85) >> 5);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x3A83A83A83A83ALL) {
        goto LABEL_178;
      }
      if (0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5) > v9) {
        unint64_t v9 = 0x5F15F15F15F15F16 * ((uint64_t)(v87 - (void)v85) >> 5);
      }
      if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v87 - (void)v85) >> 5) >= 0x1D41D41D41D41DLL) {
        unint64_t v10 = 0x3A83A83A83A83ALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v92 = &v87;
      if (v10)
      {
        if (v10 > 0x3A83A83A83A83ALL) {
          goto LABEL_177;
        }
        double v11 = (char *)operator new(1120 * v10);
      }
      else
      {
        double v11 = 0;
      }
      unint64_t v88 = v11;
      v89 = &v11[1120 * v8];
      uint64_t v90 = v89;
      long long v91 = &v11[1120 * v10];
      sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
      double v16 = v89;
      char v17 = v90 + 1120;
      BOOL v18 = (char *)v85;
      BOOL v19 = v86;
      if (v86 == v85)
      {
        uint64_t v85 = v89;
        uint64_t v86 = v90 + 1120;
        unint64_t v87 = (unint64_t)v91;
        if (v19) {
          goto LABEL_65;
        }
      }
      else
      {
        do
        {
          v19 -= 1120;
          double v16 = (void *)sub_4C09FC((uint64_t)v16 - 1120, (uint64_t)v19);
        }
        while (v19 != v18);
        BOOL v19 = (char *)v85;
        BOOL v20 = v86;
        uint64_t v85 = v16;
        uint64_t v86 = v17;
        unint64_t v87 = (unint64_t)v91;
        if (v20 != v19)
        {
          for (uint64_t i = 0; &v20[i] != v19; i -= 1120)
          {
            BOOL v22 = &v20[i];
            if (v20[i - 8])
            {
              sub_3A6CB8((uint64_t)(v22 - 440));
              *(v22 - 8) = 0;
            }
            *((void *)v22 - 60) = off_2438EC8;
            if (*(v22 - 449) < 0) {
              operator delete(*(void **)&v20[i - 472]);
            }
            double v23 = (void **)&v20[i];
            double v24 = &v20[i - 488];
            if (*v24) {
              *double v24 = 0;
            }
            if (*((char *)v23 - 505) < 0)
            {
              operator delete(*(void **)&v20[i - 528]);
              double v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0)
              {
LABEL_49:
                if ((*((char *)v25 - 561) & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_59;
              }
            }
            else
            {
              double v25 = (void **)&v20[i];
              if ((v20[i - 537] & 0x80000000) == 0) {
                goto LABEL_49;
              }
            }
            operator delete(*(v25 - 70));
            if ((*((char *)v25 - 561) & 0x80000000) == 0)
            {
LABEL_50:
              double v26 = (void **)&v20[i];
              if ((v20[i - 601] & 0x80000000) == 0) {
                goto LABEL_51;
              }
              goto LABEL_60;
            }
LABEL_59:
            operator delete(*(void **)&v20[i - 584]);
            double v26 = (void **)&v20[i];
            if ((v20[i - 601] & 0x80000000) == 0)
            {
LABEL_51:
              if ((*((char *)v26 - 633) & 0x80000000) == 0) {
                goto LABEL_52;
              }
              goto LABEL_61;
            }
LABEL_60:
            operator delete(*(v26 - 78));
            if ((*((char *)v26 - 633) & 0x80000000) == 0)
            {
LABEL_52:
              double v27 = (void **)&v20[i];
              if (v20[i - 657] < 0) {
                goto LABEL_62;
              }
              goto LABEL_53;
            }
LABEL_61:
            operator delete(*(v23 - 82));
            double v27 = (void **)&v20[i];
            if (v20[i - 657] < 0)
            {
LABEL_62:
              operator delete(*(v27 - 85));
              double v28 = (char *)(v27 - 86);
              if (!*((unsigned char *)v27 - 688)) {
                goto LABEL_55;
              }
LABEL_54:
              *double v28 = 0;
              goto LABEL_55;
            }
LABEL_53:
            double v28 = (char *)(v27 - 86);
            if (*((unsigned char *)v27 - 688)) {
              goto LABEL_54;
            }
LABEL_55:
            sub_29D95C((uint64_t)(v22 - 1120));
          }
        }
        if (v19) {
LABEL_65:
        }
          operator delete(v19);
      }
      uint64_t v86 = v17;
      if (!v4[1112]) {
        goto LABEL_136;
      }
LABEL_15:
      if (sub_604320((uint64_t)(v4 + 680), 1))
      {
        BOOL v6 = v83;
        if ((unint64_t)v83 < v84)
        {
          sub_4BE9F4((uint64_t)v83, (uint64_t)v4);
          BOOL v7 = v6 + 1120;
LABEL_8:
          unint64_t v83 = v7;
          goto LABEL_9;
        }
        unint64_t v12 = 0xAF8AF8AF8AF8AF8BLL * ((v83 - (unsigned char *)v82) >> 5);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x3A83A83A83A83ALL) {
LABEL_178:
        }
          sub_2E00();
        if (0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5) > v13) {
          unint64_t v13 = 0x5F15F15F15F15F16 * ((uint64_t)(v84 - (void)v82) >> 5);
        }
        if (0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v84 - (void)v82) >> 5) >= 0x1D41D41D41D41DLL) {
          unint64_t v14 = 0x3A83A83A83A83ALL;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t v92 = &v84;
        if (v14)
        {
          if (v14 > 0x3A83A83A83A83ALL) {
LABEL_177:
          }
            sub_188D718();
          uint64_t v15 = (char *)operator new(1120 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v88 = v15;
        v89 = &v15[1120 * v12];
        uint64_t v90 = v89;
        long long v91 = &v15[1120 * v14];
        sub_4BE9F4((uint64_t)v89, (uint64_t)v4);
        double v29 = v89;
        BOOL v7 = v90 + 1120;
        double v30 = (char *)v82;
        uint64_t v31 = v83;
        if (v83 == v82)
        {
          v82 = v89;
          unint64_t v83 = v90 + 1120;
          unint64_t v84 = (unint64_t)v91;
          if (!v31) {
            goto LABEL_8;
          }
        }
        else
        {
          do
          {
            v31 -= 1120;
            double v29 = (void *)sub_4C09FC((uint64_t)v29 - 1120, (uint64_t)v31);
          }
          while (v31 != v30);
          uint64_t v31 = (char *)v82;
          uint64_t v32 = v83;
          v82 = v29;
          unint64_t v83 = v7;
          unint64_t v84 = (unint64_t)v91;
          if (v32 != v31)
          {
            for (uint64_t j = 0; &v32[j] != v31; j -= 1120)
            {
              double v34 = &v32[j];
              if (v32[j - 8])
              {
                sub_3A6CB8((uint64_t)(v34 - 440));
                *(v34 - 8) = 0;
              }
              *((void *)v34 - 60) = off_2438EC8;
              if (*(v34 - 449) < 0) {
                operator delete(*(void **)&v32[j - 472]);
              }
              BOOL v35 = (void **)&v32[j];
              BOOL v36 = &v32[j - 488];
              if (*v36) {
                *BOOL v36 = 0;
              }
              if (*((char *)v35 - 505) < 0)
              {
                operator delete(*(void **)&v32[j - 528]);
                uint64_t v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0)
                {
LABEL_83:
                  if ((*((char *)v37 - 561) & 0x80000000) == 0) {
                    goto LABEL_84;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                uint64_t v37 = (void **)&v32[j];
                if ((v32[j - 537] & 0x80000000) == 0) {
                  goto LABEL_83;
                }
              }
              operator delete(*(v37 - 70));
              if ((*((char *)v37 - 561) & 0x80000000) == 0)
              {
LABEL_84:
                int v38 = (void **)&v32[j];
                if ((v32[j - 601] & 0x80000000) == 0) {
                  goto LABEL_85;
                }
                goto LABEL_94;
              }
LABEL_93:
              operator delete(*(void **)&v32[j - 584]);
              int v38 = (void **)&v32[j];
              if ((v32[j - 601] & 0x80000000) == 0)
              {
LABEL_85:
                if ((*((char *)v38 - 633) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_95;
              }
LABEL_94:
              operator delete(*(v38 - 78));
              if ((*((char *)v38 - 633) & 0x80000000) == 0)
              {
LABEL_86:
                char v39 = (void **)&v32[j];
                if (v32[j - 657] < 0) {
                  goto LABEL_96;
                }
                goto LABEL_87;
              }
LABEL_95:
              operator delete(*(v35 - 82));
              char v39 = (void **)&v32[j];
              if (v32[j - 657] < 0)
              {
LABEL_96:
                operator delete(*(v39 - 85));
                double v40 = (char *)(v39 - 86);
                if (!*((unsigned char *)v39 - 688)) {
                  goto LABEL_89;
                }
LABEL_88:
                *double v40 = 0;
                goto LABEL_89;
              }
LABEL_87:
              double v40 = (char *)(v39 - 86);
              if (*((unsigned char *)v39 - 688)) {
                goto LABEL_88;
              }
LABEL_89:
              sub_29D95C((uint64_t)(v34 - 1120));
            }
          }
          if (!v31) {
            goto LABEL_8;
          }
        }
        operator delete(v31);
        goto LABEL_8;
      }
LABEL_9:
      v4 += 1120;
    }
    while (v4 != v78);
    BOOL v4 = (char *)__p;
    if (!__p) {
      goto LABEL_4;
    }
LABEL_103:
    uint64_t v41 = v80;
    BOOL v42 = v4;
    if (v80 == v4) {
      goto LABEL_3;
    }
    uint64_t v43 = 0;
    do
    {
      char v44 = &v41[v43];
      if (v41[v43 - 8])
      {
        sub_3A6CB8((uint64_t)(v44 - 440));
        *(v44 - 8) = 0;
      }
      *((void *)v44 - 60) = off_2438EC8;
      if (*(v44 - 449) < 0) {
        operator delete(*(void **)&v41[v43 - 472]);
      }
      BOOL v45 = (void **)&v41[v43];
      uint64_t v46 = &v41[v43 - 488];
      if (*v46) {
        *uint64_t v46 = 0;
      }
      if (*((char *)v45 - 505) < 0)
      {
        operator delete(*(void **)&v41[v43 - 528]);
        uint64_t v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0)
        {
LABEL_113:
          if ((*((char *)v47 - 561) & 0x80000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_123;
        }
      }
      else
      {
        uint64_t v47 = (void **)&v41[v43];
        if ((v41[v43 - 537] & 0x80000000) == 0) {
          goto LABEL_113;
        }
      }
      operator delete(*(v47 - 70));
      if ((*((char *)v47 - 561) & 0x80000000) == 0)
      {
LABEL_114:
        uint64_t v48 = (void **)&v41[v43];
        if ((v41[v43 - 601] & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_124;
      }
LABEL_123:
      operator delete(*(void **)&v41[v43 - 584]);
      uint64_t v48 = (void **)&v41[v43];
      if ((v41[v43 - 601] & 0x80000000) == 0)
      {
LABEL_115:
        if ((*((char *)v48 - 633) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete(*(v48 - 78));
      if ((*((char *)v48 - 633) & 0x80000000) == 0)
      {
LABEL_116:
        double v49 = (void **)&v41[v43];
        if ((v41[v43 - 657] & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(*(v45 - 82));
      double v49 = (void **)&v41[v43];
      if ((v41[v43 - 657] & 0x80000000) == 0)
      {
LABEL_117:
        BOOL v50 = (char *)(v49 - 86);
        if (!*((unsigned char *)v49 - 688)) {
          goto LABEL_119;
        }
LABEL_118:
        *BOOL v50 = 0;
        goto LABEL_119;
      }
LABEL_126:
      operator delete(*(v49 - 85));
      BOOL v50 = (char *)(v49 - 86);
      if (*((unsigned char *)v49 - 688)) {
        goto LABEL_118;
      }
LABEL_119:
      sub_29D95C((uint64_t)(v44 - 1120));
      v43 -= 1120;
    }
    while (&v41[v43] != v4);
    BOOL v42 = __p;
LABEL_3:
    unint64_t v80 = v4;
    operator delete(v42);
LABEL_4:
    uint64_t v2 = v77 + 7560;
    if (v77 + 7560 != v76) {
      continue;
    }
    break;
  }
  uint64_t v52 = (char *)v82;
  uint64_t v51 = v83;
  if (v82 == v83)
  {
    char v55 = v83;
    goto LABEL_138;
  }
  do
  {
    BOOL v53 = sub_6054A8((uint64_t)v52);
    v52 += 1120;
  }
  while (v52 != v51 && v53);
  if (v53)
  {
    char v55 = v82;
    uint64_t v51 = v83;
LABEL_138:
    uint64_t v57 = (char *)sub_7C29DC((uint64_t)v55, (uint64_t)v51, (uint64_t *)&v82);
    unint64_t v58 = v83;
    if (v83 != v57)
    {
      while (v58 != v57)
      {
        v58 -= 1120;
        sub_3A6B94((uint64_t)v58);
      }
      unint64_t v83 = v57;
    }
  }
  unint64_t v60 = (char *)v85;
  unint64_t v59 = v86;
  if (v85 == v86)
  {
    int v63 = v85;
    goto LABEL_151;
  }
  do
  {
    BOOL v61 = sub_6054A8((uint64_t)v60);
    v60 += 1120;
  }
  while (v60 != v59 && v61);
  if (v61)
  {
    int v63 = v85;
    unint64_t v60 = v86;
LABEL_151:
    int v64 = (char *)sub_7C29DC((uint64_t)v63, (uint64_t)v60, (uint64_t *)&v85);
    uint64_t v65 = v86;
    if (v86 != v64)
    {
      while (v65 != v64)
      {
        v65 -= 1120;
        sub_3A6B94((uint64_t)v65);
      }
      uint64_t v86 = v64;
    }
  }
  uint64_t v67 = *a2;
  uint64_t v66 = a2[1];
  if (*a2 != v66)
  {
    while (2)
    {
      int v68 = (void *)sub_648B60(v67);
      if (*v68 == v68[1])
      {
        if (v82 != v83)
        {
          sub_7C1BE8((uint64_t *)&v82, 1, (uint64_t)&v88);
          sub_64B81C(v67, (uint64_t)&v88);
          goto LABEL_164;
        }
      }
      else if (v85 != v86)
      {
        sub_7C1BE8((uint64_t *)&v85, 0, (uint64_t)&v88);
        sub_64B81C(v67, (uint64_t)&v88);
LABEL_164:
        if (v93) {
          sub_3A6B94((uint64_t)&v90);
        }
      }
      v67 += 7560;
      if (v67 == v66) {
        break;
      }
      continue;
    }
  }
  BOOL v69 = (char *)v82;
  if (v82)
  {
    uint64_t v70 = v83;
    uint64_t v71 = v82;
    if (v83 != v82)
    {
      do
        uint64_t v70 = (char *)sub_3A6B94((uint64_t)(v70 - 1120));
      while (v70 != v69);
      uint64_t v71 = v82;
    }
    unint64_t v83 = v69;
    operator delete(v71);
  }
  v72 = (char *)v85;
  if (v85)
  {
    uint64_t v73 = v86;
    int v74 = v85;
    if (v86 != v85)
    {
      do
        uint64_t v73 = (char *)sub_3A6B94((uint64_t)(v73 - 1120));
      while (v73 != v72);
      int v74 = v85;
    }
    uint64_t v86 = v72;
    operator delete(v74);
  }
}

void sub_7C0384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v12 = va_arg(va1, void *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7C03E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_50E790((void **)va);
  JUMPOUT(0x7C0424);
}

void sub_7C043C(uint64_t a1, uint64_t **a2)
{
  if (0xBAA6550FFBAA6551 * (a2[1] - *a2) < 2 || !*(unsigned char *)(a1 + 16)) {
    return;
  }
  uint64_t v3 = a2;
  uint64_t v4 = sub_79DB3C(a2, 0);
  int v5 = sub_646CE8(v4);
  if (v5 < 0) {
    char v6 = -5;
  }
  else {
    char v6 = 5;
  }
  double v7 = ceil((double)(int)(v5 / 10+ (((103 * (char)(v6 + v5 % 10)) >> 15) & 1)+ ((103 * (char)(v6 + v5 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
  uint64_t v155 = a1;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_14;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_14;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_14:
  int v9 = sub_6488A0(*v3);
  int v151 = sub_6487C0(*v3);
  int v149 = sub_64A6C0(*v3);
  long long __p = 0;
  uint64_t v163 = 0;
  unint64_t v164 = 0;
  uint64_t v10 = sub_646C34(*v3);
  double v11 = (char *)operator new(8uLL);
  *(void *)double v11 = v10;
  long long __p = v11;
  unint64_t v164 = (unint64_t)(v11 + 8);
  uint64_t v163 = v11 + 8;
  unint64_t v159 = 0;
  v160 = 0;
  uint64_t v161 = 0;
  double v12 = sub_7C196C((double *)a1, *v3);
  unint64_t v13 = (double *)operator new(8uLL);
  double *v13 = v12;
  unint64_t v159 = v13;
  uint64_t v161 = v13 + 1;
  v160 = v13 + 1;
  long long v156 = 0;
  int v157 = 0;
  unint64_t v158 = 0;
  uint64_t v14 = sub_64894C(*v3);
  uint64_t v15 = (char *)operator new(8uLL);
  *(void *)uint64_t v15 = v14;
  long long v156 = v15;
  unint64_t v158 = (unint64_t)(v15 + 8);
  int v157 = v15 + 8;
  unint64_t v16 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
  if (v16 <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
  }
  unint64_t v139 = v17;
  v153 = v3;
  if (v16 >= 2)
  {
    unint64_t v154 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 1;
    int v141 = (int)v7;
    while (1)
    {
      BOOL v20 = (uint64_t *)sub_79DB3C(v3, v19);
      int v21 = sub_646CE8((uint64_t)v20);
      if (v21 < 0) {
        char v22 = -5;
      }
      else {
        char v22 = 5;
      }
      double v23 = ceil((double)(int)(v21 / 10+ (((103 * (char)(v22 + v21 % 10)) >> 15) & 1)+ ((103 * (char)(v22 + v21 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
      if (v23 >= 0.0)
      {
        unint64_t v24 = v154;
        if (v23 >= 4.50359963e15) {
          goto LABEL_31;
        }
        uint64_t v25 = (uint64_t)(v23 + v23) + 1;
      }
      else
      {
        unint64_t v24 = v154;
        if (v23 <= -4.50359963e15) {
          goto LABEL_31;
        }
        uint64_t v25 = (uint64_t)(v23 + v23);
        if (v25 >= 1) {
          --v25;
        }
      }
      double v23 = (double)(v25 >> 1);
LABEL_31:
      if (v141 == (int)v23)
      {
        unint64_t v154 = 0xBAA6550FFBAA6551 * (v3[1] - *v3);
        goto LABEL_48;
      }
      if (v141 > (int)v23) {
        unint64_t v24 = v19;
      }
      unint64_t v154 = v24;
      if (v24 < 0xBAA6550FFBAA6551 * (v3[1] - *v3))
      {
        uint64_t v26 = sub_79DB3C(v3, v24);
        int v27 = sub_646CE8(v26);
        if (v27 < 0) {
          char v28 = -5;
        }
        else {
          char v28 = 5;
        }
        double v29 = ceil((double)(int)(v27 / 10+ (((103 * (char)(v28 + v27 % 10)) >> 15) & 1)+ ((103 * (char)(v28 + v27 % 10)) >> 10))/ 60.0)* 60.0* 10.0;
        if (v29 >= 0.0)
        {
          if (v29 < 4.50359963e15)
          {
            uint64_t v30 = (uint64_t)(v29 + v29) + 1;
            goto LABEL_46;
          }
        }
        else if (v29 > -4.50359963e15)
        {
          uint64_t v30 = (uint64_t)(v29 + v29);
          if (v30 >= 1) {
            --v30;
          }
LABEL_46:
          double v29 = (double)(v30 >> 1);
        }
        int v141 = (int)v29;
      }
LABEL_48:
      BOOL v31 = sub_6488A0(v20);
      int v32 = sub_6487C0(v20);
      int v143 = sub_64A6C0(v20);
      int v145 = v32;
      unint64_t v147 = v18;
      int v146 = v9;
      uint64_t v33 = sub_646C34(v20);
      uint64_t v34 = v33;
      BOOL v35 = v163;
      if ((unint64_t)v163 < v164)
      {
        *(void *)uint64_t v163 = v33;
        BOOL v36 = v35 + 8;
        uint64_t v37 = (double *)v155;
        goto LABEL_67;
      }
      int v38 = (char *)__p;
      uint64_t v39 = v163 - (unsigned char *)__p;
      int64_t v40 = (v163 - (unsigned char *)__p) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v42 = v164 - (void)__p;
      if ((uint64_t)(v164 - (void)__p) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 >> 61) {
          sub_188D718();
        }
        char v44 = operator new(8 * v43);
        BOOL v45 = &v44[8 * v40];
        *(void *)BOOL v45 = v34;
        BOOL v36 = v45 + 8;
        if (v35 == v38)
        {
LABEL_80:
          uint64_t v37 = (double *)v155;
          long long __p = v45;
          unint64_t v164 = (unint64_t)&v44[8 * v43];
          if (v35) {
            goto LABEL_66;
          }
          goto LABEL_67;
        }
      }
      else
      {
        char v44 = 0;
        BOOL v45 = (char *)(8 * v40);
        *(void *)(8 * v40) = v34;
        BOOL v36 = (char *)(8 * v40 + 8);
        if (v35 == v38) {
          goto LABEL_80;
        }
      }
      unint64_t v46 = v35 - 8 - v38;
      uint64_t v37 = (double *)v155;
      if (v46 < 0x58) {
        goto LABEL_221;
      }
      if ((unint64_t)(v35 - &v44[v39]) < 0x20) {
        goto LABEL_221;
      }
      uint64_t v47 = (v46 >> 3) + 1;
      uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
      double v49 = &v35[-v48];
      v45 -= v48;
      BOOL v50 = &v44[8 * v40 - 16];
      uint64_t v51 = v35 - 16;
      uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        *BOOL v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 4;
      }
      while (v52);
      BOOL v35 = v49;
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_221:
        do
        {
          uint64_t v54 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v45 - 1) = v54;
          v45 -= 8;
        }
        while (v35 != v38);
      }
      BOOL v35 = (char *)__p;
      long long __p = v45;
      unint64_t v164 = (unint64_t)&v44[8 * v43];
      if (v35) {
LABEL_66:
      }
        operator delete(v35);
LABEL_67:
      uint64_t v163 = v36;
      double v55 = sub_7C196C(v37, v20);
      double v56 = v55;
      uint64_t v57 = v160;
      if (v160 < v161)
      {
        double *v160 = v55;
        uint64_t v58 = (uint64_t)(v57 + 1);
        goto LABEL_91;
      }
      unint64_t v59 = (double *)v159;
      int64_t v60 = (char *)v160 - (unsigned char *)v159;
      uint64_t v61 = ((char *)v160 - (unsigned char *)v159) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v63 = (char *)v161 - (unsigned char *)v159;
      if (((char *)v161 - (unsigned char *)v159) >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        if (v64 >> 61) {
          sub_188D718();
        }
        uint64_t v65 = (char *)operator new(8 * v64);
        uint64_t v66 = (double *)&v65[8 * v61];
        *uint64_t v66 = v56;
        uint64_t v58 = (uint64_t)(v66 + 1);
        if (v57 == v59) {
          goto LABEL_89;
        }
LABEL_83:
        unint64_t v67 = (char *)(v57 - 1) - (char *)v59;
        if (v67 < 0x58) {
          goto LABEL_222;
        }
        if ((unint64_t)((char *)v57 - &v65[v60]) < 0x20) {
          goto LABEL_222;
        }
        uint64_t v68 = (v67 >> 3) + 1;
        uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v70 = &v57[v69 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v66 = (double *)((char *)v66 - v69);
        uint64_t v71 = &v65[8 * v61 - 16];
        v72 = v57 - 2;
        uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)uint64_t v71 = v74;
          v71 -= 32;
          v72 -= 4;
          v73 -= 4;
        }
        while (v73);
        uint64_t v57 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_222:
          do
          {
            uint64_t v75 = *((void *)v57-- - 1);
            *((void *)v66-- - 1) = v75;
          }
          while (v57 != v59);
        }
        goto LABEL_89;
      }
      uint64_t v65 = 0;
      uint64_t v66 = (double *)(8 * v61);
      *(double *)(8 * v61) = v55;
      uint64_t v58 = 8 * v61 + 8;
      if (v57 != v59) {
        goto LABEL_83;
      }
LABEL_89:
      unint64_t v159 = v66;
      uint64_t v161 = (double *)&v65[8 * v64];
      if (v59) {
        operator delete(v59);
      }
LABEL_91:
      v160 = (double *)v58;
      uint64_t v76 = sub_64894C(v20);
      uint64_t v77 = v76;
      unint64_t v78 = v157;
      if ((unint64_t)v157 >= v158)
      {
        v82 = (char *)v156;
        uint64_t v83 = v157 - (unsigned char *)v156;
        int64_t v84 = (v157 - (unsigned char *)v156) >> 3;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v86 = v158 - (void)v156;
        if ((uint64_t)(v158 - (void)v156) >> 2 > v85) {
          unint64_t v85 = v86 >> 2;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          if (v87 >> 61) {
            sub_188D718();
          }
          unint64_t v88 = operator new(8 * v87);
          v89 = &v88[8 * v84];
          *(void *)v89 = v77;
          uint64_t v79 = v89 + 8;
          if (v78 != v82)
          {
LABEL_102:
            unint64_t v90 = v78 - 8 - v82;
            if (v90 < 0x58)
            {
              int v81 = v145;
              goto LABEL_111;
            }
            unint64_t v91 = v78 - &v88[v83];
            int v81 = v145;
            if (v91 < 0x20) {
              goto LABEL_223;
            }
            uint64_t v92 = (v90 >> 3) + 1;
            uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            double v94 = &v78[-v93];
            v89 -= v93;
            uint64_t v95 = &v88[8 * v84 - 16];
            uint64_t v96 = v78 - 16;
            uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v98 = *(_OWORD *)v96;
              *(v95 - 1) = *((_OWORD *)v96 - 1);
              *uint64_t v95 = v98;
              v95 -= 2;
              v96 -= 32;
              v97 -= 4;
            }
            while (v97);
            unint64_t v78 = v94;
            if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_223:
              do
              {
LABEL_111:
                uint64_t v99 = *((void *)v78 - 1);
                v78 -= 8;
                *((void *)v89 - 1) = v99;
                v89 -= 8;
              }
              while (v78 != v82);
            }
            unint64_t v78 = (char *)v156;
            long long v156 = v89;
            unint64_t v158 = (unint64_t)&v88[8 * v87];
            int v80 = v146;
            if (v78) {
LABEL_113:
            }
              operator delete(v78);
LABEL_114:
            unint64_t v18 = v147;
            goto LABEL_115;
          }
        }
        else
        {
          unint64_t v88 = 0;
          v89 = (char *)(8 * v84);
          *(void *)(8 * v84) = v77;
          uint64_t v79 = (char *)(8 * v84 + 8);
          if (v78 != v82) {
            goto LABEL_102;
          }
        }
        int v81 = v145;
        long long v156 = v89;
        unint64_t v158 = (unint64_t)&v88[8 * v87];
        int v80 = v146;
        if (v78) {
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      *(void *)int v157 = v76;
      uint64_t v79 = v78 + 8;
      int v80 = v146;
      unint64_t v18 = v147;
      int v81 = v145;
LABEL_115:
      int v157 = v79;
      uint64_t v3 = v153;
      int v9 = v80 | v31;
      v151 |= v81;
      v149 |= v143;
      if (sub_6477A0((uint64_t)v20)) {
        unint64_t v18 = v19;
      }
      if (++v19 == v139) {
        goto LABEL_118;
      }
    }
  }
  unint64_t v18 = 0;
  unint64_t v154 = 0;
LABEL_118:
  unint64_t v100 = 126 - 2 * __clz((v163 - (unsigned char *)__p) >> 3);
  if (v163 == __p) {
    uint64_t v101 = 0;
  }
  else {
    uint64_t v101 = v100;
  }
  sub_7C2B94((uint64_t)__p, v163, (uint64_t)&v165, v101, 1);
  uint64_t v144 = *(void *)sub_5D0188(&__p, 0);
  uint64_t v140 = *(void *)sub_5D0188(&__p, 1uLL);
  std::__sort<std::__less<double,double> &,double *>();
  double v102 = *(double *)v159;
  uint64_t v103 = (double *)sub_7BB804(&v159, 1uLL);
  unint64_t v104 = 126 - 2 * __clz((v157 - (unsigned char *)v156) >> 3);
  double v105 = *v103;
  if (v157 == v156) {
    uint64_t v106 = 0;
  }
  else {
    uint64_t v106 = v104;
  }
  sub_7C2B94((uint64_t)v156, v157, (uint64_t)&v165, v106, 1);
  uint64_t v142 = *(void *)v156;
  uint64_t v137 = *(void *)sub_5D0188(&v156, 1uLL);
  uint64_t v138 = sub_79DB3C(v3, v18);
  uint64_t v107 = (char *)v3[1] - (char *)*v3;
  if (v107)
  {
    unint64_t v108 = 0;
    unint64_t v148 = 0xBAA6550FFBAA6551 * (v107 >> 3);
    int v136 = v9 ^ 1;
    int v150 = v149 ^ 1;
    int v152 = v151 ^ 1;
    while (1)
    {
      uint64_t v109 = sub_79DB3C(v3, v108);
      size_t v110 = (uint64_t *)v109;
      if (*(unsigned char *)(v155 + 8))
      {
        uint64_t v111 = (void *)sub_374DF4(v109);
        BOOL v112 = *v111 == v111[1];
      }
      else
      {
        BOOL v112 = 1;
      }
      uint64_t v113 = sub_646C34(v110);
      double v114 = sub_7C196C((double *)v155, v110);
      uint64_t v115 = sub_64894C(v110);
      int v116 = sub_648828(v110);
      BOOL v117 = sub_6488A0(v110);
      int v118 = sub_6487C0(v110);
      int v119 = sub_64A6C0(v110);
      BOOL v120 = sub_6477A0((uint64_t)v110);
      BOOL v121 = v120;
      if (v108 == v154 && !*(unsigned char *)(v155 + 69))
      {
        int v165 = 1;
        int v166 = 0;
        char v168 = 0;
        int v169 = 0;
        v170[0] = 0;
        *(_DWORD *)((char *)v170 + 7) = 0;
        nullsub_1(&v165);
        sub_64B81C((uint64_t)v110, (uint64_t)&v165);
        goto LABEL_133;
      }
      if (v108 == v154)
      {
        if (v120
          || (uint64_t v122 = sub_374DF4(v138), v123 = *(_DWORD **)v122, v124 = *(_DWORD **)(v122 + 8), *(_DWORD **)v122 == v124))
        {
LABEL_137:
          if (v112)
          {
            int v165 = 2;
            int v166 = 0;
            char v168 = 0;
            int v169 = 0;
            v170[0] = 0;
            *(_DWORD *)((char *)v170 + 7) = 0;
            nullsub_1(&v165);
            sub_64B81C((uint64_t)v110, (uint64_t)&v165);
            goto LABEL_133;
          }
          goto LABEL_126;
        }
        while (*v123 != 2)
        {
          v123 += 292;
          if (v123 == v124) {
            goto LABEL_137;
          }
        }
      }
      if (*(unsigned char *)(v155 + 18) && v113 == v144) {
        break;
      }
LABEL_159:
      if (!v121)
      {
        if (*(unsigned char *)(v155 + 64) && v115 == v142)
        {
          double v130 = *(double *)(v155 + 128) * (double)v142;
          if (v130 >= 0.0)
          {
            if (v130 < 4.50359963e15)
            {
              uint64_t v131 = (uint64_t)(v130 + v130) + 1;
              goto LABEL_175;
            }
          }
          else if (v130 > -4.50359963e15)
          {
            uint64_t v131 = (uint64_t)(v130 + v130);
            if (v131 >= 1) {
              --v131;
            }
LABEL_175:
            double v130 = (double)(v131 >> 1);
          }
          uint64_t v132 = *(void *)(v155 + 120) + v142;
          if (v132 <= (uint64_t)v130) {
            uint64_t v132 = (uint64_t)v130;
          }
          if (v132 <= v137)
          {
            double v133 = *(double *)(v155 + 136) * (double)v113;
            if (v133 >= 0.0)
            {
              if (v133 < 4.50359963e15)
              {
                uint64_t v134 = (uint64_t)(v133 + v133) + 1;
                goto LABEL_186;
              }
            }
            else if (v133 > -4.50359963e15)
            {
              uint64_t v134 = (uint64_t)(v133 + v133);
              if (v134 >= 1) {
                --v134;
              }
LABEL_186:
              double v133 = (double)(v134 >> 1);
            }
            if (v142 <= (uint64_t)v133)
            {
              int v165 = 7;
              int v166 = 0;
              char v168 = 0;
              int v169 = 0;
              v170[0] = 0;
              *(_DWORD *)((char *)v170 + 7) = 0;
              nullsub_1(&v165);
              sub_64B81C((uint64_t)v110, (uint64_t)&v165);
              goto LABEL_133;
            }
          }
        }
        if (v114 == v102)
        {
          double v135 = v114 + *(double *)(v155 + 72);
          if (v135 < v114 * *(double *)(v155 + 80)) {
            double v135 = v114 * *(double *)(v155 + 80);
          }
          if (v135 <= v105)
          {
            int v165 = 5;
            int v166 = 0;
            char v168 = 0;
            int v169 = 0;
            v170[0] = 0;
            *(_DWORD *)((char *)v170 + 7) = 0;
            nullsub_1(&v165);
            sub_64B81C((uint64_t)v110, (uint64_t)&v165);
            goto LABEL_133;
          }
        }
        if (((v117 | v136) & 1) == 0 && ((v116 ^ 1) & 1) == 0 && *(unsigned char *)(v155 + 65) && *(unsigned char *)(v155 + 1592))
        {
          int v165 = 18;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64B81C((uint64_t)v110, (uint64_t)&v165);
          goto LABEL_133;
        }
        if (((v118 | v152) & 1) == 0 && *(unsigned char *)(v155 + 66) && *(unsigned char *)(v155 + 1592))
        {
          int v165 = 19;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64B81C((uint64_t)v110, (uint64_t)&v165);
          goto LABEL_133;
        }
        if (((v119 | v150) & 1) == 0 && *(unsigned char *)(v155 + 67))
        {
          int v165 = 20;
          int v166 = 0;
          char v168 = 0;
          int v169 = 0;
          v170[0] = 0;
          *(_DWORD *)((char *)v170 + 7) = 0;
          nullsub_1(&v165);
          sub_64B81C((uint64_t)v110, (uint64_t)&v165);
          goto LABEL_133;
        }
        goto LABEL_126;
      }
      if (v112)
      {
        if (*(unsigned char *)(v155 + 69)) {
          int v129 = 2;
        }
        else {
          int v129 = 3;
        }
        int v165 = v129;
        int v166 = 0;
        char v168 = 0;
        int v169 = 0;
        v170[0] = 0;
        *(_DWORD *)((char *)v170 + 7) = 0;
        nullsub_1(&v165);
        sub_64B81C((uint64_t)v110, (uint64_t)&v165);
LABEL_133:
        if (v168) {
          sub_3A6B94((uint64_t)&v167);
        }
      }
LABEL_126:
      ++v108;
      uint64_t v3 = v153;
      if (v108 == v148) {
        goto LABEL_206;
      }
    }
    double v126 = *(double *)(v155 + 40) * (double)v144;
    if (v126 >= 0.0)
    {
      if (v126 >= 4.50359963e15) {
        goto LABEL_156;
      }
      uint64_t v127 = (uint64_t)(v126 + v126) + 1;
    }
    else
    {
      if (v126 <= -4.50359963e15) {
        goto LABEL_156;
      }
      uint64_t v127 = (uint64_t)(v126 + v126);
      if (v127 >= 1) {
        --v127;
      }
    }
    double v126 = (double)(v127 >> 1);
LABEL_156:
    uint64_t v128 = *(void *)(v155 + 32) + v144;
    if (v128 <= (uint64_t)v126) {
      uint64_t v128 = (uint64_t)v126;
    }
    if (v128 <= v140)
    {
      int v165 = 6;
      int v166 = 0;
      char v168 = 0;
      int v169 = 0;
      v170[0] = 0;
      *(_DWORD *)((char *)v170 + 7) = 0;
      nullsub_1(&v165);
      sub_64B81C((uint64_t)v110, (uint64_t)&v165);
      goto LABEL_133;
    }
    goto LABEL_159;
  }
LABEL_206:
  if (v156)
  {
    int v157 = (char *)v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = (double *)v159;
    operator delete(v159);
  }
  if (__p)
  {
    uint64_t v163 = (char *)__p;
    operator delete(__p);
  }
}

void sub_7C1834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28)
{
  if (LOBYTE(STACK[0x520])) {
    sub_3A6B94(a15);
  }
  if (__p)
  {
    operator delete(__p);
    double v29 = a25;
    if (!a25)
    {
LABEL_5:
      uint64_t v30 = a28;
      if (!a28) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    double v29 = a25;
    if (!a25) {
      goto LABEL_5;
    }
  }
  operator delete(v29);
  uint64_t v30 = a28;
  if (!a28) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(v30);
  _Unwind_Resume(a1);
}

double sub_7C196C(double *a1, uint64_t *a2)
{
  sub_64ACFC(a2, &v8);
  double v3 = 0.0;
  if (v8 != v9)
  {
    uint64_t v4 = v8;
    while (2)
    {
      uint64_t v5 = *(void *)v4;
      int v6 = *(_DWORD *)(*(void *)v4 + 160);
      switch(v6)
      {
        case 1:
        case 2:
        case 4:
        case 6:
        case 7:
        case 20:
        case 21:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 33:
        case 34:
        case 35:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 86:
        case 87:
          goto LABEL_6;
        default:
          if ((v6 - 41) <= 0x12) {
LABEL_6:
          }
            double v3 = v3 + a1[11];
          if ((v6 - 91) < 3 || (v6 - 22) <= 2) {
            double v3 = v3 + a1[12];
          }
          if (*(unsigned char *)(v5 + 648) || *(unsigned char *)(v5 + 650) || *(unsigned char *)(v5 + 649)) {
            double v3 = v3 + a1[13];
          }
          if (*(void *)(v5 + 568) != -1 || *(void *)(v5 + 584) != -1) {
            double v3 = v3 + a1[14];
          }
          v4 += 8;
          if (v4 != v9) {
            continue;
          }
          goto LABEL_19;
      }
    }
  }
LABEL_19:
  if (v8)
  {
    int v9 = v8;
    operator delete(v8);
  }
  return v3;
}

void sub_7C1BE8(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v14 = a2;
  uint64_t v15 = &v14;
  sub_7C3E6C(a1, (unsigned __int8 **)&v15, (uint64_t)&__p);
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3));
  if (v13 == __p) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_6EA30((uint64_t)__p, v13, (uint64_t)&v15, v6, 1);
  sub_86E88((const void ***)&__p);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)__p) >> 3) < 2)
  {
    if (v14) {
      int v7 = 3;
    }
    else {
      int v7 = 4;
    }
    LODWORD(v15) = v7;
    char v17 = 0;
    *(_DWORD *)(a3 + 8) = v7;
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
    uint64_t v8 = *a1;
    if (*(unsigned char *)(a3 + 1136))
    {
      sub_4C9334(a3 + 16, v8);
    }
    else
    {
      sub_4BE9F4(a3 + 16, v8);
      *(unsigned char *)(a3 + 1136) = 1;
    }
  }
  else
  {
    if (v14)
    {
      LODWORD(v15) = 1;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 1;
    }
    else
    {
      LODWORD(v15) = 2;
      char v17 = 0;
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 2;
    }
    *(unsigned char *)(a3 + 1136) = 0;
    *(_DWORD *)(a3 + 1144) = 0;
    *(void *)(a3 + 1152) = 0;
    *(_DWORD *)(a3 + 1159) = 0;
    sub_7B8C9C(a3, (_DWORD *)(a3 + 8));
    if (v17) {
      sub_3A6B94((uint64_t)v16);
    }
  }
  int v9 = (const void **)__p;
  if (__p)
  {
    uint64_t v10 = v13;
    double v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete((void *)*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      double v11 = __p;
    }
    unint64_t v13 = v9;
    operator delete(v11);
  }
}

void sub_7C1E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (*(unsigned char *)(v2 + 1136))
  {
    sub_3A6B94(v2 + 16);
    *(unsigned char *)(v2 + 1136) = 0;
  }
  if (LOBYTE(STACK[0x490]))
  {
    sub_3A6B94((uint64_t)va1);
    sub_1A668((void **)va);
    _Unwind_Resume(a1);
  }
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7C1E94(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_route_tags");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_simplest_route_tag");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_shortest_route_tag");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_use_traffic_level");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_absolute");
  char v8 = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_steps_gap_relative");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v9;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_absolute");
  double v10 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = v10;
    if (v10 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = v10;
    if (v10 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_21:
  if (v11 < 9.22337204e18)
  {
    if (v10 >= 0.0)
    {
      if (v10 >= 4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
    }
    else
    {
      if (v10 <= -4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v13 = (uint64_t)(v10 + v10);
      if (v13 >= 1) {
        --v13;
      }
    }
    double v10 = (double)(v13 >> 1);
LABEL_32:
    *(void *)(a1 + 16) = (uint64_t)v10;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_34;
  }
LABEL_33:
  operator delete(__p[0]);
LABEL_34:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "shortest_route_distance_gap_relative");
  double v14 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v14;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_min_traffic_level");
  double v15 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "avoids_traffic_max_traffic_level");
  double v16 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 40) = v16;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_quietest_route_tag");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 48) = v17;
  strcpy((char *)__p, "enable_hills_route_tag");
  HIBYTE(__p[2]) = 22;
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 49) = v18;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_stairs_route_tag");
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 50) = v19;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_avoids_walking_route_tag");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 51) = v20;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "enable_busy_roads_required_route_tag");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 52) = v21;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_best_route_tag");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 53) = v22;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_absolute");
  double v23 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 56) = v23;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "simplest_route_score_gap_relative");
  double v24 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 64) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "route_complexity_turn_penalty");
  double v25 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 72) = v25;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "route_complexity_ferry_penalty");
  double v26 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 80) = v26;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "route_complexity_mount_dismount_penalty");
  double v27 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 88) = v27;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "route_complexity_stairs_penalty");
  double v28 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 96) = v28;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_absolute");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_72;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_72:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_83;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_83:
    *(void *)(a1 + 104) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  *(void *)(a1 + 104) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_85;
  }
LABEL_84:
  operator delete(__p[0]);
LABEL_85:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_busy_roads_length_gap_relative");
  double v33 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 112) = v33;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "quietest_route_max_busy_roads_relative_length");
  double v34 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 120) = v34;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_ev_avoids_charge_route_tag");
  BOOL v35 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 128) = v35;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_ev_other_network_tag");
  BOOL v36 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 129) = v36;
  return a1;
}

void sub_7C2958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7C29DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  uint64_t v6 = a3[1];
  if (*a3 == v6)
  {
    uint64_t v5 = a1 + 1120 * ((a2 - a1 - 1120) / 0x460uLL) + 1120;
  }
  else
  {
    while (1)
    {
      uint64_t v14 = *a3;
      if (*a3 != v6)
      {
        while (1)
        {
          if (sub_605050(v14, v5))
          {
            int v15 = *(_DWORD *)(v14 + 220);
            int v16 = *(_DWORD *)(v5 + 220);
            if (v15 > v16 || v15 == v16 && (sub_604EA8(v14, v5) & 1) != 0) {
              break;
            }
          }
          v14 += 1120;
          if (v14 == v6)
          {
            uint64_t v14 = v6;
            break;
          }
        }
        uint64_t v6 = v14;
        if (v14 != a3[1]) {
          break;
        }
      }
      v5 += 1120;
      if (v5 == a2) {
        return a2;
      }
    }
  }
  if (v5 == a2) {
    return a2;
  }
  uint64_t v7 = v5 + 1120;
  if (v5 + 1120 == a2) {
    return v5;
  }
  uint64_t v8 = v5;
  do
  {
    uint64_t v9 = v7;
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        if (sub_605050(v10, v9))
        {
          int v12 = *(_DWORD *)(v10 + 220);
          int v13 = *(_DWORD *)(v5 + 1340);
          if (v12 > v13 || v12 == v13 && (sub_604EA8(v10, v9) & 1) != 0)
          {
            if (v10 != a3[1]) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
        v10 += 1120;
      }
      while (v10 != v11);
      if (v11 != a3[1]) {
        goto LABEL_8;
      }
    }
LABEL_7:
    sub_4C1EE0(v8, v9);
    v8 += 1120;
LABEL_8:
    uint64_t v7 = v9 + 1120;
    uint64_t v5 = v9;
  }
  while (v9 + 1120 != a2);
  return v8;
}

uint64_t sub_7C2B94(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
LABEL_2:
  int v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 3;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v71 = *((void *)a2 - 1);
          uint64_t v72 = *v12;
          if (v71 < *v12)
          {
            *int v12 = v71;
            *((void *)a2 - 1) = v72;
          }
          return result;
        case 3uLL:
          uint64_t v73 = *v12;
          uint64_t v74 = v12[1];
          uint64_t v75 = *((void *)a2 - 1);
          if (v74 >= *v12)
          {
            if (v75 < v74)
            {
              v12[1] = v75;
              *((void *)a2 - 1) = v74;
              uint64_t v93 = *v12;
              uint64_t v92 = v12[1];
              if (v92 < *v12)
              {
                *int v12 = v92;
                v12[1] = v93;
              }
            }
          }
          else
          {
            if (v75 >= v74)
            {
              *int v12 = v74;
              v12[1] = v73;
              uint64_t v100 = *((void *)a2 - 1);
              if (v100 >= v73) {
                return result;
              }
              v12[1] = v100;
            }
            else
            {
              *int v12 = v75;
            }
            *((void *)a2 - 1) = v73;
          }
          return result;
        case 4uLL:
          uint64_t v76 = v12 + 1;
          uint64_t v77 = (uint64_t *)v12[1];
          unint64_t v78 = v12 + 2;
          uint64_t v79 = v12[2];
          int v80 = (uint64_t *)*v12;
          if ((uint64_t)v77 >= *v12)
          {
            if (v79 >= (uint64_t)v77)
            {
LABEL_149:
              uint64_t v77 = (uint64_t *)v79;
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 >= (uint64_t)v77) {
                return result;
              }
LABEL_150:
              *unint64_t v78 = v94;
              *((void *)a2 - 1) = v77;
              uint64_t v97 = *v78;
              uint64_t v98 = *v76;
              if (v97 < v98)
              {
                v12[1] = v97;
                v12[2] = v98;
                uint64_t v99 = *v12;
                if (v97 < *v12)
                {
                  *int v12 = v97;
                  v12[1] = v99;
                }
              }
              return result;
            }
            *uint64_t v76 = v79;
            *unint64_t v78 = (uint64_t)v77;
            int v81 = v12;
            v82 = (uint64_t **)(v12 + 1);
            double result = (uint64_t)v77;
            if (v79 >= (uint64_t)v80)
            {
LABEL_141:
              uint64_t v94 = *((void *)a2 - 1);
              if (v94 >= (uint64_t)v77) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            int v81 = v12;
            v82 = (uint64_t **)(v12 + 2);
            double result = *v12;
            if (v79 >= (uint64_t)v77)
            {
              *int v12 = (uint64_t)v77;
              v12[1] = (uint64_t)v80;
              int v81 = v12 + 1;
              v82 = (uint64_t **)(v12 + 2);
              double result = (uint64_t)v80;
              if (v79 >= (uint64_t)v80) {
                goto LABEL_149;
              }
            }
          }
          *int v81 = v79;
          char *v82 = v80;
          uint64_t v77 = (uint64_t *)result;
          goto LABEL_141;
        case 5uLL:
          return (uint64_t)sub_7C36A8(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)sub_7C37E4((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    int v16 = &v12[v14 >> 1];
    uint64_t v17 = *((void *)a2 - 1);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v20 = *v12;
      uint64_t v21 = *v16;
      if (*v12 < *v16)
      {
        if (v17 < v20)
        {
          *int v16 = v17;
          goto LABEL_32;
        }
        *int v16 = v20;
        *int v12 = v21;
        uint64_t v33 = *((void *)a2 - 1);
        if (v33 < v21)
        {
          *int v12 = v33;
LABEL_32:
          *((void *)a2 - 1) = v21;
        }
LABEL_33:
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v20) {
        goto LABEL_33;
      }
      *int v12 = v17;
      *((void *)a2 - 1) = v20;
      uint64_t v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      *int v16 = *v12;
      *int v12 = v23;
      --a4;
      uint64_t v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((void *)a2 - 1))
      {
        do
        {
          uint64_t v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        uint64_t v63 = v12 + 1;
        do
        {
          int v12 = v63;
          if (v63 >= (uint64_t *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      unint64_t v64 = (uint64_t *)a2;
      if (v12 < (uint64_t *)a2)
      {
        unint64_t v64 = (uint64_t *)a2;
        do
          uint64_t v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        uint64_t v66 = *v12;
        uint64_t v67 = *v64;
        do
        {
          *int v12 = v67;
          *unint64_t v64 = v66;
          do
          {
            uint64_t v68 = v12[1];
            ++v12;
            uint64_t v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            uint64_t v69 = *--v64;
            uint64_t v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *v12;
      if (*v16 >= *v12)
      {
        if (v17 < v18)
        {
          *int v16 = v17;
          *((void *)a2 - 1) = v18;
          uint64_t v22 = *v12;
          if (*v16 < *v12)
          {
            *int v12 = *v16;
            *int v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          *int v12 = v18;
          *int v16 = v19;
          uint64_t v25 = *((void *)a2 - 1);
          if (v25 >= v19) {
            goto LABEL_24;
          }
          *int v16 = v25;
        }
        else
        {
          *int v12 = v17;
        }
        *((void *)a2 - 1) = v19;
      }
LABEL_24:
      double v26 = &v12[v15];
      uint64_t v29 = *(v26 - 1);
      double v27 = v26 - 1;
      uint64_t v28 = v29;
      uint64_t v30 = v12[1];
      uint64_t v31 = *((void *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          uint64_t *v27 = v31;
          *((void *)a2 - 2) = v28;
          uint64_t v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            uint64_t *v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          uint64_t *v27 = v30;
          uint64_t v34 = *((void *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          uint64_t *v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((void *)a2 - 2) = v30;
      }
LABEL_38:
      BOOL v35 = &v12[v15];
      uint64_t v38 = v35[1];
      BOOL v36 = v35 + 1;
      uint64_t v37 = v38;
      uint64_t v39 = v12[2];
      uint64_t v40 = *((void *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          *BOOL v36 = v40;
          *((void *)a2 - 3) = v37;
          uint64_t v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            *BOOL v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          *BOOL v36 = v39;
          uint64_t v42 = *((void *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          *BOOL v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((void *)a2 - 3) = v39;
      }
LABEL_47:
      uint64_t v43 = *v16;
      uint64_t v44 = *v27;
      uint64_t v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v43) {
          goto LABEL_55;
        }
        *int v16 = v45;
        *BOOL v36 = v43;
        BOOL v36 = &v12[v14 >> 1];
        uint64_t v43 = v44;
        if (v45 < v44)
        {
LABEL_54:
          uint64_t *v27 = v45;
          *BOOL v36 = v44;
LABEL_55:
          uint64_t v47 = *v12;
          *int v12 = v43;
          *int v16 = v47;
          --a4;
          uint64_t v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v61 = *v12;
        *int v12 = v45;
        *int v16 = v61;
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v43) {
        goto LABEL_54;
      }
      uint64_t *v27 = v43;
      *int v16 = v44;
      double v27 = &v12[v14 >> 1];
      uint64_t v43 = v45;
      if (v45 < v44) {
        goto LABEL_54;
      }
      uint64_t v46 = *v12;
      *int v12 = v44;
      *int v16 = v46;
      --a4;
      uint64_t v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        uint64_t v49 = v12[++v48];
      while (v49 < v24);
      BOOL v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (uint64_t *)v51) {
            break;
          }
          uint64_t v53 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          uint64_t v52 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v52 >= v24);
      }
      if (v50 >= (uint64_t *)v51)
      {
        unint64_t v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *int v12 = *v59;
        goto LABEL_75;
      }
      uint64_t v54 = *(void *)v51;
      double v55 = &v12[v48];
      double v56 = (uint64_t *)v51;
      do
      {
        uint64_t *v55 = v54;
        *double v56 = v49;
        do
        {
          uint64_t v57 = v55[1];
          ++v55;
          uint64_t v49 = v57;
        }
        while (v57 < v24);
        do
        {
          uint64_t v58 = *--v56;
          uint64_t v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      unint64_t v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      uint64_t *v59 = v24;
      if (v50 < (uint64_t *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_7C337C(v12, v59);
      int v12 = v59 + 1;
      double result = sub_7C337C(v59 + 1, (uint64_t *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        double result = sub_7C2B94(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v59 + 1;
      }
    }
  }
  uint64_t v83 = (char *)(v12 + 1);
  BOOL v85 = v12 == (uint64_t *)a2 || v83 == a2;
  if (a5)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v12;
      do
      {
        uint64_t v90 = *v87;
        uint64_t v89 = v87[1];
        unint64_t v87 = (uint64_t *)v83;
        if (v89 < v90)
        {
          uint64_t v91 = v86;
          do
          {
            *(uint64_t *)((char *)v12 + v91 + 8) = v90;
            if (!v91)
            {
              unint64_t v88 = v12;
              goto LABEL_124;
            }
            uint64_t v90 = *(uint64_t *)((char *)v12 + v91 - 8);
            v91 -= 8;
          }
          while (v89 < v90);
          unint64_t v88 = (uint64_t *)((char *)v12 + v91 + 8);
LABEL_124:
          *unint64_t v88 = v89;
        }
        uint64_t v83 = (char *)(v87 + 1);
        v86 += 8;
      }
      while (v87 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v85)
  {
    do
    {
      uint64_t v96 = *v11;
      uint64_t v95 = v11[1];
      uint64_t v11 = (uint64_t *)v83;
      if (v95 < v96)
      {
        do
        {
          *(void *)uint64_t v83 = v96;
          uint64_t v96 = *((void *)v83 - 2);
          v83 -= 8;
        }
        while (v95 < v96);
        *(void *)uint64_t v83 = v95;
      }
      uint64_t v83 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (uint64_t *)a2);
  }
  return result;
}

BOOL sub_7C337C(uint64_t *a1, uint64_t *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        uint64_t v30 = *a1;
        uint64_t v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      uint64_t v15 = a1[1];
      int v16 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v18 = *a1;
      if (v15 < *a1)
      {
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 2;
        uint64_t v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          uint64_t v19 = a1 + 1;
          uint64_t v20 = a1 + 2;
          uint64_t v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *uint64_t v19 = v17;
        *uint64_t v20 = v18;
        uint64_t v15 = v21;
LABEL_36:
        uint64_t v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        *int v16 = v15;
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 1;
        uint64_t v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v15 = v17;
      uint64_t v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *int v16 = v31;
      *(a2 - 1) = v15;
      uint64_t v32 = *v16;
      uint64_t v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      uint64_t v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_7C36A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v4 = a1 + 2;
      uint64_t v3 = a1[2];
      uint64_t v5 = a1[1];
      uint64_t v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      uint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v25 = *v22;
        uint64_t v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        BOOL v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        uint64_t v26 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(uint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t *sub_7C36A8(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  uint64_t v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    uint64_t v8 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v8;
      uint64_t v5 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *double result = v5;
      *a2 = v6;
      uint64_t v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *double result = v7;
    }
    *a3 = v6;
    uint64_t v5 = v6;
  }
LABEL_11:
  uint64_t v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  uint64_t v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    uint64_t v11 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  uint64_t v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        uint64_t v15 = *result;
        if (*a2 < *result)
        {
          *double result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_7C37E4(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v34 = (unint64_t)(v4 - 2) >> 1;
    int64_t v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        uint64_t v36 = (2 * v35) | 1;
        uint64_t v37 = &a1[8 * v36];
        if (2 * v35 + 2 >= v4)
        {
          uint64_t v38 = *(void *)v37;
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (*(void *)v37 >= *(void *)v40) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v38 = *((void *)v37 + 1);
          BOOL v39 = *(void *)v37 < v38;
          if (*(void *)v37 > v38) {
            uint64_t v38 = *(void *)v37;
          }
          if (v39)
          {
            v37 += 8;
            uint64_t v36 = 2 * v35 + 2;
          }
          uint64_t v40 = &a1[8 * v35];
          uint64_t v41 = *(void *)v40;
          if (v38 >= *(void *)v40)
          {
LABEL_78:
            while (1)
            {
              *(void *)uint64_t v40 = v38;
              uint64_t v40 = v37;
              if (v34 < v36) {
                break;
              }
              uint64_t v43 = (2 * v36) | 1;
              uint64_t v37 = &a1[8 * v43];
              uint64_t v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v42 = *((void *)v37 + 1);
                if (*(void *)v37 <= v42) {
                  uint64_t v38 = *((void *)v37 + 1);
                }
                if (*(void *)v37 >= v42) {
                  uint64_t v36 = v43;
                }
                else {
                  v37 += 8;
                }
                if (v38 < v41) {
                  break;
                }
              }
              else
              {
                uint64_t v38 = *(void *)v37;
                uint64_t v36 = v43;
                if (*(void *)v37 < v41) {
                  break;
                }
              }
            }
            *(void *)uint64_t v40 = v41;
          }
        }
      }
      BOOL v15 = v35-- <= 0;
    }
    while (!v15);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = a2;
      do
      {
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7 < v6)
        {
          *(void *)uint64_t v7 = v6;
          *(void *)a1 = v8;
          uint64_t v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      uint64_t v5 = a3;
      goto LABEL_38;
    }
    uint64_t v9 = (uint64_t *)(a1 + 16);
    uint64_t v10 = a2;
    while (1)
    {
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 < *(void *)a1)
      {
        *(void *)uint64_t v10 = *(void *)a1;
        *(void *)a1 = v11;
        uint64_t v12 = *((void *)a1 + 1);
        if (v3 == 16)
        {
          uint64_t v13 = a1 + 8;
          uint64_t v14 = 1;
          if (v12 >= v11) {
            goto LABEL_26;
          }
        }
        else
        {
          BOOL v15 = v12 < *v9;
          if (v12 <= *v9) {
            uint64_t v12 = *v9;
          }
          if (v15) {
            uint64_t v13 = a1 + 16;
          }
          else {
            uint64_t v13 = a1 + 8;
          }
          if (v15) {
            uint64_t v14 = 2;
          }
          else {
            uint64_t v14 = 1;
          }
          if (v12 >= v11)
          {
LABEL_26:
            int v16 = a1;
            while (1)
            {
              *(void *)int v16 = v12;
              int v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v18 = (2 * v14) | 1;
              uint64_t v13 = &a1[8 * v18];
              uint64_t v14 = 2 * v14 + 2;
              if (v14 < v4)
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v17 = *((void *)v13 + 1);
                if (*(void *)v13 <= v17) {
                  uint64_t v12 = *((void *)v13 + 1);
                }
                if (*(void *)v13 >= v17) {
                  uint64_t v14 = v18;
                }
                else {
                  v13 += 8;
                }
                if (v12 < v11) {
                  break;
                }
              }
              else
              {
                uint64_t v12 = *(void *)v13;
                uint64_t v14 = v18;
                if (*(void *)v13 < v11) {
                  break;
                }
              }
            }
            *(void *)int v16 = v11;
          }
        }
      }
      v10 += 8;
      if (v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v19 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          uint64_t v26 = &v23[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(void *)int v23 = *(void *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        uint64_t v24 = *(void *)v26;
        uint64_t v25 = *((void *)v26 + 1);
        if (*(void *)v26 <= v25) {
          uint64_t v24 = *((void *)v26 + 1);
        }
        if (*(void *)v26 >= v25) {
          uint64_t v20 = v27;
        }
        else {
          v26 += 8;
        }
        *(void *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 == a2)
      {
        *(void *)uint64_t v26 = v21;
      }
      else
      {
        *(void *)uint64_t v26 = *(void *)a2;
        *(void *)a2 = v21;
        uint64_t v28 = v26 - a1 + 8;
        if (v28 >= 9)
        {
          unint64_t v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
          uint64_t v30 = &a1[8 * v29];
          uint64_t v31 = *(void *)v30;
          uint64_t v32 = *(void *)v26;
          if (*(void *)v30 < *(void *)v26)
          {
            do
            {
              *(void *)uint64_t v26 = v31;
              uint64_t v26 = v30;
              if (!v29) {
                break;
              }
              unint64_t v29 = (v29 - 1) >> 1;
              uint64_t v30 = &a1[8 * v29];
              uint64_t v31 = *(void *)v30;
            }
            while (*(void *)v30 < v32);
            *(void *)uint64_t v26 = v32;
          }
        }
      }
      BOOL v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

void sub_7C3B50(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_7C3C58(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1120;
  }
}

void sub_7C3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

char *sub_7C3C58@<X0>(unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a2 + 1112)) {
    goto LABEL_12;
  }
  uint64_t v6 = (char *)(a2 + 680);
  double result = (char *)sub_604340(a2 + 680, **a1);
  if (result)
  {
    if (*(unsigned char *)(a2 + 1112))
    {
      int v8 = **a1;
      return sub_604384(v6, v8, a3);
    }
LABEL_12:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(char *)(a2 + 463) < 0)
  {
    uint64_t v9 = *(void **)(a2 + 440);
    unint64_t v10 = *(void *)(a2 + 448);
    return (char *)sub_4200((unsigned char *)a3, v9, v10);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(a2 + 440);
    *(void *)(a3 + 16) = *(void *)(a2 + 456);
  }
  return result;
}

void sub_7C3D64(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_7C3C58(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1120;
  }
}

void sub_7C3E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

void sub_7C3E6C(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_23708(a3, 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5));
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v12 = *a2;
  while (v7 != v8)
  {
    sub_7C3C58(&v12, v7, (uint64_t)&__p);
    uint64_t v9 = sub_8B3D0((void ***)a3, v6, &__p);
    if (v11 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    uint64_t v6 = v9 + 24;
    v7 += 1120;
  }
}

void sub_7C3F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

double sub_7C3F74()
{
  byte_25BC70F = 1;
  word_25BC6F8 = 65;
  byte_25BC727 = 1;
  word_25BC710 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25BC7B8 = 0u;
  *(_OWORD *)&qword_25BC7C8 = 0u;
  dword_25BC7D8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25BC7B8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25BC7B8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25BC7B8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25BC7B8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25BC73F = 8;
  strcpy((char *)&qword_25BC728, "any_mode");
  byte_25BC757 = 7;
  strcpy((char *)&dword_25BC740, "cycling");
  byte_25BC76F = 7;
  strcpy((char *)&dword_25BC758, "driving");
  byte_25BC787 = 7;
  strcpy((char *)&dword_25BC770, "walking");
  qword_25BC790 = 0;
  qword_25BC798 = 0;
  qword_25BC788 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25BC788 = (uint64_t)v0;
  qword_25BC790 = (uint64_t)(v0 + 9);
  qword_25BC798 = (uint64_t)(v0 + 9);
  qword_25BC7A0 = 0;
  qword_25BC7A8 = 0;
  unk_25BC7B0 = 0;
  char v1 = (char *)operator new(9uLL);
  qword_25BC7A8 = (uint64_t)(v1 + 9);
  unk_25BC7B0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)char v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25BC7A0 = (uint64_t)v1;
  return result;
}

void sub_7C423C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25BC7C8) {
    sub_20AB030((void **)qword_25BC7C8);
  }
  uint64_t v37 = (void *)xmmword_25BC7B8;
  *(void *)&xmmword_25BC7B8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_7C42DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_5A9D64(a1);
  *(void *)(v6 + 816) = -1;
  *(_DWORD *)(v6 + 824) = 0;
  *(void *)(v6 + 832) = 0;
  *(void *)(v6 + 848) = 0;
  *(void *)(v6 + 840) = 0;
  *(_DWORD *)(v6 + 856) = 0;
  *(unsigned char *)(v6 + 864) = 2;
  *(_DWORD *)(v6 + 872) = -1;
  *(_OWORD *)(v6 + 880) = 0u;
  *(_OWORD *)(v6 + 896) = 0u;
  *(_OWORD *)(v6 + 912) = 0u;
  *(_OWORD *)(v6 + 928) = 0u;
  *(_OWORD *)(v6 + 944) = 0u;
  *(_OWORD *)(v6 + 960) = 0u;
  *(void *)(v6 + 976) = 0;
  *(_DWORD *)(v6 + 984) = 1065353216;
  *(unsigned char *)(v6 + 992) = 1;
  *(_DWORD *)(v6 + 1000) = 0;
  *(_OWORD *)(v6 + 1008) = 0u;
  *(_OWORD *)(v6 + 1024) = 0u;
  *(_OWORD *)(v6 + 1040) = 0u;
  *(void *)(v6 + 1056) = 0;
  *(_DWORD *)(v6 + 1064) = 1065353216;
  *(unsigned char *)(v6 + 1072) = 1;
  sub_638D90(v6, a2);
  *(_DWORD *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 1000) = a3;
  return a1;
}

void sub_7C439C(_Unwind_Exception *a1)
{
  sub_4D4880(v3);
  sub_4D4880((void **)(v1 + 928));
  sub_4AA598(v2);
  int v5 = *(void **)(v1 + 832);
  if (v5)
  {
    *(void *)(v1 + 840) = v5;
    operator delete(v5);
  }
  sub_52F090((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7C43DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 824) = a2;
  return result;
}

uint64_t sub_7C43E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1000) = a2;
  return result;
}

uint64_t sub_7C43F0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = sub_5A9D64(a1);
  *(void *)(v8 + 816) = -1;
  *(_DWORD *)(v8 + 824) = 0;
  *(void *)(v8 + 832) = 0;
  *(void *)(v8 + 848) = 0;
  *(void *)(v8 + 840) = 0;
  *(_DWORD *)(v8 + 856) = 0;
  *(unsigned char *)(v8 + 864) = 2;
  *(_DWORD *)(v8 + 872) = -1;
  *(_OWORD *)(v8 + 880) = 0u;
  *(_OWORD *)(v8 + 896) = 0u;
  *(_OWORD *)(v8 + 912) = 0u;
  *(_OWORD *)(v8 + 928) = 0u;
  *(_OWORD *)(v8 + 944) = 0u;
  *(_OWORD *)(v8 + 960) = 0u;
  *(void *)(v8 + 976) = 0;
  *(_DWORD *)(v8 + 984) = 1065353216;
  *(unsigned char *)(v8 + 992) = 1;
  *(_DWORD *)(v8 + 1000) = 0;
  *(_OWORD *)(v8 + 1008) = 0u;
  *(_OWORD *)(v8 + 1024) = 0u;
  *(_OWORD *)(v8 + 1040) = 0u;
  *(void *)(v8 + 1056) = 0;
  *(_DWORD *)(v8 + 1064) = 1065353216;
  *(unsigned char *)(v8 + 1072) = 1;
  sub_638D90(v8, a2);
  *(_DWORD *)(a1 + 824) = a4;
  *(_DWORD *)(a1 + 1000) = a3;
  return a1;
}

void sub_7C44B4(_Unwind_Exception *a1)
{
  sub_4D4880(v3);
  sub_4D4880((void **)(v1 + 928));
  sub_4AA598(v2);
  int v5 = *(void **)(v1 + 832);
  if (v5)
  {
    *(void *)(v1 + 840) = v5;
    operator delete(v5);
  }
  sub_52F090((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7C44F8(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  uint64_t v10 = sub_5A9D64(a1);
  *(void *)(v10 + 816) = -1;
  *(_DWORD *)(v10 + 824) = 0;
  *(void *)(v10 + 832) = 0;
  *(void *)(v10 + 848) = 0;
  *(void *)(v10 + 840) = 0;
  *(_DWORD *)(v10 + 856) = 0;
  *(unsigned char *)(v10 + 864) = 2;
  *(_DWORD *)(v10 + 872) = -1;
  *(_OWORD *)(v10 + 880) = 0u;
  *(_OWORD *)(v10 + 896) = 0u;
  *(_OWORD *)(v10 + 912) = 0u;
  *(_OWORD *)(v10 + 928) = 0u;
  *(_OWORD *)(v10 + 944) = 0u;
  *(_OWORD *)(v10 + 960) = 0u;
  *(void *)(v10 + 976) = 0;
  *(_DWORD *)(v10 + 984) = 1065353216;
  *(unsigned char *)(v10 + 992) = 1;
  *(_DWORD *)(v10 + 1000) = 0;
  *(_OWORD *)(v10 + 1008) = 0u;
  *(_OWORD *)(v10 + 1024) = 0u;
  *(_OWORD *)(v10 + 1040) = 0u;
  *(void *)(v10 + 1056) = 0;
  *(_DWORD *)(v10 + 1064) = 1065353216;
  *(unsigned char *)(v10 + 1072) = 1;
  sub_638D90(v10, a2);
  *(_DWORD *)(a1 + 824) = a4;
  *(_DWORD *)(a1 + 1000) = a3;
  sub_638A00(a1, a5);
  return a1;
}

void sub_7C45E4(_Unwind_Exception *a1)
{
  sub_4D4880(v4);
  sub_4D4880(v3);
  sub_4AA598(v2);
  char v7 = *v5;
  if (*v5)
  {
    v1[105] = v7;
    operator delete(v7);
  }
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

std::string *sub_7C4624(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 872) = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 8));

  return std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 32));
}

uint64_t sub_7C4674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5A9D64(a1);
  *(void *)(v4 + 816) = -1;
  *(_DWORD *)(v4 + 824) = 0;
  *(void *)(v4 + 832) = 0;
  *(void *)(v4 + 848) = 0;
  *(void *)(v4 + 840) = 0;
  *(_DWORD *)(v4 + 856) = 0;
  *(unsigned char *)(v4 + 864) = 2;
  *(_DWORD *)(v4 + 872) = -1;
  *(_OWORD *)(v4 + 880) = 0u;
  *(_OWORD *)(v4 + 896) = 0u;
  *(_OWORD *)(v4 + 912) = 0u;
  *(_OWORD *)(v4 + 928) = 0u;
  *(_OWORD *)(v4 + 944) = 0u;
  *(_OWORD *)(v4 + 960) = 0u;
  *(void *)(v4 + 976) = 0;
  *(_DWORD *)(v4 + 984) = 1065353216;
  *(unsigned char *)(v4 + 992) = 1;
  *(_DWORD *)(v4 + 1000) = 0;
  *(_OWORD *)(v4 + 1008) = 0u;
  *(_OWORD *)(v4 + 1024) = 0u;
  *(_OWORD *)(v4 + 1040) = 0u;
  *(void *)(v4 + 1056) = 0;
  *(_DWORD *)(v4 + 1064) = 1065353216;
  *(unsigned char *)(v4 + 1072) = 1;
  unint64_t v5 = *(void *)(v4 + 264);
  if (v5 >= *(void *)(v4 + 272))
  {
    uint64_t v6 = sub_63D140((uint64_t *)(a1 + 256), a2);
  }
  else
  {
    sub_63D394(a1 + 272, v5, a2);
    uint64_t v6 = v5 + 104;
    *(void *)(a1 + 264) = v5 + 104;
  }
  *(void *)(a1 + 264) = v6;
  return a1;
}

void sub_7C4750(_Unwind_Exception *a1)
{
  sub_4D4880((void **)(v1 + 1008));
  sub_4D4880((void **)(v1 + 928));
  sub_4AA598(v1 + 872);
  uint64_t v3 = *(void **)(v1 + 832);
  if (v3)
  {
    *(void *)(v1 + 840) = v3;
    operator delete(v3);
  }
  sub_52F090((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7C47A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 816) = a2;
  return result;
}

void sub_7C47B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 928;
  if (v4 != a2)
  {
    sub_69208(v4, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 984) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 952), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 992) = *(unsigned char *)(a2 + 64);
}

void sub_7C481C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1008;
  if (v4 != a2)
  {
    sub_69208(v4, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 1032), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 64);
}

void sub_7C4888(uint64_t a1, uint64_t a2, char a3)
{
  char v7 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = v6 - *(void *)a2;
  if (v6 == *(void *)a2)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    int v11 = *(_DWORD *)(a2 + 24);
    uint64_t v12 = *(void **)(a1 + 832);
    if (!v12) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v8 < 0) {
    sub_2E00();
  }
  uint64_t v9 = (char *)operator new(v6 - *(void *)a2);
  uint64_t v10 = &v9[4 * (v8 >> 2)];
  memcpy(v9, v7, v8 - 1);
  int v11 = *(_DWORD *)(a2 + 24);
  uint64_t v12 = *(void **)(a1 + 832);
  if (v12)
  {
LABEL_4:
    *(void *)(a1 + 840) = v12;
    operator delete(v12);
    *(void *)(a1 + 832) = 0;
    *(void *)(a1 + 840) = 0;
    *(void *)(a1 + 848) = 0;
  }
LABEL_5:
  *(void *)(a1 + 832) = v9;
  *(void *)(a1 + 840) = v10;
  *(void *)(a1 + 848) = v10;
  *(_DWORD *)(a1 + 856) = v11;
  *(unsigned char *)(a1 + 864) = a3;
}

void sub_7C4960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7C497C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 824);
}

uint64_t sub_7C4984(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1000);
}

uint64_t sub_7C498C(uint64_t a1)
{
  return a1 + 872;
}

uint64_t sub_7C4994(uint64_t a1)
{
  return a1 + 928;
}

uint64_t sub_7C499C(uint64_t a1)
{
  return a1 + 1008;
}

BOOL sub_7C49A4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if (v1 - 25 < 0x3A) {
    return 0;
  }
  BOOL result = 1;
  if (v1 - 4 >= 0x15)
  {
    if (v1 < 4) {
      return 0;
    }
    return v1 == 83;
  }
  return result;
}

BOOL sub_7C49E4(uint64_t a1)
{
  return *(void *)(a1 + 816) != -1;
}

BOOL sub_7C49F4(uint64_t a1)
{
  return *(void *)(a1 + 832) != *(void *)(a1 + 840) && *(unsigned char *)(a1 + 864) != 2;
}

void sub_7C4A1C()
{
  unk_25BC7F7 = 16641;
  word_25BC7E0 = 65;
  byte_25BC80F = 1;
  byte_25BC7F9 = 0;
}

uint64_t sub_7C4A44(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  uint64_t v8 = sub_527B88(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &off_243A670;
  sub_68C424((BOOL *)(v8 + 11528), (uint64_t)a4, 3);
  char v9 = *(unsigned char *)(a3 + 1481);
  if (v9) {
    char v9 = *(unsigned char *)(a1 + 2031) != 0;
  }
  *(unsigned char *)(a1 + 11538) = v9;
  return a1;
}

void sub_7C4AC8(_Unwind_Exception *a1)
{
  sub_532770(v1);
  _Unwind_Resume(a1);
}

void sub_7C4ADC()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  sub_529364(v0, v9, (uint64_t)v30);
  sub_84AC00((uint64_t)v39, v30, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_84E564((uint64_t)v39, &v37);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v37);
    sub_52F090(&v37);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_84BCD4((uint64_t)v39, v4, (void **)&v37);
    uint64_t v10 = v8 + 2400 * v2;
    int v11 = (void **)(v10 + 1712);
    uint64_t v12 = *(void **)(v10 + 1712);
    if (v12)
    {
      char v13 = *(void **)(v10 + 1720);
      int v14 = *(void **)(v10 + 1712);
      if (v13 != v12)
      {
        do
          char v13 = sub_52F1E8((uint64_t)(v13 - 135));
        while (v13 != v12);
        int v14 = *v11;
      }
      v11[1] = v12;
      operator delete(v14);
      *int v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    *(_OWORD *)int v11 = v37;
    v11[2] = v38;
    sub_616A8C(v7 + 5640, (uint64_t)v11);
  }
  if (*(unsigned char *)(v7 + 11538))
  {
    sub_84E88C((uint64_t)v39, (uint64_t *)&v37);
    uint64_t v15 = v8 + 2400 * v2;
    int v16 = (void **)(v15 + 1760);
    uint64_t v17 = *(void **)(v15 + 1760);
    if (v17)
    {
      uint64_t v18 = *(void **)(v15 + 1768);
      uint64_t v19 = *(void **)(v15 + 1760);
      if (v18 != v17)
      {
        do
          uint64_t v18 = sub_576A58((uint64_t)(v18 - 83));
        while (v18 != v17);
        uint64_t v19 = *v16;
      }
      v16[1] = v17;
      operator delete(v19);
      *int v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
    }
    *(_OWORD *)int v16 = v37;
    v16[2] = v38;
    sub_616BA0(v7 + 5640, (uint64_t)v16);
  }
  if (*(unsigned char *)(v7 + 11502) && !*(unsigned char *)(v8 + 2400 * v2 + 2225) && *(_DWORD *)(v8 + 2400 * v2 + 160) != 90)
  {
    sub_84C0D0((uint64_t)v39, v4, (uint64_t *)&v37);
    uint64_t v20 = v8 + 2400 * v2;
    uint64_t v21 = (void **)(v20 + 1736);
    int64_t v22 = *(void **)(v20 + 1736);
    if (v22)
    {
      int v23 = *(void **)(v20 + 1744);
      uint64_t v24 = *(void **)(v20 + 1736);
      if (v23 != v22)
      {
        do
        {
          uint64_t v25 = (void *)*(v23 - 6);
          if (v25)
          {
            *(v23 - 5) = v25;
            operator delete(v25);
          }
          v23 -= 51;
          sub_4F32CC(v23);
        }
        while (v23 != v22);
        uint64_t v24 = *v21;
      }
      v21[1] = v22;
      operator delete(v24);
      *uint64_t v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
    }
    *(_OWORD *)uint64_t v21 = v37;
    v21[2] = v38;
    sub_616AD8(v7 + 5640, (uint64_t)v21);
  }
  sub_52960C(v7, v9);
  uint64_t v26 = *(void *)(v4 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(v4 + 1072) - v26) >> 5) - 1 > v2)
  {
    uint64_t v27 = (unsigned char *)(v7 + 11528);
    uint64_t v28 = &v35;
    char v36 = 1;
    uint64_t v35 = v26 + 2400 * v2 + 2400;
    sub_68C738(v27, v9, (uint64_t)&v35);
    if (!v36) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v29 = (unsigned char *)(v7 + 11528);
  uint64_t v28 = &v33;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  sub_68C738(v29, v9, (uint64_t)&v33);
  if ((_BYTE)v34) {
LABEL_32:
  }
    *((unsigned char *)v28 + 8) = 0;
LABEL_33:
  sub_7C58FC((uint64_t)v39);
  if (v32 < 0) {
    operator delete(__p);
  }
}

void sub_7C4E88(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_7C4EF0(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  uint64_t v8 = sub_52A2DC(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &off_243A6B0;
  sub_68C424((BOOL *)(v8 + 11528), (uint64_t)a4, 0);
  char v9 = *(unsigned char *)(a3 + 1481);
  if (v9) {
    char v9 = *(unsigned char *)(a1 + 2031) != 0;
  }
  *(unsigned char *)(a1 + 11538) = v9;
  return a1;
}

void sub_7C4F74(_Unwind_Exception *a1)
{
  sub_5329D4(v1);
  _Unwind_Resume(a1);
}

void sub_7C4F88()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  sub_52BA24(v0, v9, (uint64_t)v30);
  sub_859F14((uint64_t)v39, v30, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_85D878((uint64_t)v39, &v37);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v37);
    sub_52F090(&v37);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_85AFE8((uint64_t)v39, v4, (void **)&v37);
    uint64_t v10 = v8 + 2400 * v2;
    int v11 = (void **)(v10 + 1712);
    uint64_t v12 = *(void **)(v10 + 1712);
    if (v12)
    {
      char v13 = *(void **)(v10 + 1720);
      int v14 = *(void **)(v10 + 1712);
      if (v13 != v12)
      {
        do
          char v13 = sub_52F1E8((uint64_t)(v13 - 135));
        while (v13 != v12);
        int v14 = *v11;
      }
      v11[1] = v12;
      operator delete(v14);
      *int v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    *(_OWORD *)int v11 = v37;
    v11[2] = v38;
    sub_616A8C(v7 + 5640, (uint64_t)v11);
  }
  if (*(unsigned char *)(v7 + 11538))
  {
    sub_85DBA0((uint64_t)v39, (uint64_t *)&v37);
    uint64_t v15 = v8 + 2400 * v2;
    int v16 = (void **)(v15 + 1760);
    uint64_t v17 = *(void **)(v15 + 1760);
    if (v17)
    {
      uint64_t v18 = *(void **)(v15 + 1768);
      uint64_t v19 = *(void **)(v15 + 1760);
      if (v18 != v17)
      {
        do
          uint64_t v18 = sub_576A58((uint64_t)(v18 - 83));
        while (v18 != v17);
        uint64_t v19 = *v16;
      }
      v16[1] = v17;
      operator delete(v19);
      *int v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
    }
    *(_OWORD *)int v16 = v37;
    v16[2] = v38;
    sub_616BA0(v7 + 5640, (uint64_t)v16);
  }
  if (*(unsigned char *)(v7 + 11502) && !*(unsigned char *)(v8 + 2400 * v2 + 2225) && *(_DWORD *)(v8 + 2400 * v2 + 160) != 90)
  {
    sub_85B3E4((uint64_t)v39, v4, (uint64_t *)&v37);
    uint64_t v20 = v8 + 2400 * v2;
    uint64_t v21 = (void **)(v20 + 1736);
    int64_t v22 = *(void **)(v20 + 1736);
    if (v22)
    {
      int v23 = *(void **)(v20 + 1744);
      uint64_t v24 = *(void **)(v20 + 1736);
      if (v23 != v22)
      {
        do
        {
          uint64_t v25 = (void *)*(v23 - 6);
          if (v25)
          {
            *(v23 - 5) = v25;
            operator delete(v25);
          }
          v23 -= 51;
          sub_4F32CC(v23);
        }
        while (v23 != v22);
        uint64_t v24 = *v21;
      }
      v21[1] = v22;
      operator delete(v24);
      *uint64_t v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
    }
    *(_OWORD *)uint64_t v21 = v37;
    v21[2] = v38;
    sub_616AD8(v7 + 5640, (uint64_t)v21);
  }
  sub_52BB40(v7, v9);
  uint64_t v26 = *(void *)(v4 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(v4 + 1072) - v26) >> 5) - 1 > v2)
  {
    uint64_t v27 = (unsigned char *)(v7 + 11528);
    uint64_t v28 = &v35;
    char v36 = 1;
    uint64_t v35 = v26 + 2400 * v2 + 2400;
    sub_68C738(v27, v9, (uint64_t)&v35);
    if (!v36) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v29 = (unsigned char *)(v7 + 11528);
  uint64_t v28 = &v33;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  sub_68C738(v29, v9, (uint64_t)&v33);
  if ((_BYTE)v34) {
LABEL_32:
  }
    *((unsigned char *)v28 + 8) = 0;
LABEL_33:
  sub_7C6154((uint64_t)v39);
  if (v32 < 0) {
    operator delete(__p);
  }
}

void sub_7C5334(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_7C539C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  uint64_t v8 = sub_52C768(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &off_243A6F0;
  sub_68C424((BOOL *)(v8 + 11528), (uint64_t)a4, 2);
  char v9 = *(unsigned char *)(a3 + 1481);
  if (v9) {
    char v9 = *(unsigned char *)(a1 + 2031) != 0;
  }
  *(unsigned char *)(a1 + 11538) = v9;
  return a1;
}

void sub_7C5420(_Unwind_Exception *a1)
{
  sub_532C38(v1);
  _Unwind_Resume(a1);
}

void sub_7C5434()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v3 + 1064);
  uint64_t v9 = v8 + 2400 * v1;
  sub_52DED0(v0, v9, (uint64_t)v30);
  sub_867CC8((uint64_t)v39, v30, v7 + 4088, v4, v2, v6);
  if (*(unsigned char *)(v7 + 11500) || *(unsigned char *)(v7 + 11503))
  {
    sub_86B62C((uint64_t)v39, &v37);
    sub_529480(v8 + 2400 * v2 + 896, (uint64_t)&v37);
    sub_52F090(&v37);
    sub_616600((uint64_t *)(v7 + 5640), (void *)(v8 + 2400 * v2 + 896));
  }
  if (*(unsigned char *)(v7 + 11501))
  {
    sub_868D9C((uint64_t)v39, v4, (void **)&v37);
    uint64_t v10 = v8 + 2400 * v2;
    int v11 = (void **)(v10 + 1712);
    uint64_t v12 = *(void **)(v10 + 1712);
    if (v12)
    {
      char v13 = *(void **)(v10 + 1720);
      int v14 = *(void **)(v10 + 1712);
      if (v13 != v12)
      {
        do
          char v13 = sub_52F1E8((uint64_t)(v13 - 135));
        while (v13 != v12);
        int v14 = *v11;
      }
      v11[1] = v12;
      operator delete(v14);
      *int v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    *(_OWORD *)int v11 = v37;
    v11[2] = v38;
    sub_616A8C(v7 + 5640, (uint64_t)v11);
  }
  if (*(unsigned char *)(v7 + 11538))
  {
    sub_86B954((uint64_t)v39, (uint64_t *)&v37);
    uint64_t v15 = v8 + 2400 * v2;
    int v16 = (void **)(v15 + 1760);
    uint64_t v17 = *(void **)(v15 + 1760);
    if (v17)
    {
      uint64_t v18 = *(void **)(v15 + 1768);
      uint64_t v19 = *(void **)(v15 + 1760);
      if (v18 != v17)
      {
        do
          uint64_t v18 = sub_576A58((uint64_t)(v18 - 83));
        while (v18 != v17);
        uint64_t v19 = *v16;
      }
      v16[1] = v17;
      operator delete(v19);
      *int v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
    }
    *(_OWORD *)int v16 = v37;
    v16[2] = v38;
    sub_616BA0(v7 + 5640, (uint64_t)v16);
  }
  if (*(unsigned char *)(v7 + 11502) && !*(unsigned char *)(v8 + 2400 * v2 + 2225) && *(_DWORD *)(v8 + 2400 * v2 + 160) != 90)
  {
    sub_869198((uint64_t)v39, v4, (uint64_t *)&v37);
    uint64_t v20 = v8 + 2400 * v2;
    uint64_t v21 = (void **)(v20 + 1736);
    int64_t v22 = *(void **)(v20 + 1736);
    if (v22)
    {
      int v23 = *(void **)(v20 + 1744);
      uint64_t v24 = *(void **)(v20 + 1736);
      if (v23 != v22)
      {
        do
        {
          uint64_t v25 = (void *)*(v23 - 6);
          if (v25)
          {
            *(v23 - 5) = v25;
            operator delete(v25);
          }
          v23 -= 51;
          sub_4F32CC(v23);
        }
        while (v23 != v22);
        uint64_t v24 = *v21;
      }
      v21[1] = v22;
      operator delete(v24);
      *uint64_t v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
    }
    *(_OWORD *)uint64_t v21 = v37;
    v21[2] = v38;
    sub_616AD8(v7 + 5640, (uint64_t)v21);
  }
  sub_52DFFC(v7, v9);
  uint64_t v26 = *(void *)(v4 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(v4 + 1072) - v26) >> 5) - 1 > v2)
  {
    uint64_t v27 = (unsigned char *)(v7 + 11528);
    uint64_t v28 = &v35;
    char v36 = 1;
    uint64_t v35 = v26 + 2400 * v2 + 2400;
    sub_68C738(v27, v9, (uint64_t)&v35);
    if (!v36) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v29 = (unsigned char *)(v7 + 11528);
  uint64_t v28 = &v33;
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  sub_68C738(v29, v9, (uint64_t)&v33);
  if ((_BYTE)v34) {
LABEL_32:
  }
    *((unsigned char *)v28 + 8) = 0;
LABEL_33:
  sub_7C69AC((uint64_t)v39);
  if (v32 < 0) {
    operator delete(__p);
  }
}

void sub_7C57E0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x78F]) < 0) {
    operator delete((void *)STACK[0x778]);
  }
  _Unwind_Resume(a1);
}

void sub_7C584C(uint64_t a1)
{
  sub_532770(a1);

  operator delete();
}

void sub_7C5888(uint64_t a1)
{
  sub_5329D4(a1);

  operator delete();
}

void sub_7C58C4(uint64_t a1)
{
  sub_532C38(a1);

  operator delete();
}

uint64_t sub_7C58FC(uint64_t a1)
{
  unint64_t v2 = (char *)(a1 + 5375);
  *(void *)a1 = off_243A778;
  *(void *)(a1 + 7808) = off_2438EC8;
  if (*(char *)(a1 + 7839) < 0)
  {
    operator delete(*(void **)(a1 + 7816));
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3)
    {
LABEL_3:
      if ((v2[2040] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_70;
    }
  }
  else
  {
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = *(void *)(a1 + 7448);
  uint64_t v8 = v3;
  if ((void *)v7 != v3)
  {
    do
      uint64_t v7 = sub_576848(v7 - 336);
    while ((void *)v7 != v3);
    uint64_t v8 = *(void **)(a1 + 7440);
  }
  *(void *)(a1 + 7448) = v3;
  operator delete(v8);
  if ((v2[2040] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v2[2008] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 7392));
  if ((v2[2008] & 0x80000000) == 0)
  {
LABEL_5:
    if ((v2[1984] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 7360));
  if ((v2[1984] & 0x80000000) == 0)
  {
LABEL_6:
    if ((v2[1944] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 7336));
  if ((v2[1944] & 0x80000000) == 0)
  {
LABEL_7:
    if ((v2[1912] & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 7296));
  if ((v2[1912] & 0x80000000) == 0)
  {
LABEL_8:
    if ((v2[1856] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 7264));
  if ((v2[1856] & 0x80000000) == 0)
  {
LABEL_9:
    if ((v2[1824] & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 7208));
  if ((v2[1824] & 0x80000000) == 0)
  {
LABEL_10:
    if ((v2[1800] & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 7176));
  if ((v2[1800] & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2[1760] & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(*(void **)(a1 + 7152));
  if ((v2[1760] & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2[1728] & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(*(void **)(a1 + 7112));
  if ((v2[1728] & 0x80000000) == 0)
  {
LABEL_13:
    if ((v2[1664] & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)(a1 + 7080));
  if ((v2[1664] & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2[1632] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)(a1 + 7016));
  if ((v2[1632] & 0x80000000) == 0)
  {
LABEL_15:
    if ((v2[1608] & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)(a1 + 6984));
  if ((v2[1608] & 0x80000000) == 0)
  {
LABEL_16:
    if ((v2[1568] & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)(a1 + 6960));
  if ((v2[1568] & 0x80000000) == 0)
  {
LABEL_17:
    if ((v2[1536] & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)(a1 + 6920));
  if ((v2[1536] & 0x80000000) == 0)
  {
LABEL_18:
    if ((v2[1472] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)(a1 + 6888));
  if ((v2[1472] & 0x80000000) == 0)
  {
LABEL_19:
    if ((v2[1440] & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*(void **)(a1 + 6824));
  if ((v2[1440] & 0x80000000) == 0)
  {
LABEL_20:
    if ((v2[1416] & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)(a1 + 6792));
  if ((v2[1416] & 0x80000000) == 0)
  {
LABEL_21:
    if ((v2[1376] & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)(a1 + 6768));
  if ((v2[1376] & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2[1344] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*(void **)(a1 + 6728));
  if ((v2[1344] & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2[1280] & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)(a1 + 6696));
  if ((v2[1280] & 0x80000000) == 0)
  {
LABEL_24:
    if ((v2[1248] & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(*(void **)(a1 + 6632));
  if ((v2[1248] & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2[1224] & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*(void **)(a1 + 6600));
  if ((v2[1224] & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2[1184] & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(*(void **)(a1 + 6576));
  if ((v2[1184] & 0x80000000) == 0)
  {
LABEL_27:
    if ((v2[1152] & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*(void **)(a1 + 6536));
  if ((v2[1152] & 0x80000000) == 0)
  {
LABEL_28:
    if ((v2[1088] & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(*(void **)(a1 + 6504));
  if ((v2[1088] & 0x80000000) == 0)
  {
LABEL_29:
    if ((v2[1056] & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(*(void **)(a1 + 6440));
  if ((v2[1056] & 0x80000000) == 0)
  {
LABEL_30:
    if ((v2[1032] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(*(void **)(a1 + 6408));
  if ((v2[1032] & 0x80000000) == 0)
  {
LABEL_31:
    if ((v2[992] & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 6384));
  if ((v2[992] & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2[960] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 6344));
  if ((v2[960] & 0x80000000) == 0)
  {
LABEL_33:
    if ((v2[896] & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 6312));
  if ((v2[896] & 0x80000000) == 0)
  {
LABEL_34:
    if ((v2[864] & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(*(void **)(a1 + 6248));
  if ((v2[864] & 0x80000000) == 0)
  {
LABEL_35:
    if ((v2[840] & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(*(void **)(a1 + 6216));
  if ((v2[840] & 0x80000000) == 0)
  {
LABEL_36:
    if ((v2[800] & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(*(void **)(a1 + 6192));
  if ((v2[800] & 0x80000000) == 0)
  {
LABEL_37:
    if ((v2[768] & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(*(void **)(a1 + 6152));
  if ((v2[768] & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2[704] & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete(*(void **)(a1 + 6120));
  if ((v2[704] & 0x80000000) == 0)
  {
LABEL_39:
    if ((v2[672] & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
LABEL_105:
  operator delete(*(void **)(a1 + 6056));
  if ((v2[672] & 0x80000000) == 0)
  {
LABEL_40:
    if ((v2[648] & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(*(void **)(a1 + 6024));
  if ((v2[648] & 0x80000000) == 0)
  {
LABEL_41:
    if ((v2[608] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(*(void **)(a1 + 6000));
  if ((v2[608] & 0x80000000) == 0)
  {
LABEL_42:
    if ((v2[576] & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }
LABEL_108:
  operator delete(*(void **)(a1 + 5960));
  if ((v2[576] & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2[512] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_110;
  }
LABEL_109:
  operator delete(*(void **)(a1 + 5928));
  if ((v2[512] & 0x80000000) == 0)
  {
LABEL_44:
    if ((v2[480] & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }
LABEL_110:
  operator delete(*(void **)(a1 + 5864));
  if ((v2[480] & 0x80000000) == 0)
  {
LABEL_45:
    if ((v2[456] & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }
LABEL_111:
  operator delete(*(void **)(a1 + 5832));
  if ((v2[456] & 0x80000000) == 0)
  {
LABEL_46:
    if ((v2[416] & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_113;
  }
LABEL_112:
  operator delete(*(void **)(a1 + 5808));
  if ((v2[416] & 0x80000000) == 0)
  {
LABEL_47:
    if ((v2[384] & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }
LABEL_113:
  operator delete(*(void **)(a1 + 5768));
  if ((v2[384] & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2[320] & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_114:
  operator delete(*(void **)(a1 + 5736));
  if ((v2[320] & 0x80000000) == 0)
  {
LABEL_49:
    if ((v2[288] & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(*(void **)(a1 + 5672));
  if ((v2[288] & 0x80000000) == 0)
  {
LABEL_50:
    if ((v2[264] & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(*(void **)(a1 + 5640));
  if ((v2[264] & 0x80000000) == 0)
  {
LABEL_51:
    if ((v2[224] & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(*(void **)(a1 + 5616));
  if ((v2[224] & 0x80000000) == 0)
  {
LABEL_52:
    if ((v2[192] & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_119;
  }
LABEL_118:
  operator delete(*(void **)(a1 + 5576));
  if ((v2[192] & 0x80000000) == 0)
  {
LABEL_53:
    if ((v2[128] & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }
LABEL_119:
  operator delete(*(void **)(a1 + 5544));
  if ((v2[128] & 0x80000000) == 0)
  {
LABEL_54:
    if ((v2[96] & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }
LABEL_120:
  operator delete(*(void **)(a1 + 5480));
  if ((v2[96] & 0x80000000) == 0)
  {
LABEL_55:
    if ((v2[72] & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_122;
  }
LABEL_121:
  operator delete(*(void **)(a1 + 5448));
  if ((v2[72] & 0x80000000) == 0)
  {
LABEL_56:
    if ((v2[32] & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(*(void **)(a1 + 5424));
  if ((v2[32] & 0x80000000) == 0)
  {
LABEL_57:
    if ((*v2 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(*(void **)(a1 + 5384));
  if ((*v2 & 0x80000000) == 0)
  {
LABEL_58:
    uint64_t v4 = (uint64_t *)(a1 + 5200);
    if (!*(void *)(a1 + 5256)) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_124:
  operator delete(*(void **)(a1 + 5352));
  uint64_t v4 = (uint64_t *)(a1 + 5200);
  if (*(void *)(a1 + 5256))
  {
LABEL_59:
    sub_52F808((uint64_t *)(a1 + 5256));
    operator delete(*(void **)(a1 + 5256));
  }
LABEL_60:
  if (*v4)
  {
    sub_52F8B0((uint64_t)v4, *v4);
    operator delete((void *)*v4);
  }
  int v5 = *(void **)(a1 + 5152);
  if (v5)
  {
    *(void *)(a1 + 5160) = v5;
    operator delete(v5);
  }
  sub_7C5F94(a1 + 2200);
  *(void *)a1 = &off_2439B78;
  sub_52F364(a1 + 8);
  return a1;
}

uint64_t sub_7C5F94(uint64_t a1)
{
  *(void *)a1 = off_243A800;
  *(void *)(a1 + 2136) = off_243A8C8;
  uint64_t v2 = *(void *)(a1 + 2920);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 2928);
    uint64_t v4 = *(void **)(a1 + 2920);
    if (v3 != v2)
    {
      do
      {
        v3 -= 272;
        sub_4AA5F4(a1 + 2936, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 2920);
    }
    *(void *)(a1 + 2928) = v2;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 2880);
  if (v5)
  {
    *(void *)(a1 + 2888) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 2871) < 0) {
    operator delete(*(void **)(a1 + 2848));
  }
  *(void *)(a1 + 2136) = off_243A148;
  sub_576848(a1 + 2504);
  sub_576848(a1 + 2168);
  uint64_t v6 = *(void *)(a1 + 2144);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 2152);
    uint64_t v8 = *(void **)(a1 + 2144);
    if (v7 != v6)
    {
      do
        uint64_t v7 = sub_576848(v7 - 336);
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 2144);
    }
    *(void *)(a1 + 2152) = v6;
    operator delete(v8);
  }

  return sub_52F364(a1);
}

uint64_t sub_7C60D8(uint64_t a1)
{
  return sub_7C5F94(a1 - 2136);
}

void sub_7C60E0(uint64_t a1)
{
  sub_7C5F94(a1);

  operator delete();
}

void sub_7C6118(uint64_t a1)
{
  sub_7C5F94(a1 - 2136);

  operator delete();
}

uint64_t sub_7C6154(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 5375);
  *(void *)a1 = off_243A948;
  *(void *)(a1 + 7808) = off_2438EC8;
  if (*(char *)(a1 + 7839) < 0)
  {
    operator delete(*(void **)(a1 + 7816));
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3)
    {
LABEL_3:
      if ((v2[2040] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_70;
    }
  }
  else
  {
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = *(void *)(a1 + 7448);
  uint64_t v8 = v3;
  if ((void *)v7 != v3)
  {
    do
      uint64_t v7 = sub_576848(v7 - 336);
    while ((void *)v7 != v3);
    uint64_t v8 = *(void **)(a1 + 7440);
  }
  *(void *)(a1 + 7448) = v3;
  operator delete(v8);
  if ((v2[2040] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v2[2008] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 7392));
  if ((v2[2008] & 0x80000000) == 0)
  {
LABEL_5:
    if ((v2[1984] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 7360));
  if ((v2[1984] & 0x80000000) == 0)
  {
LABEL_6:
    if ((v2[1944] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 7336));
  if ((v2[1944] & 0x80000000) == 0)
  {
LABEL_7:
    if ((v2[1912] & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 7296));
  if ((v2[1912] & 0x80000000) == 0)
  {
LABEL_8:
    if ((v2[1856] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 7264));
  if ((v2[1856] & 0x80000000) == 0)
  {
LABEL_9:
    if ((v2[1824] & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 7208));
  if ((v2[1824] & 0x80000000) == 0)
  {
LABEL_10:
    if ((v2[1800] & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 7176));
  if ((v2[1800] & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2[1760] & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(*(void **)(a1 + 7152));
  if ((v2[1760] & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2[1728] & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(*(void **)(a1 + 7112));
  if ((v2[1728] & 0x80000000) == 0)
  {
LABEL_13:
    if ((v2[1664] & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)(a1 + 7080));
  if ((v2[1664] & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2[1632] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)(a1 + 7016));
  if ((v2[1632] & 0x80000000) == 0)
  {
LABEL_15:
    if ((v2[1608] & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)(a1 + 6984));
  if ((v2[1608] & 0x80000000) == 0)
  {
LABEL_16:
    if ((v2[1568] & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)(a1 + 6960));
  if ((v2[1568] & 0x80000000) == 0)
  {
LABEL_17:
    if ((v2[1536] & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)(a1 + 6920));
  if ((v2[1536] & 0x80000000) == 0)
  {
LABEL_18:
    if ((v2[1472] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)(a1 + 6888));
  if ((v2[1472] & 0x80000000) == 0)
  {
LABEL_19:
    if ((v2[1440] & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*(void **)(a1 + 6824));
  if ((v2[1440] & 0x80000000) == 0)
  {
LABEL_20:
    if ((v2[1416] & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)(a1 + 6792));
  if ((v2[1416] & 0x80000000) == 0)
  {
LABEL_21:
    if ((v2[1376] & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)(a1 + 6768));
  if ((v2[1376] & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2[1344] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*(void **)(a1 + 6728));
  if ((v2[1344] & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2[1280] & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)(a1 + 6696));
  if ((v2[1280] & 0x80000000) == 0)
  {
LABEL_24:
    if ((v2[1248] & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(*(void **)(a1 + 6632));
  if ((v2[1248] & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2[1224] & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*(void **)(a1 + 6600));
  if ((v2[1224] & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2[1184] & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(*(void **)(a1 + 6576));
  if ((v2[1184] & 0x80000000) == 0)
  {
LABEL_27:
    if ((v2[1152] & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*(void **)(a1 + 6536));
  if ((v2[1152] & 0x80000000) == 0)
  {
LABEL_28:
    if ((v2[1088] & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(*(void **)(a1 + 6504));
  if ((v2[1088] & 0x80000000) == 0)
  {
LABEL_29:
    if ((v2[1056] & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(*(void **)(a1 + 6440));
  if ((v2[1056] & 0x80000000) == 0)
  {
LABEL_30:
    if ((v2[1032] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(*(void **)(a1 + 6408));
  if ((v2[1032] & 0x80000000) == 0)
  {
LABEL_31:
    if ((v2[992] & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 6384));
  if ((v2[992] & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2[960] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 6344));
  if ((v2[960] & 0x80000000) == 0)
  {
LABEL_33:
    if ((v2[896] & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 6312));
  if ((v2[896] & 0x80000000) == 0)
  {
LABEL_34:
    if ((v2[864] & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(*(void **)(a1 + 6248));
  if ((v2[864] & 0x80000000) == 0)
  {
LABEL_35:
    if ((v2[840] & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(*(void **)(a1 + 6216));
  if ((v2[840] & 0x80000000) == 0)
  {
LABEL_36:
    if ((v2[800] & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(*(void **)(a1 + 6192));
  if ((v2[800] & 0x80000000) == 0)
  {
LABEL_37:
    if ((v2[768] & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(*(void **)(a1 + 6152));
  if ((v2[768] & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2[704] & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete(*(void **)(a1 + 6120));
  if ((v2[704] & 0x80000000) == 0)
  {
LABEL_39:
    if ((v2[672] & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
LABEL_105:
  operator delete(*(void **)(a1 + 6056));
  if ((v2[672] & 0x80000000) == 0)
  {
LABEL_40:
    if ((v2[648] & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(*(void **)(a1 + 6024));
  if ((v2[648] & 0x80000000) == 0)
  {
LABEL_41:
    if ((v2[608] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(*(void **)(a1 + 6000));
  if ((v2[608] & 0x80000000) == 0)
  {
LABEL_42:
    if ((v2[576] & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }
LABEL_108:
  operator delete(*(void **)(a1 + 5960));
  if ((v2[576] & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2[512] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_110;
  }
LABEL_109:
  operator delete(*(void **)(a1 + 5928));
  if ((v2[512] & 0x80000000) == 0)
  {
LABEL_44:
    if ((v2[480] & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }
LABEL_110:
  operator delete(*(void **)(a1 + 5864));
  if ((v2[480] & 0x80000000) == 0)
  {
LABEL_45:
    if ((v2[456] & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }
LABEL_111:
  operator delete(*(void **)(a1 + 5832));
  if ((v2[456] & 0x80000000) == 0)
  {
LABEL_46:
    if ((v2[416] & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_113;
  }
LABEL_112:
  operator delete(*(void **)(a1 + 5808));
  if ((v2[416] & 0x80000000) == 0)
  {
LABEL_47:
    if ((v2[384] & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }
LABEL_113:
  operator delete(*(void **)(a1 + 5768));
  if ((v2[384] & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2[320] & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_114:
  operator delete(*(void **)(a1 + 5736));
  if ((v2[320] & 0x80000000) == 0)
  {
LABEL_49:
    if ((v2[288] & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(*(void **)(a1 + 5672));
  if ((v2[288] & 0x80000000) == 0)
  {
LABEL_50:
    if ((v2[264] & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(*(void **)(a1 + 5640));
  if ((v2[264] & 0x80000000) == 0)
  {
LABEL_51:
    if ((v2[224] & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(*(void **)(a1 + 5616));
  if ((v2[224] & 0x80000000) == 0)
  {
LABEL_52:
    if ((v2[192] & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_119;
  }
LABEL_118:
  operator delete(*(void **)(a1 + 5576));
  if ((v2[192] & 0x80000000) == 0)
  {
LABEL_53:
    if ((v2[128] & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }
LABEL_119:
  operator delete(*(void **)(a1 + 5544));
  if ((v2[128] & 0x80000000) == 0)
  {
LABEL_54:
    if ((v2[96] & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }
LABEL_120:
  operator delete(*(void **)(a1 + 5480));
  if ((v2[96] & 0x80000000) == 0)
  {
LABEL_55:
    if ((v2[72] & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_122;
  }
LABEL_121:
  operator delete(*(void **)(a1 + 5448));
  if ((v2[72] & 0x80000000) == 0)
  {
LABEL_56:
    if ((v2[32] & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(*(void **)(a1 + 5424));
  if ((v2[32] & 0x80000000) == 0)
  {
LABEL_57:
    if ((*v2 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(*(void **)(a1 + 5384));
  if ((*v2 & 0x80000000) == 0)
  {
LABEL_58:
    uint64_t v4 = (uint64_t *)(a1 + 5200);
    if (!*(void *)(a1 + 5256)) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_124:
  operator delete(*(void **)(a1 + 5352));
  uint64_t v4 = (uint64_t *)(a1 + 5200);
  if (*(void *)(a1 + 5256))
  {
LABEL_59:
    sub_52F808((uint64_t *)(a1 + 5256));
    operator delete(*(void **)(a1 + 5256));
  }
LABEL_60:
  if (*v4)
  {
    sub_52F8B0((uint64_t)v4, *v4);
    operator delete((void *)*v4);
  }
  int v5 = *(void **)(a1 + 5152);
  if (v5)
  {
    *(void *)(a1 + 5160) = v5;
    operator delete(v5);
  }
  sub_7C67EC(a1 + 2200);
  *(void *)a1 = &off_2439CA8;
  sub_531E24(a1 + 8);
  return a1;
}

uint64_t sub_7C67EC(uint64_t a1)
{
  *(void *)a1 = off_243A9D0;
  *(void *)(a1 + 2136) = off_243AA98;
  uint64_t v2 = *(void *)(a1 + 2920);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 2928);
    uint64_t v4 = *(void **)(a1 + 2920);
    if (v3 != v2)
    {
      do
      {
        v3 -= 272;
        sub_4AA5F4(a1 + 2936, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 2920);
    }
    *(void *)(a1 + 2928) = v2;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 2880);
  if (v5)
  {
    *(void *)(a1 + 2888) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 2871) < 0) {
    operator delete(*(void **)(a1 + 2848));
  }
  *(void *)(a1 + 2136) = off_243A190;
  sub_576848(a1 + 2504);
  sub_576848(a1 + 2168);
  uint64_t v6 = *(void *)(a1 + 2144);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 2152);
    uint64_t v8 = *(void **)(a1 + 2144);
    if (v7 != v6)
    {
      do
        uint64_t v7 = sub_576848(v7 - 336);
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 2144);
    }
    *(void *)(a1 + 2152) = v6;
    operator delete(v8);
  }

  return sub_531E24(a1);
}

uint64_t sub_7C6930(uint64_t a1)
{
  return sub_7C67EC(a1 - 2136);
}

void sub_7C6938(uint64_t a1)
{
  sub_7C67EC(a1);

  operator delete();
}

void sub_7C6970(uint64_t a1)
{
  sub_7C67EC(a1 - 2136);

  operator delete();
}

uint64_t sub_7C69AC(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 5375);
  *(void *)a1 = off_243AB18;
  *(void *)(a1 + 7808) = off_2438EC8;
  if (*(char *)(a1 + 7839) < 0)
  {
    operator delete(*(void **)(a1 + 7816));
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3)
    {
LABEL_3:
      if ((v2[2040] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_70;
    }
  }
  else
  {
    sub_576848(a1 + 7464);
    uint64_t v3 = *(void **)(a1 + 7440);
    if (!v3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = *(void *)(a1 + 7448);
  uint64_t v8 = v3;
  if ((void *)v7 != v3)
  {
    do
      uint64_t v7 = sub_576848(v7 - 336);
    while ((void *)v7 != v3);
    uint64_t v8 = *(void **)(a1 + 7440);
  }
  *(void *)(a1 + 7448) = v3;
  operator delete(v8);
  if ((v2[2040] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v2[2008] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(a1 + 7392));
  if ((v2[2008] & 0x80000000) == 0)
  {
LABEL_5:
    if ((v2[1984] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(*(void **)(a1 + 7360));
  if ((v2[1984] & 0x80000000) == 0)
  {
LABEL_6:
    if ((v2[1944] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(a1 + 7336));
  if ((v2[1944] & 0x80000000) == 0)
  {
LABEL_7:
    if ((v2[1912] & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete(*(void **)(a1 + 7296));
  if ((v2[1912] & 0x80000000) == 0)
  {
LABEL_8:
    if ((v2[1856] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(a1 + 7264));
  if ((v2[1856] & 0x80000000) == 0)
  {
LABEL_9:
    if ((v2[1824] & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete(*(void **)(a1 + 7208));
  if ((v2[1824] & 0x80000000) == 0)
  {
LABEL_10:
    if ((v2[1800] & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(*(void **)(a1 + 7176));
  if ((v2[1800] & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2[1760] & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(*(void **)(a1 + 7152));
  if ((v2[1760] & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2[1728] & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(*(void **)(a1 + 7112));
  if ((v2[1728] & 0x80000000) == 0)
  {
LABEL_13:
    if ((v2[1664] & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)(a1 + 7080));
  if ((v2[1664] & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2[1632] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)(a1 + 7016));
  if ((v2[1632] & 0x80000000) == 0)
  {
LABEL_15:
    if ((v2[1608] & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)(a1 + 6984));
  if ((v2[1608] & 0x80000000) == 0)
  {
LABEL_16:
    if ((v2[1568] & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)(a1 + 6960));
  if ((v2[1568] & 0x80000000) == 0)
  {
LABEL_17:
    if ((v2[1536] & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)(a1 + 6920));
  if ((v2[1536] & 0x80000000) == 0)
  {
LABEL_18:
    if ((v2[1472] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)(a1 + 6888));
  if ((v2[1472] & 0x80000000) == 0)
  {
LABEL_19:
    if ((v2[1440] & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(*(void **)(a1 + 6824));
  if ((v2[1440] & 0x80000000) == 0)
  {
LABEL_20:
    if ((v2[1416] & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(*(void **)(a1 + 6792));
  if ((v2[1416] & 0x80000000) == 0)
  {
LABEL_21:
    if ((v2[1376] & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(*(void **)(a1 + 6768));
  if ((v2[1376] & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2[1344] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(*(void **)(a1 + 6728));
  if ((v2[1344] & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2[1280] & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(*(void **)(a1 + 6696));
  if ((v2[1280] & 0x80000000) == 0)
  {
LABEL_24:
    if ((v2[1248] & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(*(void **)(a1 + 6632));
  if ((v2[1248] & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2[1224] & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*(void **)(a1 + 6600));
  if ((v2[1224] & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2[1184] & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(*(void **)(a1 + 6576));
  if ((v2[1184] & 0x80000000) == 0)
  {
LABEL_27:
    if ((v2[1152] & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*(void **)(a1 + 6536));
  if ((v2[1152] & 0x80000000) == 0)
  {
LABEL_28:
    if ((v2[1088] & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(*(void **)(a1 + 6504));
  if ((v2[1088] & 0x80000000) == 0)
  {
LABEL_29:
    if ((v2[1056] & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(*(void **)(a1 + 6440));
  if ((v2[1056] & 0x80000000) == 0)
  {
LABEL_30:
    if ((v2[1032] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(*(void **)(a1 + 6408));
  if ((v2[1032] & 0x80000000) == 0)
  {
LABEL_31:
    if ((v2[992] & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(*(void **)(a1 + 6384));
  if ((v2[992] & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2[960] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(*(void **)(a1 + 6344));
  if ((v2[960] & 0x80000000) == 0)
  {
LABEL_33:
    if ((v2[896] & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete(*(void **)(a1 + 6312));
  if ((v2[896] & 0x80000000) == 0)
  {
LABEL_34:
    if ((v2[864] & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(*(void **)(a1 + 6248));
  if ((v2[864] & 0x80000000) == 0)
  {
LABEL_35:
    if ((v2[840] & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(*(void **)(a1 + 6216));
  if ((v2[840] & 0x80000000) == 0)
  {
LABEL_36:
    if ((v2[800] & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(*(void **)(a1 + 6192));
  if ((v2[800] & 0x80000000) == 0)
  {
LABEL_37:
    if ((v2[768] & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(*(void **)(a1 + 6152));
  if ((v2[768] & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2[704] & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }
LABEL_104:
  operator delete(*(void **)(a1 + 6120));
  if ((v2[704] & 0x80000000) == 0)
  {
LABEL_39:
    if ((v2[672] & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
LABEL_105:
  operator delete(*(void **)(a1 + 6056));
  if ((v2[672] & 0x80000000) == 0)
  {
LABEL_40:
    if ((v2[648] & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(*(void **)(a1 + 6024));
  if ((v2[648] & 0x80000000) == 0)
  {
LABEL_41:
    if ((v2[608] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(*(void **)(a1 + 6000));
  if ((v2[608] & 0x80000000) == 0)
  {
LABEL_42:
    if ((v2[576] & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }
LABEL_108:
  operator delete(*(void **)(a1 + 5960));
  if ((v2[576] & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2[512] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_110;
  }
LABEL_109:
  operator delete(*(void **)(a1 + 5928));
  if ((v2[512] & 0x80000000) == 0)
  {
LABEL_44:
    if ((v2[480] & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }
LABEL_110:
  operator delete(*(void **)(a1 + 5864));
  if ((v2[480] & 0x80000000) == 0)
  {
LABEL_45:
    if ((v2[456] & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }
LABEL_111:
  operator delete(*(void **)(a1 + 5832));
  if ((v2[456] & 0x80000000) == 0)
  {
LABEL_46:
    if ((v2[416] & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_113;
  }
LABEL_112:
  operator delete(*(void **)(a1 + 5808));
  if ((v2[416] & 0x80000000) == 0)
  {
LABEL_47:
    if ((v2[384] & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }
LABEL_113:
  operator delete(*(void **)(a1 + 5768));
  if ((v2[384] & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2[320] & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_114:
  operator delete(*(void **)(a1 + 5736));
  if ((v2[320] & 0x80000000) == 0)
  {
LABEL_49:
    if ((v2[288] & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(*(void **)(a1 + 5672));
  if ((v2[288] & 0x80000000) == 0)
  {
LABEL_50:
    if ((v2[264] & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(*(void **)(a1 + 5640));
  if ((v2[264] & 0x80000000) == 0)
  {
LABEL_51:
    if ((v2[224] & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(*(void **)(a1 + 5616));
  if ((v2[224] & 0x80000000) == 0)
  {
LABEL_52:
    if ((v2[192] & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_119;
  }
LABEL_118:
  operator delete(*(void **)(a1 + 5576));
  if ((v2[192] & 0x80000000) == 0)
  {
LABEL_53:
    if ((v2[128] & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }
LABEL_119:
  operator delete(*(void **)(a1 + 5544));
  if ((v2[128] & 0x80000000) == 0)
  {
LABEL_54:
    if ((v2[96] & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }
LABEL_120:
  operator delete(*(void **)(a1 + 5480));
  if ((v2[96] & 0x80000000) == 0)
  {
LABEL_55:
    if ((v2[72] & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_122;
  }
LABEL_121:
  operator delete(*(void **)(a1 + 5448));
  if ((v2[72] & 0x80000000) == 0)
  {
LABEL_56:
    if ((v2[32] & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(*(void **)(a1 + 5424));
  if ((v2[32] & 0x80000000) == 0)
  {
LABEL_57:
    if ((*v2 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(*(void **)(a1 + 5384));
  if ((*v2 & 0x80000000) == 0)
  {
LABEL_58:
    uint64_t v4 = (uint64_t *)(a1 + 5200);
    if (!*(void *)(a1 + 5256)) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_124:
  operator delete(*(void **)(a1 + 5352));
  uint64_t v4 = (uint64_t *)(a1 + 5200);
  if (*(void *)(a1 + 5256))
  {
LABEL_59:
    sub_52F808((uint64_t *)(a1 + 5256));
    operator delete(*(void **)(a1 + 5256));
  }
LABEL_60:
  if (*v4)
  {
    sub_52F8B0((uint64_t)v4, *v4);
    operator delete((void *)*v4);
  }
  int v5 = *(void **)(a1 + 5152);
  if (v5)
  {
    *(void *)(a1 + 5160) = v5;
    operator delete(v5);
  }
  sub_7C7044(a1 + 2200);
  *(void *)a1 = &off_2439DD8;
  sub_5322CC(a1 + 8);
  return a1;
}

uint64_t sub_7C7044(uint64_t a1)
{
  *(void *)a1 = off_243ABA0;
  *(void *)(a1 + 2136) = off_243AC68;
  uint64_t v2 = *(void *)(a1 + 2920);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 2928);
    uint64_t v4 = *(void **)(a1 + 2920);
    if (v3 != v2)
    {
      do
      {
        v3 -= 272;
        sub_4AA5F4(a1 + 2936, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 2920);
    }
    *(void *)(a1 + 2928) = v2;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 2880);
  if (v5)
  {
    *(void *)(a1 + 2888) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 2871) < 0) {
    operator delete(*(void **)(a1 + 2848));
  }
  *(void *)(a1 + 2136) = off_243A1D8;
  sub_576848(a1 + 2504);
  sub_576848(a1 + 2168);
  uint64_t v6 = *(void *)(a1 + 2144);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 2152);
    uint64_t v8 = *(void **)(a1 + 2144);
    if (v7 != v6)
    {
      do
        uint64_t v7 = sub_576848(v7 - 336);
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 2144);
    }
    *(void *)(a1 + 2152) = v6;
    operator delete(v8);
  }

  return sub_5322CC(a1);
}

uint64_t sub_7C7188(uint64_t a1)
{
  return sub_7C7044(a1 - 2136);
}

void sub_7C7190(uint64_t a1)
{
  sub_7C7044(a1);

  operator delete();
}

void sub_7C71C8(uint64_t a1)
{
  sub_7C7044(a1 - 2136);

  operator delete();
}

double sub_7C7204()
{
  byte_25BC827 = 1;
  word_25BC810 = 65;
  byte_25BC83F = 1;
  word_25BC828 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25C0688 = 0u;
  *(_OWORD *)&qword_25C0698 = 0u;
  dword_25C06A8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25C0688, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25C0688, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25C0688, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25C0688, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  byte_25BC857 = 8;
  strcpy((char *)&qword_25BC840, "any_mode");
  byte_25BC86F = 7;
  strcpy((char *)&dword_25BC858, "cycling");
  byte_25BC887 = 7;
  strcpy((char *)&dword_25BC870, "driving");
  byte_25BC89F = 7;
  strcpy((char *)&dword_25BC888, "walking");
  qword_25BC8A8 = 0;
  qword_25BC8B0 = 0;
  qword_25BC8A0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25BC8A0 = (uint64_t)v0;
  qword_25BC8A8 = (uint64_t)(v0 + 9);
  qword_25BC8B0 = (uint64_t)(v0 + 9);
  qword_25BC8B8 = 0;
  qword_25BC8C0 = 0;
  qword_25BC8C8 = 0;
  unint64_t v1 = operator new(9uLL);
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25BC8B8 = (uint64_t)v1;
  qword_25BC8C0 = (uint64_t)(v1 + 9);
  strcpy(&byte_25BC8E7, "\n\x1B\\toi=orth\\"");
  qword_25BC8C8 = (uint64_t)(v1 + 9);
  strcpy(byte_25BC8D0, "\x1B\\toi=lhp\\"");
  byte_25BC8FF = 11;
  qword_25BC900 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_25BC908 = xmmword_20B9250;
  strcpy(qword_25BC900, "\x1B\\toi=x-sampa-internal\\"");
  byte_25BC92F = 13;
  strcpy((char *)&qword_25BC918, "\x1B\\tn=address\\"");
  strcpy(&byte_25BC947, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25BC930, "\x1B\\tn=nav\\"");
  byte_25BC95F = 12;
  byte_25BC977 = 7;
  strcpy((char *)&dword_25BC960, "\x1B\\lang=");
  byte_25BC98F = 1;
  word_25BC978 = 92;
  byte_25BC9A7 = 4;
  strcpy((char *)&qword_25BC990, "DEV:");
  byte_25BC9BF = 8;
  strcpy((char *)&qword_25BC9A8, "Continue");
  byte_25BC9D7 = 11;
  strcpy((char *)&qword_25BC9C0, "Start_Route");
  byte_25BC9EF = 14;
  strcpy((char *)&qword_25BC9D8, "Continue_Route");
  byte_25BCA07 = 12;
  strcpy((char *)&qword_25BC9F0, "Resume_Route");
  byte_25BCA1F = 18;
  strcpy((char *)&xmmword_25BCA08, "Start_Route_U_Turn");
  byte_25BCA37 = 7;
  strcpy((char *)&dword_25BCA20, "_U_Turn");
  qword_25BCA48 = 0x1300000000000000;
  qmemcpy(&unk_25BCA50, "Continue_Route", 14);
  qword_25BCA38 = *(void *)"Resume_Route";
  unk_25BCA40 = 0x545F555F6574756FLL;
  unk_25BCA47 = 1852994900;
  qword_25BCA60 = 0x1500000000000000;
  strcpy(byte_25BCA68, "Left_Turn");
  unk_25BCA5E = 1415533919;
  *(_DWORD *)((char *)&qword_25BCA60 + 1) = 1852994900;
  strcpy(&byte_25BCA7F, "\tRight_Turn");
  strcpy(&byte_25BCA97, "\nLeft_Turn_At_End");
  byte_25BCAAF = 16;
  byte_25BCAC7 = 17;
  strcpy((char *)&xmmword_25BCAB0, "Right_Turn_At_End");
  byte_25BCADF = 15;
  strcpy((char *)&qword_25BCAC8, "Sharp_Left_Turn");
  byte_25BCAF7 = 16;
  strcpy((char *)&xmmword_25BCAE0, "Sharp_Right_Turn");
  byte_25BCB0F = 16;
  strcpy((char *)&xmmword_25BCAF8, "Slight_Left_Turn");
  byte_25BCB27 = 17;
  strcpy((char *)&xmmword_25BCB10, "Slight_Right_Turn");
  strcpy(&byte_25BCB3F, "\tKeep_Right");
  strcpy((char *)&qword_25BCB28, "Keep_Left");
  strcpy(&byte_25BCB57, "\nU_Turn");
  byte_25BCB6F = 6;
  byte_25BCB87 = 14;
  strcpy((char *)&qword_25BCB70, "Walking_U_Turn");
  byte_25BCB9F = 20;
  strcpy((char *)&xmmword_25BCB88, "U_Turn_When_Possible");
  byte_25BCBB7 = 20;
  strcpy((char *)&xmmword_25BCBA0, "U_Turn_At_Roundabout");
  byte_25BCBCF = 11;
  strcpy((char *)&qword_25BCBB8, "Enter_Ferry");
  strcpy(&byte_25BCBE7, "\nChange_Ferry");
  strcpy((char *)&qword_25BCBD0, "Exit_Ferry");
  byte_25BCBFF = 12;
  byte_25BCC17 = 21;
  strcpy((char *)&xmmword_25BCC00, "Enter_Railway_Shuttle");
  byte_25BCC2F = 20;
  strcpy((char *)&xmmword_25BCC18, "Exit_Railway_Shuttle");
  byte_25BCC47 = 22;
  strcpy((char *)&xmmword_25BCC30, "Change_Railway_Shuttle");
  byte_25BCC5F = 17;
  strcpy((char *)&xmmword_25BCC48, "End_Of_Navigation");
  byte_25BCC77 = 17;
  strcpy((char *)&xmmword_25BCC60, "End_Of_Navigation");
  byte_25BCC8F = 11;
  strcpy((char *)&qword_25BCC78, "Destination");
  byte_25BCCA7 = 19;
  strcpy((char *)&xmmword_25BCC90, "Destination_On_left");
  byte_25BCCBF = 20;
  strcpy((char *)&xmmword_25BCCA8, "Destination_On_Right");
  strcpy(&byte_25BCCD7, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25BCCC0, "First_Stop");
  byte_25BCCEF = 18;
  byte_25BCD07 = 19;
  strcpy((char *)&xmmword_25BCCF0, "First_Stop_On_Right");
  strcpy(&byte_25BCD1F, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25BCD08, "Next_Stop");
  byte_25BCD37 = 17;
  byte_25BCD4F = 18;
  strcpy((char *)&xmmword_25BCD38, "Next_Stop_On_Right");
  byte_25BCD67 = 13;
  strcpy((char *)&qword_25BCD50, "Waypoint_Stop");
  byte_25BCD7F = 21;
  strcpy((char *)&xmmword_25BCD68, "Waypoint_Stop_On_Left");
  byte_25BCD97 = 22;
  strcpy((char *)&xmmword_25BCD80, "Waypoint_Stop_On_Right");
  byte_25BCDAF = 11;
  strcpy((char *)&qword_25BCD98, "Roundabout_");
  byte_25BCDC7 = 16;
  strcpy((char *)&xmmword_25BCDB0, "Enter_Roundabout");
  qword_25BCDC8 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_25BCDD0 = xmmword_20B91C0;
  strcpy((char *)qword_25BCDC8, "Walking_Enter_Roundabout");
  byte_25BCDF7 = 16;
  strcpy(byte_25BCDE0, "Leave_Roundabout");
  byte_25BCE0F = 21;
  strcpy((char *)&xmmword_25BCDF8, "Roundabout_First_Exit");
  byte_25BCE27 = 22;
  strcpy(byte_25BCE10, "Roundabout_Second_Exit");
  byte_25BCE3F = 21;
  strcpy((char *)&xmmword_25BCE28, "Roundabout_Third_Exit");
  strcpy(byte_25BCE40, "Roundabout_Fourth_Exit");
  HIBYTE(word_25BCE56) = 22;
  byte_25BCE6F = 21;
  strcpy((char *)&xmmword_25BCE58, "Roundabout_Fifth_Exit");
  byte_25BCE87 = 21;
  strcpy(byte_25BCE70, "Roundabout_Sixth_Exit");
  qword_25BCE88 = (uint64_t)operator new(0x19uLL);
  unk_25BCE90 = xmmword_20B9250;
  strcpy((char *)qword_25BCE88, "Roundabout_Seventh_Exit");
  strcpy(byte_25BCEA0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25BCEB6) = 22;
  byte_25BCECF = 21;
  strcpy((char *)&xmmword_25BCEB8, "Roundabout_Ninth_Exit");
  byte_25BCEE7 = 21;
  strcpy(byte_25BCED0, "Roundabout_Tenth_Exit");
  qword_25BCEE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BCEF0 = xmmword_20B91C0;
  strcpy((char *)qword_25BCEE8, "Roundabout_Eleventh_Exit");
  qword_25BCF00 = (uint64_t)operator new(0x19uLL);
  unk_25BCF08 = xmmword_20B9250;
  strcpy((char *)qword_25BCF00, "Roundabout_Twelfth_Exit");
  qword_25BCF18 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  unk_25BCF20 = xmmword_20B5EB0;
  strcpy((char *)qword_25BCF18, "Roundabout_Thirteenth_Exit");
  qword_25BCF30 = (uint64_t)operator new(0x20uLL);
  unk_25BCF38 = xmmword_20B5EB0;
  strcpy((char *)qword_25BCF30, "Roundabout_Fourteenth_Exit");
  qword_25BCF48 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  *(_OWORD *)algn_25BCF50 = xmmword_20B8870;
  strcpy((char *)qword_25BCF48, "Roundabout_Fifteenth_Exit");
  qword_25BCF60 = (uint64_t)operator new(0x20uLL);
  unk_25BCF68 = xmmword_20B8870;
  strcpy((char *)qword_25BCF60, "Roundabout_Sixteenth_Exit");
  qword_25BCF78 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  unk_25BCF80 = xmmword_20B91A0;
  strcpy((char *)qword_25BCF78, "Roundabout_Seventeenth_Exit");
  qword_25BCF90 = (uint64_t)operator new(0x20uLL);
  unk_25BCF98 = xmmword_20B5EB0;
  strcpy((char *)qword_25BCF90, "Roundabout_Eighteenth_Exit");
  qword_25BCFA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BCFB0 = xmmword_20B5EB0;
  strcpy((char *)qword_25BCFA8, "Roundabout_Nineteenth_Exit");
  byte_25BCFD7 = 8;
  strcpy((char *)&qword_25BCFC0, "Off_Ramp");
  byte_25BCFEF = 16;
  strcpy((char *)&xmmword_25BCFD8, "Off_Ramp_On_Left");
  byte_25BD007 = 17;
  strcpy(algn_25BCFF0, "Off_Ramp_On_Right");
  byte_25BD01F = 14;
  strcpy((char *)&qword_25BD008, "Change_Highway");
  strcpy(byte_25BD020, "Change_Highway_On_Left");
  HIBYTE(word_25BD036) = 22;
  qword_25BD038 = (uint64_t)operator new(0x19uLL);
  unk_25BD040 = xmmword_20B9250;
  strcpy((char *)qword_25BD038, "Change_Highway_On_Right");
  byte_25BD067 = 5;
  strcpy((char *)&dword_25BD050, "Merge");
  byte_25BD07F = 12;
  strcpy((char *)&qword_25BD068, "Enter_Detour");
  byte_25BD097 = 11;
  strcpy((char *)&qword_25BD080, "Exit_Detour");
  byte_25BD0AF = 18;
  strcpy((char *)&xmmword_25BD098, "Walking_Turnaround");
  qword_25BD0B0 = (uint64_t)operator new(0x19uLL);
  unk_25BD0B8 = xmmword_20B9250;
  strcpy((char *)qword_25BD0B0, "Walking_Turnaround_Sign");
  byte_25BD0DF = 19;
  strcpy(byte_25BD0C8, "Distance_Title_List");
  unk_25BD0E0 = operator new(0x19uLL);
  unk_25BD0E8 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25BD0E0, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_25BD10F = 19;
  strcpy(byte_25BD0F8, "Arrival_Charge_List");
  byte_25BD127 = 15;
  strcpy(byte_25BD110, "Charge_At_Start");
  strcpy(&byte_25BD13F, "\tPass_Street");
  strcpy(byte_25BD128, "Pass_Exit");
  byte_25BD157 = 11;
  byte_25BD16F = 17;
  strcpy(byte_25BD158, "Pass_Intersection");
  strcpy(&byte_25BD187, "\t_PrevExitNumber");
  strcpy(byte_25BD170, "Next_Exit");
  byte_25BD19F = 15;
  strcpy(&byte_25BD1B7, "\t_PrevUTurn");
  strcpy(byte_25BD1A0, "_PrevRoad");
  strcpy(&byte_25BD1CF, "\nNext_");
  byte_25BD1E7 = 5;
  byte_25BD1FF = 15;
  strcpy(byte_25BD1E8, "_At_Next_Street");
  byte_25BD217 = 21;
  strcpy(byte_25BD200, "_At_Next_Intersection");
  byte_25BD22F = 14;
  strcpy((char *)&qword_25BD218, "Charge_Station");
  byte_25BD247 = 15;
  strcpy((char *)&qword_25BD230, "_Charge_Station");
  BYTE1(qword_25BD258) = 0;
  WORD1(qword_25BD258) = 25856;
  HIDWORD(qword_25BD258) = 335544320;
  strcpy((char *)&qword_25BD248, "_Charge_Station_");
  byte_25BD277 = 8;
  strcpy((char *)&qword_25BD260, "_Minimum");
  byte_25BD28F = 15;
  strcpy((char *)&qword_25BD278, "ExitShield_Sign");
  byte_25BD2A7 = 8;
  strcpy((char *)&qword_25BD290, "Walking_");
  byte_25BD2BF = 16;
  strcpy((char *)&xmmword_25BD2A8, "Walking_Continue");
  byte_25BD2D7 = 19;
  strcpy((char *)&xmmword_25BD2C0, "Walking_Start_Route");
  qword_25BD2D8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BD2E0 = xmmword_20B5EB0;
  strcpy((char *)qword_25BD2D8, "Walking_Start_Route_U_Turn");
  byte_25BD307 = 17;
  strcpy(&algn_25BD2E0[16], "Walking_Left_Turn");
  byte_25BD31F = 18;
  strcpy((char *)&xmmword_25BD308, "Walking_Right_Turn");
  qword_25BD320 = (uint64_t)operator new(0x20uLL);
  unk_25BD328 = xmmword_20B5EB0;
  strcpy((char *)qword_25BD320, "Walking_Turn_At_Roundabout");
  qword_25BD338 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  unk_25BD340 = xmmword_20B91B0;
  strcpy((char *)qword_25BD338, "Walking_U_Turn_When_Possible");
  qword_25BD350 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25BD358 = xmmword_20B9390;
  strcpy((char *)qword_25BD350, "Walking_Roundabout_Exit_Continue");
  qword_25BD368 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BD370 = xmmword_20B91B0;
  strcpy((char *)qword_25BD368, "Walking_Roundabout_Exit_Left");
  qword_25BD380 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25BD388 = xmmword_20B8890;
  strcpy((char *)qword_25BD380, "Walking_Roundabout_Exit_Right");
  qword_25BD398 = (uint64_t)operator new(0x20uLL);
  unk_25BD3A0 = xmmword_20B8870;
  strcpy((char *)qword_25BD398, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v2 = (char *)operator new(0x20uLL);
  qword_25BD3B0 = (uint64_t)v2;
  unk_25BD3B8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v2 + 9) = v274;
  v2[25] = 0;
  byte_25BD3DF = 8;
  strcpy((char *)&qword_25BD3C8, "Walking_");
  qword_25BD3E0 = (uint64_t)operator new(0x19uLL);
  unk_25BD3E8 = v282;
  strcpy((char *)qword_25BD3E0, "Walking_Sharp_Left_Turn");
  qword_25BD3F8 = (uint64_t)operator new(0x20uLL);
  unk_25BD400 = v281;
  strcpy((char *)qword_25BD3F8, "Walking_Sharp_Right_Turn");
  qword_25BD410 = (uint64_t)operator new(0x20uLL);
  unk_25BD418 = v281;
  strcpy((char *)qword_25BD410, "Walking_Slight_Left_Turn");
  qword_25BD428 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BD430 = v280;
  strcpy((char *)qword_25BD428, "Walking_Slight_Right_Turn");
  byte_25BD457 = 4;
  strcpy((char *)&dword_25BD440, "Exit");
  byte_25BD46F = 4;
  strcpy((char *)&dword_25BD458, "Road");
  byte_25BD487 = 7;
  strcpy((char *)&dword_25BD470, "Freeway");
  byte_25BD49F = 12;
  strcpy((char *)&qword_25BD488, "Intersection");
  byte_25BD4B7 = 5;
  strcpy((char *)&dword_25BD4A0, "Ferry");
  byte_25BD4CF = 11;
  strcpy((char *)&qword_25BD4B8, "ShuttleName");
  byte_25BD4E7 = 5;
  strcpy((char *)&dword_25BD4D0, "Road1");
  strcpy(&byte_25BD4FF, "\tName");
  strcpy((char *)&qword_25BD4E8, "Signpost1");
  byte_25BD517 = 4;
  byte_25BD52F = 7;
  strcpy((char *)&dword_25BD518, "Address");
  byte_25BD547 = 7;
  strcpy((char *)&dword_25BD530, "Shield1");
  byte_25BD55F = 13;
  strcpy((char *)&qword_25BD548, "TowardShield1");
  byte_25BD577 = 6;
  strcpy((char *)&dword_25BD560, "Right_");
  byte_25BD58F = 5;
  strcpy((char *)&dword_25BD578, "Left_");
  strcpy(&byte_25BD5A7, "\tOn_Left_");
  strcpy((char *)&qword_25BD590, "On_Right_");
  byte_25BD5BF = 8;
  byte_25BD5D7 = 12;
  strcpy((char *)&qword_25BD5C0, "ElevatorName");
  byte_25BD5EF = 13;
  strcpy((char *)&qword_25BD5D8, "EscalatorName");
  strcpy(&byte_25BD607, "\nBridgeName");
  strcpy((char *)&qword_25BD5F0, "StairsName");
  strcpy(&byte_25BD61F, "\nTunnelName");
  strcpy(&byte_25BD637, "\nParking");
  byte_25BD64F = 7;
  strcpy(&byte_25BD667, "\t_Escalator");
  strcpy((char *)&qword_25BD650, "_Elevator");
  strcpy(&byte_25BD67F, "\n_ElevatorName");
  byte_25BD697 = 13;
  byte_25BD6AF = 14;
  strcpy((char *)&qword_25BD698, "_EscalatorName");
  byte_25BD6C7 = 5;
  strcpy((char *)&qword_25BD6B0, "_Road");
  byte_25BD6DF = 8;
  strcpy((char *)&qword_25BD6C8, "_Freeway");
  byte_25BD6F7 = 13;
  strcpy((char *)&qword_25BD6E0, "_Intersection");
  byte_25BD70F = 6;
  strcpy((char *)&dword_25BD6F8, "_Road1");
  byte_25BD727 = 6;
  strcpy((char *)&dword_25BD710, "_Road2");
  strcpy(&byte_25BD73F, "\n_Signpost2");
  strcpy((char *)&qword_25BD728, "_Signpost1");
  strcpy(&byte_25BD757, "\n_Ferry");
  byte_25BD76F = 6;
  byte_25BD787 = 12;
  strcpy((char *)&qword_25BD770, "_Ferry_Ferry");
  byte_25BD79F = 12;
  strcpy((char *)&qword_25BD788, "_ShuttleName");
  qword_25BD7A0 = (uint64_t)operator new(0x20uLL);
  unk_25BD7A8 = v279;
  strcpy((char *)qword_25BD7A0, "_Railway_Shuttle_ShuttleName");
  byte_25BD7CF = 11;
  strcpy((char *)&qword_25BD7B8, "_ExitNumber");
  byte_25BD7E7 = 5;
  strcpy((char *)&dword_25BD7D0, "_Exit");
  byte_25BD7FF = 7;
  strcpy((char *)&dword_25BD7E8, "_StayOn");
  byte_25BD817 = 7;
  strcpy((char *)&dword_25BD800, "_Stairs");
  byte_25BD82F = 5;
  strcpy((char *)&dword_25BD818, "_Ramp");
  byte_25BD847 = 11;
  strcpy((char *)&qword_25BD830, "_StairsName");
  strcpy(&byte_25BD85F, "\t_Down");
  strcpy((char *)&qword_25BD848, "_RampName");
  byte_25BD877 = 5;
  byte_25BD88F = 3;
  dword_25BD878 = 7361887;
  byte_25BD8A7 = 7;
  strcpy((char *)&dword_25BD890, "_Bridge");
  byte_25BD8BF = 7;
  strcpy((char *)&dword_25BD8A8, "_Tunnel");
  byte_25BD8D7 = 11;
  strcpy((char *)&qword_25BD8C0, "_Roundabout");
  byte_25BD8EF = 6;
  strcpy((char *)&dword_25BD8D8, "_Cross");
  byte_25BD907 = 8;
  strcpy((char *)&qword_25BD8F0, "_Parking");
  byte_25BD91F = 8;
  strcpy((char *)&qword_25BD908, "_Shield1");
  byte_25BD937 = 14;
  strcpy((char *)&qword_25BD920, "_TowardShield1");
  byte_25BD94F = 8;
  strcpy((char *)&qword_25BD938, "_Shield2");
  byte_25BD967 = 14;
  strcpy((char *)&qword_25BD950, "_TowardShield2");
  byte_25BD97F = 11;
  strcpy((char *)&qword_25BD968, "_Direction1");
  byte_25BD997 = 11;
  strcpy((char *)&qword_25BD980, "_Direction2");
  strcpy(&byte_25BD9AF, "\n_TowardDirection1");
  strcpy((char *)&qword_25BD998, "Direction1");
  byte_25BD9C7 = 17;
  byte_25BD9DF = 17;
  strcpy((char *)&xmmword_25BD9C8, "_TowardDirection2");
  byte_25BD9F7 = 16;
  strcpy((char *)&xmmword_25BD9E0, "TowardDirection1");
  byte_25BDA0F = 7;
  strcpy((char *)&qword_25BD9F8, "_Spoken");
  byte_25BDA27 = 5;
  strcpy((char *)&qword_25BDA10, "_Sign");
  byte_25BDA3F = 15;
  strcpy((char *)&qword_25BDA28, "_Secondary_Sign");
  byte_25BDA57 = 5;
  byte_25BDA44 = 116;
  dword_25BDA40 = 1936280671;
  byte_25BDA45 = 0;
  byte_25BDA6F = 8;
  strcpy((char *)&qword_25BDA58, "_Primary");
  qword_25BDA80 = 0xF00000000000000;
  strcpy((char *)&qword_25BDA70, "_Spoken_Primary");
  strcpy(&byte_25BDA9F, "\n_Secondary");
  strcpy((char *)&qword_25BDA88, "_Secondary");
  strcpy(&byte_25BDAB7, "\n_Spoken_Secondar");
  BYTE1(qword_25BDAC8) = 0;
  WORD1(qword_25BDAC8) = 0;
  HIDWORD(qword_25BDAC8) = 285212672;
  byte_25BDAE7 = 13;
  strcpy((char *)&qword_25BDAD0, "_To_Secondary");
  BYTE1(qword_25BDAF8) = 0;
  WORD1(qword_25BDAF8) = 0;
  HIDWORD(qword_25BDAF8) = 335544320;
  strcpy((char *)&dword_25BDAE8, "_Spoken_To_Secon");
  strcpy(&byte_25BDB17, "\t_ValidDistance");
  strcpy((char *)&qword_25BDB00, "_Distance");
  byte_25BDB2F = 14;
  byte_25BDB47 = 6;
  strcpy((char *)&dword_25BDB30, "_Short");
  byte_25BDB5F = 1;
  word_25BDB48 = 95;
  qword_25BDB60 = (uint64_t)operator new(0x20uLL);
  unk_25BDB68 = v281;
  strcpy((char *)qword_25BDB60, "Concatenate_Newline_Sign");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25BDB78 = (uint64_t)v3;
  unk_25BDB80 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v271;
  v3[23] = 0;
  byte_25BDBA7 = 12;
  strcpy((char *)&qword_25BDB90, "Chain_Spoken");
  byte_25BDBBF = 15;
  strcpy((char *)&qword_25BDBA8, "Chain_To_Spoken");
  strcpy(&byte_25BDBD7, "\nThen_Spoken");
  strcpy((char *)&qword_25BDBC0, "And_Spoken");
  byte_25BDBEF = 11;
  byte_25BDC07 = 18;
  strcpy(algn_25BDBF0, "Concatenate_Spoken");
  qword_25BDC08 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  *(_OWORD *)algn_25BDC10 = xmmword_20B9240;
  strcpy((char *)qword_25BDC08, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25BDC20 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_25BDC28 = xmmword_20B9260;
  strcpy((char *)qword_25BDC20, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25BDC38 = (uint64_t)operator new(0x40uLL);
  unk_25BDC40 = xmmword_20B9A90;
  strcpy((char *)qword_25BDC38, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25BDC50 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25BDC58 = xmmword_20B9A40;
  strcpy((char *)qword_25BDC50, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25BDC68 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  *(_OWORD *)algn_25BDC70 = xmmword_20E12D0;
  strcpy((char *)qword_25BDC68, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25BDC80 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25BDC88 = xmmword_20B9960;
  strcpy((char *)qword_25BDC80, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25BDC98 = (uint64_t)operator new(0x28uLL);
  unk_25BDCA0 = xmmword_20B93A0;
  strcpy((char *)qword_25BDC98, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25BDCB0 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25BDCB8 = xmmword_20E1380;
  strcpy((char *)qword_25BDCB0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25BDCC8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25BDCD0 = xmmword_20B93C0;
  strcpy((char *)qword_25BDCC8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25BDCE0 = (uint64_t)operator new(0x38uLL);
  unk_25BDCE8 = xmmword_20B9A60;
  strcpy((char *)qword_25BDCE0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25BDCF8 = (uint64_t)operator new(0x30uLL);
  unk_25BDD00 = xmmword_20E1380;
  strcpy((char *)qword_25BDCF8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25BDD10 = (uint64_t)operator new(0x28uLL);
  unk_25BDD18 = xmmword_20B9960;
  strcpy((char *)qword_25BDD10, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25BDD28 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  *(_OWORD *)algn_25BDD30 = xmmword_20B93D0;
  strcpy((char *)qword_25BDD28, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25BDD40 = (uint64_t)operator new(0x20uLL);
  unk_25BDD48 = v277;
  strcpy((char *)qword_25BDD40, "Walking_Distance_Chain_Spoken");
  qword_25BDD58 = (uint64_t)operator new(0x20uLL);
  unk_25BDD60 = v277;
  strcpy((char *)qword_25BDD58, "Walking_Continue_Chain_Spoken");
  uint64_t v4 = (char *)operator new(0x19uLL);
  qword_25BDD70 = (uint64_t)v4;
  unk_25BDD78 = v282;
  *(_OWORD *)uint64_t v4 = v272;
  *(void *)(v4 + 15) = v271;
  v4[23] = 0;
  unk_25BDD88 = operator new(0x28uLL);
  unk_25BDD90 = v270;
  strcpy(unk_25BDD88, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_25BDDA0, "Walking_Continue_Cross");
  HIBYTE(word_25BDDB6) = 22;
  byte_25BDDCF = 14;
  strcpy(byte_25BDDB8, "Continue_Cross");
  byte_25BDDE7 = 5;
  strcpy(byte_25BDDD0, "Cross");
  byte_25BDDFF = 19;
  strcpy(byte_25BDDE8, "Cross_Street_Spoken");
  byte_25BDE17 = 17;
  strcpy(byte_25BDE00, "Cross_Road_Spoken");
  byte_25BDE2F = 20;
  strcpy(byte_25BDE18, "Use_Crosswalk_Spoken");
  byte_25BDE47 = 15;
  strcpy(byte_25BDE30, "Distance_Spoken");
  byte_25BDE5F = 19;
  strcpy(byte_25BDE48, "Distance_And_Spoken");
  byte_25BDE77 = 21;
  strcpy(byte_25BDE60, "Continue_Stage_Spoken");
  byte_25BDE8F = 13;
  qmemcpy(&qword_25BDE78, "ContinueStage", 13);
  int v5 = SHIBYTE(qword_25BDA80);
  if (qword_25BDA80 >= 0) {
    size_t v6 = HIBYTE(qword_25BDA80);
  }
  else {
    size_t v6 = unk_25BDA78;
  }
  unint64_t v7 = v6 + 13;
  byte_25BDE85 = 0;
  if (v6 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v11 = (char *)operator new(v9 + 1);
    qword_25BDE98 = v6 + 13;
    unk_25BDEA0 = v10 | 0x8000000000000000;
    qword_25BDE90 = (uint64_t)v11;
    qmemcpy(v11, "ContinueStage", 13);
    uint64_t v8 = v11 + 13;
  }
  else
  {
    BYTE1(qword_25BDE98) = 0;
    WORD1(qword_25BDE98) = 0;
    HIDWORD(qword_25BDE98) = 0;
    unk_25BDEA0 = 0;
    byte_25BDEA7 = v6 + 13;
    strcpy((char *)&qword_25BDE90, "Continue");
    uint64_t v8 = (char *)&qword_25BDE98 + 5;
    if (!v6) {
      goto LABEL_19;
    }
  }
  if (v5 >= 0) {
    uint64_t v12 = &qword_25BDA70;
  }
  else {
    uint64_t v12 = (uint64_t *)qword_25BDA70;
  }
  memmove(v8, v12, v6);
LABEL_19:
  v8[v6] = 0;
  int v13 = byte_25BD6C7;
  if (byte_25BD6C7 >= 0) {
    size_t v14 = byte_25BD6C7;
  }
  else {
    size_t v14 = qword_25BD6B8;
  }
  unint64_t v15 = v14 + 13;
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 13;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    *uint64_t v19 = qword_25BDE78;
    *(void *)((char *)v19 + 5) = *(uint64_t *)((char *)&qword_25BDE78 + 5);
    int v16 = (char *)v19 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25BDE78 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25BDE78;
    int v16 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (v13 >= 0) {
    uint64_t v20 = &qword_25BD6B0;
  }
  else {
    uint64_t v20 = (uint64_t *)qword_25BD6B0;
  }
  memmove(v16, v20, v14);
LABEL_33:
  v16[v14] = 0;
  if (v5 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&qword_25BDA70;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)qword_25BDA70;
  }
  int64_t v22 = std::string::append(&__dst, v21, v6);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  qword_25BDEB8 = v22->__r_.__value_.__r.__words[2];
  xmmword_25BDEA8 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25BDED7 = 5;
  strcpy((char *)&dword_25BDEC0, "Merge");
  qword_25BDED8 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  unk_25BDEE0 = xmmword_20B8E90;
  strcpy((char *)qword_25BDED8, "Continue_Freeway_Spoken_Primary");
  byte_25BDF07 = 8;
  strcpy((char *)&qword_25BDEF0, "Starting");
  byte_25BDF1F = 14;
  strcpy((char *)&qword_25BDF08, "Starting_Route");
  byte_25BDF37 = 14;
  strcpy((char *)&qword_25BDF20, "Resuming_Route");
  byte_25BDF4F = 16;
  strcpy((char *)&xmmword_25BDF38, "Continuing_Route");
  byte_25BDF67 = 9;
  word_25BDF58 = 112;
  qword_25BDF50 = *(void *)&v265[48];
  strcpy(&byte_25BDF7F, "\nEnding");
  strcpy((char *)&word_25BDF70, "op");
  qword_25BDF68 = *(void *)&v269[0];
  byte_25BDF97 = 6;
  strcpy((char *)&qword_25BDF98, "_Destination");
  byte_25BDFAF = 12;
  byte_25BDFC7 = 15;
  strcpy((char *)&qword_25BDFB0, "_At_Destination");
  std::operator+<char>();
  qword_25BDFE0 = (uint64_t)operator new(0x20uLL);
  unk_25BDFE8 = v281;
  strcpy((char *)qword_25BDFE0, "Spoken_Ending_At_Parking");
  qword_25BDFF8 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_25BE000 = xmmword_20B9800;
  strcpy((char *)qword_25BDFF8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25BE010, "Sign_Ending_At_Parking");
  HIBYTE(word_25BE026) = 22;
  byte_25BE03F = 4;
  strcpy((char *)&dword_25BE028, "Home");
  byte_25BE057 = 4;
  strcpy((char *)&dword_25BE040, "Work");
  byte_25BE06F = 8;
  strcpy((char *)&qword_25BE058, "Business");
  byte_25BE087 = 4;
  strcpy((char *)&dword_25BE070, "Name");
  byte_25BE09F = 13;
  strcpy((char *)&qword_25BE088, "Other_Contact");
  byte_25BE0B7 = 11;
  strcpy((char *)&qword_25BE0A0, "ContactHome");
  byte_25BE0CF = 11;
  *(_DWORD *)((char *)&qword_25BE0B8 + 7) = 1802661719;
  byte_25BE0E7 = 7;
  *(int *)((char *)&dword_25BE0D0 + 3) = 1936942450;
  dword_25BE0D0 = 1919181889;
  strcpy((char *)&xmmword_25BE0E8, "Discoverability_Prompt");
  HIBYTE(word_25BE0FE) = 22;
  byte_25BE117 = 6;
  dword_25BE100 = 1634878303;
  word_25BE104 = 26739;
  byte_25BE12F = 8;
  qword_25BE118 = 0x697269535F6F4E5FLL;
  byte_25BE147 = 9;
  strcpy((char *)&qword_25BE130, "_CityName");
  byte_25BE15F = 8;
  qword_25BE148 = 0x636972656E65475FLL;
  int v24 = byte_25BDF07;
  if (byte_25BDF07 >= 0) {
    size_t v25 = byte_25BDF07;
  }
  else {
    size_t v25 = qword_25BDEF8;
  }
  LODWORD(v272) = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v26 = byte_25BD247;
  }
  else {
    size_t v26 = unk_25BD238;
  }
  qword_25BE0B8 = *(void *)"ContactWork";
  byte_25BE0C3 = 0;
  byte_25BE0D7 = 0;
  byte_25BE106 = 0;
  byte_25BE120 = 0;
  byte_25BE150 = 0;
  unint64_t v27 = v26 + v25;
  if (v26 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v27 <= 0x16)
  {
    uint64_t v28 = &qword_25BE160;
    qword_25BE168 = 0;
    unk_25BE170 = 0;
    qword_25BE160 = 0;
    byte_25BE177 = v26 + v25;
    if (!v25) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v91 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v27 | 7) != 0x17) {
    uint64_t v91 = v27 | 7;
  }
  uint64_t v92 = v91 + 1;
  uint64_t v28 = (uint64_t *)operator new(v91 + 1);
  qword_25BE168 = v26 + v25;
  unk_25BE170 = v92 | 0x8000000000000000;
  qword_25BE160 = (uint64_t)v28;
  if (v25)
  {
LABEL_47:
    if (v24 >= 0) {
      unint64_t v29 = &qword_25BDEF0;
    }
    else {
      unint64_t v29 = (uint64_t *)qword_25BDEF0;
    }
    memmove(v28, v29, v25);
  }
LABEL_51:
  uint64_t v30 = (char *)v28 + v25;
  if (v26)
  {
    if ((int)v272 >= 0) {
      uint64_t v31 = &qword_25BD230;
    }
    else {
      uint64_t v31 = (uint64_t *)qword_25BD230;
    }
    memmove(v30, v31, v26);
  }
  v30[v26] = 0;
  int v32 = byte_25BDFAF;
  if (byte_25BDFAF >= 0) {
    size_t v33 = byte_25BDFAF;
  }
  else {
    size_t v33 = qword_25BDFA0;
  }
  unint64_t v34 = v33 + v25;
  if (v33 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v34 <= 0x16)
  {
    uint64_t v35 = &qword_25BE178;
    qword_25BE180 = 0;
    unk_25BE188 = 0;
    qword_25BE178 = 0;
    byte_25BE18F = v33 + v25;
    if (!v25) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v93 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v93 = v34 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v35 = (uint64_t *)operator new(v93 + 1);
  qword_25BE180 = v33 + v25;
  unk_25BE188 = v94 | 0x8000000000000000;
  qword_25BE178 = (uint64_t)v35;
  if (v25)
  {
LABEL_62:
    if (v24 >= 0) {
      char v36 = &qword_25BDEF0;
    }
    else {
      char v36 = (uint64_t *)qword_25BDEF0;
    }
    memmove(v35, v36, v25);
  }
LABEL_66:
  long long v37 = (char *)v35 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      uint64_t v38 = &qword_25BDF98;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_25BDF98;
    }
    memmove(v37, v38, v33);
  }
  v37[v33] = 0;
  qword_25BE190 = (uint64_t)operator new(0x19uLL);
  unk_25BE198 = v282;
  strcpy((char *)qword_25BE190, "{ChargeStationCityName}");
  if (v34 < 0x17)
  {
    BOOL v39 = &qword_25BE1A8;
    qword_25BE1B0 = 0;
    unk_25BE1B8 = 0;
    qword_25BE1A8 = 0;
    byte_25BE1BF = v33 + v25;
    if (!v25) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v95 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v95 = v34 | 7;
  }
  uint64_t v96 = v95 + 1;
  BOOL v39 = (uint64_t *)operator new(v95 + 1);
  qword_25BE1B0 = v33 + v25;
  unk_25BE1B8 = v96 | 0x8000000000000000;
  qword_25BE1A8 = (uint64_t)v39;
  if (v25)
  {
LABEL_73:
    if (v24 >= 0) {
      uint64_t v40 = &qword_25BDEF0;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_25BDEF0;
    }
    memmove(v39, v40, v25);
  }
LABEL_77:
  uint64_t v41 = (char *)v39 + v25;
  if (v33)
  {
    if (v32 >= 0) {
      uint64_t v42 = &qword_25BDF98;
    }
    else {
      uint64_t v42 = (uint64_t *)qword_25BDF98;
    }
    memmove(v41, v42, v33);
  }
  v41[v33] = 0;
  strcpy((char *)&xmmword_25BE1C0, "{NewBatteryPercentage}");
  HIBYTE(word_25BE1D6) = 22;
  qword_25BE1D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25BE1E0 = v275;
  strcpy((char *)qword_25BE1D8, "{OriginalBatteryPercentage}");
  byte_25BE207 = 19;
  strcpy((char *)&xmmword_25BE1F0, "_Arrival_Percentage");
  int v43 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v44 = byte_25BDF97;
  }
  else {
    size_t v44 = qword_25BDF88;
  }
  unint64_t v45 = v44 + v26;
  if (v44 + v26 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v45 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44 + v26;
    if (!v44) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v97 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17) {
    uint64_t v97 = v45 | 7;
  }
  uint64_t v98 = v97 + 1;
  p_dst = (char *)operator new(v97 + 1);
  __dst.__r_.__value_.__l.__size_ = v44 + v26;
  __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v44)
  {
LABEL_88:
    if (v43 >= 0) {
      uint64_t v47 = &qword_25BDF80;
    }
    else {
      uint64_t v47 = (uint64_t *)qword_25BDF80;
    }
    memmove(p_dst, v47, v44);
  }
LABEL_92:
  uint64_t v48 = &p_dst[v44];
  if (v26)
  {
    if ((int)v272 >= 0) {
      uint64_t v49 = &qword_25BD230;
    }
    else {
      uint64_t v49 = (uint64_t *)qword_25BD230;
    }
    memmove(v48, v49, v26);
  }
  v48[v26] = 0;
  BOOL v50 = std::string::append(&__dst, "_Percentage");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  qword_25BE218 = v50->__r_.__value_.__r.__words[2];
  xmmword_25BE208 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v52 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v53 = byte_25BDF97;
  }
  else {
    size_t v53 = qword_25BDF88;
  }
  int v54 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v55 = byte_25BD247;
  }
  else {
    size_t v55 = unk_25BD238;
  }
  unint64_t v56 = v55 + v53;
  if (v55 + v53 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v56 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v57 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v55 + v53;
    if (!v53) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v99 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v56 | 7) != 0x17) {
    uint64_t v99 = v56 | 7;
  }
  uint64_t v100 = v99 + 1;
  uint64_t v57 = (char *)operator new(v99 + 1);
  v283.__r_.__value_.__l.__size_ = v55 + v53;
  v283.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  if (v53)
  {
LABEL_108:
    if (v52 >= 0) {
      uint64_t v58 = &qword_25BDF80;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_25BDF80;
    }
    memmove(v57, v58, v53);
  }
LABEL_112:
  unint64_t v59 = &v57[v53];
  if (v55)
  {
    if (v54 >= 0) {
      BOOL v60 = &qword_25BD230;
    }
    else {
      BOOL v60 = (uint64_t *)qword_25BD230;
    }
    memmove(v59, v60, v55);
  }
  v59[v55] = 0;
  if (byte_25BD277 >= 0) {
    uint64_t v61 = (const std::string::value_type *)&qword_25BD260;
  }
  else {
    uint64_t v61 = (const std::string::value_type *)qword_25BD260;
  }
  if (byte_25BD277 >= 0) {
    std::string::size_type v62 = byte_25BD277;
  }
  else {
    std::string::size_type v62 = *(void *)&byte_25BD268;
  }
  uint64_t v63 = std::string::append(&v283, v61, v62);
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  uint64_t v65 = std::string::append(&__dst, "_Percentage");
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  qword_25BE230 = v65->__r_.__value_.__r.__words[2];
  xmmword_25BE220 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v67 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v68 = byte_25BDF97;
  }
  else {
    size_t v68 = qword_25BDF88;
  }
  int v69 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v70 = byte_25BD247;
  }
  else {
    size_t v70 = unk_25BD238;
  }
  unint64_t v71 = v70 + v68;
  if (v70 + v68 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v71 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v72 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v70 + v68;
    if (!v68) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v101 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v71 | 7) != 0x17) {
    uint64_t v101 = v71 | 7;
  }
  uint64_t v102 = v101 + 1;
  uint64_t v72 = (char *)operator new(v101 + 1);
  __dst.__r_.__value_.__l.__size_ = v70 + v68;
  __dst.__r_.__value_.__r.__words[2] = v102 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  if (v68)
  {
LABEL_134:
    if (v67 >= 0) {
      uint64_t v73 = &qword_25BDF80;
    }
    else {
      uint64_t v73 = (uint64_t *)qword_25BDF80;
    }
    memmove(v72, v73, v68);
  }
LABEL_138:
  uint64_t v74 = &v72[v68];
  if (v70)
  {
    if (v69 >= 0) {
      uint64_t v75 = &qword_25BD230;
    }
    else {
      uint64_t v75 = (uint64_t *)qword_25BD230;
    }
    memmove(v74, v75, v70);
  }
  v74[v70] = 0;
  uint64_t v76 = std::string::append(&__dst, "_Duration");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  qword_25BE248 = v76->__r_.__value_.__r.__words[2];
  xmmword_25BE238 = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v78 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v79 = byte_25BDF97;
  }
  else {
    size_t v79 = qword_25BDF88;
  }
  int v80 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v81 = byte_25BD247;
  }
  else {
    size_t v81 = unk_25BD238;
  }
  unint64_t v82 = v81 + v79;
  if (v81 + v79 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v82 <= 0x16)
  {
    qword_25BE258 = 0;
    unk_25BE260 = 0;
    qword_25BE250 = 0;
    uint64_t v83 = &qword_25BE250;
    byte_25BE267 = v81 + v79;
    if (!v79) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v103 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v82 | 7) != 0x17) {
    uint64_t v103 = v82 | 7;
  }
  uint64_t v104 = v103 + 1;
  uint64_t v83 = (uint64_t *)operator new(v103 + 1);
  qword_25BE258 = v81 + v79;
  unk_25BE260 = v104 | 0x8000000000000000;
  qword_25BE250 = (uint64_t)v83;
  if (v79)
  {
LABEL_154:
    if (v78 >= 0) {
      int64_t v84 = &qword_25BDF80;
    }
    else {
      int64_t v84 = (uint64_t *)qword_25BDF80;
    }
    memmove(v83, v84, v79);
  }
LABEL_158:
  BOOL v85 = (char *)v83 + v79;
  if (v81)
  {
    if (v80 >= 0) {
      uint64_t v86 = &qword_25BD230;
    }
    else {
      uint64_t v86 = (uint64_t *)qword_25BD230;
    }
    memmove(v85, v86, v81);
  }
  v85[v81] = 0;
  int v87 = byte_25BE267;
  if (byte_25BE267 >= 0) {
    size_t v88 = byte_25BE267;
  }
  else {
    size_t v88 = qword_25BE258;
  }
  unint64_t v89 = v88 + 5;
  if (v88 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v89 >= 0x17)
  {
    uint64_t v105 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17) {
      uint64_t v105 = v89 | 7;
    }
    uint64_t v106 = v105 + 1;
    uint64_t v90 = (uint64_t *)operator new(v105 + 1);
    qword_25BE270 = v88 + 5;
    unk_25BE278 = v106 | 0x8000000000000000;
    qword_25BE268 = (uint64_t)v90;
  }
  else
  {
    uint64_t v90 = &qword_25BE268;
    qword_25BE270 = 0;
    unk_25BE278 = 0;
    qword_25BE268 = 0;
    byte_25BE27F = v88 + 5;
    if (!v88) {
      goto LABEL_205;
    }
  }
  if (v87 >= 0) {
    uint64_t v107 = &qword_25BE250;
  }
  else {
    uint64_t v107 = (uint64_t *)qword_25BE250;
  }
  memmove(v90, v107, v88);
LABEL_205:
  strcpy((char *)v90 + v88, "_Name");
  int v108 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v109 = byte_25BDF97;
  }
  else {
    size_t v109 = qword_25BDF88;
  }
  int v110 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v111 = byte_25BD247;
  }
  else {
    size_t v111 = unk_25BD238;
  }
  unint64_t v112 = v111 + v109;
  if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v112 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v113 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v111 + v109;
    if (!v109) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v123 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v112 | 7) != 0x17) {
    uint64_t v123 = v112 | 7;
  }
  uint64_t v124 = v123 + 1;
  uint64_t v113 = (char *)operator new(v123 + 1);
  __dst.__r_.__value_.__l.__size_ = v111 + v109;
  __dst.__r_.__value_.__r.__words[2] = v124 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
  if (v109)
  {
LABEL_214:
    if (v108 >= 0) {
      double v114 = &qword_25BDF80;
    }
    else {
      double v114 = (uint64_t *)qword_25BDF80;
    }
    memmove(v113, v114, v109);
  }
LABEL_218:
  uint64_t v115 = &v113[v109];
  if (v111)
  {
    if (v110 >= 0) {
      int v116 = &qword_25BD230;
    }
    else {
      int v116 = (uint64_t *)qword_25BD230;
    }
    memmove(v115, v116, v111);
  }
  v115[v111] = 0;
  BOOL v117 = std::string::append(&__dst, "_Connector_Type");
  long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  qword_25BE290 = v117->__r_.__value_.__r.__words[2];
  xmmword_25BE280 = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v119 = SHIBYTE(qword_25BE290);
  if (qword_25BE290 >= 0) {
    size_t v120 = HIBYTE(qword_25BE290);
  }
  else {
    size_t v120 = *((void *)&xmmword_25BE280 + 1);
  }
  unint64_t v121 = v120 + 6;
  if (v120 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v121 >= 0x17)
  {
    uint64_t v125 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17) {
      uint64_t v125 = v121 | 7;
    }
    uint64_t v126 = v125 + 1;
    uint64_t v122 = (uint64_t *)operator new(v125 + 1);
    qword_25BE2A0 = v120 + 6;
    unk_25BE2A8 = v126 | 0x8000000000000000;
    qword_25BE298 = (uint64_t)v122;
  }
  else
  {
    uint64_t v122 = &qword_25BE298;
    qword_25BE2A0 = 0;
    unk_25BE2A8 = 0;
    qword_25BE298 = 0;
    byte_25BE2AF = v120 + 6;
    if (!v120) {
      goto LABEL_243;
    }
  }
  if (v119 >= 0) {
    uint64_t v127 = &xmmword_25BE280;
  }
  else {
    uint64_t v127 = (long long *)xmmword_25BE280;
  }
  memmove(v122, v127, v120);
LABEL_243:
  strcpy((char *)v122 + v120, "_Power");
  int v128 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v129 = byte_25BDF97;
  }
  else {
    size_t v129 = qword_25BDF88;
  }
  int v130 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v131 = byte_25BD247;
  }
  else {
    size_t v131 = unk_25BD238;
  }
  unint64_t v132 = v131 + v129;
  if (v131 + v129 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v132 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    double v133 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v131 + v129;
    if (!v129) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v162 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v132 | 7) != 0x17) {
    uint64_t v162 = v132 | 7;
  }
  uint64_t v163 = v162 + 1;
  double v133 = (char *)operator new(v162 + 1);
  __dst.__r_.__value_.__l.__size_ = v131 + v129;
  __dst.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
  if (v129)
  {
LABEL_252:
    if (v128 >= 0) {
      uint64_t v134 = &qword_25BDF80;
    }
    else {
      uint64_t v134 = (uint64_t *)qword_25BDF80;
    }
    memmove(v133, v134, v129);
  }
LABEL_256:
  double v135 = &v133[v129];
  if (v131)
  {
    if (v130 >= 0) {
      int v136 = &qword_25BD230;
    }
    else {
      int v136 = (uint64_t *)qword_25BD230;
    }
    memmove(v135, v136, v131);
  }
  v135[v131] = 0;
  if (byte_25BDA0F >= 0) {
    uint64_t v137 = (const std::string::value_type *)&qword_25BD9F8;
  }
  else {
    uint64_t v137 = (const std::string::value_type *)qword_25BD9F8;
  }
  if (byte_25BDA0F >= 0) {
    std::string::size_type v138 = byte_25BDA0F;
  }
  else {
    std::string::size_type v138 = unk_25BDA00;
  }
  unint64_t v139 = std::string::append(&__dst, v137, v138);
  long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
  qword_25BE2C0 = v139->__r_.__value_.__r.__words[2];
  xmmword_25BE2B0 = v140;
  v139->__r_.__value_.__l.__size_ = 0;
  v139->__r_.__value_.__r.__words[2] = 0;
  v139->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v141 = byte_25BDF97;
  if (byte_25BDF97 >= 0) {
    size_t v142 = byte_25BDF97;
  }
  else {
    size_t v142 = qword_25BDF88;
  }
  int v143 = byte_25BD247;
  if (byte_25BD247 >= 0) {
    size_t v144 = byte_25BD247;
  }
  else {
    size_t v144 = unk_25BD238;
  }
  unint64_t v145 = v144 + v142;
  if (v144 + v142 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v145 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    int v146 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v144 + v142;
    if (!v142) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v164 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v145 | 7) != 0x17) {
    uint64_t v164 = v145 | 7;
  }
  uint64_t v165 = v164 + 1;
  int v146 = (char *)operator new(v164 + 1);
  v283.__r_.__value_.__l.__size_ = v144 + v142;
  v283.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
  if (v142)
  {
LABEL_278:
    if (v141 >= 0) {
      unint64_t v147 = &qword_25BDF80;
    }
    else {
      unint64_t v147 = (uint64_t *)qword_25BDF80;
    }
    memmove(v146, v147, v142);
  }
LABEL_282:
  unint64_t v148 = &v146[v142];
  if (v144)
  {
    if (v143 >= 0) {
      int v149 = &qword_25BD230;
    }
    else {
      int v149 = (uint64_t *)qword_25BD230;
    }
    memmove(v148, v149, v144);
  }
  v148[v144] = 0;
  if (byte_25BD277 >= 0) {
    int v150 = (const std::string::value_type *)&qword_25BD260;
  }
  else {
    int v150 = (const std::string::value_type *)qword_25BD260;
  }
  if (byte_25BD277 >= 0) {
    std::string::size_type v151 = byte_25BD277;
  }
  else {
    std::string::size_type v151 = *(void *)&byte_25BD268;
  }
  int v152 = std::string::append(&v283, v150, v151);
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  if (byte_25BDA0F >= 0) {
    unint64_t v154 = (const std::string::value_type *)&qword_25BD9F8;
  }
  else {
    unint64_t v154 = (const std::string::value_type *)qword_25BD9F8;
  }
  if (byte_25BDA0F >= 0) {
    std::string::size_type v155 = byte_25BDA0F;
  }
  else {
    std::string::size_type v155 = unk_25BDA00;
  }
  long long v156 = std::string::append(&__dst, v154, v155);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  qword_25BE2D8 = v156->__r_.__value_.__r.__words[2];
  xmmword_25BE2C8 = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_25BE2F7 = 16;
  strcpy((char *)&xmmword_25BE2E0, "Use_NACS_Adapter");
  byte_25BE30F = 16;
  strcpy(byte_25BE2F8, "Start_Route_Sign");
  qword_25BE310 = (uint64_t)operator new(0x20uLL);
  unk_25BE318 = v278;
  strcpy((char *)qword_25BE310, "Start_Route_Spoken_Primary");
  int v158 = byte_25BC9A7;
  if (byte_25BC9A7 >= 0) {
    size_t v159 = byte_25BC9A7;
  }
  else {
    size_t v159 = qword_25BC998;
  }
  unint64_t v160 = v159 + 27;
  if (v159 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v160 <= 0x16)
  {
    uint64_t v161 = &qword_25BE328;
    qword_25BE330 = 0;
    unk_25BE338 = 0;
    qword_25BE328 = 0;
    byte_25BE33F = v159 + 27;
LABEL_318:
    if (v158 >= 0) {
      char v168 = &qword_25BC990;
    }
    else {
      char v168 = (uint64_t *)qword_25BC990;
    }
    memmove(v161, v168, v159);
    goto LABEL_322;
  }
  uint64_t v166 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v160 | 7) != 0x17) {
    uint64_t v166 = v160 | 7;
  }
  uint64_t v167 = v166 + 1;
  uint64_t v161 = (uint64_t *)operator new(v166 + 1);
  qword_25BE330 = v159 + 27;
  unk_25BE338 = v167 | 0x8000000000000000;
  qword_25BE328 = (uint64_t)v161;
  if (v159) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v161 + v159, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25BE357, "\t_Two_Lanes");
  strcpy((char *)&qword_25BE340, "_One_Lane");
  strcpy(&byte_25BE36F, "\n_Three_Lanes");
  byte_25BE387 = 12;
  byte_25BE39F = 11;
  strcpy((char *)&qword_25BE388, "_Four_Lanes");
  byte_25BE3B7 = 11;
  strcpy((char *)&qword_25BE3A0, "_Five_Lanes");
  strcpy(&byte_25BE3CF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25BE3B8, "_Six_Lanes");
  byte_25BE3E7 = 12;
  byte_25BE3FF = 12;
  strcpy((char *)&qword_25BE3E8, "_Eight_Lanes");
  byte_25BE417 = 12;
  strcpy((char *)&qword_25BE400, "_Second_Lane");
  byte_25BE42F = 11;
  strcpy((char *)&qword_25BE418, "_Third_Lane");
  byte_25BE447 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25BE430, "_Second_Third_Lanes");
  byte_25BE45F = 4;
  strcpy((char *)&dword_25BE448, "Left");
  byte_25BE477 = 5;
  byte_25BE464 = 116;
  dword_25BE460 = 1751607634;
  byte_25BE465 = 0;
  byte_25BE48F = 6;
  strcpy((char *)&dword_25BE478, "Middle");
  BYTE1(qword_25BE4A0) = 0;
  WORD1(qword_25BE4A0) = 0;
  HIDWORD(qword_25BE4A0) = 0x10000000;
  strcpy((char *)dword_25BE490, "Left_Second_Lane");
  BYTE1(qword_25BE4B8) = 0;
  WORD1(qword_25BE4B8) = 0;
  HIDWORD(qword_25BE4B8) = 285212672;
  strcpy((char *)&dword_25BE4A8, "Right_Second_Lan");
  qword_25BE4D0 = 0xF00000000000000;
  strcpy((char *)&dword_25BE4C0, "Left_Third_Lane");
  qword_25BE4E8 = 0x1000000000000000;
  byte_25BE4DC = 116;
  dword_25BE4D8 = 1751607634;
  dword_25BE4E4 = 1701732684;
  unk_25BE4DD = *(void *)"_Third_Lane";
  int v169 = (char *)operator new(0x19uLL);
  qword_25BE4F0 = (uint64_t)v169;
  unk_25BE4F8 = v282;
  *(_DWORD *)int v169 = 1952867660;
  strcpy(v169 + 19, "anes");
  *(_OWORD *)(v169 + 4) = v272;
  int v170 = (char *)operator new(0x20uLL);
  qword_25BE508 = (uint64_t)v170;
  xmmword_25BE510 = v281;
  *(_DWORD *)int v170 = 1751607634;
  v170[4] = 116;
  strcpy(v170 + 20, "anes");
  *(_OWORD *)(v170 + 5) = v272;
  byte_25BE537 = 5;
  strcpy((char *)&dword_25BE520, "_Stay");
  byte_25BE54F = 13;
  strcpy((char *)&qword_25BE538, "Continue_Sign");
  byte_25BE567 = 8;
  strcpy((char *)&qword_25BE550, "Continue");
  int v171 = byte_25BDA27;
  if (byte_25BDA27 >= 0) {
    size_t v172 = byte_25BDA27;
  }
  else {
    size_t v172 = qword_25BDA18;
  }
  unint64_t v173 = v172 + 8;
  if (v172 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v173 >= 0x17)
  {
    uint64_t v175 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17) {
      uint64_t v175 = v173 | 7;
    }
    uint64_t v176 = v175 + 1;
    v177 = operator new(v175 + 1);
    qword_25BE570 = v172 + 8;
    qword_25BE578 = v176 | 0x8000000000000000;
    qword_25BE568 = (uint64_t)v177;
    void *v177 = 0x65756E69746E6F43;
    uint64_t v174 = v177 + 1;
  }
  else
  {
    qword_25BE578 = 0;
    HIBYTE(qword_25BE578) = v172 + 8;
    qword_25BE568 = 0x65756E69746E6F43;
    qword_25BE570 = 0;
    uint64_t v174 = &qword_25BE570;
    if (!v172) {
      goto LABEL_336;
    }
  }
  if (v171 >= 0) {
    int v178 = &qword_25BDA10;
  }
  else {
    int v178 = (uint64_t *)qword_25BDA10;
  }
  memmove(v174, v178, v172);
LABEL_336:
  *((unsigned char *)v174 + v172) = 0;
  int v179 = SHIBYTE(qword_25BDA80);
  if (qword_25BDA80 >= 0) {
    size_t v180 = HIBYTE(qword_25BDA80);
  }
  else {
    size_t v180 = unk_25BDA78;
  }
  unint64_t v181 = v180 + 8;
  if (v180 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v181 >= 0x17)
  {
    uint64_t v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17) {
      uint64_t v183 = v181 | 7;
    }
    uint64_t v184 = v183 + 1;
    v185 = operator new(v183 + 1);
    qword_25BE588 = v180 + 8;
    qword_25BE590 = v184 | 0x8000000000000000;
    qword_25BE580 = (uint64_t)v185;
    void *v185 = qword_25BE550;
    uint64_t v182 = v185 + 1;
  }
  else
  {
    qword_25BE590 = 0;
    HIBYTE(qword_25BE590) = v180 + 8;
    qword_25BE580 = qword_25BE550;
    qword_25BE588 = 0;
    uint64_t v182 = &qword_25BE588;
    if (!v180) {
      goto LABEL_350;
    }
  }
  if (v179 >= 0) {
    v186 = &qword_25BDA70;
  }
  else {
    v186 = (uint64_t *)qword_25BDA70;
  }
  memmove(v182, v186, v180);
LABEL_350:
  *((unsigned char *)v182 + v180) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_25BE598, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_25BE5C7 = 13;
  strcpy((char *)&qword_25BE5B0, "{instruction}");
  byte_25BE5DF = 20;
  strcpy(byte_25BE5C8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25BE5E0, "{secondaryInstruction}");
  HIBYTE(word_25BE5F6) = 22;
  qword_25BE5F8 = (uint64_t)operator new(0x20uLL);
  unk_25BE600 = v280;
  strcpy((char *)qword_25BE5F8, "{andSecondaryInstruction}");
  qword_25BE610 = (uint64_t)operator new(0x20uLL);
  unk_25BE618 = v281;
  strcpy((char *)qword_25BE610, "{toSecondaryInstruction}");
  byte_25BE63F = 21;
  strcpy(byte_25BE628, "{continueInstruction}");
  qword_25BE640 = (uint64_t)operator new(0x20uLL);
  unk_25BE648 = v278;
  strcpy((char *)qword_25BE640, "{thenSecondaryInstruction}");
  byte_25BE66F = 14;
  strcpy((char *)&qword_25BE658, "{instruction1}");
  byte_25BE687 = 14;
  strcpy((char *)&qword_25BE670, "{instruction2}");
  strcpy(&byte_25BE69F, "\n{nextDistance}");
  strcpy((char *)&qword_25BE688, "{distance}");
  byte_25BE6B7 = 14;
  byte_25BE6CF = 16;
  strcpy(byte_25BE6B8, "{valid_distance}");
  strcpy(&byte_25BE6E7, "\n{valid_distance}");
  strcpy((char *)&qword_25BE6D0, "{distance}");
  byte_25BE6FF = 16;
  byte_25BE717 = 15;
  strcpy((char *)&qword_25BE700, "{ClimbDistance}");
  byte_25BE72F = 17;
  strcpy(byte_25BE718, "{DescentDistance}");
  byte_25BE747 = 13;
  strcpy((char *)&qword_25BE730, "{nonBrkSpace}");
  byte_25BE75F = 9;
  strcpy((char *)&qword_25BE748, "{newLine}");
  byte_25BE777 = 6;
  word_25BE764 = -24382;
  dword_25BE760 = -1211981630;
  byte_25BE766 = 0;
  byte_25BE78F = 2;
  word_25BE778 = -24382;
  byte_25BE77A = 0;
  byte_25BE7A7 = 1;
  word_25BE790 = 10;
  byte_25BE7BF = 1;
  word_25BE7A8 = 32;
  byte_25BE7D7 = 2;
  strcpy((char *)&word_25BE7C0, "\n\n");
  strcpy(&byte_25BE7EF, "\t{TowardShield1}");
  strcpy((char *)&qword_25BE7D8, "{Shield1}");
  byte_25BE807 = 15;
  strcpy(&byte_25BE81F, "\t{TowardShield2}");
  strcpy((char *)&qword_25BE808, "{Shield2}");
  byte_25BE837 = 15;
  byte_25BE84F = 12;
  strcpy((char *)&qword_25BE838, "{Direction1}");
  byte_25BE867 = 12;
  strcpy((char *)&qword_25BE850, "{Direction2}");
  byte_25BE87F = 18;
  strcpy(byte_25BE868, "{TowardDirection1}");
  byte_25BE897 = 18;
  strcpy((char *)&xmmword_25BE880, "{TowardDirection2}");
  byte_25BE8AF = 7;
  strcpy((char *)&dword_25BE898, "{Icon1}");
  byte_25BE8C7 = 7;
  strcpy((char *)&dword_25BE8B0, "{Icon2}");
  byte_25BE8C8[23] = 14;
  strcpy(byte_25BE8C8, "{Intersection}");
  byte_25BE8F7 = 6;
  strcpy((char *)&xmmword_25BE8E0, "{Road}");
  byte_25BE90F = 7;
  strcpy((char *)&xmmword_25BE8F8, "{Road1}");
  byte_25BE927 = 7;
  strcpy((char *)&xmmword_25BE910, "{Road2}");
  strcpy(&byte_25BE93F, "\n{Freeway}");
  strcpy((char *)&xmmword_25BE928, "{Elevator}");
  strcpy(&byte_25BE957, "\t{Ferry}");
  byte_25BE96F = 7;
  byte_25BE987 = 13;
  strcpy((char *)&xmmword_25BE970, "{ShuttleName}");
  byte_25BE99F = 11;
  strcpy((char *)&xmmword_25BE988, "{Signpost1}");
  byte_25BE9B7 = 11;
  strcpy((char *)&xmmword_25BE9A0, "{Signpost2}");
  byte_25BE9CF = 12;
  strcpy((char *)&xmmword_25BE9B8, "{ExitNumber}");
  strcpy(&byte_25BE9E7, "\t{Name}");
  strcpy((char *)&xmmword_25BE9D0, "{Address}");
  byte_25BE9FF = 6;
  byte_25BEA17 = 11;
  strcpy((char *)&xmmword_25BEA00, "{PlaceName}");
  byte_25BEA2F = 14;
  strcpy((char *)&xmmword_25BEA18, "{ElevatorName}");
  byte_25BEA47 = 15;
  strcpy((char *)&xmmword_25BEA30, "{EscalatorName}");
  byte_25BEA5F = 12;
  strcpy((char *)&xmmword_25BEA48, "{StairsName}");
  strcpy(&byte_25BEA77, "\n{BridgeName}");
  strcpy((char *)&xmmword_25BEA60, "{RampName}");
  byte_25BEA8F = 12;
  byte_25BEAA7 = 12;
  strcpy((char *)&xmmword_25BEA90, "{TunnelName}");
  byte_25BEABF = 13;
  strcpy((char *)&xmmword_25BEAA8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25BE8C8;
  *(_OWORD *)v285 = xmmword_25BE8E0;
  *(void *)&v285[16] = unk_25BE8F0;
  *(_OWORD *)v286 = xmmword_25BE8F8;
  *(void *)v287 = unk_25BE908;
  *(_OWORD *)&v287[8] = xmmword_25BE910;
  uint64_t v288 = unk_25BE920;
  *(_OWORD *)__n128 __p = xmmword_25BE928;
  uint64_t v290 = unk_25BE938;
  uint64_t v292 = unk_25BE950;
  long long v291 = xmmword_25BE940;
  long long v293 = xmmword_25BE958;
  uint64_t v294 = unk_25BE968;
  uint64_t v296 = unk_25BE980;
  long long v295 = xmmword_25BE970;
  long long v297 = xmmword_25BE988;
  uint64_t v298 = unk_25BE998;
  uint64_t v300 = unk_25BE9B0;
  long long v299 = xmmword_25BE9A0;
  long long v301 = xmmword_25BE9B8;
  long long v303 = xmmword_25BE9D0;
  uint64_t v302 = unk_25BE9C8;
  uint64_t v304 = unk_25BE9E0;
  long long v305 = xmmword_25BE9E8;
  long long v307 = xmmword_25BEA00;
  uint64_t v306 = unk_25BE9F8;
  uint64_t v308 = unk_25BEA10;
  long long v309 = xmmword_25BEA18;
  long long v311 = xmmword_25BEA30;
  uint64_t v310 = unk_25BEA28;
  uint64_t v312 = unk_25BEA40;
  long long v313 = xmmword_25BEA48;
  long long v315 = xmmword_25BEA60;
  uint64_t v314 = unk_25BEA58;
  uint64_t v316 = unk_25BEA70;
  long long v317 = xmmword_25BEA78;
  long long v319 = xmmword_25BEA90;
  uint64_t v318 = unk_25BEA88;
  uint64_t v320 = unk_25BEAA0;
  uint64_t v322 = unk_25BEAB8;
  long long v321 = xmmword_25BEAA8;
  sub_4BDC0C(qword_25BEAC0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_25BEAD8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25BEAE0 = v282;
  strcpy((char *)qword_25BEAD8, "From_User_Location_List");
  byte_25BEB07 = 20;
  strcpy(&algn_25BEAE0[16], "Origin_Waypoint_List");
  qword_25BEB08 = (uint64_t)operator new(0x20uLL);
  unk_25BEB10 = v278;
  strcpy((char *)qword_25BEB08, "Intermediate_Waypoint_List");
  unk_25BEB20 = operator new(0x20uLL);
  unk_25BEB28 = v280;
  strcpy(unk_25BEB20, "Destination_Waypoint_List");
  byte_25BEB4F = 15;
  strcpy(byte_25BEB38, "{toDestination}");
  byte_25BEB67 = 13;
  strcpy((char *)&xmmword_25BEB50, "{Destination}");
  byte_25BEB7F = 7;
  strcpy(byte_25BEB68, "To_Home");
  byte_25BEB97 = 14;
  strcpy(byte_25BEB80, "To_ContactHome");
  byte_25BEBAF = 7;
  strcpy(byte_25BEB98, "To_Work");
  byte_25BEBC7 = 14;
  strcpy(byte_25BEBB0, "To_ContactWork");
  strcpy(&byte_25BEBDF, "\nTo_Business");
  strcpy(byte_25BEBC8, "To_Address");
  byte_25BEBF7 = 11;
  byte_25BEC0F = 16;
  strcpy(byte_25BEBF8, "To_Other_Contact");
  strcpy(&byte_25BEC27, "\tTo_ContactSchool");
  strcpy(byte_25BEC10, "To_School");
  byte_25BEC3F = 16;
  byte_25BEC57 = 17;
  strcpy(byte_25BEC40, "To_PersonLocation");
  qword_25BEC58 = (uint64_t)operator new(0x20uLL);
  unk_25BEC60 = v279;
  strcpy((char *)qword_25BEC58, "To_ContactCustomLabelAddress");
  byte_25BEC87 = 7;
  strcpy((char *)&dword_25BEC70, "At_Home");
  byte_25BEC9F = 14;
  strcpy((char *)&qword_25BEC88, "At_ContactHome");
  byte_25BECB7 = 7;
  strcpy((char *)&dword_25BECA0, "At_Work");
  byte_25BECCF = 14;
  strcpy((char *)&qword_25BECB8, "At_ContactWork");
  strcpy(&byte_25BECE7, "\nAt_Business");
  strcpy((char *)&qword_25BECD0, "At_Address");
  byte_25BECFF = 11;
  byte_25BED17 = 16;
  strcpy(byte_25BED00, "At_Other_Contact");
  byte_25BED2F = 4;
  strcpy((char *)&dword_25BED18, "Home");
  byte_25BED47 = 11;
  strcpy((char *)&qword_25BED30 + 7, "Home");
  qword_25BED30 = *(void *)&v265[16];
  byte_25BED5F = 4;
  strcpy((char *)&dword_25BED48, "Work");
  byte_25BED77 = 11;
  strcpy((char *)&qword_25BED60 + 7, "Work");
  qword_25BED60 = *(void *)v265;
  byte_25BED8F = 7;
  strcpy((char *)&dword_25BED78, "Address");
  byte_25BEDA7 = 8;
  strcpy((char *)&qword_25BED90, "Business");
  byte_25BEDBF = 13;
  qword_25BEDA8 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_25BEDA8 + 5) = *(void *)&v265[32];
  byte_25BEDB5 = 0;
  byte_25BEDD7 = 6;
  strcpy((char *)&dword_25BEDC0, "School");
  byte_25BEDEF = 13;
  strcpy((char *)&qword_25BEDD8, "ContactSchool");
  byte_25BEE07 = 14;
  strcpy((char *)&qword_25BEDF0, "PersonLocation");
  qword_25BEE08 = (uint64_t)operator new(0x20uLL);
  xmmword_25BEE10 = v280;
  strcpy((char *)qword_25BEE08, "ContactCustomLabelAddress");
  if (byte_25BEB67 < 0)
  {
    sub_4200(&xmmword_25BEE20, (void *)xmmword_25BEB50, *((unint64_t *)&xmmword_25BEB50 + 1));
  }
  else
  {
    xmmword_25BEE20 = xmmword_25BEB50;
    qword_25BEE30 = unk_25BEB60;
  }
  byte_25BEE4F = 16;
  strcpy((char *)&xmmword_25BEE38, "{PrevExitNumber}");
  byte_25BEE67 = 10;
  strcpy((char *)&qword_25BEE50, "{PrevRoad}");
  qword_25BEE68 = (uint64_t)operator new(0x20uLL);
  unk_25BEE70 = v281;
  strcpy((char *)qword_25BEE68, "{RouteTotalExpectedTime}");
  byte_25BEE97 = 18;
  strcpy(byte_25BEE80, "{ChargePercentage}");
  qword_25BEE98 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BEEA0 = v275;
  strcpy((char *)qword_25BEE98, "{RemainingChargePercentage}");
  byte_25BEEC7 = 16;
  strcpy(&algn_25BEEA0[16], "{ChargeDuration}");
  byte_25BEEDF = 15;
  strcpy((char *)&qword_25BEEC8, "{ConnectorType}");
  byte_25BEEF7 = 19;
  strcpy(byte_25BEEE0, "{ChargeStationName}");
  byte_25BEF0F = 7;
  strcpy((char *)&dword_25BEEF8, "{Power}");
  byte_25BEF27 = 13;
  strcpy((char *)&qword_25BEF10, "{VehicleName}");
  byte_25BEF3F = 18;
  strcpy((char *)&xmmword_25BEF28, "{AreaIncidentName}");
  byte_25BEF57 = 14;
  strcpy((char *)&qword_25BEF40, "{AreaIncident}");
  byte_25BEF6F = 16;
  strcpy((char *)&xmmword_25BEF58, "{AffectedRegion}");
  byte_25BEF87 = 21;
  strcpy(byte_25BEF70, "{AreaIncidentWeblink}");
  byte_25BEF9F = 20;
  strcpy((char *)&xmmword_25BEF88, "{AreaIncidentAgency}");
  byte_25BEFB7 = 11;
  strcpy((char *)&qword_25BEFA0, "{IssueTime}");
  byte_25BEFCF = 12;
  strcpy((char *)&qword_25BEFB8, "{UpdateTime}");
  byte_25BEFE7 = 11;
  strcpy((char *)&qword_25BEFD0, "{IssueDate}");
  byte_25BEFFF = 12;
  strcpy((char *)&qword_25BEFE8, "{UpdateDate}");
  qword_25BF000 = (uint64_t)operator new(0x20uLL);
  unk_25BF008 = v281;
  strcpy((char *)qword_25BF000, "{AreaIncidentDataSource}");
  byte_25BF02F = 13;
  strcpy((char *)&qword_25BF018, "{AreaHectare}");
  byte_25BF047 = 10;
  strcpy((char *)&qword_25BF030, "{AreaAcre}");
  qword_25BF048 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BF050 = v277;
  strcpy((char *)qword_25BF048, "{WildfirePercentageContained}");
  qword_25BF060 = (uint64_t)operator new(0x28uLL);
  unk_25BF068 = v269[1];
  strcpy((char *)qword_25BF060, "{WildfireExpectedContainmentDate}");
  qword_25BF078 = (uint64_t)operator new(0x20uLL);
  unk_25BF080 = v279;
  strcpy((char *)qword_25BF078, "{ServerRecommendedRouteName}");
  qword_25BF090 = (uint64_t)operator new(0x20uLL);
  unk_25BF098 = v279;
  strcpy((char *)qword_25BF090, "{ServerNonRecommendedRoute1}");
  qword_25BF0A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BF0B0 = v279;
  strcpy((char *)qword_25BF0A8, "{ServerNonRecommendedRoute2}");
  byte_25BF0D7 = 12;
  strcpy((char *)&qword_25BF0C0, "{ClientDest}");
  byte_25BF0EF = 6;
  strcpy((char *)&dword_25BF0D8, "{Name}");
  qword_25BF0F0 = (uint64_t)operator new(0x20uLL);
  unk_25BF0F8 = v271;
  strcpy((char *)qword_25BF0F0, "ProactiveAlert_FasterRouteTitle");
  qword_25BF108 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BF110 = v278;
  strcpy((char *)qword_25BF108, "ProactiveAlert_RoadClosure");
  qword_25BF120 = (uint64_t)operator new(0x30uLL);
  unk_25BF128 = v273;
  strcpy((char *)qword_25BF120, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25BF138 = (uint64_t)operator new(0x28uLL);
  unk_25BF140 = v276;
  strcpy((char *)qword_25BF138, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25BF150 = (uint64_t)operator new(0x28uLL);
  unk_25BF158 = v276;
  strcpy((char *)qword_25BF150, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25BF168 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BF170 = v276;
  strcpy((char *)qword_25BF168, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25BF180 = (uint64_t)operator new(0x30uLL);
  unk_25BF188 = xmmword_20B93B0;
  strcpy((char *)qword_25BF180, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25BF1AF = 17;
  strcpy(byte_25BF198, "Proactive_Driving");
  strcpy(&byte_25BF1C7, "\n{RouteName}");
  strcpy((char *)&qword_25BF1B0, "_RouteName");
  byte_25BF1DF = 11;
  qword_25BF1E0 = (uint64_t)operator new(0x28uLL);
  unk_25BF1E8 = v269[1];
  strcpy((char *)qword_25BF1E0, "Pass_Traffic_Light_Spoken_Primary");
  qword_25BF1F8 = (uint64_t)operator new(0x20uLL);
  unk_25BF200 = v277;
  strcpy((char *)qword_25BF1F8, "Pass_Stop_Sign_Spoken_Primary");
  unk_25BF210 = operator new(0x20uLL);
  unk_25BF218 = v269[0];
  strcpy(unk_25BF210, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25BF23F, "\nBannerBody");
  strcpy(byte_25BF228, "BannerHead");
  strcpy(&byte_25BF257, "\nBannerDescription");
  byte_25BF26F = 17;
  strcpy(&byte_25BF287, "\n_Incident");
  strcpy((char *)&qword_25BF270, "VoiceAlert");
  strcpy(&byte_25BF29F, "\t_Area_Incident");
  byte_25BF2B7 = 14;
  byte_25BF2CF = 15;
  strcpy((char *)&qword_25BF2B8, "_Area_Incidents");
  strcpy(&byte_25BF2E7, "\t_Crash");
  strcpy((char *)&qword_25BF2D0, "_Accident");
  byte_25BF2FF = 6;
  byte_25BF317 = 16;
  strcpy((char *)&xmmword_25BF300, "_Congestion_Zone");
  strcpy(&byte_25BF32F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25BF318, "_Toll_Zone");
  byte_25BF347 = 19;
  BYTE1(qword_25BF358) = 116;
  WORD1(qword_25BF358) = 0;
  HIDWORD(qword_25BF358) = 301989888;
  strcpy(byte_25BF360, "_Construction");
  strcpy((char *)&qword_25BF348, "_Incident_Accide");
  byte_25BF377 = 13;
  byte_25BF38F = 7;
  strcpy((char *)&dword_25BF378, "_Hazard");
  byte_25BF3A7 = 12;
  strcpy((char *)&qword_25BF390, "_LaneClosure");
  byte_25BF3BF = 12;
  strcpy((char *)&qword_25BF3A8, "_LaneTrailer");
  qmemcpy(&byte_25BF3D7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25BF3C0, "_Shoulder");
  qword_25BF3E8 = 0x1500007200000000;
  *(void *)algn_25BF3E4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25BF3F0, "_Causing_Traffic_Delay");
  HIBYTE(word_25BF406) = 22;
  byte_25BF41F = 6;
  strcpy((char *)&dword_25BF408, "_Timed");
  byte_25BF437 = 12;
  strcpy((char *)&qword_25BF420, "_HasDistance");
  byte_25BF44F = 8;
  strcpy((char *)&qword_25BF438, "_Closure");
  strcpy(&byte_25BF467, "\n_BadRoad");
  strcpy((char *)&qword_25BF450, "_NoReroute");
  byte_25BF47F = 8;
  byte_25BF497 = 12;
  strcpy((char *)&qword_25BF480, "_TollTrailer");
  byte_25BF4AF = 12;
  strcpy((char *)&qword_25BF498, "_BestTrailer");
  byte_25BF4C7 = 8;
  strcpy((char *)&qword_25BF4B0, "_Trailer");
  byte_25BF4DF = 18;
  strcpy((char *)&xmmword_25BF4C8, "_Secondary_Trailer");
  byte_25BF4F7 = 8;
  strcpy((char *)&qword_25BF4E0, "_Savings");
  byte_25BF50F = 8;
  strcpy((char *)&qword_25BF4F8, "_AltRoad");
  byte_25BF527 = 6;
  strcpy((char *)&dword_25BF510, "_Named");
  byte_25BF53F = 6;
  strcpy((char *)&dword_25BF528, "_NAMED");
  byte_25BF557 = 22;
  strcpy((char *)&xmmword_25BF540, "_Named_Suggested_Route");
  qword_25BF570 = 0x1000000000000000;
  xmmword_25BF560 = xmmword_20E81D0;
  byte_25BF58F = 11;
  strcpy((char *)&qword_25BF578, "_Speed_Trap");
  byte_25BF5A7 = 4;
  strcpy((char *)&dword_25BF590, "_UGI");
  byte_25BF5BF = 12;
  strcpy((char *)&qword_25BF5A8, "_Safer_Route");
  qword_25BF5C0 = (uint64_t)operator new(0x20uLL);
  unk_25BF5C8 = v271;
  strcpy((char *)qword_25BF5C0, "BlockedRouteByBlockingIncident_");
  qword_25BF5D8 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25BF5E0 = xmmword_20B9280;
  strcpy((char *)qword_25BF5D8, "BlockedRouteByManeuverRestriction_");
  qword_25BF5F0 = (uint64_t)operator new(0x20uLL);
  unk_25BF5F8 = v269[0];
  strcpy((char *)qword_25BF5F0, "BlockedRouteByTimeRestriction_");
  qword_25BF608 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BF610 = xmmword_20B8FD0;
  strcpy((char *)qword_25BF608, "SuggestRouteToAvoidBlockingIncident_");
  qword_25BF620 = (uint64_t)operator new(0x30uLL);
  unk_25BF628 = xmmword_20B9380;
  strcpy((char *)qword_25BF620, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25BF638 = (uint64_t)operator new(0x30uLL);
  unk_25BF640 = xmmword_20B93E0;
  strcpy((char *)qword_25BF638, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25BF667 = 1;
  word_25BF650 = 95;
  strcpy((char *)&xmmword_25BF668, "IncidentsCausingDelay_");
  HIBYTE(word_25BF67E) = 22;
  qword_25BF680 = (uint64_t)operator new(0x19uLL);
  unk_25BF688 = v282;
  strcpy((char *)qword_25BF680, "NonVotableRoadIncident_");
  byte_25BF6AF = 20;
  strcpy(byte_25BF698, "VotableRoadIncident_");
  byte_25BF6C7 = 13;
  strcpy((char *)&qword_25BF6B0, "AreaIncident_");
  byte_25BF6DF = 15;
  strcpy((char *)&qword_25BF6C8, "CongestionZone_");
  qword_25BF6E0 = (uint64_t)operator new(0x20uLL);
  unk_25BF6E8 = v281;
  strcpy((char *)qword_25BF6E0, "EVModifiedChargingStops_");
  byte_25BF70F = 13;
  strcpy((char *)&qword_25BF6F8, "EVDisconnect_");
  byte_25BF727 = 12;
  strcpy((char *)&qword_25BF710, "EVReconnect_");
  qword_25BF728 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BF730 = v279;
  strcpy((char *)qword_25BF728, "EVOfflineToOnlineTransition_");
  byte_25BF757 = 13;
  strcpy((char *)&qword_25BF740, "EVOfflineSAR_");
  byte_25BF76F = 21;
  strcpy((char *)&xmmword_25BF758, "EVTowingNotSupported_");
  byte_25BF787 = 18;
  strcpy(algn_25BF770, "EVInfeasibleRoute_");
  qword_25BF788 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25BF790 = xmmword_20B8DF0;
  strcpy((char *)qword_25BF788, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25BF7A0 = (uint64_t)operator new(0x40uLL);
  unk_25BF7A8 = xmmword_20B98C0;
  strcpy((char *)qword_25BF7A0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25BF7B8 = (uint64_t)operator new(0x30uLL);
  unk_25BF7C0 = v274;
  strcpy((char *)qword_25BF7B8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_25BF7D0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_25BF7D8 = xmmword_20B9A80;
  strcpy((char *)qword_25BF7D0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25BF7E8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25BF7F0 = v273;
  strcpy((char *)qword_25BF7E8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v187 = operator new(0x30uLL);
  qword_25BF800 = (uint64_t)v187;
  unk_25BF808 = v274;
  _OWORD *v187 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v187[1] = v269[1];
  *(_OWORD *)((char *)v187 + 28) = v269[0];
  *((unsigned char *)v187 + 44) = 0;
  qword_25BF818 = (uint64_t)operator new(0x28uLL);
  unk_25BF820 = v272;
  strcpy((char *)qword_25BF818, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v188 = operator new(0x30uLL);
  qword_25BF830 = (uint64_t)v188;
  unk_25BF838 = *(_OWORD *)&v265[48];
  *uint64_t v188 = *(_OWORD *)&v265[32];
  v188[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v188 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v188 + 46) = 0;
  qword_25BF848 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BF850 = v276;
  strcpy((char *)qword_25BF848, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25BF860 = (uint64_t)operator new(0x28uLL);
  unk_25BF868 = v268;
  strcpy((char *)qword_25BF860, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25BF878 = (uint64_t)operator new(0x20uLL);
  unk_25BF880 = v281;
  strcpy((char *)qword_25BF878, "OfflineToOnlineNewRoute_");
  qword_25BF890 = (uint64_t)operator new(0x40uLL);
  unk_25BF898 = xmmword_20B98C0;
  strcpy((char *)qword_25BF890, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25BF8BF = 20;
  strcpy(byte_25BF8A8, "LPR_OFFLINE_REROUTE_");
  byte_25BF8D7 = 16;
  strcpy((char *)&xmmword_25BF8C0, "LPR_OFFLINE_SAR_");
  byte_25BF8EF = 20;
  strcpy(byte_25BF8D8, "LPR_OFFLINE_REROUTE_");
  byte_25BF907 = 16;
  strcpy((char *)&xmmword_25BF8F0, "LPR_OFFLINE_SAR_");
  byte_25BF91F = 19;
  strcpy(byte_25BF908, "SuggestFasterRoute_");
  qword_25BF920 = (char *)operator new(0x20uLL);
  xmmword_25BF928 = v280;
  strcpy(qword_25BF920, "AreaIncidentSaferReroute_");
  byte_25BF94F = 12;
  strcpy((char *)&qword_25BF938, "_Remove_Stop");
  byte_25BF967 = 13;
  strcpy((char *)&qword_25BF950, "_Remove_Stops");
  strcpy(&byte_25BF97F, "\t_Add_Stops");
  strcpy((char *)&qword_25BF968, "_Add_Stop");
  strcpy(&byte_25BF997, "\n_Change_Route");
  byte_25BF9AF = 13;
  byte_25BF9C7 = 15;
  strcpy((char *)&qword_25BF9B0, "_Different_Stop");
  byte_25BF9DF = 16;
  strcpy((char *)&xmmword_25BF9C8, "_Different_Stops");
  byte_25BF9F7 = 15;
  strcpy((char *)&qword_25BF9E0, "_EV_Remove_Stop");
  byte_25BFA0F = 16;
  strcpy((char *)&xmmword_25BF9F8, "_EV_Remove_Stops");
  byte_25BFA27 = 12;
  strcpy((char *)&qword_25BFA10, "_EV_Add_Stop");
  byte_25BFA3F = 13;
  strcpy((char *)&qword_25BFA28, "_EV_Add_Stops");
  byte_25BFA57 = 15;
  strcpy((char *)&qword_25BFA40, "_EV_Low_Battery");
  byte_25BFA6F = 14;
  strcpy((char *)&qword_25BFA58, "_EV_Infeasible");
  byte_25BFA87 = 15;
  strcpy((char *)&qword_25BFA70, "_EV_Last_Chance");
  qword_25BFA88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BFA90 = v281;
  strcpy((char *)qword_25BFA88, "_EV_Low_Battery_Add_Stop");
  uint64_t v189 = qword_25BF988;
  qword_25BFAA0 = (uint64_t)operator new(0x20uLL);
  unk_25BFAA8 = v280;
  strcpy((char *)qword_25BFAA0, "_EV_Low_Battery_Add_Stops");
  qword_25BFAB8 = (uint64_t)operator new(0x19uLL);
  unk_25BFAC0 = v282;
  strcpy((char *)qword_25BFAB8, "_EV_Infeasible_Add_Stop");
  int v190 = byte_25BF997;
  if (byte_25BF997 >= 0) {
    size_t v191 = byte_25BF997;
  }
  else {
    size_t v191 = v189;
  }
  unint64_t v192 = v191 + 14;
  if (v191 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v192 >= 0x17)
  {
    uint64_t v195 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v192 | 7) != 0x17) {
      uint64_t v195 = v192 | 7;
    }
    uint64_t v196 = v195 + 1;
    uint64_t v197 = (char *)operator new(v195 + 1);
    qword_25BFAD8 = v191 + 14;
    unk_25BFAE0 = v196 | 0x8000000000000000;
    qword_25BFAD0 = (uint64_t)v197;
    qmemcpy(v197, "_EV_Infeasible", 14);
    char v193 = v197 + 14;
  }
  else
  {
    BYTE1(qword_25BFAD8) = 0;
    WORD1(qword_25BFAD8) = 0;
    HIDWORD(qword_25BFAD8) = 0;
    unk_25BFAE0 = 0;
    byte_25BFAE7 = v191 + 14;
    strcpy((char *)&qword_25BFAD0, "_EV_Infe");
    char v193 = (char *)&qword_25BFAD8 + 6;
    if (!v191)
    {
      char v194 = 1;
      goto LABEL_433;
    }
  }
  if (v190 >= 0) {
    uint64_t v198 = (uint64_t)&qword_25BF980;
  }
  else {
    uint64_t v198 = 0x6F74535F6464415FLL;
  }
  memmove(v193, (const void *)v198, v191);
  char v194 = 0;
LABEL_433:
  v193[v191] = 0;
  unint64_t v199 = (char *)operator new(0x20uLL);
  qword_25BFAE8 = (uint64_t)v199;
  *(_OWORD *)algn_25BFAF0 = v281;
  *(void *)unint64_t v199 = qword_25BFA70;
  *(void *)(v199 + 7) = *(uint64_t *)((char *)&qword_25BFA70 + 7);
  *(void *)(v199 + 15) = qword_25BF968;
  v199[23] = word_25BF970;
  v199[24] = 0;
  unint64_t v200 = v191 + 15;
  if (v191 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v200 > 0x16)
  {
    uint64_t v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17) {
      uint64_t v202 = v200 | 7;
    }
    uint64_t v203 = v202 + 1;
    uint64_t v201 = (uint64_t *)operator new(v202 + 1);
    qword_25BFB08 = v191 + 15;
    unk_25BFB10 = v203 | 0x8000000000000000;
    qword_25BFB00 = (uint64_t)v201;
  }
  else
  {
    uint64_t v201 = &qword_25BFB00;
    qword_25BFB08 = 0;
    unk_25BFB10 = 0;
    qword_25BFB00 = 0;
    byte_25BFB17 = v191 + 15;
  }
  *uint64_t v201 = qword_25BFA70;
  *(uint64_t *)((char *)v201 + 7) = *(uint64_t *)((char *)&qword_25BFA70 + 7);
  v204 = (char *)v201 + 15;
  if ((v194 & 1) == 0)
  {
    if (v190 >= 0) {
      uint64_t v205 = &qword_25BF980;
    }
    else {
      uint64_t v205 = (uint64_t *)qword_25BF980;
    }
    memmove((char *)v201 + 15, v205, v191);
  }
  v204[v191] = 0;
  byte_25BFB2F = 17;
  strcpy((char *)&xmmword_25BFB18, "_EV_Forced_Detour");
  qword_25BFB30 = (uint64_t)operator new(0x20uLL);
  unk_25BFB38 = v280;
  strcpy((char *)qword_25BFB30, "_EV_Higher_Arrival_Charge");
  qword_25BFB48 = (uint64_t)operator new(0x28uLL);
  unk_25BFB50 = xmmword_20B8FD0;
  strcpy((char *)qword_25BFB48, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25BFB77 = 16;
  strcpy(byte_25BFB60, "_EV_Out_Of_Range");
  qword_25BFB78 = (uint64_t)operator new(0x20uLL);
  unk_25BFB80 = v275;
  strcpy((char *)qword_25BFB78, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25BFB90, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25BFBA6) = 22;
  qword_25BFBA8 = (uint64_t)operator new(0x19uLL);
  unk_25BFBB0 = v282;
  strcpy((char *)qword_25BFBA8, "_EV_Forced_Modify_Stops");
  byte_25BFBD7 = 19;
  strcpy(byte_25BFBC0, "_EV_Forced_Add_Stop");
  byte_25BFBEF = 20;
  strcpy((char *)&xmmword_25BFBD8, "_EV_Forced_Add_Stops");
  byte_25BFC07 = 21;
  strcpy(byte_25BFBF0, "_EV_Battery_Info_Lost");
  qword_25BFC08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BFC10 = v280;
  strcpy((char *)qword_25BFC08, "_EV_Battery_Info_Restored");
  qword_25BFC20 = (uint64_t)operator new(0x20uLL);
  unk_25BFC28 = v281;
  strcpy((char *)qword_25BFC20, "_EV_Towing_Not_Supported");
  qword_25BFC38 = (uint64_t)operator new(0x28uLL);
  unk_25BFC40 = v270;
  strcpy((char *)qword_25BFC38, "_EV_Offline_to_Online_Transition");
  byte_25BFC67 = 15;
  strcpy((char *)&qword_25BFC50, "_EV_Offline_SAR");
  qword_25BFC68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25BFC70 = v279;
  strcpy((char *)qword_25BFC68, "_Offline_to_Online_New_Route");
  byte_25BFC97 = 12;
  strcpy((char *)&qword_25BFC80, "BannerButton");
  byte_25BFCAF = 8;
  strcpy((char *)&qword_25BFC98, "_Dismiss");
  byte_25BFCC7 = 3;
  word_25BFCB0 = 20319;
  byte_25BFCB2 = 75;
  byte_25BFCB3 = 0;
  byte_25BFCDF = 11;
  strcpy((char *)&qword_25BFCC8, "_Still_Here");
  byte_25BFCF7 = 8;
  strcpy((char *)&qword_25BFCE0, "_Cleared");
  qmemcpy(&byte_25BFD0F, "\nBannerButton", 13);
  strcpy((char *)&qword_25BFCF8, "_No_Thanks");
  uint64_t v206 = qword_25BFC88;
  qword_25BFD20 = 0x1400000000000000;
  *(void *)algn_25BFD1C = 0x7373696D7369445FLL;
  qword_25BFD38 = 0xF00000000000000;
  qword_25BFD30 = 0x4B4F5F6E6F7474;
  int v207 = byte_25BFA27;
  if (byte_25BFA27 >= 0) {
    size_t v208 = byte_25BFA27;
  }
  else {
    size_t v208 = qword_25BFA18;
  }
  unint64_t v209 = v208 + 12;
  qword_25BFD28 = *(void *)"BannerButton";
  if (v208 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 >= 0x17)
  {
    uint64_t v211 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v211 = v209 | 7;
    }
    uint64_t v212 = v211 + 1;
    v213 = (char *)operator new(v211 + 1);
    qword_25BFD48 = v208 + 12;
    unk_25BFD50 = v212 | 0x8000000000000000;
    qword_25BFD40 = (uint64_t)v213;
    *((_DWORD *)v213 + 2) = 1852798068;
    *(void *)v213 = *(void *)"BannerButton";
    uint64_t v210 = v213 + 12;
  }
  else
  {
    BYTE5(qword_25BFD48) = 0;
    HIWORD(qword_25BFD48) = 0;
    unk_25BFD50 = 0;
    byte_25BFD57 = v208 + 12;
    strcpy((char *)&qword_25BFD40, "BannerButton");
    uint64_t v210 = (char *)&qword_25BFD48 + 4;
    if (!v208) {
      goto LABEL_458;
    }
  }
  if (v207 >= 0) {
    int v214 = &qword_25BFA10;
  }
  else {
    int v214 = (uint64_t *)qword_25BFA10;
  }
  memmove(v210, v214, v208);
LABEL_458:
  v210[v208] = 0;
  int v215 = byte_25BFA3F;
  if (byte_25BFA3F >= 0) {
    size_t v216 = byte_25BFA3F;
  }
  else {
    size_t v216 = unk_25BFA30;
  }
  unint64_t v217 = v216 + 12;
  if (v216 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v217 >= 0x17)
  {
    uint64_t v219 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v217 | 7) != 0x17) {
      uint64_t v219 = v217 | 7;
    }
    uint64_t v220 = v219 + 1;
    v221 = (char *)operator new(v219 + 1);
    qword_25BFD60 = v216 + 12;
    unk_25BFD68 = v220 | 0x8000000000000000;
    qword_25BFD58 = (uint64_t)v221;
    *(void *)v221 = qword_25BFC80;
    *((_DWORD *)v221 + 2) = qword_25BFC88;
    uint64_t v218 = v221 + 12;
  }
  else
  {
    qword_25BFD60 = 0;
    unk_25BFD68 = 0;
    byte_25BFD6F = v216 + 12;
    LODWORD(qword_25BFD60) = qword_25BFC88;
    qword_25BFD58 = qword_25BFC80;
    uint64_t v218 = (char *)&qword_25BFD60 + 4;
    if (!v216) {
      goto LABEL_472;
    }
  }
  if (v215 >= 0) {
    int v222 = &qword_25BFA28;
  }
  else {
    int v222 = (uint64_t *)qword_25BFA28;
  }
  memmove(v218, v222, v216);
LABEL_472:
  v218[v216] = 0;
  int v223 = byte_25BF9F7;
  if (byte_25BF9F7 >= 0) {
    size_t v224 = byte_25BF9F7;
  }
  else {
    size_t v224 = unk_25BF9E8;
  }
  unint64_t v225 = v224 + 12;
  if (v224 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 >= 0x17)
  {
    uint64_t v227 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v227 = v225 | 7;
    }
    uint64_t v228 = v227 + 1;
    v229 = (char *)operator new(v227 + 1);
    qword_25BFD78 = v224 + 12;
    unk_25BFD80 = v228 | 0x8000000000000000;
    qword_25BFD70 = (uint64_t)v229;
    *(void *)v229 = qword_25BFC80;
    *((_DWORD *)v229 + 2) = qword_25BFC88;
    uint64_t v226 = v229 + 12;
  }
  else
  {
    qword_25BFD78 = 0;
    unk_25BFD80 = 0;
    byte_25BFD87 = v224 + 12;
    LODWORD(qword_25BFD78) = qword_25BFC88;
    qword_25BFD70 = qword_25BFC80;
    uint64_t v226 = (char *)&qword_25BFD78 + 4;
    if (!v224) {
      goto LABEL_486;
    }
  }
  if (v223 >= 0) {
    int v230 = &qword_25BF9E0;
  }
  else {
    int v230 = (uint64_t *)qword_25BF9E0;
  }
  memmove(v226, v230, v224);
LABEL_486:
  v226[v224] = 0;
  int v231 = byte_25BFC97;
  if (byte_25BFC97 >= 0) {
    size_t v232 = byte_25BFC97;
  }
  else {
    size_t v232 = v206;
  }
  int v233 = byte_25BFA0F;
  if (byte_25BFA0F >= 0) {
    size_t v234 = byte_25BFA0F;
  }
  else {
    size_t v234 = *((void *)&xmmword_25BF9F8 + 1);
  }
  unint64_t v235 = v234 + v232;
  if (v234 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v235 <= 0x16)
  {
    v236 = &qword_25BFD88;
    qword_25BFD90 = 0;
    unk_25BFD98 = 0;
    qword_25BFD88 = 0;
    byte_25BFD9F = v234 + v232;
    if (!v232) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v243 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v235 | 7) != 0x17) {
    uint64_t v243 = v235 | 7;
  }
  uint64_t v244 = v243 + 1;
  v236 = (uint64_t *)operator new(v243 + 1);
  qword_25BFD90 = v234 + v232;
  unk_25BFD98 = v244 | 0x8000000000000000;
  qword_25BFD88 = (uint64_t)v236;
  if (v232)
  {
LABEL_495:
    if (v231 >= 0) {
      v237 = &qword_25BFC80;
    }
    else {
      v237 = (uint64_t *)qword_25BFC80;
    }
    memmove(v236, v237, v232);
  }
LABEL_499:
  v238 = (char *)v236 + v232;
  if (v234)
  {
    if (v233 >= 0) {
      unint64_t v239 = &xmmword_25BF9F8;
    }
    else {
      unint64_t v239 = (long long *)xmmword_25BF9F8;
    }
    memmove(v238, v239, v234);
  }
  v238[v234] = 0;
  unint64_t v240 = v232 + 11;
  if (v232 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 >= 0x17)
  {
    uint64_t v245 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v240 | 7) != 0x17) {
      uint64_t v245 = v240 | 7;
    }
    uint64_t v246 = v245 + 1;
    unint64_t v241 = (uint64_t *)operator new(v245 + 1);
    qword_25BFDA8 = v232 + 11;
    unk_25BFDB0 = v246 | 0x8000000000000000;
    qword_25BFDA0 = (uint64_t)v241;
  }
  else
  {
    unint64_t v241 = &qword_25BFDA0;
    qword_25BFDA8 = 0;
    unk_25BFDB0 = 0;
    qword_25BFDA0 = 0;
    byte_25BFDB7 = v232 + 11;
    if (!v232)
    {
      *(_DWORD *)((char *)&qword_25BFDA0 + 7) = *(_DWORD *)((char *)&qword_25BFCC8 + 7);
      qword_25BFDA0 = qword_25BFCC8;
      BYTE3(qword_25BFDA8) = 0;
      LOBYTE(v242) = 8;
      goto LABEL_520;
    }
  }
  if (v231 >= 0) {
    v247 = &qword_25BFC80;
  }
  else {
    v247 = (uint64_t *)qword_25BFC80;
  }
  memmove(v241, v247, v232);
  int v248 = (char *)v241 + v232;
  int v249 = *(_DWORD *)((char *)&qword_25BFCC8 + 7);
  *(void *)int v248 = qword_25BFCC8;
  *(_DWORD *)(v248 + 7) = v249;
  v248[11] = 0;
  unint64_t v242 = v232 + 8;
  if (v232 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v242 <= 0x16)
  {
LABEL_520:
    v250 = &qword_25BFDB8;
    qword_25BFDC0 = 0;
    unk_25BFDC8 = 0;
    qword_25BFDB8 = 0;
    byte_25BFDCF = v242;
    if (!v232) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v242 | 7) != 0x17) {
    uint64_t v263 = v242 | 7;
  }
  uint64_t v264 = v263 + 1;
  v250 = (uint64_t *)operator new(v263 + 1);
  qword_25BFDC0 = v232 + 8;
  unk_25BFDC8 = v264 | 0x8000000000000000;
  qword_25BFDB8 = (uint64_t)v250;
  if (v232)
  {
LABEL_521:
    if (v231 >= 0) {
      v251 = &qword_25BFC80;
    }
    else {
      v251 = (uint64_t *)qword_25BFC80;
    }
    memmove(v250, v251, v232);
  }
LABEL_525:
  int v252 = (char *)v250 + v232;
  *(void *)int v252 = qword_25BFCE0;
  v252[8] = 0;
  int v253 = byte_25BFD0F;
  if (byte_25BFD0F >= 0) {
    size_t v254 = byte_25BFD0F;
  }
  else {
    size_t v254 = qword_25BFD00;
  }
  unint64_t v255 = v254 + v232;
  if (v254 + v232 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v255 <= 0x16)
  {
    v256 = &qword_25BFDD0;
    qword_25BFDD8 = 0;
    unk_25BFDE0 = 0;
    qword_25BFDD0 = 0;
    byte_25BFDE7 = v254 + v232;
    if (!v232) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v255 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v255 | 7) != 0x17) {
    uint64_t v261 = v255 | 7;
  }
  uint64_t v262 = v261 + 1;
  v256 = (uint64_t *)operator new(v261 + 1);
  qword_25BFDD8 = v254 + v232;
  unk_25BFDE0 = v262 | 0x8000000000000000;
  qword_25BFDD0 = (uint64_t)v256;
  if (v232)
  {
LABEL_531:
    if (v231 >= 0) {
      v257 = &qword_25BFC80;
    }
    else {
      v257 = (uint64_t *)qword_25BFC80;
    }
    memmove(v256, v257, v232);
  }
LABEL_535:
  v258 = (char *)v256 + v232;
  if (v254)
  {
    if (v253 >= 0) {
      v259 = &qword_25BFCF8;
    }
    else {
      v259 = (uint64_t *)qword_25BFCF8;
    }
    memmove(v258, v259, v254);
  }
  v258[v254] = 0;
  strcpy(&byte_25BFDFF, "\n{newroute}");
  strcpy((char *)&qword_25BFDE8, "{roadname}");
  strcpy(&byte_25BFE17, "\n{count}");
  byte_25BFE2F = 7;
  strcpy(&byte_25BFE47, "\n{dur}");
  strcpy((char *)&qword_25BFE30, "{duration}");
  byte_25BFE5F = 5;
  qword_25BFE60 = (uint64_t)operator new(0x20uLL);
  unk_25BFE68 = v278;
  strcpy((char *)qword_25BFE60, "{PleaseProceedWithCaution}");
  byte_25BFE8F = 15;
  strcpy((char *)&qword_25BFE78, "{UserRouteName}");
  byte_25BFEA7 = 20;
  strcpy((char *)&xmmword_25BFE90, "{SuggestedRouteName}");
  byte_25BFEBF = 18;
  strcpy(byte_25BFEA8, "Speed_Camera_Ahead");
  qword_25BFEC0 = (uint64_t)operator new(0x20uLL);
  unk_25BFEC8 = v277;
  strcpy((char *)qword_25BFEC0, "Red_Light_Camera_Ahead_Spoken");
  qword_25BFED8 = (uint64_t)operator new(0x20uLL);
  unk_25BFEE0 = v277;
  strcpy((char *)qword_25BFED8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25BFEF0 = (uint64_t)operator new(0x28uLL);
  unk_25BFEF8 = v272;
  strcpy((char *)qword_25BFEF0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25BFF08 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25BFF10 = v266;
  strcpy((char *)qword_25BFF08, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25BFF20 = (uint64_t)operator new(0x20uLL);
  unk_25BFF28 = v279;
  strcpy((char *)qword_25BFF20, "Camera_Ahead_Multiple_Spoken");
  qword_25BFF38 = (uint64_t)operator new(0x30uLL);
  unk_25BFF40 = v267;
  strcpy((char *)qword_25BFF38, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25BFF50 = (char *)operator new(0x30uLL);
  strcpy(qword_25BFF50, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25BFF7F = 16;
  xmmword_25BFF58 = v267;
  strcpy(byte_25BFF68, "_Speed_Limit_Mph");
  byte_25BFF97 = 16;
  strcpy(byte_25BFF80, "_Speed_Limit_Kph");
  byte_25BFFAF = 11;
  strcpy((char *)&qword_25BFF98, "Watch_Speed");
  byte_25BFFC7 = 4;
  strcpy((char *)&dword_25BFFB0, "_One");
  byte_25BFFDF = 4;
  strcpy((char *)&dword_25BFFC8, "_Two");
  byte_25BFFF7 = 4;
  strcpy((char *)&dword_25BFFE0, "_Few");
  byte_25C000F = 5;
  strcpy((char *)&dword_25BFFF8, "_Many");
  byte_25C0027 = 6;
  strcpy((char *)&dword_25C0010, "_Other");
  byte_25C003F = 4;
  strcpy((char *)&dword_25C0028, "_ONE");
  byte_25C0057 = 7;
  strcpy((char *)&dword_25C0040, "{Speed}");
  byte_25C006F = 8;
  strcpy((char *)&qword_25C0058, "Dismount");
  byte_25C0087 = 4;
  strcpy((char *)&dword_25C0070, "Walk");
  byte_25C009F = 5;
  strcpy((char *)&dword_25C0088, "Mount");
  byte_25C00B7 = 7;
  strcpy((char *)&dword_25C00A0, "Remount");
  strcpy(&byte_25C00CF, "\t_Crosswalk");
  strcpy((char *)&qword_25C00B8, "Walk_Road");
  strcpy(&byte_25C00E7, "\n_PLURAL");
  byte_25C00FF = 7;
  strcpy(&byte_25C0117, "\n{description1}");
  strcpy((char *)&qword_25C0100, "_SECONDARY");
  byte_25C012F = 14;
  byte_25C0147 = 14;
  strcpy((char *)&qword_25C0130, "{description2}");
  byte_25C015F = 21;
  strcpy((char *)&xmmword_25C0148, "TWO_ROAD_DESCRIPTIONS");
  byte_25C0177 = 17;
  strcpy((char *)&xmmword_25C0160, "{SlopePercentage}");
  byte_25C018F = 15;
  strcpy((char *)&qword_25C0178, "_Protected_Lane");
  strcpy(&byte_25C01A7, "\n_Paved_Path");
  strcpy((char *)&qword_25C0190, "_Bike_Path");
  byte_25C01BF = 11;
  byte_25C01D7 = 15;
  strcpy((char *)&qword_25C01C0, "_Dedicated_Lane");
  byte_25C01EF = 12;
  strcpy((char *)&qword_25C01D8, "_Shared_Path");
  strcpy(&byte_25C0207, "\n_UnnamedRoad");
  strcpy((char *)&qword_25C01F0, "_Bike_Lane");
  byte_25C021F = 12;
  byte_25C0237 = 5;
  strcpy((char *)&dword_25C0220, "_Path");
  byte_25C024F = 6;
  strcpy((char *)&dword_25C0238, "_Trail");
  strcpy(&byte_25C0267, "\t_Plaza");
  strcpy((char *)&qword_25C0250, "_Sidewalk");
  byte_25C027F = 6;
  byte_25C0297 = 15;
  strcpy((char *)&qword_25C0280, "_Moving_Walkway");
  byte_25C02AF = 14;
  strcpy((char *)&qword_25C0298, "Two_Stage_Turn");
  byte_25C02C7 = 16;
  strcpy((char *)&xmmword_25C02B0, "{OptionalPeriod}");
  byte_25C02DF = 18;
  strcpy((char *)&xmmword_25C02C8, "Advisory_Separator");
  byte_25C02F7 = 6;
  strcpy((char *)&dword_25C02E0, "Period");
  byte_25C030F = 21;
  strcpy((char *)&xmmword_25C02F8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25C0310, "Advisory_Title_Notices");
  HIBYTE(word_25C0326) = 22;
  byte_25C033F = 7;
  strcpy((char *)&dword_25C0328, "_DETAIL");
  byte_25C0357 = 17;
  strcpy((char *)&xmmword_25C0340, "_LONG_REGION_LIST");
  byte_25C036F = 16;
  strcpy((char *)&xmmword_25C0358, "Advisory_Grouped");
  byte_25C0387 = 11;
  strcpy((char *)&qword_25C0370, "_Advisories");
  qword_25C0388 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C0390 = v275;
  strcpy((char *)qword_25C0388, "Advisory_WILDFIRE_METADATA_");
  byte_25C03B7 = 8;
  strcpy((char *)&qword_25C03A0, "Advisory");
  byte_25C03CF = 13;
  strcpy((char *)&qword_25C03B8, "MPR_NUM_STOPS");
  byte_25C03E7 = 17;
  strcpy(algn_25C03D0, "EV_CHARGE_STATION");
  byte_25C03FF = 11;
  strcpy((char *)&qword_25C03E8, "_NAMED_CITY");
  byte_25C0417 = 5;
  strcpy((char *)&dword_25C0400, "_Stop");
  strcpy(&byte_25C042F, "\n{StopsCount}");
  strcpy((char *)&qword_25C0418, "{CityName}");
  byte_25C0447 = 12;
  byte_25C045F = 11;
  strcpy((char *)&qword_25C0448, "_With_Other");
  byte_25C0477 = 15;
  strcpy((char *)&qword_25C0460, "{DepartureTime}");
  qword_25C0478 = (uint64_t)operator new(0x28uLL);
  unk_25C0480 = v276;
  strcpy((char *)qword_25C0478, "Ending_Charge_Station_Port_Availability");
  qword_25C0490 = (uint64_t)operator new(0x28uLL);
  unk_25C0498 = v268;
  strcpy((char *)qword_25C0490, "Ending_Charge_Station_No_Availability");
  qword_25C04A8 = (uint64_t)operator new(0x28uLL);
  unk_25C04B0 = v272;
  strcpy((char *)qword_25C04A8, "Ending_Charge_Station_No_Real_Time");
  byte_25C04D7 = 16;
  strcpy(byte_25C04C0, "{AvailablePorts}");
  byte_25C04EF = 12;
  strcpy((char *)&qword_25C04D8, "{TotalPorts}");
  byte_25C0507 = 14;
  strcpy((char *)&qword_25C04F0, "{ManeuverIcon}");
  qword_25C0508 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25C0510 = xmmword_20B9A60;
  strcpy((char *)qword_25C0508, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25C0520 = (uint64_t)operator new(0x20uLL);
  unk_25C0528 = v275;
  strcpy((char *)qword_25C0520, "Walking_Destination_Unnamed");
  qword_25C0538 = (uint64_t)operator new(0x20uLL);
  unk_25C0540 = v277;
  strcpy((char *)qword_25C0538, "TrafficDelay_Label_Title_Sign");
  qword_25C0550 = (uint64_t)operator new(0x20uLL);
  unk_25C0558 = v279;
  strcpy((char *)qword_25C0550, "Special_Guidance_Instruction");
  byte_25C057F = 2;
  strcpy((char *)&word_25C0568, "CZ");
  byte_25C0597 = 3;
  dword_25C0580 = 5919811;
  unk_25C05AF = 3;
  dword_25C0598 = 6243649;
  byte_25C05C7 = 0;
  byte_25C05DF = 7;
  strcpy((char *)&dword_25C05C8, "TRANSIT");
  byte_25C05F7 = 7;
  strcpy((char *)&dword_25C05E0, "OFFLINE");
  qword_25C05F8 = (uint64_t)operator new(0x28uLL);
  unk_25C0600 = v266;
  strcpy((char *)qword_25C05F8, "Advisory_Card_French_Climate_Law_Title");
  qword_25C0610 = (uint64_t)operator new(0x30uLL);
  unk_25C0618 = xmmword_20B93C0;
  strcpy((char *)qword_25C0610, "Advisory_Card_French_Climate_Law_Details");
  qword_25C0628 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25C0630 = v273;
  strcpy((char *)qword_25C0628, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25C0640 = (uint64_t)operator new(0x20uLL);
  unk_25C0648 = v279;
  strcpy((char *)qword_25C0640, "{ClimateLawLearnMoreWeblink}");
  byte_25C066F = 3;
  dword_25C0658 = 4280902;
  qword_25C0670 = (uint64_t)operator new(0x70uLL);
  unk_25C0678 = xmmword_20E81E0;
  strcpy((char *)qword_25C0670, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_7CEF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

double sub_7CF278()
{
  byte_25C06C7 = 1;
  word_25C06B0 = 65;
  byte_25C06DF = 1;
  word_25C06C8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25C0710 = 0u;
  *(_OWORD *)&qword_25C0720 = 0u;
  dword_25C0730 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25C0710, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25C0710, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25C0710, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25C0710, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25C06E8 = 0;
  qword_25C06F0 = 0;
  qword_25C06E0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25C06E0 = (uint64_t)v0;
  qword_25C06E8 = (uint64_t)(v0 + 9);
  qword_25C06F0 = (uint64_t)(v0 + 9);
  qword_25C06F8 = 0;
  qword_25C0700 = 0;
  unk_25C0708 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_25C0700 = (uint64_t)(v1 + 9);
  unk_25C0708 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25C06F8 = (uint64_t)v1;
  return result;
}

void sub_7CF4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25C0720) {
    sub_20AB0B8((void **)qword_25C0720);
  }
  long long v37 = (void *)xmmword_25C0710;
  *(void *)&xmmword_25C0710 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_7CF554(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, std::string *a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3750CC(a4);
  sub_62B9C4(a1 + 24, (int)a4, 3, *(unsigned __int8 *)(a6 + 1525), a5);
  sub_8C7470((void *)(a1 + 2064), a2, a4, a1 + 24, a6);
  sub_7382EC((void *)(a1 + 2096), a4);
  *(void *)(a1 + 6016) = a6;
  *(void *)(a1 + 6024) = 0;
  *(_WORD *)(a1 + 6032) = 0;
  return a1;
}

void sub_7CF5F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 1951) < 0) {
    operator delete(*(void **)(v1 + 1928));
  }
  _Unwind_Resume(exception_object);
}

void sub_7CF610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_7CF668(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_7CF668(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[134] - a2[133];
  if (v2)
  {
    unint64_t v5 = 0;
    size_t v6 = a2 + 133;
    uint64_t v7 = 0x2FC962FC962FC963 * (v2 >> 5);
    uint64_t v8 = a1 + 2096;
    do
    {
      uint64_t v11 = sub_51690C(v6, v5);
      sub_7DA4F8(v8, (uint64_t)a2, v5);
      sub_7D10FC(a1, (uint64_t)a2, v5);
      sub_7CFACC(a1, a2, v5);
      sub_7D0AFC(a1, a2, v5);
      int v12 = *(unsigned __int8 *)(a1 + 2057);
      unint64_t v13 = *(void *)(v11 + 24);
      if (v13 >= sub_46C760(a2)
        || ((unsigned int v14 = *(_DWORD *)(v11 + 160), v14 - 25 <= 0x3F)
          ? (BOOL v15 = ((1 << (v14 - 25)) & 0x9000000000000001) == 0)
          : (BOOL v15 = 1),
            v15 ? (BOOL v16 = v14 == 17) : (BOOL v16 = 1),
            v16
         || v14 - 82 < 3
         || v14 <= 0x27 && ((1 << v14) & 0x8600050000) != 0
         || (v33 = *(void *)(v11 + 24), v34 = sub_654A08((uint64_t)a2, v33, v12 != 0), v35 = v33, int v17 = v34, v34 == 9)
         && v35
         && sub_654A08((uint64_t)a2, v35 - 1, v12 != 0) == 9))
      {
        int v17 = 0;
      }
      *(_DWORD *)(v11 + 652) = v17;
      char v18 = *(unsigned char *)(a1 + 2041);
      if (v18)
      {
        int v19 = *(_DWORD *)(v11 + 160);
        char v18 = ((v19 - 25) > 0x3F || ((1 << (v19 - 25)) & 0x9000000000000001) == 0)
           && v19 != 17
           && *(unsigned char *)(v11 + 328) == 2;
      }
      *(unsigned char *)(v11 + 651) = v18;
      sub_7D990C((uint64_t *)a1, v11, a2);
      int64_t v22 = (int *)sub_51690C(v6, v5);
      unsigned int v23 = v22[40];
      if (v23 - 82 >= 3)
      {
        int v24 = v22;
        if (v23 > 0x27 || ((1 << v23) & 0x8600050000) == 0)
        {
          uint64_t v36 = v22[4];
          uint64_t v37 = v22[6];
          sub_46B058();
          BOOL v39 = v38;
          unint64_t v41 = v40 + v36;
          sub_46B058();
          char v44 = sub_7D2AF0(v39, v41, v43, v42 + v37);
          if (*((unsigned char *)v24 + 324)) {
            char v45 = 1;
          }
          else {
            char v45 = v44;
          }
          *((unsigned char *)v24 + 2226) = v45;
        }
      }
      sub_7D2D24(a1, a2, v5);
      sub_7D2FC0(a1, (uint64_t)a2, v5);
      uint64_t v26 = a2[133];
      uint64_t v27 = v26 + 2400 * v5;
      unint64_t v28 = *(void *)(v27 + 80);
      unint64_t v29 = *(void *)(v27 + 104);
      if (v28 != -1 && v29 != -1)
      {
        if (v28 <= v29) {
          unint64_t v31 = v29;
        }
        else {
          unint64_t v31 = v28;
        }
        uint64_t v32 = 0;
        if (v28 < v29)
        {
          do
            v32 += sub_46CCC8(a2, v28++, v25);
          while (v31 != v28);
        }
        uint64_t v9 = (void *)(v26 + 2400 * v5);
        uint64_t v10 = v9[14] + v32 - v9[11];
        if (v9[109] < v10) {
          uint64_t v10 = v9[109];
        }
        v9[16] = v10;
      }
      ++v5;
    }
    while (v5 != v7);
  }
}

uint64_t sub_7CF97C(uint64_t a1)
{
  return *(void *)(a1 + 6024);
}

uint64_t sub_7CF98C(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
    case 19:
    case 26:
    case 28:
    case 32:
    case 59:
    case 61:
    case 64:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_7CFACC(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = sub_51690C(a2 + 133, a3);
  int64_t v6 = *(void *)(v5 + 80);
  if (v6 == -1) {
    return;
  }
  uint64_t v7 = (int64x2_t *)v5;
  unint64_t v8 = *(void *)(v5 + 24);
  if (v8 >= sub_46C760(a2)) {
    return;
  }
  uint64_t v9 = (void *)sub_46C8EC(a2, v6);
  uint64_t v10 = (unsigned __int16 *)(*v9 - *(int *)*v9);
  if (*v10 < 0xBu)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      LODWORD(v11) = *(unsigned __int8 *)(*v9 + v11 + 1) >> 7;
    }
  }
  char v144 = v11;
  char v143 = v11;
  char v142 = v11;
  __int32 v12 = v7[10].i32[0];
  int v13 = 1;
  switch(v12)
  {
    case 1:
    case 20:
    case 27:
    case 29:
    case 33:
    case 60:
    case 62:
    case 65:
      char v141 = 1;
      __int32 v14 = v12 - 2;
      goto LABEL_9;
    case 11:
      char v141 = v11;
      int v13 = v11;
LABEL_14:
      int v15 = v11 ^ 1;
      break;
    default:
      int v13 = 0;
      char v141 = 0;
      __int32 v14 = v12 - 2;
      if ((v12 - 2) <= 0x40)
      {
LABEL_9:
        int v15 = 1;
        switch(v14)
        {
          case 0:
          case 19:
          case 26:
          case 28:
          case 32:
          case 59:
          case 61:
          case 64:
            goto LABEL_15;
          case 9:
            goto LABEL_14;
          default:
            goto LABEL_10;
        }
      }
      else
      {
LABEL_10:
        int v15 = 0;
      }
      break;
  }
LABEL_15:
  char v140 = v15;
  BOOL v139 = v12 == 4;
  unsigned int v16 = v12 - 3;
  BOOL v138 = v16 == 0;
  BOOL v17 = v16 >= 2 && v13 == 0;
  if (v17 && v15 == 0) {
    return;
  }
  *(double *)&long long v19 = (double)*(int *)(a1 + 188) / 10.0 * (*(double *)(a1 + 2032) / 3.6) * 100.0;
  if (*(double *)&v19 >= 0.0)
  {
    double v20 = (double)*(int *)(a1 + 188) / 10.0 * (*(double *)(a1 + 2032) / 3.6) * 100.0;
    if (*(double *)&v19 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v21 = (uint64_t)(*(double *)&v19 + *(double *)&v19) + 1;
  }
  else
  {
    double v20 = (double)*(int *)(a1 + 188) / 10.0 * (*(double *)(a1 + 2032) / 3.6) * 100.0;
    if (*(double *)&v19 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v21 = (uint64_t)(*(double *)&v19 + *(double *)&v19);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_30:
  if (v20 >= 9.22337204e18)
  {
    uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_41;
  }
  if (*(double *)&v19 >= 0.0)
  {
    if (*(double *)&v19 < 4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(*(double *)&v19 + *(double *)&v19) + 1;
LABEL_39:
      *(double *)&long long v19 = (double)(v22 >> 1);
    }
  }
  else if (*(double *)&v19 > -4.50359963e15)
  {
    uint64_t v22 = (uint64_t)(*(double *)&v19 + *(double *)&v19);
    if (v22 >= 1) {
      --v22;
    }
    goto LABEL_39;
  }
  uint64_t v23 = (uint64_t)*(double *)&v19;
LABEL_41:
  if (v23 >= v7[54].i64[1]) {
    uint64_t v24 = v7[54].i64[1];
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v7[3].i64[1];
  if (v25 == -1) {
    uint64_t v25 = v7[2].i64[1];
  }
  uint64_t v26 = v7[1].i64[0];
  uint64_t v137 = v7[5].i64[1];
  if ((int)v6 > (int)v25)
  {
    int v27 = 0;
    uint64_t v98 = (void *)(a1 + 24);
    uint64_t v95 = a1;
    int64_t v6 = (int)v6;
    int64_t v28 = (int)v26;
    int64_t v29 = (int)v25;
    while (1)
    {
      int64_t v31 = v6--;
      if (v31 > v28)
      {
        uint64_t v30 = sub_46CCC8(a2, v6, *(double *)&v19);
        v137 += v30;
        goto LABEL_49;
      }
      uint64_t v32 = (char **)sub_46C8EC(a2, v6);
      uint64_t v97 = sub_4D4928(a2 + 928, v6);
      sub_63ABD0(&v120, &v137);
      *(void *)&long long v135 = v6;
      if (v27 >= *(unsigned __int8 *)v98 || v137 > v24)
      {
        int v34 = 1;
        if (SHIBYTE(v134) < 0) {
          goto LABEL_56;
        }
        goto LABEL_175;
      }
      uint64_t v35 = sub_46CCC8(a2, v6, *(double *)&v19);
      v137 += v35;
      sub_68D800(*(void *)a1, (uint64_t)v32, 0, &v118);
      if (!v118)
      {
        int v34 = 4;
        uint64_t v46 = v119;
        if (!v119) {
          goto LABEL_174;
        }
        goto LABEL_173;
      }
      uint64_t v36 = *v32;
      uint64_t v37 = &(*v32)[-*(int *)*v32];
      unsigned int v38 = *(unsigned __int16 *)v37;
      int v96 = v27;
      if (v38 < 0xB || !*((_WORD *)v37 + 5) || (v36[*((unsigned __int16 *)v37 + 5) + 2] & 1) == 0) {
        break;
      }
      LOBYTE(v44) = 1;
LABEL_81:
      char v117 = v44;
      double v114 = 0;
      uint64_t v115 = 0;
      unint64_t v116 = 0;
      uint64_t v47 = *v118;
      uint64_t v48 = v118[1];
      v100[0] = (void *)a1;
      v100[1] = &v117;
      uint64_t v101 = &v141;
      uint64_t v102 = &v143;
      *(void *)&long long v103 = &v140;
      *((void *)&v103 + 1) = &v142;
      uint64_t v104 = &v139;
      uint64_t v105 = &v138;
      uint64_t v106 = &v144;
      if (v47 == v48)
      {
        int v34 = 4;
        int v27 = v96;
        uint64_t v46 = v119;
        if (!v119) {
          goto LABEL_174;
        }
        goto LABEL_173;
      }
      do
      {
        if (sub_7DB8D4((unsigned char **)v100, v47))
        {
          BOOL v50 = v115;
          if ((unint64_t)v115 >= v116)
          {
            uint64_t v49 = (char *)sub_7DBD50((uint64_t *)&v114, v47);
          }
          else
          {
            sub_594714((uint64_t)v115, v47);
            uint64_t v49 = v50 + 192;
          }
          uint64_t v115 = v49;
        }
        v47 += 192;
      }
      while (v47 != v48);
      long long v51 = v115;
      if (v114 == v115)
      {
        int v34 = 4;
        int v27 = v96;
        if (!v115) {
          goto LABEL_172;
        }
      }
      else
      {
        uint64_t v52 = v7[117].i64[1];
        int v27 = v96;
        if (v7[117].i64[0] == v52) {
          uint64_t v53 = v137;
        }
        else {
          uint64_t v53 = v137 - *(void *)(v52 - 184);
        }
        if (v53 >= sub_62CE48(v98, v7[116].i32[1]))
        {
          LOBYTE(v136) = 1;
          BYTE5(v136) = v139;
          int v54 = (void *)sub_46C8EC(a2, v7[1].i64[1]);
          unint64_t v56 = (char *)v114;
          size_t v55 = v115;
          v100[0] = (void *)a1;
          v100[1] = v54;
          uint64_t v93 = v54;
          uint64_t v101 = (char *)&v139;
          if (v114 == v115)
          {
            BYTE2(v136) = 0;
            unint64_t v67 = v94;
          }
          else
          {
            while ((sub_7DBFFC((uint64_t)v100, (uint64_t)v56) & 1) == 0)
            {
              v56 += 192;
              if (v56 == v55)
              {
                unint64_t v56 = v55;
                break;
              }
            }
            BYTE2(v136) = v56 != v115;
            if (v56 == v115)
            {
              int v27 = v96;
              unint64_t v67 = v94;
            }
            else
            {
              uint64_t v92 = v24;
              uint64_t v57 = *(void *)(a1 + 16);
              uint64_t v58 = **(void **)v56;
              uint64_t v90 = (int *)sub_2D5D58(v57, v58 & 0xFFFFFFFFFFFFLL);
              if (*(unsigned char *)(v57 + 7772)) {
                sub_2DB8E0(v57 + 3896, v58, 0);
              }
              sub_2E5C38(v57, v58 & 0xFFFFFFFFFFFFLL, 1);
              uint64_t v59 = *(void *)(a1 + 16);
              uint64_t v60 = *(void *)(*((void *)v56 + 1) - 8);
              uint64_t v91 = (int *)sub_2D5D58(v59, v60 & 0xFFFFFFFFFFFFLL);
              if (*(unsigned char *)(v59 + 7772)) {
                sub_2DB8E0(v59 + 3896, v60, 0);
              }
              sub_2E5C38(v59, v60 & 0xFFFFFFFFFFFFLL, 1);
              uint64_t v61 = v60 & 0xFFFFFFFFFFFFLL;
              uint64_t v62 = (v60 & 0xFF000000000000) != 0;
              uint64_t v24 = v92;
              uint64_t v63 = (unsigned __int16 *)((char *)v91 - *v91);
              unsigned int v64 = *v63;
              if (v64 < 0xB)
              {
                LOBYTE(v65) = 0;
                int v66 = v96;
              }
              else
              {
                uint64_t v65 = v63[5];
                int v66 = v96;
                if (v63[5]) {
                  LODWORD(v65) = (*((unsigned __int8 *)v91 + v65) >> 2) & 1;
                }
              }
              BYTE6(v136) = v65;
              if (v7[55].u8[14] | v7[55].u8[13]
                || (size_t v68 = (unsigned __int16 *)((char *)v90 - *v90), *v68 >= 0x2Fu)
                && (uint64_t v69 = v68[23]) != 0
                && (unsigned int v70 = *((unsigned __int8 *)v90 + v69), v70 < 0x1B)
                && ((0x4810001u >> v70) & 1) != 0
                || v64 >= 0x2F
                && v63[23]
                && (unsigned int v71 = *((unsigned __int8 *)v91 + v63[23]), v71 < 0x1B)
                && ((0x4810001u >> v71) & 1) != 0)
              {
                LODWORD(v73) = 1;
              }
              else
              {
                unsigned int v72 = *((_DWORD *)v56 + 6) - 11;
                if (v72 >= 0x38) {
                  LODWORD(v73) = 0;
                }
                else {
                  unint64_t v73 = (0xE00000000C0001uLL >> v72) & 1;
                }
              }
              BYTE4(v136) = v73;
              if (v64 < 0x43)
              {
                LODWORD(v74) = 0;
              }
              else
              {
                uint64_t v74 = v63[33];
                if (v74) {
                  LODWORD(v74) = *((unsigned __int8 *)v91 + v74);
                }
              }
              uint64_t v75 = (unsigned __int16 *)(*v93 - *(int *)*v93);
              if (*v75 >= 0x43u && (uint64_t v76 = v75[33]) != 0) {
                unsigned int v77 = *(unsigned __int8 *)(*v93 + v76);
              }
              else {
                unsigned int v77 = 0;
              }
              BOOL v78 = v74 >= v77;
              unsigned int v79 = v74 - v77;
              BOOL v80 = v79 == 0 || !v78 || v79 <= *(unsigned __int8 *)(a1 + 25);
              unint64_t v67 = v94 & 0xFF00000000000000 | (v62 << 48) | v61;
              BYTE1(v136) = v80;
              if (((BYTE5(v136) == 0) & ~v73) != 0)
              {
                uint64_t v81 = *(void *)(a1 + 8);
                unint64_t v99 = v94 & 0xFF00000000000000 | (v62 << 48) | v61;
                sub_832C78(v81, (unsigned int *)&v99, *(void *)(a1 + 6016) + 968, v97, (uint64_t)v100);
              }
              else
              {
                sub_6F30A4((uint64_t)v100);
              }
              if (SHIBYTE(v122) < 0) {
                operator delete((void *)v121);
              }
              long long v121 = *(_OWORD *)v100;
              uint64_t v122 = v101;
              HIBYTE(v101) = 0;
              LOBYTE(v100[0]) = 0;
              uint64_t v123 = v102;
              if (SHIBYTE(v125) < 0) {
                operator delete((void *)v124);
              }
              long long v124 = v103;
              uint64_t v125 = v104;
              HIBYTE(v104) = 0;
              LOBYTE(v103) = 0;
              uint64_t v126 = v105;
              int v127 = (int)v106;
              if (SHIBYTE(v129) < 0) {
                operator delete((void *)v128);
              }
              long long v128 = v107;
              uint64_t v129 = v108;
              HIBYTE(v108) = 0;
              LOBYTE(v107) = 0;
              if (SHIBYTE(v131) < 0) {
                operator delete((void *)v130);
              }
              long long v130 = v109;
              uint64_t v131 = v110;
              HIBYTE(v110) = 0;
              LOBYTE(v109) = 0;
              int v132 = v111;
              if (SHIBYTE(v134) < 0)
              {
                operator delete((void *)__p);
                long long __p = v112;
                uint64_t v134 = v113;
                HIBYTE(v113) = 0;
                LOBYTE(v112) = 0;
                if (SHIBYTE(v110) < 0)
                {
                  operator delete((void *)v109);
                  if ((SHIBYTE(v108) & 0x80000000) == 0) {
                    goto LABEL_156;
                  }
                }
                else if ((SHIBYTE(v108) & 0x80000000) == 0)
                {
                  goto LABEL_156;
                }
LABEL_151:
                operator delete((void *)v107);
                if (SHIBYTE(v104) < 0) {
                  goto LABEL_152;
                }
LABEL_157:
                if (SHIBYTE(v101) < 0) {
LABEL_153:
                }
                  operator delete(v100[0]);
              }
              else
              {
                long long __p = v112;
                uint64_t v134 = v113;
                HIBYTE(v113) = 0;
                LOBYTE(v112) = 0;
                if (SHIBYTE(v108) < 0) {
                  goto LABEL_151;
                }
LABEL_156:
                if ((SHIBYTE(v104) & 0x80000000) == 0) {
                  goto LABEL_157;
                }
LABEL_152:
                operator delete((void *)v103);
                if (SHIBYTE(v101) < 0) {
                  goto LABEL_153;
                }
              }
              int v27 = v66 + 1;
            }
          }
          unint64_t v82 = v7[117].u64[1];
          unint64_t v94 = v67;
          if (v82 >= v7[118].i64[0])
          {
            uint64_t v83 = sub_7DC164(v7 + 117, (uint64_t)&v120);
          }
          else
          {
            *(void *)unint64_t v82 = v120;
            sub_4AA8E0((char *)(v82 + 8), &v121);
            long long v19 = v135;
            *(void *)(v82 + 176) = v136;
            *(_OWORD *)(v82 + 160) = v19;
            uint64_t v83 = v82 + 184;
            v7[117].i64[1] = v82 + 184;
          }
          int v34 = 0;
          v7[117].i64[1] = v83;
          long long v51 = (char *)v114;
          if (!v114) {
            goto LABEL_172;
          }
          goto LABEL_163;
        }
        int v34 = 4;
        long long v51 = (char *)v114;
        if (!v114) {
          goto LABEL_172;
        }
      }
LABEL_163:
      int v84 = v27;
      uint64_t v85 = v24;
      uint64_t v86 = v115;
      int v87 = v51;
      if (v115 != v51)
      {
        do
        {
          size_t v88 = (void *)*((void *)v86 - 19);
          if (v88)
          {
            *((void *)v86 - 18) = v88;
            operator delete(v88);
          }
          unint64_t v89 = (void *)*((void *)v86 - 24);
          if (v89)
          {
            *((void *)v86 - 23) = v89;
            operator delete(v89);
          }
          v86 -= 192;
        }
        while (v86 != v51);
        int v87 = v114;
      }
      uint64_t v115 = v51;
      operator delete(v87);
      uint64_t v24 = v85;
      int v27 = v84;
LABEL_172:
      a1 = v95;
      uint64_t v46 = v119;
      if (!v119) {
        goto LABEL_174;
      }
LABEL_173:
      if (atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_174:
        if (SHIBYTE(v134) < 0) {
          goto LABEL_56;
        }
        goto LABEL_175;
      }
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (SHIBYTE(v134) < 0)
      {
LABEL_56:
        operator delete((void *)__p);
        if (SHIBYTE(v131) < 0) {
          goto LABEL_57;
        }
        goto LABEL_176;
      }
LABEL_175:
      if (SHIBYTE(v131) < 0)
      {
LABEL_57:
        operator delete((void *)v130);
        if (SHIBYTE(v129) < 0) {
          goto LABEL_58;
        }
        goto LABEL_177;
      }
LABEL_176:
      if (SHIBYTE(v129) < 0)
      {
LABEL_58:
        operator delete((void *)v128);
        if (SHIBYTE(v125) < 0) {
          goto LABEL_59;
        }
        goto LABEL_178;
      }
LABEL_177:
      if (SHIBYTE(v125) < 0)
      {
LABEL_59:
        operator delete((void *)v124);
        if (SHIBYTE(v122) < 0) {
          goto LABEL_60;
        }
        goto LABEL_179;
      }
LABEL_178:
      if (SHIBYTE(v122) < 0)
      {
LABEL_60:
        operator delete((void *)v121);
        if ((v34 | 4) != 4) {
          return;
        }
        goto LABEL_49;
      }
LABEL_179:
      if ((v34 | 4) != 4) {
        return;
      }
LABEL_49:
      if (v6 <= v29) {
        return;
      }
    }
    BOOL v39 = (int *)v32[1];
    if (v39 && (uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39), *v40 >= 0x11u) && (v41 = v40[8]) != 0)
    {
      unsigned int v42 = *(unsigned __int16 *)((char *)v39 + v41);
      if (v38 < 0xB || (v42 & 4) != 0)
      {
        int v44 = (v42 >> 2) & 1;
        goto LABEL_81;
      }
    }
    else if (v38 < 0xB)
    {
LABEL_79:
      LOBYTE(v44) = 0;
      goto LABEL_81;
    }
    uint64_t v45 = *((unsigned __int16 *)v37 + 5);
    if (v45)
    {
      int v44 = (v36[v45 + 3] >> 2) & 1;
      goto LABEL_81;
    }
    goto LABEL_79;
  }
}

void sub_7D0678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57)
{
}

BOOL sub_7D0904(unsigned __int8 *a1, int a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 2:
    case 21:
    case 28:
    case 30:
    case 34:
    case 61:
    case 63:
    case 66:
      return result;
    case 11:
      BOOL result = *a1 == 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t sub_7D0A58(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_7D0AFC(uint64_t result, void *a2, unint64_t a3)
{
  if (a2[1272] != a2[1273])
  {
    uint64_t v5 = result + 2064;
    BOOL result = sub_8C9FE0(result + 2064, a2, a3);
    if (result != -1)
    {
      unint64_t v7 = v6;
      if (v6 != -1)
      {
        unint64_t v8 = result;
        BOOL result = sub_51690C(a2 + 133, a3);
        if (v8 <= v7)
        {
          uint64_t v9 = (void *)result;
          uint64_t v10 = (int64x2_t *)(result + 1872);
          uint64_t v18 = result + 1896;
          do
          {
            uint64_t v11 = sub_7D0C8C(a2 + 1272, v8);
            BOOL result = sub_63A4A4(v11);
            if (result && !*(_DWORD *)(v11 + 4))
            {
              int v13 = (uint64_t *)(v11 + 8);
              unint64_t v12 = *(void *)(v11 + 8);
              if (v12 >= v9[5] && v12 < v9[2])
              {
                uint64_t v21 = sub_8CA270(v5, a2, a3, v11);
                char v20 = 0;
                BOOL v15 = sub_63ACE0((uint64_t)v10);
                char v16 = 0;
                if (v15) {
                  char v16 = sub_63AB44(v11, v18);
                }
                char v20 = v16;
                unint64_t v19 = v8;
                unint64_t v17 = v9[235];
                if (v17 >= v9[236])
                {
                  BOOL result = sub_7DC4C8(v10, &v21, v13, (uint64_t *)&v19, &v20);
                }
                else
                {
                  sub_63AC0C(v9[235], &v21, *v13, v8, v16);
                  BOOL result = v17 + 184;
                  v9[235] = v17 + 184;
                }
                v9[235] = result;
              }
            }
            ++v8;
          }
          while (v8 <= v7);
        }
      }
    }
  }
  return result;
}

void sub_7D0C84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_7D0C8C(void *a1, unint64_t a2)
{
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    __int32 v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 104 * a2;
}

void sub_7D0DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_7D0ECC(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    __int32 v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 160 * a2;
}

void sub_7D101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_7D10FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_51690C((void *)(a2 + 1064), a3);
  if (!*(void *)(v6 + 872)) {
    return;
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(unsigned char **)(a1 + 6016);
  if (v8[1406])
  {
    if (*(unsigned char *)(v6 + 2083)) {
      BOOL v9 = v8[1056] == 0;
    }
    else {
      BOOL v9 = 0;
    }
    int v11 = !v9 && *(unsigned char *)(v6 + 2072) != 0;
    if (v8[1444]) {
      BOOL v12 = *(unsigned char *)(a1 + 1993) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      goto LABEL_23;
    }
LABEL_17:
    if (v11 != 1) {
      return;
    }
    goto LABEL_24;
  }
  int v11 = 0;
  if (v8[1444]) {
    BOOL v13 = *(unsigned char *)(a1 + 1993) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    goto LABEL_17;
  }
LABEL_23:
  if ((v11 | (*(unsigned char *)(v6 + 2120) != 0)) != 1) {
    return;
  }
LABEL_24:
  sub_7D14A4(a1, (void *)a2, a3);
  if (*(unsigned char *)(v7 + 2082)) {
    int v14 = v11;
  }
  else {
    int v14 = 0;
  }
  if (v14 != 1) {
    goto LABEL_56;
  }
  sub_8C9774(a1 + 2064, (void *)a2, v7, (uint64_t)&v35);
  if (sub_63A4A4((uint64_t)&v35))
  {
    DWORD1(v35) = 1;
    unint64_t v15 = *(void *)(a2 + 10184);
    if (v15 >= *(void *)(a2 + 10192))
    {
      uint64_t v24 = sub_7DC95C((void **)(a2 + 10176), (uint64_t)&v35);
    }
    else
    {
      long long v16 = v36;
      *(_OWORD *)unint64_t v15 = v35;
      *(_OWORD *)(v15 + 16) = v16;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 40) = 0;
      std::string v17 = __p;
      uint64_t v18 = (uint64_t)v38;
      int64_t v19 = (char *)v38 - (unsigned char *)__p;
      if (v38 != __p)
      {
        unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v19 >> 4);
        if (v20 >= 0x1745D1745D1745ELL) {
          sub_2E00();
        }
        uint64_t v21 = (char *)operator new(v19);
        *(void *)(v15 + 32) = v21;
        *(void *)(v15 + 40) = v21;
        *(void *)(v15 + 48) = &v21[176 * v20];
        *(void *)(v15 + 40) = sub_597E4C(v15 + 48, (uint64_t)v17, v18, (uint64_t)v21);
      }
      long long v22 = v39;
      long long v23 = v40[0];
      *(_OWORD *)(v15 + 81) = *(_OWORD *)((char *)v40 + 9);
      *(_OWORD *)(v15 + 72) = v23;
      *(_OWORD *)(v15 + 56) = v22;
      uint64_t v24 = (char *)(v15 + 104);
      *(void *)(a2 + 10184) = v15 + 104;
    }
    *(void *)(a2 + 10184) = v24;
    long long v25 = v36;
    *(_OWORD *)(v7 + 1896) = v35;
    *(_OWORD *)(v7 + 1912) = v25;
    if ((long long *)(v7 + 1896) != &v35) {
      sub_5A0D34((uint64_t *)(v7 + 1928), (uint64_t)__p, (uint64_t)v38, 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (unsigned char *)__p) >> 4));
    }
    *(_OWORD *)(v7 + 1952) = v39;
    *(_OWORD *)(v7 + 1968) = v40[0];
    *(_OWORD *)(v7 + 1977) = *(_OWORD *)((char *)v40 + 9);
  }
  uint64_t v26 = (void **)__p;
  if (!__p) {
    goto LABEL_56;
  }
  int v27 = v38;
  int64_t v28 = __p;
  if (v38 != __p)
  {
    while (1)
    {
      if (*((char *)v27 - 9) < 0)
      {
        operator delete(*(v27 - 4));
        if ((*((char *)v27 - 41) & 0x80000000) == 0)
        {
LABEL_47:
          int v30 = *((_DWORD *)v27 - 20);
          if (v30 != 1) {
            goto LABEL_51;
          }
          goto LABEL_41;
        }
      }
      else if ((*((char *)v27 - 41) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(*(v27 - 8));
      int v30 = *((_DWORD *)v27 - 20);
      if (v30 != 1)
      {
LABEL_51:
        if (v30 || (*((char *)v27 - 81) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        int64_t v29 = *(v27 - 13);
        goto LABEL_43;
      }
LABEL_41:
      int64_t v29 = *(v27 - 13);
      if (v29)
      {
        *(v27 - 12) = v29;
LABEL_43:
        operator delete(v29);
      }
LABEL_44:
      v27 -= 22;
      if (v27 == v26)
      {
        int64_t v28 = __p;
        break;
      }
    }
  }
  unsigned int v38 = v26;
  operator delete(v28);
LABEL_56:
  int64_t v31 = *(long long **)(a2 + 10176);
  uint64_t v32 = *(long long **)(a2 + 10184);
  unint64_t v33 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v32 - (char *)v31) >> 3));
  if (v32 == v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_7DCC08(v31, v32, (uint64_t)&v35, v34, 1);
}

void sub_7D1454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v5 + 40) = v4;
  if (*v3)
  {
    sub_52F808(v3);
    operator delete((void *)*v3);
  }
  *(void *)(v2 + 10184) = v5;
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D1490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D14A4(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4 = (unsigned char *)sub_51690C(a2 + 133, a3);
  if (v4[328] != 5) {
    return;
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t v41 = (uint64_t *)(a1 + 2064);
  unint64_t v6 = sub_8C78A4(a1 + 2064, v4, 0);
  int v58 = v6;
  __int16 v59 = WORD2(v6);
  if ((v6 & 0xFF00) == 0 && !(BYTE2(v6) | BYTE3(v6))) {
    return;
  }
  *(unsigned char *)(a1 + 6032) |= BYTE3(v6);
  *(unsigned char *)(a1 + 6033) |= BYTE2(v6);
  LOBYTE(v49) = 1;
  DWORD1(v49) = 0;
  *((void *)&v49 + 1) = -1;
  uint64_t v50 = -1;
  uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)long long __p = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v55 = 0;
  unint64_t v56 = 0xBFF0000000000000;
  char v57 = 0;
  uint64_t v47 = 0;
  long long v48 = 0uLL;
  uint64_t v7 = sub_62CAD0((void *)(a1 + 24), *(_DWORD *)(v5 + 1860));
  unint64_t v8 = 0;
  long long v39 = (_DWORD *)(a1 + 6024);
  *(_DWORD *)&v45[8] = 0;
  uint64_t v46 = v7;
  *(void *)uint64_t v45 = (1000 * a3);
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v37 = (uint64_t *)(v5 + 16);
  if ((int)v9 >= *(_DWORD *)(v5 + 40))
  {
    uint64_t v18 = 0;
    unint64_t v8 = 0;
    int64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v38 = (int)v9;
    while (1)
    {
      BOOL v22 = sub_63A4E0((uint64_t)&v49);
      if (*((void *)&v49 + 1) == v38 && v22) {
        goto LABEL_38;
      }
      if (v38 != *(_DWORD *)v37) {
        break;
      }
      if (!sub_8C74B8((uint64_t)v41, (uint64_t)a2, v5)) {
        goto LABEL_83;
      }
      sub_8C9108(v41, a2, v37, (void *)(v5 + 80), &v58, &v43);
      if (v20)
      {
        while (1)
        {
          if (v19 == v20)
          {
            *(void *)&long long v48 = v20;
            operator delete(v20);
            break;
          }
          if (*((char *)v19 - 9) < 0)
          {
            operator delete(*(v19 - 4));
            if ((*((char *)v19 - 41) & 0x80000000) == 0)
            {
LABEL_54:
              int v25 = *((_DWORD *)v19 - 20);
              if (v25 == 1) {
                goto LABEL_47;
              }
              goto LABEL_58;
            }
          }
          else if ((*((char *)v19 - 41) & 0x80000000) == 0)
          {
            goto LABEL_54;
          }
          operator delete(*(v19 - 8));
          int v25 = *((_DWORD *)v19 - 20);
          if (v25 == 1)
          {
LABEL_47:
            uint64_t v24 = *(v19 - 13);
            if (!v24) {
              goto LABEL_50;
            }
            *(v19 - 12) = v24;
            goto LABEL_49;
          }
LABEL_58:
          if (!v25 && *((char *)v19 - 81) < 0)
          {
            uint64_t v24 = *(v19 - 13);
LABEL_49:
            operator delete(v24);
          }
LABEL_50:
          v19 -= 22;
        }
      }
      unint64_t v8 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      if (v43 == (void **)v44)
      {
LABEL_85:
        sub_8C8C94(v41, a2, a3, *v37, &v58, (uint64_t *)&v43);
        if (v8)
        {
          *(void *)&long long v48 = v8;
          operator delete(v8);
        }
        unint64_t v20 = v43;
        uint64_t v47 = (uint64_t)v43;
        long long v48 = v44;
        uint64_t v18 = (void **)v44;
        if (v43 != (void **)v44) {
          goto LABEL_88;
        }
        sub_7D1C58(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t *)&v43);
        if (v20)
        {
          *(void *)&long long v48 = v20;
          operator delete(v20);
        }
        unint64_t v20 = v43;
        uint64_t v47 = (uint64_t)v43;
        long long v48 = v44;
        uint64_t v18 = (void **)v44;
        if (v43 != (void **)v44)
        {
LABEL_88:
          DWORD1(v49) = 1;
          goto LABEL_96;
        }
        sub_7D200C(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t)&v43);
        if (!v18) {
          goto LABEL_95;
        }
        *(void *)&long long v48 = v18;
        int64_t v28 = v18;
        goto LABEL_94;
      }
      DWORD1(v49) = 2;
      int64_t v19 = (void **)v44;
      unint64_t v20 = v43;
LABEL_83:
      BOOL v30 = v20 == v19;
      unint64_t v20 = v8;
      unint64_t v8 = v19;
      if (v30) {
        goto LABEL_85;
      }
LABEL_96:
      if (v20 != v18)
      {
        uint64_t v29 = (uint64_t)v20;
        while (1)
        {
          BOOL v30 = HIDWORD(v50) == -1 && v51 == -1;
          if (v30) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = sub_63A050(v29, (unsigned int *)&v50 + 1);
          }
          *(void *)&v45[4] = v31;
          if (sub_63A780(&v49, v29, &v46, &v45[4])) {
            goto LABEL_124;
          }
          sub_8CA0C8((uint64_t)v41, a3, (uint64_t)a2, (uint64_t)&v49, v45, v39);
          BYTE3(v49) = 0;
          *(_WORD *)((char *)&v49 + 1) = 0;
          LOBYTE(v49) = 1;
          *((void *)&v49 + 1) = -1;
          uint64_t v50 = -1;
          uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
          DWORD1(v49) = 0;
          uint64_t v32 = (void **)__p[0];
          if (__p[0]) {
            break;
          }
LABEL_123:
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          *(_OWORD *)long long __p = 0u;
          unint64_t v56 = 0xBFF0000000000000;
          char v57 = 0;
LABEL_124:
          sub_63A148(&v49, v29);
          v29 += 176;
          if ((void **)v29 == v18)
          {
            unint64_t v8 = v20;
            int64_t v19 = v18;
            goto LABEL_38;
          }
        }
        unint64_t v33 = (void **)__p[1];
        uint64_t v34 = __p[0];
        if (__p[1] == __p[0])
        {
LABEL_122:
          __p[1] = v32;
          operator delete(v34);
          goto LABEL_123;
        }
        while (1)
        {
          if (*((char *)v33 - 9) < 0)
          {
            operator delete(*(v33 - 4));
            if ((*((char *)v33 - 41) & 0x80000000) == 0)
            {
LABEL_114:
              int v36 = *((_DWORD *)v33 - 20);
              if (v36 != 1) {
                goto LABEL_118;
              }
              goto LABEL_108;
            }
          }
          else if ((*((char *)v33 - 41) & 0x80000000) == 0)
          {
            goto LABEL_114;
          }
          operator delete(*(v33 - 8));
          int v36 = *((_DWORD *)v33 - 20);
          if (v36 != 1)
          {
LABEL_118:
            if (v36 || (*((char *)v33 - 81) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            long long v35 = *(v33 - 13);
            goto LABEL_110;
          }
LABEL_108:
          long long v35 = *(v33 - 13);
          if (v35)
          {
            *(v33 - 12) = v35;
LABEL_110:
            operator delete(v35);
          }
LABEL_111:
          v33 -= 22;
          if (v33 == v32)
          {
            uint64_t v34 = __p[0];
            goto LABEL_122;
          }
        }
      }
      unint64_t v8 = v18;
      int64_t v19 = v18;
      unint64_t v20 = v18;
LABEL_38:
      if (v38-- <= *(int *)(v5 + 40)) {
        goto LABEL_5;
      }
    }
    sub_7D1C58(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t *)&v43);
    if (!v20)
    {
LABEL_77:
      unint64_t v20 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      if (v43 != (void **)v44) {
        goto LABEL_96;
      }
      sub_7D200C(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t)&v43);
      if (!v20) {
        goto LABEL_95;
      }
      *(void *)&long long v48 = v20;
      int64_t v28 = v20;
LABEL_94:
      operator delete(v28);
LABEL_95:
      unint64_t v20 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      goto LABEL_96;
    }
    while (1)
    {
      if (v19 == v20)
      {
        *(void *)&long long v48 = v20;
        operator delete(v20);
        goto LABEL_77;
      }
      if (*((char *)v19 - 9) < 0)
      {
        operator delete(*(v19 - 4));
        if ((*((char *)v19 - 41) & 0x80000000) == 0)
        {
LABEL_68:
          int v26 = *((_DWORD *)v19 - 20);
          if (v26 != 1) {
            goto LABEL_69;
          }
          goto LABEL_74;
        }
      }
      else if ((*((char *)v19 - 41) & 0x80000000) == 0)
      {
        goto LABEL_68;
      }
      operator delete(*(v19 - 8));
      int v26 = *((_DWORD *)v19 - 20);
      if (v26 != 1)
      {
LABEL_69:
        if (!v26 && *((char *)v19 - 81) < 0)
        {
          int v27 = *(v19 - 13);
LABEL_63:
          operator delete(v27);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
LABEL_74:
      int v27 = *(v19 - 13);
      if (v27)
      {
        *(v19 - 12) = v27;
        goto LABEL_63;
      }
LABEL_64:
      v19 -= 22;
    }
  }
LABEL_5:
  sub_8CA0C8((uint64_t)v41, a3, (uint64_t)a2, (uint64_t)&v49, v45, v39);
  if (!v8) {
    goto LABEL_21;
  }
  for (uint64_t i = (void **)v48; i != v8; i -= 22)
  {
    if (*((char *)i - 9) < 0)
    {
      operator delete(*(i - 4));
      if ((*((char *)i - 41) & 0x80000000) == 0)
      {
LABEL_12:
        int v11 = *((_DWORD *)i - 20);
        if (v11 != 1) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
    else if ((*((char *)i - 41) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(i - 8));
    int v11 = *((_DWORD *)i - 20);
    if (v11 != 1)
    {
LABEL_13:
      if (!v11 && *((char *)i - 81) < 0)
      {
        BOOL v12 = *(i - 13);
LABEL_7:
        operator delete(v12);
        continue;
      }
      continue;
    }
LABEL_18:
    BOOL v12 = *(i - 13);
    if (v12)
    {
      *(i - 12) = v12;
      goto LABEL_7;
    }
  }
  *(void *)&long long v48 = v8;
  operator delete(v8);
LABEL_21:
  BOOL v13 = (void **)__p[0];
  if (__p[0])
  {
    int v14 = (void **)__p[1];
    unint64_t v15 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_127:
      __p[1] = v13;
      operator delete(v15);
      return;
    }
    while (2)
    {
      if (*((char *)v14 - 9) < 0)
      {
        operator delete(*(v14 - 4));
        if (*((char *)v14 - 41) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 != 1) {
          goto LABEL_29;
        }
LABEL_34:
        std::string v17 = *(v14 - 13);
        if (v17)
        {
          *(v14 - 12) = v17;
LABEL_24:
          operator delete(v17);
        }
      }
      else
      {
        if ((*((char *)v14 - 41) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(*(v14 - 8));
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 == 1) {
          goto LABEL_34;
        }
LABEL_29:
        if (!v16 && *((char *)v14 - 81) < 0)
        {
          std::string v17 = *(v14 - 13);
          goto LABEL_24;
        }
      }
      v14 -= 22;
      if (v14 == v13)
      {
        unint64_t v15 = __p[0];
        goto LABEL_127;
      }
      continue;
    }
  }
}

void sub_7D1BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_7D1C18(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    sub_52F808((uint64_t *)(a1 + 32));
    operator delete(*v2);
  }
  return a1;
}

void sub_7D1C58(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v9 = a1 + 2064;
  unint64_t v10 = sub_8C78A4(a1 + 2064, a3, 0);
  int v50 = v10;
  __int16 v51 = WORD2(v10);
  uint64_t v11 = sub_46C8EC(a2, (uint64_t)a4);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(v11 + 32);
  int v14 = (int *)sub_2D5D58(v12, v13 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v12 + 7772))
  {
    unint64_t v15 = sub_2DB8E0(v12 + 3896, v13, 0);
    int v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 < 5u)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = *((unsigned __int16 *)v16 + 2);
      if (v17) {
        v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
      }
    }
    uint64_t v18 = (int *)(v17 + 4 * WORD2(v13) + 4 + *(unsigned int *)(v17 + 4 * WORD2(v13) + 4));
  }
  else
  {
    uint64_t v18 = 0;
  }
  v46[0] = v14;
  v46[1] = v18;
  v46[2] = (int *)sub_2E5C38(v12, v13 & 0xFFFFFFFFFFFFLL, 1);
  v46[3] = v19;
  unsigned int v47 = v13;
  unsigned __int16 v48 = WORD2(v13);
  BOOL v49 = (v13 & 0xFF000000000000) != 0;
  long long __p = a4;
  sub_8C7980(v9, v46, &v50, &__p, 0, (uint64_t)v38);
  if (*a5)
  {
    sub_52F808(a5);
    operator delete((void *)*a5);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  uint64_t v20 = *(void *)v38;
  *a5 = *(void *)v38;
  uint64_t v21 = *(void *)&v38[8];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)&v38[8];
  if (v20 == v21 && *(unsigned char *)(a1 + 1998))
  {
    uint64_t v22 = *(void *)(a1 + 16);
    long long v44 = 0;
    uint64_t v45 = 0;
    long long __p = 0;
    *(void *)uint64_t v38 = &__p;
    sub_2E719C(v22, v47 | ((unint64_t)v48 << 32), 8, (uint64_t)v38);
    if (__p == v44)
    {
      if (*a5 != a5[1])
      {
LABEL_29:
        if (__p)
        {
          long long v44 = __p;
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = *(v44 - 3);
      uint64_t v25 = sub_2D5D58(v23, v24 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v23 + 7772))
      {
        int v26 = sub_2DB8E0(v23 + 3896, v24, 0);
        int v27 = &v26[-*(int *)v26];
        if (*(unsigned __int16 *)v27 < 5u)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = *((unsigned __int16 *)v27 + 2);
          if (v28) {
            v28 += (uint64_t)&v26[*(unsigned int *)&v26[v28]];
          }
        }
        uint64_t v29 = v28 + 4 * WORD2(v24) + 4 + *(unsigned int *)(v28 + 4 * WORD2(v24) + 4);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = sub_2E5C38(v23, v24 & 0xFFFFFFFFFFFFLL, 1);
      *(void *)uint64_t v38 = v25;
      *(void *)&v38[8] = v29;
      *(void *)&v38[16] = v30;
      uint64_t v39 = v31;
      int v40 = v24;
      __int16 v41 = WORD2(v24);
      BOOL v42 = (v24 & 0xFF000000000000) != 0;
      long long v35 = a4;
      sub_8C7980(v9, (int **)v38, &v50, &v35, 1, (uint64_t)&v36);
      if (*a5)
      {
        sub_52F808(a5);
        operator delete((void *)*a5);
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      uint64_t v32 = v36;
      *a5 = v36;
      uint64_t v33 = v37;
      *(_OWORD *)(a5 + 1) = v37;
      if (v32 != v33) {
        goto LABEL_29;
      }
    }
    sub_7D2520((void *)a1, a2, a3, (uint64_t)a4, (uint64_t)v38);
    if (*a5)
    {
      sub_52F808(a5);
      operator delete((void *)*a5);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    *(_OWORD *)a5 = *(_OWORD *)v38;
    a5[2] = *(void *)&v38[16];
    goto LABEL_29;
  }
}

void sub_7D1FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    sub_63A3EC(v22);
    _Unwind_Resume(a1);
  }
  sub_63A3EC(v22);
  _Unwind_Resume(a1);
}

void sub_7D200C(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 2064;
  unint64_t v10 = sub_8C78A4(a1 + 2064, a3, 1);
  int v56 = v10;
  __int16 v57 = WORD2(v10);
  if ((v10 & 0xFFFFFF00) == 0)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    return;
  }
  unint64_t v11 = sub_8C78A4(v9, a3, 0);
  int v54 = v11;
  __int16 v55 = WORD2(v11);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  uint64_t v12 = sub_46C8EC(a2, (uint64_t)a4);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v15 = sub_2D5D58(v13, v14 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v13 + 7772))
  {
    int v16 = sub_2DB8E0(v13 + 3896, v14, 0);
    uint64_t v17 = &v16[-*(int *)v16];
    if (*(unsigned __int16 *)v17 < 5u)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = *((unsigned __int16 *)v17 + 2);
      if (v18) {
        v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
      }
    }
    uint64_t v19 = v18 + 4 * WORD2(v14) + 4 + *(unsigned int *)(v18 + 4 * WORD2(v14) + 4);
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)&long long v51 = v15;
  *((void *)&v51 + 1) = v19;
  *(void *)&long long v52 = sub_2E5C38(v13, v14 & 0xFFFFFFFFFFFFLL, 1);
  *((void *)&v52 + 1) = v20;
  LODWORD(v53) = v14;
  WORD2(v53) = WORD2(v14);
  BYTE6(v53) = (v14 & 0xFF000000000000) == 0;
  long long __p = a4;
  sub_8C7980(v9, (int **)&v51, &v56, &__p, 0, (uint64_t)v42);
  if (*(void *)a5)
  {
    sub_52F808((uint64_t *)a5);
    operator delete(*(void **)a5);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  uint64_t v21 = *(void *)v42;
  *(void *)a5 = *(void *)v42;
  uint64_t v22 = *(void *)&v42[8];
  *(_OWORD *)(a5 + 8) = *(_OWORD *)&v42[8];
  if (v21 == v22 && *(unsigned char *)(a1 + 1998))
  {
    uint64_t v23 = *(void *)(a1 + 16);
    BOOL v49 = 0;
    uint64_t v50 = 0;
    long long __p = 0;
    *(void *)&long long v51 = &__p;
    sub_2E719C(v23, v14 & 0xFFFFFFFFFFFFLL, 8, (uint64_t)&v51);
    uint64_t v24 = v49;
    if (v49 == __p) {
      goto LABEL_47;
    }
    unint64_t v25 = 0;
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v49 - (unsigned char *)__p) >> 3);
    while (1)
    {
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *((void *)__p + 3 * v25);
      uint64_t v28 = sub_2D5D58(v26, v27 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v26 + 7772))
      {
        uint64_t v29 = sub_2DB8E0(v26 + 3896, v27, 0);
        uint64_t v30 = &v29[-*(int *)v29];
        if (*(unsigned __int16 *)v30 < 5u)
        {
          uint64_t v31 = 0;
        }
        else
        {
          uint64_t v31 = *((unsigned __int16 *)v30 + 2);
          if (v31) {
            v31 += (uint64_t)&v29[*(unsigned int *)&v29[v31]];
          }
        }
        uint64_t v32 = v31 + 4 * WORD2(v27) + 4 + *(unsigned int *)(v31 + 4 * WORD2(v27) + 4);
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = sub_2E5C38(v26, v27 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v34 = 0;
      *(void *)&long long v51 = v28;
      *((void *)&v51 + 1) = v32;
      *(void *)&long long v52 = v33;
      *((void *)&v52 + 1) = v35;
      LODWORD(v53) = v27;
      WORD2(v53) = WORD2(v27);
      BYTE6(v53) = (v27 & 0xFF000000000000) != 0;
      uint64_t v46 = 0;
      long long v47 = 0uLL;
      if (v25 >= -1 - 0x5555555555555555 * (((unsigned char *)v49 - (unsigned char *)__p) >> 3)
        || (long long v44 = a4,
            sub_8C7980(v9, (int **)&v51, &v54, &v44, 1, (uint64_t)v42),
            uint64_t v36 = *(unsigned char **)v42,
            uint64_t v46 = *(unsigned char **)v42,
            long long v47 = *(_OWORD *)&v42[8],
            uint64_t v34 = *(char **)&v42[8],
            *(void *)v42 == *(void *)&v42[8]))
      {
        uint64_t v43 = v53;
        *(_OWORD *)BOOL v42 = v51;
        *(_OWORD *)&v42[16] = v52;
        BYTE6(v43) = BYTE6(v53) ^ 1;
        __int16 v41 = a4;
        sub_8C7980(v9, (int **)v42, &v56, &v41, 1, (uint64_t)&v44);
        if (v34)
        {
          *(void *)&long long v47 = v34;
          operator delete(v34);
        }
        uint64_t v36 = v44;
        uint64_t v46 = v44;
        long long v47 = v45;
        uint64_t v34 = (char *)v45;
      }
      sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v36, (uint64_t)v34, 0x2E8BA2E8BA2E8BA3 * ((v34 - v36) >> 4));
      if (v36) {
        break;
      }
LABEL_18:
      if (++v25 == v39)
      {
        uint64_t v24 = __p;
LABEL_47:
        if (v24)
        {
          BOOL v49 = v24;
          operator delete(v24);
        }
        return;
      }
    }
    while (1)
    {
      if (v34 == v36)
      {
        operator delete(v36);
        goto LABEL_18;
      }
      if (*(v34 - 9) < 0)
      {
        operator delete(*((void **)v34 - 4));
        if ((*(v34 - 41) & 0x80000000) == 0)
        {
LABEL_38:
          int v37 = *((_DWORD *)v34 - 20);
          if (v37 != 1) {
            goto LABEL_39;
          }
          goto LABEL_44;
        }
      }
      else if ((*(v34 - 41) & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(*((void **)v34 - 8));
      int v37 = *((_DWORD *)v34 - 20);
      if (v37 != 1)
      {
LABEL_39:
        if (!v37 && *(v34 - 81) < 0)
        {
          uint64_t v38 = (void *)*((void *)v34 - 13);
LABEL_33:
          operator delete(v38);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
LABEL_44:
      uint64_t v38 = (void *)*((void *)v34 - 13);
      if (v38)
      {
        *((void *)v34 - 12) = v38;
        goto LABEL_33;
      }
LABEL_34:
      v34 -= 176;
    }
  }
}

void sub_7D24A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_63A3EC(v25);
  _Unwind_Resume(a1);
}

void sub_7D2520(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(sub_46C8EC(a2, a4) + 32);
  uint64_t v10 = a1[2];
  uint64_t v11 = sub_2D5D58(v10, v9 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v10 + 7772))
  {
    uint64_t v12 = sub_2DB8E0(v10 + 3896, v9, 0);
    uint64_t v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = v14 + 4 * WORD2(v9) + 4 + *(unsigned int *)(v14 + 4 * WORD2(v9) + 4);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v69[0] = v11;
  v69[1] = v15;
  v69[2] = sub_2E5C38(v10, v9 & 0xFFFFFFFFFFFFLL, 1);
  v69[3] = v16;
  unsigned int v70 = v9;
  unsigned __int16 v71 = WORD2(v9);
  BOOL v72 = (v9 & 0xFF000000000000) != 0;
  int v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  sub_2E44A4(a1[2], (uint64_t)v69, &v66);
  uint64_t v17 = v66;
  if (v66 == (char *)v67)
  {
LABEL_24:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (!v17) {
      return;
    }
    goto LABEL_25;
  }
  uint64_t v18 = v66;
  while (1)
  {
    uint64_t v19 = (unsigned __int16 *)(*(void *)v18 - **(int **)v18);
    if (*v19 >= 0x2Fu)
    {
      uint64_t v20 = v19[23];
      if (v20)
      {
        if (*(unsigned char *)(*(void *)v18 + v20) == 14) {
          break;
        }
      }
    }
    v18 += 40;
    if (v18 == (char *)v67) {
      goto LABEL_24;
    }
  }
  uint64_t v21 = a1[2];
  unsigned int v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  *(void *)&long long v60 = &v63;
  sub_2E719C(v21, v70 | ((unint64_t)v71 << 32), 8, (uint64_t)&v60);
  uint64_t v22 = (char *)v63;
  if (v63 == v64)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (v22)
    {
LABEL_73:
      unsigned int v64 = v22;
      operator delete(v22);
    }
  }
  else
  {
    uint64_t v23 = v64 - 24;
    if ((v9 & 0xFF000000000000) != 0) {
      uint64_t v23 = (char *)v63;
    }
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = a1[2];
    uint64_t v26 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
    sub_2D5D58(v25, v26);
    if (*(unsigned char *)(v25 + 7772)) {
      sub_2DB8E0(v25 + 3896, v24, 0);
    }
    sub_2E5C38(v25, v26, 1);
    sub_2E3BB0(a1[2], (uint64_t)v69, v26, (uint64_t)&v60);
    if (v62 && (void)v60 && *((void *)&v60 + 1))
    {
      unint64_t v27 = sub_8C78A4((uint64_t)(a1 + 258), a3, 0);
      int v58 = v27;
      __int16 v59 = WORD2(v27);
      unint64_t v28 = sub_8C78A4((uint64_t)(a1 + 258), a3, 1);
      int v56 = v28;
      __int16 v57 = WORD2(v28);
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      if ((a1[251] & 0x8000000000000000) == 0)
      {
        uint64_t v29 = 0;
        while (1)
        {
          uint64_t v67 = (uint64_t)v66;
          sub_2E44A4(a1[2], (uint64_t)&v60, &v66);
          uint64_t v31 = sub_6D7AFC(*a1 + 1160, (int **)&v60, (uint64_t *)&v66, -1);
          if (v31 == -1) {
            goto LABEL_72;
          }
          uint64_t v32 = &v66[40 * v31];
          uint64_t v33 = *((void *)v32 + 4);
          long long v34 = *((_OWORD *)v32 + 1);
          long long v60 = *(_OWORD *)v32;
          long long v61 = v34;
          uint64_t v62 = v33;
          *(void *)&v50[0] = a4;
          sub_8C7980((uint64_t)(a1 + 258), (int **)&v60, &v58, v50, 1, (uint64_t)&__p);
          uint64_t v35 = __p;
          uint64_t v36 = v55;
          if (__p == (void *)v55) {
            break;
          }
LABEL_50:
          sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v35, v36, 0x2E8BA2E8BA2E8BA3 * ((v36 - (uint64_t)v35) >> 4));
          BOOL v42 = (unsigned __int16 *)(v60 - *(int *)v60);
          if (*v42 >= 9u && (uint64_t v43 = v42[4]) != 0)
          {
            uint64_t v44 = *(unsigned int *)(v60 + v43);
            long long v45 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v44 = 0;
            long long v45 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          uint64_t v46 = (void **)v55;
          uint64_t v30 = v45;
          if ((void **)v55 != v45)
          {
            while (1)
            {
              if (*((char *)v46 - 9) < 0)
              {
                operator delete(*(v46 - 4));
                if ((*((char *)v46 - 41) & 0x80000000) == 0)
                {
LABEL_61:
                  int v47 = *((_DWORD *)v46 - 20);
                  if (v47 != 1) {
                    goto LABEL_62;
                  }
                  goto LABEL_67;
                }
              }
              else if ((*((char *)v46 - 41) & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(*(v46 - 8));
              int v47 = *((_DWORD *)v46 - 20);
              if (v47 != 1)
              {
LABEL_62:
                if (v47 || (*((char *)v46 - 81) & 0x80000000) == 0) {
                  goto LABEL_58;
                }
                unsigned __int16 v48 = *(v46 - 13);
                goto LABEL_57;
              }
LABEL_67:
              unsigned __int16 v48 = *(v46 - 13);
              if (!v48) {
                goto LABEL_58;
              }
              *(v46 - 12) = v48;
LABEL_57:
              operator delete(v48);
LABEL_58:
              v46 -= 22;
              if (v46 == v45)
              {
                uint64_t v30 = __p;
                break;
              }
            }
          }
          *(void *)&long long v55 = v45;
          operator delete(v30);
LABEL_29:
          v29 += v44;
          if (v29 > a1[251]) {
            goto LABEL_72;
          }
        }
        uint64_t v51 = v62;
        v50[0] = v60;
        v50[1] = v61;
        BYTE6(v51) = BYTE6(v62) ^ 1;
        uint64_t v49 = a4;
        sub_8C7980((uint64_t)(a1 + 258), (int **)v50, &v56, &v49, 1, (uint64_t)&v52);
        int v37 = (void **)__p;
        if (!__p)
        {
LABEL_49:
          uint64_t v35 = v52;
          long long __p = v52;
          long long v55 = v53;
          uint64_t v36 = v53;
          goto LABEL_50;
        }
        uint64_t v38 = (void **)v55;
        unint64_t v39 = __p;
        if ((void *)v55 == __p)
        {
LABEL_48:
          *(void *)&long long v55 = v37;
          operator delete(v39);
          goto LABEL_49;
        }
        while (1)
        {
          if (*((char *)v38 - 9) < 0)
          {
            operator delete(*(v38 - 4));
            if ((*((char *)v38 - 41) & 0x80000000) == 0)
            {
LABEL_39:
              int v40 = *((_DWORD *)v38 - 20);
              if (v40 != 1) {
                goto LABEL_40;
              }
              goto LABEL_45;
            }
          }
          else if ((*((char *)v38 - 41) & 0x80000000) == 0)
          {
            goto LABEL_39;
          }
          operator delete(*(v38 - 8));
          int v40 = *((_DWORD *)v38 - 20);
          if (v40 != 1)
          {
LABEL_40:
            if (v40 || (*((char *)v38 - 81) & 0x80000000) == 0) {
              goto LABEL_36;
            }
            __int16 v41 = *(v38 - 13);
            goto LABEL_35;
          }
LABEL_45:
          __int16 v41 = *(v38 - 13);
          if (!v41) {
            goto LABEL_36;
          }
          *(v38 - 12) = v41;
LABEL_35:
          operator delete(v41);
LABEL_36:
          v38 -= 22;
          if (v38 == v37)
          {
            unint64_t v39 = __p;
            goto LABEL_48;
          }
        }
      }
    }
    else
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
    }
LABEL_72:
    uint64_t v22 = (char *)v63;
    if (v63) {
      goto LABEL_73;
    }
  }
  uint64_t v17 = v66;
  if (!v66) {
    return;
  }
LABEL_25:
  uint64_t v67 = (uint64_t)v17;
  operator delete(v17);
}

void sub_7D2A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 - 152) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_7D2AE0()
{
  if (*(void *)(v0 - 160)) {
    JUMPOUT(0x7D2AD0);
  }
  JUMPOUT(0x7D2AB8);
}

uint64_t sub_7D2AF0(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_46C760(a1);
        unint64_t v9 = sub_46C760(a3);
        if (v6 >= v8 || a4 >= v9)
        {
          if (v6 < v8 == a4 < v9) {
            return 0;
          }
        }
        else
        {
          uint64_t v10 = sub_46C8EC(a1, v6);
          if (v10 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v11 = (int **)sub_46C8EC(a1, v6);
        uint64_t v12 = (char *)*v11;
        uint64_t v13 = (unsigned __int16 *)((char *)*v11 - **v11);
        unsigned int v14 = *v13;
        if (*((unsigned char *)v11 + 38))
        {
          if (v14 >= 0xB)
          {
            unsigned int v15 = v13[5];
            if (v15)
            {
              if ((*(_DWORD *)&v12[v15] & 0x40) != 0) {
                return 1;
              }
            }
          }
        }
        else if (v14 >= 0xB)
        {
          unsigned int v16 = v13[5];
          if (v16)
          {
            if ((*(_DWORD *)&v12[v16] & 0x80) != 0) {
              return 1;
            }
          }
        }
        ++v6;
      }
    }
    if (a2 >= sub_46C760(a1)) {
      return 0;
    }
    while (1)
    {
      uint64_t v18 = (int **)sub_46C8EC(a1, v6);
      uint64_t v19 = (unsigned __int16 *)((char *)*v18 - **v18);
      unsigned int v20 = *v19;
      if (*((unsigned char *)v18 + 38))
      {
        if (v20 >= 0xB)
        {
          unsigned int v21 = v19[5];
          if (v21)
          {
            int v22 = 64;
            goto LABEL_20;
          }
        }
      }
      else if (v20 >= 0xB)
      {
        unsigned int v21 = v19[5];
        if (v21)
        {
          int v22 = 128;
LABEL_20:
          if ((*(int *)((char *)*v18 + v21) & v22) != 0) {
            return 1;
          }
        }
      }
      if (++v6 >= sub_46C760(a1)) {
        return 0;
      }
    }
  }
  if (a3 && a4 < sub_46C760(a3))
  {
    do
    {
      uint64_t v23 = (int **)sub_46C8EC(0, v6);
      uint64_t v24 = (unsigned __int16 *)((char *)*v23 - **v23);
      unsigned int v25 = *v24;
      if (*((unsigned char *)v23 + 38))
      {
        if (v25 < 0xB) {
          goto LABEL_33;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          goto LABEL_33;
        }
        int v27 = 64;
      }
      else
      {
        if (v25 < 0xB) {
          goto LABEL_33;
        }
        unsigned int v26 = v24[5];
        if (!v26) {
          goto LABEL_33;
        }
        int v27 = 128;
      }
      if ((*(int *)((char *)*v23 + v26) & v27) != 0) {
        return 1;
      }
LABEL_33:
      ++v6;
    }
    while (a4 < sub_46C760(a3));
  }
  return 0;
}

uint64_t sub_7D2D24(uint64_t result, void *a2, unint64_t a3)
{
  if (*(unsigned char *)(result + 2054))
  {
    BOOL result = sub_51690C(a2 + 133, a3);
    unsigned int v4 = *(_DWORD *)(result + 160);
    if ((v4 > 0x19 || ((1 << v4) & 0x2020080) == 0) && v4 != 85 && v4 != 88)
    {
      unint64_t v6 = (int64x2_t *)result;
      uint64_t v36 = 0;
      unint64_t v7 = *(void *)(result + 16);
      if (v7 > *(void *)(result + 40))
      {
        char v8 = 0;
        do
        {
          unint64_t v9 = (int **)sub_46C8EC(a2, v7);
          uint64_t v11 = (char *)*v9;
          uint64_t v12 = (unsigned __int16 *)((char *)*v9 - **v9);
          unsigned int v13 = *v12;
          if (*((unsigned char *)v9 + 38))
          {
            if (v13 < 0xB) {
              goto LABEL_23;
            }
            unsigned int v14 = v12[5];
            if (!v14 || (*(_DWORD *)&v11[v14] & 0x80) == 0) {
              goto LABEL_23;
            }
          }
          else if (v13 < 0xB || (unsigned int v15 = v12[5]) == 0 || (*(_DWORD *)&v11[v15] & 0x40) == 0)
          {
LABEL_23:
            uint64_t v19 = (void *)sub_46C8EC(a2, v7);
            unsigned int v20 = (unsigned __int16 *)(*v19 - *(int *)*v19);
            if (*v20 >= 0x2Fu)
            {
              uint64_t v21 = v20[23];
              if (v21)
              {
                unsigned int v22 = *(unsigned __int8 *)(*v19 + v21);
                BOOL v23 = v22 > 0x36;
                uint64_t v24 = (1 << v22) & 0x44000000000008;
                BOOL v25 = v23 || v24 == 0;
                if (!v25 && (v8 & 1) == 0)
                {
                  char v8 = 1;
                  goto LABEL_12;
                }
              }
            }
            unsigned int v26 = (void *)sub_46C8EC(a2, v7);
            int v27 = (unsigned __int16 *)(*v26 - *(int *)*v26);
            if (*v27 >= 0x2Fu)
            {
              uint64_t v28 = v27[23];
              if (v28)
              {
                unsigned int v29 = *(unsigned __int8 *)(*v26 + v28);
                BOOL v23 = v29 > 0x36;
                uint64_t v30 = (1 << v29) & 0x44000000000008;
                if (!v23 && v30 != 0) {
                  goto LABEL_12;
                }
              }
            }
            if (v8)
            {
              LOBYTE(v35) = 1;
              unint64_t v32 = v6[117].u64[1];
              if (v32 >= v6[118].i64[0])
              {
                uint64_t v33 = sub_7DFE08(v6 + 117, &v36, (char *)&v35);
              }
              else
              {
                sub_63AC64(v6[117].i64[1], &v36, 1);
                uint64_t v33 = v32 + 184;
                v6[117].i64[1] = v32 + 184;
              }
              char v8 = 0;
              goto LABEL_43;
            }
            char v8 = 0;
            goto LABEL_12;
          }
          uint64_t v16 = sub_46CCC8(a2, v7, v10);
          uint64_t v35 = v36 + v16;
          char v34 = 1;
          unint64_t v17 = v6[117].u64[1];
          if (v17 >= v6[118].i64[0])
          {
            uint64_t v33 = sub_7DFBBC(v6 + 117, &v35, &v34);
LABEL_43:
            v6[117].i64[1] = v33;
            goto LABEL_12;
          }
          sub_63AC64(v6[117].i64[1], &v35, 1);
          v6[117].i64[1] = v17 + 184;
          v6[117].i64[1] = v17 + 184;
LABEL_12:
          BOOL result = sub_46CCC8(a2, v7, v18);
          v36 += result;
          --v7;
        }
        while (v7 > v6[2].i64[1]);
      }
    }
  }
  return result;
}

void sub_7D2FB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D2FB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D2FC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = sub_51690C((void *)(a2 + 1064), a3);
  uint64_t v5 = *(uint64_t **)(v3 + 1872);
  unint64_t v6 = *(int64_t **)(v3 + 1880);
  if ((char *)v6 - (char *)v5 < 1)
  {
LABEL_5:
    double v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0xD37A6F4DE9BD37A7 * (v6 - v5);
    while (1)
    {
      char v8 = operator new(184 * v7, &std::nothrow);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    double v10 = v8;
  }
  sub_7E0054(v5, v6, (uint64_t)&v11, 0xD37A6F4DE9BD37A7 * (v6 - v5), (uint64_t)v10, v7, v4);
  if (v10) {
    operator delete(v10);
  }
}

void sub_7D309C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7D30B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, std::string *a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3750CC(a4);
  sub_62B9C4(a1 + 24, (int)a4, 0, *(unsigned __int8 *)(a6 + 1525), a5);
  sub_8C7470((void *)(a1 + 2064), a2, a4, a1 + 24, a6);
  sub_73ACFC((void *)(a1 + 2096), a4);
  *(void *)(a1 + 6016) = a6;
  *(void *)(a1 + 6024) = 0;
  *(_WORD *)(a1 + 6032) = 0;
  return a1;
}

void sub_7D3154(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 1951) < 0) {
    operator delete(*(void **)(v1 + 1928));
  }
  _Unwind_Resume(exception_object);
}

void sub_7D3170(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  __n128 v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_7D31C8(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_7D31C8(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2[134] - a2[133];
  if (v2)
  {
    unint64_t v5 = 0;
    uint64_t v33 = a2 + 133;
    uint64_t v6 = 0x2FC962FC962FC963 * (v2 >> 5);
    uint64_t v7 = (uint64_t)(a1 + 262);
    do
    {
      sub_7D97BC((uint64_t)a1, (uint64_t)a2, v5);
      sub_7DA2B8(v7, (uint64_t)a2, v5);
      if (*(_DWORD *)(a2[133] + 2400 * v5 + 160) != 90)
      {
        sub_7D53E4((uint64_t)a1, (uint64_t)a2, v5);
        sub_7D6D98((uint64_t)a1, a2, v5);
        sub_7D3A50((uint64_t)a1, a2, v5);
        sub_7D49E8((uint64_t)a1, a2, v5);
        BOOL v9 = (int *)sub_51690C(v33, v5);
        unsigned int v10 = v9[40];
        if (v10 - 82 >= 3)
        {
          char v11 = v9;
          if (v10 > 0x27 || ((1 << v10) & 0x8600050000) == 0)
          {
            uint64_t v23 = v9[4];
            uint64_t v32 = v9[6];
            sub_46B058();
            BOOL v25 = v24;
            unint64_t v27 = v26 + v23;
            sub_46B058();
            char v30 = sub_7D2AF0(v25, v27, v29, v28 + v32);
            if (*((unsigned char *)v11 + 324)) {
              char v31 = 1;
            }
            else {
              char v31 = v30;
            }
            *((unsigned char *)v11 + 2226) = v31;
          }
        }
        sub_7D6E98((uint64_t)a1, a2, v5);
        sub_7D7134((uint64_t)a1, (uint64_t)a2, v5);
        uint64_t v13 = a2[133];
        uint64_t v14 = v13 + 2400 * v5;
        unint64_t v15 = *(void *)(v14 + 80);
        unint64_t v16 = *(void *)(v14 + 104);
        if (v15 != -1 && v16 != -1)
        {
          if (v15 <= v16) {
            unint64_t v18 = v16;
          }
          else {
            unint64_t v18 = v15;
          }
          uint64_t v19 = 0;
          if (v15 < v16)
          {
            do
              v19 += sub_46CCC8(a2, v15++, v12);
            while (v18 != v15);
          }
          unsigned int v20 = (void *)(v13 + 2400 * v5);
          uint64_t v21 = v20[14] + v19 - v20[11];
          if (v20[109] < v21) {
            uint64_t v21 = v20[109];
          }
          v20[16] = v21;
        }
        sub_7D3444(a1, a2, v5);
        uint64_t v22 = a2[133];
        BOOL v8 = (*(_DWORD *)(v22 + 2400 * v5 + 160) - 1) > 1 || *(void *)(v22 + 2400 * v5 + 2008) > 1uLL;
        *(unsigned char *)(v22 + 2400 * v5 + 2224) = v8;
        sub_7D4B78((uint64_t)a1, a2, v5);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_7D3444(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[133];
  uint64_t v6 = sub_46C8EC(a2, *(void *)(v5 + 2400 * a3 + 16));
  uint64_t v7 = *(void *)(v6 + 32);
  long long v8 = *(_OWORD *)(v6 + 16);
  v19[0] = *(_OWORD *)v6;
  v19[1] = v8;
  uint64_t v20 = v7;
  sub_6A48E0(*a1, (uint64_t)v19, 0, &v17);
  uint64_t v9 = v17[1];
  if (*v17 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    char v11 = (_DWORD *)(v5 + 2400 * a3 + 160);
    uint64_t v12 = *v17;
    do
    {
      if (*(unsigned char *)(v12 + 185))
      {
        int v13 = *(_DWORD *)(v12 + 24);
        switch(v13)
        {
          case 1:
          case 20:
          case 27:
          case 29:
          case 33:
          case 60:
          case 62:
          case 65:
            switch(*v11)
            {
              case 1:
              case 0x14:
              case 0x1B:
              case 0x1D:
              case 0x21:
              case 0x3C:
              case 0x3E:
              case 0x41:
                ++v10;
                break;
              default:
                goto LABEL_8;
            }
            break;
          default:
            break;
        }
LABEL_8:
        switch(v13)
        {
          case 2:
          case 21:
          case 28:
          case 30:
          case 34:
          case 61:
          case 63:
          case 66:
            switch(*v11)
            {
              case 2:
              case 0x15:
              case 0x1C:
              case 0x1E:
              case 0x22:
              case 0x3D:
              case 0x3F:
              case 0x42:
                ++v10;
                break;
              default:
                goto LABEL_3;
            }
            break;
          default:
            break;
        }
      }
LABEL_3:
      v12 += 192;
    }
    while (v12 != v9);
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v17) >> 6);
  uint64_t v15 = v5 + 2400 * a3;
  *(void *)(v15 + 2000) = v14;
  *(void *)(v15 + 2008) = v10;
  unint64_t v16 = v18;
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_7D3A50(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v5 = sub_51690C(a2 + 133, a3);
  uint64_t v6 = *(void *)(v5 + 80);
  if (v6 != -1)
  {
    uint64_t v7 = (int64x2_t *)v5;
    unint64_t v8 = *(void *)(v5 + 24);
    if (v8 < sub_46C760(a2))
    {
      uint64_t v9 = (void *)sub_46C8EC(a2, v6);
      uint64_t v10 = (unsigned __int16 *)(*v9 - *(int *)*v9);
      if (*v10 < 0xBu)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = v10[5];
        if (v11) {
          LODWORD(v11) = *(unsigned __int8 *)(*v9 + v11 + 1) >> 7;
        }
      }
      char v142 = v11;
      char v141 = v11;
      char v140 = v11;
      __int32 v12 = v7[10].i32[0];
      int v13 = 1;
      switch(v12)
      {
        case 1:
        case 20:
        case 27:
        case 29:
        case 33:
        case 60:
        case 62:
        case 65:
          char v139 = 1;
          __int32 v14 = v12 - 2;
          goto LABEL_9;
        case 11:
          char v139 = v11;
          int v13 = v11;
LABEL_14:
          int v15 = v11 ^ 1;
          break;
        default:
          int v13 = 0;
          char v139 = 0;
          __int32 v14 = v12 - 2;
          if ((v12 - 2) <= 0x40)
          {
LABEL_9:
            int v15 = 1;
            switch(v14)
            {
              case 0:
              case 19:
              case 26:
              case 28:
              case 32:
              case 59:
              case 61:
              case 64:
                goto LABEL_15;
              case 9:
                goto LABEL_14;
              default:
                goto LABEL_10;
            }
          }
          else
          {
LABEL_10:
            int v15 = 0;
          }
          break;
      }
LABEL_15:
      char v138 = v15;
      BOOL v137 = v12 == 4;
      unsigned int v16 = v12 - 3;
      BOOL v136 = v16 == 0;
      BOOL v17 = v16 >= 2 && v13 == 0;
      if (!v17 || v15 != 0)
      {
        uint64_t v19 = sub_7D48F0((void *)a1, (uint64_t)v7);
        if (v19 >= v7[54].i64[1]) {
          uint64_t v21 = v7[54].i64[1];
        }
        else {
          uint64_t v21 = v19;
        }
        uint64_t v22 = v7[3].i64[1];
        if (v22 == -1) {
          uint64_t v22 = v7[2].i64[1];
        }
        uint64_t v23 = v7[1].i64[0];
        uint64_t v135 = v7[5].i64[1];
        if ((int)v6 > (int)v22)
        {
          int v24 = 0;
          int v96 = (void *)(a1 + 24);
          uint64_t v93 = a1;
          int64_t v25 = (int)v6;
          int64_t v26 = (int)v23;
          int64_t v27 = (int)v22;
          while (1)
          {
            int64_t v29 = v25--;
            if (v29 > v26)
            {
              uint64_t v28 = sub_46CCC8(a2, v25, *(double *)&v20);
              v135 += v28;
              goto LABEL_30;
            }
            char v30 = (char **)sub_46C8EC(a2, v25);
            uint64_t v95 = sub_4D4928(a2 + 928, v25);
            sub_63ABD0(&v118, &v135);
            *(void *)&long long v133 = v25;
            if (v24 >= *(unsigned __int8 *)v96 || v135 > v21)
            {
              int v32 = 1;
              if (SHIBYTE(v132) < 0) {
                goto LABEL_37;
              }
              goto LABEL_156;
            }
            uint64_t v33 = sub_46CCC8(a2, v25, *(double *)&v20);
            v135 += v33;
            sub_6A48E0(*(void *)a1, (uint64_t)v30, 0, &v116);
            if (!v116)
            {
              int v32 = 4;
              uint64_t v44 = v117;
              if (!v117) {
                goto LABEL_155;
              }
              goto LABEL_154;
            }
            char v34 = *v30;
            uint64_t v35 = &(*v30)[-*(int *)*v30];
            unsigned int v36 = *(unsigned __int16 *)v35;
            int v94 = v24;
            if (v36 < 0xB || !*((_WORD *)v35 + 5) || (v34[*((unsigned __int16 *)v35 + 5) + 2] & 1) == 0) {
              break;
            }
            LOBYTE(v42) = 1;
LABEL_62:
            char v115 = v42;
            long long v112 = 0;
            uint64_t v113 = 0;
            unint64_t v114 = 0;
            uint64_t v45 = *v116;
            uint64_t v46 = v116[1];
            v98[0] = (void *)a1;
            v98[1] = &v115;
            unint64_t v99 = &v139;
            uint64_t v100 = &v141;
            *(void *)&long long v101 = &v138;
            *((void *)&v101 + 1) = &v140;
            uint64_t v102 = &v137;
            long long v103 = &v136;
            uint64_t v104 = &v142;
            if (v45 == v46)
            {
              int v32 = 4;
              int v24 = v94;
              uint64_t v44 = v117;
              if (!v117) {
                goto LABEL_155;
              }
              goto LABEL_154;
            }
            do
            {
              if (sub_7E1DD0((unsigned char **)v98, v45))
              {
                unsigned __int16 v48 = v113;
                if ((unint64_t)v113 >= v114)
                {
                  int v47 = (char *)sub_7DBD50((uint64_t *)&v112, v45);
                }
                else
                {
                  sub_594714((uint64_t)v113, v45);
                  int v47 = v48 + 192;
                }
                uint64_t v113 = v47;
              }
              v45 += 192;
            }
            while (v45 != v46);
            uint64_t v49 = v113;
            if (v112 == v113)
            {
              int v32 = 4;
              int v24 = v94;
              if (!v113) {
                goto LABEL_153;
              }
            }
            else
            {
              uint64_t v50 = v7[117].i64[1];
              int v24 = v94;
              if (v7[117].i64[0] == v50) {
                uint64_t v51 = v135;
              }
              else {
                uint64_t v51 = v135 - *(void *)(v50 - 184);
              }
              if (v51 >= sub_62CE48(v96, v7[116].i32[1]))
              {
                LOBYTE(v134) = 1;
                BYTE5(v134) = v137;
                long long v52 = (void *)sub_46C8EC(a2, v7[1].i64[1]);
                int v54 = (char *)v112;
                long long v53 = v113;
                v98[0] = (void *)a1;
                v98[1] = v52;
                uint64_t v91 = v52;
                unint64_t v99 = (char *)&v137;
                if (v112 == v113)
                {
                  BYTE2(v134) = 0;
                  unint64_t v65 = v92;
                }
                else
                {
                  while ((sub_7DBFFC((uint64_t)v98, (uint64_t)v54) & 1) == 0)
                  {
                    v54 += 192;
                    if (v54 == v53)
                    {
                      int v54 = v53;
                      break;
                    }
                  }
                  BYTE2(v134) = v54 != v113;
                  if (v54 == v113)
                  {
                    int v24 = v94;
                    unint64_t v65 = v92;
                  }
                  else
                  {
                    uint64_t v90 = v21;
                    uint64_t v55 = *(void *)(a1 + 16);
                    uint64_t v56 = **(void **)v54;
                    size_t v88 = (int *)sub_2D5D58(v55, v56 & 0xFFFFFFFFFFFFLL);
                    if (*(unsigned char *)(v55 + 7772)) {
                      sub_2DB8E0(v55 + 3896, v56, 0);
                    }
                    sub_2E5C38(v55, v56 & 0xFFFFFFFFFFFFLL, 1);
                    uint64_t v57 = *(void *)(a1 + 16);
                    uint64_t v58 = *(void *)(*((void *)v54 + 1) - 8);
                    unint64_t v89 = (int *)sub_2D5D58(v57, v58 & 0xFFFFFFFFFFFFLL);
                    if (*(unsigned char *)(v57 + 7772)) {
                      sub_2DB8E0(v57 + 3896, v58, 0);
                    }
                    sub_2E5C38(v57, v58 & 0xFFFFFFFFFFFFLL, 1);
                    uint64_t v59 = v58 & 0xFFFFFFFFFFFFLL;
                    uint64_t v60 = (v58 & 0xFF000000000000) != 0;
                    uint64_t v21 = v90;
                    long long v61 = (unsigned __int16 *)((char *)v89 - *v89);
                    unsigned int v62 = *v61;
                    if (v62 < 0xB)
                    {
                      LOBYTE(v63) = 0;
                      int v64 = v94;
                    }
                    else
                    {
                      uint64_t v63 = v61[5];
                      int v64 = v94;
                      if (v61[5]) {
                        LODWORD(v63) = (*((unsigned __int8 *)v89 + v63) >> 2) & 1;
                      }
                    }
                    BYTE6(v134) = v63;
                    if (v7[55].u8[14] | v7[55].u8[13]
                      || (int v66 = (unsigned __int16 *)((char *)v88 - *v88), *v66 >= 0x2Fu)
                      && (uint64_t v67 = v66[23]) != 0
                      && (unsigned int v68 = *((unsigned __int8 *)v88 + v67), v68 < 0x1B)
                      && ((0x4810001u >> v68) & 1) != 0
                      || v62 >= 0x2F
                      && v61[23]
                      && (unsigned int v69 = *((unsigned __int8 *)v89 + v61[23]), v69 < 0x1B)
                      && ((0x4810001u >> v69) & 1) != 0)
                    {
                      LODWORD(v71) = 1;
                    }
                    else
                    {
                      unsigned int v70 = *((_DWORD *)v54 + 6) - 11;
                      if (v70 >= 0x38) {
                        LODWORD(v71) = 0;
                      }
                      else {
                        unint64_t v71 = (0xE00000000C0001uLL >> v70) & 1;
                      }
                    }
                    BYTE4(v134) = v71;
                    if (v62 < 0x43)
                    {
                      LODWORD(v72) = 0;
                    }
                    else
                    {
                      uint64_t v72 = v61[33];
                      if (v72) {
                        LODWORD(v72) = *((unsigned __int8 *)v89 + v72);
                      }
                    }
                    unint64_t v73 = (unsigned __int16 *)(*v91 - *(int *)*v91);
                    if (*v73 >= 0x43u && (uint64_t v74 = v73[33]) != 0) {
                      unsigned int v75 = *(unsigned __int8 *)(*v91 + v74);
                    }
                    else {
                      unsigned int v75 = 0;
                    }
                    BOOL v76 = v72 >= v75;
                    unsigned int v77 = v72 - v75;
                    BOOL v78 = v77 == 0 || !v76 || v77 <= *(unsigned __int8 *)(a1 + 25);
                    unint64_t v65 = v92 & 0xFF00000000000000 | (v60 << 48) | v59;
                    BYTE1(v134) = v78;
                    if (((BYTE5(v134) == 0) & ~v71) != 0)
                    {
                      uint64_t v79 = *(void *)(a1 + 8);
                      unint64_t v97 = v92 & 0xFF00000000000000 | (v60 << 48) | v59;
                      sub_836AD0(v79, (unsigned int *)&v97, *(void *)(a1 + 6016) + 968, v95, (uint64_t)v98);
                    }
                    else
                    {
                      sub_6F30A4((uint64_t)v98);
                    }
                    if (SHIBYTE(v120) < 0) {
                      operator delete((void *)v119);
                    }
                    long long v119 = *(_OWORD *)v98;
                    uint64_t v120 = v99;
                    HIBYTE(v99) = 0;
                    LOBYTE(v98[0]) = 0;
                    long long v121 = v100;
                    if (SHIBYTE(v123) < 0) {
                      operator delete((void *)v122);
                    }
                    long long v122 = v101;
                    uint64_t v123 = v102;
                    HIBYTE(v102) = 0;
                    LOBYTE(v101) = 0;
                    long long v124 = v103;
                    int v125 = (int)v104;
                    if (SHIBYTE(v127) < 0) {
                      operator delete((void *)v126);
                    }
                    long long v126 = v105;
                    uint64_t v127 = v106;
                    HIBYTE(v106) = 0;
                    LOBYTE(v105) = 0;
                    if (SHIBYTE(v129) < 0) {
                      operator delete((void *)v128);
                    }
                    long long v128 = v107;
                    uint64_t v129 = v108;
                    HIBYTE(v108) = 0;
                    LOBYTE(v107) = 0;
                    int v130 = v109;
                    if (SHIBYTE(v132) < 0)
                    {
                      operator delete((void *)__p);
                      long long __p = v110;
                      uint64_t v132 = v111;
                      HIBYTE(v111) = 0;
                      LOBYTE(v110) = 0;
                      if (SHIBYTE(v108) < 0)
                      {
                        operator delete((void *)v107);
                        if ((SHIBYTE(v106) & 0x80000000) == 0) {
                          goto LABEL_137;
                        }
                      }
                      else if ((SHIBYTE(v106) & 0x80000000) == 0)
                      {
                        goto LABEL_137;
                      }
LABEL_132:
                      operator delete((void *)v105);
                      if (SHIBYTE(v102) < 0) {
                        goto LABEL_133;
                      }
LABEL_138:
                      if (SHIBYTE(v99) < 0) {
LABEL_134:
                      }
                        operator delete(v98[0]);
                    }
                    else
                    {
                      long long __p = v110;
                      uint64_t v132 = v111;
                      HIBYTE(v111) = 0;
                      LOBYTE(v110) = 0;
                      if (SHIBYTE(v106) < 0) {
                        goto LABEL_132;
                      }
LABEL_137:
                      if ((SHIBYTE(v102) & 0x80000000) == 0) {
                        goto LABEL_138;
                      }
LABEL_133:
                      operator delete((void *)v101);
                      if (SHIBYTE(v99) < 0) {
                        goto LABEL_134;
                      }
                    }
                    int v24 = v64 + 1;
                  }
                }
                unint64_t v80 = v7[117].u64[1];
                unint64_t v92 = v65;
                if (v80 >= v7[118].i64[0])
                {
                  uint64_t v81 = sub_7DC164(v7 + 117, (uint64_t)&v118);
                }
                else
                {
                  *(void *)unint64_t v80 = v118;
                  sub_4AA8E0((char *)(v80 + 8), &v119);
                  long long v20 = v133;
                  *(void *)(v80 + 176) = v134;
                  *(_OWORD *)(v80 + 160) = v20;
                  uint64_t v81 = v80 + 184;
                  v7[117].i64[1] = v80 + 184;
                }
                int v32 = 0;
                v7[117].i64[1] = v81;
                uint64_t v49 = (char *)v112;
                if (!v112) {
                  goto LABEL_153;
                }
                goto LABEL_144;
              }
              int v32 = 4;
              uint64_t v49 = (char *)v112;
              if (!v112) {
                goto LABEL_153;
              }
            }
LABEL_144:
            int v82 = v24;
            uint64_t v83 = v21;
            int v84 = v113;
            uint64_t v85 = v49;
            if (v113 != v49)
            {
              do
              {
                uint64_t v86 = (void *)*((void *)v84 - 19);
                if (v86)
                {
                  *((void *)v84 - 18) = v86;
                  operator delete(v86);
                }
                int v87 = (void *)*((void *)v84 - 24);
                if (v87)
                {
                  *((void *)v84 - 23) = v87;
                  operator delete(v87);
                }
                v84 -= 192;
              }
              while (v84 != v49);
              uint64_t v85 = v112;
            }
            uint64_t v113 = v49;
            operator delete(v85);
            uint64_t v21 = v83;
            int v24 = v82;
LABEL_153:
            a1 = v93;
            uint64_t v44 = v117;
            if (!v117) {
              goto LABEL_155;
            }
LABEL_154:
            if (atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_155:
              if (SHIBYTE(v132) < 0) {
                goto LABEL_37;
              }
              goto LABEL_156;
            }
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            if (SHIBYTE(v132) < 0)
            {
LABEL_37:
              operator delete((void *)__p);
              if (SHIBYTE(v129) < 0) {
                goto LABEL_38;
              }
              goto LABEL_157;
            }
LABEL_156:
            if (SHIBYTE(v129) < 0)
            {
LABEL_38:
              operator delete((void *)v128);
              if (SHIBYTE(v127) < 0) {
                goto LABEL_39;
              }
              goto LABEL_158;
            }
LABEL_157:
            if (SHIBYTE(v127) < 0)
            {
LABEL_39:
              operator delete((void *)v126);
              if (SHIBYTE(v123) < 0) {
                goto LABEL_40;
              }
              goto LABEL_159;
            }
LABEL_158:
            if (SHIBYTE(v123) < 0)
            {
LABEL_40:
              operator delete((void *)v122);
              if (SHIBYTE(v120) < 0) {
                goto LABEL_41;
              }
              goto LABEL_160;
            }
LABEL_159:
            if (SHIBYTE(v120) < 0)
            {
LABEL_41:
              operator delete((void *)v119);
              if ((v32 | 4) != 4) {
                return;
              }
              goto LABEL_30;
            }
LABEL_160:
            if ((v32 | 4) != 4) {
              return;
            }
LABEL_30:
            if (v25 <= v27) {
              return;
            }
          }
          int v37 = (int *)v30[1];
          if (v37 && (uint64_t v38 = (unsigned __int16 *)((char *)v37 - *v37), *v38 >= 0x11u) && (v39 = v38[8]) != 0)
          {
            unsigned int v40 = *(unsigned __int16 *)((char *)v37 + v39);
            if (v36 < 0xB || (v40 & 4) != 0)
            {
              int v42 = (v40 >> 2) & 1;
              goto LABEL_62;
            }
          }
          else if (v36 < 0xB)
          {
LABEL_60:
            LOBYTE(v42) = 0;
            goto LABEL_62;
          }
          uint64_t v43 = *((unsigned __int16 *)v35 + 5);
          if (v43)
          {
            int v42 = (v34[v43 + 3] >> 2) & 1;
            goto LABEL_62;
          }
          goto LABEL_60;
        }
      }
    }
  }
}

void sub_7D4510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,char a57)
{
}

BOOL sub_7D479C(unsigned __int8 *a1, int a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 2:
    case 21:
    case 28:
    case 30:
    case 34:
    case 61:
    case 63:
    case 66:
      return result;
    case 11:
      BOOL result = *a1 == 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t sub_7D48F0(void *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1[752] + 1064);
  switch(*(_DWORD *)(a2 + 1860))
  {
    case 0:
      BOOL v3 = v2 == 0;
      uint64_t v4 = 47;
      if (v3) {
        uint64_t v4 = 51;
      }
      uint64_t v5 = a1[v4];
      uint64_t v6 = a1[61];
      uint64_t v7 = a1[89];
      uint64_t v8 = a1[69];
      goto LABEL_15;
    case 1:
      BOOL v3 = v2 == 0;
      uint64_t v10 = 48;
      if (v3) {
        uint64_t v10 = 52;
      }
      uint64_t v5 = a1[v10];
      uint64_t v6 = a1[62];
      uint64_t v7 = a1[90];
      uint64_t v8 = a1[70];
      goto LABEL_15;
    case 2:
      BOOL v3 = v2 == 0;
      uint64_t v11 = 49;
      if (v3) {
        uint64_t v11 = 53;
      }
      uint64_t v5 = a1[v11];
      uint64_t v6 = a1[63];
      uint64_t v7 = a1[91];
      uint64_t v8 = a1[71];
      goto LABEL_15;
    case 3:
      BOOL v3 = v2 == 0;
      uint64_t v12 = 50;
      if (v3) {
        uint64_t v12 = 54;
      }
      uint64_t v5 = a1[v12];
      uint64_t v6 = a1[64];
      uint64_t v7 = a1[92];
      uint64_t v8 = a1[72];
LABEL_15:
      if (v5 <= v6) {
        uint64_t v5 = v6;
      }
      if (v5 <= v7) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = v5;
      }
      if (v5 < v7) {
        uint64_t v5 = v7;
      }
      if (v13 >= v8) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v8;
      }
      break;
    default:
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_7D49E8(uint64_t result, void *a2, unint64_t a3)
{
  if (a2[1272] != a2[1273])
  {
    uint64_t v5 = result + 2064;
    uint64_t result = sub_8C9FE0(result + 2064, a2, a3);
    if (result != -1)
    {
      unint64_t v7 = v6;
      if (v6 != -1)
      {
        unint64_t v8 = result;
        uint64_t result = sub_51690C(a2 + 133, a3);
        if (v8 <= v7)
        {
          uint64_t v9 = (void *)result;
          uint64_t v10 = (int64x2_t *)(result + 1872);
          uint64_t v18 = result + 1896;
          do
          {
            uint64_t v11 = sub_7D0C8C(a2 + 1272, v8);
            uint64_t result = sub_63A4A4(v11);
            if (result && !*(_DWORD *)(v11 + 4))
            {
              uint64_t v13 = (uint64_t *)(v11 + 8);
              unint64_t v12 = *(void *)(v11 + 8);
              if (v12 >= v9[5] && v12 < v9[2])
              {
                uint64_t v21 = sub_8CD4A4(v5, a2, a3, v11);
                char v20 = 0;
                BOOL v15 = sub_63ACE0((uint64_t)v10);
                char v16 = 0;
                if (v15) {
                  char v16 = sub_63AB44(v11, v18);
                }
                char v20 = v16;
                unint64_t v19 = v8;
                unint64_t v17 = v9[235];
                if (v17 >= v9[236])
                {
                  uint64_t result = sub_7DC4C8(v10, &v21, v13, (uint64_t *)&v19, &v20);
                }
                else
                {
                  sub_63AC0C(v9[235], &v21, *v13, v8, v16);
                  uint64_t result = v17 + 184;
                  v9[235] = v17 + 184;
                }
                v9[235] = result;
              }
            }
            ++v8;
          }
          while (v8 <= v7);
        }
      }
    }
  }
  return result;
}

void sub_7D4B70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D4B78(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v60 = a3;
  if (a2[148] == a2[149]) {
    return;
  }
  uint64_t v5 = a2 + 148;
  uint64_t v6 = sub_51690C(a2 + 133, a3);
  uint64_t v7 = v6;
  if (*(void *)(v6 + 56) == -1) {
    unint64_t v8 = *(void *)(v6 + 40);
  }
  else {
    unint64_t v8 = *(void *)(v6 + 56);
  }
  if (a2[149] == a2[148])
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      if (*(void *)(sub_7D0ECC(v5, v9) + 152) > v8) {
        break;
      }
      ++v9;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[149] - a2[148]) >> 5));
  }
  uint64_t v10 = (long long *)sub_7D0ECC(v5, v9 - 1);
  uint64_t v12 = *(void *)(v7 + 872);
  uint64_t v59 = v12;
  unint64_t v13 = *(void *)(v7 + 40);
  if (v13 <= v8) {
    unint64_t v14 = v8;
  }
  else {
    unint64_t v14 = *(void *)(v7 + 40);
  }
  if (v13 < v8)
  {
    do
    {
      uint64_t v15 = sub_46CCC8(a2, v13, v11);
      if (v13 == *(void *)(v7 + 40)) {
        uint64_t v15 = sub_46CCC8(a2, v13, v11) - *(void *)(v7 + 48);
      }
      if (v12 >= v15) {
        v12 -= v15;
      }
      else {
        uint64_t v12 = 0;
      }
      ++v13;
    }
    while (v14 != v13);
    uint64_t v59 = v12;
  }
  sub_4AA8E0((char *)&__str, v10);
  uint64_t v58 = v59;
  if (sub_7D52B8(a1, a2, &v60, (uint64_t)&__str))
  {
    std::string::operator=((std::string *)(v7 + 712), &__str);
    *(void *)(v7 + 736) = v50;
    std::string::operator=((std::string *)(v7 + 744), &v51);
    *(void *)(v7 + 768) = v52;
    *(_DWORD *)(v7 + 776) = v53;
    std::string::operator=((std::string *)(v7 + 784), &v54);
    std::string::operator=((std::string *)(v7 + 808), &v55);
    *(_DWORD *)(v7 + 832) = v56;
    std::string::operator=((std::string *)(v7 + 840), &__p);
    *(void *)(v7 + 864) = v58;
  }
  uint64_t v16 = *(void *)(a1 + 6016);
  uint64_t v17 = 120;
  if (!*(unsigned char *)(v16 + 1064)) {
    uint64_t v17 = 136;
  }
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = 128;
  if (!*(unsigned char *)(v16 + 1064)) {
    uint64_t v19 = 144;
  }
  uint64_t v20 = *(void *)(a1 + v19);
  if (!*(_DWORD *)(v7 + 1860)) {
    uint64_t v20 = v18;
  }
  if (!*(unsigned char *)(v7 + 893)) {
    uint64_t v18 = v20;
  }
  if (*(void *)(v7 + 872) >= v18 && *(unsigned char *)(v16 + 1405))
  {
    uint64_t v21 = 152;
    if (!*(unsigned char *)(v16 + 1064)) {
      uint64_t v21 = 160;
    }
    uint64_t v22 = *(void *)(a1 + v21);
    if (v59 > v22)
    {
      unsigned __int16 v48 = (int64x2_t *)(v7 + 688);
      while (1)
      {
        uint64_t v23 = sub_7D0ECC(v5, v9 - 1);
        uint64_t v25 = v23;
        unint64_t v26 = *(void *)(v23 + 152) <= v8 ? v8 : *(void *)(v23 + 152);
        if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[149] - a2[148]) >> 5)) {
          break;
        }
        unint64_t v27 = *(void *)(sub_7D0ECC(v5, v9) + 152);
        if (*(void *)(v7 + 24) < v27) {
          unint64_t v27 = *(void *)(v7 + 24);
        }
        if (v26 <= v27) {
          unint64_t v28 = v27;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v26 >= v27) {
          goto LABEL_54;
        }
        do
        {
LABEL_56:
          while (1)
          {
            uint64_t v31 = sub_46CCC8(a2, v26, v24);
            if (v59 >= v31) {
              break;
            }
            uint64_t v30 = 0;
            uint64_t v59 = 0;
            if (v28 == ++v26) {
              goto LABEL_58;
            }
          }
          uint64_t v32 = sub_46CCC8(a2, v26, v24);
          uint64_t v30 = v59 - v32;
          v59 -= v32;
          ++v26;
        }
        while (v28 != v26);
LABEL_58:
        if (v30 <= v22) {
          uint64_t v30 = v22;
        }
        uint64_t v59 = v30;
        unint64_t v33 = *(void *)(v7 + 688);
        uint64_t v34 = *(void *)(v7 + 696);
        if (v33 == v34)
        {
          if (v33 < *(void *)(v7 + 704))
          {
            sub_4AA8E0(*(char **)(v7 + 688), (long long *)v25);
            goto LABEL_109;
          }
          goto LABEL_111;
        }
        if (sub_6F2880(v34 - 96))
        {
          if (*(_DWORD *)(v34 - 96) != *(_DWORD *)(v25 + 64)) {
            goto LABEL_107;
          }
          uint64_t v35 = *(unsigned __int8 *)(v34 - 65);
          if ((v35 & 0x80u) == 0) {
            uint64_t v36 = *(unsigned __int8 *)(v34 - 65);
          }
          else {
            uint64_t v36 = *(void *)(v34 - 80);
          }
          uint64_t v37 = *(unsigned __int8 *)(v25 + 95);
          int v38 = (char)v37;
          if ((v37 & 0x80u) != 0) {
            uint64_t v37 = *(void *)(v25 + 80);
          }
          if (v36 != v37) {
            goto LABEL_107;
          }
          if (v38 >= 0) {
            uint64_t v39 = (unsigned __int8 *)(v25 + 72);
          }
          else {
            uint64_t v39 = *(unsigned __int8 **)(v25 + 72);
          }
          if ((v35 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v34 - 88), v39, *(void *)(v34 - 80))) {
              goto LABEL_107;
            }
          }
          else if (*(unsigned char *)(v34 - 65))
          {
            unsigned int v40 = (unsigned __int8 *)(v34 - 88);
            while (*v40 == *v39)
            {
              ++v40;
              ++v39;
              if (!--v35) {
                goto LABEL_115;
              }
            }
LABEL_107:
            unint64_t v33 = *(void *)(v7 + 696);
            if (v33 < *(void *)(v7 + 704))
            {
              sub_4AA8E0(*(char **)(v7 + 696), (long long *)v25);
LABEL_109:
              *(void *)(v33 + 152) = v59;
              *(void *)(v7 + 696) = v33 + 160;
              *(void *)(v7 + 696) = v33 + 160;
              if (v59 <= v22) {
                goto LABEL_120;
              }
              goto LABEL_112;
            }
LABEL_111:
            *(void *)(v7 + 696) = sub_7DC72C(v48, (long long *)v25, &v59);
            if (v59 <= v22) {
              goto LABEL_120;
            }
            goto LABEL_112;
          }
LABEL_115:
          if (!sub_6F2DA8(v34 - 96) && sub_6F2DA8(v25 + 64)) {
            std::string::operator=((std::string *)(v34 - 64), (const std::string *)(v25 + 96));
          }
          std::string::operator=((std::string *)(v34 - 160), (const std::string *)(v34 - 88));
        }
        else
        {
          char v41 = *(unsigned char *)(v34 - 9);
          if (v41 < 0)
          {
            if (!*(void *)(v34 - 24)) {
              goto LABEL_101;
            }
          }
          else if (!*(unsigned char *)(v34 - 9))
          {
            goto LABEL_101;
          }
          uint64_t v42 = *(unsigned __int8 *)(v25 + 151);
          if ((v42 & 0x80u) == 0) {
            uint64_t v43 = *(unsigned __int8 *)(v25 + 151);
          }
          else {
            uint64_t v43 = *(void *)(v25 + 136);
          }
          if (v41 >= 0) {
            uint64_t v44 = *(unsigned __int8 *)(v34 - 9);
          }
          else {
            uint64_t v44 = *(void *)(v34 - 24);
          }
          if (v43 != v44) {
            goto LABEL_101;
          }
          uint64_t v45 = (const void **)(v25 + 128);
          if (v41 >= 0) {
            uint64_t v46 = (unsigned __int8 *)(v34 - 32);
          }
          else {
            uint64_t v46 = *(unsigned __int8 **)(v34 - 32);
          }
          if ((v42 & 0x80) != 0)
          {
            if (memcmp(*v45, v46, *(void *)(v25 + 136))) {
              goto LABEL_101;
            }
          }
          else if (*(unsigned char *)(v25 + 151))
          {
            while (*(unsigned __int8 *)v45 == *v46)
            {
              uint64_t v45 = (const void **)((char *)v45 + 1);
              ++v46;
              if (!--v42) {
                goto LABEL_119;
              }
            }
LABEL_101:
            unint64_t v47 = *(void *)(v7 + 696);
            if (v47 >= *(void *)(v7 + 704))
            {
              *(void *)(v7 + 696) = sub_7DC72C(v48, (long long *)v25, &v59);
              if (v59 <= v22) {
                goto LABEL_120;
              }
            }
            else
            {
              sub_4AA8E0(*(char **)(v7 + 696), (long long *)v25);
              *(void *)(v47 + 152) = v59;
              *(void *)(v7 + 696) = v47 + 160;
              *(void *)(v7 + 696) = v47 + 160;
              if (v59 <= v22) {
                goto LABEL_120;
              }
            }
            goto LABEL_112;
          }
        }
LABEL_119:
        *(void *)(v34 - 8) = v59;
        if (v59 <= v22) {
          goto LABEL_120;
        }
LABEL_112:
        if (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[149] - a2[148]) >> 5)) {
          ++v9;
        }
      }
      unint64_t v29 = *(void *)(v7 + 24);
      if (v26 <= v29) {
        unint64_t v28 = *(void *)(v7 + 24);
      }
      else {
        unint64_t v28 = v26;
      }
      if (v26 < v29) {
        goto LABEL_56;
      }
LABEL_54:
      uint64_t v30 = v59;
      goto LABEL_58;
    }
  }
LABEL_120:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_123;
      }
LABEL_128:
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_124:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_130:
        operator delete(__str.__r_.__value_.__l.__data_);
        return;
      }
      goto LABEL_129;
    }
  }
  else if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_122;
  }
  operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_128;
  }
LABEL_123:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_124;
  }
LABEL_129:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_130;
  }
}

void sub_7D5220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v4 + 696) = v5;
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D5254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D5268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D527C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D5290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_7D52B8(uint64_t a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_4A5E10(a2 + 133, *a3);
  uint64_t v8 = *(void *)(v7 + 56);
  if (v8 == -1) {
    return 0;
  }
  uint64_t v9 = v7;
  uint64_t v10 = (int **)sub_46C8EC(a2, v8);
  double v11 = (char *)*v10;
  uint64_t v12 = (unsigned __int16 *)((char *)*v10 - **v10);
  unsigned int v13 = *v12;
  if (*((unsigned char *)v10 + 38))
  {
    if (v13 < 0xB) {
      goto LABEL_14;
    }
    unsigned int v14 = v12[5];
    if (!v14 || (*(_DWORD *)&v11[v14] & 0x100000) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    if (*(unsigned char *)(a1 + 2050)) {
      return 0;
    }
    goto LABEL_14;
  }
  if (v13 >= 0xB)
  {
    unsigned int v16 = v12[5];
    if (v16)
    {
      if ((*(_DWORD *)&v11[v16] & 0x4000) != 0) {
        goto LABEL_12;
      }
    }
  }
LABEL_14:
  uint64_t v17 = *(void *)(a4 + 152);
  uint64_t v18 = *(void *)(v9 + 872);
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v20 = *(void *)(v9 + 128);
  BOOL v21 = sub_6F2FD8(a4);
  BOOL result = 0;
  if (v21 && v17 > v20 + v19) {
    return v18 - v17 >= *(void *)(a1 + 112);
  }
  return result;
}

void sub_7D53E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_51690C((void *)(a2 + 1064), a3);
  if (!*(void *)(v6 + 872)) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned char **)(a1 + 6016);
  if (v8[1406])
  {
    if (*(unsigned char *)(v6 + 2083)) {
      BOOL v9 = v8[1056] == 0;
    }
    else {
      BOOL v9 = 0;
    }
    int v11 = !v9 && *(unsigned char *)(v6 + 2072) != 0;
    if (v8[1444]) {
      BOOL v12 = *(unsigned char *)(a1 + 1993) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      goto LABEL_23;
    }
LABEL_17:
    if (v11 != 1) {
      return;
    }
    goto LABEL_24;
  }
  int v11 = 0;
  if (v8[1444]) {
    BOOL v13 = *(unsigned char *)(a1 + 1993) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    goto LABEL_17;
  }
LABEL_23:
  if ((v11 | (*(unsigned char *)(v6 + 2120) != 0)) != 1) {
    return;
  }
LABEL_24:
  sub_7D578C(a1, (void *)a2, a3);
  if (*(unsigned char *)(v7 + 2082)) {
    int v14 = v11;
  }
  else {
    int v14 = 0;
  }
  if (v14 != 1) {
    goto LABEL_56;
  }
  sub_8CCA90(a1 + 2064, (void *)a2, v7, (uint64_t)&v35);
  if (sub_63A4A4((uint64_t)&v35))
  {
    DWORD1(v35) = 1;
    unint64_t v15 = *(void *)(a2 + 10184);
    if (v15 >= *(void *)(a2 + 10192))
    {
      double v24 = sub_7DC95C((void **)(a2 + 10176), (uint64_t)&v35);
    }
    else
    {
      long long v16 = v36;
      *(_OWORD *)unint64_t v15 = v35;
      *(_OWORD *)(v15 + 16) = v16;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 40) = 0;
      uint64_t v17 = __p;
      uint64_t v18 = (uint64_t)v38;
      int64_t v19 = (char *)v38 - (unsigned char *)__p;
      if (v38 != __p)
      {
        unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v19 >> 4);
        if (v20 >= 0x1745D1745D1745ELL) {
          sub_2E00();
        }
        BOOL v21 = (char *)operator new(v19);
        *(void *)(v15 + 32) = v21;
        *(void *)(v15 + 40) = v21;
        *(void *)(v15 + 48) = &v21[176 * v20];
        *(void *)(v15 + 40) = sub_597E4C(v15 + 48, (uint64_t)v17, v18, (uint64_t)v21);
      }
      long long v22 = v39;
      long long v23 = v40[0];
      *(_OWORD *)(v15 + 81) = *(_OWORD *)((char *)v40 + 9);
      *(_OWORD *)(v15 + 72) = v23;
      *(_OWORD *)(v15 + 56) = v22;
      double v24 = (char *)(v15 + 104);
      *(void *)(a2 + 10184) = v15 + 104;
    }
    *(void *)(a2 + 10184) = v24;
    long long v25 = v36;
    *(_OWORD *)(v7 + 1896) = v35;
    *(_OWORD *)(v7 + 1912) = v25;
    if ((long long *)(v7 + 1896) != &v35) {
      sub_5A0D34((uint64_t *)(v7 + 1928), (uint64_t)__p, (uint64_t)v38, 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (unsigned char *)__p) >> 4));
    }
    *(_OWORD *)(v7 + 1952) = v39;
    *(_OWORD *)(v7 + 1968) = v40[0];
    *(_OWORD *)(v7 + 1977) = *(_OWORD *)((char *)v40 + 9);
  }
  unint64_t v26 = (void **)__p;
  if (!__p) {
    goto LABEL_56;
  }
  unint64_t v27 = v38;
  unint64_t v28 = __p;
  if (v38 != __p)
  {
    while (1)
    {
      if (*((char *)v27 - 9) < 0)
      {
        operator delete(*(v27 - 4));
        if ((*((char *)v27 - 41) & 0x80000000) == 0)
        {
LABEL_47:
          int v30 = *((_DWORD *)v27 - 20);
          if (v30 != 1) {
            goto LABEL_51;
          }
          goto LABEL_41;
        }
      }
      else if ((*((char *)v27 - 41) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(*(v27 - 8));
      int v30 = *((_DWORD *)v27 - 20);
      if (v30 != 1)
      {
LABEL_51:
        if (v30 || (*((char *)v27 - 81) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        unint64_t v29 = *(v27 - 13);
        goto LABEL_43;
      }
LABEL_41:
      unint64_t v29 = *(v27 - 13);
      if (v29)
      {
        *(v27 - 12) = v29;
LABEL_43:
        operator delete(v29);
      }
LABEL_44:
      v27 -= 22;
      if (v27 == v26)
      {
        unint64_t v28 = __p;
        break;
      }
    }
  }
  int v38 = v26;
  operator delete(v28);
LABEL_56:
  uint64_t v31 = *(long long **)(a2 + 10176);
  uint64_t v32 = *(long long **)(a2 + 10184);
  unint64_t v33 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v32 - (char *)v31) >> 3));
  if (v32 == v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_7E224C(v31, v32, (uint64_t)&v35, v34, 1);
}

void sub_7D573C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v5 + 40) = v4;
  if (*v3)
  {
    sub_52F808(v3);
    operator delete((void *)*v3);
  }
  *(void *)(v2 + 10184) = v5;
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D5778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D578C(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4 = (unsigned char *)sub_51690C(a2 + 133, a3);
  if (v4[328] != 5) {
    return;
  }
  uint64_t v5 = (uint64_t)v4;
  char v41 = (uint64_t *)(a1 + 2064);
  unint64_t v6 = sub_8C78A4(a1 + 2064, v4, 0);
  int v58 = v6;
  __int16 v59 = WORD2(v6);
  if ((v6 & 0xFF00) == 0 && !(BYTE2(v6) | BYTE3(v6))) {
    return;
  }
  *(unsigned char *)(a1 + 6032) |= BYTE3(v6);
  *(unsigned char *)(a1 + 6033) |= BYTE2(v6);
  LOBYTE(v49) = 1;
  DWORD1(v49) = 0;
  *((void *)&v49 + 1) = -1;
  uint64_t v50 = -1;
  uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)std::string __p = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v55 = 0;
  unint64_t v56 = 0xBFF0000000000000;
  char v57 = 0;
  uint64_t v47 = 0;
  long long v48 = 0uLL;
  uint64_t v7 = sub_62CAD0((void *)(a1 + 24), *(_DWORD *)(v5 + 1860));
  uint64_t v8 = 0;
  long long v39 = (_DWORD *)(a1 + 6024);
  *(_DWORD *)&v45[8] = 0;
  uint64_t v46 = v7;
  *(void *)uint64_t v45 = (1000 * a3);
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v37 = (uint64_t *)(v5 + 16);
  if ((int)v9 >= *(_DWORD *)(v5 + 40))
  {
    uint64_t v18 = 0;
    uint64_t v8 = 0;
    int64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v38 = (int)v9;
    while (1)
    {
      BOOL v22 = sub_63A4E0((uint64_t)&v49);
      if (*((void *)&v49 + 1) == v38 && v22) {
        goto LABEL_38;
      }
      if (v38 != *(_DWORD *)v37) {
        break;
      }
      if (!sub_8CA498((uint64_t)v41, (uint64_t)a2, v5)) {
        goto LABEL_83;
      }
      sub_8CC424(v41, a2, v37, (void *)(v5 + 80), &v58, &v43);
      if (v20)
      {
        while (1)
        {
          if (v19 == v20)
          {
            *(void *)&long long v48 = v20;
            operator delete(v20);
            break;
          }
          if (*((char *)v19 - 9) < 0)
          {
            operator delete(*(v19 - 4));
            if ((*((char *)v19 - 41) & 0x80000000) == 0)
            {
LABEL_54:
              int v25 = *((_DWORD *)v19 - 20);
              if (v25 == 1) {
                goto LABEL_47;
              }
              goto LABEL_58;
            }
          }
          else if ((*((char *)v19 - 41) & 0x80000000) == 0)
          {
            goto LABEL_54;
          }
          operator delete(*(v19 - 8));
          int v25 = *((_DWORD *)v19 - 20);
          if (v25 == 1)
          {
LABEL_47:
            double v24 = *(v19 - 13);
            if (!v24) {
              goto LABEL_50;
            }
            *(v19 - 12) = v24;
            goto LABEL_49;
          }
LABEL_58:
          if (!v25 && *((char *)v19 - 81) < 0)
          {
            double v24 = *(v19 - 13);
LABEL_49:
            operator delete(v24);
          }
LABEL_50:
          v19 -= 22;
        }
      }
      uint64_t v8 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      if (v43 == (void **)v44)
      {
LABEL_85:
        sub_8CBFB0(v41, a2, a3, *v37, &v58, (uint64_t *)&v43);
        if (v8)
        {
          *(void *)&long long v48 = v8;
          operator delete(v8);
        }
        unint64_t v20 = v43;
        uint64_t v47 = (uint64_t)v43;
        long long v48 = v44;
        uint64_t v18 = (void **)v44;
        if (v43 != (void **)v44) {
          goto LABEL_88;
        }
        sub_7D5F00(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t *)&v43);
        if (v20)
        {
          *(void *)&long long v48 = v20;
          operator delete(v20);
        }
        unint64_t v20 = v43;
        uint64_t v47 = (uint64_t)v43;
        long long v48 = v44;
        uint64_t v18 = (void **)v44;
        if (v43 != (void **)v44)
        {
LABEL_88:
          DWORD1(v49) = 1;
          goto LABEL_96;
        }
        sub_7D62B4(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t)&v43);
        if (!v18) {
          goto LABEL_95;
        }
        *(void *)&long long v48 = v18;
        unint64_t v28 = v18;
        goto LABEL_94;
      }
      DWORD1(v49) = 2;
      int64_t v19 = (void **)v44;
      unint64_t v20 = v43;
LABEL_83:
      BOOL v30 = v20 == v19;
      unint64_t v20 = v8;
      uint64_t v8 = v19;
      if (v30) {
        goto LABEL_85;
      }
LABEL_96:
      if (v20 != v18)
      {
        uint64_t v29 = (uint64_t)v20;
        while (1)
        {
          BOOL v30 = HIDWORD(v50) == -1 && v51 == -1;
          if (v30) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = sub_63A050(v29, (unsigned int *)&v50 + 1);
          }
          *(void *)&v45[4] = v31;
          if (sub_63A780(&v49, v29, &v46, &v45[4])) {
            goto LABEL_124;
          }
          sub_8CD2FC((uint64_t)v41, a3, (uint64_t)a2, (uint64_t)&v49, v45, v39);
          BYTE3(v49) = 0;
          *(_WORD *)((char *)&v49 + 1) = 0;
          LOBYTE(v49) = 1;
          *((void *)&v49 + 1) = -1;
          uint64_t v50 = -1;
          uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
          DWORD1(v49) = 0;
          uint64_t v32 = (void **)__p[0];
          if (__p[0]) {
            break;
          }
LABEL_123:
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          *(_OWORD *)std::string __p = 0u;
          unint64_t v56 = 0xBFF0000000000000;
          char v57 = 0;
LABEL_124:
          sub_63A148(&v49, v29);
          v29 += 176;
          if ((void **)v29 == v18)
          {
            uint64_t v8 = v20;
            int64_t v19 = v18;
            goto LABEL_38;
          }
        }
        unint64_t v33 = (void **)__p[1];
        uint64_t v34 = __p[0];
        if (__p[1] == __p[0])
        {
LABEL_122:
          __p[1] = v32;
          operator delete(v34);
          goto LABEL_123;
        }
        while (1)
        {
          if (*((char *)v33 - 9) < 0)
          {
            operator delete(*(v33 - 4));
            if ((*((char *)v33 - 41) & 0x80000000) == 0)
            {
LABEL_114:
              int v36 = *((_DWORD *)v33 - 20);
              if (v36 != 1) {
                goto LABEL_118;
              }
              goto LABEL_108;
            }
          }
          else if ((*((char *)v33 - 41) & 0x80000000) == 0)
          {
            goto LABEL_114;
          }
          operator delete(*(v33 - 8));
          int v36 = *((_DWORD *)v33 - 20);
          if (v36 != 1)
          {
LABEL_118:
            if (v36 || (*((char *)v33 - 81) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            long long v35 = *(v33 - 13);
            goto LABEL_110;
          }
LABEL_108:
          long long v35 = *(v33 - 13);
          if (v35)
          {
            *(v33 - 12) = v35;
LABEL_110:
            operator delete(v35);
          }
LABEL_111:
          v33 -= 22;
          if (v33 == v32)
          {
            uint64_t v34 = __p[0];
            goto LABEL_122;
          }
        }
      }
      uint64_t v8 = v18;
      int64_t v19 = v18;
      unint64_t v20 = v18;
LABEL_38:
      if (v38-- <= *(int *)(v5 + 40)) {
        goto LABEL_5;
      }
    }
    sub_7D5F00(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t *)&v43);
    if (!v20)
    {
LABEL_77:
      unint64_t v20 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      if (v43 != (void **)v44) {
        goto LABEL_96;
      }
      sub_7D62B4(a1, a2, (unsigned char *)v5, (void *)v38, (uint64_t)&v43);
      if (!v20) {
        goto LABEL_95;
      }
      *(void *)&long long v48 = v20;
      unint64_t v28 = v20;
LABEL_94:
      operator delete(v28);
LABEL_95:
      unint64_t v20 = v43;
      uint64_t v47 = (uint64_t)v43;
      long long v48 = v44;
      uint64_t v18 = (void **)v44;
      goto LABEL_96;
    }
    while (1)
    {
      if (v19 == v20)
      {
        *(void *)&long long v48 = v20;
        operator delete(v20);
        goto LABEL_77;
      }
      if (*((char *)v19 - 9) < 0)
      {
        operator delete(*(v19 - 4));
        if ((*((char *)v19 - 41) & 0x80000000) == 0)
        {
LABEL_68:
          int v26 = *((_DWORD *)v19 - 20);
          if (v26 != 1) {
            goto LABEL_69;
          }
          goto LABEL_74;
        }
      }
      else if ((*((char *)v19 - 41) & 0x80000000) == 0)
      {
        goto LABEL_68;
      }
      operator delete(*(v19 - 8));
      int v26 = *((_DWORD *)v19 - 20);
      if (v26 != 1)
      {
LABEL_69:
        if (!v26 && *((char *)v19 - 81) < 0)
        {
          unint64_t v27 = *(v19 - 13);
LABEL_63:
          operator delete(v27);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
LABEL_74:
      unint64_t v27 = *(v19 - 13);
      if (v27)
      {
        *(v19 - 12) = v27;
        goto LABEL_63;
      }
LABEL_64:
      v19 -= 22;
    }
  }
LABEL_5:
  sub_8CD2FC((uint64_t)v41, a3, (uint64_t)a2, (uint64_t)&v49, v45, v39);
  if (!v8) {
    goto LABEL_21;
  }
  for (uint64_t i = (void **)v48; i != v8; i -= 22)
  {
    if (*((char *)i - 9) < 0)
    {
      operator delete(*(i - 4));
      if ((*((char *)i - 41) & 0x80000000) == 0)
      {
LABEL_12:
        int v11 = *((_DWORD *)i - 20);
        if (v11 != 1) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
    else if ((*((char *)i - 41) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(i - 8));
    int v11 = *((_DWORD *)i - 20);
    if (v11 != 1)
    {
LABEL_13:
      if (!v11 && *((char *)i - 81) < 0)
      {
        BOOL v12 = *(i - 13);
LABEL_7:
        operator delete(v12);
        continue;
      }
      continue;
    }
LABEL_18:
    BOOL v12 = *(i - 13);
    if (v12)
    {
      *(i - 12) = v12;
      goto LABEL_7;
    }
  }
  *(void *)&long long v48 = v8;
  operator delete(v8);
LABEL_21:
  BOOL v13 = (void **)__p[0];
  if (__p[0])
  {
    int v14 = (void **)__p[1];
    unint64_t v15 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_127:
      __p[1] = v13;
      operator delete(v15);
      return;
    }
    while (2)
    {
      if (*((char *)v14 - 9) < 0)
      {
        operator delete(*(v14 - 4));
        if (*((char *)v14 - 41) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 != 1) {
          goto LABEL_29;
        }
LABEL_34:
        uint64_t v17 = *(v14 - 13);
        if (v17)
        {
          *(v14 - 12) = v17;
LABEL_24:
          operator delete(v17);
        }
      }
      else
      {
        if ((*((char *)v14 - 41) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(*(v14 - 8));
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 == 1) {
          goto LABEL_34;
        }
LABEL_29:
        if (!v16 && *((char *)v14 - 81) < 0)
        {
          uint64_t v17 = *(v14 - 13);
          goto LABEL_24;
        }
      }
      v14 -= 22;
      if (v14 == v13)
      {
        unint64_t v15 = __p[0];
        goto LABEL_127;
      }
      continue;
    }
  }
}

void sub_7D5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_7D5F00(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v9 = a1 + 2064;
  unint64_t v10 = sub_8C78A4(a1 + 2064, a3, 0);
  int v50 = v10;
  __int16 v51 = WORD2(v10);
  uint64_t v11 = sub_46C8EC(a2, (uint64_t)a4);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(v11 + 32);
  int v14 = (int *)sub_2D5D58(v12, v13 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v12 + 7772))
  {
    unint64_t v15 = sub_2DB8E0(v12 + 3896, v13, 0);
    int v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 < 5u)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = *((unsigned __int16 *)v16 + 2);
      if (v17) {
        v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
      }
    }
    uint64_t v18 = (int *)(v17 + 4 * WORD2(v13) + 4 + *(unsigned int *)(v17 + 4 * WORD2(v13) + 4));
  }
  else
  {
    uint64_t v18 = 0;
  }
  v46[0] = v14;
  v46[1] = v18;
  v46[2] = (int *)sub_2E5C38(v12, v13 & 0xFFFFFFFFFFFFLL, 1);
  v46[3] = v19;
  unsigned int v47 = v13;
  unsigned __int16 v48 = WORD2(v13);
  BOOL v49 = (v13 & 0xFF000000000000) != 0;
  std::string __p = a4;
  sub_8CADD4(v9, v46, &v50, &__p, 0, (uint64_t)v38);
  if (*a5)
  {
    sub_52F808(a5);
    operator delete((void *)*a5);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  uint64_t v20 = *(void *)v38;
  *a5 = *(void *)v38;
  uint64_t v21 = *(void *)&v38[8];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)&v38[8];
  if (v20 == v21 && *(unsigned char *)(a1 + 1998))
  {
    uint64_t v22 = *(void *)(a1 + 16);
    long long v44 = 0;
    uint64_t v45 = 0;
    std::string __p = 0;
    *(void *)uint64_t v38 = &__p;
    sub_2E719C(v22, v47 | ((unint64_t)v48 << 32), 8, (uint64_t)v38);
    if (__p == v44)
    {
      if (*a5 != a5[1])
      {
LABEL_29:
        if (__p)
        {
          long long v44 = __p;
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = *(v44 - 3);
      uint64_t v25 = sub_2D5D58(v23, v24 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v23 + 7772))
      {
        int v26 = sub_2DB8E0(v23 + 3896, v24, 0);
        unint64_t v27 = &v26[-*(int *)v26];
        if (*(unsigned __int16 *)v27 < 5u)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = *((unsigned __int16 *)v27 + 2);
          if (v28) {
            v28 += (uint64_t)&v26[*(unsigned int *)&v26[v28]];
          }
        }
        uint64_t v29 = v28 + 4 * WORD2(v24) + 4 + *(unsigned int *)(v28 + 4 * WORD2(v24) + 4);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = sub_2E5C38(v23, v24 & 0xFFFFFFFFFFFFLL, 1);
      *(void *)uint64_t v38 = v25;
      *(void *)&v38[8] = v29;
      *(void *)&v38[16] = v30;
      uint64_t v39 = v31;
      int v40 = v24;
      __int16 v41 = WORD2(v24);
      BOOL v42 = (v24 & 0xFF000000000000) != 0;
      long long v35 = a4;
      sub_8CADD4(v9, (int **)v38, &v50, &v35, 1, (uint64_t)&v36);
      if (*a5)
      {
        sub_52F808(a5);
        operator delete((void *)*a5);
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      uint64_t v32 = v36;
      *a5 = v36;
      uint64_t v33 = v37;
      *(_OWORD *)(a5 + 1) = v37;
      if (v32 != v33) {
        goto LABEL_29;
      }
    }
    sub_7D67C8((void *)a1, a2, a3, (uint64_t)a4, (uint64_t)v38);
    if (*a5)
    {
      sub_52F808(a5);
      operator delete((void *)*a5);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    *(_OWORD *)a5 = *(_OWORD *)v38;
    a5[2] = *(void *)&v38[16];
    goto LABEL_29;
  }
}

void sub_7D6264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    sub_63A3EC(v22);
    _Unwind_Resume(a1);
  }
  sub_63A3EC(v22);
  _Unwind_Resume(a1);
}

void sub_7D62B4(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 2064;
  unint64_t v10 = sub_8C78A4(a1 + 2064, a3, 1);
  int v56 = v10;
  __int16 v57 = WORD2(v10);
  if ((v10 & 0xFFFFFF00) == 0)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    return;
  }
  unint64_t v11 = sub_8C78A4(v9, a3, 0);
  int v54 = v11;
  __int16 v55 = WORD2(v11);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  uint64_t v12 = sub_46C8EC(a2, (uint64_t)a4);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v15 = sub_2D5D58(v13, v14 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v13 + 7772))
  {
    int v16 = sub_2DB8E0(v13 + 3896, v14, 0);
    uint64_t v17 = &v16[-*(int *)v16];
    if (*(unsigned __int16 *)v17 < 5u)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = *((unsigned __int16 *)v17 + 2);
      if (v18) {
        v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
      }
    }
    uint64_t v19 = v18 + 4 * WORD2(v14) + 4 + *(unsigned int *)(v18 + 4 * WORD2(v14) + 4);
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)&long long v51 = v15;
  *((void *)&v51 + 1) = v19;
  *(void *)&long long v52 = sub_2E5C38(v13, v14 & 0xFFFFFFFFFFFFLL, 1);
  *((void *)&v52 + 1) = v20;
  LODWORD(v53) = v14;
  WORD2(v53) = WORD2(v14);
  BYTE6(v53) = (v14 & 0xFF000000000000) == 0;
  std::string __p = a4;
  sub_8CADD4(v9, (int **)&v51, &v56, &__p, 0, (uint64_t)v42);
  if (*(void *)a5)
  {
    sub_52F808((uint64_t *)a5);
    operator delete(*(void **)a5);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  uint64_t v21 = *(void *)v42;
  *(void *)a5 = *(void *)v42;
  uint64_t v22 = *(void *)&v42[8];
  *(_OWORD *)(a5 + 8) = *(_OWORD *)&v42[8];
  if (v21 == v22 && *(unsigned char *)(a1 + 1998))
  {
    uint64_t v23 = *(void *)(a1 + 16);
    BOOL v49 = 0;
    uint64_t v50 = 0;
    std::string __p = 0;
    *(void *)&long long v51 = &__p;
    sub_2E719C(v23, v14 & 0xFFFFFFFFFFFFLL, 8, (uint64_t)&v51);
    uint64_t v24 = v49;
    if (v49 == __p) {
      goto LABEL_47;
    }
    unint64_t v25 = 0;
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v49 - (unsigned char *)__p) >> 3);
    while (1)
    {
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *((void *)__p + 3 * v25);
      uint64_t v28 = sub_2D5D58(v26, v27 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v26 + 7772))
      {
        uint64_t v29 = sub_2DB8E0(v26 + 3896, v27, 0);
        uint64_t v30 = &v29[-*(int *)v29];
        if (*(unsigned __int16 *)v30 < 5u)
        {
          uint64_t v31 = 0;
        }
        else
        {
          uint64_t v31 = *((unsigned __int16 *)v30 + 2);
          if (v31) {
            v31 += (uint64_t)&v29[*(unsigned int *)&v29[v31]];
          }
        }
        uint64_t v32 = v31 + 4 * WORD2(v27) + 4 + *(unsigned int *)(v31 + 4 * WORD2(v27) + 4);
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = sub_2E5C38(v26, v27 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v34 = 0;
      *(void *)&long long v51 = v28;
      *((void *)&v51 + 1) = v32;
      *(void *)&long long v52 = v33;
      *((void *)&v52 + 1) = v35;
      LODWORD(v53) = v27;
      WORD2(v53) = WORD2(v27);
      BYTE6(v53) = (v27 & 0xFF000000000000) != 0;
      uint64_t v46 = 0;
      long long v47 = 0uLL;
      if (v25 >= -1 - 0x5555555555555555 * (((unsigned char *)v49 - (unsigned char *)__p) >> 3)
        || (long long v44 = a4,
            sub_8CADD4(v9, (int **)&v51, &v54, &v44, 1, (uint64_t)v42),
            uint64_t v36 = *(unsigned char **)v42,
            uint64_t v46 = *(unsigned char **)v42,
            long long v47 = *(_OWORD *)&v42[8],
            uint64_t v34 = *(char **)&v42[8],
            *(void *)v42 == *(void *)&v42[8]))
      {
        uint64_t v43 = v53;
        *(_OWORD *)BOOL v42 = v51;
        *(_OWORD *)&v42[16] = v52;
        BYTE6(v43) = BYTE6(v53) ^ 1;
        __int16 v41 = a4;
        sub_8CADD4(v9, (int **)v42, &v56, &v41, 1, (uint64_t)&v44);
        if (v34)
        {
          *(void *)&long long v47 = v34;
          operator delete(v34);
        }
        uint64_t v36 = v44;
        uint64_t v46 = v44;
        long long v47 = v45;
        uint64_t v34 = (char *)v45;
      }
      sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v36, (uint64_t)v34, 0x2E8BA2E8BA2E8BA3 * ((v34 - v36) >> 4));
      if (v36) {
        break;
      }
LABEL_18:
      if (++v25 == v39)
      {
        uint64_t v24 = __p;
LABEL_47:
        if (v24)
        {
          BOOL v49 = v24;
          operator delete(v24);
        }
        return;
      }
    }
    while (1)
    {
      if (v34 == v36)
      {
        operator delete(v36);
        goto LABEL_18;
      }
      if (*(v34 - 9) < 0)
      {
        operator delete(*((void **)v34 - 4));
        if ((*(v34 - 41) & 0x80000000) == 0)
        {
LABEL_38:
          int v37 = *((_DWORD *)v34 - 20);
          if (v37 != 1) {
            goto LABEL_39;
          }
          goto LABEL_44;
        }
      }
      else if ((*(v34 - 41) & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(*((void **)v34 - 8));
      int v37 = *((_DWORD *)v34 - 20);
      if (v37 != 1)
      {
LABEL_39:
        if (!v37 && *(v34 - 81) < 0)
        {
          uint64_t v38 = (void *)*((void *)v34 - 13);
LABEL_33:
          operator delete(v38);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
LABEL_44:
      uint64_t v38 = (void *)*((void *)v34 - 13);
      if (v38)
      {
        *((void *)v34 - 12) = v38;
        goto LABEL_33;
      }
LABEL_34:
      v34 -= 176;
    }
  }
}

void sub_7D674C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_63A3EC(v25);
  _Unwind_Resume(a1);
}

void sub_7D67C8(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(sub_46C8EC(a2, a4) + 32);
  uint64_t v10 = a1[2];
  uint64_t v11 = sub_2D5D58(v10, v9 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v10 + 7772))
  {
    uint64_t v12 = sub_2DB8E0(v10 + 3896, v9, 0);
    uint64_t v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = v14 + 4 * WORD2(v9) + 4 + *(unsigned int *)(v14 + 4 * WORD2(v9) + 4);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v69[0] = v11;
  v69[1] = v15;
  v69[2] = sub_2E5C38(v10, v9 & 0xFFFFFFFFFFFFLL, 1);
  v69[3] = v16;
  unsigned int v70 = v9;
  unsigned __int16 v71 = WORD2(v9);
  BOOL v72 = (v9 & 0xFF000000000000) != 0;
  int v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  sub_2E44A4(a1[2], (uint64_t)v69, &v66);
  uint64_t v17 = v66;
  if (v66 == (char *)v67)
  {
LABEL_24:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (!v17) {
      return;
    }
    goto LABEL_25;
  }
  uint64_t v18 = v66;
  while (1)
  {
    uint64_t v19 = (unsigned __int16 *)(*(void *)v18 - **(int **)v18);
    if (*v19 >= 0x2Fu)
    {
      uint64_t v20 = v19[23];
      if (v20)
      {
        if (*(unsigned char *)(*(void *)v18 + v20) == 14) {
          break;
        }
      }
    }
    v18 += 40;
    if (v18 == (char *)v67) {
      goto LABEL_24;
    }
  }
  uint64_t v21 = a1[2];
  int v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  *(void *)&long long v60 = &v63;
  sub_2E719C(v21, v70 | ((unint64_t)v71 << 32), 8, (uint64_t)&v60);
  uint64_t v22 = (char *)v63;
  if (v63 == v64)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (v22)
    {
LABEL_73:
      int v64 = v22;
      operator delete(v22);
    }
  }
  else
  {
    uint64_t v23 = v64 - 24;
    if ((v9 & 0xFF000000000000) != 0) {
      uint64_t v23 = (char *)v63;
    }
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = a1[2];
    uint64_t v26 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
    sub_2D5D58(v25, v26);
    if (*(unsigned char *)(v25 + 7772)) {
      sub_2DB8E0(v25 + 3896, v24, 0);
    }
    sub_2E5C38(v25, v26, 1);
    sub_2E3BB0(a1[2], (uint64_t)v69, v26, (uint64_t)&v60);
    if (v62 && (void)v60 && *((void *)&v60 + 1))
    {
      unint64_t v27 = sub_8C78A4((uint64_t)(a1 + 258), a3, 0);
      int v58 = v27;
      __int16 v59 = WORD2(v27);
      unint64_t v28 = sub_8C78A4((uint64_t)(a1 + 258), a3, 1);
      int v56 = v28;
      __int16 v57 = WORD2(v28);
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      if ((a1[251] & 0x8000000000000000) == 0)
      {
        uint64_t v29 = 0;
        while (1)
        {
          uint64_t v67 = (uint64_t)v66;
          sub_2E44A4(a1[2], (uint64_t)&v60, &v66);
          uint64_t v31 = sub_6DBACC(*a1 + 1160, (int **)&v60, (uint64_t *)&v66, -1);
          if (v31 == -1) {
            goto LABEL_72;
          }
          uint64_t v32 = &v66[40 * v31];
          uint64_t v33 = *((void *)v32 + 4);
          long long v34 = *((_OWORD *)v32 + 1);
          long long v60 = *(_OWORD *)v32;
          long long v61 = v34;
          uint64_t v62 = v33;
          *(void *)&v50[0] = a4;
          sub_8CADD4((uint64_t)(a1 + 258), (int **)&v60, &v58, v50, 1, (uint64_t)&__p);
          uint64_t v35 = __p;
          uint64_t v36 = v55;
          if (__p == (void *)v55) {
            break;
          }
LABEL_50:
          sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v35, v36, 0x2E8BA2E8BA2E8BA3 * ((v36 - (uint64_t)v35) >> 4));
          BOOL v42 = (unsigned __int16 *)(v60 - *(int *)v60);
          if (*v42 >= 9u && (uint64_t v43 = v42[4]) != 0)
          {
            uint64_t v44 = *(unsigned int *)(v60 + v43);
            long long v45 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v44 = 0;
            long long v45 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          uint64_t v46 = (void **)v55;
          uint64_t v30 = v45;
          if ((void **)v55 != v45)
          {
            while (1)
            {
              if (*((char *)v46 - 9) < 0)
              {
                operator delete(*(v46 - 4));
                if ((*((char *)v46 - 41) & 0x80000000) == 0)
                {
LABEL_61:
                  int v47 = *((_DWORD *)v46 - 20);
                  if (v47 != 1) {
                    goto LABEL_62;
                  }
                  goto LABEL_67;
                }
              }
              else if ((*((char *)v46 - 41) & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(*(v46 - 8));
              int v47 = *((_DWORD *)v46 - 20);
              if (v47 != 1)
              {
LABEL_62:
                if (v47 || (*((char *)v46 - 81) & 0x80000000) == 0) {
                  goto LABEL_58;
                }
                unsigned __int16 v48 = *(v46 - 13);
                goto LABEL_57;
              }
LABEL_67:
              unsigned __int16 v48 = *(v46 - 13);
              if (!v48) {
                goto LABEL_58;
              }
              *(v46 - 12) = v48;
LABEL_57:
              operator delete(v48);
LABEL_58:
              v46 -= 22;
              if (v46 == v45)
              {
                uint64_t v30 = __p;
                break;
              }
            }
          }
          *(void *)&long long v55 = v45;
          operator delete(v30);
LABEL_29:
          v29 += v44;
          if (v29 > a1[251]) {
            goto LABEL_72;
          }
        }
        uint64_t v51 = v62;
        v50[0] = v60;
        v50[1] = v61;
        BYTE6(v51) = BYTE6(v62) ^ 1;
        uint64_t v49 = a4;
        sub_8CADD4((uint64_t)(a1 + 258), (int **)v50, &v56, &v49, 1, (uint64_t)&v52);
        int v37 = (void **)__p;
        if (!__p)
        {
LABEL_49:
          uint64_t v35 = v52;
          std::string __p = v52;
          long long v55 = v53;
          uint64_t v36 = v53;
          goto LABEL_50;
        }
        uint64_t v38 = (void **)v55;
        unint64_t v39 = __p;
        if ((void *)v55 == __p)
        {
LABEL_48:
          *(void *)&long long v55 = v37;
          operator delete(v39);
          goto LABEL_49;
        }
        while (1)
        {
          if (*((char *)v38 - 9) < 0)
          {
            operator delete(*(v38 - 4));
            if ((*((char *)v38 - 41) & 0x80000000) == 0)
            {
LABEL_39:
              int v40 = *((_DWORD *)v38 - 20);
              if (v40 != 1) {
                goto LABEL_40;
              }
              goto LABEL_45;
            }
          }
          else if ((*((char *)v38 - 41) & 0x80000000) == 0)
          {
            goto LABEL_39;
          }
          operator delete(*(v38 - 8));
          int v40 = *((_DWORD *)v38 - 20);
          if (v40 != 1)
          {
LABEL_40:
            if (v40 || (*((char *)v38 - 81) & 0x80000000) == 0) {
              goto LABEL_36;
            }
            __int16 v41 = *(v38 - 13);
            goto LABEL_35;
          }
LABEL_45:
          __int16 v41 = *(v38 - 13);
          if (!v41) {
            goto LABEL_36;
          }
          *(v38 - 12) = v41;
LABEL_35:
          operator delete(v41);
LABEL_36:
          v38 -= 22;
          if (v38 == v37)
          {
            unint64_t v39 = __p;
            goto LABEL_48;
          }
        }
      }
    }
    else
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
    }
LABEL_72:
    uint64_t v22 = (char *)v63;
    if (v63) {
      goto LABEL_73;
    }
  }
  uint64_t v17 = v66;
  if (!v66) {
    return;
  }
LABEL_25:
  uint64_t v67 = (uint64_t)v17;
  operator delete(v17);
}

void sub_7D6D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 - 152) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_7D6D88()
{
  if (*(void *)(v0 - 160)) {
    JUMPOUT(0x7D6D78);
  }
  JUMPOUT(0x7D6D60);
}

unint64_t sub_7D6D98(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t result = sub_51690C(a2 + 133, a3);
  uint64_t v6 = *(void *)(a1 + 6016);
  if (*(unsigned char *)(v6 + 1406))
  {
    unint64_t v7 = result;
    int v8 = *(unsigned __int8 *)(v6 + 1056);
    BOOL v9 = *(unsigned char *)(result + 2083) && v8 == 0;
    BOOL v10 = !v9;
    if (*(unsigned char *)(result + 2072) && v10)
    {
      uint64_t v12 = (BOOL *)(result + 1896);
      unint64_t result = sub_63A4A4(result + 1896);
      if (result)
      {
        unint64_t result = sub_63A908(v7 + 1896);
        if (result)
        {
          unint64_t v13 = *(void *)(v7 + 24);
          unint64_t result = sub_46C760(a2);
          if (v13 < result)
          {
            unint64_t result = sub_46C8EC(a2, *(void *)(v7 + 24));
            uint64_t v14 = (unsigned __int16 *)(*(void *)result - **(int **)result);
            unsigned int v15 = *v14;
            if (*(unsigned char *)(result + 38))
            {
              if (v15 >= 0x4D)
              {
                unsigned int v16 = v14[38];
                if (v16)
                {
                  int v17 = 1;
LABEL_22:
                  BOOL v18 = (*(_DWORD *)(*(void *)result + v16) & v17) != 0;
LABEL_24:
                  *uint64_t v12 = v18;
                  return result;
                }
              }
            }
            else if (v15 >= 0x4D)
            {
              unsigned int v16 = v14[38];
              if (v16)
              {
                int v17 = 2;
                goto LABEL_22;
              }
            }
            BOOL v18 = 0;
            goto LABEL_24;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_7D6E98(uint64_t result, void *a2, unint64_t a3)
{
  if (*(unsigned char *)(result + 2054))
  {
    unint64_t result = sub_51690C(a2 + 133, a3);
    unsigned int v4 = *(_DWORD *)(result + 160);
    if ((v4 > 0x19 || ((1 << v4) & 0x2020080) == 0) && v4 != 85 && v4 != 88)
    {
      uint64_t v6 = (int64x2_t *)result;
      uint64_t v36 = 0;
      unint64_t v7 = *(void *)(result + 16);
      if (v7 > *(void *)(result + 40))
      {
        char v8 = 0;
        do
        {
          BOOL v9 = (int **)sub_46C8EC(a2, v7);
          uint64_t v11 = (char *)*v9;
          uint64_t v12 = (unsigned __int16 *)((char *)*v9 - **v9);
          unsigned int v13 = *v12;
          if (*((unsigned char *)v9 + 38))
          {
            if (v13 < 0xB) {
              goto LABEL_23;
            }
            unsigned int v14 = v12[5];
            if (!v14 || (*(_DWORD *)&v11[v14] & 0x80) == 0) {
              goto LABEL_23;
            }
          }
          else if (v13 < 0xB || (unsigned int v15 = v12[5]) == 0 || (*(_DWORD *)&v11[v15] & 0x40) == 0)
          {
LABEL_23:
            uint64_t v19 = (void *)sub_46C8EC(a2, v7);
            uint64_t v20 = (unsigned __int16 *)(*v19 - *(int *)*v19);
            if (*v20 >= 0x2Fu)
            {
              uint64_t v21 = v20[23];
              if (v21)
              {
                unsigned int v22 = *(unsigned __int8 *)(*v19 + v21);
                BOOL v23 = v22 > 0x36;
                uint64_t v24 = (1 << v22) & 0x44000000000008;
                BOOL v25 = v23 || v24 == 0;
                if (!v25 && (v8 & 1) == 0)
                {
                  char v8 = 1;
                  goto LABEL_12;
                }
              }
            }
            uint64_t v26 = (void *)sub_46C8EC(a2, v7);
            unint64_t v27 = (unsigned __int16 *)(*v26 - *(int *)*v26);
            if (*v27 >= 0x2Fu)
            {
              uint64_t v28 = v27[23];
              if (v28)
              {
                unsigned int v29 = *(unsigned __int8 *)(*v26 + v28);
                BOOL v23 = v29 > 0x36;
                uint64_t v30 = (1 << v29) & 0x44000000000008;
                if (!v23 && v30 != 0) {
                  goto LABEL_12;
                }
              }
            }
            if (v8)
            {
              LOBYTE(v35) = 1;
              unint64_t v32 = v6[117].u64[1];
              if (v32 >= v6[118].i64[0])
              {
                uint64_t v33 = sub_7DFE08(v6 + 117, &v36, (char *)&v35);
              }
              else
              {
                sub_63AC64(v6[117].i64[1], &v36, 1);
                uint64_t v33 = v32 + 184;
                v6[117].i64[1] = v32 + 184;
              }
              char v8 = 0;
              goto LABEL_43;
            }
            char v8 = 0;
            goto LABEL_12;
          }
          uint64_t v16 = sub_46CCC8(a2, v7, v10);
          uint64_t v35 = v36 + v16;
          char v34 = 1;
          unint64_t v17 = v6[117].u64[1];
          if (v17 >= v6[118].i64[0])
          {
            uint64_t v33 = sub_7DFBBC(v6 + 117, &v35, &v34);
LABEL_43:
            v6[117].i64[1] = v33;
            goto LABEL_12;
          }
          sub_63AC64(v6[117].i64[1], &v35, 1);
          v6[117].i64[1] = v17 + 184;
          v6[117].i64[1] = v17 + 184;
LABEL_12:
          unint64_t result = sub_46CCC8(a2, v7, v18);
          v36 += result;
          --v7;
        }
        while (v7 > v6[2].i64[1]);
      }
    }
  }
  return result;
}

void sub_7D7124(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D712C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D7134(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = sub_51690C((void *)(a2 + 1064), a3);
  uint64_t v5 = *(uint64_t **)(v3 + 1872);
  uint64_t v6 = *(int64_t **)(v3 + 1880);
  if ((char *)v6 - (char *)v5 < 1)
  {
LABEL_5:
    double v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0xD37A6F4DE9BD37A7 * (v6 - v5);
    while (1)
    {
      char v8 = operator new(184 * v7, &std::nothrow);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    double v10 = v8;
  }
  sub_7E2F84(v5, v6, (uint64_t)&v11, 0xD37A6F4DE9BD37A7 * (v6 - v5), (uint64_t)v10, v7, v4);
  if (v10) {
    operator delete(v10);
  }
}

void sub_7D7210(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7D7228(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, std::string *a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = sub_3750CC(a4);
  sub_62B9C4(a1 + 24, (int)a4, 2, *(unsigned __int8 *)(a6 + 1525), a5);
  sub_8C7470((void *)(a1 + 2064), a2, a4, a1 + 24, a6);
  sub_73BB84((void *)(a1 + 2096), a4);
  *(void *)(a1 + 6016) = a6;
  *(void *)(a1 + 6024) = 0;
  *(_WORD *)(a1 + 6032) = 0;
  return a1;
}

void sub_7D72C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 1951) < 0) {
    operator delete(*(void **)(v1 + 1928));
  }
  _Unwind_Resume(exception_object);
}

void sub_7D72E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  __n128 v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_7D733C(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_7D733C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[134] - a2[133];
  if (v2)
  {
    int v51 = 0;
    unint64_t v5 = 0;
    uint64_t v50 = a2 + 133;
    unint64_t v48 = 0;
    uint64_t v49 = 0x2FC962FC962FC963 * (v2 >> 5);
    uint64_t v47 = a1 + 2096;
    uint64_t v6 = 2;
    uint64_t v7 = 2968;
    unint64_t v8 = 1;
    do
    {
      if (*(unsigned char *)(*(void *)(a1 + 6016) + 1440))
      {
        sub_7DA738(v47, (uint64_t)a2, v5);
        sub_7D77E8(a1, (uint64_t)a2, v5);
        sub_7D7658(a1, a2, v5);
      }
      uint64_t v11 = sub_51690C(v50, v5);
      *(_DWORD *)(v11 + 640) = sub_7DA01C(v11, a2, v11);
      uint64_t v12 = (int *)sub_51690C(v50, v5);
      unsigned int v13 = v12[40];
      if (v13 - 82 >= 3)
      {
        BOOL v14 = v13 > 0x27;
        uint64_t v15 = (1 << v13) & 0x8600050000;
        if (v14 || v15 == 0)
        {
          uint64_t v36 = v12;
          uint64_t v37 = v12[4];
          uint64_t v38 = v12[6];
          sub_46B058();
          uint64_t v46 = v39;
          unint64_t v41 = v40 + v37;
          sub_46B058();
          char v44 = sub_7D91F8(v46, v41, v43, v42 + v38);
          if (*((unsigned char *)v36 + 324)) {
            char v45 = 1;
          }
          else {
            char v45 = v44;
          }
          *((unsigned char *)v36 + 2226) = v45;
        }
      }
      sub_7D942C(a1, a2, v5);
      uint64_t v17 = a2[133];
      if (v51 && v48 >= v5)
      {
        int v18 = 2;
      }
      else
      {
        uint64_t v19 = v17 + 2400 * v5;
        uint64_t v20 = *(void *)(v19 + 568);
        int v21 = *(_DWORD *)(v19 + 624);
        BOOL v22 = v20 != -1 && v21 == 1;
        if (!v22
          || *(void *)(v17 + 2400 * v5 + 592) == -1
          || (unint64_t v23 = 0x2FC962FC962FC963 * ((a2[134] - v17) >> 5), v5 + 1 >= v23))
        {
LABEL_34:
          int v51 = 0;
          goto LABEL_35;
        }
        if (v23 <= v8) {
          unint64_t v23 = v8;
        }
        uint64_t v24 = v17 + v7;
        uint64_t v25 = v6;
        while (*(void *)v24 == -1 || *(_DWORD *)(v24 + 56) != 2)
        {
          if (v23 != v25)
          {
            uint64_t v27 = *(void *)(v24 + 24);
            v24 += 2400;
            ++v25;
            if (v27 != -1) {
              continue;
            }
          }
          goto LABEL_34;
        }
        unint64_t v48 = v25 - 1;
        int v18 = 1;
        int v51 = 1;
      }
      *(_DWORD *)(v17 + 2400 * v5 + 2228) = v18;
LABEL_35:
      sub_7D96C8(a1, (uint64_t)a2, v5);
      uint64_t v29 = a2[133];
      uint64_t v30 = v29 + 2400 * v5;
      unint64_t v31 = *(void *)(v30 + 80);
      unint64_t v32 = *(void *)(v30 + 104);
      if (v31 != -1 && v32 != -1)
      {
        if (v31 <= v32) {
          unint64_t v34 = v32;
        }
        else {
          unint64_t v34 = v31;
        }
        uint64_t v35 = 0;
        if (v31 < v32)
        {
          do
            v35 += sub_470F2C(a2, v31++, v28);
          while (v34 != v31);
        }
        BOOL v9 = (void *)(v29 + 2400 * v5);
        uint64_t v10 = v9[14] + v35 - v9[11];
        if (v9[109] < v10) {
          uint64_t v10 = v9[109];
        }
        v9[16] = v10;
      }
      ++v5;
      ++v6;
      ++v8;
      v7 += 2400;
    }
    while (v5 != v49);
  }
}

uint64_t sub_7D7658(uint64_t result, void *a2, unint64_t a3)
{
  if (a2[1272] != a2[1273])
  {
    uint64_t v5 = result + 2064;
    unint64_t result = sub_8C9FE0(result + 2064, a2, a3);
    if (result != -1)
    {
      unint64_t v7 = v6;
      if (v6 != -1)
      {
        unint64_t v8 = result;
        unint64_t result = sub_51690C(a2 + 133, a3);
        if (v8 <= v7)
        {
          BOOL v9 = (void *)result;
          uint64_t v10 = (int64x2_t *)(result + 1872);
          uint64_t v18 = result + 1896;
          do
          {
            uint64_t v11 = sub_7D0C8C(a2 + 1272, v8);
            unint64_t result = sub_63A4A4(v11);
            if (result && !*(_DWORD *)(v11 + 4))
            {
              unsigned int v13 = (uint64_t *)(v11 + 8);
              unint64_t v12 = *(void *)(v11 + 8);
              if (v12 >= v9[5] && v12 < v9[2])
              {
                uint64_t v21 = sub_8CF26C(v5, a2, a3, v11);
                char v20 = 0;
                BOOL v15 = sub_63ACE0((uint64_t)v10);
                char v16 = 0;
                if (v15) {
                  char v16 = sub_63AB44(v11, v18);
                }
                char v20 = v16;
                unint64_t v19 = v8;
                unint64_t v17 = v9[235];
                if (v17 >= v9[236])
                {
                  unint64_t result = sub_7DC4C8(v10, &v21, v13, (uint64_t *)&v19, &v20);
                }
                else
                {
                  sub_63AC0C(v9[235], &v21, *v13, v8, v16);
                  unint64_t result = v17 + 184;
                  v9[235] = v17 + 184;
                }
                v9[235] = result;
              }
            }
            ++v8;
          }
          while (v8 <= v7);
        }
      }
    }
  }
  return result;
}

void sub_7D77E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D77E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_51690C((void *)(a2 + 1064), a3);
  if (!*(void *)(v6 + 872)) {
    return;
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(unsigned char **)(a1 + 6016);
  if (v8[1406])
  {
    if (*(unsigned char *)(v6 + 2083)) {
      BOOL v9 = v8[1056] == 0;
    }
    else {
      BOOL v9 = 0;
    }
    int v11 = !v9 && *(unsigned char *)(v6 + 2072) != 0;
    if (v8[1444]) {
      BOOL v12 = *(unsigned char *)(a1 + 1993) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      goto LABEL_23;
    }
LABEL_17:
    if (v11 != 1) {
      return;
    }
    goto LABEL_24;
  }
  int v11 = 0;
  if (v8[1444]) {
    BOOL v13 = *(unsigned char *)(a1 + 1993) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    goto LABEL_17;
  }
LABEL_23:
  if ((v11 | (*(unsigned char *)(v6 + 2120) != 0)) != 1) {
    return;
  }
LABEL_24:
  sub_7D7B90(a1, (void *)a2, a3);
  if (*(unsigned char *)(v7 + 2082)) {
    int v14 = v11;
  }
  else {
    int v14 = 0;
  }
  if (v14 != 1) {
    goto LABEL_56;
  }
  sub_8CE8A8(a1 + 2064, (void *)a2, v7, (uint64_t)&v35);
  if (sub_63A4A4((uint64_t)&v35))
  {
    DWORD1(v35) = 1;
    unint64_t v15 = *(void *)(a2 + 10184);
    if (v15 >= *(void *)(a2 + 10192))
    {
      uint64_t v24 = sub_7DC95C((void **)(a2 + 10176), (uint64_t)&v35);
    }
    else
    {
      long long v16 = v36;
      *(_OWORD *)unint64_t v15 = v35;
      *(_OWORD *)(v15 + 16) = v16;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 40) = 0;
      unint64_t v17 = __p;
      uint64_t v18 = (uint64_t)v38;
      int64_t v19 = (char *)v38 - (unsigned char *)__p;
      if (v38 != __p)
      {
        unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * (v19 >> 4);
        if (v20 >= 0x1745D1745D1745ELL) {
          sub_2E00();
        }
        uint64_t v21 = (char *)operator new(v19);
        *(void *)(v15 + 32) = v21;
        *(void *)(v15 + 40) = v21;
        *(void *)(v15 + 48) = &v21[176 * v20];
        *(void *)(v15 + 40) = sub_597E4C(v15 + 48, (uint64_t)v17, v18, (uint64_t)v21);
      }
      long long v22 = v39;
      long long v23 = v40[0];
      *(_OWORD *)(v15 + 81) = *(_OWORD *)((char *)v40 + 9);
      *(_OWORD *)(v15 + 72) = v23;
      *(_OWORD *)(v15 + 56) = v22;
      uint64_t v24 = (char *)(v15 + 104);
      *(void *)(a2 + 10184) = v15 + 104;
    }
    *(void *)(a2 + 10184) = v24;
    long long v25 = v36;
    *(_OWORD *)(v7 + 1896) = v35;
    *(_OWORD *)(v7 + 1912) = v25;
    if ((long long *)(v7 + 1896) != &v35) {
      sub_5A0D34((uint64_t *)(v7 + 1928), (uint64_t)__p, (uint64_t)v38, 0x2E8BA2E8BA2E8BA3 * (((char *)v38 - (unsigned char *)__p) >> 4));
    }
    *(_OWORD *)(v7 + 1952) = v39;
    *(_OWORD *)(v7 + 1968) = v40[0];
    *(_OWORD *)(v7 + 1977) = *(_OWORD *)((char *)v40 + 9);
  }
  uint64_t v26 = (void **)__p;
  if (!__p) {
    goto LABEL_56;
  }
  uint64_t v27 = v38;
  double v28 = __p;
  if (v38 != __p)
  {
    while (1)
    {
      if (*((char *)v27 - 9) < 0)
      {
        operator delete(*(v27 - 4));
        if ((*((char *)v27 - 41) & 0x80000000) == 0)
        {
LABEL_47:
          int v30 = *((_DWORD *)v27 - 20);
          if (v30 != 1) {
            goto LABEL_51;
          }
          goto LABEL_41;
        }
      }
      else if ((*((char *)v27 - 41) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(*(v27 - 8));
      int v30 = *((_DWORD *)v27 - 20);
      if (v30 != 1)
      {
LABEL_51:
        if (v30 || (*((char *)v27 - 81) & 0x80000000) == 0) {
          goto LABEL_44;
        }
        uint64_t v29 = *(v27 - 13);
        goto LABEL_43;
      }
LABEL_41:
      uint64_t v29 = *(v27 - 13);
      if (v29)
      {
        *(v27 - 12) = v29;
LABEL_43:
        operator delete(v29);
      }
LABEL_44:
      v27 -= 22;
      if (v27 == v26)
      {
        double v28 = __p;
        break;
      }
    }
  }
  uint64_t v38 = v26;
  operator delete(v28);
LABEL_56:
  unint64_t v31 = *(long long **)(a2 + 10176);
  unint64_t v32 = *(long long **)(a2 + 10184);
  unint64_t v33 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * (((char *)v32 - (char *)v31) >> 3));
  if (v32 == v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_7E3698(v31, v32, (uint64_t)&v35, v34, 1);
}

void sub_7D7B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v5 + 40) = v4;
  if (*v3)
  {
    sub_52F808(v3);
    operator delete((void *)*v3);
  }
  *(void *)(v2 + 10184) = v5;
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D7B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7D7B90(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4 = (unsigned char *)sub_51690C(a2 + 133, a3);
  if (v4[328] != 5) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v40 = a1 + 2064;
  unint64_t v6 = sub_8C78A4(a1 + 2064, v4, 0);
  int v57 = v6;
  __int16 v58 = WORD2(v6);
  if ((v6 & 0xFF00) == 0 && !(BYTE2(v6) | BYTE3(v6))) {
    return;
  }
  *(unsigned char *)(a1 + 6032) |= BYTE3(v6);
  *(unsigned char *)(a1 + 6033) |= BYTE2(v6);
  LOBYTE(v48) = 1;
  DWORD1(v48) = 0;
  *((void *)&v48 + 1) = -1;
  uint64_t v49 = -1;
  uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)std::string __p = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  unint64_t v55 = 0xBFF0000000000000;
  char v56 = 0;
  uint64_t v46 = 0;
  long long v47 = 0uLL;
  uint64_t v7 = sub_62CAD0((void *)(a1 + 24), *((_DWORD *)v5 + 465));
  unint64_t v8 = 0;
  uint64_t v38 = (_DWORD *)(a1 + 6024);
  *(_DWORD *)&v44[8] = 0;
  uint64_t v45 = v7;
  *(void *)char v44 = (1000 * a3);
  uint64_t v9 = *((void *)v5 + 2);
  if ((int)v9 >= *((_DWORD *)v5 + 10))
  {
    uint64_t v18 = 0;
    unint64_t v8 = 0;
    int64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v37 = (int)v9;
    while (1)
    {
      BOOL v22 = sub_63A4E0((uint64_t)&v48);
      if (*((void *)&v48 + 1) == v37 && v22) {
        goto LABEL_38;
      }
      if (v37 != *((_DWORD *)v5 + 4)) {
        break;
      }
      if (!sub_35E640()) {
        goto LABEL_83;
      }
      sub_3F4FA4(&v42);
      if (v20)
      {
        while (1)
        {
          if (v19 == v20)
          {
            *(void *)&long long v47 = v20;
            operator delete(v20);
            break;
          }
          if (*((char *)v19 - 9) < 0)
          {
            operator delete(*(v19 - 4));
            if ((*((char *)v19 - 41) & 0x80000000) == 0)
            {
LABEL_54:
              int v25 = *((_DWORD *)v19 - 20);
              if (v25 == 1) {
                goto LABEL_47;
              }
              goto LABEL_58;
            }
          }
          else if ((*((char *)v19 - 41) & 0x80000000) == 0)
          {
            goto LABEL_54;
          }
          operator delete(*(v19 - 8));
          int v25 = *((_DWORD *)v19 - 20);
          if (v25 == 1)
          {
LABEL_47:
            uint64_t v24 = *(v19 - 13);
            if (!v24) {
              goto LABEL_50;
            }
            *(v19 - 12) = v24;
            goto LABEL_49;
          }
LABEL_58:
          if (!v25 && *((char *)v19 - 81) < 0)
          {
            uint64_t v24 = *(v19 - 13);
LABEL_49:
            operator delete(v24);
          }
LABEL_50:
          v19 -= 22;
        }
      }
      unint64_t v8 = v42;
      uint64_t v46 = (uint64_t)v42;
      long long v47 = v43;
      uint64_t v18 = (void **)v43;
      if (v42 == (void **)v43)
      {
LABEL_85:
        sub_3F4FA4(&v42);
        if (v8)
        {
          *(void *)&long long v47 = v8;
          operator delete(v8);
        }
        unint64_t v20 = v42;
        uint64_t v46 = (uint64_t)v42;
        long long v47 = v43;
        uint64_t v18 = (void **)v43;
        if (v42 != (void **)v43) {
          goto LABEL_88;
        }
        sub_7D8304(a1, a2, v5, v37, (uint64_t *)&v42);
        if (v20)
        {
          *(void *)&long long v47 = v20;
          operator delete(v20);
        }
        unint64_t v20 = v42;
        uint64_t v46 = (uint64_t)v42;
        long long v47 = v43;
        uint64_t v18 = (void **)v43;
        if (v42 != (void **)v43)
        {
LABEL_88:
          DWORD1(v48) = 1;
          goto LABEL_96;
        }
        sub_7D86DC(a1, a2, v5, v37, (uint64_t)&v42);
        if (!v18) {
          goto LABEL_95;
        }
        *(void *)&long long v47 = v18;
        double v28 = v18;
        goto LABEL_94;
      }
      DWORD1(v48) = 2;
      int64_t v19 = (void **)v43;
      unint64_t v20 = v42;
LABEL_83:
      BOOL v30 = v20 == v19;
      unint64_t v20 = v8;
      unint64_t v8 = v19;
      if (v30) {
        goto LABEL_85;
      }
LABEL_96:
      if (v20 != v18)
      {
        uint64_t v29 = (uint64_t)v20;
        while (1)
        {
          BOOL v30 = HIDWORD(v49) == -1 && v50 == -1;
          if (v30) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = sub_63A050(v29, (unsigned int *)&v49 + 1);
          }
          *(void *)&v44[4] = v31;
          if (sub_63A780(&v48, v29, &v45, &v44[4])) {
            goto LABEL_124;
          }
          sub_8CF0C4(v40, a3, (uint64_t)a2, (uint64_t)&v48, v44, v38);
          BYTE3(v48) = 0;
          *(_WORD *)((char *)&v48 + 1) = 0;
          LOBYTE(v48) = 1;
          *((void *)&v48 + 1) = -1;
          uint64_t v49 = -1;
          uint64_t v50 = 0x7FFFFFFFFFFFFFFFLL;
          DWORD1(v48) = 0;
          unint64_t v32 = (void **)__p[0];
          if (__p[0]) {
            break;
          }
LABEL_123:
          uint64_t v54 = 0;
          long long v52 = 0u;
          long long v53 = 0u;
          *(_OWORD *)std::string __p = 0u;
          unint64_t v55 = 0xBFF0000000000000;
          char v56 = 0;
LABEL_124:
          sub_63A148(&v48, v29);
          v29 += 176;
          if ((void **)v29 == v18)
          {
            unint64_t v8 = v20;
            int64_t v19 = v18;
            goto LABEL_38;
          }
        }
        unint64_t v33 = (void **)__p[1];
        uint64_t v34 = __p[0];
        if (__p[1] == __p[0])
        {
LABEL_122:
          __p[1] = v32;
          operator delete(v34);
          goto LABEL_123;
        }
        while (1)
        {
          if (*((char *)v33 - 9) < 0)
          {
            operator delete(*(v33 - 4));
            if ((*((char *)v33 - 41) & 0x80000000) == 0)
            {
LABEL_114:
              int v36 = *((_DWORD *)v33 - 20);
              if (v36 != 1) {
                goto LABEL_118;
              }
              goto LABEL_108;
            }
          }
          else if ((*((char *)v33 - 41) & 0x80000000) == 0)
          {
            goto LABEL_114;
          }
          operator delete(*(v33 - 8));
          int v36 = *((_DWORD *)v33 - 20);
          if (v36 != 1)
          {
LABEL_118:
            if (v36 || (*((char *)v33 - 81) & 0x80000000) == 0) {
              goto LABEL_111;
            }
            long long v35 = *(v33 - 13);
            goto LABEL_110;
          }
LABEL_108:
          long long v35 = *(v33 - 13);
          if (v35)
          {
            *(v33 - 12) = v35;
LABEL_110:
            operator delete(v35);
          }
LABEL_111:
          v33 -= 22;
          if (v33 == v32)
          {
            uint64_t v34 = __p[0];
            goto LABEL_122;
          }
        }
      }
      unint64_t v8 = v18;
      int64_t v19 = v18;
      unint64_t v20 = v18;
LABEL_38:
      if (v37-- <= *((int *)v5 + 10)) {
        goto LABEL_5;
      }
    }
    sub_7D8304(a1, a2, v5, v37, (uint64_t *)&v42);
    if (!v20)
    {
LABEL_77:
      unint64_t v20 = v42;
      uint64_t v46 = (uint64_t)v42;
      long long v47 = v43;
      uint64_t v18 = (void **)v43;
      if (v42 != (void **)v43) {
        goto LABEL_96;
      }
      sub_7D86DC(a1, a2, v5, v37, (uint64_t)&v42);
      if (!v20) {
        goto LABEL_95;
      }
      *(void *)&long long v47 = v20;
      double v28 = v20;
LABEL_94:
      operator delete(v28);
LABEL_95:
      unint64_t v20 = v42;
      uint64_t v46 = (uint64_t)v42;
      long long v47 = v43;
      uint64_t v18 = (void **)v43;
      goto LABEL_96;
    }
    while (1)
    {
      if (v19 == v20)
      {
        *(void *)&long long v47 = v20;
        operator delete(v20);
        goto LABEL_77;
      }
      if (*((char *)v19 - 9) < 0)
      {
        operator delete(*(v19 - 4));
        if ((*((char *)v19 - 41) & 0x80000000) == 0)
        {
LABEL_68:
          int v26 = *((_DWORD *)v19 - 20);
          if (v26 != 1) {
            goto LABEL_69;
          }
          goto LABEL_74;
        }
      }
      else if ((*((char *)v19 - 41) & 0x80000000) == 0)
      {
        goto LABEL_68;
      }
      operator delete(*(v19 - 8));
      int v26 = *((_DWORD *)v19 - 20);
      if (v26 != 1)
      {
LABEL_69:
        if (!v26 && *((char *)v19 - 81) < 0)
        {
          uint64_t v27 = *(v19 - 13);
LABEL_63:
          operator delete(v27);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
LABEL_74:
      uint64_t v27 = *(v19 - 13);
      if (v27)
      {
        *(v19 - 12) = v27;
        goto LABEL_63;
      }
LABEL_64:
      v19 -= 22;
    }
  }
LABEL_5:
  sub_8CF0C4(v40, a3, (uint64_t)a2, (uint64_t)&v48, v44, v38);
  if (!v8) {
    goto LABEL_21;
  }
  for (uint64_t i = (void **)v47; i != v8; i -= 22)
  {
    if (*((char *)i - 9) < 0)
    {
      operator delete(*(i - 4));
      if ((*((char *)i - 41) & 0x80000000) == 0)
      {
LABEL_12:
        int v11 = *((_DWORD *)i - 20);
        if (v11 != 1) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
    else if ((*((char *)i - 41) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(i - 8));
    int v11 = *((_DWORD *)i - 20);
    if (v11 != 1)
    {
LABEL_13:
      if (!v11 && *((char *)i - 81) < 0)
      {
        BOOL v12 = *(i - 13);
LABEL_7:
        operator delete(v12);
        continue;
      }
      continue;
    }
LABEL_18:
    BOOL v12 = *(i - 13);
    if (v12)
    {
      *(i - 12) = v12;
      goto LABEL_7;
    }
  }
  *(void *)&long long v47 = v8;
  operator delete(v8);
LABEL_21:
  BOOL v13 = (void **)__p[0];
  if (__p[0])
  {
    int v14 = (void **)__p[1];
    unint64_t v15 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_127:
      __p[1] = v13;
      operator delete(v15);
      return;
    }
    while (2)
    {
      if (*((char *)v14 - 9) < 0)
      {
        operator delete(*(v14 - 4));
        if (*((char *)v14 - 41) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 != 1) {
          goto LABEL_29;
        }
LABEL_34:
        unint64_t v17 = *(v14 - 13);
        if (v17)
        {
          *(v14 - 12) = v17;
LABEL_24:
          operator delete(v17);
        }
      }
      else
      {
        if ((*((char *)v14 - 41) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(*(v14 - 8));
        int v16 = *((_DWORD *)v14 - 20);
        if (v16 == 1) {
          goto LABEL_34;
        }
LABEL_29:
        if (!v16 && *((char *)v14 - 81) < 0)
        {
          unint64_t v17 = *(v14 - 13);
          goto LABEL_24;
        }
      }
      v14 -= 22;
      if (v14 == v13)
      {
        unint64_t v15 = __p[0];
        goto LABEL_127;
      }
      continue;
    }
  }
}

void sub_7D82C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_7D8304(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v42 = a1 + 2064;
  unint64_t v9 = sub_8C78A4(a1 + 2064, a3, 0);
  int v59 = v9;
  __int16 v60 = WORD2(v9);
  uint64_t v10 = a2;
  int v11 = (void *)a4;
  BOOL v12 = (unsigned int *)sub_470B40(a2, a4);
  uint64_t v43 = a1;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *v12;
  unint64_t v15 = ((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | v14;
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  unint64_t v17 = (int *)sub_2D5D58(v13, v15 & 0xFFFFFFFFFFFFLL);
  char v18 = BYTE6(v15) ^ 1;
  unint64_t v19 = (v15 ^ 0x1000000000000) >> 32;
  if (*(unsigned char *)(v13 + 7772))
  {
    unint64_t v20 = sub_2DB8E0(v13 + 3896, v14, 0);
    uint64_t v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 < 5u)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = *((unsigned __int16 *)v21 + 2);
      if (v22) {
        v22 += (uint64_t)&v20[*(unsigned int *)&v20[v22]];
      }
    }
    long long v23 = (int *)(v22
                + 4 * (unsigned __int16)((v15 ^ 0x1000000000000) >> 32)
                + 4
                + *(unsigned int *)(v22 + 4 * (unsigned __int16)((v15 ^ 0x1000000000000) >> 32) + 4));
  }
  else
  {
    long long v23 = 0;
  }
  v55[0] = v17;
  v55[1] = v23;
  v55[2] = (int *)sub_2E5C38(v13, v16, 1);
  v55[3] = v24;
  unsigned int v56 = v14;
  unsigned __int16 v57 = v19;
  char v58 = v18;
  std::string __p = v11;
  sub_8CD6CC(v42, v55, &v59, &__p, 0, (uint64_t)v47);
  int v25 = v10;
  int v26 = (void *)v43;
  if (*a5)
  {
    sub_52F808(a5);
    operator delete((void *)*a5);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  uint64_t v27 = *(void *)v47;
  *a5 = *(void *)v47;
  uint64_t v28 = *(void *)&v47[8];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)&v47[8];
  if (v27 == v28 && *(unsigned char *)(v43 + 1998))
  {
    uint64_t v29 = *(void *)(v43 + 16);
    long long v53 = 0;
    uint64_t v54 = 0;
    std::string __p = 0;
    *(void *)long long v47 = &__p;
    sub_2E719C(v29, v56 | ((unint64_t)v57 << 32), 8, (uint64_t)v47);
    if (__p == v53)
    {
      if (*a5 != a5[1])
      {
LABEL_29:
        if (__p)
        {
          long long v53 = __p;
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      uint64_t v30 = *(void *)(v43 + 16);
      uint64_t v31 = *(v53 - 3);
      uint64_t v32 = sub_2D5D58(v30, v31 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v30 + 7772))
      {
        unint64_t v33 = sub_2DB8E0(v30 + 3896, v31, 0);
        uint64_t v34 = &v33[-*(int *)v33];
        if (*(unsigned __int16 *)v34 < 5u)
        {
          uint64_t v35 = 0;
        }
        else
        {
          uint64_t v35 = *((unsigned __int16 *)v34 + 2);
          if (v35) {
            v35 += (uint64_t)&v33[*(unsigned int *)&v33[v35]];
          }
        }
        uint64_t v36 = v35 + 4 * WORD2(v31) + 4 + *(unsigned int *)(v35 + 4 * WORD2(v31) + 4);
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v37 = sub_2E5C38(v30, v31 & 0xFFFFFFFFFFFFLL, 1);
      *(void *)long long v47 = v32;
      *(void *)&v47[8] = v36;
      *(void *)&v47[16] = v37;
      uint64_t v48 = v38;
      int v49 = v31;
      __int16 v50 = WORD2(v31);
      BOOL v51 = (v31 & 0xFF000000000000) != 0;
      char v44 = v11;
      sub_8CD6CC(v42, (int **)v47, &v59, &v44, 1, (uint64_t)&v45);
      int v26 = (void *)v43;
      if (*a5)
      {
        sub_52F808(a5);
        operator delete((void *)*a5);
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      uint64_t v39 = v45;
      *a5 = v45;
      uint64_t v40 = v46;
      *(_OWORD *)(a5 + 1) = v46;
      if (v39 != v40) {
        goto LABEL_29;
      }
    }
    sub_7D8C10(v26, v25, a3, (uint64_t)v11, (uint64_t)v47);
    if (*a5)
    {
      sub_52F808(a5);
      operator delete((void *)*a5);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
    *(_OWORD *)a5 = *(_OWORD *)v47;
    a5[2] = *(void *)&v47[16];
    goto LABEL_29;
  }
}

void sub_7D868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    sub_63A3EC(v24);
    _Unwind_Resume(a1);
  }
  sub_63A3EC(v24);
  _Unwind_Resume(a1);
}

void sub_7D86DC(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1 + 2064;
  unint64_t v11 = sub_8C78A4(a1 + 2064, a3, 1);
  int v61 = v11;
  __int16 v62 = WORD2(v11);
  if ((v11 & 0xFFFFFF00) == 0)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    return;
  }
  unint64_t v12 = sub_8C78A4(v10, a3, 0);
  int v59 = v12;
  __int16 v60 = WORD2(v12);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  uint64_t v45 = (void *)a4;
  uint64_t v13 = (unsigned int *)sub_470B40(a2, a4);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *v13;
  unint64_t v44 = (unint64_t)(unsigned __int16)v13[1] << 32;
  unint64_t v16 = v44 & 0xFFFEFFFFFFFFFFFFLL | ((((unint64_t)(v13[1] & 0x20000000) >> 29) & 1) << 48) | v15;
  uint64_t v17 = sub_2D5D58(v14, v44 & 0xFFFFFFFFFFFFLL | v15 & 0xFFFFFFFFFFFFLL);
  unint64_t v18 = v16 ^ 0x1000000000000;
  unint64_t v19 = (v16 ^ 0x1000000000000) >> 32;
  if (*(unsigned char *)(v14 + 7772))
  {
    unint64_t v20 = sub_2DB8E0(v14 + 3896, v15, 0);
    uint64_t v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 < 5u)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = *((unsigned __int16 *)v21 + 2);
      if (v22) {
        v22 += (uint64_t)&v20[*(unsigned int *)&v20[v22]];
      }
    }
    uint64_t v23 = v22
        + 4 * (unsigned __int16)((v16 ^ 0x1000000000000) >> 32)
        + 4
        + *(unsigned int *)(v22 + 4 * (unsigned __int16)((v16 ^ 0x1000000000000) >> 32) + 4);
  }
  else
  {
    uint64_t v23 = 0;
  }
  *(void *)&long long v56 = v17;
  *((void *)&v56 + 1) = v23;
  *(void *)&long long v57 = sub_2E5C38(v14, v44 & 0xFFFFFFFFFFFFLL | v15 & 0xFFFFFFFFFFFFLL, 1);
  *((void *)&v57 + 1) = v24;
  LODWORD(v58) = v15;
  WORD2(v58) = v19;
  BYTE6(v58) = HIWORD(v18) == 0;
  std::string __p = v45;
  sub_8CD6CC(v10, (int **)&v56, &v61, &__p, 0, (uint64_t)v47);
  if (*(void *)a5)
  {
    sub_52F808((uint64_t *)a5);
    operator delete(*(void **)a5);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  uint64_t v25 = *(void *)v47;
  *(void *)a5 = *(void *)v47;
  uint64_t v26 = *(void *)&v47[8];
  *(_OWORD *)(a5 + 8) = *(_OWORD *)&v47[8];
  if (v25 == v26 && *(unsigned char *)(a1 + 1998))
  {
    uint64_t v27 = *(void *)(a1 + 16);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    std::string __p = 0;
    *(void *)&long long v56 = &__p;
    sub_2E719C(v27, v44 | v15, 8, (uint64_t)&v56);
    uint64_t v28 = v54;
    if (v54 == __p) {
      goto LABEL_47;
    }
    unint64_t v29 = 0;
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v54 - (unsigned char *)__p) >> 3);
    while (1)
    {
      uint64_t v30 = *(void *)(a1 + 16);
      uint64_t v31 = *((void *)__p + 3 * v29);
      uint64_t v32 = sub_2D5D58(v30, v31 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v30 + 7772))
      {
        unint64_t v33 = sub_2DB8E0(v30 + 3896, v31, 0);
        uint64_t v34 = &v33[-*(int *)v33];
        if (*(unsigned __int16 *)v34 < 5u)
        {
          uint64_t v35 = 0;
        }
        else
        {
          uint64_t v35 = *((unsigned __int16 *)v34 + 2);
          if (v35) {
            v35 += (uint64_t)&v33[*(unsigned int *)&v33[v35]];
          }
        }
        uint64_t v36 = v35 + 4 * WORD2(v31) + 4 + *(unsigned int *)(v35 + 4 * WORD2(v31) + 4);
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v37 = sub_2E5C38(v30, v31 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v38 = 0;
      *(void *)&long long v56 = v32;
      *((void *)&v56 + 1) = v36;
      *(void *)&long long v57 = v37;
      *((void *)&v57 + 1) = v39;
      LODWORD(v58) = v31;
      WORD2(v58) = WORD2(v31);
      BYTE6(v58) = (v31 & 0xFF000000000000) != 0;
      BOOL v51 = 0;
      long long v52 = 0uLL;
      if (v29 >= -1 - 0x5555555555555555 * (((unsigned char *)v54 - (unsigned char *)__p) >> 3)
        || (int v49 = v45,
            sub_8CD6CC(v10, (int **)&v56, &v59, &v49, 1, (uint64_t)v47),
            uint64_t v40 = *(unsigned char **)v47,
            BOOL v51 = *(unsigned char **)v47,
            long long v52 = *(_OWORD *)&v47[8],
            uint64_t v38 = *(char **)&v47[8],
            *(void *)v47 == *(void *)&v47[8]))
      {
        uint64_t v48 = v58;
        *(_OWORD *)long long v47 = v56;
        *(_OWORD *)&v47[16] = v57;
        BYTE6(v48) = BYTE6(v58) ^ 1;
        long long v46 = v45;
        sub_8CD6CC(v10, (int **)v47, &v61, &v46, 1, (uint64_t)&v49);
        if (v38)
        {
          *(void *)&long long v52 = v38;
          operator delete(v38);
        }
        uint64_t v40 = v49;
        BOOL v51 = v49;
        long long v52 = v50;
        uint64_t v38 = (char *)v50;
      }
      sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v40, (uint64_t)v38, 0x2E8BA2E8BA2E8BA3 * ((v38 - v40) >> 4));
      if (v40) {
        break;
      }
LABEL_18:
      if (++v29 == v43)
      {
        uint64_t v28 = __p;
LABEL_47:
        if (v28)
        {
          uint64_t v54 = v28;
          operator delete(v28);
        }
        return;
      }
    }
    while (1)
    {
      if (v38 == v40)
      {
        operator delete(v40);
        goto LABEL_18;
      }
      if (*(v38 - 9) < 0)
      {
        operator delete(*((void **)v38 - 4));
        if ((*(v38 - 41) & 0x80000000) == 0)
        {
LABEL_38:
          int v41 = *((_DWORD *)v38 - 20);
          if (v41 != 1) {
            goto LABEL_39;
          }
          goto LABEL_44;
        }
      }
      else if ((*(v38 - 41) & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(*((void **)v38 - 8));
      int v41 = *((_DWORD *)v38 - 20);
      if (v41 != 1)
      {
LABEL_39:
        if (!v41 && *(v38 - 81) < 0)
        {
          uint64_t v42 = (void *)*((void *)v38 - 13);
LABEL_33:
          operator delete(v42);
          goto LABEL_34;
        }
        goto LABEL_34;
      }
LABEL_44:
      uint64_t v42 = (void *)*((void *)v38 - 13);
      if (v42)
      {
        *((void *)v38 - 12) = v42;
        goto LABEL_33;
      }
LABEL_34:
      v38 -= 176;
    }
  }
}

void sub_7D8B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_63A3EC(v25);
  _Unwind_Resume(a1);
}

void sub_7D8C10(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v8 = (unsigned int *)sub_470B40(a2, a4);
  uint64_t v9 = *v8;
  unint64_t v10 = ((unint64_t)(v8[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v8[1] << 32) | v9;
  unint64_t v11 = v10 ^ 0x1000000000000;
  uint64_t v12 = a1[2];
  unint64_t v13 = (v10 ^ 0x1000000000000) >> 32;
  unint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
  uint64_t v15 = sub_2D5D58(v12, v10 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v12 + 7772))
  {
    unint64_t v16 = sub_2DB8E0(v12 + 3896, v9, 0);
    uint64_t v17 = &v16[-*(int *)v16];
    if (*(unsigned __int16 *)v17 < 5u)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = *((unsigned __int16 *)v17 + 2);
      if (v18) {
        v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
      }
    }
    uint64_t v19 = v18 + 4 * (unsigned __int16)v13 + 4 + *(unsigned int *)(v18 + 4 * (unsigned __int16)v13 + 4);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = sub_2E5C38(v12, v14, 1);
  v75[0] = v15;
  v75[1] = v19;
  v75[2] = v20;
  v75[3] = v21;
  unsigned int v76 = v9;
  unsigned __int16 v77 = v13;
  char v78 = BYTE6(v11);
  BOOL v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  sub_2E44A4(a1[2], (uint64_t)v75, &v72);
  uint64_t v22 = v72;
  if (v72 == (char *)v73)
  {
LABEL_24:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (!v22) {
      return;
    }
    goto LABEL_25;
  }
  uint64_t v23 = v72;
  while (1)
  {
    uint64_t v24 = (unsigned __int16 *)(*(void *)v23 - **(int **)v23);
    if (*v24 >= 0x2Fu)
    {
      uint64_t v25 = v24[23];
      if (v25)
      {
        if (*(unsigned char *)(*(void *)v23 + v25) == 14) {
          break;
        }
      }
    }
    v23 += 40;
    if (v23 == (char *)v73) {
      goto LABEL_24;
    }
  }
  uint64_t v26 = a1[2];
  unsigned int v70 = 0;
  uint64_t v71 = 0;
  unsigned int v69 = 0;
  *(void *)&long long v66 = &v69;
  sub_2E719C(v26, v76 | ((unint64_t)v77 << 32), 8, (uint64_t)&v66);
  uint64_t v27 = (char *)v69;
  if (v69 == v70)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    if (v27)
    {
LABEL_73:
      unsigned int v70 = v27;
      operator delete(v27);
    }
  }
  else
  {
    uint64_t v28 = v70 - 24;
    if (HIWORD(v11)) {
      uint64_t v28 = (char *)v69;
    }
    uint64_t v29 = *(void *)v28;
    uint64_t v30 = a1[2];
    uint64_t v31 = *(void *)v28 & 0xFFFFFFFFFFFFLL;
    sub_2D5D58(v30, v31);
    if (*(unsigned char *)(v30 + 7772)) {
      sub_2DB8E0(v30 + 3896, v29, 0);
    }
    sub_2E5C38(v30, v31, 1);
    sub_2E3BB0(a1[2], (uint64_t)v75, v31, (uint64_t)&v66);
    if (v68 && (void)v66 && *((void *)&v66 + 1))
    {
      unint64_t v32 = sub_8C78A4((uint64_t)(a1 + 258), a3, 0);
      int v64 = v32;
      __int16 v65 = WORD2(v32);
      unint64_t v33 = sub_8C78A4((uint64_t)(a1 + 258), a3, 1);
      int v62 = v33;
      __int16 v63 = WORD2(v33);
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(void *)a5 = 0;
      if ((a1[251] & 0x8000000000000000) == 0)
      {
        uint64_t v34 = 0;
        while (1)
        {
          uint64_t v73 = (uint64_t)v72;
          sub_2E44A4(a1[2], (uint64_t)&v66, &v72);
          uint64_t v36 = sub_6DE7E0(*a1 + 1160, (int **)&v66, (uint64_t *)&v72, -1);
          if (v36 == -1) {
            goto LABEL_72;
          }
          uint64_t v37 = &v72[40 * v36];
          uint64_t v38 = *((void *)v37 + 4);
          long long v39 = *((_OWORD *)v37 + 1);
          long long v66 = *(_OWORD *)v37;
          long long v67 = v39;
          uint64_t v68 = v38;
          *(void *)&v56[0] = a4;
          sub_8CD6CC((uint64_t)(a1 + 258), (int **)&v66, &v64, v56, 1, (uint64_t)&__p);
          uint64_t v40 = __p;
          uint64_t v41 = v61;
          if (__p == (void *)v61) {
            break;
          }
LABEL_50:
          sub_7DF3FC(a5, *(long long **)(a5 + 8), (uint64_t)v40, v41, 0x2E8BA2E8BA2E8BA3 * ((v41 - (uint64_t)v40) >> 4));
          long long v47 = (unsigned __int16 *)(v66 - *(int *)v66);
          if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0)
          {
            uint64_t v49 = *(unsigned int *)(v66 + v48);
            long long v50 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v49 = 0;
            long long v50 = (void **)__p;
            if (!__p) {
              goto LABEL_29;
            }
          }
          BOOL v51 = (void **)v61;
          uint64_t v35 = v50;
          if ((void **)v61 != v50)
          {
            while (1)
            {
              if (*((char *)v51 - 9) < 0)
              {
                operator delete(*(v51 - 4));
                if ((*((char *)v51 - 41) & 0x80000000) == 0)
                {
LABEL_61:
                  int v52 = *((_DWORD *)v51 - 20);
                  if (v52 != 1) {
                    goto LABEL_62;
                  }
                  goto LABEL_67;
                }
              }
              else if ((*((char *)v51 - 41) & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(*(v51 - 8));
              int v52 = *((_DWORD *)v51 - 20);
              if (v52 != 1)
              {
LABEL_62:
                if (v52 || (*((char *)v51 - 81) & 0x80000000) == 0) {
                  goto LABEL_58;
                }
                long long v53 = *(v51 - 13);
                goto LABEL_57;
              }
LABEL_67:
              long long v53 = *(v51 - 13);
              if (!v53) {
                goto LABEL_58;
              }
              *(v51 - 12) = v53;
LABEL_57:
              operator delete(v53);
LABEL_58:
              v51 -= 22;
              if (v51 == v50)
              {
                uint64_t v35 = __p;
                break;
              }
            }
          }
          *(void *)&long long v61 = v50;
          operator delete(v35);
LABEL_29:
          v34 += v49;
          if (v34 > a1[251]) {
            goto LABEL_72;
          }
        }
        uint64_t v57 = v68;
        v56[0] = v66;
        v56[1] = v67;
        BYTE6(v57) = BYTE6(v68) ^ 1;
        uint64_t v55 = a4;
        sub_8CD6CC((uint64_t)(a1 + 258), (int **)v56, &v62, &v55, 1, (uint64_t)&v58);
        uint64_t v42 = (void **)__p;
        if (!__p)
        {
LABEL_49:
          uint64_t v40 = v58;
          std::string __p = v58;
          long long v61 = v59;
          uint64_t v41 = v59;
          goto LABEL_50;
        }
        unint64_t v43 = (void **)v61;
        unint64_t v44 = __p;
        if ((void *)v61 == __p)
        {
LABEL_48:
          *(void *)&long long v61 = v42;
          operator delete(v44);
          goto LABEL_49;
        }
        while (1)
        {
          if (*((char *)v43 - 9) < 0)
          {
            operator delete(*(v43 - 4));
            if ((*((char *)v43 - 41) & 0x80000000) == 0)
            {
LABEL_39:
              int v45 = *((_DWORD *)v43 - 20);
              if (v45 != 1) {
                goto LABEL_40;
              }
              goto LABEL_45;
            }
          }
          else if ((*((char *)v43 - 41) & 0x80000000) == 0)
          {
            goto LABEL_39;
          }
          operator delete(*(v43 - 8));
          int v45 = *((_DWORD *)v43 - 20);
          if (v45 != 1)
          {
LABEL_40:
            if (v45 || (*((char *)v43 - 81) & 0x80000000) == 0) {
              goto LABEL_36;
            }
            long long v46 = *(v43 - 13);
            goto LABEL_35;
          }
LABEL_45:
          long long v46 = *(v43 - 13);
          if (!v46) {
            goto LABEL_36;
          }
          *(v43 - 12) = v46;
LABEL_35:
          operator delete(v46);
LABEL_36:
          v43 -= 22;
          if (v43 == v42)
          {
            unint64_t v44 = __p;
            goto LABEL_48;
          }
        }
      }
    }
    else
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
    }
LABEL_72:
    uint64_t v27 = (char *)v69;
    if (v69) {
      goto LABEL_73;
    }
  }
  uint64_t v22 = v72;
  if (!v72) {
    return;
  }
LABEL_25:
  uint64_t v73 = (uint64_t)v22;
  operator delete(v22);
}

void sub_7D9170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v33 = *(void **)(v31 - 160);
    if (!v33) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 - 152) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_7D91E8()
{
  if (*(void *)(v0 - 160)) {
    JUMPOUT(0x7D91D8);
  }
  JUMPOUT(0x7D91C0);
}

uint64_t sub_7D91F8(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v8 = sub_470ADC(a1);
        unint64_t v9 = sub_470ADC(a3);
        if (v6 >= v8 || a4 >= v9)
        {
          if (v6 < v8 == a4 < v9) {
            return 0;
          }
        }
        else
        {
          uint64_t v10 = sub_470B40(a1, v6);
          if (v10 == sub_470B40(a3, a4)) {
            return 0;
          }
        }
        uint64_t v11 = sub_470B40(a1, v6);
        uint64_t v12 = *(int **)(v11 + 8);
        unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        unsigned int v14 = *v13;
        if (*(unsigned char *)(v11 + 46))
        {
          if (v14 >= 0xB)
          {
            unsigned int v15 = v13[5];
            if (v15)
            {
              if ((*(int *)((char *)v12 + v15) & 0x40) != 0) {
                return 1;
              }
            }
          }
        }
        else if (v14 >= 0xB)
        {
          unsigned int v16 = v13[5];
          if (v16)
          {
            if ((*(int *)((char *)v12 + v16) & 0x80) != 0) {
              return 1;
            }
          }
        }
        ++v6;
      }
    }
    if (a2 >= sub_470ADC(a1)) {
      return 0;
    }
    while (1)
    {
      uint64_t v18 = sub_470B40(a1, v6);
      uint64_t v19 = *(int **)(v18 + 8);
      uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      unsigned int v21 = *v20;
      if (*(unsigned char *)(v18 + 46))
      {
        if (v21 >= 0xB)
        {
          unsigned int v22 = v20[5];
          if (v22)
          {
            int v23 = 64;
            goto LABEL_20;
          }
        }
      }
      else if (v21 >= 0xB)
      {
        unsigned int v22 = v20[5];
        if (v22)
        {
          int v23 = 128;
LABEL_20:
          if ((*(int *)((char *)v19 + v22) & v23) != 0) {
            return 1;
          }
        }
      }
      if (++v6 >= sub_470ADC(a1)) {
        return 0;
      }
    }
  }
  if (a3 && a4 < sub_470ADC(a3))
  {
    do
    {
      uint64_t v24 = sub_470B40(0, v6);
      uint64_t v25 = *(int **)(v24 + 8);
      uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
      unsigned int v27 = *v26;
      if (*(unsigned char *)(v24 + 46))
      {
        if (v27 < 0xB) {
          goto LABEL_33;
        }
        unsigned int v28 = v26[5];
        if (!v28) {
          goto LABEL_33;
        }
        int v29 = 64;
      }
      else
      {
        if (v27 < 0xB) {
          goto LABEL_33;
        }
        unsigned int v28 = v26[5];
        if (!v28) {
          goto LABEL_33;
        }
        int v29 = 128;
      }
      if ((*(int *)((char *)v25 + v28) & v29) != 0) {
        return 1;
      }
LABEL_33:
      ++v6;
    }
    while (a4 < sub_470ADC(a3));
  }
  return 0;
}

uint64_t sub_7D942C(uint64_t result, void *a2, unint64_t a3)
{
  if (*(unsigned char *)(result + 2054))
  {
    unint64_t result = sub_51690C(a2 + 133, a3);
    unsigned int v4 = *(_DWORD *)(result + 160);
    if ((v4 > 0x19 || ((1 << v4) & 0x2020080) == 0) && v4 != 85 && v4 != 88)
    {
      unint64_t v6 = (int64x2_t *)result;
      uint64_t v36 = 0;
      unint64_t v7 = *(void *)(result + 16);
      if (v7 > *(void *)(result + 40))
      {
        char v8 = 0;
        do
        {
          uint64_t v9 = sub_470B40(a2, v7);
          uint64_t v11 = *(int **)(v9 + 8);
          uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
          unsigned int v13 = *v12;
          if (*(unsigned char *)(v9 + 46))
          {
            if (v13 < 0xB) {
              goto LABEL_23;
            }
            unsigned int v14 = v12[5];
            if (!v14 || (*(int *)((char *)v11 + v14) & 0x80) == 0) {
              goto LABEL_23;
            }
          }
          else if (v13 < 0xB || (unsigned int v15 = v12[5]) == 0 || (*(int *)((char *)v11 + v15) & 0x40) == 0)
          {
LABEL_23:
            uint64_t v19 = *(int **)(sub_470B40(a2, v7) + 8);
            uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
            if (*v20 >= 0x2Fu)
            {
              uint64_t v21 = v20[23];
              if (v21)
              {
                unsigned int v22 = *((unsigned __int8 *)v19 + v21);
                BOOL v23 = v22 > 0x36;
                uint64_t v24 = (1 << v22) & 0x44000000000008;
                BOOL v25 = v23 || v24 == 0;
                if (!v25 && (v8 & 1) == 0)
                {
                  char v8 = 1;
                  goto LABEL_12;
                }
              }
            }
            uint64_t v26 = *(int **)(sub_470B40(a2, v7) + 8);
            unsigned int v27 = (unsigned __int16 *)((char *)v26 - *v26);
            if (*v27 >= 0x2Fu)
            {
              uint64_t v28 = v27[23];
              if (v28)
              {
                unsigned int v29 = *((unsigned __int8 *)v26 + v28);
                BOOL v23 = v29 > 0x36;
                uint64_t v30 = (1 << v29) & 0x44000000000008;
                if (!v23 && v30 != 0) {
                  goto LABEL_12;
                }
              }
            }
            if (v8)
            {
              LOBYTE(v35) = 1;
              unint64_t v32 = v6[117].u64[1];
              if (v32 >= v6[118].i64[0])
              {
                uint64_t v33 = sub_7DFE08(v6 + 117, &v36, (char *)&v35);
              }
              else
              {
                sub_63AC64(v6[117].i64[1], &v36, 1);
                uint64_t v33 = v32 + 184;
                v6[117].i64[1] = v32 + 184;
              }
              char v8 = 0;
              goto LABEL_43;
            }
            char v8 = 0;
            goto LABEL_12;
          }
          uint64_t v16 = sub_470F2C(a2, v7, v10);
          uint64_t v35 = v36 + v16;
          char v34 = 1;
          unint64_t v17 = v6[117].u64[1];
          if (v17 >= v6[118].i64[0])
          {
            uint64_t v33 = sub_7DFBBC(v6 + 117, &v35, &v34);
LABEL_43:
            v6[117].i64[1] = v33;
            goto LABEL_12;
          }
          sub_63AC64(v6[117].i64[1], &v35, 1);
          v6[117].i64[1] = v17 + 184;
          v6[117].i64[1] = v17 + 184;
LABEL_12:
          unint64_t result = sub_470F2C(a2, v7, v18);
          v36 += result;
          --v7;
        }
        while (v7 > v6[2].i64[1]);
      }
    }
  }
  return result;
}

void sub_7D96B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D96C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1880) = v2;
  _Unwind_Resume(a1);
}

void sub_7D96C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = sub_51690C((void *)(a2 + 1064), a3);
  uint64_t v5 = *(uint64_t **)(v3 + 1872);
  unint64_t v6 = *(int64_t **)(v3 + 1880);
  if ((char *)v6 - (char *)v5 < 1)
  {
LABEL_5:
    double v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0xD37A6F4DE9BD37A7 * (v6 - v5);
    while (1)
    {
      char v8 = operator new(184 * v7, &std::nothrow);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    double v10 = v8;
  }
  sub_7E43D0(v5, v6, (uint64_t)&v11, 0xD37A6F4DE9BD37A7 * (v6 - v5), (uint64_t)v10, v7, v4);
  if (v10) {
    operator delete(v10);
  }
}

void sub_7D97A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_7D97BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_6510C8((void *)a2))
  {
    uint64_t v6 = *(void *)(a2 + 1064);
    if (*(unsigned char *)(v6 + 2400 * a3 + 328) == 5)
    {
      unsigned int v7 = *(_DWORD *)(v6 + 2400 * a3 + 160);
      if (v7 - 25 <= 0x3F && ((1 << (v7 - 25)) & 0x9000000000000001) != 0 || v7 == 17)
      {
        uint64_t v10 = sub_374DF4(a2);
        unint64_t v11 = *(void *)(v10 + 24);
        __n128 result = *(__n128 *)(v10 + 8);
        uint64_t v12 = (__n128 *)(v6 + 2400 * a3);
        v12[126] = result;
        v12[127].n128_u64[0] = v11;
      }
      else if (v7 - 82 >= 3 {
             && ((v13 = v7 > 0x27, uint64_t v14 = (1 << v7) & 0x8600050000, !v13) ? (v15 = v14 == 0) : (v15 = 1), v15))
      }
      {
        unint64_t v17 = (__n128 *)(v6 + 2400 * a3);
        sub_650E50(a2, v17[1].n128_u64[1] - 1, (uint64_t)&v18);
        __n128 result = v18;
        v17[127].n128_u64[0] = v19;
        v17[126] = result;
      }
      else
      {
        sub_64EDB4((_DWORD *)a2, (uint64_t)&v18);
        __n128 result = v18;
        uint64_t v16 = (__n128 *)(v6 + 2400 * a3);
        v16[127].n128_u64[0] = v19;
        v16[126] = result;
      }
    }
  }
  return result;
}

void sub_7D990C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (!*(unsigned char *)(a2 + 320)) {
    return;
  }
  uint64_t v6 = sub_46C8EC(a3, *(void *)(a2 + 16));
  uint64_t v7 = *(void *)(v6 + 32);
  long long v8 = *(_OWORD *)(v6 + 16);
  v51[0] = *(_OWORD *)v6;
  v51[1] = v8;
  uint64_t v52 = v7;
  BOOL v9 = (int **)sub_46C8EC(a3, *(void *)(a2 + 24));
  uint64_t v10 = (unsigned __int16 *)(*(void *)&v51[0] - (int)**(_DWORD **)&v51[0]);
  unsigned int v11 = *v10;
  if (!BYTE6(v52))
  {
    if (v11 < 0x4B) {
      goto LABEL_9;
    }
    unsigned int v12 = v10[37];
    if (!v12) {
      goto LABEL_9;
    }
LABEL_8:
    __int16 v13 = *(_WORD *)(*(void *)&v51[0] + v12);
    goto LABEL_10;
  }
  if (v11 >= 0x49)
  {
    unsigned int v12 = v10[36];
    if (v12) {
      goto LABEL_8;
    }
  }
LABEL_9:
  __int16 v13 = -1;
LABEL_10:
  uint64_t v14 = (unsigned __int16 *)((char *)*v9 - **v9);
  unsigned int v15 = *v14;
  if (*((unsigned char *)v9 + 38))
  {
    if (v15 < 0x4B || (unsigned int v16 = v14[37]) == 0)
    {
LABEL_17:
      int v17 = 0xFFFF;
      goto LABEL_18;
    }
  }
  else
  {
    if (v15 < 0x49) {
      goto LABEL_17;
    }
    unsigned int v16 = v14[36];
    if (!v16) {
      goto LABEL_17;
    }
  }
  int v17 = *(unsigned __int16 *)((char *)*v9 + v16);
LABEL_18:
  sub_68D800(*a1, (uint64_t)v51, 1, &v49);
  uint64_t v19 = *v49;
  uint64_t v18 = v49[1];
  if (*v49 == v18) {
    goto LABEL_76;
  }
  unsigned __int16 v20 = v13 + 18000;
  if ((unsigned __int16)((unsigned __int16)(v13 + 18000) >> 5) >= 0x465u) {
    unsigned __int16 v20 = v13 - 18000;
  }
  int v21 = v17 - v20;
  if (v21 > 18000) {
    v21 -= 36000;
  }
  if (v21 < -17999) {
    v21 += 36000;
  }
  double v22 = fabs((double)v21 / 100.0);
  while (1)
  {
    uint64_t v23 = a1[2];
    uint64_t v24 = *(void *)(*(void *)(v19 + 8) - 8);
    BOOL v25 = (int *)sub_2D5D58(v23, v24 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v23 + 7772)) {
      sub_2DB8E0(v23 + 3896, v24, 0);
    }
    sub_2E5C38(v23, v24 & 0xFFFFFFFFFFFFLL, 1);
    uint64_t v26 = (unsigned __int16 *)(*(void *)&v51[0] - (int)**(_DWORD **)&v51[0]);
    unsigned int v27 = *v26;
    if (BYTE6(v52))
    {
      if (v27 >= 0x49)
      {
        unsigned int v28 = v26[36];
        if (v28) {
          goto LABEL_36;
        }
      }
    }
    else if (v27 >= 0x4B)
    {
      unsigned int v28 = v26[37];
      if (v28)
      {
LABEL_36:
        __int16 v29 = *(_WORD *)(*(void *)&v51[0] + v28);
        uint64_t v30 = (unsigned __int16 *)((char *)v25 - *v25);
        unsigned int v31 = *v30;
        if ((v24 & 0xFF000000000000) != 0) {
          goto LABEL_41;
        }
        goto LABEL_37;
      }
    }
    __int16 v29 = -1;
    uint64_t v30 = (unsigned __int16 *)((char *)v25 - *v25);
    unsigned int v31 = *v30;
    if ((v24 & 0xFF000000000000) != 0)
    {
LABEL_41:
      if (v31 >= 0x4B)
      {
        unsigned int v32 = v30[37];
        if (v32) {
          goto LABEL_43;
        }
      }
      goto LABEL_44;
    }
LABEL_37:
    if (v31 >= 0x49)
    {
      unsigned int v32 = v30[36];
      if (v32)
      {
LABEL_43:
        int v33 = *(unsigned __int16 *)((char *)v25 + v32);
        goto LABEL_45;
      }
    }
LABEL_44:
    int v33 = 0xFFFF;
LABEL_45:
    unsigned __int16 v34 = v29 + 18000;
    unsigned __int16 v35 = v29 - 18000;
    if ((unsigned __int16)(v34 >> 5) < 0x465u) {
      unsigned __int16 v35 = v34;
    }
    int v36 = v33 - v35;
    if (v36 > 18000) {
      v36 -= 36000;
    }
    if (v36 < -17999) {
      v36 += 36000;
    }
    if (fabs((double)v36 / 100.0) < v22 || !sub_7D9E84(*(_DWORD *)(v19 + 24))) {
      goto LABEL_27;
    }
    sub_5D1A3C(*(void *)(*(void *)(v19 + 8) - 8), a1[2], a1[752] + 968, (uint64_t)&__str);
    if (sub_6F2FD8((uint64_t)&__str))
    {
      uint64_t v38 = *(unsigned __int8 **)(a2 + 336);
      uint64_t v37 = *(unsigned __int8 **)(a2 + 344);
      if (v38 == v37) {
        break;
      }
      while (!sub_6F317C(v38, (unsigned __int8 *)&__str))
      {
        v38 += 152;
        if (v38 == v37)
        {
          uint64_t v38 = v37;
          break;
        }
      }
      if (v38 == *(unsigned __int8 **)(a2 + 344)) {
        break;
      }
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v48.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_63:
        if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_68;
      }
    }
    else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
    operator delete(v46.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_26;
      }
      goto LABEL_69;
    }
LABEL_68:
    operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_26:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_70;
      }
      goto LABEL_27;
    }
LABEL_69:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_70:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_27:
    v19 += 192;
    if (v19 == v18) {
      goto LABEL_76;
    }
  }
  std::string::operator=((std::string *)(a2 + 408), &__str);
  *(void *)(a2 + 432) = v41;
  std::string::operator=((std::string *)(a2 + 440), &__p);
  *(void *)(a2 + 464) = v43;
  *(_DWORD *)(a2 + 472) = v44;
  std::string::operator=((std::string *)(a2 + 480), &v45);
  std::string::operator=((std::string *)(a2 + 504), &v46);
  *(_DWORD *)(a2 + 528) = v47;
  std::string::operator=((std::string *)(a2 + 536), &v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_81;
    }
LABEL_73:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_74;
    }
LABEL_82:
    operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_83;
    }
LABEL_75:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_84:
    operator delete(__str.__r_.__value_.__l.__data_);
    long long v39 = v50;
    if (v50)
    {
LABEL_77:
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  else
  {
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
LABEL_81:
    operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_82;
    }
LABEL_74:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_75;
    }
LABEL_83:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_84;
    }
LABEL_76:
    long long v39 = v50;
    if (v50) {
      goto LABEL_77;
    }
  }
}

void sub_7D9E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4A50F4((uint64_t)va);
  sub_14A84(v6 - 176);
  _Unwind_Resume(a1);
}

void sub_7D9E70(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_7D9E84(int a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 6:
    case 7:
    case 20:
    case 21:
    case 27:
    case 28:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 86:
    case 87:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_7DA01C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 24);
  if (v5 >= sub_470ADC(a2)) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a3 + 160);
  BOOL v7 = v6 - 25 > 0x3F || ((1 << (v6 - 25)) & 0x9000000000000001) == 0;
  BOOL v8 = !v7 || v6 == 17;
  if (v8 || v6 - 82 < 3 || v6 <= 0x27 && ((1 << v6) & 0x8600050000) != 0) {
    return 0;
  }
  if (v6 - 22 < 3) {
    return 0;
  }
  if ((v6 & 0xFFFFFFFE) == 6) {
    return 0;
  }
  if (v6 - 41 < 0x13) {
    return 0;
  }
  v10.i64[0] = -1;
  v10.i64[1] = -1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a3 + 568), v10), (int32x4_t)vceqq_s64(*(int64x2_t *)(a3 + 584), v10))))) & 1) != 0|| (*(void *)(a3 + 600) & *(void *)(a3 + 608)) != -1|| *(void *)(a3 + 616) != -1)
  {
    return 0;
  }
  uint64_t v11 = sub_470B40(a2, *(void *)(a3 + 24));

  return sub_7DA154(v11);
}

uint64_t sub_7DA154(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  unsigned int v3 = *v2;
  if (v3 < 0xB) {
    return 0;
  }
  if (!v2[5]
    || (int v4 = *(int *)((char *)v1 + v2[5]), (v4 & 0x200000) != 0)
    || ((int v5 = *(unsigned __int8 *)(a1 + 46), result = 1, !v5) ? (v7 = 1) : (v7 = 2), (v4 & v7) == 0))
  {
    if (v3 >= 0x2F)
    {
      uint64_t v8 = v2[23];
      if (v8)
      {
        int v9 = *((unsigned __int8 *)v1 + v8);
        uint64_t result = 2;
        switch(v9)
        {
          case 6:
          case 12:
          case 43:
            uint64_t result = 3;
            break;
          case 8:
            uint64_t result = 5;
            break;
          case 44:
            return result;
          case 48:
            uint64_t result = 4;
            break;
          default:
            if (v9 == 36) {
              uint64_t result = 6;
            }
            else {
              uint64_t result = 0;
            }
            break;
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

void sub_7DA2B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    int v7 = (void *)(a2 + 1064);
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v8 = (void *)v3[5];
      char v17 = 5;
      strcpy((char *)__p, "scope");
      uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
      int v10 = *(char *)(v9 + 23);
      if (v10 < 0)
      {
        if (*(void *)(v9 + 8) != 4)
        {
LABEL_15:
          BOOL v11 = 1;
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
        uint64_t v9 = *(void *)v9;
      }
      else if (v10 != 4)
      {
        goto LABEL_15;
      }
      BOOL v11 = *(_DWORD *)v9 != 1885697139;
      if (v17 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v11)
      {
        sub_7DA978(a1, (void *)a2, a3, v8, (uint64_t)&v15);
        sub_5BC290(a1, (uint64_t)(v3 + 2), (uint64_t)&v15, (uint64_t)__p);
        if (sub_58070(__p, (uint64_t)&qword_25C0768)) {
          sub_3CB370(__p, *(unsigned __int8 *)(a2 + 1056), 0, v14);
        }
        else {
          sub_54214((uint64_t)v14, (uint64_t)__p);
        }
        sub_5450C((uint64_t)__p);
        if (v14[3])
        {
          unsigned int v12 = (std::string *)sub_51690C(v7, a3);
          sub_7DAD68(v12 + 85, v14, (uint64_t)(v3 + 2), &v15);
        }
        sub_5450C((uint64_t)v14);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      unsigned int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_7DA4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DA4F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    int v7 = (void *)(a2 + 1064);
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v8 = (void *)v3[5];
      char v17 = 5;
      strcpy((char *)__p, "scope");
      uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
      int v10 = *(char *)(v9 + 23);
      if (v10 < 0)
      {
        if (*(void *)(v9 + 8) != 4)
        {
LABEL_15:
          BOOL v11 = 1;
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
        uint64_t v9 = *(void *)v9;
      }
      else if (v10 != 4)
      {
        goto LABEL_15;
      }
      BOOL v11 = *(_DWORD *)v9 != 1885697139;
      if (v17 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v11)
      {
        sub_7DB0F4(a1, (void *)a2, a3, v8, (uint64_t)&v15);
        sub_739908(a1, (uint64_t)(v3 + 2), (uint64_t)&v15, (uint64_t)__p);
        if (sub_58070(__p, (uint64_t)&qword_25C0768)) {
          sub_3CB370(__p, *(unsigned __int8 *)(a2 + 1056), 0, v14);
        }
        else {
          sub_54214((uint64_t)v14, (uint64_t)__p);
        }
        sub_5450C((uint64_t)__p);
        if (v14[3])
        {
          unsigned int v12 = (std::string *)sub_51690C(v7, a3);
          sub_7DAD68(v12 + 85, v14, (uint64_t)(v3 + 2), &v15);
        }
        sub_5450C((uint64_t)v14);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      unsigned int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_7DA6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DA738(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    int v7 = (void *)(a2 + 1064);
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v8 = (void *)v3[5];
      char v17 = 5;
      strcpy((char *)__p, "scope");
      uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
      int v10 = *(char *)(v9 + 23);
      if (v10 < 0)
      {
        if (*(void *)(v9 + 8) != 4)
        {
LABEL_15:
          BOOL v11 = 1;
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
        uint64_t v9 = *(void *)v9;
      }
      else if (v10 != 4)
      {
        goto LABEL_15;
      }
      BOOL v11 = *(_DWORD *)v9 != 1885697139;
      if (v17 < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v11)
      {
        sub_7DB4E4(a1, (void *)a2, a3, v8, (uint64_t)&v15);
        sub_73CAF4(a1, (uint64_t)(v3 + 2), (uint64_t)&v15, (uint64_t)__p);
        if (sub_58070(__p, (uint64_t)&qword_25C0768)) {
          sub_3CB370(__p, *(unsigned __int8 *)(a2 + 1056), 0, v14);
        }
        else {
          sub_54214((uint64_t)v14, (uint64_t)__p);
        }
        sub_5450C((uint64_t)__p);
        if (v14[3])
        {
          unsigned int v12 = (std::string *)sub_51690C(v7, a3);
          sub_7DAD68(v12 + 85, v14, (uint64_t)(v3 + 2), &v15);
        }
        sub_5450C((uint64_t)v14);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      unsigned int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_7DA92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DA978(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v22[0] = 0;
  v22[1] = 0;
  HIBYTE(__p[2]) = 21;
  uint64_t v23 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  int v10 = sub_58070(a4, (uint64_t)__p);
  BOOL v11 = v10;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_3;
    }
LABEL_8:
    int v15 = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v11) {
    goto LABEL_8;
  }
LABEL_3:
  HIBYTE(v20[2]) = 21;
  strcpy((char *)v20, "feature_polygon_usage");
  unsigned int v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a4, (uint64_t)v20);
  uint64_t v13 = *(void *)(sub_4A5E10(a2 + 133, a3) + 40);
  uint64_t v14 = sub_4A5E10(a2 + 133, a3);
  sub_5BC4C4(a1, a2, v13, *(void *)(v14 + 16), v12, (uint64_t)__p);
  *(_OWORD *)double v22 = *(_OWORD *)__p;
  uint64_t v23 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v20[2]) < 0)
  {
    operator delete(v20[0]);
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_5:
      if (v15 == 5)
      {
        unsigned int v16 = v22;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a5 = *(_OWORD *)v22;
      *(void *)(a5 + 16) = v23;
      return;
    }
  }
  else
  {
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v22[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  unsigned int v16 = (void **)v22[0];
LABEL_12:
  int v17 = *(_DWORD *)v16;
  int v18 = *((unsigned __int8 *)v16 + 4);
  if (v17 != 1819438967 || v18 != 100) {
    goto LABEL_16;
  }
LABEL_17:
  sub_7DAB78(a1, a2, a3, a5);
  if (v15 < 0) {
    operator delete(v22[0]);
  }
}

void sub_7DAB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DAB78(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = sub_46C8EC(a2, *(void *)(v9 + 40));
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int16 *)(v10 + 36) << 32), __n);
  uint64_t v11 = sub_4A5E10(v8, a3);
  uint64_t v12 = sub_46C8EC(a2, *(void *)(v11 + 16));
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 36) << 32), __p);
  uint64_t v13 = HIBYTE(v24);
  unint64_t v14 = __n[1];
  if (v24 >= 0) {
    size_t v15 = HIBYTE(v24);
  }
  else {
    size_t v15 = __n[1];
  }
  unint64_t v16 = v22;
  unsigned __int8 v17 = v22;
  if ((v22 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)__p[1];
  }
  if (v15 != v16) {
    goto LABEL_18;
  }
  if ((v22 & 0x80u) == 0) {
    int v18 = __p;
  }
  else {
    int v18 = (void **)__p[0];
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v24))
    {
LABEL_15:
      *(_OWORD *)a4 = *(_OWORD *)__n;
      *(void *)(a4 + 16) = v24;
      if ((v17 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    uint64_t v19 = __n;
    while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
    {
      uint64_t v19 = (size_t *)((char *)v19 + 1);
      int v18 = (void **)((char *)v18 + 1);
      if (!--v13) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  unsigned __int16 v20 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v18, __n[1]))
  {
LABEL_18:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if ((v17 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a4, v20, v14);
  if ((v22 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0) {
    goto LABEL_23;
  }
}

void sub_7DAD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_7DAD68(std::string *a1, void *a2, uint64_t a3, const std::string *a4)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23) != 15)
    {
      int v7 = (uint64_t *)a3;
      if (*(unsigned char *)(a3 + 23) != 19) {
        goto LABEL_27;
      }
      goto LABEL_8;
    }
    if (*(void *)a3 != 0x5F63696666617274 || *(void *)(a3 + 7) != 0x736C616E6769735FLL)
    {
      if (*(void *)a3 != 0x5F63696666617274 || *(void *)(a3 + 7) != 0x736172656D61635FLL)
      {
LABEL_27:
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v28);
          unint64_t v16 = sub_188FC78(v28, (uint64_t)"Got unhandled feature_key: ", 27);
          int v17 = *(char *)(a3 + 23);
          if (v17 >= 0) {
            int v18 = (void *)a3;
          }
          else {
            int v18 = *(void **)a3;
          }
          if (v17 >= 0) {
            uint64_t v19 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v19 = *(void *)(a3 + 8);
          }
          sub_188FC78(v16, (uint64_t)v18, v19);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (v27 < 0) {
            operator delete(__p);
          }
          if (v29 < 0) {
            operator delete((void *)v28[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        return;
      }
      goto LABEL_49;
    }
LABEL_52:
    sub_59808C(a1, a2);
    return;
  }
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8 == 15)
  {
    unsigned __int16 v20 = *(uint64_t **)a3;
    if (**(void **)a3 == 0x5F63696666617274 && *(void *)(*(void *)a3 + 7) == 0x736C616E6769735FLL) {
      goto LABEL_52;
    }
    uint64_t v22 = *v20;
    uint64_t v23 = *(uint64_t *)((char *)v20 + 7);
    if (v22 == 0x5F63696666617274 && v23 == 0x736172656D61635FLL)
    {
LABEL_49:
      int v25 = a1 + 2;
      sub_598588(v25, a2);
      return;
    }
  }
  if (v8 != 19) {
    goto LABEL_27;
  }
  int v7 = *(uint64_t **)a3;
LABEL_8:
  uint64_t v9 = *v7;
  uint64_t v10 = v7[1];
  uint64_t v11 = *(uint64_t *)((char *)v7 + 11);
  if (v9 != 0x6C616E6F69676572 || v10 != 0x726F73697664615FLL || v11 != 0x736569726F736976) {
    goto LABEL_27;
  }
  sub_576344((uint64_t)&a1[3].__r_.__value_.__r.__words[2], a2);

  std::string::operator=(a1 + 4, a4);
}

void sub_7DB0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_7DB0F4(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v22[0] = 0;
  v22[1] = 0;
  HIBYTE(__p[2]) = 21;
  uint64_t v23 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  uint64_t v10 = sub_58070(a4, (uint64_t)__p);
  uint64_t v11 = v10;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_3;
    }
LABEL_8:
    int v15 = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v11) {
    goto LABEL_8;
  }
LABEL_3:
  HIBYTE(v20[2]) = 21;
  strcpy((char *)v20, "feature_polygon_usage");
  uint64_t v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a4, (uint64_t)v20);
  uint64_t v13 = *(void *)(sub_4A5E10(a2 + 133, a3) + 40);
  uint64_t v14 = sub_4A5E10(a2 + 133, a3);
  sub_739B3C(a1, a2, v13, *(void *)(v14 + 16), v12, (uint64_t)__p);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)__p;
  uint64_t v23 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v20[2]) < 0)
  {
    operator delete(v20[0]);
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_5:
      if (v15 == 5)
      {
        unint64_t v16 = v22;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a5 = *(_OWORD *)v22;
      *(void *)(a5 + 16) = v23;
      return;
    }
  }
  else
  {
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v22[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  unint64_t v16 = (void **)v22[0];
LABEL_12:
  int v17 = *(_DWORD *)v16;
  int v18 = *((unsigned __int8 *)v16 + 4);
  if (v17 != 1819438967 || v18 != 100) {
    goto LABEL_16;
  }
LABEL_17:
  sub_7DB2F4(a1, a2, a3, a5);
  if (v15 < 0) {
    operator delete(v22[0]);
  }
}

void sub_7DB2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DB2F4(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = sub_46C8EC(a2, *(void *)(v9 + 40));
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int16 *)(v10 + 36) << 32), __n);
  uint64_t v11 = sub_4A5E10(v8, a3);
  uint64_t v12 = sub_46C8EC(a2, *(void *)(v11 + 16));
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 36) << 32), __p);
  uint64_t v13 = HIBYTE(v24);
  unint64_t v14 = __n[1];
  if (v24 >= 0) {
    size_t v15 = HIBYTE(v24);
  }
  else {
    size_t v15 = __n[1];
  }
  unint64_t v16 = v22;
  unsigned __int8 v17 = v22;
  if ((v22 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)__p[1];
  }
  if (v15 != v16) {
    goto LABEL_18;
  }
  if ((v22 & 0x80u) == 0) {
    int v18 = __p;
  }
  else {
    int v18 = (void **)__p[0];
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v24))
    {
LABEL_15:
      *(_OWORD *)a4 = *(_OWORD *)__n;
      *(void *)(a4 + 16) = v24;
      if ((v17 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    uint64_t v19 = __n;
    while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
    {
      uint64_t v19 = (size_t *)((char *)v19 + 1);
      int v18 = (void **)((char *)v18 + 1);
      if (!--v13) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  unsigned __int16 v20 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v18, __n[1]))
  {
LABEL_18:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if ((v17 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a4, v20, v14);
  if ((v22 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0) {
    goto LABEL_23;
  }
}

void sub_7DB498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_7DB4E4(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v22[0] = 0;
  v22[1] = 0;
  HIBYTE(__p[2]) = 21;
  uint64_t v23 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  uint64_t v10 = sub_58070(a4, (uint64_t)__p);
  uint64_t v11 = v10;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_3;
    }
LABEL_8:
    int v15 = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v11) {
    goto LABEL_8;
  }
LABEL_3:
  HIBYTE(v20[2]) = 21;
  strcpy((char *)v20, "feature_polygon_usage");
  uint64_t v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a4, (uint64_t)v20);
  uint64_t v13 = *(void *)(sub_4A5E10(a2 + 133, a3) + 40);
  uint64_t v14 = sub_4A5E10(a2 + 133, a3);
  sub_73CD28(a1, a2, v13, *(void *)(v14 + 16), v12, (uint64_t)__p);
  *(_OWORD *)unsigned __int8 v22 = *(_OWORD *)__p;
  uint64_t v23 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v20[2]) < 0)
  {
    operator delete(v20[0]);
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_5:
      if (v15 == 5)
      {
        unint64_t v16 = v22;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a5 = *(_OWORD *)v22;
      *(void *)(a5 + 16) = v23;
      return;
    }
  }
  else
  {
    int v15 = SHIBYTE(v23);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v22[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  unint64_t v16 = (void **)v22[0];
LABEL_12:
  int v17 = *(_DWORD *)v16;
  int v18 = *((unsigned __int8 *)v16 + 4);
  if (v17 != 1819438967 || v18 != 100) {
    goto LABEL_16;
  }
LABEL_17:
  sub_7DB6E4(a1, a2, a3, a5);
  if (v15 < 0) {
    operator delete(v22[0]);
  }
}

void sub_7DB6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7DB6E4(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2 + 133;
  uint64_t v9 = sub_4A5E10(a2 + 133, a3);
  uint64_t v10 = (unsigned int *)sub_470B40(a2, *(void *)(v9 + 40));
  sub_3D63DC(*(void *)(a1 + 8), *v10 | ((unint64_t)(v10[1] & 0x1FFFFFFF) << 32), __n);
  uint64_t v11 = sub_4A5E10(v8, a3);
  uint64_t v12 = (unsigned int *)sub_470B40(a2, *(void *)(v11 + 16));
  sub_3D63DC(*(void *)(a1 + 8), *v12 | ((unint64_t)(v12[1] & 0x1FFFFFFF) << 32), __p);
  uint64_t v13 = HIBYTE(v24);
  unint64_t v14 = __n[1];
  if (v24 >= 0) {
    size_t v15 = HIBYTE(v24);
  }
  else {
    size_t v15 = __n[1];
  }
  unint64_t v16 = v22;
  unsigned __int8 v17 = v22;
  if ((v22 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)__p[1];
  }
  if (v15 != v16) {
    goto LABEL_18;
  }
  if ((v22 & 0x80u) == 0) {
    int v18 = __p;
  }
  else {
    int v18 = (void **)__p[0];
  }
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v24))
    {
LABEL_15:
      *(_OWORD *)a4 = *(_OWORD *)__n;
      *(void *)(a4 + 16) = v24;
      if ((v17 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    uint64_t v19 = __n;
    while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
    {
      uint64_t v19 = (size_t *)((char *)v19 + 1);
      int v18 = (void **)((char *)v18 + 1);
      if (!--v13) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  unsigned __int16 v20 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v18, __n[1]))
  {
LABEL_18:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if ((v17 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a4, v20, v14);
  if ((v22 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v24) < 0) {
    goto LABEL_23;
  }
}

void sub_7DB888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7DB8D4(unsigned char **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)a2 == v2 || *(unsigned char *)(a2 + 185) == 0) {
    return 0;
  }
  uint64_t v7 = *((void *)*a1 + 2);
  uint64_t v8 = *(void *)(v2 - 8);
  uint64_t v9 = (int *)sub_2D5D58(*((void *)*a1 + 2), v8 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v7 + 7772)) {
    sub_2DB8E0(v7 + 3896, v8, 0);
  }
  sub_2E5C38(v7, v8 & 0xFFFFFFFFFFFFLL, 1);
  if (*a1[1])
  {
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 < 0x2F)
    {
      if (v11 < 0xB) {
        goto LABEL_17;
      }
    }
    else if (v10[23] && *((unsigned char *)v9 + v10[23]) == 23)
    {
      return 0;
    }
    uint64_t v12 = v10[5];
    if (v12 && (*((unsigned char *)v9 + v12) & 4) != 0) {
      return 0;
    }
  }
LABEL_17:
  if (*a1[2])
  {
    uint64_t result = 1;
    switch(*(_DWORD *)(a2 + 24))
    {
      case 1:
      case 0x14:
      case 0x1B:
      case 0x1D:
      case 0x21:
      case 0x3C:
      case 0x3E:
      case 0x41:
        return result;
      case 0xB:
        uint64_t result = *a1[3] != 0;
        break;
      default:
        return 0;
    }
    return result;
  }
  if (*a1[4])
  {
    uint64_t result = 1;
    switch(*(_DWORD *)(a2 + 24))
    {
      case 2:
      case 0x15:
      case 0x1C:
      case 0x1E:
      case 0x22:
      case 0x3D:
      case 0x3F:
      case 0x42:
        return result;
      case 0xB:
        uint64_t result = *a1[5] == 0;
        break;
      default:
        return 0;
    }
    return result;
  }
  if (*a1[6]) {
    return *(_DWORD *)(a2 + 24) == 4;
  }
  if (!*a1[7]) {
    return 0;
  }
  if (*a1[8])
  {
    uint64_t v13 = a1[5];
    int v14 = *(_DWORD *)(a2 + 24);
    return sub_7D0904(v13, v14);
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 24);
    return sub_7CF98C(v15);
  }
}

uint64_t sub_7DBD50(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x155555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(192 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v25 = (uint64_t)&v7[192 * v3];
  uint64_t v26 = &v7[192 * v6];
  sub_594714(v25, a2);
  uint64_t v8 = v25 + 192;
  uint64_t v9 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v25;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v25 + v11;
      uint64_t v13 = &v10[v11];
      *(void *)(v12 - 192) = 0;
      *(void *)(v12 - 184) = 0;
      *(void *)(v12 - 176) = 0;
      *(_OWORD *)(v12 - 192) = *(_OWORD *)&v10[v11 - 192];
      *(void *)(v12 - 176) = *(void *)&v10[v11 - 176];
      *((void *)v13 - 23) = 0;
      *((void *)v13 - 22) = 0;
      *((void *)v13 - 24) = 0;
      long long v14 = *(_OWORD *)&v10[v11 - 168];
      *(void *)(v12 - 144) = 0;
      *(void *)(v12 - 136) = 0;
      *(_OWORD *)(v12 - 168) = v14;
      *(void *)(v12 - 152) = 0;
      *(_OWORD *)(v12 - 152) = *(_OWORD *)&v10[v11 - 152];
      *(void *)(v12 - 136) = *(void *)&v10[v11 - 136];
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 17) = 0;
      *(_DWORD *)(v12 - 128) = *(_DWORD *)&v10[v11 - 128];
      long long v15 = *(_OWORD *)&v10[v11 - 120];
      long long v16 = *(_OWORD *)&v10[v11 - 104];
      long long v17 = *(_OWORD *)&v10[v11 - 88];
      *(_OWORD *)(v12 - 72) = *(_OWORD *)&v10[v11 - 72];
      *(_OWORD *)(v12 - 88) = v17;
      *(_OWORD *)(v12 - 104) = v16;
      *(_OWORD *)(v12 - 120) = v15;
      long long v18 = *(_OWORD *)&v10[v11 - 56];
      long long v19 = *(_OWORD *)&v10[v11 - 40];
      long long v20 = *(_OWORD *)&v10[v11 - 24];
      *(void *)(v12 - 9) = *(void *)&v10[v11 - 9];
      *(_OWORD *)(v12 - 24) = v20;
      *(_OWORD *)(v12 - 40) = v19;
      *(_OWORD *)(v12 - 56) = v18;
      v11 -= 192;
    }
    while (&v10[v11] != v9);
    int v21 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    *a1 = v25 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v26;
    if (v10 != v21)
    {
      do
      {
        unsigned __int8 v22 = (void *)*((void *)v10 - 19);
        if (v22)
        {
          *((void *)v10 - 18) = v22;
          operator delete(v22);
        }
        uint64_t v23 = (void *)*((void *)v10 - 24);
        if (v23)
        {
          *((void *)v10 - 23) = v23;
          operator delete(v23);
        }
        v10 -= 192;
      }
      while (v10 != v21);
      uint64_t v10 = v21;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v25 + 192;
}

void sub_7DBF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7DBF84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7DBF84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 192);
    *(void *)(a1 + 16) = i - 192;
    int v5 = *(void **)(i - 152);
    if (v5)
    {
      *(void *)(i - 144) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *v4;
    if (*v4)
    {
      *(void *)(i - 184) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_7DBFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  uint64_t v5 = *(void *)(*(void *)(a2 + 8) - 8);
  unint64_t v6 = (int *)sub_2D5D58(v4, v5 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v4 + 7772)) {
    sub_2DB8E0(v4 + 3896, v5, 0);
  }
  sub_2E5C38(v4, v5 & 0xFFFFFFFFFFFFLL, 1);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x2Fu || (uint64_t v8 = v7[23]) == 0) {
    return !*(unsigned char *)(a2 + 187) || **(unsigned char **)(a1 + 16) == 0;
  }
  unsigned int v9 = *((unsigned __int8 *)v6 + v8);
  BOOL v10 = v9 > 0x2F;
  uint64_t v11 = (1 << v9) & 0xE2E040048000;
  if (v10 || v11 == 0)
  {
    return !*(unsigned char *)(a2 + 187) || **(unsigned char **)(a1 + 16) == 0;
  }
  else
  {
    uint64_t v13 = **(int ***)(a1 + 8);
    long long v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 >= 0x2Fu && (v15 = v14[23]) != 0 && (unsigned int v16 = *((unsigned __int8 *)v13 + v15), v16 < 0x30)) {
      return (0xE2E040048000uLL >> v16) & 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_7DC164(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v30 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(184 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[184 * v3];
  std::string __p = v7;
  v28.i64[0] = (uint64_t)v8;
  v28.i64[1] = (uint64_t)v8;
  char v29 = &v7[184 * v6];
  *(void *)uint64_t v8 = *(void *)a2;
  sub_4AA8E0(v8 + 8, (long long *)(a2 + 8));
  unsigned int v9 = &v7[184 * v3];
  *((_OWORD *)v9 + 10) = *(_OWORD *)(a2 + 160);
  *((void *)v9 + 22) = *(void *)(a2 + 176);
  uint64_t v10 = v28.i64[0];
  uint64_t v11 = v28.i64[1] + 184;
  v28.i64[1] += 184;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v24 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v10 + v14;
      uint64_t v16 = v12 + v14;
      *(void *)(v15 - 184) = *(void *)(v12 + v14 - 184);
      long long v17 = *(_OWORD *)(v12 + v14 - 176);
      *(void *)(v15 - 160) = *(void *)(v12 + v14 - 160);
      *(_OWORD *)(v15 - 176) = v17;
      *(void *)(v16 - 168) = 0;
      *(void *)(v16 - 160) = 0;
      uint64_t v18 = *(void *)(v12 + v14 - 152);
      *(void *)(v16 - 176) = 0;
      *(void *)(v15 - 152) = v18;
      long long v19 = *(_OWORD *)(v12 + v14 - 144);
      *(void *)(v15 - 128) = *(void *)(v12 + v14 - 128);
      *(_OWORD *)(v15 - 144) = v19;
      *(void *)(v16 - 136) = 0;
      *(void *)(v16 - 128) = 0;
      *(void *)(v16 - 144) = 0;
      *(void *)(v15 - 120) = *(void *)(v12 + v14 - 120);
      *(_DWORD *)(v15 - 112) = *(_DWORD *)(v12 + v14 - 112);
      long long v20 = *(_OWORD *)(v12 + v14 - 104);
      *(void *)(v15 - 88) = *(void *)(v12 + v14 - 88);
      *(_OWORD *)(v15 - 104) = v20;
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 104) = 0;
      long long v21 = *(_OWORD *)(v12 + v14 - 80);
      *(void *)(v15 - 64) = *(void *)(v12 + v14 - 64);
      *(_OWORD *)(v15 - 80) = v21;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 80) = 0;
      *(_DWORD *)(v15 - 56) = *(_DWORD *)(v12 + v14 - 56);
      long long v22 = *(_OWORD *)(v12 + v14 - 48);
      *(void *)(v15 - 32) = *(void *)(v12 + v14 - 32);
      *(_OWORD *)(v15 - 48) = v22;
      *(void *)(v16 - 40) = 0;
      *(void *)(v16 - 32) = 0;
      *(void *)(v16 - 48) = 0;
      long long v23 = *(_OWORD *)(v12 + v14 - 24);
      *(void *)(v15 - 8) = *(void *)(v12 + v14 - 8);
      *(_OWORD *)(v15 - 24) = v23;
      v14 -= 184;
    }
    while (v12 + v14 != v13);
    int64x2_t v24 = *a1;
    uint64_t v11 = v28.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v28 = v24;
  uint64_t v25 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v29;
  char v29 = v25;
  std::string __p = (void *)v24.i64[0];
  sub_7DC400((uint64_t)&__p, v24.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_7DC3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7DC3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7DC3C8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_7DC400(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      if ((*(char *)(i - 57) & 0x80000000) == 0)
      {
LABEL_6:
        if ((*(char *)(i - 81) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(i - 57) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)(i - 80));
    if ((*(char *)(i - 81) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(i - 121) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(i - 104));
    if ((*(char *)(i - 121) & 0x80000000) == 0)
    {
LABEL_8:
      if (*(char *)(i - 153) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 144));
    if (*(char *)(i - 153) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 176));
  }
}

uint64_t sub_7DC4C8(int64x2_t *a1, void *a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  unint64_t v6 = 0xD37A6F4DE9BD37A7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v7) {
    unint64_t v7 = 0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xB21642C8590B21) {
    unint64_t v12 = 0x1642C8590B21642;
  }
  else {
    unint64_t v12 = v7;
  }
  unsigned __int16 v34 = a1 + 1;
  if (v12)
  {
    if (v12 > 0x1642C8590B21642) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(184 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::string __p = v13;
  v32.i64[0] = (uint64_t)&v13[184 * v6];
  v32.i64[1] = v32.i64[0];
  int v33 = &v13[184 * v12];
  sub_63AC0C(v32.i64[0], a2, *a3, *a4, *a5);
  uint64_t v14 = v32.i64[0];
  uint64_t v15 = v32.i64[0] + 184;
  v32.i64[1] = v32.i64[0] + 184;
  uint64_t v17 = a1->i64[0];
  unint64_t v16 = a1->u64[1];
  if (v16 == a1->i64[0])
  {
    int64x2_t v28 = vdupq_n_s64(v16);
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = v14 + v18;
      uint64_t v20 = v16 + v18;
      *(void *)(v19 - 184) = *(void *)(v16 + v18 - 184);
      long long v21 = *(_OWORD *)(v16 + v18 - 176);
      *(void *)(v19 - 160) = *(void *)(v16 + v18 - 160);
      *(_OWORD *)(v19 - 176) = v21;
      *(void *)(v20 - 168) = 0;
      *(void *)(v20 - 160) = 0;
      uint64_t v22 = *(void *)(v16 + v18 - 152);
      *(void *)(v20 - 176) = 0;
      *(void *)(v19 - 152) = v22;
      long long v23 = *(_OWORD *)(v16 + v18 - 144);
      *(void *)(v19 - 128) = *(void *)(v16 + v18 - 128);
      *(_OWORD *)(v19 - 144) = v23;
      *(void *)(v20 - 136) = 0;
      *(void *)(v20 - 128) = 0;
      *(void *)(v20 - 144) = 0;
      *(void *)(v19 - 120) = *(void *)(v16 + v18 - 120);
      *(_DWORD *)(v19 - 112) = *(_DWORD *)(v16 + v18 - 112);
      long long v24 = *(_OWORD *)(v16 + v18 - 104);
      *(void *)(v19 - 88) = *(void *)(v16 + v18 - 88);
      *(_OWORD *)(v19 - 104) = v24;
      *(void *)(v20 - 96) = 0;
      *(void *)(v20 - 88) = 0;
      *(void *)(v20 - 104) = 0;
      long long v25 = *(_OWORD *)(v16 + v18 - 80);
      *(void *)(v19 - 64) = *(void *)(v16 + v18 - 64);
      *(_OWORD *)(v19 - 80) = v25;
      *(void *)(v20 - 72) = 0;
      *(void *)(v20 - 64) = 0;
      *(void *)(v20 - 80) = 0;
      *(_DWORD *)(v19 - 56) = *(_DWORD *)(v16 + v18 - 56);
      long long v26 = *(_OWORD *)(v16 + v18 - 48);
      *(void *)(v19 - 32) = *(void *)(v16 + v18 - 32);
      *(_OWORD *)(v19 - 48) = v26;
      *(void *)(v20 - 40) = 0;
      *(void *)(v20 - 32) = 0;
      *(void *)(v20 - 48) = 0;
      long long v27 = *(_OWORD *)(v16 + v18 - 24);
      *(void *)(v19 - 8) = *(void *)(v16 + v18 - 8);
      *(_OWORD *)(v19 - 24) = v27;
      v18 -= 184;
    }
    while (v16 + v18 != v17);
    int64x2_t v28 = *a1;
    uint64_t v15 = v32.i64[1];
    v14 += v18;
  }
  a1->i64[0] = v14;
  a1->i64[1] = v15;
  int64x2_t v32 = v28;
  char v29 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v33;
  int v33 = v29;
  std::string __p = (void *)v28.i64[0];
  sub_7DC400((uint64_t)&__p, v28.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_7DC718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7DC3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7DC72C(int64x2_t *a1, long long *a2, void *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v8 = 0x199999999999999;
  }
  else {
    unint64_t v8 = v5;
  }
  int64x2_t v28 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x199999999999999) {
      sub_188D718();
    }
    unsigned int v9 = (char *)operator new(160 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  std::string __p = v9;
  v26.i64[0] = (uint64_t)&v9[160 * v4];
  v26.i64[1] = v26.i64[0];
  long long v27 = &v9[160 * v8];
  sub_4AA8E0((char *)v26.i64[0], a2);
  *(void *)(v26.i64[0] + 152) = *a3;
  uint64_t v10 = v26.i64[0];
  uint64_t v11 = v26.i64[1] + 160;
  v26.i64[1] += 160;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v22 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v12 + v14;
      uint64_t v16 = v10 + v14;
      long long v17 = *(_OWORD *)(v12 + v14 - 160);
      *(void *)(v16 - 144) = *(void *)(v12 + v14 - 144);
      *(_OWORD *)(v16 - 160) = v17;
      *(void *)(v15 - 152) = 0;
      *(void *)(v15 - 144) = 0;
      *(void *)(v15 - 160) = 0;
      *(void *)(v16 - 136) = *(void *)(v12 + v14 - 136);
      long long v18 = *(_OWORD *)(v12 + v14 - 128);
      *(void *)(v16 - 112) = *(void *)(v12 + v14 - 112);
      *(_OWORD *)(v16 - 128) = v18;
      *(void *)(v15 - 120) = 0;
      *(void *)(v15 - 112) = 0;
      *(void *)(v15 - 128) = 0;
      *(void *)(v16 - 104) = *(void *)(v12 + v14 - 104);
      *(_DWORD *)(v16 - 96) = *(_DWORD *)(v12 + v14 - 96);
      long long v19 = *(_OWORD *)(v12 + v14 - 88);
      *(void *)(v16 - 72) = *(void *)(v12 + v14 - 72);
      *(_OWORD *)(v16 - 88) = v19;
      *(void *)(v15 - 80) = 0;
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 88) = 0;
      long long v20 = *(_OWORD *)(v12 + v14 - 64);
      *(void *)(v16 - 48) = *(void *)(v12 + v14 - 48);
      *(_OWORD *)(v16 - 64) = v20;
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 64) = 0;
      *(_DWORD *)(v16 - 40) = *(_DWORD *)(v12 + v14 - 40);
      long long v21 = *(_OWORD *)(v12 + v14 - 32);
      *(void *)(v16 - 16) = *(void *)(v12 + v14 - 16);
      *(_OWORD *)(v16 - 32) = v21;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      *(void *)(v16 - 8) = *(void *)(v12 + v14 - 8);
      v14 -= 160;
    }
    while (v12 + v14 != v13);
    int64x2_t v22 = *a1;
    uint64_t v11 = v26.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v26 = v22;
  long long v23 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v27;
  long long v27 = v23;
  std::string __p = (void *)v22.i64[0];
  sub_4AB11C((uint64_t)&__p, v22.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_7DC948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AB0E4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_7DC95C(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(104 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v20 = &v7[104 * v3];
  int64x2_t v22 = &v7[104 * v6];
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v20 = *(_OWORD *)a2;
  *((_OWORD *)v20 + 1) = v8;
  sub_597D64((void *)v20 + 4, (uint64_t *)(a2 + 32));
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v20 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v20 + 81) = *(_OWORD *)(a2 + 81);
  unsigned int v9 = v20;
  uint64_t v10 = (uint64_t *)*a1;
  uint64_t v11 = (uint64_t *)a1[1];
  if (v11 == *a1)
  {
    uint64_t v15 = (uint64_t *)a1[1];
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v11 - 13);
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(v11 - 11);
      *(_OWORD *)(v9 - 104) = v12;
      *((void *)v9 - 8) = 0;
      *((void *)v9 - 7) = 0;
      *((void *)v9 - 9) = 0;
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v11 - 9);
      *((void *)v9 - 7) = *(v11 - 7);
      *(v11 - 9) = 0;
      *(v11 - 8) = 0;
      *(v11 - 7) = 0;
      long long v13 = *((_OWORD *)v11 - 3);
      long long v14 = *((_OWORD *)v11 - 2);
      *(_OWORD *)(v9 - 23) = *(_OWORD *)((char *)v11 - 23);
      *((_OWORD *)v9 - 3) = v13;
      *((_OWORD *)v9 - 2) = v14;
      v9 -= 104;
      v11 -= 13;
    }
    while (v11 != v10);
    uint64_t v15 = (uint64_t *)*a1;
    uint64_t v11 = (uint64_t *)a1[1];
  }
  *a1 = v9;
  a1[1] = v20 + 104;
  a1[2] = v22;
  if (v11 == v15)
  {
    if (v11) {
LABEL_17:
    }
      operator delete(v11);
  }
  else
  {
    do
    {
      while (1)
      {
        uint64_t v18 = *(v11 - 9);
        long long v17 = v11 - 9;
        long long v19 = v17 - 4;
        long long v21 = v17 - 4;
        if (!v18) {
          break;
        }
        sub_52F808(v17);
        operator delete((void *)*v17);
        uint64_t v11 = v17 - 4;
        if (v21 == v15) {
          goto LABEL_22;
        }
      }
      uint64_t v11 = v17 - 4;
    }
    while (v19 != v15);
LABEL_22:
    uint64_t v11 = v15;
    if (v15) {
      goto LABEL_17;
    }
  }
  return v20 + 104;
}

void sub_7DCB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_7DCB88(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = *(v2 - 9);
        unint64_t v4 = v2 - 9;
        unint64_t v6 = v4 - 4;
        *(void *)(a1 + 16) = v4 - 4;
        if (!v5) {
          break;
        }
        sub_52F808(v4);
        operator delete((void *)*v4);
        uint64_t v2 = *(uint64_t **)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      uint64_t v2 = v4 - 4;
    }
    while (v6 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_7DCC08(long long *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_7DD1C0(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 13;
    if (a1 + 13 != a2)
    {
      unint64_t v4 = a1;
      long long v21 = a2;
      while (1)
      {
        char v5 = v3;
        if (v4[14] < (unint64_t)v4[1]) {
          break;
        }
LABEL_5:
        uint64_t v3 = v5 + 13;
        unint64_t v4 = v5;
        if (v5 + 13 == a2) {
          return;
        }
      }
      unint64_t v6 = v3[1];
      uint64_t v22 = *v3;
      int v7 = *((_DWORD *)v3 + 4);
      uint64_t v27 = *(uint64_t *)((char *)v3 + 20);
      int v28 = *((_DWORD *)v3 + 7);
      long long v24 = (void *)v4[17];
      long long v23 = *((_OWORD *)v4 + 9);
      long long v8 = *((_OWORD *)v4 + 10);
      long long v9 = *((_OWORD *)v4 + 11);
      v4[18] = 0;
      v4[19] = 0;
      v4[17] = 0;
      *(_OWORD *)&v26[9] = *(_OWORD *)((char *)v4 + 185);
      uint64_t v10 = v3;
      long long v25 = v8;
      *(_OWORD *)char v26 = v9;
      while (1)
      {
        uint64_t v11 = v4;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v4;
        *((_DWORD *)v10 + 4) = *((_DWORD *)v4 + 4);
        uint64_t v12 = (uint64_t)v4 + 20;
        *(uint64_t *)((char *)v10 + 20) = *(uint64_t *)((char *)v4 + 20);
        *((_DWORD *)v10 + 7) = *((_DWORD *)v4 + 7);
        uint64_t v13 = v10[4];
        if (!v13) {
          goto LABEL_25;
        }
        uint64_t v14 = v10 + 5;
        uint64_t v15 = v10[5];
        unint64_t v16 = (void *)v10[4];
        if (v15 != v13) {
          break;
        }
LABEL_24:
        *uint64_t v14 = v13;
        operator delete(v16);
        *uint64_t v14 = 0;
        v10[6] = 0;
LABEL_25:
        uint64_t v19 = (void **)(v11 + 4);
        *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
        v10[6] = v11[6];
        v11[4] = 0;
        v11[5] = 0;
        v11[6] = 0;
        *(_OWORD *)(v10 + 7) = *(_OWORD *)(v11 + 7);
        *(_OWORD *)(v10 + 9) = *(_OWORD *)(v11 + 9);
        *(_OWORD *)((char *)v10 + 81) = *(_OWORD *)((char *)v11 + 81);
        if (v11 == a1)
        {
          long long v20 = a1;
          goto LABEL_29;
        }
        unint64_t v4 = v11 - 13;
        uint64_t v10 = v11;
        if (v6 >= *(v11 - 12))
        {
          long long v20 = v11;
LABEL_29:
          *long long v20 = v22;
          v20[1] = v6;
          *((_DWORD *)v20 + 4) = v7;
          *(_DWORD *)(v12 + 8) = v28;
          *(void *)uint64_t v12 = v27;
          if (v11[4])
          {
            sub_52F808(v11 + 4);
            operator delete(*v19);
            v11[5] = 0;
            v11[6] = 0;
          }
          *uint64_t v19 = v24;
          *(_OWORD *)(v20 + 5) = v23;
          *(_OWORD *)(v11 + 7) = v25;
          *(_OWORD *)(v11 + 9) = *(_OWORD *)v26;
          *(_OWORD *)((char *)v11 + 81) = *(_OWORD *)&v26[9];
          a2 = v21;
          goto LABEL_5;
        }
      }
      while (1)
      {
        if (*(char *)(v15 - 9) < 0)
        {
          operator delete(*(void **)(v15 - 32));
          if ((*(char *)(v15 - 41) & 0x80000000) == 0)
          {
LABEL_15:
            int v17 = *(_DWORD *)(v15 - 80);
            if (v17 != 1) {
              goto LABEL_16;
            }
            goto LABEL_21;
          }
        }
        else if ((*(char *)(v15 - 41) & 0x80000000) == 0)
        {
          goto LABEL_15;
        }
        operator delete(*(void **)(v15 - 64));
        int v17 = *(_DWORD *)(v15 - 80);
        if (v17 != 1)
        {
LABEL_16:
          if (v17 || (*(char *)(v15 - 81) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          uint64_t v18 = *(void **)(v15 - 104);
          goto LABEL_11;
        }
LABEL_21:
        uint64_t v18 = *(void **)(v15 - 104);
        if (!v18) {
          goto LABEL_12;
        }
        *(void *)(v15 - 96) = v18;
LABEL_11:
        operator delete(v18);
LABEL_12:
        v15 -= 176;
        if (v15 == v13)
        {
          unint64_t v16 = (void *)v10[4];
          goto LABEL_24;
        }
      }
    }
  }
}

uint64_t *sub_7DD428(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 13;
    if (result + 13 != a2)
    {
      int v17 = a2;
      while (1)
      {
        uint64_t v3 = v2;
        if (result[14] < (unint64_t)result[1]) {
          break;
        }
LABEL_5:
        uint64_t v2 = v3 + 13;
        uint64_t result = v3;
        if (v3 + 13 == a2) {
          return result;
        }
      }
      uint64_t v4 = *v2;
      unint64_t v5 = v2[1];
      int v6 = *((_DWORD *)v2 + 4);
      uint64_t v22 = *(uint64_t *)((char *)v2 + 20);
      int v23 = *((_DWORD *)v2 + 7);
      long long v7 = *(_OWORD *)(result + 17);
      uint64_t v18 = result[19];
      result[17] = 0;
      result[18] = 0;
      result[19] = 0;
      *(_OWORD *)&v21[9] = *(_OWORD *)((char *)result + 185);
      long long v8 = v2;
      *(_OWORD *)long long v21 = *((_OWORD *)result + 11);
      long long v19 = v7;
      long long v20 = *((_OWORD *)result + 10);
      while (1)
      {
        uint64_t v10 = result;
        *(_OWORD *)long long v8 = *(_OWORD *)result;
        *((_DWORD *)v8 + 4) = *((_DWORD *)result + 4);
        uint64_t v11 = (uint64_t)result + 20;
        *(uint64_t *)((char *)v8 + 20) = *(uint64_t *)((char *)result + 20);
        *((_DWORD *)v8 + 7) = *((_DWORD *)result + 7);
        uint64_t v12 = v8[4];
        if (!v12) {
          goto LABEL_10;
        }
        uint64_t v13 = v8 + 5;
        uint64_t v14 = v8[5];
        long long v9 = (void *)v8[4];
        if (v14 != v12) {
          break;
        }
LABEL_9:
        void *v13 = v12;
        operator delete(v9);
        void *v13 = 0;
        v8[6] = 0;
LABEL_10:
        *((_OWORD *)v8 + 2) = *((_OWORD *)v10 + 2);
        v8[6] = v10[6];
        v10[4] = 0;
        v10[5] = 0;
        v10[6] = 0;
        *(_OWORD *)(v8 + 7) = *(_OWORD *)(v10 + 7);
        *(_OWORD *)(v8 + 9) = *(_OWORD *)(v10 + 9);
        *(_OWORD *)((char *)v8 + 81) = *(_OWORD *)((char *)v10 + 81);
        uint64_t result = v10 - 13;
        long long v8 = v10;
        if (v5 >= *(v10 - 12))
        {
          uint64_t *v10 = v4;
          v10[1] = v5;
          *((_DWORD *)v10 + 4) = v6;
          *(void *)uint64_t v11 = v22;
          *(_DWORD *)(v11 + 8) = v23;
          if (v10[4])
          {
            sub_52F808(v10 + 4);
            operator delete((void *)v10[4]);
          }
          *((_OWORD *)v10 + 2) = v19;
          a2 = v17;
          v10[6] = v18;
          *(_OWORD *)(v10 + 7) = v20;
          *(_OWORD *)(v10 + 9) = *(_OWORD *)v21;
          *(_OWORD *)((char *)v10 + 81) = *(_OWORD *)&v21[9];
          goto LABEL_5;
        }
      }
      while (1)
      {
        if (*(char *)(v14 - 9) < 0)
        {
          operator delete(*(void **)(v14 - 32));
          if ((*(char *)(v14 - 41) & 0x80000000) == 0)
          {
LABEL_18:
            int v16 = *(_DWORD *)(v14 - 80);
            if (v16 != 1) {
              goto LABEL_19;
            }
            goto LABEL_24;
          }
        }
        else if ((*(char *)(v14 - 41) & 0x80000000) == 0)
        {
          goto LABEL_18;
        }
        operator delete(*(void **)(v14 - 64));
        int v16 = *(_DWORD *)(v14 - 80);
        if (v16 != 1)
        {
LABEL_19:
          if (v16 || (*(char *)(v14 - 81) & 0x80000000) == 0) {
            goto LABEL_15;
          }
          uint64_t v15 = *(void **)(v14 - 104);
          goto LABEL_14;
        }
LABEL_24:
        uint64_t v15 = *(void **)(v14 - 104);
        if (!v15) {
          goto LABEL_15;
        }
        *(void *)(v14 - 96) = v15;
LABEL_14:
        operator delete(v15);
LABEL_15:
        v14 -= 176;
        if (v14 == v12)
        {
          long long v9 = (void *)v8[4];
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t sub_7DD664(long long *a1, long long *a2, long long *a3)
{
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = *((void *)a3 + 1);
  if (v6 < *((void *)a1 + 1))
  {
    long long v8 = a1 + 2;
    long long v9 = (long long *)((char *)a1 + 56);
    uint64_t v10 = (void *)((char *)a1 + 20);
    if (v7 < v6)
    {
      long long v63 = *a1;
      long long v68 = a1[1];
      long long v11 = a1[2];
      uint64_t v12 = *((void *)a1 + 6);
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 6) = 0;
      *long long v8 = 0;
      long long v53 = *v9;
      *(_OWORD *)uint64_t v58 = *(long long *)((char *)a1 + 72);
      *(_OWORD *)&v58[9] = *(long long *)((char *)a1 + 81);
      long long v13 = *a3;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *a1 = v13;
      int v14 = *((_DWORD *)a3 + 7);
      void *v10 = *(void *)((char *)a3 + 20);
      *((_DWORD *)a1 + 7) = v14;
      uint64_t v15 = (void **)(a3 + 2);
      a1[2] = a3[2];
      *((void *)a1 + 6) = *((void *)a3 + 6);
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 6) = 0;
      int v16 = (long long *)((char *)a3 + 56);
      long long v17 = *(long long *)((char *)a3 + 81);
      long long v18 = *(long long *)((char *)a3 + 72);
      long long *v9 = *(long long *)((char *)a3 + 56);
      *(long long *)((char *)a1 + 72) = v18;
      *(long long *)((char *)a1 + 81) = v17;
      *((_DWORD *)a3 + 4) = v68;
      *a3 = v63;
      *(void *)((char *)a3 + 20) = *(void *)((char *)&v68 + 4);
      *((_DWORD *)a3 + 7) = HIDWORD(v68);
      if (*((void *)a3 + 4))
      {
        long long v50 = v11;
        sub_52F808((uint64_t *)a3 + 4);
        operator delete(*v15);
        long long v11 = v50;
      }
      a3[2] = v11;
      *((void *)a3 + 6) = v12;
      *int v16 = v53;
      *(long long *)((char *)a3 + 72) = *(_OWORD *)v58;
      *(long long *)((char *)a3 + 81) = *(_OWORD *)&v58[9];
      return 1;
    }
    long long v66 = *a1;
    long long v71 = a1[1];
    uint64_t v35 = *((void *)a1 + 4);
    uint64_t v36 = *((void *)a1 + 5);
    uint64_t v37 = *((void *)a1 + 6);
    *((void *)a1 + 5) = 0;
    *((void *)a1 + 6) = 0;
    *long long v8 = 0;
    long long v56 = *v9;
    *(_OWORD *)long long v61 = *(long long *)((char *)a1 + 72);
    *(_OWORD *)&v61[9] = *(long long *)((char *)a1 + 81);
    long long v38 = *a2;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a1 = v38;
    long long v39 = (void *)((char *)a2 + 20);
    int v40 = *((_DWORD *)a2 + 7);
    void *v10 = *(void *)((char *)a2 + 20);
    *((_DWORD *)a1 + 7) = v40;
    long long v41 = (void **)(a2 + 2);
    a1[2] = a2[2];
    *((void *)a1 + 6) = *((void *)a2 + 6);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    long long v42 = (long long *)((char *)a2 + 56);
    long long v43 = *(long long *)((char *)a2 + 81);
    long long v44 = *(long long *)((char *)a2 + 72);
    long long *v9 = *(long long *)((char *)a2 + 56);
    *(long long *)((char *)a1 + 72) = v44;
    *(long long *)((char *)a1 + 81) = v43;
    *((_DWORD *)a2 + 4) = v71;
    *a2 = v66;
    *(void *)((char *)a2 + 20) = *(void *)((char *)&v71 + 4);
    *((_DWORD *)a2 + 7) = HIDWORD(v71);
    if (*((void *)a2 + 4))
    {
      sub_52F808((uint64_t *)a2 + 4);
      operator delete(*v41);
    }
    *((void *)a2 + 4) = v35;
    *((void *)a2 + 5) = v36;
    *((void *)a2 + 6) = v37;
    *long long v42 = v56;
    *(long long *)((char *)a2 + 72) = *(_OWORD *)v61;
    *(long long *)((char *)a2 + 81) = *(_OWORD *)&v61[9];
    if (*((void *)a3 + 1) >= *((void *)a2 + 1)) {
      return 1;
    }
    long long v67 = *a2;
    long long v72 = a2[1];
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    void *v41 = 0;
    long long v57 = *v42;
    *(_OWORD *)int v62 = *(long long *)((char *)a2 + 72);
    *(_OWORD *)&v62[9] = *(long long *)((char *)a2 + 81);
    int v45 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v45;
    int v46 = *((_DWORD *)a3 + 7);
    void *v39 = *(void *)((char *)a3 + 20);
    *((_DWORD *)a2 + 7) = v46;
    a2[2] = a3[2];
    *((void *)a2 + 6) = *((void *)a3 + 6);
    *((void *)a3 + 4) = 0;
    *((void *)a3 + 5) = 0;
    *((void *)a3 + 6) = 0;
    long long v47 = *(long long *)((char *)a3 + 81);
    long long v48 = *(long long *)((char *)a3 + 72);
    *long long v42 = *(long long *)((char *)a3 + 56);
    v42[1] = v48;
    *(long long *)((char *)v42 + 25) = v47;
    *a3 = v67;
    a3[1] = v72;
    if (*((void *)a3 + 4))
    {
      sub_52F808((uint64_t *)a3 + 4);
      operator delete(*((void **)a3 + 4));
    }
    *((void *)a3 + 4) = v35;
    *((void *)a3 + 5) = v36;
    *((void *)a3 + 6) = v37;
    *(long long *)((char *)a3 + 56) = v57;
    *(long long *)((char *)a3 + 72) = *(_OWORD *)v62;
    *(long long *)((char *)a3 + 81) = *(_OWORD *)&v62[9];
    return 2;
  }
  if (v7 < v6)
  {
    long long v64 = *a2;
    long long v69 = a2[1];
    long long v19 = (void **)(a2 + 2);
    long long v20 = a2[2];
    uint64_t v21 = *((void *)a2 + 6);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    long long v22 = *a3;
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *a2 = v22;
    int v23 = *((_DWORD *)a3 + 7);
    *(void *)((char *)a2 + 20) = *(void *)((char *)a3 + 20);
    uint64_t v24 = (uint64_t)a2 + 20;
    long long v54 = *(long long *)((char *)a2 + 56);
    *(_OWORD *)long long v59 = *(long long *)((char *)a2 + 72);
    *(_OWORD *)&v59[9] = *(long long *)((char *)a2 + 81);
    *((_DWORD *)a2 + 7) = v23;
    long long v25 = (void **)(a3 + 2);
    a2[2] = a3[2];
    *((void *)a2 + 6) = *((void *)a3 + 6);
    *((void *)a3 + 4) = 0;
    *((void *)a3 + 5) = 0;
    *((void *)a3 + 6) = 0;
    char v26 = (long long *)((char *)a3 + 56);
    long long v27 = *(long long *)((char *)a3 + 81);
    long long v28 = *(long long *)((char *)a3 + 72);
    *(long long *)((char *)a2 + 56) = *(long long *)((char *)a3 + 56);
    *(long long *)((char *)a2 + 72) = v28;
    *(long long *)((char *)a2 + 81) = v27;
    *((_DWORD *)a3 + 4) = v69;
    *a3 = v64;
    *(void *)((char *)a3 + 20) = *(void *)((char *)&v69 + 4);
    *((_DWORD *)a3 + 7) = HIDWORD(v69);
    if (*((void *)a3 + 4))
    {
      long long v51 = v20;
      sub_52F808((uint64_t *)a3 + 4);
      operator delete(*v25);
      long long v20 = v51;
    }
    a3[2] = v20;
    *((void *)a3 + 6) = v21;
    *char v26 = v54;
    *(long long *)((char *)a3 + 72) = *(_OWORD *)v59;
    *(long long *)((char *)a3 + 81) = *(_OWORD *)&v59[9];
    if (*((void *)a2 + 1) >= *((void *)a1 + 1)) {
      return 1;
    }
    long long v65 = *a1;
    long long v70 = a1[1];
    long long v29 = a1[2];
    uint64_t v30 = *((void *)a1 + 6);
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    *((void *)a1 + 6) = 0;
    long long v55 = *(long long *)((char *)a1 + 56);
    *(_OWORD *)__int16 v60 = *(long long *)((char *)a1 + 72);
    *(_OWORD *)&v60[9] = *(long long *)((char *)a1 + 81);
    long long v31 = *a2;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *a1 = v31;
    int v32 = *((_DWORD *)a2 + 7);
    *(void *)((char *)a1 + 20) = *(void *)v24;
    *((_DWORD *)a1 + 7) = v32;
    a1[2] = a2[2];
    *((void *)a1 + 6) = *((void *)a2 + 6);
    *long long v19 = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    long long v33 = *(long long *)((char *)a2 + 81);
    long long v34 = *(long long *)((char *)a2 + 72);
    *(long long *)((char *)a1 + 56) = *(long long *)((char *)a2 + 56);
    *(long long *)((char *)a1 + 72) = v34;
    *(long long *)((char *)a1 + 81) = v33;
    *((_DWORD *)a2 + 4) = v70;
    *a2 = v65;
    *(void *)uint64_t v24 = *(void *)((char *)&v70 + 4);
    *((_DWORD *)a2 + 7) = HIDWORD(v70);
    if (*((void *)a2 + 4))
    {
      long long v52 = v29;
      sub_52F808((uint64_t *)a2 + 4);
      operator delete(*v19);
      long long v29 = v52;
    }
    a2[2] = v29;
    *((void *)a2 + 6) = v30;
    *(long long *)((char *)a2 + 56) = v55;
    *(_OWORD *)(v24 + 52) = *(_OWORD *)v60;
    *(_OWORD *)(v24 + 61) = *(_OWORD *)&v60[9];
    return 2;
  }
  return 0;
}

long long *sub_7DDB40(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  int v5 = *((_DWORD *)a1 + 4);
  uint64_t v34 = *(uint64_t *)((char *)a1 + 20);
  int v35 = *((_DWORD *)a1 + 7);
  unint64_t v6 = a1 + 4;
  long long v30 = *((_OWORD *)a1 + 2);
  uint64_t v7 = a1[6];
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  *(_OWORD *)&v33[9] = *(_OWORD *)((char *)a1 + 81);
  long long v32 = *(_OWORD *)(a1 + 7);
  *(_OWORD *)long long v33 = *(_OWORD *)(a1 + 9);
  int v29 = v5;
  if (v3 >= *(void *)(a2 - 96))
  {
    long long v11 = (long long *)(a1 + 13);
    do
    {
      long long v9 = v11;
      if ((unint64_t)v11 >= a2) {
        break;
      }
      unint64_t v12 = *((void *)v11 + 1);
      long long v11 = (long long *)((char *)v11 + 104);
    }
    while (v3 >= v12);
  }
  else
  {
    long long v8 = a1;
    do
    {
      long long v9 = (long long *)(v8 + 13);
      unint64_t v10 = v8[14];
      v8 += 13;
    }
    while (v3 >= v10);
  }
  if ((unint64_t)v9 < a2)
  {
    do
    {
      unint64_t v13 = a2 - 104;
      unint64_t v14 = *(void *)(a2 - 96);
      a2 -= 104;
    }
    while (v3 < v14);
    while ((unint64_t)v9 < v13)
    {
      long long v38 = *v9;
      long long v39 = v9[1];
      long long v15 = v9[2];
      uint64_t v16 = *((void *)v9 + 6);
      *((void *)v9 + 4) = 0;
      *((void *)v9 + 5) = 0;
      *((void *)v9 + 6) = 0;
      long long v36 = *(long long *)((char *)v9 + 56);
      *(_OWORD *)uint64_t v37 = *(long long *)((char *)v9 + 72);
      *(_OWORD *)&v37[9] = *(long long *)((char *)v9 + 81);
      int v17 = *(_DWORD *)(v13 + 16);
      long long *v9 = *(_OWORD *)v13;
      *((_DWORD *)v9 + 4) = v17;
      int v18 = *(_DWORD *)(v13 + 28);
      *(void *)((char *)v9 + 20) = *(void *)(v13 + 20);
      *((_DWORD *)v9 + 7) = v18;
      v9[2] = *(_OWORD *)(v13 + 32);
      *((void *)v9 + 6) = *(void *)(v13 + 48);
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      long long v19 = *(_OWORD *)(v13 + 56);
      long long v20 = *(_OWORD *)(v13 + 72);
      *(long long *)((char *)v9 + 81) = *(_OWORD *)(v13 + 81);
      *(long long *)((char *)v9 + 72) = v20;
      *(long long *)((char *)v9 + 56) = v19;
      *(_DWORD *)(v13 + 16) = v39;
      *(_OWORD *)unint64_t v13 = v38;
      *(_DWORD *)(v13 + 28) = HIDWORD(v39);
      *(void *)(v13 + 20) = *(void *)((char *)&v39 + 4);
      if (*(void *)(v13 + 32))
      {
        long long v31 = v15;
        sub_52F808((uint64_t *)(v13 + 32));
        operator delete(*(void **)(v13 + 32));
        long long v15 = v31;
      }
      *(_OWORD *)(v13 + 32) = v15;
      *(void *)(v13 + 48) = v16;
      *(_OWORD *)(v13 + 56) = v36;
      *(_OWORD *)(v13 + 72) = *(_OWORD *)v37;
      *(_OWORD *)(v13 + 81) = *(_OWORD *)&v37[9];
      do
      {
        unint64_t v21 = *((void *)v9 + 14);
        long long v9 = (long long *)((char *)v9 + 104);
      }
      while (v3 >= v21);
      do
      {
        unint64_t v22 = *(void *)(v13 - 96);
        v13 -= 104;
      }
      while (v3 < v22);
    }
  }
  if ((uint64_t *)((char *)v9 - 104) != a1)
  {
    long long v23 = *(long long *)((char *)v9 - 104);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v9 - 22);
    *(_OWORD *)a1 = v23;
    uint64_t v24 = *(void *)((char *)v9 - 84);
    *((_DWORD *)a1 + 7) = *((_DWORD *)v9 - 19);
    *(uint64_t *)((char *)a1 + 20) = v24;
    if (a1[4])
    {
      sub_52F808(v6);
      operator delete((void *)*v6);
      uint64_t *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
    }
    *((_OWORD *)a1 + 2) = *(long long *)((char *)v9 - 72);
    a1[6] = *((void *)v9 - 7);
    *((void *)v9 - 9) = 0;
    *((void *)v9 - 8) = 0;
    *((void *)v9 - 7) = 0;
    long long v25 = *(v9 - 3);
    long long v26 = *(v9 - 2);
    *(_OWORD *)((char *)a1 + 81) = *(long long *)((char *)v9 - 23);
    *(_OWORD *)(a1 + 7) = v25;
    *(_OWORD *)(a1 + 9) = v26;
  }
  uint64_t v27 = *((void *)v9 - 9);
  *((void *)v9 - 13) = v4;
  *((void *)v9 - 12) = v3;
  *((_DWORD *)v9 - 22) = v29;
  *((_DWORD *)v9 - 19) = v35;
  *(void *)((char *)v9 - 84) = v34;
  if (v27)
  {
    sub_52F808((uint64_t *)v9 - 9);
    operator delete(*((void **)v9 - 9));
  }
  *(long long *)((char *)v9 - 72) = v30;
  *((void *)v9 - 7) = v7;
  *(long long *)((char *)v9 - 23) = *(_OWORD *)&v33[9];
  *(v9 - 3) = v32;
  *(v9 - 2) = *(_OWORD *)v33;
  return v9;
}

long long *sub_7DDE28(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  int v6 = *((_DWORD *)a1 + 4);
  uint64_t v39 = *(uint64_t *)((char *)a1 + 20);
  uint64_t v7 = a1 + 4;
  long long v35 = *((_OWORD *)a1 + 2);
  int v40 = *((_DWORD *)a1 + 7);
  uint64_t v8 = a1[6];
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  long long v37 = *(_OWORD *)(a1 + 7);
  *(_OWORD *)long long v38 = *(_OWORD *)(a1 + 9);
  *(_OWORD *)&v38[9] = *(_OWORD *)((char *)a1 + 81);
  do
  {
    unint64_t v9 = a1[v3 + 14];
    v3 += 13;
  }
  while (v9 < v5);
  unint64_t v10 = &a1[v3];
  uint64_t v33 = v4;
  uint64_t v34 = v8;
  int v32 = v6;
  long long v31 = a1 + 7;
  if (v3 == 13)
  {
    while (v10 < (uint64_t *)a2)
    {
      long long v11 = (long long *)((char *)a2 - 104);
      unint64_t v13 = *((void *)a2 - 12);
      a2 = (long long *)((char *)a2 - 104);
      if (v13 < v5) {
        goto LABEL_9;
      }
    }
    long long v11 = a2;
  }
  else
  {
    do
    {
      long long v11 = (long long *)((char *)a2 - 104);
      unint64_t v12 = *((void *)a2 - 12);
      a2 = (long long *)((char *)a2 - 104);
    }
    while (v12 >= v5);
  }
LABEL_9:
  if (v10 >= (uint64_t *)v11)
  {
    unint64_t v14 = (long long *)v10;
    uint64_t v24 = (long long *)(v10 - 13);
    if (v10 - 13 == a1) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  unint64_t v14 = (long long *)v10;
  long long v15 = v11;
  do
  {
    long long v43 = *v14;
    long long v44 = v14[1];
    long long v16 = v14[2];
    uint64_t v17 = *((void *)v14 + 6);
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = 0;
    *((void *)v14 + 6) = 0;
    long long v41 = *(long long *)((char *)v14 + 56);
    *(_OWORD *)long long v42 = *(long long *)((char *)v14 + 72);
    *(_OWORD *)&v42[9] = *(long long *)((char *)v14 + 81);
    long long v18 = *v15;
    *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
    *unint64_t v14 = v18;
    int v19 = *((_DWORD *)v15 + 7);
    *(void *)((char *)v14 + 20) = *(void *)((char *)v15 + 20);
    *((_DWORD *)v14 + 7) = v19;
    v14[2] = v15[2];
    *((void *)v14 + 6) = *((void *)v15 + 6);
    *((void *)v15 + 4) = 0;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    long long v20 = *(long long *)((char *)v15 + 56);
    long long v21 = *(long long *)((char *)v15 + 72);
    *(long long *)((char *)v14 + 81) = *(long long *)((char *)v15 + 81);
    *(long long *)((char *)v14 + 72) = v21;
    *(long long *)((char *)v14 + 56) = v20;
    *((_DWORD *)v15 + 4) = v44;
    long long *v15 = v43;
    *((_DWORD *)v15 + 7) = HIDWORD(v44);
    *(void *)((char *)v15 + 20) = *(void *)((char *)&v44 + 4);
    if (*((void *)v15 + 4))
    {
      long long v36 = v16;
      sub_52F808((uint64_t *)v15 + 4);
      operator delete(*((void **)v15 + 4));
      long long v16 = v36;
    }
    v15[2] = v16;
    *((void *)v15 + 6) = v17;
    *(long long *)((char *)v15 + 56) = v41;
    *(long long *)((char *)v15 + 72) = *(_OWORD *)v42;
    *(long long *)((char *)v15 + 81) = *(_OWORD *)&v42[9];
    do
    {
      unint64_t v22 = *((void *)v14 + 14);
      unint64_t v14 = (long long *)((char *)v14 + 104);
    }
    while (v22 < v5);
    do
    {
      unint64_t v23 = *((void *)v15 - 12);
      long long v15 = (long long *)((char *)v15 - 104);
    }
    while (v23 >= v5);
  }
  while (v14 < v15);
  uint64_t v24 = (long long *)((char *)v14 - 104);
  if ((uint64_t *)((char *)v14 - 104) != a1)
  {
LABEL_20:
    long long v25 = *v24;
    *((_DWORD *)a1 + 4) = *((_DWORD *)v24 + 4);
    *(_OWORD *)a1 = v25;
    uint64_t v26 = *(void *)((char *)v14 - 84);
    *((_DWORD *)a1 + 7) = *((_DWORD *)v14 - 19);
    *(uint64_t *)((char *)a1 + 20) = v26;
    if (a1[4])
    {
      sub_52F808(v7);
      operator delete((void *)*v7);
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    *((_OWORD *)a1 + 2) = *(long long *)((char *)v14 - 72);
    a1[6] = *((void *)v14 - 7);
    *((void *)v14 - 9) = 0;
    *((void *)v14 - 8) = 0;
    *((void *)v14 - 7) = 0;
    long long v27 = *(v14 - 3);
    long long v28 = *(v14 - 2);
    *(_OWORD *)((char *)v31 + 25) = *(long long *)((char *)v14 - 23);
    _OWORD *v31 = v27;
    v31[1] = v28;
  }
LABEL_23:
  uint64_t v29 = *((void *)v14 - 9);
  *((void *)v14 - 13) = v33;
  *((void *)v14 - 12) = v5;
  *((_DWORD *)v14 - 22) = v32;
  *((_DWORD *)v14 - 19) = v40;
  *(void *)((char *)v14 - 84) = v39;
  if (v29)
  {
    sub_52F808((uint64_t *)v14 - 9);
    operator delete(*((void **)v14 - 9));
  }
  *(long long *)((char *)v14 - 72) = v35;
  *((void *)v14 - 7) = v34;
  *(long long *)((char *)v14 - 23) = *(_OWORD *)&v38[9];
  *(v14 - 3) = v37;
  *(v14 - 2) = *(_OWORD *)v38;
  return v24;
}

BOOL sub_7DE130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 96) < *(void *)(a1 + 8))
      {
        long long v36 = *(_OWORD *)a1;
        long long v39 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 48);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        long long v32 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 81);
        long long v8 = *(_OWORD *)(a2 - 104);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 88);
        *(_OWORD *)a1 = v8;
        int v9 = *(_DWORD *)(a2 - 76);
        *(void *)(a1 + 20) = *(void *)(a2 - 84);
        *(_DWORD *)(a1 + 28) = v9;
        uint64_t v10 = a2 - 72;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 72);
        *(void *)(a1 + 48) = *(void *)(a2 - 56);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        long long v11 = (_OWORD *)(a2 - 48);
        long long v12 = *(_OWORD *)(a2 - 23);
        long long v13 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 72) = v13;
        *(_OWORD *)(a1 + 81) = v12;
        *(_DWORD *)(a2 - 88) = v39;
        *(_OWORD *)(a2 - 104) = v36;
        *(void *)(a2 - 84) = *(void *)((char *)&v39 + 4);
        *(_DWORD *)(a2 - 76) = HIDWORD(v39);
        if (*(void *)(a2 - 72))
        {
          long long v30 = v6;
          sub_52F808((uint64_t *)(a2 - 72));
          operator delete(*(void **)v10);
          long long v6 = v30;
        }
        *(_OWORD *)(a2 - 72) = v6;
        *(void *)(a2 - 56) = v7;
        *long long v11 = v32;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v34;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v34[9];
        return 1;
      }
      return result;
    case 3:
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a2 - 104));
      return 1;
    case 4:
      sub_7DE500(a1, a1 + 104, a1 + 208, (long long *)(a2 - 104));
      return 1;
    case 5:
      sub_7DE820(a1, a1 + 104, a1 + 208, a1 + 312, (long long *)(a2 - 104));
      return 1;
    default:
      uint64_t v14 = a1 + 208;
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a1 + 208));
      uint64_t v15 = a1 + 312;
      if (a1 + 312 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    unint64_t v18 = *(void *)(v15 + 8);
    if (v18 < *(void *)(v14 + 8))
    {
      uint64_t v19 = *(void *)v15;
      int v28 = *(_DWORD *)(v15 + 16);
      long long v37 = *(void **)(v15 + 20);
      int v38 = *(_DWORD *)(v15 + 28);
      long long v31 = *(void **)(v15 + 32);
      long long v29 = *(_OWORD *)(v15 + 40);
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      long long v33 = *(_OWORD *)(v15 + 56);
      *(_OWORD *)long long v35 = *(_OWORD *)(v15 + 72);
      uint64_t v20 = v16;
      *(_OWORD *)&v35[9] = *(_OWORD *)(v15 + 81);
      while (1)
      {
        uint64_t v21 = v20;
        uint64_t v22 = a1 + v20;
        *(_OWORD *)(a1 + v20 + 312) = *(_OWORD *)(a1 + v20 + 208);
        *(_DWORD *)(v22 + 328) = *(_DWORD *)(a1 + v20 + 224);
        *(void *)(a1 + v20 + 332) = *(void *)(a1 + v20 + 228);
        *(_DWORD *)(v22 + 340) = *(_DWORD *)(a1 + v20 + 236);
        unint64_t v23 = (uint64_t *)(a1 + v20 + 344);
        if (*v23)
        {
          sub_52F808(v23);
          operator delete((void *)*v23);
          *(void *)(v22 + 352) = 0;
          *(void *)(v22 + 360) = 0;
        }
        *(_OWORD *)unint64_t v23 = *(_OWORD *)(v22 + 240);
        *(void *)(v22 + 360) = *(void *)(v22 + 256);
        *(void *)(v22 + 248) = 0;
        *(void *)(v22 + 256) = 0;
        *(void *)(v22 + 240) = 0;
        long long v24 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v22 + 368) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v22 + 384) = v24;
        *(_OWORD *)(v22 + 393) = *(_OWORD *)(v22 + 289);
        if (v21 == -208) {
          break;
        }
        uint64_t v20 = v21 - 104;
        if (v18 >= *(void *)(a1 + v21 + 112))
        {
          uint64_t v25 = a1 + v20 + 312;
          goto LABEL_18;
        }
      }
      uint64_t v25 = a1;
LABEL_18:
      *(void *)uint64_t v25 = v19;
      *(void *)(v25 + 8) = v18;
      *(_DWORD *)(v25 + 16) = v28;
      long long v27 = (void **)(a1 + v21 + 240);
      uint64_t v26 = *v27;
      *(void **)((char *)v27 - 12) = v37;
      *((_DWORD *)v27 - 1) = v38;
      if (v26)
      {
        sub_52F808((uint64_t *)(a1 + v21 + 240));
        operator delete(*v27);
        *(void *)(a1 + v21 + 248) = 0;
        *(void *)(a1 + v21 + 256) = 0;
      }
      char *v27 = v31;
      *(_OWORD *)(v25 + 40) = v29;
      *(_OWORD *)(a1 + v21 + 264) = v33;
      *(_OWORD *)(a1 + v21 + 280) = *(_OWORD *)v35;
      *(_OWORD *)(a1 + v21 + 289) = *(_OWORD *)&v35[9];
      if (++v17 == 8) {
        return v15 + 104 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 104;
    v15 += 104;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_7DE500(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_7DD664((long long *)a1, (long long *)a2, (long long *)a3);
  if (*((void *)a4 + 1) < *(void *)(a3 + 8))
  {
    long long v42 = *(_OWORD *)a3;
    long long v45 = *(_OWORD *)(a3 + 16);
    int v9 = (void **)(a3 + 32);
    long long v10 = *(_OWORD *)(a3 + 32);
    uint64_t v11 = *(void *)(a3 + 48);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    long long v12 = *a4;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = v12;
    int v13 = *((_DWORD *)a4 + 7);
    *(void *)(a3 + 20) = *(void *)((char *)a4 + 20);
    uint64_t v14 = (void *)(a3 + 20);
    long long v36 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)long long v39 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v39[9] = *(_OWORD *)(a3 + 81);
    *(_DWORD *)(a3 + 28) = v13;
    *(_OWORD *)(a3 + 32) = a4[2];
    *(void *)(a3 + 48) = *((void *)a4 + 6);
    *((void *)a4 + 4) = 0;
    *((void *)a4 + 5) = 0;
    *((void *)a4 + 6) = 0;
    long long v15 = *(long long *)((char *)a4 + 81);
    long long v16 = *(long long *)((char *)a4 + 72);
    *(_OWORD *)(a3 + 56) = *(long long *)((char *)a4 + 56);
    *(_OWORD *)(a3 + 72) = v16;
    *(_OWORD *)(a3 + 81) = v15;
    *((_DWORD *)a4 + 4) = v45;
    *a4 = v42;
    *(void *)((char *)a4 + 20) = *(void *)((char *)&v45 + 4);
    *((_DWORD *)a4 + 7) = HIDWORD(v45);
    if (*((void *)a4 + 4))
    {
      long long v33 = v10;
      sub_52F808((uint64_t *)a4 + 4);
      operator delete(*((void **)a4 + 4));
      long long v10 = v33;
    }
    a4[2] = v10;
    *((void *)a4 + 6) = v11;
    *(long long *)((char *)a4 + 56) = v36;
    *(long long *)((char *)a4 + 72) = *(_OWORD *)v39;
    __n128 result = *(__n128 *)&v39[9];
    *(long long *)((char *)a4 + 81) = *(_OWORD *)&v39[9];
    if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      uint64_t v19 = (void **)(a2 + 32);
      long long v20 = *(_OWORD *)(a2 + 32);
      uint64_t v21 = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      long long v22 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = v22;
      int v23 = *(_DWORD *)(a3 + 28);
      *(void *)(a2 + 20) = *v14;
      long long v24 = (void *)(a2 + 20);
      long long v43 = v17;
      long long v46 = v18;
      long long v37 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)int v40 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)&v40[9] = *(_OWORD *)(a2 + 81);
      *(_DWORD *)(a2 + 28) = v23;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(a2 + 48) = *(void *)(a3 + 48);
      long long *v9 = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      long long v25 = *(_OWORD *)(a3 + 81);
      long long v26 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a2 + 72) = v26;
      *(_OWORD *)(a2 + 81) = v25;
      *(_DWORD *)(a3 + 16) = v46;
      *(_OWORD *)a3 = v43;
      *uint64_t v14 = *(void *)((char *)&v46 + 4);
      *(_DWORD *)(a3 + 28) = HIDWORD(v46);
      if (*(void *)(a3 + 32))
      {
        long long v34 = v20;
        sub_52F808((uint64_t *)(a3 + 32));
        operator delete(*v9);
        long long v20 = v34;
      }
      *(_OWORD *)(a3 + 32) = v20;
      *(void *)(a3 + 48) = v21;
      *(_OWORD *)(a3 + 56) = v37;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)v40;
      __n128 result = *(__n128 *)&v40[9];
      *(_OWORD *)(a3 + 81) = *(_OWORD *)&v40[9];
      if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        long long v44 = *(_OWORD *)a1;
        long long v47 = *(_OWORD *)(a1 + 16);
        long long v27 = *(_OWORD *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 48);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        long long v38 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)long long v41 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v41[9] = *(_OWORD *)(a1 + 81);
        long long v29 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = v29;
        int v30 = *(_DWORD *)(a2 + 28);
        *(void *)(a1 + 20) = *v24;
        *(_DWORD *)(a1 + 28) = v30;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *uint64_t v19 = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 48) = 0;
        long long v31 = *(_OWORD *)(a2 + 81);
        long long v32 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = v32;
        *(_OWORD *)(a1 + 81) = v31;
        *(_DWORD *)(a2 + 16) = v47;
        *(_OWORD *)a2 = v44;
        *long long v24 = *(void *)((char *)&v47 + 4);
        *(_DWORD *)(a2 + 28) = HIDWORD(v47);
        if (*(void *)(a2 + 32))
        {
          long long v35 = v27;
          sub_52F808((uint64_t *)(a2 + 32));
          operator delete(*v19);
          long long v27 = v35;
        }
        *(_OWORD *)(a2 + 32) = v27;
        *(void *)(a2 + 48) = v28;
        *(_OWORD *)(a2 + 56) = v38;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)v41;
        __n128 result = *(__n128 *)&v41[9];
        *(_OWORD *)(a2 + 81) = *(_OWORD *)&v41[9];
      }
    }
  }
  return result;
}

__n128 sub_7DE820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  result.n128_u64[0] = sub_7DE500(a1, a2, a3, (long long *)a4).n128_u64[0];
  if (*((void *)a5 + 1) < *(void *)(a4 + 8))
  {
    long long v57 = *(_OWORD *)a4;
    long long v61 = *(_OWORD *)(a4 + 16);
    uint64_t v11 = (void **)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 32);
    uint64_t v13 = *(void *)(a4 + 48);
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
    long long v14 = *a5;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *(_OWORD *)a4 = v14;
    int v15 = *((_DWORD *)a5 + 7);
    *(void *)(a4 + 20) = *(void *)((char *)a5 + 20);
    long long v16 = (void *)(a4 + 20);
    long long v49 = *(_OWORD *)(a4 + 56);
    *(_OWORD *)long long v53 = *(_OWORD *)(a4 + 72);
    *(_OWORD *)&v53[9] = *(_OWORD *)(a4 + 81);
    *(_DWORD *)(a4 + 28) = v15;
    *(_OWORD *)(a4 + 32) = a5[2];
    *(void *)(a4 + 48) = *((void *)a5 + 6);
    *((void *)a5 + 4) = 0;
    *((void *)a5 + 5) = 0;
    *((void *)a5 + 6) = 0;
    long long v17 = *(long long *)((char *)a5 + 81);
    long long v18 = *(long long *)((char *)a5 + 72);
    *(_OWORD *)(a4 + 56) = *(long long *)((char *)a5 + 56);
    *(_OWORD *)(a4 + 72) = v18;
    *(_OWORD *)(a4 + 81) = v17;
    *((_DWORD *)a5 + 4) = v61;
    *a5 = v57;
    *(void *)((char *)a5 + 20) = *(void *)((char *)&v61 + 4);
    *((_DWORD *)a5 + 7) = HIDWORD(v61);
    if (*((void *)a5 + 4))
    {
      long long v45 = v12;
      sub_52F808((uint64_t *)a5 + 4);
      operator delete(*((void **)a5 + 4));
      long long v12 = v45;
    }
    a5[2] = v12;
    *((void *)a5 + 6) = v13;
    *(long long *)((char *)a5 + 56) = v49;
    *(long long *)((char *)a5 + 72) = *(_OWORD *)v53;
    __n128 result = *(__n128 *)&v53[9];
    *(long long *)((char *)a5 + 81) = *(_OWORD *)&v53[9];
    if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
    {
      long long v19 = *(_OWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 16);
      uint64_t v21 = (void **)(a3 + 32);
      long long v22 = *(_OWORD *)(a3 + 32);
      uint64_t v23 = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      long long v24 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = v24;
      int v25 = *(_DWORD *)(a4 + 28);
      *(void *)(a3 + 20) = *v16;
      long long v26 = (void *)(a3 + 20);
      long long v58 = v19;
      long long v62 = v20;
      long long v50 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)long long v54 = *(_OWORD *)(a3 + 72);
      *(_OWORD *)&v54[9] = *(_OWORD *)(a3 + 81);
      *(_DWORD *)(a3 + 28) = v25;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a4 + 32);
      *(void *)(a3 + 48) = *(void *)(a4 + 48);
      *uint64_t v11 = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      long long v27 = *(_OWORD *)(a4 + 81);
      long long v28 = *(_OWORD *)(a4 + 72);
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(a4 + 56);
      *(_OWORD *)(a3 + 72) = v28;
      *(_OWORD *)(a3 + 81) = v27;
      *(_DWORD *)(a4 + 16) = v62;
      *(_OWORD *)a4 = v58;
      *long long v16 = *(void *)((char *)&v62 + 4);
      *(_DWORD *)(a4 + 28) = HIDWORD(v62);
      if (*(void *)(a4 + 32))
      {
        long long v46 = v22;
        sub_52F808((uint64_t *)(a4 + 32));
        operator delete(*v11);
        long long v22 = v46;
      }
      *(_OWORD *)(a4 + 32) = v22;
      *(void *)(a4 + 48) = v23;
      *(_OWORD *)(a4 + 56) = v50;
      *(_OWORD *)(a4 + 72) = *(_OWORD *)v54;
      __n128 result = *(__n128 *)&v54[9];
      *(_OWORD *)(a4 + 81) = *(_OWORD *)&v54[9];
      if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
      {
        long long v29 = *(_OWORD *)a2;
        long long v30 = *(_OWORD *)(a2 + 16);
        long long v31 = (void **)(a2 + 32);
        long long v32 = *(_OWORD *)(a2 + 32);
        uint64_t v33 = *(void *)(a2 + 48);
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 48) = 0;
        long long v34 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = v34;
        int v35 = *(_DWORD *)(a3 + 28);
        *(void *)(a2 + 20) = *v26;
        long long v36 = (void *)(a2 + 20);
        long long v59 = v29;
        long long v63 = v30;
        long long v51 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)long long v55 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)&v55[9] = *(_OWORD *)(a2 + 81);
        *(_DWORD *)(a2 + 28) = v35;
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
        *(void *)(a2 + 48) = *(void *)(a3 + 48);
        *uint64_t v21 = 0;
        *(void *)(a3 + 40) = 0;
        *(void *)(a3 + 48) = 0;
        long long v37 = *(_OWORD *)(a3 + 81);
        long long v38 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(a2 + 72) = v38;
        *(_OWORD *)(a2 + 81) = v37;
        *(_DWORD *)(a3 + 16) = v63;
        *(_OWORD *)a3 = v59;
        *long long v26 = *(void *)((char *)&v63 + 4);
        *(_DWORD *)(a3 + 28) = HIDWORD(v63);
        if (*(void *)(a3 + 32))
        {
          long long v47 = v32;
          sub_52F808((uint64_t *)(a3 + 32));
          operator delete(*v21);
          long long v32 = v47;
        }
        *(_OWORD *)(a3 + 32) = v32;
        *(void *)(a3 + 48) = v33;
        *(_OWORD *)(a3 + 56) = v51;
        *(_OWORD *)(a3 + 72) = *(_OWORD *)v55;
        __n128 result = *(__n128 *)&v55[9];
        *(_OWORD *)(a3 + 81) = *(_OWORD *)&v55[9];
        if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
        {
          long long v60 = *(_OWORD *)a1;
          long long v64 = *(_OWORD *)(a1 + 16);
          long long v39 = *(_OWORD *)(a1 + 32);
          uint64_t v40 = *(void *)(a1 + 48);
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 48) = 0;
          long long v52 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)long long v56 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)&v56[9] = *(_OWORD *)(a1 + 81);
          long long v41 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = v41;
          int v42 = *(_DWORD *)(a2 + 28);
          *(void *)(a1 + 20) = *v36;
          *(_DWORD *)(a1 + 28) = v42;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          void *v31 = 0;
          *(void *)(a2 + 40) = 0;
          *(void *)(a2 + 48) = 0;
          long long v43 = *(_OWORD *)(a2 + 81);
          long long v44 = *(_OWORD *)(a2 + 72);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
          *(_OWORD *)(a1 + 72) = v44;
          *(_OWORD *)(a1 + 81) = v43;
          *(_DWORD *)(a2 + 16) = v64;
          *(_OWORD *)a2 = v60;
          *long long v36 = *(void *)((char *)&v64 + 4);
          *(_DWORD *)(a2 + 28) = HIDWORD(v64);
          if (*(void *)(a2 + 32))
          {
            long long v48 = v39;
            sub_52F808((uint64_t *)(a2 + 32));
            operator delete(*v31);
            long long v39 = v48;
          }
          *(_OWORD *)(a2 + 32) = v39;
          *(void *)(a2 + 48) = v40;
          *(_OWORD *)(a2 + 56) = v52;
          *(_OWORD *)(a2 + 72) = *(_OWORD *)v56;
          __n128 result = *(__n128 *)&v56[9];
          *(_OWORD *)(a2 + 81) = *(_OWORD *)&v56[9];
        }
      }
    }
  }
  return result;
}

__n128 sub_7DEC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x4EC4EC4EC4EC4EC5 * (((uint64_t)a4 - a1) >> 3))
    {
      int64_t v9 = (0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      long long v10 = (long long *)(a1 + 104 * v9);
      if ((uint64_t)(0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3) + 2) < a3)
      {
        unint64_t v11 = *((void *)v10 + 14);
        unint64_t v12 = *(void *)(a1 + 104 * v9 + 8);
        long long v10 = (long long *)((char *)v10 + 104 * (v12 < v11));
        if (v12 < v11) {
          int64_t v9 = 0x9D89D89D89D89D8ALL * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unint64_t v13 = a4[1];
      if (*((void *)v10 + 1) >= v13)
      {
        int v27 = *((_DWORD *)a4 + 4);
        uint64_t v33 = *(uint64_t *)((char *)a4 + 20);
        int v34 = *((_DWORD *)a4 + 7);
        long long v14 = *((_OWORD *)a4 + 2);
        uint64_t v28 = *a4;
        uint64_t v29 = a4[6];
        a4[4] = 0;
        a4[5] = 0;
        a4[6] = 0;
        long long v30 = v14;
        long long v31 = *(_OWORD *)(a4 + 7);
        *(_OWORD *)long long v32 = *(_OWORD *)(a4 + 9);
        *(_OWORD *)&v32[9] = *(_OWORD *)((char *)a4 + 81);
        do
        {
          int v15 = (uint64_t *)v10;
          long long v16 = *v10;
          *((_DWORD *)v5 + 4) = *((_DWORD *)v10 + 4);
          *(_OWORD *)unint64_t v5 = v16;
          uint64_t v18 = (uint64_t)v10 + 20;
          uint64_t v17 = *(void *)((char *)v10 + 20);
          *((_DWORD *)v5 + 7) = *(_DWORD *)(v18 + 8);
          *(uint64_t *)((char *)v5 + 20) = v17;
          long long v19 = (void **)(v5 + 4);
          if (v5[4])
          {
            sub_52F808(v5 + 4);
            operator delete(*v19);
            *long long v19 = 0;
            v5[5] = 0;
            v5[6] = 0;
          }
          long long v20 = (void **)(v15 + 4);
          *((_OWORD *)v5 + 2) = *((_OWORD *)v15 + 2);
          v5[6] = v15[6];
          v15[4] = 0;
          v15[5] = 0;
          v15[6] = 0;
          long long v21 = *(_OWORD *)(v15 + 7);
          long long v22 = *(_OWORD *)(v15 + 9);
          *(_OWORD *)((char *)v5 + 81) = *(_OWORD *)((char *)v15 + 81);
          *(_OWORD *)(v5 + 9) = v22;
          *(_OWORD *)(v5 + 7) = v21;
          if (v7 < v9) {
            break;
          }
          uint64_t v23 = (2 * v9) | 1;
          long long v10 = (long long *)(a1 + 104 * v23);
          if (2 * v9 + 2 < a3)
          {
            unint64_t v24 = *((void *)v10 + 14);
            unint64_t v25 = *(void *)(a1 + 104 * v23 + 8);
            long long v10 = (long long *)((char *)v10 + 104 * (v25 < v24));
            if (v25 < v24) {
              uint64_t v23 = 2 * v9 + 2;
            }
          }
          unint64_t v5 = v15;
          int64_t v9 = v23;
        }
        while (*((void *)v10 + 1) >= v13);
        uint64_t *v15 = v28;
        v15[1] = v13;
        *((_DWORD *)v15 + 4) = v27;
        *(void *)uint64_t v18 = v33;
        *(_DWORD *)(v18 + 8) = v34;
        if (v15[4])
        {
          sub_52F808(v15 + 4);
          operator delete(*v20);
          *long long v20 = 0;
          v15[5] = 0;
          v15[6] = 0;
        }
        *((_OWORD *)v15 + 2) = v30;
        v15[6] = v29;
        *(_OWORD *)(v15 + 7) = v31;
        *(_OWORD *)(v15 + 9) = *(_OWORD *)v32;
        __n128 result = *(__n128 *)&v32[9];
        *(_OWORD *)((char *)v15 + 81) = *(_OWORD *)&v32[9];
      }
    }
  }
  return result;
}

__n128 sub_7DEE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    long long v32 = *(_OWORD *)a1;
    long long v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    __n128 v36 = *(__n128 *)(a1 + 56);
    *(_OWORD *)long long v37 = *(_OWORD *)(a1 + 72);
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = a1;
    *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 81);
    do
    {
      uint64_t v13 = v7 + 1;
      uint64_t v14 = v9 + 104 * (v7 + 1);
      uint64_t v15 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < a4)
      {
        unint64_t v17 = *(void *)(v14 + 112);
        unint64_t v18 = *(void *)(v9 + 104 * v13 + 8);
        v14 += 104 * (v18 < v17);
        if (v18 < v17) {
          uint64_t v7 = v16;
        }
      }
      long long v19 = *(_OWORD *)v14;
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v9 = v19;
      long long v21 = (void *)(v14 + 20);
      uint64_t v20 = *(void *)(v14 + 20);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v14 + 28);
      *(void *)(v9 + 20) = v20;
      long long v22 = (void **)(v9 + 32);
      if (*(void *)(v9 + 32))
      {
        sub_52F808((uint64_t *)(v9 + 32));
        operator delete(*v22);
        *long long v22 = 0;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
      }
      long long v10 = (void **)(v14 + 32);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v14 + 32);
      *(void *)(v9 + 48) = *(void *)(v14 + 48);
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      long long v11 = *(_OWORD *)(v14 + 56);
      long long v12 = *(_OWORD *)(v14 + 72);
      *(_OWORD *)(v9 + 81) = *(_OWORD *)(v14 + 81);
      *(_OWORD *)(v9 + 72) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      uint64_t v9 = v14;
    }
    while (v7 <= v8);
    uint64_t v23 = (__n128 *)(v14 + 56);
    unint64_t v24 = (long long *)(a2 - 104);
    if (v14 == a2 - 104)
    {
      *(_DWORD *)(v14 + 16) = v33;
      *(_OWORD *)uint64_t v14 = v32;
      *(_DWORD *)(v14 + 28) = HIDWORD(v33);
      *long long v21 = *(void *)((char *)&v33 + 4);
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        long long *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
      *(void *)(v14 + 48) = v35;
      __n128 result = v36;
      *(_OWORD *)(v14 + 81) = *(_OWORD *)&v37[9];
      *uint64_t v23 = v36;
      *(_OWORD *)(v14 + 72) = *(_OWORD *)v37;
    }
    else
    {
      long long v25 = *v24;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 88);
      *(_OWORD *)uint64_t v14 = v25;
      uint64_t v26 = *(void *)(a2 - 84);
      *(_DWORD *)(v14 + 28) = *(_DWORD *)(a2 - 76);
      *long long v21 = v26;
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        long long *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      uint64_t v27 = a2 - 72;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 - 72);
      *(void *)(v14 + 48) = *(void *)(a2 - 56);
      *(void *)uint64_t v27 = 0;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 16) = 0;
      __n128 v28 = *(__n128 *)(a2 - 48);
      long long v29 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(v14 + 81) = *(_OWORD *)(a2 - 23);
      *uint64_t v23 = v28;
      *(_OWORD *)(v14 + 72) = v29;
      *unint64_t v24 = v32;
      *(_OWORD *)(a2 - 88) = v33;
      if (*(void *)(a2 - 72))
      {
        sub_52F808((uint64_t *)(a2 - 72));
        operator delete(*(void **)v27);
        *(void *)uint64_t v27 = 0;
        *(void *)(a2 - 64) = 0;
        *(void *)(a2 - 56) = 0;
      }
      *(_OWORD *)(a2 - 72) = *(_OWORD *)__p;
      *(void *)(a2 - 56) = v35;
      *(__n128 *)(a2 - 48) = v36;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v37;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v37[9];
      result.n128_u64[0] = sub_7DF23C(a1, v14 + 104, a3, 0x4EC4EC4EC4EC4EC5 * ((v14 + 104 - a1) >> 3)).n128_u64[0];
    }
  }
  return result;
}

void sub_7DF228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_7DF23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = *(void *)(a2 - 96);
    if (*(void *)(a1 + 104 * (v4 >> 1) + 8) < v7)
    {
      int64_t v8 = (long long *)(a2 - 104);
      int v9 = *(_DWORD *)(a2 - 88);
      uint64_t v27 = *(void *)(a2 - 84);
      int v28 = *(_DWORD *)(a2 - 76);
      long long v10 = *(_OWORD *)(a2 - 72);
      uint64_t v22 = *(void *)(a2 - 104);
      uint64_t v23 = *(void *)(a2 - 56);
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      long long v24 = v10;
      long long v25 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)uint64_t v26 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)&v26[9] = *(_OWORD *)(a2 - 23);
      do
      {
        long long v11 = (long long *)(a1 + 104 * v6);
        long long v12 = *v11;
        *((_DWORD *)v8 + 4) = *((_DWORD *)v11 + 4);
        *int64_t v8 = v12;
        uint64_t v13 = *(void *)((char *)v11 + 20);
        *((_DWORD *)v8 + 7) = *((_DWORD *)v11 + 7);
        *(void *)((char *)v8 + 20) = v13;
        uint64_t v14 = (void **)(v8 + 2);
        if (*((void *)v8 + 4))
        {
          sub_52F808((uint64_t *)v8 + 4);
          operator delete(*v14);
          *uint64_t v14 = 0;
          *((void *)v8 + 5) = 0;
          *((void *)v8 + 6) = 0;
        }
        uint64_t v15 = a1 + 104 * v6;
        uint64_t v16 = (uint64_t *)(v15 + 32);
        v8[2] = *(_OWORD *)(v15 + 32);
        uint64_t v18 = *(void *)(v15 + 48);
        uint64_t v17 = v15 + 48;
        *((void *)v8 + 6) = v18;
        *(void *)(v17 - 8) = 0;
        *(void *)uint64_t v17 = 0;
        *uint64_t v16 = 0;
        long long v19 = *(_OWORD *)(v17 + 8);
        long long v20 = *(_OWORD *)(v17 + 24);
        *(long long *)((char *)v8 + 81) = *(_OWORD *)(v17 + 33);
        *(long long *)((char *)v8 + 72) = v20;
        *(long long *)((char *)v8 + 56) = v19;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        int64_t v8 = v11;
      }
      while (*(void *)(a1 + 104 * v6 + 8) < v7);
      *(void *)long long v11 = v22;
      *((void *)v11 + 1) = v7;
      *((_DWORD *)v11 + 4) = v9;
      *(void *)((char *)v11 + 20) = v27;
      *((_DWORD *)v11 + 7) = v28;
      if (*v16)
      {
        sub_52F808(v16);
        operator delete((void *)*v16);
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
      }
      *(_OWORD *)uint64_t v16 = v24;
      *(void *)uint64_t v17 = v23;
      *(_OWORD *)(v17 + 8) = v25;
      *(_OWORD *)(v17 + 24) = *(_OWORD *)v26;
      __n128 result = *(__n128 *)&v26[9];
      *(_OWORD *)(v17 + 33) = *(_OWORD *)&v26[9];
    }
  }
  return result;
}

long long *sub_7DF3FC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    uint64_t v13 = *(long long **)a1;
    unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x1745D1745D1745DLL) {
      sub_2E00();
    }
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v10 - (uint64_t)v13) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v16 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v40 = v9;
    if (v16)
    {
      if (v16 > 0x1745D1745D1745DLL) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(176 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    long long v24 = &v17[16 * (v5 - v13)];
    std::string __p = v17;
    long long v37 = v24;
    long long v38 = v24;
    long long v39 = &v17[176 * v16];
    uint64_t v25 = 176 * a5;
    uint64_t v26 = &v24[176 * a5];
    uint64_t v27 = v7 + 64;
    do
    {
      long long v28 = *(_OWORD *)(v27 - 64);
      long long v29 = *(_OWORD *)(v27 - 48);
      long long v30 = *(_OWORD *)(v27 - 32);
      *(_OWORD *)(v24 + 41) = *(_OWORD *)(v27 - 23);
      *((_OWORD *)v24 + 1) = v29;
      *((_OWORD *)v24 + 2) = v30;
      *(_OWORD *)long long v24 = v28;
      sub_4F57A0((uint64_t)(v24 + 64), v27);
      v24 += 176;
      v27 += 176;
      v25 -= 176;
    }
    while (v25);
    long long v38 = v26;
    unint64_t v5 = sub_7DF940((long long **)a1, &__p, v5);
    long long v31 = v37;
    while (1)
    {
      long long v32 = (void **)v38;
      if (v38 == v31)
      {
        if (__p) {
          operator delete(__p);
        }
        return v5;
      }
      v38 -= 176;
      if (*((char *)v32 - 9) < 0)
      {
        operator delete(*(v32 - 4));
        if (*((char *)v32 - 41) < 0) {
          goto LABEL_32;
        }
LABEL_27:
        int v33 = *((_DWORD *)v32 - 20);
        if (v33 == 1) {
          goto LABEL_33;
        }
LABEL_28:
        if (!v33 && *((char *)v32 - 81) < 0) {
          operator delete(*(v32 - 13));
        }
      }
      else
      {
        if ((*((char *)v32 - 41) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_32:
        operator delete(*(v32 - 8));
        int v33 = *((_DWORD *)v32 - 20);
        if (v33 != 1) {
          goto LABEL_28;
        }
LABEL_33:
        int v34 = *(v32 - 13);
        if (v34)
        {
          *(v32 - 12) = v34;
          operator delete(v34);
        }
      }
    }
  }
  uint64_t v18 = v12 - (void)a2;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - (void)a2) >> 4) >= a5)
  {
    uint64_t v19 = a3 + 176 * a5;
  }
  else
  {
    uint64_t v19 = a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4);
    *(void *)(a1 + 8) = sub_7DFB20(v9, v19, a4, *(void *)(v9 - 8));
    if (v18 < 1) {
      return v5;
    }
  }
  sub_7DF734(a1, (uint64_t)v5, v12, (uint64_t)&v5[11 * a5]);
  if (v19 != v7)
  {
    long long v20 = v5;
    do
    {
      long long v21 = *(_OWORD *)v7;
      long long v22 = *(_OWORD *)(v7 + 16);
      long long v23 = *(_OWORD *)(v7 + 32);
      *(long long *)((char *)v20 + 41) = *(_OWORD *)(v7 + 41);
      v20[1] = v22;
      v20[2] = v23;
      *long long v20 = v21;
      sub_4F39B8((uint64_t)(v20 + 4), (std::string *)(v7 + 64));
      *((void *)v20 + 13) = *(void *)(v7 + 104);
      std::string::operator=((std::string *)(v20 + 7), (const std::string *)(v7 + 112));
      *((unsigned char *)v20 + 136) = *(unsigned char *)(v7 + 136);
      std::string::operator=((std::string *)v20 + 6, (const std::string *)(v7 + 144));
      *((unsigned char *)v20 + 168) = *(unsigned char *)(v7 + 168);
      v7 += 176;
      v20 += 11;
    }
    while (v7 != v19);
  }
  return v5;
}

void sub_7DF700(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_7DF708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63DE5C((void **)va);
  _Unwind_Resume(a1);
}

void sub_7DF71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63DE5C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_7DF734(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    *(void *)(a1 + 8) = v6;
    if (v6 == a4) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = (long long *)(a2 + v6 - a4);
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      uint64_t v12 = v11;
      long long v13 = *v10;
      long long v14 = v10[1];
      long long v15 = v10[2];
      *(_OWORD *)(v11 + 41) = *(long long *)((char *)v10 + 41);
      *(_OWORD *)(v11 + 16) = v14;
      *(_OWORD *)(v11 + 32) = v15;
      *(_OWORD *)uint64_t v11 = v13;
      *(_DWORD *)(v11 + 96) = *((_DWORD *)v10 + 24);
      unint64_t v16 = v10 + 4;
      sub_4F38B0((void *)*((unsigned int *)v10 + 24), (uint64_t *)v10 + 8, (void *)(v11 + 64));
      *(void *)(v12 + 104) = *((void *)v16 + 5);
      long long v17 = v16[3];
      *(void *)(v12 + 128) = *((void *)v16 + 8);
      *(_OWORD *)(v12 + 112) = v17;
      *((void *)v16 + 7) = 0;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 6) = 0;
      *(unsigned char *)(v12 + 136) = *((unsigned char *)v16 + 72);
      __n128 result = (__n128)v16[5];
      *(void *)(v12 + 160) = *((void *)v16 + 12);
      *(__n128 *)(v12 + 144) = result;
      *((void *)v16 + 11) = 0;
      *((void *)v16 + 12) = 0;
      *((void *)v16 + 10) = 0;
      *(unsigned char *)(v12 + 168) = *((unsigned char *)v16 + 104);
      uint64_t v10 = v16 + 7;
      uint64_t v11 = v12 + 176;
    }
    while ((unint64_t)(v16 + 7) < a3);
    *(void *)(a1 + 8) = v12 + 176;
    if (v6 == a4) {
      return result;
    }
  }
  uint64_t v19 = 0;
  do
  {
    uint64_t v21 = v8 + v19;
    uint64_t v22 = v6 + v19;
    long long v23 = *(_OWORD *)(v8 + v19 - 160);
    *(_OWORD *)(v22 - 176) = *(_OWORD *)(v8 + v19 - 176);
    *(_OWORD *)(v22 - 160) = v23;
    uint64_t v24 = *(void *)(v8 + v19 - 144);
    *(_DWORD *)(v22 - 136) = *(_DWORD *)(v8 + v19 - 136);
    *(void *)(v22 - 144) = v24;
    uint64_t v25 = *(void *)(v8 + v19 - 132);
    *(void *)(v22 - 127) = *(void *)(v8 + v19 - 127);
    *(void *)(v22 - 132) = v25;
    sub_4F377C(v6 + v19 - 112, v8 + v19 - 112);
    *(void *)(v22 - 72) = *(void *)(v8 + v19 - 72);
    uint64_t v26 = (void **)(v6 + v19 - 64);
    if (*(char *)(v6 + v19 - 41) < 0) {
      operator delete(*v26);
    }
    long long v27 = *(_OWORD *)(v21 - 64);
    *(void *)(v22 - 48) = *(void *)(v21 - 48);
    *(_OWORD *)uint64_t v26 = v27;
    *(unsigned char *)(v21 - 41) = 0;
    *(unsigned char *)(v21 - 64) = 0;
    *(unsigned char *)(v22 - 40) = *(unsigned char *)(v21 - 40);
    long long v28 = (void **)(v22 - 32);
    if (*(char *)(v22 - 9) < 0) {
      operator delete(*v28);
    }
    uint64_t v20 = v8 + v19;
    __n128 result = *(__n128 *)(v8 + v19 - 32);
    *(void *)(v22 - 16) = *(void *)(v8 + v19 - 16);
    *(__n128 *)long long v28 = result;
    *(unsigned char *)(v20 - 9) = 0;
    *(unsigned char *)(v20 - 32) = 0;
    *(unsigned char *)(v6 + v19 - 8) = *(unsigned char *)(v8 + v19 - 8);
    v19 -= 176;
  }
  while (-16 * (v7 >> 4) != v19);
  return result;
}

long long *sub_7DF940(long long **a1, void *a2, long long *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = (long long *)a2[1];
  uint64_t v7 = *a1;
  unint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = &v6[v9];
      uint64_t v11 = &v3[v9];
      long long v12 = v3[v9 - 11];
      long long v13 = v3[v9 - 10];
      long long v14 = v3[v9 - 9];
      *(long long *)((char *)v10 - 135) = *(long long *)((char *)&v3[v9 - 8] - 7);
      *(v10 - 10) = v13;
      *(v10 - 9) = v14;
      *(v10 - 11) = v12;
      *((_DWORD *)v10 - 20) = v3[v9 - 5];
      sub_4F38B0((void *)LODWORD(v3[v9 - 5]), (uint64_t *)&v3[v9 - 7], &v6[v9 - 7]);
      *((void *)v10 - 9) = *((void *)&v3[v9 - 4] - 1);
      long long v15 = v3[v9 - 4];
      *((void *)v10 - 6) = *(void *)&v3[v9 - 3];
      *(v10 - 4) = v15;
      *((void *)v11 - 7) = 0;
      *((void *)v11 - 6) = 0;
      *((void *)v11 - 8) = 0;
      *((unsigned char *)v10 - 40) = *((unsigned char *)&v3[v9 - 2] - 8);
      long long v16 = v3[v9 - 2];
      *((void *)v10 - 2) = *(void *)&v3[v9 - 1];
      *(v10 - 2) = v16;
      *((void *)v11 - 3) = 0;
      *((void *)v11 - 2) = 0;
      *((void *)v11 - 4) = 0;
      *((unsigned char *)v10 - 8) = BYTE8(v3[v9 - 1]);
      v9 -= 11;
    }
    while (&v3[v9] != v7);
    unint64_t v8 = &v6[v9];
  }
  a2[1] = v8;
  long long v17 = a1[1];
  uint64_t v18 = a2[2];
  if (v17 != v3)
  {
    do
    {
      uint64_t v19 = v18;
      long long v20 = *v3;
      long long v21 = v3[1];
      long long v22 = v3[2];
      *(_OWORD *)(v18 + 41) = *(long long *)((char *)v3 + 41);
      *(_OWORD *)(v18 + 16) = v21;
      *(_OWORD *)(v18 + 32) = v22;
      *(_OWORD *)uint64_t v18 = v20;
      *(_DWORD *)(v18 + 96) = *((_DWORD *)v3 + 24);
      long long v23 = (void *)*((unsigned int *)v3 + 24);
      uint64_t v24 = v3 + 4;
      sub_4F38B0(v23, (uint64_t *)v24, (void *)(v18 + 64));
      *(void *)(v19 + 104) = *((void *)v24 + 5);
      long long v25 = v24[3];
      *(void *)(v19 + 128) = *((void *)v24 + 8);
      *(_OWORD *)(v19 + 112) = v25;
      *((void *)v24 + 7) = 0;
      *((void *)v24 + 8) = 0;
      *((void *)v24 + 6) = 0;
      *(unsigned char *)(v19 + 136) = *((unsigned char *)v24 + 72);
      long long v26 = v24[5];
      *(void *)(v19 + 160) = *((void *)v24 + 12);
      *(_OWORD *)(v19 + 144) = v26;
      *((void *)v24 + 11) = 0;
      *((void *)v24 + 12) = 0;
      *((void *)v24 + 10) = 0;
      *(unsigned char *)(v19 + 168) = *((unsigned char *)v24 + 104);
      uint64_t v3 = v24 + 7;
      uint64_t v18 = v19 + 176;
    }
    while (v3 != v17);
    uint64_t v18 = v19 + 176;
    unint64_t v8 = (long long *)a2[1];
  }
  a2[2] = v18;
  long long v27 = *a1;
  *a1 = v8;
  a2[1] = v27;
  long long v28 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v28;
  long long v29 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v29;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_7DFB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = (_OWORD *)(a4 + v7);
      long long v9 = *(_OWORD *)(a2 + v7);
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      long long v11 = *(_OWORD *)(a2 + v7 + 32);
      *(_OWORD *)((char *)v8 + 41) = *(_OWORD *)(a2 + v7 + 41);
      v8[1] = v10;
      v8[2] = v11;
      *unint64_t v8 = v9;
      sub_4F57A0(a4 + v7 + 64, a2 + v7 + 64);
      v7 += 176;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_7DFBA0(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AB0FC(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7DFBBC(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v5) {
    unint64_t v5 = 0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xB21642C8590B21) {
    unint64_t v8 = 0x1642C8590B21642;
  }
  else {
    unint64_t v8 = v5;
  }
  long long v30 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x1642C8590B21642) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(184 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  std::string __p = v9;
  v28.i64[0] = (uint64_t)&v9[184 * v4];
  v28.i64[1] = v28.i64[0];
  long long v29 = &v9[184 * v8];
  sub_63AC64(v28.i64[0], a2, *a3);
  uint64_t v10 = v28.i64[0];
  uint64_t v11 = v28.i64[0] + 184;
  v28.i64[1] = v28.i64[0] + 184;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v24 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v10 + v14;
      uint64_t v16 = v12 + v14;
      *(void *)(v15 - 184) = *(void *)(v12 + v14 - 184);
      long long v17 = *(_OWORD *)(v12 + v14 - 176);
      *(void *)(v15 - 160) = *(void *)(v12 + v14 - 160);
      *(_OWORD *)(v15 - 176) = v17;
      *(void *)(v16 - 168) = 0;
      *(void *)(v16 - 160) = 0;
      uint64_t v18 = *(void *)(v12 + v14 - 152);
      *(void *)(v16 - 176) = 0;
      *(void *)(v15 - 152) = v18;
      long long v19 = *(_OWORD *)(v12 + v14 - 144);
      *(void *)(v15 - 128) = *(void *)(v12 + v14 - 128);
      *(_OWORD *)(v15 - 144) = v19;
      *(void *)(v16 - 136) = 0;
      *(void *)(v16 - 128) = 0;
      *(void *)(v16 - 144) = 0;
      *(void *)(v15 - 120) = *(void *)(v12 + v14 - 120);
      *(_DWORD *)(v15 - 112) = *(_DWORD *)(v12 + v14 - 112);
      long long v20 = *(_OWORD *)(v12 + v14 - 104);
      *(void *)(v15 - 88) = *(void *)(v12 + v14 - 88);
      *(_OWORD *)(v15 - 104) = v20;
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 104) = 0;
      long long v21 = *(_OWORD *)(v12 + v14 - 80);
      *(void *)(v15 - 64) = *(void *)(v12 + v14 - 64);
      *(_OWORD *)(v15 - 80) = v21;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 80) = 0;
      *(_DWORD *)(v15 - 56) = *(_DWORD *)(v12 + v14 - 56);
      long long v22 = *(_OWORD *)(v12 + v14 - 48);
      *(void *)(v15 - 32) = *(void *)(v12 + v14 - 32);
      *(_OWORD *)(v15 - 48) = v22;
      *(void *)(v16 - 40) = 0;
      *(void *)(v16 - 32) = 0;
      *(void *)(v16 - 48) = 0;
      long long v23 = *(_OWORD *)(v12 + v14 - 24);
      *(void *)(v15 - 8) = *(void *)(v12 + v14 - 8);
      *(_OWORD *)(v15 - 24) = v23;
      v14 -= 184;
    }
    while (v12 + v14 != v13);
    int64x2_t v24 = *a1;
    uint64_t v11 = v28.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v28 = v24;
  long long v25 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v29;
  long long v29 = v25;
  std::string __p = (void *)v24.i64[0];
  sub_7DC400((uint64_t)&__p, v24.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_7DFDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7DC3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7DFE08(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v5) {
    unint64_t v5 = 0xA6F4DE9BD37A6F4ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xB21642C8590B21) {
    unint64_t v8 = 0x1642C8590B21642;
  }
  else {
    unint64_t v8 = v5;
  }
  long long v30 = a1 + 1;
  if (v8)
  {
    if (v8 > 0x1642C8590B21642) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(184 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  std::string __p = v9;
  v28.i64[0] = (uint64_t)&v9[184 * v4];
  v28.i64[1] = v28.i64[0];
  long long v29 = &v9[184 * v8];
  sub_63AC64(v28.i64[0], a2, *a3);
  uint64_t v10 = v28.i64[0];
  uint64_t v11 = v28.i64[0] + 184;
  v28.i64[1] = v28.i64[0] + 184;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v24 = vdupq_n_s64(v12);
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v10 + v14;
      uint64_t v16 = v12 + v14;
      *(void *)(v15 - 184) = *(void *)(v12 + v14 - 184);
      long long v17 = *(_OWORD *)(v12 + v14 - 176);
      *(void *)(v15 - 160) = *(void *)(v12 + v14 - 160);
      *(_OWORD *)(v15 - 176) = v17;
      *(void *)(v16 - 168) = 0;
      *(void *)(v16 - 160) = 0;
      uint64_t v18 = *(void *)(v12 + v14 - 152);
      *(void *)(v16 - 176) = 0;
      *(void *)(v15 - 152) = v18;
      long long v19 = *(_OWORD *)(v12 + v14 - 144);
      *(void *)(v15 - 128) = *(void *)(v12 + v14 - 128);
      *(_OWORD *)(v15 - 144) = v19;
      *(void *)(v16 - 136) = 0;
      *(void *)(v16 - 128) = 0;
      *(void *)(v16 - 144) = 0;
      *(void *)(v15 - 120) = *(void *)(v12 + v14 - 120);
      *(_DWORD *)(v15 - 112) = *(_DWORD *)(v12 + v14 - 112);
      long long v20 = *(_OWORD *)(v12 + v14 - 104);
      *(void *)(v15 - 88) = *(void *)(v12 + v14 - 88);
      *(_OWORD *)(v15 - 104) = v20;
      *(void *)(v16 - 96) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 104) = 0;
      long long v21 = *(_OWORD *)(v12 + v14 - 80);
      *(void *)(v15 - 64) = *(void *)(v12 + v14 - 64);
      *(_OWORD *)(v15 - 80) = v21;
      *(void *)(v16 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 80) = 0;
      *(_DWORD *)(v15 - 56) = *(_DWORD *)(v12 + v14 - 56);
      long long v22 = *(_OWORD *)(v12 + v14 - 48);
      *(void *)(v15 - 32) = *(void *)(v12 + v14 - 32);
      *(_OWORD *)(v15 - 48) = v22;
      *(void *)(v16 - 40) = 0;
      *(void *)(v16 - 32) = 0;
      *(void *)(v16 - 48) = 0;
      long long v23 = *(_OWORD *)(v12 + v14 - 24);
      *(void *)(v15 - 8) = *(void *)(v12 + v14 - 8);
      *(_OWORD *)(v15 - 24) = v23;
      v14 -= 184;
    }
    while (v12 + v14 != v13);
    int64x2_t v24 = *a1;
    uint64_t v11 = v28.i64[1];
    v10 += v14;
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v28 = v24;
  long long v25 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v29;
  long long v29 = v25;
  std::string __p = (void *)v24.i64[0];
  sub_7DC400((uint64_t)&__p, v24.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_7E0040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7DC3C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7E0054(uint64_t *a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 23) < *a1)
      {
        sub_7E0F90(a1, a2 - 23);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_7E0364((uint64_t)a1, a2);
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[23 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_7E07A8((uint64_t)a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a7);
        uint64_t v18 = a5 + 184 * v13;
        sub_7E07A8((uint64_t)&a1[23 * (a4 >> 1)], a2, a3, a4 - v13, v18, v17);
        unint64_t v34 = a4;
        unint64_t v19 = a5 + 184 * a4;
        long long v20 = a1 + 20;
        uint64_t v21 = v18;
        uint64_t v22 = a5;
        while (v21 != v19)
        {
          uint64_t v24 = (uint64_t)(v20 - 19);
          if (*(void *)v21 >= *(void *)v22)
          {
            *(v20 - 20) = *(void *)v22;
            sub_4C2034(v24, (long long *)(v22 + 8));
            uint64_t v23 = *(void *)(v22 + 176);
            *(_OWORD *)long long v20 = *(_OWORD *)(v22 + 160);
            v20[2] = v23;
            v22 += 184;
            v20 += 23;
            if (v22 == v18) {
              goto LABEL_20;
            }
          }
          else
          {
            *(v20 - 20) = *(void *)v21;
            sub_4C2034(v24, (long long *)(v21 + 8));
            uint64_t v25 = *(void *)(v21 + 176);
            *(_OWORD *)long long v20 = *(_OWORD *)(v21 + 160);
            v20[2] = v25;
            v21 += 184;
            v20 += 23;
            if (v22 == v18)
            {
LABEL_20:
              if (v21 != v19)
              {
                unint64_t v26 = 0;
                do
                {
                  unint64_t v27 = v21 + v26;
                  int64x2_t v28 = &v20[v26 / 8];
                  v20[v26 / 8 - 20] = *(void *)(v21 + v26);
                  sub_4C2034((uint64_t)&v20[v26 / 8 - 19], (long long *)(v21 + v26 + 8));
                  uint64_t v29 = *(void *)(v21 + v26 + 176);
                  *(_OWORD *)int64x2_t v28 = *(_OWORD *)(v21 + v26 + 160);
                  v28[2] = v29;
                  v26 += 184;
                }
                while (v27 + 184 != v19);
              }
              goto LABEL_27;
            }
          }
        }
        if (v22 != v18)
        {
          unint64_t v30 = 0;
          do
          {
            unint64_t v31 = v22 + v30;
            long long v32 = &v20[v30 / 8];
            v20[v30 / 8 - 20] = *(void *)(v22 + v30);
            sub_4C2034((uint64_t)&v20[v30 / 8 - 19], (long long *)(v22 + v30 + 8));
            uint64_t v33 = *(void *)(v22 + v30 + 176);
            *(_OWORD *)long long v32 = *(_OWORD *)(v22 + v30 + 160);
            v32[2] = v33;
            v30 += 184;
          }
          while (v31 + 184 != v18);
        }
LABEL_27:
        if (a5) {
          sub_7E1978(&v34, a5);
        }
      }
      else
      {
        sub_7E0054(a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        sub_7E0054(v14, a2, a3, v15, a5, a6);
        sub_7E0BAC(a1, v14, a2, a3, v13, v15, a5, a6, v16);
      }
    }
  }
}

void sub_7E0348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_7E1978(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_7E0364(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v2 = a2;
    unint64_t v4 = (void *)(a1 + 184);
    if ((void *)(a1 + 184) != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (void *)a1;
      do
      {
        uint64_t v7 = v4;
        uint64_t v8 = *v4;
        if (*v4 < *v6)
        {
          uint64_t v33 = v6[24];
          *(void *)long long v49 = v6[25];
          *(void *)&v49[7] = *(void *)((char *)v6 + 207);
          char v32 = *((unsigned char *)v6 + 215);
          v6[25] = 0;
          v6[26] = 0;
          v6[24] = 0;
          uint64_t v9 = v6[27];
          uint64_t v35 = v6[28];
          *(void *)&v48[7] = *(void *)((char *)v6 + 239);
          *(void *)long long v48 = v6[29];
          char v34 = *((unsigned char *)v6 + 247);
          v6[29] = 0;
          v6[30] = 0;
          v6[28] = 0;
          uint64_t v10 = v6[31];
          int v11 = *((_DWORD *)v6 + 64);
          uint64_t v37 = v6[33];
          *(void *)&v47[7] = *(void *)((char *)v6 + 279);
          *(void *)long long v47 = v6[34];
          char v36 = *((unsigned char *)v6 + 287);
          v6[33] = 0;
          v6[34] = 0;
          uint64_t v40 = v6[36];
          *(void *)&v46[7] = *(void *)((char *)v6 + 303);
          *(void *)long long v46 = v6[37];
          char v12 = *((unsigned char *)v6 + 311);
          v6[35] = 0;
          v6[36] = 0;
          v6[37] = 0;
          v6[38] = 0;
          int v38 = *((_DWORD *)v6 + 78);
          char v39 = v12;
          *(void *)&v45[14] = *(void *)((char *)v6 + 335);
          *(_OWORD *)long long v45 = *(_OWORD *)((char *)v6 + 321);
          char v41 = *((unsigned char *)v6 + 343);
          char v42 = *((unsigned char *)v6 + 320);
          v6[40] = 0;
          v6[41] = 0;
          v6[42] = 0;
          uint64_t v44 = v6[45];
          long long v43 = *(_OWORD *)(v6 + 43);
          uint64_t v13 = v5;
          uint64_t v14 = *v6;
          while (1)
          {
            uint64_t v15 = v13;
            uint64_t v16 = a1 + v13;
            *(void *)(a1 + v13 + 184) = v14;
            uint64_t v17 = a1 + v13 + 192;
            if (*(char *)(a1 + v13 + 215) < 0) {
              operator delete(*(void **)v17);
            }
            *(_OWORD *)uint64_t v17 = *(_OWORD *)(v16 + 8);
            *(void *)(v17 + 16) = *(void *)(v16 + 24);
            *(unsigned char *)(v16 + 31) = 0;
            *(unsigned char *)(v16 + 8) = 0;
            *(void *)(v16 + 216) = *(void *)(v16 + 32);
            uint64_t v18 = v16 + 224;
            if (*(char *)(v16 + 247) < 0) {
              operator delete(*(void **)v18);
            }
            uint64_t v19 = v16 + 40;
            uint64_t v20 = a1 + v15;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            *(void *)(v18 + 16) = *(void *)(v19 + 16);
            *(unsigned char *)(v20 + 63) = 0;
            *(unsigned char *)uint64_t v19 = 0;
            *(void *)(v20 + 248) = *(void *)(a1 + v15 + 64);
            *(_DWORD *)(v20 + 256) = *(_DWORD *)(a1 + v15 + 72);
            uint64_t v21 = (void **)(a1 + v15 + 264);
            if (*(char *)(a1 + v15 + 287) < 0) {
              operator delete(*v21);
            }
            *(_OWORD *)uint64_t v21 = *(_OWORD *)(v20 + 80);
            *(void *)(a1 + v15 + 280) = *(void *)(v20 + 96);
            *(unsigned char *)(v20 + 103) = 0;
            *(unsigned char *)(v20 + 80) = 0;
            uint64_t v22 = v20 + 288;
            if (*(char *)(v20 + 311) < 0) {
              operator delete(*(void **)v22);
            }
            uint64_t v23 = a1 + v15;
            long long v24 = *(_OWORD *)(a1 + v15 + 104);
            *(void *)(v22 + 16) = *(void *)(a1 + v15 + 120);
            *(_OWORD *)uint64_t v22 = v24;
            *(unsigned char *)(v23 + 127) = 0;
            *(unsigned char *)(v23 + 104) = 0;
            *(_DWORD *)(v23 + 312) = *(_DWORD *)(a1 + v15 + 128);
            uint64_t v25 = (void **)(a1 + v15 + 320);
            if (*(char *)(a1 + v15 + 343) < 0) {
              operator delete(*v25);
            }
            long long v26 = *(_OWORD *)(v23 + 136);
            *(void *)(a1 + v15 + 336) = *(void *)(v23 + 152);
            *(_OWORD *)uint64_t v25 = v26;
            *(unsigned char *)(v23 + 159) = 0;
            *(unsigned char *)(v23 + 136) = 0;
            *(_OWORD *)(v23 + 344) = *(_OWORD *)(v23 + 160);
            *(void *)(v23 + 360) = *(void *)(v23 + 176);
            if (!v15) {
              break;
            }
            uint64_t v14 = *(void *)(a1 + v15 - 184);
            uint64_t v13 = v15 - 184;
            if (v8 >= v14)
            {
              uint64_t v27 = a1 + v15;
              uint64_t v28 = a1 + v15;
              *(void *)(a1 + v15) = v8;
              if ((*(char *)(a1 + v13 + 215) & 0x80000000) == 0) {
                goto LABEL_24;
              }
              goto LABEL_23;
            }
          }
          uint64_t v27 = a1;
          uint64_t v28 = a1;
          *(void *)a1 = v8;
          if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
            goto LABEL_24;
          }
LABEL_23:
          operator delete(*(void **)(v28 + 8));
LABEL_24:
          *(void *)(v28 + 8) = v33;
          *(void *)(v28 + 16) = *(void *)v49;
          *(void *)(v28 + 23) = *(void *)&v49[7];
          *(unsigned char *)(v28 + 31) = v32;
          *(void *)(v27 + 32) = v9;
          if (*(char *)(v27 + 63) < 0) {
            operator delete(*(void **)(v28 + 40));
          }
          *(void *)(v28 + 40) = v35;
          uint64_t v29 = (void *)(a1 + v15);
          v29[6] = *(void *)v48;
          *(void *)((char *)v29 + 55) = *(void *)&v48[7];
          *(unsigned char *)(v28 + 63) = v34;
          *(void *)(v27 + 64) = v10;
          *(_DWORD *)(v27 + 72) = v11;
          uint64_t v2 = a2;
          if (*(char *)(v27 + 103) < 0) {
            operator delete(*(void **)(v28 + 80));
          }
          *(void *)(v28 + 80) = v37;
          v29[11] = *(void *)v47;
          *(void *)((char *)v29 + 95) = *(void *)&v47[7];
          *(unsigned char *)(v28 + 103) = v36;
          if (*(char *)(v27 + 127) < 0) {
            operator delete(*(void **)(v28 + 104));
          }
          *(void *)(v28 + 104) = v40;
          uint64_t v30 = a1 + v15;
          *(void *)(v30 + 112) = *(void *)v46;
          *(void *)(v30 + 119) = *(void *)&v46[7];
          *(unsigned char *)(v28 + 127) = v39;
          *(_DWORD *)(v27 + 128) = v38;
          if (*(char *)(v27 + 159) < 0) {
            operator delete(*(void **)(v28 + 136));
          }
          *(unsigned char *)(v28 + 136) = v42;
          *(_OWORD *)(v30 + 137) = *(_OWORD *)v45;
          *(void *)(v30 + 151) = *(void *)&v45[14];
          *(unsigned char *)(v28 + 159) = v41;
          *(_OWORD *)(v28 + 160) = v43;
          *(void *)(v28 + 176) = v44;
        }
        unint64_t v4 = v7 + 23;
        v5 += 184;
        uint64_t v6 = v7;
      }
      while (v7 + 23 != v2);
    }
  }
}

double sub_7E07A8(uint64_t a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    uint64_t v6 = a5;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 23);
      int v11 = (_OWORD *)(a5 + 8);
      char v12 = (_OWORD *)(a5 + 40);
      uint64_t v13 = (_OWORD *)(a5 + 80);
      uint64_t v14 = (_OWORD *)(a5 + 104);
      if (v10 >= *(void *)a1)
      {
        *(void *)a5 = *(void *)a1;
        long long v28 = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *int v11 = v28;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a5 + 32) = *(void *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 40);
        *(void *)(a5 + 56) = *(void *)(a1 + 56);
        *char v12 = v29;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a5 + 64) = *(void *)(a1 + 64);
        *(_DWORD *)(a5 + 72) = *(_DWORD *)(a1 + 72);
        long long v30 = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        _OWORD *v13 = v30;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        long long v31 = *(_OWORD *)(a1 + 104);
        *(void *)(a5 + 120) = *(void *)(a1 + 120);
        *uint64_t v14 = v31;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        *(_DWORD *)(a5 + 128) = *(_DWORD *)(a1 + 128);
        long long v32 = *(_OWORD *)(a1 + 136);
        *(void *)(a5 + 152) = *(void *)(a1 + 152);
        *(_OWORD *)(a5 + 136) = v32;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 136) = 0;
        long long v33 = *(_OWORD *)(a1 + 160);
        *(void *)(a5 + 176) = *(void *)(a1 + 176);
        *(_OWORD *)(a5 + 160) = v33;
        *(void *)(a5 + 184) = *(a2 - 23);
        uint64_t v6 = a5 + 184;
        long long v34 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 208) = *(a2 - 20);
        *(_OWORD *)(a5 + 192) = v34;
        *(a2 - 21) = 0;
        *(a2 - 20) = 0;
        *(a2 - 22) = 0;
        *(void *)(a5 + 216) = *(a2 - 19);
        long long v35 = *((_OWORD *)a2 - 9);
        *(void *)(a5 + 240) = *(a2 - 16);
        *(_OWORD *)(a5 + 224) = v35;
        *(a2 - 17) = 0;
        *(a2 - 16) = 0;
        *(a2 - 18) = 0;
        *(void *)(a5 + 248) = *(a2 - 15);
        *(_DWORD *)(a5 + 256) = *((_DWORD *)a2 - 28);
        long long v36 = *(_OWORD *)(a2 - 13);
        *(void *)(a5 + 280) = *(a2 - 11);
        *(_OWORD *)(a5 + 264) = v36;
        *(a2 - 12) = 0;
        *(a2 - 11) = 0;
        *(a2 - 13) = 0;
        long long v37 = *((_OWORD *)a2 - 5);
        *(void *)(a5 + 304) = *(a2 - 8);
        *(_OWORD *)(a5 + 288) = v37;
        *(a2 - 9) = 0;
        *(a2 - 8) = 0;
        *(a2 - 10) = 0;
        *(_DWORD *)(a5 + 312) = *((_DWORD *)a2 - 14);
        long long v38 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 336) = *(a2 - 4);
        *(_OWORD *)(a5 + 320) = v38;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(a2 - 6) = 0;
        a6 = *(__n128 *)(a2 - 3);
        uint64_t v26 = *(a2 - 1);
        goto LABEL_13;
      }
      *(void *)a5 = v10;
      long long v15 = *((_OWORD *)a2 - 11);
      *(void *)(a5 + 24) = *(a2 - 20);
      *int v11 = v15;
      *(a2 - 21) = 0;
      *(a2 - 20) = 0;
      *(a2 - 22) = 0;
      *(void *)(a5 + 32) = *(a2 - 19);
      long long v16 = *((_OWORD *)a2 - 9);
      *(void *)(a5 + 56) = *(a2 - 16);
      *char v12 = v16;
      *(a2 - 17) = 0;
      *(a2 - 16) = 0;
      *(a2 - 18) = 0;
      *(void *)(a5 + 64) = *(a2 - 15);
      *(_DWORD *)(a5 + 72) = *((_DWORD *)a2 - 28);
      long long v17 = *(_OWORD *)(a2 - 13);
      *(void *)(a5 + 96) = *(a2 - 11);
      _OWORD *v13 = v17;
      *(a2 - 12) = 0;
      *(a2 - 11) = 0;
      *(a2 - 13) = 0;
      long long v18 = *((_OWORD *)a2 - 5);
      *(void *)(a5 + 120) = *(a2 - 8);
      *uint64_t v14 = v18;
      *(a2 - 9) = 0;
      *(a2 - 8) = 0;
      *(a2 - 10) = 0;
      *(_DWORD *)(a5 + 128) = *((_DWORD *)a2 - 14);
      long long v19 = *((_OWORD *)a2 - 3);
      *(void *)(a5 + 152) = *(a2 - 4);
      *(_OWORD *)(a5 + 136) = v19;
      *(a2 - 5) = 0;
      *(a2 - 4) = 0;
      *(a2 - 6) = 0;
      long long v20 = *(_OWORD *)(a2 - 3);
      *(void *)(a5 + 176) = *(a2 - 1);
      *(_OWORD *)(a5 + 160) = v20;
      *(void *)(a5 + 184) = *(void *)a1;
      uint64_t v6 = a5 + 184;
LABEL_7:
      long long v21 = *(_OWORD *)(a1 + 8);
      *(void *)(v6 + 24) = *(void *)(a1 + 24);
      *(_OWORD *)(v6 + 8) = v21;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(v6 + 32) = *(void *)(a1 + 32);
      long long v22 = *(_OWORD *)(a1 + 40);
      *(void *)(v6 + 56) = *(void *)(a1 + 56);
      *(_OWORD *)(v6 + 40) = v22;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(v6 + 64) = *(void *)(a1 + 64);
      *(_DWORD *)(v6 + 72) = *(_DWORD *)(a1 + 72);
      long long v23 = *(_OWORD *)(a1 + 80);
      *(void *)(v6 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(v6 + 80) = v23;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 80) = 0;
      long long v24 = *(_OWORD *)(a1 + 104);
      *(void *)(v6 + 120) = *(void *)(a1 + 120);
      *(_OWORD *)(v6 + 104) = v24;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(v6 + 128) = *(_DWORD *)(a1 + 128);
      long long v25 = *(_OWORD *)(a1 + 136);
      *(void *)(v6 + 152) = *(void *)(a1 + 152);
      *(_OWORD *)(v6 + 136) = v25;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 136) = 0;
      a6 = *(__n128 *)(a1 + 160);
      uint64_t v26 = *(void *)(a1 + 176);
LABEL_13:
      *(void *)(v6 + 176) = v26;
      *(__n128 *)(v6 + 160) = a6;
      return a6.n128_f64[0];
    }
    if (a4 == 1)
    {
      *(void *)a5 = *(void *)a1;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v39 = a4 >> 1;
      uint64_t v40 = 184 * (a4 >> 1);
      sub_7E0054(a1, a1 + v40, a3, a4 >> 1, a5, a4 >> 1);
      sub_7E0054(a1 + v40, a2, a3, a4 - v39, v6 + v40, a4 - v39);
      a6.n128_u64[0] = sub_7E162C(a1, (void *)(a1 + v40), a1 + v40, (uint64_t)a2, (__n128 *)v6).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_7E1200(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

double sub_7E0BAC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  if (!a6) {
    return a9.n128_f64[0];
  }
  uint64_t v9 = a6;
  while (v9 > a8 && a5 > a8)
  {
    if (!a5) {
      return a9.n128_f64[0];
    }
    unint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (*a2 >= a1[v13 / 8])
    {
      v13 += 184;
      if (__CFADD__(v14++, 1)) {
        return a9.n128_f64[0];
      }
    }
    uint64_t v16 = -v14;
    if (-v14 >= v9)
    {
      if (v14 == -1)
      {
        a9.n128_u64[0] = sub_7E0F90(&a1[v13 / 8], a2).n128_u64[0];
        return a9.n128_f64[0];
      }
      if (v14 > 0) {
        uint64_t v16 = 1 - v14;
      }
      uint64_t v26 = v16 >> 1;
      long long v20 = &a1[23 * (v16 >> 1) + v13 / 8];
      long long v19 = a2;
      if (a2 != a3)
      {
        unint64_t v33 = 0xD37A6F4DE9BD37A7 * (a3 - a2);
        long long v19 = a2;
        do
        {
          unint64_t v34 = v33 >> 1;
          long long v35 = &v19[23 * (v33 >> 1)];
          uint64_t v37 = *v35;
          long long v36 = v35 + 23;
          v33 += ~(v33 >> 1);
          if (v37 < *v20) {
            long long v19 = v36;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      uint64_t v18 = 0xD37A6F4DE9BD37A7 * (v19 - a2);
      long long v57 = &a1[v13 / 8];
      if (v20 != a2)
      {
LABEL_22:
        if (v19 == a2)
        {
          uint64_t v27 = v20;
        }
        else
        {
          uint64_t v51 = v18;
          uint64_t v52 = v26;
          long long v53 = a3;
          uint64_t v54 = a8;
          uint64_t v55 = a4;
          uint64_t v56 = a7;
          a9 = sub_7E0F90(v20, a2);
          uint64_t v27 = v20 + 23;
          for (uint64_t i = a2 + 23; i != v19; i += 23)
          {
            if (v27 == a2) {
              a2 = i;
            }
            a9 = sub_7E0F90(v27, i);
            v27 += 23;
          }
          if (v27 != a2)
          {
            long long v29 = v27;
            long long v30 = a2;
            while (1)
            {
              a9 = sub_7E0F90(v29, v30);
              v30 += 23;
              BOOL v31 = v29 + 23 == a2;
              if (v30 == v19)
              {
                if (v29 + 23 == a2) {
                  break;
                }
                long long v30 = a2 + 23;
                v29 += 46;
                while (1)
                {
                  a9 = sub_7E0F90(v29 - 23, a2);
                  BOOL v31 = v29 == a2;
                  if (v30 != v19) {
                    break;
                  }
                  BOOL v32 = v29 == a2;
                  v29 += 23;
                  if (v32) {
                    goto LABEL_39;
                  }
                }
              }
              else
              {
                v29 += 23;
              }
              if (v31) {
                a2 = v30;
              }
            }
          }
LABEL_39:
          a4 = v55;
          a7 = v56;
          a3 = v53;
          a8 = v54;
          uint64_t v18 = v51;
          uint64_t v26 = v52;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = v9 + 1;
      }
      uint64_t v18 = v17 >> 1;
      long long v19 = &a2[23 * (v17 >> 1)];
      long long v20 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        unint64_t v21 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)a2 - (char *)a1 - v13) >> 3);
        long long v20 = &a1[v13 / 8];
        do
        {
          unint64_t v22 = v21 >> 1;
          long long v23 = &v20[23 * (v21 >> 1)];
          uint64_t v25 = *v23;
          long long v24 = v23 + 23;
          v21 += ~(v21 >> 1);
          if (*v19 < v25) {
            unint64_t v21 = v22;
          }
          else {
            long long v20 = v24;
          }
        }
        while (v21);
      }
      uint64_t v26 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)v20 - (char *)a1 - v13) >> 3);
      long long v57 = &a1[v13 / 8];
      if (v20 != a2) {
        goto LABEL_22;
      }
    }
    uint64_t v27 = v19;
LABEL_52:
    a5 = -v26 - v14;
    uint64_t v38 = v9 - v18;
    if (v26 + v18 >= v9 - (v26 + v18) - v14)
    {
      uint64_t v44 = a4;
      uint64_t v45 = v26;
      uint64_t v46 = v18;
      uint64_t v47 = a7;
      uint64_t v48 = a8;
      sub_7E0BAC(v27, v19, a3, a9);
      a8 = v48;
      a4 = v44;
      a7 = v47;
      a2 = v20;
      uint64_t v49 = v46;
      a5 = v45;
      a3 = v27;
      a1 = v57;
      uint64_t v9 = v49;
      if (!v49) {
        return a9.n128_f64[0];
      }
    }
    else
    {
      unint64_t v39 = &a1[v13 / 8];
      uint64_t v40 = a3;
      uint64_t v41 = a4;
      uint64_t v42 = a7;
      uint64_t v43 = a8;
      sub_7E0BAC(v39, v20, v27, a9);
      a3 = v40;
      a8 = v43;
      a4 = v41;
      a7 = v42;
      a1 = v27;
      a2 = v19;
      uint64_t v9 = v38;
      if (!v38) {
        return a9.n128_f64[0];
      }
    }
  }

  sub_7E1A40(a1, a2, a3, a4, a5, v9, a7);
  return a9.n128_f64[0];
}

__n128 sub_7E0F90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v5 = a1 + 1;
  uint64_t v6 = v7;
  *(void *)BOOL v32 = a1[2];
  *(void *)&v32[7] = *(uint64_t *)((char *)a1 + 23);
  char v8 = *((unsigned char *)a1 + 31);
  a1[2] = 0;
  a1[3] = 0;
  *uint64_t v5 = 0;
  uint64_t v9 = a1[4];
  uint64_t v18 = a1[5];
  *(void *)&v31[7] = *(uint64_t *)((char *)a1 + 55);
  *(void *)BOOL v31 = a1[6];
  char v10 = *((unsigned char *)a1 + 63);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = a1[8];
  int v12 = *((_DWORD *)a1 + 18);
  uint64_t v20 = a1[10];
  *(void *)&v30[7] = *(uint64_t *)((char *)a1 + 95);
  *(void *)long long v30 = a1[11];
  char v19 = *((unsigned char *)a1 + 103);
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v23 = a1[13];
  *(void *)&v29[7] = *(uint64_t *)((char *)a1 + 119);
  *(void *)long long v29 = a1[14];
  char v13 = *((unsigned char *)a1 + 127);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  int v21 = *((_DWORD *)a1 + 32);
  char v22 = v13;
  uint64_t v25 = a1[17];
  *(void *)&v28[7] = *(uint64_t *)((char *)a1 + 151);
  *(void *)long long v28 = a1[18];
  char v24 = *((unsigned char *)a1 + 159);
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  __n128 v14 = *((__n128 *)a1 + 10);
  uint64_t v27 = a1[22];
  *a1 = *a2;
  long long v15 = (void **)(a2 + 1);
  __n128 v26 = v14;
  sub_4C2034((uint64_t)v5, (long long *)(a2 + 1));
  uint64_t v16 = a2[22];
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  a1[22] = v16;
  *a2 = v4;
  if (*((char *)a2 + 31) < 0) {
    operator delete(*v15);
  }
  a2[1] = v6;
  a2[2] = *(void *)v32;
  *(uint64_t *)((char *)a2 + 23) = *(void *)&v32[7];
  *((unsigned char *)a2 + 31) = v8;
  a2[4] = v9;
  if (*((char *)a2 + 63) < 0) {
    operator delete((void *)a2[5]);
  }
  a2[5] = v18;
  a2[6] = *(void *)v31;
  *(uint64_t *)((char *)a2 + 55) = *(void *)&v31[7];
  *((unsigned char *)a2 + 63) = v10;
  a2[8] = v11;
  *((_DWORD *)a2 + 18) = v12;
  if (*((char *)a2 + 103) < 0) {
    operator delete((void *)a2[10]);
  }
  a2[10] = v20;
  a2[11] = *(void *)v30;
  *(uint64_t *)((char *)a2 + 95) = *(void *)&v30[7];
  *((unsigned char *)a2 + 103) = v19;
  if (*((char *)a2 + 127) < 0) {
    operator delete((void *)a2[13]);
  }
  a2[13] = v23;
  a2[14] = *(void *)v29;
  *(uint64_t *)((char *)a2 + 119) = *(void *)&v29[7];
  *((unsigned char *)a2 + 127) = v22;
  *((_DWORD *)a2 + 32) = v21;
  if (*((char *)a2 + 159) < 0) {
    operator delete((void *)a2[17]);
  }
  a2[17] = v25;
  a2[18] = *(void *)v28;
  *(uint64_t *)((char *)a2 + 151) = *(void *)&v28[7];
  *((unsigned char *)a2 + 159) = v24;
  __n128 result = v26;
  *((__n128 *)a2 + 10) = v26;
  a2[22] = v27;
  return result;
}

__n128 sub_7E1200(uint64_t a1, int64_t *a2, uint64_t a3)
{
  if ((int64_t *)a1 != a2)
  {
    uint64_t v5 = (int64_t *)a1;
    *(void *)a3 = *(void *)a1;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v6;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a3 + 32) = *(void *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 40);
    *(void *)(a3 + 56) = *(void *)(a1 + 56);
    *(_OWORD *)(a3 + 40) = v7;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a3 + 64) = *(void *)(a1 + 64);
    *(_DWORD *)(a3 + 72) = *(_DWORD *)(a1 + 72);
    long long v8 = *(_OWORD *)(a1 + 80);
    *(void *)(a3 + 96) = *(void *)(a1 + 96);
    *(_OWORD *)(a3 + 80) = v8;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    long long v9 = *(_OWORD *)(a1 + 104);
    *(void *)(a3 + 120) = *(void *)(a1 + 120);
    *(_OWORD *)(a3 + 104) = v9;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    *(_DWORD *)(a3 + 128) = *(_DWORD *)(a1 + 128);
    long long v10 = *(_OWORD *)(a1 + 136);
    *(void *)(a3 + 152) = *(void *)(a1 + 152);
    *(_OWORD *)(a3 + 136) = v10;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 136) = 0;
    __n128 result = *(__n128 *)(a1 + 160);
    *(void *)(a3 + 176) = *(void *)(a1 + 176);
    *(__n128 *)(a3 + 160) = result;
    int v12 = (int64_t *)(a1 + 184);
    if ((int64_t *)(a1 + 184) != a2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = a3;
      do
      {
        int v21 = (_OWORD *)(v14 + 192);
        char v22 = v12;
        uint64_t v23 = *v12;
        char v24 = (_OWORD *)(v14 + 224);
        uint64_t v25 = (_OWORD *)(v14 + 264);
        __n128 v26 = (_OWORD *)(v14 + 288);
        if (v23 >= *(void *)v14)
        {
          *(void *)(v14 + 184) = v23;
          long long v15 = *((_OWORD *)v5 + 12);
          *(void *)(v14 + 208) = v5[26];
          *int v21 = v15;
          v5[25] = 0;
          v5[26] = 0;
          v5[24] = 0;
          *(void *)(v14 + 216) = v5[27];
          long long v16 = *((_OWORD *)v5 + 14);
          *(void *)(v14 + 240) = v5[30];
          *char v24 = v16;
          v5[29] = 0;
          v5[30] = 0;
          v5[28] = 0;
          *(void *)(v14 + 248) = v5[31];
          *(_DWORD *)(v14 + 256) = *((_DWORD *)v5 + 64);
          long long v17 = *(_OWORD *)(v5 + 33);
          *(void *)(v14 + 280) = v5[35];
          _OWORD *v25 = v17;
          v5[34] = 0;
          v5[35] = 0;
          v5[33] = 0;
          long long v18 = *((_OWORD *)v5 + 18);
          *(void *)(v14 + 304) = v5[38];
          *__n128 v26 = v18;
          v5[37] = 0;
          v5[38] = 0;
          v5[36] = 0;
          *(_DWORD *)(v14 + 312) = *((_DWORD *)v5 + 78);
          long long v19 = *((_OWORD *)v5 + 20);
          *(void *)(v14 + 336) = v5[42];
          *(_OWORD *)(v14 + 320) = v19;
          v5[41] = 0;
          v5[42] = 0;
          v5[40] = 0;
          uint64_t v20 = (__n128 *)(v14 + 344);
        }
        else
        {
          *(void *)(v14 + 184) = *(void *)v14;
          uint64_t v27 = *(void *)(v14 + 32);
          *(void *)(v14 + 208) = *(void *)(v14 + 24);
          *int v21 = *(_OWORD *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          *(void *)(v14 + 16) = 0;
          *(void *)(v14 + 24) = 0;
          *(void *)(v14 + 216) = v27;
          *char v24 = *(_OWORD *)(v14 + 40);
          uint64_t v28 = *(void *)(v14 + 64);
          *(void *)(v14 + 240) = *(void *)(v14 + 56);
          *(void *)(v14 + 40) = 0;
          *(void *)(v14 + 48) = 0;
          *(void *)(v14 + 56) = 0;
          *(void *)(v14 + 248) = v28;
          *(_DWORD *)(v14 + 256) = *(_DWORD *)(v14 + 72);
          long long v29 = *(_OWORD *)(v14 + 80);
          *(void *)(v14 + 280) = *(void *)(v14 + 96);
          _OWORD *v25 = v29;
          *(void *)(v14 + 80) = 0;
          *(void *)(v14 + 88) = 0;
          long long v30 = *(_OWORD *)(v14 + 104);
          *(void *)(v14 + 304) = *(void *)(v14 + 120);
          *__n128 v26 = v30;
          *(void *)(v14 + 96) = 0;
          *(void *)(v14 + 104) = 0;
          *(void *)(v14 + 112) = 0;
          *(void *)(v14 + 120) = 0;
          *(_DWORD *)(v14 + 312) = *(_DWORD *)(v14 + 128);
          long long v31 = *(_OWORD *)(v14 + 136);
          *(void *)(v14 + 336) = *(void *)(v14 + 152);
          *(_OWORD *)(v14 + 320) = v31;
          *(void *)(v14 + 136) = 0;
          *(void *)(v14 + 144) = 0;
          *(void *)(v14 + 152) = 0;
          long long v32 = *(_OWORD *)(v14 + 160);
          *(void *)(v14 + 360) = *(void *)(v14 + 176);
          unint64_t v33 = (__n128 *)a3;
          *(_OWORD *)(v14 + 344) = v32;
          if (v14 != a3)
          {
            uint64_t v34 = v13;
            while (1)
            {
              unint64_t v33 = (__n128 *)(a3 + v34);
              int64_t v36 = *(void *)(a3 + v34 - 184);
              if (*v22 >= v36) {
                break;
              }
              v33->n128_u64[0] = v36;
              uint64_t v37 = &v33->n128_u64[1];
              if (v33[1].n128_i8[15] < 0) {
                operator delete((void *)*v37);
              }
              uint64_t v38 = v33 - 11;
              uint64_t v39 = a3 + v34;
              *(__n128 *)uint64_t v37 = *v38;
              v37[2] = v38[1].n128_u64[0];
              *(unsigned char *)(v39 - 153) = 0;
              v38->n128_u8[0] = 0;
              *(void *)(v39 + 32) = *(void *)(a3 + v34 - 152);
              uint64_t v40 = (void **)(a3 + v34 + 40);
              if (*(char *)(a3 + v34 + 63) < 0) {
                operator delete(*v40);
              }
              *(_OWORD *)uint64_t v40 = *(_OWORD *)(v39 - 144);
              *(void *)(a3 + v34 + 56) = *(void *)(v39 - 128);
              *(unsigned char *)(v39 - 121) = 0;
              *(unsigned char *)(v39 - 144) = 0;
              *(void *)(v39 + 64) = *(void *)(v39 - 120);
              *(_DWORD *)(v39 + 72) = *(_DWORD *)(v39 - 112);
              uint64_t v41 = v39 + 80;
              if (*(char *)(v39 + 103) < 0) {
                operator delete(*(void **)v41);
              }
              uint64_t v42 = v39 - 104;
              uint64_t v43 = a3 + v34;
              *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
              *(void *)(v41 + 16) = *(void *)(v42 + 16);
              *(unsigned char *)(a3 + v34 - 81) = 0;
              *(unsigned char *)uint64_t v42 = 0;
              uint64_t v44 = (void **)(a3 + v34 + 104);
              if (*(char *)(a3 + v34 + 127) < 0) {
                operator delete(*v44);
              }
              *(_OWORD *)uint64_t v44 = *(_OWORD *)(v43 - 80);
              *(void *)(a3 + v34 + 120) = *(void *)(v43 - 64);
              *(unsigned char *)(v43 - 57) = 0;
              *(unsigned char *)(v43 - 80) = 0;
              *(_DWORD *)(v43 + 128) = *(_DWORD *)(v43 - 56);
              uint64_t v45 = (void **)(v43 + 136);
              if (*(char *)(v43 + 159) < 0) {
                operator delete(*v45);
              }
              uint64_t v35 = a3 + v34;
              *(_OWORD *)uint64_t v45 = *(_OWORD *)(a3 + v34 - 48);
              *(void *)(v43 + 152) = *(void *)(a3 + v34 - 32);
              *(unsigned char *)(v35 - 25) = 0;
              *(unsigned char *)(v35 - 48) = 0;
              *(_OWORD *)(v35 + 160) = *(_OWORD *)(a3 + v34 - 24);
              *(void *)(v35 + 176) = *(void *)(a3 + v34 - 8);
              v34 -= 184;
              if (!v34)
              {
                unint64_t v33 = (__n128 *)a3;
                break;
              }
            }
          }
          uint64_t v46 = (uint64_t)&v33->n128_i64[1];
          v33->n128_u64[0] = *v22;
          uint64_t v20 = v33 + 10;
          sub_4C2034(v46, (long long *)v5 + 12);
        }
        v14 += 184;
        __n128 result = *(__n128 *)(v5 + 43);
        v20[1].n128_u64[0] = v5[45];
        *uint64_t v20 = result;
        int v12 = v22 + 23;
        v13 += 184;
        uint64_t v5 = v22;
      }
      while (v22 + 23 != a2);
    }
  }
  return result;
}

__n128 sub_7E162C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  if ((void *)a1 == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      a5->n128_u64[0] = *(void *)a3;
      __n128 v21 = *(__n128 *)(a3 + 8);
      a5[1].n128_u64[1] = *(void *)(a3 + 24);
      *(__n128 *)((char *)a5 + 8) = v21;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      a5[2].n128_u64[0] = *(void *)(a3 + 32);
      __n128 v22 = *(__n128 *)(a3 + 40);
      a5[3].n128_u64[1] = *(void *)(a3 + 56);
      *(__n128 *)((char *)a5 + 40) = v22;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 40) = 0;
      a5[4].n128_u64[0] = *(void *)(a3 + 64);
      a5[4].n128_u32[2] = *(_DWORD *)(a3 + 72);
      __n128 v23 = *(__n128 *)(a3 + 80);
      a5[6].n128_u64[0] = *(void *)(a3 + 96);
      a5[5] = v23;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 80) = 0;
      __n128 v24 = *(__n128 *)(a3 + 104);
      a5[7].n128_u64[1] = *(void *)(a3 + 120);
      *(__n128 *)((char *)a5 + 104) = v24;
      *(void *)(a3 + 112) = 0;
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 104) = 0;
      a5[8].n128_u32[0] = *(_DWORD *)(a3 + 128);
      __n128 v25 = *(__n128 *)(a3 + 136);
      a5[9].n128_u64[1] = *(void *)(a3 + 152);
      *(__n128 *)((char *)a5 + 136) = v25;
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 136) = 0;
      __n128 result = *(__n128 *)(a3 + 160);
      a5[11].n128_u64[0] = *(void *)(a3 + 176);
      a5[10] = result;
      a3 += 184;
      a5 = (__n128 *)((char *)a5 + 184);
    }
  }
  else
  {
    uint64_t v5 = a5 + 10;
    while (a3 != a4)
    {
      int v12 = &v5[-10].n128_i8[8];
      uint64_t v13 = &v5[-8].n128_i8[8];
      uint64_t v14 = v5 - 5;
      long long v15 = &v5[-4].n128_i8[8];
      if (*(void *)a3 >= *(void *)a1)
      {
        v5[-10].n128_u64[0] = *(void *)a1;
        long long v6 = *(_OWORD *)(a1 + 8);
        v5[-9].n128_u64[1] = *(void *)(a1 + 24);
        *(_OWORD *)int v12 = v6;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        v5[-8].n128_u64[0] = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)(a1 + 40);
        v5[-7].n128_u64[1] = *(void *)(a1 + 56);
        *(_OWORD *)uint64_t v13 = v7;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        v5[-6].n128_u64[0] = *(void *)(a1 + 64);
        v5[-6].n128_u32[2] = *(_DWORD *)(a1 + 72);
        __n128 v8 = *(__n128 *)(a1 + 80);
        v5[-4].n128_u64[0] = *(void *)(a1 + 96);
        *uint64_t v14 = v8;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        long long v9 = *(_OWORD *)(a1 + 104);
        v5[-3].n128_u64[1] = *(void *)(a1 + 120);
        *(_OWORD *)long long v15 = v9;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        v5[-2].n128_u32[0] = *(_DWORD *)(a1 + 128);
        __n128 v10 = *(__n128 *)(a1 + 136);
        v5[-1].n128_u64[1] = *(void *)(a1 + 152);
        *(__n128 *)((char *)v5 - 24) = v10;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 136) = 0;
        __n128 result = *(__n128 *)(a1 + 160);
        v5[1].n128_u64[0] = *(void *)(a1 + 176);
        *uint64_t v5 = result;
        uint64_t v5 = (__n128 *)((char *)v5 + 184);
        a1 += 184;
        if ((void *)a1 == a2) {
          goto LABEL_7;
        }
      }
      else
      {
        v5[-10].n128_u64[0] = *(void *)a3;
        long long v16 = *(_OWORD *)(a3 + 8);
        v5[-9].n128_u64[1] = *(void *)(a3 + 24);
        *(_OWORD *)int v12 = v16;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 8) = 0;
        v5[-8].n128_u64[0] = *(void *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 40);
        v5[-7].n128_u64[1] = *(void *)(a3 + 56);
        *(_OWORD *)uint64_t v13 = v17;
        *(void *)(a3 + 48) = 0;
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 40) = 0;
        v5[-6].n128_u64[0] = *(void *)(a3 + 64);
        v5[-6].n128_u32[2] = *(_DWORD *)(a3 + 72);
        __n128 v18 = *(__n128 *)(a3 + 80);
        v5[-4].n128_u64[0] = *(void *)(a3 + 96);
        *uint64_t v14 = v18;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(void *)(a3 + 80) = 0;
        long long v19 = *(_OWORD *)(a3 + 104);
        v5[-3].n128_u64[1] = *(void *)(a3 + 120);
        *(_OWORD *)long long v15 = v19;
        *(void *)(a3 + 112) = 0;
        *(void *)(a3 + 120) = 0;
        *(void *)(a3 + 104) = 0;
        v5[-2].n128_u32[0] = *(_DWORD *)(a3 + 128);
        __n128 v20 = *(__n128 *)(a3 + 136);
        v5[-1].n128_u64[1] = *(void *)(a3 + 152);
        *(__n128 *)((char *)v5 - 24) = v20;
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(void *)(a3 + 136) = 0;
        __n128 result = *(__n128 *)(a3 + 160);
        v5[1].n128_u64[0] = *(void *)(a3 + 176);
        *uint64_t v5 = result;
        uint64_t v5 = (__n128 *)((char *)v5 + 184);
        a3 += 184;
        if ((void *)a1 == a2)
        {
LABEL_7:
          a5 = v5 - 10;
          goto LABEL_9;
        }
      }
    }
    if ((void *)a1 != a2)
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = (__n128 *)((char *)v5 + v26);
        uint64_t v28 = (void *)(a1 + v26);
        v27[-10].n128_u64[0] = *(void *)(a1 + v26);
        __n128 v29 = *(__n128 *)(a1 + v26 + 8);
        v27[-9].n128_u64[1] = *(void *)(a1 + v26 + 24);
        *(__n128 *)((char *)v27 - 152) = v29;
        v28[2] = 0;
        v28[3] = 0;
        unint64_t v30 = *(void *)(a1 + v26 + 32);
        v28[1] = 0;
        v27[-8].n128_u64[0] = v30;
        __n128 v31 = *(__n128 *)(a1 + v26 + 40);
        v27[-7].n128_u64[1] = *(void *)(a1 + v26 + 56);
        *(__n128 *)((char *)v27 - 120) = v31;
        v28[6] = 0;
        v28[7] = 0;
        v28[5] = 0;
        v27[-6].n128_u64[0] = *(void *)(a1 + v26 + 64);
        v27[-6].n128_u32[2] = *(_DWORD *)(a1 + v26 + 72);
        __n128 v32 = *(__n128 *)(a1 + v26 + 80);
        v27[-4].n128_u64[0] = *(void *)(a1 + v26 + 96);
        v27[-5] = v32;
        void v28[11] = 0;
        v28[12] = 0;
        v28[10] = 0;
        __n128 v33 = *(__n128 *)(a1 + v26 + 104);
        v27[-3].n128_u64[1] = *(void *)(a1 + v26 + 120);
        *(__n128 *)((char *)v27 - 56) = v33;
        v28[14] = 0;
        unsigned char v28[15] = 0;
        v28[13] = 0;
        v27[-2].n128_u32[0] = *(_DWORD *)(a1 + v26 + 128);
        __n128 v34 = *(__n128 *)(a1 + v26 + 136);
        v27[-1].n128_u64[1] = *(void *)(a1 + v26 + 152);
        *(__n128 *)((char *)v27 - 24) = v34;
        v28[18] = 0;
        v28[19] = 0;
        v28[17] = 0;
        __n128 result = *(__n128 *)(a1 + v26 + 160);
        v27[1].n128_u64[0] = *(void *)(a1 + v26 + 176);
        __n128 *v27 = result;
        v26 += 184;
      }
      while (v28 + 23 != a2);
    }
  }
  return result;
}

void sub_7E1978(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2 + 80;
    do
    {
      if (*(char *)(v4 + 79) < 0)
      {
        operator delete(*(void **)(v4 + 56));
        if ((*(char *)(v4 + 47) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*(char *)(v4 + 47) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(*(void **)(v4 + 24));
      if ((*(char *)(v4 + 23) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(v4 - 17) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(*(void **)v4);
      if ((*(char *)(v4 - 17) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v4 - 49) < 0) {
          goto LABEL_14;
        }
        goto LABEL_3;
      }
LABEL_13:
      operator delete(*(void **)(v4 - 40));
      if (*(char *)(v4 - 49) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(v4 - 72));
LABEL_3:
      ++v3;
      v4 += 184;
    }
    while (v3 < *a1);
  }
}

void sub_7E1A40(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __n128 v8 = a3;
  long long v9 = a2;
  __n128 v10 = a1;
  uint64_t v51 = 0;
  if (a5 <= a6)
  {
    if (a1 != a2)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 1;
      do
      {
        __n128 v29 = &a1[v27];
        uint64_t v30 = a7 + v27 * 8;
        *(void *)uint64_t v30 = a1[v27];
        long long v31 = *(_OWORD *)&a1[v27 + 1];
        *(void *)(v30 + 24) = a1[v27 + 3];
        *(_OWORD *)(v30 + 8) = v31;
        v29[2] = 0;
        v29[3] = 0;
        v29[1] = 0;
        *(void *)(v30 + 32) = a1[v27 + 4];
        long long v32 = *(_OWORD *)&a1[v27 + 5];
        *(void *)(v30 + 56) = a1[v27 + 7];
        *(_OWORD *)(v30 + 40) = v32;
        v29[6] = 0;
        v29[7] = 0;
        v29[5] = 0;
        *(void *)(v30 + 64) = a1[v27 + 8];
        *(_DWORD *)(v30 + 72) = a1[v27 + 9];
        long long v33 = *(_OWORD *)&a1[v27 + 10];
        *(void *)(v30 + 96) = a1[v27 + 12];
        *(_OWORD *)(v30 + 80) = v33;
        v29[11] = 0;
        v29[12] = 0;
        v29[10] = 0;
        long long v34 = *(_OWORD *)&a1[v27 + 13];
        *(void *)(v30 + 120) = a1[v27 + 15];
        *(_OWORD *)(v30 + 104) = v34;
        v29[14] = 0;
        unsigned char v29[15] = 0;
        v29[13] = 0;
        *(_DWORD *)(v30 + 128) = a1[v27 + 16];
        long long v35 = *(_OWORD *)&a1[v27 + 17];
        *(void *)(v30 + 152) = a1[v27 + 19];
        *(_OWORD *)(v30 + 136) = v35;
        v29[18] = 0;
        v29[19] = 0;
        v29[17] = 0;
        long long v36 = *(_OWORD *)&a1[v27 + 20];
        *(void *)(v30 + 176) = a1[v27 + 22];
        *(_OWORD *)(v30 + 160) = v36;
        uint64_t v51 = v28;
        v27 += 23;
        ++v28;
      }
      while (v29 + 23 != a2);
      if (v27 * 8)
      {
        uint64_t v37 = a7 + v27 * 8;
        uint64_t v38 = a7 + v27 * 8 - 184;
        uint64_t v39 = a7;
        while (v9 != v8)
        {
          uint64_t v41 = (uint64_t)(v10 + 1);
          uint64_t v42 = v10 + 20;
          if (*v9 >= *(void *)v39)
          {
            void *v10 = *(void *)v39;
            v10 += 23;
            sub_4C2034(v41, (long long *)(v39 + 8));
            uint64_t v40 = *(void *)(v39 + 176);
            *(_OWORD *)uint64_t v42 = *(_OWORD *)(v39 + 160);
            v42[2] = v40;
            v39 += 184;
            if (v37 == v39) {
              goto LABEL_33;
            }
          }
          else
          {
            void *v10 = *v9;
            v10 += 23;
            sub_4C2034(v41, (long long *)(v9 + 1));
            uint64_t v43 = v9[22];
            *(_OWORD *)uint64_t v42 = *((_OWORD *)v9 + 10);
            v42[2] = v43;
            v9 += 23;
            if (v37 == v39) {
              goto LABEL_33;
            }
          }
        }
        unint64_t v47 = 0;
        do
        {
          uint64_t v48 = &v10[v47 / 8];
          unint64_t v49 = v39 + v47;
          v10[v47 / 8] = *(void *)(v39 + v47);
          sub_4C2034((uint64_t)&v10[v47 / 8 + 1], (long long *)(v39 + v47 + 8));
          uint64_t v50 = *(void *)(v39 + v47 + 176);
          *((_OWORD *)v48 + 10) = *(_OWORD *)(v39 + v47 + 160);
          v48[22] = v50;
          v47 += 184;
        }
        while (v38 != v49);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 1;
    do
    {
      uint64_t v13 = &a2[v11];
      uint64_t v14 = a7 + v11 * 8;
      *(void *)uint64_t v14 = a2[v11];
      long long v15 = *(_OWORD *)&a2[v11 + 1];
      *(void *)(v14 + 24) = a2[v11 + 3];
      *(_OWORD *)(v14 + 8) = v15;
      v13[2] = 0;
      v13[3] = 0;
      v13[1] = 0;
      *(void *)(v14 + 32) = a2[v11 + 4];
      long long v16 = *(_OWORD *)&a2[v11 + 5];
      *(void *)(v14 + 56) = a2[v11 + 7];
      *(_OWORD *)(v14 + 40) = v16;
      v13[6] = 0;
      v13[7] = 0;
      v13[5] = 0;
      *(void *)(v14 + 64) = a2[v11 + 8];
      *(_DWORD *)(v14 + 72) = a2[v11 + 9];
      long long v17 = *(_OWORD *)&a2[v11 + 10];
      *(void *)(v14 + 96) = a2[v11 + 12];
      *(_OWORD *)(v14 + 80) = v17;
      v13[11] = 0;
      v13[12] = 0;
      v13[10] = 0;
      long long v18 = *(_OWORD *)&a2[v11 + 13];
      *(void *)(v14 + 120) = a2[v11 + 15];
      *(_OWORD *)(v14 + 104) = v18;
      v13[14] = 0;
      v13[15] = 0;
      v13[13] = 0;
      *(_DWORD *)(v14 + 128) = a2[v11 + 16];
      long long v19 = *(_OWORD *)&a2[v11 + 17];
      *(void *)(v14 + 152) = a2[v11 + 19];
      *(_OWORD *)(v14 + 136) = v19;
      v13[18] = 0;
      v13[19] = 0;
      v13[17] = 0;
      long long v20 = *(_OWORD *)&a2[v11 + 20];
      *(void *)(v14 + 176) = a2[v11 + 22];
      *(_OWORD *)(v14 + 160) = v20;
      uint64_t v51 = v12;
      v11 += 23;
      ++v12;
    }
    while (v13 + 23 != a3);
    if (v11 * 8)
    {
      uint64_t v21 = a7 + v11 * 8;
      while (v9 != v10)
      {
        uint64_t v22 = *(void *)(v21 - 184);
        uint64_t v23 = *(v9 - 23);
        BOOL v24 = v22 < v23;
        if (v22 <= v23) {
          uint64_t v22 = *(v9 - 23);
        }
        *(v8 - 23) = v22;
        v8 -= 23;
        if (v24) {
          __n128 v25 = (long long *)v9;
        }
        else {
          __n128 v25 = (long long *)v21;
        }
        if (v24) {
          v9 -= 23;
        }
        else {
          v21 -= 184;
        }
        sub_4C2034((uint64_t)(v8 + 1), v25 - 11);
        uint64_t v26 = *((void *)v25 - 1);
        *((_OWORD *)v8 + 10) = *(long long *)((char *)v25 - 24);
        v8[22] = v26;
        if (v21 == a7) {
          goto LABEL_33;
        }
      }
      unint64_t v44 = 0;
      do
      {
        uint64_t v45 = &v8[v44 / 8];
        v8[v44 / 8 - 23] = *(void *)(v21 + v44 - 184);
        sub_4C2034((uint64_t)&v8[v44 / 8 - 22], (long long *)(v21 + v44 - 176));
        uint64_t v46 = *(void *)(v21 + v44 - 8);
        *(_OWORD *)(v45 - 3) = *(_OWORD *)(v21 + v44 - 24);
        *(v45 - 1) = v46;
        v44 -= 184;
      }
      while (v21 + v44 != a7);
    }
  }
LABEL_33:
  if (a7) {
    sub_7E1978((unint64_t *)&v51, a7);
  }
}

uint64_t sub_7E1DD0(unsigned char **a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)a2 == v2 || *(unsigned char *)(a2 + 185) == 0) {
    return 0;
  }
  uint64_t v7 = *((void *)*a1 + 2);
  uint64_t v8 = *(void *)(v2 - 8);
  long long v9 = (int *)sub_2D5D58(*((void *)*a1 + 2), v8 & 0xFFFFFFFFFFFFLL);
  if (*(unsigned char *)(v7 + 7772)) {
    sub_2DB8E0(v7 + 3896, v8, 0);
  }
  sub_2E5C38(v7, v8 & 0xFFFFFFFFFFFFLL, 1);
  if (*a1[1])
  {
    __n128 v10 = (unsigned __int16 *)((char *)v9 - *v9);
    unsigned int v11 = *v10;
    if (v11 < 0x2F)
    {
      if (v11 < 0xB) {
        goto LABEL_17;
      }
    }
    else if (v10[23] && *((unsigned char *)v9 + v10[23]) == 23)
    {
      return 0;
    }
    uint64_t v12 = v10[5];
    if (v12 && (*((unsigned char *)v9 + v12) & 4) != 0) {
      return 0;
    }
  }
LABEL_17:
  if (*a1[2])
  {
    uint64_t result = 1;
    switch(*(_DWORD *)(a2 + 24))
    {
      case 1:
      case 0x14:
      case 0x1B:
      case 0x1D:
      case 0x21:
      case 0x3C:
      case 0x3E:
      case 0x41:
        return result;
      case 0xB:
        uint64_t result = *a1[3] != 0;
        break;
      default:
        return 0;
    }
    return result;
  }
  if (*a1[4])
  {
    uint64_t result = 1;
    switch(*(_DWORD *)(a2 + 24))
    {
      case 2:
      case 0x15:
      case 0x1C:
      case 0x1E:
      case 0x22:
      case 0x3D:
      case 0x3F:
      case 0x42:
        return result;
      case 0xB:
        uint64_t result = *a1[5] == 0;
        break;
      default:
        return 0;
    }
    return result;
  }
  if (*a1[6]) {
    return *(_DWORD *)(a2 + 24) == 4;
  }
  if (!*a1[7]) {
    return 0;
  }
  if (*a1[8])
  {
    uint64_t v13 = a1[5];
    int v14 = *(_DWORD *)(a2 + 24);
    return sub_7D479C(v13, v14);
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 24);
    return sub_7CF98C(v15);
  }
}

void sub_7E224C(long long *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_7E2804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 96) < *(void *)(a1 + 8))
      {
        long long v36 = *(_OWORD *)a1;
        long long v39 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 48);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        long long v32 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 81);
        long long v8 = *(_OWORD *)(a2 - 104);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 88);
        *(_OWORD *)a1 = v8;
        int v9 = *(_DWORD *)(a2 - 76);
        *(void *)(a1 + 20) = *(void *)(a2 - 84);
        *(_DWORD *)(a1 + 28) = v9;
        uint64_t v10 = a2 - 72;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 72);
        *(void *)(a1 + 48) = *(void *)(a2 - 56);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        unsigned int v11 = (_OWORD *)(a2 - 48);
        long long v12 = *(_OWORD *)(a2 - 23);
        long long v13 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 72) = v13;
        *(_OWORD *)(a1 + 81) = v12;
        *(_DWORD *)(a2 - 88) = v39;
        *(_OWORD *)(a2 - 104) = v36;
        *(void *)(a2 - 84) = *(void *)((char *)&v39 + 4);
        *(_DWORD *)(a2 - 76) = HIDWORD(v39);
        if (*(void *)(a2 - 72))
        {
          long long v30 = v6;
          sub_52F808((uint64_t *)(a2 - 72));
          operator delete(*(void **)v10);
          long long v6 = v30;
        }
        *(_OWORD *)(a2 - 72) = v6;
        *(void *)(a2 - 56) = v7;
        *unsigned int v11 = v32;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v34;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v34[9];
        return 1;
      }
      return result;
    case 3:
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a2 - 104));
      return 1;
    case 4:
      sub_7DE500(a1, a1 + 104, a1 + 208, (long long *)(a2 - 104));
      return 1;
    case 5:
      sub_7DE820(a1, a1 + 104, a1 + 208, a1 + 312, (long long *)(a2 - 104));
      return 1;
    default:
      uint64_t v14 = a1 + 208;
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a1 + 208));
      uint64_t v15 = a1 + 312;
      if (a1 + 312 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    unint64_t v18 = *(void *)(v15 + 8);
    if (v18 < *(void *)(v14 + 8))
    {
      uint64_t v19 = *(void *)v15;
      int v28 = *(_DWORD *)(v15 + 16);
      uint64_t v37 = *(void **)(v15 + 20);
      int v38 = *(_DWORD *)(v15 + 28);
      int v31 = *(void **)(v15 + 32);
      long long v29 = *(_OWORD *)(v15 + 40);
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      long long v33 = *(_OWORD *)(v15 + 56);
      *(_OWORD *)unint64_t v35 = *(_OWORD *)(v15 + 72);
      uint64_t v20 = v16;
      *(_OWORD *)&v35[9] = *(_OWORD *)(v15 + 81);
      while (1)
      {
        uint64_t v21 = v20;
        uint64_t v22 = a1 + v20;
        *(_OWORD *)(a1 + v20 + 312) = *(_OWORD *)(a1 + v20 + 208);
        *(_DWORD *)(v22 + 328) = *(_DWORD *)(a1 + v20 + 224);
        *(void *)(a1 + v20 + 332) = *(void *)(a1 + v20 + 228);
        *(_DWORD *)(v22 + 340) = *(_DWORD *)(a1 + v20 + 236);
        long long v23 = (uint64_t *)(a1 + v20 + 344);
        if (*v23)
        {
          sub_52F808(v23);
          operator delete((void *)*v23);
          *(void *)(v22 + 352) = 0;
          *(void *)(v22 + 360) = 0;
        }
        *(_OWORD *)long long v23 = *(_OWORD *)(v22 + 240);
        *(void *)(v22 + 360) = *(void *)(v22 + 256);
        *(void *)(v22 + 248) = 0;
        *(void *)(v22 + 256) = 0;
        *(void *)(v22 + 240) = 0;
        long long v24 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v22 + 368) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v22 + 384) = v24;
        *(_OWORD *)(v22 + 393) = *(_OWORD *)(v22 + 289);
        if (v21 == -208) {
          break;
        }
        uint64_t v20 = v21 - 104;
        if (v18 >= *(void *)(a1 + v21 + 112))
        {
          uint64_t v25 = a1 + v20 + 312;
          goto LABEL_18;
        }
      }
      uint64_t v25 = a1;
LABEL_18:
      *(void *)uint64_t v25 = v19;
      *(void *)(v25 + 8) = v18;
      *(_DWORD *)(v25 + 16) = v28;
      BOOL v27 = (void **)(a1 + v21 + 240);
      char v26 = *v27;
      *(void **)((char *)v27 - 12) = v37;
      *((_DWORD *)v27 - 1) = v38;
      if (v26)
      {
        sub_52F808((uint64_t *)(a1 + v21 + 240));
        operator delete(*v27);
        *(void *)(a1 + v21 + 248) = 0;
        *(void *)(a1 + v21 + 256) = 0;
      }
      __n128 *v27 = v31;
      *(_OWORD *)(v25 + 40) = v29;
      *(_OWORD *)(a1 + v21 + 264) = v33;
      *(_OWORD *)(a1 + v21 + 280) = *(_OWORD *)v35;
      *(_OWORD *)(a1 + v21 + 289) = *(_OWORD *)&v35[9];
      if (++v17 == 8) {
        return v15 + 104 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 104;
    v15 += 104;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_7E2BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    long long v32 = *(_OWORD *)a1;
    long long v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    __n128 v36 = *(__n128 *)(a1 + 56);
    *(_OWORD *)uint64_t v37 = *(_OWORD *)(a1 + 72);
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = a1;
    *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 81);
    do
    {
      uint64_t v13 = v7 + 1;
      uint64_t v14 = v9 + 104 * (v7 + 1);
      uint64_t v15 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < a4)
      {
        unint64_t v17 = *(void *)(v14 + 112);
        unint64_t v18 = *(void *)(v9 + 104 * v13 + 8);
        v14 += 104 * (v18 < v17);
        if (v18 < v17) {
          uint64_t v7 = v16;
        }
      }
      long long v19 = *(_OWORD *)v14;
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v9 = v19;
      uint64_t v21 = (void *)(v14 + 20);
      uint64_t v20 = *(void *)(v14 + 20);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v14 + 28);
      *(void *)(v9 + 20) = v20;
      uint64_t v22 = (void **)(v9 + 32);
      if (*(void *)(v9 + 32))
      {
        sub_52F808((uint64_t *)(v9 + 32));
        operator delete(*v22);
        *uint64_t v22 = 0;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
      }
      uint64_t v10 = (void **)(v14 + 32);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v14 + 32);
      *(void *)(v9 + 48) = *(void *)(v14 + 48);
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      long long v11 = *(_OWORD *)(v14 + 56);
      long long v12 = *(_OWORD *)(v14 + 72);
      *(_OWORD *)(v9 + 81) = *(_OWORD *)(v14 + 81);
      *(_OWORD *)(v9 + 72) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      uint64_t v9 = v14;
    }
    while (v7 <= v8);
    long long v23 = (__n128 *)(v14 + 56);
    long long v24 = (long long *)(a2 - 104);
    if (v14 == a2 - 104)
    {
      *(_DWORD *)(v14 + 16) = v33;
      *(_OWORD *)uint64_t v14 = v32;
      *(_DWORD *)(v14 + 28) = HIDWORD(v33);
      *uint64_t v21 = *(void *)((char *)&v33 + 4);
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        unsigned __int16 *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
      *(void *)(v14 + 48) = v35;
      __n128 result = v36;
      *(_OWORD *)(v14 + 81) = *(_OWORD *)&v37[9];
      *long long v23 = v36;
      *(_OWORD *)(v14 + 72) = *(_OWORD *)v37;
    }
    else
    {
      long long v25 = *v24;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 88);
      *(_OWORD *)uint64_t v14 = v25;
      uint64_t v26 = *(void *)(a2 - 84);
      *(_DWORD *)(v14 + 28) = *(_DWORD *)(a2 - 76);
      *uint64_t v21 = v26;
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        unsigned __int16 *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      uint64_t v27 = a2 - 72;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 - 72);
      *(void *)(v14 + 48) = *(void *)(a2 - 56);
      *(void *)uint64_t v27 = 0;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 16) = 0;
      __n128 v28 = *(__n128 *)(a2 - 48);
      long long v29 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(v14 + 81) = *(_OWORD *)(a2 - 23);
      *long long v23 = v28;
      *(_OWORD *)(v14 + 72) = v29;
      *long long v24 = v32;
      *(_OWORD *)(a2 - 88) = v33;
      if (*(void *)(a2 - 72))
      {
        sub_52F808((uint64_t *)(a2 - 72));
        operator delete(*(void **)v27);
        *(void *)uint64_t v27 = 0;
        *(void *)(a2 - 64) = 0;
        *(void *)(a2 - 56) = 0;
      }
      *(_OWORD *)(a2 - 72) = *(_OWORD *)__p;
      *(void *)(a2 - 56) = v35;
      *(__n128 *)(a2 - 48) = v36;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v37;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v37[9];
      result.n128_u64[0] = sub_7DF23C(a1, v14 + 104, a3, 0x4EC4EC4EC4EC4EC5 * ((v14 + 104 - a1) >> 3)).n128_u64[0];
    }
  }
  return result;
}

void sub_7E2F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7E2F84(uint64_t *a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 23) < *a1)
      {
        sub_7E0F90(a1, a2 - 23);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_7E0364((uint64_t)a1, a2);
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[23 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_7E3294((uint64_t)a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a7);
        uint64_t v18 = a5 + 184 * v13;
        sub_7E3294((uint64_t)&a1[23 * (a4 >> 1)], a2, a3, a4 - v13, v18, v17);
        unint64_t v34 = a4;
        unint64_t v19 = a5 + 184 * a4;
        uint64_t v20 = a1 + 20;
        uint64_t v21 = v18;
        uint64_t v22 = a5;
        while (v21 != v19)
        {
          uint64_t v24 = (uint64_t)(v20 - 19);
          if (*(void *)v21 >= *(void *)v22)
          {
            *(v20 - 20) = *(void *)v22;
            sub_4C2034(v24, (long long *)(v22 + 8));
            uint64_t v23 = *(void *)(v22 + 176);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v22 + 160);
            v20[2] = v23;
            v22 += 184;
            v20 += 23;
            if (v22 == v18) {
              goto LABEL_20;
            }
          }
          else
          {
            *(v20 - 20) = *(void *)v21;
            sub_4C2034(v24, (long long *)(v21 + 8));
            uint64_t v25 = *(void *)(v21 + 176);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v21 + 160);
            v20[2] = v25;
            v21 += 184;
            v20 += 23;
            if (v22 == v18)
            {
LABEL_20:
              if (v21 != v19)
              {
                unint64_t v26 = 0;
                do
                {
                  unint64_t v27 = v21 + v26;
                  __n128 v28 = &v20[v26 / 8];
                  v20[v26 / 8 - 20] = *(void *)(v21 + v26);
                  sub_4C2034((uint64_t)&v20[v26 / 8 - 19], (long long *)(v21 + v26 + 8));
                  uint64_t v29 = *(void *)(v21 + v26 + 176);
                  *(_OWORD *)__n128 v28 = *(_OWORD *)(v21 + v26 + 160);
                  v28[2] = v29;
                  v26 += 184;
                }
                while (v27 + 184 != v19);
              }
              goto LABEL_27;
            }
          }
        }
        if (v22 != v18)
        {
          unint64_t v30 = 0;
          do
          {
            unint64_t v31 = v22 + v30;
            long long v32 = &v20[v30 / 8];
            v20[v30 / 8 - 20] = *(void *)(v22 + v30);
            sub_4C2034((uint64_t)&v20[v30 / 8 - 19], (long long *)(v22 + v30 + 8));
            uint64_t v33 = *(void *)(v22 + v30 + 176);
            *(_OWORD *)long long v32 = *(_OWORD *)(v22 + v30 + 160);
            v32[2] = v33;
            v30 += 184;
          }
          while (v31 + 184 != v18);
        }
LABEL_27:
        if (a5) {
          sub_7E1978(&v34, a5);
        }
      }
      else
      {
        sub_7E2F84(a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        sub_7E2F84(v14, a2, a3, v15, a5, a6);
        sub_7E0BAC(a1, v14, a2, a3, v13, v15, a5, a6, v16);
      }
    }
  }
}

void sub_7E3278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_7E1978(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

double sub_7E3294(uint64_t a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    uint64_t v6 = a5;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 23);
      long long v11 = (_OWORD *)(a5 + 8);
      long long v12 = (_OWORD *)(a5 + 40);
      uint64_t v13 = (_OWORD *)(a5 + 80);
      uint64_t v14 = (_OWORD *)(a5 + 104);
      if (v10 >= *(void *)a1)
      {
        *(void *)a5 = *(void *)a1;
        long long v28 = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *long long v11 = v28;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a5 + 32) = *(void *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 40);
        *(void *)(a5 + 56) = *(void *)(a1 + 56);
        *long long v12 = v29;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a5 + 64) = *(void *)(a1 + 64);
        *(_DWORD *)(a5 + 72) = *(_DWORD *)(a1 + 72);
        long long v30 = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        _OWORD *v13 = v30;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        long long v31 = *(_OWORD *)(a1 + 104);
        *(void *)(a5 + 120) = *(void *)(a1 + 120);
        *uint64_t v14 = v31;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        *(_DWORD *)(a5 + 128) = *(_DWORD *)(a1 + 128);
        long long v32 = *(_OWORD *)(a1 + 136);
        *(void *)(a5 + 152) = *(void *)(a1 + 152);
        *(_OWORD *)(a5 + 136) = v32;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 136) = 0;
        long long v33 = *(_OWORD *)(a1 + 160);
        *(void *)(a5 + 176) = *(void *)(a1 + 176);
        *(_OWORD *)(a5 + 160) = v33;
        *(void *)(a5 + 184) = *(a2 - 23);
        uint64_t v6 = a5 + 184;
        long long v34 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 208) = *(a2 - 20);
        *(_OWORD *)(a5 + 192) = v34;
        *(a2 - 21) = 0;
        *(a2 - 20) = 0;
        *(a2 - 22) = 0;
        *(void *)(a5 + 216) = *(a2 - 19);
        long long v35 = *((_OWORD *)a2 - 9);
        *(void *)(a5 + 240) = *(a2 - 16);
        *(_OWORD *)(a5 + 224) = v35;
        *(a2 - 17) = 0;
        *(a2 - 16) = 0;
        *(a2 - 18) = 0;
        *(void *)(a5 + 248) = *(a2 - 15);
        *(_DWORD *)(a5 + 256) = *((_DWORD *)a2 - 28);
        long long v36 = *(_OWORD *)(a2 - 13);
        *(void *)(a5 + 280) = *(a2 - 11);
        *(_OWORD *)(a5 + 264) = v36;
        *(a2 - 12) = 0;
        *(a2 - 11) = 0;
        *(a2 - 13) = 0;
        long long v37 = *((_OWORD *)a2 - 5);
        *(void *)(a5 + 304) = *(a2 - 8);
        *(_OWORD *)(a5 + 288) = v37;
        *(a2 - 9) = 0;
        *(a2 - 8) = 0;
        *(a2 - 10) = 0;
        *(_DWORD *)(a5 + 312) = *((_DWORD *)a2 - 14);
        long long v38 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 336) = *(a2 - 4);
        *(_OWORD *)(a5 + 320) = v38;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(a2 - 6) = 0;
        a6 = *(__n128 *)(a2 - 3);
        uint64_t v26 = *(a2 - 1);
        goto LABEL_13;
      }
      *(void *)a5 = v10;
      long long v15 = *((_OWORD *)a2 - 11);
      *(void *)(a5 + 24) = *(a2 - 20);
      *long long v11 = v15;
      *(a2 - 21) = 0;
      *(a2 - 20) = 0;
      *(a2 - 22) = 0;
      *(void *)(a5 + 32) = *(a2 - 19);
      long long v16 = *((_OWORD *)a2 - 9);
      *(void *)(a5 + 56) = *(a2 - 16);
      *long long v12 = v16;
      *(a2 - 17) = 0;
      *(a2 - 16) = 0;
      *(a2 - 18) = 0;
      *(void *)(a5 + 64) = *(a2 - 15);
      *(_DWORD *)(a5 + 72) = *((_DWORD *)a2 - 28);
      long long v17 = *(_OWORD *)(a2 - 13);
      *(void *)(a5 + 96) = *(a2 - 11);
      _OWORD *v13 = v17;
      *(a2 - 12) = 0;
      *(a2 - 11) = 0;
      *(a2 - 13) = 0;
      long long v18 = *((_OWORD *)a2 - 5);
      *(void *)(a5 + 120) = *(a2 - 8);
      *uint64_t v14 = v18;
      *(a2 - 9) = 0;
      *(a2 - 8) = 0;
      *(a2 - 10) = 0;
      *(_DWORD *)(a5 + 128) = *((_DWORD *)a2 - 14);
      long long v19 = *((_OWORD *)a2 - 3);
      *(void *)(a5 + 152) = *(a2 - 4);
      *(_OWORD *)(a5 + 136) = v19;
      *(a2 - 5) = 0;
      *(a2 - 4) = 0;
      *(a2 - 6) = 0;
      long long v20 = *(_OWORD *)(a2 - 3);
      *(void *)(a5 + 176) = *(a2 - 1);
      *(_OWORD *)(a5 + 160) = v20;
      *(void *)(a5 + 184) = *(void *)a1;
      uint64_t v6 = a5 + 184;
LABEL_7:
      long long v21 = *(_OWORD *)(a1 + 8);
      *(void *)(v6 + 24) = *(void *)(a1 + 24);
      *(_OWORD *)(v6 + 8) = v21;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(v6 + 32) = *(void *)(a1 + 32);
      long long v22 = *(_OWORD *)(a1 + 40);
      *(void *)(v6 + 56) = *(void *)(a1 + 56);
      *(_OWORD *)(v6 + 40) = v22;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(v6 + 64) = *(void *)(a1 + 64);
      *(_DWORD *)(v6 + 72) = *(_DWORD *)(a1 + 72);
      long long v23 = *(_OWORD *)(a1 + 80);
      *(void *)(v6 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(v6 + 80) = v23;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 80) = 0;
      long long v24 = *(_OWORD *)(a1 + 104);
      *(void *)(v6 + 120) = *(void *)(a1 + 120);
      *(_OWORD *)(v6 + 104) = v24;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(v6 + 128) = *(_DWORD *)(a1 + 128);
      long long v25 = *(_OWORD *)(a1 + 136);
      *(void *)(v6 + 152) = *(void *)(a1 + 152);
      *(_OWORD *)(v6 + 136) = v25;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 136) = 0;
      a6 = *(__n128 *)(a1 + 160);
      uint64_t v26 = *(void *)(a1 + 176);
LABEL_13:
      *(void *)(v6 + 176) = v26;
      *(__n128 *)(v6 + 160) = a6;
      return a6.n128_f64[0];
    }
    if (a4 == 1)
    {
      *(void *)a5 = *(void *)a1;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v39 = a4 >> 1;
      uint64_t v40 = 184 * (a4 >> 1);
      sub_7E2F84(a1, a1 + v40, a3, a4 >> 1, a5, a4 >> 1);
      sub_7E2F84(a1 + v40, a2, a3, a4 - v39, v6 + v40, a4 - v39);
      a6.n128_u64[0] = sub_7E162C(a1, (void *)(a1 + v40), a1 + v40, (uint64_t)a2, (__n128 *)v6).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_7E1200(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

void sub_7E3698(long long *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_7E3C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 96) < *(void *)(a1 + 8))
      {
        long long v36 = *(_OWORD *)a1;
        long long v39 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 48);
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        long long v32 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)long long v34 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v34[9] = *(_OWORD *)(a1 + 81);
        long long v8 = *(_OWORD *)(a2 - 104);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 88);
        *(_OWORD *)a1 = v8;
        int v9 = *(_DWORD *)(a2 - 76);
        *(void *)(a1 + 20) = *(void *)(a2 - 84);
        *(_DWORD *)(a1 + 28) = v9;
        uint64_t v10 = a2 - 72;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 72);
        *(void *)(a1 + 48) = *(void *)(a2 - 56);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        long long v11 = (_OWORD *)(a2 - 48);
        long long v12 = *(_OWORD *)(a2 - 23);
        long long v13 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 72) = v13;
        *(_OWORD *)(a1 + 81) = v12;
        *(_DWORD *)(a2 - 88) = v39;
        *(_OWORD *)(a2 - 104) = v36;
        *(void *)(a2 - 84) = *(void *)((char *)&v39 + 4);
        *(_DWORD *)(a2 - 76) = HIDWORD(v39);
        if (*(void *)(a2 - 72))
        {
          long long v30 = v6;
          sub_52F808((uint64_t *)(a2 - 72));
          operator delete(*(void **)v10);
          long long v6 = v30;
        }
        *(_OWORD *)(a2 - 72) = v6;
        *(void *)(a2 - 56) = v7;
        *long long v11 = v32;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v34;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v34[9];
        return 1;
      }
      return result;
    case 3:
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a2 - 104));
      return 1;
    case 4:
      sub_7DE500(a1, a1 + 104, a1 + 208, (long long *)(a2 - 104));
      return 1;
    case 5:
      sub_7DE820(a1, a1 + 104, a1 + 208, a1 + 312, (long long *)(a2 - 104));
      return 1;
    default:
      uint64_t v14 = a1 + 208;
      sub_7DD664((long long *)a1, (long long *)(a1 + 104), (long long *)(a1 + 208));
      uint64_t v15 = a1 + 312;
      if (a1 + 312 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    unint64_t v18 = *(void *)(v15 + 8);
    if (v18 < *(void *)(v14 + 8))
    {
      uint64_t v19 = *(void *)v15;
      int v28 = *(_DWORD *)(v15 + 16);
      long long v37 = *(void **)(v15 + 20);
      int v38 = *(_DWORD *)(v15 + 28);
      int v31 = *(void **)(v15 + 32);
      long long v29 = *(_OWORD *)(v15 + 40);
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      long long v33 = *(_OWORD *)(v15 + 56);
      *(_OWORD *)unint64_t v35 = *(_OWORD *)(v15 + 72);
      uint64_t v20 = v16;
      *(_OWORD *)&v35[9] = *(_OWORD *)(v15 + 81);
      while (1)
      {
        uint64_t v21 = v20;
        uint64_t v22 = a1 + v20;
        *(_OWORD *)(a1 + v20 + 312) = *(_OWORD *)(a1 + v20 + 208);
        *(_DWORD *)(v22 + 328) = *(_DWORD *)(a1 + v20 + 224);
        *(void *)(a1 + v20 + 332) = *(void *)(a1 + v20 + 228);
        *(_DWORD *)(v22 + 340) = *(_DWORD *)(a1 + v20 + 236);
        long long v23 = (uint64_t *)(a1 + v20 + 344);
        if (*v23)
        {
          sub_52F808(v23);
          operator delete((void *)*v23);
          *(void *)(v22 + 352) = 0;
          *(void *)(v22 + 360) = 0;
        }
        *(_OWORD *)long long v23 = *(_OWORD *)(v22 + 240);
        *(void *)(v22 + 360) = *(void *)(v22 + 256);
        *(void *)(v22 + 248) = 0;
        *(void *)(v22 + 256) = 0;
        *(void *)(v22 + 240) = 0;
        long long v24 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v22 + 368) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v22 + 384) = v24;
        *(_OWORD *)(v22 + 393) = *(_OWORD *)(v22 + 289);
        if (v21 == -208) {
          break;
        }
        uint64_t v20 = v21 - 104;
        if (v18 >= *(void *)(a1 + v21 + 112))
        {
          uint64_t v25 = a1 + v20 + 312;
          goto LABEL_18;
        }
      }
      uint64_t v25 = a1;
LABEL_18:
      *(void *)uint64_t v25 = v19;
      *(void *)(v25 + 8) = v18;
      *(_DWORD *)(v25 + 16) = v28;
      BOOL v27 = (void **)(a1 + v21 + 240);
      char v26 = *v27;
      *(void **)((char *)v27 - 12) = v37;
      *((_DWORD *)v27 - 1) = v38;
      if (v26)
      {
        sub_52F808((uint64_t *)(a1 + v21 + 240));
        operator delete(*v27);
        *(void *)(a1 + v21 + 248) = 0;
        *(void *)(a1 + v21 + 256) = 0;
      }
      __n128 *v27 = v31;
      *(_OWORD *)(v25 + 40) = v29;
      *(_OWORD *)(a1 + v21 + 264) = v33;
      *(_OWORD *)(a1 + v21 + 280) = *(_OWORD *)v35;
      *(_OWORD *)(a1 + v21 + 289) = *(_OWORD *)&v35[9];
      if (++v17 == 8) {
        return v15 + 104 == a2;
      }
    }
    uint64_t v14 = v15;
    v16 += 104;
    v15 += 104;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 sub_7E4020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    long long v32 = *(_OWORD *)a1;
    long long v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v35 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    __n128 v36 = *(__n128 *)(a1 + 56);
    *(_OWORD *)long long v37 = *(_OWORD *)(a1 + 72);
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = a1;
    *(_OWORD *)&v37[9] = *(_OWORD *)(a1 + 81);
    do
    {
      uint64_t v13 = v7 + 1;
      uint64_t v14 = v9 + 104 * (v7 + 1);
      uint64_t v15 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < a4)
      {
        unint64_t v17 = *(void *)(v14 + 112);
        unint64_t v18 = *(void *)(v9 + 104 * v13 + 8);
        v14 += 104 * (v18 < v17);
        if (v18 < v17) {
          uint64_t v7 = v16;
        }
      }
      long long v19 = *(_OWORD *)v14;
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_OWORD *)uint64_t v9 = v19;
      uint64_t v21 = (void *)(v14 + 20);
      uint64_t v20 = *(void *)(v14 + 20);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v14 + 28);
      *(void *)(v9 + 20) = v20;
      uint64_t v22 = (void **)(v9 + 32);
      if (*(void *)(v9 + 32))
      {
        sub_52F808((uint64_t *)(v9 + 32));
        operator delete(*v22);
        *uint64_t v22 = 0;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
      }
      uint64_t v10 = (void **)(v14 + 32);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v14 + 32);
      *(void *)(v9 + 48) = *(void *)(v14 + 48);
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      long long v11 = *(_OWORD *)(v14 + 56);
      long long v12 = *(_OWORD *)(v14 + 72);
      *(_OWORD *)(v9 + 81) = *(_OWORD *)(v14 + 81);
      *(_OWORD *)(v9 + 72) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      uint64_t v9 = v14;
    }
    while (v7 <= v8);
    long long v23 = (__n128 *)(v14 + 56);
    long long v24 = (long long *)(a2 - 104);
    if (v14 == a2 - 104)
    {
      *(_DWORD *)(v14 + 16) = v33;
      *(_OWORD *)uint64_t v14 = v32;
      *(_DWORD *)(v14 + 28) = HIDWORD(v33);
      *uint64_t v21 = *(void *)((char *)&v33 + 4);
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        unsigned __int16 *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      *(_OWORD *)(v14 + 32) = *(_OWORD *)__p;
      *(void *)(v14 + 48) = v35;
      __n128 result = v36;
      *(_OWORD *)(v14 + 81) = *(_OWORD *)&v37[9];
      *long long v23 = v36;
      *(_OWORD *)(v14 + 72) = *(_OWORD *)v37;
    }
    else
    {
      long long v25 = *v24;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 - 88);
      *(_OWORD *)uint64_t v14 = v25;
      uint64_t v26 = *(void *)(a2 - 84);
      *(_DWORD *)(v14 + 28) = *(_DWORD *)(a2 - 76);
      *uint64_t v21 = v26;
      if (*(void *)(v14 + 32))
      {
        sub_52F808((uint64_t *)(v14 + 32));
        operator delete(*v10);
        unsigned __int16 *v10 = 0;
        *(void *)(v14 + 40) = 0;
        *(void *)(v14 + 48) = 0;
      }
      uint64_t v27 = a2 - 72;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a2 - 72);
      *(void *)(v14 + 48) = *(void *)(a2 - 56);
      *(void *)uint64_t v27 = 0;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 16) = 0;
      __n128 v28 = *(__n128 *)(a2 - 48);
      long long v29 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(v14 + 81) = *(_OWORD *)(a2 - 23);
      *long long v23 = v28;
      *(_OWORD *)(v14 + 72) = v29;
      *long long v24 = v32;
      *(_OWORD *)(a2 - 88) = v33;
      if (*(void *)(a2 - 72))
      {
        sub_52F808((uint64_t *)(a2 - 72));
        operator delete(*(void **)v27);
        *(void *)uint64_t v27 = 0;
        *(void *)(a2 - 64) = 0;
        *(void *)(a2 - 56) = 0;
      }
      *(_OWORD *)(a2 - 72) = *(_OWORD *)__p;
      *(void *)(a2 - 56) = v35;
      *(__n128 *)(a2 - 48) = v36;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v37;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v37[9];
      result.n128_u64[0] = sub_7DF23C(a1, v14 + 104, a3, 0x4EC4EC4EC4EC4EC5 * ((v14 + 104 - a1) >> 3)).n128_u64[0];
    }
  }
  return result;
}

void sub_7E43BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_7D1C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7E43D0(uint64_t *a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (*(a2 - 23) < *a1)
      {
        sub_7E0F90(a1, a2 - 23);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_7E0364((uint64_t)a1, a2);
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[23 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_7E46E0((uint64_t)a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a7);
        uint64_t v18 = a5 + 184 * v13;
        sub_7E46E0((uint64_t)&a1[23 * (a4 >> 1)], a2, a3, a4 - v13, v18, v17);
        unint64_t v34 = a4;
        unint64_t v19 = a5 + 184 * a4;
        uint64_t v20 = a1 + 20;
        uint64_t v21 = v18;
        uint64_t v22 = a5;
        while (v21 != v19)
        {
          uint64_t v24 = (uint64_t)(v20 - 19);
          if (*(void *)v21 >= *(void *)v22)
          {
            *(v20 - 20) = *(void *)v22;
            sub_4C2034(v24, (long long *)(v22 + 8));
            uint64_t v23 = *(void *)(v22 + 176);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v22 + 160);
            v20[2] = v23;
            v22 += 184;
            v20 += 23;
            if (v22 == v18) {
              goto LABEL_20;
            }
          }
          else
          {
            *(v20 - 20) = *(void *)v21;
            sub_4C2034(v24, (long long *)(v21 + 8));
            uint64_t v25 = *(void *)(v21 + 176);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v21 + 160);
            v20[2] = v25;
            v21 += 184;
            v20 += 23;
            if (v22 == v18)
            {
LABEL_20:
              if (v21 != v19)
              {
                unint64_t v26 = 0;
                do
                {
                  unint64_t v27 = v21 + v26;
                  __n128 v28 = &v20[v26 / 8];
                  v20[v26 / 8 - 20] = *(void *)(v21 + v26);
                  sub_4C2034((uint64_t)&v20[v26 / 8 - 19], (long long *)(v21 + v26 + 8));
                  uint64_t v29 = *(void *)(v21 + v26 + 176);
                  *(_OWORD *)__n128 v28 = *(_OWORD *)(v21 + v26 + 160);
                  v28[2] = v29;
                  v26 += 184;
                }
                while (v27 + 184 != v19);
              }
              goto LABEL_27;
            }
          }
        }
        if (v22 != v18)
        {
          unint64_t v30 = 0;
          do
          {
            unint64_t v31 = v22 + v30;
            long long v32 = &v20[v30 / 8];
            v20[v30 / 8 - 20] = *(void *)(v22 + v30);
            sub_4C2034((uint64_t)&v20[v30 / 8 - 19], (long long *)(v22 + v30 + 8));
            uint64_t v33 = *(void *)(v22 + v30 + 176);
            *(_OWORD *)long long v32 = *(_OWORD *)(v22 + v30 + 160);
            v32[2] = v33;
            v30 += 184;
          }
          while (v31 + 184 != v18);
        }
LABEL_27:
        if (a5) {
          sub_7E1978(&v34, a5);
        }
      }
      else
      {
        sub_7E43D0(a1, &a1[23 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        sub_7E43D0(v14, a2, a3, v15, a5, a6);
        sub_7E0BAC(a1, v14, a2, a3, v13, v15, a5, a6, v16);
      }
    }
  }
}

void sub_7E46C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_7E1978(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

double sub_7E46E0(uint64_t a1, int64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    uint64_t v6 = a5;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 23);
      long long v11 = (_OWORD *)(a5 + 8);
      long long v12 = (_OWORD *)(a5 + 40);
      uint64_t v13 = (_OWORD *)(a5 + 80);
      uint64_t v14 = (_OWORD *)(a5 + 104);
      if (v10 >= *(void *)a1)
      {
        *(void *)a5 = *(void *)a1;
        long long v28 = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *long long v11 = v28;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a5 + 32) = *(void *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 40);
        *(void *)(a5 + 56) = *(void *)(a1 + 56);
        *long long v12 = v29;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a5 + 64) = *(void *)(a1 + 64);
        *(_DWORD *)(a5 + 72) = *(_DWORD *)(a1 + 72);
        long long v30 = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        _OWORD *v13 = v30;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        long long v31 = *(_OWORD *)(a1 + 104);
        *(void *)(a5 + 120) = *(void *)(a1 + 120);
        *uint64_t v14 = v31;
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 104) = 0;
        *(_DWORD *)(a5 + 128) = *(_DWORD *)(a1 + 128);
        long long v32 = *(_OWORD *)(a1 + 136);
        *(void *)(a5 + 152) = *(void *)(a1 + 152);
        *(_OWORD *)(a5 + 136) = v32;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 136) = 0;
        long long v33 = *(_OWORD *)(a1 + 160);
        *(void *)(a5 + 176) = *(void *)(a1 + 176);
        *(_OWORD *)(a5 + 160) = v33;
        *(void *)(a5 + 184) = *(a2 - 23);
        uint64_t v6 = a5 + 184;
        long long v34 = *((_OWORD *)a2 - 11);
        *(void *)(a5 + 208) = *(a2 - 20);
        *(_OWORD *)(a5 + 192) = v34;
        *(a2 - 21) = 0;
        *(a2 - 20) = 0;
        *(a2 - 22) = 0;
        *(void *)(a5 + 216) = *(a2 - 19);
        long long v35 = *((_OWORD *)a2 - 9);
        *(void *)(a5 + 240) = *(a2 - 16);
        *(_OWORD *)(a5 + 224) = v35;
        *(a2 - 17) = 0;
        *(a2 - 16) = 0;
        *(a2 - 18) = 0;
        *(void *)(a5 + 248) = *(a2 - 15);
        *(_DWORD *)(a5 + 256) = *((_DWORD *)a2 - 28);
        long long v36 = *(_OWORD *)(a2 - 13);
        *(void *)(a5 + 280) = *(a2 - 11);
        *(_OWORD *)(a5 + 264) = v36;
        *(a2 - 12) = 0;
        *(a2 - 11) = 0;
        *(a2 - 13) = 0;
        long long v37 = *((_OWORD *)a2 - 5);
        *(void *)(a5 + 304) = *(a2 - 8);
        *(_OWORD *)(a5 + 288) = v37;
        *(a2 - 9) = 0;
        *(a2 - 8) = 0;
        *(a2 - 10) = 0;
        *(_DWORD *)(a5 + 312) = *((_DWORD *)a2 - 14);
        long long v38 = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 336) = *(a2 - 4);
        *(_OWORD *)(a5 + 320) = v38;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(a2 - 6) = 0;
        a6 = *(__n128 *)(a2 - 3);
        uint64_t v26 = *(a2 - 1);
        goto LABEL_13;
      }
      *(void *)a5 = v10;
      long long v15 = *((_OWORD *)a2 - 11);
      *(void *)(a5 + 24) = *(a2 - 20);
      *long long v11 = v15;
      *(a2 - 21) = 0;
      *(a2 - 20) = 0;
      *(a2 - 22) = 0;
      *(void *)(a5 + 32) = *(a2 - 19);
      long long v16 = *((_OWORD *)a2 - 9);
      *(void *)(a5 + 56) = *(a2 - 16);
      *long long v12 = v16;
      *(a2 - 17) = 0;
      *(a2 - 16) = 0;
      *(a2 - 18) = 0;
      *(void *)(a5 + 64) = *(a2 - 15);
      *(_DWORD *)(a5 + 72) = *((_DWORD *)a2 - 28);
      long long v17 = *(_OWORD *)(a2 - 13);
      *(void *)(a5 + 96) = *(a2 - 11);
      _OWORD *v13 = v17;
      *(a2 - 12) = 0;
      *(a2 - 11) = 0;
      *(a2 - 13) = 0;
      long long v18 = *((_OWORD *)a2 - 5);
      *(void *)(a5 + 120) = *(a2 - 8);
      *uint64_t v14 = v18;
      *(a2 - 9) = 0;
      *(a2 - 8) = 0;
      *(a2 - 10) = 0;
      *(_DWORD *)(a5 + 128) = *((_DWORD *)a2 - 14);
      long long v19 = *((_OWORD *)a2 - 3);
      *(void *)(a5 + 152) = *(a2 - 4);
      *(_OWORD *)(a5 + 136) = v19;
      *(a2 - 5) = 0;
      *(a2 - 4) = 0;
      *(a2 - 6) = 0;
      long long v20 = *(_OWORD *)(a2 - 3);
      *(void *)(a5 + 176) = *(a2 - 1);
      *(_OWORD *)(a5 + 160) = v20;
      *(void *)(a5 + 184) = *(void *)a1;
      uint64_t v6 = a5 + 184;
LABEL_7:
      long long v21 = *(_OWORD *)(a1 + 8);
      *(void *)(v6 + 24) = *(void *)(a1 + 24);
      *(_OWORD *)(v6 + 8) = v21;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(v6 + 32) = *(void *)(a1 + 32);
      long long v22 = *(_OWORD *)(a1 + 40);
      *(void *)(v6 + 56) = *(void *)(a1 + 56);
      *(_OWORD *)(v6 + 40) = v22;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(v6 + 64) = *(void *)(a1 + 64);
      *(_DWORD *)(v6 + 72) = *(_DWORD *)(a1 + 72);
      long long v23 = *(_OWORD *)(a1 + 80);
      *(void *)(v6 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(v6 + 80) = v23;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 80) = 0;
      long long v24 = *(_OWORD *)(a1 + 104);
      *(void *)(v6 + 120) = *(void *)(a1 + 120);
      *(_OWORD *)(v6 + 104) = v24;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(v6 + 128) = *(_DWORD *)(a1 + 128);
      long long v25 = *(_OWORD *)(a1 + 136);
      *(void *)(v6 + 152) = *(void *)(a1 + 152);
      *(_OWORD *)(v6 + 136) = v25;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 136) = 0;
      a6 = *(__n128 *)(a1 + 160);
      uint64_t v26 = *(void *)(a1 + 176);
LABEL_13:
      *(void *)(v6 + 176) = v26;
      *(__n128 *)(v6 + 160) = a6;
      return a6.n128_f64[0];
    }
    if (a4 == 1)
    {
      *(void *)a5 = *(void *)a1;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v39 = a4 >> 1;
      uint64_t v40 = 184 * (a4 >> 1);
      sub_7E43D0(a1, a1 + v40, a3, a4 >> 1, a5, a4 >> 1);
      sub_7E43D0(a1 + v40, a2, a3, a4 - v39, v6 + v40, a4 - v39);
      a6.n128_u64[0] = sub_7E162C(a1, (void *)(a1 + v40), a1 + v40, (uint64_t)a2, (__n128 *)v6).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_7E1200(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

double sub_7E4AE4()
{
  byte_25C074F = 1;
  word_25C0738 = 65;
  byte_25C0767 = 1;
  word_25C0750 = 65;
  byte_25C077F = 8;
  strcpy((char *)&qword_25C0768, "any_mode");
  byte_25C0797 = 7;
  strcpy((char *)&dword_25C0780, "cycling");
  byte_25C07AF = 7;
  strcpy((char *)&dword_25C0798, "driving");
  byte_25C07C7 = 7;
  strcpy((char *)&dword_25C07B0, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25C07F8 = 0u;
  *(_OWORD *)&qword_25C0808 = 0u;
  dword_25C0818 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25C07F8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25C07F8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25C07F8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25C07F8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25C07D0 = 0;
  qword_25C07D8 = 0;
  qword_25C07C8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25C07C8 = (uint64_t)v0;
  qword_25C07D0 = (uint64_t)(v0 + 9);
  qword_25C07D8 = (uint64_t)(v0 + 9);
  qword_25C07E0 = 0;
  qword_25C07E8 = 0;
  unk_25C07F0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25C07E8 = (uint64_t)(v1 + 9);
  unk_25C07F0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25C07E0 = (uint64_t)v1;
  return result;
}

void sub_7E4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25C0808) {
    sub_20AB17C((void **)qword_25C0808);
  }
  long long v37 = (void *)xmmword_25C07F8;
  *(void *)&xmmword_25C07F8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_7E4E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  *(void *)a1 = &off_2439B78;
  sub_7F5A38(a1 + 8, a2, a3, a4, a5, a6);
  *(void *)(a1 + 2152) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2160) = a2;
  *(void *)(a1 + 2168) = a3;
  *(_WORD *)(a1 + 2180) = 0;
  *(unsigned char *)(a1 + 2182) = 0;
  *(void *)(a1 + 2192) = a5;
  uint64_t v11 = *(void *)(a4 + 1064);
  uint64_t v12 = v11 + 2400 * a5;
  *(_DWORD *)(a1 + 2144) = *(_DWORD *)(v12 + 160);
  *(void *)(a1 + 2152) = *(void *)(v12 + 872);
  *(unsigned char *)(a1 + 2176) = *(unsigned char *)(a3 + 1064);
  *(unsigned char *)(a1 + 2177) = *(unsigned char *)(v12 + 893);
  int v13 = *(unsigned __int8 *)(v12 + 328);
  if (v13 == 5) {
    int v13 = *(unsigned __int8 *)(a3 + 1176);
  }
  *(unsigned char *)(a1 + 2178) = v13;
  if (v13) {
    BOOL v14 = v13 == 3;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  *(unsigned char *)(a1 + 2179) = v15;
  BOOL v16 = sub_6F2FD8(v12 + 712);
  BOOL v17 = *(void *)(v11 + 2400 * a5 + 864) != 0x7FFFFFFFFFFFFFFFLL && v16;
  *(unsigned char *)(a1 + 2180) = v17;
  *(unsigned char *)(a1 + 2181) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  *(unsigned char *)(a1 + 2182) = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t))a1)(a1, a4, a5);
  uint64_t v18 = v11 + 2400 * a5;
  *(unsigned char *)(a1 + 2183) = *(unsigned char *)(v18 + 895);
  *(unsigned char *)(a1 + 2184) = *(unsigned char *)(v18 + 320);
  return a1;
}

void sub_7E4FBC(_Unwind_Exception *a1)
{
  sub_52F364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7E4FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_7E4E40(a1, a2, a3, a4, a5, a6);
}

BOOL sub_7E4FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(a2 + 1072) - v3) >> 5) - 1 == a3) {
    return 0;
  }
  uint64_t v6 = v3 + 2400 * a3;
  int v9 = *(_DWORD *)(v6 + 160);
  int v8 = (int *)(v6 + 160);
  int v7 = v9;
  if (v9 == 16
    || (*(unsigned char *)(v3 + 2400 * a3 + 648) || *(unsigned char *)(v3 + 2400 * a3 + 649) || *(unsigned char *)(v3 + 2400 * a3 + 650))
    && *(unsigned char *)(v3 + 2400 * a3 + 304))
  {
    return 0;
  }
  int v10 = *(unsigned __int8 *)(v3 + 2400 * a3 + 328);
  if (v10 == 2 || v10 == 4) {
    return 1;
  }
  uint64_t v12 = a3 + 1;
  int v13 = *(unsigned __int8 *)(v3 + 2400 * (a3 + 1) + 328);
  if (v13 == 2 || v13 == 4) {
    return 1;
  }
  if ((v7 - 85) > 0xFFFFFFFC || *(unsigned char *)(v3 + 2400 * v12 + 2225) != 0) {
    return 0;
  }
  BOOL v16 = *(void **)(a1 + 2160);
  uint64_t v17 = *(unsigned char *)(v3 + 2400 * a3 + 893) ? v16[6] : sub_62CC54(v16, *(_DWORD *)(v3 + 2400 * a3 + 1860));
  if (*(void *)(v3 + 2400 * v12 + 872) > v17) {
    return 0;
  }
  int v18 = *v8;
  if ((*v8 - 60) <= 0xFFFFFFEC && !*(unsigned char *)(v3 + 2400 * a3 + 2226)
    || (result = 0, uint64_t v19 = v3 + 2400 * v12, (*(_DWORD *)(v19 + 160) - 60) <= 0xFFFFFFEC)
    && !*(unsigned char *)(v19 + 2226))
  {
    if ((v18 - 22) > 2)
    {
      if ((v18 - 91) <= 2 && (*(_DWORD *)(v3 + 2400 * v12 + 160) - 91) < 3) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(v3 + 2400 * v12 + 160) - 22) < 3)
    {
      return 0;
    }
    return v18 != 16;
  }
  return result;
}

uint64_t sub_7E51F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 2144);
  if (v3 == 85 || v3 == 17 && !*(unsigned char *)(*(void *)(a1 + 2160) + 2016))
  {
    bzero(a2, 0x330uLL);
    return sub_5A9D64((uint64_t)a2);
  }
  else
  {
    sub_7F6B24(a1 + 8, (uint64_t)&v20);
    sub_638DFC(a2, &v20);
    int v5 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = v23;
    if (v23)
    {
      do
      {
        int v7 = (void *)*v6;
        sub_4F4B48((uint64_t)(v6 + 2));
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    int v8 = __p;
    std::string __p = 0;
    if (v8) {
      operator delete(v8);
    }
    int v9 = (void **)v20;
    if (v20)
    {
      int v10 = v21;
      uint64_t v11 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        uint64_t v11 = v20;
      }
      long long v21 = v9;
      operator delete(v11);
    }
    sub_7F69F8((uint64_t)&v20);
    sub_638E00((uint64_t)a2, (uint64_t)&v20);
    int v13 = v23;
    if (v23)
    {
      do
      {
        BOOL v14 = (void *)*v13;
        sub_4F4B48((uint64_t)(v13 + 2));
        operator delete(v13);
        int v13 = v14;
      }
      while (v14);
    }
    char v15 = __p;
    std::string __p = 0;
    if (v15) {
      operator delete(v15);
    }
    BOOL v16 = (void **)v20;
    if (v20)
    {
      uint64_t v17 = v21;
      int v18 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 3;
        }
        while (v17 != v16);
        int v18 = v20;
      }
      long long v21 = v16;
      operator delete(v18);
    }
    sub_638448((uint64_t)a2, *(void *)(a1 + 2152));
    sub_63841C((uint64_t)a2, 25);
    sub_5F3D48((uint64_t)&v20, (uint64_t)&qword_25C2620);
    char v19 = 1;
    sub_5F6090((uint64_t *)&v20, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v19);
    sub_638E74((uint64_t)a2, (uint64_t)&v20);
    return sub_4D4B58((uint64_t)&v20);
  }
}

void sub_7E545C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E547C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E5490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E54AC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E54C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E54D4(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

BOOL sub_7E54E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 2144);
  if (v1 == 17) {
    return *(unsigned char *)(*(void *)(a1 + 2160) + 2016) != 0;
  }
  else {
    return v1 != 85;
  }
}

void *sub_7E5514@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1[2180])
  {
    (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 32))(v14, a1);
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= *(void *)(a2 + 16))
    {
      uint64_t v6 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v4, (uint64_t)v14);
      uint64_t v6 = (void *)(v5 + 1080);
    }
    *(void *)(a2 + 8) = v6;
    sub_52F1E8((uint64_t)v14);
  }
  if (a1[2181])
  {
    sub_7E56EC((uint64_t)a1, (uint64_t)v14);
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >= *(void *)(a2 + 16))
    {
      int v9 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v7, (uint64_t)v14);
      int v9 = (void *)(v8 + 1080);
    }
    *(void *)(a2 + 8) = v9;
    sub_52F1E8((uint64_t)v14);
  }
  (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 40))(v14, a1);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v10 >= *(void *)(a2 + 16))
  {
    uint64_t v12 = sub_7576B4((void **)a2, (uint64_t)v14);
  }
  else
  {
    sub_7574DC(v10, (uint64_t)v14);
    uint64_t v12 = (void *)(v11 + 1080);
  }
  *(void *)(a2 + 8) = v12;
  return sub_52F1E8((uint64_t)v14);
}

void sub_7E568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_52F1E8((uint64_t)&a9);
  sub_591E78(v9);
  _Unwind_Resume(a1);
}

void sub_7E56B0(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E56C4(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E56D8(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E56EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_7FAA10((uint64_t)&v12);
    sub_7C44F4(a2, &v12, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 418), 3);
    sub_63841C(a2, 1);
    sub_5F3D48((uint64_t)v11, (uint64_t)&qword_25C2620);
    char v10 = 1;
    sub_5F6090(v11, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v10);
    sub_638E74(a2, (uint64_t)v11);
    sub_4D4B58((uint64_t)v11);
    unint64_t v4 = v15;
    if (v15)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = v14;
    BOOL v14 = 0;
    if (v6) {
      operator delete(v6);
    }
    unint64_t v7 = v12;
    if (v12)
    {
      uint64_t v8 = v13;
      int v9 = v12;
      if (v13 != v12)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = v12;
      }
      int v13 = v7;
      operator delete(v9);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7E58AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4D4880((void **)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_7E58D4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4D4880((void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_7E58F4(_Unwind_Exception *a1)
{
  sub_4D4880((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_7E5908(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(unsigned char *)(a1 + 2181))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v94, a1);
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v16 = sub_757E08(a3, (uint64_t)&v94);
      uint64_t v17 = __p;
      a3[1] = v16;
      if (v17)
      {
        uint64_t v123 = v17;
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v6 = v94;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 8) = 0;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v95;
      *(void *)(v6 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v7 = v99;
      long long v8 = v97;
      *(_OWORD *)(v6 + 48) = v98;
      *(_OWORD *)(v6 + 64) = v7;
      *(_OWORD *)(v6 + 32) = v8;
      uint64_t v9 = v102;
      long long v10 = v101;
      *(_OWORD *)(v6 + 80) = v100;
      *(_OWORD *)(v6 + 96) = v10;
      *(void *)(v6 + 112) = v9;
      *(void *)(v6 + 120) = 0;
      *(void *)(v6 + 128) = 0;
      *(void *)(v6 + 136) = 0;
      *(_OWORD *)(v6 + 120) = *(_OWORD *)v103;
      *(void *)(v6 + 136) = v104;
      *(void *)(v6 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v6 + 152) = 0;
      *(void *)(v6 + 160) = 0;
      *(_OWORD *)(v6 + 144) = *(_OWORD *)v105;
      *(void *)(v6 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v6 + 168) = v107;
      *(_DWORD *)(v6 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v6 + 184) = v108;
      }
      *(_OWORD *)(v6 + 200) = v110;
      long long v11 = v111;
      uint64_t v12 = v113;
      *(_OWORD *)(v6 + 232) = v112;
      *(_OWORD *)(v6 + 216) = v11;
      *(void *)(v6 + 248) = v12;
      *(void *)(v6 + 256) = 0;
      *(void *)(v6 + 264) = 0;
      *(void *)(v6 + 272) = 0;
      *(_OWORD *)(v6 + 256) = *(_OWORD *)v114;
      *(void *)(v6 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v6 + 280) = v116;
      *(void *)(v6 + 288) = 0;
      *(void *)(v6 + 296) = 0;
      *(void *)(v6 + 304) = 0;
      *(_OWORD *)(v6 + 288) = *(_OWORD *)v117;
      *(void *)(v6 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v13 = *(_OWORD *)v119;
      *(_OWORD *)(v6 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v6 + 312) = v13;
      long long v14 = v120;
      *(_DWORD *)(v6 + 356) = v121;
      *(_OWORD *)(v6 + 340) = v14;
      *(void *)(v6 + 360) = 0;
      *(void *)(v6 + 368) = 0;
      *(void *)(v6 + 376) = 0;
      *(void *)(v6 + 360) = __p;
      *(void *)(v6 + 368) = v123;
      *(void *)(v6 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v15 = v125;
      *(_DWORD *)(v6 + 400) = v126;
      *(_OWORD *)(v6 + 384) = v15;
      a3[1] = v6 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    int v18 = (void **)v114[0];
    if (v114[0])
    {
      char v19 = (void **)v114[1];
      long long v20 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          char v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        long long v20 = v114[0];
      }
      v114[1] = v18;
      operator delete(v20);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v21 = v95[0];
    if (v95[0])
    {
      long long v22 = v95[1];
      long long v23 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v22 = (void *)sub_4D4B58((uint64_t)v22 - 160);
        while (v22 != v21);
        long long v23 = v95[0];
      }
      v95[1] = v21;
      operator delete(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 56))(&v94, a1);
  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v34 = sub_757E08(a3, (uint64_t)&v94);
    long long v35 = __p;
    a3[1] = v34;
    if (v35)
    {
      uint64_t v123 = v35;
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v24 = v94;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 8) = 0;
    *(_OWORD *)(v24 + 8) = *(_OWORD *)v95;
    *(void *)(v24 + 24) = v96;
    v95[0] = 0;
    v95[1] = 0;
    long long v25 = v99;
    long long v26 = v97;
    *(_OWORD *)(v24 + 48) = v98;
    *(_OWORD *)(v24 + 64) = v25;
    *(_OWORD *)(v24 + 32) = v26;
    uint64_t v27 = v102;
    long long v28 = v101;
    *(_OWORD *)(v24 + 80) = v100;
    *(_OWORD *)(v24 + 96) = v28;
    *(void *)(v24 + 112) = v27;
    *(void *)(v24 + 120) = 0;
    *(void *)(v24 + 128) = 0;
    *(void *)(v24 + 136) = 0;
    *(_OWORD *)(v24 + 120) = *(_OWORD *)v103;
    *(void *)(v24 + 136) = v104;
    *(void *)(v24 + 144) = 0;
    uint64_t v96 = 0;
    v103[0] = 0;
    v103[1] = 0;
    *(void *)(v24 + 152) = 0;
    *(void *)(v24 + 160) = 0;
    *(_OWORD *)(v24 + 144) = *(_OWORD *)v105;
    *(void *)(v24 + 160) = v106;
    v105[1] = 0;
    uint64_t v106 = 0;
    uint64_t v104 = 0;
    v105[0] = 0;
    *(_OWORD *)(v24 + 168) = v107;
    *(_DWORD *)(v24 + 192) = v109;
    if (v109 <= 1) {
      *(void *)(v24 + 184) = v108;
    }
    *(_OWORD *)(v24 + 200) = v110;
    long long v29 = v111;
    uint64_t v30 = v113;
    *(_OWORD *)(v24 + 232) = v112;
    *(_OWORD *)(v24 + 216) = v29;
    *(void *)(v24 + 248) = v30;
    *(void *)(v24 + 256) = 0;
    *(void *)(v24 + 264) = 0;
    *(void *)(v24 + 272) = 0;
    *(_OWORD *)(v24 + 256) = *(_OWORD *)v114;
    *(void *)(v24 + 272) = v115;
    v114[0] = 0;
    v114[1] = 0;
    *(unsigned char *)(v24 + 280) = v116;
    *(void *)(v24 + 288) = 0;
    *(void *)(v24 + 296) = 0;
    *(void *)(v24 + 304) = 0;
    *(_OWORD *)(v24 + 288) = *(_OWORD *)v117;
    *(void *)(v24 + 304) = v118;
    uint64_t v115 = 0;
    v117[0] = 0;
    v117[1] = 0;
    uint64_t v118 = 0;
    long long v31 = *(_OWORD *)v119;
    *(_OWORD *)(v24 + 321) = *(_OWORD *)&v119[9];
    *(_OWORD *)(v24 + 312) = v31;
    long long v32 = v120;
    *(_DWORD *)(v24 + 356) = v121;
    *(_OWORD *)(v24 + 340) = v32;
    *(void *)(v24 + 360) = 0;
    *(void *)(v24 + 368) = 0;
    *(void *)(v24 + 376) = 0;
    *(void *)(v24 + 360) = __p;
    *(void *)(v24 + 368) = v123;
    *(void *)(v24 + 376) = v124;
    std::string __p = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    long long v33 = v125;
    *(_DWORD *)(v24 + 400) = v126;
    *(_OWORD *)(v24 + 384) = v33;
    a3[1] = v24 + 408;
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  long long v36 = (void **)v114[0];
  if (v114[0])
  {
    long long v37 = (void **)v114[1];
    long long v38 = v114[0];
    if (v114[1] != v114[0])
    {
      do
        long long v37 = sub_4F31D0(v37 - 13);
      while (v37 != v36);
      long long v38 = v114[0];
    }
    v114[1] = v36;
    operator delete(v38);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  unint64_t v39 = v95[0];
  if (v95[0])
  {
    uint64_t v40 = v95[1];
    long long v41 = v95[0];
    if (v95[1] != v95[0])
    {
      do
        uint64_t v40 = (void *)sub_4D4B58((uint64_t)v40 - 160);
      while (v40 != v39);
      long long v41 = v95[0];
    }
    v95[1] = v39;
    operator delete(v41);
  }
  if (*(unsigned char *)(a1 + 2179))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v94, a1);
    unint64_t v42 = a3[1];
    if (v42 >= a3[2])
    {
      uint64_t v52 = sub_757E08(a3, (uint64_t)&v94);
      long long v53 = __p;
      a3[1] = v52;
      if (v53)
      {
        uint64_t v123 = v53;
        operator delete(v53);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v42 = v94;
      *(void *)(v42 + 16) = 0;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 8) = 0;
      *(_OWORD *)(v42 + 8) = *(_OWORD *)v95;
      *(void *)(v42 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v43 = v99;
      long long v44 = v97;
      *(_OWORD *)(v42 + 48) = v98;
      *(_OWORD *)(v42 + 64) = v43;
      *(_OWORD *)(v42 + 32) = v44;
      uint64_t v45 = v102;
      long long v46 = v101;
      *(_OWORD *)(v42 + 80) = v100;
      *(_OWORD *)(v42 + 96) = v46;
      *(void *)(v42 + 112) = v45;
      *(void *)(v42 + 120) = 0;
      *(void *)(v42 + 128) = 0;
      *(void *)(v42 + 136) = 0;
      *(_OWORD *)(v42 + 120) = *(_OWORD *)v103;
      *(void *)(v42 + 136) = v104;
      *(void *)(v42 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v42 + 152) = 0;
      *(void *)(v42 + 160) = 0;
      *(_OWORD *)(v42 + 144) = *(_OWORD *)v105;
      *(void *)(v42 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v42 + 168) = v107;
      *(_DWORD *)(v42 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v42 + 184) = v108;
      }
      *(_OWORD *)(v42 + 200) = v110;
      long long v47 = v111;
      uint64_t v48 = v113;
      *(_OWORD *)(v42 + 232) = v112;
      *(_OWORD *)(v42 + 216) = v47;
      *(void *)(v42 + 248) = v48;
      *(void *)(v42 + 256) = 0;
      *(void *)(v42 + 264) = 0;
      *(void *)(v42 + 272) = 0;
      *(_OWORD *)(v42 + 256) = *(_OWORD *)v114;
      *(void *)(v42 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v42 + 280) = v116;
      *(void *)(v42 + 288) = 0;
      *(void *)(v42 + 296) = 0;
      *(void *)(v42 + 304) = 0;
      *(_OWORD *)(v42 + 288) = *(_OWORD *)v117;
      *(void *)(v42 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v49 = *(_OWORD *)v119;
      *(_OWORD *)(v42 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v42 + 312) = v49;
      long long v50 = v120;
      *(_DWORD *)(v42 + 356) = v121;
      *(_OWORD *)(v42 + 340) = v50;
      *(void *)(v42 + 360) = 0;
      *(void *)(v42 + 368) = 0;
      *(void *)(v42 + 376) = 0;
      *(void *)(v42 + 360) = __p;
      *(void *)(v42 + 368) = v123;
      *(void *)(v42 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v51 = v125;
      *(_DWORD *)(v42 + 400) = v126;
      *(_OWORD *)(v42 + 384) = v51;
      a3[1] = v42 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v54 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v55 = (void **)v114[1];
      uint64_t v56 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v55 = sub_4F31D0(v55 - 13);
        while (v55 != v54);
        uint64_t v56 = v114[0];
      }
      v114[1] = v54;
      operator delete(v56);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v57 = v95[0];
    if (v95[0])
    {
      long long v58 = v95[1];
      long long v59 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v58 = (void *)sub_4D4B58((uint64_t)v58 - 160);
        while (v58 != v57);
        long long v59 = v95[0];
      }
      v95[1] = v57;
      operator delete(v59);
    }
  }
  if (*(unsigned char *)(a1 + 2182))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(&v94, a1, a2, *(void *)(a1 + 2192) + 1);
    unint64_t v60 = a3[1];
    if (v60 >= a3[2])
    {
      uint64_t v80 = sub_757E08(a3, (uint64_t)&v94);
      uint64_t v81 = __p;
      a3[1] = v80;
      if (v81)
      {
        uint64_t v123 = v81;
        operator delete(v81);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v60 = v94;
      *(void *)(v60 + 16) = 0;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 8) = 0;
      *(_OWORD *)(v60 + 8) = *(_OWORD *)v95;
      *(void *)(v60 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v61 = v99;
      long long v62 = v97;
      *(_OWORD *)(v60 + 48) = v98;
      *(_OWORD *)(v60 + 64) = v61;
      *(_OWORD *)(v60 + 32) = v62;
      uint64_t v63 = v102;
      long long v64 = v101;
      *(_OWORD *)(v60 + 80) = v100;
      *(_OWORD *)(v60 + 96) = v64;
      *(void *)(v60 + 112) = v63;
      *(void *)(v60 + 120) = 0;
      *(void *)(v60 + 128) = 0;
      *(void *)(v60 + 136) = 0;
      *(_OWORD *)(v60 + 120) = *(_OWORD *)v103;
      *(void *)(v60 + 136) = v104;
      *(void *)(v60 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v60 + 152) = 0;
      *(void *)(v60 + 160) = 0;
      *(_OWORD *)(v60 + 144) = *(_OWORD *)v105;
      *(void *)(v60 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v60 + 168) = v107;
      *(_DWORD *)(v60 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v60 + 184) = v108;
      }
      *(_OWORD *)(v60 + 200) = v110;
      long long v65 = v111;
      uint64_t v66 = v113;
      *(_OWORD *)(v60 + 232) = v112;
      *(_OWORD *)(v60 + 216) = v65;
      *(void *)(v60 + 248) = v66;
      *(void *)(v60 + 256) = 0;
      *(void *)(v60 + 264) = 0;
      *(void *)(v60 + 272) = 0;
      *(_OWORD *)(v60 + 256) = *(_OWORD *)v114;
      *(void *)(v60 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v60 + 280) = v116;
      *(void *)(v60 + 288) = 0;
      *(void *)(v60 + 296) = 0;
      *(void *)(v60 + 304) = 0;
      *(_OWORD *)(v60 + 288) = *(_OWORD *)v117;
      *(void *)(v60 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v67 = *(_OWORD *)v119;
      *(_OWORD *)(v60 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v60 + 312) = v67;
      long long v68 = v120;
      *(_DWORD *)(v60 + 356) = v121;
      *(_OWORD *)(v60 + 340) = v68;
      *(void *)(v60 + 360) = 0;
      *(void *)(v60 + 368) = 0;
      *(void *)(v60 + 376) = 0;
      *(void *)(v60 + 360) = __p;
      *(void *)(v60 + 368) = v123;
      *(void *)(v60 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v69 = v125;
      *(_DWORD *)(v60 + 400) = v126;
      *(_OWORD *)(v60 + 384) = v69;
      a3[1] = v60 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    int v82 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v83 = (void **)v114[1];
      int v84 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v83 = sub_4F31D0(v83 - 13);
        while (v83 != v82);
        int v84 = v114[0];
      }
      v114[1] = v82;
      operator delete(v84);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v86 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v86 = (void *)sub_4D4B58((uint64_t)v86 - 160);
        while (v86 != v85);
LABEL_111:
        int v87 = v95[0];
        goto LABEL_112;
      }
      goto LABEL_112;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v94, a1);
    unint64_t v70 = a3[1];
    if (v70 >= a3[2])
    {
      uint64_t v88 = sub_757E08(a3, (uint64_t)&v94);
      unint64_t v89 = __p;
      a3[1] = v88;
      if (v89)
      {
        uint64_t v123 = v89;
        operator delete(v89);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v70 = v94;
      *(void *)(v70 + 16) = 0;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 8) = 0;
      *(_OWORD *)(v70 + 8) = *(_OWORD *)v95;
      *(void *)(v70 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v71 = v99;
      long long v72 = v97;
      *(_OWORD *)(v70 + 48) = v98;
      *(_OWORD *)(v70 + 64) = v71;
      *(_OWORD *)(v70 + 32) = v72;
      uint64_t v73 = v102;
      long long v74 = v101;
      *(_OWORD *)(v70 + 80) = v100;
      *(_OWORD *)(v70 + 96) = v74;
      *(void *)(v70 + 112) = v73;
      *(void *)(v70 + 120) = 0;
      *(void *)(v70 + 128) = 0;
      *(void *)(v70 + 136) = 0;
      *(_OWORD *)(v70 + 120) = *(_OWORD *)v103;
      *(void *)(v70 + 136) = v104;
      *(void *)(v70 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v70 + 152) = 0;
      *(void *)(v70 + 160) = 0;
      *(_OWORD *)(v70 + 144) = *(_OWORD *)v105;
      *(void *)(v70 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v70 + 168) = v107;
      *(_DWORD *)(v70 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v70 + 184) = v108;
      }
      *(_OWORD *)(v70 + 200) = v110;
      long long v75 = v111;
      uint64_t v76 = v113;
      *(_OWORD *)(v70 + 232) = v112;
      *(_OWORD *)(v70 + 216) = v75;
      *(void *)(v70 + 248) = v76;
      *(void *)(v70 + 256) = 0;
      *(void *)(v70 + 264) = 0;
      *(void *)(v70 + 272) = 0;
      *(_OWORD *)(v70 + 256) = *(_OWORD *)v114;
      *(void *)(v70 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v70 + 280) = v116;
      *(void *)(v70 + 288) = 0;
      *(void *)(v70 + 296) = 0;
      *(void *)(v70 + 304) = 0;
      *(_OWORD *)(v70 + 288) = *(_OWORD *)v117;
      *(void *)(v70 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v77 = *(_OWORD *)v119;
      *(_OWORD *)(v70 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v70 + 312) = v77;
      long long v78 = v120;
      *(_DWORD *)(v70 + 356) = v121;
      *(_OWORD *)(v70 + 340) = v78;
      *(void *)(v70 + 360) = 0;
      *(void *)(v70 + 368) = 0;
      *(void *)(v70 + 376) = 0;
      *(void *)(v70 + 360) = __p;
      *(void *)(v70 + 368) = v123;
      *(void *)(v70 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v79 = v125;
      *(_DWORD *)(v70 + 400) = v126;
      *(_OWORD *)(v70 + 384) = v79;
      a3[1] = v70 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v90 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v91 = (void **)v114[1];
      unint64_t v92 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v91 = sub_4F31D0(v91 - 13);
        while (v91 != v90);
        unint64_t v92 = v114[0];
      }
      v114[1] = v90;
      operator delete(v92);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v93 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v93 = (void *)sub_4D4B58((uint64_t)v93 - 160);
        while (v93 != v85);
        goto LABEL_111;
      }
LABEL_112:
      v95[1] = v85;
      operator delete(v87);
    }
  }
}

void sub_7E65F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_639B78(&a9);
  sub_591DFC(v9);
  _Unwind_Resume(a1);
}

void sub_7E6634(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E6648(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E665C(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E6670(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E6684(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2180))
  {
    sub_7F6C6C(a1 + 8, (uint64_t)&v9);
    sub_7C43EC(a2, &v9, 0);
    sub_63841C(a2, 2);
    uint64_t v3 = v12;
    if (v12)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        sub_4F4B48((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5) {
      operator delete(v5);
    }
    unint64_t v6 = (void **)v9;
    if (v9)
    {
      long long v7 = v10;
      long long v8 = v9;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        long long v8 = v9;
      }
      long long v10 = v6;
      operator delete(v8);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7E67E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8(v2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6814(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7FAB58(a1 + 8, (uint64_t)&v14);
  sub_7C47A4(a2, (uint64_t)&v14);
  uint64_t v4 = nullsub_1(&v14);
  sub_638D90(a2, v4);
  sub_63841C(a2, 3);
  sub_5F3D48((uint64_t)v13, (uint64_t)&qword_25C2620);
  char v12 = 1;
  sub_5F6090(v13, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v12);
  sub_638E74(a2, (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  uint64_t v5 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = v17;
  if (v17)
  {
    do
    {
      long long v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  long long v8 = v16;
  uint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = v14;
  if (v14)
  {
    long long v10 = v15;
    long long v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      long long v11 = v14;
    }
    long long v15 = v9;
    operator delete(v11);
  }
}

void sub_7E698C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4F31D0((void **)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_7E69B4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4F31D0((void **)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_7E69E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_7FC268((uint64_t)&v17);
    sub_639258(a2, (uint64_t)&v17, 0, 0, 1);
    sub_63841C(a2, 42);
    sub_638448(a2, *(void *)(a1 + 2152));
    uint64_t v4 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = v20;
    if (v20)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        sub_4F4B48((uint64_t)(v5 + 2));
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    long long v7 = __p;
    std::string __p = 0;
    if (v7) {
      operator delete(v7);
    }
    long long v8 = (void **)v17;
    if (v17)
    {
      uint64_t v9 = v18;
      long long v10 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v9 - 1) < 0) {
            operator delete(*(v9 - 3));
          }
          v9 -= 3;
        }
        while (v9 != v8);
        long long v10 = v17;
      }
      int v18 = v8;
      operator delete(v10);
    }
  }
  else
  {
    *(void *)(a2 + 400) = 0;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)a2 = -1;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    int64x2_t v11 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 56) = 0x7FFFFFFF;
    *(int64x2_t *)(a2 + 64) = v11;
    *(_DWORD *)(a2 + 80) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 88) = 0x7FFFFFFF;
    *(void *)(a2 + 92) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a2 + 112) = 0x8000000080000000;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(unsigned char *)(a2 + 168) = 0;
    *(void *)(a2 + 172) = 0x8000000080000000;
    *(_DWORD *)(a2 + 180) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 192) = -1;
    *(void *)(a2 + 208) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 216) = 0x7FFFFFFF;
    *(void *)(a2 + 220) = 0x7FFFFFFF7FFFFFFFLL;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a2 + 240) = _Q1;
    *(_OWORD *)(a2 + 256) = 0u;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 280) = 1;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    *(_WORD *)(a2 + 312) = 0;
    *(_DWORD *)(a2 + 316) = -1;
    *(void *)(a2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 340) = -1;
    *(void *)(a2 + 344) = -1;
    *(_DWORD *)(a2 + 356) = 1;
    *(_DWORD *)(a2 + 384) = 0;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 388) = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)(a2 + 400) = -1;
  }
}

void sub_7E6C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6C54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7FC354(a1 + 8, (uint64_t *)&v11);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 29);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7E6D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6DB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7FC578(a1 + 8);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 31);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7E6EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E6F0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7FC59C(a1 + 8, 1, (uint64_t)&v10);
  sub_639258(a2, (uint64_t)&v10, 0, 0, 1);
  sub_63841C(a2, 44);
  uint64_t v3 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v13;
  if (v13)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v10;
  if (v10)
  {
    long long v8 = v11;
    uint64_t v9 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v10;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7E702C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E7048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E705C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_7FC910(a1 + 8, a2, a3, (uint64_t)&__p);
  sub_6393C8(a4, (uint64_t *)&__p, 0, 0, 1);
  sub_639724(a4);
  sub_63841C(a4, 44);
  sub_638458(a4, *(void *)(*(void *)(a2 + 1064) + 2400 * a3 + 872));
  long long v7 = (void **)__p;
  if (__p)
  {
    long long v8 = v11;
    uint64_t v9 = __p;
    if (v11 != __p)
    {
      do
        long long v8 = sub_4F31D0(v8 - 13);
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7E711C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E7130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_7E714C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2179)) {
    return 0;
  }
  uint64_t v1 = 112;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v1 = 120;
  }
  uint64_t v2 = 96;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v2 = 104;
  }
  if (*(unsigned char *)(a1 + 2176)) {
    uint64_t v1 = v2;
  }
  return *(void *)(a1 + 2152) >= *(void *)(*(void *)(a1 + 2160) + v1);
}

uint64_t sub_7E71A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  *(void *)a1 = &off_2439CA8;
  sub_803FF0(a1 + 8, a2, a3, a4, a5, a6);
  *(void *)(a1 + 2152) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2160) = a2;
  *(void *)(a1 + 2168) = a3;
  *(_WORD *)(a1 + 2180) = 0;
  *(unsigned char *)(a1 + 2182) = 0;
  *(void *)(a1 + 2192) = a5;
  uint64_t v11 = *(void *)(a4 + 1064);
  uint64_t v12 = v11 + 2400 * a5;
  *(_DWORD *)(a1 + 2144) = *(_DWORD *)(v12 + 160);
  *(void *)(a1 + 2152) = *(void *)(v12 + 872);
  *(unsigned char *)(a1 + 2176) = *(unsigned char *)(a3 + 1064);
  *(unsigned char *)(a1 + 2177) = *(unsigned char *)(v12 + 893);
  int v13 = *(unsigned __int8 *)(v12 + 328);
  if (v13 == 5) {
    int v13 = *(unsigned __int8 *)(a3 + 1176);
  }
  *(unsigned char *)(a1 + 2178) = v13;
  if (v13) {
    BOOL v14 = v13 == 3;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  *(unsigned char *)(a1 + 2179) = v15;
  BOOL v16 = sub_6F2FD8(v12 + 712);
  BOOL v17 = *(void *)(v11 + 2400 * a5 + 864) != 0x7FFFFFFFFFFFFFFFLL && v16;
  *(unsigned char *)(a1 + 2180) = v17;
  *(unsigned char *)(a1 + 2181) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  *(unsigned char *)(a1 + 2182) = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t))a1)(a1, a4, a5);
  uint64_t v18 = v11 + 2400 * a5;
  *(unsigned char *)(a1 + 2183) = *(unsigned char *)(v18 + 895);
  *(unsigned char *)(a1 + 2184) = *(unsigned char *)(v18 + 320);
  return a1;
}

void sub_7E731C(_Unwind_Exception *a1)
{
  sub_531E24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7E7330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_7E71A0(a1, a2, a3, a4, a5, a6);
}

BOOL sub_7E7338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(a2 + 1072) - v3) >> 5) - 1 == a3) {
    return 0;
  }
  uint64_t v6 = v3 + 2400 * a3;
  int v9 = *(_DWORD *)(v6 + 160);
  long long v8 = (int *)(v6 + 160);
  int v7 = v9;
  if (v9 == 16
    || (*(unsigned char *)(v3 + 2400 * a3 + 648) || *(unsigned char *)(v3 + 2400 * a3 + 649) || *(unsigned char *)(v3 + 2400 * a3 + 650))
    && *(unsigned char *)(v3 + 2400 * a3 + 304))
  {
    return 0;
  }
  int v10 = *(unsigned __int8 *)(v3 + 2400 * a3 + 328);
  if (v10 == 2 || v10 == 4) {
    return 1;
  }
  uint64_t v12 = a3 + 1;
  int v13 = *(unsigned __int8 *)(v3 + 2400 * (a3 + 1) + 328);
  if (v13 == 2 || v13 == 4) {
    return 1;
  }
  if ((v7 - 85) > 0xFFFFFFFC || *(unsigned char *)(v3 + 2400 * v12 + 2225) != 0) {
    return 0;
  }
  BOOL v16 = *(void **)(a1 + 2160);
  uint64_t v17 = *(unsigned char *)(v3 + 2400 * a3 + 893) ? v16[6] : sub_62CC54(v16, *(_DWORD *)(v3 + 2400 * a3 + 1860));
  if (*(void *)(v3 + 2400 * v12 + 872) > v17) {
    return 0;
  }
  int v18 = *v8;
  if ((*v8 - 60) <= 0xFFFFFFEC && !*(unsigned char *)(v3 + 2400 * a3 + 2226)
    || (result = 0, uint64_t v19 = v3 + 2400 * v12, (*(_DWORD *)(v19 + 160) - 60) <= 0xFFFFFFEC)
    && !*(unsigned char *)(v19 + 2226))
  {
    if ((v18 - 22) > 2)
    {
      if ((v18 - 91) <= 2 && (*(_DWORD *)(v3 + 2400 * v12 + 160) - 91) < 3) {
        return 0;
      }
    }
    else if ((*(_DWORD *)(v3 + 2400 * v12 + 160) - 22) < 3)
    {
      return 0;
    }
    return v18 != 16;
  }
  return result;
}

uint64_t sub_7E7558@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 2144);
  if (v3 == 85 || v3 == 17 && !*(unsigned char *)(*(void *)(a1 + 2160) + 2016))
  {
    bzero(a2, 0x330uLL);
    return sub_5A9D64((uint64_t)a2);
  }
  else
  {
    sub_804D8C(a1 + 8, (uint64_t)&v20);
    sub_638DFC(a2, &v20);
    uint64_t v5 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = v23;
    if (v23)
    {
      do
      {
        int v7 = (void *)*v6;
        sub_4F4B48((uint64_t)(v6 + 2));
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    long long v8 = __p;
    std::string __p = 0;
    if (v8) {
      operator delete(v8);
    }
    int v9 = (void **)v20;
    if (v20)
    {
      int v10 = v21;
      uint64_t v11 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        uint64_t v11 = v20;
      }
      long long v21 = v9;
      operator delete(v11);
    }
    sub_804C60((uint64_t)&v20);
    sub_638E00((uint64_t)a2, (uint64_t)&v20);
    int v13 = v23;
    if (v23)
    {
      do
      {
        BOOL v14 = (void *)*v13;
        sub_4F4B48((uint64_t)(v13 + 2));
        operator delete(v13);
        int v13 = v14;
      }
      while (v14);
    }
    char v15 = __p;
    std::string __p = 0;
    if (v15) {
      operator delete(v15);
    }
    BOOL v16 = (void **)v20;
    if (v20)
    {
      uint64_t v17 = v21;
      int v18 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 3;
        }
        while (v17 != v16);
        int v18 = v20;
      }
      long long v21 = v16;
      operator delete(v18);
    }
    sub_638448((uint64_t)a2, *(void *)(a1 + 2152));
    sub_63841C((uint64_t)a2, 25);
    sub_5F3D48((uint64_t)&v20, (uint64_t)&qword_25C2620);
    char v19 = 1;
    sub_5F6090((uint64_t *)&v20, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v19);
    sub_638E74((uint64_t)a2, (uint64_t)&v20);
    return sub_4D4B58((uint64_t)&v20);
  }
}

void sub_7E77BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E77DC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E780C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E7820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E7834(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void *sub_7E7848@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1[2180])
  {
    (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 32))(v14, a1);
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= *(void *)(a2 + 16))
    {
      uint64_t v6 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v4, (uint64_t)v14);
      uint64_t v6 = (void *)(v5 + 1080);
    }
    *(void *)(a2 + 8) = v6;
    sub_52F1E8((uint64_t)v14);
  }
  if (a1[2181])
  {
    sub_7E7A20((uint64_t)a1, (uint64_t)v14);
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >= *(void *)(a2 + 16))
    {
      int v9 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v7, (uint64_t)v14);
      int v9 = (void *)(v8 + 1080);
    }
    *(void *)(a2 + 8) = v9;
    sub_52F1E8((uint64_t)v14);
  }
  (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 40))(v14, a1);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v10 >= *(void *)(a2 + 16))
  {
    uint64_t v12 = sub_7576B4((void **)a2, (uint64_t)v14);
  }
  else
  {
    sub_7574DC(v10, (uint64_t)v14);
    uint64_t v12 = (void *)(v11 + 1080);
  }
  *(void *)(a2 + 8) = v12;
  return sub_52F1E8((uint64_t)v14);
}

void sub_7E79C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_52F1E8((uint64_t)&a9);
  sub_591E78(v9);
  _Unwind_Resume(a1);
}

void sub_7E79E4(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E79F8(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E7A0C(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E7A20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_80888C((uint64_t)&v12);
    sub_7C44F4(a2, &v12, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 418), 3);
    sub_63841C(a2, 1);
    sub_5F3D48((uint64_t)v11, (uint64_t)&qword_25C2620);
    char v10 = 1;
    sub_5F6090(v11, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v10);
    sub_638E74(a2, (uint64_t)v11);
    sub_4D4B58((uint64_t)v11);
    unint64_t v4 = v15;
    if (v15)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = v14;
    BOOL v14 = 0;
    if (v6) {
      operator delete(v6);
    }
    unint64_t v7 = v12;
    if (v12)
    {
      uint64_t v8 = v13;
      int v9 = v12;
      if (v13 != v12)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = v12;
      }
      int v13 = v7;
      operator delete(v9);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7E7BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4D4880((void **)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_7E7C08(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4D4880((void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_7E7C28(_Unwind_Exception *a1)
{
  sub_4D4880((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_7E7C3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(unsigned char *)(a1 + 2181))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v94, a1);
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v16 = sub_757E08(a3, (uint64_t)&v94);
      uint64_t v17 = __p;
      a3[1] = v16;
      if (v17)
      {
        uint64_t v123 = v17;
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v6 = v94;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 8) = 0;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v95;
      *(void *)(v6 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v7 = v99;
      long long v8 = v97;
      *(_OWORD *)(v6 + 48) = v98;
      *(_OWORD *)(v6 + 64) = v7;
      *(_OWORD *)(v6 + 32) = v8;
      uint64_t v9 = v102;
      long long v10 = v101;
      *(_OWORD *)(v6 + 80) = v100;
      *(_OWORD *)(v6 + 96) = v10;
      *(void *)(v6 + 112) = v9;
      *(void *)(v6 + 120) = 0;
      *(void *)(v6 + 128) = 0;
      *(void *)(v6 + 136) = 0;
      *(_OWORD *)(v6 + 120) = *(_OWORD *)v103;
      *(void *)(v6 + 136) = v104;
      *(void *)(v6 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v6 + 152) = 0;
      *(void *)(v6 + 160) = 0;
      *(_OWORD *)(v6 + 144) = *(_OWORD *)v105;
      *(void *)(v6 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v6 + 168) = v107;
      *(_DWORD *)(v6 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v6 + 184) = v108;
      }
      *(_OWORD *)(v6 + 200) = v110;
      long long v11 = v111;
      uint64_t v12 = v113;
      *(_OWORD *)(v6 + 232) = v112;
      *(_OWORD *)(v6 + 216) = v11;
      *(void *)(v6 + 248) = v12;
      *(void *)(v6 + 256) = 0;
      *(void *)(v6 + 264) = 0;
      *(void *)(v6 + 272) = 0;
      *(_OWORD *)(v6 + 256) = *(_OWORD *)v114;
      *(void *)(v6 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v6 + 280) = v116;
      *(void *)(v6 + 288) = 0;
      *(void *)(v6 + 296) = 0;
      *(void *)(v6 + 304) = 0;
      *(_OWORD *)(v6 + 288) = *(_OWORD *)v117;
      *(void *)(v6 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v13 = *(_OWORD *)v119;
      *(_OWORD *)(v6 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v6 + 312) = v13;
      long long v14 = v120;
      *(_DWORD *)(v6 + 356) = v121;
      *(_OWORD *)(v6 + 340) = v14;
      *(void *)(v6 + 360) = 0;
      *(void *)(v6 + 368) = 0;
      *(void *)(v6 + 376) = 0;
      *(void *)(v6 + 360) = __p;
      *(void *)(v6 + 368) = v123;
      *(void *)(v6 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v15 = v125;
      *(_DWORD *)(v6 + 400) = v126;
      *(_OWORD *)(v6 + 384) = v15;
      a3[1] = v6 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    int v18 = (void **)v114[0];
    if (v114[0])
    {
      char v19 = (void **)v114[1];
      long long v20 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          char v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        long long v20 = v114[0];
      }
      v114[1] = v18;
      operator delete(v20);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v21 = v95[0];
    if (v95[0])
    {
      long long v22 = v95[1];
      long long v23 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v22 = (void *)sub_4D4B58((uint64_t)v22 - 160);
        while (v22 != v21);
        long long v23 = v95[0];
      }
      v95[1] = v21;
      operator delete(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 56))(&v94, a1);
  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v34 = sub_757E08(a3, (uint64_t)&v94);
    long long v35 = __p;
    a3[1] = v34;
    if (v35)
    {
      uint64_t v123 = v35;
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v24 = v94;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 8) = 0;
    *(_OWORD *)(v24 + 8) = *(_OWORD *)v95;
    *(void *)(v24 + 24) = v96;
    v95[0] = 0;
    v95[1] = 0;
    long long v25 = v99;
    long long v26 = v97;
    *(_OWORD *)(v24 + 48) = v98;
    *(_OWORD *)(v24 + 64) = v25;
    *(_OWORD *)(v24 + 32) = v26;
    uint64_t v27 = v102;
    long long v28 = v101;
    *(_OWORD *)(v24 + 80) = v100;
    *(_OWORD *)(v24 + 96) = v28;
    *(void *)(v24 + 112) = v27;
    *(void *)(v24 + 120) = 0;
    *(void *)(v24 + 128) = 0;
    *(void *)(v24 + 136) = 0;
    *(_OWORD *)(v24 + 120) = *(_OWORD *)v103;
    *(void *)(v24 + 136) = v104;
    *(void *)(v24 + 144) = 0;
    uint64_t v96 = 0;
    v103[0] = 0;
    v103[1] = 0;
    *(void *)(v24 + 152) = 0;
    *(void *)(v24 + 160) = 0;
    *(_OWORD *)(v24 + 144) = *(_OWORD *)v105;
    *(void *)(v24 + 160) = v106;
    v105[1] = 0;
    uint64_t v106 = 0;
    uint64_t v104 = 0;
    v105[0] = 0;
    *(_OWORD *)(v24 + 168) = v107;
    *(_DWORD *)(v24 + 192) = v109;
    if (v109 <= 1) {
      *(void *)(v24 + 184) = v108;
    }
    *(_OWORD *)(v24 + 200) = v110;
    long long v29 = v111;
    uint64_t v30 = v113;
    *(_OWORD *)(v24 + 232) = v112;
    *(_OWORD *)(v24 + 216) = v29;
    *(void *)(v24 + 248) = v30;
    *(void *)(v24 + 256) = 0;
    *(void *)(v24 + 264) = 0;
    *(void *)(v24 + 272) = 0;
    *(_OWORD *)(v24 + 256) = *(_OWORD *)v114;
    *(void *)(v24 + 272) = v115;
    v114[0] = 0;
    v114[1] = 0;
    *(unsigned char *)(v24 + 280) = v116;
    *(void *)(v24 + 288) = 0;
    *(void *)(v24 + 296) = 0;
    *(void *)(v24 + 304) = 0;
    *(_OWORD *)(v24 + 288) = *(_OWORD *)v117;
    *(void *)(v24 + 304) = v118;
    uint64_t v115 = 0;
    v117[0] = 0;
    v117[1] = 0;
    uint64_t v118 = 0;
    long long v31 = *(_OWORD *)v119;
    *(_OWORD *)(v24 + 321) = *(_OWORD *)&v119[9];
    *(_OWORD *)(v24 + 312) = v31;
    long long v32 = v120;
    *(_DWORD *)(v24 + 356) = v121;
    *(_OWORD *)(v24 + 340) = v32;
    *(void *)(v24 + 360) = 0;
    *(void *)(v24 + 368) = 0;
    *(void *)(v24 + 376) = 0;
    *(void *)(v24 + 360) = __p;
    *(void *)(v24 + 368) = v123;
    *(void *)(v24 + 376) = v124;
    std::string __p = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    long long v33 = v125;
    *(_DWORD *)(v24 + 400) = v126;
    *(_OWORD *)(v24 + 384) = v33;
    a3[1] = v24 + 408;
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  long long v36 = (void **)v114[0];
  if (v114[0])
  {
    long long v37 = (void **)v114[1];
    long long v38 = v114[0];
    if (v114[1] != v114[0])
    {
      do
        long long v37 = sub_4F31D0(v37 - 13);
      while (v37 != v36);
      long long v38 = v114[0];
    }
    v114[1] = v36;
    operator delete(v38);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  unint64_t v39 = v95[0];
  if (v95[0])
  {
    uint64_t v40 = v95[1];
    long long v41 = v95[0];
    if (v95[1] != v95[0])
    {
      do
        uint64_t v40 = (void *)sub_4D4B58((uint64_t)v40 - 160);
      while (v40 != v39);
      long long v41 = v95[0];
    }
    v95[1] = v39;
    operator delete(v41);
  }
  if (*(unsigned char *)(a1 + 2179))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v94, a1);
    unint64_t v42 = a3[1];
    if (v42 >= a3[2])
    {
      uint64_t v52 = sub_757E08(a3, (uint64_t)&v94);
      long long v53 = __p;
      a3[1] = v52;
      if (v53)
      {
        uint64_t v123 = v53;
        operator delete(v53);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v42 = v94;
      *(void *)(v42 + 16) = 0;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 8) = 0;
      *(_OWORD *)(v42 + 8) = *(_OWORD *)v95;
      *(void *)(v42 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v43 = v99;
      long long v44 = v97;
      *(_OWORD *)(v42 + 48) = v98;
      *(_OWORD *)(v42 + 64) = v43;
      *(_OWORD *)(v42 + 32) = v44;
      uint64_t v45 = v102;
      long long v46 = v101;
      *(_OWORD *)(v42 + 80) = v100;
      *(_OWORD *)(v42 + 96) = v46;
      *(void *)(v42 + 112) = v45;
      *(void *)(v42 + 120) = 0;
      *(void *)(v42 + 128) = 0;
      *(void *)(v42 + 136) = 0;
      *(_OWORD *)(v42 + 120) = *(_OWORD *)v103;
      *(void *)(v42 + 136) = v104;
      *(void *)(v42 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v42 + 152) = 0;
      *(void *)(v42 + 160) = 0;
      *(_OWORD *)(v42 + 144) = *(_OWORD *)v105;
      *(void *)(v42 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v42 + 168) = v107;
      *(_DWORD *)(v42 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v42 + 184) = v108;
      }
      *(_OWORD *)(v42 + 200) = v110;
      long long v47 = v111;
      uint64_t v48 = v113;
      *(_OWORD *)(v42 + 232) = v112;
      *(_OWORD *)(v42 + 216) = v47;
      *(void *)(v42 + 248) = v48;
      *(void *)(v42 + 256) = 0;
      *(void *)(v42 + 264) = 0;
      *(void *)(v42 + 272) = 0;
      *(_OWORD *)(v42 + 256) = *(_OWORD *)v114;
      *(void *)(v42 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v42 + 280) = v116;
      *(void *)(v42 + 288) = 0;
      *(void *)(v42 + 296) = 0;
      *(void *)(v42 + 304) = 0;
      *(_OWORD *)(v42 + 288) = *(_OWORD *)v117;
      *(void *)(v42 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v49 = *(_OWORD *)v119;
      *(_OWORD *)(v42 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v42 + 312) = v49;
      long long v50 = v120;
      *(_DWORD *)(v42 + 356) = v121;
      *(_OWORD *)(v42 + 340) = v50;
      *(void *)(v42 + 360) = 0;
      *(void *)(v42 + 368) = 0;
      *(void *)(v42 + 376) = 0;
      *(void *)(v42 + 360) = __p;
      *(void *)(v42 + 368) = v123;
      *(void *)(v42 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v51 = v125;
      *(_DWORD *)(v42 + 400) = v126;
      *(_OWORD *)(v42 + 384) = v51;
      a3[1] = v42 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v54 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v55 = (void **)v114[1];
      uint64_t v56 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v55 = sub_4F31D0(v55 - 13);
        while (v55 != v54);
        uint64_t v56 = v114[0];
      }
      v114[1] = v54;
      operator delete(v56);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v57 = v95[0];
    if (v95[0])
    {
      long long v58 = v95[1];
      long long v59 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v58 = (void *)sub_4D4B58((uint64_t)v58 - 160);
        while (v58 != v57);
        long long v59 = v95[0];
      }
      v95[1] = v57;
      operator delete(v59);
    }
  }
  if (*(unsigned char *)(a1 + 2182))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(&v94, a1, a2, *(void *)(a1 + 2192) + 1);
    unint64_t v60 = a3[1];
    if (v60 >= a3[2])
    {
      uint64_t v80 = sub_757E08(a3, (uint64_t)&v94);
      uint64_t v81 = __p;
      a3[1] = v80;
      if (v81)
      {
        uint64_t v123 = v81;
        operator delete(v81);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v60 = v94;
      *(void *)(v60 + 16) = 0;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 8) = 0;
      *(_OWORD *)(v60 + 8) = *(_OWORD *)v95;
      *(void *)(v60 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v61 = v99;
      long long v62 = v97;
      *(_OWORD *)(v60 + 48) = v98;
      *(_OWORD *)(v60 + 64) = v61;
      *(_OWORD *)(v60 + 32) = v62;
      uint64_t v63 = v102;
      long long v64 = v101;
      *(_OWORD *)(v60 + 80) = v100;
      *(_OWORD *)(v60 + 96) = v64;
      *(void *)(v60 + 112) = v63;
      *(void *)(v60 + 120) = 0;
      *(void *)(v60 + 128) = 0;
      *(void *)(v60 + 136) = 0;
      *(_OWORD *)(v60 + 120) = *(_OWORD *)v103;
      *(void *)(v60 + 136) = v104;
      *(void *)(v60 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v60 + 152) = 0;
      *(void *)(v60 + 160) = 0;
      *(_OWORD *)(v60 + 144) = *(_OWORD *)v105;
      *(void *)(v60 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v60 + 168) = v107;
      *(_DWORD *)(v60 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v60 + 184) = v108;
      }
      *(_OWORD *)(v60 + 200) = v110;
      long long v65 = v111;
      uint64_t v66 = v113;
      *(_OWORD *)(v60 + 232) = v112;
      *(_OWORD *)(v60 + 216) = v65;
      *(void *)(v60 + 248) = v66;
      *(void *)(v60 + 256) = 0;
      *(void *)(v60 + 264) = 0;
      *(void *)(v60 + 272) = 0;
      *(_OWORD *)(v60 + 256) = *(_OWORD *)v114;
      *(void *)(v60 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v60 + 280) = v116;
      *(void *)(v60 + 288) = 0;
      *(void *)(v60 + 296) = 0;
      *(void *)(v60 + 304) = 0;
      *(_OWORD *)(v60 + 288) = *(_OWORD *)v117;
      *(void *)(v60 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v67 = *(_OWORD *)v119;
      *(_OWORD *)(v60 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v60 + 312) = v67;
      long long v68 = v120;
      *(_DWORD *)(v60 + 356) = v121;
      *(_OWORD *)(v60 + 340) = v68;
      *(void *)(v60 + 360) = 0;
      *(void *)(v60 + 368) = 0;
      *(void *)(v60 + 376) = 0;
      *(void *)(v60 + 360) = __p;
      *(void *)(v60 + 368) = v123;
      *(void *)(v60 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v69 = v125;
      *(_DWORD *)(v60 + 400) = v126;
      *(_OWORD *)(v60 + 384) = v69;
      a3[1] = v60 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    int v82 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v83 = (void **)v114[1];
      int v84 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v83 = sub_4F31D0(v83 - 13);
        while (v83 != v82);
        int v84 = v114[0];
      }
      v114[1] = v82;
      operator delete(v84);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v86 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v86 = (void *)sub_4D4B58((uint64_t)v86 - 160);
        while (v86 != v85);
LABEL_111:
        int v87 = v95[0];
        goto LABEL_112;
      }
      goto LABEL_112;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v94, a1);
    unint64_t v70 = a3[1];
    if (v70 >= a3[2])
    {
      uint64_t v88 = sub_757E08(a3, (uint64_t)&v94);
      unint64_t v89 = __p;
      a3[1] = v88;
      if (v89)
      {
        uint64_t v123 = v89;
        operator delete(v89);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v70 = v94;
      *(void *)(v70 + 16) = 0;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 8) = 0;
      *(_OWORD *)(v70 + 8) = *(_OWORD *)v95;
      *(void *)(v70 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v71 = v99;
      long long v72 = v97;
      *(_OWORD *)(v70 + 48) = v98;
      *(_OWORD *)(v70 + 64) = v71;
      *(_OWORD *)(v70 + 32) = v72;
      uint64_t v73 = v102;
      long long v74 = v101;
      *(_OWORD *)(v70 + 80) = v100;
      *(_OWORD *)(v70 + 96) = v74;
      *(void *)(v70 + 112) = v73;
      *(void *)(v70 + 120) = 0;
      *(void *)(v70 + 128) = 0;
      *(void *)(v70 + 136) = 0;
      *(_OWORD *)(v70 + 120) = *(_OWORD *)v103;
      *(void *)(v70 + 136) = v104;
      *(void *)(v70 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v70 + 152) = 0;
      *(void *)(v70 + 160) = 0;
      *(_OWORD *)(v70 + 144) = *(_OWORD *)v105;
      *(void *)(v70 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v70 + 168) = v107;
      *(_DWORD *)(v70 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v70 + 184) = v108;
      }
      *(_OWORD *)(v70 + 200) = v110;
      long long v75 = v111;
      uint64_t v76 = v113;
      *(_OWORD *)(v70 + 232) = v112;
      *(_OWORD *)(v70 + 216) = v75;
      *(void *)(v70 + 248) = v76;
      *(void *)(v70 + 256) = 0;
      *(void *)(v70 + 264) = 0;
      *(void *)(v70 + 272) = 0;
      *(_OWORD *)(v70 + 256) = *(_OWORD *)v114;
      *(void *)(v70 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v70 + 280) = v116;
      *(void *)(v70 + 288) = 0;
      *(void *)(v70 + 296) = 0;
      *(void *)(v70 + 304) = 0;
      *(_OWORD *)(v70 + 288) = *(_OWORD *)v117;
      *(void *)(v70 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v77 = *(_OWORD *)v119;
      *(_OWORD *)(v70 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v70 + 312) = v77;
      long long v78 = v120;
      *(_DWORD *)(v70 + 356) = v121;
      *(_OWORD *)(v70 + 340) = v78;
      *(void *)(v70 + 360) = 0;
      *(void *)(v70 + 368) = 0;
      *(void *)(v70 + 376) = 0;
      *(void *)(v70 + 360) = __p;
      *(void *)(v70 + 368) = v123;
      *(void *)(v70 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v79 = v125;
      *(_DWORD *)(v70 + 400) = v126;
      *(_OWORD *)(v70 + 384) = v79;
      a3[1] = v70 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v90 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v91 = (void **)v114[1];
      unint64_t v92 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v91 = sub_4F31D0(v91 - 13);
        while (v91 != v90);
        unint64_t v92 = v114[0];
      }
      v114[1] = v90;
      operator delete(v92);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v93 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v93 = (void *)sub_4D4B58((uint64_t)v93 - 160);
        while (v93 != v85);
        goto LABEL_111;
      }
LABEL_112:
      v95[1] = v85;
      operator delete(v87);
    }
  }
}

void sub_7E8928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_639B78(&a9);
  sub_591DFC(v9);
  _Unwind_Resume(a1);
}

void sub_7E8968(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E897C(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E8990(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E89A4(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7E89B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2180))
  {
    sub_804ED4(a1 + 8, (uint64_t)&v9);
    sub_7C43EC(a2, &v9, 0);
    sub_63841C(a2, 2);
    uint64_t v3 = v12;
    if (v12)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        sub_4F4B48((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5) {
      operator delete(v5);
    }
    unint64_t v6 = (void **)v9;
    if (v9)
    {
      long long v7 = v10;
      long long v8 = v9;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        long long v8 = v9;
      }
      long long v10 = v6;
      operator delete(v8);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7E8B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8(v2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E8B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E8B48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_8089D4(a1 + 8, (uint64_t)&v14);
  sub_7C47A4(a2, (uint64_t)&v14);
  uint64_t v4 = nullsub_1(&v14);
  sub_638D90(a2, v4);
  sub_63841C(a2, 3);
  sub_5F3D48((uint64_t)v13, (uint64_t)&qword_25C2620);
  char v12 = 1;
  sub_5F6090(v13, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v12);
  sub_638E74(a2, (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  uint64_t v5 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = v17;
  if (v17)
  {
    do
    {
      long long v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  long long v8 = v16;
  uint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = v14;
  if (v14)
  {
    long long v10 = v15;
    long long v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      long long v11 = v14;
    }
    long long v15 = v9;
    operator delete(v11);
  }
}

void sub_7E8CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4F31D0((void **)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_7E8CE8(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4F31D0((void **)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_7E8D1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_809D84((uint64_t)&v17);
    sub_639258(a2, (uint64_t)&v17, 0, 0, 1);
    sub_63841C(a2, 42);
    sub_638448(a2, *(void *)(a1 + 2152));
    uint64_t v4 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = v20;
    if (v20)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        sub_4F4B48((uint64_t)(v5 + 2));
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    long long v7 = __p;
    std::string __p = 0;
    if (v7) {
      operator delete(v7);
    }
    long long v8 = (void **)v17;
    if (v17)
    {
      uint64_t v9 = v18;
      long long v10 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v9 - 1) < 0) {
            operator delete(*(v9 - 3));
          }
          v9 -= 3;
        }
        while (v9 != v8);
        long long v10 = v17;
      }
      int v18 = v8;
      operator delete(v10);
    }
  }
  else
  {
    *(void *)(a2 + 400) = 0;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)a2 = -1;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    int64x2_t v11 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 56) = 0x7FFFFFFF;
    *(int64x2_t *)(a2 + 64) = v11;
    *(_DWORD *)(a2 + 80) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 88) = 0x7FFFFFFF;
    *(void *)(a2 + 92) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a2 + 112) = 0x8000000080000000;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(unsigned char *)(a2 + 168) = 0;
    *(void *)(a2 + 172) = 0x8000000080000000;
    *(_DWORD *)(a2 + 180) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 192) = -1;
    *(void *)(a2 + 208) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 216) = 0x7FFFFFFF;
    *(void *)(a2 + 220) = 0x7FFFFFFF7FFFFFFFLL;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a2 + 240) = _Q1;
    *(_OWORD *)(a2 + 256) = 0u;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 280) = 1;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    *(_WORD *)(a2 + 312) = 0;
    *(_DWORD *)(a2 + 316) = -1;
    *(void *)(a2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 340) = -1;
    *(void *)(a2 + 344) = -1;
    *(_DWORD *)(a2 + 356) = 1;
    *(_DWORD *)(a2 + 384) = 0;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 388) = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)(a2 + 400) = -1;
  }
}

void sub_7E8F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E8F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E8F88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_809E70(a1 + 8, (uint64_t *)&v11);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 29);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7E90B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E90C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E90E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_80A094(a1 + 8);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 31);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7E9210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E9224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E9240(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_80A0B8(a1 + 8, 1, (uint64_t)&v10);
  sub_639258(a2, (uint64_t)&v10, 0, 0, 1);
  sub_63841C(a2, 44);
  uint64_t v3 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v13;
  if (v13)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v10;
  if (v10)
  {
    long long v8 = v11;
    uint64_t v9 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v10;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7E9360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E937C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E9390(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_80A320(a1 + 8, a2, a3, (uint64_t)&__p);
  sub_6393C8(a4, (uint64_t *)&__p, 0, 0, 1);
  sub_639724(a4);
  sub_63841C(a4, 44);
  sub_638458(a4, *(void *)(*(void *)(a2 + 1064) + 2400 * a3 + 872));
  long long v7 = (void **)__p;
  if (__p)
  {
    long long v8 = v11;
    uint64_t v9 = __p;
    if (v11 != __p)
    {
      do
        long long v8 = sub_4F31D0(v8 - 13);
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7E9450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E9464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_7E9480(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2179)) {
    return 0;
  }
  uint64_t v1 = 112;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v1 = 120;
  }
  uint64_t v2 = 96;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v2 = 104;
  }
  if (*(unsigned char *)(a1 + 2176)) {
    uint64_t v1 = v2;
  }
  return *(void *)(a1 + 2152) >= *(void *)(*(void *)(a1 + 2160) + v1);
}

uint64_t sub_7E94D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  *(void *)a1 = &off_2439DD8;
  sub_8101CC(a1 + 8, a2, a3, a4, a5, a6);
  *(void *)(a1 + 2152) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2160) = a2;
  *(void *)(a1 + 2168) = a3;
  *(_WORD *)(a1 + 2180) = 0;
  *(unsigned char *)(a1 + 2182) = 0;
  *(void *)(a1 + 2192) = a5;
  uint64_t v11 = *(void *)(a4 + 1064);
  uint64_t v12 = v11 + 2400 * a5;
  *(_DWORD *)(a1 + 2144) = *(_DWORD *)(v12 + 160);
  *(void *)(a1 + 2152) = *(void *)(v12 + 872);
  *(unsigned char *)(a1 + 2176) = *(unsigned char *)(a3 + 1064);
  *(unsigned char *)(a1 + 2177) = *(unsigned char *)(v12 + 893);
  int v13 = *(unsigned __int8 *)(v12 + 328);
  if (v13 == 5) {
    int v13 = *(unsigned __int8 *)(a3 + 1176);
  }
  *(unsigned char *)(a1 + 2178) = v13;
  if (v13) {
    BOOL v14 = v13 == 3;
  }
  else {
    BOOL v14 = 1;
  }
  char v15 = v14;
  *(unsigned char *)(a1 + 2179) = v15;
  BOOL v16 = sub_6F2FD8(v12 + 712);
  BOOL v17 = *(void *)(v11 + 2400 * a5 + 864) != 0x7FFFFFFFFFFFFFFFLL && v16;
  *(unsigned char *)(a1 + 2180) = v17;
  *(unsigned char *)(a1 + 2181) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  *(unsigned char *)(a1 + 2182) = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t))a1)(a1, a4, a5);
  uint64_t v18 = v11 + 2400 * a5;
  *(unsigned char *)(a1 + 2183) = *(unsigned char *)(v18 + 895);
  *(unsigned char *)(a1 + 2184) = *(unsigned char *)(v18 + 320);
  return a1;
}

void sub_7E9650(_Unwind_Exception *a1)
{
  sub_5322CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7E9664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_7E94D4(a1, a2, a3, a4, a5, a6);
}

BOOL sub_7E966C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 1064);
  if (0x2FC962FC962FC963 * ((*(void *)(a2 + 1072) - v3) >> 5) - 1 == a3) {
    return 0;
  }
  uint64_t v7 = v3 + 2400 * a3;
  int v10 = *(_DWORD *)(v7 + 160);
  uint64_t v9 = (int *)(v7 + 160);
  int v8 = v10;
  if (v10 == 16
    || (*(unsigned char *)(v3 + 2400 * a3 + 648) || *(unsigned char *)(v3 + 2400 * a3 + 649) || *(unsigned char *)(v3 + 2400 * a3 + 650))
    && *(unsigned char *)(v3 + 2400 * a3 + 304))
  {
    return 0;
  }
  unsigned int v11 = *(unsigned __int8 *)(v3 + 2400 * a3 + 328);
  uint64_t v4 = 1;
  BOOL v12 = v11 > 5;
  int v13 = (1 << v11) & 0x34;
  if (!v12 && v13 != 0) {
    return v4;
  }
  uint64_t v15 = a3 + 1;
  unsigned int v16 = *(unsigned __int8 *)(v3 + 2400 * (a3 + 1) + 328);
  if (v16 <= 5)
  {
    uint64_t v4 = 1;
    if (((1 << v16) & 0x34) != 0) {
      return v4;
    }
  }
  uint64_t v4 = 0;
  if ((v8 - 85) > 0xFFFFFFFC || *(unsigned char *)(v3 + 2400 * v15 + 2225)) {
    return v4;
  }
  BOOL v17 = *(void **)(a1 + 2160);
  uint64_t v18 = *(unsigned char *)(v3 + 2400 * a3 + 893) ? v17[6] : sub_62CC54(v17, *(_DWORD *)(v3 + 2400 * a3 + 1860));
  if (*(void *)(v3 + 2400 * v15 + 872) > v18) {
    return 0;
  }
  int v19 = *v9;
  if ((*v9 - 60) > 0xFFFFFFEC || *(unsigned char *)(v3 + 2400 * a3 + 2226))
  {
    uint64_t v4 = 0;
    uint64_t v20 = v3 + 2400 * v15;
    if ((*(_DWORD *)(v20 + 160) - 60) > 0xFFFFFFEC || *(unsigned char *)(v20 + 2226)) {
      return v4;
    }
  }
  if ((v19 - 22) > 2)
  {
    if ((v19 - 91) <= 2 && (*(_DWORD *)(v3 + 2400 * v15 + 160) - 91) < 3) {
      return 0;
    }
  }
  else if ((*(_DWORD *)(v3 + 2400 * v15 + 160) - 22) < 3)
  {
    return 0;
  }
  return v19 != 16;
}

uint64_t sub_7E98A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 2144);
  if (v3 == 85 || v3 == 17 && !*(unsigned char *)(*(void *)(a1 + 2160) + 2016))
  {
    bzero(a2, 0x330uLL);
    return sub_5A9D64((uint64_t)a2);
  }
  else
  {
    sub_810F68(a1 + 8, (uint64_t)&v20);
    sub_638DFC(a2, &v20);
    uint64_t v5 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    unint64_t v6 = v23;
    if (v23)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        sub_4F4B48((uint64_t)(v6 + 2));
        operator delete(v6);
        unint64_t v6 = v7;
      }
      while (v7);
    }
    int v8 = __p;
    std::string __p = 0;
    if (v8) {
      operator delete(v8);
    }
    uint64_t v9 = (void **)v20;
    if (v20)
    {
      int v10 = v21;
      unsigned int v11 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 3;
        }
        while (v10 != v9);
        unsigned int v11 = v20;
      }
      long long v21 = v9;
      operator delete(v11);
    }
    sub_810E3C((uint64_t)&v20);
    sub_638E00((uint64_t)a2, (uint64_t)&v20);
    int v13 = v23;
    if (v23)
    {
      do
      {
        BOOL v14 = (void *)*v13;
        sub_4F4B48((uint64_t)(v13 + 2));
        operator delete(v13);
        int v13 = v14;
      }
      while (v14);
    }
    uint64_t v15 = __p;
    std::string __p = 0;
    if (v15) {
      operator delete(v15);
    }
    unsigned int v16 = (void **)v20;
    if (v20)
    {
      BOOL v17 = v21;
      uint64_t v18 = v20;
      if (v21 != v20)
      {
        do
        {
          if (*((char *)v17 - 1) < 0) {
            operator delete(*(v17 - 3));
          }
          v17 -= 3;
        }
        while (v17 != v16);
        uint64_t v18 = v20;
      }
      long long v21 = v16;
      operator delete(v18);
    }
    sub_638448((uint64_t)a2, *(void *)(a1 + 2152));
    sub_63841C((uint64_t)a2, 25);
    sub_5F3D48((uint64_t)&v20, (uint64_t)&qword_25C2620);
    char v19 = 1;
    sub_5F6090((uint64_t *)&v20, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v19);
    sub_638E74((uint64_t)a2, (uint64_t)&v20);
    return sub_4D4B58((uint64_t)&v20);
  }
}

void sub_7E9B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4B58((uint64_t)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E9B28(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4D4880((void **)va);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7E9B58(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7E9B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7E9B80(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void *sub_7E9B94@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1[2180])
  {
    (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 32))(v14, a1);
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= *(void *)(a2 + 16))
    {
      unint64_t v6 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v4, (uint64_t)v14);
      unint64_t v6 = (void *)(v5 + 1080);
    }
    *(void *)(a2 + 8) = v6;
    sub_52F1E8((uint64_t)v14);
  }
  if (a1[2181])
  {
    sub_7E9D6C((uint64_t)a1, (uint64_t)v14);
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >= *(void *)(a2 + 16))
    {
      uint64_t v9 = sub_7576B4((void **)a2, (uint64_t)v14);
    }
    else
    {
      sub_7574DC(v7, (uint64_t)v14);
      uint64_t v9 = (void *)(v8 + 1080);
    }
    *(void *)(a2 + 8) = v9;
    sub_52F1E8((uint64_t)v14);
  }
  (*(void (**)(void *__return_ptr, unsigned char *))(*(void *)a1 + 40))(v14, a1);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v10 >= *(void *)(a2 + 16))
  {
    BOOL v12 = sub_7576B4((void **)a2, (uint64_t)v14);
  }
  else
  {
    sub_7574DC(v10, (uint64_t)v14);
    BOOL v12 = (void *)(v11 + 1080);
  }
  *(void *)(a2 + 8) = v12;
  return sub_52F1E8((uint64_t)v14);
}

void sub_7E9D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_52F1E8((uint64_t)&a9);
  sub_591E78(v9);
  _Unwind_Resume(a1);
}

void sub_7E9D30(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E9D44(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E9D58(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_7E9D6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_814A68((uint64_t)&v12);
    sub_7C44F4(a2, &v12, *(unsigned __int8 *)(*(void *)(a1 + 2160) + 418), 3);
    sub_63841C(a2, 1);
    sub_5F3D48((uint64_t)v11, (uint64_t)&qword_25C2620);
    char v10 = 1;
    sub_5F6090(v11, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v10);
    sub_638E74(a2, (uint64_t)v11);
    sub_4D4B58((uint64_t)v11);
    unint64_t v4 = v15;
    if (v15)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    unint64_t v6 = v14;
    BOOL v14 = 0;
    if (v6) {
      operator delete(v6);
    }
    unint64_t v7 = v12;
    if (v12)
    {
      uint64_t v8 = v13;
      uint64_t v9 = v12;
      if (v13 != v12)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = v12;
      }
      int v13 = v7;
      operator delete(v9);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7E9F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4D4880((void **)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_7E9F54(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4D4880((void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_7E9F74(_Unwind_Exception *a1)
{
  sub_4D4880((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_7E9F88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(unsigned char *)(a1 + 2181))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v94, a1);
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v16 = sub_757E08(a3, (uint64_t)&v94);
      BOOL v17 = __p;
      a3[1] = v16;
      if (v17)
      {
        uint64_t v123 = v17;
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v6 = v94;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 8) = 0;
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v95;
      *(void *)(v6 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v7 = v99;
      long long v8 = v97;
      *(_OWORD *)(v6 + 48) = v98;
      *(_OWORD *)(v6 + 64) = v7;
      *(_OWORD *)(v6 + 32) = v8;
      uint64_t v9 = v102;
      long long v10 = v101;
      *(_OWORD *)(v6 + 80) = v100;
      *(_OWORD *)(v6 + 96) = v10;
      *(void *)(v6 + 112) = v9;
      *(void *)(v6 + 120) = 0;
      *(void *)(v6 + 128) = 0;
      *(void *)(v6 + 136) = 0;
      *(_OWORD *)(v6 + 120) = *(_OWORD *)v103;
      *(void *)(v6 + 136) = v104;
      *(void *)(v6 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v6 + 152) = 0;
      *(void *)(v6 + 160) = 0;
      *(_OWORD *)(v6 + 144) = *(_OWORD *)v105;
      *(void *)(v6 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v6 + 168) = v107;
      *(_DWORD *)(v6 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v6 + 184) = v108;
      }
      *(_OWORD *)(v6 + 200) = v110;
      long long v11 = v111;
      uint64_t v12 = v113;
      *(_OWORD *)(v6 + 232) = v112;
      *(_OWORD *)(v6 + 216) = v11;
      *(void *)(v6 + 248) = v12;
      *(void *)(v6 + 256) = 0;
      *(void *)(v6 + 264) = 0;
      *(void *)(v6 + 272) = 0;
      *(_OWORD *)(v6 + 256) = *(_OWORD *)v114;
      *(void *)(v6 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v6 + 280) = v116;
      *(void *)(v6 + 288) = 0;
      *(void *)(v6 + 296) = 0;
      *(void *)(v6 + 304) = 0;
      *(_OWORD *)(v6 + 288) = *(_OWORD *)v117;
      *(void *)(v6 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v13 = *(_OWORD *)v119;
      *(_OWORD *)(v6 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v6 + 312) = v13;
      long long v14 = v120;
      *(_DWORD *)(v6 + 356) = v121;
      *(_OWORD *)(v6 + 340) = v14;
      *(void *)(v6 + 360) = 0;
      *(void *)(v6 + 368) = 0;
      *(void *)(v6 + 376) = 0;
      *(void *)(v6 + 360) = __p;
      *(void *)(v6 + 368) = v123;
      *(void *)(v6 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v15 = v125;
      *(_DWORD *)(v6 + 400) = v126;
      *(_OWORD *)(v6 + 384) = v15;
      a3[1] = v6 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v18 = (void **)v114[0];
    if (v114[0])
    {
      char v19 = (void **)v114[1];
      uint64_t v20 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          char v19 = sub_4F31D0(v19 - 13);
        while (v19 != v18);
        uint64_t v20 = v114[0];
      }
      v114[1] = v18;
      operator delete(v20);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v21 = v95[0];
    if (v95[0])
    {
      long long v22 = v95[1];
      long long v23 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v22 = (void *)sub_4D4B58((uint64_t)v22 - 160);
        while (v22 != v21);
        long long v23 = v95[0];
      }
      v95[1] = v21;
      operator delete(v23);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 56))(&v94, a1);
  unint64_t v24 = a3[1];
  if (v24 >= a3[2])
  {
    uint64_t v34 = sub_757E08(a3, (uint64_t)&v94);
    long long v35 = __p;
    a3[1] = v34;
    if (v35)
    {
      uint64_t v123 = v35;
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v24 = v94;
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(void *)(v24 + 8) = 0;
    *(_OWORD *)(v24 + 8) = *(_OWORD *)v95;
    *(void *)(v24 + 24) = v96;
    v95[0] = 0;
    v95[1] = 0;
    long long v25 = v99;
    long long v26 = v97;
    *(_OWORD *)(v24 + 48) = v98;
    *(_OWORD *)(v24 + 64) = v25;
    *(_OWORD *)(v24 + 32) = v26;
    uint64_t v27 = v102;
    long long v28 = v101;
    *(_OWORD *)(v24 + 80) = v100;
    *(_OWORD *)(v24 + 96) = v28;
    *(void *)(v24 + 112) = v27;
    *(void *)(v24 + 120) = 0;
    *(void *)(v24 + 128) = 0;
    *(void *)(v24 + 136) = 0;
    *(_OWORD *)(v24 + 120) = *(_OWORD *)v103;
    *(void *)(v24 + 136) = v104;
    *(void *)(v24 + 144) = 0;
    uint64_t v96 = 0;
    v103[0] = 0;
    v103[1] = 0;
    *(void *)(v24 + 152) = 0;
    *(void *)(v24 + 160) = 0;
    *(_OWORD *)(v24 + 144) = *(_OWORD *)v105;
    *(void *)(v24 + 160) = v106;
    v105[1] = 0;
    uint64_t v106 = 0;
    uint64_t v104 = 0;
    v105[0] = 0;
    *(_OWORD *)(v24 + 168) = v107;
    *(_DWORD *)(v24 + 192) = v109;
    if (v109 <= 1) {
      *(void *)(v24 + 184) = v108;
    }
    *(_OWORD *)(v24 + 200) = v110;
    long long v29 = v111;
    uint64_t v30 = v113;
    *(_OWORD *)(v24 + 232) = v112;
    *(_OWORD *)(v24 + 216) = v29;
    *(void *)(v24 + 248) = v30;
    *(void *)(v24 + 256) = 0;
    *(void *)(v24 + 264) = 0;
    *(void *)(v24 + 272) = 0;
    *(_OWORD *)(v24 + 256) = *(_OWORD *)v114;
    *(void *)(v24 + 272) = v115;
    v114[0] = 0;
    v114[1] = 0;
    *(unsigned char *)(v24 + 280) = v116;
    *(void *)(v24 + 288) = 0;
    *(void *)(v24 + 296) = 0;
    *(void *)(v24 + 304) = 0;
    *(_OWORD *)(v24 + 288) = *(_OWORD *)v117;
    *(void *)(v24 + 304) = v118;
    uint64_t v115 = 0;
    v117[0] = 0;
    v117[1] = 0;
    uint64_t v118 = 0;
    long long v31 = *(_OWORD *)v119;
    *(_OWORD *)(v24 + 321) = *(_OWORD *)&v119[9];
    *(_OWORD *)(v24 + 312) = v31;
    long long v32 = v120;
    *(_DWORD *)(v24 + 356) = v121;
    *(_OWORD *)(v24 + 340) = v32;
    *(void *)(v24 + 360) = 0;
    *(void *)(v24 + 368) = 0;
    *(void *)(v24 + 376) = 0;
    *(void *)(v24 + 360) = __p;
    *(void *)(v24 + 368) = v123;
    *(void *)(v24 + 376) = v124;
    std::string __p = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    long long v33 = v125;
    *(_DWORD *)(v24 + 400) = v126;
    *(_OWORD *)(v24 + 384) = v33;
    a3[1] = v24 + 408;
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  long long v36 = (void **)v114[0];
  if (v114[0])
  {
    long long v37 = (void **)v114[1];
    long long v38 = v114[0];
    if (v114[1] != v114[0])
    {
      do
        long long v37 = sub_4F31D0(v37 - 13);
      while (v37 != v36);
      long long v38 = v114[0];
    }
    v114[1] = v36;
    operator delete(v38);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  unint64_t v39 = v95[0];
  if (v95[0])
  {
    uint64_t v40 = v95[1];
    long long v41 = v95[0];
    if (v95[1] != v95[0])
    {
      do
        uint64_t v40 = (void *)sub_4D4B58((uint64_t)v40 - 160);
      while (v40 != v39);
      long long v41 = v95[0];
    }
    v95[1] = v39;
    operator delete(v41);
  }
  if (*(unsigned char *)(a1 + 2179))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v94, a1);
    unint64_t v42 = a3[1];
    if (v42 >= a3[2])
    {
      uint64_t v52 = sub_757E08(a3, (uint64_t)&v94);
      long long v53 = __p;
      a3[1] = v52;
      if (v53)
      {
        uint64_t v123 = v53;
        operator delete(v53);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v42 = v94;
      *(void *)(v42 + 16) = 0;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 8) = 0;
      *(_OWORD *)(v42 + 8) = *(_OWORD *)v95;
      *(void *)(v42 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v43 = v99;
      long long v44 = v97;
      *(_OWORD *)(v42 + 48) = v98;
      *(_OWORD *)(v42 + 64) = v43;
      *(_OWORD *)(v42 + 32) = v44;
      uint64_t v45 = v102;
      long long v46 = v101;
      *(_OWORD *)(v42 + 80) = v100;
      *(_OWORD *)(v42 + 96) = v46;
      *(void *)(v42 + 112) = v45;
      *(void *)(v42 + 120) = 0;
      *(void *)(v42 + 128) = 0;
      *(void *)(v42 + 136) = 0;
      *(_OWORD *)(v42 + 120) = *(_OWORD *)v103;
      *(void *)(v42 + 136) = v104;
      *(void *)(v42 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v42 + 152) = 0;
      *(void *)(v42 + 160) = 0;
      *(_OWORD *)(v42 + 144) = *(_OWORD *)v105;
      *(void *)(v42 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v42 + 168) = v107;
      *(_DWORD *)(v42 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v42 + 184) = v108;
      }
      *(_OWORD *)(v42 + 200) = v110;
      long long v47 = v111;
      uint64_t v48 = v113;
      *(_OWORD *)(v42 + 232) = v112;
      *(_OWORD *)(v42 + 216) = v47;
      *(void *)(v42 + 248) = v48;
      *(void *)(v42 + 256) = 0;
      *(void *)(v42 + 264) = 0;
      *(void *)(v42 + 272) = 0;
      *(_OWORD *)(v42 + 256) = *(_OWORD *)v114;
      *(void *)(v42 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v42 + 280) = v116;
      *(void *)(v42 + 288) = 0;
      *(void *)(v42 + 296) = 0;
      *(void *)(v42 + 304) = 0;
      *(_OWORD *)(v42 + 288) = *(_OWORD *)v117;
      *(void *)(v42 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v49 = *(_OWORD *)v119;
      *(_OWORD *)(v42 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v42 + 312) = v49;
      long long v50 = v120;
      *(_DWORD *)(v42 + 356) = v121;
      *(_OWORD *)(v42 + 340) = v50;
      *(void *)(v42 + 360) = 0;
      *(void *)(v42 + 368) = 0;
      *(void *)(v42 + 376) = 0;
      *(void *)(v42 + 360) = __p;
      *(void *)(v42 + 368) = v123;
      *(void *)(v42 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v51 = v125;
      *(_DWORD *)(v42 + 400) = v126;
      *(_OWORD *)(v42 + 384) = v51;
      a3[1] = v42 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v54 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v55 = (void **)v114[1];
      uint64_t v56 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v55 = sub_4F31D0(v55 - 13);
        while (v55 != v54);
        uint64_t v56 = v114[0];
      }
      v114[1] = v54;
      operator delete(v56);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    long long v57 = v95[0];
    if (v95[0])
    {
      long long v58 = v95[1];
      long long v59 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          long long v58 = (void *)sub_4D4B58((uint64_t)v58 - 160);
        while (v58 != v57);
        long long v59 = v95[0];
      }
      v95[1] = v57;
      operator delete(v59);
    }
  }
  if (*(unsigned char *)(a1 + 2182))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(&v94, a1, a2, *(void *)(a1 + 2192) + 1);
    unint64_t v60 = a3[1];
    if (v60 >= a3[2])
    {
      uint64_t v80 = sub_757E08(a3, (uint64_t)&v94);
      uint64_t v81 = __p;
      a3[1] = v80;
      if (v81)
      {
        uint64_t v123 = v81;
        operator delete(v81);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v60 = v94;
      *(void *)(v60 + 16) = 0;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 8) = 0;
      *(_OWORD *)(v60 + 8) = *(_OWORD *)v95;
      *(void *)(v60 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v61 = v99;
      long long v62 = v97;
      *(_OWORD *)(v60 + 48) = v98;
      *(_OWORD *)(v60 + 64) = v61;
      *(_OWORD *)(v60 + 32) = v62;
      uint64_t v63 = v102;
      long long v64 = v101;
      *(_OWORD *)(v60 + 80) = v100;
      *(_OWORD *)(v60 + 96) = v64;
      *(void *)(v60 + 112) = v63;
      *(void *)(v60 + 120) = 0;
      *(void *)(v60 + 128) = 0;
      *(void *)(v60 + 136) = 0;
      *(_OWORD *)(v60 + 120) = *(_OWORD *)v103;
      *(void *)(v60 + 136) = v104;
      *(void *)(v60 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v60 + 152) = 0;
      *(void *)(v60 + 160) = 0;
      *(_OWORD *)(v60 + 144) = *(_OWORD *)v105;
      *(void *)(v60 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v60 + 168) = v107;
      *(_DWORD *)(v60 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v60 + 184) = v108;
      }
      *(_OWORD *)(v60 + 200) = v110;
      long long v65 = v111;
      uint64_t v66 = v113;
      *(_OWORD *)(v60 + 232) = v112;
      *(_OWORD *)(v60 + 216) = v65;
      *(void *)(v60 + 248) = v66;
      *(void *)(v60 + 256) = 0;
      *(void *)(v60 + 264) = 0;
      *(void *)(v60 + 272) = 0;
      *(_OWORD *)(v60 + 256) = *(_OWORD *)v114;
      *(void *)(v60 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v60 + 280) = v116;
      *(void *)(v60 + 288) = 0;
      *(void *)(v60 + 296) = 0;
      *(void *)(v60 + 304) = 0;
      *(_OWORD *)(v60 + 288) = *(_OWORD *)v117;
      *(void *)(v60 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v67 = *(_OWORD *)v119;
      *(_OWORD *)(v60 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v60 + 312) = v67;
      long long v68 = v120;
      *(_DWORD *)(v60 + 356) = v121;
      *(_OWORD *)(v60 + 340) = v68;
      *(void *)(v60 + 360) = 0;
      *(void *)(v60 + 368) = 0;
      *(void *)(v60 + 376) = 0;
      *(void *)(v60 + 360) = __p;
      *(void *)(v60 + 368) = v123;
      *(void *)(v60 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v69 = v125;
      *(_DWORD *)(v60 + 400) = v126;
      *(_OWORD *)(v60 + 384) = v69;
      a3[1] = v60 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    int v82 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v83 = (void **)v114[1];
      int v84 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v83 = sub_4F31D0(v83 - 13);
        while (v83 != v82);
        int v84 = v114[0];
      }
      v114[1] = v82;
      operator delete(v84);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v86 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v86 = (void *)sub_4D4B58((uint64_t)v86 - 160);
        while (v86 != v85);
LABEL_111:
        int v87 = v95[0];
        goto LABEL_112;
      }
      goto LABEL_112;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v94, a1);
    unint64_t v70 = a3[1];
    if (v70 >= a3[2])
    {
      uint64_t v88 = sub_757E08(a3, (uint64_t)&v94);
      unint64_t v89 = __p;
      a3[1] = v88;
      if (v89)
      {
        uint64_t v123 = v89;
        operator delete(v89);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v70 = v94;
      *(void *)(v70 + 16) = 0;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 8) = 0;
      *(_OWORD *)(v70 + 8) = *(_OWORD *)v95;
      *(void *)(v70 + 24) = v96;
      v95[0] = 0;
      v95[1] = 0;
      long long v71 = v99;
      long long v72 = v97;
      *(_OWORD *)(v70 + 48) = v98;
      *(_OWORD *)(v70 + 64) = v71;
      *(_OWORD *)(v70 + 32) = v72;
      uint64_t v73 = v102;
      long long v74 = v101;
      *(_OWORD *)(v70 + 80) = v100;
      *(_OWORD *)(v70 + 96) = v74;
      *(void *)(v70 + 112) = v73;
      *(void *)(v70 + 120) = 0;
      *(void *)(v70 + 128) = 0;
      *(void *)(v70 + 136) = 0;
      *(_OWORD *)(v70 + 120) = *(_OWORD *)v103;
      *(void *)(v70 + 136) = v104;
      *(void *)(v70 + 144) = 0;
      uint64_t v96 = 0;
      v103[0] = 0;
      v103[1] = 0;
      *(void *)(v70 + 152) = 0;
      *(void *)(v70 + 160) = 0;
      *(_OWORD *)(v70 + 144) = *(_OWORD *)v105;
      *(void *)(v70 + 160) = v106;
      v105[1] = 0;
      uint64_t v106 = 0;
      uint64_t v104 = 0;
      v105[0] = 0;
      *(_OWORD *)(v70 + 168) = v107;
      *(_DWORD *)(v70 + 192) = v109;
      if (v109 <= 1) {
        *(void *)(v70 + 184) = v108;
      }
      *(_OWORD *)(v70 + 200) = v110;
      long long v75 = v111;
      uint64_t v76 = v113;
      *(_OWORD *)(v70 + 232) = v112;
      *(_OWORD *)(v70 + 216) = v75;
      *(void *)(v70 + 248) = v76;
      *(void *)(v70 + 256) = 0;
      *(void *)(v70 + 264) = 0;
      *(void *)(v70 + 272) = 0;
      *(_OWORD *)(v70 + 256) = *(_OWORD *)v114;
      *(void *)(v70 + 272) = v115;
      v114[0] = 0;
      v114[1] = 0;
      *(unsigned char *)(v70 + 280) = v116;
      *(void *)(v70 + 288) = 0;
      *(void *)(v70 + 296) = 0;
      *(void *)(v70 + 304) = 0;
      *(_OWORD *)(v70 + 288) = *(_OWORD *)v117;
      *(void *)(v70 + 304) = v118;
      uint64_t v115 = 0;
      v117[0] = 0;
      v117[1] = 0;
      uint64_t v118 = 0;
      long long v77 = *(_OWORD *)v119;
      *(_OWORD *)(v70 + 321) = *(_OWORD *)&v119[9];
      *(_OWORD *)(v70 + 312) = v77;
      long long v78 = v120;
      *(_DWORD *)(v70 + 356) = v121;
      *(_OWORD *)(v70 + 340) = v78;
      *(void *)(v70 + 360) = 0;
      *(void *)(v70 + 368) = 0;
      *(void *)(v70 + 376) = 0;
      *(void *)(v70 + 360) = __p;
      *(void *)(v70 + 368) = v123;
      *(void *)(v70 + 376) = v124;
      std::string __p = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      long long v79 = v125;
      *(_DWORD *)(v70 + 400) = v126;
      *(_OWORD *)(v70 + 384) = v79;
      a3[1] = v70 + 408;
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    uint64_t v90 = (void **)v114[0];
    if (v114[0])
    {
      uint64_t v91 = (void **)v114[1];
      unint64_t v92 = v114[0];
      if (v114[1] != v114[0])
      {
        do
          uint64_t v91 = sub_4F31D0(v91 - 13);
        while (v91 != v90);
        unint64_t v92 = v114[0];
      }
      v114[1] = v90;
      operator delete(v92);
    }
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    uint64_t v85 = v95[0];
    if (v95[0])
    {
      uint64_t v93 = v95[1];
      int v87 = v95[0];
      if (v95[1] != v95[0])
      {
        do
          uint64_t v93 = (void *)sub_4D4B58((uint64_t)v93 - 160);
        while (v93 != v85);
        goto LABEL_111;
      }
LABEL_112:
      v95[1] = v85;
      operator delete(v87);
    }
  }
}

void sub_7EAC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_639B78(&a9);
  sub_591DFC(v9);
  _Unwind_Resume(a1);
}

void sub_7EACB4(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7EACC8(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7EACDC(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7EACF0(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_7EAD04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2180))
  {
    sub_8110B0(a1 + 8, (uint64_t)&v9);
    sub_7C43EC(a2, &v9, 0);
    sub_63841C(a2, 2);
    uint64_t v3 = v12;
    if (v12)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        sub_4F4B48((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5) {
      operator delete(v5);
    }
    unint64_t v6 = (void **)v9;
    if (v9)
    {
      long long v7 = v10;
      long long v8 = v9;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v7 - 1) < 0) {
            operator delete(*(v7 - 3));
          }
          v7 -= 3;
        }
        while (v7 != v6);
        long long v8 = v9;
      }
      long long v10 = v6;
      operator delete(v8);
    }
  }
  else
  {
    bzero((void *)a2, 0x438uLL);
    sub_5A9D64(a2);
    *(void *)(a2 + 816) = -1;
    *(_DWORD *)(a2 + 824) = 0;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 848) = 0;
    *(void *)(a2 + 840) = 0;
    *(_DWORD *)(a2 + 856) = 0;
    *(unsigned char *)(a2 + 864) = 2;
    *(_DWORD *)(a2 + 872) = -1;
    *(_OWORD *)(a2 + 880) = 0u;
    *(_OWORD *)(a2 + 896) = 0u;
    *(_OWORD *)(a2 + 912) = 0u;
    *(_OWORD *)(a2 + 928) = 0u;
    *(_OWORD *)(a2 + 944) = 0u;
    *(_OWORD *)(a2 + 960) = 0u;
    *(void *)(a2 + 976) = 0;
    *(_DWORD *)(a2 + 984) = 1065353216;
    *(unsigned char *)(a2 + 992) = 1;
    *(_DWORD *)(a2 + 1000) = 0;
    *(_OWORD *)(a2 + 1008) = 0u;
    *(_OWORD *)(a2 + 1024) = 0u;
    *(_OWORD *)(a2 + 1040) = 0u;
    *(void *)(a2 + 1056) = 0;
    *(_DWORD *)(a2 + 1064) = 1065353216;
    *(unsigned char *)(a2 + 1072) = 1;
  }
}

void sub_7EAE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8(v2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EAE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EAE94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_814BB0(a1 + 8, (uint64_t)&v14);
  sub_7C47A4(a2, (uint64_t)&v14);
  uint64_t v4 = nullsub_1(&v14);
  sub_638D90(a2, v4);
  sub_63841C(a2, 3);
  sub_5F3D48((uint64_t)v13, (uint64_t)&qword_25C2620);
  char v12 = 1;
  sub_5F6090(v13, (uint64_t)&qword_25C2620, (uint64_t *)(a1 + 2152), &v12);
  sub_638E74(a2, (uint64_t)v13);
  sub_4D4B58((uint64_t)v13);
  uint64_t v5 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = v17;
  if (v17)
  {
    do
    {
      long long v7 = (void *)*v6;
      sub_4F4B48((uint64_t)(v6 + 2));
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  long long v8 = v16;
  uint64_t v16 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = v14;
  if (v14)
  {
    long long v10 = v15;
    long long v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      long long v11 = v14;
    }
    long long v15 = v9;
    operator delete(v11);
  }
}

void sub_7EB00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  sub_52F1E8(v2);
  sub_4F31D0((void **)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_7EB034(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  sub_4F31D0((void **)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_7EB068(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2181))
  {
    sub_815F60((uint64_t)&v17);
    sub_639258(a2, (uint64_t)&v17, 0, 0, 1);
    sub_63841C(a2, 42);
    sub_638448(a2, *(void *)(a1 + 2152));
    uint64_t v4 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = v20;
    if (v20)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        sub_4F4B48((uint64_t)(v5 + 2));
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    long long v7 = __p;
    std::string __p = 0;
    if (v7) {
      operator delete(v7);
    }
    long long v8 = (void **)v17;
    if (v17)
    {
      uint64_t v9 = v18;
      long long v10 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v9 - 1) < 0) {
            operator delete(*(v9 - 3));
          }
          v9 -= 3;
        }
        while (v9 != v8);
        long long v10 = v17;
      }
      uint64_t v18 = v8;
      operator delete(v10);
    }
  }
  else
  {
    *(void *)(a2 + 400) = 0;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)a2 = -1;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    int64x2_t v11 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 56) = 0x7FFFFFFF;
    *(int64x2_t *)(a2 + 64) = v11;
    *(_DWORD *)(a2 + 80) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 88) = 0x7FFFFFFF;
    *(void *)(a2 + 92) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a2 + 112) = 0x8000000080000000;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(unsigned char *)(a2 + 168) = 0;
    *(void *)(a2 + 172) = 0x8000000080000000;
    *(_DWORD *)(a2 + 180) = 0x7FFFFFFF;
    *(_DWORD *)(a2 + 192) = -1;
    *(void *)(a2 + 208) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 216) = 0x7FFFFFFF;
    *(void *)(a2 + 220) = 0x7FFFFFFF7FFFFFFFLL;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a2 + 240) = _Q1;
    *(_OWORD *)(a2 + 256) = 0u;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a2 + 280) = 1;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    *(_WORD *)(a2 + 312) = 0;
    *(_DWORD *)(a2 + 316) = -1;
    *(void *)(a2 + 328) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a2 + 340) = -1;
    *(void *)(a2 + 344) = -1;
    *(_DWORD *)(a2 + 356) = 1;
    *(_DWORD *)(a2 + 384) = 0;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 388) = 0x7FFFFFFF7FFFFFFFLL;
    *(_DWORD *)(a2 + 400) = -1;
  }
}

void sub_7EB2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB2D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_81604C(a1 + 8, (uint64_t *)&v11);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 29);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7EB400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB430(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_816270(a1 + 8);
  sub_639258(a2, (uint64_t)&v11, 0, 0, 1);
  sub_63841C(a2, 31);
  sub_638448(a2, *(void *)(a1 + 2152));
  uint64_t v4 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v14;
  if (v14)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = __p;
  std::string __p = 0;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (void **)v11;
  if (v11)
  {
    uint64_t v9 = v12;
    long long v10 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v11;
    }
    char v12 = v8;
    operator delete(v10);
  }
}

void sub_7EB55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB58C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_816294(a1 + 8, 1, (uint64_t)&v10);
  sub_639258(a2, (uint64_t)&v10, 0, 0, 1);
  sub_63841C(a2, 44);
  uint64_t v3 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v13;
  if (v13)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v10;
  if (v10)
  {
    long long v8 = v11;
    uint64_t v9 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v10;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7EB6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB6DC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_8164FC(a1 + 8, a2, a3, (uint64_t)&__p);
  sub_6393C8(a4, (uint64_t *)&__p, 0, 0, 1);
  sub_639724(a4);
  sub_63841C(a4, 44);
  sub_638458(a4, *(void *)(*(void *)(a2 + 1064) + 2400 * a3 + 872));
  long long v7 = (void **)__p;
  if (__p)
  {
    long long v8 = v11;
    uint64_t v9 = __p;
    if (v11 != __p)
    {
      do
        long long v8 = sub_4F31D0(v8 - 13);
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    int64x2_t v11 = v7;
    operator delete(v9);
  }
}

void sub_7EB79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7EB7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_5920E0((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_7EB7CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2179)) {
    return 0;
  }
  uint64_t v1 = 112;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v1 = 120;
  }
  uint64_t v2 = 96;
  if (!*(unsigned char *)(a1 + 2177)) {
    uint64_t v2 = 104;
  }
  if (*(unsigned char *)(a1 + 2176)) {
    uint64_t v1 = v2;
  }
  return *(void *)(a1 + 2152) >= *(void *)(*(void *)(a1 + 2160) + v1);
}

double sub_7EB820()
{
  strcpy(&byte_25C0837, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25C0820, "\x1B\\toi=lhp\\"");
  byte_25C084F = 11;
  qword_25C0850 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_25C0858 = xmmword_20B9250;
  strcpy((char *)qword_25C0850, "\x1B\\toi=x-sampa-internal\\"");
  byte_25C087F = 13;
  strcpy((char *)&qword_25C0868, "\x1B\\tn=address\\"");
  strcpy(&byte_25C0897, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25C0880, "\x1B\\tn=nav\\"");
  byte_25C08AF = 12;
  byte_25C08C7 = 7;
  strcpy((char *)&dword_25C08B0, "\x1B\\lang=");
  byte_25C08DF = 1;
  word_25C08C8 = 92;
  byte_25C08F7 = 4;
  strcpy((char *)&qword_25C08E0, "DEV:");
  byte_25C090F = 8;
  strcpy((char *)&qword_25C08F8, "Continue");
  byte_25C0927 = 11;
  strcpy((char *)&qword_25C0910, "Start_Route");
  byte_25C093F = 14;
  strcpy((char *)&qword_25C0928, "Continue_Route");
  byte_25C0957 = 12;
  strcpy((char *)&qword_25C0940, "Resume_Route");
  byte_25C096F = 18;
  strcpy((char *)&xmmword_25C0958, "Start_Route_U_Turn");
  byte_25C0987 = 7;
  strcpy((char *)&dword_25C0970, "_U_Turn");
  qword_25C0998 = 0x1300000000000000;
  qmemcpy(&unk_25C09A0, "Continue_Route", 14);
  dword_25C0990 = 1702131055;
  qword_25C0988 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25C0994 + 3) = 1852994900;
  dword_25C0994 = 1415533919;
  qword_25C09B0 = 0x1500000000000000;
  strcpy(byte_25C09B8, "Left_Turn");
  unk_25C09AE = 1415533919;
  *(_DWORD *)((char *)&qword_25C09B0 + 1) = 1852994900;
  strcpy(&byte_25C09CF, "\tRight_Turn");
  strcpy(&byte_25C09E7, "\nLeft_Turn_At_End");
  byte_25C09FF = 16;
  byte_25C0A17 = 17;
  strcpy((char *)&xmmword_25C0A00, "Right_Turn_At_End");
  byte_25C0A2F = 15;
  strcpy((char *)&qword_25C0A18, "Sharp_Left_Turn");
  byte_25C0A47 = 16;
  strcpy((char *)&xmmword_25C0A30, "Sharp_Right_Turn");
  byte_25C0A5F = 16;
  strcpy((char *)&xmmword_25C0A48, "Slight_Left_Turn");
  byte_25C0A77 = 17;
  strcpy((char *)&xmmword_25C0A60, "Slight_Right_Turn");
  strcpy(&byte_25C0A8F, "\tKeep_Right");
  strcpy((char *)&qword_25C0A78, "Keep_Left");
  strcpy(&byte_25C0AA7, "\nU_Turn");
  byte_25C0ABF = 6;
  byte_25C0AD7 = 14;
  strcpy((char *)&qword_25C0AC0, "Walking_U_Turn");
  byte_25C0AEF = 20;
  strcpy((char *)&xmmword_25C0AD8, "U_Turn_When_Possible");
  byte_25C0B07 = 20;
  strcpy((char *)&xmmword_25C0AF0, "U_Turn_At_Roundabout");
  byte_25C0B1F = 11;
  strcpy((char *)&qword_25C0B08, "Enter_Ferry");
  strcpy(&byte_25C0B37, "\nChange_Ferry");
  strcpy((char *)&qword_25C0B20, "Exit_Ferry");
  strcpy((char *)&xmmword_25C0B50, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25C0B68, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25C0B80, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25C0B98, "End_Of_Navigation");
  strcpy((char *)&xmmword_25C0BB0, "End_Of_Navigation");
  strcpy((char *)&qword_25C0BC8, "Destination");
  strcpy((char *)&xmmword_25C0BE0, "Destination_On_left");
  strcpy((char *)&xmmword_25C0BF8, "Destination_On_Right");
  strcpy((char *)&xmmword_25C0C40, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25C0C88, "Next_Stop_On_Right");
  byte_25C0B4F = 12;
  byte_25C0B67 = 21;
  byte_25C0B7F = 20;
  strcpy((char *)&xmmword_25C0CB8, "Waypoint_Stop_On_Left");
  byte_25C0B97 = 22;
  byte_25C0BAF = 17;
  byte_25C0BC7 = 17;
  byte_25C0BDF = 11;
  byte_25C0BF7 = 19;
  byte_25C0C0F = 20;
  strcpy(&byte_25C0C27, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25C0C10, "First_Stop");
  byte_25C0C3F = 18;
  byte_25C0C57 = 19;
  strcpy(&byte_25C0C6F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25C0CA0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25C0CD0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25C0CE8, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25C0C58, "Next_Stop");
  byte_25C0C87 = 17;
  byte_25C0C9F = 18;
  byte_25C0CB7 = 13;
  byte_25C0CCF = 21;
  byte_25C0CE7 = 22;
  byte_25C0CFF = 11;
  byte_25C0D17 = 16;
  strcpy((char *)&xmmword_25C0D00, "Enter_Roundabout");
  qword_25C0D18 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_25C0D20 = xmmword_20B91C0;
  strcpy((char *)qword_25C0D18, "Walking_Enter_Roundabout");
  byte_25C0D47 = 16;
  strcpy((char *)&xmmword_25C0D30, "Leave_Roundabout");
  byte_25C0D5F = 21;
  strcpy((char *)&xmmword_25C0D48, "Roundabout_First_Exit");
  byte_25C0D77 = 22;
  strcpy((char *)&xmmword_25C0D60, "Roundabout_Second_Exit");
  byte_25C0D8F = 21;
  strcpy((char *)&xmmword_25C0D78, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25C0D90, "Roundabout_Fourth_Exit");
  HIBYTE(word_25C0DA6) = 22;
  byte_25C0DBF = 21;
  strcpy((char *)&xmmword_25C0DA8, "Roundabout_Fifth_Exit");
  byte_25C0DD7 = 21;
  strcpy((char *)&xmmword_25C0DC0, "Roundabout_Sixth_Exit");
  qword_25C0DD8 = (uint64_t)operator new(0x19uLL);
  xmmword_25C0DE0 = xmmword_20B9250;
  strcpy((char *)qword_25C0DD8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25C0DF0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25C0E06) = 22;
  byte_25C0E1F = 21;
  strcpy((char *)&xmmword_25C0E08, "Roundabout_Ninth_Exit");
  byte_25C0E37 = 21;
  strcpy((char *)&xmmword_25C0E20, "Roundabout_Tenth_Exit");
  qword_25C0E38 = (uint64_t)operator new(0x20uLL);
  xmmword_25C0E40 = xmmword_20B91C0;
  strcpy((char *)qword_25C0E38, "Roundabout_Eleventh_Exit");
  qword_25C0E50 = (uint64_t)operator new(0x19uLL);
  unk_25C0E58 = xmmword_20B9250;
  strcpy((char *)qword_25C0E50, "Roundabout_Twelfth_Exit");
  qword_25C0E68 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25C0E70 = xmmword_20B5EB0;
  strcpy((char *)qword_25C0E68, "Roundabout_Thirteenth_Exit");
  qword_25C0E80 = (uint64_t)operator new(0x20uLL);
  unk_25C0E88 = xmmword_20B5EB0;
  strcpy((char *)qword_25C0E80, "Roundabout_Fourteenth_Exit");
  qword_25C0E98 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25C0EA0 = xmmword_20B8870;
  strcpy((char *)qword_25C0E98, "Roundabout_Fifteenth_Exit");
  qword_25C0EB0 = (uint64_t)operator new(0x20uLL);
  unk_25C0EB8 = xmmword_20B8870;
  strcpy((char *)qword_25C0EB0, "Roundabout_Sixteenth_Exit");
  qword_25C0EC8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25C0ED0 = xmmword_20B91A0;
  strcpy((char *)qword_25C0EC8, "Roundabout_Seventeenth_Exit");
  qword_25C0EE0 = (uint64_t)operator new(0x20uLL);
  unk_25C0EE8 = xmmword_20B5EB0;
  strcpy((char *)qword_25C0EE0, "Roundabout_Eighteenth_Exit");
  qword_25C0EF8 = (uint64_t)operator new(0x20uLL);
  xmmword_25C0F00 = xmmword_20B5EB0;
  strcpy((char *)qword_25C0EF8, "Roundabout_Nineteenth_Exit");
  byte_25C0F27 = 8;
  strcpy((char *)&qword_25C0F10, "Off_Ramp");
  byte_25C0F3F = 16;
  strcpy((char *)&xmmword_25C0F28, "Off_Ramp_On_Left");
  byte_25C0F57 = 17;
  strcpy((char *)&xmmword_25C0F40, "Off_Ramp_On_Right");
  byte_25C0F6F = 14;
  strcpy((char *)&qword_25C0F58, "Change_Highway");
  strcpy((char *)&xmmword_25C0F70, "Change_Highway_On_Left");
  HIBYTE(word_25C0F86) = 22;
  qword_25C0F88 = (uint64_t)operator new(0x19uLL);
  xmmword_25C0F90 = xmmword_20B9250;
  strcpy((char *)qword_25C0F88, "Change_Highway_On_Right");
  byte_25C0FB7 = 5;
  dword_25C0FA0 = 1735550285;
  byte_25C0FA4 = 101;
  byte_25C0FA5 = 0;
  byte_25C0FCF = 12;
  strcpy((char *)&qword_25C0FB8, "Enter_Detour");
  byte_25C0FE7 = 11;
  strcpy((char *)&qword_25C0FD0, "Exit_Detour");
  byte_25C0FFF = 18;
  strcpy((char *)&xmmword_25C0FE8, "Walking_Turnaround");
  qword_25C1000 = (uint64_t)operator new(0x19uLL);
  unk_25C1008 = xmmword_20B9250;
  strcpy((char *)qword_25C1000, "Walking_Turnaround_Sign");
  byte_25C102F = 19;
  strcpy((char *)&xmmword_25C1018, "Distance_Title_List");
  qword_25C1030 = (uint64_t)operator new(0x19uLL);
  unk_25C1038 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25C1030, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_25C105F = 19;
  strcpy((char *)&xmmword_25C1048, "Arrival_Charge_List");
  byte_25C1077 = 15;
  strcpy((char *)&qword_25C1060, "Charge_At_Start");
  strcpy(&byte_25C108F, "\tPass_Street");
  strcpy((char *)&qword_25C1078, "Pass_Exit");
  byte_25C10A7 = 11;
  byte_25C10BF = 17;
  strcpy((char *)&xmmword_25C10A8, "Pass_Intersection");
  strcpy(&byte_25C10D7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25C10C0, "Next_Exit");
  byte_25C10EF = 15;
  strcpy(&byte_25C1107, "\t_PrevUTurn");
  strcpy((char *)&qword_25C10F0, "_PrevRoad");
  strcpy(&byte_25C111F, "\nNext_");
  byte_25C1137 = 5;
  byte_25C114F = 15;
  strcpy((char *)&qword_25C1138, "_At_Next_Street");
  byte_25C1167 = 21;
  strcpy((char *)&xmmword_25C1150, "_At_Next_Intersection");
  byte_25C117F = 14;
  strcpy((char *)&qword_25C1168, "Charge_Station");
  byte_25C1197 = 15;
  strcpy((char *)&qword_25C1180, "_Charge_Station");
  BYTE1(qword_25C11A8) = 0;
  WORD1(qword_25C11A8) = 25856;
  HIDWORD(qword_25C11A8) = 335544320;
  strcpy((char *)&qword_25C1198, "_Charge_Station_");
  byte_25C11C7 = 8;
  strcpy((char *)&qword_25C11B0, "_Minimum");
  byte_25C11DF = 15;
  strcpy((char *)&qword_25C11C8, "ExitShield_Sign");
  byte_25C11F7 = 8;
  strcpy((char *)&qword_25C11E0, "Walking_");
  byte_25C120F = 16;
  strcpy((char *)&xmmword_25C11F8, "Walking_Continue");
  byte_25C1227 = 19;
  strcpy((char *)&xmmword_25C1210, "Walking_Start_Route");
  qword_25C1228 = (uint64_t)operator new(0x20uLL);
  xmmword_25C1230 = xmmword_20B5EB0;
  strcpy((char *)qword_25C1228, "Walking_Start_Route_U_Turn");
  byte_25C1257 = 17;
  strcpy((char *)&xmmword_25C1240, "Walking_Left_Turn");
  byte_25C126F = 18;
  strcpy((char *)&xmmword_25C1258, "Walking_Right_Turn");
  qword_25C1270 = (uint64_t)operator new(0x20uLL);
  unk_25C1278 = xmmword_20B5EB0;
  strcpy((char *)qword_25C1270, "Walking_Turn_At_Roundabout");
  qword_25C1288 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25C1290 = xmmword_20B91B0;
  strcpy((char *)qword_25C1288, "Walking_U_Turn_When_Possible");
  qword_25C12A0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25C12A8 = xmmword_20B9390;
  strcpy((char *)qword_25C12A0, "Walking_Roundabout_Exit_Continue");
  qword_25C12B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25C12C0 = xmmword_20B91B0;
  strcpy((char *)qword_25C12B8, "Walking_Roundabout_Exit_Left");
  qword_25C12D0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25C12D8 = xmmword_20B8890;
  strcpy((char *)qword_25C12D0, "Walking_Roundabout_Exit_Right");
  qword_25C12E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25C12F0 = xmmword_20B8870;
  strcpy((char *)qword_25C12E8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25C1300 = (uint64_t)v0;
  unk_25C1308 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25C132F = 8;
  strcpy((char *)&qword_25C1318, "Walking_");
  qword_25C1330 = (uint64_t)operator new(0x19uLL);
  unk_25C1338 = v282;
  strcpy((char *)qword_25C1330, "Walking_Sharp_Left_Turn");
  qword_25C1348 = (uint64_t)operator new(0x20uLL);
  xmmword_25C1350 = v281;
  strcpy((char *)qword_25C1348, "Walking_Sharp_Right_Turn");
  qword_25C1360 = (uint64_t)operator new(0x20uLL);
  unk_25C1368 = v281;
  strcpy((char *)qword_25C1360, "Walking_Slight_Left_Turn");
  qword_25C1378 = (uint64_t)operator new(0x20uLL);
  xmmword_25C1380 = v280;
  strcpy((char *)qword_25C1378, "Walking_Slight_Right_Turn");
  byte_25C13A7 = 4;
  strcpy((char *)&dword_25C1390, "Exit");
  byte_25C13BF = 4;
  strcpy((char *)&dword_25C13A8, "Road");
  byte_25C13D7 = 7;
  strcpy((char *)&dword_25C13C0, "Freeway");
  byte_25C13EF = 12;
  strcpy((char *)&qword_25C13D8, "Intersection");
  byte_25C1407 = 5;
  strcpy((char *)&dword_25C13F0, "Ferry");
  byte_25C141F = 11;
  strcpy((char *)&qword_25C1408, "ShuttleName");
  byte_25C1437 = 5;
  strcpy((char *)&dword_25C1420, "Road1");
  strcpy(&byte_25C144F, "\tName");
  strcpy((char *)&qword_25C1438, "Signpost1");
  byte_25C1467 = 4;
  byte_25C147F = 7;
  strcpy((char *)&dword_25C1468, "Address");
  byte_25C1497 = 7;
  strcpy((char *)&dword_25C1480, "Shield1");
  byte_25C14AF = 13;
  strcpy((char *)&qword_25C1498, "TowardShield1");
  byte_25C14C7 = 6;
  strcpy((char *)&dword_25C14B0, "Right_");
  byte_25C14DF = 5;
  byte_25C14CC = 95;
  dword_25C14C8 = 1952867660;
  byte_25C14CD = 0;
  strcpy(&byte_25C14F7, "\tOn_Left_");
  strcpy((char *)&qword_25C14E0, "On_Right_");
  byte_25C150F = 8;
  byte_25C1527 = 12;
  strcpy((char *)&qword_25C1510, "ElevatorName");
  byte_25C153F = 13;
  strcpy((char *)&qword_25C1528, "EscalatorName");
  strcpy(&byte_25C1557, "\nBridgeName");
  strcpy((char *)&qword_25C1540, "StairsName");
  strcpy(&byte_25C156F, "\nTunnelName");
  strcpy(&byte_25C1587, "\nParking");
  byte_25C159F = 7;
  strcpy(&byte_25C15B7, "\t_Escalator");
  strcpy((char *)&qword_25C15A0, "_Elevator");
  strcpy(&byte_25C15CF, "\n_ElevatorName");
  byte_25C15E7 = 13;
  byte_25C15FF = 14;
  strcpy((char *)&qword_25C15E8, "_EscalatorName");
  byte_25C1617 = 5;
  strcpy((char *)&qword_25C1600, "_Road");
  byte_25C162F = 8;
  strcpy((char *)&qword_25C1618, "_Freeway");
  byte_25C1647 = 13;
  strcpy((char *)&qword_25C1630, "_Intersection");
  byte_25C165F = 6;
  strcpy((char *)&dword_25C1648, "_Road1");
  byte_25C1677 = 6;
  strcpy((char *)&dword_25C1660, "_Road2");
  strcpy(&byte_25C168F, "\n_Signpost2");
  strcpy((char *)&qword_25C1678, "_Signpost1");
  strcpy(&byte_25C16A7, "\n_Ferry");
  byte_25C16BF = 6;
  byte_25C16D7 = 12;
  strcpy((char *)&qword_25C16C0, "_Ferry_Ferry");
  byte_25C16EF = 12;
  strcpy((char *)&qword_25C16D8, "_ShuttleName");
  qword_25C16F0 = (uint64_t)operator new(0x20uLL);
  unk_25C16F8 = v279;
  strcpy((char *)qword_25C16F0, "_Railway_Shuttle_ShuttleName");
  byte_25C171F = 11;
  strcpy((char *)&qword_25C1708, "_ExitNumber");
  byte_25C1737 = 5;
  dword_25C1720 = 1769489759;
  byte_25C1724 = 116;
  byte_25C1725 = 0;
  byte_25C174F = 7;
  strcpy((char *)&dword_25C1738, "_StayOn");
  byte_25C1767 = 7;
  strcpy((char *)&dword_25C1750, "_Stairs");
  byte_25C177F = 5;
  strcpy((char *)&dword_25C1768, "_Ramp");
  byte_25C1797 = 11;
  strcpy((char *)&qword_25C1780, "_StairsName");
  strcpy(&byte_25C17AF, "\t_Down");
  strcpy((char *)&qword_25C1798, "_RampName");
  byte_25C17C7 = 5;
  byte_25C17DF = 3;
  dword_25C17C8 = 7361887;
  byte_25C17F7 = 7;
  strcpy((char *)&dword_25C17E0, "_Bridge");
  byte_25C180F = 7;
  strcpy((char *)&dword_25C17F8, "_Tunnel");
  byte_25C1827 = 11;
  strcpy((char *)&qword_25C1810, "_Roundabout");
  byte_25C183F = 6;
  strcpy((char *)&dword_25C1828, "_Cross");
  byte_25C1857 = 8;
  strcpy((char *)&qword_25C1840, "_Parking");
  byte_25C186F = 8;
  strcpy((char *)&qword_25C1858, "_Shield1");
  byte_25C1887 = 14;
  strcpy((char *)&qword_25C1870, "_TowardShield1");
  byte_25C189F = 8;
  strcpy((char *)&qword_25C1888, "_Shield2");
  byte_25C18B7 = 14;
  strcpy((char *)&qword_25C18A0, "_TowardShield2");
  byte_25C18CF = 11;
  strcpy((char *)&qword_25C18B8, "_Direction1");
  byte_25C18E7 = 11;
  strcpy((char *)&qword_25C18D0, "_Direction2");
  strcpy(&byte_25C18FF, "\n_TowardDirection1");
  strcpy((char *)&qword_25C18E8, "Direction1");
  byte_25C1917 = 17;
  byte_25C192F = 17;
  strcpy((char *)&xmmword_25C1918, "_TowardDirection2");
  byte_25C1947 = 16;
  strcpy((char *)&xmmword_25C1930, "TowardDirection1");
  byte_25C195F = 7;
  strcpy((char *)&qword_25C1948, "_Spoken");
  byte_25C1977 = 5;
  strcpy((char *)&qword_25C1960, "_Sign");
  byte_25C198F = 15;
  strcpy((char *)&qword_25C1978, "_Secondary_Sign");
  byte_25C19A7 = 5;
  byte_25C1994 = 116;
  dword_25C1990 = 1936280671;
  byte_25C1995 = 0;
  byte_25C19BF = 8;
  strcpy((char *)&qword_25C19A8, "_Primary");
  qword_25C19D0 = 0xF00000000000000;
  strcpy(byte_25C19D8, "_Secondary");
  strcpy((char *)&qword_25C19C0, "_Spoken_Primary");
  strcpy(&byte_25C19EF, "\n_Secondary");
  strcpy(&byte_25C1A07, "\n_Spoken_Secondar");
  BYTE1(qword_25C1A18) = 0;
  WORD1(qword_25C1A18) = 0;
  HIDWORD(qword_25C1A18) = 285212672;
  byte_25C1A37 = 13;
  strcpy((char *)&qword_25C1A20, "_To_Secondary");
  BYTE1(qword_25C1A48) = 0;
  WORD1(qword_25C1A48) = 0;
  HIDWORD(qword_25C1A48) = 335544320;
  strcpy((char *)&dword_25C1A38, "_Spoken_To_Secon");
  strcpy(&byte_25C1A67, "\t_ValidDistance");
  strcpy((char *)&qword_25C1A50, "_Distance");
  byte_25C1A7F = 14;
  byte_25C1A97 = 6;
  strcpy((char *)&dword_25C1A80, "_Short");
  byte_25C1AAF = 1;
  word_25C1A98 = 95;
  qword_25C1AB0 = (uint64_t)operator new(0x20uLL);
  unk_25C1AB8 = v281;
  strcpy((char *)qword_25C1AB0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25C1AC8 = (uint64_t)v1;
  xmmword_25C1AD0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_25C1AF7 = 12;
  strcpy((char *)&qword_25C1AE0, "Chain_Spoken");
  byte_25C1B0F = 15;
  strcpy((char *)&qword_25C1AF8, "Chain_To_Spoken");
  strcpy(&byte_25C1B27, "\nThen_Spoken");
  strcpy((char *)&qword_25C1B10, "And_Spoken");
  byte_25C1B3F = 11;
  byte_25C1B57 = 18;
  strcpy((char *)&xmmword_25C1B40, "Concatenate_Spoken");
  qword_25C1B58 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_25C1B60 = xmmword_20B9240;
  strcpy((char *)qword_25C1B58, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25C1B70 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_25C1B78 = xmmword_20B9260;
  strcpy((char *)qword_25C1B70, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25C1B88 = (uint64_t)operator new(0x40uLL);
  xmmword_25C1B90 = xmmword_20B9A90;
  strcpy((char *)qword_25C1B88, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25C1BA0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25C1BA8 = xmmword_20B9A40;
  strcpy((char *)qword_25C1BA0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25C1BB8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_25C1BC0 = xmmword_20E12D0;
  strcpy((char *)qword_25C1BB8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25C1BD0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25C1BD8 = xmmword_20B9960;
  strcpy((char *)qword_25C1BD0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C1BE8 = (uint64_t)operator new(0x28uLL);
  xmmword_25C1BF0 = xmmword_20B93A0;
  strcpy((char *)qword_25C1BE8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C1C00 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25C1C08 = xmmword_20E1380;
  strcpy((char *)qword_25C1C00, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C1C18 = (uint64_t)operator new(0x30uLL);
  xmmword_25C1C20 = xmmword_20B93C0;
  strcpy((char *)qword_25C1C18, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C1C30 = (uint64_t)operator new(0x38uLL);
  unk_25C1C38 = xmmword_20B9A60;
  strcpy((char *)qword_25C1C30, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25C1C48 = (uint64_t)operator new(0x30uLL);
  xmmword_25C1C50 = xmmword_20E1380;
  strcpy((char *)qword_25C1C48, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25C1C60 = (uint64_t)operator new(0x28uLL);
  unk_25C1C68 = xmmword_20B9960;
  strcpy((char *)qword_25C1C60, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25C1C78 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25C1C80 = xmmword_20B93D0;
  strcpy((char *)qword_25C1C78, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25C1C90 = (uint64_t)operator new(0x20uLL);
  unk_25C1C98 = v277;
  strcpy((char *)qword_25C1C90, "Walking_Distance_Chain_Spoken");
  qword_25C1CA8 = (uint64_t)operator new(0x20uLL);
  xmmword_25C1CB0 = v277;
  strcpy((char *)qword_25C1CA8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25C1CC0 = (uint64_t)v3;
  unk_25C1CC8 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25C1CD8 = (uint64_t)operator new(0x28uLL);
  xmmword_25C1CE0 = v271;
  strcpy((char *)qword_25C1CD8, "Distance_Cross_The_Street_Spoken");
  byte_25C1D07 = 22;
  strcpy((char *)&xmmword_25C1CF0, "Walking_Continue_Cross");
  byte_25C1D1F = 14;
  strcpy((char *)&qword_25C1D08, "Continue_Cross");
  byte_25C1D37 = 5;
  strcpy((char *)&dword_25C1D20, "Cross");
  byte_25C1D4F = 19;
  strcpy((char *)&xmmword_25C1D38, "Cross_Street_Spoken");
  byte_25C1D67 = 17;
  strcpy((char *)&xmmword_25C1D50, "Cross_Road_Spoken");
  byte_25C1D7F = 20;
  strcpy((char *)&xmmword_25C1D68, "Use_Crosswalk_Spoken");
  byte_25C1D97 = 15;
  strcpy((char *)&qword_25C1D80, "Distance_Spoken");
  byte_25C1DAF = 19;
  strcpy((char *)&xmmword_25C1D98, "Distance_And_Spoken");
  byte_25C1DC7 = 21;
  strcpy((char *)&xmmword_25C1DB0, "Continue_Stage_Spoken");
  byte_25C1DDF = 13;
  qmemcpy(&qword_25C1DC8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25C19D0);
  if (qword_25C19D0 >= 0) {
    size_t v5 = HIBYTE(qword_25C19D0);
  }
  else {
    size_t v5 = unk_25C19C8;
  }
  unint64_t v6 = v5 + 13;
  byte_25C1DD5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = operator new(v8 + 1);
    qword_25C1DE8 = v5 + 13;
    unk_25C1DF0 = v9 | 0x8000000000000000;
    qword_25C1DE0 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    long long v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25C1DE8) = 0;
    WORD1(qword_25C1DE8) = 0;
    HIDWORD(qword_25C1DE8) = 0;
    unk_25C1DF0 = 0;
    byte_25C1DF7 = v5 + 13;
    long long v7 = (char *)&qword_25C1DE8 + 5;
    strcpy((char *)&qword_25C1DE0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    int64x2_t v11 = &qword_25C19C0;
  }
  else {
    int64x2_t v11 = (uint64_t *)qword_25C19C0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25C1617;
  if (byte_25C1617 >= 0) {
    size_t v13 = byte_25C1617;
  }
  else {
    size_t v13 = qword_25C1608;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25C1DC8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25C1DC8 + 5);
    long long v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25C1DC8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25C1DC8;
    long long v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    char v19 = &qword_25C1600;
  }
  else {
    char v19 = (uint64_t *)qword_25C1600;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25C19C0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25C19C0;
  }
  long long v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25C1E08 = v21->__r_.__value_.__r.__words[2];
  xmmword_25C1DF8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25C1E27 = 5;
  strcpy((char *)&dword_25C1E10, "Merge");
  qword_25C1E28 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  *(_OWORD *)algn_25C1E30 = xmmword_20B8E90;
  strcpy((char *)qword_25C1E28, "Continue_Freeway_Spoken_Primary");
  byte_25C1E57 = 8;
  strcpy((char *)&qword_25C1E40, "Starting");
  byte_25C1E6F = 14;
  strcpy((char *)&qword_25C1E58, "Starting_Route");
  byte_25C1E87 = 14;
  strcpy((char *)&qword_25C1E70, "Resuming_Route");
  byte_25C1E9F = 16;
  strcpy((char *)&xmmword_25C1E88, "Continuing_Route");
  byte_25C1EB7 = 9;
  word_25C1EA8 = 112;
  qword_25C1EA0 = *(void *)&v266[48];
  strcpy(&byte_25C1ECF, "\nEnding");
  strcpy((char *)&word_25C1EC0, "op");
  qword_25C1EB8 = *(void *)&v270[0];
  byte_25C1EE7 = 6;
  strcpy((char *)&qword_25C1EE8, "_Destination");
  byte_25C1EFF = 12;
  byte_25C1F17 = 15;
  strcpy((char *)&qword_25C1F00, "_At_Destination");
  std::operator+<char>();
  qword_25C1F30 = (uint64_t)operator new(0x20uLL);
  unk_25C1F38 = v281;
  strcpy((char *)qword_25C1F30, "Spoken_Ending_At_Parking");
  qword_25C1F48 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_25C1F50 = xmmword_20B9800;
  strcpy((char *)qword_25C1F48, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25C1F60, "Sign_Ending_At_Parking");
  HIBYTE(word_25C1F76) = 22;
  byte_25C1F8F = 4;
  strcpy((char *)&dword_25C1F78, "Home");
  byte_25C1FA7 = 4;
  strcpy((char *)&dword_25C1F90, "Work");
  byte_25C1FBF = 8;
  strcpy((char *)&qword_25C1FA8, "Business");
  byte_25C1FD7 = 4;
  strcpy((char *)&dword_25C1FC0, "Name");
  byte_25C1FEF = 13;
  strcpy((char *)&qword_25C1FD8, "Other_Contact");
  byte_25C2007 = 11;
  strcpy((char *)&qword_25C1FF0, "ContactHome");
  byte_25C201F = 11;
  *(_DWORD *)((char *)&qword_25C2008 + 7) = 1802661719;
  byte_25C2037 = 7;
  *(int *)((char *)&dword_25C2020 + 3) = 1936942450;
  dword_25C2020 = 1919181889;
  strcpy((char *)&xmmword_25C2038, "Discoverability_Prompt");
  HIBYTE(word_25C204E) = 22;
  byte_25C2067 = 6;
  dword_25C2050 = 1634878303;
  word_25C2054 = 26739;
  byte_25C207F = 8;
  qword_25C2068 = 0x697269535F6F4E5FLL;
  byte_25C2097 = 9;
  strcpy((char *)&qword_25C2080, "_CityName");
  byte_25C20AF = 8;
  qword_25C2098 = 0x636972656E65475FLL;
  int v23 = byte_25C1E57;
  if (byte_25C1E57 >= 0) {
    size_t v24 = byte_25C1E57;
  }
  else {
    size_t v24 = qword_25C1E48;
  }
  LODWORD(v272) = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v25 = byte_25C1197;
  }
  else {
    size_t v25 = unk_25C1188;
  }
  qword_25C2008 = *(void *)"ContactWork";
  byte_25C2013 = 0;
  byte_25C2027 = 0;
  byte_25C2056 = 0;
  byte_25C2070 = 0;
  byte_25C20A0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25C20B0;
    qword_25C20B8 = 0;
    unk_25C20C0 = 0;
    qword_25C20B0 = 0;
    byte_25C20C7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25C20B8 = v25 + v24;
  unk_25C20C0 = v91 | 0x8000000000000000;
  qword_25C20B0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      long long v28 = &qword_25C1E40;
    }
    else {
      long long v28 = (uint64_t *)qword_25C1E40;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  long long v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v30 = &qword_25C1180;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_25C1180;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25C1EFF;
  if (byte_25C1EFF >= 0) {
    size_t v32 = byte_25C1EFF;
  }
  else {
    size_t v32 = qword_25C1EF0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_25C20C8;
    qword_25C20D0 = 0;
    unk_25C20D8 = 0;
    qword_25C20C8 = 0;
    byte_25C20DF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_25C20D0 = v32 + v24;
  unk_25C20D8 = v93 | 0x8000000000000000;
  qword_25C20C8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      long long v35 = &qword_25C1E40;
    }
    else {
      long long v35 = (uint64_t *)qword_25C1E40;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v37 = &qword_25C1EE8;
    }
    else {
      long long v37 = (uint64_t *)qword_25C1EE8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25C20E0 = (uint64_t)operator new(0x19uLL);
  unk_25C20E8 = v282;
  strcpy((char *)qword_25C20E0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_25C20F8;
    qword_25C2100 = 0;
    unk_25C2108 = 0;
    qword_25C20F8 = 0;
    byte_25C210F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_25C2100 = v32 + v24;
  unk_25C2108 = v95 | 0x8000000000000000;
  qword_25C20F8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_25C1E40;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_25C1E40;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v41 = &qword_25C1EE8;
    }
    else {
      long long v41 = (uint64_t *)qword_25C1EE8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25C2110, "{NewBatteryPercentage}");
  HIBYTE(word_25C2126) = 22;
  qword_25C2128 = (uint64_t)operator new(0x20uLL);
  xmmword_25C2130 = v275;
  strcpy((char *)qword_25C2128, "{OriginalBatteryPercentage}");
  byte_25C2157 = 19;
  strcpy((char *)&xmmword_25C2140, "_Arrival_Percentage");
  int v42 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v43 = byte_25C1EE7;
  }
  else {
    size_t v43 = qword_25C1ED8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      long long v46 = &qword_25C1ED0;
    }
    else {
      long long v46 = (uint64_t *)qword_25C1ED0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  long long v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v48 = &qword_25C1180;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25C1180;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  long long v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25C2168 = v49->__r_.__value_.__r.__words[2];
  xmmword_25C2158 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v52 = byte_25C1EE7;
  }
  else {
    size_t v52 = qword_25C1ED8;
  }
  int v53 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v54 = byte_25C1197;
  }
  else {
    size_t v54 = unk_25C1188;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    uint64_t v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  uint64_t v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      long long v57 = &qword_25C1ED0;
    }
    else {
      long long v57 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  long long v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      long long v59 = &qword_25C1180;
    }
    else {
      long long v59 = (uint64_t *)qword_25C1180;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25C11C7 >= 0) {
    unint64_t v60 = (const std::string::value_type *)&qword_25C11B0;
  }
  else {
    unint64_t v60 = (const std::string::value_type *)qword_25C11B0;
  }
  if (byte_25C11C7 >= 0) {
    std::string::size_type v61 = byte_25C11C7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25C11B8;
  }
  long long v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25C2180 = v64->__r_.__value_.__r.__words[2];
  xmmword_25C2170 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v67 = byte_25C1EE7;
  }
  else {
    size_t v67 = qword_25C1ED8;
  }
  int v68 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v69 = byte_25C1197;
  }
  else {
    size_t v69 = unk_25C1188;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  long long v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      long long v72 = &qword_25C1ED0;
    }
    else {
      long long v72 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      long long v74 = &qword_25C1180;
    }
    else {
      long long v74 = (uint64_t *)qword_25C1180;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  long long v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25C2198 = v75->__r_.__value_.__r.__words[2];
  xmmword_25C2188 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v78 = byte_25C1EE7;
  }
  else {
    size_t v78 = qword_25C1ED8;
  }
  int v79 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v80 = byte_25C1197;
  }
  else {
    size_t v80 = unk_25C1188;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25C21A8 = 0;
    unk_25C21B0 = 0;
    qword_25C21A0 = 0;
    int v82 = &qword_25C21A0;
    byte_25C21B7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_25C21A8 = v80 + v78;
  unk_25C21B0 = v103 | 0x8000000000000000;
  qword_25C21A0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_25C1ED0;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  int v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25C1180;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25C1180;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25C21B7;
  if (byte_25C21B7 >= 0) {
    size_t v87 = byte_25C21B7;
  }
  else {
    size_t v87 = qword_25C21A8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    unint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25C21C0 = v87 + 5;
    unk_25C21C8 = v105 | 0x8000000000000000;
    qword_25C21B8 = (uint64_t)v89;
  }
  else
  {
    unint64_t v89 = &qword_25C21B8;
    qword_25C21C0 = 0;
    unk_25C21C8 = 0;
    qword_25C21B8 = 0;
    byte_25C21CF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25C21A0;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25C21A0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v108 = byte_25C1EE7;
  }
  else {
    size_t v108 = qword_25C1ED8;
  }
  int v109 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v110 = byte_25C1197;
  }
  else {
    size_t v110 = unk_25C1188;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  long long v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      uint64_t v113 = &qword_25C1ED0;
    }
    else {
      uint64_t v113 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25C1180;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25C1180;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  char v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25C21E0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25C21D0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25C21E0);
  if (qword_25C21E0 >= 0) {
    size_t v119 = HIBYTE(qword_25C21E0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25C21D0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    int v121 = (uint64_t *)operator new(v124 + 1);
    qword_25C21F0 = v119 + 6;
    unk_25C21F8 = v125 | 0x8000000000000000;
    qword_25C21E8 = (uint64_t)v121;
  }
  else
  {
    int v121 = &qword_25C21E8;
    qword_25C21F0 = 0;
    unk_25C21F8 = 0;
    qword_25C21E8 = 0;
    byte_25C21FF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_25C21D0;
  }
  else {
    int v126 = (long long *)xmmword_25C21D0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v128 = byte_25C1EE7;
  }
  else {
    size_t v128 = qword_25C1ED8;
  }
  int v129 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v130 = byte_25C1197;
  }
  else {
    size_t v130 = unk_25C1188;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  uint64_t v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      long long v133 = &qword_25C1ED0;
    }
    else {
      long long v133 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  uint64_t v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25C1180;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25C1180;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25C195F >= 0) {
    BOOL v136 = (const std::string::value_type *)&qword_25C1948;
  }
  else {
    BOOL v136 = (const std::string::value_type *)qword_25C1948;
  }
  if (byte_25C195F >= 0) {
    std::string::size_type v137 = byte_25C195F;
  }
  else {
    std::string::size_type v137 = unk_25C1950;
  }
  char v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25C2210 = v138->__r_.__value_.__r.__words[2];
  xmmword_25C2200 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25C1EE7;
  if (byte_25C1EE7 >= 0) {
    size_t v141 = byte_25C1EE7;
  }
  else {
    size_t v141 = qword_25C1ED8;
  }
  int v142 = byte_25C1197;
  if (byte_25C1197 >= 0) {
    size_t v143 = byte_25C1197;
  }
  else {
    size_t v143 = unk_25C1188;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  unint64_t v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      int v146 = &qword_25C1ED0;
    }
    else {
      int v146 = (uint64_t *)qword_25C1ED0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  unint64_t v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      unint64_t v148 = &qword_25C1180;
    }
    else {
      unint64_t v148 = (uint64_t *)qword_25C1180;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25C11C7 >= 0) {
    int v149 = (const std::string::value_type *)&qword_25C11B0;
  }
  else {
    int v149 = (const std::string::value_type *)qword_25C11B0;
  }
  if (byte_25C11C7 >= 0) {
    std::string::size_type v150 = byte_25C11C7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25C11B8;
  }
  std::string::size_type v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25C195F >= 0) {
    long long v153 = (const std::string::value_type *)&qword_25C1948;
  }
  else {
    long long v153 = (const std::string::value_type *)qword_25C1948;
  }
  if (byte_25C195F >= 0) {
    std::string::size_type v154 = byte_25C195F;
  }
  else {
    std::string::size_type v154 = unk_25C1950;
  }
  std::string::size_type v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25C2228 = v155->__r_.__value_.__r.__words[2];
  xmmword_25C2218 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25C2247 = 16;
  strcpy((char *)&xmmword_25C2230, "Use_NACS_Adapter");
  byte_25C225F = 16;
  strcpy(byte_25C2248, "Start_Route_Sign");
  qword_25C2260 = (uint64_t)operator new(0x20uLL);
  unk_25C2268 = v278;
  strcpy((char *)qword_25C2260, "Start_Route_Spoken_Primary");
  int v157 = byte_25C08F7;
  if (byte_25C08F7 >= 0) {
    size_t v158 = byte_25C08F7;
  }
  else {
    size_t v158 = qword_25C08E8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    unint64_t v160 = &qword_25C2278;
    qword_25C2280 = 0;
    unk_25C2288 = 0;
    qword_25C2278 = 0;
    byte_25C228F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      uint64_t v167 = &qword_25C08E0;
    }
    else {
      uint64_t v167 = (uint64_t *)qword_25C08E0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  unint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25C2280 = v158 + 27;
  unk_25C2288 = v166 | 0x8000000000000000;
  qword_25C2278 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25C22A7, "\t_Two_Lanes");
  strcpy((char *)&qword_25C2290, "_One_Lane");
  strcpy(&byte_25C22BF, "\n_Three_Lanes");
  byte_25C22D7 = 12;
  byte_25C22EF = 11;
  strcpy((char *)&qword_25C22D8, "_Four_Lanes");
  byte_25C2307 = 11;
  strcpy((char *)&qword_25C22F0, "_Five_Lanes");
  strcpy(&byte_25C231F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25C2308, "_Six_Lanes");
  byte_25C2337 = 12;
  byte_25C234F = 12;
  strcpy((char *)&qword_25C2338, "_Eight_Lanes");
  byte_25C2367 = 12;
  strcpy((char *)&qword_25C2350, "_Second_Lane");
  byte_25C237F = 11;
  strcpy((char *)&qword_25C2368, "_Third_Lane");
  byte_25C2397 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25C2380, "_Second_Third_Lanes");
  byte_25C23AF = 4;
  strcpy((char *)&dword_25C2398, "Left");
  byte_25C23C7 = 5;
  byte_25C23B4 = 116;
  dword_25C23B0 = 1751607634;
  byte_25C23B5 = 0;
  byte_25C23DF = 6;
  strcpy((char *)&dword_25C23C8, "Middle");
  BYTE1(qword_25C23F0) = 0;
  WORD1(qword_25C23F0) = 0;
  HIDWORD(qword_25C23F0) = 0x10000000;
  strcpy((char *)dword_25C23E0, "Left_Second_Lane");
  BYTE1(qword_25C2408) = 0;
  WORD1(qword_25C2408) = 0;
  HIDWORD(qword_25C2408) = 285212672;
  strcpy((char *)&dword_25C23F8, "Right_Second_Lan");
  qword_25C2420 = 0xF00000000000000;
  strcpy((char *)&dword_25C2410, "Left_Third_Lane");
  qword_25C2438 = 0x1000000000000000;
  byte_25C242C = 116;
  dword_25C2428 = 1751607634;
  dword_25C2434 = 1701732684;
  unk_25C242D = *(void *)"_Third_Lane";
  char v168 = (char *)operator new(0x19uLL);
  qword_25C2440 = (uint64_t)v168;
  unk_25C2448 = v282;
  *(_DWORD *)char v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  int v169 = (char *)operator new(0x20uLL);
  qword_25C2458 = (uint64_t)v169;
  xmmword_25C2460 = v281;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_25C2487 = 5;
  strcpy((char *)&dword_25C2470, "_Stay");
  byte_25C249F = 13;
  strcpy((char *)&qword_25C2488, "Continue_Sign");
  byte_25C24B7 = 8;
  strcpy((char *)&qword_25C24A0, "Continue");
  int v170 = byte_25C1977;
  if (byte_25C1977 >= 0) {
    size_t v171 = byte_25C1977;
  }
  else {
    size_t v171 = qword_25C1968;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    uint64_t v176 = operator new(v174 + 1);
    qword_25C24C0 = v171 + 8;
    qword_25C24C8 = v175 | 0x8000000000000000;
    qword_25C24B8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    unint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25C24C8 = 0;
    HIBYTE(qword_25C24C8) = v171 + 8;
    qword_25C24B8 = 0x65756E69746E6F43;
    qword_25C24C0 = 0;
    unint64_t v173 = &qword_25C24C0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_25C1960;
  }
  else {
    v177 = (uint64_t *)qword_25C1960;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25C19D0);
  if (qword_25C19D0 >= 0) {
    size_t v179 = HIBYTE(qword_25C19D0);
  }
  else {
    size_t v179 = unk_25C19C8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    uint64_t v184 = operator new(v182 + 1);
    qword_25C24D8 = v179 + 8;
    qword_25C24E0 = v183 | 0x8000000000000000;
    qword_25C24D0 = (uint64_t)v184;
    void *v184 = qword_25C24A0;
    unint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25C24E0 = 0;
    HIBYTE(qword_25C24E0) = v179 + 8;
    qword_25C24D0 = qword_25C24A0;
    qword_25C24D8 = 0;
    unint64_t v181 = &qword_25C24D8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_25C19C0;
  }
  else {
    v185 = (uint64_t *)qword_25C19C0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25C24E8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25C2517 = 13;
  strcpy((char *)&qword_25C2500, "{instruction}");
  byte_25C252F = 20;
  strcpy(byte_25C2518, "{primaryInstruction}");
  strcpy((char *)&xmmword_25C2530, "{secondaryInstruction}");
  HIBYTE(word_25C2546) = 22;
  qword_25C2548 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C2550 = v280;
  strcpy((char *)qword_25C2548, "{andSecondaryInstruction}");
  qword_25C2560 = (uint64_t)operator new(0x20uLL);
  unk_25C2568 = v281;
  strcpy((char *)qword_25C2560, "{toSecondaryInstruction}");
  byte_25C258F = 21;
  strcpy(byte_25C2578, "{continueInstruction}");
  qword_25C2590 = (uint64_t)operator new(0x20uLL);
  unk_25C2598 = v278;
  strcpy((char *)qword_25C2590, "{thenSecondaryInstruction}");
  byte_25C25BF = 14;
  strcpy((char *)&qword_25C25A8, "{instruction1}");
  byte_25C25D7 = 14;
  strcpy((char *)&qword_25C25C0, "{instruction2}");
  strcpy(&byte_25C25EF, "\n{nextDistance}");
  strcpy((char *)&qword_25C25D8, "{distance}");
  byte_25C2607 = 14;
  byte_25C261F = 16;
  strcpy(byte_25C2608, "{valid_distance}");
  strcpy(&byte_25C2637, "\n{valid_distance}");
  strcpy((char *)&qword_25C2620, "{distance}");
  byte_25C264F = 16;
  byte_25C2667 = 15;
  strcpy((char *)&qword_25C2650, "{ClimbDistance}");
  byte_25C267F = 17;
  strcpy(byte_25C2668, "{DescentDistance}");
  byte_25C2697 = 13;
  strcpy((char *)&qword_25C2680, "{nonBrkSpace}");
  byte_25C26AF = 9;
  strcpy((char *)&qword_25C2698, "{newLine}");
  byte_25C26C7 = 6;
  word_25C26B4 = -24382;
  dword_25C26B0 = -1211981630;
  byte_25C26B6 = 0;
  byte_25C26DF = 2;
  word_25C26C8 = -24382;
  byte_25C26CA = 0;
  byte_25C26F7 = 1;
  word_25C26E0 = 10;
  byte_25C270F = 1;
  word_25C26F8 = 32;
  byte_25C2727 = 2;
  strcpy((char *)&word_25C2710, "\n\n");
  strcpy(&byte_25C273F, "\t{TowardShield1}");
  strcpy((char *)&qword_25C2728, "{Shield1}");
  byte_25C2757 = 15;
  strcpy(&byte_25C276F, "\t{TowardShield2}");
  strcpy((char *)&qword_25C2758, "{Shield2}");
  byte_25C2787 = 15;
  byte_25C279F = 12;
  strcpy((char *)&qword_25C2788, "{Direction1}");
  byte_25C27B7 = 12;
  strcpy((char *)&qword_25C27A0, "{Direction2}");
  byte_25C27CF = 18;
  strcpy((char *)&xmmword_25C27B8, "{TowardDirection1}");
  byte_25C27E7 = 18;
  strcpy((char *)&xmmword_25C27D0, "{TowardDirection2}");
  byte_25C27FF = 7;
  strcpy((char *)&dword_25C27E8, "{Icon1}");
  byte_25C2817 = 7;
  strcpy((char *)&dword_25C2800, "{Icon2}");
  byte_25C2818[23] = 14;
  strcpy(byte_25C2818, "{Intersection}");
  byte_25C2847 = 6;
  strcpy((char *)&xmmword_25C2830, "{Road}");
  byte_25C285F = 7;
  strcpy((char *)&dword_25C2848, "{Road1}");
  byte_25C2877 = 7;
  strcpy((char *)&xmmword_25C2860, "{Road2}");
  strcpy(&byte_25C288F, "\n{Freeway}");
  strcpy((char *)&qword_25C2878, "{Elevator}");
  strcpy(&byte_25C28A7, "\t{Ferry}");
  byte_25C28BF = 7;
  byte_25C28D7 = 13;
  strcpy((char *)&xmmword_25C28C0, "{ShuttleName}");
  byte_25C28EF = 11;
  strcpy((char *)&qword_25C28D8, "{Signpost1}");
  byte_25C2907 = 11;
  strcpy((char *)&xmmword_25C28F0, "{Signpost2}");
  byte_25C291F = 12;
  strcpy((char *)&xmmword_25C2908, "{ExitNumber}");
  strcpy(&byte_25C2937, "\t{Name}");
  strcpy((char *)&xmmword_25C2920, "{Address}");
  byte_25C294F = 6;
  byte_25C2967 = 11;
  strcpy((char *)&xmmword_25C2950, "{PlaceName}");
  byte_25C297F = 14;
  strcpy((char *)&xmmword_25C2968, "{ElevatorName}");
  byte_25C2997 = 15;
  strcpy((char *)&xmmword_25C2980, "{EscalatorName}");
  byte_25C29AF = 12;
  strcpy((char *)&xmmword_25C2998, "{StairsName}");
  strcpy(&byte_25C29C7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25C29B0, "{RampName}");
  byte_25C29DF = 12;
  byte_25C29F7 = 12;
  strcpy((char *)&xmmword_25C29E0, "{TunnelName}");
  byte_25C2A0F = 13;
  strcpy((char *)&xmmword_25C29F8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25C2818;
  *(_OWORD *)v285 = xmmword_25C2830;
  *(void *)&v285[16] = unk_25C2840;
  *(_OWORD *)v286 = *(_OWORD *)&dword_25C2848;
  *(void *)v287 = unk_25C2858;
  *(_OWORD *)&v287[8] = xmmword_25C2860;
  uint64_t v288 = unk_25C2870;
  *(_OWORD *)v289 = *(_OWORD *)&qword_25C2878;
  uint64_t v290 = unk_25C2888;
  uint64_t v292 = unk_25C28A0;
  long long v291 = xmmword_25C2890;
  long long v293 = *(_OWORD *)&dword_25C28A8;
  uint64_t v294 = unk_25C28B8;
  uint64_t v296 = unk_25C28D0;
  long long __p = xmmword_25C28C0;
  long long v297 = *(_OWORD *)&qword_25C28D8;
  uint64_t v298 = unk_25C28E8;
  uint64_t v300 = unk_25C2900;
  long long v299 = xmmword_25C28F0;
  long long v301 = xmmword_25C2908;
  long long v303 = xmmword_25C2920;
  uint64_t v302 = unk_25C2918;
  uint64_t v304 = unk_25C2930;
  long long v305 = xmmword_25C2938;
  long long v307 = xmmword_25C2950;
  uint64_t v306 = unk_25C2948;
  uint64_t v308 = unk_25C2960;
  long long v309 = xmmword_25C2968;
  long long v311 = xmmword_25C2980;
  uint64_t v310 = unk_25C2978;
  uint64_t v312 = unk_25C2990;
  long long v313 = xmmword_25C2998;
  long long v315 = xmmword_25C29B0;
  uint64_t v314 = unk_25C29A8;
  uint64_t v316 = unk_25C29C0;
  long long v317 = xmmword_25C29C8;
  long long v319 = xmmword_25C29E0;
  uint64_t v318 = unk_25C29D8;
  uint64_t v320 = unk_25C29F0;
  uint64_t v322 = unk_25C2A08;
  long long v321 = xmmword_25C29F8;
  sub_4BDC0C(qword_25C2A10, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25C2A28 = (uint64_t)operator new(0x19uLL);
  unk_25C2A30 = v282;
  strcpy((char *)qword_25C2A28, "From_User_Location_List");
  byte_25C2A57 = 20;
  strcpy(byte_25C2A40, "Origin_Waypoint_List");
  qword_25C2A58 = (uint64_t)operator new(0x20uLL);
  unk_25C2A60 = v278;
  strcpy((char *)qword_25C2A58, "Intermediate_Waypoint_List");
  unk_25C2A70 = operator new(0x20uLL);
  unk_25C2A78 = v280;
  strcpy(unk_25C2A70, "Destination_Waypoint_List");
  byte_25C2A9F = 15;
  strcpy(byte_25C2A88, "{toDestination}");
  byte_25C2AB7 = 13;
  strcpy((char *)&xmmword_25C2AA0, "{Destination}");
  byte_25C2ACF = 7;
  strcpy(byte_25C2AB8, "To_Home");
  byte_25C2AE7 = 14;
  strcpy(byte_25C2AD0, "To_ContactHome");
  byte_25C2AFF = 7;
  strcpy(byte_25C2AE8, "To_Work");
  byte_25C2B17 = 14;
  strcpy(byte_25C2B00, "To_ContactWork");
  strcpy(&byte_25C2B2F, "\nTo_Business");
  strcpy(byte_25C2B18, "To_Address");
  byte_25C2B47 = 11;
  byte_25C2B5F = 16;
  strcpy(byte_25C2B48, "To_Other_Contact");
  strcpy(&byte_25C2B77, "\tTo_ContactSchool");
  strcpy(byte_25C2B60, "To_School");
  byte_25C2B8F = 16;
  byte_25C2BA7 = 17;
  strcpy(algn_25C2B90, "To_PersonLocation");
  qword_25C2BA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C2BB0 = v279;
  strcpy((char *)qword_25C2BA8, "To_ContactCustomLabelAddress");
  byte_25C2BD7 = 7;
  strcpy((char *)&dword_25C2BC0, "At_Home");
  byte_25C2BEF = 14;
  strcpy((char *)&qword_25C2BD8, "At_ContactHome");
  byte_25C2C07 = 7;
  strcpy((char *)&dword_25C2BF0, "At_Work");
  byte_25C2C1F = 14;
  strcpy((char *)&qword_25C2C08, "At_ContactWork");
  strcpy(&byte_25C2C37, "\nAt_Business");
  strcpy((char *)&qword_25C2C20, "At_Address");
  byte_25C2C4F = 11;
  byte_25C2C67 = 16;
  strcpy(algn_25C2C50, "At_Other_Contact");
  byte_25C2C7F = 4;
  strcpy((char *)&dword_25C2C68, "Home");
  byte_25C2C97 = 11;
  strcpy((char *)&qword_25C2C80 + 7, "Home");
  qword_25C2C80 = *(void *)&v266[16];
  byte_25C2CAF = 4;
  strcpy((char *)&dword_25C2C98, "Work");
  byte_25C2CC7 = 11;
  strcpy((char *)&qword_25C2CB0 + 7, "Work");
  qword_25C2CB0 = *(void *)v266;
  byte_25C2CDF = 7;
  strcpy((char *)&dword_25C2CC8, "Address");
  byte_25C2CF7 = 8;
  strcpy((char *)&qword_25C2CE0, "Business");
  byte_25C2D0F = 13;
  qword_25C2CF8 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25C2CF8 + 5) = *(void *)&v266[32];
  byte_25C2D05 = 0;
  byte_25C2D27 = 6;
  strcpy((char *)&dword_25C2D10, "School");
  byte_25C2D3F = 13;
  strcpy((char *)&qword_25C2D28, "ContactSchool");
  byte_25C2D57 = 14;
  strcpy((char *)&qword_25C2D40, "PersonLocation");
  qword_25C2D58 = (uint64_t)operator new(0x20uLL);
  xmmword_25C2D60 = v280;
  strcpy((char *)qword_25C2D58, "ContactCustomLabelAddress");
  if (byte_25C2AB7 < 0)
  {
    sub_4200(&xmmword_25C2D70, (void *)xmmword_25C2AA0, *((unint64_t *)&xmmword_25C2AA0 + 1));
  }
  else
  {
    xmmword_25C2D70 = xmmword_25C2AA0;
    qword_25C2D80 = unk_25C2AB0;
  }
  byte_25C2D9F = 16;
  strcpy((char *)&xmmword_25C2D88, "{PrevExitNumber}");
  byte_25C2DB7 = 10;
  strcpy((char *)&qword_25C2DA0, "{PrevRoad}");
  qword_25C2DB8 = (uint64_t)operator new(0x20uLL);
  unk_25C2DC0 = v281;
  strcpy((char *)qword_25C2DB8, "{RouteTotalExpectedTime}");
  byte_25C2DE7 = 18;
  strcpy(byte_25C2DD0, "{ChargePercentage}");
  qword_25C2DE8 = (uint64_t)operator new(0x20uLL);
  unk_25C2DF0 = v275;
  strcpy((char *)qword_25C2DE8, "{RemainingChargePercentage}");
  byte_25C2E17 = 16;
  strcpy(byte_25C2E00, "{ChargeDuration}");
  byte_25C2E2F = 15;
  strcpy((char *)&qword_25C2E18, "{ConnectorType}");
  byte_25C2E47 = 19;
  strcpy(byte_25C2E30, "{ChargeStationName}");
  byte_25C2E5F = 7;
  strcpy((char *)&dword_25C2E48, "{Power}");
  byte_25C2E77 = 13;
  strcpy((char *)&qword_25C2E60, "{VehicleName}");
  byte_25C2E8F = 18;
  strcpy((char *)&xmmword_25C2E78, "{AreaIncidentName}");
  byte_25C2EA7 = 14;
  strcpy((char *)&qword_25C2E90, "{AreaIncident}");
  byte_25C2EBF = 16;
  strcpy((char *)&xmmword_25C2EA8, "{AffectedRegion}");
  byte_25C2ED7 = 21;
  strcpy(byte_25C2EC0, "{AreaIncidentWeblink}");
  byte_25C2EEF = 20;
  strcpy((char *)&xmmword_25C2ED8, "{AreaIncidentAgency}");
  byte_25C2F07 = 11;
  strcpy((char *)&qword_25C2EF0, "{IssueTime}");
  byte_25C2F1F = 12;
  strcpy((char *)&qword_25C2F08, "{UpdateTime}");
  byte_25C2F37 = 11;
  strcpy((char *)&qword_25C2F20, "{IssueDate}");
  byte_25C2F4F = 12;
  strcpy((char *)&qword_25C2F38, "{UpdateDate}");
  qword_25C2F50 = (uint64_t)operator new(0x20uLL);
  unk_25C2F58 = v281;
  strcpy((char *)qword_25C2F50, "{AreaIncidentDataSource}");
  byte_25C2F7F = 13;
  strcpy((char *)&qword_25C2F68, "{AreaHectare}");
  byte_25C2F97 = 10;
  strcpy((char *)&qword_25C2F80, "{AreaAcre}");
  qword_25C2F98 = (uint64_t)operator new(0x20uLL);
  unk_25C2FA0 = v277;
  strcpy((char *)qword_25C2F98, "{WildfirePercentageContained}");
  qword_25C2FB0 = (uint64_t)operator new(0x28uLL);
  unk_25C2FB8 = v270[2];
  strcpy((char *)qword_25C2FB0, "{WildfireExpectedContainmentDate}");
  qword_25C2FC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C2FD0 = v279;
  strcpy((char *)qword_25C2FC8, "{ServerRecommendedRouteName}");
  qword_25C2FE0 = (uint64_t)operator new(0x20uLL);
  unk_25C2FE8 = v279;
  strcpy((char *)qword_25C2FE0, "{ServerNonRecommendedRoute1}");
  qword_25C2FF8 = (uint64_t)operator new(0x20uLL);
  unk_25C3000 = v279;
  strcpy((char *)qword_25C2FF8, "{ServerNonRecommendedRoute2}");
  byte_25C3027 = 12;
  strcpy((char *)&qword_25C3010, "{ClientDest}");
  byte_25C303F = 6;
  strcpy((char *)&dword_25C3028, "{Name}");
  qword_25C3040 = (uint64_t)operator new(0x20uLL);
  unk_25C3048 = v270[1];
  strcpy((char *)qword_25C3040, "ProactiveAlert_FasterRouteTitle");
  qword_25C3058 = (uint64_t)operator new(0x20uLL);
  unk_25C3060 = v278;
  strcpy((char *)qword_25C3058, "ProactiveAlert_RoadClosure");
  qword_25C3070 = (uint64_t)operator new(0x30uLL);
  unk_25C3078 = v273;
  strcpy((char *)qword_25C3070, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25C3088 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C3090 = v276;
  strcpy((char *)qword_25C3088, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25C30A0 = (uint64_t)operator new(0x28uLL);
  unk_25C30A8 = v276;
  strcpy((char *)qword_25C30A0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25C30B8 = (uint64_t)operator new(0x28uLL);
  unk_25C30C0 = v276;
  strcpy((char *)qword_25C30B8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25C30D0 = (uint64_t)operator new(0x30uLL);
  unk_25C30D8 = xmmword_20B93B0;
  strcpy((char *)qword_25C30D0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25C30FF = 17;
  strcpy(byte_25C30E8, "Proactive_Driving");
  strcpy(&byte_25C3117, "\n{RouteName}");
  strcpy((char *)&qword_25C3100, "_RouteName");
  byte_25C312F = 11;
  qword_25C3130 = (uint64_t)operator new(0x28uLL);
  unk_25C3138 = v270[2];
  strcpy((char *)qword_25C3130, "Pass_Traffic_Light_Spoken_Primary");
  qword_25C3148 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C3150 = v277;
  strcpy((char *)qword_25C3148, "Pass_Stop_Sign_Spoken_Primary");
  *(void *)&algn_25C3150[16] = operator new(0x20uLL);
  *(_OWORD *)&algn_25C3150[24] = v270[0];
  strcpy(*(char **)&algn_25C3150[16], "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25C318F, "\nBannerBody");
  strcpy(&algn_25C3150[40], "BannerHead");
  strcpy(&byte_25C31A7, "\nBannerDescription");
  byte_25C31BF = 17;
  strcpy(&byte_25C31D7, "\n_Incident");
  strcpy((char *)&qword_25C31C0, "VoiceAlert");
  strcpy(&byte_25C31EF, "\t_Area_Incident");
  byte_25C3207 = 14;
  byte_25C321F = 15;
  strcpy((char *)&qword_25C3208, "_Area_Incidents");
  strcpy(&byte_25C3237, "\t_Crash");
  strcpy((char *)&qword_25C3220, "_Accident");
  byte_25C324F = 6;
  byte_25C3267 = 16;
  strcpy((char *)&xmmword_25C3250, "_Congestion_Zone");
  strcpy(&byte_25C327F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25C3268, "_Toll_Zone");
  byte_25C3297 = 19;
  BYTE1(qword_25C32A8) = 116;
  WORD1(qword_25C32A8) = 0;
  HIDWORD(qword_25C32A8) = 301989888;
  strcpy(byte_25C32B0, "_Construction");
  strcpy((char *)&qword_25C3298, "_Incident_Accide");
  byte_25C32C7 = 13;
  byte_25C32DF = 7;
  strcpy((char *)&dword_25C32C8, "_Hazard");
  byte_25C32F7 = 12;
  strcpy((char *)&qword_25C32E0, "_LaneClosure");
  byte_25C330F = 12;
  strcpy((char *)&qword_25C32F8, "_LaneTrailer");
  qmemcpy(&byte_25C3327, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25C3310, "_Shoulder");
  qword_25C3338 = 0x1500007200000000;
  *(void *)algn_25C3334 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25C3340, "_Causing_Traffic_Delay");
  HIBYTE(word_25C3356) = 22;
  byte_25C336F = 6;
  strcpy((char *)&dword_25C3358, "_Timed");
  byte_25C3387 = 12;
  strcpy((char *)&qword_25C3370, "_HasDistance");
  byte_25C339F = 8;
  strcpy((char *)&qword_25C3388, "_Closure");
  strcpy(&byte_25C33B7, "\n_BadRoad");
  strcpy((char *)&qword_25C33A0, "_NoReroute");
  byte_25C33CF = 8;
  byte_25C33E7 = 12;
  strcpy((char *)&qword_25C33D0, "_TollTrailer");
  byte_25C33FF = 12;
  strcpy((char *)&qword_25C33E8, "_BestTrailer");
  byte_25C3417 = 8;
  strcpy((char *)&qword_25C3400, "_Trailer");
  byte_25C342F = 18;
  strcpy((char *)&xmmword_25C3418, "_Secondary_Trailer");
  byte_25C3447 = 8;
  strcpy((char *)&qword_25C3430, "_Savings");
  byte_25C345F = 8;
  strcpy((char *)&qword_25C3448, "_AltRoad");
  byte_25C3477 = 6;
  strcpy((char *)&dword_25C3460, "_Named");
  byte_25C348F = 6;
  strcpy((char *)&dword_25C3478, "_NAMED");
  byte_25C34A7 = 22;
  strcpy((char *)&xmmword_25C3490, "_Named_Suggested_Route");
  qword_25C34C0 = 0x1000000000000000;
  xmmword_25C34B0 = xmmword_20E81D0;
  byte_25C34DF = 11;
  strcpy((char *)&qword_25C34C8, "_Speed_Trap");
  byte_25C34F7 = 4;
  strcpy((char *)&dword_25C34E0, "_UGI");
  byte_25C350F = 12;
  strcpy((char *)&qword_25C34F8, "_Safer_Route");
  qword_25C3510 = (uint64_t)operator new(0x20uLL);
  unk_25C3518 = v270[1];
  strcpy((char *)qword_25C3510, "BlockedRouteByBlockingIncident_");
  qword_25C3528 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  *(_OWORD *)algn_25C3530 = xmmword_20B9280;
  strcpy((char *)qword_25C3528, "BlockedRouteByManeuverRestriction_");
  qword_25C3540 = (uint64_t)operator new(0x20uLL);
  unk_25C3548 = v270[0];
  strcpy((char *)qword_25C3540, "BlockedRouteByTimeRestriction_");
  qword_25C3558 = (uint64_t)operator new(0x28uLL);
  unk_25C3560 = xmmword_20B8FD0;
  strcpy((char *)qword_25C3558, "SuggestRouteToAvoidBlockingIncident_");
  qword_25C3570 = (uint64_t)operator new(0x30uLL);
  unk_25C3578 = xmmword_20B9380;
  strcpy((char *)qword_25C3570, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25C3588 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25C3590 = xmmword_20B93E0;
  strcpy((char *)qword_25C3588, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25C35B7 = 1;
  word_25C35A0 = 95;
  strcpy((char *)&xmmword_25C35B8, "IncidentsCausingDelay_");
  HIBYTE(word_25C35CE) = 22;
  qword_25C35D0 = (uint64_t)operator new(0x19uLL);
  unk_25C35D8 = v282;
  strcpy((char *)qword_25C35D0, "NonVotableRoadIncident_");
  byte_25C35FF = 20;
  strcpy(byte_25C35E8, "VotableRoadIncident_");
  byte_25C3617 = 13;
  strcpy((char *)&qword_25C3600, "AreaIncident_");
  byte_25C362F = 15;
  strcpy((char *)&qword_25C3618, "CongestionZone_");
  qword_25C3630 = (uint64_t)operator new(0x20uLL);
  unk_25C3638 = v281;
  strcpy((char *)qword_25C3630, "EVModifiedChargingStops_");
  byte_25C365F = 13;
  strcpy((char *)&qword_25C3648, "EVDisconnect_");
  byte_25C3677 = 12;
  strcpy((char *)&qword_25C3660, "EVReconnect_");
  qword_25C3678 = (uint64_t)operator new(0x20uLL);
  unk_25C3680 = v279;
  strcpy((char *)qword_25C3678, "EVOfflineToOnlineTransition_");
  byte_25C36A7 = 13;
  strcpy((char *)&qword_25C3690, "EVOfflineSAR_");
  byte_25C36BF = 21;
  strcpy((char *)&xmmword_25C36A8, "EVTowingNotSupported_");
  byte_25C36D7 = 18;
  strcpy(byte_25C36C0, "EVInfeasibleRoute_");
  qword_25C36D8 = (uint64_t)operator new(0x38uLL);
  unk_25C36E0 = xmmword_20B8DF0;
  strcpy((char *)qword_25C36D8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25C36F0 = (uint64_t)operator new(0x40uLL);
  unk_25C36F8 = xmmword_20B98C0;
  strcpy((char *)qword_25C36F0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25C3708 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25C3710 = v274;
  strcpy((char *)qword_25C3708, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_25C3720 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25C3728 = xmmword_20B9A80;
  strcpy((char *)qword_25C3720, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25C3738 = (uint64_t)operator new(0x30uLL);
  unk_25C3740 = v273;
  strcpy((char *)qword_25C3738, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_25C3750 = (uint64_t)v186;
  unk_25C3758 = v274;
  _OWORD *v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25C3768 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C3770 = v272;
  strcpy((char *)qword_25C3768, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_25C3780 = (uint64_t)v187;
  unk_25C3788 = *(_OWORD *)&v266[48];
  _OWORD *v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25C3798 = (uint64_t)operator new(0x28uLL);
  unk_25C37A0 = v276;
  strcpy((char *)qword_25C3798, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25C37B0 = (uint64_t)operator new(0x28uLL);
  unk_25C37B8 = v269;
  strcpy((char *)qword_25C37B0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25C37C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C37D0 = v281;
  strcpy((char *)qword_25C37C8, "OfflineToOnlineNewRoute_");
  qword_25C37E0 = (uint64_t)operator new(0x40uLL);
  unk_25C37E8 = xmmword_20B98C0;
  strcpy((char *)qword_25C37E0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25C380F = 20;
  strcpy((char *)&xmmword_25C37F8, "LPR_OFFLINE_REROUTE_");
  byte_25C3827 = 16;
  strcpy(algn_25C3810, "LPR_OFFLINE_SAR_");
  byte_25C383F = 20;
  strcpy((char *)&xmmword_25C3828, "LPR_OFFLINE_REROUTE_");
  byte_25C3857 = 16;
  strcpy(byte_25C3840, "LPR_OFFLINE_SAR_");
  byte_25C386F = 19;
  strcpy((char *)&xmmword_25C3858, "SuggestFasterRoute_");
  qword_25C3870 = (char *)operator new(0x20uLL);
  xmmword_25C3878 = v280;
  strcpy(qword_25C3870, "AreaIncidentSaferReroute_");
  byte_25C389F = 12;
  strcpy((char *)&qword_25C3888, "_Remove_Stop");
  byte_25C38B7 = 13;
  strcpy((char *)&qword_25C38A0, "_Remove_Stops");
  strcpy(&byte_25C38CF, "\t_Add_Stops");
  strcpy((char *)&qword_25C38B8, "_Add_Stop");
  strcpy(&byte_25C38E7, "\n_Change_Route");
  byte_25C38FF = 13;
  byte_25C3917 = 15;
  strcpy((char *)&qword_25C3900, "_Different_Stop");
  byte_25C392F = 16;
  strcpy((char *)&xmmword_25C3918, "_Different_Stops");
  byte_25C3947 = 15;
  strcpy((char *)&qword_25C3930, "_EV_Remove_Stop");
  byte_25C395F = 16;
  strcpy((char *)&xmmword_25C3948, "_EV_Remove_Stops");
  byte_25C3977 = 12;
  strcpy((char *)&qword_25C3960, "_EV_Add_Stop");
  byte_25C398F = 13;
  strcpy((char *)&qword_25C3978, "_EV_Add_Stops");
  byte_25C39A7 = 15;
  strcpy((char *)&qword_25C3990, "_EV_Low_Battery");
  byte_25C39BF = 14;
  strcpy((char *)&qword_25C39A8, "_EV_Infeasible");
  byte_25C39D7 = 15;
  strcpy((char *)&qword_25C39C0, "_EV_Last_Chance");
  qword_25C39D8 = (uint64_t)operator new(0x20uLL);
  unk_25C39E0 = v281;
  strcpy((char *)qword_25C39D8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25C38D8;
  qword_25C39F0 = (uint64_t)operator new(0x20uLL);
  unk_25C39F8 = v280;
  strcpy((char *)qword_25C39F0, "_EV_Low_Battery_Add_Stops");
  qword_25C3A08 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25C3A10 = v282;
  strcpy((char *)qword_25C3A08, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25C38E7;
  if (byte_25C38E7 >= 0) {
    size_t v190 = byte_25C38E7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_25C3A28 = v190 + 14;
    unk_25C3A30 = v195 | 0x8000000000000000;
    qword_25C3A20 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    unint64_t v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25C3A28) = 0;
    WORD1(qword_25C3A28) = 0;
    HIDWORD(qword_25C3A28) = 0;
    unk_25C3A30 = 0;
    byte_25C3A37 = v190 + 14;
    strcpy((char *)&qword_25C3A20, "_EV_Infe");
    unint64_t v192 = (char *)&qword_25C3A28 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25C38D0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  uint64_t v198 = (char *)operator new(0x20uLL);
  qword_25C3A38 = (uint64_t)v198;
  unk_25C3A40 = v281;
  *(void *)uint64_t v198 = qword_25C39C0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25C39C0 + 7);
  *(void *)(v198 + 15) = qword_25C38B8;
  v198[23] = word_25C38C0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    unint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_25C3A58 = v190 + 15;
    unk_25C3A60 = v202 | 0x8000000000000000;
    qword_25C3A50 = (uint64_t)v200;
  }
  else
  {
    unint64_t v200 = &qword_25C3A50;
    qword_25C3A58 = 0;
    unk_25C3A60 = 0;
    qword_25C3A50 = 0;
    byte_25C3A67 = v190 + 15;
  }
  uint64_t *v200 = qword_25C39C0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25C39C0 + 7);
  uint64_t v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_25C38D0;
    }
    else {
      v204 = (uint64_t *)qword_25C38D0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25C3A7F = 17;
  strcpy((char *)&xmmword_25C3A68, "_EV_Forced_Detour");
  qword_25C3A80 = (uint64_t)operator new(0x20uLL);
  unk_25C3A88 = v280;
  strcpy((char *)qword_25C3A80, "_EV_Higher_Arrival_Charge");
  qword_25C3A98 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C3AA0 = xmmword_20B8FD0;
  strcpy((char *)qword_25C3A98, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25C3AC7 = 16;
  strcpy(&algn_25C3AA0[16], "_EV_Out_Of_Range");
  qword_25C3AC8 = (uint64_t)operator new(0x20uLL);
  unk_25C3AD0 = v275;
  strcpy((char *)qword_25C3AC8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25C3AE0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25C3AF6) = 22;
  qword_25C3AF8 = (uint64_t)operator new(0x19uLL);
  unk_25C3B00 = v282;
  strcpy((char *)qword_25C3AF8, "_EV_Forced_Modify_Stops");
  byte_25C3B27 = 19;
  strcpy(byte_25C3B10, "_EV_Forced_Add_Stop");
  byte_25C3B3F = 20;
  strcpy((char *)&xmmword_25C3B28, "_EV_Forced_Add_Stops");
  byte_25C3B57 = 21;
  strcpy(byte_25C3B40, "_EV_Battery_Info_Lost");
  qword_25C3B58 = (uint64_t)operator new(0x20uLL);
  unk_25C3B60 = v280;
  strcpy((char *)qword_25C3B58, "_EV_Battery_Info_Restored");
  qword_25C3B70 = (uint64_t)operator new(0x20uLL);
  unk_25C3B78 = v281;
  strcpy((char *)qword_25C3B70, "_EV_Towing_Not_Supported");
  qword_25C3B88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C3B90 = v271;
  strcpy((char *)qword_25C3B88, "_EV_Offline_to_Online_Transition");
  byte_25C3BB7 = 15;
  strcpy((char *)&qword_25C3BA0, "_EV_Offline_SAR");
  qword_25C3BB8 = (uint64_t)operator new(0x20uLL);
  unk_25C3BC0 = v279;
  strcpy((char *)qword_25C3BB8, "_Offline_to_Online_New_Route");
  byte_25C3BE7 = 12;
  strcpy((char *)&qword_25C3BD0, "BannerButton");
  byte_25C3BFF = 8;
  strcpy((char *)&qword_25C3BE8, "_Dismiss");
  byte_25C3C17 = 3;
  word_25C3C00 = 20319;
  byte_25C3C02 = 75;
  byte_25C3C03 = 0;
  byte_25C3C2F = 11;
  strcpy((char *)&qword_25C3C18, "_Still_Here");
  byte_25C3C47 = 8;
  strcpy((char *)&qword_25C3C30, "_Cleared");
  qmemcpy(&byte_25C3C5F, "\nBannerButton", 13);
  strcpy((char *)&qword_25C3C48, "_No_Thanks");
  uint64_t v205 = qword_25C3BD8;
  qword_25C3C70 = 0x1400000000000000;
  *(void *)algn_25C3C6C = 0x7373696D7369445FLL;
  qword_25C3C88 = 0xF00000000000000;
  qword_25C3C80 = 0x4B4F5F6E6F7474;
  int v206 = byte_25C3977;
  if (byte_25C3977 >= 0) {
    size_t v207 = byte_25C3977;
  }
  else {
    size_t v207 = qword_25C3968;
  }
  unint64_t v208 = v207 + 12;
  qword_25C3C78 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    uint64_t v212 = (char *)operator new(v210 + 1);
    qword_25C3C98 = v207 + 12;
    unk_25C3CA0 = v211 | 0x8000000000000000;
    qword_25C3C90 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)uint64_t v212 = *(void *)"BannerButton";
    unint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25C3C98) = 0;
    HIWORD(qword_25C3C98) = 0;
    unk_25C3CA0 = 0;
    byte_25C3CA7 = v207 + 12;
    strcpy((char *)&qword_25C3C90, "BannerButton");
    unint64_t v209 = (char *)&qword_25C3C98 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_25C3960;
  }
  else {
    v213 = (uint64_t *)qword_25C3960;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25C398F;
  if (byte_25C398F >= 0) {
    size_t v215 = byte_25C398F;
  }
  else {
    size_t v215 = unk_25C3980;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    uint64_t v220 = (char *)operator new(v218 + 1);
    qword_25C3CB0 = v215 + 12;
    unk_25C3CB8 = v219 | 0x8000000000000000;
    qword_25C3CA8 = (uint64_t)v220;
    *(void *)uint64_t v220 = qword_25C3BD0;
    *((_DWORD *)v220 + 2) = qword_25C3BD8;
    unint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25C3CB0 = 0;
    unk_25C3CB8 = 0;
    byte_25C3CBF = v215 + 12;
    LODWORD(qword_25C3CB0) = qword_25C3BD8;
    qword_25C3CA8 = qword_25C3BD0;
    unint64_t v217 = (char *)&qword_25C3CB0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_25C3978;
  }
  else {
    v221 = (uint64_t *)qword_25C3978;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25C3947;
  if (byte_25C3947 >= 0) {
    size_t v223 = byte_25C3947;
  }
  else {
    size_t v223 = unk_25C3938;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    uint64_t v228 = (char *)operator new(v226 + 1);
    qword_25C3CC8 = v223 + 12;
    unk_25C3CD0 = v227 | 0x8000000000000000;
    qword_25C3CC0 = (uint64_t)v228;
    *(void *)uint64_t v228 = qword_25C3BD0;
    *((_DWORD *)v228 + 2) = qword_25C3BD8;
    unint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25C3CC8 = 0;
    unk_25C3CD0 = 0;
    byte_25C3CD7 = v223 + 12;
    LODWORD(qword_25C3CC8) = qword_25C3BD8;
    qword_25C3CC0 = qword_25C3BD0;
    unint64_t v225 = (char *)&qword_25C3CC8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_25C3930;
  }
  else {
    v229 = (uint64_t *)qword_25C3930;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25C3BE7;
  if (byte_25C3BE7 >= 0) {
    size_t v231 = byte_25C3BE7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25C395F;
  if (byte_25C395F >= 0) {
    size_t v233 = byte_25C395F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25C3948 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    unint64_t v235 = &qword_25C3CD8;
    qword_25C3CE0 = 0;
    unk_25C3CE8 = 0;
    qword_25C3CD8 = 0;
    byte_25C3CEF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  unint64_t v235 = (uint64_t *)operator new(v242 + 1);
  qword_25C3CE0 = v233 + v231;
  unk_25C3CE8 = v243 | 0x8000000000000000;
  qword_25C3CD8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_25C3BD0;
    }
    else {
      v236 = (uint64_t *)qword_25C3BD0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_25C3948;
    }
    else {
      v238 = (long long *)xmmword_25C3948;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_25C3CF8 = v231 + 11;
    unk_25C3D00 = v245 | 0x8000000000000000;
    qword_25C3CF0 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_25C3CF0;
    qword_25C3CF8 = 0;
    unk_25C3D00 = 0;
    qword_25C3CF0 = 0;
    byte_25C3D07 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25C3CF0 + 7) = *(_DWORD *)((char *)&qword_25C3C18 + 7);
      qword_25C3CF0 = qword_25C3C18;
      BYTE3(qword_25C3CF8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    uint64_t v246 = &qword_25C3BD0;
  }
  else {
    uint64_t v246 = (uint64_t *)qword_25C3BD0;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25C3C18 + 7);
  *(void *)v247 = qword_25C3C18;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    int v249 = &qword_25C3D08;
    qword_25C3D10 = 0;
    unk_25C3D18 = 0;
    qword_25C3D08 = 0;
    byte_25C3D1F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  int v249 = (uint64_t *)operator new(v264 + 1);
  qword_25C3D10 = v231 + 8;
  unk_25C3D18 = v265 | 0x8000000000000000;
  qword_25C3D08 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_25C3BD0;
    }
    else {
      v250 = (uint64_t *)qword_25C3BD0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_25C3C30;
  v251[8] = 0;
  int v252 = byte_25C3C5F;
  if (byte_25C3C5F >= 0) {
    size_t v253 = byte_25C3C5F;
  }
  else {
    size_t v253 = qword_25C3C50;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    unint64_t v255 = &qword_25C3D20;
    qword_25C3D28 = 0;
    unk_25C3D30 = 0;
    qword_25C3D20 = 0;
    byte_25C3D37 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  unint64_t v255 = (uint64_t *)operator new(v262 + 1);
  qword_25C3D28 = v253 + v231;
  unk_25C3D30 = v263 | 0x8000000000000000;
  qword_25C3D20 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_25C3BD0;
    }
    else {
      v256 = (uint64_t *)qword_25C3BD0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_25C3C48;
    }
    else {
      v258 = (uint64_t *)qword_25C3C48;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25C3D4F, "\n{newroute}");
  strcpy((char *)&qword_25C3D38, "{roadname}");
  strcpy(&byte_25C3D67, "\n{count}");
  byte_25C3D7F = 7;
  strcpy(&byte_25C3D97, "\n{dur}");
  strcpy((char *)&qword_25C3D80, "{duration}");
  byte_25C3DAF = 5;
  qword_25C3DB0 = (uint64_t)operator new(0x20uLL);
  unk_25C3DB8 = v278;
  strcpy((char *)qword_25C3DB0, "{PleaseProceedWithCaution}");
  byte_25C3DDF = 15;
  strcpy((char *)&qword_25C3DC8, "{UserRouteName}");
  byte_25C3DF7 = 20;
  strcpy((char *)&xmmword_25C3DE0, "{SuggestedRouteName}");
  byte_25C3E0F = 18;
  strcpy(byte_25C3DF8, "Speed_Camera_Ahead");
  qword_25C3E10 = (uint64_t)operator new(0x20uLL);
  unk_25C3E18 = v277;
  strcpy((char *)qword_25C3E10, "Red_Light_Camera_Ahead_Spoken");
  qword_25C3E28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C3E30 = v277;
  strcpy((char *)qword_25C3E28, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25C3E40 = (uint64_t)operator new(0x28uLL);
  unk_25C3E48 = v272;
  strcpy((char *)qword_25C3E40, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25C3E58 = (uint64_t)operator new(0x28uLL);
  unk_25C3E60 = v267;
  strcpy((char *)qword_25C3E58, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25C3E70 = (uint64_t)operator new(0x20uLL);
  unk_25C3E78 = v279;
  strcpy((char *)qword_25C3E70, "Camera_Ahead_Multiple_Spoken");
  qword_25C3E88 = (uint64_t)operator new(0x30uLL);
  unk_25C3E90 = v268;
  strcpy((char *)qword_25C3E88, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25C3EA0 = (char *)operator new(0x30uLL);
  strcpy(qword_25C3EA0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25C3ECF = 16;
  xmmword_25C3EA8 = v268;
  strcpy(byte_25C3EB8, "_Speed_Limit_Mph");
  byte_25C3EE7 = 16;
  strcpy(algn_25C3ED0, "_Speed_Limit_Kph");
  byte_25C3EFF = 11;
  strcpy((char *)&qword_25C3EE8, "Watch_Speed");
  byte_25C3F17 = 4;
  strcpy((char *)&dword_25C3F00, "_One");
  byte_25C3F2F = 4;
  strcpy((char *)&dword_25C3F18, "_Two");
  byte_25C3F47 = 4;
  strcpy((char *)&dword_25C3F30, "_Few");
  byte_25C3F5F = 5;
  strcpy((char *)&dword_25C3F48, "_Many");
  byte_25C3F77 = 6;
  strcpy((char *)&dword_25C3F60, "_Other");
  byte_25C3F8F = 4;
  strcpy((char *)&dword_25C3F78, "_ONE");
  byte_25C3FA7 = 7;
  strcpy((char *)&dword_25C3F90, "{Speed}");
  byte_25C3FBF = 8;
  strcpy((char *)&qword_25C3FA8, "Dismount");
  byte_25C3FD7 = 4;
  strcpy((char *)&dword_25C3FC0, "Walk");
  byte_25C3FEF = 5;
  strcpy((char *)&dword_25C3FD8, "Mount");
  byte_25C4007 = 7;
  strcpy((char *)&dword_25C3FF0, "Remount");
  strcpy(&byte_25C401F, "\t_Crosswalk");
  strcpy((char *)&qword_25C4008, "Walk_Road");
  strcpy(&byte_25C4037, "\n_PLURAL");
  byte_25C404F = 7;
  strcpy(&byte_25C4067, "\n{description1}");
  strcpy((char *)&qword_25C4050, "_SECONDARY");
  byte_25C407F = 14;
  byte_25C4097 = 14;
  strcpy((char *)&qword_25C4080, "{description2}");
  byte_25C40AF = 21;
  strcpy((char *)&xmmword_25C4098, "TWO_ROAD_DESCRIPTIONS");
  byte_25C40C7 = 17;
  strcpy((char *)&xmmword_25C40B0, "{SlopePercentage}");
  byte_25C40DF = 15;
  strcpy((char *)&qword_25C40C8, "_Protected_Lane");
  strcpy(&byte_25C40F7, "\n_Paved_Path");
  strcpy((char *)&qword_25C40E0, "_Bike_Path");
  byte_25C410F = 11;
  byte_25C4127 = 15;
  strcpy((char *)&qword_25C4110, "_Dedicated_Lane");
  byte_25C413F = 12;
  strcpy((char *)&qword_25C4128, "_Shared_Path");
  strcpy(&byte_25C4157, "\n_UnnamedRoad");
  strcpy((char *)&qword_25C4140, "_Bike_Lane");
  byte_25C416F = 12;
  byte_25C4187 = 5;
  strcpy((char *)&dword_25C4170, "_Path");
  byte_25C419F = 6;
  strcpy((char *)&dword_25C4188, "_Trail");
  strcpy(&byte_25C41B7, "\t_Plaza");
  strcpy((char *)&qword_25C41A0, "_Sidewalk");
  byte_25C41CF = 6;
  byte_25C41E7 = 15;
  strcpy((char *)&qword_25C41D0, "_Moving_Walkway");
  byte_25C41FF = 14;
  strcpy((char *)&qword_25C41E8, "Two_Stage_Turn");
  byte_25C4217 = 16;
  strcpy((char *)&xmmword_25C4200, "{OptionalPeriod}");
  byte_25C422F = 18;
  strcpy((char *)&xmmword_25C4218, "Advisory_Separator");
  byte_25C4247 = 6;
  strcpy((char *)&dword_25C4230, "Period");
  byte_25C425F = 21;
  strcpy((char *)&xmmword_25C4248, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25C4260, "Advisory_Title_Notices");
  HIBYTE(word_25C4276) = 22;
  byte_25C428F = 7;
  strcpy((char *)&dword_25C4278, "_DETAIL");
  byte_25C42A7 = 17;
  strcpy((char *)&xmmword_25C4290, "_LONG_REGION_LIST");
  byte_25C42BF = 16;
  strcpy((char *)&xmmword_25C42A8, "Advisory_Grouped");
  byte_25C42D7 = 11;
  strcpy((char *)&qword_25C42C0, "_Advisories");
  qword_25C42D8 = (uint64_t)operator new(0x20uLL);
  unk_25C42E0 = v275;
  strcpy((char *)qword_25C42D8, "Advisory_WILDFIRE_METADATA_");
  byte_25C4307 = 8;
  strcpy((char *)&qword_25C42F0, "Advisory");
  byte_25C431F = 13;
  strcpy((char *)&qword_25C4308, "MPR_NUM_STOPS");
  byte_25C4337 = 17;
  strcpy(byte_25C4320, "EV_CHARGE_STATION");
  byte_25C434F = 11;
  strcpy((char *)&qword_25C4338, "_NAMED_CITY");
  byte_25C4367 = 5;
  strcpy((char *)&dword_25C4350, "_Stop");
  strcpy(&byte_25C437F, "\n{StopsCount}");
  strcpy((char *)&qword_25C4368, "{CityName}");
  byte_25C4397 = 12;
  byte_25C43AF = 11;
  strcpy((char *)&qword_25C4398, "_With_Other");
  byte_25C43C7 = 15;
  strcpy((char *)&qword_25C43B0, "{DepartureTime}");
  qword_25C43C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C43D0 = v276;
  strcpy((char *)qword_25C43C8, "Ending_Charge_Station_Port_Availability");
  qword_25C43E0 = (uint64_t)operator new(0x28uLL);
  unk_25C43E8 = v269;
  strcpy((char *)qword_25C43E0, "Ending_Charge_Station_No_Availability");
  qword_25C43F8 = (uint64_t)operator new(0x28uLL);
  unk_25C4400 = v272;
  strcpy((char *)qword_25C43F8, "Ending_Charge_Station_No_Real_Time");
  byte_25C4427 = 16;
  strcpy(byte_25C4410, "{AvailablePorts}");
  byte_25C443F = 12;
  strcpy((char *)&qword_25C4428, "{TotalPorts}");
  byte_25C4457 = 14;
  strcpy((char *)&qword_25C4440, "{ManeuverIcon}");
  qword_25C4458 = (uint64_t)operator new(0x38uLL);
  unk_25C4460 = xmmword_20B9A60;
  strcpy((char *)qword_25C4458, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25C4470 = (uint64_t)operator new(0x20uLL);
  unk_25C4478 = v275;
  strcpy((char *)qword_25C4470, "Walking_Destination_Unnamed");
  qword_25C4488 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25C4490 = v277;
  strcpy((char *)qword_25C4488, "TrafficDelay_Label_Title_Sign");
  qword_25C44A0 = (uint64_t)operator new(0x20uLL);
  unk_25C44A8 = v279;
  strcpy((char *)qword_25C44A0, "Special_Guidance_Instruction");
  byte_25C44CF = 2;
  strcpy((char *)&word_25C44B8, "CZ");
  byte_25C44E7 = 3;
  dword_25C44D0 = 5919811;
  unk_25C44FF = 3;
  dword_25C44E8 = 6243649;
  byte_25C4517 = 0;
  byte_25C452F = 7;
  strcpy((char *)&dword_25C4518, "TRANSIT");
  byte_25C4547 = 7;
  strcpy((char *)&dword_25C4530, "OFFLINE");
  qword_25C4548 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25C4550 = v267;
  strcpy((char *)qword_25C4548, "Advisory_Card_French_Climate_Law_Title");
  qword_25C4560 = (uint64_t)operator new(0x30uLL);
  unk_25C4568 = xmmword_20B93C0;
  strcpy((char *)qword_25C4560, "Advisory_Card_French_Climate_Law_Details");
  qword_25C4578 = (uint64_t)operator new(0x30uLL);
  unk_25C4580 = v273;
  strcpy((char *)qword_25C4578, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25C4590 = (uint64_t)operator new(0x20uLL);
  unk_25C4598 = v279;
  strcpy((char *)qword_25C4590, "{ClimateLawLearnMoreWeblink}");
  byte_25C45BF = 3;
  dword_25C45A8 = 4280902;
  qword_25C45C0 = (uint64_t)operator new(0x70uLL);
  unk_25C45C8 = xmmword_20E81E0;
  strcpy((char *)qword_25C45C0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  byte_25C45EF = 1;
  word_25C45D8 = 65;
  byte_25C4607 = 1;
  word_25C45F0 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25C4638 = 0u;
  xmmword_25C4648 = 0u;
  dword_25C4658 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25C4638, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25C4638, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25C4638, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25C4638, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  qword_25C4610 = 0;
  qword_25C4618 = 0;
  qword_25C4608 = 0;
  v259 = operator new(9uLL);
  *(void *)v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25C4608 = (uint64_t)v259;
  qword_25C4610 = (uint64_t)(v259 + 9);
  qword_25C4618 = (uint64_t)(v259 + 9);
  qword_25C4620 = 0;
  qword_25C4628 = 0;
  unk_25C4630 = 0;
  v260 = (char *)operator new(9uLL);
  qword_25C4628 = (uint64_t)(v260 + 9);
  unk_25C4630 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25C4620 = (uint64_t)v260;
  return result;
}

void sub_7F34C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

const void **sub_7F3820@<X0>(const void **result@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (void *)a3;
  int v4 = *((char *)result + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)result + 23);
  }
  else {
    size_t v5 = (size_t)result[1];
  }
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  long long v10 = result;
  if (v8 <= 0x16)
  {
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 23) = v8;
    if (!v5) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v11 = v8 | 7;
  }
  uint64_t v12 = v11 + 1;
  double result = (const void **)operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  void *v3 = result;
  uint64_t v3 = result;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0) {
      size_t v13 = v10;
    }
    else {
      size_t v13 = *v10;
    }
    double result = (const void **)memmove(v3, v13, v5);
  }
LABEL_18:
  unint64_t v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0) {
      long long v15 = a2;
    }
    else {
      long long v15 = *a2;
    }
    double result = (const void **)memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return result;
}

std::string::size_type sub_7F3934(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  *(void *)a1 = off_2439BF8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v89 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(unsigned char *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  unint64_t v88 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(unsigned char *)(a1 + 144) = 1;
  sub_6F30A4(a1 + 152);
  sub_6F30A4(a1 + 304);
  sub_6F30A4(a1 + 456);
  sub_6F30A4(a1 + 608);
  sub_6F30A4(a1 + 760);
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 1008) = -1;
  *(_DWORD *)(a1 + 1016) = 0x7FFFFFFF;
  *(void *)(a1 + 1024) = -1;
  *(void *)(a1 + 1032) = -1;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1048) = 0;
  *(_DWORD *)(a1 + 1056) = -1935635296;
  *(void *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1071) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  *(void *)(a1 + 1096) = 0;
  *(unsigned char *)(a1 + 1108) = 100;
  *(void *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(unsigned char *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1320) = xmmword_20B8E30;
  *(void *)(a1 + 1336) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 1368) = 0;
  *(void *)(a1 + 1360) = 0;
  *(unsigned char *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1380) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  sub_5F3B34(a1 + 1416);
  *(_DWORD *)(a1 + 1608) = -1;
  *(_DWORD *)(a1 + 1616) = -1;
  *(_DWORD *)(a1 + 1619) = -1;
  *(void *)(a1 + 1623) = 0;
  *(void *)(a1 + 1639) = 0;
  *(void *)(a1 + 1631) = 0;
  *(_WORD *)(a1 + 1647) = 0;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1672) = 0;
  *(void *)(a1 + 1664) = 0;
  *(unsigned char *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1688) = -1;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1702) = 0;
  *(_DWORD *)(a1 + 1712) = 0x7FFFFFFF;
  *(void *)(a1 + 1728) = 0;
  *(_DWORD *)(a1 + 1720) = 0x7FFFFFFF;
  *(void *)(a1 + 1724) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 1736) = 0;
  *(void *)(a1 + 1744) = 0x8000000080000000;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  size_t v87 = (_DWORD *)(a1 + 1688);
  *(unsigned char *)(a1 + 1800) = 0;
  *(_DWORD *)(a1 + 1804) = 0x7FFFFFFF;
  *(void *)(a1 + 1808) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1824) = -1;
  *(void *)(a1 + 1832) = 0;
  *(void *)(a1 + 1840) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1848) = *(_DWORD *)(sub_4A5E10((void *)(a4 + 1064), a5) + 160);
  *(unsigned char *)(a1 + 1852) = 0;
  uint64_t v12 = (_OWORD *)(a1 + 1864);
  *(_DWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1859) = 0;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  *(_OWORD *)(a1 + 1864) = v13;
  *(_OWORD *)(a1 + 1880) = v13;
  *(_OWORD *)(a1 + 1896) = v13;
  *(void *)(a1 + 1912) = -1;
  *(_DWORD *)(a1 + 1920) = 0;
  *(void *)(a1 + 1928) = -1;
  *(_DWORD *)(a1 + 1936) = 0;
  *(void *)(a1 + 1944) = 0;
  *(void *)(a1 + 1952) = a2;
  *(void *)(a1 + 1960) = a3;
  *(void *)(a1 + 1968) = a4 + 7376;
  unint64_t v14 = (uint64_t *)(a1 + 1976);
  *(void *)(a1 + 1976) = 0;
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 1984) = 0;
  *(unsigned char *)(a1 + 2000) = 1;
  *(_DWORD *)(a1 + 2004) = 0;
  *(void *)(a1 + 2008) = -1;
  *(void *)(a1 + 2016) = -1;
  *(void *)(a1 + 2024) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2088) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 2096) = 0;
  *(void *)(a1 + 2118) = 0;
  *(void *)(a1 + 2104) = 0;
  *(void *)(a1 + 2112) = 0;
  *(_DWORD *)(a1 + 2128) = a6 + 1;
  uint64_t v15 = *(void *)(a4 + 1064);
  uint64_t v16 = (unsigned __int8 *)(v15 + 2400 * a5);
  *(unsigned char *)(a1 + 1853) = v16[560];
  *(unsigned char *)(a1 + 1854) = v16[892];
  int v17 = v16[328];
  if ((v17 & 0xFE) == 4) {
    int v17 = *(unsigned __int8 *)(a3 + 1176);
  }
  *(unsigned char *)(a1 + 1855) = v17;
  if (v17 == 3 || (BOOL v18 = 0, !v17))
  {
    BOOL v19 = *(void *)(v15 + 2400 * a5 + 568) != -1
       || *(void *)(v15 + 2400 * a5 + 576) != -1
       || *(void *)(v15 + 2400 * a5 + 584) != -1
       || *(void *)(v15 + 2400 * a5 + 592) != -1
       || *(void *)(v15 + 2400 * a5 + 600) != -1
       || *(void *)(v15 + 2400 * a5 + 608) != -1
       || *(void *)(v15 + 2400 * a5 + 616) != -1;
    BOOL v18 = !v19;
  }
  uint64_t v20 = (_OWORD *)(a1 + 2000);
  *(unsigned char *)(a1 + 1856) = v18;
  uint64_t v21 = v15 + 2400 * a5;
  *(unsigned char *)(a1 + 1857) = *(unsigned char *)(v21 + 304);
  *(unsigned char *)(a1 + 1861) = *(unsigned char *)(v21 + 680);
  *(unsigned char *)(a1 + 1862) = *(unsigned char *)(v21 + 320);
  long long v23 = *(_OWORD *)(v21 + 600);
  long long v22 = *(_OWORD *)(v21 + 616);
  long long v24 = *(_OWORD *)(v21 + 584);
  *(_OWORD *)(a1 + 1924) = *(_OWORD *)(v21 + 628);
  *(_OWORD *)(a1 + 1896) = v23;
  *(_OWORD *)(a1 + 1912) = v22;
  *(_OWORD *)(a1 + 1880) = v24;
  *uint64_t v12 = *(_OWORD *)(v21 + 568);
  *(void *)(a1 + 1944) = *(void *)(v21 + 648);
  *(unsigned char *)(a1 + 2125) = *(unsigned char *)(v21 + 2226);
  if (v14 == (uint64_t *)(v21 + 1872))
  {
    long long v27 = *(_OWORD *)(v15 + 2400 * a5 + 1912);
    *uint64_t v20 = *(_OWORD *)(v15 + 2400 * a5 + 1896);
    *(_OWORD *)(a1 + 2016) = v27;
  }
  else
  {
    sub_5A09C0(v14, *(void *)(v21 + 1872), *(void *)(v21 + 1880), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v21 + 1880) - *(void *)(v21 + 1872)) >> 3));
    uint64_t v25 = v15 + 2400 * a5;
    long long v26 = *(_OWORD *)(v25 + 1912);
    *uint64_t v20 = *(_OWORD *)(v25 + 1896);
    *(_OWORD *)(a1 + 2016) = v26;
    sub_5A0D34((uint64_t *)(a1 + 2032), *(void *)(v25 + 1928), *(void *)(v25 + 1936), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v25 + 1936) - *(void *)(v25 + 1928)) >> 4));
    int v17 = *(unsigned __int8 *)(a1 + 1855);
  }
  long long v28 = (_OWORD *)(v15 + 2400 * a5);
  long long v29 = v28[122];
  long long v30 = v28[123];
  *(_OWORD *)(a1 + 2081) = *(_OWORD *)((char *)v28 + 1977);
  *(_OWORD *)(a1 + 2056) = v29;
  *(_OWORD *)(a1 + 2072) = v30;
  *(_OWORD *)(a1 + 2104) = v28[125];
  if (v17 == 2 && (unsigned int v31 = *(_DWORD *)(v15 + 2400 * a5 + 160), v31 <= 0x23))
  {
    unint64_t v32 = (0x804000010uLL >> v31) & 1;
    if (!*(unsigned char *)(*(void *)(a1 + 1960) + 1405)) {
      goto LABEL_34;
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    if (!*(unsigned char *)(*(void *)(a1 + 1960) + 1405))
    {
LABEL_34:
      *(unsigned char *)(a1 + 1858) = 0;
LABEL_35:
      BOOL v34 = 0;
      *(unsigned char *)(a1 + 1859) = 0;
      goto LABEL_36;
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 1952) + 1930)) {
    BOOL v33 = *(unsigned char *)(v21 + 304) == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (v33) {
    LOBYTE(v32) = 1;
  }
  if ((v32 & 1) != 0
    || *(void *)v12 != -1
    || *(void *)(a1 + 1872) != -1
    || *(void *)(a1 + 1880) != -1
    || *(void *)(a1 + 1888) != -1
    || *(void *)(a1 + 1896) != -1
    || *(void *)(a1 + 1904) != -1)
  {
    goto LABEL_34;
  }
  uint64_t v85 = *(void *)(a1 + 1912);
  *(unsigned char *)(a1 + 1858) = v85 == -1;
  if (v85 != -1) {
    goto LABEL_35;
  }
  int v86 = *(unsigned __int8 *)(a1 + 1856);
  *(unsigned char *)(a1 + 1859) = v86;
  BOOL v34 = v86 == 0;
LABEL_36:
  *(unsigned char *)(a1 + 1860) = v34;
  sub_7F46E4(a1, v15 + 2400 * a5);
  long long v35 = (const std::string *)sub_64F450(a4);
  std::string::operator=((std::string *)(a1 + 984), v35);
  _DWORD *v87 = *(_DWORD *)(a4 + 288);
  uint64_t v36 = *(void *)(a4 + 296);
  *(void *)(a1 + 1702) = *(void *)(a4 + 302);
  *(void *)(a1 + 1696) = v36;
  long long v37 = *(_OWORD *)(a4 + 312);
  long long v38 = *(_OWORD *)(a4 + 328);
  *(void *)(a1 + 1744) = *(void *)(a4 + 344);
  *(_OWORD *)(a1 + 1712) = v37;
  *(_OWORD *)(a1 + 1728) = v38;
  if (v87 != (_DWORD *)(a4 + 288))
  {
    sub_472BC8((void *)(a1 + 1752), *(char **)(a4 + 352), *(char **)(a4 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 360) - *(void *)(a4 + 352)) >> 2));
    sub_472BC8((void *)(a1 + 1776), *(char **)(a4 + 376), *(char **)(a4 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 384) - *(void *)(a4 + 376)) >> 2));
    *(_OWORD *)(a1 + 1800) = *(_OWORD *)(a4 + 400);
    unsigned int v39 = *(_DWORD *)(a1 + 1824);
    int v40 = *(_DWORD *)(a4 + 424);
    if (v39 == v40)
    {
      if (v39 <= 1) {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
      }
    }
    else
    {
      if (v40 == 1)
      {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
        int v40 = *(_DWORD *)(a4 + 424);
      }
      else if (!v40)
      {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
      }
      *(_DWORD *)(a1 + 1824) = v40;
    }
  }
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a4 + 432);
  sub_5A303C(a1 + 1008, a4 + 10880);
  if (a1 + 1008 != a4 + 10880) {
    sub_4AD448((void *)(a1 + 1384), *(char **)(a4 + 11256), *(char **)(a4 + 11264), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a4 + 11264) - *(void *)(a4 + 11256)) >> 3));
  }
  *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a4 + 11280);
  sub_52FD00(a1 + 1416, a4 + 11288);
  sub_4F39B8(a1 + 1576, (std::string *)(a4 + 11448));
  *(void *)(a1 + 1616) = *(void *)(a4 + 11488);
  std::string::operator=((std::string *)(a1 + 1624), (const std::string *)(a4 + 11496));
  *(unsigned char *)(a1 + 1648) = *(unsigned char *)(a4 + 11520);
  std::string::operator=((std::string *)(a1 + 1656), (const std::string *)(a4 + 11528));
  *(unsigned char *)(a1 + 1680) = *(unsigned char *)(a4 + 11552);
  sub_7F4CFC(a1, (uint64_t)v92);
  long long v41 = *(long long **)v89;
  if (*(void *)v89)
  {
    int v42 = *(long long **)(a1 + 16);
    size_t v43 = *(long long **)v89;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*((void **)v42 - 3));
        }
        int v42 = (long long *)((char *)v42 - 24);
      }
      while (v42 != v41);
      size_t v43 = *(long long **)v89;
    }
    *(void *)(a1 + 16) = v41;
    operator delete(v43);
    *(void *)uint64_t v89 = 0;
    *(void *)(v89 + 8) = 0;
    *(void *)(v89 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v92;
  *(void *)(a1 + 24) = v93;
  v92[1] = 0;
  uint64_t v93 = 0;
  v92[0] = 0;
  sub_52EF44(a1 + 32, (uint64_t *)__p);
  *(unsigned char *)(a1 + 72) = v96;
  unint64_t v44 = v95;
  if (v95)
  {
    do
    {
      uint64_t v45 = (void *)*v44;
      sub_4F4B48((uint64_t)(v44 + 2));
      operator delete(v44);
      unint64_t v44 = v45;
    }
    while (v45);
  }
  long long v46 = __p[0];
  __p[0] = 0;
  if (v46) {
    operator delete(v46);
  }
  long long v47 = (void **)v92[0];
  if (v92[0])
  {
    uint64_t v48 = (void **)v92[1];
    long long v49 = v92[0];
    if (v92[1] != v92[0])
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      long long v49 = v92[0];
    }
    v92[1] = v47;
    operator delete(v49);
  }
  *(unsigned char *)(a1 + 2121) = sub_635D10(v89, (uint64_t)&qword_25C6658);
  *(unsigned char *)(a1 + 2120) = sub_635D10(v89, (uint64_t)&xmmword_25C66D0);
  *(unsigned char *)(a1 + 2122) = sub_635D10(v89, (uint64_t)&dword_25C66E8);
  *(unsigned char *)(a1 + 2123) = sub_635D10(v89, (uint64_t)&xmmword_25C6700);
  sub_635CD0((long long **)v89, (uint64_t)v92);
  char v50 = HIBYTE(v93);
  int v51 = v92[0];
  if (v93 >= 0) {
    size_t v52 = v92;
  }
  else {
    size_t v52 = (void **)v92[0];
  }
  if (byte_25C5457 >= 0) {
    int v53 = &xmmword_25C5440;
  }
  else {
    int v53 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v54 = byte_25C5457;
  }
  else {
    int64_t v54 = *((void *)&xmmword_25C5440 + 1);
  }
  if (v54)
  {
    if (v93 >= 0) {
      uint64_t v55 = HIBYTE(v93);
    }
    else {
      uint64_t v55 = (uint64_t)v92[1];
    }
    uint64_t v56 = (char *)v52 + v55;
    if (v55 >= v54)
    {
      int v81 = *(char *)v53;
      int v82 = v52;
      do
      {
        uint64_t v83 = v55 - v54;
        if (v83 == -1) {
          break;
        }
        int v84 = (char *)memchr(v82, v81, v83 + 1);
        if (!v84) {
          break;
        }
        long long v57 = v84;
        if (!memcmp(v84, v53, v54)) {
          goto LABEL_82;
        }
        int v82 = (void **)(v57 + 1);
        uint64_t v55 = v56 - (v57 + 1);
      }
      while (v55 >= v54);
    }
    long long v57 = v56;
LABEL_82:
    uint64_t v58 = v57 - (char *)v52;
    if (v57 == v56) {
      uint64_t v58 = -1;
    }
    long long v59 = v88;
    *(unsigned char *)(a1 + 2124) = v58 != -1;
    if ((v50 & 0x80) == 0)
    {
LABEL_85:
      char v60 = *(unsigned char *)(*(void *)(a1 + 1952) + 1878);
      if (!v60) {
        goto LABEL_103;
      }
      goto LABEL_89;
    }
  }
  else
  {
    long long v59 = v88;
    *(unsigned char *)(a1 + 2124) = 1;
    if ((v50 & 0x80) == 0) {
      goto LABEL_85;
    }
  }
  operator delete(v51);
  char v60 = *(unsigned char *)(*(void *)(a1 + 1952) + 1878);
  if (!v60) {
    goto LABEL_103;
  }
LABEL_89:
  if (*(_DWORD *)(*(void *)(a1 + 1960) + 1000) != 11
    || *(unsigned char *)(a1 + 1855)
    || *(unsigned char *)(a1 + 2125)
    || (*(_DWORD *)(a1 + 1848) - 1) > 1)
  {
    char v60 = 0;
  }
  else if (sub_65FC8((void *)(a1 + 1976)))
  {
    uint64_t v61 = *(void *)(a1 + 1976);
    uint64_t v62 = *(void *)(a1 + 1984);
    long long v59 = v88;
    if (v61 == v62)
    {
      char v60 = 1;
    }
    else
    {
      uint64_t v63 = v61 + 184;
      do
      {
        char v60 = (*(unsigned __int8 *)(v63 - 8) | *(unsigned __int8 *)(v63 - 7)) == 0;
        if (*(unsigned __int8 *)(v63 - 8) | *(unsigned __int8 *)(v63 - 7)) {
          BOOL v64 = 1;
        }
        else {
          BOOL v64 = v63 == v62;
        }
        v63 += 184;
      }
      while (!v64);
    }
  }
  else
  {
    char v60 = 1;
    long long v59 = v88;
  }
LABEL_103:
  *(unsigned char *)(a1 + 1852) = v60;
  BOOL v65 = sub_800B24(a1);
  uint64_t v66 = 432;
  if (v65) {
    uint64_t v66 = 312;
  }
  size_t v67 = &xmmword_25C5800;
  if (v65) {
    size_t v67 = &xmmword_25C5788;
  }
  int v68 = &byte_25C5817;
  if (v65) {
    int v68 = &byte_25C579F;
  }
  if (*v68 < 0)
  {
    size_t v69 = *(void **)((char *)&xmmword_25C5650 + v66);
    uint64_t v70 = 432;
    if (v65) {
      uint64_t v70 = 312;
    }
    sub_4200(__dst, v69, *(void *)((char *)&xmmword_25C5650 + v70 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *v67;
    uint64_t v91 = *((void *)v67 + 2);
  }
  sub_7F53F4(a1, 0, (uint64_t)__dst, (uint64_t)v92);
  long long v71 = (void **)*v59;
  if (*v59)
  {
    long long v72 = *(void ***)(a1 + 88);
    uint64_t v73 = *v59;
    if (v72 != v71)
    {
      do
      {
        if (*((char *)v72 - 1) < 0) {
          operator delete(*(v72 - 3));
        }
        v72 -= 3;
      }
      while (v72 != v71);
      uint64_t v73 = *v59;
    }
    *(void *)(a1 + 88) = v71;
    operator delete(v73);
    uint64_t *v59 = 0;
    v59[1] = 0;
    v59[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v92;
  *(void *)(a1 + 96) = v93;
  v92[1] = 0;
  uint64_t v93 = 0;
  v92[0] = 0;
  sub_52EF44(a1 + 104, (uint64_t *)__p);
  *(unsigned char *)(a1 + 144) = v96;
  long long v74 = v95;
  if (v95)
  {
    do
    {
      long long v75 = (void *)*v74;
      sub_4F4B48((uint64_t)(v74 + 2));
      operator delete(v74);
      long long v74 = v75;
    }
    while (v75);
  }
  long long v76 = __p[0];
  __p[0] = 0;
  if (v76) {
    operator delete(v76);
  }
  int v77 = (void **)v92[0];
  if (v92[0])
  {
    size_t v78 = (void **)v92[1];
    int v79 = v92[0];
    if (v92[1] != v92[0])
    {
      do
      {
        if (*((char *)v78 - 1) < 0) {
          operator delete(*(v78 - 3));
        }
        v78 -= 3;
      }
      while (v78 != v77);
      int v79 = v92[0];
    }
    v92[1] = v77;
    operator delete(v79);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_7F45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, void **a17, void *a18, void **a19, void **a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_59230C(a15);
  sub_3B024C(a18);
  sub_52F970(v27);
  if (*(char *)(v26 + 1007) < 0) {
    operator delete(*a17);
  }
  sub_59241C((uint64_t *)(v26 + 960));
  sub_59241C((uint64_t *)(v26 + 936));
  sub_59241C((uint64_t *)(v26 + 912));
  sub_4A50F4(a10);
  sub_4A50F4(a11);
  sub_4A50F4(a12);
  sub_4A50F4(a13);
  sub_4A50F4(a14);
  sub_4D4880(a19);
  sub_4D4880(a20);
  _Unwind_Resume(a1);
}

std::string *sub_7F46E4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1859))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 160);
    BOOL v5 = v4 > 0x3F;
    unint64_t v6 = (0xC000000000300008 >> v4) & 1;
    if (v5) {
      int v7 = 0;
    }
    else {
      int v7 = v6;
    }
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 1848);
  BOOL v5 = v8 > 0x23;
  uint64_t v9 = (1 << v8) & 0x804000010;
  BOOL v10 = v5 || v9 == 0;
  if (!v10 || (v7 & 1) != 0)
  {
    BOOL v11 = 0;
    uint64_t v12 = *(void *)(a2 + 384);
    if (v12 == *(void *)(a2 + 392)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v11 = *(unsigned char *)(a2 + 305) == 0;
  uint64_t v12 = *(void *)(a2 + 384);
  if (v12 != *(void *)(a2 + 392))
  {
LABEL_11:
    std::string::operator=((std::string *)(a1 + 456), (const std::string *)v12);
    *(void *)(a1 + 480) = *(void *)(v12 + 24);
    std::string::operator=((std::string *)(a1 + 488), (const std::string *)(v12 + 32));
    *(void *)(a1 + 512) = *(void *)(v12 + 56);
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(v12 + 64);
    std::string::operator=((std::string *)(a1 + 528), (const std::string *)(v12 + 72));
    std::string::operator=((std::string *)(a1 + 552), (const std::string *)(v12 + 96));
    *(_DWORD *)(a1 + 576) = *(_DWORD *)(v12 + 120);
    std::string::operator=((std::string *)(a1 + 584), (const std::string *)(v12 + 128));
  }
LABEL_12:
  uint64_t v13 = *(void *)(a2 + 336);
  if (v13 == *(void *)(a2 + 344)) {
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 1848) == 4)
  {
    std::string::operator=((std::string *)(a1 + 304), *(const std::string **)(a2 + 336));
    *(void *)(a1 + 328) = *(void *)(v13 + 24);
    std::string::operator=((std::string *)(a1 + 336), (const std::string *)(v13 + 32));
    *(void *)(a1 + 360) = *(void *)(v13 + 56);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(v13 + 64);
    std::string::operator=((std::string *)(a1 + 376), (const std::string *)(v13 + 72));
    std::string::operator=((std::string *)(a1 + 400), (const std::string *)(v13 + 96));
    *(_DWORD *)(a1 + 424) = *(_DWORD *)(v13 + 120);
    std::string::operator=((std::string *)(a1 + 432), (const std::string *)(v13 + 128));
    goto LABEL_30;
  }
  if (v11 && sub_6F2FD8(*(void *)(a2 + 336)))
  {
    unint64_t v14 = *(void *)(a1 + 944);
    if (v14 < *(void *)(a1 + 952))
    {
      sub_4AA8E0(*(char **)(a1 + 944), (long long *)v13);
      *(void *)(a1 + 944) = v14 + 152;
      *(void *)(a1 + 944) = v14 + 152;
      goto LABEL_30;
    }
    BOOL v19 = (int64x2_t *)(a1 + 936);
    uint64_t v16 = (long long *)v13;
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 1859))
  {
    uint64_t v15 = *(void *)(a2 + 344);
    if (0x86BCA1AF286BCA1BLL * ((v15 - *(void *)(a2 + 336)) >> 3) >= 2)
    {
      uint64_t v16 = (long long *)(v15 - 152);
      unint64_t v17 = *(void *)(a1 + 944);
      if (v17 < *(void *)(a1 + 952))
      {
        sub_4AA8E0(*(char **)(a1 + 944), v16);
        uint64_t v18 = v17 + 152;
        *(void *)(a1 + 944) = v17 + 152;
LABEL_29:
        *(void *)(a1 + 944) = v18;
        goto LABEL_30;
      }
      BOOL v19 = (int64x2_t *)(a1 + 936);
LABEL_28:
      uint64_t v18 = sub_63CBA0(v19, v16);
      goto LABEL_29;
    }
  }
LABEL_30:
  int v33 = v7;
  uint64_t v20 = *(void *)(a2 + 360);
  for (uint64_t i = *(void *)(a2 + 368); v20 != i; v20 += 152)
  {
    if (sub_6F2FD8(v20))
    {
      int v22 = *(_DWORD *)(v20 + 120);
      if ((v22 - 2) < 2)
      {
        if (v11)
        {
          unint64_t v24 = *(void *)(a1 + 968);
          if (v24 >= *(void *)(a1 + 976))
          {
            *(void *)(a1 + 968) = sub_63CBA0((int64x2_t *)(a1 + 960), (long long *)v20);
          }
          else
          {
            sub_4AA8E0(*(char **)(a1 + 968), (long long *)v20);
            *(void *)(a1 + 968) = v24 + 152;
            *(void *)(a1 + 968) = v24 + 152;
          }
        }
      }
      else if (v22 == 4)
      {
        if (!sub_6F2FD8(a1 + 304))
        {
          std::string::operator=((std::string *)(a1 + 304), (const std::string *)v20);
          *(void *)(a1 + 328) = *(void *)(v20 + 24);
          std::string::operator=((std::string *)(a1 + 336), (const std::string *)(v20 + 32));
          *(void *)(a1 + 360) = *(void *)(v20 + 56);
          *(_DWORD *)(a1 + 368) = *(_DWORD *)(v20 + 64);
          std::string::operator=((std::string *)(a1 + 376), (const std::string *)(v20 + 72));
          std::string::operator=((std::string *)(a1 + 400), (const std::string *)(v20 + 96));
          *(_DWORD *)(a1 + 424) = *(_DWORD *)(v20 + 120);
          std::string::operator=((std::string *)(a1 + 432), (const std::string *)(v20 + 128));
        }
      }
      else if (v22 == 1 && v11)
      {
        unint64_t v23 = *(void *)(a1 + 944);
        if (v23 >= *(void *)(a1 + 952))
        {
          *(void *)(a1 + 944) = sub_63CBA0((int64x2_t *)(a1 + 936), (long long *)v20);
        }
        else
        {
          sub_4AA8E0(*(char **)(a1 + 944), (long long *)v20);
          *(void *)(a1 + 944) = v23 + 152;
          *(void *)(a1 + 944) = v23 + 152;
        }
      }
    }
  }
  uint64_t v25 = *(void *)(a1 + 936);
  if (v25 != *(void *)(a1 + 944))
  {
    std::string::operator=((std::string *)(a1 + 152), *(const std::string **)(a1 + 936));
    *(void *)(a1 + 176) = *(void *)(v25 + 24);
    std::string::operator=((std::string *)(a1 + 184), (const std::string *)(v25 + 32));
    *(void *)(a1 + 208) = *(void *)(v25 + 56);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(v25 + 64);
    std::string::operator=((std::string *)(a1 + 224), (const std::string *)(v25 + 72));
    std::string::operator=((std::string *)(a1 + 248), (const std::string *)(v25 + 96));
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(v25 + 120);
    std::string::operator=((std::string *)(a1 + 280), (const std::string *)(v25 + 128));
  }
  std::string::operator=((std::string *)(a1 + 608), (const std::string *)(a2 + 712));
  *(void *)(a1 + 632) = *(void *)(a2 + 736);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 744));
  *(void *)(a1 + 664) = *(void *)(a2 + 768);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 680), (const std::string *)(a2 + 784));
  std::string::operator=((std::string *)(a1 + 704), (const std::string *)(a2 + 808));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 832);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 840));
  uint64_t v26 = *(long long **)(a2 + 688);
  uint64_t v27 = *(long long **)(a2 + 696);
  if (v26 != v27)
  {
    long long v28 = *(char **)(a1 + 920);
    do
    {
      while ((unint64_t)v28 >= *(void *)(a1 + 928))
      {
        long long v28 = (char *)sub_63CBA0((int64x2_t *)(a1 + 912), v26);
        *(void *)(a1 + 920) = v28;
        v26 += 10;
        if (v26 == v27) {
          goto LABEL_54;
        }
      }
      sub_4AA8E0(v28, v26);
      v28 += 152;
      *(void *)(a1 + 920) = v28;
      *(void *)(a1 + 920) = v28;
      v26 += 10;
    }
    while (v26 != v27);
  }
LABEL_54:
  double result = (std::string *)sub_6F2FD8(a2 + 408);
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 760), (const std::string *)(a2 + 408));
    *(void *)(a1 + 784) = *(void *)(a2 + 432);
    std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 440));
    *(void *)(a1 + 816) = *(void *)(a2 + 464);
    *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 472);
    std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 480));
    std::string::operator=((std::string *)(a1 + 856), (const std::string *)(a2 + 504));
    *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 528);
    long long v30 = (std::string *)(a1 + 888);
    unsigned int v31 = (const std::string *)(a2 + 536);
  }
  else
  {
    if (!v33) {
      return result;
    }
    uint64_t v32 = *(void *)(a2 + 336);
    if (v32 == *(void *)(a2 + 344)) {
      return result;
    }
    std::string::operator=((std::string *)(a1 + 760), *(const std::string **)(a2 + 336));
    *(void *)(a1 + 784) = *(void *)(v32 + 24);
    std::string::operator=((std::string *)(a1 + 792), (const std::string *)(v32 + 32));
    *(void *)(a1 + 816) = *(void *)(v32 + 56);
    *(_DWORD *)(a1 + 824) = *(_DWORD *)(v32 + 64);
    std::string::operator=((std::string *)(a1 + 832), (const std::string *)(v32 + 72));
    std::string::operator=((std::string *)(a1 + 856), (const std::string *)(v32 + 96));
    *(_DWORD *)(a1 + 880) = *(_DWORD *)(v32 + 120);
    long long v30 = (std::string *)(a1 + 888);
    unsigned int v31 = (const std::string *)(v32 + 128);
  }

  return std::string::operator=(v30, v31);
}

void sub_7F4CD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_7F4CDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_7F4CE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_7F4CEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 968) = v2;
  _Unwind_Resume(a1);
}

void sub_7F4CF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 920) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_7F4CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  unsigned int v4 = &qword_25C4960;
  BOOL v5 = (uint64_t *)&xmmword_25C4B88;
  unint64_t v6 = (long long *)&qword_25C4AE0;
  switch(*(_DWORD *)(a1 + 1848))
  {
    case 0:
    case 3:
    case 5:
    case 0xC:
      goto LABEL_2;
    case 1:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&unk_25C47F8;
      uint64_t v9 = &xmmword_25C5080;
      goto LABEL_72;
    case 2:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C4810;
      uint64_t v9 = &xmmword_25C5098;
      goto LABEL_72;
    case 4:
      sub_7F607C(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 6:
      sub_7F6428(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 7:
      goto LABEL_4;
    case 0xB:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = (long long *)&qword_25C4D50;
      goto LABEL_29;
    case 0x10:
      sub_7F627C(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x11:
      sub_7F5BA8(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x12:
      uint64_t v11 = *(void *)(a1 + 1960);
      if (!*(unsigned char *)(v11 + 1524) || *(unsigned char *)(v11 + 1522) || !*(unsigned char *)(a1 + 1409) || *(_DWORD *)(a1 + 2128) != 1)
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = (long long *)&qword_25C4A08;
        goto LABEL_36;
      }
      unsigned int v4 = &qword_25C4A50;
      break;
    case 0x14:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C48B8;
      goto LABEL_18;
    case 0x15:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C48D0;
LABEL_18:
      unint64_t v14 = (long long *)((char *)v8 + 2280);
      uint64_t v15 = (long long *)((char *)v8 + 1992);
      goto LABEL_69;
    case 0x16:
      sub_7F60EC(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x17:
      break;
    case 0x18:
      sub_7F6150(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x19:
      sub_7F5C40(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x1A:
      int v16 = *(unsigned __int8 *)(a1 + 1856);
      unint64_t v17 = &xmmword_25C4930;
      uint64_t v18 = &qword_25C50B0;
      goto LABEL_40;
    case 0x1B:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4828;
      uint64_t v9 = &xmmword_25C5080;
      goto LABEL_72;
    case 0x1C:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4840;
      uint64_t v9 = &xmmword_25C5098;
      goto LABEL_72;
    case 0x1D:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = &xmmword_25C4D68;
      goto LABEL_29;
    case 0x1E:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = &xmmword_25C4D80;
LABEL_29:
      sub_7F6734(a1, (uint64_t)v10, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x21:
      uint64_t v19 = *(void *)(a1 + 1960);
      if (!*(unsigned char *)(v19 + 1524) || *(unsigned char *)(v19 + 1522) || !*(unsigned char *)(a1 + 1409) || *(_DWORD *)(a1 + 2128) != 1)
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = &xmmword_25C4A20;
        goto LABEL_36;
      }
      unsigned int v4 = (uint64_t *)&xmmword_25C4A68;
      break;
    case 0x22:
      uint64_t v20 = *(void *)(a1 + 1960);
      if (*(unsigned char *)(v20 + 1524) && !*(unsigned char *)(v20 + 1522) && *(unsigned char *)(a1 + 1409) && *(_DWORD *)(a1 + 2128) == 1)
      {
        unsigned int v4 = (uint64_t *)&xmmword_25C4A80;
      }
      else
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = &xmmword_25C4A38;
LABEL_36:
        if (v12) {
          unsigned int v4 = (uint64_t *)(v13 + 9);
        }
        else {
          unsigned int v4 = (uint64_t *)v13;
        }
      }
      break;
    case 0x23:
      int v16 = *(unsigned __int8 *)(a1 + 1856);
      unint64_t v17 = &xmmword_25C4918;
      uint64_t v18 = &qword_25C50C8;
LABEL_40:
      if (v16) {
        unsigned int v4 = (uint64_t *)v17;
      }
      else {
        unsigned int v4 = v18;
      }
      break;
    case 0x27:
      sub_7F62E0(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x29:
      goto LABEL_62;
    case 0x2A:
      BOOL v5 = (uint64_t *)&xmmword_25C4BA0;
      goto LABEL_62;
    case 0x2B:
      BOOL v5 = (uint64_t *)&xmmword_25C4BB8;
      goto LABEL_62;
    case 0x2C:
      BOOL v5 = (uint64_t *)&xmmword_25C4BD0;
      goto LABEL_62;
    case 0x2D:
      BOOL v5 = (uint64_t *)&xmmword_25C4BE8;
      goto LABEL_62;
    case 0x2E:
      BOOL v5 = (uint64_t *)&xmmword_25C4C00;
      goto LABEL_62;
    case 0x2F:
      BOOL v5 = &qword_25C4C18;
      goto LABEL_62;
    case 0x30:
      BOOL v5 = (uint64_t *)&xmmword_25C4C30;
      goto LABEL_62;
    case 0x31:
      BOOL v5 = (uint64_t *)&xmmword_25C4C48;
      goto LABEL_62;
    case 0x32:
      BOOL v5 = (uint64_t *)&xmmword_25C4C60;
      goto LABEL_62;
    case 0x33:
      BOOL v5 = &qword_25C4C78;
      goto LABEL_62;
    case 0x34:
      BOOL v5 = &qword_25C4C90;
      goto LABEL_62;
    case 0x35:
      BOOL v5 = &qword_25C4CA8;
      goto LABEL_62;
    case 0x36:
      BOOL v5 = &qword_25C4CC0;
      goto LABEL_62;
    case 0x37:
      BOOL v5 = &qword_25C4CD8;
      goto LABEL_62;
    case 0x38:
      BOOL v5 = &qword_25C4CF0;
      goto LABEL_62;
    case 0x39:
      BOOL v5 = &qword_25C4D08;
      goto LABEL_62;
    case 0x3A:
      BOOL v5 = &qword_25C4D20;
      goto LABEL_62;
    case 0x3B:
      BOOL v5 = &qword_25C4D38;
LABEL_62:
      sub_7F65C8(a1, (uint64_t)v5, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x3C:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C4858;
      goto LABEL_65;
    case 0x3D:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4870;
LABEL_65:
      unint64_t v14 = (long long *)((char *)v8 + 2328);
      uint64_t v15 = (long long *)((char *)v8 + 2088);
      goto LABEL_69;
    case 0x3E:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4888;
      goto LABEL_68;
    case 0x3F:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C48A0;
LABEL_68:
      unint64_t v14 = (long long *)((char *)v8 + 2328);
      uint64_t v15 = (long long *)((char *)v8 + 2040);
LABEL_69:
      if (*(unsigned char *)(*(void *)(a1 + 1952) + 1898)) {
        uint64_t v9 = v14;
      }
      else {
        uint64_t v9 = v15;
      }
LABEL_72:
      if (v7) {
        uint64_t v21 = (uint64_t)v8;
      }
      else {
        uint64_t v21 = (uint64_t)v9;
      }
      sub_7F5F78((std::string *)a1, v21, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x40:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      int v22 = &qword_25C4D98;
      goto LABEL_82;
    case 0x41:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      int v22 = (uint64_t *)&xmmword_25C4DB0;
      goto LABEL_82;
    case 0x42:
      if (*(unsigned char *)(a1 + 1856))
      {
        int v22 = &qword_25C4DC8;
LABEL_82:
        sub_7F67B8(a1, (uint64_t)v22, (char **)a2);
      }
      else
      {
LABEL_2:
        sub_7F5A40((std::string *)a1, (char **)a2, 1u);
      }
      return sub_7F68A8((std::string *)a1, a2);
    case 0x52:
      goto LABEL_85;
    case 0x53:
      unint64_t v6 = &xmmword_25C4AF8;
      goto LABEL_85;
    case 0x54:
      unint64_t v6 = &xmmword_25C4B10;
LABEL_85:
      sub_6351E8((char **)a2, (uint64_t)v6);
      sub_7FF778(a1, (std::string **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x55:
      sub_7F5CA4(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x56:
    case 0x57:
      if (*(unsigned char *)(a1 + 1856)) {
LABEL_4:
      }
        sub_7F64EC(a1, (char **)a2);
      else {
        sub_7F66C4(a1, (char **)a2);
      }
      return sub_7F68A8((std::string *)a1, a2);
    case 0x58:
      sub_7F5DFC(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x59:
      unsigned int v4 = &qword_25C4DF8;
      break;
    case 0x5A:
      unsigned int v4 = &qword_25C4E10;
      break;
    case 0x5B:
      sub_7F61B4(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x5C:
      unsigned int v4 = (uint64_t *)&xmmword_25C49A8;
      break;
    case 0x5D:
      sub_7F6218(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x5E:
      unsigned int v4 = (uint64_t *)&xmmword_25C4E28;
      break;
    default:
      return sub_7F68A8((std::string *)a1, a2);
  }
  sub_6351E8((char **)a2, (uint64_t)v4);
  return sub_7F68A8((std::string *)a1, a2);
}

void sub_7F5264(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7F53F4(std::string::size_type a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_8A6F8((char *)a4, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  sub_5954B0(a4 + 24, a1 + 32);
  *(unsigned char *)(a4 + 64) = *(unsigned char *)(a1 + 72);
  sub_7FACA0(a1, (uint64_t)&v55);
  if (*(unsigned char *)(a1 + 1853)) {
    sub_7FAE5C(a1, &v55);
  }
  std::string::size_type v8 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v55;
  }
  else {
    uint64_t v9 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if (byte_25C54E7 >= 0) {
    BOOL v10 = &qword_25C54D0;
  }
  else {
    BOOL v10 = (uint64_t *)qword_25C54D0;
  }
  if (byte_25C54E7 >= 0) {
    int64_t v11 = byte_25C54E7;
  }
  else {
    int64_t v11 = *(void *)&word_25C54D8;
  }
  if (!v11)
  {
    unint64_t v15 = 0;
    int v16 = *(_DWORD *)(a1 + 1848);
    BOOL v17 = (v16 - 33) < 2 || v16 == 18;
    if (!v17) {
      goto LABEL_22;
    }
LABEL_42:
    if ((a2 & 1) == 0)
    {
      sub_7FB07C(a1, (uint64_t)&__p);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (byte_25C58EF >= 0) {
          long long v30 = (const std::string::value_type *)&qword_25C58D8;
        }
        else {
          long long v30 = (const std::string::value_type *)qword_25C58D8;
        }
        if (byte_25C58EF >= 0) {
          std::string::size_type v31 = byte_25C58EF;
        }
        else {
          std::string::size_type v31 = qword_25C58E0;
        }
        std::string::append(&v55, v30, v31);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)p_p, v33);
        char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v29 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_116;
    }
    goto LABEL_43;
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v12 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v12 = v55.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = (char *)v9 + v12;
  if (v12 >= v11)
  {
    uint64_t v53 = a3;
    int v20 = *(char *)v10;
    uint64_t v21 = v9;
    do
    {
      int64_t v22 = v12 - v11;
      if (v22 == -1) {
        break;
      }
      unint64_t v23 = (char *)memchr(v21, v20, v22 + 1);
      if (!v23) {
        break;
      }
      unint64_t v14 = v23;
      if (!memcmp(v23, v10, v11)) {
        goto LABEL_33;
      }
      uint64_t v21 = (std::string *)(v14 + 1);
      int64_t v12 = v13 - (v14 + 1);
    }
    while (v12 >= v11);
    unint64_t v14 = v13;
LABEL_33:
    a3 = v53;
  }
  else
  {
    unint64_t v14 = (char *)v9 + v12;
  }
  if (v14 == v13) {
    unint64_t v15 = -1;
  }
  else {
    unint64_t v15 = v14 - (char *)v9;
  }
  int v16 = *(_DWORD *)(a1 + 1848);
  if ((v16 - 33) < 2 || v16 == 18) {
    goto LABEL_42;
  }
LABEL_22:
  if (v16 == 17 && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v18 = *(unsigned __int8 ***)(a1 + 1968);
    char v19 = *((unsigned char *)v18 + 23);
    if ((v19 & 0x80000000) == 0)
    {
      if (!*((unsigned char *)v18 + 23)) {
        goto LABEL_43;
      }
LABEL_84:
      uint64_t v36 = a3;
      uint64_t v37 = qword_25C6328;
      uint64_t v38 = *(void *)algn_25C6330;
      if (qword_25C6328 == *(void *)algn_25C6330)
      {
LABEL_102:
        BOOL v17 = v37 == v38;
        a3 = v36;
        if (!v17)
        {
          if (byte_25C58EF >= 0) {
            unint64_t v44 = (const std::string::value_type *)&qword_25C58D8;
          }
          else {
            unint64_t v44 = (const std::string::value_type *)qword_25C58D8;
          }
          if (byte_25C58EF >= 0) {
            std::string::size_type v45 = byte_25C58EF;
          }
          else {
            std::string::size_type v45 = qword_25C58E0;
          }
          std::string::append(&v55, v44, v45);
          uint64_t v46 = *(void *)(a1 + 1968);
          int v47 = *(char *)(v46 + 23);
          if (v47 >= 0) {
            uint64_t v48 = *(const std::string::value_type **)(a1 + 1968);
          }
          else {
            uint64_t v48 = *(const std::string::value_type **)v46;
          }
          if (v47 >= 0) {
            std::string::size_type v49 = *(unsigned __int8 *)(v46 + 23);
          }
          else {
            std::string::size_type v49 = *(void *)(v46 + 8);
          }
          std::string::append(&v55, v48, v49);
          goto LABEL_116;
        }
      }
      else
      {
        if (v19 >= 0) {
          unsigned int v39 = (unsigned __int8 *)*((unsigned __int8 *)v18 + 23);
        }
        else {
          unsigned int v39 = v18[1];
        }
        if (v19 >= 0) {
          int v40 = *(unsigned __int8 **)(a1 + 1968);
        }
        else {
          int v40 = *v18;
        }
        do
        {
          uint64_t v41 = *(unsigned __int8 *)(v37 + 23);
          if ((v41 & 0x80u) == 0) {
            int v42 = (unsigned __int8 *)*(unsigned __int8 *)(v37 + 23);
          }
          else {
            int v42 = *(unsigned __int8 **)(v37 + 8);
          }
          if (v42 == v39)
          {
            if ((v41 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v37, v40, *(void *)(v37 + 8))) {
                goto LABEL_102;
              }
            }
            else
            {
              if (!*(unsigned char *)(v37 + 23)) {
                goto LABEL_102;
              }
              uint64_t v43 = 0;
              while (*(unsigned __int8 *)(v37 + v43) == v40[v43])
              {
                if (v41 == ++v43) {
                  goto LABEL_102;
                }
              }
            }
          }
          v37 += 24;
        }
        while (v37 != v38);
        a3 = v36;
      }
      goto LABEL_43;
    }
    if (v18[1]) {
      goto LABEL_84;
    }
  }
LABEL_43:
  if (v15 != -1
    && (*(unsigned char *)(a1 + 2120)
     || *(unsigned char *)(a1 + 2121)
     || *(unsigned char *)(a1 + 2124)
     || *(unsigned char *)(a1 + 2122)
     || *(unsigned char *)(a1 + 2123)))
  {
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v25 = v8;
    }
    else {
      std::string::size_type v25 = v55.__r_.__value_.__l.__size_;
    }
    if (v25 >= v15) {
      std::string::size_type v26 = v15;
    }
    else {
      std::string::size_type v26 = v25;
    }
    if (v26 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v26 >= 0x17)
    {
      uint64_t v34 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v34 = v26 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v27 = (std::string *)operator new(v34 + 1);
      __p.__r_.__value_.__l.__size_ = v26;
      __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26;
      uint64_t v27 = &__p;
      if (!v26)
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_59:
          std::string v55 = __p;
          goto LABEL_116;
        }
LABEL_82:
        operator delete(v55.__r_.__value_.__l.__data_);
        goto LABEL_59;
      }
    }
    memmove(v27, v9, v26);
    v27->__r_.__value_.__s.__data_[v26] = 0;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_82;
  }
LABEL_116:
  sub_7FB1BC(a1, (const void **)&v55.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  sub_6353B4(a4, (std::string **)&__p);
  std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    size_t v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v51 - 1) < 0) {
          operator delete(*(void **)(v51 - 24));
        }
        v51 -= 24;
      }
      while (v51 != v50);
      size_t v52 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
}

void sub_7F58A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
  {
    sub_4D4880(v21);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4880(v21);
  _Unwind_Resume(a1);
}

void sub_7F595C(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7F5970(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7F598C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = (void *)sub_800B24(a1);
  uint64_t v4 = 432;
  if (result) {
    uint64_t v4 = 312;
  }
  BOOL v5 = &xmmword_25C5800;
  if (result) {
    BOOL v5 = &xmmword_25C5788;
  }
  unint64_t v6 = &byte_25C5817;
  if (result) {
    unint64_t v6 = &byte_25C579F;
  }
  if (*v6 < 0)
  {
    int v7 = *(void **)((char *)&xmmword_25C5650 + v4);
    uint64_t v8 = 432;
    if (result) {
      uint64_t v8 = 312;
    }
    unint64_t v9 = *(void *)((char *)&xmmword_25C5650 + v8 + 8);
    return sub_4200((unsigned char *)a2, v7, v9);
  }
  else
  {
    *(_OWORD *)a2 = *v5;
    *(void *)(a2 + 16) = *((void *)v5 + 2);
  }
  return result;
}

std::string::size_type sub_7F5A38(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_7F3934(a1, a2, a3, a4, a5, a6);
}

void sub_7F5A40(std::string *a1, char **a2, unsigned __int8 a3)
{
  int v5 = a1[77].__r_.__value_.__s.__data_[12];
  memset(&v9, 0, sizeof(v9));
  if (((v5 != 0) & a3) != 0) {
    unint64_t v6 = &xmmword_25C5B30;
  }
  else {
    unint64_t v6 = &xmmword_25C5038;
  }
  if (a1[77].__r_.__value_.__s.__data_[8]) {
    int v7 = (const std::string *)&qword_25C4738;
  }
  else {
    int v7 = (const std::string *)v6;
  }
  std::string::operator=(&v9, v7);
  sub_6351E8(a2, (uint64_t)&v9);
  sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, (uint64_t)&a1[12].__r_.__value_.__r.__words[2]);
  if (a1[77].__r_.__value_.__s.__data_[6] && a1[77].__r_.__value_.__s.__data_[8])
  {
    sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5458, &xmmword_25C66D0, (uint64_t)&a1[6].__r_.__value_.__l.__size_);
    sub_635C08((uint64_t)a2, (long long *)&qword_25C6568, (uint64_t)&a1[6].__r_.__value_.__l.__size_, 1);
  }
  else
  {
    sub_7FF1F4((uint64_t)a1, (uint64_t)a2, (uint64_t)&a1[6].__r_.__value_.__l.__size_, &a1[77].__r_.__value_.__r.__words[2]);
  }
  uint64_t v8 = (std::string **)nullsub_1(a2);
  sub_7FFC7C(a1, *v8);
  sub_7FF86C((uint64_t)a1, (long long **)a2, (uint64_t)&a1[77].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_7F5B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7F5BA8(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856))
  {
    uint64_t v4 = &qword_25C4750;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 1848);
    BOOL v6 = v5 > 0x23;
    uint64_t v7 = (1 << v5) & 0x804000010;
    if (v6 || v7 == 0) {
      uint64_t v4 = &qword_25C4750;
    }
    else {
      uint64_t v4 = (uint64_t *)&xmmword_25C5050;
    }
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F5C40(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856)) {
    uint64_t v4 = (uint64_t *)&xmmword_25C4798;
  }
  else {
    uint64_t v4 = &qword_25C5068;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F5CA4(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856)
    || ((unsigned int v8 = *(_DWORD *)(a1 + 1848), v9 = v8 > 0x23, v10 = (1 << v8) & 0x804000010, !v9)
      ? (BOOL v11 = v10 == 0)
      : (BOOL v11 = 1),
        v11))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 1960) + 1522);
    uint64_t v5 = 33;
    if (v4 == 11) {
      uint64_t v5 = 36;
    }
    BOOL v6 = &qword_25C4780;
    if (v4 != 11) {
      BOOL v6 = &qword_25C4768;
    }
    uint64_t v7 = &byte_25C477F;
    if (v4 == 11) {
      uint64_t v7 = &byte_25C4797;
    }
    if ((*v7 & 0x80000000) == 0)
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v6;
      uint64_t v16 = v6[2];
      goto LABEL_22;
    }
    int64_t v12 = (void *)qword_25C4660[v5];
    if (v4 == 11) {
      uint64_t v13 = (unint64_t *)&dword_25C4788;
    }
    else {
      uint64_t v13 = (unint64_t *)&unk_25C4770;
    }
    unint64_t v14 = *v13;
  }
  else
  {
    if ((byte_25C5067 & 0x80000000) == 0)
    {
      *(_OWORD *)std::string __p = xmmword_25C5050;
      uint64_t v16 = unk_25C5060;
      goto LABEL_22;
    }
    unint64_t v14 = *((void *)&xmmword_25C5050 + 1);
    int64_t v12 = (void *)xmmword_25C5050;
  }
  sub_4200(__p, v12, v14);
LABEL_22:
  sub_6351E8(a2, (uint64_t)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F5DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7F5DFC(uint64_t a1, char **a2)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 1960) + 1522);
  uint64_t v5 = 33;
  if (v4 == 11) {
    uint64_t v5 = 36;
  }
  BOOL v6 = (std::string *)&qword_25C4780;
  if (v4 != 11) {
    BOOL v6 = (std::string *)&qword_25C4768;
  }
  uint64_t v7 = &byte_25C477F;
  if (v4 == 11) {
    uint64_t v7 = &byte_25C4797;
  }
  if (*v7 < 0)
  {
    if (v4 == 11) {
      unsigned int v8 = (unint64_t *)&dword_25C4788;
    }
    else {
      unsigned int v8 = (unint64_t *)&unk_25C4770;
    }
    sub_4200(&v13, (void *)qword_25C4660[v5], *v8);
  }
  else
  {
    std::string v13 = *v6;
  }
  if (byte_25C47C7 >= 0) {
    BOOL v9 = (const std::string::value_type *)&qword_25C47B0;
  }
  else {
    BOOL v9 = (const std::string::value_type *)qword_25C47B0;
  }
  if (byte_25C47C7 >= 0) {
    std::string::size_type v10 = byte_25C47C7;
  }
  else {
    std::string::size_type v10 = unk_25C47B8;
  }
  BOOL v11 = std::string::append(&v13, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  sub_6351E8(a2, (uint64_t)__p);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_23:
    operator delete(v13.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
LABEL_21:
  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F5F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::string *sub_7F5F78(std::string *a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  if (a1[77].__r_.__value_.__s.__data_[12]) {
    sub_63581C((std::string **)a3, (const std::string::value_type *)&xmmword_25C5668);
  }
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, (uint64_t)&a1[12].__r_.__value_.__r.__words[2]);
  if (a1[77].__r_.__value_.__s.__data_[6] && a1[77].__r_.__value_.__s.__data_[8])
  {
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, (uint64_t)&a1[6].__r_.__value_.__l.__size_);
    sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, (uint64_t)&a1[6].__r_.__value_.__l.__size_, 1);
  }
  else
  {
    sub_7FF1F4((uint64_t)a1, (uint64_t)a3, (uint64_t)&a1[6].__r_.__value_.__l.__size_, &a1[77].__r_.__value_.__r.__words[2]);
  }
  uint64_t v5 = (std::string **)nullsub_1(a3);
  sub_7FFC7C(a1, *v5);
  sub_7FF86C((uint64_t)a1, (long long **)a3, (uint64_t)&a1[77].__r_.__value_.__r.__words[2]);

  return sub_800094(a1, (std::string **)a3);
}

std::string *sub_7F607C(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856)) {
    int v4 = (uint64_t *)&dword_25C48E8;
  }
  else {
    int v4 = &qword_25C4900;
  }
  sub_6351E8(a2, (uint64_t)v4);

  return sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
}

std::string *sub_7F60EC(uint64_t a1, char **a2, uint64_t a3)
{
  sub_6351E8(a2, (uint64_t)&qword_25C4948);

  return sub_635B18((uint64_t)a2, (uint64_t)&dword_25C54E8, (long long *)&dword_25C66E8, a3);
}

std::string *sub_7F6150(uint64_t a1, char **a2, uint64_t a3)
{
  sub_6351E8(a2, (uint64_t)&qword_25C4978);

  return sub_635B18((uint64_t)a2, (uint64_t)&dword_25C54E8, (long long *)&dword_25C66E8, a3);
}

std::string *sub_7F61B4(uint64_t a1, char **a2, uint64_t a3)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4990);

  return sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5518, &xmmword_25C6700, a3);
}

std::string *sub_7F6218(uint64_t a1, char **a2, uint64_t a3)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C49C0);

  return sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5518, &xmmword_25C6700, a3);
}

void sub_7F627C(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1855)) {
    int v4 = &qword_25C5128;
  }
  else {
    int v4 = (uint64_t *)&xmmword_25C49D8;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F62E0(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1855)) {
    int v4 = &qword_25C5140;
  }
  else {
    int v4 = (uint64_t *)&xmmword_25C49F0;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F6344(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&qword_25C4AE0);

  sub_7FF778(a1, (std::string **)a2);
}

void sub_7F6390(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4AF8);

  sub_7FF778(a1, (std::string **)a2);
}

void sub_7F63DC(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B10);

  sub_7FF778(a1, (std::string **)a2);
}

void sub_7F6428(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B40);
  if (sub_6F2FD8(a1 + 152))
  {
    sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
  }
  else
  {
    uint64_t v4 = a1 + 304;
    if (sub_6F2FD8(v4))
    {
      sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, v4);
    }
  }
}

void sub_7F64EC(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B70);
  sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
  if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v4 = a1 + 152;
    sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v4);
    sub_635C08((uint64_t)a2, (long long *)&qword_25C6568, v4, 1);
  }
  else
  {
    sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
  }
}

void sub_7F65C8(uint64_t a1, uint64_t a2, char **a3)
{
  if (*(unsigned char *)(a1 + 1856))
  {
    sub_6351E8(a3, a2);
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
    if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
    {
      uint64_t v5 = a1 + 152;
      sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v5);
      sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, v5, 1);
      return;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 1848);
    uint64_t v7 = &qword_25C5110;
    if (v6 != 87) {
      uint64_t v7 = &qword_25C50E0;
    }
    if (v6 == 86) {
      unsigned int v8 = &qword_25C50F8;
    }
    else {
      unsigned int v8 = v7;
    }
    sub_6351E8(a3, (uint64_t)v8);
  }

  sub_7FF1F4(a1, (uint64_t)a3, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F66C4(uint64_t a1, char **a2)
{
  int v4 = *(_DWORD *)(a1 + 1848);
  uint64_t v5 = &qword_25C5110;
  if (v4 != 87) {
    uint64_t v5 = &qword_25C50E0;
  }
  if (v4 == 86) {
    int v6 = &qword_25C50F8;
  }
  else {
    int v6 = v5;
  }
  sub_6351E8(a2, (uint64_t)v6);

  sub_7FF1F4(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_7F6734(uint64_t a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5548, &xmmword_25C6748, a1 + 456);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);

  sub_7FF5D4(a1, (uint64_t)a3);
}

void sub_7F67B8(uint64_t a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5548, &xmmword_25C6748, a1 + 456);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
  if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v5 = a1 + 152;
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v5);
    sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, v5, 1);
  }
  else
  {
    sub_7FF1F4(a1, (uint64_t)a3, a1 + 152, (void *)(a1 + 1864));
  }
}

std::string *sub_7F68A8(std::string *result, uint64_t a2)
{
  if (result[77].__r_.__value_.__s.__data_[8])
  {
    uint64_t v2 = result;
    uint64_t data = (uint64_t)result[40].__r_.__value_.__l.__data_;
    if (data != result[40].__r_.__value_.__l.__size_)
    {
      unsigned int v4 = result[77].__r_.__value_.__l.__data_;
      BOOL v5 = v4 > 0x23 || ((1 << v4) & 0xE04040010) == 0;
      if (v5 && v4 - 82 >= 3 && (v4 > 0x27 || ((1 << v4) & 0x8002030040) == 0) && v4 != 85 && v4 != 88)
      {
        sub_635B18(a2, (uint64_t)&qword_25C54B8, (long long *)&qword_25C6718, data);
        double result = sub_635C08(a2, (long long *)&qword_25C6580, (uint64_t)v2[40].__r_.__value_.__l.__data_, 0);
        std::string::pointer v7 = v2[40].__r_.__value_.__l.__data_;
        if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v2[40].__r_.__value_.__l.__size_ - (void)v7) >> 3) >= 2)
        {
          sub_635B18(a2, (uint64_t)&qword_25C54D0, &xmmword_25C6730, (uint64_t)(v7 + 152));
          uint64_t v8 = v2[40].__r_.__value_.__r.__words[0] + 152;
          return sub_635C08(a2, (long long *)&qword_25C65B0, v8, 0);
        }
      }
    }
  }
  return result;
}

uint64_t sub_7F69F8@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&xmmword_25C4E58);
}

void sub_7F6A08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_8A6F8((char *)a2, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  sub_5954B0(a2 + 24, a1 + 32);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 72);
  sub_635CD0((long long **)a2, (uint64_t)&v6);
  if (byte_25C57E7 >= 0) {
    unsigned int v4 = (const std::string::value_type *)&qword_25C57D0;
  }
  else {
    unsigned int v4 = (const std::string::value_type *)qword_25C57D0;
  }
  if (byte_25C57E7 >= 0) {
    std::string::size_type v5 = byte_25C57E7;
  }
  else {
    std::string::size_type v5 = unk_25C57D8;
  }
  std::string::append(&v6, v4, v5);
  sub_6351E8((char **)a2, (uint64_t)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_7F6AD0(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7F6AE4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7F6B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_7F6B24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(&v12);
  uint64_t v10 = 0;
  BOOL v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  uint64_t v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unsigned int v4 = v15;
  if (v15)
  {
    do
    {
      std::string::size_type v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unsigned int v4 = v5;
    }
    while (v5);
  }
  std::string v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  std::string::pointer v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    BOOL v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      BOOL v9 = v12;
    }
    std::string v13 = v7;
    operator delete(v9);
  }
}

void sub_7F6C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7F6C6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25C5C50[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25C5C50, *(unint64_t *)&byte_25C5C50[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25C5C50;
  }
  sub_7F6E60(a1 + 608, (uint64_t)&v16);
  if (!v18)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    BOOL v11 = v17;
    if (!v17) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (byte_25C5457 >= 0) {
    unsigned int v4 = (const std::string::value_type *)&xmmword_25C5440;
  }
  else {
    unsigned int v4 = (const std::string::value_type *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    std::string::size_type v5 = byte_25C5457;
  }
  else {
    std::string::size_type v5 = *((void *)&xmmword_25C5440 + 1);
  }
  std::string::append(&__dst, v4, v5);
  if (byte_25C57B7 >= 0) {
    std::string v6 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    std::string v6 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v7 = byte_25C57B7;
  }
  else {
    std::string::size_type v7 = qword_25C57A8;
  }
  std::string::append(&__dst, v6, v7);
  sub_7F6E60(a1 + 608, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  uint64_t v8 = v15;
  if (v15)
  {
    do
    {
      BOOL v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  BOOL v11 = v17;
  if (v17)
  {
    do
    {
LABEL_22:
      long long v12 = (void *)*v11;
      sub_4F4B48((uint64_t)(v11 + 2));
      operator delete(v11);
      BOOL v11 = v12;
    }
    while (v12);
  }
LABEL_23:
  std::string v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    operator delete(v13);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_7F6E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_4DD068((uint64_t)&a9);
  sub_4DD068((uint64_t)&a14);
  if (*(char *)(v14 - 41) < 0) {
    operator delete(*(void **)(v14 - 64));
  }
  _Unwind_Resume(a1);
}

std::string *sub_7F6E60@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  double result = (std::string *)sub_6F2FD8(a1);
  if (result)
  {
    std::string v6 = &xmmword_25C6670;
    std::string::size_type v5 = sub_617978(a2, (uint64_t)&xmmword_25C6670, (uint64_t)&unk_20F06E0, &v6);
    std::string::operator=((std::string *)(v5 + 5), (const std::string *)a1);
    v5[8] = *(void *)(a1 + 24);
    std::string::operator=((std::string *)v5 + 3, (const std::string *)(a1 + 32));
    v5[12] = *(void *)(a1 + 56);
    *((_DWORD *)v5 + 26) = *(_DWORD *)(a1 + 64);
    std::string::operator=((std::string *)(v5 + 14), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(v5 + 17), (const std::string *)(a1 + 96));
    *((_DWORD *)v5 + 40) = *(_DWORD *)(a1 + 120);
    return std::string::operator=((std::string *)v5 + 7, (const std::string *)(a1 + 128));
  }
  return result;
}

void sub_7F6F34(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_7F6F48(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  unsigned int v5 = *(_DWORD *)(a1 + 1848);
  BOOL v6 = v5 > 0x22 || ((1 << v5) & 0x600040000) == 0;
  if (!v6 || v5 - 82 <= 2)
  {
    sub_7F71C0(a1, a3);
    return;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v8 = *(void *)(a1 + 936);
  uint64_t v9 = *(void *)(a1 + 944);
  if (v8 != v9)
  {
    if (v9 - v8 == 152) {
      goto LABEL_11;
    }
LABEL_15:
    unsigned int v12 = *(_DWORD *)(a1 + 1848);
    if (((1 << v12) & 0x60000800) != 0) {
      int v13 = a2;
    }
    else {
      int v13 = 1;
    }
    if (v12 <= 0x1E) {
      int v10 = v13;
    }
    else {
      int v10 = 1;
    }
    if (*(unsigned char *)(a1 + 2122)) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (!sub_6F2FD8(a1 + 304)) {
    return;
  }
  if (*(void *)(a1 + 944) - *(void *)(a1 + 936) != 152) {
    goto LABEL_15;
  }
LABEL_11:
  int v10 = 1;
  if (*(unsigned char *)(a1 + 2122))
  {
LABEL_12:
    BOOL v11 = &xmmword_25C5230;
    goto LABEL_29;
  }
LABEL_22:
  if (*(unsigned char *)(a1 + 2123))
  {
    BOOL v11 = &xmmword_25C5248;
  }
  else if (*(unsigned char *)(a1 + 2121))
  {
    BOOL v11 = &xmmword_25C5218;
  }
  else if (*(unsigned char *)(a1 + 2120))
  {
    BOOL v11 = (long long *)&dword_25C5200;
  }
  else
  {
    BOOL v11 = (long long *)&dword_25C51E8;
  }
LABEL_29:
  if (*((char *)v11 + 23) < 0)
  {
    sub_4200(__p, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = *v11;
    uint64_t v18 = *((void *)v11 + 2);
  }
  if (v10) {
    uint64_t v14 = (const std::string *)__p;
  }
  else {
    uint64_t v14 = (const std::string *)&dword_25C5260;
  }
  std::string::operator=(a3, v14);
  if (((v10 | a2) & 1) == 0)
  {
    if (byte_25C54B7 >= 0) {
      std::string::size_type v15 = (const std::string::value_type *)&qword_25C54A0;
    }
    else {
      std::string::size_type v15 = (const std::string::value_type *)qword_25C54A0;
    }
    if (byte_25C54B7 >= 0) {
      std::string::size_type v16 = byte_25C54B7;
    }
    else {
      std::string::size_type v16 = unk_25C54A8;
    }
    std::string::append(a3, v15, v16);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_7F7138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

BOOL sub_7F7188(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 1848);
  return v1 <= 0x22 && ((1 << v1) & 0x600040000) != 0 || v1 - 82 < 3;
}

void sub_7F71C0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  if ((*(_DWORD *)(a1 + 1848) - 82) > 2)
  {
    unsigned int v4 = sub_8001FC(a1);
    if (*((char *)v4 + 23) < 0)
    {
      sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
      int v6 = SHIBYTE(v82);
      if (v82 >= 0) {
        size_t v7 = HIBYTE(v82);
      }
      else {
        size_t v7 = (size_t)__p[1];
      }
      if (v7)
      {
LABEL_10:
        uint64_t v8 = *(void *)(a1 + 1960);
        if (*(unsigned char *)(v8 + 1524) && !*(unsigned char *)(v8 + 1522) && *(unsigned char *)(a1 + 1409) && *(_DWORD *)(a1 + 2128) == 1)
        {
          int v18 = *(_DWORD *)(a1 + 1848);
          if (v18 == 34)
          {
            int v19 = byte_25C4A97;
            if (byte_25C4A97 >= 0) {
              size_t v20 = byte_25C4A97;
            }
            else {
              size_t v20 = *((void *)&xmmword_25C4A80 + 1);
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v63 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v63 > 0x16)
              {
                uint64_t v68 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v63 | 7) != 0x17) {
                  uint64_t v68 = v63 | 7;
                }
                uint64_t v69 = v68 + 1;
                unint64_t v24 = (char *)operator new(v68 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v69 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                size_t v67 = &xmmword_25C4A80;
                goto LABEL_189;
              }
LABEL_193:
              uint64_t v73 = &v24[v20];
              if (v22)
              {
                if (v21 >= 0) {
                  long long v74 = &qword_25C58D8;
                }
                else {
                  long long v74 = (uint64_t *)qword_25C58D8;
                }
                memmove(v73, v74, v22);
              }
              v73[v22] = 0;
              int v43 = SHIBYTE(v80);
              if (v80 >= 0) {
                size_t v44 = HIBYTE(v80);
              }
              else {
                size_t v44 = (size_t)v79[1];
              }
              unint64_t v75 = v7 + v44;
              if (v7 + v44 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v75 > 0x16)
              {
                uint64_t v76 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v75 | 7) != 0x17) {
                  uint64_t v76 = v75 | 7;
                }
                uint64_t v77 = v76 + 1;
                size_t v78 = operator new(v76 + 1);
                *(void *)(v3 + 8) = v75;
                *(void *)(v3 + 16) = v77 | 0x8000000000000000;
                *(void *)uint64_t v3 = v78;
                uint64_t v3 = (uint64_t)v78;
              }
              else
              {
                *(void *)(v3 + 8) = 0;
                *(void *)(v3 + 16) = 0;
                *(void *)uint64_t v3 = 0;
                *(unsigned char *)(v3 + 23) = v75;
              }
              if (!v44) {
                goto LABEL_109;
              }
              goto LABEL_105;
            }
          }
          else if (v18 == 33)
          {
            int v19 = byte_25C4A7F;
            if (byte_25C4A7F >= 0) {
              size_t v20 = byte_25C4A7F;
            }
            else {
              size_t v20 = *((void *)&xmmword_25C4A68 + 1);
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v23 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v23 > 0x16)
              {
                uint64_t v65 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v23 | 7) != 0x17) {
                  uint64_t v65 = v23 | 7;
                }
                uint64_t v66 = v65 + 1;
                unint64_t v24 = (char *)operator new(v65 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v66 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                size_t v67 = &xmmword_25C4A68;
LABEL_189:
                if (v19 >= 0) {
                  long long v72 = v67;
                }
                else {
                  long long v72 = *(long long **)v67;
                }
                memmove(v24, v72, v20);
                goto LABEL_193;
              }
              goto LABEL_193;
            }
          }
          else
          {
            int v19 = byte_25C4A67;
            if (byte_25C4A67 >= 0) {
              size_t v20 = byte_25C4A67;
            }
            else {
              size_t v20 = qword_25C4A58;
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v64 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v64 > 0x16)
              {
                uint64_t v70 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v64 | 7) != 0x17) {
                  uint64_t v70 = v64 | 7;
                }
                uint64_t v71 = v70 + 1;
                unint64_t v24 = (char *)operator new(v70 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v71 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                size_t v67 = (long long *)&qword_25C4A50;
                goto LABEL_189;
              }
              goto LABEL_193;
            }
          }
          sub_188D690();
        }
        if (*(unsigned char *)(a1 + 1409))
        {
          int v9 = *(_DWORD *)(a1 + 1848);
          if (v9 == 34)
          {
            int v10 = byte_25C4ADF;
            if (byte_25C4ADF >= 0) {
              size_t v11 = byte_25C4ADF;
            }
            else {
              size_t v11 = *((void *)&xmmword_25C4AC8 + 1);
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v25 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v25 > 0x16)
              {
                uint64_t v36 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17) {
                  uint64_t v36 = v25 | 7;
                }
                uint64_t v37 = v36 + 1;
                std::string::size_type v15 = (char *)operator new(v36 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v37 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = &xmmword_25C4AC8;
                goto LABEL_90;
              }
LABEL_94:
              uint64_t v41 = &v15[v11];
              if (v13)
              {
                if (v12 >= 0) {
                  int v42 = &qword_25C58D8;
                }
                else {
                  int v42 = (uint64_t *)qword_25C58D8;
                }
                memmove(v41, v42, v13);
              }
              v41[v13] = 0;
              int v43 = SHIBYTE(v80);
              if (v80 >= 0) {
                size_t v44 = HIBYTE(v80);
              }
              else {
                size_t v44 = (size_t)v79[1];
              }
              unint64_t v45 = v7 + v44;
              if (v7 + v44 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v45 > 0x16)
              {
                uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17) {
                  uint64_t v48 = v45 | 7;
                }
                uint64_t v49 = v48 + 1;
                std::string::size_type v50 = operator new(v48 + 1);
                *(void *)(v3 + 8) = v45;
                *(void *)(v3 + 16) = v49 | 0x8000000000000000;
                *(void *)uint64_t v3 = v50;
                uint64_t v3 = (uint64_t)v50;
                if (!v44) {
                  goto LABEL_109;
                }
              }
              else
              {
                *(void *)(v3 + 8) = 0;
                *(void *)(v3 + 16) = 0;
                *(void *)uint64_t v3 = 0;
                *(unsigned char *)(v3 + 23) = v45;
                if (!v44)
                {
LABEL_109:
                  int v47 = (void *)(v3 + v44);
LABEL_142:
                  if (v6 >= 0) {
                    long long v59 = __p;
                  }
                  else {
                    long long v59 = (void **)__p[0];
                  }
                  memmove(v47, v59, v7);
LABEL_146:
                  *((unsigned char *)v47 + v7) = 0;
                  if (v43 < 0)
                  {
                    operator delete(v79[0]);
                    if ((SHIBYTE(v82) & 0x80000000) == 0) {
                      return;
                    }
LABEL_148:
                    operator delete(__p[0]);
                    return;
                  }
LABEL_147:
                  if ((SHIBYTE(v82) & 0x80000000) == 0) {
                    return;
                  }
                  goto LABEL_148;
                }
              }
LABEL_105:
              if (v43 >= 0) {
                uint64_t v46 = v79;
              }
              else {
                uint64_t v46 = (void **)v79[0];
              }
              memmove((void *)v3, v46, v44);
              goto LABEL_109;
            }
          }
          else if (v9 == 33)
          {
            int v10 = byte_25C4AC7;
            if (byte_25C4AC7 >= 0) {
              size_t v11 = byte_25C4AC7;
            }
            else {
              size_t v11 = *((void *)&xmmword_25C4AB0 + 1);
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v14 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v14 > 0x16)
              {
                uint64_t v33 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v14 | 7) != 0x17) {
                  uint64_t v33 = v14 | 7;
                }
                uint64_t v34 = v33 + 1;
                std::string::size_type v15 = (char *)operator new(v33 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v34 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = &xmmword_25C4AB0;
LABEL_90:
                if (v10 >= 0) {
                  int v40 = v35;
                }
                else {
                  int v40 = *(long long **)v35;
                }
                memmove(v15, v40, v11);
                goto LABEL_94;
              }
              goto LABEL_94;
            }
          }
          else
          {
            int v10 = byte_25C4AAF;
            if (byte_25C4AAF >= 0) {
              size_t v11 = byte_25C4AAF;
            }
            else {
              size_t v11 = qword_25C4AA0;
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v26 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v26 > 0x16)
              {
                uint64_t v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17) {
                  uint64_t v38 = v26 | 7;
                }
                uint64_t v39 = v38 + 1;
                std::string::size_type v15 = (char *)operator new(v38 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v39 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = (long long *)&qword_25C4A98;
                goto LABEL_90;
              }
              goto LABEL_94;
            }
          }
          sub_188D690();
        }
        int v16 = *(_DWORD *)(a1 + 1848);
        if (v16 == 34)
        {
          BOOL v17 = &xmmword_25C5320;
          if ((SHIBYTE(qword_25C5330) & 0x80000000) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          if (v16 != 33)
          {
            int v27 = byte_25C4A1F;
            if (byte_25C4A1F >= 0) {
              size_t v28 = byte_25C4A1F;
            }
            else {
              size_t v28 = qword_25C4A10;
            }
            int v29 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v30 = byte_25C58EF;
            }
            else {
              size_t v30 = qword_25C58E0;
            }
            unint64_t v31 = v30 + v28;
            if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v31 > 0x16)
            {
              uint64_t v51 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v51 = v31 | 7;
              }
              uint64_t v52 = v51 + 1;
              uint64_t v32 = (char *)operator new(v51 + 1);
              v79[1] = (void *)(v30 + v28);
              int64_t v80 = v52 | 0x8000000000000000;
              v79[0] = v32;
            }
            else
            {
              v79[1] = 0;
              int64_t v80 = 0;
              v79[0] = 0;
              uint64_t v32 = (char *)v79;
              HIBYTE(v80) = v30 + v28;
            }
            if (v28)
            {
              if (v27 >= 0) {
                uint64_t v53 = &qword_25C4A08;
              }
              else {
                uint64_t v53 = (uint64_t *)qword_25C4A08;
              }
              memmove(v32, v53, v28);
            }
            int64_t v54 = &v32[v28];
            if (v30)
            {
              if (v29 >= 0) {
                std::string v55 = &qword_25C58D8;
              }
              else {
                std::string v55 = (uint64_t *)qword_25C58D8;
              }
              memmove(v54, v55, v30);
            }
            v54[v30] = 0;
LABEL_128:
            int v43 = SHIBYTE(v80);
            if (v80 >= 0) {
              size_t v56 = HIBYTE(v80);
            }
            else {
              size_t v56 = (size_t)v79[1];
            }
            int v6 = SHIBYTE(v82);
            if (v82 >= 0) {
              size_t v7 = HIBYTE(v82);
            }
            else {
              size_t v7 = (size_t)__p[1];
            }
            unint64_t v57 = v7 + v56;
            if (v7 + v56 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v57 > 0x16)
            {
              uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17) {
                uint64_t v60 = v57 | 7;
              }
              uint64_t v61 = v60 + 1;
              uint64_t v62 = operator new(v60 + 1);
              *(void *)(v3 + 8) = v57;
              *(void *)(v3 + 16) = v61 | 0x8000000000000000;
              *(void *)uint64_t v3 = v62;
              uint64_t v3 = (uint64_t)v62;
              if (!v56)
              {
LABEL_141:
                int v47 = (void *)(v3 + v56);
                if (!v7) {
                  goto LABEL_146;
                }
                goto LABEL_142;
              }
            }
            else
            {
              *(void *)(v3 + 8) = 0;
              *(void *)(v3 + 16) = 0;
              *(void *)uint64_t v3 = 0;
              *(unsigned char *)(v3 + 23) = v57;
              if (!v56) {
                goto LABEL_141;
              }
            }
            if (v43 >= 0) {
              uint64_t v58 = v79;
            }
            else {
              uint64_t v58 = (void **)v79[0];
            }
            memmove((void *)v3, v58, v56);
            goto LABEL_141;
          }
          BOOL v17 = &xmmword_25C5338;
          if ((byte_25C534F & 0x80000000) == 0)
          {
LABEL_32:
            *(_OWORD *)int v79 = *v17;
            int64_t v80 = *((void *)v17 + 2);
            goto LABEL_128;
          }
        }
        sub_4200(v79, *(void **)v17, *((void *)v17 + 1));
        goto LABEL_128;
      }
    }
    else
    {
      long long v5 = *v4;
      int64_t v82 = *((void *)v4 + 2);
      *(_OWORD *)std::string __p = v5;
      int v6 = SHIBYTE(v82);
      if (v82 >= 0) {
        size_t v7 = HIBYTE(v82);
      }
      else {
        size_t v7 = *((void *)&v5 + 1);
      }
      if (v7) {
        goto LABEL_10;
      }
    }
    sub_7F9E6C(a1, v3);
    goto LABEL_147;
  }

  sub_8008A4(a1, a2);
}

void sub_7F7B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7F7B64(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 1848) < 0x1Fu) & (0x60000800u >> *(_DWORD *)(a1 + 1848));
}

BOOL sub_7F7B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  return v2 != 0;
}

std::string *sub_7F7BA4@<X0>(std::string *result@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::pointer data = result[40].__r_.__value_.__l.__data_;
  std::string::size_type size = result[40].__r_.__value_.__l.__size_;
  if (data != (std::string::pointer)size)
  {
    double result = std::string::operator=(a3, (const std::string *)&qword_25C5278);
    if (size - (void)data != 152 && (a2 & 1) == 0)
    {
      if (byte_25C54E7 >= 0) {
        size_t v7 = (const std::string::value_type *)&qword_25C54D0;
      }
      else {
        size_t v7 = (const std::string::value_type *)qword_25C54D0;
      }
      if (byte_25C54E7 >= 0) {
        std::string::size_type v8 = byte_25C54E7;
      }
      else {
        std::string::size_type v8 = *(void *)&word_25C54D8;
      }
      return std::string::append(a3, v7, v8);
    }
  }
  return result;
}

void sub_7F7C30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7F7C4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_7F7C80(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7F7C94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  p_p = &__p;
  uint64_t v260 = a1 + 8;
  sub_635CD0((long long **)(a1 + 8), (uint64_t)&__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  LODWORD(v5) = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v6 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_25C5487 >= 0) {
    size_t v7 = &qword_25C5470;
  }
  else {
    size_t v7 = (uint64_t *)qword_25C5470;
  }
  if (byte_25C5487 >= 0) {
    int64_t v8 = byte_25C5487;
  }
  else {
    int64_t v8 = unk_25C5478;
  }
  uint64_t v261 = v2;
  if (*(unsigned char *)(v2 + 1856))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v8)
    {
      if ((uint64_t)size >= v8)
      {
        int v9 = (char *)p_p + size;
        int v10 = *(char *)v7;
        int64_t v11 = size;
        int v12 = p_p;
        while (1)
        {
          int64_t v13 = v11 - v8;
          if (v13 == -1) {
            goto LABEL_47;
          }
          unint64_t v14 = (char *)memchr(v12, v10, v13 + 1);
          if (!v14) {
            goto LABEL_47;
          }
          std::string::size_type v15 = v14;
          if (!memcmp(v14, v7, v8)) {
            break;
          }
          int v12 = (std::string *)(v15 + 1);
          int64_t v11 = v9 - (v15 + 1);
          if (v11 < v8) {
            goto LABEL_47;
          }
        }
        if (v15 == v9)
        {
LABEL_47:
          uint64_t v2 = v261;
          goto LABEL_48;
        }
        int64_t v23 = v15 - (char *)p_p;
        uint64_t v2 = v261;
        if (v15 - (char *)p_p != -1) {
          goto LABEL_31;
        }
      }
LABEL_48:
      if (byte_25C5457 >= 0) {
        int v29 = &xmmword_25C5440;
      }
      else {
        int v29 = (long long *)xmmword_25C5440;
      }
      if (byte_25C5457 >= 0) {
        int64_t v30 = byte_25C5457;
      }
      else {
        int64_t v30 = *((void *)&xmmword_25C5440 + 1);
      }
      if ((v5 & 0x80u) == 0) {
        unint64_t v31 = &__p;
      }
      else {
        unint64_t v31 = (std::string *)v6;
      }
      if ((v5 & 0x80u) == 0) {
        std::string::size_type v32 = v5;
      }
      else {
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
      }
      if (v30)
      {
        if ((uint64_t)v32 >= v30)
        {
          uint64_t v33 = (char *)v31 + v32;
          int v34 = *(char *)v29;
          int64_t v35 = v32;
          uint64_t v36 = v31;
          while (1)
          {
            int64_t v37 = v35 - v30;
            if (v37 == -1) {
              goto LABEL_85;
            }
            uint64_t v38 = (char *)memchr(v36, v34, v37 + 1);
            if (!v38) {
              goto LABEL_85;
            }
            uint64_t v39 = v38;
            if (!memcmp(v38, v29, v30)) {
              break;
            }
            uint64_t v36 = (std::string *)(v39 + 1);
            int64_t v35 = v33 - (v39 + 1);
            if (v35 < v30) {
              goto LABEL_85;
            }
          }
          if (v39 == v33)
          {
LABEL_85:
            uint64_t v2 = v261;
            goto LABEL_86;
          }
          int64_t v40 = v39 - (char *)v31;
          uint64_t v2 = v261;
          if (v39 - (char *)v31 != -1) {
            goto LABEL_69;
          }
        }
LABEL_86:
        if (byte_25C546F >= 0) {
          uint64_t v46 = &qword_25C5458;
        }
        else {
          uint64_t v46 = (uint64_t *)qword_25C5458;
        }
        if (byte_25C546F >= 0) {
          int64_t v47 = byte_25C546F;
        }
        else {
          int64_t v47 = qword_25C5460;
        }
        if ((v5 & 0x80u) == 0) {
          uint64_t v48 = &__p;
        }
        else {
          uint64_t v48 = (std::string *)v6;
        }
        if ((v5 & 0x80u) == 0) {
          std::string::size_type v49 = v5;
        }
        else {
          std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
        }
        if (v47)
        {
          if ((uint64_t)v49 >= v47)
          {
            std::string::size_type v50 = (char *)v48 + v49;
            int v51 = *(char *)v46;
            int64_t v52 = v49;
            uint64_t v53 = v48;
            while (1)
            {
              int64_t v54 = v52 - v47;
              if (v54 == -1) {
                goto LABEL_123;
              }
              std::string v55 = (char *)memchr(v53, v51, v54 + 1);
              if (!v55) {
                goto LABEL_123;
              }
              size_t v56 = v55;
              if (!memcmp(v55, v46, v47)) {
                break;
              }
              uint64_t v53 = (std::string *)(v56 + 1);
              int64_t v52 = v50 - (v56 + 1);
              if (v52 < v47) {
                goto LABEL_123;
              }
            }
            if (v56 == v50)
            {
LABEL_123:
              uint64_t v2 = v261;
              goto LABEL_124;
            }
            int64_t v57 = v56 - (char *)v48;
            uint64_t v2 = v261;
            if (v56 - (char *)v48 != -1) {
              goto LABEL_107;
            }
          }
LABEL_124:
          if (byte_25C5517 >= 0) {
            unint64_t v63 = &qword_25C5500;
          }
          else {
            unint64_t v63 = (uint64_t *)qword_25C5500;
          }
          if (byte_25C5517 >= 0) {
            int64_t v64 = byte_25C5517;
          }
          else {
            int64_t v64 = *(void *)&dword_25C5508;
          }
          if ((v5 & 0x80u) == 0) {
            uint64_t v65 = &__p;
          }
          else {
            uint64_t v65 = (std::string *)v6;
          }
          if ((v5 & 0x80u) == 0) {
            std::string::size_type v66 = v5;
          }
          else {
            std::string::size_type v66 = __p.__r_.__value_.__l.__size_;
          }
          if (v64)
          {
            if ((uint64_t)v66 >= v64)
            {
              size_t v67 = (char *)v65 + v66;
              int v68 = *(char *)v63;
              int64_t v69 = v66;
              uint64_t v70 = v65;
              while (1)
              {
                int64_t v71 = v69 - v64;
                if (v71 == -1) {
                  goto LABEL_161;
                }
                long long v72 = (char *)memchr(v70, v68, v71 + 1);
                if (!v72) {
                  goto LABEL_161;
                }
                uint64_t v73 = v72;
                if (!memcmp(v72, v63, v64)) {
                  break;
                }
                uint64_t v70 = (std::string *)(v73 + 1);
                int64_t v69 = v67 - (v73 + 1);
                if (v69 < v64) {
                  goto LABEL_161;
                }
              }
              if (v73 == v67)
              {
LABEL_161:
                uint64_t v2 = v261;
                goto LABEL_162;
              }
              int64_t v74 = v73 - (char *)v65;
              uint64_t v2 = v261;
              if (v73 - (char *)v65 != -1) {
                goto LABEL_145;
              }
            }
LABEL_162:
            if (byte_25C5547 >= 0) {
              int64_t v80 = &qword_25C5530;
            }
            else {
              int64_t v80 = (uint64_t *)qword_25C5530;
            }
            if (byte_25C5547 >= 0) {
              int64_t v81 = byte_25C5547;
            }
            else {
              int64_t v81 = unk_25C5538;
            }
            if ((v5 & 0x80u) == 0) {
              int64_t v82 = &__p;
            }
            else {
              int64_t v82 = (std::string *)v6;
            }
            if ((v5 & 0x80u) == 0) {
              std::string::size_type v83 = v5;
            }
            else {
              std::string::size_type v83 = __p.__r_.__value_.__l.__size_;
            }
            if (v81)
            {
              if ((uint64_t)v83 >= v81)
              {
                int v84 = (char *)v82 + v83;
                int v85 = *(char *)v80;
                int64_t v86 = v83;
                size_t v87 = v82;
                while (1)
                {
                  int64_t v88 = v86 - v81;
                  if (v88 == -1) {
                    goto LABEL_199;
                  }
                  uint64_t v89 = (char *)memchr(v87, v85, v88 + 1);
                  if (!v89) {
                    goto LABEL_199;
                  }
                  uint64_t v90 = v89;
                  if (!memcmp(v89, v80, v81)) {
                    break;
                  }
                  size_t v87 = (std::string *)(v90 + 1);
                  int64_t v86 = v84 - (v90 + 1);
                  if (v86 < v81) {
                    goto LABEL_199;
                  }
                }
                if (v90 == v84)
                {
LABEL_199:
                  uint64_t v2 = v261;
                  goto LABEL_200;
                }
                int64_t v91 = v90 - (char *)v82;
                uint64_t v2 = v261;
                if (v90 - (char *)v82 != -1) {
                  goto LABEL_183;
                }
              }
LABEL_200:
              if (byte_25C54CF >= 0) {
                uint64_t v97 = &qword_25C54B8;
              }
              else {
                uint64_t v97 = (uint64_t *)qword_25C54B8;
              }
              if (byte_25C54CF >= 0) {
                int64_t v98 = byte_25C54CF;
              }
              else {
                int64_t v98 = *(void *)&word_25C54C0;
              }
              if ((v5 & 0x80u) == 0) {
                uint64_t v99 = &__p;
              }
              else {
                uint64_t v99 = (std::string *)v6;
              }
              if ((v5 & 0x80u) == 0) {
                std::string::size_type v100 = v5;
              }
              else {
                std::string::size_type v100 = __p.__r_.__value_.__l.__size_;
              }
              if (v98)
              {
                if ((uint64_t)v100 >= v98)
                {
                  uint64_t v101 = (char *)v99 + v100;
                  int v102 = *(char *)v97;
                  int64_t v103 = v100;
                  uint64_t v104 = v99;
                  while (1)
                  {
                    int64_t v105 = v103 - v98;
                    if (v105 == -1) {
                      break;
                    }
                    uint64_t v106 = (char *)memchr(v104, v102, v105 + 1);
                    if (!v106) {
                      break;
                    }
                    int v107 = v106;
                    if (!memcmp(v106, v97, v98))
                    {
                      if (v107 != v101)
                      {
                        int64_t v108 = v107 - (char *)v99;
                        if (v107 - (char *)v99 != -1) {
                          goto LABEL_221;
                        }
                      }
                      goto LABEL_320;
                    }
                    uint64_t v104 = (std::string *)(v107 + 1);
                    int64_t v103 = v101 - (v107 + 1);
                    if (v103 < v98) {
                      goto LABEL_320;
                    }
                  }
                }
                goto LABEL_320;
              }
              int64_t v108 = 0;
LABEL_221:
              std::string::size_type v109 = v108 + v98;
              if (v100 >= v109) {
                std::string::size_type v110 = v109;
              }
              else {
                std::string::size_type v110 = v100;
              }
              if (v110 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v110 >= 0x17)
              {
                uint64_t v111 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v110 | 7) != 0x17) {
                  uint64_t v111 = v110 | 7;
                }
LABEL_559:
                uint64_t v257 = v111 + 1;
                unint64_t v148 = (std::string *)operator new(v111 + 1);
                __dst.__r_.__value_.__l.__size_ = v110;
                __dst.__r_.__value_.__r.__words[2] = v257 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
                goto LABEL_560;
              }
              goto LABEL_317;
            }
            int64_t v91 = 0;
LABEL_183:
            std::string::size_type v92 = v91 + v81;
            if (v83 >= v92) {
              std::string::size_type v93 = v92;
            }
            else {
              std::string::size_type v93 = v83;
            }
            if (v93 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v93 >= 0x17)
            {
              uint64_t v95 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v93 | 7) != 0x17) {
                uint64_t v95 = v93 | 7;
              }
              uint64_t v96 = v95 + 1;
              p_dst = (std::string *)operator new(v95 + 1);
              __dst.__r_.__value_.__l.__size_ = v93;
              __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v93;
              p_dst = &__dst;
              if (!v93)
              {
                __dst.__r_.__value_.__s.__data_[0] = 0;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_190:
                  std::string __p = __dst;
                  std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
                  goto LABEL_200;
                }
LABEL_195:
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_190;
              }
            }
            memmove(p_dst, v82, v93);
            p_dst->__r_.__value_.__s.__data_[v93] = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_190;
            }
            goto LABEL_195;
          }
          int64_t v74 = 0;
LABEL_145:
          std::string::size_type v75 = v74 + v64;
          if (v66 >= v75) {
            std::string::size_type v76 = v75;
          }
          else {
            std::string::size_type v76 = v66;
          }
          if (v76 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          if (v76 >= 0x17)
          {
            uint64_t v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v76 | 7) != 0x17) {
              uint64_t v78 = v76 | 7;
            }
            uint64_t v79 = v78 + 1;
            uint64_t v77 = (std::string *)operator new(v78 + 1);
            __dst.__r_.__value_.__l.__size_ = v76;
            __dst.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v76;
            uint64_t v77 = &__dst;
            if (!v76)
            {
              __dst.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_152:
                std::string __p = __dst;
                std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
                goto LABEL_162;
              }
LABEL_157:
              operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_152;
            }
          }
          memmove(v77, v65, v76);
          v77->__r_.__value_.__s.__data_[v76] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_152;
          }
          goto LABEL_157;
        }
        int64_t v57 = 0;
LABEL_107:
        std::string::size_type v58 = v57 + v47;
        if (v49 >= v58) {
          std::string::size_type v59 = v58;
        }
        else {
          std::string::size_type v59 = v49;
        }
        if (v59 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v59 >= 0x17)
        {
          uint64_t v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v61 = v59 | 7;
          }
          uint64_t v62 = v61 + 1;
          uint64_t v60 = (std::string *)operator new(v61 + 1);
          __dst.__r_.__value_.__l.__size_ = v59;
          __dst.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v59;
          uint64_t v60 = &__dst;
          if (!v59)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_114:
              std::string __p = __dst;
              std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
              goto LABEL_124;
            }
LABEL_119:
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_114;
          }
        }
        memmove(v60, v48, v59);
        v60->__r_.__value_.__s.__data_[v59] = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_119;
      }
      int64_t v40 = 0;
LABEL_69:
      std::string::size_type v41 = v40 + v30;
      if (v32 >= v41) {
        std::string::size_type v42 = v41;
      }
      else {
        std::string::size_type v42 = v32;
      }
      if (v42 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        int v43 = (std::string *)operator new(v44 + 1);
        __dst.__r_.__value_.__l.__size_ = v42;
        __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42;
        int v43 = &__dst;
        if (!v42)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            std::string __p = __dst;
            std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_81:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_76;
        }
      }
      memmove(v43, v31, v42);
      v43->__r_.__value_.__s.__data_[v42] = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_81;
    }
    int64_t v23 = 0;
LABEL_31:
    std::string::size_type v24 = v23 + v8;
    if (size >= v24) {
      std::string::size_type v25 = v24;
    }
    else {
      std::string::size_type v25 = size;
    }
    if (v25 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v25 >= 0x17)
    {
      uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v27 = v25 | 7;
      }
      uint64_t v28 = v27 + 1;
      unint64_t v26 = (std::string *)operator new(v27 + 1);
      __dst.__r_.__value_.__l.__size_ = v25;
      __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25;
      unint64_t v26 = &__dst;
      if (!v25)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          std::string __p = __dst;
          std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
          goto LABEL_48;
        }
LABEL_43:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
    }
    memmove(v26, p_p, v25);
    v26->__r_.__value_.__s.__data_[v25] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }
  if (v8)
  {
    int64_t v16 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v16 < v8) {
      goto LABEL_244;
    }
    BOOL v17 = (char *)p_p + v16;
    int v18 = *(char *)v7;
    int v19 = p_p;
    while (1)
    {
      int64_t v20 = v16 - v8;
      if (v20 == -1 || (int v21 = (char *)memchr(v19, v18, v20 + 1)) == 0)
      {
LABEL_29:
        int64_t v258 = 0;
        uint64_t v2 = v261;
        goto LABEL_256;
      }
      size_t v22 = v21;
      if (!memcmp(v21, v7, v8)) {
        break;
      }
      int v19 = (std::string *)(v22 + 1);
      int64_t v16 = v17 - (v22 + 1);
      if (v16 < v8) {
        goto LABEL_29;
      }
    }
    int64_t v258 = 0;
    if (v22 == v17)
    {
      uint64_t v2 = v261;
      goto LABEL_256;
    }
    uint64_t v2 = v261;
    if (v22 - (char *)p_p == -1) {
      goto LABEL_256;
    }
  }
  if (byte_25C516F >= 0) {
    long long v112 = &qword_25C5158;
  }
  else {
    long long v112 = (uint64_t *)qword_25C5158;
  }
  if (byte_25C516F >= 0) {
    int64_t v113 = byte_25C516F;
  }
  else {
    int64_t v113 = *(void *)&byte_25C5160;
  }
  if (!v113)
  {
LABEL_255:
    int64_t v258 = v8;
    goto LABEL_256;
  }
  int64_t v114 = __p.__r_.__value_.__l.__size_;
  if ((v5 & 0x80000000) == 0) {
    int64_t v114 = size;
  }
  if (v114 < v113)
  {
LABEL_244:
    int64_t v258 = 0;
    goto LABEL_256;
  }
  uint64_t v115 = (char *)p_p + v114;
  int v116 = *(char *)v112;
  long long v117 = p_p;
  while (1)
  {
    int64_t v118 = v114 - v113;
    if (v118 == -1)
    {
LABEL_250:
      int64_t v258 = 0;
      goto LABEL_256;
    }
    size_t v119 = (char *)memchr(v117, v116, v118 + 1);
    if (!v119)
    {
      int64_t v258 = 0;
LABEL_252:
      uint64_t v2 = v261;
      goto LABEL_256;
    }
    unint64_t v120 = v119;
    if (!memcmp(v119, v112, v113)) {
      break;
    }
    long long v117 = (std::string *)(v120 + 1);
    int64_t v114 = v115 - (v120 + 1);
    uint64_t v2 = v261;
    if (v114 < v113) {
      goto LABEL_250;
    }
  }
  int64_t v258 = 0;
  if (v120 == v115) {
    goto LABEL_252;
  }
  BOOL v152 = v120 - (char *)p_p == -1;
  uint64_t v2 = v261;
  if (!v152) {
    goto LABEL_255;
  }
LABEL_256:
  if (byte_25C5457 >= 0) {
    int v121 = &xmmword_25C5440;
  }
  else {
    int v121 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v122 = byte_25C5457;
  }
  else {
    int64_t v122 = *((void *)&xmmword_25C5440 + 1);
  }
  if ((v5 & 0x80000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!v122)
  {
    int64_t v130 = 0;
LABEL_273:
    int64_t v131 = v258 + v122 + v130;
    if (size >= v131 + 1) {
      std::string::size_type v132 = v131 + 1;
    }
    else {
      std::string::size_type v132 = size;
    }
    if (v132 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v132 >= 0x17)
    {
      uint64_t v134 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v132 | 7) != 0x17) {
        uint64_t v134 = v132 | 7;
      }
      uint64_t v135 = v134 + 1;
      long long v133 = (std::string *)operator new(v134 + 1);
      __dst.__r_.__value_.__l.__size_ = v132;
      __dst.__r_.__value_.__r.__words[2] = v135 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v132;
      long long v133 = &__dst;
      if (!v132) {
        goto LABEL_284;
      }
    }
    memmove(v133, p_p, v132);
LABEL_284:
    v133->__r_.__value_.__s.__data_[v132] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst;
    std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
    goto LABEL_291;
  }
  if ((uint64_t)size >= v122)
  {
    uint64_t v123 = (char *)p_p + size;
    int v124 = *(char *)v121;
    int64_t v125 = size;
    int v126 = p_p;
    while (1)
    {
      int64_t v127 = v125 - v122;
      if (v127 == -1) {
        goto LABEL_290;
      }
      size_t v128 = (char *)memchr(v126, v124, v127 + 1);
      if (!v128) {
        goto LABEL_290;
      }
      int v129 = v128;
      if (!memcmp(v128, v121, v122)) {
        break;
      }
      int v126 = (std::string *)(v129 + 1);
      int64_t v125 = v123 - (v129 + 1);
      if (v125 < v122) {
        goto LABEL_290;
      }
    }
    if (v129 == v123)
    {
LABEL_290:
      uint64_t v2 = v261;
      goto LABEL_291;
    }
    int64_t v130 = v129 - (char *)p_p;
    uint64_t v2 = v261;
    if (v129 - (char *)p_p != -1) {
      goto LABEL_273;
    }
  }
LABEL_291:
  if (byte_25C546F >= 0) {
    BOOL v136 = &qword_25C5458;
  }
  else {
    BOOL v136 = (uint64_t *)qword_25C5458;
  }
  if (byte_25C546F >= 0) {
    int64_t v137 = byte_25C546F;
  }
  else {
    int64_t v137 = qword_25C5460;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v99 = &__p;
  }
  else {
    uint64_t v99 = (std::string *)v6;
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v138 = v5;
  }
  else {
    std::string::size_type v138 = __p.__r_.__value_.__l.__size_;
  }
  if (!v137)
  {
    int64_t v146 = 0;
LABEL_312:
    int64_t v147 = v258 + v137 + v146;
    if (v138 >= v147 + 1) {
      std::string::size_type v110 = v147 + 1;
    }
    else {
      std::string::size_type v110 = v138;
    }
    if (v110 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v110 >= 0x17)
    {
      uint64_t v111 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v110 | 7) != 0x17) {
        uint64_t v111 = v110 | 7;
      }
      goto LABEL_559;
    }
LABEL_317:
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110;
    unint64_t v148 = &__dst;
    if (!v110)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_561:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_319:
      std::string __p = __dst;
      goto LABEL_320;
    }
LABEL_560:
    memmove(v148, v99, v110);
    v148->__r_.__value_.__s.__data_[v110] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_561;
    }
    goto LABEL_319;
  }
  if ((uint64_t)v138 >= v137)
  {
    long long v139 = (char *)v99 + v138;
    int v140 = *(char *)v136;
    int64_t v141 = v138;
    int v142 = v99;
    do
    {
      int64_t v143 = v141 - v137;
      if (v143 == -1) {
        break;
      }
      unint64_t v144 = (char *)memchr(v142, v140, v143 + 1);
      if (!v144) {
        break;
      }
      unint64_t v145 = v144;
      if (!memcmp(v144, v136, v137))
      {
        if (v145 != v139)
        {
          int64_t v146 = v145 - (char *)v99;
          if (v145 - (char *)v99 != -1) {
            goto LABEL_312;
          }
        }
        break;
      }
      int v142 = (std::string *)(v145 + 1);
      int64_t v141 = v139 - (v145 + 1);
    }
    while (v141 >= v137);
  }
LABEL_320:
  unsigned int v149 = *(_DWORD *)(v2 + 1848);
  BOOL v150 = v149 > 0x22;
  uint64_t v151 = (1 << v149) & 0x600040000;
  BOOL v152 = v150 || v151 == 0;
  if (v152) {
    goto LABEL_377;
  }
  long long v153 = sub_8001FC(v2);
  if (*((char *)v153 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v153, *((void *)v153 + 1));
  }
  else
  {
    long long v154 = *v153;
    __dst.__r_.__value_.__r.__words[2] = *((void *)v153 + 2);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v154;
  }
  char v155 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v156 = __dst.__r_.__value_.__l.__size_;
    if (!__dst.__r_.__value_.__l.__size_)
    {
      sub_4200(&v264, __dst.__r_.__value_.__l.__data_, 0);
      goto LABEL_356;
    }
LABEL_331:
    int v157 = byte_25C58EF;
    if (byte_25C58EF >= 0) {
      size_t v158 = byte_25C58EF;
    }
    else {
      size_t v158 = qword_25C58E0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v159 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v159 = v156;
    }
    unint64_t v160 = v159 + v158;
    if (v159 + v158 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v160 > 0x16)
    {
      uint64_t v165 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v160 | 7) != 0x17) {
        uint64_t v165 = v160 | 7;
      }
      uint64_t v166 = v165 + 1;
      uint64_t v161 = (char *)operator new(v165 + 1);
      v264.__r_.__value_.__l.__size_ = v159 + v158;
      v264.__r_.__value_.__r.__words[2] = v166 | 0x8000000000000000;
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
      if (!v158) {
        goto LABEL_344;
      }
    }
    else
    {
      memset(&v264, 0, sizeof(v264));
      uint64_t v161 = (char *)&v264;
      *((unsigned char *)&v264.__r_.__value_.__s + 23) = v159 + v158;
      if (!v158)
      {
LABEL_344:
        uint64_t v163 = &v161[v158];
        if (v159)
        {
          if (v155 >= 0) {
            uint64_t v164 = &__dst;
          }
          else {
            uint64_t v164 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          memmove(v163, v164, v159);
        }
        v163[v159] = 0;
        goto LABEL_356;
      }
    }
    if (v157 >= 0) {
      uint64_t v162 = &qword_25C58D8;
    }
    else {
      uint64_t v162 = (uint64_t *)qword_25C58D8;
    }
    memmove(v161, v162, v158);
    goto LABEL_344;
  }
  if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
  {
    std::string::size_type v156 = __dst.__r_.__value_.__l.__size_;
    goto LABEL_331;
  }
  std::string v264 = __dst;
LABEL_356:
  int v167 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v168 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v168 = __p.__r_.__value_.__l.__size_;
  }
  int v169 = SHIBYTE(v264.__r_.__value_.__r.__words[2]);
  if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v170 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v170 = v264.__r_.__value_.__l.__size_;
  }
  unint64_t v171 = v170 + v168;
  if (v170 + v168 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 > 0x16)
  {
    uint64_t v188 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v188 = v171 | 7;
    }
    uint64_t v189 = v188 + 1;
    unint64_t v172 = (std::string *)operator new(v188 + 1);
    v265.__r_.__value_.__l.__size_ = v170 + v168;
    v265.__r_.__value_.__r.__words[2] = v189 | 0x8000000000000000;
    v265.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
    if (v168)
    {
LABEL_365:
      if (v167 >= 0) {
        unint64_t v173 = &__p;
      }
      else {
        unint64_t v173 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v172, v173, v168);
    }
  }
  else
  {
    memset(&v265, 0, sizeof(v265));
    unint64_t v172 = &v265;
    *((unsigned char *)&v265.__r_.__value_.__s + 23) = v170 + v168;
    if (v168) {
      goto LABEL_365;
    }
  }
  uint64_t v174 = (char *)v172 + v168;
  if (v170)
  {
    if (v169 >= 0) {
      uint64_t v175 = &v264;
    }
    else {
      uint64_t v175 = (std::string *)v264.__r_.__value_.__r.__words[0];
    }
    memmove(v174, v175, v170);
  }
  v174[v170] = 0;
  if (v167 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = v265;
    if ((*((unsigned char *)&v264.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_521;
    }
LABEL_376:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_522:
    }
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string __p = v265;
    if ((v169 & 0x80) == 0) {
      goto LABEL_376;
    }
LABEL_521:
    operator delete(v264.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_522;
    }
  }
LABEL_377:
  int v176 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v177 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v177 = __p.__r_.__value_.__l.__size_;
  }
  int v178 = byte_25C57B7;
  if (byte_25C57B7 >= 0) {
    size_t v179 = byte_25C57B7;
  }
  else {
    size_t v179 = qword_25C57A8;
  }
  unint64_t v180 = v179 + v177;
  if (v179 + v177 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 > 0x16)
  {
    uint64_t v186 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v186 = v180 | 7;
    }
    uint64_t v187 = v186 + 1;
    unint64_t v181 = (std::string *)operator new(v186 + 1);
    __dst.__r_.__value_.__l.__size_ = v179 + v177;
    __dst.__r_.__value_.__r.__words[2] = v187 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
    if (v177)
    {
LABEL_386:
      if (v176 >= 0) {
        uint64_t v182 = &__p;
      }
      else {
        uint64_t v182 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v181, v182, v177);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v181 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v179 + v177;
    if (v177) {
      goto LABEL_386;
    }
  }
  uint64_t v183 = (char *)v181 + v177;
  if (v179)
  {
    if (v178 >= 0) {
      uint64_t v184 = &qword_25C57A0;
    }
    else {
      uint64_t v184 = (uint64_t *)qword_25C57A0;
    }
    memmove(v183, v184, v179);
  }
  v183[v179] = 0;
  if (v176 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = __dst;
    unsigned __int8 v185 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_407;
    }
LABEL_397:
    std::string __dst = __p;
  }
  else
  {
    std::string __p = __dst;
    unsigned __int8 v185 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_397;
    }
LABEL_407:
    sub_4200(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    unsigned __int8 v185 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  size_t v190 = &v268;
  int v191 = (char)v185;
  if ((v185 & 0x80u) == 0) {
    size_t v192 = v185;
  }
  else {
    size_t v192 = __p.__r_.__value_.__l.__size_;
  }
  int v193 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v194 = byte_25C58D7;
  }
  else {
    size_t v194 = qword_25C58C8;
  }
  unint64_t v195 = v194 + v192;
  if (v194 + v192 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v195 > 0x16)
  {
    uint64_t v232 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17) {
      uint64_t v232 = v195 | 7;
    }
    uint64_t v233 = v232 + 1;
    unint64_t v234 = operator new(v232 + 1);
    size_t v269 = v194 + v192;
    unint64_t v270 = v233 | 0x8000000000000000;
    long long v268 = v234;
    size_t v190 = (void **)v234;
    if (v192)
    {
LABEL_417:
      if (v191 >= 0) {
        uint64_t v196 = &__p;
      }
      else {
        uint64_t v196 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v190, v196, v192);
    }
  }
  else
  {
    size_t v269 = 0;
    unint64_t v270 = 0;
    long long v268 = 0;
    HIBYTE(v270) = v194 + v192;
    if (v192) {
      goto LABEL_417;
    }
  }
  uint64_t v197 = (char *)v190 + v192;
  if (v194)
  {
    if (v193 >= 0) {
      uint64_t v198 = &qword_25C58C0;
    }
    else {
      uint64_t v198 = (uint64_t *)qword_25C58C0;
    }
    memmove(v197, v198, v194);
  }
  v197[v194] = 0;
  if (v195 > 0x16)
  {
    uint64_t v235 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17) {
      uint64_t v235 = v195 | 7;
    }
    uint64_t v236 = v235 + 1;
    unint64_t v199 = (char *)operator new(v235 + 1);
    v264.__r_.__value_.__l.__size_ = v194 + v192;
    v264.__r_.__value_.__r.__words[2] = v236 | 0x8000000000000000;
    v264.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
    if (v192)
    {
LABEL_428:
      if (v191 >= 0) {
        unint64_t v200 = &__p;
      }
      else {
        unint64_t v200 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v199, v200, v192);
    }
  }
  else
  {
    memset(&v264, 0, sizeof(v264));
    unint64_t v199 = (char *)&v264;
    *((unsigned char *)&v264.__r_.__value_.__s + 23) = v194 + v192;
    if (v192) {
      goto LABEL_428;
    }
  }
  uint64_t v201 = &v199[v192];
  if (v193 >= 0) {
    uint64_t v202 = &qword_25C58C0;
  }
  else {
    uint64_t v202 = (uint64_t *)qword_25C58C0;
  }
  if (v194) {
    memmove(v201, v202, v194);
  }
  v201[v194] = 0;
  uint64_t v203 = std::string::append(&v264, (const std::string::value_type *)v202, v194);
  long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  std::string::size_type v272 = v203->__r_.__value_.__r.__words[2];
  long long v271 = v204;
  v203->__r_.__value_.__l.__size_ = 0;
  v203->__r_.__value_.__r.__words[2] = 0;
  v203->__r_.__value_.__r.__words[0] = 0;
  int v205 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v206 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v206 = __p.__r_.__value_.__l.__size_;
  }
  int v207 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v208 = byte_25C58D7;
  }
  else {
    size_t v208 = qword_25C58C8;
  }
  unint64_t v209 = v208 + v206;
  if (v208 + v206 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 > 0x16)
  {
    uint64_t v237 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v237 = v209 | 7;
    }
    uint64_t v238 = v237 + 1;
    uint64_t v210 = (char *)operator new(v237 + 1);
    v262.__r_.__value_.__l.__size_ = v208 + v206;
    v262.__r_.__value_.__r.__words[2] = v238 | 0x8000000000000000;
    v262.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
    if (v206)
    {
LABEL_446:
      if (v205 >= 0) {
        uint64_t v211 = &__p;
      }
      else {
        uint64_t v211 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v210, v211, v206);
    }
  }
  else
  {
    memset(&v262, 0, sizeof(v262));
    uint64_t v210 = (char *)&v262;
    *((unsigned char *)&v262.__r_.__value_.__s + 23) = v208 + v206;
    if (v206) {
      goto LABEL_446;
    }
  }
  uint64_t v212 = &v210[v206];
  if (v207 >= 0) {
    v213 = &qword_25C58C0;
  }
  else {
    v213 = (uint64_t *)qword_25C58C0;
  }
  if (v208) {
    memmove(v212, v213, v208);
  }
  v212[v208] = 0;
  int v214 = std::string::append(&v262, (const std::string::value_type *)v213, v208);
  long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0;
  v214->__r_.__value_.__r.__words[2] = 0;
  v214->__r_.__value_.__r.__words[0] = 0;
  if (byte_25C58D7 >= 0) {
    unint64_t v216 = (const std::string::value_type *)&qword_25C58C0;
  }
  else {
    unint64_t v216 = (const std::string::value_type *)qword_25C58C0;
  }
  if (byte_25C58D7 >= 0) {
    std::string::size_type v217 = byte_25C58D7;
  }
  else {
    std::string::size_type v217 = qword_25C58C8;
  }
  uint64_t v218 = std::string::append(&v263, v216, v217);
  long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
  std::string::size_type v274 = v218->__r_.__value_.__r.__words[2];
  long long v273 = v219;
  v218->__r_.__value_.__l.__size_ = 0;
  v218->__r_.__value_.__r.__words[2] = 0;
  v218->__r_.__value_.__r.__words[0] = 0;
  sub_28C774(&v265, (uint64_t)&__dst, 4uLL);
  if ((SHIBYTE(v274) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v272) & 0x80000000) == 0) {
      goto LABEL_463;
    }
LABEL_504:
    operator delete((void *)v271);
    if (SHIBYTE(v270) < 0) {
      goto LABEL_505;
    }
LABEL_464:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_465;
    }
LABEL_506:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_507;
    }
LABEL_466:
    if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_467;
    }
LABEL_508:
    operator delete(v262.__r_.__value_.__l.__data_);
    if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_509;
    }
LABEL_468:
    int v220 = *(_DWORD *)(v261 + 1848);
    if (v220 <= 84) {
      goto LABEL_469;
    }
LABEL_510:
    if (v220 != 85 && v220 != 88) {
      goto LABEL_546;
    }
    int v239 = *(unsigned __int8 *)(*(void *)(v261 + 1960) + 1522);
    uint64_t v240 = 33;
    if (v239 == 11) {
      uint64_t v240 = 36;
    }
    unint64_t v241 = (std::string *)&qword_25C4780;
    if (v239 != 11) {
      unint64_t v241 = (std::string *)&qword_25C4768;
    }
    uint64_t v242 = &byte_25C477F;
    if (v239 == 11) {
      uint64_t v242 = &byte_25C4797;
    }
    if (*v242 < 0)
    {
      if (v239 == 11) {
        uint64_t v246 = (unint64_t *)&dword_25C4788;
      }
      else {
        uint64_t v246 = (unint64_t *)&unk_25C4770;
      }
      sub_4200(&v264, (void *)qword_25C4660[v240], *v246);
    }
    else
    {
      std::string v264 = *v241;
    }
    if (byte_25C57B7 >= 0) {
      v247 = (const std::string::value_type *)&qword_25C57A0;
    }
    else {
      v247 = (const std::string::value_type *)qword_25C57A0;
    }
    if (byte_25C57B7 >= 0) {
      std::string::size_type v248 = byte_25C57B7;
    }
    else {
      std::string::size_type v248 = qword_25C57A8;
    }
    int v249 = std::string::append(&v264, v247, v248);
    long long v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v250;
    v249->__r_.__value_.__l.__size_ = 0;
    v249->__r_.__value_.__r.__words[2] = 0;
    v249->__r_.__value_.__r.__words[0] = 0;
    v251 = (_OWORD *)v265.__r_.__value_.__l.__size_;
    if (v265.__r_.__value_.__l.__size_ < v265.__r_.__value_.__r.__words[2])
    {
      long long v252 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v265.__r_.__value_.__l.__size_ + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      _OWORD *v251 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v265.__r_.__value_.__l.__size_ = (std::string::size_type)v251 + 24;
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_544;
      }
      goto LABEL_546;
    }
    v265.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6E8C4((void **)&v265.__r_.__value_.__l.__data_, (uint64_t)&__dst);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_544;
      }
      goto LABEL_546;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_546;
    }
LABEL_544:
    uint64_t v245 = (void *)v264.__r_.__value_.__r.__words[0];
LABEL_545:
    operator delete(v245);
    goto LABEL_546;
  }
  operator delete((void *)v273);
  if (SHIBYTE(v272) < 0) {
    goto LABEL_504;
  }
LABEL_463:
  if ((SHIBYTE(v270) & 0x80000000) == 0) {
    goto LABEL_464;
  }
LABEL_505:
  operator delete(v268);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_506;
  }
LABEL_465:
  if ((SHIBYTE(v263.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_466;
  }
LABEL_507:
  operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_508;
  }
LABEL_467:
  if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_468;
  }
LABEL_509:
  operator delete(v264.__r_.__value_.__l.__data_);
  int v220 = *(_DWORD *)(v261 + 1848);
  if (v220 > 84) {
    goto LABEL_510;
  }
LABEL_469:
  if (v220 != 17 && v220 != 25) {
    goto LABEL_546;
  }
  int v221 = byte_25C4767;
  if (byte_25C4767 >= 0) {
    size_t v222 = byte_25C4767;
  }
  else {
    size_t v222 = qword_25C4758;
  }
  int v223 = byte_25C57B7;
  if (byte_25C57B7 >= 0) {
    size_t v224 = byte_25C57B7;
  }
  else {
    size_t v224 = qword_25C57A8;
  }
  unint64_t v225 = v224 + v222;
  if (v224 + v222 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 > 0x16)
  {
    uint64_t v243 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v243 = v225 | 7;
    }
    uint64_t v244 = v243 + 1;
    uint64_t v226 = (std::string *)operator new(v243 + 1);
    __dst.__r_.__value_.__l.__size_ = v224 + v222;
    __dst.__r_.__value_.__r.__words[2] = v244 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
    if (v222)
    {
LABEL_480:
      if (v221 >= 0) {
        uint64_t v227 = &qword_25C4750;
      }
      else {
        uint64_t v227 = (uint64_t *)qword_25C4750;
      }
      memmove(v226, v227, v222);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v226 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v224 + v222;
    if (v222) {
      goto LABEL_480;
    }
  }
  uint64_t v228 = (char *)v226 + v222;
  if (v224)
  {
    if (v223 >= 0) {
      v229 = &qword_25C57A0;
    }
    else {
      v229 = (uint64_t *)qword_25C57A0;
    }
    memmove(v228, v229, v224);
  }
  v228[v224] = 0;
  int v230 = (_OWORD *)v265.__r_.__value_.__l.__size_;
  if (v265.__r_.__value_.__l.__size_ < v265.__r_.__value_.__r.__words[2])
  {
    long long v231 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(void *)(v265.__r_.__value_.__l.__size_ + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
    *int v230 = v231;
    v265.__r_.__value_.__l.__size_ = (std::string::size_type)v230 + 24;
    goto LABEL_546;
  }
  v265.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6E8C4((void **)&v265.__r_.__value_.__l.__data_, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v245 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_545;
  }
LABEL_546:
  uint64_t v253 = sub_5231C(v260);
  sub_635474(a2, (std::string **)&v265, v253);
  std::string::size_type v254 = v265.__r_.__value_.__r.__words[0];
  if (v265.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v255 = v265.__r_.__value_.__l.__size_;
    v256 = (void *)v265.__r_.__value_.__r.__words[0];
    if (v265.__r_.__value_.__l.__size_ != v265.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v255 - 1) < 0) {
          operator delete(*(void **)(v255 - 24));
        }
        v255 -= 24;
      }
      while (v255 != v254);
      v256 = (void *)v265.__r_.__value_.__r.__words[0];
    }
    v265.__r_.__value_.__l.__size_ = v254;
    operator delete(v256);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_7F94A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7F9700(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)(a1 + 1952) + 1932)
    || *(void *)(a1 + 1864) == -1
    && *(void *)(a1 + 1872) == -1
    && *(void *)(a1 + 1880) == -1
    && *(void *)(a1 + 1888) == -1
    && *(void *)(a1 + 1896) == -1
    && *(void *)(a1 + 1904) == -1
    && *(void *)(a1 + 1912) == -1
    && !*(unsigned char *)(a1 + 1860))
  {
    return;
  }
  sub_7F9E6C(a1, (uint64_t)&v48);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v47 = v48;
LABEL_13:
    std::string v46 = v48;
    goto LABEL_14;
  }
  sub_4200(&v47, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
  sub_4200(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
LABEL_14:
  sub_7F6F48(a1, 1, &v45);
  sub_7FA67C((void *)a1, (uint64_t)v43);
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (byte_25C58EF >= 0) {
      std::string::size_type v5 = (const std::string::value_type *)&qword_25C58D8;
    }
    else {
      std::string::size_type v5 = (const std::string::value_type *)qword_25C58D8;
    }
    if (byte_25C58EF >= 0) {
      std::string::size_type v6 = byte_25C58EF;
    }
    else {
      std::string::size_type v6 = qword_25C58E0;
    }
    std::string::append(&v47, v5, v6);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v7 = &v45;
    }
    else {
      size_t v7 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v8 = v45.__r_.__value_.__l.__size_;
    }
    std::string::append(&v47, (const std::string::value_type *)v7, v8);
  }
  if (byte_25C57B7 >= 0) {
    int v9 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int v9 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v10 = byte_25C57B7;
  }
  else {
    std::string::size_type v10 = qword_25C57A8;
  }
  std::string::append(&v47, v9, v10);
  if ((v44 & 0x80u) == 0) {
    int64_t v11 = v43;
  }
  else {
    int64_t v11 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v12 = v44;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v43[1];
  }
  std::string::append(&v46, (const std::string::value_type *)v11, v12);
  if (byte_25C57B7 >= 0) {
    int64_t v13 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int64_t v13 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v14 = byte_25C57B7;
  }
  else {
    std::string::size_type v14 = qword_25C57A8;
  }
  std::string::append(&v46, v13, v14);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    sub_4200(&v49, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v46;
  }
  unsigned __int8 v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200(&v50, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    unsigned __int8 v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string v50 = v47;
  }
  int64_t v16 = &v51;
  int v17 = (char)v15;
  if ((v15 & 0x80u) == 0) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v47.__r_.__value_.__l.__size_;
  }
  int v19 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v20 = byte_25C58D7;
  }
  else {
    size_t v20 = qword_25C58C8;
  }
  unint64_t v21 = v20 + v18;
  if (v20 + v18 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v21 <= 0x16)
  {
    size_t v52 = 0;
    unint64_t v53 = 0;
    int v51 = 0;
    HIBYTE(v53) = v20 + v18;
    if (!v18) {
      goto LABEL_67;
    }
    goto LABEL_63;
  }
  uint64_t v34 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v34 = v21 | 7;
  }
  uint64_t v35 = v34 + 1;
  uint64_t v36 = operator new(v34 + 1);
  size_t v52 = v20 + v18;
  unint64_t v53 = v35 | 0x8000000000000000;
  int v51 = v36;
  int64_t v16 = (void **)v36;
  if (v18)
  {
LABEL_63:
    if (v17 >= 0) {
      size_t v22 = &v47;
    }
    else {
      size_t v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v22, v18);
  }
LABEL_67:
  int64_t v23 = (char *)v16 + v18;
  if (v20)
  {
    if (v19 >= 0) {
      std::string::size_type v24 = &qword_25C58C0;
    }
    else {
      std::string::size_type v24 = (uint64_t *)qword_25C58C0;
    }
    memmove(v23, v24, v20);
  }
  v23[v20] = 0;
  if (v21 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20 + v18;
    if (!v18) {
      goto LABEL_78;
    }
    goto LABEL_74;
  }
  uint64_t v37 = a2;
  uint64_t v38 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v38 = v21 | 7;
  }
  uint64_t v39 = v38 + 1;
  p_dst = (std::string *)operator new(v38 + 1);
  __dst.__r_.__value_.__l.__size_ = v20 + v18;
  __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  a2 = v37;
  if (v18)
  {
LABEL_74:
    if (v17 >= 0) {
      unint64_t v26 = &v47;
    }
    else {
      unint64_t v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v26, v18);
  }
LABEL_78:
  uint64_t v27 = (char *)p_dst + v18;
  if (v19 >= 0) {
    uint64_t v28 = &qword_25C58C0;
  }
  else {
    uint64_t v28 = (uint64_t *)qword_25C58C0;
  }
  if (v20) {
    memmove(v27, v28, v20);
  }
  v27[v20] = 0;
  int v29 = std::string::append(&__dst, (const std::string::value_type *)v28, v20);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  std::string::size_type v55 = v29->__r_.__value_.__r.__words[2];
  long long v54 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  sub_28C774(&__p, (uint64_t)&v49, 4uLL);
  if (SHIBYTE(v55) < 0)
  {
    operator delete((void *)v54);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
      goto LABEL_112;
    }
  }
  else if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v51);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_113:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_114;
  }
LABEL_112:
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_113;
  }
LABEL_87:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_114:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_88:
  sub_6355F8(a2, (std::string **)&__p);
  unint64_t v31 = (void **)__p;
  if (__p)
  {
    std::string::size_type v32 = v42;
    uint64_t v33 = __p;
    if (v42 != __p)
    {
      do
      {
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 -= 3;
      }
      while (v32 != v31);
      uint64_t v33 = __p;
    }
    std::string::size_type v42 = v31;
    operator delete(v33);
  }
  if ((char)v44 < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
LABEL_117:
      operator delete(v46.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_108:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_119:
        operator delete(v48.__r_.__value_.__l.__data_);
        return;
      }
      goto LABEL_118;
    }
  }
  else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_106;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_117;
  }
LABEL_107:
  if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_108;
  }
LABEL_118:
  operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_119;
  }
}

void sub_7F9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if (a38 < 0)
    {
LABEL_3:
      operator delete(a33);
      _Unwind_Resume(a1);
    }
  }
  else if (a38 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

double sub_7F9E6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (long long *)&qword_25C4948;
  switch(*(_DWORD *)(a1 + 1848))
  {
    case 0:
    case 3:
    case 5:
    case 0xC:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4738;
      goto LABEL_11;
    case 1:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&unk_25C47F8;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5080;
      goto LABEL_12;
    case 2:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4810;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5098;
      goto LABEL_12;
    case 4:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&dword_25C48E8;
      std::string::size_type v6 = &qword_25C4900;
      goto LABEL_12;
    case 6:
      uint64_t v3 = &xmmword_25C4B40;
      goto LABEL_15;
    case 7:
      uint64_t v3 = &xmmword_25C4B70;
      goto LABEL_15;
    case 0xB:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D50;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x10:
      int v7 = *(unsigned __int8 *)(a1 + 1855);
      std::string::size_type v8 = &xmmword_25C49D8;
      goto LABEL_33;
    case 0x11:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4750;
LABEL_11:
      std::string::size_type v6 = (uint64_t *)(v5 + 144);
      goto LABEL_12;
    case 0x12:
      uint64_t v3 = (long long *)&qword_25C4A08;
      goto LABEL_15;
    case 0x14:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C48B8;
      goto LABEL_20;
    case 0x15:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C48D0;
LABEL_20:
      std::string::size_type v12 = v11 + 285;
      int64_t v13 = v11 + 249;
      goto LABEL_61;
    case 0x16:
      goto LABEL_15;
    case 0x17:
      uint64_t v3 = (long long *)&qword_25C4960;
      goto LABEL_15;
    case 0x18:
      uint64_t v3 = (long long *)&qword_25C4978;
      goto LABEL_15;
    case 0x19:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4798;
      std::string::size_type v6 = &qword_25C5068;
      goto LABEL_12;
    case 0x1A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4930;
      std::string::size_type v6 = &qword_25C50B0;
      goto LABEL_12;
    case 0x1B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4828;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5080;
      goto LABEL_12;
    case 0x1C:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4840;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5098;
      goto LABEL_12;
    case 0x1D:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4D68;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x1E:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4D80;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x21:
      uint64_t v3 = &xmmword_25C4A20;
      goto LABEL_15;
    case 0x22:
      uint64_t v3 = &xmmword_25C4A38;
      goto LABEL_15;
    case 0x23:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4918;
      std::string::size_type v6 = &qword_25C50C8;
      goto LABEL_12;
    case 0x27:
      int v7 = *(unsigned __int8 *)(a1 + 1855);
      std::string::size_type v8 = &xmmword_25C49F0;
LABEL_33:
      if (v7) {
        uint64_t v3 = v8 + 117;
      }
      else {
        uint64_t v3 = v8;
      }
      goto LABEL_15;
    case 0x29:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B88;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BA0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BB8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2C:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BD0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2D:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BE8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2E:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C00;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2F:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C18;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x30:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C30;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x31:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C48;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x32:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C60;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x33:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C78;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x34:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C90;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x35:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CA8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x36:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CC0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x37:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CD8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x38:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CF0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x39:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D08;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D20;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D38;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3C:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C4858;
      goto LABEL_57;
    case 0x3D:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C4870;
LABEL_57:
      std::string::size_type v12 = v11 + 291;
      int64_t v13 = v11 + 261;
      goto LABEL_61;
    case 0x3E:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C4888;
      goto LABEL_60;
    case 0x3F:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C48A0;
LABEL_60:
      std::string::size_type v12 = v11 + 291;
      int64_t v13 = v11 + 255;
LABEL_61:
      if (*(unsigned char *)(*(void *)(a1 + 1952) + 1898)) {
        std::string::size_type v14 = (long long *)v12;
      }
      else {
        std::string::size_type v14 = (long long *)v13;
      }
      if (v10) {
        uint64_t v3 = (long long *)v11;
      }
      else {
        uint64_t v3 = v14;
      }
      goto LABEL_15;
    case 0x40:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D98;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x41:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4DB0;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x42:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4DC8;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x52:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v15 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = (long long *)&qword_25C4AE0;
      if (v15) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
      goto LABEL_107;
    case 0x53:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v16 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = &xmmword_25C4AF8;
      if (v16) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
      goto LABEL_107;
    case 0x54:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v17 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = &xmmword_25C4B10;
      if (v17) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
LABEL_107:
      sub_7F3820((const void **)v24, (const void **)v25, (uint64_t)&__p);
      goto LABEL_108;
    case 0x55:
      sub_7FA998((void *)a1, (uint64_t)&__p);
LABEL_108:
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&__p.__r_.__value_.__l.__data_;
      *(std::string *)a2 = __p;
      return result;
    case 0x56:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B70;
      std::string::size_type v6 = &qword_25C50F8;
      goto LABEL_12;
    case 0x57:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B70;
      std::string::size_type v6 = &qword_25C5110;
LABEL_12:
      if (v4) {
        uint64_t v3 = v5;
      }
      else {
        uint64_t v3 = (long long *)v6;
      }
      goto LABEL_15;
    case 0x58:
      sub_7FA998((void *)a1, (uint64_t)&__p);
      if (byte_25C47C7 >= 0) {
        size_t v18 = (const std::string::value_type *)&qword_25C47B0;
      }
      else {
        size_t v18 = (const std::string::value_type *)qword_25C47B0;
      }
      if (byte_25C47C7 >= 0) {
        std::string::size_type v19 = byte_25C47C7;
      }
      else {
        std::string::size_type v19 = unk_25C47B8;
      }
      size_t v20 = std::string::append(&__p, v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v27[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      uint64_t v23 = v27[0];
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v23;
      *(void *)(a2 + 15) = *(void *)((char *)v27 + 7);
      *(unsigned char *)(a2 + 23) = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return result;
    case 0x59:
      uint64_t v3 = (long long *)&qword_25C4DF8;
      goto LABEL_15;
    case 0x5A:
      uint64_t v3 = (long long *)&qword_25C4E10;
      goto LABEL_15;
    case 0x5B:
      uint64_t v3 = &xmmword_25C4990;
      goto LABEL_15;
    case 0x5C:
      uint64_t v3 = &xmmword_25C49A8;
      goto LABEL_15;
    case 0x5D:
      uint64_t v3 = &xmmword_25C49C0;
      goto LABEL_15;
    case 0x5E:
      uint64_t v3 = &xmmword_25C4E28;
LABEL_15:
      std::string::operator=((std::string *)a2, (const std::string *)v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_7FA4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_7FA67C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)result + 1860))
  {
    if (byte_25C567F < 0)
    {
      return sub_4200((unsigned char *)a2, (void *)xmmword_25C5668, *((unint64_t *)&xmmword_25C5668 + 1));
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C5668;
      *(void *)(a2 + 16) = unk_25C5678;
    }
  }
  else if (result[234] == -1)
  {
    if (result[235] == -1)
    {
      if (result[233] == -1)
      {
        if (result[239] == -1)
        {
          if (result[236] == -1)
          {
            if (result[237] == -1)
            {
              if (result[238] == -1)
              {
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                *(void *)(a2 + 16) = 0;
              }
              else if (byte_25C5667 < 0)
              {
                return sub_4200((unsigned char *)a2, (void *)xmmword_25C5650, *((unint64_t *)&xmmword_25C5650 + 1));
              }
              else
              {
                *(_OWORD *)a2 = xmmword_25C5650;
                *(void *)(a2 + 16) = unk_25C5660;
              }
            }
            else if (byte_25C564F < 0)
            {
              return sub_4200((unsigned char *)a2, (void *)xmmword_25C5638, *((unint64_t *)&xmmword_25C5638 + 1));
            }
            else
            {
              *(_OWORD *)a2 = xmmword_25C5638;
              *(void *)(a2 + 16) = unk_25C5648;
            }
          }
          else if (byte_25C5637 < 0)
          {
            return sub_4200((unsigned char *)a2, (void *)xmmword_25C5620, *((unint64_t *)&xmmword_25C5620 + 1));
          }
          else
          {
            *(_OWORD *)a2 = xmmword_25C5620;
            *(void *)(a2 + 16) = unk_25C5630;
          }
        }
        else if (byte_25C55BF < 0)
        {
          return sub_4200((unsigned char *)a2, (void *)xmmword_25C55A8, *((unint64_t *)&xmmword_25C55A8 + 1));
        }
        else
        {
          *(_OWORD *)a2 = xmmword_25C55A8;
          *(void *)(a2 + 16) = unk_25C55B8;
        }
      }
      else if (byte_25C55A7 < 0)
      {
        return sub_4200((unsigned char *)a2, (void *)xmmword_25C5590, *((unint64_t *)&xmmword_25C5590 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_25C5590;
        *(void *)(a2 + 16) = unk_25C55A0;
      }
    }
    else if (byte_25C540F < 0)
    {
      return sub_4200((unsigned char *)a2, (void *)xmmword_25C53F8, *((unint64_t *)&xmmword_25C53F8 + 1));
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C53F8;
      *(void *)(a2 + 16) = unk_25C5408;
    }
  }
  else if (byte_25C53F7 < 0)
  {
    return sub_4200((unsigned char *)a2, (void *)xmmword_25C53E0, *((unint64_t *)&xmmword_25C53E0 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_25C53E0;
    *(void *)(a2 + 16) = unk_25C53F0;
  }
  return result;
}

BOOL sub_7FA8C4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1848) == 25;
}

BOOL sub_7FA8D4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1848) == 17;
}

BOOL sub_7FA8E4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1848) == 88;
}

BOOL sub_7FA8F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1848) == 85;
}

BOOL sub_7FA904(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1856)) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 1848);
  if (v1 - 4 < 0x20)
  {
    BOOL result = 0;
    if (((0xE0404001 >> (v1 - 4)) & 1) != 0 || v1 - 82 <= 2) {
      return result;
    }
    goto LABEL_8;
  }
  if (v1 - 82 < 3) {
    return 0;
  }
LABEL_8:
  if (v1 > 0x27) {
    return v1 != 85 && v1 != 88;
  }
  BOOL result = 0;
  if (((1 << v1) & 0x8002030040) == 0) {
    return v1 != 85 && v1 != 88;
  }
  return result;
}

void *sub_7FA998@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(result[245] + 1522);
  uint64_t v3 = 33;
  if (v2 == 11) {
    uint64_t v3 = 36;
  }
  int v4 = &qword_25C4780;
  if (v2 != 11) {
    int v4 = &qword_25C4768;
  }
  std::string::size_type v5 = &byte_25C477F;
  if (v2 == 11) {
    std::string::size_type v5 = &byte_25C4797;
  }
  if (*v5 < 0)
  {
    if (v2 == 11) {
      std::string::size_type v6 = (unint64_t *)&dword_25C4788;
    }
    else {
      std::string::size_type v6 = (unint64_t *)&unk_25C4770;
    }
    return sub_4200((unsigned char *)a2, (void *)qword_25C4660[v3], *v6);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = v4[2];
  }
  return result;
}

void sub_7FAA10(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  if (byte_25C5C08[23] < 0) {
    sub_4200(&__p, *(void **)byte_25C5C08, *(unint64_t *)&byte_25C5C08[8]);
  }
  else {
    std::string __p = *(std::string *)byte_25C5C08;
  }
  if (byte_25C5457 >= 0) {
    int v2 = (const std::string::value_type *)&xmmword_25C5440;
  }
  else {
    int v2 = (const std::string::value_type *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    std::string::size_type v3 = byte_25C5457;
  }
  else {
    std::string::size_type v3 = *((void *)&xmmword_25C5440 + 1);
  }
  std::string::append(&__p, v2, v3);
  if (byte_25C57B7 >= 0) {
    int v4 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int v4 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v5 = byte_25C57B7;
  }
  else {
    std::string::size_type v5 = qword_25C57A8;
  }
  std::string::append(&__p, v4, v5);
  sub_635560(a1, (uint64_t)&__p);
  sub_635560(a1, (uint64_t)byte_25C5C08);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_7FAB20(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7FAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

void sub_7FAB58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v12);
  uint64_t v10 = 0;
  int64_t v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  std::string::size_type v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = v15;
  if (v15)
  {
    do
    {
      std::string::size_type v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      int v4 = v5;
    }
    while (v5);
  }
  std::string::size_type v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  int v7 = (void **)v12;
  if (v12)
  {
    std::string::size_type v8 = v13;
    int v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = v12;
    }
    int64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_7FAC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

std::string *sub_7FACA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = (std::string *)sub_635CD0((long long **)(a1 + 8), a2);
  if (*(unsigned char *)(a1 + 1860))
  {
    char v5 = *(unsigned char *)(a2 + 23);
    std::string::size_type v6 = v5 >= 0 ? (std::string *)a2 : *(std::string **)a2;
    int v7 = byte_25C5B47 >= 0 ? &xmmword_25C5B30 : (long long *)xmmword_25C5B30;
    int64_t v8 = byte_25C5B47 >= 0 ? byte_25C5B47 : *((void *)&xmmword_25C5B30 + 1);
    if (v8)
    {
      if (v5 >= 0) {
        int64_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        int64_t v9 = *(void *)(a2 + 8);
      }
      uint64_t v10 = (std::string *)((char *)v6 + v9);
      if (v9 >= v8)
      {
        int v15 = *(char *)v7;
        int64_t v16 = v9;
        BOOL result = v6;
        do
        {
          int64_t v17 = v16 - v8;
          if (v17 == -1) {
            break;
          }
          BOOL result = (std::string *)memchr(result, v15, v17 + 1);
          if (!result) {
            break;
          }
          size_t v18 = result;
          BOOL result = (std::string *)memcmp(result, v7, v8);
          if (!result)
          {
            if (v18 != v10 && (char *)v18 - (char *)v6 != -1) {
              return result;
            }
            break;
          }
          BOOL result = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
          int64_t v16 = (char *)v10 - ((char *)&v18->__r_.__value_.__l.__data_ + 1);
        }
        while (v16 >= v8);
      }
      if (byte_25C567F >= 0) {
        int64_t v11 = &xmmword_25C5668;
      }
      else {
        int64_t v11 = (long long *)xmmword_25C5668;
      }
      if (byte_25C567F >= 0) {
        int64_t v12 = byte_25C567F;
      }
      else {
        int64_t v12 = *((void *)&xmmword_25C5668 + 1);
      }
      if (v12)
      {
        if (v9 >= v12)
        {
          int v13 = *(char *)v11;
          BOOL result = v6;
          do
          {
            if (v9 - v12 == -1) {
              break;
            }
            BOOL result = (std::string *)memchr(result, v13, v9 - v12 + 1);
            if (!result) {
              break;
            }
            uint64_t v14 = result;
            BOOL result = (std::string *)memcmp(result, v11, v12);
            if (!result)
            {
              if (v14 != v10)
              {
                std::string::size_type v19 = (char *)v14 - (char *)v6;
                if ((char *)v14 - (char *)v6 != -1) {
                  return std::string::erase((std::string *)a2, v19, v12);
                }
              }
              return result;
            }
            BOOL result = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
            int64_t v9 = (char *)v10 - ((char *)&v14->__r_.__value_.__l.__data_ + 1);
          }
          while (v9 >= v12);
        }
      }
      else
      {
        std::string::size_type v19 = 0;
        return std::string::erase((std::string *)a2, v19, v12);
      }
    }
  }
  return result;
}

void sub_7FAE40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_7FAE5C(std::string::size_type result, std::string *this)
{
  uint64_t v2 = *(void *)(result + 1952);
  if (!*(unsigned char *)(v2 + 1896) && *(unsigned char *)(v2 + 1897))
  {
    int v3 = *(_DWORD *)(result + 1848);
    BOOL v4 = v3 == 3 || v3 == 17;
    if (!v4 && v3 != 85)
    {
      char v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      int v7 = v6 >= 0 ? this : (std::string *)this->__r_.__value_.__r.__words[0];
      int64_t v8 = byte_25C549F >= 0 ? &qword_25C5488 : (uint64_t *)qword_25C5488;
      int64_t v9 = byte_25C549F >= 0 ? byte_25C549F : unk_25C5490;
      if (v9)
      {
        if (v6 >= 0) {
          int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = this->__r_.__value_.__l.__size_;
        }
        int64_t v11 = (char *)v7 + size;
        if (size >= v9)
        {
          int v17 = *(char *)v8;
          int64_t v18 = size;
          std::string::size_type v19 = v7;
          do
          {
            int64_t v20 = v18 - v9;
            if (v20 == -1) {
              break;
            }
            std::string::size_type v21 = (char *)memchr(v19, v17, v20 + 1);
            if (!v21) {
              break;
            }
            char v22 = v21;
            BOOL result = memcmp(v21, v8, v9);
            if (!result)
            {
              if (v22 != v11 && v22 - (char *)v7 != -1) {
                return result;
              }
              break;
            }
            std::string::size_type v19 = (std::string *)(v22 + 1);
            int64_t v18 = v11 - (v22 + 1);
          }
          while (v18 >= v9);
        }
        if (byte_25C5457 >= 0) {
          int64_t v12 = &xmmword_25C5440;
        }
        else {
          int64_t v12 = (long long *)xmmword_25C5440;
        }
        if (byte_25C5457 >= 0) {
          int64_t v13 = byte_25C5457;
        }
        else {
          int64_t v13 = *((void *)&xmmword_25C5440 + 1);
        }
        if (!v13)
        {
          std::string::size_type v14 = 0;
LABEL_43:
          int64_t v16 = this;
          std::string::size_type v15 = v13;
          goto LABEL_44;
        }
        if (size >= v13)
        {
          int v23 = *(char *)v12;
          std::string::size_type v24 = v7;
          do
          {
            if (size - v13 == -1) {
              break;
            }
            std::string::size_type v25 = (char *)memchr(v24, v23, size - v13 + 1);
            if (!v25) {
              break;
            }
            unint64_t v26 = v25;
            if (!memcmp(v25, v12, v13))
            {
              if (v26 != v11)
              {
                std::string::size_type v14 = v26 - (char *)v7;
                if (v26 - (char *)v7 != -1) {
                  goto LABEL_43;
                }
              }
              break;
            }
            std::string::size_type v24 = (std::string *)(v26 + 1);
            int64_t size = v11 - (v26 + 1);
          }
          while (size >= v13);
        }
        BOOL result = sub_658840((uint64_t *)this, (char *)&qword_25C5458, 0);
        if (result != -1)
        {
          std::string::size_type v14 = result;
          if (byte_25C546F >= 0) {
            std::string::size_type v15 = byte_25C546F;
          }
          else {
            std::string::size_type v15 = qword_25C5460;
          }
          int64_t v16 = this;
LABEL_44:
          return (std::string::size_type)std::string::erase(v16, v14, v15);
        }
      }
    }
  }
  return result;
}

void *sub_7FB07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 1960);
  if (*(unsigned char *)(v4 + 1524))
  {
    unsigned int v5 = *(_DWORD *)(a1 + 1688);
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 1688);
    unsigned int v7 = v6 + 1;
    unsigned int v5 = v6 - 1;
    if (v7 < 2) {
      unsigned int v5 = -1;
    }
  }
  int v8 = sub_800320(v4, v5);
  BOOL result = (void *)sub_8005D4(*(void *)(a1 + 1960), *(_DWORD *)(a1 + 1688));
  if (result)
  {
    if ((v8 & 0x100) == 0)
    {
      if (*(unsigned char *)(*(void *)(a1 + 1952) + 2032)) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = (v8 & 0x1000000) == 0;
      }
      if (!v10)
      {
LABEL_19:
        if ((byte_25C52BF & 0x80000000) == 0)
        {
          int64_t v12 = &xmmword_25C52A8;
LABEL_23:
          *(_OWORD *)a2 = *v12;
          *(void *)(a2 + 16) = *((void *)v12 + 2);
          return result;
        }
        int64_t v13 = &xmmword_25C52A8;
        goto LABEL_26;
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1 + 1952) + 2032)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = (v8 & 0x1000000) == 0;
    }
    if (!v11) {
      goto LABEL_19;
    }
    if ((v8 & 0x100) == 0)
    {
LABEL_18:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
    }
  }
  if ((byte_25C52A7 & 0x80000000) == 0)
  {
    int64_t v12 = &xmmword_25C5290;
    goto LABEL_23;
  }
  int64_t v13 = &xmmword_25C5290;
LABEL_26:
  std::string::size_type v14 = *(void **)v13;
  unint64_t v15 = *((void *)v13 + 1);

  return sub_4200((unsigned char *)a2, v14, v15);
}

void sub_7FB1BC(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  memset(&v216, 0, sizeof(v216));
  if (*(unsigned char *)(*(void *)(a1 + 1952) + 1896))
  {
    if (*(unsigned char *)(a1 + 1856))
    {
      if (*(unsigned char *)(a1 + 1853))
      {
        unsigned int v8 = *(_DWORD *)(a1 + 1848);
        if (v8 <= 0x3F && ((1 << v8) & 0xF00000000030000ELL) != 0) {
          std::string::operator=(&v216, (const std::string *)&dword_25C5578);
        }
      }
    }
  }
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    BOOL v10 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  std::string::append(&v216, v10, v11);
  uint64_t v212 = a1;
  int v12 = *((char *)a2 + 23);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v13 = (size_t)a2[1];
  }
  int v14 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v216.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = size + v13;
  if (size + v13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v16 <= 0x16)
  {
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v215) = size + v13;
    if (!v13) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v24 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17) {
    uint64_t v24 = v16 | 7;
  }
  uint64_t v25 = v24 + 1;
  p_dst = (long long *)operator new(v24 + 1);
  *((void *)&__dst + 1) = size + v13;
  unint64_t v215 = v25 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v13)
  {
LABEL_22:
    if (v12 >= 0) {
      int64_t v18 = (char *)a2;
    }
    else {
      int64_t v18 = (char *)*a2;
    }
    memmove(p_dst, v18, v13);
  }
LABEL_26:
  std::string::size_type v19 = (char *)p_dst + v13;
  if (size)
  {
    if (v14 >= 0) {
      int64_t v20 = &v216;
    }
    else {
      int64_t v20 = (std::string *)v216.__r_.__value_.__r.__words[0];
    }
    memmove(v19, v20, size);
  }
  v19[size] = 0;
  unint64_t v21 = *(void *)(a4 + 8);
  uint64_t v22 = v212;
  if (v21 >= *(void *)(a4 + 16))
  {
    unint64_t v26 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v27 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v26;
    if (v27 < 0)
    {
      operator delete((void *)__dst);
      if (!*(unsigned char *)(v22 + 1856)) {
        goto LABEL_409;
      }
    }
    else if (!*(unsigned char *)(v22 + 1856))
    {
      goto LABEL_409;
    }
  }
  else
  {
    long long v23 = __dst;
    *(void *)(v21 + 16) = v215;
    *(_OWORD *)unint64_t v21 = v23;
    *(void *)(a4 + 8) = v21 + 24;
    if (!*(unsigned char *)(v22 + 1856)) {
      goto LABEL_409;
    }
  }
  uint64_t v210 = a3;
  std::string::size_type v28 = *((unsigned __int8 *)a2 + 23);
  if ((v28 & 0x80u) == 0) {
    int v29 = (char *)a2;
  }
  else {
    int v29 = (char *)*a2;
  }
  if (byte_25C5487 >= 0) {
    long long v30 = &qword_25C5470;
  }
  else {
    long long v30 = (uint64_t *)qword_25C5470;
  }
  if (byte_25C5487 >= 0) {
    int64_t v31 = byte_25C5487;
  }
  else {
    int64_t v31 = unk_25C5478;
  }
  if (v31)
  {
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v32 = (char *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      std::string::size_type v32 = (char *)a2[1];
    }
    uint64_t v33 = &v32[(void)v29];
    if ((uint64_t)v32 >= v31)
    {
      int v53 = *(char *)v30;
      long long v54 = v29;
      do
      {
        std::string::size_type v55 = &v32[-v31];
        if (v55 == (char *)-1) {
          break;
        }
        size_t v56 = (char *)memchr(v54, v53, (size_t)(v55 + 1));
        if (!v56) {
          break;
        }
        uint64_t v34 = v56;
        if (!memcmp(v56, v30, v31)) {
          goto LABEL_55;
        }
        long long v54 = v34 + 1;
        std::string::size_type v32 = (char *)(v33 - (v34 + 1));
      }
      while ((uint64_t)v32 >= v31);
    }
    uint64_t v34 = v33;
LABEL_55:
    uint64_t v35 = v34 - v29;
    if (v34 == v33) {
      uint64_t v35 = -1;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v209 = v35;
  if (byte_25C5457 >= 0) {
    uint64_t v36 = &xmmword_25C5440;
  }
  else {
    uint64_t v36 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v37 = byte_25C5457;
  }
  else {
    int64_t v37 = *((void *)&xmmword_25C5440 + 1);
  }
  if (v37)
  {
    if ((v28 & 0x80u) == 0) {
      uint64_t v38 = (char *)v28;
    }
    else {
      uint64_t v38 = (char *)a2[1];
    }
    uint64_t v39 = &v38[(void)v29];
    if ((uint64_t)v38 >= v37)
    {
      int v57 = *(char *)v36;
      std::string::size_type v58 = v29;
      do
      {
        std::string::size_type v59 = &v38[-v37];
        if (v59 == (char *)-1) {
          break;
        }
        uint64_t v60 = (char *)memchr(v58, v57, (size_t)(v59 + 1));
        if (!v60) {
          break;
        }
        int64_t v40 = v60;
        if (!memcmp(v60, v36, v37)) {
          goto LABEL_71;
        }
        std::string::size_type v58 = v40 + 1;
        uint64_t v38 = (char *)(v39 - (v40 + 1));
      }
      while ((uint64_t)v38 >= v37);
    }
    int64_t v40 = v39;
LABEL_71:
    uint64_t v41 = v40 - v29;
    if (v40 == v39) {
      uint64_t v41 = -1;
    }
    uint64_t v207 = v41;
  }
  else
  {
    uint64_t v207 = 0;
  }
  if (byte_25C546F >= 0) {
    std::string::size_type v42 = &qword_25C5458;
  }
  else {
    std::string::size_type v42 = (uint64_t *)qword_25C5458;
  }
  if (byte_25C546F >= 0) {
    int64_t v43 = byte_25C546F;
  }
  else {
    int64_t v43 = qword_25C5460;
  }
  if (v43)
  {
    if ((v28 & 0x80u) == 0) {
      unsigned __int8 v44 = (char *)v28;
    }
    else {
      unsigned __int8 v44 = (char *)a2[1];
    }
    std::string v45 = &v44[(void)v29];
    if ((uint64_t)v44 >= v43)
    {
      int v61 = *(char *)v42;
      uint64_t v62 = v29;
      do
      {
        unint64_t v63 = &v44[-v43];
        if (v63 == (char *)-1) {
          break;
        }
        int64_t v64 = (char *)memchr(v62, v61, (size_t)(v63 + 1));
        if (!v64) {
          break;
        }
        std::string v46 = v64;
        if (!memcmp(v64, v42, v43)) {
          goto LABEL_87;
        }
        uint64_t v62 = v46 + 1;
        unsigned __int8 v44 = (char *)(v45 - (v46 + 1));
      }
      while ((uint64_t)v44 >= v43);
    }
    std::string v46 = v45;
LABEL_87:
    if (v46 == v45) {
      unint64_t v47 = -1;
    }
    else {
      unint64_t v47 = v46 - v29;
    }
  }
  else
  {
    unint64_t v47 = 0;
  }
  if (byte_25C54CF >= 0) {
    std::string v48 = &qword_25C54B8;
  }
  else {
    std::string v48 = (uint64_t *)qword_25C54B8;
  }
  if (byte_25C54CF >= 0) {
    int64_t v49 = byte_25C54CF;
  }
  else {
    int64_t v49 = *(void *)&word_25C54C0;
  }
  unint64_t v211 = v47;
  if (v49)
  {
    if ((v28 & 0x80u) == 0) {
      std::string v50 = (char *)v28;
    }
    else {
      std::string v50 = (char *)a2[1];
    }
    int v51 = &v50[(void)v29];
    if ((uint64_t)v50 >= v49)
    {
      int v65 = *(char *)v48;
      std::string::size_type v66 = v29;
      do
      {
        size_t v67 = &v50[-v49];
        if (v67 == (char *)-1) {
          break;
        }
        int v68 = (char *)memchr(v66, v65, (size_t)(v67 + 1));
        if (!v68) {
          break;
        }
        size_t v52 = v68;
        if (!memcmp(v68, v48, v49)) {
          goto LABEL_128;
        }
        std::string::size_type v66 = v52 + 1;
        std::string v50 = (char *)(v51 - (v52 + 1));
      }
      while ((uint64_t)v50 >= v49);
      size_t v52 = v51;
LABEL_128:
      unint64_t v47 = v211;
    }
    else
    {
      size_t v52 = &v50[(void)v29];
    }
    uint64_t v69 = v52 - v29;
    if (v52 == v51) {
      uint64_t v69 = -1;
    }
    uint64_t v208 = v69;
  }
  else
  {
    uint64_t v208 = 0;
  }
  if (byte_25C54E7 >= 0) {
    uint64_t v70 = &qword_25C54D0;
  }
  else {
    uint64_t v70 = (uint64_t *)qword_25C54D0;
  }
  if (byte_25C54E7 >= 0) {
    int64_t v71 = byte_25C54E7;
  }
  else {
    int64_t v71 = *(void *)&word_25C54D8;
  }
  if (v71)
  {
    if ((v28 & 0x80u) == 0) {
      long long v72 = (char *)v28;
    }
    else {
      long long v72 = (char *)a2[1];
    }
    uint64_t v73 = &v72[(void)v29];
    if ((uint64_t)v72 >= v71)
    {
      int v76 = *(char *)v70;
      uint64_t v77 = v29;
      do
      {
        uint64_t v78 = &v72[-v71];
        if (v78 == (char *)-1) {
          break;
        }
        uint64_t v79 = (char *)memchr(v77, v76, (size_t)(v78 + 1));
        if (!v79) {
          break;
        }
        int64_t v74 = v79;
        if (!memcmp(v79, v70, v71)) {
          goto LABEL_151;
        }
        uint64_t v77 = v74 + 1;
        long long v72 = (char *)(v73 - (v74 + 1));
      }
      while ((uint64_t)v72 >= v71);
      int64_t v74 = v73;
LABEL_151:
      unint64_t v47 = v211;
    }
    else
    {
      int64_t v74 = &v72[(void)v29];
    }
    if (v74 == v73) {
      unint64_t v75 = -1;
    }
    else {
      unint64_t v75 = v74 - v29;
    }
  }
  else
  {
    unint64_t v75 = 0;
  }
  if (byte_25C54B7 >= 0) {
    int64_t v80 = &qword_25C54A0;
  }
  else {
    int64_t v80 = (uint64_t *)qword_25C54A0;
  }
  if (byte_25C54B7 >= 0) {
    int64_t v81 = byte_25C54B7;
  }
  else {
    int64_t v81 = unk_25C54A8;
  }
  if (!v81)
  {
    uint64_t v84 = 0;
    if (v75 != -1) {
      goto LABEL_180;
    }
    goto LABEL_206;
  }
  if ((v28 & 0x80u) == 0) {
    int64_t v82 = (char *)v28;
  }
  else {
    int64_t v82 = (char *)a2[1];
  }
  std::string::size_type v83 = &v82[(void)v29];
  if ((uint64_t)v82 >= v81)
  {
    int v85 = *(char *)v80;
    int64_t v86 = v29;
    do
    {
      size_t v87 = &v82[-v81];
      if (v87 == (char *)-1) {
        break;
      }
      int64_t v88 = (char *)memchr(v86, v85, (size_t)(v87 + 1));
      if (!v88) {
        break;
      }
      uint64_t v89 = v88;
      if (!memcmp(v88, v80, v81)) {
        goto LABEL_176;
      }
      int64_t v86 = v89 + 1;
      int64_t v82 = (char *)(v83 - (v89 + 1));
    }
    while ((uint64_t)v82 >= v81);
    uint64_t v89 = v83;
LABEL_176:
    unint64_t v47 = v211;
    if (v89 == v83) {
      uint64_t v84 = -1;
    }
    else {
      uint64_t v84 = v89 - v29;
    }
    if (v75 != -1) {
      goto LABEL_180;
    }
LABEL_206:
    std::string::size_type v101 = v208;
    std::string::size_type v102 = v209;
    uint64_t v103 = v210;
    uint64_t v104 = v212;
    if (v208 == -1) {
      goto LABEL_234;
    }
    goto LABEL_207;
  }
  uint64_t v84 = -1;
  if (v75 == -1) {
    goto LABEL_206;
  }
LABEL_180:
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v90 = v28;
  }
  else {
    std::string::size_type v90 = (std::string::size_type)a2[1];
  }
  if (v90 >= v75) {
    std::string::size_type v91 = v75;
  }
  else {
    std::string::size_type v91 = v90;
  }
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v91 >= 0x17)
  {
    uint64_t v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v93 = v91 | 7;
    }
    uint64_t v94 = v93 + 1;
    std::string::size_type v92 = operator new(v93 + 1);
    v213.__r_.__value_.__l.__size_ = v91;
    v213.__r_.__value_.__r.__words[2] = v94 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    unint64_t v47 = v211;
    goto LABEL_193;
  }
  *((unsigned char *)&v213.__r_.__value_.__s + 23) = v91;
  std::string::size_type v92 = &v213;
  if (v91) {
LABEL_193:
  }
    memmove(v92, v29, v91);
  *((unsigned char *)v92 + v91) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v95 = &v216;
  }
  else {
    uint64_t v95 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v96 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v96 = v216.__r_.__value_.__l.__size_;
  }
  uint64_t v97 = std::string::append(&v213, (const std::string::value_type *)v95, v96);
  long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  unint64_t v215 = v97->__r_.__value_.__r.__words[2];
  long long __dst = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  unint64_t v99 = *(void *)(a4 + 8);
  if (v99 >= *(void *)(a4 + 16))
  {
    int64_t v105 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v106 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v105;
    if (v106 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_206;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_206;
    }
  }
  else
  {
    long long v100 = __dst;
    *(void *)(v99 + 16) = v215;
    *(_OWORD *)unint64_t v99 = v100;
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    *(void *)(a4 + 8) = v99 + 24;
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_206;
    }
  }
  operator delete(v213.__r_.__value_.__l.__data_);
  std::string::size_type v101 = v208;
  std::string::size_type v102 = v209;
  uint64_t v103 = v210;
  uint64_t v104 = v212;
  if (v208 == -1) {
    goto LABEL_234;
  }
LABEL_207:
  std::string::size_type v107 = *((unsigned __int8 *)a2 + 23);
  int v108 = (char)v107;
  if ((v107 & 0x80u) != 0) {
    std::string::size_type v107 = (std::string::size_type)a2[1];
  }
  if (v108 >= 0) {
    std::string::size_type v109 = a2;
  }
  else {
    std::string::size_type v109 = *a2;
  }
  if (v107 >= v101) {
    std::string::size_type v110 = v101;
  }
  else {
    std::string::size_type v110 = v107;
  }
  if (v110 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 >= 0x17)
  {
    uint64_t v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17) {
      uint64_t v112 = v110 | 7;
    }
    uint64_t v113 = v112 + 1;
    uint64_t v111 = operator new(v112 + 1);
    v213.__r_.__value_.__l.__size_ = v110;
    v213.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    unint64_t v47 = v211;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v110;
    uint64_t v111 = &v213;
    if (!v110) {
      goto LABEL_223;
    }
  }
  memmove(v111, v109, v110);
LABEL_223:
  *((unsigned char *)v111 + v110) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v114 = &v216;
  }
  else {
    int64_t v114 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v115 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v115 = v216.__r_.__value_.__l.__size_;
  }
  int v116 = std::string::append(&v213, (const std::string::value_type *)v114, v115);
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  unint64_t v215 = v116->__r_.__value_.__r.__words[2];
  long long __dst = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  unint64_t v118 = *(void *)(a4 + 8);
  if (v118 < *(void *)(a4 + 16))
  {
    long long v119 = __dst;
    *(void *)(v118 + 16) = v215;
    *(_OWORD *)unint64_t v118 = v119;
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    *(void *)(a4 + 8) = v118 + 24;
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_234;
    }
    goto LABEL_231;
  }
  unint64_t v120 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
  int v121 = SHIBYTE(v215);
  *(void *)(a4 + 8) = v120;
  if ((v121 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_234;
    }
LABEL_231:
    operator delete(v213.__r_.__value_.__l.__data_);
    goto LABEL_234;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_231;
  }
LABEL_234:
  if (v47 != -1)
  {
    std::string::size_type v122 = *((unsigned __int8 *)a2 + 23);
    int v123 = (char)v122;
    if ((v122 & 0x80u) != 0) {
      std::string::size_type v122 = (std::string::size_type)a2[1];
    }
    if (v123 >= 0) {
      int v124 = a2;
    }
    else {
      int v124 = *a2;
    }
    if (v122 >= v47) {
      std::string::size_type v125 = v47;
    }
    else {
      std::string::size_type v125 = v122;
    }
    if (v125 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v125 >= 0x17)
    {
      uint64_t v132 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17) {
        uint64_t v132 = v125 | 7;
      }
      uint64_t v133 = v132 + 1;
      int v126 = operator new(v132 + 1);
      v213.__r_.__value_.__l.__size_ = v125;
      v213.__r_.__value_.__r.__words[2] = v133 | 0x8000000000000000;
      v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    }
    else
    {
      *((unsigned char *)&v213.__r_.__value_.__s + 23) = v125;
      int v126 = &v213;
      if (!v125)
      {
LABEL_264:
        v126[v125] = 0;
        int v134 = *(char *)(v103 + 23);
        if (v134 >= 0) {
          uint64_t v135 = (const std::string::value_type *)v103;
        }
        else {
          uint64_t v135 = *(const std::string::value_type **)v103;
        }
        if (v134 >= 0) {
          std::string::size_type v136 = *(unsigned __int8 *)(v103 + 23);
        }
        else {
          std::string::size_type v136 = *(void *)(v103 + 8);
        }
        int64_t v137 = std::string::append(&v213, v135, v136);
        long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        unint64_t v215 = v137->__r_.__value_.__r.__words[2];
        long long __dst = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        unint64_t v139 = *(void *)(a4 + 8);
        if (v139 >= *(void *)(a4 + 16))
        {
          int v140 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
          goto LABEL_293;
        }
LABEL_287:
        long long v147 = __dst;
        *(void *)(v139 + 16) = v215;
        *(_OWORD *)unint64_t v139 = v147;
        unint64_t v215 = 0;
        long long __dst = 0uLL;
        *(void *)(a4 + 8) = v139 + 24;
        if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_295;
        }
        goto LABEL_288;
      }
    }
    memmove(v126, v124, v125);
    goto LABEL_264;
  }
  if (v84 == -1) {
    goto LABEL_295;
  }
  unint64_t v127 = *((unsigned __int8 *)a2 + 23);
  int v128 = (char)v127;
  if ((v127 & 0x80u) != 0) {
    unint64_t v127 = (unint64_t)a2[1];
  }
  if (v128 >= 0) {
    int v129 = a2;
  }
  else {
    int v129 = *a2;
  }
  if (v127 >= v84 - 1) {
    std::string::size_type v130 = v84 - 1;
  }
  else {
    std::string::size_type v130 = v127;
  }
  if (v130 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 >= 0x17)
  {
    uint64_t v141 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17) {
      uint64_t v141 = v130 | 7;
    }
    uint64_t v142 = v141 + 1;
    int64_t v131 = operator new(v141 + 1);
    v213.__r_.__value_.__l.__size_ = v130;
    v213.__r_.__value_.__r.__words[2] = v142 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    goto LABEL_279;
  }
  *((unsigned char *)&v213.__r_.__value_.__s + 23) = v130;
  int64_t v131 = &v213;
  if (v130) {
LABEL_279:
  }
    memmove(v131, v129, v130);
  *((unsigned char *)v131 + v130) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v143 = &v216;
  }
  else {
    int64_t v143 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v144 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v144 = v216.__r_.__value_.__l.__size_;
  }
  unint64_t v145 = std::string::append(&v213, (const std::string::value_type *)v143, v144);
  long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  unint64_t v215 = v145->__r_.__value_.__r.__words[2];
  long long __dst = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  unint64_t v139 = *(void *)(a4 + 8);
  if (v139 < *(void *)(a4 + 16)) {
    goto LABEL_287;
  }
  int v140 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
LABEL_293:
  int v149 = SHIBYTE(v215);
  *(void *)(a4 + 8) = v140;
  if (v149 < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_295:
      std::string::size_type v148 = v207;
      if (v207 == -1) {
        goto LABEL_324;
      }
      goto LABEL_296;
    }
  }
  else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_295;
  }
LABEL_288:
  operator delete(v213.__r_.__value_.__l.__data_);
  std::string::size_type v148 = v207;
  if (v207 == -1) {
    goto LABEL_324;
  }
LABEL_296:
  std::string::size_type v150 = v148;
  std::string::size_type v151 = *((unsigned __int8 *)a2 + 23);
  int v152 = (char)v151;
  if ((v151 & 0x80u) != 0) {
    std::string::size_type v151 = (std::string::size_type)a2[1];
  }
  if (v152 >= 0) {
    long long v153 = a2;
  }
  else {
    long long v153 = *a2;
  }
  if (v151 >= v150) {
    std::string::size_type v154 = v150;
  }
  else {
    std::string::size_type v154 = v151;
  }
  if (v154 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v154 >= 0x17)
  {
    uint64_t v156 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v154 | 7) != 0x17) {
      uint64_t v156 = v154 | 7;
    }
    uint64_t v157 = v156 + 1;
    char v155 = operator new(v156 + 1);
    v213.__r_.__value_.__l.__size_ = v154;
    v213.__r_.__value_.__r.__words[2] = v157 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v154;
    char v155 = &v213;
    if (!v154) {
      goto LABEL_312;
    }
  }
  memmove(v155, v153, v154);
LABEL_312:
  *((unsigned char *)v155 + v154) = 0;
  int v158 = *(char *)(v103 + 23);
  if (v158 >= 0) {
    size_t v159 = (const std::string::value_type *)v103;
  }
  else {
    size_t v159 = *(const std::string::value_type **)v103;
  }
  if (v158 >= 0) {
    std::string::size_type v160 = *(unsigned __int8 *)(v103 + 23);
  }
  else {
    std::string::size_type v160 = *(void *)(v103 + 8);
  }
  uint64_t v161 = std::string::append(&v213, v159, v160);
  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  unint64_t v215 = v161->__r_.__value_.__r.__words[2];
  long long __dst = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  unint64_t v163 = *(void *)(a4 + 8);
  if (v163 >= *(void *)(a4 + 16))
  {
    uint64_t v165 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v166 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v165;
    if (v166 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_324;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_324;
    }
LABEL_320:
    operator delete(v213.__r_.__value_.__l.__data_);
    if (v102 == -1) {
      goto LABEL_352;
    }
    goto LABEL_325;
  }
  long long v164 = __dst;
  *(void *)(v163 + 16) = v215;
  *(_OWORD *)unint64_t v163 = v164;
  unint64_t v215 = 0;
  long long __dst = 0uLL;
  *(void *)(a4 + 8) = v163 + 24;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_320;
  }
LABEL_324:
  if (v102 == -1) {
    goto LABEL_352;
  }
LABEL_325:
  std::string::size_type v167 = *((unsigned __int8 *)a2 + 23);
  int v168 = (char)v167;
  if ((v167 & 0x80u) != 0) {
    std::string::size_type v167 = (std::string::size_type)a2[1];
  }
  if (v168 >= 0) {
    int v169 = a2;
  }
  else {
    int v169 = *a2;
  }
  if (v167 >= v102) {
    std::string::size_type v170 = v102;
  }
  else {
    std::string::size_type v170 = v167;
  }
  if (v170 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v170 >= 0x17)
  {
    uint64_t v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v170 | 7) != 0x17) {
      uint64_t v172 = v170 | 7;
    }
    uint64_t v173 = v172 + 1;
    unint64_t v171 = operator new(v172 + 1);
    v213.__r_.__value_.__l.__size_ = v170;
    v213.__r_.__value_.__r.__words[2] = v173 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v170;
    unint64_t v171 = &v213;
    if (!v170) {
      goto LABEL_341;
    }
  }
  memmove(v171, v169, v170);
LABEL_341:
  *((unsigned char *)v171 + v170) = 0;
  int v174 = *(char *)(v103 + 23);
  if (v174 >= 0) {
    uint64_t v175 = (const std::string::value_type *)v103;
  }
  else {
    uint64_t v175 = *(const std::string::value_type **)v103;
  }
  if (v174 >= 0) {
    std::string::size_type v176 = *(unsigned __int8 *)(v103 + 23);
  }
  else {
    std::string::size_type v176 = *(void *)(v103 + 8);
  }
  size_t v177 = std::string::append(&v213, v175, v176);
  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  unint64_t v215 = v177->__r_.__value_.__r.__words[2];
  long long __dst = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  unint64_t v179 = *(void *)(a4 + 8);
  if (v179 >= *(void *)(a4 + 16))
  {
    unint64_t v181 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v182 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v181;
    if (v182 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_352;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_352;
    }
    goto LABEL_349;
  }
  long long v180 = __dst;
  *(void *)(v179 + 16) = v215;
  *(_OWORD *)unint64_t v179 = v180;
  unint64_t v215 = 0;
  long long __dst = 0uLL;
  *(void *)(a4 + 8) = v179 + 24;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
LABEL_349:
  }
    operator delete(v213.__r_.__value_.__l.__data_);
LABEL_352:
  if (*(_DWORD *)(v104 + 1848) != 17 || !*(unsigned char *)(v104 + 1856)) {
    goto LABEL_409;
  }
  uint64_t v183 = *(unsigned __int8 ***)(v104 + 1968);
  char v184 = *((unsigned char *)v183 + 23);
  if (v184 < 0)
  {
    if (!v183[1]) {
      goto LABEL_409;
    }
  }
  else if (!*((unsigned char *)v183 + 23))
  {
    goto LABEL_409;
  }
  uint64_t v185 = qword_25C6328;
  uint64_t v186 = *(void *)algn_25C6330;
  if (qword_25C6328 != *(void *)algn_25C6330)
  {
    if (v184 >= 0) {
      uint64_t v187 = (unsigned __int8 *)*((unsigned __int8 *)v183 + 23);
    }
    else {
      uint64_t v187 = v183[1];
    }
    if (v184 >= 0) {
      uint64_t v188 = (unsigned __int8 *)v183;
    }
    else {
      uint64_t v188 = *v183;
    }
    while (1)
    {
      uint64_t v189 = *(unsigned __int8 *)(v185 + 23);
      if ((v189 & 0x80u) == 0) {
        size_t v190 = (unsigned __int8 *)*(unsigned __int8 *)(v185 + 23);
      }
      else {
        size_t v190 = *(unsigned __int8 **)(v185 + 8);
      }
      if (v190 == v187)
      {
        if ((v189 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v185, v188, *(void *)(v185 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v185 + 23)) {
            break;
          }
          uint64_t v191 = 0;
          while (*(unsigned __int8 *)(v185 + v191) == v188[v191])
          {
            if (v189 == ++v191) {
              goto LABEL_380;
            }
          }
        }
      }
      v185 += 24;
      if (v185 == v186) {
        goto LABEL_409;
      }
    }
  }
LABEL_380:
  if (v185 != v186)
  {
    int v192 = byte_25C4767;
    if (byte_25C4767 >= 0) {
      size_t v193 = byte_25C4767;
    }
    else {
      size_t v193 = qword_25C4758;
    }
    int v194 = *(char *)(v103 + 23);
    if (v194 >= 0) {
      size_t v195 = *(unsigned __int8 *)(v103 + 23);
    }
    else {
      size_t v195 = *(void *)(v103 + 8);
    }
    unint64_t v196 = v195 + v193;
    if (v195 + v193 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v196 > 0x16)
    {
      uint64_t v198 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v196 | 7) != 0x17) {
        uint64_t v198 = v196 | 7;
      }
      uint64_t v199 = v198 + 1;
      uint64_t v197 = (long long *)operator new(v198 + 1);
      *((void *)&__dst + 1) = v195 + v193;
      unint64_t v215 = v199 | 0x8000000000000000;
      *(void *)&long long __dst = v197;
    }
    else
    {
      unint64_t v215 = 0;
      long long __dst = 0uLL;
      uint64_t v197 = &__dst;
      HIBYTE(v215) = v195 + v193;
    }
    if (v193)
    {
      if (v192 >= 0) {
        unint64_t v200 = &qword_25C4750;
      }
      else {
        unint64_t v200 = (uint64_t *)qword_25C4750;
      }
      memmove(v197, v200, v193);
    }
    uint64_t v201 = (char *)v197 + v193;
    if (v195)
    {
      if (v194 >= 0) {
        uint64_t v202 = (const void *)v103;
      }
      else {
        uint64_t v202 = *(const void **)v103;
      }
      memmove(v201, v202, v195);
    }
    v201[v195] = 0;
    unint64_t v203 = *(void *)(a4 + 8);
    if (v203 >= *(void *)(a4 + 16))
    {
      int v205 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
      int v206 = SHIBYTE(v215);
      *(void *)(a4 + 8) = v205;
      if (v206 < 0) {
        operator delete((void *)__dst);
      }
    }
    else
    {
      long long v204 = __dst;
      *(void *)(v203 + 16) = v215;
      *(_OWORD *)unint64_t v203 = v204;
      *(void *)(a4 + 8) = v203 + 24;
    }
  }
LABEL_409:
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
}

void sub_7FC1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_1A668(v33);
  _Unwind_Resume(a1);
}

void sub_7FC268(uint64_t a1@<X8>)
{
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  int v9 = 1065353216;
  uint64_t v5 = 0;
  int v6 = 0;
  sub_6373D8(a1, (uint64_t)&qword_25C5C20, (uint64_t)__p, 4, &v5);
  uint64_t v1 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  uint64_t v2 = (void *)v8;
  if ((void)v8)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
}

void sub_7FC338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_7FC354(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + 80;
  if (!*(unsigned char *)(a1 + 1860))
  {
    sub_635CD0((long long **)(a1 + 80), (uint64_t)__p);
    uint64_t v7 = sub_5231C(v3);
    uint64_t v9 = 0;
    BOOL v10 = 0;
    sub_6373D8((uint64_t)a2, (uint64_t)__p, v7, 2, &v9);
    long long v8 = v10;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v14 & 0x80000000) == 0) {
        return;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      return;
    }
    operator delete(__p[0]);
    return;
  }
  sub_635CD0((long long **)(a1 + 80), (uint64_t)__p);
  uint64_t v5 = sub_5231C(v3);
  uint64_t v11 = 0;
  int v12 = 0;
  sub_6373D8((uint64_t)a2, (uint64_t)__p, v5, 1, &v11);
  int v6 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_5:
      if (*(unsigned char *)(a1 + 1860))
      {
LABEL_6:
        sub_801A7C(a1, a2, 1);
        return;
      }
      goto LABEL_13;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (*(unsigned char *)(a1 + 1860)) {
    goto LABEL_6;
  }
LABEL_13:
  if (*(unsigned char *)(a1 + 1859)) {
    sub_801654(a1, (uint64_t)a2, 1, 0);
  }
}

void sub_7FC50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7FC55C(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 1860))
  {
    sub_801A7C(a1, a2, a3);
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    sub_801654(a1, (uint64_t)a2, a3, a4);
  }
}

uint64_t sub_7FC578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void sub_7FC59C(std::string::size_type a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    int64_t v18 = 0;
    std::string::size_type v19 = 0;
    uint64_t v20 = 0;
    sub_8A6F8((char *)&v18, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
    sub_5954B0((uint64_t)&v21, a1 + 104);
    char v23 = *(unsigned char *)(a1 + 144);
    goto LABEL_18;
  }
  if (sub_800B24(a1))
  {
    if ((byte_25C579F & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5788;
LABEL_12:
      *(_OWORD *)std::string __p = *v5;
      uint64_t v17 = *((void *)v5 + 2);
      goto LABEL_16;
    }
    int v6 = &xmmword_25C5788;
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    if ((byte_25C5817 & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5800;
      goto LABEL_12;
    }
    int v6 = &xmmword_25C5800;
  }
  else
  {
    if ((byte_25C585F & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5848;
      goto LABEL_12;
    }
    int v6 = &xmmword_25C5848;
  }
  sub_4200(__p, *(void **)v6, *((void *)v6 + 1));
LABEL_16:
  sub_7F53F4(a1, 1, (uint64_t)__p, (uint64_t)&v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  sub_6370D4(a3, &v18, 1, &v14);
  uint64_t v7 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  long long v8 = v22;
  if (v22)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      long long v8 = v9;
    }
    while (v9);
  }
  BOOL v10 = v21;
  unint64_t v21 = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v18;
  if (v18)
  {
    int v12 = v19;
    size_t v13 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      size_t v13 = v18;
    }
    std::string::size_type v19 = v11;
    operator delete(v13);
  }
}

void sub_7FC7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_7FC7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

__n128 sub_7FC804@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_800B24(a1))
  {
    if (*(unsigned char *)(a1 + 1859))
    {
      if ((byte_25C5817 & 0x80000000) == 0)
      {
        uint64_t v4 = &xmmword_25C5800;
        goto LABEL_12;
      }
      unint64_t v6 = *((void *)&xmmword_25C5800 + 1);
      uint64_t v5 = (void *)xmmword_25C5800;
      uint64_t v7 = (unsigned char *)a2;
    }
    else
    {
      if ((byte_25C585F & 0x80000000) == 0)
      {
        uint64_t v4 = &xmmword_25C5848;
        goto LABEL_12;
      }
      unint64_t v6 = *((void *)&xmmword_25C5848 + 1);
      uint64_t v5 = (void *)xmmword_25C5848;
      uint64_t v7 = (unsigned char *)a2;
    }
LABEL_9:
    sub_4200(v7, v5, v6);
    return result;
  }
  if (byte_25C579F < 0)
  {
    unint64_t v6 = *((void *)&xmmword_25C5788 + 1);
    uint64_t v5 = (void *)xmmword_25C5788;
    uint64_t v7 = (unsigned char *)a2;
    goto LABEL_9;
  }
  uint64_t v4 = &xmmword_25C5788;
LABEL_12:
  __n128 result = (__n128)*v4;
  *(_OWORD *)a2 = *v4;
  *(void *)(a2 + 16) = *((void *)v4 + 2);
  return result;
}

void sub_7FC910(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1856)) {
    sub_7FC920(a1, a2, a3, a4);
  }
  else {
    sub_7FDAB0(a1, a2, a3, a4);
  }
}

void sub_7FC920(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v178 = 0uLL;
  v179[0] = 0;
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128);
  uint64_t v11 = operator new(0x870uLL);
  int v12 = v10 - 1;
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v11 = off_243ACE8;
  std::string::size_type v13 = (std::string::size_type)(v11 + 3);
  sub_7F3934((std::string::size_type)(v11 + 3), v8, v9, a2, a3, v12);
  std::string::size_type v176 = (char *)(v11 + 3);
  size_t v177 = (std::__shared_weak_count *)v11;
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = a1 + 80;
  std::string::size_type v170 = 0;
  unint64_t v171 = 0;
  uint64_t v172 = 0;
  sub_8A6F8((char *)&v170, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  sub_5954B0((uint64_t)&v173, a1 + 104);
  char v175 = *(unsigned char *)(a1 + 144);
  if (sub_800B24((uint64_t)(v11 + 3)))
  {
    uint64_t v17 = &xmmword_25C5788;
    if ((byte_25C579F & 0x80000000) == 0)
    {
LABEL_3:
      long long __dst = *v17;
      uint64_t v169 = *((void *)v17 + 2);
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)v11 + 1883))
  {
    uint64_t v17 = &xmmword_25C5800;
    if ((byte_25C5817 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = &xmmword_25C5848;
    if ((byte_25C585F & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(&__dst, *(void **)v17, *((void *)v17 + 1));
LABEL_7:
  if (*((unsigned char *)v11 + 1876))
  {
    if (byte_25C4F77 < 0)
    {
      sub_4200(&v166, (void *)xmmword_25C4F60, *((unint64_t *)&xmmword_25C4F60 + 1));
    }
    else
    {
      long long v166 = xmmword_25C4F60;
      uint64_t v167 = unk_25C4F70;
    }
  }
  else
  {
    HIBYTE(v167) = 0;
    LOBYTE(v166) = 0;
  }
  uint64_t v18 = sub_7FE310(v13);
  sub_7F53F4(v13, 1, (uint64_t)&__dst, (uint64_t)&__p);
  sub_7FE4B4(v13, &v149);
  if (v167 >= 0) {
    std::string::size_type v19 = (const std::string::value_type *)&v166;
  }
  else {
    std::string::size_type v19 = (const std::string::value_type *)v166;
  }
  if (v167 >= 0) {
    std::string::size_type v20 = HIBYTE(v167);
  }
  else {
    std::string::size_type v20 = *((void *)&v166 + 1);
  }
  unint64_t v21 = std::string::insert(&v149, 0, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v158 = v21->__r_.__value_.__r.__words[2];
  long long v157 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (sub_7FE618(a1, a1 + 80, (uint64_t)&__p))
  {
    sub_6352AC((uint64_t)&v149, (uint64_t)&v157);
    std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      uint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v23);
        uint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v23;
      operator delete(v25);
    }
    std::string __p = v149;
    memset(&v149, 0, sizeof(v149));
    if (v163)
    {
      int v27 = v162;
      if (v162)
      {
        do
        {
          std::string::size_type v28 = (void *)*v27;
          sub_4F4B48((uint64_t)(v27 + 2));
          operator delete(v27);
          int v27 = v28;
        }
        while (v28);
      }
      long long v162 = 0;
      unint64_t v29 = v161;
      if (v161)
      {
        uint64_t v30 = 0;
        do
          *((void *)v160 + v30++) = 0;
        while (v29 != v30);
      }
      uint64_t v163 = 0;
    }
    int64_t v31 = v150;
    std::string::size_type v150 = 0;
    std::string::size_type v32 = v160;
    std::string::size_type v160 = v31;
    if (v32) {
      operator delete(v32);
    }
    unint64_t v33 = v151;
    uint64_t v34 = v152;
    unint64_t v151 = 0;
    uint64_t v163 = v153;
    int v164 = v154;
    unint64_t v161 = v33;
    long long v162 = v152;
    if (v153)
    {
      unint64_t v35 = v152[1];
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v35 >= v33) {
          v35 %= v33;
        }
      }
      else
      {
        v35 &= v33 - 1;
      }
      *((void *)v160 + v35) = &v162;
      int v152 = 0;
      uint64_t v153 = 0;
      char v165 = v155;
    }
    else
    {
      char v165 = v155;
      if (v152)
      {
        do
        {
          uint64_t v36 = (void *)*v34;
          sub_4F4B48((uint64_t)(v34 + 2));
          operator delete(v34);
          uint64_t v34 = v36;
        }
        while (v36);
      }
    }
    int64_t v37 = v150;
    std::string::size_type v150 = 0;
    if (v37) {
      operator delete(v37);
    }
    std::string::size_type v38 = v149.__r_.__value_.__r.__words[0];
    if (v149.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v39 = v149.__r_.__value_.__l.__size_;
      unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
      if (v149.__r_.__value_.__l.__size_ != v149.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v39 - 1) < 0) {
            operator delete(*(void **)(v39 - 24));
          }
          v39 -= 24;
        }
        while (v39 != v38);
        unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
      }
      v149.__r_.__value_.__l.__size_ = v38;
      goto LABEL_62;
    }
  }
  else if (*((unsigned char *)v11 + 1876))
  {
    sub_635CD0((long long **)&__p, (uint64_t)&v149);
    sub_80138C(a1, (char *)&v149);
    sub_63552C((uint64_t)&__p);
    sub_6351E8(&__p.__r_.__value_.__l.__data_, (uint64_t)&v149);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
LABEL_62:
      operator delete(v26);
    }
  }
  uint64_t v147 = 0;
  std::string::size_type v148 = 0;
  sub_6370D4(&v149, &__p, 1, &v147);
  int64_t v40 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    uint64_t v41 = (uint64_t)v176;
    if (v176[1860]) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v41 = (uint64_t)v176;
    if (v176[1860])
    {
LABEL_66:
      sub_801A7C(v41, (uint64_t *)&v149, 0);
      goto LABEL_70;
    }
  }
  if (*(unsigned char *)(v41 + 1859)) {
    sub_801654(v41, (uint64_t)&v149, 0, 0);
  }
LABEL_70:
  sub_635CD0((long long **)(a1 + 80), (uint64_t)v145);
  uint64_t v42 = sub_5231C(a1 + 80);
  sub_63531C((uint64_t)&v130, (uint64_t)v145, v42);
  int64_t v43 = (std::__shared_weak_count *)operator new(0x80uLL);
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v126, (uint64_t)&v43[1], (uint64_t)&v149);
  long long v138 = &v43[1].__vftable;
  unint64_t v139 = v43;
  sub_6370D4(&v140, &v130, v18, &v138);
  unsigned __int8 v44 = v139;
  if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  std::string v45 = v133;
  if (v133)
  {
    do
    {
      std::string v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      std::string v45 = v46;
    }
    while (v46);
  }
  unint64_t v47 = v132;
  uint64_t v132 = 0;
  if (v47) {
    operator delete(v47);
  }
  std::string v48 = (void **)v130;
  if (v130)
  {
    int64_t v49 = v131;
    std::string v50 = v130;
    if (v131 != v130)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      std::string v50 = v130;
    }
    int64_t v131 = v48;
    operator delete(v50);
  }
  if (*(unsigned char *)(a1 + 1860))
  {
    sub_801A7C(a1, (uint64_t *)&v140, 0);
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    sub_801654(a1, (uint64_t)&v140, 0, 0);
  }
  uint64_t v51 = *((void *)&v178 + 1);
  if (*((void *)&v178 + 1) >= v179[0])
  {
    uint64_t v52 = sub_81A350((uint64_t *)&v178, (uint64_t)&v140);
  }
  else
  {
    sub_59540C((uint64_t)v179, *((uint64_t *)&v178 + 1), (uint64_t)&v140);
    uint64_t v52 = v51 + 104;
  }
  *((void *)&v178 + 1) = v52;
  int v53 = (uint64_t *)nullsub_1(&v170);
  uint64_t v135 = 0;
  std::string::size_type v136 = 0;
  unint64_t v137 = 0;
  sub_8A6F8((char *)&v135, *v53, v53[1], 0xAAAAAAAAAAAAAAABLL * ((v53[1] - *v53) >> 3));
  long long v54 = (char *)v135;
  std::string::size_type v55 = (void **)v136;
  if (0xAAAAAAAAAAAAAAABLL * ((v136 - (unsigned char *)v135) >> 3) >= 3)
  {
    if ((char *)v135 + 24 != v136)
    {
      size_t v56 = (char *)v135 + 23;
      do
      {
        int v57 = (void **)(v56 - 23);
        if (*v56 < 0) {
          operator delete(*v57);
        }
        *(_OWORD *)int v57 = *(_OWORD *)(v56 + 1);
        *(void *)(v56 - 7) = *(void *)(v56 + 17);
        v56[24] = 0;
        v56 += 24;
        *(v56 - 23) = 0;
        v54 += 24;
      }
      while (v56 + 1 != (char *)v55);
      std::string::size_type v55 = (void **)v136;
    }
    while (v55 != (void **)v54)
    {
      if (*((char *)v55 - 1) < 0) {
        operator delete(*(v55 - 3));
      }
      v55 -= 3;
    }
    std::string::size_type v136 = v54;
    if (*(v54 - 1) < 0) {
      operator delete(*((void **)v54 - 3));
    }
    std::string::size_type v136 = v54 - 24;
    sub_6353B4((uint64_t)&v170, (std::string **)&v135);
    sub_6352AC((uint64_t)&v126, (uint64_t)&v157);
    sub_6376A0(&v130, &v170, v18, &v126, 1);
    std::string::size_type v58 = v129;
    if (v129)
    {
      do
      {
        std::string::size_type v59 = (void *)*v58;
        sub_4F4B48((uint64_t)(v58 + 2));
        operator delete(v58);
        std::string::size_type v58 = v59;
      }
      while (v59);
    }
    uint64_t v60 = v128;
    int v128 = 0;
    if (v60) {
      operator delete(v60);
    }
    int v61 = (void **)v126;
    if (v126)
    {
      uint64_t v62 = v127;
      unint64_t v63 = v126;
      if (v127 != v126)
      {
        do
        {
          if (*((char *)v62 - 1) < 0) {
            operator delete(*(v62 - 3));
          }
          v62 -= 3;
        }
        while (v62 != v61);
        unint64_t v63 = v126;
      }
      unint64_t v127 = v61;
      operator delete(v63);
    }
    if (*(unsigned char *)(a1 + 1860))
    {
      sub_801A7C(a1, (uint64_t *)&v130, 0);
    }
    else if (*(unsigned char *)(a1 + 1859))
    {
      sub_801654(a1, (uint64_t)&v130, 0, 0);
    }
    uint64_t v64 = *((void *)&v178 + 1);
    if (*((void *)&v178 + 1) >= v179[0])
    {
      uint64_t v65 = sub_81A350((uint64_t *)&v178, (uint64_t)&v130);
    }
    else
    {
      sub_59540C((uint64_t)v179, *((uint64_t *)&v178 + 1), (uint64_t)&v130);
      uint64_t v65 = v64 + 104;
    }
    *((void *)&v178 + 1) = v65;
    std::string::size_type v66 = v134;
    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    size_t v67 = v133;
    if (v133)
    {
      do
      {
        int v68 = (void *)*v67;
        sub_4F4B48((uint64_t)(v67 + 2));
        operator delete(v67);
        size_t v67 = v68;
      }
      while (v68);
    }
    uint64_t v69 = v132;
    uint64_t v132 = 0;
    if (v69) {
      operator delete(v69);
    }
    uint64_t v70 = (void **)v130;
    if (v130)
    {
      int64_t v71 = v131;
      long long v72 = v130;
      if (v131 != v130)
      {
        do
        {
          if (*((char *)v71 - 1) < 0) {
            operator delete(*(v71 - 3));
          }
          v71 -= 3;
        }
        while (v71 != v70);
        long long v72 = v130;
      }
      int64_t v131 = v70;
      operator delete(v72);
    }
  }
  sub_63C898((uint64_t)&v135, 0, 0, 0);
  uint64_t v73 = (void *)nullsub_1(a1 + 80);
  unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73[1] - *v73) >> 3);
  if (v74 != 1)
  {
    if (!v74)
    {
      unint64_t v75 = v136;
      if (v135 == v136) {
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    if (*(_DWORD *)(a1 + 1848) != 17 || !*(unsigned char *)(a1 + 1856)) {
      goto LABEL_168;
    }
    int v76 = *(unsigned __int8 ***)(a1 + 1968);
    char v77 = *((unsigned char *)v76 + 23);
    if (v77 < 0)
    {
      if (!v76[1])
      {
LABEL_168:
        int v85 = (void *)nullsub_1(v16);
        int64_t v86 = (void **)(*v85 + 24 * v74 - 48);
        size_t v87 = v136;
        if ((unint64_t)v136 >= v137)
        {
          uint64_t v89 = sub_1D740((char **)&v135, (uint64_t)v86);
        }
        else
        {
          if (*(char *)(*v85 + 24 * v74 - 25) < 0)
          {
            sub_4200(v136, *v86, *(void *)(*v85 + 24 * v74 - 40));
          }
          else
          {
            long long v88 = *(_OWORD *)v86;
            *((void *)v136 + 2) = *(void *)(*v85 + 24 * v74 - 32);
            _OWORD *v87 = v88;
          }
          uint64_t v89 = (char *)v87 + 24;
        }
        std::string::size_type v136 = v89;
        goto LABEL_175;
      }
    }
    else if (!*((unsigned char *)v76 + 23))
    {
      goto LABEL_168;
    }
    uint64_t v78 = qword_25C6328;
    uint64_t v79 = *(void *)algn_25C6330;
    if (qword_25C6328 != *(void *)algn_25C6330)
    {
      if (v77 >= 0) {
        int64_t v80 = (unsigned __int8 *)*((unsigned __int8 *)v76 + 23);
      }
      else {
        int64_t v80 = v76[1];
      }
      if (v77 >= 0) {
        int64_t v81 = *(unsigned __int8 **)(a1 + 1968);
      }
      else {
        int64_t v81 = *v76;
      }
      while (1)
      {
        uint64_t v82 = *(unsigned __int8 *)(v78 + 23);
        if ((v82 & 0x80u) == 0) {
          std::string::size_type v83 = (unsigned __int8 *)*(unsigned __int8 *)(v78 + 23);
        }
        else {
          std::string::size_type v83 = *(unsigned __int8 **)(v78 + 8);
        }
        if (v83 == v80)
        {
          if ((v82 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v78, v81, *(void *)(v78 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v78 + 23)) {
              break;
            }
            uint64_t v84 = 0;
            while (*(unsigned __int8 *)(v78 + v84) == v81[v84])
            {
              if (v82 == ++v84) {
                goto LABEL_167;
              }
            }
          }
        }
        v78 += 24;
        if (v78 == v79) {
          goto LABEL_168;
        }
      }
    }
LABEL_167:
    if (v78 == v79) {
      goto LABEL_168;
    }
  }
LABEL_175:
  uint64_t v90 = *(void *)(nullsub_1(v16) + 8);
  std::string::size_type v91 = (long long *)(v90 - 24);
  std::string::size_type v92 = v136;
  if ((unint64_t)v136 >= v137)
  {
    unint64_t v75 = sub_1D740((char **)&v135, (uint64_t)v91);
    std::string::size_type v136 = v75;
    if (v135 != v75) {
      goto LABEL_182;
    }
  }
  else
  {
    if (*(char *)(v90 - 1) < 0)
    {
      sub_4200(v136, *(void **)(v90 - 24), *(void *)(v90 - 16));
      unint64_t v75 = (char *)v92 + 24;
      std::string::size_type v136 = v75;
      if (v135 == v75) {
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    long long v93 = *v91;
    *((void *)v136 + 2) = *(void *)(v90 - 8);
    *std::string::size_type v92 = v93;
    unint64_t v75 = (char *)v92 + 24;
    std::string::size_type v136 = v75;
    if (v135 != v75)
    {
LABEL_182:
      sub_6353B4((uint64_t)&v170, (std::string **)&v135);
      LODWORD(v130) = 1;
      sub_7FE9A4((uint64_t)&v178, (uint64_t)&v170, (unsigned int *)&v130);
      unint64_t v75 = (char *)v135;
    }
  }
LABEL_183:
  *(_OWORD *)a4 = v178;
  *(void *)(a4 + 16) = v179[0];
  v179[0] = 0;
  long long v178 = 0uLL;
  if (v75)
  {
    uint64_t v94 = (void **)v136;
    uint64_t v95 = v75;
    if (v136 != v75)
    {
      do
      {
        if (*((char *)v94 - 1) < 0) {
          operator delete(*(v94 - 3));
        }
        v94 -= 3;
      }
      while (v94 != (void **)v75);
      uint64_t v95 = v135;
    }
    std::string::size_type v136 = v75;
    operator delete(v95);
  }
  std::string::size_type v96 = v144;
  if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  uint64_t v97 = v143;
  if (v143)
  {
    do
    {
      long long v98 = (void *)*v97;
      sub_4F4B48((uint64_t)(v97 + 2));
      operator delete(v97);
      uint64_t v97 = v98;
    }
    while (v98);
  }
  unint64_t v99 = v142;
  uint64_t v142 = 0;
  if (v99) {
    operator delete(v99);
  }
  long long v100 = (void **)v140;
  if (v140)
  {
    std::string::size_type v101 = v141;
    std::string::size_type v102 = v140;
    if (v141 != v140)
    {
      do
      {
        if (*((char *)v101 - 1) < 0) {
          operator delete(*(v101 - 3));
        }
        v101 -= 3;
      }
      while (v101 != v100);
      std::string::size_type v102 = v140;
    }
    uint64_t v141 = v100;
    operator delete(v102);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  uint64_t v103 = v156;
  if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = v152;
  if (v152)
  {
    do
    {
      int64_t v105 = (void *)*v104;
      sub_4F4B48((uint64_t)(v104 + 2));
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v150;
  std::string::size_type v150 = 0;
  if (v106) {
    operator delete(v106);
  }
  std::string::size_type v107 = v149.__r_.__value_.__r.__words[0];
  if (v149.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v108 = v149.__r_.__value_.__l.__size_;
    std::string::size_type v109 = (void *)v149.__r_.__value_.__r.__words[0];
    if (v149.__r_.__value_.__l.__size_ != v149.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v108 - 1) < 0) {
          operator delete(*(void **)(v108 - 24));
        }
        v108 -= 24;
      }
      while (v108 != v107);
      std::string::size_type v109 = (void *)v149.__r_.__value_.__r.__words[0];
    }
    v149.__r_.__value_.__l.__size_ = v107;
    operator delete(v109);
  }
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
  std::string::size_type v110 = v162;
  if (v162)
  {
    do
    {
      uint64_t v111 = (void *)*v110;
      sub_4F4B48((uint64_t)(v110 + 2));
      operator delete(v110);
      std::string::size_type v110 = v111;
    }
    while (v111);
  }
  uint64_t v112 = v160;
  std::string::size_type v160 = 0;
  if (v112) {
    operator delete(v112);
  }
  std::string::size_type v113 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v114 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v115 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v114 - 1) < 0) {
          operator delete(*(void **)(v114 - 24));
        }
        v114 -= 24;
      }
      while (v114 != v113);
      std::string::size_type v115 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v113;
    operator delete(v115);
  }
  if ((SHIBYTE(v167) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_239;
    }
LABEL_261:
    operator delete((void *)__dst);
    int v116 = v174;
    if (!v174) {
      goto LABEL_241;
    }
    goto LABEL_240;
  }
  operator delete((void *)v166);
  if (SHIBYTE(v169) < 0) {
    goto LABEL_261;
  }
LABEL_239:
  int v116 = v174;
  if (!v174) {
    goto LABEL_241;
  }
  do
  {
LABEL_240:
    long long v117 = (void *)*v116;
    sub_4F4B48((uint64_t)(v116 + 2));
    operator delete(v116);
    int v116 = v117;
  }
  while (v117);
LABEL_241:
  unint64_t v118 = v173;
  uint64_t v173 = 0;
  if (v118) {
    operator delete(v118);
  }
  long long v119 = v170;
  if (v170)
  {
    unint64_t v120 = v171;
    int v121 = v170;
    if (v171 != v170)
    {
      do
      {
        if (*((char *)v120 - 1) < 0) {
          operator delete(*(v120 - 3));
        }
        v120 -= 3;
      }
      while (v120 != v119);
      int v121 = v170;
    }
    unint64_t v171 = v119;
    operator delete(v121);
  }
  std::string::size_type v122 = v177;
  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  int v123 = (void **)v178;
  if ((void)v178)
  {
    int v124 = (void **)*((void *)&v178 + 1);
    std::string::size_type v125 = (void *)v178;
    if (*((void *)&v178 + 1) != (void)v178)
    {
      do
        int v124 = sub_4F31D0(v124 - 13);
      while (v124 != v123);
      std::string::size_type v125 = (void *)v178;
    }
    *((void *)&v178 + 1) = v123;
    operator delete(v125);
  }
}

void sub_7FD884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1A668(&a32);
  sub_4F31D0(&a37);
  if (a55 < 0) {
    operator delete(__p);
  }
  sub_4F31D0(&a58);
  if (a73 < 0) {
    operator delete(a72);
  }
  sub_4D4880((void **)&STACK[0x200]);
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  sub_4D4880((void **)(v73 - 216));
  sub_14A84(v73 - 144);
  sub_5920E0((void **)(v73 - 128));
  _Unwind_Resume(a1);
}

void sub_7FDAB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v8 = 40;
  if (!*(unsigned char *)(*(void *)(a1 + 1960) + 1064)) {
    uint64_t v8 = 32;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 1952) + v8);
  int v10 = __p;
  sub_635CD0((long long **)(a1 + 80), (uint64_t)__p);
  char v11 = BYTE7(v54);
  int v12 = __p[0];
  if (SBYTE7(v54) < 0) {
    int v10 = (void **)__p[0];
  }
  if (byte_25C474F >= 0) {
    std::string::size_type v13 = &qword_25C4738;
  }
  else {
    std::string::size_type v13 = (uint64_t *)qword_25C4738;
  }
  if (byte_25C474F >= 0) {
    int64_t v14 = byte_25C474F;
  }
  else {
    int64_t v14 = *(void *)&byte_25C4740;
  }
  if (!v14)
  {
    uint64_t v18 = 0;
    if ((BYTE7(v54) & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v51 = v9;
  uint64_t v52 = a2;
  if ((SBYTE7(v54) & 0x80u) == 0) {
    uint64_t v15 = BYTE7(v54);
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  uint64_t v16 = (char *)v10 + v15;
  if (v15 >= v14)
  {
    uint64_t v50 = a3;
    int v19 = *(char *)v13;
    std::string::size_type v20 = v10;
    do
    {
      uint64_t v21 = v15 - v14;
      if (v21 == -1) {
        break;
      }
      long long v22 = (char *)memchr(v20, v19, v21 + 1);
      if (!v22) {
        break;
      }
      uint64_t v17 = v22;
      if (!memcmp(v22, v13, v14)) {
        goto LABEL_25;
      }
      std::string::size_type v20 = (void **)(v17 + 1);
      uint64_t v15 = v16 - (v17 + 1);
    }
    while (v15 >= v14);
    uint64_t v17 = v16;
LABEL_25:
    a3 = v50;
  }
  else
  {
    uint64_t v17 = (char *)v10 + v15;
  }
  if (v17 == v16) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = v17 - (char *)v10;
  }
  uint64_t v9 = v51;
  a2 = v52;
  if (v11 < 0) {
LABEL_30:
  }
    operator delete(v12);
LABEL_31:
  if (*(void *)(*(void *)(a2 + 1064) + 2400 * a3 + 872) >= v9 && v18 == -1)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 120))(__p, a1);
    unint64_t v30 = *(void *)(a4 + 8);
    if (v30 >= *(void *)(a4 + 16))
    {
      std::string::size_type v38 = sub_63D48C((void ***)a4, (uint64_t)__p);
      std::string::size_type v39 = (std::__shared_weak_count *)*((void *)&v61 + 1);
      *(void *)(a4 + 8) = v38;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    else
    {
      *(void *)(v30 + 16) = 0;
      *(_OWORD *)unint64_t v30 = 0u;
      *(_OWORD *)unint64_t v30 = *(_OWORD *)__p;
      *(void *)(v30 + 16) = v54;
      uint64_t v31 = *((void *)&v54 + 1);
      *(_OWORD *)std::string __p = 0u;
      long long v54 = 0u;
      *(void *)(v30 + 24) = v31;
      *(void *)(v30 + 32) = v55;
      uint64_t v55 = 0;
      std::string::size_type v32 = v56;
      *(void *)(v30 + 40) = v56;
      uint64_t v33 = v57;
      *(void *)(v30 + 48) = v57;
      *(_DWORD *)(v30 + 56) = v58;
      if (v33)
      {
        unint64_t v34 = v32[1];
        unint64_t v35 = *(void *)(v30 + 32);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35) {
            v34 %= v35;
          }
        }
        else
        {
          v34 &= v35 - 1;
        }
        *(void *)(v31 + 8 * v34) = v30 + 40;
        size_t v56 = 0;
        uint64_t v57 = 0;
      }
      *(unsigned char *)(v30 + 64) = v59;
      *(_DWORD *)(v30 + 72) = v60;
      *(_OWORD *)(v30 + 80) = v61;
      long long v61 = 0uLL;
      *(_WORD *)(v30 + 96) = v62;
      *(void *)(a4 + 8) = v30 + 104;
    }
    std::string v46 = v56;
    if (v56)
    {
      do
      {
        unint64_t v47 = (void *)*v46;
        sub_4F4B48((uint64_t)(v46 + 2));
        operator delete(v46);
        std::string v46 = v47;
      }
      while (v47);
    }
    std::string v48 = (void *)*((void *)&v54 + 1);
    *((void *)&v54 + 1) = 0;
    if (v48) {
      operator delete(v48);
    }
    int64_t v43 = (void **)__p[0];
    if (__p[0])
    {
      int64_t v49 = (void **)__p[1];
      std::string v45 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_78;
      }
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v43);
      goto LABEL_77;
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 128))(__p, a1, a2, a3);
    unint64_t v24 = *(void *)(a4 + 8);
    if (v24 >= *(void *)(a4 + 16))
    {
      uint64_t v36 = sub_63D48C((void ***)a4, (uint64_t)__p);
      int64_t v37 = (std::__shared_weak_count *)*((void *)&v61 + 1);
      *(void *)(a4 + 8) = v36;
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(void *)(v24 + 16) = 0;
      *(_OWORD *)unint64_t v24 = 0u;
      *(_OWORD *)unint64_t v24 = *(_OWORD *)__p;
      *(void *)(v24 + 16) = v54;
      uint64_t v25 = *((void *)&v54 + 1);
      *(_OWORD *)std::string __p = 0u;
      long long v54 = 0u;
      *(void *)(v24 + 24) = v25;
      *(void *)(v24 + 32) = v55;
      uint64_t v55 = 0;
      unint64_t v26 = v56;
      *(void *)(v24 + 40) = v56;
      uint64_t v27 = v57;
      *(void *)(v24 + 48) = v57;
      *(_DWORD *)(v24 + 56) = v58;
      if (v27)
      {
        unint64_t v28 = v26[1];
        unint64_t v29 = *(void *)(v24 + 32);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v28 >= v29) {
            v28 %= v29;
          }
        }
        else
        {
          v28 &= v29 - 1;
        }
        *(void *)(v25 + 8 * v28) = v24 + 40;
        size_t v56 = 0;
        uint64_t v57 = 0;
      }
      *(unsigned char *)(v24 + 64) = v59;
      *(_DWORD *)(v24 + 72) = v60;
      *(_OWORD *)(v24 + 80) = v61;
      long long v61 = 0uLL;
      *(_WORD *)(v24 + 96) = v62;
      *(void *)(a4 + 8) = v24 + 104;
    }
    int64_t v40 = v56;
    if (v56)
    {
      do
      {
        uint64_t v41 = (void *)*v40;
        sub_4F4B48((uint64_t)(v40 + 2));
        operator delete(v40);
        int64_t v40 = v41;
      }
      while (v41);
    }
    uint64_t v42 = (void *)*((void *)&v54 + 1);
    *((void *)&v54 + 1) = 0;
    if (v42) {
      operator delete(v42);
    }
    int64_t v43 = (void **)__p[0];
    if (__p[0])
    {
      unsigned __int8 v44 = (void **)__p[1];
      std::string v45 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_78;
      }
      do
      {
        if (*((char *)v44 - 1) < 0) {
          operator delete(*(v44 - 3));
        }
        v44 -= 3;
      }
      while (v44 != v43);
LABEL_77:
      std::string v45 = __p[0];
LABEL_78:
      __p[1] = v43;
      operator delete(v45);
    }
  }
}

void sub_7FDFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4F31D0((void **)va);
  sub_5920E0(v5);
  _Unwind_Resume(a1);
}

void sub_7FDFE4(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_7FDFF8(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_7FE00C(_Unwind_Exception *a1)
{
  sub_5920E0(v1);
  _Unwind_Resume(a1);
}

void sub_7FE020(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4 = sub_635D10(a1 + 8, (uint64_t)&xmmword_25C6748);
  BOOL v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 1848);
  if (v6 <= 0x1E && ((1 << v6) & 0x60000800) != 0)
  {
    memset(&v11, 0, sizeof(v11));
LABEL_6:
    std::string::operator=(&v11, (const std::string *)&dword_25C51D0);
    if (v5)
    {
      if (byte_25C555F >= 0) {
        uint64_t v8 = (const std::string::value_type *)&qword_25C5548;
      }
      else {
        uint64_t v8 = (const std::string::value_type *)qword_25C5548;
      }
      if (byte_25C555F >= 0) {
        std::string::size_type v9 = byte_25C555F;
      }
      else {
        std::string::size_type v9 = unk_25C5550;
      }
      std::string::append(&v11, v8, v9);
    }
    *a2 = v11;
    return;
  }
  BOOL v10 = v6 - 64 < 3 && v4;
  memset(&v11, 0, sizeof(v11));
  if (v10) {
    goto LABEL_6;
  }
  if (v6 <= 0x19 && ((1 << v6) & 0x20200C0) != 0 || v6 - 86 < 2 || v6 - 41 < 0x13)
  {
LABEL_23:
    sub_7F9E6C(a1, (uint64_t)a2);
  }
  else
  {
    switch(v6)
    {
      case 0x10u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x27u:
      case 0x55u:
      case 0x58u:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
        goto LABEL_23;
      default:
        if (v6 - 89 <= 1) {
          goto LABEL_23;
        }
        a2->__r_.__value_.__r.__words[0] = 0;
        a2->__r_.__value_.__l.__size_ = 0;
        a2->__r_.__value_.__r.__words[2] = 0;
        break;
    }
  }
}

void sub_7FE190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_7FE2E4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1848);
  return v1 == 24 || (v1 & 0xFFFFFFFE) == 22;
}

BOOL sub_7FE2FC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 1848) - 91) < 3;
}

uint64_t sub_7FE310(uint64_t a1)
{
  if (sub_800B24(a1))
  {
    if ((byte_25C579F & 0x80000000) == 0)
    {
      uint64_t v2 = &xmmword_25C5788;
LABEL_10:
      *(_OWORD *)__s1 = *v2;
      uint64_t v13 = *((void *)v2 + 2);
      goto LABEL_14;
    }
    uint64_t v3 = &xmmword_25C5788;
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    if ((byte_25C5817 & 0x80000000) == 0)
    {
      uint64_t v2 = &xmmword_25C5800;
      goto LABEL_10;
    }
    uint64_t v3 = &xmmword_25C5800;
  }
  else
  {
    if ((byte_25C585F & 0x80000000) == 0)
    {
      uint64_t v2 = &xmmword_25C5848;
      goto LABEL_10;
    }
    uint64_t v3 = &xmmword_25C5848;
  }
  sub_4200(__s1, *(void **)v3, *((void *)v3 + 1));
LABEL_14:
  if (v13 >= 0) {
    BOOL v4 = (void *)HIBYTE(v13);
  }
  else {
    BOOL v4 = __s1[1];
  }
  unint64_t v5 = *((void *)&xmmword_25C5848 + 1);
  if (byte_25C585F >= 0) {
    unint64_t v5 = byte_25C585F;
  }
  if (v4 != (void *)v5)
  {
LABEL_30:
    uint64_t v9 = 13;
    if ((v13 & 0x8000000000000000) == 0) {
      return v9;
    }
LABEL_29:
    BOOL v10 = __s1[0];
    goto LABEL_35;
  }
  if (byte_25C585F >= 0) {
    unsigned int v6 = &xmmword_25C5848;
  }
  else {
    unsigned int v6 = (long long *)xmmword_25C5848;
  }
  if (v13 < 0)
  {
    BOOL v10 = __s1[0];
    if (!memcmp(__s1[0], v6, (size_t)__s1[1])) {
      uint64_t v9 = 5;
    }
    else {
      uint64_t v9 = 13;
    }
LABEL_35:
    operator delete(v10);
    return v9;
  }
  if (HIBYTE(v13))
  {
    uint64_t v7 = __s1;
    uint64_t v8 = HIBYTE(v13);
    while (*(unsigned __int8 *)v7 == *(unsigned __int8 *)v6)
    {
      uint64_t v7 = (void **)((char *)v7 + 1);
      unsigned int v6 = (long long *)((char *)v6 + 1);
      if (!--v8)
      {
        uint64_t v9 = 5;
        if ((v13 & 0x8000000000000000) == 0) {
          return v9;
        }
        goto LABEL_29;
      }
    }
    goto LABEL_30;
  }
  return 5;
}

void sub_7FE4B4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_7F9E6C(a1, (uint64_t)&v10);
  if (sub_800B24(a1))
  {
    BOOL v4 = &xmmword_25C5788;
    if (byte_25C579F < 0) {
      goto LABEL_8;
    }
LABEL_6:
    *(_OWORD *)std::string __p = *v4;
    uint64_t v9 = *((void *)v4 + 2);
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 1859))
  {
    BOOL v4 = &xmmword_25C5800;
    if ((byte_25C5817 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v4 = &xmmword_25C5848;
    if ((byte_25C585F & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
LABEL_9:
  if (v9 >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v6 = HIBYTE(v9);
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  uint64_t v7 = std::string::append(&v10, (const std::string::value_type *)v5, v6);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_19;
  }
}

void sub_7FE5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_7FE618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_635D10(a2, (uint64_t)&xmmword_25C6670) || !sub_635D10(a3, (uint64_t)&xmmword_25C6670)) {
    goto LABEL_26;
  }
  unint64_t v5 = (void *)sub_5231C(a2);
  std::string::size_type v6 = sub_619B40(v5, (uint64_t)&xmmword_25C6670);
  if (!v6) {
    goto LABEL_66;
  }
  sub_6F3178(&__s1, v6 + 5);
  uint64_t v7 = (void *)sub_5231C(a3);
  uint64_t v8 = sub_619B40(v7, (uint64_t)&xmmword_25C6670);
  if (!v8) {
    sub_5AE8("unordered_map::at: key not found");
  }
  sub_6F3178(&__p, v8 + 5);
  unsigned __int8 v9 = v46;
  if ((v46 & 0x80u) == 0) {
    size_t v10 = v46;
  }
  else {
    size_t v10 = __n;
  }
  uint64_t v11 = v43;
  int v12 = (char)v43;
  if ((v43 & 0x80u) != 0) {
    uint64_t v11 = v42;
  }
  if (v10 != v11)
  {
    BOOL v22 = 0;
    if (((char)v43 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_24;
  }
  if ((v43 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((char)v46 < 0)
  {
    BOOL v22 = memcmp(__s1, p_p, __n) == 0;
    goto LABEL_54;
  }
  if (v46)
  {
    uint64_t v14 = v46 - 1;
    p_s1 = &__s1;
    do
    {
      int v17 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v16 = v17;
      int v19 = *p_p++;
      int v18 = v19;
      BOOL v20 = v14-- != 0;
      char v21 = v20;
      BOOL v22 = v16 == v18;
    }
    while (v16 == v18 && (v21 & 1) != 0);
LABEL_54:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_55;
    }
LABEL_24:
    operator delete(__p);
    if ((v46 & 0x80) == 0) {
      goto LABEL_56;
    }
    goto LABEL_25;
  }
  BOOL v22 = 1;
  if ((char)v43 < 0) {
    goto LABEL_24;
  }
LABEL_55:
  if ((v9 & 0x80) == 0)
  {
LABEL_56:
    if (v22) {
      return 1;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__s1);
  if (v22) {
    return 1;
  }
LABEL_26:
  if (!sub_635D10(a2, (uint64_t)&xmmword_25C66D0) || !sub_635D10(a3, (uint64_t)&xmmword_25C66D0)) {
    return 0;
  }
  std::string::size_type v23 = (void *)sub_5231C(a2);
  unint64_t v24 = sub_619B40(v23, (uint64_t)&xmmword_25C66D0);
  if (!v24) {
LABEL_66:
  }
    sub_5AE8("unordered_map::at: key not found");
  sub_6F3178(&__s1, v24 + 5);
  uint64_t v25 = (void *)sub_5231C(a3);
  unint64_t v26 = sub_619B40(v25, (uint64_t)&xmmword_25C66D0);
  if (!v26) {
    sub_5AE8("unordered_map::at: key not found");
  }
  sub_6F3178(&__p, v26 + 5);
  unsigned __int8 v27 = v46;
  if ((v46 & 0x80u) == 0) {
    size_t v28 = v46;
  }
  else {
    size_t v28 = __n;
  }
  uint64_t v29 = v43;
  int v30 = (char)v43;
  if ((v43 & 0x80u) != 0) {
    uint64_t v29 = v42;
  }
  if (v28 == v29)
  {
    if ((v43 & 0x80u) == 0) {
      uint64_t v31 = (unsigned __int8 *)&__p;
    }
    else {
      uint64_t v31 = (unsigned __int8 *)__p;
    }
    if ((char)v46 < 0)
    {
      BOOL v39 = memcmp(__s1, v31, __n) == 0;
    }
    else
    {
      if (!v46)
      {
        BOOL v39 = 1;
        if (((char)v43 & 0x80000000) == 0)
        {
LABEL_60:
          if ((v27 & 0x80) == 0) {
            return v39;
          }
LABEL_61:
          operator delete(__s1);
          return v39;
        }
        goto LABEL_51;
      }
      uint64_t v32 = v46 - 1;
      uint64_t v33 = &__s1;
      do
      {
        int v35 = *(unsigned __int8 *)v33;
        uint64_t v33 = (void **)((char *)v33 + 1);
        int v34 = v35;
        int v37 = *v31++;
        int v36 = v37;
        BOOL v20 = v32-- != 0;
        char v38 = v20;
        BOOL v39 = v34 == v36;
      }
      while (v34 == v36 && (v38 & 1) != 0);
    }
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_60;
    }
  }
  else
  {
    BOOL v39 = 0;
    if (((char)v43 & 0x80000000) == 0) {
      goto LABEL_60;
    }
  }
LABEL_51:
  operator delete(__p);
  if ((v46 & 0x80) != 0) {
    goto LABEL_61;
  }
  return v39;
}

void sub_7FE8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7FE910(uint64_t a1, long long **a2)
{
  sub_635CD0(a2, (uint64_t)__p);
  sub_80138C(a1, (char *)__p);
  sub_63552C((uint64_t)a2);
  sub_6351E8((char **)a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_7FE988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_7FE9A4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v7 = sub_81A5A4((void **)a1, a2, a3);
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v9 = 0;
    size_t v10 = 0;
    sub_6370D4(v4, a2, v5, &v9);
    std::string::size_type v6 = v10;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (char *)(v4 + 104);
    *(void *)(a1 + 8) = v4 + 104;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 104;
}

void sub_7FEA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20A6E64(a10);
  }
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_7FEA74(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = 0;
  std::string::size_type v6 = 0;
  sub_6370D4(a2, a1 + 80, 8, &v5);
  unint64_t v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (*(unsigned char *)(a1 + 1860)) {
      goto LABEL_4;
    }
  }
  else if (*(unsigned char *)(a1 + 1860))
  {
LABEL_4:
    sub_801A7C(a1, a2, 0);
    return;
  }
  if (*(unsigned char *)(a1 + 1859)) {
    sub_801654(a1, (uint64_t)a2, 0, 0);
  }
}

void sub_7FEB48(_Unwind_Exception *a1)
{
  sub_4F31D0(v1);
  _Unwind_Resume(a1);
}

void sub_7FEB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_7FEB70(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128) - 1;
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x870uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_243ACE8;
  sub_7F3934((std::string::size_type)&v11[1], v8, v9, a2, a3, v10);
  int64_t v49 = &v11[1].__vftable;
  uint64_t v50 = v11;
  BOOL v12 = sub_800B24((uint64_t)&v11[1]);
  uint64_t v13 = 432;
  if (v12) {
    uint64_t v13 = 312;
  }
  uint64_t v14 = &xmmword_25C5800;
  if (v12) {
    uint64_t v14 = &xmmword_25C5788;
  }
  uint64_t v15 = &byte_25C5817;
  if (v12) {
    uint64_t v15 = &byte_25C579F;
  }
  if (*v15 < 0)
  {
    int v16 = *(void **)((char *)&xmmword_25C5650 + v13);
    uint64_t v17 = 432;
    if (v12) {
      uint64_t v17 = 312;
    }
    sub_4200(__p, v16, *(void *)((char *)&xmmword_25C5650 + v17 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *v14;
    uint64_t v41 = *((void *)v14 + 2);
  }
  sub_7F53F4((std::string::size_type)&v11[1], 1, (uint64_t)__p, (uint64_t)&v45);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v38 = 0;
  BOOL v39 = 0;
  sub_6370D4(__p, &v45, 1, &v38);
  int v18 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v19 = (uint64_t)v49;
    if (*((unsigned char *)v49 + 1860)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v19 = (uint64_t)v49;
    if (*((unsigned char *)v49 + 1860))
    {
LABEL_17:
      sub_801A7C(v19, (uint64_t *)__p, 0);
      goto LABEL_21;
    }
  }
  if (*(unsigned char *)(v19 + 1859)) {
    sub_801654(v19, (uint64_t)__p, 0, 0);
  }
LABEL_21:
  BOOL v20 = (std::__shared_weak_count *)operator new(0x80uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v51, (uint64_t)&v20[1], (uint64_t)__p);
  int v36 = &v20[1].__vftable;
  int v37 = v20;
  sub_6370D4(a4, a1 + 80, 9, &v36);
  char v21 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (*(unsigned char *)(a1 + 1860)) {
      goto LABEL_24;
    }
  }
  else if (*(unsigned char *)(a1 + 1860))
  {
LABEL_24:
    sub_801A7C(a1, a4, 0);
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 1859)) {
    sub_801654(a1, (uint64_t)a4, 0, 0);
  }
LABEL_28:
  BOOL v22 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::string::size_type v23 = v43;
  if (v43)
  {
    do
    {
      unint64_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      std::string::size_type v23 = v24;
    }
    while (v24);
  }
  uint64_t v25 = v42;
  uint64_t v42 = 0;
  if (v25) {
    operator delete(v25);
  }
  unint64_t v26 = (void **)__p[0];
  if (__p[0])
  {
    unsigned __int8 v27 = (void **)__p[1];
    size_t v28 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      size_t v28 = __p[0];
    }
    __p[1] = v26;
    operator delete(v28);
  }
  uint64_t v29 = v48;
  if (v48)
  {
    do
    {
      int v30 = (void *)*v29;
      sub_4F4B48((uint64_t)(v29 + 2));
      operator delete(v29);
      uint64_t v29 = v30;
    }
    while (v30);
  }
  uint64_t v31 = v47;
  unint64_t v47 = 0;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = (void **)v45;
  if (v45)
  {
    uint64_t v33 = v46;
    int v34 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v32);
      int v34 = v45;
    }
    unsigned __int8 v46 = v32;
    operator delete(v34);
  }
  int v35 = v50;
  if (v50)
  {
    if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_7FEFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  sub_4F31D0(v30);
  sub_4F31D0(&__p);
  sub_4D4880(&a30);
  sub_14A84(v31 - 104);
  _Unwind_Resume(a1);
}

void sub_7FF084(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_7F9E6C(a1, (uint64_t)&v15);
  BOOL v4 = sub_800B24(a1);
  uint64_t v5 = 432;
  if (v4) {
    uint64_t v5 = 312;
  }
  std::string::size_type v6 = &xmmword_25C5800;
  if (v4) {
    std::string::size_type v6 = &xmmword_25C5788;
  }
  uint64_t v7 = &byte_25C5817;
  if (v4) {
    uint64_t v7 = &byte_25C579F;
  }
  if (*v7 < 0)
  {
    uint64_t v8 = *(void **)((char *)&xmmword_25C5650 + v5);
    uint64_t v9 = 432;
    if (v4) {
      uint64_t v9 = 312;
    }
    sub_4200(__p, v8, *(void *)((char *)&xmmword_25C5650 + v9 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *v6;
    uint64_t v14 = *((void *)v6 + 2);
  }
  if (v14 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v11 = HIBYTE(v14);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  BOOL v12 = std::string::append(&v15, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_22:
    operator delete(v15.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
}

void sub_7FF1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_7FF1F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  sub_7FF304(a4, (uint64_t)&v6);
  long long v12 = v6;
  uint64_t v13 = v7;
  *(_OWORD *)std::string __p = v8;
  uint64_t v11 = v9;
  sub_635B18(a2, (uint64_t)&v12, (long long *)__p, a3);
  sub_635C08(a2, (long long *)&qword_25C6568, a3, 1);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete((void *)v12);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_5;
  }
}

void sub_7FF2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((*(char *)(v20 - 25) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v20 - 48));
  _Unwind_Resume(exception_object);
}

__n128 sub_7FF304@<Q0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1] != -1)
  {
    if (byte_25C5427 < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25C5410, *((unint64_t *)&xmmword_25C5410 + 1));
      uint64_t v3 = a2 + 24;
      if ((byte_25C67BF & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C5410;
      *(void *)(a2 + 16) = unk_25C5420;
      uint64_t v3 = a2 + 24;
      if ((byte_25C67BF & 0x80000000) == 0)
      {
LABEL_4:
        BOOL v4 = &xmmword_25C67A8;
LABEL_31:
        __n128 result = (__n128)*v4;
        *(_OWORD *)uint64_t v3 = *v4;
        *(void *)(v3 + 16) = *((void *)v4 + 2);
        return result;
      }
    }
    sub_4200((unsigned char *)v3, (void *)xmmword_25C67A8, *((unint64_t *)&xmmword_25C67A8 + 1));
    return result;
  }
  if (a1[2] != -1)
  {
    if (byte_25C543F < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25C5428, *((unint64_t *)&xmmword_25C5428 + 1));
      uint64_t v3 = a2 + 24;
      if ((byte_25C67D7 & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C5428;
      *(void *)(a2 + 16) = unk_25C5438;
      uint64_t v3 = a2 + 24;
      if ((byte_25C67D7 & 0x80000000) == 0)
      {
LABEL_8:
        BOOL v4 = &xmmword_25C67C0;
        goto LABEL_31;
      }
    }
    sub_4200((unsigned char *)v3, (void *)xmmword_25C67C0, *((unint64_t *)&xmmword_25C67C0 + 1));
    return result;
  }
  if (*a1 != -1)
  {
    if (byte_25C55D7 < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25C55C0, *((unint64_t *)&xmmword_25C55C0 + 1));
      uint64_t v3 = a2 + 24;
      if ((byte_25C67EF & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C55C0;
      *(void *)(a2 + 16) = unk_25C55D0;
      uint64_t v3 = a2 + 24;
      if ((byte_25C67EF & 0x80000000) == 0)
      {
LABEL_14:
        BOOL v4 = &xmmword_25C67D8;
        goto LABEL_31;
      }
    }
    sub_4200((unsigned char *)v3, (void *)xmmword_25C67D8, *((unint64_t *)&xmmword_25C67D8 + 1));
    return result;
  }
  if (a1[6] != -1)
  {
    if (byte_25C55EF < 0)
    {
      sub_4200((unsigned char *)a2, (void *)xmmword_25C55D8, *((unint64_t *)&xmmword_25C55D8 + 1));
    }
    else
    {
      *(_OWORD *)a2 = xmmword_25C55D8;
      *(void *)(a2 + 16) = unk_25C55E8;
    }
    uint64_t v3 = a2 + 24;
    if (byte_25C6807 < 0)
    {
      sub_4200((unsigned char *)v3, (void *)xmmword_25C67F0, *((unint64_t *)&xmmword_25C67F0 + 1));
      return result;
    }
    BOOL v4 = &xmmword_25C67F0;
    goto LABEL_31;
  }
  if (byte_25C5457 < 0)
  {
    sub_4200((unsigned char *)a2, (void *)xmmword_25C5440, *((unint64_t *)&xmmword_25C5440 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_25C5440;
    *(void *)(a2 + 16) = unk_25C5450;
  }
  uint64_t v3 = a2 + 24;
  if ((byte_25C6687 & 0x80000000) == 0)
  {
    BOOL v4 = &xmmword_25C6670;
    goto LABEL_31;
  }
  sub_4200((unsigned char *)v3, (void *)xmmword_25C6670, *((unint64_t *)&xmmword_25C6670 + 1));
  return result;
}

void sub_7FF5A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_7FF5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 936);
  uint64_t v3 = *(void *)(a1 + 944);
  if (v2 != v3)
  {
    if (0x86BCA1AF286BCA1BLL * ((v3 - v2) >> 3) < 2)
    {
      if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
      {
        uint64_t v7 = a1 + 152;
        sub_635B18(a2, (uint64_t)&qword_25C5458, &xmmword_25C66D0, a1 + 152);
        sub_635C08(a2, (long long *)&qword_25C6568, v7, 1);
      }
      else
      {
        sub_7FF1F4(a1, a2, a1 + 152, (void *)(a1 + 1864));
      }
    }
    else
    {
      sub_635B18(a2, (uint64_t)&qword_25C5488, (long long *)&dword_25C6688, v2);
      sub_635C08(a2, (long long *)&qword_25C6568, v2, 1);
      uint64_t v6 = *(void *)(a1 + 936) + 152;
      sub_635B18(a2, (uint64_t)&qword_25C54A0, &xmmword_25C66A0, v6);
      sub_635C08(a2, (long long *)&qword_25C6598, v6, 1);
      sub_635988(a2, &xmmword_25C6670, a1 + 152);
    }
  }
}

void sub_7FF778(uint64_t a1, std::string **a2)
{
  if (*(char *)(a1 + 1007) < 0)
  {
    if (*(void *)(a1 + 992)) {
      goto LABEL_3;
    }
LABEL_7:
    sub_63581C(a2, (const std::string::value_type *)&qword_25C4FC0);
    return;
  }
  if (!*(unsigned char *)(a1 + 1007)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = 0xFFFFFFFFLL;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  sub_635A2C((std::string *)a2, (const std::string::value_type *)&qword_25C4FD8, &xmmword_25C6C70, a1 + 984, (const std::string *)(a1 + 984), (uint64_t)&v2);
  if ((SHIBYTE(v5) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v3[0]);
    return;
  }
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0) {
    goto LABEL_11;
  }
}

void sub_7FF858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AA598((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7FF86C(uint64_t a1, long long **a2, uint64_t a3)
{
  sub_635CD0(a2, (uint64_t)__p);
  unsigned __int8 v6 = v25;
  uint64_t v7 = __p[0];
  if ((v25 & 0x80u) == 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = (void **)__p[0];
  }
  if (byte_25C5037 >= 0) {
    uint64_t v9 = &qword_25C5020;
  }
  else {
    uint64_t v9 = (uint64_t *)qword_25C5020;
  }
  if (byte_25C5037 >= 0) {
    int64_t v10 = byte_25C5037;
  }
  else {
    int64_t v10 = *(void *)&byte_25C5028;
  }
  if (!v10)
  {
    BOOL v14 = 1;
    if ((v25 & 0x80) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v11 = v25;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  long long v12 = (char *)v8 + v11;
  if (v11 >= v10)
  {
    uint64_t v23 = a1;
    int v15 = *(char *)v9;
    int v16 = v8;
    do
    {
      uint64_t v17 = v11 - v10;
      if (v17 == -1) {
        break;
      }
      int v18 = (char *)memchr(v16, v15, v17 + 1);
      if (!v18) {
        break;
      }
      uint64_t v13 = v18;
      if (!memcmp(v18, v9, v10)) {
        goto LABEL_24;
      }
      int v16 = (void **)(v13 + 1);
      uint64_t v11 = v12 - (v13 + 1);
    }
    while (v11 >= v10);
    uint64_t v13 = v12;
LABEL_24:
    a1 = v23;
  }
  else
  {
    uint64_t v13 = (char *)v8 + v11;
  }
  BOOL v14 = v13 != v12 && v13 - (char *)v8 != -1;
  if ((v6 & 0x80) != 0) {
LABEL_32:
  }
    operator delete(v7);
LABEL_33:
  if (!v14) {
    return;
  }
  if (*(void *)(a3 + 8) != -1) {
    sub_63581C((std::string **)a2, (const std::string::value_type *)&xmmword_25C53E0);
  }
  if (*(void *)(a3 + 16) != -1) {
    sub_63581C((std::string **)a2, (const std::string::value_type *)&xmmword_25C53F8);
  }
  if (*(void *)a3 != -1) {
    sub_63581C((std::string **)a2, (const std::string::value_type *)&xmmword_25C5590);
  }
  if (*(void *)(a3 + 48) != -1) {
    sub_63581C((std::string **)a2, (const std::string::value_type *)&xmmword_25C55A8);
  }
  if (*(unsigned char *)(*(void *)(a1 + 1952) + 1973)
    && (*(void *)(a3 + 16) != -1 || *(void *)a3 != -1 || *(void *)(a3 + 48) != -1))
  {
    int v20 = *(_DWORD *)(a3 + 56);
    if (v20 == 1)
    {
      char v21 = &dword_25C5608;
    }
    else
    {
      if (v20 != 2) {
        goto LABEL_51;
      }
      char v21 = &dword_25C55F0;
    }
    sub_63581C((std::string **)a2, (const std::string::value_type *)v21);
  }
LABEL_51:
  if (*(void *)(a3 + 24) == -1)
  {
    if (*(void *)(a3 + 32) == -1)
    {
      if (*(void *)(a3 + 40) == -1) {
        return;
      }
      BOOL v22 = &xmmword_25C5650;
    }
    else
    {
      BOOL v22 = &xmmword_25C5638;
    }
  }
  else
  {
    BOOL v22 = &xmmword_25C5620;
  }
  sub_63581C((std::string **)a2, (const std::string::value_type *)v22);
}

std::string *sub_7FFAC0(std::string *result, std::string *this)
{
  uint64_t v3 = result;
  int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    long long v5 = this;
  }
  else {
    long long v5 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (byte_25C5037 >= 0) {
    unsigned __int8 v6 = &qword_25C5020;
  }
  else {
    unsigned __int8 v6 = (uint64_t *)qword_25C5020;
  }
  if (byte_25C5037 >= 0) {
    int64_t v7 = byte_25C5037;
  }
  else {
    int64_t v7 = *(void *)&byte_25C5028;
  }
  if (v7)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = this->__r_.__value_.__l.__size_;
    }
    if (size >= v7)
    {
      long long v8 = (std::string *)((char *)v5 + size);
      int v9 = *(char *)v6;
      __n128 result = v5;
      do
      {
        int64_t v10 = size - v7;
        if (v10 == -1) {
          break;
        }
        __n128 result = (std::string *)memchr(result, v9, v10 + 1);
        if (!result) {
          break;
        }
        uint64_t v11 = result;
        __n128 result = (std::string *)memcmp(result, v6, v7);
        if (!result)
        {
          if (v11 == v8 || (char *)v11 - (char *)v5 == -1) {
            return result;
          }
          goto LABEL_23;
        }
        __n128 result = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
        int64_t size = (char *)v8 - ((char *)&v11->__r_.__value_.__l.__data_ + 1);
      }
      while (size >= v7);
    }
  }
  else
  {
LABEL_23:
    if (v3[78].__r_.__value_.__r.__words[0] == -1)
    {
      if (v3[78].__r_.__value_.__l.__size_ == -1)
      {
        if (v3[77].__r_.__value_.__r.__words[2] == -1)
        {
          if (v3[78].__r_.__value_.__r.__words[2] == -1)
          {
            if (v3[79].__r_.__value_.__r.__words[0] == -1)
            {
              if (v3[79].__r_.__value_.__l.__size_ == -1) {
                return result;
              }
              long long v12 = &xmmword_25C5650;
            }
            else
            {
              long long v12 = &xmmword_25C5638;
            }
          }
          else
          {
            long long v12 = &xmmword_25C5620;
          }
        }
        else
        {
          long long v12 = &xmmword_25C5590;
        }
      }
      else
      {
        long long v12 = &xmmword_25C53F8;
      }
    }
    else
    {
      long long v12 = &xmmword_25C53E0;
    }
    int v13 = *((char *)v12 + 23);
    if (v13 >= 0) {
      BOOL v14 = (const std::string::value_type *)v12;
    }
    else {
      BOOL v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
    }
    else {
      std::string::size_type v15 = *((void *)v12 + 1);
    }
    return std::string::append(this, v14, v15);
  }
  return result;
}

std::string *sub_7FFC7C(std::string *result, std::string *a2)
{
  if (*(unsigned char *)(result[81].__r_.__value_.__l.__size_ + 1972))
  {
    uint64_t v3 = result;
    __n128 result = (std::string *)sub_6F2FD8((uint64_t)&result[6].__r_.__value_.__l.__size_);
    if ((result & 1) == 0)
    {
      __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v3[12].__r_.__value_.__r.__words[2]);
      if ((result & 1) == 0)
      {
        __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v3[19]);
        if ((result & 1) == 0)
        {
          __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v3[25].__r_.__value_.__l.__size_);
          if ((result & 1) == 0
            && v3[38].__r_.__value_.__r.__words[0] == v3[38].__r_.__value_.__l.__size_
            && v3[39].__r_.__value_.__r.__words[0] == v3[39].__r_.__value_.__l.__size_
            && v3[40].__r_.__value_.__r.__words[0] == v3[40].__r_.__value_.__l.__size_
            && v3[77].__r_.__value_.__r.__words[2] == -1
            && v3[78].__r_.__value_.__r.__words[0] == -1
            && v3[78].__r_.__value_.__l.__size_ == -1
            && v3[78].__r_.__value_.__r.__words[2] == -1
            && v3[79].__r_.__value_.__r.__words[0] == -1
            && v3[79].__r_.__value_.__l.__size_ == -1
            && v3[79].__r_.__value_.__r.__words[2] == -1)
          {
            int v4 = v3[77].__r_.__value_.__s.__data_[7];
            if (v4 == 3)
            {
              if (v3[77].__r_.__value_.__s.__data_[13]) {
                return result;
              }
              __n128 result = sub_7FFDB0(v3, a2);
              int v4 = v3[77].__r_.__value_.__s.__data_[7];
            }
            if (v4 == 2)
            {
              return (std::string *)sub_7FFEC4((uint64_t)v3, a2);
            }
          }
        }
      }
    }
  }
  return result;
}

std::string *sub_7FFDB0(std::string *result, std::string *this)
{
  switch(HIDWORD(result[81].__r_.__value_.__r.__words[0]))
  {
    case 1:
      uint64_t v2 = &qword_25C7F80;
      goto LABEL_14;
    case 2:
      uint64_t v2 = &qword_25C7F08;
      goto LABEL_14;
    case 3:
      uint64_t v2 = &qword_25C7F20;
      goto LABEL_14;
    case 4:
      uint64_t v2 = &qword_25C7F98;
      goto LABEL_14;
    case 5:
      uint64_t v2 = &qword_25C7FE0;
      goto LABEL_14;
    case 6:
      uint64_t v2 = &qword_25C7FB0;
      goto LABEL_14;
    case 7:
      uint64_t v2 = &qword_25C7FC8;
      goto LABEL_14;
    case 8:
      uint64_t v2 = &qword_25C7FF8;
      goto LABEL_14;
    case 9:
      uint64_t v2 = (uint64_t *)&xmmword_25C5620;
      goto LABEL_14;
    case 0xA:
      uint64_t v2 = (uint64_t *)&xmmword_25C5638;
      goto LABEL_14;
    case 0xB:
      uint64_t v2 = &qword_25C7F38;
      goto LABEL_14;
    case 0xC:
      uint64_t v2 = &qword_25C7F68;
LABEL_14:
      std::string::size_type v3 = v2[1];
      if (*((char *)v2 + 23) >= 0)
      {
        std::string::size_type v4 = *((unsigned __int8 *)v2 + 23);
      }
      else
      {
        uint64_t v2 = (uint64_t *)*v2;
        std::string::size_type v4 = v3;
      }
      __n128 result = std::string::append(this, (const std::string::value_type *)v2, v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_7FFEC4(uint64_t result, std::string *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 1936);
  int64_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    unsigned __int8 v6 = this;
  }
  else {
    unsigned __int8 v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (byte_25C5037 >= 0) {
    int64_t v7 = &qword_25C5020;
  }
  else {
    int64_t v7 = (uint64_t *)qword_25C5020;
  }
  if (byte_25C5037 >= 0) {
    int64_t v8 = byte_25C5037;
  }
  else {
    int64_t v8 = *(void *)&byte_25C5028;
  }
  if (v8)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = this->__r_.__value_.__l.__size_;
    }
    if (size >= v8)
    {
      int v9 = (char *)v6 + size;
      int v10 = *(char *)v7;
      __n128 result = (uint64_t)v6;
      do
      {
        int64_t v11 = size - v8;
        if (v11 == -1) {
          break;
        }
        __n128 result = (uint64_t)memchr((void *)result, v10, v11 + 1);
        if (!result) {
          break;
        }
        uint64_t v12 = result;
        __n128 result = memcmp((const void *)result, v7, v8);
        if (!result)
        {
          if ((char *)v12 == v9 || v12 - (void)v6 == -1) {
            return result;
          }
          goto LABEL_22;
        }
        __n128 result = v12 + 1;
        int64_t size = (int64_t)&v9[-v12 - 1];
      }
      while (size >= v8);
    }
  }
  else
  {
LABEL_22:
    if (!*(unsigned char *)(v3 + 1858))
    {
      switch(v4)
      {
        case 1:
          int v13 = &qword_25C7F98;
          goto LABEL_31;
        case 2:
          int v13 = &qword_25C7FE0;
          goto LABEL_31;
        case 3:
          int v13 = &qword_25C7FB0;
          goto LABEL_31;
        case 4:
          int v13 = &qword_25C7FC8;
          goto LABEL_31;
        case 5:
          int v13 = &qword_25C7FF8;
          goto LABEL_31;
        case 6:
          int v13 = &qword_25C8010;
LABEL_31:
          int v14 = *((char *)v13 + 23);
          if (v14 >= 0) {
            std::string::size_type v15 = (const std::string::value_type *)v13;
          }
          else {
            std::string::size_type v15 = (const std::string::value_type *)*v13;
          }
          if (v14 >= 0) {
            std::string::size_type v16 = *((unsigned __int8 *)v13 + 23);
          }
          else {
            std::string::size_type v16 = v13[1];
          }
          __n128 result = (uint64_t)std::string::append(this, v15, v16);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

std::string *sub_800094(std::string *result, std::string **a2)
{
  if (result[77].__r_.__value_.__s.__data_[13])
  {
    uint64_t v2 = (std::string::__raw *)result;
    if (result[77].__r_.__value_.__s.__data_[8])
    {
      __n128 result = (std::string *)sub_6F2FD8((uint64_t)&result[6].__r_.__value_.__l.__size_);
      if ((result & 1) == 0)
      {
        __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v2[12].__words[2]);
        if ((result & 1) == 0)
        {
          __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v2[19]);
          if ((result & 1) == 0)
          {
            __n128 result = (std::string *)sub_6F2FD8((uint64_t)&v2[25].__words[1]);
            if ((result & 1) == 0
              && v2[38].__words[0] == v2[38].__words[1]
              && v2[39].__words[0] == v2[39].__words[1]
              && v2[40].__words[0] == v2[40].__words[1])
            {
              return sub_63581C(a2, (const std::string::value_type *)&qword_25C5680);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_800150(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 1848) - 82) < 3;
}

uint64_t sub_800164(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 1848);
  BOOL v3 = 1;
  if (v2 > 0x1E || ((1 << v2) & 0x60000800) == 0)
  {
    BOOL v3 = sub_635D10(a1 + 8, (uint64_t)&xmmword_25C6748);
    unsigned int v2 = *(_DWORD *)(a1 + 1848);
  }
  BOOL v5 = v2 - 86 < 2 || v2 - 41 < 0x13;
  int v6 = v2 - 6 < 2 || v5;
  if (v2 != 24 && (v2 & 0xFFFFFFFE) != 22 && v2 - 91 >= 3) {
    return v3 | v6;
  }
  else {
    return 1;
  }
}

long long *sub_8001FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1960);
  if (*(unsigned char *)(v2 + 1524))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 1688);
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 1688);
    unsigned int v5 = v4 + 1;
    unsigned int v3 = v4 - 1;
    if (v5 < 2) {
      unsigned int v3 = -1;
    }
  }
  int v6 = sub_800320(v2, v3);
  if (!sub_8005D4(*(void *)(a1 + 1960), *(_DWORD *)(a1 + 1688)))
  {
    if ((v6 & 0x10000) != 0) {
      return &xmmword_25C52A8;
    }
    if ((v6 & 1) == 0) {
      goto LABEL_11;
    }
    return &xmmword_25C5290;
  }
  if (v6) {
    return &xmmword_25C5290;
  }
  if ((v6 & 0x10000) != 0) {
    return &xmmword_25C52A8;
  }
LABEL_11:
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F71B0, memory_order_acquire)) {
    return (long long *)&qword_24F7198;
  }
  if (__cxa_guard_acquire(&qword_24F71B0))
  {
    qword_24F7198 = 0;
    unk_24F71A0 = 0;
    qword_24F71A8 = 0;
    __cxa_guard_release(&qword_24F71B0);
  }
  return (long long *)&qword_24F7198;
}

uint64_t sub_800320(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 1104) == *(void *)(a1 + 1112)) {
    return 0;
  }
  if (!sub_62D424(a1)) {
    return *(unsigned int *)(*(void *)(a1 + 1112) - 4);
  }
  if (a2 == 0xFFFFFFFFLL)
  {
    uint64_t result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v8);
    sub_188FC78(v8, (uint64_t)"StepBasicGuidanceKeyBuilder::get_destination_waypoint_name_properties encountered an invalid user waypoint index", 112);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 1104);
  if (a2 < (unint64_t)((*(void *)(a1 + 1112) - v5) >> 2)) {
    return *(unsigned int *)(v5 + 4 * a2);
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v8);
    sub_188FC78(v8, (uint64_t)"StepBasicGuidanceKeyBuilder::get_destination_waypoint_name_properties encountered an out-of-range user waypoint index", 117);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_13:
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_80055C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_8005D4(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 1160)) {
    return 0;
  }
  if (!sub_62D424(a1)) {
    return (*(void *)(*(void *)(a1 + 1152)
  }
                      + (((unint64_t)(*(void *)(a1 + 1160) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*(unsigned char *)(a1 + 1160) - 1)) & 1;
  if (a2 == 0xFFFFFFFFLL)
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v7);
    sub_188FC78(v7, (uint64_t)"StepBasicGuidanceKeyBuilder::get_destination_is_poi encountered an invalid user waypoint index", 94);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_13;
  }
  if (*(void *)(a1 + 1160) > (unint64_t)a2) {
    return (*(void *)(*(void *)(a1 + 1152) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v7);
    sub_188FC78(v7, (uint64_t)"StepBasicGuidanceKeyBuilder::get_destination_is_poi encountered an out-of-range user waypoint index", 99);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_13:
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete((void *)v7[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_80082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_8008A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 1848);
  uint64_t v5 = 144;
  if (v4 == 84) {
    uint64_t v5 = 150;
  }
  char v6 = (uint64_t *)&xmmword_25C4B10;
  if (v4 != 84) {
    char v6 = &qword_25C4AE0;
  }
  BOOL v7 = v4 == 83;
  if (v4 == 83) {
    uint64_t v5 = 147;
  }
  char v8 = &xmmword_25C4AF8;
  if (!v7) {
    char v8 = (long long *)v6;
  }
  if (*((char *)v8 + 23) < 0)
  {
    sub_4200(__dst, (void *)qword_25C4660[v5], *((void *)v8 + 1));
    LODWORD(v8) = *(char *)(a1 + 1007);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *(_OWORD *)long long __dst = *v8;
    uint64_t v27 = *((void *)v8 + 2);
    LODWORD(v8) = *(char *)(a1 + 1007);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_11:
      char v8 = (long long *)v8;
      goto LABEL_14;
    }
  }
  char v8 = *(long long **)(a1 + 992);
LABEL_14:
  uint64_t v9 = 303;
  if (!v8) {
    uint64_t v9 = 300;
  }
  int v10 = &qword_25C4FD8;
  if (!v8) {
    int v10 = &qword_25C4FC0;
  }
  int64_t v11 = (char *)&qword_25C4FE8 + 7;
  if (!v8) {
    int64_t v11 = &byte_25C4FD7;
  }
  if (*v11 < 0)
  {
    if (v8) {
      uint64_t v12 = (unint64_t *)&unk_25C4FE0;
    }
    else {
      uint64_t v12 = (unint64_t *)&unk_25C4FC8;
    }
    sub_4200(__p, (void *)qword_25C4660[v9], *v12);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v10;
    uint64_t v25 = v10[2];
  }
  int v13 = SHIBYTE(v27);
  if (v27 >= 0) {
    size_t v14 = HIBYTE(v27);
  }
  else {
    size_t v14 = (size_t)__dst[1];
  }
  int v15 = SHIBYTE(v25);
  if (v25 >= 0) {
    size_t v16 = HIBYTE(v25);
  }
  else {
    size_t v16 = (size_t)__p[1];
  }
  unint64_t v17 = v16 + v14;
  if (v16 + v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v17 <= 0x16)
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((unsigned char *)a2 + 23) = v17;
    if (!v14) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v21 = v17 | 7;
  }
  uint64_t v22 = v21 + 1;
  uint64_t v23 = operator new(v21 + 1);
  a2[1] = v17;
  a2[2] = v22 | 0x8000000000000000;
  *a2 = v23;
  a2 = v23;
  if (v14)
  {
LABEL_35:
    if (v13 >= 0) {
      int v18 = __dst;
    }
    else {
      int v18 = (void **)__dst[0];
    }
    memmove(a2, v18, v14);
  }
LABEL_39:
  uint64_t v19 = (char *)a2 + v14;
  if (v16)
  {
    if (v15 >= 0) {
      int v20 = __p;
    }
    else {
      int v20 = (void **)__p[0];
    }
    memmove(v19, v20, v16);
  }
  v19[v16] = 0;
  if ((v15 & 0x80000000) == 0)
  {
    if ((v13 & 0x80) == 0) {
      return;
    }
LABEL_52:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (v27 < 0) {
    goto LABEL_52;
  }
}

void sub_800AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_800B24(uint64_t a1)
{
  sub_635CD0((long long **)(a1 + 8), (uint64_t)__p);
  unsigned __int8 v1 = v17;
  uint64_t v2 = __p[0];
  if ((v17 & 0x80u) == 0) {
    unsigned int v3 = __p;
  }
  else {
    unsigned int v3 = (void **)__p[0];
  }
  if (byte_25C5037 >= 0) {
    int v4 = &qword_25C5020;
  }
  else {
    int v4 = (uint64_t *)qword_25C5020;
  }
  if (byte_25C5037 >= 0) {
    int64_t v5 = byte_25C5037;
  }
  else {
    int64_t v5 = *(void *)&byte_25C5028;
  }
  if (!v5)
  {
    BOOL v10 = 1;
    if ((v17 & 0x80) == 0) {
      return v10;
    }
    goto LABEL_23;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  BOOL v7 = (char *)v3 + v6;
  if (v6 >= v5)
  {
    int v12 = *(char *)v4;
    int v13 = v3;
    do
    {
      uint64_t v14 = v6 - v5;
      if (v14 == -1) {
        break;
      }
      int v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15) {
        break;
      }
      char v8 = v15;
      if (!memcmp(v15, v4, v5)) {
        goto LABEL_16;
      }
      int v13 = (void **)(v8 + 1);
      uint64_t v6 = v7 - (v8 + 1);
    }
    while (v6 >= v5);
  }
  char v8 = v7;
LABEL_16:
  BOOL v10 = v8 != v7 && v8 - (char *)v3 != -1;
  if ((v1 & 0x80) != 0) {
LABEL_23:
  }
    operator delete(v2);
  return v10;
}

void sub_800C3C(uint64_t a1, char *a2)
{
  LODWORD(v3) = a2[23];
  if (byte_25C5487 >= 0) {
    int v4 = &qword_25C5470;
  }
  else {
    int v4 = (uint64_t *)qword_25C5470;
  }
  if (byte_25C5487 >= 0) {
    int64_t v5 = byte_25C5487;
  }
  else {
    int64_t v5 = unk_25C5478;
  }
  uint64_t v6 = *(char **)a2;
  if ((v3 & 0x80000000) == 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = *(char **)a2;
  }
  if ((v3 & 0x80000000) == 0) {
    size_t v8 = a2[23];
  }
  else {
    size_t v8 = *((void *)a2 + 1);
  }
  if (!v5)
  {
    uint64_t v16 = 0;
    goto LABEL_22;
  }
  if ((uint64_t)v8 >= v5)
  {
    uint64_t v9 = &v7[v8];
    int v10 = *(char *)v4;
    int64_t v11 = v8;
    int v12 = v7;
    while (1)
    {
      int64_t v13 = v11 - v5;
      if (v13 == -1) {
        goto LABEL_37;
      }
      uint64_t v14 = (char *)memchr(v12, v10, v13 + 1);
      if (!v14) {
        goto LABEL_37;
      }
      int v15 = v14;
      if (!memcmp(v14, v4, v5)) {
        break;
      }
      int v12 = v15 + 1;
      int64_t v11 = v9 - (v15 + 1);
      if (v11 < v5) {
        goto LABEL_37;
      }
    }
    if (v15 != v9)
    {
      uint64_t v16 = v15 - v7;
      if (v15 - v7 != -1)
      {
LABEL_22:
        size_t v17 = v16 + v5;
        if (v8 >= v17) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = v8;
        }
        if (v18 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_183;
        }
        if (v18 >= 0x17)
        {
          uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17) {
            uint64_t v21 = v18 | 7;
          }
          uint64_t v22 = v21 + 1;
          p_dst = (long long *)operator new(v21 + 1);
          *((void *)&__dst + 1) = v18;
          unint64_t v94 = v22 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v94) = v18;
          p_dst = &__dst;
          if (!v18)
          {
            LOBYTE(__dst) = 0;
            if ((a2[23] & 0x80000000) == 0)
            {
LABEL_29:
              *(_OWORD *)a2 = __dst;
              unint64_t v20 = v94;
              *((void *)a2 + 2) = v94;
              size_t v3 = HIBYTE(v20);
              uint64_t v6 = *(char **)a2;
              goto LABEL_37;
            }
LABEL_34:
            operator delete(*(void **)a2);
            goto LABEL_29;
          }
        }
        memmove(p_dst, v7, v18);
        *((unsigned char *)p_dst + v18) = 0;
        if ((a2[23] & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_37:
  if (byte_25C5697 >= 0) {
    uint64_t v23 = &qword_25C5680;
  }
  else {
    uint64_t v23 = (uint64_t *)qword_25C5680;
  }
  if (byte_25C5697 >= 0) {
    int64_t v24 = byte_25C5697;
  }
  else {
    int64_t v24 = *(void *)&byte_25C5688;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v25 = a2;
  }
  else {
    uint64_t v25 = v6;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v26 = v3;
  }
  else {
    size_t v26 = *((void *)a2 + 1);
  }
  if (!v24)
  {
    uint64_t v34 = 0;
    goto LABEL_58;
  }
  if ((uint64_t)v26 >= v24)
  {
    uint64_t v27 = &v25[v26];
    int v28 = *(char *)v23;
    int64_t v29 = v26;
    int v30 = v25;
    while (1)
    {
      int64_t v31 = v29 - v24;
      if (v31 == -1) {
        goto LABEL_73;
      }
      uint64_t v32 = (char *)memchr(v30, v28, v31 + 1);
      if (!v32) {
        goto LABEL_73;
      }
      uint64_t v33 = v32;
      if (!memcmp(v32, v23, v24)) {
        break;
      }
      int v30 = v33 + 1;
      int64_t v29 = v27 - (v33 + 1);
      if (v29 < v24) {
        goto LABEL_73;
      }
    }
    if (v33 != v27)
    {
      uint64_t v34 = v33 - v25;
      if (v33 - v25 != -1)
      {
LABEL_58:
        size_t v35 = v34 + v24;
        if (v26 >= v35) {
          size_t v36 = v35;
        }
        else {
          size_t v36 = v26;
        }
        if (v36 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_183;
        }
        if (v36 >= 0x17)
        {
          uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17) {
            uint64_t v39 = v36 | 7;
          }
          uint64_t v40 = v39 + 1;
          int v37 = (long long *)operator new(v39 + 1);
          *((void *)&__dst + 1) = v36;
          unint64_t v94 = v40 | 0x8000000000000000;
          *(void *)&long long __dst = v37;
        }
        else
        {
          HIBYTE(v94) = v36;
          int v37 = &__dst;
          if (!v36)
          {
            LOBYTE(__dst) = 0;
            if ((a2[23] & 0x80000000) == 0)
            {
LABEL_65:
              *(_OWORD *)a2 = __dst;
              unint64_t v38 = v94;
              *((void *)a2 + 2) = v94;
              size_t v3 = HIBYTE(v38);
              uint64_t v6 = *(char **)a2;
              goto LABEL_73;
            }
LABEL_70:
            operator delete(*(void **)a2);
            goto LABEL_65;
          }
        }
        memmove(v37, v25, v36);
        *((unsigned char *)v37 + v36) = 0;
        if ((a2[23] & 0x80000000) == 0) {
          goto LABEL_65;
        }
        goto LABEL_70;
      }
    }
  }
LABEL_73:
  if (byte_25C5457 >= 0) {
    uint64_t v41 = &xmmword_25C5440;
  }
  else {
    uint64_t v41 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v42 = byte_25C5457;
  }
  else {
    int64_t v42 = *((void *)&xmmword_25C5440 + 1);
  }
  if ((v3 & 0x80u) == 0) {
    unsigned __int8 v43 = a2;
  }
  else {
    unsigned __int8 v43 = v6;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v44 = v3;
  }
  else {
    size_t v44 = *((void *)a2 + 1);
  }
  if (!v42)
  {
    uint64_t v52 = 0;
    goto LABEL_94;
  }
  if ((uint64_t)v44 >= v42)
  {
    std::string v45 = &v43[v44];
    int v46 = *(char *)v41;
    int64_t v47 = v44;
    std::string v48 = v43;
    while (1)
    {
      int64_t v49 = v47 - v42;
      if (v49 == -1) {
        goto LABEL_109;
      }
      uint64_t v50 = (char *)memchr(v48, v46, v49 + 1);
      if (!v50) {
        goto LABEL_109;
      }
      char v51 = v50;
      if (!memcmp(v50, v41, v42)) {
        break;
      }
      std::string v48 = v51 + 1;
      int64_t v47 = v45 - (v51 + 1);
      if (v47 < v42) {
        goto LABEL_109;
      }
    }
    if (v51 != v45)
    {
      uint64_t v52 = v51 - v43;
      if (v51 - v43 != -1)
      {
LABEL_94:
        size_t v53 = v52 + v42;
        if (v44 >= v53) {
          size_t v54 = v53;
        }
        else {
          size_t v54 = v44;
        }
        if (v54 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_183;
        }
        if (v54 >= 0x17)
        {
          uint64_t v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17) {
            uint64_t v57 = v54 | 7;
          }
          uint64_t v58 = v57 + 1;
          uint64_t v55 = (long long *)operator new(v57 + 1);
          *((void *)&__dst + 1) = v54;
          unint64_t v94 = v58 | 0x8000000000000000;
          *(void *)&long long __dst = v55;
        }
        else
        {
          HIBYTE(v94) = v54;
          uint64_t v55 = &__dst;
          if (!v54)
          {
            LOBYTE(__dst) = 0;
            if ((a2[23] & 0x80000000) == 0)
            {
LABEL_101:
              *(_OWORD *)a2 = __dst;
              unint64_t v56 = v94;
              *((void *)a2 + 2) = v94;
              size_t v3 = HIBYTE(v56);
              uint64_t v6 = *(char **)a2;
              goto LABEL_109;
            }
LABEL_106:
            operator delete(*(void **)a2);
            goto LABEL_101;
          }
        }
        memmove(v55, v43, v54);
        *((unsigned char *)v55 + v54) = 0;
        if ((a2[23] & 0x80000000) == 0) {
          goto LABEL_101;
        }
        goto LABEL_106;
      }
    }
  }
LABEL_109:
  if (byte_25C546F >= 0) {
    char v59 = &qword_25C5458;
  }
  else {
    char v59 = (uint64_t *)qword_25C5458;
  }
  if (byte_25C546F >= 0) {
    int64_t v60 = byte_25C546F;
  }
  else {
    int64_t v60 = qword_25C5460;
  }
  if ((v3 & 0x80u) == 0) {
    long long v61 = a2;
  }
  else {
    long long v61 = v6;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v62 = v3;
  }
  else {
    size_t v62 = *((void *)a2 + 1);
  }
  if (!v60)
  {
    uint64_t v70 = 0;
    goto LABEL_130;
  }
  if ((uint64_t)v62 >= v60)
  {
    unint64_t v63 = &v61[v62];
    int v64 = *(char *)v59;
    int64_t v65 = v62;
    std::string::size_type v66 = v61;
    while (1)
    {
      int64_t v67 = v65 - v60;
      if (v67 == -1) {
        goto LABEL_145;
      }
      int v68 = (char *)memchr(v66, v64, v67 + 1);
      if (!v68) {
        goto LABEL_145;
      }
      uint64_t v69 = v68;
      if (!memcmp(v68, v59, v60)) {
        break;
      }
      std::string::size_type v66 = v69 + 1;
      int64_t v65 = v63 - (v69 + 1);
      if (v65 < v60) {
        goto LABEL_145;
      }
    }
    if (v69 != v63)
    {
      uint64_t v70 = v69 - v61;
      if (v69 - v61 != -1)
      {
LABEL_130:
        size_t v71 = v70 + v60;
        if (v62 >= v71) {
          size_t v72 = v71;
        }
        else {
          size_t v72 = v62;
        }
        if (v72 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_183;
        }
        if (v72 >= 0x17)
        {
          uint64_t v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17) {
            uint64_t v75 = v72 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v73 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v72;
          unint64_t v94 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v73;
        }
        else
        {
          HIBYTE(v94) = v72;
          uint64_t v73 = &__dst;
          if (!v72)
          {
            LOBYTE(__dst) = 0;
            if ((a2[23] & 0x80000000) == 0)
            {
LABEL_137:
              *(_OWORD *)a2 = __dst;
              unint64_t v74 = v94;
              *((void *)a2 + 2) = v94;
              size_t v3 = HIBYTE(v74);
              uint64_t v6 = *(char **)a2;
              goto LABEL_145;
            }
LABEL_142:
            operator delete(*(void **)a2);
            goto LABEL_137;
          }
        }
        memmove(v73, v61, v72);
        *((unsigned char *)v73 + v72) = 0;
        if ((a2[23] & 0x80000000) == 0) {
          goto LABEL_137;
        }
        goto LABEL_142;
      }
    }
  }
LABEL_145:
  if (byte_25C54CF >= 0) {
    char v77 = &qword_25C54B8;
  }
  else {
    char v77 = (uint64_t *)qword_25C54B8;
  }
  if (byte_25C54CF >= 0) {
    int64_t v78 = byte_25C54CF;
  }
  else {
    int64_t v78 = *(void *)&word_25C54C0;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v79 = a2;
  }
  else {
    uint64_t v79 = v6;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v3 = v3;
  }
  else {
    size_t v3 = *((void *)a2 + 1);
  }
  if (!v78)
  {
    uint64_t v87 = 0;
    goto LABEL_166;
  }
  if ((uint64_t)v3 >= v78)
  {
    int64_t v80 = &v79[v3];
    int v81 = *(char *)v77;
    int64_t v82 = v3;
    std::string::size_type v83 = v79;
    while (1)
    {
      int64_t v84 = v82 - v78;
      if (v84 == -1) {
        return;
      }
      int v85 = (char *)memchr(v83, v81, v84 + 1);
      if (!v85) {
        return;
      }
      int64_t v86 = v85;
      if (!memcmp(v85, v77, v78)) {
        break;
      }
      std::string::size_type v83 = v86 + 1;
      int64_t v82 = v80 - (v86 + 1);
      if (v82 < v78) {
        return;
      }
    }
    if (v86 != v80)
    {
      uint64_t v87 = v86 - v79;
      if (v86 - v79 != -1)
      {
LABEL_166:
        size_t v88 = v87 + v78;
        if (v3 >= v88) {
          size_t v89 = v88;
        }
        else {
          size_t v89 = v3;
        }
        if (v89 <= 0x7FFFFFFFFFFFFFF7)
        {
          if (v89 >= 0x17)
          {
            uint64_t v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v89 | 7) != 0x17) {
              uint64_t v91 = v89 | 7;
            }
            uint64_t v92 = v91 + 1;
            uint64_t v90 = (long long *)operator new(v91 + 1);
            *((void *)&__dst + 1) = v89;
            unint64_t v94 = v92 | 0x8000000000000000;
            *(void *)&long long __dst = v90;
          }
          else
          {
            HIBYTE(v94) = v89;
            uint64_t v90 = &__dst;
            if (!v89)
            {
              LOBYTE(__dst) = 0;
              if ((a2[23] & 0x80000000) == 0)
              {
LABEL_173:
                *(_OWORD *)a2 = __dst;
                *((void *)a2 + 2) = v94;
                return;
              }
LABEL_179:
              operator delete(*(void **)a2);
              goto LABEL_173;
            }
          }
          memmove(v90, v79, v89);
          *((unsigned char *)v90 + v89) = 0;
          if ((a2[23] & 0x80000000) == 0) {
            goto LABEL_173;
          }
          goto LABEL_179;
        }
LABEL_183:
        sub_188D690();
      }
    }
  }
}

double sub_80138C(uint64_t a1, char *a2)
{
  sub_800C3C(a1, a2);
  LODWORD(v3) = a2[23];
  int v4 = *(void **)a2;
  if ((v3 & 0x80000000) == 0) {
    int64_t v5 = a2;
  }
  else {
    int64_t v5 = *(char **)a2;
  }
  if (byte_25C585F >= 0) {
    uint64_t v6 = &xmmword_25C5848;
  }
  else {
    uint64_t v6 = (long long *)xmmword_25C5848;
  }
  if (byte_25C585F >= 0) {
    int64_t v7 = byte_25C585F;
  }
  else {
    int64_t v7 = *((void *)&xmmword_25C5848 + 1);
  }
  if (v7)
  {
    int64_t v8 = (v3 & 0x80000000) == 0 ? a2[23] : *((void *)a2 + 1);
    if (v8 < v7) {
      goto LABEL_15;
    }
    int64_t v11 = &v5[v8];
    int v12 = *(char *)v6;
    int64_t v13 = v8;
    uint64_t v14 = v5;
    while (1)
    {
      int64_t v15 = v13 - v7;
      if (v15 == -1) {
        goto LABEL_15;
      }
      uint64_t v16 = (char *)memchr(v14, v12, v15 + 1);
      if (!v16) {
        goto LABEL_15;
      }
      size_t v17 = v16;
      if (!memcmp(v16, v6, v7)) {
        break;
      }
      uint64_t v14 = v17 + 1;
      int64_t v13 = v11 - (v17 + 1);
      if (v13 < v7) {
        goto LABEL_15;
      }
    }
    if (v17 == v11 || v17 - v5 == -1)
    {
LABEL_15:
      unint64_t v9 = v8 + v7;
      if ((unint64_t)(v8 + v7) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_60;
      }
      if (v9 > 0x16)
      {
        uint64_t v18 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v18 = v9 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_dst = (long long *)operator new(v18 + 1);
        *((void *)&__dst + 1) = v8 + v7;
        unint64_t v33 = v19 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
        if (!v8) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v33 = 0;
        long long __dst = 0uLL;
        p_dst = &__dst;
        HIBYTE(v33) = v8 + v7;
        if (!v8) {
          goto LABEL_29;
        }
      }
      memmove(p_dst, v5, v8);
LABEL_29:
      memmove((char *)p_dst + v8, v6, v7);
      *((unsigned char *)p_dst + v8 + v7) = 0;
      if ((v3 & 0x80000000) != 0) {
        operator delete(v4);
      }
      *(_OWORD *)a2 = __dst;
      unint64_t v20 = v33;
      *((void *)a2 + 2) = v33;
      unint64_t v3 = HIBYTE(v20);
    }
  }
  int v21 = byte_25C4F77;
  if (byte_25C4F77 >= 0) {
    size_t v22 = byte_25C4F77;
  }
  else {
    size_t v22 = *((void *)&xmmword_25C4F60 + 1);
  }
  if ((v3 & 0x80u) == 0) {
    size_t v23 = v3;
  }
  else {
    size_t v23 = *((void *)a2 + 1);
  }
  unint64_t v24 = v23 + v22;
  if (v23 + v22 > 0x7FFFFFFFFFFFFFF7) {
LABEL_60:
  }
    sub_188D690();
  if (v24 <= 0x16)
  {
    unint64_t v33 = 0;
    long long __dst = 0uLL;
    uint64_t v25 = &__dst;
    HIBYTE(v33) = v23 + v22;
    if (!v22) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  uint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17) {
    uint64_t v26 = v24 | 7;
  }
  uint64_t v27 = v26 + 1;
  uint64_t v25 = (long long *)operator new(v26 + 1);
  *((void *)&__dst + 1) = v23 + v22;
  unint64_t v33 = v27 | 0x8000000000000000;
  *(void *)&long long __dst = v25;
  if (v22)
  {
LABEL_45:
    if (v21 >= 0) {
      int v28 = &xmmword_25C4F60;
    }
    else {
      int v28 = (long long *)xmmword_25C4F60;
    }
    memmove(v25, v28, v22);
  }
LABEL_49:
  int64_t v29 = (char *)v25 + v22;
  if (v23)
  {
    if ((v3 & 0x80u) == 0) {
      int v30 = a2;
    }
    else {
      int v30 = *(const void **)a2;
    }
    memmove(v29, v30, v23);
  }
  v29[v23] = 0;
  if ((v3 & 0x80) != 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *((void *)a2 + 2) = v33;
  return result;
}

void sub_801654(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 1859))
  {
    if (*(_DWORD *)(a1 + 1848) == 4)
    {
      int64_t v7 = &xmmword_25C5BA8;
      if ((byte_25C5BBF & 0x80000000) == 0)
      {
LABEL_4:
        long long __dst = *v7;
        uint64_t v49 = *((void *)v7 + 2);
        goto LABEL_9;
      }
    }
    else
    {
      BOOL v9 = sub_6F2FD8(a1 + 760);
      uint64_t v10 = 1344;
      if (!v9 | a4) {
        uint64_t v10 = 1320;
      }
      int64_t v7 = (long long *)((char *)&xmmword_25C5650 + v10);
      if ((*((char *)v7 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    sub_4200(&__dst, *(void **)v7, *((void *)v7 + 1));
LABEL_9:
    if (a3) {
      uint64_t v11 = 3;
    }
    else {
      uint64_t v11 = 10;
    }
    sub_6352AC((uint64_t)&v38, (uint64_t)&__dst);
    int v12 = (std::__shared_weak_count *)operator new(0x80uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v50, (uint64_t)&v12[1], a2);
    size_t v36 = &v12[1].__vftable;
    int v37 = v12;
    sub_6370D4(&v42, &v38, v11, &v36);
    sub_63DAA4(a2, (uint64_t)&v42);
    int64_t v13 = v47;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = v46;
    if (v46)
    {
      do
      {
        int64_t v15 = (void *)*v14;
        sub_4F4B48((uint64_t)(v14 + 2));
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = __p;
    std::string __p = 0;
    if (v16) {
      operator delete(v16);
    }
    size_t v17 = (void **)v42;
    if (v42)
    {
      uint64_t v18 = v43;
      uint64_t v19 = v42;
      if (v43 != v42)
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 3;
        }
        while (v18 != v17);
        uint64_t v19 = v42;
      }
      unsigned __int8 v43 = v17;
      operator delete(v19);
    }
    unint64_t v20 = v37;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    int v21 = v41;
    if (v41)
    {
      do
      {
        size_t v22 = (void *)*v21;
        sub_4F4B48((uint64_t)(v21 + 2));
        operator delete(v21);
        int v21 = v22;
      }
      while (v22);
    }
    size_t v23 = v40;
    uint64_t v40 = 0;
    if (v23) {
      operator delete(v23);
    }
    unint64_t v24 = (void **)v38;
    if (v38)
    {
      uint64_t v25 = v39;
      uint64_t v26 = v38;
      if (v39 != v38)
      {
        do
        {
          if (*((char *)v25 - 1) < 0) {
            operator delete(*(v25 - 3));
          }
          v25 -= 3;
        }
        while (v25 != v24);
        uint64_t v26 = v38;
      }
      uint64_t v39 = v24;
      operator delete(v26);
    }
    uint64_t v27 = HIBYTE(v49);
    char v28 = HIBYTE(v49);
    if (v49 >= 0) {
      uint64_t v29 = HIBYTE(v49);
    }
    else {
      uint64_t v29 = *((void *)&__dst + 1);
    }
    uint64_t v30 = *((void *)&xmmword_25C5B90 + 1);
    if (byte_25C5BA7 >= 0) {
      uint64_t v30 = byte_25C5BA7;
    }
    if (v29 != v30) {
      goto LABEL_63;
    }
    if (byte_25C5BA7 >= 0) {
      int64_t v31 = &xmmword_25C5B90;
    }
    else {
      int64_t v31 = (long long *)xmmword_25C5B90;
    }
    if (SHIBYTE(v49) < 0)
    {
      if (memcmp((const void *)__dst, v31, *((size_t *)&__dst + 1))) {
        goto LABEL_65;
      }
    }
    else if (HIBYTE(v49))
    {
      p_dst = &__dst;
      while (*(unsigned __int8 *)p_dst == *(unsigned __int8 *)v31)
      {
        p_dst = (long long *)((char *)p_dst + 1);
        int64_t v31 = (long long *)((char *)v31 + 1);
        if (!--v27) {
          goto LABEL_58;
        }
      }
LABEL_63:
      if ((v28 & 0x80) == 0) {
        return;
      }
LABEL_65:
      operator delete((void *)__dst);
      return;
    }
LABEL_58:
    sub_7F6E60(a1 + 760, (uint64_t)&v42);
    sub_637314(a2, (uint64_t)&v42);
    unint64_t v33 = v44;
    if (v44)
    {
      do
      {
        uint64_t v34 = (void *)*v33;
        sub_4F4B48((uint64_t)(v33 + 2));
        operator delete(v33);
        unint64_t v33 = v34;
      }
      while (v34);
    }
    size_t v35 = v42;
    int64_t v42 = 0;
    if (v35) {
      operator delete(v35);
    }
    char v28 = HIBYTE(v49);
    goto LABEL_63;
  }
}

void sub_801A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_4DD068((uint64_t)va);
  if (*(char *)(v12 - 57) < 0) {
    operator delete(*(void **)(v12 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_801A7C(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(unsigned char *)(a1 + 1860))
  {
    sub_637D5C(a2, (uint64_t)__p);
    int64_t v5 = (void **)__p[0];
    uint64_t v6 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
      for (uint64_t i = (char *)__p[0]; i != v6; i += 24)
      {
        if (i[23] < 0)
        {
          BOOL v9 = *(char **)i;
          uint64_t v8 = *((void *)i + 1);
          if (v8 >= 5)
          {
LABEL_9:
            uint64_t v10 = &v9[v8];
            uint64_t v11 = v9;
            do
            {
              uint64_t v12 = (char *)memchr(v11, 67, v8 - 4);
              if (!v12) {
                break;
              }
              if (*(_DWORD *)v12 == 1936683587 && v12[4] == 115)
              {
                if (v12 == v10 || v12 - v9 == -1) {
                  break;
                }
                if (a3) {
                  int v14 = 2;
                }
                else {
                  int v14 = sub_637D84((uint64_t)a2);
                }
                sub_63733C((uint64_t)a2, v14);
                int v15 = 0;
                int64_t v5 = (void **)__p[0];
                if (__p[0]) {
                  goto LABEL_22;
                }
                goto LABEL_29;
              }
              uint64_t v11 = v12 + 1;
              uint64_t v8 = v10 - (unsigned char *)v11;
            }
            while (v10 - (unsigned char *)v11 >= 5);
          }
        }
        else
        {
          uint64_t v8 = i[23];
          BOOL v9 = i;
          if ((unint64_t)v8 >= 5) {
            goto LABEL_9;
          }
        }
      }
    }
    int v15 = 1;
    if (v5)
    {
LABEL_22:
      uint64_t v16 = (void **)__p[1];
      size_t v17 = v5;
      if (__p[1] != v5)
      {
        do
        {
          if (*((char *)v16 - 1) < 0) {
            operator delete(*(v16 - 3));
          }
          v16 -= 3;
        }
        while (v16 != v5);
        size_t v17 = (void **)__p[0];
      }
      __p[1] = v5;
      operator delete(v17);
    }
LABEL_29:
    if (v15)
    {
      uint64_t v18 = 1200;
      if (a3) {
        uint64_t v18 = 1224;
      }
      uint64_t v19 = &qword_25C5B18;
      if (!a3) {
        uint64_t v19 = &qword_25C5B00;
      }
      unint64_t v20 = (char *)&unk_25C5B17;
      if (a3) {
        unint64_t v20 = (char *)&xmmword_25C5B20 + 15;
      }
      if (*v20 < 0)
      {
        int v21 = *(void **)((char *)&xmmword_25C5650 + v18);
        uint64_t v22 = 1200;
        if (a3) {
          uint64_t v22 = 1224;
        }
        sub_4200(__dst, v21, *(void *)((char *)&xmmword_25C5650 + v22 + 8));
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)v19;
        uint64_t v37 = v19[2];
      }
      if (SHIBYTE(v37) < 0)
      {
        sub_4200(__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__dst;
        uint64_t v40 = v37;
      }
      sub_28C774(&v34, (uint64_t)__p, 1uLL);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
      size_t v23 = (std::__shared_weak_count *)operator new(0x80uLL);
      v23->__shared_owners_ = 0;
      v23->__shared_weak_owners_ = 0;
      v23->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
      sub_59540C((uint64_t)&v38, (uint64_t)&v23[1], (uint64_t)a2);
      sub_637578((int)__p);
      sub_63DAA4((uint64_t)a2, (uint64_t)__p);
      unint64_t v24 = v43;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      uint64_t v25 = v42;
      if (v42)
      {
        do
        {
          uint64_t v26 = (void *)*v25;
          sub_4F4B48((uint64_t)(v25 + 2));
          operator delete(v25);
          uint64_t v25 = v26;
        }
        while (v26);
      }
      uint64_t v27 = v41;
      uint64_t v41 = 0;
      if (v27) {
        operator delete(v27);
      }
      char v28 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v29 = (void **)__p[1];
        uint64_t v30 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v29 - 1) < 0) {
              operator delete(*(v29 - 3));
            }
            v29 -= 3;
          }
          while (v29 != v28);
          uint64_t v30 = __p[0];
        }
        __p[1] = v28;
        operator delete(v30);
      }
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      int64_t v31 = (void **)v34;
      if (v34)
      {
        uint64_t v32 = v35;
        unint64_t v33 = v34;
        if (v35 != v34)
        {
          do
          {
            if (*((char *)v32 - 1) < 0) {
              operator delete(*(v32 - 3));
            }
            v32 -= 3;
          }
          while (v32 != v31);
          unint64_t v33 = v34;
        }
        size_t v35 = v31;
        operator delete(v33);
      }
      if (SHIBYTE(v37) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
}

void sub_801F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_801F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_801F98(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  *(void *)a1 = off_2439D28;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v89 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(unsigned char *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  size_t v88 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(unsigned char *)(a1 + 144) = 1;
  sub_6F30A4(a1 + 152);
  sub_6F30A4(a1 + 304);
  sub_6F30A4(a1 + 456);
  sub_6F30A4(a1 + 608);
  sub_6F30A4(a1 + 760);
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 1008) = -1;
  *(_DWORD *)(a1 + 1016) = 0x7FFFFFFF;
  *(void *)(a1 + 1024) = -1;
  *(void *)(a1 + 1032) = -1;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1048) = 0;
  *(_DWORD *)(a1 + 1056) = -1935635296;
  *(void *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1071) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  *(void *)(a1 + 1096) = 0;
  *(unsigned char *)(a1 + 1108) = 100;
  *(void *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(unsigned char *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(void *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1320) = xmmword_20B8E30;
  *(void *)(a1 + 1336) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1352) = 0;
  *(void *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 1368) = 0;
  *(void *)(a1 + 1360) = 0;
  *(unsigned char *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 1380) = 0u;
  *(_OWORD *)(a1 + 1396) = 0u;
  sub_5F3B34(a1 + 1416);
  *(_DWORD *)(a1 + 1608) = -1;
  *(_DWORD *)(a1 + 1616) = -1;
  *(_DWORD *)(a1 + 1619) = -1;
  *(void *)(a1 + 1623) = 0;
  *(void *)(a1 + 1639) = 0;
  *(void *)(a1 + 1631) = 0;
  *(_WORD *)(a1 + 1647) = 0;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1672) = 0;
  *(void *)(a1 + 1664) = 0;
  *(unsigned char *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1688) = -1;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1702) = 0;
  *(_DWORD *)(a1 + 1712) = 0x7FFFFFFF;
  *(void *)(a1 + 1728) = 0;
  *(_DWORD *)(a1 + 1720) = 0x7FFFFFFF;
  *(void *)(a1 + 1724) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 1736) = 0;
  *(void *)(a1 + 1744) = 0x8000000080000000;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  uint64_t v87 = (_DWORD *)(a1 + 1688);
  *(unsigned char *)(a1 + 1800) = 0;
  *(_DWORD *)(a1 + 1804) = 0x7FFFFFFF;
  *(void *)(a1 + 1808) = 0x8000000080000000;
  *(_DWORD *)(a1 + 1824) = -1;
  *(void *)(a1 + 1832) = 0;
  *(void *)(a1 + 1840) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1848) = *(_DWORD *)(sub_4A5E10((void *)(a4 + 1064), a5) + 160);
  *(unsigned char *)(a1 + 1852) = 0;
  uint64_t v12 = (_OWORD *)(a1 + 1864);
  *(_DWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1859) = 0;
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  *(_OWORD *)(a1 + 1864) = v13;
  *(_OWORD *)(a1 + 1880) = v13;
  *(_OWORD *)(a1 + 1896) = v13;
  *(void *)(a1 + 1912) = -1;
  *(_DWORD *)(a1 + 1920) = 0;
  *(void *)(a1 + 1928) = -1;
  *(_DWORD *)(a1 + 1936) = 0;
  *(void *)(a1 + 1944) = 0;
  *(void *)(a1 + 1952) = a2;
  *(void *)(a1 + 1960) = a3;
  *(void *)(a1 + 1968) = a4 + 7376;
  int v14 = (uint64_t *)(a1 + 1976);
  *(void *)(a1 + 1976) = 0;
  *(void *)(a1 + 1992) = 0;
  *(void *)(a1 + 1984) = 0;
  *(unsigned char *)(a1 + 2000) = 1;
  *(_DWORD *)(a1 + 2004) = 0;
  *(void *)(a1 + 2008) = -1;
  *(void *)(a1 + 2016) = -1;
  *(void *)(a1 + 2024) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(void *)(a1 + 2080) = 0;
  *(void *)(a1 + 2088) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 2096) = 0;
  *(void *)(a1 + 2118) = 0;
  *(void *)(a1 + 2104) = 0;
  *(void *)(a1 + 2112) = 0;
  *(_DWORD *)(a1 + 2128) = a6 + 1;
  uint64_t v15 = *(void *)(a4 + 1064);
  uint64_t v16 = (unsigned __int8 *)(v15 + 2400 * a5);
  *(unsigned char *)(a1 + 1853) = v16[560];
  *(unsigned char *)(a1 + 1854) = v16[892];
  int v17 = v16[328];
  if ((v17 & 0xFE) == 4) {
    int v17 = *(unsigned __int8 *)(a3 + 1176);
  }
  *(unsigned char *)(a1 + 1855) = v17;
  if (v17 == 3 || (BOOL v18 = 0, !v17))
  {
    BOOL v19 = *(void *)(v15 + 2400 * a5 + 568) != -1
       || *(void *)(v15 + 2400 * a5 + 576) != -1
       || *(void *)(v15 + 2400 * a5 + 584) != -1
       || *(void *)(v15 + 2400 * a5 + 592) != -1
       || *(void *)(v15 + 2400 * a5 + 600) != -1
       || *(void *)(v15 + 2400 * a5 + 608) != -1
       || *(void *)(v15 + 2400 * a5 + 616) != -1;
    BOOL v18 = !v19;
  }
  unint64_t v20 = (_OWORD *)(a1 + 2000);
  *(unsigned char *)(a1 + 1856) = v18;
  uint64_t v21 = v15 + 2400 * a5;
  *(unsigned char *)(a1 + 1857) = *(unsigned char *)(v21 + 304);
  *(unsigned char *)(a1 + 1861) = *(unsigned char *)(v21 + 680);
  *(unsigned char *)(a1 + 1862) = *(unsigned char *)(v21 + 320);
  long long v23 = *(_OWORD *)(v21 + 600);
  long long v22 = *(_OWORD *)(v21 + 616);
  long long v24 = *(_OWORD *)(v21 + 584);
  *(_OWORD *)(a1 + 1924) = *(_OWORD *)(v21 + 628);
  *(_OWORD *)(a1 + 1896) = v23;
  *(_OWORD *)(a1 + 1912) = v22;
  *(_OWORD *)(a1 + 1880) = v24;
  *uint64_t v12 = *(_OWORD *)(v21 + 568);
  *(void *)(a1 + 1944) = *(void *)(v21 + 648);
  *(unsigned char *)(a1 + 2125) = *(unsigned char *)(v21 + 2226);
  if (v14 == (uint64_t *)(v21 + 1872))
  {
    long long v27 = *(_OWORD *)(v15 + 2400 * a5 + 1912);
    *unint64_t v20 = *(_OWORD *)(v15 + 2400 * a5 + 1896);
    *(_OWORD *)(a1 + 2016) = v27;
  }
  else
  {
    sub_5A09C0(v14, *(void *)(v21 + 1872), *(void *)(v21 + 1880), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v21 + 1880) - *(void *)(v21 + 1872)) >> 3));
    uint64_t v25 = v15 + 2400 * a5;
    long long v26 = *(_OWORD *)(v25 + 1912);
    *unint64_t v20 = *(_OWORD *)(v25 + 1896);
    *(_OWORD *)(a1 + 2016) = v26;
    sub_5A0D34((uint64_t *)(a1 + 2032), *(void *)(v25 + 1928), *(void *)(v25 + 1936), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v25 + 1936) - *(void *)(v25 + 1928)) >> 4));
    int v17 = *(unsigned __int8 *)(a1 + 1855);
  }
  char v28 = (_OWORD *)(v15 + 2400 * a5);
  long long v29 = v28[122];
  long long v30 = v28[123];
  *(_OWORD *)(a1 + 2081) = *(_OWORD *)((char *)v28 + 1977);
  *(_OWORD *)(a1 + 2056) = v29;
  *(_OWORD *)(a1 + 2072) = v30;
  *(_OWORD *)(a1 + 2104) = v28[125];
  if (v17 == 2 && (unsigned int v31 = *(_DWORD *)(v15 + 2400 * a5 + 160), v31 <= 0x23))
  {
    unint64_t v32 = (0x804000010uLL >> v31) & 1;
    if (!*(unsigned char *)(*(void *)(a1 + 1960) + 1405)) {
      goto LABEL_34;
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    if (!*(unsigned char *)(*(void *)(a1 + 1960) + 1405))
    {
LABEL_34:
      *(unsigned char *)(a1 + 1858) = 0;
LABEL_35:
      BOOL v34 = 0;
      *(unsigned char *)(a1 + 1859) = 0;
      goto LABEL_36;
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 1952) + 1930)) {
    BOOL v33 = *(unsigned char *)(v21 + 304) == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (v33) {
    LOBYTE(v32) = 1;
  }
  if ((v32 & 1) != 0
    || *(void *)v12 != -1
    || *(void *)(a1 + 1872) != -1
    || *(void *)(a1 + 1880) != -1
    || *(void *)(a1 + 1888) != -1
    || *(void *)(a1 + 1896) != -1
    || *(void *)(a1 + 1904) != -1)
  {
    goto LABEL_34;
  }
  uint64_t v85 = *(void *)(a1 + 1912);
  *(unsigned char *)(a1 + 1858) = v85 == -1;
  if (v85 != -1) {
    goto LABEL_35;
  }
  int v86 = *(unsigned __int8 *)(a1 + 1856);
  *(unsigned char *)(a1 + 1859) = v86;
  BOOL v34 = v86 == 0;
LABEL_36:
  *(unsigned char *)(a1 + 1860) = v34;
  sub_802D48(a1, v15 + 2400 * a5);
  size_t v35 = (const std::string *)sub_64F450(a4);
  std::string::operator=((std::string *)(a1 + 984), v35);
  _DWORD *v87 = *(_DWORD *)(a4 + 288);
  uint64_t v36 = *(void *)(a4 + 296);
  *(void *)(a1 + 1702) = *(void *)(a4 + 302);
  *(void *)(a1 + 1696) = v36;
  long long v37 = *(_OWORD *)(a4 + 312);
  long long v38 = *(_OWORD *)(a4 + 328);
  *(void *)(a1 + 1744) = *(void *)(a4 + 344);
  *(_OWORD *)(a1 + 1712) = v37;
  *(_OWORD *)(a1 + 1728) = v38;
  if (v87 != (_DWORD *)(a4 + 288))
  {
    sub_472BC8((void *)(a1 + 1752), *(char **)(a4 + 352), *(char **)(a4 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 360) - *(void *)(a4 + 352)) >> 2));
    sub_472BC8((void *)(a1 + 1776), *(char **)(a4 + 376), *(char **)(a4 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 384) - *(void *)(a4 + 376)) >> 2));
    *(_OWORD *)(a1 + 1800) = *(_OWORD *)(a4 + 400);
    unsigned int v39 = *(_DWORD *)(a1 + 1824);
    int v40 = *(_DWORD *)(a4 + 424);
    if (v39 == v40)
    {
      if (v39 <= 1) {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
      }
    }
    else
    {
      if (v40 == 1)
      {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
        int v40 = *(_DWORD *)(a4 + 424);
      }
      else if (!v40)
      {
        *(void *)(a1 + 1816) = *(void *)(a4 + 416);
      }
      *(_DWORD *)(a1 + 1824) = v40;
    }
  }
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a4 + 432);
  sub_5A303C(a1 + 1008, a4 + 10880);
  if (a1 + 1008 != a4 + 10880) {
    sub_4AD448((void *)(a1 + 1384), *(char **)(a4 + 11256), *(char **)(a4 + 11264), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a4 + 11264) - *(void *)(a4 + 11256)) >> 3));
  }
  *(_DWORD *)(a1 + 1408) = *(_DWORD *)(a4 + 11280);
  sub_52FD00(a1 + 1416, a4 + 11288);
  sub_4F39B8(a1 + 1576, (std::string *)(a4 + 11448));
  *(void *)(a1 + 1616) = *(void *)(a4 + 11488);
  std::string::operator=((std::string *)(a1 + 1624), (const std::string *)(a4 + 11496));
  *(unsigned char *)(a1 + 1648) = *(unsigned char *)(a4 + 11520);
  std::string::operator=((std::string *)(a1 + 1656), (const std::string *)(a4 + 11528));
  *(unsigned char *)(a1 + 1680) = *(unsigned char *)(a4 + 11552);
  sub_803360(a1, (uint64_t)v92);
  uint64_t v41 = *(long long **)v89;
  if (*(void *)v89)
  {
    int64_t v42 = *(long long **)(a1 + 16);
    unsigned __int8 v43 = *(long long **)v89;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*((void **)v42 - 3));
        }
        int64_t v42 = (long long *)((char *)v42 - 24);
      }
      while (v42 != v41);
      unsigned __int8 v43 = *(long long **)v89;
    }
    *(void *)(a1 + 16) = v41;
    operator delete(v43);
    *(void *)uint64_t v89 = 0;
    *(void *)(v89 + 8) = 0;
    *(void *)(v89 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v92;
  *(void *)(a1 + 24) = v93;
  v92[1] = 0;
  uint64_t v93 = 0;
  v92[0] = 0;
  sub_52EF44(a1 + 32, (uint64_t *)__p);
  *(unsigned char *)(a1 + 72) = v96;
  size_t v44 = v95;
  if (v95)
  {
    do
    {
      std::string v45 = (void *)*v44;
      sub_4F4B48((uint64_t)(v44 + 2));
      operator delete(v44);
      size_t v44 = v45;
    }
    while (v45);
  }
  int v46 = __p[0];
  __p[0] = 0;
  if (v46) {
    operator delete(v46);
  }
  int64_t v47 = (void **)v92[0];
  if (v92[0])
  {
    std::string v48 = (void **)v92[1];
    uint64_t v49 = v92[0];
    if (v92[1] != v92[0])
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v47);
      uint64_t v49 = v92[0];
    }
    v92[1] = v47;
    operator delete(v49);
  }
  *(unsigned char *)(a1 + 2121) = sub_635D10(v89, (uint64_t)&qword_25C6658);
  *(unsigned char *)(a1 + 2120) = sub_635D10(v89, (uint64_t)&xmmword_25C66D0);
  *(unsigned char *)(a1 + 2122) = sub_635D10(v89, (uint64_t)&dword_25C66E8);
  *(unsigned char *)(a1 + 2123) = sub_635D10(v89, (uint64_t)&xmmword_25C6700);
  sub_635CD0((long long **)v89, (uint64_t)v92);
  char v50 = HIBYTE(v93);
  char v51 = v92[0];
  if (v93 >= 0) {
    uint64_t v52 = v92;
  }
  else {
    uint64_t v52 = (void **)v92[0];
  }
  if (byte_25C5457 >= 0) {
    size_t v53 = &xmmword_25C5440;
  }
  else {
    size_t v53 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v54 = byte_25C5457;
  }
  else {
    int64_t v54 = *((void *)&xmmword_25C5440 + 1);
  }
  if (v54)
  {
    if (v93 >= 0) {
      uint64_t v55 = HIBYTE(v93);
    }
    else {
      uint64_t v55 = (uint64_t)v92[1];
    }
    unint64_t v56 = (char *)v52 + v55;
    if (v55 >= v54)
    {
      int v81 = *(char *)v53;
      int64_t v82 = v52;
      do
      {
        uint64_t v83 = v55 - v54;
        if (v83 == -1) {
          break;
        }
        int64_t v84 = (char *)memchr(v82, v81, v83 + 1);
        if (!v84) {
          break;
        }
        uint64_t v57 = v84;
        if (!memcmp(v84, v53, v54)) {
          goto LABEL_82;
        }
        int64_t v82 = (void **)(v57 + 1);
        uint64_t v55 = v56 - (v57 + 1);
      }
      while (v55 >= v54);
    }
    uint64_t v57 = v56;
LABEL_82:
    uint64_t v58 = v57 - (char *)v52;
    if (v57 == v56) {
      uint64_t v58 = -1;
    }
    char v59 = v88;
    *(unsigned char *)(a1 + 2124) = v58 != -1;
    if ((v50 & 0x80) == 0)
    {
LABEL_85:
      char v60 = *(unsigned char *)(*(void *)(a1 + 1952) + 1878);
      if (!v60) {
        goto LABEL_103;
      }
      goto LABEL_89;
    }
  }
  else
  {
    char v59 = v88;
    *(unsigned char *)(a1 + 2124) = 1;
    if ((v50 & 0x80) == 0) {
      goto LABEL_85;
    }
  }
  operator delete(v51);
  char v60 = *(unsigned char *)(*(void *)(a1 + 1952) + 1878);
  if (!v60) {
    goto LABEL_103;
  }
LABEL_89:
  if (*(_DWORD *)(*(void *)(a1 + 1960) + 1000) != 11
    || *(unsigned char *)(a1 + 1855)
    || *(unsigned char *)(a1 + 2125)
    || (*(_DWORD *)(a1 + 1848) - 1) > 1)
  {
    char v60 = 0;
  }
  else if (sub_65FC8((void *)(a1 + 1976)))
  {
    uint64_t v61 = *(void *)(a1 + 1976);
    uint64_t v62 = *(void *)(a1 + 1984);
    char v59 = v88;
    if (v61 == v62)
    {
      char v60 = 1;
    }
    else
    {
      uint64_t v63 = v61 + 184;
      do
      {
        char v60 = (*(unsigned __int8 *)(v63 - 8) | *(unsigned __int8 *)(v63 - 7)) == 0;
        if (*(unsigned __int8 *)(v63 - 8) | *(unsigned __int8 *)(v63 - 7)) {
          BOOL v64 = 1;
        }
        else {
          BOOL v64 = v63 == v62;
        }
        v63 += 184;
      }
      while (!v64);
    }
  }
  else
  {
    char v60 = 1;
    char v59 = v88;
  }
LABEL_103:
  *(unsigned char *)(a1 + 1852) = v60;
  BOOL v65 = sub_800B24(a1);
  uint64_t v66 = 432;
  if (v65) {
    uint64_t v66 = 312;
  }
  int64_t v67 = &xmmword_25C5800;
  if (v65) {
    int64_t v67 = &xmmword_25C5788;
  }
  int v68 = &byte_25C5817;
  if (v65) {
    int v68 = &byte_25C579F;
  }
  if (*v68 < 0)
  {
    uint64_t v69 = *(void **)((char *)&xmmword_25C5650 + v66);
    uint64_t v70 = 432;
    if (v65) {
      uint64_t v70 = 312;
    }
    sub_4200(__dst, v69, *(void *)((char *)&xmmword_25C5650 + v70 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *v67;
    uint64_t v91 = *((void *)v67 + 2);
  }
  sub_803A58(a1, 0, (uint64_t)__dst, (uint64_t)v92);
  size_t v71 = (void **)*v59;
  if (*v59)
  {
    size_t v72 = *(void ***)(a1 + 88);
    uint64_t v73 = *v59;
    if (v72 != v71)
    {
      do
      {
        if (*((char *)v72 - 1) < 0) {
          operator delete(*(v72 - 3));
        }
        v72 -= 3;
      }
      while (v72 != v71);
      uint64_t v73 = *v59;
    }
    *(void *)(a1 + 88) = v71;
    operator delete(v73);
    uint64_t *v59 = 0;
    v59[1] = 0;
    v59[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v92;
  *(void *)(a1 + 96) = v93;
  v92[1] = 0;
  uint64_t v93 = 0;
  v92[0] = 0;
  sub_52EF44(a1 + 104, (uint64_t *)__p);
  *(unsigned char *)(a1 + 144) = v96;
  unint64_t v74 = v95;
  if (v95)
  {
    do
    {
      uint64_t v75 = (void *)*v74;
      sub_4F4B48((uint64_t)(v74 + 2));
      operator delete(v74);
      unint64_t v74 = v75;
    }
    while (v75);
  }
  uint64_t v76 = __p[0];
  __p[0] = 0;
  if (v76) {
    operator delete(v76);
  }
  char v77 = (void **)v92[0];
  if (v92[0])
  {
    int64_t v78 = (void **)v92[1];
    uint64_t v79 = v92[0];
    if (v92[1] != v92[0])
    {
      do
      {
        if (*((char *)v78 - 1) < 0) {
          operator delete(*(v78 - 3));
        }
        v78 -= 3;
      }
      while (v78 != v77);
      uint64_t v79 = v92[0];
    }
    v92[1] = v77;
    operator delete(v79);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete(__dst[0]);
  }
  return a1;
}

void sub_802C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, void **a17, void *a18, void **a19, void **a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_59230C(a15);
  sub_3B024C(a18);
  sub_52F970(v27);
  if (*(char *)(v26 + 1007) < 0) {
    operator delete(*a17);
  }
  sub_59241C((uint64_t *)(v26 + 960));
  sub_59241C((uint64_t *)(v26 + 936));
  sub_59241C((uint64_t *)(v26 + 912));
  sub_4A50F4(a10);
  sub_4A50F4(a11);
  sub_4A50F4(a12);
  sub_4A50F4(a13);
  sub_4A50F4(a14);
  sub_4D4880(a19);
  sub_4D4880(a20);
  _Unwind_Resume(a1);
}

std::string *sub_802D48(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1859))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 160);
    BOOL v5 = v4 > 0x3F;
    unint64_t v6 = (0xC000000000300008 >> v4) & 1;
    if (v5) {
      int v7 = 0;
    }
    else {
      int v7 = v6;
    }
  }
  else
  {
    int v7 = 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 1848);
  BOOL v5 = v8 > 0x23;
  uint64_t v9 = (1 << v8) & 0x804000010;
  BOOL v10 = v5 || v9 == 0;
  if (!v10 || (v7 & 1) != 0)
  {
    BOOL v11 = 0;
    uint64_t v12 = *(void *)(a2 + 384);
    if (v12 == *(void *)(a2 + 392)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v11 = *(unsigned char *)(a2 + 305) == 0;
  uint64_t v12 = *(void *)(a2 + 384);
  if (v12 != *(void *)(a2 + 392))
  {
LABEL_11:
    std::string::operator=((std::string *)(a1 + 456), (const std::string *)v12);
    *(void *)(a1 + 480) = *(void *)(v12 + 24);
    std::string::operator=((std::string *)(a1 + 488), (const std::string *)(v12 + 32));
    *(void *)(a1 + 512) = *(void *)(v12 + 56);
    *(_DWORD *)(a1 + 520) = *(_DWORD *)(v12 + 64);
    std::string::operator=((std::string *)(a1 + 528), (const std::string *)(v12 + 72));
    std::string::operator=((std::string *)(a1 + 552), (const std::string *)(v12 + 96));
    *(_DWORD *)(a1 + 576) = *(_DWORD *)(v12 + 120);
    std::string::operator=((std::string *)(a1 + 584), (const std::string *)(v12 + 128));
  }
LABEL_12:
  uint64_t v13 = *(void *)(a2 + 336);
  if (v13 == *(void *)(a2 + 344)) {
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 1848) == 4)
  {
    std::string::operator=((std::string *)(a1 + 304), *(const std::string **)(a2 + 336));
    *(void *)(a1 + 328) = *(void *)(v13 + 24);
    std::string::operator=((std::string *)(a1 + 336), (const std::string *)(v13 + 32));
    *(void *)(a1 + 360) = *(void *)(v13 + 56);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(v13 + 64);
    std::string::operator=((std::string *)(a1 + 376), (const std::string *)(v13 + 72));
    std::string::operator=((std::string *)(a1 + 400), (const std::string *)(v13 + 96));
    *(_DWORD *)(a1 + 424) = *(_DWORD *)(v13 + 120);
    std::string::operator=((std::string *)(a1 + 432), (const std::string *)(v13 + 128));
    goto LABEL_30;
  }
  if (v11 && sub_6F2FD8(*(void *)(a2 + 336)))
  {
    unint64_t v14 = *(void *)(a1 + 944);
    if (v14 < *(void *)(a1 + 952))
    {
      sub_4AA8E0(*(char **)(a1 + 944), (long long *)v13);
      *(void *)(a1 + 944) = v14 + 152;
      *(void *)(a1 + 944) = v14 + 152;
      goto LABEL_30;
    }
    BOOL v19 = (int64x2_t *)(a1 + 936);
    uint64_t v16 = (long long *)v13;
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 1859))
  {
    uint64_t v15 = *(void *)(a2 + 344);
    if (0x86BCA1AF286BCA1BLL * ((v15 - *(void *)(a2 + 336)) >> 3) >= 2)
    {
      uint64_t v16 = (long long *)(v15 - 152);
      unint64_t v17 = *(void *)(a1 + 944);
      if (v17 < *(void *)(a1 + 952))
      {
        sub_4AA8E0(*(char **)(a1 + 944), v16);
        uint64_t v18 = v17 + 152;
        *(void *)(a1 + 944) = v17 + 152;
LABEL_29:
        *(void *)(a1 + 944) = v18;
        goto LABEL_30;
      }
      BOOL v19 = (int64x2_t *)(a1 + 936);
LABEL_28:
      uint64_t v18 = sub_63CBA0(v19, v16);
      goto LABEL_29;
    }
  }
LABEL_30:
  int v33 = v7;
  uint64_t v20 = *(void *)(a2 + 360);
  for (uint64_t i = *(void *)(a2 + 368); v20 != i; v20 += 152)
  {
    if (sub_6F2FD8(v20))
    {
      int v22 = *(_DWORD *)(v20 + 120);
      if ((v22 - 2) < 2)
      {
        if (v11)
        {
          unint64_t v24 = *(void *)(a1 + 968);
          if (v24 >= *(void *)(a1 + 976))
          {
            *(void *)(a1 + 968) = sub_63CBA0((int64x2_t *)(a1 + 960), (long long *)v20);
          }
          else
          {
            sub_4AA8E0(*(char **)(a1 + 968), (long long *)v20);
            *(void *)(a1 + 968) = v24 + 152;
            *(void *)(a1 + 968) = v24 + 152;
          }
        }
      }
      else if (v22 == 4)
      {
        if (!sub_6F2FD8(a1 + 304))
        {
          std::string::operator=((std::string *)(a1 + 304), (const std::string *)v20);
          *(void *)(a1 + 328) = *(void *)(v20 + 24);
          std::string::operator=((std::string *)(a1 + 336), (const std::string *)(v20 + 32));
          *(void *)(a1 + 360) = *(void *)(v20 + 56);
          *(_DWORD *)(a1 + 368) = *(_DWORD *)(v20 + 64);
          std::string::operator=((std::string *)(a1 + 376), (const std::string *)(v20 + 72));
          std::string::operator=((std::string *)(a1 + 400), (const std::string *)(v20 + 96));
          *(_DWORD *)(a1 + 424) = *(_DWORD *)(v20 + 120);
          std::string::operator=((std::string *)(a1 + 432), (const std::string *)(v20 + 128));
        }
      }
      else if (v22 == 1 && v11)
      {
        unint64_t v23 = *(void *)(a1 + 944);
        if (v23 >= *(void *)(a1 + 952))
        {
          *(void *)(a1 + 944) = sub_63CBA0((int64x2_t *)(a1 + 936), (long long *)v20);
        }
        else
        {
          sub_4AA8E0(*(char **)(a1 + 944), (long long *)v20);
          *(void *)(a1 + 944) = v23 + 152;
          *(void *)(a1 + 944) = v23 + 152;
        }
      }
    }
  }
  uint64_t v25 = *(void *)(a1 + 936);
  if (v25 != *(void *)(a1 + 944))
  {
    std::string::operator=((std::string *)(a1 + 152), *(const std::string **)(a1 + 936));
    *(void *)(a1 + 176) = *(void *)(v25 + 24);
    std::string::operator=((std::string *)(a1 + 184), (const std::string *)(v25 + 32));
    *(void *)(a1 + 208) = *(void *)(v25 + 56);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(v25 + 64);
    std::string::operator=((std::string *)(a1 + 224), (const std::string *)(v25 + 72));
    std::string::operator=((std::string *)(a1 + 248), (const std::string *)(v25 + 96));
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(v25 + 120);
    std::string::operator=((std::string *)(a1 + 280), (const std::string *)(v25 + 128));
  }
  std::string::operator=((std::string *)(a1 + 608), (const std::string *)(a2 + 712));
  *(void *)(a1 + 632) = *(void *)(a2 + 736);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 744));
  *(void *)(a1 + 664) = *(void *)(a2 + 768);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 680), (const std::string *)(a2 + 784));
  std::string::operator=((std::string *)(a1 + 704), (const std::string *)(a2 + 808));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 832);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 840));
  uint64_t v26 = *(long long **)(a2 + 688);
  uint64_t v27 = *(long long **)(a2 + 696);
  if (v26 != v27)
  {
    char v28 = *(char **)(a1 + 920);
    do
    {
      while ((unint64_t)v28 >= *(void *)(a1 + 928))
      {
        char v28 = (char *)sub_63CBA0((int64x2_t *)(a1 + 912), v26);
        *(void *)(a1 + 920) = v28;
        v26 += 10;
        if (v26 == v27) {
          goto LABEL_54;
        }
      }
      sub_4AA8E0(v28, v26);
      v28 += 152;
      *(void *)(a1 + 920) = v28;
      *(void *)(a1 + 920) = v28;
      v26 += 10;
    }
    while (v26 != v27);
  }
LABEL_54:
  double result = (std::string *)sub_6F2FD8(a2 + 408);
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 760), (const std::string *)(a2 + 408));
    *(void *)(a1 + 784) = *(void *)(a2 + 432);
    std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 440));
    *(void *)(a1 + 816) = *(void *)(a2 + 464);
    *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 472);
    std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 480));
    std::string::operator=((std::string *)(a1 + 856), (const std::string *)(a2 + 504));
    *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 528);
    long long v30 = (std::string *)(a1 + 888);
    unsigned int v31 = (const std::string *)(a2 + 536);
  }
  else
  {
    if (!v33) {
      return result;
    }
    uint64_t v32 = *(void *)(a2 + 336);
    if (v32 == *(void *)(a2 + 344)) {
      return result;
    }
    std::string::operator=((std::string *)(a1 + 760), *(const std::string **)(a2 + 336));
    *(void *)(a1 + 784) = *(void *)(v32 + 24);
    std::string::operator=((std::string *)(a1 + 792), (const std::string *)(v32 + 32));
    *(void *)(a1 + 816) = *(void *)(v32 + 56);
    *(_DWORD *)(a1 + 824) = *(_DWORD *)(v32 + 64);
    std::string::operator=((std::string *)(a1 + 832), (const std::string *)(v32 + 72));
    std::string::operator=((std::string *)(a1 + 856), (const std::string *)(v32 + 96));
    *(_DWORD *)(a1 + 880) = *(_DWORD *)(v32 + 120);
    long long v30 = (std::string *)(a1 + 888);
    unsigned int v31 = (const std::string *)(v32 + 128);
  }

  return std::string::operator=(v30, v31);
}

void sub_803338(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_803340(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_803348(_Unwind_Exception *a1)
{
  *(void *)(v1 + 944) = v2;
  _Unwind_Resume(a1);
}

void sub_803350(_Unwind_Exception *a1)
{
  *(void *)(v1 + 968) = v2;
  _Unwind_Resume(a1);
}

void sub_803358(_Unwind_Exception *a1)
{
  *(void *)(v1 + 920) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_803360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  unsigned int v4 = &qword_25C4960;
  BOOL v5 = (uint64_t *)&xmmword_25C4B88;
  unint64_t v6 = (long long *)&qword_25C4AE0;
  switch(*(_DWORD *)(a1 + 1848))
  {
    case 0:
    case 3:
    case 5:
    case 0xC:
      goto LABEL_2;
    case 1:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&unk_25C47F8;
      uint64_t v9 = &xmmword_25C5080;
      goto LABEL_72;
    case 2:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C4810;
      uint64_t v9 = &xmmword_25C5098;
      goto LABEL_72;
    case 4:
      sub_7F607C(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 6:
      sub_8047E0(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 7:
      goto LABEL_4;
    case 0xB:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = (long long *)&qword_25C4D50;
      goto LABEL_29;
    case 0x10:
      sub_804634(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x11:
      sub_804160(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x12:
      uint64_t v11 = *(void *)(a1 + 1960);
      if (!*(unsigned char *)(v11 + 1524) || *(unsigned char *)(v11 + 1522) || !*(unsigned char *)(a1 + 1409) || *(_DWORD *)(a1 + 2128) != 1)
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = (long long *)&qword_25C4A08;
        goto LABEL_36;
      }
      unsigned int v4 = &qword_25C4A50;
      break;
    case 0x14:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C48B8;
      goto LABEL_18;
    case 0x15:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C48D0;
LABEL_18:
      unint64_t v14 = (long long *)((char *)v8 + 2280);
      uint64_t v15 = (long long *)((char *)v8 + 1992);
      goto LABEL_69;
    case 0x16:
      sub_7F60EC(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x17:
      break;
    case 0x18:
      sub_7F6150(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x19:
      sub_8041F8(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x1A:
      int v16 = *(unsigned __int8 *)(a1 + 1856);
      unint64_t v17 = &xmmword_25C4930;
      uint64_t v18 = &qword_25C50B0;
      goto LABEL_40;
    case 0x1B:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4828;
      uint64_t v9 = &xmmword_25C5080;
      goto LABEL_72;
    case 0x1C:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4840;
      uint64_t v9 = &xmmword_25C5098;
      goto LABEL_72;
    case 0x1D:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = &xmmword_25C4D68;
      goto LABEL_29;
    case 0x1E:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      BOOL v10 = &xmmword_25C4D80;
LABEL_29:
      sub_804AEC(a1, (uint64_t)v10, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x21:
      uint64_t v19 = *(void *)(a1 + 1960);
      if (!*(unsigned char *)(v19 + 1524) || *(unsigned char *)(v19 + 1522) || !*(unsigned char *)(a1 + 1409) || *(_DWORD *)(a1 + 2128) != 1)
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = &xmmword_25C4A20;
        goto LABEL_36;
      }
      unsigned int v4 = (uint64_t *)&xmmword_25C4A68;
      break;
    case 0x22:
      uint64_t v20 = *(void *)(a1 + 1960);
      if (*(unsigned char *)(v20 + 1524) && !*(unsigned char *)(v20 + 1522) && *(unsigned char *)(a1 + 1409) && *(_DWORD *)(a1 + 2128) == 1)
      {
        unsigned int v4 = (uint64_t *)&xmmword_25C4A80;
      }
      else
      {
        int v12 = *(unsigned __int8 *)(a1 + 1409);
        uint64_t v13 = &xmmword_25C4A38;
LABEL_36:
        if (v12) {
          unsigned int v4 = (uint64_t *)(v13 + 9);
        }
        else {
          unsigned int v4 = (uint64_t *)v13;
        }
      }
      break;
    case 0x23:
      int v16 = *(unsigned __int8 *)(a1 + 1856);
      unint64_t v17 = &xmmword_25C4918;
      uint64_t v18 = &qword_25C50C8;
LABEL_40:
      if (v16) {
        unsigned int v4 = (uint64_t *)v17;
      }
      else {
        unsigned int v4 = v18;
      }
      break;
    case 0x27:
      sub_804698(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x29:
      goto LABEL_62;
    case 0x2A:
      BOOL v5 = (uint64_t *)&xmmword_25C4BA0;
      goto LABEL_62;
    case 0x2B:
      BOOL v5 = (uint64_t *)&xmmword_25C4BB8;
      goto LABEL_62;
    case 0x2C:
      BOOL v5 = (uint64_t *)&xmmword_25C4BD0;
      goto LABEL_62;
    case 0x2D:
      BOOL v5 = (uint64_t *)&xmmword_25C4BE8;
      goto LABEL_62;
    case 0x2E:
      BOOL v5 = (uint64_t *)&xmmword_25C4C00;
      goto LABEL_62;
    case 0x2F:
      BOOL v5 = &qword_25C4C18;
      goto LABEL_62;
    case 0x30:
      BOOL v5 = (uint64_t *)&xmmword_25C4C30;
      goto LABEL_62;
    case 0x31:
      BOOL v5 = (uint64_t *)&xmmword_25C4C48;
      goto LABEL_62;
    case 0x32:
      BOOL v5 = (uint64_t *)&xmmword_25C4C60;
      goto LABEL_62;
    case 0x33:
      BOOL v5 = &qword_25C4C78;
      goto LABEL_62;
    case 0x34:
      BOOL v5 = &qword_25C4C90;
      goto LABEL_62;
    case 0x35:
      BOOL v5 = &qword_25C4CA8;
      goto LABEL_62;
    case 0x36:
      BOOL v5 = &qword_25C4CC0;
      goto LABEL_62;
    case 0x37:
      BOOL v5 = &qword_25C4CD8;
      goto LABEL_62;
    case 0x38:
      BOOL v5 = &qword_25C4CF0;
      goto LABEL_62;
    case 0x39:
      BOOL v5 = &qword_25C4D08;
      goto LABEL_62;
    case 0x3A:
      BOOL v5 = &qword_25C4D20;
      goto LABEL_62;
    case 0x3B:
      BOOL v5 = &qword_25C4D38;
LABEL_62:
      sub_804980(a1, (uint64_t)v5, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x3C:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = (long long *)&qword_25C4858;
      goto LABEL_65;
    case 0x3D:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4870;
LABEL_65:
      unint64_t v14 = (long long *)((char *)v8 + 2328);
      uint64_t v15 = (long long *)((char *)v8 + 2088);
      goto LABEL_69;
    case 0x3E:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C4888;
      goto LABEL_68;
    case 0x3F:
      int v7 = *(unsigned __int8 *)(a1 + 1856);
      unsigned int v8 = &xmmword_25C48A0;
LABEL_68:
      unint64_t v14 = (long long *)((char *)v8 + 2328);
      uint64_t v15 = (long long *)((char *)v8 + 2040);
LABEL_69:
      if (*(unsigned char *)(*(void *)(a1 + 1952) + 1898)) {
        uint64_t v9 = v14;
      }
      else {
        uint64_t v9 = v15;
      }
LABEL_72:
      if (v7) {
        uint64_t v21 = (uint64_t)v8;
      }
      else {
        uint64_t v21 = (uint64_t)v9;
      }
      sub_804530((std::string *)a1, v21, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x40:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      int v22 = &qword_25C4D98;
      goto LABEL_82;
    case 0x41:
      if (!*(unsigned char *)(a1 + 1856)) {
        goto LABEL_2;
      }
      int v22 = (uint64_t *)&xmmword_25C4DB0;
      goto LABEL_82;
    case 0x42:
      if (*(unsigned char *)(a1 + 1856))
      {
        int v22 = &qword_25C4DC8;
LABEL_82:
        sub_804B70(a1, (uint64_t)v22, (char **)a2);
      }
      else
      {
LABEL_2:
        sub_803FF8((std::string *)a1, (char **)a2, 1u);
      }
      return sub_7F68A8((std::string *)a1, a2);
    case 0x52:
      goto LABEL_85;
    case 0x53:
      unint64_t v6 = &xmmword_25C4AF8;
      goto LABEL_85;
    case 0x54:
      unint64_t v6 = &xmmword_25C4B10;
LABEL_85:
      sub_6351E8((char **)a2, (uint64_t)v6);
      sub_80CEE8(a1, (std::string **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x55:
      sub_80425C(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x56:
    case 0x57:
      if (*(unsigned char *)(a1 + 1856)) {
LABEL_4:
      }
        sub_8048A4(a1, (char **)a2);
      else {
        sub_804A7C(a1, (char **)a2);
      }
      return sub_7F68A8((std::string *)a1, a2);
    case 0x58:
      sub_8043B4(a1, (char **)a2);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x59:
      unsigned int v4 = &qword_25C4DF8;
      break;
    case 0x5A:
      unsigned int v4 = &qword_25C4E10;
      break;
    case 0x5B:
      sub_7F61B4(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x5C:
      unsigned int v4 = (uint64_t *)&xmmword_25C49A8;
      break;
    case 0x5D:
      sub_7F6218(a1, (char **)a2, a1 + 152);
      return sub_7F68A8((std::string *)a1, a2);
    case 0x5E:
      unsigned int v4 = (uint64_t *)&xmmword_25C4E28;
      break;
    default:
      return sub_7F68A8((std::string *)a1, a2);
  }
  sub_6351E8((char **)a2, (uint64_t)v4);
  return sub_7F68A8((std::string *)a1, a2);
}

void sub_8038C8(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_803A58(std::string::size_type a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_8A6F8((char *)a4, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  sub_5954B0(a4 + 24, a1 + 32);
  *(unsigned char *)(a4 + 64) = *(unsigned char *)(a1 + 72);
  sub_808B1C(a1, (uint64_t)&v55);
  if (*(unsigned char *)(a1 + 1853)) {
    sub_7FAE5C(a1, &v55);
  }
  std::string::size_type v8 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v55;
  }
  else {
    uint64_t v9 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if (byte_25C54E7 >= 0) {
    BOOL v10 = &qword_25C54D0;
  }
  else {
    BOOL v10 = (uint64_t *)qword_25C54D0;
  }
  if (byte_25C54E7 >= 0) {
    int64_t v11 = byte_25C54E7;
  }
  else {
    int64_t v11 = *(void *)&word_25C54D8;
  }
  if (!v11)
  {
    unint64_t v15 = 0;
    int v16 = *(_DWORD *)(a1 + 1848);
    BOOL v17 = (v16 - 33) < 2 || v16 == 18;
    if (!v17) {
      goto LABEL_22;
    }
LABEL_42:
    if ((a2 & 1) == 0)
    {
      sub_7FB07C(a1, (uint64_t)&__p);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (byte_25C58EF >= 0) {
          long long v30 = (const std::string::value_type *)&qword_25C58D8;
        }
        else {
          long long v30 = (const std::string::value_type *)qword_25C58D8;
        }
        if (byte_25C58EF >= 0) {
          std::string::size_type v31 = byte_25C58EF;
        }
        else {
          std::string::size_type v31 = qword_25C58E0;
        }
        std::string::append(&v55, v30, v31);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)p_p, v33);
        char v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v29 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_116;
    }
    goto LABEL_43;
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v12 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v12 = v55.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = (char *)v9 + v12;
  if (v12 >= v11)
  {
    uint64_t v53 = a3;
    int v20 = *(char *)v10;
    uint64_t v21 = v9;
    do
    {
      int64_t v22 = v12 - v11;
      if (v22 == -1) {
        break;
      }
      unint64_t v23 = (char *)memchr(v21, v20, v22 + 1);
      if (!v23) {
        break;
      }
      unint64_t v14 = v23;
      if (!memcmp(v23, v10, v11)) {
        goto LABEL_33;
      }
      uint64_t v21 = (std::string *)(v14 + 1);
      int64_t v12 = v13 - (v14 + 1);
    }
    while (v12 >= v11);
    unint64_t v14 = v13;
LABEL_33:
    a3 = v53;
  }
  else
  {
    unint64_t v14 = (char *)v9 + v12;
  }
  if (v14 == v13) {
    unint64_t v15 = -1;
  }
  else {
    unint64_t v15 = v14 - (char *)v9;
  }
  int v16 = *(_DWORD *)(a1 + 1848);
  if ((v16 - 33) < 2 || v16 == 18) {
    goto LABEL_42;
  }
LABEL_22:
  if (v16 == 17 && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v18 = *(unsigned __int8 ***)(a1 + 1968);
    char v19 = *((unsigned char *)v18 + 23);
    if ((v19 & 0x80000000) == 0)
    {
      if (!*((unsigned char *)v18 + 23)) {
        goto LABEL_43;
      }
LABEL_84:
      uint64_t v36 = a3;
      uint64_t v37 = qword_25C6328;
      uint64_t v38 = *(void *)algn_25C6330;
      if (qword_25C6328 == *(void *)algn_25C6330)
      {
LABEL_102:
        BOOL v17 = v37 == v38;
        a3 = v36;
        if (!v17)
        {
          if (byte_25C58EF >= 0) {
            size_t v44 = (const std::string::value_type *)&qword_25C58D8;
          }
          else {
            size_t v44 = (const std::string::value_type *)qword_25C58D8;
          }
          if (byte_25C58EF >= 0) {
            std::string::size_type v45 = byte_25C58EF;
          }
          else {
            std::string::size_type v45 = qword_25C58E0;
          }
          std::string::append(&v55, v44, v45);
          uint64_t v46 = *(void *)(a1 + 1968);
          int v47 = *(char *)(v46 + 23);
          if (v47 >= 0) {
            std::string v48 = *(const std::string::value_type **)(a1 + 1968);
          }
          else {
            std::string v48 = *(const std::string::value_type **)v46;
          }
          if (v47 >= 0) {
            std::string::size_type v49 = *(unsigned __int8 *)(v46 + 23);
          }
          else {
            std::string::size_type v49 = *(void *)(v46 + 8);
          }
          std::string::append(&v55, v48, v49);
          goto LABEL_116;
        }
      }
      else
      {
        if (v19 >= 0) {
          unsigned int v39 = (unsigned __int8 *)*((unsigned __int8 *)v18 + 23);
        }
        else {
          unsigned int v39 = v18[1];
        }
        if (v19 >= 0) {
          int v40 = *(unsigned __int8 **)(a1 + 1968);
        }
        else {
          int v40 = *v18;
        }
        do
        {
          uint64_t v41 = *(unsigned __int8 *)(v37 + 23);
          if ((v41 & 0x80u) == 0) {
            int64_t v42 = (unsigned __int8 *)*(unsigned __int8 *)(v37 + 23);
          }
          else {
            int64_t v42 = *(unsigned __int8 **)(v37 + 8);
          }
          if (v42 == v39)
          {
            if ((v41 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v37, v40, *(void *)(v37 + 8))) {
                goto LABEL_102;
              }
            }
            else
            {
              if (!*(unsigned char *)(v37 + 23)) {
                goto LABEL_102;
              }
              uint64_t v43 = 0;
              while (*(unsigned __int8 *)(v37 + v43) == v40[v43])
              {
                if (v41 == ++v43) {
                  goto LABEL_102;
                }
              }
            }
          }
          v37 += 24;
        }
        while (v37 != v38);
        a3 = v36;
      }
      goto LABEL_43;
    }
    if (v18[1]) {
      goto LABEL_84;
    }
  }
LABEL_43:
  if (v15 != -1
    && (*(unsigned char *)(a1 + 2120)
     || *(unsigned char *)(a1 + 2121)
     || *(unsigned char *)(a1 + 2124)
     || *(unsigned char *)(a1 + 2122)
     || *(unsigned char *)(a1 + 2123)))
  {
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v25 = v8;
    }
    else {
      std::string::size_type v25 = v55.__r_.__value_.__l.__size_;
    }
    if (v25 >= v15) {
      std::string::size_type v26 = v15;
    }
    else {
      std::string::size_type v26 = v25;
    }
    if (v26 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v26 >= 0x17)
    {
      uint64_t v34 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v34 = v26 | 7;
      }
      uint64_t v35 = v34 + 1;
      uint64_t v27 = (std::string *)operator new(v34 + 1);
      __p.__r_.__value_.__l.__size_ = v26;
      __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26;
      uint64_t v27 = &__p;
      if (!v26)
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_59:
          std::string v55 = __p;
          goto LABEL_116;
        }
LABEL_82:
        operator delete(v55.__r_.__value_.__l.__data_);
        goto LABEL_59;
      }
    }
    memmove(v27, v9, v26);
    v27->__r_.__value_.__s.__data_[v26] = 0;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_82;
  }
LABEL_116:
  sub_808CD8(a1, (const void **)&v55.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  sub_6353B4(a4, (std::string **)&__p);
  std::string::size_type v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
    uint64_t v52 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v51 - 1) < 0) {
          operator delete(*(void **)(v51 - 24));
        }
        v51 -= 24;
      }
      while (v51 != v50);
      uint64_t v52 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v50;
    operator delete(v52);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
}

void sub_803F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
  {
    sub_4D4880(v21);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4880(v21);
  _Unwind_Resume(a1);
}

void sub_803FC0(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_803FD4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_803FF0(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_801F98(a1, a2, a3, a4, a5, a6);
}

void sub_803FF8(std::string *a1, char **a2, unsigned __int8 a3)
{
  int v5 = a1[77].__r_.__value_.__s.__data_[12];
  memset(&v9, 0, sizeof(v9));
  if (((v5 != 0) & a3) != 0) {
    unint64_t v6 = &xmmword_25C5B30;
  }
  else {
    unint64_t v6 = &xmmword_25C5038;
  }
  if (a1[77].__r_.__value_.__s.__data_[8]) {
    int v7 = (const std::string *)&qword_25C4738;
  }
  else {
    int v7 = (const std::string *)v6;
  }
  std::string::operator=(&v9, v7);
  sub_6351E8(a2, (uint64_t)&v9);
  sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, (uint64_t)&a1[12].__r_.__value_.__r.__words[2]);
  if (a1[77].__r_.__value_.__s.__data_[6] && a1[77].__r_.__value_.__s.__data_[8])
  {
    sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5458, &xmmword_25C66D0, (uint64_t)&a1[6].__r_.__value_.__l.__size_);
    sub_635C08((uint64_t)a2, (long long *)&qword_25C6568, (uint64_t)&a1[6].__r_.__value_.__l.__size_, 1);
  }
  else
  {
    sub_80C964((uint64_t)a1, (uint64_t)a2, (uint64_t)&a1[6].__r_.__value_.__l.__size_, &a1[77].__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v8 = (std::string **)nullsub_1(a2);
  sub_80CFDC(a1, *v8);
  sub_7FF86C((uint64_t)a1, (long long **)a2, (uint64_t)&a1[77].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_804140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_804160(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856))
  {
    unsigned int v4 = &qword_25C4750;
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 1848);
    BOOL v6 = v5 > 0x23;
    uint64_t v7 = (1 << v5) & 0x804000010;
    if (v6 || v7 == 0) {
      unsigned int v4 = &qword_25C4750;
    }
    else {
      unsigned int v4 = (uint64_t *)&xmmword_25C5050;
    }
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_8041F8(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856)) {
    unsigned int v4 = (uint64_t *)&xmmword_25C4798;
  }
  else {
    unsigned int v4 = &qword_25C5068;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_80425C(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1856)
    || ((unsigned int v8 = *(_DWORD *)(a1 + 1848), v9 = v8 > 0x23, v10 = (1 << v8) & 0x804000010, !v9)
      ? (BOOL v11 = v10 == 0)
      : (BOOL v11 = 1),
        v11))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 1960) + 1522);
    uint64_t v5 = 33;
    if (v4 == 11) {
      uint64_t v5 = 36;
    }
    BOOL v6 = &qword_25C4780;
    if (v4 != 11) {
      BOOL v6 = &qword_25C4768;
    }
    uint64_t v7 = &byte_25C477F;
    if (v4 == 11) {
      uint64_t v7 = &byte_25C4797;
    }
    if ((*v7 & 0x80000000) == 0)
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v6;
      uint64_t v16 = v6[2];
      goto LABEL_22;
    }
    int64_t v12 = (void *)qword_25C4660[v5];
    if (v4 == 11) {
      uint64_t v13 = (unint64_t *)&dword_25C4788;
    }
    else {
      uint64_t v13 = (unint64_t *)&unk_25C4770;
    }
    unint64_t v14 = *v13;
  }
  else
  {
    if ((byte_25C5067 & 0x80000000) == 0)
    {
      *(_OWORD *)std::string __p = xmmword_25C5050;
      uint64_t v16 = unk_25C5060;
      goto LABEL_22;
    }
    unint64_t v14 = *((void *)&xmmword_25C5050 + 1);
    int64_t v12 = (void *)xmmword_25C5050;
  }
  sub_4200(__p, v12, v14);
LABEL_22:
  sub_6351E8(a2, (uint64_t)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_804398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8043B4(uint64_t a1, char **a2)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 1960) + 1522);
  uint64_t v5 = 33;
  if (v4 == 11) {
    uint64_t v5 = 36;
  }
  BOOL v6 = (std::string *)&qword_25C4780;
  if (v4 != 11) {
    BOOL v6 = (std::string *)&qword_25C4768;
  }
  uint64_t v7 = &byte_25C477F;
  if (v4 == 11) {
    uint64_t v7 = &byte_25C4797;
  }
  if (*v7 < 0)
  {
    if (v4 == 11) {
      unsigned int v8 = (unint64_t *)&dword_25C4788;
    }
    else {
      unsigned int v8 = (unint64_t *)&unk_25C4770;
    }
    sub_4200(&v13, (void *)qword_25C4660[v5], *v8);
  }
  else
  {
    std::string v13 = *v6;
  }
  if (byte_25C47C7 >= 0) {
    BOOL v9 = (const std::string::value_type *)&qword_25C47B0;
  }
  else {
    BOOL v9 = (const std::string::value_type *)qword_25C47B0;
  }
  if (byte_25C47C7 >= 0) {
    std::string::size_type v10 = byte_25C47C7;
  }
  else {
    std::string::size_type v10 = unk_25C47B8;
  }
  BOOL v11 = std::string::append(&v13, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  sub_6351E8(a2, (uint64_t)__p);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_23:
    operator delete(v13.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
LABEL_21:
  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_8044E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::string *sub_804530(std::string *a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  if (a1[77].__r_.__value_.__s.__data_[12]) {
    sub_63581C((std::string **)a3, (const std::string::value_type *)&xmmword_25C5668);
  }
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, (uint64_t)&a1[12].__r_.__value_.__r.__words[2]);
  if (a1[77].__r_.__value_.__s.__data_[6] && a1[77].__r_.__value_.__s.__data_[8])
  {
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, (uint64_t)&a1[6].__r_.__value_.__l.__size_);
    sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, (uint64_t)&a1[6].__r_.__value_.__l.__size_, 1);
  }
  else
  {
    sub_80C964((uint64_t)a1, (uint64_t)a3, (uint64_t)&a1[6].__r_.__value_.__l.__size_, &a1[77].__r_.__value_.__r.__words[2]);
  }
  uint64_t v5 = (std::string **)nullsub_1(a3);
  sub_80CFDC(a1, *v5);
  sub_7FF86C((uint64_t)a1, (long long **)a3, (uint64_t)&a1[77].__r_.__value_.__r.__words[2]);

  return sub_800094(a1, (std::string **)a3);
}

void sub_804634(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1855)) {
    int v4 = &qword_25C5128;
  }
  else {
    int v4 = (uint64_t *)&xmmword_25C49D8;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_804698(uint64_t a1, char **a2)
{
  if (*(unsigned char *)(a1 + 1855)) {
    int v4 = &qword_25C5140;
  }
  else {
    int v4 = (uint64_t *)&xmmword_25C49F0;
  }
  sub_6351E8(a2, (uint64_t)v4);

  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_8046FC(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&qword_25C4AE0);

  sub_80CEE8(a1, (std::string **)a2);
}

void sub_804748(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4AF8);

  sub_80CEE8(a1, (std::string **)a2);
}

void sub_804794(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B10);

  sub_80CEE8(a1, (std::string **)a2);
}

void sub_8047E0(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B40);
  if (sub_6F2FD8(a1 + 152))
  {
    sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
  }
  else
  {
    uint64_t v4 = a1 + 304;
    if (sub_6F2FD8(v4))
    {
      sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, v4);
    }
  }
}

void sub_8048A4(uint64_t a1, char **a2)
{
  sub_6351E8(a2, (uint64_t)&xmmword_25C4B70);
  sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
  if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v4 = a1 + 152;
    sub_635B18((uint64_t)a2, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v4);
    sub_635C08((uint64_t)a2, (long long *)&qword_25C6568, v4, 1);
  }
  else
  {
    sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
  }
}

void sub_804980(uint64_t a1, uint64_t a2, char **a3)
{
  if (*(unsigned char *)(a1 + 1856))
  {
    sub_6351E8(a3, a2);
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
    if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
    {
      uint64_t v5 = a1 + 152;
      sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v5);
      sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, v5, 1);
      return;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 1848);
    uint64_t v7 = &qword_25C5110;
    if (v6 != 87) {
      uint64_t v7 = &qword_25C50E0;
    }
    if (v6 == 86) {
      unsigned int v8 = &qword_25C50F8;
    }
    else {
      unsigned int v8 = v7;
    }
    sub_6351E8(a3, (uint64_t)v8);
  }

  sub_80C964(a1, (uint64_t)a3, a1 + 152, (void *)(a1 + 1864));
}

void sub_804A7C(uint64_t a1, char **a2)
{
  int v4 = *(_DWORD *)(a1 + 1848);
  uint64_t v5 = &qword_25C5110;
  if (v4 != 87) {
    uint64_t v5 = &qword_25C50E0;
  }
  if (v4 == 86) {
    int v6 = &qword_25C50F8;
  }
  else {
    int v6 = v5;
  }
  sub_6351E8(a2, (uint64_t)v6);

  sub_80C964(a1, (uint64_t)a2, a1 + 152, (void *)(a1 + 1864));
}

void sub_804AEC(uint64_t a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5548, &xmmword_25C6748, a1 + 456);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);

  sub_80CD44(a1, (uint64_t)a3);
}

void sub_804B70(uint64_t a1, uint64_t a2, char **a3)
{
  sub_6351E8(a3, a2);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5548, &xmmword_25C6748, a1 + 456);
  sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5470, (long long *)&qword_25C6658, a1 + 304);
  if (*(unsigned char *)(a1 + 1854) && *(unsigned char *)(a1 + 1856))
  {
    uint64_t v5 = a1 + 152;
    sub_635B18((uint64_t)a3, (uint64_t)&qword_25C5458, &xmmword_25C66D0, v5);
    sub_635C08((uint64_t)a3, (long long *)&qword_25C6568, v5, 1);
  }
  else
  {
    sub_80C964(a1, (uint64_t)a3, a1 + 152, (void *)(a1 + 1864));
  }
}

uint64_t sub_804C60@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&xmmword_25C4E58);
}

void sub_804C70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_8A6F8((char *)a2, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  sub_5954B0(a2 + 24, a1 + 32);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 72);
  sub_635CD0((long long **)a2, (uint64_t)&v6);
  if (byte_25C57E7 >= 0) {
    int v4 = (const std::string::value_type *)&qword_25C57D0;
  }
  else {
    int v4 = (const std::string::value_type *)qword_25C57D0;
  }
  if (byte_25C57E7 >= 0) {
    std::string::size_type v5 = byte_25C57E7;
  }
  else {
    std::string::size_type v5 = unk_25C57D8;
  }
  std::string::append(&v6, v4, v5);
  sub_6351E8((char **)a2, (uint64_t)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_804D38(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_804D4C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_804D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v15);
  _Unwind_Resume(a1);
}

void sub_804D8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(&v12);
  uint64_t v10 = 0;
  BOOL v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  unint64_t v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = v15;
  if (v15)
  {
    do
    {
      std::string::size_type v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      int v4 = v5;
    }
    while (v5);
  }
  std::string v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v12;
  if (v12)
  {
    unsigned int v8 = v13;
    BOOL v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      BOOL v9 = v12;
    }
    std::string v13 = v7;
    operator delete(v9);
  }
}

void sub_804EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_804ED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (byte_25C5C50[23] < 0) {
    sub_4200(&__dst, *(void **)byte_25C5C50, *(unint64_t *)&byte_25C5C50[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_25C5C50;
  }
  sub_8050C8(a1 + 608, (uint64_t)&v16);
  if (!v18)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(unsigned char *)(a2 + 64) = 1;
    BOOL v11 = v17;
    if (!v17) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (byte_25C5457 >= 0) {
    int v4 = (const std::string::value_type *)&xmmword_25C5440;
  }
  else {
    int v4 = (const std::string::value_type *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    std::string::size_type v5 = byte_25C5457;
  }
  else {
    std::string::size_type v5 = *((void *)&xmmword_25C5440 + 1);
  }
  std::string::append(&__dst, v4, v5);
  if (byte_25C57B7 >= 0) {
    std::string v6 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    std::string v6 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v7 = byte_25C57B7;
  }
  else {
    std::string::size_type v7 = qword_25C57A8;
  }
  std::string::append(&__dst, v6, v7);
  sub_8050C8(a1 + 608, (uint64_t)__p);
  sub_63531C(a2, (uint64_t)&__dst, (uint64_t)__p);
  unsigned int v8 = v15;
  if (v15)
  {
    do
    {
      BOOL v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      unsigned int v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  BOOL v11 = v17;
  if (v17)
  {
    do
    {
LABEL_22:
      long long v12 = (void *)*v11;
      sub_4F4B48((uint64_t)(v11 + 2));
      operator delete(v11);
      BOOL v11 = v12;
    }
    while (v12);
  }
LABEL_23:
  std::string v13 = v16;
  uint64_t v16 = 0;
  if (v13) {
    operator delete(v13);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_805088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_4DD068((uint64_t)&a9);
  sub_4DD068((uint64_t)&a14);
  if (*(char *)(v14 - 41) < 0) {
    operator delete(*(void **)(v14 - 64));
  }
  _Unwind_Resume(a1);
}

std::string *sub_8050C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  double result = (std::string *)sub_6F2FD8(a1);
  if (result)
  {
    std::string v6 = &xmmword_25C6670;
    std::string::size_type v5 = sub_617978(a2, (uint64_t)&xmmword_25C6670, (uint64_t)&unk_20F06E0, &v6);
    std::string::operator=((std::string *)(v5 + 5), (const std::string *)a1);
    v5[8] = *(void *)(a1 + 24);
    std::string::operator=((std::string *)v5 + 3, (const std::string *)(a1 + 32));
    v5[12] = *(void *)(a1 + 56);
    *((_DWORD *)v5 + 26) = *(_DWORD *)(a1 + 64);
    std::string::operator=((std::string *)(v5 + 14), (const std::string *)(a1 + 72));
    std::string::operator=((std::string *)(v5 + 17), (const std::string *)(a1 + 96));
    *((_DWORD *)v5 + 40) = *(_DWORD *)(a1 + 120);
    return std::string::operator=((std::string *)v5 + 7, (const std::string *)(a1 + 128));
  }
  return result;
}

void sub_80519C(_Unwind_Exception *a1)
{
  sub_4DD068(v1);
  _Unwind_Resume(a1);
}

void sub_8051B0(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  unsigned int v5 = *(_DWORD *)(a1 + 1848);
  BOOL v6 = v5 > 0x22 || ((1 << v5) & 0x600040000) == 0;
  if (!v6 || v5 - 82 <= 2)
  {
    sub_8053F0(a1, a3);
    return;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v8 = *(void *)(a1 + 936);
  uint64_t v9 = *(void *)(a1 + 944);
  if (v8 != v9)
  {
    if (v9 - v8 == 152) {
      goto LABEL_11;
    }
LABEL_15:
    unsigned int v12 = *(_DWORD *)(a1 + 1848);
    if (((1 << v12) & 0x60000800) != 0) {
      int v13 = a2;
    }
    else {
      int v13 = 1;
    }
    if (v12 <= 0x1E) {
      int v10 = v13;
    }
    else {
      int v10 = 1;
    }
    if (*(unsigned char *)(a1 + 2122)) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (!sub_6F2FD8(a1 + 304)) {
    return;
  }
  if (*(void *)(a1 + 944) - *(void *)(a1 + 936) != 152) {
    goto LABEL_15;
  }
LABEL_11:
  int v10 = 1;
  if (*(unsigned char *)(a1 + 2122))
  {
LABEL_12:
    BOOL v11 = &xmmword_25C5230;
    goto LABEL_29;
  }
LABEL_22:
  if (*(unsigned char *)(a1 + 2123))
  {
    BOOL v11 = &xmmword_25C5248;
  }
  else if (*(unsigned char *)(a1 + 2121))
  {
    BOOL v11 = &xmmword_25C5218;
  }
  else if (*(unsigned char *)(a1 + 2120))
  {
    BOOL v11 = (long long *)&dword_25C5200;
  }
  else
  {
    BOOL v11 = (long long *)&dword_25C51E8;
  }
LABEL_29:
  if (*((char *)v11 + 23) < 0)
  {
    sub_4200(__p, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = *v11;
    uint64_t v18 = *((void *)v11 + 2);
  }
  if (v10) {
    uint64_t v14 = (const std::string *)__p;
  }
  else {
    uint64_t v14 = (const std::string *)&dword_25C5260;
  }
  std::string::operator=(a3, v14);
  if (((v10 | a2) & 1) == 0)
  {
    if (byte_25C54B7 >= 0) {
      std::string::size_type v15 = (const std::string::value_type *)&qword_25C54A0;
    }
    else {
      std::string::size_type v15 = (const std::string::value_type *)qword_25C54A0;
    }
    if (byte_25C54B7 >= 0) {
      std::string::size_type v16 = byte_25C54B7;
    }
    else {
      std::string::size_type v16 = unk_25C54A8;
    }
    std::string::append(a3, v15, v16);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_8053A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void sub_8053F0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  if ((*(_DWORD *)(a1 + 1848) - 82) > 2)
  {
    int v4 = sub_80D48C(a1);
    if (*((char *)v4 + 23) < 0)
    {
      sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
      int v6 = SHIBYTE(v82);
      if (v82 >= 0) {
        size_t v7 = HIBYTE(v82);
      }
      else {
        size_t v7 = (size_t)__p[1];
      }
      if (v7)
      {
LABEL_10:
        uint64_t v8 = *(void *)(a1 + 1960);
        if (*(unsigned char *)(v8 + 1524) && !*(unsigned char *)(v8 + 1522) && *(unsigned char *)(a1 + 1409) && *(_DWORD *)(a1 + 2128) == 1)
        {
          int v18 = *(_DWORD *)(a1 + 1848);
          if (v18 == 34)
          {
            int v19 = byte_25C4A97;
            if (byte_25C4A97 >= 0) {
              size_t v20 = byte_25C4A97;
            }
            else {
              size_t v20 = *((void *)&xmmword_25C4A80 + 1);
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v63 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v63 > 0x16)
              {
                uint64_t v68 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v63 | 7) != 0x17) {
                  uint64_t v68 = v63 | 7;
                }
                uint64_t v69 = v68 + 1;
                unint64_t v24 = (char *)operator new(v68 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v69 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                int64_t v67 = &xmmword_25C4A80;
                goto LABEL_189;
              }
LABEL_193:
              uint64_t v73 = &v24[v20];
              if (v22)
              {
                if (v21 >= 0) {
                  unint64_t v74 = &qword_25C58D8;
                }
                else {
                  unint64_t v74 = (uint64_t *)qword_25C58D8;
                }
                memmove(v73, v74, v22);
              }
              v73[v22] = 0;
              int v43 = SHIBYTE(v80);
              if (v80 >= 0) {
                size_t v44 = HIBYTE(v80);
              }
              else {
                size_t v44 = (size_t)v79[1];
              }
              unint64_t v75 = v7 + v44;
              if (v7 + v44 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v75 > 0x16)
              {
                uint64_t v76 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v75 | 7) != 0x17) {
                  uint64_t v76 = v75 | 7;
                }
                uint64_t v77 = v76 + 1;
                int64_t v78 = operator new(v76 + 1);
                *(void *)(v3 + 8) = v75;
                *(void *)(v3 + 16) = v77 | 0x8000000000000000;
                *(void *)uint64_t v3 = v78;
                uint64_t v3 = (uint64_t)v78;
              }
              else
              {
                *(void *)(v3 + 8) = 0;
                *(void *)(v3 + 16) = 0;
                *(void *)uint64_t v3 = 0;
                *(unsigned char *)(v3 + 23) = v75;
              }
              if (!v44) {
                goto LABEL_109;
              }
              goto LABEL_105;
            }
          }
          else if (v18 == 33)
          {
            int v19 = byte_25C4A7F;
            if (byte_25C4A7F >= 0) {
              size_t v20 = byte_25C4A7F;
            }
            else {
              size_t v20 = *((void *)&xmmword_25C4A68 + 1);
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v23 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v23 > 0x16)
              {
                uint64_t v65 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v23 | 7) != 0x17) {
                  uint64_t v65 = v23 | 7;
                }
                uint64_t v66 = v65 + 1;
                unint64_t v24 = (char *)operator new(v65 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v66 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                int64_t v67 = &xmmword_25C4A68;
LABEL_189:
                if (v19 >= 0) {
                  size_t v72 = v67;
                }
                else {
                  size_t v72 = *(long long **)v67;
                }
                memmove(v24, v72, v20);
                goto LABEL_193;
              }
              goto LABEL_193;
            }
          }
          else
          {
            int v19 = byte_25C4A67;
            if (byte_25C4A67 >= 0) {
              size_t v20 = byte_25C4A67;
            }
            else {
              size_t v20 = qword_25C4A58;
            }
            int v21 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v22 = byte_25C58EF;
            }
            else {
              size_t v22 = qword_25C58E0;
            }
            unint64_t v64 = v22 + v20;
            if (v22 + v20 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v64 > 0x16)
              {
                uint64_t v70 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v64 | 7) != 0x17) {
                  uint64_t v70 = v64 | 7;
                }
                uint64_t v71 = v70 + 1;
                unint64_t v24 = (char *)operator new(v70 + 1);
                v79[1] = (void *)(v22 + v20);
                int64_t v80 = v71 | 0x8000000000000000;
                v79[0] = v24;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                unint64_t v24 = (char *)v79;
                HIBYTE(v80) = v22 + v20;
              }
              if (v20)
              {
                int64_t v67 = (long long *)&qword_25C4A50;
                goto LABEL_189;
              }
              goto LABEL_193;
            }
          }
          sub_188D690();
        }
        if (*(unsigned char *)(a1 + 1409))
        {
          int v9 = *(_DWORD *)(a1 + 1848);
          if (v9 == 34)
          {
            int v10 = byte_25C4ADF;
            if (byte_25C4ADF >= 0) {
              size_t v11 = byte_25C4ADF;
            }
            else {
              size_t v11 = *((void *)&xmmword_25C4AC8 + 1);
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v25 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v25 > 0x16)
              {
                uint64_t v36 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v25 | 7) != 0x17) {
                  uint64_t v36 = v25 | 7;
                }
                uint64_t v37 = v36 + 1;
                std::string::size_type v15 = (char *)operator new(v36 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v37 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = &xmmword_25C4AC8;
                goto LABEL_90;
              }
LABEL_94:
              uint64_t v41 = &v15[v11];
              if (v13)
              {
                if (v12 >= 0) {
                  int64_t v42 = &qword_25C58D8;
                }
                else {
                  int64_t v42 = (uint64_t *)qword_25C58D8;
                }
                memmove(v41, v42, v13);
              }
              v41[v13] = 0;
              int v43 = SHIBYTE(v80);
              if (v80 >= 0) {
                size_t v44 = HIBYTE(v80);
              }
              else {
                size_t v44 = (size_t)v79[1];
              }
              unint64_t v45 = v7 + v44;
              if (v7 + v44 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v45 > 0x16)
              {
                uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v45 | 7) != 0x17) {
                  uint64_t v48 = v45 | 7;
                }
                uint64_t v49 = v48 + 1;
                std::string::size_type v50 = operator new(v48 + 1);
                *(void *)(v3 + 8) = v45;
                *(void *)(v3 + 16) = v49 | 0x8000000000000000;
                *(void *)uint64_t v3 = v50;
                uint64_t v3 = (uint64_t)v50;
                if (!v44) {
                  goto LABEL_109;
                }
              }
              else
              {
                *(void *)(v3 + 8) = 0;
                *(void *)(v3 + 16) = 0;
                *(void *)uint64_t v3 = 0;
                *(unsigned char *)(v3 + 23) = v45;
                if (!v44)
                {
LABEL_109:
                  int v47 = (void *)(v3 + v44);
LABEL_142:
                  if (v6 >= 0) {
                    char v59 = __p;
                  }
                  else {
                    char v59 = (void **)__p[0];
                  }
                  memmove(v47, v59, v7);
LABEL_146:
                  *((unsigned char *)v47 + v7) = 0;
                  if (v43 < 0)
                  {
                    operator delete(v79[0]);
                    if ((SHIBYTE(v82) & 0x80000000) == 0) {
                      return;
                    }
LABEL_148:
                    operator delete(__p[0]);
                    return;
                  }
LABEL_147:
                  if ((SHIBYTE(v82) & 0x80000000) == 0) {
                    return;
                  }
                  goto LABEL_148;
                }
              }
LABEL_105:
              if (v43 >= 0) {
                uint64_t v46 = v79;
              }
              else {
                uint64_t v46 = (void **)v79[0];
              }
              memmove((void *)v3, v46, v44);
              goto LABEL_109;
            }
          }
          else if (v9 == 33)
          {
            int v10 = byte_25C4AC7;
            if (byte_25C4AC7 >= 0) {
              size_t v11 = byte_25C4AC7;
            }
            else {
              size_t v11 = *((void *)&xmmword_25C4AB0 + 1);
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v14 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v14 > 0x16)
              {
                uint64_t v33 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v14 | 7) != 0x17) {
                  uint64_t v33 = v14 | 7;
                }
                uint64_t v34 = v33 + 1;
                std::string::size_type v15 = (char *)operator new(v33 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v34 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = &xmmword_25C4AB0;
LABEL_90:
                if (v10 >= 0) {
                  int v40 = v35;
                }
                else {
                  int v40 = *(long long **)v35;
                }
                memmove(v15, v40, v11);
                goto LABEL_94;
              }
              goto LABEL_94;
            }
          }
          else
          {
            int v10 = byte_25C4AAF;
            if (byte_25C4AAF >= 0) {
              size_t v11 = byte_25C4AAF;
            }
            else {
              size_t v11 = qword_25C4AA0;
            }
            int v12 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v13 = byte_25C58EF;
            }
            else {
              size_t v13 = qword_25C58E0;
            }
            unint64_t v26 = v13 + v11;
            if (v13 + v11 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v26 > 0x16)
              {
                uint64_t v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v26 | 7) != 0x17) {
                  uint64_t v38 = v26 | 7;
                }
                uint64_t v39 = v38 + 1;
                std::string::size_type v15 = (char *)operator new(v38 + 1);
                v79[1] = (void *)(v13 + v11);
                int64_t v80 = v39 | 0x8000000000000000;
                v79[0] = v15;
              }
              else
              {
                v79[1] = 0;
                int64_t v80 = 0;
                v79[0] = 0;
                std::string::size_type v15 = (char *)v79;
                HIBYTE(v80) = v13 + v11;
              }
              if (v11)
              {
                uint64_t v35 = (long long *)&qword_25C4A98;
                goto LABEL_90;
              }
              goto LABEL_94;
            }
          }
          sub_188D690();
        }
        int v16 = *(_DWORD *)(a1 + 1848);
        if (v16 == 34)
        {
          BOOL v17 = &xmmword_25C5320;
          if ((SHIBYTE(qword_25C5330) & 0x80000000) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          if (v16 != 33)
          {
            int v27 = byte_25C4A1F;
            if (byte_25C4A1F >= 0) {
              size_t v28 = byte_25C4A1F;
            }
            else {
              size_t v28 = qword_25C4A10;
            }
            int v29 = byte_25C58EF;
            if (byte_25C58EF >= 0) {
              size_t v30 = byte_25C58EF;
            }
            else {
              size_t v30 = qword_25C58E0;
            }
            unint64_t v31 = v30 + v28;
            if (v30 + v28 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v31 > 0x16)
            {
              uint64_t v51 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v51 = v31 | 7;
              }
              uint64_t v52 = v51 + 1;
              uint64_t v32 = (char *)operator new(v51 + 1);
              v79[1] = (void *)(v30 + v28);
              int64_t v80 = v52 | 0x8000000000000000;
              v79[0] = v32;
            }
            else
            {
              v79[1] = 0;
              int64_t v80 = 0;
              v79[0] = 0;
              uint64_t v32 = (char *)v79;
              HIBYTE(v80) = v30 + v28;
            }
            if (v28)
            {
              if (v27 >= 0) {
                uint64_t v53 = &qword_25C4A08;
              }
              else {
                uint64_t v53 = (uint64_t *)qword_25C4A08;
              }
              memmove(v32, v53, v28);
            }
            int64_t v54 = &v32[v28];
            if (v30)
            {
              if (v29 >= 0) {
                std::string v55 = &qword_25C58D8;
              }
              else {
                std::string v55 = (uint64_t *)qword_25C58D8;
              }
              memmove(v54, v55, v30);
            }
            v54[v30] = 0;
LABEL_128:
            int v43 = SHIBYTE(v80);
            if (v80 >= 0) {
              size_t v56 = HIBYTE(v80);
            }
            else {
              size_t v56 = (size_t)v79[1];
            }
            int v6 = SHIBYTE(v82);
            if (v82 >= 0) {
              size_t v7 = HIBYTE(v82);
            }
            else {
              size_t v7 = (size_t)__p[1];
            }
            unint64_t v57 = v7 + v56;
            if (v7 + v56 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v57 > 0x16)
            {
              uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17) {
                uint64_t v60 = v57 | 7;
              }
              uint64_t v61 = v60 + 1;
              uint64_t v62 = operator new(v60 + 1);
              *(void *)(v3 + 8) = v57;
              *(void *)(v3 + 16) = v61 | 0x8000000000000000;
              *(void *)uint64_t v3 = v62;
              uint64_t v3 = (uint64_t)v62;
              if (!v56)
              {
LABEL_141:
                int v47 = (void *)(v3 + v56);
                if (!v7) {
                  goto LABEL_146;
                }
                goto LABEL_142;
              }
            }
            else
            {
              *(void *)(v3 + 8) = 0;
              *(void *)(v3 + 16) = 0;
              *(void *)uint64_t v3 = 0;
              *(unsigned char *)(v3 + 23) = v57;
              if (!v56) {
                goto LABEL_141;
              }
            }
            if (v43 >= 0) {
              uint64_t v58 = v79;
            }
            else {
              uint64_t v58 = (void **)v79[0];
            }
            memmove((void *)v3, v58, v56);
            goto LABEL_141;
          }
          BOOL v17 = &xmmword_25C5338;
          if ((byte_25C534F & 0x80000000) == 0)
          {
LABEL_32:
            *(_OWORD *)uint64_t v79 = *v17;
            int64_t v80 = *((void *)v17 + 2);
            goto LABEL_128;
          }
        }
        sub_4200(v79, *(void **)v17, *((void *)v17 + 1));
        goto LABEL_128;
      }
    }
    else
    {
      long long v5 = *v4;
      int64_t v82 = *((void *)v4 + 2);
      *(_OWORD *)std::string __p = v5;
      int v6 = SHIBYTE(v82);
      if (v82 >= 0) {
        size_t v7 = HIBYTE(v82);
      }
      else {
        size_t v7 = *((void *)&v5 + 1);
      }
      if (v7) {
        goto LABEL_10;
      }
    }
    sub_80807C(a1, v3);
    goto LABEL_147;
  }

  sub_80D5B0(a1, a2);
}

void sub_805D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_805D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  return v2 != 0;
}

std::string *sub_805DB4@<X0>(std::string *result@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::pointer data = result[40].__r_.__value_.__l.__data_;
  std::string::size_type size = result[40].__r_.__value_.__l.__size_;
  if (data != (std::string::pointer)size)
  {
    double result = std::string::operator=(a3, (const std::string *)&qword_25C5278);
    if (size - (void)data != 152 && (a2 & 1) == 0)
    {
      if (byte_25C54E7 >= 0) {
        size_t v7 = (const std::string::value_type *)&qword_25C54D0;
      }
      else {
        size_t v7 = (const std::string::value_type *)qword_25C54D0;
      }
      if (byte_25C54E7 >= 0) {
        std::string::size_type v8 = byte_25C54E7;
      }
      else {
        std::string::size_type v8 = *(void *)&word_25C54D8;
      }
      return std::string::append(a3, v7, v8);
    }
  }
  return result;
}

void sub_805E40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_805E5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_805E90(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_805EA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  p_p = &__p;
  uint64_t v260 = a1 + 8;
  sub_635CD0((long long **)(a1 + 8), (uint64_t)&__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  LODWORD(v5) = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v6 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_25C5487 >= 0) {
    size_t v7 = &qword_25C5470;
  }
  else {
    size_t v7 = (uint64_t *)qword_25C5470;
  }
  if (byte_25C5487 >= 0) {
    int64_t v8 = byte_25C5487;
  }
  else {
    int64_t v8 = unk_25C5478;
  }
  uint64_t v261 = v2;
  if (*(unsigned char *)(v2 + 1856))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v8)
    {
      if ((uint64_t)size >= v8)
      {
        int v9 = (char *)p_p + size;
        int v10 = *(char *)v7;
        int64_t v11 = size;
        int v12 = p_p;
        while (1)
        {
          int64_t v13 = v11 - v8;
          if (v13 == -1) {
            goto LABEL_47;
          }
          unint64_t v14 = (char *)memchr(v12, v10, v13 + 1);
          if (!v14) {
            goto LABEL_47;
          }
          std::string::size_type v15 = v14;
          if (!memcmp(v14, v7, v8)) {
            break;
          }
          int v12 = (std::string *)(v15 + 1);
          int64_t v11 = v9 - (v15 + 1);
          if (v11 < v8) {
            goto LABEL_47;
          }
        }
        if (v15 == v9)
        {
LABEL_47:
          uint64_t v2 = v261;
          goto LABEL_48;
        }
        int64_t v23 = v15 - (char *)p_p;
        uint64_t v2 = v261;
        if (v15 - (char *)p_p != -1) {
          goto LABEL_31;
        }
      }
LABEL_48:
      if (byte_25C5457 >= 0) {
        int v29 = &xmmword_25C5440;
      }
      else {
        int v29 = (long long *)xmmword_25C5440;
      }
      if (byte_25C5457 >= 0) {
        int64_t v30 = byte_25C5457;
      }
      else {
        int64_t v30 = *((void *)&xmmword_25C5440 + 1);
      }
      if ((v5 & 0x80u) == 0) {
        unint64_t v31 = &__p;
      }
      else {
        unint64_t v31 = (std::string *)v6;
      }
      if ((v5 & 0x80u) == 0) {
        std::string::size_type v32 = v5;
      }
      else {
        std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
      }
      if (v30)
      {
        if ((uint64_t)v32 >= v30)
        {
          uint64_t v33 = (char *)v31 + v32;
          int v34 = *(char *)v29;
          int64_t v35 = v32;
          uint64_t v36 = v31;
          while (1)
          {
            int64_t v37 = v35 - v30;
            if (v37 == -1) {
              goto LABEL_85;
            }
            uint64_t v38 = (char *)memchr(v36, v34, v37 + 1);
            if (!v38) {
              goto LABEL_85;
            }
            uint64_t v39 = v38;
            if (!memcmp(v38, v29, v30)) {
              break;
            }
            uint64_t v36 = (std::string *)(v39 + 1);
            int64_t v35 = v33 - (v39 + 1);
            if (v35 < v30) {
              goto LABEL_85;
            }
          }
          if (v39 == v33)
          {
LABEL_85:
            uint64_t v2 = v261;
            goto LABEL_86;
          }
          int64_t v40 = v39 - (char *)v31;
          uint64_t v2 = v261;
          if (v39 - (char *)v31 != -1) {
            goto LABEL_69;
          }
        }
LABEL_86:
        if (byte_25C546F >= 0) {
          uint64_t v46 = &qword_25C5458;
        }
        else {
          uint64_t v46 = (uint64_t *)qword_25C5458;
        }
        if (byte_25C546F >= 0) {
          int64_t v47 = byte_25C546F;
        }
        else {
          int64_t v47 = qword_25C5460;
        }
        if ((v5 & 0x80u) == 0) {
          uint64_t v48 = &__p;
        }
        else {
          uint64_t v48 = (std::string *)v6;
        }
        if ((v5 & 0x80u) == 0) {
          std::string::size_type v49 = v5;
        }
        else {
          std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
        }
        if (v47)
        {
          if ((uint64_t)v49 >= v47)
          {
            std::string::size_type v50 = (char *)v48 + v49;
            int v51 = *(char *)v46;
            int64_t v52 = v49;
            uint64_t v53 = v48;
            while (1)
            {
              int64_t v54 = v52 - v47;
              if (v54 == -1) {
                goto LABEL_123;
              }
              std::string v55 = (char *)memchr(v53, v51, v54 + 1);
              if (!v55) {
                goto LABEL_123;
              }
              size_t v56 = v55;
              if (!memcmp(v55, v46, v47)) {
                break;
              }
              uint64_t v53 = (std::string *)(v56 + 1);
              int64_t v52 = v50 - (v56 + 1);
              if (v52 < v47) {
                goto LABEL_123;
              }
            }
            if (v56 == v50)
            {
LABEL_123:
              uint64_t v2 = v261;
              goto LABEL_124;
            }
            int64_t v57 = v56 - (char *)v48;
            uint64_t v2 = v261;
            if (v56 - (char *)v48 != -1) {
              goto LABEL_107;
            }
          }
LABEL_124:
          if (byte_25C5517 >= 0) {
            unint64_t v63 = &qword_25C5500;
          }
          else {
            unint64_t v63 = (uint64_t *)qword_25C5500;
          }
          if (byte_25C5517 >= 0) {
            int64_t v64 = byte_25C5517;
          }
          else {
            int64_t v64 = *(void *)&dword_25C5508;
          }
          if ((v5 & 0x80u) == 0) {
            uint64_t v65 = &__p;
          }
          else {
            uint64_t v65 = (std::string *)v6;
          }
          if ((v5 & 0x80u) == 0) {
            std::string::size_type v66 = v5;
          }
          else {
            std::string::size_type v66 = __p.__r_.__value_.__l.__size_;
          }
          if (v64)
          {
            if ((uint64_t)v66 >= v64)
            {
              int64_t v67 = (char *)v65 + v66;
              int v68 = *(char *)v63;
              int64_t v69 = v66;
              uint64_t v70 = v65;
              while (1)
              {
                int64_t v71 = v69 - v64;
                if (v71 == -1) {
                  goto LABEL_161;
                }
                size_t v72 = (char *)memchr(v70, v68, v71 + 1);
                if (!v72) {
                  goto LABEL_161;
                }
                uint64_t v73 = v72;
                if (!memcmp(v72, v63, v64)) {
                  break;
                }
                uint64_t v70 = (std::string *)(v73 + 1);
                int64_t v69 = v67 - (v73 + 1);
                if (v69 < v64) {
                  goto LABEL_161;
                }
              }
              if (v73 == v67)
              {
LABEL_161:
                uint64_t v2 = v261;
                goto LABEL_162;
              }
              int64_t v74 = v73 - (char *)v65;
              uint64_t v2 = v261;
              if (v73 - (char *)v65 != -1) {
                goto LABEL_145;
              }
            }
LABEL_162:
            if (byte_25C5547 >= 0) {
              int64_t v80 = &qword_25C5530;
            }
            else {
              int64_t v80 = (uint64_t *)qword_25C5530;
            }
            if (byte_25C5547 >= 0) {
              int64_t v81 = byte_25C5547;
            }
            else {
              int64_t v81 = unk_25C5538;
            }
            if ((v5 & 0x80u) == 0) {
              int64_t v82 = &__p;
            }
            else {
              int64_t v82 = (std::string *)v6;
            }
            if ((v5 & 0x80u) == 0) {
              std::string::size_type v83 = v5;
            }
            else {
              std::string::size_type v83 = __p.__r_.__value_.__l.__size_;
            }
            if (v81)
            {
              if ((uint64_t)v83 >= v81)
              {
                int64_t v84 = (char *)v82 + v83;
                int v85 = *(char *)v80;
                int64_t v86 = v83;
                uint64_t v87 = v82;
                while (1)
                {
                  int64_t v88 = v86 - v81;
                  if (v88 == -1) {
                    goto LABEL_199;
                  }
                  uint64_t v89 = (char *)memchr(v87, v85, v88 + 1);
                  if (!v89) {
                    goto LABEL_199;
                  }
                  uint64_t v90 = v89;
                  if (!memcmp(v89, v80, v81)) {
                    break;
                  }
                  uint64_t v87 = (std::string *)(v90 + 1);
                  int64_t v86 = v84 - (v90 + 1);
                  if (v86 < v81) {
                    goto LABEL_199;
                  }
                }
                if (v90 == v84)
                {
LABEL_199:
                  uint64_t v2 = v261;
                  goto LABEL_200;
                }
                int64_t v91 = v90 - (char *)v82;
                uint64_t v2 = v261;
                if (v90 - (char *)v82 != -1) {
                  goto LABEL_183;
                }
              }
LABEL_200:
              if (byte_25C54CF >= 0) {
                uint64_t v97 = &qword_25C54B8;
              }
              else {
                uint64_t v97 = (uint64_t *)qword_25C54B8;
              }
              if (byte_25C54CF >= 0) {
                int64_t v98 = byte_25C54CF;
              }
              else {
                int64_t v98 = *(void *)&word_25C54C0;
              }
              if ((v5 & 0x80u) == 0) {
                unint64_t v99 = &__p;
              }
              else {
                unint64_t v99 = (std::string *)v6;
              }
              if ((v5 & 0x80u) == 0) {
                std::string::size_type v100 = v5;
              }
              else {
                std::string::size_type v100 = __p.__r_.__value_.__l.__size_;
              }
              if (v98)
              {
                if ((uint64_t)v100 >= v98)
                {
                  std::string::size_type v101 = (char *)v99 + v100;
                  int v102 = *(char *)v97;
                  int64_t v103 = v100;
                  uint64_t v104 = v99;
                  while (1)
                  {
                    int64_t v105 = v103 - v98;
                    if (v105 == -1) {
                      break;
                    }
                    int v106 = (char *)memchr(v104, v102, v105 + 1);
                    if (!v106) {
                      break;
                    }
                    std::string::size_type v107 = v106;
                    if (!memcmp(v106, v97, v98))
                    {
                      if (v107 != v101)
                      {
                        int64_t v108 = v107 - (char *)v99;
                        if (v107 - (char *)v99 != -1) {
                          goto LABEL_221;
                        }
                      }
                      goto LABEL_320;
                    }
                    uint64_t v104 = (std::string *)(v107 + 1);
                    int64_t v103 = v101 - (v107 + 1);
                    if (v103 < v98) {
                      goto LABEL_320;
                    }
                  }
                }
                goto LABEL_320;
              }
              int64_t v108 = 0;
LABEL_221:
              std::string::size_type v109 = v108 + v98;
              if (v100 >= v109) {
                std::string::size_type v110 = v109;
              }
              else {
                std::string::size_type v110 = v100;
              }
              if (v110 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v110 >= 0x17)
              {
                uint64_t v111 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v110 | 7) != 0x17) {
                  uint64_t v111 = v110 | 7;
                }
LABEL_559:
                uint64_t v257 = v111 + 1;
                std::string::size_type v148 = (std::string *)operator new(v111 + 1);
                __dst.__r_.__value_.__l.__size_ = v110;
                __dst.__r_.__value_.__r.__words[2] = v257 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
                goto LABEL_560;
              }
              goto LABEL_317;
            }
            int64_t v91 = 0;
LABEL_183:
            std::string::size_type v92 = v91 + v81;
            if (v83 >= v92) {
              std::string::size_type v93 = v92;
            }
            else {
              std::string::size_type v93 = v83;
            }
            if (v93 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v93 >= 0x17)
            {
              uint64_t v95 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v93 | 7) != 0x17) {
                uint64_t v95 = v93 | 7;
              }
              uint64_t v96 = v95 + 1;
              p_dst = (std::string *)operator new(v95 + 1);
              __dst.__r_.__value_.__l.__size_ = v93;
              __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v93;
              p_dst = &__dst;
              if (!v93)
              {
                __dst.__r_.__value_.__s.__data_[0] = 0;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_190:
                  std::string __p = __dst;
                  std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
                  goto LABEL_200;
                }
LABEL_195:
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_190;
              }
            }
            memmove(p_dst, v82, v93);
            p_dst->__r_.__value_.__s.__data_[v93] = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_190;
            }
            goto LABEL_195;
          }
          int64_t v74 = 0;
LABEL_145:
          std::string::size_type v75 = v74 + v64;
          if (v66 >= v75) {
            std::string::size_type v76 = v75;
          }
          else {
            std::string::size_type v76 = v66;
          }
          if (v76 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          if (v76 >= 0x17)
          {
            uint64_t v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v76 | 7) != 0x17) {
              uint64_t v78 = v76 | 7;
            }
            uint64_t v79 = v78 + 1;
            uint64_t v77 = (std::string *)operator new(v78 + 1);
            __dst.__r_.__value_.__l.__size_ = v76;
            __dst.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v76;
            uint64_t v77 = &__dst;
            if (!v76)
            {
              __dst.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_152:
                std::string __p = __dst;
                std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
                goto LABEL_162;
              }
LABEL_157:
              operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_152;
            }
          }
          memmove(v77, v65, v76);
          v77->__r_.__value_.__s.__data_[v76] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_152;
          }
          goto LABEL_157;
        }
        int64_t v57 = 0;
LABEL_107:
        std::string::size_type v58 = v57 + v47;
        if (v49 >= v58) {
          std::string::size_type v59 = v58;
        }
        else {
          std::string::size_type v59 = v49;
        }
        if (v59 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v59 >= 0x17)
        {
          uint64_t v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v61 = v59 | 7;
          }
          uint64_t v62 = v61 + 1;
          uint64_t v60 = (std::string *)operator new(v61 + 1);
          __dst.__r_.__value_.__l.__size_ = v59;
          __dst.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v59;
          uint64_t v60 = &__dst;
          if (!v59)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_114:
              std::string __p = __dst;
              std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
              goto LABEL_124;
            }
LABEL_119:
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_114;
          }
        }
        memmove(v60, v48, v59);
        v60->__r_.__value_.__s.__data_[v59] = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_119;
      }
      int64_t v40 = 0;
LABEL_69:
      std::string::size_type v41 = v40 + v30;
      if (v32 >= v41) {
        std::string::size_type v42 = v41;
      }
      else {
        std::string::size_type v42 = v32;
      }
      if (v42 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        int v43 = (std::string *)operator new(v44 + 1);
        __dst.__r_.__value_.__l.__size_ = v42;
        __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42;
        int v43 = &__dst;
        if (!v42)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            std::string __p = __dst;
            std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_81:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_76;
        }
      }
      memmove(v43, v31, v42);
      v43->__r_.__value_.__s.__data_[v42] = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_81;
    }
    int64_t v23 = 0;
LABEL_31:
    std::string::size_type v24 = v23 + v8;
    if (size >= v24) {
      std::string::size_type v25 = v24;
    }
    else {
      std::string::size_type v25 = size;
    }
    if (v25 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v25 >= 0x17)
    {
      uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17) {
        uint64_t v27 = v25 | 7;
      }
      uint64_t v28 = v27 + 1;
      unint64_t v26 = (std::string *)operator new(v27 + 1);
      __dst.__r_.__value_.__l.__size_ = v25;
      __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25;
      unint64_t v26 = &__dst;
      if (!v25)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          std::string __p = __dst;
          std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
          goto LABEL_48;
        }
LABEL_43:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
    }
    memmove(v26, p_p, v25);
    v26->__r_.__value_.__s.__data_[v25] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }
  if (v8)
  {
    int64_t v16 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v16 < v8) {
      goto LABEL_244;
    }
    BOOL v17 = (char *)p_p + v16;
    int v18 = *(char *)v7;
    int v19 = p_p;
    while (1)
    {
      int64_t v20 = v16 - v8;
      if (v20 == -1 || (int v21 = (char *)memchr(v19, v18, v20 + 1)) == 0)
      {
LABEL_29:
        int64_t v258 = 0;
        uint64_t v2 = v261;
        goto LABEL_256;
      }
      size_t v22 = v21;
      if (!memcmp(v21, v7, v8)) {
        break;
      }
      int v19 = (std::string *)(v22 + 1);
      int64_t v16 = v17 - (v22 + 1);
      if (v16 < v8) {
        goto LABEL_29;
      }
    }
    int64_t v258 = 0;
    if (v22 == v17)
    {
      uint64_t v2 = v261;
      goto LABEL_256;
    }
    uint64_t v2 = v261;
    if (v22 - (char *)p_p == -1) {
      goto LABEL_256;
    }
  }
  if (byte_25C516F >= 0) {
    uint64_t v112 = &qword_25C5158;
  }
  else {
    uint64_t v112 = (uint64_t *)qword_25C5158;
  }
  if (byte_25C516F >= 0) {
    int64_t v113 = byte_25C516F;
  }
  else {
    int64_t v113 = *(void *)&byte_25C5160;
  }
  if (!v113)
  {
LABEL_255:
    int64_t v258 = v8;
    goto LABEL_256;
  }
  int64_t v114 = __p.__r_.__value_.__l.__size_;
  if ((v5 & 0x80000000) == 0) {
    int64_t v114 = size;
  }
  if (v114 < v113)
  {
LABEL_244:
    int64_t v258 = 0;
    goto LABEL_256;
  }
  std::string::size_type v115 = (char *)p_p + v114;
  int v116 = *(char *)v112;
  long long v117 = p_p;
  while (1)
  {
    int64_t v118 = v114 - v113;
    if (v118 == -1)
    {
LABEL_250:
      int64_t v258 = 0;
      goto LABEL_256;
    }
    long long v119 = (char *)memchr(v117, v116, v118 + 1);
    if (!v119)
    {
      int64_t v258 = 0;
LABEL_252:
      uint64_t v2 = v261;
      goto LABEL_256;
    }
    unint64_t v120 = v119;
    if (!memcmp(v119, v112, v113)) {
      break;
    }
    long long v117 = (std::string *)(v120 + 1);
    int64_t v114 = v115 - (v120 + 1);
    uint64_t v2 = v261;
    if (v114 < v113) {
      goto LABEL_250;
    }
  }
  int64_t v258 = 0;
  if (v120 == v115) {
    goto LABEL_252;
  }
  BOOL v152 = v120 - (char *)p_p == -1;
  uint64_t v2 = v261;
  if (!v152) {
    goto LABEL_255;
  }
LABEL_256:
  if (byte_25C5457 >= 0) {
    int v121 = &xmmword_25C5440;
  }
  else {
    int v121 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v122 = byte_25C5457;
  }
  else {
    int64_t v122 = *((void *)&xmmword_25C5440 + 1);
  }
  if ((v5 & 0x80000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!v122)
  {
    int64_t v130 = 0;
LABEL_273:
    int64_t v131 = v258 + v122 + v130;
    if (size >= v131 + 1) {
      std::string::size_type v132 = v131 + 1;
    }
    else {
      std::string::size_type v132 = size;
    }
    if (v132 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v132 >= 0x17)
    {
      uint64_t v134 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v132 | 7) != 0x17) {
        uint64_t v134 = v132 | 7;
      }
      uint64_t v135 = v134 + 1;
      uint64_t v133 = (std::string *)operator new(v134 + 1);
      __dst.__r_.__value_.__l.__size_ = v132;
      __dst.__r_.__value_.__r.__words[2] = v135 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v132;
      uint64_t v133 = &__dst;
      if (!v132) {
        goto LABEL_284;
      }
    }
    memmove(v133, p_p, v132);
LABEL_284:
    v133->__r_.__value_.__s.__data_[v132] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __dst;
    std::string::size_type v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
    goto LABEL_291;
  }
  if ((uint64_t)size >= v122)
  {
    int v123 = (char *)p_p + size;
    int v124 = *(char *)v121;
    int64_t v125 = size;
    int v126 = p_p;
    while (1)
    {
      int64_t v127 = v125 - v122;
      if (v127 == -1) {
        goto LABEL_290;
      }
      int v128 = (char *)memchr(v126, v124, v127 + 1);
      if (!v128) {
        goto LABEL_290;
      }
      int v129 = v128;
      if (!memcmp(v128, v121, v122)) {
        break;
      }
      int v126 = (std::string *)(v129 + 1);
      int64_t v125 = v123 - (v129 + 1);
      if (v125 < v122) {
        goto LABEL_290;
      }
    }
    if (v129 == v123)
    {
LABEL_290:
      uint64_t v2 = v261;
      goto LABEL_291;
    }
    int64_t v130 = v129 - (char *)p_p;
    uint64_t v2 = v261;
    if (v129 - (char *)p_p != -1) {
      goto LABEL_273;
    }
  }
LABEL_291:
  if (byte_25C546F >= 0) {
    std::string::size_type v136 = &qword_25C5458;
  }
  else {
    std::string::size_type v136 = (uint64_t *)qword_25C5458;
  }
  if (byte_25C546F >= 0) {
    int64_t v137 = byte_25C546F;
  }
  else {
    int64_t v137 = qword_25C5460;
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v99 = &__p;
  }
  else {
    unint64_t v99 = (std::string *)v6;
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v138 = v5;
  }
  else {
    std::string::size_type v138 = __p.__r_.__value_.__l.__size_;
  }
  if (!v137)
  {
    int64_t v146 = 0;
LABEL_312:
    int64_t v147 = v258 + v137 + v146;
    if (v138 >= v147 + 1) {
      std::string::size_type v110 = v147 + 1;
    }
    else {
      std::string::size_type v110 = v138;
    }
    if (v110 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v110 >= 0x17)
    {
      uint64_t v111 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v110 | 7) != 0x17) {
        uint64_t v111 = v110 | 7;
      }
      goto LABEL_559;
    }
LABEL_317:
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110;
    std::string::size_type v148 = &__dst;
    if (!v110)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_561:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_319:
      std::string __p = __dst;
      goto LABEL_320;
    }
LABEL_560:
    memmove(v148, v99, v110);
    v148->__r_.__value_.__s.__data_[v110] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_561;
    }
    goto LABEL_319;
  }
  if ((uint64_t)v138 >= v137)
  {
    unint64_t v139 = (char *)v99 + v138;
    int v140 = *(char *)v136;
    int64_t v141 = v138;
    uint64_t v142 = v99;
    do
    {
      int64_t v143 = v141 - v137;
      if (v143 == -1) {
        break;
      }
      std::string::size_type v144 = (char *)memchr(v142, v140, v143 + 1);
      if (!v144) {
        break;
      }
      unint64_t v145 = v144;
      if (!memcmp(v144, v136, v137))
      {
        if (v145 != v139)
        {
          int64_t v146 = v145 - (char *)v99;
          if (v145 - (char *)v99 != -1) {
            goto LABEL_312;
          }
        }
        break;
      }
      uint64_t v142 = (std::string *)(v145 + 1);
      int64_t v141 = v139 - (v145 + 1);
    }
    while (v141 >= v137);
  }
LABEL_320:
  unsigned int v149 = *(_DWORD *)(v2 + 1848);
  BOOL v150 = v149 > 0x22;
  uint64_t v151 = (1 << v149) & 0x600040000;
  BOOL v152 = v150 || v151 == 0;
  if (v152) {
    goto LABEL_377;
  }
  uint64_t v153 = sub_80D48C(v2);
  if (*((char *)v153 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v153, *((void *)v153 + 1));
  }
  else
  {
    long long v154 = *v153;
    __dst.__r_.__value_.__r.__words[2] = *((void *)v153 + 2);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v154;
  }
  char v155 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v156 = __dst.__r_.__value_.__l.__size_;
    if (!__dst.__r_.__value_.__l.__size_)
    {
      sub_4200(&v264, __dst.__r_.__value_.__l.__data_, 0);
      goto LABEL_356;
    }
LABEL_331:
    int v157 = byte_25C58EF;
    if (byte_25C58EF >= 0) {
      size_t v158 = byte_25C58EF;
    }
    else {
      size_t v158 = qword_25C58E0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v159 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v159 = v156;
    }
    unint64_t v160 = v159 + v158;
    if (v159 + v158 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v160 > 0x16)
    {
      uint64_t v165 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v160 | 7) != 0x17) {
        uint64_t v165 = v160 | 7;
      }
      uint64_t v166 = v165 + 1;
      unint64_t v161 = (char *)operator new(v165 + 1);
      v264.__r_.__value_.__l.__size_ = v159 + v158;
      v264.__r_.__value_.__r.__words[2] = v166 | 0x8000000000000000;
      v264.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
      if (!v158) {
        goto LABEL_344;
      }
    }
    else
    {
      memset(&v264, 0, sizeof(v264));
      unint64_t v161 = (char *)&v264;
      *((unsigned char *)&v264.__r_.__value_.__s + 23) = v159 + v158;
      if (!v158)
      {
LABEL_344:
        uint64_t v163 = &v161[v158];
        if (v159)
        {
          if (v155 >= 0) {
            int v164 = &__dst;
          }
          else {
            int v164 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          memmove(v163, v164, v159);
        }
        v163[v159] = 0;
        goto LABEL_356;
      }
    }
    if (v157 >= 0) {
      long long v162 = &qword_25C58D8;
    }
    else {
      long long v162 = (uint64_t *)qword_25C58D8;
    }
    memmove(v161, v162, v158);
    goto LABEL_344;
  }
  if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
  {
    std::string::size_type v156 = __dst.__r_.__value_.__l.__size_;
    goto LABEL_331;
  }
  std::string v264 = __dst;
LABEL_356:
  int v167 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v168 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v168 = __p.__r_.__value_.__l.__size_;
  }
  int v169 = SHIBYTE(v264.__r_.__value_.__r.__words[2]);
  if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v170 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v170 = v264.__r_.__value_.__l.__size_;
  }
  unint64_t v171 = v170 + v168;
  if (v170 + v168 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 > 0x16)
  {
    uint64_t v188 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v188 = v171 | 7;
    }
    uint64_t v189 = v188 + 1;
    uint64_t v172 = (std::string *)operator new(v188 + 1);
    v265.__r_.__value_.__l.__size_ = v170 + v168;
    v265.__r_.__value_.__r.__words[2] = v189 | 0x8000000000000000;
    v265.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
    if (v168)
    {
LABEL_365:
      if (v167 >= 0) {
        uint64_t v173 = &__p;
      }
      else {
        uint64_t v173 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v172, v173, v168);
    }
  }
  else
  {
    memset(&v265, 0, sizeof(v265));
    uint64_t v172 = &v265;
    *((unsigned char *)&v265.__r_.__value_.__s + 23) = v170 + v168;
    if (v168) {
      goto LABEL_365;
    }
  }
  int v174 = (char *)v172 + v168;
  if (v170)
  {
    if (v169 >= 0) {
      char v175 = &v264;
    }
    else {
      char v175 = (std::string *)v264.__r_.__value_.__r.__words[0];
    }
    memmove(v174, v175, v170);
  }
  v174[v170] = 0;
  if (v167 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = v265;
    if ((*((unsigned char *)&v264.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_521;
    }
LABEL_376:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_522:
    }
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string __p = v265;
    if ((v169 & 0x80) == 0) {
      goto LABEL_376;
    }
LABEL_521:
    operator delete(v264.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_522;
    }
  }
LABEL_377:
  int v176 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v177 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v177 = __p.__r_.__value_.__l.__size_;
  }
  int v178 = byte_25C57B7;
  if (byte_25C57B7 >= 0) {
    size_t v179 = byte_25C57B7;
  }
  else {
    size_t v179 = qword_25C57A8;
  }
  unint64_t v180 = v179 + v177;
  if (v179 + v177 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 > 0x16)
  {
    uint64_t v186 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v186 = v180 | 7;
    }
    uint64_t v187 = v186 + 1;
    unint64_t v181 = (std::string *)operator new(v186 + 1);
    __dst.__r_.__value_.__l.__size_ = v179 + v177;
    __dst.__r_.__value_.__r.__words[2] = v187 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
    if (v177)
    {
LABEL_386:
      if (v176 >= 0) {
        int v182 = &__p;
      }
      else {
        int v182 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v181, v182, v177);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v181 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v179 + v177;
    if (v177) {
      goto LABEL_386;
    }
  }
  uint64_t v183 = (char *)v181 + v177;
  if (v179)
  {
    if (v178 >= 0) {
      char v184 = &qword_25C57A0;
    }
    else {
      char v184 = (uint64_t *)qword_25C57A0;
    }
    memmove(v183, v184, v179);
  }
  v183[v179] = 0;
  if (v176 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = __dst;
    unsigned __int8 v185 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_407;
    }
LABEL_397:
    std::string __dst = __p;
  }
  else
  {
    std::string __p = __dst;
    unsigned __int8 v185 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_397;
    }
LABEL_407:
    sub_4200(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    unsigned __int8 v185 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  size_t v190 = &v268;
  int v191 = (char)v185;
  if ((v185 & 0x80u) == 0) {
    size_t v192 = v185;
  }
  else {
    size_t v192 = __p.__r_.__value_.__l.__size_;
  }
  int v193 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v194 = byte_25C58D7;
  }
  else {
    size_t v194 = qword_25C58C8;
  }
  unint64_t v195 = v194 + v192;
  if (v194 + v192 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v195 > 0x16)
  {
    uint64_t v232 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17) {
      uint64_t v232 = v195 | 7;
    }
    uint64_t v233 = v232 + 1;
    unint64_t v234 = operator new(v232 + 1);
    size_t v269 = v194 + v192;
    unint64_t v270 = v233 | 0x8000000000000000;
    long long v268 = v234;
    size_t v190 = (void **)v234;
    if (v192)
    {
LABEL_417:
      if (v191 >= 0) {
        unint64_t v196 = &__p;
      }
      else {
        unint64_t v196 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v190, v196, v192);
    }
  }
  else
  {
    size_t v269 = 0;
    unint64_t v270 = 0;
    long long v268 = 0;
    HIBYTE(v270) = v194 + v192;
    if (v192) {
      goto LABEL_417;
    }
  }
  uint64_t v197 = (char *)v190 + v192;
  if (v194)
  {
    if (v193 >= 0) {
      uint64_t v198 = &qword_25C58C0;
    }
    else {
      uint64_t v198 = (uint64_t *)qword_25C58C0;
    }
    memmove(v197, v198, v194);
  }
  v197[v194] = 0;
  if (v195 > 0x16)
  {
    uint64_t v235 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17) {
      uint64_t v235 = v195 | 7;
    }
    uint64_t v236 = v235 + 1;
    uint64_t v199 = (char *)operator new(v235 + 1);
    v264.__r_.__value_.__l.__size_ = v194 + v192;
    v264.__r_.__value_.__r.__words[2] = v236 | 0x8000000000000000;
    v264.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
    if (v192)
    {
LABEL_428:
      if (v191 >= 0) {
        unint64_t v200 = &__p;
      }
      else {
        unint64_t v200 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v199, v200, v192);
    }
  }
  else
  {
    memset(&v264, 0, sizeof(v264));
    uint64_t v199 = (char *)&v264;
    *((unsigned char *)&v264.__r_.__value_.__s + 23) = v194 + v192;
    if (v192) {
      goto LABEL_428;
    }
  }
  uint64_t v201 = &v199[v192];
  if (v193 >= 0) {
    uint64_t v202 = &qword_25C58C0;
  }
  else {
    uint64_t v202 = (uint64_t *)qword_25C58C0;
  }
  if (v194) {
    memmove(v201, v202, v194);
  }
  v201[v194] = 0;
  unint64_t v203 = std::string::append(&v264, (const std::string::value_type *)v202, v194);
  long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  std::string::size_type v272 = v203->__r_.__value_.__r.__words[2];
  long long v271 = v204;
  v203->__r_.__value_.__l.__size_ = 0;
  v203->__r_.__value_.__r.__words[2] = 0;
  v203->__r_.__value_.__r.__words[0] = 0;
  int v205 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v206 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v206 = __p.__r_.__value_.__l.__size_;
  }
  int v207 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v208 = byte_25C58D7;
  }
  else {
    size_t v208 = qword_25C58C8;
  }
  unint64_t v209 = v208 + v206;
  if (v208 + v206 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v209 > 0x16)
  {
    uint64_t v237 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17) {
      uint64_t v237 = v209 | 7;
    }
    uint64_t v238 = v237 + 1;
    uint64_t v210 = (char *)operator new(v237 + 1);
    v262.__r_.__value_.__l.__size_ = v208 + v206;
    v262.__r_.__value_.__r.__words[2] = v238 | 0x8000000000000000;
    v262.__r_.__value_.__r.__words[0] = (std::string::size_type)v210;
    if (v206)
    {
LABEL_446:
      if (v205 >= 0) {
        unint64_t v211 = &__p;
      }
      else {
        unint64_t v211 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v210, v211, v206);
    }
  }
  else
  {
    memset(&v262, 0, sizeof(v262));
    uint64_t v210 = (char *)&v262;
    *((unsigned char *)&v262.__r_.__value_.__s + 23) = v208 + v206;
    if (v206) {
      goto LABEL_446;
    }
  }
  uint64_t v212 = &v210[v206];
  if (v207 >= 0) {
    std::string v213 = &qword_25C58C0;
  }
  else {
    std::string v213 = (uint64_t *)qword_25C58C0;
  }
  if (v208) {
    memmove(v212, v213, v208);
  }
  v212[v208] = 0;
  int v214 = std::string::append(&v262, (const std::string::value_type *)v213, v208);
  long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0;
  v214->__r_.__value_.__r.__words[2] = 0;
  v214->__r_.__value_.__r.__words[0] = 0;
  if (byte_25C58D7 >= 0) {
    std::string v216 = (const std::string::value_type *)&qword_25C58C0;
  }
  else {
    std::string v216 = (const std::string::value_type *)qword_25C58C0;
  }
  if (byte_25C58D7 >= 0) {
    std::string::size_type v217 = byte_25C58D7;
  }
  else {
    std::string::size_type v217 = qword_25C58C8;
  }
  uint64_t v218 = std::string::append(&v263, v216, v217);
  long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
  std::string::size_type v274 = v218->__r_.__value_.__r.__words[2];
  long long v273 = v219;
  v218->__r_.__value_.__l.__size_ = 0;
  v218->__r_.__value_.__r.__words[2] = 0;
  v218->__r_.__value_.__r.__words[0] = 0;
  sub_28C774(&v265, (uint64_t)&__dst, 4uLL);
  if ((SHIBYTE(v274) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v272) & 0x80000000) == 0) {
      goto LABEL_463;
    }
LABEL_504:
    operator delete((void *)v271);
    if (SHIBYTE(v270) < 0) {
      goto LABEL_505;
    }
LABEL_464:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_465;
    }
LABEL_506:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_507;
    }
LABEL_466:
    if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_467;
    }
LABEL_508:
    operator delete(v262.__r_.__value_.__l.__data_);
    if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_509;
    }
LABEL_468:
    int v220 = *(_DWORD *)(v261 + 1848);
    if (v220 <= 84) {
      goto LABEL_469;
    }
LABEL_510:
    if (v220 != 85 && v220 != 88) {
      goto LABEL_546;
    }
    int v239 = *(unsigned __int8 *)(*(void *)(v261 + 1960) + 1522);
    uint64_t v240 = 33;
    if (v239 == 11) {
      uint64_t v240 = 36;
    }
    unint64_t v241 = (std::string *)&qword_25C4780;
    if (v239 != 11) {
      unint64_t v241 = (std::string *)&qword_25C4768;
    }
    uint64_t v242 = &byte_25C477F;
    if (v239 == 11) {
      uint64_t v242 = &byte_25C4797;
    }
    if (*v242 < 0)
    {
      if (v239 == 11) {
        uint64_t v246 = (unint64_t *)&dword_25C4788;
      }
      else {
        uint64_t v246 = (unint64_t *)&unk_25C4770;
      }
      sub_4200(&v264, (void *)qword_25C4660[v240], *v246);
    }
    else
    {
      std::string v264 = *v241;
    }
    if (byte_25C57B7 >= 0) {
      v247 = (const std::string::value_type *)&qword_25C57A0;
    }
    else {
      v247 = (const std::string::value_type *)qword_25C57A0;
    }
    if (byte_25C57B7 >= 0) {
      std::string::size_type v248 = byte_25C57B7;
    }
    else {
      std::string::size_type v248 = qword_25C57A8;
    }
    int v249 = std::string::append(&v264, v247, v248);
    long long v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v250;
    v249->__r_.__value_.__l.__size_ = 0;
    v249->__r_.__value_.__r.__words[2] = 0;
    v249->__r_.__value_.__r.__words[0] = 0;
    v251 = (_OWORD *)v265.__r_.__value_.__l.__size_;
    if (v265.__r_.__value_.__l.__size_ < v265.__r_.__value_.__r.__words[2])
    {
      long long v252 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(v265.__r_.__value_.__l.__size_ + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      _OWORD *v251 = v252;
      memset(&__dst, 0, sizeof(__dst));
      v265.__r_.__value_.__l.__size_ = (std::string::size_type)v251 + 24;
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_544;
      }
      goto LABEL_546;
    }
    v265.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6E8C4((void **)&v265.__r_.__value_.__l.__data_, (uint64_t)&__dst);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_544;
      }
      goto LABEL_546;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_546;
    }
LABEL_544:
    uint64_t v245 = (void *)v264.__r_.__value_.__r.__words[0];
LABEL_545:
    operator delete(v245);
    goto LABEL_546;
  }
  operator delete((void *)v273);
  if (SHIBYTE(v272) < 0) {
    goto LABEL_504;
  }
LABEL_463:
  if ((SHIBYTE(v270) & 0x80000000) == 0) {
    goto LABEL_464;
  }
LABEL_505:
  operator delete(v268);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_506;
  }
LABEL_465:
  if ((SHIBYTE(v263.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_466;
  }
LABEL_507:
  operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_508;
  }
LABEL_467:
  if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_468;
  }
LABEL_509:
  operator delete(v264.__r_.__value_.__l.__data_);
  int v220 = *(_DWORD *)(v261 + 1848);
  if (v220 > 84) {
    goto LABEL_510;
  }
LABEL_469:
  if (v220 != 17 && v220 != 25) {
    goto LABEL_546;
  }
  int v221 = byte_25C4767;
  if (byte_25C4767 >= 0) {
    size_t v222 = byte_25C4767;
  }
  else {
    size_t v222 = qword_25C4758;
  }
  int v223 = byte_25C57B7;
  if (byte_25C57B7 >= 0) {
    size_t v224 = byte_25C57B7;
  }
  else {
    size_t v224 = qword_25C57A8;
  }
  unint64_t v225 = v224 + v222;
  if (v224 + v222 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v225 > 0x16)
  {
    uint64_t v243 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17) {
      uint64_t v243 = v225 | 7;
    }
    uint64_t v244 = v243 + 1;
    uint64_t v226 = (std::string *)operator new(v243 + 1);
    __dst.__r_.__value_.__l.__size_ = v224 + v222;
    __dst.__r_.__value_.__r.__words[2] = v244 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
    if (v222)
    {
LABEL_480:
      if (v221 >= 0) {
        uint64_t v227 = &qword_25C4750;
      }
      else {
        uint64_t v227 = (uint64_t *)qword_25C4750;
      }
      memmove(v226, v227, v222);
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v226 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v224 + v222;
    if (v222) {
      goto LABEL_480;
    }
  }
  uint64_t v228 = (char *)v226 + v222;
  if (v224)
  {
    if (v223 >= 0) {
      v229 = &qword_25C57A0;
    }
    else {
      v229 = (uint64_t *)qword_25C57A0;
    }
    memmove(v228, v229, v224);
  }
  v228[v224] = 0;
  int v230 = (_OWORD *)v265.__r_.__value_.__l.__size_;
  if (v265.__r_.__value_.__l.__size_ < v265.__r_.__value_.__r.__words[2])
  {
    long long v231 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(void *)(v265.__r_.__value_.__l.__size_ + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
    *int v230 = v231;
    v265.__r_.__value_.__l.__size_ = (std::string::size_type)v230 + 24;
    goto LABEL_546;
  }
  v265.__r_.__value_.__l.__size_ = (std::string::size_type)sub_6E8C4((void **)&v265.__r_.__value_.__l.__data_, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v245 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_545;
  }
LABEL_546:
  uint64_t v253 = sub_5231C(v260);
  sub_635474(a2, (std::string **)&v265, v253);
  std::string::size_type v254 = v265.__r_.__value_.__r.__words[0];
  if (v265.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v255 = v265.__r_.__value_.__l.__size_;
    v256 = (void *)v265.__r_.__value_.__r.__words[0];
    if (v265.__r_.__value_.__l.__size_ != v265.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v255 - 1) < 0) {
          operator delete(*(void **)(v255 - 24));
        }
        v255 -= 24;
      }
      while (v255 != v254);
      v256 = (void *)v265.__r_.__value_.__r.__words[0];
    }
    v265.__r_.__value_.__l.__size_ = v254;
    operator delete(v256);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_8076B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_807910(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)(a1 + 1952) + 1932)
    || *(void *)(a1 + 1864) == -1
    && *(void *)(a1 + 1872) == -1
    && *(void *)(a1 + 1880) == -1
    && *(void *)(a1 + 1888) == -1
    && *(void *)(a1 + 1896) == -1
    && *(void *)(a1 + 1904) == -1
    && *(void *)(a1 + 1912) == -1
    && !*(unsigned char *)(a1 + 1860))
  {
    return;
  }
  sub_80807C(a1, (uint64_t)&v48);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v47 = v48;
LABEL_13:
    std::string v46 = v48;
    goto LABEL_14;
  }
  sub_4200(&v47, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
  sub_4200(&v46, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
LABEL_14:
  sub_8051B0(a1, 1, &v45);
  sub_7FA67C((void *)a1, (uint64_t)v43);
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (byte_25C58EF >= 0) {
      std::string::size_type v5 = (const std::string::value_type *)&qword_25C58D8;
    }
    else {
      std::string::size_type v5 = (const std::string::value_type *)qword_25C58D8;
    }
    if (byte_25C58EF >= 0) {
      std::string::size_type v6 = byte_25C58EF;
    }
    else {
      std::string::size_type v6 = qword_25C58E0;
    }
    std::string::append(&v47, v5, v6);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v7 = &v45;
    }
    else {
      size_t v7 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v8 = v45.__r_.__value_.__l.__size_;
    }
    std::string::append(&v47, (const std::string::value_type *)v7, v8);
  }
  if (byte_25C57B7 >= 0) {
    int v9 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int v9 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v10 = byte_25C57B7;
  }
  else {
    std::string::size_type v10 = qword_25C57A8;
  }
  std::string::append(&v47, v9, v10);
  if ((v44 & 0x80u) == 0) {
    int64_t v11 = v43;
  }
  else {
    int64_t v11 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v12 = v44;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v43[1];
  }
  std::string::append(&v46, (const std::string::value_type *)v11, v12);
  if (byte_25C57B7 >= 0) {
    int64_t v13 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int64_t v13 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v14 = byte_25C57B7;
  }
  else {
    std::string::size_type v14 = qword_25C57A8;
  }
  std::string::append(&v46, v13, v14);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    sub_4200(&v49, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v46;
  }
  unsigned __int8 v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200(&v50, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
    unsigned __int8 v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string v50 = v47;
  }
  int64_t v16 = &v51;
  int v17 = (char)v15;
  if ((v15 & 0x80u) == 0) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v47.__r_.__value_.__l.__size_;
  }
  int v19 = byte_25C58D7;
  if (byte_25C58D7 >= 0) {
    size_t v20 = byte_25C58D7;
  }
  else {
    size_t v20 = qword_25C58C8;
  }
  unint64_t v21 = v20 + v18;
  if (v20 + v18 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v21 <= 0x16)
  {
    size_t v52 = 0;
    unint64_t v53 = 0;
    int v51 = 0;
    HIBYTE(v53) = v20 + v18;
    if (!v18) {
      goto LABEL_67;
    }
    goto LABEL_63;
  }
  uint64_t v34 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v34 = v21 | 7;
  }
  uint64_t v35 = v34 + 1;
  uint64_t v36 = operator new(v34 + 1);
  size_t v52 = v20 + v18;
  unint64_t v53 = v35 | 0x8000000000000000;
  int v51 = v36;
  int64_t v16 = (void **)v36;
  if (v18)
  {
LABEL_63:
    if (v17 >= 0) {
      size_t v22 = &v47;
    }
    else {
      size_t v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    memmove(v16, v22, v18);
  }
LABEL_67:
  int64_t v23 = (char *)v16 + v18;
  if (v20)
  {
    if (v19 >= 0) {
      std::string::size_type v24 = &qword_25C58C0;
    }
    else {
      std::string::size_type v24 = (uint64_t *)qword_25C58C0;
    }
    memmove(v23, v24, v20);
  }
  v23[v20] = 0;
  if (v21 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20 + v18;
    if (!v18) {
      goto LABEL_78;
    }
    goto LABEL_74;
  }
  uint64_t v37 = a2;
  uint64_t v38 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v21 | 7) != 0x17) {
    uint64_t v38 = v21 | 7;
  }
  uint64_t v39 = v38 + 1;
  p_dst = (std::string *)operator new(v38 + 1);
  __dst.__r_.__value_.__l.__size_ = v20 + v18;
  __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  a2 = v37;
  if (v18)
  {
LABEL_74:
    if (v17 >= 0) {
      unint64_t v26 = &v47;
    }
    else {
      unint64_t v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v26, v18);
  }
LABEL_78:
  uint64_t v27 = (char *)p_dst + v18;
  if (v19 >= 0) {
    uint64_t v28 = &qword_25C58C0;
  }
  else {
    uint64_t v28 = (uint64_t *)qword_25C58C0;
  }
  if (v20) {
    memmove(v27, v28, v20);
  }
  v27[v20] = 0;
  int v29 = std::string::append(&__dst, (const std::string::value_type *)v28, v20);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  std::string::size_type v55 = v29->__r_.__value_.__r.__words[2];
  long long v54 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  sub_28C774(&__p, (uint64_t)&v49, 4uLL);
  if (SHIBYTE(v55) < 0)
  {
    operator delete((void *)v54);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
      goto LABEL_112;
    }
  }
  else if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v51);
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_113:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_114;
  }
LABEL_112:
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_113;
  }
LABEL_87:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_114:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_88:
  sub_6355F8(a2, (std::string **)&__p);
  unint64_t v31 = (void **)__p;
  if (__p)
  {
    std::string::size_type v32 = v42;
    uint64_t v33 = __p;
    if (v42 != __p)
    {
      do
      {
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 -= 3;
      }
      while (v32 != v31);
      uint64_t v33 = __p;
    }
    std::string::size_type v42 = v31;
    operator delete(v33);
  }
  if ((char)v44 < 0)
  {
    operator delete(v43[0]);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
LABEL_117:
      operator delete(v46.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_108:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_119:
        operator delete(v48.__r_.__value_.__l.__data_);
        return;
      }
      goto LABEL_118;
    }
  }
  else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_106;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_117;
  }
LABEL_107:
  if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_108;
  }
LABEL_118:
  operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_119;
  }
}

void sub_807EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0)
  {
    operator delete(a27);
    if (a38 < 0)
    {
LABEL_3:
      operator delete(a33);
      _Unwind_Resume(a1);
    }
  }
  else if (a38 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

double sub_80807C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (long long *)&qword_25C4948;
  switch(*(_DWORD *)(a1 + 1848))
  {
    case 0:
    case 3:
    case 5:
    case 0xC:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4738;
      goto LABEL_11;
    case 1:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&unk_25C47F8;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5080;
      goto LABEL_12;
    case 2:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4810;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5098;
      goto LABEL_12;
    case 4:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&dword_25C48E8;
      std::string::size_type v6 = &qword_25C4900;
      goto LABEL_12;
    case 6:
      uint64_t v3 = &xmmword_25C4B40;
      goto LABEL_15;
    case 7:
      uint64_t v3 = &xmmword_25C4B70;
      goto LABEL_15;
    case 0xB:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D50;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x10:
      int v7 = *(unsigned __int8 *)(a1 + 1855);
      std::string::size_type v8 = &xmmword_25C49D8;
      goto LABEL_33;
    case 0x11:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4750;
LABEL_11:
      std::string::size_type v6 = (uint64_t *)(v5 + 144);
      goto LABEL_12;
    case 0x12:
      uint64_t v3 = (long long *)&qword_25C4A08;
      goto LABEL_15;
    case 0x14:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C48B8;
      goto LABEL_20;
    case 0x15:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C48D0;
LABEL_20:
      std::string::size_type v12 = v11 + 285;
      int64_t v13 = v11 + 249;
      goto LABEL_61;
    case 0x16:
      goto LABEL_15;
    case 0x17:
      uint64_t v3 = (long long *)&qword_25C4960;
      goto LABEL_15;
    case 0x18:
      uint64_t v3 = (long long *)&qword_25C4978;
      goto LABEL_15;
    case 0x19:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4798;
      std::string::size_type v6 = &qword_25C5068;
      goto LABEL_12;
    case 0x1A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4930;
      std::string::size_type v6 = &qword_25C50B0;
      goto LABEL_12;
    case 0x1B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4828;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5080;
      goto LABEL_12;
    case 0x1C:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4840;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5098;
      goto LABEL_12;
    case 0x1D:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4D68;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x1E:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4D80;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x21:
      uint64_t v3 = &xmmword_25C4A20;
      goto LABEL_15;
    case 0x22:
      uint64_t v3 = &xmmword_25C4A38;
      goto LABEL_15;
    case 0x23:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4918;
      std::string::size_type v6 = &qword_25C50C8;
      goto LABEL_12;
    case 0x27:
      int v7 = *(unsigned __int8 *)(a1 + 1855);
      std::string::size_type v8 = &xmmword_25C49F0;
LABEL_33:
      if (v7) {
        uint64_t v3 = v8 + 117;
      }
      else {
        uint64_t v3 = v8;
      }
      goto LABEL_15;
    case 0x29:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B88;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BA0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BB8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2C:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BD0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2D:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4BE8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2E:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C00;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x2F:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C18;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x30:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C30;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x31:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C48;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x32:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4C60;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x33:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C78;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x34:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4C90;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x35:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CA8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x36:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CC0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x37:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CD8;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x38:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4CF0;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x39:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D08;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3A:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D20;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3B:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D38;
      std::string::size_type v6 = &qword_25C50E0;
      goto LABEL_12;
    case 0x3C:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = &qword_25C4858;
      goto LABEL_57;
    case 0x3D:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C4870;
LABEL_57:
      std::string::size_type v12 = v11 + 291;
      int64_t v13 = v11 + 261;
      goto LABEL_61;
    case 0x3E:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C4888;
      goto LABEL_60;
    case 0x3F:
      int v10 = *(unsigned __int8 *)(a1 + 1856);
      int64_t v11 = (uint64_t *)&xmmword_25C48A0;
LABEL_60:
      std::string::size_type v12 = v11 + 291;
      int64_t v13 = v11 + 255;
LABEL_61:
      if (*(unsigned char *)(*(void *)(a1 + 1952) + 1898)) {
        std::string::size_type v14 = (long long *)v12;
      }
      else {
        std::string::size_type v14 = (long long *)v13;
      }
      if (v10) {
        uint64_t v3 = (long long *)v11;
      }
      else {
        uint64_t v3 = v14;
      }
      goto LABEL_15;
    case 0x40:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4D98;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x41:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4DB0;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x42:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = (long long *)&qword_25C4DC8;
      std::string::size_type v6 = (uint64_t *)&xmmword_25C5038;
      goto LABEL_12;
    case 0x52:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v15 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = (long long *)&qword_25C4AE0;
      if (v15) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
      goto LABEL_107;
    case 0x53:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v16 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = &xmmword_25C4AF8;
      if (v16) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
      goto LABEL_107;
    case 0x54:
      if (*(char *)(a1 + 1007) < 0) {
        uint64_t v17 = *(void *)(a1 + 992);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(a1 + 1007);
      }
      std::string::size_type v24 = &xmmword_25C4B10;
      if (v17) {
        std::string::size_type v25 = &qword_25C4FD8;
      }
      else {
        std::string::size_type v25 = &qword_25C4FC0;
      }
LABEL_107:
      sub_7F3820((const void **)v24, (const void **)v25, (uint64_t)&__p);
      goto LABEL_108;
    case 0x55:
      sub_7FA998((void *)a1, (uint64_t)&__p);
LABEL_108:
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&__p.__r_.__value_.__l.__data_;
      *(std::string *)a2 = __p;
      return result;
    case 0x56:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B70;
      std::string::size_type v6 = &qword_25C50F8;
      goto LABEL_12;
    case 0x57:
      int v4 = *(unsigned __int8 *)(a1 + 1856);
      std::string::size_type v5 = &xmmword_25C4B70;
      std::string::size_type v6 = &qword_25C5110;
LABEL_12:
      if (v4) {
        uint64_t v3 = v5;
      }
      else {
        uint64_t v3 = (long long *)v6;
      }
      goto LABEL_15;
    case 0x58:
      sub_7FA998((void *)a1, (uint64_t)&__p);
      if (byte_25C47C7 >= 0) {
        size_t v18 = (const std::string::value_type *)&qword_25C47B0;
      }
      else {
        size_t v18 = (const std::string::value_type *)qword_25C47B0;
      }
      if (byte_25C47C7 >= 0) {
        std::string::size_type v19 = byte_25C47C7;
      }
      else {
        std::string::size_type v19 = unk_25C47B8;
      }
      size_t v20 = std::string::append(&__p, v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v27[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      uint64_t v23 = v27[0];
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v23;
      *(void *)(a2 + 15) = *(void *)((char *)v27 + 7);
      *(unsigned char *)(a2 + 23) = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return result;
    case 0x59:
      uint64_t v3 = (long long *)&qword_25C4DF8;
      goto LABEL_15;
    case 0x5A:
      uint64_t v3 = (long long *)&qword_25C4E10;
      goto LABEL_15;
    case 0x5B:
      uint64_t v3 = &xmmword_25C4990;
      goto LABEL_15;
    case 0x5C:
      uint64_t v3 = &xmmword_25C49A8;
      goto LABEL_15;
    case 0x5D:
      uint64_t v3 = &xmmword_25C49C0;
      goto LABEL_15;
    case 0x5E:
      uint64_t v3 = &xmmword_25C4E28;
LABEL_15:
      std::string::operator=((std::string *)a2, (const std::string *)v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_8086B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0)
  {
    operator delete(*(void **)v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_80888C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  if (byte_25C5C08[23] < 0) {
    sub_4200(&__p, *(void **)byte_25C5C08, *(unint64_t *)&byte_25C5C08[8]);
  }
  else {
    std::string __p = *(std::string *)byte_25C5C08;
  }
  if (byte_25C5457 >= 0) {
    uint64_t v2 = (const std::string::value_type *)&xmmword_25C5440;
  }
  else {
    uint64_t v2 = (const std::string::value_type *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    std::string::size_type v3 = byte_25C5457;
  }
  else {
    std::string::size_type v3 = *((void *)&xmmword_25C5440 + 1);
  }
  std::string::append(&__p, v2, v3);
  if (byte_25C57B7 >= 0) {
    int v4 = (const std::string::value_type *)&qword_25C57A0;
  }
  else {
    int v4 = (const std::string::value_type *)qword_25C57A0;
  }
  if (byte_25C57B7 >= 0) {
    std::string::size_type v5 = byte_25C57B7;
  }
  else {
    std::string::size_type v5 = qword_25C57A8;
  }
  std::string::append(&__p, v4, v5);
  sub_635560(a1, (uint64_t)&__p);
  sub_635560(a1, (uint64_t)byte_25C5C08);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_80899C(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_8089B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

void sub_8089D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 72))(&v12);
  uint64_t v10 = 0;
  int64_t v11 = 0;
  sub_6370D4(a2, &v12, 1, &v10);
  std::string::size_type v3 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = v15;
  if (v15)
  {
    do
    {
      std::string::size_type v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      int v4 = v5;
    }
    while (v5);
  }
  std::string::size_type v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
  int v7 = (void **)v12;
  if (v12)
  {
    std::string::size_type v8 = v13;
    int v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = v12;
    }
    int64_t v13 = v7;
    operator delete(v9);
  }
}

void sub_808B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

std::string *sub_808B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = (std::string *)sub_635CD0((long long **)(a1 + 8), a2);
  if (*(unsigned char *)(a1 + 1860))
  {
    char v5 = *(unsigned char *)(a2 + 23);
    std::string::size_type v6 = v5 >= 0 ? (std::string *)a2 : *(std::string **)a2;
    int v7 = byte_25C5B47 >= 0 ? &xmmword_25C5B30 : (long long *)xmmword_25C5B30;
    int64_t v8 = byte_25C5B47 >= 0 ? byte_25C5B47 : *((void *)&xmmword_25C5B30 + 1);
    if (v8)
    {
      if (v5 >= 0) {
        int64_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        int64_t v9 = *(void *)(a2 + 8);
      }
      uint64_t v10 = (std::string *)((char *)v6 + v9);
      if (v9 >= v8)
      {
        int v15 = *(char *)v7;
        int64_t v16 = v9;
        double result = v6;
        do
        {
          int64_t v17 = v16 - v8;
          if (v17 == -1) {
            break;
          }
          double result = (std::string *)memchr(result, v15, v17 + 1);
          if (!result) {
            break;
          }
          size_t v18 = result;
          double result = (std::string *)memcmp(result, v7, v8);
          if (!result)
          {
            if (v18 != v10 && (char *)v18 - (char *)v6 != -1) {
              return result;
            }
            break;
          }
          double result = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
          int64_t v16 = (char *)v10 - ((char *)&v18->__r_.__value_.__l.__data_ + 1);
        }
        while (v16 >= v8);
      }
      if (byte_25C567F >= 0) {
        int64_t v11 = &xmmword_25C5668;
      }
      else {
        int64_t v11 = (long long *)xmmword_25C5668;
      }
      if (byte_25C567F >= 0) {
        int64_t v12 = byte_25C567F;
      }
      else {
        int64_t v12 = *((void *)&xmmword_25C5668 + 1);
      }
      if (v12)
      {
        if (v9 >= v12)
        {
          int v13 = *(char *)v11;
          double result = v6;
          do
          {
            if (v9 - v12 == -1) {
              break;
            }
            double result = (std::string *)memchr(result, v13, v9 - v12 + 1);
            if (!result) {
              break;
            }
            uint64_t v14 = result;
            double result = (std::string *)memcmp(result, v11, v12);
            if (!result)
            {
              if (v14 != v10)
              {
                std::string::size_type v19 = (char *)v14 - (char *)v6;
                if ((char *)v14 - (char *)v6 != -1) {
                  return std::string::erase((std::string *)a2, v19, v12);
                }
              }
              return result;
            }
            double result = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + 1);
            int64_t v9 = (char *)v10 - ((char *)&v14->__r_.__value_.__l.__data_ + 1);
          }
          while (v9 >= v12);
        }
      }
      else
      {
        std::string::size_type v19 = 0;
        return std::string::erase((std::string *)a2, v19, v12);
      }
    }
  }
  return result;
}

void sub_808CBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_808CD8(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  memset(&v216, 0, sizeof(v216));
  if (*(unsigned char *)(*(void *)(a1 + 1952) + 1896))
  {
    if (*(unsigned char *)(a1 + 1856))
    {
      if (*(unsigned char *)(a1 + 1853))
      {
        unsigned int v8 = *(_DWORD *)(a1 + 1848);
        if (v8 <= 0x3F && ((1 << v8) & 0xF00000000030000ELL) != 0) {
          std::string::operator=(&v216, (const std::string *)&dword_25C5578);
        }
      }
    }
  }
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  std::string::append(&v216, v10, v11);
  uint64_t v212 = a1;
  int v12 = *((char *)a2 + 23);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v13 = (size_t)a2[1];
  }
  int v14 = SHIBYTE(v216.__r_.__value_.__r.__words[2]);
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v216.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = size + v13;
  if (size + v13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v16 <= 0x16)
  {
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v215) = size + v13;
    if (!v13) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v24 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17) {
    uint64_t v24 = v16 | 7;
  }
  uint64_t v25 = v24 + 1;
  p_dst = (long long *)operator new(v24 + 1);
  *((void *)&__dst + 1) = size + v13;
  unint64_t v215 = v25 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v13)
  {
LABEL_22:
    if (v12 >= 0) {
      size_t v18 = (char *)a2;
    }
    else {
      size_t v18 = (char *)*a2;
    }
    memmove(p_dst, v18, v13);
  }
LABEL_26:
  std::string::size_type v19 = (char *)p_dst + v13;
  if (size)
  {
    if (v14 >= 0) {
      size_t v20 = &v216;
    }
    else {
      size_t v20 = (std::string *)v216.__r_.__value_.__r.__words[0];
    }
    memmove(v19, v20, size);
  }
  v19[size] = 0;
  unint64_t v21 = *(void *)(a4 + 8);
  uint64_t v22 = v212;
  if (v21 >= *(void *)(a4 + 16))
  {
    unint64_t v26 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v27 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v26;
    if (v27 < 0)
    {
      operator delete((void *)__dst);
      if (!*(unsigned char *)(v22 + 1856)) {
        goto LABEL_409;
      }
    }
    else if (!*(unsigned char *)(v22 + 1856))
    {
      goto LABEL_409;
    }
  }
  else
  {
    long long v23 = __dst;
    *(void *)(v21 + 16) = v215;
    *(_OWORD *)unint64_t v21 = v23;
    *(void *)(a4 + 8) = v21 + 24;
    if (!*(unsigned char *)(v22 + 1856)) {
      goto LABEL_409;
    }
  }
  uint64_t v210 = a3;
  std::string::size_type v28 = *((unsigned __int8 *)a2 + 23);
  if ((v28 & 0x80u) == 0) {
    int v29 = (char *)a2;
  }
  else {
    int v29 = (char *)*a2;
  }
  if (byte_25C5487 >= 0) {
    long long v30 = &qword_25C5470;
  }
  else {
    long long v30 = (uint64_t *)qword_25C5470;
  }
  if (byte_25C5487 >= 0) {
    int64_t v31 = byte_25C5487;
  }
  else {
    int64_t v31 = unk_25C5478;
  }
  if (v31)
  {
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v32 = (char *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      std::string::size_type v32 = (char *)a2[1];
    }
    uint64_t v33 = &v32[(void)v29];
    if ((uint64_t)v32 >= v31)
    {
      int v53 = *(char *)v30;
      long long v54 = v29;
      do
      {
        std::string::size_type v55 = &v32[-v31];
        if (v55 == (char *)-1) {
          break;
        }
        size_t v56 = (char *)memchr(v54, v53, (size_t)(v55 + 1));
        if (!v56) {
          break;
        }
        uint64_t v34 = v56;
        if (!memcmp(v56, v30, v31)) {
          goto LABEL_55;
        }
        long long v54 = v34 + 1;
        std::string::size_type v32 = (char *)(v33 - (v34 + 1));
      }
      while ((uint64_t)v32 >= v31);
    }
    uint64_t v34 = v33;
LABEL_55:
    uint64_t v35 = v34 - v29;
    if (v34 == v33) {
      uint64_t v35 = -1;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  uint64_t v209 = v35;
  if (byte_25C5457 >= 0) {
    uint64_t v36 = &xmmword_25C5440;
  }
  else {
    uint64_t v36 = (long long *)xmmword_25C5440;
  }
  if (byte_25C5457 >= 0) {
    int64_t v37 = byte_25C5457;
  }
  else {
    int64_t v37 = *((void *)&xmmword_25C5440 + 1);
  }
  if (v37)
  {
    if ((v28 & 0x80u) == 0) {
      uint64_t v38 = (char *)v28;
    }
    else {
      uint64_t v38 = (char *)a2[1];
    }
    uint64_t v39 = &v38[(void)v29];
    if ((uint64_t)v38 >= v37)
    {
      int v57 = *(char *)v36;
      std::string::size_type v58 = v29;
      do
      {
        std::string::size_type v59 = &v38[-v37];
        if (v59 == (char *)-1) {
          break;
        }
        uint64_t v60 = (char *)memchr(v58, v57, (size_t)(v59 + 1));
        if (!v60) {
          break;
        }
        int64_t v40 = v60;
        if (!memcmp(v60, v36, v37)) {
          goto LABEL_71;
        }
        std::string::size_type v58 = v40 + 1;
        uint64_t v38 = (char *)(v39 - (v40 + 1));
      }
      while ((uint64_t)v38 >= v37);
    }
    int64_t v40 = v39;
LABEL_71:
    uint64_t v41 = v40 - v29;
    if (v40 == v39) {
      uint64_t v41 = -1;
    }
    uint64_t v207 = v41;
  }
  else
  {
    uint64_t v207 = 0;
  }
  if (byte_25C546F >= 0) {
    std::string::size_type v42 = &qword_25C5458;
  }
  else {
    std::string::size_type v42 = (uint64_t *)qword_25C5458;
  }
  if (byte_25C546F >= 0) {
    int64_t v43 = byte_25C546F;
  }
  else {
    int64_t v43 = qword_25C5460;
  }
  if (v43)
  {
    if ((v28 & 0x80u) == 0) {
      unsigned __int8 v44 = (char *)v28;
    }
    else {
      unsigned __int8 v44 = (char *)a2[1];
    }
    std::string v45 = &v44[(void)v29];
    if ((uint64_t)v44 >= v43)
    {
      int v61 = *(char *)v42;
      uint64_t v62 = v29;
      do
      {
        unint64_t v63 = &v44[-v43];
        if (v63 == (char *)-1) {
          break;
        }
        int64_t v64 = (char *)memchr(v62, v61, (size_t)(v63 + 1));
        if (!v64) {
          break;
        }
        std::string v46 = v64;
        if (!memcmp(v64, v42, v43)) {
          goto LABEL_87;
        }
        uint64_t v62 = v46 + 1;
        unsigned __int8 v44 = (char *)(v45 - (v46 + 1));
      }
      while ((uint64_t)v44 >= v43);
    }
    std::string v46 = v45;
LABEL_87:
    if (v46 == v45) {
      unint64_t v47 = -1;
    }
    else {
      unint64_t v47 = v46 - v29;
    }
  }
  else
  {
    unint64_t v47 = 0;
  }
  if (byte_25C54CF >= 0) {
    std::string v48 = &qword_25C54B8;
  }
  else {
    std::string v48 = (uint64_t *)qword_25C54B8;
  }
  if (byte_25C54CF >= 0) {
    int64_t v49 = byte_25C54CF;
  }
  else {
    int64_t v49 = *(void *)&word_25C54C0;
  }
  unint64_t v211 = v47;
  if (v49)
  {
    if ((v28 & 0x80u) == 0) {
      std::string v50 = (char *)v28;
    }
    else {
      std::string v50 = (char *)a2[1];
    }
    int v51 = &v50[(void)v29];
    if ((uint64_t)v50 >= v49)
    {
      int v65 = *(char *)v48;
      std::string::size_type v66 = v29;
      do
      {
        int64_t v67 = &v50[-v49];
        if (v67 == (char *)-1) {
          break;
        }
        int v68 = (char *)memchr(v66, v65, (size_t)(v67 + 1));
        if (!v68) {
          break;
        }
        size_t v52 = v68;
        if (!memcmp(v68, v48, v49)) {
          goto LABEL_128;
        }
        std::string::size_type v66 = v52 + 1;
        std::string v50 = (char *)(v51 - (v52 + 1));
      }
      while ((uint64_t)v50 >= v49);
      size_t v52 = v51;
LABEL_128:
      unint64_t v47 = v211;
    }
    else
    {
      size_t v52 = &v50[(void)v29];
    }
    uint64_t v69 = v52 - v29;
    if (v52 == v51) {
      uint64_t v69 = -1;
    }
    uint64_t v208 = v69;
  }
  else
  {
    uint64_t v208 = 0;
  }
  if (byte_25C54E7 >= 0) {
    uint64_t v70 = &qword_25C54D0;
  }
  else {
    uint64_t v70 = (uint64_t *)qword_25C54D0;
  }
  if (byte_25C54E7 >= 0) {
    int64_t v71 = byte_25C54E7;
  }
  else {
    int64_t v71 = *(void *)&word_25C54D8;
  }
  if (v71)
  {
    if ((v28 & 0x80u) == 0) {
      size_t v72 = (char *)v28;
    }
    else {
      size_t v72 = (char *)a2[1];
    }
    uint64_t v73 = &v72[(void)v29];
    if ((uint64_t)v72 >= v71)
    {
      int v76 = *(char *)v70;
      uint64_t v77 = v29;
      do
      {
        uint64_t v78 = &v72[-v71];
        if (v78 == (char *)-1) {
          break;
        }
        uint64_t v79 = (char *)memchr(v77, v76, (size_t)(v78 + 1));
        if (!v79) {
          break;
        }
        int64_t v74 = v79;
        if (!memcmp(v79, v70, v71)) {
          goto LABEL_151;
        }
        uint64_t v77 = v74 + 1;
        size_t v72 = (char *)(v73 - (v74 + 1));
      }
      while ((uint64_t)v72 >= v71);
      int64_t v74 = v73;
LABEL_151:
      unint64_t v47 = v211;
    }
    else
    {
      int64_t v74 = &v72[(void)v29];
    }
    if (v74 == v73) {
      unint64_t v75 = -1;
    }
    else {
      unint64_t v75 = v74 - v29;
    }
  }
  else
  {
    unint64_t v75 = 0;
  }
  if (byte_25C54B7 >= 0) {
    int64_t v80 = &qword_25C54A0;
  }
  else {
    int64_t v80 = (uint64_t *)qword_25C54A0;
  }
  if (byte_25C54B7 >= 0) {
    int64_t v81 = byte_25C54B7;
  }
  else {
    int64_t v81 = unk_25C54A8;
  }
  if (!v81)
  {
    uint64_t v84 = 0;
    if (v75 != -1) {
      goto LABEL_180;
    }
    goto LABEL_206;
  }
  if ((v28 & 0x80u) == 0) {
    int64_t v82 = (char *)v28;
  }
  else {
    int64_t v82 = (char *)a2[1];
  }
  std::string::size_type v83 = &v82[(void)v29];
  if ((uint64_t)v82 >= v81)
  {
    int v85 = *(char *)v80;
    int64_t v86 = v29;
    do
    {
      uint64_t v87 = &v82[-v81];
      if (v87 == (char *)-1) {
        break;
      }
      int64_t v88 = (char *)memchr(v86, v85, (size_t)(v87 + 1));
      if (!v88) {
        break;
      }
      uint64_t v89 = v88;
      if (!memcmp(v88, v80, v81)) {
        goto LABEL_176;
      }
      int64_t v86 = v89 + 1;
      int64_t v82 = (char *)(v83 - (v89 + 1));
    }
    while ((uint64_t)v82 >= v81);
    uint64_t v89 = v83;
LABEL_176:
    unint64_t v47 = v211;
    if (v89 == v83) {
      uint64_t v84 = -1;
    }
    else {
      uint64_t v84 = v89 - v29;
    }
    if (v75 != -1) {
      goto LABEL_180;
    }
LABEL_206:
    std::string::size_type v101 = v208;
    std::string::size_type v102 = v209;
    uint64_t v103 = v210;
    uint64_t v104 = v212;
    if (v208 == -1) {
      goto LABEL_234;
    }
    goto LABEL_207;
  }
  uint64_t v84 = -1;
  if (v75 == -1) {
    goto LABEL_206;
  }
LABEL_180:
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v90 = v28;
  }
  else {
    std::string::size_type v90 = (std::string::size_type)a2[1];
  }
  if (v90 >= v75) {
    std::string::size_type v91 = v75;
  }
  else {
    std::string::size_type v91 = v90;
  }
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v91 >= 0x17)
  {
    uint64_t v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v93 = v91 | 7;
    }
    uint64_t v94 = v93 + 1;
    std::string::size_type v92 = operator new(v93 + 1);
    v213.__r_.__value_.__l.__size_ = v91;
    v213.__r_.__value_.__r.__words[2] = v94 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    unint64_t v47 = v211;
    goto LABEL_193;
  }
  *((unsigned char *)&v213.__r_.__value_.__s + 23) = v91;
  std::string::size_type v92 = &v213;
  if (v91) {
LABEL_193:
  }
    memmove(v92, v29, v91);
  *((unsigned char *)v92 + v91) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v95 = &v216;
  }
  else {
    uint64_t v95 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v96 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v96 = v216.__r_.__value_.__l.__size_;
  }
  uint64_t v97 = std::string::append(&v213, (const std::string::value_type *)v95, v96);
  long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  unint64_t v215 = v97->__r_.__value_.__r.__words[2];
  long long __dst = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  unint64_t v99 = *(void *)(a4 + 8);
  if (v99 >= *(void *)(a4 + 16))
  {
    int64_t v105 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v106 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v105;
    if (v106 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_206;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_206;
    }
  }
  else
  {
    long long v100 = __dst;
    *(void *)(v99 + 16) = v215;
    *(_OWORD *)unint64_t v99 = v100;
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    *(void *)(a4 + 8) = v99 + 24;
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_206;
    }
  }
  operator delete(v213.__r_.__value_.__l.__data_);
  std::string::size_type v101 = v208;
  std::string::size_type v102 = v209;
  uint64_t v103 = v210;
  uint64_t v104 = v212;
  if (v208 == -1) {
    goto LABEL_234;
  }
LABEL_207:
  std::string::size_type v107 = *((unsigned __int8 *)a2 + 23);
  int v108 = (char)v107;
  if ((v107 & 0x80u) != 0) {
    std::string::size_type v107 = (std::string::size_type)a2[1];
  }
  if (v108 >= 0) {
    std::string::size_type v109 = a2;
  }
  else {
    std::string::size_type v109 = *a2;
  }
  if (v107 >= v101) {
    std::string::size_type v110 = v101;
  }
  else {
    std::string::size_type v110 = v107;
  }
  if (v110 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 >= 0x17)
  {
    uint64_t v112 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17) {
      uint64_t v112 = v110 | 7;
    }
    uint64_t v113 = v112 + 1;
    uint64_t v111 = operator new(v112 + 1);
    v213.__r_.__value_.__l.__size_ = v110;
    v213.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    unint64_t v47 = v211;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v110;
    uint64_t v111 = &v213;
    if (!v110) {
      goto LABEL_223;
    }
  }
  memmove(v111, v109, v110);
LABEL_223:
  *((unsigned char *)v111 + v110) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v114 = &v216;
  }
  else {
    int64_t v114 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v115 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v115 = v216.__r_.__value_.__l.__size_;
  }
  int v116 = std::string::append(&v213, (const std::string::value_type *)v114, v115);
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  unint64_t v215 = v116->__r_.__value_.__r.__words[2];
  long long __dst = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  unint64_t v118 = *(void *)(a4 + 8);
  if (v118 < *(void *)(a4 + 16))
  {
    long long v119 = __dst;
    *(void *)(v118 + 16) = v215;
    *(_OWORD *)unint64_t v118 = v119;
    unint64_t v215 = 0;
    long long __dst = 0uLL;
    *(void *)(a4 + 8) = v118 + 24;
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_234;
    }
    goto LABEL_231;
  }
  unint64_t v120 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
  int v121 = SHIBYTE(v215);
  *(void *)(a4 + 8) = v120;
  if ((v121 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_234;
    }
LABEL_231:
    operator delete(v213.__r_.__value_.__l.__data_);
    goto LABEL_234;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_231;
  }
LABEL_234:
  if (v47 != -1)
  {
    std::string::size_type v122 = *((unsigned __int8 *)a2 + 23);
    int v123 = (char)v122;
    if ((v122 & 0x80u) != 0) {
      std::string::size_type v122 = (std::string::size_type)a2[1];
    }
    if (v123 >= 0) {
      int v124 = a2;
    }
    else {
      int v124 = *a2;
    }
    if (v122 >= v47) {
      std::string::size_type v125 = v47;
    }
    else {
      std::string::size_type v125 = v122;
    }
    if (v125 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v125 >= 0x17)
    {
      uint64_t v132 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17) {
        uint64_t v132 = v125 | 7;
      }
      uint64_t v133 = v132 + 1;
      int v126 = operator new(v132 + 1);
      v213.__r_.__value_.__l.__size_ = v125;
      v213.__r_.__value_.__r.__words[2] = v133 | 0x8000000000000000;
      v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    }
    else
    {
      *((unsigned char *)&v213.__r_.__value_.__s + 23) = v125;
      int v126 = &v213;
      if (!v125)
      {
LABEL_264:
        v126[v125] = 0;
        int v134 = *(char *)(v103 + 23);
        if (v134 >= 0) {
          uint64_t v135 = (const std::string::value_type *)v103;
        }
        else {
          uint64_t v135 = *(const std::string::value_type **)v103;
        }
        if (v134 >= 0) {
          std::string::size_type v136 = *(unsigned __int8 *)(v103 + 23);
        }
        else {
          std::string::size_type v136 = *(void *)(v103 + 8);
        }
        int64_t v137 = std::string::append(&v213, v135, v136);
        long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        unint64_t v215 = v137->__r_.__value_.__r.__words[2];
        long long __dst = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        unint64_t v139 = *(void *)(a4 + 8);
        if (v139 >= *(void *)(a4 + 16))
        {
          int v140 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
          goto LABEL_293;
        }
LABEL_287:
        long long v147 = __dst;
        *(void *)(v139 + 16) = v215;
        *(_OWORD *)unint64_t v139 = v147;
        unint64_t v215 = 0;
        long long __dst = 0uLL;
        *(void *)(a4 + 8) = v139 + 24;
        if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_295;
        }
        goto LABEL_288;
      }
    }
    memmove(v126, v124, v125);
    goto LABEL_264;
  }
  if (v84 == -1) {
    goto LABEL_295;
  }
  unint64_t v127 = *((unsigned __int8 *)a2 + 23);
  int v128 = (char)v127;
  if ((v127 & 0x80u) != 0) {
    unint64_t v127 = (unint64_t)a2[1];
  }
  if (v128 >= 0) {
    int v129 = a2;
  }
  else {
    int v129 = *a2;
  }
  if (v127 >= v84 - 1) {
    std::string::size_type v130 = v84 - 1;
  }
  else {
    std::string::size_type v130 = v127;
  }
  if (v130 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 >= 0x17)
  {
    uint64_t v141 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17) {
      uint64_t v141 = v130 | 7;
    }
    uint64_t v142 = v141 + 1;
    int64_t v131 = operator new(v141 + 1);
    v213.__r_.__value_.__l.__size_ = v130;
    v213.__r_.__value_.__r.__words[2] = v142 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    goto LABEL_279;
  }
  *((unsigned char *)&v213.__r_.__value_.__s + 23) = v130;
  int64_t v131 = &v213;
  if (v130) {
LABEL_279:
  }
    memmove(v131, v129, v130);
  *((unsigned char *)v131 + v130) = 0;
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v143 = &v216;
  }
  else {
    int64_t v143 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v144 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v144 = v216.__r_.__value_.__l.__size_;
  }
  unint64_t v145 = std::string::append(&v213, (const std::string::value_type *)v143, v144);
  long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  unint64_t v215 = v145->__r_.__value_.__r.__words[2];
  long long __dst = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  unint64_t v139 = *(void *)(a4 + 8);
  if (v139 < *(void *)(a4 + 16)) {
    goto LABEL_287;
  }
  int v140 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
LABEL_293:
  int v149 = SHIBYTE(v215);
  *(void *)(a4 + 8) = v140;
  if (v149 < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_295:
      std::string::size_type v148 = v207;
      if (v207 == -1) {
        goto LABEL_324;
      }
      goto LABEL_296;
    }
  }
  else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_295;
  }
LABEL_288:
  operator delete(v213.__r_.__value_.__l.__data_);
  std::string::size_type v148 = v207;
  if (v207 == -1) {
    goto LABEL_324;
  }
LABEL_296:
  std::string::size_type v150 = v148;
  std::string::size_type v151 = *((unsigned __int8 *)a2 + 23);
  int v152 = (char)v151;
  if ((v151 & 0x80u) != 0) {
    std::string::size_type v151 = (std::string::size_type)a2[1];
  }
  if (v152 >= 0) {
    uint64_t v153 = a2;
  }
  else {
    uint64_t v153 = *a2;
  }
  if (v151 >= v150) {
    std::string::size_type v154 = v150;
  }
  else {
    std::string::size_type v154 = v151;
  }
  if (v154 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v154 >= 0x17)
  {
    uint64_t v156 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v154 | 7) != 0x17) {
      uint64_t v156 = v154 | 7;
    }
    uint64_t v157 = v156 + 1;
    char v155 = operator new(v156 + 1);
    v213.__r_.__value_.__l.__size_ = v154;
    v213.__r_.__value_.__r.__words[2] = v157 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v154;
    char v155 = &v213;
    if (!v154) {
      goto LABEL_312;
    }
  }
  memmove(v155, v153, v154);
LABEL_312:
  *((unsigned char *)v155 + v154) = 0;
  int v158 = *(char *)(v103 + 23);
  if (v158 >= 0) {
    size_t v159 = (const std::string::value_type *)v103;
  }
  else {
    size_t v159 = *(const std::string::value_type **)v103;
  }
  if (v158 >= 0) {
    std::string::size_type v160 = *(unsigned __int8 *)(v103 + 23);
  }
  else {
    std::string::size_type v160 = *(void *)(v103 + 8);
  }
  unint64_t v161 = std::string::append(&v213, v159, v160);
  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  unint64_t v215 = v161->__r_.__value_.__r.__words[2];
  long long __dst = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  unint64_t v163 = *(void *)(a4 + 8);
  if (v163 >= *(void *)(a4 + 16))
  {
    uint64_t v165 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v166 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v165;
    if (v166 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_324;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_324;
    }
LABEL_320:
    operator delete(v213.__r_.__value_.__l.__data_);
    if (v102 == -1) {
      goto LABEL_352;
    }
    goto LABEL_325;
  }
  long long v164 = __dst;
  *(void *)(v163 + 16) = v215;
  *(_OWORD *)unint64_t v163 = v164;
  unint64_t v215 = 0;
  long long __dst = 0uLL;
  *(void *)(a4 + 8) = v163 + 24;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_320;
  }
LABEL_324:
  if (v102 == -1) {
    goto LABEL_352;
  }
LABEL_325:
  std::string::size_type v167 = *((unsigned __int8 *)a2 + 23);
  int v168 = (char)v167;
  if ((v167 & 0x80u) != 0) {
    std::string::size_type v167 = (std::string::size_type)a2[1];
  }
  if (v168 >= 0) {
    int v169 = a2;
  }
  else {
    int v169 = *a2;
  }
  if (v167 >= v102) {
    std::string::size_type v170 = v102;
  }
  else {
    std::string::size_type v170 = v167;
  }
  if (v170 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v170 >= 0x17)
  {
    uint64_t v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v170 | 7) != 0x17) {
      uint64_t v172 = v170 | 7;
    }
    uint64_t v173 = v172 + 1;
    unint64_t v171 = operator new(v172 + 1);
    v213.__r_.__value_.__l.__size_ = v170;
    v213.__r_.__value_.__r.__words[2] = v173 | 0x8000000000000000;
    v213.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
  }
  else
  {
    *((unsigned char *)&v213.__r_.__value_.__s + 23) = v170;
    unint64_t v171 = &v213;
    if (!v170) {
      goto LABEL_341;
    }
  }
  memmove(v171, v169, v170);
LABEL_341:
  *((unsigned char *)v171 + v170) = 0;
  int v174 = *(char *)(v103 + 23);
  if (v174 >= 0) {
    char v175 = (const std::string::value_type *)v103;
  }
  else {
    char v175 = *(const std::string::value_type **)v103;
  }
  if (v174 >= 0) {
    std::string::size_type v176 = *(unsigned __int8 *)(v103 + 23);
  }
  else {
    std::string::size_type v176 = *(void *)(v103 + 8);
  }
  size_t v177 = std::string::append(&v213, v175, v176);
  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  unint64_t v215 = v177->__r_.__value_.__r.__words[2];
  long long __dst = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  unint64_t v179 = *(void *)(a4 + 8);
  if (v179 >= *(void *)(a4 + 16))
  {
    unint64_t v181 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
    int v182 = SHIBYTE(v215);
    *(void *)(a4 + 8) = v181;
    if (v182 < 0)
    {
      operator delete((void *)__dst);
      if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_352;
      }
    }
    else if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_352;
    }
    goto LABEL_349;
  }
  long long v180 = __dst;
  *(void *)(v179 + 16) = v215;
  *(_OWORD *)unint64_t v179 = v180;
  unint64_t v215 = 0;
  long long __dst = 0uLL;
  *(void *)(a4 + 8) = v179 + 24;
  if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
LABEL_349:
  }
    operator delete(v213.__r_.__value_.__l.__data_);
LABEL_352:
  if (*(_DWORD *)(v104 + 1848) != 17 || !*(unsigned char *)(v104 + 1856)) {
    goto LABEL_409;
  }
  uint64_t v183 = *(unsigned __int8 ***)(v104 + 1968);
  char v184 = *((unsigned char *)v183 + 23);
  if (v184 < 0)
  {
    if (!v183[1]) {
      goto LABEL_409;
    }
  }
  else if (!*((unsigned char *)v183 + 23))
  {
    goto LABEL_409;
  }
  uint64_t v185 = qword_25C6328;
  uint64_t v186 = *(void *)algn_25C6330;
  if (qword_25C6328 != *(void *)algn_25C6330)
  {
    if (v184 >= 0) {
      uint64_t v187 = (unsigned __int8 *)*((unsigned __int8 *)v183 + 23);
    }
    else {
      uint64_t v187 = v183[1];
    }
    if (v184 >= 0) {
      uint64_t v188 = (unsigned __int8 *)v183;
    }
    else {
      uint64_t v188 = *v183;
    }
    while (1)
    {
      uint64_t v189 = *(unsigned __int8 *)(v185 + 23);
      if ((v189 & 0x80u) == 0) {
        size_t v190 = (unsigned __int8 *)*(unsigned __int8 *)(v185 + 23);
      }
      else {
        size_t v190 = *(unsigned __int8 **)(v185 + 8);
      }
      if (v190 == v187)
      {
        if ((v189 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v185, v188, *(void *)(v185 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v185 + 23)) {
            break;
          }
          uint64_t v191 = 0;
          while (*(unsigned __int8 *)(v185 + v191) == v188[v191])
          {
            if (v189 == ++v191) {
              goto LABEL_380;
            }
          }
        }
      }
      v185 += 24;
      if (v185 == v186) {
        goto LABEL_409;
      }
    }
  }
LABEL_380:
  if (v185 != v186)
  {
    int v192 = byte_25C4767;
    if (byte_25C4767 >= 0) {
      size_t v193 = byte_25C4767;
    }
    else {
      size_t v193 = qword_25C4758;
    }
    int v194 = *(char *)(v103 + 23);
    if (v194 >= 0) {
      size_t v195 = *(unsigned __int8 *)(v103 + 23);
    }
    else {
      size_t v195 = *(void *)(v103 + 8);
    }
    unint64_t v196 = v195 + v193;
    if (v195 + v193 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v196 > 0x16)
    {
      uint64_t v198 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v196 | 7) != 0x17) {
        uint64_t v198 = v196 | 7;
      }
      uint64_t v199 = v198 + 1;
      uint64_t v197 = (long long *)operator new(v198 + 1);
      *((void *)&__dst + 1) = v195 + v193;
      unint64_t v215 = v199 | 0x8000000000000000;
      *(void *)&long long __dst = v197;
    }
    else
    {
      unint64_t v215 = 0;
      long long __dst = 0uLL;
      uint64_t v197 = &__dst;
      HIBYTE(v215) = v195 + v193;
    }
    if (v193)
    {
      if (v192 >= 0) {
        unint64_t v200 = &qword_25C4750;
      }
      else {
        unint64_t v200 = (uint64_t *)qword_25C4750;
      }
      memmove(v197, v200, v193);
    }
    uint64_t v201 = (char *)v197 + v193;
    if (v195)
    {
      if (v194 >= 0) {
        uint64_t v202 = (const void *)v103;
      }
      else {
        uint64_t v202 = *(const void **)v103;
      }
      memmove(v201, v202, v195);
    }
    v201[v195] = 0;
    unint64_t v203 = *(void *)(a4 + 8);
    if (v203 >= *(void *)(a4 + 16))
    {
      int v205 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
      int v206 = SHIBYTE(v215);
      *(void *)(a4 + 8) = v205;
      if (v206 < 0) {
        operator delete((void *)__dst);
      }
    }
    else
    {
      long long v204 = __dst;
      *(void *)(v203 + 16) = v215;
      *(_OWORD *)unint64_t v203 = v204;
      *(void *)(a4 + 8) = v203 + 24;
    }
  }
LABEL_409:
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
}

void sub_809CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_1A668(v33);
  _Unwind_Resume(a1);
}

void sub_809D84(uint64_t a1@<X8>)
{
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  int v9 = 1065353216;
  uint64_t v5 = 0;
  std::string::size_type v6 = 0;
  sub_6373D8(a1, (uint64_t)&qword_25C5C20, (uint64_t)__p, 4, &v5);
  uint64_t v1 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  uint64_t v2 = (void *)v8;
  if ((void)v8)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
}

void sub_809E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_809E70(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + 80;
  if (!*(unsigned char *)(a1 + 1860))
  {
    sub_635CD0((long long **)(a1 + 80), (uint64_t)__p);
    uint64_t v7 = sub_5231C(v3);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_6373D8((uint64_t)a2, (uint64_t)__p, v7, 2, &v9);
    long long v8 = v10;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v14 & 0x80000000) == 0) {
        return;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      return;
    }
    operator delete(__p[0]);
    return;
  }
  sub_635CD0((long long **)(a1 + 80), (uint64_t)__p);
  uint64_t v5 = sub_5231C(v3);
  uint64_t v11 = 0;
  int v12 = 0;
  sub_6373D8((uint64_t)a2, (uint64_t)__p, v5, 1, &v11);
  std::string::size_type v6 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_5:
      if (*(unsigned char *)(a1 + 1860))
      {
LABEL_6:
        sub_80DC58(a1, a2, 1);
        return;
      }
      goto LABEL_13;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p[0]);
  if (*(unsigned char *)(a1 + 1860)) {
    goto LABEL_6;
  }
LABEL_13:
  if (*(unsigned char *)(a1 + 1859)) {
    sub_80D830(a1, (uint64_t)a2, 1, 0);
  }
}

void sub_80A028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_80A078(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 1860))
  {
    sub_80DC58(a1, a2, a3);
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    sub_80D830(a1, (uint64_t)a2, a3, a4);
  }
}

uint64_t sub_80A094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

void sub_80A0B8(std::string::size_type a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    size_t v18 = 0;
    std::string::size_type v19 = 0;
    uint64_t v20 = 0;
    sub_8A6F8((char *)&v18, *(void *)(a1 + 80), *(void *)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
    sub_5954B0((uint64_t)&v21, a1 + 104);
    char v23 = *(unsigned char *)(a1 + 144);
    goto LABEL_18;
  }
  if (sub_800B24(a1))
  {
    if ((byte_25C579F & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5788;
LABEL_12:
      *(_OWORD *)std::string __p = *v5;
      uint64_t v17 = *((void *)v5 + 2);
      goto LABEL_16;
    }
    std::string::size_type v6 = &xmmword_25C5788;
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    if ((byte_25C5817 & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5800;
      goto LABEL_12;
    }
    std::string::size_type v6 = &xmmword_25C5800;
  }
  else
  {
    if ((byte_25C585F & 0x80000000) == 0)
    {
      uint64_t v5 = &xmmword_25C5848;
      goto LABEL_12;
    }
    std::string::size_type v6 = &xmmword_25C5848;
  }
  sub_4200(__p, *(void **)v6, *((void *)v6 + 1));
LABEL_16:
  sub_803A58(a1, 1, (uint64_t)__p, (uint64_t)&v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  uint64_t v14 = 0;
  int v15 = 0;
  sub_6370D4(a3, &v18, 1, &v14);
  uint64_t v7 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  long long v8 = v22;
  if (v22)
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      sub_4F4B48((uint64_t)(v8 + 2));
      operator delete(v8);
      long long v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = v21;
  unint64_t v21 = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v18;
  if (v18)
  {
    int v12 = v19;
    size_t v13 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      size_t v13 = v18;
    }
    std::string::size_type v19 = v11;
    operator delete(v13);
  }
}

void sub_80A2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_80A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_80A320(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 1856)) {
    sub_80A330(a1, a2, a3, a4);
  }
  else {
    sub_80B4C0(a1, a2, a3, a4);
  }
}

void sub_80A330(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v178 = 0uLL;
  v179[0] = 0;
  uint64_t v8 = *(void *)(a1 + 1952);
  uint64_t v9 = *(void *)(a1 + 1960);
  int v10 = *(_DWORD *)(a1 + 2128);
  uint64_t v11 = operator new(0x870uLL);
  int v12 = v10 - 1;
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v11 = off_243AD38;
  std::string::size_type v13 = (std::string::size_type)(v11 + 3);
  sub_801F98((std::string::size_type)(v11 + 3), v8, v9, a2, a3, v12);
  std::string::size_type v176 = (char *)(v11 + 3);
  size_t v177 = (std::__shared_weak_count *)v11;
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = a1 + 80;
  std::string::size_type v170 = 0;
  unint64_t v171 = 0;
  uint64_t v172 = 0;
  sub_8A6F8((char *)&v170, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  sub_5954B0((uint64_t)&v173, a1 + 104);
  char v175 = *(unsigned char *)(a1 + 144);
  if (sub_800B24((uint64_t)(v11 + 3)))
  {
    uint64_t v17 = &xmmword_25C5788;
    if ((byte_25C579F & 0x80000000) == 0)
    {
LABEL_3:
      long long __dst = *v17;
      uint64_t v169 = *((void *)v17 + 2);
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)v11 + 1883))
  {
    uint64_t v17 = &xmmword_25C5800;
    if ((byte_25C5817 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = &xmmword_25C5848;
    if ((byte_25C585F & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  sub_4200(&__dst, *(void **)v17, *((void *)v17 + 1));
LABEL_7:
  if (*((unsigned char *)v11 + 1876))
  {
    if (byte_25C4F77 < 0)
    {
      sub_4200(&v166, (void *)xmmword_25C4F60, *((unint64_t *)&xmmword_25C4F60 + 1));
    }
    else
    {
      long long v166 = xmmword_25C4F60;
      uint64_t v167 = unk_25C4F70;
    }
  }
  else
  {
    HIBYTE(v167) = 0;
    LOBYTE(v166) = 0;
  }
  uint64_t v18 = sub_7FE310(v13);
  sub_803A58(v13, 1, (uint64_t)&__dst, (uint64_t)&__p);
  sub_80BCF4(v13, &v149);
  if (v167 >= 0) {
    std::string::size_type v19 = (const std::string::value_type *)&v166;
  }
  else {
    std::string::size_type v19 = (const std::string::value_type *)v166;
  }
  if (v167 >= 0) {
    std::string::size_type v20 = HIBYTE(v167);
  }
  else {
    std::string::size_type v20 = *((void *)&v166 + 1);
  }
  unint64_t v21 = std::string::insert(&v149, 0, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v158 = v21->__r_.__value_.__r.__words[2];
  long long v157 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v149.__r_.__value_.__l.__data_);
  }
  if (sub_80BE58(a1, a1 + 80, (uint64_t)&__p))
  {
    sub_6352AC((uint64_t)&v149, (uint64_t)&v157);
    std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      uint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != v23);
        uint64_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v23;
      operator delete(v25);
    }
    std::string __p = v149;
    memset(&v149, 0, sizeof(v149));
    if (v163)
    {
      int v27 = v162;
      if (v162)
      {
        do
        {
          std::string::size_type v28 = (void *)*v27;
          sub_4F4B48((uint64_t)(v27 + 2));
          operator delete(v27);
          int v27 = v28;
        }
        while (v28);
      }
      long long v162 = 0;
      unint64_t v29 = v161;
      if (v161)
      {
        uint64_t v30 = 0;
        do
          *((void *)v160 + v30++) = 0;
        while (v29 != v30);
      }
      uint64_t v163 = 0;
    }
    int64_t v31 = v150;
    std::string::size_type v150 = 0;
    std::string::size_type v32 = v160;
    std::string::size_type v160 = v31;
    if (v32) {
      operator delete(v32);
    }
    unint64_t v33 = v151;
    uint64_t v34 = v152;
    unint64_t v151 = 0;
    uint64_t v163 = v153;
    int v164 = v154;
    unint64_t v161 = v33;
    long long v162 = v152;
    if (v153)
    {
      unint64_t v35 = v152[1];
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v35 >= v33) {
          v35 %= v33;
        }
      }
      else
      {
        v35 &= v33 - 1;
      }
      *((void *)v160 + v35) = &v162;
      int v152 = 0;
      uint64_t v153 = 0;
      char v165 = v155;
    }
    else
    {
      char v165 = v155;
      if (v152)
      {
        do
        {
          uint64_t v36 = (void *)*v34;
          sub_4F4B48((uint64_t)(v34 + 2));
          operator delete(v34);
          uint64_t v34 = v36;
        }
        while (v36);
      }
    }
    int64_t v37 = v150;
    std::string::size_type v150 = 0;
    if (v37) {
      operator delete(v37);
    }
    std::string::size_type v38 = v149.__r_.__value_.__r.__words[0];
    if (v149.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v39 = v149.__r_.__value_.__l.__size_;
      unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
      if (v149.__r_.__value_.__l.__size_ != v149.__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v39 - 1) < 0) {
            operator delete(*(void **)(v39 - 24));
          }
          v39 -= 24;
        }
        while (v39 != v38);
        unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
      }
      v149.__r_.__value_.__l.__size_ = v38;
      goto LABEL_62;
    }
  }
  else if (*((unsigned char *)v11 + 1876))
  {
    sub_635CD0((long long **)&__p, (uint64_t)&v149);
    sub_80138C(a1, (char *)&v149);
    sub_63552C((uint64_t)&__p);
    sub_6351E8(&__p.__r_.__value_.__l.__data_, (uint64_t)&v149);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v26 = (void *)v149.__r_.__value_.__r.__words[0];
LABEL_62:
      operator delete(v26);
    }
  }
  uint64_t v147 = 0;
  std::string::size_type v148 = 0;
  sub_6370D4(&v149, &__p, 1, &v147);
  int64_t v40 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    uint64_t v41 = (uint64_t)v176;
    if (v176[1860]) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v41 = (uint64_t)v176;
    if (v176[1860])
    {
LABEL_66:
      sub_80DC58(v41, (uint64_t *)&v149, 0);
      goto LABEL_70;
    }
  }
  if (*(unsigned char *)(v41 + 1859)) {
    sub_80D830(v41, (uint64_t)&v149, 0, 0);
  }
LABEL_70:
  sub_635CD0((long long **)(a1 + 80), (uint64_t)v145);
  uint64_t v42 = sub_5231C(a1 + 80);
  sub_63531C((uint64_t)&v130, (uint64_t)v145, v42);
  int64_t v43 = (std::__shared_weak_count *)operator new(0x80uLL);
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v126, (uint64_t)&v43[1], (uint64_t)&v149);
  long long v138 = &v43[1].__vftable;
  unint64_t v139 = v43;
  sub_6370D4(&v140, &v130, v18, &v138);
  unsigned __int8 v44 = v139;
  if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  std::string v45 = v133;
  if (v133)
  {
    do
    {
      std::string v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      std::string v45 = v46;
    }
    while (v46);
  }
  unint64_t v47 = v132;
  uint64_t v132 = 0;
  if (v47) {
    operator delete(v47);
  }
  std::string v48 = (void **)v130;
  if (v130)
  {
    int64_t v49 = v131;
    std::string v50 = v130;
    if (v131 != v130)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      std::string v50 = v130;
    }
    int64_t v131 = v48;
    operator delete(v50);
  }
  if (*(unsigned char *)(a1 + 1860))
  {
    sub_80DC58(a1, (uint64_t *)&v140, 0);
  }
  else if (*(unsigned char *)(a1 + 1859))
  {
    sub_80D830(a1, (uint64_t)&v140, 0, 0);
  }
  uint64_t v51 = *((void *)&v178 + 1);
  if (*((void *)&v178 + 1) >= v179[0])
  {
    uint64_t v52 = sub_81A350((uint64_t *)&v178, (uint64_t)&v140);
  }
  else
  {
    sub_59540C((uint64_t)v179, *((uint64_t *)&v178 + 1), (uint64_t)&v140);
    uint64_t v52 = v51 + 104;
  }
  *((void *)&v178 + 1) = v52;
  int v53 = (uint64_t *)nullsub_1(&v170);
  uint64_t v135 = 0;
  std::string::size_type v136 = 0;
  unint64_t v137 = 0;
  sub_8A6F8((char *)&v135, *v53, v53[1], 0xAAAAAAAAAAAAAAABLL * ((v53[1] - *v53) >> 3));
  long long v54 = (char *)v135;
  std::string::size_type v55 = (void **)v136;
  if (0xAAAAAAAAAAAAAAABLL * ((v136 - (unsigned char *)v135) >> 3) >= 3)
  {
    if ((char *)v135 + 24 != v136)
    {
      size_t v56 = (char *)v135 + 23;
      do
      {
        int v57 = (void **)(v56 - 23);
        if (*v56 < 0) {
          operator delete(*v57);
        }
        *(_OWORD *)int v57 = *(_OWORD *)(v56 + 1);
        *(void *)(v56 - 7) = *(void *)(v56 + 17);
        v56[24] = 0;
        v56 += 24;
        *(v56 - 23) = 0;
        v54 += 24;
      }
      while (v56 + 1 != (char *)v55);
      std::string::size_type v55 = (void **)v136;
    }
    while (v55 != (void **)v54)
    {
      if (*((char *)v55 - 1) < 0) {
        operator delete(*(v55 - 3));
      }
      v55 -= 3;
    }
    std::string::size_type v136 = v54;
    if (*(v54 - 1) < 0) {
      operator delete(*((void **)v54 - 3));
    }
    std::string::size_type v136 = v54 - 24;
    sub_6353B4((uint64_t)&v170, (std::string **)&v135);
    sub_6352AC((uint64_t)&v126, (uint64_t)&v157);
    sub_6376A0(&v130, &v170, v18, &v126, 1);
    std::string::size_type v58 = v129;
    if (v129)
    {
      do
      {
        std::string::size_type v59 = (void *)*v58;
        sub_4F4B48((uint64_t)(v58 + 2));
        operator delete(v58);
        std::string::size_type v58 = v59;
      }
      while (v59);
    }
    uint64_t v60 = v128;
    int v128 = 0;
    if (v60) {
      operator delete(v60);
    }
    int v61 = (void **)v126;
    if (v126)
    {
      uint64_t v62 = v127;
      unint64_t v63 = v126;
      if (v127 != v126)
      {
        do
        {
          if (*((char *)v62 - 1) < 0) {
            operator delete(*(v62 - 3));
          }
          v62 -= 3;
        }
        while (v62 != v61);
        unint64_t v63 = v126;
      }
      unint64_t v127 = v61;
      operator delete(v63);
    }
    if (*(unsigned char *)(a1 + 1860))
    {
      sub_80DC58(a1, (uint64_t *)&v130, 0);
    }
    else if (*(unsigned char *)(a1 + 1859))
    {
      sub_80D830(a1, (uint64_t)&v130, 0, 0);
    }
    uint64_t v64 = *((void *)&v178 + 1);
    if (*((void *)&v178 + 1) >= v179[0])
    {
      uint64_t v65 = sub_81A350((uint64_t *)&v178, (uint64_t)&v130);
    }
    else
    {
      sub_59540C((uint64_t)v179, *((uint64_t *)&v178 + 1), (uint64_t)&v130);
      uint64_t v65 = v64 + 104;
    }
    *((void *)&v178 + 1) = v65;
    std::string::size_type v66 = v134;
    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    int64_t v67 = v133;
    if (v133)
    {
      do
      {
        int v68 = (void *)*v67;
        sub_4F4B48((uint64_t)(v67 + 2));
        operator delete(v67);
        int64_t v67 = v68;
      }
      while (v68);
    }
    uint64_t v69 = v132;
    uint64_t v132 = 0;
    if (v69) {
      operator delete(v69);
    }
    uint64_t v70 = (void **)v130;
    if (v130)
    {
      int64_t v71 = v131;
      size_t v72 = v130;
      if (v131 != v130)
      {
        do
        {
          if (*((char *)v71 - 1) < 0) {
            operator delete(*(v71 - 3));
          }
          v71 -= 3;
        }
        while (v71 != v70);
        size_t v72 = v130;
      }
      int64_t v131 = v70;
      operator delete(v72);
    }
  }
  sub_63C898((uint64_t)&v135, 0, 0, 0);
  uint64_t v73 = (void *)nullsub_1(a1 + 80);
  unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73[1] - *v73) >> 3);
  if (v74 != 1)
  {
    if (!v74)
    {
      unint64_t v75 = v136;
      if (v135 == v136) {
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    if (*(_DWORD *)(a1 + 1848) != 17 || !*(unsigned char *)(a1 + 1856)) {
      goto LABEL_168;
    }
    int v76 = *(unsigned __int8 ***)(a1 + 1968);
    char v77 = *((unsigned char *)v76 + 23);
    if (v77 < 0)
    {
      if (!v76[1])
      {
LABEL_168:
        int v85 = (void *)nullsub_1(v16);
        int64_t v86 = (void **)(*v85 + 24 * v74 - 48);
        uint64_t v87 = v136;
        if ((unint64_t)v136 >= v137)
        {
          uint64_t v89 = sub_1D740((char **)&v135, (uint64_t)v86);
        }
        else
        {
          if (*(char *)(*v85 + 24 * v74 - 25) < 0)
          {
            sub_4200(v136, *v86, *(void *)(*v85 + 24 * v74 - 40));
          }
          else
          {
            long long v88 = *(_OWORD *)v86;
            *((void *)v136 + 2) = *(void *)(*v85 + 24 * v74 - 32);
            _OWORD *v87 = v88;
          }
          uint64_t v89 = (char *)v87 + 24;
        }
        std::string::size_type v136 = v89;
        goto LABEL_175;
      }
    }
    else if (!*((unsigned char *)v76 + 23))
    {
      goto LABEL_168;
    }
    uint64_t v78 = qword_25C6328;
    uint64_t v79 = *(void *)algn_25C6330;
    if (qword_25C6328 != *(void *)algn_25C6330)
    {
      if (v77 >= 0) {
        int64_t v80 = (unsigned __int8 *)*((unsigned __int8 *)v76 + 23);
      }
      else {
        int64_t v80 = v76[1];
      }
      if (v77 >= 0) {
        int64_t v81 = *(unsigned __int8 **)(a1 + 1968);
      }
      else {
        int64_t v81 = *v76;
      }
      while (1)
      {
        uint64_t v82 = *(unsigned __int8 *)(v78 + 23);
        if ((v82 & 0x80u) == 0) {
          std::string::size_type v83 = (unsigned __int8 *)*(unsigned __int8 *)(v78 + 23);
        }
        else {
          std::string::size_type v83 = *(unsigned __int8 **)(v78 + 8);
        }
        if (v83 == v80)
        {
          if ((v82 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v78, v81, *(void *)(v78 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v78 + 23)) {
              break;
            }
            uint64_t v84 = 0;
            while (*(unsigned __int8 *)(v78 + v84) == v81[v84])
            {
              if (v82 == ++v84) {
                goto LABEL_167;
              }
            }
          }
        }
        v78 += 24;
        if (v78 == v79) {
          goto LABEL_168;
        }
      }
    }
LABEL_167:
    if (v78 == v79) {
      goto LABEL_168;
    }
  }
LABEL_175:
  uint64_t v90 = *(void *)(nullsub_1(v16) + 8);
  std::string::size_type v91 = (long long *)(v90 - 24);
  std::string::size_type v92 = v136;
  if ((unint64_t)v136 >= v137)
  {
    unint64_t v75 = sub_1D740((char **)&v135, (uint64_t)v91);
    std::string::size_type v136 = v75;
    if (v135 != v75) {
      goto LABEL_182;
    }
  }
  else
  {
    if (*(char *)(v90 - 1) < 0)
    {
      sub_4200(v136, *(void **)(v90 - 24), *(void *)(v90 - 16));
      unint64_t v75 = (char *)v92 + 24;
      std::string::size_type v136 = v75;
      if (v135 == v75) {
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    long long v93 = *v91;
    *((void *)v136 + 2) = *(void *)(v90 - 8);
    *std::string::size_type v92 = v93;
    unint64_t v75 = (char *)v92 + 24;
    std::string::size_type v136 = v75;
    if (v135 != v75)
    {
LABEL_182:
      sub_6353B4((uint64_t)&v170, (std::string **)&v135);
      LODWORD(v130) = 1;
      sub_7FE9A4((uint64_t)&v178, (uint64_t)&v170, (unsigned int *)&v130);
      unint64_t v75 = (char *)v135;
    }
  }
LABEL_183:
  *(_OWORD *)a4 = v178;
  *(void *)(a4 + 16) = v179[0];
  v179[0] = 0;
  long long v178 = 0uLL;
  if (v75)
  {
    uint64_t v94 = (void **)v136;
    uint64_t v95 = v75;
    if (v136 != v75)
    {
      do
      {
        if (*((char *)v94 - 1) < 0) {
          operator delete(*(v94 - 3));
        }
        v94 -= 3;
      }
      while (v94 != (void **)v75);
      uint64_t v95 = v135;
    }
    std::string::size_type v136 = v75;
    operator delete(v95);
  }
  std::string::size_type v96 = v144;
  if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  uint64_t v97 = v143;
  if (v143)
  {
    do
    {
      long long v98 = (void *)*v97;
      sub_4F4B48((uint64_t)(v97 + 2));
      operator delete(v97);
      uint64_t v97 = v98;
    }
    while (v98);
  }
  unint64_t v99 = v142;
  uint64_t v142 = 0;
  if (v99) {
    operator delete(v99);
  }
  long long v100 = (void **)v140;
  if (v140)
  {
    std::string::size_type v101 = v141;
    std::string::size_type v102 = v140;
    if (v141 != v140)
    {
      do
      {
        if (*((char *)v101 - 1) < 0) {
          operator delete(*(v101 - 3));
        }
        v101 -= 3;
      }
      while (v101 != v100);
      std::string::size_type v102 = v140;
    }
    uint64_t v141 = v100;
    operator delete(v102);
  }
  if (v146 < 0) {
    operator delete(v145[0]);
  }
  uint64_t v103 = v156;
  if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  uint64_t v104 = v152;
  if (v152)
  {
    do
    {
      int64_t v105 = (void *)*v104;
      sub_4F4B48((uint64_t)(v104 + 2));
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v150;
  std::string::size_type v150 = 0;
  if (v106) {
    operator delete(v106);
  }
  std::string::size_type v107 = v149.__r_.__value_.__r.__words[0];
  if (v149.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v108 = v149.__r_.__value_.__l.__size_;
    std::string::size_type v109 = (void *)v149.__r_.__value_.__r.__words[0];
    if (v149.__r_.__value_.__l.__size_ != v149.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v108 - 1) < 0) {
          operator delete(*(void **)(v108 - 24));
        }
        v108 -= 24;
      }
      while (v108 != v107);
      std::string::size_type v109 = (void *)v149.__r_.__value_.__r.__words[0];
    }
    v149.__r_.__value_.__l.__size_ = v107;
    operator delete(v109);
  }
  if (SHIBYTE(v158) < 0) {
    operator delete((void *)v157);
  }
  std::string::size_type v110 = v162;
  if (v162)
  {
    do
    {
      uint64_t v111 = (void *)*v110;
      sub_4F4B48((uint64_t)(v110 + 2));
      operator delete(v110);
      std::string::size_type v110 = v111;
    }
    while (v111);
  }
  uint64_t v112 = v160;
  std::string::size_type v160 = 0;
  if (v112) {
    operator delete(v112);
  }
  std::string::size_type v113 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v114 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v115 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v114 - 1) < 0) {
          operator delete(*(void **)(v114 - 24));
        }
        v114 -= 24;
      }
      while (v114 != v113);
      std::string::size_type v115 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v113;
    operator delete(v115);
  }
  if ((SHIBYTE(v167) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_239;
    }
LABEL_261:
    operator delete((void *)__dst);
    int v116 = v174;
    if (!v174) {
      goto LABEL_241;
    }
    goto LABEL_240;
  }
  operator delete((void *)v166);
  if (SHIBYTE(v169) < 0) {
    goto LABEL_261;
  }
LABEL_239:
  int v116 = v174;
  if (!v174) {
    goto LABEL_241;
  }
  do
  {
LABEL_240:
    long long v117 = (void *)*v116;
    sub_4F4B48((uint64_t)(v116 + 2));
    operator delete(v116);
    int v116 = v117;
  }
  while (v117);
LABEL_241:
  unint64_t v118 = v173;
  uint64_t v173 = 0;
  if (v118) {
    operator delete(v118);
  }
  long long v119 = v170;
  if (v170)
  {
    unint64_t v120 = v171;
    int v121 = v170;
    if (v171 != v170)
    {
      do
      {
        if (*((char *)v120 - 1) < 0) {
          operator delete(*(v120 - 3));
        }
        v120 -= 3;
      }
      while (v120 != v119);
      int v121 = v170;
    }
    unint64_t v171 = v119;
    operator delete(v121);
  }
  std::string::size_type v122 = v177;
  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  int v123 = (void **)v178;
  if ((void)v178)
  {
    int v124 = (void **)*((void *)&v178 + 1);
    std::string::size_type v125 = (void *)v178;
    if (*((void *)&v178 + 1) != (void)v178)
    {
      do
        int v124 = sub_4F31D0(v124 - 13);
      while (v124 != v123);
      std::string::size_type v125 = (void *)v178;
    }
    *((void *)&v178 + 1) = v123;
    operator delete(v125);
  }
}